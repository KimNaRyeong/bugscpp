        -:    0:Source:/home/workspace/src/mod_aux.c
        -:    1:/*
        -:    2: * mod_aux.c
        -:    3: *
        -:    4: * Copyright (c) 2005, 2006, 2008
        -:    5: *	libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:/**
        -:   12: * @file mod_aux.c
        -:   13: * @brief Auxiliary module
        -:   14: */
        -:   15:
        -:   16:#include <string.h>
        -:   17:#include <stdlib.h>
        -:   18:
        -:   19:#include "global.h"
        -:   20:#include "chewing-private.h"
        -:   21:#include "zuin-private.h"
        -:   22:#include "chewingio.h"
        -:   23:#include "chewing-utf8-util.h"
        -:   24:#include "private.h"
        -:   25:
        -:   26:/**
        -:   27: * @param ctx handle to Chewing IM context
        -:   28: * @retval TRUE if it currnet input state is at the "end-of-a-char"
        -:   29: */
        8:   30:CHEWING_API int chewing_commit_Check( ChewingContext *ctx )
        -:   31:{
        -:   32:	ChewingData *pgdata;
        -:   33:
        8:   34:	if ( !ctx ) {
    #####:   35:		return -1;
        -:   36:	}
        8:   37:	pgdata = ctx->data;
        -:   38:
        8:   39:	LOG_API();
        -:   40:
        8:   41:	return !!(ctx->output->keystrokeRtn & KEYSTROKE_COMMIT);
        -:   42:}
        -:   43:
        -:   44:/**
        -:   45: * @param ctx handle to Chewing IM context
        -:   46: *
        -:   47: * retrun current commit string, regardless current input state.
        -:   48: * Alwasy returns a char pointer, caller must free it.
        -:   49: */
        8:   50:CHEWING_API char *chewing_commit_String( ChewingContext *ctx )
        -:   51:{
        -:   52:	ChewingData *pgdata;
        -:   53:
        8:   54:	if ( !ctx ) {
    #####:   55:		return strdup("");
        -:   56:	}
        8:   57:	pgdata = ctx->data;
        -:   58:
        8:   59:	LOG_API();
        -:   60:
        8:   61:	return strdup( ctx->output->commitBuf );
        -:   62:}
        -:   63:
        -:   64:/**
        -:   65: * @param ctx handle to Chewing IM context
        -:   66: * retrun current commit string, regardless current input state.
        -:   67: * Alwasy returns a const char pointer, you have to clone them immediately,
        -:   68: * if you need.
        -:   69: */
        8:   70:CHEWING_API const char *chewing_commit_String_static( ChewingContext *ctx )
        -:   71:{
        -:   72:	ChewingData *pgdata;
        -:   73:
        8:   74:	if ( !ctx ) {
    #####:   75:		return "";
        -:   76:	}
        8:   77:	pgdata = ctx->data;
        -:   78:
        8:   79:	LOG_API();
        -:   80:
        8:   81:	return ctx->output->commitBuf;
        -:   82:}
        -:   83:
       12:   84:CHEWING_API int chewing_buffer_Check( ChewingContext *ctx )
        -:   85:{
        -:   86:	ChewingData *pgdata;
        -:   87:
       12:   88:	if ( !ctx ) {
    #####:   89:		return -1;
        -:   90:	}
       12:   91:	pgdata = ctx->data;
        -:   92:
       12:   93:	LOG_API();
        -:   94:
       12:   95:	return (ctx->output->chiSymbolBufLen != 0);
        -:   96:}
        -:   97:
       12:   98:CHEWING_API int chewing_buffer_Len( ChewingContext *ctx )
        -:   99:{
        -:  100:	ChewingData *pgdata;
        -:  101:
       12:  102:	if ( !ctx ) {
    #####:  103:		return -1;
        -:  104:	}
       12:  105:	pgdata = ctx->data;
        -:  106:
       12:  107:	LOG_API();
        -:  108:
       12:  109:	return ctx->output->chiSymbolBufLen;
        -:  110:}
        -:  111:
       12:  112:CHEWING_API char *chewing_buffer_String( ChewingContext *ctx )
        -:  113:{
        -:  114:	ChewingData *pgdata;
        -:  115:
       12:  116:	if ( !ctx ) {
    #####:  117:		return strdup("");
        -:  118:	}
       12:  119:	pgdata = ctx->data;
        -:  120:
       12:  121:	LOG_API();
        -:  122:
       12:  123:	return strdup( ctx->output->preeditBuf );
        -:  124:}
        -:  125:
       12:  126:CHEWING_API const char *chewing_buffer_String_static( ChewingContext *ctx )
        -:  127:{
        -:  128:	ChewingData *pgdata;
        -:  129:
       12:  130:	if ( !ctx ) {
    #####:  131:		return "";
        -:  132:	}
       12:  133:	pgdata = ctx->data;
        -:  134:
       12:  135:	LOG_API();
        -:  136:
       12:  137:	return ctx->output->preeditBuf;
        -:  138:}
        -:  139:
        -:  140:/**
        -:  141: * @param ctx handle to Chewing IM context
        -:  142: *
        -:  143: * Alwasy returns a const char pointer, you have to clone them immediately,
        -:  144: * if you need.
        -:  145: */
        8:  146:CHEWING_API const char *chewing_bopomofo_String_static( ChewingContext *ctx)
        -:  147:{
        -:  148:	ChewingData *pgdata;
        -:  149:
        8:  150:	if ( !ctx ) {
    #####:  151:		return "";
        -:  152:	}
        8:  153:	pgdata = ctx->data;
        -:  154:
        8:  155:	LOG_API();
        -:  156:
        8:  157:	return ctx->output->bopomofoBuf;
        -:  158:}
        -:  159:/**
        -:  160: * @param ctx handle to Chewing IM context
        -:  161: * @param zuin_count pointer to the integer of available Zuin preedit string
        -:  162: *
        -:  163: * Always returns a char pointer, caller must free it.
        -:  164: */
        4:  165:CHEWING_API char *chewing_zuin_String( ChewingContext *ctx, int *zuin_count )
        -:  166:{
        4:  167:	char *s = strdup(chewing_bopomofo_String_static(ctx));
        -:  168:
        4:  169:	if ( zuin_count )
        4:  170:		*zuin_count = ueStrLen(s);
        -:  171:
        4:  172:	return s;
        -:  173:}
        -:  174:
        8:  175:CHEWING_API int chewing_bopomofo_Check( ChewingContext *ctx )
        -:  176:{
        -:  177:	ChewingData *pgdata;
        -:  178:
        8:  179:	if ( !ctx ) {
    #####:  180:		return -1;
        -:  181:	}
        8:  182:	pgdata = ctx->data;
        -:  183:
        8:  184:	LOG_API();
        -:  185:
        8:  186:	return ctx->output->bopomofoBuf[0] != 0;
        -:  187:}
        -:  188:
        4:  189:CHEWING_API int chewing_zuin_Check( ChewingContext *ctx )
        -:  190:{
        4:  191:	if ( !ctx ) {
    #####:  192:		return -1;
        -:  193:	}
        -:  194:
        4:  195:	return !chewing_bopomofo_Check(ctx);
        -:  196:}
        -:  197:
    #####:  198:CHEWING_API int chewing_cursor_Current( ChewingContext *ctx )
        -:  199:{
        -:  200:	ChewingData *pgdata;
        -:  201:
    #####:  202:	if ( !ctx ) {
    #####:  203:		return -1;
        -:  204:	}
    #####:  205:	pgdata = ctx->data;
        -:  206:
    #####:  207:	LOG_API();
        -:  208:
    #####:  209:	return (ctx->output->chiSymbolCursor);
        -:  210:}
        -:  211:
    #####:  212:CHEWING_API int chewing_cand_CheckDone( ChewingContext *ctx )
        -:  213:{
        -:  214:	ChewingData *pgdata;
        -:  215:
    #####:  216:	if ( !ctx ) {
    #####:  217:		return -1;
        -:  218:	}
    #####:  219:	pgdata = ctx->data;
        -:  220:
    #####:  221:	LOG_API();
        -:  222:
    #####:  223:	return (! ctx->output->pci);
        -:  224:}
        -:  225:
    #####:  226:CHEWING_API int chewing_cand_TotalPage( ChewingContext *ctx )
        -:  227:{
        -:  228:	ChewingData *pgdata;
        -:  229:
    #####:  230:	if ( !ctx ) {
    #####:  231:		return -1;
        -:  232:	}
    #####:  233:	pgdata = ctx->data;
        -:  234:
    #####:  235:	LOG_API();
        -:  236:
    #####:  237:	return (ctx->output->pci ? ctx->output->pci->nPage : 0);
        -:  238:}
        -:  239:
    #####:  240:CHEWING_API int chewing_cand_ChoicePerPage( ChewingContext *ctx )
        -:  241:{
        -:  242:	ChewingData *pgdata;
        -:  243:
    #####:  244:	if ( !ctx ) {
    #####:  245:		return -1;
        -:  246:	}
    #####:  247:	pgdata = ctx->data;
        -:  248:
    #####:  249:	LOG_API();
        -:  250:
    #####:  251:	return (ctx->output->pci ? ctx->output->pci->nChoicePerPage : 0);
        -:  252:}
        -:  253:
       18:  254:CHEWING_API int chewing_cand_TotalChoice( ChewingContext *ctx )
        -:  255:{
        -:  256:	ChewingData *pgdata;
        -:  257:
       18:  258:	if ( !ctx ) {
    #####:  259:		return -1;
        -:  260:	}
       18:  261:	pgdata = ctx->data;
        -:  262:
       18:  263:	LOG_API();
        -:  264:
       18:  265:	return (ctx->output->pci ? ctx->output->pci->nTotalChoice : 0);
        -:  266:}
        -:  267:
    #####:  268:CHEWING_API int chewing_cand_CurrentPage( ChewingContext *ctx )
        -:  269:{
        -:  270:	ChewingData *pgdata;
        -:  271:
    #####:  272:	if ( !ctx ) {
    #####:  273:		return -1;
        -:  274:	}
    #####:  275:	pgdata = ctx->data;
        -:  276:
    #####:  277:	LOG_API();
        -:  278:
    #####:  279:	return (ctx->output->pci ? ctx->output->pci->pageNo : -1);
        -:  280:}
        -:  281:
    #####:  282:CHEWING_API void chewing_cand_Enumerate( ChewingContext *ctx )
        -:  283:{
        -:  284:	ChewingData *pgdata;
        -:  285:
    #####:  286:	if ( !ctx ) {
    #####:  287:		return;
        -:  288:	}
    #####:  289:	pgdata = ctx->data;
        -:  290:
    #####:  291:	LOG_API();
        -:  292:
    #####:  293:	ctx->cand_no = ctx->output->pci->pageNo * ctx->output->pci->nChoicePerPage;
        -:  294:}
        -:  295:
    #####:  296:CHEWING_API int chewing_cand_hasNext( ChewingContext *ctx )
        -:  297:{
        -:  298:	ChewingData *pgdata;
        -:  299:
    #####:  300:	if ( !ctx ) {
    #####:  301:		return -1;
        -:  302:	}
    #####:  303:	pgdata = ctx->data;
        -:  304:
    #####:  305:	LOG_API();
        -:  306:
    #####:  307:	return (ctx->cand_no < ctx->output->pci->nTotalChoice);
        -:  308:}
        -:  309:
    #####:  310:CHEWING_API const char *chewing_cand_String_static( ChewingContext *ctx )
        -:  311:{
        -:  312:	ChewingData *pgdata;
        -:  313:
    #####:  314:	if ( !ctx ) {
    #####:  315:		return "";
        -:  316:	}
    #####:  317:	pgdata = ctx->data;
        -:  318:
    #####:  319:	LOG_API();
        -:  320:
        -:  321:	char *s;
    #####:  322:	if ( chewing_cand_hasNext( ctx ) ) {
    #####:  323:		s = ctx->output->pci->totalChoiceStr[ ctx->cand_no ];
    #####:  324:		ctx->cand_no++;
        -:  325:	} else {
    #####:  326:		s = "";
        -:  327:	}
    #####:  328:	return s;
        -:  329:}
        -:  330:
    #####:  331:CHEWING_API char *chewing_cand_String( ChewingContext *ctx )
        -:  332:{
    #####:  333:	return strdup(chewing_cand_String_static(ctx));
        -:  334:}
        -:  335:
    #####:  336:CHEWING_API void chewing_interval_Enumerate( ChewingContext *ctx )
        -:  337:{
        -:  338:	ChewingData *pgdata;
        -:  339:
    #####:  340:	if ( !ctx ) {
    #####:  341:		return;
        -:  342:	}
    #####:  343:	pgdata = ctx->data;
        -:  344:
    #####:  345:	LOG_API();
        -:  346:
    #####:  347:	ctx->it_no = 0;
        -:  348:}
        -:  349:
    #####:  350:CHEWING_API int chewing_interval_hasNext( ChewingContext *ctx )
        -:  351:{
        -:  352:	ChewingData *pgdata;
        -:  353:
    #####:  354:	if ( !ctx ) {
    #####:  355:		return -1;
        -:  356:	}
    #####:  357:	pgdata = ctx->data;
        -:  358:
    #####:  359:	LOG_API();
        -:  360:
    #####:  361:	return (ctx->it_no < ctx->output->nDispInterval);
        -:  362:}
        -:  363:
    #####:  364:CHEWING_API void chewing_interval_Get( ChewingContext *ctx, IntervalType *it )
        -:  365:{
        -:  366:	ChewingData *pgdata;
        -:  367:
    #####:  368:	if ( !ctx ) {
    #####:  369:		return;
        -:  370:	}
    #####:  371:	pgdata = ctx->data;
        -:  372:
    #####:  373:	LOG_API();
        -:  374:
    #####:  375:	if ( chewing_interval_hasNext( ctx ) ) {
    #####:  376:		if ( it ) {
    #####:  377:			it->from = ctx->output->dispInterval[ ctx->it_no ].from;
    #####:  378:			it->to = ctx->output->dispInterval[ ctx->it_no ].to;
        -:  379:		}
    #####:  380:		ctx->it_no++;
        -:  381:	}
        -:  382:}
        -:  383:
    #####:  384:CHEWING_API int chewing_aux_Check( ChewingContext *ctx )
        -:  385:{
        -:  386:	ChewingData *pgdata;
        -:  387:
    #####:  388:	if ( !ctx ) {
    #####:  389:		return -1;
        -:  390:	}
    #####:  391:	pgdata = ctx->data;
        -:  392:
    #####:  393:	LOG_API();
        -:  394:
    #####:  395:	return (ctx->data->bShowMsg);
        -:  396:}
        -:  397:
    #####:  398:CHEWING_API int chewing_aux_Length( ChewingContext *ctx )
        -:  399:{
        -:  400:	ChewingData *pgdata;
        -:  401:
    #####:  402:	if ( !ctx ) {
    #####:  403:		return -1;
        -:  404:	}
    #####:  405:	pgdata = ctx->data;
        -:  406:
    #####:  407:	LOG_API();
        -:  408:
    #####:  409:	return (ctx->data->bShowMsg ? ctx->data->showMsgLen : 0);
        -:  410:}
        -:  411:
    #####:  412:CHEWING_API const char *chewing_aux_String_static( ChewingContext *ctx )
        -:  413:{
        -:  414:	ChewingData *pgdata;
        -:  415:
    #####:  416:	if ( !ctx ) {
    #####:  417:		return "";
        -:  418:	}
    #####:  419:	pgdata = ctx->data;
        -:  420:
    #####:  421:	LOG_API();
        -:  422:
    #####:  423:	return ctx->data->showMsg;
        -:  424:}
        -:  425:
    #####:  426:CHEWING_API char *chewing_aux_String( ChewingContext *ctx )
        -:  427:{
        -:  428:	ChewingData *pgdata;
        -:  429:
    #####:  430:	if ( !ctx ) {
    #####:  431:		return strdup("");
        -:  432:	}
    #####:  433:	pgdata = ctx->data;
        -:  434:
    #####:  435:	LOG_API();
        -:  436:
    #####:  437:	return strdup(chewing_aux_String_static(ctx));
        -:  438:}
        -:  439:
    #####:  440:CHEWING_API int chewing_keystroke_CheckIgnore( ChewingContext *ctx )
        -:  441:{
        -:  442:	ChewingData *pgdata;
        -:  443:
    #####:  444:	if ( !ctx ) {
    #####:  445:		return -1;
        -:  446:	}
    #####:  447:	pgdata = ctx->data;
        -:  448:
    #####:  449:	LOG_API();
        -:  450:
    #####:  451:	return !!(ctx->output->keystrokeRtn & KEYSTROKE_IGNORE);
        -:  452:}
        -:  453:
    #####:  454:CHEWING_API int chewing_keystroke_CheckAbsorb( ChewingContext *ctx )
        -:  455:{
        -:  456:	ChewingData *pgdata;
        -:  457:
    #####:  458:	if ( !ctx ) {
    #####:  459:		return -1;
        -:  460:	}
    #####:  461:	pgdata = ctx->data;
        -:  462:
    #####:  463:	LOG_API();
        -:  464:
    #####:  465:	return !!(ctx->output->keystrokeRtn & KEYSTROKE_ABSORB);
        -:  466:}
        -:  467:
    #####:  468:CHEWING_API int chewing_kbtype_Total( ChewingContext *ctx UNUSED )
        -:  469:{
    #####:  470:	return KB_TYPE_NUM;
        -:  471:}
        -:  472:
    #####:  473:CHEWING_API void chewing_kbtype_Enumerate( ChewingContext *ctx )
        -:  474:{
        -:  475:	ChewingData *pgdata;
        -:  476:
    #####:  477:	if ( !ctx ) {
    #####:  478:		return;
        -:  479:	}
    #####:  480:	pgdata = ctx->data;
        -:  481:
    #####:  482:	LOG_API();
        -:  483:
    #####:  484:	ctx->kb_no = 0;
        -:  485:}
        -:  486:
    #####:  487:CHEWING_API int chewing_kbtype_hasNext( ChewingContext *ctx )
        -:  488:{
        -:  489:	ChewingData *pgdata;
        -:  490:
    #####:  491:	if ( !ctx ) {
    #####:  492:		return -1;
        -:  493:	}
    #####:  494:	pgdata = ctx->data;
        -:  495:
    #####:  496:	LOG_API();
        -:  497:
    #####:  498:	return ctx->kb_no < KB_TYPE_NUM;
        -:  499:}
        -:  500:
        -:  501:extern const char * const kb_type_str[];
        -:  502:
    #####:  503:CHEWING_API const char *chewing_kbtype_String_static( ChewingContext *ctx )
        -:  504:{
        -:  505:	ChewingData *pgdata;
        -:  506:
    #####:  507:	if ( !ctx ) {
    #####:  508:		return "";
        -:  509:	}
    #####:  510:	pgdata = ctx->data;
        -:  511:
    #####:  512:	LOG_API();
        -:  513:
        -:  514:	char *s;
    #####:  515:	if ( chewing_kbtype_hasNext( ctx ) ) {
    #####:  516:		s = (char *)kb_type_str[ ctx->kb_no ];
    #####:  517:		ctx->kb_no++;
        -:  518:	}
        -:  519:	else {
    #####:  520:		s =  "";
        -:  521:	}
    #####:  522:	return s;
        -:  523:}
        -:  524:
    #####:  525:CHEWING_API char *chewing_kbtype_String( ChewingContext *ctx )
        -:  526:{
        -:  527:	ChewingData *pgdata;
        -:  528:
    #####:  529:	if ( !ctx ) {
    #####:  530:		return strdup("");
        -:  531:	}
    #####:  532:	pgdata = ctx->data;
        -:  533:
    #####:  534:	LOG_API();
        -:  535:
    #####:  536:	return strdup(chewing_kbtype_String_static(ctx));
        -:  537:}
        -:  538:
