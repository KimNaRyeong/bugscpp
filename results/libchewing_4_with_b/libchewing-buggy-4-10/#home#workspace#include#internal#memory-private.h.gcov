        -:    0:Source:/home/workspace/include/internal/memory-private.h
        -:    1:/**
        -:    2: * memory-private.h
        -:    3: *
        -:    4: * Copyright (c) 2013
        -:    5: *	libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:#ifndef _CHEWING_MEMORY_PRIVATE_H
        -:   12:#define _CHEWING_MEMORY_PRIVATE_H
        -:   13:
        -:   14:#ifdef HAVE_CONFIG_H
        -:   15:#  include <config.h>
        -:   16:#endif
        -:   17:
        -:   18:#ifdef HAVE_INTTYPES_H
        -:   19:#  include <inttypes.h>
        -:   20:#elif defined HAVE_STDINT_H
        -:   21:#  include <stdint.h>
        -:   22:#endif
        -:   23:
        -:   24:#ifdef _MSC_VER
        -:   25:#define inline __inline
        -:   26:#endif
        -:   27:
        -:   28:static inline uint16_t GetUint16( const void *ptr )
        -:   29:{
        -:   30:	uint16_t val;
        -:   31:	const unsigned char *uptr = ptr;
        -:   32:	val =
        -:   33:		( uptr[0] << 0 ) |
        -:   34:		( uptr[1] << 8 );
        -:   35:	return val;
        -:   36:}
        -:   37:
        -:   38:static inline void PutUint16( uint16_t val, void *ptr )
        -:   39:{
        -:   40:	unsigned char *uptr = (unsigned char *) ptr;
        -:   41:	uptr[0] = ( val >> 0 ) & 0xff;
        -:   42:	uptr[1] = ( val >> 8 ) & 0xff;
        -:   43:}
        -:   44:
    #####:   45:static inline uint16_t GetUint16PreservedEndian( const void *ptr )
        -:   46:{
        -:   47:	uint16_t val;
    #####:   48:	const unsigned char *uptr = ptr;
        -:   49:#if WORDS_BIGENDIAN
        -:   50:	val =
        -:   51:		( uptr[0] << 8 ) |
        -:   52:		( uptr[1] << 0 );
        -:   53:#else
    #####:   54:	val =
    #####:   55:		( uptr[0] << 0 ) |
    #####:   56:		( uptr[1] << 8 );
        -:   57:#endif
    #####:   58:	return val;
        -:   59:}
        -:   60:
        -:   61:static inline void PutUint16PreservedEndian( uint16_t val, void *ptr )
        -:   62:{
        -:   63:	unsigned char *uptr = (unsigned char *) ptr;
        -:   64:#if WORDS_BIGENDIAN
        -:   65:	uptr[0] = ( val >> 8 ) & 0xff;
        -:   66:	uptr[1] = ( val >> 0 ) & 0xff;
        -:   67:#else
        -:   68:	uptr[0] = ( val >> 0 ) & 0xff;
        -:   69:	uptr[1] = ( val >> 8 ) & 0xff;
        -:   70:#endif
        -:   71:}
        -:   72:
        -:   73:/*
        -:   74: * This function is specially used in reading fields of TreeType which are
        -:   75: * compressed into 3 bytes, so it has a special name of 24.
        -:   76: */
        -:   77:static inline uint32_t GetUint24( const void *ptr )
        -:   78:{
        -:   79:	uint32_t val;
        -:   80:	const unsigned char *uptr = ptr;
        -:   81:
        -:   82:	val =
        -:   83:		( uptr[0] <<  0 ) |
        -:   84:		( uptr[1] <<  8 ) |
        -:   85:		( uptr[2] << 16 );
        -:   86:	return val;
        -:   87:}
        -:   88:
        -:   89:/*
        -:   90: * This function is specially used in writing fields of TreeType which are
        -:   91: * compressed into 3 bytes, so it has a special name of 24.
        -:   92: */
        -:   93:static inline void PutUint24( uint32_t val, void *ptr )
        -:   94:{
        -:   95:	unsigned char *uptr = (unsigned char *) ptr;
        -:   96:
        -:   97:	uptr[0] = ( val >>  0 ) & 0xff;
        -:   98:	uptr[1] = ( val >>  8 ) & 0xff;
        -:   99:	uptr[2] = ( val >> 16 ) & 0xff;
        -:  100:}
        -:  101:
        -:  102:static inline int GetInt32PreservedEndian( const void *ptr )
        -:  103:{
        -:  104:	int val;
        -:  105:	const unsigned char *uptr = ptr;
        -:  106:#if WORDS_BIGENDIAN
        -:  107:	val =
        -:  108:		( uptr[0] << 24 ) |
        -:  109:		( uptr[1] << 16 ) |
        -:  110:		( uptr[2] <<  8 ) |
        -:  111:		( uptr[3] <<  0 );
        -:  112:#else
        -:  113:	val =
        -:  114:		( uptr[0] <<  0 ) |
        -:  115:		( uptr[1] <<  8 ) |
        -:  116:		( uptr[2] << 16 ) |
        -:  117:		( uptr[3] << 24 );
        -:  118:#endif
        -:  119:	return val;
        -:  120:}
        -:  121:
        -:  122:static inline void PutInt32PreservedEndian( int val, void *ptr )
        -:  123:{
        -:  124:	unsigned char *uptr = (unsigned char *) ptr;
        -:  125:#if WORDS_BIGENDIAN
        -:  126:	uptr[0] = ( val >> 24 ) & 0xff;
        -:  127:	uptr[1] = ( val >> 16 ) & 0xff;
        -:  128:	uptr[2] = ( val >>  8 ) & 0xff;
        -:  129:	uptr[3] = ( val >>  0 ) & 0xff;
        -:  130:#else
        -:  131:	uptr[0] = ( val >>  0 ) & 0xff;
        -:  132:	uptr[1] = ( val >>  8 ) & 0xff;
        -:  133:	uptr[2] = ( val >> 16 ) & 0xff;
        -:  134:	uptr[3] = ( val >> 24 ) & 0xff;
        -:  135:#endif
        -:  136:}
        -:  137:
        -:  138:#endif
