        -:    0:Source:/home/workspace/src/common/chewing-utf8-util.c
        -:    1:/**
        -:    2: * chewing-utf8-util.c
        -:    3: *
        -:    4: * Copyright (c) 2005, 2006, 2012
        -:    5: *	libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:#include <stdio.h>
        -:   12:#include <string.h>
        -:   13:#include "chewing-utf8-util.h"
        -:   14:
        -:   15:/* Table of UTF-8 length */
        -:   16:static const char utf8len_tab[256] =
        -:   17:{
        -:   18:	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        -:   19:	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        -:   20:	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        -:   21:	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        -:   22:	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, /*bogus*/
        -:   23:	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, /*bogus*/
        -:   24:	2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        -:   25:	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,6,6,1,1,
        -:   26:};
        -:   27:
        -:   28:/* Return length of UTF-8 string */
        2:   29:int ueStrLen( const char *str )
        -:   30:{
        2:   31:	int length = 0;
        2:   32:	const char *strptr = str;
        -:   33:
       18:   34:	while ( strptr[ 0 ] != '\0' ) {
       16:   35:		strptr += ueBytesFromChar( strptr[0] );
       16:   36:		++length;
        -:   37:	}
        2:   38:	return length;
        -:   39:}
        -:   40:
        -:   41:/* Return bytes of a UTF-8 character */
       22:   42:int ueBytesFromChar( unsigned char b )
        -:   43:{
       22:   44:	return utf8len_tab[ b ];
        -:   45:}
        -:   46:
        -:   47:/* Return bytes of a UTF-8 string until n position */
        1:   48:int ueStrNBytes( const char *str, int n )
        -:   49:{
        1:   50:	int i = 0, len = 0;
        1:   51:	const char *iter = str;
        4:   52:	for ( i = 0; i < n; i++ ) {
        3:   53:		len += ueBytesFromChar( iter[ len ] );
        -:   54:	}
        1:   55:	return len;
        -:   56:}
        -:   57:
        -:   58:/* Return how many bytes was copied */
        1:   59:int ueStrNCpy( char dest[], const char *src, size_t n, int end )
        -:   60:{
        1:   61:	int len = 0;
        1:   62:	len = ueStrNBytes( src, n );
        1:   63:	memcpy( dest, src, len );
        1:   64:	if ( end == STRNCPY_CLOSE )
        1:   65:		dest[ len ] = '\0';
        1:   66:	return len;
        -:   67:}
        -:   68:
    #####:   69:const char *ueConstStrSeek( const char *src, size_t n )
        -:   70:{
    #####:   71:	size_t i = 0;
    #####:   72:	const char *iter = src;
    #####:   73:	for ( i = 0; i < n; i++ ) {
    #####:   74:		iter += ueBytesFromChar( iter[0] );
        -:   75:	}
    #####:   76:	return iter;
        -:   77:}
        -:   78:
        2:   79:char *ueStrSeek( char *src, size_t n )
        -:   80:{
        2:   81:	size_t i = 0;
        2:   82:	char *iter = src;
        5:   83:	for ( i = 0; i < n; i++ ) {
        3:   84:		iter += ueBytesFromChar( iter[0] );
        -:   85:	}
        2:   86:	return iter;
        -:   87:}
        -:   88:
        -:   89:/* Locate a UTF-8 substring from UTF-8 string */
    #####:   90:const char *ueStrStr( const char *str, size_t lstr,
        -:   91:                      const char *substr, size_t lsub )
        -:   92:{
    #####:   93:	const char *p = str;
        -:   94:	size_t ub;
    #####:   95:	if ( lstr < lsub )
    #####:   96:		return NULL;
    #####:   97:	ub = lstr - lsub;
    #####:   98:	for ( ; (size_t) ( p - str ) <= ub; p++ ) {
    #####:   99:		if ( !strncmp( p, substr, lsub ) )
    #####:  100:			return p;
        -:  101:	}
    #####:  102:	return NULL;
        -:  103:}
