        -:    0:Source:/home/workspace/src/pinyin.c
        -:    1:/**
        -:    2: * pinyin.c
        -:    3: *
        -:    4: * Copyright (c) 2005, 2006, 2008, 2012
        -:    5: *	libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:/* @(#)pinyin.c
        -:   12: */
        -:   13:
        -:   14:#include <stdio.h>
        -:   15:#include <string.h>
        -:   16:#include <stdlib.h>
        -:   17:
        -:   18:#include "global-private.h"
        -:   19:#include "pinyin-private.h"
        -:   20:#include "zuin-private.h"
        -:   21:#include "private.h"
        -:   22:
       43:   23:void TerminatePinyin( ChewingData *pgdata )
        -:   24:{
       43:   25:	free( pgdata->static_data.hanyuInitialsMap );
       43:   26:	free( pgdata->static_data.hanyuFinalsMap );
       43:   27:}
        -:   28:
       43:   29:int InitPinyin( ChewingData *pgdata, const char *prefix )
        -:   30:{
        -:   31:	char filename[ PATH_MAX ];
        -:   32:	int i;
        -:   33:	FILE *fd;
        -:   34:	int ret;
        -:   35:
       43:   36:	sprintf( filename,
        -:   37:		"%s" PLAT_SEPARATOR "%s",
        -:   38:		prefix, PINYIN_TAB_NAME );
        -:   39:
       43:   40:	fd = fopen(filename, "r");
        -:   41:
       43:   42:	if ( ! fd )
    #####:   43:		return 0;
        -:   44:
       43:   45:	ret = fscanf( fd, "%d", &pgdata->static_data.HANYU_INITIALS );
       43:   46:	if ( ret != 1 ) {
    #####:   47:		return 0;
        -:   48:	}
       43:   49:	++pgdata->static_data.HANYU_INITIALS;
       43:   50:	pgdata->static_data.hanyuInitialsMap = ALC( keymap, pgdata->static_data.HANYU_INITIALS );
     1118:   51:	for ( i = 0; i < pgdata->static_data.HANYU_INITIALS - 1; i++ ) {
     1075:   52:		ret = fscanf( fd, "%s %s",
     1075:   53:			pgdata->static_data.hanyuInitialsMap[ i ].pinyin,
     1075:   54:			pgdata->static_data.hanyuInitialsMap[ i ].zuin );
     1075:   55:		if ( ret != 2 ) {
    #####:   56:			return 0;
        -:   57:		}
        -:   58:	}
        -:   59:
       43:   60:	ret = fscanf( fd, "%d", &pgdata->static_data.HANYU_FINALS );
       43:   61:	if ( ret != 1 ) {
    #####:   62:		return 0;
        -:   63:	}
       43:   64:	++pgdata->static_data.HANYU_FINALS;
       43:   65:	pgdata->static_data.hanyuFinalsMap = ALC( keymap, pgdata->static_data.HANYU_FINALS );
     3913:   66:	for ( i = 0; i < pgdata->static_data.HANYU_FINALS - 1; i++ ) {
     3870:   67:		ret = fscanf( fd, "%s %s",
     3870:   68:			pgdata->static_data.hanyuFinalsMap[ i ].pinyin,
     3870:   69:			pgdata->static_data.hanyuFinalsMap[ i ].zuin );
     3870:   70:		if ( ret != 2 ) {
    #####:   71:			return 0;
        -:   72:		}
        -:   73:	}
        -:   74:
       43:   75:	fclose( fd );
        -:   76:
       43:   77:	return 1;
        -:   78:}
        -:   79:
        -:   80:/**
        -:   81: * Map pinyin key-sequence to Zuin key-sequence.
        -:   82: * Caller should allocate char zuin[4].
        -:   83: *
        -:   84: * Non-Zero: Fail to fully convert
        -:   85: *
        -:   86: * @retval 0 Success
        -:   87: */
    #####:   88:int PinyinToZuin( ChewingData *pgdata, const char *pinyinKeySeq,
        -:   89:		  char *zuinKeySeq, char *zuinKeySeqAlt )
        -:   90:{
    #####:   91:	const char *p, *cursor = NULL;
    #####:   92:	const char *initial = 0;
    #####:   93:	const char *final = 0;
    #####:   94:	const char *seq = 0;
        -:   95:	int i;
        -:   96:
        -:   97:	/* special cases for WG */
    #####:   98:	if ( ! strcmp( pinyinKeySeq, "tzu" ) ) {
    #####:   99:		seq = "y yj";   /* ㄗ|ㄗㄨ */
        -:  100:	}
    #####:  101:	else if ( ! strcmp( pinyinKeySeq, "ssu" ) ||
    #####:  102:		  ! strcmp( pinyinKeySeq, "szu" ) ) {
    #####:  103:		seq = "n n";    /* ㄙ|ㄙㄨ */
        -:  104:	}
        -:  105:
        -:  106:	/* common multiple mapping */
    #####:  107:	if ( ! strcmp( pinyinKeySeq, "e" ) ) {
    #####:  108:		seq = "k ,";    /* ㄜ|ㄝ */
        -:  109:	}
    #####:  110:	else if ( ! strcmp( pinyinKeySeq, "ch" ) ) {
    #####:  111:		seq = "t f";    /* ㄔ|ㄑ */
        -:  112:	}
    #####:  113:	else if ( ! strcmp( pinyinKeySeq, "sh" ) ) {
    #####:  114:		seq = "g v";    /* ㄕ|ㄒ */
        -:  115:	}
    #####:  116:	else if ( ! strcmp( pinyinKeySeq, "c" ) ) {
    #####:  117:		seq = "h f";    /* ㄘ|ㄑ */
        -:  118:	}
    #####:  119:	else if ( ! strcmp( pinyinKeySeq, "s" ) ) {
    #####:  120:		seq = "n v";    /* ㄙ|ㄒ */
        -:  121:	}
    #####:  122:	else if ( ! strcmp( pinyinKeySeq, "nu" ) ) {
    #####:  123:		seq = "sj sm";  /* ㄋㄨ|ㄋㄩ */
        -:  124:	}
    #####:  125:	else if ( ! strcmp( pinyinKeySeq, "lu" ) ) {
    #####:  126:		seq = "xj xm";  /* ㄌㄨ|ㄌㄩ */
        -:  127:	}
    #####:  128:	else if ( ! strcmp( pinyinKeySeq, "luan" ) ) {
    #####:  129:		seq = "xj0 xm0";  /* ㄌㄨㄢ|ㄌㄩㄢ */
        -:  130:	}
    #####:  131:	else if ( ! strcmp( pinyinKeySeq, "niu" ) ) {
    #####:  132:		seq = "su. sm"; /* ㄋㄧㄡ|ㄋㄩ */
        -:  133:	}
    #####:  134:	else if ( ! strcmp( pinyinKeySeq, "liu" ) ) {
    #####:  135:		seq = "xu. xm"; /* ㄌㄧㄡ|ㄌㄩ */
        -:  136:	}
    #####:  137:	else if ( ! strcmp( pinyinKeySeq, "jiu" ) ) {
    #####:  138:		seq = "ru. rm"; /* ㄐㄧㄡ|ㄐㄩ */
        -:  139:	}
    #####:  140:	else if ( ! strcmp( pinyinKeySeq, "chiu" ) ) {
    #####:  141:		seq = "fu. fm"; /* ㄑㄧㄡ|ㄑㄩ */
        -:  142:	}
    #####:  143:	else if ( ! strcmp( pinyinKeySeq, "shiu" ) ) {
    #####:  144:		seq = "vu. vm"; /* ㄒㄧㄡ|ㄒㄩ */
        -:  145:	}
    #####:  146:	else if ( ! strcmp( pinyinKeySeq, "ju" ) ) {
    #####:  147:		seq = "rm 5j";  /* ㄐㄩ|ㄓㄨ */
        -:  148:	}
    #####:  149:	else if ( ! strcmp( pinyinKeySeq, "juan" ) ) {
    #####:  150:		seq = "rm0 5j0";  /* ㄐㄩㄢ|ㄓㄨㄢ */
        -:  151:	}
        -:  152:
        -:  153:	/* multiple mapping for each kbtype */
    #####:  154:	switch ( pgdata->zuinData.kbtype ) {
    #####:  155:		case KB_HANYU_PINYIN:
    #####:  156:			if ( ! strcmp( pinyinKeySeq, "chi" ) ) {
    #####:  157:				seq = "t fu";	/* ㄔ|ㄑㄧ */
        -:  158:			}
    #####:  159:			else if ( ! strcmp( pinyinKeySeq, "shi" ) ) {
    #####:  160:				seq = "g vu";	/* ㄕ|ㄒㄧ */
        -:  161:			}
    #####:  162:			else if ( ! strcmp( pinyinKeySeq, "ci" ) ) {
    #####:  163:				seq = "h fu";	/* ㄘ|ㄑㄧ */
        -:  164:			}
    #####:  165:			else if ( ! strcmp( pinyinKeySeq, "si" ) ) {
    #####:  166:				seq = "n vu";	/* ㄙ|ㄒㄧ */
        -:  167:			}
    #####:  168:			break;
    #####:  169:		case KB_THL_PINYIN:
    #####:  170:			if ( ! strcmp( pinyinKeySeq, "chi" ) ) {
    #####:  171:				seq = "fu t";   /* ㄑㄧ|ㄔ */
        -:  172:			}
    #####:  173:			else if ( ! strcmp( pinyinKeySeq, "shi" ) ) {
    #####:  174:				seq = "vu g";   /* ㄒㄧ|ㄕ */
        -:  175:			}
    #####:  176:			else if ( ! strcmp( pinyinKeySeq, "ci" ) ) {
    #####:  177:				seq = "fu h";   /* ㄑㄧ|ㄘ */
        -:  178:			}
    #####:  179:			else if ( ! strcmp( pinyinKeySeq, "si" ) ) {
    #####:  180:				seq = "vu n";   /* ㄒㄧ|ㄙ */
        -:  181:			}
    #####:  182:			break;
    #####:  183:		case KB_MPS2_PINYIN:
    #####:  184:			if ( ! strcmp( pinyinKeySeq, "chi" ) ) {
    #####:  185:				seq = "fu t";   /* ㄑㄧ|ㄔ */
        -:  186:			}
    #####:  187:			else if ( ! strcmp( pinyinKeySeq, "shi" ) ) {
    #####:  188:				seq = "vu g";   /* ㄒㄧ|ㄕ */
        -:  189:			}
    #####:  190:			else if ( ! strcmp( pinyinKeySeq, "ci" ) ) {
    #####:  191:				seq = "fu h";   /* ㄑㄧ|ㄘ */
        -:  192:			}
    #####:  193:			else if ( ! strcmp( pinyinKeySeq, "si" ) ) {
    #####:  194:				seq = "vu n";   /* ㄒㄧ|ㄙ */
        -:  195:			}
    #####:  196:			else if ( ! strcmp( pinyinKeySeq, "niu" ) ) {
    #####:  197:				seq = "sm su."; /* ㄋㄩ|ㄋㄧㄡ */
        -:  198:			}
    #####:  199:			else if ( ! strcmp( pinyinKeySeq, "liu" ) ) {
    #####:  200:				seq = "xm xu."; /* ㄌㄩ|ㄌㄧㄡ */
        -:  201:			}
    #####:  202:			else if ( ! strcmp( pinyinKeySeq, "jiu" ) ) {
    #####:  203:				seq = "rm ru."; /* ㄐㄩ|ㄐㄧㄡ */
        -:  204:			}
    #####:  205:			else if ( ! strcmp( pinyinKeySeq, "chiu" ) ) {
    #####:  206:				seq = "fm fu."; /* ㄑㄩ|ㄑㄧㄡ */
        -:  207:			}
    #####:  208:			else if ( ! strcmp( pinyinKeySeq, "shiu" ) ) {
    #####:  209:				seq = "vm vu."; /* ㄒㄩ|ㄒㄧㄡ */
        -:  210:			}
    #####:  211:			else if ( ! strcmp( pinyinKeySeq, "ju" ) ) {
    #####:  212:				seq = "5j rm";  /* ㄓㄨ|ㄐㄩ */
        -:  213:			}
    #####:  214:			else if ( ! strcmp( pinyinKeySeq, "juan" ) ) {
    #####:  215:				seq = "5j0 rm0";  /* ㄓㄨㄢ|ㄐㄩㄢ */
        -:  216:			}
    #####:  217:			else if ( ! strcmp( pinyinKeySeq, "juen" ) ) {
    #####:  218:				seq = "5jp 5jp";  /* ㄓㄨㄣ|ㄓㄨㄣ */
        -:  219:			}
    #####:  220:			else if ( ! strcmp( pinyinKeySeq, "tzu" ) ) {
    #####:  221:				seq = "yj y";    /* ㄗㄨ|ㄗ */
        -:  222:			}
    #####:  223:			break;
        -:  224:	}
    #####:  225:	if ( seq != NULL ) {
        -:  226:		 char s[ ZUIN_SIZE * 2 + 1 ];
    #####:  227:		 strcpy( s, seq );
    #####:  228:		 initial = strtok( s, " " );
    #####:  229:		 strcpy( zuinKeySeq, initial );
    #####:  230:		 initial = strtok( NULL, " " );
    #####:  231:		 strcpy( zuinKeySeqAlt, initial );
    #####:  232:		 return 0;
        -:  233:	}
        -:  234:
        -:  235:
    #####:  236:	for ( i = 0; i < pgdata->static_data.HANYU_INITIALS; i++ ) {
    #####:  237:		p = strstr( pinyinKeySeq, pgdata->static_data.hanyuInitialsMap[ i ].pinyin );
    #####:  238:		if ( p == pinyinKeySeq ) {
    #####:  239:			initial = pgdata->static_data.hanyuInitialsMap[ i ].zuin;
    #####:  240:			cursor = pinyinKeySeq +
    #####:  241:				strlen( pgdata->static_data.hanyuInitialsMap[ i ].pinyin );
    #####:  242:			break;
        -:  243:		}
        -:  244:	}
    #####:  245:	if ( i == pgdata->static_data.HANYU_INITIALS ) {
        -:  246:		/* No initials. might be ㄧㄨㄩ */
        -:  247:		/* XXX: I NEED Implementation
        -:  248:		   if(finalsKeySeq[0] != ) {
        -:  249:		   }
        -:  250:		   */
    #####:  251:		return 1;
        -:  252:	}
        -:  253:
    #####:  254:	if ( cursor ) {
    #####:  255:		for ( i = 0; i < pgdata->static_data.HANYU_FINALS; i++ ) {
    #####:  256:			if ( strcmp( cursor, pgdata->static_data.hanyuFinalsMap[ i ].pinyin ) == 0 ) {
    #####:  257:				final = pgdata->static_data.hanyuFinalsMap[ i ].zuin;
    #####:  258:				break;
        -:  259:			}
        -:  260:		}
    #####:  261:		if ( i == pgdata->static_data.HANYU_FINALS ) {
    #####:  262:			return 2;
        -:  263:		}
        -:  264:	}
        -:  265:
        -:  266:
        -:  267:	/* THL empty rime
        -:  268:	 * we use '=' in pinyin.tab as empty rime, restore it to ''
        -:  269:	 */
    #####:  270:	if( ! strcmp( final, "=" ) ) {
    #####:  271:		final = "";
        -:  272:	}
        -:  273:
        -:  274:	/* Hanyu empty rime
        -:  275:	 * ㄓ/ㄔ/ㄕ/ㄖ/ㄗ/ㄘ/ㄙ + -i, -i is empty rime, not ㄧ
        -:  276:	 * */
    #####:  277:	if ( ! strcmp( final, "u" ) ) {
    #####:  278:		if ( ! strcmp( initial, "5" ) ||
    #####:  279:		     ! strcmp( initial, "t" ) ||
    #####:  280:		     ! strcmp( initial, "g" ) ||
    #####:  281:		     ! strcmp( initial, "b" ) ||
    #####:  282:		     ! strcmp( initial, "y" ) ||
    #####:  283:		     ! strcmp( initial, "h" ) ||
    #####:  284:		     ! strcmp( initial, "n" ) ) {
    #####:  285:			final = "";
        -:  286:		}
        -:  287:	}
        -:  288:
        -:  289:	/* Hanyu uan/un/u :
        -:  290:	 * ㄐ/ㄑ/ㄒ + -uan, -uan is ㄩㄢ, not ㄨㄢ
        -:  291:	 * ㄐ/ㄑ/ㄒ + -un,  -un is ㄩㄣ, not ㄨㄣ
        -:  292:	 * ㄐ/ㄑ/ㄒ + -u,   -u is ㄧ, not ㄨ
        -:  293:	 */
    #####:  294:	if ( ! strcmp( initial, "f" ) ||
    #####:  295:	     ! strcmp( initial, "r" ) ||
    #####:  296:	     ! strcmp( initial, "v" ) ) {
    #####:  297:		if ( ! strcmp( final, "j0" ) ) {
    #####:  298:			final = "m0";
        -:  299:		}
    #####:  300:		else if ( ! strcmp( final, "jp" ) ) {
    #####:  301:			final = "mp";
        -:  302:		}
    #####:  303:		else if ( ! strcmp( final, "j" ) ) {
    #####:  304:			final = "m";
        -:  305:		}
        -:  306:
        -:  307:	}
        -:  308:
        -:  309:	/* THL/MPS2 s/sh/c/ch/j :
        -:  310:	 * s-  + ー/ㄩ, s-  is ㄒ, not ㄙ (THL/Tongyong)
        -:  311:	 * sh- + ー/ㄩ, sh- is ㄒ, not ㄕ (MPS2)
        -:  312:	 * c-  + ー/ㄩ, c-  is ㄑ, not ㄘ (Tongyong)
        -:  313:	 * ch- + ㄧ/ㄩ, ch- is ㄑ, not ㄔ (THL)
        -:  314:	 * j-  + other than ー/ㄩ, j-  is ㄓ, not ㄐ (MPS2)
        -:  315:	 */
        -:  316:
    #####:  317:	if ( final == strstr( final, "u" ) ||
    #####:  318:	     final == strstr( final, "m" ) ) {
    #####:  319:		if ( ! strcmp( initial, "n" ) ) {
    #####:  320:			initial = "v";
        -:  321:		}
    #####:  322:		else if ( ! strcmp( initial, "g" ) ) {
    #####:  323:			initial = "v";
        -:  324:		}
    #####:  325:		else if ( ! strcmp( initial, "h" ) ) {
    #####:  326:			initial = "f";
        -:  327:		}
    #####:  328:		else if ( ! strcmp( initial, "t" ) ) {
    #####:  329:			initial = "f";
        -:  330:		}
        -:  331:	}
        -:  332:	else {
    #####:  333:		if ( ! strcmp( initial, "r" ) ) {
    #####:  334:			initial = "5";
        -:  335:		}
        -:  336:	}
        -:  337:
        -:  338:	/* THL supplemental set
        -:  339:	 * ㄅ/ㄆ/ㄇ/ㄈ + -ㄨㄥ, -ㄨㄥ is another reading of -ㄥ
        -:  340:	 * ㄅ/ㄆ/ㄇ/ㄈ + -ㄨㄛ, -ㄨㄛ is another reading of -ㄛ
        -:  341:	 */
    #####:  342:	if (
    #####:  343:		! strcmp( initial, "1" ) ||
    #####:  344:		! strcmp( initial, "q" ) ||
    #####:  345:		! strcmp( initial, "a" ) ||
    #####:  346:		! strcmp( initial, "z" ) ) {
        -:  347:
    #####:  348:		if ( ! strcmp( final, "ji" ) ) {
    #####:  349:			final = "i";
    #####:  350:		} else if ( ! strcmp( final, "j/" ) ) {
    #####:  351:			final = "/";
        -:  352:		}
        -:  353:
        -:  354:	}
        -:  355:
    #####:  356:	sprintf( zuinKeySeq, "%s%s", initial, final );
    #####:  357:	strcpy( zuinKeySeqAlt, zuinKeySeq );
    #####:  358:	return 0;
        -:  359:}
