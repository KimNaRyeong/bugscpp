        -:    0:Source:/home/workspace/example/calc4.cc
        -:    0:Programs:4
        -:    1:#include <peglib.h>
        -:    2:#include <assert.h>
        -:    3:#include <iostream>
        -:    4:
        -:    5:using namespace peg;
        -:    6:using namespace std;
        -:    7:
    #####:    8:int main(void) {
        -:    9:    parser parser(R"(
        -:   10:        EXPRESSION  <- ATOM (OPERATOR ATOM)* {
        -:   11:                         precedence
        -:   12:                           L - +
        -:   13:                           L / *
        -:   14:                       }
        -:   15:        ATOM        <- NUMBER / '(' EXPRESSION ')'
        -:   16:        OPERATOR    <- < [-+/*] >
        -:   17:        NUMBER      <- < '-'? [0-9]+ >
        -:   18:        %whitespace <- [ \t\r\n]*
    #####:   19:    )");
        -:   20:
    #####:   21:    parser["EXPRESSION"] = [](const SemanticValues& sv) -> long {
    #####:   22:        auto result = any_cast<long>(sv[0]);
    #####:   23:        if (sv.size() > 1) {
    #####:   24:            auto ope = any_cast<char>(sv[1]);
    #####:   25:            auto num = any_cast<long>(sv[2]);
    #####:   26:            switch (ope) {
    #####:   27:                case '+': result += num; break;
    #####:   28:                case '-': result -= num; break;
    #####:   29:                case '*': result *= num; break;
    #####:   30:                case '/': result /= num; break;
        -:   31:            }
        -:   32:        }
    #####:   33:        return result;
        -:   34:    };
    #####:   35:    parser["OPERATOR"] = [](const SemanticValues& sv) { return *sv.c_str(); };
    #####:   36:    parser["NUMBER"] = [](const SemanticValues& sv) { return atol(sv.c_str()); };
        -:   37:
        -:   38:    long val;
    #####:   39:    parser.parse(" -1 + (1 + 2) * 3 - -1", val);
        -:   40:
    #####:   41:    assert(val == 9);
    #####:   42:}
