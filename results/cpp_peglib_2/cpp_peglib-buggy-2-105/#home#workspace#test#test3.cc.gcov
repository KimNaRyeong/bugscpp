        -:    0:Source:/home/workspace/test/test3.cc
        -:    0:Programs:4
        -:    1:﻿#include "catch.hh"
        -:    2:#include <peglib.h>
        -:    3:
        -:    4:using namespace peg;
        -:    5:
        6:    6:inline bool exact(Grammar& g, const char* d, const char* s) {
        6:    7:    auto n = strlen(s);
       12:    8:    auto r = g[d].parse(s, n);
       12:    9:    return r.ret && r.len == n;
        -:   10:}
        -:   11:
    #####:   12:inline Grammar& make_peg_grammar() {
    #####:   13:    return ParserGenerator::grammar();
        -:   14:}
        -:   15:
        1:   16:TEST_CASE("PEG Grammar", "[peg]")
        -:   17:{
    #####:   18:    auto g = ParserGenerator::grammar();
    #####:   19:    REQUIRE(exact(g, "Grammar", " Definition <- a / ( b c ) / d \n rule2 <- [a-zA-Z][a-z0-9-]+ ") == true);
    #####:   20:}
        -:   21:
        1:   22:TEST_CASE("PEG Definition", "[peg]")
        -:   23:{
    #####:   24:    auto g = ParserGenerator::grammar();
    #####:   25:    REQUIRE(exact(g, "Definition", "Definition <- a / (b c) / d ") == true);
    #####:   26:    REQUIRE(exact(g, "Definition", "Definition <- a / b c / d ") == true);
    #####:   27:    REQUIRE(exact(g, "Definition", u8"Definitiond ← a ") == true);
    #####:   28:    REQUIRE(exact(g, "Definition", "Definition ") == false);
    #####:   29:    REQUIRE(exact(g, "Definition", " ") == false);
    #####:   30:    REQUIRE(exact(g, "Definition", "") == false);
    #####:   31:    REQUIRE(exact(g, "Definition", "Definition = a / (b c) / d ") == false);
    #####:   32:	REQUIRE(exact(g, "Definition", "Macro(param) <- a ") == true);
    #####:   33:	REQUIRE(exact(g, "Definition", "Macro (param) <- a ") == false);
    #####:   34:}
        -:   35:
        1:   36:TEST_CASE("PEG Expression", "[peg]")
        -:   37:{
    #####:   38:    auto g = ParserGenerator::grammar();
    #####:   39:    REQUIRE(exact(g, "Expression", "a / (b c) / d ") == true);
    #####:   40:    REQUIRE(exact(g, "Expression", "a / b c / d ") == true);
    #####:   41:    REQUIRE(exact(g, "Expression", "a b ") == true);
    #####:   42:    REQUIRE(exact(g, "Expression", "") == true);
    #####:   43:    REQUIRE(exact(g, "Expression", " ") == false);
    #####:   44:    REQUIRE(exact(g, "Expression", " a b ") == false);
    #####:   45:}
        -:   46:
        1:   47:TEST_CASE("PEG Sequence", "[peg]")
        -:   48:{
    #####:   49:    auto g = ParserGenerator::grammar();
    #####:   50:    REQUIRE(exact(g, "Sequence", "a b c d ") == true);
    #####:   51:    REQUIRE(exact(g, "Sequence", "") == true);
    #####:   52:    REQUIRE(exact(g, "Sequence", "!") == false);
    #####:   53:    REQUIRE(exact(g, "Sequence", "<-") == false);
    #####:   54:    REQUIRE(exact(g, "Sequence", " a") == false);
    #####:   55:}
        -:   56:
        1:   57:TEST_CASE("PEG Prefix", "[peg]")
        -:   58:{
    #####:   59:    auto g = ParserGenerator::grammar();
    #####:   60:    REQUIRE(exact(g, "Prefix", "&[a]") == true);
    #####:   61:    REQUIRE(exact(g, "Prefix", "![']") == true);
    #####:   62:    REQUIRE(exact(g, "Prefix", "-[']") == false);
    #####:   63:    REQUIRE(exact(g, "Prefix", "") == false);
    #####:   64:    REQUIRE(exact(g, "Prefix", " a") == false);
    #####:   65:}
        -:   66:
        1:   67:TEST_CASE("PEG Suffix", "[peg]")
        -:   68:{
    #####:   69:    auto g = ParserGenerator::grammar();
    #####:   70:    REQUIRE(exact(g, "Suffix", "aaa ") == true);
    #####:   71:    REQUIRE(exact(g, "Suffix", "aaa? ") == true);
    #####:   72:    REQUIRE(exact(g, "Suffix", "aaa* ") == true);
    #####:   73:    REQUIRE(exact(g, "Suffix", "aaa+ ") == true);
    #####:   74:    REQUIRE(exact(g, "Suffix", "aaa{} ") == false);
    #####:   75:    REQUIRE(exact(g, "Suffix", "aaa{10} ") == true);
    #####:   76:    REQUIRE(exact(g, "Suffix", "aaa{10,} ") == true);
    #####:   77:    REQUIRE(exact(g, "Suffix", "aaa{10,100} ") == true);
    #####:   78:    REQUIRE(exact(g, "Suffix", "aaa{,100} ") == true);
    #####:   79:    REQUIRE(exact(g, "Suffix", ". + ") == true);
    #####:   80:    REQUIRE(exact(g, "Suffix", ". {10} ") == true);
    #####:   81:    REQUIRE(exact(g, "Suffix", "?") == false);
    #####:   82:    REQUIRE(exact(g, "Suffix", "+") == false);
    #####:   83:    REQUIRE(exact(g, "Suffix", "{10}") == false);
    #####:   84:    REQUIRE(exact(g, "Suffix", "") == false);
    #####:   85:    REQUIRE(exact(g, "Suffix", " a") == false);
    #####:   86:}
        -:   87:
        1:   88:TEST_CASE("PEG Primary", "[peg]")
        -:   89:{
    #####:   90:    auto g = ParserGenerator::grammar();
    #####:   91:    REQUIRE(exact(g, "Primary", "_Identifier0_ ") == true);
    #####:   92:    REQUIRE(exact(g, "Primary", "_Identifier0_<-") == false);
    #####:   93:    REQUIRE(exact(g, "Primary", "( _Identifier0_ _Identifier1_ )") == true);
    #####:   94:    REQUIRE(exact(g, "Primary", "'Literal String'") == true);
    #####:   95:    REQUIRE(exact(g, "Primary", "\"Literal String\"") == true);
    #####:   96:    REQUIRE(exact(g, "Primary", "[a-zA-Z]") == true);
    #####:   97:    REQUIRE(exact(g, "Primary", ".") == true);
    #####:   98:    REQUIRE(exact(g, "Primary", "") == false);
    #####:   99:    REQUIRE(exact(g, "Primary", " ") == false);
    #####:  100:    REQUIRE(exact(g, "Primary", " a") == false);
    #####:  101:    REQUIRE(exact(g, "Primary", "") == false);
    #####:  102:}
        -:  103:
        2:  104:TEST_CASE("PEG Identifier", "[peg]")
        -:  105:{
        2:  106:    auto g = ParserGenerator::grammar();
        1:  107:    REQUIRE(exact(g, "Identifier", "_Identifier0_ ") == true);
        1:  108:    REQUIRE(exact(g, "Identifier", "0Identifier_ ") == false);
        1:  109:    REQUIRE(exact(g, "Identifier", "Iden|t ") == false);
        1:  110:    REQUIRE(exact(g, "Identifier", " ") == false);
        1:  111:    REQUIRE(exact(g, "Identifier", " a") == false);
        1:  112:    REQUIRE(exact(g, "Identifier", "") == false);
        1:  113:}
        -:  114:
        1:  115:TEST_CASE("PEG IdentStart", "[peg]")
        -:  116:{
    #####:  117:    auto g = ParserGenerator::grammar();
    #####:  118:    REQUIRE(exact(g, "IdentStart", "_") == true);
    #####:  119:    REQUIRE(exact(g, "IdentStart", "a") == true);
    #####:  120:    REQUIRE(exact(g, "IdentStart", "Z") == true);
    #####:  121:    REQUIRE(exact(g, "IdentStart", "") == false);
    #####:  122:    REQUIRE(exact(g, "IdentStart", " ") == false);
    #####:  123:    REQUIRE(exact(g, "IdentStart", "0") == false);
    #####:  124:}
        -:  125:
        1:  126:TEST_CASE("PEG IdentRest", "[peg]")
        -:  127:{
    #####:  128:    auto g = ParserGenerator::grammar();
    #####:  129:    REQUIRE(exact(g, "IdentRest", "_") == true);
    #####:  130:    REQUIRE(exact(g, "IdentRest", "a") == true);
    #####:  131:    REQUIRE(exact(g, "IdentRest", "Z") == true);
    #####:  132:    REQUIRE(exact(g, "IdentRest", "") == false);
    #####:  133:    REQUIRE(exact(g, "IdentRest", " ") == false);
    #####:  134:    REQUIRE(exact(g, "IdentRest", "0") == true);
    #####:  135:}
        -:  136:
        1:  137:TEST_CASE("PEG Literal", "[peg]")
        -:  138:{
    #####:  139:    auto g = ParserGenerator::grammar();
    #####:  140:    REQUIRE(exact(g, "Literal", "'abc' ") == true);
    #####:  141:    REQUIRE(exact(g, "Literal", "'a\\nb\\tc' ") == true);
    #####:  142:    REQUIRE(exact(g, "Literal", "'a\\277\tc' ") == true);
    #####:  143:    REQUIRE(exact(g, "Literal", "'a\\77\tc' ") == true);
    #####:  144:    REQUIRE(exact(g, "Literal", "'a\\80\tc' ") == false);
    #####:  145:    REQUIRE(exact(g, "Literal", "'\n' ") == true);
    #####:  146:    REQUIRE(exact(g, "Literal", "'a\\'b' ") == true);
    #####:  147:    REQUIRE(exact(g, "Literal", "'a'b' ") == false);
    #####:  148:    REQUIRE(exact(g, "Literal", "'a\"'b' ") == false);
    #####:  149:    REQUIRE(exact(g, "Literal", "\"'\\\"abc\\\"'\" ") == true);
    #####:  150:    REQUIRE(exact(g, "Literal", "\"'\"abc\"'\" ") == false);
    #####:  151:    REQUIRE(exact(g, "Literal", "abc") == false);
    #####:  152:    REQUIRE(exact(g, "Literal", "") == false);
    #####:  153:    REQUIRE(exact(g, "Literal", "\\") == false);
    #####:  154:    REQUIRE(exact(g, "Literal", u8"'日本語'") == true);
    #####:  155:    REQUIRE(exact(g, "Literal", u8"\"日本語\"") == true);
    #####:  156:    REQUIRE(exact(g, "Literal", u8"日本語") == false);
    #####:  157:}
        -:  158:
        1:  159:TEST_CASE("PEG Class", "[peg]")
        -:  160:{
    #####:  161:    auto g = ParserGenerator::grammar();
    #####:  162:    REQUIRE(exact(g, "Class", "[]") == false); // NOTE: This is different from the Brian Ford's paper, but same as RegExp
    #####:  163:    REQUIRE(exact(g, "Class", "[a]") == true);
    #####:  164:    REQUIRE(exact(g, "Class", "[a-z]") == true);
    #####:  165:    REQUIRE(exact(g, "Class", "[az]") == true);
    #####:  166:    REQUIRE(exact(g, "Class", "[a-zA-Z-]") == true);
    #####:  167:    REQUIRE(exact(g, "Class", "[a-zA-Z-0-9]") == true);
    #####:  168:    REQUIRE(exact(g, "Class", "[a-]") == false);
    #####:  169:    REQUIRE(exact(g, "Class", "[-a]") == true);
    #####:  170:    REQUIRE(exact(g, "Class", "[") == false);
    #####:  171:    REQUIRE(exact(g, "Class", "[a") == false);
    #####:  172:    REQUIRE(exact(g, "Class", "]") == false);
    #####:  173:    REQUIRE(exact(g, "Class", "a]") == false);
    #####:  174:    REQUIRE(exact(g, "Class", u8"[あ-ん]") == true);
    #####:  175:    REQUIRE(exact(g, "Class", u8"あ-ん") == false);
    #####:  176:    REQUIRE(exact(g, "Class", "[-+]") == true);
    #####:  177:    REQUIRE(exact(g, "Class", "[+-]") == false);
    #####:  178:    REQUIRE(exact(g, "Class", "[\\^]") == true);
    #####:  179:}
        -:  180:
        1:  181:TEST_CASE("PEG Negated Class", "[peg]")
        -:  182:{
    #####:  183:    auto g = ParserGenerator::grammar();
    #####:  184:    REQUIRE(exact(g, "NegatedClass", "[^]") == false);
    #####:  185:    REQUIRE(exact(g, "NegatedClass", "[^a]") == true);
    #####:  186:    REQUIRE(exact(g, "NegatedClass", "[^a-z]") == true);
    #####:  187:    REQUIRE(exact(g, "NegatedClass", "[^az]") == true);
    #####:  188:    REQUIRE(exact(g, "NegatedClass", "[^a-zA-Z-]") == true);
    #####:  189:    REQUIRE(exact(g, "NegatedClass", "[^a-zA-Z-0-9]") == true);
    #####:  190:    REQUIRE(exact(g, "NegatedClass", "[^a-]") == false);
    #####:  191:    REQUIRE(exact(g, "NegatedClass", "[^-a]") == true);
    #####:  192:    REQUIRE(exact(g, "NegatedClass", "[^") == false);
    #####:  193:    REQUIRE(exact(g, "NegatedClass", "[^a") == false);
    #####:  194:    REQUIRE(exact(g, "NegatedClass", "^]") == false);
    #####:  195:    REQUIRE(exact(g, "NegatedClass", "^a]") == false);
    #####:  196:    REQUIRE(exact(g, "NegatedClass", u8"[^あ-ん]") == true);
    #####:  197:    REQUIRE(exact(g, "NegatedClass", u8"^あ-ん") == false);
    #####:  198:    REQUIRE(exact(g, "NegatedClass", "[^-+]") == true);
    #####:  199:    REQUIRE(exact(g, "NegatedClass", "[^+-]") == false);
    #####:  200:    REQUIRE(exact(g, "NegatedClass", "[^^]") == true);
    #####:  201:}
        -:  202:
        1:  203:TEST_CASE("PEG Range", "[peg]")
        -:  204:{
    #####:  205:    auto g = ParserGenerator::grammar();
    #####:  206:    REQUIRE(exact(g, "Range", "a") == true);
    #####:  207:    REQUIRE(exact(g, "Range", "a-z") == true);
    #####:  208:    REQUIRE(exact(g, "Range", "az") == false);
    #####:  209:    REQUIRE(exact(g, "Range", "") == false);
    #####:  210:    REQUIRE(exact(g, "Range", "a-") == false);
    #####:  211:    REQUIRE(exact(g, "Range", "-a") == false);
    #####:  212:}
        -:  213:
        1:  214:TEST_CASE("PEG Char", "[peg]")
        -:  215:{
    #####:  216:    auto g = ParserGenerator::grammar();
    #####:  217:    REQUIRE(exact(g, "Char", "\\n") == true);
    #####:  218:    REQUIRE(exact(g, "Char", "\\r") == true);
    #####:  219:    REQUIRE(exact(g, "Char", "\\t") == true);
    #####:  220:    REQUIRE(exact(g, "Char", "\\'") == true);
    #####:  221:    REQUIRE(exact(g, "Char", "\\\"") == true);
    #####:  222:    REQUIRE(exact(g, "Char", "\\[") == true);
    #####:  223:    REQUIRE(exact(g, "Char", "\\]") == true);
    #####:  224:    REQUIRE(exact(g, "Char", "\\\\") == true);
    #####:  225:    REQUIRE(exact(g, "Char", "\\000") == true);
    #####:  226:    REQUIRE(exact(g, "Char", "\\377") == true);
    #####:  227:    REQUIRE(exact(g, "Char", "\\477") == false);
    #####:  228:    REQUIRE(exact(g, "Char", "\\087") == false);
    #####:  229:    REQUIRE(exact(g, "Char", "\\079") == false);
    #####:  230:    REQUIRE(exact(g, "Char", "\\00") == true);
    #####:  231:    REQUIRE(exact(g, "Char", "\\77") == true);
    #####:  232:    REQUIRE(exact(g, "Char", "\\80") == false);
    #####:  233:    REQUIRE(exact(g, "Char", "\\08") == false);
    #####:  234:    REQUIRE(exact(g, "Char", "\\0") == true);
    #####:  235:    REQUIRE(exact(g, "Char", "\\7") == true);
    #####:  236:    REQUIRE(exact(g, "Char", "\\8") == false);
    #####:  237:    REQUIRE(exact(g, "Char", "a") == true);
    #####:  238:    REQUIRE(exact(g, "Char", ".") == true);
    #####:  239:    REQUIRE(exact(g, "Char", "0") == true);
    #####:  240:    REQUIRE(exact(g, "Char", "\\") == false);
    #####:  241:    REQUIRE(exact(g, "Char", " ") == true);
    #####:  242:    REQUIRE(exact(g, "Char", "  ") == false);
    #####:  243:    REQUIRE(exact(g, "Char", "") == false);
    #####:  244:    REQUIRE(exact(g, "Char", u8"あ") == true);
    #####:  245:}
        -:  246:
        1:  247:TEST_CASE("PEG Operators", "[peg]")
        -:  248:{
    #####:  249:    auto g = ParserGenerator::grammar();
    #####:  250:    REQUIRE(exact(g, "LEFTARROW", "<-") == true);
    #####:  251:    REQUIRE(exact(g, "SLASH", "/ ") == true);
    #####:  252:    REQUIRE(exact(g, "AND", "& ") == true);
    #####:  253:    REQUIRE(exact(g, "NOT", "! ") == true);
    #####:  254:    REQUIRE(exact(g, "QUESTION", "? ") == true);
    #####:  255:    REQUIRE(exact(g, "STAR", "* ") == true);
    #####:  256:    REQUIRE(exact(g, "PLUS", "+ ") == true);
    #####:  257:    REQUIRE(exact(g, "OPEN", "( ") == true);
    #####:  258:    REQUIRE(exact(g, "CLOSE", ") ") == true);
    #####:  259:    REQUIRE(exact(g, "DOT", ". ") == true);
    #####:  260:}
        -:  261:
        1:  262:TEST_CASE("PEG Comment", "[peg]")
        -:  263:{
    #####:  264:    auto g = ParserGenerator::grammar();
    #####:  265:    REQUIRE(exact(g, "Comment", "# Comment.\n") == true);
    #####:  266:    REQUIRE(exact(g, "Comment", "# Comment.") == false);
    #####:  267:    REQUIRE(exact(g, "Comment", " ") == false);
    #####:  268:    REQUIRE(exact(g, "Comment", "a") == false);
    #####:  269:}
        -:  270:
        1:  271:TEST_CASE("PEG Space", "[peg]")
        -:  272:{
    #####:  273:    auto g = ParserGenerator::grammar();
    #####:  274:    REQUIRE(exact(g, "Space", " ") == true);
    #####:  275:    REQUIRE(exact(g, "Space", "\t") == true);
    #####:  276:    REQUIRE(exact(g, "Space", "\n") == true);
    #####:  277:    REQUIRE(exact(g, "Space", "") == false);
    #####:  278:    REQUIRE(exact(g, "Space", "a") == false);
    #####:  279:}
        -:  280:
        1:  281:TEST_CASE("PEG EndOfLine", "[peg]")
        -:  282:{
    #####:  283:    auto g = ParserGenerator::grammar();
    #####:  284:    REQUIRE(exact(g, "EndOfLine", "\r\n") == true);
    #####:  285:    REQUIRE(exact(g, "EndOfLine", "\n") == true);
    #####:  286:    REQUIRE(exact(g, "EndOfLine", "\r") == true);
    #####:  287:    REQUIRE(exact(g, "EndOfLine", " ") == false);
    #####:  288:    REQUIRE(exact(g, "EndOfLine", "") == false);
    #####:  289:    REQUIRE(exact(g, "EndOfLine", "a") == false);
    #####:  290:}
        -:  291:
        1:  292:TEST_CASE("PEG EndOfFile", "[peg]")
        -:  293:{
    #####:  294:    Grammar g = make_peg_grammar();
    #####:  295:    REQUIRE(exact(g, "EndOfFile", "") == true);
    #####:  296:    REQUIRE(exact(g, "EndOfFile", " ") == false);
        3:  297:}
        -:  298:
        -:  299:// vim: et ts=4 sw=4 cin cino={1s ff=unix
