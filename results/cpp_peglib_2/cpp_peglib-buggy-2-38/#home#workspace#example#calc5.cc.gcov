        -:    0:Source:/home/workspace/example/calc5.cc
        -:    0:Programs:4
        -:    1://
        -:    2://  calc5.cc
        -:    3://
        -:    4://  Copyright (c) 2015 Yuji Hirose. All rights reserved.
        -:    5://  MIT License
        -:    6://
        -:    7:
        -:    8:#include <peglib.h>
        -:    9:#include <iostream>
        -:   10:#include <cstdlib>
        -:   11:
        -:   12:using namespace peg;
        -:   13:
    #####:   14:int main(int argc, const char** argv)
        -:   15:{
    #####:   16:    if (argc < 2 || std::string("--help") == argv[1]) {
    #####:   17:        std::cout << "usage: calc5 [formula]" << std::endl;
    #####:   18:        return 1;
        -:   19:    }
        -:   20:
    #####:   21:    std::function<long (const Ast&)> eval = [&](const Ast& ast) {
    #####:   22:        if (ast.name == "NUMBER") {
    #####:   23:            return stol(ast.token);
        -:   24:        } else {
    #####:   25:            const auto& nodes = ast.nodes;
    #####:   26:            auto result = eval(*nodes[0]);
    #####:   27:            if (nodes.size() > 1) {
    #####:   28:                auto ope = nodes[1]->token[0];
    #####:   29:                auto num = eval(*nodes[2]);
    #####:   30:                switch (ope) {
    #####:   31:                    case '+': result += num; break;
    #####:   32:                    case '-': result -= num; break;
    #####:   33:                    case '*': result *= num; break;
    #####:   34:                    case '/': result /= num; break;
        -:   35:                }
        -:   36:            }
    #####:   37:            return result;
        -:   38:        }
    #####:   39:    };
        -:   40:
        -:   41:    parser parser(R"(
        -:   42:        EXPRESSION  <- ATOM (OPERATOR ATOM)* {
        -:   43:                         precedence
        -:   44:                           L - +
        -:   45:                           L / *
        -:   46:                       }
        -:   47:        ATOM        <- NUMBER / '(' EXPRESSION ')'
        -:   48:        OPERATOR    <- < [-+/*] >
        -:   49:        NUMBER      <- < '-'? [0-9]+ >
        -:   50:        %whitespace <- [ \t\r\n]*
    #####:   51:    )");
        -:   52:
    #####:   53:    parser.enable_ast();
        -:   54:
    #####:   55:    auto expr = argv[1];
    #####:   56:    std::shared_ptr<Ast> ast;
    #####:   57:    if (parser.parse(expr, ast)) {
    #####:   58:        ast = AstOptimizer(true).optimize(ast);
    #####:   59:        std::cout << ast_to_s(ast);
    #####:   60:        std::cout << expr << " = " << eval(*ast) << std::endl;
    #####:   61:        return 0;
        -:   62:    }
        -:   63:
    #####:   64:    std::cout << "syntax error..." << std::endl;
        -:   65:
    #####:   66:    return -1;
    #####:   67:}
        -:   68:
        -:   69:// vim: et ts=4 sw=4 cin cino={1s ff=unix
