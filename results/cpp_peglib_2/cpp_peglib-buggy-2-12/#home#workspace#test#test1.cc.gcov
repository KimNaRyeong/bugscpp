        -:    0:Source:/home/workspace/test/test1.cc
        -:    0:Programs:4
        -:    1:﻿#include "catch.hh"
        -:    2:#include <peglib.h>
        -:    3:
        -:    4:using namespace peg;
        -:    5:
        -:    6:#if !defined(PEGLIB_NO_UNICODE_CHARS)
        1:    7:TEST_CASE("Simple syntax test (with unicode)", "[general]")
        -:    8:{
        -:    9:    parser parser(
        -:   10:        u8" ROOT ← _ "
        -:   11:        " _ <- ' ' "
    #####:   12:    );
        -:   13:
    #####:   14:    bool ret = parser;
    #####:   15:    REQUIRE(ret == true);
    #####:   16:}
        -:   17:#endif
        -:   18:
        1:   19:TEST_CASE("Simple syntax test", "[general]")
        -:   20:{
        -:   21:    parser parser(R"(
        -:   22:        ROOT <- _
        -:   23:        _ <- ' '
    #####:   24:    )");
        -:   25:
    #####:   26:    bool ret = parser;
    #####:   27:    REQUIRE(ret == true);
    #####:   28:}
        -:   29:
        1:   30:TEST_CASE("Empty syntax test", "[general]")
        -:   31:{
    #####:   32:    parser parser("");
    #####:   33:    bool ret = parser;
    #####:   34:    REQUIRE(ret == false);
    #####:   35:}
        -:   36:
        1:   37:TEST_CASE("Backslash escape sequence test", "[general]")
        -:   38:{
        -:   39:    parser parser(R"(
        -:   40:        ROOT <- _
        -:   41:        _ <- '\\'
    #####:   42:    )");
        -:   43:
    #####:   44:    bool ret = parser;
    #####:   45:    REQUIRE(ret == true);
    #####:   46:}
        -:   47:
        1:   48:TEST_CASE("Invalid escape sequence test", "[general]")
        -:   49:{
        -:   50:    parser parser(R"(
        -:   51:        ROOT <- _
        -:   52:        _ <- '\'
    #####:   53:    )");
        -:   54:
    #####:   55:    bool ret = parser;
    #####:   56:    REQUIRE(ret == false);
    #####:   57:}
        -:   58:
        1:   59:TEST_CASE("Action taking non const Semantic Values parameter", "[general]")
        -:   60:{
        -:   61:    parser parser(R"(
        -:   62:        ROOT <- TEXT
        -:   63:        TEXT <- [a-zA-Z]+
    #####:   64:    )");
        -:   65:
    #####:   66:    parser["ROOT"] = [&](SemanticValues& sv) {
    #####:   67:        auto s = any_cast<std::string>(sv[0]);
    #####:   68:        s[0] = 'H'; // mutate
    #####:   69:        return std::string(std::move(s)); // move
        -:   70:    };
        -:   71:
    #####:   72:    parser["TEXT"] = [&](SemanticValues& sv) {
        -:   73:        return sv.token();
    #####:   74:    };
        -:   75:
    #####:   76:    std::string val;
    #####:   77:    auto ret = parser.parse("hello", val);
    #####:   78:    REQUIRE(ret == true);
    #####:   79:    REQUIRE(val == "Hello");
    #####:   80:}
        -:   81:
        1:   82:TEST_CASE("String capture test", "[general]")
        -:   83:{
        -:   84:    parser parser(R"(
        -:   85:        ROOT      <-  _ ('[' TAG_NAME ']' _)*
        -:   86:        TAG_NAME  <-  (!']' .)+
        -:   87:        _         <-  [ \t]*
    #####:   88:    )");
        -:   89:
    #####:   90:    std::vector<std::string> tags;
        -:   91:
    #####:   92:    parser["TAG_NAME"] = [&](const SemanticValues& sv) {
    #####:   93:        tags.push_back(sv.str());
    #####:   94:    };
        -:   95:
    #####:   96:    auto ret = parser.parse(" [tag1] [tag:2] [tag-3] ");
        -:   97:
    #####:   98:    REQUIRE(ret == true);
    #####:   99:    REQUIRE(tags.size() == 3);
    #####:  100:    REQUIRE(tags[0] == "tag1");
    #####:  101:    REQUIRE(tags[1] == "tag:2");
    #####:  102:    REQUIRE(tags[2] == "tag-3");
    #####:  103:}
        -:  104:
        -:  105:using namespace peg;
        -:  106:
        1:  107:TEST_CASE("String capture test2", "[general]")
        -:  108:{
    #####:  109:    std::vector<std::string> tags;
        -:  110:
    #####:  111:    Definition ROOT, TAG, TAG_NAME, WS;
    #####:  112:    ROOT     <= seq(WS, zom(TAG));
    #####:  113:    TAG      <= seq(chr('['), TAG_NAME, chr(']'), WS);
    #####:  114:    TAG_NAME <= oom(seq(npd(chr(']')), dot())), [&](const SemanticValues& sv) { tags.push_back(sv.str()); };
    #####:  115:    WS       <= zom(cls(" \t"));
        -:  116:
    #####:  117:    auto r = ROOT.parse(" [tag1] [tag:2] [tag-3] ");
        -:  118:
    #####:  119:    REQUIRE(r.ret == true);
    #####:  120:    REQUIRE(tags.size() == 3);
    #####:  121:    REQUIRE(tags[0] == "tag1");
    #####:  122:    REQUIRE(tags[1] == "tag:2");
    #####:  123:    REQUIRE(tags[2] == "tag-3");
    #####:  124:}
        -:  125:
        1:  126:TEST_CASE("String capture test3", "[general]")
        -:  127:{
        -:  128:    parser pg(R"(
        -:  129:        ROOT  <- _ TOKEN*
        -:  130:        TOKEN <- '[' < (!']' .)+ > ']' _
        -:  131:        _     <- [ \t\r\n]*
    #####:  132:    )");
        -:  133:
        -:  134:
    #####:  135:    std::vector<std::string> tags;
        -:  136:
    #####:  137:    pg["TOKEN"] = [&](const SemanticValues& sv) {
    #####:  138:        tags.push_back(sv.token());
    #####:  139:    };
        -:  140:
    #####:  141:    auto ret = pg.parse(" [tag1] [tag:2] [tag-3] ");
        -:  142:
    #####:  143:    REQUIRE(ret == true);
    #####:  144:    REQUIRE(tags.size() == 3);
    #####:  145:    REQUIRE(tags[0] == "tag1");
    #####:  146:    REQUIRE(tags[1] == "tag:2");
    #####:  147:    REQUIRE(tags[2] == "tag-3");
    #####:  148:}
        -:  149:
        1:  150:TEST_CASE("Cyclic grammer test", "[general]")
        -:  151:{
    #####:  152:    Definition PARENT;
    #####:  153:    Definition CHILD;
        -:  154:
    #####:  155:    PARENT <= seq(CHILD);
    #####:  156:    CHILD  <= seq(PARENT);
    #####:  157:}
        -:  158:
        1:  159:TEST_CASE("Visit test", "[general]")
        -:  160:{
    #####:  161:    Definition ROOT, TAG, TAG_NAME, WS;
        -:  162:
    #####:  163:    ROOT     <= seq(WS, zom(TAG));
    #####:  164:    TAG      <= seq(chr('['), TAG_NAME, chr(']'), WS);
    #####:  165:    TAG_NAME <= oom(seq(npd(chr(']')), dot()));
    #####:  166:    WS       <= zom(cls(" \t"));
        -:  167:
    #####:  168:    AssignIDToDefinition defIds;
    #####:  169:    ROOT.accept(defIds);
        -:  170:
    #####:  171:    REQUIRE(defIds.ids.size() == 4);
    #####:  172:}
        -:  173:
        2:  174:TEST_CASE("Token check test", "[general]")
        -:  175:{
        -:  176:    parser parser(R"(
        -:  177:        EXPRESSION       <-  _ TERM (TERM_OPERATOR TERM)*
        -:  178:        TERM             <-  FACTOR (FACTOR_OPERATOR FACTOR)*
        -:  179:        FACTOR           <-  NUMBER / '(' _ EXPRESSION ')' _
        -:  180:        TERM_OPERATOR    <-  < [-+] > _
        -:  181:        FACTOR_OPERATOR  <-  < [/*] > _
        -:  182:        NUMBER           <-  < [0-9]+ > _
        -:  183:        _                <-  [ \t\r\n]*
        2:  184:    )");
        -:  185:
        1:  186:    REQUIRE(parser["EXPRESSION"].is_token() == false);
        1:  187:    REQUIRE(parser["FACTOR"].is_token() == false);
        1:  188:    REQUIRE(parser["FACTOR_OPERATOR"].is_token() == true);
        1:  189:    REQUIRE(parser["NUMBER"].is_token() == true);
        1:  190:    REQUIRE(parser["_"].is_token() == true);
        1:  191:}
        -:  192:
        1:  193:TEST_CASE("Lambda action test", "[general]")
        -:  194:{
        -:  195:    parser parser(R"(
        -:  196:       START <- (CHAR)*
        -:  197:       CHAR  <- .
    #####:  198:    )");
        -:  199:
    #####:  200:    std::string ss;
    #####:  201:    parser["CHAR"] = [&](const SemanticValues& sv) {
    #####:  202:        ss += *sv.c_str();
    #####:  203:    };
        -:  204:
    #####:  205:    bool ret = parser.parse("hello");
    #####:  206:    REQUIRE(ret == true);
    #####:  207:    REQUIRE(ss == "hello");
    #####:  208:}
        -:  209:
        1:  210:TEST_CASE("enter/leave handlers test", "[general]")
        -:  211:{
        -:  212:    parser parser(R"(
        -:  213:        START  <- LTOKEN '=' RTOKEN
        -:  214:        LTOKEN <- TOKEN
        -:  215:        RTOKEN <- TOKEN
        -:  216:        TOKEN  <- [A-Za-z]+
    #####:  217:    )");
        -:  218:
    #####:  219:    parser["LTOKEN"].enter = [&](const char*, size_t, any& dt) {
    #####:  220:        auto& require_upper_case = *any_cast<bool*>(dt);
    #####:  221:        require_upper_case = false;
    #####:  222:    };
    #####:  223:    parser["LTOKEN"].leave = [&](const char*, size_t, size_t, any&, any& dt) {
    #####:  224:        auto& require_upper_case = *any_cast<bool*>(dt);
    #####:  225:        require_upper_case = true;
    #####:  226:    };
        -:  227:
    #####:  228:    auto message = "should be upper case string...";
        -:  229:
    #####:  230:    parser["TOKEN"] = [&](const SemanticValues& sv, any& dt) {
    #####:  231:        auto& require_upper_case = *any_cast<bool*>(dt);
    #####:  232:        if (require_upper_case) {
    #####:  233:            const auto& s = sv.str();
    #####:  234:            if (!std::all_of(s.begin(), s.end(), ::isupper)) {
    #####:  235:                throw parse_error(message);
        -:  236:            }
        -:  237:        }
    #####:  238:    };
        -:  239:
    #####:  240:    bool require_upper_case = false;
    #####:  241:    any dt = &require_upper_case;
    #####:  242:    REQUIRE(parser.parse("hello=world", dt) == false);
    #####:  243:    REQUIRE(parser.parse("HELLO=world", dt) == false);
    #####:  244:    REQUIRE(parser.parse("hello=WORLD", dt) == true);
    #####:  245:    REQUIRE(parser.parse("HELLO=WORLD", dt) == true);
        -:  246:
    #####:  247:    parser.log = [&](size_t ln, size_t col, const std::string& msg) {
    #####:  248:        REQUIRE(ln == 1);
    #####:  249:        REQUIRE(col == 7);
    #####:  250:        REQUIRE(msg == message);
    #####:  251:    };
    #####:  252:    parser.parse("hello=world", dt);
    #####:  253:}
        -:  254:
        1:  255:TEST_CASE("WHITESPACE test", "[general]")
        -:  256:{
        -:  257:    parser parser(R"(
        -:  258:        # Rules
        -:  259:        ROOT         <-  ITEM (',' ITEM)*
        -:  260:        ITEM         <-  WORD / PHRASE
        -:  261:
        -:  262:        # Tokens
        -:  263:        WORD         <-  < [a-zA-Z0-9_]+ >
        -:  264:        PHRASE       <-  < '"' (!'"' .)* '"' >
        -:  265:
        -:  266:        %whitespace  <-  [ \t\r\n]*
    #####:  267:    )");
        -:  268:
    #####:  269:    auto ret = parser.parse(R"(  one, 	 "two, three",   four  )");
        -:  270:
    #####:  271:    REQUIRE(ret == true);
    #####:  272:}
        -:  273:
        1:  274:TEST_CASE("WHITESPACE test2", "[general]")
        -:  275:{
        -:  276:    parser parser(R"(
        -:  277:        # Rules
        -:  278:        ROOT         <-  ITEM (',' ITEM)*
        -:  279:        ITEM         <-  '[' < [a-zA-Z0-9_]+ > ']'
        -:  280:
        -:  281:        %whitespace  <-  (SPACE / TAB)*
        -:  282:        SPACE        <-  ' '
        -:  283:        TAB          <-  '\t'
    #####:  284:    )");
        -:  285:
    #####:  286:    std::vector<std::string> items;
    #####:  287:    parser["ITEM"] = [&](const SemanticValues& sv) {
    #####:  288:        items.push_back(sv.token());
    #####:  289:    };
        -:  290:
    #####:  291:    auto ret = parser.parse(R"([one], 	[two] ,[three] )");
        -:  292:
    #####:  293:    REQUIRE(ret == true);
    #####:  294:    REQUIRE(items.size() == 3);
    #####:  295:    REQUIRE(items[0] == "one");
    #####:  296:    REQUIRE(items[1] == "two");
    #####:  297:    REQUIRE(items[2] == "three");
    #####:  298:}
        -:  299:
        1:  300:TEST_CASE("WHITESPACE test3", "[general]") {
        -:  301:    parser parser(R"(
        -:  302:        StrQuot      <- < '"' < (StrEscape / StrChars)* > '"' >
        -:  303:        StrEscape    <- '\\' any
        -:  304:        StrChars     <- (!'"' !'\\' any)+
        -:  305:        any          <- .
        -:  306:        %whitespace  <- [ \t]*
    #####:  307:    )");
        -:  308:
    #####:  309:    parser["StrQuot"] = [](const SemanticValues& sv) {
    #####:  310:        REQUIRE(sv.token() == R"(  aaa \" bbb  )");
    #####:  311:    };
        -:  312:
    #####:  313:    auto ret = parser.parse(R"( "  aaa \" bbb  " )");
    #####:  314:    REQUIRE(ret == true);
    #####:  315:}
        -:  316:
        1:  317:TEST_CASE("WHITESPACE test4", "[general]") {
        -:  318:    parser parser(R"(
        -:  319:        ROOT         <-  HELLO OPE WORLD
        -:  320:        HELLO        <-  'hello'
        -:  321:        OPE          <-  < [-+] >
        -:  322:        WORLD        <-  'world' / 'WORLD'
        -:  323:        %whitespace  <-  [ \t\r\n]*
    #####:  324:    )");
        -:  325:
    #####:  326:    parser["HELLO"] = [](const SemanticValues& sv) {
    #####:  327:        REQUIRE(sv.token() == "hello");
    #####:  328:    };
        -:  329:
    #####:  330:    parser["OPE"] = [](const SemanticValues& sv) {
    #####:  331:        REQUIRE(sv.token() == "+");
    #####:  332:    };
        -:  333:
    #####:  334:    parser["WORLD"] = [](const SemanticValues& sv) {
    #####:  335:        REQUIRE(sv.token() == "world");
    #####:  336:    };
        -:  337:
    #####:  338:    auto ret = parser.parse("  hello + world  ");
    #####:  339:    REQUIRE(ret == true);
    #####:  340:}
        -:  341:
        1:  342:TEST_CASE("Word expression test", "[general]") {
        -:  343:    parser parser(R"(
        -:  344:        ROOT         <-  'hello' ','? 'world'
        -:  345:        %whitespace  <-  [ \t\r\n]*
        -:  346:        %word        <-  [a-z]+
    #####:  347:    )");
        -:  348:
    #####:  349:	REQUIRE(parser.parse("helloworld") == false);
    #####:  350:	REQUIRE(parser.parse("hello world") == true);
    #####:  351:	REQUIRE(parser.parse("hello,world") == true);
    #####:  352:	REQUIRE(parser.parse("hello, world") == true);
    #####:  353:	REQUIRE(parser.parse("hello , world") == true);
    #####:  354:}
        -:  355:
        1:  356:TEST_CASE("Skip token test", "[general]")
        -:  357:{
        -:  358:    parser parser(
        -:  359:        "  ROOT  <-  _ ITEM (',' _ ITEM _)* "
        -:  360:        "  ITEM  <-  ([a-z0-9])+  "
        -:  361:        "  ~_    <-  [ \t]*    "
    #####:  362:    );
        -:  363:
    #####:  364:    parser["ROOT"] = [&](const SemanticValues& sv) {
    #####:  365:        REQUIRE(sv.size() == 2);
    #####:  366:    };
        -:  367:
    #####:  368:    auto ret = parser.parse(" item1, item2 ");
        -:  369:
    #####:  370:    REQUIRE(ret == true);
    #####:  371:}
        -:  372:
        1:  373:TEST_CASE("Skip token test2", "[general]")
        -:  374:{
        -:  375:    parser parser(R"(
        -:  376:        ROOT        <-  ITEM (',' ITEM)*
        -:  377:        ITEM        <-  < ([a-z0-9])+ >
        -:  378:        %whitespace <-  [ \t]*
    #####:  379:    )");
        -:  380:
    #####:  381:    parser["ROOT"] = [&](const SemanticValues& sv) {
    #####:  382:        REQUIRE(sv.size() == 2);
    #####:  383:    };
        -:  384:
    #####:  385:    auto ret = parser.parse(" item1, item2 ");
        -:  386:
    #####:  387:    REQUIRE(ret == true);
    #####:  388:}
        -:  389:
        1:  390:TEST_CASE("Backtracking test", "[general]")
        -:  391:{
        -:  392:    parser parser(R"(
        -:  393:       START <- PAT1 / PAT2
        -:  394:       PAT1  <- HELLO ' One'
        -:  395:       PAT2  <- HELLO ' Two'
        -:  396:       HELLO <- 'Hello'
    #####:  397:    )");
        -:  398:
    #####:  399:    size_t count = 0;
    #####:  400:    parser["HELLO"] = [&](const SemanticValues& /*sv*/) {
    #####:  401:        count++;
    #####:  402:    };
        -:  403:
    #####:  404:    parser.enable_packrat_parsing();
        -:  405:
    #####:  406:    bool ret = parser.parse("Hello Two");
    #####:  407:    REQUIRE(ret == true);
    #####:  408:    REQUIRE(count == 1); // Skip second time
    #####:  409:}
        -:  410:
        1:  411:TEST_CASE("Backtracking with AST", "[general]")
        -:  412:{
        -:  413:    parser parser(R"(
        -:  414:        S <- A? B (A B)* A
        -:  415:        A <- 'a'
        -:  416:        B <- 'b'
    #####:  417:    )");
        -:  418:
    #####:  419:    parser.enable_ast();
    #####:  420:    std::shared_ptr<Ast> ast;
    #####:  421:    bool ret = parser.parse("ba", ast);
    #####:  422:    REQUIRE(ret == true);
    #####:  423:    REQUIRE(ast->nodes.size() == 2);
    #####:  424:}
        -:  425:
        1:  426:TEST_CASE("Octal/Hex/Unicode value test", "[general]")
        -:  427:{
        -:  428:    parser parser(
        -:  429:        R"( ROOT <- '\132\x7a\u30f3' )"
    #####:  430:    );
        -:  431:
    #####:  432:    auto ret = parser.parse("Zzン");
        -:  433:
    #####:  434:    REQUIRE(ret == true);
    #####:  435:}
        -:  436:
        1:  437:TEST_CASE("Ignore case test", "[general]") {
        -:  438:    parser parser(R"(
        -:  439:        ROOT         <-  HELLO WORLD
        -:  440:        HELLO        <-  'hello'i
        -:  441:        WORLD        <-  'world'i
        -:  442:        %whitespace  <-  [ \t\r\n]*
    #####:  443:    )");
        -:  444:
    #####:  445:    parser["HELLO"] = [](const SemanticValues& sv) {
    #####:  446:        REQUIRE(sv.token() == "Hello");
    #####:  447:    };
        -:  448:
    #####:  449:    parser["WORLD"] = [](const SemanticValues& sv) {
    #####:  450:        REQUIRE(sv.token() == "World");
    #####:  451:    };
        -:  452:
    #####:  453:    auto ret = parser.parse("  Hello World  ");
    #####:  454:    REQUIRE(ret == true);
    #####:  455:}
        -:  456:
        1:  457:TEST_CASE("mutable lambda test", "[general]")
        -:  458:{
    #####:  459:    std::vector<std::string> vec;
        -:  460:
    #####:  461:    parser pg("ROOT <- 'mutable lambda test'");
        -:  462:
        -:  463:    // This test makes sure if the following code can be compiled.
    #####:  464:    pg["TOKEN"] = [=](const SemanticValues& sv) mutable {
    #####:  465:        vec.push_back(sv.str());
    #####:  466:    };
    #####:  467:}
        -:  468:
        1:  469:TEST_CASE("Simple calculator test", "[general]")
        -:  470:{
        -:  471:    parser parser(R"(
        -:  472:        Additive  <- Multitive '+' Additive / Multitive
        -:  473:        Multitive <- Primary '*' Multitive / Primary
        -:  474:        Primary   <- '(' Additive ')' / Number
        -:  475:        Number    <- [0-9]+
    #####:  476:    )");
        -:  477:
    #####:  478:    parser["Additive"] = [](const SemanticValues& sv) {
    #####:  479:        switch (sv.choice()) {
    #####:  480:        case 0:
    #####:  481:            return any_cast<int>(sv[0]) + any_cast<int>(sv[1]);
    #####:  482:        default:
    #####:  483:            return any_cast<int>(sv[0]);
        -:  484:        }
        -:  485:    };
        -:  486:
    #####:  487:    parser["Multitive"] = [](const SemanticValues& sv) {
    #####:  488:        switch (sv.choice()) {
    #####:  489:        case 0:
    #####:  490:            return any_cast<int>(sv[0]) * any_cast<int>(sv[1]);
    #####:  491:        default:
    #####:  492:            return any_cast<int>(sv[0]);
        -:  493:        }
        -:  494:    };
        -:  495:
    #####:  496:    parser["Number"] = [](const SemanticValues& sv) {
    #####:  497:        return atoi(sv.c_str());
    #####:  498:    };
        -:  499:
        -:  500:    int val;
    #####:  501:    parser.parse("(1+2)*3", val);
        -:  502:
    #####:  503:    REQUIRE(val == 9);
    #####:  504:}
        -:  505:
        1:  506:TEST_CASE("Calculator test", "[general]")
        -:  507:{
        -:  508:    // Construct grammer
    #####:  509:    Definition EXPRESSION, TERM, FACTOR, TERM_OPERATOR, FACTOR_OPERATOR, NUMBER;
        -:  510:
    #####:  511:    EXPRESSION      <= seq(TERM, zom(seq(TERM_OPERATOR, TERM)));
    #####:  512:    TERM            <= seq(FACTOR, zom(seq(FACTOR_OPERATOR, FACTOR)));
    #####:  513:    FACTOR          <= cho(NUMBER, seq(chr('('), EXPRESSION, chr(')')));
    #####:  514:    TERM_OPERATOR   <= cls("+-");
    #####:  515:    FACTOR_OPERATOR <= cls("*/");
    #####:  516:    NUMBER          <= oom(cls("0-9"));
        -:  517:
        -:  518:    // Setup actions
    #####:  519:    auto reduce = [](const SemanticValues& sv) -> long {
    #####:  520:        long ret = any_cast<long>(sv[0]);
    #####:  521:        for (auto i = 1u; i < sv.size(); i += 2) {
    #####:  522:            auto num = any_cast<long>(sv[i + 1]);
    #####:  523:            switch (any_cast<char>(sv[i])) {
    #####:  524:                case '+': ret += num; break;
    #####:  525:                case '-': ret -= num; break;
    #####:  526:                case '*': ret *= num; break;
    #####:  527:                case '/': ret /= num; break;
        -:  528:            }
        -:  529:        }
    #####:  530:        return ret;
        -:  531:    };
        -:  532:
    #####:  533:    EXPRESSION      = reduce;
    #####:  534:    TERM            = reduce;
    #####:  535:    TERM_OPERATOR   = [](const SemanticValues& sv) { return *sv.c_str(); };
    #####:  536:    FACTOR_OPERATOR = [](const SemanticValues& sv) { return *sv.c_str(); };
    #####:  537:    NUMBER          = [](const SemanticValues& sv) { return stol(sv.str(), nullptr, 10); };
        -:  538:
        -:  539:    // Parse
        -:  540:    long val;
    #####:  541:    auto r = EXPRESSION.parse_and_get_value("1+2*3*(4-5+6)/7-8", val);
        -:  542:
    #####:  543:    REQUIRE(r.ret == true);
    #####:  544:    REQUIRE(val == -3);
    #####:  545:}
        -:  546:
        1:  547:TEST_CASE("Calculator test2", "[general]")
        -:  548:{
        -:  549:    // Parse syntax
    #####:  550:    auto syntax = R"(
        -:  551:        # Grammar for Calculator...
        -:  552:        EXPRESSION       <-  TERM (TERM_OPERATOR TERM)*
        -:  553:        TERM             <-  FACTOR (FACTOR_OPERATOR FACTOR)*
        -:  554:        FACTOR           <-  NUMBER / '(' EXPRESSION ')'
        -:  555:        TERM_OPERATOR    <-  [-+]
        -:  556:        FACTOR_OPERATOR  <-  [/*]
        -:  557:        NUMBER           <-  [0-9]+
        -:  558:    )";
        -:  559:
    #####:  560:    std::string start;
    #####:  561:    auto grammar = ParserGenerator::parse(syntax, strlen(syntax), start, nullptr);
    #####:  562:    auto& g = *grammar;
        -:  563:
        -:  564:    // Setup actions
    #####:  565:    auto reduce = [](const SemanticValues& sv) -> long {
    #####:  566:        long ret = any_cast<long>(sv[0]);
    #####:  567:        for (auto i = 1u; i < sv.size(); i += 2) {
    #####:  568:            auto num = any_cast<long>(sv[i + 1]);
    #####:  569:            switch (any_cast<char>(sv[i])) {
    #####:  570:                case '+': ret += num; break;
    #####:  571:                case '-': ret -= num; break;
    #####:  572:                case '*': ret *= num; break;
    #####:  573:                case '/': ret /= num; break;
        -:  574:            }
        -:  575:        }
    #####:  576:        return ret;
        -:  577:    };
        -:  578:
    #####:  579:    g["EXPRESSION"]      = reduce;
    #####:  580:    g["TERM"]            = reduce;
    #####:  581:    g["TERM_OPERATOR"]   = [](const SemanticValues& sv) { return *sv.c_str(); };
    #####:  582:    g["FACTOR_OPERATOR"] = [](const SemanticValues& sv) { return *sv.c_str(); };
    #####:  583:    g["NUMBER"]          = [](const SemanticValues& sv) { return stol(sv.str(), nullptr, 10); };
        -:  584:
        -:  585:    // Parse
        -:  586:    long val;
    #####:  587:    auto r = g[start].parse_and_get_value("1+2*3*(4-5+6)/7-8", val);
        -:  588:
    #####:  589:    REQUIRE(r.ret == true);
    #####:  590:    REQUIRE(val == -3);
    #####:  591:}
        -:  592:
        1:  593:TEST_CASE("Calculator test3", "[general]")
        -:  594:{
        -:  595:    // Parse syntax
        -:  596:    parser parser(R"(
        -:  597:        # Grammar for Calculator...
        -:  598:        EXPRESSION       <-  TERM (TERM_OPERATOR TERM)*
        -:  599:        TERM             <-  FACTOR (FACTOR_OPERATOR FACTOR)*
        -:  600:        FACTOR           <-  NUMBER / '(' EXPRESSION ')'
        -:  601:        TERM_OPERATOR    <-  [-+]
        -:  602:        FACTOR_OPERATOR  <-  [/*]
        -:  603:        NUMBER           <-  [0-9]+
    #####:  604:    )");
        -:  605:
    #####:  606:    auto reduce = [](const SemanticValues& sv) -> long {
    #####:  607:        long ret = any_cast<long>(sv[0]);
    #####:  608:        for (auto i = 1u; i < sv.size(); i += 2) {
    #####:  609:            auto num = any_cast<long>(sv[i + 1]);
    #####:  610:            switch (any_cast<char>(sv[i])) {
    #####:  611:                case '+': ret += num; break;
    #####:  612:                case '-': ret -= num; break;
    #####:  613:                case '*': ret *= num; break;
    #####:  614:                case '/': ret /= num; break;
        -:  615:            }
        -:  616:        }
    #####:  617:        return ret;
        -:  618:    };
        -:  619:
        -:  620:    // Setup actions
    #####:  621:    parser["EXPRESSION"]      = reduce;
    #####:  622:    parser["TERM"]            = reduce;
    #####:  623:    parser["TERM_OPERATOR"]   = [](const SemanticValues& sv) { return static_cast<char>(*sv.c_str()); };
    #####:  624:    parser["FACTOR_OPERATOR"] = [](const SemanticValues& sv) { return static_cast<char>(*sv.c_str()); };
    #####:  625:    parser["NUMBER"]          = [](const SemanticValues& sv) { return stol(sv.str(), nullptr, 10); };
        -:  626:
        -:  627:    // Parse
        -:  628:    long val;
    #####:  629:    auto ret = parser.parse("1+2*3*(4-5+6)/7-8", val);
        -:  630:
    #####:  631:    REQUIRE(ret == true);
    #####:  632:    REQUIRE(val == -3);
    #####:  633:}
        -:  634:
        1:  635:TEST_CASE("Calculator test with AST", "[general]")
        -:  636:{
        -:  637:    parser parser(R"(
        -:  638:        EXPRESSION       <-  _ TERM (TERM_OPERATOR TERM)*
        -:  639:        TERM             <-  FACTOR (FACTOR_OPERATOR FACTOR)*
        -:  640:        FACTOR           <-  NUMBER / '(' _ EXPRESSION ')' _
        -:  641:        TERM_OPERATOR    <-  < [-+] > _
        -:  642:        FACTOR_OPERATOR  <-  < [/*] > _
        -:  643:        NUMBER           <-  < [0-9]+ > _
        -:  644:        ~_               <-  [ \t\r\n]*
    #####:  645:    )");
        -:  646:
    #####:  647:    parser.enable_ast();
        -:  648:
    #####:  649:    std::function<long (const Ast&)> eval = [&](const Ast& ast) {
    #####:  650:        if (ast.name == "NUMBER") {
    #####:  651:            return stol(ast.token);
        -:  652:        } else {
    #####:  653:            const auto& nodes = ast.nodes;
    #####:  654:            auto result = eval(*nodes[0]);
    #####:  655:            for (auto i = 1u; i < nodes.size(); i += 2) {
    #####:  656:                auto num = eval(*nodes[i + 1]);
    #####:  657:                auto ope = nodes[i]->token[0];
    #####:  658:                switch (ope) {
    #####:  659:                    case '+': result += num; break;
    #####:  660:                    case '-': result -= num; break;
    #####:  661:                    case '*': result *= num; break;
    #####:  662:                    case '/': result /= num; break;
        -:  663:                }
        -:  664:            }
    #####:  665:            return result;
        -:  666:        }
    #####:  667:    };
        -:  668:
    #####:  669:    std::shared_ptr<Ast> ast;
    #####:  670:    auto ret = parser.parse("1+2*3*(4-5+6)/7-8", ast);
    #####:  671:    ast = AstOptimizer(true).optimize(ast);
    #####:  672:    auto val = eval(*ast);
        -:  673:
    #####:  674:    REQUIRE(ret == true);
    #####:  675:    REQUIRE(val == -3);
    #####:  676:}
        -:  677:
        1:  678:TEST_CASE("Ignore semantic value test", "[general]")
        -:  679:{
        -:  680:    parser parser(R"(
        -:  681:       START <-  ~HELLO WORLD
        -:  682:       HELLO <- 'Hello' _
        -:  683:       WORLD <- 'World' _
        -:  684:       _     <- [ \t\r\n]*
    #####:  685:    )");
        -:  686:
    #####:  687:    parser.enable_ast();
        -:  688:
    #####:  689:    std::shared_ptr<Ast> ast;
    #####:  690:    auto ret = parser.parse("Hello World", ast);
        -:  691:
    #####:  692:    REQUIRE(ret == true);
    #####:  693:    REQUIRE(ast->nodes.size() == 1);
    #####:  694:    REQUIRE(ast->nodes[0]->name == "WORLD");
    #####:  695:}
        -:  696:
        1:  697:TEST_CASE("Ignore semantic value of 'or' predicate test", "[general]")
        -:  698:{
        -:  699:    parser parser(R"(
        -:  700:       START       <- _ !DUMMY HELLO_WORLD '.'
        -:  701:       HELLO_WORLD <- HELLO 'World' _
        -:  702:       HELLO       <- 'Hello' _
        -:  703:       DUMMY       <- 'dummy' _
        -:  704:       ~_          <- [ \t\r\n]*
    #####:  705:   )");
        -:  706:
    #####:  707:    parser.enable_ast();
        -:  708:
    #####:  709:    std::shared_ptr<Ast> ast;
    #####:  710:    auto ret = parser.parse("Hello World.", ast);
        -:  711:
    #####:  712:    REQUIRE(ret == true);
    #####:  713:    REQUIRE(ast->nodes.size() == 1);
    #####:  714:    REQUIRE(ast->nodes[0]->name == "HELLO_WORLD");
    #####:  715:}
        -:  716:
        1:  717:TEST_CASE("Ignore semantic value of 'and' predicate test", "[general]")
        -:  718:{
        -:  719:    parser parser(R"(
        -:  720:       START       <- _ &HELLO HELLO_WORLD '.'
        -:  721:       HELLO_WORLD <- HELLO 'World' _
        -:  722:       HELLO       <- 'Hello' _
        -:  723:       ~_          <- [ \t\r\n]*
    #####:  724:    )");
        -:  725:
    #####:  726:    parser.enable_ast();
        -:  727:
    #####:  728:    std::shared_ptr<Ast> ast;
    #####:  729:    auto ret = parser.parse("Hello World.", ast);
        -:  730:
    #####:  731:    REQUIRE(ret == true);
    #####:  732:    REQUIRE(ast->nodes.size() == 1);
    #####:  733:    REQUIRE(ast->nodes[0]->name == "HELLO_WORLD");
    #####:  734:}
        -:  735:
        1:  736:TEST_CASE("Literal token on AST test1", "[general]")
        -:  737:{
        -:  738:    parser parser(R"(
        -:  739:        STRING_LITERAL  <- '"' (('\\"' / '\\t' / '\\n') / (!["] .))* '"'
    #####:  740:    )");
    #####:  741:    parser.enable_ast();
        -:  742:
    #####:  743:    std::shared_ptr<Ast> ast;
    #####:  744:    auto ret = parser.parse(R"("a\tb")", ast);
        -:  745:
    #####:  746:    REQUIRE(ret == true);
    #####:  747:    REQUIRE(ast->is_token == true);
    #####:  748:    REQUIRE(ast->token == R"("a\tb")");
    #####:  749:    REQUIRE(ast->nodes.empty());
    #####:  750:}
        -:  751:
        1:  752:TEST_CASE("Literal token on AST test2", "[general]")
        -:  753:{
        -:  754:    parser parser(R"(
        -:  755:        STRING_LITERAL  <-  '"' (ESC / CHAR)* '"'
        -:  756:        ESC             <-  ('\\"' / '\\t' / '\\n')
        -:  757:        CHAR            <-  (!["] .)
    #####:  758:    )");
    #####:  759:    parser.enable_ast();
        -:  760:
    #####:  761:    std::shared_ptr<Ast> ast;
    #####:  762:    auto ret = parser.parse(R"("a\tb")", ast);
        -:  763:
    #####:  764:    REQUIRE(ret == true);
    #####:  765:    REQUIRE(ast->is_token == false);
    #####:  766:    REQUIRE(ast->token.empty());
    #####:  767:    REQUIRE(ast->nodes.size() == 3);
    #####:  768:}
        -:  769:
        1:  770:TEST_CASE("Literal token on AST test3", "[general]")
        -:  771:{
        -:  772:    parser parser(R"(
        -:  773:        STRING_LITERAL  <-  < '"' (ESC / CHAR)* '"' >
        -:  774:        ESC             <-  ('\\"' / '\\t' / '\\n')
        -:  775:        CHAR            <-  (!["] .)
    #####:  776:    )");
    #####:  777:    parser.enable_ast();
        -:  778:
    #####:  779:    std::shared_ptr<Ast> ast;
    #####:  780:    auto ret = parser.parse(R"("a\tb")", ast);
        -:  781:
    #####:  782:    REQUIRE(ret == true);
    #####:  783:    REQUIRE(ast->is_token == true);
    #####:  784:    REQUIRE(ast->token == R"("a\tb")");
    #####:  785:    REQUIRE(ast->nodes.empty());
    #####:  786:}
        -:  787:
        1:  788:TEST_CASE("Missing missing definitions test", "[general]")
        -:  789:{
        -:  790:    parser parser(R"(
        -:  791:        A <- B C
    #####:  792:    )");
        -:  793:
    #####:  794:    REQUIRE(!parser);
    #####:  795:}
        -:  796:
        1:  797:TEST_CASE("Definition duplicates test", "[general]")
        -:  798:{
        -:  799:    parser parser(R"(
        -:  800:        A <- ''
        -:  801:        A <- ''
    #####:  802:    )");
        -:  803:
    #####:  804:    REQUIRE(!parser);
    #####:  805:}
        -:  806:
        1:  807:TEST_CASE("Semantic values test", "[general]")
        -:  808:{
        -:  809:    parser parser(R"(
        -:  810:        term <- ( a b c x )? a b c
        -:  811:        a <- 'a'
        -:  812:        b <- 'b'
        -:  813:        c <- 'c'
        -:  814:        x <- 'x'
    #####:  815:    )");
        -:  816:
    #####:  817:	for (const auto& rule: parser.get_rule_names()){
    #####:  818:		parser[rule.c_str()] = [rule](const SemanticValues& sv, any&) {
    #####:  819:            if (rule == "term") {
    #####:  820:                REQUIRE(any_cast<std::string>(sv[0]) == "a at 0");
    #####:  821:                REQUIRE(any_cast<std::string>(sv[1]) == "b at 1");
    #####:  822:                REQUIRE(any_cast<std::string>(sv[2]) == "c at 2");
    #####:  823:                return std::string();
        -:  824:            } else {
    #####:  825:                return rule + " at " + std::to_string(sv.c_str() - sv.ss);
        -:  826:            }
        -:  827:		};
        -:  828:	}
        -:  829:
    #####:  830:	REQUIRE(parser.parse("abc"));
    #####:  831:}
        -:  832:
        1:  833:TEST_CASE("Ordered choice count", "[general]")
        -:  834:{
        -:  835:    parser parser(R"(
        -:  836:        S <- 'a' / 'b'
    #####:  837:    )");
        -:  838:
    #####:  839:    parser["S"] = [](const SemanticValues& sv) {
    #####:  840:        REQUIRE(sv.choice() == 1);
    #####:  841:        REQUIRE(sv.choice_count() == 2);
    #####:  842:    };
        -:  843:
    #####:  844:    parser.parse("b");
    #####:  845:}
        -:  846:
        1:  847:TEST_CASE("Ordered choice count 2", "[general]")
        -:  848:{
        -:  849:    parser parser(R"(
        -:  850:        S <- ('a' / 'b')*
    #####:  851:    )");
        -:  852:
    #####:  853:    parser["S"] = [](const SemanticValues& sv) {
    #####:  854:        REQUIRE(sv.choice() == 0);
    #####:  855:        REQUIRE(sv.choice_count() == 0);
    #####:  856:    };
        -:  857:
    #####:  858:    parser.parse("b");
    #####:  859:}
        -:  860:
        1:  861:TEST_CASE("Semantic value tag", "[general]")
        -:  862:{
        -:  863:    parser parser(R"(
        -:  864:        S <- A? B* C?
        -:  865:        A <- 'a'
        -:  866:        B <- 'b'
        -:  867:        C <- 'c'
    #####:  868:    )");
        -:  869:
        -:  870:    {
        -:  871:        using namespace udl;
    #####:  872:        parser["S"] = [](const SemanticValues& sv) {
    #####:  873:            REQUIRE(sv.size() == 1);
    #####:  874:            REQUIRE(sv.tags.size() == 1);
    #####:  875:            REQUIRE(sv.tags[0] == "C"_);
    #####:  876:        };
    #####:  877:        auto ret = parser.parse("c");
    #####:  878:        REQUIRE(ret == true);
        -:  879:    }
        -:  880:
        -:  881:    {
        -:  882:        using namespace udl;
    #####:  883:        parser["S"] = [](const SemanticValues& sv) {
    #####:  884:            REQUIRE(sv.size() == 2);
    #####:  885:            REQUIRE(sv.tags.size() == 2);
    #####:  886:            REQUIRE(sv.tags[0] == "B"_);
    #####:  887:            REQUIRE(sv.tags[1] == "B"_);
    #####:  888:        };
    #####:  889:        auto ret = parser.parse("bb");
    #####:  890:        REQUIRE(ret == true);
        -:  891:    }
        -:  892:
        -:  893:    {
        -:  894:        using namespace udl;
    #####:  895:        parser["S"] = [](const SemanticValues& sv) {
    #####:  896:            REQUIRE(sv.size() == 2);
    #####:  897:            REQUIRE(sv.tags.size() == 2);
    #####:  898:            REQUIRE(sv.tags[0] == "A"_);
    #####:  899:            REQUIRE(sv.tags[1] == "C"_);
    #####:  900:        };
    #####:  901:        auto ret = parser.parse("ac");
    #####:  902:        REQUIRE(ret == true);
        -:  903:    }
    #####:  904:}
        -:  905:
        1:  906:TEST_CASE("Negated Class test", "[general]")
        -:  907:{
        -:  908:    parser parser(R"(
        -:  909:        ROOT <- [^a-z_]+
    #####:  910:    )");
        -:  911:
    #####:  912:    bool ret = parser;
    #####:  913:    REQUIRE(ret == true);
        -:  914:
    #####:  915:    REQUIRE(parser.parse("ABC123"));
    #####:  916:    REQUIRE_FALSE(parser.parse("ABcZ"));
    #####:  917:    REQUIRE_FALSE(parser.parse("ABCZ_"));
    #####:  918:    REQUIRE_FALSE(parser.parse(""));
        3:  919:}
        -:  920:
        -:  921:// vim: et ts=4 sw=4 cin cino={1s ff=unix
