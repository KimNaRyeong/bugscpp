        -:    0:Source:/home/workspace/include/internal/memory-private.h
        -:    1:/**
        -:    2: * memory-private.h
        -:    3: *
        -:    4: * Copyright (c) 2013
        -:    5: *	libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:#ifdef HAVE_CONFIG_H
        -:   12:#  include <config.h>
        -:   13:#endif
        -:   14:
        -:   15:#ifdef HAVE_INTTYPES_H
        -:   16:#  include <inttypes.h>
        -:   17:#elif defined HAVE_STDINT_H
        -:   18:#  include <stdint.h>
        -:   19:#endif
        -:   20:
        -:   21:#ifdef _MSC_VER
        -:   22:#define inline __inline
        -:   23:#endif
        -:   24:
    64810:   25:static inline uint16_t GetUint16( const void *ptr )
        -:   26:{
        -:   27:	uint16_t val;
    64810:   28:	const unsigned char *uptr = ptr;
    64810:   29:	val =
    64810:   30:		( uptr[0] << 0 ) |
    64810:   31:		( uptr[1] << 8 );
    64810:   32:	return val;
        -:   33:}
        -:   34:
     4582:   35:static inline void PutUint16( uint16_t val, void *ptr )
        -:   36:{
     4582:   37:	unsigned char *uptr = (unsigned char *) ptr;
     4582:   38:	uptr[0] = ( val >> 0 ) & 0xff;
     4582:   39:	uptr[1] = ( val >> 8 ) & 0xff;
     4582:   40:}
        -:   41:
        -:   42:static inline uint16_t GetUint16PreservedEndian( const void *ptr )
        -:   43:{
        -:   44:	uint16_t val;
        -:   45:	const unsigned char *uptr = ptr;
        -:   46:#if WORDS_BIGENDIAN
        -:   47:	val =
        -:   48:		( uptr[0] << 8 ) |
        -:   49:		( uptr[1] << 0 );
        -:   50:#else
        -:   51:	val =
        -:   52:		( uptr[0] << 0 ) |
        -:   53:		( uptr[1] << 8 );
        -:   54:#endif
        -:   55:	return val;
        -:   56:}
        -:   57:
        -:   58:static inline void PutUint16PreservedEndian( uint16_t val, void *ptr )
        -:   59:{
        -:   60:	unsigned char *uptr = (unsigned char *) ptr;
        -:   61:#if WORDS_BIGENDIAN
        -:   62:	uptr[0] = ( val >> 8 ) & 0xff;
        -:   63:	uptr[1] = ( val >> 0 ) & 0xff;
        -:   64:#else
        -:   65:	uptr[0] = ( val >> 0 ) & 0xff;
        -:   66:	uptr[1] = ( val >> 8 ) & 0xff;
        -:   67:#endif
        -:   68:}
        -:   69:
        -:   70:/*
        -:   71: * This function is specially used in reading fields of TreeType which are
        -:   72: * compressed into 3 bytes, so it has a special name of 24.
        -:   73: */
    13180:   74:static inline uint32_t GetUint24( const void *ptr )
        -:   75:{
        -:   76:	uint32_t val;
    13180:   77:	const unsigned char *uptr = ptr;
        -:   78:
    13180:   79:	val =
    13180:   80:		( uptr[0] <<  0 ) |
    13180:   81:		( uptr[1] <<  8 ) |
    13180:   82:		( uptr[2] << 16 );
    13180:   83:	return val;
        -:   84:}
        -:   85:
        -:   86:/*
        -:   87: * This function is specially used in writing fields of TreeType which are
        -:   88: * compressed into 3 bytes, so it has a special name of 24.
        -:   89: */
        -:   90:static inline void PutUint24( uint32_t val, void *ptr )
        -:   91:{
        -:   92:	unsigned char *uptr = (unsigned char *) ptr;
        -:   93:
        -:   94:	uptr[0] = ( val >>  0 ) & 0xff;
        -:   95:	uptr[1] = ( val >>  8 ) & 0xff;
        -:   96:	uptr[2] = ( val >> 16 ) & 0xff;
        -:   97:}
        -:   98:
        -:   99:static inline int GetInt32PreservedEndian( const void *ptr )
        -:  100:{
        -:  101:	int val;
        -:  102:	const unsigned char *uptr = ptr;
        -:  103:#if WORDS_BIGENDIAN
        -:  104:	val =
        -:  105:		( uptr[0] << 24 ) |
        -:  106:		( uptr[1] << 16 ) |
        -:  107:		( uptr[2] <<  8 ) |
        -:  108:		( uptr[3] <<  0 );
        -:  109:#else
        -:  110:	val =
        -:  111:		( uptr[0] <<  0 ) |
        -:  112:		( uptr[1] <<  8 ) |
        -:  113:		( uptr[2] << 16 ) |
        -:  114:		( uptr[3] << 24 );
        -:  115:#endif
        -:  116:	return val;
        -:  117:}
        -:  118:
        -:  119:static inline void PutInt32PreservedEndian( int val, void *ptr )
        -:  120:{
        -:  121:	unsigned char *uptr = (unsigned char *) ptr;
        -:  122:#if WORDS_BIGENDIAN
        -:  123:	uptr[0] = ( val >> 24 ) & 0xff;
        -:  124:	uptr[1] = ( val >> 16 ) & 0xff;
        -:  125:	uptr[2] = ( val >>  8 ) & 0xff;
        -:  126:	uptr[3] = ( val >>  0 ) & 0xff;
        -:  127:#else
        -:  128:	uptr[0] = ( val >>  0 ) & 0xff;
        -:  129:	uptr[1] = ( val >>  8 ) & 0xff;
        -:  130:	uptr[2] = ( val >> 16 ) & 0xff;
        -:  131:	uptr[3] = ( val >> 24 ) & 0xff;
        -:  132:#endif
        -:  133:}
