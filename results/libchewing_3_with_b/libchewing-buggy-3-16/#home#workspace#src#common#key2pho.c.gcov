        -:    0:Source:/home/workspace/src/common/key2pho.c
        -:    1:/**
        -:    2: * key2pho.c
        -:    3: *
        -:    4: * Copyright (c) 1999, 2000, 2001
        -:    5: *	Lu-chuan Kung and Kang-pen Chen.
        -:    6: *	All rights reserved.
        -:    7: *
        -:    8: * Copyright (c) 2004-2006, 2008, 2010, 2012
        -:    9: *	libchewing Core Team. See ChangeLog for details.
        -:   10: *
        -:   11: * See the file "COPYING" for information on usage and redistribution
        -:   12: * of this file.
        -:   13: */
        -:   14:
        -:   15:/**
        -:   16: * @file key2pho.c
        -:   17: * @brief map zuins to uint16_t type according to different kb_type
        -:   18: */
        -:   19:
        -:   20:/* This file is encoded in UTF-8 */
        -:   21:
        -:   22:#include <assert.h>
        -:   23:#include <stdio.h>
        -:   24:#include <string.h>
        -:   25:#include "chewing-utf8-util.h"
        -:   26:#include "chewing-private.h"
        -:   27:
        -:   28:/* NOTE:
        -:   29: * The reason why we convert string literal to hex representation is for the
        -:   30: * sake of portability, that avoid some buggy or faulty environment like
        -:   31: * Microsoft VC9 to misinterpret the string.
        -:   32: */
        -:   33:const char *const zhuin_tab[] = {				/* number of bits */
        -:   34:	  "  \xE3\x84\x85\xE3\x84\x86\xE3\x84\x87\xE3\x84\x88\xE3\x84\x89"
        -:   35:	  "\xE3\x84\x8A\xE3\x84\x8B\xE3\x84\x8C\xE3\x84\x8D\xE3\x84\x8E"
        -:   36:	  "\xE3\x84\x8F\xE3\x84\x90\xE3\x84\x91\xE3\x84\x92\xE3\x84\x93"
        -:   37:	  "\xE3\x84\x94\xE3\x84\x95\xE3\x84\x96\xE3\x84\x97\xE3\x84\x98"
        -:   38:	  "\xE3\x84\x99",						/* 5 */
        -:   39:	  	/* ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙ */
        -:   40:	  "  \xE3\x84\xA7\xE3\x84\xA8\xE3\x84\xA9",			/* 2 */
        -:   41:	  	/* ㄧㄨㄩ */
        -:   42:	  "  \xE3\x84\x9A\xE3\x84\x9B\xE3\x84\x9C\xE3\x84\x9D\xE3\x84\x9E"
        -:   43:	  "\xE3\x84\x9F\xE3\x84\xA0\xE3\x84\xA1\xE3\x84\xA2\xE3\x84\xA3"
        -:   44:	  "\xE3\x84\xA4\xE3\x84\xA5\xE3\x84\xA6",			/* 4 */
        -:   45:	  	/* ㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦ */
        -:   46:	  "  \xCB\x99\xCB\x8A\xCB\x87\xCB\x8B"				/* 3 */
        -:   47:		/* ˙ˊˇˋ */
        -:   48:};
        -:   49:
        -:   50:static const int zhuin_tab_num[] = { 22, 4, 14, 5 };
        -:   51:static const int shift[] = { 9, 7, 3, 0 };
        -:   52:static const int sb[] = { 31, 3, 15, 7 };
        -:   53:
        -:   54:static const char * const ph_str =
        -:   55:	"\xE3\x84\x85\xE3\x84\x86\xE3\x84\x87\xE3\x84\x88"
        -:   56:		/* ㄅㄆㄇㄈ */
        -:   57:	"\xE3\x84\x89\xE3\x84\x8A\xE3\x84\x8B\xE3\x84\x8C"
        -:   58:		/* ㄉㄊㄋㄌ */
        -:   59:	"\xE3\x84\x8D\xE3\x84\x8E\xE3\x84\x8F\xE3\x84\x90"
        -:   60:		/* ㄍㄎㄏㄐ */
        -:   61:	"\xE3\x84\x91\xE3\x84\x92\xE3\x84\x93\xE3\x84\x94"
        -:   62:		/* ㄑㄒㄓㄔ */
        -:   63:	"\xE3\x84\x95\xE3\x84\x96\xE3\x84\x97\xE3\x84\x98"
        -:   64:		/* ㄕㄖㄗㄘ */
        -:   65:	"\xE3\x84\x99\xE3\x84\xA7\xE3\x84\xA8\xE3\x84\xA9"
        -:   66:		/* ㄙㄧㄨㄩ */
        -:   67:	"\xE3\x84\x9A\xE3\x84\x9B\xE3\x84\x9C\xE3\x84\x9D"
        -:   68:		/* ㄚㄛㄜㄝ */
        -:   69:	"\xE3\x84\x9E\xE3\x84\x9F\xE3\x84\xA0\xE3\x84\xA1"
        -:   70:		/* ㄞㄟㄠㄡ */
        -:   71:	"\xE3\x84\xA2\xE3\x84\xA3\xE3\x84\xA4\xE3\x84\xA5\xE3\x84\xA6"
        -:   72:		/* ㄢㄣㄤㄥㄦ */
        -:   73:	"\xCB\x99\xCB\x8A\xCB\x87\xCB\x8B" ;
        -:   74:		/* ˙ˊˇˋ */
        -:   75:static const char * const key_str[ MAX_KBTYPE ] = {
        -:   76:	 "1qaz2wsxedcrfv5tgbyhnujm8ik,9ol.0p;/-7634",		/* standard kb */
        -:   77:	 "bpmfdtnlgkhjvcjvcrzasexuyhgeiawomnkllsdfj",		/* hsu */
        -:   78:	 "1234567890-qwertyuiopasdfghjkl;zxcvbn/m,.",		/* IBM */
        -:   79:	 "2wsx3edcrfvtgb6yhnujm8ik,9ol.0p;/-['=1qaz",		/* Gin-yieh */
        -:   80:	 "bpmfdtnlvkhg7c,./j;'sexuaorwiqzy890-=1234",		/* ET  */
        -:   81:	 "bpmfdtnlvkhgvcgycjqwsexuaorwiqzpmntlhdfjk",		/* ET26 */
        -:   82:	 "1'a;2,oq.ejpuk5yixfdbghm8ctw9rnv0lsz[7634",		/* Dvorak */
        -:   83:	 "bpmfdtnlgkhjvcjvcrzasexuyhgeiawomnkllsdfj",		/* Dvorak Hsu */
        -:   84:	 "qqazwwsxedcrfvttgbyhnujmuikbiolmoplnpyerd",		/* DACHEN-CP26 */
        -:   85:	 "1qaz2wsxedcrfv5tgbyhnujm8ik,9ol.0p;/-7634",           /* Hanyu Pinyin */
        -:   86:	 "1qaz2wsxedcrfv5tgbyhnujm8ik,9ol.0p;/-7634",           /* Luoma Pinyin */
        -:   87:	 "1qaz2wsxedcrfv5tgbyhnujm8ik,9ol.0p;/-7634",           /* secondary Bopomofo Pinyin */
        -:   88:
        -:   89:} ;
        -:   90:
        -:   91:/*
        -:   92: * Read one zhuin string,
        -:   93: *
        -:   94: * return the number it means. 0 means error.
        -:   95: */
      121:   96:uint16_t UintFromPhone( const char *zhuin )
        -:   97:{
        -:   98:	const char *iter;
        -:   99:	char *pos;
        -:  100:	char buf[ MAX_UTF8_SIZE + 1 ];
      121:  101:	int len, result = 0;
      121:  102:	int zhuin_index = 0;
        -:  103:
      121:  104:	iter = zhuin;
        -:  105:
      428:  106:	while ( *iter && *iter != 0x20 ) {
      310:  107:		len = ueStrNCpy( buf, iter, 1, STRNCPY_CLOSE );
        -:  108:
      483:  109:		for (; zhuin_index < ZUIN_SIZE; ++zhuin_index ) {
      480:  110:			pos = strstr( zhuin_tab[ zhuin_index ], buf );
      480:  111:			if ( pos ) {
      307:  112:				break;
        -:  113:			}
        -:  114:		}
        -:  115:
      310:  116:		if ( zhuin_index >= ZUIN_SIZE ) {
        3:  117:			return 0;
        -:  118:		}
        -:  119:
      307:  120:		result |= (zhuin_tab_num[ zhuin_index ] - ueStrLen( pos )) << shift[ zhuin_index ];
      307:  121:		++zhuin_index;
      307:  122:		iter += len;
        -:  123:	}
      118:  124:	return result;
        -:  125:}
        -:  126:
      104:  127:int PhoneFromKey( char *pho, const char *inputkey, int kbtype, int searchTimes )
        -:  128:{
      104:  129:	int len = strlen( inputkey ), i, s;
        -:  130:	const char *pTarget;
        -:  131:
      104:  132:	pho[ 0 ] = '\0';
      204:  133:	for ( i = 0; i < len; i++ ) {
      104:  134:		char *findptr = NULL;
        -:  135:		int _index;
        -:  136:
      204:  137:		for (
      104:  138:				s = 0, pTarget = key_str[ kbtype ];
        -:  139:				s < searchTimes;
      100:  140:				s++, pTarget = findptr + 1 ) {
      104:  141:			findptr = strchr( pTarget, inputkey[ i ] );
      104:  142:			if ( ! findptr ) {
        4:  143:				return 0;
        -:  144:			}
        -:  145:		}
      100:  146:		_index = findptr - key_str[ kbtype ];
      100:  147:		ueStrNCpy( ueStrSeek( pho, i ),
        -:  148:		           ueConstStrSeek( ph_str, _index ),
        -:  149:			   1, 0);
        -:  150:	}
      100:  151:	pho = ueStrSeek( pho, len );
      100:  152:	pho[0] = '\0';
      100:  153:	return 1;
        -:  154:}
        -:  155:
        6:  156:int PhoneFromUint( char *phone, size_t phone_len, uint16_t phone_num )
        -:  157:{
        -:  158:	int i;
        -:  159:	int index;
        -:  160:	const char *pos;
        -:  161:	char tmp[ MAX_UTF8_SIZE + 1 ];
        6:  162:	char buffer[ MAX_UTF8_SIZE * ZUIN_SIZE + 1 ] = { 0 };
        -:  163:
       30:  164:	for ( i = 0; i < ZUIN_SIZE; ++i ) {
        -:  165:		// The first two characters in zhuin_tab are space, so we need
        -:  166:		// to add 1 here.
       24:  167:		index = ((phone_num >> shift[ i ]) & sb[ i ]) + 1;
       24:  168:		if ( index >= 2 ) {
       15:  169:			pos = ueConstStrSeek( zhuin_tab[ i ], index );
       15:  170:			ueStrNCpy( tmp, pos, 1, 1 );
       15:  171:			strcat( buffer, tmp );
        -:  172:		}
        -:  173:	}
        6:  174:	strncpy( phone, buffer, phone_len );
        6:  175:	phone[ phone_len - 1 ] = 0;
        6:  176:	return 0;
        -:  177:}
        -:  178:
      104:  179:int PhoneInxFromKey( int key, int type, int kbtype, int searchTimes )
        -:  180:{
        -:  181:	char keyStr[ 2 ], rtStr[ 10 ], *p;
        -:  182:
      104:  183:	keyStr[ 0 ] = key;
      104:  184:	keyStr[ 1 ] = '\0';
      104:  185:	if ( ! PhoneFromKey( rtStr, keyStr, kbtype, searchTimes ) )
        4:  186:		return 0;
      100:  187:	p = strstr( zhuin_tab[ type ], rtStr );
      100:  188:	if ( ! p )
       46:  189:		return 0;
       54:  190:	return zhuin_tab_num[type] - ueStrLen(p);
        -:  191:}
        -:  192:
       16:  193:uint16_t UintFromPhoneInx( const int ph_inx[] )
        -:  194:{
        -:  195:	int i;
       16:  196:	uint16_t result = 0;
        -:  197:
       80:  198:	for ( i = 0; i < ZUIN_SIZE; i++ )
       64:  199:		result |= ph_inx[ i ] << shift[ i ];
       16:  200:	return result;
        -:  201:}
        -:  202:
        6:  203:static size_t GetPhoneLen( const uint16_t *phoneSeq )
        -:  204:{
        6:  205:	size_t len = 0;
       6*:  206:	assert( phoneSeq );
        -:  207:
       18:  208:	while ( phoneSeq[len] )
       12:  209:		++len;
        6:  210:	return len;
        -:  211:}
        -:  212:
       75:  213:static size_t GetBopomofoCount( const char * bopomofo_buf )
        -:  214:{
       75:  215:	size_t count = 0;
      75*:  216:	assert( bopomofo_buf );
        -:  217:
      179:  218:	while( (bopomofo_buf = strpbrk( bopomofo_buf, " ")) != NULL ) {
      104:  219:		++count;
      104:  220:		bopomofo_buf += 1;
        -:  221:	}
        -:  222:
       75:  223:	return count;
        -:  224:}
        -:  225:
        6:  226:size_t BopomofoFromUintArray( char * const bopomofo_buf, const size_t bopomofo_len, const uint16_t *phoneSeq )
        -:  227:{
        -:  228:	size_t i;
        -:  229:	size_t len;
        -:  230:	size_t buf_len;
        6:  231:	size_t shift = 0;
        -:  232:
       6*:  233:	assert( phoneSeq );
        -:  234:
        6:  235:	len = GetPhoneLen( phoneSeq );
        6:  236:	buf_len = len * ( MAX_UTF8_SIZE * ZUIN_SIZE + 1 );
        -:  237:
        6:  238:	if ( bopomofo_buf && bopomofo_len >= buf_len ) {
        9:  239:		for ( i = 0; i < len; ++i ) {
        6:  240:			PhoneFromUint( bopomofo_buf + shift, bopomofo_len - shift, phoneSeq[i] );
        6:  241:			strcat( bopomofo_buf + shift, " " );
        6:  242:			shift += strlen( bopomofo_buf + shift );
        -:  243:		}
        3:  244:		if ( shift )
        3:  245:			bopomofo_buf[ shift - 1 ] = 0;
        -:  246:	}
        6:  247:	return buf_len;
        -:  248:}
        -:  249:
       75:  250:ssize_t UintArrayFromBopomofo( uint16_t *phone_seq, const size_t phone_len, const char * bopomofo_buf )
        -:  251:{
        -:  252:	ssize_t i;
        -:  253:	ssize_t len;
        -:  254:
      75*:  255:	assert( bopomofo_buf );
        -:  256:
       75:  257:	len = GetBopomofoCount( bopomofo_buf ) + 1;
       75:  258:	if ( !phone_seq )
       38:  259:		return len;
        -:  260:
       37:  261:	if ( phone_len <= len )
    #####:  262:		return -1;
        -:  263:
      123:  264:	for ( i = 0; i < len ; ++i ) {
       89:  265:		phone_seq[ i ] = UintFromPhone( bopomofo_buf );
       89:  266:		if ( phone_seq[ i ] == 0 )
        3:  267:			return -1;
       86:  268:		bopomofo_buf = strpbrk( bopomofo_buf, " " ) + 1;
        -:  269:	}
       34:  270:	phone_seq[ len ] = 0;
        -:  271:
       34:  272:	return len;
        -:  273:}
