        -:    0:Source:/home/workspace/example/calc2.cc
        -:    0:Programs:4
        -:    1://
        -:    2://  calc2.cc
        -:    3://
        -:    4://  Copyright (c) 2015 Yuji Hirose. All rights reserved.
        -:    5://  MIT License
        -:    6://
        -:    7:
        -:    8:#include <peglib.h>
        -:    9:#include <iostream>
        -:   10:#include <cstdlib>
        -:   11:
        -:   12:using namespace peg;
        -:   13:
        -:   14://
        -:   15://  PEG syntax:
        -:   16://
        -:   17://      EXPRESSION       <-  TERM (TERM_OPERATOR TERM)*
        -:   18://      TERM             <-  FACTOR (FACTOR_OPERATOR FACTOR)*
        -:   19://      FACTOR           <-  NUMBER / '(' EXPRESSION ')'
        -:   20://      TERM_OPERATOR    <-  [-+]
        -:   21://      FACTOR_OPERATOR  <-  [/*]
        -:   22://      NUMBER           <-  [0-9]+
        -:   23://
    #####:   24:int main(int argc, const char** argv)
        -:   25:{
    #####:   26:    if (argc < 2 || std::string("--help") == argv[1]) {
    #####:   27:        std::cout << "usage: calc [formula]" << std::endl;
    #####:   28:        return 1;
        -:   29:    }
        -:   30:
    #####:   31:    auto reduce = [](const SemanticValues& sv) -> long {
    #####:   32:        auto result = any_cast<long>(sv[0]);
    #####:   33:        for (auto i = 1u; i < sv.size(); i += 2) {
    #####:   34:            auto num = any_cast<long>(sv[i + 1]);
    #####:   35:            auto ope = any_cast<char>(sv[i]);
    #####:   36:            switch (ope) {
    #####:   37:                case '+': result += num; break;
    #####:   38:                case '-': result -= num; break;
    #####:   39:                case '*': result *= num; break;
    #####:   40:                case '/': result /= num; break;
        -:   41:            }
        -:   42:        }
    #####:   43:        return result;
        -:   44:    };
        -:   45:
    #####:   46:    Definition EXPRESSION, TERM, FACTOR, TERM_OPERATOR, FACTOR_OPERATOR, NUMBER;
        -:   47:
    #####:   48:    EXPRESSION      <= seq(TERM, zom(seq(TERM_OPERATOR, TERM))),         reduce;
    #####:   49:    TERM            <= seq(FACTOR, zom(seq(FACTOR_OPERATOR, FACTOR))),   reduce;
    #####:   50:    FACTOR          <= cho(NUMBER, seq(chr('('), EXPRESSION, chr(')')));
    #####:   51:    TERM_OPERATOR   <= cls("+-"),                                        [](const SemanticValues& sv) { return static_cast<char>(*sv.c_str()); };
    #####:   52:    FACTOR_OPERATOR <= cls("*/"),                                        [](const SemanticValues& sv) { return static_cast<char>(*sv.c_str()); };
    #####:   53:    NUMBER          <= oom(cls("0-9")),                                  [](const SemanticValues& sv) { return atol(sv.c_str()); };
        -:   54:
    #####:   55:    auto expr = argv[1];
    #####:   56:    long val = 0;
    #####:   57:    if (EXPRESSION.parse_and_get_value(expr, val).ret) {
    #####:   58:        std::cout << expr << " = " << val << std::endl;
    #####:   59:        return 0;
        -:   60:    }
        -:   61:
    #####:   62:    return -1;
    #####:   63:}
        -:   64:
        -:   65:// vim: et ts=4 sw=4 cin cino={1s ff=unix
