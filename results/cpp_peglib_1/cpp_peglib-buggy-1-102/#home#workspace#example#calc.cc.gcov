        -:    0:Source:/home/workspace/example/calc.cc
        -:    0:Programs:4
        -:    1:#include <peglib.h>
        -:    2:#include <assert.h>
        -:    3:#include <iostream>
        -:    4:
        -:    5:using namespace peg;
        -:    6:using namespace std;
        -:    7:
    #####:    8:int main(void) {
        -:    9:    // (2) Make a parser
        -:   10:    parser parser(R"(
        -:   11:        # Grammar for Calculator...
        -:   12:        Additive    <- Multitive '+' Additive / Multitive
        -:   13:        Multitive   <- Primary '*' Multitive / Primary
        -:   14:        Primary     <- '(' Additive ')' / Number
        -:   15:        Number      <- < [0-9]+ >
        -:   16:        %whitespace <- [ \t]*
    #####:   17:    )");
        -:   18:
    #####:   19:    assert(static_cast<bool>(parser) == true);
        -:   20:
        -:   21:    // (3) Setup actions
    #####:   22:    parser["Additive"] = [](const SemanticValues& sv) {
    #####:   23:        switch (sv.choice()) {
    #####:   24:        case 0:  // "Multitive '+' Additive"
    #####:   25:            return any_cast<int>(sv[0]) + any_cast<int>(sv[1]);
    #####:   26:        default: // "Multitive"
    #####:   27:            return any_cast<int>(sv[0]);
        -:   28:        }
        -:   29:    };
        -:   30:
    #####:   31:    parser["Multitive"] = [](const SemanticValues& sv) {
    #####:   32:        switch (sv.choice()) {
    #####:   33:        case 0:  // "Primary '*' Multitive"
    #####:   34:            return any_cast<int>(sv[0]) * any_cast<int>(sv[1]);
    #####:   35:        default: // "Primary"
    #####:   36:            return any_cast<int>(sv[0]);
        -:   37:        }
        -:   38:    };
        -:   39:
    #####:   40:    parser["Number"] = [](const SemanticValues& sv) {
    #####:   41:        return stoi(sv.token(), nullptr, 10);
    #####:   42:    };
        -:   43:
        -:   44:    // (4) Parse
    #####:   45:    parser.enable_packrat_parsing(); // Enable packrat parsing.
        -:   46:
        -:   47:    int val;
    #####:   48:    parser.parse(" (1 + 2) * 3 ", val);
        -:   49:
    #####:   50:    assert(val == 9);
    #####:   51:}
