        -:    0:Source:/home/workspace/src/userphrase.c
        -:    1:/**
        -:    2: * userphrase.c
        -:    3: *
        -:    4: * Copyright (c) 2014
        -:    5: *	libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:#include "userphrase-private.h"
        -:   12:
        -:   13:#include <assert.h>
        -:   14:
        -:   15:#include "chewing-private.h"
        -:   16:#include "chewing-sql.h"
        -:   17:#include "private.h"
        -:   18:
        -:   19:#if defined(_WIN32) || defined(_WIN64) || defined(_WIN32_WCE)
        -:   20:
        -:   21:#    include <Shlobj.h>
        -:   22:#    define USERPHRASE_DIR	"ChewingTextService"
        -:   23:
        -:   24:char *GetDefaultUserPhrasePath(ChewingData *pgdata)
        -:   25:{
        -:   26:    wchar_t *tmp;
        -:   27:    char *path;
        -:   28:    int path_len;
        -:   29:    int len;
        -:   30:
        -:   31:    assert(pgdata);
        -:   32:
        -:   33:    len = GetEnvironmentVariableW(L"CHEWING_USER_PATH", NULL, 0);
        -:   34:    if (len) {
        -:   35:        tmp = calloc(sizeof(*tmp), len);
        -:   36:        if (!tmp) {
        -:   37:            LOG_ERROR("calloc returns %#p", tmp);
        -:   38:            exit(-1);
        -:   39:        }
        -:   40:
        -:   41:        GetEnvironmentVariableW(L"CHEWING_USER_PATH", tmp, len);
        -:   42:
        -:   43:        len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, tmp, -1, NULL, 0, NULL, NULL);
        -:   44:        path_len = len + 1 + strlen(DB_NAME) + 1;
        -:   45:        path = calloc(sizeof(*path), path_len);
        -:   46:        if (!path) {
        -:   47:            free(tmp);
        -:   48:            LOG_ERROR("calloc returns %#p", path);
        -:   49:            exit(-1);
        -:   50:        }
        -:   51:        WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, tmp, -1, path, len, NULL, NULL);
        -:   52:
        -:   53:        strcpy(path + len - 1, "/" DB_NAME);
        -:   54:        LOG_INFO("userphrase is at %s", path);
        -:   55:
        -:   56:        free(tmp);
        -:   57:        return path;
        -:   58:    }
        -:   59:
        -:   60:    len = GetEnvironmentVariableW(L"USERPROFILE", NULL, 0);
        -:   61:    if (len) {
        -:   62:        tmp = calloc(sizeof(*tmp), len);
        -:   63:        if (!tmp) {
        -:   64:            LOG_ERROR("calloc returns %#p", tmp);
        -:   65:            exit(-1);
        -:   66:        }
        -:   67:
        -:   68:        GetEnvironmentVariableW(L"USERPROFILE", tmp, len);
        -:   69:
        -:   70:        len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, tmp, -1, NULL, 0, NULL, NULL);
        -:   71:        path = calloc(sizeof(*path), len + 1 + strlen(USERPHRASE_DIR) + 1 + strlen(DB_NAME) + 1);
        -:   72:        if (!path) {
        -:   73:            free(tmp);
        -:   74:            LOG_ERROR("calloc returns %#p", path);
        -:   75:            exit(-1);
        -:   76:        }
        -:   77:        WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, tmp, -1, path, len, NULL, NULL);
        -:   78:
        -:   79:        strcpy(path + len - 1, "\\" USERPHRASE_DIR "\\" DB_NAME);
        -:   80:        LOG_INFO("userphrase is at %s", path);
        -:   81:
        -:   82:        free(tmp);
        -:   83:        return path;
        -:   84:    }
        -:   85:
        -:   86:    return NULL;
        -:   87:}
        -:   88:
        -:   89:#else
        -:   90:
        -:   91:#    ifdef __MaxOSX__
        -:   92:/* FIXME: Shall this path pre user? */
        -:   93:#        define USERPHRASE_DIR	"/Library/ChewingOSX"
        -:   94:#    else
        -:   95:#        define USERPHRASE_DIR	".chewing"
        -:   96:#    endif
        -:   97:
        -:   98:#    include <stdio.h>
        -:   99:#    include <stdlib.h>
        -:  100:#    include <string.h>
        -:  101:#    include <unistd.h>
        -:  102:
       32:  103:char *GetDefaultUserPhrasePath(ChewingData *pgdata)
        -:  104:{
        -:  105:    char *tmp;
        -:  106:    char *path;
        -:  107:    int len;
        -:  108:    int ret;
        -:  109:
      32*:  110:    assert(pgdata);
        -:  111:
       32:  112:    tmp = getenv("CHEWING_USER_PATH");
       32:  113:    if (tmp && access(tmp, W_OK) == 0) {
       32:  114:        ret = asprintf(&path, "%s/%s", tmp, DB_NAME);
       32:  115:        if (ret == -1) {
    #####:  116:            LOG_ERROR("asprintf returns %d", ret);
    #####:  117:            exit(-1);
        -:  118:        }
       32:  119:        return path;
        -:  120:    }
        -:  121:
    #####:  122:    tmp = getenv("HOME");
    #####:  123:    if (!tmp) {
    #####:  124:        tmp = PLAT_TMPDIR;
        -:  125:    }
        -:  126:
    #####:  127:    len = snprintf(NULL, 0, "%s/%s/%s", tmp, USERPHRASE_DIR, DB_NAME);
    #####:  128:    ++len;
    #####:  129:    path = malloc(len);
    #####:  130:    if (!path) {
    #####:  131:        LOG_ERROR("malloc returns %#p", path);
    #####:  132:        exit(-1);
        -:  133:    }
        -:  134:
    #####:  135:    snprintf(path, len, "%s/%s", tmp, USERPHRASE_DIR);
    #####:  136:    PLAT_MKDIR(path);
    #####:  137:    snprintf(path, len, "%s/%s/%s", tmp, USERPHRASE_DIR, DB_NAME);
        -:  138:
    #####:  139:    return path;
        -:  140:}
        -:  141:
        -:  142:#endif
