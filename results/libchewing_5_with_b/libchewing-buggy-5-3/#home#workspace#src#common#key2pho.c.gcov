        -:    0:Source:/home/workspace/src/common/key2pho.c
        -:    1:/**
        -:    2: * key2pho.c
        -:    3: *
        -:    4: * Copyright (c) 1999, 2000, 2001
        -:    5: *	Lu-chuan Kung and Kang-pen Chen.
        -:    6: *	All rights reserved.
        -:    7: *
        -:    8: * Copyright (c) 2004-2006, 2008, 2010, 2012-2014
        -:    9: *	libchewing Core Team. See ChangeLog for details.
        -:   10: *
        -:   11: * See the file "COPYING" for information on usage and redistribution
        -:   12: * of this file.
        -:   13: */
        -:   14:
        -:   15:/**
        -:   16: * @file key2pho.c
        -:   17: * @brief map bopomofos to uint16_t type according to different kb_type
        -:   18: */
        -:   19:
        -:   20:/* This file is encoded in UTF-8 */
        -:   21:#include "key2pho-private.h"
        -:   22:
        -:   23:#include <assert.h>
        -:   24:#include <stdio.h>
        -:   25:#include <string.h>
        -:   26:#include "chewing-utf8-util.h"
        -:   27:#include "chewing-private.h"
        -:   28:
        -:   29:/* NOTE:
        -:   30: * The reason why we convert string literal to hex representation is for the
        -:   31: * sake of portability, that avoid some buggy or faulty environment like
        -:   32: * Microsoft VC9 to misinterpret the string.
        -:   33: */
        -:   34:const char *const zhuin_tab[] = {       /* number of bits */
        -:   35:    "  \xE3\x84\x85\xE3\x84\x86\xE3\x84\x87\xE3\x84\x88\xE3\x84\x89" "\xE3\x84\x8A\xE3\x84\x8B\xE3\x84\x8C\xE3\x84\x8D\xE3\x84\x8E" "\xE3\x84\x8F\xE3\x84\x90\xE3\x84\x91\xE3\x84\x92\xE3\x84\x93" "\xE3\x84\x94\xE3\x84\x95\xE3\x84\x96\xE3\x84\x97\xE3\x84\x98" "\xE3\x84\x99",       /* 5 */
        -:   36:    /* ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙ */
        -:   37:    "  \xE3\x84\xA7\xE3\x84\xA8\xE3\x84\xA9",   /* 2 */
        -:   38:    /* ㄧㄨㄩ */
        -:   39:    "  \xE3\x84\x9A\xE3\x84\x9B\xE3\x84\x9C\xE3\x84\x9D\xE3\x84\x9E" "\xE3\x84\x9F\xE3\x84\xA0\xE3\x84\xA1\xE3\x84\xA2\xE3\x84\xA3" "\xE3\x84\xA4\xE3\x84\xA5\xE3\x84\xA6",     /* 4 */
        -:   40:    /* ㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦ */
        -:   41:    "  \xCB\x99\xCB\x8A\xCB\x87\xCB\x8B"        /* 3 */
        -:   42:        /* ˙ˊˇˋ */
        -:   43:};
        -:   44:
        -:   45:static const int zhuin_tab_num[] = { 22, 4, 14, 5 };
        -:   46:static const int shift[] = { 9, 7, 3, 0 };
        -:   47:static const int sb[] = { 31, 3, 15, 7 };
        -:   48:
        -:   49:static const char *const ph_str = "\xE3\x84\x85\xE3\x84\x86\xE3\x84\x87\xE3\x84\x88"
        -:   50:    /* ㄅㄆㄇㄈ */
        -:   51:    "\xE3\x84\x89\xE3\x84\x8A\xE3\x84\x8B\xE3\x84\x8C"
        -:   52:    /* ㄉㄊㄋㄌ */
        -:   53:    "\xE3\x84\x8D\xE3\x84\x8E\xE3\x84\x8F\xE3\x84\x90"
        -:   54:    /* ㄍㄎㄏㄐ */
        -:   55:    "\xE3\x84\x91\xE3\x84\x92\xE3\x84\x93\xE3\x84\x94"
        -:   56:    /* ㄑㄒㄓㄔ */
        -:   57:    "\xE3\x84\x95\xE3\x84\x96\xE3\x84\x97\xE3\x84\x98"
        -:   58:    /* ㄕㄖㄗㄘ */
        -:   59:    "\xE3\x84\x99\xE3\x84\xA7\xE3\x84\xA8\xE3\x84\xA9"
        -:   60:    /* ㄙㄧㄨㄩ */
        -:   61:    "\xE3\x84\x9A\xE3\x84\x9B\xE3\x84\x9C\xE3\x84\x9D"
        -:   62:    /* ㄚㄛㄜㄝ */
        -:   63:    "\xE3\x84\x9E\xE3\x84\x9F\xE3\x84\xA0\xE3\x84\xA1"
        -:   64:    /* ㄞㄟㄠㄡ */
        -:   65:    "\xE3\x84\xA2\xE3\x84\xA3\xE3\x84\xA4\xE3\x84\xA5\xE3\x84\xA6"
        -:   66:    /* ㄢㄣㄤㄥㄦ */
        -:   67:    "\xCB\x99\xCB\x8A\xCB\x87\xCB\x8B";
        -:   68:
        -:   69:                /* ˙ˊˇˋ */
        -:   70:static const char *const key_str[MAX_KBTYPE] = {
        -:   71:    "1qaz2wsxedcrfv5tgbyhnujm8ik,9ol.0p;/-7634",        /* standard kb */
        -:   72:    "bpmfdtnlgkhjvcjvcrzasexuyhgeiawomnkllsdfj",        /* hsu */
        -:   73:    "1234567890-qwertyuiopasdfghjkl;zxcvbn/m,.",        /* IBM */
        -:   74:    "2wsx3edcrfvtgb6yhnujm8ik,9ol.0p;/-['=1qaz",        /* Gin-yieh */
        -:   75:    "bpmfdtnlvkhg7c,./j;'sexuaorwiqzy890-=1234",        /* ET  */
        -:   76:    "bpmfdtnlvkhgvcgycjqwsexuaorwiqzpmntlhdfjk",        /* ET26 */
        -:   77:    "1'a;2,oq.ejpuk5yixfdbghm8ctw9rnv0lsz[7634",        /* Dvorak */
        -:   78:    "bpmfdtnlgkhjvcjvcrzasexuyhgeiawomnkllsdfj",        /* Dvorak Hsu */
        -:   79:    "qqazwwsxedcrfvttgbyhnujmuikbiolmoplnpyerd",        /* DACHEN-CP26 */
        -:   80:    "1qaz2wsxedcrfv5tgbyhnujm8ik,9ol.0p;/-7634",        /* Hanyu Pinyin */
        -:   81:    "1qaz2wsxedcrfv5tgbyhnujm8ik,9ol.0p;/-7634",        /* Luoma Pinyin */
        -:   82:    "1qaz2wsxedcrfv5tgbyhnujm8ik,9ol.0p;/-7634",        /* secondary Bopomofo Pinyin */
        -:   83:
        -:   84:};
        -:   85:
        -:   86:/*
        -:   87: * Read one zhuin string,
        -:   88: *
        -:   89: * return the number it means. 0 means error.
        -:   90: */
    #####:   91:uint16_t UintFromPhone(const char *zhuin)
        -:   92:{
        -:   93:    const char *iter;
        -:   94:    char *pos;
        -:   95:    char buf[MAX_UTF8_SIZE + 1];
    #####:   96:    int len, result = 0;
    #####:   97:    int zhuin_index = 0;
        -:   98:
    #####:   99:    iter = zhuin;
        -:  100:
    #####:  101:    while (*iter && *iter != 0x20) {
    #####:  102:        len = ueStrNCpy(buf, iter, 1, STRNCPY_CLOSE);
        -:  103:
    #####:  104:        for (; zhuin_index < BOPOMOFO_SIZE; ++zhuin_index) {
    #####:  105:            pos = strstr(zhuin_tab[zhuin_index], buf);
    #####:  106:            if (pos) {
    #####:  107:                break;
        -:  108:            }
        -:  109:        }
        -:  110:
    #####:  111:        if (zhuin_index >= BOPOMOFO_SIZE) {
    #####:  112:            return 0;
        -:  113:        }
        -:  114:
    #####:  115:        result |= (zhuin_tab_num[zhuin_index] - ueStrLen(pos)) << shift[zhuin_index];
    #####:  116:        ++zhuin_index;
    #####:  117:        iter += len;
        -:  118:    }
    #####:  119:    return result;
        -:  120:}
        -:  121:
       24:  122:int PhoneFromKey(char *pho, const char *inputkey, int kbtype, int searchTimes)
        -:  123:{
       24:  124:    int len = strlen(inputkey), i, s;
        -:  125:    const char *pTarget;
        -:  126:
       24:  127:    pho[0] = '\0';
       48:  128:    for (i = 0; i < len; i++) {
       24:  129:        char *findptr = NULL;
        -:  130:        int _index;
        -:  131:
       48:  132:        for (s = 0, pTarget = key_str[kbtype]; s < searchTimes; s++, pTarget = findptr + 1) {
       24:  133:            findptr = strchr(pTarget, inputkey[i]);
       24:  134:            if (!findptr) {
    #####:  135:                return 0;
        -:  136:            }
        -:  137:        }
       24:  138:        _index = findptr - key_str[kbtype];
       24:  139:        ueStrNCpy(ueStrSeek(pho, i), ueConstStrSeek(ph_str, _index), 1, 0);
        -:  140:    }
       24:  141:    pho = ueStrSeek(pho, len);
       24:  142:    pho[0] = '\0';
       24:  143:    return 1;
        -:  144:}
        -:  145:
    #####:  146:int PhoneFromUint(char *phone, size_t phone_len, uint16_t phone_num)
        -:  147:{
        -:  148:    int i;
        -:  149:    int index;
        -:  150:    const char *pos;
        -:  151:    char tmp[MAX_UTF8_SIZE + 1];
    #####:  152:    char buffer[MAX_UTF8_SIZE * BOPOMOFO_SIZE + 1] = { 0 };
        -:  153:
    #####:  154:    for (i = 0; i < BOPOMOFO_SIZE; ++i) {
        -:  155:        // The first two characters in zhuin_tab are space, so we need
        -:  156:        // to add 1 here.
    #####:  157:        index = ((phone_num >> shift[i]) & sb[i]) + 1;
    #####:  158:        if (index >= 2) {
    #####:  159:            pos = ueConstStrSeek(zhuin_tab[i], index);
    #####:  160:            ueStrNCpy(tmp, pos, 1, 1);
    #####:  161:            strcat(buffer, tmp);
        -:  162:        }
        -:  163:    }
    #####:  164:    strncpy(phone, buffer, phone_len);
    #####:  165:    phone[phone_len - 1] = 0;
    #####:  166:    return 0;
        -:  167:}
        -:  168:
       24:  169:int PhoneInxFromKey(int key, int type, int kbtype, int searchTimes)
        -:  170:{
        -:  171:    char keyStr[2], rtStr[10], *p;
        -:  172:
       24:  173:    keyStr[0] = key;
       24:  174:    keyStr[1] = '\0';
       24:  175:    if (!PhoneFromKey(rtStr, keyStr, kbtype, searchTimes))
    #####:  176:        return 0;
       24:  177:    p = strstr(zhuin_tab[type], rtStr);
       24:  178:    if (!p)
       10:  179:        return 0;
       14:  180:    return zhuin_tab_num[type] - ueStrLen(p);
        -:  181:}
        -:  182:
        4:  183:uint16_t UintFromPhoneInx(const int ph_inx[])
        -:  184:{
        -:  185:    int i;
        4:  186:    uint16_t result = 0;
        -:  187:
       20:  188:    for (i = 0; i < BOPOMOFO_SIZE; i++)
       16:  189:        result |= ph_inx[i] << shift[i];
        4:  190:    return result;
        -:  191:}
        -:  192:
       24:  193:size_t GetPhoneLen(const uint16_t *phoneSeq)
        -:  194:{
       24:  195:    size_t len = 0;
        -:  196:
      24*:  197:    assert(phoneSeq);
        -:  198:
       56:  199:    while (phoneSeq[len])
       32:  200:        ++len;
       24:  201:    return len;
        -:  202:}
        -:  203:
    #####:  204:static size_t GetBopomofoCount(const char *bopomofo_buf)
        -:  205:{
    #####:  206:    size_t count = 0;
        -:  207:
    #####:  208:    assert(bopomofo_buf);
        -:  209:
    #####:  210:    while ((bopomofo_buf = strpbrk(bopomofo_buf, " ")) != NULL) {
    #####:  211:        ++count;
    #####:  212:        bopomofo_buf += 1;
        -:  213:    }
        -:  214:
    #####:  215:    return count;
        -:  216:}
        -:  217:
    #####:  218:size_t BopomofoFromUintArray(char *const bopomofo_buf, const size_t bopomofo_len, const uint16_t *phoneSeq)
        -:  219:{
        -:  220:    size_t i;
        -:  221:    size_t len;
        -:  222:    size_t buf_len;
    #####:  223:    size_t shift = 0;
        -:  224:
    #####:  225:    assert(phoneSeq);
        -:  226:
    #####:  227:    len = GetPhoneLen(phoneSeq);
    #####:  228:    buf_len = GetBopomofoBufLen(len);
        -:  229:
    #####:  230:    if (bopomofo_buf && bopomofo_len >= buf_len) {
    #####:  231:        for (i = 0; i < len; ++i) {
    #####:  232:            PhoneFromUint(bopomofo_buf + shift, bopomofo_len - shift, phoneSeq[i]);
    #####:  233:            strcat(bopomofo_buf + shift, " ");
    #####:  234:            shift += strlen(bopomofo_buf + shift);
        -:  235:        }
    #####:  236:        if (shift)
    #####:  237:            bopomofo_buf[shift - 1] = 0;
        -:  238:    }
    #####:  239:    return buf_len;
        -:  240:}
        -:  241:
    #####:  242:ssize_t UintArrayFromBopomofo(uint16_t *phone_seq, const size_t phone_len, const char *bopomofo_buf)
        -:  243:{
        -:  244:    ssize_t i;
        -:  245:    ssize_t len;
        -:  246:
    #####:  247:    assert(bopomofo_buf);
        -:  248:
    #####:  249:    len = GetBopomofoCount(bopomofo_buf) + 1;
    #####:  250:    if (!phone_seq)
    #####:  251:        return len;
        -:  252:
    #####:  253:    if (phone_len <= len)
    #####:  254:        return -1;
        -:  255:
    #####:  256:    for (i = 0; i < len; ++i) {
    #####:  257:        phone_seq[i] = UintFromPhone(bopomofo_buf);
    #####:  258:        if (phone_seq[i] == 0)
    #####:  259:            return -1;
    #####:  260:        bopomofo_buf = strpbrk(bopomofo_buf, " ") + 1;
        -:  261:    }
    #####:  262:    phone_seq[len] = 0;
        -:  263:
    #####:  264:    return len;
        -:  265:}
        -:  266:
    #####:  267:size_t GetBopomofoBufLen(size_t len)
        -:  268:{
    #####:  269:    return (MAX_UTF8_SIZE * BOPOMOFO_SIZE + 1) * len;
        -:  270:}
