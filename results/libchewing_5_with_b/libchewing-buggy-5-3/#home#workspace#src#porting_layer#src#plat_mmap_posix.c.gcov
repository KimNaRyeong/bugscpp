        -:    0:Source:/home/workspace/src/porting_layer/src/plat_mmap_posix.c
        -:    1:/**
        -:    2: * plat_mmap_posix.c
        -:    3: *
        -:    4: * Copyright (c) 2005, 2006, 2008, 2010, 2012-2014
        -:    5: *      libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:#ifdef HAVE_CONFIG_H
        -:   12:#    include <config.h>
        -:   13:#endif
        -:   14:
        -:   15:#ifdef UNDER_POSIX
        -:   16:
        -:   17:#    include <sys/types.h>
        -:   18:#    include <sys/mman.h>
        -:   19:#    include <sys/stat.h>
        -:   20:#    include <unistd.h>
        -:   21:#    include <fcntl.h>
        -:   22:#    include "plat_mmap.h"
        -:   23:
        -:   24:/* set the mmap handle an invalid value */
        4:   25:void plat_mmap_set_invalid(plat_mmap *handle)
        -:   26:{
        -:   27:    /* check error(s) */
        4:   28:    if (!handle)
    #####:   29:        return;
        -:   30:
        4:   31:    handle->fd = -1;
        4:   32:    handle->address = NULL;
        4:   33:    handle->fAccessAttr = 0;
        -:   34:}
        -:   35:
        -:   36:/* verify if the mmap handle is valid */
    #####:   37:int plat_mmap_is_valid(plat_mmap *handle)
        -:   38:{
        -:   39:    /* check error(s) */
    #####:   40:    if (!handle)
    #####:   41:        return 0;
        -:   42:
    #####:   43:    return (handle->fd != -1);
        -:   44:}
        -:   45:
        -:   46:/* map a file into system memory, return size of the mapped file */
        4:   47:size_t plat_mmap_create(plat_mmap *handle, const char *file, int fileAccessAttr)
        -:   48:{
        -:   49:    size_t sizet;
        -:   50:
        -:   51:    /* check error(s) */
        4:   52:    if (!handle)
    #####:   53:        return 0;
        -:   54:
        4:   55:    handle->address = NULL;
        4:   56:    handle->sizet = 0;
        -:   57:
        4:   58:    if (FLAG_ATTRIBUTE_READ & fileAccessAttr)
        4:   59:        handle->fd = open(file, O_RDONLY);
        -:   60:    else
    #####:   61:        handle->fd = open(file, O_RDWR);
        -:   62:
        4:   63:    if (handle->fd == -1)
    #####:   64:        return 0;
        -:   65:
        4:   66:    sizet = lseek(handle->fd, 0, SEEK_END);
        4:   67:    lseek(handle->fd, 0, SEEK_SET);
        -:   68:
        4:   69:    return sizet;
        -:   70:}
        -:   71:
        -:   72:/* obtain a view of the mapped file, return the adjusted offset & size */
        4:   73:void *plat_mmap_set_view(plat_mmap *handle, size_t * offset, size_t * sizet)
        -:   74:{
        4:   75:    size_t pagesize = getpagesize();
        -:   76:    size_t edge;
        -:   77:
        -:   78:    /* check error(s) */
        4:   79:    if (!handle)
    #####:   80:        return NULL;
        -:   81:
        4:   82:    if (handle->address)
    #####:   83:        munmap(handle->address, handle->sizet);
        -:   84:
        4:   85:    edge = (*sizet) + (*offset);
        4:   86:    (*offset) = ((size_t) ((*offset) / pagesize)) * pagesize;
        4:   87:    handle->sizet = (*sizet) = edge - (*offset);
        4:   88:    handle->address = mmap(0, *sizet, PROT_READ, MAP_SHARED, handle->fd, *offset);
        -:   89:
        4:   90:    return handle->address;
        -:   91:}
        -:   92:
        -:   93:/* close the mmap */
        4:   94:void plat_mmap_close(plat_mmap *handle)
        -:   95:{
        -:   96:    /* check error(s) */
        4:   97:    if (!handle)
    #####:   98:        return;
        -:   99:
        4:  100:    if (handle->address) {
        4:  101:        munmap(handle->address, handle->sizet);
        4:  102:        handle->address = NULL;
        -:  103:    }
        -:  104:
        4:  105:    if (handle->fd != -1) {
        4:  106:        close(handle->fd);
        4:  107:        handle->fd = -1;
        -:  108:    }
        -:  109:}
        -:  110:
        -:  111:/* return page size */
    #####:  112:unsigned int plat_mmap_get_page_size()
        -:  113:{
    #####:  114:    return getpagesize();
        -:  115:
        -:  116:}
        -:  117:
    #####:  118:unsigned int plat_mmap_get_alloc_granularity()
        -:  119:{
    #####:  120:    return 16 * getpagesize();
        -:  121:}
        -:  122:
    #####:  123:void plat_mmap_unmap(plat_mmap *handle)
        -:  124:{
        -:  125:    /* check error(s) */
    #####:  126:    if (!handle)
    #####:  127:        return;
        -:  128:
    #####:  129:    if (handle->address) {
    #####:  130:        munmap(handle->address, handle->sizet);
    #####:  131:        handle->address = NULL;
        -:  132:    }
        -:  133:}
        -:  134:
        -:  135:#endif                          /* UNDER_POSIX */
