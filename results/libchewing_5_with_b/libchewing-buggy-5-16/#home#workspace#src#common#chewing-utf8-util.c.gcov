        -:    0:Source:/home/workspace/src/common/chewing-utf8-util.c
        -:    1:/**
        -:    2: * chewing-utf8-util.c
        -:    3: *
        -:    4: * Copyright (c) 2005, 2006, 2012-2104
        -:    5: *	libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:#include <stdio.h>
        -:   12:#include <string.h>
        -:   13:#include "chewing-utf8-util.h"
        -:   14:
        -:   15:/* Table of UTF-8 length */
        -:   16:static const char utf8len_tab[256] = {
        -:   17:    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        -:   18:    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        -:   19:    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        -:   20:    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        -:   21:    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,     /*bogus */
        -:   22:    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,     /*bogus */
        -:   23:    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        -:   24:    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 1, 1,
        -:   25:};
        -:   26:
        -:   27:/* Return length of UTF-8 string */
     1441:   28:int ueStrLen(const char *str)
        -:   29:{
     1441:   30:    int length = 0;
     1441:   31:    const char *strptr = str;
        -:   32:
    12044:   33:    while (strptr[0] != '\0') {
    10603:   34:        strptr += ueBytesFromChar(strptr[0]);
    10603:   35:        ++length;
        -:   36:    }
     1441:   37:    return length;
        -:   38:}
        -:   39:
        -:   40:/* Return bytes of a UTF-8 character */
    33300:   41:int ueBytesFromChar(unsigned char b)
        -:   42:{
    33300:   43:    return utf8len_tab[b];
        -:   44:}
        -:   45:
        -:   46:/* Return bytes of a UTF-8 string until n position */
     8619:   47:int ueStrNBytes(const char *str, int n)
        -:   48:{
     8619:   49:    int i = 0, len = 0;
     8619:   50:    const char *iter = str;
        -:   51:
    20282:   52:    for (i = 0; i < n; i++) {
    11663:   53:        len += ueBytesFromChar(iter[len]);
        -:   54:    }
     8619:   55:    return len;
        -:   56:}
        -:   57:
        -:   58:/* Return how many bytes was copied */
     8619:   59:int ueStrNCpy(char dest[], const char *src, size_t n, int end)
        -:   60:{
     8619:   61:    int len = 0;
        -:   62:
     8619:   63:    len = ueStrNBytes(src, n);
     8619:   64:    memcpy(dest, src, len);
     8619:   65:    if (end == STRNCPY_CLOSE)
     8483:   66:        dest[len] = '\0';
     8619:   67:    return len;
        -:   68:}
        -:   69:
      203:   70:const char *ueConstStrSeek(const char *src, size_t n)
        -:   71:{
      203:   72:    size_t i = 0;
      203:   73:    const char *iter = src;
        -:   74:
     4336:   75:    for (i = 0; i < n; i++) {
     4133:   76:        iter += ueBytesFromChar(iter[0]);
        -:   77:    }
      203:   78:    return iter;
        -:   79:}
        -:   80:
      480:   81:char *ueStrSeek(char *src, size_t n)
        -:   82:{
      480:   83:    size_t i = 0;
      480:   84:    char *iter = src;
        -:   85:
      642:   86:    for (i = 0; i < n; i++) {
      162:   87:        iter += ueBytesFromChar(iter[0]);
        -:   88:    }
      480:   89:    return iter;
        -:   90:}
        -:   91:
        -:   92:/* Locate a UTF-8 substring from UTF-8 string */
    #####:   93:const char *ueStrStr(const char *str, size_t lstr, const char *substr, size_t lsub)
        -:   94:{
    #####:   95:    const char *p = str;
        -:   96:    size_t ub;
        -:   97:
    #####:   98:    if (lstr < lsub)
    #####:   99:        return NULL;
    #####:  100:    ub = lstr - lsub;
    #####:  101:    for (; (size_t) (p - str) <= ub; p++) {
    #####:  102:        if (!strncmp(p, substr, lsub))
    #####:  103:            return p;
        -:  104:    }
    #####:  105:    return NULL;
        -:  106:}
