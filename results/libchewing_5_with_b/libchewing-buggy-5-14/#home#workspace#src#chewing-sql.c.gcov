        -:    0:Source:/home/workspace/src/chewing-sql.c
        -:    1:/**
        -:    2: * chewing-sql.c
        -:    3: *
        -:    4: * Copyright (c) 2013, 2014
        -:    5: *	libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:#include "chewing-sql.h"
        -:   12:#include "chewing-private.h"
        -:   13:
        -:   14:#include <assert.h>
        -:   15:#include <stdlib.h>
        -:   16:#include <stdio.h>
        -:   17:#include <string.h>
        -:   18:
        -:   19:#include "memory-private.h"
        -:   20:#include "plat_types.h"
        -:   21:#include "private.h"
        -:   22:#include "sqlite3.h"
        -:   23:#include "userphrase-private.h"
        -:   24:
        -:   25:const SqlStmtUserphrase SQL_STMT_USERPHRASE[STMT_USERPHRASE_COUNT] = {
        -:   26:    {
        -:   27:     "SELECT length, phrase, "
        -:   28:     "phone_0, phone_1, phone_2, phone_3, phone_4, phone_5, "
        -:   29:     "phone_6, phone_7, phone_8, phone_9, phone_10 " "FROM userphrase_v1",
        -:   30:     {-1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12},
        -:   31:     },
        -:   32:    {
        -:   33:     "SELECT time, orig_freq, max_freq, user_freq, phrase "
        -:   34:     "FROM userphrase_v1 WHERE length = ?5 AND "
        -:   35:     "phone_0 = ?10 AND phone_1 = ?11 AND phone_2 = ?12 AND "
        -:   36:     "phone_3 = ?13 AND phone_4 = ?14 AND phone_5 = ?15 AND "
        -:   37:     "phone_6 = ?16 AND phone_7 = ?17 AND phone_8 = ?18 AND " "phone_9 = ?19 AND phone_10 = ?20",
        -:   38:     {0, 1, 2, 3, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   39:     },
        -:   40:    {
        -:   41:     "SELECT time, orig_freq, max_freq, user_freq "
        -:   42:     "FROM userphrase_v1 WHERE length = ?5 AND phrase = ?6 AND "
        -:   43:     "phone_0 = ?10 AND phone_1 = ?11 AND phone_2 = ?12 AND "
        -:   44:     "phone_3 = ?13 AND phone_4 = ?14 AND phone_5 = ?15 AND "
        -:   45:     "phone_6 = ?16 AND phone_7 = ?17 AND phone_8 = ?18 AND " "phone_9 = ?19 AND phone_10 = ?20",
        -:   46:     {0, 1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   47:     },
        -:   48:    {
        -:   49:     "INSERT OR REPLACE INTO userphrase_v1 ("
        -:   50:     "time, orig_freq, max_freq, user_freq, length, phrase, "
        -:   51:     "phone_0, phone_1, phone_2, phone_3, phone_4, phone_5, "
        -:   52:     "phone_6, phone_7, phone_8, phone_9, phone_10) "
        -:   53:     "VALUES (?1, ?2, ?3, ?4, ?5, ?6, " "?10, ?11, ?12, ?13, ?14, ?15, ?16, ?17, ?18, ?19, ?20)",
        -:   54:     {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   55:     },
        -:   56:    {
        -:   57:     "DELETE FROM userphrase_v1 WHERE length = ?5 AND phrase = ?6 AND "
        -:   58:     "phone_0 = ?10 AND phone_1 = ?11 AND phone_2 = ?12 AND "
        -:   59:     "phone_3 = ?13 AND phone_4 = ?14 AND phone_5 = ?15 AND "
        -:   60:     "phone_6 = ?16 AND phone_7 = ?17 AND phone_8 = ?18 AND " "phone_9 = ?19 AND phone_10 = ?20",
        -:   61:     {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   62:     },
        -:   63:    {
        -:   64:     "SELECT MAX(user_freq) FROM userphrase_v1 WHERE length = ?5 AND "
        -:   65:     "phone_0 = ?10 AND phone_1 = ?11 AND phone_2 = ?12 AND "
        -:   66:     "phone_3 = ?13 AND phone_4 = ?14 AND phone_5 = ?15 AND "
        -:   67:     "phone_6 = ?16 AND phone_7 = ?17 AND phone_8 = ?18 AND " "phone_9 = ?19 AND phone_10 = ?20",
        -:   68:     {-1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        -:   69:     },
        -:   70:};
        -:   71:
        -:   72:const SqlStmtConfig SQL_STMT_CONFIG[STMT_CONFIG_COUNT] = {
        -:   73:    {
        -:   74:     "SELECT value FROM config_v1 WHERE id = ?1",
        -:   75:     {-1, 0},
        -:   76:     },
        -:   77:    {
        -:   78:     "INSERT OR IGNORE INTO config_v1 (id, value) VALUES (?1, ?2)",
        -:   79:     {-1, -1},
        -:   80:     },
        -:   81:    {
        -:   82:     "UPDATE config_v1 SET value = value + ?2 WHERE id = ?1",
        -:   83:     {-1, -1},
        -:   84:     },
        -:   85:};
        -:   86:
        -:   87:#define HASH_FIELD_SIZE		(125)
        -:   88:#define HASH_FIELD_START	(8)
        -:   89:#define HASH_LENGTH_OFFSET	(16)
        -:   90:#define HASH_NAME		"uhash.dat"
        -:   91:#define HASH_OLD_NAME		"uhash.old"
        -:   92:#define HASH_SIGS		"CBiH"
        -:   93:
        3:   94:static sqlite3 *GetSQLiteInstance(ChewingData *pgdata, const char *path)
        -:   95:{
        -:   96:    int ret;
        3:   97:    sqlite3 *db = NULL;
        -:   98:
       3*:   99:    assert(pgdata);
       3*:  100:    assert(path);
        -:  101:
        3:  102:    ret = sqlite3_open(path, &db);
        3:  103:    if (ret != SQLITE_OK) {
    #####:  104:        LOG_ERROR("sqlite3_open returns %d", ret);
    #####:  105:        goto end;
        -:  106:    }
        -:  107:
        3:  108:  end:
        3:  109:    return db;
        -:  110:}
        -:  111:
        -:  112:
        3:  113:static int CreateTable(ChewingData *pgdata)
        -:  114:{
        -:  115:    int ret;
        -:  116:
        -:  117:    STATIC_ASSERT(MAX_PHRASE_LEN == 11);
        -:  118:
        3:  119:    ret = sqlite3_exec(pgdata->static_data.db,
        -:  120:                       "CREATE TABLE IF NOT EXISTS userphrase_v1 ("
        -:  121:                       "time INTEGER,"
        -:  122:                       "user_freq INTEGER,"
        -:  123:                       "max_freq INTEGER,"
        -:  124:                       "orig_freq INTEGER,"
        -:  125:                       "length INTEGER,"
        -:  126:                       "phone_0 INTEGER,"
        -:  127:                       "phone_1 INTEGER,"
        -:  128:                       "phone_2 INTEGER,"
        -:  129:                       "phone_3 INTEGER,"
        -:  130:                       "phone_4 INTEGER,"
        -:  131:                       "phone_5 INTEGER,"
        -:  132:                       "phone_6 INTEGER,"
        -:  133:                       "phone_7 INTEGER,"
        -:  134:                       "phone_8 INTEGER,"
        -:  135:                       "phone_9 INTEGER,"
        -:  136:                       "phone_10 INTEGER,"
        -:  137:                       "phrase TEXT,"
        -:  138:                       "PRIMARY KEY ("
        -:  139:                       "phone_0,"
        -:  140:                       "phone_1,"
        -:  141:                       "phone_2,"
        -:  142:                       "phone_3,"
        -:  143:                       "phone_4,"
        -:  144:                       "phone_5,"
        -:  145:                       "phone_6," "phone_7," "phone_8," "phone_9," "phone_10," "phrase)" ")", NULL, NULL, NULL);
        3:  146:    if (ret != SQLITE_OK) {
    #####:  147:        LOG_ERROR("Cannot create table userphrase_v1, error = %d", ret);
    #####:  148:        return -1;
        -:  149:    }
        -:  150:
        3:  151:    ret = sqlite3_exec(pgdata->static_data.db,
        -:  152:                       "CREATE TABLE IF NOT EXISTS config_v1 ("
        -:  153:                       "id INTEGER," "value INTEGER," "PRIMARY KEY (id)" ")", NULL, NULL, NULL);
        3:  154:    if (ret != SQLITE_OK) {
    #####:  155:        LOG_ERROR("Cannot create table config_v1, error = %d", ret);
    #####:  156:        return -1;
        -:  157:    }
        -:  158:
        3:  159:    return 0;
        -:  160:}
        -:  161:
        3:  162:static int SetupUserphraseLifeTime(ChewingData *pgdata)
        -:  163:{
        -:  164:    int ret;
        -:  165:
       3*:  166:    assert(pgdata->static_data.stmt_config[STMT_CONFIG_INSERT]);
        -:  167:
        3:  168:    ret = sqlite3_bind_int(pgdata->static_data.stmt_config[STMT_CONFIG_INSERT], BIND_CONFIG_ID, CONFIG_ID_LIFETIME);
        3:  169:    if (ret != SQLITE_OK) {
    #####:  170:        LOG_ERROR("Cannot bind ?%d to %d in stmt %s, error = %d",
        -:  171:                  BIND_CONFIG_ID, CONFIG_ID_LIFETIME, SQL_STMT_CONFIG[STMT_CONFIG_INSERT].stmt, ret);
    #####:  172:        return -1;
        -:  173:    }
        -:  174:
        3:  175:    ret = sqlite3_bind_int(pgdata->static_data.stmt_config[STMT_CONFIG_INSERT], BIND_CONFIG_VALUE, 0);
        3:  176:    if (ret != SQLITE_OK) {
    #####:  177:        LOG_ERROR("Cannot bind ?%d to %d in stmt %s, error = %d",
        -:  178:                  BIND_CONFIG_VALUE, 0, SQL_STMT_CONFIG[STMT_CONFIG_INSERT].stmt, ret);
    #####:  179:        return -1;
        -:  180:    }
        -:  181:
        3:  182:    ret = sqlite3_step(pgdata->static_data.stmt_config[STMT_CONFIG_INSERT]);
        3:  183:    if (ret != SQLITE_DONE) {
    #####:  184:        LOG_ERROR("sqlite3_step returns %d", ret);
    #####:  185:        return -1;
        -:  186:    }
        -:  187:
        3:  188:    ret = sqlite3_reset(pgdata->static_data.stmt_config[STMT_CONFIG_INSERT]);
        3:  189:    if (ret != SQLITE_OK) {
    #####:  190:        LOG_ERROR("sqlite3_reset returns %d", ret);
    #####:  191:        return -1;
        -:  192:    }
        -:  193:
       3*:  194:    assert(pgdata->static_data.stmt_config[STMT_CONFIG_SELECT]);
        -:  195:
        3:  196:    ret = sqlite3_bind_int(pgdata->static_data.stmt_config[STMT_CONFIG_SELECT], BIND_CONFIG_ID, CONFIG_ID_LIFETIME);
        3:  197:    if (ret != SQLITE_OK) {
    #####:  198:        LOG_ERROR("Cannot bind ?%d to %d in stmt %s, error = %d",
        -:  199:                  BIND_CONFIG_ID, CONFIG_ID_LIFETIME, SQL_STMT_CONFIG[STMT_CONFIG_SELECT].stmt, ret);
    #####:  200:        return -1;
        -:  201:    }
        -:  202:
        3:  203:    ret = sqlite3_step(pgdata->static_data.stmt_config[STMT_CONFIG_SELECT]);
        3:  204:    if (ret != SQLITE_ROW) {
    #####:  205:        LOG_ERROR("sqlite3_step returns %d", ret);
    #####:  206:        return -1;
        -:  207:    }
        -:  208:
        6:  209:    pgdata->static_data.original_lifetime = sqlite3_column_int(pgdata->static_data.stmt_config[STMT_CONFIG_SELECT],
        -:  210:                                                               SQL_STMT_CONFIG[STMT_CONFIG_SELECT].column
        3:  211:                                                               [COLUMN_CONFIG_VALUE]);
        3:  212:    pgdata->static_data.new_lifetime = pgdata->static_data.original_lifetime;
        -:  213:
        3:  214:    ret = sqlite3_reset(pgdata->static_data.stmt_config[STMT_CONFIG_SELECT]);
        3:  215:    if (ret != SQLITE_OK) {
    #####:  216:        LOG_ERROR("sqlite3_reset returns %d", ret);
    #####:  217:        return -1;
        -:  218:    }
        -:  219:
        3:  220:    return 0;
        -:  221:}
        -:  222:
        3:  223:static int UpdateLifeTime(ChewingData *pgdata)
        -:  224:{
        -:  225:    int ret;
        3:  226:    int result = 0;
        -:  227:
        3:  228:    if (!pgdata->static_data.stmt_config[STMT_CONFIG_INCREASE]) {
    #####:  229:        LOG_ERROR("pgdata->static_data.stmt_config[STMT_CONFIG_INCREASE] is NULL");
    #####:  230:        result = -1;
    #####:  231:        goto end;
        -:  232:    }
        -:  233:
        3:  234:    ret = sqlite3_clear_bindings(pgdata->static_data.stmt_config[STMT_CONFIG_INCREASE]);
        3:  235:    if (ret != SQLITE_OK) {
    #####:  236:        LOG_ERROR("sqlite3_clear_bindings returns %d", ret);
    #####:  237:        result = -1;
    #####:  238:        goto end;
        -:  239:    }
        -:  240:
        3:  241:    ret = sqlite3_bind_int(pgdata->static_data.stmt_config[STMT_CONFIG_INCREASE], BIND_CONFIG_ID, CONFIG_ID_LIFETIME);
        3:  242:    if (ret != SQLITE_OK) {
    #####:  243:        LOG_ERROR("Cannot bind ?%d to %d in stmt %s, error = %d",
        -:  244:                  BIND_CONFIG_ID, CONFIG_ID_LIFETIME, SQL_STMT_CONFIG[STMT_CONFIG_INCREASE].stmt, ret);
    #####:  245:        result = -1;
    #####:  246:        goto end;
        -:  247:    }
        -:  248:
        3:  249:    ret = sqlite3_bind_int(pgdata->static_data.stmt_config[STMT_CONFIG_INCREASE],
        3:  250:                           BIND_CONFIG_VALUE, pgdata->static_data.new_lifetime - pgdata->static_data.original_lifetime);
        3:  251:    if (ret != SQLITE_OK) {
    #####:  252:        LOG_ERROR("Cannot bind ?%d to %d in stmt %s, error = %d",
        -:  253:                  BIND_CONFIG_VALUE,
        -:  254:                  pgdata->static_data.new_lifetime - pgdata->static_data.original_lifetime,
        -:  255:                  SQL_STMT_CONFIG[STMT_CONFIG_INCREASE].stmt, ret);
    #####:  256:        result = -1;
    #####:  257:        goto end;
        -:  258:    }
        -:  259:
        3:  260:    ret = sqlite3_step(pgdata->static_data.stmt_config[STMT_CONFIG_INCREASE]);
        3:  261:    if (ret != SQLITE_DONE) {
    #####:  262:        LOG_ERROR("sqlite3_step returns %d", ret);
    #####:  263:        result = -1;
    #####:  264:        goto end;
        -:  265:    }
        -:  266:
        3:  267:  end:
        3:  268:    ret = sqlite3_reset(pgdata->static_data.stmt_config[STMT_CONFIG_INCREASE]);
        3:  269:    if (ret != SQLITE_OK) {
    #####:  270:        LOG_ERROR("sqlite3_reset returns %d", ret);
    #####:  271:        result = -1;
        -:  272:    }
        -:  273:
        3:  274:    return result;
        -:  275:}
        -:  276:
        3:  277:static int ConfigDatabase(ChewingData *pgdata)
        -:  278:{
        -:  279:    int ret;
        -:  280:
       3*:  281:    assert(pgdata);
       3*:  282:    assert(pgdata->static_data.db);
        -:  283:
        3:  284:    ret = sqlite3_exec(pgdata->static_data.db, "PRAGMA synchronous=OFF", NULL, NULL, NULL);
        3:  285:    if (ret != SQLITE_OK) {
    #####:  286:        LOG_ERROR("Cannot set synchronous=OFF, error = %d", ret);
    #####:  287:        return -1;
        -:  288:    }
        -:  289:
        3:  290:    return 0;
        -:  291:}
        -:  292:
        3:  293:static int CreateStmt(ChewingData *pgdata)
        -:  294:{
        -:  295:    int i;
        -:  296:    int ret;
        -:  297:
       3*:  298:    assert(pgdata);
        -:  299:
        -:  300:    STATIC_ASSERT(ARRAY_SIZE(SQL_STMT_CONFIG) == ARRAY_SIZE(pgdata->static_data.stmt_config));
        -:  301:    STATIC_ASSERT(ARRAY_SIZE(SQL_STMT_USERPHRASE) == ARRAY_SIZE(pgdata->static_data.stmt_userphrase))
        -:  302:
       12:  303:        for (i = 0; i < ARRAY_SIZE(SQL_STMT_CONFIG); ++i) {
        9:  304:        ret = sqlite3_prepare_v2(pgdata->static_data.db,
        -:  305:                                 SQL_STMT_CONFIG[i].stmt, -1, &pgdata->static_data.stmt_config[i], NULL);
        9:  306:        if (ret != SQLITE_OK) {
    #####:  307:            LOG_ERROR("Cannot create stmt %s", SQL_STMT_CONFIG[i].stmt);
    #####:  308:            return -1;
        -:  309:        }
        -:  310:    }
        -:  311:
       21:  312:    for (i = 0; i < ARRAY_SIZE(SQL_STMT_USERPHRASE); ++i) {
       18:  313:        ret = sqlite3_prepare_v2(pgdata->static_data.db,
        -:  314:                                 SQL_STMT_USERPHRASE[i].stmt, -1, &pgdata->static_data.stmt_userphrase[i], NULL);
       18:  315:        if (ret != SQLITE_OK) {
    #####:  316:            LOG_ERROR("Cannot create stmt %s", SQL_STMT_USERPHRASE[i].stmt);
    #####:  317:            return -1;
        -:  318:        }
        -:  319:    }
        -:  320:
        3:  321:    return 0;
        -:  322:}
        -:  323:
        3:  324:static void MigrateOldFormat(ChewingData *pgdata, const char *path)
        -:  325:{
        -:  326:    char *uhash;
        -:  327:    char *old_uhash;
        3:  328:    FILE *fd = NULL;
        -:  329:    char buf[HASH_FIELD_SIZE];
        -:  330:    uint16_t phoneSeq[MAX_PHRASE_LEN + 1];
        -:  331:    char *pos;
        -:  332:    int len;
        -:  333:    int i;
        -:  334:    int ret;
        -:  335:
       3*:  336:    assert(pgdata);
       3*:  337:    assert(path);
        -:  338:
        3:  339:    len = strlen(path) + 1 + strlen(HASH_NAME) + 1;
        3:  340:    uhash = calloc(sizeof(*uhash), len);
        3:  341:    if (!uhash) {
    #####:  342:        LOG_ERROR("calloc returns %#p", uhash);
    #####:  343:        exit(-1);
        -:  344:    }
        3:  345:    snprintf(uhash, len, "%s" PLAT_SEPARATOR "%s", path, HASH_NAME);
        -:  346:
        3:  347:    len = strlen(path) + 1 + strlen(HASH_OLD_NAME) + 1;
        3:  348:    old_uhash = calloc(sizeof(*old_uhash), len);
        3:  349:    if (!old_uhash) {
    #####:  350:        LOG_ERROR("calloc returns %#p", old_uhash);
    #####:  351:        exit(-1);
        -:  352:    }
        3:  353:    snprintf(old_uhash, len, "%s" PLAT_SEPARATOR "%s", path, HASH_OLD_NAME);
        -:  354:
        -:  355:    /*
        -:  356:     * The binary format is described as following:
        -:  357:     *
        -:  358:     * 0 ~ 3                signature (CBiH)
        -:  359:     * 4 ~ 7                lifttime, platform endianness
        -:  360:     * 8 ~ 8 + 125 * n      array of hash item, 125 bytes each
        -:  361:     *
        -:  362:     * 0 ~ 3                user frequency, platform endianness
        -:  363:     * 4 ~ 7                recent time, platform endianness
        -:  364:     * 8 ~ 11               max frequency, platform endianness
        -:  365:     * 12 ~ 15              original frequency, platform endianness
        -:  366:     * 16                   phone length
        -:  367:     * 17 ~ 17 + 2 * n      phone sequence, uint16_t, platform endianness
        -:  368:     * 17 + 2 * n + 1       phrase length in bytes
        -:  369:     * 17 + 2 * n + 2 ~ y   phrase in UTF-8
        -:  370:     *
        -:  371:     */
        -:  372:
        3:  373:    fd = fopen(uhash, "r");
        3:  374:    if (!fd)
        3:  375:        goto end;
        -:  376:
    #####:  377:    LOG_INFO("Migrate old format from %s", uhash);
    #####:  378:    ret = fread(buf, 4, 1, fd);
    #####:  379:    if (ret != 1) {
    #####:  380:        LOG_WARN("fread returns %d", ret);
    #####:  381:        goto end_remove_hash;
        -:  382:    }
        -:  383:
    #####:  384:    if (memcmp(buf, HASH_SIGS, 4) != 0) {
    #####:  385:        LOG_WARN("signature is not %d", HASH_SIGS);
    #####:  386:        goto end_remove_hash;
        -:  387:    }
        -:  388:
    #####:  389:    ret = fseek(fd, 8, SEEK_SET);
    #####:  390:    if (ret) {
    #####:  391:        LOG_WARN("fseek returns %d", ret);
    #####:  392:        goto end_remove_hash;
        -:  393:    }
        -:  394:
    #####:  395:    while (fread(buf, HASH_FIELD_SIZE, 1, fd) == 1) {
    #####:  396:        pos = &buf[HASH_LENGTH_OFFSET];
    #####:  397:        len = *pos;
    #####:  398:        ++pos;
        -:  399:
    #####:  400:        if (len > MAX_PHRASE_LEN || len < 1) {
    #####:  401:            LOG_WARN("skip field due to len = %d", len);
    #####:  402:            continue;
        -:  403:        }
        -:  404:
    #####:  405:        for (i = 0; i < len; ++i) {
    #####:  406:            phoneSeq[i] = GetUint16PreservedEndian(pos);
    #####:  407:            pos += 2;
        -:  408:        }
    #####:  409:        phoneSeq[len] = 0;
        -:  410:
    #####:  411:        ++pos;
    #####:  412:        UserUpdatePhrase(pgdata, phoneSeq, pos);
        -:  413:    }
        -:  414:
    #####:  415:  end_remove_hash:
    #####:  416:    if (fd)
    #####:  417:        fclose(fd);
    #####:  418:    PLAT_RENAME(uhash, old_uhash);
        3:  419:  end:
        3:  420:    free(old_uhash);
        3:  421:    free(uhash);
        3:  422:}
        -:  423:
        3:  424:int InitUserphrase(ChewingData *pgdata, const char *path)
        -:  425:{
        -:  426:    int ret;
        -:  427:
       3*:  428:    assert(!pgdata->static_data.db);
       3*:  429:    assert(path);
        -:  430:
        3:  431:    pgdata->static_data.db = GetSQLiteInstance(pgdata, path);
        3:  432:    if (!pgdata->static_data.db) {
    #####:  433:        LOG_ERROR("GetSQLiteInstance fails");
    #####:  434:        goto error;
        -:  435:    }
        -:  436:
        3:  437:    ret = ConfigDatabase(pgdata);
        3:  438:    if (ret) {
    #####:  439:        LOG_ERROR("ConfigDatabase returns %d", ret);
    #####:  440:        goto error;
        -:  441:    }
        -:  442:
        3:  443:    ret = CreateTable(pgdata);
        3:  444:    if (ret) {
    #####:  445:        LOG_ERROR("CreateTable returns %d", ret);
    #####:  446:        goto error;
        -:  447:    }
        -:  448:
        3:  449:    ret = CreateStmt(pgdata);
        3:  450:    if (ret) {
    #####:  451:        LOG_ERROR("CreateStmt returns %d", ret);
    #####:  452:        goto error;
        -:  453:    }
        -:  454:
        3:  455:    ret = SetupUserphraseLifeTime(pgdata);
        3:  456:    if (ret) {
    #####:  457:        LOG_ERROR("SetupUserphraseLiftTime returns %d", ret);
    #####:  458:        goto error;
        -:  459:    }
        -:  460:
        -:  461:    /* FIXME: Normalize lifttime when necessary. */
        -:  462:
        3:  463:    MigrateOldFormat(pgdata, path);
        -:  464:
        3:  465:    return 0;
        -:  466:
    #####:  467:  error:
    #####:  468:    TerminateUserphrase(pgdata);
    #####:  469:    return -1;
        -:  470:}
        -:  471:
        3:  472:void TerminateUserphrase(ChewingData *pgdata)
        -:  473:{
        -:  474:    int i;
        -:  475:    int ret;
        -:  476:
        3:  477:    UpdateLifeTime(pgdata);
        -:  478:
       12:  479:    for (i = 0; i < ARRAY_SIZE(pgdata->static_data.stmt_config); ++i) {
        9:  480:        sqlite3_finalize(pgdata->static_data.stmt_config[i]);
        9:  481:        pgdata->static_data.stmt_config[i] = NULL;
        -:  482:    }
        -:  483:
       21:  484:    for (i = 0; i < ARRAY_SIZE(pgdata->static_data.stmt_userphrase); ++i) {
       18:  485:        sqlite3_finalize(pgdata->static_data.stmt_userphrase[i]);
       18:  486:        pgdata->static_data.stmt_userphrase[i] = NULL;
        -:  487:    }
        -:  488:
        3:  489:    ret = sqlite3_close(pgdata->static_data.db);
       3*:  490:    assert(SQLITE_OK == ret);
        3:  491:    pgdata->static_data.db = NULL;
        3:  492:}
