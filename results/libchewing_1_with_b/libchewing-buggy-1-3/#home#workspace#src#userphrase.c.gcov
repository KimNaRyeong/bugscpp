        -:    0:Source:/home/workspace/src/userphrase.c
        -:    1:/**
        -:    2: * userphrase.c
        -:    3: *
        -:    4: * Copyright (c) 2014
        -:    5: *      libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:#include "userphrase-private.h"
        -:   12:
        -:   13:#include <assert.h>
        -:   14:
        -:   15:#include "chewing-private.h"
        -:   16:#include "chewing-sql.h"
        -:   17:#include "private.h"
        -:   18:
        -:   19:#include "plat_path.h"
        -:   20:
        -:   21:#if defined(_WIN32) || defined(_WIN64) || defined(_WIN32_WCE)
        -:   22:
        -:   23:#    include <Shlobj.h>
        -:   24:#    define USERPHRASE_DIR	"ChewingTextService"
        -:   25:
        -:   26:char *GetDefaultChewingUserPath(ChewingData *pgdata)
        -:   27:{
        -:   28:    wchar_t *tmp;
        -:   29:    char *path;
        -:   30:    int path_len;
        -:   31:    int len;
        -:   32:
        -:   33:    assert(pgdata);
        -:   34:
        -:   35:    len = GetEnvironmentVariableW(L"CHEWING_USER_PATH", NULL, 0);
        -:   36:    if (len) {
        -:   37:        tmp = calloc(sizeof(*tmp), len);
        -:   38:        if (!tmp) {
        -:   39:            LOG_ERROR("calloc returns %#p", tmp);
        -:   40:            exit(-1);
        -:   41:        }
        -:   42:
        -:   43:        GetEnvironmentVariableW(L"CHEWING_USER_PATH", tmp, len);
        -:   44:
        -:   45:        len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, tmp, -1, NULL, 0, NULL, NULL);
        -:   46:        path_len = len + 1;
        -:   47:        path = calloc(sizeof(*path), path_len);
        -:   48:        if (!path) {
        -:   49:            free(tmp);
        -:   50:            LOG_ERROR("calloc returns %#p", path);
        -:   51:            exit(-1);
        -:   52:        }
        -:   53:        WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, tmp, -1, path, len, NULL, NULL);
        -:   54:
        -:   55:        LOG_INFO("chewing user path is at %s", path);
        -:   56:
        -:   57:        free(tmp);
        -:   58:        return path;
        -:   59:    }
        -:   60:
        -:   61:    len = GetEnvironmentVariableW(L"USERPROFILE", NULL, 0);
        -:   62:    if (len) {
        -:   63:        tmp = calloc(sizeof(*tmp), len);
        -:   64:        if (!tmp) {
        -:   65:            LOG_ERROR("calloc returns %#p", tmp);
        -:   66:            exit(-1);
        -:   67:        }
        -:   68:
        -:   69:        GetEnvironmentVariableW(L"USERPROFILE", tmp, len);
        -:   70:
        -:   71:        len = WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, tmp, -1, NULL, 0, NULL, NULL);
        -:   72:        path = calloc(sizeof(*path), len + 1 + strlen(USERPHRASE_DIR) + 1);
        -:   73:        if (!path) {
        -:   74:            free(tmp);
        -:   75:            LOG_ERROR("calloc returns %#p", path);
        -:   76:            exit(-1);
        -:   77:        }
        -:   78:        WideCharToMultiByte(CP_UTF8, WC_ERR_INVALID_CHARS, tmp, -1, path, len, NULL, NULL);
        -:   79:
        -:   80:        strcpy(path + len - 1, "\\" USERPHRASE_DIR);
        -:   81:        LOG_INFO("chewing user path is at %s", path);
        -:   82:
        -:   83:        free(tmp);
        -:   84:        return path;
        -:   85:    }
        -:   86:
        -:   87:    return NULL;
        -:   88:}
        -:   89:
        -:   90:char *GetDefaultUserPhrasePath(ChewingData *pgdata)
        -:   91:{
        -:   92:    char *tmp;
        -:   93:    char *path;
        -:   94:    int ret;
        -:   95:
        -:   96:    assert(pgdata);
        -:   97:
        -:   98:    tmp = GetDefaultChewingUserPath(pgdata);
        -:   99:    if (tmp) {
        -:  100:        ret = asprintf(&path, "%s\\%s", tmp, DB_NAME);
        -:  101:        if (ret == -1) {
        -:  102:            free(tmp);
        -:  103:            LOG_ERROR("asprintf returns %d", ret);
        -:  104:            exit(-1);
        -:  105:        }
        -:  106:
        -:  107:        LOG_INFO("userphrase is at %s", path);
        -:  108:
        -:  109:        free(tmp);
        -:  110:        return path;
        -:  111:    }
        -:  112:
        -:  113:    return NULL;
        -:  114:}
        -:  115:
        -:  116:#else
        -:  117:
        -:  118:#    ifdef __MaxOSX__
        -:  119:/* FIXME: Shall this path pre user? */
        -:  120:#        define USERPHRASE_DIR	"/Library/ChewingOSX"
        -:  121:#    else
        -:  122:#        define USERPHRASE_DIR	".chewing"
        -:  123:#    endif
        -:  124:
        -:  125:#    include <stdio.h>
        -:  126:#    include <stdlib.h>
        -:  127:#    include <string.h>
        -:  128:#    include <unistd.h>
        -:  129:
        2:  130:char *GetDefaultChewingUserPath(ChewingData *pgdata)
        -:  131:{
        -:  132:    char *tmp;
        -:  133:    char *path;
        -:  134:    int ret;
        -:  135:
       2*:  136:    assert(pgdata);
        -:  137:
        2:  138:    tmp = getenv("CHEWING_USER_PATH");
        2:  139:    if (tmp) {
        2:  140:        ret = asprintf(&path, "%s", tmp);
        2:  141:        if (ret == -1) {
    #####:  142:            LOG_ERROR("asprintf returns %d", ret);
    #####:  143:            exit(-1);
        -:  144:        }
        2:  145:        return path;
        -:  146:    }
        -:  147:
    #####:  148:    tmp = getenv("HOME");
    #####:  149:    if (!tmp) {
    #####:  150:        tmp = PLAT_TMPDIR;
        -:  151:    }
        -:  152:
    #####:  153:    ret = asprintf(&path, "%s/%s", tmp, USERPHRASE_DIR);
    #####:  154:    if (ret == -1) {
    #####:  155:        LOG_ERROR("asprintf returns %d", ret);
    #####:  156:        exit(-1);
        -:  157:    }
        -:  158:
    #####:  159:    PLAT_MKDIR(path);
        -:  160:
    #####:  161:    return path;
        -:  162:}
        -:  163:
        2:  164:char *GetDefaultUserPhrasePath(ChewingData *pgdata)
        -:  165:{
        -:  166:    char *tmp;
        -:  167:    char *path;
        -:  168:    int ret;
        -:  169:
       2*:  170:    assert(pgdata);
        -:  171:
        2:  172:    tmp = GetDefaultChewingUserPath(pgdata);
        2:  173:    if (tmp && access(tmp, W_OK) == 0) {
        2:  174:        ret = asprintf(&path, "%s/%s", tmp, DB_NAME);
        2:  175:        if (ret == -1) {
    #####:  176:            free(tmp);
    #####:  177:            LOG_ERROR("asprintf returns %d", ret);
    #####:  178:            exit(-1);
        -:  179:        }
        2:  180:        free(tmp);
        2:  181:        return path;
        -:  182:    }
    #####:  183:    free(tmp);
        -:  184:
    #####:  185:    return NULL;
        -:  186:}
        -:  187:
        -:  188:#endif
