        -:    0:Source:/home/workspace/include/internal/memory-private.h
        -:    1:/**
        -:    2: * memory-private.h
        -:    3: *
        -:    4: * Copyright (c) 2013
        -:    5: *      libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:/* *INDENT-OFF* */
        -:   12:#ifndef _CHEWING_MEMORY_PRIVATE_H
        -:   13:#define _CHEWING_MEMORY_PRIVATE_H
        -:   14:/* *INDENT-ON* */
        -:   15:
        -:   16:#ifdef HAVE_CONFIG_H
        -:   17:#    include <config.h>
        -:   18:#endif
        -:   19:
        -:   20:#ifdef HAVE_INTTYPES_H
        -:   21:#    include <inttypes.h>
        -:   22:#elif defined HAVE_STDINT_H
        -:   23:#    include <stdint.h>
        -:   24:#endif
        -:   25:
        -:   26:#ifdef _MSC_VER
        -:   27:#    define inline __inline
        -:   28:#endif
        -:   29:
        -:   30:static inline uint16_t GetUint16(const void *ptr)
        -:   31:{
        -:   32:    uint16_t val;
        -:   33:    const unsigned char *uptr = ptr;
        -:   34:
        -:   35:    val = (uptr[0] << 0) | (uptr[1] << 8);
        -:   36:    return val;
        -:   37:}
        -:   38:
        -:   39:static inline void PutUint16(uint16_t val, void *ptr)
        -:   40:{
        -:   41:    unsigned char *uptr = (unsigned char *) ptr;
        -:   42:
        -:   43:    uptr[0] = (val >> 0) & 0xff;
        -:   44:    uptr[1] = (val >> 8) & 0xff;
        -:   45:}
        -:   46:
    #####:   47:static inline uint16_t GetUint16PreservedEndian(const void *ptr)
        -:   48:{
        -:   49:    uint16_t val;
    #####:   50:    const unsigned char *uptr = ptr;
        -:   51:
        -:   52:#if WORDS_BIGENDIAN
        -:   53:    val = (uptr[0] << 8) | (uptr[1] << 0);
        -:   54:#else
    #####:   55:    val = (uptr[0] << 0) | (uptr[1] << 8);
        -:   56:#endif
    #####:   57:    return val;
        -:   58:}
        -:   59:
        -:   60:static inline void PutUint16PreservedEndian(uint16_t val, void *ptr)
        -:   61:{
        -:   62:    unsigned char *uptr = (unsigned char *) ptr;
        -:   63:
        -:   64:#if WORDS_BIGENDIAN
        -:   65:    uptr[0] = (val >> 8) & 0xff;
        -:   66:    uptr[1] = (val >> 0) & 0xff;
        -:   67:#else
        -:   68:    uptr[0] = (val >> 0) & 0xff;
        -:   69:    uptr[1] = (val >> 8) & 0xff;
        -:   70:#endif
        -:   71:}
        -:   72:
        -:   73:/*
        -:   74: * This function is specially used in reading fields of TreeType which are
        -:   75: * compressed into 3 bytes, so it has a special name of 24.
        -:   76: */
        -:   77:static inline uint32_t GetUint24(const void *ptr)
        -:   78:{
        -:   79:    uint32_t val;
        -:   80:    const unsigned char *uptr = ptr;
        -:   81:
        -:   82:    val = (uptr[0] << 0) | (uptr[1] << 8) | (uptr[2] << 16);
        -:   83:    return val;
        -:   84:}
        -:   85:
        -:   86:/*
        -:   87: * This function is specially used in writing fields of TreeType which are
        -:   88: * compressed into 3 bytes, so it has a special name of 24.
        -:   89: */
        -:   90:static inline void PutUint24(uint32_t val, void *ptr)
        -:   91:{
        -:   92:    unsigned char *uptr = (unsigned char *) ptr;
        -:   93:
        -:   94:    uptr[0] = (val >> 0) & 0xff;
        -:   95:    uptr[1] = (val >> 8) & 0xff;
        -:   96:    uptr[2] = (val >> 16) & 0xff;
        -:   97:}
        -:   98:
        -:   99:static inline int GetInt32PreservedEndian(const void *ptr)
        -:  100:{
        -:  101:    int val;
        -:  102:    const unsigned char *uptr = ptr;
        -:  103:
        -:  104:#if WORDS_BIGENDIAN
        -:  105:    val = (uptr[0] << 24) | (uptr[1] << 16) | (uptr[2] << 8) | (uptr[3] << 0);
        -:  106:#else
        -:  107:    val = (uptr[0] << 0) | (uptr[1] << 8) | (uptr[2] << 16) | (uptr[3] << 24);
        -:  108:#endif
        -:  109:    return val;
        -:  110:}
        -:  111:
        -:  112:static inline void PutInt32PreservedEndian(int val, void *ptr)
        -:  113:{
        -:  114:    unsigned char *uptr = (unsigned char *) ptr;
        -:  115:
        -:  116:#if WORDS_BIGENDIAN
        -:  117:    uptr[0] = (val >> 24) & 0xff;
        -:  118:    uptr[1] = (val >> 16) & 0xff;
        -:  119:    uptr[2] = (val >> 8) & 0xff;
        -:  120:    uptr[3] = (val >> 0) & 0xff;
        -:  121:#else
        -:  122:    uptr[0] = (val >> 0) & 0xff;
        -:  123:    uptr[1] = (val >> 8) & 0xff;
        -:  124:    uptr[2] = (val >> 16) & 0xff;
        -:  125:    uptr[3] = (val >> 24) & 0xff;
        -:  126:#endif
        -:  127:}
        -:  128:
        -:  129:/* *INDENT-OFF* */
        -:  130:#endif
        -:  131:/* *INDENT-ON* */
