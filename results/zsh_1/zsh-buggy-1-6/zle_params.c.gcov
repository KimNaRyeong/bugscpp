        -:    0:Source:zle_params.c
        -:    0:Graph:/home/workspace/Src/Zle/zle_params.gcno
        -:    0:Data:/home/workspace/Src/Zle/zle_params.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*
        -:    2: * zle_params.c - ZLE special parameters
        -:    3: *
        -:    4: * This file is part of zsh, the Z shell.
        -:    5: *
        -:    6: * Copyright (c) 1992-1997 Paul Falstad
        -:    7: * All rights reserved.
        -:    8: *
        -:    9: * Permission is hereby granted, without written agreement and without
        -:   10: * license or royalty fees, to use, copy, modify, and distribute this
        -:   11: * software and to distribute modified versions of this software for any
        -:   12: * purpose, provided that the above copyright notice and the following
        -:   13: * two paragraphs appear in all copies of this software.
        -:   14: *
        -:   15: * In no event shall Paul Falstad or the Zsh Development Group be liable
        -:   16: * to any party for direct, indirect, special, incidental, or consequential
        -:   17: * damages arising out of the use of this software and its documentation,
        -:   18: * even if Paul Falstad and the Zsh Development Group have been advised of
        -:   19: * the possibility of such damage.
        -:   20: *
        -:   21: * Paul Falstad and the Zsh Development Group specifically disclaim any
        -:   22: * warranties, including, but not limited to, the implied warranties of
        -:   23: * merchantability and fitness for a particular purpose.  The software
        -:   24: * provided hereunder is on an "as is" basis, and Paul Falstad and the
        -:   25: * Zsh Development Group have no obligation to provide maintenance,
        -:   26: * support, updates, enhancements, or modifications.
        -:   27: *
        -:   28: */
        -:   29:
        -:   30:#include "zle.mdh"
        -:   31:
        -:   32:#include "zle_params.pro"
        -:   33:
        -:   34:/*
        -:   35: * ZLE SPECIAL PARAMETERS:
        -:   36: *
        -:   37: * These special parameters are created, with a local scope, when
        -:   38: * running user-defined widget functions.  Reading and writing them
        -:   39: * reads and writes bits of ZLE state.  The parameters are:
        -:   40: *
        -:   41: * BUFFER   (scalar)   entire buffer contents
        -:   42: * CURSOR   (integer)  cursor position; 0 <= $CURSOR <= $#BUFFER
        -:   43: * LBUFFER  (scalar)   portion of buffer to the left of the cursor
        -:   44: * RBUFFER  (scalar)   portion of buffer to the right of the cursor
        -:   45: */
        -:   46:
        -:   47:static const struct gsu_scalar buffer_gsu =
        -:   48:{ get_buffer, set_buffer, zleunsetfn };
        -:   49:static const struct gsu_scalar context_gsu =
        -:   50:{ get_context, nullstrsetfn, zleunsetfn };
        -:   51:static const struct gsu_scalar cutbuffer_gsu =
        -:   52:{ get_cutbuffer, set_cutbuffer, unset_cutbuffer };
        -:   53:static const struct gsu_scalar keymap_gsu =
        -:   54:{ get_keymap, nullstrsetfn, zleunsetfn };
        -:   55:static const struct gsu_scalar keys_gsu =
        -:   56:{ get_keys, nullstrsetfn, zleunsetfn };
        -:   57:static const struct gsu_scalar lastabortedsearch_gsu =
        -:   58:{ get_lasearch, nullstrsetfn, zleunsetfn };
        -:   59:static const struct gsu_scalar lastsearch_gsu =
        -:   60:{ get_lsearch, nullstrsetfn, zleunsetfn };
        -:   61:static const struct gsu_scalar lastwidget_gsu =
        -:   62:{ get_lwidget, nullstrsetfn, zleunsetfn };
        -:   63:static const struct gsu_scalar lbuffer_gsu =
        -:   64:{ get_lbuffer, set_lbuffer, zleunsetfn };
        -:   65:static const struct gsu_scalar postdisplay_gsu =
        -:   66:{ get_postdisplay, set_postdisplay, zleunsetfn };
        -:   67:static const struct gsu_scalar prebuffer_gsu =
        -:   68:{ get_prebuffer, nullstrsetfn, zleunsetfn };
        -:   69:static const struct gsu_scalar predisplay_gsu =
        -:   70:{ get_predisplay, set_predisplay, zleunsetfn };
        -:   71:static const struct gsu_scalar rbuffer_gsu =
        -:   72:{ get_rbuffer, set_rbuffer, zleunsetfn };
        -:   73:static const struct gsu_scalar widget_gsu =
        -:   74:{ get_widget, nullstrsetfn, zleunsetfn };
        -:   75:static const struct gsu_scalar widgetfunc_gsu =
        -:   76:{ get_widgetfunc, nullstrsetfn, zleunsetfn };
        -:   77:static const struct gsu_scalar widgetstyle_gsu =
        -:   78:{ get_widgetstyle, nullstrsetfn, zleunsetfn };
        -:   79:static const struct gsu_scalar zle_state_gsu =
        -:   80:{ get_zle_state, nullstrsetfn, zleunsetfn };
        -:   81:
        -:   82:static const struct gsu_integer bufferlines_gsu =
        -:   83:{ get_bufferlines, NULL, zleunsetfn };
        -:   84:static const struct gsu_integer cursor_gsu =
        -:   85:{ get_cursor, set_cursor, zleunsetfn };
        -:   86:static const struct gsu_integer histno_gsu =
        -:   87:{ get_histno, set_histno, zleunsetfn };
        -:   88:static const struct gsu_integer keys_queued_count_gsu =
        -:   89:{ get_keys_queued_count, NULL, zleunsetfn };
        -:   90:static const struct gsu_integer mark_gsu =
        -:   91:{ get_mark, set_mark, zleunsetfn };
        -:   92:static const struct gsu_integer numeric_gsu =
        -:   93:{ get_numeric, set_numeric, unset_numeric };
        -:   94:static const struct gsu_integer pending_gsu =
        -:   95:{ get_pending, NULL, zleunsetfn };
        -:   96:static const struct gsu_integer recursive_gsu =
        -:   97:{ get_recursive, NULL, zleunsetfn };
        -:   98:static const struct gsu_integer region_active_gsu =
        -:   99:{ get_region_active, set_region_active, zleunsetfn };
        -:  100:static const struct gsu_integer undo_change_no_gsu =
        -:  101:{ get_undo_current_change, NULL, zleunsetfn };
        -:  102:static const struct gsu_integer undo_limit_no_gsu =
        -:  103:{ get_undo_limit_change, set_undo_limit_change, zleunsetfn };
        -:  104:static const struct gsu_integer yankstart_gsu =
        -:  105:{ get_yankstart, set_yankstart, zleunsetfn };
        -:  106:static const struct gsu_integer yankend_gsu =
        -:  107:{ get_yankend, set_yankend, zleunsetfn };
        -:  108:static const struct gsu_integer yankactive_gsu =
        -:  109:{ get_yankactive, NULL, zleunsetfn };
        -:  110:static const struct gsu_integer isearchmatchstart_gsu =
        -:  111:{ get_isearchmatchstart, NULL, zleunsetfn };
        -:  112:static const struct gsu_integer isearchmatchend_gsu =
        -:  113:{ get_isearchmatchend, NULL, zleunsetfn };
        -:  114:static const struct gsu_integer isearchmatchactive_gsu =
        -:  115:{ get_isearchmatchactive, NULL, zleunsetfn };
        -:  116:static const struct gsu_integer suffixstart_gsu =
        -:  117:{ get_suffixstart, NULL, zleunsetfn };
        -:  118:static const struct gsu_integer suffixend_gsu =
        -:  119:{ get_suffixend, NULL, zleunsetfn };
        -:  120:static const struct gsu_integer suffixactive_gsu =
        -:  121:{ get_suffixactive, NULL, zleunsetfn };
        -:  122:
        -:  123:static const struct gsu_array killring_gsu =
        -:  124:{ get_killring, set_killring, unset_killring };
        -:  125:
        -:  126:static const struct gsu_scalar register_gsu =
        -:  127:{ strgetfn, set_register, unset_register };
        -:  128:static const struct gsu_hash registers_gsu =
        -:  129:{ hashgetfn, set_registers, unset_registers };
        -:  130:
        -:  131:/* implementation is in zle_refresh.c */
        -:  132:static const struct gsu_array region_highlight_gsu =
        -:  133:{ get_region_highlight, set_region_highlight, unset_region_highlight };
        -:  134:
        -:  135:#define GSU(X) ( (GsuScalar)(void*)(&(X)) )
        -:  136:static struct zleparam {
        -:  137:    char *name;
        -:  138:    int type;
        -:  139:    GsuScalar gsu;
        -:  140:    void *data;
        -:  141:} zleparams[] = {
        -:  142:    { "BUFFER",  PM_SCALAR,  GSU(buffer_gsu), NULL },
        -:  143:    { "BUFFERLINES", PM_INTEGER | PM_READONLY, GSU(bufferlines_gsu),
        -:  144:        NULL },
        -:  145:    { "CONTEXT", PM_SCALAR | PM_READONLY, GSU(context_gsu),
        -:  146:	NULL },
        -:  147:    { "CURSOR",  PM_INTEGER, GSU(cursor_gsu),
        -:  148:	NULL },
        -:  149:    { "CUTBUFFER", PM_SCALAR, GSU(cutbuffer_gsu), NULL },
        -:  150:    { "HISTNO", PM_INTEGER, GSU(histno_gsu), NULL },
        -:  151:    { "KEYMAP", PM_SCALAR | PM_READONLY, GSU(keymap_gsu), NULL },
        -:  152:    { "KEYS", PM_SCALAR | PM_READONLY, GSU(keys_gsu), NULL },
        -:  153:    { "KEYS_QUEUED_COUNT", PM_INTEGER | PM_READONLY, GSU(keys_queued_count_gsu),
        -:  154:      NULL},
        -:  155:    { "killring", PM_ARRAY, GSU(killring_gsu), NULL },
        -:  156:    { "LASTABORTEDSEARCH", PM_SCALAR | PM_READONLY, GSU(lastabortedsearch_gsu),
        -:  157:      NULL },
        -:  158:    { "LASTSEARCH", PM_SCALAR | PM_READONLY, GSU(lastsearch_gsu), NULL },
        -:  159:    { "LASTWIDGET", PM_SCALAR | PM_READONLY, GSU(lastwidget_gsu), NULL },
        -:  160:    { "LBUFFER", PM_SCALAR,  GSU(lbuffer_gsu), NULL },
        -:  161:    { "MARK",  PM_INTEGER, GSU(mark_gsu), NULL },
        -:  162:    { "NUMERIC", PM_INTEGER | PM_UNSET, GSU(numeric_gsu), NULL },
        -:  163:    { "PENDING", PM_INTEGER | PM_READONLY, GSU(pending_gsu), NULL },
        -:  164:    { "POSTDISPLAY", PM_SCALAR, GSU(postdisplay_gsu), NULL },
        -:  165:    { "PREBUFFER",  PM_SCALAR | PM_READONLY,  GSU(prebuffer_gsu), NULL },
        -:  166:    { "PREDISPLAY", PM_SCALAR, GSU(predisplay_gsu), NULL },
        -:  167:    { "RBUFFER", PM_SCALAR,  GSU(rbuffer_gsu), NULL },
        -:  168:    { "REGION_ACTIVE", PM_INTEGER, GSU(region_active_gsu), NULL},
        -:  169:    { "region_highlight", PM_ARRAY, GSU(region_highlight_gsu), NULL },
        -:  170:    { "UNDO_CHANGE_NO", PM_INTEGER | PM_READONLY, GSU(undo_change_no_gsu),
        -:  171:      NULL },
        -:  172:    { "UNDO_LIMIT_NO", PM_INTEGER, GSU(undo_limit_no_gsu), NULL },
        -:  173:    { "WIDGET", PM_SCALAR | PM_READONLY, GSU(widget_gsu), NULL },
        -:  174:    { "WIDGETFUNC", PM_SCALAR | PM_READONLY, GSU(widgetfunc_gsu), NULL },
        -:  175:    { "WIDGETSTYLE", PM_SCALAR | PM_READONLY, GSU(widgetstyle_gsu), NULL },
        -:  176:    { "YANK_START", PM_INTEGER, GSU(yankstart_gsu), NULL },
        -:  177:    { "YANK_END", PM_INTEGER, GSU(yankend_gsu), NULL },
        -:  178:    { "YANK_ACTIVE", PM_INTEGER | PM_READONLY, GSU(yankactive_gsu), NULL },
        -:  179:    { "ISEARCHMATCH_START", PM_INTEGER, GSU(isearchmatchstart_gsu), NULL },
        -:  180:    { "ISEARCHMATCH_END", PM_INTEGER, GSU(isearchmatchend_gsu), NULL },
        -:  181:    { "ISEARCHMATCH_ACTIVE", PM_INTEGER | PM_READONLY, GSU(isearchmatchactive_gsu), NULL },
        -:  182:    { "SUFFIX_START", PM_INTEGER, GSU(suffixstart_gsu), NULL },
        -:  183:    { "SUFFIX_END", PM_INTEGER, GSU(suffixend_gsu), NULL },
        -:  184:    { "SUFFIX_ACTIVE", PM_INTEGER | PM_READONLY, GSU(suffixactive_gsu), NULL },
        -:  185:    { "ZLE_RECURSIVE", PM_INTEGER | PM_READONLY, GSU(recursive_gsu), NULL },
        -:  186:    { "ZLE_STATE", PM_SCALAR | PM_READONLY, GSU(zle_state_gsu), NULL },
        -:  187:    { NULL, 0, NULL, NULL }
        -:  188:};
        -:  189:
        -:  190:/* ro means parameters are readonly, used from completion */
        -:  191:
        -:  192:/**/
        -:  193:mod_export void
    #####:  194:makezleparams(int ro)
        -:  195:{
        -:  196:    struct zleparam *zp;
        -:  197:    Param reg_param;
        -:  198:
    #####:  199:    for(zp = zleparams; zp->name; zp++) {
    #####:  200:	Param pm = createparam(zp->name, (zp->type |PM_SPECIAL|PM_REMOVABLE|
    #####:  201:					  PM_LOCAL|(ro ? PM_READONLY : 0)));
    #####:  202:	if (!pm)
    #####:  203:	    pm = (Param) paramtab->getnode(paramtab, zp->name);
        -:  204:	DPUTS(!pm, "param not set in makezleparams");
        -:  205:
    #####:  206:	pm->level = locallevel + 1;
    #####:  207:	pm->u.data = zp->data;
    #####:  208:	switch(PM_TYPE(zp->type)) {
    #####:  209:	    case PM_SCALAR:
    #####:  210:		pm->gsu.s = zp->gsu;
    #####:  211:		break;
    #####:  212:	    case PM_ARRAY:
    #####:  213:		pm->gsu.a = (GsuArray)zp->gsu;
    #####:  214:		break;
    #####:  215:	    case PM_INTEGER:
    #####:  216:		pm->gsu.i = (GsuInteger)zp->gsu;
    #####:  217:		pm->base = 10;
    #####:  218:		break;
        -:  219:	}
    #####:  220:	if ((zp->type & PM_UNSET) && (zmod.flags & (MOD_MULT|MOD_TMULT)))
    #####:  221:	    pm->node.flags &= ~PM_UNSET;
        -:  222:    }
        -:  223:
    #####:  224:    reg_param = createspecialhash("registers", get_registers, &scan_registers,
        -:  225:	    PM_LOCAL|PM_REMOVABLE);
    #####:  226:    reg_param->gsu.h = &registers_gsu;
    #####:  227:    reg_param->level = locallevel + 1;
    #####:  228:}
        -:  229:
        -:  230:/* Special unset function for ZLE special parameters: act like the standard *
        -:  231: * unset function if this is a user-initiated unset, but nothing is done if *
        -:  232: * the parameter is merely going out of scope (which it will do).           */
        -:  233:
        -:  234:/**/
        -:  235:static void
    #####:  236:zleunsetfn(Param pm, int exp)
        -:  237:{
    #####:  238:    if(exp)
    #####:  239:	stdunsetfn(pm, exp);
    #####:  240:}
        -:  241:
        -:  242:/**/
        -:  243:static void
    #####:  244:set_buffer(UNUSED(Param pm), char *x)
        -:  245:{
    #####:  246:    if(x) {
    #####:  247:	setline(x, 0);
    #####:  248:	zsfree(x);
        -:  249:    } else
    #####:  250:	viinsbegin = zlecs = zlell = 0;
    #####:  251:    fixsuffix();
    #####:  252:    menucmp = 0;
    #####:  253:}
        -:  254:
        -:  255:/**/
        -:  256:static char *
    #####:  257:get_buffer(UNUSED(Param pm))
        -:  258:{
    #####:  259:    if (zlemetaline != 0)
    #####:  260:	return dupstring(zlemetaline);
    #####:  261:    return zlelineasstring(zleline, zlell, 0, NULL, NULL, 1);
        -:  262:}
        -:  263:
        -:  264:/**/
        -:  265:static void
    #####:  266:set_cursor(UNUSED(Param pm), zlong x)
        -:  267:{
    #####:  268:    if(x < 0)
    #####:  269:	zlecs = 0;
    #####:  270:    else if(x > zlell)
    #####:  271:	zlecs = zlell;
        -:  272:    else
    #####:  273:	zlecs = x;
    #####:  274:    fixsuffix();
    #####:  275:    menucmp = 0;
    #####:  276:}
        -:  277:
        -:  278:/**/
        -:  279:static zlong
    #####:  280:get_cursor(UNUSED(Param pm))
        -:  281:{
    #####:  282:    if (zlemetaline != NULL) {
        -:  283:	/* A lot of work for one number, but still... */
        -:  284:	ZLE_STRING_T tmpline;
        -:  285:	int tmpcs, tmpll, tmpsz;
    #####:  286:	char *tmpmetaline = ztrdup(zlemetaline);
    #####:  287:	tmpline = stringaszleline(tmpmetaline, zlemetacs,
        -:  288:				  &tmpll, &tmpsz, &tmpcs);
    #####:  289:	free(tmpmetaline);
    #####:  290:	free(tmpline);
    #####:  291:	return tmpcs;
        -:  292:    }
    #####:  293:    return zlecs;
        -:  294:}
        -:  295:
        -:  296:/**/
        -:  297:static void
    #####:  298:set_mark(UNUSED(Param pm), zlong x)
        -:  299:{
    #####:  300:    if (x < 0)
    #####:  301:	mark = 0;
    #####:  302:    else if (x > zlell)
    #####:  303:	mark = zlell;
        -:  304:    else
    #####:  305:	mark = x;
    #####:  306:}
        -:  307:
        -:  308:/**/
        -:  309:static zlong
    #####:  310:get_mark(UNUSED(Param pm))
        -:  311:{
    #####:  312:    return mark;
        -:  313:}
        -:  314:
        -:  315:/**/
        -:  316:static void
    #####:  317:set_region_active(UNUSED(Param pm), zlong x)
        -:  318:{
    #####:  319:    region_active = (int)!!x;
    #####:  320:}
        -:  321:
        -:  322:/**/
        -:  323:static zlong
    #####:  324:get_region_active(UNUSED(Param pm))
        -:  325:{
    #####:  326:    return region_active;
        -:  327:}
        -:  328:
        -:  329:/**/
        -:  330:static void
    #####:  331:set_lbuffer(UNUSED(Param pm), char *x)
        -:  332:{
        -:  333:    ZLE_STRING_T y;
        -:  334:    int len;
        -:  335:
    #####:  336:    if (x && *x != ZWC('\0'))
    #####:  337:	y = stringaszleline(x, 0, &len, NULL, NULL);
        -:  338:    else
    #####:  339:	y = ZWS(""), len = 0;
    #####:  340:    sizeline(zlell - zlecs + len);
    #####:  341:    ZS_memmove(zleline + len, zleline + zlecs, zlell - zlecs);
    #####:  342:    ZS_memcpy(zleline, y, len);
    #####:  343:    zlell = zlell - zlecs + len;
    #####:  344:    zlecs = len;
    #####:  345:    zsfree(x);
    #####:  346:    if (len)
    #####:  347:	free(y);
    #####:  348:    fixsuffix();
    #####:  349:    menucmp = 0;
    #####:  350:}
        -:  351:
        -:  352:/**/
        -:  353:static char *
    #####:  354:get_lbuffer(UNUSED(Param pm))
        -:  355:{
    #####:  356:    if (zlemetaline != NULL)
    #####:  357:	return dupstrpfx(zlemetaline, zlemetacs);
    #####:  358:    return zlelineasstring(zleline, zlecs, 0, NULL, NULL, 1);
        -:  359:}
        -:  360:
        -:  361:/**/
        -:  362:static void
    #####:  363:set_rbuffer(UNUSED(Param pm), char *x)
        -:  364:{
        -:  365:    ZLE_STRING_T y;
        -:  366:    int len;
        -:  367:
    #####:  368:    if (x && *x != ZWC('\0'))
    #####:  369:	y = stringaszleline(x, 0, &len, NULL, NULL);
        -:  370:    else
    #####:  371:	y = ZWS(""), len = 0;
    #####:  372:    sizeline(zlell = zlecs + len);
    #####:  373:    ZS_memcpy(zleline + zlecs, y, len);
    #####:  374:    zsfree(x);
    #####:  375:    if (len)
    #####:  376:	free(y);
    #####:  377:    fixsuffix();
    #####:  378:    menucmp = 0;
    #####:  379:}
        -:  380:
        -:  381:/**/
        -:  382:static char *
    #####:  383:get_rbuffer(UNUSED(Param pm))
        -:  384:{
    #####:  385:    if (zlemetaline != NULL)
    #####:  386:	return dupstrpfx((char *)zlemetaline + zlemetacs,
        -:  387:			 zlemetall - zlemetacs);
    #####:  388:    return zlelineasstring(zleline + zlecs, zlell - zlecs, 0, NULL, NULL, 1);
        -:  389:}
        -:  390:
        -:  391:/**/
        -:  392:static char *
    #####:  393:get_prebuffer(UNUSED(Param pm))
        -:  394:{
        -:  395:    /*
        -:  396:     * Use the editing current history line, not necessarily the
        -:  397:     * history line that's currently in the history mechanism
        -:  398:     * since our line may have been stacked.
        -:  399:     */
    #####:  400:    if (zle_chline) {
        -:  401:	/* zle_chline was NULL terminated when pushed onto the stack */
    #####:  402:	return dupstring(zle_chline);
        -:  403:    }
    #####:  404:    if (chline) {
        -:  405:	/* hptr is valid */
    #####:  406:	return dupstrpfx(chline, hptr - chline);
        -:  407:    }
    #####:  408:    return dupstring("");
        -:  409:}
        -:  410:
        -:  411:/**/
        -:  412:static char *
    #####:  413:get_widget(UNUSED(Param pm))
        -:  414:{
    #####:  415:    return bindk ? bindk->nam : "";
        -:  416:}
        -:  417:
        -:  418:/**/
        -:  419:static char *
    #####:  420:get_widgetfunc(UNUSED(Param pm))
        -:  421:{
    #####:  422:    Widget widget = bindk->widget;
    #####:  423:    int flags = widget->flags;
        -:  424:
    #####:  425:    if (flags & WIDGET_INT)
    #####:  426:	return ".internal";	/* Don't see how this can ever be returned... */
    #####:  427:    if (flags & WIDGET_NCOMP)
    #####:  428:	return widget->u.comp.func;
    #####:  429:    return widget->u.fnnam;
        -:  430:}
        -:  431:
        -:  432:/**/
        -:  433:static char *
    #####:  434:get_widgetstyle(UNUSED(Param pm))
        -:  435:{
    #####:  436:    Widget widget = bindk->widget;
    #####:  437:    int flags = widget->flags;
        -:  438:
    #####:  439:    if (flags & WIDGET_INT)
    #####:  440:	return ".internal";	/* Don't see how this can ever be returned... */
    #####:  441:    if (flags & WIDGET_NCOMP)
    #####:  442:	return widget->u.comp.wid;
    #####:  443:    return "";
        -:  444:}
        -:  445:
        -:  446:/**/
        -:  447:static char *
    #####:  448:get_lwidget(UNUSED(Param pm))
        -:  449:{
    #####:  450:    return (lbindk ? lbindk->nam : "");
        -:  451:}
        -:  452:
        -:  453:/**/
        -:  454:static char *
    #####:  455:get_keymap(UNUSED(Param pm))
        -:  456:{
    #####:  457:    return dupstring(curkeymapname);
        -:  458:}
        -:  459:
        -:  460:/**/
        -:  461:static char *
    #####:  462:get_keys(UNUSED(Param pm))
        -:  463:{
    #####:  464:    return keybuf;
        -:  465:}
        -:  466:
        -:  467:/**/
        -:  468:static zlong
    #####:  469:get_keys_queued_count(UNUSED(Param pm))
        -:  470:{
    #####:  471:    return kungetct;
        -:  472:}
        -:  473:
        -:  474:/**/
        -:  475:static void
    #####:  476:set_numeric(UNUSED(Param pm), zlong x)
        -:  477:{
    #####:  478:    zmult = x;
    #####:  479:    zmod.flags = MOD_MULT;
    #####:  480:}
        -:  481:
        -:  482:/**/
        -:  483:static zlong
    #####:  484:get_numeric(UNUSED(Param pm))
        -:  485:{
    #####:  486:    return zmult;
        -:  487:}
        -:  488:
        -:  489:/**/
        -:  490:static void
    #####:  491:unset_numeric(Param pm, int exp)
        -:  492:{
    #####:  493:    if (exp) {
    #####:  494:	stdunsetfn(pm, exp);
    #####:  495:	zmod.flags = 0;
    #####:  496:	zmult = 1;
        -:  497:    }
    #####:  498:}
        -:  499:
        -:  500:/**/
        -:  501:static void
    #####:  502:set_histno(UNUSED(Param pm), zlong x)
        -:  503:{
        -:  504:    Histent he;
        -:  505:
    #####:  506:    if (!(he = quietgethist((int)x)))
    #####:  507:	return;
    #####:  508:    zle_setline(he);
        -:  509:}
        -:  510:
        -:  511:/**/
        -:  512:static zlong
    #####:  513:get_histno(UNUSED(Param pm))
        -:  514:{
    #####:  515:    return histline;
        -:  516:}
        -:  517:
        -:  518:/**/
        -:  519:static zlong
    #####:  520:get_bufferlines(UNUSED(Param pm))
        -:  521:{
    #####:  522:    return nlnct;
        -:  523:}
        -:  524:
        -:  525:/**/
        -:  526:static zlong
    #####:  527:get_pending(UNUSED(Param pm))
        -:  528:{
    #####:  529:    return noquery(0);
        -:  530:}
        -:  531:
        -:  532:/**/
        -:  533:static zlong
    #####:  534:get_recursive(UNUSED(Param pm))
        -:  535:{
    #####:  536:    return zle_recursive;
        -:  537:}
        -:  538:
        -:  539:/**/
        -:  540:static zlong
    #####:  541:get_yankstart(UNUSED(Param pm))
        -:  542:{
    #####:  543:    return yankb;
        -:  544:}
        -:  545:
        -:  546:/**/
        -:  547:static zlong
    #####:  548:get_yankend(UNUSED(Param pm))
        -:  549:{
    #####:  550:    return yanke;
        -:  551:}
        -:  552:
        -:  553:/**/
        -:  554:static zlong
    #####:  555:get_yankactive(UNUSED(Param pm))
        -:  556:{
    #####:  557:    return !!(lastcmd & ZLE_YANK) + !!(lastcmd & ZLE_YANKAFTER);
        -:  558:}
        -:  559:
        -:  560:/**/
        -:  561:static void
    #####:  562:set_yankstart(UNUSED(Param pm), zlong i)
        -:  563:{
    #####:  564:    yankb = i;
    #####:  565:}
        -:  566:
        -:  567:/**/
        -:  568:static void
    #####:  569:set_yankend(UNUSED(Param pm), zlong i)
        -:  570:{
    #####:  571:    yanke = i;
    #####:  572:}
        -:  573:
        -:  574:/**/
        -:  575:static zlong
    #####:  576:get_isearchmatchstart(UNUSED(Param pm))
        -:  577:{
    #####:  578:    return isearch_startpos;
        -:  579:}
        -:  580:
        -:  581:/**/
        -:  582:static zlong
    #####:  583:get_isearchmatchend(UNUSED(Param pm))
        -:  584:{
    #####:  585:    return isearch_endpos;
        -:  586:}
        -:  587:
        -:  588:/**/
        -:  589:static zlong
    #####:  590:get_isearchmatchactive(UNUSED(Param pm))
        -:  591:{
    #####:  592:    return isearch_active;
        -:  593:}
        -:  594:
        -:  595:/**/
        -:  596:static zlong
    #####:  597:get_suffixstart(UNUSED(Param pm))
        -:  598:{
    #####:  599:    return zlecs - suffixlen;
        -:  600:}
        -:  601:
        -:  602:/**/
        -:  603:static zlong
    #####:  604:get_suffixend(UNUSED(Param pm))
        -:  605:{
    #####:  606:    return zlecs;
        -:  607:}
        -:  608:
        -:  609:/**/
        -:  610:static zlong
    #####:  611:get_suffixactive(UNUSED(Param pm))
        -:  612:{
    #####:  613:    return suffixlen;
        -:  614:}
        -:  615:
        -:  616:/**/
        -:  617:static char *
    #####:  618:get_cutbuffer(UNUSED(Param pm))
        -:  619:{
    #####:  620:    if (cutbuf.buf)
    #####:  621:	return zlelineasstring(cutbuf.buf, cutbuf.len, 0, NULL, NULL, 1);
    #####:  622:    return "";
        -:  623:}
        -:  624:
        -:  625:
        -:  626:/**/
        -:  627:static void
    #####:  628:set_cutbuffer(UNUSED(Param pm), char *x)
        -:  629:{
    #####:  630:    if (cutbuf.buf)
    #####:  631:	free(cutbuf.buf);
    #####:  632:    cutbuf.flags = 0;
    #####:  633:    if (x) {
        -:  634:	int n;
    #####:  635:	cutbuf.buf = stringaszleline(x, 0, &n, NULL, NULL);
    #####:  636:	cutbuf.len = n;
    #####:  637:	free(x);
        -:  638:    } else {
    #####:  639:	cutbuf.buf = NULL;
    #####:  640:	cutbuf.len = 0;
        -:  641:    }
    #####:  642:}
        -:  643:
        -:  644:/**/
        -:  645:static void
    #####:  646:unset_cutbuffer(Param pm, int exp)
        -:  647:{
    #####:  648:    if (exp) {
    #####:  649:	stdunsetfn(pm, exp);
    #####:  650:	if (cutbuf.buf) {
    #####:  651:	    free(cutbuf.buf);
    #####:  652:	    cutbuf.buf = NULL;
    #####:  653:	    cutbuf.len = 0;
        -:  654:	}
        -:  655:    }
    #####:  656:}
        -:  657:
        -:  658:/**/
        -:  659:static void
    #####:  660:set_killring(UNUSED(Param pm), char **x)
        -:  661:{
        -:  662:    int kcnt;
        -:  663:    Cutbuffer kptr;
        -:  664:    char **p;
        -:  665:
    #####:  666:    if (kring) {
    #####:  667:	for (kptr = kring, kcnt = 0; kcnt < kringsize; kcnt++, kptr++)
    #####:  668:	    if (kptr->buf)
    #####:  669:		free(kptr->buf);
    #####:  670:	zfree(kring, kringsize * sizeof(struct cutbuffer));
    #####:  671:	kring = NULL;
    #####:  672:	kringsize = kringnum = 0;
        -:  673:    }
    #####:  674:    if (x) {
        -:  675:	/*
        -:  676:	 * Insert the elements into the kill ring.
        -:  677:	 * Regardless of the old order, we number it with the current
        -:  678:	 * entry first.
        -:  679:	 *
        -:  680:	 * Be careful to add elements by looping backwards; this
        -:  681:	 * fits in with how we cycle the ring.
        -:  682:	 */
    #####:  683:	int kpos = 0;
    #####:  684:	kringsize = arrlen(x);
    #####:  685:	if (kringsize != 0) {
    #####:  686:	    kring = (Cutbuffer)zshcalloc(kringsize * sizeof(struct cutbuffer));
    #####:  687:	    for (p = x; *p; p++) {
    #####:  688:		int n, len = strlen(*p);
    #####:  689:		kptr = kring + kpos;
        -:  690:
    #####:  691:		kptr->buf = stringaszleline(*p, 0, &n, NULL, NULL);
    #####:  692:		kptr->len = n;
        -:  693:
    #####:  694:		zfree(*p, len+1);
    #####:  695:		kpos = (kpos + kringsize -1 ) % kringsize;
        -:  696:	    }
        -:  697:	}
    #####:  698:	free(x);
        -:  699:    }
    #####:  700:}
        -:  701:
        -:  702:/**/
        -:  703:static char **
    #####:  704:get_killring(UNUSED(Param pm))
        -:  705:{
        -:  706:    /*
        -:  707:     * Return the kill ring with the most recently killed first.
        -:  708:     * Since the kill ring is no longer a fixed length, we return
        -:  709:     * all entries even if empty.
        -:  710:     */
        -:  711:    int kpos, kcnt;
        -:  712:    char **ret, **p;
        -:  713:
        -:  714:    /* Supposed to work even if kring is NULL */
    #####:  715:    if (!kring) {
    #####:  716:	kringsize = KRINGCTDEF;
    #####:  717:	kring = (Cutbuffer)zshcalloc(kringsize * sizeof(struct cutbuffer));
        -:  718:    }
        -:  719:
    #####:  720:    p = ret = (char **)zhalloc((kringsize+1) * sizeof(char *));
        -:  721:
    #####:  722:    for (kpos = kringnum, kcnt = 0; kcnt < kringsize; kcnt++) {
    #####:  723:	Cutbuffer kptr = kring + kpos;
    #####:  724:	if (kptr->buf)
        -:  725:	{
        -:  726:	    /* Allocate on heap. */
    #####:  727:	    *p++ = zlelineasstring(kptr->buf, kptr->len, 0, NULL, NULL, 1);
        -:  728:	}
        -:  729:	else
    #####:  730:	    *p++ = dupstring("");
    #####:  731:	kpos = (kpos + kringsize - 1) % kringsize;
        -:  732:    }
    #####:  733:    *p = NULL;
        -:  734:
    #####:  735:    return ret;
        -:  736:}
        -:  737:
        -:  738:/**/
        -:  739:static void
    #####:  740:unset_killring(Param pm, int exp)
        -:  741:{
    #####:  742:    if (exp) {
    #####:  743:	set_killring(pm, NULL);
    #####:  744:	stdunsetfn(pm, exp);
        -:  745:    }
    #####:  746:}
        -:  747:
        -:  748:/**/
        -:  749:static void
    #####:  750:set_register(Param pm, char *value)
        -:  751:{
    #####:  752:    int n = 0;
    #####:  753:    int offset = -1;
        -:  754:    Cutbuffer vbuf;
        -:  755:
    #####:  756:    if (!pm->node.nam || pm->node.nam[1])
        -:  757:	;
    #####:  758:    else if (*pm->node.nam >= '0' && *pm->node.nam <= '9')
    #####:  759:	offset = '0' - 26;
    #####:  760:    else if (*pm->node.nam >= 'a' && *pm->node.nam <= 'z')
    #####:  761:	offset = 'a';
        -:  762:
    #####:  763:    if (offset == -1) {
    #####:  764:	zerr("invalid zle register: %s", pm->node.nam);
    #####:  765:	return;
        -:  766:    }
        -:  767:
    #####:  768:    vbuf = &vibuf[*pm->node.nam - offset];
    #####:  769:    if (*value)
    #####:  770:	vbuf->buf = stringaszleline(value, 0, &n, NULL, NULL);
    #####:  771:    vbuf->len = n;
        -:  772:}
        -:  773:
        -:  774:/**/
        -:  775:static void
    #####:  776:unset_register(Param pm, UNUSED(int exp))
        -:  777:{
    #####:  778:    set_register(pm, "");
    #####:  779:}
        -:  780:
        -:  781:/**/
        -:  782:static void
    #####:  783:scan_registers(UNUSED(HashTable ht), ScanFunc func, int flags)
        -:  784:{
        -:  785:    int i;
        -:  786:    char ch;
        -:  787:    struct param pm;
        -:  788:
    #####:  789:    memset((void *)&pm, 0, sizeof(struct param));
    #####:  790:    pm.node.flags = PM_SCALAR | PM_READONLY;
    #####:  791:    pm.gsu.s = &nullsetscalar_gsu;
        -:  792:
    #####:  793:    for (i = 0, ch = 'a'; i < 36; i++) {
    #####:  794:	pm.node.nam = zhalloc(2);
    #####:  795:	*pm.node.nam = ch;
    #####:  796:	pm.node.nam[1] = '\0';
    #####:  797:	pm.u.str = zlelineasstring(vibuf[i].buf, vibuf[i].len, 0, NULL, NULL, 1);
    #####:  798:	func(&pm.node, flags);
    #####:  799:	if (ch++ == 'z')
    #####:  800:	    ch = '0';
        -:  801:    }
    #####:  802:}
        -:  803:
        -:  804:/**/
        -:  805:static HashNode
    #####:  806:get_registers(UNUSED(HashTable ht), const char *name)
        -:  807:{
    #####:  808:    Param pm = (Param) hcalloc(sizeof(struct param));
    #####:  809:    int vbuf = -1;
    #####:  810:    pm->node.nam = dupstring(name);
    #####:  811:    pm->node.flags = PM_SCALAR;
    #####:  812:    pm->gsu.s = &register_gsu;
        -:  813:
    #####:  814:    if (name[1])
        -:  815:       ;
    #####:  816:    else if (*name >= '0' && *name <= '9')
    #####:  817:	vbuf = *name - '0' + 26;
    #####:  818:    else if (*name >= 'a' && *name <= 'z')
    #####:  819:	vbuf = *name - 'a';
        -:  820:
    #####:  821:    if (vbuf == -1) {
    #####:  822:	pm->u.str = dupstring("");
    #####:  823:	pm->node.flags |= (PM_UNSET|PM_SPECIAL);
        -:  824:    } else
    #####:  825:	pm->u.str = zlelineasstring(vibuf[vbuf].buf, vibuf[vbuf].len, 0, NULL, NULL, 1);
        -:  826:
    #####:  827:    return &pm->node;
        -:  828:}
        -:  829:
        -:  830:/**/
        -:  831:static void
    #####:  832:set_registers(Param pm, HashTable ht)
        -:  833:{
        -:  834:    int i;
        -:  835:    HashNode hn;
        -:  836:
    #####:  837:    if (!ht)
    #####:  838:        return;
        -:  839:
    #####:  840:    for (i = 0; i < ht->hsize; i++)
    #####:  841:        for (hn = ht->nodes[i]; hn; hn = hn->next) {
        -:  842:            struct value v;
    #####:  843:            v.isarr = v.flags = v.start = 0;
    #####:  844:            v.end = -1;
    #####:  845:            v.arr = NULL;
    #####:  846:            v.pm = (Param) hn;
        -:  847:
    #####:  848:	    set_register(v.pm, getstrvalue(&v));
        -:  849:        }
    #####:  850:    if (ht != pm->u.hash)
    #####:  851:	deleteparamtable(ht);
        -:  852:}
        -:  853:
        -:  854:/**/
        -:  855:static void
    #####:  856:unset_registers(Param pm, int exp)
        -:  857:{
    #####:  858:    stdunsetfn(pm, exp);
    #####:  859:    deletehashtable(pm->u.hash);
    #####:  860:    pm->u.hash = NULL;
    #####:  861:}
        -:  862:
        -:  863:static void
    #####:  864:set_prepost(ZLE_STRING_T *textvar, int *lenvar, char *x)
        -:  865:{
    #####:  866:    if (*lenvar) {
    #####:  867:	free(*textvar);
    #####:  868:	*textvar = NULL;
    #####:  869:	*lenvar = 0;
        -:  870:    }
    #####:  871:    if (x) {
    #####:  872:	*textvar = stringaszleline(x, 0, lenvar, NULL, NULL);
    #####:  873:	free(x);
        -:  874:    }
    #####:  875:}
        -:  876:
        -:  877:static char *
    #####:  878:get_prepost(ZLE_STRING_T text, int len)
        -:  879:{
    #####:  880:    return zlelineasstring(text, len, 0, NULL, NULL, 1);
        -:  881:}
        -:  882:
        -:  883:/**/
        -:  884:static void
    #####:  885:set_predisplay(UNUSED(Param pm), char *x)
        -:  886:{
    #####:  887:    set_prepost(&predisplay, &predisplaylen, x);
    #####:  888:}
        -:  889:
        -:  890:/**/
        -:  891:static char *
    #####:  892:get_predisplay(UNUSED(Param pm))
        -:  893:{
    #####:  894:    return get_prepost(predisplay, predisplaylen);
        -:  895:}
        -:  896:
        -:  897:/**/
        -:  898:static void
    #####:  899:set_postdisplay(UNUSED(Param pm), char *x)
        -:  900:{
    #####:  901:    set_prepost(&postdisplay, &postdisplaylen, x);
    #####:  902:}
        -:  903:
        -:  904:/**/
        -:  905:static char *
    #####:  906:get_postdisplay(UNUSED(Param pm))
        -:  907:{
    #####:  908:    return get_prepost(postdisplay, postdisplaylen);
        -:  909:}
        -:  910:
        -:  911:/**/
        -:  912:void
    #####:  913:free_prepostdisplay(void)
        -:  914:{
    #####:  915:    if (predisplaylen)
    #####:  916:	set_prepost(&predisplay, &predisplaylen, NULL);
    #####:  917:    if (postdisplaylen)
    #####:  918:	set_prepost(&postdisplay, &postdisplaylen, NULL);
    #####:  919:}
        -:  920:
        -:  921:/**/
        -:  922:static char *
    #####:  923:get_lasearch(UNUSED(Param pm))
        -:  924:{
    #####:  925:    if (previous_aborted_search)
    #####:  926:	return previous_aborted_search;
    #####:  927:    return "";
        -:  928:}
        -:  929:
        -:  930:/**/
        -:  931:static char *
    #####:  932:get_lsearch(UNUSED(Param pm))
        -:  933:{
    #####:  934:    if (previous_search)
    #####:  935:	return previous_search;
    #####:  936:    return "";
        -:  937:}
        -:  938:
        -:  939:/**/
        -:  940:static char *
    #####:  941:get_context(UNUSED(Param pm))
        -:  942:{
    #####:  943:    switch (zlecontext) {
    #####:  944:    case ZLCON_LINE_CONT:
    #####:  945:	return "cont";
        -:  946:	break;
        -:  947:
    #####:  948:    case ZLCON_SELECT:
    #####:  949:	return "select";
        -:  950:	break;
        -:  951:
    #####:  952:    case ZLCON_VARED:
    #####:  953:	return "vared";
        -:  954:	break;
        -:  955:
    #####:  956:    case ZLCON_LINE_START:
        -:  957:    default:
    #####:  958:	return "start";
        -:  959:	break;
        -:  960:    }
        -:  961:}
        -:  962:
        -:  963:/**/
        -:  964:static char *
    #####:  965:get_zle_state(UNUSED(Param pm))
        -:  966:{
    #####:  967:    char *zle_state = NULL, *ptr = NULL, **arr = NULL;
    #####:  968:    int itp, istate, len = 0;
        -:  969:
        -:  970:    /*
        -:  971:     * Substrings are sorted at the end, so the user can
        -:  972:     * easily match against this parameter:
        -:  973:     * if [[ $ZLE_STATE == *bar*foo*zonk* ]]; then ...; fi
        -:  974:     */
    #####:  975:    for (itp = 0; itp < 2; itp++) {
        -:  976:	char *str;
    #####:  977:	for (istate = 0; istate < 2; istate++) {
        -:  978:	    int slen;
    #####:  979:	    switch (istate) {
    #####:  980:	    case 0:
    #####:  981:		if (insmode) {
    #####:  982:		    str = "insert";
        -:  983:		} else {
    #####:  984:		    str = "overwrite";
        -:  985:		}
    #####:  986:		break;
    #####:  987:	    case 1:
    #####:  988:		if (hist_skip_flags & HIST_FOREIGN) {
    #####:  989:		    str = "localhistory";
        -:  990:		} else {
    #####:  991:		    str = "globalhistory";
        -:  992:		}
    #####:  993:		break;
        -:  994:
    #####:  995:	    default:
    #####:  996:		str = "";
        -:  997:	    }
    #####:  998:	    slen = strlen(str);
    #####:  999:	    if (itp == 0) {
        -: 1000:		/* Accumulating length */
    #####: 1001:		if (istate)
    #####: 1002:		    len++;	/* for space */
    #####: 1003:		len += slen;
        -: 1004:	    } else {
        -: 1005:		/* Accumulating string */
    #####: 1006:		if (istate)
    #####: 1007:		    *ptr++ = ':';
    #####: 1008:		memcpy(ptr, str, slen);
    #####: 1009:		ptr += slen;
        -: 1010:	    }
        -: 1011:	}
    #####: 1012:	if (itp == 0) {
    #####: 1013:	    len++;		/* terminating NULL */
    #####: 1014:	    ptr = zle_state = (char *)zhalloc(len);
        -: 1015:	} else {
    #####: 1016:	    *ptr = '\0';
        -: 1017:	}
        -: 1018:    }
        -: 1019:
    #####: 1020:    arr = colonsplit(zle_state, 0);
    #####: 1021:    strmetasort(arr, SORTIT_ANYOLDHOW, NULL);
    #####: 1022:    zle_state = zjoin(arr, ' ', 1);
    #####: 1023:    freearray(arr);
        -: 1024:
    #####: 1025:    return zle_state;
        -: 1026:}
