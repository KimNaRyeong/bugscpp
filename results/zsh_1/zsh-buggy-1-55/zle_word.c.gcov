        -:    0:Source:zle_word.c
        -:    0:Graph:/home/workspace/Src/Zle/zle_word.gcno
        -:    0:Data:/home/workspace/Src/Zle/zle_word.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:/*
        -:    2: * zle_word.c - word-related editor functions
        -:    3: *
        -:    4: * This file is part of zsh, the Z shell.
        -:    5: *
        -:    6: * Copyright (c) 1992-1997 Paul Falstad
        -:    7: * All rights reserved.
        -:    8: *
        -:    9: * Permission is hereby granted, without written agreement and without
        -:   10: * license or royalty fees, to use, copy, modify, and distribute this
        -:   11: * software and to distribute modified versions of this software for any
        -:   12: * purpose, provided that the above copyright notice and the following
        -:   13: * two paragraphs appear in all copies of this software.
        -:   14: *
        -:   15: * In no event shall Paul Falstad or the Zsh Development Group be liable
        -:   16: * to any party for direct, indirect, special, incidental, or consequential
        -:   17: * damages arising out of the use of this software and its documentation,
        -:   18: * even if Paul Falstad and the Zsh Development Group have been advised of
        -:   19: * the possibility of such damage.
        -:   20: *
        -:   21: * Paul Falstad and the Zsh Development Group specifically disclaim any
        -:   22: * warranties, including, but not limited to, the implied warranties of
        -:   23: * merchantability and fitness for a particular purpose.  The software
        -:   24: * provided hereunder is on an "as is" basis, and Paul Falstad and the
        -:   25: * Zsh Development Group have no obligation to provide maintenance,
        -:   26: * support, updates, enhancements, or modifications.
        -:   27: *
        -:   28: */
        -:   29:
        -:   30:#include "zle.mdh"
        -:   31:#include "zle_word.pro"
        -:   32:
        -:   33:/*
        -:   34: * In principle we shouldn't consider a zero-length punctuation
        -:   35: * character (i.e. a modifier of some sort) part of the word unless
        -:   36: * the base character has.  However, we only consider them part of
        -:   37: * a word if we so consider all alphanumerics, so the distinction
        -:   38: * only applies if the characters are modifying something they probably
        -:   39: * ought not to be modifying.  It's not really clear we need to
        -:   40: * be clever about this not very useful case.
        -:   41: */
        -:   42:
        -:   43:/**/
        -:   44:int
    #####:   45:forwardword(char **args)
        -:   46:{
    #####:   47:    int n = zmult;
        -:   48:
    #####:   49:    if (n < 0) {
        -:   50:	int ret;
    #####:   51:	zmult = -n;
    #####:   52:	ret = backwardword(args);
    #####:   53:	zmult = n;
    #####:   54:	return ret;
        -:   55:    }
    #####:   56:    while (n--) {
    #####:   57:	while (zlecs != zlell && ZC_iword(zleline[zlecs]))
    #####:   58:	    INCCS();
    #####:   59:	if (wordflag && !n)
    #####:   60:	    return 0;
    #####:   61:	while (zlecs != zlell && !ZC_iword(zleline[zlecs]))
    #####:   62:	    INCCS();
        -:   63:    }
    #####:   64:    return 0;
        -:   65:}
        -:   66:
        -:   67:/*
        -:   68: * class of character (for vi-mode word motion)
        -:   69: * 0: blank,  1: alnum or _,  2: punctuation,  3: the others
        -:   70: */
        -:   71:
        -:   72:/**/
        -:   73:int
      649:   74:wordclass(ZLE_CHAR_T x)
        -:   75:{
      825:   76:    return (ZC_iblank(x) ? 0 : ((ZC_ialnum(x) || (ZWC('_') == x)) ? 1 :
      176:   77:		ZC_ipunct(x) ? 2 : 3));
        -:   78:}
        -:   79:
        -:   80:/**/
        -:   81:int
       21:   82:viforwardword(char **args)
        -:   83:{
       21:   84:    int n = zmult;
        -:   85:
       21:   86:    if (n < 0) {
        -:   87:	int ret;
    #####:   88:	zmult = -n;
    #####:   89:	ret = vibackwardword(args);
    #####:   90:	zmult = n;
    #####:   91:	return ret;
        -:   92:    }
       73:   93:    while (n--) {
        -:   94:	int nl;
       31:   95:	int cc = wordclass(zleline[zlecs]);
      144:   96:	while (zlecs != zlell && wordclass(zleline[zlecs]) == cc) {
       82:   97:	    INCCS();
        -:   98:	}
       31:   99:	if (wordflag && !n)
    #####:  100:	    return 0;
       31:  101:	nl = (zleline[zlecs] == ZWC('\n'));
       92:  102:	while (zlecs != zlell && nl < 2 && ZC_inblank(zleline[zlecs])) {
       30:  103:	    INCCS();
       30:  104:	    nl += (zleline[zlecs] == ZWC('\n'));
        -:  105:	}
        -:  106:    }
       21:  107:    return 0;
        -:  108:}
        -:  109:
        -:  110:/**/
        -:  111:int
        8:  112:viforwardblankword(char **args)
        -:  113:{
        8:  114:    int n = zmult;
        -:  115:
        8:  116:    if (n < 0) {
        -:  117:	int ret;
    #####:  118:	zmult = -n;
    #####:  119:	ret = vibackwardblankword(args);
    #####:  120:	zmult = n;
    #####:  121:	return ret;
        -:  122:    }
       24:  123:    while (n--) {
        -:  124:	int nl;
       35:  125:	while (zlecs != zlell && !ZC_inblank(zleline[zlecs]))
       19:  126:	    INCCS();
        8:  127:	if (wordflag && !n)
    #####:  128:	    return 0;
        8:  129:	nl = (zleline[zlecs] == ZWC('\n'));
       27:  130:	while (zlecs != zlell && nl < 2 && ZC_inblank(zleline[zlecs])) {
       11:  131:	    INCCS();
       11:  132:	    nl += (zleline[zlecs] == ZWC('\n'));
        -:  133:	}
        -:  134:    }
        8:  135:    return 0;
        -:  136:}
        -:  137:
        -:  138:/**/
        -:  139:int
    #####:  140:emacsforwardword(char **args)
        -:  141:{
    #####:  142:    int n = zmult;
        -:  143:
    #####:  144:    if (n < 0) {
        -:  145:	int ret;
    #####:  146:	zmult = -n;
    #####:  147:	ret = emacsbackwardword(args);
    #####:  148:	zmult = n;
    #####:  149:	return ret;
        -:  150:    }
    #####:  151:    while (n--) {
    #####:  152:	while (zlecs != zlell && !ZC_iword(zleline[zlecs]))
    #####:  153:	    INCCS();
    #####:  154:	if (wordflag && !n)
    #####:  155:	    return 0;
    #####:  156:	while (zlecs != zlell && ZC_iword(zleline[zlecs]))
    #####:  157:	    INCCS();
        -:  158:    }
    #####:  159:    return 0;
        -:  160:}
        -:  161:
        -:  162:/**/
        -:  163:int
        5:  164:viforwardblankwordend(char **args)
        -:  165:{
        5:  166:    int n = zmult;
        -:  167:
        5:  168:    if (n < 0) {
        -:  169:	int ret;
    #####:  170:	zmult = -n;
    #####:  171:	ret = vibackwardblankwordend(args);
    #####:  172:	zmult = n;
    #####:  173:	return ret;
        -:  174:    }
       15:  175:    while (n--) {
       20:  176:	while (zlecs != zlell) {
       15:  177:	    int pos = zlecs;
       15:  178:	    INCPOS(pos);
       15:  179:	    if (!ZC_inblank(zleline[pos]))
        5:  180:		break;
       10:  181:	    zlecs = pos;
        -:  182:	}
       25:  183:	while (zlecs != zlell) {
       19:  184:	    int pos = zlecs;
       19:  185:	    INCPOS(pos);
       19:  186:	    if (ZC_inblank(zleline[pos]))
        4:  187:		break;
       15:  188:	    zlecs = pos;
        -:  189:	}
        -:  190:    }
        5:  191:    if (zlecs != zlell && virangeflag)
    #####:  192:	INCCS();
        5:  193:    return 0;
        -:  194:}
        -:  195:
        -:  196:/**/
        -:  197:int
       15:  198:viforwardwordend(char **args)
        -:  199:{
       15:  200:    int n = zmult;
        -:  201:
       15:  202:    if (n < 0) {
        -:  203:	int ret;
    #####:  204:	zmult = -n;
    #####:  205:	ret = vibackwardwordend(args);
    #####:  206:	zmult = n;
    #####:  207:	return ret;
        -:  208:    }
       45:  209:    while (n--) {
        -:  210:	int pos;
       40:  211:	while (zlecs != zlell) {
       25:  212:	    pos = zlecs;
       25:  213:	    INCPOS(pos);
       25:  214:	    if (!ZC_inblank(zleline[pos]))
       15:  215:		break;
       10:  216:	    zlecs = pos;
        -:  217:	}
       15:  218:	if (zlecs != zlell) {
        -:  219:	    int cc;
       15:  220:	    pos = zlecs;
       15:  221:	    INCPOS(pos);
       15:  222:	    cc = wordclass(zleline[pos]);
        -:  223:	    for (;;) {
       55:  224:		zlecs = pos;
       35:  225:		if (zlecs == zlell)
    #####:  226:		    break;
       35:  227:		INCPOS(pos);
       35:  228:		if (wordclass(zleline[pos]) != cc)
       15:  229:			break;
        -:  230:	    }
        -:  231:	}
        -:  232:    }
       15:  233:    if (zlecs != zlell && virangeflag)
        3:  234:	INCCS();
       15:  235:    return 0;
        -:  236:}
        -:  237:
        -:  238:/**/
        -:  239:int
    #####:  240:backwardword(char **args)
        -:  241:{
    #####:  242:    int n = zmult;
        -:  243:
    #####:  244:    if (n < 0) {
        -:  245:	int ret;
    #####:  246:	zmult = -n;
    #####:  247:	ret = forwardword(args);
    #####:  248:	zmult = n;
    #####:  249:	return ret;
        -:  250:    }
    #####:  251:    while (n--) {
    #####:  252:	while (zlecs) {
    #####:  253:	    int pos = zlecs;
    #####:  254:	    DECPOS(pos);
    #####:  255:	    if (ZC_iword(zleline[pos]))
    #####:  256:		break;
    #####:  257:	    zlecs = pos;
        -:  258:	}
    #####:  259:	while (zlecs) {
    #####:  260:	    int pos = zlecs;
    #####:  261:	    DECPOS(pos);
    #####:  262:	    if (!ZC_iword(zleline[pos]))
    #####:  263:		break;
    #####:  264:	    zlecs = pos;
        -:  265:	}
        -:  266:    }
    #####:  267:    return 0;
        -:  268:}
        -:  269:
        -:  270:/**/
        -:  271:int
       21:  272:vibackwardword(char **args)
        -:  273:{
       21:  274:    int n = zmult;
        -:  275:
       21:  276:    if (n < 0) {
        -:  277:	int ret;
    #####:  278:	zmult = -n;
    #####:  279:	ret = viforwardword(args);
    #####:  280:	zmult = n;
    #####:  281:	return ret;
        -:  282:    }
       64:  283:    while (n--) {
       22:  284:	int nl = 0;
       56:  285:	while (zlecs) {
       33:  286:	    DECCS();
       33:  287:	    if (!ZC_inblank(zleline[zlecs]))
       18:  288:		break;
       15:  289:	    nl += (zleline[zlecs] == ZWC('\n'));
       15:  290:	    if (nl == 2) {
        3:  291:		INCCS();
        3:  292:		break;
        -:  293:	    }
        -:  294:	}
       22:  295:	if (zlecs) {
       21:  296:	    int pos = zlecs;
       21:  297:	    int cc = wordclass(zleline[pos]);
        -:  298:	    for (;;) {
       79:  299:		zlecs = pos;
       50:  300:		if (zlecs == 0)
    #####:  301:		    break;
       50:  302:		DECPOS(pos);
       50:  303:		if (wordclass(zleline[pos]) != cc || ZC_inblank(zleline[pos]))
        -:  304:		    break;
        -:  305:	    }
        -:  306:	}
        -:  307:    }
       21:  308:    return 0;
        -:  309:}
        -:  310:
        -:  311:/**/
        -:  312:int
       21:  313:vibackwardblankword(char **args)
        -:  314:{
       21:  315:    int n = zmult;
        -:  316:
       21:  317:    if (n < 0) {
        -:  318:	int ret;
    #####:  319:	zmult = -n;
    #####:  320:	ret = viforwardblankword(args);
    #####:  321:	zmult = n;
    #####:  322:	return ret;
        -:  323:    }
       63:  324:    while (n--) {
       21:  325:	int nl = 0;
       59:  326:	while (zlecs) {
       35:  327:	    int pos = zlecs;
       35:  328:	    DECPOS(pos);
       35:  329:	    if (!ZC_inblank(zleline[pos]))
       33:  330:		break;
       20:  331:	    nl += (zleline[pos] == ZWC('\n'));
       20:  332:	    if (nl == 2) break;
       17:  333:	    zlecs = pos;
        -:  334:	}
       85:  335:	while (zlecs) {
       60:  336:	    int pos = zlecs;
       60:  337:	    DECPOS(pos);
       60:  338:	    if (ZC_inblank(zleline[pos]))
       17:  339:		break;
       43:  340:	    zlecs = pos;
        -:  341:	}
        -:  342:    }
       21:  343:    return 0;
        -:  344:}
        -:  345:
        -:  346:/**/
        -:  347:int
       12:  348:vibackwardwordend(char **args)
        -:  349:{
       12:  350:    int n = zmult;
        -:  351:
       12:  352:    if (n < 0) {
        -:  353:	int ret;
    #####:  354:	zmult = -n;
    #####:  355:	ret = viforwardwordend(args);
    #####:  356:	zmult = n;
    #####:  357:	return ret;
        -:  358:    }
       36:  359:    while (n-- && zlecs > 1) {
       12:  360:	int cc = wordclass(zleline[zlecs]);
       12:  361:	DECCS();
       31:  362:	while (zlecs) {
       18:  363:	    if (wordclass(zleline[zlecs]) != cc || ZC_iblank(zleline[zlecs]))
        -:  364:		break;
        7:  365:	    DECCS();
        -:  366:	}
       28:  367:	while (zlecs && ZC_iblank(zleline[zlecs]))
        4:  368:	    DECCS();
        -:  369:    }
       12:  370:    return 0;
        -:  371:}
        -:  372:
        -:  373:/**/
        -:  374:int
        5:  375:vibackwardblankwordend(char **args)
        -:  376:{
        5:  377:    int n = zmult;
        -:  378:
        5:  379:    if (n < 0) {
        -:  380:	int ret;
    #####:  381:	zmult = -n;
    #####:  382:	ret = viforwardblankwordend(args);
    #####:  383:	zmult = n;
    #####:  384:	return ret;
        -:  385:    }
       15:  386:    while (n--) {
       24:  387:	while (zlecs && !ZC_inblank(zleline[zlecs]))
       14:  388:	    DECCS();
       20:  389:	while (zlecs && ZC_inblank(zleline[zlecs]))
       10:  390:	    DECCS();
        -:  391:    }
        5:  392:    return 0;
        -:  393:}
        -:  394:
        -:  395:/**/
        -:  396:int
    #####:  397:emacsbackwardword(char **args)
        -:  398:{
    #####:  399:    int n = zmult;
        -:  400:
    #####:  401:    if (n < 0) {
        -:  402:	int ret;
    #####:  403:	zmult = -n;
    #####:  404:	ret = emacsforwardword(args);
    #####:  405:	zmult = n;
    #####:  406:	return ret;
        -:  407:    }
    #####:  408:    while (n--) {
    #####:  409:	while (zlecs) {
    #####:  410:	    int pos = zlecs;
    #####:  411:	    DECPOS(pos);
    #####:  412:	    if (ZC_iword(zleline[pos]))
    #####:  413:		break;
    #####:  414:	    zlecs = pos;
        -:  415:	}
    #####:  416:	while (zlecs) {
    #####:  417:	    int pos = zlecs;
    #####:  418:	    DECPOS(pos);
    #####:  419:	    if (!ZC_iword(zleline[pos]))
    #####:  420:		break;
    #####:  421:	    zlecs = pos;
        -:  422:	}
        -:  423:    }
    #####:  424:    return 0;
        -:  425:}
        -:  426:
        -:  427:/**/
        -:  428:int
    #####:  429:backwarddeleteword(char **args)
        -:  430:{
    #####:  431:    int x = zlecs, n = zmult;
        -:  432:
    #####:  433:    if (n < 0) {
        -:  434:	int ret;
    #####:  435:	zmult = -n;
    #####:  436:	ret = deleteword(args);
    #####:  437:	zmult = n;
    #####:  438:	return ret;
        -:  439:    }
    #####:  440:    while (n--) {
    #####:  441:	while (x) {
    #####:  442:	    int pos = x;
    #####:  443:	    DECPOS(pos);
    #####:  444:	    if (ZC_iword(zleline[pos]))
    #####:  445:		break;
    #####:  446:	    x = pos;
        -:  447:	}
    #####:  448:	while (x) {
    #####:  449:	    int pos = x;
    #####:  450:	    DECPOS(pos);
    #####:  451:	    if (!ZC_iword(zleline[pos]))
    #####:  452:		break;
    #####:  453:	    x = pos;
        -:  454:	}
        -:  455:    }
    #####:  456:    backdel(zlecs - x, CUT_RAW);
    #####:  457:    return 0;
        -:  458:}
        -:  459:
        -:  460:/**/
        -:  461:int
       10:  462:vibackwardkillword(UNUSED(char **args))
        -:  463:{
       10:  464:    int x = zlecs, lim = (viinsbegin > findbol()) ? viinsbegin : findbol();
       10:  465:    int n = zmult;
        -:  466:
       10:  467:    if (n < 0)
    #####:  468:	return 1;
        -:  469:/* this taken from "vibackwardword" */
       30:  470:    while (n--) {
       22:  471:	while (x > lim) {
       12:  472:	    int pos = x;
       12:  473:	    DECPOS(pos);
       12:  474:	    if (!ZC_iblank(zleline[pos]))
       10:  475:		break;
        2:  476:	    x = pos;
        -:  477:	}
       10:  478:	if (x > lim) {
        -:  479:	    int cc;
       10:  480:	    int pos = x;
       10:  481:	    DECPOS(pos);
       10:  482:	    cc = wordclass(zleline[pos]);
        -:  483:	    for (;;) {
       66:  484:		x = pos;
       38:  485:		if (x <= lim)
        8:  486:		    break;
       30:  487:		DECPOS(pos);
       30:  488:		if (wordclass(zleline[pos]) != cc)
        2:  489:		    break;
        -:  490:	    }
        -:  491:	}
        -:  492:    }
       10:  493:    backkill(zlecs - x, CUT_FRONT|CUT_RAW);
       10:  494:    return 0;
        -:  495:}
        -:  496:
        -:  497:/**/
        -:  498:int
    #####:  499:backwardkillword(char **args)
        -:  500:{
    #####:  501:    int x = zlecs;
    #####:  502:    int n = zmult;
        -:  503:
    #####:  504:    if (n < 0) {
        -:  505:	int ret;
    #####:  506:	zmult = -n;
    #####:  507:	ret = killword(args);
    #####:  508:	zmult = n;
    #####:  509:	return ret;
        -:  510:    }
    #####:  511:    while (n--) {
    #####:  512:	while (x) {
    #####:  513:	    int pos = x;
    #####:  514:	    DECPOS(pos);
    #####:  515:	    if (ZC_iword(zleline[pos]))
    #####:  516:		break;
    #####:  517:	    x = pos;
        -:  518:	}
    #####:  519:	while (x) {
    #####:  520:	    int pos = x;
    #####:  521:	    DECPOS(pos);
    #####:  522:	    if (!ZC_iword(zleline[pos]))
    #####:  523:		break;
    #####:  524:	    x = pos;
        -:  525:	}
        -:  526:    }
    #####:  527:    backkill(zlecs - x, CUT_FRONT|CUT_RAW);
    #####:  528:    return 0;
        -:  529:}
        -:  530:
        -:  531:/**/
        -:  532:int
    #####:  533:upcaseword(UNUSED(char **args))
        -:  534:{
    #####:  535:    int n = zmult;
    #####:  536:    int neg = n < 0, ocs = zlecs;
        -:  537:
    #####:  538:    if (neg)
    #####:  539:	n = -n;
    #####:  540:    while (n--) {
    #####:  541:	while (zlecs != zlell && !ZC_iword(zleline[zlecs]))
    #####:  542:	    INCCS();
    #####:  543:	while (zlecs != zlell && ZC_iword(zleline[zlecs])) {
    #####:  544:	    zleline[zlecs] = ZC_toupper(zleline[zlecs]);
    #####:  545:	    INCCS();
        -:  546:	}
        -:  547:    }
    #####:  548:    if (neg)
    #####:  549:	zlecs = ocs;
    #####:  550:    return 0;
        -:  551:}
        -:  552:
        -:  553:/**/
        -:  554:int
    #####:  555:downcaseword(UNUSED(char **args))
        -:  556:{
    #####:  557:    int n = zmult;
    #####:  558:    int neg = n < 0, ocs = zlecs;
        -:  559:
    #####:  560:    if (neg)
    #####:  561:	n = -n;
    #####:  562:    while (n--) {
    #####:  563:	while (zlecs != zlell && !ZC_iword(zleline[zlecs]))
    #####:  564:	    INCCS();
    #####:  565:	while (zlecs != zlell && ZC_iword(zleline[zlecs])) {
    #####:  566:	    zleline[zlecs] = ZC_tolower(zleline[zlecs]);
    #####:  567:	    INCCS();
        -:  568:	}
        -:  569:    }
    #####:  570:    if (neg)
    #####:  571:	zlecs = ocs;
    #####:  572:    return 0;
        -:  573:}
        -:  574:
        -:  575:/**/
        -:  576:int
    #####:  577:capitalizeword(UNUSED(char **args))
        -:  578:{
    #####:  579:    int first, n = zmult;
    #####:  580:    int neg = n < 0, ocs = zlecs;
        -:  581:
    #####:  582:    if (neg)
    #####:  583:	n = -n;
    #####:  584:    while (n--) {
    #####:  585:	first = 1;
    #####:  586:	while (zlecs != zlell && !ZC_iword(zleline[zlecs]))
    #####:  587:	    INCCS();
    #####:  588:	while (zlecs != zlell && ZC_iword(zleline[zlecs]) && !ZC_ialpha(zleline[zlecs]))
    #####:  589:	    INCCS();
    #####:  590:	while (zlecs != zlell && ZC_iword(zleline[zlecs])) {
    #####:  591:	    zleline[zlecs] = (first) ? ZC_toupper(zleline[zlecs]) :
    #####:  592:		ZC_tolower(zleline[zlecs]);
    #####:  593:	    first = 0;
    #####:  594:	    INCCS();
        -:  595:	}
        -:  596:    }
    #####:  597:    if (neg)
    #####:  598:	zlecs = ocs;
    #####:  599:    return 0;
        -:  600:}
        -:  601:
        -:  602:/**/
        -:  603:int
    #####:  604:deleteword(char **args)
        -:  605:{
    #####:  606:    int x = zlecs;
    #####:  607:    int n = zmult;
        -:  608:
    #####:  609:    if (n < 0) {
        -:  610:	int ret;
    #####:  611:	zmult = -n;
    #####:  612:	ret = backwarddeleteword(args);
    #####:  613:	zmult = n;
    #####:  614:	return ret;
        -:  615:    }
    #####:  616:    while (n--) {
    #####:  617:	while (x != zlell && !ZC_iword(zleline[x]))
    #####:  618:	    INCPOS(x);
    #####:  619:	while (x != zlell && ZC_iword(zleline[x]))
    #####:  620:	    INCPOS(x);
        -:  621:    }
    #####:  622:    foredel(x - zlecs, CUT_RAW);
    #####:  623:    return 0;
        -:  624:}
        -:  625:
        -:  626:/**/
        -:  627:int
    #####:  628:killword(char **args)
        -:  629:{
    #####:  630:    int x = zlecs;
    #####:  631:    int n = zmult;
        -:  632:
    #####:  633:    if (n < 0) {
        -:  634:	int ret;
    #####:  635:	zmult = -n;
    #####:  636:	ret = backwardkillword(args);
    #####:  637:	zmult = n;
    #####:  638:	return ret;
        -:  639:    }
    #####:  640:    while (n--) {
    #####:  641:	while (x != zlell && !ZC_iword(zleline[x]))
    #####:  642:	    INCPOS(x);
    #####:  643:	while (x != zlell && ZC_iword(zleline[x]))
    #####:  644:	    INCPOS(x);
        -:  645:    }
    #####:  646:    forekill(x - zlecs, CUT_RAW);
    #####:  647:    return 0;
        -:  648:}
        -:  649:
        -:  650:/**/
        -:  651:int
    #####:  652:transposewords(UNUSED(char **args))
        -:  653:{
    #####:  654:    int p1, p2, p3, p4, pt, len, x = zlecs, pos;
        -:  655:    ZLE_STRING_T temp, pp;
    #####:  656:    int n = zmult;
    #####:  657:    int neg = n < 0, ocs = zlecs;
        -:  658:
    #####:  659:    if (neg)
    #####:  660:	n = -n;
        -:  661:
    #####:  662:    while (x != zlell && zleline[x] != ZWC('\n') && !ZC_iword(zleline[x]))
    #####:  663:	INCPOS(x);
        -:  664:
    #####:  665:    if (x == zlell || zleline[x] == ZWC('\n')) {
    #####:  666:	x = zlecs;
    #####:  667:	while (x) {
    #####:  668:	    if (ZC_iword(zleline[x]))
    #####:  669:		break;
    #####:  670:	    pos = x;
    #####:  671:	    DECPOS(pos);
    #####:  672:	    if (zleline[pos] == ZWC('\n'))
    #####:  673:		break;
    #####:  674:	    x = pos;
        -:  675:	}
    #####:  676:	if (!x)
    #####:  677:	    return 1;
    #####:  678:	pos = x;
    #####:  679:	DECPOS(pos);
    #####:  680:	if (zleline[pos] == ZWC('\n'))
    #####:  681:	    return 1;
        -:  682:    }
        -:  683:
    #####:  684:    for (p4 = x; p4 != zlell && ZC_iword(zleline[p4]); INCPOS(p4))
        -:  685:	;
        -:  686:
    #####:  687:    for (p3 = p4; p3; ) {
    #####:  688:	pos = p3;
    #####:  689:	DECPOS(pos);
    #####:  690:	if (!ZC_iword(zleline[pos]))
    #####:  691:	    break;
    #####:  692:	p3 = pos;
        -:  693:    }
        -:  694:
    #####:  695:    if (!p3)
    #####:  696:	return 1;
        -:  697:
    #####:  698:    p1 = p2 = pt = p3;
        -:  699:
    #####:  700:    while (n--) {
    #####:  701:	for (p2 = pt; p2; ) {
    #####:  702:	    pos = p2;
    #####:  703:	    DECPOS(pos);
    #####:  704:	    if (ZC_iword(zleline[pos]))
    #####:  705:		break;
    #####:  706:	    p2 = pos;
        -:  707:	}
    #####:  708:	if (!p2)
    #####:  709:	    return 1;
    #####:  710:	for (p1 = p2; p1; ) {
    #####:  711:	    pos = p1;
    #####:  712:	    DECPOS(pos);
    #####:  713:	    if (!ZC_iword(zleline[pos]))
    #####:  714:		break;
    #####:  715:	    p1 = pos;
        -:  716:	}
    #####:  717:	pt = p1;
        -:  718:    }
        -:  719:
    #####:  720:    pp = temp = (ZLE_STRING_T)zhalloc((p4 - p1)*ZLE_CHAR_SIZE);
    #####:  721:    len = p4 - p3;
    #####:  722:    ZS_memcpy(pp, zleline + p3, len);
    #####:  723:    pp += len;
    #####:  724:    len = p3 - p2;
    #####:  725:    ZS_memcpy(pp, zleline + p2, len);
    #####:  726:    pp += len;
    #####:  727:    ZS_memcpy(pp, zleline + p1, p2 - p1);
        -:  728:
    #####:  729:    ZS_memcpy(zleline + p1, temp, p4 - p1);
        -:  730:
    #####:  731:    if (neg)
    #####:  732:	zlecs = ocs;
        -:  733:    else
    #####:  734:	zlecs = p4;
        -:  735:
    #####:  736:    return 0;
        -:  737:}
