        -:    0:Source:options.c
        -:    0:Programs:1
        -:    1:/*
        -:    2: * options.c - shell options
        -:    3: *
        -:    4: * This file is part of zsh, the Z shell.
        -:    5: *
        -:    6: * Copyright (c) 1992-1997 Paul Falstad
        -:    7: * All rights reserved.
        -:    8: *
        -:    9: * Permission is hereby granted, without written agreement and without
        -:   10: * license or royalty fees, to use, copy, modify, and distribute this
        -:   11: * software and to distribute modified versions of this software for any
        -:   12: * purpose, provided that the above copyright notice and the following
        -:   13: * two paragraphs appear in all copies of this software.
        -:   14: *
        -:   15: * In no event shall Paul Falstad or the Zsh Development Group be liable
        -:   16: * to any party for direct, indirect, special, incidental, or consequential
        -:   17: * damages arising out of the use of this software and its documentation,
        -:   18: * even if Paul Falstad and the Zsh Development Group have been advised of
        -:   19: * the possibility of such damage.
        -:   20: *
        -:   21: * Paul Falstad and the Zsh Development Group specifically disclaim any
        -:   22: * warranties, including, but not limited to, the implied warranties of
        -:   23: * merchantability and fitness for a particular purpose.  The software
        -:   24: * provided hereunder is on an "as is" basis, and Paul Falstad and the
        -:   25: * Zsh Development Group have no obligation to provide maintenance,
        -:   26: * support, updates, enhancements, or modifications.
        -:   27: *
        -:   28: */
        -:   29:
        -:   30:#include "zsh.mdh"
        -:   31:#include "options.pro"
        -:   32:
        -:   33:/* current emulation (used to decide which set of option letters is used) */
        -:   34:
        -:   35:/**/
        -:   36:mod_export int emulation;
        -:   37: 
        -:   38:/* current sticky emulation:  sticky = NULL means none */
        -:   39:
        -:   40:/**/
        -:   41:mod_export Emulation_options sticky;
        -:   42:
        -:   43:/* the options; e.g. if opts[SHGLOB] != 0, SH_GLOB is turned on */
        -:   44:
        -:   45:/**/
        -:   46:mod_export char opts[OPT_SIZE];
        -:   47:
        -:   48:/* Option name hash table */
        -:   49:
        -:   50:/**/
        -:   51:mod_export HashTable optiontab;
        -:   52:
        -:   53:/* The canonical option name table */
        -:   54:
        -:   55:#define OPT_CSH		EMULATE_CSH
        -:   56:#define OPT_KSH		EMULATE_KSH
        -:   57:#define OPT_SH		EMULATE_SH
        -:   58:#define OPT_ZSH		EMULATE_ZSH
        -:   59:
        -:   60:#define OPT_ALL		(OPT_CSH|OPT_KSH|OPT_SH|OPT_ZSH)
        -:   61:#define OPT_BOURNE	(OPT_KSH|OPT_SH)
        -:   62:#define OPT_BSHELL	(OPT_KSH|OPT_SH|OPT_ZSH)
        -:   63:#define OPT_NONBOURNE	(OPT_ALL & ~OPT_BOURNE)
        -:   64:#define OPT_NONZSH	(OPT_ALL & ~OPT_ZSH)
        -:   65:
        -:   66:/* option is relevant to emulation */
        -:   67:#define OPT_EMULATE	(EMULATE_UNUSED)
        -:   68:/* option should never be set by emulate() */
        -:   69:#define OPT_SPECIAL	(EMULATE_UNUSED<<1)
        -:   70:/* option is an alias to an other option */
        -:   71:#define OPT_ALIAS	(EMULATE_UNUSED<<2)
        -:   72:
        -:   73:#define defset(X, my_emulation) (!!((X)->node.flags & my_emulation))
        -:   74:
        -:   75:/*
        -:   76: * Note that option names should usually be fewer than 20 characters long
        -:   77: * to avoid formatting problems.
        -:   78: */
        -:   79:static struct optname optns[] = {
        -:   80:{{NULL, "aliases",	      OPT_EMULATE|OPT_ALL},	 ALIASESOPT},
        -:   81:{{NULL, "aliasfuncdef",       OPT_EMULATE|OPT_BOURNE},	 ALIASFUNCDEF},
        -:   82:{{NULL, "allexport",	      OPT_EMULATE},		 ALLEXPORT},
        -:   83:{{NULL, "alwayslastprompt",   OPT_ALL},			 ALWAYSLASTPROMPT},
        -:   84:{{NULL, "alwaystoend",	      0},			 ALWAYSTOEND},
        -:   85:{{NULL, "appendcreate",	      OPT_EMULATE|OPT_BOURNE},	 APPENDCREATE},
        -:   86:{{NULL, "appendhistory",      OPT_ALL},			 APPENDHISTORY},
        -:   87:{{NULL, "autocd",	      OPT_EMULATE},		 AUTOCD},
        -:   88:{{NULL, "autocontinue",	      0},			 AUTOCONTINUE},
        -:   89:{{NULL, "autolist",	      OPT_ALL},			 AUTOLIST},
        -:   90:{{NULL, "automenu",	      OPT_ALL},			 AUTOMENU},
        -:   91:{{NULL, "autonamedirs",	      0},			 AUTONAMEDIRS},
        -:   92:{{NULL, "autoparamkeys",      OPT_ALL},			 AUTOPARAMKEYS},
        -:   93:{{NULL, "autoparamslash",     OPT_ALL},			 AUTOPARAMSLASH},
        -:   94:{{NULL, "autopushd",	      0},			 AUTOPUSHD},
        -:   95:{{NULL, "autoremoveslash",    OPT_ALL},			 AUTOREMOVESLASH},
        -:   96:{{NULL, "autoresume",	      0},			 AUTORESUME},
        -:   97:{{NULL, "badpattern",	      OPT_EMULATE|OPT_NONBOURNE},BADPATTERN},
        -:   98:{{NULL, "banghist",	      OPT_NONBOURNE},		 BANGHIST},
        -:   99:{{NULL, "bareglobqual",       OPT_EMULATE|OPT_ZSH},      BAREGLOBQUAL},
        -:  100:{{NULL, "bashautolist",	      0},                        BASHAUTOLIST},
        -:  101:{{NULL, "bashrematch",	      0},			 BASHREMATCH},
        -:  102:{{NULL, "beep",		      OPT_ALL},			 BEEP},
        -:  103:{{NULL, "bgnice",	      OPT_EMULATE|OPT_NONBOURNE},BGNICE},
        -:  104:{{NULL, "braceccl",	      OPT_EMULATE},		 BRACECCL},
        -:  105:{{NULL, "bsdecho",	      OPT_EMULATE|OPT_SH},	 BSDECHO},
        -:  106:{{NULL, "caseglob",	      OPT_ALL},			 CASEGLOB},
        -:  107:{{NULL, "casematch",	      OPT_ALL},			 CASEMATCH},
        -:  108:{{NULL, "casepaths",	      0},			 CASEPATHS},
        -:  109:{{NULL, "cbases",	      0},			 CBASES},
        -:  110:{{NULL, "cprecedences",	      OPT_EMULATE|OPT_NONZSH},	 CPRECEDENCES},
        -:  111:{{NULL, "cdablevars",	      OPT_EMULATE},		 CDABLEVARS},
        -:  112:{{NULL, "cdsilent",	      0},			 CDSILENT},
        -:  113:{{NULL, "chasedots",	      OPT_EMULATE},		 CHASEDOTS},
        -:  114:{{NULL, "chaselinks",	      OPT_EMULATE},		 CHASELINKS},
        -:  115:{{NULL, "checkjobs",	      OPT_EMULATE|OPT_ZSH},	 CHECKJOBS},
        -:  116:{{NULL, "checkrunningjobs",   OPT_EMULATE|OPT_ZSH},	 CHECKRUNNINGJOBS},
        -:  117:{{NULL, "clobber",	      OPT_EMULATE|OPT_ALL},	 CLOBBER},
        -:  118:{{NULL, "clobberempty",	      0},			 CLOBBEREMPTY},
        -:  119:{{NULL, "combiningchars",     0},			 COMBININGCHARS},
        -:  120:{{NULL, "completealiases",    0},			 COMPLETEALIASES},
        -:  121:{{NULL, "completeinword",     0},			 COMPLETEINWORD},
        -:  122:{{NULL, "continueonerror",    0},                        CONTINUEONERROR},
        -:  123:{{NULL, "correct",	      0},			 CORRECT},
        -:  124:{{NULL, "correctall",	      0},			 CORRECTALL},
        -:  125:{{NULL, "cshjunkiehistory",   OPT_EMULATE|OPT_CSH},	 CSHJUNKIEHISTORY},
        -:  126:{{NULL, "cshjunkieloops",     OPT_EMULATE|OPT_CSH},	 CSHJUNKIELOOPS},
        -:  127:{{NULL, "cshjunkiequotes",    OPT_EMULATE|OPT_CSH},	 CSHJUNKIEQUOTES},
        -:  128:{{NULL, "cshnullcmd",	      OPT_EMULATE|OPT_CSH},	 CSHNULLCMD},
        -:  129:{{NULL, "cshnullglob",	      OPT_EMULATE|OPT_CSH},	 CSHNULLGLOB},
        -:  130:{{NULL, "debugbeforecmd",     OPT_ALL},			 DEBUGBEFORECMD},
        -:  131:{{NULL, "emacs",	      0},			 EMACSMODE},
        -:  132:{{NULL, "equals",	      OPT_EMULATE|OPT_ZSH},	 EQUALS},
        -:  133:{{NULL, "errexit",	      OPT_EMULATE},		 ERREXIT},
        -:  134:{{NULL, "errreturn",	      OPT_EMULATE},		 ERRRETURN},
        -:  135:{{NULL, "exec",		      OPT_ALL},			 EXECOPT},
        -:  136:{{NULL, "extendedglob",	      OPT_EMULATE},		 EXTENDEDGLOB},
        -:  137:{{NULL, "extendedhistory",    OPT_CSH},			 EXTENDEDHISTORY},
        -:  138:{{NULL, "evallineno",	      OPT_EMULATE|OPT_ZSH},	 EVALLINENO},
        -:  139:{{NULL, "flowcontrol",	      OPT_ALL},			 FLOWCONTROL},
        -:  140:{{NULL, "forcefloat",         0},                        FORCEFLOAT},
        -:  141:{{NULL, "functionargzero",    OPT_EMULATE|OPT_NONBOURNE},FUNCTIONARGZERO},
        -:  142:{{NULL, "glob",		      OPT_EMULATE|OPT_ALL},	 GLOBOPT},
        -:  143:{{NULL, "globalexport",       OPT_EMULATE|OPT_ZSH},	 GLOBALEXPORT},
        -:  144:{{NULL, "globalrcs",          OPT_ALL},			 GLOBALRCS},
        -:  145:{{NULL, "globassign",	      OPT_EMULATE|OPT_CSH},	 GLOBASSIGN},
        -:  146:{{NULL, "globcomplete",	      0},			 GLOBCOMPLETE},
        -:  147:{{NULL, "globdots",	      OPT_EMULATE},		 GLOBDOTS},
        -:  148:{{NULL, "globstarshort",      OPT_EMULATE},		 GLOBSTARSHORT},
        -:  149:{{NULL, "globsubst",	      OPT_EMULATE|OPT_NONZSH},	 GLOBSUBST},
        -:  150:{{NULL, "hashcmds",	      OPT_ALL},			 HASHCMDS},
        -:  151:{{NULL, "hashdirs",	      OPT_ALL},			 HASHDIRS},
        -:  152:{{NULL, "hashexecutablesonly", 0},                       HASHEXECUTABLESONLY},
        -:  153:{{NULL, "hashlistall",	      OPT_ALL},			 HASHLISTALL},
        -:  154:{{NULL, "histallowclobber",   0},			 HISTALLOWCLOBBER},
        -:  155:{{NULL, "histbeep",	      OPT_ALL},			 HISTBEEP},
        -:  156:{{NULL, "histexpiredupsfirst",0},			 HISTEXPIREDUPSFIRST},
        -:  157:{{NULL, "histfcntllock",      0},			 HISTFCNTLLOCK},
        -:  158:{{NULL, "histfindnodups",     0},			 HISTFINDNODUPS},
        -:  159:{{NULL, "histignorealldups",  0},			 HISTIGNOREALLDUPS},
        -:  160:{{NULL, "histignoredups",     0},			 HISTIGNOREDUPS},
        -:  161:{{NULL, "histignorespace",    0},			 HISTIGNORESPACE},
        -:  162:{{NULL, "histlexwords",	      0},			 HISTLEXWORDS},
        -:  163:{{NULL, "histnofunctions",    0},			 HISTNOFUNCTIONS},
        -:  164:{{NULL, "histnostore",	      0},			 HISTNOSTORE},
        -:  165:{{NULL, "histsubstpattern",   OPT_EMULATE},              HISTSUBSTPATTERN},
        -:  166:{{NULL, "histreduceblanks",   0},			 HISTREDUCEBLANKS},
        -:  167:{{NULL, "histsavebycopy",     OPT_ALL},			 HISTSAVEBYCOPY},
        -:  168:{{NULL, "histsavenodups",     0},			 HISTSAVENODUPS},
        -:  169:{{NULL, "histverify",	      0},			 HISTVERIFY},
        -:  170:{{NULL, "hup",		      OPT_EMULATE|OPT_ZSH},	 HUP},
        -:  171:{{NULL, "ignorebraces",	      OPT_EMULATE|OPT_SH},	 IGNOREBRACES},
        -:  172:{{NULL, "ignoreclosebraces",  OPT_EMULATE},		 IGNORECLOSEBRACES},
        -:  173:{{NULL, "ignoreeof",	      0},			 IGNOREEOF},
        -:  174:{{NULL, "incappendhistory",   0},			 INCAPPENDHISTORY},
        -:  175:{{NULL, "incappendhistorytime",   0},			 INCAPPENDHISTORYTIME},
        -:  176:{{NULL, "interactive",	      OPT_SPECIAL},		 INTERACTIVE},
        -:  177:{{NULL, "interactivecomments",OPT_BOURNE},		 INTERACTIVECOMMENTS},
        -:  178:{{NULL, "ksharrays",	      OPT_EMULATE|OPT_BOURNE},	 KSHARRAYS},
        -:  179:{{NULL, "kshautoload",	      OPT_EMULATE|OPT_BOURNE},	 KSHAUTOLOAD},
        -:  180:{{NULL, "kshglob",	      OPT_EMULATE|OPT_KSH},	 KSHGLOB},
        -:  181:{{NULL, "kshoptionprint",     OPT_EMULATE|OPT_KSH},	 KSHOPTIONPRINT},
        -:  182:{{NULL, "kshtypeset",	      0},			 KSHTYPESET},
        -:  183:{{NULL, "kshzerosubscript",   0},			 KSHZEROSUBSCRIPT},
        -:  184:{{NULL, "listambiguous",      OPT_ALL},			 LISTAMBIGUOUS},
        -:  185:{{NULL, "listbeep",	      OPT_ALL},			 LISTBEEP},
        -:  186:{{NULL, "listpacked",	      0},			 LISTPACKED},
        -:  187:{{NULL, "listrowsfirst",      0},			 LISTROWSFIRST},
        -:  188:{{NULL, "listtypes",	      OPT_ALL},			 LISTTYPES},
        -:  189:{{NULL, "localoptions",	      OPT_EMULATE|OPT_KSH},	 LOCALOPTIONS},
        -:  190:{{NULL, "localloops",	      OPT_EMULATE},		 LOCALLOOPS},
        -:  191:{{NULL, "localpatterns",      OPT_EMULATE},		 LOCALPATTERNS},
        -:  192:{{NULL, "localtraps",	      OPT_EMULATE|OPT_KSH},	 LOCALTRAPS},
        -:  193:{{NULL, "login",	      OPT_SPECIAL},		 LOGINSHELL},
        -:  194:{{NULL, "longlistjobs",	      0},			 LONGLISTJOBS},
        -:  195:{{NULL, "magicequalsubst",    OPT_EMULATE},		 MAGICEQUALSUBST},
        -:  196:{{NULL, "mailwarning",	      0},			 MAILWARNING},
        -:  197:{{NULL, "markdirs",	      0},			 MARKDIRS},
        -:  198:{{NULL, "menucomplete",	      0},			 MENUCOMPLETE},
        -:  199:{{NULL, "monitor",	      OPT_SPECIAL},		 MONITOR},
        -:  200:{{NULL, "multibyte",
        -:  201:#ifdef MULTIBYTE_SUPPORT
        -:  202:			      OPT_ALL
        -:  203:#else
        -:  204:			      0
        -:  205:#endif
        -:  206:			      },			 MULTIBYTE},
        -:  207:{{NULL, "multifuncdef",	      OPT_EMULATE|OPT_ZSH},	 MULTIFUNCDEF},
        -:  208:{{NULL, "multios",	      OPT_EMULATE|OPT_ZSH},	 MULTIOS},
        -:  209:{{NULL, "nomatch",	      OPT_EMULATE|OPT_NONBOURNE},NOMATCH},
        -:  210:{{NULL, "notify",	      OPT_ZSH},			 NOTIFY},
        -:  211:{{NULL, "nullglob",	      OPT_EMULATE},		 NULLGLOB},
        -:  212:{{NULL, "numericglobsort",    OPT_EMULATE},		 NUMERICGLOBSORT},
        -:  213:{{NULL, "octalzeroes",        OPT_EMULATE|OPT_SH},	 OCTALZEROES},
        -:  214:{{NULL, "overstrike",	      0},			 OVERSTRIKE},
        -:  215:{{NULL, "pathdirs",	      OPT_EMULATE},		 PATHDIRS},
        -:  216:{{NULL, "pathscript",	      OPT_EMULATE|OPT_BOURNE},	 PATHSCRIPT},
        -:  217:{{NULL, "pipefail",           OPT_EMULATE},              PIPEFAIL},
        -:  218:{{NULL, "posixaliases",       OPT_EMULATE|OPT_BOURNE},	 POSIXALIASES},
        -:  219:{{NULL, "posixargzero",       OPT_EMULATE},              POSIXARGZERO},
        -:  220:{{NULL, "posixbuiltins",      OPT_EMULATE|OPT_BOURNE},	 POSIXBUILTINS},
        -:  221:{{NULL, "posixcd",            OPT_EMULATE|OPT_BOURNE},	 POSIXCD},
        -:  222:{{NULL, "posixidentifiers",   OPT_EMULATE|OPT_BOURNE},	 POSIXIDENTIFIERS},
        -:  223:{{NULL, "posixjobs",          OPT_EMULATE|OPT_BOURNE},	 POSIXJOBS},
        -:  224:{{NULL, "posixstrings",       OPT_EMULATE|OPT_BOURNE},   POSIXSTRINGS},
        -:  225:{{NULL, "posixtraps",         OPT_EMULATE|OPT_BOURNE},	 POSIXTRAPS},
        -:  226:{{NULL, "printeightbit",      0},                        PRINTEIGHTBIT},
        -:  227:{{NULL, "printexitvalue",     0},			 PRINTEXITVALUE},
        -:  228:{{NULL, "privileged",	      OPT_SPECIAL},		 PRIVILEGED},
        -:  229:{{NULL, "promptbang",	      OPT_KSH},			 PROMPTBANG},
        -:  230:{{NULL, "promptcr",	      OPT_ALL},			 PROMPTCR},
        -:  231:{{NULL, "promptpercent",      OPT_NONBOURNE},		 PROMPTPERCENT},
        -:  232:{{NULL, "promptsp",	      OPT_ALL},			 PROMPTSP},
        -:  233:{{NULL, "promptsubst",	      OPT_BOURNE},		 PROMPTSUBST},
        -:  234:{{NULL, "pushdignoredups",    OPT_EMULATE},		 PUSHDIGNOREDUPS},
        -:  235:{{NULL, "pushdminus",	      OPT_EMULATE},		 PUSHDMINUS},
        -:  236:{{NULL, "pushdsilent",	      0},			 PUSHDSILENT},
        -:  237:{{NULL, "pushdtohome",	      OPT_EMULATE},		 PUSHDTOHOME},
        -:  238:{{NULL, "rcexpandparam",      OPT_EMULATE},		 RCEXPANDPARAM},
        -:  239:{{NULL, "rcquotes",	      OPT_EMULATE},		 RCQUOTES},
        -:  240:{{NULL, "rcs",		      OPT_ALL},			 RCS},
        -:  241:{{NULL, "recexact",	      0},			 RECEXACT},
        -:  242:{{NULL, "rematchpcre",	      0},			 REMATCHPCRE},
        -:  243:{{NULL, "restricted",	      OPT_SPECIAL},		 RESTRICTED},
        -:  244:{{NULL, "rmstarsilent",	      OPT_BOURNE},		 RMSTARSILENT},
        -:  245:{{NULL, "rmstarwait",	      0},			 RMSTARWAIT},
        -:  246:{{NULL, "sharehistory",	      OPT_KSH},			 SHAREHISTORY},
        -:  247:{{NULL, "shfileexpansion",    OPT_EMULATE|OPT_BOURNE},	 SHFILEEXPANSION},
        -:  248:{{NULL, "shglob",	      OPT_EMULATE|OPT_BOURNE},	 SHGLOB},
        -:  249:{{NULL, "shinstdin",	      OPT_SPECIAL},		 SHINSTDIN},
        -:  250:{{NULL, "shnullcmd",          OPT_EMULATE|OPT_BOURNE},	 SHNULLCMD},
        -:  251:{{NULL, "shoptionletters",    OPT_EMULATE|OPT_BOURNE},	 SHOPTIONLETTERS},
        -:  252:{{NULL, "shortloops",	      OPT_EMULATE|OPT_NONBOURNE},SHORTLOOPS},
        -:  253:{{NULL, "shortrepeat",	      OPT_EMULATE},              SHORTREPEAT},
        -:  254:{{NULL, "shwordsplit",	      OPT_EMULATE|OPT_BOURNE},	 SHWORDSPLIT},
        -:  255:{{NULL, "singlecommand",      OPT_SPECIAL},		 SINGLECOMMAND},
        -:  256:{{NULL, "singlelinezle",      OPT_KSH},			 SINGLELINEZLE},
        -:  257:{{NULL, "sourcetrace",        0},			 SOURCETRACE},
        -:  258:{{NULL, "sunkeyboardhack",    0},			 SUNKEYBOARDHACK},
        -:  259:{{NULL, "transientrprompt",   0},			 TRANSIENTRPROMPT},
        -:  260:{{NULL, "trapsasync",	      0},			 TRAPSASYNC},
        -:  261:{{NULL, "typesetsilent",      OPT_EMULATE|OPT_BOURNE},	 TYPESETSILENT},
        -:  262:{{NULL, "typesettounset",     OPT_EMULATE|OPT_BOURNE},	 TYPESETTOUNSET},
        -:  263:{{NULL, "unset",	      OPT_EMULATE|OPT_BSHELL},	 UNSET},
        -:  264:{{NULL, "verbose",	      0},			 VERBOSE},
        -:  265:{{NULL, "vi",		      0},			 VIMODE},
        -:  266:{{NULL, "warncreateglobal",   OPT_EMULATE},		 WARNCREATEGLOBAL},
        -:  267:{{NULL, "warnnestedvar",      OPT_EMULATE},		 WARNNESTEDVAR},
        -:  268:{{NULL, "xtrace",	      0},			 XTRACE},
        -:  269:{{NULL, "zle",		      OPT_SPECIAL},		 USEZLE},
        -:  270:{{NULL, "braceexpand",	      OPT_ALIAS}, /* ksh/bash */ -IGNOREBRACES},
        -:  271:{{NULL, "dotglob",	      OPT_ALIAS}, /* bash */	 GLOBDOTS},
        -:  272:{{NULL, "hashall",	      OPT_ALIAS}, /* bash */	 HASHCMDS},
        -:  273:{{NULL, "histappend",	      OPT_ALIAS}, /* bash */	 APPENDHISTORY},
        -:  274:{{NULL, "histexpand",	      OPT_ALIAS}, /* bash */	 BANGHIST},
        -:  275:{{NULL, "log",		      OPT_ALIAS}, /* ksh */	 -HISTNOFUNCTIONS},
        -:  276:{{NULL, "mailwarn",	      OPT_ALIAS}, /* bash */	 MAILWARNING},
        -:  277:{{NULL, "onecmd",	      OPT_ALIAS}, /* bash */	 SINGLECOMMAND},
        -:  278:{{NULL, "physical",	      OPT_ALIAS}, /* ksh/bash */ CHASELINKS},
        -:  279:{{NULL, "promptvars",	      OPT_ALIAS}, /* bash */	 PROMPTSUBST},
        -:  280:{{NULL, "stdin",	      OPT_ALIAS}, /* ksh */	 SHINSTDIN},
        -:  281:{{NULL, "trackall",	      OPT_ALIAS}, /* ksh */	 HASHCMDS},
        -:  282:{{NULL, "dvorak",	      0},			 DVORAK},
        -:  283:{{NULL, NULL, 0}, 0}
        -:  284:};
        -:  285:
        -:  286:/* Option letters */
        -:  287:
        -:  288:#define optletters (isset(SHOPTIONLETTERS) ? kshletters : zshletters)
        -:  289:
        -:  290:#define FIRST_OPT '0'
        -:  291:#define LAST_OPT 'y'
        -:  292:
        -:  293:static short zshletters[LAST_OPT - FIRST_OPT + 1] = {
        -:  294:    /* 0 */  CORRECT,
        -:  295:    /* 1 */  PRINTEXITVALUE,
        -:  296:    /* 2 */ -BADPATTERN,
        -:  297:    /* 3 */ -NOMATCH,
        -:  298:    /* 4 */  GLOBDOTS,
        -:  299:    /* 5 */  NOTIFY,
        -:  300:    /* 6 */  BGNICE,
        -:  301:    /* 7 */  IGNOREEOF,
        -:  302:    /* 8 */  MARKDIRS,
        -:  303:    /* 9 */  AUTOLIST,
        -:  304:    /* : */  0,
        -:  305:    /* ; */  0,
        -:  306:    /* < */  0,
        -:  307:    /* = */  0,
        -:  308:    /* > */  0,
        -:  309:    /* ? */  0,
        -:  310:    /* @ */  0,
        -:  311:    /* A */  0,			/* use with set for arrays */
        -:  312:    /* B */ -BEEP,
        -:  313:    /* C */ -CLOBBER,
        -:  314:    /* D */  PUSHDTOHOME,
        -:  315:    /* E */  PUSHDSILENT,
        -:  316:    /* F */ -GLOBOPT,
        -:  317:    /* G */  NULLGLOB,
        -:  318:    /* H */  RMSTARSILENT,
        -:  319:    /* I */  IGNOREBRACES,
        -:  320:    /* J */  AUTOCD,
        -:  321:    /* K */ -BANGHIST,
        -:  322:    /* L */  SUNKEYBOARDHACK,
        -:  323:    /* M */  SINGLELINEZLE,
        -:  324:    /* N */  AUTOPUSHD,
        -:  325:    /* O */  CORRECTALL,
        -:  326:    /* P */  RCEXPANDPARAM,
        -:  327:    /* Q */  PATHDIRS,
        -:  328:    /* R */  LONGLISTJOBS,
        -:  329:    /* S */  RECEXACT,
        -:  330:    /* T */  CDABLEVARS,
        -:  331:    /* U */  MAILWARNING,
        -:  332:    /* V */ -PROMPTCR,
        -:  333:    /* W */  AUTORESUME,
        -:  334:    /* X */  LISTTYPES,
        -:  335:    /* Y */  MENUCOMPLETE,
        -:  336:    /* Z */  USEZLE,
        -:  337:    /* [ */  0,
        -:  338:    /* \ */  0,
        -:  339:    /* ] */  0,
        -:  340:    /* ^ */  0,
        -:  341:    /* _ */  0,
        -:  342:    /* ` */  0,
        -:  343:    /* a */  ALLEXPORT,
        -:  344:    /* b */  0,			/* in non-Bourne shells, end of options */
        -:  345:    /* c */  0,			/* command follows */
        -:  346:    /* d */ -GLOBALRCS,
        -:  347:    /* e */  ERREXIT,
        -:  348:    /* f */ -RCS,
        -:  349:    /* g */  HISTIGNORESPACE,
        -:  350:    /* h */  HISTIGNOREDUPS,
        -:  351:    /* i */  INTERACTIVE,
        -:  352:    /* j */  0,
        -:  353:    /* k */  INTERACTIVECOMMENTS,
        -:  354:    /* l */  LOGINSHELL,
        -:  355:    /* m */  MONITOR,
        -:  356:    /* n */ -EXECOPT,
        -:  357:    /* o */  0,			/* long option name follows */
        -:  358:    /* p */  PRIVILEGED,
        -:  359:    /* q */  0,
        -:  360:    /* r */  RESTRICTED,
        -:  361:    /* s */  SHINSTDIN,
        -:  362:    /* t */  SINGLECOMMAND,
        -:  363:    /* u */ -UNSET,
        -:  364:    /* v */  VERBOSE,
        -:  365:    /* w */  CHASELINKS,
        -:  366:    /* x */  XTRACE,
        -:  367:    /* y */  SHWORDSPLIT,
        -:  368:};
        -:  369:
        -:  370:static short kshletters[LAST_OPT - FIRST_OPT + 1] = {
        -:  371:    /* 0 */  0,
        -:  372:    /* 1 */  0,
        -:  373:    /* 2 */  0,
        -:  374:    /* 3 */  0,
        -:  375:    /* 4 */  0,
        -:  376:    /* 5 */  0,
        -:  377:    /* 6 */  0,
        -:  378:    /* 7 */  0,
        -:  379:    /* 8 */  0,
        -:  380:    /* 9 */  0,
        -:  381:    /* : */  0,
        -:  382:    /* ; */  0,
        -:  383:    /* < */  0,
        -:  384:    /* = */  0,
        -:  385:    /* > */  0,
        -:  386:    /* ? */  0,
        -:  387:    /* @ */  0,
        -:  388:    /* A */  0,
        -:  389:    /* B */  0,
        -:  390:    /* C */ -CLOBBER,
        -:  391:    /* D */  0,
        -:  392:    /* E */  0,
        -:  393:    /* F */  0,
        -:  394:    /* G */  0,
        -:  395:    /* H */  0,
        -:  396:    /* I */  0,
        -:  397:    /* J */  0,
        -:  398:    /* K */  0,
        -:  399:    /* L */  0,
        -:  400:    /* M */  0,
        -:  401:    /* N */  0,
        -:  402:    /* O */  0,
        -:  403:    /* P */  0,
        -:  404:    /* Q */  0,
        -:  405:    /* R */  0,
        -:  406:    /* S */  0,
        -:  407:    /* T */  TRAPSASYNC,
        -:  408:    /* U */  0,
        -:  409:    /* V */  0,
        -:  410:    /* W */  0,
        -:  411:    /* X */  MARKDIRS,
        -:  412:    /* Y */  0,
        -:  413:    /* Z */  0,
        -:  414:    /* [ */  0,
        -:  415:    /* \ */  0,
        -:  416:    /* ] */  0,
        -:  417:    /* ^ */  0,
        -:  418:    /* _ */  0,
        -:  419:    /* ` */  0,
        -:  420:    /* a */  ALLEXPORT,
        -:  421:    /* b */  NOTIFY,
        -:  422:    /* c */  0,
        -:  423:    /* d */  0,
        -:  424:    /* e */  ERREXIT,
        -:  425:    /* f */ -GLOBOPT,
        -:  426:    /* g */  0,
        -:  427:    /* h */  0,
        -:  428:    /* i */  INTERACTIVE,
        -:  429:    /* j */  0,
        -:  430:    /* k */  0,
        -:  431:    /* l */  LOGINSHELL,
        -:  432:    /* m */  MONITOR,
        -:  433:    /* n */ -EXECOPT,
        -:  434:    /* o */  0,
        -:  435:    /* p */  PRIVILEGED,
        -:  436:    /* q */  0,
        -:  437:    /* r */  RESTRICTED,
        -:  438:    /* s */  SHINSTDIN,
        -:  439:    /* t */  SINGLECOMMAND,
        -:  440:    /* u */ -UNSET,
        -:  441:    /* v */  VERBOSE,
        -:  442:    /* w */  0,
        -:  443:    /* x */  XTRACE,
        -:  444:    /* y */  0,
        -:  445:};
        -:  446:
        -:  447:/* Initialisation of the option name hash table */
        -:  448:
        -:  449:/**/
        -:  450:static void
    #####:  451:printoptionnode(HashNode hn, int set)
        -:  452:{
    #####:  453:    Optname on = (Optname) hn;
    #####:  454:    int optno = on->optno;
        -:  455:
    #####:  456:    if (optno < 0)
    #####:  457:	optno = -optno;
    #####:  458:    if (isset(KSHOPTIONPRINT)) {
    #####:  459:	if (defset(on, emulation))
    #####:  460:	    printf("no%-19s %s\n", on->node.nam, isset(optno) ? "off" : "on");
        -:  461:	else
    #####:  462:	    printf("%-21s %s\n", on->node.nam, isset(optno) ? "on" : "off");
    #####:  463:    } else if (set == (isset(optno) ^ defset(on, emulation))) {
    #####:  464:	if (set ^ isset(optno))
    #####:  465:	    fputs("no", stdout);
    #####:  466:	puts(on->node.nam);
        -:  467:    }
    #####:  468:}
        -:  469:
        -:  470:/**/
        -:  471:void
        4:  472:createoptiontable(void)
        -:  473:{
        -:  474:    Optname on;
        -:  475:
        4:  476:    optiontab = newhashtable(101, "optiontab", NULL);
        -:  477:
        4:  478:    optiontab->hash        = hasher;
        4:  479:    optiontab->emptytable  = NULL;
        4:  480:    optiontab->filltable   = NULL;
        4:  481:    optiontab->cmpnodes    = strcmp;
        4:  482:    optiontab->addnode     = addhashnode;
        4:  483:    optiontab->getnode     = gethashnode;
        4:  484:    optiontab->getnode2    = gethashnode2;
        4:  485:    optiontab->removenode  = NULL;
        4:  486:    optiontab->disablenode = disablehashnode;
        4:  487:    optiontab->enablenode  = enablehashnode;
        4:  488:    optiontab->freenode    = NULL;
        4:  489:    optiontab->printnode   = printoptionnode;
        -:  490:
      792:  491:    for (on = optns; on->node.nam; on++)
      788:  492:	optiontab->addnode(optiontab, on->node.nam, on);
        4:  493:}
        -:  494:
        -:  495:/* Emulation appropriate to the setemulate function */
        -:  496:
        -:  497:static int setemulate_emulation;
        -:  498:
        -:  499:/* Option array manipulated within the setemulate function */
        -:  500:
        -:  501:/**/
        -:  502:static char *setemulate_opts;
        -:  503:
        -:  504:/* Setting of default options */
        -:  505:
        -:  506:/**/
        -:  507:static void
    32899:  508:setemulate(HashNode hn, int fully)
        -:  509:{
    32899:  510:    Optname on = (Optname) hn;
        -:  511:
        -:  512:    /* Set options: each non-special option is set according to the *
        -:  513:     * current emulation mode if either it is considered relevant   *
        -:  514:     * to emulation or we are doing a full emulation (as indicated  *
        -:  515:     * by the `fully' parameter).                                   */
    32899:  516:    if (!(on->node.flags & OPT_ALIAS) &&
    30935:  517:	((fully && !(on->node.flags & OPT_SPECIAL)) ||
    30010:  518:	 (on->node.flags & OPT_EMULATE)))
    14007:  519:	setemulate_opts[on->optno] = defset(on, setemulate_emulation);
    32899:  520:}
        -:  521:
        -:  522:/**/
        -:  523:void
      167:  524:installemulation(int new_emulation, char *new_opts)
        -:  525:{
      167:  526:    setemulate_emulation = new_emulation;
      167:  527:    setemulate_opts = new_opts;
      167:  528:    scanhashtable(optiontab, 0, 0, 0, setemulate,
      167:  529:		  !!(new_emulation & EMULATE_FULLY));
      167:  530:}
        -:  531:
        -:  532:/**/
        -:  533:void
      167:  534:emulate(const char *zsh_name, int fully, int *new_emulation, char *new_opts)
        -:  535:{
      167:  536:    char ch = *zsh_name;
        -:  537:
      167:  538:    if (ch == 'r')
    #####:  539:	ch = zsh_name[1];
        -:  540:
        -:  541:    /* Work out the new emulation mode */
      167:  542:    if (ch == 'c')
    #####:  543:	*new_emulation = EMULATE_CSH;
      167:  544:    else if (ch == 'k')
    #####:  545:	*new_emulation = EMULATE_KSH;
      167:  546:    else if (ch == 's' || ch == 'b')
        3:  547:	*new_emulation = EMULATE_SH;
        -:  548:    else
      164:  549:	*new_emulation = EMULATE_ZSH;
        -:  550:
      167:  551:    if (fully)
        5:  552:	*new_emulation |= EMULATE_FULLY;
      167:  553:    installemulation(*new_emulation, new_opts);
        -:  554:
      167:  555:    if (funcstack && funcstack->tp == FS_FUNC) {
        -:  556:	/*
        -:  557:	 * We are inside a function.  Decide if it's traced.
        -:  558:	 * Pedantic note: the function in the function table isn't
        -:  559:	 * guaranteed to be what we're executing, but it's
        -:  560:	 * close enough.
        -:  561:	 */
      161:  562:	Shfunc shf = (Shfunc)shfunctab->getnode(shfunctab, funcstack->name);
      161:  563:	if (shf && (shf->node.flags & (PM_TAGGED|PM_TAGGED_LOCAL))) {
        -:  564:	    /* Tracing is on, so set xtrace */
    #####:  565:	    new_opts[XTRACE] = 1;
        -:  566:	}
        -:  567:    }
      167:  568:}
        -:  569:
        -:  570:/* setopt, unsetopt */
        -:  571:
        -:  572:/**/
        -:  573:static void
    #####:  574:setoption(HashNode hn, int value)
        -:  575:{
    #####:  576:    dosetopt(((Optname) hn)->optno, value, 0, opts);
    #####:  577:}
        -:  578:
        -:  579:/**/
        -:  580:int
      337:  581:bin_setopt(char *nam, char **args, UNUSED(Options ops), int isun)
        -:  582:{
      337:  583:    int action, optno, match = 0;
      337:  584:    int retval = 0;
        -:  585:
        -:  586:    /* With no arguments or options, display options. */
      337:  587:    if (!*args) {
    #####:  588:	scanhashtable(optiontab, 1, 0, OPT_ALIAS, optiontab->printnode, !isun);
    #####:  589:	return 0;
        -:  590:    }
        -:  591:
        -:  592:    /* loop through command line options (begins with "-" or "+") */
     1011:  593:    while (*args && (**args == '-' || **args == '+')) {
    #####:  594:	action = (**args == '-') ^ isun;
    #####:  595:	if(!args[0][1])
    #####:  596:	    *args = "--";
    #####:  597:	while (*++*args) {
    #####:  598:	    if(**args == Meta)
    #####:  599:		*++*args ^= 32;
        -:  600:	    /* The pseudo-option `--' signifies the end of options. */
    #####:  601:	    if (**args == '-') {
    #####:  602:		args++;
    #####:  603:		goto doneoptions;
    #####:  604:	    } else if (**args == 'o') {
    #####:  605:		if (!*++*args)
    #####:  606:		    args++;
    #####:  607:		if (!*args) {
    #####:  608:		    zwarnnam(nam, "string expected after -o");
    #####:  609:		    inittyptab();
    #####:  610:		    return 1;
        -:  611:		}
    #####:  612:		if(!(optno = optlookup(*args))) {
    #####:  613:		    zwarnnam(nam, "no such option: %s", *args);
    #####:  614:		    retval |= 1;
    #####:  615:		} else if (dosetopt(optno, action, 0, opts)) {
    #####:  616:		    zwarnnam(nam, "can't change option: %s", *args);
    #####:  617:		    retval |= 1;
        -:  618:		}
    #####:  619:		break;
    #####:  620:	    } else if(**args == 'm') {
    #####:  621:		match = 1;
        -:  622:	    } else {
    #####:  623:		if (!(optno = optlookupc(**args))) {
    #####:  624:		    zwarnnam(nam, "bad option: -%c", **args);
    #####:  625:		    retval |= 1;
    #####:  626:		} else if (dosetopt(optno, action, 0, opts)) {
    #####:  627:		    zwarnnam(nam, "can't change option: -%c", **args);
    #####:  628:		    retval |= 1;
        -:  629:		}
        -:  630:	    }
        -:  631:	}
    #####:  632:	args++;
        -:  633:    }
      337:  634:    doneoptions:
        -:  635:
      337:  636:    if (!match) {
        -:  637:	/* Not globbing the arguments -- arguments are simply option names. */
     1012:  638:	while (*args) {
      338:  639:	    if(!(optno = optlookup(*args++))) {
    #####:  640:		zwarnnam(nam, "no such option: %s", args[-1]);
    #####:  641:		retval |= 1;
      338:  642:	    } else if (dosetopt(optno, !isun, 0, opts)) {
    #####:  643:		zwarnnam(nam, "can't change option: %s", args[-1]);
    #####:  644:		retval |= 1;
        -:  645:	    }
        -:  646:	}
        -:  647:    } else {
        -:  648:	/* Globbing option (-m) set. */
    #####:  649:	while (*args) {
        -:  650:	    Patprog pprog;
        -:  651:	    char *s, *t;
        -:  652:
    #####:  653:	    t = s = dupstring(*args);
    #####:  654:	    while (*t)
    #####:  655:		if (*t == '_')
    #####:  656:		    chuck(t);
        -:  657:		else {
        -:  658:		    /* See comment in optlookup() */
    #####:  659:		    if (*t >= 'A' && *t <= 'Z')
    #####:  660:			*t = (*t - 'A') + 'a';
    #####:  661:		    t++;
        -:  662:		}
        -:  663:
        -:  664:	    /* Expand the current arg. */
    #####:  665:	    tokenize(s);
    #####:  666:	    if (!(pprog = patcompile(s, PAT_HEAPDUP, NULL))) {
    #####:  667:		zwarnnam(nam, "bad pattern: %s", *args);
    #####:  668:		retval |= 1;
    #####:  669:		break;
        -:  670:	    }
        -:  671:	    /* Loop over expansions. */
    #####:  672:	    scanmatchtable(optiontab, pprog, 0, 0, OPT_ALIAS,
        -:  673:			   setoption, !isun);
    #####:  674:	    args++;
        -:  675:	}
        -:  676:    }
      337:  677:    inittyptab();
      337:  678:    return retval;
        -:  679:}
        -:  680:
        -:  681:/* Identify an option name */
        -:  682:
        -:  683:/**/
        -:  684:mod_export int
    33828:  685:optlookup(char const *name)
        -:  686:{
        -:  687:    char *s, *t;
        -:  688:    Optname n;
        -:  689:
    33828:  690:    s = t = dupstring(name);
        -:  691:
        -:  692:    /* exorcise underscores, and change to lowercase */
   428851:  693:    while (*t)
   361195:  694:	if (*t == '_')
        1:  695:	    chuck(t);
        -:  696:	else {
        -:  697:	    /*
        -:  698:	     * Some locales (in particular tr_TR.UTF-8) may
        -:  699:	     * have non-standard mappings of ASCII characters,
        -:  700:	     * so be careful.  Option names must be ASCII so
        -:  701:	     * we don't need to be too clever.
        -:  702:	     */
   361194:  703:	    if (*t >= 'A' && *t <= 'Z')
       13:  704:		*t = (*t - 'A') + 'a';
   361194:  705:	    t++;
        -:  706:	}
        -:  707:
        -:  708:    /* look up name in the table */
    34170:  709:    if (s[0] == 'n' && s[1] == 'o' &&
      342:  710:	(n = (Optname) optiontab->getnode(optiontab, s + 2))) {
        2:  711:	return -n->optno;
    33826:  712:    } else if ((n = (Optname) optiontab->getnode(optiontab, s)))
    33826:  713:	return n->optno;
        -:  714:    else
    #####:  715:	return OPT_INVALID;
        -:  716:}
        -:  717:
        -:  718:/* Identify an option letter */
        -:  719:
        -:  720:/**/
        -:  721:int
        6:  722:optlookupc(char c)
        -:  723:{
        6:  724:    if(c < FIRST_OPT || c > LAST_OPT)
    #####:  725:	return 0;
        -:  726:
        6:  727:    return optletters[c - FIRST_OPT];
        -:  728:}
        -:  729:
        -:  730:/**/
        -:  731:static void
    #####:  732:restrictparam(char *nam)
        -:  733:{
    #####:  734:    Param pm = (Param) paramtab->getnode(paramtab, nam);
        -:  735:
    #####:  736:    if (pm) {
    #####:  737:	pm->node.flags |= PM_SPECIAL | PM_RESTRICTED;
    #####:  738:	return;
        -:  739:    }
    #####:  740:    createparam(nam, PM_SCALAR | PM_UNSET | PM_SPECIAL | PM_RESTRICTED);
        -:  741:}
        -:  742:
        -:  743:/* list of restricted parameters which are not otherwise special */
        -:  744:static char *rparams[] = {
        -:  745:    "SHELL", "HISTFILE", "LD_LIBRARY_PATH", "LD_AOUT_LIBRARY_PATH",
        -:  746:    "LD_PRELOAD", "LD_AOUT_PRELOAD", NULL
        -:  747:};
        -:  748:
        -:  749:/* Set or unset an option, as a result of user request.  The option *
        -:  750: * number may be negative, indicating that the sense is reversed    *
        -:  751: * from the usual meaning of the option.                            */
        -:  752:
        -:  753:/**/
        -:  754:mod_export int
    33834:  755:dosetopt(int optno, int value, int force, char *new_opts)
        -:  756:{
    33834:  757:    if(!optno)
    #####:  758:	return -1;
    33834:  759:    if(optno < 0) {
      346:  760:	optno = -optno;
      346:  761:	value = !value;
        -:  762:    }
    33834:  763:    if (optno == RESTRICTED) {
      170:  764:	if (isset(RESTRICTED))
    #####:  765:	    return value ? 0 : -1;
      170:  766:	if (value) {
        -:  767:	    char **s;
        -:  768:
    #####:  769:	    for (s = rparams; *s; s++)
    #####:  770:		restrictparam(*s);
        -:  771:	}
    33664:  772:    } else if(!force && optno == EXECOPT && !value && interact) {
        -:  773:	/* cannot set noexec when interactive */
    #####:  774:	return -1;
    33664:  775:    } else if(!force && (optno == INTERACTIVE || optno == SHINSTDIN ||
        -:  776:	    optno == SINGLECOMMAND)) {
      850:  777:	if (new_opts[optno] == value)
      850:  778:	    return 0;
        -:  779:	/* it is not permitted to change the value of these options */
    #####:  780:	return -1;
    32814:  781:    } else if(!force && optno == USEZLE && value) {
        -:  782:	/* we require a terminal in order to use ZLE */
    #####:  783:	if(!interact || SHTTY == -1 || !shout)
    #####:  784:	    return -1;
    32984:  785:    } else if(optno == PRIVILEGED && !value) {
        -:  786:	/* unsetting PRIVILEGED causes the shell to make itself unprivileged */
        -:  787:
        -:  788:/* For simplicity's sake, require both setresgid() and setresuid() up-front. */
        -:  789:#if !defined(HAVE_SETRESGID)
        -:  790:	zwarnnam("unsetopt",
        -:  791:	    "PRIVILEGED: can't drop privileges; setresgid() and friends not available");
        -:  792:	return -1;
        -:  793:#elif !defined(HAVE_SETRESUID)
        -:  794:	zwarnnam("unsetopt",
        -:  795:	    "PRIVILEGED: can't drop privileges; setresuid() and friends not available");
        -:  796:	return -1;
        -:  797:#else
        -:  798:	/* If set, return -1 so lastval will be non-zero. */
      170:  799:	int failed = 0;
      170:  800:	const int orig_euid = geteuid();
      170:  801:	const int orig_egid = getegid();
        -:  802:
        -:  803:	/*
        -:  804:	 * Set the GID first as if we set the UID to non-privileged it
        -:  805:	 * might be impossible to restore the GID.
        -:  806:	 */
      170:  807:	if (setresgid(getgid(), getgid(), getgid())) {
    #####:  808:	    zwarnnam("unsetopt",
        -:  809:		"PRIVILEGED: can't drop privileges; failed to change group ID: %e",
    #####:  810:		errno);
    #####:  811:	    return -1;
        -:  812:	}
        -:  813:
        -:  814:# ifdef HAVE_INITGROUPS
        -:  815:	/* Set the supplementary groups list.
        -:  816:	 *
        -:  817:	 * Note that on macOS, FreeBSD, and possibly some other platforms,
        -:  818:	 * initgroups() resets the EGID to its second argument (see setgroups(2) for
        -:  819:	 * details). This has the potential to leave the EGID in an unexpected
        -:  820:	 * state. However, it seems common in other projects that do this dance to
        -:  821:	 * simply re-use the same GID that's going to become the EGID anyway, in
        -:  822:	 * which case it doesn't matter. That's what we do here. It's therefore
        -:  823:	 * possible, in some probably uncommon cases, that the shell ends up not
        -:  824:	 * having the privileges of the RUID user's primary/passwd group. */
      170:  825:	if (geteuid() == 0) {
    #####:  826:	    struct passwd *pw = getpwuid(getuid());
    #####:  827:	    if (pw == NULL) {
    #####:  828:		zwarnnam("unsetopt",
        -:  829:		    "can't drop privileges; failed to get user information for uid %L: %e",
    #####:  830:		    (long)getuid(), errno);
    #####:  831:		failed = 1;
        -:  832:	    /* This may behave strangely in the unlikely event that the same user
        -:  833:	     * name appears with multiple UIDs in the passwd database */
    #####:  834:	    } else if (initgroups(pw->pw_name, getgid())) {
    #####:  835:		zwarnnam("unsetopt",
        -:  836:		    "can't drop privileges; failed to set supplementary group list: %e",
    #####:  837:		    errno);
    #####:  838:		return -1;
        -:  839:	    }
      340:  840:	} else if (getuid() != 0 &&
      340:  841:	    (geteuid() != getuid() || orig_egid != getegid())) {
    #####:  842:	    zwarnnam("unsetopt",
        -:  843:		"PRIVILEGED: supplementary group list not changed due to lack of permissions: EUID=%L",
    #####:  844:		(long)geteuid());
    #####:  845:	    failed = 1;
        -:  846:	}
        -:  847:# else
        -:  848:	/* initgroups() isn't in POSIX.  If it's not available on the system,
        -:  849:	 * we silently skip it. */
        -:  850:# endif
        -:  851:
        -:  852:	/* Set the UID second. */
      170:  853:	if (setresuid(getuid(), getuid(), getuid())) {
    #####:  854:	    zwarnnam("unsetopt",
        -:  855:		"PRIVILEGED: can't drop privileges; failed to change user ID: %e",
    #####:  856:		errno);
    #####:  857:	    return -1;
        -:  858:	}
        -:  859:
      170:  860:	if (getuid() != 0 && orig_egid != getegid() &&
    #####:  861:		(setgid(orig_egid) != -1 || setegid(orig_egid) != -1)) {
    #####:  862:	    zwarnnam("unsetopt",
        -:  863:		"PRIVILEGED: can't drop privileges; was able to restore the egid");
    #####:  864:	    return -1;
        -:  865:	}
        -:  866:
      170:  867:	if (getuid() != 0 && orig_euid != geteuid() &&
    #####:  868:		(setuid(orig_euid) != -1 || seteuid(orig_euid) != -1)) {
    #####:  869:	    zwarnnam("unsetopt",
        -:  870:		"PRIVILEGED: can't drop privileges; was able to restore the euid");
    #####:  871:	    return -1;
        -:  872:	}
        -:  873:
      170:  874:	if (failed) {
        -:  875:	    /* A warning message has been printed. */
    #####:  876:	    return -1;
        -:  877:	}
        -:  878:#endif /* HAVE_SETRESGID && HAVE_SETRESUID */
        -:  879:
        -:  880:#ifdef JOB_CONTROL
    32644:  881:    } else if (!force && optno == MONITOR && value) {
    #####:  882:	if (new_opts[optno] == value)
    #####:  883:	    return 0;
    #####:  884:	if (SHTTY != -1) {
    #####:  885:	    origpgrp = GETPGRP();
    #####:  886:	    acquire_pgrp();
        -:  887:	} else
    #####:  888:	    return -1;
        -:  889:#else
        -:  890:    } else if(optno == MONITOR && value) {
        -:  891:	    return -1;
        -:  892:#endif /* not JOB_CONTROL */
        -:  893:#ifdef GETPWNAM_FAKED
        -:  894:    } else if(optno == CDABLEVARS && value) {
        -:  895:	    return -1;
        -:  896:#endif /* GETPWNAM_FAKED */
    32644:  897:    } else if ((optno == EMACSMODE || optno == VIMODE) && value) {
    #####:  898:	if (sticky && sticky->emulation)
    #####:  899:	    return -1;
    #####:  900:	zleentry(ZLE_CMD_SET_KEYMAP, optno);
    #####:  901:	new_opts[(optno == EMACSMODE) ? VIMODE : EMACSMODE] = 0;
    32644:  902:    } else if (optno == SUNKEYBOARDHACK) {
        -:  903:	/* for backward compatibility */
      170:  904:	keyboardhackchar = (value ? '`' : '\0');
        -:  905:    }
    32984:  906:    new_opts[optno] = value;
    32984:  907:    if (optno == BANGHIST || optno == SHINSTDIN)
      340:  908:	inittyptab();
    32984:  909:    return 0;
        -:  910:}
        -:  911:
        -:  912:/* Function to get value for special parameter `-' */
        -:  913:
        -:  914:/**/
        -:  915:char *
    #####:  916:dashgetfn(UNUSED(Param pm))
        -:  917:{
        -:  918:    static char buf[LAST_OPT - FIRST_OPT + 2];
    #####:  919:    char *val = buf;
        -:  920:    int i;
        -:  921:
    #####:  922:    for(i = 0; i <= LAST_OPT - FIRST_OPT; i++) {
    #####:  923:	int optno = optletters[i];
    #####:  924:	if(optno && ((optno > 0) ? isset(optno) : unset(-optno)))
    #####:  925:	    *val++ = FIRST_OPT + i;
        -:  926:    }
    #####:  927:    *val = '\0';
    #####:  928:    return buf;
        -:  929:}
        -:  930:
        -:  931:/* print options for set -o/+o */
        -:  932:
        -:  933:/**/
        -:  934:void
    #####:  935:printoptionstates(int hadplus)
        -:  936:{
    #####:  937:    scanhashtable(optiontab, 1, 0, OPT_ALIAS, printoptionnodestate, hadplus);
    #####:  938:}
        -:  939:
        -:  940:/**/
        -:  941:static void
    #####:  942:printoptionnodestate(HashNode hn, int hadplus)
        -:  943:{
    #####:  944:    Optname on = (Optname) hn;
    #####:  945:    int optno = on->optno;
        -:  946:
    #####:  947:    if (hadplus) {
    #####:  948:	printf("set %co %s%s\n",
    #####:  949:	       defset(on, emulation) != isset(optno) ? '-' : '+',
    #####:  950:	       defset(on, emulation) ? "no" : "",
        -:  951:	       on->node.nam);
        -:  952:    } else {
    #####:  953:	if (defset(on, emulation))
    #####:  954:	    printf("no%-19s %s\n", on->node.nam, isset(optno) ? "off" : "on");
        -:  955:	else
    #####:  956:	    printf("%-21s %s\n", on->node.nam, isset(optno) ? "on" : "off");
        -:  957:    }
    #####:  958:}
        -:  959:
        -:  960:/* Print option list for --help */
        -:  961:
        -:  962:/**/
        -:  963:void
    #####:  964:printoptionlist(void)
        -:  965:{
        -:  966:    short *lp;
        -:  967:    char c;
        -:  968:
    #####:  969:    printf("\nNamed options:\n");
    #####:  970:    scanhashtable(optiontab, 1, 0, OPT_ALIAS, printoptionlist_printoption, 0);
    #####:  971:    printf("\nOption aliases:\n");
    #####:  972:    scanhashtable(optiontab, 1, OPT_ALIAS, 0, printoptionlist_printoption, 0);
    #####:  973:    printf("\nOption letters:\n");
    #####:  974:    for(lp = optletters, c = FIRST_OPT; c <= LAST_OPT; lp++, c++) {
    #####:  975:	if(!*lp)
    #####:  976:	    continue;
    #####:  977:	printf("  -%c  ", c);
    #####:  978:	printoptionlist_printequiv(*lp);
        -:  979:    }
    #####:  980:}
        -:  981:
        -:  982:/**/
        -:  983:static void
    #####:  984:printoptionlist_printoption(HashNode hn, UNUSED(int ignored))
        -:  985:{
    #####:  986:    Optname on = (Optname) hn;
        -:  987:
    #####:  988:    if(on->node.flags & OPT_ALIAS) {
    #####:  989:	printf("  --%-19s  ", on->node.nam);
    #####:  990:	printoptionlist_printequiv(on->optno);
        -:  991:    } else
    #####:  992:	printf("  --%s\n", on->node.nam);
    #####:  993:}
        -:  994:
        -:  995:/**/
        -:  996:static void
    #####:  997:printoptionlist_printequiv(int optno)
        -:  998:{
    #####:  999:    int isneg = optno < 0;
        -: 1000:
    #####: 1001:    optno *= (isneg ? -1 : 1);
    #####: 1002:    printf("  equivalent to --%s%s\n", isneg ? "no-" : "", optns[optno-1].node.nam);
    #####: 1003:}
        -: 1004:
        -: 1005:/**/
        -: 1006:static char *print_emulate_opts;
        -: 1007:
        -: 1008:/**/
        -: 1009:static void
    #####: 1010:print_emulate_option(HashNode hn, int fully)
        -: 1011:{
    #####: 1012:    Optname on = (Optname) hn;
        -: 1013:
    #####: 1014:    if (!(on->node.flags & OPT_ALIAS) &&
    #####: 1015:	((fully && !(on->node.flags & OPT_SPECIAL)) ||
    #####: 1016:	 (on->node.flags & OPT_EMULATE)))
        -: 1017:    {
    #####: 1018:	if (!print_emulate_opts[on->optno])
    #####: 1019:	    fputs("no", stdout);
    #####: 1020:	puts(on->node.nam);
        -: 1021:    }
    #####: 1022:}
        -: 1023:
        -: 1024:/*
        -: 1025: * List the settings of options associated with an emulation
        -: 1026: */
        -: 1027:
        -: 1028:/**/
    #####: 1029:void list_emulate_options(char *cmdopts, int fully)
        -: 1030:{
    #####: 1031:    print_emulate_opts = cmdopts;
    #####: 1032:    scanhashtable(optiontab, 1, 0, 0, print_emulate_option, fully);
    #####: 1033:}
