        -:    0:Source:string.c
        -:    0:Graph:/home/workspace/Src/string.gcno
        -:    0:Data:/home/workspace/Src/string.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*
        -:    2: * string.c - string manipulation
        -:    3: *
        -:    4: * This file is part of zsh, the Z shell.
        -:    5: *
        -:    6: * Copyright (c) 2000 Peter Stephenson
        -:    7: * All rights reserved.
        -:    8: *
        -:    9: * Permission is hereby granted, without written agreement and without
        -:   10: * license or royalty fees, to use, copy, modify, and distribute this
        -:   11: * software and to distribute modified versions of this software for any
        -:   12: * purpose, provided that the above copyright notice and the following
        -:   13: * two paragraphs appear in all copies of this software.
        -:   14: *
        -:   15: * In no event shall Peter Stephenson or the Zsh Development Group be liable
        -:   16: * to any party for direct, indirect, special, incidental, or consequential
        -:   17: * damages arising out of the use of this software and its documentation,
        -:   18: * even if Peter Stephenson and the Zsh Development Group have been advised of
        -:   19: * the possibility of such damage.
        -:   20: *
        -:   21: * Peter Stephenson and the Zsh Development Group specifically disclaim any
        -:   22: * warranties, including, but not limited to, the implied warranties of
        -:   23: * merchantability and fitness for a particular purpose.  The software
        -:   24: * provided hereunder is on an "as is" basis, and Peter Stephenson and the
        -:   25: * Zsh Development Group have no obligation to provide maintenance,
        -:   26: * support, updates, enhancements, or modifications.
        -:   27: */
        -:   28:
        -:   29:#include "zsh.mdh"
        -:   30:
        -:   31:/**/
        -:   32:mod_export char *
    65724:   33:dupstring(const char *s)
        -:   34:{
        -:   35:    char *t;
        -:   36:
    65724:   37:    if (!s)
    #####:   38:	return NULL;
    65724:   39:    t = (char *) zhalloc(strlen((char *)s) + 1);
    65724:   40:    strcpy(t, s);
    65724:   41:    return t;
        -:   42:}
        -:   43:
        -:   44:/* Duplicate string on heap when length is known */
        -:   45:
        -:   46:/**/
        -:   47:mod_export char *
      503:   48:dupstring_wlen(const char *s, unsigned len)
        -:   49:{
        -:   50:    char *t;
        -:   51:
      503:   52:    if (!s)
    #####:   53:	return NULL;
      503:   54:    t = (char *) zhalloc(len + 1);
      503:   55:    memcpy(t, s, len);
      503:   56:    t[len] = '\0';
      503:   57:    return t;
        -:   58:}
        -:   59:
        -:   60:/* Duplicate string on heap, returning length of string */
        -:   61:
        -:   62:/**/
        -:   63:mod_export char *
    #####:   64:dupstring_glen(const char *s, unsigned *len_ret)
        -:   65:{
        -:   66:    char *t;
        -:   67:
    #####:   68:    if (!s)
    #####:   69:	return NULL;
    #####:   70:    t = (char *) zhalloc((*len_ret = strlen((char *)s)) + 1);
    #####:   71:    strcpy(t, s);
    #####:   72:    return t;
        -:   73:}
        -:   74:
        -:   75:/**/
        -:   76:mod_export char *
    40915:   77:ztrdup(const char *s)
        -:   78:{
        -:   79:    char *t;
        -:   80:
    40915:   81:    if (!s)
        2:   82:	return NULL;
    40913:   83:    t = (char *)zalloc(strlen((char *)s) + 1);
    40913:   84:    strcpy(t, s);
    40913:   85:    return t;
        -:   86:}
        -:   87:
        -:   88:/**/
        -:   89:#ifdef MULTIBYTE_SUPPORT
        -:   90:/**/
        -:   91:mod_export wchar_t *
    #####:   92:wcs_ztrdup(const wchar_t *s)
        -:   93:{
        -:   94:    wchar_t *t;
        -:   95:
    #####:   96:    if (!s)
    #####:   97:	return NULL;
    #####:   98:    t = (wchar_t *)zalloc(sizeof(wchar_t) * (wcslen((wchar_t *)s) + 1));
    #####:   99:    wcscpy(t, s);
    #####:  100:    return t;
        -:  101:}
        -:  102:/**/
        -:  103:#endif /* MULTIBYTE_SUPPORT */
        -:  104:
        -:  105:
        -:  106:/* concatenate s1, s2, and s3 in dynamically allocated buffer */
        -:  107:
        -:  108:/**/
        -:  109:mod_export char *
    #####:  110:tricat(char const *s1, char const *s2, char const *s3)
        -:  111:{
        -:  112:    /* This version always uses permanently-allocated space. */
        -:  113:    char *ptr;
    #####:  114:    size_t l1 = strlen(s1);
    #####:  115:    size_t l2 = strlen(s2);
        -:  116:
    #####:  117:    ptr = (char *)zalloc(l1 + l2 + strlen(s3) + 1);
    #####:  118:    strcpy(ptr, s1);
    #####:  119:    strcpy(ptr + l1, s2);
    #####:  120:    strcpy(ptr + l1 + l2, s3);
    #####:  121:    return ptr;
        -:  122:}
        -:  123:
        -:  124:/**/
        -:  125:mod_export char *
    #####:  126:zhtricat(char const *s1, char const *s2, char const *s3)
        -:  127:{
        -:  128:    char *ptr;
    #####:  129:    size_t l1 = strlen(s1);
    #####:  130:    size_t l2 = strlen(s2);
        -:  131:
    #####:  132:    ptr = (char *)zhalloc(l1 + l2 + strlen(s3) + 1);
    #####:  133:    strcpy(ptr, s1);
    #####:  134:    strcpy(ptr + l1, s2);
    #####:  135:    strcpy(ptr + l1 + l2, s3);
    #####:  136:    return ptr;
        -:  137:}
        -:  138:
        -:  139:/* concatenate s1 and s2 in dynamically allocated buffer */
        -:  140:
        -:  141:/**/
        -:  142:mod_export char *
       79:  143:dyncat(const char *s1, const char *s2)
        -:  144:{
        -:  145:    /* This version always uses space from the current heap. */
        -:  146:    char *ptr;
       79:  147:    size_t l1 = strlen(s1);
        -:  148:
       79:  149:    ptr = (char *)zhalloc(l1 + strlen(s2) + 1);
       79:  150:    strcpy(ptr, s1);
       79:  151:    strcpy(ptr + l1, s2);
       79:  152:    return ptr;
        -:  153:}
        -:  154:
        -:  155:/**/
        -:  156:mod_export char *
    #####:  157:bicat(const char *s1, const char *s2)
        -:  158:{
        -:  159:    /* This version always uses permanently-allocated space. */
        -:  160:    char *ptr;
    #####:  161:    size_t l1 = strlen(s1);
        -:  162:
    #####:  163:    ptr = (char *)zalloc(l1 + strlen(s2) + 1);
    #####:  164:    strcpy(ptr, s1);
    #####:  165:    strcpy(ptr + l1, s2);
    #####:  166:    return ptr;
        -:  167:}
        -:  168:
        -:  169:/* like dupstring(), but with a specified length */
        -:  170:
        -:  171:/**/
        -:  172:mod_export char *
      374:  173:dupstrpfx(const char *s, int len)
        -:  174:{
      374:  175:    char *r = zhalloc(len + 1);
        -:  176:
      374:  177:    memcpy(r, s, len);
      374:  178:    r[len] = '\0';
      374:  179:    return r;
        -:  180:}
        -:  181:
        -:  182:/**/
        -:  183:mod_export char *
    #####:  184:ztrduppfx(const char *s, int len)
        -:  185:{
        -:  186:    /* This version always uses permanently-allocated space. */
    #####:  187:    char *r = zalloc(len + 1);
        -:  188:
    #####:  189:    memcpy(r, s, len);
    #####:  190:    r[len] = '\0';
    #####:  191:    return r;
        -:  192:}
        -:  193:
        -:  194:/* Append a string to an allocated string, reallocating to make room. */
        -:  195:
        -:  196:/**/
        -:  197:mod_export char *
    #####:  198:appstr(char *base, char const *append)
        -:  199:{
    #####:  200:    return strcat(realloc(base, strlen(base) + strlen(append) + 1), append);
        -:  201:}
        -:  202:
        -:  203:/* Return a pointer to the last character of a string,
        -:  204:   unless the string is empty. */
        -:  205:
        -:  206:/**/
        -:  207:mod_export char *
    #####:  208:strend(char *str)
        -:  209:{
    #####:  210:    if (*str == '\0')
    #####:  211:	return str;
    #####:  212:    return str + strlen (str) - 1;
        -:  213:}
