        -:    0:Source:compat.c
        -:    0:Graph:/home/workspace/Src/compat.gcno
        -:    0:Data:/home/workspace/Src/compat.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/*
        -:    2: * compat.c - compatibility routines for the deprived
        -:    3: *
        -:    4: * This file is part of zsh, the Z shell.
        -:    5: *
        -:    6: * Copyright (c) 1992-1997 Paul Falstad
        -:    7: * All rights reserved.
        -:    8: *
        -:    9: * Permission is hereby granted, without written agreement and without
        -:   10: * license or royalty fees, to use, copy, modify, and distribute this
        -:   11: * software and to distribute modified versions of this software for any
        -:   12: * purpose, provided that the above copyright notice and the following
        -:   13: * two paragraphs appear in all copies of this software.
        -:   14: *
        -:   15: * In no event shall Paul Falstad or the Zsh Development Group be liable
        -:   16: * to any party for direct, indirect, special, incidental, or consequential
        -:   17: * damages arising out of the use of this software and its documentation,
        -:   18: * even if Paul Falstad and the Zsh Development Group have been advised of
        -:   19: * the possibility of such damage.
        -:   20: *
        -:   21: * Paul Falstad and the Zsh Development Group specifically disclaim any
        -:   22: * warranties, including, but not limited to, the implied warranties of
        -:   23: * merchantability and fitness for a particular purpose.  The software
        -:   24: * provided hereunder is on an "as is" basis, and Paul Falstad and the
        -:   25: * Zsh Development Group have no obligation to provide maintenance,
        -:   26: * support, updates, enhancements, or modifications.
        -:   27: *
        -:   28: */
        -:   29:
        -:   30:#include "zsh.mdh"
        -:   31:#include "compat.pro"
        -:   32:
        -:   33:/* Return pointer to first occurrence of string t *
        -:   34: * in string s.  Return NULL if not present.      */
        -:   35:
        -:   36:/**/
        -:   37:#ifndef HAVE_STRSTR
        -:   38:
        -:   39:/**/
        -:   40:char *
        -:   41:strstr(const char *s, const char *t)
        -:   42:{
        -:   43:    const char *p1, *p2;
        -:   44:
        -:   45:    for (; *s; s++) {
        -:   46:        for (p1 = s, p2 = t; *p2; p1++, p2++)
        -:   47:            if (*p1 != *p2)
        -:   48:                break;
        -:   49:        if (!*p2)
        -:   50:            return (char *)s;
        -:   51:    }
        -:   52:    return NULL;
        -:   53:}
        -:   54:
        -:   55:/**/
        -:   56:#endif
        -:   57:
        -:   58:
        -:   59:/**/
        -:   60:#ifndef HAVE_GETHOSTNAME
        -:   61:
        -:   62:/**/
        -:   63:int
        -:   64:gethostname(char *name, size_t namelen)
        -:   65:{
        -:   66:    struct utsname uts;
        -:   67:
        -:   68:    uname(&uts);
        -:   69:    if(strlen(uts.nodename) >= namelen) {
        -:   70:	errno = EINVAL;
        -:   71:	return -1;
        -:   72:    }
        -:   73:    strcpy(name, uts.nodename);
        -:   74:    return 0;
        -:   75:}
        -:   76:
        -:   77:/**/
        -:   78:#endif
        -:   79:
        -:   80:
        -:   81:/**/
        -:   82:#ifndef HAVE_GETTIMEOFDAY
        -:   83:
        -:   84:/**/
        -:   85:int
        -:   86:gettimeofday(struct timeval *tv, struct timezone *tz)
        -:   87:{
        -:   88:    tv->tv_usec = 0;
        -:   89:    tv->tv_sec = (long)time((time_t) 0);
        -:   90:    return 0;
        -:   91:}
        -:   92:
        -:   93:/**/
        -:   94:#endif
        -:   95:
        -:   96:
        -:   97:/* Provide clock time with nanoseconds */
        -:   98:
        -:   99:/**/
        -:  100:mod_export int
    #####:  101:zgettime(struct timespec *ts)
        -:  102:{
    #####:  103:    int ret = -1;
        -:  104:
        -:  105:#ifdef HAVE_CLOCK_GETTIME
        -:  106:    struct timespec dts;
    #####:  107:    if (clock_gettime(CLOCK_REALTIME, &dts) < 0) {
    #####:  108:	zwarn("unable to retrieve time: %e", errno);
    #####:  109:	ret--;
        -:  110:    } else {
    #####:  111:	ret++;
    #####:  112:	ts->tv_sec = (time_t) dts.tv_sec;
    #####:  113:	ts->tv_nsec = (long) dts.tv_nsec;
        -:  114:    }
        -:  115:#endif
        -:  116:
    #####:  117:    if (ret) {
        -:  118:	struct timeval dtv;
        -:  119:	struct timezone dtz;
    #####:  120:	gettimeofday(&dtv, &dtz);
    #####:  121:	ret++;
    #####:  122:	ts->tv_sec = (time_t) dtv.tv_sec;
    #####:  123:	ts->tv_nsec = (long) dtv.tv_usec * 1000;
        -:  124:    }
        -:  125:
    #####:  126:    return ret;
        -:  127:}
        -:  128:
        -:  129:/* Likewise with CLOCK_MONOTONIC if available. */
        -:  130:
        -:  131:/**/
        -:  132:mod_export int
    #####:  133:zgettime_monotonic_if_available(struct timespec *ts)
        -:  134:{
    #####:  135:    int ret = -1;
        -:  136:
        -:  137:#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)
        -:  138:    struct timespec dts;
    #####:  139:    if (clock_gettime(CLOCK_MONOTONIC, &dts) < 0) {
    #####:  140:	zwarn("unable to retrieve CLOCK_MONOTONIC time: %e", errno);
    #####:  141:	ret--;
        -:  142:    } else {
    #####:  143:	ret++;
    #####:  144:	ts->tv_sec = (time_t) dts.tv_sec;
    #####:  145:	ts->tv_nsec = (long) dts.tv_nsec;
        -:  146:    }
        -:  147:#endif
        -:  148:
    #####:  149:    if (ret) {
    #####:  150:	ret = zgettime(ts);
        -:  151:    }
    #####:  152:    return ret;
        -:  153:}
        -:  154:
        -:  155:
        -:  156:/* compute the difference between two calendar times */
        -:  157:
        -:  158:/**/
        -:  159:#ifndef HAVE_DIFFTIME
        -:  160:
        -:  161:/**/
        -:  162:double
        -:  163:difftime(time_t t2, time_t t1)
        -:  164:{
        -:  165:    return ((double)t2 - (double)t1);
        -:  166:}
        -:  167:
        -:  168:/**/
        -:  169:#endif
        -:  170:
        -:  171:
        -:  172:/**/
        -:  173:#ifndef HAVE_STRERROR
        -:  174:extern char *sys_errlist[];
        -:  175:
        -:  176:/* Get error message string associated with a particular  *
        -:  177: * error number, and returns a pointer to that string.    *
        -:  178: * This is not a particularly robust version of strerror. */
        -:  179:
        -:  180:/**/
        -:  181:char *
        -:  182:strerror(int errnum)
        -:  183:{
        -:  184:    return (sys_errlist[errnum]);
        -:  185:}
        -:  186:
        -:  187:/**/
        -:  188:#endif
        -:  189:
        -:  190:
        -:  191:#if 0
        -:  192:/* pathconf(_PC_PATH_MAX) is not currently useful to zsh.  The value *
        -:  193: * returned varies depending on a number of factors, e.g. the amount *
        -:  194: * of memory available to the operating system at a given time; thus *
        -:  195: * it can't be used for buffer allocation, or even as an indication  *
        -:  196: * of whether an attempt to use or create a given pathname may fail  *
        -:  197: * at any future time.                                               *
        -:  198: *                                                                   *
        -:  199: * The call is also permitted to fail if the argument path is not an *
        -:  200: * existing directory, so even to make sense of that one must search *
        -:  201: * for a valid directory somewhere in the path and adjust.  Even if  *
        -:  202: * it succeeds, the return value is relative to the input directory, *
        -:  203: * and therefore potentially relative to the length of the shortest  *
        -:  204: * path either to that directory or to our working directory.        *
        -:  205: *                                                                   *
        -:  206: * Finally, see the note below for glibc; detection of pathconf() is *
        -:  207: * not by itself an indication that it works reliably.               */
        -:  208:
        -:  209:/* The documentation for pathconf() says something like:             *
        -:  210: *     The limit is returned, if one exists.  If the system  does    *
        -:  211: *     not  have  a  limit  for  the  requested  resource,  -1 is    *
        -:  212: *     returned, and errno is unchanged.  If there is  an  error,    *
        -:  213: *     -1  is returned, and errno is set to reflect the nature of    *
        -:  214: *     the error.                                                    *
        -:  215: *                                                                   *
        -:  216: * System calls are not permitted to set errno to 0; but we must (or *
        -:  217: * some other flag value) in order to determine that the resource is *
        -:  218: * unlimited.  What use is leaving errno unchanged?  Instead, define *
        -:  219: * a wrapper that resets errno to 0 and returns 0 for "the system    *
        -:  220: * does not have a limit," so that -1 always means a real error.     */
        -:  221:
        -:  222:/**/
        -:  223:mod_export long
        -:  224:zpathmax(char *dir)
        -:  225:{
        -:  226:#ifdef HAVE_PATHCONF
        -:  227:    long pathmax;
        -:  228:
        -:  229:    errno = 0;
        -:  230:    if ((pathmax = pathconf(dir, _PC_PATH_MAX)) >= 0) {
        -:  231:	/* Some versions of glibc pathconf return a hardwired value! */
        -:  232:	return pathmax;
        -:  233:    } else if (errno == EINVAL || errno == ENOENT || errno == ENOTDIR) {
        -:  234:	/* Work backward to find a directory, until we run out of path. */
        -:  235:	char *tail = strrchr(dir, '/');
        -:  236:	while (tail > dir && tail[-1] == '/')
        -:  237:	    --tail;
        -:  238:	if (tail > dir) {
        -:  239:	    *tail = 0;
        -:  240:	    pathmax = zpathmax(dir);
        -:  241:	    *tail = '/';
        -:  242:	} else {
        -:  243:	    errno = 0;
        -:  244:	    if (tail)
        -:  245:		pathmax = pathconf("/", _PC_PATH_MAX);
        -:  246:	    else
        -:  247:		pathmax = pathconf(".", _PC_PATH_MAX);
        -:  248:	}
        -:  249:	if (pathmax > 0) {
        -:  250:	    long taillen = (tail ? strlen(tail) : (strlen(dir) + 1));
        -:  251:	    if (taillen < pathmax)
        -:  252:		return pathmax - taillen;
        -:  253:	    else
        -:  254:		errno = ENAMETOOLONG;
        -:  255:	}
        -:  256:    }
        -:  257:    if (errno)
        -:  258:	return -1;
        -:  259:    else
        -:  260:	return 0; /* pathmax should be considered unlimited */
        -:  261:#else
        -:  262:    long dirlen = strlen(dir);
        -:  263:
        -:  264:    /* The following is wrong if dir is not an absolute path. */
        -:  265:    return ((long) ((dirlen >= PATH_MAX) ?
        -:  266:		    ((errno = ENAMETOOLONG), -1) :
        -:  267:		    ((errno = 0), PATH_MAX - dirlen)));
        -:  268:#endif
        -:  269:}
        -:  270:#endif /* 0 */
        -:  271:
        -:  272:/**/
        -:  273:#ifdef HAVE_SYSCONF
        -:  274:/*
        -:  275: * This is replaced by a macro from system.h if not HAVE_SYSCONF.
        -:  276: * 0 is returned by sysconf if _SC_OPEN_MAX is unavailable;
        -:  277: * -1 is returned on error
        -:  278: *
        -:  279: * Neither of these should happen, but resort to OPEN_MAX rather
        -:  280: * than return 0 or -1 just in case.
        -:  281: *
        -:  282: * We'll limit the open maximum to ZSH_INITIAL_OPEN_MAX to
        -:  283: * avoid probing ridiculous numbers of file descriptors.
        -:  284: */
        -:  285:
        -:  286:/**/
        -:  287:mod_export long
        4:  288:zopenmax(void)
        -:  289:{
        -:  290:    long openmax;
        -:  291:
        4:  292:    if ((openmax = sysconf(_SC_OPEN_MAX)) < 1) {
    #####:  293:	openmax = OPEN_MAX;
        4:  294:    } else if (openmax > OPEN_MAX) {
        -:  295:	/* On some systems, "limit descriptors unlimited" or the  *
        -:  296:	 * equivalent will set openmax to a huge number.  Unless  *
        -:  297:	 * there actually is a file descriptor > OPEN_MAX already *
        -:  298:	 * open, nothing in zsh requires the true maximum, and in *
        -:  299:	 * fact it causes inefficiency elsewhere if we report it. *
        -:  300:	 * So, report the maximum of OPEN_MAX or the largest open *
        -:  301:	 * descriptor (is there a better way to find that?).      */
        4:  302:	long i, j = OPEN_MAX;
        4:  303:	if (openmax > ZSH_INITIAL_OPEN_MAX)
        4:  304:	    openmax = ZSH_INITIAL_OPEN_MAX;
        4:  305:	for (i = j; i < openmax; i += (errno != EINTR)) {
    #####:  306:	    errno = 0;
    #####:  307:	    if (fcntl(i, F_GETFL, 0) < 0 &&
    #####:  308:		(errno == EBADF || errno == EINTR))
    #####:  309:		continue;
    #####:  310:	    j = i;
        -:  311:	}
        4:  312:	openmax = j;
        -:  313:    }
        -:  314:
        4:  315:    return (max_zsh_fd > openmax) ? max_zsh_fd : openmax;
        -:  316:}
        -:  317:
        -:  318:/**/
        -:  319:#endif
        -:  320:
        -:  321:/*
        -:  322: * Rationalise the current directory, returning the string.
        -:  323: *
        -:  324: * If "d" is not NULL, it is used to store information about the
        -:  325: * directory.  The returned name is also present in d->dirname and is in
        -:  326: * permanently allocated memory.  The handling of this case depends on
        -:  327: * whether the fchdir() system call is available; if it is, it is assumed
        -:  328: * the caller is able to restore the current directory.  On successfully
        -:  329: * identifying the directory the function returns immediately rather
        -:  330: * than ascending the hierarchy.
        -:  331: *
        -:  332: * If "d" is NULL, no assumption about the caller's behaviour is
        -:  333: * made.  The returned string is in heap memory.  This case is
        -:  334: * always handled by changing directory up the hierarchy.
        -:  335: *
        -:  336: * On Cygwin or other systems where USE_GETCWD is defined (at the
        -:  337: * time of writing only QNX), we skip all the above and use the
        -:  338: * getcwd() system call.
        -:  339: */
        -:  340:
        -:  341:/**/
        -:  342:mod_export char *
        1:  343:zgetdir(struct dirsav *d)
        -:  344:{
        -:  345:    char nbuf[PATH_MAX+3];
        -:  346:    char *buf;
        -:  347:    int bufsiz, pos;
        -:  348:    struct stat sbuf;
        -:  349:    ino_t pino;
        -:  350:    dev_t pdev;
        -:  351:#if !defined(__CYGWIN__) && !defined(USE_GETCWD)
        -:  352:    struct dirent *de;
        -:  353:    DIR *dir;
        -:  354:    dev_t dev;
        -:  355:    ino_t ino;
        -:  356:    int len;
        -:  357:#endif
        -:  358:
        1:  359:    buf = zhalloc(bufsiz = PATH_MAX+1);
        1:  360:    pos = bufsiz - 1;
        1:  361:    buf[pos] = '\0';
        1:  362:    strcpy(nbuf, "../");
        1:  363:    if (stat(".", &sbuf) < 0) {
    #####:  364:	return NULL;
        -:  365:    }
        -:  366:
        -:  367:    /* Record the initial inode and device */
        1:  368:    pino = sbuf.st_ino;
        1:  369:    pdev = sbuf.st_dev;
        1:  370:    if (d)
    #####:  371:	d->ino = pino, d->dev = pdev;
        -:  372:#if !defined(__CYGWIN__) && !defined(USE_GETCWD)
        -:  373:#ifdef HAVE_FCHDIR
        -:  374:    else
        -:  375:#endif
        1:  376:	holdintr();
        -:  377:
        -:  378:    for (;;) {
        -:  379:	/* Examine the parent of the current directory. */
        7:  380:	if (stat("..", &sbuf) < 0)
    #####:  381:	    break;
        -:  382:
        -:  383:	/* Inode and device of curtent directory */
        4:  384:	ino = pino;
        4:  385:	dev = pdev;
        -:  386:	/* Inode and device of current directory's parent */
        4:  387:	pino = sbuf.st_ino;
        4:  388:	pdev = sbuf.st_dev;
        -:  389:
        -:  390:	/* If they're the same, we've reached the root directory... */
        4:  391:	if (ino == pino && dev == pdev) {
        -:  392:	    /*
        -:  393:	     * ...well, probably.  If this was an orphaned . after
        -:  394:	     * an unmount, or something such, we could be in trouble...
        -:  395:	     */
        2:  396:	    if (stat("/", &sbuf) < 0 ||
        2:  397:		sbuf.st_ino != ino ||
        1:  398:		sbuf.st_dev != dev) {
    #####:  399:		zerr("Failed to get current directory: path invalid");
    #####:  400:		return NULL;
        -:  401:	    }
        1:  402:	    if (!buf[pos])
    #####:  403:		buf[--pos] = '/';
        1:  404:	    if (d) {
        -:  405:#ifndef HAVE_FCHDIR
        -:  406:		zchdir(buf + pos);
        -:  407:		noholdintr();
        -:  408:#endif
    #####:  409:		return d->dirname = ztrdup(buf + pos);
        -:  410:	    }
        1:  411:	    zchdir(buf + pos);
        1:  412:	    noholdintr();
        1:  413:	    return buf + pos;
        -:  414:	}
        -:  415:
        -:  416:	/* Search the parent for the current directory. */
        3:  417:	if (!(dir = opendir("..")))
    #####:  418:	    break;
        -:  419:
       22:  420:	while ((de = readdir(dir))) {
       19:  421:	    char *fn = de->d_name;
        -:  422:	    /* Ignore `.' and `..'. */
       24:  423:	    if (fn[0] == '.' &&
        8:  424:		(fn[1] == '\0' ||
        5:  425:		 (fn[1] == '.' && fn[2] == '\0')))
        4:  426:		continue;
        -:  427:#ifdef HAVE_STRUCT_DIRENT_D_STAT
        -:  428:	    if(de->d_stat.st_dev == dev && de->d_stat.st_ino == ino) {
        -:  429:		/* Found the directory we're currently in */
        -:  430:		strncpy(nbuf + 3, fn, PATH_MAX);
        -:  431:		break;
        -:  432:	    }
        -:  433:#else /* !HAVE_STRUCT_DIRENT_D_STAT */
        -:  434:# ifdef HAVE_STRUCT_DIRENT_D_INO
       15:  435:	    if (dev != pdev || (ino_t) de->d_ino == ino)
        -:  436:# endif /* HAVE_STRUCT_DIRENT_D_INO */
        -:  437:	    {
        -:  438:		/* Maybe found directory, need to check device & inode */
        3:  439:		strncpy(nbuf + 3, fn, PATH_MAX);
        3:  440:		lstat(nbuf, &sbuf);
        3:  441:		if (sbuf.st_dev == dev && sbuf.st_ino == ino)
        3:  442:		    break;
        -:  443:	    }
        -:  444:#endif /* !HAVE_STRUCT_DIRENT_D_STAT */
        -:  445:	}
        3:  446:	closedir(dir);
        3:  447:	if (!de)
    #####:  448:	    break;		/* Not found */
        -:  449:	/*
        -:  450:	 * We get the "/" free just by copying from nbuf+2 instead
        -:  451:	 * of nbuf+3, which is where we copied the path component.
        -:  452:	 * This means buf[pos] is always a "/".
        -:  453:	 */
        3:  454:	len = strlen(nbuf + 2);
        3:  455:	pos -= len;
        6:  456:	while (pos <= 1) {
    #####:  457:	    char *newbuf = zhalloc(2*bufsiz);
    #####:  458:	    memcpy(newbuf + bufsiz, buf, bufsiz);
    #####:  459:	    buf = newbuf;
    #####:  460:	    pos += bufsiz;
    #####:  461:	    bufsiz *= 2;
        -:  462:	}
        3:  463:	memcpy(buf + pos, nbuf + 2, len);
        -:  464:#ifdef HAVE_FCHDIR
        3:  465:	if (d)
    #####:  466:	    return d->dirname = ztrdup(buf + pos + 1);
        -:  467:#endif
        3:  468:	if (chdir(".."))
    #####:  469:	    break;
        -:  470:    }
        -:  471:
        -:  472:    /*
        -:  473:     * Fix up the directory, if necessary.
        -:  474:     * We're changing back down the hierarchy, ignore the
        -:  475:     * "/" at buf[pos].
        -:  476:     */
    #####:  477:    if (d) {
        -:  478:#ifndef HAVE_FCHDIR
        -:  479:	if (buf[pos])
        -:  480:	    zchdir(buf + pos + 1);
        -:  481:	noholdintr();
        -:  482:#endif
    #####:  483:	return NULL;
        -:  484:    }
        -:  485:
    #####:  486:    if (buf[pos])
    #####:  487:	zchdir(buf + pos + 1);
    #####:  488:    noholdintr();
        -:  489:
        -:  490:#else  /* __CYGWIN__, USE_GETCWD cases */
        -:  491:
        -:  492:    if (!getcwd(buf, bufsiz)) {
        -:  493:	if (d) {
        -:  494:	    return NULL;
        -:  495:	}
        -:  496:    } else {
        -:  497:	if (d) {
        -:  498:	    return d->dirname = ztrdup(buf);
        -:  499:	}
        -:  500:	return buf;
        -:  501:    }
        -:  502:#endif
        -:  503:
        -:  504:    /*
        -:  505:     * Something bad happened.
        -:  506:     * This has been seen when inside a special directory,
        -:  507:     * such as the Netapp .snapshot directory, that doesn't
        -:  508:     * appear as a directory entry in the parent directory.
        -:  509:     * We'll just need our best guess.
        -:  510:     *
        -:  511:     * We only get here from zgetcwd(); let that fall back to pwd.
        -:  512:     */
        -:  513:
    #####:  514:    return NULL;
        -:  515:}
        -:  516:
        -:  517:/*
        -:  518: * Try to find the current directory.
        -:  519: * If we couldn't work it out internally, fall back to getcwd().
        -:  520: * If it fails, fall back to pwd; if zgetcwd() is being used
        -:  521: * to set pwd, pwd should be NULL and we just return ".".
        -:  522: */
        -:  523:
        -:  524:/**/
        -:  525:mod_export char *
        1:  526:zgetcwd(void)
        -:  527:{
        1:  528:    char *ret = zgetdir(NULL);
        -:  529:#ifdef HAVE_GETCWD
        1:  530:    if (!ret) {
        -:  531:#ifdef GETCWD_CALLS_MALLOC
    #####:  532:	char *cwd = getcwd(NULL, 0);
    #####:  533:	if (cwd) {
    #####:  534:	    ret = dupstring(cwd);
    #####:  535:	    free(cwd);
        -:  536:	}
        -:  537:#else
        -:  538:	char *cwdbuf = zalloc(PATH_MAX+1);
        -:  539:	ret = getcwd(cwdbuf, PATH_MAX);
        -:  540:	if (ret)
        -:  541:	    ret = dupstring(ret);
        -:  542:	zfree(cwdbuf, PATH_MAX+1);
        -:  543:#endif /* GETCWD_CALLS_MALLOC */
        -:  544:    }
        -:  545:#endif /* HAVE_GETCWD */
        1:  546:    if (!ret)
    #####:  547:	ret = unmeta(pwd);
        1:  548:    if (!ret || *ret == '\0')
    #####:  549:	ret = dupstring(".");
        1:  550:    return ret;
        -:  551:}
        -:  552:
        -:  553:/*
        -:  554: * chdir with arbitrary long pathname.  Returns 0 on success, -1 on normal *
        -:  555: * failure and -2 when chdir failed and the current directory is lost.
        -:  556: *
        -:  557: * This is to be treated as if at system level, so dir is unmetafied but
        -:  558: * terminated by a NULL.
        -:  559: */
        -:  560:
        -:  561:/**/
        -:  562:mod_export int
        3:  563:zchdir(char *dir)
        -:  564:{
        -:  565:    char *s;
        3:  566:    int currdir = -2;
        -:  567:
        -:  568:    for (;;) {
        3:  569:	if (!*dir || chdir(dir) == 0) {
        -:  570:#ifdef HAVE_FCHDIR
        3:  571:           if (currdir >= 0)
    #####:  572:               close(currdir);
        -:  573:#endif
        3:  574:	    return 0;
        -:  575:	}
    #####:  576:	if ((errno != ENAMETOOLONG && errno != ENOMEM) ||
    #####:  577:	    strlen(dir) < PATH_MAX)
        -:  578:	    break;
    #####:  579:	for (s = dir + PATH_MAX - 1; s > dir && *s != '/'; s--)
        -:  580:	    ;
    #####:  581:	if (s == dir)
    #####:  582:	    break;
        -:  583:#ifdef HAVE_FCHDIR
    #####:  584:	if (currdir == -2)
    #####:  585:	    currdir = open(".", O_RDONLY|O_NOCTTY);
        -:  586:#endif
    #####:  587:	*s = '\0';
    #####:  588:	if (chdir(dir) < 0) {
    #####:  589:	    *s = '/';
    #####:  590:	    break;
        -:  591:	}
        -:  592:#ifndef HAVE_FCHDIR
        -:  593:	currdir = -1;
        -:  594:#endif
    #####:  595:	*s = '/';
    #####:  596:	while (*++s == '/')
        -:  597:	    ;
    #####:  598:	dir = s;
        -:  599:    }
        -:  600:#ifdef HAVE_FCHDIR
    #####:  601:    if (currdir >= 0) {
    #####:  602:	if (fchdir(currdir) < 0) {
    #####:  603:	    close(currdir);
    #####:  604:	    return -2;
        -:  605:	}
    #####:  606:	close(currdir);
    #####:  607:	return -1;
        -:  608:    }
        -:  609:#endif
    #####:  610:    return currdir == -2 ? -1 : -2;
        -:  611:}
        -:  612:
        -:  613:/*
        -:  614: * How to print out a 64 bit integer.  This isn't needed (1) if longs
        -:  615: * are 64 bit, since ordinary %ld will work (2) if we couldn't find a
        -:  616: * 64 bit type anyway.
        -:  617: */
        -:  618:/**/
        -:  619:#ifdef ZSH_64_BIT_TYPE
        -:  620:/**/
        -:  621:mod_export char *
        -:  622:output64(zlong val)
        -:  623:{
        -:  624:    static char llbuf[DIGBUFSIZE];
        -:  625:    convbase(llbuf, val, 0);
        -:  626:    return llbuf;
        -:  627:}
        -:  628:/**/
        -:  629:#endif /* ZSH_64_BIT_TYPE */
        -:  630:
        -:  631:/**/
        -:  632:#ifndef HAVE_STRTOUL
        -:  633:
        -:  634:/*
        -:  635: * Copyright (c) 1990, 1993
        -:  636: *	The Regents of the University of California.  All rights reserved.
        -:  637: *
        -:  638: * Redistribution and use in source and binary forms, with or without
        -:  639: * modification, are permitted provided that the following conditions
        -:  640: * are met:
        -:  641: * 1. Redistributions of source code must retain the above copyright
        -:  642: *    notice, this list of conditions and the following disclaimer.
        -:  643: * 2. Redistributions in binary form must reproduce the above copyright
        -:  644: *    notice, this list of conditions and the following disclaimer in the
        -:  645: *    documentation and/or other materials provided with the distribution.
        -:  646: * 3. Neither the name of the University nor the names of its contributors
        -:  647: *    may be used to endorse or promote products derived from this software
        -:  648: *    without specific prior written permission.
        -:  649: *
        -:  650: * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
        -:  651: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:  652: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:  653: * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
        -:  654: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:  655: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:  656: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:  657: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:  658: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:  659: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:  660: * SUCH DAMAGE.
        -:  661: */
        -:  662:
        -:  663:/*
        -:  664: * Convert a string to an unsigned long integer.
        -:  665: *
        -:  666: * Ignores `locale' stuff.  Assumes that the upper and lower case
        -:  667: * alphabets and digits are each contiguous.
        -:  668: */
        -:  669:
        -:  670:/**/
        -:  671:unsigned long
        -:  672:strtoul(nptr, endptr, base)
        -:  673:	const char *nptr;
        -:  674:	char **endptr;
        -:  675:	int base;
        -:  676:{
        -:  677:	const char *s;
        -:  678:	unsigned long acc, cutoff;
        -:  679:	int c;
        -:  680:	int neg, any, cutlim;
        -:  681:
        -:  682:	/* endptr may be NULL */
        -:  683:
        -:  684:	s = nptr;
        -:  685:	do {
        -:  686:		c = (unsigned char) *s++;
        -:  687:	} while (isspace(c));
        -:  688:	if (c == '-') {
        -:  689:		neg = 1;
        -:  690:		c = *s++;
        -:  691:	} else {
        -:  692:		neg = 0;
        -:  693:		if (c == '+')
        -:  694:			c = *s++;
        -:  695:	}
        -:  696:	if ((base == 0 || base == 16) &&
        -:  697:	    c == '0' && (*s == 'x' || *s == 'X')) {
        -:  698:		c = s[1];
        -:  699:		s += 2;
        -:  700:		base = 16;
        -:  701:	}
        -:  702:	if (base == 0)
        -:  703:		base = c == '0' ? 8 : 10;
        -:  704:
        -:  705:	cutoff = ULONG_MAX / (unsigned long)base;
        -:  706:	cutlim = (int)(ULONG_MAX % (unsigned long)base);
        -:  707:	for (acc = 0, any = 0;; c = (unsigned char) *s++) {
        -:  708:		if (isdigit(c))
        -:  709:			c -= '0';
        -:  710:		else if (isalpha(c)) {
        -:  711:			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
        -:  712:		} else
        -:  713:			break;
        -:  714:		if (c >= base)
        -:  715:			break;
        -:  716:		if (any < 0)
        -:  717:			continue;
        -:  718:		if (acc > cutoff || (acc == cutoff && c > cutlim)) {
        -:  719:			any = -1;
        -:  720:			acc = ULONG_MAX;
        -:  721:			errno = ERANGE;
        -:  722:		} else {
        -:  723:			any = 1;
        -:  724:			acc *= (unsigned long)base;
        -:  725:			acc += c;
        -:  726:		}
        -:  727:	}
        -:  728:	if (neg && any > 0)
        -:  729:		acc = -acc;
        -:  730:	if (endptr != NULL)
        -:  731:		*endptr = any ? s - 1 : nptr;
        -:  732:	return (acc);
        -:  733:}
        -:  734:
        -:  735:/**/
        -:  736:#endif /* HAVE_STRTOUL */
        -:  737:
        -:  738:/**/
        -:  739:#ifdef ENABLE_UNICODE9
        -:  740:#include "./wcwidth9.h"
        -:  741:
        -:  742:/**/
        -:  743:int
        -:  744:u9_wcwidth(wchar_t ucs)
        -:  745:{
        -:  746:  int w = wcwidth9(ucs);
        -:  747:  if (w < -1)
        -:  748:    return 1;
        -:  749:  return w;
        -:  750:}
        -:  751:
        -:  752:/**/
        -:  753:int
        -:  754:u9_iswprint(wint_t ucs)
        -:  755:{
        -:  756:    if (ucs == 0)
        -:  757:	return 0;
        -:  758:    return wcwidth9(ucs) != -1;
        -:  759:}
        -:  760:
        -:  761:/**/
        -:  762:#endif	/* ENABLE_UNICODE9 */
        -:  763:
        -:  764:/**/
        -:  765:#if defined(__APPLE__) && defined(BROKEN_ISPRINT)
        -:  766:
        -:  767:/**/
        -:  768:int
        -:  769:isprint_ascii(int c)
        -:  770:{
        -:  771:    if (!strcmp(nl_langinfo(CODESET), "UTF-8"))
        -:  772:	return (c >= 0x20 && c <= 0x7e);
        -:  773:    else
        -:  774:	return isprint(c);
        -:  775:}
        -:  776:
        -:  777:/**/
        -:  778:#endif /* __APPLE__ && BROKEN_ISPRINT */
