        -:    0:Source:sched.c
        -:    0:Graph:/home/workspace/Src/Builtins/sched.gcno
        -:    0:Data:/home/workspace/Src/Builtins/sched.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/*
        -:    2: * sched.c - execute commands at scheduled times
        -:    3: *
        -:    4: * This file is part of zsh, the Z shell.
        -:    5: *
        -:    6: * Copyright (c) 1992-1997 Paul Falstad
        -:    7: * All rights reserved.
        -:    8: *
        -:    9: * Permission is hereby granted, without written agreement and without
        -:   10: * license or royalty fees, to use, copy, modify, and distribute this
        -:   11: * software and to distribute modified versions of this software for any
        -:   12: * purpose, provided that the above copyright notice and the following
        -:   13: * two paragraphs appear in all copies of this software.
        -:   14: *
        -:   15: * In no event shall Paul Falstad or the Zsh Development Group be liable
        -:   16: * to any party for direct, indirect, special, incidental, or consequential
        -:   17: * damages arising out of the use of this software and its documentation,
        -:   18: * even if Paul Falstad and the Zsh Development Group have been advised of
        -:   19: * the possibility of such damage.
        -:   20: *
        -:   21: * Paul Falstad and the Zsh Development Group specifically disclaim any
        -:   22: * warranties, including, but not limited to, the implied warranties of
        -:   23: * merchantability and fitness for a particular purpose.  The software
        -:   24: * provided hereunder is on an "as is" basis, and Paul Falstad and the
        -:   25: * Zsh Development Group have no obligation to provide maintenance,
        -:   26: * support, updates, enhancements, or modifications.
        -:   27: *
        -:   28: */
        -:   29:
        -:   30:#include "sched.mdh"
        -:   31:#include "sched.pro"
        -:   32:
        -:   33:/* node in sched list */
        -:   34:
        -:   35:typedef struct schedcmd  *Schedcmd;
        -:   36:
        -:   37:/* Flags for each scheduled event */
        -:   38:enum schedflags {
        -:   39:    /* Trash zle if necessary when event is activated */
        -:   40:    SCHEDFLAG_TRASH_ZLE = 1
        -:   41:};
        -:   42:
        -:   43:struct schedcmd {
        -:   44:    struct schedcmd *next;
        -:   45:    char *cmd;			/* command to run */
        -:   46:    time_t time;		/* when to run it */
        -:   47:    int flags;			/* flags as above */
        -:   48:};
        -:   49:
        -:   50:/* the list of sched jobs pending */
        -:   51:
        -:   52:static struct schedcmd *schedcmds;
        -:   53:
        -:   54:/* flag that timed event is running (via addtimedfn())*/
        -:   55:static int schedcmdtimed;
        -:   56:
        -:   57:/* Use addtimedfn() to add a timed event for sched's use */
        -:   58:
        -:   59:/**/
        -:   60:static void
    #####:   61:schedaddtimed(void)
        -:   62:{
        -:   63:    /*
        -:   64:     * The following code shouldn't be necessary and indicates
        -:   65:     * a bug.  However, the DPUTS() in the caller should pick
        -:   66:     * this up so we can detect and fix it, and the following
        -:   67:     * Makes The World Safe For Timed Events in non-debugging shells.
        -:   68:     */
    #####:   69:    if (schedcmdtimed)
    #####:   70:	scheddeltimed();
    #####:   71:    schedcmdtimed = 1;
    #####:   72:    addtimedfn(checksched, schedcmds->time);
    #####:   73:}
        -:   74:
        -:   75:/* Use deltimedfn() to remove the sched timed event */
        -:   76:
        -:   77:/**/
        -:   78:static void
    #####:   79:scheddeltimed(void)
        -:   80:{
    #####:   81:    if (schedcmdtimed)
        -:   82:    {
    #####:   83:	deltimedfn(checksched);
    #####:   84:	schedcmdtimed = 0;
        -:   85:    }
    #####:   86:}
        -:   87:
        -:   88:
        -:   89:/* Check scheduled commands; call this function from time to time. */
        -:   90:
        -:   91:/**/
        -:   92:static void
    #####:   93:checksched(void)
        -:   94:{
        -:   95:    time_t t;
        -:   96:    struct schedcmd *sch;
        -:   97:
    #####:   98:    if(!schedcmds)
    #####:   99:	return;
    #####:  100:    t = time(NULL);
        -:  101:    /*
        -:  102:     * List is ordered, so we only need to consider the
        -:  103:     * head element.
        -:  104:     */
    #####:  105:    while (schedcmds && schedcmds->time <= t) {
        -:  106:	/*
        -:  107:	 * Remove the entry to be executed from the list
        -:  108:	 * before execution:  this makes quite sure that
        -:  109:	 * the entry hasn't been monkeyed with when we
        -:  110:	 * free it.
        -:  111:	 */
    #####:  112:	sch = schedcmds;
    #####:  113:	schedcmds = sch->next;
        -:  114:	/*
        -:  115:	 * Delete from the timed function list now in case
        -:  116:	 * the called code reschedules.
        -:  117:	 */
    #####:  118:	scheddeltimed();
        -:  119:
    #####:  120:	if ((sch->flags & SCHEDFLAG_TRASH_ZLE) && zleactive)
    #####:  121:	    zleentry(ZLE_CMD_TRASH);
    #####:  122:	execstring(sch->cmd, 0, 0, "sched");
    #####:  123:	zsfree(sch->cmd);
    #####:  124:	zfree(sch, sizeof(struct schedcmd));
        -:  125:
        -:  126:	/*
        -:  127:	 * Fix time for future events.
        -:  128:	 * I had this outside the loop, for a little extra efficiency.
        -:  129:	 * However, it then occurred to me that having the list of
        -:  130:	 * forthcoming entries up to date could be regarded as
        -:  131:	 * a feature, and the inefficiency is negligible.
        -:  132:	 *
        -:  133:	 * Careful in case the code we called has already set
        -:  134:	 * up a timed event; if it has, that'll be up to date since
        -:  135:	 * we haven't changed the list here.
        -:  136:	 */
    #####:  137:	if (schedcmds && !schedcmdtimed) {
        -:  138:	    /*
        -:  139:	     * We've already delete the function from the list.
        -:  140:	     */
        -:  141:	    DPUTS(timedfns && firstnode(timedfns),
        -:  142:		  "BUG: already timed fn (1)");
    #####:  143:	    schedaddtimed();
        -:  144:	}
        -:  145:    }
        -:  146:}
        -:  147:
        -:  148:/**/
        -:  149:static int
    #####:  150:bin_sched(char *nam, char **argv, UNUSED(Options ops), UNUSED(int func))
        -:  151:{
        -:  152:    char *s, **argptr;
        -:  153:    time_t t;
        -:  154:    long h, m, sec;
        -:  155:    struct tm *tm;
        -:  156:    struct schedcmd *sch, *sch2, *schl;
    #####:  157:    int sn, flags = 0;
        -:  158:
        -:  159:    /* If the argument begins with a -, remove the specified item from the
        -:  160:    schedule. */
    #####:  161:    for (argptr = argv; *argptr && **argptr == '-'; argptr++) {
    #####:  162:	char *arg = *argptr + 1;
    #####:  163:	if (idigit(*arg)) {
    #####:  164:	    sn = atoi(arg);
        -:  165:
    #####:  166:	    if (!sn) {
    #####:  167:		zwarnnam("sched", "usage for delete: sched -<item#>.");
    #####:  168:		return 1;
        -:  169:	    }
    #####:  170:	    for (schl = NULL, sch = schedcmds, sn--;
    #####:  171:		 sch && sn; sch = (schl = sch)->next, sn--);
    #####:  172:	    if (!sch) {
    #####:  173:		zwarnnam("sched", "not that many entries");
    #####:  174:		return 1;
        -:  175:	    }
    #####:  176:	    if (schl)
    #####:  177:		schl->next = sch->next;
        -:  178:	    else {
    #####:  179:		scheddeltimed();
    #####:  180:		schedcmds = sch->next;
    #####:  181:		if (schedcmds) {
        -:  182:		    DPUTS(timedfns && firstnode(timedfns), "BUG: already timed fn (2)");
    #####:  183:		    schedaddtimed();
        -:  184:		}
        -:  185:	    }
    #####:  186:	    zsfree(sch->cmd);
    #####:  187:	    zfree(sch, sizeof(struct schedcmd));
        -:  188:
    #####:  189:	    return 0;
    #####:  190:	} else if (*arg == '-') {
        -:  191:	    /* end of options */
    #####:  192:	    argptr++;
    #####:  193:	    break;
    #####:  194:	} else if (!strcmp(arg, "o")) {
    #####:  195:	    flags |= SCHEDFLAG_TRASH_ZLE;
        -:  196:	} else {
    #####:  197:	    if (*arg)
    #####:  198:		zwarnnam(nam, "bad option: -%c", *arg);
        -:  199:	    else
    #####:  200:		zwarnnam(nam, "option expected");
    #####:  201:	    return 1;
        -:  202:	}
        -:  203:    }
        -:  204:
        -:  205:    /* given no arguments, display the schedule list */
    #####:  206:    if (!*argptr) {
    #####:  207:	for (sn = 1, sch = schedcmds; sch; sch = sch->next, sn++) {
        -:  208:	    char tbuf[60], *flagstr, *endstr;
        -:  209:	    time_t t;
        -:  210:	    struct tm *tmp;
        -:  211:
    #####:  212:	    t = sch->time;
    #####:  213:	    tmp = localtime(&t);
    #####:  214:	    ztrftime(tbuf, 40, "%a %b %e %k:%M:%S", tmp, 0L);
    #####:  215:	    if (sch->flags & SCHEDFLAG_TRASH_ZLE)
    #####:  216:		flagstr = "-o ";
        -:  217:	    else
    #####:  218:		flagstr = "";
    #####:  219:	    if (*sch->cmd == '-')
    #####:  220:		endstr = "-- ";
        -:  221:	    else
    #####:  222:		endstr = "";
    #####:  223:	    printf("%3d %s %s%s%s\n", sn, tbuf, flagstr, endstr,
    #####:  224:		   unmeta(sch->cmd));
        -:  225:	}
    #####:  226:	return 0;
    #####:  227:    } else if (!argptr[1]) {
        -:  228:	/* other than the two cases above, sched *
        -:  229:	 *requires at least two arguments        */
    #####:  230:	zwarnnam("sched", "not enough arguments");
    #####:  231:	return 1;
        -:  232:    }
        -:  233:
        -:  234:    /* The first argument specifies the time to schedule the command for.  The
        -:  235:    remaining arguments form the command. */
    #####:  236:    s = *argptr++;
    #####:  237:    if (*s == '+') {
        -:  238:	/*
        -:  239:	 * + introduces a relative time.  The rest of the argument may be an
        -:  240:	 * hour:minute offset from the current time.  Once the hour and minute
        -:  241:	 * numbers have been extracted, and the format verified, the resulting
        -:  242:	 * offset is simply added to the current time.
        -:  243:	 */
    #####:  244:	zlong zl = zstrtol(s + 1, &s, 10);
    #####:  245:	if (*s == ':') {
    #####:  246:	    m = (long)zstrtol(s + 1, &s, 10);
    #####:  247:	    if (*s == ':')
    #####:  248:		sec = (long)zstrtol(s + 1, &s, 10);
        -:  249:	    else
    #####:  250:		sec = 0;
    #####:  251:	    if (*s) {
    #####:  252:		zwarnnam("sched", "bad time specifier");
    #####:  253:		return 1;
        -:  254:	    }
    #####:  255:	    t = time(NULL) + (long)zl * 3600 + m * 60 + sec;
    #####:  256:	} else if (!*s) {
        -:  257:	    /*
        -:  258:	     * Alternatively, it may simply be a number of seconds.
        -:  259:	     * This is here for consistency with absolute times.
        -:  260:	     */
    #####:  261:	    t = time(NULL) + (time_t)zl;
        -:  262:	} else {
    #####:  263:	    zwarnnam("sched", "bad time specifier");
    #####:  264:	    return 1;
        -:  265:	}
        -:  266:    } else {
        -:  267:	/*
        -:  268:	 * If there is no +, an absolute time must have been given.
        -:  269:	 * This may be in hour:minute format, optionally followed by a string
        -:  270:	 * starting with `a' or `p' (for a.m. or p.m.).  Characters after the
        -:  271:	 * `a' or `p' are ignored.
        -:  272:	 */
    #####:  273:	zlong zl = zstrtol(s, &s, 10);
    #####:  274:	if (*s == ':') {
    #####:  275:	    h = (long)zl;
    #####:  276:	    m = (long)zstrtol(s + 1, &s, 10);
    #####:  277:	    if (*s == ':')
    #####:  278:		sec = (long)zstrtol(s + 1, &s, 10);
        -:  279:	    else
    #####:  280:		sec = 0;
    #####:  281:	    if (*s && *s != 'a' && *s != 'A' && *s != 'p' && *s != 'P') {
    #####:  282:		zwarnnam("sched", "bad time specifier");
    #####:  283:		return 1;
        -:  284:	    }
    #####:  285:	    t = time(NULL);
    #####:  286:	    tm = localtime(&t);
    #####:  287:	    t -= tm->tm_sec + tm->tm_min * 60 + tm->tm_hour * 3600;
    #####:  288:	    if (*s == 'p' || *s == 'P')
    #####:  289:		h += 12;
    #####:  290:	    t += h * 3600 + m * 60 + sec;
        -:  291:	    /*
        -:  292:	     * If the specified time is before the current time, it must refer
        -:  293:	     * to tomorrow.
        -:  294:	     */
    #####:  295:	    if (t < time(NULL))
    #####:  296:		t += 3600 * 24;
    #####:  297:	} else if (!*s) {
        -:  298:	    /*
        -:  299:	     * Otherwise, it must be a raw time specifier.
        -:  300:	     */
    #####:  301:	    t = (long)zl;
        -:  302:	} else {
    #####:  303:	    zwarnnam("sched", "bad time specifier");
    #####:  304:	    return 1;
        -:  305:	}
        -:  306:    }
        -:  307:    /* The time has been calculated; now add the new entry to the linked list
        -:  308:    of scheduled commands. */
    #####:  309:    sch = (struct schedcmd *) zalloc(sizeof *sch);
    #####:  310:    sch->time = t;
    #####:  311:    sch->cmd = zjoin(argptr, ' ', 0);
    #####:  312:    sch->flags = flags;
        -:  313:    /* Insert into list in time order */
    #####:  314:    if (schedcmds) {
    #####:  315:	if (sch->time < schedcmds->time) {
    #####:  316:	    scheddeltimed();
    #####:  317:	    sch->next = schedcmds;
    #####:  318:	    schedcmds = sch;
        -:  319:	    DPUTS(timedfns && firstnode(timedfns), "BUG: already timed fn (3)");
    #####:  320:	    schedaddtimed();
        -:  321:	} else {
    #####:  322:	    for (sch2 = schedcmds;
    #####:  323:		 sch2->next && sch2->next->time < sch->time;
    #####:  324:		 sch2 = sch2->next)
        -:  325:		;
    #####:  326:	    sch->next = sch2->next;
    #####:  327:	    sch2->next = sch;
        -:  328:	}
        -:  329:    } else {
    #####:  330:	sch->next = NULL;
    #####:  331:	schedcmds = sch;
        -:  332:	DPUTS(timedfns && firstnode(timedfns), "BUG: already timed fn (4)");
    #####:  333:	schedaddtimed();
        -:  334:    }
    #####:  335:    return 0;
        -:  336:}
        -:  337:
        -:  338:
        -:  339:/**/
        -:  340:static char **
    #####:  341:schedgetfn(UNUSED(Param pm))
        -:  342:{
        -:  343:    int i;
        -:  344:    struct schedcmd *sch;
        -:  345:    char **ret, **aptr;
        -:  346:
    #####:  347:    for (i = 0, sch = schedcmds; sch; sch = sch->next, i++)
        -:  348:	;
        -:  349:
    #####:  350:    aptr = ret = zhalloc(sizeof(char *) * (i+1));
    #####:  351:    for (sch = schedcmds; sch; sch = sch->next, aptr++) {
        -:  352:	char tbuf[40], *flagstr;
        -:  353:	time_t t;
        -:  354:
    #####:  355:	t = sch->time;
        -:  356:#if defined(PRINTF_HAS_LLD)
    #####:  357:	sprintf(tbuf, "%lld", (long long)t);
        -:  358:#else
        -:  359:	sprintf(tbuf, "%ld", (long)t);
        -:  360:#endif
    #####:  361:	if (sch->flags & SCHEDFLAG_TRASH_ZLE)
    #####:  362:	    flagstr = "-o";
        -:  363:	else
    #####:  364:	    flagstr = "";
    #####:  365:	*aptr = (char *)zhalloc(5 + strlen(tbuf) + strlen(sch->cmd));
    #####:  366:	sprintf(*aptr, "%s:%s:%s", tbuf, flagstr, sch->cmd);
        -:  367:    }
    #####:  368:    *aptr = NULL;
        -:  369:
    #####:  370:    return ret;
        -:  371:}
        -:  372:
        -:  373:
        -:  374:static struct builtin bintab[] = {
        -:  375:    BUILTIN("sched", 0, bin_sched, 0, -1, 0, NULL, NULL),
        -:  376:};
        -:  377:
        -:  378:static const struct gsu_array sched_gsu =
        -:  379:{ schedgetfn, arrsetfn, stdunsetfn };
        -:  380:
        -:  381:static struct paramdef partab[] = {
        -:  382:    SPECIALPMDEF("zsh_scheduled_events", PM_ARRAY|PM_READONLY,
        -:  383:		 &sched_gsu, NULL, NULL)
        -:  384:};
        -:  385:
        -:  386:static struct features module_features = {
        -:  387:    bintab, sizeof(bintab)/sizeof(*bintab),
        -:  388:    NULL, 0,
        -:  389:    NULL, 0,
        -:  390:    partab, sizeof(partab)/sizeof(*partab),
        -:  391:    0
        -:  392:};
        -:  393:
        -:  394:/**/
        -:  395:int
    #####:  396:setup_(UNUSED(Module m))
        -:  397:{
    #####:  398:    return 0;
        -:  399:}
        -:  400:
        -:  401:/**/
        -:  402:int
    #####:  403:features_(Module m, char ***features)
        -:  404:{
    #####:  405:    *features = featuresarray(m, &module_features);
    #####:  406:    return 0;
        -:  407:}
        -:  408:
        -:  409:/**/
        -:  410:int
    #####:  411:enables_(Module m, int **enables)
        -:  412:{
    #####:  413:    return handlefeatures(m, &module_features, enables);
        -:  414:}
        -:  415:
        -:  416:/**/
        -:  417:int
    #####:  418:boot_(UNUSED(Module m))
        -:  419:{
    #####:  420:    addprepromptfn(&checksched);
    #####:  421:    return 0;
        -:  422:}
        -:  423:
        -:  424:/**/
        -:  425:int
    #####:  426:cleanup_(Module m)
        -:  427:{
        -:  428:    struct schedcmd *sch, *schn;
        -:  429:
    #####:  430:    if (schedcmds)
    #####:  431:	scheddeltimed();
    #####:  432:    for (sch = schedcmds; sch; sch = schn) {
    #####:  433:	schn = sch->next;
    #####:  434:	zsfree(sch->cmd);
    #####:  435:	zfree(sch, sizeof(*sch));
        -:  436:    }
    #####:  437:    delprepromptfn(&checksched);
    #####:  438:    return setfeatureenables(m, &module_features, NULL);
        -:  439:}
        -:  440:
        -:  441:/**/
        -:  442:int
    #####:  443:finish_(UNUSED(Module m))
        -:  444:{
    #####:  445:    return 0;
        -:  446:}
