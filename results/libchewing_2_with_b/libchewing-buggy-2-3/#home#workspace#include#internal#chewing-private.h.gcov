        -:    0:Source:/home/workspace/include/internal/chewing-private.h
        -:    1:/**
        -:    2: * chewing-private.h
        -:    3: *
        -:    4: * Copyright (c) 2008, 2010
        -:    5: *      libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:/* *INDENT-OFF* */
        -:   12:#ifndef _CHEWING_CORE_PRIVATE_H
        -:   13:#define _CHEWING_CORE_PRIVATE_H
        -:   14:/* *INDENT-ON* */
        -:   15:
        -:   16:#ifdef HAVE_CONFIG_H
        -:   17:#    include <config.h>
        -:   18:#endif
        -:   19:
        -:   20:#ifdef HAVE_INTTYPES_H
        -:   21:#    include <inttypes.h>
        -:   22:#elif defined HAVE_STDINT_H
        -:   23:#    include <stdint.h>
        -:   24:#endif
        -:   25:
        -:   26:/* visual C++ does not have ssize_t type */
        -:   27:#if defined(_MSC_VER)
        -:   28:#    include <BaseTsd.h>
        -:   29:typedef SSIZE_T ssize_t;
        -:   30:#endif
        -:   31:
        -:   32:#include "global.h"
        -:   33:#include "plat_mmap.h"
        -:   34:
        -:   35:#include "userphrase-private.h"
        -:   36:#if WITH_SQLITE3
        -:   37:#    include "sqlite3.h"
        -:   38:#    include "chewing-sql.h"
        -:   39:#endif
        -:   40:
        -:   41:#define MAX_UTF8_SIZE 4
        -:   42:#define BOPOMOFO_SIZE 4
        -:   43:#define PINYIN_SIZE 10
        -:   44:#define MAX_PHRASE_LEN 11
        -:   45:#define MAX_PHONE_SEQ_LEN 50
        -:   46:#define MIN_CHI_SYMBOL_LEN 0
        -:   47:#define MAX_CHI_SYMBOL_LEN (MAX_PHONE_SEQ_LEN - MAX_PHRASE_LEN)
        -:   48:#define MAX_INTERVAL ( ( MAX_PHONE_SEQ_LEN + 1 ) * MAX_PHONE_SEQ_LEN / 2 )
        -:   49:#define MAX_CHOICE (567)
        -:   50:#define MAX_CHOICE_BUF (50)     /* max length of the choise buffer */
        -:   51:#define N_HASH_BIT (14)
        -:   52:#define HASH_TABLE_SIZE (1<<N_HASH_BIT)
        -:   53:#define EASY_SYMBOL_KEY_TAB_LEN (36)
        -:   54:#define AUX_PREFIX_LEN (3)
        -:   55:
        -:   56:/* For isSymbol */
        -:   57:#define WORD_CHOICE            (0)
        -:   58:#define SYMBOL_CATEGORY_CHOICE (1)
        -:   59:#define SYMBOL_CHOICE_INSERT   (2)
        -:   60:#define SYMBOL_CHOICE_UPDATE   (3)
        -:   61:
        -:   62:#ifndef _MSC_VER
        -:   63:#    undef max
    #####:   64:static inline int max(int a, int b)
        -:   65:{
    #####:   66:    return a > b ? a : b;
        -:   67:}
        -:   68:
        -:   69:#    undef min
        2:   70:static inline int min(int a, int b)
        -:   71:{
        2:   72:    return a < b ? a : b;
        -:   73:}
        -:   74:#endif
        -:   75:
        -:   76:typedef enum KBTYPE {
        -:   77:    KBTYPE_STANDARD,
        -:   78:    KBTYPE_HSU,
        -:   79:    KBTYPE_IBM,
        -:   80:    KBTYPE_GIN_YIEH,
        -:   81:    KBTYPE_ET,
        -:   82:    KBTYPE_ET26,
        -:   83:    KBTYPE_DVORAK,
        -:   84:    KBTYPE_DVORAK_HSU,
        -:   85:    KBTYPE_DACHEN_CP26,
        -:   86:    KBTYPE_HANYU_PINYIN,
        -:   87:    KBTYPE_LUOMA_PINYIN,
        -:   88:    KBTYPE_MSP2,            /* Mandarin Phonetic Symbols II */
        -:   89:    KBTYPE_CARPALX,
        -:   90:    KBTYPE_COUNT
        -:   91:} KBTYPE;
        -:   92:
        -:   93:/**
        -:   94: * @struct TreeType
        -:   95: * @brief node type of the system index tree
        -:   96: *
        -:   97: * This structure may represent both internal nodes and leaf nodes of a phrase
        -:   98: * tree. Two kinds are distinguished by whether key is 0. For an internal node,
        -:   99: * child.begin and child.end give a list of children in the position
        -:  100: * [child.begin, child.end). For a leaf node, phrase.pos offers the position
        -:  101: * of the phrase in system dictionary, and phrase.freq offers frequency of this
        -:  102: * phrase using a specific input method (may be bopomofo or non-phone). Note
        -:  103: * that key in root represents the number of total elements(nodes) in the tree.
        -:  104: */
        -:  105:
        -:  106:typedef struct TreeType {
        -:  107:    unsigned char key[2];
        -:  108:    union {
        -:  109:        struct {
        -:  110:            unsigned char begin[3];
        -:  111:            unsigned char end[3];
        -:  112:        } child;
        -:  113:        struct {
        -:  114:            unsigned char pos[3];
        -:  115:            unsigned char freq[3];
        -:  116:        } phrase;
        -:  117:    };
        -:  118:} TreeType;
        -:  119:
        -:  120:typedef struct PhrasingOutput {
        -:  121:    IntervalType dispInterval[MAX_INTERVAL];
        -:  122:    int nDispInterval;
        -:  123:    int nNumCut;
        -:  124:} PhrasingOutput;
        -:  125:
        -:  126:typedef struct PinYinData {
        -:  127:    int type;
        -:  128:    char keySeq[PINYIN_SIZE];
        -:  129:} PinYinData;
        -:  130:
        -:  131:typedef struct BopomofoData {
        -:  132:    int kbtype;
        -:  133:    int pho_inx[BOPOMOFO_SIZE];
        -:  134:    int pho_inx_alt[BOPOMOFO_SIZE];
        -:  135:    uint16_t phone;
        -:  136:    uint16_t phoneAlt;
        -:  137:    PinYinData pinYinData;
        -:  138:} BopomofoData;
        -:  139:
        -:  140:/**
        -:  141: * @struct AvailInfo
        -:  142: * @brief information of available phrases or characters choices.
        -:  143: */
        -:  144:
        -:  145:typedef struct AvailInfo {
        -:  146:        /** @brief all kinds of lengths of available phrases. */
        -:  147:    struct {
        -:  148:        int len;
        -:  149:                /** @brief phone id. */
        -:  150:        const TreeType *id;
        -:  151:    } avail[MAX_PHRASE_LEN];
        -:  152:        /** @brief total number of available lengths. */
        -:  153:    int nAvail;
        -:  154:        /** @brief the current choosing available length. */
        -:  155:    int currentAvail;
        -:  156:} AvailInfo;
        -:  157:
        -:  158:typedef struct ChoiceInfo {
        -:  159:        /** @brief total page number. */
        -:  160:    int nPage;
        -:  161:        /** @brief current page number. */
        -:  162:    int pageNo;
        -:  163:        /** @brief number of choices per page. */
        -:  164:    int nChoicePerPage;
        -:  165:        /** @brief store possible phrases for being chosen. */
        -:  166:    char totalChoiceStr[MAX_CHOICE][MAX_PHRASE_LEN * MAX_UTF8_SIZE + 1];
        -:  167:        /** @brief number of phrases to choose. */
        -:  168:    int nTotalChoice;
        -:  169:    int oldChiSymbolCursor;
        -:  170:    int isSymbol;
        -:  171:} ChoiceInfo;
        -:  172:
        -:  173:/**
        -:  174: * @struct SymbolEntry
        -:  175: * @brief entry of symbol table
        -:  176: */
        -:  177:typedef struct SymbolEntry {
        -:  178:        /** @brief  nSymnols is total number of symbols in this category.
        -:  179:         * If nSymbols = 0, category is treat as a symbol,
        -:  180:         * which is a zero-terminated utf-8 string.
        -:  181:         * In that case, symbols[] is unused and isn't allocated at all.
        -:  182:         */
        -:  183:    int nSymbols;
        -:  184:
        -:  185:        /** @brief  Category name of these symbols */
        -:  186:    char category[MAX_PHRASE_LEN * MAX_UTF8_SIZE + 1];
        -:  187:
        -:  188:        /** @brief  Symbols in this category.
        -:  189:         * This is an char[] array of variable length.
        -:  190:         * When nSymbols = 0, this array is not allocated.
        -:  191:         */
        -:  192:    char symbols[][MAX_UTF8_SIZE + 1];
        -:  193:} SymbolEntry;
        -:  194:
        -:  195:typedef struct ChewingStaticData {
        -:  196:    const TreeType *tree;
        -:  197:    size_t tree_size;
        -:  198:    plat_mmap tree_mmap;
        -:  199:    const TreeType *tree_cur_pos, *tree_end_pos;
        -:  200:
        -:  201:    const char *dict;
        -:  202:    plat_mmap dict_mmap;
        -:  203:
        -:  204:#if WITH_SQLITE3
        -:  205:    sqlite3 *db;
        -:  206:    sqlite3_stmt *stmt_config[STMT_CONFIG_COUNT];
        -:  207:    sqlite3_stmt *stmt_userphrase[STMT_USERPHRASE_COUNT];
        -:  208:
        -:  209:    unsigned int original_lifetime;
        -:  210:    unsigned int new_lifetime;
        -:  211:#else
        -:  212:    int chewing_lifetime;
        -:  213:
        -:  214:    char hashfilename[200];
        -:  215:    struct HASH_ITEM *hashtable[HASH_TABLE_SIZE];
        -:  216:    struct HASH_ITEM *userphrase_enum;  /* FIXME: Shall be in ChewingData? */
        -:  217:#endif
        -:  218:
        -:  219:    unsigned int n_symbol_entry;
        -:  220:    SymbolEntry **symbol_table;
        -:  221:
        -:  222:    char *g_easy_symbol_value[EASY_SYMBOL_KEY_TAB_LEN];
        -:  223:    int g_easy_symbol_num[EASY_SYMBOL_KEY_TAB_LEN];
        -:  224:
        -:  225:    struct keymap *hanyuInitialsMap;
        -:  226:    struct keymap *hanyuFinalsMap;
        -:  227:    int HANYU_INITIALS;
        -:  228:    int HANYU_FINALS;
        -:  229:} ChewingStaticData;
        -:  230:
        -:  231:typedef enum Category {
        -:  232:    CHEWING_NONE,
        -:  233:    CHEWING_CHINESE,
        -:  234:    CHEWING_SYMBOL,
        -:  235:} Category;
        -:  236:
        -:  237:typedef struct PreeditBuf {
        -:  238:    Category category;
        -:  239:    char char_[MAX_UTF8_SIZE + 1];
        -:  240:} PreeditBuf;
        -:  241:
        -:  242:typedef struct ChewingData {
        -:  243:    AvailInfo availInfo;
        -:  244:    ChoiceInfo choiceInfo;
        -:  245:    PhrasingOutput phrOut;
        -:  246:    BopomofoData bopomofoData;
        -:  247:    ChewingConfigData config;
        -:  248:        /** @brief current input buffer, content==0 means Chinese code */
        -:  249:    PreeditBuf preeditBuf[MAX_PHONE_SEQ_LEN];
        -:  250:    int chiSymbolCursor;
        -:  251:    int chiSymbolBufLen;
        -:  252:    int PointStart;
        -:  253:    int PointEnd;
        -:  254:
        -:  255:    int bShowMsg;
        -:  256:    char showMsg[MAX_UTF8_SIZE * (MAX_PHRASE_LEN + AUX_PREFIX_LEN) + 1];
        -:  257:    int showMsgLen;
        -:  258:
        -:  259:    uint16_t phoneSeq[MAX_PHONE_SEQ_LEN];
        -:  260:    uint16_t phoneSeqAlt[MAX_PHONE_SEQ_LEN];
        -:  261:    int nPhoneSeq;
        -:  262:    char selectStr[MAX_PHONE_SEQ_LEN][MAX_PHONE_SEQ_LEN * MAX_UTF8_SIZE + 1];
        -:  263:    IntervalType selectInterval[MAX_PHONE_SEQ_LEN];
        -:  264:    int nSelect;
        -:  265:    IntervalType preferInterval[MAX_INTERVAL];  /* add connect points */
        -:  266:    int nPrefer;
        -:  267:    int bUserArrCnnct[MAX_PHONE_SEQ_LEN + 1];
        -:  268:    int bUserArrBrkpt[MAX_PHONE_SEQ_LEN + 1];
        -:  269:    int bArrBrkpt[MAX_PHONE_SEQ_LEN + 1];
        -:  270:    int bSymbolArrBrkpt[MAX_PHONE_SEQ_LEN + 1];
        -:  271:    /* "bArrBrkpt[10]=True" means "it breaks between 9 and 10" */
        -:  272:    int bChiSym, bSelect, bFirstKey, bFullShape;
        -:  273:    /* Symbol Key buffer */
        -:  274:    char symbolKeyBuf[MAX_PHONE_SEQ_LEN];
        -:  275:
        -:  276:#if WITH_SQLITE3
        -:  277:    UserPhraseData userphrase_data;
        -:  278:#else
        -:  279:    struct HASH_ITEM *prev_userphrase;
        -:  280:#endif
        -:  281:
        -:  282:    ChewingStaticData static_data;
        -:  283:    void (*logger) (void *data, int level, const char *fmt, ...);
        -:  284:    void *loggerData;
        -:  285:} ChewingData;
        -:  286:
        -:  287:/**
        -:  288: * @struct ChewingOutput
        -:  289: * @brief information for Chewing output.
        -:  290: */
        -:  291:
        -:  292:typedef struct ChewingOutput {
        -:  293:        /** @brief the content of Edit buffer. */
        -:  294:    char preeditBuf[MAX_PHONE_SEQ_LEN * MAX_UTF8_SIZE + 1];
        -:  295:        /** @brief the length of Edit buffer. */
        -:  296:    int chiSymbolBufLen;
        -:  297:        /** @brief current position of the cursor. */
        -:  298:    long chiSymbolCursor;
        -:  299:    long PointStart;
        -:  300:    long PointEnd;
        -:  301:    char bopomofoBuf[BOPOMOFO_SIZE * MAX_UTF8_SIZE + 1];
        -:  302:        /** @brief indicate the method of showing sentence break. */
        -:  303:    IntervalType dispInterval[MAX_INTERVAL];    /* from prefer, considering symbol */
        -:  304:    int nDispInterval;
        -:  305:        /** @brief indicate the break points going to display.*/
        -:  306:    int dispBrkpt[MAX_PHONE_SEQ_LEN + 1];
        -:  307:        /** @brief the string going to commit. */
        -:  308:
        -:  309:    char commitBuf[MAX_PHONE_SEQ_LEN * MAX_UTF8_SIZE + 1];
        -:  310:    int commitBufLen;
        -:  311:        /** @brief information of character selections. */
        -:  312:    ChoiceInfo *pci;
        -:  313:        /** @brief indicate English mode or Chinese mode. */
        -:  314:    int bChiSym;
        -:  315:    int selKey[MAX_SELKEY];
        -:  316:        /** @brief return value. */
        -:  317:    int keystrokeRtn;
        -:  318:        /** @brief user message. */
        -:  319:} ChewingOutput;
        -:  320:
        -:  321:/**
        -:  322: * @struct ChewingContext
        -:  323: * @brief context of Chewing IM
        -:  324: */
        -:  325:
        -:  326:struct ChewingContext {
        -:  327:    ChewingData *data;
        -:  328:    ChewingOutput *output;
        -:  329:    int cand_no;
        -:  330:    int it_no;
        -:  331:    int kb_no;
        -:  332:};
        -:  333:
        -:  334:typedef struct Phrase {
        -:  335:    char phrase[MAX_PHRASE_LEN * MAX_UTF8_SIZE + 1];
        -:  336:    int freq;
        -:  337:} Phrase;
        -:  338:
        -:  339:/* *INDENT-OFF* */
        -:  340:#endif
        -:  341:/* *INDENT-ON* */
