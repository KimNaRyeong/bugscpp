        -:    0:Source:/home/workspace/src/tree.c
        -:    1:/**
        -:    2: * tree.c
        -:    3: *
        -:    4: * Copyright (c) 1999, 2000, 2001
        -:    5: *      Lu-chuan Kung and Kang-pen Chen.
        -:    6: *      All rights reserved.
        -:    7: *
        -:    8: * Copyright (c) 2004-2006, 2008, 2010-2014
        -:    9: *      libchewing Core Team. See ChangeLog for details.
        -:   10: *
        -:   11: * See the file "COPYING" for information on usage and redistribution
        -:   12: * of this file.
        -:   13: */
        -:   14:
        -:   15:/**
        -:   16: * @file tree.c
        -:   17: * @brief API for accessing the phrase tree.
        -:   18: */
        -:   19:#include <assert.h>
        -:   20:#include <stdio.h>
        -:   21:#include <stdlib.h>
        -:   22:#include <string.h>
        -:   23:
        -:   24:#include "chewing-private.h"
        -:   25:#include "chewing-utf8-util.h"
        -:   26:#include "userphrase-private.h"
        -:   27:#include "global.h"
        -:   28:#include "global-private.h"
        -:   29:#include "dict-private.h"
        -:   30:#include "memory-private.h"
        -:   31:#include "tree-private.h"
        -:   32:#include "private.h"
        -:   33:#include "plat_mmap.h"
        -:   34:#include "chewingutil.h"
        -:   35:
        -:   36:#define INTERVAL_SIZE ( ( MAX_PHONE_SEQ_LEN + 1 ) * MAX_PHONE_SEQ_LEN / 2 )
        -:   37:
        -:   38:typedef struct PhraseIntervalType {
        -:   39:    int from, to, source;
        -:   40:    Phrase *p_phr;
        -:   41:} PhraseIntervalType;
        -:   42:
        -:   43:typedef struct RecordNode {
        -:   44:    int *arrIndex;              /* the index array of the things in "interval" */
        -:   45:    int nInter, score;
        -:   46:    struct RecordNode *next;
        -:   47:    int nMatchCnnct;            /* match how many Cnnct. */
        -:   48:} RecordNode;
        -:   49:
        -:   50:typedef struct TreeDataType {
        -:   51:    int leftmost[MAX_PHONE_SEQ_LEN + 1];
        -:   52:    char graph[MAX_PHONE_SEQ_LEN + 1][MAX_PHONE_SEQ_LEN + 1];
        -:   53:    PhraseIntervalType interval[MAX_INTERVAL];
        -:   54:    int nInterval;
        -:   55:    RecordNode *phList;
        -:   56:    int nPhListLen;
        -:   57:} TreeDataType;
        -:   58:
       22:   59:static int IsContain(IntervalType in1, IntervalType in2)
        -:   60:{
       22:   61:    return (in1.from <= in2.from && in1.to >= in2.to);
        -:   62:}
        -:   63:
        7:   64:int IsIntersect(IntervalType in1, IntervalType in2)
        -:   65:{
        7:   66:    return (max(in1.from, in2.from) < min(in1.to, in2.to));
        -:   67:}
        -:   68:
      832:   69:static int PhraseIntervalContain(PhraseIntervalType in1, PhraseIntervalType in2)
        -:   70:{
      832:   71:    return (in1.from <= in2.from && in1.to >= in2.to);
        -:   72:}
        -:   73:
    #####:   74:static int PhraseIntervalIntersect(PhraseIntervalType in1, PhraseIntervalType in2)
        -:   75:{
    #####:   76:    return (max(in1.from, in2.from) < min(in1.to, in2.to));
        -:   77:}
        -:   78:
       26:   79:void TerminateTree(ChewingData *pgdata)
        -:   80:{
       26:   81:    pgdata->static_data.tree = NULL;
       26:   82:    plat_mmap_close(&pgdata->static_data.tree_mmap);
       26:   83:}
        -:   84:
        -:   85:
       26:   86:int InitTree(ChewingData *pgdata, const char *prefix)
        -:   87:{
        -:   88:    char filename[PATH_MAX];
        -:   89:    size_t len;
        -:   90:    size_t offset;
        -:   91:
       26:   92:    len = snprintf(filename, sizeof(filename), "%s" PLAT_SEPARATOR "%s", prefix, PHONE_TREE_FILE);
       26:   93:    if (len + 1 > sizeof(filename))
    #####:   94:        return -1;
        -:   95:
       26:   96:    plat_mmap_set_invalid(&pgdata->static_data.tree_mmap);
       26:   97:    pgdata->static_data.tree_size = plat_mmap_create(&pgdata->static_data.tree_mmap, filename, FLAG_ATTRIBUTE_READ);
       26:   98:    if (pgdata->static_data.tree_size <= 0)
    #####:   99:        return -1;
        -:  100:
       26:  101:    offset = 0;
       26:  102:    pgdata->static_data.tree =
       26:  103:        (const TreeType *) plat_mmap_set_view(&pgdata->static_data.tree_mmap, &offset, &pgdata->static_data.tree_size);
       26:  104:    if (!pgdata->static_data.tree)
    #####:  105:        return -1;
        -:  106:
       26:  107:    return 0;
        -:  108:}
        -:  109:
      474:  110:static int CheckBreakpoint(int from, int to, int bArrBrkpt[])
        -:  111:{
        -:  112:    int i;
        -:  113:
      729:  114:    for (i = from + 1; i < to; i++)
      276:  115:        if (bArrBrkpt[i])
       21:  116:            return 0;
      453:  117:    return 1;
        -:  118:}
        -:  119:
        8:  120:static int CheckUserChoose(ChewingData *pgdata,
        -:  121:                           uint16_t *new_phoneSeq, int from, int to,
        -:  122:                           Phrase **pp_phr,
        -:  123:                           char selectStr[][MAX_PHONE_SEQ_LEN * MAX_UTF8_SIZE + 1],
        -:  124:                           IntervalType selectInterval[], int nSelect)
        -:  125:{
        -:  126:    IntervalType inte, c;
        -:  127:    int chno, len;
        -:  128:    int user_alloc;
        -:  129:    UserPhraseData *pUserPhraseData;
        8:  130:    Phrase *p_phr = ALC(Phrase, 1);
        -:  131:
       8*:  132:    assert(p_phr);
        8:  133:    inte.from = from;
        8:  134:    inte.to = to;
        8:  135:    *pp_phr = NULL;
        -:  136:
        -:  137:    /* pass 1
        -:  138:     * if these exist one selected interval which is not contained by inte
        -:  139:     * but has intersection with inte, then inte is an unacceptable interval
        -:  140:     */
       8*:  141:    for (chno = 0; chno < nSelect; chno++) {
    #####:  142:        c = selectInterval[chno];
    #####:  143:        if (IsIntersect(inte, c) && !IsContain(inte, c)) {
    #####:  144:            free(p_phr);
    #####:  145:            return 0;
        -:  146:        }
        -:  147:    }
        -:  148:
        -:  149:    /* pass 2
        -:  150:     * if there exist one phrase satisfied all selectStr then return 1, else return 0.
        -:  151:     * also store the phrase with highest freq
        -:  152:     */
        8:  153:    pUserPhraseData = UserGetPhraseFirst(pgdata, new_phoneSeq);
        8:  154:    if (pUserPhraseData == NULL)
    #####:  155:      goto end;
        8:  156:    p_phr->freq = -1;
        -:  157:    do {
       8*:  158:        for (chno = 0; chno < nSelect; chno++) {
    #####:  159:            c = selectInterval[chno];
        -:  160:
    #####:  161:            if (IsContain(inte, c)) {
        -:  162:                /*
        -:  163:                 * find a phrase of ph_id where the text contains
        -:  164:                 * 'selectStr[chno]' test if not ok then return 0,
        -:  165:                 * if ok then continue to test. */
    #####:  166:                len = c.to - c.from;
    #####:  167:                if (strncmp(ueStrSeek(pUserPhraseData->wordSeq, c.from - from),
    #####:  168:                            selectStr[chno],
    #####:  169:                            ueStrNBytes(selectStr[chno], len))) {
    #####:  170:                    break;
        -:  171:                }
        -:  172:            }
        -:  173:
        -:  174:        }
        8:  175:        if (chno == nSelect) {
        -:  176:            /* save phrase data to "pp_phr" */
        8:  177:            if (pUserPhraseData->userfreq > p_phr->freq) {
        8:  178:                if ((user_alloc = (to - from)) > 0) {
        8:  179:                    ueStrNCpy(p_phr->phrase, pUserPhraseData->wordSeq, user_alloc, 1);
        -:  180:                }
        8:  181:                p_phr->freq = pUserPhraseData->userfreq;
        8:  182:                *pp_phr = p_phr;
        -:  183:            }
        -:  184:        }
        8:  185:    } while ((pUserPhraseData = UserGetPhraseNext(pgdata, new_phoneSeq)) != NULL);
        8:  186:    UserGetPhraseEnd(pgdata, new_phoneSeq);
        -:  187:
        8:  188:    if (p_phr->freq != -1)
        8:  189:        return 1;
    #####:  190:  end:
    #####:  191:    free(p_phr);
    #####:  192:    return 0;
        -:  193:}
        -:  194:
        -:  195:/*
        -:  196: * phrase is said to satisfy a choose interval if
        -:  197: * their intersections are the same */
      306:  198:static int CheckChoose(ChewingData *pgdata,
        -:  199:                       const TreeType *phrase_parent, int from, int to, Phrase **pp_phr,
        -:  200:                       char selectStr[][MAX_PHONE_SEQ_LEN * MAX_UTF8_SIZE + 1],
        -:  201:                       IntervalType selectInterval[], int nSelect)
        -:  202:{
        -:  203:    IntervalType inte, c;
        -:  204:    int chno, len;
      306:  205:    Phrase *phrase = ALC(Phrase, 1);
        -:  206:
     306*:  207:    assert(phrase);
      306:  208:    inte.from = from;
      306:  209:    inte.to = to;
      306:  210:    *pp_phr = NULL;
        -:  211:
        -:  212:    /* if there exist one phrase satisfied all selectStr then return 1, else return 0. */
      306:  213:    GetPhraseFirst(pgdata, phrase, phrase_parent);
        -:  214:    do {
      328:  215:        for (chno = 0; chno < nSelect; chno++) {
       22:  216:            c = selectInterval[chno];
        -:  217:
       22:  218:            if (IsContain(inte, c)) {
        -:  219:                /* find a phrase under phrase_parent where the text contains
        -:  220:                 * 'selectStr[chno]' test if not ok then return 0, if ok
        -:  221:                 * then continue to test
        -:  222:                 */
       18:  223:                len = c.to - c.from;
       18:  224:                if (memcmp(ueStrSeek(phrase->phrase, c.from - from),
       18:  225:                           selectStr[chno], ueStrNBytes(selectStr[chno], len)))
       14:  226:                    break;
        4:  227:            } else if (IsIntersect(inte, selectInterval[chno])) {
    #####:  228:                free(phrase);
    #####:  229:                return 0;
        -:  230:            }
        -:  231:        }
      320:  232:        if (chno == nSelect) {
      306:  233:            *pp_phr = phrase;
      306:  234:            return 1;
        -:  235:        }
       14:  236:    } while (GetVocabNext(pgdata, phrase));
    #####:  237:    free(phrase);
    #####:  238:    return 0;
        -:  239:}
        -:  240:
     7097:  241:static int CompTreeType(const void *a, const void *b)
        -:  242:{
     7097:  243:    return GetUint16(((TreeType *) a)->key) - GetUint16(((TreeType *) b)->key);
        -:  244:}
        -:  245:
        -:  246:/** @brief search for the phrases have the same pronunciation.*/
        -:  247:/* if phoneSeq[begin] ~ phoneSeq[end] is a phrase, then add an interval
        -:  248: * from (begin) to (end+1)
        -:  249: */
      538:  250:const TreeType *TreeFindPhrase(ChewingData *pgdata, int begin, int end, const uint16_t *phoneSeq)
        -:  251:{
        -:  252:    TreeType target;
      538:  253:    const TreeType *tree_p = pgdata->static_data.tree;
        -:  254:    uint32_t range[2];
        -:  255:    int i;
        -:  256:
     1150:  257:    for (i = begin; i <= end; i++) {
      769:  258:        PutUint16(phoneSeq[i], target.key);
      769:  259:        range[0] = GetUint24(tree_p->child.begin);
      769:  260:        range[1] = GetUint24(tree_p->child.end);
     769*:  261:        assert(range[1] >= range[0]);
      769:  262:        tree_p = (const TreeType *) bsearch(&target, pgdata->static_data.tree + range[0],
      769:  263:                                            range[1] - range[0], sizeof(TreeType), CompTreeType);
        -:  264:
        -:  265:        /* if not found any word then fail. */
      769:  266:        if (!tree_p)
      157:  267:            return NULL;
        -:  268:    }
        -:  269:
        -:  270:    /* If its child has no key value of 0, then it is only a "half" phrase. */
      381:  271:    if (GetUint16(pgdata->static_data.tree[GetUint24(tree_p->child.begin)].key) != 0)
    #####:  272:        return NULL;
      381:  273:    return tree_p;
        -:  274:}
        -:  275:
        -:  276:/**
        -:  277: * @brief get child range of a given parent node.
        -:  278: */
      379:  279:void TreeChildRange(ChewingData *pgdata, const TreeType *parent)
        -:  280:{
      379:  281:    pgdata->static_data.tree_cur_pos = pgdata->static_data.tree + GetUint24(parent->child.begin);
      379:  282:    pgdata->static_data.tree_end_pos = pgdata->static_data.tree + GetUint24(parent->child.end);
      379:  283:}
        -:  284:
      306:  285:static void AddInterval(TreeDataType *ptd, int begin, int end, Phrase *p_phrase, int dict_or_user)
        -:  286:{
      306:  287:    ptd->interval[ptd->nInterval].from = begin;
      306:  288:    ptd->interval[ptd->nInterval].to = end + 1;
      306:  289:    ptd->interval[ptd->nInterval].p_phr = p_phrase;
      306:  290:    ptd->interval[ptd->nInterval].source = dict_or_user;
      306:  291:    ptd->nInterval++;
      306:  292:}
        -:  293:
        -:  294:/* Item which inserts to interval array */
        -:  295:typedef enum {
        -:  296:    USED_PHRASE_NONE,           /**< none of items used */
        -:  297:    USED_PHRASE_USER,           /**< User phrase */
        -:  298:    USED_PHRASE_DICT            /**< Dict phrase */
        -:  299:} UsedPhraseMode;
        -:  300:
      453:  301:static void internal_release_Phrase(UsedPhraseMode mode, Phrase *pUser, Phrase *pDict)
        -:  302:{
        -:  303:    /* we must free unused phrase entry to avoid memory leak. */
      453:  304:    switch (mode) {
        8:  305:    case USED_PHRASE_USER:
        8:  306:        if (pDict != NULL)
        8:  307:            free(pDict);
        8:  308:        break;
      298:  309:    case USED_PHRASE_DICT:
      298:  310:        if (pUser != NULL)
    #####:  311:            free(pUser);
      298:  312:        break;
      147:  313:    default:                   /* In fact, it is always 0 */
      147:  314:        if (pDict != NULL)
    #####:  315:            free(pDict);
      147:  316:        if (pUser != NULL)
    #####:  317:            free(pUser);
      147:  318:        break;
        -:  319:    }
      453:  320:}
        -:  321:
      199:  322:static void FindInterval(ChewingData *pgdata, TreeDataType *ptd)
        -:  323:{
        -:  324:    int end, begin;
        -:  325:    const TreeType *phrase_parent;
        -:  326:    Phrase *p_phrase, *puserphrase, *pdictphrase;
        -:  327:    UsedPhraseMode i_used_phrase;
        -:  328:    uint16_t new_phoneSeq[MAX_PHONE_SEQ_LEN];
        -:  329:    UserPhraseData *userphrase;
        -:  330:
      481:  331:    for (begin = 0; begin < pgdata->nPhoneSeq; begin++) {
      735:  332:        for (end = begin; end < min(pgdata->nPhoneSeq, begin + MAX_PHRASE_LEN); end++) {
      474:  333:            if (!CheckBreakpoint(begin, end + 1, pgdata->bArrBrkpt))
       21:  334:                break;
        -:  335:
        -:  336:            /* set new_phoneSeq */
      453:  337:            memcpy(new_phoneSeq, &pgdata->phoneSeq[begin], sizeof(uint16_t) * (end - begin + 1));
      453:  338:            new_phoneSeq[end - begin + 1] = 0;
      453:  339:            puserphrase = pdictphrase = NULL;
      453:  340:            i_used_phrase = USED_PHRASE_NONE;
        -:  341:
      453:  342:            userphrase = UserGetPhraseFirst(pgdata, new_phoneSeq);
      453:  343:            UserGetPhraseEnd(pgdata, new_phoneSeq);
        -:  344:
      461:  345:            if (userphrase && CheckUserChoose(pgdata, new_phoneSeq, begin, end + 1,
        8:  346:                                              &p_phrase, pgdata->selectStr, pgdata->selectInterval, pgdata->nSelect)) {
        8:  347:                puserphrase = p_phrase;
        -:  348:            }
        -:  349:
        -:  350:            /* check dict phrase */
      453:  351:            phrase_parent = TreeFindPhrase(pgdata, begin, end, pgdata->phoneSeq);
      759:  352:            if (phrase_parent &&
      306:  353:                CheckChoose(pgdata,
        -:  354:                            phrase_parent, begin, end + 1,
      306:  355:                            &p_phrase, pgdata->selectStr, pgdata->selectInterval, pgdata->nSelect)) {
      306:  356:                pdictphrase = p_phrase;
        -:  357:            }
        -:  358:
        -:  359:            /* add only one interval, which has the largest freqency
        -:  360:             * but when the phrase is the same, the user phrase overrides
        -:  361:             * static dict
        -:  362:             */
      453:  363:            if (puserphrase != NULL && pdictphrase == NULL) {
    #####:  364:                i_used_phrase = USED_PHRASE_USER;
      453:  365:            } else if (puserphrase == NULL && pdictphrase != NULL) {
      298:  366:                i_used_phrase = USED_PHRASE_DICT;
      155:  367:            } else if (puserphrase != NULL && pdictphrase != NULL) {
        -:  368:                /* the same phrase, userphrase overrides */
        8:  369:                if (!strcmp(puserphrase->phrase, pdictphrase->phrase)) {
        8:  370:                    i_used_phrase = USED_PHRASE_USER;
        -:  371:                } else {
    #####:  372:                    if (puserphrase->freq > pdictphrase->freq) {
    #####:  373:                        i_used_phrase = USED_PHRASE_USER;
        -:  374:                    } else {
    #####:  375:                        i_used_phrase = USED_PHRASE_DICT;
        -:  376:                    }
        -:  377:                }
        -:  378:            }
      453:  379:            switch (i_used_phrase) {
        8:  380:            case USED_PHRASE_USER:
        8:  381:                AddInterval(ptd, begin, end, puserphrase, IS_USER_PHRASE);
        8:  382:                break;
      298:  383:            case USED_PHRASE_DICT:
      298:  384:                AddInterval(ptd, begin, end, pdictphrase, IS_DICT_PHRASE);
      298:  385:                break;
      147:  386:            case USED_PHRASE_NONE:
        -:  387:            default:
      147:  388:                break;
        -:  389:            }
      453:  390:            internal_release_Phrase(i_used_phrase, puserphrase, pdictphrase);
        -:  391:        }
        -:  392:    }
      199:  393:}
        -:  394:
      199:  395:static void SetInfo(int len, TreeDataType *ptd)
        -:  396:{
        -:  397:    int i, a;
        -:  398:
      680:  399:    for (i = 0; i <= len; i++)
      481:  400:        ptd->leftmost[i] = i;
      505:  401:    for (i = 0; i < ptd->nInterval; i++) {
      306:  402:        ptd->graph[ptd->interval[i].from][ptd->interval[i].to] = 1;
      306:  403:        ptd->graph[ptd->interval[i].to][ptd->interval[i].from] = 1;
        -:  404:    }
        -:  405:
        -:  406:    /* set leftmost */
      680:  407:    for (a = 0; a <= len; a++) {
     1924:  408:        for (i = 0; i <= len; i++) {
     1443:  409:            if (!(ptd->graph[a][i]))
      831:  410:                continue;
      612:  411:            if (ptd->leftmost[i] < ptd->leftmost[a])
      282:  412:                ptd->leftmost[a] = ptd->leftmost[i];
        -:  413:        }
        -:  414:    }
      199:  415:}
        -:  416:
        -:  417:/*
        -:  418: * First we compare the 'nMatchCnnct'.
        -:  419: * If the values are the same, we will compare the 'score'
        -:  420: */
    #####:  421:static int CompRecord(const RecordNode **pa, const RecordNode **pb)
        -:  422:{
    #####:  423:    int diff = (*pb)->nMatchCnnct - (*pa)->nMatchCnnct;
        -:  424:
    #####:  425:    if (diff)
    #####:  426:        return diff;
    #####:  427:    return ((*pb)->score - (*pa)->score);
        -:  428:}
        -:  429:
        -:  430:/*
        -:  431: * Remove the interval containing in another interval.
        -:  432: *
        -:  433: * Example:
        -:  434: * 國民大會 has three interval: 國民, 大會, 國民大會. This function removes
        -:  435: * 國名, 大會 because 國民大會 contains 國民 and 大會.
        -:  436: */
      199:  437:static void Discard1(TreeDataType *ptd)
        -:  438:{
        -:  439:    int a, b;
        -:  440:    char failflag[INTERVAL_SIZE];
        -:  441:    int nInterval2;
        -:  442:
      199:  443:    memset(failflag, 0, sizeof(failflag));
      505:  444:    for (a = 0; a < ptd->nInterval; a++) {
      306:  445:        if (failflag[a])
       24:  446:            continue;
      974:  447:        for (b = 0; b < ptd->nInterval; b++) {
      716:  448:            if (a == b || failflag[b])
      282:  449:                continue;
        -:  450:
        -:  451:            /* interval b is in interval a */
      434:  452:            if (PhraseIntervalContain(ptd->interval[a], ptd->interval[b]))
       48:  453:                continue;
        -:  454:
        -:  455:            /* interval b is in front of interval a */
      386:  456:            if (ptd->interval[b].to <= ptd->interval[a].from)
      175:  457:                continue;
        -:  458:
        -:  459:            /* interval b is in back of interval a */
      211:  460:            if (ptd->interval[a].to <= ptd->interval[b].from)
      187:  461:                continue;
        -:  462:
       24:  463:            break;
        -:  464:        }
        -:  465:        /* if any other interval b is inside or leftside or rightside the
        -:  466:         * interval a */
      282:  467:        if (b >= ptd->nInterval) {
        -:  468:            /* then kill all the intervals inside the interval a */
        -:  469:            int i;
        -:  470:
      914:  471:            for (i = 0; i < ptd->nInterval; i++) {
      656:  472:                if (!failflag[i] && i != a && PhraseIntervalContain(ptd->interval[a], ptd->interval[i])) {
       48:  473:                    failflag[i] = 1;
        -:  474:                }
        -:  475:            }
        -:  476:        }
        -:  477:    }
        -:  478:    /* discard all the intervals whose failflag[a] = 1 */
      199:  479:    nInterval2 = 0;
      505:  480:    for (a = 0; a < ptd->nInterval; a++) {
      306:  481:        if (!failflag[a]) {
      258:  482:            ptd->interval[nInterval2++] = ptd->interval[a];
        -:  483:        } else {
       48:  484:            if (ptd->interval[a].p_phr != NULL) {
       48:  485:                free(ptd->interval[a].p_phr);
        -:  486:            }
        -:  487:        }
        -:  488:    }
      199:  489:    ptd->nInterval = nInterval2;
      199:  490:}
        -:  491:
        -:  492:/*
        -:  493: * Remove the interval that cannot connect to head or tail by other intervals.
        -:  494: *
        -:  495: * Example:
        -:  496: * The input string length is 5
        -:  497: * The available intervals are [1,1], [1,2], [2,3], [2,4], [5,5], [3,5].
        -:  498: *
        -:  499: * The possible connection from head to tail are [1,2][3,5], and
        -:  500: * [1,1][2,4][5,5]. Since [2,3] cannot connect to head or tail, it is removed
        -:  501: * by this function.
        -:  502: */
      199:  503:static void Discard2(TreeDataType *ptd)
        -:  504:{
        -:  505:    int i, j;
        -:  506:    char overwrite[MAX_PHONE_SEQ_LEN];
        -:  507:    char failflag[INTERVAL_SIZE];
        -:  508:    int nInterval2;
        -:  509:
      199:  510:    memset(failflag, 0, sizeof(failflag));
      457:  511:    for (i = 0; i < ptd->nInterval; i++) {
      258:  512:        if (ptd->leftmost[ptd->interval[i].from] == 0)
      258:  513:            continue;
        -:  514:        /* test if interval i is overwrited by other intervals */
    #####:  515:        memset(overwrite, 0, sizeof(overwrite));
    #####:  516:        for (j = 0; j < ptd->nInterval; j++) {
    #####:  517:            if (j == i)
    #####:  518:                continue;
    #####:  519:            memset(&overwrite[ptd->interval[j].from], 1, ptd->interval[j].to - ptd->interval[j].from);
        -:  520:        }
    #####:  521:        if (memchr(&overwrite[ptd->interval[i].from], 1, ptd->interval[i].to - ptd->interval[i].from))
    #####:  522:            failflag[i] = 1;
        -:  523:    }
        -:  524:    /* discard all the intervals whose failflag[a] = 1 */
      199:  525:    nInterval2 = 0;
      457:  526:    for (i = 0; i < ptd->nInterval; i++)
      258:  527:        if (!failflag[i])
      258:  528:            ptd->interval[nInterval2++] = ptd->interval[i];
    #####:  529:        else if (ptd->interval[i].p_phr != NULL)
    #####:  530:            free(ptd->interval[i].p_phr);
      199:  531:    ptd->nInterval = nInterval2;
      199:  532:}
        -:  533:
      262:  534:static void FillPreeditBuf(ChewingData *pgdata, char *phrase, int from, int to)
        -:  535:{
        -:  536:    int i;
      262:  537:    int start = 0;
        -:  538:
     262*:  539:    assert(pgdata);
     262*:  540:    assert(phrase);
     262*:  541:    assert(from < to);
        -:  542:
      262:  543:    start = toPreeditBufIndex(pgdata, from);
        -:  544:
      262:  545:    LOG_VERBOSE("Fill preeditBuf start %d, from = %d, to = %d", start, from, to);
        -:  546:
      548:  547:    for (i = start; i < start - from + to; ++i) {
      286:  548:        ueStrNCpy(pgdata->preeditBuf[i].char_, ueStrSeek(phrase, i - start), 1, STRNCPY_CLOSE);
        -:  549:    }
      262:  550:}
        -:  551:
        -:  552:/* kpchen said, record is the index array of interval */
      199:  553:static void OutputRecordStr(ChewingData *pgdata, const TreeDataType *ptd)
        -:  554:{
        -:  555:    PhraseIntervalType inter;
        -:  556:    int i;
        -:  557:
      457:  558:    for (i = 0; i < ptd->phList->nInter; i++) {
      258:  559:        inter = ptd->interval[ptd->phList->arrIndex[i]];
      258:  560:        FillPreeditBuf(pgdata, inter.p_phr->phrase, inter.from, inter.to);
        -:  561:    }
        -:  562:
      203:  563:    for (i = 0; i < pgdata->nSelect; i++) {
        4:  564:        FillPreeditBuf(pgdata, pgdata->selectStr[i], pgdata->selectInterval[i].from, pgdata->selectInterval[i].to);
        -:  565:    }
      199:  566:}
        -:  567:
      516:  568:static int rule_largest_sum(const int *record, int nRecord, const TreeDataType *ptd)
        -:  569:{
      516:  570:    int i, score = 0;
        -:  571:    PhraseIntervalType inter;
        -:  572:
     1358:  573:    for (i = 0; i < nRecord; i++) {
      842:  574:        inter = ptd->interval[record[i]];
     842*:  575:        assert(inter.p_phr);
      842:  576:        score += inter.to - inter.from;
        -:  577:    }
      516:  578:    return score;
        -:  579:}
        -:  580:
      258:  581:static int rule_largest_avgwordlen(const int *record, int nRecord, const TreeDataType *ptd)
        -:  582:{
        -:  583:    /* constant factor 6=1*2*3, to keep value as integer */
      258:  584:    return 6 * rule_largest_sum(record, nRecord, ptd) / nRecord;
        -:  585:}
        -:  586:
      258:  587:static int rule_smallest_lenvariance(const int *record, int nRecord, const TreeDataType *ptd)
        -:  588:{
      258:  589:    int i, j, score = 0;
        -:  590:    PhraseIntervalType inter1, inter2;
        -:  591:
        -:  592:    /* kcwu: heuristic? why variance no square function? */
      679:  593:    for (i = 0; i < nRecord; i++) {
      651:  594:        for (j = i + 1; j < nRecord; j++) {
      230:  595:            inter1 = ptd->interval[record[i]];
      230:  596:            inter2 = ptd->interval[record[j]];
     230*:  597:            assert(inter1.p_phr && inter2.p_phr);
      230:  598:            score += abs((inter1.to - inter1.from) - (inter2.to - inter2.from));
        -:  599:        }
        -:  600:    }
      258:  601:    return -score;
        -:  602:}
        -:  603:
      258:  604:static int rule_largest_freqsum(const int *record, int nRecord, const TreeDataType *ptd)
        -:  605:{
      258:  606:    int i, score = 0;
        -:  607:    PhraseIntervalType inter;
        -:  608:
      679:  609:    for (i = 0; i < nRecord; i++) {
      421:  610:        inter = ptd->interval[record[i]];
     421*:  611:        assert(inter.p_phr);
        -:  612:
        -:  613:        /* We adjust the 'freq' of One-word Phrase */
      421:  614:        score += (inter.to - inter.from == 1) ? (inter.p_phr->freq / 512) : inter.p_phr->freq;
        -:  615:    }
      258:  616:    return score;
        -:  617:}
        -:  618:
      258:  619:static int LoadPhraseAndCountScore(const int *record, int nRecord, const TreeDataType *ptd)
        -:  620:{
      258:  621:    int total_score = 0;
        -:  622:
        -:  623:    /* NOTE: the balance factor is tuneable */
      258:  624:    if (nRecord) {
      258:  625:        total_score += 1000 * rule_largest_sum(record, nRecord, ptd);
      258:  626:        total_score += 1000 * rule_largest_avgwordlen(record, nRecord, ptd);
      258:  627:        total_score += 100 * rule_smallest_lenvariance(record, nRecord, ptd);
      258:  628:        total_score += rule_largest_freqsum(record, nRecord, ptd);
        -:  629:    }
      258:  630:    return total_score;
        -:  631:}
        -:  632:
    #####:  633:static int IsRecContain(const int *intA, int nA, const int *intB, int nB, const TreeDataType *ptd)
        -:  634:{
        -:  635:    int big, sml;
        -:  636:
    #####:  637:    for (big = 0, sml = 0; sml < nB; sml++) {
    #####:  638:        while ((big < nA) && ptd->interval[intA[big]].from < ptd->interval[intB[sml]].to) {
    #####:  639:            if (PhraseIntervalContain(ptd->interval[intA[big]], ptd->interval[intB[sml]]))
    #####:  640:                break;
    #####:  641:            big++;
        -:  642:        }
    #####:  643:        if ((big >= nA) || ptd->interval[intA[big]].from >= ptd->interval[intB[sml]].to)
    #####:  644:            return 0;
        -:  645:    }
    #####:  646:    return 1;
        -:  647:}
        -:  648:
    #####:  649:static void SortListByScore(TreeDataType *ptd)
        -:  650:{
        -:  651:    int i, listLen;
        -:  652:    RecordNode *p, **arr;
        -:  653:
    #####:  654:    for (listLen = 0, p = ptd->phList; p; listLen++, p = p->next);
    #####:  655:    ptd->nPhListLen = listLen;
        -:  656:
    #####:  657:    assert(listLen);
    #####:  658:    arr = ALC(RecordNode *, listLen);
    #####:  659:    assert(arr);
        -:  660:
    #####:  661:    for (i = 0, p = ptd->phList; i < listLen; p = p->next, i++) {
    #####:  662:        arr[i] = p;
    #####:  663:        p->score = LoadPhraseAndCountScore(p->arrIndex, p->nInter, ptd);
        -:  664:    }
        -:  665:
    #####:  666:    qsort(arr, listLen, sizeof(RecordNode *), (CompFuncType) CompRecord);
        -:  667:
    #####:  668:    ptd->phList = arr[0];
    #####:  669:    for (i = 1; i < listLen; i++) {
    #####:  670:        arr[i - 1]->next = arr[i];
        -:  671:    }
    #####:  672:    arr[listLen - 1]->next = NULL;
        -:  673:
    #####:  674:    free(arr);
    #####:  675:}
        -:  676:
        -:  677:/* when record==NULL then output the "link list" */
    #####:  678:static void SaveRecord(const int *record, int nInter, TreeDataType *ptd)
        -:  679:{
        -:  680:    RecordNode *now, *p, *pre;
        -:  681:
    #####:  682:    pre = NULL;
    #####:  683:    for (p = ptd->phList; p;) {
        -:  684:        /* if  'p' contains 'record', then discard 'record'. */
    #####:  685:        if (IsRecContain(p->arrIndex, p->nInter, record, nInter, ptd))
    #####:  686:            return;
        -:  687:
        -:  688:        /* if 'record' contains 'p', then discard 'p'
        -:  689:         * -- We must deal with the linked list. */
    #####:  690:        if (IsRecContain(record, nInter, p->arrIndex, p->nInter, ptd)) {
    #####:  691:            RecordNode *tp = p;
        -:  692:
    #####:  693:            if (pre)
    #####:  694:                pre->next = p->next;
        -:  695:            else
    #####:  696:                ptd->phList = ptd->phList->next;
    #####:  697:            p = p->next;
    #####:  698:            free(tp->arrIndex);
    #####:  699:            free(tp);
        -:  700:        } else
    #####:  701:            pre = p, p = p->next;
        -:  702:    }
    #####:  703:    now = ALC(RecordNode, 1);
        -:  704:
    #####:  705:    assert(now);
    #####:  706:    now->next = ptd->phList;
    #####:  707:    now->arrIndex = ALC(int, nInter);
        -:  708:
    #####:  709:    assert(now->arrIndex);
    #####:  710:    now->nInter = nInter;
    #####:  711:    memcpy(now->arrIndex, record, nInter * sizeof(int));
    #####:  712:    ptd->phList = now;
        -:  713:}
        -:  714:
    #####:  715:static void RecursiveSave(int depth, int to, int *record, TreeDataType *ptd)
        -:  716:{
        -:  717:    int first, i;
        -:  718:
        -:  719:    /* to find first interval */
    #####:  720:    for (first = record[depth - 1] + 1; ptd->interval[first].from < to && first < ptd->nInterval; first++);
        -:  721:
    #####:  722:    if (first == ptd->nInterval) {
    #####:  723:        SaveRecord(record + 1, depth - 1, ptd);
    #####:  724:        return;
        -:  725:    }
    #####:  726:    record[depth] = first;
    #####:  727:    RecursiveSave(depth + 1, ptd->interval[first].to, record, ptd);
        -:  728:    /* for each interval which intersects first */
    #####:  729:    for (i = first + 1; PhraseIntervalIntersect(ptd->interval[first], ptd->interval[i]) && i < ptd->nInterval; i++) {
    #####:  730:        record[depth] = i;
    #####:  731:        RecursiveSave(depth + 1, ptd->interval[i].to, record, ptd);
        -:  732:    }
        -:  733:}
        -:  734:
    #####:  735:static void SaveList(TreeDataType *ptd)
        -:  736:{
    #####:  737:    int record[MAX_PHONE_SEQ_LEN + 1] = { -1 };
        -:  738:
    #####:  739:    RecursiveSave(1, 0, record, ptd);
    #####:  740:}
        -:  741:
      199:  742:static void InitPhrasing(TreeDataType *ptd)
        -:  743:{
      199:  744:    memset(ptd, 0, sizeof(TreeDataType));
      199:  745:}
        -:  746:
      199:  747:static void SaveDispInterval(PhrasingOutput *ppo, TreeDataType *ptd)
        -:  748:{
        -:  749:    int i;
        -:  750:
      457:  751:    for (i = 0; i < ptd->phList->nInter; i++) {
      258:  752:        ppo->dispInterval[i].from = ptd->interval[ptd->phList->arrIndex[i]].from;
      258:  753:        ppo->dispInterval[i].to = ptd->interval[ptd->phList->arrIndex[i]].to;
        -:  754:    }
      199:  755:    ppo->nDispInterval = ptd->phList->nInter;
      199:  756:}
        -:  757:
      199:  758:static void CleanUpMem(TreeDataType *ptd)
        -:  759:{
        -:  760:    int i;
        -:  761:    RecordNode *pNode;
        -:  762:
      457:  763:    for (i = 0; i < ptd->nInterval; i++) {
      258:  764:        if (ptd->interval[i].p_phr) {
      258:  765:            free(ptd->interval[i].p_phr);
      258:  766:            ptd->interval[i].p_phr = NULL;
        -:  767:        }
        -:  768:    }
      398:  769:    while (ptd->phList != NULL) {
      199:  770:        pNode = ptd->phList;
      199:  771:        ptd->phList = pNode->next;
      199:  772:        free(pNode->arrIndex);
      199:  773:        free(pNode);
        -:  774:    }
      199:  775:}
        -:  776:
    #####:  777:static void CountMatchCnnct(TreeDataType *ptd, const int *bUserArrCnnct, int nPhoneSeq)
        -:  778:{
        -:  779:    RecordNode *p;
        -:  780:    int i, k, sum;
        -:  781:
    #####:  782:    for (p = ptd->phList; p; p = p->next) {
        -:  783:        /* for each record, count its 'nMatchCnnct' */
    #####:  784:        for (sum = 0, i = 1; i < nPhoneSeq; i++) {
    #####:  785:            if (!bUserArrCnnct[i])
    #####:  786:                continue;
        -:  787:            /* check if matching 'cnnct' */
    #####:  788:            for (k = 0; k < p->nInter; k++) {
    #####:  789:                if (ptd->interval[p->arrIndex[k]].from < i && ptd->interval[p->arrIndex[k]].to > i) {
    #####:  790:                    sum++;
    #####:  791:                    break;
        -:  792:                }
        -:  793:            }
        -:  794:        }
    #####:  795:        p->nMatchCnnct = sum;
        -:  796:    }
    #####:  797:}
        -:  798:
      199:  799:static void ShowList(ChewingData *pgdata, const TreeDataType *ptd)
        -:  800:{
        -:  801:    const RecordNode *p;
        -:  802:    int i;
        -:  803:
      199:  804:    DEBUG_OUT("After SaveList :\n");
      398:  805:    for (p = ptd->phList; p; p = p->next) {
      199:  806:        DEBUG_OUT("  interval : ");
      457:  807:        for (i = 0; i < p->nInter; i++) {
      258:  808:            DEBUG_OUT("[%d %d] ", ptd->interval[p->arrIndex[i]].from, ptd->interval[p->arrIndex[i]].to);
        -:  809:        }
      199:  810:        DEBUG_OUT("\n" "      score : %d , nMatchCnnct : %d\n", p->score, p->nMatchCnnct);
        -:  811:    }
      199:  812:    DEBUG_OUT("\n");
      199:  813:}
        -:  814:
    #####:  815:static RecordNode *NextCut(TreeDataType *tdt, PhrasingOutput *ppo)
        -:  816:{
        -:  817:    /* pop nNumCut-th candidate to first */
        -:  818:    int i;
        -:  819:    RecordNode *former;
        -:  820:    RecordNode *want;
        -:  821:
    #####:  822:    if (ppo->nNumCut >= tdt->nPhListLen)
    #####:  823:        ppo->nNumCut = 0;
    #####:  824:    if (ppo->nNumCut == 0)
    #####:  825:        return tdt->phList;
        -:  826:
        -:  827:    /* find the former of our candidate */
    #####:  828:    former = tdt->phList;
    #####:  829:    for (i = 0; i < ppo->nNumCut - 1; i++) {
    #####:  830:        former = former->next;
    #####:  831:        assert(former);
        -:  832:    }
        -:  833:
        -:  834:    /* take the candidate out of the listed list */
    #####:  835:    want = former->next;
    #####:  836:    assert(want);
    #####:  837:    former->next = former->next->next;
        -:  838:
        -:  839:    /* prepend to front of list */
    #####:  840:    want->next = tdt->phList;
    #####:  841:    tdt->phList = want;
        -:  842:
    #####:  843:    return tdt->phList;
        -:  844:}
        -:  845:
      120:  846:static int SortByIncreaseEnd(const void *x, const void *y)
        -:  847:{
      120:  848:    const PhraseIntervalType *interval_x = (const PhraseIntervalType *) x;
      120:  849:    const PhraseIntervalType *interval_y = (const PhraseIntervalType *) y;
        -:  850:
      120:  851:    if (interval_x->to < interval_y->to)
      120:  852:        return -1;
        -:  853:
    #####:  854:    if (interval_x->to > interval_y->to)
    #####:  855:        return 1;
        -:  856:
    #####:  857:    return 0;
        -:  858:}
        -:  859:
      108:  860:static RecordNode *DuplicateRecordAndInsertInterval(const RecordNode *record, TreeDataType *pdt, const int interval_id)
        -:  861:{
      108:  862:    RecordNode *ret = NULL;
        -:  863:
     108*:  864:    assert(record);
     108*:  865:    assert(pdt);
        -:  866:
      108:  867:    ret = ALC(RecordNode, 1);
        -:  868:
      108:  869:    if (!ret)
    #####:  870:        return NULL;
        -:  871:
     108*:  872:    assert(record->nInter + 1);
      108:  873:    ret->arrIndex = ALC(int, record->nInter + 1);
      108:  874:    if (!ret->arrIndex) {
    #####:  875:        free(ret);
    #####:  876:        return NULL;
        -:  877:    }
      108:  878:    ret->nInter = record->nInter + 1;
      108:  879:    memcpy(ret->arrIndex, record->arrIndex, sizeof(record->arrIndex[0]) * record->nInter);
        -:  880:
      108:  881:    ret->arrIndex[ret->nInter - 1] = interval_id;
        -:  882:
      108:  883:    ret->score = LoadPhraseAndCountScore(ret->arrIndex, ret->nInter, pdt);
        -:  884:
      108:  885:    return ret;
        -:  886:}
        -:  887:
      150:  888:static RecordNode *CreateSingleIntervalRecord(TreeDataType *pdt, const int interval_id)
        -:  889:{
      150:  890:    RecordNode *ret = NULL;
        -:  891:
     150*:  892:    assert(pdt);
        -:  893:
      150:  894:    ret = ALC(RecordNode, 1);
        -:  895:
      150:  896:    if (!ret)
    #####:  897:        return NULL;
        -:  898:
      150:  899:    ret->arrIndex = ALC(int, 1);
      150:  900:    if (!ret->arrIndex) {
    #####:  901:        free(ret);
    #####:  902:        return NULL;
        -:  903:    }
        -:  904:
      150:  905:    ret->nInter = 1;
      150:  906:    ret->arrIndex[0] = interval_id;
        -:  907:
      150:  908:    ret->score = LoadPhraseAndCountScore(ret->arrIndex, ret->nInter, pdt);
        -:  909:
      150:  910:    return ret;
        -:  911:}
        -:  912:
       49:  913:static RecordNode *CreateNullIntervalRecord()
        -:  914:{
       49:  915:    RecordNode *ret = NULL;
       49:  916:    ret = ALC(RecordNode, 1);
        -:  917:
       49:  918:    if (!ret)
    #####:  919:        return NULL;
        -:  920:
       49:  921:    ret->arrIndex = ALC(int, 1);
       49:  922:    if (!ret->arrIndex) {
    #####:  923:        free(ret);
    #####:  924:        return NULL;
        -:  925:    }
        -:  926:
       49:  927:    ret->nInter = 0;
       49:  928:    ret->score = 0;
        -:  929:
       49:  930:    return ret;
        -:  931:}
        -:  932:
      390:  933:static void FreeRecord(RecordNode *node)
        -:  934:{
      390:  935:    if (node) {
      108:  936:        free(node->arrIndex);
      108:  937:        free(node);
        -:  938:    }
      390:  939:}
        -:  940:
      199:  941:static void DoDpPhrasing(ChewingData *pgdata, TreeDataType *pdt)
        -:  942:{
      199:  943:    RecordNode *highest_score[MAX_PHONE_SEQ_LEN] = { 0 };
        -:  944:    RecordNode *tmp;
        -:  945:    int prev_end;
        -:  946:    int end;
        -:  947:    int interval_id;
        -:  948:
     199*:  949:    assert(pgdata);
     199*:  950:    assert(pdt);
        -:  951:
        -:  952:    /*
        -:  953:     * Assume P(x,y) is the highest score phrasing result from x to y. The
        -:  954:     * following is formula for P(x,y):
        -:  955:     *
        -:  956:     * P(x,y) = MAX( P(x,y-1)+P(y-1,y), P(x,y-2)+P(y-2,y), ... )
        -:  957:     *
        -:  958:     * While P(x,y-1) is stored in highest_score array, and P(y-1,y) is
        -:  959:     * interval end at y. In this formula, x is always 0.
        -:  960:     *
        -:  961:     * The format of highest_score array is described as following:
        -:  962:     *
        -:  963:     * highest_score[0] = P(0,0)
        -:  964:     * highest_score[1] = P(0,1)
        -:  965:     * ...
        -:  966:     * highest_score[y-1] = P(0,y-1)
        -:  967:     */
        -:  968:
        -:  969:    /* The interval shall be sorted by the increase order of end. */
      199:  970:    qsort(pdt->interval, pdt->nInterval, sizeof(pdt->interval[0]), SortByIncreaseEnd);
        -:  971:
      457:  972:    for (interval_id = 0; interval_id < pdt->nInterval; ++interval_id) {
        -:  973:        /*
        -:  974:         * XXX: pdt->interval.to is excluding, while end is
        -:  975:         * including, so we need to minus one here.
        -:  976:         */
      258:  977:        end = pdt->interval[interval_id].to - 1;
        -:  978:
      258:  979:        prev_end = pdt->interval[interval_id].from - 1;
        -:  980:
      258:  981:        if (prev_end >= 0)
      108:  982:            tmp = DuplicateRecordAndInsertInterval(highest_score[prev_end], pdt, interval_id);
        -:  983:        else
      150:  984:            tmp = CreateSingleIntervalRecord(pdt, interval_id);
        -:  985:
        -:  986:        /* FIXME: shall exit immediately? */
      258:  987:        if (!tmp)
    #####:  988:            continue;
        -:  989:
     258*:  990:        if (highest_score[end] == NULL || highest_score[end]->score < tmp->score) {
      258:  991:            FreeRecord(highest_score[end]);
      258:  992:            highest_score[end] = tmp;
        -:  993:        } else
    #####:  994:            FreeRecord(tmp);
        -:  995:    }
        -:  996:
      199:  997:    if (pgdata->nPhoneSeq - 1 < 0 || highest_score[pgdata->nPhoneSeq - 1] == NULL) {
       49:  998:        pdt->phList = CreateNullIntervalRecord();
        -:  999:    } else {
      150: 1000:        pdt->phList = highest_score[pgdata->nPhoneSeq - 1];
        -: 1001:    }
      199: 1002:    pdt->nPhListLen = 1;
        -: 1003:
      331: 1004:    for (end = 0; end < pgdata->nPhoneSeq - 1; ++end)
      132: 1005:        FreeRecord(highest_score[end]);
      199: 1006:}
        -: 1007:
      199: 1008:int Phrasing(ChewingData *pgdata, int all_phrasing)
        -: 1009:{
        -: 1010:    TreeDataType treeData;
        -: 1011:
      199: 1012:    InitPhrasing(&treeData);
        -: 1013:
      199: 1014:    FindInterval(pgdata, &treeData);
      199: 1015:    SetInfo(pgdata->nPhoneSeq, &treeData);
      199: 1016:    Discard1(&treeData);
      199: 1017:    Discard2(&treeData);
      199: 1018:    if (all_phrasing) {
    #####: 1019:        SaveList(&treeData);
    #####: 1020:        CountMatchCnnct(&treeData, pgdata->bUserArrCnnct, pgdata->nPhoneSeq);
    #####: 1021:        SortListByScore(&treeData);
    #####: 1022:        NextCut(&treeData, &pgdata->phrOut);
        -: 1023:    } else {
      199: 1024:        DoDpPhrasing(pgdata, &treeData);
        -: 1025:    }
        -: 1026:
      199: 1027:    ShowList(pgdata, &treeData);
        -: 1028:
        -: 1029:    /* set phrasing output */
      199: 1030:    OutputRecordStr(pgdata, &treeData);
      199: 1031:    SaveDispInterval(&pgdata->phrOut, &treeData);
        -: 1032:
        -: 1033:    /* free "phrase" */
      199: 1034:    CleanUpMem(&treeData);
      199: 1035:    return 0;
        -: 1036:}
