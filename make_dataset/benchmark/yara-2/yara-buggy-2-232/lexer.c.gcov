        -:    0:Source:lexer.c
        -:    0:Graph:/home/workspace/libyara/lexer.gcno
        -:    0:Data:/home/workspace/libyara/lexer.gcda
        -:    0:Runs:7
        -:    1:#line 2 "lexer.c"
        -:    2:
        -:    3:#line 4 "lexer.c"
        -:    4:
        -:    5:#define  YY_INT_ALIGNED short int
        -:    6:
        -:    7:/* A lexical scanner generated by flex */
        -:    8:
        -:    9:#define FLEX_SCANNER
        -:   10:#define YY_FLEX_MAJOR_VERSION 2
        -:   11:#define YY_FLEX_MINOR_VERSION 6
        -:   12:#define YY_FLEX_SUBMINOR_VERSION 4
        -:   13:#if YY_FLEX_SUBMINOR_VERSION > 0
        -:   14:#define FLEX_BETA
        -:   15:#endif
        -:   16:
        -:   17:#ifdef yy_create_buffer
        -:   18:#define yara_yy_create_buffer_ALREADY_DEFINED
        -:   19:#else
        -:   20:#define yy_create_buffer yara_yy_create_buffer
        -:   21:#endif
        -:   22:
        -:   23:#ifdef yy_delete_buffer
        -:   24:#define yara_yy_delete_buffer_ALREADY_DEFINED
        -:   25:#else
        -:   26:#define yy_delete_buffer yara_yy_delete_buffer
        -:   27:#endif
        -:   28:
        -:   29:#ifdef yy_scan_buffer
        -:   30:#define yara_yy_scan_buffer_ALREADY_DEFINED
        -:   31:#else
        -:   32:#define yy_scan_buffer yara_yy_scan_buffer
        -:   33:#endif
        -:   34:
        -:   35:#ifdef yy_scan_string
        -:   36:#define yara_yy_scan_string_ALREADY_DEFINED
        -:   37:#else
        -:   38:#define yy_scan_string yara_yy_scan_string
        -:   39:#endif
        -:   40:
        -:   41:#ifdef yy_scan_bytes
        -:   42:#define yara_yy_scan_bytes_ALREADY_DEFINED
        -:   43:#else
        -:   44:#define yy_scan_bytes yara_yy_scan_bytes
        -:   45:#endif
        -:   46:
        -:   47:#ifdef yy_init_buffer
        -:   48:#define yara_yy_init_buffer_ALREADY_DEFINED
        -:   49:#else
        -:   50:#define yy_init_buffer yara_yy_init_buffer
        -:   51:#endif
        -:   52:
        -:   53:#ifdef yy_flush_buffer
        -:   54:#define yara_yy_flush_buffer_ALREADY_DEFINED
        -:   55:#else
        -:   56:#define yy_flush_buffer yara_yy_flush_buffer
        -:   57:#endif
        -:   58:
        -:   59:#ifdef yy_load_buffer_state
        -:   60:#define yara_yy_load_buffer_state_ALREADY_DEFINED
        -:   61:#else
        -:   62:#define yy_load_buffer_state yara_yy_load_buffer_state
        -:   63:#endif
        -:   64:
        -:   65:#ifdef yy_switch_to_buffer
        -:   66:#define yara_yy_switch_to_buffer_ALREADY_DEFINED
        -:   67:#else
        -:   68:#define yy_switch_to_buffer yara_yy_switch_to_buffer
        -:   69:#endif
        -:   70:
        -:   71:#ifdef yypush_buffer_state
        -:   72:#define yara_yypush_buffer_state_ALREADY_DEFINED
        -:   73:#else
        -:   74:#define yypush_buffer_state yara_yypush_buffer_state
        -:   75:#endif
        -:   76:
        -:   77:#ifdef yypop_buffer_state
        -:   78:#define yara_yypop_buffer_state_ALREADY_DEFINED
        -:   79:#else
        -:   80:#define yypop_buffer_state yara_yypop_buffer_state
        -:   81:#endif
        -:   82:
        -:   83:#ifdef yyensure_buffer_stack
        -:   84:#define yara_yyensure_buffer_stack_ALREADY_DEFINED
        -:   85:#else
        -:   86:#define yyensure_buffer_stack yara_yyensure_buffer_stack
        -:   87:#endif
        -:   88:
        -:   89:#ifdef yylex
        -:   90:#define yara_yylex_ALREADY_DEFINED
        -:   91:#else
        -:   92:#define yylex yara_yylex
        -:   93:#endif
        -:   94:
        -:   95:#ifdef yyrestart
        -:   96:#define yara_yyrestart_ALREADY_DEFINED
        -:   97:#else
        -:   98:#define yyrestart yara_yyrestart
        -:   99:#endif
        -:  100:
        -:  101:#ifdef yylex_init
        -:  102:#define yara_yylex_init_ALREADY_DEFINED
        -:  103:#else
        -:  104:#define yylex_init yara_yylex_init
        -:  105:#endif
        -:  106:
        -:  107:#ifdef yylex_init_extra
        -:  108:#define yara_yylex_init_extra_ALREADY_DEFINED
        -:  109:#else
        -:  110:#define yylex_init_extra yara_yylex_init_extra
        -:  111:#endif
        -:  112:
        -:  113:#ifdef yylex_destroy
        -:  114:#define yara_yylex_destroy_ALREADY_DEFINED
        -:  115:#else
        -:  116:#define yylex_destroy yara_yylex_destroy
        -:  117:#endif
        -:  118:
        -:  119:#ifdef yyget_debug
        -:  120:#define yara_yyget_debug_ALREADY_DEFINED
        -:  121:#else
        -:  122:#define yyget_debug yara_yyget_debug
        -:  123:#endif
        -:  124:
        -:  125:#ifdef yyset_debug
        -:  126:#define yara_yyset_debug_ALREADY_DEFINED
        -:  127:#else
        -:  128:#define yyset_debug yara_yyset_debug
        -:  129:#endif
        -:  130:
        -:  131:#ifdef yyget_extra
        -:  132:#define yara_yyget_extra_ALREADY_DEFINED
        -:  133:#else
        -:  134:#define yyget_extra yara_yyget_extra
        -:  135:#endif
        -:  136:
        -:  137:#ifdef yyset_extra
        -:  138:#define yara_yyset_extra_ALREADY_DEFINED
        -:  139:#else
        -:  140:#define yyset_extra yara_yyset_extra
        -:  141:#endif
        -:  142:
        -:  143:#ifdef yyget_in
        -:  144:#define yara_yyget_in_ALREADY_DEFINED
        -:  145:#else
        -:  146:#define yyget_in yara_yyget_in
        -:  147:#endif
        -:  148:
        -:  149:#ifdef yyset_in
        -:  150:#define yara_yyset_in_ALREADY_DEFINED
        -:  151:#else
        -:  152:#define yyset_in yara_yyset_in
        -:  153:#endif
        -:  154:
        -:  155:#ifdef yyget_out
        -:  156:#define yara_yyget_out_ALREADY_DEFINED
        -:  157:#else
        -:  158:#define yyget_out yara_yyget_out
        -:  159:#endif
        -:  160:
        -:  161:#ifdef yyset_out
        -:  162:#define yara_yyset_out_ALREADY_DEFINED
        -:  163:#else
        -:  164:#define yyset_out yara_yyset_out
        -:  165:#endif
        -:  166:
        -:  167:#ifdef yyget_leng
        -:  168:#define yara_yyget_leng_ALREADY_DEFINED
        -:  169:#else
        -:  170:#define yyget_leng yara_yyget_leng
        -:  171:#endif
        -:  172:
        -:  173:#ifdef yyget_text
        -:  174:#define yara_yyget_text_ALREADY_DEFINED
        -:  175:#else
        -:  176:#define yyget_text yara_yyget_text
        -:  177:#endif
        -:  178:
        -:  179:#ifdef yyget_lineno
        -:  180:#define yara_yyget_lineno_ALREADY_DEFINED
        -:  181:#else
        -:  182:#define yyget_lineno yara_yyget_lineno
        -:  183:#endif
        -:  184:
        -:  185:#ifdef yyset_lineno
        -:  186:#define yara_yyset_lineno_ALREADY_DEFINED
        -:  187:#else
        -:  188:#define yyset_lineno yara_yyset_lineno
        -:  189:#endif
        -:  190:
        -:  191:#ifdef yyget_column
        -:  192:#define yara_yyget_column_ALREADY_DEFINED
        -:  193:#else
        -:  194:#define yyget_column yara_yyget_column
        -:  195:#endif
        -:  196:
        -:  197:#ifdef yyset_column
        -:  198:#define yara_yyset_column_ALREADY_DEFINED
        -:  199:#else
        -:  200:#define yyset_column yara_yyset_column
        -:  201:#endif
        -:  202:
        -:  203:#ifdef yywrap
        -:  204:#define yara_yywrap_ALREADY_DEFINED
        -:  205:#else
        -:  206:#define yywrap yara_yywrap
        -:  207:#endif
        -:  208:
        -:  209:#ifdef yyget_lval
        -:  210:#define yara_yyget_lval_ALREADY_DEFINED
        -:  211:#else
        -:  212:#define yyget_lval yara_yyget_lval
        -:  213:#endif
        -:  214:
        -:  215:#ifdef yyset_lval
        -:  216:#define yara_yyset_lval_ALREADY_DEFINED
        -:  217:#else
        -:  218:#define yyset_lval yara_yyset_lval
        -:  219:#endif
        -:  220:
        -:  221:#ifdef yyalloc
        -:  222:#define yara_yyalloc_ALREADY_DEFINED
        -:  223:#else
        -:  224:#define yyalloc yara_yyalloc
        -:  225:#endif
        -:  226:
        -:  227:#ifdef yyrealloc
        -:  228:#define yara_yyrealloc_ALREADY_DEFINED
        -:  229:#else
        -:  230:#define yyrealloc yara_yyrealloc
        -:  231:#endif
        -:  232:
        -:  233:#ifdef yyfree
        -:  234:#define yara_yyfree_ALREADY_DEFINED
        -:  235:#else
        -:  236:#define yyfree yara_yyfree
        -:  237:#endif
        -:  238:
        -:  239:/* First, we deal with  platform-specific or compiler-specific issues. */
        -:  240:
        -:  241:/* begin standard C headers. */
        -:  242:#include <stdio.h>
        -:  243:#include <string.h>
        -:  244:#include <errno.h>
        -:  245:#include <stdlib.h>
        -:  246:
        -:  247:/* end standard C headers. */
        -:  248:
        -:  249:/* flex integer type definitions */
        -:  250:
        -:  251:#ifndef FLEXINT_H
        -:  252:#define FLEXINT_H
        -:  253:
        -:  254:/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
        -:  255:
        -:  256:#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
        -:  257:
        -:  258:/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
        -:  259: * if you want the limit (max/min) macros for int types. 
        -:  260: */
        -:  261:#ifndef __STDC_LIMIT_MACROS
        -:  262:#define __STDC_LIMIT_MACROS 1
        -:  263:#endif
        -:  264:
        -:  265:#include <inttypes.h>
        -:  266:typedef int8_t flex_int8_t;
        -:  267:typedef uint8_t flex_uint8_t;
        -:  268:typedef int16_t flex_int16_t;
        -:  269:typedef uint16_t flex_uint16_t;
        -:  270:typedef int32_t flex_int32_t;
        -:  271:typedef uint32_t flex_uint32_t;
        -:  272:#else
        -:  273:typedef signed char flex_int8_t;
        -:  274:typedef short int flex_int16_t;
        -:  275:typedef int flex_int32_t;
        -:  276:typedef unsigned char flex_uint8_t; 
        -:  277:typedef unsigned short int flex_uint16_t;
        -:  278:typedef unsigned int flex_uint32_t;
        -:  279:
        -:  280:/* Limits of integral types. */
        -:  281:#ifndef INT8_MIN
        -:  282:#define INT8_MIN               (-128)
        -:  283:#endif
        -:  284:#ifndef INT16_MIN
        -:  285:#define INT16_MIN              (-32767-1)
        -:  286:#endif
        -:  287:#ifndef INT32_MIN
        -:  288:#define INT32_MIN              (-2147483647-1)
        -:  289:#endif
        -:  290:#ifndef INT8_MAX
        -:  291:#define INT8_MAX               (127)
        -:  292:#endif
        -:  293:#ifndef INT16_MAX
        -:  294:#define INT16_MAX              (32767)
        -:  295:#endif
        -:  296:#ifndef INT32_MAX
        -:  297:#define INT32_MAX              (2147483647)
        -:  298:#endif
        -:  299:#ifndef UINT8_MAX
        -:  300:#define UINT8_MAX              (255U)
        -:  301:#endif
        -:  302:#ifndef UINT16_MAX
        -:  303:#define UINT16_MAX             (65535U)
        -:  304:#endif
        -:  305:#ifndef UINT32_MAX
        -:  306:#define UINT32_MAX             (4294967295U)
        -:  307:#endif
        -:  308:
        -:  309:#ifndef SIZE_MAX
        -:  310:#define SIZE_MAX               (~(size_t)0)
        -:  311:#endif
        -:  312:
        -:  313:#endif /* ! C99 */
        -:  314:
        -:  315:#endif /* ! FLEXINT_H */
        -:  316:
        -:  317:/* begin standard C++ headers. */
        -:  318:
        -:  319:/* TODO: this is always defined, so inline it */
        -:  320:#define yyconst const
        -:  321:
        -:  322:#if defined(__GNUC__) && __GNUC__ >= 3
        -:  323:#define yynoreturn __attribute__((__noreturn__))
        -:  324:#else
        -:  325:#define yynoreturn
        -:  326:#endif
        -:  327:
        -:  328:/* Returned upon end-of-file. */
        -:  329:#define YY_NULL 0
        -:  330:
        -:  331:/* Promotes a possibly negative, possibly signed char to an
        -:  332: *   integer in range [0..255] for use as an array index.
        -:  333: */
        -:  334:#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
        -:  335:
        -:  336:/* An opaque pointer. */
        -:  337:#ifndef YY_TYPEDEF_YY_SCANNER_T
        -:  338:#define YY_TYPEDEF_YY_SCANNER_T
        -:  339:typedef void* yyscan_t;
        -:  340:#endif
        -:  341:
        -:  342:/* For convenience, these vars (plus the bison vars far below)
        -:  343:   are macros in the reentrant scanner. */
        -:  344:#define yyin yyg->yyin_r
        -:  345:#define yyout yyg->yyout_r
        -:  346:#define yyextra yyg->yyextra_r
        -:  347:#define yyleng yyg->yyleng_r
        -:  348:#define yytext yyg->yytext_r
        -:  349:#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
        -:  350:#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
        -:  351:#define yy_flex_debug yyg->yy_flex_debug_r
        -:  352:
        -:  353:/* Enter a start condition.  This macro really ought to take a parameter,
        -:  354: * but we do it the disgusting crufty way forced on us by the ()-less
        -:  355: * definition of BEGIN.
        -:  356: */
        -:  357:#define BEGIN yyg->yy_start = 1 + 2 *
        -:  358:/* Translate the current start state into a value that can be later handed
        -:  359: * to BEGIN to return to the state.  The YYSTATE alias is for lex
        -:  360: * compatibility.
        -:  361: */
        -:  362:#define YY_START ((yyg->yy_start - 1) / 2)
        -:  363:#define YYSTATE YY_START
        -:  364:/* Action number for EOF rule of a given start state. */
        -:  365:#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
        -:  366:/* Special action meaning "start processing a new file". */
        -:  367:#define YY_NEW_FILE yyrestart( yyin , yyscanner )
        -:  368:#define YY_END_OF_BUFFER_CHAR 0
        -:  369:
        -:  370:/* Size of default input buffer. */
        -:  371:#ifndef YY_BUF_SIZE
        -:  372:#ifdef __ia64__
        -:  373:/* On IA-64, the buffer size is 16k, not 8k.
        -:  374: * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
        -:  375: * Ditto for the __ia64__ case accordingly.
        -:  376: */
        -:  377:#define YY_BUF_SIZE 32768
        -:  378:#else
        -:  379:#define YY_BUF_SIZE 16384
        -:  380:#endif /* __ia64__ */
        -:  381:#endif
        -:  382:
        -:  383:/* The state buf must be large enough to hold one state per character in the main buffer.
        -:  384: */
        -:  385:#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
        -:  386:
        -:  387:#ifndef YY_TYPEDEF_YY_BUFFER_STATE
        -:  388:#define YY_TYPEDEF_YY_BUFFER_STATE
        -:  389:typedef struct yy_buffer_state *YY_BUFFER_STATE;
        -:  390:#endif
        -:  391:
        -:  392:#ifndef YY_TYPEDEF_YY_SIZE_T
        -:  393:#define YY_TYPEDEF_YY_SIZE_T
        -:  394:typedef size_t yy_size_t;
        -:  395:#endif
        -:  396:
        -:  397:#define EOB_ACT_CONTINUE_SCAN 0
        -:  398:#define EOB_ACT_END_OF_FILE 1
        -:  399:#define EOB_ACT_LAST_MATCH 2
        -:  400:    
        -:  401:    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
        -:  402:     *       access to the local variable yy_act. Since yyless() is a macro, it would break
        -:  403:     *       existing scanners that call yyless() from OUTSIDE yylex.
        -:  404:     *       One obvious solution it to make yy_act a global. I tried that, and saw
        -:  405:     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
        -:  406:     *       normally declared as a register variable-- so it is not worth it.
        -:  407:     */
        -:  408:    #define  YY_LESS_LINENO(n) \
        -:  409:            do { \
        -:  410:                int yyl;\
        -:  411:                for ( yyl = n; yyl < yyleng; ++yyl )\
        -:  412:                    if ( yytext[yyl] == '\n' )\
        -:  413:                        --yylineno;\
        -:  414:            }while(0)
        -:  415:    #define YY_LINENO_REWIND_TO(dst) \
        -:  416:            do {\
        -:  417:                const char *p;\
        -:  418:                for ( p = yy_cp-1; p >= (dst); --p)\
        -:  419:                    if ( *p == '\n' )\
        -:  420:                        --yylineno;\
        -:  421:            }while(0)
        -:  422:    
        -:  423:/* Return all but the first "n" matched characters back to the input stream. */
        -:  424:#define yyless(n) \
        -:  425:	do \
        -:  426:		{ \
        -:  427:		/* Undo effects of setting up yytext. */ \
        -:  428:        int yyless_macro_arg = (n); \
        -:  429:        YY_LESS_LINENO(yyless_macro_arg);\
        -:  430:		*yy_cp = yyg->yy_hold_char; \
        -:  431:		YY_RESTORE_YY_MORE_OFFSET \
        -:  432:		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
        -:  433:		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        -:  434:		} \
        -:  435:	while ( 0 )
        -:  436:#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )
        -:  437:
        -:  438:#ifndef YY_STRUCT_YY_BUFFER_STATE
        -:  439:#define YY_STRUCT_YY_BUFFER_STATE
        -:  440:struct yy_buffer_state
        -:  441:	{
        -:  442:	FILE *yy_input_file;
        -:  443:
        -:  444:	char *yy_ch_buf;		/* input buffer */
        -:  445:	char *yy_buf_pos;		/* current position in input buffer */
        -:  446:
        -:  447:	/* Size of input buffer in bytes, not including room for EOB
        -:  448:	 * characters.
        -:  449:	 */
        -:  450:	int yy_buf_size;
        -:  451:
        -:  452:	/* Number of characters read into yy_ch_buf, not including EOB
        -:  453:	 * characters.
        -:  454:	 */
        -:  455:	int yy_n_chars;
        -:  456:
        -:  457:	/* Whether we "own" the buffer - i.e., we know we created it,
        -:  458:	 * and can realloc() it to grow it, and should free() it to
        -:  459:	 * delete it.
        -:  460:	 */
        -:  461:	int yy_is_our_buffer;
        -:  462:
        -:  463:	/* Whether this is an "interactive" input source; if so, and
        -:  464:	 * if we're using stdio for input, then we want to use getc()
        -:  465:	 * instead of fread(), to make sure we stop fetching input after
        -:  466:	 * each newline.
        -:  467:	 */
        -:  468:	int yy_is_interactive;
        -:  469:
        -:  470:	/* Whether we're considered to be at the beginning of a line.
        -:  471:	 * If so, '^' rules will be active on the next match, otherwise
        -:  472:	 * not.
        -:  473:	 */
        -:  474:	int yy_at_bol;
        -:  475:
        -:  476:    int yy_bs_lineno; /**< The line count. */
        -:  477:    int yy_bs_column; /**< The column count. */
        -:  478:
        -:  479:	/* Whether to try to fill the input buffer when we reach the
        -:  480:	 * end of it.
        -:  481:	 */
        -:  482:	int yy_fill_buffer;
        -:  483:
        -:  484:	int yy_buffer_status;
        -:  485:
        -:  486:#define YY_BUFFER_NEW 0
        -:  487:#define YY_BUFFER_NORMAL 1
        -:  488:	/* When an EOF's been seen but there's still some text to process
        -:  489:	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
        -:  490:	 * shouldn't try reading from the input source any more.  We might
        -:  491:	 * still have a bunch of tokens to match, though, because of
        -:  492:	 * possible backing-up.
        -:  493:	 *
        -:  494:	 * When we actually see the EOF, we change the status to "new"
        -:  495:	 * (via yyrestart()), so that the user can continue scanning by
        -:  496:	 * just pointing yyin at a new input file.
        -:  497:	 */
        -:  498:#define YY_BUFFER_EOF_PENDING 2
        -:  499:
        -:  500:	};
        -:  501:#endif /* !YY_STRUCT_YY_BUFFER_STATE */
        -:  502:
        -:  503:/* We provide macros for accessing buffer states in case in the
        -:  504: * future we want to put the buffer states in a more general
        -:  505: * "scanner state".
        -:  506: *
        -:  507: * Returns the top of the stack, or NULL.
        -:  508: */
        -:  509:#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
        -:  510:                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
        -:  511:                          : NULL)
        -:  512:/* Same as previous macro, but useful when we know that the buffer stack is not
        -:  513: * NULL or when we need an lvalue. For internal use only.
        -:  514: */
        -:  515:#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]
        -:  516:
        -:  517:void yyrestart ( FILE *input_file , yyscan_t yyscanner );
        -:  518:void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
        -:  519:YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
        -:  520:void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
        -:  521:void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
        -:  522:void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
        -:  523:void yypop_buffer_state ( yyscan_t yyscanner );
        -:  524:
        -:  525:static void yyensure_buffer_stack ( yyscan_t yyscanner );
        -:  526:static void yy_load_buffer_state ( yyscan_t yyscanner );
        -:  527:static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
        -:  528:#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)
        -:  529:
        -:  530:YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
        -:  531:YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
        -:  532:YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );
        -:  533:
        -:  534:void *yyalloc ( yy_size_t , yyscan_t yyscanner );
        -:  535:void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
        -:  536:void yyfree ( void * , yyscan_t yyscanner );
        -:  537:
        -:  538:#define yy_new_buffer yy_create_buffer
        -:  539:#define yy_set_interactive(is_interactive) \
        -:  540:	{ \
        -:  541:	if ( ! YY_CURRENT_BUFFER ){ \
        -:  542:        yyensure_buffer_stack (yyscanner); \
        -:  543:		YY_CURRENT_BUFFER_LVALUE =    \
        -:  544:            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
        -:  545:	} \
        -:  546:	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
        -:  547:	}
        -:  548:#define yy_set_bol(at_bol) \
        -:  549:	{ \
        -:  550:	if ( ! YY_CURRENT_BUFFER ){\
        -:  551:        yyensure_buffer_stack (yyscanner); \
        -:  552:		YY_CURRENT_BUFFER_LVALUE =    \
        -:  553:            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
        -:  554:	} \
        -:  555:	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
        -:  556:	}
        -:  557:#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
        -:  558:
        -:  559:/* Begin user sect3 */
        -:  560:
        -:  561:#define yara_yywrap(yyscanner) (/*CONSTCOND*/1)
        -:  562:#define YY_SKIP_YYWRAP
        -:  563:typedef flex_uint8_t YY_CHAR;
        -:  564:
        -:  565:typedef int yy_state_type;
        -:  566:
        -:  567:#define yytext_ptr yytext_r
        -:  568:
        -:  569:static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
        -:  570:static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
        -:  571:static int yy_get_next_buffer ( yyscan_t yyscanner );
        -:  572:static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );
        -:  573:
        -:  574:/* Done after the current pattern has been matched and before the
        -:  575: * corresponding action - sets up yytext.
        -:  576: */
        -:  577:#define YY_DO_BEFORE_ACTION \
        -:  578:	yyg->yytext_ptr = yy_bp; \
        -:  579:	yyleng = (int) (yy_cp - yy_bp); \
        -:  580:	yyg->yy_hold_char = *yy_cp; \
        -:  581:	*yy_cp = '\0'; \
        -:  582:	yyg->yy_c_buf_p = yy_cp;
        -:  583:#define YY_NUM_RULES 75
        -:  584:#define YY_END_OF_BUFFER 76
        -:  585:/* This struct is not used in this scanner,
        -:  586:   but its presence is necessary. */
        -:  587:struct yy_trans_info
        -:  588:	{
        -:  589:	flex_int32_t yy_verify;
        -:  590:	flex_int32_t yy_nxt;
        -:  591:	};
        -:  592:static const flex_int16_t yy_accept[248] =
        -:  593:    {   0,
        -:  594:        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        -:  595:       76,   74,   73,   73,   49,   70,   47,   46,   74,   71,
        -:  596:       52,   52,    2,   74,    3,   48,   51,   51,   51,   51,
        -:  597:       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
        -:  598:       51,   51,   51,   74,   62,   63,   56,   75,   68,   69,
        -:  599:       65,   75,   43,   44,   40,   40,   49,    7,   47,   45,
        -:  600:       46,    1,   38,   41,    0,   52,    0,    0,    0,    0,
        -:  601:        8,    4,    6,    5,    9,   48,   51,   51,   51,   51,
        -:  602:       26,   51,   51,   51,   51,   51,   51,   51,   51,   27,
        -:  603:       51,   51,   51,   28,   25,   51,   51,   51,   51,   51,
        -:  604:
        -:  605:       51,   51,   51,    0,    0,   62,   64,   59,   60,   58,
        -:  606:       57,   64,   68,   65,   65,   67,   66,   43,   39,   41,
        -:  607:       53,   52,   55,   54,   31,   24,   32,   51,   51,   51,
        -:  608:       51,   51,   30,   51,   51,   51,   51,   51,   51,   51,
        -:  609:       51,   23,   51,   51,   51,   51,   51,   51,   51,   17,
        -:  610:       72,    0,    0,    0,   51,   51,   51,   51,   51,   51,
        -:  611:       51,   51,   51,   51,   51,   51,   50,   51,   13,   51,
        -:  612:       51,   12,   51,   29,   21,   16,    0,    0,    0,    0,
        -:  613:        0,   72,   61,   15,   51,   51,   51,   22,   51,   51,
        -:  614:       51,   51,   51,   51,   51,   51,   51,   51,    0,    0,
        -:  615:
        -:  616:       51,   51,   51,   51,   51,   11,   37,   51,   50,   51,
        -:  617:       19,   51,   51,    0,    0,    0,    0,    0,   72,   51,
        -:  618:       51,   51,   51,   51,   51,   35,   10,   14,    0,   72,
        -:  619:        0,    0,    0,   51,   36,   51,   34,   18,    0,    0,
        -:  620:        0,    0,   20,   51,   42,   33,    0
        -:  621:    } ;
        -:  622:
        -:  623:static const YY_CHAR yy_ec[256] =
        -:  624:    {   0,
        -:  625:        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        -:  626:        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        -:  627:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  628:        1,    2,    5,    6,    7,    8,    1,    1,    1,    9,
        -:  629:        9,   10,    1,    1,    9,   11,   12,   13,   14,   15,
        -:  630:       16,   17,   17,   18,   17,   19,   20,    1,    1,   21,
        -:  631:       22,   23,    9,   24,   25,   26,   25,   25,   25,   25,
        -:  632:       27,   27,   27,   27,   28,   27,   29,   27,   27,   27,
        -:  633:       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
        -:  634:        9,   30,    9,    1,   31,    1,   32,   33,   34,   35,
        -:  635:
        -:  636:       36,   37,   38,   39,   40,   27,   27,   41,   42,   43,
        -:  637:       44,   45,   27,   46,   47,   48,   49,   50,   51,   52,
        -:  638:       53,   54,   55,    9,   56,    1,    1,    1,    1,    1,
        -:  639:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  640:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  641:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  642:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  643:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  644:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  645:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  646:
        -:  647:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  648:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  649:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  650:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  651:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  652:        1,    1,    1,    1,    1
        -:  653:    } ;
        -:  654:
        -:  655:static const YY_CHAR yy_meta[57] =
        -:  656:    {   0,
        -:  657:        1,    2,    3,    2,    1,    4,    1,    1,    2,    5,
        -:  658:        6,    7,    8,    8,    8,    8,    8,    8,    8,    8,
        -:  659:        1,    9,    1,    1,   10,   10,   11,   12,   12,   13,
        -:  660:       11,   10,   10,   10,   10,   10,   10,   11,   11,   11,
        -:  661:       11,   11,   11,   12,   11,   11,   11,   11,   11,   11,
        -:  662:       11,   12,   11,   11,    1,    1
        -:  663:    } ;
        -:  664:
        -:  665:static const flex_int16_t yy_base[270] =
        -:  666:    {   0,
        -:  667:        0,    0,   54,   55,   56,   59,  587,  586,  581,  579,
        -:  668:      560,  594,  594,  594,  535,  594,    0,  535,  522,   53,
        -:  669:       53,   59,   45,  497,   50,    0,    0,   51,  467,  464,
        -:  670:       51,  442,   32,   44,  438,   32,  432,  426,  426,   62,
        -:  671:      433,  427,  418,  447,    0,  594,  594,   84,    0,  594,
        -:  672:       62,  446,    0,  594,  594,  445,  433,  594,    0,  594,
        -:  673:      440,  594,  594,    0,  102,    0,  422,  421,  124,    0,
        -:  674:      594,  594,  594,  594,  594,    0,    0,  401,   71,  348,
        -:  675:        0,  338,  332,  338,  337,  331,  335,  331,  329,   45,
        -:  676:      325,  324,   62,    0,    0,  331,  329,  323,  332,  318,
        -:  677:
        -:  678:      323,  330,  312,   92,  113,    0,  594,  594,  594,  594,
        -:  679:      594,    0,    0,  310,  594,  594,  594,    0,  594,    0,
        -:  680:      136,  594,  144,    0,    0,    0,    0,  316,   78,  309,
        -:  681:      307,  315,    0,  309,  316,  304,  297,  114,  301,  302,
        -:  682:      301,    0,  282,  235,  230,  227,  232,  219,  230,    0,
        -:  683:      594,  255,  161,    0,  224,  223,  230,  208,  224,  212,
        -:  684:      207,  225,  210,  206,  236,  232,  213,  206,    0,  197,
        -:  685:      211,    0,  197,    0,    0,    0,  229,  226,  216,    0,
        -:  686:      119,    0,  594,    0,  189,  187,  181,    0,  184,  179,
        -:  687:      181,  173,  181,  179,  178,  177,  164,  173,  272,  133,
        -:  688:
        -:  689:      170,  166,  164,  153,  160,    0,    0,  169,    0,  157,
        -:  690:        0,  167,  155,    0,    0,  327,  188,  134,    0,  148,
        -:  691:      144,  143,  136,  136,  145,    0,    0,    0,  156,  125,
        -:  692:      157,  122,  172,   69,    0,   64,    0,    0,  183,  178,
        -:  693:        0,  189,    0,   29,  594,    0,  594,  383,  396,  409,
        -:  694:      422,  428,  433,  441,  448,  453,  458,  469,  479,  491,
        -:  695:      504,  516,  529,  542,  548,  551,  561,  574,  580
        -:  696:    } ;
        -:  697:
        -:  698:static const flex_int16_t yy_def[270] =
        -:  699:    {   0,
        -:  700:      247,    1,  248,  248,  249,  249,  250,  250,  251,  251,
        -:  701:      247,  247,  247,  247,  252,  247,  253,  254,  247,  247,
        -:  702:      255,  255,  247,  247,  247,  256,  257,  257,  257,  257,
        -:  703:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  704:      257,  257,  257,  258,  259,  247,  247,  260,  261,  247,
        -:  705:      247,  262,  263,  247,  247,  247,  252,  247,  253,  247,
        -:  706:      254,  247,  247,  264,  247,   22,  247,  247,  247,  265,
        -:  707:      247,  247,  247,  247,  247,  256,  257,  257,  257,  257,
        -:  708:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  709:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  710:
        -:  711:      257,  257,  257,  258,  247,  259,  247,  247,  247,  247,
        -:  712:      247,  266,  261,  247,  247,  247,  247,  263,  247,  264,
        -:  713:      247,  247,  247,  265,  257,  257,  257,  257,  257,  257,
        -:  714:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  715:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  716:      247,  267,  268,  269,  257,  257,  257,  257,  257,  257,
        -:  717:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  718:      257,  257,  257,  257,  257,  257,  267,  247,  268,  179,
        -:  719:      179,  179,  247,  257,  257,  257,  257,  257,  257,  257,
        -:  720:      257,  257,  257,  257,  257,  257,  257,  257,  247,  179,
        -:  721:
        -:  722:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  723:      257,  257,  257,  199,  199,  267,  179,  199,  199,  257,
        -:  724:      257,  257,  257,  257,  257,  257,  257,  257,  267,  267,
        -:  725:      179,  199,  199,  257,  257,  257,  257,  257,  247,  267,
        -:  726:      199,  199,  257,  257,  247,  257,    0,  247,  247,  247,
        -:  727:      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
        -:  728:      247,  247,  247,  247,  247,  247,  247,  247,  247
        -:  729:    } ;
        -:  730:
        -:  731:static const flex_int16_t yy_nxt[651] =
        -:  732:    {   0,
        -:  733:       12,   13,   14,   13,   15,   16,   17,   18,   12,   12,
        -:  734:       19,   20,   21,   22,   22,   22,   22,   22,   22,   22,
        -:  735:       23,   24,   25,   26,   27,   27,   27,   27,   27,   12,
        -:  736:       27,   28,   27,   29,   27,   30,   31,   32,   27,   33,
        -:  737:       27,   34,   35,   36,   37,   38,   39,   40,   41,   27,
        -:  738:       42,   43,   27,   27,   44,   12,   46,   46,   50,   47,
        -:  739:       47,   50,   63,   65,   64,   71,   72,   51,   94,   65,
        -:  740:       51,   74,   75,   89,   90,   91,  246,   95,  137,   92,
        -:  741:       67,   68,   84,   48,   48,   52,   67,   68,   52,  108,
        -:  742:       85,   78,  138,   79,   86,  141,   69,   80,   81,   87,
        -:  743:
        -:  744:       99,  114,  247,  105,   70,  126,  244,  100,  115,  142,
        -:  745:      247,  243,  156,  109,  121,  121,  121,  121,  121,  121,
        -:  746:      121,  121,  152,  127,  153,  157,  110,  165,  199,  166,
        -:  747:      200,  111,  167,  242,  178,  112,  123,  123,  123,  123,
        -:  748:      123,  123,  199,  232,  200,  233,  239,  151,  121,  121,
        -:  749:      121,  121,  121,  121,  121,  121,  123,  123,  123,  123,
        -:  750:      123,  123,  180,  104,  180,  240,  199,  241,  200,  180,
        -:  751:      238,  237,  181,  180,  180,  180,  180,  180,  180,  180,
        -:  752:      180,  232,  236,  233,  239,  180,  180,  178,  245,  216,
        -:  753:      235,  234,  180,  180,  180,  180,  180,  180,  232,  231,
        -:  754:
        -:  755:      233,  228,  227,  226,  225,  224,  223,  222,  221,  220,
        -:  756:      213,  212,  211,  210,  209,  208,  182,  180,  104,  180,
        -:  757:      207,  206,  205,  204,  180,  203,  202,  181,  180,  180,
        -:  758:      180,  180,  180,  180,  180,  180,  201,  104,  178,  198,
        -:  759:      180,  180,  197,  196,  195,  194,  167,  180,  180,  180,
        -:  760:      180,  180,  180,  167,  193,  192,  191,  190,  189,  188,
        -:  761:      187,  186,  185,  184,  178,  176,  138,  175,  174,  173,
        -:  762:      172,  182,  214,  215,  216,  215,  214,  214,  214,  214,
        -:  763:      215,  217,  214,  218,  215,  215,  215,  215,  215,  215,
        -:  764:      215,  215,  214,  214,  214,  214,  215,  215,  214,  214,
        -:  765:
        -:  766:      214,  214,  214,  215,  215,  215,  215,  215,  215,  214,
        -:  767:      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
        -:  768:      214,  214,  214,  214,  214,  214,  214,  219,  216,  216,
        -:  769:      216,  171,  170,  169,  168,  216,  178,  164,  229,  216,
        -:  770:      216,  216,  216,  216,  216,  216,  216,  163,  162,  161,
        -:  771:      160,  216,  216,  159,  158,  155,  115,  150,  216,  216,
        -:  772:      216,  216,  216,  216,  149,  148,  147,  146,  145,  144,
        -:  773:      143,  140,  139,  136,  135,  134,  133,  132,  131,  130,
        -:  774:      129,  128,  230,   45,   45,   45,   45,   45,   45,   45,
        -:  775:       45,   45,   45,   45,   45,   45,   49,   49,   49,   49,
        -:  776:
        -:  777:       49,   49,   49,   49,   49,   49,   49,   49,   49,   53,
        -:  778:       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
        -:  779:       53,   53,   55,   55,   55,   55,   55,   55,   55,   55,
        -:  780:       55,   55,   55,   55,   55,   57,   57,   57,   57,   57,
        -:  781:       59,  125,   59,   59,   59,   61,  122,  122,   61,   60,
        -:  782:       61,   61,   61,   66,  247,   66,  119,  117,  105,   66,
        -:  783:       76,  103,   76,   76,   76,   77,  102,   77,   77,   77,
        -:  784:      104,  104,  101,   98,   97,  104,  104,   96,  104,  106,
        -:  785:      106,   93,   88,  106,  106,  106,  106,  106,  106,  106,
        -:  786:      106,  107,  107,  107,  107,  107,  107,  107,  107,  107,
        -:  787:
        -:  788:      107,  107,  107,  107,  113,  113,   83,  113,  113,  113,
        -:  789:       82,  113,  113,  113,  113,  113,  116,  116,   73,  116,
        -:  790:      116,  116,  116,  116,  116,  116,  116,  116,  116,  118,
        -:  791:      118,  118,   62,  118,  118,  118,  118,  118,  118,  118,
        -:  792:      118,  118,  120,  120,   60,  120,  120,  120,  120,  120,
        -:  793:      120,  120,  120,  120,  120,  124,   58,  124,  154,  247,
        -:  794:      154,  177,  177,  177,  177,  177,  177,  177,  177,  177,
        -:  795:      177,  177,  177,  177,  179,  179,  179,  179,  179,  179,
        -:  796:      179,  179,  179,  179,  179,  179,  179,  183,   56,  183,
        -:  797:       56,   54,   54,   11,  247,  247,  247,  247,  247,  247,
        -:  798:
        -:  799:      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
        -:  800:      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
        -:  801:      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
        -:  802:      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
        -:  803:      247,  247,  247,  247,  247,  247,  247,  247,  247,  247
        -:  804:    } ;
        -:  805:
        -:  806:static const flex_int16_t yy_chk[651] =
        -:  807:    {   0,
        -:  808:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  809:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  810:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  811:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  812:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  813:        1,    1,    1,    1,    1,    1,    3,    4,    5,    3,
        -:  814:        4,    6,   20,   21,   20,   23,   23,    5,   36,   22,
        -:  815:        6,   25,   25,   33,   33,   34,  244,   36,   90,   34,
        -:  816:       21,   21,   31,    3,    4,    5,   22,   22,    6,   48,
        -:  817:       31,   28,   90,   28,   31,   93,   21,   28,   28,   31,
        -:  818:
        -:  819:       40,   51,   22,  104,   21,   79,  236,   40,   51,   93,
        -:  820:       22,  234,  129,   48,   65,   65,   65,   65,   65,   65,
        -:  821:       65,   65,  105,   79,  105,  129,   48,  138,  181,  138,
        -:  822:      181,   48,  138,  232,  230,   48,   69,   69,   69,   69,
        -:  823:       69,   69,  200,  218,  200,  218,  225,  104,  121,  121,
        -:  824:      121,  121,  121,  121,  121,  121,  123,  123,  123,  123,
        -:  825:      123,  123,  153,  153,  153,  229,  231,  229,  231,  153,
        -:  826:      224,  223,  153,  153,  153,  153,  153,  153,  153,  153,
        -:  827:      153,  233,  222,  233,  239,  153,  153,  240,  239,  240,
        -:  828:      221,  220,  153,  153,  153,  153,  153,  153,  242,  217,
        -:  829:
        -:  830:      242,  213,  212,  210,  208,  205,  204,  203,  202,  201,
        -:  831:      198,  197,  196,  195,  194,  193,  153,  179,  179,  179,
        -:  832:      192,  191,  190,  189,  179,  187,  186,  179,  179,  179,
        -:  833:      179,  179,  179,  179,  179,  179,  185,  178,  177,  173,
        -:  834:      179,  179,  171,  170,  168,  167,  166,  179,  179,  179,
        -:  835:      179,  179,  179,  165,  164,  163,  162,  161,  160,  159,
        -:  836:      158,  157,  156,  155,  152,  149,  148,  147,  146,  145,
        -:  837:      144,  179,  199,  199,  199,  199,  199,  199,  199,  199,
        -:  838:      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
        -:  839:      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
        -:  840:
        -:  841:      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
        -:  842:      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
        -:  843:      199,  199,  199,  199,  199,  199,  199,  199,  216,  216,
        -:  844:      216,  143,  141,  140,  139,  216,  216,  137,  216,  216,
        -:  845:      216,  216,  216,  216,  216,  216,  216,  136,  135,  134,
        -:  846:      132,  216,  216,  131,  130,  128,  114,  103,  216,  216,
        -:  847:      216,  216,  216,  216,  102,  101,  100,   99,   98,   97,
        -:  848:       96,   92,   91,   89,   88,   87,   86,   85,   84,   83,
        -:  849:       82,   80,  216,  248,  248,  248,  248,  248,  248,  248,
        -:  850:      248,  248,  248,  248,  248,  248,  249,  249,  249,  249,
        -:  851:
        -:  852:      249,  249,  249,  249,  249,  249,  249,  249,  249,  250,
        -:  853:      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
        -:  854:      250,  250,  251,  251,  251,  251,  251,  251,  251,  251,
        -:  855:      251,  251,  251,  251,  251,  252,  252,  252,  252,  252,
        -:  856:      253,   78,  253,  253,  253,  254,   68,   67,  254,   61,
        -:  857:      254,  254,  254,  255,   57,  255,   56,   52,   44,  255,
        -:  858:      256,   43,  256,  256,  256,  257,   42,  257,  257,  257,
        -:  859:      258,  258,   41,   39,   38,  258,  258,   37,  258,  259,
        -:  860:      259,   35,   32,  259,  259,  259,  259,  259,  259,  259,
        -:  861:      259,  260,  260,  260,  260,  260,  260,  260,  260,  260,
        -:  862:
        -:  863:      260,  260,  260,  260,  261,  261,   30,  261,  261,  261,
        -:  864:       29,  261,  261,  261,  261,  261,  262,  262,   24,  262,
        -:  865:      262,  262,  262,  262,  262,  262,  262,  262,  262,  263,
        -:  866:      263,  263,   19,  263,  263,  263,  263,  263,  263,  263,
        -:  867:      263,  263,  264,  264,   18,  264,  264,  264,  264,  264,
        -:  868:      264,  264,  264,  264,  264,  265,   15,  265,  266,   11,
        -:  869:      266,  267,  267,  267,  267,  267,  267,  267,  267,  267,
        -:  870:      267,  267,  267,  267,  268,  268,  268,  268,  268,  268,
        -:  871:      268,  268,  268,  268,  268,  268,  268,  269,   10,  269,
        -:  872:        9,    8,    7,  247,  247,  247,  247,  247,  247,  247,
        -:  873:
        -:  874:      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
        -:  875:      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
        -:  876:      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
        -:  877:      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
        -:  878:      247,  247,  247,  247,  247,  247,  247,  247,  247,  247
        -:  879:    } ;
        -:  880:
        -:  881:/* Table of booleans, true if rule could match eol. */
        -:  882:static const flex_int32_t yy_rule_can_match_eol[76] =
        -:  883:    {   0,
        -:  884:0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        -:  885:    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        -:  886:    1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        -:  887:    0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,     };
        -:  888:
        -:  889:/* The intent behind this definition is that it'll catch
        -:  890: * any uses of REJECT which flex missed.
        -:  891: */
        -:  892:#define REJECT reject_used_but_not_detected
        -:  893:#define yymore() yymore_used_but_not_detected
        -:  894:#define YY_MORE_ADJ 0
        -:  895:#define YY_RESTORE_YY_MORE_OFFSET
        -:  896:#line 1 "lexer.l"
        -:  897:/*
        -:  898:Copyright (c) 2007-2013. The YARA Authors. All Rights Reserved.
        -:  899:
        -:  900:Redistribution and use in source and binary forms, with or without modification,
        -:  901:are permitted provided that the following conditions are met:
        -:  902:
        -:  903:1. Redistributions of source code must retain the above copyright notice, this
        -:  904:list of conditions and the following disclaimer.
        -:  905:
        -:  906:2. Redistributions in binary form must reproduce the above copyright notice,
        -:  907:this list of conditions and the following disclaimer in the documentation and/or
        -:  908:other materials provided with the distribution.
        -:  909:
        -:  910:3. Neither the name of the copyright holder nor the names of its contributors
        -:  911:may be used to endorse or promote products derived from this software without
        -:  912:specific prior written permission.
        -:  913:
        -:  914:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:  915:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:  916:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:  917:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:  918:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:  919:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:  920:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:  921:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:  922:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:  923:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:  924:*/
        -:  925:/* Lexical analyzer for YARA */
        -:  926:#line 33 "lexer.l"
        -:  927:
        -:  928:/* Disable warnings for unused functions in this file.
        -:  929:
        -:  930:As we redefine YY_FATAL_ERROR macro to use our own function yara_yyfatal, the
        -:  931:yy_fatal_error function generated by Flex is not actually used, causing a
        -:  932:compiler warning. Flex doesn't offer any options to remove the yy_fatal_error
        -:  933:function. When they include something like %option noyy_fatal_error as they do
        -:  934:with noyywrap then we can remove this pragma.
        -:  935:*/
        -:  936:
        -:  937:#ifdef __GNUC__
        -:  938:#pragma GCC diagnostic ignored "-Wunused-function"
        -:  939:#endif
        -:  940:
        -:  941:#include <math.h>
        -:  942:#include <stdarg.h>
        -:  943:#include <stdio.h>
        -:  944:#include <stdlib.h>
        -:  945:#include <string.h>
        -:  946:#include <setjmp.h>
        -:  947:
        -:  948:#if defined(_WIN32) || defined(__CYGWIN__)
        -:  949:#include <windows.h>
        -:  950:#else
        -:  951:#include <sys/stat.h>
        -:  952:#include <unistd.h>
        -:  953:#endif
        -:  954:
        -:  955:#if defined(_WIN32)
        -:  956:#define strtoll _strtoi64
        -:  957:#endif
        -:  958:
        -:  959:#include <yara/integers.h>
        -:  960:#include <yara/lexer.h>
        -:  961:#include <yara/sizedstr.h>
        -:  962:#include <yara/error.h>
        -:  963:#include <yara/mem.h>
        -:  964:#include <yara/utils.h>
        -:  965:#include <yara/strutils.h>
        -:  966:
        -:  967:#include "grammar.h"
        -:  968:
        -:  969:#define error(error_code) \
        -:  970:    { \
        -:  971:      compiler->last_error = error_code; \
        -:  972:      yyerror(yyscanner, compiler, NULL); \
        -:  973:      yyterminate(); \
        -:  974:    }
        -:  975:
        -:  976:#define syntax_error(error_msg) \
        -:  977:    { \
        -:  978:      yr_compiler_set_error_extra_info(compiler, error_msg); \
        -:  979:      error(ERROR_SYNTAX_ERROR); \
        -:  980:    }
        -:  981:
        -:  982:#define lex_check_space_ok(data, current_size, max_length) \
        -:  983:    if (strlen(data) + current_size >= max_length - 1) \
        -:  984:    { \
        -:  985:      yyerror(yyscanner, compiler, "out of space in lex_buf"); \
        -:  986:      yyterminate(); \
        -:  987:    }
        -:  988:
        -:  989:#define yytext_to_buffer \
        -:  990:    { \
        -:  991:      char *yptr = yytext; \
        -:  992:      lex_check_space_ok(yptr, yyextra->lex_buf_len, YR_LEX_BUF_SIZE); \
        -:  993:      while(*yptr) \
        -:  994:      { \
        -:  995:        *yyextra->lex_buf_ptr++ = *yptr++; \
        -:  996:        yyextra->lex_buf_len++; \
        -:  997:      } \
        -:  998:    }
        -:  999:
        -: 1000:#define alloc_sized_string(str, str_len) \
        -: 1001:  SIZED_STRING* str = (SIZED_STRING*) yr_malloc( \
        -: 1002:      str_len + sizeof(SIZED_STRING)); \
        -: 1003:  if (str == NULL) \
        -: 1004:  { \
        -: 1005:    yyerror(yyscanner, compiler, "not enough memory"); \
        -: 1006:    yyterminate(); \
        -: 1007:  } \
        -: 1008:  else \
        -: 1009:  { \
        -: 1010:    str->length = (uint32_t) (str_len); \
        -: 1011:    str->flags = 0; \
        -: 1012:  } \
        -: 1013:
        -: 1014:#ifdef _WIN32
        -: 1015:#define snprintf _snprintf
        -: 1016:#endif
        -: 1017:
        -: 1018:static bool is_absolute_path(
        -: 1019:    char* path)
        -: 1020:{
        -: 1021:  if (path == NULL)
        -: 1022:    return false;
        -: 1023:
        -: 1024:  #if defined(_WIN32) || defined(__CYGWIN__)
        -: 1025:  return strlen(path) > 2 &&
        -: 1026:      path[1] == ':' && (path[2] == '/' || path[2] == '\\');
        -: 1027:  #else
        -: 1028:  return strlen(path) > 0 && path[0] == '/';
        -: 1029:  #endif
        -: 1030:}
        -: 1031:
        -: 1032:#line 1033 "lexer.c"
        -: 1033:#define YY_NO_UNISTD_H 1
        -: 1034:#define YY_NO_INPUT 1
        -: 1035:
        -: 1036:#line 1037 "lexer.c"
        -: 1037:
        -: 1038:#define INITIAL 0
        -: 1039:#define str 1
        -: 1040:#define regexp 2
        -: 1041:#define include 3
        -: 1042:#define comment 4
        -: 1043:
        -: 1044:#ifndef YY_NO_UNISTD_H
        -: 1045:/* Special case for "unistd.h", since it is non-ANSI. We include it way
        -: 1046: * down here because we want the user's section 1 to have been scanned first.
        -: 1047: * The user has a chance to override it with an option.
        -: 1048: */
        -: 1049:#include <unistd.h>
        -: 1050:#endif
        -: 1051:
        -: 1052:#ifndef YY_EXTRA_TYPE
        -: 1053:#define YY_EXTRA_TYPE void *
        -: 1054:#endif
        -: 1055:
        -: 1056:/* Holds the entire state of the reentrant scanner. */
        -: 1057:struct yyguts_t
        -: 1058:    {
        -: 1059:
        -: 1060:    /* User-defined. Not touched by flex. */
        -: 1061:    YY_EXTRA_TYPE yyextra_r;
        -: 1062:
        -: 1063:    /* The rest are the same as the globals declared in the non-reentrant scanner. */
        -: 1064:    FILE *yyin_r, *yyout_r;
        -: 1065:    size_t yy_buffer_stack_top; /**< index of top of stack. */
        -: 1066:    size_t yy_buffer_stack_max; /**< capacity of stack. */
        -: 1067:    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
        -: 1068:    char yy_hold_char;
        -: 1069:    int yy_n_chars;
        -: 1070:    int yyleng_r;
        -: 1071:    char *yy_c_buf_p;
        -: 1072:    int yy_init;
        -: 1073:    int yy_start;
        -: 1074:    int yy_did_buffer_switch_on_eof;
        -: 1075:    int yy_start_stack_ptr;
        -: 1076:    int yy_start_stack_depth;
        -: 1077:    int *yy_start_stack;
        -: 1078:    yy_state_type yy_last_accepting_state;
        -: 1079:    char* yy_last_accepting_cpos;
        -: 1080:
        -: 1081:    int yylineno_r;
        -: 1082:    int yy_flex_debug_r;
        -: 1083:
        -: 1084:    char *yytext_r;
        -: 1085:    int yy_more_flag;
        -: 1086:    int yy_more_len;
        -: 1087:
        -: 1088:    YYSTYPE * yylval_r;
        -: 1089:
        -: 1090:    }; /* end struct yyguts_t */
        -: 1091:
        -: 1092:static int yy_init_globals ( yyscan_t yyscanner );
        -: 1093:
        -: 1094:    /* This must go here because YYSTYPE and YYLTYPE are included
        -: 1095:     * from bison output in section 1.*/
        -: 1096:    #    define yylval yyg->yylval_r
        -: 1097:    
        -: 1098:int yylex_init (yyscan_t* scanner);
        -: 1099:
        -: 1100:int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);
        -: 1101:
        -: 1102:/* Accessor methods to globals.
        -: 1103:   These are made visible to non-reentrant scanners for convenience. */
        -: 1104:
        -: 1105:int yylex_destroy ( yyscan_t yyscanner );
        -: 1106:
        -: 1107:int yyget_debug ( yyscan_t yyscanner );
        -: 1108:
        -: 1109:void yyset_debug ( int debug_flag , yyscan_t yyscanner );
        -: 1110:
        -: 1111:YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );
        -: 1112:
        -: 1113:void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );
        -: 1114:
        -: 1115:FILE *yyget_in ( yyscan_t yyscanner );
        -: 1116:
        -: 1117:void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );
        -: 1118:
        -: 1119:FILE *yyget_out ( yyscan_t yyscanner );
        -: 1120:
        -: 1121:void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );
        -: 1122:
        -: 1123:			int yyget_leng ( yyscan_t yyscanner );
        -: 1124:
        -: 1125:char *yyget_text ( yyscan_t yyscanner );
        -: 1126:
        -: 1127:int yyget_lineno ( yyscan_t yyscanner );
        -: 1128:
        -: 1129:void yyset_lineno ( int _line_number , yyscan_t yyscanner );
        -: 1130:
        -: 1131:int yyget_column  ( yyscan_t yyscanner );
        -: 1132:
        -: 1133:void yyset_column ( int _column_no , yyscan_t yyscanner );
        -: 1134:
        -: 1135:YYSTYPE * yyget_lval ( yyscan_t yyscanner );
        -: 1136:
        -: 1137:void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );
        -: 1138:
        -: 1139:/* Macros after this point can all be overridden by user definitions in
        -: 1140: * section 1.
        -: 1141: */
        -: 1142:
        -: 1143:#ifndef YY_SKIP_YYWRAP
        -: 1144:#ifdef __cplusplus
        -: 1145:extern "C" int yywrap ( yyscan_t yyscanner );
        -: 1146:#else
        -: 1147:extern int yywrap ( yyscan_t yyscanner );
        -: 1148:#endif
        -: 1149:#endif
        -: 1150:
        -: 1151:#ifndef YY_NO_UNPUT
        -: 1152:    
        -: 1153:#endif
        -: 1154:
        -: 1155:#ifndef yytext_ptr
        -: 1156:static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
        -: 1157:#endif
        -: 1158:
        -: 1159:#ifdef YY_NEED_STRLEN
        -: 1160:static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
        -: 1161:#endif
        -: 1162:
        -: 1163:#ifndef YY_NO_INPUT
        -: 1164:#ifdef __cplusplus
        -: 1165:static int yyinput ( yyscan_t yyscanner );
        -: 1166:#else
        -: 1167:static int input ( yyscan_t yyscanner );
        -: 1168:#endif
        -: 1169:
        -: 1170:#endif
        -: 1171:
        -: 1172:/* Amount of stuff to slurp up with each read. */
        -: 1173:#ifndef YY_READ_BUF_SIZE
        -: 1174:#ifdef __ia64__
        -: 1175:/* On IA-64, the buffer size is 16k, not 8k */
        -: 1176:#define YY_READ_BUF_SIZE 16384
        -: 1177:#else
        -: 1178:#define YY_READ_BUF_SIZE 8192
        -: 1179:#endif /* __ia64__ */
        -: 1180:#endif
        -: 1181:
        -: 1182:/* Copy whatever the last rule matched to the standard output. */
        -: 1183:#ifndef ECHO
        -: 1184:/* This used to be an fputs(), but since the string might contain NUL's,
        -: 1185: * we now use fwrite().
        -: 1186: */
        -: 1187:#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
        -: 1188:#endif
        -: 1189:
        -: 1190:/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
        -: 1191: * is returned in "result".
        -: 1192: */
        -: 1193:#ifndef YY_INPUT
        -: 1194:#define YY_INPUT(buf,result,max_size) \
        -: 1195:	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
        -: 1196:		{ \
        -: 1197:		int c = '*'; \
        -: 1198:		int n; \
        -: 1199:		for ( n = 0; n < max_size && \
        -: 1200:			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
        -: 1201:			buf[n] = (char) c; \
        -: 1202:		if ( c == '\n' ) \
        -: 1203:			buf[n++] = (char) c; \
        -: 1204:		if ( c == EOF && ferror( yyin ) ) \
        -: 1205:			YY_FATAL_ERROR( "input in flex scanner failed" ); \
        -: 1206:		result = n; \
        -: 1207:		} \
        -: 1208:	else \
        -: 1209:		{ \
        -: 1210:		errno=0; \
        -: 1211:		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
        -: 1212:			{ \
        -: 1213:			if( errno != EINTR) \
        -: 1214:				{ \
        -: 1215:				YY_FATAL_ERROR( "input in flex scanner failed" ); \
        -: 1216:				break; \
        -: 1217:				} \
        -: 1218:			errno=0; \
        -: 1219:			clearerr(yyin); \
        -: 1220:			} \
        -: 1221:		}\
        -: 1222:\
        -: 1223:
        -: 1224:#endif
        -: 1225:
        -: 1226:/* No semi-colon after return; correct usage is to write "yyterminate();" -
        -: 1227: * we don't want an extra ';' after the "return" because that will cause
        -: 1228: * some compilers to complain about unreachable statements.
        -: 1229: */
        -: 1230:#ifndef yyterminate
        -: 1231:#define yyterminate() return YY_NULL
        -: 1232:#endif
        -: 1233:
        -: 1234:/* Number of entries by which start-condition stack grows. */
        -: 1235:#ifndef YY_START_STACK_INCR
        -: 1236:#define YY_START_STACK_INCR 25
        -: 1237:#endif
        -: 1238:
        -: 1239:/* Report a fatal error. */
        -: 1240:#ifndef YY_FATAL_ERROR
        -: 1241:#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
        -: 1242:#endif
        -: 1243:
        -: 1244:/* end tables serialization structures and prototypes */
        -: 1245:
        -: 1246:/* Default declaration of generated scanner - a define so the user can
        -: 1247: * easily add parameters.
        -: 1248: */
        -: 1249:#ifndef YY_DECL
        -: 1250:#define YY_DECL_IS_OURS 1
        -: 1251:
        -: 1252:extern int yylex \
        -: 1253:               (YYSTYPE * yylval_param , yyscan_t yyscanner);
        -: 1254:
        -: 1255:#define YY_DECL int yylex \
        -: 1256:               (YYSTYPE * yylval_param , yyscan_t yyscanner)
        -: 1257:#endif /* !YY_DECL */
        -: 1258:
        -: 1259:/* Code executed at the beginning of each rule, after yytext and yyleng
        -: 1260: * have been set up.
        -: 1261: */
        -: 1262:#ifndef YY_USER_ACTION
        -: 1263:#define YY_USER_ACTION
        -: 1264:#endif
        -: 1265:
        -: 1266:/* Code executed at the end of each rule. */
        -: 1267:#ifndef YY_BREAK
        -: 1268:#define YY_BREAK /*LINTED*/break;
        -: 1269:#endif
        -: 1270:
        -: 1271:#define YY_RULE_SETUP \
        -: 1272:	YY_USER_ACTION
        -: 1273:
        -: 1274:/** The main scanner function which does all the work.
        -: 1275: */
     3685: 1276:YY_DECL
        -: 1277:{
        -: 1278:	yy_state_type yy_current_state;
        -: 1279:	char *yy_cp, *yy_bp;
        -: 1280:	int yy_act;
     3685: 1281:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 1282:
     3685: 1283:    yylval = yylval_param;
        -: 1284:
     3685: 1285:	if ( !yyg->yy_init )
        -: 1286:		{
      282: 1287:		yyg->yy_init = 1;
        -: 1288:
        -: 1289:#ifdef YY_USER_INIT
        -: 1290:		YY_USER_INIT;
        -: 1291:#endif
        -: 1292:
      282: 1293:		if ( ! yyg->yy_start )
      282: 1294:			yyg->yy_start = 1;	/* first start state */
        -: 1295:
      282: 1296:		if ( ! yyin )
      282: 1297:			yyin = stdin;
        -: 1298:
      282: 1299:		if ( ! yyout )
      282: 1300:			yyout = stdout;
        -: 1301:
      282: 1302:		if ( ! YY_CURRENT_BUFFER ) {
    #####: 1303:			yyensure_buffer_stack (yyscanner);
    #####: 1304:			YY_CURRENT_BUFFER_LVALUE =
    #####: 1305:				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
        -: 1306:		}
        -: 1307:
      282: 1308:		yy_load_buffer_state( yyscanner );
        -: 1309:		}
        -: 1310:
        -: 1311:	{
        -: 1312:#line 163 "lexer.l"
        -: 1313:
        -: 1314:
        -: 1315:#line 1316 "lexer.c"
        -: 1316:
        -: 1317:	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
        -: 1318:		{
     7004: 1319:		yy_cp = yyg->yy_c_buf_p;
        -: 1320:
        -: 1321:		/* Support of yytext. */
     7004: 1322:		*yy_cp = yyg->yy_hold_char;
        -: 1323:
        -: 1324:		/* yy_bp points to the position in yy_ch_buf of the start of
        -: 1325:		 * the current run.
        -: 1326:		 */
     7004: 1327:		yy_bp = yy_cp;
        -: 1328:
     7004: 1329:		yy_current_state = yyg->yy_start;
    22513: 1330:yy_match:
        -: 1331:		do
        -: 1332:			{
    22513: 1333:			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
    22513: 1334:			if ( yy_accept[yy_current_state] )
        -: 1335:				{
    15212: 1336:				yyg->yy_last_accepting_state = yy_current_state;
    15212: 1337:				yyg->yy_last_accepting_cpos = yy_cp;
        -: 1338:				}
    35509: 1339:			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        -: 1340:				{
    12996: 1341:				yy_current_state = (int) yy_def[yy_current_state];
    12996: 1342:				if ( yy_current_state >= 248 )
     5988: 1343:					yy_c = yy_meta[yy_c];
        -: 1344:				}
    22513: 1345:			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    22513: 1346:			++yy_cp;
        -: 1347:			}
    22513: 1348:		while ( yy_current_state != 247 );
     7004: 1349:		yy_cp = yyg->yy_last_accepting_cpos;
     7004: 1350:		yy_current_state = yyg->yy_last_accepting_state;
        -: 1351:
     7286: 1352:yy_find_action:
     7286: 1353:		yy_act = yy_accept[yy_current_state];
        -: 1354:
     7286: 1355:		YY_DO_BEFORE_ACTION;
        -: 1356:
     7286: 1357:		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
        -: 1358:			{
        -: 1359:			int yyl;
     5180: 1360:			for ( yyl = 0; yyl < yyleng; ++yyl )
     2590: 1361:				if ( yytext[yyl] == '\n' )
        -: 1362:					
    #####: 1363:    do{ yylineno++;
    #####: 1364:        yycolumn=0;
        -: 1365:    }while(0)
        -: 1366:;
        -: 1367:			}
        -: 1368:
     7286: 1369:do_action:	/* This label is used only to access EOF actions. */
        -: 1370:
     7568: 1371:		switch ( yy_act )
        -: 1372:	{ /* beginning of action switch */
    #####: 1373:			case 0: /* must back up */
        -: 1374:			/* undo the effects of YY_DO_BEFORE_ACTION */
    #####: 1375:			*yy_cp = yyg->yy_hold_char;
    #####: 1376:			yy_cp = yyg->yy_last_accepting_cpos;
    #####: 1377:			yy_current_state = yyg->yy_last_accepting_state;
    #####: 1378:			goto yy_find_action;
        -: 1379:
    #####: 1380:case 1:
        -: 1381:YY_RULE_SETUP
        -: 1382:#line 165 "lexer.l"
        -: 1383:{ return _DOT_DOT_;     }
        -: 1384:	YY_BREAK
        -: 1385:case 2:
        -: 1386:YY_RULE_SETUP
        -: 1387:#line 166 "lexer.l"
        -: 1388:{ return _LT_;          }
        -: 1389:	YY_BREAK
        -: 1390:case 3:
        -: 1391:YY_RULE_SETUP
        -: 1392:#line 167 "lexer.l"
        -: 1393:{ return _GT_;          }
        -: 1394:	YY_BREAK
        -: 1395:case 4:
        -: 1396:YY_RULE_SETUP
        -: 1397:#line 168 "lexer.l"
        -: 1398:{ return _LE_;          }
        -: 1399:	YY_BREAK
        -: 1400:case 5:
        -: 1401:YY_RULE_SETUP
        -: 1402:#line 169 "lexer.l"
        -: 1403:{ return _GE_;          }
        -: 1404:	YY_BREAK
        -: 1405:case 6:
        -: 1406:YY_RULE_SETUP
        -: 1407:#line 170 "lexer.l"
        -: 1408:{ return _EQ_;          }
        -: 1409:	YY_BREAK
        -: 1410:case 7:
        -: 1411:YY_RULE_SETUP
        -: 1412:#line 171 "lexer.l"
        -: 1413:{ return _NEQ_;         }
        -: 1414:	YY_BREAK
        -: 1415:case 8:
        -: 1416:YY_RULE_SETUP
        -: 1417:#line 172 "lexer.l"
        -: 1418:{ return _SHIFT_LEFT_;  }
        -: 1419:	YY_BREAK
        -: 1420:case 9:
        -: 1421:YY_RULE_SETUP
        -: 1422:#line 173 "lexer.l"
        -: 1423:{ return _SHIFT_RIGHT_; }
        -: 1424:	YY_BREAK
        -: 1425:case 10:
        -: 1426:YY_RULE_SETUP
        -: 1427:#line 174 "lexer.l"
        -: 1428:{ return _PRIVATE_;     }
        -: 1429:	YY_BREAK
        -: 1430:case 11:
        -: 1431:YY_RULE_SETUP
        -: 1432:#line 175 "lexer.l"
        -: 1433:{ return _GLOBAL_;      }
        -: 1434:	YY_BREAK
        -: 1435:case 12:
        -: 1436:YY_RULE_SETUP
        -: 1437:#line 176 "lexer.l"
        -: 1438:{ return _RULE_;        }
        -: 1439:	YY_BREAK
        -: 1440:case 13:
        -: 1441:YY_RULE_SETUP
        -: 1442:#line 177 "lexer.l"
        -: 1443:{ return _META_;        }
        -: 1444:	YY_BREAK
        -: 1445:case 14:
        -: 1446:YY_RULE_SETUP
        -: 1447:#line 178 "lexer.l"
        -: 1448:{ return _STRINGS_;     }
        -: 1449:	YY_BREAK
        -: 1450:case 15:
        -: 1451:YY_RULE_SETUP
        -: 1452:#line 179 "lexer.l"
        -: 1453:{ return _ASCII_;       }
        -: 1454:	YY_BREAK
        -: 1455:case 16:
        -: 1456:YY_RULE_SETUP
        -: 1457:#line 180 "lexer.l"
        -: 1458:{ return _WIDE_;        }
        -: 1459:	YY_BREAK
        -: 1460:case 17:
        -: 1461:YY_RULE_SETUP
        -: 1462:#line 181 "lexer.l"
        -: 1463:{ return _XOR_;         }
        -: 1464:	YY_BREAK
        -: 1465:case 18:
        -: 1466:YY_RULE_SETUP
        -: 1467:#line 182 "lexer.l"
        -: 1468:{ return _FULLWORD_;    }
        -: 1469:	YY_BREAK
        -: 1470:case 19:
        -: 1471:YY_RULE_SETUP
        -: 1472:#line 183 "lexer.l"
        -: 1473:{ return _NOCASE_;      }
        -: 1474:	YY_BREAK
        -: 1475:case 20:
        -: 1476:YY_RULE_SETUP
        -: 1477:#line 184 "lexer.l"
        -: 1478:{ return _CONDITION_;   }
        -: 1479:	YY_BREAK
        -: 1480:case 21:
        -: 1481:YY_RULE_SETUP
        -: 1482:#line 185 "lexer.l"
        -: 1483:{ return _TRUE_;        }
        -: 1484:	YY_BREAK
        -: 1485:case 22:
        -: 1486:YY_RULE_SETUP
        -: 1487:#line 186 "lexer.l"
        -: 1488:{ return _FALSE_;       }
        -: 1489:	YY_BREAK
        -: 1490:case 23:
        -: 1491:YY_RULE_SETUP
        -: 1492:#line 187 "lexer.l"
        -: 1493:{ return _NOT_;         }
        -: 1494:	YY_BREAK
        -: 1495:case 24:
        -: 1496:YY_RULE_SETUP
        -: 1497:#line 188 "lexer.l"
        -: 1498:{ return _AND_;         }
        -: 1499:	YY_BREAK
        -: 1500:case 25:
        -: 1501:YY_RULE_SETUP
        -: 1502:#line 189 "lexer.l"
        -: 1503:{ return _OR_;          }
        -: 1504:	YY_BREAK
        -: 1505:case 26:
        -: 1506:YY_RULE_SETUP
        -: 1507:#line 190 "lexer.l"
        -: 1508:{ return _AT_;          }
        -: 1509:	YY_BREAK
        -: 1510:case 27:
        -: 1511:YY_RULE_SETUP
        -: 1512:#line 191 "lexer.l"
        -: 1513:{ return _IN_;          }
        -: 1514:	YY_BREAK
        -: 1515:case 28:
        -: 1516:YY_RULE_SETUP
        -: 1517:#line 192 "lexer.l"
        -: 1518:{ return _OF_;          }
        -: 1519:	YY_BREAK
        -: 1520:case 29:
        -: 1521:YY_RULE_SETUP
        -: 1522:#line 193 "lexer.l"
        -: 1523:{ return _THEM_;        }
        -: 1524:	YY_BREAK
        -: 1525:case 30:
        -: 1526:YY_RULE_SETUP
        -: 1527:#line 194 "lexer.l"
        -: 1528:{ return _FOR_;         }
        -: 1529:	YY_BREAK
        -: 1530:case 31:
        -: 1531:YY_RULE_SETUP
        -: 1532:#line 195 "lexer.l"
        -: 1533:{ return _ALL_;         }
        -: 1534:	YY_BREAK
        -: 1535:case 32:
        -: 1536:YY_RULE_SETUP
        -: 1537:#line 196 "lexer.l"
        -: 1538:{ return _ANY_;         }
        -: 1539:	YY_BREAK
        -: 1540:case 33:
        -: 1541:YY_RULE_SETUP
        -: 1542:#line 197 "lexer.l"
        -: 1543:{ return _ENTRYPOINT_;  }
        -: 1544:	YY_BREAK
        -: 1545:case 34:
        -: 1546:YY_RULE_SETUP
        -: 1547:#line 198 "lexer.l"
        -: 1548:{ return _FILESIZE_;    }
        -: 1549:	YY_BREAK
        -: 1550:case 35:
        -: 1551:YY_RULE_SETUP
        -: 1552:#line 199 "lexer.l"
        -: 1553:{ return _MATCHES_;     }
        -: 1554:	YY_BREAK
        -: 1555:case 36:
        -: 1556:YY_RULE_SETUP
        -: 1557:#line 200 "lexer.l"
        -: 1558:{ return _CONTAINS_;    }
        -: 1559:	YY_BREAK
        -: 1560:case 37:
        -: 1561:YY_RULE_SETUP
        -: 1562:#line 201 "lexer.l"
        -: 1563:{ return _IMPORT_;      }
        -: 1564:	YY_BREAK
        -: 1565:case 38:
        -: 1566:YY_RULE_SETUP
        -: 1567:#line 204 "lexer.l"
        -: 1568:{ BEGIN(comment);       }
        -: 1569:	YY_BREAK
        -: 1570:case 39:
        -: 1571:YY_RULE_SETUP
        -: 1572:#line 205 "lexer.l"
        -: 1573:{ BEGIN(INITIAL);       }
        -: 1574:	YY_BREAK
        -: 1575:case 40:
        -: 1576:/* rule 40 can match eol */
        -: 1577:YY_RULE_SETUP
        -: 1578:#line 206 "lexer.l"
        -: 1579:{ /* skip comments */   }
        -: 1580:	YY_BREAK
        -: 1581:case 41:
        -: 1582:YY_RULE_SETUP
        -: 1583:#line 209 "lexer.l"
        -: 1584:{ /* skip single-line comments */ }
        -: 1585:	YY_BREAK
        -: 1586:case 42:
        -: 1587:YY_RULE_SETUP
        -: 1588:#line 212 "lexer.l"
        -: 1589:{
        -: 1590:                          yyextra->lex_buf_ptr = yyextra->lex_buf;
        -: 1591:                          yyextra->lex_buf_len = 0;
        -: 1592:                          BEGIN(include);
        -: 1593:                        }
        -: 1594:	YY_BREAK
        -: 1595:case 43:
        -: 1596:/* rule 43 can match eol */
        -: 1597:YY_RULE_SETUP
        -: 1598:#line 219 "lexer.l"
        -: 1599:{ yytext_to_buffer; }
        -: 1600:	YY_BREAK
        -: 1601:case 44:
        -: 1602:YY_RULE_SETUP
        -: 1603:#line 222 "lexer.l"
        -: 1604:{
        -: 1605:
        -: 1606:  if (compiler->include_callback != NULL)
        -: 1607:  {
        -: 1608:    #ifdef _MSC_VER
        -: 1609:    char* b = NULL;
        -: 1610:    #endif
        -: 1611:    char* s = NULL;
        -: 1612:    char* f;
        -: 1613:
        -: 1614:    char buffer[1024];
        -: 1615:    const char* included_rules;
        -: 1616:    char* current_file_name;
        -: 1617:    char* include_path;
        -: 1618:
        -: 1619:    *yyextra->lex_buf_ptr = '\0'; // null-terminate included file path
        -: 1620:
        -: 1621:    current_file_name = yr_compiler_get_current_file_name(compiler);
        -: 1622:
        -: 1623:    if (current_file_name == NULL ||
        -: 1624:        compiler->include_callback != _yr_compiler_default_include_callback ||
        -: 1625:        is_absolute_path(yyextra->lex_buf))
        -: 1626:    {
        -: 1627:      include_path = yyextra->lex_buf;
        -: 1628:    }
        -: 1629:    else
        -: 1630:    {
        -: 1631:      strlcpy(buffer, current_file_name, sizeof(buffer));
        -: 1632:      s = strrchr(buffer, '/');
        -: 1633:
        -: 1634:      #ifdef _MSC_VER
        -: 1635:      b = strrchr(buffer, '\\'); // in Windows both path delimiters are accepted
        -: 1636:      #endif
        -: 1637:
        -: 1638:      #ifdef _MSC_VER
        -: 1639:      if (s != NULL || b != NULL)
        -: 1640:      #else
        -: 1641:      if (s != NULL)
        -: 1642:      #endif
        -: 1643:      {
        -: 1644:        #ifdef _MSC_VER
        -: 1645:        f = (b > s) ? (b + 1) : (s + 1);
        -: 1646:        #else
        -: 1647:        f = s + 1;
        -: 1648:        #endif
        -: 1649:
        -: 1650:        strlcpy(f, yyextra->lex_buf, sizeof(buffer) - (f - buffer));
        -: 1651:        include_path = buffer;
        -: 1652:      }
        -: 1653:      else
        -: 1654:      {
        -: 1655:        include_path = yyextra->lex_buf;
        -: 1656:      }
        -: 1657:    }
        -: 1658:
        -: 1659:    included_rules = compiler->include_callback(
        -: 1660:        include_path,
        -: 1661:        current_file_name,
        -: 1662:        compiler->current_namespace->name,
        -: 1663:        compiler->incl_clbk_user_data);
        -: 1664:
        -: 1665:    if (included_rules != NULL)
        -: 1666:    {
        -: 1667:      int error_code = _yr_compiler_push_file_name(compiler, include_path);
        -: 1668:
        -: 1669:      if (error_code != ERROR_SUCCESS)
        -: 1670:      {
        -: 1671:        if (error_code == ERROR_INCLUDES_CIRCULAR_REFERENCE)
        -: 1672:        {
        -: 1673:          yyerror(yyscanner, compiler, "includes circular reference");
        -: 1674:        }
        -: 1675:        else if (error_code == ERROR_INCLUDE_DEPTH_EXCEEDED)
        -: 1676:        {
        -: 1677:          yyerror(yyscanner, compiler, "includes depth exceeded");
        -: 1678:        }
        -: 1679:
        -: 1680:        if (compiler->include_free != NULL)
        -: 1681:        {
        -: 1682:          compiler->include_free(included_rules, compiler->incl_clbk_user_data);
        -: 1683:        }
        -: 1684:
        -: 1685:        yyterminate();
        -: 1686:      }
        -: 1687:
        -: 1688:      // Workaround for flex issue: https://github.com/westes/flex/issues/58
        -: 1689:      yypush_buffer_state(YY_CURRENT_BUFFER, yyscanner);
        -: 1690:      yy_scan_string(included_rules, yyscanner);
        -: 1691:      yyset_lineno(1, yyscanner);
        -: 1692:
        -: 1693:      if (compiler->include_free != NULL)
        -: 1694:      {
        -: 1695:        compiler->include_free(included_rules, compiler->incl_clbk_user_data);
        -: 1696:      }
        -: 1697:    }
        -: 1698:    else
        -: 1699:    {
        -: 1700:      char* err_msg_fmt;
        -: 1701:      char err_msg[512];
        -: 1702:
        -: 1703:      if (compiler->include_callback == _yr_compiler_default_include_callback)
        -: 1704:      {
        -: 1705:        err_msg_fmt = "can't open include file: %s";
        -: 1706:      }
        -: 1707:      else
        -: 1708:      {
        -: 1709:        err_msg_fmt = "callback failed to provide include resource: %s";
        -: 1710:      }
        -: 1711:
        -: 1712:      snprintf(
        -: 1713:          err_msg,
        -: 1714:          sizeof(err_msg),
        -: 1715:          err_msg_fmt,
        -: 1716:          yyextra->lex_buf);
        -: 1717:
        -: 1718:      yyerror(yyscanner, compiler, err_msg);
        -: 1719:    }
        -: 1720:
        -: 1721:  }
        -: 1722:  else // not allowing includes
        -: 1723:  {
        -: 1724:    yyerror(yyscanner, compiler, "includes are disabled");
        -: 1725:  }
        -: 1726:
        -: 1727:  BEGIN(INITIAL);
        -: 1728:}
        -: 1729:	YY_BREAK
        -: 1730:case YY_STATE_EOF(INITIAL):
        -: 1731:case YY_STATE_EOF(str):
        -: 1732:case YY_STATE_EOF(regexp):
        -: 1733:case YY_STATE_EOF(include):
        -: 1734:case YY_STATE_EOF(comment):
        -: 1735:#line 349 "lexer.l"
        -: 1736:{
        -: 1737:
        -: 1738:  yypop_buffer_state(yyscanner);
        -: 1739:
        -: 1740:  if (!YY_CURRENT_BUFFER)
        -: 1741:    yyterminate();
        -: 1742:
        -: 1743:  return _END_OF_INCLUDED_FILE_;
        -: 1744:}
        -: 1745:	YY_BREAK
        -: 1746:case 45:
        -: 1747:YY_RULE_SETUP
        -: 1748:#line 360 "lexer.l"
        -: 1749:{
        -: 1750:
        -: 1751:  yylval->c_string = yr_strdup(yytext);
        -: 1752:
        -: 1753:  if (yylval->c_string == NULL)
        -: 1754:    error(ERROR_INSUFFICIENT_MEMORY);
        -: 1755:
        -: 1756:  return _STRING_IDENTIFIER_WITH_WILDCARD_;
        -: 1757:}
        -: 1758:	YY_BREAK
        -: 1759:case 46:
        -: 1760:YY_RULE_SETUP
        -: 1761:#line 371 "lexer.l"
        -: 1762:{
        -: 1763:
        -: 1764:  yylval->c_string = yr_strdup(yytext);
        -: 1765:
        -: 1766:  if (yylval->c_string == NULL)
        -: 1767:    error(ERROR_INSUFFICIENT_MEMORY);
        -: 1768:
        -: 1769:  return _STRING_IDENTIFIER_;
        -: 1770:}
        -: 1771:	YY_BREAK
        -: 1772:case 47:
        -: 1773:YY_RULE_SETUP
        -: 1774:#line 382 "lexer.l"
        -: 1775:{
        -: 1776:
        -: 1777:  yylval->c_string = yr_strdup(yytext);
        -: 1778:
        -: 1779:  if (yylval->c_string == NULL)
        -: 1780:  {
        -: 1781:    error(ERROR_INSUFFICIENT_MEMORY);
        -: 1782:  }
        -: 1783:  else
        -: 1784:  {
        -: 1785:    yylval->c_string[0] = '$'; /* replace # by $*/
        -: 1786:  }
        -: 1787:
        -: 1788:  return _STRING_COUNT_;
        -: 1789:}
        -: 1790:	YY_BREAK
        -: 1791:case 48:
        -: 1792:YY_RULE_SETUP
        -: 1793:#line 399 "lexer.l"
        -: 1794:{
        -: 1795:
        -: 1796:  yylval->c_string = yr_strdup(yytext);
        -: 1797:
        -: 1798:  if (yylval->c_string == NULL)
        -: 1799:  {
        -: 1800:    error(ERROR_INSUFFICIENT_MEMORY);
        -: 1801:  }
        -: 1802:  else
        -: 1803:  {
        -: 1804:    yylval->c_string[0] = '$'; /* replace @ by $*/
        -: 1805:  }
        -: 1806:
        -: 1807:  return _STRING_OFFSET_;
        -: 1808:}
        -: 1809:	YY_BREAK
        -: 1810:case 49:
        -: 1811:YY_RULE_SETUP
        -: 1812:#line 416 "lexer.l"
        -: 1813:{
        -: 1814:
        -: 1815:  yylval->c_string = yr_strdup(yytext);
        -: 1816:
        -: 1817:  if (yylval->c_string == NULL)
        -: 1818:  {
        -: 1819:    error(ERROR_INSUFFICIENT_MEMORY);
        -: 1820:  }
        -: 1821:  else
        -: 1822:  {
        -: 1823:    yylval->c_string[0] = '$'; /* replace ! by $*/
        -: 1824:  }
        -: 1825:
        -: 1826:  return _STRING_LENGTH_;
        -: 1827:}
        -: 1828:	YY_BREAK
        -: 1829:case 50:
        -: 1830:YY_RULE_SETUP
        -: 1831:#line 433 "lexer.l"
        -: 1832:{
        -: 1833:
        -: 1834:  char* text = yytext;
        -: 1835:
        -: 1836:  if (*text == 'u')
        -: 1837:  {
        -: 1838:    yylval->integer = 3;
        -: 1839:    text++;
        -: 1840:  }
        -: 1841:  else
        -: 1842:  {
        -: 1843:    yylval->integer = 0;
        -: 1844:  }
        -: 1845:
        -: 1846:  if (strstr(text, "int8") == text)
        -: 1847:  {
        -: 1848:    yylval->integer += 0;
        -: 1849:    text += 4;
        -: 1850:  }
        -: 1851:  else if (strstr(text, "int16") == text)
        -: 1852:  {
        -: 1853:    yylval->integer += 1;
        -: 1854:    text += 5;
        -: 1855:  }
        -: 1856:  else if (strstr(text, "int32") == text)
        -: 1857:  {
        -: 1858:    yylval->integer += 2;
        -: 1859:    text += 5;
        -: 1860:  }
        -: 1861:
        -: 1862:  if (strcmp(text, "be") == 0)
        -: 1863:  {
        -: 1864:    yylval->integer += 6;
        -: 1865:  }
        -: 1866:
        -: 1867:  return _INTEGER_FUNCTION_;
        -: 1868:}
        -: 1869:	YY_BREAK
        -: 1870:case 51:
        -: 1871:YY_RULE_SETUP
        -: 1872:#line 472 "lexer.l"
        -: 1873:{
        -: 1874:
        -: 1875:  if (strlen(yytext) > 128)
        -: 1876:    syntax_error("identifier too long");
        -: 1877:
        -: 1878:  yylval->c_string = yr_strdup(yytext);
        -: 1879:
        -: 1880:  if (yylval->c_string == NULL)
        -: 1881:    error(ERROR_INSUFFICIENT_MEMORY);
        -: 1882:
        -: 1883:  return _IDENTIFIER_;
        -: 1884:}
        -: 1885:	YY_BREAK
        -: 1886:case 52:
        -: 1887:YY_RULE_SETUP
        -: 1888:#line 486 "lexer.l"
        -: 1889:{
        -: 1890:
        -: 1891:  char *endptr;
        -: 1892:
        -: 1893:  errno = 0;
        -: 1894:  yylval->integer = strtoll(yytext, &endptr, 10);
        -: 1895:
        -: 1896:  if (yylval->integer == LLONG_MAX && errno == ERANGE)
        -: 1897:  {
        -: 1898:    yr_compiler_set_error_extra_info(compiler, yytext);
        -: 1899:    error(ERROR_INTEGER_OVERFLOW);
        -: 1900:  }
        -: 1901:  else if (strstr(yytext, "KB") != NULL)
        -: 1902:  {
        -: 1903:    if (yylval->integer > LLONG_MAX / 1024)
        -: 1904:    {
        -: 1905:      yr_compiler_set_error_extra_info(compiler, yytext);
        -: 1906:      error(ERROR_INTEGER_OVERFLOW);
        -: 1907:    }
        -: 1908:    else
        -: 1909:    {
        -: 1910:      yylval->integer *= 1024;
        -: 1911:    }
        -: 1912:  }
        -: 1913:  else if (strstr(yytext, "MB") != NULL)
        -: 1914:  {
        -: 1915:    if (yylval->integer > LLONG_MAX / 1048576)
        -: 1916:    {
        -: 1917:      yr_compiler_set_error_extra_info(compiler, yytext);
        -: 1918:      error(ERROR_INTEGER_OVERFLOW);
        -: 1919:    }
        -: 1920:    else
        -: 1921:    {
        -: 1922:      yylval->integer *= 1048576;
        -: 1923:    }
        -: 1924:  }
        -: 1925:
        -: 1926:  return _NUMBER_;
        -: 1927:}
        -: 1928:	YY_BREAK
        -: 1929:case 53:
        -: 1930:YY_RULE_SETUP
        -: 1931:#line 526 "lexer.l"
        -: 1932:{
        -: 1933:  yylval->double_ = atof(yytext);
        -: 1934:  return _DOUBLE_;
        -: 1935:}
        -: 1936:	YY_BREAK
        -: 1937:case 54:
        -: 1938:YY_RULE_SETUP
        -: 1939:#line 531 "lexer.l"
        -: 1940:{
        -: 1941:
        -: 1942:  char *endptr;
        -: 1943:
        -: 1944:  errno = 0;
        -: 1945:  yylval->integer = strtoll(yytext, &endptr, 16);
        -: 1946:
        -: 1947:  if (yylval->integer == LLONG_MAX && errno == ERANGE)
        -: 1948:  {
        -: 1949:    yr_compiler_set_error_extra_info(compiler, yytext);
        -: 1950:    error(ERROR_INTEGER_OVERFLOW);
        -: 1951:  }
        -: 1952:
        -: 1953:  return _NUMBER_;
        -: 1954:}
        -: 1955:	YY_BREAK
        -: 1956:case 55:
        -: 1957:YY_RULE_SETUP
        -: 1958:#line 547 "lexer.l"
        -: 1959:{
        -: 1960:
        -: 1961:  char *endptr;
        -: 1962:
        -: 1963:  errno = 0;
        -: 1964:  yylval->integer = strtoll(yytext + 2, &endptr, 8);
        -: 1965:
        -: 1966:  if (yylval->integer == LLONG_MAX && errno == ERANGE)
        -: 1967:  {
        -: 1968:    yr_compiler_set_error_extra_info(compiler, yytext);
        -: 1969:    error(ERROR_INTEGER_OVERFLOW);
        -: 1970:  }
        -: 1971:
        -: 1972:  return _NUMBER_;
        -: 1973:}
        -: 1974:	YY_BREAK
        -: 1975:case 56:
        -: 1976:YY_RULE_SETUP
        -: 1977:#line 564 "lexer.l"
        -: 1978:{     /* saw closing quote - all done */
        -: 1979:
        -: 1980:  alloc_sized_string(s, yyextra->lex_buf_len);
        -: 1981:
        -: 1982:  *yyextra->lex_buf_ptr = '\0';
        -: 1983:  memcpy(s->c_string, yyextra->lex_buf, yyextra->lex_buf_len + 1);
        -: 1984:  yylval->sized_string = s;
        -: 1985:
        -: 1986:  BEGIN(INITIAL);
        -: 1987:
        -: 1988:  return _TEXT_STRING_;
        -: 1989:}
        -: 1990:	YY_BREAK
        -: 1991:case 57:
        -: 1992:YY_RULE_SETUP
        -: 1993:#line 578 "lexer.l"
        -: 1994:{
        -: 1995:
        -: 1996:  lex_check_space_ok("\t", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 1997:  *yyextra->lex_buf_ptr++ = '\t';
        -: 1998:  yyextra->lex_buf_len++;
        -: 1999:}
        -: 2000:	YY_BREAK
        -: 2001:case 58:
        -: 2002:YY_RULE_SETUP
        -: 2003:#line 586 "lexer.l"
        -: 2004:{
        -: 2005:
        -: 2006:  lex_check_space_ok("\n", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 2007:  *yyextra->lex_buf_ptr++ = '\n';
        -: 2008:  yyextra->lex_buf_len++;
        -: 2009:}
        -: 2010:	YY_BREAK
        -: 2011:case 59:
        -: 2012:YY_RULE_SETUP
        -: 2013:#line 594 "lexer.l"
        -: 2014:{
        -: 2015:
        -: 2016:  lex_check_space_ok("\"", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 2017:  *yyextra->lex_buf_ptr++ = '\"';
        -: 2018:  yyextra->lex_buf_len++;
        -: 2019:}
        -: 2020:	YY_BREAK
        -: 2021:case 60:
        -: 2022:YY_RULE_SETUP
        -: 2023:#line 602 "lexer.l"
        -: 2024:{
        -: 2025:
        -: 2026:  lex_check_space_ok("\\", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 2027:  *yyextra->lex_buf_ptr++ = '\\';
        -: 2028:  yyextra->lex_buf_len++;
        -: 2029:}
        -: 2030:	YY_BREAK
        -: 2031:case 61:
        -: 2032:YY_RULE_SETUP
        -: 2033:#line 610 "lexer.l"
        -: 2034:{
        -: 2035:
        -: 2036:   int result;
        -: 2037:
        -: 2038:   sscanf( yytext + 2, "%x", &result );
        -: 2039:   lex_check_space_ok("X", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 2040:   *yyextra->lex_buf_ptr++ = result;
        -: 2041:   yyextra->lex_buf_len++;
        -: 2042:}
        -: 2043:	YY_BREAK
        -: 2044:case 62:
        -: 2045:YY_RULE_SETUP
        -: 2046:#line 621 "lexer.l"
        -: 2047:{ yytext_to_buffer; }
        -: 2048:	YY_BREAK
        -: 2049:case 63:
        -: 2050:/* rule 63 can match eol */
        -: 2051:YY_RULE_SETUP
        -: 2052:#line 624 "lexer.l"
        -: 2053:{
        -: 2054:  syntax_error("unterminated string");
        -: 2055:}
        -: 2056:	YY_BREAK
        -: 2057:case 64:
        -: 2058:/* rule 64 can match eol */
        -: 2059:YY_RULE_SETUP
        -: 2060:#line 629 "lexer.l"
        -: 2061:{
        -: 2062:  syntax_error("illegal escape sequence");
        -: 2063:}
        -: 2064:	YY_BREAK
        -: 2065:case 65:
        -: 2066:YY_RULE_SETUP
        -: 2067:#line 634 "lexer.l"
        -: 2068:{
        -: 2069:
        -: 2070:  if (yyextra->lex_buf_len > 0)
        -: 2071:  {
        -: 2072:    alloc_sized_string(s, yyextra->lex_buf_len);
        -: 2073:
        -: 2074:    if (yytext[1] == 'i')
        -: 2075:      s->flags |= SIZED_STRING_FLAGS_NO_CASE;
        -: 2076:
        -: 2077:    if (yytext[1] == 's' || yytext[2] == 's')
        -: 2078:      s->flags |= SIZED_STRING_FLAGS_DOT_ALL;
        -: 2079:
        -: 2080:    *yyextra->lex_buf_ptr = '\0';
        -: 2081:    strlcpy(s->c_string, yyextra->lex_buf, s->length + 1);
        -: 2082:    yylval->sized_string = s;
        -: 2083:  }
        -: 2084:  else
        -: 2085:  {
        -: 2086:    syntax_error("empty regular expression");
        -: 2087:  }
        -: 2088:
        -: 2089:  BEGIN(INITIAL);
        -: 2090:  return _REGEXP_;
        -: 2091:}
        -: 2092:	YY_BREAK
        -: 2093:case 66:
        -: 2094:YY_RULE_SETUP
        -: 2095:#line 660 "lexer.l"
        -: 2096:{
        -: 2097:
        -: 2098:  lex_check_space_ok("/", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 2099:  *yyextra->lex_buf_ptr++ = '/';
        -: 2100:  yyextra->lex_buf_len++ ;
        -: 2101:}
        -: 2102:	YY_BREAK
        -: 2103:case 67:
        -: 2104:YY_RULE_SETUP
        -: 2105:#line 668 "lexer.l"
        -: 2106:{
        -: 2107:
        -: 2108:  lex_check_space_ok("\\.", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 2109:
        -: 2110:  if (yytext[1] == 0)
        -: 2111:    syntax_error("malformed regular expression");
        -: 2112:
        -: 2113:  *yyextra->lex_buf_ptr++ = yytext[0];
        -: 2114:  *yyextra->lex_buf_ptr++ = yytext[1];
        -: 2115:  yyextra->lex_buf_len += 2;
        -: 2116:}
        -: 2117:	YY_BREAK
        -: 2118:case 68:
        -: 2119:YY_RULE_SETUP
        -: 2120:#line 681 "lexer.l"
        -: 2121:{ yytext_to_buffer; }
        -: 2122:	YY_BREAK
        -: 2123:case 69:
        -: 2124:/* rule 69 can match eol */
        -: 2125:YY_RULE_SETUP
        -: 2126:#line 684 "lexer.l"
        -: 2127:{
        -: 2128:  syntax_error("unterminated regular expression");
        -: 2129:}
        -: 2130:	YY_BREAK
        -: 2131:case 70:
        -: 2132:YY_RULE_SETUP
        -: 2133:#line 689 "lexer.l"
        -: 2134:{
        -: 2135:
        -: 2136:  yylval->sized_string = NULL;
        -: 2137:  yyextra->lex_buf_ptr = yyextra->lex_buf;
        -: 2138:  yyextra->lex_buf_len = 0;
        -: 2139:  BEGIN(str);
        -: 2140:}
        -: 2141:	YY_BREAK
        -: 2142:case 71:
        -: 2143:YY_RULE_SETUP
        -: 2144:#line 698 "lexer.l"
        -: 2145:{
        -: 2146:
        -: 2147:  yylval->sized_string = NULL;
        -: 2148:  yyextra->lex_buf_ptr = yyextra->lex_buf;
        -: 2149:  yyextra->lex_buf_len = 0;
        -: 2150:  BEGIN(regexp);
        -: 2151:}
        -: 2152:	YY_BREAK
        -: 2153:case 72:
        -: 2154:/* rule 72 can match eol */
        -: 2155:YY_RULE_SETUP
        -: 2156:#line 707 "lexer.l"
        -: 2157:{
        -: 2158:  // Match hex-digits with whitespace or comments. The latter are stripped
        -: 2159:  // out by hex_lexer.l
        -: 2160:
        -: 2161:  alloc_sized_string(s, strlen(yytext));
        -: 2162:
        -: 2163:  strlcpy(s->c_string, yytext, s->length + 1);
        -: 2164:  yylval->sized_string = s;
        -: 2165:
        -: 2166:  return _HEX_STRING_;
        -: 2167:}
        -: 2168:	YY_BREAK
        -: 2169:case 73:
        -: 2170:/* rule 73 can match eol */
        -: 2171:YY_RULE_SETUP
        -: 2172:#line 720 "lexer.l"
        -: 2173:/* skip whitespace */
        -: 2174:	YY_BREAK
        -: 2175:case 74:
        -: 2176:YY_RULE_SETUP
        -: 2177:#line 722 "lexer.l"
        -: 2178:{
        -: 2179:
        -: 2180:  if (yytext[0] >= 32 && yytext[0] < 127)
        -: 2181:  {
        -: 2182:    return yytext[0];
        -: 2183:  }
        -: 2184:  else
        -: 2185:  {
        -: 2186:    syntax_error("non-ascii character");
        -: 2187:  }
        -: 2188:}
        -: 2189:	YY_BREAK
        -: 2190:case 75:
        -: 2191:YY_RULE_SETUP
        -: 2192:#line 734 "lexer.l"
        -: 2193:ECHO;
        -: 2194:	YY_BREAK
        -: 2195:#line 2196 "lexer.c"
        -: 2196:
      564: 2197:	case YY_END_OF_BUFFER:
        -: 2198:		{
        -: 2199:		/* Amount of text matched not including the EOB char. */
      564: 2200:		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;
        -: 2201:
        -: 2202:		/* Undo the effects of YY_DO_BEFORE_ACTION. */
      564: 2203:		*yy_cp = yyg->yy_hold_char;
        -: 2204:		YY_RESTORE_YY_MORE_OFFSET
        -: 2205:
      564: 2206:		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
        -: 2207:			{
        -: 2208:			/* We're scanning a new file or input source.  It's
        -: 2209:			 * possible that this happened because the user
        -: 2210:			 * just pointed yyin at a new source and called
        -: 2211:			 * yylex().  If so, then we have to assure
        -: 2212:			 * consistency between YY_CURRENT_BUFFER and our
        -: 2213:			 * globals.  Here is the right place to do so, because
        -: 2214:			 * this is the first action (other than possibly a
        -: 2215:			 * back-up) that will match for the new input source.
        -: 2216:			 */
      282: 2217:			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
      282: 2218:			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
      282: 2219:			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
        -: 2220:			}
        -: 2221:
        -: 2222:		/* Note that here we test for yy_c_buf_p "<=" to the position
        -: 2223:		 * of the first EOB in the buffer, since yy_c_buf_p will
        -: 2224:		 * already have been incremented past the NUL character
        -: 2225:		 * (since all states make transitions on EOB to the
        -: 2226:		 * end-of-buffer state).  Contrast this with the test
        -: 2227:		 * in input().
        -: 2228:		 */
      564: 2229:		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
        -: 2230:			{ /* This was really a NUL. */
        -: 2231:			yy_state_type yy_next_state;
        -: 2232:
    #####: 2233:			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;
        -: 2234:
    #####: 2235:			yy_current_state = yy_get_previous_state( yyscanner );
        -: 2236:
        -: 2237:			/* Okay, we're now positioned to make the NUL
        -: 2238:			 * transition.  We couldn't have
        -: 2239:			 * yy_get_previous_state() go ahead and do it
        -: 2240:			 * for us because it doesn't know how to deal
        -: 2241:			 * with the possibility of jamming (and we don't
        -: 2242:			 * want to build jamming into it because then it
        -: 2243:			 * will run more slowly).
        -: 2244:			 */
        -: 2245:
    #####: 2246:			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);
        -: 2247:
    #####: 2248:			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
        -: 2249:
    #####: 2250:			if ( yy_next_state )
        -: 2251:				{
        -: 2252:				/* Consume the NUL. */
    #####: 2253:				yy_cp = ++yyg->yy_c_buf_p;
    #####: 2254:				yy_current_state = yy_next_state;
    #####: 2255:				goto yy_match;
        -: 2256:				}
        -: 2257:
        -: 2258:			else
        -: 2259:				{
    #####: 2260:				yy_cp = yyg->yy_last_accepting_cpos;
    #####: 2261:				yy_current_state = yyg->yy_last_accepting_state;
    #####: 2262:				goto yy_find_action;
        -: 2263:				}
        -: 2264:			}
        -: 2265:
      564: 2266:		else switch ( yy_get_next_buffer( yyscanner ) )
        -: 2267:			{
      282: 2268:			case EOB_ACT_END_OF_FILE:
        -: 2269:				{
      282: 2270:				yyg->yy_did_buffer_switch_on_eof = 0;
        -: 2271:
        -: 2272:				if ( yywrap( yyscanner ) )
        -: 2273:					{
        -: 2274:					/* Note: because we've taken care in
        -: 2275:					 * yy_get_next_buffer() to have set up
        -: 2276:					 * yytext, we can now set up
        -: 2277:					 * yy_c_buf_p so that if some total
        -: 2278:					 * hoser (like flex itself) wants to
        -: 2279:					 * call the scanner after we return the
        -: 2280:					 * YY_NULL, it'll still work - another
        -: 2281:					 * YY_NULL will get returned.
        -: 2282:					 */
      282: 2283:					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;
        -: 2284:
      282: 2285:					yy_act = YY_STATE_EOF(YY_START);
      282: 2286:					goto do_action;
        -: 2287:					}
        -: 2288:
        -: 2289:				else
        -: 2290:					{
        -: 2291:					if ( ! yyg->yy_did_buffer_switch_on_eof )
        -: 2292:						YY_NEW_FILE;
        -: 2293:					}
        -: 2294:				break;
        -: 2295:				}
        -: 2296:
    #####: 2297:			case EOB_ACT_CONTINUE_SCAN:
    #####: 2298:				yyg->yy_c_buf_p =
    #####: 2299:					yyg->yytext_ptr + yy_amount_of_matched_text;
        -: 2300:
    #####: 2301:				yy_current_state = yy_get_previous_state( yyscanner );
        -: 2302:
    #####: 2303:				yy_cp = yyg->yy_c_buf_p;
    #####: 2304:				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
    #####: 2305:				goto yy_match;
        -: 2306:
      282: 2307:			case EOB_ACT_LAST_MATCH:
      282: 2308:				yyg->yy_c_buf_p =
      282: 2309:				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];
        -: 2310:
      282: 2311:				yy_current_state = yy_get_previous_state( yyscanner );
        -: 2312:
      282: 2313:				yy_cp = yyg->yy_c_buf_p;
      282: 2314:				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
      282: 2315:				goto yy_find_action;
        -: 2316:			}
    #####: 2317:		break;
        -: 2318:		}
        -: 2319:
    #####: 2320:	default:
    #####: 2321:		YY_FATAL_ERROR(
        -: 2322:			"fatal flex scanner internal error--no action found" );
        -: 2323:	} /* end of action switch */
        -: 2324:		} /* end of scanning one token */
        -: 2325:	} /* end of user's declarations */
        -: 2326:} /* end of yylex */
        -: 2327:
        -: 2328:/* yy_get_next_buffer - try to read in a new buffer
        -: 2329: *
        -: 2330: * Returns a code representing an action:
        -: 2331: *	EOB_ACT_LAST_MATCH -
        -: 2332: *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
        -: 2333: *	EOB_ACT_END_OF_FILE - end of file
        -: 2334: */
      564: 2335:static int yy_get_next_buffer (yyscan_t yyscanner)
        -: 2336:{
      564: 2337:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
      564: 2338:	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
      564: 2339:	char *source = yyg->yytext_ptr;
        -: 2340:	int number_to_move, i;
        -: 2341:	int ret_val;
        -: 2342:
      564: 2343:	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
    #####: 2344:		YY_FATAL_ERROR(
        -: 2345:		"fatal flex scanner internal error--end of buffer missed" );
        -: 2346:
      564: 2347:	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
        -: 2348:		{ /* Don't try to fill the buffer, so this is an EOF. */
      564: 2349:		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
        -: 2350:			{
        -: 2351:			/* We matched a single character, the EOB, so
        -: 2352:			 * treat this as a final EOF.
        -: 2353:			 */
      282: 2354:			return EOB_ACT_END_OF_FILE;
        -: 2355:			}
        -: 2356:
        -: 2357:		else
        -: 2358:			{
        -: 2359:			/* We matched some text prior to the EOB, first
        -: 2360:			 * process it.
        -: 2361:			 */
      282: 2362:			return EOB_ACT_LAST_MATCH;
        -: 2363:			}
        -: 2364:		}
        -: 2365:
        -: 2366:	/* Try to read more data. */
        -: 2367:
        -: 2368:	/* First move last chars to start of buffer. */
    #####: 2369:	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);
        -: 2370:
    #####: 2371:	for ( i = 0; i < number_to_move; ++i )
    #####: 2372:		*(dest++) = *(source++);
        -: 2373:
    #####: 2374:	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        -: 2375:		/* don't do the read, it's not guaranteed to return an EOF,
        -: 2376:		 * just force an EOF
        -: 2377:		 */
    #####: 2378:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;
        -: 2379:
        -: 2380:	else
        -: 2381:		{
    #####: 2382:			int num_to_read =
    #####: 2383:			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
        -: 2384:
    #####: 2385:		while ( num_to_read <= 0 )
        -: 2386:			{ /* Not enough room in the buffer - grow it. */
        -: 2387:
        -: 2388:			/* just a shorter name for the current buffer */
    #####: 2389:			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;
        -: 2390:
    #####: 2391:			int yy_c_buf_p_offset =
    #####: 2392:				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);
        -: 2393:
    #####: 2394:			if ( b->yy_is_our_buffer )
        -: 2395:				{
    #####: 2396:				int new_size = b->yy_buf_size * 2;
        -: 2397:
    #####: 2398:				if ( new_size <= 0 )
    #####: 2399:					b->yy_buf_size += b->yy_buf_size / 8;
        -: 2400:				else
    #####: 2401:					b->yy_buf_size *= 2;
        -: 2402:
    #####: 2403:				b->yy_ch_buf = (char *)
        -: 2404:					/* Include room in for 2 EOB chars. */
    #####: 2405:					yyrealloc( (void *) b->yy_ch_buf,
    #####: 2406:							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
        -: 2407:				}
        -: 2408:			else
        -: 2409:				/* Can't grow it, we don't own it. */
    #####: 2410:				b->yy_ch_buf = NULL;
        -: 2411:
    #####: 2412:			if ( ! b->yy_ch_buf )
    #####: 2413:				YY_FATAL_ERROR(
        -: 2414:				"fatal error - scanner input buffer overflow" );
        -: 2415:
    #####: 2416:			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
        -: 2417:
    #####: 2418:			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
        -: 2419:						number_to_move - 1;
        -: 2420:
        -: 2421:			}
        -: 2422:
    #####: 2423:		if ( num_to_read > YY_READ_BUF_SIZE )
    #####: 2424:			num_to_read = YY_READ_BUF_SIZE;
        -: 2425:
        -: 2426:		/* Read in more data. */
    #####: 2427:		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
        -: 2428:			yyg->yy_n_chars, num_to_read );
        -: 2429:
    #####: 2430:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        -: 2431:		}
        -: 2432:
    #####: 2433:	if ( yyg->yy_n_chars == 0 )
        -: 2434:		{
    #####: 2435:		if ( number_to_move == YY_MORE_ADJ )
        -: 2436:			{
    #####: 2437:			ret_val = EOB_ACT_END_OF_FILE;
    #####: 2438:			yyrestart( yyin  , yyscanner);
        -: 2439:			}
        -: 2440:
        -: 2441:		else
        -: 2442:			{
    #####: 2443:			ret_val = EOB_ACT_LAST_MATCH;
    #####: 2444:			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
        -: 2445:				YY_BUFFER_EOF_PENDING;
        -: 2446:			}
        -: 2447:		}
        -: 2448:
        -: 2449:	else
    #####: 2450:		ret_val = EOB_ACT_CONTINUE_SCAN;
        -: 2451:
    #####: 2452:	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
        -: 2453:		/* Extend the array by 50%, plus the number we really need. */
    #####: 2454:		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
    #####: 2455:		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
    #####: 2456:			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
    #####: 2457:		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    #####: 2458:			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
        -: 2459:		/* "- 2" to take care of EOB's */
    #####: 2460:		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
        -: 2461:	}
        -: 2462:
    #####: 2463:	yyg->yy_n_chars += number_to_move;
    #####: 2464:	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    #####: 2465:	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
        -: 2466:
    #####: 2467:	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
        -: 2468:
    #####: 2469:	return ret_val;
        -: 2470:}
        -: 2471:
        -: 2472:/* yy_get_previous_state - get the state just before the EOB char was reached */
        -: 2473:
      282: 2474:    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
        -: 2475:{
        -: 2476:	yy_state_type yy_current_state;
        -: 2477:	char *yy_cp;
      282: 2478:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2479:
      282: 2480:	yy_current_state = yyg->yy_start;
        -: 2481:
      594: 2482:	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
        -: 2483:		{
     312*: 2484:		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
      312: 2485:		if ( yy_accept[yy_current_state] )
        -: 2486:			{
       30: 2487:			yyg->yy_last_accepting_state = yy_current_state;
       30: 2488:			yyg->yy_last_accepting_cpos = yy_cp;
        -: 2489:			}
      344: 2490:		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        -: 2491:			{
       32: 2492:			yy_current_state = (int) yy_def[yy_current_state];
       32: 2493:			if ( yy_current_state >= 248 )
       32: 2494:				yy_c = yy_meta[yy_c];
        -: 2495:			}
      312: 2496:		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
        -: 2497:		}
        -: 2498:
      282: 2499:	return yy_current_state;
        -: 2500:}
        -: 2501:
        -: 2502:/* yy_try_NUL_trans - try to make a transition on the NUL character
        -: 2503: *
        -: 2504: * synopsis
        -: 2505: *	next_state = yy_try_NUL_trans( current_state );
        -: 2506: */
    #####: 2507:    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
        -: 2508:{
        -: 2509:	int yy_is_jam;
    #####: 2510:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
    #####: 2511:	char *yy_cp = yyg->yy_c_buf_p;
        -: 2512:
    #####: 2513:	YY_CHAR yy_c = 1;
    #####: 2514:	if ( yy_accept[yy_current_state] )
        -: 2515:		{
    #####: 2516:		yyg->yy_last_accepting_state = yy_current_state;
    #####: 2517:		yyg->yy_last_accepting_cpos = yy_cp;
        -: 2518:		}
    #####: 2519:	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        -: 2520:		{
    #####: 2521:		yy_current_state = (int) yy_def[yy_current_state];
    #####: 2522:		if ( yy_current_state >= 248 )
    #####: 2523:			yy_c = yy_meta[yy_c];
        -: 2524:		}
    #####: 2525:	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    #####: 2526:	yy_is_jam = (yy_current_state == 247);
        -: 2527:
        -: 2528:	(void)yyg;
    #####: 2529:	return yy_is_jam ? 0 : yy_current_state;
        -: 2530:}
        -: 2531:
        -: 2532:#ifndef YY_NO_UNPUT
        -: 2533:
        -: 2534:#endif
        -: 2535:
        -: 2536:#ifndef YY_NO_INPUT
        -: 2537:#ifdef __cplusplus
        -: 2538:    static int yyinput (yyscan_t yyscanner)
        -: 2539:#else
        -: 2540:    static int input  (yyscan_t yyscanner)
        -: 2541:#endif
        -: 2542:
        -: 2543:{
        -: 2544:	int c;
        -: 2545:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2546:
        -: 2547:	*yyg->yy_c_buf_p = yyg->yy_hold_char;
        -: 2548:
        -: 2549:	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        -: 2550:		{
        -: 2551:		/* yy_c_buf_p now points to the character we want to return.
        -: 2552:		 * If this occurs *before* the EOB characters, then it's a
        -: 2553:		 * valid NUL; if not, then we've hit the end of the buffer.
        -: 2554:		 */
        -: 2555:		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
        -: 2556:			/* This was really a NUL. */
        -: 2557:			*yyg->yy_c_buf_p = '\0';
        -: 2558:
        -: 2559:		else
        -: 2560:			{ /* need more input */
        -: 2561:			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
        -: 2562:			++yyg->yy_c_buf_p;
        -: 2563:
        -: 2564:			switch ( yy_get_next_buffer( yyscanner ) )
        -: 2565:				{
        -: 2566:				case EOB_ACT_LAST_MATCH:
        -: 2567:					/* This happens because yy_g_n_b()
        -: 2568:					 * sees that we've accumulated a
        -: 2569:					 * token and flags that we need to
        -: 2570:					 * try matching the token before
        -: 2571:					 * proceeding.  But for input(),
        -: 2572:					 * there's no matching to consider.
        -: 2573:					 * So convert the EOB_ACT_LAST_MATCH
        -: 2574:					 * to EOB_ACT_END_OF_FILE.
        -: 2575:					 */
        -: 2576:
        -: 2577:					/* Reset buffer status. */
        -: 2578:					yyrestart( yyin , yyscanner);
        -: 2579:
        -: 2580:					/*FALLTHROUGH*/
        -: 2581:
        -: 2582:				case EOB_ACT_END_OF_FILE:
        -: 2583:					{
        -: 2584:					if ( yywrap( yyscanner ) )
        -: 2585:						return 0;
        -: 2586:
        -: 2587:					if ( ! yyg->yy_did_buffer_switch_on_eof )
        -: 2588:						YY_NEW_FILE;
        -: 2589:#ifdef __cplusplus
        -: 2590:					return yyinput(yyscanner);
        -: 2591:#else
        -: 2592:					return input(yyscanner);
        -: 2593:#endif
        -: 2594:					}
        -: 2595:
        -: 2596:				case EOB_ACT_CONTINUE_SCAN:
        -: 2597:					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
        -: 2598:					break;
        -: 2599:				}
        -: 2600:			}
        -: 2601:		}
        -: 2602:
        -: 2603:	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
        -: 2604:	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
        -: 2605:	yyg->yy_hold_char = *++yyg->yy_c_buf_p;
        -: 2606:
        -: 2607:	if ( c == '\n' )
        -: 2608:		
        -: 2609:    do{ yylineno++;
        -: 2610:        yycolumn=0;
        -: 2611:    }while(0)
        -: 2612:;
        -: 2613:
        -: 2614:	return c;
        -: 2615:}
        -: 2616:#endif	/* ifndef YY_NO_INPUT */
        -: 2617:
        -: 2618:/** Immediately switch to a different input stream.
        -: 2619: * @param input_file A readable stream.
        -: 2620: * @param yyscanner The scanner object.
        -: 2621: * @note This function does not reset the start condition to @c INITIAL .
        -: 2622: */
    #####: 2623:    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
        -: 2624:{
    #####: 2625:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2626:
    #####: 2627:	if ( ! YY_CURRENT_BUFFER ){
    #####: 2628:        yyensure_buffer_stack (yyscanner);
    #####: 2629:		YY_CURRENT_BUFFER_LVALUE =
    #####: 2630:            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
        -: 2631:	}
        -: 2632:
    #####: 2633:	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
    #####: 2634:	yy_load_buffer_state( yyscanner );
    #####: 2635:}
        -: 2636:
        -: 2637:/** Switch to a different input buffer.
        -: 2638: * @param new_buffer The new input buffer.
        -: 2639: * @param yyscanner The scanner object.
        -: 2640: */
      282: 2641:    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
        -: 2642:{
      282: 2643:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2644:
        -: 2645:	/* TODO. We should be able to replace this entire function body
        -: 2646:	 * with
        -: 2647:	 *		yypop_buffer_state();
        -: 2648:	 *		yypush_buffer_state(new_buffer);
        -: 2649:     */
      282: 2650:	yyensure_buffer_stack (yyscanner);
     282*: 2651:	if ( YY_CURRENT_BUFFER == new_buffer )
    #####: 2652:		return;
        -: 2653:
      282: 2654:	if ( YY_CURRENT_BUFFER )
        -: 2655:		{
        -: 2656:		/* Flush out information for old buffer. */
    #####: 2657:		*yyg->yy_c_buf_p = yyg->yy_hold_char;
    #####: 2658:		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    #####: 2659:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        -: 2660:		}
        -: 2661:
      282: 2662:	YY_CURRENT_BUFFER_LVALUE = new_buffer;
      282: 2663:	yy_load_buffer_state( yyscanner );
        -: 2664:
        -: 2665:	/* We don't actually know whether we did this switch during
        -: 2666:	 * EOF (yywrap()) processing, but the only time this flag
        -: 2667:	 * is looked at is after yywrap() is called, so it's safe
        -: 2668:	 * to go ahead and always set it.
        -: 2669:	 */
      282: 2670:	yyg->yy_did_buffer_switch_on_eof = 1;
        -: 2671:}
        -: 2672:
      564: 2673:static void yy_load_buffer_state  (yyscan_t yyscanner)
        -: 2674:{
      564: 2675:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
      564: 2676:	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
      564: 2677:	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
      564: 2678:	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
      564: 2679:	yyg->yy_hold_char = *yyg->yy_c_buf_p;
      564: 2680:}
        -: 2681:
        -: 2682:/** Allocate and initialize an input buffer state.
        -: 2683: * @param file A readable stream.
        -: 2684: * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
        -: 2685: * @param yyscanner The scanner object.
        -: 2686: * @return the allocated buffer state.
        -: 2687: */
    #####: 2688:    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
        -: 2689:{
        -: 2690:	YY_BUFFER_STATE b;
        -: 2691:    
    #####: 2692:	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
    #####: 2693:	if ( ! b )
    #####: 2694:		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
        -: 2695:
    #####: 2696:	b->yy_buf_size = size;
        -: 2697:
        -: 2698:	/* yy_ch_buf has to be 2 characters longer than the size given because
        -: 2699:	 * we need to put in 2 end-of-buffer characters.
        -: 2700:	 */
    #####: 2701:	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
    #####: 2702:	if ( ! b->yy_ch_buf )
    #####: 2703:		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
        -: 2704:
    #####: 2705:	b->yy_is_our_buffer = 1;
        -: 2706:
    #####: 2707:	yy_init_buffer( b, file , yyscanner);
        -: 2708:
    #####: 2709:	return b;
        -: 2710:}
        -: 2711:
        -: 2712:/** Destroy the buffer.
        -: 2713: * @param b a buffer created with yy_create_buffer()
        -: 2714: * @param yyscanner The scanner object.
        -: 2715: */
      282: 2716:    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
        -: 2717:{
      282: 2718:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2719:
      282: 2720:	if ( ! b )
    #####: 2721:		return;
        -: 2722:
     282*: 2723:	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
      282: 2724:		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
        -: 2725:
      282: 2726:	if ( b->yy_is_our_buffer )
      282: 2727:		yyfree( (void *) b->yy_ch_buf , yyscanner );
        -: 2728:
      282: 2729:	yyfree( (void *) b , yyscanner );
        -: 2730:}
        -: 2731:
        -: 2732:/* Initializes or reinitializes a buffer.
        -: 2733: * This function is sometimes called more than once on the same buffer,
        -: 2734: * such as during a yyrestart() or at EOF.
        -: 2735: */
    #####: 2736:    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
        -: 2737:
        -: 2738:{
    #####: 2739:	int oerrno = errno;
    #####: 2740:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2741:
    #####: 2742:	yy_flush_buffer( b , yyscanner);
        -: 2743:
    #####: 2744:	b->yy_input_file = file;
    #####: 2745:	b->yy_fill_buffer = 1;
        -: 2746:
        -: 2747:    /* If b is the current buffer, then yy_init_buffer was _probably_
        -: 2748:     * called from yyrestart() or through yy_get_next_buffer.
        -: 2749:     * In that case, we don't want to reset the lineno or column.
        -: 2750:     */
    #####: 2751:    if (b != YY_CURRENT_BUFFER){
    #####: 2752:        b->yy_bs_lineno = 1;
    #####: 2753:        b->yy_bs_column = 0;
        -: 2754:    }
        -: 2755:
    #####: 2756:        b->yy_is_interactive = 0;
        -: 2757:    
    #####: 2758:	errno = oerrno;
    #####: 2759:}
        -: 2760:
        -: 2761:/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
        -: 2762: * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
        -: 2763: * @param yyscanner The scanner object.
        -: 2764: */
    #####: 2765:    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
        -: 2766:{
    #####: 2767:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2768:	if ( ! b )
    #####: 2769:		return;
        -: 2770:
    #####: 2771:	b->yy_n_chars = 0;
        -: 2772:
        -: 2773:	/* We always need two end-of-buffer characters.  The first causes
        -: 2774:	 * a transition to the end-of-buffer state.  The second causes
        -: 2775:	 * a jam in that state.
        -: 2776:	 */
    #####: 2777:	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    #####: 2778:	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
        -: 2779:
    #####: 2780:	b->yy_buf_pos = &b->yy_ch_buf[0];
        -: 2781:
    #####: 2782:	b->yy_at_bol = 1;
    #####: 2783:	b->yy_buffer_status = YY_BUFFER_NEW;
        -: 2784:
    #####: 2785:	if ( b == YY_CURRENT_BUFFER )
    #####: 2786:		yy_load_buffer_state( yyscanner );
        -: 2787:}
        -: 2788:
        -: 2789:/** Pushes the new state onto the stack. The new state becomes
        -: 2790: *  the current state. This function will allocate the stack
        -: 2791: *  if necessary.
        -: 2792: *  @param new_buffer The new state.
        -: 2793: *  @param yyscanner The scanner object.
        -: 2794: */
    #####: 2795:void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
        -: 2796:{
    #####: 2797:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2798:	if (new_buffer == NULL)
    #####: 2799:		return;
        -: 2800:
    #####: 2801:	yyensure_buffer_stack(yyscanner);
        -: 2802:
        -: 2803:	/* This block is copied from yy_switch_to_buffer. */
    #####: 2804:	if ( YY_CURRENT_BUFFER )
        -: 2805:		{
        -: 2806:		/* Flush out information for old buffer. */
    #####: 2807:		*yyg->yy_c_buf_p = yyg->yy_hold_char;
    #####: 2808:		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    #####: 2809:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        -: 2810:		}
        -: 2811:
        -: 2812:	/* Only push if top exists. Otherwise, replace top. */
    #####: 2813:	if (YY_CURRENT_BUFFER)
    #####: 2814:		yyg->yy_buffer_stack_top++;
    #####: 2815:	YY_CURRENT_BUFFER_LVALUE = new_buffer;
        -: 2816:
        -: 2817:	/* copied from yy_switch_to_buffer. */
    #####: 2818:	yy_load_buffer_state( yyscanner );
    #####: 2819:	yyg->yy_did_buffer_switch_on_eof = 1;
        -: 2820:}
        -: 2821:
        -: 2822:/** Removes and deletes the top of the stack, if present.
        -: 2823: *  The next element becomes the new top.
        -: 2824: *  @param yyscanner The scanner object.
        -: 2825: */
      282: 2826:void yypop_buffer_state (yyscan_t yyscanner)
        -: 2827:{
      282: 2828:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
      282: 2829:	if (!YY_CURRENT_BUFFER)
    #####: 2830:		return;
        -: 2831:
     282*: 2832:	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
      282: 2833:	YY_CURRENT_BUFFER_LVALUE = NULL;
      282: 2834:	if (yyg->yy_buffer_stack_top > 0)
    #####: 2835:		--yyg->yy_buffer_stack_top;
        -: 2836:
      282: 2837:	if (YY_CURRENT_BUFFER) {
    #####: 2838:		yy_load_buffer_state( yyscanner );
    #####: 2839:		yyg->yy_did_buffer_switch_on_eof = 1;
        -: 2840:	}
        -: 2841:}
        -: 2842:
        -: 2843:/* Allocates the stack if it does not exist.
        -: 2844: *  Guarantees space for at least one push.
        -: 2845: */
      282: 2846:static void yyensure_buffer_stack (yyscan_t yyscanner)
        -: 2847:{
        -: 2848:	yy_size_t num_to_alloc;
      282: 2849:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2850:
      282: 2851:	if (!yyg->yy_buffer_stack) {
        -: 2852:
        -: 2853:		/* First allocation is just for 2 elements, since we don't know if this
        -: 2854:		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
        -: 2855:		 * immediate realloc on the next call.
        -: 2856:         */
      282: 2857:      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
      282: 2858:		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
        -: 2859:								(num_to_alloc * sizeof(struct yy_buffer_state*)
        -: 2860:								, yyscanner);
      282: 2861:		if ( ! yyg->yy_buffer_stack )
    #####: 2862:			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        -: 2863:
      282: 2864:		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
        -: 2865:
      282: 2866:		yyg->yy_buffer_stack_max = num_to_alloc;
      282: 2867:		yyg->yy_buffer_stack_top = 0;
      282: 2868:		return;
        -: 2869:	}
        -: 2870:
    #####: 2871:	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){
        -: 2872:
        -: 2873:		/* Increase the buffer to prepare for a possible push. */
    #####: 2874:		yy_size_t grow_size = 8 /* arbitrary grow size */;
        -: 2875:
    #####: 2876:		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
    #####: 2877:		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
    #####: 2878:								(yyg->yy_buffer_stack,
        -: 2879:								num_to_alloc * sizeof(struct yy_buffer_state*)
        -: 2880:								, yyscanner);
    #####: 2881:		if ( ! yyg->yy_buffer_stack )
    #####: 2882:			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        -: 2883:
        -: 2884:		/* zero only the new slots.*/
    #####: 2885:		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
    #####: 2886:		yyg->yy_buffer_stack_max = num_to_alloc;
        -: 2887:	}
        -: 2888:}
        -: 2889:
        -: 2890:/** Setup the input buffer state to scan directly from a user-specified character buffer.
        -: 2891: * @param base the character buffer
        -: 2892: * @param size the size in bytes of the character buffer
        -: 2893: * @param yyscanner The scanner object.
        -: 2894: * @return the newly allocated buffer state object.
        -: 2895: */
      282: 2896:YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
        -: 2897:{
        -: 2898:	YY_BUFFER_STATE b;
        -: 2899:    
      282: 2900:	if ( size < 2 ||
      282: 2901:	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
      282: 2902:	     base[size-1] != YY_END_OF_BUFFER_CHAR )
        -: 2903:		/* They forgot to leave room for the EOB's. */
    #####: 2904:		return NULL;
        -: 2905:
      282: 2906:	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
      282: 2907:	if ( ! b )
    #####: 2908:		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
        -: 2909:
      282: 2910:	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
      282: 2911:	b->yy_buf_pos = b->yy_ch_buf = base;
      282: 2912:	b->yy_is_our_buffer = 0;
      282: 2913:	b->yy_input_file = NULL;
      282: 2914:	b->yy_n_chars = b->yy_buf_size;
      282: 2915:	b->yy_is_interactive = 0;
      282: 2916:	b->yy_at_bol = 1;
      282: 2917:	b->yy_fill_buffer = 0;
      282: 2918:	b->yy_buffer_status = YY_BUFFER_NEW;
        -: 2919:
      282: 2920:	yy_switch_to_buffer( b , yyscanner );
        -: 2921:
      282: 2922:	return b;
        -: 2923:}
        -: 2924:
        -: 2925:/** Setup the input buffer state to scan a string. The next call to yylex() will
        -: 2926: * scan from a @e copy of @a str.
        -: 2927: * @param yystr a NUL-terminated string to scan
        -: 2928: * @param yyscanner The scanner object.
        -: 2929: * @return the newly allocated buffer state object.
        -: 2930: * @note If you want to scan bytes that may contain NUL values, then use
        -: 2931: *       yy_scan_bytes() instead.
        -: 2932: */
      282: 2933:YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
        -: 2934:{
        -: 2935:    
      282: 2936:	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
        -: 2937:}
        -: 2938:
        -: 2939:/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
        -: 2940: * scan from a @e copy of @a bytes.
        -: 2941: * @param yybytes the byte buffer to scan
        -: 2942: * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
        -: 2943: * @param yyscanner The scanner object.
        -: 2944: * @return the newly allocated buffer state object.
        -: 2945: */
      282: 2946:YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
        -: 2947:{
        -: 2948:	YY_BUFFER_STATE b;
        -: 2949:	char *buf;
        -: 2950:	yy_size_t n;
        -: 2951:	int i;
        -: 2952:    
        -: 2953:	/* Get memory for full buffer, including space for trailing EOB's. */
      282: 2954:	n = (yy_size_t) (_yybytes_len + 2);
      282: 2955:	buf = (char *) yyalloc( n , yyscanner );
      282: 2956:	if ( ! buf )
    #####: 2957:		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
        -: 2958:
    14930: 2959:	for ( i = 0; i < _yybytes_len; ++i )
    14648: 2960:		buf[i] = yybytes[i];
        -: 2961:
      282: 2962:	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
        -: 2963:
      282: 2964:	b = yy_scan_buffer( buf, n , yyscanner);
      282: 2965:	if ( ! b )
    #####: 2966:		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
        -: 2967:
        -: 2968:	/* It's okay to grow etc. this buffer, and we should throw it
        -: 2969:	 * away when we're done.
        -: 2970:	 */
      282: 2971:	b->yy_is_our_buffer = 1;
        -: 2972:
      282: 2973:	return b;
        -: 2974:}
        -: 2975:
        -: 2976:#ifndef YY_EXIT_FAILURE
        -: 2977:#define YY_EXIT_FAILURE 2
        -: 2978:#endif
        -: 2979:
    #####: 2980:static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
        -: 2981:{
    #####: 2982:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2983:	(void)yyg;
    #####: 2984:	fprintf( stderr, "%s\n", msg );
    #####: 2985:	exit( YY_EXIT_FAILURE );
        -: 2986:}
        -: 2987:
        -: 2988:/* Redefine yyless() so it works in section 3 code. */
        -: 2989:
        -: 2990:#undef yyless
        -: 2991:#define yyless(n) \
        -: 2992:	do \
        -: 2993:		{ \
        -: 2994:		/* Undo effects of setting up yytext. */ \
        -: 2995:        int yyless_macro_arg = (n); \
        -: 2996:        YY_LESS_LINENO(yyless_macro_arg);\
        -: 2997:		yytext[yyleng] = yyg->yy_hold_char; \
        -: 2998:		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
        -: 2999:		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
        -: 3000:		*yyg->yy_c_buf_p = '\0'; \
        -: 3001:		yyleng = yyless_macro_arg; \
        -: 3002:		} \
        -: 3003:	while ( 0 )
        -: 3004:
        -: 3005:/* Accessor  methods (get/set functions) to struct members. */
        -: 3006:
        -: 3007:/** Get the user-defined data for this scanner.
        -: 3008: * @param yyscanner The scanner object.
        -: 3009: */
     3925: 3010:YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
        -: 3011:{
     3925: 3012:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
     3925: 3013:    return yyextra;
        -: 3014:}
        -: 3015:
        -: 3016:/** Get the current line number.
        -: 3017: * @param yyscanner The scanner object.
        -: 3018: */
      285: 3019:int yyget_lineno  (yyscan_t yyscanner)
        -: 3020:{
      285: 3021:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3022:
      285: 3023:        if (! YY_CURRENT_BUFFER)
        5: 3024:            return 0;
        -: 3025:    
      280: 3026:    return yylineno;
        -: 3027:}
        -: 3028:
        -: 3029:/** Get the current column number.
        -: 3030: * @param yyscanner The scanner object.
        -: 3031: */
    #####: 3032:int yyget_column  (yyscan_t yyscanner)
        -: 3033:{
    #####: 3034:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3035:
    #####: 3036:        if (! YY_CURRENT_BUFFER)
    #####: 3037:            return 0;
        -: 3038:    
    #####: 3039:    return yycolumn;
        -: 3040:}
        -: 3041:
        -: 3042:/** Get the input stream.
        -: 3043: * @param yyscanner The scanner object.
        -: 3044: */
    #####: 3045:FILE *yyget_in  (yyscan_t yyscanner)
        -: 3046:{
    #####: 3047:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3048:    return yyin;
        -: 3049:}
        -: 3050:
        -: 3051:/** Get the output stream.
        -: 3052: * @param yyscanner The scanner object.
        -: 3053: */
    #####: 3054:FILE *yyget_out  (yyscan_t yyscanner)
        -: 3055:{
    #####: 3056:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3057:    return yyout;
        -: 3058:}
        -: 3059:
        -: 3060:/** Get the length of the current token.
        -: 3061: * @param yyscanner The scanner object.
        -: 3062: */
    #####: 3063:int yyget_leng  (yyscan_t yyscanner)
        -: 3064:{
    #####: 3065:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3066:    return yyleng;
        -: 3067:}
        -: 3068:
        -: 3069:/** Get the current token.
        -: 3070: * @param yyscanner The scanner object.
        -: 3071: */
        -: 3072:
    #####: 3073:char *yyget_text  (yyscan_t yyscanner)
        -: 3074:{
    #####: 3075:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3076:    return yytext;
        -: 3077:}
        -: 3078:
        -: 3079:/** Set the user-defined data. This data is never touched by the scanner.
        -: 3080: * @param user_defined The data to be associated with this scanner.
        -: 3081: * @param yyscanner The scanner object.
        -: 3082: */
      282: 3083:void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
        -: 3084:{
      282: 3085:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
      282: 3086:    yyextra = user_defined ;
      282: 3087:}
        -: 3088:
        -: 3089:/** Set the current line number.
        -: 3090: * @param _line_number line number
        -: 3091: * @param yyscanner The scanner object.
        -: 3092: */
      282: 3093:void yyset_lineno (int  _line_number , yyscan_t yyscanner)
        -: 3094:{
      282: 3095:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3096:
        -: 3097:        /* lineno is only valid if an input buffer exists. */
      282: 3098:        if (! YY_CURRENT_BUFFER )
    #####: 3099:           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
        -: 3100:    
      282: 3101:    yylineno = _line_number;
      282: 3102:}
        -: 3103:
        -: 3104:/** Set the current column.
        -: 3105: * @param _column_no column number
        -: 3106: * @param yyscanner The scanner object.
        -: 3107: */
    #####: 3108:void yyset_column (int  _column_no , yyscan_t yyscanner)
        -: 3109:{
    #####: 3110:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3111:
        -: 3112:        /* column is only valid if an input buffer exists. */
    #####: 3113:        if (! YY_CURRENT_BUFFER )
    #####: 3114:           YY_FATAL_ERROR( "yyset_column called with no buffer" );
        -: 3115:    
    #####: 3116:    yycolumn = _column_no;
    #####: 3117:}
        -: 3118:
        -: 3119:/** Set the input stream. This does not discard the current
        -: 3120: * input buffer.
        -: 3121: * @param _in_str A readable stream.
        -: 3122: * @param yyscanner The scanner object.
        -: 3123: * @see yy_switch_to_buffer
        -: 3124: */
    #####: 3125:void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
        -: 3126:{
    #####: 3127:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3128:    yyin = _in_str ;
    #####: 3129:}
        -: 3130:
    #####: 3131:void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
        -: 3132:{
    #####: 3133:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3134:    yyout = _out_str ;
    #####: 3135:}
        -: 3136:
    #####: 3137:int yyget_debug  (yyscan_t yyscanner)
        -: 3138:{
    #####: 3139:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3140:    return yy_flex_debug;
        -: 3141:}
        -: 3142:
    #####: 3143:void yyset_debug (int  _bdebug , yyscan_t yyscanner)
        -: 3144:{
    #####: 3145:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3146:    yy_flex_debug = _bdebug ;
    #####: 3147:}
        -: 3148:
        -: 3149:/* Accessor methods for yylval and yylloc */
        -: 3150:
    #####: 3151:YYSTYPE * yyget_lval  (yyscan_t yyscanner)
        -: 3152:{
    #####: 3153:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3154:    return yylval;
        -: 3155:}
        -: 3156:
    #####: 3157:void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
        -: 3158:{
    #####: 3159:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3160:    yylval = yylval_param;
    #####: 3161:}
        -: 3162:
        -: 3163:/* User-visible API */
        -: 3164:
        -: 3165:/* yylex_init is special because it creates the scanner itself, so it is
        -: 3166: * the ONLY reentrant function that doesn't take the scanner as the last argument.
        -: 3167: * That's why we explicitly handle the declaration, instead of using our macros.
        -: 3168: */
      282: 3169:int yylex_init(yyscan_t* ptr_yy_globals)
        -: 3170:{
      282: 3171:    if (ptr_yy_globals == NULL){
    #####: 3172:        errno = EINVAL;
    #####: 3173:        return 1;
        -: 3174:    }
        -: 3175:
      282: 3176:    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );
        -: 3177:
      282: 3178:    if (*ptr_yy_globals == NULL){
    #####: 3179:        errno = ENOMEM;
    #####: 3180:        return 1;
        -: 3181:    }
        -: 3182:
        -: 3183:    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
      282: 3184:    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
        -: 3185:
      282: 3186:    return yy_init_globals ( *ptr_yy_globals );
        -: 3187:}
        -: 3188:
        -: 3189:/* yylex_init_extra has the same functionality as yylex_init, but follows the
        -: 3190: * convention of taking the scanner as the last argument. Note however, that
        -: 3191: * this is a *pointer* to a scanner, as it will be allocated by this call (and
        -: 3192: * is the reason, too, why this function also must handle its own declaration).
        -: 3193: * The user defined value in the first argument will be available to yyalloc in
        -: 3194: * the yyextra field.
        -: 3195: */
    #####: 3196:int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
        -: 3197:{
        -: 3198:    struct yyguts_t dummy_yyguts;
        -: 3199:
    #####: 3200:    yyset_extra (yy_user_defined, &dummy_yyguts);
        -: 3201:
    #####: 3202:    if (ptr_yy_globals == NULL){
    #####: 3203:        errno = EINVAL;
    #####: 3204:        return 1;
        -: 3205:    }
        -: 3206:
    #####: 3207:    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
        -: 3208:
    #####: 3209:    if (*ptr_yy_globals == NULL){
    #####: 3210:        errno = ENOMEM;
    #####: 3211:        return 1;
        -: 3212:    }
        -: 3213:
        -: 3214:    /* By setting to 0xAA, we expose bugs in
        -: 3215:    yy_init_globals. Leave at 0x00 for releases. */
    #####: 3216:    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
        -: 3217:
    #####: 3218:    yyset_extra (yy_user_defined, *ptr_yy_globals);
        -: 3219:
    #####: 3220:    return yy_init_globals ( *ptr_yy_globals );
        -: 3221:}
        -: 3222:
      564: 3223:static int yy_init_globals (yyscan_t yyscanner)
        -: 3224:{
      564: 3225:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3226:    /* Initialization is the same as for the non-reentrant scanner.
        -: 3227:     * This function is called from yylex_destroy(), so don't allocate here.
        -: 3228:     */
        -: 3229:
      564: 3230:    yyg->yy_buffer_stack = NULL;
      564: 3231:    yyg->yy_buffer_stack_top = 0;
      564: 3232:    yyg->yy_buffer_stack_max = 0;
      564: 3233:    yyg->yy_c_buf_p = NULL;
      564: 3234:    yyg->yy_init = 0;
      564: 3235:    yyg->yy_start = 0;
        -: 3236:
      564: 3237:    yyg->yy_start_stack_ptr = 0;
      564: 3238:    yyg->yy_start_stack_depth = 0;
      564: 3239:    yyg->yy_start_stack =  NULL;
        -: 3240:
        -: 3241:/* Defined in main.c */
        -: 3242:#ifdef YY_STDINIT
        -: 3243:    yyin = stdin;
        -: 3244:    yyout = stdout;
        -: 3245:#else
      564: 3246:    yyin = NULL;
      564: 3247:    yyout = NULL;
        -: 3248:#endif
        -: 3249:
        -: 3250:    /* For future reference: Set errno on error, since we are called by
        -: 3251:     * yylex_init()
        -: 3252:     */
      564: 3253:    return 0;
        -: 3254:}
        -: 3255:
        -: 3256:/* yylex_destroy is for both reentrant and non-reentrant scanners. */
      282: 3257:int yylex_destroy  (yyscan_t yyscanner)
        -: 3258:{
      282: 3259:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3260:
        -: 3261:    /* Pop the buffer stack, destroying each element. */
      282: 3262:	while(YY_CURRENT_BUFFER){
    #####: 3263:		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
    #####: 3264:		YY_CURRENT_BUFFER_LVALUE = NULL;
    #####: 3265:		yypop_buffer_state(yyscanner);
        -: 3266:	}
        -: 3267:
        -: 3268:	/* Destroy the stack itself. */
      282: 3269:	yyfree(yyg->yy_buffer_stack , yyscanner);
      282: 3270:	yyg->yy_buffer_stack = NULL;
        -: 3271:
        -: 3272:    /* Destroy the start condition stack. */
      282: 3273:        yyfree( yyg->yy_start_stack , yyscanner );
      282: 3274:        yyg->yy_start_stack = NULL;
        -: 3275:
        -: 3276:    /* Reset the globals. This is important in a non-reentrant scanner so the next time
        -: 3277:     * yylex() is called, initialization will occur. */
      282: 3278:    yy_init_globals( yyscanner);
        -: 3279:
        -: 3280:    /* Destroy the main struct (reentrant only). */
      282: 3281:    yyfree ( yyscanner , yyscanner );
      282: 3282:    yyscanner = NULL;
      282: 3283:    return 0;
        -: 3284:}
        -: 3285:
        -: 3286:/*
        -: 3287: * Internal utility routines.
        -: 3288: */
        -: 3289:
        -: 3290:#ifndef yytext_ptr
        -: 3291:static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
        -: 3292:{
        -: 3293:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3294:	(void)yyg;
        -: 3295:
        -: 3296:	int i;
        -: 3297:	for ( i = 0; i < n; ++i )
        -: 3298:		s1[i] = s2[i];
        -: 3299:}
        -: 3300:#endif
        -: 3301:
        -: 3302:#ifdef YY_NEED_STRLEN
        -: 3303:static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
        -: 3304:{
        -: 3305:	int n;
        -: 3306:	for ( n = 0; s[n]; ++n )
        -: 3307:		;
        -: 3308:
        -: 3309:	return n;
        -: 3310:}
        -: 3311:#endif
        -: 3312:
     1128: 3313:void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
        -: 3314:{
     1128: 3315:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3316:	(void)yyg;
     1128: 3317:	return malloc(size);
        -: 3318:}
        -: 3319:
    #####: 3320:void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
        -: 3321:{
    #####: 3322:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3323:	(void)yyg;
        -: 3324:
        -: 3325:	/* The cast to (char *) in the following accommodates both
        -: 3326:	 * implementations that use char* generic pointers, and those
        -: 3327:	 * that use void* generic pointers.  It works with the latter
        -: 3328:	 * because both ANSI C and C++ allow castless assignment from
        -: 3329:	 * any pointer type to void*, and deal with argument conversions
        -: 3330:	 * as though doing an assignment.
        -: 3331:	 */
    #####: 3332:	return realloc(ptr, size);
        -: 3333:}
        -: 3334:
     1410: 3335:void yyfree (void * ptr , yyscan_t yyscanner)
        -: 3336:{
     1410: 3337:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3338:	(void)yyg;
     1410: 3339:	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
     1410: 3340:}
        -: 3341:
        -: 3342:#define YYTABLES_NAME "yytables"
        -: 3343:
        -: 3344:#line 734 "lexer.l"
        -: 3345:
        -: 3346:
        -: 3347:
        -: 3348:void yywarning(
        -: 3349:    yyscan_t yyscanner,
        -: 3350:    const char *message_fmt,
        -: 3351:    ...)
        -: 3352:{
        -: 3353:  YR_COMPILER* compiler = yyget_extra(yyscanner);
        -: 3354:
        -: 3355:  char* file_name;
        -: 3356:  char message[512];
        -: 3357:  va_list message_args;
        -: 3358:
        -: 3359:  if (compiler->callback == NULL)
        -: 3360:    return;
        -: 3361:
        -: 3362:  va_start(message_args, message_fmt);
        -: 3363:
        -: 3364:  if (compiler->file_name_stack_ptr > 0)
        -: 3365:    file_name = compiler->file_name_stack[compiler->file_name_stack_ptr - 1];
        -: 3366:  else
        -: 3367:    file_name = NULL;
        -: 3368:
        -: 3369:  vsnprintf(message, sizeof(message), message_fmt, message_args);
        -: 3370:
        -: 3371:  compiler->callback(
        -: 3372:      YARA_ERROR_LEVEL_WARNING,
        -: 3373:      file_name,
        -: 3374:      compiler->current_line ? compiler->current_line : yyget_lineno(yyscanner),
        -: 3375:      message,
        -: 3376:      compiler->user_data);
        -: 3377:
        -: 3378:  va_end(message_args);
        -: 3379:}
        -: 3380:
        -: 3381:
        -: 3382:void yyfatal(
        -: 3383:    yyscan_t yyscanner,
        -: 3384:    const char *error_message)
        -: 3385:{
        -: 3386:  YR_COMPILER* compiler = yyget_extra(yyscanner);
        -: 3387:
        -: 3388:  yyerror(yyscanner, compiler, error_message);
        -: 3389:  longjmp(compiler->error_recovery, 1);
        -: 3390:}
        -: 3391:
        -: 3392:
        -: 3393:void yyerror(
        -: 3394:    yyscan_t yyscanner,
        -: 3395:    YR_COMPILER* compiler,
        -: 3396:    const char *error_message)
        -: 3397:{
        -: 3398:  char message[512] = {'\0'};
        -: 3399:  char* file_name = NULL;
        -: 3400:
        -: 3401:  /*
        -: 3402:    if error_message != NULL the error comes from yyparse internal code
        -: 3403:    else the error comes from my code and the error code is set in
        -: 3404:    compiler->last_error
        -: 3405:  */
        -: 3406:
        -: 3407:  compiler->errors++;
        -: 3408:
        -: 3409:  if (compiler->current_line != 0)
        -: 3410:    compiler->last_error_line = compiler->current_line;
        -: 3411:  else
        -: 3412:    compiler->last_error_line = yyget_lineno(yyscanner);
        -: 3413:
        -: 3414:  compiler->current_line = 0;
        -: 3415:
        -: 3416:  if (compiler->file_name_stack_ptr > 0)
        -: 3417:  {
        -: 3418:    file_name = compiler->file_name_stack[compiler->file_name_stack_ptr - 1];
        -: 3419:  }
        -: 3420:  else
        -: 3421:  {
        -: 3422:    file_name = NULL;
        -: 3423:  }
        -: 3424:
        -: 3425:  if (error_message != NULL)
        -: 3426:  {
        -: 3427:    yr_compiler_set_error_extra_info(compiler, error_message);
        -: 3428:    compiler->last_error = ERROR_SYNTAX_ERROR;
        -: 3429:
        -: 3430:    if (compiler->callback != NULL)
        -: 3431:    {
        -: 3432:      compiler->callback(
        -: 3433:          YARA_ERROR_LEVEL_ERROR,
        -: 3434:          file_name,
        -: 3435:          compiler->last_error_line,
        -: 3436:          error_message,
        -: 3437:          compiler->user_data);
        -: 3438:    }
        -: 3439:  }
        -: 3440:  else if (compiler->callback != NULL)
        -: 3441:  {
        -: 3442:    yr_compiler_get_error_message(compiler, message, sizeof(message));
        -: 3443:
        -: 3444:    compiler->callback(
        -: 3445:      YARA_ERROR_LEVEL_ERROR,
        -: 3446:      file_name,
        -: 3447:      compiler->last_error_line,
        -: 3448:      message,
        -: 3449:      compiler->user_data);
        -: 3450:  }
        -: 3451:}
        -: 3452:
        -: 3453:
        -: 3454:int yr_lex_parse_rules_string(
        -: 3455:    const char* rules_string,
        -: 3456:    YR_COMPILER* compiler)
        -: 3457:{
        -: 3458:  yyscan_t yyscanner;
        -: 3459:
        -: 3460:  compiler->errors = 0;
        -: 3461:
        -: 3462:  if (setjmp(compiler->error_recovery) != 0)
        -: 3463:    return compiler->errors;
        -: 3464:
        -: 3465:  yylex_init(&yyscanner);
        -: 3466:
        -: 3467:  #if YYDEBUG
        -: 3468:  yydebug = 1;
        -: 3469:  #endif
        -: 3470:
        -: 3471:  yyset_extra(compiler, yyscanner);
        -: 3472:  yy_scan_string(rules_string, yyscanner);
        -: 3473:  yyset_lineno(1, yyscanner);
        -: 3474:  yyparse(yyscanner, compiler);
        -: 3475:  yylex_destroy(yyscanner);
        -: 3476:
        -: 3477:  return compiler->errors;
        -: 3478:}
        -: 3479:
        -: 3480:
        -: 3481:int yr_lex_parse_rules_file(
        -: 3482:    FILE* rules_file,
        -: 3483:    YR_COMPILER* compiler)
        -: 3484:{
        -: 3485:  yyscan_t yyscanner;
        -: 3486:
        -: 3487:  compiler->errors = 0;
        -: 3488:
        -: 3489:  if (setjmp(compiler->error_recovery) != 0)
        -: 3490:    return compiler->errors;
        -: 3491:
        -: 3492:  yylex_init(&yyscanner);
        -: 3493:
        -: 3494:  #if YYDEBUG
        -: 3495:  yydebug = 1;
        -: 3496:  #endif
        -: 3497:
        -: 3498:  yyset_in(rules_file, yyscanner);
        -: 3499:  yyset_extra(compiler, yyscanner);
        -: 3500:  yyparse(yyscanner, compiler);
        -: 3501:  yylex_destroy(yyscanner);
        -: 3502:
        -: 3503:  return compiler->errors;
        -: 3504:}
        -: 3505:
        -: 3506:
        -: 3507:int yr_lex_parse_rules_fd(
        -: 3508:    YR_FILE_DESCRIPTOR rules_fd,
        -: 3509:    YR_COMPILER* compiler)
        -: 3510:{
        -: 3511:  yyscan_t yyscanner;
        -: 3512:  size_t file_size;
        -: 3513:  void* buffer;
        -: 3514:
        -: 3515:  compiler->errors = 0;
        -: 3516:
        -: 3517:  if (setjmp(compiler->error_recovery) != 0)
        -: 3518:    return compiler->errors;
        -: 3519:
        -: 3520:  #if defined(_WIN32) || defined(__CYGWIN__)
        -: 3521:  file_size = (size_t) GetFileSize(rules_fd, NULL);
        -: 3522:  #else
        -: 3523:  struct stat fs;
        -: 3524:  if (fstat(rules_fd, &fs) != 0)
        -: 3525:  {
        -: 3526:    compiler->errors = 1;
        -: 3527:    compiler->last_error = ERROR_COULD_NOT_READ_FILE;
        -: 3528:    return compiler->errors;
        -: 3529:  }
        -: 3530:  file_size = (size_t) fs.st_size;
        -: 3531:  #endif
        -: 3532:
        -: 3533:  buffer = yr_malloc(file_size);
        -: 3534:
        -: 3535:  if (buffer == NULL)
        -: 3536:  {
        -: 3537:    compiler->errors = 1;
        -: 3538:    compiler->last_error = ERROR_INSUFFICIENT_MEMORY;
        -: 3539:    return compiler->errors;
        -: 3540:  }
        -: 3541:
        -: 3542:  #if defined(_WIN32) || defined(__CYGWIN__)
        -: 3543:  if (!ReadFile(rules_fd, buffer, file_size, NULL, NULL))
        -: 3544:  #else
        -: 3545:  if (read(rules_fd, buffer, file_size) != file_size)
        -: 3546:  #endif
        -: 3547:  {
        -: 3548:    yr_free(buffer);
        -: 3549:    compiler->errors = 1;
        -: 3550:    compiler->last_error = ERROR_COULD_NOT_READ_FILE;
        -: 3551:    return compiler->errors;
        -: 3552:  }
        -: 3553:
        -: 3554:  yylex_init(&yyscanner);
        -: 3555:
        -: 3556:  #if YYDEBUG
        -: 3557:  yydebug = 1;
        -: 3558:  #endif
        -: 3559:
        -: 3560:  yyset_extra(compiler, yyscanner);
        -: 3561:  yy_scan_bytes((const char*) buffer, file_size, yyscanner);
        -: 3562:  yyparse(yyscanner, compiler);
        -: 3563:  yylex_destroy(yyscanner);
        -: 3564:
        -: 3565:  yr_free(buffer);
        -: 3566:
        -: 3567:  return compiler->errors;
        -: 3568:}
        -: 3569:
