        -:    0:Source:re_grammar.y
        -:    0:Graph:/home/workspace/libyara/re_grammar.gcno
        -:    0:Data:/home/workspace/libyara/re_grammar.gcda
        -:    0:Runs:8
        -:    1:/*
        -:    2:Copyright (c) 2013. The YARA Authors. All Rights Reserved.
        -:    3:
        -:    4:Redistribution and use in source and binary forms, with or without modification,
        -:    5:are permitted provided that the following conditions are met:
        -:    6:
        -:    7:1. Redistributions of source code must retain the above copyright notice, this
        -:    8:list of conditions and the following disclaimer.
        -:    9:
        -:   10:2. Redistributions in binary form must reproduce the above copyright notice,
        -:   11:this list of conditions and the following disclaimer in the documentation and/or
        -:   12:other materials provided with the distribution.
        -:   13:
        -:   14:3. Neither the name of the copyright holder nor the names of its contributors
        -:   15:may be used to endorse or promote products derived from this software without
        -:   16:specific prior written permission.
        -:   17:
        -:   18:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:   19:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   20:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   21:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:   22:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   23:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   24:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:   25:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   26:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   27:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   28:*/
        -:   29:
        -:   30:%{
        -:   31:
        -:   32:#include <yara/integers.h>
        -:   33:#include <yara/utils.h>
        -:   34:#include <yara/error.h>
        -:   35:#include <yara/limits.h>
        -:   36:#include <yara/mem.h>
        -:   37:#include <yara/re.h>
        -:   38:#include <yara/re_lexer.h>
        -:   39:
        -:   40:
        -:   41:#define YYERROR_VERBOSE
        -:   42:
        -:   43:#define YYMALLOC yr_malloc
        -:   44:#define YYFREE yr_free
        -:   45:
        -:   46:#define mark_as_not_fast_regexp() \
        -:   47:    ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP
        -:   48:
        -:   49:#define fail_if(x, error) \
        -:   50:    if (x) \
        -:   51:    { \
        -:   52:      lex_env->last_error = error; \
        -:   53:      YYABORT; \
        -:   54:    } \
        -:   55:
        -:   56:#define destroy_node_if(x, node) \
        -:   57:    if (x) \
        -:   58:    { \
        -:   59:      yr_re_node_destroy(node); \
        -:   60:    } \
        -:   61:
        -:   62:%}
        -:   63:
        -:   64:%name-prefix "re_yy"
        -:   65:%pure-parser
        -:   66:
        -:   67:%parse-param {void *yyscanner}
        -:   68:%parse-param {RE_LEX_ENVIRONMENT *lex_env}
        -:   69:
        -:   70:%lex-param {yyscan_t yyscanner}
        -:   71:%lex-param {RE_LEX_ENVIRONMENT *lex_env}
        -:   72:
        -:   73:%union {
        -:   74:  int integer;
        -:   75:  uint32_t range;
        -:   76:  RE_NODE* re_node;
        -:   77:  RE_CLASS* re_class;
        -:   78:}
        -:   79:
        -:   80:
        -:   81:%token <integer> _CHAR_ _ANY_
        -:   82:%token <range> _RANGE_
        -:   83:%token <re_class> _CLASS_
        -:   84:
        -:   85:%token _WORD_CHAR_
        -:   86:%token _NON_WORD_CHAR_
        -:   87:%token _SPACE_
        -:   88:%token _NON_SPACE_
        -:   89:%token _DIGIT_
        -:   90:%token _NON_DIGIT_
        -:   91:%token _WORD_BOUNDARY_
        -:   92:%token _NON_WORD_BOUNDARY_
        -:   93:
        -:   94:%type <re_node>  alternative concatenation repeat single
        -:   95:
    #####:   96:%destructor { yr_free($$); $$ = NULL; } _CLASS_
        1:   97:%destructor { yr_re_node_destroy($$); $$ = NULL; } alternative
    #####:   98:%destructor { yr_re_node_destroy($$); $$ = NULL; } concatenation
    #####:   99:%destructor { yr_re_node_destroy($$); $$ = NULL; } repeat
    #####:  100:%destructor { yr_re_node_destroy($$); $$ = NULL; } single
        -:  101:
        -:  102:%%
        -:  103:
        -:  104:re  : alternative
        -:  105:      {
      271:  106:        RE_AST* re_ast = yyget_extra(yyscanner);
      271:  107:        re_ast->root_node = $1;
        -:  108:      }
        -:  109:    | error
        -:  110:    ;
        -:  111:
        -:  112:alternative
        -:  113:    : concatenation
        -:  114:      {
      322:  115:        $$ = $1;
        -:  116:      }
        -:  117:    | alternative '|' concatenation
        -:  118:      {
       48:  119:        mark_as_not_fast_regexp();
        -:  120:
       48:  121:        $$ = yr_re_node_create(RE_NODE_ALT);
        -:  122:
      48*:  123:        destroy_node_if($$ == NULL, $1);
      48*:  124:        destroy_node_if($$ == NULL, $3);
        -:  125:
      48*:  126:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  127:
       48:  128:        yr_re_node_append_child($$, $1);
       48:  129:        yr_re_node_append_child($$, $3);
        -:  130:      }
        -:  131:    | alternative '|'
        -:  132:      {
        -:  133:        RE_NODE* node;
        -:  134:
        2:  135:        mark_as_not_fast_regexp();
        -:  136:
        2:  137:        node = yr_re_node_create(RE_NODE_EMPTY);
        -:  138:
       2*:  139:        destroy_node_if($$ == NULL, $1);
       2*:  140:        fail_if(node == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  141:
        2:  142:        $$ = yr_re_node_create(RE_NODE_ALT);
        -:  143:
       2*:  144:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  145:
        2:  146:        yr_re_node_append_child($$, $1);
        2:  147:        yr_re_node_append_child($$, node);
        -:  148:      }
        -:  149:    ;
        -:  150:
        -:  151:concatenation
        -:  152:    : repeat
        -:  153:      {
      370:  154:        $$ = yr_re_node_create(RE_NODE_CONCAT);
        -:  155:
     370*:  156:        destroy_node_if($$ == NULL, $1);
     370*:  157:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  158:
      370:  159:        yr_re_node_append_child($$, $1);
        -:  160:      }
        -:  161:    | concatenation repeat
        -:  162:      {
      695:  163:        yr_re_node_append_child($1, $2);
      695:  164:        $$ = $1;
        -:  165:      }
        -:  166:    ;
        -:  167:
        -:  168:repeat
        -:  169:    : single '*'
        -:  170:      {
        -:  171:        RE_AST* re_ast;
        -:  172:
       35:  173:        mark_as_not_fast_regexp();
        -:  174:
       35:  175:        re_ast = yyget_extra(yyscanner);
       35:  176:        re_ast->flags |= RE_FLAGS_GREEDY;
        -:  177:
       35:  178:        $$ = yr_re_node_create(RE_NODE_STAR);
        -:  179:
      35*:  180:        destroy_node_if($$ == NULL, $1);
      35*:  181:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  182:
       35:  183:        yr_re_node_append_child($$, $1);
        -:  184:      }
        -:  185:    | single '*' '?'
        -:  186:      {
        -:  187:        RE_AST* re_ast;
        -:  188:
        2:  189:        mark_as_not_fast_regexp();
        -:  190:
        2:  191:        re_ast = yyget_extra(yyscanner);
        2:  192:        re_ast->flags |= RE_FLAGS_UNGREEDY;
        -:  193:
        2:  194:        $$ = yr_re_node_create(RE_NODE_STAR);
        -:  195:
       2*:  196:        destroy_node_if($$ == NULL, $1);
       2*:  197:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  198:
        2:  199:        yr_re_node_append_child($$, $1);
        -:  200:
        2:  201:        $$->greedy = false;
        -:  202:      }
        -:  203:    | single '+'
        -:  204:      {
        -:  205:        RE_AST* re_ast;
        -:  206:
       29:  207:        mark_as_not_fast_regexp();
        -:  208:
       29:  209:        re_ast = yyget_extra(yyscanner);
       29:  210:        re_ast->flags |= RE_FLAGS_GREEDY;
        -:  211:
       29:  212:        $$ = yr_re_node_create(RE_NODE_PLUS);
        -:  213:
      29*:  214:        destroy_node_if($$ == NULL, $1);
      29*:  215:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  216:
       29:  217:        yr_re_node_append_child($$, $1);
        -:  218:      }
        -:  219:    | single '+' '?'
        -:  220:      {
        -:  221:        RE_AST* re_ast;
        -:  222:
        1:  223:        mark_as_not_fast_regexp();
        -:  224:
        1:  225:        re_ast = yyget_extra(yyscanner);
        1:  226:        re_ast->flags |= RE_FLAGS_UNGREEDY;
        -:  227:
        1:  228:        $$ = yr_re_node_create(RE_NODE_PLUS);
        -:  229:
       1*:  230:        destroy_node_if($$ == NULL, $1);
       1*:  231:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  232:
        1:  233:        yr_re_node_append_child($$, $1);
        1:  234:        $$->greedy = false;
        -:  235:      }
        -:  236:    | single '?'
        -:  237:      {
       10:  238:        RE_AST* re_ast = yyget_extra(yyscanner);
       10:  239:        re_ast->flags |= RE_FLAGS_GREEDY;
        -:  240:
       10:  241:        if ($1->type == RE_NODE_ANY)
        -:  242:        {
    #####:  243:          $$ = yr_re_node_create(RE_NODE_RANGE_ANY);
    #####:  244:          destroy_node_if(true, $1);
    #####:  245:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  246:        }
        -:  247:        else
        -:  248:        {
       10:  249:          mark_as_not_fast_regexp();
       10:  250:          $$ = yr_re_node_create(RE_NODE_RANGE);
      10*:  251:          destroy_node_if($$ == NULL, $1);
      10*:  252:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
       10:  253:          yr_re_node_append_child($$, $1);
        -:  254:        }
        -:  255:
       10:  256:        $$->start = 0;
       10:  257:        $$->end = 1;
        -:  258:      }
        -:  259:    | single '?' '?'
        -:  260:      {
        1:  261:        RE_AST* re_ast = yyget_extra(yyscanner);
        1:  262:        re_ast->flags |= RE_FLAGS_UNGREEDY;
        -:  263:
        1:  264:        if ($1->type == RE_NODE_ANY)
        -:  265:        {
    #####:  266:          $$ = yr_re_node_create(RE_NODE_RANGE_ANY);
    #####:  267:          destroy_node_if(true, $1);
    #####:  268:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  269:        }
        -:  270:        else
        -:  271:        {
        1:  272:          mark_as_not_fast_regexp();
        1:  273:          $$ = yr_re_node_create(RE_NODE_RANGE);
       1*:  274:          destroy_node_if($$ == NULL, $1);
       1*:  275:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        1:  276:          yr_re_node_append_child($$, $1);
        -:  277:        }
        -:  278:
        1:  279:        $$->start = 0;
        1:  280:        $$->end = 1;
        1:  281:        $$->greedy = false;
        -:  282:      }
        -:  283:    | single _RANGE_
        -:  284:      {
       53:  285:        RE_AST* re_ast = yyget_extra(yyscanner);
       53:  286:        re_ast->flags |= RE_FLAGS_GREEDY;
        -:  287:
       53:  288:        if ($1->type == RE_NODE_ANY)
        -:  289:        {
        4:  290:          $$ = yr_re_node_create(RE_NODE_RANGE_ANY);
        4:  291:          destroy_node_if(true, $1);
       4*:  292:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  293:        }
        -:  294:        else
        -:  295:        {
       49:  296:          mark_as_not_fast_regexp();
       49:  297:          $$ = yr_re_node_create(RE_NODE_RANGE);
      49*:  298:          destroy_node_if($$ == NULL, $1);
      49*:  299:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
       49:  300:          yr_re_node_append_child($$, $1);
        -:  301:        }
        -:  302:
       53:  303:        $$->start = $2 & 0xFFFF;;
       53:  304:        $$->end = $2 >> 16;;
        -:  305:      }
        -:  306:    | single _RANGE_ '?'
        -:  307:      {
       21:  308:        RE_AST* re_ast = yyget_extra(yyscanner);
       21:  309:        re_ast->flags |= RE_FLAGS_UNGREEDY;
        -:  310:
       21:  311:        if ($1->type == RE_NODE_ANY)
        -:  312:        {
        2:  313:          $$ = yr_re_node_create(RE_NODE_RANGE_ANY);
        2:  314:          destroy_node_if(true, $1);
       2*:  315:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  316:        }
        -:  317:        else
        -:  318:        {
       19:  319:          mark_as_not_fast_regexp();
       19:  320:          $$ = yr_re_node_create(RE_NODE_RANGE);
      19*:  321:          destroy_node_if($$ == NULL, $1);
      19*:  322:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
       19:  323:          yr_re_node_append_child($$, $1);
        -:  324:        }
        -:  325:
       21:  326:        $$->start = $2 & 0xFFFF;;
       21:  327:        $$->end = $2 >> 16;;
       21:  328:        $$->greedy = false;
        -:  329:      }
        -:  330:    | single
        -:  331:      {
      843:  332:        $$ = $1;
        -:  333:      }
        -:  334:    | _WORD_BOUNDARY_
        -:  335:      {
       26:  336:        $$ = yr_re_node_create(RE_NODE_WORD_BOUNDARY);
        -:  337:
      26*:  338:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  339:      }
        -:  340:    | _NON_WORD_BOUNDARY_
        -:  341:      {
       10:  342:        $$ = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY);
        -:  343:
      10*:  344:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  345:      }
        -:  346:    | '^'
        -:  347:      {
       14:  348:        $$ = yr_re_node_create(RE_NODE_ANCHOR_START);
        -:  349:
      14*:  350:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  351:      }
        -:  352:    | '$'
        -:  353:      {
       20:  354:        $$ = yr_re_node_create(RE_NODE_ANCHOR_END);
        -:  355:
      20*:  356:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  357:      }
        -:  358:    ;
        -:  359:
        -:  360:single
        -:  361:    : '(' alternative ')'
        -:  362:      {
       50:  363:        $$ = $2;
        -:  364:      }
        -:  365:    | '.'
        -:  366:      {
       37:  367:        $$ = yr_re_node_create(RE_NODE_ANY);
        -:  368:
       37:  369:        $$->value = 0x00;
       37:  370:        $$->mask = 0x00;
        -:  371:
      37*:  372:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  373:      }
        -:  374:    | _CHAR_
        -:  375:      {
      801:  376:        $$ = yr_re_node_create(RE_NODE_LITERAL);
        -:  377:
     801*:  378:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  379:
      801:  380:        $$->value = $1;
      801:  381:        $$->mask = 0xFF;
        -:  382:      }
        -:  383:    | _WORD_CHAR_
        -:  384:      {
       26:  385:        $$ = yr_re_node_create(RE_NODE_WORD_CHAR);
        -:  386:
      26*:  387:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  388:      }
        -:  389:    | _NON_WORD_CHAR_
        -:  390:      {
    #####:  391:        $$ = yr_re_node_create(RE_NODE_NON_WORD_CHAR);
        -:  392:
    #####:  393:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  394:      }
        -:  395:    | _SPACE_
        -:  396:      {
       10:  397:        $$ = yr_re_node_create(RE_NODE_SPACE);
        -:  398:
      10*:  399:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  400:      }
        -:  401:    | _NON_SPACE_
        -:  402:      {
        6:  403:         $$ = yr_re_node_create(RE_NODE_NON_SPACE);
        -:  404:
       6*:  405:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  406:      }
        -:  407:    | _DIGIT_
        -:  408:      {
    #####:  409:        $$ = yr_re_node_create(RE_NODE_DIGIT);
        -:  410:
    #####:  411:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  412:      }
        -:  413:    | _NON_DIGIT_
        -:  414:      {
        1:  415:        $$ = yr_re_node_create(RE_NODE_NON_DIGIT);
        -:  416:
       1*:  417:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  418:      }
        -:  419:    | _CLASS_
        -:  420:      {
       64:  421:        $$ = yr_re_node_create(RE_NODE_CLASS);
        -:  422:
      64*:  423:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  424:
       64:  425:        $$->re_class = $1;
        -:  426:      }
        -:  427:    ;
        -:  428:%%
