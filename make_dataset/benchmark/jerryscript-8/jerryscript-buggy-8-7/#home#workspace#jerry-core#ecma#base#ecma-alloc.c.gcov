        -:    0:Source:/home/workspace/jerry-core/ecma/base/ecma-alloc.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:
        -:   18:#include "ecma-gc.h"
        -:   19:#include "ecma-globals.h"
        -:   20:
        -:   21:#include "jmem.h"
        -:   22:#include "jrt.h"
        -:   23:
        -:   24:JERRY_STATIC_ASSERT (sizeof (ecma_property_value_t) == sizeof (ecma_value_t),
        -:   25:                     size_of_ecma_property_value_t_must_be_equal_to_size_of_ecma_value_t);
        -:   26:JERRY_STATIC_ASSERT (((sizeof (ecma_property_value_t) - 1) & sizeof (ecma_property_value_t)) == 0,
        -:   27:                     size_of_ecma_property_value_t_must_be_power_of_2);
        -:   28:
        -:   29:JERRY_STATIC_ASSERT (sizeof (ecma_extended_object_t) - sizeof (ecma_object_t) <= sizeof (uint64_t),
        -:   30:                     size_of_ecma_extended_object_part_must_be_less_than_or_equal_to_8_bytes);
        -:   31:
        -:   32:/** \addtogroup ecma ECMA
        -:   33: * @{
        -:   34: *
        -:   35: * \addtogroup ecmaalloc Routines for allocation/freeing memory for ECMA data types
        -:   36: * @{
        -:   37: */
        -:   38:
        -:   39:/**
        -:   40: * Implementation of routines for allocation/freeing memory for ECMA data types.
        -:   41: *
        -:   42: * All allocation routines from this module have the same structure:
        -:   43: *  1. Try to allocate memory.
        -:   44: *  2. If allocation was successful, return pointer to the allocated block.
        -:   45: *  3. Run garbage collection.
        -:   46: *  4. Try to allocate memory.
        -:   47: *  5. If allocation was successful, return pointer to the allocated block;
        -:   48: *     else - shutdown engine.
        -:   49: */
        -:   50:
        -:   51:/**
        -:   52: * Allocate memory for ecma-number
        -:   53: *
        -:   54: * @return pointer to allocated memory
        -:   55: */
        -:   56:extern inline ecma_number_t *JERRY_ATTR_ALWAYS_INLINE
    #####:   57:ecma_alloc_number (void)
        -:   58:{
    #####:   59:  return (ecma_number_t *) jmem_pools_alloc (sizeof (ecma_number_t));
        -:   60:} /* ecma_alloc_number */
        -:   61:
        -:   62:/**
        -:   63: * Dealloc memory from an ecma-number
        -:   64: */
        -:   65:extern inline void JERRY_ATTR_ALWAYS_INLINE
    #####:   66:ecma_dealloc_number (ecma_number_t *number_p) /**< number to be freed */
        -:   67:{
    #####:   68:  jmem_pools_free ((uint8_t *) number_p, sizeof (ecma_number_t));
    #####:   69:} /* ecma_dealloc_number */
        -:   70:
        -:   71:/**
        -:   72: * Allocate memory for ecma-object
        -:   73: *
        -:   74: * @return pointer to allocated memory
        -:   75: */
        -:   76:extern inline ecma_object_t *JERRY_ATTR_ALWAYS_INLINE
        6:   77:ecma_alloc_object (void)
        -:   78:{
        -:   79:#if JERRY_MEM_STATS
    #####:   80:  jmem_stats_allocate_object_bytes (sizeof (ecma_object_t));
        -:   81:#endif /* JERRY_MEM_STATS */
        -:   82:
        6:   83:  return (ecma_object_t *) jmem_pools_alloc (sizeof (ecma_object_t));
        -:   84:} /* ecma_alloc_object */
        -:   85:
        -:   86:/**
        -:   87: * Dealloc memory from an ecma-object
        -:   88: */
        -:   89:extern inline void JERRY_ATTR_ALWAYS_INLINE
    #####:   90:ecma_dealloc_object (ecma_object_t *object_p) /**< object to be freed */
        -:   91:{
        -:   92:#if JERRY_MEM_STATS
    #####:   93:  jmem_stats_free_object_bytes (sizeof (ecma_object_t));
        -:   94:#endif /* JERRY_MEM_STATS */
        -:   95:
    #####:   96:  jmem_pools_free (object_p, sizeof (ecma_object_t));
    #####:   97:} /* ecma_dealloc_object */
        -:   98:
        -:   99:/**
        -:  100: * Allocate memory for extended object
        -:  101: *
        -:  102: * @return pointer to allocated memory
        -:  103: */
        -:  104:extern inline ecma_extended_object_t *JERRY_ATTR_ALWAYS_INLINE
       15:  105:ecma_alloc_extended_object (size_t size) /**< size of object */
        -:  106:{
        -:  107:#if JERRY_MEM_STATS
    #####:  108:  jmem_stats_allocate_object_bytes (size);
        -:  109:#endif /* JERRY_MEM_STATS */
        -:  110:
       15:  111:  return jmem_heap_alloc_block (size);
        -:  112:} /* ecma_alloc_extended_object */
        -:  113:
        -:  114:/**
        -:  115: * Dealloc memory of an extended object
        -:  116: */
        -:  117:extern inline void JERRY_ATTR_ALWAYS_INLINE
    #####:  118:ecma_dealloc_extended_object (ecma_object_t *object_p, /**< extended object */
        -:  119:                              size_t size) /**< size of object */
        -:  120:{
        -:  121:#if JERRY_MEM_STATS
    #####:  122:  jmem_stats_free_object_bytes (size);
        -:  123:#endif /* JERRY_MEM_STATS */
        -:  124:
    #####:  125:  jmem_heap_free_block (object_p, size);
    #####:  126:} /* ecma_dealloc_extended_object */
        -:  127:
        -:  128:/**
        -:  129: * Allocate memory for ecma-string descriptor
        -:  130: *
        -:  131: * @return pointer to allocated memory
        -:  132: */
        -:  133:extern inline ecma_string_t *JERRY_ATTR_ALWAYS_INLINE
    #####:  134:ecma_alloc_string (void)
        -:  135:{
        -:  136:#if JERRY_MEM_STATS
    #####:  137:  jmem_stats_allocate_string_bytes (sizeof (ecma_string_t));
        -:  138:#endif /* JERRY_MEM_STATS */
        -:  139:
    #####:  140:  return (ecma_string_t *) jmem_pools_alloc (sizeof (ecma_string_t));
        -:  141:} /* ecma_alloc_string */
        -:  142:
        -:  143:/**
        -:  144: * Dealloc memory from ecma-string descriptor
        -:  145: */
        -:  146:extern inline void JERRY_ATTR_ALWAYS_INLINE
    #####:  147:ecma_dealloc_string (ecma_string_t *string_p) /**< string to be freed */
        -:  148:{
        -:  149:#if JERRY_MEM_STATS
    #####:  150:  jmem_stats_free_string_bytes (sizeof (ecma_string_t));
        -:  151:#endif /* JERRY_MEM_STATS */
        -:  152:
    #####:  153:  jmem_pools_free (string_p, sizeof (ecma_string_t));
    #####:  154:} /* ecma_dealloc_string */
        -:  155:
        -:  156:/**
        -:  157: * Allocate memory for extended ecma-string descriptor
        -:  158: *
        -:  159: * @return pointer to allocated memory
        -:  160: */
        -:  161:extern inline ecma_extended_string_t *JERRY_ATTR_ALWAYS_INLINE
        1:  162:ecma_alloc_extended_string (void)
        -:  163:{
        -:  164:#if JERRY_MEM_STATS
    #####:  165:  jmem_stats_allocate_string_bytes (sizeof (ecma_extended_string_t));
        -:  166:#endif /* JERRY_MEM_STATS */
        -:  167:
        1:  168:  return (ecma_extended_string_t *) jmem_heap_alloc_block (sizeof (ecma_extended_string_t));
        -:  169:} /* ecma_alloc_extended_string */
        -:  170:
        -:  171:/**
        -:  172: * Dealloc memory from extended ecma-string descriptor
        -:  173: */
        -:  174:extern inline void JERRY_ATTR_ALWAYS_INLINE
    #####:  175:ecma_dealloc_extended_string (ecma_extended_string_t *ext_string_p) /**< extended string to be freed */
        -:  176:{
        -:  177:#if JERRY_MEM_STATS
    #####:  178:  jmem_stats_free_string_bytes (sizeof (ecma_extended_string_t));
        -:  179:#endif /* JERRY_MEM_STATS */
        -:  180:
    #####:  181:  jmem_heap_free_block (ext_string_p, sizeof (ecma_extended_string_t));
    #####:  182:} /* ecma_dealloc_extended_string */
        -:  183:
        -:  184:/**
        -:  185: * Allocate memory for external ecma-string descriptor
        -:  186: *
        -:  187: * @return pointer to allocated memory
        -:  188: */
        -:  189:extern inline ecma_external_string_t *JERRY_ATTR_ALWAYS_INLINE
    #####:  190:ecma_alloc_external_string (void)
        -:  191:{
        -:  192:#if JERRY_MEM_STATS
    #####:  193:  jmem_stats_allocate_string_bytes (sizeof (ecma_external_string_t));
        -:  194:#endif /* JERRY_MEM_STATS */
        -:  195:
    #####:  196:  return (ecma_external_string_t *) jmem_heap_alloc_block (sizeof (ecma_external_string_t));
        -:  197:} /* ecma_alloc_external_string */
        -:  198:
        -:  199:/**
        -:  200: * Dealloc memory from external ecma-string descriptor
        -:  201: */
        -:  202:extern inline void JERRY_ATTR_ALWAYS_INLINE
    #####:  203:ecma_dealloc_external_string (ecma_external_string_t *ext_string_p) /**< external string to be freed */
        -:  204:{
        -:  205:#if JERRY_MEM_STATS
    #####:  206:  jmem_stats_free_string_bytes (sizeof (ecma_external_string_t));
        -:  207:#endif /* JERRY_MEM_STATS */
        -:  208:
    #####:  209:  jmem_heap_free_block (ext_string_p, sizeof (ecma_external_string_t));
    #####:  210:} /* ecma_dealloc_external_string */
        -:  211:
        -:  212:/**
        -:  213: * Allocate memory for an string with character data
        -:  214: *
        -:  215: * @return pointer to allocated memory
        -:  216: */
        -:  217:extern inline ecma_string_t *JERRY_ATTR_ALWAYS_INLINE
       28:  218:ecma_alloc_string_buffer (size_t size) /**< size of string */
        -:  219:{
        -:  220:#if JERRY_MEM_STATS
    #####:  221:  jmem_stats_allocate_string_bytes (size);
        -:  222:#endif /* JERRY_MEM_STATS */
        -:  223:
       28:  224:  return jmem_heap_alloc_block (size);
        -:  225:} /* ecma_alloc_string_buffer */
        -:  226:
        -:  227:/**
        -:  228: * Dealloc memory of a string with character data
        -:  229: */
        -:  230:extern inline void JERRY_ATTR_ALWAYS_INLINE
        8:  231:ecma_dealloc_string_buffer (ecma_string_t *string_p, /**< string with data */
        -:  232:                            size_t size) /**< size of string */
        -:  233:{
        -:  234:#if JERRY_MEM_STATS
    #####:  235:  jmem_stats_free_string_bytes (size);
        -:  236:#endif /* JERRY_MEM_STATS */
        -:  237:
        8:  238:  jmem_heap_free_block (string_p, size);
        8:  239:} /* ecma_dealloc_string_buffer */
        -:  240:
        -:  241:/**
        -:  242: * Allocate memory for ecma-property pair
        -:  243: *
        -:  244: * @return pointer to allocated memory
        -:  245: */
        -:  246:extern inline ecma_property_pair_t *JERRY_ATTR_ALWAYS_INLINE
       11:  247:ecma_alloc_property_pair (void)
        -:  248:{
        -:  249:#if JERRY_MEM_STATS
    #####:  250:  jmem_stats_allocate_property_bytes (sizeof (ecma_property_pair_t));
        -:  251:#endif /* JERRY_MEM_STATS */
        -:  252:
       11:  253:  return jmem_heap_alloc_block (sizeof (ecma_property_pair_t));
        -:  254:} /* ecma_alloc_property_pair */
        -:  255:
        -:  256:/**
        -:  257: * Dealloc memory of an ecma-property
        -:  258: */
        -:  259:extern inline void JERRY_ATTR_ALWAYS_INLINE
    #####:  260:ecma_dealloc_property_pair (ecma_property_pair_t *property_pair_p) /**< property pair to be freed */
        -:  261:{
        -:  262:#if JERRY_MEM_STATS
    #####:  263:  jmem_stats_free_property_bytes (sizeof (ecma_property_pair_t));
        -:  264:#endif /* JERRY_MEM_STATS */
        -:  265:
    #####:  266:  jmem_heap_free_block (property_pair_p, sizeof (ecma_property_pair_t));
    #####:  267:} /* ecma_dealloc_property_pair */
        -:  268:
        -:  269:/**
        -:  270: * @}
        -:  271: * @}
        -:  272: */
