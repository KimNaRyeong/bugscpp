        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-aggregateerror.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-array-object.h"
        -:   18:#include "ecma-builtin-helpers.h"
        -:   19:#include "ecma-builtins.h"
        -:   20:#include "ecma-conversion.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-function-object.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-globals.h"
        -:   25:#include "ecma-helpers.h"
        -:   26:#include "ecma-iterator-object.h"
        -:   27:#include "ecma-objects.h"
        -:   28:
        -:   29:#include "jcontext.h"
        -:   30:#include "jrt.h"
        -:   31:
        -:   32:#if JERRY_ESNEXT
        -:   33:
        -:   34:#define ECMA_BUILTINS_INTERNAL
        -:   35:#include "ecma-builtins-internal.h"
        -:   36:
        -:   37:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-aggregateerror.inc.h"
        -:   38:#define BUILTIN_UNDERSCORED_ID  aggregate_error
        -:   39:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   40:
        -:   41:/** \addtogroup ecma ECMA
        -:   42: * @{
        -:   43: *
        -:   44: * \addtogroup ecmabuiltins
        -:   45: * @{
        -:   46: *
        -:   47: * \addtogroup aggregateerror ECMA AggregateError object built-in
        -:   48: * @{
        -:   49: */
        -:   50:
        -:   51:/**
        -:   52: * Handle calling [[Call]] of built-in AggregateError object
        -:   53: *
        -:   54: * @return ecma value
        -:   55: */
        -:   56:ecma_value_t
    #####:   57:ecma_builtin_aggregate_error_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   58:                                            uint32_t arguments_list_len) /**< number of arguments */
        -:   59:{
    #####:   60:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
    #####:   61:  ecma_value_t message_val = ECMA_VALUE_UNDEFINED;
    #####:   62:  ecma_value_t error_val = ECMA_VALUE_UNDEFINED;
        -:   63:
    #####:   64:  if (arguments_list_len > 0)
        -:   65:  {
    #####:   66:    error_val = arguments_list_p[0];
        -:   67:
    #####:   68:    if (arguments_list_len > 1)
        -:   69:    {
    #####:   70:      message_val = arguments_list_p[1];
        -:   71:    }
        -:   72:  }
        -:   73:
    #####:   74:  return ecma_new_aggregate_error (error_val, message_val);
        -:   75:} /* ecma_builtin_aggregate_error_dispatch_call */
        -:   76:
        -:   77:/**
        -:   78: * Handle calling [[Construct]] of built-in AggregateError object
        -:   79: *
        -:   80: * @return ecma value
        -:   81: */
        -:   82:ecma_value_t
    #####:   83:ecma_builtin_aggregate_error_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   84:                                                 uint32_t arguments_list_len) /**< number of arguments */
        -:   85:{
    #####:   86:  ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (JERRY_CONTEXT (current_new_target_p),
        -:   87:                                                                   ECMA_BUILTIN_ID_AGGREGATE_ERROR_PROTOTYPE);
        -:   88:
    #####:   89:  if (proto_p == NULL)
        -:   90:  {
    #####:   91:    return ECMA_VALUE_ERROR;
        -:   92:  }
        -:   93:
    #####:   94:  ecma_value_t result = ecma_builtin_aggregate_error_dispatch_call (arguments_list_p, arguments_list_len);
        -:   95:
    #####:   96:  if (!ECMA_IS_VALUE_ERROR (result))
        -:   97:  {
    #####:   98:    ecma_object_t *object_p = ecma_get_object_from_value (result);
    #####:   99:    ECMA_SET_NON_NULL_POINTER (object_p->u2.prototype_cp, proto_p);
        -:  100:  }
        -:  101:
    #####:  102:  ecma_deref_object (proto_p);
        -:  103:
    #####:  104:  return result;
        -:  105:} /* ecma_builtin_aggregate_error_dispatch_construct */
        -:  106:
        -:  107:/**
        -:  108: * @}
        -:  109: * @}
        -:  110: * @}
        -:  111: */
        -:  112:
        -:  113:#endif /* JERRY_ESNEXT */
