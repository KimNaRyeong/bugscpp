        -:    0:Source:/home/workspace/jerry-core/vm/opcodes-ecma-relational-equality.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-comparison.h"
        -:   17:#include "ecma-conversion.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-function-object.h"
        -:   20:#include "ecma-helpers.h"
        -:   21:#include "ecma-objects.h"
        -:   22:
        -:   23:#include "opcodes.h"
        -:   24:
        -:   25:/** \addtogroup vm Virtual machine
        -:   26: * @{
        -:   27: *
        -:   28: * \addtogroup vm_opcodes Opcodes
        -:   29: * @{
        -:   30: */
        -:   31:
        -:   32:/**
        -:   33: * Equality opcode handler.
        -:   34: *
        -:   35: * See also: ECMA-262 v5, 11.9.1, 11.9.2
        -:   36: *
        -:   37: * @return ecma value
        -:   38: *         Returned value must be freed with ecma_free_value
        -:   39: */
        -:   40:ecma_value_t
    #####:   41:opfunc_equality (ecma_value_t left_value, /**< left value */
        -:   42:                 ecma_value_t right_value) /**< right value */
        -:   43:{
    #####:   44:  JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (left_value) && !ECMA_IS_VALUE_ERROR (right_value));
        -:   45:
    #####:   46:  ecma_value_t compare_result = ecma_op_abstract_equality_compare (left_value, right_value);
        -:   47:
    #####:   48:  JERRY_ASSERT (ecma_is_value_boolean (compare_result) || ECMA_IS_VALUE_ERROR (compare_result));
        -:   49:
    #####:   50:  return compare_result;
        -:   51:} /* opfunc_equality */
        -:   52:
        -:   53:/**
        -:   54: * Relation opcode handler.
        -:   55: *
        -:   56: * See also: ECMA-262 v5, 11.8.1, 11.8.2, 11.8.3, 11.8.4
        -:   57: *
        -:   58: * @return ecma value
        -:   59: *         Returned value must be freed with ecma_free_value
        -:   60: */
        -:   61:ecma_value_t
    #####:   62:opfunc_relation (ecma_value_t left_value, /**< left value */
        -:   63:                 ecma_value_t right_value, /**< right value */
        -:   64:                 bool left_first, /**< 'LeftFirst' flag */
        -:   65:                 bool is_invert) /**< is invert */
        -:   66:{
    #####:   67:  JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (left_value) && !ECMA_IS_VALUE_ERROR (right_value));
        -:   68:
    #####:   69:  ecma_value_t ret_value = ecma_op_abstract_relational_compare (left_value, right_value, left_first);
        -:   70:
    #####:   71:  if (ECMA_IS_VALUE_ERROR (ret_value))
        -:   72:  {
    #####:   73:    return ret_value;
        -:   74:  }
        -:   75:
    #####:   76:  if (ecma_is_value_undefined (ret_value))
        -:   77:  {
    #####:   78:    ret_value = ECMA_VALUE_FALSE;
        -:   79:  }
        -:   80:  else
        -:   81:  {
    #####:   82:    JERRY_ASSERT (ecma_is_value_boolean (ret_value));
        -:   83:
    #####:   84:    if (is_invert)
        -:   85:    {
    #####:   86:      ret_value = ecma_invert_boolean_value (ret_value);
        -:   87:    }
        -:   88:  }
        -:   89:
    #####:   90:  return ret_value;
        -:   91:} /* opfunc_relation */
        -:   92:
        -:   93:/**
        -:   94: * 'instanceof' opcode handler.
        -:   95: *
        -:   96: * See also: ECMA-262 v5, 11.8.6
        -:   97: *
        -:   98: * @return ecma value
        -:   99: *         returned value must be freed with ecma_free_value.
        -:  100: */
        -:  101:ecma_value_t
    #####:  102:opfunc_instanceof (ecma_value_t left_value, /**< left value */
        -:  103:                   ecma_value_t right_value) /**< right value */
        -:  104:{
    #####:  105:  if (!ecma_is_value_object (right_value))
        -:  106:  {
    #####:  107:    return ecma_raise_type_error (ECMA_ERR_RIGHT_VALUE_OF_INSTANCEOF_MUST_BE_AN_OBJECT);
        -:  108:  }
        -:  109:
        -:  110:#if JERRY_ESNEXT
    #####:  111:  ecma_value_t has_instance_method = ecma_op_get_method_by_symbol_id (right_value, LIT_GLOBAL_SYMBOL_HAS_INSTANCE);
    #####:  112:  if (ECMA_IS_VALUE_ERROR (has_instance_method))
        -:  113:  {
    #####:  114:    return has_instance_method;
        -:  115:  }
        -:  116:
    #####:  117:  if (JERRY_UNLIKELY (!ecma_is_value_undefined (has_instance_method)))
        -:  118:  {
    #####:  119:    ecma_object_t *method_obj_p = ecma_get_object_from_value (has_instance_method);
    #####:  120:    ecma_value_t has_instance_result = ecma_op_function_call (method_obj_p, right_value, &left_value, 1);
        -:  121:
    #####:  122:    ecma_free_value (has_instance_method);
        -:  123:
    #####:  124:    if (ECMA_IS_VALUE_ERROR (has_instance_result))
        -:  125:    {
    #####:  126:      return has_instance_result;
        -:  127:    }
        -:  128:
    #####:  129:    bool has_instance = ecma_op_to_boolean (has_instance_result);
    #####:  130:    ecma_free_value (has_instance_result);
        -:  131:
    #####:  132:    return ecma_make_boolean_value (has_instance);
        -:  133:  }
        -:  134:#endif /* JERRY_ESNEXT */
        -:  135:
    #####:  136:  ecma_object_t *right_value_obj_p = ecma_get_object_from_value (right_value);
    #####:  137:  return ecma_op_object_has_instance (right_value_obj_p, left_value);
        -:  138:} /* opfunc_instanceof */
        -:  139:
        -:  140:/**
        -:  141: * 'in' opcode handler.
        -:  142: *
        -:  143: * See also:
        -:  144: *  * ECMA-262 v5, 11.8.7
        -:  145: *  * ECAM-262 v6, 12.9.3
        -:  146: *
        -:  147: * @return ecma value
        -:  148: *         returned value must be freed with ecma_free_value.
        -:  149: */
        -:  150:ecma_value_t
    #####:  151:opfunc_in (ecma_value_t left_value, /**< left value */
        -:  152:           ecma_value_t right_value) /**< right value */
        -:  153:{
    #####:  154:  if (!ecma_is_value_object (right_value))
        -:  155:  {
    #####:  156:    return ecma_raise_type_error (ECMA_ERR_RIGHT_VALUE_OF_IN_MUST_BE_AN_OBJECT);
        -:  157:  }
        -:  158:
    #####:  159:  ecma_string_t *property_name_p = ecma_op_to_property_key (left_value);
        -:  160:
    #####:  161:  if (JERRY_UNLIKELY (property_name_p == NULL))
        -:  162:  {
    #####:  163:    return ECMA_VALUE_ERROR;
        -:  164:  }
        -:  165:
    #####:  166:  ecma_object_t *right_value_obj_p = ecma_get_object_from_value (right_value);
    #####:  167:  ecma_value_t result = ecma_op_object_has_property (right_value_obj_p, property_name_p);
    #####:  168:  ecma_deref_ecma_string (property_name_p);
    #####:  169:  return result;
        -:  170:} /* opfunc_in */
        -:  171:
        -:  172:/**
        -:  173: * @}
        -:  174: * @}
        -:  175: */
