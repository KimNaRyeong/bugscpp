        -:    0:Source:/home/workspace/tests/unit-core/test-api-errortype.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:int
    #####:   21:main (void)
        -:   22:{
    #####:   23:  TEST_INIT ();
        -:   24:
    #####:   25:  jerry_init (JERRY_INIT_EMPTY);
        -:   26:
    #####:   27:  jerry_error_t errors[] = { JERRY_ERROR_COMMON, JERRY_ERROR_EVAL, JERRY_ERROR_RANGE, JERRY_ERROR_REFERENCE,
        -:   28:                             JERRY_ERROR_SYNTAX, JERRY_ERROR_TYPE, JERRY_ERROR_URI };
        -:   29:
    #####:   30:  for (size_t idx = 0; idx < sizeof (errors) / sizeof (errors[0]); idx++)
        -:   31:  {
    #####:   32:    jerry_value_t error_obj = jerry_throw_sz (errors[idx], "test");
    #####:   33:    TEST_ASSERT (jerry_value_is_exception (error_obj));
    #####:   34:    TEST_ASSERT (jerry_error_type (error_obj) == errors[idx]);
        -:   35:
    #####:   36:    error_obj = jerry_exception_value (error_obj, true);
        -:   37:
    #####:   38:    TEST_ASSERT (jerry_error_type (error_obj) == errors[idx]);
        -:   39:
    #####:   40:    jerry_value_free (error_obj);
        -:   41:  }
        -:   42:
    #####:   43:  jerry_value_t test_values[] = {
    #####:   44:    jerry_number (11),
    #####:   45:    jerry_string_sz ("message"),
    #####:   46:    jerry_boolean (true),
    #####:   47:    jerry_object (),
        -:   48:  };
        -:   49:
    #####:   50:  for (size_t idx = 0; idx < sizeof (test_values) / sizeof (test_values[0]); idx++)
        -:   51:  {
    #####:   52:    jerry_error_t error_type = jerry_error_type (test_values[idx]);
    #####:   53:    TEST_ASSERT (error_type == JERRY_ERROR_NONE);
    #####:   54:    jerry_value_free (test_values[idx]);
        -:   55:  }
        -:   56:
    #####:   57:  char test_source[] = "\xF0\x9D\x84\x9E";
        -:   58:
    #####:   59:  jerry_value_t result = jerry_parse ((const jerry_char_t *) test_source, sizeof (test_source) - 1, NULL);
    #####:   60:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:   61:  TEST_ASSERT (jerry_error_type (result) == JERRY_ERROR_SYNTAX);
        -:   62:
    #####:   63:  jerry_value_free (result);
        -:   64:
    #####:   65:  char test_invalid_error[] = "Object.create(Error.prototype)";
    #####:   66:  result = jerry_eval ((const jerry_char_t *) test_invalid_error, sizeof (test_invalid_error) - 1, JERRY_PARSE_NO_OPTS);
    #####:   67:  TEST_ASSERT (!jerry_value_is_exception (result) && jerry_value_is_object (result));
    #####:   68:  TEST_ASSERT (jerry_error_type (result) == JERRY_ERROR_NONE);
        -:   69:
    #####:   70:  jerry_value_free (result);
        -:   71:
    #####:   72:  jerry_cleanup ();
        -:   73:} /* main */
