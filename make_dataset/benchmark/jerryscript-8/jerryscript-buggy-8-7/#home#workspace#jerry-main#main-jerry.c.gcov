        -:    0:Source:/home/workspace/jerry-main/main-jerry.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <assert.h>
        -:   17:#include <stdio.h>
        -:   18:#include <stdlib.h>
        -:   19:#include <string.h>
        -:   20:
        -:   21:#include "jerryscript-port-default.h"
        -:   22:#include "jerryscript-port.h"
        -:   23:#include "jerryscript.h"
        -:   24:
        -:   25:#include "jerryscript-ext/debugger.h"
        -:   26:#include "jerryscript-ext/handler.h"
        -:   27:#include "main-options.h"
        -:   28:#include "main-utils.h"
        -:   29:
        -:   30:/**
        -:   31: * Temporal buffer size.
        -:   32: */
        -:   33:#define JERRY_BUFFER_SIZE 256u
        -:   34:
        -:   35:#if defined(JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1)
        -:   36:/**
        -:   37: * The alloc function passed to jerry_context_create
        -:   38: */
        -:   39:static void *
        -:   40:context_alloc (size_t size, void *cb_data_p)
        -:   41:{
        -:   42:  (void) cb_data_p; /* unused */
        -:   43:  return malloc (size);
        -:   44:} /* context_alloc */
        -:   45:#endif /* defined (JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1) */
        -:   46:
        -:   47:#ifdef DPP_ENABLE_GCOV
        -:   48:#include <signal.h>
        -:   49:#include <gcov.h>
        -:   50:void dpp_sighandler(int signum);
        -:   51:static struct sigaction dpp_gcov_sigaction;
        -:   52:static struct sigaction dpp_orig_sigaction;
        1:   53:void dpp_sighandler(int signum) {
        1:   54:  __gcov_flush();
    #####:   55:  sigaction(signum, &dpp_orig_sigaction, NULL);
    #####:   56:  raise(signum);
    #####:   57:}
        -:   58:void __asan_on_error(void);
    #####:   59:void __asan_on_error(void){
    #####:   60:  __gcov_flush();
    #####:   61:}
        -:   62:#endif
        -:   63:
        -:   64:int
        1:   65:main (int argc, char **argv)
        1:   66:{
        -:   67:  #ifdef DPP_ENABLE_GCOV
        -:   68:  {
        1:   69:   dpp_gcov_sigaction.sa_handler = dpp_sighandler;
        1:   70:   sigemptyset(&dpp_gcov_sigaction.sa_mask);
        1:   71:   dpp_gcov_sigaction.sa_flags = 0;
        1:   72:   sigaction(SIGABRT, &dpp_gcov_sigaction, &dpp_orig_sigaction);
        -:   73:  }
        -:   74:#endif
        -:   75:  union
        -:   76:  {
        -:   77:    double d;
        -:   78:    unsigned u;
        1:   79:  } now = { .d = jerry_port_get_current_time () };
        1:   80:  srand (now.u);
        -:   81:
        1:   82:  JERRY_VLA (main_source_t, sources_p, argc);
        -:   83:
        1:   84:  main_args_t arguments;
        1:   85:  arguments.sources_p = sources_p;
        -:   86:
        1:   87:  main_parse_args (argc, argv, &arguments);
        -:   88:
        -:   89:#if defined(JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1)
        -:   90:  jerry_context_t *context_p = jerry_context_alloc (JERRY_GLOBAL_HEAP_SIZE * 1024, context_alloc, NULL);
        -:   91:  jerry_port_default_set_current_context (context_p);
        -:   92:#endif /* defined (JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1) */
        -:   93:
        1:   94:restart:
        1:   95:  main_init_engine (&arguments);
        1:   96:  int return_code = JERRY_STANDALONE_EXIT_CODE_FAIL;
        1:   97:  jerry_value_t ret_value;
        -:   98:
        1:   99:  for (uint32_t source_index = 0; source_index < arguments.source_count; source_index++)
        -:  100:  {
        1:  101:    main_source_t *source_file_p = sources_p + source_index;
        1:  102:    const char *file_path_p = argv[source_file_p->path_index];
        -:  103:
        1:  104:    if (source_file_p->type == SOURCE_MODULE)
        -:  105:    {
    #####:  106:      jerry_value_t specifier =
    #####:  107:        jerry_string ((const jerry_char_t *) file_path_p, (jerry_size_t) strlen (file_path_p), JERRY_ENCODING_UTF8);
    #####:  108:      jerry_value_t referrer = jerry_undefined ();
    #####:  109:      ret_value = jerry_port_module_resolve (specifier, referrer, NULL);
    #####:  110:      jerry_value_free (referrer);
    #####:  111:      jerry_value_free (specifier);
        -:  112:
    #####:  113:      if (!jerry_value_is_exception (ret_value))
        -:  114:      {
    #####:  115:        if (jerry_module_state (ret_value) != JERRY_MODULE_STATE_UNLINKED)
        -:  116:        {
        -:  117:          /* A module can be evaluated only once. */
    #####:  118:          jerry_value_free (ret_value);
    #####:  119:          continue;
        -:  120:        }
        -:  121:
    #####:  122:        jerry_value_t link_val = jerry_module_link (ret_value, NULL, NULL);
        -:  123:
    #####:  124:        if (jerry_value_is_exception (link_val))
        -:  125:        {
    #####:  126:          jerry_value_free (ret_value);
    #####:  127:          ret_value = link_val;
        -:  128:        }
        -:  129:        else
        -:  130:        {
    #####:  131:          jerry_value_free (link_val);
        -:  132:
    #####:  133:          jerry_value_t module_val = ret_value;
    #####:  134:          ret_value = jerry_module_evaluate (module_val);
    #####:  135:          jerry_value_free (module_val);
        -:  136:        }
        -:  137:      }
        -:  138:
    #####:  139:      if (jerry_value_is_exception (ret_value))
        -:  140:      {
    #####:  141:        main_print_unhandled_exception (ret_value);
    #####:  142:        goto exit;
        -:  143:      }
        -:  144:
    #####:  145:      jerry_value_free (ret_value);
    #####:  146:      continue;
        -:  147:    }
        -:  148:
        1:  149:    size_t source_size;
        1:  150:    uint8_t *source_p = jerry_port_read_source (file_path_p, &source_size);
        -:  151:
        1:  152:    if (source_p == NULL)
        -:  153:    {
    #####:  154:      goto exit;
        -:  155:    }
        -:  156:
        1:  157:    switch (source_file_p->type)
        -:  158:    {
    #####:  159:      case SOURCE_SNAPSHOT:
        -:  160:      {
    #####:  161:        ret_value = jerry_exec_snapshot ((uint32_t *) source_p,
        -:  162:                                         source_size,
    #####:  163:                                         source_file_p->snapshot_index,
        -:  164:                                         JERRY_SNAPSHOT_EXEC_COPY_DATA,
        -:  165:                                         NULL);
        -:  166:
    #####:  167:        jerry_port_release_source (source_p);
    #####:  168:        break;
        -:  169:      }
        1:  170:      default:
        -:  171:      {
        1:  172:        assert (source_file_p->type == SOURCE_SCRIPT || source_file_p->type == SOURCE_MODULE);
        -:  173:
        1:  174:        if (!jerry_validate_string ((jerry_char_t *) source_p, (jerry_size_t) source_size, JERRY_ENCODING_UTF8))
        -:  175:        {
    #####:  176:          jerry_port_release_source (source_p);
    #####:  177:          jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Error: Input must be a valid UTF-8 string.");
    #####:  178:          goto exit;
        -:  179:        }
        -:  180:
        1:  181:        jerry_parse_options_t parse_options;
        1:  182:        parse_options.options = JERRY_PARSE_HAS_SOURCE_NAME;
        1:  183:        parse_options.source_name =
        1:  184:          jerry_string ((const jerry_char_t *) file_path_p, (jerry_size_t) strlen (file_path_p), JERRY_ENCODING_UTF8);
        -:  185:
        1:  186:        ret_value = jerry_parse (source_p, source_size, &parse_options);
        -:  187:
        1:  188:        jerry_value_free (parse_options.source_name);
        1:  189:        jerry_port_release_source (source_p);
        -:  190:
        1:  191:        if (!jerry_value_is_exception (ret_value) && !(arguments.option_flags & OPT_FLAG_PARSE_ONLY))
        -:  192:        {
        1:  193:          jerry_value_t func_val = ret_value;
        1:  194:          ret_value = jerry_run (func_val);
    #####:  195:          jerry_value_free (func_val);
        -:  196:        }
        -:  197:
    #####:  198:        break;
        -:  199:      }
        -:  200:    }
        -:  201:
    #####:  202:    if (jerry_value_is_exception (ret_value))
        -:  203:    {
    #####:  204:      if (main_is_value_reset (ret_value))
        -:  205:      {
    #####:  206:        jerry_cleanup ();
        -:  207:
    #####:  208:        goto restart;
        -:  209:      }
        -:  210:
    #####:  211:      main_print_unhandled_exception (ret_value);
    #####:  212:      goto exit;
        -:  213:    }
        -:  214:
    #####:  215:    jerry_value_free (ret_value);
        -:  216:  }
        -:  217:
    #####:  218:  if (arguments.option_flags & OPT_FLAG_WAIT_SOURCE)
        -:  219:  {
        -:  220:    while (true)
    #####:  221:    {
        -:  222:      jerry_debugger_wait_for_source_status_t receive_status;
    #####:  223:      receive_status = jerry_debugger_wait_for_client_source (main_wait_for_source_callback, NULL, &ret_value);
        -:  224:
    #####:  225:      if (receive_status == JERRY_DEBUGGER_SOURCE_RECEIVE_FAILED)
        -:  226:      {
    #####:  227:        jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Connection aborted before source arrived.");
    #####:  228:        goto exit;
        -:  229:      }
        -:  230:
    #####:  231:      if (receive_status == JERRY_DEBUGGER_SOURCE_END)
        -:  232:      {
    #####:  233:        jerry_port_log (JERRY_LOG_LEVEL_DEBUG, "No more client source.\n");
    #####:  234:        break;
        -:  235:      }
        -:  236:
    #####:  237:      assert (receive_status == JERRY_DEBUGGER_CONTEXT_RESET_RECEIVED
        -:  238:              || receive_status == JERRY_DEBUGGER_SOURCE_RECEIVED);
        -:  239:
    #####:  240:      if (receive_status == JERRY_DEBUGGER_CONTEXT_RESET_RECEIVED || main_is_value_reset (ret_value))
        -:  241:      {
    #####:  242:        jerry_cleanup ();
    #####:  243:        goto restart;
        -:  244:      }
        -:  245:
    #####:  246:      assert (receive_status == JERRY_DEBUGGER_SOURCE_RECEIVED);
    #####:  247:      jerry_value_free (ret_value);
        -:  248:    }
        -:  249:  }
    #####:  250:  else if (arguments.option_flags & OPT_FLAG_USE_STDIN)
        -:  251:  {
    #####:  252:    char buffer[JERRY_BUFFER_SIZE];
    #####:  253:    char *source_p = NULL;
    #####:  254:    size_t source_size = 0;
        -:  255:
    #####:  256:    while (!feof (stdin))
        -:  257:    {
    #####:  258:      size_t read_bytes = fread (buffer, 1u, JERRY_BUFFER_SIZE, stdin);
        -:  259:
    #####:  260:      size_t new_size = source_size + read_bytes;
    #####:  261:      source_p = realloc (source_p, new_size);
        -:  262:
    #####:  263:      memcpy (source_p + source_size, buffer, read_bytes);
    #####:  264:      source_size = new_size;
        -:  265:    }
        -:  266:
    #####:  267:    ret_value = jerry_parse ((jerry_char_t *) source_p, source_size, NULL);
    #####:  268:    free (source_p);
        -:  269:
    #####:  270:    if (jerry_value_is_exception (ret_value))
        -:  271:    {
    #####:  272:      main_print_unhandled_exception (ret_value);
    #####:  273:      goto exit;
        -:  274:    }
        -:  275:
    #####:  276:    jerry_value_t func_val = ret_value;
    #####:  277:    ret_value = jerry_run (func_val);
    #####:  278:    jerry_value_free (func_val);
        -:  279:
    #####:  280:    if (jerry_value_is_exception (ret_value))
        -:  281:    {
    #####:  282:      main_print_unhandled_exception (ret_value);
    #####:  283:      goto exit;
        -:  284:    }
        -:  285:
    #####:  286:    jerry_value_free (ret_value);
        -:  287:  }
    #####:  288:  else if (arguments.source_count == 0)
        -:  289:  {
    #####:  290:    const char *prompt = (arguments.option_flags & OPT_FLAG_NO_PROMPT) ? "" : "jerry> ";
    #####:  291:    char buffer[JERRY_BUFFER_SIZE];
        -:  292:
        -:  293:    while (true)
    #####:  294:    {
    #####:  295:      printf ("%s", prompt);
    #####:  296:      char *str_p = fgets (buffer, JERRY_BUFFER_SIZE, stdin);
        -:  297:
    #####:  298:      if (str_p == NULL)
        -:  299:      {
    #####:  300:        printf ("\n");
    #####:  301:        break;
        -:  302:      }
        -:  303:
    #####:  304:      size_t len = strlen (str_p);
        -:  305:
    #####:  306:      if (len == 0)
        -:  307:      {
    #####:  308:        continue;
        -:  309:      }
        -:  310:
    #####:  311:      if (!jerry_validate_string ((jerry_char_t *) str_p, (jerry_size_t) len, JERRY_ENCODING_UTF8))
        -:  312:      {
    #####:  313:        jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Error: Input must be a valid UTF-8 string.\n");
    #####:  314:        continue;
        -:  315:      }
        -:  316:
    #####:  317:      ret_value = jerry_parse ((jerry_char_t *) str_p, len, NULL);
        -:  318:
    #####:  319:      if (jerry_value_is_exception (ret_value))
        -:  320:      {
    #####:  321:        main_print_unhandled_exception (ret_value);
    #####:  322:        continue;
        -:  323:      }
        -:  324:
    #####:  325:      jerry_value_t func_val = ret_value;
    #####:  326:      ret_value = jerry_run (func_val);
    #####:  327:      jerry_value_free (func_val);
        -:  328:
    #####:  329:      if (jerry_value_is_exception (ret_value))
        -:  330:      {
    #####:  331:        main_print_unhandled_exception (ret_value);
    #####:  332:        continue;
        -:  333:      }
        -:  334:
    #####:  335:      const jerry_value_t args[] = { ret_value };
    #####:  336:      jerry_value_t ret_val_print = jerryx_handler_print (NULL, args, 1);
    #####:  337:      jerry_value_free (ret_val_print);
    #####:  338:      jerry_value_free (ret_value);
    #####:  339:      ret_value = jerry_run_jobs ();
        -:  340:
    #####:  341:      if (jerry_value_is_exception (ret_value))
        -:  342:      {
    #####:  343:        main_print_unhandled_exception (ret_value);
    #####:  344:        continue;
        -:  345:      }
        -:  346:
    #####:  347:      jerry_value_free (ret_value);
        -:  348:    }
        -:  349:  }
        -:  350:
    #####:  351:  ret_value = jerry_run_jobs ();
        -:  352:
    #####:  353:  if (jerry_value_is_exception (ret_value))
        -:  354:  {
    #####:  355:    main_print_unhandled_exception (ret_value);
    #####:  356:    goto exit;
        -:  357:  }
        -:  358:
    #####:  359:  jerry_value_free (ret_value);
        -:  360:
    #####:  361:  if (arguments.exit_cb_name_p != NULL)
        -:  362:  {
    #####:  363:    jerry_value_t global = jerry_current_realm ();
    #####:  364:    jerry_value_t name_str = jerry_string_sz (arguments.exit_cb_name_p);
    #####:  365:    jerry_value_t callback_fn = jerry_object_get (global, name_str);
        -:  366:
    #####:  367:    jerry_value_free (global);
    #####:  368:    jerry_value_free (name_str);
        -:  369:
    #####:  370:    if (jerry_value_is_function (callback_fn))
        -:  371:    {
    #####:  372:      ret_value = jerry_call (callback_fn, jerry_undefined (), NULL, 0);
        -:  373:
    #####:  374:      if (jerry_value_is_exception (ret_value))
        -:  375:      {
    #####:  376:        main_print_unhandled_exception (ret_value);
    #####:  377:        goto exit;
        -:  378:      }
        -:  379:
    #####:  380:      jerry_value_free (ret_value);
        -:  381:    }
        -:  382:
    #####:  383:    jerry_value_free (callback_fn);
        -:  384:  }
        -:  385:
    #####:  386:  return_code = JERRY_STANDALONE_EXIT_CODE_OK;
        -:  387:
    #####:  388:exit:
    #####:  389:  jerry_cleanup ();
        -:  390:
        -:  391:#if defined(JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1)
        -:  392:  free (context_p);
        -:  393:#endif /* defined (JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1) */
        -:  394:
    #####:  395:  return return_code;
        -:  396:} /* main */
