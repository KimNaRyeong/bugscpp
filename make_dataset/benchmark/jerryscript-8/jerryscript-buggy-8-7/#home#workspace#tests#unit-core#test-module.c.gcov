        -:    0:Source:/home/workspace/tests/unit-core/test-module.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <string.h>
        -:   17:
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:static void
    #####:   23:compare_specifier (jerry_value_t specifier, /* string value */
        -:   24:                   int id) /* module id */
        -:   25:{
    #####:   26:  jerry_char_t string[] = "XX_module.mjs";
        -:   27:
    #####:   28:  TEST_ASSERT (id >= 1 && id <= 99 && string[0] == 'X' && string[1] == 'X');
        -:   29:
    #####:   30:  string[0] = (jerry_char_t) ((id / 10) + '0');
    #####:   31:  string[1] = (jerry_char_t) ((id % 10) + '0');
        -:   32:
    #####:   33:  jerry_size_t length = (jerry_size_t) (sizeof (string) - 1);
        -:   34:  jerry_char_t buffer[sizeof (string) - 1];
        -:   35:
    #####:   36:  TEST_ASSERT (jerry_value_is_string (specifier));
    #####:   37:  TEST_ASSERT (jerry_string_size (specifier, JERRY_ENCODING_CESU8) == length);
        -:   38:
    #####:   39:  TEST_ASSERT (jerry_string_to_buffer (specifier, JERRY_ENCODING_CESU8, buffer, length) == length);
    #####:   40:  TEST_ASSERT (memcmp (buffer, string, length) == 0);
    #####:   41:} /* compare_specifier */
        -:   42:
        -:   43:static void
    #####:   44:compare_property (jerry_value_t namespace_object, /**< namespace object */
        -:   45:                  const char *name_p, /**< property name */
        -:   46:                  double expected_value) /**< property value (number for simplicity) */
        -:   47:{
    #####:   48:  jerry_value_t name = jerry_string_sz (name_p);
    #####:   49:  jerry_value_t result = jerry_object_get (namespace_object, name);
        -:   50:
    #####:   51:  TEST_ASSERT (jerry_value_is_number (result));
    #####:   52:  TEST_ASSERT (jerry_value_as_number (result) == expected_value);
        -:   53:
    #####:   54:  jerry_value_free (result);
    #####:   55:  jerry_value_free (name);
    #####:   56:} /* compare_property */
        -:   57:
        -:   58:static jerry_value_t
    #####:   59:create_module (int id) /**< module id */
        -:   60:{
        -:   61:  jerry_parse_options_t module_parse_options;
    #####:   62:  module_parse_options.options = JERRY_PARSE_MODULE;
        -:   63:
        -:   64:  jerry_value_t result;
        -:   65:
    #####:   66:  if (id == 0)
        -:   67:  {
    #####:   68:    jerry_char_t source[] = "export var a = 7";
        -:   69:
    #####:   70:    result = jerry_parse (source, sizeof (source) - 1, &module_parse_options);
        -:   71:  }
        -:   72:  else
        -:   73:  {
    #####:   74:    jerry_char_t source[] = "export {a} from 'XX_module.mjs'";
        -:   75:
    #####:   76:    TEST_ASSERT (id >= 1 && id <= 99 && source[17] == 'X' && source[18] == 'X');
        -:   77:
    #####:   78:    source[17] = (jerry_char_t) ((id / 10) + '0');
    #####:   79:    source[18] = (jerry_char_t) ((id % 10) + '0');
        -:   80:
    #####:   81:    result = jerry_parse (source, sizeof (source) - 1, &module_parse_options);
        -:   82:  }
        -:   83:
    #####:   84:  TEST_ASSERT (!jerry_value_is_exception (result));
    #####:   85:  return result;
        -:   86:} /* create_module */
        -:   87:
        -:   88:static int counter = 0;
        -:   89:static jerry_value_t module;
        -:   90:
        -:   91:static jerry_value_t
    #####:   92:resolve_callback1 (const jerry_value_t specifier, /**< module specifier */
        -:   93:                   const jerry_value_t referrer, /**< parent module */
        -:   94:                   void *user_p) /**< user data */
        -:   95:{
    #####:   96:  TEST_ASSERT (user_p == (void *) &module);
    #####:   97:  TEST_ASSERT (referrer == module);
    #####:   98:  compare_specifier (specifier, 1);
        -:   99:
    #####:  100:  counter++;
    #####:  101:  return counter == 1 ? jerry_number (7) : jerry_object ();
        -:  102:} /* resolve_callback1 */
        -:  103:
        -:  104:static jerry_value_t prev_module;
        -:  105:static bool terminate_with_error;
        -:  106:
        -:  107:static jerry_value_t
    #####:  108:resolve_callback2 (const jerry_value_t specifier, /**< module specifier */
        -:  109:                   const jerry_value_t referrer, /**< parent module */
        -:  110:                   void *user_p) /**< user data */
        -:  111:{
    #####:  112:  TEST_ASSERT (prev_module == referrer);
    #####:  113:  TEST_ASSERT (user_p == NULL);
        -:  114:
    #####:  115:  compare_specifier (specifier, ++counter);
        -:  116:
    #####:  117:  if (counter >= 32)
        -:  118:  {
    #####:  119:    if (terminate_with_error)
        -:  120:    {
    #####:  121:      return jerry_throw_sz (JERRY_ERROR_RANGE, "Module not found");
        -:  122:    }
        -:  123:
    #####:  124:    return create_module (0);
        -:  125:  }
        -:  126:
    #####:  127:  prev_module = create_module (counter + 1);
    #####:  128:  return prev_module;
        -:  129:} /* resolve_callback2 */
        -:  130:
        -:  131:static jerry_value_t
    #####:  132:resolve_callback3 (const jerry_value_t specifier, /**< module specifier */
        -:  133:                   const jerry_value_t referrer, /**< parent module */
        -:  134:                   void *user_p) /**< user data */
        -:  135:{
        -:  136:  (void) specifier;
        -:  137:  (void) referrer;
        -:  138:  (void) user_p;
        -:  139:
    #####:  140:  TEST_ASSERT (false);
        -:  141:} /* resolve_callback3 */
        -:  142:
        -:  143:static jerry_value_t
    #####:  144:native_module_evaluate (const jerry_value_t native_module) /**< native module */
        -:  145:{
    #####:  146:  ++counter;
        -:  147:
    #####:  148:  TEST_ASSERT (jerry_module_state (module) == JERRY_MODULE_STATE_EVALUATING);
        -:  149:
    #####:  150:  jerry_value_t exp_val = jerry_string_sz ("exp");
    #####:  151:  jerry_value_t other_exp_val = jerry_string_sz ("other_exp");
        -:  152:  /* The native module has no such export. */
    #####:  153:  jerry_value_t no_exp_val = jerry_string_sz ("no_exp");
        -:  154:
    #####:  155:  jerry_value_t result = jerry_native_module_get (native_module, exp_val);
    #####:  156:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  157:  jerry_value_free (result);
        -:  158:
    #####:  159:  result = jerry_native_module_get (native_module, other_exp_val);
    #####:  160:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  161:  jerry_value_free (result);
        -:  162:
    #####:  163:  result = jerry_native_module_get (native_module, no_exp_val);
    #####:  164:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  165:  TEST_ASSERT (jerry_error_type (result) == JERRY_ERROR_REFERENCE);
    #####:  166:  jerry_value_free (result);
        -:  167:
    #####:  168:  jerry_value_t export = jerry_number (3.5);
    #####:  169:  result = jerry_native_module_set (native_module, exp_val, export);
    #####:  170:  TEST_ASSERT (jerry_value_is_boolean (result) && jerry_value_is_true (result));
    #####:  171:  jerry_value_free (result);
    #####:  172:  jerry_value_free (export);
        -:  173:
    #####:  174:  export = jerry_string_sz ("str");
    #####:  175:  result = jerry_native_module_set (native_module, other_exp_val, export);
    #####:  176:  TEST_ASSERT (jerry_value_is_boolean (result) && jerry_value_is_true (result));
    #####:  177:  jerry_value_free (result);
    #####:  178:  jerry_value_free (export);
        -:  179:
    #####:  180:  result = jerry_native_module_set (native_module, no_exp_val, no_exp_val);
    #####:  181:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  182:  TEST_ASSERT (jerry_error_type (result) == JERRY_ERROR_REFERENCE);
    #####:  183:  jerry_value_free (result);
        -:  184:
    #####:  185:  result = jerry_native_module_get (native_module, exp_val);
    #####:  186:  TEST_ASSERT (jerry_value_is_number (result) && jerry_value_as_number (result) == 3.5);
    #####:  187:  jerry_value_free (result);
        -:  188:
    #####:  189:  result = jerry_native_module_get (native_module, other_exp_val);
    #####:  190:  TEST_ASSERT (jerry_value_is_string (result));
    #####:  191:  jerry_value_free (result);
        -:  192:
    #####:  193:  jerry_value_free (exp_val);
    #####:  194:  jerry_value_free (other_exp_val);
    #####:  195:  jerry_value_free (no_exp_val);
        -:  196:
    #####:  197:  if (counter == 4)
        -:  198:  {
    #####:  199:    ++counter;
    #####:  200:    return jerry_throw_sz (JERRY_ERROR_COMMON, "Ooops!");
        -:  201:  }
        -:  202:
    #####:  203:  return jerry_undefined ();
        -:  204:} /* native_module_evaluate */
        -:  205:
        -:  206:static jerry_value_t
    #####:  207:resolve_callback4 (const jerry_value_t specifier, /**< module specifier */
        -:  208:                   const jerry_value_t referrer, /**< parent module */
        -:  209:                   void *user_p) /**< user data */
        -:  210:{
        -:  211:  (void) specifier;
        -:  212:  (void) referrer;
        -:  213:
    #####:  214:  ++counter;
        -:  215:
    #####:  216:  jerry_value_t exports[2] = { jerry_string_sz ("exp"), jerry_string_sz ("other_exp") };
        -:  217:
    #####:  218:  jerry_value_t native_module = jerry_native_module (native_module_evaluate, exports, 2);
    #####:  219:  TEST_ASSERT (!jerry_value_is_exception (native_module));
        -:  220:
    #####:  221:  jerry_value_free (exports[0]);
    #####:  222:  jerry_value_free (exports[1]);
        -:  223:
    #####:  224:  *((jerry_value_t *) user_p) = jerry_value_copy (native_module);
    #####:  225:  return native_module;
        -:  226:} /* resolve_callback4 */
        -:  227:
        -:  228:static void
    #####:  229:module_state_changed (jerry_module_state_t new_state, /**< new state of the module */
        -:  230:                      const jerry_value_t module_val, /**< a module whose state is changed */
        -:  231:                      const jerry_value_t value, /**< value argument */
        -:  232:                      void *user_p) /**< user pointer */
        -:  233:{
    #####:  234:  TEST_ASSERT (jerry_module_state (module_val) == new_state);
    #####:  235:  TEST_ASSERT (module_val == module);
    #####:  236:  TEST_ASSERT (user_p == (void *) &counter);
        -:  237:
    #####:  238:  ++counter;
        -:  239:
    #####:  240:  switch (counter)
        -:  241:  {
    #####:  242:    case 1:
        -:  243:    case 3:
        -:  244:    {
    #####:  245:      TEST_ASSERT (new_state == JERRY_MODULE_STATE_LINKED);
    #####:  246:      TEST_ASSERT (jerry_value_is_undefined (value));
        -:  247:      break;
        -:  248:    }
    #####:  249:    case 2:
        -:  250:    {
    #####:  251:      TEST_ASSERT (new_state == JERRY_MODULE_STATE_EVALUATED);
    #####:  252:      TEST_ASSERT (jerry_value_is_number (value) && jerry_value_as_number (value) == 33.5);
        -:  253:      break;
        -:  254:    }
    #####:  255:    default:
        -:  256:    {
    #####:  257:      TEST_ASSERT (counter == 4);
    #####:  258:      TEST_ASSERT (new_state == JERRY_MODULE_STATE_ERROR);
    #####:  259:      TEST_ASSERT (jerry_value_is_number (value) && jerry_value_as_number (value) == -5.5);
        -:  260:      break;
        -:  261:    }
        -:  262:  }
    #####:  263:} /* module_state_changed */
        -:  264:
        -:  265:static jerry_value_t
    #####:  266:resolve_callback5 (const jerry_value_t specifier, /**< module specifier */
        -:  267:                   const jerry_value_t referrer, /**< parent module */
        -:  268:                   void *user_p) /**< user data */
        -:  269:{
        -:  270:  (void) specifier;
        -:  271:  (void) user_p;
        -:  272:
        -:  273:  /* This circular reference is valid. However, import resolving triggers
        -:  274:   * a SyntaxError, because the module does not export a default binding. */
    #####:  275:  return referrer;
        -:  276:} /* resolve_callback5 */
        -:  277:
        -:  278:int
    #####:  279:main (void)
        -:  280:{
    #####:  281:  jerry_init (JERRY_INIT_EMPTY);
        -:  282:
    #####:  283:  if (!jerry_feature_enabled (JERRY_FEATURE_MODULE))
        -:  284:  {
    #####:  285:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Module is disabled!\n");
    #####:  286:    jerry_cleanup ();
    #####:  287:    return 0;
        -:  288:  }
        -:  289:
    #####:  290:  jerry_value_t number = jerry_number (5);
    #####:  291:  jerry_value_t object = jerry_object ();
        -:  292:
    #####:  293:  jerry_value_t result = jerry_module_link (number, resolve_callback1, NULL);
    #####:  294:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  295:  jerry_value_free (result);
        -:  296:
    #####:  297:  result = jerry_module_link (object, resolve_callback1, NULL);
    #####:  298:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  299:  jerry_value_free (result);
        -:  300:
    #####:  301:  module = create_module (1);
        -:  302:
        -:  303:  /* After an error, module must remain in unlinked mode. */
    #####:  304:  result = jerry_module_link (module, resolve_callback1, (void *) &module);
    #####:  305:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  306:  TEST_ASSERT (counter == 1);
    #####:  307:  jerry_value_free (result);
        -:  308:
    #####:  309:  result = jerry_module_link (module, resolve_callback1, (void *) &module);
    #####:  310:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  311:  TEST_ASSERT (counter == 2);
    #####:  312:  jerry_value_free (result);
        -:  313:
    #####:  314:  prev_module = module;
    #####:  315:  counter = 0;
    #####:  316:  terminate_with_error = true;
    #####:  317:  result = jerry_module_link (module, resolve_callback2, NULL);
    #####:  318:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  319:  TEST_ASSERT (counter == 32);
    #####:  320:  jerry_value_free (result);
        -:  321:
        -:  322:  /* The successfully resolved modules is kept around in unlinked state. */
    #####:  323:  jerry_heap_gc (JERRY_GC_PRESSURE_HIGH);
        -:  324:
    #####:  325:  counter = 31;
    #####:  326:  terminate_with_error = false;
    #####:  327:  result = jerry_module_link (module, resolve_callback2, NULL);
    #####:  328:  TEST_ASSERT (jerry_value_is_boolean (result) && jerry_value_is_true (result));
    #####:  329:  TEST_ASSERT (counter == 32);
    #####:  330:  jerry_value_free (result);
        -:  331:
    #####:  332:  TEST_ASSERT (jerry_module_state (module) == JERRY_MODULE_STATE_LINKED);
    #####:  333:  TEST_ASSERT (jerry_module_request_count (module) == 1);
    #####:  334:  result = jerry_module_request (module, 0);
    #####:  335:  TEST_ASSERT (jerry_module_state (module) == JERRY_MODULE_STATE_LINKED);
    #####:  336:  jerry_value_free (result);
        -:  337:
    #####:  338:  jerry_value_free (module);
        -:  339:
    #####:  340:  module = create_module (1);
        -:  341:
    #####:  342:  prev_module = module;
    #####:  343:  counter = 0;
    #####:  344:  terminate_with_error = false;
    #####:  345:  result = jerry_module_link (module, resolve_callback2, NULL);
    #####:  346:  TEST_ASSERT (jerry_value_is_boolean (result) && jerry_value_is_true (result));
    #####:  347:  TEST_ASSERT (counter == 32);
    #####:  348:  jerry_value_free (result);
    #####:  349:  jerry_value_free (module);
        -:  350:
    #####:  351:  TEST_ASSERT (jerry_module_state (number) == JERRY_MODULE_STATE_INVALID);
        -:  352:
        -:  353:  jerry_parse_options_t module_parse_options;
    #####:  354:  module_parse_options.options = JERRY_PARSE_MODULE;
        -:  355:
    #####:  356:  jerry_char_t source1[] = TEST_STRING_LITERAL ("import a from '16_module.mjs'\n"
        -:  357:                                                "export * from '07_module.mjs'\n"
        -:  358:                                                "export * from '44_module.mjs'\n"
        -:  359:                                                "import * as b from '36_module.mjs'\n");
    #####:  360:  module = jerry_parse (source1, sizeof (source1) - 1, &module_parse_options);
    #####:  361:  TEST_ASSERT (!jerry_value_is_exception (module));
    #####:  362:  TEST_ASSERT (jerry_module_state (module) == JERRY_MODULE_STATE_UNLINKED);
        -:  363:
    #####:  364:  TEST_ASSERT (jerry_module_request_count (number) == 0);
    #####:  365:  TEST_ASSERT (jerry_module_request_count (module) == 4);
        -:  366:
    #####:  367:  result = jerry_module_request (object, 0);
    #####:  368:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  369:  jerry_value_free (result);
        -:  370:
    #####:  371:  result = jerry_module_request (module, 0);
    #####:  372:  compare_specifier (result, 16);
    #####:  373:  jerry_value_free (result);
        -:  374:
    #####:  375:  result = jerry_module_request (module, 1);
    #####:  376:  compare_specifier (result, 7);
    #####:  377:  jerry_value_free (result);
        -:  378:
    #####:  379:  result = jerry_module_request (module, 2);
    #####:  380:  compare_specifier (result, 44);
    #####:  381:  jerry_value_free (result);
        -:  382:
    #####:  383:  result = jerry_module_request (module, 3);
    #####:  384:  compare_specifier (result, 36);
    #####:  385:  jerry_value_free (result);
        -:  386:
    #####:  387:  result = jerry_module_request (module, 4);
    #####:  388:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  389:  jerry_value_free (result);
        -:  390:
    #####:  391:  jerry_value_free (module);
        -:  392:
    #####:  393:  result = jerry_module_namespace (number);
    #####:  394:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  395:  jerry_value_free (result);
        -:  396:
    #####:  397:  jerry_char_t source2[] = TEST_STRING_LITERAL ("export let a = 6\n"
        -:  398:                                                "export let b = 8.5\n");
    #####:  399:  module = jerry_parse (source2, sizeof (source2) - 1, &module_parse_options);
    #####:  400:  TEST_ASSERT (!jerry_value_is_exception (module));
    #####:  401:  TEST_ASSERT (jerry_module_state (module) == JERRY_MODULE_STATE_UNLINKED);
        -:  402:
    #####:  403:  result = jerry_module_link (module, resolve_callback3, NULL);
    #####:  404:  TEST_ASSERT (!jerry_value_is_exception (result));
    #####:  405:  jerry_value_free (result);
        -:  406:
    #####:  407:  TEST_ASSERT (jerry_module_state (module) == JERRY_MODULE_STATE_LINKED);
        -:  408:
    #####:  409:  result = jerry_module_evaluate (module);
    #####:  410:  TEST_ASSERT (!jerry_value_is_exception (result));
    #####:  411:  jerry_value_free (result);
        -:  412:
    #####:  413:  TEST_ASSERT (jerry_module_state (module) == JERRY_MODULE_STATE_EVALUATED);
        -:  414:
    #####:  415:  result = jerry_module_namespace (module);
    #####:  416:  TEST_ASSERT (jerry_value_is_object (result));
    #####:  417:  compare_property (result, "a", 6);
    #####:  418:  compare_property (result, "b", 8.5);
    #####:  419:  jerry_value_free (result);
        -:  420:
    #####:  421:  jerry_value_free (module);
        -:  422:
    #####:  423:  module = jerry_native_module (NULL, &object, 1);
    #####:  424:  TEST_ASSERT (jerry_value_is_exception (module));
    #####:  425:  jerry_value_free (module);
        -:  426:
    #####:  427:  module = jerry_native_module (NULL, NULL, 0);
    #####:  428:  TEST_ASSERT (!jerry_value_is_exception (module));
    #####:  429:  TEST_ASSERT (jerry_module_state (module) == JERRY_MODULE_STATE_UNLINKED);
        -:  430:
    #####:  431:  result = jerry_native_module_get (object, number);
    #####:  432:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  433:  jerry_value_free (result);
        -:  434:
    #####:  435:  result = jerry_native_module_set (module, number, number);
    #####:  436:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  437:  jerry_value_free (result);
        -:  438:
    #####:  439:  jerry_value_free (module);
        -:  440:
        -:  441:  /* Valid identifier. */
    #####:  442:  jerry_value_t export = jerry_string_sz ("\xed\xa0\x83\xed\xb2\x80");
        -:  443:
    #####:  444:  module = jerry_native_module (NULL, &export, 1);
    #####:  445:  TEST_ASSERT (!jerry_value_is_exception (module));
    #####:  446:  TEST_ASSERT (jerry_module_state (module) == JERRY_MODULE_STATE_UNLINKED);
        -:  447:
    #####:  448:  result = jerry_module_link (module, NULL, NULL);
    #####:  449:  TEST_ASSERT (jerry_value_is_boolean (result) && jerry_value_is_true (result));
    #####:  450:  jerry_value_free (result);
        -:  451:
    #####:  452:  result = jerry_module_evaluate (module);
    #####:  453:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  454:  jerry_value_free (result);
        -:  455:
    #####:  456:  jerry_value_free (module);
    #####:  457:  jerry_value_free (export);
        -:  458:
        -:  459:  /* Invalid identifiers. */
    #####:  460:  export = jerry_string_sz ("a+");
    #####:  461:  module = jerry_native_module (NULL, &export, 1);
    #####:  462:  TEST_ASSERT (jerry_value_is_exception (module));
    #####:  463:  jerry_value_free (module);
    #####:  464:  jerry_value_free (export);
        -:  465:
    #####:  466:  export = jerry_string_sz ("\xed\xa0\x80");
    #####:  467:  module = jerry_native_module (NULL, &export, 1);
    #####:  468:  TEST_ASSERT (jerry_value_is_exception (module));
    #####:  469:  jerry_value_free (module);
    #####:  470:  jerry_value_free (export);
        -:  471:
    #####:  472:  counter = 0;
        -:  473:
    #####:  474:  for (int i = 0; i < 2; i++)
        -:  475:  {
    #####:  476:    jerry_char_t source3[] = TEST_STRING_LITERAL (
        -:  477:      "import {exp, other_exp as other} from 'native.js'\n"
        -:  478:      "import * as namespace from 'native.js'\n"
        -:  479:      "if (exp !== 3.5 || other !== 'str') { throw 'Assertion failed!' }\n"
        -:  480:      "if (namespace.exp !== 3.5 || namespace.other_exp !== 'str') { throw 'Assertion failed!' }\n");
    #####:  481:    module = jerry_parse (source3, sizeof (source3) - 1, &module_parse_options);
    #####:  482:    TEST_ASSERT (!jerry_value_is_exception (module));
    #####:  483:    TEST_ASSERT (jerry_module_state (module) == JERRY_MODULE_STATE_UNLINKED);
        -:  484:
        -:  485:    jerry_value_t native_module;
        -:  486:
    #####:  487:    result = jerry_module_link (module, resolve_callback4, (void *) &native_module);
    #####:  488:    TEST_ASSERT (!jerry_value_is_exception (result));
    #####:  489:    jerry_value_free (result);
        -:  490:
    #####:  491:    TEST_ASSERT (counter == i * 2 + 1);
    #####:  492:    TEST_ASSERT (jerry_module_state (module) == JERRY_MODULE_STATE_LINKED);
    #####:  493:    TEST_ASSERT (jerry_module_state (native_module) == JERRY_MODULE_STATE_LINKED);
        -:  494:
    #####:  495:    result = jerry_module_evaluate (module);
        -:  496:
    #####:  497:    if (i == 0)
        -:  498:    {
    #####:  499:      TEST_ASSERT (!jerry_value_is_exception (result));
    #####:  500:      TEST_ASSERT (jerry_module_state (module) == JERRY_MODULE_STATE_EVALUATED);
    #####:  501:      TEST_ASSERT (jerry_module_state (native_module) == JERRY_MODULE_STATE_EVALUATED);
    #####:  502:      TEST_ASSERT (counter == 2);
        -:  503:    }
        -:  504:    else
        -:  505:    {
    #####:  506:      TEST_ASSERT (jerry_value_is_exception (result));
    #####:  507:      TEST_ASSERT (jerry_module_state (module) == JERRY_MODULE_STATE_ERROR);
    #####:  508:      TEST_ASSERT (jerry_module_state (native_module) == JERRY_MODULE_STATE_ERROR);
    #####:  509:      TEST_ASSERT (counter == 5);
        -:  510:    }
        -:  511:
    #####:  512:    jerry_value_free (result);
    #####:  513:    jerry_value_free (module);
    #####:  514:    jerry_value_free (native_module);
        -:  515:  }
        -:  516:
    #####:  517:  jerry_value_free (object);
    #####:  518:  jerry_value_free (number);
        -:  519:
    #####:  520:  counter = 0;
    #####:  521:  jerry_module_on_state_changed (module_state_changed, (void *) &counter);
        -:  522:
    #####:  523:  jerry_char_t source4[] = TEST_STRING_LITERAL ("33.5\n");
    #####:  524:  module = jerry_parse (source4, sizeof (source4) - 1, &module_parse_options);
        -:  525:
    #####:  526:  result = jerry_module_link (module, NULL, NULL);
    #####:  527:  TEST_ASSERT (!jerry_value_is_exception (result));
    #####:  528:  jerry_value_free (result);
        -:  529:
    #####:  530:  result = jerry_module_evaluate (module);
    #####:  531:  TEST_ASSERT (!jerry_value_is_exception (result));
    #####:  532:  jerry_value_free (result);
        -:  533:
    #####:  534:  jerry_value_free (module);
        -:  535:
    #####:  536:  jerry_char_t source5[] = TEST_STRING_LITERAL ("throw -5.5\n");
    #####:  537:  module = jerry_parse (source5, sizeof (source5) - 1, &module_parse_options);
        -:  538:
    #####:  539:  result = jerry_module_link (module, NULL, NULL);
    #####:  540:  TEST_ASSERT (!jerry_value_is_exception (result));
    #####:  541:  jerry_value_free (result);
        -:  542:
    #####:  543:  result = jerry_module_evaluate (module);
    #####:  544:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  545:  jerry_value_free (result);
        -:  546:
    #####:  547:  jerry_value_free (module);
        -:  548:
    #####:  549:  jerry_module_on_state_changed (NULL, NULL);
        -:  550:
    #####:  551:  TEST_ASSERT (counter == 4);
        -:  552:
    #####:  553:  jerry_char_t source6[] = TEST_STRING_LITERAL ("import a from 'self'\n");
    #####:  554:  module = jerry_parse (source6, sizeof (source6) - 1, &module_parse_options);
        -:  555:
    #####:  556:  result = jerry_module_link (module, resolve_callback5, NULL);
    #####:  557:  TEST_ASSERT (jerry_value_is_exception (result) && jerry_error_type (result) == JERRY_ERROR_SYNTAX);
    #####:  558:  jerry_value_free (result);
        -:  559:
    #####:  560:  jerry_cleanup ();
        -:  561:
    #####:  562:  return 0;
        -:  563:} /* main */
