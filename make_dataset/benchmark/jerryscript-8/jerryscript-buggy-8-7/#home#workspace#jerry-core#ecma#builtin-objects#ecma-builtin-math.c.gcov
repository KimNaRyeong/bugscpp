        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-math.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <math.h>
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-builtins.h"
        -:   20:#include "ecma-conversion.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-objects-general.h"
        -:   26:#include "ecma-objects.h"
        -:   27:
        -:   28:#include "jrt-libc-includes.h"
        -:   29:#include "jrt.h"
        -:   30:
        -:   31:#if defined(_WIN32)
        -:   32:#include <intrin.h>
        -:   33:#endif /* defined(_WIN32) */
        -:   34:
        -:   35:#if JERRY_BUILTIN_MATH
        -:   36:
        -:   37:#define ECMA_BUILTINS_INTERNAL
        -:   38:#include "ecma-builtins-internal.h"
        -:   39:
        -:   40:/**
        -:   41: * This object has a custom dispatch function.
        -:   42: */
        -:   43:#define BUILTIN_CUSTOM_DISPATCH
        -:   44:
        -:   45:/**
        -:   46: * List of built-in routine identifiers.
        -:   47: */
        -:   48:enum
        -:   49:{
        -:   50:  ECMA_MATH_OBJECT_ROUTINE_START = 0,
        -:   51:
        -:   52:  ECMA_MATH_OBJECT_ABS, /* ECMA-262 v5, 15.8.2.1 */
        -:   53:  ECMA_MATH_OBJECT_ACOS, /* ECMA-262 v5, 15.8.2.2 */
        -:   54:  ECMA_MATH_OBJECT_ASIN, /* ECMA-262 v5, 15.8.2.3 */
        -:   55:  ECMA_MATH_OBJECT_ATAN, /* ECMA-262 v5, 15.8.2.4 */
        -:   56:  ECMA_MATH_OBJECT_CEIL, /* ECMA-262 v5, 15.8.2.6 */
        -:   57:  ECMA_MATH_OBJECT_COS, /* ECMA-262 v5, 15.8.2.7 */
        -:   58:  ECMA_MATH_OBJECT_EXP, /* ECMA-262 v5, 15.8.2.8 */
        -:   59:  ECMA_MATH_OBJECT_FLOOR, /* ECMA-262 v5, 15.8.2.9 */
        -:   60:  ECMA_MATH_OBJECT_LOG, /* ECMA-262 v5, 15.8.2.10 */
        -:   61:  ECMA_MATH_OBJECT_ROUND, /* ECMA-262 v5, 15.8.2.15 */
        -:   62:  ECMA_MATH_OBJECT_SIN, /* ECMA-262 v5, 15.8.2.16 */
        -:   63:  ECMA_MATH_OBJECT_SQRT, /* ECMA-262 v5, 15.8.2.17 */
        -:   64:  ECMA_MATH_OBJECT_TAN, /* ECMA-262 v5, 15.8.2.18 */
        -:   65:#if JERRY_ESNEXT
        -:   66:  ECMA_MATH_OBJECT_ACOSH, /* ECMA-262 v6, 20.2.2.3  */
        -:   67:  ECMA_MATH_OBJECT_ASINH, /* ECMA-262 v6, 20.2.2.5  */
        -:   68:  ECMA_MATH_OBJECT_ATANH, /* ECMA-262 v6, 20.2.2.7  */
        -:   69:  ECMA_MATH_OBJECT_CBRT, /* ECMA-262 v6, 20.2.2.9  */
        -:   70:  ECMA_MATH_OBJECT_CLZ32, /* ECMA-262 v6, 20.2.2.11  */
        -:   71:  ECMA_MATH_OBJECT_COSH, /* ECMA-262 v6, 20.2.2.13  */
        -:   72:  ECMA_MATH_OBJECT_EXPM1, /* ECMA-262 v6, 20.2.2.15  */
        -:   73:  ECMA_MATH_OBJECT_FROUND, /* ECMA-262 v6, 20.2.2.17  */
        -:   74:  ECMA_MATH_OBJECT_LOG1P, /* ECMA-262 v6, 20.2.2.21  */
        -:   75:  ECMA_MATH_OBJECT_LOG10, /* ECMA-262 v6, 20.2.2.22  */
        -:   76:  ECMA_MATH_OBJECT_LOG2, /* ECMA-262 v6, 20.2.2.23  */
        -:   77:  ECMA_MATH_OBJECT_SIGN, /* ECMA-262 v6, 20.2.2.29 */
        -:   78:  ECMA_MATH_OBJECT_SINH, /* ECMA-262 v6, 20.2.2.31  */
        -:   79:  ECMA_MATH_OBJECT_TANH, /* ECMA-262 v6, 20.2.2.34  */
        -:   80:  ECMA_MATH_OBJECT_TRUNC, /* ECMA-262 v6, 20.2.2.35  */
        -:   81:#endif /* JERRY_ESNEXT */
        -:   82:  ECMA_MATH_OBJECT_ATAN2,
        -:   83:/* ECMA-262 v5, 15.8.2.5 */ /* first routine with 2 arguments */
        -:   84:#if JERRY_ESNEXT
        -:   85:  ECMA_MATH_OBJECT_IMUL, /* ECMA-262 v6, 20.2.2.19  */
        -:   86:#endif /* JERRY_ESNEXT */
        -:   87:  ECMA_MATH_OBJECT_POW,
        -:   88:  /* ECMA-262 v5, 15.8.2.13 */ /* last routine with 1 or 2 arguments*/
        -:   89:  ECMA_MATH_OBJECT_MAX, /* ECMA-262 v5, 15.8.2.11 */
        -:   90:  ECMA_MATH_OBJECT_MIN, /* ECMA-262 v5, 15.8.2.12 */
        -:   91:#if JERRY_ESNEXT
        -:   92:  ECMA_MATH_OBJECT_HYPOT, /* ECMA-262 v6, 20.2.2.18  */
        -:   93:#endif /* JERRY_ESNEXT */
        -:   94:  ECMA_MATH_OBJECT_RANDOM, /* ECMA-262 v5, 15.8.2.14 */
        -:   95:};
        -:   96:
        -:   97:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-math.inc.h"
        -:   98:#define BUILTIN_UNDERSCORED_ID  math
        -:   99:#include "ecma-builtin-internal-routines-template.inc.h"
        -:  100:
        -:  101:/** \addtogroup ecma ECMA
        -:  102: * @{
        -:  103: *
        -:  104: * \addtogroup ecmabuiltins
        -:  105: * @{
        -:  106: *
        -:  107: * \addtogroup object ECMA Object object built-in
        -:  108: * @{
        -:  109: */
        -:  110:
        -:  111:/**
        -:  112: * The Math object's 'max' 'min' routines.
        -:  113: *
        -:  114: * See also:
        -:  115: *          ECMA-262 v5, 15.8.2.11
        -:  116: *          ECMA-262 v5, 15.8.2.12
        -:  117: *
        -:  118: * @return ecma value
        -:  119: *         Returned value must be freed with ecma_free_value.
        -:  120: */
        -:  121:static ecma_value_t
    #####:  122:ecma_builtin_math_object_max_min (bool is_max, /**< 'max' or 'min' operation */
        -:  123:                                  const ecma_value_t *arg, /**< arguments list */
        -:  124:                                  uint32_t args_number) /**< number of arguments */
        -:  125:{
    #####:  126:  ecma_number_t result_num = ecma_number_make_infinity (is_max);
        -:  127:
    #####:  128:  while (args_number > 0)
        -:  129:  {
    #####:  130:    ecma_number_t arg_num;
    #####:  131:    ecma_value_t value = ecma_op_to_number (*arg, &arg_num);
        -:  132:
    #####:  133:    if (ECMA_IS_VALUE_ERROR (value))
        -:  134:    {
    #####:  135:      return value;
        -:  136:    }
        -:  137:
    #####:  138:    arg++;
    #####:  139:    args_number--;
        -:  140:
    #####:  141:    if (ecma_number_is_nan (arg_num))
        -:  142:    {
    #####:  143:      result_num = arg_num;
        -:  144:    }
        -:  145:
    #####:  146:    if (ecma_number_is_zero (arg_num) && ecma_number_is_zero (result_num))
    #####:  147:    {
    #####:  148:      bool is_negative = ecma_number_is_negative (arg_num);
        -:  149:
    #####:  150:      if (is_max ? !is_negative : is_negative)
        -:  151:      {
    #####:  152:        result_num = arg_num;
        -:  153:      }
        -:  154:    }
        -:  155:    else
        -:  156:    {
    #####:  157:      if (is_max ? (arg_num > result_num) : (arg_num < result_num))
        -:  158:      {
    #####:  159:        result_num = arg_num;
        -:  160:      }
        -:  161:    }
        -:  162:  }
        -:  163:
    #####:  164:  return ecma_make_number_value (result_num);
        -:  165:} /* ecma_builtin_math_object_max_min */
        -:  166:
        -:  167:#if JERRY_ESNEXT
        -:  168:/**
        -:  169: * The Math object's 'hypot' routine
        -:  170: *
        -:  171: * See also:
        -:  172: *          ECMA-262 v6, 20.2.2.18
        -:  173: *
        -:  174: * @return ecma value
        -:  175: *         Returned value must be freed with ecma_free_value.
        -:  176: */
        -:  177:static ecma_value_t
    #####:  178:ecma_builtin_math_object_hypot (const ecma_value_t *arg, /**< arguments list */
        -:  179:                                uint32_t args_number) /**< number of arguments */
        -:  180:{
    #####:  181:  if (args_number == 0)
        -:  182:  {
    #####:  183:    return ecma_make_number_value (0.0);
        -:  184:  }
        -:  185:
    #####:  186:  ecma_number_t result_num = 0;
    #####:  187:  bool inf = false;
        -:  188:
    #####:  189:  while (args_number > 0)
        -:  190:  {
    #####:  191:    ecma_number_t arg_num;
    #####:  192:    ecma_value_t value = ecma_op_to_number (*arg, &arg_num);
    #####:  193:    if (ECMA_IS_VALUE_ERROR (value))
        -:  194:    {
    #####:  195:      return value;
        -:  196:    }
        -:  197:
    #####:  198:    arg++;
    #####:  199:    args_number--;
        -:  200:
    #####:  201:    if (ecma_number_is_nan (arg_num) && !inf)
        -:  202:    {
    #####:  203:      result_num = arg_num;
    #####:  204:      continue;
        -:  205:    }
        -:  206:
    #####:  207:    if (ecma_number_is_infinity (arg_num))
        -:  208:    {
    #####:  209:      inf = true;
    #####:  210:      result_num = ecma_number_make_infinity (false);
    #####:  211:      continue;
        -:  212:    }
        -:  213:
    #####:  214:    result_num += arg_num * arg_num;
        -:  215:  }
        -:  216:
    #####:  217:  return ecma_make_number_value (sqrt (result_num));
        -:  218:} /* ecma_builtin_math_object_hypot */
        -:  219:
        -:  220:/**
        -:  221: * The Math object's 'trunc' routine
        -:  222: *
        -:  223: * See also:
        -:  224: *          ECMA-262 v6, 20.2.2.35
        -:  225: *
        -:  226: * @return ecma number
        -:  227: */
        -:  228:static ecma_number_t
    #####:  229:ecma_builtin_math_object_trunc (ecma_number_t arg)
        -:  230:{
    #####:  231:  if (ecma_number_is_nan (arg) || ecma_number_is_infinity (arg) || ecma_number_is_zero (arg))
        -:  232:  {
    #####:  233:    return arg;
        -:  234:  }
        -:  235:
    #####:  236:  if ((arg > 0) && (arg < 1))
        -:  237:  {
    #####:  238:    return (ecma_number_t) 0.0;
        -:  239:  }
        -:  240:
    #####:  241:  if ((arg < 0) && (arg > -1))
        -:  242:  {
    #####:  243:    return (ecma_number_t) -0.0;
        -:  244:  }
        -:  245:
    #####:  246:  return (ecma_number_t) arg - fmod (arg, 1);
        -:  247:} /* ecma_builtin_math_object_trunc */
        -:  248:
        -:  249:/**
        -:  250: * The Math object's 'sign' routine
        -:  251: *
        -:  252: * See also:
        -:  253: *          ECMA-262 v6, 20.2.2.29
        -:  254: *
        -:  255: * @return ecma number
        -:  256: */
        -:  257:static ecma_number_t
    #####:  258:ecma_builtin_math_object_sign (ecma_number_t arg)
        -:  259:{
    #####:  260:  if (ecma_number_is_nan (arg) || ecma_number_is_zero (arg))
        -:  261:  {
    #####:  262:    return arg;
        -:  263:  }
        -:  264:
    #####:  265:  if (ecma_number_is_negative (arg))
        -:  266:  {
    #####:  267:    return (ecma_number_t) -1.0;
        -:  268:  }
        -:  269:
    #####:  270:  return (ecma_number_t) 1.0;
        -:  271:} /* ecma_builtin_math_object_sign */
        -:  272:
        -:  273:#endif /* JERRY_ESNEXT */
        -:  274:
        -:  275:/**
        -:  276: * The Math object's 'random' routine.
        -:  277: *
        -:  278: * See also:
        -:  279: *          ECMA-262 v5, 15.8.2.14
        -:  280: *
        -:  281: * @return ecma value
        -:  282: *         Returned value must be freed with ecma_free_value.
        -:  283: */
        -:  284:static ecma_value_t
    #####:  285:ecma_builtin_math_object_random (void)
        -:  286:{
    #####:  287:  const ecma_number_t rand_max = (ecma_number_t) RAND_MAX;
    #####:  288:  const ecma_number_t rand_max_min_1 = (ecma_number_t) (RAND_MAX - 1);
        -:  289:
    #####:  290:  return ecma_make_number_value (((ecma_number_t) rand ()) / rand_max * rand_max_min_1 / rand_max);
        -:  291:} /* ecma_builtin_math_object_random */
        -:  292:
        -:  293:/**
        -:  294: * Dispatcher for the built-in's routines.
        -:  295: *
        -:  296: * @return ecma value
        -:  297: *         Returned value must be freed with ecma_free_value.
        -:  298: */
        -:  299:ecma_value_t
    #####:  300:ecma_builtin_math_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  301:                                    ecma_value_t this_arg, /**< 'this' argument value */
        -:  302:                                    const ecma_value_t arguments_list[], /**< list of arguments
        -:  303:                                                                          *   passed to routine */
        -:  304:                                    uint32_t arguments_number) /**< length of arguments' list */
        -:  305:{
        -:  306:  JERRY_UNUSED (this_arg);
        -:  307:
    #####:  308:  if (builtin_routine_id <= ECMA_MATH_OBJECT_POW)
        -:  309:  {
    #####:  310:    ecma_number_t x = ecma_number_make_nan ();
    #####:  311:    ecma_number_t y = ecma_number_make_nan ();
        -:  312:
    #####:  313:    if (arguments_number >= 1)
        -:  314:    {
    #####:  315:      ecma_value_t value = ecma_op_to_number (arguments_list[0], &x);
        -:  316:
    #####:  317:      if (ECMA_IS_VALUE_ERROR (value))
        -:  318:      {
    #####:  319:        return value;
        -:  320:      }
        -:  321:    }
        -:  322:
    #####:  323:    if (builtin_routine_id >= ECMA_MATH_OBJECT_ATAN2 && arguments_number >= 2)
        -:  324:    {
    #####:  325:      if (ecma_is_value_number (arguments_list[1]))
        -:  326:      {
    #####:  327:        y = ecma_get_number_from_value (arguments_list[1]);
        -:  328:      }
        -:  329:      else
        -:  330:      {
    #####:  331:        ecma_value_t value = ecma_op_to_number (arguments_list[1], &y);
        -:  332:
    #####:  333:        if (ECMA_IS_VALUE_ERROR (value))
        -:  334:        {
    #####:  335:          return value;
        -:  336:        }
        -:  337:      }
        -:  338:    }
        -:  339:
    #####:  340:    switch (builtin_routine_id)
        -:  341:    {
    #####:  342:      case ECMA_MATH_OBJECT_ABS:
        -:  343:      {
    #####:  344:        x = DOUBLE_TO_ECMA_NUMBER_T (fabs (x));
    #####:  345:        break;
        -:  346:      }
    #####:  347:      case ECMA_MATH_OBJECT_ACOS:
        -:  348:      {
    #####:  349:        x = DOUBLE_TO_ECMA_NUMBER_T (acos (x));
    #####:  350:        break;
        -:  351:      }
    #####:  352:      case ECMA_MATH_OBJECT_ASIN:
        -:  353:      {
    #####:  354:        x = DOUBLE_TO_ECMA_NUMBER_T (asin (x));
    #####:  355:        break;
        -:  356:      }
    #####:  357:      case ECMA_MATH_OBJECT_ATAN:
        -:  358:      {
    #####:  359:        x = DOUBLE_TO_ECMA_NUMBER_T (atan (x));
    #####:  360:        break;
        -:  361:      }
    #####:  362:      case ECMA_MATH_OBJECT_CEIL:
        -:  363:      {
    #####:  364:        x = DOUBLE_TO_ECMA_NUMBER_T (ceil (x));
    #####:  365:        break;
        -:  366:      }
    #####:  367:      case ECMA_MATH_OBJECT_COS:
        -:  368:      {
    #####:  369:        x = DOUBLE_TO_ECMA_NUMBER_T (cos (x));
    #####:  370:        break;
        -:  371:      }
    #####:  372:      case ECMA_MATH_OBJECT_EXP:
        -:  373:      {
    #####:  374:        x = DOUBLE_TO_ECMA_NUMBER_T (exp (x));
    #####:  375:        break;
        -:  376:      }
    #####:  377:      case ECMA_MATH_OBJECT_FLOOR:
        -:  378:      {
    #####:  379:        x = DOUBLE_TO_ECMA_NUMBER_T (floor (x));
    #####:  380:        break;
        -:  381:      }
    #####:  382:      case ECMA_MATH_OBJECT_LOG:
        -:  383:      {
    #####:  384:        x = DOUBLE_TO_ECMA_NUMBER_T (log (x));
    #####:  385:        break;
        -:  386:      }
        -:  387:#if JERRY_ESNEXT
    #####:  388:      case ECMA_MATH_OBJECT_TRUNC:
        -:  389:      {
    #####:  390:        x = ecma_builtin_math_object_trunc (x);
    #####:  391:        break;
        -:  392:      }
    #####:  393:      case ECMA_MATH_OBJECT_SIGN:
        -:  394:      {
    #####:  395:        x = ecma_builtin_math_object_sign (x);
    #####:  396:        break;
        -:  397:      }
        -:  398:#endif /* JERRY_ESNEXT */
    #####:  399:      case ECMA_MATH_OBJECT_ROUND:
        -:  400:      {
    #####:  401:        if (ecma_number_is_nan (x) || ecma_number_is_zero (x) || ecma_number_is_infinity (x))
        -:  402:        {
        -:  403:          break;
        -:  404:        }
        -:  405:
    #####:  406:        ecma_number_t fraction = fmod (x, ECMA_NUMBER_ONE);
        -:  407:
    #####:  408:        if (ecma_number_is_zero (fraction))
        -:  409:        {
    #####:  410:          break;
        -:  411:        }
        -:  412:
    #####:  413:        if (ecma_number_is_negative (x))
        -:  414:        {
    #####:  415:          if (x >= -ECMA_NUMBER_HALF)
        -:  416:          {
    #####:  417:            x = -ECMA_NUMBER_ZERO;
    #####:  418:            break;
        -:  419:          }
        -:  420:
    #####:  421:          if (fraction < -ECMA_NUMBER_HALF)
        -:  422:          {
    #####:  423:            x -= ECMA_NUMBER_HALF;
        -:  424:          }
        -:  425:        }
    #####:  426:        else if (fraction >= ECMA_NUMBER_HALF)
        -:  427:        {
    #####:  428:          x += ECMA_NUMBER_HALF;
        -:  429:        }
        -:  430:
    #####:  431:        x = ecma_number_trunc (x);
    #####:  432:        break;
        -:  433:      }
    #####:  434:      case ECMA_MATH_OBJECT_SIN:
        -:  435:      {
    #####:  436:        x = DOUBLE_TO_ECMA_NUMBER_T (sin (x));
    #####:  437:        break;
        -:  438:      }
    #####:  439:      case ECMA_MATH_OBJECT_SQRT:
        -:  440:      {
    #####:  441:        x = DOUBLE_TO_ECMA_NUMBER_T (sqrt (x));
    #####:  442:        break;
        -:  443:      }
    #####:  444:      case ECMA_MATH_OBJECT_TAN:
        -:  445:      {
    #####:  446:        x = DOUBLE_TO_ECMA_NUMBER_T (tan (x));
    #####:  447:        break;
        -:  448:      }
    #####:  449:      case ECMA_MATH_OBJECT_ATAN2:
        -:  450:      {
    #####:  451:        x = DOUBLE_TO_ECMA_NUMBER_T (atan2 (x, y));
    #####:  452:        break;
        -:  453:      }
    #####:  454:      case ECMA_MATH_OBJECT_POW:
        -:  455:      {
    #####:  456:        x = ecma_number_pow (x, y);
    #####:  457:        break;
        -:  458:      }
        -:  459:#if JERRY_ESNEXT
    #####:  460:      case ECMA_MATH_OBJECT_ACOSH:
        -:  461:      {
    #####:  462:        x = DOUBLE_TO_ECMA_NUMBER_T (acosh (x));
    #####:  463:        break;
        -:  464:      }
    #####:  465:      case ECMA_MATH_OBJECT_ASINH:
        -:  466:      {
    #####:  467:        x = DOUBLE_TO_ECMA_NUMBER_T (asinh (x));
    #####:  468:        break;
        -:  469:      }
    #####:  470:      case ECMA_MATH_OBJECT_ATANH:
        -:  471:      {
    #####:  472:        x = DOUBLE_TO_ECMA_NUMBER_T (atanh (x));
    #####:  473:        break;
        -:  474:      }
    #####:  475:      case ECMA_MATH_OBJECT_CBRT:
        -:  476:      {
    #####:  477:        x = DOUBLE_TO_ECMA_NUMBER_T (cbrt (x));
    #####:  478:        break;
        -:  479:      }
    #####:  480:      case ECMA_MATH_OBJECT_COSH:
        -:  481:      {
    #####:  482:        x = DOUBLE_TO_ECMA_NUMBER_T (cosh (x));
    #####:  483:        break;
        -:  484:      }
    #####:  485:      case ECMA_MATH_OBJECT_EXPM1:
        -:  486:      {
    #####:  487:        x = DOUBLE_TO_ECMA_NUMBER_T (expm1 (x));
    #####:  488:        break;
        -:  489:      }
    #####:  490:      case ECMA_MATH_OBJECT_LOG1P:
        -:  491:      {
    #####:  492:        x = DOUBLE_TO_ECMA_NUMBER_T (log1p (x));
    #####:  493:        break;
        -:  494:      }
    #####:  495:      case ECMA_MATH_OBJECT_LOG10:
        -:  496:      {
    #####:  497:        x = DOUBLE_TO_ECMA_NUMBER_T (log10 (x));
    #####:  498:        break;
        -:  499:      }
    #####:  500:      case ECMA_MATH_OBJECT_LOG2:
        -:  501:      {
    #####:  502:        x = DOUBLE_TO_ECMA_NUMBER_T (log2 (x));
    #####:  503:        break;
        -:  504:      }
    #####:  505:      case ECMA_MATH_OBJECT_SINH:
        -:  506:      {
    #####:  507:        x = DOUBLE_TO_ECMA_NUMBER_T (sinh (x));
    #####:  508:        break;
        -:  509:      }
    #####:  510:      case ECMA_MATH_OBJECT_TANH:
        -:  511:      {
    #####:  512:        x = DOUBLE_TO_ECMA_NUMBER_T (tanh (x));
    #####:  513:        break;
        -:  514:      }
    #####:  515:      case ECMA_MATH_OBJECT_CLZ32:
        -:  516:      {
    #####:  517:        uint32_t n = ecma_number_to_uint32 (x);
        -:  518:#if defined(__GNUC__) || defined(__clang__)
    #####:  519:        x = n ? __builtin_clz (n) : 32;
        -:  520:#elif defined(_WIN32)
        -:  521:        unsigned long ret;
        -:  522:        x = _BitScanReverse (&ret, n) ? 31 - ret : 32;
        -:  523:#else /* !(defined(__GNUC__) || defined(__clang__) || defined(_WIN32)) */
        -:  524:        x = 32;
        -:  525:        for (int i = 31; i >= 0; i--)
        -:  526:        {
        -:  527:          if (n >> i)
        -:  528:          {
        -:  529:            x = 31 - i;
        -:  530:            break;
        -:  531:          }
        -:  532:        }
        -:  533:#endif /* defined (__GNUC__) || defined (__clang__) */
    #####:  534:        break;
        -:  535:      }
    #####:  536:      case ECMA_MATH_OBJECT_FROUND:
        -:  537:      {
    #####:  538:        x = (float) x;
    #####:  539:        break;
        -:  540:      }
    #####:  541:      case ECMA_MATH_OBJECT_IMUL:
        -:  542:      {
    #####:  543:        x = (int32_t) (ecma_number_to_uint32 (x) * ecma_number_to_uint32 (y));
    #####:  544:        break;
        -:  545:      }
        -:  546:#endif /* JERRY_ESNEXT */
        -:  547:    }
    #####:  548:    return ecma_make_number_value (x);
        -:  549:  } /* if (builtin_routine_id <= ECMA_MATH_OBJECT_POW) */
        -:  550:
    #####:  551:  if (builtin_routine_id <= ECMA_MATH_OBJECT_MIN)
        -:  552:  {
    #####:  553:    return ecma_builtin_math_object_max_min (builtin_routine_id == ECMA_MATH_OBJECT_MAX,
        -:  554:                                             arguments_list,
        -:  555:                                             arguments_number);
        -:  556:  }
        -:  557:
        -:  558:#if JERRY_ESNEXT
    #####:  559:  if (builtin_routine_id == ECMA_MATH_OBJECT_HYPOT)
        -:  560:  {
    #####:  561:    return ecma_builtin_math_object_hypot (arguments_list, arguments_number);
        -:  562:  }
        -:  563:#endif /* JERRY_ESNEXT */
        -:  564:
    #####:  565:  JERRY_ASSERT (builtin_routine_id == ECMA_MATH_OBJECT_RANDOM);
        -:  566:
    #####:  567:  return ecma_builtin_math_object_random ();
        -:  568:} /* ecma_builtin_math_dispatch_routine */
        -:  569:
        -:  570:/**
        -:  571: * @}
        -:  572: * @}
        -:  573: * @}
        -:  574: */
        -:  575:
        -:  576:#endif /* JERRY_BUILTIN_MATH */
