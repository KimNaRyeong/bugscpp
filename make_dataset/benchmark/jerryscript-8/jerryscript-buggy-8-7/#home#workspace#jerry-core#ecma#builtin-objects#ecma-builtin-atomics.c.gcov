        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-atomics.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-atomics-object.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-globals.h"
        -:   19:#include "ecma-helpers.h"
        -:   20:
        -:   21:#include "jrt.h"
        -:   22:
        -:   23:#if JERRY_BUILTIN_ATOMICS
        -:   24:
        -:   25:#define ECMA_BUILTINS_INTERNAL
        -:   26:
        -:   27:#include "ecma-builtins-internal.h"
        -:   28:
        -:   29:/**
        -:   30: * This object has a custom dispatch function.
        -:   31: */
        -:   32:#define BUILTIN_CUSTOM_DISPATCH
        -:   33:
        -:   34:/**
        -:   35: * List of built-in routine identifiers.
        -:   36: */
        -:   37:enum
        -:   38:{
        -:   39:  ECMA_ATOMICS_ROUTINE_START = 0, /**< Special value, should be ignored */
        -:   40:  ECMA_ATOMICS_ROUTINE_ADD, /**< Atomics add routine */
        -:   41:  ECMA_ATOMICS_ROUTINE_AND, /**< Atomics and routine */
        -:   42:  ECMA_ATOMICS_ROUTINE_COMPAREEXCHANGE, /**< Atomics compare exchange routine */
        -:   43:  ECMA_ATOMICS_ROUTINE_EXCHANGE, /**< Atomics exchange routine */
        -:   44:  ECMA_ATOMICS_ROUTINE_ISLOCKFREE, /**< Atomics is lock free routine */
        -:   45:  ECMA_ATOMICS_ROUTINE_LOAD, /**< Atomics load routine */
        -:   46:  ECMA_ATOMICS_ROUTINE_OR, /**< Atomics or routine */
        -:   47:  ECMA_ATOMICS_ROUTINE_STORE, /**< Atomics store routine */
        -:   48:  ECMA_ATOMICS_ROUTINE_SUB, /**< Atomics sub routine */
        -:   49:  ECMA_ATOMICS_ROUTINE_WAIT, /**< Atomics wait routine */
        -:   50:  ECMA_ATOMICS_ROUTINE_NOTIFY, /**< Atomics notify routine */
        -:   51:  ECMA_ATOMICS_ROUTINE_XOR, /**< Atomics xor routine */
        -:   52:};
        -:   53:
        -:   54:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-atomics.inc.h"
        -:   55:#define BUILTIN_UNDERSCORED_ID  atomics
        -:   56:
        -:   57:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   58:
        -:   59:/** \addtogroup ecma ECMA
        -:   60: * @{
        -:   61: *
        -:   62: * \addtogroup ecmabuiltins
        -:   63: * @{
        -:   64: *
        -:   65: * \addtogroup atomics ECMA Atomics object built-in
        -:   66: * @{
        -:   67: */
        -:   68:
        -:   69:/**
        -:   70: * The Atomics object's 'compareExchange' routine
        -:   71: *
        -:   72: * See also: ES11 24.4.4
        -:   73: *
        -:   74: * @return ecma value
        -:   75: *         Returned value must be freed with ecma_free_value.
        -:   76: */
        -:   77:static ecma_value_t
    #####:   78:ecma_builtin_atomics_compare_exchange (ecma_value_t typedarray, /**< typedArray argument */
        -:   79:                                       ecma_value_t index, /**< index argument */
        -:   80:                                       ecma_value_t expected_value, /**< expectedValue argument */
        -:   81:                                       ecma_value_t replacement_value) /**< replacementValue argument*/
        -:   82:{
        -:   83:  JERRY_UNUSED (typedarray);
        -:   84:  JERRY_UNUSED (index);
        -:   85:  JERRY_UNUSED (expected_value);
        -:   86:  JERRY_UNUSED (replacement_value);
        -:   87:
    #####:   88:  return ecma_make_uint32_value (0);
        -:   89:} /* ecma_builtin_atomics_compare_exchange */
        -:   90:
        -:   91:/**
        -:   92: * The Atomics object's 'isLockFree' routine
        -:   93: *
        -:   94: * See also: ES11 24.4.6
        -:   95: *
        -:   96: * @return ecma value
        -:   97: *         Returned value must be freed with ecma_free_value.
        -:   98: */
        -:   99:static ecma_value_t
    #####:  100:ecma_builtin_atomics_is_lock_free (ecma_value_t size) /**< size argument */
        -:  101:{
        -:  102:  JERRY_UNUSED (size);
        -:  103:
    #####:  104:  return ECMA_VALUE_FALSE;
        -:  105:} /* ecma_builtin_atomics_is_lock_free */
        -:  106:
        -:  107:/**
        -:  108: * The Atomics object's 'store' routine
        -:  109: *
        -:  110: * See also: ES11 24.4.9
        -:  111: *
        -:  112: * @return ecma value
        -:  113: *         Returned value must be freed with ecma_free_value.
        -:  114: */
        -:  115:static ecma_value_t
    #####:  116:ecma_builtin_atomics_store (ecma_value_t typedarray, /**< typedArray argument */
        -:  117:                            ecma_value_t index, /**< index argument */
        -:  118:                            ecma_value_t value) /**< value argument */
        -:  119:{
        -:  120:  JERRY_UNUSED (typedarray);
        -:  121:  JERRY_UNUSED (index);
        -:  122:  JERRY_UNUSED (value);
        -:  123:
    #####:  124:  return ecma_make_uint32_value (0);
        -:  125:} /* ecma_builtin_atomics_store */
        -:  126:
        -:  127:/**
        -:  128: * The Atomics object's 'wait' routine
        -:  129: *
        -:  130: * See also: ES11 24.4.11
        -:  131: *
        -:  132: * @return ecma value
        -:  133: *         Returned value must be freed with ecma_free_value.
        -:  134: */
        -:  135:static ecma_value_t
    #####:  136:ecma_builtin_atomics_wait (ecma_value_t typedarray, /**< typedArray argument */
        -:  137:                           ecma_value_t index, /**< index argument */
        -:  138:                           ecma_value_t value, /**< value argument */
        -:  139:                           ecma_value_t timeout) /**< timeout argument */
        -:  140:{
        -:  141:  JERRY_UNUSED (typedarray);
        -:  142:  JERRY_UNUSED (index);
        -:  143:  JERRY_UNUSED (value);
        -:  144:  JERRY_UNUSED (timeout);
        -:  145:
    #####:  146:  return ecma_make_uint32_value (0);
        -:  147:} /* ecma_builtin_atomics_wait */
        -:  148:
        -:  149:/**
        -:  150: * The Atomics object's 'notify' routine
        -:  151: *
        -:  152: * See also: ES11 24.4.12
        -:  153: *
        -:  154: * @return ecma value
        -:  155: *         Returned value must be freed with ecma_free_value.
        -:  156: */
        -:  157:static ecma_value_t
    #####:  158:ecma_builtin_atomics_notify (ecma_value_t typedarray, /**< typedArray argument */
        -:  159:                             ecma_value_t index, /**< index argument */
        -:  160:                             ecma_value_t count) /**< count argument */
        -:  161:{
        -:  162:  JERRY_UNUSED (typedarray);
        -:  163:  JERRY_UNUSED (index);
        -:  164:  JERRY_UNUSED (count);
        -:  165:
    #####:  166:  return ecma_make_uint32_value (0);
        -:  167:} /* ecma_builtin_atomics_notify */
        -:  168:
        -:  169:/**
        -:  170: * Dispatcher of the built-in's routines
        -:  171: *
        -:  172: * @return ecma value
        -:  173: *         Returned value must be freed with ecma_free_value.
        -:  174: */
        -:  175:ecma_value_t
    #####:  176:ecma_builtin_atomics_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  177:                                       ecma_value_t this_arg, /**< 'this' argument value */
        -:  178:                                       const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  179:                                                                               *   passed to routine */
        -:  180:                                       uint32_t arguments_number) /**< length of arguments' list */
        -:  181:{
        -:  182:  JERRY_UNUSED (this_arg);
    #####:  183:  ecma_value_t arg1 = arguments_list_p[0];
    #####:  184:  ecma_value_t arg2 = arguments_list_p[1];
    #####:  185:  ecma_value_t arg3 = arguments_list_p[2];
    #####:  186:  ecma_value_t arg4 = (arguments_number > 3) ? arguments_list_p[3] : ECMA_VALUE_UNDEFINED;
        -:  187:
        -:  188:  ecma_atomics_op_t type;
        -:  189:
    #####:  190:  switch (builtin_routine_id)
        -:  191:  {
    #####:  192:    case ECMA_ATOMICS_ROUTINE_ADD:
        -:  193:    {
    #####:  194:      type = ECMA_ATOMICS_ADD;
    #####:  195:      break;
        -:  196:    }
    #####:  197:    case ECMA_ATOMICS_ROUTINE_AND:
        -:  198:    {
    #####:  199:      type = ECMA_ATOMICS_AND;
    #####:  200:      break;
        -:  201:    }
    #####:  202:    case ECMA_ATOMICS_ROUTINE_COMPAREEXCHANGE:
        -:  203:    {
    #####:  204:      return ecma_builtin_atomics_compare_exchange (arg1, arg2, arg3, arg4);
        -:  205:    }
    #####:  206:    case ECMA_ATOMICS_ROUTINE_EXCHANGE:
        -:  207:    {
    #####:  208:      type = ECMA_ATOMICS_EXCHANGE;
    #####:  209:      break;
        -:  210:    }
    #####:  211:    case ECMA_ATOMICS_ROUTINE_ISLOCKFREE:
        -:  212:    {
    #####:  213:      return ecma_builtin_atomics_is_lock_free (arg1);
        -:  214:    }
    #####:  215:    case ECMA_ATOMICS_ROUTINE_LOAD:
        -:  216:    {
    #####:  217:      return ecma_atomic_load (arg1, arg2);
        -:  218:    }
    #####:  219:    case ECMA_ATOMICS_ROUTINE_OR:
        -:  220:    {
    #####:  221:      type = ECMA_ATOMICS_OR;
    #####:  222:      break;
        -:  223:    }
    #####:  224:    case ECMA_ATOMICS_ROUTINE_STORE:
        -:  225:    {
    #####:  226:      return ecma_builtin_atomics_store (arg1, arg2, arg3);
        -:  227:    }
    #####:  228:    case ECMA_ATOMICS_ROUTINE_SUB:
        -:  229:    {
    #####:  230:      type = ECMA_ATOMICS_SUBTRACT;
    #####:  231:      break;
        -:  232:    }
    #####:  233:    case ECMA_ATOMICS_ROUTINE_WAIT:
        -:  234:    {
    #####:  235:      return ecma_builtin_atomics_wait (arg1, arg2, arg3, arg4);
        -:  236:    }
    #####:  237:    case ECMA_ATOMICS_ROUTINE_NOTIFY:
        -:  238:    {
    #####:  239:      return ecma_builtin_atomics_notify (arg1, arg2, arg3);
        -:  240:    }
    #####:  241:    case ECMA_ATOMICS_ROUTINE_XOR:
        -:  242:    {
    #####:  243:      type = ECMA_ATOMICS_XOR;
    #####:  244:      break;
        -:  245:    }
    #####:  246:    default:
        -:  247:    {
    #####:  248:      JERRY_UNREACHABLE ();
        -:  249:    }
        -:  250:  }
    #####:  251:  return ecma_atomic_read_modify_write (arg1, arg2, arg3, type);
        -:  252:} /* ecma_builtin_atomics_dispatch_routine */
        -:  253:
        -:  254:/**
        -:  255: * @}
        -:  256: * @}
        -:  257: * @}
        -:  258: */
        -:  259:
        -:  260:#endif /* JERRY_BUILTIN_ATOMICS */
