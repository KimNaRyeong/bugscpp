        -:    0:Source:/home/workspace/jerry-main/main-options.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "main-options.h"
        -:   17:
        -:   18:#include <stdbool.h>
        -:   19:#include <stdio.h>
        -:   20:#include <stdlib.h>
        -:   21:
        -:   22:#include "jerryscript-port-default.h"
        -:   23:#include "jerryscript-port.h"
        -:   24:
        -:   25:#include "cli.h"
        -:   26:#include "main-utils.h"
        -:   27:
        -:   28:/**
        -:   29: * Command line option IDs
        -:   30: */
        -:   31:typedef enum
        -:   32:{
        -:   33:  OPT_HELP,
        -:   34:  OPT_VERSION,
        -:   35:  OPT_MEM_STATS,
        -:   36:  OPT_TEST262_OBJECT,
        -:   37:  OPT_PARSE_ONLY,
        -:   38:  OPT_SHOW_OP,
        -:   39:  OPT_SHOW_RE_OP,
        -:   40:  OPT_DEBUG_SERVER,
        -:   41:  OPT_DEBUG_PORT,
        -:   42:  OPT_DEBUG_CHANNEL,
        -:   43:  OPT_DEBUG_PROTOCOL,
        -:   44:  OPT_DEBUG_SERIAL_CONFIG,
        -:   45:  OPT_DEBUGGER_WAIT_SOURCE,
        -:   46:  OPT_EXEC_SNAP,
        -:   47:  OPT_EXEC_SNAP_FUNC,
        -:   48:  OPT_MODULE,
        -:   49:  OPT_LOG_LEVEL,
        -:   50:  OPT_NO_PROMPT,
        -:   51:  OPT_CALL_ON_EXIT,
        -:   52:  OPT_USE_STDIN,
        -:   53:} main_opt_id_t;
        -:   54:
        -:   55:/**
        -:   56: * Command line options
        -:   57: */
        -:   58:static const cli_opt_t main_opts[] = {
        -:   59:  CLI_OPT_DEF (.id = OPT_HELP, .opt = "h", .longopt = "help", .help = "print this help and exit"),
        -:   60:  CLI_OPT_DEF (.id = OPT_VERSION, .opt = "v", .longopt = "version", .help = "print tool and library version and exit"),
        -:   61:  CLI_OPT_DEF (.id = OPT_MEM_STATS, .longopt = "mem-stats", .help = "dump memory statistics"),
        -:   62:  CLI_OPT_DEF (.id = OPT_TEST262_OBJECT, .longopt = "test262-object", .help = "create test262 object"),
        -:   63:  CLI_OPT_DEF (.id = OPT_PARSE_ONLY, .longopt = "parse-only", .help = "don't execute JS input"),
        -:   64:  CLI_OPT_DEF (.id = OPT_SHOW_OP, .longopt = "show-opcodes", .help = "dump parser byte-code"),
        -:   65:  CLI_OPT_DEF (.id = OPT_SHOW_RE_OP, .longopt = "show-regexp-opcodes", .help = "dump regexp byte-code"),
        -:   66:  CLI_OPT_DEF (.id = OPT_DEBUG_SERVER,
        -:   67:               .longopt = "start-debug-server",
        -:   68:               .help = "start debug server and wait for a connecting client"),
        -:   69:  CLI_OPT_DEF (.id = OPT_DEBUG_PORT,
        -:   70:               .longopt = "debug-port",
        -:   71:               .meta = "NUM",
        -:   72:               .help = "debug server port (default: 5001)"),
        -:   73:  CLI_OPT_DEF (.id = OPT_DEBUG_CHANNEL,
        -:   74:               .longopt = "debug-channel",
        -:   75:               .meta = "[websocket|rawpacket]",
        -:   76:               .help = "Specify the debugger transmission channel (default: websocket)"),
        -:   77:  CLI_OPT_DEF (.id = OPT_DEBUG_PROTOCOL,
        -:   78:               .longopt = "debug-protocol",
        -:   79:               .meta = "PROTOCOL",
        -:   80:               .help = "Specify the transmission protocol over the communication channel (tcp|serial, default: tcp)"),
        -:   81:  CLI_OPT_DEF (.id = OPT_DEBUG_SERIAL_CONFIG,
        -:   82:               .longopt = "serial-config",
        -:   83:               .meta = "OPTIONS_STRING",
        -:   84:               .help = "Configure parameters for serial port (default: /dev/ttyS0,115200,8,N,1)"),
        -:   85:  CLI_OPT_DEF (.id = OPT_DEBUGGER_WAIT_SOURCE,
        -:   86:               .longopt = "debugger-wait-source",
        -:   87:               .help = "wait for an executable source from the client"),
        -:   88:  CLI_OPT_DEF (.id = OPT_EXEC_SNAP,
        -:   89:               .longopt = "exec-snapshot",
        -:   90:               .meta = "FILE",
        -:   91:               .help = "execute input snapshot file(s)"),
        -:   92:  CLI_OPT_DEF (.id = OPT_EXEC_SNAP_FUNC,
        -:   93:               .longopt = "exec-snapshot-func",
        -:   94:               .meta = "FILE NUM",
        -:   95:               .help = "execute specific function from input snapshot file(s)"),
        -:   96:  CLI_OPT_DEF (.id = OPT_MODULE, .opt = "m", .longopt = "module", .meta = "FILE", .help = "execute module file"),
        -:   97:  CLI_OPT_DEF (.id = OPT_LOG_LEVEL, .longopt = "log-level", .meta = "NUM", .help = "set log level (0-3)"),
        -:   98:  CLI_OPT_DEF (.id = OPT_NO_PROMPT, .longopt = "no-prompt", .help = "don't print prompt in REPL mode"),
        -:   99:  CLI_OPT_DEF (.id = OPT_CALL_ON_EXIT,
        -:  100:               .longopt = "call-on-exit",
        -:  101:               .meta = "STRING",
        -:  102:               .help = "invoke the specified function when the process is just about to exit"),
        -:  103:  CLI_OPT_DEF (.id = OPT_USE_STDIN, .opt = "", .help = "read from standard input"),
        -:  104:  CLI_OPT_DEF (.id = CLI_OPT_DEFAULT, .meta = "FILE", .help = "input JS file(s)")
        -:  105:};
        -:  106:
        -:  107:/**
        -:  108: * Check whether a usage-related condition holds. If not, print an error
        -:  109: * message, print the usage, and terminate the application.
        -:  110: */
        -:  111:static void
    #####:  112:check_usage (bool condition, /**< the condition that must hold */
        -:  113:             const char *name, /**< name of the application (argv[0]) */
        -:  114:             const char *msg, /**< error message to print if condition does not hold */
        -:  115:             const char *opt) /**< optional part of the error message */
        -:  116:{
    #####:  117:  if (!condition)
        -:  118:  {
    #####:  119:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "%s: %s%s\n", name, msg, opt != NULL ? opt : "");
    #####:  120:    exit (JERRY_STANDALONE_EXIT_CODE_FAIL);
        -:  121:  }
    #####:  122:} /* check_usage */
        -:  123:
        -:  124:/**
        -:  125: * Check whether JerryScript has a requested feature enabled or not. If not,
        -:  126: * print a warning message.
        -:  127: *
        -:  128: * @return the status of the feature.
        -:  129: */
        -:  130:static bool
    #####:  131:check_feature (jerry_feature_t feature, /**< feature to check */
        -:  132:               const char *option) /**< command line option that triggered this check */
        -:  133:{
    #####:  134:  if (!jerry_feature_enabled (feature))
        -:  135:  {
    #####:  136:    jerry_port_default_set_log_level (JERRY_LOG_LEVEL_WARNING);
    #####:  137:    jerry_port_log (JERRY_LOG_LEVEL_WARNING, "Ignoring '%s' option because this feature is disabled!\n", option);
    #####:  138:    return false;
        -:  139:  }
    #####:  140:  return true;
        -:  141:} /* check_feature */
        -:  142:
        -:  143:/**
        -:  144: * parse input arguments
        -:  145: */
        -:  146:void
        1:  147:main_parse_args (int argc, /**< argc */
        -:  148:                 char **argv, /**< argv */
        -:  149:                 main_args_t *arguments_p) /**< [in/out] arguments reference */
        -:  150:{
        1:  151:  arguments_p->source_count = 0;
        -:  152:
        1:  153:  arguments_p->debug_channel = "websocket";
        1:  154:  arguments_p->debug_protocol = "tcp";
        1:  155:  arguments_p->debug_serial_config = "/dev/ttyS0,115200,8,N,1";
        1:  156:  arguments_p->debug_port = 5001;
        -:  157:
        1:  158:  arguments_p->exit_cb_name_p = NULL;
        1:  159:  arguments_p->init_flags = JERRY_INIT_EMPTY;
        1:  160:  arguments_p->option_flags = OPT_FLAG_EMPTY;
        -:  161:
        1:  162:  cli_state_t cli_state = cli_init (main_opts, argc, argv);
        2:  163:  for (int id = cli_consume_option (&cli_state); id != CLI_OPT_END; id = cli_consume_option (&cli_state))
        -:  164:  {
        1:  165:    switch (id)
        -:  166:    {
    #####:  167:      case OPT_HELP:
        -:  168:      {
    #####:  169:        cli_help (argv[0], NULL, main_opts);
    #####:  170:        exit (JERRY_STANDALONE_EXIT_CODE_OK);
        -:  171:
        -:  172:        break;
        -:  173:      }
    #####:  174:      case OPT_VERSION:
        -:  175:      {
    #####:  176:        printf ("Version: %d.%d.%d%s\n",
        -:  177:                JERRY_API_MAJOR_VERSION,
        -:  178:                JERRY_API_MINOR_VERSION,
        -:  179:                JERRY_API_PATCH_VERSION,
        -:  180:                JERRY_COMMIT_HASH);
    #####:  181:        exit (JERRY_STANDALONE_EXIT_CODE_OK);
        -:  182:
        -:  183:        break;
        -:  184:      }
    #####:  185:      case OPT_MEM_STATS:
        -:  186:      {
    #####:  187:        if (check_feature (JERRY_FEATURE_HEAP_STATS, cli_state.arg))
        -:  188:        {
    #####:  189:          jerry_port_default_set_log_level (JERRY_LOG_LEVEL_DEBUG);
    #####:  190:          arguments_p->init_flags |= JERRY_INIT_MEM_STATS;
        -:  191:        }
    #####:  192:        break;
        -:  193:      }
    #####:  194:      case OPT_TEST262_OBJECT:
        -:  195:      {
    #####:  196:        arguments_p->option_flags |= OPT_FLAG_TEST262_OBJECT;
    #####:  197:        break;
        -:  198:      }
    #####:  199:      case OPT_PARSE_ONLY:
        -:  200:      {
    #####:  201:        arguments_p->option_flags |= OPT_FLAG_PARSE_ONLY;
    #####:  202:        break;
        -:  203:      }
    #####:  204:      case OPT_SHOW_OP:
        -:  205:      {
    #####:  206:        if (check_feature (JERRY_FEATURE_PARSER_DUMP, cli_state.arg))
        -:  207:        {
    #####:  208:          jerry_port_default_set_log_level (JERRY_LOG_LEVEL_DEBUG);
    #####:  209:          arguments_p->init_flags |= JERRY_INIT_SHOW_OPCODES;
        -:  210:        }
    #####:  211:        break;
        -:  212:      }
    #####:  213:      case OPT_CALL_ON_EXIT:
        -:  214:      {
    #####:  215:        arguments_p->exit_cb_name_p = cli_consume_string (&cli_state);
    #####:  216:        break;
        -:  217:      }
    #####:  218:      case OPT_SHOW_RE_OP:
        -:  219:      {
    #####:  220:        if (check_feature (JERRY_FEATURE_REGEXP_DUMP, cli_state.arg))
        -:  221:        {
    #####:  222:          jerry_port_default_set_log_level (JERRY_LOG_LEVEL_DEBUG);
    #####:  223:          arguments_p->init_flags |= JERRY_INIT_SHOW_REGEXP_OPCODES;
        -:  224:        }
    #####:  225:        break;
        -:  226:      }
    #####:  227:      case OPT_DEBUG_SERVER:
        -:  228:      {
    #####:  229:        if (check_feature (JERRY_FEATURE_DEBUGGER, cli_state.arg))
        -:  230:        {
    #####:  231:          arguments_p->option_flags |= OPT_FLAG_DEBUG_SERVER;
        -:  232:        }
    #####:  233:        break;
        -:  234:      }
    #####:  235:      case OPT_DEBUG_PORT:
        -:  236:      {
    #####:  237:        if (check_feature (JERRY_FEATURE_DEBUGGER, cli_state.arg))
        -:  238:        {
    #####:  239:          arguments_p->debug_port = (uint16_t) cli_consume_int (&cli_state);
        -:  240:        }
    #####:  241:        break;
        -:  242:      }
    #####:  243:      case OPT_DEBUG_CHANNEL:
        -:  244:      {
    #####:  245:        if (check_feature (JERRY_FEATURE_DEBUGGER, cli_state.arg))
        -:  246:        {
    #####:  247:          const char *debug_channel = cli_consume_string (&cli_state);
    #####:  248:          check_usage (!strcmp (debug_channel, "websocket") || !strcmp (debug_channel, "rawpacket"),
        -:  249:                       argv[0],
        -:  250:                       "Error: invalid value for --debug-channel: ",
        -:  251:                       cli_state.arg);
        -:  252:
    #####:  253:          arguments_p->debug_channel = debug_channel;
        -:  254:        }
    #####:  255:        break;
        -:  256:      }
    #####:  257:      case OPT_DEBUG_PROTOCOL:
        -:  258:      {
    #####:  259:        if (check_feature (JERRY_FEATURE_DEBUGGER, cli_state.arg))
        -:  260:        {
    #####:  261:          const char *debug_protocol = cli_consume_string (&cli_state);
    #####:  262:          check_usage (!strcmp (debug_protocol, "tcp") || !strcmp (debug_protocol, "serial"),
        -:  263:                       argv[0],
        -:  264:                       "Error: invalid value for --debug-protocol: ",
        -:  265:                       cli_state.arg);
        -:  266:
    #####:  267:          arguments_p->debug_protocol = debug_protocol;
        -:  268:        }
    #####:  269:        break;
        -:  270:      }
    #####:  271:      case OPT_DEBUG_SERIAL_CONFIG:
        -:  272:      {
    #####:  273:        if (check_feature (JERRY_FEATURE_DEBUGGER, cli_state.arg))
        -:  274:        {
    #####:  275:          arguments_p->debug_serial_config = cli_consume_string (&cli_state);
        -:  276:        }
    #####:  277:        break;
        -:  278:      }
    #####:  279:      case OPT_DEBUGGER_WAIT_SOURCE:
        -:  280:      {
    #####:  281:        if (check_feature (JERRY_FEATURE_DEBUGGER, cli_state.arg))
        -:  282:        {
    #####:  283:          arguments_p->option_flags |= OPT_FLAG_WAIT_SOURCE;
        -:  284:        }
    #####:  285:        break;
        -:  286:      }
    #####:  287:      case OPT_EXEC_SNAP:
        -:  288:      {
    #####:  289:        const bool is_enabled = check_feature (JERRY_FEATURE_SNAPSHOT_EXEC, cli_state.arg);
    #####:  290:        const uint32_t path_index = cli_consume_path (&cli_state);
        -:  291:
    #####:  292:        if (is_enabled)
        -:  293:        {
    #####:  294:          main_source_t *source_p = arguments_p->sources_p + arguments_p->source_count;
    #####:  295:          arguments_p->source_count++;
        -:  296:
    #####:  297:          source_p->type = SOURCE_SNAPSHOT;
    #####:  298:          source_p->path_index = path_index;
    #####:  299:          source_p->snapshot_index = 0;
        -:  300:        }
        -:  301:
    #####:  302:        break;
        -:  303:      }
    #####:  304:      case OPT_EXEC_SNAP_FUNC:
        -:  305:      {
    #####:  306:        const bool is_enabled = check_feature (JERRY_FEATURE_SNAPSHOT_EXEC, cli_state.arg);
    #####:  307:        const uint32_t path_index = cli_consume_path (&cli_state);
    #####:  308:        const uint16_t snapshot_index = (uint16_t) cli_consume_int (&cli_state);
        -:  309:
    #####:  310:        if (is_enabled)
        -:  311:        {
    #####:  312:          main_source_t *source_p = arguments_p->sources_p + arguments_p->source_count;
    #####:  313:          arguments_p->source_count++;
        -:  314:
    #####:  315:          source_p->type = SOURCE_SNAPSHOT;
    #####:  316:          source_p->path_index = path_index;
    #####:  317:          source_p->snapshot_index = snapshot_index;
        -:  318:        }
        -:  319:
    #####:  320:        break;
        -:  321:      }
    #####:  322:      case OPT_MODULE:
        -:  323:      {
    #####:  324:        const uint32_t path_index = cli_consume_path (&cli_state);
        -:  325:
    #####:  326:        main_source_t *source_p = arguments_p->sources_p + arguments_p->source_count;
    #####:  327:        arguments_p->source_count++;
        -:  328:
    #####:  329:        source_p->type = SOURCE_MODULE;
    #####:  330:        source_p->path_index = path_index;
    #####:  331:        source_p->snapshot_index = 0;
        -:  332:
    #####:  333:        break;
        -:  334:      }
    #####:  335:      case OPT_LOG_LEVEL:
        -:  336:      {
    #####:  337:        long int log_level = cli_consume_int (&cli_state);
    #####:  338:        check_usage (log_level >= 0 && log_level <= 3,
        -:  339:                     argv[0],
        -:  340:                     "Error: invalid value for --log-level: ",
        -:  341:                     cli_state.arg);
        -:  342:
    #####:  343:        jerry_port_default_set_log_level ((jerry_log_level_t) log_level);
    #####:  344:        break;
        -:  345:      }
    #####:  346:      case OPT_NO_PROMPT:
        -:  347:      {
    #####:  348:        arguments_p->option_flags |= OPT_FLAG_NO_PROMPT;
    #####:  349:        break;
        -:  350:      }
    #####:  351:      case OPT_USE_STDIN:
        -:  352:      {
    #####:  353:        arguments_p->option_flags |= OPT_FLAG_USE_STDIN;
    #####:  354:        break;
        -:  355:      }
        1:  356:      case CLI_OPT_DEFAULT:
        -:  357:      {
        1:  358:        main_source_t *source_p = arguments_p->sources_p + arguments_p->source_count;
        1:  359:        arguments_p->source_count++;
        -:  360:
        1:  361:        source_p->type = SOURCE_SCRIPT;
        1:  362:        source_p->path_index = cli_consume_path (&cli_state);
        1:  363:        break;
        -:  364:      }
    #####:  365:      default:
        -:  366:      {
    #####:  367:        cli_state.error = "Internal error";
    #####:  368:        break;
        -:  369:      }
        -:  370:    }
        -:  371:  }
        -:  372:
        1:  373:  if (cli_state.error != NULL)
        -:  374:  {
    #####:  375:    if (cli_state.arg != NULL)
        -:  376:    {
    #####:  377:      jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Error: %s %s\n", cli_state.error, cli_state.arg);
        -:  378:    }
        -:  379:    else
        -:  380:    {
    #####:  381:      jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Error: %s\n", cli_state.error);
        -:  382:    }
        -:  383:
    #####:  384:    exit (JERRY_STANDALONE_EXIT_CODE_FAIL);
        -:  385:  }
        1:  386:} /* main_parse_args */
