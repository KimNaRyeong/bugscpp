        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-object.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtin-object.h"
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-array-object.h"
        -:   20:#include "ecma-builtin-helpers.h"
        -:   21:#include "ecma-builtins.h"
        -:   22:#include "ecma-conversion.h"
        -:   23:#include "ecma-exceptions.h"
        -:   24:#include "ecma-gc.h"
        -:   25:#include "ecma-globals.h"
        -:   26:#include "ecma-helpers.h"
        -:   27:#include "ecma-objects-general.h"
        -:   28:#include "ecma-objects.h"
        -:   29:#include "ecma-proxy-object.h"
        -:   30:
        -:   31:#include "jrt.h"
        -:   32:#if JERRY_ESNEXT
        -:   33:#include "ecma-function-object.h"
        -:   34:#include "ecma-iterator-object.h"
        -:   35:
        -:   36:#include "jcontext.h"
        -:   37:#endif /* JERRY_ESNEXT */
        -:   38:
        -:   39:#define ECMA_BUILTINS_INTERNAL
        -:   40:#include "ecma-builtins-internal.h"
        -:   41:
        -:   42:/**
        -:   43: * This object has a custom dispatch function.
        -:   44: */
        -:   45:#define BUILTIN_CUSTOM_DISPATCH
        -:   46:
        -:   47:/**
        -:   48: * List of built-in routine identifiers.
        -:   49: */
        -:   50:enum
        -:   51:{
        -:   52:  ECMA_OBJECT_ROUTINE_START = 0,
        -:   53:
        -:   54:  ECMA_OBJECT_ROUTINE_CREATE,
        -:   55:  ECMA_OBJECT_ROUTINE_IS,
        -:   56:  ECMA_OBJECT_ROUTINE_SET_PROTOTYPE_OF,
        -:   57:
        -:   58:  /* These should be in this order. */
        -:   59:  ECMA_OBJECT_ROUTINE_DEFINE_PROPERTY,
        -:   60:  ECMA_OBJECT_ROUTINE_DEFINE_PROPERTIES,
        -:   61:
        -:   62:  /* These should be in this order. */
        -:   63:  ECMA_OBJECT_ROUTINE_ASSIGN,
        -:   64:  ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_DESCRIPTOR,
        -:   65:  ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_DESCRIPTORS,
        -:   66:  ECMA_OBJECT_ROUTINE_HAS_OWN,
        -:   67:  ECMA_OBJECT_ROUTINE_GET_PROTOTYPE_OF,
        -:   68:  ECMA_OBJECT_ROUTINE_FROM_ENTRIES,
        -:   69:  ECMA_OBJECT_ROUTINE_KEYS,
        -:   70:  ECMA_OBJECT_ROUTINE_VALUES,
        -:   71:  ECMA_OBJECT_ROUTINE_ENTRIES,
        -:   72:
        -:   73:  /* These should be in this order. */
        -:   74:  ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_NAMES,
        -:   75:  ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_SYMBOLS,
        -:   76:
        -:   77:  /* These should be in this order. */
        -:   78:  ECMA_OBJECT_ROUTINE_FREEZE,
        -:   79:  ECMA_OBJECT_ROUTINE_PREVENT_EXTENSIONS,
        -:   80:  ECMA_OBJECT_ROUTINE_SEAL,
        -:   81:
        -:   82:  /* These should be in this order. */
        -:   83:  ECMA_OBJECT_ROUTINE_IS_EXTENSIBLE,
        -:   84:  ECMA_OBJECT_ROUTINE_IS_FROZEN,
        -:   85:  ECMA_OBJECT_ROUTINE_IS_SEALED,
        -:   86:};
        -:   87:
        -:   88:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-object.inc.h"
        -:   89:#define BUILTIN_UNDERSCORED_ID  object
        -:   90:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   91:
        -:   92:/** \addtogroup ecma ECMA
        -:   93: * @{
        -:   94: *
        -:   95: * \addtogroup ecmabuiltins
        -:   96: * @{
        -:   97: *
        -:   98: * \addtogroup object ECMA Object object built-in
        -:   99: * @{
        -:  100: */
        -:  101:
        -:  102:/**
        -:  103: * Handle calling [[Call]] of built-in Object object
        -:  104: *
        -:  105: * @return ecma value
        -:  106: */
        -:  107:ecma_value_t
    #####:  108:ecma_builtin_object_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  109:                                   uint32_t arguments_list_len) /**< number of arguments */
        -:  110:{
    #####:  111:  if (arguments_list_len == 0 || ecma_is_value_undefined (arguments_list_p[0])
    #####:  112:      || ecma_is_value_null (arguments_list_p[0]))
        -:  113:  {
    #####:  114:    return ecma_make_object_value (ecma_op_create_object_object_noarg ());
        -:  115:  }
        -:  116:
    #####:  117:  return ecma_op_to_object (arguments_list_p[0]);
        -:  118:} /* ecma_builtin_object_dispatch_call */
        -:  119:
        -:  120:/**
        -:  121: * Handle calling [[Construct]] of built-in Object object
        -:  122: *
        -:  123: * @return ecma value
        -:  124: */
        -:  125:ecma_value_t
    #####:  126:ecma_builtin_object_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  127:                                        uint32_t arguments_list_len) /**< number of arguments */
        -:  128:{
        -:  129:#if JERRY_ESNEXT
    #####:  130:  if (JERRY_CONTEXT (current_new_target_p) != ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT))
        -:  131:  {
    #####:  132:    ecma_object_t *prototype_obj_p =
    #####:  133:      ecma_op_get_prototype_from_constructor (JERRY_CONTEXT (current_new_target_p), ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
    #####:  134:    if (JERRY_UNLIKELY (prototype_obj_p == NULL))
        -:  135:    {
    #####:  136:      return ECMA_VALUE_ERROR;
        -:  137:    }
        -:  138:
    #####:  139:    ecma_object_t *object_p = ecma_create_object (prototype_obj_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####:  140:    ecma_deref_object (prototype_obj_p);
        -:  141:
    #####:  142:    return ecma_make_object_value (object_p);
        -:  143:  }
        -:  144:#endif /* JERRY_ESNEXT */
    #####:  145:  return ecma_builtin_object_dispatch_call (arguments_list_p, arguments_list_len);
        -:  146:} /* ecma_builtin_object_dispatch_construct */
        -:  147:
        -:  148:/**
        -:  149: * The Object object's 'getPrototypeOf' routine
        -:  150: *
        -:  151: * See also:
        -:  152: *          ECMA-262 v5, 15.2.3.2
        -:  153: *
        -:  154: * @return ecma value
        -:  155: *         Returned value must be freed with ecma_free_value.
        -:  156: */
        -:  157:ecma_value_t
    #####:  158:ecma_builtin_object_object_get_prototype_of (ecma_object_t *obj_p) /**< routine's argument */
        -:  159:{
        -:  160:#if JERRY_BUILTIN_PROXY
    #####:  161:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  162:  {
    #####:  163:    return ecma_proxy_object_get_prototype_of (obj_p);
        -:  164:  }
        -:  165:#endif /* JERRY_BUILTIN_PROXY */
        -:  166:
    #####:  167:  jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (obj_p);
        -:  168:
    #####:  169:  if (proto_cp != JMEM_CP_NULL)
        -:  170:  {
    #####:  171:    ecma_object_t *prototype_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);
    #####:  172:    ecma_ref_object (prototype_p);
    #####:  173:    return ecma_make_object_value (prototype_p);
        -:  174:  }
        -:  175:
    #####:  176:  return ECMA_VALUE_NULL;
        -:  177:} /* ecma_builtin_object_object_get_prototype_of */
        -:  178:
        -:  179:#if JERRY_ESNEXT
        -:  180:/**
        -:  181: * The Object object's 'setPrototypeOf' routine
        -:  182: *
        -:  183: * See also:
        -:  184: *          ES2015 19.1.2.18
        -:  185: *
        -:  186: * @return ecma value
        -:  187: *         Returned value must be freed with ecma_free_value.
        -:  188: */
        -:  189:ecma_value_t
    #####:  190:ecma_builtin_object_object_set_prototype_of (ecma_value_t arg1, /**< routine's first argument */
        -:  191:                                             ecma_value_t arg2) /**< routine's second argument */
        -:  192:{
        -:  193:  /* 1., 2. */
    #####:  194:  if (!ecma_op_require_object_coercible (arg1))
        -:  195:  {
    #####:  196:    return ECMA_VALUE_ERROR;
        -:  197:  }
        -:  198:
        -:  199:  /* 3. */
    #####:  200:  if (!ecma_is_value_object (arg2) && !ecma_is_value_null (arg2))
        -:  201:  {
    #####:  202:    return ecma_raise_type_error (ECMA_ERR_PROTOTYPE_IS_NEITHER_OBJECT_NOR_NULL);
        -:  203:  }
        -:  204:
        -:  205:  /* 4. */
    #####:  206:  if (!ecma_is_value_object (arg1))
        -:  207:  {
    #####:  208:    return ecma_copy_value (arg1);
        -:  209:  }
        -:  210:
    #####:  211:  ecma_object_t *obj_p = ecma_get_object_from_value (arg1);
        -:  212:  ecma_value_t status;
        -:  213:
        -:  214:  /* 5. */
        -:  215:#if JERRY_BUILTIN_PROXY
    #####:  216:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  217:  {
    #####:  218:    status = ecma_proxy_object_set_prototype_of (obj_p, arg2);
        -:  219:
    #####:  220:    if (ECMA_IS_VALUE_ERROR (status))
        -:  221:    {
    #####:  222:      return status;
        -:  223:    }
        -:  224:  }
        -:  225:  else
        -:  226:  {
        -:  227:#endif /* JERRY_BUILTIN_PROXY */
    #####:  228:    status = ecma_op_ordinary_object_set_prototype_of (obj_p, arg2);
        -:  229:#if JERRY_BUILTIN_PROXY
        -:  230:  }
        -:  231:#endif /* JERRY_BUILTIN_PROXY */
        -:  232:
    #####:  233:  if (ecma_is_value_false (status))
        -:  234:  {
    #####:  235:    return ecma_raise_type_error (ECMA_ERR_SET_PROTOTYPE);
        -:  236:  }
        -:  237:
    #####:  238:  JERRY_ASSERT (ecma_is_value_true (status));
    #####:  239:  ecma_ref_object (obj_p);
        -:  240:
    #####:  241:  return arg1;
        -:  242:} /* ecma_builtin_object_object_set_prototype_of */
        -:  243:
        -:  244:/**
        -:  245: * The Object object's set __proto__ routine
        -:  246: *
        -:  247: * See also:
        -:  248: *          ECMA-262 v6, B.2.2.1.2
        -:  249: *
        -:  250: * @return ecma value
        -:  251: *         Returned value must be freed with ecma_free_value.
        -:  252: */
        -:  253:ecma_value_t
    #####:  254:ecma_builtin_object_object_set_proto (ecma_value_t arg1, /**< routine's first argument */
        -:  255:                                      ecma_value_t arg2) /**< routine's second argument */
        -:  256:{
        -:  257:  /* 1., 2. */
    #####:  258:  if (!ecma_op_require_object_coercible (arg1))
        -:  259:  {
    #####:  260:    return ECMA_VALUE_ERROR;
        -:  261:  }
        -:  262:
        -:  263:  /* 3. */
    #####:  264:  if (!ecma_is_value_object (arg2) && !ecma_is_value_null (arg2))
        -:  265:  {
    #####:  266:    return ECMA_VALUE_UNDEFINED;
        -:  267:  }
        -:  268:
        -:  269:  /* 4. */
    #####:  270:  if (!ecma_is_value_object (arg1))
        -:  271:  {
    #####:  272:    return ECMA_VALUE_UNDEFINED;
        -:  273:  }
        -:  274:
    #####:  275:  ecma_object_t *obj_p = ecma_get_object_from_value (arg1);
        -:  276:  ecma_value_t status;
        -:  277:
        -:  278:  /* 5. */
        -:  279:#if JERRY_BUILTIN_PROXY
    #####:  280:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  281:  {
    #####:  282:    status = ecma_proxy_object_set_prototype_of (obj_p, arg2);
        -:  283:
    #####:  284:    if (ECMA_IS_VALUE_ERROR (status))
        -:  285:    {
    #####:  286:      return status;
        -:  287:    }
        -:  288:  }
        -:  289:  else
        -:  290:  {
        -:  291:#endif /* JERRY_BUILTIN_PROXY */
    #####:  292:    status = ecma_op_ordinary_object_set_prototype_of (obj_p, arg2);
        -:  293:#if JERRY_BUILTIN_PROXY
        -:  294:  }
        -:  295:#endif /* JERRY_BUILTIN_PROXY */
        -:  296:
    #####:  297:  if (ecma_is_value_false (status))
        -:  298:  {
    #####:  299:    return ecma_raise_type_error (ECMA_ERR_SET_PROTOTYPE);
        -:  300:  }
        -:  301:
    #####:  302:  JERRY_ASSERT (ecma_is_value_true (status));
        -:  303:
    #####:  304:  return ECMA_VALUE_UNDEFINED;
        -:  305:} /* ecma_builtin_object_object_set_proto */
        -:  306:#endif /* JERRY_ESNEXT */
        -:  307:
        -:  308:/**
        -:  309: * SetIntegrityLevel operation
        -:  310: *
        -:  311: * See also:
        -:  312: *          ECMA-262 v6, 7.3.14
        -:  313: *
        -:  314: * @return ECMA_VALUE_ERROR - if the operation raised an error
        -:  315: *         ECMA_VALUE_{TRUE/FALSE} - depends on whether the integrity level has been set successfully
        -:  316: */
        -:  317:static ecma_value_t
    #####:  318:ecma_builtin_object_set_integrity_level (ecma_object_t *obj_p, /**< object */
        -:  319:                                         bool is_seal) /**< true - set "sealed"
        -:  320:                                                        *   false - set "frozen" */
        -:  321:{
        -:  322:  /* 3. */
        -:  323:#if JERRY_BUILTIN_PROXY
    #####:  324:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  325:  {
    #####:  326:    ecma_value_t status = ecma_proxy_object_prevent_extensions (obj_p);
        -:  327:
    #####:  328:    if (!ecma_is_value_true (status))
        -:  329:    {
    #####:  330:      return status;
        -:  331:    }
        -:  332:  }
        -:  333:  else
        -:  334:#endif /* JERRY_BUILTIN_PROXY */
        -:  335:  {
    #####:  336:    ecma_op_ordinary_object_prevent_extensions (obj_p);
        -:  337:  }
        -:  338:
        -:  339:  /* 6. */
    #####:  340:  ecma_collection_t *props_p = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_ALL);
        -:  341:
        -:  342:#if JERRY_BUILTIN_PROXY
    #####:  343:  if (props_p == NULL)
        -:  344:  {
    #####:  345:    return ECMA_VALUE_ERROR;
        -:  346:  }
        -:  347:#endif /* JERRY_BUILTIN_PROXY */
        -:  348:
    #####:  349:  ecma_value_t *buffer_p = props_p->buffer_p;
        -:  350:
    #####:  351:  if (is_seal)
        -:  352:  {
        -:  353:    /* 8.a */
    #####:  354:    for (uint32_t i = 0; i < props_p->item_count; i++)
        -:  355:    {
    #####:  356:      ecma_string_t *property_name_p = ecma_get_prop_name_from_value (buffer_p[i]);
        -:  357:
    #####:  358:      ecma_property_descriptor_t prop_desc;
    #####:  359:      ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, property_name_p, &prop_desc);
        -:  360:
        -:  361:#if JERRY_BUILTIN_PROXY
    #####:  362:      if (ECMA_IS_VALUE_ERROR (status))
        -:  363:      {
    #####:  364:        ecma_collection_free (props_p);
    #####:  365:        return ECMA_VALUE_ERROR;
        -:  366:      }
        -:  367:#endif /* JERRY_BUILTIN_PROXY */
        -:  368:
    #####:  369:      if (ecma_is_value_false (status))
        -:  370:      {
    #####:  371:        continue;
        -:  372:      }
        -:  373:
    #####:  374:      prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_CONFIGURABLE;
    #####:  375:      prop_desc.flags |= JERRY_PROP_SHOULD_THROW;
        -:  376:
        -:  377:      /* 8.a.i */
    #####:  378:      ecma_value_t define_own_prop_ret = ecma_op_object_define_own_property (obj_p, property_name_p, &prop_desc);
        -:  379:
    #####:  380:      ecma_free_property_descriptor (&prop_desc);
        -:  381:
        -:  382:      /* 8.a.ii */
    #####:  383:      if (ECMA_IS_VALUE_ERROR (define_own_prop_ret))
        -:  384:      {
    #####:  385:        ecma_collection_free (props_p);
    #####:  386:        return define_own_prop_ret;
        -:  387:      }
        -:  388:
    #####:  389:      ecma_free_value (define_own_prop_ret);
        -:  390:    }
        -:  391:  }
        -:  392:  else
        -:  393:  {
        -:  394:    /* 9.a */
    #####:  395:    for (uint32_t i = 0; i < props_p->item_count; i++)
        -:  396:    {
    #####:  397:      ecma_string_t *property_name_p = ecma_get_prop_name_from_value (buffer_p[i]);
        -:  398:
        -:  399:      /* 9.1 */
    #####:  400:      ecma_property_descriptor_t prop_desc;
    #####:  401:      ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, property_name_p, &prop_desc);
        -:  402:
        -:  403:#if JERRY_BUILTIN_PROXY
    #####:  404:      if (ECMA_IS_VALUE_ERROR (status))
        -:  405:      {
    #####:  406:        ecma_collection_free (props_p);
    #####:  407:        return ECMA_VALUE_ERROR;
        -:  408:      }
        -:  409:#endif /* JERRY_BUILTIN_PROXY */
        -:  410:
    #####:  411:      if (ecma_is_value_false (status))
        -:  412:      {
    #####:  413:        continue;
        -:  414:      }
        -:  415:
        -:  416:      /* 9.2 */
    #####:  417:      if ((prop_desc.flags & (JERRY_PROP_IS_WRITABLE_DEFINED | JERRY_PROP_IS_WRITABLE))
        -:  418:          == (JERRY_PROP_IS_WRITABLE_DEFINED | JERRY_PROP_IS_WRITABLE))
        -:  419:      {
    #####:  420:        prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_WRITABLE;
        -:  421:      }
        -:  422:
    #####:  423:      prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_CONFIGURABLE;
    #####:  424:      prop_desc.flags |= JERRY_PROP_SHOULD_THROW;
        -:  425:
        -:  426:      /* 9.3 */
    #####:  427:      ecma_value_t define_own_prop_ret = ecma_op_object_define_own_property (obj_p, property_name_p, &prop_desc);
        -:  428:
    #####:  429:      ecma_free_property_descriptor (&prop_desc);
        -:  430:
        -:  431:      /* 9.4 */
    #####:  432:      if (ECMA_IS_VALUE_ERROR (define_own_prop_ret))
        -:  433:      {
    #####:  434:        ecma_collection_free (props_p);
    #####:  435:        return define_own_prop_ret;
        -:  436:      }
        -:  437:
    #####:  438:      ecma_free_value (define_own_prop_ret);
        -:  439:    }
        -:  440:  }
        -:  441:
    #####:  442:  ecma_collection_free (props_p);
        -:  443:
    #####:  444:  return ECMA_VALUE_TRUE;
        -:  445:} /* ecma_builtin_object_set_integrity_level */
        -:  446:
        -:  447:/**
        -:  448: * The Object object's 'seal' routine
        -:  449: *
        -:  450: * See also:
        -:  451: *          ECMA-262 v5, 15.2.3.8
        -:  452: *
        -:  453: * @return ecma value
        -:  454: *         Returned value must be freed with ecma_free_value.
        -:  455: */
        -:  456:static ecma_value_t
    #####:  457:ecma_builtin_object_object_seal (ecma_object_t *obj_p) /**< routine's argument */
        -:  458:{
    #####:  459:  ecma_value_t status = ecma_builtin_object_set_integrity_level (obj_p, true);
        -:  460:
    #####:  461:  if (ECMA_IS_VALUE_ERROR (status))
        -:  462:  {
    #####:  463:    return status;
        -:  464:  }
        -:  465:
        -:  466:#if JERRY_BUILTIN_PROXY
    #####:  467:  if (ecma_is_value_false (status))
        -:  468:  {
    #####:  469:    return ecma_raise_type_error (ECMA_ERR_OBJECT_CANNOT_BE_SEALED);
        -:  470:  }
        -:  471:#endif /* JERRY_BUILTIN_PROXY */
        -:  472:
        -:  473:  /* 4. */
    #####:  474:  ecma_ref_object (obj_p);
    #####:  475:  return ecma_make_object_value (obj_p);
        -:  476:} /* ecma_builtin_object_object_seal */
        -:  477:
        -:  478:/**
        -:  479: * The Object object's 'freeze' routine
        -:  480: *
        -:  481: * See also:
        -:  482: *          ECMA-262 v5, 15.2.3.9
        -:  483: *
        -:  484: * @return ecma value
        -:  485: *         Returned value must be freed with ecma_free_value.
        -:  486: */
        -:  487:static ecma_value_t
    #####:  488:ecma_builtin_object_object_freeze (ecma_object_t *obj_p) /**< routine's argument */
        -:  489:{
    #####:  490:  ecma_value_t status = ecma_builtin_object_set_integrity_level (obj_p, false);
        -:  491:
    #####:  492:  if (ECMA_IS_VALUE_ERROR (status))
        -:  493:  {
    #####:  494:    return status;
        -:  495:  }
        -:  496:
        -:  497:#if JERRY_BUILTIN_PROXY
    #####:  498:  if (ecma_is_value_false (status))
        -:  499:  {
    #####:  500:    return ecma_raise_type_error (ECMA_ERR_OBJECT_CANNOT_BE_FROZEN);
        -:  501:  }
        -:  502:#endif /* JERRY_BUILTIN_PROXY */
        -:  503:
        -:  504:  /* 4. */
    #####:  505:  ecma_ref_object (obj_p);
    #####:  506:  return ecma_make_object_value (obj_p);
        -:  507:} /* ecma_builtin_object_object_freeze */
        -:  508:
        -:  509:/**
        -:  510: * The Object object's 'preventExtensions' routine
        -:  511: *
        -:  512: * See also:
        -:  513: *          ECMA-262 v5, 15.2.3.10
        -:  514: *
        -:  515: * @return ecma value
        -:  516: *         Returned value must be freed with ecma_free_value.
        -:  517: */
        -:  518:ecma_value_t
    #####:  519:ecma_builtin_object_object_prevent_extensions (ecma_object_t *obj_p) /**< routine's argument */
        -:  520:{
        -:  521:#if JERRY_BUILTIN_PROXY
    #####:  522:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  523:  {
    #####:  524:    ecma_value_t status = ecma_proxy_object_prevent_extensions (obj_p);
        -:  525:
    #####:  526:    if (ECMA_IS_VALUE_ERROR (status))
        -:  527:    {
    #####:  528:      return status;
        -:  529:    }
        -:  530:
    #####:  531:    if (ecma_is_value_false (status))
        -:  532:    {
    #####:  533:      return ecma_raise_type_error (ECMA_ERR_SET_EXTENSIBLE_PROPERTY);
        -:  534:    }
        -:  535:
    #####:  536:    JERRY_ASSERT (ecma_is_value_true (status));
        -:  537:  }
        -:  538:  else
        -:  539:  {
        -:  540:#endif /* JERRY_BUILTIN_PROXY */
    #####:  541:    ecma_op_ordinary_object_prevent_extensions (obj_p);
        -:  542:#if JERRY_BUILTIN_PROXY
        -:  543:  }
        -:  544:#endif /* JERRY_BUILTIN_PROXY */
    #####:  545:  ecma_ref_object (obj_p);
        -:  546:
    #####:  547:  return ecma_make_object_value (obj_p);
        -:  548:} /* ecma_builtin_object_object_prevent_extensions */
        -:  549:
        -:  550:/**
        -:  551: * The Object object's 'isSealed' and 'isFrozen' routines
        -:  552: *
        -:  553: * See also:
        -:  554: *         ECMA-262 v5, 15.2.3.11
        -:  555: *         ECMA-262 v5, 15.2.3.12
        -:  556: *
        -:  557: * @return ecma value
        -:  558: *         Returned value must be freed with ecma_free_value.
        -:  559: */
        -:  560:static ecma_value_t
    #####:  561:ecma_builtin_object_test_integrity_level (ecma_object_t *obj_p, /**< routine's argument */
        -:  562:                                          int mode) /**< routine mode */
        -:  563:{
    #####:  564:  JERRY_ASSERT (mode == ECMA_OBJECT_ROUTINE_IS_FROZEN || mode == ECMA_OBJECT_ROUTINE_IS_SEALED);
        -:  565:
        -:  566:  /* 3. */
        -:  567:  bool is_extensible;
        -:  568:#if JERRY_BUILTIN_PROXY
    #####:  569:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  570:  {
    #####:  571:    ecma_value_t status = ecma_proxy_object_is_extensible (obj_p);
        -:  572:
    #####:  573:    if (ECMA_IS_VALUE_ERROR (status))
        -:  574:    {
    #####:  575:      return status;
        -:  576:    }
        -:  577:
    #####:  578:    is_extensible = ecma_is_value_true (status);
        -:  579:  }
        -:  580:  else
        -:  581:#endif /* JERRY_BUILTIN_PROXY */
        -:  582:  {
    #####:  583:    is_extensible = ecma_op_ordinary_object_is_extensible (obj_p);
        -:  584:  }
        -:  585:
    #####:  586:  if (is_extensible)
        -:  587:  {
    #####:  588:    return ECMA_VALUE_FALSE;
        -:  589:  }
        -:  590:
        -:  591:  /* the value can be updated in the loop below */
    #####:  592:  ecma_value_t ret_value = ECMA_VALUE_TRUE;
        -:  593:
        -:  594:  /* 2. */
    #####:  595:  ecma_collection_t *props_p = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_ALL);
        -:  596:
        -:  597:#if JERRY_BUILTIN_PROXY
    #####:  598:  if (props_p == NULL)
        -:  599:  {
    #####:  600:    return ECMA_VALUE_ERROR;
        -:  601:  }
        -:  602:#endif /* JERRY_BUILTIN_PROXY */
        -:  603:
    #####:  604:  ecma_value_t *buffer_p = props_p->buffer_p;
        -:  605:
    #####:  606:  for (uint32_t i = 0; i < props_p->item_count; i++)
        -:  607:  {
    #####:  608:    ecma_string_t *property_name_p = ecma_get_prop_name_from_value (buffer_p[i]);
        -:  609:
        -:  610:    /* 2.a */
    #####:  611:    ecma_property_descriptor_t prop_desc;
    #####:  612:    ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, property_name_p, &prop_desc);
        -:  613:
        -:  614:#if JERRY_BUILTIN_PROXY
    #####:  615:    if (ECMA_IS_VALUE_ERROR (status))
        -:  616:    {
    #####:  617:      ret_value = status;
    #####:  618:      break;
        -:  619:    }
        -:  620:#endif /* JERRY_BUILTIN_PROXY */
        -:  621:
    #####:  622:    if (ecma_is_value_false (status))
        -:  623:    {
    #####:  624:      continue;
        -:  625:    }
        -:  626:
    #####:  627:    bool is_writable_data = ((prop_desc.flags & (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE))
        -:  628:                             == (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE));
    #####:  629:    bool is_configurable = (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE);
        -:  630:
    #####:  631:    ecma_free_property_descriptor (&prop_desc);
        -:  632:
        -:  633:    /* 2.b for isFrozen */
        -:  634:    /* 2.b for isSealed, 2.c for isFrozen */
    #####:  635:    if ((mode == ECMA_OBJECT_ROUTINE_IS_FROZEN && is_writable_data) || is_configurable)
        -:  636:    {
    #####:  637:      ret_value = ECMA_VALUE_FALSE;
    #####:  638:      break;
        -:  639:    }
        -:  640:  }
        -:  641:
    #####:  642:  ecma_collection_free (props_p);
        -:  643:
    #####:  644:  return ret_value;
        -:  645:} /* ecma_builtin_object_test_integrity_level */
        -:  646:
        -:  647:/**
        -:  648: * The Object object's 'isExtensible' routine
        -:  649: *
        -:  650: * See also:
        -:  651: *          ECMA-262 v5, 15.2.3.13
        -:  652: *
        -:  653: * @return ecma value
        -:  654: *         Returned value must be freed with ecma_free_value.
        -:  655: */
        -:  656:ecma_value_t
    #####:  657:ecma_builtin_object_object_is_extensible (ecma_object_t *obj_p) /**< routine's argument */
        -:  658:{
        -:  659:#if JERRY_BUILTIN_PROXY
    #####:  660:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  661:  {
    #####:  662:    return ecma_proxy_object_is_extensible (obj_p);
        -:  663:  }
        -:  664:#endif /* JERRY_BUILTIN_PROXY */
        -:  665:
    #####:  666:  return ecma_make_boolean_value (ecma_op_ordinary_object_is_extensible (obj_p));
        -:  667:} /* ecma_builtin_object_object_is_extensible */
        -:  668:
        -:  669:/**
        -:  670: * Common implementation of the Object object's 'keys', 'values', 'entries' routines
        -:  671: *
        -:  672: * See also:
        -:  673: *          ECMA-262 v11, 19.1.2.17
        -:  674: *          ECMA-262 v11, 19.1.2.22
        -:  675: *          ECMA-262 v11, 19.1.2.5
        -:  676: *
        -:  677: * @return ecma value
        -:  678: *         Returned value must be freed with ecma_free_value.
        -:  679: */
        -:  680:static ecma_value_t
    #####:  681:ecma_builtin_object_object_keys_values_helper (ecma_object_t *obj_p, /**< routine's first argument */
        -:  682:                                               ecma_enumerable_property_names_options_t option) /**< listing option */
        -:  683:{
        -:  684:  /* 2. */
    #####:  685:  ecma_collection_t *props_p = ecma_op_object_get_enumerable_property_names (obj_p, option);
        -:  686:
    #####:  687:  if (props_p == NULL)
        -:  688:  {
    #####:  689:    return ECMA_VALUE_ERROR;
        -:  690:  }
        -:  691:
        -:  692:  /* 3. */
    #####:  693:  return ecma_op_new_array_object_from_collection (props_p, option != ECMA_ENUMERABLE_PROPERTY_KEYS);
        -:  694:} /* ecma_builtin_object_object_keys_values_helper */
        -:  695:
        -:  696:/**
        -:  697: * The Object object's 'getOwnPropertyDescriptor' routine
        -:  698: *
        -:  699: * See also:
        -:  700: *          ECMA-262 v5, 15.2.3.3
        -:  701: *
        -:  702: * @return ecma value
        -:  703: *         Returned value must be freed with ecma_free_value.
        -:  704: */
        -:  705:ecma_value_t
    #####:  706:ecma_builtin_object_object_get_own_property_descriptor (ecma_object_t *obj_p, /**< routine's first argument */
        -:  707:                                                        ecma_string_t *name_str_p) /**< routine's second argument */
        -:  708:{
        -:  709:  /* 3. */
    #####:  710:  ecma_property_descriptor_t prop_desc;
        -:  711:
    #####:  712:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, name_str_p, &prop_desc);
        -:  713:
        -:  714:#if JERRY_BUILTIN_PROXY
    #####:  715:  if (ECMA_IS_VALUE_ERROR (status))
        -:  716:  {
    #####:  717:    return status;
        -:  718:  }
        -:  719:#endif /* JERRY_BUILTIN_PROXY */
        -:  720:
    #####:  721:  if (ecma_is_value_true (status))
        -:  722:  {
        -:  723:    /* 4. */
    #####:  724:    ecma_object_t *desc_obj_p = ecma_op_from_property_descriptor (&prop_desc);
        -:  725:
    #####:  726:    ecma_free_property_descriptor (&prop_desc);
        -:  727:
    #####:  728:    return ecma_make_object_value (desc_obj_p);
        -:  729:  }
        -:  730:
    #####:  731:  return ECMA_VALUE_UNDEFINED;
        -:  732:} /* ecma_builtin_object_object_get_own_property_descriptor */
        -:  733:
        -:  734:#if JERRY_ESNEXT
        -:  735:/**
        -:  736: * The Object object's 'getOwnPropertyDescriptors' routine
        -:  737: *
        -:  738: * See also:
        -:  739: *          ECMA-262 v11, 19.1.2.9
        -:  740: *
        -:  741: * @return ecma value
        -:  742: *         Returned value must be freed with ecma_free_value.
        -:  743: */
        -:  744:static ecma_value_t
    #####:  745:ecma_builtin_object_object_get_own_property_descriptors (ecma_object_t *obj_p) /**< routine's first argument */
        -:  746:{
        -:  747:  /* 2 */
    #####:  748:  ecma_collection_t *prop_names_p = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_ALL);
        -:  749:
        -:  750:#if JERRY_BUILTIN_PROXY
    #####:  751:  if (prop_names_p == NULL)
        -:  752:  {
    #####:  753:    return ECMA_VALUE_ERROR;
        -:  754:  }
        -:  755:#endif /* JERRY_BUILTIN_PROXY */
        -:  756:
    #####:  757:  ecma_value_t *names_buffer_p = prop_names_p->buffer_p;
        -:  758:
        -:  759:  /* 3 */
    #####:  760:  ecma_object_t *object_prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
    #####:  761:  ecma_object_t *descriptors_p = ecma_create_object (object_prototype_p, 0, ECMA_OBJECT_TYPE_GENERAL);
        -:  762:
        -:  763:  /* 4 */
    #####:  764:  for (uint32_t i = 0; i < prop_names_p->item_count; i++)
        -:  765:  {
    #####:  766:    ecma_string_t *property_name_p = ecma_get_prop_name_from_value (names_buffer_p[i]);
        -:  767:
        -:  768:    /* 4.a */
    #####:  769:    ecma_property_descriptor_t prop_desc;
    #####:  770:    ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, property_name_p, &prop_desc);
        -:  771:
        -:  772:#if JERRY_BUILTIN_PROXY
    #####:  773:    if (ECMA_IS_VALUE_ERROR (status))
        -:  774:    {
    #####:  775:      ecma_deref_object (descriptors_p);
    #####:  776:      ecma_collection_free (prop_names_p);
        -:  777:
    #####:  778:      return status;
        -:  779:    }
        -:  780:#endif /* JERRY_BUILTIN_PROXY */
        -:  781:
    #####:  782:    if (ecma_is_value_true (status))
        -:  783:    {
        -:  784:      /* 4.b */
    #####:  785:      ecma_object_t *desc_obj_p = ecma_op_from_property_descriptor (&prop_desc);
        -:  786:      /* 4.c */
    #####:  787:      ecma_property_value_t *value_p = ecma_create_named_data_property (descriptors_p,
        -:  788:                                                                        property_name_p,
        -:  789:                                                                        ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  790:                                                                        NULL);
    #####:  791:      value_p->value = ecma_make_object_value (desc_obj_p);
        -:  792:
    #####:  793:      ecma_deref_object (desc_obj_p);
    #####:  794:      ecma_free_property_descriptor (&prop_desc);
        -:  795:    }
        -:  796:  }
        -:  797:
    #####:  798:  ecma_collection_free (prop_names_p);
        -:  799:
    #####:  800:  return ecma_make_object_value (descriptors_p);
        -:  801:} /* ecma_builtin_object_object_get_own_property_descriptors */
        -:  802:#endif /* JERRY_ESNEXT */
        -:  803:
        -:  804:/**
        -:  805: * The Object object's 'defineProperties' routine
        -:  806: *
        -:  807: * See also:
        -:  808: *          ECMA-262 v5, 15.2.3.7
        -:  809: *          ECMA-262 v11, 19.1.2.3.1
        -:  810: *
        -:  811: * @return ecma value
        -:  812: *         Returned value must be freed with ecma_free_value.
        -:  813: */
        -:  814:static ecma_value_t
    #####:  815:ecma_builtin_object_object_define_properties (ecma_object_t *obj_p, /**< routine's first argument */
        -:  816:                                              ecma_value_t arg2) /**< routine's second argument */
        -:  817:{
        -:  818:  /* 2. */
    #####:  819:  ecma_value_t props = ecma_op_to_object (arg2);
        -:  820:
    #####:  821:  if (ECMA_IS_VALUE_ERROR (props))
        -:  822:  {
    #####:  823:    return props;
        -:  824:  }
        -:  825:
    #####:  826:  ecma_object_t *props_p = ecma_get_object_from_value (props);
        -:  827:
        -:  828:  /* 3. */
    #####:  829:  ecma_collection_t *prop_names_p = ecma_op_object_own_property_keys (props_p, JERRY_PROPERTY_FILTER_ALL);
    #####:  830:  ecma_value_t ret_value = ECMA_VALUE_ERROR;
        -:  831:
        -:  832:#if JERRY_BUILTIN_PROXY
    #####:  833:  if (prop_names_p == NULL)
        -:  834:  {
    #####:  835:    ecma_deref_object (props_p);
    #####:  836:    return ret_value;
        -:  837:  }
        -:  838:#endif /* JERRY_BUILTIN_PROXY */
        -:  839:
    #####:  840:  ecma_value_t *buffer_p = prop_names_p->buffer_p;
        -:  841:
        -:  842:  /* 4. */
    #####:  843:  JMEM_DEFINE_LOCAL_ARRAY (property_descriptors, prop_names_p->item_count, ecma_property_descriptor_t);
    #####:  844:  uint32_t property_descriptor_number = 0;
    #####:  845:  ecma_collection_t *enum_prop_names = ecma_new_collection ();
        -:  846:
        -:  847:  /* 5. */
    #####:  848:  for (uint32_t i = 0; i < prop_names_p->item_count; i++)
        -:  849:  {
    #####:  850:    ecma_string_t *prop_name_p = ecma_get_prop_name_from_value (buffer_p[i]);
        -:  851:
    #####:  852:    ecma_property_descriptor_t prop_desc;
    #####:  853:    ecma_value_t get_desc = ecma_op_object_get_own_property_descriptor (props_p, prop_name_p, &prop_desc);
        -:  854:
        -:  855:#if JERRY_ESNEXT
    #####:  856:    if (ECMA_IS_VALUE_ERROR (get_desc))
        -:  857:    {
    #####:  858:      goto cleanup;
        -:  859:    }
        -:  860:#endif /* JERRY_ESNEXT */
        -:  861:
    #####:  862:    if (ecma_is_value_true (get_desc))
        -:  863:    {
    #####:  864:      if (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE)
        -:  865:      {
    #####:  866:        ecma_value_t desc_obj = ecma_op_object_get (props_p, prop_name_p);
        -:  867:
    #####:  868:        if (ECMA_IS_VALUE_ERROR (desc_obj))
        -:  869:        {
    #####:  870:          ecma_free_property_descriptor (&prop_desc);
    #####:  871:          goto cleanup;
        -:  872:        }
        -:  873:
    #####:  874:        ecma_value_t conv_result =
    #####:  875:          ecma_op_to_property_descriptor (desc_obj, &property_descriptors[property_descriptor_number]);
        -:  876:
    #####:  877:        property_descriptors[property_descriptor_number].flags |= JERRY_PROP_SHOULD_THROW;
        -:  878:
    #####:  879:        ecma_free_value (desc_obj);
        -:  880:
    #####:  881:        if (ECMA_IS_VALUE_ERROR (conv_result))
        -:  882:        {
    #####:  883:          ecma_free_property_descriptor (&prop_desc);
    #####:  884:          goto cleanup;
        -:  885:        }
        -:  886:
    #####:  887:        property_descriptor_number++;
    #####:  888:        ecma_free_value (conv_result);
    #####:  889:        ecma_ref_ecma_string (prop_name_p);
    #####:  890:        ecma_collection_push_back (enum_prop_names, buffer_p[i]);
        -:  891:      }
        -:  892:
    #####:  893:      ecma_free_property_descriptor (&prop_desc);
        -:  894:    }
        -:  895:  }
        -:  896:
        -:  897:  /* 6. */
    #####:  898:  for (uint32_t i = 0; i < enum_prop_names->item_count; i++)
        -:  899:  {
    #####:  900:    ecma_string_t *prop_name_p = ecma_get_prop_name_from_value (enum_prop_names->buffer_p[i]);
        -:  901:
    #####:  902:    ecma_value_t define_own_prop_ret =
    #####:  903:      ecma_op_object_define_own_property (obj_p, prop_name_p, &property_descriptors[i]);
    #####:  904:    if (ECMA_IS_VALUE_ERROR (define_own_prop_ret))
        -:  905:    {
    #####:  906:      goto cleanup;
        -:  907:    }
        -:  908:
    #####:  909:    ecma_free_value (define_own_prop_ret);
        -:  910:  }
        -:  911:
    #####:  912:  ecma_ref_object (obj_p);
    #####:  913:  ret_value = ecma_make_object_value (obj_p);
        -:  914:
    #####:  915:cleanup:
        -:  916:  /* Clean up. */
    #####:  917:  for (uint32_t index = 0; index < property_descriptor_number; index++)
        -:  918:  {
    #####:  919:    ecma_free_property_descriptor (&property_descriptors[index]);
        -:  920:  }
        -:  921:
    #####:  922:  ecma_collection_free (enum_prop_names);
        -:  923:
    #####:  924:  JMEM_FINALIZE_LOCAL_ARRAY (property_descriptors);
        -:  925:
    #####:  926:  ecma_collection_free (prop_names_p);
        -:  927:
    #####:  928:  ecma_deref_object (props_p);
        -:  929:
    #####:  930:  return ret_value;
        -:  931:} /* ecma_builtin_object_object_define_properties */
        -:  932:
        -:  933:/**
        -:  934: * The Object object's 'create' routine
        -:  935: *
        -:  936: * See also:
        -:  937: *          ECMA-262 v5, 15.2.3.5
        -:  938: *
        -:  939: * @return ecma value
        -:  940: *         Returned value must be freed with ecma_free_value.
        -:  941: */
        -:  942:static ecma_value_t
    #####:  943:ecma_builtin_object_object_create (ecma_value_t arg1, /**< routine's first argument */
        -:  944:                                   ecma_value_t arg2) /**< routine's second argument */
        -:  945:{
        -:  946:  /* 1. */
    #####:  947:  if (!ecma_is_value_object (arg1) && !ecma_is_value_null (arg1))
        -:  948:  {
    #####:  949:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_IS_NOT_AN_OBJECT);
        -:  950:  }
        -:  951:
    #####:  952:  ecma_object_t *obj_p = NULL;
        -:  953:
    #####:  954:  if (!ecma_is_value_null (arg1))
        -:  955:  {
    #####:  956:    obj_p = ecma_get_object_from_value (arg1);
        -:  957:  }
        -:  958:  /* 2-3. */
    #####:  959:  ecma_object_t *result_obj_p = ecma_op_create_object_object_noarg_and_set_prototype (obj_p);
        -:  960:
        -:  961:  /* 4. */
    #####:  962:  if (!ecma_is_value_undefined (arg2))
        -:  963:  {
    #####:  964:    ecma_value_t obj = ecma_builtin_object_object_define_properties (result_obj_p, arg2);
        -:  965:
    #####:  966:    if (ECMA_IS_VALUE_ERROR (obj))
        -:  967:    {
    #####:  968:      ecma_deref_object (result_obj_p);
    #####:  969:      return obj;
        -:  970:    }
        -:  971:
    #####:  972:    ecma_free_value (obj);
        -:  973:  }
        -:  974:
        -:  975:  /* 5. */
    #####:  976:  return ecma_make_object_value (result_obj_p);
        -:  977:} /* ecma_builtin_object_object_create */
        -:  978:
        -:  979:/**
        -:  980: * The Object object's 'defineProperty' routine
        -:  981: *
        -:  982: * See also:
        -:  983: *          ECMA-262 v5, 15.2.3.6
        -:  984: *
        -:  985: * @return ecma value
        -:  986: *         Returned value must be freed with ecma_free_value.
        -:  987: */
        -:  988:ecma_value_t
    #####:  989:ecma_builtin_object_object_define_property (ecma_object_t *obj_p, /**< routine's first argument */
        -:  990:                                            ecma_string_t *name_str_p, /**< routine's second argument */
        -:  991:                                            ecma_value_t arg3) /**< routine's third argument */
        -:  992:{
    #####:  993:  ecma_property_descriptor_t prop_desc;
        -:  994:
    #####:  995:  ecma_value_t conv_result = ecma_op_to_property_descriptor (arg3, &prop_desc);
        -:  996:
    #####:  997:  if (ECMA_IS_VALUE_ERROR (conv_result))
        -:  998:  {
    #####:  999:    return conv_result;
        -: 1000:  }
        -: 1001:
    #####: 1002:  prop_desc.flags |= JERRY_PROP_SHOULD_THROW;
        -: 1003:
    #####: 1004:  ecma_value_t define_own_prop_ret = ecma_op_object_define_own_property (obj_p, name_str_p, &prop_desc);
        -: 1005:
    #####: 1006:  ecma_free_property_descriptor (&prop_desc);
    #####: 1007:  ecma_free_value (conv_result);
        -: 1008:
    #####: 1009:  if (ECMA_IS_VALUE_ERROR (define_own_prop_ret))
        -: 1010:  {
    #####: 1011:    return define_own_prop_ret;
        -: 1012:  }
        -: 1013:
    #####: 1014:  if (ecma_is_value_false (define_own_prop_ret))
        -: 1015:  {
    #####: 1016:    return ecma_raise_type_error (ECMA_ERR_THE_REQUESTED_PROPERTY_UPDATE_CANNOT_BE_PERFORMED);
        -: 1017:  }
        -: 1018:
    #####: 1019:  JERRY_ASSERT (ecma_is_value_true (define_own_prop_ret));
        -: 1020:
    #####: 1021:  ecma_ref_object (obj_p);
    #####: 1022:  ecma_free_value (define_own_prop_ret);
        -: 1023:
    #####: 1024:  return ecma_make_object_value (obj_p);
        -: 1025:} /* ecma_builtin_object_object_define_property */
        -: 1026:
        -: 1027:#if JERRY_ESNEXT
        -: 1028:
        -: 1029:/**
        -: 1030: * The Object object's 'assign' routine
        -: 1031: *
        -: 1032: * See also:
        -: 1033: *          ECMA-262 v6, 19.1.2.1
        -: 1034: *
        -: 1035: * @return ecma value
        -: 1036: *         Returned value must be freed with ecma_free_value.
        -: 1037: */
        -: 1038:static ecma_value_t
    #####: 1039:ecma_builtin_object_object_assign (ecma_object_t *target_p, /**< target object */
        -: 1040:                                   const ecma_value_t arguments_list_p[], /**< arguments list */
        -: 1041:                                   uint32_t arguments_list_len) /**< number of arguments */
        -: 1042:{
    #####: 1043:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -: 1044:
        -: 1045:  /* 4-5. */
    #####: 1046:  for (uint32_t i = 0; i < arguments_list_len && ecma_is_value_empty (ret_value); i++)
        -: 1047:  {
    #####: 1048:    ecma_value_t next_source = arguments_list_p[i];
        -: 1049:
        -: 1050:    /* 5.a */
    #####: 1051:    if (ecma_is_value_undefined (next_source) || ecma_is_value_null (next_source))
        -: 1052:    {
    #####: 1053:      continue;
        -: 1054:    }
        -: 1055:
        -: 1056:    /* 5.b.i */
    #####: 1057:    ecma_value_t from_value = ecma_op_to_object (next_source);
        -: 1058:    /* null and undefied cases are handled above, so this must be a valid object */
    #####: 1059:    JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (from_value));
        -: 1060:
    #####: 1061:    ecma_object_t *from_obj_p = ecma_get_object_from_value (from_value);
        -: 1062:
        -: 1063:    /* 5.b.iii */
    #####: 1064:    ecma_collection_t *props_p = ecma_op_object_own_property_keys (from_obj_p, JERRY_PROPERTY_FILTER_ALL);
        -: 1065:
        -: 1066:#if JERRY_BUILTIN_PROXY
    #####: 1067:    if (props_p == NULL)
        -: 1068:    {
    #####: 1069:      ecma_deref_object (from_obj_p);
    #####: 1070:      return ECMA_VALUE_ERROR;
        -: 1071:    }
        -: 1072:#endif /* JERRY_BUILTIN_PROXY */
        -: 1073:
    #####: 1074:    ecma_value_t *buffer_p = props_p->buffer_p;
        -: 1075:
    #####: 1076:    for (uint32_t j = 0; (j < props_p->item_count) && ecma_is_value_empty (ret_value); j++)
        -: 1077:    {
    #####: 1078:      ecma_string_t *property_name_p = ecma_get_prop_name_from_value (buffer_p[j]);
        -: 1079:
        -: 1080:      /* 5.c.i-ii */
    #####: 1081:      ecma_property_descriptor_t prop_desc;
    #####: 1082:      ecma_value_t desc_status = ecma_op_object_get_own_property_descriptor (from_obj_p, property_name_p, &prop_desc);
        -: 1083:
        -: 1084:#if JERRY_BUILTIN_PROXY
    #####: 1085:      if (ECMA_IS_VALUE_ERROR (desc_status))
        -: 1086:      {
    #####: 1087:        ret_value = desc_status;
    #####: 1088:        break;
        -: 1089:      }
        -: 1090:#endif /* JERRY_BUILTIN_PROXY */
        -: 1091:
    #####: 1092:      if (ecma_is_value_false (desc_status))
        -: 1093:      {
    #####: 1094:        continue;
        -: 1095:      }
        -: 1096:
        -: 1097:      /* 5.c.iii */
    #####: 1098:      if (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE)
        -: 1099:      {
        -: 1100:        /* 5.c.iii.1 */
    #####: 1101:        ecma_value_t prop_value = ecma_op_object_get (from_obj_p, property_name_p);
        -: 1102:
        -: 1103:        /* 5.c.iii.2 */
    #####: 1104:        if (ECMA_IS_VALUE_ERROR (prop_value))
        -: 1105:        {
    #####: 1106:          ret_value = prop_value;
        -: 1107:        }
        -: 1108:        else
        -: 1109:        {
        -: 1110:          /* 5.c.iii.3 */
    #####: 1111:          ecma_value_t status = ecma_op_object_put (target_p, property_name_p, prop_value, true);
        -: 1112:
        -: 1113:          /* 5.c.iii.4 */
    #####: 1114:          if (ECMA_IS_VALUE_ERROR (status))
        -: 1115:          {
    #####: 1116:            ret_value = status;
        -: 1117:          }
        -: 1118:        }
        -: 1119:
    #####: 1120:        ecma_free_value (prop_value);
        -: 1121:      }
        -: 1122:
    #####: 1123:      ecma_free_property_descriptor (&prop_desc);
        -: 1124:    }
        -: 1125:
    #####: 1126:    ecma_deref_object (from_obj_p);
    #####: 1127:    ecma_collection_free (props_p);
        -: 1128:  }
        -: 1129:
        -: 1130:  /* 6. */
    #####: 1131:  if (ecma_is_value_empty (ret_value))
        -: 1132:  {
    #####: 1133:    ecma_ref_object (target_p);
    #####: 1134:    return ecma_make_object_value (target_p);
        -: 1135:  }
        -: 1136:
    #####: 1137:  return ret_value;
        -: 1138:} /* ecma_builtin_object_object_assign */
        -: 1139:
        -: 1140:/**
        -: 1141: * The Object object's 'is' routine
        -: 1142: *
        -: 1143: * See also:
        -: 1144: *          ECMA-262 v6, 19.1.2.10
        -: 1145: *
        -: 1146: * @return ecma value
        -: 1147: *         Returned value must be freed with ecma_free_value.
        -: 1148: */
        -: 1149:static ecma_value_t
    #####: 1150:ecma_builtin_object_object_is (ecma_value_t arg1, /**< routine's first argument */
        -: 1151:                               ecma_value_t arg2) /**< routine's second argument */
        -: 1152:{
    #####: 1153:  return ecma_op_same_value (arg1, arg2) ? ECMA_VALUE_TRUE : ECMA_VALUE_FALSE;
        -: 1154:} /* ecma_builtin_object_object_is */
        -: 1155:
        -: 1156:/**
        -: 1157: * The Object object's 'fromEntries' routine
        -: 1158: *
        -: 1159: * See also:
        -: 1160: *          ECMA-262 v10, 19.1.2.7
        -: 1161: * @return ecma value
        -: 1162: *         Returned value must be freed with ecma_free_value.
        -: 1163: */
        -: 1164:static ecma_value_t
    #####: 1165:ecma_builtin_object_from_entries (ecma_value_t iterator) /**< object's iterator */
        -: 1166:{
    #####: 1167:  JERRY_ASSERT (ecma_op_require_object_coercible (iterator));
        -: 1168:  /* 2 */
    #####: 1169:  ecma_object_t *object_prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
    #####: 1170:  ecma_object_t *obj_p = ecma_create_object (object_prototype_p, 0, ECMA_OBJECT_TYPE_GENERAL);
        -: 1171:
        -: 1172:  /* 6.a */
    #####: 1173:  ecma_value_t next_method;
    #####: 1174:  ecma_value_t result = ecma_op_get_iterator (iterator, ECMA_VALUE_SYNC_ITERATOR, &next_method);
        -: 1175:
    #####: 1176:  if (ECMA_IS_VALUE_ERROR (result))
        -: 1177:  {
    #####: 1178:    ecma_deref_object (obj_p);
    #####: 1179:    return result;
        -: 1180:  }
        -: 1181:
    #####: 1182:  const ecma_value_t original_iterator = result;
        -: 1183:
        -: 1184:  /* 6.b */
        -: 1185:  while (true)
    #####: 1186:  {
        -: 1187:    /* 6.a.i */
    #####: 1188:    result = ecma_op_iterator_step (original_iterator, next_method);
        -: 1189:
    #####: 1190:    if (ECMA_IS_VALUE_ERROR (result))
        -: 1191:    {
    #####: 1192:      goto cleanup_iterator;
        -: 1193:    }
        -: 1194:
        -: 1195:    /* 6.a.ii */
    #####: 1196:    if (ecma_is_value_false (result))
        -: 1197:    {
    #####: 1198:      break;
        -: 1199:    }
        -: 1200:
        -: 1201:    /* 6.a.iii */
    #####: 1202:    const ecma_value_t next = result;
    #####: 1203:    result = ecma_op_iterator_value (next);
    #####: 1204:    ecma_free_value (next);
        -: 1205:
    #####: 1206:    if (ECMA_IS_VALUE_ERROR (result))
        -: 1207:    {
    #####: 1208:      goto cleanup_iterator;
        -: 1209:    }
        -: 1210:
        -: 1211:    /* 6.a.iv */
    #####: 1212:    if (!ecma_is_value_object (result))
        -: 1213:    {
    #####: 1214:      ecma_free_value (result);
    #####: 1215:      ecma_raise_type_error (ECMA_ERR_ITERATOR_VALUE_IS_NOT_AN_OBJECT);
    #####: 1216:      result = ecma_op_iterator_close (original_iterator);
    #####: 1217:      JERRY_ASSERT (ECMA_IS_VALUE_ERROR (result));
    #####: 1218:      goto cleanup_iterator;
        -: 1219:    }
        -: 1220:
        -: 1221:    /* 6.a.v-vi */
    #####: 1222:    ecma_object_t *next_object_p = ecma_get_object_from_value (result);
        -: 1223:
    #####: 1224:    result = ecma_op_object_get_by_index (next_object_p, 0);
        -: 1225:
    #####: 1226:    if (ECMA_IS_VALUE_ERROR (result))
        -: 1227:    {
    #####: 1228:      ecma_deref_object (next_object_p);
    #####: 1229:      ecma_op_iterator_close (original_iterator);
    #####: 1230:      goto cleanup_iterator;
        -: 1231:    }
        -: 1232:
    #####: 1233:    const ecma_value_t key = result;
        -: 1234:
    #####: 1235:    result = ecma_op_object_get_by_index (next_object_p, 1);
        -: 1236:
    #####: 1237:    if (ECMA_IS_VALUE_ERROR (result))
        -: 1238:    {
    #####: 1239:      ecma_deref_object (next_object_p);
    #####: 1240:      ecma_free_value (key);
    #####: 1241:      ecma_op_iterator_close (original_iterator);
    #####: 1242:      goto cleanup_iterator;
        -: 1243:    }
        -: 1244:
        -: 1245:    /* 6.a.vii */
    #####: 1246:    const ecma_value_t value = result;
    #####: 1247:    ecma_string_t *property_key = ecma_op_to_property_key (key);
        -: 1248:
    #####: 1249:    if (property_key == NULL)
        -: 1250:    {
    #####: 1251:      ecma_deref_object (next_object_p);
    #####: 1252:      ecma_free_value (key);
    #####: 1253:      ecma_op_iterator_close (original_iterator);
    #####: 1254:      result = ECMA_VALUE_ERROR;
    #####: 1255:      goto cleanup_iterator;
        -: 1256:    }
        -: 1257:
    #####: 1258:    ecma_property_t *property_p = ecma_find_named_property (obj_p, property_key);
        -: 1259:
    #####: 1260:    if (property_p == NULL)
        -: 1261:    {
        -: 1262:      ecma_property_value_t *prop;
    #####: 1263:      prop =
        -: 1264:        ecma_create_named_data_property (obj_p, property_key, ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE, NULL);
    #####: 1265:      prop->value = ecma_copy_value_if_not_object (value);
        -: 1266:    }
        -: 1267:    else
        -: 1268:    {
    #####: 1269:      ecma_named_data_property_assign_value (obj_p, ECMA_PROPERTY_VALUE_PTR (property_p), value);
        -: 1270:    }
        -: 1271:
    #####: 1272:    ecma_deref_ecma_string (property_key);
    #####: 1273:    ecma_free_value (key);
    #####: 1274:    ecma_free_value (value);
    #####: 1275:    ecma_deref_object (next_object_p);
        -: 1276:  }
        -: 1277:
    #####: 1278:  ecma_ref_object (obj_p);
    #####: 1279:  result = ecma_make_object_value (obj_p);
        -: 1280:
    #####: 1281:cleanup_iterator:
    #####: 1282:  ecma_free_value (original_iterator);
    #####: 1283:  ecma_free_value (next_method);
    #####: 1284:  ecma_deref_object (obj_p);
        -: 1285:
    #####: 1286:  return result;
        -: 1287:} /* ecma_builtin_object_from_entries */
        -: 1288:
        -: 1289:#endif /* JERRY_ESNEXT */
        -: 1290:
        -: 1291:/**
        -: 1292: * GetOwnPropertyKeys abstract method
        -: 1293: *
        -: 1294: * See also:
        -: 1295: *          ECMA-262 v11, 19.1.2.11.1
        -: 1296: *
        -: 1297: * @return ecma value
        -: 1298: *         Returned value must be freed with ecma_free_value.
        -: 1299: */
        -: 1300:static ecma_value_t
    #####: 1301:ecma_op_object_get_own_property_keys (ecma_value_t this_arg, /**< this argument */
        -: 1302:                                      uint16_t type) /**< routine type */
        -: 1303:{
        -: 1304:#if JERRY_ESNEXT
        -: 1305:  /* 1. */
    #####: 1306:  ecma_value_t object = ecma_op_to_object (this_arg);
        -: 1307:
    #####: 1308:  if (ECMA_IS_VALUE_ERROR (object))
        -: 1309:  {
    #####: 1310:    return object;
        -: 1311:  }
        -: 1312:
    #####: 1313:  ecma_object_t *obj_p = ecma_get_object_from_value (object);
        -: 1314:
        -: 1315:  /* 2. */
    #####: 1316:  jerry_property_filter_t filter = JERRY_PROPERTY_FILTER_EXCLUDE_SYMBOLS;
        -: 1317:
    #####: 1318:  if (type == ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_SYMBOLS)
        -: 1319:  {
    #####: 1320:    filter = (JERRY_PROPERTY_FILTER_EXCLUDE_STRINGS | JERRY_PROPERTY_FILTER_EXCLUDE_INTEGER_INDICES);
        -: 1321:  }
        -: 1322:
    #####: 1323:  ecma_collection_t *props_p = ecma_op_object_own_property_keys (obj_p, filter);
        -: 1324:
    #####: 1325:  if (props_p == NULL)
        -: 1326:  {
    #####: 1327:    ecma_deref_object (obj_p);
    #####: 1328:    return ECMA_VALUE_ERROR;
        -: 1329:  }
        -: 1330:
        -: 1331:  /* 3. */
    #####: 1332:  ecma_collection_t *name_list_p = ecma_new_collection ();
        -: 1333:
        -: 1334:  /* 4. */
    #####: 1335:  for (uint32_t i = 0; i < props_p->item_count; i++)
        -: 1336:  {
    #####: 1337:    ecma_value_t prop_name = props_p->buffer_p[i];
    #####: 1338:    ecma_string_t *name_p = ecma_get_prop_name_from_value (prop_name);
        -: 1339:
    #####: 1340:    if ((ecma_prop_name_is_symbol (name_p) && type == ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_SYMBOLS)
    #####: 1341:        || (ecma_is_value_string (prop_name) && type == ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_NAMES))
        -: 1342:    {
    #####: 1343:      ecma_ref_ecma_string (name_p);
    #####: 1344:      ecma_collection_push_back (name_list_p, prop_name);
        -: 1345:    }
        -: 1346:  }
        -: 1347:
    #####: 1348:  ecma_value_t result_array = ecma_op_new_array_object_from_collection (name_list_p, false);
        -: 1349:
    #####: 1350:  ecma_deref_object (obj_p);
    #####: 1351:  ecma_collection_free (props_p);
        -: 1352:
    #####: 1353:  return result_array;
        -: 1354:#else /* !JERRY_ESNEXT */
        -: 1355:  JERRY_UNUSED (type);
    #####: 1356:  ecma_object_t *obj_p = ecma_get_object_from_value (this_arg);
    #####: 1357:  ecma_collection_t *props_p = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_ALL);
    #####: 1358:  return ecma_op_new_array_object_from_collection (props_p, false);
        -: 1359:#endif /* JERRY_ESNEXT */
        -: 1360:} /* ecma_op_object_get_own_property_keys */
        -: 1361:
        -: 1362:/**
        -: 1363: * Dispatcher of the built-in's routines
        -: 1364: *
        -: 1365: * @return ecma value
        -: 1366: *         Returned value must be freed with ecma_free_value.
        -: 1367: */
        -: 1368:ecma_value_t
    #####: 1369:ecma_builtin_object_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -: 1370:                                      ecma_value_t this_arg, /**< 'this' argument value */
        -: 1371:                                      const ecma_value_t arguments_list_p[], /**< list of arguments
        -: 1372:                                                                              *   passed to routine */
        -: 1373:                                      uint32_t arguments_number) /**< length of arguments' list */
        -: 1374:{
        -: 1375:  JERRY_UNUSED_2 (this_arg, arguments_number);
        -: 1376:
    #####: 1377:  ecma_value_t arg1 = arguments_list_p[0];
    #####: 1378:  ecma_value_t arg2 = arguments_list_p[1];
        -: 1379:
        -: 1380:  /* No specialization for the arguments */
    #####: 1381:  switch (builtin_routine_id)
        -: 1382:  {
    #####: 1383:    case ECMA_OBJECT_ROUTINE_CREATE:
        -: 1384:    {
    #####: 1385:      return ecma_builtin_object_object_create (arg1, arg2);
        -: 1386:    }
        -: 1387:#if JERRY_ESNEXT
    #####: 1388:    case ECMA_OBJECT_ROUTINE_SET_PROTOTYPE_OF:
        -: 1389:    {
    #####: 1390:      return ecma_builtin_object_object_set_prototype_of (arg1, arg2);
        -: 1391:    }
    #####: 1392:    case ECMA_OBJECT_ROUTINE_IS:
        -: 1393:    {
    #####: 1394:      return ecma_builtin_object_object_is (arg1, arg2);
        -: 1395:    }
        -: 1396:#endif /* JERRY_ESNEXT */
    #####: 1397:    default:
        -: 1398:    {
    #####: 1399:      break;
        -: 1400:    }
        -: 1401:  }
        -: 1402:
        -: 1403:  ecma_object_t *obj_p;
        -: 1404:#if !JERRY_ESNEXT
    #####: 1405:  if (!ecma_is_value_object (arg1))
        -: 1406:  {
    #####: 1407:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_IS_NOT_AN_OBJECT);
        -: 1408:  }
        -: 1409:#endif /* !JERRY_ESNEXT */
        -: 1410:
    #####: 1411:  if (builtin_routine_id <= ECMA_OBJECT_ROUTINE_DEFINE_PROPERTIES)
        -: 1412:  {
        -: 1413:#if JERRY_ESNEXT
    #####: 1414:    if (!ecma_is_value_object (arg1))
        -: 1415:    {
    #####: 1416:      return ecma_raise_type_error (ECMA_ERR_ARGUMENT_IS_NOT_AN_OBJECT);
        -: 1417:    }
        -: 1418:#endif /* JERRY_ESNEXT */
        -: 1419:
    #####: 1420:    obj_p = ecma_get_object_from_value (arg1);
        -: 1421:
    #####: 1422:    if (builtin_routine_id == ECMA_OBJECT_ROUTINE_DEFINE_PROPERTY)
        -: 1423:    {
    #####: 1424:      ecma_string_t *prop_name_p = ecma_op_to_property_key (arg2);
        -: 1425:
    #####: 1426:      if (prop_name_p == NULL)
        -: 1427:      {
    #####: 1428:        return ECMA_VALUE_ERROR;
        -: 1429:      }
        -: 1430:
    #####: 1431:      ecma_value_t result = ecma_builtin_object_object_define_property (obj_p, prop_name_p, arguments_list_p[2]);
        -: 1432:
    #####: 1433:      ecma_deref_ecma_string (prop_name_p);
    #####: 1434:      return result;
        -: 1435:    }
        -: 1436:
    #####: 1437:    JERRY_ASSERT (builtin_routine_id == ECMA_OBJECT_ROUTINE_DEFINE_PROPERTIES);
    #####: 1438:    return ecma_builtin_object_object_define_properties (obj_p, arg2);
        -: 1439:  }
    #####: 1440:  else if (builtin_routine_id <= ECMA_OBJECT_ROUTINE_ENTRIES)
        -: 1441:  {
        -: 1442:#if JERRY_ESNEXT
    #####: 1443:    ecma_value_t object = ecma_op_to_object (arg1);
    #####: 1444:    if (ECMA_IS_VALUE_ERROR (object))
        -: 1445:    {
    #####: 1446:      return object;
        -: 1447:    }
        -: 1448:
    #####: 1449:    obj_p = ecma_get_object_from_value (object);
        -: 1450:#else /* !JERRY_ESNEXT */
    #####: 1451:    obj_p = ecma_get_object_from_value (arg1);
        -: 1452:#endif /* JERRY_ESNEXT */
        -: 1453:
        -: 1454:    ecma_value_t result;
    #####: 1455:    switch (builtin_routine_id)
        -: 1456:    {
    #####: 1457:      case ECMA_OBJECT_ROUTINE_GET_PROTOTYPE_OF:
        -: 1458:      {
    #####: 1459:        result = ecma_builtin_object_object_get_prototype_of (obj_p);
    #####: 1460:        break;
        -: 1461:      }
        -: 1462:#if JERRY_ESNEXT
    #####: 1463:      case ECMA_OBJECT_ROUTINE_ASSIGN:
        -: 1464:      {
    #####: 1465:        result = ecma_builtin_object_object_assign (obj_p, arguments_list_p + 1, arguments_number - 1);
    #####: 1466:        break;
        -: 1467:      }
    #####: 1468:      case ECMA_OBJECT_ROUTINE_ENTRIES:
        -: 1469:      case ECMA_OBJECT_ROUTINE_VALUES:
        -: 1470:#endif /* JERRY_ESNEXT */
        -: 1471:      case ECMA_OBJECT_ROUTINE_KEYS:
        -: 1472:      {
    #####: 1473:        JERRY_ASSERT (builtin_routine_id - ECMA_OBJECT_ROUTINE_KEYS < ECMA_ENUMERABLE_PROPERTY__COUNT);
        -: 1474:
    #####: 1475:        const int option = builtin_routine_id - ECMA_OBJECT_ROUTINE_KEYS;
    #####: 1476:        result =
    #####: 1477:          ecma_builtin_object_object_keys_values_helper (obj_p, (ecma_enumerable_property_names_options_t) option);
    #####: 1478:        break;
        -: 1479:      }
    #####: 1480:      case ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_DESCRIPTOR:
        -: 1481:      {
    #####: 1482:        ecma_string_t *prop_name_p = ecma_op_to_property_key (arg2);
        -: 1483:
    #####: 1484:        if (prop_name_p == NULL)
        -: 1485:        {
    #####: 1486:          result = ECMA_VALUE_ERROR;
    #####: 1487:          break;
        -: 1488:        }
        -: 1489:
    #####: 1490:        result = ecma_builtin_object_object_get_own_property_descriptor (obj_p, prop_name_p);
    #####: 1491:        ecma_deref_ecma_string (prop_name_p);
    #####: 1492:        break;
        -: 1493:      }
        -: 1494:#if JERRY_ESNEXT
    #####: 1495:      case ECMA_OBJECT_ROUTINE_HAS_OWN:
        -: 1496:      {
    #####: 1497:        ecma_string_t *prop_name_p = ecma_op_to_property_key (arg2);
        -: 1498:
    #####: 1499:        if (prop_name_p == NULL)
        -: 1500:        {
    #####: 1501:          result = ECMA_VALUE_ERROR;
    #####: 1502:          break;
        -: 1503:        }
        -: 1504:
    #####: 1505:        result = ecma_op_object_has_own_property (obj_p, prop_name_p);
    #####: 1506:        ecma_deref_ecma_string (prop_name_p);
    #####: 1507:        break;
        -: 1508:      }
    #####: 1509:      case ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_DESCRIPTORS:
        -: 1510:      {
    #####: 1511:        result = ecma_builtin_object_object_get_own_property_descriptors (obj_p);
    #####: 1512:        break;
        -: 1513:      }
    #####: 1514:      case ECMA_OBJECT_ROUTINE_FROM_ENTRIES:
        -: 1515:      {
    #####: 1516:        result = ecma_builtin_object_from_entries (arg1);
    #####: 1517:        break;
        -: 1518:      }
        -: 1519:#endif /* JERRY_ESNEXT */
    #####: 1520:      default:
        -: 1521:      {
    #####: 1522:        JERRY_UNREACHABLE ();
        -: 1523:      }
        -: 1524:    }
        -: 1525:
        -: 1526:#if JERRY_ESNEXT
    #####: 1527:    ecma_deref_object (obj_p);
        -: 1528:#endif /* JERRY_ESNEXT */
    #####: 1529:    return result;
        -: 1530:  }
    #####: 1531:  else if (builtin_routine_id <= ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_SYMBOLS)
        -: 1532:  {
    #####: 1533:    return ecma_op_object_get_own_property_keys (arg1, builtin_routine_id);
        -: 1534:  }
    #####: 1535:  else if (builtin_routine_id <= ECMA_OBJECT_ROUTINE_SEAL)
        -: 1536:  {
        -: 1537:#if JERRY_ESNEXT
    #####: 1538:    if (!ecma_is_value_object (arg1))
        -: 1539:    {
    #####: 1540:      return ecma_copy_value (arg1);
        -: 1541:    }
        -: 1542:#endif /* JERRY_ESNEXT */
        -: 1543:
    #####: 1544:    obj_p = ecma_get_object_from_value (arg1);
    #####: 1545:    switch (builtin_routine_id)
        -: 1546:    {
    #####: 1547:      case ECMA_OBJECT_ROUTINE_SEAL:
        -: 1548:      {
    #####: 1549:        return ecma_builtin_object_object_seal (obj_p);
        -: 1550:      }
    #####: 1551:      case ECMA_OBJECT_ROUTINE_FREEZE:
        -: 1552:      {
    #####: 1553:        return ecma_builtin_object_object_freeze (obj_p);
        -: 1554:      }
    #####: 1555:      case ECMA_OBJECT_ROUTINE_PREVENT_EXTENSIONS:
        -: 1556:      {
    #####: 1557:        return ecma_builtin_object_object_prevent_extensions (obj_p);
        -: 1558:      }
    #####: 1559:      default:
        -: 1560:      {
    #####: 1561:        JERRY_UNREACHABLE ();
        -: 1562:      }
        -: 1563:    }
        -: 1564:  }
        -: 1565:  else
        -: 1566:  {
    #####: 1567:    JERRY_ASSERT (builtin_routine_id <= ECMA_OBJECT_ROUTINE_IS_SEALED);
        -: 1568:#if JERRY_ESNEXT
    #####: 1569:    if (!ecma_is_value_object (arg1))
        -: 1570:    {
    #####: 1571:      return ecma_make_boolean_value (builtin_routine_id != ECMA_OBJECT_ROUTINE_IS_EXTENSIBLE);
        -: 1572:    }
        -: 1573:#endif /* JERRY_ESNEXT */
        -: 1574:
    #####: 1575:    obj_p = ecma_get_object_from_value (arg1);
    #####: 1576:    switch (builtin_routine_id)
        -: 1577:    {
    #####: 1578:      case ECMA_OBJECT_ROUTINE_IS_SEALED:
        -: 1579:      case ECMA_OBJECT_ROUTINE_IS_FROZEN:
        -: 1580:      {
    #####: 1581:        return ecma_builtin_object_test_integrity_level (obj_p, builtin_routine_id);
        -: 1582:      }
    #####: 1583:      case ECMA_OBJECT_ROUTINE_IS_EXTENSIBLE:
        -: 1584:      {
    #####: 1585:        return ecma_builtin_object_object_is_extensible (obj_p);
        -: 1586:      }
    #####: 1587:      default:
        -: 1588:      {
    #####: 1589:        JERRY_UNREACHABLE ();
        -: 1590:      }
        -: 1591:    }
        -: 1592:  }
        -: 1593:} /* ecma_builtin_object_dispatch_routine */
        -: 1594:
        -: 1595:/**
        -: 1596: * @}
        -: 1597: * @}
        -: 1598: * @}
        -: 1599: */
