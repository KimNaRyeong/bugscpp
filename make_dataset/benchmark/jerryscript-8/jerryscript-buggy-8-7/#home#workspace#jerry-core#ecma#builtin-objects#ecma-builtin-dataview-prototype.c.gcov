        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-dataview-prototype.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-arraybuffer-object.h"
        -:   17:#include "ecma-dataview-object.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-gc.h"
        -:   20:
        -:   21:#if JERRY_BUILTIN_DATAVIEW
        -:   22:
        -:   23:#if !JERRY_BUILTIN_TYPEDARRAY
        -:   24:#error "DataView builtin requires ES2015 TypedArray builtin"
        -:   25:#endif /* !JERRY_BUILTIN_TYPEDARRAY */
        -:   26:
        -:   27:#define ECMA_BUILTINS_INTERNAL
        -:   28:#include "ecma-builtins-internal.h"
        -:   29:
        -:   30:/**
        -:   31: * This object has a custom dispatch function.
        -:   32: */
        -:   33:#define BUILTIN_CUSTOM_DISPATCH
        -:   34:
        -:   35:/**
        -:   36: * List of built-in routine identifiers.
        -:   37: */
        -:   38:enum
        -:   39:{
        -:   40:  ECMA_DATAVIEW_PROTOTYPE_ROUTINE_START = 0,
        -:   41:  ECMA_DATAVIEW_PROTOTYPE_BUFFER_GETTER,
        -:   42:  ECMA_DATAVIEW_PROTOTYPE_BYTE_LENGTH_GETTER,
        -:   43:  ECMA_DATAVIEW_PROTOTYPE_BYTE_OFFSET_GETTER,
        -:   44:  ECMA_DATAVIEW_PROTOTYPE_GET_INT8,
        -:   45:  ECMA_DATAVIEW_PROTOTYPE_GET_UINT8,
        -:   46:  ECMA_DATAVIEW_PROTOTYPE_GET_UINT8_CLAMPED, /* unused value */
        -:   47:  ECMA_DATAVIEW_PROTOTYPE_GET_INT16,
        -:   48:  ECMA_DATAVIEW_PROTOTYPE_GET_UINT16,
        -:   49:  ECMA_DATAVIEW_PROTOTYPE_GET_INT32,
        -:   50:  ECMA_DATAVIEW_PROTOTYPE_GET_UINT32,
        -:   51:  ECMA_DATAVIEW_PROTOTYPE_GET_FLOAT32,
        -:   52:#if JERRY_NUMBER_TYPE_FLOAT64
        -:   53:  ECMA_DATAVIEW_PROTOTYPE_GET_FLOAT64,
        -:   54:#endif /* JERRY_NUMBER_TYPE_FLOAT64 */
        -:   55:#if JERRY_BUILTIN_BIGINT
        -:   56:  ECMA_DATAVIEW_PROTOTYPE_GET_BIGINT64,
        -:   57:  ECMA_DATAVIEW_PROTOTYPE_GET_BIGUINT64,
        -:   58:#endif /* JERRY_BUILTIN_BIGINT */
        -:   59:  ECMA_DATAVIEW_PROTOTYPE_SET_INT8,
        -:   60:  ECMA_DATAVIEW_PROTOTYPE_SET_UINT8,
        -:   61:  ECMA_DATAVIEW_PROTOTYPE_SET_UINT8_CLAMPED, /* unused value */
        -:   62:  ECMA_DATAVIEW_PROTOTYPE_SET_INT16,
        -:   63:  ECMA_DATAVIEW_PROTOTYPE_SET_UINT16,
        -:   64:  ECMA_DATAVIEW_PROTOTYPE_SET_INT32,
        -:   65:  ECMA_DATAVIEW_PROTOTYPE_SET_UINT32,
        -:   66:  ECMA_DATAVIEW_PROTOTYPE_SET_FLOAT32,
        -:   67:#if JERRY_NUMBER_TYPE_FLOAT64
        -:   68:  ECMA_DATAVIEW_PROTOTYPE_SET_FLOAT64,
        -:   69:#endif /* JERRY_NUMBER_TYPE_FLOAT64 */
        -:   70:#if JERRY_BUILTIN_BIGINT
        -:   71:  ECMA_DATAVIEW_PROTOTYPE_SET_BIGINT64,
        -:   72:  ECMA_DATAVIEW_PROTOTYPE_SET_BIGUINT64,
        -:   73:#endif /* JERRY_BUILTIN_BIGINT */
        -:   74:};
        -:   75:
        -:   76:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-dataview-prototype.inc.h"
        -:   77:#define BUILTIN_UNDERSCORED_ID  dataview_prototype
        -:   78:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   79:
        -:   80:/** \addtogroup ecma ECMA
        -:   81: * @{
        -:   82: *
        -:   83: * \addtogroup ecmabuiltins
        -:   84: * @{
        -:   85: *
        -:   86: * \addtogroup dataviewprototype ECMA DataView.prototype object built-in
        -:   87: * @{
        -:   88: */
        -:   89:
        -:   90:/**
        -:   91: * The DataView.prototype object's {buffer, byteOffset, byteLength} getters
        -:   92: *
        -:   93: * See also:
        -:   94: *          ECMA-262 v6, 24.2.4.1
        -:   95: *          ECMA-262 v6, 24.2.4.2
        -:   96: *          ECMA-262 v6, 24.2.4.3
        -:   97: *
        -:   98: * @return ecma value
        -:   99: *         Returned value must be freed with ecma_free_value.
        -:  100: */
        -:  101:static ecma_value_t
    #####:  102:ecma_builtin_dataview_prototype_object_getters (ecma_value_t this_arg, /**< this argument */
        -:  103:                                                uint16_t builtin_routine_id) /**< built-in wide routine identifier */
        -:  104:{
    #####:  105:  ecma_dataview_object_t *obj_p = ecma_op_dataview_get_object (this_arg);
        -:  106:
    #####:  107:  if (JERRY_UNLIKELY (obj_p == NULL))
        -:  108:  {
    #####:  109:    return ECMA_VALUE_ERROR;
        -:  110:  }
        -:  111:
    #####:  112:  switch (builtin_routine_id)
        -:  113:  {
    #####:  114:    case ECMA_DATAVIEW_PROTOTYPE_BUFFER_GETTER:
        -:  115:    {
    #####:  116:      ecma_object_t *buffer_p = obj_p->buffer_p;
    #####:  117:      ecma_ref_object (buffer_p);
        -:  118:
    #####:  119:      return ecma_make_object_value (buffer_p);
        -:  120:    }
    #####:  121:    case ECMA_DATAVIEW_PROTOTYPE_BYTE_LENGTH_GETTER:
        -:  122:    {
    #####:  123:      if (ecma_arraybuffer_is_detached (obj_p->buffer_p))
        -:  124:      {
    #####:  125:        return ecma_raise_type_error (ECMA_ERR_ARRAYBUFFER_IS_DETACHED);
        -:  126:      }
    #####:  127:      return ecma_make_uint32_value (obj_p->header.u.cls.u3.length);
        -:  128:    }
    #####:  129:    default:
        -:  130:    {
    #####:  131:      JERRY_ASSERT (builtin_routine_id == ECMA_DATAVIEW_PROTOTYPE_BYTE_OFFSET_GETTER);
        -:  132:
    #####:  133:      if (ecma_arraybuffer_is_detached (obj_p->buffer_p))
        -:  134:      {
    #####:  135:        return ecma_raise_type_error (ECMA_ERR_ARRAYBUFFER_IS_DETACHED);
        -:  136:      }
    #####:  137:      return ecma_make_uint32_value (obj_p->byte_offset);
        -:  138:    }
        -:  139:  }
        -:  140:} /* ecma_builtin_dataview_prototype_object_getters */
        -:  141:
        -:  142:/**
        -:  143: * Dispatcher of the built-in's routines
        -:  144: *
        -:  145: * @return ecma value
        -:  146: *         Returned value must be freed with ecma_free_value.
        -:  147: */
        -:  148:ecma_value_t
    #####:  149:ecma_builtin_dataview_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  150:                                                  ecma_value_t this_arg, /**< 'this' argument value */
        -:  151:                                                  const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  152:                                                                                          *   passed to routine */
        -:  153:                                                  uint32_t arguments_number) /**< length of arguments' list */
        -:  154:{
        -:  155:  JERRY_UNUSED (arguments_number);
    #####:  156:  switch (builtin_routine_id)
        -:  157:  {
    #####:  158:    case ECMA_DATAVIEW_PROTOTYPE_BUFFER_GETTER:
        -:  159:    case ECMA_DATAVIEW_PROTOTYPE_BYTE_LENGTH_GETTER:
        -:  160:    case ECMA_DATAVIEW_PROTOTYPE_BYTE_OFFSET_GETTER:
        -:  161:    {
    #####:  162:      return ecma_builtin_dataview_prototype_object_getters (this_arg, builtin_routine_id);
        -:  163:    }
    #####:  164:    case ECMA_DATAVIEW_PROTOTYPE_GET_FLOAT32:
        -:  165:#if JERRY_NUMBER_TYPE_FLOAT64
        -:  166:    case ECMA_DATAVIEW_PROTOTYPE_GET_FLOAT64:
        -:  167:#endif /* JERRY_NUMBER_TYPE_FLOAT64 */
        -:  168:    case ECMA_DATAVIEW_PROTOTYPE_GET_INT16:
        -:  169:    case ECMA_DATAVIEW_PROTOTYPE_GET_INT32:
        -:  170:    case ECMA_DATAVIEW_PROTOTYPE_GET_UINT16:
        -:  171:    case ECMA_DATAVIEW_PROTOTYPE_GET_UINT32:
        -:  172:#if JERRY_BUILTIN_BIGINT
        -:  173:    case ECMA_DATAVIEW_PROTOTYPE_GET_BIGINT64:
        -:  174:    case ECMA_DATAVIEW_PROTOTYPE_GET_BIGUINT64:
        -:  175:#endif /* JERRY_BUILTIN_BIGINT */
        -:  176:    {
    #####:  177:      ecma_typedarray_type_t id = (ecma_typedarray_type_t) (builtin_routine_id - ECMA_DATAVIEW_PROTOTYPE_GET_INT8);
        -:  178:
    #####:  179:      return ecma_op_dataview_get_set_view_value (this_arg,
        -:  180:                                                  arguments_list_p[0],
    #####:  181:                                                  arguments_list_p[1],
        -:  182:                                                  ECMA_VALUE_EMPTY,
        -:  183:                                                  id);
        -:  184:    }
    #####:  185:    case ECMA_DATAVIEW_PROTOTYPE_SET_FLOAT32:
        -:  186:#if JERRY_NUMBER_TYPE_FLOAT64
        -:  187:    case ECMA_DATAVIEW_PROTOTYPE_SET_FLOAT64:
        -:  188:#endif /* JERRY_NUMBER_TYPE_FLOAT64 */
        -:  189:    case ECMA_DATAVIEW_PROTOTYPE_SET_INT16:
        -:  190:    case ECMA_DATAVIEW_PROTOTYPE_SET_INT32:
        -:  191:    case ECMA_DATAVIEW_PROTOTYPE_SET_UINT16:
        -:  192:    case ECMA_DATAVIEW_PROTOTYPE_SET_UINT32:
        -:  193:#if JERRY_BUILTIN_BIGINT
        -:  194:    case ECMA_DATAVIEW_PROTOTYPE_SET_BIGINT64:
        -:  195:    case ECMA_DATAVIEW_PROTOTYPE_SET_BIGUINT64:
        -:  196:#endif /* JERRY_BUILTIN_BIGINT */
        -:  197:    {
    #####:  198:      ecma_typedarray_type_t id = (ecma_typedarray_type_t) (builtin_routine_id - ECMA_DATAVIEW_PROTOTYPE_SET_INT8);
        -:  199:
    #####:  200:      return ecma_op_dataview_get_set_view_value (this_arg,
        -:  201:                                                  arguments_list_p[0],
    #####:  202:                                                  arguments_list_p[2],
    #####:  203:                                                  arguments_list_p[1],
        -:  204:                                                  id);
        -:  205:    }
    #####:  206:    case ECMA_DATAVIEW_PROTOTYPE_GET_INT8:
        -:  207:    case ECMA_DATAVIEW_PROTOTYPE_GET_UINT8:
        -:  208:    {
    #####:  209:      ecma_typedarray_type_t id = (ecma_typedarray_type_t) (builtin_routine_id - ECMA_DATAVIEW_PROTOTYPE_GET_INT8);
        -:  210:
    #####:  211:      return ecma_op_dataview_get_set_view_value (this_arg,
        -:  212:                                                  arguments_list_p[0],
        -:  213:                                                  ECMA_VALUE_FALSE,
        -:  214:                                                  ECMA_VALUE_EMPTY,
        -:  215:                                                  id);
        -:  216:    }
    #####:  217:    default:
        -:  218:    {
    #####:  219:      JERRY_ASSERT (builtin_routine_id == ECMA_DATAVIEW_PROTOTYPE_SET_INT8
        -:  220:                    || builtin_routine_id == ECMA_DATAVIEW_PROTOTYPE_SET_UINT8);
    #####:  221:      ecma_typedarray_type_t id = (ecma_typedarray_type_t) (builtin_routine_id - ECMA_DATAVIEW_PROTOTYPE_SET_INT8);
        -:  222:
    #####:  223:      return ecma_op_dataview_get_set_view_value (this_arg,
        -:  224:                                                  arguments_list_p[0],
        -:  225:                                                  ECMA_VALUE_FALSE,
    #####:  226:                                                  arguments_list_p[1],
        -:  227:                                                  id);
        -:  228:    }
        -:  229:  }
        -:  230:} /* ecma_builtin_dataview_prototype_dispatch_routine */
        -:  231:
        -:  232:/**
        -:  233: * @}
        -:  234: * @}
        -:  235: * @}
        -:  236: */
        -:  237:
        -:  238:#endif /* JERRY_BUILTIN_DATAVIEW */
