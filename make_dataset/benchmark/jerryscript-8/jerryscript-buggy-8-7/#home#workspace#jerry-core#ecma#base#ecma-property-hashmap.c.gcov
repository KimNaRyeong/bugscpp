        -:    0:Source:/home/workspace/jerry-core/ecma/base/ecma-property-hashmap.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-property-hashmap.h"
        -:   17:
        -:   18:#include "ecma-globals.h"
        -:   19:#include "ecma-helpers.h"
        -:   20:
        -:   21:#include "jcontext.h"
        -:   22:#include "jrt-libc-includes.h"
        -:   23:
        -:   24:/** \addtogroup ecma ECMA
        -:   25: * @{
        -:   26: *
        -:   27: * \addtogroup ecmapropertyhashmap Property hashmap
        -:   28: * @{
        -:   29: */
        -:   30:
        -:   31:#if JERRY_PROPERTY_HASHMAP
        -:   32:
        -:   33:/**
        -:   34: * Compute the total size of the property hashmap.
        -:   35: */
        -:   36:#define ECMA_PROPERTY_HASHMAP_GET_TOTAL_SIZE(max_property_count) \
        -:   37:  (sizeof (ecma_property_hashmap_t) + (max_property_count * sizeof (jmem_cpointer_t)) + (max_property_count >> 3))
        -:   38:
        -:   39:/**
        -:   40: * Number of items in the stepping table.
        -:   41: */
        -:   42:#define ECMA_PROPERTY_HASHMAP_NUMBER_OF_STEPS 8
        -:   43:
        -:   44:/**
        -:   45: * Stepping values for searching items in the hashmap.
        -:   46: */
        -:   47:static const uint8_t ecma_property_hashmap_steps[ECMA_PROPERTY_HASHMAP_NUMBER_OF_STEPS] JERRY_ATTR_CONST_DATA = {
        -:   48:  3, 5, 7, 11, 13, 17, 19, 23
        -:   49:};
        -:   50:
        -:   51:/**
        -:   52: * Get the value of a bit in a bitmap.
        -:   53: */
        -:   54:#define ECMA_PROPERTY_HASHMAP_GET_BIT(byte_p, index) ((byte_p)[(index) >> 3] & (1 << ((index) &0x7)))
        -:   55:
        -:   56:/**
        -:   57: * Clear the value of a bit in a bitmap.
        -:   58: */
        -:   59:#define ECMA_PROPERTY_HASHMAP_CLEAR_BIT(byte_p, index) \
        -:   60:  ((byte_p)[(index) >> 3] = (uint8_t) ((byte_p)[(index) >> 3] & ~(1 << ((index) &0x7))))
        -:   61:
        -:   62:/**
        -:   63: * Set the value of a bit in a bitmap.
        -:   64: */
        -:   65:#define ECMA_PROPERTY_HASHMAP_SET_BIT(byte_p, index) \
        -:   66:  ((byte_p)[(index) >> 3] = (uint8_t) ((byte_p)[(index) >> 3] | (1 << ((index) &0x7))))
        -:   67:
        -:   68:/**
        -:   69: * Create a new property hashmap for the object.
        -:   70: * The object must not have a property hashmap.
        -:   71: */
        -:   72:void
    #####:   73:ecma_property_hashmap_create (ecma_object_t *object_p) /**< object */
        -:   74:{
    #####:   75:  if (JERRY_CONTEXT (ecma_prop_hashmap_alloc_state) != ECMA_PROP_HASHMAP_ALLOC_ON)
        -:   76:  {
    #####:   77:    return;
        -:   78:  }
        -:   79:
    #####:   80:  jmem_cpointer_t prop_iter_cp = object_p->u1.property_list_cp;
        -:   81:
    #####:   82:  if (prop_iter_cp == JMEM_CP_NULL)
        -:   83:  {
    #####:   84:    return;
        -:   85:  }
        -:   86:
    #####:   87:  uint32_t named_property_count = 0;
        -:   88:
    #####:   89:  while (prop_iter_cp != JMEM_CP_NULL)
        -:   90:  {
    #####:   91:    ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, prop_iter_cp);
    #####:   92:    JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));
        -:   93:
    #####:   94:    for (int i = 0; i < ECMA_PROPERTY_PAIR_ITEM_COUNT; i++)
        -:   95:    {
    #####:   96:      if (prop_iter_p->types[i] != ECMA_PROPERTY_TYPE_DELETED)
        -:   97:      {
    #####:   98:        JERRY_ASSERT (ECMA_PROPERTY_IS_NAMED_PROPERTY (prop_iter_p->types[i]));
    #####:   99:        named_property_count++;
        -:  100:      }
        -:  101:    }
    #####:  102:    prop_iter_cp = prop_iter_p->next_property_cp;
        -:  103:  }
        -:  104:
    #####:  105:  if (named_property_count < (ECMA_PROPERTY_HASMAP_MINIMUM_SIZE / 2))
        -:  106:  {
    #####:  107:    return;
        -:  108:  }
        -:  109:
        -:  110:  /* The max_property_count must be power of 2. */
    #####:  111:  uint32_t max_property_count = ECMA_PROPERTY_HASMAP_MINIMUM_SIZE;
        -:  112:
        -:  113:  /* At least 1/3 items must be NULL. */
    #####:  114:  while (max_property_count < (named_property_count + (named_property_count >> 1)))
        -:  115:  {
    #####:  116:    max_property_count <<= 1;
        -:  117:  }
        -:  118:
    #####:  119:  size_t total_size = ECMA_PROPERTY_HASHMAP_GET_TOTAL_SIZE (max_property_count);
        -:  120:
    #####:  121:  ecma_property_hashmap_t *hashmap_p = (ecma_property_hashmap_t *) jmem_heap_alloc_block_null_on_error (total_size);
        -:  122:
    #####:  123:  if (hashmap_p == NULL)
        -:  124:  {
    #####:  125:    return;
        -:  126:  }
        -:  127:
    #####:  128:  memset (hashmap_p, 0, total_size);
        -:  129:
    #####:  130:  hashmap_p->header.types[0] = ECMA_PROPERTY_TYPE_HASHMAP;
    #####:  131:  hashmap_p->header.next_property_cp = object_p->u1.property_list_cp;
    #####:  132:  hashmap_p->max_property_count = max_property_count;
    #####:  133:  hashmap_p->null_count = max_property_count - named_property_count;
    #####:  134:  hashmap_p->unused_count = max_property_count - named_property_count;
        -:  135:
    #####:  136:  jmem_cpointer_t *pair_list_p = (jmem_cpointer_t *) (hashmap_p + 1);
    #####:  137:  uint8_t *bits_p = (uint8_t *) (pair_list_p + max_property_count);
    #####:  138:  uint32_t mask = max_property_count - 1;
        -:  139:
    #####:  140:  prop_iter_cp = object_p->u1.property_list_cp;
    #####:  141:  ECMA_SET_NON_NULL_POINTER (object_p->u1.property_list_cp, hashmap_p);
        -:  142:
    #####:  143:  while (prop_iter_cp != JMEM_CP_NULL)
        -:  144:  {
    #####:  145:    ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, prop_iter_cp);
    #####:  146:    JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));
        -:  147:
    #####:  148:    for (int i = 0; i < ECMA_PROPERTY_PAIR_ITEM_COUNT; i++)
        -:  149:    {
    #####:  150:      if (prop_iter_p->types[i] == ECMA_PROPERTY_TYPE_DELETED)
        -:  151:      {
    #####:  152:        continue;
        -:  153:      }
        -:  154:
    #####:  155:      JERRY_ASSERT (ECMA_PROPERTY_IS_NAMED_PROPERTY (prop_iter_p->types[i]));
        -:  156:
    #####:  157:      ecma_property_pair_t *property_pair_p = (ecma_property_pair_t *) prop_iter_p;
        -:  158:
    #####:  159:      uint32_t entry_index = ecma_string_get_property_name_hash (prop_iter_p->types[i], property_pair_p->names_cp[i]);
    #####:  160:      uint32_t step = ecma_property_hashmap_steps[entry_index & (ECMA_PROPERTY_HASHMAP_NUMBER_OF_STEPS - 1)];
        -:  161:
    #####:  162:      entry_index &= mask;
        -:  163:#ifndef JERRY_NDEBUG
        -:  164:      /* Because max_property_count (power of 2) and step (a prime
        -:  165:       * number) are relative primes, all entries of the hasmap are
        -:  166:       * visited exactly once before the start entry index is reached
        -:  167:       * again. Furthermore because at least one NULL is present in
        -:  168:       * the hashmap, the while loop must be terminated before the
        -:  169:       * the starting index is reached again. */
    #####:  170:      uint32_t start_entry_index = entry_index;
        -:  171:#endif /* !JERRY_NDEBUG */
        -:  172:
    #####:  173:      while (pair_list_p[entry_index] != ECMA_NULL_POINTER)
        -:  174:      {
    #####:  175:        entry_index = (entry_index + step) & mask;
        -:  176:
        -:  177:#ifndef JERRY_NDEBUG
    #####:  178:        JERRY_ASSERT (entry_index != start_entry_index);
        -:  179:#endif /* !JERRY_NDEBUG */
        -:  180:      }
        -:  181:
    #####:  182:      ECMA_SET_NON_NULL_POINTER (pair_list_p[entry_index], property_pair_p);
        -:  183:
    #####:  184:      if (i != 0)
        -:  185:      {
    #####:  186:        ECMA_PROPERTY_HASHMAP_SET_BIT (bits_p, entry_index);
        -:  187:      }
        -:  188:    }
        -:  189:
    #####:  190:    prop_iter_cp = prop_iter_p->next_property_cp;
        -:  191:  }
        -:  192:} /* ecma_property_hashmap_create */
        -:  193:
        -:  194:/**
        -:  195: * Free the hashmap of the object.
        -:  196: * The object must have a property hashmap.
        -:  197: */
        -:  198:void
    #####:  199:ecma_property_hashmap_free (ecma_object_t *object_p) /**< object */
        -:  200:{
        -:  201:  /* Property hash must be exists and must be the first property. */
    #####:  202:  JERRY_ASSERT (object_p->u1.property_list_cp != JMEM_CP_NULL);
        -:  203:
    #####:  204:  ecma_property_header_t *property_p =
    #####:  205:    ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, object_p->u1.property_list_cp);
        -:  206:
    #####:  207:  JERRY_ASSERT (property_p->types[0] == ECMA_PROPERTY_TYPE_HASHMAP);
        -:  208:
    #####:  209:  ecma_property_hashmap_t *hashmap_p = (ecma_property_hashmap_t *) property_p;
        -:  210:
    #####:  211:  object_p->u1.property_list_cp = property_p->next_property_cp;
        -:  212:
    #####:  213:  jmem_heap_free_block (hashmap_p, ECMA_PROPERTY_HASHMAP_GET_TOTAL_SIZE (hashmap_p->max_property_count));
    #####:  214:} /* ecma_property_hashmap_free */
        -:  215:
        -:  216:/**
        -:  217: * Insert named property into the hashmap.
        -:  218: */
        -:  219:void
    #####:  220:ecma_property_hashmap_insert (ecma_object_t *object_p, /**< object */
        -:  221:                              ecma_string_t *name_p, /**< name of the property */
        -:  222:                              ecma_property_pair_t *property_pair_p, /**< property pair */
        -:  223:                              int property_index) /**< property index in the pair (0 or 1) */
        -:  224:{
    #####:  225:  JERRY_ASSERT (property_pair_p != NULL);
        -:  226:
    #####:  227:  ecma_property_hashmap_t *hashmap_p =
    #####:  228:    ECMA_GET_NON_NULL_POINTER (ecma_property_hashmap_t, object_p->u1.property_list_cp);
        -:  229:
    #####:  230:  JERRY_ASSERT (hashmap_p->header.types[0] == ECMA_PROPERTY_TYPE_HASHMAP);
        -:  231:
        -:  232:  /* The NULLs are reduced below 1/8 of the hashmap. */
    #####:  233:  if (hashmap_p->null_count < (hashmap_p->max_property_count >> 3))
        -:  234:  {
    #####:  235:    ecma_property_hashmap_free (object_p);
    #####:  236:    ecma_property_hashmap_create (object_p);
    #####:  237:    return;
        -:  238:  }
        -:  239:
    #####:  240:  JERRY_ASSERT (property_index < ECMA_PROPERTY_PAIR_ITEM_COUNT);
        -:  241:
    #####:  242:  uint32_t entry_index = ecma_string_hash (name_p);
    #####:  243:  uint32_t step = ecma_property_hashmap_steps[entry_index & (ECMA_PROPERTY_HASHMAP_NUMBER_OF_STEPS - 1)];
    #####:  244:  uint32_t mask = hashmap_p->max_property_count - 1;
    #####:  245:  entry_index &= mask;
        -:  246:
        -:  247:#ifndef JERRY_NDEBUG
        -:  248:  /* See the comment for this variable in ecma_property_hashmap_create. */
    #####:  249:  uint32_t start_entry_index = entry_index;
        -:  250:#endif /* !JERRY_NDEBUG */
        -:  251:
    #####:  252:  jmem_cpointer_t *pair_list_p = (jmem_cpointer_t *) (hashmap_p + 1);
        -:  253:
    #####:  254:  while (pair_list_p[entry_index] != ECMA_NULL_POINTER)
        -:  255:  {
    #####:  256:    entry_index = (entry_index + step) & mask;
        -:  257:
        -:  258:#ifndef JERRY_NDEBUG
    #####:  259:    JERRY_ASSERT (entry_index != start_entry_index);
        -:  260:#endif /* !JERRY_NDEBUG */
        -:  261:  }
        -:  262:
    #####:  263:  ECMA_SET_NON_NULL_POINTER (pair_list_p[entry_index], property_pair_p);
        -:  264:
    #####:  265:  uint8_t *bits_p = (uint8_t *) (pair_list_p + hashmap_p->max_property_count);
    #####:  266:  bits_p += (entry_index >> 3);
    #####:  267:  mask = (uint32_t) (1 << (entry_index & 0x7));
        -:  268:
    #####:  269:  if (!(*bits_p & mask))
        -:  270:  {
        -:  271:    /* Deleted entries also has ECMA_NULL_POINTER
        -:  272:     * value, but they are not NULL values. */
    #####:  273:    hashmap_p->null_count--;
    #####:  274:    JERRY_ASSERT (hashmap_p->null_count > 0);
        -:  275:  }
        -:  276:
    #####:  277:  hashmap_p->unused_count--;
    #####:  278:  JERRY_ASSERT (hashmap_p->unused_count > 0);
        -:  279:
    #####:  280:  if (property_index == 0)
        -:  281:  {
    #####:  282:    *bits_p = (uint8_t) ((*bits_p) & ~mask);
        -:  283:  }
        -:  284:  else
        -:  285:  {
    #####:  286:    *bits_p = (uint8_t) ((*bits_p) | mask);
        -:  287:  }
        -:  288:} /* ecma_property_hashmap_insert */
        -:  289:
        -:  290:/**
        -:  291: * Delete named property from the hashmap.
        -:  292: *
        -:  293: * @return ECMA_PROPERTY_HASHMAP_DELETE_RECREATE_HASHMAP if hashmap should be recreated
        -:  294: *         ECMA_PROPERTY_HASHMAP_DELETE_HAS_HASHMAP otherwise
        -:  295: */
        -:  296:ecma_property_hashmap_delete_status
    #####:  297:ecma_property_hashmap_delete (ecma_object_t *object_p, /**< object */
        -:  298:                              jmem_cpointer_t name_cp, /**< property name */
        -:  299:                              ecma_property_t *property_p) /**< property */
        -:  300:{
    #####:  301:  ecma_property_hashmap_t *hashmap_p =
    #####:  302:    ECMA_GET_NON_NULL_POINTER (ecma_property_hashmap_t, object_p->u1.property_list_cp);
        -:  303:
    #####:  304:  JERRY_ASSERT (hashmap_p->header.types[0] == ECMA_PROPERTY_TYPE_HASHMAP);
        -:  305:
    #####:  306:  hashmap_p->unused_count++;
        -:  307:
        -:  308:  /* The NULLs are above 3/4 of the hashmap. */
    #####:  309:  if (hashmap_p->unused_count > ((hashmap_p->max_property_count * 3) >> 2))
        -:  310:  {
    #####:  311:    return ECMA_PROPERTY_HASHMAP_DELETE_RECREATE_HASHMAP;
        -:  312:  }
        -:  313:
    #####:  314:  uint32_t entry_index = ecma_string_get_property_name_hash (*property_p, name_cp);
    #####:  315:  uint32_t step = ecma_property_hashmap_steps[entry_index & (ECMA_PROPERTY_HASHMAP_NUMBER_OF_STEPS - 1)];
    #####:  316:  uint32_t mask = hashmap_p->max_property_count - 1;
    #####:  317:  jmem_cpointer_t *pair_list_p = (jmem_cpointer_t *) (hashmap_p + 1);
    #####:  318:  uint8_t *bits_p = (uint8_t *) (pair_list_p + hashmap_p->max_property_count);
        -:  319:
    #####:  320:  entry_index &= mask;
        -:  321:
        -:  322:#ifndef JERRY_NDEBUG
        -:  323:  /* See the comment for this variable in ecma_property_hashmap_create. */
    #####:  324:  uint32_t start_entry_index = entry_index;
        -:  325:#endif /* !JERRY_NDEBUG */
        -:  326:
        -:  327:  while (true)
        -:  328:  {
    #####:  329:    if (pair_list_p[entry_index] != ECMA_NULL_POINTER)
        -:  330:    {
    #####:  331:      size_t offset = 0;
        -:  332:
    #####:  333:      if (ECMA_PROPERTY_HASHMAP_GET_BIT (bits_p, entry_index))
        -:  334:      {
    #####:  335:        offset = 1;
        -:  336:      }
        -:  337:
    #####:  338:      ecma_property_pair_t *property_pair_p =
    #####:  339:        ECMA_GET_NON_NULL_POINTER (ecma_property_pair_t, pair_list_p[entry_index]);
        -:  340:
    #####:  341:      if ((property_pair_p->header.types + offset) == property_p)
        -:  342:      {
    #####:  343:        JERRY_ASSERT (property_pair_p->names_cp[offset] == name_cp);
        -:  344:
    #####:  345:        pair_list_p[entry_index] = ECMA_NULL_POINTER;
    #####:  346:        ECMA_PROPERTY_HASHMAP_SET_BIT (bits_p, entry_index);
    #####:  347:        return ECMA_PROPERTY_HASHMAP_DELETE_HAS_HASHMAP;
        -:  348:      }
        -:  349:    }
        -:  350:    else
        -:  351:    {
        -:  352:      /* Must be a deleted entry. */
    #####:  353:      JERRY_ASSERT (ECMA_PROPERTY_HASHMAP_GET_BIT (bits_p, entry_index));
        -:  354:    }
        -:  355:
    #####:  356:    entry_index = (entry_index + step) & mask;
        -:  357:
        -:  358:#ifndef JERRY_NDEBUG
    #####:  359:    JERRY_ASSERT (entry_index != start_entry_index);
        -:  360:#endif /* !JERRY_NDEBUG */
        -:  361:  }
        -:  362:} /* ecma_property_hashmap_delete */
        -:  363:
        -:  364:/**
        -:  365: * Find a named property.
        -:  366: *
        -:  367: * @return pointer to the property if found or NULL otherwise
        -:  368: */
        -:  369:ecma_property_t *
    #####:  370:ecma_property_hashmap_find (ecma_property_hashmap_t *hashmap_p, /**< hashmap */
        -:  371:                            ecma_string_t *name_p, /**< property name */
        -:  372:                            jmem_cpointer_t *property_real_name_cp) /**< [out] property real name */
        -:  373:{
        -:  374:#ifndef JERRY_NDEBUG
        -:  375:  /* A sanity check in debug mode: a named property must be present
        -:  376:   * in both the property hashmap and in the property chain, or missing
        -:  377:   * from both data collection. The following code checks the property
        -:  378:   * chain, and sets the property_found variable. */
    #####:  379:  bool property_found = false;
        -:  380:
    #####:  381:  jmem_cpointer_t prop_iter_cp = hashmap_p->header.next_property_cp;
        -:  382:
    #####:  383:  while (prop_iter_cp != JMEM_CP_NULL && !property_found)
        -:  384:  {
    #####:  385:    ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, prop_iter_cp);
    #####:  386:    JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));
        -:  387:
    #####:  388:    ecma_property_pair_t *prop_pair_p = (ecma_property_pair_t *) prop_iter_p;
        -:  389:
    #####:  390:    for (int i = 0; i < ECMA_PROPERTY_PAIR_ITEM_COUNT; i++)
        -:  391:    {
    #####:  392:      if (ECMA_PROPERTY_IS_NAMED_PROPERTY (prop_iter_p->types[i]))
        -:  393:      {
    #####:  394:        if (ecma_string_compare_to_property_name (prop_iter_p->types[i], prop_pair_p->names_cp[i], name_p))
        -:  395:        {
        -:  396:          /* Property is found */
    #####:  397:          property_found = true;
    #####:  398:          break;
        -:  399:        }
        -:  400:      }
        -:  401:    }
        -:  402:
    #####:  403:    prop_iter_cp = prop_iter_p->next_property_cp;
        -:  404:  }
        -:  405:#endif /* !JERRY_NDEBUG */
        -:  406:
    #####:  407:  uint32_t entry_index = ecma_string_hash (name_p);
    #####:  408:  uint32_t step = ecma_property_hashmap_steps[entry_index & (ECMA_PROPERTY_HASHMAP_NUMBER_OF_STEPS - 1)];
    #####:  409:  uint32_t mask = hashmap_p->max_property_count - 1;
    #####:  410:  jmem_cpointer_t *pair_list_p = (jmem_cpointer_t *) (hashmap_p + 1);
    #####:  411:  uint8_t *bits_p = (uint8_t *) (pair_list_p + hashmap_p->max_property_count);
    #####:  412:  entry_index &= mask;
        -:  413:
        -:  414:#ifndef JERRY_NDEBUG
        -:  415:  /* See the comment for this variable in ecma_property_hashmap_create. */
    #####:  416:  uint32_t start_entry_index = entry_index;
        -:  417:#endif /* !JERRY_NDEBUG */
        -:  418:
    #####:  419:  if (ECMA_IS_DIRECT_STRING (name_p))
        -:  420:  {
    #####:  421:    ecma_property_t prop_name_type = (ecma_property_t) ECMA_GET_DIRECT_STRING_TYPE (name_p);
    #####:  422:    jmem_cpointer_t property_name_cp = (jmem_cpointer_t) ECMA_GET_DIRECT_STRING_VALUE (name_p);
        -:  423:
    #####:  424:    JERRY_ASSERT (prop_name_type > 0);
        -:  425:
        -:  426:    while (true)
        -:  427:    {
    #####:  428:      if (pair_list_p[entry_index] != ECMA_NULL_POINTER)
        -:  429:      {
    #####:  430:        size_t offset = 0;
    #####:  431:        if (ECMA_PROPERTY_HASHMAP_GET_BIT (bits_p, entry_index))
        -:  432:        {
    #####:  433:          offset = 1;
        -:  434:        }
        -:  435:
    #####:  436:        ecma_property_pair_t *property_pair_p =
    #####:  437:          ECMA_GET_NON_NULL_POINTER (ecma_property_pair_t, pair_list_p[entry_index]);
        -:  438:
    #####:  439:        ecma_property_t *property_p = property_pair_p->header.types + offset;
        -:  440:
    #####:  441:        JERRY_ASSERT (ECMA_PROPERTY_IS_NAMED_PROPERTY (*property_p));
        -:  442:
    #####:  443:        if (property_pair_p->names_cp[offset] == property_name_cp
    #####:  444:            && ECMA_PROPERTY_GET_NAME_TYPE (*property_p) == prop_name_type)
        -:  445:        {
        -:  446:#ifndef JERRY_NDEBUG
    #####:  447:          JERRY_ASSERT (property_found);
        -:  448:#endif /* !JERRY_NDEBUG */
        -:  449:
    #####:  450:          *property_real_name_cp = property_name_cp;
    #####:  451:          return property_p;
        -:  452:        }
        -:  453:      }
        -:  454:      else
        -:  455:      {
    #####:  456:        if (!ECMA_PROPERTY_HASHMAP_GET_BIT (bits_p, entry_index))
        -:  457:        {
        -:  458:#ifndef JERRY_NDEBUG
    #####:  459:          JERRY_ASSERT (!property_found);
        -:  460:#endif /* !JERRY_NDEBUG */
        -:  461:
    #####:  462:          return NULL;
        -:  463:        }
        -:  464:        /* Otherwise it is a deleted entry. */
        -:  465:      }
        -:  466:
    #####:  467:      entry_index = (entry_index + step) & mask;
        -:  468:
        -:  469:#ifndef JERRY_NDEBUG
    #####:  470:      JERRY_ASSERT (entry_index != start_entry_index);
        -:  471:#endif /* !JERRY_NDEBUG */
        -:  472:    }
        -:  473:  }
        -:  474:
        -:  475:  while (true)
        -:  476:  {
    #####:  477:    if (pair_list_p[entry_index] != ECMA_NULL_POINTER)
        -:  478:    {
    #####:  479:      size_t offset = 0;
    #####:  480:      if (ECMA_PROPERTY_HASHMAP_GET_BIT (bits_p, entry_index))
        -:  481:      {
    #####:  482:        offset = 1;
        -:  483:      }
        -:  484:
    #####:  485:      ecma_property_pair_t *property_pair_p =
    #####:  486:        ECMA_GET_NON_NULL_POINTER (ecma_property_pair_t, pair_list_p[entry_index]);
        -:  487:
    #####:  488:      ecma_property_t *property_p = property_pair_p->header.types + offset;
        -:  489:
    #####:  490:      JERRY_ASSERT (ECMA_PROPERTY_IS_NAMED_PROPERTY (*property_p));
        -:  491:
    #####:  492:      if (ECMA_PROPERTY_GET_NAME_TYPE (*property_p) == ECMA_DIRECT_STRING_PTR)
        -:  493:      {
    #####:  494:        ecma_string_t *prop_name_p = ECMA_GET_NON_NULL_POINTER (ecma_string_t, property_pair_p->names_cp[offset]);
        -:  495:
    #####:  496:        if (ecma_compare_ecma_non_direct_strings (prop_name_p, name_p))
        -:  497:        {
        -:  498:#ifndef JERRY_NDEBUG
    #####:  499:          JERRY_ASSERT (property_found);
        -:  500:#endif /* !JERRY_NDEBUG */
        -:  501:
    #####:  502:          *property_real_name_cp = property_pair_p->names_cp[offset];
    #####:  503:          return property_p;
        -:  504:        }
        -:  505:      }
        -:  506:    }
        -:  507:    else
        -:  508:    {
    #####:  509:      if (!ECMA_PROPERTY_HASHMAP_GET_BIT (bits_p, entry_index))
        -:  510:      {
        -:  511:#ifndef JERRY_NDEBUG
    #####:  512:        JERRY_ASSERT (!property_found);
        -:  513:#endif /* !JERRY_NDEBUG */
        -:  514:
    #####:  515:        return NULL;
        -:  516:      }
        -:  517:      /* Otherwise it is a deleted entry. */
        -:  518:    }
        -:  519:
    #####:  520:    entry_index = (entry_index + step) & mask;
        -:  521:
        -:  522:#ifndef JERRY_NDEBUG
    #####:  523:    JERRY_ASSERT (entry_index != start_entry_index);
        -:  524:#endif /* !JERRY_NDEBUG */
        -:  525:  }
        -:  526:} /* ecma_property_hashmap_find */
        -:  527:#endif /* JERRY_PROPERTY_HASHMAP */
        -:  528:
        -:  529:/**
        -:  530: * @}
        -:  531: * @}
        -:  532: */
