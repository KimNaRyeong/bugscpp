        -:    0:Source:/home/workspace/jerry-port/default/default-date.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <time.h>
        -:   17:
        -:   18:#ifdef _WIN32
        -:   19:#include <windows.h>
        -:   20:
        -:   21:#include <winbase.h>
        -:   22:#include <winnt.h>
        -:   23:#endif /* _WIN32 */
        -:   24:
        -:   25:#if defined(__GNUC__) || defined(__clang__)
        -:   26:#include <sys/time.h>
        -:   27:#endif /* __GNUC__ || __clang__ */
        -:   28:
        -:   29:#include "jerryscript-port-default.h"
        -:   30:#include "jerryscript-port.h"
        -:   31:
        -:   32:#ifdef _WIN32
        -:   33:static const LONGLONG UnixEpochInTicks = 116444736000000000; /* difference between 1970 and 1601 */
        -:   34:static const LONGLONG TicksPerMs = 10000; /* 1 tick is 100 nanoseconds */
        -:   35:
        -:   36:/* https://support.microsoft.com/en-us/help/167296/how-to-convert-a-unix-time-t-to-a-win32-filetime-or-systemtime */
        -:   37:static void
        -:   38:UnixTimeMsToFileTime (double t, LPFILETIME pft)
        -:   39:{
        -:   40:  LONGLONG ll = (LONGLONG) t * TicksPerMs + UnixEpochInTicks;
        -:   41:  pft->dwLowDateTime = (DWORD) ll;
        -:   42:  pft->dwHighDateTime = (DWORD) (ll >> 32);
        -:   43:} /* UnixTimeMsToFileTime */
        -:   44:
        -:   45:static double
        -:   46:FileTimeToUnixTimeMs (FILETIME ft)
        -:   47:{
        -:   48:  ULARGE_INTEGER date;
        -:   49:  date.HighPart = ft.dwHighDateTime;
        -:   50:  date.LowPart = ft.dwLowDateTime;
        -:   51:  return (double) (((LONGLONG) date.QuadPart - UnixEpochInTicks) / TicksPerMs);
        -:   52:} /* FileTimeToUnixTimeMs */
        -:   53:
        -:   54:#endif /* _WIN32 */
        -:   55:
        -:   56:/**
        -:   57: * Default implementation of jerry_port_get_local_time_zone_adjustment.
        -:   58: *
        -:   59: * @return offset between UTC and local time at the given unix timestamp, if
        -:   60: *         available. Otherwise, returns 0, assuming UTC time.
        -:   61: */
        -:   62:double
    #####:   63:jerry_port_get_local_time_zone_adjustment (double unix_ms, /**< ms since unix epoch */
        -:   64:                                           bool is_utc) /**< is the time above in UTC? */
        -:   65:{
        -:   66:#if defined(HAVE_TM_GMTOFF)
    #####:   67:  struct tm tm;
    #####:   68:  time_t now = (time_t) (unix_ms / 1000);
    #####:   69:  localtime_r (&now, &tm);
        -:   70:
    #####:   71:  if (!is_utc)
        -:   72:  {
    #####:   73:    now -= tm.tm_gmtoff;
    #####:   74:    localtime_r (&now, &tm);
        -:   75:  }
        -:   76:
    #####:   77:  return ((double) tm.tm_gmtoff) * 1000;
        -:   78:#elif defined(_WIN32)
        -:   79:  FILETIME fileTime, localFileTime;
        -:   80:  SYSTEMTIME systemTime, localSystemTime;
        -:   81:  ULARGE_INTEGER time, localTime;
        -:   82:
        -:   83:  UnixTimeMsToFileTime (unix_ms, &fileTime);
        -:   84:  /* If time is earlier than year 1601, then always using year 1601 to query time zone adjustment */
        -:   85:  if (fileTime.dwHighDateTime >= 0x80000000)
        -:   86:  {
        -:   87:    fileTime.dwHighDateTime = 0;
        -:   88:    fileTime.dwLowDateTime = 0;
        -:   89:  }
        -:   90:
        -:   91:  if (FileTimeToSystemTime (&fileTime, &systemTime)
        -:   92:      && SystemTimeToTzSpecificLocalTime (0, &systemTime, &localSystemTime)
        -:   93:      && SystemTimeToFileTime (&localSystemTime, &localFileTime))
        -:   94:  {
        -:   95:    time.LowPart = fileTime.dwLowDateTime;
        -:   96:    time.HighPart = fileTime.dwHighDateTime;
        -:   97:    localTime.LowPart = localFileTime.dwLowDateTime;
        -:   98:    localTime.HighPart = localFileTime.dwHighDateTime;
        -:   99:    return (double) (((LONGLONG) localTime.QuadPart - (LONGLONG) time.QuadPart) / TicksPerMs);
        -:  100:  }
        -:  101:  return 0.0;
        -:  102:#elif defined(__GNUC__) || defined(__clang__)
        -:  103:  time_t now_time = (time_t) (unix_ms / 1000);
        -:  104:  double tza_s = 0.0;
        -:  105:
        -:  106:  while (true)
        -:  107:  {
        -:  108:    struct tm now_tm;
        -:  109:    if (!gmtime_r (&now_time, &now_tm))
        -:  110:    {
        -:  111:      break;
        -:  112:    }
        -:  113:    now_tm.tm_isdst = -1; /* if not overridden, DST will not be taken into account */
        -:  114:    time_t local_time = mktime (&now_tm);
        -:  115:    if (local_time == (time_t) -1)
        -:  116:    {
        -:  117:      break;
        -:  118:    }
        -:  119:    tza_s = difftime (now_time, local_time);
        -:  120:
        -:  121:    if (is_utc)
        -:  122:    {
        -:  123:      break;
        -:  124:    }
        -:  125:    now_time -= (time_t) tza_s;
        -:  126:    is_utc = true;
        -:  127:  }
        -:  128:
        -:  129:  return tza_s * 1000;
        -:  130:#else /* !HAVE_TM_GMTOFF && !_WIN32 && !__GNUC__ && !__clang__ */
        -:  131:  (void) unix_ms; /* unused */
        -:  132:  (void) is_utc; /* unused */
        -:  133:  return 0.0;
        -:  134:#endif /* HAVE_TM_GMTOFF */
        -:  135:} /* jerry_port_get_local_time_zone_adjustment */
        -:  136:
        -:  137:/**
        -:  138: * Default implementation of jerry_port_get_current_time. Uses 'gettimeofday' if
        -:  139: * available on the system, does nothing otherwise.
        -:  140: *
        -:  141: * @return milliseconds since Unix epoch - if 'gettimeofday' is available and
        -:  142: *                                         executed successfully,
        -:  143: *         0 - otherwise.
        -:  144: */
        -:  145:double
        1:  146:jerry_port_get_current_time (void)
        -:  147:{
        -:  148:#ifdef _WIN32
        -:  149:  FILETIME ft;
        -:  150:  GetSystemTimeAsFileTime (&ft);
        -:  151:  return FileTimeToUnixTimeMs (ft);
        -:  152:#elif defined(__GNUC__) || defined(__clang__)
        1:  153:  struct timeval tv;
        -:  154:
        1:  155:  if (gettimeofday (&tv, NULL) == 0)
        -:  156:  {
        1:  157:    return ((double) tv.tv_sec) * 1000.0 + ((double) tv.tv_usec) / 1000.0;
        -:  158:  }
    #####:  159:  return 0.0;
        -:  160:#else /* !_WIN32 && !__GNUC__ && !__clang__ */
        -:  161:  return 0.0;
        -:  162:#endif /* _WIN32 */
        -:  163:} /* jerry_port_get_current_time */
