        -:    0:Source:/home/workspace/jerry-main/cli.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "cli.h"
        -:   17:
        -:   18:#include <stdio.h>
        -:   19:#include <stdlib.h>
        -:   20:
        -:   21:/*
        -:   22: * Fixed layout settings
        -:   23: */
        -:   24:
        -:   25:/**
        -:   26: * Wrap lines at:
        -:   27: */
        -:   28:#define CLI_LINE_LENGTH 80
        -:   29:
        -:   30:/**
        -:   31: * Indent various lines with:
        -:   32: */
        -:   33:#define CLI_LINE_INDENT 2
        -:   34:
        -:   35:/**
        -:   36: * Tab stop (for multi-column display) at:
        -:   37: */
        -:   38:#define CLI_LINE_TAB 24
        -:   39:
        -:   40:/**
        -:   41: * Declare a char VLA and concatenate a program name and a sub-command name
        -:   42: * (separated by a single space) into the new array. Useful for printing command
        -:   43: * line option usage summary for sub-commands.
        -:   44: *
        -:   45: * @param CMDNAME name of the new array variable.
        -:   46: * @param PROGNAME string containing the name of the program.
        -:   47: * @param CMD string continaing the name of the sub-command.
        -:   48: */
        -:   49:#define CLI_CMD_NAME(CMDNAME, PROGNAME, CMD)              \
        -:   50:  char CMDNAME[strlen ((PROGNAME)) + strlen ((CMD)) + 2]; \
        -:   51:  strncpy (CMDNAME, (PROGNAME), strlen ((PROGNAME)));     \
        -:   52:  CMDNAME[strlen ((PROGNAME))] = ' ';                     \
        -:   53:  strncpy (CMDNAME + strlen ((PROGNAME)) + 1, (CMD), strlen ((CMD)) + 1)
        -:   54:
        -:   55:/*
        -:   56: * Command line option handling
        -:   57: */
        -:   58:
        -:   59:/**
        -:   60: * Initialize a command line option processor.
        -:   61: *
        -:   62: * @return the state that should be passed to other cli_ functions.
        -:   63: */
        -:   64:cli_state_t
        1:   65:cli_init (const cli_opt_t *options_p, /**< array of option definitions, terminated by CLI_OPT_DEFAULT */
        -:   66:          int argc, /**< number of command line arguments */
        -:   67:          char **argv) /**< array of command line arguments */
        -:   68:{
        1:   69:  return (cli_state_t){ .error = NULL, .arg = NULL, .index = 1, .argc = argc, .argv = argv, .opts = options_p };
        -:   70:} /* cli_init */
        -:   71:
        -:   72:/**
        -:   73: * Use another option list.
        -:   74: */
        -:   75:void
    #####:   76:cli_change_opts (cli_state_t *state_p, /**< state of the command line option processor */
        -:   77:                 const cli_opt_t *options_p) /**< array of option definitions, terminated by CLI_OPT_DEFAULT */
        -:   78:{
    #####:   79:  state_p->opts = options_p;
    #####:   80:} /* cli_change_opts */
        -:   81:
        -:   82:/**
        -:   83: * Checks whether the current argument is an option.
        -:   84: *
        -:   85: * Note:
        -:   86: *   The state_p->error is not NULL on error and it contains the error message.
        -:   87: *
        -:   88: * @return the ID of the option that was found or a CLI_OPT_ constant otherwise.
        -:   89: */
        -:   90:int
        2:   91:cli_consume_option (cli_state_t *state_p) /**< state of the command line option processor */
        -:   92:{
        2:   93:  if (state_p->error != NULL)
        -:   94:  {
    #####:   95:    return CLI_OPT_END;
        -:   96:  }
        -:   97:
        2:   98:  if (state_p->index >= state_p->argc)
        -:   99:  {
        1:  100:    state_p->arg = NULL;
        1:  101:    return CLI_OPT_END;
        -:  102:  }
        -:  103:
        1:  104:  const char *arg = state_p->argv[state_p->index];
        -:  105:
        1:  106:  state_p->arg = arg;
        -:  107:
        1:  108:  if (arg[0] != '-')
        -:  109:  {
        1:  110:    return CLI_OPT_DEFAULT;
        -:  111:  }
        -:  112:
    #####:  113:  if (arg[1] == '-')
        -:  114:  {
    #####:  115:    arg += 2;
        -:  116:
    #####:  117:    for (const cli_opt_t *opt = state_p->opts; opt->id != CLI_OPT_DEFAULT; opt++)
        -:  118:    {
    #####:  119:      if (opt->longopt != NULL && strcmp (arg, opt->longopt) == 0)
        -:  120:      {
    #####:  121:        state_p->index++;
    #####:  122:        return opt->id;
        -:  123:      }
        -:  124:    }
        -:  125:
    #####:  126:    state_p->error = "Unknown long option";
    #####:  127:    return CLI_OPT_END;
        -:  128:  }
        -:  129:
    #####:  130:  arg++;
        -:  131:
    #####:  132:  for (const cli_opt_t *opt = state_p->opts; opt->id != CLI_OPT_DEFAULT; opt++)
        -:  133:  {
    #####:  134:    if (opt->opt != NULL && strcmp (arg, opt->opt) == 0)
        -:  135:    {
    #####:  136:      state_p->index++;
    #####:  137:      return opt->id;
        -:  138:    }
        -:  139:  }
        -:  140:
    #####:  141:  state_p->error = "Unknown option";
    #####:  142:  return CLI_OPT_END;
        -:  143:} /* cli_consume_option */
        -:  144:
        -:  145:/**
        -:  146: * Returns the next argument as string.
        -:  147: *
        -:  148: * Note:
        -:  149: *   The state_p->error is not NULL on error and it contains the error message.
        -:  150: *
        -:  151: * @return argument string
        -:  152: */
        -:  153:const char *
        1:  154:cli_consume_string (cli_state_t *state_p) /**< state of the command line option processor */
        -:  155:{
        1:  156:  if (state_p->error != NULL)
        -:  157:  {
    #####:  158:    return NULL;
        -:  159:  }
        -:  160:
        1:  161:  if (state_p->index >= state_p->argc)
        -:  162:  {
    #####:  163:    state_p->error = "Expected string argument";
    #####:  164:    state_p->arg = NULL;
    #####:  165:    return NULL;
        -:  166:  }
        -:  167:
        1:  168:  state_p->arg = state_p->argv[state_p->index];
        -:  169:
        1:  170:  state_p->index++;
        1:  171:  return state_p->arg;
        -:  172:} /* cli_consume_string */
        -:  173:
        -:  174:/**
        -:  175: * Returns the next argument as integer.
        -:  176: *
        -:  177: * Note:
        -:  178: *   The state_p->error is not NULL on error and it contains the error message.
        -:  179: *
        -:  180: * @return argument integer
        -:  181: */
        -:  182:int
    #####:  183:cli_consume_int (cli_state_t *state_p) /**< state of the command line option processor */
        -:  184:{
    #####:  185:  if (state_p->error != NULL)
        -:  186:  {
    #####:  187:    return 0;
        -:  188:  }
        -:  189:
    #####:  190:  state_p->error = "Expected integer argument";
        -:  191:
    #####:  192:  if (state_p->index >= state_p->argc)
        -:  193:  {
    #####:  194:    state_p->arg = NULL;
    #####:  195:    return 0;
        -:  196:  }
        -:  197:
    #####:  198:  state_p->arg = state_p->argv[state_p->index];
        -:  199:
    #####:  200:  char *endptr;
    #####:  201:  long int value = strtol (state_p->arg, &endptr, 10);
        -:  202:
    #####:  203:  if (*endptr != '\0')
        -:  204:  {
    #####:  205:    return 0;
        -:  206:  }
        -:  207:
    #####:  208:  state_p->error = NULL;
    #####:  209:  state_p->index++;
    #####:  210:  return (int) value;
        -:  211:} /* cli_consume_int */
        -:  212:
        -:  213:/**
        -:  214: * Return next agument as path index.
        -:  215: *
        -:  216: * @return path index
        -:  217: */
        -:  218:uint32_t
        1:  219:cli_consume_path (cli_state_t *state_p) /**< state of the command line option processor */
        -:  220:{
        1:  221:  if (state_p->error != NULL)
        -:  222:  {
    #####:  223:    return 0;
        -:  224:  }
        -:  225:
        1:  226:  uint32_t path_index = (uint32_t) state_p->index;
        1:  227:  cli_consume_string (state_p);
        -:  228:
        1:  229:  return path_index;
        -:  230:} /* cli_consume_path */
        -:  231:
        -:  232:/*
        -:  233: * Print helper functions
        -:  234: */
        -:  235:
        -:  236:/**
        -:  237: * Pad with spaces.
        -:  238: */
        -:  239:static void
    #####:  240:cli_print_pad (int cnt) /**< number of spaces to print */
        -:  241:{
    #####:  242:  for (int i = 0; i < cnt; i++)
        -:  243:  {
    #####:  244:    printf (" ");
        -:  245:  }
    #####:  246:} /* cli_print_pad */
        -:  247:
        -:  248:/**
        -:  249: * Print the prefix of a string.
        -:  250: */
        -:  251:static void
    #####:  252:cli_print_prefix (const char *str, /**< string to print */
        -:  253:                  int len) /**< length of the prefix to print */
        -:  254:{
    #####:  255:  for (int i = 0; i < len; i++)
        -:  256:  {
    #####:  257:    printf ("%c", *str++);
        -:  258:  }
    #####:  259:} /* cli_print_prefix */
        -:  260:
        -:  261:/**
        -:  262: * Print usage summary of options.
        -:  263: */
        -:  264:static void
    #####:  265:cli_opt_usage (const char *prog_name_p, /**< program name, typically argv[0] */
        -:  266:               const char *command_name_p, /**< command name if available */
        -:  267:               const cli_opt_t *opts_p) /**< array of command line option definitions, terminated by CLI_OPT_DEFAULT */
        -:  268:{
    #####:  269:  int length = (int) strlen (prog_name_p);
    #####:  270:  const cli_opt_t *current_opt_p = opts_p;
        -:  271:
    #####:  272:  printf ("%s", prog_name_p);
        -:  273:
    #####:  274:  if (command_name_p != NULL)
        -:  275:  {
    #####:  276:    int command_length = (int) strlen (command_name_p);
        -:  277:
    #####:  278:    if (length + 1 + command_length > CLI_LINE_LENGTH)
        -:  279:    {
    #####:  280:      length = CLI_LINE_INDENT - 1;
    #####:  281:      printf ("\n");
    #####:  282:      cli_print_pad (length);
        -:  283:    }
        -:  284:
    #####:  285:    printf (" %s", command_name_p);
        -:  286:  }
        -:  287:
    #####:  288:  while (current_opt_p->id != CLI_OPT_DEFAULT)
        -:  289:  {
    #####:  290:    const char *opt_p = current_opt_p->opt;
    #####:  291:    int opt_length = 2 + 1;
        -:  292:
    #####:  293:    if (opt_p == NULL)
        -:  294:    {
    #####:  295:      opt_p = current_opt_p->longopt;
    #####:  296:      opt_length++;
        -:  297:    }
        -:  298:
    #####:  299:    opt_length += (int) strlen (opt_p);
        -:  300:
    #####:  301:    if (length + 1 + opt_length >= CLI_LINE_LENGTH)
        -:  302:    {
    #####:  303:      length = CLI_LINE_INDENT - 1;
    #####:  304:      printf ("\n");
    #####:  305:      cli_print_pad (length);
        -:  306:    }
    #####:  307:    length += opt_length;
        -:  308:
    #####:  309:    printf (" [");
        -:  310:
    #####:  311:    if (current_opt_p->opt != NULL)
        -:  312:    {
    #####:  313:      printf ("-%s", opt_p);
        -:  314:    }
        -:  315:    else
        -:  316:    {
    #####:  317:      printf ("--%s", opt_p);
        -:  318:    }
        -:  319:
    #####:  320:    if (current_opt_p->meta != NULL)
        -:  321:    {
    #####:  322:      printf (" %s", current_opt_p->meta);
        -:  323:    }
        -:  324:
    #####:  325:    printf ("]");
        -:  326:
    #####:  327:    current_opt_p++;
        -:  328:  }
        -:  329:
    #####:  330:  if (current_opt_p->meta != NULL)
        -:  331:  {
    #####:  332:    const char *opt_p = current_opt_p->meta;
    #####:  333:    int opt_length = (int) (2 + strlen (opt_p));
        -:  334:
    #####:  335:    if (length + 1 + opt_length >= CLI_LINE_LENGTH)
        -:  336:    {
    #####:  337:      length = CLI_LINE_INDENT - 1;
    #####:  338:      printf ("\n");
    #####:  339:      cli_print_pad (length);
        -:  340:    }
        -:  341:
    #####:  342:    printf (" [%s]", opt_p);
        -:  343:  }
        -:  344:
    #####:  345:  printf ("\n\n");
    #####:  346:} /* cli_opt_usage */
        -:  347:
        -:  348:/**
        -:  349: * Print a help message wrapped into the second column.
        -:  350: */
        -:  351:static void
    #####:  352:cli_print_help (const char *help) /**< the help message to print */
        -:  353:{
    #####:  354:  while (help != NULL && *help != 0)
        -:  355:  {
    #####:  356:    int length = -1;
    #####:  357:    int i = 0;
    #####:  358:    for (; i < CLI_LINE_LENGTH - CLI_LINE_TAB && help[i] != 0; i++)
        -:  359:    {
    #####:  360:      if (help[i] == ' ')
        -:  361:      {
    #####:  362:        length = i;
        -:  363:      }
        -:  364:    }
    #####:  365:    if (length < 0 || i < CLI_LINE_LENGTH - CLI_LINE_TAB)
        -:  366:    {
    #####:  367:      length = i;
        -:  368:    }
        -:  369:
    #####:  370:    cli_print_prefix (help, length);
        -:  371:
    #####:  372:    help += length;
    #####:  373:    while (*help == ' ')
        -:  374:    {
    #####:  375:      help++;
        -:  376:    }
        -:  377:
    #####:  378:    if (*help != 0)
        -:  379:    {
    #####:  380:      printf ("\n");
    #####:  381:      cli_print_pad (CLI_LINE_TAB);
        -:  382:    }
        -:  383:  }
    #####:  384:} /* cli_print_help */
        -:  385:
        -:  386:/**
        -:  387: * Print detailed help for options.
        -:  388: */
        -:  389:void
    #####:  390:cli_help (const char *prog_name_p, /**< program name, typically argv[0] */
        -:  391:          const char *command_name_p, /**< command name if available */
        -:  392:          const cli_opt_t *options_p) /**< array of command line option definitions, terminated by CLI_OPT_DEFAULT */
        -:  393:{
    #####:  394:  cli_opt_usage (prog_name_p, command_name_p, options_p);
        -:  395:
    #####:  396:  const cli_opt_t *opt_p = options_p;
        -:  397:
    #####:  398:  while (opt_p->id != CLI_OPT_DEFAULT)
        -:  399:  {
    #####:  400:    int length = CLI_LINE_INDENT;
    #####:  401:    cli_print_pad (CLI_LINE_INDENT);
        -:  402:
    #####:  403:    if (opt_p->opt != NULL)
        -:  404:    {
    #####:  405:      printf ("-%s", opt_p->opt);
    #####:  406:      length += (int) (strlen (opt_p->opt) + 1);
        -:  407:    }
        -:  408:
    #####:  409:    if (opt_p->opt != NULL && opt_p->longopt != NULL)
        -:  410:    {
    #####:  411:      printf (", ");
    #####:  412:      length += 2;
        -:  413:    }
        -:  414:
    #####:  415:    if (opt_p->longopt != NULL)
        -:  416:    {
    #####:  417:      printf ("--%s", opt_p->longopt);
    #####:  418:      length += (int) (strlen (opt_p->longopt) + 2);
        -:  419:    }
        -:  420:
    #####:  421:    if (opt_p->meta != NULL)
        -:  422:    {
    #####:  423:      printf (" %s", opt_p->meta);
    #####:  424:      length += 1 + (int) strlen (opt_p->meta);
        -:  425:    }
        -:  426:
    #####:  427:    if (opt_p->help != NULL)
        -:  428:    {
    #####:  429:      if (length >= CLI_LINE_TAB)
        -:  430:      {
    #####:  431:        printf ("\n");
    #####:  432:        length = 0;
        -:  433:      }
    #####:  434:      cli_print_pad (CLI_LINE_TAB - length);
    #####:  435:      length = CLI_LINE_TAB;
        -:  436:
    #####:  437:      cli_print_help (opt_p->help);
        -:  438:    }
        -:  439:
    #####:  440:    printf ("\n");
    #####:  441:    opt_p++;
        -:  442:  }
        -:  443:
    #####:  444:  if (opt_p->help != NULL)
        -:  445:  {
    #####:  446:    int length = 0;
        -:  447:
    #####:  448:    if (opt_p->meta != NULL)
        -:  449:    {
    #####:  450:      length = (int) (CLI_LINE_INDENT + strlen (opt_p->meta));
        -:  451:
    #####:  452:      cli_print_pad (CLI_LINE_INDENT);
    #####:  453:      printf ("%s", opt_p->meta);
        -:  454:    }
        -:  455:
    #####:  456:    if (length >= CLI_LINE_TAB)
        -:  457:    {
    #####:  458:      printf ("\n");
    #####:  459:      length = 0;
        -:  460:    }
        -:  461:
    #####:  462:    cli_print_pad (CLI_LINE_TAB - length);
        -:  463:
    #####:  464:    cli_print_help (opt_p->help);
    #####:  465:    printf ("\n");
        -:  466:  }
    #####:  467:} /* cli_help */
