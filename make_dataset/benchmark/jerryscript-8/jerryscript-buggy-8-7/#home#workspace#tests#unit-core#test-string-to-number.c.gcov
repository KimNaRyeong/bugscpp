        -:    0:Source:/home/workspace/tests/unit-core/test-string-to-number.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "ecma-globals.h"
        -:   19:#include "ecma-helpers.h"
        -:   20:
        -:   21:#include "test-common.h"
        -:   22:
        -:   23:/**
        -:   24: * Unit test's main function.
        -:   25: */
        -:   26:int
    #####:   27:main (void)
        -:   28:{
    #####:   29:  TEST_INIT ();
        -:   30:
    #####:   31:  const jerry_char_t *strings[] = {
        -:   32:    (const jerry_char_t *) "1",         (const jerry_char_t *) "0.5",       (const jerry_char_t *) "12345",
        -:   33:    (const jerry_char_t *) "1e-45",     (const jerry_char_t *) "-2.5e+38",  (const jerry_char_t *) "-2.5e38",
        -:   34:    (const jerry_char_t *) "- 2.5e+38", (const jerry_char_t *) "-2 .5e+38", (const jerry_char_t *) "-2. 5e+38",
        -:   35:    (const jerry_char_t *) "-2.5e+ 38", (const jerry_char_t *) "-2.5 e+38", (const jerry_char_t *) "-2.5e +38",
        -:   36:    (const jerry_char_t *) "NaN",       (const jerry_char_t *) "abc",       (const jerry_char_t *) "   Infinity  ",
        -:   37:    (const jerry_char_t *) "-Infinity", (const jerry_char_t *) "0",         (const jerry_char_t *) "0",
        -:   38:  };
        -:   39:
    #####:   40:  const ecma_number_t nums[] = { (ecma_number_t) 1.0,       (ecma_number_t) 0.5,      (ecma_number_t) 12345.0,
        -:   41:                                 (ecma_number_t) 1.0e-45,   (ecma_number_t) -2.5e+38, (ecma_number_t) -2.5e+38,
    #####:   42:                                 (ecma_number_t) NAN,       (ecma_number_t) NAN,      (ecma_number_t) NAN,
        -:   43:                                 (ecma_number_t) NAN,       (ecma_number_t) NAN,      (ecma_number_t) NAN,
    #####:   44:                                 (ecma_number_t) NAN,       (ecma_number_t) NAN,      (ecma_number_t) INFINITY,
    #####:   45:                                 (ecma_number_t) -INFINITY, (ecma_number_t) + 0.0,    (ecma_number_t) -0.0 };
        -:   46:
    #####:   47:  for (uint32_t i = 0; i < sizeof (nums) / sizeof (nums[0]); i++)
        -:   48:  {
    #####:   49:    ecma_number_t num = ecma_utf8_string_to_number (strings[i], lit_zt_utf8_string_size (strings[i]), 0);
        -:   50:
    #####:   51:    if (num != nums[i] && (!ecma_number_is_nan (num) || !ecma_number_is_nan (nums[i])))
        -:   52:    {
        -:   53:      return 1;
        -:   54:    }
        -:   55:  }
        -:   56:
        -:   57:  return 0;
        -:   58:} /* main */
