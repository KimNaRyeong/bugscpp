        -:    0:Source:/home/workspace/tests/unit-core/test-internal-properties.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-port-default.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:int
    #####:   23:main (void)
        -:   24:{
    #####:   25:  jerry_init (JERRY_INIT_EMPTY);
        -:   26:
    #####:   27:  jerry_value_t object = jerry_object ();
        -:   28:
    #####:   29:  jerry_value_t prop_name_1 = jerry_string_sz ("foo");
    #####:   30:  jerry_value_t prop_name_2 = jerry_string_sz ("non_hidden_prop");
        -:   31:  jerry_value_t prop_name_3;
        -:   32:
    #####:   33:  if (jerry_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:   34:  {
    #####:   35:    jerry_value_t prop_name_3_desc = jerry_string_sz ("bar");
    #####:   36:    prop_name_3 = jerry_symbol_with_description (prop_name_3_desc);
    #####:   37:    jerry_value_free (prop_name_3_desc);
        -:   38:  }
        -:   39:  else
        -:   40:  {
    #####:   41:    prop_name_3 = jerry_string_sz ("non_hidden_string_prop");
        -:   42:  }
        -:   43:
    #####:   44:  jerry_value_t internal_prop_name_1 = jerry_string_sz ("hidden_foo");
    #####:   45:  jerry_value_t internal_prop_name_2 = jerry_string_sz ("hidden_prop");
        -:   46:  jerry_value_t internal_prop_name_3;
        -:   47:
    #####:   48:  if (jerry_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:   49:  {
    #####:   50:    jerry_value_t internal_prop_name_3_desc = jerry_string_sz ("bar");
    #####:   51:    internal_prop_name_3 = jerry_symbol_with_description (internal_prop_name_3_desc);
    #####:   52:    jerry_value_free (internal_prop_name_3_desc);
        -:   53:  }
        -:   54:  else
        -:   55:  {
    #####:   56:    internal_prop_name_3 = jerry_string_sz ("hidden_string_prop");
        -:   57:  }
        -:   58:
    #####:   59:  jerry_value_t prop_value_1 = jerry_number (5.5);
    #####:   60:  jerry_value_t prop_value_2 = jerry_number (6.5);
    #####:   61:  jerry_value_t prop_value_3 = jerry_number (7.5);
        -:   62:
    #####:   63:  jerry_value_t internal_prop_value_1 = jerry_number (8.5);
    #####:   64:  jerry_value_t internal_prop_value_2 = jerry_number (9.5);
    #####:   65:  jerry_value_t internal_prop_value_3 = jerry_number (10.5);
        -:   66:
        -:   67:  /* Test the normal [[Set]] method */
    #####:   68:  bool set_result_1 = jerry_object_set (object, prop_name_1, prop_value_1);
    #####:   69:  bool set_result_2 = jerry_object_set (object, prop_name_2, prop_value_2);
    #####:   70:  bool set_result_3 = jerry_object_set (object, prop_name_3, prop_value_3);
        -:   71:
    #####:   72:  TEST_ASSERT (set_result_1);
    #####:   73:  TEST_ASSERT (set_result_2);
    #####:   74:  TEST_ASSERT (set_result_3);
        -:   75:
        -:   76:  /* Test the internal [[Set]] method */
    #####:   77:  bool set_internal_result_1 = jerry_object_set_internal (object, internal_prop_name_1, internal_prop_value_1);
    #####:   78:  bool set_internal_result_2 = jerry_object_set_internal (object, internal_prop_name_2, internal_prop_value_2);
    #####:   79:  bool set_internal_result_3 = jerry_object_set_internal (object, internal_prop_name_3, internal_prop_value_3);
        -:   80:
    #####:   81:  TEST_ASSERT (set_internal_result_1);
    #####:   82:  TEST_ASSERT (set_internal_result_2);
    #####:   83:  TEST_ASSERT (set_internal_result_3);
        -:   84:
        -:   85:  /* Test the normal [[Has]] method. */
    #####:   86:  jerry_value_t has_result_1 = jerry_object_has (object, prop_name_1);
    #####:   87:  jerry_value_t has_result_2 = jerry_object_has (object, prop_name_2);
    #####:   88:  jerry_value_t has_result_3 = jerry_object_has (object, prop_name_3);
    #####:   89:  jerry_value_t has_result_4 = jerry_object_has (object, internal_prop_name_1);
    #####:   90:  jerry_value_t has_result_5 = jerry_object_has (object, internal_prop_name_2);
    #####:   91:  jerry_value_t has_result_6 = jerry_object_has (object, internal_prop_name_3);
        -:   92:
    #####:   93:  TEST_ASSERT (jerry_value_is_boolean (has_result_1) && jerry_value_is_true (has_result_1));
    #####:   94:  TEST_ASSERT (jerry_value_is_boolean (has_result_2) && jerry_value_is_true (has_result_2));
    #####:   95:  TEST_ASSERT (jerry_value_is_boolean (has_result_3) && jerry_value_is_true (has_result_3));
    #####:   96:  TEST_ASSERT (jerry_value_is_boolean (has_result_4) && !jerry_value_is_true (has_result_4));
    #####:   97:  TEST_ASSERT (jerry_value_is_boolean (has_result_5) && !jerry_value_is_true (has_result_5));
    #####:   98:  TEST_ASSERT (jerry_value_is_boolean (has_result_6) && !jerry_value_is_true (has_result_6));
        -:   99:
    #####:  100:  jerry_value_free (has_result_1);
    #####:  101:  jerry_value_free (has_result_2);
    #####:  102:  jerry_value_free (has_result_3);
    #####:  103:  jerry_value_free (has_result_4);
    #####:  104:  jerry_value_free (has_result_5);
    #####:  105:  jerry_value_free (has_result_6);
        -:  106:
        -:  107:  /* Test the internal [[Has]] method. */
    #####:  108:  bool has_internal_result_1 = jerry_object_has_internal (object, prop_name_1);
    #####:  109:  bool has_internal_result_2 = jerry_object_has_internal (object, prop_name_2);
    #####:  110:  bool has_internal_result_3 = jerry_object_has_internal (object, prop_name_3);
    #####:  111:  bool has_internal_result_4 = jerry_object_has_internal (object, internal_prop_name_1);
    #####:  112:  bool has_internal_result_5 = jerry_object_has_internal (object, internal_prop_name_2);
    #####:  113:  bool has_internal_result_6 = jerry_object_has_internal (object, internal_prop_name_3);
        -:  114:
    #####:  115:  TEST_ASSERT (!has_internal_result_1);
    #####:  116:  TEST_ASSERT (!has_internal_result_2);
    #####:  117:  TEST_ASSERT (!has_internal_result_3);
    #####:  118:  TEST_ASSERT (has_internal_result_4);
    #####:  119:  TEST_ASSERT (has_internal_result_5);
    #####:  120:  TEST_ASSERT (has_internal_result_6);
        -:  121:
        -:  122:  /* Test the normal [[Get]] method. */
    #####:  123:  jerry_value_t get_result_1 = jerry_object_get (object, prop_name_1);
    #####:  124:  jerry_value_t get_result_2 = jerry_object_get (object, prop_name_2);
    #####:  125:  jerry_value_t get_result_3 = jerry_object_get (object, prop_name_3);
    #####:  126:  jerry_value_t get_result_4 = jerry_object_get (object, internal_prop_name_1);
    #####:  127:  jerry_value_t get_result_5 = jerry_object_get (object, internal_prop_name_2);
    #####:  128:  jerry_value_t get_result_6 = jerry_object_get (object, internal_prop_name_3);
        -:  129:
    #####:  130:  TEST_ASSERT (jerry_value_is_number (get_result_1) && jerry_value_as_number (get_result_1) == 5.5);
    #####:  131:  TEST_ASSERT (jerry_value_is_number (get_result_2) && jerry_value_as_number (get_result_2) == 6.5);
    #####:  132:  TEST_ASSERT (jerry_value_is_number (get_result_3) && jerry_value_as_number (get_result_3) == 7.5);
    #####:  133:  TEST_ASSERT (jerry_value_is_undefined (get_result_4));
    #####:  134:  TEST_ASSERT (jerry_value_is_undefined (get_result_5));
    #####:  135:  TEST_ASSERT (jerry_value_is_undefined (get_result_6));
        -:  136:
    #####:  137:  jerry_value_free (get_result_1);
    #####:  138:  jerry_value_free (get_result_2);
    #####:  139:  jerry_value_free (get_result_3);
    #####:  140:  jerry_value_free (get_result_4);
    #####:  141:  jerry_value_free (get_result_5);
    #####:  142:  jerry_value_free (get_result_6);
        -:  143:
        -:  144:  /* Test the internal [[Get]] method. */
    #####:  145:  jerry_value_t get_internal_result_1 = jerry_object_get_internal (object, prop_name_1);
    #####:  146:  jerry_value_t get_internal_result_2 = jerry_object_get_internal (object, prop_name_2);
    #####:  147:  jerry_value_t get_internal_result_3 = jerry_object_get_internal (object, prop_name_3);
    #####:  148:  jerry_value_t get_internal_result_4 = jerry_object_get_internal (object, internal_prop_name_1);
    #####:  149:  jerry_value_t get_internal_result_5 = jerry_object_get_internal (object, internal_prop_name_2);
    #####:  150:  jerry_value_t get_internal_result_6 = jerry_object_get_internal (object, internal_prop_name_3);
        -:  151:
    #####:  152:  TEST_ASSERT (jerry_value_is_undefined (get_internal_result_1));
    #####:  153:  TEST_ASSERT (jerry_value_is_undefined (get_internal_result_2));
    #####:  154:  TEST_ASSERT (jerry_value_is_undefined (get_internal_result_3));
    #####:  155:  TEST_ASSERT (jerry_value_is_number (get_internal_result_4) && jerry_value_as_number (get_internal_result_4) == 8.5);
    #####:  156:  TEST_ASSERT (jerry_value_is_number (get_internal_result_5) && jerry_value_as_number (get_internal_result_5) == 9.5);
    #####:  157:  TEST_ASSERT (jerry_value_is_number (get_internal_result_6) && jerry_value_as_number (get_internal_result_6) == 10.5);
        -:  158:
    #####:  159:  jerry_value_free (get_internal_result_1);
    #####:  160:  jerry_value_free (get_internal_result_2);
    #####:  161:  jerry_value_free (get_internal_result_3);
    #####:  162:  jerry_value_free (get_internal_result_4);
    #####:  163:  jerry_value_free (get_internal_result_5);
    #####:  164:  jerry_value_free (get_internal_result_6);
        -:  165:
        -:  166:  /* Test the normal [[Delete]] method. */
    #####:  167:  jerry_value_t delete_result_1 = jerry_object_delete (object, prop_name_1);
    #####:  168:  jerry_value_t delete_result_2 = jerry_object_delete (object, prop_name_2);
    #####:  169:  jerry_value_t delete_result_3 = jerry_object_delete (object, prop_name_3);
    #####:  170:  jerry_value_t delete_result_4 = jerry_object_delete (object, internal_prop_name_1);
    #####:  171:  jerry_value_t delete_result_5 = jerry_object_delete (object, internal_prop_name_2);
    #####:  172:  jerry_value_t delete_result_6 = jerry_object_delete (object, internal_prop_name_3);
        -:  173:
    #####:  174:  TEST_ASSERT (jerry_value_is_true (delete_result_1));
    #####:  175:  TEST_ASSERT (jerry_value_is_true (delete_result_2));
    #####:  176:  TEST_ASSERT (jerry_value_is_true (delete_result_3));
    #####:  177:  TEST_ASSERT (jerry_value_is_true (delete_result_4));
    #####:  178:  TEST_ASSERT (jerry_value_is_true (delete_result_5));
    #####:  179:  TEST_ASSERT (jerry_value_is_true (delete_result_6));
        -:  180:
    #####:  181:  jerry_value_t has_after_delete_result_1 = jerry_object_has (object, prop_name_1);
    #####:  182:  jerry_value_t has_after_delete_result_2 = jerry_object_has (object, prop_name_2);
    #####:  183:  jerry_value_t has_after_delete_result_3 = jerry_object_has (object, prop_name_3);
    #####:  184:  bool has_after_delete_result_4 = jerry_object_has_internal (object, internal_prop_name_1);
    #####:  185:  bool has_after_delete_result_5 = jerry_object_has_internal (object, internal_prop_name_2);
    #####:  186:  bool has_after_delete_result_6 = jerry_object_has_internal (object, internal_prop_name_3);
        -:  187:
    #####:  188:  TEST_ASSERT (jerry_value_is_boolean (has_after_delete_result_1) && !jerry_value_is_true (has_after_delete_result_1));
    #####:  189:  TEST_ASSERT (jerry_value_is_boolean (has_after_delete_result_2) && !jerry_value_is_true (has_after_delete_result_2));
    #####:  190:  TEST_ASSERT (jerry_value_is_boolean (has_after_delete_result_3) && !jerry_value_is_true (has_after_delete_result_3));
    #####:  191:  TEST_ASSERT (has_after_delete_result_4);
    #####:  192:  TEST_ASSERT (has_after_delete_result_5);
    #####:  193:  TEST_ASSERT (has_after_delete_result_6);
        -:  194:
    #####:  195:  jerry_value_free (has_after_delete_result_1);
    #####:  196:  jerry_value_free (has_after_delete_result_2);
    #####:  197:  jerry_value_free (has_after_delete_result_3);
        -:  198:
        -:  199:  /* Test the internal [[Delete]] method. */
    #####:  200:  bool delete_internal_result_4 = jerry_object_delete_internal (object, internal_prop_name_1);
    #####:  201:  bool delete_internal_result_5 = jerry_object_delete_internal (object, internal_prop_name_2);
    #####:  202:  bool delete_internal_result_6 = jerry_object_delete_internal (object, internal_prop_name_3);
        -:  203:
    #####:  204:  TEST_ASSERT (delete_internal_result_4);
    #####:  205:  TEST_ASSERT (delete_internal_result_5);
    #####:  206:  TEST_ASSERT (delete_internal_result_6);
        -:  207:
    #####:  208:  bool has_after_internal_delete_result_1 = jerry_object_has_internal (object, internal_prop_name_1);
    #####:  209:  bool has_after_internal_delete_result_2 = jerry_object_has_internal (object, internal_prop_name_2);
    #####:  210:  bool has_after_internal_delete_result_3 = jerry_object_has_internal (object, internal_prop_name_3);
        -:  211:
    #####:  212:  TEST_ASSERT (!has_after_internal_delete_result_1);
    #####:  213:  TEST_ASSERT (!has_after_internal_delete_result_2);
    #####:  214:  TEST_ASSERT (!has_after_internal_delete_result_3);
        -:  215:
        -:  216:  /* Cleanup */
    #####:  217:  jerry_value_free (prop_value_3);
    #####:  218:  jerry_value_free (prop_value_2);
    #####:  219:  jerry_value_free (prop_value_1);
        -:  220:
    #####:  221:  jerry_value_free (prop_name_3);
    #####:  222:  jerry_value_free (prop_name_2);
    #####:  223:  jerry_value_free (prop_name_1);
        -:  224:
    #####:  225:  jerry_value_free (internal_prop_value_3);
    #####:  226:  jerry_value_free (internal_prop_value_2);
    #####:  227:  jerry_value_free (internal_prop_value_1);
        -:  228:
    #####:  229:  jerry_value_free (internal_prop_name_3);
    #####:  230:  jerry_value_free (internal_prop_name_2);
    #####:  231:  jerry_value_free (internal_prop_name_1);
        -:  232:
    #####:  233:  jerry_value_free (object);
        -:  234:
    #####:  235:  jerry_cleanup ();
        -:  236:
        -:  237:  return 0;
        -:  238:} /* main */
