        -:    0:Source:grammar.c
        -:    0:Graph:/home/workspace/libyara/grammar.gcno
        -:    0:Data:/home/workspace/libyara/grammar.gcda
        -:    0:Runs:7
        -:    1:/* A Bison parser, made by GNU Bison 3.5.1.  */
        -:    2:
        -:    3:/* Bison implementation for Yacc-like parsers in C
        -:    4:
        -:    5:   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
        -:    6:   Inc.
        -:    7:
        -:    8:   This program is free software: you can redistribute it and/or modify
        -:    9:   it under the terms of the GNU General Public License as published by
        -:   10:   the Free Software Foundation, either version 3 of the License, or
        -:   11:   (at your option) any later version.
        -:   12:
        -:   13:   This program is distributed in the hope that it will be useful,
        -:   14:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   15:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   16:   GNU General Public License for more details.
        -:   17:
        -:   18:   You should have received a copy of the GNU General Public License
        -:   19:   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
        -:   20:
        -:   21:/* As a special exception, you may create a larger work that contains
        -:   22:   part or all of the Bison parser skeleton and distribute that work
        -:   23:   under terms of your choice, so long as that work isn't itself a
        -:   24:   parser generator using the skeleton or a modified version thereof
        -:   25:   as a parser skeleton.  Alternatively, if you modify or redistribute
        -:   26:   the parser skeleton itself, you may (at your option) remove this
        -:   27:   special exception, which will cause the skeleton and the resulting
        -:   28:   Bison output files to be licensed under the GNU General Public
        -:   29:   License without this special exception.
        -:   30:
        -:   31:   This special exception was added by the Free Software Foundation in
        -:   32:   version 2.2 of Bison.  */
        -:   33:
        -:   34:/* C LALR(1) parser skeleton written by Richard Stallman, by
        -:   35:   simplifying the original so-called "semantic" parser.  */
        -:   36:
        -:   37:/* All symbols defined below should begin with yy or YY, to avoid
        -:   38:   infringing on user name space.  This should be done even for local
        -:   39:   variables, as they might otherwise be expanded by user macros.
        -:   40:   There are some unavoidable exceptions within include files to
        -:   41:   define necessary library symbols; they are noted "INFRINGES ON
        -:   42:   USER NAME SPACE" below.  */
        -:   43:
        -:   44:/* Undocumented macros, especially those whose name start with YY_,
        -:   45:   are private implementation details.  Do not rely on them.  */
        -:   46:
        -:   47:/* Identify Bison output.  */
        -:   48:#define YYBISON 1
        -:   49:
        -:   50:/* Bison version.  */
        -:   51:#define YYBISON_VERSION "3.5.1"
        -:   52:
        -:   53:/* Skeleton name.  */
        -:   54:#define YYSKELETON_NAME "yacc.c"
        -:   55:
        -:   56:/* Pure parsers.  */
        -:   57:#define YYPURE 1
        -:   58:
        -:   59:/* Push parsers.  */
        -:   60:#define YYPUSH 0
        -:   61:
        -:   62:/* Pull parsers.  */
        -:   63:#define YYPULL 1
        -:   64:
        -:   65:
        -:   66:/* Substitute the variable and function names.  */
        -:   67:#define yyparse         yara_yyparse
        -:   68:#define yylex           yara_yylex
        -:   69:#define yyerror         yara_yyerror
        -:   70:#define yydebug         yara_yydebug
        -:   71:#define yynerrs         yara_yynerrs
        -:   72:
        -:   73:/* First part of user prologue.  */
        -:   74:#line 30 "grammar.y"
        -:   75:
        -:   76:
        -:   77:
        -:   78:#include <assert.h>
        -:   79:#include <stdio.h>
        -:   80:#include <string.h>
        -:   81:#include <limits.h>
        -:   82:#include <stdlib.h>
        -:   83:#include <stddef.h>
        -:   84:
        -:   85:#include <yara/integers.h>
        -:   86:#include <yara/utils.h>
        -:   87:#include <yara/strutils.h>
        -:   88:#include <yara/compiler.h>
        -:   89:#include <yara/object.h>
        -:   90:#include <yara/sizedstr.h>
        -:   91:#include <yara/exec.h>
        -:   92:#include <yara/error.h>
        -:   93:#include <yara/mem.h>
        -:   94:#include <yara/lexer.h>
        -:   95:#include <yara/parser.h>
        -:   96:
        -:   97:#if defined(_MSC_VER)
        -:   98:#define llabs _abs64
        -:   99:#endif
        -:  100:
        -:  101:#define YYERROR_VERBOSE
        -:  102:
        -:  103:#define YYMALLOC yr_malloc
        -:  104:#define YYFREE yr_free
        -:  105:
        -:  106:#define INTEGER_SET_ENUMERATION   1
        -:  107:#define INTEGER_SET_RANGE         2
        -:  108:
        -:  109:#define FOR_EXPRESSION_ALL 1
        -:  110:#define FOR_EXPRESSION_ANY 2
        -:  111:
        -:  112:#define fail_if_error(e) \
        -:  113:    if (e != ERROR_SUCCESS) \
        -:  114:    { \
        -:  115:      compiler->last_error = e; \
        -:  116:      yyerror(yyscanner, compiler, NULL); \
        -:  117:      YYERROR; \
        -:  118:    } \
        -:  119:
        -:  120:
        -:  121:#define check_type_with_cleanup(expression, expected_type, op, cleanup) \
        -:  122:    if (((expression.type) & (expected_type)) == 0) \
        -:  123:    { \
        -:  124:      switch(expression.type) \
        -:  125:      { \
        -:  126:        case EXPRESSION_TYPE_INTEGER: \
        -:  127:          yr_compiler_set_error_extra_info( \
        -:  128:              compiler, "wrong type \"integer\" for " op " operator"); \
        -:  129:          break; \
        -:  130:        case EXPRESSION_TYPE_FLOAT: \
        -:  131:          yr_compiler_set_error_extra_info( \
        -:  132:              compiler, "wrong type \"float\" for " op " operator"); \
        -:  133:          break; \
        -:  134:        case EXPRESSION_TYPE_STRING: \
        -:  135:          yr_compiler_set_error_extra_info( \
        -:  136:              compiler, "wrong type \"string\" for " op " operator"); \
        -:  137:          break; \
        -:  138:        case EXPRESSION_TYPE_BOOLEAN: \
        -:  139:          yr_compiler_set_error_extra_info( \
        -:  140:              compiler, "wrong type \"boolean\" for " op " operator"); \
        -:  141:          break; \
        -:  142:      } \
        -:  143:      cleanup; \
        -:  144:      compiler->last_error = ERROR_WRONG_TYPE; \
        -:  145:      yyerror(yyscanner, compiler, NULL); \
        -:  146:      YYERROR; \
        -:  147:    }
        -:  148:
        -:  149:
        -:  150:#define check_type(expression, expected_type, op) \
        -:  151:    check_type_with_cleanup(expression, expected_type, op, )
        -:  152:
        -:  153:
        -:  154:#line 155 "grammar.c"
        -:  155:
        -:  156:# ifndef YY_CAST
        -:  157:#  ifdef __cplusplus
        -:  158:#   define YY_CAST(Type, Val) static_cast<Type> (Val)
        -:  159:#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
        -:  160:#  else
        -:  161:#   define YY_CAST(Type, Val) ((Type) (Val))
        -:  162:#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
        -:  163:#  endif
        -:  164:# endif
        -:  165:# ifndef YY_NULLPTR
        -:  166:#  if defined __cplusplus
        -:  167:#   if 201103L <= __cplusplus
        -:  168:#    define YY_NULLPTR nullptr
        -:  169:#   else
        -:  170:#    define YY_NULLPTR 0
        -:  171:#   endif
        -:  172:#  else
        -:  173:#   define YY_NULLPTR ((void*)0)
        -:  174:#  endif
        -:  175:# endif
        -:  176:
        -:  177:/* Enabling verbose error messages.  */
        -:  178:#ifdef YYERROR_VERBOSE
        -:  179:# undef YYERROR_VERBOSE
        -:  180:# define YYERROR_VERBOSE 1
        -:  181:#else
        -:  182:# define YYERROR_VERBOSE 0
        -:  183:#endif
        -:  184:
        -:  185:/* Use api.header.include to #include this header
        -:  186:   instead of duplicating it here.  */
        -:  187:#ifndef YY_YARA_YY_GRAMMAR_H_INCLUDED
        -:  188:# define YY_YARA_YY_GRAMMAR_H_INCLUDED
        -:  189:/* Debug traces.  */
        -:  190:#ifndef YYDEBUG
        -:  191:# define YYDEBUG 0
        -:  192:#endif
        -:  193:#if YYDEBUG
        -:  194:extern int yara_yydebug;
        -:  195:#endif
        -:  196:
        -:  197:/* Token type.  */
        -:  198:#ifndef YYTOKENTYPE
        -:  199:# define YYTOKENTYPE
        -:  200:  enum yytokentype
        -:  201:  {
        -:  202:    _END_OF_FILE_ = 0,
        -:  203:    _END_OF_INCLUDED_FILE_ = 258,
        -:  204:    _DOT_DOT_ = 259,
        -:  205:    _RULE_ = 260,
        -:  206:    _PRIVATE_ = 261,
        -:  207:    _GLOBAL_ = 262,
        -:  208:    _META_ = 263,
        -:  209:    _STRINGS_ = 264,
        -:  210:    _CONDITION_ = 265,
        -:  211:    _IDENTIFIER_ = 266,
        -:  212:    _STRING_IDENTIFIER_ = 267,
        -:  213:    _STRING_COUNT_ = 268,
        -:  214:    _STRING_OFFSET_ = 269,
        -:  215:    _STRING_LENGTH_ = 270,
        -:  216:    _STRING_IDENTIFIER_WITH_WILDCARD_ = 271,
        -:  217:    _NUMBER_ = 272,
        -:  218:    _DOUBLE_ = 273,
        -:  219:    _INTEGER_FUNCTION_ = 274,
        -:  220:    _TEXT_STRING_ = 275,
        -:  221:    _HEX_STRING_ = 276,
        -:  222:    _REGEXP_ = 277,
        -:  223:    _ASCII_ = 278,
        -:  224:    _WIDE_ = 279,
        -:  225:    _XOR_ = 280,
        -:  226:    _NOCASE_ = 281,
        -:  227:    _FULLWORD_ = 282,
        -:  228:    _AT_ = 283,
        -:  229:    _FILESIZE_ = 284,
        -:  230:    _ENTRYPOINT_ = 285,
        -:  231:    _ALL_ = 286,
        -:  232:    _ANY_ = 287,
        -:  233:    _IN_ = 288,
        -:  234:    _OF_ = 289,
        -:  235:    _FOR_ = 290,
        -:  236:    _THEM_ = 291,
        -:  237:    _MATCHES_ = 292,
        -:  238:    _CONTAINS_ = 293,
        -:  239:    _IMPORT_ = 294,
        -:  240:    _TRUE_ = 295,
        -:  241:    _FALSE_ = 296,
        -:  242:    _OR_ = 297,
        -:  243:    _AND_ = 298,
        -:  244:    _NOT_ = 299,
        -:  245:    _EQ_ = 300,
        -:  246:    _NEQ_ = 301,
        -:  247:    _LT_ = 302,
        -:  248:    _LE_ = 303,
        -:  249:    _GT_ = 304,
        -:  250:    _GE_ = 305,
        -:  251:    _SHIFT_LEFT_ = 306,
        -:  252:    _SHIFT_RIGHT_ = 307,
        -:  253:    UNARY_MINUS = 308
        -:  254:  };
        -:  255:#endif
        -:  256:/* Tokens.  */
        -:  257:#define _END_OF_FILE_ 0
        -:  258:#define _END_OF_INCLUDED_FILE_ 258
        -:  259:#define _DOT_DOT_ 259
        -:  260:#define _RULE_ 260
        -:  261:#define _PRIVATE_ 261
        -:  262:#define _GLOBAL_ 262
        -:  263:#define _META_ 263
        -:  264:#define _STRINGS_ 264
        -:  265:#define _CONDITION_ 265
        -:  266:#define _IDENTIFIER_ 266
        -:  267:#define _STRING_IDENTIFIER_ 267
        -:  268:#define _STRING_COUNT_ 268
        -:  269:#define _STRING_OFFSET_ 269
        -:  270:#define _STRING_LENGTH_ 270
        -:  271:#define _STRING_IDENTIFIER_WITH_WILDCARD_ 271
        -:  272:#define _NUMBER_ 272
        -:  273:#define _DOUBLE_ 273
        -:  274:#define _INTEGER_FUNCTION_ 274
        -:  275:#define _TEXT_STRING_ 275
        -:  276:#define _HEX_STRING_ 276
        -:  277:#define _REGEXP_ 277
        -:  278:#define _ASCII_ 278
        -:  279:#define _WIDE_ 279
        -:  280:#define _XOR_ 280
        -:  281:#define _NOCASE_ 281
        -:  282:#define _FULLWORD_ 282
        -:  283:#define _AT_ 283
        -:  284:#define _FILESIZE_ 284
        -:  285:#define _ENTRYPOINT_ 285
        -:  286:#define _ALL_ 286
        -:  287:#define _ANY_ 287
        -:  288:#define _IN_ 288
        -:  289:#define _OF_ 289
        -:  290:#define _FOR_ 290
        -:  291:#define _THEM_ 291
        -:  292:#define _MATCHES_ 292
        -:  293:#define _CONTAINS_ 293
        -:  294:#define _IMPORT_ 294
        -:  295:#define _TRUE_ 295
        -:  296:#define _FALSE_ 296
        -:  297:#define _OR_ 297
        -:  298:#define _AND_ 298
        -:  299:#define _NOT_ 299
        -:  300:#define _EQ_ 300
        -:  301:#define _NEQ_ 301
        -:  302:#define _LT_ 302
        -:  303:#define _LE_ 303
        -:  304:#define _GT_ 304
        -:  305:#define _GE_ 305
        -:  306:#define _SHIFT_LEFT_ 306
        -:  307:#define _SHIFT_RIGHT_ 307
        -:  308:#define UNARY_MINUS 308
        -:  309:
        -:  310:/* Value type.  */
        -:  311:#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
        -:  312:union YYSTYPE
        -:  313:{
        -:  314:#line 242 "grammar.y"
        -:  315:
        -:  316:  EXPRESSION      expression;
        -:  317:  SIZED_STRING*   sized_string;
        -:  318:  char*           c_string;
        -:  319:  int64_t         integer;
        -:  320:  double          double_;
        -:  321:  YR_STRING*      string;
        -:  322:  YR_META*        meta;
        -:  323:  YR_RULE*        rule;
        -:  324:
        -:  325:#line 326 "grammar.c"
        -:  326:
        -:  327:};
        -:  328:typedef union YYSTYPE YYSTYPE;
        -:  329:# define YYSTYPE_IS_TRIVIAL 1
        -:  330:# define YYSTYPE_IS_DECLARED 1
        -:  331:#endif
        -:  332:
        -:  333:
        -:  334:
        -:  335:int yara_yyparse (void *yyscanner, YR_COMPILER* compiler);
        -:  336:
        -:  337:#endif /* !YY_YARA_YY_GRAMMAR_H_INCLUDED  */
        -:  338:
        -:  339:
        -:  340:
        -:  341:#ifdef short
        -:  342:# undef short
        -:  343:#endif
        -:  344:
        -:  345:/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
        -:  346:   <limits.h> and (if available) <stdint.h> are included
        -:  347:   so that the code can choose integer types of a good width.  */
        -:  348:
        -:  349:#ifndef __PTRDIFF_MAX__
        -:  350:# include <limits.h> /* INFRINGES ON USER NAME SPACE */
        -:  351:# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
        -:  352:#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
        -:  353:#  define YY_STDINT_H
        -:  354:# endif
        -:  355:#endif
        -:  356:
        -:  357:/* Narrow types that promote to a signed type and that can represent a
        -:  358:   signed or unsigned integer of at least N bits.  In tables they can
        -:  359:   save space and decrease cache pressure.  Promoting to a signed type
        -:  360:   helps avoid bugs in integer arithmetic.  */
        -:  361:
        -:  362:#ifdef __INT_LEAST8_MAX__
        -:  363:typedef __INT_LEAST8_TYPE__ yytype_int8;
        -:  364:#elif defined YY_STDINT_H
        -:  365:typedef int_least8_t yytype_int8;
        -:  366:#else
        -:  367:typedef signed char yytype_int8;
        -:  368:#endif
        -:  369:
        -:  370:#ifdef __INT_LEAST16_MAX__
        -:  371:typedef __INT_LEAST16_TYPE__ yytype_int16;
        -:  372:#elif defined YY_STDINT_H
        -:  373:typedef int_least16_t yytype_int16;
        -:  374:#else
        -:  375:typedef short yytype_int16;
        -:  376:#endif
        -:  377:
        -:  378:#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
        -:  379:typedef __UINT_LEAST8_TYPE__ yytype_uint8;
        -:  380:#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
        -:  381:       && UINT_LEAST8_MAX <= INT_MAX)
        -:  382:typedef uint_least8_t yytype_uint8;
        -:  383:#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
        -:  384:typedef unsigned char yytype_uint8;
        -:  385:#else
        -:  386:typedef short yytype_uint8;
        -:  387:#endif
        -:  388:
        -:  389:#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
        -:  390:typedef __UINT_LEAST16_TYPE__ yytype_uint16;
        -:  391:#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
        -:  392:       && UINT_LEAST16_MAX <= INT_MAX)
        -:  393:typedef uint_least16_t yytype_uint16;
        -:  394:#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
        -:  395:typedef unsigned short yytype_uint16;
        -:  396:#else
        -:  397:typedef int yytype_uint16;
        -:  398:#endif
        -:  399:
        -:  400:#ifndef YYPTRDIFF_T
        -:  401:# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
        -:  402:#  define YYPTRDIFF_T __PTRDIFF_TYPE__
        -:  403:#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
        -:  404:# elif defined PTRDIFF_MAX
        -:  405:#  ifndef ptrdiff_t
        -:  406:#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
        -:  407:#  endif
        -:  408:#  define YYPTRDIFF_T ptrdiff_t
        -:  409:#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
        -:  410:# else
        -:  411:#  define YYPTRDIFF_T long
        -:  412:#  define YYPTRDIFF_MAXIMUM LONG_MAX
        -:  413:# endif
        -:  414:#endif
        -:  415:
        -:  416:#ifndef YYSIZE_T
        -:  417:# ifdef __SIZE_TYPE__
        -:  418:#  define YYSIZE_T __SIZE_TYPE__
        -:  419:# elif defined size_t
        -:  420:#  define YYSIZE_T size_t
        -:  421:# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
        -:  422:#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
        -:  423:#  define YYSIZE_T size_t
        -:  424:# else
        -:  425:#  define YYSIZE_T unsigned
        -:  426:# endif
        -:  427:#endif
        -:  428:
        -:  429:#define YYSIZE_MAXIMUM                                  \
        -:  430:  YY_CAST (YYPTRDIFF_T,                                 \
        -:  431:           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
        -:  432:            ? YYPTRDIFF_MAXIMUM                         \
        -:  433:            : YY_CAST (YYSIZE_T, -1)))
        -:  434:
        -:  435:#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))
        -:  436:
        -:  437:/* Stored state numbers (used for stacks). */
        -:  438:typedef yytype_uint8 yy_state_t;
        -:  439:
        -:  440:/* State numbers in computations.  */
        -:  441:typedef int yy_state_fast_t;
        -:  442:
        -:  443:#ifndef YY_
        -:  444:# if defined YYENABLE_NLS && YYENABLE_NLS
        -:  445:#  if ENABLE_NLS
        -:  446:#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
        -:  447:#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
        -:  448:#  endif
        -:  449:# endif
        -:  450:# ifndef YY_
        -:  451:#  define YY_(Msgid) Msgid
        -:  452:# endif
        -:  453:#endif
        -:  454:
        -:  455:#ifndef YY_ATTRIBUTE_PURE
        -:  456:# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
        -:  457:#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
        -:  458:# else
        -:  459:#  define YY_ATTRIBUTE_PURE
        -:  460:# endif
        -:  461:#endif
        -:  462:
        -:  463:#ifndef YY_ATTRIBUTE_UNUSED
        -:  464:# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
        -:  465:#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
        -:  466:# else
        -:  467:#  define YY_ATTRIBUTE_UNUSED
        -:  468:# endif
        -:  469:#endif
        -:  470:
        -:  471:/* Suppress unused-variable warnings by "using" E.  */
        -:  472:#if ! defined lint || defined __GNUC__
        -:  473:# define YYUSE(E) ((void) (E))
        -:  474:#else
        -:  475:# define YYUSE(E) /* empty */
        -:  476:#endif
        -:  477:
        -:  478:#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
        -:  479:/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
        -:  480:# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
        -:  481:    _Pragma ("GCC diagnostic push")                                     \
        -:  482:    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
        -:  483:    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
        -:  484:# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
        -:  485:    _Pragma ("GCC diagnostic pop")
        -:  486:#else
        -:  487:# define YY_INITIAL_VALUE(Value) Value
        -:  488:#endif
        -:  489:#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
        -:  490:# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
        -:  491:# define YY_IGNORE_MAYBE_UNINITIALIZED_END
        -:  492:#endif
        -:  493:#ifndef YY_INITIAL_VALUE
        -:  494:# define YY_INITIAL_VALUE(Value) /* Nothing. */
        -:  495:#endif
        -:  496:
        -:  497:#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
        -:  498:# define YY_IGNORE_USELESS_CAST_BEGIN                          \
        -:  499:    _Pragma ("GCC diagnostic push")                            \
        -:  500:    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
        -:  501:# define YY_IGNORE_USELESS_CAST_END            \
        -:  502:    _Pragma ("GCC diagnostic pop")
        -:  503:#endif
        -:  504:#ifndef YY_IGNORE_USELESS_CAST_BEGIN
        -:  505:# define YY_IGNORE_USELESS_CAST_BEGIN
        -:  506:# define YY_IGNORE_USELESS_CAST_END
        -:  507:#endif
        -:  508:
        -:  509:
        -:  510:#define YY_ASSERT(E) ((void) (0 && (E)))
        -:  511:
        -:  512:#if ! defined yyoverflow || YYERROR_VERBOSE
        -:  513:
        -:  514:/* The parser invokes alloca or malloc; define the necessary symbols.  */
        -:  515:
        -:  516:# ifdef YYSTACK_USE_ALLOCA
        -:  517:#  if YYSTACK_USE_ALLOCA
        -:  518:#   ifdef __GNUC__
        -:  519:#    define YYSTACK_ALLOC __builtin_alloca
        -:  520:#   elif defined __BUILTIN_VA_ARG_INCR
        -:  521:#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
        -:  522:#   elif defined _AIX
        -:  523:#    define YYSTACK_ALLOC __alloca
        -:  524:#   elif defined _MSC_VER
        -:  525:#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
        -:  526:#    define alloca _alloca
        -:  527:#   else
        -:  528:#    define YYSTACK_ALLOC alloca
        -:  529:#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
        -:  530:#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
        -:  531:      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
        -:  532:#     ifndef EXIT_SUCCESS
        -:  533:#      define EXIT_SUCCESS 0
        -:  534:#     endif
        -:  535:#    endif
        -:  536:#   endif
        -:  537:#  endif
        -:  538:# endif
        -:  539:
        -:  540:# ifdef YYSTACK_ALLOC
        -:  541:   /* Pacify GCC's 'empty if-body' warning.  */
        -:  542:#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
        -:  543:#  ifndef YYSTACK_ALLOC_MAXIMUM
        -:  544:    /* The OS might guarantee only one guard page at the bottom of the stack,
        -:  545:       and a page size can be as small as 4096 bytes.  So we cannot safely
        -:  546:       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
        -:  547:       to allow for a few compiler-allocated temporary stack slots.  */
        -:  548:#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
        -:  549:#  endif
        -:  550:# else
        -:  551:#  define YYSTACK_ALLOC YYMALLOC
        -:  552:#  define YYSTACK_FREE YYFREE
        -:  553:#  ifndef YYSTACK_ALLOC_MAXIMUM
        -:  554:#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
        -:  555:#  endif
        -:  556:#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
        -:  557:       && ! ((defined YYMALLOC || defined malloc) \
        -:  558:             && (defined YYFREE || defined free)))
        -:  559:#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
        -:  560:#   ifndef EXIT_SUCCESS
        -:  561:#    define EXIT_SUCCESS 0
        -:  562:#   endif
        -:  563:#  endif
        -:  564:#  ifndef YYMALLOC
        -:  565:#   define YYMALLOC malloc
        -:  566:#   if ! defined malloc && ! defined EXIT_SUCCESS
        -:  567:void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
        -:  568:#   endif
        -:  569:#  endif
        -:  570:#  ifndef YYFREE
        -:  571:#   define YYFREE free
        -:  572:#   if ! defined free && ! defined EXIT_SUCCESS
        -:  573:void free (void *); /* INFRINGES ON USER NAME SPACE */
        -:  574:#   endif
        -:  575:#  endif
        -:  576:# endif
        -:  577:#endif /* ! defined yyoverflow || YYERROR_VERBOSE */
        -:  578:
        -:  579:
        -:  580:#if (! defined yyoverflow \
        -:  581:     && (! defined __cplusplus \
        -:  582:         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
        -:  583:
        -:  584:/* A type that is properly aligned for any stack member.  */
        -:  585:union yyalloc
        -:  586:{
        -:  587:  yy_state_t yyss_alloc;
        -:  588:  YYSTYPE yyvs_alloc;
        -:  589:};
        -:  590:
        -:  591:/* The size of the maximum gap between one aligned stack and the next.  */
        -:  592:# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)
        -:  593:
        -:  594:/* The size of an array large to enough to hold all stacks, each with
        -:  595:   N elements.  */
        -:  596:# define YYSTACK_BYTES(N) \
        -:  597:     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE)) \
        -:  598:      + YYSTACK_GAP_MAXIMUM)
        -:  599:
        -:  600:# define YYCOPY_NEEDED 1
        -:  601:
        -:  602:/* Relocate STACK from its old location to the new one.  The
        -:  603:   local variables YYSIZE and YYSTACKSIZE give the old and new number of
        -:  604:   elements in the stack, and YYPTR gives the new location of the
        -:  605:   stack.  Advance YYPTR to a properly aligned location for the next
        -:  606:   stack.  */
        -:  607:# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
        -:  608:    do                                                                  \
        -:  609:      {                                                                 \
        -:  610:        YYPTRDIFF_T yynewbytes;                                         \
        -:  611:        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        -:  612:        Stack = &yyptr->Stack_alloc;                                    \
        -:  613:        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        -:  614:        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
        -:  615:      }                                                                 \
        -:  616:    while (0)
        -:  617:
        -:  618:#endif
        -:  619:
        -:  620:#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
        -:  621:/* Copy COUNT objects from SRC to DST.  The source and destination do
        -:  622:   not overlap.  */
        -:  623:# ifndef YYCOPY
        -:  624:#  if defined __GNUC__ && 1 < __GNUC__
        -:  625:#   define YYCOPY(Dst, Src, Count) \
        -:  626:      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
        -:  627:#  else
        -:  628:#   define YYCOPY(Dst, Src, Count)              \
        -:  629:      do                                        \
        -:  630:        {                                       \
        -:  631:          YYPTRDIFF_T yyi;                      \
        -:  632:          for (yyi = 0; yyi < (Count); yyi++)   \
        -:  633:            (Dst)[yyi] = (Src)[yyi];            \
        -:  634:        }                                       \
        -:  635:      while (0)
        -:  636:#  endif
        -:  637:# endif
        -:  638:#endif /* !YYCOPY_NEEDED */
        -:  639:
        -:  640:/* YYFINAL -- State number of the termination state.  */
        -:  641:#define YYFINAL  2
        -:  642:/* YYLAST -- Last index in YYTABLE.  */
        -:  643:#define YYLAST   374
        -:  644:
        -:  645:/* YYNTOKENS -- Number of terminals.  */
        -:  646:#define YYNTOKENS  74
        -:  647:/* YYNNTS -- Number of nonterminals.  */
        -:  648:#define YYNNTS  41
        -:  649:/* YYNRULES -- Number of rules.  */
        -:  650:#define YYNRULES  124
        -:  651:/* YYNSTATES -- Number of states.  */
        -:  652:#define YYNSTATES  212
        -:  653:
        -:  654:#define YYUNDEFTOK  2
        -:  655:#define YYMAXUTOK   309
        -:  656:
        -:  657:
        -:  658:/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
        -:  659:   as returned by yylex, with out-of-bounds checking.  */
        -:  660:#define YYTRANSLATE(YYX)                                                \
        -:  661:  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
        -:  662:
        -:  663:/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
        -:  664:   as returned by yylex.  */
        -:  665:static const yytype_int8 yytranslate[] =
        -:  666:{
        -:  667:       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  668:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  669:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  670:       2,     2,     2,     2,     2,     2,     2,    60,    55,     2,
        -:  671:      71,    72,    58,    56,    73,    57,    68,     2,     2,     2,
        -:  672:       2,     2,     2,     2,     2,     2,     2,     2,    66,     2,
        -:  673:       2,    67,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  674:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  675:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  676:       2,    69,    59,    70,    54,     2,     2,     2,     2,     2,
        -:  677:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  678:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  679:       2,     2,     2,    64,    53,    65,    61,     2,     2,     2,
        -:  680:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  681:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  682:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  683:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  684:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  685:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  686:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  687:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  688:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  689:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  690:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  691:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  692:       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
        -:  693:       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
        -:  694:      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
        -:  695:      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
        -:  696:      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
        -:  697:      45,    46,    47,    48,    49,    50,    51,    52,    62,    63
        -:  698:};
        -:  699:
        -:  700:#if YYDEBUG
        -:  701:  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
        -:  702:static const yytype_int16 yyrline[] =
        -:  703:{
        -:  704:       0,   257,   257,   258,   259,   260,   261,   262,   263,   271,
        -:  705:     284,   289,   283,   310,   313,   343,   346,   371,   376,   377,
        -:  706:     382,   383,   389,   392,   410,   419,   458,   459,   464,   481,
        -:  707:     495,   509,   523,   541,   542,   548,   547,   563,   562,   578,
        -:  708:     592,   593,   598,   599,   600,   601,   602,   607,   693,   740,
        -:  709:     799,   845,   846,   850,   878,   918,   961,   981,   988,   995,
        -:  710:    1007,  1017,  1031,  1046,  1057,  1068,  1185,  1067,  1367,  1366,
        -:  711:    1444,  1450,  1457,  1456,  1502,  1501,  1545,  1552,  1559,  1566,
        -:  712:    1573,  1580,  1587,  1591,  1599,  1600,  1605,  1629,  1642,  1660,
        -:  713:    1659,  1665,  1677,  1678,  1683,  1690,  1701,  1705,  1710,  1719,
        -:  714:    1723,  1731,  1743,  1757,  1765,  1772,  1797,  1809,  1821,  1837,
        -:  715:    1849,  1865,  1912,  1933,  1968,  2003,  2037,  2062,  2079,  2089,
        -:  716:    2099,  2109,  2119,  2139,  2159
        -:  717:};
        -:  718:#endif
        -:  719:
        -:  720:#if YYDEBUG || YYERROR_VERBOSE || 0
        -:  721:/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
        -:  722:   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
        -:  723:static const char *const yytname[] =
        -:  724:{
        -:  725:  "\"end of file\"", "error", "$undefined", "\"end of included file\"",
        -:  726:  "\"..\"", "\"<rule>\"", "\"<private>\"", "\"<global>\"", "\"<meta>\"",
        -:  727:  "\"<strings>\"", "\"<condition>\"", "\"identifier\"",
        -:  728:  "\"string identifier\"", "\"string count\"", "\"string offset\"",
        -:  729:  "\"string length\"", "\"string identifier with wildcard\"",
        -:  730:  "\"integer number\"", "\"floating point number\"",
        -:  731:  "\"integer function\"", "\"text string\"", "\"hex string\"",
        -:  732:  "\"regular expression\"", "\"<ascii>\"", "\"<wide>\"", "\"<xor>\"",
        -:  733:  "\"<nocase>\"", "\"<fullword>\"", "\"<at>\"", "\"<filesize>\"",
        -:  734:  "\"<entrypoint>\"", "\"<all>\"", "\"<any>\"", "\"<in>\"", "\"<of>\"",
        -:  735:  "\"<for>\"", "\"<them>\"", "\"<matches>\"", "\"<contains>\"",
        -:  736:  "\"<import>\"", "\"<true>\"", "\"<false\"", "\"<or>\"", "\"<and>\"",
        -:  737:  "\"<not>\"", "\"==\"", "\"!=\"", "\"<\"", "\"<=\"", "\">\"", "\">=\"",
        -:  738:  "\"<<\"", "\">>\"", "'|'", "'^'", "'&'", "'+'", "'-'", "'*'", "'\\\\'",
        -:  739:  "'%'", "'~'", "UNARY_MINUS", "\"include\"", "'{'", "'}'", "':'", "'='",
        -:  740:  "'.'", "'['", "']'", "'('", "')'", "','", "$accept", "rules", "import",
        -:  741:  "rule", "@1", "$@2", "meta", "strings", "condition", "rule_modifiers",
        -:  742:  "rule_modifier", "tags", "tag_list", "meta_declarations",
        -:  743:  "meta_declaration", "string_declarations", "string_declaration", "$@3",
        -:  744:  "$@4", "string_modifiers", "string_modifier", "identifier", "arguments",
        -:  745:  "arguments_list", "regexp", "boolean_expression", "expression", "$@5",
        -:  746:  "$@6", "$@7", "$@8", "$@9", "integer_set", "range",
        -:  747:  "integer_enumeration", "string_set", "$@10", "string_enumeration",
        -:  748:  "string_enumeration_item", "for_expression", "primary_expression", YY_NULLPTR
        -:  749:};
        -:  750:#endif
        -:  751:
        -:  752:# ifdef YYPRINT
        -:  753:/* YYTOKNUM[NUM] -- (External) token number corresponding to the
        -:  754:   (internal) symbol number NUM (which must be that of a token).  */
        -:  755:static const yytype_int16 yytoknum[] =
        -:  756:{
        -:  757:       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
        -:  758:     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
        -:  759:     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
        -:  760:     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
        -:  761:     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
        -:  762:     305,   306,   307,   124,    94,    38,    43,    45,    42,    92,
        -:  763:      37,   126,   308,   309,   123,   125,    58,    61,    46,    91,
        -:  764:      93,    40,    41,    44
        -:  765:};
        -:  766:# endif
        -:  767:
        -:  768:#define YYPACT_NINF (-74)
        -:  769:
        -:  770:#define yypact_value_is_default(Yyn) \
        -:  771:  ((Yyn) == YYPACT_NINF)
        -:  772:
        -:  773:#define YYTABLE_NINF (-97)
        -:  774:
        -:  775:#define yytable_value_is_error(Yyn) \
        -:  776:  0
        -:  777:
        -:  778:  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
        -:  779:     STATE-NUM.  */
        -:  780:static const yytype_int16 yypact[] =
        -:  781:{
        -:  782:     -74,    95,   -74,   -30,   -74,   -12,   -74,   -74,    79,   -74,
        -:  783:     -74,   -74,   -74,    -7,   -74,   -74,   -74,   -74,   -55,     4,
        -:  784:     -42,   -74,    23,    18,   -74,     9,    59,    83,    33,   -74,
        -:  785:      30,    83,   -74,   107,   117,    15,   -74,    65,   107,   -74,
        -:  786:      69,    72,   -74,   -74,   -74,   -74,   121,     8,   -74,    47,
        -:  787:     -74,   -74,   -74,   124,   123,   -74,   -16,   -74,    70,    77,
        -:  788:     -74,   -74,    89,   -74,   -74,   -74,   -74,   -74,   -74,   111,
        -:  789:     -74,   -74,    47,   136,   136,    47,    12,   -74,    28,   -74,
        -:  790:     114,   212,   -74,   -74,   136,    91,   136,   136,   136,   136,
        -:  791:       2,   314,   -74,   -74,   -74,    28,    85,   184,   152,   136,
        -:  792:      47,   -74,   -74,    -8,   142,   136,   136,   136,   136,   136,
        -:  793:     136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
        -:  794:     136,   136,    86,    86,   314,   136,   -74,   254,   274,   132,
        -:  795:     222,   -74,   134,    -8,   -74,   -74,   -74,   294,    97,   108,
        -:  796:      64,    47,    47,   -74,   -74,   -74,   -74,   314,   314,   314,
        -:  797:     314,   314,   314,   314,   195,   195,   119,   143,   168,    57,
        -:  798:      57,   -74,   -74,   -74,   -74,   -74,   -74,   -74,   -74,   -74,
        -:  799:     157,   -74,   -74,   -74,   -74,   130,   -74,   -74,    47,   137,
        -:  800:     -74,    -2,   136,   135,   -74,    64,   -74,   -74,    17,   -74,
        -:  801:     232,   136,   139,   -74,   174,   -74,    -2,   -74,    48,   157,
        -:  802:     -74,    47,   -74,   -74,   136,   176,   -18,   314,    47,   -74,
        -:  803:      31,   -74
        -:  804:};
        -:  805:
        -:  806:  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
        -:  807:     Performed when YYTABLE does not specify something else to do.  Zero
        -:  808:     means the default is an error.  */
        -:  809:static const yytype_int8 yydefact[] =
        -:  810:{
        -:  811:       2,     0,     1,    18,     8,     0,     4,     3,     0,     7,
        -:  812:       6,     5,     9,     0,    20,    21,    19,    10,    22,     0,
        -:  813:       0,    24,    23,    13,    25,     0,    15,     0,     0,    11,
        -:  814:       0,    14,    26,     0,     0,     0,    27,     0,    16,    33,
        -:  815:       0,     0,    29,    28,    31,    32,     0,    35,    34,     0,
        -:  816:      12,    30,    39,     0,     0,    47,    61,   106,   108,   110,
        -:  817:     103,   104,     0,   105,    55,   100,   101,    97,    98,     0,
        -:  818:      57,    58,     0,     0,     0,     0,   111,   124,    17,    56,
        -:  819:       0,    82,    40,    40,     0,     0,     0,     0,     0,     0,
        -:  820:       0,    96,    71,   112,   121,     0,    56,    82,     0,     0,
        -:  821:      51,    74,    72,     0,     0,     0,     0,     0,     0,     0,
        -:  822:       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        -:  823:       0,     0,    36,    38,    62,     0,    63,     0,     0,     0,
        -:  824:       0,    64,     0,     0,    83,    99,    48,     0,     0,    52,
        -:  825:      53,     0,     0,    91,    89,    70,    59,    60,    80,    81,
        -:  826:      76,    78,    77,    79,   122,   123,   120,   118,   119,   113,
        -:  827:     114,   115,   116,   117,    43,    42,    46,    44,    45,    41,
        -:  828:       0,   107,   109,   102,    65,     0,    49,    50,     0,    75,
        -:  829:      73,     0,     0,     0,    68,    54,    94,    95,     0,    92,
        -:  830:       0,     0,     0,    85,     0,    90,     0,    86,     0,    87,
        -:  831:      66,     0,    93,    84,     0,     0,     0,    88,     0,    69,
        -:  832:       0,    67
        -:  833:};
        -:  834:
        -:  835:  /* YYPGOTO[NTERM-NUM].  */
        -:  836:static const yytype_int16 yypgoto[] =
        -:  837:{
        -:  838:     -74,   -74,   220,   245,   -74,   -74,   -74,   -74,   -74,   -74,
        -:  839:     -74,   -74,   -74,   -74,   262,   -74,   257,   -74,   -74,   213,
        -:  840:     -74,   -74,   -74,   -74,   193,   -49,   -73,   -74,   -74,   -74,
        -:  841:     -74,   -74,   -74,   115,   -74,   166,   -74,   -74,   104,   233,
        -:  842:     -68
        -:  843:};
        -:  844:
        -:  845:  /* YYDEFGOTO[NTERM-NUM].  */
        -:  846:static const yytype_int16 yydefgoto[] =
        -:  847:{
        -:  848:      -1,     1,     6,     7,    18,    34,    26,    29,    41,     8,
        -:  849:      16,    20,    22,    31,    32,    38,    39,    53,    54,   122,
        -:  850:     169,    76,   138,   139,    77,    95,    79,   183,   205,   194,
        -:  851:     142,   141,   192,   126,   198,   145,   181,   188,   189,    80,
        -:  852:      81
        -:  853:};
        -:  854:
        -:  855:  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
        -:  856:     positive, shift that token.  If negative, reduce the rule whose
        -:  857:     number is the opposite.  If YYTABLE_NINF, syntax error.  */
        -:  858:static const yytype_int16 yytable[] =
        -:  859:{
        -:  860:      78,    91,    96,   131,    17,    93,    94,    97,    12,     5,
        -:  861:     186,    19,    84,   132,   187,    21,   124,    85,   127,   128,
        -:  862:     129,   130,    23,    92,   101,   102,    25,   140,   143,    52,
        -:  863:     -37,   137,    42,     9,    24,    43,   133,   147,   148,   149,
        -:  864:     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
        -:  865:     160,   161,   162,   163,   209,    44,    45,   170,    55,    56,
        -:  866:      57,    58,    59,   144,    60,    61,    62,    63,    28,    64,
        -:  867:     101,   102,    46,   101,   102,    27,    65,    66,    67,    68,
        -:  868:      98,    99,    69,   100,    13,    14,    15,    70,    71,   195,
        -:  869:     196,    72,   179,   180,    30,     2,     3,    35,     4,    33,
        -:  870:     -18,   -18,   -18,   211,    73,   185,   -56,   -56,    74,   164,
        -:  871:     165,   166,   167,   168,   190,   119,   120,   121,    75,    37,
        -:  872:     203,   204,    55,   199,    57,    58,    59,    40,    60,    61,
        -:  873:      62,    63,    47,    64,     5,    49,   207,    50,    51,    86,
        -:  874:      65,    66,    67,    68,    82,    83,    87,    55,   103,    57,
        -:  875:      58,    59,   206,    60,    61,    62,    63,   134,    64,   210,
        -:  876:      88,   182,   125,   136,    64,    65,    66,   174,    73,   177,
        -:  877:     112,   113,    74,   115,   116,   117,   118,   119,   120,   121,
        -:  878:     102,   178,    89,   112,   113,   114,   115,   116,   117,   118,
        -:  879:     119,   120,   121,    73,   112,   113,   184,    74,   116,   117,
        -:  880:     118,   119,   120,   121,   173,   200,   191,    89,   112,   113,
        -:  881:     114,   115,   116,   117,   118,   119,   120,   121,   -96,   112,
        -:  882:     113,   104,   105,    10,   117,   118,   119,   120,   121,   106,
        -:  883:     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
        -:  884:     117,   118,   119,   120,   121,   201,   -96,   208,    11,   104,
        -:  885:     105,   117,   118,   119,   120,   121,   135,   106,   107,   108,
        -:  886:     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
        -:  887:     119,   120,   121,   112,   113,   114,   115,   116,   117,   118,
        -:  888:     119,   120,   121,   112,   113,   114,   115,   116,   117,   118,
        -:  889:     119,   120,   121,    36,   135,    48,   123,   146,   193,   175,
        -:  890:     202,     0,    90,     0,   197,   112,   113,   114,   115,   116,
        -:  891:     117,   118,   119,   120,   121,     0,     0,     0,     0,     0,
        -:  892:       0,     0,     0,     0,   171,   112,   113,   114,   115,   116,
        -:  893:     117,   118,   119,   120,   121,     0,     0,     0,     0,     0,
        -:  894:       0,     0,     0,     0,   172,   112,   113,   114,   115,   116,
        -:  895:     117,   118,   119,   120,   121,     0,     0,     0,     0,     0,
        -:  896:       0,     0,     0,     0,   176,   112,   113,   114,   115,   116,
        -:  897:     117,   118,   119,   120,   121
        -:  898:};
        -:  899:
        -:  900:static const yytype_int16 yycheck[] =
        -:  901:{
        -:  902:      49,    69,    75,     1,    11,    73,    74,    75,    20,    39,
        -:  903:      12,    66,    28,    11,    16,    11,    84,    33,    86,    87,
        -:  904:      88,    89,    64,    72,    42,    43,     8,   100,    36,    21,
        -:  905:      22,    99,    17,    63,    11,    20,    34,   105,   106,   107,
        -:  906:     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
        -:  907:     118,   119,   120,   121,    72,    40,    41,   125,    11,    12,
        -:  908:      13,    14,    15,    71,    17,    18,    19,    20,     9,    22,
        -:  909:      42,    43,    57,    42,    43,    66,    29,    30,    31,    32,
        -:  910:      68,    69,    35,    71,     5,     6,     7,    40,    41,    72,
        -:  911:      73,    44,   141,   142,    11,     0,     1,    67,     3,    66,
        -:  912:       5,     6,     7,    72,    57,   178,    42,    43,    61,    23,
        -:  913:      24,    25,    26,    27,   182,    58,    59,    60,    71,    12,
        -:  914:      72,    73,    11,   191,    13,    14,    15,    10,    17,    18,
        -:  915:      19,    20,    67,    22,    39,    66,   204,    65,    17,    69,
        -:  916:      29,    30,    31,    32,    20,    22,    69,    11,    34,    13,
        -:  917:      14,    15,   201,    17,    18,    19,    20,    72,    22,   208,
        -:  918:      71,     4,    71,    11,    22,    29,    30,    33,    57,    72,
        -:  919:      51,    52,    61,    54,    55,    56,    57,    58,    59,    60,
        -:  920:      43,    73,    71,    51,    52,    53,    54,    55,    56,    57,
        -:  921:      58,    59,    60,    57,    51,    52,    66,    61,    55,    56,
        -:  922:      57,    58,    59,    60,    72,    66,    71,    71,    51,    52,
        -:  923:      53,    54,    55,    56,    57,    58,    59,    60,    34,    51,
        -:  924:      52,    37,    38,     3,    56,    57,    58,    59,    60,    45,
        -:  925:      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
        -:  926:      56,    57,    58,    59,    60,    71,    34,    71,     3,    37,
        -:  927:      38,    56,    57,    58,    59,    60,    72,    45,    46,    47,
        -:  928:      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
        -:  929:      58,    59,    60,    51,    52,    53,    54,    55,    56,    57,
        -:  930:      58,    59,    60,    51,    52,    53,    54,    55,    56,    57,
        -:  931:      58,    59,    60,    31,    72,    38,    83,   104,   183,   133,
        -:  932:     196,    -1,    69,    -1,    72,    51,    52,    53,    54,    55,
        -:  933:      56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
        -:  934:      -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,
        -:  935:      56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
        -:  936:      -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,
        -:  937:      56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
        -:  938:      -1,    -1,    -1,    -1,    70,    51,    52,    53,    54,    55,
        -:  939:      56,    57,    58,    59,    60
        -:  940:};
        -:  941:
        -:  942:  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
        -:  943:     symbol of state STATE-NUM.  */
        -:  944:static const yytype_int8 yystos[] =
        -:  945:{
        -:  946:       0,    75,     0,     1,     3,    39,    76,    77,    83,    63,
        -:  947:      76,    77,    20,     5,     6,     7,    84,    11,    78,    66,
        -:  948:      85,    11,    86,    64,    11,     8,    80,    66,     9,    81,
        -:  949:      11,    87,    88,    66,    79,    67,    88,    12,    89,    90,
        -:  950:      10,    82,    17,    20,    40,    41,    57,    67,    90,    66,
        -:  951:      65,    17,    21,    91,    92,    11,    12,    13,    14,    15,
        -:  952:      17,    18,    19,    20,    22,    29,    30,    31,    32,    35,
        -:  953:      40,    41,    44,    57,    61,    71,    95,    98,    99,   100,
        -:  954:     113,   114,    20,    22,    28,    33,    69,    69,    71,    71,
        -:  955:     113,   114,    99,   114,   114,    99,   100,   114,    68,    69,
        -:  956:      71,    42,    43,    34,    37,    38,    45,    46,    47,    48,
        -:  957:      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
        -:  958:      59,    60,    93,    93,   114,    71,   107,   114,   114,   114,
        -:  959:     114,     1,    11,    34,    72,    72,    11,   114,    96,    97,
        -:  960:     100,   105,   104,    36,    71,   109,    98,   114,   114,   114,
        -:  961:     114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
        -:  962:     114,   114,   114,   114,    23,    24,    25,    26,    27,    94,
        -:  963:     114,    70,    70,    72,    33,   109,    70,    72,    73,    99,
        -:  964:      99,   110,     4,   101,    66,   100,    12,    16,   111,   112,
        -:  965:     114,    71,   106,   107,   103,    72,    73,    72,   108,   114,
        -:  966:      66,    71,   112,    72,    73,   102,    99,   114,    71,    72,
        -:  967:      99,    72
        -:  968:};
        -:  969:
        -:  970:  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
        -:  971:static const yytype_int8 yyr1[] =
        -:  972:{
        -:  973:       0,    74,    75,    75,    75,    75,    75,    75,    75,    76,
        -:  974:      78,    79,    77,    80,    80,    81,    81,    82,    83,    83,
        -:  975:      84,    84,    85,    85,    86,    86,    87,    87,    88,    88,
        -:  976:      88,    88,    88,    89,    89,    91,    90,    92,    90,    90,
        -:  977:      93,    93,    94,    94,    94,    94,    94,    95,    95,    95,
        -:  978:      95,    96,    96,    97,    97,    98,    99,   100,   100,   100,
        -:  979:     100,   100,   100,   100,   100,   101,   102,   100,   103,   100,
        -:  980:     100,   100,   104,   100,   105,   100,   100,   100,   100,   100,
        -:  981:     100,   100,   100,   100,   106,   106,   107,   108,   108,   110,
        -:  982:     109,   109,   111,   111,   112,   112,   113,   113,   113,   114,
        -:  983:     114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
        -:  984:     114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
        -:  985:     114,   114,   114,   114,   114
        -:  986:};
        -:  987:
        -:  988:  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
        -:  989:static const yytype_int8 yyr2[] =
        -:  990:{
        -:  991:       0,     2,     0,     2,     2,     3,     3,     3,     2,     2,
        -:  992:       0,     0,    11,     0,     3,     0,     3,     3,     0,     2,
        -:  993:       1,     1,     0,     2,     1,     2,     1,     2,     3,     3,
        -:  994:       4,     3,     3,     1,     2,     0,     5,     0,     5,     3,
        -:  995:       0,     2,     1,     1,     1,     1,     1,     1,     3,     4,
        -:  996:       4,     0,     1,     1,     3,     1,     1,     1,     1,     3,
        -:  997:       3,     1,     3,     3,     3,     0,     0,    11,     0,     9,
        -:  998:       3,     2,     0,     4,     0,     4,     3,     3,     3,     3,
        -:  999:       3,     3,     1,     3,     3,     1,     5,     1,     3,     0,
        -: 1000:       4,     1,     1,     3,     1,     1,     1,     1,     1,     3,
        -: 1001:       1,     1,     4,     1,     1,     1,     1,     4,     1,     4,
        -: 1002:       1,     1,     2,     3,     3,     3,     3,     3,     3,     3,
        -: 1003:       3,     2,     3,     3,     1
        -: 1004:};
        -: 1005:
        -: 1006:
        -: 1007:#define yyerrok         (yyerrstatus = 0)
        -: 1008:#define yyclearin       (yychar = YYEMPTY)
        -: 1009:#define YYEMPTY         (-2)
        -: 1010:#define YYEOF           0
        -: 1011:
        -: 1012:#define YYACCEPT        goto yyacceptlab
        -: 1013:#define YYABORT         goto yyabortlab
        -: 1014:#define YYERROR         goto yyerrorlab
        -: 1015:
        -: 1016:
        -: 1017:#define YYRECOVERING()  (!!yyerrstatus)
        -: 1018:
        -: 1019:#define YYBACKUP(Token, Value)                                    \
        -: 1020:  do                                                              \
        -: 1021:    if (yychar == YYEMPTY)                                        \
        -: 1022:      {                                                           \
        -: 1023:        yychar = (Token);                                         \
        -: 1024:        yylval = (Value);                                         \
        -: 1025:        YYPOPSTACK (yylen);                                       \
        -: 1026:        yystate = *yyssp;                                         \
        -: 1027:        goto yybackup;                                            \
        -: 1028:      }                                                           \
        -: 1029:    else                                                          \
        -: 1030:      {                                                           \
        -: 1031:        yyerror (yyscanner, compiler, YY_("syntax error: cannot back up")); \
        -: 1032:        YYERROR;                                                  \
        -: 1033:      }                                                           \
        -: 1034:  while (0)
        -: 1035:
        -: 1036:/* Error token number */
        -: 1037:#define YYTERROR        1
        -: 1038:#define YYERRCODE       256
        -: 1039:
        -: 1040:
        -: 1041:
        -: 1042:/* Enable debugging if requested.  */
        -: 1043:#if YYDEBUG
        -: 1044:
        -: 1045:# ifndef YYFPRINTF
        -: 1046:#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
        -: 1047:#  define YYFPRINTF fprintf
        -: 1048:# endif
        -: 1049:
        -: 1050:# define YYDPRINTF(Args)                        \
        -: 1051:do {                                            \
        -: 1052:  if (yydebug)                                  \
        -: 1053:    YYFPRINTF Args;                             \
        -: 1054:} while (0)
        -: 1055:
        -: 1056:/* This macro is provided for backward compatibility. */
        -: 1057:#ifndef YY_LOCATION_PRINT
        -: 1058:# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
        -: 1059:#endif
        -: 1060:
        -: 1061:
        -: 1062:# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
        -: 1063:do {                                                                      \
        -: 1064:  if (yydebug)                                                            \
        -: 1065:    {                                                                     \
        -: 1066:      YYFPRINTF (stderr, "%s ", Title);                                   \
        -: 1067:      yy_symbol_print (stderr,                                            \
        -: 1068:                  Type, Value, yyscanner, compiler); \
        -: 1069:      YYFPRINTF (stderr, "\n");                                           \
        -: 1070:    }                                                                     \
        -: 1071:} while (0)
        -: 1072:
        -: 1073:
        -: 1074:/*-----------------------------------.
        -: 1075:| Print this symbol's value on YYO.  |
        -: 1076:`-----------------------------------*/
        -: 1077:
        -: 1078:static void
        -: 1079:yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, YR_COMPILER* compiler)
        -: 1080:{
        -: 1081:  FILE *yyoutput = yyo;
        -: 1082:  YYUSE (yyoutput);
        -: 1083:  YYUSE (yyscanner);
        -: 1084:  YYUSE (compiler);
        -: 1085:  if (!yyvaluep)
        -: 1086:    return;
        -: 1087:# ifdef YYPRINT
        -: 1088:  if (yytype < YYNTOKENS)
        -: 1089:    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
        -: 1090:# endif
        -: 1091:  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
        -: 1092:  YYUSE (yytype);
        -: 1093:  YY_IGNORE_MAYBE_UNINITIALIZED_END
        -: 1094:}
        -: 1095:
        -: 1096:
        -: 1097:/*---------------------------.
        -: 1098:| Print this symbol on YYO.  |
        -: 1099:`---------------------------*/
        -: 1100:
        -: 1101:static void
        -: 1102:yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, YR_COMPILER* compiler)
        -: 1103:{
        -: 1104:  YYFPRINTF (yyo, "%s %s (",
        -: 1105:             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);
        -: 1106:
        -: 1107:  yy_symbol_value_print (yyo, yytype, yyvaluep, yyscanner, compiler);
        -: 1108:  YYFPRINTF (yyo, ")");
        -: 1109:}
        -: 1110:
        -: 1111:/*------------------------------------------------------------------.
        -: 1112:| yy_stack_print -- Print the state stack from its BOTTOM up to its |
        -: 1113:| TOP (included).                                                   |
        -: 1114:`------------------------------------------------------------------*/
        -: 1115:
        -: 1116:static void
        -: 1117:yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
        -: 1118:{
        -: 1119:  YYFPRINTF (stderr, "Stack now");
        -: 1120:  for (; yybottom <= yytop; yybottom++)
        -: 1121:    {
        -: 1122:      int yybot = *yybottom;
        -: 1123:      YYFPRINTF (stderr, " %d", yybot);
        -: 1124:    }
        -: 1125:  YYFPRINTF (stderr, "\n");
        -: 1126:}
        -: 1127:
        -: 1128:# define YY_STACK_PRINT(Bottom, Top)                            \
        -: 1129:do {                                                            \
        -: 1130:  if (yydebug)                                                  \
        -: 1131:    yy_stack_print ((Bottom), (Top));                           \
        -: 1132:} while (0)
        -: 1133:
        -: 1134:
        -: 1135:/*------------------------------------------------.
        -: 1136:| Report that the YYRULE is going to be reduced.  |
        -: 1137:`------------------------------------------------*/
        -: 1138:
        -: 1139:static void
        -: 1140:yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, int yyrule, void *yyscanner, YR_COMPILER* compiler)
        -: 1141:{
        -: 1142:  int yylno = yyrline[yyrule];
        -: 1143:  int yynrhs = yyr2[yyrule];
        -: 1144:  int yyi;
        -: 1145:  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
        -: 1146:             yyrule - 1, yylno);
        -: 1147:  /* The symbols being reduced.  */
        -: 1148:  for (yyi = 0; yyi < yynrhs; yyi++)
        -: 1149:    {
        -: 1150:      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
        -: 1151:      yy_symbol_print (stderr,
        -: 1152:                       yystos[+yyssp[yyi + 1 - yynrhs]],
        -: 1153:                       &yyvsp[(yyi + 1) - (yynrhs)]
        -: 1154:                                              , yyscanner, compiler);
        -: 1155:      YYFPRINTF (stderr, "\n");
        -: 1156:    }
        -: 1157:}
        -: 1158:
        -: 1159:# define YY_REDUCE_PRINT(Rule)          \
        -: 1160:do {                                    \
        -: 1161:  if (yydebug)                          \
        -: 1162:    yy_reduce_print (yyssp, yyvsp, Rule, yyscanner, compiler); \
        -: 1163:} while (0)
        -: 1164:
        -: 1165:/* Nonzero means print parse trace.  It is left uninitialized so that
        -: 1166:   multiple parsers can coexist.  */
        -: 1167:int yydebug;
        -: 1168:#else /* !YYDEBUG */
        -: 1169:# define YYDPRINTF(Args)
        -: 1170:# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
        -: 1171:# define YY_STACK_PRINT(Bottom, Top)
        -: 1172:# define YY_REDUCE_PRINT(Rule)
        -: 1173:#endif /* !YYDEBUG */
        -: 1174:
        -: 1175:
        -: 1176:/* YYINITDEPTH -- initial size of the parser's stacks.  */
        -: 1177:#ifndef YYINITDEPTH
        -: 1178:# define YYINITDEPTH 200
        -: 1179:#endif
        -: 1180:
        -: 1181:/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
        -: 1182:   if the built-in stack extension method is used).
        -: 1183:
        -: 1184:   Do not make this value too large; the results are undefined if
        -: 1185:   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
        -: 1186:   evaluated with infinite-precision integer arithmetic.  */
        -: 1187:
        -: 1188:#ifndef YYMAXDEPTH
        -: 1189:# define YYMAXDEPTH 10000
        -: 1190:#endif
        -: 1191:
        -: 1192:
        -: 1193:#if YYERROR_VERBOSE
        -: 1194:
        -: 1195:# ifndef yystrlen
        -: 1196:#  if defined __GLIBC__ && defined _STRING_H
        -: 1197:#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
        -: 1198:#  else
        -: 1199:/* Return the length of YYSTR.  */
        -: 1200:static YYPTRDIFF_T
        -: 1201:yystrlen (const char *yystr)
        -: 1202:{
        -: 1203:  YYPTRDIFF_T yylen;
        -: 1204:  for (yylen = 0; yystr[yylen]; yylen++)
        -: 1205:    continue;
        -: 1206:  return yylen;
        -: 1207:}
        -: 1208:#  endif
        -: 1209:# endif
        -: 1210:
        -: 1211:# ifndef yystpcpy
        -: 1212:#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
        -: 1213:#   define yystpcpy stpcpy
        -: 1214:#  else
        -: 1215:/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
        -: 1216:   YYDEST.  */
        -: 1217:static char *
    #####: 1218:yystpcpy (char *yydest, const char *yysrc)
        -: 1219:{
    #####: 1220:  char *yyd = yydest;
    #####: 1221:  const char *yys = yysrc;
        -: 1222:
    #####: 1223:  while ((*yyd++ = *yys++) != '\0')
    #####: 1224:    continue;
        -: 1225:
    #####: 1226:  return yyd - 1;
        -: 1227:}
        -: 1228:#  endif
        -: 1229:# endif
        -: 1230:
        -: 1231:# ifndef yytnamerr
        -: 1232:/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
        -: 1233:   quotes and backslashes, so that it's suitable for yyerror.  The
        -: 1234:   heuristic is that double-quoting is unnecessary unless the string
        -: 1235:   contains an apostrophe, a comma, or backslash (other than
        -: 1236:   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
        -: 1237:   null, do not copy; instead, return the length of what the result
        -: 1238:   would have been.  */
        -: 1239:static YYPTRDIFF_T
    #####: 1240:yytnamerr (char *yyres, const char *yystr)
        -: 1241:{
    #####: 1242:  if (*yystr == '"')
        -: 1243:    {
    #####: 1244:      YYPTRDIFF_T yyn = 0;
    #####: 1245:      char const *yyp = yystr;
        -: 1246:
        -: 1247:      for (;;)
    #####: 1248:        switch (*++yyp)
        -: 1249:          {
    #####: 1250:          case '\'':
        -: 1251:          case ',':
    #####: 1252:            goto do_not_strip_quotes;
        -: 1253:
    #####: 1254:          case '\\':
    #####: 1255:            if (*++yyp != '\\')
    #####: 1256:              goto do_not_strip_quotes;
        -: 1257:            else
    #####: 1258:              goto append;
        -: 1259:
    #####: 1260:          append:
        -: 1261:          default:
    #####: 1262:            if (yyres)
    #####: 1263:              yyres[yyn] = *yyp;
    #####: 1264:            yyn++;
    #####: 1265:            break;
        -: 1266:
    #####: 1267:          case '"':
    #####: 1268:            if (yyres)
    #####: 1269:              yyres[yyn] = '\0';
    #####: 1270:            return yyn;
        -: 1271:          }
    #####: 1272:    do_not_strip_quotes: ;
        -: 1273:    }
        -: 1274:
    #####: 1275:  if (yyres)
    #####: 1276:    return yystpcpy (yyres, yystr) - yyres;
        -: 1277:  else
    #####: 1278:    return yystrlen (yystr);
        -: 1279:}
        -: 1280:# endif
        -: 1281:
        -: 1282:/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
        -: 1283:   about the unexpected token YYTOKEN for the state stack whose top is
        -: 1284:   YYSSP.
        -: 1285:
        -: 1286:   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
        -: 1287:   not large enough to hold the message.  In that case, also set
        -: 1288:   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
        -: 1289:   required number of bytes is too large to store.  */
        -: 1290:static int
    #####: 1291:yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
        -: 1292:                yy_state_t *yyssp, int yytoken)
        -: 1293:{
        -: 1294:  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
        -: 1295:  /* Internationalized format string. */
    #####: 1296:  const char *yyformat = YY_NULLPTR;
        -: 1297:  /* Arguments of yyformat: reported tokens (one for the "unexpected",
        -: 1298:     one per "expected"). */
        -: 1299:  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
        -: 1300:  /* Actual size of YYARG. */
    #####: 1301:  int yycount = 0;
        -: 1302:  /* Cumulated lengths of YYARG.  */
    #####: 1303:  YYPTRDIFF_T yysize = 0;
        -: 1304:
        -: 1305:  /* There are many possibilities here to consider:
        -: 1306:     - If this state is a consistent state with a default action, then
        -: 1307:       the only way this function was invoked is if the default action
        -: 1308:       is an error action.  In that case, don't check for expected
        -: 1309:       tokens because there are none.
        -: 1310:     - The only way there can be no lookahead present (in yychar) is if
        -: 1311:       this state is a consistent state with a default action.  Thus,
        -: 1312:       detecting the absence of a lookahead is sufficient to determine
        -: 1313:       that there is no unexpected or expected token to report.  In that
        -: 1314:       case, just report a simple "syntax error".
        -: 1315:     - Don't assume there isn't a lookahead just because this state is a
        -: 1316:       consistent state with a default action.  There might have been a
        -: 1317:       previous inconsistent state, consistent state with a non-default
        -: 1318:       action, or user semantic action that manipulated yychar.
        -: 1319:     - Of course, the expected token list depends on states to have
        -: 1320:       correct lookahead information, and it depends on the parser not
        -: 1321:       to perform extra reductions after fetching a lookahead from the
        -: 1322:       scanner and before detecting a syntax error.  Thus, state merging
        -: 1323:       (from LALR or IELR) and default reductions corrupt the expected
        -: 1324:       token list.  However, the list is correct for canonical LR with
        -: 1325:       one exception: it will still contain any token that will not be
        -: 1326:       accepted due to an error action in a later state.
        -: 1327:  */
    #####: 1328:  if (yytoken != YYEMPTY)
        -: 1329:    {
    #####: 1330:      int yyn = yypact[+*yyssp];
    #####: 1331:      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
    #####: 1332:      yysize = yysize0;
    #####: 1333:      yyarg[yycount++] = yytname[yytoken];
    #####: 1334:      if (!yypact_value_is_default (yyn))
        -: 1335:        {
        -: 1336:          /* Start YYX at -YYN if negative to avoid negative indexes in
        -: 1337:             YYCHECK.  In other words, skip the first -YYN actions for
        -: 1338:             this state because they are default actions.  */
    #####: 1339:          int yyxbegin = yyn < 0 ? -yyn : 0;
        -: 1340:          /* Stay within bounds of both yycheck and yytname.  */
    #####: 1341:          int yychecklim = YYLAST - yyn + 1;
    #####: 1342:          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
        -: 1343:          int yyx;
        -: 1344:
    #####: 1345:          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
    #####: 1346:            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
    #####: 1347:                && !yytable_value_is_error (yytable[yyx + yyn]))
        -: 1348:              {
    #####: 1349:                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
        -: 1350:                  {
    #####: 1351:                    yycount = 1;
    #####: 1352:                    yysize = yysize0;
    #####: 1353:                    break;
        -: 1354:                  }
    #####: 1355:                yyarg[yycount++] = yytname[yyx];
        -: 1356:                {
    #####: 1357:                  YYPTRDIFF_T yysize1
    #####: 1358:                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
    #####: 1359:                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
    #####: 1360:                    yysize = yysize1;
        -: 1361:                  else
    #####: 1362:                    return 2;
        -: 1363:                }
        -: 1364:              }
        -: 1365:        }
        -: 1366:    }
        -: 1367:
    #####: 1368:  switch (yycount)
        -: 1369:    {
        -: 1370:# define YYCASE_(N, S)                      \
        -: 1371:      case N:                               \
        -: 1372:        yyformat = S;                       \
        -: 1373:      break
    #####: 1374:    default: /* Avoid compiler warnings. */
    #####: 1375:      YYCASE_(0, YY_("syntax error"));
    #####: 1376:      YYCASE_(1, YY_("syntax error, unexpected %s"));
    #####: 1377:      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
    #####: 1378:      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
    #####: 1379:      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
    #####: 1380:      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
        -: 1381:# undef YYCASE_
        -: 1382:    }
        -: 1383:
        -: 1384:  {
        -: 1385:    /* Don't count the "%s"s in the final size, but reserve room for
        -: 1386:       the terminator.  */
    #####: 1387:    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
    #####: 1388:    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
    #####: 1389:      yysize = yysize1;
        -: 1390:    else
    #####: 1391:      return 2;
        -: 1392:  }
        -: 1393:
    #####: 1394:  if (*yymsg_alloc < yysize)
        -: 1395:    {
    #####: 1396:      *yymsg_alloc = 2 * yysize;
    #####: 1397:      if (! (yysize <= *yymsg_alloc
        -: 1398:             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
    #####: 1399:        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
    #####: 1400:      return 1;
        -: 1401:    }
        -: 1402:
        -: 1403:  /* Avoid sprintf, as that infringes on the user's name space.
        -: 1404:     Don't have undefined behavior even if the translation
        -: 1405:     produced a string with the wrong number of "%s"s.  */
        -: 1406:  {
    #####: 1407:    char *yyp = *yymsg;
    #####: 1408:    int yyi = 0;
    #####: 1409:    while ((*yyp = *yyformat) != '\0')
    #####: 1410:      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        -: 1411:        {
    #####: 1412:          yyp += yytnamerr (yyp, yyarg[yyi++]);
    #####: 1413:          yyformat += 2;
        -: 1414:        }
        -: 1415:      else
        -: 1416:        {
    #####: 1417:          ++yyp;
    #####: 1418:          ++yyformat;
        -: 1419:        }
        -: 1420:  }
    #####: 1421:  return 0;
        -: 1422:}
        -: 1423:#endif /* YYERROR_VERBOSE */
        -: 1424:
        -: 1425:/*-----------------------------------------------.
        -: 1426:| Release the memory associated to this symbol.  |
        -: 1427:`-----------------------------------------------*/
        -: 1428:
        -: 1429:static void
    #####: 1430:yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, YR_COMPILER* compiler)
        -: 1431:{
        -: 1432:  YYUSE (yyvaluep);
        -: 1433:  YYUSE (yyscanner);
        -: 1434:  YYUSE (compiler);
    #####: 1435:  if (!yymsg)
    #####: 1436:    yymsg = "Deleting";
        -: 1437:  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
        -: 1438:
        -: 1439:  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
    #####: 1440:  switch (yytype)
        -: 1441:    {
    #####: 1442:    case 11: /* "identifier"  */
        -: 1443:#line 229 "grammar.y"
        -: 1444:            { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
        -: 1445:#line 1446 "grammar.c"
    #####: 1446:        break;
        -: 1447:
    #####: 1448:    case 12: /* "string identifier"  */
        -: 1449:#line 233 "grammar.y"
        -: 1450:            { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
        -: 1451:#line 1452 "grammar.c"
    #####: 1452:        break;
        -: 1453:
    #####: 1454:    case 13: /* "string count"  */
        -: 1455:#line 230 "grammar.y"
        -: 1456:            { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
        -: 1457:#line 1458 "grammar.c"
    #####: 1458:        break;
        -: 1459:
    #####: 1460:    case 14: /* "string offset"  */
        -: 1461:#line 231 "grammar.y"
        -: 1462:            { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
        -: 1463:#line 1464 "grammar.c"
    #####: 1464:        break;
        -: 1465:
    #####: 1466:    case 15: /* "string length"  */
        -: 1467:#line 232 "grammar.y"
        -: 1468:            { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
        -: 1469:#line 1470 "grammar.c"
    #####: 1470:        break;
        -: 1471:
    #####: 1472:    case 16: /* "string identifier with wildcard"  */
        -: 1473:#line 234 "grammar.y"
        -: 1474:            { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
        -: 1475:#line 1476 "grammar.c"
    #####: 1476:        break;
        -: 1477:
    #####: 1478:    case 20: /* "text string"  */
        -: 1479:#line 235 "grammar.y"
        -: 1480:            { yr_free(((*yyvaluep).sized_string)); ((*yyvaluep).sized_string) = NULL; }
        -: 1481:#line 1482 "grammar.c"
    #####: 1482:        break;
        -: 1483:
    #####: 1484:    case 21: /* "hex string"  */
        -: 1485:#line 236 "grammar.y"
        -: 1486:            { yr_free(((*yyvaluep).sized_string)); ((*yyvaluep).sized_string) = NULL; }
        -: 1487:#line 1488 "grammar.c"
    #####: 1488:        break;
        -: 1489:
    #####: 1490:    case 22: /* "regular expression"  */
        -: 1491:#line 237 "grammar.y"
        -: 1492:            { yr_free(((*yyvaluep).sized_string)); ((*yyvaluep).sized_string) = NULL; }
        -: 1493:#line 1494 "grammar.c"
    #####: 1494:        break;
        -: 1495:
    #####: 1496:    case 96: /* arguments  */
        -: 1497:#line 239 "grammar.y"
        -: 1498:            { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
        -: 1499:#line 1500 "grammar.c"
    #####: 1500:        break;
        -: 1501:
    #####: 1502:    case 97: /* arguments_list  */
        -: 1503:#line 240 "grammar.y"
        -: 1504:            { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
        -: 1505:#line 1506 "grammar.c"
    #####: 1506:        break;
        -: 1507:
    #####: 1508:      default:
    #####: 1509:        break;
        -: 1510:    }
        -: 1511:  YY_IGNORE_MAYBE_UNINITIALIZED_END
    #####: 1512:}
        -: 1513:
        -: 1514:
        -: 1515:
        -: 1516:
        -: 1517:/*----------.
        -: 1518:| yyparse.  |
        -: 1519:`----------*/
        -: 1520:
        -: 1521:int
    #####: 1522:yyparse (void *yyscanner, YR_COMPILER* compiler)
        -: 1523:{
        -: 1524:/* The lookahead symbol.  */
        -: 1525:int yychar;
        -: 1526:
        -: 1527:
        -: 1528:/* The semantic value of the lookahead symbol.  */
        -: 1529:/* Default value used for initialization, for pacifying older GCCs
        -: 1530:   or non-GCC compilers.  */
        -: 1531:YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
        -: 1532:YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
        -: 1533:
        -: 1534:    /* Number of syntax errors so far.  */
        -: 1535:    int yynerrs;
        -: 1536:
        -: 1537:    yy_state_fast_t yystate;
        -: 1538:    /* Number of tokens to shift before error messages enabled.  */
        -: 1539:    int yyerrstatus;
        -: 1540:
        -: 1541:    /* The stacks and their tools:
        -: 1542:       'yyss': related to states.
        -: 1543:       'yyvs': related to semantic values.
        -: 1544:
        -: 1545:       Refer to the stacks through separate pointers, to allow yyoverflow
        -: 1546:       to reallocate them elsewhere.  */
        -: 1547:
        -: 1548:    /* The state stack.  */
        -: 1549:    yy_state_t yyssa[YYINITDEPTH];
        -: 1550:    yy_state_t *yyss;
        -: 1551:    yy_state_t *yyssp;
        -: 1552:
        -: 1553:    /* The semantic value stack.  */
        -: 1554:    YYSTYPE yyvsa[YYINITDEPTH];
        -: 1555:    YYSTYPE *yyvs;
        -: 1556:    YYSTYPE *yyvsp;
        -: 1557:
        -: 1558:    YYPTRDIFF_T yystacksize;
        -: 1559:
        -: 1560:  int yyn;
        -: 1561:  int yyresult;
        -: 1562:  /* Lookahead token as an internal (translated) token number.  */
    #####: 1563:  int yytoken = 0;
        -: 1564:  /* The variables used to return semantic value and location from the
        -: 1565:     action routines.  */
        -: 1566:  YYSTYPE yyval;
        -: 1567:
        -: 1568:#if YYERROR_VERBOSE
        -: 1569:  /* Buffer for error messages, and its allocated size.  */
        -: 1570:  char yymsgbuf[128];
    #####: 1571:  char *yymsg = yymsgbuf;
    #####: 1572:  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
        -: 1573:#endif
        -: 1574:
        -: 1575:#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
        -: 1576:
        -: 1577:  /* The number of symbols on the RHS of the reduced rule.
        -: 1578:     Keep to zero when no symbol should be popped.  */
    #####: 1579:  int yylen = 0;
        -: 1580:
    #####: 1581:  yyssp = yyss = yyssa;
    #####: 1582:  yyvsp = yyvs = yyvsa;
    #####: 1583:  yystacksize = YYINITDEPTH;
        -: 1584:
        -: 1585:  YYDPRINTF ((stderr, "Starting parse\n"));
        -: 1586:
    #####: 1587:  yystate = 0;
    #####: 1588:  yyerrstatus = 0;
    #####: 1589:  yynerrs = 0;
    #####: 1590:  yychar = YYEMPTY; /* Cause a token to be read.  */
    #####: 1591:  goto yysetstate;
        -: 1592:
        -: 1593:
        -: 1594:/*------------------------------------------------------------.
        -: 1595:| yynewstate -- push a new state, which is found in yystate.  |
        -: 1596:`------------------------------------------------------------*/
    #####: 1597:yynewstate:
        -: 1598:  /* In all cases, when you get here, the value and location stacks
        -: 1599:     have just been pushed.  So pushing a state here evens the stacks.  */
    #####: 1600:  yyssp++;
        -: 1601:
        -: 1602:
        -: 1603:/*--------------------------------------------------------------------.
        -: 1604:| yysetstate -- set current state (the top of the stack) to yystate.  |
        -: 1605:`--------------------------------------------------------------------*/
    #####: 1606:yysetstate:
        -: 1607:  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
        -: 1608:  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
        -: 1609:  YY_IGNORE_USELESS_CAST_BEGIN
    #####: 1610:  *yyssp = YY_CAST (yy_state_t, yystate);
        -: 1611:  YY_IGNORE_USELESS_CAST_END
        -: 1612:
    #####: 1613:  if (yyss + yystacksize - 1 <= yyssp)
        -: 1614:#if !defined yyoverflow && !defined YYSTACK_RELOCATE
        -: 1615:    goto yyexhaustedlab;
        -: 1616:#else
        -: 1617:    {
        -: 1618:      /* Get the current used size of the three stacks, in elements.  */
    #####: 1619:      YYPTRDIFF_T yysize = yyssp - yyss + 1;
        -: 1620:
        -: 1621:# if defined yyoverflow
        -: 1622:      {
        -: 1623:        /* Give user a chance to reallocate the stack.  Use copies of
        -: 1624:           these so that the &'s don't force the real ones into
        -: 1625:           memory.  */
        -: 1626:        yy_state_t *yyss1 = yyss;
        -: 1627:        YYSTYPE *yyvs1 = yyvs;
        -: 1628:
        -: 1629:        /* Each stack pointer address is followed by the size of the
        -: 1630:           data in use in that stack, in bytes.  This used to be a
        -: 1631:           conditional around just the two extra args, but that might
        -: 1632:           be undefined if yyoverflow is a macro.  */
        -: 1633:        yyoverflow (YY_("memory exhausted"),
        -: 1634:                    &yyss1, yysize * YYSIZEOF (*yyssp),
        -: 1635:                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
        -: 1636:                    &yystacksize);
        -: 1637:        yyss = yyss1;
        -: 1638:        yyvs = yyvs1;
        -: 1639:      }
        -: 1640:# else /* defined YYSTACK_RELOCATE */
        -: 1641:      /* Extend the stack our own way.  */
    #####: 1642:      if (YYMAXDEPTH <= yystacksize)
    #####: 1643:        goto yyexhaustedlab;
    #####: 1644:      yystacksize *= 2;
    #####: 1645:      if (YYMAXDEPTH < yystacksize)
    #####: 1646:        yystacksize = YYMAXDEPTH;
        -: 1647:
        -: 1648:      {
    #####: 1649:        yy_state_t *yyss1 = yyss;
        -: 1650:        union yyalloc *yyptr =
    #####: 1651:          YY_CAST (union yyalloc *,
        -: 1652:                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
    #####: 1653:        if (! yyptr)
    #####: 1654:          goto yyexhaustedlab;
    #####: 1655:        YYSTACK_RELOCATE (yyss_alloc, yyss);
    #####: 1656:        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        -: 1657:# undef YYSTACK_RELOCATE
    #####: 1658:        if (yyss1 != yyssa)
    #####: 1659:          YYSTACK_FREE (yyss1);
        -: 1660:      }
        -: 1661:# endif
        -: 1662:
    #####: 1663:      yyssp = yyss + yysize - 1;
    #####: 1664:      yyvsp = yyvs + yysize - 1;
        -: 1665:
        -: 1666:      YY_IGNORE_USELESS_CAST_BEGIN
        -: 1667:      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
        -: 1668:                  YY_CAST (long, yystacksize)));
        -: 1669:      YY_IGNORE_USELESS_CAST_END
        -: 1670:
    #####: 1671:      if (yyss + yystacksize - 1 <= yyssp)
    #####: 1672:        YYABORT;
        -: 1673:    }
        -: 1674:#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */
        -: 1675:
    #####: 1676:  if (yystate == YYFINAL)
    #####: 1677:    YYACCEPT;
        -: 1678:
    #####: 1679:  goto yybackup;
        -: 1680:
        -: 1681:
        -: 1682:/*-----------.
        -: 1683:| yybackup.  |
        -: 1684:`-----------*/
    #####: 1685:yybackup:
        -: 1686:  /* Do appropriate processing given the current state.  Read a
        -: 1687:     lookahead token if we need one and don't already have one.  */
        -: 1688:
        -: 1689:  /* First try to decide what to do without reference to lookahead token.  */
    #####: 1690:  yyn = yypact[yystate];
    #####: 1691:  if (yypact_value_is_default (yyn))
    #####: 1692:    goto yydefault;
        -: 1693:
        -: 1694:  /* Not known => get a lookahead token if don't already have one.  */
        -: 1695:
        -: 1696:  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
    #####: 1697:  if (yychar == YYEMPTY)
        -: 1698:    {
        -: 1699:      YYDPRINTF ((stderr, "Reading a token: "));
    #####: 1700:      yychar = yylex (&yylval, yyscanner, compiler);
        -: 1701:    }
        -: 1702:
    #####: 1703:  if (yychar <= YYEOF)
        -: 1704:    {
    #####: 1705:      yychar = yytoken = YYEOF;
        -: 1706:      YYDPRINTF ((stderr, "Now at end of input.\n"));
        -: 1707:    }
        -: 1708:  else
        -: 1709:    {
    #####: 1710:      yytoken = YYTRANSLATE (yychar);
        -: 1711:      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
        -: 1712:    }
        -: 1713:
        -: 1714:  /* If the proper action on seeing token YYTOKEN is to reduce or to
        -: 1715:     detect an error, take that action.  */
    #####: 1716:  yyn += yytoken;
    #####: 1717:  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    #####: 1718:    goto yydefault;
    #####: 1719:  yyn = yytable[yyn];
    #####: 1720:  if (yyn <= 0)
        -: 1721:    {
        -: 1722:      if (yytable_value_is_error (yyn))
        -: 1723:        goto yyerrlab;
    #####: 1724:      yyn = -yyn;
    #####: 1725:      goto yyreduce;
        -: 1726:    }
        -: 1727:
        -: 1728:  /* Count tokens shifted since error; after three, turn off error
        -: 1729:     status.  */
    #####: 1730:  if (yyerrstatus)
    #####: 1731:    yyerrstatus--;
        -: 1732:
        -: 1733:  /* Shift the lookahead token.  */
        -: 1734:  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
    #####: 1735:  yystate = yyn;
        -: 1736:  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
    #####: 1737:  *++yyvsp = yylval;
        -: 1738:  YY_IGNORE_MAYBE_UNINITIALIZED_END
        -: 1739:
        -: 1740:  /* Discard the shifted token.  */
    #####: 1741:  yychar = YYEMPTY;
    #####: 1742:  goto yynewstate;
        -: 1743:
        -: 1744:
        -: 1745:/*-----------------------------------------------------------.
        -: 1746:| yydefault -- do the default action for the current state.  |
        -: 1747:`-----------------------------------------------------------*/
    #####: 1748:yydefault:
    #####: 1749:  yyn = yydefact[yystate];
    #####: 1750:  if (yyn == 0)
    #####: 1751:    goto yyerrlab;
    #####: 1752:  goto yyreduce;
        -: 1753:
        -: 1754:
        -: 1755:/*-----------------------------.
        -: 1756:| yyreduce -- do a reduction.  |
        -: 1757:`-----------------------------*/
    #####: 1758:yyreduce:
        -: 1759:  /* yyn is the number of a rule to reduce with.  */
    #####: 1760:  yylen = yyr2[yyn];
        -: 1761:
        -: 1762:  /* If YYLEN is nonzero, implement the default value of the action:
        -: 1763:     '$$ = $1'.
        -: 1764:
        -: 1765:     Otherwise, the following line sets YYVAL to garbage.
        -: 1766:     This behavior is undocumented and Bison
        -: 1767:     users should not rely upon it.  Assigning to YYVAL
        -: 1768:     unconditionally makes the parser a bit smaller, and it avoids a
        -: 1769:     GCC warning that YYVAL may be used uninitialized.  */
    #####: 1770:  yyval = yyvsp[1-yylen];
        -: 1771:
        -: 1772:
        -: 1773:  YY_REDUCE_PRINT (yyn);
    #####: 1774:  switch (yyn)
        -: 1775:    {
    #####: 1776:  case 8:
        -: 1777:#line 264 "grammar.y"
        -: 1778:      {
        -: 1779:        _yr_compiler_pop_file_name(compiler);
        -: 1780:      }
        -: 1781:#line 1782 "grammar.c"
    #####: 1782:    break;
        -: 1783:
    #####: 1784:  case 9:
        -: 1785:#line 272 "grammar.y"
        -: 1786:      {
        -: 1787:        int result = yr_parser_reduce_import(yyscanner, (yyvsp[0].sized_string));
        -: 1788:
        -: 1789:        yr_free((yyvsp[0].sized_string));
        -: 1790:
        -: 1791:        fail_if_error(result);
        -: 1792:      }
        -: 1793:#line 1794 "grammar.c"
    #####: 1794:    break;
        -: 1795:
    #####: 1796:  case 10:
        -: 1797:#line 284 "grammar.y"
        -: 1798:      {
        -: 1799:        fail_if_error(yr_parser_reduce_rule_declaration_phase_1(
        -: 1800:            yyscanner, (int32_t) (yyvsp[-2].integer), (yyvsp[0].c_string), &(yyval.rule)));
        -: 1801:      }
        -: 1802:#line 1803 "grammar.c"
    #####: 1803:    break;
        -: 1804:
    #####: 1805:  case 11:
        -: 1806:#line 289 "grammar.y"
        -: 1807:      {
        -: 1808:        YR_RULE* rule = (yyvsp[-4].rule); // rule created in phase 1
        -: 1809:
        -: 1810:        rule->tags = (yyvsp[-3].c_string);
        -: 1811:        rule->metas = (yyvsp[-1].meta);
        -: 1812:        rule->strings = (yyvsp[0].string);
        -: 1813:      }
        -: 1814:#line 1815 "grammar.c"
    #####: 1815:    break;
        -: 1816:
    #####: 1817:  case 12:
        -: 1818:#line 297 "grammar.y"
        -: 1819:      {
        -: 1820:        int result = yr_parser_reduce_rule_declaration_phase_2(
        -: 1821:            yyscanner, (yyvsp[-7].rule)); // rule created in phase 1
        -: 1822:
        -: 1823:        yr_free((yyvsp[-8].c_string));
        -: 1824:
        -: 1825:        fail_if_error(result);
        -: 1826:      }
        -: 1827:#line 1828 "grammar.c"
    #####: 1828:    break;
        -: 1829:
    #####: 1830:  case 13:
        -: 1831:#line 310 "grammar.y"
        -: 1832:      {
        -: 1833:        (yyval.meta) = NULL;
        -: 1834:      }
        -: 1835:#line 1836 "grammar.c"
    #####: 1836:    break;
        -: 1837:
    #####: 1838:  case 14:
        -: 1839:#line 314 "grammar.y"
        -: 1840:      {
        -: 1841:        int result;
        -: 1842:
        -: 1843:        // Each rule have a list of meta-data info, consisting in a
        -: 1844:        // sequence of YR_META structures. The last YR_META structure does
        -: 1845:        // not represent a real meta-data, it's just a end-of-list marker
        -: 1846:        // identified by a specific type (META_TYPE_NULL). Here we
        -: 1847:        // write the end-of-list marker.
        -: 1848:
        -: 1849:        YR_META null_meta;
        -: 1850:
        -: 1851:        memset(&null_meta, 0xFF, sizeof(YR_META));
        -: 1852:        null_meta.type = META_TYPE_NULL;
        -: 1853:
        -: 1854:        result = yr_arena_write_data(
        -: 1855:            compiler->metas_arena,
        -: 1856:            &null_meta,
        -: 1857:            sizeof(YR_META),
        -: 1858:            NULL);
        -: 1859:
        -: 1860:        (yyval.meta) = (yyvsp[0].meta);
        -: 1861:
        -: 1862:        fail_if_error(result);
        -: 1863:      }
        -: 1864:#line 1865 "grammar.c"
    #####: 1865:    break;
        -: 1866:
    #####: 1867:  case 15:
        -: 1868:#line 343 "grammar.y"
        -: 1869:      {
        -: 1870:        (yyval.string) = NULL;
        -: 1871:      }
        -: 1872:#line 1873 "grammar.c"
    #####: 1873:    break;
        -: 1874:
    #####: 1875:  case 16:
        -: 1876:#line 347 "grammar.y"
        -: 1877:      {
        -: 1878:        // Each rule have a list of strings, consisting in a sequence
        -: 1879:        // of YR_STRING structures. The last YR_STRING structure does not
        -: 1880:        // represent a real string, it's just a end-of-list marker
        -: 1881:        // identified by a specific flag (STRING_FLAGS_NULL). Here we
        -: 1882:        // write the end-of-list marker.
        -: 1883:
        -: 1884:        YR_STRING null_string;
        -: 1885:
        -: 1886:        memset(&null_string, 0xFF, sizeof(YR_STRING));
        -: 1887:        null_string.g_flags = STRING_GFLAGS_NULL;
        -: 1888:
        -: 1889:        fail_if_error(yr_arena_write_data(
        -: 1890:            compiler->strings_arena,
        -: 1891:            &null_string,
        -: 1892:            sizeof(YR_STRING),
        -: 1893:            NULL));
        -: 1894:
        -: 1895:        (yyval.string) = (yyvsp[0].string);
        -: 1896:      }
        -: 1897:#line 1898 "grammar.c"
    #####: 1898:    break;
        -: 1899:
    #####: 1900:  case 18:
        -: 1901:#line 376 "grammar.y"
        -: 1902:                                       { (yyval.integer) = 0;  }
        -: 1903:#line 1904 "grammar.c"
    #####: 1904:    break;
        -: 1905:
    #####: 1906:  case 19:
        -: 1907:#line 377 "grammar.y"
        -: 1908:                                       { (yyval.integer) = (yyvsp[-1].integer) | (yyvsp[0].integer); }
        -: 1909:#line 1910 "grammar.c"
    #####: 1910:    break;
        -: 1911:
    #####: 1912:  case 20:
        -: 1913:#line 382 "grammar.y"
        -: 1914:                     { (yyval.integer) = RULE_GFLAGS_PRIVATE; }
        -: 1915:#line 1916 "grammar.c"
    #####: 1916:    break;
        -: 1917:
    #####: 1918:  case 21:
        -: 1919:#line 383 "grammar.y"
        -: 1920:                     { (yyval.integer) = RULE_GFLAGS_GLOBAL; }
        -: 1921:#line 1922 "grammar.c"
    #####: 1922:    break;
        -: 1923:
    #####: 1924:  case 22:
        -: 1925:#line 389 "grammar.y"
        -: 1926:      {
        -: 1927:        (yyval.c_string) = NULL;
        -: 1928:      }
        -: 1929:#line 1930 "grammar.c"
    #####: 1930:    break;
        -: 1931:
    #####: 1932:  case 23:
        -: 1933:#line 393 "grammar.y"
        -: 1934:      {
        -: 1935:        // Tags list is represented in the arena as a sequence
        -: 1936:        // of null-terminated strings, the sequence ends with an
        -: 1937:        // additional null character. Here we write the ending null
        -: 1938:        //character. Example: tag1\0tag2\0tag3\0\0
        -: 1939:
        -: 1940:        int result = yr_arena_write_string(
        -: 1941:            yyget_extra(yyscanner)->sz_arena, "", NULL);
        -: 1942:
        -: 1943:        fail_if_error(result);
        -: 1944:
        -: 1945:        (yyval.c_string) = (yyvsp[0].c_string);
        -: 1946:      }
        -: 1947:#line 1948 "grammar.c"
    #####: 1948:    break;
        -: 1949:
    #####: 1950:  case 24:
        -: 1951:#line 411 "grammar.y"
        -: 1952:      {
        -: 1953:        int result = yr_arena_write_string(
        -: 1954:            yyget_extra(yyscanner)->sz_arena, (yyvsp[0].c_string), &(yyval.c_string));
        -: 1955:
        -: 1956:        yr_free((yyvsp[0].c_string));
        -: 1957:
        -: 1958:        fail_if_error(result);
        -: 1959:      }
        -: 1960:#line 1961 "grammar.c"
    #####: 1961:    break;
        -: 1962:
    #####: 1963:  case 25:
        -: 1964:#line 420 "grammar.y"
        -: 1965:      {
        -: 1966:        int result = ERROR_SUCCESS;
        -: 1967:
        -: 1968:        char* tag_name = (yyvsp[-1].c_string);
        -: 1969:        size_t tag_length = tag_name != NULL ? strlen(tag_name) : 0;
        -: 1970:
        -: 1971:        while (tag_length > 0)
        -: 1972:        {
        -: 1973:          if (strcmp(tag_name, (yyvsp[0].c_string)) == 0)
        -: 1974:          {
        -: 1975:            yr_compiler_set_error_extra_info(compiler, tag_name);
        -: 1976:            result = ERROR_DUPLICATED_TAG_IDENTIFIER;
        -: 1977:            break;
        -: 1978:          }
        -: 1979:
        -: 1980:          tag_name = (char*) yr_arena_next_address(
        -: 1981:              yyget_extra(yyscanner)->sz_arena,
        -: 1982:              tag_name,
        -: 1983:              tag_length + 1);
        -: 1984:
        -: 1985:          tag_length = tag_name != NULL ? strlen(tag_name) : 0;
        -: 1986:        }
        -: 1987:
        -: 1988:        if (result == ERROR_SUCCESS)
        -: 1989:          result = yr_arena_write_string(
        -: 1990:              yyget_extra(yyscanner)->sz_arena, (yyvsp[0].c_string), NULL);
        -: 1991:
        -: 1992:        yr_free((yyvsp[0].c_string));
        -: 1993:
        -: 1994:        fail_if_error(result);
        -: 1995:
        -: 1996:        (yyval.c_string) = (yyvsp[-1].c_string);
        -: 1997:      }
        -: 1998:#line 1999 "grammar.c"
    #####: 1999:    break;
        -: 2000:
    #####: 2001:  case 26:
        -: 2002:#line 458 "grammar.y"
        -: 2003:                                          {  (yyval.meta) = (yyvsp[0].meta); }
        -: 2004:#line 2005 "grammar.c"
    #####: 2005:    break;
        -: 2006:
    #####: 2007:  case 27:
        -: 2008:#line 459 "grammar.y"
        -: 2009:                                          {  (yyval.meta) = (yyvsp[-1].meta); }
        -: 2010:#line 2011 "grammar.c"
    #####: 2011:    break;
        -: 2012:
    #####: 2013:  case 28:
        -: 2014:#line 465 "grammar.y"
        -: 2015:      {
        -: 2016:        SIZED_STRING* sized_string = (yyvsp[0].sized_string);
        -: 2017:
        -: 2018:        int result = yr_parser_reduce_meta_declaration(
        -: 2019:            yyscanner,
        -: 2020:            META_TYPE_STRING,
        -: 2021:            (yyvsp[-2].c_string),
        -: 2022:            sized_string->c_string,
        -: 2023:            0,
        -: 2024:            &(yyval.meta));
        -: 2025:
        -: 2026:        yr_free((yyvsp[-2].c_string));
        -: 2027:        yr_free((yyvsp[0].sized_string));
        -: 2028:
        -: 2029:        fail_if_error(result);
        -: 2030:      }
        -: 2031:#line 2032 "grammar.c"
    #####: 2032:    break;
        -: 2033:
    #####: 2034:  case 29:
        -: 2035:#line 482 "grammar.y"
        -: 2036:      {
        -: 2037:        int result = yr_parser_reduce_meta_declaration(
        -: 2038:            yyscanner,
        -: 2039:            META_TYPE_INTEGER,
        -: 2040:            (yyvsp[-2].c_string),
        -: 2041:            NULL,
        -: 2042:            (yyvsp[0].integer),
        -: 2043:            &(yyval.meta));
        -: 2044:
        -: 2045:        yr_free((yyvsp[-2].c_string));
        -: 2046:
        -: 2047:        fail_if_error(result);
        -: 2048:      }
        -: 2049:#line 2050 "grammar.c"
    #####: 2050:    break;
        -: 2051:
    #####: 2052:  case 30:
        -: 2053:#line 496 "grammar.y"
        -: 2054:      {
        -: 2055:        int result = yr_parser_reduce_meta_declaration(
        -: 2056:            yyscanner,
        -: 2057:            META_TYPE_INTEGER,
        -: 2058:            (yyvsp[-3].c_string),
        -: 2059:            NULL,
        -: 2060:            -(yyvsp[0].integer),
        -: 2061:            &(yyval.meta));
        -: 2062:
        -: 2063:        yr_free((yyvsp[-3].c_string));
        -: 2064:
        -: 2065:        fail_if_error(result);
        -: 2066:      }
        -: 2067:#line 2068 "grammar.c"
    #####: 2068:    break;
        -: 2069:
    #####: 2070:  case 31:
        -: 2071:#line 510 "grammar.y"
        -: 2072:      {
        -: 2073:        int result = yr_parser_reduce_meta_declaration(
        -: 2074:            yyscanner,
        -: 2075:            META_TYPE_BOOLEAN,
        -: 2076:            (yyvsp[-2].c_string),
        -: 2077:            NULL,
        -: 2078:            true,
        -: 2079:            &(yyval.meta));
        -: 2080:
        -: 2081:        yr_free((yyvsp[-2].c_string));
        -: 2082:
        -: 2083:        fail_if_error(result);
        -: 2084:      }
        -: 2085:#line 2086 "grammar.c"
    #####: 2086:    break;
        -: 2087:
    #####: 2088:  case 32:
        -: 2089:#line 524 "grammar.y"
        -: 2090:      {
        -: 2091:        int result = yr_parser_reduce_meta_declaration(
        -: 2092:            yyscanner,
        -: 2093:            META_TYPE_BOOLEAN,
        -: 2094:            (yyvsp[-2].c_string),
        -: 2095:            NULL,
        -: 2096:            false,
        -: 2097:            &(yyval.meta));
        -: 2098:
        -: 2099:        yr_free((yyvsp[-2].c_string));
        -: 2100:
        -: 2101:        fail_if_error(result);
        -: 2102:      }
        -: 2103:#line 2104 "grammar.c"
    #####: 2104:    break;
        -: 2105:
    #####: 2106:  case 33:
        -: 2107:#line 541 "grammar.y"
        -: 2108:                                              { (yyval.string) = (yyvsp[0].string); }
        -: 2109:#line 2110 "grammar.c"
    #####: 2110:    break;
        -: 2111:
    #####: 2112:  case 34:
        -: 2113:#line 542 "grammar.y"
        -: 2114:                                              { (yyval.string) = (yyvsp[-1].string); }
        -: 2115:#line 2116 "grammar.c"
    #####: 2116:    break;
        -: 2117:
    #####: 2118:  case 35:
        -: 2119:#line 548 "grammar.y"
        -: 2120:      {
        -: 2121:        compiler->current_line = yyget_lineno(yyscanner);
        -: 2122:      }
        -: 2123:#line 2124 "grammar.c"
    #####: 2124:    break;
        -: 2125:
    #####: 2126:  case 36:
        -: 2127:#line 552 "grammar.y"
        -: 2128:      {
        -: 2129:        int result = yr_parser_reduce_string_declaration(
        -: 2130:            yyscanner, (int32_t) (yyvsp[0].integer), (yyvsp[-4].c_string), (yyvsp[-1].sized_string), &(yyval.string));
        -: 2131:
        -: 2132:        yr_free((yyvsp[-4].c_string));
        -: 2133:        yr_free((yyvsp[-1].sized_string));
        -: 2134:
        -: 2135:        fail_if_error(result);
        -: 2136:        compiler->current_line = 0;
        -: 2137:      }
        -: 2138:#line 2139 "grammar.c"
    #####: 2139:    break;
        -: 2140:
    #####: 2141:  case 37:
        -: 2142:#line 563 "grammar.y"
        -: 2143:      {
        -: 2144:        compiler->current_line = yyget_lineno(yyscanner);
        -: 2145:      }
        -: 2146:#line 2147 "grammar.c"
    #####: 2147:    break;
        -: 2148:
    #####: 2149:  case 38:
        -: 2150:#line 567 "grammar.y"
        -: 2151:      {
        -: 2152:        int result = yr_parser_reduce_string_declaration(
        -: 2153:            yyscanner, (int32_t) (yyvsp[0].integer) | STRING_GFLAGS_REGEXP, (yyvsp[-4].c_string), (yyvsp[-1].sized_string), &(yyval.string));
        -: 2154:
        -: 2155:        yr_free((yyvsp[-4].c_string));
        -: 2156:        yr_free((yyvsp[-1].sized_string));
        -: 2157:
        -: 2158:        fail_if_error(result);
        -: 2159:
        -: 2160:        compiler->current_line = 0;
        -: 2161:      }
        -: 2162:#line 2163 "grammar.c"
    #####: 2163:    break;
        -: 2164:
    #####: 2165:  case 39:
        -: 2166:#line 579 "grammar.y"
        -: 2167:      {
        -: 2168:        int result = yr_parser_reduce_string_declaration(
        -: 2169:            yyscanner, STRING_GFLAGS_HEXADECIMAL, (yyvsp[-2].c_string), (yyvsp[0].sized_string), &(yyval.string));
        -: 2170:
        -: 2171:        yr_free((yyvsp[-2].c_string));
        -: 2172:        yr_free((yyvsp[0].sized_string));
        -: 2173:
        -: 2174:        fail_if_error(result);
        -: 2175:      }
        -: 2176:#line 2177 "grammar.c"
    #####: 2177:    break;
        -: 2178:
    #####: 2179:  case 40:
        -: 2180:#line 592 "grammar.y"
        -: 2181:                                          { (yyval.integer) = 0; }
        -: 2182:#line 2183 "grammar.c"
    #####: 2183:    break;
        -: 2184:
    #####: 2185:  case 41:
        -: 2186:#line 593 "grammar.y"
        -: 2187:                                          { (yyval.integer) = (yyvsp[-1].integer) | (yyvsp[0].integer); }
        -: 2188:#line 2189 "grammar.c"
    #####: 2189:    break;
        -: 2190:
    #####: 2191:  case 42:
        -: 2192:#line 598 "grammar.y"
        -: 2193:                    { (yyval.integer) = STRING_GFLAGS_WIDE; }
        -: 2194:#line 2195 "grammar.c"
    #####: 2195:    break;
        -: 2196:
    #####: 2197:  case 43:
        -: 2198:#line 599 "grammar.y"
        -: 2199:                    { (yyval.integer) = STRING_GFLAGS_ASCII; }
        -: 2200:#line 2201 "grammar.c"
    #####: 2201:    break;
        -: 2202:
    #####: 2203:  case 44:
        -: 2204:#line 600 "grammar.y"
        -: 2205:                    { (yyval.integer) = STRING_GFLAGS_NO_CASE; }
        -: 2206:#line 2207 "grammar.c"
    #####: 2207:    break;
        -: 2208:
    #####: 2209:  case 45:
        -: 2210:#line 601 "grammar.y"
        -: 2211:                    { (yyval.integer) = STRING_GFLAGS_FULL_WORD; }
        -: 2212:#line 2213 "grammar.c"
    #####: 2213:    break;
        -: 2214:
    #####: 2215:  case 46:
        -: 2216:#line 602 "grammar.y"
        -: 2217:                    { (yyval.integer) = STRING_GFLAGS_XOR; }
        -: 2218:#line 2219 "grammar.c"
    #####: 2219:    break;
        -: 2220:
    #####: 2221:  case 47:
        -: 2222:#line 608 "grammar.y"
        -: 2223:      {
        -: 2224:        int result = ERROR_SUCCESS;
        -: 2225:        int var_index = yr_parser_lookup_loop_variable(yyscanner, (yyvsp[0].c_string));
        -: 2226:
        -: 2227:        if (var_index >= 0)
        -: 2228:        {
        -: 2229:          result = yr_parser_emit_with_arg(
        -: 2230:              yyscanner,
        -: 2231:              OP_PUSH_M,
        -: 2232:              LOOP_LOCAL_VARS * var_index,
        -: 2233:              NULL,
        -: 2234:              NULL);
        -: 2235:
        -: 2236:          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 2237:          (yyval.expression).value.integer = UNDEFINED;
        -: 2238:          (yyval.expression).identifier = compiler->loop_identifier[var_index];
        -: 2239:        }
        -: 2240:        else
        -: 2241:        {
        -: 2242:          // Search for identifier within the global namespace, where the
        -: 2243:          // externals variables reside.
        -: 2244:
        -: 2245:          YR_OBJECT* object = (YR_OBJECT*) yr_hash_table_lookup(
        -: 2246:              compiler->objects_table, (yyvsp[0].c_string), NULL);
        -: 2247:
        -: 2248:          if (object == NULL)
        -: 2249:          {
        -: 2250:            // If not found, search within the current namespace.
        -: 2251:            char* ns = compiler->current_namespace->name;
        -: 2252:
        -: 2253:            object = (YR_OBJECT*) yr_hash_table_lookup(
        -: 2254:                compiler->objects_table, (yyvsp[0].c_string), ns);
        -: 2255:          }
        -: 2256:
        -: 2257:          if (object != NULL)
        -: 2258:          {
        -: 2259:            char* id;
        -: 2260:
        -: 2261:            result = yr_arena_write_string(
        -: 2262:                compiler->sz_arena, (yyvsp[0].c_string), &id);
        -: 2263:
        -: 2264:            if (result == ERROR_SUCCESS)
        -: 2265:              result = yr_parser_emit_with_arg_reloc(
        -: 2266:                  yyscanner,
        -: 2267:                  OP_OBJ_LOAD,
        -: 2268:                  id,
        -: 2269:                  NULL,
        -: 2270:                  NULL);
        -: 2271:
        -: 2272:            (yyval.expression).type = EXPRESSION_TYPE_OBJECT;
        -: 2273:            (yyval.expression).value.object = object;
        -: 2274:            (yyval.expression).identifier = object->identifier;
        -: 2275:          }
        -: 2276:          else
        -: 2277:          {
        -: 2278:            YR_RULE* rule = (YR_RULE*) yr_hash_table_lookup(
        -: 2279:                compiler->rules_table,
        -: 2280:                (yyvsp[0].c_string),
        -: 2281:                compiler->current_namespace->name);
        -: 2282:
        -: 2283:            if (rule != NULL)
        -: 2284:            {
        -: 2285:              result = yr_parser_emit_with_arg_reloc(
        -: 2286:                  yyscanner,
        -: 2287:                  OP_PUSH_RULE,
        -: 2288:                  rule,
        -: 2289:                  NULL,
        -: 2290:                  NULL);
        -: 2291:
        -: 2292:              (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 2293:              (yyval.expression).value.integer = UNDEFINED;
        -: 2294:              (yyval.expression).identifier = rule->identifier;
        -: 2295:            }
        -: 2296:            else
        -: 2297:            {
        -: 2298:              yr_compiler_set_error_extra_info(compiler, (yyvsp[0].c_string));
        -: 2299:              result = ERROR_UNDEFINED_IDENTIFIER;
        -: 2300:            }
        -: 2301:          }
        -: 2302:        }
        -: 2303:
        -: 2304:        yr_free((yyvsp[0].c_string));
        -: 2305:
        -: 2306:        fail_if_error(result);
        -: 2307:      }
        -: 2308:#line 2309 "grammar.c"
    #####: 2309:    break;
        -: 2310:
    #####: 2311:  case 48:
        -: 2312:#line 694 "grammar.y"
        -: 2313:      {
        -: 2314:        int result = ERROR_SUCCESS;
        -: 2315:        YR_OBJECT* field = NULL;
        -: 2316:
        -: 2317:        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_OBJECT &&
        -: 2318:            (yyvsp[-2].expression).value.object->type == OBJECT_TYPE_STRUCTURE)
        -: 2319:        {
        -: 2320:          field = yr_object_lookup_field((yyvsp[-2].expression).value.object, (yyvsp[0].c_string));
        -: 2321:
        -: 2322:          if (field != NULL)
        -: 2323:          {
        -: 2324:            char* ident;
        -: 2325:
        -: 2326:            result = yr_arena_write_string(
        -: 2327:                compiler->sz_arena, (yyvsp[0].c_string), &ident);
        -: 2328:
        -: 2329:            if (result == ERROR_SUCCESS)
        -: 2330:              result = yr_parser_emit_with_arg_reloc(
        -: 2331:                  yyscanner,
        -: 2332:                  OP_OBJ_FIELD,
        -: 2333:                  ident,
        -: 2334:                  NULL,
        -: 2335:                  NULL);
        -: 2336:
        -: 2337:            (yyval.expression).type = EXPRESSION_TYPE_OBJECT;
        -: 2338:            (yyval.expression).value.object = field;
        -: 2339:            (yyval.expression).identifier = field->identifier;
        -: 2340:          }
        -: 2341:          else
        -: 2342:          {
        -: 2343:            yr_compiler_set_error_extra_info(compiler, (yyvsp[0].c_string));
        -: 2344:            result = ERROR_INVALID_FIELD_NAME;
        -: 2345:          }
        -: 2346:        }
        -: 2347:        else
        -: 2348:        {
        -: 2349:          yr_compiler_set_error_extra_info(
        -: 2350:              compiler, (yyvsp[-2].expression).identifier);
        -: 2351:
        -: 2352:          result = ERROR_NOT_A_STRUCTURE;
        -: 2353:        }
        -: 2354:
        -: 2355:        yr_free((yyvsp[0].c_string));
        -: 2356:
        -: 2357:        fail_if_error(result);
        -: 2358:      }
        -: 2359:#line 2360 "grammar.c"
    #####: 2360:    break;
        -: 2361:
    #####: 2362:  case 49:
        -: 2363:#line 741 "grammar.y"
        -: 2364:      {
        -: 2365:        int result = ERROR_SUCCESS;
        -: 2366:        YR_OBJECT_ARRAY* array;
        -: 2367:        YR_OBJECT_DICTIONARY* dict;
        -: 2368:
        -: 2369:        if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&
        -: 2370:            (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_ARRAY)
        -: 2371:        {
        -: 2372:          if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_INTEGER)
        -: 2373:          {
        -: 2374:            yr_compiler_set_error_extra_info(
        -: 2375:                compiler, "array indexes must be of integer type");
        -: 2376:            result = ERROR_WRONG_TYPE;
        -: 2377:          }
        -: 2378:
        -: 2379:          fail_if_error(result);
        -: 2380:
        -: 2381:          result = yr_parser_emit(
        -: 2382:              yyscanner, OP_INDEX_ARRAY, NULL);
        -: 2383:
        -: 2384:          array = object_as_array((yyvsp[-3].expression).value.object);
        -: 2385:
        -: 2386:          (yyval.expression).type = EXPRESSION_TYPE_OBJECT;
        -: 2387:          (yyval.expression).value.object = array->prototype_item;
        -: 2388:          (yyval.expression).identifier = array->identifier;
        -: 2389:        }
        -: 2390:        else if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&
        -: 2391:                 (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_DICTIONARY)
        -: 2392:        {
        -: 2393:          if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_STRING)
        -: 2394:          {
        -: 2395:            yr_compiler_set_error_extra_info(
        -: 2396:                compiler, "dictionary keys must be of string type");
        -: 2397:            result = ERROR_WRONG_TYPE;
        -: 2398:          }
        -: 2399:
        -: 2400:          fail_if_error(result);
        -: 2401:
        -: 2402:          result = yr_parser_emit(
        -: 2403:              yyscanner, OP_LOOKUP_DICT, NULL);
        -: 2404:
        -: 2405:          dict = object_as_dictionary((yyvsp[-3].expression).value.object);
        -: 2406:
        -: 2407:          (yyval.expression).type = EXPRESSION_TYPE_OBJECT;
        -: 2408:          (yyval.expression).value.object = dict->prototype_item;
        -: 2409:          (yyval.expression).identifier = dict->identifier;
        -: 2410:        }
        -: 2411:        else
        -: 2412:        {
        -: 2413:          yr_compiler_set_error_extra_info(
        -: 2414:              compiler, (yyvsp[-3].expression).identifier);
        -: 2415:
        -: 2416:          result = ERROR_NOT_INDEXABLE;
        -: 2417:        }
        -: 2418:
        -: 2419:        fail_if_error(result);
        -: 2420:      }
        -: 2421:#line 2422 "grammar.c"
    #####: 2422:    break;
        -: 2423:
    #####: 2424:  case 50:
        -: 2425:#line 800 "grammar.y"
        -: 2426:      {
        -: 2427:        int result = ERROR_SUCCESS;
        -: 2428:        YR_OBJECT_FUNCTION* function;
        -: 2429:        char* args_fmt;
        -: 2430:
        -: 2431:        if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&
        -: 2432:            (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_FUNCTION)
        -: 2433:        {
        -: 2434:          result = yr_parser_check_types(
        -: 2435:              compiler, object_as_function((yyvsp[-3].expression).value.object), (yyvsp[-1].c_string));
        -: 2436:
        -: 2437:          if (result == ERROR_SUCCESS)
        -: 2438:            result = yr_arena_write_string(
        -: 2439:                compiler->sz_arena, (yyvsp[-1].c_string), &args_fmt);
        -: 2440:
        -: 2441:          if (result == ERROR_SUCCESS)
        -: 2442:            result = yr_parser_emit_with_arg_reloc(
        -: 2443:                yyscanner,
        -: 2444:                OP_CALL,
        -: 2445:                args_fmt,
        -: 2446:                NULL,
        -: 2447:                NULL);
        -: 2448:
        -: 2449:          function = object_as_function((yyvsp[-3].expression).value.object);
        -: 2450:
        -: 2451:          (yyval.expression).type = EXPRESSION_TYPE_OBJECT;
        -: 2452:          (yyval.expression).value.object = function->return_obj;
        -: 2453:          (yyval.expression).identifier = function->identifier;
        -: 2454:        }
        -: 2455:        else
        -: 2456:        {
        -: 2457:          yr_compiler_set_error_extra_info(
        -: 2458:              compiler, (yyvsp[-3].expression).identifier);
        -: 2459:
        -: 2460:          result = ERROR_NOT_A_FUNCTION;
        -: 2461:        }
        -: 2462:
        -: 2463:        yr_free((yyvsp[-1].c_string));
        -: 2464:
        -: 2465:        fail_if_error(result);
        -: 2466:      }
        -: 2467:#line 2468 "grammar.c"
    #####: 2468:    break;
        -: 2469:
    #####: 2470:  case 51:
        -: 2471:#line 845 "grammar.y"
        -: 2472:                      { (yyval.c_string) = yr_strdup(""); }
        -: 2473:#line 2474 "grammar.c"
    #####: 2474:    break;
        -: 2475:
    #####: 2476:  case 52:
        -: 2477:#line 846 "grammar.y"
        -: 2478:                      { (yyval.c_string) = (yyvsp[0].c_string); }
        -: 2479:#line 2480 "grammar.c"
    #####: 2480:    break;
        -: 2481:
    #####: 2482:  case 53:
        -: 2483:#line 851 "grammar.y"
        -: 2484:      {
        -: 2485:        (yyval.c_string) = (char*) yr_malloc(YR_MAX_FUNCTION_ARGS + 1);
        -: 2486:
        -: 2487:        if ((yyval.c_string) == NULL)
        -: 2488:          fail_if_error(ERROR_INSUFFICIENT_MEMORY);
        -: 2489:
        -: 2490:        switch((yyvsp[0].expression).type)
        -: 2491:        {
        -: 2492:          case EXPRESSION_TYPE_INTEGER:
        -: 2493:            strlcpy((yyval.c_string), "i", YR_MAX_FUNCTION_ARGS);
        -: 2494:            break;
        -: 2495:          case EXPRESSION_TYPE_FLOAT:
        -: 2496:            strlcpy((yyval.c_string), "f", YR_MAX_FUNCTION_ARGS);
        -: 2497:            break;
        -: 2498:          case EXPRESSION_TYPE_BOOLEAN:
        -: 2499:            strlcpy((yyval.c_string), "b", YR_MAX_FUNCTION_ARGS);
        -: 2500:            break;
        -: 2501:          case EXPRESSION_TYPE_STRING:
        -: 2502:            strlcpy((yyval.c_string), "s", YR_MAX_FUNCTION_ARGS);
        -: 2503:            break;
        -: 2504:          case EXPRESSION_TYPE_REGEXP:
        -: 2505:            strlcpy((yyval.c_string), "r", YR_MAX_FUNCTION_ARGS);
        -: 2506:            break;
        -: 2507:          default:
        -: 2508:            assert(false);
        -: 2509:        }
        -: 2510:      }
        -: 2511:#line 2512 "grammar.c"
    #####: 2512:    break;
        -: 2513:
    #####: 2514:  case 54:
        -: 2515:#line 879 "grammar.y"
        -: 2516:      {
        -: 2517:        int result = ERROR_SUCCESS;
        -: 2518:
        -: 2519:        if (strlen((yyvsp[-2].c_string)) == YR_MAX_FUNCTION_ARGS)
        -: 2520:        {
        -: 2521:          result = ERROR_TOO_MANY_ARGUMENTS;
        -: 2522:        }
        -: 2523:        else
        -: 2524:        {
        -: 2525:          switch((yyvsp[0].expression).type)
        -: 2526:          {
        -: 2527:            case EXPRESSION_TYPE_INTEGER:
        -: 2528:              strlcat((yyvsp[-2].c_string), "i", YR_MAX_FUNCTION_ARGS);
        -: 2529:              break;
        -: 2530:            case EXPRESSION_TYPE_FLOAT:
        -: 2531:              strlcat((yyvsp[-2].c_string), "f", YR_MAX_FUNCTION_ARGS);
        -: 2532:              break;
        -: 2533:            case EXPRESSION_TYPE_BOOLEAN:
        -: 2534:              strlcat((yyvsp[-2].c_string), "b", YR_MAX_FUNCTION_ARGS);
        -: 2535:              break;
        -: 2536:            case EXPRESSION_TYPE_STRING:
        -: 2537:              strlcat((yyvsp[-2].c_string), "s", YR_MAX_FUNCTION_ARGS);
        -: 2538:              break;
        -: 2539:            case EXPRESSION_TYPE_REGEXP:
        -: 2540:              strlcat((yyvsp[-2].c_string), "r", YR_MAX_FUNCTION_ARGS);
        -: 2541:              break;
        -: 2542:            default:
        -: 2543:              assert(false);
        -: 2544:          }
        -: 2545:        }
        -: 2546:
        -: 2547:        fail_if_error(result);
        -: 2548:
        -: 2549:        (yyval.c_string) = (yyvsp[-2].c_string);
        -: 2550:      }
        -: 2551:#line 2552 "grammar.c"
    #####: 2552:    break;
        -: 2553:
    #####: 2554:  case 55:
        -: 2555:#line 919 "grammar.y"
        -: 2556:      {
        -: 2557:        SIZED_STRING* sized_string = (yyvsp[0].sized_string);
        -: 2558:        RE* re;
        -: 2559:        RE_ERROR error;
        -: 2560:
        -: 2561:        int result = ERROR_SUCCESS;
        -: 2562:        int re_flags = 0;
        -: 2563:
        -: 2564:        if (sized_string->flags & SIZED_STRING_FLAGS_NO_CASE)
        -: 2565:          re_flags |= RE_FLAGS_NO_CASE;
        -: 2566:
        -: 2567:        if (sized_string->flags & SIZED_STRING_FLAGS_DOT_ALL)
        -: 2568:          re_flags |= RE_FLAGS_DOT_ALL;
        -: 2569:
        -: 2570:        result = yr_re_compile(
        -: 2571:            sized_string->c_string,
        -: 2572:            re_flags,
        -: 2573:            compiler->re_code_arena,
        -: 2574:            &re,
        -: 2575:            &error);
        -: 2576:
        -: 2577:        yr_free((yyvsp[0].sized_string));
        -: 2578:
        -: 2579:        if (result == ERROR_INVALID_REGULAR_EXPRESSION)
        -: 2580:          yr_compiler_set_error_extra_info(compiler, error.message);
        -: 2581:
        -: 2582:        if (result == ERROR_SUCCESS)
        -: 2583:          result = yr_parser_emit_with_arg_reloc(
        -: 2584:              yyscanner,
        -: 2585:              OP_PUSH,
        -: 2586:              re,
        -: 2587:              NULL,
        -: 2588:              NULL);
        -: 2589:
        -: 2590:        fail_if_error(result);
        -: 2591:
        -: 2592:        (yyval.expression).type = EXPRESSION_TYPE_REGEXP;
        -: 2593:      }
        -: 2594:#line 2595 "grammar.c"
    #####: 2595:    break;
        -: 2596:
    #####: 2597:  case 56:
        -: 2598:#line 962 "grammar.y"
        -: 2599:      {
        -: 2600:        if ((yyvsp[0].expression).type == EXPRESSION_TYPE_STRING)
        -: 2601:        {
        -: 2602:          if ((yyvsp[0].expression).value.sized_string != NULL)
        -: 2603:          {
        -: 2604:            yywarning(yyscanner,
        -: 2605:              "Using literal string \"%s\" in a boolean operation.",
        -: 2606:              (yyvsp[0].expression).value.sized_string->c_string);
        -: 2607:          }
        -: 2608:
        -: 2609:          fail_if_error(yr_parser_emit(
        -: 2610:              yyscanner, OP_STR_TO_BOOL, NULL));
        -: 2611:        }
        -: 2612:
        -: 2613:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 2614:      }
        -: 2615:#line 2616 "grammar.c"
    #####: 2616:    break;
        -: 2617:
    #####: 2618:  case 57:
        -: 2619:#line 982 "grammar.y"
        -: 2620:      {
        -: 2621:        fail_if_error(yr_parser_emit_with_arg(
        -: 2622:            yyscanner, OP_PUSH, 1, NULL, NULL));
        -: 2623:
        -: 2624:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 2625:      }
        -: 2626:#line 2627 "grammar.c"
    #####: 2627:    break;
        -: 2628:
    #####: 2629:  case 58:
        -: 2630:#line 989 "grammar.y"
        -: 2631:      {
        -: 2632:        fail_if_error(yr_parser_emit_with_arg(
        -: 2633:            yyscanner, OP_PUSH, 0, NULL, NULL));
        -: 2634:
        -: 2635:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 2636:      }
        -: 2637:#line 2638 "grammar.c"
    #####: 2638:    break;
        -: 2639:
    #####: 2640:  case 59:
        -: 2641:#line 996 "grammar.y"
        -: 2642:      {
        -: 2643:        check_type((yyvsp[-2].expression), EXPRESSION_TYPE_STRING, "matches");
        -: 2644:        check_type((yyvsp[0].expression), EXPRESSION_TYPE_REGEXP, "matches");
        -: 2645:
        -: 2646:        fail_if_error(yr_parser_emit(
        -: 2647:            yyscanner,
        -: 2648:            OP_MATCHES,
        -: 2649:            NULL));
        -: 2650:
        -: 2651:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 2652:      }
        -: 2653:#line 2654 "grammar.c"
    #####: 2654:    break;
        -: 2655:
    #####: 2656:  case 60:
        -: 2657:#line 1008 "grammar.y"
        -: 2658:      {
        -: 2659:        check_type((yyvsp[-2].expression), EXPRESSION_TYPE_STRING, "contains");
        -: 2660:        check_type((yyvsp[0].expression), EXPRESSION_TYPE_STRING, "contains");
        -: 2661:
        -: 2662:        fail_if_error(yr_parser_emit(
        -: 2663:            yyscanner, OP_CONTAINS, NULL));
        -: 2664:
        -: 2665:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 2666:      }
        -: 2667:#line 2668 "grammar.c"
    #####: 2668:    break;
        -: 2669:
    #####: 2670:  case 61:
        -: 2671:#line 1018 "grammar.y"
        -: 2672:      {
        -: 2673:        int result = yr_parser_reduce_string_identifier(
        -: 2674:            yyscanner,
        -: 2675:            (yyvsp[0].c_string),
        -: 2676:            OP_FOUND,
        -: 2677:            UNDEFINED);
        -: 2678:
        -: 2679:        yr_free((yyvsp[0].c_string));
        -: 2680:
        -: 2681:        fail_if_error(result);
        -: 2682:
        -: 2683:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 2684:      }
        -: 2685:#line 2686 "grammar.c"
    #####: 2686:    break;
        -: 2687:
    #####: 2688:  case 62:
        -: 2689:#line 1032 "grammar.y"
        -: 2690:      {
        -: 2691:        int result;
        -: 2692:
        -: 2693:        check_type_with_cleanup((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "at", yr_free((yyvsp[-2].c_string)));
        -: 2694:
        -: 2695:        result = yr_parser_reduce_string_identifier(
        -: 2696:            yyscanner, (yyvsp[-2].c_string), OP_FOUND_AT, (yyvsp[0].expression).value.integer);
        -: 2697:
        -: 2698:        yr_free((yyvsp[-2].c_string));
        -: 2699:
        -: 2700:        fail_if_error(result);
        -: 2701:
        -: 2702:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 2703:      }
        -: 2704:#line 2705 "grammar.c"
    #####: 2705:    break;
        -: 2706:
    #####: 2707:  case 63:
        -: 2708:#line 1047 "grammar.y"
        -: 2709:      {
        -: 2710:        int result = yr_parser_reduce_string_identifier(
        -: 2711:            yyscanner, (yyvsp[-2].c_string), OP_FOUND_IN, UNDEFINED);
        -: 2712:
        -: 2713:        yr_free((yyvsp[-2].c_string));
        -: 2714:
        -: 2715:        fail_if_error(result);
        -: 2716:
        -: 2717:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 2718:      }
        -: 2719:#line 2720 "grammar.c"
    #####: 2720:    break;
        -: 2721:
    #####: 2722:  case 64:
        -: 2723:#line 1058 "grammar.y"
        -: 2724:      {
        -: 2725:        if (compiler->loop_depth > 0)
        -: 2726:        {
        -: 2727:          compiler->loop_depth--;
        -: 2728:          compiler->loop_identifier[compiler->loop_depth] = NULL;
        -: 2729:        }
        -: 2730:
        -: 2731:        YYERROR;
        -: 2732:      }
        -: 2733:#line 2734 "grammar.c"
        -: 2734:    break;
        -: 2735:
    #####: 2736:  case 65:
        -: 2737:#line 1068 "grammar.y"
        -: 2738:      {
        -: 2739:        // for all i in (N..M) : (<expr>)
        -: 2740:        //
        -: 2741:        // 1       PUSH UNDEF  ; "all"
        -: 2742:        // 2       PUSH UNDEF  ; "end of list"
        -: 2743:        // 3       PUSH N      ; integer range lower bound
        -: 2744:        // 4       PUSH M      ; integer range upper bound
        -: 2745:        // 7       CLEAR_M 1   ; clear <expr> result accumulator
        -: 2746:        // 8       CLEAR_M 2   ; clear loop iteration counter
        -: 2747:        // 5       POP_M 3     ; store range upper bound
        -: 2748:        // 6       POP_M 0     ; store range lower bound
        -: 2749:        // 9    .->INCR_M 2    ; increment loop iteration counter
        -: 2750:        //      |  <expr>      ; here goes the code for <expr>, its result will
        -: 2751:        //      |                be at the top of the stack
        -: 2752:        // 10   |  SET_M 4     ; store boolean expression result in memory 4
        -: 2753:        // 11   |  ADD_M 1     ; add boolean_expression result to accumulator
        -: 2754:        // 12   |  INCR_M 0    ; increment range lower bound (more like current bound)
        -: 2755:        // 13   |  PUSH_M 4    ; boolean expression result
        -: 2756:        // 14 .-+--JFALSE_P    ; jump out of loop if last result is false
        -: 2757:        // 15 | |  PUSH_M 0    ; lower (current) bound
        -: 2758:        // 16 | |  PUSH_M 3    ; upper bound
        -: 2759:        // 17 | `--JLE_P       ; jump to start of loop if we haven't iterated enough
        -: 2760:        // 18 `--->POP         ; pop end of list
        -: 2761:        // 19      SWAPUNDEF 2 ; swap the UNDEF ("all") with loop iteration
        -: 2762:        //                       counter (memory 2)
        -: 2763:        // 20      PUSH_M 1    ; push the boolean_expression accumulator
        -: 2764:        // 21      INT_LE      ; compare boolean_expression accumulator to loop
        -: 2765:        //                       iteration counter
        -: 2766:
        -: 2767:        // for X i in (N..M) : (<expr>)
        -: 2768:        //
        -: 2769:        // 1       PUSH X      ;
        -: 2770:        // 2       SET_M 4     ; store primary_expression in m4
        -: 2771:        // 3       PUSH UNDEF  ; "end of list"
        -: 2772:        // 4       PUSH 0      ; integer range lower bound
        -: 2773:        // 5       PUSH 5      ; integer range upper bound
        -: 2774:        // 8       CLEAR_M 1   ; clear <expr> result accumulator
        -: 2775:        // 9       CLEAR_M 2   ; clear loop iteration counter
        -: 2776:        // 6       POP_M 3     ; store upper bound
        -: 2777:        // 7       POP_M 0     ; store lower bound
        -: 2778:        // 10   .->INCR_M 2    ; increment loop iteration counter
        -: 2779:        // 11   |  <expr>      ; here goes the code for <expr>, its result will
        -: 2780:        //      |              ; be at the  top of the stack
        -: 2781:        // 12   |  ADD_M 1     ; add boolean_expression result to accumulator
        -: 2782:        // 13   |  INCR_M 0    ; increment lower bound (more like current bound)
        -: 2783:        // 14   |  PUSH_M 4    ; primary expression minimum
        -: 2784:        // 15   |  PUSH_M 1    ; boolean_expression accumulator
        -: 2785:        // 16 .-+--JLE_P       ; jump out of loop if (minimum <= accumulator)
        -: 2786:        // 17 | |  PUSH_M 0    ; lower (current) bound
        -: 2787:        // 18 | |  PUSH_M 3    ; upper bound
        -: 2788:        // 19 | `--JLE_P       ; jump to start of loop if we haven't iterated enough
        -: 2789:        // 20 `--->POP         ; pop end of list
        -: 2790:        // 21      SWAPUNDEF 2 ; at this point only our "any" is on the stack,
        -: 2791:        //                       this is effectively a NOP
        -: 2792:        // 22      PUSH_M 1    ; push the boolean_expression accumulator
        -: 2793:        // 23      INT_LE      ; compare boolean_expression accumulator to X
        -: 2794:
        -: 2795:        // for X i in (A, B, C) : (<expr>)
        -: 2796:        //
        -: 2797:        // 1       PUSH X      ;
        -: 2798:        // 2       SET_M 4     ; store primary_expression in m4
        -: 2799:        // 3       PUSH UNDEF  ; "end of list"
        -: 2800:        // 4       PUSH A
        -: 2801:        // 5       PUSH B
        -: 2802:        // 6       PUSH C
        -: 2803:        // 7       CLEAR_M 1   ; clear <expr> result accumulator
        -: 2804:        // 8       CLEAR_M 2   ; clear loop iteration counter
        -: 2805:        // 9    .->INCR_M 2    ; increment loop iteration counter
        -: 2806:        // 10   |  POP_M 0     ; store current item in M[0]
        -: 2807:        // 11   |  <expr>      ; here goes the code for <expr>, its result will
        -: 2808:        //      |              ; be at the  top of the stack
        -: 2809:        // 12   |  ADD_M 1     ; add boolean_expression result to accumulator
        -: 2810:        // 13   `--JNUNDEF     ; if "end of list" was not reached, repeat.
        -: 2811:        // 14      POP         ; pop end of list
        -: 2812:        // 15      SWAPUNDEF 2 ; swap the UNDEF with loop iteration counter M[2]
        -: 2813:        // 16      PUSH_M 1    ; push boolean_expression result accumulator
        -: 2814:        // 17      INT_LE      ; compare boolean_expression accumulator to X
        -: 2815:
        -: 2816:
        -: 2817:        int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;
        -: 2818:        int result = ERROR_SUCCESS;
        -: 2819:        int var_index;
        -: 2820:
        -: 2821:        if (compiler->loop_depth == YR_MAX_LOOP_NESTING)
        -: 2822:          result = ERROR_LOOP_NESTING_LIMIT_EXCEEDED;
        -: 2823:
        -: 2824:        fail_if_error(result);
        -: 2825:
        -: 2826:        var_index = yr_parser_lookup_loop_variable(
        -: 2827:            yyscanner, (yyvsp[-1].c_string));
        -: 2828:
        -: 2829:        if (var_index >= 0)
        -: 2830:        {
        -: 2831:          yr_compiler_set_error_extra_info(
        -: 2832:              compiler, (yyvsp[-1].c_string));
        -: 2833:
        -: 2834:          result = ERROR_DUPLICATED_LOOP_IDENTIFIER;
        -: 2835:        }
        -: 2836:
        -: 2837:        fail_if_error(result);
        -: 2838:
        -: 2839:        // "any" loops require us to store the primary expression for
        -: 2840:        // later evaluation, but "all" loops do not. The OP_SWAPUNDEF after the
        -: 2841:        // loop ensures we evaluate the proper values.
        -: 2842:        if ((yyvsp[-2].integer) == FOR_EXPRESSION_ANY)
        -: 2843:        {
        -: 2844:          yr_parser_emit_with_arg(
        -: 2845:            yyscanner, OP_SET_M, mem_offset + 4, NULL, NULL);
        -: 2846:        }
        -: 2847:
        -: 2848:        // Push end-of-list marker
        -: 2849:        result = yr_parser_emit_with_arg(
        -: 2850:            yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);
        -: 2851:
        -: 2852:        fail_if_error(result);
        -: 2853:      }
        -: 2854:#line 2855 "grammar.c"
    #####: 2855:    break;
        -: 2856:
    #####: 2857:  case 66:
        -: 2858:#line 1185 "grammar.y"
        -: 2859:      {
        -: 2860:        int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;
        -: 2861:        uint8_t* addr;
        -: 2862:
        -: 2863:        // Clear counter for number of expressions evaluating
        -: 2864:        // to true.
        -: 2865:        yr_parser_emit_with_arg(
        -: 2866:            yyscanner, OP_CLEAR_M, mem_offset + 1, NULL, NULL);
        -: 2867:
        -: 2868:        // Clear iterations counter
        -: 2869:        yr_parser_emit_with_arg(
        -: 2870:            yyscanner, OP_CLEAR_M, mem_offset + 2, NULL, NULL);
        -: 2871:
        -: 2872:        if ((yyvsp[-1].integer) == INTEGER_SET_ENUMERATION)
        -: 2873:        {
        -: 2874:          // Increment iterations counter
        -: 2875:          yr_parser_emit_with_arg(
        -: 2876:              yyscanner, OP_INCR_M, mem_offset + 2, &addr, NULL);
        -: 2877:
        -: 2878:          // Pop the first integer
        -: 2879:          yr_parser_emit_with_arg(
        -: 2880:              yyscanner, OP_POP_M, mem_offset, NULL, NULL);
        -: 2881:        }
        -: 2882:        else // INTEGER_SET_RANGE
        -: 2883:        {
        -: 2884:          // Pop higher bound of set range
        -: 2885:          yr_parser_emit_with_arg(
        -: 2886:              yyscanner, OP_POP_M, mem_offset + 3, NULL, NULL);
        -: 2887:
        -: 2888:          // Pop lower bound of set range
        -: 2889:          yr_parser_emit_with_arg(
        -: 2890:              yyscanner, OP_POP_M, mem_offset, NULL, NULL);
        -: 2891:
        -: 2892:          // Increment iterations counter
        -: 2893:          yr_parser_emit_with_arg(
        -: 2894:              yyscanner, OP_INCR_M, mem_offset + 2, &addr, NULL);
        -: 2895:        }
        -: 2896:
        -: 2897:        compiler->loop_address[compiler->loop_depth] = addr;
        -: 2898:        compiler->loop_identifier[compiler->loop_depth] = (yyvsp[-4].c_string);
        -: 2899:        compiler->loop_depth++;
        -: 2900:      }
        -: 2901:#line 2902 "grammar.c"
    #####: 2902:    break;
        -: 2903:
    #####: 2904:  case 67:
        -: 2905:#line 1228 "grammar.y"
        -: 2906:      {
        -: 2907:        int mem_offset;
        -: 2908:        YR_FIXUP* fixup;
        -: 2909:        void* jmp_destination_addr;
        -: 2910:        uint8_t* pop_addr;
        -: 2911:
        -: 2912:        compiler->loop_depth--;
        -: 2913:        mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;
        -: 2914:
        -: 2915:        // The value at the top of the stack is the result of
        -: 2916:        // evaluating the boolean expression, so it could be
        -: 2917:        // 0, 1 or UNDEFINED. Add this value to a counter
        -: 2918:        // keeping the number of expressions evaluating to true.
        -: 2919:        // If the value is UNDEFINED instruction OP_ADD_M
        -: 2920:        // does nothing.
        -: 2921:
        -: 2922:        if ((yyvsp[-9].integer) == FOR_EXPRESSION_ALL)
        -: 2923:        {
        -: 2924:          // Store the last result for checking after we have incremented the
        -: 2925:          // counters. We want to keep the value on the stack though.
        -: 2926:          yr_parser_emit_with_arg(
        -: 2927:              yyscanner, OP_SET_M, mem_offset + 4, NULL, NULL);
        -: 2928:        }
        -: 2929:
        -: 2930:        yr_parser_emit_with_arg(
        -: 2931:            yyscanner, OP_ADD_M, mem_offset + 1, NULL, NULL);
        -: 2932:
        -: 2933:        if ((yyvsp[-5].integer) == INTEGER_SET_ENUMERATION)
        -: 2934:        {
        -: 2935:          yr_parser_emit_with_arg_reloc(
        -: 2936:              yyscanner,
        -: 2937:              OP_JNUNDEF,
        -: 2938:              compiler->loop_address[compiler->loop_depth],
        -: 2939:              NULL,
        -: 2940:              NULL);
        -: 2941:
        -: 2942:          // Pop end-of-list marker.
        -: 2943:          yr_parser_emit(yyscanner, OP_POP, NULL);
        -: 2944:        }
        -: 2945:        else // INTEGER_SET_RANGE
        -: 2946:        {
        -: 2947:          // Increment lower bound of integer set
        -: 2948:          yr_parser_emit_with_arg(
        -: 2949:              yyscanner, OP_INCR_M, mem_offset, NULL, NULL);
        -: 2950:
        -: 2951:          // Push loop quantifier
        -: 2952:          yr_parser_emit_with_arg(
        -: 2953:              yyscanner, OP_PUSH_M, mem_offset + 4, NULL, NULL);
        -: 2954:
        -: 2955:          if ((yyvsp[-9].integer) == FOR_EXPRESSION_ALL)
        -: 2956:          {
        -: 2957:            fail_if_error(yr_parser_emit_with_arg_reloc(
        -: 2958:                yyscanner,
        -: 2959:                OP_JFALSE_P,
        -: 2960:                0, // Don't know the jump destination yet
        -: 2961:                NULL,
        -: 2962:                &jmp_destination_addr));
        -: 2963:
        -: 2964:            // create a fixup entry for the jump and push it in the stack
        -: 2965:            fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));
        -: 2966:
        -: 2967:            if (fixup == NULL)
        -: 2968:              fail_if_error(ERROR_INSUFFICIENT_MEMORY);
        -: 2969:
        -: 2970:            fixup->address = jmp_destination_addr;
        -: 2971:            fixup->next = compiler->fixup_stack_head;
        -: 2972:            compiler->fixup_stack_head = fixup;
        -: 2973:          }
        -: 2974:          else if ((yyvsp[-9].integer) == FOR_EXPRESSION_ANY)
        -: 2975:          {
        -: 2976:            // Push the number of expressions evaluating to true
        -: 2977:            yr_parser_emit_with_arg(
        -: 2978:                yyscanner, OP_PUSH_M, mem_offset + 1, NULL, NULL);
        -: 2979:
        -: 2980:            // Compare the loop quantifier to number of expressions that evaluate
        -: 2981:            // to true, in order to eliminate extraneous loop iterations.
        -: 2982:            fail_if_error(yr_parser_emit_with_arg_reloc(
        -: 2983:                yyscanner,
        -: 2984:                OP_JLE_P,
        -: 2985:                0, // Don't know the jump destination yet
        -: 2986:                NULL,
        -: 2987:                &jmp_destination_addr));
        -: 2988:
        -: 2989:            fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));
        -: 2990:
        -: 2991:            if (fixup == NULL)
        -: 2992:              fail_if_error(ERROR_INSUFFICIENT_MEMORY);
        -: 2993:
        -: 2994:            fixup->address = jmp_destination_addr;
        -: 2995:            fixup->next = compiler->fixup_stack_head;
        -: 2996:            compiler->fixup_stack_head = fixup;
        -: 2997:          }
        -: 2998:
        -: 2999:          // Push lower bound of integer set
        -: 3000:          yr_parser_emit_with_arg(
        -: 3001:              yyscanner, OP_PUSH_M, mem_offset, NULL, NULL);
        -: 3002:
        -: 3003:          // Push higher bound of integer set
        -: 3004:          yr_parser_emit_with_arg(
        -: 3005:              yyscanner, OP_PUSH_M, mem_offset + 3, NULL, NULL);
        -: 3006:
        -: 3007:          // Compare higher bound with lower bound, do loop again
        -: 3008:          // if lower bound is still lower or equal than higher bound
        -: 3009:          yr_parser_emit_with_arg_reloc(
        -: 3010:              yyscanner,
        -: 3011:              OP_JLE_P,
        -: 3012:              compiler->loop_address[compiler->loop_depth],
        -: 3013:              NULL,
        -: 3014:              NULL);
        -: 3015:
        -: 3016:          // Pop end-of-list marker.
        -: 3017:          yr_parser_emit(yyscanner, OP_POP, &pop_addr);
        -: 3018:
        -: 3019:          fixup = compiler->fixup_stack_head;
        -: 3020:          *(void**)(fixup->address) = (void*)(pop_addr);
        -: 3021:          compiler->fixup_stack_head = fixup->next;
        -: 3022:          yr_free(fixup);
        -: 3023:        }
        -: 3024:
        -: 3025:        // At this point the loop quantifier (any, all, 1, 2,..)
        -: 3026:        // is at the top of the stack. Check if the quantifier
        -: 3027:        // is undefined (meaning "all") and replace it with the
        -: 3028:        // iterations counter in that case.
        -: 3029:        yr_parser_emit_with_arg(
        -: 3030:            yyscanner, OP_SWAPUNDEF, mem_offset + 2, NULL, NULL);
        -: 3031:
        -: 3032:        // Compare the loop quantifier with the number of
        -: 3033:        // expressions evaluating to true.
        -: 3034:        yr_parser_emit_with_arg(
        -: 3035:            yyscanner, OP_PUSH_M, mem_offset + 1, NULL, NULL);
        -: 3036:
        -: 3037:        yr_parser_emit(yyscanner, OP_INT_LE, NULL);
        -: 3038:
        -: 3039:        compiler->loop_identifier[compiler->loop_depth] = NULL;
        -: 3040:        yr_free((yyvsp[-8].c_string));
        -: 3041:
        -: 3042:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 3043:      }
        -: 3044:#line 3045 "grammar.c"
    #####: 3045:    break;
        -: 3046:
    #####: 3047:  case 68:
        -: 3048:#line 1367 "grammar.y"
        -: 3049:      {
        -: 3050:        int result = ERROR_SUCCESS;
        -: 3051:        int mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;
        -: 3052:        uint8_t* addr;
        -: 3053:
        -: 3054:        if (compiler->loop_depth == YR_MAX_LOOP_NESTING)
        -: 3055:          result = ERROR_LOOP_NESTING_LIMIT_EXCEEDED;
        -: 3056:
        -: 3057:        if (compiler->loop_for_of_mem_offset != -1)
        -: 3058:          result = ERROR_NESTED_FOR_OF_LOOP;
        -: 3059:
        -: 3060:        fail_if_error(result);
        -: 3061:
        -: 3062:        yr_parser_emit_with_arg(
        -: 3063:            yyscanner, OP_CLEAR_M, mem_offset + 1, NULL, NULL);
        -: 3064:
        -: 3065:        yr_parser_emit_with_arg(
        -: 3066:            yyscanner, OP_CLEAR_M, mem_offset + 2, NULL, NULL);
        -: 3067:
        -: 3068:        // Pop the first string.
        -: 3069:        yr_parser_emit_with_arg(
        -: 3070:            yyscanner, OP_POP_M, mem_offset, &addr, NULL);
        -: 3071:
        -: 3072:        compiler->loop_for_of_mem_offset = mem_offset;
        -: 3073:        compiler->loop_address[compiler->loop_depth] = addr;
        -: 3074:        compiler->loop_identifier[compiler->loop_depth] = NULL;
        -: 3075:        compiler->loop_depth++;
        -: 3076:      }
        -: 3077:#line 3078 "grammar.c"
    #####: 3078:    break;
        -: 3079:
    #####: 3080:  case 69:
        -: 3081:#line 1396 "grammar.y"
        -: 3082:      {
        -: 3083:        int mem_offset;
        -: 3084:
        -: 3085:        compiler->loop_depth--;
        -: 3086:        compiler->loop_for_of_mem_offset = -1;
        -: 3087:
        -: 3088:        mem_offset = LOOP_LOCAL_VARS * compiler->loop_depth;
        -: 3089:
        -: 3090:        // Increment counter by the value returned by the
        -: 3091:        // boolean expression (0 or 1). If the boolean expression
        -: 3092:        // returned UNDEFINED the OP_ADD_M won't do anything.
        -: 3093:
        -: 3094:        yr_parser_emit_with_arg(
        -: 3095:            yyscanner, OP_ADD_M, mem_offset + 1, NULL, NULL);
        -: 3096:
        -: 3097:        // Increment iterations counter.
        -: 3098:        yr_parser_emit_with_arg(
        -: 3099:            yyscanner, OP_INCR_M, mem_offset + 2, NULL, NULL);
        -: 3100:
        -: 3101:        // If next string is not undefined, go back to the
        -: 3102:        // beginning of the loop.
        -: 3103:        yr_parser_emit_with_arg_reloc(
        -: 3104:            yyscanner,
        -: 3105:            OP_JNUNDEF,
        -: 3106:            compiler->loop_address[compiler->loop_depth],
        -: 3107:            NULL,
        -: 3108:            NULL);
        -: 3109:
        -: 3110:        // Pop end-of-list marker.
        -: 3111:        yr_parser_emit(yyscanner, OP_POP, NULL);
        -: 3112:
        -: 3113:        // At this point the loop quantifier (any, all, 1, 2,..)
        -: 3114:        // is at top of the stack. Check if the quantifier is
        -: 3115:        // undefined (meaning "all") and replace it with the
        -: 3116:        // iterations counter in that case.
        -: 3117:        yr_parser_emit_with_arg(
        -: 3118:            yyscanner, OP_SWAPUNDEF, mem_offset + 2, NULL, NULL);
        -: 3119:
        -: 3120:        // Compare the loop quantifier with the number of
        -: 3121:        // expressions evaluating to true.
        -: 3122:        yr_parser_emit_with_arg(
        -: 3123:            yyscanner, OP_PUSH_M, mem_offset + 1, NULL, NULL);
        -: 3124:
        -: 3125:        yr_parser_emit(yyscanner, OP_INT_LE, NULL);
        -: 3126:
        -: 3127:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 3128:
        -: 3129:      }
        -: 3130:#line 3131 "grammar.c"
    #####: 3131:    break;
        -: 3132:
    #####: 3133:  case 70:
        -: 3134:#line 1445 "grammar.y"
        -: 3135:      {
        -: 3136:        yr_parser_emit(yyscanner, OP_OF, NULL);
        -: 3137:
        -: 3138:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 3139:      }
        -: 3140:#line 3141 "grammar.c"
    #####: 3141:    break;
        -: 3142:
    #####: 3143:  case 71:
        -: 3144:#line 1451 "grammar.y"
        -: 3145:      {
        -: 3146:        yr_parser_emit(yyscanner, OP_NOT, NULL);
        -: 3147:
        -: 3148:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 3149:      }
        -: 3150:#line 3151 "grammar.c"
    #####: 3151:    break;
        -: 3152:
    #####: 3153:  case 72:
        -: 3154:#line 1457 "grammar.y"
        -: 3155:      {
        -: 3156:        YR_FIXUP* fixup;
        -: 3157:        void* jmp_destination_addr;
        -: 3158:
        -: 3159:        fail_if_error(yr_parser_emit_with_arg_reloc(
        -: 3160:            yyscanner,
        -: 3161:            OP_JFALSE,
        -: 3162:            0,          // still don't know the jump destination
        -: 3163:            NULL,
        -: 3164:            &jmp_destination_addr));
        -: 3165:
        -: 3166:        // create a fixup entry for the jump and push it in the stack
        -: 3167:        fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));
        -: 3168:
        -: 3169:        if (fixup == NULL)
        -: 3170:          fail_if_error(ERROR_INSUFFICIENT_MEMORY);
        -: 3171:
        -: 3172:        fixup->address = jmp_destination_addr;
        -: 3173:        fixup->next = compiler->fixup_stack_head;
        -: 3174:        compiler->fixup_stack_head = fixup;
        -: 3175:      }
        -: 3176:#line 3177 "grammar.c"
    #####: 3177:    break;
        -: 3178:
    #####: 3179:  case 73:
        -: 3180:#line 1479 "grammar.y"
        -: 3181:      {
        -: 3182:        YR_FIXUP* fixup;
        -: 3183:        uint8_t* nop_addr;
        -: 3184:
        -: 3185:        fail_if_error(yr_parser_emit(yyscanner, OP_AND, NULL));
        -: 3186:
        -: 3187:        // Generate a do-nothing instruction (NOP) in order to get its address
        -: 3188:        // and use it as the destination for the OP_JFALSE. We can not simply
        -: 3189:        // use the address of the OP_AND instruction +1 because we can't be
        -: 3190:        // sure that the instruction following the OP_AND is going to be in
        -: 3191:        // the same arena page. As we don't have a reliable way of getting the
        -: 3192:        // address of the next instruction we generate the OP_NOP.
        -: 3193:
        -: 3194:        fail_if_error(yr_parser_emit(yyscanner, OP_NOP, &nop_addr));
        -: 3195:
        -: 3196:        fixup = compiler->fixup_stack_head;
        -: 3197:        *(void**)(fixup->address) = (void*) nop_addr;
        -: 3198:        compiler->fixup_stack_head = fixup->next;
        -: 3199:        yr_free(fixup);
        -: 3200:
        -: 3201:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 3202:      }
        -: 3203:#line 3204 "grammar.c"
    #####: 3204:    break;
        -: 3205:
    #####: 3206:  case 74:
        -: 3207:#line 1502 "grammar.y"
        -: 3208:      {
        -: 3209:        YR_FIXUP* fixup;
        -: 3210:        void* jmp_destination_addr;
        -: 3211:
        -: 3212:        fail_if_error(yr_parser_emit_with_arg_reloc(
        -: 3213:            yyscanner,
        -: 3214:            OP_JTRUE,
        -: 3215:            0,         // still don't know the jump destination
        -: 3216:            NULL,
        -: 3217:            &jmp_destination_addr));
        -: 3218:
        -: 3219:        fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));
        -: 3220:
        -: 3221:        if (fixup == NULL)
        -: 3222:          fail_if_error(ERROR_INSUFFICIENT_MEMORY);
        -: 3223:
        -: 3224:        fixup->address = jmp_destination_addr;
        -: 3225:        fixup->next = compiler->fixup_stack_head;
        -: 3226:        compiler->fixup_stack_head = fixup;
        -: 3227:      }
        -: 3228:#line 3229 "grammar.c"
    #####: 3229:    break;
        -: 3230:
    #####: 3231:  case 75:
        -: 3232:#line 1523 "grammar.y"
        -: 3233:      {
        -: 3234:        YR_FIXUP* fixup;
        -: 3235:        uint8_t* nop_addr;
        -: 3236:
        -: 3237:        fail_if_error(yr_parser_emit(yyscanner, OP_OR, NULL));
        -: 3238:
        -: 3239:        // Generate a do-nothing instruction (NOP) in order to get its address
        -: 3240:        // and use it as the destination for the OP_JFALSE. We can not simply
        -: 3241:        // use the address of the OP_OR instruction +1 because we can't be
        -: 3242:        // sure that the instruction following the OP_AND is going to be in
        -: 3243:        // the same arena page. As we don't have a reliable way of getting the
        -: 3244:        // address of the next instruction we generate the OP_NOP.
        -: 3245:
        -: 3246:        fail_if_error(yr_parser_emit(yyscanner, OP_NOP, &nop_addr));
        -: 3247:
        -: 3248:        fixup = compiler->fixup_stack_head;
        -: 3249:        *(void**)(fixup->address) = (void*)(nop_addr);
        -: 3250:        compiler->fixup_stack_head = fixup->next;
        -: 3251:        yr_free(fixup);
        -: 3252:
        -: 3253:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 3254:      }
        -: 3255:#line 3256 "grammar.c"
    #####: 3256:    break;
        -: 3257:
    #####: 3258:  case 76:
        -: 3259:#line 1546 "grammar.y"
        -: 3260:      {
        -: 3261:        fail_if_error(yr_parser_reduce_operation(
        -: 3262:            yyscanner, "<", (yyvsp[-2].expression), (yyvsp[0].expression)));
        -: 3263:
        -: 3264:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 3265:      }
        -: 3266:#line 3267 "grammar.c"
    #####: 3267:    break;
        -: 3268:
    #####: 3269:  case 77:
        -: 3270:#line 1553 "grammar.y"
        -: 3271:      {
        -: 3272:        fail_if_error(yr_parser_reduce_operation(
        -: 3273:            yyscanner, ">", (yyvsp[-2].expression), (yyvsp[0].expression)));
        -: 3274:
        -: 3275:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 3276:      }
        -: 3277:#line 3278 "grammar.c"
    #####: 3278:    break;
        -: 3279:
    #####: 3280:  case 78:
        -: 3281:#line 1560 "grammar.y"
        -: 3282:      {
        -: 3283:        fail_if_error(yr_parser_reduce_operation(
        -: 3284:            yyscanner, "<=", (yyvsp[-2].expression), (yyvsp[0].expression)));
        -: 3285:
        -: 3286:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 3287:      }
        -: 3288:#line 3289 "grammar.c"
    #####: 3289:    break;
        -: 3290:
    #####: 3291:  case 79:
        -: 3292:#line 1567 "grammar.y"
        -: 3293:      {
        -: 3294:        fail_if_error(yr_parser_reduce_operation(
        -: 3295:            yyscanner, ">=", (yyvsp[-2].expression), (yyvsp[0].expression)));
        -: 3296:
        -: 3297:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 3298:      }
        -: 3299:#line 3300 "grammar.c"
    #####: 3300:    break;
        -: 3301:
    #####: 3302:  case 80:
        -: 3303:#line 1574 "grammar.y"
        -: 3304:      {
        -: 3305:        fail_if_error(yr_parser_reduce_operation(
        -: 3306:            yyscanner, "==", (yyvsp[-2].expression), (yyvsp[0].expression)));
        -: 3307:
        -: 3308:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 3309:      }
        -: 3310:#line 3311 "grammar.c"
    #####: 3311:    break;
        -: 3312:
    #####: 3313:  case 81:
        -: 3314:#line 1581 "grammar.y"
        -: 3315:      {
        -: 3316:        fail_if_error(yr_parser_reduce_operation(
        -: 3317:            yyscanner, "!=", (yyvsp[-2].expression), (yyvsp[0].expression)));
        -: 3318:
        -: 3319:        (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 3320:      }
        -: 3321:#line 3322 "grammar.c"
    #####: 3322:    break;
        -: 3323:
    #####: 3324:  case 82:
        -: 3325:#line 1588 "grammar.y"
        -: 3326:      {
        -: 3327:        (yyval.expression) = (yyvsp[0].expression);
        -: 3328:      }
        -: 3329:#line 3330 "grammar.c"
    #####: 3330:    break;
        -: 3331:
    #####: 3332:  case 83:
        -: 3333:#line 1592 "grammar.y"
        -: 3334:      {
        -: 3335:        (yyval.expression) = (yyvsp[-1].expression);
        -: 3336:      }
        -: 3337:#line 3338 "grammar.c"
    #####: 3338:    break;
        -: 3339:
    #####: 3340:  case 84:
        -: 3341:#line 1599 "grammar.y"
        -: 3342:                                   { (yyval.integer) = INTEGER_SET_ENUMERATION; }
        -: 3343:#line 3344 "grammar.c"
    #####: 3344:    break;
        -: 3345:
    #####: 3346:  case 85:
        -: 3347:#line 1600 "grammar.y"
        -: 3348:                                   { (yyval.integer) = INTEGER_SET_RANGE; }
        -: 3349:#line 3350 "grammar.c"
    #####: 3350:    break;
        -: 3351:
    #####: 3352:  case 86:
        -: 3353:#line 1606 "grammar.y"
        -: 3354:      {
        -: 3355:        int result = ERROR_SUCCESS;
        -: 3356:
        -: 3357:        if ((yyvsp[-3].expression).type != EXPRESSION_TYPE_INTEGER)
        -: 3358:        {
        -: 3359:          yr_compiler_set_error_extra_info(
        -: 3360:              compiler, "wrong type for range's lower bound");
        -: 3361:          result = ERROR_WRONG_TYPE;
        -: 3362:        }
        -: 3363:
        -: 3364:        if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_INTEGER)
        -: 3365:        {
        -: 3366:          yr_compiler_set_error_extra_info(
        -: 3367:              compiler, "wrong type for range's upper bound");
        -: 3368:          result = ERROR_WRONG_TYPE;
        -: 3369:        }
        -: 3370:
        -: 3371:        fail_if_error(result);
        -: 3372:      }
        -: 3373:#line 3374 "grammar.c"
    #####: 3374:    break;
        -: 3375:
    #####: 3376:  case 87:
        -: 3377:#line 1630 "grammar.y"
        -: 3378:      {
        -: 3379:        int result = ERROR_SUCCESS;
        -: 3380:
        -: 3381:        if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)
        -: 3382:        {
        -: 3383:          yr_compiler_set_error_extra_info(
        -: 3384:              compiler, "wrong type for enumeration item");
        -: 3385:          result = ERROR_WRONG_TYPE;
        -: 3386:        }
        -: 3387:
        -: 3388:        fail_if_error(result);
        -: 3389:      }
        -: 3390:#line 3391 "grammar.c"
    #####: 3391:    break;
        -: 3392:
    #####: 3393:  case 88:
        -: 3394:#line 1643 "grammar.y"
        -: 3395:      {
        -: 3396:        int result = ERROR_SUCCESS;
        -: 3397:
        -: 3398:        if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)
        -: 3399:        {
        -: 3400:          yr_compiler_set_error_extra_info(
        -: 3401:              compiler, "wrong type for enumeration item");
        -: 3402:          result = ERROR_WRONG_TYPE;
        -: 3403:        }
        -: 3404:
        -: 3405:        fail_if_error(result);
        -: 3406:      }
        -: 3407:#line 3408 "grammar.c"
    #####: 3408:    break;
        -: 3409:
    #####: 3410:  case 89:
        -: 3411:#line 1660 "grammar.y"
        -: 3412:      {
        -: 3413:        // Push end-of-list marker
        -: 3414:        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);
        -: 3415:      }
        -: 3416:#line 3417 "grammar.c"
    #####: 3417:    break;
        -: 3418:
    #####: 3419:  case 91:
        -: 3420:#line 1666 "grammar.y"
        -: 3421:      {
        -: 3422:        fail_if_error(yr_parser_emit_with_arg(
        -: 3423:            yyscanner, OP_PUSH, UNDEFINED, NULL, NULL));
        -: 3424:
        -: 3425:        fail_if_error(yr_parser_emit_pushes_for_strings(
        -: 3426:            yyscanner, "$*"));
        -: 3427:      }
        -: 3428:#line 3429 "grammar.c"
    #####: 3429:    break;
        -: 3430:
    #####: 3431:  case 94:
        -: 3432:#line 1684 "grammar.y"
        -: 3433:      {
        -: 3434:        int result = yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));
        -: 3435:        yr_free((yyvsp[0].c_string));
        -: 3436:
        -: 3437:        fail_if_error(result);
        -: 3438:      }
        -: 3439:#line 3440 "grammar.c"
    #####: 3440:    break;
        -: 3441:
    #####: 3442:  case 95:
        -: 3443:#line 1691 "grammar.y"
        -: 3444:      {
        -: 3445:        int result = yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));
        -: 3446:        yr_free((yyvsp[0].c_string));
        -: 3447:
        -: 3448:        fail_if_error(result);
        -: 3449:      }
        -: 3450:#line 3451 "grammar.c"
    #####: 3451:    break;
        -: 3452:
    #####: 3453:  case 96:
        -: 3454:#line 1702 "grammar.y"
        -: 3455:      {
        -: 3456:        (yyval.integer) = FOR_EXPRESSION_ANY;
        -: 3457:      }
        -: 3458:#line 3459 "grammar.c"
    #####: 3459:    break;
        -: 3460:
    #####: 3461:  case 97:
        -: 3462:#line 1706 "grammar.y"
        -: 3463:      {
        -: 3464:        yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);
        -: 3465:        (yyval.integer) = FOR_EXPRESSION_ALL;
        -: 3466:      }
        -: 3467:#line 3468 "grammar.c"
    #####: 3468:    break;
        -: 3469:
    #####: 3470:  case 98:
        -: 3471:#line 1711 "grammar.y"
        -: 3472:      {
        -: 3473:        yr_parser_emit_with_arg(yyscanner, OP_PUSH, 1, NULL, NULL);
        -: 3474:        (yyval.integer) = FOR_EXPRESSION_ANY;
        -: 3475:      }
        -: 3476:#line 3477 "grammar.c"
    #####: 3477:    break;
        -: 3478:
    #####: 3479:  case 99:
        -: 3480:#line 1720 "grammar.y"
        -: 3481:      {
        -: 3482:        (yyval.expression) = (yyvsp[-1].expression);
        -: 3483:      }
        -: 3484:#line 3485 "grammar.c"
    #####: 3485:    break;
        -: 3486:
    #####: 3487:  case 100:
        -: 3488:#line 1724 "grammar.y"
        -: 3489:      {
        -: 3490:        fail_if_error(yr_parser_emit(
        -: 3491:            yyscanner, OP_FILESIZE, NULL));
        -: 3492:
        -: 3493:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3494:        (yyval.expression).value.integer = UNDEFINED;
        -: 3495:      }
        -: 3496:#line 3497 "grammar.c"
    #####: 3497:    break;
        -: 3498:
    #####: 3499:  case 101:
        -: 3500:#line 1732 "grammar.y"
        -: 3501:      {
        -: 3502:        yywarning(yyscanner,
        -: 3503:            "Using deprecated \"entrypoint\" keyword. Use the \"entry_point\" "
        -: 3504:            "function from PE module instead.");
        -: 3505:
        -: 3506:        fail_if_error(yr_parser_emit(
        -: 3507:            yyscanner, OP_ENTRYPOINT, NULL));
        -: 3508:
        -: 3509:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3510:        (yyval.expression).value.integer = UNDEFINED;
        -: 3511:      }
        -: 3512:#line 3513 "grammar.c"
    #####: 3513:    break;
        -: 3514:
    #####: 3515:  case 102:
        -: 3516:#line 1744 "grammar.y"
        -: 3517:      {
        -: 3518:        check_type((yyvsp[-1].expression), EXPRESSION_TYPE_INTEGER, "intXXXX or uintXXXX");
        -: 3519:
        -: 3520:        // _INTEGER_FUNCTION_ could be any of int8, int16, int32, uint8,
        -: 3521:        // uint32, etc. $1 contains an index that added to OP_READ_INT results
        -: 3522:        // in the proper OP_INTXX opcode.
        -: 3523:
        -: 3524:        fail_if_error(yr_parser_emit(
        -: 3525:            yyscanner, (uint8_t) (OP_READ_INT + (yyvsp[-3].integer)), NULL));
        -: 3526:
        -: 3527:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3528:        (yyval.expression).value.integer = UNDEFINED;
        -: 3529:      }
        -: 3530:#line 3531 "grammar.c"
    #####: 3531:    break;
        -: 3532:
    #####: 3533:  case 103:
        -: 3534:#line 1758 "grammar.y"
        -: 3535:      {
        -: 3536:        fail_if_error(yr_parser_emit_with_arg(
        -: 3537:            yyscanner, OP_PUSH, (yyvsp[0].integer), NULL, NULL));
        -: 3538:
        -: 3539:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3540:        (yyval.expression).value.integer = (yyvsp[0].integer);
        -: 3541:      }
        -: 3542:#line 3543 "grammar.c"
    #####: 3543:    break;
        -: 3544:
    #####: 3545:  case 104:
        -: 3546:#line 1766 "grammar.y"
        -: 3547:      {
        -: 3548:        fail_if_error(yr_parser_emit_with_arg_double(
        -: 3549:            yyscanner, OP_PUSH, (yyvsp[0].double_), NULL, NULL));
        -: 3550:
        -: 3551:        (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
        -: 3552:      }
        -: 3553:#line 3554 "grammar.c"
    #####: 3554:    break;
        -: 3555:
    #####: 3556:  case 105:
        -: 3557:#line 1773 "grammar.y"
        -: 3558:      {
        -: 3559:        SIZED_STRING* sized_string;
        -: 3560:
        -: 3561:        int result = yr_arena_write_data(
        -: 3562:            compiler->sz_arena,
        -: 3563:            (yyvsp[0].sized_string),
        -: 3564:            (yyvsp[0].sized_string)->length + sizeof(SIZED_STRING),
        -: 3565:            (void**) &sized_string);
        -: 3566:
        -: 3567:        yr_free((yyvsp[0].sized_string));
        -: 3568:
        -: 3569:        if (result == ERROR_SUCCESS)
        -: 3570:          result = yr_parser_emit_with_arg_reloc(
        -: 3571:              yyscanner,
        -: 3572:              OP_PUSH,
        -: 3573:              sized_string,
        -: 3574:              NULL,
        -: 3575:              NULL);
        -: 3576:
        -: 3577:        fail_if_error(result);
        -: 3578:
        -: 3579:        (yyval.expression).type = EXPRESSION_TYPE_STRING;
        -: 3580:        (yyval.expression).value.sized_string = sized_string;
        -: 3581:      }
        -: 3582:#line 3583 "grammar.c"
    #####: 3583:    break;
        -: 3584:
    #####: 3585:  case 106:
        -: 3586:#line 1798 "grammar.y"
        -: 3587:      {
        -: 3588:        int result = yr_parser_reduce_string_identifier(
        -: 3589:            yyscanner, (yyvsp[0].c_string), OP_COUNT, UNDEFINED);
        -: 3590:
        -: 3591:        yr_free((yyvsp[0].c_string));
        -: 3592:
        -: 3593:        fail_if_error(result);
        -: 3594:
        -: 3595:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3596:        (yyval.expression).value.integer = UNDEFINED;
        -: 3597:      }
        -: 3598:#line 3599 "grammar.c"
    #####: 3599:    break;
        -: 3600:
    #####: 3601:  case 107:
        -: 3602:#line 1810 "grammar.y"
        -: 3603:      {
        -: 3604:        int result = yr_parser_reduce_string_identifier(
        -: 3605:            yyscanner, (yyvsp[-3].c_string), OP_OFFSET, UNDEFINED);
        -: 3606:
        -: 3607:        yr_free((yyvsp[-3].c_string));
        -: 3608:
        -: 3609:        fail_if_error(result);
        -: 3610:
        -: 3611:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3612:        (yyval.expression).value.integer = UNDEFINED;
        -: 3613:      }
        -: 3614:#line 3615 "grammar.c"
    #####: 3615:    break;
        -: 3616:
    #####: 3617:  case 108:
        -: 3618:#line 1822 "grammar.y"
        -: 3619:      {
        -: 3620:        int result = yr_parser_emit_with_arg(
        -: 3621:            yyscanner, OP_PUSH, 1, NULL, NULL);
        -: 3622:
        -: 3623:        if (result == ERROR_SUCCESS)
        -: 3624:          result = yr_parser_reduce_string_identifier(
        -: 3625:              yyscanner, (yyvsp[0].c_string), OP_OFFSET, UNDEFINED);
        -: 3626:
        -: 3627:        yr_free((yyvsp[0].c_string));
        -: 3628:
        -: 3629:        fail_if_error(result);
        -: 3630:
        -: 3631:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3632:        (yyval.expression).value.integer = UNDEFINED;
        -: 3633:      }
        -: 3634:#line 3635 "grammar.c"
    #####: 3635:    break;
        -: 3636:
    #####: 3637:  case 109:
        -: 3638:#line 1838 "grammar.y"
        -: 3639:      {
        -: 3640:        int result = yr_parser_reduce_string_identifier(
        -: 3641:            yyscanner, (yyvsp[-3].c_string), OP_LENGTH, UNDEFINED);
        -: 3642:
        -: 3643:        yr_free((yyvsp[-3].c_string));
        -: 3644:
        -: 3645:        fail_if_error(result);
        -: 3646:
        -: 3647:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3648:        (yyval.expression).value.integer = UNDEFINED;
        -: 3649:      }
        -: 3650:#line 3651 "grammar.c"
    #####: 3651:    break;
        -: 3652:
    #####: 3653:  case 110:
        -: 3654:#line 1850 "grammar.y"
        -: 3655:      {
        -: 3656:        int result = yr_parser_emit_with_arg(
        -: 3657:            yyscanner, OP_PUSH, 1, NULL, NULL);
        -: 3658:
        -: 3659:        if (result == ERROR_SUCCESS)
        -: 3660:          result = yr_parser_reduce_string_identifier(
        -: 3661:              yyscanner, (yyvsp[0].c_string), OP_LENGTH, UNDEFINED);
        -: 3662:
        -: 3663:        yr_free((yyvsp[0].c_string));
        -: 3664:
        -: 3665:        fail_if_error(result);
        -: 3666:
        -: 3667:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3668:        (yyval.expression).value.integer = UNDEFINED;
        -: 3669:      }
        -: 3670:#line 3671 "grammar.c"
    #####: 3671:    break;
        -: 3672:
    #####: 3673:  case 111:
        -: 3674:#line 1866 "grammar.y"
        -: 3675:      {
        -: 3676:        int result = ERROR_SUCCESS;
        -: 3677:
        -: 3678:        if ((yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)  // loop identifier
        -: 3679:        {
        -: 3680:          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3681:          (yyval.expression).value.integer = UNDEFINED;
        -: 3682:        }
        -: 3683:        else if ((yyvsp[0].expression).type == EXPRESSION_TYPE_BOOLEAN)  // rule identifier
        -: 3684:        {
        -: 3685:          (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
        -: 3686:          (yyval.expression).value.integer = UNDEFINED;
        -: 3687:        }
        -: 3688:        else if ((yyvsp[0].expression).type == EXPRESSION_TYPE_OBJECT)
        -: 3689:        {
        -: 3690:          result = yr_parser_emit(
        -: 3691:              yyscanner, OP_OBJ_VALUE, NULL);
        -: 3692:
        -: 3693:          switch((yyvsp[0].expression).value.object->type)
        -: 3694:          {
        -: 3695:            case OBJECT_TYPE_INTEGER:
        -: 3696:              (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3697:              (yyval.expression).value.integer = UNDEFINED;
        -: 3698:              break;
        -: 3699:            case OBJECT_TYPE_FLOAT:
        -: 3700:              (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
        -: 3701:              break;
        -: 3702:            case OBJECT_TYPE_STRING:
        -: 3703:              (yyval.expression).type = EXPRESSION_TYPE_STRING;
        -: 3704:              (yyval.expression).value.sized_string = NULL;
        -: 3705:              break;
        -: 3706:            default:
        -: 3707:              yr_compiler_set_error_extra_info_fmt(
        -: 3708:                  compiler,
        -: 3709:                  "wrong usage of identifier \"%s\"",
        -: 3710:                  (yyvsp[0].expression).identifier);
        -: 3711:              result = ERROR_WRONG_TYPE;
        -: 3712:          }
        -: 3713:        }
        -: 3714:        else
        -: 3715:        {
        -: 3716:          assert(false);
        -: 3717:        }
        -: 3718:
        -: 3719:        fail_if_error(result);
        -: 3720:      }
        -: 3721:#line 3722 "grammar.c"
    #####: 3722:    break;
        -: 3723:
    #####: 3724:  case 112:
        -: 3725:#line 1913 "grammar.y"
        -: 3726:      {
        -: 3727:        int result = ERROR_SUCCESS;
        -: 3728:
        -: 3729:        check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT, "-");
        -: 3730:
        -: 3731:        if ((yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)
        -: 3732:        {
        -: 3733:          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3734:          (yyval.expression).value.integer = ((yyvsp[0].expression).value.integer == UNDEFINED) ?
        -: 3735:              UNDEFINED : -((yyvsp[0].expression).value.integer);
        -: 3736:          result = yr_parser_emit(yyscanner, OP_INT_MINUS, NULL);
        -: 3737:        }
        -: 3738:        else if ((yyvsp[0].expression).type == EXPRESSION_TYPE_FLOAT)
        -: 3739:        {
        -: 3740:          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
        -: 3741:          result = yr_parser_emit(yyscanner, OP_DBL_MINUS, NULL);
        -: 3742:        }
        -: 3743:
        -: 3744:        fail_if_error(result);
        -: 3745:      }
        -: 3746:#line 3747 "grammar.c"
    #####: 3747:    break;
        -: 3748:
    #####: 3749:  case 113:
        -: 3750:#line 1934 "grammar.y"
        -: 3751:      {
        -: 3752:        int result = yr_parser_reduce_operation(
        -: 3753:            yyscanner, "+", (yyvsp[-2].expression), (yyvsp[0].expression));
        -: 3754:
        -: 3755:        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&
        -: 3756:            (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)
        -: 3757:        {
        -: 3758:          int64_t i1 = (yyvsp[-2].expression).value.integer;
        -: 3759:          int64_t i2 = (yyvsp[0].expression).value.integer;
        -: 3760:
        -: 3761:          if (!IS_UNDEFINED(i1) && !IS_UNDEFINED(i2) &&
        -: 3762:              (
        -: 3763:                (i2 > 0 && i1 > INT64_MAX - i2) ||
        -: 3764:                (i2 < 0 && i1 < INT64_MIN - i2)
        -: 3765:              ))
        -: 3766:          {
        -: 3767:            yr_compiler_set_error_extra_info_fmt(
        -: 3768:                compiler, "%" PRId64 " + %" PRId64, i1, i2);
        -: 3769:
        -: 3770:            result = ERROR_INTEGER_OVERFLOW;
        -: 3771:          }
        -: 3772:          else
        -: 3773:          {
        -: 3774:            (yyval.expression).value.integer = OPERATION(+, i1, i2);
        -: 3775:            (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3776:          }
        -: 3777:        }
        -: 3778:        else
        -: 3779:        {
        -: 3780:          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
        -: 3781:        }
        -: 3782:
        -: 3783:        fail_if_error(result);
        -: 3784:      }
        -: 3785:#line 3786 "grammar.c"
    #####: 3786:    break;
        -: 3787:
    #####: 3788:  case 114:
        -: 3789:#line 1969 "grammar.y"
        -: 3790:      {
        -: 3791:        int result = yr_parser_reduce_operation(
        -: 3792:            yyscanner, "-", (yyvsp[-2].expression), (yyvsp[0].expression));
        -: 3793:
        -: 3794:        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&
        -: 3795:            (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)
        -: 3796:        {
        -: 3797:          int64_t i1 = (yyvsp[-2].expression).value.integer;
        -: 3798:          int64_t i2 = (yyvsp[0].expression).value.integer;
        -: 3799:
        -: 3800:          if (!IS_UNDEFINED(i1) && !IS_UNDEFINED(i2) &&
        -: 3801:              (
        -: 3802:                (i2 < 0 && i1 > INT64_MAX + i2) ||
        -: 3803:                (i2 > 0 && i1 < INT64_MIN + i2)
        -: 3804:              ))
        -: 3805:          {
        -: 3806:            yr_compiler_set_error_extra_info_fmt(
        -: 3807:                compiler, "%" PRId64 " - %" PRId64, i1, i2);
        -: 3808:
        -: 3809:            result = ERROR_INTEGER_OVERFLOW;
        -: 3810:          }
        -: 3811:          else
        -: 3812:          {
        -: 3813:            (yyval.expression).value.integer = OPERATION(-, i1, i2);
        -: 3814:            (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3815:          }
        -: 3816:        }
        -: 3817:        else
        -: 3818:        {
        -: 3819:          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
        -: 3820:        }
        -: 3821:
        -: 3822:        fail_if_error(result);
        -: 3823:      }
        -: 3824:#line 3825 "grammar.c"
    #####: 3825:    break;
        -: 3826:
    #####: 3827:  case 115:
        -: 3828:#line 2004 "grammar.y"
        -: 3829:      {
        -: 3830:        int result = yr_parser_reduce_operation(
        -: 3831:            yyscanner, "*", (yyvsp[-2].expression), (yyvsp[0].expression));
        -: 3832:
        -: 3833:        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&
        -: 3834:            (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)
        -: 3835:        {
        -: 3836:          int64_t i1 = (yyvsp[-2].expression).value.integer;
        -: 3837:          int64_t i2 = (yyvsp[0].expression).value.integer;
        -: 3838:
        -: 3839:          if (!IS_UNDEFINED(i1) && !IS_UNDEFINED(i2) &&
        -: 3840:              (
        -: 3841:                i2 != 0 && llabs(i1) > INT64_MAX / llabs(i2)
        -: 3842:              ))
        -: 3843:          {
        -: 3844:            yr_compiler_set_error_extra_info_fmt(
        -: 3845:                compiler, "%" PRId64 " * %" PRId64, i1, i2);
        -: 3846:
        -: 3847:            result = ERROR_INTEGER_OVERFLOW;
        -: 3848:          }
        -: 3849:          else
        -: 3850:          {
        -: 3851:            (yyval.expression).value.integer = OPERATION(*, i1, i2);
        -: 3852:            (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3853:          }
        -: 3854:        }
        -: 3855:        else
        -: 3856:        {
        -: 3857:          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
        -: 3858:        }
        -: 3859:
        -: 3860:        fail_if_error(result);
        -: 3861:      }
        -: 3862:#line 3863 "grammar.c"
    #####: 3863:    break;
        -: 3864:
    #####: 3865:  case 116:
        -: 3866:#line 2038 "grammar.y"
        -: 3867:      {
        -: 3868:        int result = yr_parser_reduce_operation(
        -: 3869:            yyscanner, "\\", (yyvsp[-2].expression), (yyvsp[0].expression));
        -: 3870:
        -: 3871:        if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&
        -: 3872:            (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)
        -: 3873:        {
        -: 3874:          if ((yyvsp[0].expression).value.integer != 0)
        -: 3875:          {
        -: 3876:            (yyval.expression).value.integer = OPERATION(/, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
        -: 3877:            (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3878:          }
        -: 3879:          else
        -: 3880:          {
        -: 3881:            result = ERROR_DIVISION_BY_ZERO;
        -: 3882:          }
        -: 3883:        }
        -: 3884:        else
        -: 3885:        {
        -: 3886:          (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
        -: 3887:        }
        -: 3888:
        -: 3889:        fail_if_error(result);
        -: 3890:      }
        -: 3891:#line 3892 "grammar.c"
    #####: 3892:    break;
        -: 3893:
    #####: 3894:  case 117:
        -: 3895:#line 2063 "grammar.y"
        -: 3896:      {
        -: 3897:        check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, "%");
        -: 3898:        check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "%");
        -: 3899:
        -: 3900:        fail_if_error(yr_parser_emit(yyscanner, OP_MOD, NULL));
        -: 3901:
        -: 3902:        if ((yyvsp[0].expression).value.integer != 0)
        -: 3903:        {
        -: 3904:          (yyval.expression).value.integer = OPERATION(%, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
        -: 3905:          (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3906:        }
        -: 3907:        else
        -: 3908:        {
        -: 3909:          fail_if_error(ERROR_DIVISION_BY_ZERO);
        -: 3910:        }
        -: 3911:      }
        -: 3912:#line 3913 "grammar.c"
    #####: 3913:    break;
        -: 3914:
    #####: 3915:  case 118:
        -: 3916:#line 2080 "grammar.y"
        -: 3917:      {
        -: 3918:        check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, "^");
        -: 3919:        check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "^");
        -: 3920:
        -: 3921:        fail_if_error(yr_parser_emit(yyscanner, OP_BITWISE_XOR, NULL));
        -: 3922:
        -: 3923:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3924:        (yyval.expression).value.integer = OPERATION(^, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
        -: 3925:      }
        -: 3926:#line 3927 "grammar.c"
    #####: 3927:    break;
        -: 3928:
    #####: 3929:  case 119:
        -: 3930:#line 2090 "grammar.y"
        -: 3931:      {
        -: 3932:        check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, "^");
        -: 3933:        check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "^");
        -: 3934:
        -: 3935:        fail_if_error(yr_parser_emit(yyscanner, OP_BITWISE_AND, NULL));
        -: 3936:
        -: 3937:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3938:        (yyval.expression).value.integer = OPERATION(&, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
        -: 3939:      }
        -: 3940:#line 3941 "grammar.c"
    #####: 3941:    break;
        -: 3942:
    #####: 3943:  case 120:
        -: 3944:#line 2100 "grammar.y"
        -: 3945:      {
        -: 3946:        check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, "|");
        -: 3947:        check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "|");
        -: 3948:
        -: 3949:        fail_if_error(yr_parser_emit(yyscanner, OP_BITWISE_OR, NULL));
        -: 3950:
        -: 3951:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3952:        (yyval.expression).value.integer = OPERATION(|, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
        -: 3953:      }
        -: 3954:#line 3955 "grammar.c"
    #####: 3955:    break;
        -: 3956:
    #####: 3957:  case 121:
        -: 3958:#line 2110 "grammar.y"
        -: 3959:      {
        -: 3960:        check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "~");
        -: 3961:
        -: 3962:        fail_if_error(yr_parser_emit(yyscanner, OP_BITWISE_NOT, NULL));
        -: 3963:
        -: 3964:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3965:        (yyval.expression).value.integer = ((yyvsp[0].expression).value.integer == UNDEFINED) ?
        -: 3966:            UNDEFINED : ~((yyvsp[0].expression).value.integer);
        -: 3967:      }
        -: 3968:#line 3969 "grammar.c"
    #####: 3969:    break;
        -: 3970:
    #####: 3971:  case 122:
        -: 3972:#line 2120 "grammar.y"
        -: 3973:      {
        -: 3974:        int result;
        -: 3975:
        -: 3976:        check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, "<<");
        -: 3977:        check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "<<");
        -: 3978:
        -: 3979:        result = yr_parser_emit(yyscanner, OP_SHL, NULL);
        -: 3980:
        -: 3981:        if (!IS_UNDEFINED((yyvsp[0].expression).value.integer) && (yyvsp[0].expression).value.integer < 0)
        -: 3982:          result = ERROR_INVALID_OPERAND;
        -: 3983:        else if (!IS_UNDEFINED((yyvsp[0].expression).value.integer) && (yyvsp[0].expression).value.integer >= 64)
        -: 3984:          (yyval.expression).value.integer = 0;
        -: 3985:        else
        -: 3986:          (yyval.expression).value.integer = OPERATION(<<, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
        -: 3987:
        -: 3988:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 3989:
        -: 3990:        fail_if_error(result);
        -: 3991:      }
        -: 3992:#line 3993 "grammar.c"
    #####: 3993:    break;
        -: 3994:
    #####: 3995:  case 123:
        -: 3996:#line 2140 "grammar.y"
        -: 3997:      {
        -: 3998:        int result;
        -: 3999:
        -: 4000:        check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, ">>");
        -: 4001:        check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, ">>");
        -: 4002:
        -: 4003:        result = yr_parser_emit(yyscanner, OP_SHR, NULL);
        -: 4004:
        -: 4005:        if (!IS_UNDEFINED((yyvsp[0].expression).value.integer) && (yyvsp[0].expression).value.integer < 0)
        -: 4006:          result = ERROR_INVALID_OPERAND;
        -: 4007:        else if (!IS_UNDEFINED((yyvsp[0].expression).value.integer) && (yyvsp[0].expression).value.integer >= 64)
        -: 4008:          (yyval.expression).value.integer = 0;
        -: 4009:        else
        -: 4010:          (yyval.expression).value.integer = OPERATION(<<, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
        -: 4011:
        -: 4012:        (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
        -: 4013:
        -: 4014:        fail_if_error(result);
        -: 4015:      }
        -: 4016:#line 4017 "grammar.c"
    #####: 4017:    break;
        -: 4018:
    #####: 4019:  case 124:
        -: 4020:#line 2160 "grammar.y"
        -: 4021:      {
        -: 4022:        (yyval.expression) = (yyvsp[0].expression);
        -: 4023:      }
        -: 4024:#line 4025 "grammar.c"
    #####: 4025:    break;
        -: 4026:
        -: 4027:
        -: 4028:#line 4029 "grammar.c"
        -: 4029:
    #####: 4030:      default: break;
        -: 4031:    }
        -: 4032:  /* User semantic actions sometimes alter yychar, and that requires
        -: 4033:     that yytoken be updated with the new translation.  We take the
        -: 4034:     approach of translating immediately before every use of yytoken.
        -: 4035:     One alternative is translating here after every semantic action,
        -: 4036:     but that translation would be missed if the semantic action invokes
        -: 4037:     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
        -: 4038:     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
        -: 4039:     incorrect destructor might then be invoked immediately.  In the
        -: 4040:     case of YYERROR or YYBACKUP, subsequent parser actions might lead
        -: 4041:     to an incorrect destructor call or verbose syntax error message
        -: 4042:     before the lookahead is translated.  */
        -: 4043:  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
        -: 4044:
    #####: 4045:  YYPOPSTACK (yylen);
    #####: 4046:  yylen = 0;
        -: 4047:  YY_STACK_PRINT (yyss, yyssp);
        -: 4048:
    #####: 4049:  *++yyvsp = yyval;
        -: 4050:
        -: 4051:  /* Now 'shift' the result of the reduction.  Determine what state
        -: 4052:     that goes to, based on the state we popped back to and the rule
        -: 4053:     number reduced by.  */
        -: 4054:  {
    #####: 4055:    const int yylhs = yyr1[yyn] - YYNTOKENS;
    #####: 4056:    const int yyi = yypgoto[yylhs] + *yyssp;
    #####: 4057:    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
    #####: 4058:               ? yytable[yyi]
    #####: 4059:               : yydefgoto[yylhs]);
        -: 4060:  }
        -: 4061:
    #####: 4062:  goto yynewstate;
        -: 4063:
        -: 4064:
        -: 4065:/*--------------------------------------.
        -: 4066:| yyerrlab -- here on detecting error.  |
        -: 4067:`--------------------------------------*/
    #####: 4068:yyerrlab:
        -: 4069:  /* Make sure we have latest lookahead translation.  See comments at
        -: 4070:     user semantic actions for why this is necessary.  */
    #####: 4071:  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
        -: 4072:
        -: 4073:  /* If not already recovering from an error, report this error.  */
    #####: 4074:  if (!yyerrstatus)
        -: 4075:    {
    #####: 4076:      ++yynerrs;
        -: 4077:#if ! YYERROR_VERBOSE
        -: 4078:      yyerror (yyscanner, compiler, YY_("syntax error"));
        -: 4079:#else
        -: 4080:# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
        -: 4081:                                        yyssp, yytoken)
        -: 4082:      {
    #####: 4083:        char const *yymsgp = YY_("syntax error");
        -: 4084:        int yysyntax_error_status;
    #####: 4085:        yysyntax_error_status = YYSYNTAX_ERROR;
    #####: 4086:        if (yysyntax_error_status == 0)
    #####: 4087:          yymsgp = yymsg;
    #####: 4088:        else if (yysyntax_error_status == 1)
        -: 4089:          {
    #####: 4090:            if (yymsg != yymsgbuf)
    #####: 4091:              YYSTACK_FREE (yymsg);
    #####: 4092:            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
    #####: 4093:            if (!yymsg)
        -: 4094:              {
    #####: 4095:                yymsg = yymsgbuf;
    #####: 4096:                yymsg_alloc = sizeof yymsgbuf;
    #####: 4097:                yysyntax_error_status = 2;
        -: 4098:              }
        -: 4099:            else
        -: 4100:              {
    #####: 4101:                yysyntax_error_status = YYSYNTAX_ERROR;
    #####: 4102:                yymsgp = yymsg;
        -: 4103:              }
        -: 4104:          }
    #####: 4105:        yyerror (yyscanner, compiler, yymsgp);
    #####: 4106:        if (yysyntax_error_status == 2)
    #####: 4107:          goto yyexhaustedlab;
        -: 4108:      }
        -: 4109:# undef YYSYNTAX_ERROR
        -: 4110:#endif
        -: 4111:    }
        -: 4112:
        -: 4113:
        -: 4114:
    #####: 4115:  if (yyerrstatus == 3)
        -: 4116:    {
        -: 4117:      /* If just tried and failed to reuse lookahead token after an
        -: 4118:         error, discard it.  */
        -: 4119:
    #####: 4120:      if (yychar <= YYEOF)
        -: 4121:        {
        -: 4122:          /* Return failure if at end of input.  */
    #####: 4123:          if (yychar == YYEOF)
    #####: 4124:            YYABORT;
        -: 4125:        }
        -: 4126:      else
        -: 4127:        {
    #####: 4128:          yydestruct ("Error: discarding",
        -: 4129:                      yytoken, &yylval, yyscanner, compiler);
    #####: 4130:          yychar = YYEMPTY;
        -: 4131:        }
        -: 4132:    }
        -: 4133:
        -: 4134:  /* Else will try to reuse lookahead token after shifting the error
        -: 4135:     token.  */
    #####: 4136:  goto yyerrlab1;
        -: 4137:
        -: 4138:
        -: 4139:/*---------------------------------------------------.
        -: 4140:| yyerrorlab -- error raised explicitly by YYERROR.  |
        -: 4141:`---------------------------------------------------*/
    #####: 4142:yyerrorlab:
        -: 4143:  /* Pacify compilers when the user code never invokes YYERROR and the
        -: 4144:     label yyerrorlab therefore never appears in user code.  */
        -: 4145:  if (0)
        -: 4146:    YYERROR;
        -: 4147:
        -: 4148:  /* Do not reclaim the symbols of the rule whose action triggered
        -: 4149:     this YYERROR.  */
    #####: 4150:  YYPOPSTACK (yylen);
    #####: 4151:  yylen = 0;
        -: 4152:  YY_STACK_PRINT (yyss, yyssp);
    #####: 4153:  yystate = *yyssp;
    #####: 4154:  goto yyerrlab1;
        -: 4155:
        -: 4156:
        -: 4157:/*-------------------------------------------------------------.
        -: 4158:| yyerrlab1 -- common code for both syntax error and YYERROR.  |
        -: 4159:`-------------------------------------------------------------*/
    #####: 4160:yyerrlab1:
    #####: 4161:  yyerrstatus = 3;      /* Each real token shifted decrements this.  */
        -: 4162:
        -: 4163:  for (;;)
        -: 4164:    {
    #####: 4165:      yyn = yypact[yystate];
    #####: 4166:      if (!yypact_value_is_default (yyn))
        -: 4167:        {
    #####: 4168:          yyn += YYTERROR;
    #####: 4169:          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
        -: 4170:            {
    #####: 4171:              yyn = yytable[yyn];
    #####: 4172:              if (0 < yyn)
    #####: 4173:                break;
        -: 4174:            }
        -: 4175:        }
        -: 4176:
        -: 4177:      /* Pop the current state because it cannot handle the error token.  */
    #####: 4178:      if (yyssp == yyss)
    #####: 4179:        YYABORT;
        -: 4180:
        -: 4181:
    #####: 4182:      yydestruct ("Error: popping",
    #####: 4183:                  yystos[yystate], yyvsp, yyscanner, compiler);
    #####: 4184:      YYPOPSTACK (1);
    #####: 4185:      yystate = *yyssp;
        -: 4186:      YY_STACK_PRINT (yyss, yyssp);
        -: 4187:    }
        -: 4188:
        -: 4189:  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
    #####: 4190:  *++yyvsp = yylval;
        -: 4191:  YY_IGNORE_MAYBE_UNINITIALIZED_END
        -: 4192:
        -: 4193:
        -: 4194:  /* Shift the error token.  */
        -: 4195:  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
        -: 4196:
    #####: 4197:  yystate = yyn;
    #####: 4198:  goto yynewstate;
        -: 4199:
        -: 4200:
        -: 4201:/*-------------------------------------.
        -: 4202:| yyacceptlab -- YYACCEPT comes here.  |
        -: 4203:`-------------------------------------*/
    #####: 4204:yyacceptlab:
    #####: 4205:  yyresult = 0;
    #####: 4206:  goto yyreturn;
        -: 4207:
        -: 4208:
        -: 4209:/*-----------------------------------.
        -: 4210:| yyabortlab -- YYABORT comes here.  |
        -: 4211:`-----------------------------------*/
    #####: 4212:yyabortlab:
    #####: 4213:  yyresult = 1;
    #####: 4214:  goto yyreturn;
        -: 4215:
        -: 4216:
        -: 4217:#if !defined yyoverflow || YYERROR_VERBOSE
        -: 4218:/*-------------------------------------------------.
        -: 4219:| yyexhaustedlab -- memory exhaustion comes here.  |
        -: 4220:`-------------------------------------------------*/
    #####: 4221:yyexhaustedlab:
    #####: 4222:  yyerror (yyscanner, compiler, YY_("memory exhausted"));
    #####: 4223:  yyresult = 2;
        -: 4224:  /* Fall through.  */
        -: 4225:#endif
        -: 4226:
        -: 4227:
        -: 4228:/*-----------------------------------------------------.
        -: 4229:| yyreturn -- parsing is finished, return the result.  |
        -: 4230:`-----------------------------------------------------*/
    #####: 4231:yyreturn:
    #####: 4232:  if (yychar != YYEMPTY)
        -: 4233:    {
        -: 4234:      /* Make sure we have latest lookahead translation.  See comments at
        -: 4235:         user semantic actions for why this is necessary.  */
    #####: 4236:      yytoken = YYTRANSLATE (yychar);
    #####: 4237:      yydestruct ("Cleanup: discarding lookahead",
        -: 4238:                  yytoken, &yylval, yyscanner, compiler);
        -: 4239:    }
        -: 4240:  /* Do not reclaim the symbols of the rule whose action triggered
        -: 4241:     this YYABORT or YYACCEPT.  */
    #####: 4242:  YYPOPSTACK (yylen);
        -: 4243:  YY_STACK_PRINT (yyss, yyssp);
    #####: 4244:  while (yyssp != yyss)
        -: 4245:    {
    #####: 4246:      yydestruct ("Cleanup: popping",
    #####: 4247:                  yystos[+*yyssp], yyvsp, yyscanner, compiler);
    #####: 4248:      YYPOPSTACK (1);
        -: 4249:    }
        -: 4250:#ifndef yyoverflow
    #####: 4251:  if (yyss != yyssa)
    #####: 4252:    YYSTACK_FREE (yyss);
        -: 4253:#endif
        -: 4254:#if YYERROR_VERBOSE
    #####: 4255:  if (yymsg != yymsgbuf)
    #####: 4256:    YYSTACK_FREE (yymsg);
        -: 4257:#endif
    #####: 4258:  return yyresult;
        -: 4259:}
        -: 4260:#line 2165 "grammar.y"
        -: 4261:
