        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-string.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "lit-strings.h"
        -:   17:#include "ecma-alloc.h"
        -:   18:#include "ecma-builtins.h"
        -:   19:#include "ecma-conversion.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-gc.h"
        -:   22:#include "ecma-globals.h"
        -:   23:#include "ecma-helpers.h"
        -:   24:#include "ecma-objects.h"
        -:   25:#include "ecma-string-object.h"
        -:   26:#if JERRY_ESNEXT
        -:   27:#include "ecma-symbol-object.h"
        -:   28:#endif /* JERRY_ESNEXT */
        -:   29:#include "jrt.h"
        -:   30:
        -:   31:#if JERRY_BUILTIN_STRING
        -:   32:
        -:   33:#define ECMA_BUILTINS_INTERNAL
        -:   34:#include "ecma-builtins-internal.h"
        -:   35:
        -:   36:/**
        -:   37: * This object has a custom dispatch function.
        -:   38: */
        -:   39:#define BUILTIN_CUSTOM_DISPATCH
        -:   40:
        -:   41:/**
        -:   42: * List of built-in routine identifiers.
        -:   43: */
        -:   44:enum
        -:   45:{
        -:   46:  ECMA_BUILTIN_STRING_ROUTINE_START = 0,
        -:   47:  ECMA_BUILTIN_STRING_OBJECT_FROM_CHAR_CODE,
        -:   48:  ECMA_BUILTIN_STRING_OBJECT_FROM_CODE_POINT,
        -:   49:  ECMA_BUILTIN_STRING_OBJECT_RAW,
        -:   50:};
        -:   51:
        -:   52:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-string.inc.h"
        -:   53:#define BUILTIN_UNDERSCORED_ID string
        -:   54:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   55:
        -:   56:/** \addtogroup ecma ECMA
        -:   57: * @{
        -:   58: *
        -:   59: * \addtogroup ecmabuiltins
        -:   60: * @{
        -:   61: *
        -:   62: * \addtogroup string ECMA String object built-in
        -:   63: * @{
        -:   64: */
        -:   65:
        -:   66:/**
        -:   67: * The String object's 'fromCharCode' routine
        -:   68: *
        -:   69: * See also:
        -:   70: *          ECMA-262 v5, 15.5.3.2
        -:   71: *
        -:   72: * @return ecma value
        -:   73: *         Returned value must be freed with ecma_free_value.
        -:   74: */
        -:   75:static ecma_value_t
    #####:   76:ecma_builtin_string_object_from_char_code (const ecma_value_t args[], /**< arguments list */
        -:   77:                                           uint32_t args_number) /**< number of arguments */
        -:   78:{
    #####:   79:  if (args_number == 0)
        -:   80:  {
    #####:   81:    return ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY);
        -:   82:  }
        -:   83:
    #####:   84:  lit_utf8_size_t utf8_buf_size = args_number * LIT_CESU8_MAX_BYTES_IN_CODE_UNIT;
    #####:   85:  ecma_string_t *ret_string_p = NULL;
    #####:   86:  bool isError = false;
        -:   87:
    #####:   88:  JMEM_DEFINE_LOCAL_ARRAY (utf8_buf_p,
        -:   89:                           utf8_buf_size,
        -:   90:                           lit_utf8_byte_t);
        -:   91:
    #####:   92:  lit_utf8_size_t utf8_buf_used = 0;
        -:   93:
    #####:   94:  for (uint32_t arg_index = 0;
        -:   95:       arg_index < args_number;
    #####:   96:       arg_index++)
        -:   97:  {
    #####:   98:    ecma_number_t arg_num;
        -:   99:
    #####:  100:    if (ECMA_IS_VALUE_ERROR (ecma_op_to_number (args[arg_index], &arg_num)))
        -:  101:    {
    #####:  102:      isError = true;
    #####:  103:      break;
        -:  104:    }
        -:  105:
    #####:  106:    uint32_t uint32_char_code = ecma_number_to_uint32 (arg_num);
    #####:  107:    ecma_char_t code_unit = (uint16_t) uint32_char_code;
        -:  108:
    #####:  109:    JERRY_ASSERT (utf8_buf_used <= utf8_buf_size - LIT_UTF8_MAX_BYTES_IN_CODE_UNIT);
    #####:  110:    utf8_buf_used += lit_code_unit_to_utf8 (code_unit, utf8_buf_p + utf8_buf_used);
    #####:  111:    JERRY_ASSERT (utf8_buf_used <= utf8_buf_size);
        -:  112:  }
        -:  113:
    #####:  114:  if (!isError)
        -:  115:  {
    #####:  116:    ret_string_p = ecma_new_ecma_string_from_utf8 (utf8_buf_p, utf8_buf_used);
        -:  117:  }
        -:  118:
    #####:  119:  JMEM_FINALIZE_LOCAL_ARRAY (utf8_buf_p);
        -:  120:
    #####:  121:  return isError ? ECMA_VALUE_ERROR : ecma_make_string_value (ret_string_p);
        -:  122:} /* ecma_builtin_string_object_from_char_code */
        -:  123:
        -:  124:#if JERRY_ESNEXT
        -:  125:
        -:  126:/**
        -:  127: * The String object's 'raw' routine
        -:  128: *
        -:  129: * See also:
        -:  130: *          ECMA-262 v6, 21.1.2.4
        -:  131: *
        -:  132: * @return ecma value
        -:  133: *         Returned value must be freed with ecma_free_value.
        -:  134: */
        -:  135:static ecma_value_t
    #####:  136:ecma_builtin_string_object_raw (const ecma_value_t args[], /**< arguments list */
        -:  137:                                uint32_t args_number) /**< number of arguments */
        -:  138:{
        -:  139:  /* 1 - 2. */
        -:  140:  const ecma_value_t *substitutions;
        -:  141:  uint32_t number_of_substitutions;
        -:  142:
    #####:  143:  if (args_number > 1)
        -:  144:  {
    #####:  145:    substitutions = args + 1;
    #####:  146:    number_of_substitutions = args_number - 1;
        -:  147:  }
        -:  148:  else
        -:  149:  {
    #####:  150:    substitutions = NULL;
    #####:  151:    number_of_substitutions = 0;
        -:  152:  }
        -:  153:
        -:  154:  /* 3. */
    #####:  155:  ecma_value_t template = args_number > 0 ? args[0] : ECMA_VALUE_UNDEFINED;
        -:  156:
    #####:  157:  ecma_value_t cooked = ecma_op_to_object (template);
        -:  158:
        -:  159:  /* 4. */
    #####:  160:  if (ECMA_IS_VALUE_ERROR (cooked))
        -:  161:  {
    #####:  162:    return cooked;
        -:  163:  }
        -:  164:
    #####:  165:  ecma_object_t *cooked_obj_p = ecma_get_object_from_value (cooked);
        -:  166:
        -:  167:  /* 5. */
    #####:  168:  ecma_value_t raw = ecma_op_object_get_by_magic_id (cooked_obj_p, LIT_MAGIC_STRING_RAW);
        -:  169:
    #####:  170:  ecma_deref_object (cooked_obj_p);
        -:  171:
    #####:  172:  if (ECMA_IS_VALUE_ERROR (raw))
        -:  173:  {
    #####:  174:    return raw;
        -:  175:  }
        -:  176:
    #####:  177:  ecma_value_t raw_obj = ecma_op_to_object (raw);
        -:  178:
        -:  179:  /* 6. */
    #####:  180:  if (ECMA_IS_VALUE_ERROR (raw_obj))
        -:  181:  {
    #####:  182:    ecma_free_value (raw);
    #####:  183:    return raw_obj;
        -:  184:  }
        -:  185:
    #####:  186:  ecma_object_t *raw_obj_p = ecma_get_object_from_value (raw_obj);
        -:  187:
    #####:  188:  ecma_value_t ret_value = ECMA_VALUE_ERROR;
        -:  189:
        -:  190:  /* 7 - 8. */
    #####:  191:  ecma_length_t literal_segments;
    #####:  192:  if (ECMA_IS_VALUE_ERROR (ecma_op_object_get_length (raw_obj_p, &literal_segments)))
        -:  193:  {
    #####:  194:    goto cleanup;
        -:  195:  }
        -:  196:
        -:  197:  /* 9. */
    #####:  198:  if (literal_segments == 0)
        -:  199:  {
    #####:  200:    ret_value = ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY);
    #####:  201:    goto cleanup;
        -:  202:  }
        -:  203:
        -:  204:  /* 10. */
    #####:  205:  ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
        -:  206:
        -:  207:  /* 11. */
    #####:  208:  ecma_length_t next_index = 0;
        -:  209:
        -:  210:  /* 12. */
        -:  211:  while (true)
    #####:  212:  {
        -:  213:    /* 12.a,b */
    #####:  214:    ecma_value_t next_seg = ecma_op_object_get_by_index (raw_obj_p, next_index);
        -:  215:
    #####:  216:    if (ECMA_IS_VALUE_ERROR (next_seg))
        -:  217:    {
    #####:  218:      goto builder_cleanup;
        -:  219:    }
        -:  220:
    #####:  221:    ecma_string_t *next_seg_srt_p = ecma_op_to_string (next_seg);
        -:  222:
        -:  223:    /* 12.c */
    #####:  224:    if (JERRY_UNLIKELY (next_seg_srt_p == NULL))
        -:  225:    {
    #####:  226:      ecma_free_value (next_seg);
    #####:  227:      goto builder_cleanup;
        -:  228:    }
        -:  229:
        -:  230:    /* 12.d */
    #####:  231:    ecma_stringbuilder_append (&builder, next_seg_srt_p);
        -:  232:
    #####:  233:    ecma_deref_ecma_string (next_seg_srt_p);
    #####:  234:    ecma_free_value (next_seg);
        -:  235:
        -:  236:    /* 12.e */
    #####:  237:    if (next_index + 1 == literal_segments)
        -:  238:    {
    #####:  239:      ret_value = ecma_make_string_value (ecma_stringbuilder_finalize (&builder));
    #####:  240:      goto cleanup;
        -:  241:    }
        -:  242:
        -:  243:    /* 12.f-g */
    #####:  244:    if (next_index >= number_of_substitutions)
        -:  245:    {
    #####:  246:      next_index++;
    #####:  247:      continue;
        -:  248:    }
        -:  249:
        -:  250:    /* 12.h */
    #####:  251:    ecma_string_t *next_sub_p = ecma_op_to_string (substitutions[next_index]);
        -:  252:
        -:  253:    /* 12.i */
    #####:  254:    if (JERRY_UNLIKELY (next_sub_p == NULL))
        -:  255:    {
    #####:  256:      goto builder_cleanup;
        -:  257:    }
        -:  258:
        -:  259:    /* 12.j */
    #####:  260:    ecma_stringbuilder_append (&builder, next_sub_p);
    #####:  261:    ecma_deref_ecma_string (next_sub_p);
        -:  262:
        -:  263:    /* 12.k */
    #####:  264:    next_index++;
        -:  265:  }
        -:  266:
    #####:  267:builder_cleanup:
    #####:  268:  ecma_stringbuilder_destroy (&builder);
        -:  269:
    #####:  270:cleanup:
    #####:  271:  ecma_deref_object (raw_obj_p);
    #####:  272:  ecma_free_value (raw);
        -:  273:
    #####:  274:  return ret_value;
        -:  275:} /* ecma_builtin_string_object_raw */
        -:  276:
        -:  277:/**
        -:  278: * The String object's 'fromCodePoint' routine
        -:  279: *
        -:  280: * See also:
        -:  281: *          ECMA-262 v6, 21.1.2.2
        -:  282: *
        -:  283: * @return ecma value
        -:  284: *         Returned value must be freed with ecma_free_value.
        -:  285: */
        -:  286:static ecma_value_t
    #####:  287:ecma_builtin_string_object_from_code_point (const ecma_value_t args[], /**< arguments list */
        -:  288:                                            uint32_t args_number) /**< number of arguments */
        -:  289:{
    #####:  290:  if (args_number == 0)
        -:  291:  {
    #####:  292:    return ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY);
        -:  293:  }
        -:  294:
    #####:  295:  ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
        -:  296:
    #####:  297:  for (uint32_t index = 0; index < args_number; index++)
        -:  298:  {
    #####:  299:    ecma_number_t to_number_num;
    #####:  300:    ecma_value_t to_number_value = ecma_op_to_number (args[index], &to_number_num);
        -:  301:
    #####:  302:    if (ECMA_IS_VALUE_ERROR (to_number_value))
        -:  303:    {
    #####:  304:      ecma_stringbuilder_destroy (&builder);
    #####:  305:      return to_number_value;
        -:  306:    }
        -:  307:
    #####:  308:    if (!ecma_op_is_integer (to_number_num))
        -:  309:    {
    #####:  310:      ecma_stringbuilder_destroy (&builder);
    #####:  311:      return ecma_raise_range_error ("Error: Invalid code point");
        -:  312:    }
        -:  313:
    #####:  314:    ecma_free_value (to_number_value);
        -:  315:
    #####:  316:    if (to_number_num < 0 || to_number_num > LIT_UNICODE_CODE_POINT_MAX)
        -:  317:    {
    #####:  318:      ecma_stringbuilder_destroy (&builder);
    #####:  319:      return ecma_raise_range_error (ECMA_ERR_MSG ("Invalid code point"));
        -:  320:    }
        -:  321:
    #####:  322:    lit_code_point_t code_point = (lit_code_point_t) to_number_num;
        -:  323:
    #####:  324:    ecma_char_t converted_cp[2];
    #####:  325:    uint8_t encoded_size = lit_utf16_encode_code_point (code_point, converted_cp);
        -:  326:
    #####:  327:    for (uint8_t i = 0; i < encoded_size; i++)
        -:  328:    {
    #####:  329:      ecma_stringbuilder_append_char (&builder, converted_cp[i]);
        -:  330:    }
        -:  331:  }
        -:  332:
    #####:  333:  ecma_string_t *ret_str_p = ecma_stringbuilder_finalize (&builder);
        -:  334:
    #####:  335:  return ecma_make_string_value (ret_str_p);
        -:  336:} /* ecma_builtin_string_object_from_code_point */
        -:  337:
        -:  338:#endif /* JERRY_ESNEXT */
        -:  339:
        -:  340:/**
        -:  341: * Handle calling [[Call]] of built-in String object
        -:  342: *
        -:  343: * See also:
        -:  344: *          ECMA-262 v6, 21.1.1.1
        -:  345: *
        -:  346: * @return ecma value
        -:  347: */
        -:  348:ecma_value_t
    #####:  349:ecma_builtin_string_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  350:                                   uint32_t arguments_list_len) /**< number of arguments */
        -:  351:{
    #####:  352:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  353:
    #####:  354:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -:  355:
        -:  356:  /* 1. */
    #####:  357:  if (arguments_list_len == 0)
        -:  358:  {
    #####:  359:    ret_value = ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY);
        -:  360:  }
        -:  361:#if JERRY_ESNEXT
        -:  362:  /* 2.a */
    #####:  363:  else if (ecma_is_value_symbol (arguments_list_p[0]))
        -:  364:  {
    #####:  365:    ret_value = ecma_get_symbol_descriptive_string (arguments_list_p[0]);
        -:  366:  }
        -:  367:#endif /* JERRY_ESNEXT */
        -:  368:  /* 2.b */
        -:  369:  else
        -:  370:  {
    #####:  371:    ecma_string_t *str_p = ecma_op_to_string (arguments_list_p[0]);
    #####:  372:    if (JERRY_UNLIKELY (str_p == NULL))
        -:  373:    {
    #####:  374:      return ECMA_VALUE_ERROR;
        -:  375:    }
        -:  376:
    #####:  377:    ret_value = ecma_make_string_value (str_p);
        -:  378:  }
        -:  379:
    #####:  380:  return ret_value;
        -:  381:} /* ecma_builtin_string_dispatch_call */
        -:  382:
        -:  383:/**
        -:  384: * Handle calling [[Construct]] of built-in String object
        -:  385: *
        -:  386: * @return ecma value
        -:  387: */
        -:  388:ecma_value_t
    #####:  389:ecma_builtin_string_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  390:                                        uint32_t arguments_list_len) /**< number of arguments */
        -:  391:{
    #####:  392:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  393:
    #####:  394:  return ecma_op_create_string_object (arguments_list_p, arguments_list_len);
        -:  395:} /* ecma_builtin_string_dispatch_construct */
        -:  396:
        -:  397:/**
        -:  398: * Dispatcher of the built-in's routines
        -:  399: *
        -:  400: * @return ecma value
        -:  401: *         Returned value must be freed with ecma_free_value.
        -:  402: */
        -:  403:ecma_value_t
    #####:  404:ecma_builtin_string_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  405:                                      ecma_value_t this_arg, /**< 'this' argument value */
        -:  406:                                      const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  407:                                                                              *   passed to routine */
        -:  408:                                      uint32_t arguments_number) /**< length of arguments' list */
        -:  409:{
        -:  410:  JERRY_UNUSED (this_arg);
        -:  411:
    #####:  412:  switch (builtin_routine_id)
        -:  413:  {
    #####:  414:    case  ECMA_BUILTIN_STRING_OBJECT_FROM_CHAR_CODE:
        -:  415:    {
    #####:  416:      return ecma_builtin_string_object_from_char_code (arguments_list_p, arguments_number);
        -:  417:    }
        -:  418:#if JERRY_ESNEXT
    #####:  419:    case ECMA_BUILTIN_STRING_OBJECT_FROM_CODE_POINT:
        -:  420:    {
    #####:  421:      return ecma_builtin_string_object_from_code_point (arguments_list_p, arguments_number);
        -:  422:    }
    #####:  423:    case ECMA_BUILTIN_STRING_OBJECT_RAW:
        -:  424:    {
    #####:  425:      return ecma_builtin_string_object_raw (arguments_list_p, arguments_number);
        -:  426:    }
        -:  427:#endif /* JERRY_ESNEXT */
    #####:  428:    default:
        -:  429:    {
    #####:  430:      JERRY_UNREACHABLE ();
        -:  431:    }
        -:  432:  }
        -:  433:} /* ecma_builtin_string_dispatch_routine */
        -:  434:
        -:  435:/**
        -:  436: * @}
        -:  437: * @}
        -:  438: * @}
        -:  439: */
        -:  440:
        -:  441:#endif /* JERRY_BUILTIN_STRING */
