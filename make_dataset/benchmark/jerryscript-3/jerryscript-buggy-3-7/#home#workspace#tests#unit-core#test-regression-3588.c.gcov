        -:    0:Source:/home/workspace/tests/unit-core/test-regression-3588.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:/**
        -:   22: * Empty constructor
        -:   23: */
        -:   24:static jerry_value_t
    #####:   25:construct_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   26:                   const jerry_value_t args_p[], /**< function arguments */
        -:   27:                   const jerry_length_t args_cnt) /**< number of function arguments */
        -:   28:{
        -:   29:  JERRY_UNUSED (call_info_p);
        -:   30:
    #####:   31:  TEST_ASSERT (args_cnt == 1);
    #####:   32:  TEST_ASSERT (jerry_get_number_value (args_p[0]) == 1.0);
        -:   33:
    #####:   34:  return jerry_create_undefined ();
        -:   35:} /* construct_handler */
        -:   36:
        -:   37:int
    #####:   38:main (void)
        -:   39:{
        -:   40:  /* Test JERRY_FEATURE_SYMBOL feature as it is a must-have in ES.next */
    #####:   41:  if (!jerry_is_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:   42:  {
    #####:   43:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Skipping test, ES.next support is disabled.\n");
    #####:   44:    return 0;
        -:   45:  }
        -:   46:
    #####:   47:  jerry_init (JERRY_INIT_EMPTY);
        -:   48:
        -:   49:  {
    #####:   50:    jerry_value_t global_obj_val = jerry_get_global_object ();
        -:   51:
    #####:   52:    jerry_value_t function_val = jerry_create_external_function (construct_handler);
    #####:   53:    jerry_value_t function_name_val = jerry_create_string ((const jerry_char_t *) "Demo");
    #####:   54:    jerry_value_t result_val = jerry_set_property (global_obj_val, function_name_val, function_val);
    #####:   55:    TEST_ASSERT (!jerry_value_is_error (result_val));
    #####:   56:    TEST_ASSERT (jerry_value_is_true (result_val));
    #####:   57:    jerry_release_value (result_val);
    #####:   58:    jerry_release_value (function_name_val);
    #####:   59:    jerry_release_value (global_obj_val);
    #####:   60:    jerry_release_value (function_val);
        -:   61:  }
        -:   62:
        -:   63:  {
        -:   64:    static const jerry_char_t test_source[] = TEST_STRING_LITERAL (
        -:   65:        "class Sub1 extends Demo { constructor () { super (1); } };"
        -:   66:        "new Sub1 ()"
        -:   67:    );
        -:   68:
    #####:   69:    jerry_value_t parsed_code_val = jerry_parse (test_source,
        -:   70:                                                 sizeof (test_source) - 1,
        -:   71:                                                 NULL);
    #####:   72:    TEST_ASSERT (!jerry_value_is_error (parsed_code_val));
        -:   73:
    #####:   74:    jerry_value_t result = jerry_run (parsed_code_val);
    #####:   75:    TEST_ASSERT (!jerry_value_is_error (result));
        -:   76:
    #####:   77:    jerry_release_value (result);
    #####:   78:    jerry_release_value (parsed_code_val);
        -:   79:  }
        -:   80:
        -:   81:  {
        -:   82:    static const jerry_char_t test_source[] = TEST_STRING_LITERAL (
        -:   83:      "class Sub2 extends Demo { };"
        -:   84:      "new Sub2 (1)"
        -:   85:    );
        -:   86:
    #####:   87:    jerry_value_t parsed_code_val = jerry_parse (test_source,
        -:   88:                                                 sizeof (test_source) - 1,
        -:   89:                                                 NULL);
    #####:   90:    TEST_ASSERT (!jerry_value_is_error (parsed_code_val));
        -:   91:
    #####:   92:    jerry_value_t result = jerry_run (parsed_code_val);
    #####:   93:    TEST_ASSERT (!jerry_value_is_error (result));
        -:   94:
    #####:   95:    jerry_release_value (result);
    #####:   96:    jerry_release_value (parsed_code_val);
        -:   97:  }
        -:   98:
    #####:   99:  jerry_cleanup ();
    #####:  100:  return 0;
        -:  101:} /* main */
