        -:    0:Source:/home/workspace/jerry-core/ecma/base/ecma-helpers-collection.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-conversion.h"
        -:   18:#include "ecma-gc.h"
        -:   19:#include "ecma-globals.h"
        -:   20:#include "ecma-helpers.h"
        -:   21:#include "jrt.h"
        -:   22:
        -:   23:/** \addtogroup ecma ECMA
        -:   24: * @{
        -:   25: *
        -:   26: * \addtogroup ecmahelpers Helpers for operations with ECMA data types
        -:   27: * @{
        -:   28: */
        -:   29:
        -:   30:/**
        -:   31: * Allocate a collection of ecma values.
        -:   32: *
        -:   33: * @return pointer to the collection
        -:   34: */
        -:   35:ecma_collection_t *
    #####:   36:ecma_new_collection (void)
        -:   37:{
        -:   38:  ecma_collection_t *collection_p;
    #####:   39:  collection_p = (ecma_collection_t *) jmem_heap_alloc_block (sizeof (ecma_collection_t));
        -:   40:
    #####:   41:  collection_p->item_count = 0;
    #####:   42:  collection_p->capacity = ECMA_COLLECTION_INITIAL_CAPACITY;
    #####:   43:  const uint32_t size = ECMA_COLLECTION_ALLOCATED_SIZE (ECMA_COLLECTION_INITIAL_CAPACITY);
    #####:   44:  collection_p->buffer_p = (ecma_value_t *) jmem_heap_alloc_block (size);
        -:   45:
    #####:   46:  return collection_p;
        -:   47:} /* ecma_new_collection */
        -:   48:
        -:   49:/**
        -:   50: * Deallocate a collection of ecma values without freeing it's values
        -:   51: */
        -:   52:extern inline void JERRY_ATTR_ALWAYS_INLINE
    #####:   53:ecma_collection_destroy (ecma_collection_t *collection_p) /**< value collection */
        -:   54:{
    #####:   55:  JERRY_ASSERT (collection_p != NULL);
        -:   56:
    #####:   57:  jmem_heap_free_block (collection_p->buffer_p, ECMA_COLLECTION_ALLOCATED_SIZE (collection_p->capacity));
    #####:   58:  jmem_heap_free_block (collection_p, sizeof (ecma_collection_t));
    #####:   59:} /* ecma_collection_destroy */
        -:   60:
        -:   61:/**
        -:   62: * Free the object collection elements and deallocate the collection
        -:   63: */
        -:   64:void
    #####:   65:ecma_collection_free_objects (ecma_collection_t *collection_p) /**< value collection */
        -:   66:{
    #####:   67:  JERRY_ASSERT (collection_p != NULL);
        -:   68:
    #####:   69:  ecma_value_t *buffer_p = collection_p->buffer_p;
        -:   70:
    #####:   71:  for (uint32_t i = 0; i < collection_p->item_count; i++)
        -:   72:  {
    #####:   73:    if (ecma_is_value_object (buffer_p[i]))
        -:   74:    {
    #####:   75:      ecma_deref_object (ecma_get_object_from_value (buffer_p[i]));
        -:   76:    }
        -:   77:  }
        -:   78:
    #####:   79:  ecma_collection_destroy (collection_p);
    #####:   80:} /* ecma_collection_free_objects */
        -:   81:
        -:   82:#if JERRY_ESNEXT
        -:   83:
        -:   84:/**
        -:   85: * Free the template literal objects and deallocate the collection
        -:   86: */
        -:   87:void
    #####:   88:ecma_collection_free_template_literal (ecma_collection_t *collection_p) /**< value collection */
        -:   89:{
    #####:   90:  for (uint32_t i = 0; i < collection_p->item_count; i++)
        -:   91:  {
    #####:   92:    ecma_object_t *object_p = ecma_get_object_from_value (collection_p->buffer_p[i]);
        -:   93:
    #####:   94:    JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_ARRAY);
        -:   95:
    #####:   96:    ecma_extended_object_t *array_object_p = (ecma_extended_object_t *) object_p;
        -:   97:
    #####:   98:    JERRY_ASSERT (array_object_p->u.array.length_prop_and_hole_count & ECMA_ARRAY_TEMPLATE_LITERAL);
    #####:   99:    array_object_p->u.array.length_prop_and_hole_count &= (uint32_t) ~ECMA_ARRAY_TEMPLATE_LITERAL;
        -:  100:
        -:  101:    ecma_property_value_t *property_value_p;
        -:  102:
    #####:  103:    property_value_p = ecma_get_named_data_property (object_p, ecma_get_magic_string (LIT_MAGIC_STRING_RAW));
    #####:  104:    ecma_object_t *raw_object_p = ecma_get_object_from_value (property_value_p->value);
        -:  105:
    #####:  106:    JERRY_ASSERT (ecma_get_object_type (raw_object_p) == ECMA_OBJECT_TYPE_ARRAY);
        -:  107:
    #####:  108:    array_object_p = (ecma_extended_object_t *) raw_object_p;
        -:  109:
    #####:  110:    JERRY_ASSERT (array_object_p->u.array.length_prop_and_hole_count & ECMA_ARRAY_TEMPLATE_LITERAL);
    #####:  111:    array_object_p->u.array.length_prop_and_hole_count &= (uint32_t) ~ECMA_ARRAY_TEMPLATE_LITERAL;
        -:  112:
    #####:  113:    ecma_deref_object (raw_object_p);
    #####:  114:    ecma_deref_object (object_p);
        -:  115:  }
        -:  116:
    #####:  117:  ecma_collection_destroy (collection_p);
    #####:  118:} /* ecma_collection_free_template_literal */
        -:  119:
        -:  120:#endif /* JERRY_ESNEXT */
        -:  121:
        -:  122:/**
        -:  123: * Free the non-object collection elements and deallocate the collection
        -:  124: */
        -:  125:void
    #####:  126:ecma_collection_free_if_not_object (ecma_collection_t *collection_p) /**< value collection */
        -:  127:{
    #####:  128:  JERRY_ASSERT (collection_p != NULL);
        -:  129:
    #####:  130:  ecma_value_t *buffer_p = collection_p->buffer_p;
        -:  131:
    #####:  132:  for (uint32_t i = 0; i < collection_p->item_count; i++)
        -:  133:  {
    #####:  134:    ecma_free_value_if_not_object (buffer_p[i]);
        -:  135:  }
        -:  136:
    #####:  137:  ecma_collection_destroy (collection_p);
    #####:  138:} /* ecma_collection_free_if_not_object */
        -:  139:
        -:  140:/**
        -:  141: * Free the collection elements and deallocate the collection
        -:  142: */
        -:  143:void
    #####:  144:ecma_collection_free (ecma_collection_t *collection_p) /**< value collection */
        -:  145:{
    #####:  146:  JERRY_ASSERT (collection_p != NULL);
        -:  147:
    #####:  148:  ecma_value_t *buffer_p = collection_p->buffer_p;
        -:  149:
    #####:  150:  for (uint32_t i = 0; i < collection_p->item_count; i++)
        -:  151:  {
    #####:  152:    ecma_free_value (buffer_p[i]);
        -:  153:  }
        -:  154:
    #####:  155:  ecma_collection_destroy (collection_p);
    #####:  156:} /* ecma_collection_free */
        -:  157:
        -:  158:/**
        -:  159: * Append new value to ecma values collection
        -:  160: *
        -:  161: * Note: The reference count of the values are not increased
        -:  162: */
        -:  163:void
    #####:  164:ecma_collection_push_back (ecma_collection_t *collection_p, /**< value collection */
        -:  165:                           ecma_value_t value) /**< ecma value to append */
        -:  166:{
    #####:  167:  JERRY_ASSERT (collection_p != NULL);
        -:  168:
    #####:  169:  ecma_value_t *buffer_p = collection_p->buffer_p;
        -:  170:
    #####:  171:  if (JERRY_LIKELY (collection_p->item_count < collection_p->capacity))
        -:  172:  {
    #####:  173:    buffer_p[collection_p->item_count++] = value;
    #####:  174:    return;
        -:  175:  }
        -:  176:
    #####:  177:  const uint32_t new_capacity = collection_p->capacity + ECMA_COLLECTION_GROW_FACTOR;
    #####:  178:  const uint32_t old_size = ECMA_COLLECTION_ALLOCATED_SIZE (collection_p->capacity);
    #####:  179:  const uint32_t new_size = ECMA_COLLECTION_ALLOCATED_SIZE (new_capacity);
        -:  180:
    #####:  181:  buffer_p = jmem_heap_realloc_block (buffer_p, old_size, new_size);
    #####:  182:  buffer_p[collection_p->item_count++] = value;
    #####:  183:  collection_p->capacity = new_capacity;
        -:  184:
    #####:  185:  collection_p->buffer_p = buffer_p;
        -:  186:} /* ecma_collection_push_back */
        -:  187:
        -:  188:/**
        -:  189: * Reserve space for the given amount of ecma_values in the collection
        -:  190: */
        -:  191:void
    #####:  192:ecma_collection_reserve (ecma_collection_t *collection_p, /**< value collection */
        -:  193:                         uint32_t count) /**< number of ecma values to reserve */
        -:  194:{
    #####:  195:  JERRY_ASSERT (collection_p != NULL);
    #####:  196:  JERRY_ASSERT (UINT32_MAX - count > collection_p->capacity);
        -:  197:
    #####:  198:  const uint32_t new_capacity = collection_p->capacity + count;
    #####:  199:  const uint32_t old_size = ECMA_COLLECTION_ALLOCATED_SIZE (collection_p->capacity);
    #####:  200:  const uint32_t new_size = ECMA_COLLECTION_ALLOCATED_SIZE (new_capacity);
        -:  201:
    #####:  202:  ecma_value_t *buffer_p = collection_p->buffer_p;
    #####:  203:  buffer_p = jmem_heap_realloc_block (buffer_p, old_size, new_size);
        -:  204:
    #####:  205:  collection_p->capacity = new_capacity;
    #####:  206:  collection_p->buffer_p = buffer_p;
    #####:  207:} /* ecma_collection_reserve */
        -:  208:
        -:  209:/**
        -:  210: * Append a list of values to the end of the collection
        -:  211: */
        -:  212:void
    #####:  213:ecma_collection_append (ecma_collection_t *collection_p, /**< value collection */
        -:  214:                        const ecma_value_t *buffer_p, /**< values to append */
        -:  215:                        uint32_t count) /**< number of ecma values to append */
        -:  216:{
    #####:  217:  JERRY_ASSERT (collection_p != NULL);
    #####:  218:  JERRY_ASSERT (collection_p->capacity >= collection_p->item_count);
        -:  219:
    #####:  220:  uint32_t free_count = collection_p->capacity - collection_p->item_count;
        -:  221:
    #####:  222:  if (free_count < count)
        -:  223:  {
    #####:  224:    ecma_collection_reserve (collection_p, count - free_count);
        -:  225:  }
        -:  226:
    #####:  227:  memcpy (collection_p->buffer_p + collection_p->item_count, buffer_p, count * sizeof (ecma_value_t));
    #####:  228:  collection_p->item_count += count;
    #####:  229:} /* ecma_collection_append */
        -:  230:
        -:  231:/**
        -:  232: * Helper function to check if a given collection have duplicated properties or not
        -:  233: *
        -:  234: * @return true - if there are duplicated properties in the collection
        -:  235: *         false - otherwise
        -:  236: */
        -:  237:bool
    #####:  238:ecma_collection_check_duplicated_entries (ecma_collection_t *collection_p) /**< prop name collection */
        -:  239:{
    #####:  240:  if (collection_p->item_count == 0)
        -:  241:  {
    #####:  242:    return false;
        -:  243:  }
        -:  244:
    #####:  245:  ecma_value_t *buffer_p = collection_p->buffer_p;
        -:  246:
    #####:  247:  for (uint32_t i = 0; i < collection_p->item_count - 1; i++)
        -:  248:  {
    #####:  249:    ecma_string_t *current_name_p = ecma_get_prop_name_from_value (buffer_p[i]);
        -:  250:
    #####:  251:    for (uint32_t j = i + 1; j < collection_p->item_count; j++)
        -:  252:    {
    #####:  253:      if (ecma_compare_ecma_strings (current_name_p, ecma_get_prop_name_from_value (buffer_p[j])))
        -:  254:      {
    #####:  255:        return true;
        -:  256:      }
        -:  257:    }
        -:  258:  }
        -:  259:
    #####:  260:  return false;
        -:  261:} /* ecma_collection_check_duplicated_entries */
        -:  262:
        -:  263:/**
        -:  264: * Check the string value existance in the collection.
        -:  265: *
        -:  266: * Used by:
        -:  267: *         - ecma_builtin_json_stringify step 4.b.ii.5
        -:  268: *         - ecma_op_object_enumerate
        -:  269: *
        -:  270: * @return true, if the string is already in the collection.
        -:  271: */
        -:  272:bool
    #####:  273:ecma_collection_has_string_value (ecma_collection_t *collection_p, /**< collection */
        -:  274:                                  ecma_string_t *string_p) /**< string */
        -:  275:{
    #####:  276:  ecma_value_t *buffer_p = collection_p->buffer_p;
        -:  277:
    #####:  278:  for (uint32_t i = 0; i < collection_p->item_count; i++)
        -:  279:  {
    #####:  280:    ecma_string_t *current_p = ecma_get_string_from_value (buffer_p[i]);
        -:  281:
    #####:  282:    if (ecma_compare_ecma_strings (current_p, string_p))
        -:  283:    {
    #####:  284:      return true;
        -:  285:    }
        -:  286:  }
        -:  287:
    #####:  288:  return false;
        -:  289:} /* ecma_collection_has_string_value */
        -:  290:
        -:  291:/**
        -:  292: * Initial capacity of an ecma-collection
        -:  293: */
        -:  294:#define ECMA_COMPACT_COLLECTION_GROWTH 8
        -:  295:
        -:  296:/**
        -:  297: * Set the size of the compact collection
        -:  298: */
        -:  299:#define ECMA_COMPACT_COLLECTION_SET_SIZE(compact_collection_p, item_count, unused_items) \
        -:  300:  ((compact_collection_p)[0] = (((item_count) << ECMA_COMPACT_COLLECTION_SIZE_SHIFT) | (unused_items)))
        -:  301:
        -:  302:/**
        -:  303: * Set the size of the compact collection
        -:  304: */
        -:  305:#define ECMA_COMPACT_COLLECTION_GET_UNUSED_ITEM_COUNT(compact_collection_p) \
        -:  306:  ((compact_collection_p)[0] & ((1 << ECMA_COMPACT_COLLECTION_SIZE_SHIFT) - 1))
        -:  307:
        -:  308:/**
        -:  309: * Allocate a compact collection of ecma values
        -:  310: *
        -:  311: * @return pointer to the compact collection
        -:  312: */
        -:  313:ecma_value_t *
    #####:  314:ecma_new_compact_collection (void)
        -:  315:{
    #####:  316:  size_t size = (ECMA_COMPACT_COLLECTION_GROWTH / 2) * sizeof (ecma_value_t);
    #####:  317:  ecma_value_t *compact_collection_p = (ecma_value_t *) jmem_heap_alloc_block (size);
        -:  318:
    #####:  319:  ECMA_COMPACT_COLLECTION_SET_SIZE (compact_collection_p,
        -:  320:                                    ECMA_COMPACT_COLLECTION_GROWTH / 2,
        -:  321:                                    (ECMA_COMPACT_COLLECTION_GROWTH / 2) - 1);
    #####:  322:  return compact_collection_p;
        -:  323:} /* ecma_new_compact_collection */
        -:  324:
        -:  325:/**
        -:  326: * Append a value to the compact collection
        -:  327: *
        -:  328: * @return updated pointer to the compact collection
        -:  329: */
        -:  330:ecma_value_t *
    #####:  331:ecma_compact_collection_push_back (ecma_value_t *compact_collection_p, /**< compact collection */
        -:  332:                                   ecma_value_t value) /**< ecma value to append */
        -:  333:{
    #####:  334:  ecma_value_t size = ECMA_COMPACT_COLLECTION_GET_SIZE (compact_collection_p);
    #####:  335:  ecma_value_t unused_items = ECMA_COMPACT_COLLECTION_GET_UNUSED_ITEM_COUNT (compact_collection_p);
        -:  336:
    #####:  337:  if (unused_items > 0)
        -:  338:  {
    #####:  339:    compact_collection_p[size - unused_items] = value;
    #####:  340:    (*compact_collection_p)--;
    #####:  341:    return compact_collection_p;
        -:  342:  }
        -:  343:
    #####:  344:  if (size == ECMA_COMPACT_COLLECTION_GROWTH / 2)
        -:  345:  {
    #####:  346:    size_t old_size = (ECMA_COMPACT_COLLECTION_GROWTH / 2) * sizeof (ecma_value_t);
    #####:  347:    size_t new_size = ECMA_COMPACT_COLLECTION_GROWTH * sizeof (ecma_value_t);
    #####:  348:    compact_collection_p = jmem_heap_realloc_block (compact_collection_p, old_size, new_size);
        -:  349:
    #####:  350:    compact_collection_p[ECMA_COMPACT_COLLECTION_GROWTH / 2] = value;
        -:  351:
    #####:  352:    ECMA_COMPACT_COLLECTION_SET_SIZE (compact_collection_p,
        -:  353:                                      ECMA_COMPACT_COLLECTION_GROWTH,
        -:  354:                                      (ECMA_COMPACT_COLLECTION_GROWTH / 2) - 1);
    #####:  355:    return compact_collection_p;
        -:  356:  }
        -:  357:
    #####:  358:  size_t old_size = size * sizeof (ecma_value_t);
    #####:  359:  size_t new_size = old_size + (ECMA_COMPACT_COLLECTION_GROWTH * sizeof (ecma_value_t));
        -:  360:
    #####:  361:  compact_collection_p = jmem_heap_realloc_block (compact_collection_p, old_size, new_size);
    #####:  362:  compact_collection_p[size] = value;
        -:  363:
    #####:  364:  ECMA_COMPACT_COLLECTION_SET_SIZE (compact_collection_p,
        -:  365:                                    size + ECMA_COMPACT_COLLECTION_GROWTH,
        -:  366:                                    ECMA_COMPACT_COLLECTION_GROWTH - 1);
    #####:  367:  return compact_collection_p;
        -:  368:} /* ecma_compact_collection_push_back */
        -:  369:
        -:  370:/**
        -:  371: * Discard the unused elements of a compact collection
        -:  372: *
        -:  373: * Note:
        -:  374: *     further items should not be added after this call
        -:  375: *
        -:  376: * @return updated pointer to the compact collection
        -:  377: */
        -:  378:ecma_value_t *
    #####:  379:ecma_compact_collection_shrink (ecma_value_t *compact_collection_p) /**< compact collection */
        -:  380:{
    #####:  381:  ecma_value_t unused_items = ECMA_COMPACT_COLLECTION_GET_UNUSED_ITEM_COUNT (compact_collection_p);
        -:  382:
    #####:  383:  if (unused_items == 0)
        -:  384:  {
    #####:  385:    return compact_collection_p;
        -:  386:  }
        -:  387:
    #####:  388:  ecma_value_t size = ECMA_COMPACT_COLLECTION_GET_SIZE (compact_collection_p);
        -:  389:
    #####:  390:  size_t old_size = size * sizeof (ecma_value_t);
    #####:  391:  size_t new_size = (size - unused_items) * sizeof (ecma_value_t);
        -:  392:
    #####:  393:  compact_collection_p = jmem_heap_realloc_block (compact_collection_p, old_size, new_size);
        -:  394:
    #####:  395:  ECMA_COMPACT_COLLECTION_SET_SIZE (compact_collection_p, size - unused_items, 0);
    #####:  396:  return compact_collection_p;
        -:  397:} /* ecma_compact_collection_shrink */
        -:  398:
        -:  399:/**
        -:  400: * Free a compact collection
        -:  401: */
        -:  402:void
    #####:  403:ecma_compact_collection_free (ecma_value_t *compact_collection_p) /**< compact collection */
        -:  404:{
    #####:  405:  ecma_value_t size = ECMA_COMPACT_COLLECTION_GET_SIZE (compact_collection_p);
    #####:  406:  ecma_value_t unused_items = ECMA_COMPACT_COLLECTION_GET_UNUSED_ITEM_COUNT (compact_collection_p);
        -:  407:
    #####:  408:  ecma_value_t *end_p = compact_collection_p + size - unused_items;
    #####:  409:  ecma_value_t *current_p = compact_collection_p + 1;
        -:  410:
    #####:  411:  while (current_p < end_p)
        -:  412:  {
    #####:  413:    ecma_free_value (*current_p++);
        -:  414:  }
        -:  415:
    #####:  416:  jmem_heap_free_block (compact_collection_p, size * sizeof (ecma_value_t));
    #####:  417:} /* ecma_compact_collection_free */
        -:  418:
        -:  419:/**
        -:  420: * @}
        -:  421: * @}
        -:  422: */
