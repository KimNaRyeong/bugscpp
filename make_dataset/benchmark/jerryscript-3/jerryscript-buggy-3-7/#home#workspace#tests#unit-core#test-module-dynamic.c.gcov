        -:    0:Source:/home/workspace/tests/unit-core/test-module-dynamic.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static int mode = 0;
        -:   22:static jerry_value_t global_user_value;
        -:   23:
        -:   24:static jerry_value_t
    #####:   25:global_assert (const jerry_call_info_t *call_info_p, /**< call information */
        -:   26:               const jerry_value_t args_p[], /**< arguments list */
        -:   27:               const jerry_length_t args_cnt) /**< arguments length */
        -:   28:{
        -:   29:  JERRY_UNUSED (call_info_p);
        -:   30:
    #####:   31:  TEST_ASSERT (args_cnt == 1 && jerry_value_is_true (args_p[0]));
    #####:   32:  return jerry_create_boolean (true);
        -:   33:} /* global_assert */
        -:   34:
        -:   35:static void
    #####:   36:register_assert (void)
        -:   37:{
    #####:   38:  jerry_value_t global_object_value = jerry_get_global_object ();
        -:   39:
    #####:   40:  jerry_value_t function_value = jerry_create_external_function (global_assert);
    #####:   41:  jerry_value_t function_name_value = jerry_create_string ((const jerry_char_t *) "assert");
    #####:   42:  jerry_value_t result_value = jerry_set_property (global_object_value, function_name_value, function_value);
        -:   43:
    #####:   44:  jerry_release_value (function_name_value);
    #####:   45:  jerry_release_value (function_value);
    #####:   46:  jerry_release_value (global_object_value);
        -:   47:
    #####:   48:  TEST_ASSERT (jerry_value_is_true (result_value));
    #####:   49:  jerry_release_value (result_value);
    #####:   50:} /* register_assert */
        -:   51:
        -:   52:static void
    #####:   53:compare_specifier (jerry_value_t specifier, /* string value */
        -:   54:                   int id) /* module id */
        -:   55:{
    #####:   56:  jerry_char_t string[] = "XX_module.mjs";
        -:   57:
    #####:   58:  TEST_ASSERT (id >= 1 && id <= 99 && string[0] == 'X' && string[1] == 'X');
        -:   59:
    #####:   60:  string[0] = (jerry_char_t) ((id / 10) + '0');
    #####:   61:  string[1] = (jerry_char_t) ((id % 10) + '0');
        -:   62:
    #####:   63:  jerry_size_t length = (jerry_size_t) (sizeof (string) - 1);
        -:   64:  jerry_char_t buffer[sizeof (string) - 1];
        -:   65:
    #####:   66:  TEST_ASSERT (jerry_value_is_string (specifier));
    #####:   67:  TEST_ASSERT (jerry_get_string_size (specifier) == length);
        -:   68:
    #####:   69:  TEST_ASSERT (jerry_string_to_char_buffer (specifier, buffer, length) == length);
    #####:   70:  TEST_ASSERT (memcmp (buffer, string, length) == 0);
    #####:   71:} /* compare_specifier */
        -:   72:
        -:   73:static jerry_value_t
    #####:   74:module_import_callback (const jerry_value_t specifier, /* string value */
        -:   75:                        const jerry_value_t user_value, /* user value assigned to the script */
        -:   76:                        void *user_p) /* user pointer */
        -:   77:{
    #####:   78:  TEST_ASSERT (user_p == (void *) &mode);
        -:   79:
    #####:   80:  if (mode != 3)
        -:   81:  {
    #####:   82:    jerry_value_t compare_value = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL,
        -:   83:                                                          user_value,
        -:   84:                                                          global_user_value);
        -:   85:
    #####:   86:    TEST_ASSERT (jerry_value_is_true (compare_value));
    #####:   87:    jerry_release_value (compare_value);
        -:   88:  }
        -:   89:
    #####:   90:  switch (mode)
        -:   91:  {
    #####:   92:    case 0:
        -:   93:    {
    #####:   94:      compare_specifier (specifier, 1);
    #####:   95:      return jerry_create_error (JERRY_ERROR_RANGE, (const jerry_char_t *) "Err01");
        -:   96:    }
    #####:   97:    case 1:
        -:   98:    {
    #####:   99:      compare_specifier (specifier, 2);
    #####:  100:      return jerry_create_null ();
        -:  101:    }
    #####:  102:    case 2:
        -:  103:    {
    #####:  104:      compare_specifier (specifier, 3);
        -:  105:
    #####:  106:      jerry_value_t promise_value = jerry_create_promise ();
        -:  107:      /* Normally this should be a namespace object. */
    #####:  108:      jerry_value_t object_value = jerry_create_object ();
    #####:  109:      jerry_resolve_or_reject_promise (promise_value, object_value, true);
    #####:  110:      jerry_release_value (object_value);
    #####:  111:      return promise_value;
        -:  112:    }
    #####:  113:    case 3:
        -:  114:    {
    #####:  115:      compare_specifier (specifier, 28);
        -:  116:
    #####:  117:      TEST_ASSERT (jerry_value_is_object (user_value));
    #####:  118:      jerry_value_t property_name = jerry_create_string ((const jerry_char_t *) "MyProp1");
    #####:  119:      jerry_value_t result = jerry_get_property (user_value, property_name);
    #####:  120:      TEST_ASSERT (jerry_value_is_number (result) && jerry_get_number_value (result) == 3.5);
    #####:  121:      jerry_release_value (result);
    #####:  122:      jerry_release_value (property_name);
    #####:  123:      return jerry_create_undefined ();
        -:  124:    }
        -:  125:  }
        -:  126:
    #####:  127:  TEST_ASSERT (mode == 4 || mode == 5);
        -:  128:
        -:  129:  jerry_parse_options_t parse_options;
    #####:  130:  parse_options.options = JERRY_PARSE_MODULE;
        -:  131:
    #####:  132:  jerry_value_t parse_result_value = jerry_parse ((const jerry_char_t *) "", 0, &parse_options);
    #####:  133:  TEST_ASSERT (!jerry_value_is_error (parse_result_value));
        -:  134:
    #####:  135:  jerry_value_t result_value = jerry_module_link (parse_result_value, NULL, NULL);
    #####:  136:  TEST_ASSERT (!jerry_value_is_error (result_value));
    #####:  137:  jerry_release_value (result_value);
        -:  138:
    #####:  139:  if (mode == 4)
        -:  140:  {
    #####:  141:    result_value = jerry_module_evaluate (parse_result_value);
    #####:  142:    TEST_ASSERT (!jerry_value_is_error (result_value));
    #####:  143:    jerry_release_value (result_value);
        -:  144:  }
        -:  145:
        -:  146:  return parse_result_value;
        -:  147:} /* module_import_callback */
        -:  148:
        -:  149:static void
    #####:  150:run_script (const char *source_p, /* source code */
        -:  151:            jerry_parse_options_t *parse_options_p, /* parse options */
        -:  152:            bool release_user_value) /* release user value */
        -:  153:{
        -:  154:  jerry_value_t parse_result_value;
        -:  155:
    #####:  156:  parse_result_value = jerry_parse ((const jerry_char_t *) source_p, strlen (source_p), parse_options_p);
    #####:  157:  TEST_ASSERT (!jerry_value_is_error (parse_result_value));
        -:  158:
    #####:  159:  if (release_user_value)
        -:  160:  {
    #####:  161:    jerry_release_value (parse_options_p->user_value);
    #####:  162:    jerry_gc (JERRY_GC_PRESSURE_HIGH);
        -:  163:  }
        -:  164:
        -:  165:  jerry_value_t result_value;
    #####:  166:  if (parse_options_p->options & JERRY_PARSE_MODULE)
        -:  167:  {
    #####:  168:    result_value = jerry_module_link (parse_result_value, NULL, NULL);
    #####:  169:    TEST_ASSERT (!jerry_value_is_error (result_value));
    #####:  170:    jerry_release_value (result_value);
        -:  171:
    #####:  172:    result_value = jerry_module_evaluate (parse_result_value);
        -:  173:  }
        -:  174:  else
        -:  175:  {
    #####:  176:    result_value = jerry_run (parse_result_value);
        -:  177:  }
        -:  178:
    #####:  179:  jerry_release_value (parse_result_value);
        -:  180:
    #####:  181:  TEST_ASSERT (!jerry_value_is_error (result_value));
    #####:  182:  jerry_release_value (result_value);
        -:  183:
    #####:  184:  result_value = jerry_run_all_enqueued_jobs ();
    #####:  185:  TEST_ASSERT (!jerry_value_is_error (result_value));
    #####:  186:  jerry_release_value (result_value);
    #####:  187:} /* run_script */
        -:  188:
        -:  189:int
    #####:  190:main (void)
        -:  191:{
    #####:  192:  jerry_init (JERRY_INIT_EMPTY);
        -:  193:
    #####:  194:  if (!jerry_is_feature_enabled (JERRY_FEATURE_MODULE))
        -:  195:  {
    #####:  196:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Module is disabled!\n");
    #####:  197:    jerry_cleanup ();
    #####:  198:    return 0;
        -:  199:  }
        -:  200:
    #####:  201:  register_assert ();
    #####:  202:  jerry_module_set_import_callback (module_import_callback, (void *) &mode);
        -:  203:
        -:  204:  jerry_parse_options_t parse_options;
    #####:  205:  parse_options.options = JERRY_PARSE_NO_OPTS;
        -:  206:
    #####:  207:  if (jerry_is_feature_enabled (JERRY_FEATURE_ERROR_MESSAGES))
        -:  208:  {
    #####:  209:    run_script ("var expected_message = 'Module cannot be instantiated'", &parse_options, false);
        -:  210:  }
        -:  211:  else
        -:  212:  {
    #####:  213:    run_script ("var expected_message = ''", &parse_options, false);
        -:  214:  }
        -:  215:
    #####:  216:  global_user_value = jerry_create_object ();
    #####:  217:  const char *source_p = TEST_STRING_LITERAL ("import('01_module.mjs').then(\n"
        -:  218:                                              "  function(resolve) { assert(false) },\n"
        -:  219:                                              "  function(reject) {\n"
        -:  220:                                              "    assert(reject instanceof RangeError\n"
        -:  221:                                              "           && reject.message === 'Err01')\n"
        -:  222:                                              "  }\n"
        -:  223:                                              ")");
        -:  224:
    #####:  225:  mode = 0;
    #####:  226:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  227:  parse_options.user_value = global_user_value;
    #####:  228:  run_script (source_p, &parse_options, false);
    #####:  229:  jerry_release_value (global_user_value);
        -:  230:
    #####:  231:  global_user_value = jerry_create_null ();
    #####:  232:  source_p = TEST_STRING_LITERAL ("var src = \"import('02_module.mjs').then(\\\n"
        -:  233:                                  "  function(resolve) { assert(false) },\\\n"
        -:  234:                                  "  function(reject) {\\\n"
        -:  235:                                  "    assert(reject instanceof RangeError\\\n"
        -:  236:                                  "           && reject.message === expected_message)\\\n"
        -:  237:                                  "  }\\\n"
        -:  238:                                  ")\"\n"
        -:  239:                                  "eval('eval(src)')");
        -:  240:
    #####:  241:  mode = 1;
    #####:  242:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  243:  parse_options.user_value = global_user_value;
    #####:  244:  run_script (source_p, &parse_options, false);
    #####:  245:  jerry_release_value (global_user_value);
        -:  246:
    #####:  247:  global_user_value = jerry_create_number (5.6);
    #####:  248:  source_p = TEST_STRING_LITERAL ("function f() {\n"
        -:  249:                                  "  return function () {\n"
        -:  250:                                  "    return import('03_module.mjs')\n"
        -:  251:                                  "  }\n"
        -:  252:                                  "}\n"
        -:  253:                                  "export var a = f()().then(\n"
        -:  254:                                  "  function(resolve) { assert(typeof resolve == 'object') },\n"
        -:  255:                                  "  function(reject) { assert(false) }\n"
        -:  256:                                  ")");
        -:  257:
    #####:  258:  mode = 2;
    #####:  259:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE | JERRY_PARSE_MODULE;
    #####:  260:  parse_options.user_value = global_user_value;
    #####:  261:  run_script (source_p, &parse_options, false);
    #####:  262:  jerry_release_value (global_user_value);
        -:  263:
    #####:  264:  global_user_value = jerry_create_string ((const jerry_char_t *) "Any string...");
    #####:  265:  source_p = TEST_STRING_LITERAL ("var src = \"import('02_module.mjs').then(\\\n"
        -:  266:                                  "  function(resolve) { assert(typeof resolve == 'object') },\\\n"
        -:  267:                                  "  function(reject) { assert(false) }\\\n"
        -:  268:                                  ")\"\n"
        -:  269:                                  "function f() {\n"
        -:  270:                                  "  eval('(function() { return eval(src) })()')\n"
        -:  271:                                  "}\n"
        -:  272:                                  "f()\n");
        -:  273:
    #####:  274:  for (int i = 0; i < 2; i++)
        -:  275:  {
    #####:  276:    mode = 3;
    #####:  277:    parse_options.options = JERRY_PARSE_HAS_USER_VALUE | (i == 1 ? JERRY_PARSE_MODULE : 0);
    #####:  278:    parse_options.user_value = jerry_create_object ();
    #####:  279:    jerry_value_t property_name = jerry_create_string ((const jerry_char_t *) "MyProp1");
    #####:  280:    jerry_value_t property_value = jerry_create_number (3.5);
    #####:  281:    jerry_value_t result = jerry_set_property (parse_options.user_value, property_name, property_value);
    #####:  282:    TEST_ASSERT (jerry_value_is_true (result));
    #####:  283:    jerry_release_value (result);
    #####:  284:    jerry_release_value (property_value);
    #####:  285:    jerry_release_value (property_name);
        -:  286:
    #####:  287:    source_p = TEST_STRING_LITERAL ("import('28_module.mjs')");
    #####:  288:    run_script (source_p, &parse_options, true);
        -:  289:  }
        -:  290:
    #####:  291:  mode = 4;
    #####:  292:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  293:  parse_options.user_value = global_user_value;
    #####:  294:  run_script (source_p, &parse_options, false);
    #####:  295:  jerry_release_value (global_user_value);
        -:  296:
    #####:  297:  global_user_value = jerry_create_external_function (global_assert);
    #####:  298:  source_p = TEST_STRING_LITERAL ("var src = \"import('02_module.mjs').then(\\\n"
        -:  299:                                  "  function(resolve) { assert(false) },\\\n"
        -:  300:                                  "  function(reject) {\\\n"
        -:  301:                                  "    assert(reject instanceof RangeError\\\n"
        -:  302:                                  "           && reject.message === expected_message)\\\n"
        -:  303:                                  "  }\\\n"
        -:  304:                                  ")\"\n"
        -:  305:                                  "export function f() {\n"
        -:  306:                                  "  eval('(function() { return eval(src) })()')\n"
        -:  307:                                  "}\n"
        -:  308:                                  "f()\n");
        -:  309:
    #####:  310:  mode = 5;
    #####:  311:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE | JERRY_PARSE_MODULE;
    #####:  312:  parse_options.user_value = global_user_value;
    #####:  313:  run_script (source_p, &parse_options, false);
    #####:  314:  jerry_release_value (global_user_value);
        -:  315:
    #####:  316:  jerry_cleanup ();
    #####:  317:  return 0;
        -:  318:} /* main */
