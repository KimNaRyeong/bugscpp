        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-eval.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtins.h"
        -:   17:#include "ecma-exceptions.h"
        -:   18:#include "ecma-eval.h"
        -:   19:#include "ecma-gc.h"
        -:   20:#include "ecma-globals.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:#include "ecma-lex-env.h"
        -:   23:#include "js-parser.h"
        -:   24:#include "vm.h"
        -:   25:#include "jcontext.h"
        -:   26:
        -:   27:/** \addtogroup ecma ECMA
        -:   28: * @{
        -:   29: *
        -:   30: * \addtogroup eval eval
        -:   31: * @{
        -:   32: */
        -:   33:
        -:   34:/**
        -:   35: * Perform 'eval' with code stored in ecma-string
        -:   36: *
        -:   37: * See also:
        -:   38: *          ecma_op_eval_chars_buffer
        -:   39: *          ECMA-262 v5, 15.1.2.1 (steps 2 to 8)
        -:   40: *
        -:   41: * @return ecma value
        -:   42: */
        -:   43:ecma_value_t
    #####:   44:ecma_op_eval (ecma_value_t source_code, /**< source code */
        -:   45:              uint32_t parse_opts) /**< ecma_parse_opts_t option bits */
        -:   46:{
    #####:   47:  JERRY_ASSERT (ecma_is_value_string (source_code));
        -:   48:
    #####:   49:  if (ecma_is_value_magic_string (source_code, LIT_MAGIC_STRING__EMPTY))
        -:   50:  {
    #####:   51:    return ECMA_VALUE_UNDEFINED;
        -:   52:  }
        -:   53:
    #####:   54:  return ecma_op_eval_chars_buffer ((void *) &source_code,
        -:   55:                                    parse_opts | ECMA_PARSE_HAS_SOURCE_VALUE);
        -:   56:} /* ecma_op_eval */
        -:   57:
        -:   58:/**
        -:   59: * Perform 'eval' with code stored in continuous character buffer
        -:   60: *
        -:   61: * See also:
        -:   62: *          ecma_op_eval
        -:   63: *          ECMA-262 v5, 15.1.2.1 (steps 2 to 8)
        -:   64: *
        -:   65: * @return ecma value
        -:   66: */
        -:   67:ecma_value_t
    #####:   68:ecma_op_eval_chars_buffer (void *source_p, /**< source code */
        -:   69:                           uint32_t parse_opts) /**< ecma_parse_opts_t option bits */
        -:   70:{
        -:   71:#if JERRY_PARSER
    #####:   72:  JERRY_ASSERT (source_p != NULL);
        -:   73:
    #####:   74:  uint32_t is_strict_call = ECMA_PARSE_STRICT_MODE | ECMA_PARSE_DIRECT_EVAL;
        -:   75:
    #####:   76:  if ((parse_opts & is_strict_call) != is_strict_call)
        -:   77:  {
    #####:   78:    parse_opts &= (uint32_t) ~ECMA_PARSE_STRICT_MODE;
        -:   79:  }
        -:   80:
    #####:   81:  parse_opts |= ECMA_PARSE_EVAL;
        -:   82:
        -:   83:#if JERRY_ESNEXT
    #####:   84:  ECMA_CLEAR_LOCAL_PARSE_OPTS ();
        -:   85:#endif /* JERRY_ESNEXT */
        -:   86:
    #####:   87:  ecma_compiled_code_t *bytecode_p = parser_parse_script (source_p, parse_opts, NULL);
        -:   88:
    #####:   89:  if (JERRY_UNLIKELY (bytecode_p == NULL))
        -:   90:  {
    #####:   91:    return ECMA_VALUE_ERROR;
        -:   92:  }
        -:   93:
    #####:   94:  return vm_run_eval (bytecode_p, parse_opts);
        -:   95:#else /* !JERRY_PARSER */
        -:   96:  JERRY_UNUSED (code_p);
        -:   97:  JERRY_UNUSED (code_buffer_size);
        -:   98:  JERRY_UNUSED (parse_opts);
        -:   99:
        -:  100:  return ecma_raise_syntax_error (ECMA_ERR_MSG ("Source code parsing is disabled"));
        -:  101:#endif /* JERRY_PARSER */
        -:  102:} /* ecma_op_eval_chars_buffer */
        -:  103:
        -:  104:/**
        -:  105: * @}
        -:  106: * @}
        -:  107: */
