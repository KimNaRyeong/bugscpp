        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-promise-object.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-array-object.h"
        -:   18:#include "ecma-boolean-object.h"
        -:   19:#include "ecma-builtins.h"
        -:   20:#include "ecma-builtin-handlers.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-function-object.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-globals.h"
        -:   25:#include "ecma-helpers.h"
        -:   26:#include "ecma-jobqueue.h"
        -:   27:#include "ecma-objects.h"
        -:   28:#include "ecma-objects-general.h"
        -:   29:#include "ecma-promise-object.h"
        -:   30:#include "jcontext.h"
        -:   31:
        -:   32:#if JERRY_ESNEXT
        -:   33:
        -:   34:/** \addtogroup ecma ECMA
        -:   35: * @{
        -:   36: *
        -:   37: * \addtogroup ecmapromiseobject ECMA Promise object related routines
        -:   38: * @{
        -:   39: */
        -:   40:
        -:   41:/**
        -:   42: * Check if an object is promise.
        -:   43: *
        -:   44: * @return true - if the object is a promise.
        -:   45: *         false - otherwise.
        -:   46: */
        -:   47:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:   48:ecma_is_promise (ecma_object_t *obj_p) /**< points to object */
        -:   49:{
    #####:   50:  return ecma_object_class_is (obj_p, ECMA_OBJECT_CLASS_PROMISE);
        -:   51:} /* ecma_is_promise */
        -:   52:
        -:   53:/**
        -:   54: * Get the result of the promise.
        -:   55: *
        -:   56: * @return ecma value of the promise result.
        -:   57: *         Returned value must be freed with ecma_free_value
        -:   58: */
        -:   59:ecma_value_t
    #####:   60:ecma_promise_get_result (ecma_object_t *obj_p) /**< points to promise object */
        -:   61:{
    #####:   62:  JERRY_ASSERT (ecma_is_promise (obj_p));
        -:   63:
    #####:   64:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:   65:
    #####:   66:  return ecma_copy_value (ext_object_p->u.cls.u3.value);
        -:   67:} /* ecma_promise_get_result */
        -:   68:
        -:   69:/**
        -:   70: * Set the PromiseResult of promise.
        -:   71: */
        -:   72:static inline void JERRY_ATTR_ALWAYS_INLINE
        -:   73:ecma_promise_set_result (ecma_object_t *obj_p, /**< points to promise object */
        -:   74:                         ecma_value_t result) /**< the result value */
        -:   75:{
    #####:   76:  JERRY_ASSERT (ecma_is_promise (obj_p));
        -:   77:
    #####:   78:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:   79:
    #####:   80:  JERRY_ASSERT (ext_object_p->u.cls.u3.value == ECMA_VALUE_UNDEFINED);
        -:   81:
    #####:   82:  ext_object_p->u.cls.u3.value = result;
        -:   83:} /* ecma_promise_set_result */
        -:   84:
        -:   85:/**
        -:   86: * Get the PromiseState of promise.
        -:   87: *
        -:   88: * @return the state's enum value
        -:   89: */
        -:   90:uint8_t
    #####:   91:ecma_promise_get_flags (ecma_object_t *obj_p) /**< points to promise object */
        -:   92:{
    #####:   93:  JERRY_ASSERT (ecma_is_promise (obj_p));
        -:   94:
    #####:   95:  return ((ecma_extended_object_t *) obj_p)->u.cls.u1.promise_flags;
        -:   96:} /* ecma_promise_get_flags */
        -:   97:
        -:   98:/**
        -:   99: * Set the PromiseState of promise.
        -:  100: */
        -:  101:static inline void JERRY_ATTR_ALWAYS_INLINE
        -:  102:ecma_promise_set_state (ecma_object_t *obj_p, /**< points to promise object */
        -:  103:                        bool is_fulfilled) /**< new flags */
        -:  104:{
    #####:  105:  JERRY_ASSERT (ecma_is_promise (obj_p));
    #####:  106:  JERRY_ASSERT (ecma_promise_get_flags (obj_p) & ECMA_PROMISE_IS_PENDING);
        -:  107:
    #####:  108:  uint8_t flags_to_invert = (is_fulfilled ? (ECMA_PROMISE_IS_PENDING | ECMA_PROMISE_IS_FULFILLED)
        -:  109:                                          : ECMA_PROMISE_IS_PENDING);
        -:  110:
    #####:  111:  ((ecma_extended_object_t *) obj_p)->u.cls.u1.promise_flags ^= flags_to_invert;
        -:  112:} /* ecma_promise_set_state */
        -:  113:
        -:  114:/**
        -:  115: * Take a collection of Reactions and enqueue a new PromiseReactionJob for each Reaction.
        -:  116: *
        -:  117: * See also: ES2015 25.4.1.8
        -:  118: */
        -:  119:static void
    #####:  120:ecma_promise_trigger_reactions (ecma_collection_t *reactions, /**< lists of reactions */
        -:  121:                                ecma_value_t value, /**< value for resolve or reject */
        -:  122:                                bool is_reject) /**< true if promise is rejected, false otherwise */
        -:  123:{
    #####:  124:  ecma_value_t *buffer_p = reactions->buffer_p;
    #####:  125:  ecma_value_t *buffer_end_p = buffer_p + reactions->item_count;
        -:  126:
    #####:  127:  while (buffer_p < buffer_end_p)
        -:  128:  {
    #####:  129:    ecma_value_t object_with_tag = *buffer_p++;
    #####:  130:    ecma_object_t *object_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t, object_with_tag);
    #####:  131:    ecma_value_t object = ecma_make_object_value (object_p);
        -:  132:
    #####:  133:    if (JMEM_CP_GET_THIRD_BIT_FROM_POINTER_TAG (object_with_tag))
        -:  134:    {
    #####:  135:      ecma_enqueue_promise_async_reaction_job (object, value, is_reject);
    #####:  136:      continue;
        -:  137:    }
        -:  138:
    #####:  139:    if (!is_reject)
        -:  140:    {
    #####:  141:      ecma_value_t handler = ECMA_VALUE_TRUE;
        -:  142:
    #####:  143:      if (JMEM_CP_GET_FIRST_BIT_FROM_POINTER_TAG (object_with_tag))
        -:  144:      {
    #####:  145:        handler = *buffer_p++;
        -:  146:      }
        -:  147:
    #####:  148:      ecma_enqueue_promise_reaction_job (object, handler, value);
        -:  149:    }
    #####:  150:    else if (JMEM_CP_GET_FIRST_BIT_FROM_POINTER_TAG (object_with_tag))
        -:  151:    {
    #####:  152:      buffer_p++;
        -:  153:    }
        -:  154:
    #####:  155:    if (is_reject)
        -:  156:    {
    #####:  157:      ecma_value_t handler = ECMA_VALUE_FALSE;
        -:  158:
    #####:  159:      if (JMEM_CP_GET_SECOND_BIT_FROM_POINTER_TAG (object_with_tag))
        -:  160:      {
    #####:  161:        handler = *buffer_p++;
        -:  162:      }
        -:  163:
    #####:  164:      ecma_enqueue_promise_reaction_job (object, handler, value);
        -:  165:    }
    #####:  166:    else if (JMEM_CP_GET_SECOND_BIT_FROM_POINTER_TAG (object_with_tag))
        -:  167:    {
    #####:  168:      buffer_p++;
        -:  169:    }
        -:  170:  }
    #####:  171:} /* ecma_promise_trigger_reactions */
        -:  172:
        -:  173:/**
        -:  174: * Checks whether a resolver is called before.
        -:  175: *
        -:  176: * @return true if it was called before, false otherwise
        -:  177: */
        -:  178:static inline bool JERRY_ATTR_ALWAYS_INLINE
        -:  179:ecma_is_resolver_already_called (ecma_object_t *promise_obj_p) /**< promise */
        -:  180:{
    #####:  181:  return (ecma_promise_get_flags (promise_obj_p) & ECMA_PROMISE_ALREADY_RESOLVED) != 0;
        -:  182:} /* ecma_is_resolver_already_called */
        -:  183:
        -:  184:/**
        -:  185: * Reject a Promise with a reason.
        -:  186: *
        -:  187: * See also: ES2015 25.4.1.7
        -:  188: */
        -:  189:void
    #####:  190:ecma_reject_promise (ecma_value_t promise, /**< promise */
        -:  191:                     ecma_value_t reason) /**< reason for reject */
        -:  192:{
    #####:  193:  ecma_object_t *obj_p = ecma_get_object_from_value (promise);
        -:  194:
    #####:  195:  JERRY_ASSERT (ecma_promise_get_flags (obj_p) & ECMA_PROMISE_IS_PENDING);
        -:  196:
        -:  197:#if JERRY_PROMISE_CALLBACK
    #####:  198:  if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_MAIN))
        -:  199:  {
        -:  200:    JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####:  201:    JERRY_CONTEXT (promise_callback) (JERRY_PROMISE_EVENT_REJECT,
        -:  202:                                      promise,
        -:  203:                                      reason,
        -:  204:                                      JERRY_CONTEXT (promise_callback_user_p));
        -:  205:  }
        -:  206:#endif /* JERRY_PROMISE_CALLBACK */
        -:  207:
    #####:  208:  ecma_promise_set_state (obj_p, false);
    #####:  209:  ecma_promise_set_result (obj_p, ecma_copy_value_if_not_object (reason));
    #####:  210:  ecma_promise_object_t *promise_p = (ecma_promise_object_t *) obj_p;
        -:  211:
        -:  212:  /* GC can be triggered by ecma_new_collection so freeing the collection
        -:  213:     first and creating a new one might cause a heap after use event. */
    #####:  214:  ecma_collection_t *reactions = promise_p->reactions;
        -:  215:
        -:  216:  /* Fulfill reactions will never be triggered. */
    #####:  217:  ecma_promise_trigger_reactions (reactions, reason, true);
        -:  218:
        -:  219:#if JERRY_PROMISE_CALLBACK
    #####:  220:  if (reactions->item_count == 0)
        -:  221:  {
    #####:  222:    ((ecma_extended_object_t *) obj_p)->u.cls.u1.promise_flags |= ECMA_PROMISE_UNHANDLED_REJECT;
        -:  223:
    #####:  224:    if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_ERROR))
        -:  225:    {
        -:  226:      JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####:  227:      JERRY_CONTEXT (promise_callback) (JERRY_PROMISE_EVENT_REJECT_WITHOUT_HANDLER,
        -:  228:                                        promise,
        -:  229:                                        reason,
        -:  230:                                        JERRY_CONTEXT (promise_callback_user_p));
        -:  231:    }
        -:  232:  }
        -:  233:#endif /* JERRY_PROMISE_CALLBACK */
        -:  234:
    #####:  235:  promise_p->reactions = ecma_new_collection ();
        -:  236:
    #####:  237:  ecma_collection_destroy (reactions);
    #####:  238:} /* ecma_reject_promise */
        -:  239:
        -:  240:/**
        -:  241: * Fulfill a Promise with a value.
        -:  242: *
        -:  243: * See also: ES2015 25.4.1.4
        -:  244: */
        -:  245:void
    #####:  246:ecma_fulfill_promise (ecma_value_t promise, /**< promise */
        -:  247:                      ecma_value_t value) /**< fulfilled value */
        -:  248:{
    #####:  249:  ecma_object_t *obj_p = ecma_get_object_from_value (promise);
        -:  250:
    #####:  251:  JERRY_ASSERT (ecma_promise_get_flags (obj_p) & ECMA_PROMISE_IS_PENDING);
        -:  252:
    #####:  253:  if (promise == value)
        -:  254:  {
    #####:  255:    ecma_raise_type_error (ECMA_ERR_MSG ("A promise cannot be resolved with itself"));
    #####:  256:    ecma_value_t exception = jcontext_take_exception ();
    #####:  257:    ecma_reject_promise (promise, exception);
    #####:  258:    ecma_free_value (exception);
    #####:  259:    return;
        -:  260:  }
        -:  261:
    #####:  262:  if (ecma_is_value_object (value))
        -:  263:  {
    #####:  264:    ecma_value_t then = ecma_op_object_get_by_magic_id (ecma_get_object_from_value (value), LIT_MAGIC_STRING_THEN);
        -:  265:
    #####:  266:    if (ECMA_IS_VALUE_ERROR (then))
        -:  267:    {
    #####:  268:      then = jcontext_take_exception ();
    #####:  269:      ecma_reject_promise (promise, then);
    #####:  270:      ecma_free_value (then);
    #####:  271:      return;
        -:  272:    }
        -:  273:
    #####:  274:    if (ecma_op_is_callable (then))
        -:  275:    {
    #####:  276:      ecma_enqueue_promise_resolve_thenable_job (promise, value, then);
    #####:  277:      ecma_free_value (then);
    #####:  278:      return;
        -:  279:    }
        -:  280:
    #####:  281:    ecma_free_value (then);
        -:  282:  }
        -:  283:
        -:  284:#if JERRY_PROMISE_CALLBACK
    #####:  285:  if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_MAIN))
        -:  286:  {
        -:  287:    JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####:  288:    JERRY_CONTEXT (promise_callback) (JERRY_PROMISE_EVENT_RESOLVE,
        -:  289:                                      promise,
        -:  290:                                      value,
        -:  291:                                      JERRY_CONTEXT (promise_callback_user_p));
        -:  292:  }
        -:  293:#endif /* JERRY_PROMISE_CALLBACK */
        -:  294:
    #####:  295:  ecma_promise_set_state (obj_p, true);
    #####:  296:  ecma_promise_set_result (obj_p, ecma_copy_value_if_not_object (value));
    #####:  297:  ecma_promise_object_t *promise_p = (ecma_promise_object_t *) obj_p;
        -:  298:
        -:  299:  /* GC can be triggered by ecma_new_collection so freeing the collection
        -:  300:     first and creating a new one might cause a heap after use event. */
    #####:  301:  ecma_collection_t *reactions = promise_p->reactions;
        -:  302:
        -:  303:  /* Reject reactions will never be triggered. */
    #####:  304:  ecma_promise_trigger_reactions (reactions, value, false);
        -:  305:
    #####:  306:  promise_p->reactions = ecma_new_collection ();
        -:  307:
    #####:  308:  ecma_collection_destroy (reactions);
        -:  309:} /* ecma_fulfill_promise */
        -:  310:
        -:  311:/**
        -:  312: * Reject a Promise with a reason. Sanity checks are performed before the reject.
        -:  313: *
        -:  314: * See also: ES2015 25.4.1.3.1
        -:  315: *
        -:  316: * @return ecma value of undefined.
        -:  317: */
        -:  318:ecma_value_t
    #####:  319:ecma_reject_promise_with_checks (ecma_value_t promise, /**< promise */
        -:  320:                                 ecma_value_t reason) /**< reason for reject */
        -:  321:{
        -:  322:  /* 1. */
    #####:  323:  ecma_object_t *promise_obj_p = ecma_get_object_from_value (promise);
    #####:  324:  JERRY_ASSERT (ecma_is_promise (promise_obj_p));
        -:  325:
        -:  326:  /* 3., 4. */
    #####:  327:  if (JERRY_UNLIKELY (ecma_is_resolver_already_called (promise_obj_p)))
        -:  328:  {
        -:  329:#if JERRY_PROMISE_CALLBACK
    #####:  330:    if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_ERROR))
        -:  331:    {
        -:  332:      JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####:  333:      JERRY_CONTEXT (promise_callback) (JERRY_PROMISE_EVENT_REJECT_FULFILLED,
        -:  334:                                        promise,
        -:  335:                                        reason,
        -:  336:                                        JERRY_CONTEXT (promise_callback_user_p));
        -:  337:    }
        -:  338:#endif /* JERRY_PROMISE_CALLBACK */
        -:  339:
    #####:  340:    return ECMA_VALUE_UNDEFINED;
        -:  341:  }
        -:  342:
        -:  343:  /* 5. */
    #####:  344:  ((ecma_extended_object_t *) promise_obj_p)->u.cls.u1.promise_flags |= ECMA_PROMISE_ALREADY_RESOLVED;
        -:  345:
        -:  346:  /* 6. */
    #####:  347:  ecma_reject_promise (promise, reason);
    #####:  348:  return ECMA_VALUE_UNDEFINED;
        -:  349:} /* ecma_reject_promise_with_checks */
        -:  350:
        -:  351:/**
        -:  352: * Fulfill a Promise with a value. Sanity checks are performed before the resolve.
        -:  353: *
        -:  354: * See also: ES2015 25.4.1.3.2
        -:  355: *
        -:  356: * @return ecma value of undefined.
        -:  357: */
        -:  358:ecma_value_t
    #####:  359:ecma_fulfill_promise_with_checks (ecma_value_t promise, /**< promise */
        -:  360:                                  ecma_value_t value) /**< fulfilled value */
        -:  361:{
        -:  362:  /* 1. */
    #####:  363:  ecma_object_t *promise_obj_p = ecma_get_object_from_value (promise);
    #####:  364:  JERRY_ASSERT (ecma_is_promise (promise_obj_p));
        -:  365:
        -:  366:  /* 3., 4. */
    #####:  367:  if (JERRY_UNLIKELY (ecma_is_resolver_already_called (promise_obj_p)))
        -:  368:  {
        -:  369:#if JERRY_PROMISE_CALLBACK
    #####:  370:    if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_ERROR))
        -:  371:    {
        -:  372:      JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####:  373:      JERRY_CONTEXT (promise_callback) (JERRY_PROMISE_EVENT_RESOLVE_FULFILLED,
        -:  374:                                        promise,
        -:  375:                                        value,
        -:  376:                                        JERRY_CONTEXT (promise_callback_user_p));
        -:  377:    }
        -:  378:#endif /* JERRY_PROMISE_CALLBACK */
        -:  379:
    #####:  380:    return ECMA_VALUE_UNDEFINED;
        -:  381:  }
        -:  382:
        -:  383:  /* 5. */
    #####:  384:  ((ecma_extended_object_t *) promise_obj_p)->u.cls.u1.promise_flags |= ECMA_PROMISE_ALREADY_RESOLVED;
        -:  385:
    #####:  386:  ecma_fulfill_promise (promise, value);
    #####:  387:  return ECMA_VALUE_UNDEFINED;
        -:  388:} /* ecma_fulfill_promise_with_checks */
        -:  389:
        -:  390:/**
        -:  391: * Native handler for Promise Reject Function.
        -:  392: *
        -:  393: * @return ecma value of undefined.
        -:  394: */
        -:  395:ecma_value_t
    #####:  396:ecma_promise_reject_handler (ecma_object_t *function_obj_p, /**< function object */
        -:  397:                             const ecma_value_t args_p[], /**< argument list */
        -:  398:                             const uint32_t args_count) /**< argument number */
        -:  399:{
    #####:  400:  ecma_promise_resolver_t *function_p = (ecma_promise_resolver_t *) function_obj_p;
        -:  401:
    #####:  402:  ecma_value_t reject_value = (args_count == 0) ? ECMA_VALUE_UNDEFINED : args_p[0];
    #####:  403:  return ecma_reject_promise_with_checks (function_p->promise, reject_value);
        -:  404:} /* ecma_promise_reject_handler */
        -:  405:
        -:  406:/**
        -:  407: * Native handler for Promise Resolve Function.
        -:  408: *
        -:  409: * @return ecma value of undefined.
        -:  410: */
        -:  411:ecma_value_t
    #####:  412:ecma_promise_resolve_handler (ecma_object_t *function_obj_p, /**< function object */
        -:  413:                              const ecma_value_t args_p[], /**< argument list */
        -:  414:                              const uint32_t args_count) /**< argument number */
        -:  415:{
    #####:  416:  ecma_promise_resolver_t *function_p = (ecma_promise_resolver_t *) function_obj_p;
        -:  417:
    #####:  418:  ecma_value_t fulfilled_value = (args_count == 0) ? ECMA_VALUE_UNDEFINED : args_p[0];
    #####:  419:  return ecma_fulfill_promise_with_checks (function_p->promise, fulfilled_value);
        -:  420:} /* ecma_promise_resolve_handler */
        -:  421:
        -:  422:/**
        -:  423: * Helper function for PromiseCreateResolvingFunctions.
        -:  424: *
        -:  425: * See also: ES2015 25.4.1.3 2. - 7.
        -:  426: *
        -:  427: * @return pointer to the resolving function
        -:  428: */
        -:  429:static ecma_object_t *
    #####:  430:ecma_promise_create_resolving_function (ecma_object_t *promise_p, /**< Promise Object */
        -:  431:                                        ecma_native_handler_id_t id) /**< Callback handler */
        -:  432:{
    #####:  433:  ecma_object_t *func_obj_p = ecma_op_create_native_handler (id, sizeof (ecma_promise_resolver_t));
        -:  434:
    #####:  435:  ecma_promise_resolver_t *resolver_p = (ecma_promise_resolver_t *) func_obj_p;
    #####:  436:  resolver_p->promise = ecma_make_object_value (promise_p);
        -:  437:
    #####:  438:  return func_obj_p;
        -:  439:} /* ecma_promise_create_resolving_function */
        -:  440:
        -:  441:/**
        -:  442: * Helper function for running an executor.
        -:  443: *
        -:  444: * @return ecma value of the executor callable
        -:  445: *         Returned value must be freed with ecma_free_value
        -:  446: */
        -:  447:ecma_value_t
    #####:  448:ecma_promise_run_executor (ecma_object_t *promise_p, /**< Promise Object */
        -:  449:                           ecma_value_t executor, /**< executor function */
        -:  450:                           ecma_value_t this_value) /**< this value */
        -:  451:{
        -:  452:  ecma_object_t *resolve_func_p, *reject_func_p;
    #####:  453:  resolve_func_p = ecma_promise_create_resolving_function (promise_p,
        -:  454:                                                           ECMA_NATIVE_HANDLER_PROMISE_RESOLVE);
    #####:  455:  reject_func_p = ecma_promise_create_resolving_function (promise_p,
        -:  456:                                                          ECMA_NATIVE_HANDLER_PROMISE_REJECT);
        -:  457:
    #####:  458:  ecma_value_t argv[] = { ecma_make_object_value (resolve_func_p), ecma_make_object_value (reject_func_p) };
    #####:  459:  ecma_value_t result = ecma_op_function_call (ecma_get_object_from_value (executor),
        -:  460:                                               this_value,
        -:  461:                                               argv,
        -:  462:                                               2);
    #####:  463:  ecma_deref_object (resolve_func_p);
    #####:  464:  ecma_deref_object (reject_func_p);
        -:  465:
    #####:  466:  return result;
        -:  467:} /* ecma_promise_run_executor */
        -:  468:
        -:  469:/**
        -:  470: * Create a promise object.
        -:  471: *
        -:  472: * See also: ES2015 25.4.3.1
        -:  473: *
        -:  474: * @return ecma value of the new promise object
        -:  475: *         Returned value must be freed with ecma_free_value
        -:  476: */
        -:  477:ecma_value_t
    #####:  478:ecma_op_create_promise_object (ecma_value_t executor, /**< the executor function or ECMA_VALUE_EMPTY */
        -:  479:                               ecma_value_t parent, /**< parent promise if available */
        -:  480:                               ecma_object_t *new_target_p) /**< new.target value */
        -:  481:{
        -:  482:  JERRY_UNUSED (parent);
        -:  483:
    #####:  484:  if (new_target_p == NULL)
        -:  485:  {
    #####:  486:    new_target_p = ecma_builtin_get (ECMA_BUILTIN_ID_PROMISE);
        -:  487:  }
        -:  488:
        -:  489:  /* 3. */
    #####:  490:  ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (new_target_p,
        -:  491:                                                                   ECMA_BUILTIN_ID_PROMISE_PROTOTYPE);
        -:  492:
    #####:  493:  if (JERRY_UNLIKELY (proto_p == NULL))
        -:  494:  {
    #####:  495:    return ECMA_VALUE_ERROR;
        -:  496:  }
        -:  497:
        -:  498:  /* Calling ecma_new_collection might trigger a GC call, so this
        -:  499:   * allocation is performed before the object is constructed. */
    #####:  500:  ecma_collection_t *reactions = ecma_new_collection ();
        -:  501:
    #####:  502:  ecma_object_t *object_p = ecma_create_object (proto_p,
        -:  503:                                                sizeof (ecma_promise_object_t),
        -:  504:                                                ECMA_OBJECT_TYPE_CLASS);
    #####:  505:  ecma_deref_object (proto_p);
    #####:  506:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
    #####:  507:  ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_PROMISE;
        -:  508:  /* 5 */
    #####:  509:  ext_object_p->u.cls.u1.promise_flags = ECMA_PROMISE_IS_PENDING;
    #####:  510:  ext_object_p->u.cls.u3.value = ECMA_VALUE_UNDEFINED;
        -:  511:
        -:  512:  /* 6-8. */
    #####:  513:  ecma_promise_object_t *promise_object_p = (ecma_promise_object_t *) object_p;
    #####:  514:  promise_object_p->reactions = reactions;
        -:  515:
        -:  516:#if JERRY_PROMISE_CALLBACK
    #####:  517:  if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_MAIN))
        -:  518:  {
        -:  519:    JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####:  520:    JERRY_CONTEXT (promise_callback) (JERRY_PROMISE_EVENT_CREATE,
        -:  521:                                      ecma_make_object_value (object_p),
        -:  522:                                      parent,
        -:  523:                                      JERRY_CONTEXT (promise_callback_user_p));
        -:  524:  }
        -:  525:#endif /* JERRY_PROMISE_CALLBACK */
        -:  526:
        -:  527:  /* 9. */
    #####:  528:  ecma_value_t completion = ECMA_VALUE_UNDEFINED;
        -:  529:
    #####:  530:  if (executor != ECMA_VALUE_EMPTY)
        -:  531:  {
    #####:  532:    JERRY_ASSERT (ecma_op_is_callable (executor));
        -:  533:
    #####:  534:    completion = ecma_promise_run_executor (object_p, executor, ECMA_VALUE_UNDEFINED);
        -:  535:  }
        -:  536:
    #####:  537:  ecma_value_t status = ECMA_VALUE_EMPTY;
        -:  538:
    #####:  539:  if (ECMA_IS_VALUE_ERROR (completion))
        -:  540:  {
        -:  541:    /* 10.a. */
    #####:  542:    completion = jcontext_take_exception ();
    #####:  543:    ecma_reject_promise_with_checks (ecma_make_object_value (object_p), completion);
        -:  544:  }
        -:  545:
    #####:  546:  ecma_free_value (completion);
        -:  547:
        -:  548:  /* 10.b. */
    #####:  549:  if (ECMA_IS_VALUE_ERROR (status))
        -:  550:  {
    #####:  551:    ecma_deref_object (object_p);
    #####:  552:    return status;
        -:  553:  }
        -:  554:
        -:  555:  /* 11. */
    #####:  556:  ecma_free_value (status);
    #####:  557:  return ecma_make_object_value (object_p);
        -:  558:} /* ecma_op_create_promise_object */
        -:  559:
        -:  560:/**
        -:  561: * Helper function for increase or decrease the remaining count.
        -:  562: *
        -:  563: * @return the current remaining count after increase or decrease.
        -:  564: */
        -:  565:uint32_t
    #####:  566:ecma_promise_remaining_inc_or_dec (ecma_value_t remaining, /**< the remaining count */
        -:  567:                                   bool is_inc) /**< whether to increase the count */
        -:  568:{
    #####:  569:  JERRY_ASSERT (ecma_is_value_object (remaining));
        -:  570:
    #####:  571:  ecma_object_t *remaining_p = ecma_get_object_from_value (remaining);
    #####:  572:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) remaining_p;
        -:  573:
    #####:  574:  JERRY_ASSERT (ext_object_p->u.cls.type == ECMA_OBJECT_CLASS_NUMBER);
        -:  575:
    #####:  576:  JERRY_ASSERT (ecma_is_value_integer_number (ext_object_p->u.cls.u3.value));
        -:  577:
    #####:  578:  uint32_t current = (uint32_t) ecma_get_integer_from_value (ext_object_p->u.cls.u3.value);
        -:  579:
    #####:  580:  if (is_inc)
        -:  581:  {
    #####:  582:    current++;
        -:  583:  }
        -:  584:  else
        -:  585:  {
    #####:  586:    current--;
        -:  587:  }
    #####:  588:  ext_object_p->u.cls.u3.value = ecma_make_uint32_value (current);
        -:  589:
    #####:  590:  return current;
        -:  591:} /* ecma_promise_remaining_inc_or_dec */
        -:  592:
        -:  593:/**
        -:  594: * Native handler for Promise.all and Promise.allSettled Resolve Element Function.
        -:  595: *
        -:  596: * See also:
        -:  597: *         ES2015 25.4.4.1.2
        -:  598: *
        -:  599: * @return ecma value of undefined.
        -:  600: */
        -:  601:ecma_value_t
    #####:  602:ecma_promise_all_or_all_settled_handler_cb (ecma_object_t *function_obj_p, /**< function object */
        -:  603:                                            const ecma_value_t args_p[], /**< argument list */
        -:  604:                                            const uint32_t args_count) /**< argument number */
        -:  605:{
        -:  606:  JERRY_UNUSED (args_count);
    #####:  607:  ecma_promise_all_executor_t *executor_p = (ecma_promise_all_executor_t *) function_obj_p;
    #####:  608:  uint8_t promise_type = executor_p->header.u.built_in.u2.routine_flags;
        -:  609:
    #####:  610:  promise_type = (uint8_t) (promise_type >> ECMA_NATIVE_HANDLER_FLAGS_PROMISE_HELPER_SHIFT);
        -:  611:
        -:  612:  /* 1 - 2. */
    #####:  613:  if (executor_p->index == 0)
        -:  614:  {
    #####:  615:    return ECMA_VALUE_UNDEFINED;
        -:  616:  }
        -:  617:
    #####:  618:  if (promise_type == ECMA_PROMISE_ALL_RESOLVE || promise_type == ECMA_PROMISE_ANY_REJECT)
        -:  619:  {
        -:  620:    /* 8. */
    #####:  621:    ecma_op_object_put_by_index (ecma_get_object_from_value (executor_p->values),
    #####:  622:                                 (uint32_t) (executor_p->index - 1),
        -:  623:                                 args_p[0],
        -:  624:                                 false);
        -:  625:  }
        -:  626:  else
        -:  627:  {
    #####:  628:    lit_magic_string_id_t status_property_val = LIT_MAGIC_STRING_REJECTED;
    #####:  629:    lit_magic_string_id_t data_propery_name = LIT_MAGIC_STRING_REASON;
        -:  630:
    #####:  631:    if (promise_type == ECMA_PROMISE_ALLSETTLED_RESOLVE)
        -:  632:    {
    #####:  633:      status_property_val = LIT_MAGIC_STRING_FULFILLED;
    #####:  634:      data_propery_name = LIT_MAGIC_STRING_VALUE;
        -:  635:    }
        -:  636:
    #####:  637:    ecma_object_t *obj_p = ecma_create_object (ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE),
        -:  638:                                               0,
        -:  639:                                               ECMA_OBJECT_TYPE_GENERAL);
        -:  640:    ecma_property_value_t *prop_value_p;
    #####:  641:    prop_value_p = ecma_create_named_data_property (obj_p,
        -:  642:                                                    ecma_get_magic_string (LIT_MAGIC_STRING_STATUS),
        -:  643:                                                    ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  644:                                                    NULL);
        -:  645:
    #####:  646:    prop_value_p->value = ecma_make_magic_string_value (status_property_val);
        -:  647:
    #####:  648:    prop_value_p = ecma_create_named_data_property (obj_p,
        -:  649:                                                    ecma_get_magic_string (data_propery_name),
        -:  650:                                                    ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  651:                                                    NULL);
    #####:  652:    prop_value_p->value = ECMA_VALUE_UNDEFINED;
        -:  653:
    #####:  654:    if (args_count != 0)
        -:  655:    {
    #####:  656:      prop_value_p->value = ecma_copy_value_if_not_object (args_p[0]);
        -:  657:    }
        -:  658:
    #####:  659:    ecma_value_t obj_val = ecma_make_object_value (obj_p);
        -:  660:    /* 12. */
    #####:  661:    ecma_op_object_put_by_index (ecma_get_object_from_value (executor_p->values),
    #####:  662:                                (uint32_t) (executor_p->index - 1),
        -:  663:                                 obj_val,
        -:  664:                                 false);
    #####:  665:    ecma_deref_object (obj_p);
        -:  666:  }
        -:  667:  /* 3. */
    #####:  668:  executor_p->index = 0;
        -:  669:
        -:  670:  /* 9-10. */
    #####:  671:  ecma_value_t ret = ECMA_VALUE_UNDEFINED;
    #####:  672:  if (ecma_promise_remaining_inc_or_dec (executor_p->remaining_elements, false) == 0)
        -:  673:  {
    #####:  674:    ecma_value_t capability = executor_p->capability;
    #####:  675:    ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) ecma_get_object_from_value (capability);
    #####:  676:    if (promise_type == ECMA_PROMISE_ANY_REJECT)
        -:  677:    {
    #####:  678:      ecma_value_t error_val = ecma_new_aggregate_error (executor_p->values, ECMA_VALUE_UNDEFINED);
    #####:  679:      ret = ecma_op_function_call (ecma_get_object_from_value (capability_p->reject),
        -:  680:                                   ECMA_VALUE_UNDEFINED,
        -:  681:                                   &error_val,
        -:  682:                                   1);
    #####:  683:      ecma_free_value (error_val);
        -:  684:    }
        -:  685:    else
        -:  686:    {
    #####:  687:      ret = ecma_op_function_call (ecma_get_object_from_value (capability_p->resolve),
        -:  688:                                   ECMA_VALUE_UNDEFINED,
    #####:  689:                                   &executor_p->values,
        -:  690:                                   1);
        -:  691:    }
        -:  692:  }
        -:  693:
    #####:  694:  return ret;
        -:  695:} /* ecma_promise_all_or_all_settled_handler_cb */
        -:  696:
        -:  697:/**
        -:  698: * GetCapabilitiesExecutor Functions
        -:  699: *
        -:  700: * Checks and sets a promiseCapability's resolve and reject properties.
        -:  701: *
        -:  702: * See also: ES11 25.6.1.5.1
        -:  703: *
        -:  704: * @return ECMA_VALUE_UNDEFINED or TypeError
        -:  705: *         returned value must be freed with ecma_free_value
        -:  706: */
        -:  707:ecma_value_t
    #####:  708:ecma_op_get_capabilities_executor_cb (ecma_object_t *function_obj_p, /**< function object */
        -:  709:                                      const ecma_value_t args_p[], /**< argument list */
        -:  710:                                      const uint32_t args_count) /**< argument number */
        -:  711:{
        -:  712:  /* 1. */
    #####:  713:  ecma_promise_capability_executor_t *executor_p = (ecma_promise_capability_executor_t *) function_obj_p;
        -:  714:
        -:  715:  /* 2-3. */
    #####:  716:  ecma_object_t *capability_obj_p = ecma_get_object_from_value (executor_p->capability);
    #####:  717:  JERRY_ASSERT (ecma_object_class_is (capability_obj_p, ECMA_OBJECT_CLASS_PROMISE_CAPABILITY));
    #####:  718:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
        -:  719:
        -:  720:  /* 4. */
    #####:  721:  if (!ecma_is_value_undefined (capability_p->resolve))
        -:  722:  {
    #####:  723:    return ecma_raise_type_error (ECMA_ERR_MSG ("Resolve must be undefined"));
        -:  724:  }
        -:  725:
        -:  726:  /* 5. */
    #####:  727:  if (!ecma_is_value_undefined (capability_p->reject))
        -:  728:  {
    #####:  729:    return ecma_raise_type_error (ECMA_ERR_MSG ("Reject must be undefined"));
        -:  730:  }
        -:  731:
        -:  732:  /* 6. */
    #####:  733:  capability_p->resolve = (args_count > 0) ? args_p[0] : ECMA_VALUE_UNDEFINED;
        -:  734:  /* 7. */
    #####:  735:  capability_p->reject = (args_count > 1) ? args_p[1] : ECMA_VALUE_UNDEFINED;
        -:  736:
        -:  737:  /* 8. */
    #####:  738:  return ECMA_VALUE_UNDEFINED;
        -:  739:} /* ecma_op_get_capabilities_executor_cb */
        -:  740:
        -:  741:/**
        -:  742: * Create a new PromiseCapability.
        -:  743: *
        -:  744: * See also: ES11 25.6.1.5
        -:  745: *
        -:  746: * @return NULL - if the operation raises error
        -:  747: *         new PromiseCapability object - otherwise
        -:  748: */
        -:  749:ecma_object_t *
    #####:  750:ecma_promise_new_capability (ecma_value_t constructor, /**< constructor function */
        -:  751:                             ecma_value_t parent) /**< parent promise if available */
        -:  752:{
        -:  753:  /* 1. */
    #####:  754:  if (!ecma_is_constructor (constructor))
        -:  755:  {
    #####:  756:    ecma_raise_type_error (ECMA_ERR_MSG ("Invalid capability"));
    #####:  757:    return NULL;
        -:  758:  }
        -:  759:
    #####:  760:  ecma_object_t *constructor_obj_p = ecma_get_object_from_value (constructor);
        -:  761:
        -:  762:  /* 3. */
    #####:  763:  ecma_object_t *capability_obj_p = ecma_create_object (ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE),
        -:  764:                                                        sizeof (ecma_promise_capabality_t),
        -:  765:                                                        ECMA_OBJECT_TYPE_CLASS);
        -:  766:
    #####:  767:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
    #####:  768:  capability_p->header.u.cls.type = ECMA_OBJECT_CLASS_PROMISE_CAPABILITY;
    #####:  769:  capability_p->header.u.cls.u3.promise = ECMA_VALUE_UNDEFINED;
    #####:  770:  capability_p->resolve = ECMA_VALUE_UNDEFINED;
    #####:  771:  capability_p->reject = ECMA_VALUE_UNDEFINED;
        -:  772:
        -:  773:  /* 4-5. */
    #####:  774:  ecma_object_t *executor_p = ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROMISE_CAPABILITY_EXECUTOR,
        -:  775:                                                             sizeof (ecma_promise_capability_executor_t));
        -:  776:
        -:  777:  /* 6. */
    #####:  778:  ecma_promise_capability_executor_t *executor_func_p = (ecma_promise_capability_executor_t *) executor_p;
    #####:  779:  executor_func_p->capability = ecma_make_object_value (capability_obj_p);
        -:  780:
        -:  781:  /* 7. */
    #####:  782:  ecma_value_t executor = ecma_make_object_value (executor_p);
        -:  783:  ecma_value_t promise;
        -:  784:
    #####:  785:  if (constructor_obj_p == ecma_builtin_get (ECMA_BUILTIN_ID_PROMISE))
        -:  786:  {
    #####:  787:    promise = ecma_op_create_promise_object (executor, parent, constructor_obj_p);
        -:  788:  }
        -:  789:  else
        -:  790:  {
    #####:  791:    promise = ecma_op_function_construct (constructor_obj_p, constructor_obj_p, &executor, 1);
        -:  792:  }
        -:  793:
    #####:  794:  ecma_deref_object (executor_p);
        -:  795:
    #####:  796:  if (ECMA_IS_VALUE_ERROR (promise))
        -:  797:  {
    #####:  798:    ecma_deref_object (capability_obj_p);
    #####:  799:    return NULL;
        -:  800:  }
        -:  801:
        -:  802:  /* 8. */
    #####:  803:  if (!ecma_op_is_callable (capability_p->resolve))
        -:  804:  {
    #####:  805:    ecma_free_value (promise);
    #####:  806:    ecma_deref_object (capability_obj_p);
    #####:  807:    ecma_raise_type_error (ECMA_ERR_MSG ("'resolve' parameter must be callable"));
    #####:  808:    return NULL;
        -:  809:  }
        -:  810:
        -:  811:  /* 9. */
    #####:  812:  if (!ecma_op_is_callable (capability_p->reject))
        -:  813:  {
    #####:  814:    ecma_free_value (promise);
    #####:  815:    ecma_deref_object (capability_obj_p);
    #####:  816:    ecma_raise_type_error (ECMA_ERR_MSG ("'reject' parameter must be callable"));
    #####:  817:    return NULL;
        -:  818:  }
        -:  819:
        -:  820:  /* 10. */
    #####:  821:  capability_p->header.u.cls.u3.promise = promise;
        -:  822:
    #####:  823:  ecma_free_value (promise);
        -:  824:
        -:  825:  /* 11. */
    #####:  826:  return capability_obj_p;
        -:  827:} /* ecma_promise_new_capability */
        -:  828:
        -:  829:/**
        -:  830: * The common function for 'reject' and 'resolve'.
        -:  831: *
        -:  832: * @return ecma value
        -:  833: *         Returned value must be freed with ecma_free_value.
        -:  834: */
        -:  835:ecma_value_t
    #####:  836:ecma_promise_reject_or_resolve (ecma_value_t this_arg, /**< "this" argument */
        -:  837:                                ecma_value_t value, /**< rejected or resolved value */
        -:  838:                                bool is_resolve) /**< the operation is resolve */
        -:  839:{
    #####:  840:  if (!ecma_is_value_object (this_arg))
        -:  841:  {
    #####:  842:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object"));
        -:  843:  }
        -:  844:
    #####:  845:  if (is_resolve
    #####:  846:      && ecma_is_value_object (value)
    #####:  847:      && ecma_is_promise (ecma_get_object_from_value (value)))
        -:  848:  {
    #####:  849:    ecma_object_t *object_p = ecma_get_object_from_value (value);
    #####:  850:    ecma_value_t constructor = ecma_op_object_get_by_magic_id (object_p, LIT_MAGIC_STRING_CONSTRUCTOR);
        -:  851:
    #####:  852:    if (ECMA_IS_VALUE_ERROR (constructor))
        -:  853:    {
    #####:  854:      return constructor;
        -:  855:    }
        -:  856:
        -:  857:    /* The this_arg must be an object. */
    #####:  858:    bool is_same_value = (constructor == this_arg);
    #####:  859:    ecma_free_value (constructor);
        -:  860:
    #####:  861:    if (is_same_value)
        -:  862:    {
    #####:  863:      return ecma_copy_value (value);
        -:  864:    }
        -:  865:  }
        -:  866:
    #####:  867:  ecma_object_t *capability_obj_p = ecma_promise_new_capability (this_arg, ECMA_VALUE_UNDEFINED);
        -:  868:
    #####:  869:  if (JERRY_UNLIKELY (capability_obj_p == NULL))
        -:  870:  {
    #####:  871:    return ECMA_VALUE_ERROR;
        -:  872:  }
        -:  873:
    #####:  874:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
        -:  875:
    #####:  876:  ecma_value_t func = is_resolve ? capability_p->resolve : capability_p->reject;
        -:  877:
    #####:  878:  ecma_value_t call_ret = ecma_op_function_call (ecma_get_object_from_value (func),
        -:  879:                                                 ECMA_VALUE_UNDEFINED,
        -:  880:                                                 &value,
        -:  881:                                                 1);
        -:  882:
    #####:  883:  if (ECMA_IS_VALUE_ERROR (call_ret))
        -:  884:  {
    #####:  885:    ecma_deref_object (capability_obj_p);
    #####:  886:    return call_ret;
        -:  887:  }
        -:  888:
    #####:  889:  ecma_free_value (call_ret);
        -:  890:
    #####:  891:  ecma_value_t promise = ecma_copy_value (capability_p->header.u.cls.u3.promise);
    #####:  892:  ecma_deref_object (capability_obj_p);
        -:  893:
    #####:  894:  return promise;
        -:  895:} /* ecma_promise_reject_or_resolve */
        -:  896:
        -:  897:/**
        -:  898: * It performs the "then" operation on promiFulfilled
        -:  899: * and onRejected as its settlement actions.
        -:  900: *
        -:  901: * See also: 25.4.5.3.1
        -:  902: *
        -:  903: * @return ecma value of the new promise object
        -:  904: *         Returned value must be freed with ecma_free_value
        -:  905: */
        -:  906:static ecma_value_t
    #####:  907:ecma_promise_do_then (ecma_value_t promise, /**< the promise which call 'then' */
        -:  908:                      ecma_value_t on_fulfilled, /**< on_fulfilled function */
        -:  909:                      ecma_value_t on_rejected, /**< on_rejected function */
        -:  910:                      ecma_object_t *result_capability_obj_p) /**< promise capability */
        -:  911:{
    #####:  912:  JERRY_ASSERT (ecma_object_class_is (result_capability_obj_p, ECMA_OBJECT_CLASS_PROMISE_CAPABILITY));
        -:  913:
    #####:  914:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) result_capability_obj_p;
        -:  915:
        -:  916:  /* 3. boolean true indicates "indentity" */
    #####:  917:  if (!ecma_op_is_callable (on_fulfilled))
        -:  918:  {
    #####:  919:    on_fulfilled = ECMA_VALUE_TRUE;
        -:  920:  }
        -:  921:
        -:  922:  /* 4. boolean false indicates "thrower" */
    #####:  923:  if (!ecma_op_is_callable (on_rejected))
        -:  924:  {
    #####:  925:    on_rejected = ECMA_VALUE_FALSE;
        -:  926:  }
        -:  927:
    #####:  928:  ecma_object_t *promise_obj_p = ecma_get_object_from_value (promise);
    #####:  929:  ecma_promise_object_t *promise_p = (ecma_promise_object_t *) promise_obj_p;
        -:  930:
    #####:  931:  uint16_t flags = ecma_promise_get_flags (promise_obj_p);
        -:  932:
    #####:  933:  if (flags & ECMA_PROMISE_IS_PENDING)
        -:  934:  {
        -:  935:    /* 7. */
        -:  936:    /* [ capability, (on_fulfilled), (on_rejected) ] */
    #####:  937:    ecma_value_t reaction_values[3];
    #####:  938:    ecma_value_t *reactions_p = reaction_values + 1;
        -:  939:
    #####:  940:    uint8_t tag = 0;
        -:  941:
    #####:  942:    if (on_fulfilled != ECMA_VALUE_TRUE)
        -:  943:    {
    #####:  944:      tag |= JMEM_FIRST_TAG_BIT_MASK;
    #####:  945:      *reactions_p++ = on_fulfilled;
        -:  946:    }
        -:  947:
    #####:  948:    if (on_rejected != ECMA_VALUE_FALSE)
        -:  949:    {
    #####:  950:      tag |= JMEM_SECOND_TAG_BIT_MASK;
    #####:  951:      *reactions_p++ = on_rejected;
        -:  952:    }
        -:  953:
    #####:  954:    ECMA_SET_NON_NULL_POINTER_TAG (reaction_values[0], result_capability_obj_p, tag);
        -:  955:
    #####:  956:    uint32_t value_count = (uint32_t) (reactions_p - reaction_values);
    #####:  957:    ecma_collection_append (promise_p->reactions, reaction_values, value_count);
        -:  958:  }
    #####:  959:  else if (flags & ECMA_PROMISE_IS_FULFILLED)
        -:  960:  {
        -:  961:    /* 8. */
    #####:  962:    ecma_value_t value = ecma_promise_get_result (promise_obj_p);
    #####:  963:    ecma_enqueue_promise_reaction_job (ecma_make_object_value (result_capability_obj_p), on_fulfilled, value);
    #####:  964:    ecma_free_value (value);
        -:  965:  }
        -:  966:  else
        -:  967:  {
        -:  968:    /* 9. */
    #####:  969:    ecma_value_t reason = ecma_promise_get_result (promise_obj_p);
    #####:  970:    ecma_enqueue_promise_reaction_job (ecma_make_object_value (result_capability_obj_p), on_rejected, reason);
    #####:  971:    ecma_free_value (reason);
        -:  972:
        -:  973:#if JERRY_PROMISE_CALLBACK
    #####:  974:    if (ecma_promise_get_flags (promise_obj_p) & ECMA_PROMISE_UNHANDLED_REJECT)
        -:  975:    {
    #####:  976:      promise_p->header.u.cls.u1.promise_flags &= (uint8_t) ~ECMA_PROMISE_UNHANDLED_REJECT;
        -:  977:
    #####:  978:      if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_ERROR))
        -:  979:      {
        -:  980:        JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####:  981:        JERRY_CONTEXT (promise_callback) (JERRY_PROMISE_EVENT_CATCH_HANDLER_ADDED,
        -:  982:                                          promise,
        -:  983:                                          ECMA_VALUE_UNDEFINED,
        -:  984:                                          JERRY_CONTEXT (promise_callback_user_p));
        -:  985:      }
        -:  986:    }
        -:  987:#endif /* JERRY_PROMISE_CALLBACK */
        -:  988:  }
        -:  989:
        -:  990:  /* 10. */
    #####:  991:  return ecma_copy_value (capability_p->header.u.cls.u3.promise);
        -:  992:} /* ecma_promise_do_then */
        -:  993:
        -:  994:/**
        -:  995: * The common function for ecma_builtin_promise_prototype_then
        -:  996: * and ecma_builtin_promise_prototype_catch.
        -:  997: *
        -:  998: * @return ecma value of a new promise object.
        -:  999: *         Returned value must be freed with ecma_free_value.
        -: 1000: */
        -: 1001:ecma_value_t
    #####: 1002:ecma_promise_then (ecma_value_t promise, /**< the promise which call 'then' */
        -: 1003:                   ecma_value_t on_fulfilled, /**< on_fulfilled function */
        -: 1004:                   ecma_value_t on_rejected) /**< on_rejected function */
        -: 1005:{
    #####: 1006:  if (!ecma_is_value_object (promise))
        -: 1007:  {
    #####: 1008:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object"));
        -: 1009:  }
        -: 1010:
    #####: 1011:  ecma_object_t *obj = ecma_get_object_from_value (promise);
        -: 1012:
    #####: 1013:  if (!ecma_is_promise (obj))
        -: 1014:  {
    #####: 1015:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not a Promise"));
        -: 1016:  }
        -: 1017:
    #####: 1018:  ecma_value_t species = ecma_op_species_constructor (obj, ECMA_BUILTIN_ID_PROMISE);
    #####: 1019:  if (ECMA_IS_VALUE_ERROR (species))
        -: 1020:  {
    #####: 1021:    return species;
        -: 1022:  }
        -: 1023:
    #####: 1024:  ecma_object_t *result_capability_obj_p = ecma_promise_new_capability (species, promise);
    #####: 1025:  ecma_free_value (species);
        -: 1026:
    #####: 1027:  if (JERRY_UNLIKELY (result_capability_obj_p == NULL))
        -: 1028:  {
    #####: 1029:    return ECMA_VALUE_ERROR;
        -: 1030:  }
        -: 1031:
    #####: 1032:  ecma_value_t ret = ecma_promise_do_then (promise, on_fulfilled, on_rejected, result_capability_obj_p);
    #####: 1033:  ecma_deref_object (result_capability_obj_p);
        -: 1034:
    #####: 1035:  return ret;
        -: 1036:} /* ecma_promise_then */
        -: 1037:
        -: 1038:/**
        -: 1039: * Definition of valueThunk function
        -: 1040: *
        -: 1041: * See also:
        -: 1042: *         ES2020 25.6.5.3.1 step 8.
        -: 1043: *
        -: 1044: * @return ecma value
        -: 1045: */
        -: 1046:ecma_value_t
    #####: 1047:ecma_value_thunk_helper_cb (ecma_object_t *function_obj_p, /**< function object */
        -: 1048:                            const ecma_value_t args_p[], /**< argument list */
        -: 1049:                            const uint32_t args_count) /**< argument number */
        -: 1050:{
        -: 1051:  JERRY_UNUSED_2 (args_p, args_count);
        -: 1052:
    #####: 1053:  ecma_promise_value_thunk_t *value_thunk_obj_p = (ecma_promise_value_thunk_t *) function_obj_p;
        -: 1054:
    #####: 1055:  return ecma_copy_value (value_thunk_obj_p->value);
        -: 1056:} /* ecma_value_thunk_helper_cb */
        -: 1057:
        -: 1058:/**
        -: 1059: * Definition of thrower function
        -: 1060: *
        -: 1061: * See also:
        -: 1062: *         ES2020 25.6.5.3.2 step 8.
        -: 1063: *
        -: 1064: * @return ecma value
        -: 1065: */
        -: 1066:ecma_value_t
    #####: 1067:ecma_value_thunk_thrower_cb (ecma_object_t *function_obj_p, /**< function object */
        -: 1068:                             const ecma_value_t args_p[], /**< argument list */
        -: 1069:                             const uint32_t args_count) /**< argument number */
        -: 1070:{
        -: 1071:  JERRY_UNUSED_2 (args_p, args_count);
        -: 1072:
    #####: 1073:  ecma_promise_value_thunk_t *value_thunk_obj_p = (ecma_promise_value_thunk_t *) function_obj_p;
        -: 1074:
    #####: 1075:  jcontext_raise_exception (ecma_copy_value (value_thunk_obj_p->value));
        -: 1076:
    #####: 1077:  return ECMA_VALUE_ERROR;
        -: 1078:} /* ecma_value_thunk_thrower_cb */
        -: 1079:
        -: 1080:/**
        -: 1081: * Helper function for Then Finally and Catch Finally common parts
        -: 1082: *
        -: 1083: * See also:
        -: 1084: *         ES2020 25.6.5.3.1
        -: 1085: *         ES2020 25.6.5.3.2
        -: 1086: *
        -: 1087: * @return ecma value
        -: 1088: */
        -: 1089:static ecma_value_t
    #####: 1090:ecma_promise_then_catch_finally_helper (ecma_object_t *function_obj_p, /**< function object */
        -: 1091:                                        ecma_native_handler_id_t id, /**< handler id */
        -: 1092:                                        ecma_value_t arg) /**< callback function argument */
        -: 1093:{
        -: 1094:  /* 2. */
    #####: 1095:  ecma_promise_finally_function_t *finally_func_obj = (ecma_promise_finally_function_t *) function_obj_p;
        -: 1096:
        -: 1097:  /* 3. */
    #####: 1098:  JERRY_ASSERT (ecma_op_is_callable (finally_func_obj->on_finally));
        -: 1099:
        -: 1100:  /* 4. */
    #####: 1101:  ecma_value_t result = ecma_op_function_call (ecma_get_object_from_value (finally_func_obj->on_finally),
        -: 1102:                                               ECMA_VALUE_UNDEFINED,
        -: 1103:                                               NULL,
        -: 1104:                                               0);
        -: 1105:
    #####: 1106:  if (ECMA_IS_VALUE_ERROR (result))
        -: 1107:  {
    #####: 1108:    return result;
        -: 1109:  }
        -: 1110:
        -: 1111:  /* 6. */
    #####: 1112:  JERRY_ASSERT (ecma_is_constructor (finally_func_obj->constructor));
        -: 1113:
        -: 1114:  /* 7. */
    #####: 1115:  ecma_value_t promise = ecma_promise_reject_or_resolve (finally_func_obj->constructor, result, true);
        -: 1116:
    #####: 1117:  ecma_free_value (result);
        -: 1118:
    #####: 1119:  if (ECMA_IS_VALUE_ERROR (promise))
        -: 1120:  {
    #####: 1121:    return promise;
        -: 1122:  }
        -: 1123:
        -: 1124:  /* 8. */
        -: 1125:  ecma_object_t *value_thunk_func_p;
    #####: 1126:  value_thunk_func_p = ecma_op_create_native_handler (id, sizeof (ecma_promise_value_thunk_t));
        -: 1127:
    #####: 1128:  ecma_promise_value_thunk_t *value_thunk_func_obj = (ecma_promise_value_thunk_t *) value_thunk_func_p;
    #####: 1129:  value_thunk_func_obj->value = ecma_copy_value_if_not_object (arg);
        -: 1130:
        -: 1131:  /* 9. */
    #####: 1132:  ecma_value_t value_thunk = ecma_make_object_value (value_thunk_func_p);
    #####: 1133:  ecma_value_t ret_value = ecma_op_invoke_by_magic_id (promise, LIT_MAGIC_STRING_THEN, &value_thunk, 1);
        -: 1134:
    #####: 1135:  ecma_free_value (promise);
    #####: 1136:  ecma_deref_object (value_thunk_func_p);
        -: 1137:
    #####: 1138:  return ret_value;
        -: 1139:} /* ecma_promise_then_catch_finally_helper */
        -: 1140:
        -: 1141:/**
        -: 1142: * Definition of Then Finally Function
        -: 1143: *
        -: 1144: * See also:
        -: 1145: *         ES2020 25.6.5.3.1
        -: 1146: *
        -: 1147: * @return ecma value
        -: 1148: */
        -: 1149:ecma_value_t
    #####: 1150:ecma_promise_then_finally_cb (ecma_object_t *function_obj_p, /**< function object */
        -: 1151:                              const ecma_value_t args_p[], /**< argument list */
        -: 1152:                              const uint32_t args_count) /**< argument number */
        -: 1153:{
        -: 1154:  JERRY_UNUSED (args_count);
    #####: 1155:  JERRY_ASSERT (args_count > 0);
        -: 1156:
    #####: 1157:  return ecma_promise_then_catch_finally_helper (function_obj_p, ECMA_NATIVE_HANDLER_VALUE_THUNK, args_p[0]);
        -: 1158:} /* ecma_promise_then_finally_cb */
        -: 1159:
        -: 1160:/**
        -: 1161: * Definition of Catch Finally Function
        -: 1162: *
        -: 1163: * See also:
        -: 1164: *         ES2020 25.6.5.3.2
        -: 1165: *
        -: 1166: * @return ecma value
        -: 1167: */
        -: 1168:ecma_value_t
    #####: 1169:ecma_promise_catch_finally_cb (ecma_object_t *function_obj_p, /**< function object */
        -: 1170:                               const ecma_value_t args_p[], /**< argument list */
        -: 1171:                               const uint32_t args_count) /**< argument number */
        -: 1172:{
        -: 1173:  JERRY_UNUSED (args_count);
    #####: 1174:  JERRY_ASSERT (args_count > 0);
        -: 1175:
    #####: 1176:  return ecma_promise_then_catch_finally_helper (function_obj_p, ECMA_NATIVE_HANDLER_VALUE_THROWER, args_p[0]);
        -: 1177:} /* ecma_promise_catch_finally_cb */
        -: 1178:
        -: 1179:/**
        -: 1180: * The common function for ecma_builtin_promise_prototype_finally
        -: 1181: *
        -: 1182: * @return ecma value of a new promise object.
        -: 1183: *         Returned value must be freed with ecma_free_value.
        -: 1184: */
        -: 1185:ecma_value_t
    #####: 1186:ecma_promise_finally (ecma_value_t promise, /**< the promise which call 'finally' */
        -: 1187:                      ecma_value_t on_finally) /**< on_finally function */
        -: 1188:{
        -: 1189:  /* 2. */
    #####: 1190:  if (!ecma_is_value_object (promise))
        -: 1191:  {
    #####: 1192:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object"));
        -: 1193:  }
        -: 1194:
    #####: 1195:  ecma_object_t *obj = ecma_get_object_from_value (promise);
        -: 1196:
        -: 1197:  /* 3. */
    #####: 1198:  ecma_value_t species = ecma_op_species_constructor (obj, ECMA_BUILTIN_ID_PROMISE);
        -: 1199:
    #####: 1200:  if (ECMA_IS_VALUE_ERROR (species))
        -: 1201:  {
    #####: 1202:    return species;
        -: 1203:  }
        -: 1204:
        -: 1205:  /* 4. */
    #####: 1206:  JERRY_ASSERT (ecma_is_constructor (species));
        -: 1207:
        -: 1208:  /* 5. */
    #####: 1209:  if (!ecma_op_is_callable (on_finally))
        -: 1210:  {
    #####: 1211:    ecma_free_value (species);
    #####: 1212:    ecma_value_t invoke_args[2] = {on_finally, on_finally};
    #####: 1213:    return ecma_op_invoke_by_magic_id (promise, LIT_MAGIC_STRING_THEN, invoke_args, 2);
        -: 1214:  }
        -: 1215:
        -: 1216:  /* 6.a-b */
        -: 1217:  ecma_object_t *then_finally_obj_p;
    #####: 1218:  then_finally_obj_p = ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROMISE_THEN_FINALLY,
        -: 1219:                                                      sizeof (ecma_promise_finally_function_t));
        -: 1220:
        -: 1221:  /* 6.c-d */
    #####: 1222:  ecma_promise_finally_function_t *then_finally_func_obj_p = (ecma_promise_finally_function_t *) then_finally_obj_p;
    #####: 1223:  then_finally_func_obj_p->constructor = species;
    #####: 1224:  then_finally_func_obj_p->on_finally = on_finally;
        -: 1225:
        -: 1226:  /* 6.e-f */
        -: 1227:  ecma_object_t *catch_finally_obj_p;
    #####: 1228:  catch_finally_obj_p = ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROMISE_CATCH_FINALLY,
        -: 1229:                                                       sizeof (ecma_promise_finally_function_t));
        -: 1230:
        -: 1231:  /* 6.g-h */
    #####: 1232:  ecma_promise_finally_function_t *catch_finally_func_obj = (ecma_promise_finally_function_t *) catch_finally_obj_p;
    #####: 1233:  catch_finally_func_obj->constructor = species;
    #####: 1234:  catch_finally_func_obj->on_finally = on_finally;
        -: 1235:
    #####: 1236:  ecma_deref_object (ecma_get_object_from_value (species));
        -: 1237:
        -: 1238:  /* 7. */
    #####: 1239:  ecma_value_t invoke_args[2] =
        -: 1240:  {
    #####: 1241:    ecma_make_object_value (then_finally_obj_p),
    #####: 1242:    ecma_make_object_value (catch_finally_obj_p)
        -: 1243:  };
        -: 1244:
    #####: 1245:  ecma_value_t ret_value = ecma_op_invoke_by_magic_id (promise, LIT_MAGIC_STRING_THEN, invoke_args, 2);
        -: 1246:
    #####: 1247:  ecma_deref_object (then_finally_obj_p);
    #####: 1248:  ecma_deref_object (catch_finally_obj_p);
        -: 1249:
    #####: 1250:  return ret_value;
        -: 1251:} /* ecma_promise_finally */
        -: 1252:
        -: 1253:/**
        -: 1254: * Resume the execution of an async function after the promise is resolved
        -: 1255: */
        -: 1256:void
    #####: 1257:ecma_promise_async_then (ecma_value_t promise, /**< promise object */
        -: 1258:                         ecma_value_t executable_object) /**< executable object of the async function */
        -: 1259:{
        -: 1260:#if JERRY_PROMISE_CALLBACK
    #####: 1261:  if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_ASYNC_MAIN))
        -: 1262:  {
        -: 1263:    JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####: 1264:    JERRY_CONTEXT (promise_callback) (JERRY_PROMISE_EVENT_ASYNC_AWAIT,
        -: 1265:                                      executable_object,
        -: 1266:                                      promise,
        -: 1267:                                      JERRY_CONTEXT (promise_callback_user_p));
        -: 1268:  }
        -: 1269:#endif /* JERRY_PROMISE_CALLBACK */
        -: 1270:
    #####: 1271:  ecma_object_t *promise_obj_p = ecma_get_object_from_value (promise);
    #####: 1272:  uint16_t flags = ecma_promise_get_flags (promise_obj_p);
        -: 1273:
    #####: 1274:  if (flags & ECMA_PROMISE_IS_PENDING)
        -: 1275:  {
        -: 1276:    ecma_value_t executable_object_with_tag;
    #####: 1277:    ECMA_SET_NON_NULL_POINTER_TAG (executable_object_with_tag, ecma_get_object_from_value (executable_object), 0);
    #####: 1278:    ECMA_SET_THIRD_BIT_TO_POINTER_TAG (executable_object_with_tag);
        -: 1279:
    #####: 1280:    ecma_collection_push_back (((ecma_promise_object_t *) promise_obj_p)->reactions, executable_object_with_tag);
    #####: 1281:    return;
        -: 1282:  }
        -: 1283:
    #####: 1284:  ecma_value_t value = ecma_promise_get_result (promise_obj_p);
    #####: 1285:  ecma_enqueue_promise_async_reaction_job (executable_object, value, !(flags & ECMA_PROMISE_IS_FULFILLED));
    #####: 1286:  ecma_free_value (value);
        -: 1287:
        -: 1288:#if JERRY_PROMISE_CALLBACK
    #####: 1289:  if (ecma_promise_get_flags (promise_obj_p) & ECMA_PROMISE_UNHANDLED_REJECT)
        -: 1290:  {
    #####: 1291:    ((ecma_extended_object_t *) promise_obj_p)->u.cls.u1.promise_flags &= (uint8_t) ~ECMA_PROMISE_UNHANDLED_REJECT;
        -: 1292:
    #####: 1293:    if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_ERROR))
        -: 1294:    {
        -: 1295:      JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####: 1296:      JERRY_CONTEXT (promise_callback) (JERRY_PROMISE_EVENT_CATCH_HANDLER_ADDED,
        -: 1297:                                        promise,
        -: 1298:                                        ECMA_VALUE_UNDEFINED,
        -: 1299:                                        JERRY_CONTEXT (promise_callback_user_p));
        -: 1300:    }
        -: 1301:  }
        -: 1302:#endif /* JERRY_PROMISE_CALLBACK */
        -: 1303:} /* ecma_promise_async_then */
        -: 1304:
        -: 1305:/**
        -: 1306: * Resolves the value and resume the execution of an async function after the resolve is completed
        -: 1307: *
        -: 1308: * @return ECMA_VALUE_UNDEFINED if not error is occured, an error otherwise
        -: 1309: */
        -: 1310:ecma_value_t
    #####: 1311:ecma_promise_async_await (ecma_extended_object_t *async_generator_object_p, /**< async generator function */
        -: 1312:                          ecma_value_t value) /**< value to be resolved (takes the reference) */
        -: 1313:{
    #####: 1314:  ecma_value_t promise = ecma_make_object_value (ecma_builtin_get (ECMA_BUILTIN_ID_PROMISE));
    #####: 1315:  ecma_value_t result = ecma_promise_reject_or_resolve (promise, value, true);
        -: 1316:
    #####: 1317:  ecma_free_value (value);
        -: 1318:
    #####: 1319:  if (ECMA_IS_VALUE_ERROR (result))
        -: 1320:  {
    #####: 1321:    return result;
        -: 1322:  }
        -: 1323:
    #####: 1324:  ecma_promise_async_then (result, ecma_make_object_value ((ecma_object_t *) async_generator_object_p));
    #####: 1325:  ecma_free_value (result);
    #####: 1326:  return ECMA_VALUE_UNDEFINED;
        -: 1327:} /* ecma_promise_async_await */
        -: 1328:
        -: 1329:/**
        -: 1330: * @}
        -: 1331: * @}
        -: 1332: */
        -: 1333:#endif /* JERRY_ESNEXT */
