        -:    0:Source:/home/workspace/tests/unit-core/test-snapshot.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "config.h"
        -:   17:#include "jerryscript.h"
        -:   18:
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:/**
        -:   22: * Maximum size of snapshots buffer
        -:   23: */
        -:   24:#define SNAPSHOT_BUFFER_SIZE (256)
        -:   25:
        -:   26:/**
        -:   27: * Maximum size of literal buffer
        -:   28: */
        -:   29:#define LITERAL_BUFFER_SIZE (256)
        -:   30:
        -:   31:/**
        -:   32: * Magic strings
        -:   33: */
        -:   34:static const jerry_char_t *magic_strings[] =
        -:   35:{
        -:   36:  (const jerry_char_t *) " ",
        -:   37:  (const jerry_char_t *) "a",
        -:   38:  (const jerry_char_t *) "b",
        -:   39:  (const jerry_char_t *) "c",
        -:   40:  (const jerry_char_t *) "from",
        -:   41:  (const jerry_char_t *) "func",
        -:   42:  (const jerry_char_t *) "string",
        -:   43:  (const jerry_char_t *) "snapshot"
        -:   44:};
        -:   45:
        -:   46:/**
        -:   47: * Magic string lengths
        -:   48: */
        -:   49:static const jerry_length_t magic_string_lengths[] =
        -:   50:{
        -:   51:  1, 1, 1, 1, 4, 4, 6, 8
        -:   52:};
        -:   53:
    #####:   54:static void test_function_snapshot (void)
        -:   55:{
        -:   56:  /* function to snapshot */
    #####:   57:  if (!jerry_is_feature_enabled (JERRY_FEATURE_SNAPSHOT_SAVE)
    #####:   58:      || !jerry_is_feature_enabled (JERRY_FEATURE_SNAPSHOT_EXEC))
        -:   59:  {
    #####:   60:    return;
        -:   61:  }
        -:   62:
    #####:   63:  const jerry_init_flag_t flags = JERRY_INIT_EMPTY;
        -:   64:  static uint32_t function_snapshot_buffer[SNAPSHOT_BUFFER_SIZE];
        -:   65:
    #####:   66:  const jerry_char_t code_to_snapshot[] = "return a + b";
        -:   67:
    #####:   68:  jerry_init (flags);
        -:   69:
        -:   70:  jerry_parse_options_t parse_options;
    #####:   71:  parse_options.options = JERRY_PARSE_HAS_ARGUMENT_LIST;
    #####:   72:  parse_options.argument_list = jerry_create_string ((const jerry_char_t *) "a, b");
        -:   73:
    #####:   74:  jerry_value_t parse_result = jerry_parse (code_to_snapshot,
        -:   75:                                            sizeof (code_to_snapshot) - 1,
        -:   76:                                            &parse_options);
    #####:   77:  TEST_ASSERT (!jerry_value_is_error (parse_result));
        -:   78:
    #####:   79:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:   80:                                                           0,
        -:   81:                                                           function_snapshot_buffer,
        -:   82:                                                           SNAPSHOT_BUFFER_SIZE);
    #####:   83:  jerry_release_value (parse_result);
    #####:   84:  jerry_release_value (parse_options.argument_list);
        -:   85:
    #####:   86:  TEST_ASSERT (!jerry_value_is_error (generate_result)
        -:   87:               && jerry_value_is_number (generate_result));
        -:   88:
    #####:   89:  size_t function_snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:   90:  jerry_release_value (generate_result);
        -:   91:
    #####:   92:  jerry_cleanup ();
        -:   93:
    #####:   94:  jerry_init (flags);
        -:   95:
    #####:   96:  jerry_value_t function_obj = jerry_exec_snapshot (function_snapshot_buffer,
        -:   97:                                                    function_snapshot_size,
        -:   98:                                                    0,
        -:   99:                                                    JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION,
        -:  100:                                                    NULL);
        -:  101:
    #####:  102:  TEST_ASSERT (!jerry_value_is_error (function_obj));
    #####:  103:  TEST_ASSERT (jerry_value_is_function (function_obj));
        -:  104:
    #####:  105:  jerry_value_t this_val = jerry_create_undefined ();
        -:  106:  jerry_value_t args[2];
    #####:  107:  args[0] = jerry_create_number (1.0);
    #####:  108:  args[1] = jerry_create_number (2.0);
        -:  109:
    #####:  110:  jerry_value_t res = jerry_call_function (function_obj, this_val, args, 2);
        -:  111:
    #####:  112:  TEST_ASSERT (!jerry_value_is_error (res));
    #####:  113:  TEST_ASSERT (jerry_value_is_number (res));
    #####:  114:  double num = jerry_get_number_value (res);
    #####:  115:  TEST_ASSERT (num == 3);
        -:  116:
    #####:  117:  jerry_release_value (args[0]);
    #####:  118:  jerry_release_value (args[1]);
    #####:  119:  jerry_release_value (res);
    #####:  120:  jerry_release_value (function_obj);
        -:  121:
    #####:  122:  jerry_cleanup ();
        -:  123:} /* test_function_snapshot */
        -:  124:
    #####:  125:static void arguments_test_exec_snapshot (uint32_t *snapshot_p, size_t snapshot_size, uint32_t exec_snapshot_flags)
        -:  126:{
    #####:  127:  jerry_init (JERRY_INIT_EMPTY);
    #####:  128:  jerry_value_t res = jerry_exec_snapshot (snapshot_p, snapshot_size, 0, exec_snapshot_flags, NULL);
    #####:  129:  TEST_ASSERT (!jerry_value_is_error (res));
    #####:  130:  TEST_ASSERT (jerry_value_is_number (res));
    #####:  131:  double raw_value = jerry_get_number_value (res);
    #####:  132:  TEST_ASSERT (raw_value == 15);
    #####:  133:  jerry_release_value (res);
        -:  134:
    #####:  135:  jerry_cleanup ();
    #####:  136:} /* arguments_test_exec_snapshot */
        -:  137:
    #####:  138:static void test_function_arguments_snapshot (void)
        -:  139:{
    #####:  140:  if (jerry_is_feature_enabled (JERRY_FEATURE_SNAPSHOT_SAVE)
    #####:  141:      && jerry_is_feature_enabled (JERRY_FEATURE_SNAPSHOT_EXEC))
        -:  142:  {
        -:  143:    static uint32_t arguments_snapshot_buffer[SNAPSHOT_BUFFER_SIZE];
        -:  144:
    #####:  145:    const jerry_char_t code_to_snapshot[] = TEST_STRING_LITERAL (
        -:  146:      "function f(a,b,c) {"
        -:  147:      "  arguments[0]++;"
        -:  148:      "  arguments[1]++;"
        -:  149:      "  arguments[2]++;"
        -:  150:      "  return a + b + c;"
        -:  151:      "}"
        -:  152:      "f(3,4,5);"
        -:  153:    );
    #####:  154:    jerry_init (JERRY_INIT_EMPTY);
        -:  155:
    #####:  156:    jerry_value_t parse_result = jerry_parse (code_to_snapshot,
        -:  157:                                              sizeof (code_to_snapshot) - 1,
        -:  158:                                              NULL);
    #####:  159:    TEST_ASSERT (!jerry_value_is_error (parse_result));
        -:  160:
    #####:  161:    jerry_value_t generate_result= jerry_generate_snapshot (parse_result,
        -:  162:                                                            0,
        -:  163:                                                            arguments_snapshot_buffer,
        -:  164:                                                            SNAPSHOT_BUFFER_SIZE);
    #####:  165:    jerry_release_value (parse_result);
        -:  166:
    #####:  167:    TEST_ASSERT (!jerry_value_is_error (generate_result)
        -:  168:                 && jerry_value_is_number (generate_result));
        -:  169:
    #####:  170:    size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:  171:    jerry_release_value (generate_result);
        -:  172:
    #####:  173:    jerry_cleanup ();
        -:  174:
    #####:  175:    arguments_test_exec_snapshot (arguments_snapshot_buffer, snapshot_size, 0);
    #####:  176:    arguments_test_exec_snapshot (arguments_snapshot_buffer, snapshot_size, JERRY_SNAPSHOT_EXEC_COPY_DATA);
        -:  177:  }
    #####:  178:} /* test_function_arguments_snapshot */
        -:  179:
    #####:  180:static void test_exec_snapshot (uint32_t *snapshot_p, size_t snapshot_size, uint32_t exec_snapshot_flags)
        -:  181:{
        -:  182:  char string_data[32];
        -:  183:
    #####:  184:  jerry_init (JERRY_INIT_EMPTY);
        -:  185:
    #####:  186:  jerry_register_magic_strings (magic_strings,
        -:  187:                                sizeof (magic_string_lengths) / sizeof (jerry_length_t),
        -:  188:                                magic_string_lengths);
        -:  189:
    #####:  190:  jerry_value_t res = jerry_exec_snapshot (snapshot_p, snapshot_size, 0, exec_snapshot_flags, NULL);
        -:  191:
    #####:  192:  TEST_ASSERT (!jerry_value_is_error (res));
    #####:  193:  TEST_ASSERT (jerry_value_is_string (res));
    #####:  194:  jerry_size_t sz = jerry_get_string_size (res);
    #####:  195:  TEST_ASSERT (sz == 20);
    #####:  196:  sz = jerry_string_to_char_buffer (res, (jerry_char_t *) string_data, sz);
    #####:  197:  TEST_ASSERT (sz == 20);
    #####:  198:  jerry_release_value (res);
    #####:  199:  TEST_ASSERT (!strncmp (string_data, "string from snapshot", (size_t) sz));
        -:  200:
    #####:  201:  jerry_cleanup ();
    #####:  202:} /* test_exec_snapshot */
        -:  203:
    #####:  204:static void test_snapshot_with_user (void)
        -:  205:{
    #####:  206:  if (jerry_is_feature_enabled (JERRY_FEATURE_SNAPSHOT_SAVE)
    #####:  207:      && jerry_is_feature_enabled (JERRY_FEATURE_SNAPSHOT_EXEC))
        -:  208:  {
        -:  209:    static uint32_t snapshot_buffer[SNAPSHOT_BUFFER_SIZE];
        -:  210:
    #####:  211:    const jerry_char_t code_to_snapshot[] = TEST_STRING_LITERAL (
        -:  212:      "function f() {}\n"
        -:  213:      "f"
        -:  214:    );
    #####:  215:    jerry_init (JERRY_INIT_EMPTY);
        -:  216:
    #####:  217:    jerry_value_t parse_result = jerry_parse (code_to_snapshot,
        -:  218:                                              sizeof (code_to_snapshot) - 1,
        -:  219:                                              NULL);
    #####:  220:    TEST_ASSERT (!jerry_value_is_error (parse_result));
        -:  221:
    #####:  222:    jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:  223:                                                             0,
        -:  224:                                                             snapshot_buffer,
        -:  225:                                                             SNAPSHOT_BUFFER_SIZE);
    #####:  226:    jerry_release_value (parse_result);
        -:  227:
    #####:  228:    TEST_ASSERT (!jerry_value_is_error (generate_result)
        -:  229:                 && jerry_value_is_number (generate_result));
        -:  230:
    #####:  231:    size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:  232:    jerry_release_value (generate_result);
        -:  233:
    #####:  234:    for (int i = 0; i < 3; i++)
        -:  235:    {
        -:  236:      jerry_exec_snapshot_option_values_t snapshot_exec_options;
        -:  237:
    #####:  238:      if (i == 0)
        -:  239:      {
    #####:  240:        snapshot_exec_options.user_value = jerry_create_object ();
        -:  241:      }
    #####:  242:      else if (i == 1)
        -:  243:      {
    #####:  244:        snapshot_exec_options.user_value = jerry_create_number (-3.5);
        -:  245:      }
        -:  246:      else
        -:  247:      {
    #####:  248:        snapshot_exec_options.user_value = jerry_create_string ((const jerry_char_t *) "AnyString...");
        -:  249:      }
        -:  250:
    #####:  251:      jerry_value_t result = jerry_exec_snapshot (snapshot_buffer,
        -:  252:                                                  snapshot_size,
        -:  253:                                                  0,
        -:  254:                                                  JERRY_SNAPSHOT_EXEC_HAS_USER_VALUE,
        -:  255:                                                  &snapshot_exec_options);
        -:  256:
    #####:  257:      TEST_ASSERT (!jerry_value_is_error (result)
        -:  258:                   && jerry_value_is_function (result));
        -:  259:
    #####:  260:      jerry_value_t user_value = jerry_get_user_value (result);
    #####:  261:      jerry_release_value (result);
        -:  262:
    #####:  263:      result = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL,
        -:  264:                                       user_value,
        -:  265:                                       snapshot_exec_options.user_value);
        -:  266:
    #####:  267:      TEST_ASSERT (jerry_value_is_true (result));
        -:  268:
    #####:  269:      jerry_release_value (result);
    #####:  270:      jerry_release_value (user_value);
    #####:  271:      jerry_release_value (snapshot_exec_options.user_value);
        -:  272:    }
        -:  273:
    #####:  274:    jerry_cleanup ();
        -:  275:  }
    #####:  276:} /* test_snapshot_with_user */
        -:  277:
        -:  278:int
    #####:  279:main (void)
        -:  280:{
    #####:  281:  TEST_INIT ();
        -:  282:
        -:  283:  /* Static snapshot */
    #####:  284:  if (jerry_is_feature_enabled (JERRY_FEATURE_SNAPSHOT_SAVE)
    #####:  285:      && jerry_is_feature_enabled (JERRY_FEATURE_SNAPSHOT_EXEC))
        -:  286:  {
        -:  287:    static uint32_t snapshot_buffer[SNAPSHOT_BUFFER_SIZE];
    #####:  288:    const jerry_char_t code_to_snapshot[] = TEST_STRING_LITERAL (
        -:  289:      "function func(a, b, c) {"
        -:  290:      "  c = 'snapshot';"
        -:  291:      "  return arguments[0] + ' ' + b + ' ' + arguments[2];"
        -:  292:      "};"
        -:  293:      "func('string', 'from');"
        -:  294:    );
        -:  295:
    #####:  296:    jerry_init (JERRY_INIT_EMPTY);
    #####:  297:    jerry_register_magic_strings (magic_strings,
        -:  298:                                  sizeof (magic_string_lengths) / sizeof (jerry_length_t),
        -:  299:                                  magic_string_lengths);
        -:  300:
    #####:  301:    jerry_value_t parse_result = jerry_parse (code_to_snapshot,
        -:  302:                                              sizeof (code_to_snapshot) - 1,
        -:  303:                                              NULL);
    #####:  304:    TEST_ASSERT (!jerry_value_is_error (parse_result));
        -:  305:
    #####:  306:    jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:  307:                                                             JERRY_SNAPSHOT_SAVE_STATIC,
        -:  308:                                                             snapshot_buffer,
        -:  309:                                                             SNAPSHOT_BUFFER_SIZE);
    #####:  310:    jerry_release_value (parse_result);
        -:  311:
    #####:  312:    TEST_ASSERT (!jerry_value_is_error (generate_result)
        -:  313:                 && jerry_value_is_number (generate_result));
        -:  314:
    #####:  315:    size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:  316:    jerry_release_value (generate_result);
        -:  317:
        -:  318:    /* Static snapshots are not supported by default. */
    #####:  319:    jerry_value_t exec_result = jerry_exec_snapshot (snapshot_buffer, snapshot_size, 0, 0, NULL);
    #####:  320:    TEST_ASSERT (jerry_value_is_error (exec_result));
    #####:  321:    jerry_release_value (exec_result);
        -:  322:
    #####:  323:    jerry_cleanup ();
        -:  324:
    #####:  325:    test_exec_snapshot (snapshot_buffer, snapshot_size, JERRY_SNAPSHOT_EXEC_ALLOW_STATIC);
        -:  326:  }
        -:  327:
        -:  328:  /* Merge snapshot */
    #####:  329:  if (jerry_is_feature_enabled (JERRY_FEATURE_SNAPSHOT_SAVE)
    #####:  330:      && jerry_is_feature_enabled (JERRY_FEATURE_SNAPSHOT_EXEC))
        -:  331:  {
        -:  332:    static uint32_t snapshot_buffer_0[SNAPSHOT_BUFFER_SIZE];
        -:  333:    static uint32_t snapshot_buffer_1[SNAPSHOT_BUFFER_SIZE];
        -:  334:    size_t snapshot_sizes[2];
        -:  335:    static uint32_t merged_snapshot_buffer[SNAPSHOT_BUFFER_SIZE];
        -:  336:
    #####:  337:    const jerry_char_t code_to_snapshot1[] = "var a = 'hello'; 123";
        -:  338:
    #####:  339:    jerry_init (JERRY_INIT_EMPTY);
        -:  340:
    #####:  341:    jerry_value_t parse_result = jerry_parse (code_to_snapshot1,
        -:  342:                                              sizeof (code_to_snapshot1) - 1,
        -:  343:                                              NULL);
    #####:  344:    TEST_ASSERT (!jerry_value_is_error (parse_result));
        -:  345:
    #####:  346:    jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:  347:                                                             0,
        -:  348:                                                             snapshot_buffer_0,
        -:  349:                                                             SNAPSHOT_BUFFER_SIZE);
    #####:  350:    jerry_release_value (parse_result);
        -:  351:
    #####:  352:    TEST_ASSERT (!jerry_value_is_error (generate_result)
        -:  353:                 && jerry_value_is_number (generate_result));
        -:  354:
    #####:  355:    snapshot_sizes[0] = (size_t) jerry_get_number_value (generate_result);
    #####:  356:    jerry_release_value (generate_result);
        -:  357:
    #####:  358:    jerry_cleanup ();
        -:  359:
    #####:  360:    const jerry_char_t code_to_snapshot2[] = "var b = 'hello'; 456";
        -:  361:
    #####:  362:    jerry_init (JERRY_INIT_EMPTY);
        -:  363:
    #####:  364:    parse_result = jerry_parse (code_to_snapshot2,
        -:  365:                                sizeof (code_to_snapshot2) - 1,
        -:  366:                                NULL);
    #####:  367:    TEST_ASSERT (!jerry_value_is_error (parse_result));
        -:  368:
    #####:  369:    generate_result = jerry_generate_snapshot (parse_result,
        -:  370:                                               0,
        -:  371:                                               snapshot_buffer_1,
        -:  372:                                               SNAPSHOT_BUFFER_SIZE);
    #####:  373:    jerry_release_value (parse_result);
        -:  374:
    #####:  375:    TEST_ASSERT (!jerry_value_is_error (generate_result)
        -:  376:                 && jerry_value_is_number (generate_result));
        -:  377:
    #####:  378:    snapshot_sizes[1] = (size_t) jerry_get_number_value (generate_result);
    #####:  379:    jerry_release_value (generate_result);
        -:  380:
    #####:  381:    jerry_cleanup ();
        -:  382:
    #####:  383:    jerry_init (JERRY_INIT_EMPTY);
        -:  384:
        -:  385:    const char *error_p;
        -:  386:    const uint32_t *snapshot_buffers[2];
        -:  387:
    #####:  388:    snapshot_buffers[0] = snapshot_buffer_0;
    #####:  389:    snapshot_buffers[1] = snapshot_buffer_1;
        -:  390:
        -:  391:    static uint32_t snapshot_buffer_0_bck[SNAPSHOT_BUFFER_SIZE];
        -:  392:    static uint32_t snapshot_buffer_1_bck[SNAPSHOT_BUFFER_SIZE];
        -:  393:
    #####:  394:    memcpy (snapshot_buffer_0_bck, snapshot_buffer_0, SNAPSHOT_BUFFER_SIZE);
    #####:  395:    memcpy (snapshot_buffer_1_bck, snapshot_buffer_1, SNAPSHOT_BUFFER_SIZE);
        -:  396:
    #####:  397:    size_t merged_size = jerry_merge_snapshots (snapshot_buffers,
        -:  398:                                                snapshot_sizes,
        -:  399:                                                2,
        -:  400:                                                merged_snapshot_buffer,
        -:  401:                                                SNAPSHOT_BUFFER_SIZE,
        -:  402:                                                &error_p);
        -:  403:
    #####:  404:    jerry_cleanup ();
        -:  405:
    #####:  406:    TEST_ASSERT (0 == memcmp (snapshot_buffer_0_bck, snapshot_buffer_0, SNAPSHOT_BUFFER_SIZE));
    #####:  407:    TEST_ASSERT (0 == memcmp (snapshot_buffer_1_bck, snapshot_buffer_1, SNAPSHOT_BUFFER_SIZE));
        -:  408:
    #####:  409:    jerry_init (JERRY_INIT_EMPTY);
        -:  410:
    #####:  411:    jerry_value_t res = jerry_exec_snapshot (merged_snapshot_buffer, merged_size, 0, 0, NULL);
    #####:  412:    TEST_ASSERT (!jerry_value_is_error (res));
    #####:  413:    TEST_ASSERT (jerry_get_number_value (res) == 123);
    #####:  414:    jerry_release_value (res);
        -:  415:
    #####:  416:    res = jerry_exec_snapshot (merged_snapshot_buffer, merged_size, 1, 0, NULL);
    #####:  417:    TEST_ASSERT (!jerry_value_is_error (res));
    #####:  418:    TEST_ASSERT (jerry_get_number_value (res) == 456);
    #####:  419:    jerry_release_value (res);
        -:  420:
    #####:  421:    jerry_cleanup ();
        -:  422:  }
        -:  423:
        -:  424:  /* Save literals */
    #####:  425:  if (jerry_is_feature_enabled (JERRY_FEATURE_SNAPSHOT_SAVE))
        -:  426:  {
        -:  427:    /* C format generation */
    #####:  428:    jerry_init (JERRY_INIT_EMPTY);
        -:  429:
        -:  430:    static jerry_char_t literal_buffer_c[LITERAL_BUFFER_SIZE];
        -:  431:    static uint32_t literal_snapshot_buffer[SNAPSHOT_BUFFER_SIZE];
        -:  432:    static const jerry_char_t code_for_c_format[] = "var object = { aa:'fo\" o\\n \\\\', Bb:'max', aaa:'xzy0' };";
        -:  433:
    #####:  434:    jerry_value_t parse_result = jerry_parse (code_for_c_format,
        -:  435:                                              sizeof (code_for_c_format) - 1,
        -:  436:                                              NULL);
    #####:  437:    TEST_ASSERT (!jerry_value_is_error (parse_result));
        -:  438:
    #####:  439:    jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:  440:                                                             0,
        -:  441:                                                             literal_snapshot_buffer,
        -:  442:                                                             SNAPSHOT_BUFFER_SIZE);
    #####:  443:    jerry_release_value (parse_result);
        -:  444:
    #####:  445:    TEST_ASSERT (!jerry_value_is_error (generate_result));
    #####:  446:    TEST_ASSERT (jerry_value_is_number (generate_result));
        -:  447:
    #####:  448:    size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:  449:    jerry_release_value (generate_result);
        -:  450:
    #####:  451:    const size_t lit_c_buf_sz = jerry_get_literals_from_snapshot (literal_snapshot_buffer,
        -:  452:                                                                  snapshot_size,
        -:  453:                                                                  literal_buffer_c,
        -:  454:                                                                  LITERAL_BUFFER_SIZE,
        -:  455:                                                                  true);
    #####:  456:    TEST_ASSERT (lit_c_buf_sz == 239);
        -:  457:
        -:  458:    static const char *expected_c_format = (
        -:  459:                                            "jerry_length_t literal_count = 5;\n\n"
        -:  460:                                            "jerry_char_t *literals[5] =\n"
        -:  461:                                            "{\n"
        -:  462:                                            "  \"Bb\",\n"
        -:  463:                                            "  \"aa\",\n"
        -:  464:                                            "  \"aaa\",\n"
        -:  465:                                            "  \"xzy0\",\n"
        -:  466:                                            "  \"fo\\\" o\\x0A \\\\\"\n"
        -:  467:                                            "};\n\n"
        -:  468:                                            "jerry_length_t literal_sizes[5] =\n"
        -:  469:                                            "{\n"
        -:  470:                                            "  2 /* Bb */,\n"
        -:  471:                                            "  2 /* aa */,\n"
        -:  472:                                            "  3 /* aaa */,\n"
        -:  473:                                            "  4 /* xzy0 */,\n"
        -:  474:                                            "  8 /* fo\" o\n \\ */\n"
        -:  475:                                            "};\n"
        -:  476:                                            );
        -:  477:
    #####:  478:    TEST_ASSERT (!strncmp ((char *) literal_buffer_c, expected_c_format, lit_c_buf_sz));
        -:  479:
        -:  480:    /* List format generation */
        -:  481:    static jerry_char_t literal_buffer_list[LITERAL_BUFFER_SIZE];
    #####:  482:    const size_t lit_list_buf_sz = jerry_get_literals_from_snapshot (literal_snapshot_buffer,
        -:  483:                                                                     snapshot_size,
        -:  484:                                                                     literal_buffer_list,
        -:  485:                                                                     LITERAL_BUFFER_SIZE,
        -:  486:                                                                     false);
    #####:  487:    TEST_ASSERT (lit_list_buf_sz == 34);
    #####:  488:    TEST_ASSERT (!strncmp ((char *) literal_buffer_list,
        -:  489:                           "2 Bb\n2 aa\n3 aaa\n4 xzy0\n8 fo\" o\n \\\n",
        -:  490:                           lit_list_buf_sz));
        -:  491:
    #####:  492:    jerry_cleanup ();
        -:  493:  }
        -:  494:
    #####:  495:  test_function_snapshot ();
        -:  496:
    #####:  497:  test_function_arguments_snapshot ();
        -:  498:
    #####:  499:  test_snapshot_with_user ();
        -:  500:
        -:  501:  return 0;
        -:  502:} /* main */
