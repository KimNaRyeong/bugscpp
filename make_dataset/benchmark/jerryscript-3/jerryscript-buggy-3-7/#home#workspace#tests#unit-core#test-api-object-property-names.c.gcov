        -:    0:Source:/home/workspace/tests/unit-core/test-api-object-property-names.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static const char *prop_names[] =
        -:   22:{
        -:   23:  "val1",
        -:   24:  "val2",
        -:   25:  "val3",
        -:   26:  "val4",
        -:   27:  "val5",
        -:   28:  "37",
        -:   29:  "symbol"
        -:   30:};
        -:   31:
        -:   32:static jerry_char_t buffer[256] = { 0 };
        -:   33:
    #####:   34:static void create_and_set_property (const jerry_value_t object, const char *prop_name)
        -:   35:{
    #####:   36:  jerry_value_t jprop_name = jerry_create_string ((const jerry_char_t *) prop_name);
    #####:   37:  jerry_value_t ret_val = jerry_set_property (object, jprop_name, jerry_create_undefined ());
        -:   38:
    #####:   39:  jerry_release_value (jprop_name);
    #####:   40:  jerry_release_value (ret_val);
    #####:   41:} /* create_and_set_property */
        -:   42:
    #####:   43:static void compare_prop_name (const jerry_value_t object, const char *prop_name, uint32_t idx)
        -:   44:{
    #####:   45:  jerry_value_t name = jerry_get_property_by_index (object, idx);
    #####:   46:  TEST_ASSERT (jerry_value_is_string (name) || jerry_value_is_number (name));
    #####:   47:  if (jerry_value_is_string (name))
        -:   48:  {
    #####:   49:    jerry_size_t name_size = jerry_get_string_size (name);
    #####:   50:    TEST_ASSERT (name_size < sizeof (buffer));
    #####:   51:    jerry_size_t ret_size = jerry_string_to_char_buffer (name, buffer, sizeof (buffer));
    #####:   52:    TEST_ASSERT (name_size == ret_size);
    #####:   53:    buffer[name_size] = '\0';
    #####:   54:    TEST_ASSERT (strcmp ((const char *) buffer, prop_name) == 0);
        -:   55:  }
        -:   56:  else
        -:   57:  {
    #####:   58:    TEST_ASSERT ((int) jerry_get_number_value (name) == atoi (prop_name));
        -:   59:  }
        -:   60:
    #####:   61:  jerry_release_value (name);
    #####:   62:} /* compare_prop_name */
        -:   63:
    #####:   64:static void define_property (const jerry_value_t object,
        -:   65:                             const char *prop_name,
        -:   66:                             jerry_property_descriptor_t *prop_desc_p,
        -:   67:                             bool is_symbol)
        -:   68:{
    #####:   69:  jerry_value_t jname = jerry_create_string ((const jerry_char_t *) prop_name);
        -:   70:  jerry_value_t ret_val;
    #####:   71:  if (is_symbol)
        -:   72:  {
    #####:   73:    jerry_value_t symbol = jerry_create_symbol (jname);
    #####:   74:    ret_val = jerry_define_own_property (object, symbol, prop_desc_p);
    #####:   75:    jerry_release_value (symbol);
        -:   76:  }
        -:   77:  else
        -:   78:  {
    #####:   79:    ret_val = jerry_define_own_property (object, jname, prop_desc_p);
        -:   80:  }
        -:   81:
    #####:   82:  jerry_release_value (jname);
    #####:   83:  jerry_release_value (ret_val);
    #####:   84:} /* define_property */
        -:   85:
        -:   86:int
    #####:   87:main (void)
        -:   88:{
    #####:   89:  if (!jerry_is_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:   90:  {
        -:   91:    return 0;
        -:   92:  }
        -:   93:
    #####:   94:  TEST_INIT ();
    #####:   95:  jerry_init (JERRY_INIT_EMPTY);
        -:   96:
    #####:   97:  jerry_value_t error_value = jerry_object_get_property_names (jerry_create_undefined (), JERRY_PROPERTY_FILTER_ALL);
    #####:   98:  TEST_ASSERT (jerry_value_is_error (error_value) && jerry_get_error_type (error_value) == JERRY_ERROR_TYPE);
    #####:   99:  jerry_release_value (error_value);
        -:  100:
    #####:  101:  jerry_value_t test_object = jerry_create_object ();
    #####:  102:  create_and_set_property (test_object, prop_names[0]);
    #####:  103:  create_and_set_property (test_object, prop_names[1]);
        -:  104:
        -:  105:  jerry_value_t names;
        -:  106:
    #####:  107:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
    #####:  108:  prop_desc.flags |= (JERRY_PROP_IS_CONFIGURABLE_DEFINED
        -:  109:                      | JERRY_PROP_IS_CONFIGURABLE
        -:  110:                      | JERRY_PROP_IS_WRITABLE_DEFINED
        -:  111:                      | JERRY_PROP_IS_WRITABLE
        -:  112:                      | JERRY_PROP_IS_ENUMERABLE_DEFINED);
        -:  113:
        -:  114:  // Test enumerable - non-enumerable filter
    #####:  115:  define_property (test_object, prop_names[2], &prop_desc, false);
    #####:  116:  names = jerry_object_get_property_names (test_object,
        -:  117:                                           JERRY_PROPERTY_FILTER_ALL | JERRY_PROPERTY_FILTER_EXLCUDE_NON_ENUMERABLE);
    #####:  118:  TEST_ASSERT (jerry_get_array_length (names) == (uint32_t) 2);
    #####:  119:  jerry_release_value (names);
    #####:  120:  names = jerry_object_get_property_names (test_object, JERRY_PROPERTY_FILTER_ALL);
    #####:  121:  TEST_ASSERT (jerry_get_array_length (names) == (uint32_t) 3);
    #####:  122:  compare_prop_name (names, prop_names[2], 2);
    #####:  123:  jerry_release_value (names);
    #####:  124:  prop_desc.flags |= JERRY_PROP_IS_ENUMERABLE;
        -:  125:
        -:  126:  // Test configurable - non-configurable filter
    #####:  127:  prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_CONFIGURABLE;
    #####:  128:  define_property (test_object, prop_names[3], &prop_desc, false);
    #####:  129:  names = jerry_object_get_property_names (test_object,
        -:  130:                                           JERRY_PROPERTY_FILTER_ALL | JERRY_PROPERTY_FILTER_EXLCUDE_NON_CONFIGURABLE);
    #####:  131:  TEST_ASSERT (jerry_get_array_length (names) == (uint32_t) 3);
    #####:  132:  jerry_release_value (names);
    #####:  133:  names = jerry_object_get_property_names (test_object, JERRY_PROPERTY_FILTER_ALL);
    #####:  134:  TEST_ASSERT (jerry_get_array_length (names) == (uint32_t) 4);
    #####:  135:  compare_prop_name (names, prop_names[3], 3);
    #####:  136:  jerry_release_value (names);
    #####:  137:  prop_desc.flags |= JERRY_PROP_IS_CONFIGURABLE;
        -:  138:
        -:  139:  // Test writable - non-writable filter
    #####:  140:  prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_WRITABLE;
    #####:  141:  define_property (test_object, prop_names[4], &prop_desc, false);
    #####:  142:  names = jerry_object_get_property_names (test_object,
        -:  143:                                           JERRY_PROPERTY_FILTER_ALL | JERRY_PROPERTY_FILTER_EXLCUDE_NON_WRITABLE);
    #####:  144:  TEST_ASSERT (jerry_get_array_length (names) == (uint32_t) 4);
    #####:  145:  jerry_release_value (names);
    #####:  146:  names = jerry_object_get_property_names (test_object, JERRY_PROPERTY_FILTER_ALL);
    #####:  147:  TEST_ASSERT (jerry_get_array_length (names) == (uint32_t) 5);
    #####:  148:  compare_prop_name (names, prop_names[4], 4);
    #####:  149:  jerry_release_value (names);
    #####:  150:  prop_desc.flags |= JERRY_PROP_IS_WRITABLE;
        -:  151:
        -:  152:  // Test all property filter
    #####:  153:  names = jerry_object_get_property_names (test_object, JERRY_PROPERTY_FILTER_ALL);
    #####:  154:  jerry_length_t array_len = jerry_get_array_length (names);
    #####:  155:  TEST_ASSERT (array_len == (uint32_t) 5);
        -:  156:
    #####:  157:  for (uint32_t i = 0; i < array_len; i++)
        -:  158:  {
    #####:  159:    compare_prop_name (names, prop_names[i], i);
        -:  160:  }
        -:  161:
    #####:  162:  jerry_release_value (names);
        -:  163:
        -:  164:  // Test number and string index exclusion
    #####:  165:  define_property (test_object, prop_names[5], &prop_desc, false);
    #####:  166:  names = jerry_object_get_property_names (test_object, JERRY_PROPERTY_FILTER_ALL
        -:  167:                                           | JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS
        -:  168:                                           | JERRY_PROPERTY_FILTER_INTEGER_INDICES_AS_NUMBER);
    #####:  169:  TEST_ASSERT (jerry_get_array_length (names) == (uint32_t) 1);
    #####:  170:  compare_prop_name (names, prop_names[5], 0);
    #####:  171:  jerry_release_value (names);
    #####:  172:  names = jerry_object_get_property_names (test_object,
        -:  173:                                           JERRY_PROPERTY_FILTER_ALL | JERRY_PROPERTY_FILTER_EXLCUDE_INTEGER_INDICES);
    #####:  174:  TEST_ASSERT (jerry_get_array_length (names) == (uint32_t) 5);
    #####:  175:  jerry_release_value (names);
        -:  176:
        -:  177:  // Test prototype chain traversion
    #####:  178:  names = jerry_object_get_property_names (test_object, JERRY_PROPERTY_FILTER_ALL);
    #####:  179:  TEST_ASSERT (jerry_get_array_length (names) == (uint32_t) 6);
    #####:  180:  jerry_release_value (names);
    #####:  181:  names = jerry_object_get_property_names (test_object,
        -:  182:                                           JERRY_PROPERTY_FILTER_ALL | JERRY_PROPERTY_FILTER_TRAVERSE_PROTOTYPE_CHAIN);
    #####:  183:  TEST_ASSERT (jerry_get_array_length (names) == (uint32_t) 18);
    #####:  184:  jerry_release_value (names);
        -:  185:
        -:  186:  // Test symbol exclusion
    #####:  187:  define_property (test_object, prop_names[6], &prop_desc, true);
    #####:  188:  names = jerry_object_get_property_names (test_object,
        -:  189:                                           JERRY_PROPERTY_FILTER_ALL | JERRY_PROPERTY_FILTER_EXLCUDE_SYMBOLS);
    #####:  190:  TEST_ASSERT (jerry_get_array_length (names) == (uint32_t) 6);
    #####:  191:  jerry_release_value (names);
    #####:  192:  names = jerry_object_get_property_names (test_object, JERRY_PROPERTY_FILTER_ALL);
    #####:  193:  TEST_ASSERT (jerry_get_array_length (names) == (uint32_t) 7);
    #####:  194:  jerry_release_value (names);
        -:  195:
    #####:  196:  jerry_property_descriptor_free (&prop_desc);
    #####:  197:  jerry_release_value (test_object);
    #####:  198:  jerry_cleanup ();
    #####:  199:  return 0;
        -:  200:} /* main */
