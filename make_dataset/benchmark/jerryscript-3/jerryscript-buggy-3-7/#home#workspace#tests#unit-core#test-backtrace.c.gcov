        -:    0:Source:/home/workspace/tests/unit-core/test-backtrace.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "config.h"
        -:   17:#include "jerryscript.h"
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:static jerry_value_t
    #####:   21:backtrace_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   22:                   const jerry_value_t args_p[], /**< argument list */
        -:   23:                   const jerry_length_t args_count) /**< argument count */
        -:   24:{
        -:   25:  JERRY_UNUSED (call_info_p);
        -:   26:
    #####:   27:  uint32_t max_depth = 0;
        -:   28:
    #####:   29:  if (args_count >= 1 && jerry_value_is_number (args_p[0]))
        -:   30:  {
    #####:   31:    max_depth = (uint32_t) jerry_get_number_value (args_p[0]);
        -:   32:  }
        -:   33:
    #####:   34:  return jerry_get_backtrace (max_depth);
        -:   35:} /* backtrace_handler */
        -:   36:
        -:   37:static void
    #####:   38:compare_string (jerry_value_t left_value, /* string value */
        -:   39:                const char *right_p) /* string to compare */
        -:   40:{
        -:   41:  jerry_char_t buffer[64];
    #####:   42:  size_t length = strlen (right_p);
        -:   43:
    #####:   44:  TEST_ASSERT (length <= sizeof (buffer));
    #####:   45:  TEST_ASSERT (jerry_value_is_string (left_value));
    #####:   46:  TEST_ASSERT (jerry_get_string_size (left_value) == length);
        -:   47:
    #####:   48:  TEST_ASSERT (jerry_string_to_char_buffer (left_value, buffer, sizeof (buffer)) == length);
    #####:   49:  TEST_ASSERT (memcmp (buffer, right_p, length) == 0);
    #####:   50:} /* compare_string */
        -:   51:
        -:   52:static const jerry_value_t *handler_args_p;
        -:   53:static int frame_index;
        -:   54:
        -:   55:static bool
    #####:   56:backtrace_callback (jerry_backtrace_frame_t *frame_p, /* frame information */
        -:   57:                    void *user_p) /* user data */
        -:   58:{
    #####:   59:  TEST_ASSERT ((void *) handler_args_p == user_p);
    #####:   60:  TEST_ASSERT (jerry_backtrace_get_frame_type (frame_p) == JERRY_BACKTRACE_FRAME_JS);
        -:   61:
    #####:   62:  const jerry_backtrace_location_t *location_p = jerry_backtrace_get_location (frame_p);
    #####:   63:  const jerry_value_t *function_p = jerry_backtrace_get_function (frame_p);
    #####:   64:  const jerry_value_t *this_p = jerry_backtrace_get_this (frame_p);
        -:   65:
    #####:   66:  TEST_ASSERT (location_p != NULL);
    #####:   67:  TEST_ASSERT (function_p != NULL);
    #####:   68:  TEST_ASSERT (this_p != NULL);
        -:   69:
    #####:   70:  compare_string (location_p->resource_name, "capture_test.js");
        -:   71:
    #####:   72:  ++frame_index;
        -:   73:
    #####:   74:  if (frame_index == 1)
        -:   75:  {
    #####:   76:    TEST_ASSERT (!jerry_backtrace_is_strict (frame_p));
    #####:   77:    TEST_ASSERT (location_p->line == 2);
    #####:   78:    TEST_ASSERT (location_p->column == 3);
    #####:   79:    TEST_ASSERT (handler_args_p[0] == *function_p);
    #####:   80:    TEST_ASSERT (handler_args_p[1] == *this_p);
        -:   81:    return true;
        -:   82:  }
        -:   83:
    #####:   84:  if (frame_index == 2)
        -:   85:  {
    #####:   86:    TEST_ASSERT (jerry_backtrace_is_strict (frame_p));
    #####:   87:    TEST_ASSERT (location_p->line == 7);
    #####:   88:    TEST_ASSERT (location_p->column == 6);
    #####:   89:    TEST_ASSERT (handler_args_p[2] == *function_p);
    #####:   90:    TEST_ASSERT (jerry_value_is_undefined (*this_p));
        -:   91:    return true;
        -:   92:  }
        -:   93:
    #####:   94:  jerry_value_t global = jerry_get_global_object ();
        -:   95:
    #####:   96:  TEST_ASSERT (frame_index == 3);
    #####:   97:  TEST_ASSERT (!jerry_backtrace_is_strict (frame_p));
    #####:   98:  TEST_ASSERT (location_p->line == 11);
    #####:   99:  TEST_ASSERT (location_p->column == 3);
    #####:  100:  TEST_ASSERT (handler_args_p[3] == *function_p);
    #####:  101:  TEST_ASSERT (global == *this_p);
        -:  102:
    #####:  103:  jerry_release_value (global);
    #####:  104:  return false;
        -:  105:} /* backtrace_callback */
        -:  106:
        -:  107:static bool
    #####:  108:async_backtrace_callback (jerry_backtrace_frame_t *frame_p, /* frame information */
        -:  109:                          void *user_p) /* user data */
        -:  110:{
    #####:  111:  TEST_ASSERT ((void *) handler_args_p == user_p);
    #####:  112:  TEST_ASSERT (jerry_backtrace_get_frame_type (frame_p) == JERRY_BACKTRACE_FRAME_JS);
        -:  113:
    #####:  114:  const jerry_backtrace_location_t *location_p = jerry_backtrace_get_location (frame_p);
    #####:  115:  const jerry_value_t *function_p = jerry_backtrace_get_function (frame_p);
        -:  116:
    #####:  117:  TEST_ASSERT (location_p != NULL);
    #####:  118:  TEST_ASSERT (function_p != NULL);
        -:  119:
    #####:  120:  compare_string (location_p->resource_name, "async_capture_test.js");
        -:  121:
    #####:  122:  ++frame_index;
        -:  123:
    #####:  124:  if (frame_index == 1)
        -:  125:  {
    #####:  126:    TEST_ASSERT (jerry_backtrace_is_strict (frame_p));
    #####:  127:    TEST_ASSERT (location_p->line == 3);
    #####:  128:    TEST_ASSERT (location_p->column == 3);
    #####:  129:    TEST_ASSERT (handler_args_p[0] == *function_p);
        -:  130:    return true;
        -:  131:  }
        -:  132:
    #####:  133:  TEST_ASSERT (frame_index == 2);
    #####:  134:  TEST_ASSERT (!jerry_backtrace_is_strict (frame_p));
    #####:  135:  TEST_ASSERT (location_p->line == 8);
    #####:  136:  TEST_ASSERT (location_p->column == 3);
    #####:  137:  TEST_ASSERT (handler_args_p[1] == *function_p);
        -:  138:  return true;
        -:  139:} /* async_backtrace_callback */
        -:  140:
        -:  141:static bool
    #####:  142:class_backtrace_callback (jerry_backtrace_frame_t *frame_p, /* frame information */
        -:  143:                          void *user_p) /* user data */
        -:  144:{
    #####:  145:  TEST_ASSERT ((void *) handler_args_p == user_p);
    #####:  146:  TEST_ASSERT (jerry_backtrace_get_frame_type (frame_p) == JERRY_BACKTRACE_FRAME_JS);
        -:  147:
    #####:  148:  const jerry_backtrace_location_t *location_p = jerry_backtrace_get_location (frame_p);
    #####:  149:  const jerry_value_t *function_p = jerry_backtrace_get_function (frame_p);
        -:  150:
    #####:  151:  TEST_ASSERT (location_p != NULL);
    #####:  152:  TEST_ASSERT (function_p != NULL);
        -:  153:
    #####:  154:  compare_string (location_p->resource_name, "class_capture_test.js");
        -:  155:
    #####:  156:  ++frame_index;
        -:  157:
    #####:  158:  if (frame_index == 1)
        -:  159:  {
    #####:  160:    TEST_ASSERT (jerry_backtrace_is_strict (frame_p));
    #####:  161:    TEST_ASSERT (location_p->line == 3);
    #####:  162:    TEST_ASSERT (location_p->column == 14);
        -:  163:    return false;
        -:  164:  }
        -:  165:
    #####:  166:  TEST_ASSERT (frame_index == 2);
    #####:  167:  TEST_ASSERT (jerry_backtrace_is_strict (frame_p));
    #####:  168:  TEST_ASSERT (location_p->line == 2);
    #####:  169:  TEST_ASSERT (location_p->column == 7);
        -:  170:  return false;
        -:  171:} /* class_backtrace_callback */
        -:  172:
        -:  173:static jerry_value_t
    #####:  174:capture_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:  175:                 const jerry_value_t args_p[], /**< argument list */
        -:  176:                 const jerry_length_t args_count) /**< argument count */
        -:  177:{
        -:  178:  JERRY_UNUSED (call_info_p);
        -:  179:  JERRY_UNUSED (args_p);
        -:  180:  JERRY_UNUSED (args_count);
        -:  181:
    #####:  182:  TEST_ASSERT (args_count == 0 || args_count == 2 || args_count == 4);
    #####:  183:  TEST_ASSERT (args_count == 0 || frame_index == 0);
        -:  184:
    #####:  185:  jerry_backtrace_callback_t callback = backtrace_callback;
        -:  186:
    #####:  187:  if (args_count == 0)
        -:  188:  {
        -:  189:    callback = class_backtrace_callback;
        -:  190:  }
    #####:  191:  else if (args_count == 2)
        -:  192:  {
    #####:  193:    callback = async_backtrace_callback;
        -:  194:  }
        -:  195:
    #####:  196:  handler_args_p = args_p;
    #####:  197:  jerry_backtrace_capture (callback, (void *) args_p);
        -:  198:
    #####:  199:  TEST_ASSERT (args_count == 0 || frame_index == (args_count == 4 ? 3 : 2));
        -:  200:
    #####:  201:  return jerry_create_undefined ();
        -:  202:} /* capture_handler */
        -:  203:
        -:  204:static void
    #####:  205:register_callback (jerry_external_handler_t handler_p, /**< callback function */
        -:  206:                   char *name_p) /**< name of the function */
        -:  207:{
    #####:  208:  jerry_value_t global = jerry_get_global_object ();
        -:  209:
    #####:  210:  jerry_value_t func = jerry_create_external_function (handler_p);
    #####:  211:  jerry_value_t name = jerry_create_string ((const jerry_char_t *) name_p);
    #####:  212:  jerry_value_t result = jerry_set_property (global, name, func);
    #####:  213:  TEST_ASSERT (!jerry_value_is_error (result));
        -:  214:
    #####:  215:  jerry_release_value (result);
    #####:  216:  jerry_release_value (name);
    #####:  217:  jerry_release_value (func);
        -:  218:
    #####:  219:  jerry_release_value (global);
    #####:  220:} /* register_callback */
        -:  221:
        -:  222:static jerry_value_t
    #####:  223:run (const char *resource_name_p, /**< resource name */
        -:  224:     const char *source_p) /**< source code */
        -:  225:{
        -:  226:  jerry_parse_options_t parse_options;
    #####:  227:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
    #####:  228:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) resource_name_p);
        -:  229:
    #####:  230:  jerry_value_t code = jerry_parse ((const jerry_char_t *) source_p,
        -:  231:                                    strlen (source_p),
        -:  232:                                    &parse_options);
    #####:  233:  jerry_release_value (parse_options.resource_name);
    #####:  234:  TEST_ASSERT (!jerry_value_is_error (code));
        -:  235:
    #####:  236:  jerry_value_t result = jerry_run (code);
    #####:  237:  jerry_release_value (code);
        -:  238:
    #####:  239:  return result;
        -:  240:} /* run */
        -:  241:
        -:  242:static void
    #####:  243:compare (jerry_value_t array, /**< array */
        -:  244:         uint32_t index, /**< item index */
        -:  245:         const char *str) /**< string to compare */
        -:  246:{
        -:  247:  jerry_char_t buf[64];
        -:  248:
    #####:  249:  size_t len = strlen (str);
        -:  250:
    #####:  251:  TEST_ASSERT (len < sizeof (buf));
        -:  252:
    #####:  253:  jerry_value_t value = jerry_get_property_by_index (array, index);
        -:  254:
    #####:  255:  TEST_ASSERT (!jerry_value_is_error (value)
        -:  256:               && jerry_value_is_string (value));
        -:  257:
    #####:  258:  TEST_ASSERT (jerry_get_string_size (value) == len);
        -:  259:
    #####:  260:  jerry_size_t str_len = jerry_string_to_char_buffer (value, buf, (jerry_size_t) len);
    #####:  261:  TEST_ASSERT (str_len == len);
        -:  262:
    #####:  263:  jerry_release_value (value);
        -:  264:
    #####:  265:  TEST_ASSERT (memcmp (buf, str, len) == 0);
    #####:  266:} /* compare */
        -:  267:
        -:  268:static void
    #####:  269:test_get_backtrace_api_call (void)
        -:  270:{
    #####:  271:  jerry_init (JERRY_INIT_EMPTY);
        -:  272:
    #####:  273:  register_callback (backtrace_handler, "backtrace");
    #####:  274:  register_callback (capture_handler, "capture");
        -:  275:
    #####:  276:  const char *source_p = ("function f() {\n"
        -:  277:                          "  return backtrace(0);\n"
        -:  278:                          "}\n"
        -:  279:                          "\n"
        -:  280:                          "function g() {\n"
        -:  281:                          "  return f();\n"
        -:  282:                          "}\n"
        -:  283:                          "\n"
        -:  284:                          "function h() {\n"
        -:  285:                          "  return g();\n"
        -:  286:                          "}\n"
        -:  287:                          "\n"
        -:  288:                          "h();\n");
        -:  289:
    #####:  290:  jerry_value_t backtrace = run ("something.js", source_p);
        -:  291:
    #####:  292:  TEST_ASSERT (!jerry_value_is_error (backtrace)
        -:  293:               && jerry_value_is_array (backtrace));
        -:  294:
    #####:  295:  TEST_ASSERT (jerry_get_array_length (backtrace) == 4);
        -:  296:
    #####:  297:  compare (backtrace, 0, "something.js:2:3");
    #####:  298:  compare (backtrace, 1, "something.js:6:3");
    #####:  299:  compare (backtrace, 2, "something.js:10:3");
    #####:  300:  compare (backtrace, 3, "something.js:13:1");
        -:  301:
    #####:  302:  jerry_release_value (backtrace);
        -:  303:
        -:  304:  /* Depth set to 2 this time. */
        -:  305:
    #####:  306:  source_p = ("function f() {\n"
        -:  307:              "  1; return backtrace(2);\n"
        -:  308:              "}\n"
        -:  309:              "\n"
        -:  310:              "function g() {\n"
        -:  311:              "  return f();\n"
        -:  312:              "}\n"
        -:  313:              "\n"
        -:  314:              "function h() {\n"
        -:  315:              "  return g();\n"
        -:  316:              "}\n"
        -:  317:              "\n"
        -:  318:              "h();\n");
        -:  319:
    #####:  320:  backtrace = run ("something_else.js", source_p);
        -:  321:
    #####:  322:  TEST_ASSERT (!jerry_value_is_error (backtrace)
        -:  323:               && jerry_value_is_array (backtrace));
        -:  324:
    #####:  325:  TEST_ASSERT (jerry_get_array_length (backtrace) == 2);
        -:  326:
    #####:  327:  compare (backtrace, 0, "something_else.js:2:6");
    #####:  328:  compare (backtrace, 1, "something_else.js:6:3");
        -:  329:
    #####:  330:  jerry_release_value (backtrace);
        -:  331:
        -:  332:  /* Test frame capturing. */
        -:  333:
    #####:  334:  frame_index = 0;
    #####:  335:  source_p = ("var o = { f:function() {\n"
        -:  336:              "  return capture(o.f, o, g, h);\n"
        -:  337:              "} }\n"
        -:  338:              "\n"
        -:  339:              "function g() {\n"
        -:  340:              "  'use strict';\n"
        -:  341:              "  1; return o.f();\n"
        -:  342:              "}\n"
        -:  343:              "\n"
        -:  344:              "function h() {\n"
        -:  345:              "  return g();\n"
        -:  346:              "}\n"
        -:  347:              "\n"
        -:  348:              "h();\n");
        -:  349:
    #####:  350:  jerry_value_t result = run ("capture_test.js", source_p);
        -:  351:
    #####:  352:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  353:  jerry_release_value (result);
        -:  354:
    #####:  355:  TEST_ASSERT (frame_index == 3);
        -:  356:
        -:  357:  /* Test async frame capturing. */
    #####:  358:  source_p = "async function f() {}";
    #####:  359:  result = jerry_eval ((const jerry_char_t *) source_p, strlen (source_p), JERRY_PARSE_NO_OPTS);
        -:  360:
    #####:  361:  if (!jerry_value_is_error (result))
        -:  362:  {
    #####:  363:    jerry_release_value (result);
        -:  364:
    #####:  365:    frame_index = 0;
    #####:  366:    source_p = ("function f() {\n"
        -:  367:                "  'use strict';\n"
        -:  368:                "  return capture(f, g);\n"
        -:  369:                "}\n"
        -:  370:                "\n"
        -:  371:                "async function g() {\n"
        -:  372:                "  await 0;\n"
        -:  373:                "  return f();\n"
        -:  374:                "}\n"
        -:  375:                "\n"
        -:  376:                "g();\n");
        -:  377:
    #####:  378:    result = run ("async_capture_test.js", source_p);
        -:  379:
    #####:  380:    TEST_ASSERT (jerry_value_is_promise (result));
    #####:  381:    jerry_release_value (result);
        -:  382:
    #####:  383:    TEST_ASSERT (frame_index == 0);
        -:  384:
    #####:  385:    result = jerry_run_all_enqueued_jobs ();
    #####:  386:    TEST_ASSERT (!jerry_value_is_error (result));
        -:  387:
    #####:  388:    TEST_ASSERT (frame_index == 2);
        -:  389:  }
        -:  390:  else
        -:  391:  {
    #####:  392:    TEST_ASSERT (jerry_get_error_type (result) == JERRY_ERROR_SYNTAX);
        -:  393:  }
        -:  394:
    #####:  395:  jerry_release_value (result);
        -:  396:
        -:  397:  /* Test class initializer frame capturing. */
    #####:  398:  source_p = "class C {}";
    #####:  399:  result = jerry_eval ((const jerry_char_t *) source_p, strlen (source_p), JERRY_PARSE_NO_OPTS);
        -:  400:
    #####:  401:  if (!jerry_value_is_error (result))
        -:  402:  {
    #####:  403:    jerry_release_value (result);
        -:  404:
    #####:  405:    frame_index = 0;
    #####:  406:    source_p = ("class C {\n"
        -:  407:                "  a = capture();\n"
        -:  408:                "  static b = capture();\n"
        -:  409:                "}\n"
        -:  410:                "new C;\n");
        -:  411:
    #####:  412:    result = run ("class_capture_test.js", source_p);
        -:  413:
    #####:  414:    TEST_ASSERT (!jerry_value_is_error (result));
    #####:  415:    TEST_ASSERT (frame_index == 2);
        -:  416:  }
        -:  417:  else
        -:  418:  {
    #####:  419:    TEST_ASSERT (jerry_get_error_type (result) == JERRY_ERROR_SYNTAX);
        -:  420:  }
        -:  421:
    #####:  422:  jerry_release_value (result);
        -:  423:
    #####:  424:  jerry_cleanup ();
    #####:  425:} /* test_get_backtrace_api_call */
        -:  426:
        -:  427:static void
    #####:  428:test_exception_backtrace (void)
        -:  429:{
    #####:  430:  jerry_init (JERRY_INIT_EMPTY);
        -:  431:
    #####:  432:  const char *source = ("function f() {\n"
        -:  433:                        "  undef_reference;\n"
        -:  434:                        "}\n"
        -:  435:                        "\n"
        -:  436:                        "function g() {\n"
        -:  437:                        "  return f();\n"
        -:  438:                        "}\n"
        -:  439:                        "\n"
        -:  440:                        "g();\n");
        -:  441:
    #####:  442:  jerry_value_t error = run ("bad.js", source);
        -:  443:
    #####:  444:  TEST_ASSERT (jerry_value_is_error (error));
        -:  445:
    #####:  446:  error = jerry_get_value_from_error (error, true);
        -:  447:
    #####:  448:  TEST_ASSERT (jerry_value_is_object (error));
        -:  449:
    #####:  450:  jerry_value_t name = jerry_create_string ((const jerry_char_t *) "stack");
    #####:  451:  jerry_value_t backtrace = jerry_get_property (error, name);
        -:  452:
    #####:  453:  jerry_release_value (name);
    #####:  454:  jerry_release_value (error);
        -:  455:
    #####:  456:  TEST_ASSERT (!jerry_value_is_error (backtrace)
        -:  457:               && jerry_value_is_array (backtrace));
        -:  458:
    #####:  459:  TEST_ASSERT (jerry_get_array_length (backtrace) == 3);
        -:  460:
    #####:  461:  compare (backtrace, 0, "bad.js:2:3");
    #####:  462:  compare (backtrace, 1, "bad.js:6:3");
    #####:  463:  compare (backtrace, 2, "bad.js:9:1");
        -:  464:
    #####:  465:  jerry_release_value (backtrace);
        -:  466:
    #####:  467:  jerry_cleanup ();
    #####:  468:} /* test_exception_backtrace */
        -:  469:
        -:  470:static void
    #####:  471:test_large_line_count (void)
        -:  472:{
    #####:  473:  jerry_init (JERRY_INIT_EMPTY);
        -:  474:
    #####:  475:  const char *source = ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  476:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  477:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  478:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  479:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  480:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  481:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  482:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  483:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  484:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  485:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  486:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  487:                        "g();\n");
        -:  488:
    #####:  489:  jerry_value_t error = run ("bad.js", source);
        -:  490:
    #####:  491:  TEST_ASSERT (jerry_value_is_error (error));
        -:  492:
    #####:  493:  error = jerry_get_value_from_error (error, true);
        -:  494:
    #####:  495:  TEST_ASSERT (jerry_value_is_object (error));
        -:  496:
    #####:  497:  jerry_value_t name = jerry_create_string ((const jerry_char_t *) "stack");
    #####:  498:  jerry_value_t backtrace = jerry_get_property (error, name);
        -:  499:
    #####:  500:  jerry_release_value (name);
    #####:  501:  jerry_release_value (error);
        -:  502:
    #####:  503:  TEST_ASSERT (!jerry_value_is_error (backtrace)
        -:  504:               && jerry_value_is_array (backtrace));
        -:  505:
    #####:  506:  TEST_ASSERT (jerry_get_array_length (backtrace) == 1);
        -:  507:
    #####:  508:  compare (backtrace, 0, "bad.js:385:1");
        -:  509:
    #####:  510:  jerry_release_value (backtrace);
        -:  511:
    #####:  512:  jerry_cleanup ();
    #####:  513:} /* test_large_line_count */
        -:  514:
        -:  515:int
    #####:  516:main (void)
        -:  517:{
    #####:  518:  TEST_INIT ();
        -:  519:
    #####:  520:  TEST_ASSERT (jerry_is_feature_enabled (JERRY_FEATURE_LINE_INFO));
        -:  521:
    #####:  522:  test_get_backtrace_api_call ();
    #####:  523:  test_exception_backtrace ();
    #####:  524:  test_large_line_count ();
        -:  525:
        -:  526:  return 0;
        -:  527:} /* main */
