        -:    0:Source:/home/workspace/jerry-core/ecma/base/ecma-init-finalize.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtins.h"
        -:   17:#include "ecma-gc.h"
        -:   18:#include "ecma-helpers.h"
        -:   19:#include "ecma-init-finalize.h"
        -:   20:#include "ecma-lex-env.h"
        -:   21:#include "ecma-literal-storage.h"
        -:   22:#include "jmem.h"
        -:   23:#include "jcontext.h"
        -:   24:
        -:   25:/** \addtogroup ecma ECMA
        -:   26: * @{
        -:   27: *
        -:   28: * \addtogroup ecmainitfinalize Initialization and finalization of ECMA components
        -:   29: * @{
        -:   30: */
        -:   31:
        -:   32:/**
        -:   33: * Maximum number of GC loops on cleanup.
        -:   34: */
        -:   35:#define JERRY_GC_LOOP_LIMIT 100
        -:   36:
        -:   37:/**
        -:   38: * Initialize ECMA components
        -:   39: */
        -:   40:void
        1:   41:ecma_init (void)
        -:   42:{
        -:   43:#if (JERRY_GC_MARK_LIMIT != 0)
        1:   44:  JERRY_CONTEXT (ecma_gc_mark_recursion_limit) = JERRY_GC_MARK_LIMIT;
        -:   45:#endif /* (JERRY_GC_MARK_LIMIT != 0) */
        -:   46:
        1:   47:  ecma_init_global_environment ();
        -:   48:
        -:   49:#if JERRY_PROPERTY_HASHMAP
        1:   50:  JERRY_CONTEXT (ecma_prop_hashmap_alloc_state) = ECMA_PROP_HASHMAP_ALLOC_ON;
        1:   51:  JERRY_CONTEXT (status_flags) &= (uint32_t) ~ECMA_STATUS_HIGH_PRESSURE_GC;
        -:   52:#endif /* JERRY_PROPERTY_HASHMAP */
        -:   53:
        -:   54:#if (JERRY_STACK_LIMIT != 0)
        1:   55:  volatile int sp;
        1:   56:  JERRY_CONTEXT (stack_base) = (uintptr_t) &sp;
        -:   57:#endif /* (JERRY_STACK_LIMIT != 0) */
        -:   58:
        -:   59:#if JERRY_ESNEXT
        1:   60:  ecma_job_queue_init ();
        -:   61:#endif /* JERRY_ESNEXT */
        -:   62:
        -:   63:#if JERRY_ESNEXT
        1:   64:  JERRY_CONTEXT (current_new_target_p) = NULL;
        -:   65:#endif /* JERRY_ESNEXT */
        1:   66:} /* ecma_init */
        -:   67:
        -:   68:/**
        -:   69: * Finalize ECMA components
        -:   70: */
        -:   71:void
        1:   72:ecma_finalize (void)
        -:   73:{
        -:   74:#if JERRY_ESNEXT
        1:   75:  JERRY_ASSERT (JERRY_CONTEXT (current_new_target_p) == NULL);
        -:   76:#endif /* JERRY_ESNEXT */
        -:   77:
        1:   78:  ecma_finalize_global_environment ();
        1:   79:  uint8_t runs = 0;
        -:   80:
        -:   81:  do
        -:   82:  {
        1:   83:    ecma_gc_run ();
        1:   84:    if (++runs >= JERRY_GC_LOOP_LIMIT)
        -:   85:    {
    #####:   86:      jerry_fatal (ERR_UNTERMINATED_GC_LOOPS);
        -:   87:    }
        -:   88:  }
        1:   89:  while (JERRY_CONTEXT (ecma_gc_new_objects) != 0);
        -:   90:
        -:   91:#if JERRY_ESNEXT
        1:   92:  jmem_cpointer_t *global_symbols_cp = JERRY_CONTEXT (global_symbols_cp);
        -:   93:
       14:   94:  for (uint32_t i = 0; i < ECMA_BUILTIN_GLOBAL_SYMBOL_COUNT; i++)
        -:   95:  {
       13:   96:    if (global_symbols_cp[i] != JMEM_CP_NULL)
        -:   97:    {
        1:   98:      ecma_deref_ecma_string (ECMA_GET_NON_NULL_POINTER (ecma_string_t, global_symbols_cp[i]));
        -:   99:    }
        -:  100:  }
        -:  101:#endif /* JERRY_ESNEXT */
        -:  102:
        1:  103:  ecma_finalize_lit_storage ();
        1:  104:} /* ecma_finalize */
        -:  105:
        -:  106:/**
        -:  107: * @}
        -:  108: * @}
        -:  109: */
