        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-promise-prototype.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-globals.h"
        -:   17:#include "ecma-promise-object.h"
        -:   18:
        -:   19:#if JERRY_ESNEXT
        -:   20:
        -:   21:#define ECMA_BUILTINS_INTERNAL
        -:   22:#include "ecma-builtins-internal.h"
        -:   23:
        -:   24:/**
        -:   25: * This object has a custom dispatch function.
        -:   26: */
        -:   27:#define BUILTIN_CUSTOM_DISPATCH
        -:   28:
        -:   29:/**
        -:   30: * List of built-in routine identifiers.
        -:   31: */
        -:   32:enum
        -:   33:{
        -:   34:  ECMA_PROMISE_PROTOTYPE_ROUTINE_START = 0,
        -:   35:  ECMA_PROMISE_PROTOTYPE_ROUTINE_THEN,
        -:   36:  ECMA_PROMISE_PROTOTYPE_ROUTINE_CATCH,
        -:   37:  ECMA_PROMISE_PROTOTYPE_ROUTINE_FINALLY
        -:   38:};
        -:   39:
        -:   40:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-promise-prototype.inc.h"
        -:   41:#define BUILTIN_UNDERSCORED_ID promise_prototype
        -:   42:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   43:
        -:   44:/** \addtogroup ecma ECMA
        -:   45: * @{
        -:   46: *
        -:   47: * \addtogroup ecmabuiltins
        -:   48: * @{
        -:   49: *
        -:   50: * \addtogroup promiseprototype ECMA Promise.prototype object built-in
        -:   51: * @{
        -:   52: */
        -:   53:
        -:   54:/**
        -:   55: * Dispatcher of the built-in's routines
        -:   56: *
        -:   57: * @return ecma value
        -:   58: *         Returned value must be freed with ecma_free_value.
        -:   59: */
        -:   60:ecma_value_t
    #####:   61:ecma_builtin_promise_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:   62:                                                 ecma_value_t this_arg, /**< 'this' argument value */
        -:   63:                                                 const ecma_value_t arguments_list_p[], /**< list of arguments
        -:   64:                                                                                         *   passed to routine */
        -:   65:                                                 uint32_t arguments_number) /**< length of arguments' list */
        -:   66:{
        -:   67:  JERRY_UNUSED (arguments_number);
        -:   68:
    #####:   69:  switch (builtin_routine_id)
        -:   70:  {
    #####:   71:    case ECMA_PROMISE_PROTOTYPE_ROUTINE_THEN:
        -:   72:    {
    #####:   73:      return ecma_promise_then (this_arg, arguments_list_p[0], arguments_list_p[1]);
        -:   74:    }
    #####:   75:    case ECMA_PROMISE_PROTOTYPE_ROUTINE_CATCH:
        -:   76:    {
    #####:   77:      ecma_value_t args[] = {ECMA_VALUE_UNDEFINED, arguments_list_p[0]};
    #####:   78:      return ecma_op_invoke_by_magic_id (this_arg, LIT_MAGIC_STRING_THEN, args, 2);
        -:   79:    }
    #####:   80:    case ECMA_PROMISE_PROTOTYPE_ROUTINE_FINALLY:
        -:   81:    {
    #####:   82:      return ecma_promise_finally (this_arg, arguments_list_p[0]);
        -:   83:    }
    #####:   84:    default:
        -:   85:    {
    #####:   86:      JERRY_UNREACHABLE ();
        -:   87:    }
        -:   88:  }
        -:   89:} /* ecma_builtin_promise_prototype_dispatch_routine */
        -:   90:
        -:   91:/**
        -:   92: * @}
        -:   93: * @}
        -:   94: * @}
        -:   95: */
        -:   96:
        -:   97:#endif /* JERRY_ESNEXT */
