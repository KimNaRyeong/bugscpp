        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-array.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-builtin-helpers.h"
        -:   19:#include "ecma-conversion.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-function-object.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-iterator-object.h"
        -:   26:#include "ecma-objects.h"
        -:   27:#include "ecma-array-object.h"
        -:   28:#include "jcontext.h"
        -:   29:#include "jrt.h"
        -:   30:
        -:   31:#if JERRY_BUILTIN_ARRAY
        -:   32:
        -:   33:#define ECMA_BUILTINS_INTERNAL
        -:   34:#include "ecma-builtins-internal.h"
        -:   35:
        -:   36:/**
        -:   37: * This object has a custom dispatch function.
        -:   38: */
        -:   39:#define BUILTIN_CUSTOM_DISPATCH
        -:   40:
        -:   41:/**
        -:   42: * List of built-in routine identifiers.
        -:   43: */
        -:   44:enum
        -:   45:{
        -:   46:  ECMA_ARRAY_ROUTINE_START = 0,
        -:   47:  ECMA_ARRAY_ROUTINE_IS_ARRAY,
        -:   48:#if JERRY_ESNEXT
        -:   49:  ECMA_ARRAY_ROUTINE_FROM,
        -:   50:  ECMA_ARRAY_ROUTINE_OF,
        -:   51:  ECMA_ARRAY_ROUTINE_SPECIES_GET
        -:   52:#endif /* JERRY_ESNEXT */
        -:   53:};
        -:   54:
        -:   55:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-array.inc.h"
        -:   56:#define BUILTIN_UNDERSCORED_ID array
        -:   57:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   58:
        -:   59:/** \addtogroup ecma ECMA
        -:   60: * @{
        -:   61: *
        -:   62: * \addtogroup ecmabuiltins
        -:   63: * @{
        -:   64: *
        -:   65: * \addtogroup array ECMA Array object built-in
        -:   66: * @{
        -:   67: */
        -:   68:
        -:   69:#if JERRY_ESNEXT
        -:   70:/**
        -:   71: * The Array object's 'from' routine
        -:   72: *
        -:   73: * See also:
        -:   74: *          ECMA-262 v6, 22.1.2.1
        -:   75: *
        -:   76: * @return ecma value
        -:   77: *         Returned value must be freed with ecma_free_value.
        -:   78: */
        -:   79:static ecma_value_t
    #####:   80:ecma_builtin_array_object_from (ecma_value_t this_arg, /**< 'this' argument */
        -:   81:                                const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   82:                                uint32_t arguments_list_len) /**< number of arguments */
        -:   83:{
        -:   84:  /* 1. */
    #####:   85:  ecma_value_t constructor = this_arg;
    #####:   86:  ecma_value_t call_this_arg = ECMA_VALUE_UNDEFINED;
    #####:   87:  ecma_value_t items = arguments_list_p[0];
    #####:   88:  ecma_value_t mapfn = (arguments_list_len > 1) ? arguments_list_p[1] : ECMA_VALUE_UNDEFINED;
        -:   89:
        -:   90:  /* 2. */
    #####:   91:  ecma_object_t *mapfn_obj_p = NULL;
        -:   92:
        -:   93:  /* 3. */
    #####:   94:  if (!ecma_is_value_undefined (mapfn))
        -:   95:  {
        -:   96:    /* 3.a */
    #####:   97:    if (!ecma_op_is_callable (mapfn))
        -:   98:    {
    #####:   99:      return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_callback_is_not_callable));
        -:  100:    }
        -:  101:
        -:  102:    /* 3.b */
    #####:  103:    if (arguments_list_len > 2)
        -:  104:    {
    #####:  105:      call_this_arg = arguments_list_p[2];
        -:  106:    }
        -:  107:
        -:  108:    /* 3.c */
    #####:  109:    mapfn_obj_p = ecma_get_object_from_value (mapfn);
        -:  110:  }
        -:  111:
        -:  112:  /* 4. */
    #####:  113:  ecma_value_t using_iterator = ecma_op_get_method_by_symbol_id (items, LIT_GLOBAL_SYMBOL_ITERATOR);
        -:  114:
        -:  115:  /* 5. */
    #####:  116:  if (ECMA_IS_VALUE_ERROR (using_iterator))
        -:  117:  {
    #####:  118:    return using_iterator;
        -:  119:  }
        -:  120:
    #####:  121:  ecma_value_t ret_value = ECMA_VALUE_ERROR;
        -:  122:
        -:  123:  /* 6. */
    #####:  124:  if (!ecma_is_value_undefined (using_iterator))
        -:  125:  {
        -:  126:    ecma_object_t *array_obj_p;
        -:  127:
        -:  128:    /* 6.a */
    #####:  129:    if (ecma_is_constructor (constructor))
        -:  130:    {
    #####:  131:      ecma_object_t *constructor_obj_p = ecma_get_object_from_value (constructor);
        -:  132:
    #####:  133:      ecma_value_t array = ecma_op_function_construct (constructor_obj_p, constructor_obj_p, NULL, 0);
        -:  134:
    #####:  135:      if (ecma_is_value_undefined (array) || ecma_is_value_null (array))
        -:  136:      {
    #####:  137:        ecma_free_value (using_iterator);
    #####:  138:        return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_cannot_convert_to_object));
        -:  139:      }
        -:  140:
        -:  141:      /* 6.c */
    #####:  142:      if (ECMA_IS_VALUE_ERROR (array))
        -:  143:      {
    #####:  144:        ecma_free_value (using_iterator);
    #####:  145:        return array;
        -:  146:      }
        -:  147:
    #####:  148:      array_obj_p = ecma_get_object_from_value (array);
        -:  149:    }
        -:  150:    else
        -:  151:    {
        -:  152:      /* 6.b */
    #####:  153:      array_obj_p = ecma_op_new_array_object (0);
        -:  154:    }
        -:  155:
        -:  156:    /* 6.d */
    #####:  157:    ecma_value_t next_method;
    #####:  158:    ecma_value_t iterator = ecma_op_get_iterator (items, using_iterator, &next_method);
    #####:  159:    ecma_free_value (using_iterator);
        -:  160:
        -:  161:    /* 6.e */
    #####:  162:    if (ECMA_IS_VALUE_ERROR (iterator))
        -:  163:    {
    #####:  164:      ecma_deref_object (array_obj_p);
    #####:  165:      return iterator;
        -:  166:    }
        -:  167:
        -:  168:    /* 6.f */
    #####:  169:    uint32_t k = 0;
        -:  170:
        -:  171:    /* 6.g */
        -:  172:    while (true)
    #####:  173:    {
        -:  174:      /* 6.g.ii */
    #####:  175:      ecma_value_t next = ecma_op_iterator_step (iterator, next_method);
        -:  176:
        -:  177:      /* 6.g.iii */
    #####:  178:      if (ECMA_IS_VALUE_ERROR (next))
        -:  179:      {
    #####:  180:        goto iterator_cleanup;
        -:  181:      }
        -:  182:
        -:  183:      /* 6.g.iii */
    #####:  184:      if (ecma_is_value_false (next))
        -:  185:      {
        -:  186:        /* 6.g.iv.1 */
    #####:  187:        ecma_value_t len_value = ecma_make_uint32_value (k);
    #####:  188:        ecma_value_t set_status = ecma_op_object_put (array_obj_p,
        -:  189:                                                      ecma_get_magic_string (LIT_MAGIC_STRING_LENGTH),
        -:  190:                                                      len_value,
        -:  191:                                                      true);
    #####:  192:        ecma_free_value (len_value);
        -:  193:
        -:  194:        /* 6.g.iv.2 */
    #####:  195:        if (ECMA_IS_VALUE_ERROR (set_status))
        -:  196:        {
    #####:  197:          goto iterator_cleanup;
        -:  198:        }
        -:  199:
    #####:  200:        ecma_free_value (iterator);
    #####:  201:        ecma_free_value (next_method);
        -:  202:        /* 6.g.iv.3 */
    #####:  203:        return ecma_make_object_value (array_obj_p);
        -:  204:      }
        -:  205:
        -:  206:      /* 6.g.v */
    #####:  207:      ecma_value_t next_value = ecma_op_iterator_value (next);
        -:  208:
    #####:  209:      ecma_free_value (next);
        -:  210:
        -:  211:      /* 6.g.vi */
    #####:  212:      if (ECMA_IS_VALUE_ERROR (next_value))
        -:  213:      {
    #####:  214:        goto iterator_cleanup;
        -:  215:      }
        -:  216:
        -:  217:      ecma_value_t mapped_value;
        -:  218:      /* 6.g.vii */
    #####:  219:      if (mapfn_obj_p != NULL)
        -:  220:      {
        -:  221:        /* 6.g.vii.1 */
    #####:  222:        ecma_value_t args_p[2] = { next_value, ecma_make_uint32_value (k) };
        -:  223:        /* 6.g.vii.3 */
    #####:  224:        mapped_value = ecma_op_function_call (mapfn_obj_p, call_this_arg, args_p, 2);
    #####:  225:        ecma_free_value (args_p[1]);
    #####:  226:        ecma_free_value (next_value);
        -:  227:
        -:  228:        /* 6.g.vii.2 */
    #####:  229:        if (ECMA_IS_VALUE_ERROR (mapped_value))
        -:  230:        {
    #####:  231:          ecma_op_iterator_close (iterator);
    #####:  232:          goto iterator_cleanup;
        -:  233:        }
        -:  234:      }
        -:  235:      else
        -:  236:      {
        -:  237:        /* 6.g.viii */
    #####:  238:        mapped_value = next_value;
        -:  239:      }
        -:  240:
        -:  241:      /* 6.g.ix */
    #####:  242:      const uint32_t flags = ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE | JERRY_PROP_SHOULD_THROW;
    #####:  243:      ecma_value_t set_status = ecma_builtin_helper_def_prop_by_index (array_obj_p, k, mapped_value, flags);
        -:  244:
    #####:  245:      ecma_free_value (mapped_value);
        -:  246:
        -:  247:      /* 6.g.x */
    #####:  248:      if (ECMA_IS_VALUE_ERROR (set_status))
        -:  249:      {
    #####:  250:        ecma_op_iterator_close (iterator);
    #####:  251:        goto iterator_cleanup;
        -:  252:      }
        -:  253:
        -:  254:      /* 6.g.xi */
    #####:  255:      k++;
        -:  256:    }
        -:  257:
    #####:  258:iterator_cleanup:
    #####:  259:    ecma_free_value (iterator);
    #####:  260:    ecma_free_value (next_method);
    #####:  261:    ecma_deref_object (array_obj_p);
        -:  262:
    #####:  263:    return ret_value;
        -:  264:  }
        -:  265:
        -:  266:  /* 8. */
    #####:  267:  ecma_value_t array_like = ecma_op_to_object (items);
        -:  268:
        -:  269:  /* 9. */
    #####:  270:  if (ECMA_IS_VALUE_ERROR (array_like))
        -:  271:  {
    #####:  272:    return array_like;
        -:  273:  }
        -:  274:
    #####:  275:  ecma_object_t *array_like_obj_p = ecma_get_object_from_value (array_like);
        -:  276:
        -:  277:  /* 10. */
    #####:  278:  ecma_length_t len;
    #####:  279:  ecma_value_t len_value = ecma_op_object_get_length (array_like_obj_p, &len);
        -:  280:
        -:  281:  /* 11. */
    #####:  282:  if (ECMA_IS_VALUE_ERROR (len_value))
        -:  283:  {
    #####:  284:    goto cleanup;
        -:  285:  }
        -:  286:
        -:  287:  /* 12. */
        -:  288:  ecma_object_t *array_obj_p;
        -:  289:
        -:  290:  /* 12.a */
    #####:  291:  if (ecma_is_constructor (constructor))
        -:  292:  {
    #####:  293:    ecma_object_t *constructor_obj_p = ecma_get_object_from_value (constructor);
        -:  294:
    #####:  295:    len_value = ecma_make_length_value (len);
    #####:  296:    ecma_value_t array = ecma_op_function_construct (constructor_obj_p, constructor_obj_p, &len_value, 1);
    #####:  297:    ecma_free_value (len_value);
        -:  298:
    #####:  299:    if (ecma_is_value_undefined (array) || ecma_is_value_null (array))
        -:  300:    {
    #####:  301:      ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_cannot_convert_to_object));
    #####:  302:      goto cleanup;
        -:  303:    }
        -:  304:
        -:  305:    /* 14. */
    #####:  306:    if (ECMA_IS_VALUE_ERROR (array))
        -:  307:    {
    #####:  308:      goto cleanup;
        -:  309:    }
        -:  310:
    #####:  311:    array_obj_p = ecma_get_object_from_value (array);
        -:  312:  }
        -:  313:  else
        -:  314:  {
        -:  315:    /* 13.a */
    #####:  316:    array_obj_p = ecma_op_new_array_object_from_length (len);
        -:  317:
    #####:  318:    if (JERRY_UNLIKELY (array_obj_p == NULL))
        -:  319:    {
    #####:  320:      goto cleanup;
        -:  321:    }
        -:  322:  }
        -:  323:
        -:  324:  /* 15. */
    #####:  325:  ecma_length_t k = 0;
        -:  326:
        -:  327:  /* 16. */
    #####:  328:  while (k < len)
        -:  329:  {
        -:  330:    /* 16.b */
    #####:  331:    ecma_value_t k_value = ecma_op_object_get_by_index (array_like_obj_p, k);
        -:  332:
        -:  333:    /* 16.c */
    #####:  334:    if (ECMA_IS_VALUE_ERROR (k_value))
        -:  335:    {
    #####:  336:      goto construct_cleanup;
        -:  337:    }
        -:  338:
        -:  339:    ecma_value_t mapped_value;
        -:  340:    /* 16.d */
    #####:  341:    if (mapfn_obj_p != NULL)
        -:  342:    {
        -:  343:      /* 16.d.i */
    #####:  344:      ecma_value_t args_p[2] = { k_value, ecma_make_length_value (k) };
    #####:  345:      mapped_value = ecma_op_function_call (mapfn_obj_p, call_this_arg, args_p, 2);
    #####:  346:      ecma_free_value (args_p[1]);
    #####:  347:      ecma_free_value (k_value);
        -:  348:
        -:  349:      /* 16.d.ii */
    #####:  350:      if (ECMA_IS_VALUE_ERROR (mapped_value))
        -:  351:      {
    #####:  352:        goto construct_cleanup;
        -:  353:      }
        -:  354:    }
        -:  355:    else
        -:  356:    {
        -:  357:      /* 16.e */
    #####:  358:      mapped_value = k_value;
        -:  359:    }
        -:  360:
        -:  361:    /* 16.f */
    #####:  362:    const uint32_t flags = ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE | JERRY_PROP_SHOULD_THROW;
    #####:  363:    ecma_value_t set_status = ecma_builtin_helper_def_prop_by_index (array_obj_p, k, mapped_value, flags);
        -:  364:
    #####:  365:    ecma_free_value (mapped_value);
        -:  366:
        -:  367:    /* 16.g */
    #####:  368:    if (ECMA_IS_VALUE_ERROR (set_status))
        -:  369:    {
    #####:  370:      goto construct_cleanup;
        -:  371:    }
        -:  372:
        -:  373:    /* 16.h */
    #####:  374:    k++;
        -:  375:  }
        -:  376:
        -:  377:  /* 17. */
    #####:  378:  len_value = ecma_make_length_value (k);
    #####:  379:  ecma_value_t set_status = ecma_op_object_put (array_obj_p,
        -:  380:                                                ecma_get_magic_string (LIT_MAGIC_STRING_LENGTH),
        -:  381:                                                len_value,
        -:  382:                                                true);
    #####:  383:  ecma_free_value (len_value);
        -:  384:
        -:  385:  /* 18. */
    #####:  386:  if (ECMA_IS_VALUE_ERROR (set_status))
        -:  387:  {
    #####:  388:    goto construct_cleanup;
        -:  389:  }
        -:  390:
        -:  391:  /* 19. */
    #####:  392:  ecma_deref_object (array_like_obj_p);
    #####:  393:  return ecma_make_object_value (array_obj_p);
        -:  394:
    #####:  395:construct_cleanup:
    #####:  396:  ecma_deref_object (array_obj_p);
    #####:  397:cleanup:
    #####:  398:  ecma_deref_object (array_like_obj_p);
    #####:  399:  return ret_value;
        -:  400:} /* ecma_builtin_array_object_from */
        -:  401:
        -:  402:/**
        -:  403: * The Array object's 'of' routine
        -:  404: *
        -:  405: * See also:
        -:  406: *          ECMA-262 v6, 22.1.2.3
        -:  407: *
        -:  408: * @return ecma value
        -:  409: *         Returned value must be freed with ecma_free_value.
        -:  410: */
        -:  411:static ecma_value_t
    #####:  412:ecma_builtin_array_object_of (ecma_value_t this_arg, /**< 'this' argument */
        -:  413:                              const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  414:                              uint32_t arguments_list_len) /**< number of arguments */
        -:  415:{
    #####:  416:  if (!ecma_is_constructor (this_arg))
        -:  417:  {
    #####:  418:    return ecma_op_new_array_object_from_buffer (arguments_list_p, arguments_list_len);
        -:  419:  }
        -:  420:
    #####:  421:  ecma_value_t len = ecma_make_uint32_value (arguments_list_len);
        -:  422:
    #####:  423:  ecma_value_t ret_val = ecma_op_function_construct (ecma_get_object_from_value (this_arg),
        -:  424:                                                     ecma_get_object_from_value (this_arg),
        -:  425:                                                     &len,
        -:  426:                                                     1);
        -:  427:
    #####:  428:  if (ECMA_IS_VALUE_ERROR (ret_val))
        -:  429:  {
    #####:  430:    ecma_free_value (len);
    #####:  431:    return ret_val;
        -:  432:  }
        -:  433:
    #####:  434:  uint32_t k = 0;
    #####:  435:  ecma_object_t *obj_p = ecma_get_object_from_value (ret_val);
    #####:  436:  const uint32_t prop_status_flags = ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE | JERRY_PROP_SHOULD_THROW;
        -:  437:
    #####:  438:  while (k < arguments_list_len)
        -:  439:  {
    #####:  440:    ecma_value_t define_status = ecma_builtin_helper_def_prop_by_index (obj_p,
        -:  441:                                                                        k,
    #####:  442:                                                                        arguments_list_p[k],
        -:  443:                                                                        prop_status_flags);
        -:  444:
    #####:  445:    if (ECMA_IS_VALUE_ERROR (define_status))
        -:  446:    {
    #####:  447:      ecma_free_value (len);
    #####:  448:      ecma_deref_object (obj_p);
    #####:  449:      return define_status;
        -:  450:    }
        -:  451:
    #####:  452:    k++;
        -:  453:  }
        -:  454:
    #####:  455:  ret_val = ecma_op_object_put (obj_p,
        -:  456:                                ecma_get_magic_string (LIT_MAGIC_STRING_LENGTH),
        -:  457:                                len,
        -:  458:                                true);
        -:  459:
    #####:  460:  ecma_free_value (len);
        -:  461:
    #####:  462:  if (ECMA_IS_VALUE_ERROR (ret_val))
        -:  463:  {
    #####:  464:    ecma_deref_object (obj_p);
    #####:  465:    return ret_val;
        -:  466:  }
        -:  467:
    #####:  468:  return ecma_make_object_value (obj_p);
        -:  469:} /* ecma_builtin_array_object_of */
        -:  470:
        -:  471:#endif /* JERRY_ESNEXT */
        -:  472:
        -:  473:/**
        -:  474: * Handle calling [[Call]] of built-in Array object
        -:  475: *
        -:  476: * @return ECMA_VALUE_ERROR - if the array construction fails
        -:  477: *         constructed array object - otherwise
        -:  478: */
        -:  479:ecma_value_t
    #####:  480:ecma_builtin_array_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  481:                                  uint32_t arguments_list_len) /**< number of arguments */
        -:  482:{
    #####:  483:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  484:
    #####:  485:  if (arguments_list_len != 1
    #####:  486:      || !ecma_is_value_number (arguments_list_p[0]))
        -:  487:  {
    #####:  488:    return ecma_op_new_array_object_from_buffer (arguments_list_p, arguments_list_len);
        -:  489:  }
        -:  490:
    #####:  491:  ecma_number_t num = ecma_get_number_from_value (arguments_list_p[0]);
    #####:  492:  uint32_t num_uint32 = ecma_number_to_uint32 (num);
        -:  493:
    #####:  494:  if (num != ((ecma_number_t) num_uint32))
        -:  495:  {
    #####:  496:    return ecma_raise_range_error (ECMA_ERR_MSG (ecma_error_invalid_array_length));
        -:  497:  }
        -:  498:
    #####:  499:  return ecma_make_object_value (ecma_op_new_array_object (num_uint32));
        -:  500:} /* ecma_builtin_array_dispatch_call */
        -:  501:
        -:  502:/**
        -:  503: * Handle calling [[Construct]] of built-in Array object
        -:  504: *
        -:  505: * @return ECMA_VALUE_ERROR - if the array construction fails
        -:  506: *         constructed array object - otherwise
        -:  507: */
        -:  508:ecma_value_t
    #####:  509:ecma_builtin_array_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  510:                                       uint32_t arguments_list_len) /**< number of arguments */
        -:  511:{
    #####:  512:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  513:
        -:  514:#if !JERRY_ESNEXT
    #####:  515:  return ecma_builtin_array_dispatch_call (arguments_list_p, arguments_list_len);
        -:  516:#else /* JERRY_ESNEXT */
    #####:  517:  ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (JERRY_CONTEXT (current_new_target_p),
        -:  518:                                                                   ECMA_BUILTIN_ID_ARRAY_PROTOTYPE);
        -:  519:
    #####:  520:  if (proto_p == NULL)
        -:  521:  {
    #####:  522:    return ECMA_VALUE_ERROR;
        -:  523:  }
        -:  524:
    #####:  525:  ecma_value_t result = ecma_builtin_array_dispatch_call (arguments_list_p, arguments_list_len);
        -:  526:
    #####:  527:  if (ECMA_IS_VALUE_ERROR (result))
        -:  528:  {
    #####:  529:    ecma_deref_object (proto_p);
    #####:  530:    return result;
        -:  531:  }
        -:  532:
    #####:  533:  ecma_object_t *object_p = ecma_get_object_from_value (result);
    #####:  534:  ECMA_SET_NON_NULL_POINTER (object_p->u2.prototype_cp, proto_p);
    #####:  535:  ecma_deref_object (proto_p);
    #####:  536:  return result;
        -:  537:#endif /* JERRY_ESNEXT */
        -:  538:} /* ecma_builtin_array_dispatch_construct */
        -:  539:
        -:  540:/**
        -:  541: * Dispatcher of the built-in's routines
        -:  542: *
        -:  543: * @return ecma value
        -:  544: *         Returned value must be freed with ecma_free_value.
        -:  545: */
        -:  546:ecma_value_t
    #####:  547:ecma_builtin_array_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  548:                                     ecma_value_t this_arg, /**< 'this' argument value */
        -:  549:                                     const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  550:                                                                             *   passed to routine */
        -:  551:                                     uint32_t arguments_number) /**< length of arguments' list */
        -:  552:{
        -:  553:  JERRY_UNUSED (arguments_number);
        -:  554:
    #####:  555:  switch (builtin_routine_id)
        -:  556:  {
    #####:  557:    case ECMA_ARRAY_ROUTINE_IS_ARRAY:
        -:  558:    {
        -:  559:      JERRY_UNUSED (this_arg);
        -:  560:
    #####:  561:      return ecma_is_value_array (arguments_list_p[0]);
        -:  562:    }
        -:  563:#if JERRY_ESNEXT
    #####:  564:    case ECMA_ARRAY_ROUTINE_FROM:
        -:  565:    {
    #####:  566:      return ecma_builtin_array_object_from (this_arg, arguments_list_p, arguments_number);
        -:  567:    }
    #####:  568:    case ECMA_ARRAY_ROUTINE_OF:
        -:  569:    {
    #####:  570:      return ecma_builtin_array_object_of (this_arg, arguments_list_p, arguments_number);
        -:  571:    }
    #####:  572:    case ECMA_ARRAY_ROUTINE_SPECIES_GET:
        -:  573:    {
    #####:  574:      return ecma_copy_value (this_arg);
        -:  575:    }
        -:  576:#endif /* JERRY_ESNEXT */
    #####:  577:    default:
        -:  578:    {
    #####:  579:      JERRY_UNREACHABLE ();
        -:  580:    }
        -:  581:  }
        -:  582:} /* ecma_builtin_array_dispatch_routine */
        -:  583:
        -:  584:/**
        -:  585: * @}
        -:  586: * @}
        -:  587: * @}
        -:  588: */
        -:  589:
        -:  590:#endif /* JERRY_BUILTIN_ARRAY */
