        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-iterator-object.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-array-object.h"
        -:   18:#include "ecma-iterator-object.h"
        -:   19:#include "ecma-builtin-helpers.h"
        -:   20:#include "ecma-builtins.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-number-arithmetic.h"
        -:   26:#include "ecma-objects.h"
        -:   27:#include "ecma-objects-general.h"
        -:   28:#include "ecma-function-object.h"
        -:   29:#include "jcontext.h"
        -:   30:
        -:   31:/** \addtogroup ecma ECMA
        -:   32: * @{
        -:   33: *
        -:   34: * \addtogroup ecmaiteratorobject ECMA iterator object related routines
        -:   35: * @{
        -:   36: */
        -:   37:
        -:   38:#if JERRY_ESNEXT
        -:   39:
        -:   40:/**
        -:   41: * Implementation of 'CreateArrayFromList' specialized for iterators
        -:   42: *
        -:   43: * See also:
        -:   44: *          ECMA-262 v6, 7.3.16.
        -:   45: *
        -:   46: * Note:
        -:   47: *      Returned value must be freed with ecma_free_value.
        -:   48: *
        -:   49: * @return new array object
        -:   50: */
        -:   51:ecma_value_t
    #####:   52:ecma_create_array_from_iter_element (ecma_value_t value, /**< value */
        -:   53:                                     ecma_value_t index_value) /**< iterator index */
        -:   54:{
        -:   55:  /* 2. */
    #####:   56:  ecma_object_t *new_array_p = ecma_op_new_array_object (0);
        -:   57:
        -:   58:  /* 3-4. */
        -:   59:  ecma_value_t completion;
    #####:   60:  completion = ecma_builtin_helper_def_prop_by_index (new_array_p,
        -:   61:                                                      0,
        -:   62:                                                      index_value,
        -:   63:                                                      ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);
        -:   64:
        -:   65:  /* 4.b */
    #####:   66:  JERRY_ASSERT (ecma_is_value_true (completion));
        -:   67:
    #####:   68:  completion = ecma_builtin_helper_def_prop_by_index (new_array_p,
        -:   69:                                                      1,
        -:   70:                                                      value,
        -:   71:                                                      ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);
    #####:   72:  JERRY_ASSERT (ecma_is_value_true (completion));
        -:   73:
        -:   74:  /* 5. */
    #####:   75:  return ecma_make_object_value (new_array_p);
        -:   76:} /* ecma_create_array_from_iter_element */
        -:   77:
        -:   78:/**
        -:   79: * CreateIterResultObject operation
        -:   80: *
        -:   81: * See also:
        -:   82: *          ECMA-262 v6, 7.4.7.
        -:   83: *
        -:   84: * Note:
        -:   85: *      Returned value must be freed with ecma_free_value.
        -:   86: *
        -:   87: * @return iterator result object
        -:   88: */
        -:   89:ecma_value_t
    #####:   90:ecma_create_iter_result_object (ecma_value_t value, /**< value */
        -:   91:                                ecma_value_t done) /**< ECMA_VALUE_{TRUE,FALSE} based
        -:   92:                                                    *   on the iterator index */
        -:   93:{
        -:   94:  /* 1. */
    #####:   95:  JERRY_ASSERT (ecma_is_value_boolean (done));
        -:   96:
        -:   97:  /* 2. */
    #####:   98:  ecma_object_t *object_p = ecma_create_object (ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE),
        -:   99:                                                0,
        -:  100:                                                ECMA_OBJECT_TYPE_GENERAL);
        -:  101:
        -:  102:  /* 3. */
        -:  103:  ecma_property_value_t *prop_value_p;
    #####:  104:  prop_value_p = ecma_create_named_data_property (object_p,
        -:  105:                                                  ecma_get_magic_string (LIT_MAGIC_STRING_VALUE),
        -:  106:                                                  ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  107:                                                  NULL);
        -:  108:
    #####:  109:  prop_value_p->value = ecma_copy_value_if_not_object (value);
        -:  110:
        -:  111:  /* 4. */
    #####:  112:  prop_value_p = ecma_create_named_data_property (object_p,
        -:  113:                                                  ecma_get_magic_string (LIT_MAGIC_STRING_DONE),
        -:  114:                                                  ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  115:                                                  NULL);
    #####:  116:  prop_value_p->value = done;
        -:  117:
        -:  118:  /* 5. */
    #####:  119:  return ecma_make_object_value (object_p);
        -:  120:} /* ecma_create_iter_result_object */
        -:  121:
        -:  122:/**
        -:  123: * General iterator object creation operation.
        -:  124: *
        -:  125: * See also: ECMA-262 v6, 21.1.5.1, 22.1.5.1, 23.1.5.1
        -:  126: *
        -:  127: * Note:
        -:  128: *      Returned value must be freed with ecma_free_value.
        -:  129: *
        -:  130: * @return iterator object
        -:  131: */
        -:  132:ecma_value_t
    #####:  133:ecma_op_create_iterator_object (ecma_value_t iterated_value, /**< value from create iterator */
        -:  134:                                ecma_object_t *prototype_obj_p, /**< prototype object */
        -:  135:                                ecma_object_class_type_t iterator_type, /**< iterator type */
        -:  136:                                ecma_iterator_kind_t kind) /**< iterator kind*/
        -:  137:{
        -:  138:  /* 1. */
    #####:  139:  JERRY_ASSERT (iterator_type == ECMA_OBJECT_CLASS_ARRAY_ITERATOR
        -:  140:                || iterator_type == ECMA_OBJECT_CLASS_SET_ITERATOR
        -:  141:                || iterator_type == ECMA_OBJECT_CLASS_MAP_ITERATOR
        -:  142:                || iterator_type == ECMA_OBJECT_CLASS_REGEXP_STRING_ITERATOR
        -:  143:                || iterator_type == ECMA_OBJECT_CLASS_STRING_ITERATOR);
    #####:  144:  JERRY_ASSERT (kind < ECMA_ITERATOR__COUNT);
        -:  145:
        -:  146:  /* 2. */
    #####:  147:  ecma_object_t *object_p = ecma_create_object (prototype_obj_p,
        -:  148:                                                sizeof (ecma_extended_object_t),
        -:  149:                                                ECMA_OBJECT_TYPE_CLASS);
        -:  150:
    #####:  151:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) object_p;
    #####:  152:  ext_obj_p->u.cls.type = (uint8_t) iterator_type;
        -:  153:
        -:  154:  /* 3. */
    #####:  155:  ext_obj_p->u.cls.u3.iterated_value = iterated_value;
        -:  156:  /* 4. */
    #####:  157:  ext_obj_p->u.cls.u2.iterator_index = 0;
        -:  158:  /* 5. */
    #####:  159:  ext_obj_p->u.cls.u1.iterator_kind = (uint8_t) kind;
        -:  160:
        -:  161:  /* 6. */
    #####:  162:  return ecma_make_object_value (object_p);
        -:  163:} /* ecma_op_create_iterator_object */
        -:  164:
        -:  165:/**
        -:  166: * GetIterator operation
        -:  167: *
        -:  168: * See also: ECMA-262 v10, 7.4.1
        -:  169: *
        -:  170: * Note:
        -:  171: *      Returned value must be freed with ecma_free_value.
        -:  172: *
        -:  173: * @return iterator object - if success
        -:  174: *         raised error - otherwise
        -:  175: */
        -:  176:ecma_value_t
    #####:  177:ecma_op_get_iterator (ecma_value_t value, /**< value to get iterator from */
        -:  178:                      ecma_value_t method, /**< provided method argument */
        -:  179:                      ecma_value_t *next_method_p) /**< [out] next method */
        -:  180:{
    #####:  181:  JERRY_ASSERT (next_method_p != NULL);
    #####:  182:  *next_method_p = ECMA_VALUE_UNDEFINED;
        -:  183:
        -:  184:  /* 1. */
    #####:  185:  if (ECMA_IS_VALUE_ERROR (value))
        -:  186:  {
    #####:  187:    return value;
        -:  188:  }
        -:  189:
    #####:  190:  bool use_default_method = false;
        -:  191:
        -:  192:  /* 2. */
    #####:  193:  if (method == ECMA_VALUE_SYNC_ITERATOR)
        -:  194:  {
        -:  195:    /* 2.a */
    #####:  196:    use_default_method = true;
    #####:  197:    method = ecma_op_get_method_by_symbol_id (value, LIT_GLOBAL_SYMBOL_ITERATOR);
        -:  198:
        -:  199:    /* 2.b */
    #####:  200:    if (ECMA_IS_VALUE_ERROR (method))
        -:  201:    {
    #####:  202:      return method;
        -:  203:    }
        -:  204:  }
    #####:  205:  else if (method == ECMA_VALUE_ASYNC_ITERATOR)
        -:  206:  {
        -:  207:    /* TODO: CreateAsyncFromSyncIterator should be supported. */
    #####:  208:    use_default_method = true;
    #####:  209:    method = ecma_op_get_method_by_symbol_id (value, LIT_GLOBAL_SYMBOL_ASYNC_ITERATOR);
        -:  210:
    #####:  211:    if (ECMA_IS_VALUE_ERROR (method))
        -:  212:    {
    #####:  213:      return method;
        -:  214:    }
        -:  215:  }
        -:  216:
        -:  217:  /* 3. */
    #####:  218:  if (!ecma_op_is_callable (method))
        -:  219:  {
    #####:  220:    ecma_free_value (method);
    #####:  221:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator is not function"));
        -:  222:  }
        -:  223:
    #####:  224:  ecma_object_t *method_obj_p = ecma_get_object_from_value (method);
    #####:  225:  ecma_value_t iterator = ecma_op_function_call (method_obj_p, value, NULL, 0);
        -:  226:
    #####:  227:  if (use_default_method)
        -:  228:  {
    #####:  229:    ecma_deref_object (method_obj_p);
        -:  230:  }
        -:  231:
        -:  232:  /* 4. */
    #####:  233:  if (ECMA_IS_VALUE_ERROR (iterator))
        -:  234:  {
    #####:  235:    return iterator;
        -:  236:  }
        -:  237:
        -:  238:  /* 5. */
    #####:  239:  if (!ecma_is_value_object (iterator))
        -:  240:  {
    #####:  241:    ecma_free_value (iterator);
    #####:  242:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator is not an object"));
        -:  243:  }
        -:  244:
    #####:  245:  ecma_object_t *obj_p = ecma_get_object_from_value (iterator);
    #####:  246:  ecma_value_t next_method = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_NEXT);
        -:  247:
    #####:  248:  if (ECMA_IS_VALUE_ERROR (next_method))
        -:  249:  {
    #####:  250:    ecma_free_value (iterator);
    #####:  251:    return next_method;
        -:  252:  }
        -:  253:
    #####:  254:  if (ecma_is_value_object (next_method) && ecma_op_is_callable (next_method))
        -:  255:  {
    #####:  256:    *next_method_p = next_method;
        -:  257:  }
        -:  258:  else
        -:  259:  {
    #####:  260:    ecma_free_value (next_method);
        -:  261:  }
        -:  262:
        -:  263:  /* 6. */
    #####:  264:  return iterator;
        -:  265:} /* ecma_op_get_iterator */
        -:  266:
        -:  267:/**
        -:  268: * IteratorNext operation
        -:  269: *
        -:  270: * See also: ECMA-262 v10, 7.4.2
        -:  271: *
        -:  272: * Note:
        -:  273: *      Returned value must be freed with ecma_free_value.
        -:  274: *
        -:  275: * @return iterator result object - if success
        -:  276: *         raised error - otherwise
        -:  277: */
        -:  278:ecma_value_t
    #####:  279:ecma_op_iterator_next (ecma_value_t iterator, /**< iterator value */
        -:  280:                       ecma_value_t next_method, /**< next method */
        -:  281:                       ecma_value_t value) /**< the routines's value argument */
        -:  282:{
    #####:  283:  JERRY_ASSERT (ecma_is_value_object (iterator));
        -:  284:
        -:  285:  /* 1 - 2. */
    #####:  286:  if (next_method == ECMA_VALUE_UNDEFINED)
        -:  287:  {
    #####:  288:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator 'next' is not callable"));
        -:  289:  }
        -:  290:
    #####:  291:  ecma_object_t *next_method_obj_p = ecma_get_object_from_value (next_method);
        -:  292:
    #####:  293:  bool has_value = !ecma_is_value_empty (value);
        -:  294:
    #####:  295:  if (has_value)
        -:  296:  {
    #####:  297:    return ecma_op_function_call (next_method_obj_p, iterator, &value, 1);
        -:  298:  }
        -:  299:
    #####:  300:  return ecma_op_function_call (next_method_obj_p, iterator, NULL, 0);
        -:  301:} /* ecma_op_iterator_next */
        -:  302:
        -:  303:/**
        -:  304: * IteratorReturn operation
        -:  305: *
        -:  306: * See also: ECMA-262 v6, 14.4.14 (last part)
        -:  307: *
        -:  308: * Note:
        -:  309: *      Returned value must be freed with ecma_free_value.
        -:  310: *
        -:  311: * @return iterator result object - if success
        -:  312: *         raised error - otherwise
        -:  313: */
        -:  314:static ecma_value_t
    #####:  315:ecma_op_iterator_return (ecma_value_t iterator, /**< iterator value */
        -:  316:                         ecma_value_t value) /**< the routines's value argument */
        -:  317:{
    #####:  318:  JERRY_ASSERT (ecma_is_value_object (iterator));
        -:  319:
    #####:  320:  ecma_object_t *obj_p = ecma_get_object_from_value (iterator);
    #####:  321:  ecma_value_t func_return = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_RETURN);
        -:  322:
    #####:  323:  if (ECMA_IS_VALUE_ERROR (func_return))
        -:  324:  {
    #####:  325:    return func_return;
        -:  326:  }
        -:  327:
    #####:  328:  if (func_return == ECMA_VALUE_UNDEFINED)
        -:  329:  {
    #####:  330:    return ecma_create_iter_result_object (value, ECMA_VALUE_TRUE);
        -:  331:  }
        -:  332:
    #####:  333:  if (!ecma_op_is_callable (func_return))
        -:  334:  {
    #####:  335:    ecma_free_value (func_return);
    #####:  336:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator 'return' is not callable"));
        -:  337:  }
        -:  338:
    #####:  339:  ecma_object_t *return_obj_p = ecma_get_object_from_value (func_return);
        -:  340:
    #####:  341:  ecma_value_t result = ecma_op_function_call (return_obj_p, iterator, &value, 1);
    #####:  342:  ecma_free_value (func_return);
        -:  343:
    #####:  344:  return result;
        -:  345:} /* ecma_op_iterator_return */
        -:  346:
        -:  347:/**
        -:  348: * IteratorThrow operation
        -:  349: *
        -:  350: * See also: ECMA-262 v6, 14.4.14 (last part)
        -:  351: *
        -:  352: * Note:
        -:  353: *      Returned value must be freed with ecma_free_value.
        -:  354: *
        -:  355: * @return iterator result object - if success
        -:  356: *         raised error - otherwise
        -:  357: */
        -:  358:static ecma_value_t
    #####:  359:ecma_op_iterator_throw (ecma_value_t iterator, /**< iterator value */
        -:  360:                        ecma_value_t value) /**< the routines's value argument */
        -:  361:{
    #####:  362:  JERRY_ASSERT (ecma_is_value_object (iterator));
        -:  363:
    #####:  364:  ecma_object_t *obj_p = ecma_get_object_from_value (iterator);
    #####:  365:  ecma_value_t func_throw = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_THROW);
        -:  366:
    #####:  367:  if (ECMA_IS_VALUE_ERROR (func_throw))
        -:  368:  {
    #####:  369:    return func_throw;
        -:  370:  }
        -:  371:
    #####:  372:  if (func_throw == ECMA_VALUE_UNDEFINED)
        -:  373:  {
    #####:  374:    ecma_value_t result = ecma_op_iterator_close (iterator);
        -:  375:
    #####:  376:    if (ECMA_IS_VALUE_ERROR (result))
        -:  377:    {
    #####:  378:      return result;
        -:  379:    }
        -:  380:
    #####:  381:    ecma_free_value (result);
    #####:  382:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator 'throw' is not available"));
        -:  383:  }
        -:  384:
    #####:  385:  if (!ecma_is_value_object (func_throw) || !ecma_op_is_callable (func_throw))
        -:  386:  {
    #####:  387:    ecma_free_value (func_throw);
    #####:  388:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator 'throw' is not callable"));
        -:  389:  }
        -:  390:
    #####:  391:  ecma_object_t *return_obj_p = ecma_get_object_from_value (func_throw);
        -:  392:
    #####:  393:  ecma_value_t result = ecma_op_function_call (return_obj_p, iterator, &value, 1);
    #####:  394:  ecma_free_value (func_throw);
        -:  395:
    #####:  396:  return result;
        -:  397:} /* ecma_op_iterator_throw */
        -:  398:
        -:  399:/**
        -:  400: * IteratorValue operation
        -:  401: *
        -:  402: * See also: ECMA-262 v6, 7.4.4
        -:  403: *
        -:  404: * Note:
        -:  405: *      Returned value must be freed with ecma_free_value.
        -:  406: *
        -:  407: * @return value of the iterator result object
        -:  408: */
        -:  409:ecma_value_t
    #####:  410:ecma_op_iterator_value (ecma_value_t iter_result) /**< iterator value */
        -:  411:{
        -:  412:  /* 1. */
    #####:  413:  JERRY_ASSERT (ecma_is_value_object (iter_result));
        -:  414:
        -:  415:  /* 2. */
    #####:  416:  ecma_object_t *obj_p = ecma_get_object_from_value (iter_result);
    #####:  417:  return ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_VALUE);
        -:  418:} /* ecma_op_iterator_value */
        -:  419:
        -:  420:/**
        -:  421: * IteratorClose operation
        -:  422: *
        -:  423: * See also: ECMA-262 v6, 7.4.6
        -:  424: *
        -:  425: * @return ECMA_VALUE_EMPTY - if "return" is succesfully invoked,
        -:  426: *                            and the operation is called with normal completion
        -:  427: *         ECMA_VALUE_ERROR - otherwise
        -:  428: */
        -:  429:ecma_value_t
    #####:  430:ecma_op_iterator_close (ecma_value_t iterator) /**< iterator value */
        -:  431:{
        -:  432:  /* 1. */
    #####:  433:  JERRY_ASSERT (ecma_is_value_object (iterator));
        -:  434:
        -:  435:  /* 2. */
    #####:  436:  ecma_value_t completion = ECMA_VALUE_EMPTY;
        -:  437:
    #####:  438:  if (jcontext_has_pending_exception ())
        -:  439:  {
    #####:  440:    completion = jcontext_take_exception ();
        -:  441:  }
        -:  442:
        -:  443:  /* 3. */
    #####:  444:  ecma_value_t return_method = ecma_op_get_method_by_magic_id (iterator, LIT_MAGIC_STRING_RETURN);
        -:  445:
        -:  446:  /* 4. */
    #####:  447:  if (ECMA_IS_VALUE_ERROR (return_method))
        -:  448:  {
    #####:  449:    ecma_free_value (completion);
    #####:  450:    return return_method;
        -:  451:  }
        -:  452:
        -:  453:  /* 5. */
    #####:  454:  if (ecma_is_value_undefined (return_method))
        -:  455:  {
    #####:  456:    if (ecma_is_value_empty (completion))
        -:  457:    {
    #####:  458:      return ECMA_VALUE_UNDEFINED;
        -:  459:    }
        -:  460:
    #####:  461:    jcontext_raise_exception (completion);
    #####:  462:    return ECMA_VALUE_ERROR;
        -:  463:  }
        -:  464:
        -:  465:  /* 6. */
    #####:  466:  ecma_object_t *return_obj_p = ecma_get_object_from_value (return_method);
    #####:  467:  ecma_value_t inner_result = ecma_op_function_call (return_obj_p, iterator, NULL, 0);
    #####:  468:  ecma_deref_object (return_obj_p);
        -:  469:
        -:  470:  /* 7. */
    #####:  471:  if (!ecma_is_value_empty (completion))
        -:  472:  {
    #####:  473:    if (ECMA_IS_VALUE_ERROR (inner_result))
        -:  474:    {
    #####:  475:      jcontext_release_exception ();
        -:  476:    }
        -:  477:    else
        -:  478:    {
    #####:  479:      ecma_free_value (inner_result);
        -:  480:    }
        -:  481:
    #####:  482:    jcontext_raise_exception (completion);
    #####:  483:    return ECMA_VALUE_ERROR;
        -:  484:  }
        -:  485:
        -:  486:  /* 8. */
    #####:  487:  if (ECMA_IS_VALUE_ERROR (inner_result))
        -:  488:  {
    #####:  489:    ecma_free_value (completion);
    #####:  490:    return inner_result;
        -:  491:  }
        -:  492:
        -:  493:  /* 9. */
    #####:  494:  bool is_object = ecma_is_value_object (inner_result);
    #####:  495:  ecma_free_value (inner_result);
        -:  496:
    #####:  497:  if (!is_object)
        -:  498:  {
    #####:  499:    ecma_free_value (completion);
    #####:  500:    return ecma_raise_type_error (ECMA_ERR_MSG ("method 'return' is not callable"));
        -:  501:  }
        -:  502:
        -:  503:  /* 10. */
    #####:  504:  if (ecma_is_value_empty (completion))
        -:  505:  {
    #####:  506:    return ECMA_VALUE_UNDEFINED;
        -:  507:  }
        -:  508:
    #####:  509:  jcontext_raise_exception (completion);
    #####:  510:  return ECMA_VALUE_ERROR;
        -:  511:} /* ecma_op_iterator_close */
        -:  512:
        -:  513:/**
        -:  514: * IteratorStep operation
        -:  515: *
        -:  516: * See also: ECMA-262 v6, 7.4.5
        -:  517: *
        -:  518: * Note:
        -:  519: *      Returned value must be freed with ecma_free_value.
        -:  520: *
        -:  521: * @return iterator object or ECMA_VALUE_FALSE - if success
        -:  522: *         raised error - otherwise
        -:  523: */
        -:  524:ecma_value_t
    #####:  525:ecma_op_iterator_step (ecma_value_t iterator, /**< iterator value */
        -:  526:                       ecma_value_t next_method) /**< next method */
        -:  527:{
        -:  528:  /* 1. */
    #####:  529:  ecma_value_t result = ecma_op_iterator_next (iterator, next_method, ECMA_VALUE_EMPTY);
        -:  530:
        -:  531:  /* 2. */
    #####:  532:  if (ECMA_IS_VALUE_ERROR (result))
        -:  533:  {
    #####:  534:    return result;
        -:  535:  }
        -:  536:
    #####:  537:  if (!ecma_is_value_object (result))
        -:  538:  {
    #####:  539:    ecma_free_value (result);
    #####:  540:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator result is not an object"));
        -:  541:  }
        -:  542:
        -:  543:  /* 3. */
    #####:  544:  ecma_object_t *obj_p = ecma_get_object_from_value (result);
    #####:  545:  ecma_value_t done = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_DONE);
        -:  546:
        -:  547:  /* 4. */
    #####:  548:  if (ECMA_IS_VALUE_ERROR (done))
        -:  549:  {
    #####:  550:    ecma_free_value (result);
    #####:  551:    return done;
        -:  552:  }
        -:  553:
    #####:  554:  bool is_done = ecma_op_to_boolean (done);
    #####:  555:  ecma_free_value (done);
        -:  556:
        -:  557:  /* 5. */
    #####:  558:  if (is_done)
        -:  559:  {
    #####:  560:    ecma_free_value (result);
    #####:  561:    return ECMA_VALUE_FALSE;
        -:  562:  }
        -:  563:
        -:  564:  /* 6. */
    #####:  565:  return result;
        -:  566:} /* ecma_op_iterator_step */
        -:  567:
        -:  568:/**
        -:  569: * Perform a command specified by the command argument
        -:  570: *
        -:  571: * Note:
        -:  572: *      Returned value must be freed with ecma_free_value.
        -:  573: *
        -:  574: * @return iterator object - if success
        -:  575: *         raised error - otherwise
        -:  576: */
        -:  577:ecma_value_t
    #####:  578:ecma_op_iterator_do (ecma_iterator_command_type_t command, /**< command to be executed */
        -:  579:                     ecma_value_t iterator, /**< iterator object */
        -:  580:                     ecma_value_t next_method, /**< next method */
        -:  581:                     ecma_value_t value, /**< the routines's value argument */
        -:  582:                     bool *done_p) /**< it contains the logical value of the done property */
        -:  583:{
        -:  584:  ecma_value_t result;
        -:  585:
    #####:  586:  if (command == ECMA_ITERATOR_NEXT)
        -:  587:  {
    #####:  588:    result = ecma_op_iterator_next (iterator, next_method, value);
        -:  589:  }
    #####:  590:  else if (command == ECMA_ITERATOR_THROW)
        -:  591:  {
    #####:  592:    result = ecma_op_iterator_throw (iterator, value);
        -:  593:  }
        -:  594:  else
        -:  595:  {
    #####:  596:    JERRY_ASSERT (command == ECMA_ITERATOR_RETURN);
    #####:  597:    result = ecma_op_iterator_return (iterator, value);
        -:  598:  }
        -:  599:
    #####:  600:  if (ECMA_IS_VALUE_ERROR (result))
        -:  601:  {
    #####:  602:    return result;
        -:  603:  }
        -:  604:
    #####:  605:  if (!ecma_is_value_object (result))
        -:  606:  {
    #####:  607:    ecma_free_value (result);
    #####:  608:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator result is not an object"));
        -:  609:  }
        -:  610:
    #####:  611:  ecma_object_t *obj_p = ecma_get_object_from_value (result);
    #####:  612:  ecma_value_t done = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_DONE);
        -:  613:
    #####:  614:  if (ECMA_IS_VALUE_ERROR (done))
        -:  615:  {
    #####:  616:    ecma_free_value (result);
    #####:  617:    return done;
        -:  618:  }
        -:  619:
    #####:  620:  *done_p = ecma_op_to_boolean (done);
    #####:  621:  ecma_free_value (done);
        -:  622:
    #####:  623:  return result;
        -:  624:} /* ecma_op_iterator_do */
        -:  625:
        -:  626:#endif /* JERRY_ESNEXT */
        -:  627:
        -:  628:/**
        -:  629: * @}
        -:  630: * @}
        -:  631: */
