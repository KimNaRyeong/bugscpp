        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-async-generator-prototype.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-async-generator-object.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-gc.h"
        -:   20:#include "ecma-globals.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:#include "ecma-iterator-object.h"
        -:   23:#include "ecma-promise-object.h"
        -:   24:#include "jcontext.h"
        -:   25:#include "opcodes.h"
        -:   26:#include "vm-defines.h"
        -:   27:
        -:   28:#if JERRY_ESNEXT
        -:   29:
        -:   30:#define ECMA_BUILTINS_INTERNAL
        -:   31:#include "ecma-builtins-internal.h"
        -:   32:
        -:   33:/**
        -:   34:  * This object has a custom dispatch function.
        -:   35:  */
        -:   36:#define BUILTIN_CUSTOM_DISPATCH
        -:   37:
        -:   38:/**
        -:   39: * List of built-in routine identifiers.
        -:   40: */
        -:   41:enum
        -:   42:{
        -:   43:  ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_START = 0,
        -:   44:  ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_NEXT,
        -:   45:  ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_THROW,
        -:   46:  ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_RETURN
        -:   47:};
        -:   48:
        -:   49:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-async-generator-prototype.inc.h"
        -:   50:#define BUILTIN_UNDERSCORED_ID async_generator_prototype
        -:   51:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   52:
        -:   53:/** \addtogroup ecma ECMA
        -:   54: * @{
        -:   55: *
        -:   56: * \addtogroup ecmabuiltins
        -:   57: * @{
        -:   58: *
        -:   59: * \addtogroup asyncgenerator ECMA AsyncGenerator.prototype object built-in
        -:   60: * @{
        -:   61: */
        -:   62:
        -:   63:/**
        -:   64: * Convert routine type to operation type..
        -:   65: */
        -:   66:#define ECMA_ASYNC_GENERATOR_ROUTINE_TO_OPERATION(type) \
        -:   67:  ((ecma_async_generator_operation_type_t) ((type) - ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_NEXT))
        -:   68:
        -:   69:JERRY_STATIC_ASSERT (ECMA_ASYNC_GENERATOR_ROUTINE_TO_OPERATION (ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_NEXT)
        -:   70:                     == ECMA_ASYNC_GENERATOR_DO_NEXT,
        -:   71:                     convert_ecma_async_generator_routine_next_to_ecma_async_generator_do_next_failed);
        -:   72:
        -:   73:JERRY_STATIC_ASSERT (ECMA_ASYNC_GENERATOR_ROUTINE_TO_OPERATION (ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_THROW)
        -:   74:                     == ECMA_ASYNC_GENERATOR_DO_THROW,
        -:   75:                     convert_ecma_async_generator_routine_throw_to_ecma_async_generator_do_throw_failed);
        -:   76:
        -:   77:JERRY_STATIC_ASSERT (ECMA_ASYNC_GENERATOR_ROUTINE_TO_OPERATION (ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_RETURN)
        -:   78:                     == ECMA_ASYNC_GENERATOR_DO_RETURN,
        -:   79:                     convert_ecma_async_generator_routine_return_to_ecma_async_generator_do_return_failed);
        -:   80:
        -:   81:/**
        -:   82:  * Dispatcher of the Generator built-in's routines
        -:   83:  *
        -:   84:  * @return ecma value
        -:   85:  *         Returned value must be freed with ecma_free_value.
        -:   86:  */
        -:   87:ecma_value_t
    #####:   88:ecma_builtin_async_generator_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:   89:                                                                                      *   identifier */
        -:   90:                                                         ecma_value_t this_arg, /**< 'this' argument value */
        -:   91:                                                         const ecma_value_t arguments_list_p[], /**< list of arguments
        -:   92:                                                                                                 *   passed to
        -:   93:                                                                                                 *   routine */
        -:   94:                                                         uint32_t arguments_number) /**< length of arguments'
        -:   95:                                                                                     *   list */
        -:   96:{
        -:   97:  JERRY_UNUSED (arguments_number);
        -:   98:
    #####:   99:  vm_executable_object_t *executable_object_p = NULL;
        -:  100:
    #####:  101:  if (ecma_is_value_object (this_arg))
        -:  102:  {
    #####:  103:    ecma_object_t *object_p = ecma_get_object_from_value (this_arg);
        -:  104:
    #####:  105:    if (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_ASYNC_GENERATOR))
        -:  106:    {
    #####:  107:      executable_object_p = (vm_executable_object_t *) object_p;
        -:  108:    }
        -:  109:  }
        -:  110:
    #####:  111:  if (executable_object_p == NULL)
        -:  112:  {
    #####:  113:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an async generator object"));
        -:  114:  }
        -:  115:
    #####:  116:  if (executable_object_p->extended_object.u.cls.u2.executable_obj_flags & ECMA_EXECUTABLE_OBJECT_COMPLETED)
        -:  117:  {
    #####:  118:    ecma_value_t promise = ecma_make_object_value (ecma_builtin_get (ECMA_BUILTIN_ID_PROMISE));
        -:  119:
    #####:  120:    if (JERRY_UNLIKELY (builtin_routine_id == ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_THROW))
        -:  121:    {
    #####:  122:      return ecma_promise_reject_or_resolve (promise, arguments_list_p[0], false);
        -:  123:    }
        -:  124:
    #####:  125:    ecma_value_t iter_result = ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
    #####:  126:    ecma_value_t result = ecma_promise_reject_or_resolve (promise, iter_result, true);
    #####:  127:    ecma_free_value (iter_result);
    #####:  128:    return result;
        -:  129:  }
        -:  130:
    #####:  131:  return ecma_async_generator_enqueue (executable_object_p,
    #####:  132:                                       ECMA_ASYNC_GENERATOR_ROUTINE_TO_OPERATION (builtin_routine_id),
        -:  133:                                       arguments_list_p[0]);
        -:  134:} /* ecma_builtin_async_generator_prototype_dispatch_routine */
        -:  135:
        -:  136:/**
        -:  137: * @}
        -:  138: * @}
        -:  139: * @}
        -:  140: */
        -:  141:
        -:  142:#endif /* JERRY_ESNEXT */
