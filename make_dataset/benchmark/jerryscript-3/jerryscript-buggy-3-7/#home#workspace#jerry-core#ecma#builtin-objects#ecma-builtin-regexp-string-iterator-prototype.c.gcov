        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-regexp-string-iterator-prototype.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtin-helpers.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-conversion.h"
        -:   19:#include "ecma-gc.h"
        -:   20:#include "ecma-iterator-object.h"
        -:   21:#include "ecma-objects.h"
        -:   22:
        -:   23:#if JERRY_ESNEXT
        -:   24:
        -:   25:#define ECMA_BUILTINS_INTERNAL
        -:   26:#include "ecma-builtins-internal.h"
        -:   27:
        -:   28:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-regexp-string-iterator-prototype.inc.h"
        -:   29:#define BUILTIN_UNDERSCORED_ID regexp_string_iterator_prototype
        -:   30:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   31:
        -:   32:/** \addtogroup ecma ECMA
        -:   33: * @{
        -:   34: *
        -:   35: * \addtogroup ecmabuiltins
        -:   36: * @{
        -:   37: *
        -:   38: * \addtogroup %regexpstringiteratorprototype% ECMA %ArrayIteratorPrototype% object built-in
        -:   39: * @{
        -:   40: */
        -:   41:
        -:   42:/**
        -:   43: * The %RegExpStringIteratorPrototype% object's 'next' routine
        -:   44: *
        -:   45: * See also:
        -:   46: *          ECMA-262 v11, 21.2.7.1.1
        -:   47: *
        -:   48: * Note:
        -:   49: *     Returned value must be freed with ecma_free_value.
        -:   50: *
        -:   51: * @return iterator result object, if success
        -:   52: *         error - otherwise
        -:   53: */
        -:   54:static ecma_value_t
    #####:   55:ecma_builtin_regexp_string_iterator_prototype_object_next (ecma_value_t this_val) /**< this argument */
        -:   56:{
        -:   57:  /* 2. */
    #####:   58:  if (!ecma_is_value_object (this_val))
        -:   59:  {
    #####:   60:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object"));
        -:   61:  }
        -:   62:
    #####:   63:  ecma_object_t *obj_p = ecma_get_object_from_value (this_val);
        -:   64:
        -:   65:  /* 3. */
    #####:   66:  if (!ecma_object_class_is (obj_p, ECMA_OBJECT_CLASS_REGEXP_STRING_ITERATOR))
        -:   67:  {
    #####:   68:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an iterator"));
        -:   69:  }
        -:   70:
    #####:   71:  ecma_regexp_string_iterator_t *regexp_string_iterator_obj = (ecma_regexp_string_iterator_t *) obj_p;
        -:   72:
        -:   73:  /* 4. */
    #####:   74:  if (ecma_is_value_empty (regexp_string_iterator_obj->iterated_string))
        -:   75:  {
    #####:   76:    return ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
        -:   77:  }
        -:   78:
        -:   79:  /* 5. */
    #####:   80:  ecma_value_t regexp = regexp_string_iterator_obj->iterating_regexp;
        -:   81:
        -:   82:  /* 6. */
    #####:   83:  ecma_value_t matcher_str_value = regexp_string_iterator_obj->iterated_string;
    #####:   84:  ecma_string_t *matcher_str_p = ecma_get_string_from_value (matcher_str_value);
        -:   85:
        -:   86:  /* 9. */
    #####:   87:  ecma_value_t match = ecma_op_regexp_exec (regexp, matcher_str_p);
        -:   88:
    #####:   89:  if (ECMA_IS_VALUE_ERROR (match))
        -:   90:  {
    #####:   91:    return match;
        -:   92:  }
        -:   93:
        -:   94:  /* 10. */
    #####:   95:  if (ecma_is_value_null (match))
        -:   96:  {
    #####:   97:    ecma_free_value (regexp_string_iterator_obj->iterated_string);
    #####:   98:    regexp_string_iterator_obj->iterated_string = ECMA_VALUE_EMPTY;
    #####:   99:    return ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
        -:  100:  }
        -:  101:
    #####:  102:  ecma_object_t *match_result_array_p = ecma_get_object_from_value (match);
        -:  103:
    #####:  104:  ecma_value_t result = ECMA_VALUE_ERROR;
        -:  105:
        -:  106:  /* 11. */
    #####:  107:  if (regexp_string_iterator_obj->header.u.cls.u1.regexp_string_iterator_flags & RE_FLAG_GLOBAL)
        -:  108:  {
    #####:  109:    ecma_value_t matched_str_value = ecma_op_object_get_by_index (match_result_array_p, 0);
        -:  110:
    #####:  111:    if (ECMA_IS_VALUE_ERROR (matched_str_value))
        -:  112:    {
    #####:  113:      goto free_variables;
        -:  114:    }
        -:  115:
    #####:  116:    ecma_string_t *matched_str_p = ecma_op_to_string (matched_str_value);
        -:  117:
    #####:  118:    ecma_free_value (matched_str_value);
        -:  119:
    #####:  120:    if (JERRY_UNLIKELY (matched_str_p == NULL))
        -:  121:    {
    #####:  122:      goto free_variables;
        -:  123:    }
        -:  124:
    #####:  125:    if (ecma_string_is_empty (matched_str_p))
        -:  126:    {
    #####:  127:      ecma_object_t *regexp_obj_p = ecma_get_object_from_value (regexp);
        -:  128:
    #####:  129:      ecma_value_t get_last_index = ecma_op_object_get_by_magic_id (regexp_obj_p, LIT_MAGIC_STRING_LASTINDEX_UL);
        -:  130:
    #####:  131:      if (ECMA_IS_VALUE_ERROR (get_last_index))
        -:  132:      {
    #####:  133:        goto free_variables;
        -:  134:      }
        -:  135:
    #####:  136:      ecma_length_t this_index;
    #####:  137:      ecma_value_t to_len = ecma_op_to_length (get_last_index, &this_index);
        -:  138:
    #####:  139:      ecma_free_value (get_last_index);
        -:  140:
    #####:  141:      if (ECMA_IS_VALUE_ERROR (to_len))
        -:  142:      {
    #####:  143:        goto free_variables;
        -:  144:      }
        -:  145:
    #####:  146:      uint8_t flags = regexp_string_iterator_obj->header.u.cls.u1.regexp_string_iterator_flags;
    #####:  147:      ecma_length_t next_index = ecma_op_advance_string_index (matcher_str_p,
        -:  148:                                                               this_index,
    #####:  149:                                                               (flags & RE_FLAG_UNICODE) != 0);
        -:  150:
    #####:  151:      ecma_value_t next_index_value = ecma_make_length_value (next_index);
    #####:  152:      ecma_value_t set = ecma_op_object_put (regexp_obj_p,
        -:  153:                                             ecma_get_magic_string (LIT_MAGIC_STRING_LASTINDEX_UL),
        -:  154:                                             next_index_value,
        -:  155:                                             true);
        -:  156:
    #####:  157:      ecma_free_value (next_index_value);
        -:  158:
    #####:  159:      if (ECMA_IS_VALUE_ERROR (set))
        -:  160:      {
    #####:  161:        goto free_variables;
        -:  162:      }
        -:  163:    }
        -:  164:    else
        -:  165:    {
    #####:  166:      ecma_deref_ecma_string (matched_str_p);
        -:  167:    }
        -:  168:  }
        -:  169:  else
        -:  170:  {
    #####:  171:    ecma_free_value (regexp_string_iterator_obj->iterated_string);
    #####:  172:    regexp_string_iterator_obj->iterated_string = ECMA_VALUE_EMPTY;
        -:  173:  }
        -:  174:
    #####:  175:  result = ecma_create_iter_result_object (match, ECMA_VALUE_FALSE);
        -:  176:
    #####:  177:free_variables:
    #####:  178:  ecma_deref_object (match_result_array_p);
        -:  179:
    #####:  180:  return result;
        -:  181:} /* ecma_builtin_regexp_string_iterator_prototype_object_next */
        -:  182:
        -:  183:/**
        -:  184: * @}
        -:  185: * @}
        -:  186: * @}
        -:  187: */
        -:  188:
        -:  189:#endif /* JERRY_ESNEXT */
