        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-helpers-error.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-conversion.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-builtin-helpers.h"
        -:   24:#include "ecma-objects.h"
        -:   25:#include "jrt.h"
        -:   26:
        -:   27:/** \addtogroup ecma ECMA
        -:   28: * @{
        -:   29: *
        -:   30: * \addtogroup ecmabuiltinhelpers ECMA builtin helper operations
        -:   31: * @{
        -:   32: */
        -:   33:
        -:   34:/**
        -:   35: * Handle calling [[Call]] of a built-in error object
        -:   36: *
        -:   37: * @return ecma value
        -:   38: */
        -:   39:ecma_value_t
    #####:   40:ecma_builtin_helper_error_dispatch_call (jerry_error_t error_type, /**< native error type */
        -:   41:                                         const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   42:                                         uint32_t arguments_list_len) /**< number of arguments */
        -:   43:{
    #####:   44:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   45:
    #####:   46:  if (arguments_list_len != 0
    #####:   47:      && !ecma_is_value_undefined (arguments_list_p[0]))
        -:   48:  {
    #####:   49:    ecma_string_t *message_string_p = ecma_op_to_string (arguments_list_p[0]);
        -:   50:
    #####:   51:    if (JERRY_UNLIKELY (message_string_p == NULL))
        -:   52:    {
    #####:   53:      return ECMA_VALUE_ERROR;
        -:   54:    }
        -:   55:
    #####:   56:    ecma_object_t *new_error_object_p = ecma_new_standard_error (error_type, message_string_p);
        -:   57:
    #####:   58:    ecma_deref_ecma_string (message_string_p);
    #####:   59:    return ecma_make_object_value (new_error_object_p);
        -:   60:  }
        -:   61:
    #####:   62:  ecma_object_t *new_error_object_p = ecma_new_standard_error (error_type, NULL);
        -:   63:
    #####:   64:  return ecma_make_object_value (new_error_object_p);
        -:   65:} /* ecma_builtin_helper_error_dispatch_call */
        -:   66:
        -:   67:/**
        -:   68: * @}
        -:   69: * @}
        -:   70: */
