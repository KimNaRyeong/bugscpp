        -:    0:Source:/home/workspace/tests/unit-core/test-vm-throw.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "config.h"
        -:   17:#include "jerryscript.h"
        -:   18:
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static int mode = 0;
        -:   22:static int counter = 0;
        -:   23:
        -:   24:static void
    #####:   25:vm_throw_callback (const jerry_value_t error_value, /**< captured error */
        -:   26:                   void *user_p) /**< user pointer */
        -:   27:{
    #####:   28:  TEST_ASSERT (user_p == (void *) &mode);
    #####:   29:  counter++;
        -:   30:
    #####:   31:  switch (mode)
        -:   32:  {
    #####:   33:    case 0:
        -:   34:    {
    #####:   35:      TEST_ASSERT (counter == 1);
    #####:   36:      TEST_ASSERT (jerry_value_is_number (error_value) && jerry_get_number_value (error_value) == -5.6);
        -:   37:      break;
        -:   38:    }
    #####:   39:    case 1:
        -:   40:    {
    #####:   41:      TEST_ASSERT (counter == 1);
    #####:   42:      TEST_ASSERT (jerry_value_is_null (error_value));
        -:   43:      break;
        -:   44:    }
    #####:   45:    case 2:
        -:   46:    {
        -:   47:      jerry_char_t string_buf[2];
    #####:   48:      jerry_size_t size = sizeof (string_buf);
        -:   49:
    #####:   50:      string_buf[0] = '\0';
    #####:   51:      string_buf[1] = '\0';
        -:   52:
    #####:   53:      TEST_ASSERT (counter >= 1 && counter <= 3);
    #####:   54:      TEST_ASSERT (jerry_value_is_string (error_value));
    #####:   55:      TEST_ASSERT (jerry_get_string_size (error_value) == size);
    #####:   56:      TEST_ASSERT (jerry_string_to_char_buffer (error_value, string_buf, size) == size);
    #####:   57:      TEST_ASSERT (string_buf[0] == 'e' && string_buf[1] == (char) ('0' + counter));
        -:   58:      break;
        -:   59:    }
    #####:   60:    case 3:
        -:   61:    {
    #####:   62:      TEST_ASSERT (counter == 1);
    #####:   63:      TEST_ASSERT (jerry_get_error_type (error_value) == JERRY_ERROR_RANGE);
        -:   64:      break;
        -:   65:    }
    #####:   66:    case 4:
        -:   67:    {
    #####:   68:      TEST_ASSERT (mode == 4);
    #####:   69:      TEST_ASSERT (counter >= 1 && counter <= 2);
        -:   70:
    #####:   71:      jerry_error_t error = (counter == 1) ? JERRY_ERROR_REFERENCE : JERRY_ERROR_TYPE;
    #####:   72:      TEST_ASSERT (jerry_get_error_type (error_value) == error);
        -:   73:      break;
        -:   74:    }
    #####:   75:    case 5:
        -:   76:    {
    #####:   77:      TEST_ASSERT (counter >= 1 && counter <= 2);
    #####:   78:      TEST_ASSERT (jerry_value_is_false (error_value));
        -:   79:      break;
        -:   80:    }
    #####:   81:    default:
        -:   82:    {
    #####:   83:      TEST_ASSERT (mode == 6 || mode == 7);
    #####:   84:      TEST_ASSERT (counter == 1);
    #####:   85:      TEST_ASSERT (jerry_value_is_true (error_value));
        -:   86:      break;
        -:   87:    }
        -:   88:  }
    #####:   89:} /* vm_throw_callback */
        -:   90:
        -:   91:static jerry_value_t
    #####:   92:native_handler (const jerry_call_info_t *call_info_p, /**< call info */
        -:   93:                const jerry_value_t args_p[], /**< arguments */
        -:   94:                const jerry_length_t args_count) /**< arguments length */
        -:   95:{
        -:   96:  (void) call_info_p;
        -:   97:  (void) args_p;
    #####:   98:  TEST_ASSERT (args_count == 0);
        -:   99:
    #####:  100:  jerry_char_t source[] = TEST_STRING_LITERAL ("throw false");
    #####:  101:  return jerry_eval (source, sizeof (source) - 1, JERRY_PARSE_NO_OPTS);
        -:  102:} /* native_handler */
        -:  103:
        -:  104:static void
    #####:  105:do_eval (const char *script_p, /**< script to evaluate */
        -:  106:         bool should_throw) /**< script throws an error */
        -:  107:{
    #####:  108:  jerry_value_t result = jerry_eval ((const jerry_char_t *) script_p, strlen (script_p), JERRY_PARSE_NO_OPTS);
    #####:  109:  TEST_ASSERT (jerry_value_is_error (result) == should_throw);
    #####:  110:  jerry_release_value (result);
    #####:  111:} /* do_eval */
        -:  112:
        -:  113:int
    #####:  114:main (void)
        -:  115:{
    #####:  116:  TEST_INIT ();
        -:  117:
        -:  118:  /* Test stopping an infinite loop. */
    #####:  119:  if (!jerry_is_feature_enabled (JERRY_FEATURE_VM_THROW))
        -:  120:  {
        -:  121:    return 0;
        -:  122:  }
        -:  123:
    #####:  124:  jerry_init (JERRY_INIT_EMPTY);
        -:  125:
    #####:  126:  jerry_set_vm_throw_callback (vm_throw_callback, (void *) &mode);
        -:  127:
    #####:  128:  mode = 0;
    #####:  129:  counter = 0;
    #####:  130:  do_eval (TEST_STRING_LITERAL ("throw -5.6"),
        -:  131:           true);
    #####:  132:  TEST_ASSERT (counter == 1);
        -:  133:
    #####:  134:  mode = 1;
    #####:  135:  counter = 0;
    #####:  136:  do_eval (TEST_STRING_LITERAL ("function f() { throw null }\n"
        -:  137:                                "function g() { f() }\n"
        -:  138:                                "g()\n"),
        -:  139:           true);
    #####:  140:  TEST_ASSERT (counter == 1);
        -:  141:
    #####:  142:  mode = 2;
    #####:  143:  counter = 0;
    #####:  144:  do_eval (TEST_STRING_LITERAL ("function f() { throw 'e1' }\n"
        -:  145:                                "function g() { try { f() } catch (e) { throw 'e2' } }\n"
        -:  146:                                "try { g() } catch (e) { throw 'e3' }\n"),
        -:  147:           true);
    #####:  148:  TEST_ASSERT (counter == 3);
        -:  149:
    #####:  150:  mode = 3;
    #####:  151:  counter = 0;
    #####:  152:  do_eval (TEST_STRING_LITERAL ("function f() { throw new RangeError() }\n"
        -:  153:                                "function g() { try { f() } finally { } }\n"
        -:  154:                                "try { g() } finally { }\n"),
        -:  155:           true);
    #####:  156:  TEST_ASSERT (counter == 1);
        -:  157:
    #####:  158:  mode = 4;
    #####:  159:  counter = 0;
    #####:  160:  do_eval (TEST_STRING_LITERAL ("function f() { unresolved }\n"
        -:  161:                                "function g() { try { f() } finally { null.member } }\n"
        -:  162:                                "try { g() } finally { }\n"),
        -:  163:           true);
    #####:  164:  TEST_ASSERT (counter == 2);
        -:  165:
        -:  166:  /* Native functions may trigger the call twice: */
    #####:  167:  jerry_value_t global_object_value = jerry_get_global_object ();
    #####:  168:  jerry_value_t function_value = jerry_create_external_function (native_handler);
    #####:  169:  jerry_value_t function_name_value = jerry_create_string ((const jerry_char_t *) "native");
        -:  170:
    #####:  171:  jerry_release_value (jerry_set_property (global_object_value, function_name_value, function_value));
    #####:  172:  jerry_release_value (function_name_value);
    #####:  173:  jerry_release_value (function_value);
    #####:  174:  jerry_release_value (global_object_value);
        -:  175:
    #####:  176:  mode = 5;
    #####:  177:  counter = 0;
    #####:  178:  do_eval (TEST_STRING_LITERAL ("native()\n"),
        -:  179:           true);
    #####:  180:  TEST_ASSERT (counter == 2);
        -:  181:
        -:  182:  /* Built-in functions should not trigger the call twice: */
    #####:  183:  mode = 6;
    #####:  184:  counter = 0;
    #####:  185:  do_eval (TEST_STRING_LITERAL ("function f() { eval('eval(\\'throw true\\')') }\n"
        -:  186:                                "f()\n"),
        -:  187:           true);
    #####:  188:  TEST_ASSERT (counter == 1);
        -:  189:
    #####:  190:  mode = 7;
    #####:  191:  counter = 0;
    #####:  192:  do_eval (TEST_STRING_LITERAL ("function f() { [1].map(function() { throw true }) }\n"
        -:  193:                                "f()\n"),
        -:  194:           true);
    #####:  195:  TEST_ASSERT (counter == 1);
        -:  196:
    #####:  197:  jerry_cleanup ();
    #####:  198:  return 0;
        -:  199:} /* main */
