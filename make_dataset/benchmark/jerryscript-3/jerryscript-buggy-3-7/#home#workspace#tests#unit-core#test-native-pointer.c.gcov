        -:    0:Source:/home/workspace/tests/unit-core/test-native-pointer.c
        -:    0:Programs:291
        -:    1: /* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:static int global_int = 4;
        -:   21:static void *global_p = (void *) &global_int;
        -:   22:static int global_counter = 0;
        -:   23:
        -:   24:static void
    #####:   25:native_free_callback (void *native_p, /**< native pointer */
        -:   26:                      jerry_object_native_info_t *info_p) /**< native info */
        -:   27:{
        -:   28:  (void) native_p;
    #####:   29:  TEST_ASSERT (info_p->free_cb == native_free_callback);
    #####:   30:  global_counter++;
    #####:   31:} /* native_free_callback */
        -:   32:
        -:   33:static const jerry_object_native_info_t native_info_1 =
        -:   34:{
        -:   35:  .free_cb = native_free_callback,
        -:   36:  .number_of_references = 0,
        -:   37:  .offset_of_references = 0,
        -:   38:};
        -:   39:
        -:   40:static const jerry_object_native_info_t native_info_2 =
        -:   41:{
        -:   42:  .free_cb = NULL,
        -:   43:  .number_of_references = 0,
        -:   44:  .offset_of_references = 0,
        -:   45:};
        -:   46:
        -:   47:static const jerry_object_native_info_t native_info_3 =
        -:   48:{
        -:   49:  .free_cb = NULL,
        -:   50:  .number_of_references = 0,
        -:   51:  .offset_of_references = 0,
        -:   52:};
        -:   53:
        -:   54:typedef struct
        -:   55:{
        -:   56:  uint32_t check_before;
        -:   57:  jerry_value_t a;
        -:   58:  jerry_value_t b;
        -:   59:  jerry_value_t c;
        -:   60:  uint32_t check_after;
        -:   61:} test_references_t;
        -:   62:
        -:   63:static test_references_t test_references1;
        -:   64:static test_references_t test_references2;
        -:   65:static test_references_t test_references3;
        -:   66:static test_references_t test_references4;
        -:   67:static int call_count = 0;
        -:   68:
        -:   69:static void
    #####:   70:native_references_free_callback (void *native_p, /**< native pointer */
        -:   71:                                 jerry_object_native_info_t *info_p) /**< native info */
        -:   72:{
    #####:   73:  test_references_t *refs_p = (test_references_t *) native_p;
        -:   74:
    #####:   75:  TEST_ASSERT ((refs_p == &test_references1 && test_references1.check_before == 0x12345678)
        -:   76:               || (refs_p == &test_references2 && test_references2.check_before == 0x87654321)
        -:   77:               || (refs_p == &test_references3 && test_references3.check_before == 0x12344321));
    #####:   78:  TEST_ASSERT (refs_p->check_before == refs_p->check_after);
        -:   79:
    #####:   80:  uint32_t check = refs_p->check_before;
        -:   81:
    #####:   82:  jerry_native_pointer_release_references (native_p, info_p);
        -:   83:
    #####:   84:  TEST_ASSERT (jerry_value_is_undefined (refs_p->a));
    #####:   85:  TEST_ASSERT (jerry_value_is_undefined (refs_p->b));
    #####:   86:  TEST_ASSERT (jerry_value_is_undefined (refs_p->c));
    #####:   87:  TEST_ASSERT (refs_p->check_before == check);
    #####:   88:  TEST_ASSERT (refs_p->check_after == check);
        -:   89:
    #####:   90:  call_count++;
    #####:   91:} /* native_references_free_callback */
        -:   92:
        -:   93:static const jerry_object_native_info_t native_info_4 =
        -:   94:{
        -:   95:  .free_cb = native_references_free_callback,
        -:   96:  .number_of_references = 3,
        -:   97:  .offset_of_references = (uint16_t) offsetof (test_references_t, a),
        -:   98:};
        -:   99:
        -:  100:static void
    #####:  101:init_references (test_references_t *refs_p, /**< native pointer */
        -:  102:                 uint32_t check) /**< value for memory check */
        -:  103:{
        -:  104:  /* Memory garbage */
    #####:  105:  refs_p->check_before = check;
    #####:  106:  refs_p->a = 1;
    #####:  107:  refs_p->b = 2;
    #####:  108:  refs_p->c = 3;
    #####:  109:  refs_p->check_after = check;
        -:  110:
    #####:  111:  jerry_native_pointer_init_references ((void *) refs_p, &native_info_4);
        -:  112:
    #####:  113:  TEST_ASSERT (jerry_value_is_undefined (refs_p->a));
    #####:  114:  TEST_ASSERT (jerry_value_is_undefined (refs_p->b));
    #####:  115:  TEST_ASSERT (jerry_value_is_undefined (refs_p->c));
    #####:  116:  TEST_ASSERT (refs_p->check_before == check);
    #####:  117:  TEST_ASSERT (refs_p->check_after == check);
    #####:  118:} /* init_references */
        -:  119:
        -:  120:static void
    #####:  121:set_references (test_references_t *refs_p, /**< native pointer */
        -:  122:                jerry_value_t value1, /**< first value to be set */
        -:  123:                jerry_value_t value2, /**< second value to be set */
        -:  124:                jerry_value_t value3) /**< third value to be set */
        -:  125:{
    #####:  126:  jerry_native_pointer_set_reference (&refs_p->a, value1);
    #####:  127:  jerry_native_pointer_set_reference (&refs_p->b, value2);
    #####:  128:  jerry_native_pointer_set_reference (&refs_p->c, value3);
        -:  129:
    #####:  130:  TEST_ASSERT (jerry_value_is_object (value1) ? jerry_value_is_object (refs_p->a)
        -:  131:                                              : jerry_value_is_string (refs_p->a));
    #####:  132:  TEST_ASSERT (jerry_value_is_object (value2) ? jerry_value_is_object (refs_p->b)
        -:  133:                                              : jerry_value_is_string (refs_p->b));
    #####:  134:  TEST_ASSERT (jerry_value_is_object (value3) ? jerry_value_is_object (refs_p->c)
        -:  135:                                              : jerry_value_is_string (refs_p->c));
    #####:  136:} /* set_references */
        -:  137:
        -:  138:static void
    #####:  139:check_native_info (jerry_value_t object_value, /**< object value */
        -:  140:                   const jerry_object_native_info_t *native_info_p, /**< native info */
        -:  141:                   void *expected_pointer_p) /**< expected pointer */
        -:  142:{
        -:  143:  void *native_pointer_p;
    #####:  144:  TEST_ASSERT (jerry_get_object_native_pointer (object_value, &native_pointer_p, native_info_p));
    #####:  145:  TEST_ASSERT (native_pointer_p == expected_pointer_p);
    #####:  146:} /* check_native_info */
        -:  147:
        -:  148:int
    #####:  149:main (void)
        -:  150:{
    #####:  151:  TEST_INIT ();
    #####:  152:  jerry_init (JERRY_INIT_EMPTY);
        -:  153:
    #####:  154:  jerry_value_t object_value = jerry_create_object ();
        -:  155:
    #####:  156:  jerry_set_object_native_pointer (object_value, global_p, &native_info_1);
    #####:  157:  jerry_set_object_native_pointer (object_value, NULL, &native_info_2);
        -:  158:
    #####:  159:  check_native_info (object_value, &native_info_1, global_p);
    #####:  160:  check_native_info (object_value, &native_info_2, NULL);
        -:  161:
    #####:  162:  jerry_release_value (object_value);
        -:  163:
    #####:  164:  jerry_gc (JERRY_GC_PRESSURE_HIGH);
    #####:  165:  TEST_ASSERT (global_counter == 1);
    #####:  166:  global_counter = 0;
        -:  167:
    #####:  168:  object_value = jerry_create_object ();
        -:  169:
    #####:  170:  jerry_set_object_native_pointer (object_value, global_p, &native_info_1);
    #####:  171:  jerry_set_object_native_pointer (object_value, NULL, &native_info_2);
        -:  172:
    #####:  173:  TEST_ASSERT (jerry_delete_object_native_pointer (object_value, &native_info_1));
        -:  174:
    #####:  175:  TEST_ASSERT (!jerry_get_object_native_pointer (object_value, NULL, &native_info_1));
    #####:  176:  check_native_info (object_value, &native_info_2, NULL);
        -:  177:
    #####:  178:  TEST_ASSERT (!jerry_delete_object_native_pointer (object_value, &native_info_1));
        -:  179:
    #####:  180:  TEST_ASSERT (!jerry_get_object_native_pointer (object_value, NULL, &native_info_1));
    #####:  181:  check_native_info (object_value, &native_info_2, NULL);
        -:  182:
    #####:  183:  TEST_ASSERT (jerry_delete_object_native_pointer (object_value, &native_info_2));
        -:  184:
    #####:  185:  TEST_ASSERT (!jerry_get_object_native_pointer (object_value, NULL, &native_info_1));
    #####:  186:  TEST_ASSERT (!jerry_get_object_native_pointer (object_value, NULL, &native_info_2));
        -:  187:
    #####:  188:  jerry_set_object_native_pointer (object_value, NULL, &native_info_1);
        -:  189:
    #####:  190:  check_native_info (object_value, &native_info_1, NULL);
    #####:  191:  TEST_ASSERT (!jerry_get_object_native_pointer (object_value, NULL, &native_info_2));
        -:  192:
    #####:  193:  jerry_set_object_native_pointer (object_value, global_p, &native_info_2);
        -:  194:
    #####:  195:  check_native_info (object_value, &native_info_1, NULL);
    #####:  196:  check_native_info (object_value, &native_info_2, global_p);
        -:  197:
    #####:  198:  jerry_set_object_native_pointer (object_value, global_p, &native_info_1);
        -:  199:
    #####:  200:  check_native_info (object_value, &native_info_1, global_p);
    #####:  201:  check_native_info (object_value, &native_info_2, global_p);
        -:  202:
    #####:  203:  TEST_ASSERT (jerry_delete_object_native_pointer (object_value, &native_info_1));
    #####:  204:  TEST_ASSERT (jerry_delete_object_native_pointer (object_value, &native_info_2));
        -:  205:
    #####:  206:  TEST_ASSERT (!jerry_get_object_native_pointer (object_value, NULL, &native_info_1));
    #####:  207:  TEST_ASSERT (!jerry_get_object_native_pointer (object_value, NULL, &native_info_2));
        -:  208:
    #####:  209:  jerry_set_object_native_pointer (object_value, global_p, &native_info_1);
    #####:  210:  jerry_set_object_native_pointer (object_value, NULL, &native_info_2);
    #####:  211:  jerry_set_object_native_pointer (object_value, global_p, &native_info_3);
        -:  212:
    #####:  213:  check_native_info (object_value, &native_info_1, global_p);
    #####:  214:  check_native_info (object_value, &native_info_2, NULL);
    #####:  215:  check_native_info (object_value, &native_info_3, global_p);
        -:  216:
    #####:  217:  TEST_ASSERT (jerry_delete_object_native_pointer (object_value, &native_info_1));
    #####:  218:  TEST_ASSERT (jerry_delete_object_native_pointer (object_value, &native_info_2));
    #####:  219:  TEST_ASSERT (jerry_delete_object_native_pointer (object_value, &native_info_3));
        -:  220:
    #####:  221:  TEST_ASSERT (!jerry_get_object_native_pointer (object_value, NULL, &native_info_1));
    #####:  222:  TEST_ASSERT (!jerry_get_object_native_pointer (object_value, NULL, &native_info_2));
    #####:  223:  TEST_ASSERT (!jerry_get_object_native_pointer (object_value, NULL, &native_info_3));
        -:  224:
    #####:  225:  jerry_set_object_native_pointer (object_value, NULL, &native_info_1);
    #####:  226:  jerry_set_object_native_pointer (object_value, global_p, &native_info_2);
    #####:  227:  jerry_set_object_native_pointer (object_value, NULL, &native_info_3);
        -:  228:
    #####:  229:  check_native_info (object_value, &native_info_1, NULL);
    #####:  230:  check_native_info (object_value, &native_info_2, global_p);
    #####:  231:  check_native_info (object_value, &native_info_3, NULL);
        -:  232:
        -:  233:  /* Reversed delete order. */
    #####:  234:  TEST_ASSERT (jerry_delete_object_native_pointer (object_value, &native_info_3));
    #####:  235:  TEST_ASSERT (jerry_delete_object_native_pointer (object_value, &native_info_2));
    #####:  236:  TEST_ASSERT (jerry_delete_object_native_pointer (object_value, &native_info_1));
        -:  237:
    #####:  238:  TEST_ASSERT (!jerry_get_object_native_pointer (object_value, NULL, &native_info_1));
    #####:  239:  TEST_ASSERT (!jerry_get_object_native_pointer (object_value, NULL, &native_info_2));
    #####:  240:  TEST_ASSERT (!jerry_get_object_native_pointer (object_value, NULL, &native_info_3));
        -:  241:
        -:  242:  /* Test value references */
    #####:  243:  jerry_value_t string1_value = jerry_create_string ((const jerry_char_t *) "String1");
    #####:  244:  jerry_value_t string2_value = jerry_create_string ((const jerry_char_t *) "String2");
        -:  245:
    #####:  246:  jerry_value_t object1_value = jerry_create_object ();
    #####:  247:  jerry_value_t object2_value = jerry_create_object ();
        -:  248:
    #####:  249:  init_references (&test_references1, 0x12345678);
    #####:  250:  init_references (&test_references2, 0x87654321);
        -:  251:
    #####:  252:  jerry_set_object_native_pointer (object1_value, (void *) &test_references1, &native_info_4);
    #####:  253:  jerry_set_object_native_pointer (object2_value, (void *) &test_references2, &native_info_4);
        -:  254:
        -:  255:  /* Assign values (cross reference between object1 and object2). */
    #####:  256:  set_references (&test_references1, string1_value, object2_value, string2_value);
    #####:  257:  set_references (&test_references2, string2_value, object1_value, string1_value);
        -:  258:
    #####:  259:  jerry_gc (JERRY_GC_PRESSURE_HIGH);
        -:  260:
        -:  261:  /* Reassign values. */
    #####:  262:  set_references (&test_references1, object2_value, string2_value, string1_value);
    #####:  263:  set_references (&test_references2, object1_value, string1_value, string2_value);
        -:  264:
    #####:  265:  jerry_gc (JERRY_GC_PRESSURE_HIGH);
        -:  266:
    #####:  267:  jerry_release_value (object1_value);
    #####:  268:  jerry_release_value (object2_value);
        -:  269:
    #####:  270:  object1_value = jerry_create_object ();
    #####:  271:  object2_value = jerry_create_object ();
        -:  272:
    #####:  273:  init_references (&test_references3, 0x12344321);
        -:  274:
        -:  275:  /* Assign the same native pointer to multiple objects. */
    #####:  276:  jerry_set_object_native_pointer (object1_value, (void *) &test_references3, &native_info_4);
    #####:  277:  jerry_set_object_native_pointer (object2_value, (void *) &test_references3, &native_info_4);
        -:  278:
    #####:  279:  set_references (&test_references3, object1_value, object2_value, string1_value);
        -:  280:
    #####:  281:  jerry_gc (JERRY_GC_PRESSURE_HIGH);
        -:  282:
    #####:  283:  init_references (&test_references4, 0x87655678);
        -:  284:
        -:  285:  /* Re-assign reference */
    #####:  286:  jerry_set_object_native_pointer (object1_value, (void *) &test_references4, &native_info_4);
        -:  287:
    #####:  288:  set_references (&test_references4, string1_value, string2_value, string1_value);
        -:  289:
    #####:  290:  jerry_set_object_native_pointer (object1_value, NULL, &native_info_4);
        -:  291:
    #####:  292:  jerry_native_pointer_release_references ((void *) &test_references4, &native_info_4);
        -:  293:
        -:  294:  /* Calling jerry_native_pointer_init_references with test_references4 is optional here. */
        -:  295:
    #####:  296:  jerry_set_object_native_pointer (object1_value, (void *) &test_references4, &native_info_4);
        -:  297:
    #####:  298:  set_references (&test_references4, string2_value, string1_value, string2_value);
        -:  299:
    #####:  300:  TEST_ASSERT (jerry_delete_object_native_pointer (object1_value, &native_info_4));
        -:  301:
    #####:  302:  jerry_native_pointer_release_references ((void *) &test_references4, &native_info_4);
        -:  303:
    #####:  304:  jerry_release_value (object1_value);
    #####:  305:  jerry_release_value (object2_value);
        -:  306:
        -:  307:  /* Delete references */
    #####:  308:  for (int i = 0; i < 3; i++)
        -:  309:  {
    #####:  310:    object1_value = jerry_create_object ();
        -:  311:
    #####:  312:    jerry_set_object_native_pointer (object1_value, global_p, NULL);
    #####:  313:    jerry_set_object_native_pointer (object1_value, (void *) &test_references4, &native_info_4);
    #####:  314:    jerry_set_object_native_pointer (object1_value, global_p, &native_info_2);
    #####:  315:    set_references (&test_references4, string1_value, string2_value, object1_value);
        -:  316:
    #####:  317:    jerry_gc (JERRY_GC_PRESSURE_HIGH);
        -:  318:
    #####:  319:    if (i == 1)
        -:  320:    {
    #####:  321:      TEST_ASSERT (jerry_delete_object_native_pointer (object1_value, NULL));
        -:  322:    }
    #####:  323:    else if (i == 2)
        -:  324:    {
    #####:  325:      TEST_ASSERT (jerry_delete_object_native_pointer (object1_value, &native_info_2));
        -:  326:    }
        -:  327:
    #####:  328:    TEST_ASSERT (jerry_delete_object_native_pointer (object1_value, &native_info_4));
    #####:  329:    jerry_native_pointer_release_references ((void *) &test_references4, &native_info_4);
    #####:  330:    jerry_release_value (object1_value);
        -:  331:  }
        -:  332:
    #####:  333:  jerry_release_value (string1_value);
    #####:  334:  jerry_release_value (string2_value);
        -:  335:
    #####:  336:  jerry_release_value (object_value);
        -:  337:
    #####:  338:  jerry_cleanup ();
        -:  339:
    #####:  340:  TEST_ASSERT (global_counter == 0);
    #####:  341:  TEST_ASSERT (call_count == 3);
        -:  342:  return 0;
        -:  343:} /* main */
