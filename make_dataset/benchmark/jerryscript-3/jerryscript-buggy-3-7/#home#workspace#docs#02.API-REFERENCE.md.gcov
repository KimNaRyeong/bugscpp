        -:    0:Source:/home/workspace/docs/02.API-REFERENCE.md
        -:    0:Programs:291
        -:    1:# JerryScript types
        -:    2:
        -:    3:## jerry_init_flag_t
        -:    4:
        -:    5:Enum that contains the following elements:
        -:    6:
        -:    7: - JERRY_INIT_EMPTY - empty flag set
        -:    8: - JERRY_INIT_SHOW_OPCODES - dump byte-code to log after parse
        -:    9: - JERRY_INIT_SHOW_REGEXP_OPCODES - dump regexp byte-code to log after compilation
        -:   10: - JERRY_INIT_MEM_STATS - dump memory statistics
        -:   11: - JERRY_INIT_MEM_STATS_SEPARATE - **deprecated**, dump memory statistics and reset peak values after parse
        -:   12: - JERRY_INIT_DEBUGGER - **deprecated**, an unused placeholder now
        -:   13:
        -:   14:*Changed in version 2.0*: `JERRY_INIT_MEM_STATS_SEPARATE` and `JERRY_INIT_DEBUGGER` are now deprecated and not used internally.
        -:   15:
        -:   16:## jerry_type_t
        -:   17:
        -:   18:Enum that contains JerryScript API value types:
        -:   19:
        -:   20: - JERRY_TYPE_NONE - no type information
        -:   21: - JERRY_TYPE_UNDEFINED - undefined type
        -:   22: - JERRY_TYPE_NULL - null type
        -:   23: - JERRY_TYPE_BOOLEAN - boolean type
        -:   24: - JERRY_TYPE_NUMBER - number type
        -:   25: - JERRY_TYPE_STRING - string type
        -:   26: - JERRY_TYPE_OBJECT - object type
        -:   27: - JERRY_TYPE_FUNCTION - function type
        -:   28: - JERRY_TYPE_ERROR - error/abort type
        -:   29: - JERRY_TYPE_SYMBOL - symbol type
        -:   30: - JERRY_TYPE_BIGINT - bigint type
        -:   31:
        -:   32:*New in version 2.0*.
        -:   33:
        -:   34:*Changed in version 2.4*: Added `JERRY_TYPE_BIGINT` value.
        -:   35:
        -:   36:## jerry_object_type_t
        -:   37:
        -:   38:Enum that contains JerryScript **object** value types:
        -:   39:
        -:   40: - JERRY_OBJECT_TYPE_NONE - Non-object type
        -:   41: - JERRY_OBJECT_TYPE_GENERIC - Generic JavaScript object without any internal property
        -:   42: - JERRY_OBJECT_TYPE_MODULE_NAMESPACE - Module namespace object
        -:   43: - JERRY_OBJECT_TYPE_ARRAY - Array object
        -:   44: - JERRY_OBJECT_TYPE_PROXY - Proxy object
        -:   45: - JERRY_OBJECT_TYPE_SCRIPT - Script object (see [jerry_parse](#jerry_parse))
        -:   46: - JERRY_OBJECT_TYPE_MODULE - Module object (see [jerry_parse](#jerry_parse))
        -:   47: - JERRY_OBJECT_TYPE_PROMISE - Promise object
        -:   48: - JERRY_OBJECT_TYPE_DATAVIEW - Dataview object
        -:   49: - JERRY_OBJECT_TYPE_FUNCTION - Function object (see [jerry_function_get_type](#jerry_function_get_type))
        -:   50: - JERRY_OBJECT_TYPE_TYPEDARRAY - %TypedArray% object (see [jerry_get_typedarray_type](#jerry_get_typedarray_type))
        -:   51: - JERRY_OBJECT_TYPE_ITERATOR - Iterator object (see [jerry_iterator_get_type](#jerry_get_typedarray_type))
        -:   52: - JERRY_OBJECT_TYPE_CONTAINER - Container object (see [jerry_get_container_type](#jerry_get_container_type))
        -:   53: - JERRY_OBJECT_TYPE_ERROR - Error object
        -:   54: - JERRY_OBJECT_TYPE_ARRAYBUFFER - Array buffer object
        -:   55: - JERRY_OBJECT_TYPE_SHARED_ARRAYBUFFER - Shared Array buffer object
        -:   56:
        -:   57: - JERRY_OBJECT_TYPE_ARGUMENTS - Arguments object
        -:   58: - JERRY_OBJECT_TYPE_BOOLEAN - Boolean object
        -:   59: - JERRY_OBJECT_TYPE_DATE - Date object
        -:   60: - JERRY_OBJECT_TYPE_NUMBER - Number object
        -:   61: - JERRY_OBJECT_TYPE_REGEXP - RegExp object
        -:   62: - JERRY_OBJECT_TYPE_STRING - String object
        -:   63: - JERRY_OBJECT_TYPE_SYMBOL - Symbol object
        -:   64: - JERRY_OBJECT_TYPE_GENERATOR - Generator object
        -:   65: - JERRY_OBJECT_TYPE_BIGINT - BigInt object
        -:   66: - JERRY_OBJECT_TYPE_WEAKREF - WeakRef object
        -:   67:
        -:   68:*New in version 2.4*.
        -:   69:
        -:   70:*Changed in version [[NEXT_RELEASE]]*: Added `JERRY_OBJECT_TYPE_MODULE_NAMESPACE`, `JERRY_OBJECT_TYPE_PROMISE`, `JERRY_OBJECT_TYPE_DATAVIEW`,
        -:   71:                                       `JERRY_OBJECT_TYPE_ERROR`, `JERRY_OBJECT_TYPE_SHARED_ARRAYBUFFER`, `JERRY_OBJECT_TYPE_WEAKREF`,
        -:   72:                                       `JERRY_OBJECT_TYPE_SCRIPT`, and `JERRY_OBJECT_TYPE_MODULE` values.
        -:   73:
        -:   74:## jerry_function_type_t
        -:   75:
        -:   76:Enum that contains JerryScript **function** value types:
        -:   77:
        -:   78: - JERRY_FUNCTION_TYPE_NONE - Non-function type
        -:   79: - JERRY_FUNCTION_TYPE_GENERIC - Generic JavaScript function
        -:   80: - JERRY_FUNCTION_TYPE_ACCESSOR - Accessor function
        -:   81: - JERRY_FUNCTION_TYPE_BOUND - Bound function
        -:   82: - JERRY_FUNCTION_TYPE_ARROW - Arrow fuction
        -:   83: - JERRY_FUNCTION_TYPE_GENERATOR - Generator function object
        -:   84:
        -:   85:*New in version 2.4*.
        -:   86:
        -:   87:## jerry_iterator_type_t
        -:   88:
        -:   89:Enum that contains JerryScript **iterator** value types:
        -:   90:
        -:   91: - JERRY_ITERATOR_TYPE_NONE - Non-iterator type
        -:   92: - JERRY_ITERATOR_TYPE_ARRAY - Array iterator
        -:   93: - JERRY_ITERATOR_TYPE_STRING - String iterator
        -:   94: - JERRY_ITERATOR_TYPE_MAP - Map iterator
        -:   95: - JERRY_ITERATOR_TYPE_SET - Set iterator
        -:   96:
        -:   97:*New in version 2.4*.
        -:   98:
        -:   99:## jerry_proxy_object_options_t
        -:  100:
        -:  101:These option bits allow specializing Proxies with non-standard behaviour.
        -:  102:These flags are recommended only for those trusted Proxies, whose handlers
        -:  103:produce correct results.
        -:  104:
        -:  105:- JERRY_PROXY_SKIP_RESULT_VALIDATION - skip result validation for [[GetPrototypeOf]], [[SetPrototypeOf]], [[IsExtensible]],
        -:  106:                                       [[PreventExtensions]], [[GetOwnProperty]], [[DefineOwnProperty]], [[HasProperty]],
        -:  107:                                       [[Get]], [[Set]], [[Delete]] and [[OwnPropertyKeys]]
        -:  108:
        -:  109:*New in version [[NEXT_RELEASE]]*.
        -:  110:
        -:  111:## jerry_property_filter_t
        -:  112:
        -:  113:Enum that contains JerryScript **property filter** options bits:
        -:  114:
        -:  115: - JERRY_PROPERTY_FILTER_ALL -  List all property keys independently from key type or property value attributes (equivalent to Reflect.ownKeys call)
        -:  116: - JERRY_PROPERTY_FILTER_TRAVERSE_PROTOTYPE_CHAIN - Include keys from the objects's  prototype chain as well
        -:  117: - JERRY_PROPERTY_FILTER_EXLCUDE_NON_CONFIGURABLE - Exclude property key if the property is non-configurable
        -:  118: - JERRY_PROPERTY_FILTER_EXLCUDE_NON_ENUMERABLE - Exclude property key if the property is non-enumerable
        -:  119: - JERRY_PROPERTY_FILTER_EXLCUDE_NON_WRITABLE - Exclude property key if the property is non-writable
        -:  120: - JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS - Exclude property key if it is a string
        -:  121: - JERRY_PROPERTY_FILTER_EXLCUDE_SYMBOLS - Exclude property key if it is a symbol
        -:  122: - JERRY_PROPERTY_FILTER_EXLCUDE_INTEGER_INDICES - Exclude property key if it is an integer index
        -:  123: - JERRY_PROPERTY_FILTER_INTEGER_INDICES_AS_NUMBER - By default integer index property keys are converted to string. Enabling this flags keeps integer index property keys as numbers
        -:  124:
        -:  125:*New in version 2.4*.
        -:  126:
        -:  127:## jerry_error_t
        -:  128:
        -:  129:Possible types of an error:
        -:  130:
        -:  131: - JERRY_ERROR_COMMON - common error
        -:  132: - JERRY_ERROR_EVAL - eval error
        -:  133: - JERRY_ERROR_RANGE - range error
        -:  134: - JERRY_ERROR_REFERENCE - reference error
        -:  135: - JERRY_ERROR_SYNTAX - syntax error
        -:  136: - JERRY_ERROR_TYPE - type error
        -:  137: - JERRY_ERROR_URI - URI error
        -:  138:
        -:  139:There is also a special value `JERRY_ERROR_NONE` which is not an error type
        -:  140:this value can only be returned by the [jerry_get_error_type](#jerry_get_error_type).
        -:  141:
        -:  142:*Changed in version 2.0*: The `JERRY_ERROR_NONE` was added to be used by the [jerry_get_error_type](#jerry_get_error_type) method.
        -:  143:
        -:  144:## jerry_feature_t
        -:  145:
        -:  146:Possible compile time enabled feature types:
        -:  147:
        -:  148: - JERRY_FEATURE_CPOINTER_32_BIT - 32 bit compressed pointers
        -:  149: - JERRY_FEATURE_ERROR_MESSAGES - error messages
        -:  150: - JERRY_FEATURE_JS_PARSER - js-parser
        -:  151: - JERRY_FEATURE_MEM_STATS - memory statistics
        -:  152: - JERRY_FEATURE_PARSER_DUMP - parser byte-code dumps
        -:  153: - JERRY_FEATURE_REGEXP_DUMP - regexp byte-code dumps
        -:  154: - JERRY_FEATURE_SNAPSHOT_SAVE - saving snapshot files
        -:  155: - JERRY_FEATURE_SNAPSHOT_EXEC - executing snapshot files
        -:  156: - JERRY_FEATURE_DEBUGGER - debugging
        -:  157: - JERRY_FEATURE_VM_EXEC_STOP - stopping ECMAScript execution
        -:  158: - JERRY_FEATURE_VM_THROW - capturing ECMAScript throws
        -:  159: - JERRY_FEATURE_JSON - JSON support
        -:  160: - JERRY_FEATURE_PROMISE - promise support
        -:  161: - JERRY_FEATURE_TYPEDARRAY - Typedarray support
        -:  162: - JERRY_FEATURE_DATE - Date support
        -:  163: - JERRY_FEATURE_REGEXP - RegExp support
        -:  164: - JERRY_FEATURE_LINE_INFO - line info available
        -:  165: - JERRY_FEATURE_LOGGING - logging
        -:  166: - JERRY_FEATURE_SYMBOL - symbol support
        -:  167: - JERRY_FEATURE_DATAVIEW - DataView support
        -:  168: - JERRY_FEATURE_PROXY - Proxy support
        -:  169: - JERRY_FEATURE_MAP - Map support
        -:  170: - JERRY_FEATURE_SET - Set support
        -:  171: - JERRY_FEATURE_WEAKMAP - WeakMap support
        -:  172: - JERRY_FEATURE_WEAKSET - WeakSet support
        -:  173: - JERRY_FEATURE_BIGINT - BigInt support
        -:  174: - JERRY_FEATURE_REALM - realm support
        -:  175: - JERRY_FEATURE_GLOBAL_THIS - GlobalThisValue support
        -:  176: - JERRY_FEATURE_PROMISE_CALLBACK - Promise callback support
        -:  177: - JERRY_FEATURE_MODULE - Module support
        -:  178: - JERRY_FEATURE_WEAKREF - WeakRef support
        -:  179: - JERRY_FEATURE_FUNCTION_TO_STRING - function toString support
        -:  180:
        -:  181:*New in version 2.0*.
        -:  182:
        -:  183:*Changed in version 2.3*: Added `JERRY_FEATURE_WEAKMAP`, `JERRY_FEATURE_WEAKSET` values.
        -:  184:
        -:  185:*Changed in version 2.4*: Added `JERRY_FEATURE_BIGINT`, `JERRY_FEATURE_REALM` values.
        -:  186:
        -:  187:*Changed in version [[NEXT_RELEASE]]*: Added `JERRY_FEATURE_VM_THROW`, `JERRY_FEATURE_GLOBAL_THIS`,
        -:  188:                                       `JERRY_FEATURE_PROMISE_CALLBACK`, and `JERRY_FEATURE_MODULE`,
        -:  189:                                       `JERRY_FEATURE_WEAKREF`, and `JERRY_FEATURE_FUNCTION_TO_STRING` values.
        -:  190:
        -:  191:## jerry_container_type_t
        -:  192:
        -:  193:Container object types:
        -:  194:
        -:  195: - JERRY_CONTAINER_TYPE_INVALID - Invalid container
        -:  196: - JERRY_CONTAINER_TYPE_MAP - Map type
        -:  197: - JERRY_CONTAINER_TYPE_SET - Set type
        -:  198: - JERRY_CONTAINER_TYPE_WEAKMAP - WeakMap type
        -:  199: - JERRY_CONTAINER_TYPE_WEAKSET - WeakSet type
        -:  200:
        -:  201: *New in version 2.3*.
        -:  202:
        -:  203:## jerry_well_known_symbol_t
        -:  204:
        -:  205:Well-known symbols:
        -:  206:
        -:  207: - JERRY_SYMBOL_ASYNC_ITERATOR - @@asyncIterator well-known symbol
        -:  208: - JERRY_SYMBOL_HAS_INSTANCE - @@hasInstance well-known symbol
        -:  209: - JERRY_SYMBOL_IS_CONCAT_SPREADABLE - @@isConcatSpreadable well-known symbol
        -:  210: - JERRY_SYMBOL_ITERATOR - @@iterator well-known symbol
        -:  211: - JERRY_SYMBOL_MATCH - @@match well-known symbol
        -:  212: - JERRY_SYMBOL_REPLACE - @@replace well-known symbol
        -:  213: - JERRY_SYMBOL_SEARCH - @@search well-known symbol
        -:  214: - JERRY_SYMBOL_SPECIES - @@species well-known symbol
        -:  215: - JERRY_SYMBOL_SPLIT - @@split well-known symbol
        -:  216: - JERRY_SYMBOL_TO_PRIMITIVE - @@toPrimitive well-known symbol
        -:  217: - JERRY_SYMBOL_TO_STRING_TAG - @@toStringTag well-known symbol
        -:  218: - JERRY_SYMBOL_UNSCOPABLES - @@unscopables well-known symbol
        -:  219: - JERRY_SYMBOL_MATCH_ALL - @@matchAll well-known symbol
        -:  220:
        -:  221: *New in version 2.4*.
        -:  222:
        -:  223:## jerry_regexp_flags_t
        -:  224:
        -:  225:RegExp object optional flags:
        -:  226:
        -:  227:  - JERRY_REGEXP_FLAG_GLOBAL - global match; find all matches rather than stopping after the first match
        -:  228:  - JERRY_REGEXP_FLAG_IGNORE_CASE - ignore case
        -:  229:  - JERRY_REGEXP_FLAG_MULTILINE - multiline; treat beginning and end characters (^ and $) as working
        -:  230:    over
        -:  231:    multiple lines (i.e., match the beginning or end of each line (delimited by \n or \r), not only the
        -:  232:    very beginning or end of the whole input string)
        -:  233:  - JERRY_REGEXP_FLAG_STICKY - The sticky flag indicates that it matches only from the index indicated
        -:  234:    by the lastIndex property
        -:  235:  - JERRY_REGEXP_FLAG_UNICODE - The unicode flag enables various Unicode-related features
        -:  236:  - JERRY_REGEXP_FLAG_DOTALL -The dotall flag indicates that the dot special character (".") should
        -:  237:    additionally match the following line terminator ("newline") characters in a string;
        -:  238:
        -:  239:
        -:  240:*New in version 2.0*.
        -:  241:
        -:  242:*Changed in version 2.4*: Added `JERRY_REGEXP_FLAG_STICKY`, `JERRY_REGEXP_FLAG_UNICODE` , `JERRY_REGEXP_FLAG_DOTALL` values.
        -:  243:
        -:  244:
        -:  245:## jerry_parse_option_enable_feature_t
        -:  246:
        -:  247:Option bits for [jerry_parse_options_t](#jerry_parse_options_t).
        -:  248:
        -:  249: - JERRY_PARSE_NO_OPTS - No options passed
        -:  250: - JERRY_PARSE_STRICT_MODE - Enable strict mode
        -:  251: - JERRY_PARSE_MODULE - Parse source as an ECMAScript module
        -:  252: - JERRY_PARSE_HAS_ARGUMENT_LIST - `argument_list` field is valid, this also means that function parsing will be done
        -:  253: - JERRY_PARSE_HAS_RESOURCE - `resource_name` field is valid
        -:  254: - JERRY_PARSE_HAS_START - `start_line` and `start_column` fields are valid
        -:  255: - JERRY_PARSE_HAS_USER_VALUE - `user_value` field is valid
        -:  256:
        -:  257:*New in version [[NEXT_RELEASE]]*.
        -:  258:
        -:  259:Using both `JERRY_PARSE_MODULE` and `JERRY_PARSE_HAS_ARGUMENT_LIST` is an invalid combination and will result in
        -:  260:an error during parsing.
        -:  261:
        -:  262:**See also**
        -:  263:
        -:  264:- [jerry_parse_options_t](#jerry_parse_options_t)
        -:  265:
        -:  266:## jerry_gc_mode_t
        -:  267:
        -:  268:Set garbage collection operational mode
        -:  269:
        -:  270: - JERRY_GC_PRESSURE_LOW - free unused objects
        -:  271: - JERRY_GC_PRESSURE_HIGH - free as much memory as possible
        -:  272:
        -:  273:The difference between `JERRY_GC_PRESSURE_LOW` and `JERRY_GC_PRESSURE_HIGH`
        -:  274:is that the former keeps memory allocated for performance improvements such
        -:  275:as property hash tables for large objects. The latter frees all possible
        -:  276:memory blocks but the performance may drop after the garbage collection.
        -:  277:
        -:  278:*New in version 2.0*.
        -:  279:
        -:  280:## jerry_backtrace_frame_types_t
        -:  281:
        -:  282:List of backtrace frame types returned by
        -:  283:[jerry_backtrace_get_frame_type](#jerry_backtrace_get_frame_type).
        -:  284:
        -:  285: - JERRY_BACKTRACE_FRAME_JS - indicates that the frame is created for a JavaScript function/method
        -:  286:
        -:  287:*New in version [[NEXT_RELEASE]]*.
        -:  288:
        -:  289:## jerry_generate_snapshot_opts_t
        -:  290:
        -:  291:Flags for [jerry_generate_snapshot](#jerry_generate_snapshot):
        -:  292:
        -:  293: - JERRY_SNAPSHOT_SAVE_STATIC - generate static snapshot (see below)
        -:  294:
        -:  295:**Generate static snapshots**
        -:  296:Snapshots contain literal pools, and these literal pools contain references
        -:  297:to constant literals (strings, numbers, etc.). When a snapshot is executed,
        -:  298:these literals are converted to jerry values and the literal pool entries
        -:  299:are changed to their corresponding jerry value. To support this conversion,
        -:  300:the literals and literal pools are copied into RAM even if the
        -:  301:`JERRY_SNAPSHOT_EXEC_COPY_DATA` option is passed to
        -:  302:[jerry_exec_snapshot](#jerry_exec_snapshot). This non-negligible memory
        -:  303:consumption can be avoided by using static snapshots. The literals of
        -:  304:these snapshots are limited to magic strings and 28 bit signed integers,
        -:  305:so their constant pools do not need to be loaded into the memory.
        -:  306:Hence these snapshots can be executed from ROM.
        -:  307:
        -:  308:***Important note:*** The [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  309:function rejects static snaphots unless the `JERRY_SNAPSHOT_EXEC_ALLOW_STATIC`
        -:  310:option bit is set. The caller must also ensure that the same magic
        -:  311:strings are set by [jerry_register_magic_strings](#jerry_register_magic_strings)
        -:  312:when the snapshot is generated and executed. Furthermore the
        -:  313:`JERRY_SNAPSHOT_EXEC_COPY_DATA` option is not allowed.
        -:  314:
        -:  315:*New in version 2.0*.
        -:  316:
        -:  317:*Changed in version [[NEXT_RELEASE]]*: The `JERRY_SNAPSHOT_SAVE_STRICT` value is removed, `JERRY_PARSE_STRICT_MODE` should be used instead.
        -:  318:
        -:  319:## jerry_exec_snapshot_opts_t
        -:  320:
        -:  321:Flags for [jerry_exec_snapshot](#jerry_exec_snapshot) functions:
        -:  322:
        -:  323: - JERRY_SNAPSHOT_EXEC_COPY_DATA - copy snapshot data into memory (see below)
        -:  324: - JERRY_SNAPSHOT_EXEC_ALLOW_STATIC - allow executing static snapshots
        -:  325: - JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION - load snapshot as function instead of executing it
        -:  326: - JERRY_SNAPSHOT_EXEC_HAS_RESOURCE - `resource_name` field is valid
        -:  327:                                      in [jerry_exec_snapshot_option_values_t](#jerry_exec_snapshot_option_values_t)
        -:  328: - JERRY_SNAPSHOT_EXEC_HAS_USER_VALUE - `user_value` field is valid
        -:  329:                                        in [jerry_exec_snapshot_option_values_t](#jerry_exec_snapshot_option_values_t)
        -:  330:
        -:  331:*Changed in version [[NEXT_RELEASE]]*: The `JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION` value is added,
        -:  332:                                       which replaces the `jerry_load_function_snapshot` function.
        -:  333:
        -:  334:**Copy snapshot data into memory**
        -:  335:
        -:  336:By default the snapshot buffer is expected to be present in memory until
        -:  337:[jerry_cleanup](#jerry_cleanup) is called. For example `static const` buffers
        -:  338:compiled into the application binary satisfy this requirement.
        -:  339:
        -:  340:If the snapshot buffer is freed after [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  341:is called the `JERRY_SNAPSHOT_EXEC_COPY_DATA` must be passed to copy the necessary
        -:  342:parts of the snapshot buffer into memory.
        -:  343:
        -:  344:The `JERRY_SNAPSHOT_EXEC_COPY_DATA` option is not allowed for static snapshots.
        -:  345:
        -:  346:*New in version 2.0*.
        -:  347:
        -:  348:## jerry_char_t
        -:  349:
        -:  350:**Summary**
        -:  351:
        -:  352:Jerry's char value
        -:  353:
        -:  354:**Prototype**
        -:  355:
        -:  356:```c
        -:  357:typedef uint8_t jerry_char_t;
        -:  358:```
        -:  359:
        -:  360:## jerry_size_t
        -:  361:
        -:  362:**Summary**
        -:  363:
        -:  364:Jerry's size
        -:  365:
        -:  366:**Prototype**
        -:  367:
        -:  368:```c
        -:  369:typedef uint32_t jerry_size_t;
        -:  370:```
        -:  371:
        -:  372:## jerry_length_t
        -:  373:
        -:  374:**Summary**
        -:  375:
        -:  376:Jerry's length
        -:  377:
        -:  378:**Prototype**
        -:  379:
        -:  380:```c
        -:  381:typedef uint32_t jerry_length_t;
        -:  382:```
        -:  383:
        -:  384:## jerry_value_t
        -:  385:
        -:  386:**Summary**
        -:  387:
        -:  388:JerryScript value can be a boolean, number, null, object, string or undefined. The value has an error flag,
        -:  389:that indicates whether is an error or not. Every type has an error flag not only objects. The error flag should
        -:  390:be cleared before the value is passed as an argument, otherwise it can lead to a type error. The error objects
        -:  391:created by API functions has the error flag set.
        -:  392:
        -:  393:Returned and created values by the API functions must be freed with
        -:  394:[jerry_release_value](#jerry_release_value) when they are no longer needed.
        -:  395:
        -:  396:**Prototype**
        -:  397:
        -:  398:```c
        -:  399:typedef uint32_t jerry_value_t;
        -:  400:```
        -:  401:
        -:  402:## jerry_context_data_manager_t
        -:  403:
        -:  404:**Summary**
        -:  405:
        -:  406:Structure that defines how a context data item will be initialized and deinitialized. JerryScript zeroes out the memory
        -:  407:for the item by default, and if the `init_cb` field is not NULL, it will be called with the pointer to the memory as
        -:  408:an additional custom initializer. The `deinit_cb` (if non-`NULL`) is called during a call to `jerry_cleanup ()` to run
        -:  409:any custom deinitialization *before* the VM has been fully cleaned up. The `finalize_cb` (if non-`NULL`) is also called
        -:  410:during a call to `jerry_cleanup ()` to run any custom deinitialization *after* the VM has been fully cleaned up.
        -:  411:If bytes_needed field is 0, no buffer is allocated for the manager, callback functions are called with NULL pointer.
        -:  412:
        -:  413:**Prototype**
        -:  414:
        -:  415:```c
        -:  416:typedef struct
        -:  417:{
        -:  418:  /**
        -:  419:   * Callback responsible for initializing a context item, or NULL to zero out the memory. This is called lazily, the
        -:  420:   * first time jerry_get_context_data () is called with this manager.
        -:  421:   *
        -:  422:   * @param [in] data The buffer that JerryScript allocated for the manager. The buffer is zeroed out. The size is
        -:  423:   * determined by the bytes_needed field. The buffer is kept alive until jerry_cleanup () is called.
        -:  424:   */
        -:  425:  void (*init_cb) (void *data);
        -:  426:
        -:  427:  /**
        -:  428:   * Callback responsible for deinitializing a context item, or NULL. This is called as part of jerry_cleanup (),
        -:  429:   * right *before* the VM has been cleaned up. This is a good place to release strong references to jerry_value_t's
        -:  430:   * that the manager may be holding.
        -:  431:   * Note: because the VM has not been fully cleaned up yet, jerry_object_native_info_t free_cb's can still get called
        -:  432:   * *after* all deinit_cb's have been run. See finalize_cb for a callback that is guaranteed to run *after* all
        -:  433:   * free_cb's have been run.
        -:  434:   *
        -:  435:   * @param [in] data The buffer that JerryScript allocated for the manager.
        -:  436:   */
        -:  437:  void (*deinit_cb) (void *data);
        -:  438:
        -:  439:  /**
        -:  440:   * Callback responsible for finalizing a context item, or NULL. This is called as part of jerry_cleanup (),
        -:  441:   * right *after* the VM has been cleaned up and destroyed and jerry_... APIs cannot be called any more. At this point,
        -:  442:   * all values in the VM have been cleaned up. This is a good place to clean up native state that can only be cleaned
        -:  443:   * up at the very end when there are no more VM values around that may need to access that state.
        -:  444:   *
        -:  445:   * @param [in] data The buffer that JerryScript allocated for the manager. After returning from this callback,
        -:  446:   * the data pointer may no longer be used.
        -:  447:   */
        -:  448:  void (*finalize_cb) (void *data);
        -:  449:
        -:  450:  /**
        -:  451:   * Number of bytes to allocate for this manager. This is the size of the buffer that JerryScript will allocate on
        -:  452:   * behalf of the manager. The pointer to this buffer is passed into init_cb, deinit_cb and finalize_cb. It is also
        -:  453:   * returned from the jerry_get_context_data () API.
        -:  454:   */
        -:  455:  size_t bytes_needed;
        -:  456:} jerry_context_data_manager_t;
        -:  457:```
        -:  458:
        -:  459:*New in version 2.0*.
        -:  460:
        -:  461:## jerry_context_alloc_t
        -:  462:
        -:  463:**Summary**
        -:  464:
        -:  465:Function type for allocating buffer for JerryScript context.
        -:  466:
        -:  467:**Prototype**
        -:  468:
        -:  469:```c
        -:  470:typedef void *(*jerry_context_alloc_t) (size_t size, void *cb_data_p);
        -:  471:```
        -:  472:
        -:  473:- `size` - allocation size
        -:  474:- `cb_data_p` - pointer to user data
        -:  475:
        -:  476:*New in version 2.0*.
        -:  477:
        -:  478:## jerry_context_t
        -:  479:
        -:  480:**Summary**
        -:  481:
        -:  482:An opaque declaration of the JerryScript context structure.
        -:  483:
        -:  484:**Prototype**
        -:  485:
        -:  486:```c
        -:  487:typedef struct jerry_context_t jerry_context_t;
        -:  488:```
        -:  489:
        -:  490:*New in version 2.0*.
        -:  491:
        -:  492:## jerry_container_operation_t
        -:  493:
        -:  494:Enum that contains the supported container operation types
        -:  495:  - JERRY_CONTAINER_OP_ADD - Set/WeakSet add operation
        -:  496:  - JERRY_CONTAINER_OP_GET - Map/WeakMap get operation
        -:  497:  - JERRY_CONTAINER_OP_SET - Map/WeakMap set operation
        -:  498:  - JERRY_CONTAINER_OP_HAS - Set/WeakSet/Map/WeakMap has operation
        -:  499:  - JERRY_CONTAINER_OP_DELETE - Set/WeakSet/Map/WeakMap delete operation
        -:  500:  - JERRY_CONTAINER_OP_SIZE - Set/WeakSet/Map/WeakMap size operation
        -:  501:  - JERRY_CONTAINER_OP_CLEAR - Set/Map clear operation
        -:  502:
        -:  503:*New in version [[NEXT_RELEASE]]*.
        -:  504:
        -:  505:## jerry_binary_operation_t
        -:  506:
        -:  507:Enum that contains the supported binary operation types
        -:  508: - JERRY_BIN_OP_EQUAL - equal comparison (==)
        -:  509: - JERRY_BIN_OP_STRICT_EQUAL - strict equal comparison (===)
        -:  510: - JERRY_BIN_OP_LESS - less relation (<)
        -:  511: - JERRY_BIN_OP_LESS_EQUAL - less or equal relation (<=)
        -:  512: - JERRY_BIN_OP_GREATER - greater relation (>)
        -:  513: - JERRY_BIN_OP_GREATER_EQUAL - greater or equal relation (>=)
        -:  514: - JERRY_BIN_OP_INSTANCEOF - instanceof operation
        -:  515: - JERRY_BIN_OP_ADD - addition operator (+)
        -:  516: - JERRY_BIN_OP_SUB - subtraction operator (-)
        -:  517: - JERRY_BIN_OP_MUL - multiplication operator (*)
        -:  518: - JERRY_BIN_OP_DIV - division operator (/)
        -:  519: - JERRY_BIN_OP_REM - remainder operator (%)
        -:  520:
        -:  521:*New in version 2.0*.
        -:  522:
        -:  523:**See also**
        -:  524:
        -:  525:- [jerry_binary_operation](#jerry_binary_operation)
        -:  526:
        -:  527:## jerry_property_descriptor_flags_t
        -:  528:
        -:  529:Enum that contains the flags of property descriptors.
        -:  530:
        -:  531: - JERRY_PROP_NO_OPTS - empty property descriptor
        -:  532: - JERRY_PROP_IS_CONFIGURABLE - [[Configurable]]
        -:  533: - JERRY_PROP_IS_ENUMERABLE - [[Enumerable]]
        -:  534: - JERRY_PROP_IS_WRITABLE - [[Writable]]
        -:  535: - JERRY_PROP_IS_CONFIGURABLE_DEFINED - Is [[Configurable]] defined?
        -:  536: - JERRY_PROP_IS_ENUMERABLE_DEFINED - Is [[Enumerable]] defined?
        -:  537: - JERRY_PROP_IS_WRITABLE_DEFINED - Is [[Writable]] defined?
        -:  538: - JERRY_PROP_IS_VALUE_DEFINED - Is [[Value]] defined?
        -:  539: - JERRY_PROP_IS_GET_DEFINED - Is [[Get]] defined?
        -:  540: - JERRY_PROP_IS_SET_DEFINED - Is [[Set]] defined?
        -:  541: - JERRY_PROP_SHOULD_THROW - Should throw on error, instead of returning with false
        -:  542:
        -:  543:*New in version [[NEXT_RELEASE]]*.
        -:  544:
        -:  545:**See also**
        -:  546:
        -:  547:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -:  548:
        -:  549:## jerry_parse_options_t
        -:  550:
        -:  551:**Summary**
        -:  552:
        -:  553:Various configuration options for parsing functions such as [jerry_parse](#jerry_parse).
        -:  554:
        -:  555:**Prototype**
        -:  556:
        -:  557:```c
        -:  558:typedef struct
        -:  559:{
        -:  560:  uint32_t options; /**< combination of jerry_parse_option_enable_feature_t values */
        -:  561:  jerry_value_t argument_list; /**< function argument list if JERRY_PARSE_HAS_ARGUMENT_LIST is set in options
        -:  562:                                *   Note: must be string value */
        -:  563:  jerry_value_t resource_name; /**< resource name string (usually a file name)
        -:  564:                                *   if JERRY_PARSE_HAS_RESOURCE is set in options
        -:  565:                                *   Note: must be string value */
        -:  566:  uint32_t start_line; /**< start line of the source code if JERRY_PARSE_HAS_START is set in options */
        -:  567:  uint32_t start_column; /**< start column of the source code if JERRY_PARSE_HAS_START is set in options */
        -:  568:  jerry_value_t user_value; /**< user value assigned to all functions created by this script including eval
        -:  569:                             *   calls executed by the script if JERRY_PARSE_HAS_USER_VALUE is set in options */
        -:  570:} jerry_parse_options_t;
        -:  571:```
        -:  572:
        -:  573:*New in version [[NEXT_RELEASE]]*.
        -:  574:
        -:  575:**See also**
        -:  576:
        -:  577:- [jerry_parse](#jerry_parse)
        -:  578:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:  579:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  580:- [jerry_parse_option_enable_feature_t](#jerry_parse_option_enable_feature_t)
        -:  581:
        -:  582:## jerry_property_descriptor_t
        -:  583:
        -:  584:**Summary**
        -:  585:
        -:  586:Description of ECMA property descriptor. This struct can be used
        -:  587:for the [jerry_define_own_property](#jerry_define_own_property) method to
        -:  588:configure how the property should be registered.
        -:  589:
        -:  590:The naming scheme is similar to the JavaScript `Object.defineProperty` method.
        -:  591:
        -:  592:Fields should be used in pairs. That is if the `is_value_defined` is set to `true`
        -:  593:the `value` field should contain the value for the property.
        -:  594:
        -:  595:**Prototype**
        -:  596:
        -:  597:```c
        -:  598:typedef struct
        -:  599:{
        -:  600:  uint16_t flags; /**< any combination of jerry_property_descriptor_flags_t bits */
        -:  601:  jerry_value_t value; /**< [[Value]] */
        -:  602:  jerry_value_t getter; /**< [[Get]] */
        -:  603:  jerry_value_t setter; /**< [[Set]] */
        -:  604:} jerry_property_descriptor_t;
        -:  605:```
        -:  606:
        -:  607:*Changed in version [[NEXT_RELEASE]]*: The `is_value_defined`, `is_get_defined`, `is_set_defined`,
        -:  608:                                       `is_writable_defined`, `is_writable`, `is_enumerable_defined`,
        -:  609:                                       `is_enumerable`, `is_configurable_defined`, and `is_configurable`
        -:  610:                                       fields are replaced by the `flags` field.
        -:  611:
        -:  612:**See also**
        -:  613:
        -:  614:- [jerry_property_descriptor_flags_t](#jerry_property_descriptor_flags_t)
        -:  615:- [jerry_define_own_property](#jerry_define_own_property)
        -:  616:
        -:  617:## jerry_backtrace_location_t
        -:  618:
        -:  619:**Summary**
        -:  620:
        -:  621:Source code location data retreived by
        -:  622:[jerry_backtrace_get_location](#jerry_backtrace_get_location).
        -:  623:
        -:  624:**Prototype**
        -:  625:
        -:  626:```c
        -:  627:typedef struct
        -:  628:{
        -:  629:  jerry_value_t resource_name; /**< resource name */
        -:  630:  jerry_size_t line; /**< line index */
        -:  631:  jerry_size_t column; /**< column index */
        -:  632:} jerry_backtrace_location_t;
        -:  633:```
        -:  634:
        -:  635:*New in version [[NEXT_RELEASE]]*.
        -:  636:
        -:  637:## jerry_backtrace_frame_t
        -:  638:
        -:  639:**Summary**
        -:  640:
        -:  641:Backtrace frame data passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t)
        -:  642:handler. This is an internal data structure which fields can be accessed by helper functions
        -:  643:such as [jerry_backtrace_get_location](#jerry_backtrace_get_location).
        -:  644:
        -:  645:**Prototype**
        -:  646:
        -:  647:```c
        -:  648:/**
        -:  649: * Internal data structure for jerry_backtrace_frame_t definition.
        -:  650: */
        -:  651:struct jerry_backtrace_frame_internal_t;
        -:  652:
        -:  653:/**
        -:  654: * Backtrace frame data passed to the jerry_backtrace_callback_t handler.
        -:  655: */
        -:  656:typedef struct jerry_backtrace_frame_internal_t jerry_backtrace_frame_t;
        -:  657:```
        -:  658:
        -:  659:*New in version [[NEXT_RELEASE]]*.
        -:  660:
        -:  661:## jerry_heap_stats_t
        -:  662:
        -:  663:**Summary**
        -:  664:
        -:  665:Description of JerryScript heap memory stats.
        -:  666:It is for memory profiling.
        -:  667:
        -:  668:**Prototype**
        -:  669:
        -:  670:```c
        -:  671:typedef struct
        -:  672:{
        -:  673:  size_t version /**< the version of the stats struct */
        -:  674:  size_t size; /**< heap total size */
        -:  675:  size_t allocated_bytes; /**< currently allocated bytes */
        -:  676:  size_t peak_allocated_bytes; /**< peak allocated bytes */
        -:  677:  size_t reserved[4]; /**< padding for future extensions */
        -:  678:} jerry_heap_stats_t;
        -:  679:```
        -:  680:
        -:  681:*New in version 2.0*.
        -:  682:
        -:  683:**See also**
        -:  684:
        -:  685:- [jerry_get_memory_stats](#jerry_get_memory_stats)
        -:  686:
        -:  687:## jerry_call_info_t
        -:  688:
        -:  689:**Summary**
        -:  690:
        -:  691:Call related information passed to [jerry_external_handler_t](#jerry_external_handler_t).
        -:  692:
        -:  693:**Prototype**
        -:  694:
        -:  695:```c
        -:  696:typedef struct jerry_call_info_t
        -:  697:{
        -:  698:  jerry_value_t function; /**< invoked function object */
        -:  699:  jerry_value_t this_value; /**< this value passed to the function  */
        -:  700:  jerry_value_t new_target; /**< current new target value, undefined for non-constructor calls */
        -:  701:} jerry_call_info_t;
        -:  702:```
        -:  703:
        -:  704:*New in version [[NEXT_RELEASE]]*. Contents of this struct replaces the `jerry_get_new_target` function.
        -:  705:
        -:  706:**See also**
        -:  707:
        -:  708:- [jerry_external_handler_t](#jerry_external_handler_t)
        -:  709:
        -:  710:## jerry_external_handler_t
        -:  711:
        -:  712:**Summary**
        -:  713:
        -:  714:Type of an external function handler
        -:  715:
        -:  716:**Prototype**
        -:  717:
        -:  718:```c
        -:  719:typedef jerry_value_t (*jerry_external_handler_t) (const jerry_call_info_t *call_info_p,
        -:  720:                                                   const jerry_value_t args_p[],
        -:  721:                                                   const jerry_length_t args_count);
        -:  722:```
        -:  723:
        -:  724:- `call_info_p` - pointer to a [jerry_call_info_t](#jerry_call_info_t)
        -:  725:                  structure which holds call related information.
        -:  726:- `args_p` - the function arguments, array of JavaScript values.
        -:  727:- `args_count` - the number of arguments.
        -:  728:- return value
        -:  729:  - The function's return value. If there is no return value, use [jerry_create_undefined()](#jerry_create_undefined).
        -:  730:
        -:  731:**See also**
        -:  732:
        -:  733:- [jerry_create_external_function](#jerry_create_external_function)
        -:  734:
        -:  735:## jerry_value_free_callback_t
        -:  736:
        -:  737:**Summary**
        -:  738:
        -:  739:Native free callback of generic value types.
        -:  740:
        -:  741:*Note*:
        -:  742: - Referred values by this method must have at least 1 reference. (Correct API usage satisfies this condition)
        -:  743:
        -:  744:**Prototype**
        -:  745:
        -:  746:```c
        -:  747:typedef void (*jerry_value_free_callback_t) (void *native_p);
        -:  748:```
        -:  749:
        -:  750:*New in version [[NEXT_RELEASE]]*.
        -:  751:
        -:  752:**See also**
        -:  753:
        -:  754:- [jerry_create_external_string](#jerry_create_external_string)
        -:  755:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -:  756:- [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external)
        -:  757:
        -:  758:## jerry_object_native_free_callback_t
        -:  759:
        -:  760:**Summary**
        -:  761:
        -:  762:Native free callback of an object. The callback receives both the memory pointer and the type
        -:  763:information passed to [jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -:  764:
        -:  765:*Note*:
        -:  766: - Referred values by this method must have at least 1 reference. (Correct API usage satisfies this condition)
        -:  767:
        -:  768:**Prototype**
        -:  769:
        -:  770:```c
        -:  771:typedef void (*jerry_object_native_free_callback_t) (void *native_p, struct jerry_object_native_info_t *info_p);
        -:  772:```
        -:  773:
        -:  774:- `native_p` - native pointer passed to [jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -:  775:- `info_p` - native type info passed to [jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -:  776:
        -:  777:*New in version 2.0*: Renamed from `jerry_object_free_callback_t`.
        -:  778:
        -:  779:*Changed in version 2.2*: API calls are once again allowed. (See note)
        -:  780:
        -:  781:*Changed in version [[NEXT_RELEASE]]*: `info_p` argument is added
        -:  782:
        -:  783:**See also**
        -:  784:
        -:  785:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:  786:
        -:  787:## jerry_external_string_free_callback_t
        -:  788:
        -:  789:**Summary**
        -:  790:
        -:  791:Free callback for external strings. See
        -:  792:[jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -:  793:for more information.
        -:  794:
        -:  795:**Prototype**
        -:  796:
        -:  797:```c
        -:  798:typedef void (*jerry_external_string_free_callback_t) (jerry_char_t *string_p,
        -:  799:                                                       jerry_size_t string_size,
        -:  800:                                                       void *user_p);
        -:  801:```
        -:  802:
        -:  803:- `string_p` - extrenal string pointer
        -:  804:- `string_size` - size of external string
        -:  805:- `user_p` - pointer passed when the external string is created
        -:  806:
        -:  807:*New in version [[NEXT_RELEASE]]*.
        -:  808:
        -:  809:**See also**
        -:  810:
        -:  811:- [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -:  812:- [jerry_create_external_string](#jerry_create_external_string)
        -:  813:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -:  814:
        -:  815:## jerry_error_object_created_callback_t
        -:  816:
        -:  817:**Summary**
        -:  818:
        -:  819:Decorator callback for Error objects. This native callback is called every time when an Error
        -:  820:object is created and the decorator can create or update any properties of the newly created
        -:  821:Error object.
        -:  822:
        -:  823:*Note*:
        -:  824: - The callback function cannot be called recursively, so the Error objects created
        -:  825:   when the callback is running are not updated.
        -:  826:
        -:  827:**Prototype**
        -:  828:
        -:  829:```c
        -:  830:typedef void (*jerry_error_object_created_callback_t) (const jerry_value_t error_object, void *user_p);
        -:  831:```
        -:  832:
        -:  833:- `error_object` - the newly created Error object.
        -:  834:- `user_p` - pointer passed to [jerry_set_error_object_created_callback](#jerry_set_error_object_created_callback).
        -:  835:
        -:  836:*New in version 2.4*.
        -:  837:
        -:  838:**See also**
        -:  839:
        -:  840:- [jerry_set_error_object_created_callback](#jerry_set_error_object_created_callback)
        -:  841:
        -:  842:## jerry_module_state_t
        -:  843:
        -:  844:An enum representing the current status of a module
        -:  845:
        -:  846: - JERRY_MODULE_STATE_INVALID - Return value for jerry_module_get_state when its argument is not a module
        -:  847: - JERRY_MODULE_STATE_UNLINKED - Module is currently unlinked
        -:  848: - JERRY_MODULE_STATE_LINKING - Module is currently being linked
        -:  849: - JERRY_MODULE_STATE_LINKED - Module has been linked (its depencencies has been resolved)
        -:  850: - JERRY_MODULE_STATE_EVALUATING - Module is currently being evaluated
        -:  851: - JERRY_MODULE_STATE_EVALUATED - Module has been evaluated (its source code has been executed)
        -:  852: - JERRY_MODULE_STATE_ERROR - An error has been encountered before the evaluated state is reached
        -:  853:
        -:  854:*New in version [[NEXT_RELEASE]]*.
        -:  855:
        -:  856:## jerry_module_resolve_callback_t
        -:  857:
        -:  858:**Summary**
        -:  859:
        -:  860:Callback which is called by [jerry_module_link](#jerry_module_link) to get the referenced module.
        -:  861:
        -:  862:*Note*:
        -:  863: - If realms are enabled, the returned module should be created in the current realm
        -:  864:   (see: [jerry_get_global_object](#jerry_get_global_object))
        -:  865:
        -:  866:**Prototype**
        -:  867:
        -:  868:```c
        -:  869:typedef jerry_value_t (*jerry_module_resolve_callback_t) (const jerry_value_t specifier,
        -:  870:                                                          const jerry_value_t referrer,
        -:  871:                                                          void *user_p);
        -:  872:```
        -:  873:
        -:  874:- `specifier` - a module specifier string (usually used as a path to the module)
        -:  875:- `referrer` - a module object which contains the `specifier` in its source code
        -:  876:- `user_p` - pointer passed to [jerry_module_link](#jerry_module_link).
        -:  877:- return value
        -:  878:  - a module object - if it can be resolved successfully
        -:  879:  - an error - otherwise
        -:  880:
        -:  881:*New in version [[NEXT_RELEASE]]*.
        -:  882:
        -:  883:**See also**
        -:  884:- [jerry_module_link](#jerry_module_link)
        -:  885:- [jerry_get_global_object](#jerry_get_global_object)
        -:  886:
        -:  887:## jerry_module_import_callback_t
        -:  888:
        -:  889:**Summary**
        -:  890:
        -:  891:Callback which is called when an import is resolved dynamically to get the referenced module.
        -:  892:
        -:  893:*Note*:
        -:  894: - If the function returns with a promise, the import call returns with this promise. The
        -:  895:   application should try to resolve the requested module later. If the module is evaluated
        -:  896:   successfully, the returned promise should be resolved with the namespace object of the
        -:  897:   module. Otherwise, the returned promise should be rejected with an error.
        -:  898: - If the function returns with a resolved module, a promise is created and resolved with the
        -:  899:   namespace object of the module. The import call returns with the resolved promise.
        -:  900: - If the function returns with an error, a promise is created and rejected with the
        -:  901:   return error. The import call returns with the rejected promise.
        -:  902: - All other return values are considered invalid. In this case the import call returns
        -:  903:   with a rejected promise. The rejected promise has a fixed error message, it does not
        -:  904:   specify the reason of the fail.
        -:  905: - If realms are enabled, the returned module should be created in the current realm
        -:  906:   (see: [jerry_get_global_object](#jerry_get_global_object))
        -:  907:
        -:  908:**Prototype**
        -:  909:
        -:  910:```c
        -:  911:typedef jerry_value_t (*jerry_module_import_callback_t) (const jerry_value_t specifier,
        -:  912:                                                         const jerry_value_t user_value,
        -:  913:                                                         void *user_p);
        -:  914:```
        -:  915:
        -:  916:- `specifier` - a module specifier string (usually used as a path to the module)
        -:  917:- `user_value` - the user value assigned to the script (see [jerry_parse_options_t](#jerry_parse_options_t))
        -:  918:- `user_p` - pointer passed to [jerry_module_set_import_callback](#jerry_module_set_import_callback).
        -:  919:- return value
        -:  920:  - promise or resolved module - if the operation is successful
        -:  921:  - an error - otherwise
        -:  922:
        -:  923:*New in version [[NEXT_RELEASE]]*.
        -:  924:
        -:  925:**See also**
        -:  926:- [jerry_module_set_import_callback](#jerry_module_set_import_callback)
        -:  927:- [jerry_get_global_object](#jerry_get_global_object)
        -:  928:
        -:  929:## jerry_module_state_changed_callback_t
        -:  930:
        -:  931:**Summary**
        -:  932:
        -:  933:Callback which is called after the module enters into linked, evaluated or error state.
        -:  934:
        -:  935:**Prototype**
        -:  936:
        -:  937:```c
        -:  938:typedef void (*jerry_module_state_changed_callback_t) (jerry_module_state_t new_state,
        -:  939:                                                       const jerry_value_t module,
        -:  940:                                                       const jerry_value_t value,
        -:  941:                                                       void *user_p);
        -:  942:```
        -:  943:
        -:  944:- `new_state` - new state of the module.
        -:  945:- `module` - a module whose state is changed
        -:  946:- `value` - depends on the state: undefined for linked, module script result for evaluated,
        -:  947:            and error value for error state.
        -:  948:- `user_p` - pointer passed to [jerry_module_set_state_changed_callback](#jerry_module_set_state_changed_callback).
        -:  949:
        -:  950:*New in version [[NEXT_RELEASE]]*.
        -:  951:
        -:  952:**See also**
        -:  953:- [jerry_module_set_state_changed_callback](#jerry_module_set_state_changed_callback)
        -:  954:
        -:  955:## jerry_module_import_meta_callback_t
        -:  956:
        -:  957:**Summary**
        -:  958:
        -:  959:Callback which is called when an import.meta expression of a module is evaluated the first time.
        -:  960:The object returned by import.meta is passed as the `meta_object` argument to the callback, and
        -:  961:the callback can set the initial status of the object (e.g. add properties or set prototype).
        -:  962:
        -:  963:**Prototype**
        -:  964:
        -:  965:```c
        -:  966:typedef void (*jerry_module_import_meta_callback_t) (const jerry_value_t module,
        -:  967:                                                     const jerry_value_t meta_object,
        -:  968:                                                     void *user_p);
        -:  969:```
        -:  970:
        -:  971:- `module` - module whose import.meta object is requested.
        -:  972:- `meta_object` - import.meta object created for the module.
        -:  973:- `user_p` - pointer passed to [jerry_module_set_import_meta_callback](#jerry_module_set_import_meta_callback).
        -:  974:
        -:  975:*New in version [[NEXT_RELEASE]]*.
        -:  976:
        -:  977:**See also**
        -:  978:- [jerry_module_set_import_meta_callback](#jerry_module_set_import_meta_callback)
        -:  979:
        -:  980:## jerry_native_module_evaluate_callback_t
        -:  981:
        -:  982:**Summary**
        -:  983:
        -:  984:Callback which is called by [jerry_module_evaluate](#jerry_module_evaluate) to evaluate the native module.
        -:  985:
        -:  986:Note:
        -:  987: - Native pointers can be used to assign private data to a native module,
        -:  988:   see [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:  989:
        -:  990:**Prototype**
        -:  991:
        -:  992:```c
        -:  993:typedef jerry_value_t (*jerry_native_module_evaluate_callback_t) (const jerry_value_t native_module);
        -:  994:```
        -:  995:
        -:  996:- `native_module` - a native module
        -:  997:- return value
        -:  998:  - any non-error value - if the module is evaluated successfully
        -:  999:  - an error - otherwise
        -: 1000:
        -: 1001:*New in version [[NEXT_RELEASE]]*.
        -: 1002:
        -: 1003:**See also**
        -: 1004:- [jerry_module_evaluate](#jerry_module_evaluate)
        -: 1005:
        -: 1006:## jerry_backtrace_callback_t
        -: 1007:
        -: 1008:**Summary**
        -: 1009:
        -: 1010:Callback function which is called by [jerry_backtrace_capture](#jerry_backtrace_capture)
        -: 1011:for each stack frame.
        -: 1012:
        -: 1013:**Prototype**
        -: 1014:
        -: 1015:```c
        -: 1016:typedef bool (*jerry_backtrace_callback_t) (jerry_backtrace_frame_t *frame_p, void *user_p);
        -: 1017:```
        -: 1018:
        -: 1019:- `frame_p` - pointer to [jerry_backtrace_frame_t](#jerry_backtrace_frame_t) data.
        -: 1020:- `user_p` - pointer passed to [jerry_backtrace_capture](#jerry_backtrace_capture).
        -: 1021:- return value
        -: 1022:  - true, to continue capturing more frames
        -: 1023:  - false, to end the stack capturing
        -: 1024:
        -: 1025:*New in version [[NEXT_RELEASE]]*.
        -: 1026:
        -: 1027:**See also**
        -: 1028:
        -: 1029:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -: 1030:- [jerry_backtrace_frame_t](#jerry_backtrace_frame_t)
        -: 1031:
        -: 1032:## jerry_object_native_info_t
        -: 1033:
        -: 1034:**Summary**
        -: 1035:
        -: 1036:Type information for native pointers. Since each native pointer has a type information,
        -: 1037:multiple native pointers can be assigned to an object, and these can be updated or
        -: 1038:deleted independently.
        -: 1039:
        -: 1040:The type information has a free callback, which is called when the object is freed
        -: 1041:by the garbage collector. If the callback is NULL, the application is not notified
        -: 1042:about the destruction of the object.
        -: 1043:
        -: 1044:The buffer pointed by the native pointer can have a fixed number of jerry values,
        -: 1045:which refer to other values as long as the object is alive. The starting byte
        -: 1046:offset and the number of these values are specified by `offset_of_references` and
        -: 1047:`number_of_references` fields respectively. Before a buffer is attached to an
        -: 1048:object by [jerry_set_object_native_pointer](#jerry_set_object_native_pointer),
        -: 1049:the values must be initialized to undefined by
        -: 1050:[jerry_native_pointer_init_references](#jerry_native_pointer_init_references).
        -: 1051:When a buffer is no longer attached to any object, the
        -: 1052:[jerry_native_pointer_release_references](#jerry_native_pointer_release_references)
        -: 1053:must be called to release the values. A single buffer can be attached to any
        -: 1054:number of living objects. When a buffer is currently attached to at least
        -: 1055:one object, the references can be updated by
        -: 1056:[jerry_native_pointer_set_reference](#jerry_native_pointer_set_reference).
        -: 1057:However, if the buffer is no longer attached to an object, the finalize function
        -: 1058:must be called even if the buffer is reattached to another object later. In this
        -: 1059:case, calling the init function after the finalization is optional, because the
        -: 1060:finalize function also initializes all values to undefined.
        -: 1061:
        -: 1062:**Prototype**
        -: 1063:
        -: 1064:```c
        -: 1065:typedef struct
        -: 1066:{
        -: 1067:  jerry_object_native_free_callback_t free_cb; /**< the free callback of the native pointer */
        -: 1068:  uint16_t number_of_references; /**< the number of value references which are marked by the garbage collector */
        -: 1069:  uint16_t offset_of_references; /**< byte offset indicating the start offset of value
        -: 1070:                                  *   references in the user allocated buffer */
        -: 1071:} jerry_object_native_info_t;
        -: 1072:```
        -: 1073:
        -: 1074:*New in version 2.0*.
        -: 1075:
        -: 1076:*Changed in version [[NEXT_RELEASE]]*: Added `number_of_references`, and `offset_of_references` fields.
        -: 1077:
        -: 1078:**See also**
        -: 1079:
        -: 1080:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -: 1081:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -: 1082:- [jerry_delete_object_native_pointer](#jerry_delete_object_native_pointer)
        -: 1083:- [jerry_native_pointer_init_references](#jerry_native_pointer_init_references)
        -: 1084:- [jerry_native_pointer_release_references](#jerry_native_pointer_release_references)
        -: 1085:- [jerry_native_pointer_set_reference](#jerry_native_pointer_set_reference)
        -: 1086:
        -: 1087:## jerry_object_property_foreach_t
        -: 1088:
        -: 1089:**Summary**
        -: 1090:
        -: 1091:Function type used as a callback for the [jerry_foreach_object_property](#jerry_foreach_object_property)
        -: 1092:method. A function with this type must return "true" to continue the iteration or "false" to finish the
        -: 1093:iteration on the object's properties.
        -: 1094:
        -: 1095:**Prototype**
        -: 1096:
        -: 1097:```c
        -: 1098:typedef bool (*jerry_object_property_foreach_t) (const jerry_value_t property_name,
        -: 1099:                                                 const jerry_value_t property_value,
        -: 1100:                                                 void *user_data_p);
        -: 1101:```
        -: 1102:
        -: 1103:- `property_name` - a property name, this is not always a string.
        -: 1104:- `property_value` - the value for the given property.
        -: 1105:- `user_data_p` - optional user data pointer supplied via the (jerry_foreach_object_property)[#jerry_foreach_object_property] method.
        -: 1106:- return value
        -: 1107:  - true, to continue the iteration
        -: 1108:  - false, to stop the iteration
        -: 1109:
        -: 1110:**See also**
        -: 1111:
        -: 1112:- [jerry_foreach_object_property](#jerry_foreach_object_property)
        -: 1113:
        -: 1114:## jerry_objects_foreach_t
        -: 1115:
        -: 1116:**Summary**
        -: 1117:
        -: 1118:Function type used as a callback for the (jerry_objects_foreach)[#jerry_objects_foreach] method.
        -: 1119:A function with this type must return "true" to continue the iteration or "false" to finish the
        -: 1120:iteration on the object's properties.
        -: 1121:
        -: 1122:**Prototype**
        -: 1123:
        -: 1124:```c
        -: 1125:typedef bool (*jerry_objects_foreach_t) (const jerry_value_t object,
        -: 1126:                                         void *user_data_p);
        -: 1127:```
        -: 1128:
        -: 1129:- `object` - the current JavaScript object in the for-each iteration.
        -: 1130:- `user_data_p` - optional user data pointer supplied via the (jerry_objects_foreach)[#jerry_objects_foreach] method.
        -: 1131:- return value
        -: 1132:  - true, to continue the iteration
        -: 1133:  - false, to stop the iteration
        -: 1134:
        -: 1135:*New in version 2.0*.
        -: 1136:
        -: 1137:**See also**
        -: 1138:
        -: 1139:- [jerry_objects_foreach](#jerry_objects_foreach)
        -: 1140:
        -: 1141:## jerry_objects_foreach_by_native_info_t
        -: 1142:
        -: 1143:**Summary**
        -: 1144:
        -: 1145:Function type used as a callback for the (jerry_objects_foreach_by_native_info)[#jerry_objects_foreach_by_native_info]
        -: 1146:method. A function with this type must return "true" to continue the iteration or "false" to finish the
        -: 1147:iteration on the object's properties.
        -: 1148:
        -: 1149:**Prototype**
        -: 1150:
        -: 1151:```c
        -: 1152:typedef bool (*jerry_objects_foreach_by_native_info_t) (const jerry_value_t object,
        -: 1153:                                                        void *object_data_p,
        -: 1154:                                                        void *user_data_p);
        -: 1155:```
        -: 1156:
        -: 1157:- `object` - the current JavaScript object in the for-each iteration.
        -: 1158:- `object_data_p` - the current object's native data pointer.
        -: 1159:- `user_data_p` - optional user data pointer supplied via the (jerry_objects_foreach_by_native_info)[#jerry_objects_foreach_by_native_info] method.
        -: 1160:- return value
        -: 1161:  - true, to continue the iteration
        -: 1162:  - false, to stop the iteration
        -: 1163:
        -: 1164:*New in version 2.0*.
        -: 1165:
        -: 1166:**See also**
        -: 1167:
        -: 1168:- [jerry_objects_foreach_by_native_info](#jerry_objects_foreach_by_native_info)
        -: 1169:
        -: 1170:## jerry_vm_exec_stop_callback_t
        -: 1171:
        -: 1172:**Summary**
        -: 1173:
        -: 1174:Callback which tells whether the ECMAScript execution should be stopped.
        -: 1175:If it returns with undefined value the ECMAScript execution continues.
        -: 1176:Otherwise the result is thrown by the engine (if the error flag is not
        -: 1177:set for the returned value the engine automatically sets it). The
        -: 1178:callback function might be called again even if it threw an error.
        -: 1179:In this case the function must throw the same error again.
        -: 1180:
        -: 1181:**Prototype**
        -: 1182:
        -: 1183:```c
        -: 1184:typedef jerry_value_t (*jerry_vm_exec_stop_callback_t) (void *user_p);
        -: 1185:```
        -: 1186:
        -: 1187:*New in version 2.0*.
        -: 1188:
        -: 1189:**See also**
        -: 1190:
        -: 1191:- [jerry_set_vm_exec_stop_callback](#jerry_set_vm_exec_stop_callback)
        -: 1192:
        -: 1193:## jerry_vm_throw_callback_t
        -: 1194:
        -: 1195:**Summary**
        -: 1196:
        -: 1197:Callback which is called when a value is thrown in an ECMAScript code. The callback
        -: 1198:should not change the `error_value`. The callback is not called again until the value
        -: 1199:is caught.
        -: 1200:
        -: 1201:Note:
        -: 1202: - The engine considers errors thrown by external functions as never caught. The
        -: 1203:   application can maintain a status flag to ignore the next call of the callback
        -: 1204:   if necessary.
        -: 1205:   See: [jerry_create_external_function](#jerry_create_external_function)
        -: 1206:
        -: 1207:**Prototype**
        -: 1208:
        -: 1209:```c
        -: 1210:typedef void (*jerry_vm_throw_callback_t) (const jerry_value_t error_value, void *user_p);
        -: 1211:```
        -: 1212:
        -: 1213:*New in [[NEXT_RELEASE]]*.
        -: 1214:
        -: 1215:**See also**
        -: 1216:
        -: 1217:- [jerry_set_vm_throw_callback](#jerry_set_vm_throw_callback)
        -: 1218:
        -: 1219:## jerry_promise_state_t
        -: 1220:
        -: 1221:Enum which describes the state of a Promise.
        -: 1222:
        -: 1223:Possible values:
        -: 1224:
        -: 1225: - JERRY_PROMISE_STATE_NONE - Invalid/Unknown state (possibly called on a non-promise object).
        -: 1226: - JERRY_PROMISE_STATE_PENDING - Promise is in "Pending" state.
        -: 1227: - JERRY_PROMISE_STATE_FULFILLED - Promise is in "Fulfilled" state.
        -: 1228: - JERRY_PROMISE_STATE_REJECTED - Promise is in "Rejected" state.
        -: 1229:
        -: 1230:*New in version 2.2*.
        -: 1231:
        -: 1232:**See also**
        -: 1233:
        -: 1234:- [jerry_get_promise_result](#jerry_get_promise_result)
        -: 1235:
        -: 1236:## jerry_promise_event_type_t
        -: 1237:
        -: 1238:Event types for [jerry_promise_callback_t](#jerry_promise_callback_t) callback function.
        -: 1239:The description of the `object` and `value` arguments are provided for each type.
        -: 1240:
        -: 1241:Possible values:
        -: 1242:
        -: 1243:- JERRY_PROMISE_EVENT_CREATE - A new Promise object is created.
        -: 1244:  - object - the new Promise object
        -: 1245:  - value - parent Promise for `then` chains, undefined otherwise.
        -: 1246:- JERRY_PROMISE_EVENT_RESOLVE - Called when a Promise is about to be resolved.
        -: 1247:  - object - the Promise object
        -: 1248:  - value - value for resolving.
        -: 1249:- JERRY_PROMISE_EVENT_REJECT - Called when a Promise is about to be rejected.
        -: 1250:  - object - the Promise object
        -: 1251:  - value - value for rejecting.
        -: 1252:- JERRY_PROMISE_EVENT_RESOLVE_FULFILLED - Called when a resolve is called on a fulfilled Promise.
        -: 1253:  - object - the Promise object
        -: 1254:  - value - value for resolving
        -: 1255:- JERRY_PROMISE_EVENT_REJECT_FULFILLED - Called when a reject is called on a fulfilled Promise.
        -: 1256:  - object - the Promise object
        -: 1257:  - value - value for rejecting
        -: 1258:- JERRY_PROMISE_EVENT_REJECT_WITHOUT_HANDLER - Called when a Promise is rejected without a handler.
        -: 1259:  - object - the Promise object
        -: 1260:  - value - value for rejecting
        -: 1261:- JERRY_PROMISE_EVENT_CATCH_HANDLER_ADDED - Called when a catch handler is added to a rejected
        -: 1262:                                            Promise which did not have a catch handler before.
        -: 1263:  - object - the Promise object
        -: 1264:  - value - undefined
        -: 1265:- JERRY_PROMISE_EVENT_BEFORE_REACTION_JOB - Called before executing a Promise reaction job.
        -: 1266:  - object - the Promise object
        -: 1267:  - value - undefined
        -: 1268:- JERRY_PROMISE_EVENT_AFTER_REACTION_JOB - Called after a Promise reaction job is completed.
        -: 1269:  - object - the Promise object
        -: 1270:  - value - undefined
        -: 1271:- JERRY_PROMISE_EVENT_ASYNC_AWAIT - Called when an async function awaits the result of a Promise object.
        -: 1272:  - object - internal object representing the execution status
        -: 1273:  - value - the Promise object
        -: 1274:- JERRY_PROMISE_EVENT_ASYNC_BEFORE_RESOLVE - Called when an async function is continued with resolve.
        -: 1275:  - object - internal object representing the execution status
        -: 1276:  - value - value for resolving
        -: 1277:- JERRY_PROMISE_EVENT_ASYNC_BEFORE_REJECT - Called when an async function is continued with reject.
        -: 1278:  - object - internal object representing the execution status
        -: 1279:  - value - value for rejecting
        -: 1280:- JERRY_PROMISE_EVENT_ASYNC_AFTER_RESOLVE - Called when an async function resolve is completed.
        -: 1281:  - object - internal object representing the execution status
        -: 1282:  - value - value for resolving
        -: 1283:- JERRY_PROMISE_EVENT_ASYNC_AFTER_REJECT - Called when an async function reject is completed.
        -: 1284:  - object - internal object representing the execution status
        -: 1285:  - value - value for rejecting
        -: 1286:
        -: 1287:*New in version [[NEXT_RELEASE]]*.
        -: 1288:
        -: 1289:**See also**
        -: 1290:
        -: 1291:- [jerry_promise_callback_t](#jerry_promise_callback_t)
        -: 1292:- [jerry_promise_set_callback](#jerry_promise_set_callback)
        -: 1293:
        -: 1294:
        -: 1295:## jerry_promise_event_filter_t
        -: 1296:
        -: 1297:Filter types for [jerry_promise_set_callback](#jerry_promise_set_callback) callback function.
        -: 1298:The callback is only called for those events which are enabled by the filters. The events are
        -: 1299:described in [jerry_promise_event_type_t](#jerry_promise_event_type_t).
        -: 1300:
        -: 1301:Possible values:
        -: 1302:
        -: 1303:- JERRY_PROMISE_EVENT_FILTER_DISABLE - Disable reporting of all events.
        -: 1304:- JERRY_PROMISE_EVENT_FILTER_MAIN - Enables the following events:
        -: 1305:  - JERRY_PROMISE_EVENT_CREATE
        -: 1306:  - JERRY_PROMISE_EVENT_RESOLVE
        -: 1307:  - JERRY_PROMISE_EVENT_REJECT
        -: 1308:- JERRY_PROMISE_EVENT_FILTER_ERROR - Enables the following events:
        -: 1309:  - JERRY_PROMISE_EVENT_RESOLVE_FULFILLED
        -: 1310:  - JERRY_PROMISE_EVENT_REJECT_FULFILLED
        -: 1311:  - JERRY_PROMISE_EVENT_REJECT_WITHOUT_HANDLER
        -: 1312:  - JERRY_PROMISE_EVENT_CATCH_HANDLER_ADDED
        -: 1313:- JERRY_PROMISE_EVENT_FILTER_REACTION_JOB - Enables the following events:
        -: 1314:  - JERRY_PROMISE_EVENT_BEFORE_REACTION_JOB
        -: 1315:  - JERRY_PROMISE_EVENT_AFTER_REACTION_JOB
        -: 1316:- JERRY_PROMISE_EVENT_FILTER_ASYNC_MAIN - Enables the following events:
        -: 1317:  - JERRY_PROMISE_EVENT_ASYNC_AWAIT
        -: 1318:- JERRY_PROMISE_EVENT_FILTER_ASYNC_REACTION_JOB - Enables the following events:
        -: 1319:  - JERRY_PROMISE_EVENT_ASYNC_BEFORE_RESOLVE
        -: 1320:  - JERRY_PROMISE_EVENT_ASYNC_BEFORE_REJECT
        -: 1321:  - JERRY_PROMISE_EVENT_ASYNC_AFTER_RESOLVE
        -: 1322:  - JERRY_PROMISE_EVENT_ASYNC_AFTER_REJECT
        -: 1323:
        -: 1324:*New in version [[NEXT_RELEASE]]*.
        -: 1325:
        -: 1326:**See also**
        -: 1327:
        -: 1328:- [jerry_promise_event_type_t](#jerry_promise_event_type_t)
        -: 1329:- [jerry_promise_set_callback](#jerry_promise_set_callback)
        -: 1330:
        -: 1331:
        -: 1332:## jerry_promise_callback_t
        -: 1333:
        -: 1334:**Summary**
        -: 1335:
        -: 1336:Notification callback for tracking Promise and async function operations. The arguments
        -: 1337:passed to the callback depends on the `event_type` which is detailed in the
        -: 1338:description of [jerry_promise_event_type_t](#jerry_promise_event_type_t).
        -: 1339:
        -: 1340:**Prototype**
        -: 1341:
        -: 1342:```c
        -: 1343:typedef void (*jerry_promise_callback_t) (jerry_promise_event_type_t event_type,
        -: 1344:                                          const jerry_value_t object, const jerry_value_t value,
        -: 1345:                                          void *user_p);
        -: 1346:```
        -: 1347:
        -: 1348:- `event_type` - type of the event notification.
        -: 1349:- `object` - object corresponding to the event.
        -: 1350:- `value` - optional value argument.
        -: 1351:- `user_data_p` - optional user data pointer supplied via the (jerry_promise_set_callback)[#jerry_promise_set_callback] method.
        -: 1352:
        -: 1353:*New in version [[NEXT_RELEASE]]*.
        -: 1354:
        -: 1355:**See also**
        -: 1356:
        -: 1357:- [jerry_promise_event_type_t](#jerry_promise_event_type_t)
        -: 1358:- [jerry_promise_set_callback](#jerry_promise_set_callback)
        -: 1359:
        -: 1360:## jerry_typedarray_type_t
        -: 1361:
        -: 1362:Enum which describes the TypedArray types.
        -: 1363:Possible values:
        -: 1364:
        -: 1365: - JERRY_TYPEDARRAY_UINT8 - represents the Uint8Array TypedArray
        -: 1366: - JERRY_TYPEDARRAY_UINT8CLAMPED - represents the Uint8ClampedArray TypedArray
        -: 1367: - JERRY_TYPEDARRAY_INT8 - represents the Int8Array TypedArray
        -: 1368: - JERRY_TYPEDARRAY_UINT16 - represents the Uint16Array TypedArray
        -: 1369: - JERRY_TYPEDARRAY_INT16 - represents the Int16Array TypedArray
        -: 1370: - JERRY_TYPEDARRAY_UINT32 - represents the Uint32Array TypedArray
        -: 1371: - JERRY_TYPEDARRAY_INT32 - represents the Int32Array TypedArray
        -: 1372: - JERRY_TYPEDARRAY_FLOAT32 - represents the Float32Array TypedArray
        -: 1373: - JERRY_TYPEDARRAY_FLOAT64 - represents the Float64Array TypedArray
        -: 1374: - JERRY_TYPEDARRAY_BIGINT64 - represents the BigInt64Array TypedArray
        -: 1375: - JERRY_TYPEDARRAY_BIGUINT64 - represents the BigUint64Array TypedArray
        -: 1376: - JERRY_TYPEDARRAY_INVALID - represents an invalid TypedArray
        -: 1377:
        -: 1378:API functions can return the `JERRY_TYPEDARRAY_INVALID` value if the
        -: 1379:TypedArray support is not in the engine.
        -: 1380:
        -: 1381:*New in version 2.0*.
        -: 1382:
        -: 1383:*Changed in version 2.4*: Added `JERRY_TYPEDARRAY_BIGINT64`, `JERRY_TYPEDARRAY_BIGUINT64` values.
        -: 1384:
        -: 1385:**See also**
        -: 1386:
        -: 1387:- [jerry_get_typedarray_type](#jerry_get_typedarray_type)
        -: 1388:
        -: 1389:
        -: 1390:## jerry_exec_snapshot_option_values_t
        -: 1391:
        -: 1392:**Summary**
        -: 1393:
        -: 1394:Various configuration options for [jerry_exec_snapshot](#jerry_exec_snapshot)
        -: 1395:
        -: 1396:**Prototype**
        -: 1397:
        -: 1398:```c
        -: 1399:typedef struct
        -: 1400:{
        -: 1401:  jerry_value_t resource_name; /**< resource name string (usually a file name)
        -: 1402:                                *   if JERRY_SNAPSHOT_EXEC_HAS_RESOURCE is set in exec_snapshot_opts
        -: 1403:                                *   Note: non-string values are ignored */
        -: 1404:  jerry_value_t user_value; /**< user value assigned to all functions created by this script including
        -: 1405:                             *   eval calls executed by the script if JERRY_SNAPSHOT_EXEC_HAS_USER_VALUE
        -: 1406:                             *   is set in exec_snapshot_opts */
        -: 1407:} jerry_exec_snapshot_option_values_t;
        -: 1408:```
        -: 1409:
        -: 1410:*New in version [[NEXT_RELEASE]]*.
        -: 1411:
        -: 1412:**See also**
        -: 1413:
        -: 1414:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -: 1415:
        -: 1416:## jerry_source_info_enabled_fields_t
        -: 1417:
        -: 1418:Enum which describes the enabled fields of [jerry_source_info_t](#jerry_source_info_t).
        -: 1419:Possible values:
        -: 1420:
        -: 1421: - JERRY_SOURCE_INFO_HAS_SOURCE_CODE - source_code field is valid
        -: 1422: - JERRY_SOURCE_INFO_HAS_FUNCTION_ARGUMENTS - function_arguments field is valid
        -: 1423: - JERRY_SOURCE_INFO_HAS_SOURCE_RANGE - both source_range_start and source_range_length fields are valid
        -: 1424:
        -: 1425:*New in version [[NEXT_RELEASE]]*.
        -: 1426:
        -: 1427:**See also**
        -: 1428:
        -: 1429:- [jerry_source_info_t](#jerry_source_info_t)
        -: 1430:- [jerry_get_source_info](#jerry_get_source_info)
        -: 1431:
        -: 1432:## jerry_source_info_t
        -: 1433:
        -: 1434:**Summary**
        -: 1435:
        -: 1436:Source related information of a script/module/function.
        -: 1437:
        -: 1438:**Prototype**
        -: 1439:
        -: 1440:```c
        -: 1441:typedef struct
        -: 1442:{
        -: 1443:  uint32_t enabled_fields; /**< combination of jerry_source_info_enabled_fields_t values */
        -: 1444:  jerry_value_t source_code; /**< script source code or function body */
        -: 1445:  jerry_value_t function_arguments; /**< function arguments */
        -: 1446:  uint32_t source_range_start; /**< start position of the function in the source code */
        -: 1447:  uint32_t source_range_length; /**< source length of the function in the source code */
        -: 1448:} jerry_source_info_t;
        -: 1449:```
        -: 1450:
        -: 1451:*New in version [[NEXT_RELEASE]]*.
        -: 1452:
        -: 1453:**See also**
        -: 1454:
        -: 1455:- [jerry_source_info_enabled_fields_t](#jerry_source_info_enabled_fields_t)
        -: 1456:- [jerry_get_source_info](#jerry_get_source_info)
        -: 1457:
        -: 1458:
        -: 1459:# General engine functions
        -: 1460:
        -: 1461:## jerry_init
        -: 1462:
        -: 1463:**Summary**
        -: 1464:
        -: 1465:Initializes the JerryScript engine, making it possible to run JavaScript code and perform operations
        -: 1466:on JavaScript values. This is required for almost all API functions.
        -: 1467:
        -: 1468:**Prototype**
        -: 1469:
        -: 1470:```c
        -: 1471:void
        -: 1472:jerry_init (jerry_init_flag_t flags)
        -: 1473:```
        -: 1474:
        -: 1475:`flags` - combination of various engine configuration flags [jerry_init_flag_t](#jerry_init_flag_t).
        -: 1476:
        -: 1477:**Example**
        -: 1478:
        -: 1479:[doctest]: # ()
        -: 1480:
        -: 1481:```c
        -: 1482:#include "jerryscript.h"
        -: 1483:
        -: 1484:int
    #####: 1485:main (void)
        -: 1486:{
    #####: 1487:  jerry_init (JERRY_INIT_SHOW_OPCODES | JERRY_INIT_SHOW_REGEXP_OPCODES);
        -: 1488:
        -: 1489:  // ...
        -: 1490:
    #####: 1491:  jerry_cleanup ();
        -: 1492:  return 0;
        -: 1493:}
        -: 1494:```
        -: 1495:
        -: 1496:**See also**
        -: 1497:
        -: 1498:- [jerry_init_flag_t](#jerry_init_flag_t)
        -: 1499:- [jerry_cleanup](#jerry_cleanup)
        -: 1500:
        -: 1501:
        -: 1502:## jerry_cleanup
        -: 1503:
        -: 1504:**Summary**
        -: 1505:
        -: 1506:Finish JavaScript engine execution, freeing memory and JavaScript values.
        -: 1507:
        -: 1508:*Note*: JavaScript values, received from engine, will be inaccessible after the cleanup.
        -: 1509:
        -: 1510:**Prototype**
        -: 1511:
        -: 1512:```c
        -: 1513:void
        -: 1514:jerry_cleanup (void);
        -: 1515:```
        -: 1516:
        -: 1517:**See also**
        -: 1518:
        -: 1519:- [jerry_init](#jerry_init)
        -: 1520:
        -: 1521:
        -: 1522:## jerry_get_context_data
        -: 1523:
        -: 1524:**Summary**
        -: 1525:
        -: 1526:Retrieve a pointer to the item stored within the current context by the given manager.
        -: 1527:
        -: 1528:*Note*: Since internally the pointer to a manager's context data item is linked to the next such pointer in a linked
        -: 1529:        list, it is inadvisable to invoke too many different managers, because doing so will increase the time it takes
        -: 1530:        to retrieve a manager's context data item, degrading performance. For example, try to keep the number of
        -: 1531:        managers below five.
        -: 1532:
        -: 1533:**Prototype**
        -: 1534:
        -: 1535:```c
        -: 1536:void *
        -: 1537:jerry_get_context_data (const jerry_context_data_manager *manager_p);
        -: 1538:```
        -: 1539:
        -: 1540:- `manager_p`: the manager of this context data item.
        -: 1541:- return value: the item created by `manager_p` when `jerry_get_context_data ()` was first called, or a new item created
        -: 1542:  by `manager_p`, which will be stored for future identical calls to `jerry_get_context_data ()`, and which will be
        -: 1543:  deinitialized using the `deinit_cb` callback provided by `manager_p` when the context will be destroyed.
        -: 1544:
        -: 1545:*New in version 2.0*.
        -: 1546:
        -: 1547:**Example**
        -: 1548:
        -: 1549:[doctest]: # (test="compile")
        -: 1550:
        -: 1551:```c
        -: 1552:#include "jerryscript.h"
        -: 1553:
        -: 1554:typedef struct
        -: 1555:{
        -: 1556:  int my_data1;
        -: 1557:  double my_data2;
        -: 1558:  char *my_data3;
        -: 1559:} my_context_data_t;
        -: 1560:
        -: 1561:/* Define how context items will be initialized. */
        -: 1562:static void
        -: 1563:my_context_data_new (void *user_data_p)
        -: 1564:{
        -: 1565:  my_context_data_t *my_data_p = (my_context_data_t *) user_data_p;
        -: 1566:
        -: 1567:  /*
        -: 1568:   * Initialize my_data_p. JerryScript will store it on the current context and return it whenever
        -: 1569:   * jerry_get_context_data () is called with a pointer to my_manager as defined below.
        -: 1570:   */
        -: 1571:}
        -: 1572:
        -: 1573:/* Define how context items will be deinitialized */
        -: 1574:static void
        -: 1575:my_context_data_free (void *user_data_p)
        -: 1576:{
        -: 1577:  my_context_data_t *my_data_p = ((my_context_data_t *) user_data_p);
        -: 1578:
        -: 1579:  /* Perform any necessary cleanup on my_data. JerryScript will free the pointer after this function completes. */
        -: 1580:}
        -: 1581:
        -: 1582:/* Wrap the creation and destruction functions into a manager */
        -: 1583:static const jerry_context_data_manager_t my_manager =
        -: 1584:{
        -: 1585:  .init_cb = my_context_data_new,
        -: 1586:  .deinit_cb = my_context_data_free,
        -: 1587:  .bytes_needed = sizeof (my_context_data_t)
        -: 1588:};
        -: 1589:
        -: 1590:/*
        -: 1591: * Then, in some function in your code, you can retrieve an item of type my_context_data_t from the currently active
        -: 1592: * context such that JerryScript will create and store such an item if one was not previously created
        -: 1593: */
        -: 1594:static void
        -: 1595:someplace_in_the_code (void)
        -: 1596:{
        -: 1597:  my_context_data_t *my_data = (my_context_data_t *) jerry_get_context_data (&my_manager);
        -: 1598:  /* Perform useful things using the data found in my_data */
        -: 1599:}
        -: 1600:```
        -: 1601:
        -: 1602:
        -: 1603:## jerry_register_magic_strings
        -: 1604:
        -: 1605:**Summary**
        -: 1606:
        -: 1607:Registers an external magic string array.
        -: 1608:
        -: 1609:*Notes*:
        -: 1610:  - The strings in the array must be sorted by size at first, then lexicographically.
        -: 1611:  - The maximum number of external magic strings is limited to 2147483648 (UINT32_MAX / 2).
        -: 1612:    If there are more than 2147483648 external magic strings the extra is cropped.
        -: 1613:
        -: 1614:**Prototype**
        -: 1615:
        -: 1616:```c
        -: 1617:void
        -: 1618:jerry_register_magic_strings  (const jerry_char_t * const *ex_str_items_p,
        -: 1619:                               uint32_t count,
        -: 1620:                               const jerry_length_t *str_lengths_p);
        -: 1621:```
        -: 1622:
        -: 1623:- `ex_str_items_p` - character arrays, representing external magic strings' contents
        -: 1624:- `count` - number of elements in `ext_str_items_p` array
        -: 1625:- `str_lengths_p` - array of lengths for each magic string
        -: 1626:
        -: 1627:*Changed in version 2.0*: The first function argument type was changed.
        -: 1628:
        -: 1629:**Example**
        -: 1630:
        -: 1631:[doctest]: # ()
        -: 1632:
        -: 1633:```c
        -: 1634:#include "jerryscript.h"
        -: 1635:
        -: 1636:int
    #####: 1637:main (void)
        -: 1638:{
    #####: 1639:  jerry_init (JERRY_INIT_EMPTY);
        -: 1640:
        -: 1641:  // must be static, because 'jerry_register_magic_strings' does not copy
        -: 1642:  // the items must be sorted by size at first, then lexicographically
        -: 1643:  static const jerry_char_t * const magic_string_items[] = {
        -: 1644:                                                             (const jerry_char_t *) "magicstring1",
        -: 1645:                                                             (const jerry_char_t *) "magicstring2",
        -: 1646:                                                             (const jerry_char_t *) "magicstring3"
        -: 1647:                                                           };
    #####: 1648:  uint32_t num_magic_string_items = (uint32_t) (sizeof (magic_string_items) / sizeof (jerry_char_t *));
        -: 1649:
        -: 1650:  // must be static, because 'jerry_register_magic_strings' does not copy
        -: 1651:  static const jerry_length_t magic_string_lengths[] = {
        -: 1652:                                                         12,
        -: 1653:                                                         12,
        -: 1654:                                                         12
        -: 1655:                                                       };
    #####: 1656:  jerry_register_magic_strings (magic_string_items, num_magic_string_items, magic_string_lengths);
        -: 1657:}
        -: 1658:```
        -: 1659:
        -: 1660:**See also**
        -: 1661:
        -: 1662:- [jerry_init](#jerry_init)
        -: 1663:- [jerry_cleanup](#jerry_cleanup)
        -: 1664:- [jerry_get_literals_from_snapshot](#jerry_get_literals_from_snapshot)
        -: 1665:
        -: 1666:
        -: 1667:## jerry_get_memory_stats
        -: 1668:
        -: 1669:**Summary**
        -: 1670:
        -: 1671:Get heap memory stats.
        -: 1672:
        -: 1673:**Notes**:
        -: 1674:- The engine must be initialized with the `JERRY_INIT_MEM_STATS` option to allow
        -: 1675:  heap statistic collections. See [jerry_init](#jerry_init)
        -: 1676:- This API depends on a build option (`JERRY_MEM_STATS`) and can be checked
        -: 1677:  in runtime with the `JERRY_FEATURE_MEM_STATS` feature enum value,
        -: 1678:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 1679:
        -: 1680:
        -: 1681:**Prototype**
        -: 1682:
        -: 1683:```c
        -: 1684:bool
        -: 1685:jerry_get_memory_stats (jerry_heap_stats_t *out_stats_p);
        -: 1686:```
        -: 1687:
        -: 1688:- `out_stats_p` - out parameter, that provides the heap statistics.
        -: 1689:- return value
        -: 1690:  - true, if stats were written into the `out_stats_p` pointer.
        -: 1691:  - false, otherwise. Usually it is because the `JERRY_FEATURE_MEM_STATS` feature is not enabled.
        -: 1692:
        -: 1693:*New in version 2.0*.
        -: 1694:
        -: 1695:**Example**
        -: 1696:
        -: 1697:```c
        -: 1698:jerry_init (JERRY_INIT_MEM_STATS);
        -: 1699:// ...
        -: 1700:
        -: 1701:jerry_heap_stats_t stats = {0};
        -: 1702:bool get_stats_ret = jerry_get_memory_stats (&stats);
        -: 1703:```
        -: 1704:
        -: 1705:**See also**
        -: 1706:
        -: 1707:- [jerry_init](#jerry_init)
        -: 1708:
        -: 1709:
        -: 1710:## jerry_gc
        -: 1711:
        -: 1712:**Summary**
        -: 1713:
        -: 1714:Performs garbage collection.
        -: 1715:
        -: 1716:**Prototype**
        -: 1717:
        -: 1718:```c
        -: 1719:void
        -: 1720:jerry_gc (jerry_gc_mode_t mode);
        -: 1721:```
        -: 1722:
        -: 1723:- `mode` - operational mode, see [jerry_gc_mode_t](#jerry_gc_mode_t)
        -: 1724:
        -: 1725:*Changed in version 2.0*: Added `mode` argument.
        -: 1726:
        -: 1727:**Example**
        -: 1728:
        -: 1729:[doctest]: # ()
        -: 1730:
        -: 1731:```c
        -: 1732:#include "jerryscript.h"
        -: 1733:
        -: 1734:int
    #####: 1735:main (void)
        -: 1736:{
    #####: 1737:  jerry_init (JERRY_INIT_EMPTY);
        -: 1738:
    #####: 1739:  jerry_value_t object_value = jerry_create_object ();
    #####: 1740:  jerry_release_value (object_value);
        -: 1741:
    #####: 1742:  jerry_gc (JERRY_GC_PRESSURE_LOW);
        -: 1743:
    #####: 1744:  jerry_cleanup ();
        -: 1745:}
        -: 1746:```
        -: 1747:
        -: 1748:**See also**
        -: 1749:
        -: 1750:- [jerry_gc_mode_t](#jerry_gc_mode_t)
        -: 1751:- [jerry_init](#jerry_init)
        -: 1752:- [jerry_cleanup](#jerry_cleanup)
        -: 1753:
        -: 1754:# Parser and executor functions
        -: 1755:
        -: 1756:Functions to parse and run JavaScript source code.
        -: 1757:
        -: 1758:## jerry_run_simple
        -: 1759:
        -: 1760:**Summary**
        -: 1761:
        -: 1762:The simplest way to run JavaScript.
        -: 1763:
        -: 1764:**Prototype**
        -: 1765:
        -: 1766:```c
        -: 1767:bool
        -: 1768:jerry_run_simple (const jerry_char_t *script_source_p,
        -: 1769:                  size_t script_source_size,
        -: 1770:                  jerry_init_flag_t flags);
        -: 1771:```
        -: 1772:
        -: 1773:- `script_source_p` - source code, it must be a valid utf8 string.
        -: 1774:- `script_source_size` - size of source code buffer, in bytes.
        -: 1775:- `jerry_init_flag_t` - combination of various engine configuration flags
        -: 1776:- return value
        -: 1777:  - true, if run was successful
        -: 1778:  - false, otherwise
        -: 1779:
        -: 1780:**Example**
        -: 1781:
        -: 1782:[doctest]: # ()
        -: 1783:
        -: 1784:```c
        -: 1785:#include "jerryscript.h"
        -: 1786:
        -: 1787:int
    #####: 1788:main (void)
        -: 1789:{
    #####: 1790:  const jerry_char_t script[] = "print ('Hello, World!');";
        -: 1791:
    #####: 1792:  jerry_run_simple (script, sizeof (script) - 1, JERRY_INIT_EMPTY);
        -: 1793:  return 0;
        -: 1794:}
        -: 1795:```
        -: 1796:
        -: 1797:**See also**
        -: 1798:
        -: 1799:- [jerry_init](#jerry_init)
        -: 1800:- [jerry_cleanup](#jerry_cleanup)
        -: 1801:- [jerry_parse](#jerry_parse)
        -: 1802:- [jerry_run](#jerry_run)
        -: 1803:
        -: 1804:
        -: 1805:## jerry_parse
        -: 1806:
        -: 1807:**Summary**
        -: 1808:
        -: 1809:Parse a script, module, or function and create a compiled code using a character string.
        -: 1810:
        -: 1811:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 1812:is no longer needed.
        -: 1813:
        -: 1814:**Prototype**
        -: 1815:
        -: 1816:```c
        -: 1817:jerry_value_t
        -: 1818:jerry_parse (const jerry_char_t *source_p,
        -: 1819:             size_t source_size,
        -: 1820:             const jerry_parse_options_t *options_p);
        -: 1821:```
        -: 1822:
        -: 1823:- `source_p` - string, containing source code to parse (must be a valid UTF8 string).
        -: 1824:- `source_size` - size of the string, in bytes.
        -: 1825:- `options_p` - additional parsing options, can be NULL if not used
        -: 1826:- return value
        -: 1827:  - function object value, if script was parsed successfully,
        -: 1828:  - thrown error, otherwise
        -: 1829:
        -: 1830:*Changed in version 2.0*: Added `resource_name_p`, and `resource_name_length` arguments.
        -: 1831:
        -: 1832:*Changed in version [[NEXT_RELEASE]]*: The `resource_name_p`, `resource_name_length`, and `parse_opts` arguments are replaced by `options_p`.
        -: 1833:                                       This function replaces the `jerry_parse_function` method.
        -: 1834:
        -: 1835:**Example 1**
        -: 1836:
        -: 1837:[doctest]: # (name="02.API-REFERENCE-parse-simple.c")
        -: 1838:
        -: 1839:```c
        -: 1840:#include "jerryscript.h"
        -: 1841:
        -: 1842:int
    #####: 1843:main (void)
        -: 1844:{
    #####: 1845:  jerry_init (JERRY_INIT_EMPTY);
        -: 1846:
        -: 1847:  /* Parsing a script. */
    #####: 1848:  const jerry_char_t script[] = "print ('Hello, World!');";
        -: 1849:
        -: 1850:  jerry_parse_options_t parse_options;
    #####: 1851:  parse_options.options = JERRY_PARSE_STRICT_MODE | JERRY_PARSE_HAS_RESOURCE | JERRY_PARSE_HAS_START;
    #####: 1852:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "hello.js");
        -: 1853:  /* This example script is extracted from the middle of a file. */
    #####: 1854:  parse_options.start_line = 10;
    #####: 1855:  parse_options.start_column = 1;
        -: 1856:
    #####: 1857:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 1858:  jerry_release_value (parse_options.resource_name);
        -: 1859:
        -: 1860:  /* Run the "parsed_code" script with "jerry_run". */
        -: 1861:
    #####: 1862:  jerry_release_value (jerry_run (parsed_code));
    #####: 1863:  jerry_release_value (parsed_code);
        -: 1864:
    #####: 1865:  jerry_cleanup ();
        -: 1866:  return 0;
        -: 1867:}
        -: 1868:```
        -: 1869:
        -: 1870:**Example - function parsing**
        -: 1871:
        -: 1872:[doctest]: # (name="02.API-REFERENCE-parse-function.c")
        -: 1873:
        -: 1874:```c
        -: 1875:#include "jerryscript.h"
        -: 1876:
        -: 1877:int
    #####: 1878:main (void)
        -: 1879:{
    #####: 1880:  jerry_init (JERRY_INIT_EMPTY);
        -: 1881:
        -: 1882:  /* Specifly the argument list to parse a function. */
        -: 1883:  jerry_parse_options_t parse_options;
    #####: 1884:  parse_options.options = JERRY_PARSE_HAS_ARGUMENT_LIST;
    #####: 1885:  parse_options.argument_list = jerry_create_string ((const jerry_char_t *) "a, b");
        -: 1886:
    #####: 1887:  const jerry_char_t function_code[] = "return a + b;";
    #####: 1888:  jerry_value_t parsed_function = jerry_parse (function_code, sizeof (function_code) - 1, &parse_options);
    #####: 1889:  jerry_release_value (parse_options.argument_list);
        -: 1890:
        -: 1891:  /* Use the "parsed_function" as a normal JavaScript function. */
        -: 1892:
    #####: 1893:  jerry_value_t args[] = {
    #####: 1894:    jerry_create_number (3),
    #####: 1895:    jerry_create_number (4),
        -: 1896:  };
    #####: 1897:  jerry_size_t argc = sizeof (args) / sizeof (args[0]);
    #####: 1898:  jerry_value_t call_result = jerry_call_function (parsed_function,
        -: 1899:                                                   jerry_create_undefined(),
        -: 1900:                                                   args,
        -: 1901:                                                   argc);
        -: 1902:
        -: 1903:  /* use the function result */
    #####: 1904:  jerry_release_value (call_result);
    #####: 1905:  jerry_release_value (parsed_function);
        -: 1906:
    #####: 1907:  jerry_cleanup ();
        -: 1908:  return 0;
        -: 1909:}
        -: 1910:```
        -: 1911:
        -: 1912:**See also**
        -: 1913:
        -: 1914:- [jerry_parse_value](#jerry_parse_value)
        -: 1915:- [jerry_run](#jerry_run)
        -: 1916:- [jerry_parse_options_t](#jerry_parse_options_t)
        -: 1917:
        -: 1918:## jerry_parse_value
        -: 1919:
        -: 1920:**Summary**
        -: 1921:
        -: 1922:Parse a script, module, or function and create a compiled code using a string value.
        -: 1923:
        -: 1924:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 1925:is no longer needed.
        -: 1926:
        -: 1927:**Prototype**
        -: 1928:
        -: 1929:```c
        -: 1930:jerry_value_t
        -: 1931:jerry_parse_value (const jerry_value_t source_value,
        -: 1932:                   const jerry_parse_options_t *options_p);
        -: 1933:```
        -: 1934:
        -: 1935:- `source_value` - string value, containing source code to parse (only string values are accepted).
        -: 1936:- `options_p` - additional parsing options, can be NULL if not used
        -: 1937:- return value
        -: 1938:  - function object value, if script was parsed successfully,
        -: 1939:  - thrown error, otherwise
        -: 1940:
        -: 1941:*New in version [[NEXT_RELEASE]]*.
        -: 1942:
        -: 1943:**Example**
        -: 1944:
        -: 1945:[doctest]: # ()
        -: 1946:
        -: 1947:```c
        -: 1948:#include "jerryscript.h"
        -: 1949:
        -: 1950:int
    #####: 1951:main (void)
        -: 1952:{
    #####: 1953:  jerry_init (JERRY_INIT_EMPTY);
        -: 1954:
    #####: 1955:  jerry_value_t script_value = jerry_create_string ((const jerry_char_t *) "print ('Hello, World!');");
        -: 1956:
        -: 1957:  jerry_parse_options_t parse_options;
    #####: 1958:  parse_options.options = JERRY_PARSE_STRICT_MODE | JERRY_PARSE_HAS_RESOURCE | JERRY_PARSE_HAS_START;
    #####: 1959:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "hello.js");
        -: 1960:  /* This example script is extracted from the middle of a file. */
    #####: 1961:  parse_options.start_line = 10;
    #####: 1962:  parse_options.start_column = 1;
        -: 1963:
    #####: 1964:  jerry_value_t parsed_code = jerry_parse_value (script_value, &parse_options);
    #####: 1965:  jerry_release_value (parse_options.resource_name);
    #####: 1966:  jerry_release_value (script_value);
    #####: 1967:  jerry_release_value (parsed_code);
        -: 1968:
    #####: 1969:  jerry_cleanup ();
        -: 1970:  return 0;
        -: 1971:}
        -: 1972:```
        -: 1973:
        -: 1974:**See also**
        -: 1975:
        -: 1976:- [jerry_parse](#jerry_parse)
        -: 1977:- [jerry_run](#jerry_run)
        -: 1978:- [jerry_parse_options_t](#jerry_parse_options_t)
        -: 1979:
        -: 1980:## jerry_run
        -: 1981:
        -: 1982:**Summary**
        -: 1983:
        -: 1984:Run a Script or Module created by [jerry_parse](#jerry_parse).
        -: 1985:
        -: 1986:*Notes*:
        -: 1987:  - The code should be previously parsed with `jerry_parse`.
        -: 1988:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 1989:    when it is no longer needed.
        -: 1990:
        -: 1991:**Prototype**
        -: 1992:
        -: 1993:```c
        -: 1994:jerry_value_t
        -: 1995:jerry_run (const jerry_value_t func_val);
        -: 1996:```
        -: 1997:
        -: 1998:- `func_val` - function to run
        -: 1999:- return value
        -: 2000:  - result of bytecode, if run was successful
        -: 2001:  - thrown error, otherwise
        -: 2002:
        -: 2003:**Example**
        -: 2004:
        -: 2005:[doctest]: # ()
        -: 2006:
        -: 2007:```c
        -: 2008:#include "jerryscript.h"
        -: 2009:
        -: 2010:int
    #####: 2011:main (void)
        -: 2012:{
    #####: 2013:  const jerry_char_t script[] = "print ('Hello, World!');";
        -: 2014:
        -: 2015:  /* Initialize engine */
    #####: 2016:  jerry_init (JERRY_INIT_EMPTY);
        -: 2017:
        -: 2018:  /* Setup Global scope code */
    #####: 2019:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
        -: 2020:
    #####: 2021:  if (!jerry_value_is_error (parsed_code))
        -: 2022:  {
        -: 2023:    /* Execute the parsed source code in the Global scope */
    #####: 2024:    jerry_value_t ret_value = jerry_run (parsed_code);
        -: 2025:
        -: 2026:    /* Returned value must be freed */
    #####: 2027:    jerry_release_value (ret_value);
        -: 2028:  }
        -: 2029:
        -: 2030:  /* Parsed source code must be freed */
    #####: 2031:  jerry_release_value (parsed_code);
        -: 2032:
        -: 2033:  /* Cleanup engine */
    #####: 2034:  jerry_cleanup ();
        -: 2035:}
        -: 2036:```
        -: 2037:
        -: 2038:**See also**
        -: 2039:
        -: 2040:- [jerry_parse](#jerry_parse)
        -: 2041:
        -: 2042:
        -: 2043:## jerry_eval
        -: 2044:
        -: 2045:**Summary**
        -: 2046:
        -: 2047:Perform JavaScript `eval` function call (ECMA-262 v5.1 sec-15.1.2.1).
        -: 2048:
        -: 2049:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 2050:is no longer needed.
        -: 2051:
        -: 2052:**Prototype**
        -: 2053:
        -: 2054:```c
        -: 2055:jerry_value_t
        -: 2056:jerry_eval (const jerry_char_t *source_p,
        -: 2057:            size_t source_size,
        -: 2058:            uint32_t parse_opts);
        -: 2059:```
        -: 2060:
        -: 2061:- `source_p` - source code to evaluate, it must be a valid utf8 string.
        -: 2062:- `source_size` - length of the source code
        -: 2063:- `parse_opts` - combination of [jerry_parse_option_enable_feature_t](#jerry_parse_option_enable_feature_t) flags.
        -: 2064:                 The following flags are allowed: JERRY_PARSE_STRICT_MODE
        -: 2065:- return value - result of eval, may be an error value.
        -: 2066:
        -: 2067:**Example**
        -: 2068:
        -: 2069:```c
        -: 2070:{
        -: 2071:  jerry_value_t ret_val = jerry_eval (str_to_eval,
        -: 2072:                                      strlen (str_to_eval),
        -: 2073:                                      JERRY_PARSE_NO_OPTS);
        -: 2074:}
        -: 2075:```
        -: 2076:
        -: 2077:**See also**
        -: 2078:
        -: 2079:- [jerry_create_external_function](#jerry_create_external_function)
        -: 2080:- [jerry_external_handler_t](#jerry_external_handler_t)
        -: 2081:
        -: 2082:## jerry_run_all_enqueued_jobs
        -: 2083:
        -: 2084:**Summary**
        -: 2085:
        -: 2086:Run enqueued Promise jobs until the first thrown error or until all get executed.
        -: 2087:
        -: 2088:*Important Note*: The job queue is not guaranteed to be empty, after the function call has returned a value.
        -: 2089:Therefore, this function is best used in a while loop, handling each error it returns, until the job queue is empty.
        -: 2090:
        -: 2091:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 2092:is no longer needed.
        -: 2093:
        -: 2094:**Prototype**
        -: 2095:
        -: 2096:```c
        -: 2097:jerry_value_t
        -: 2098:jerry_run_all_enqueued_jobs (void)
        -: 2099:```
        -: 2100:
        -: 2101:- return value - result of last executed job, may be error value.
        -: 2102:
        -: 2103:*New in version 2.0*.
        -: 2104:
        -: 2105:**Example**
        -: 2106:
        -: 2107:[doctest]: # ()
        -: 2108:
        -: 2109:```c
        -: 2110:#include "jerryscript.h"
        -: 2111:
        -: 2112:int
    #####: 2113:main (void)
        -: 2114:{
    #####: 2115:  jerry_init (JERRY_INIT_EMPTY);
        -: 2116:
    #####: 2117:  const jerry_char_t script[] = "new Promise(function(f,r) { f('Hello, World!'); }).then(function(x) { print(x); });";
        -: 2118:
    #####: 2119:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
    #####: 2120:  jerry_value_t script_value = jerry_run (parsed_code);
        -: 2121:
        -: 2122:  jerry_value_t job_value;
        -: 2123:  while (true)
        -: 2124:  {
    #####: 2125:    job_value = jerry_run_all_enqueued_jobs ();
        -: 2126:
    #####: 2127:    if (jerry_value_is_error (job_value))
        -: 2128:    {
    #####: 2129:      if (jerry_value_is_abort (job_value))
        -: 2130:      {
        -: 2131:        // Terminate the engine
        -: 2132:      }
        -: 2133:
        -: 2134:      // Handle the error here
        -: 2135:    }
        -: 2136:    else
        -: 2137:    {
        -: 2138:      // The queue should be empty now
        -: 2139:      break;
        -: 2140:    }
        -: 2141:  }
        -: 2142:
    #####: 2143:  jerry_release_value (job_value);
    #####: 2144:  jerry_release_value (script_value);
    #####: 2145:  jerry_release_value (parsed_code);
        -: 2146:
    #####: 2147:  jerry_cleanup ();
        -: 2148:  return 0;
        -: 2149:}
        -: 2150:```
        -: 2151:
        -: 2152:
        -: 2153:# Get the global context
        -: 2154:
        -: 2155:## jerry_get_global_object
        -: 2156:
        -: 2157:**Summary**
        -: 2158:
        -: 2159:Get the Global object.
        -: 2160:
        -: 2161:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 2162:is no longer needed.
        -: 2163:
        -: 2164:**Prototype**
        -: 2165:
        -: 2166:```c
        -: 2167:jerry_value_t
        -: 2168:jerry_get_global_object (void);
        -: 2169:```
        -: 2170:
        -: 2171:- return value - api value of global object
        -: 2172:
        -: 2173:**Example**
        -: 2174:
        -: 2175:```c
        -: 2176:{
        -: 2177:  jerry_value_t glob_obj_val = jerry_get_global_object ();
        -: 2178:
        -: 2179:  ... // Do something with global object, ex: add properties
        -: 2180:
        -: 2181:  jerry_release_value (glob_obj_val);
        -: 2182:}
        -: 2183:```
        -: 2184:
        -: 2185:**See also**
        -: 2186:
        -: 2187:- [jerry_release_value](#jerry_release_value)
        -: 2188:- [jerry_define_own_property](#jerry_define_own_property)
        -: 2189:
        -: 2190:
        -: 2191:# Checker functions
        -: 2192:
        -: 2193:Functions to check the type of an API value ([jerry_value_t](#jerry_value_t)).
        -: 2194:
        -: 2195:## jerry_value_is_abort
        -: 2196:
        -: 2197:**Summary**
        -: 2198:
        -: 2199:Returns whether the given `jerry_value_t` has the error and abort value set.
        -: 2200:
        -: 2201:**Prototype**
        -: 2202:
        -: 2203:```c
        -: 2204:bool
        -: 2205:jerry_value_is_abort (const jerry_value_t value);
        -: 2206:```
        -: 2207:
        -: 2208:- `value` - api value
        -: 2209:- return value
        -: 2210:  - true, if the given `jerry_value_t` has the error and abort value set
        -: 2211:  - false, otherwise
        -: 2212:
        -: 2213:*New in version 2.0*.
        -: 2214:
        -: 2215:**Example**
        -: 2216:
        -: 2217:```c
        -: 2218:{
        -: 2219:  jerry_value_t value;
        -: 2220:  ... // create or acquire value
        -: 2221:
        -: 2222:  if (jerry_value_is_abort (value))
        -: 2223:  {
        -: 2224:    ...
        -: 2225:  }
        -: 2226:
        -: 2227:  jerry_release_value (value);
        -: 2228:}
        -: 2229:```
        -: 2230:
        -: 2231:**See also**
        -: 2232:
        -: 2233:- [jerry_value_t](#jerry_value_t)
        -: 2234:- [jerry_value_is_error](#jerry_value_is_error)
        -: 2235:
        -: 2236:## jerry_value_is_array
        -: 2237:
        -: 2238:**Summary**
        -: 2239:
        -: 2240:Returns whether the given `jerry_value_t` is an array.
        -: 2241:
        -: 2242:**Prototype**
        -: 2243:
        -: 2244:```c
        -: 2245:bool
        -: 2246:jerry_value_is_array (const jerry_value_t value)
        -: 2247:```
        -: 2248:
        -: 2249:- `value` - api value
        -: 2250:- return value
        -: 2251:  - true, if the given `jerry_value_t` is an array
        -: 2252:  - false, otherwise
        -: 2253:
        -: 2254:**Example**
        -: 2255:
        -: 2256:```c
        -: 2257:{
        -: 2258:  jerry_value_t value;
        -: 2259:  ... // create or acquire value
        -: 2260:
        -: 2261:  if (jerry_value_is_array (value))
        -: 2262:  {
        -: 2263:    ...
        -: 2264:  }
        -: 2265:
        -: 2266:  jerry_release_value (value);
        -: 2267:}
        -: 2268:```
        -: 2269:
        -: 2270:**See also**
        -: 2271:
        -: 2272:- [jerry_release_value](#jerry_release_value)
        -: 2273:
        -: 2274:## jerry_value_is_arraybuffer
        -: 2275:
        -: 2276:**Summary**
        -: 2277:
        -: 2278:Returns whether the given `jerry_value_t` is an ArrayBuffer object.
        -: 2279:
        -: 2280:*Notes*:
        -: 2281:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 2282:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 2283:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2284:- The es.next profile enables this by default.
        -: 2285:
        -: 2286:**Prototype**
        -: 2287:
        -: 2288:```c
        -: 2289:bool
        -: 2290:jerry_value_is_arraybuffer (const jerry_value_t value)
        -: 2291:```
        -: 2292:
        -: 2293:- `value` - api value to check.
        -: 2294:- return value
        -: 2295:  - true, if the given `jerry_value_t` is an ArrayBuffer object.
        -: 2296:  - false, otherwise
        -: 2297:
        -: 2298:*New in version 2.0*.
        -: 2299:
        -: 2300:**Example**
        -: 2301:
        -: 2302:```c
        -: 2303:{
        -: 2304:  jerry_value_t value;
        -: 2305:  ... // create or acquire value
        -: 2306:
        -: 2307:  if (jerry_value_is_arraybuffer (value))
        -: 2308:  {
        -: 2309:    ...
        -: 2310:  }
        -: 2311:
        -: 2312:  jerry_release_value (value);
        -: 2313:}
        -: 2314:```
        -: 2315:
        -: 2316:**See also**
        -: 2317:
        -: 2318:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -: 2319:- [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external)
        -: 2320:
        -: 2321:## jerry_value_is_shared_arraybuffer
        -: 2322:
        -: 2323:**Summary**
        -: 2324:
        -: 2325:Returns whether the given `jerry_value_t` is a SharedArrayBuffer object.
        -: 2326:
        -: 2327:*Notes*:
        -: 2328:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 2329:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 2330:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2331:- The es.next profile enables this by default.
        -: 2332:
        -: 2333:**Prototype**
        -: 2334:
        -: 2335:```c
        -: 2336:bool
        -: 2337:jerry_value_is_shared_arraybuffer (const jerry_value_t value);
        -: 2338:```
        -: 2339:
        -: 2340:- `value` - api value to check.
        -: 2341:- return value
        -: 2342:    - true, if the given `jerry_value_t` is a SharedArrayBuffer object.
        -: 2343:    - false, otherwise
        -: 2344:
        -: 2345:*New in version [[NEXT_RELEASE]]*.
        -: 2346:
        -: 2347:**Example**
        -: 2348:
        -: 2349:```c
        -: 2350:{
        -: 2351:  jerry_value_t value;
        -: 2352:  ... // create or acquire value
        -: 2353:
        -: 2354:  if (jerry_value_is_shared_arraybuffer (value))
        -: 2355:  {
        -: 2356:    ...
        -: 2357:  }
        -: 2358:
        -: 2359:  jerry_release_value (value);
        -: 2360:}
        -: 2361:```
        -: 2362:
        -: 2363:**See also**
        -: 2364:
        -: 2365:- [jerry_create_shared_arraybuffer](#jerry_create_shared_arraybuffer)
        -: 2366:- [jerry_create_shared_arraybuffer_external](#jerry_create_shared_arraybuffer_external)
        -: 2367:
        -: 2368:
        -: 2369:## jerry_value_is_boolean
        -: 2370:
        -: 2371:**Summary**
        -: 2372:
        -: 2373:Returns whether the given `jerry_value_t` is a boolean value.
        -: 2374:
        -: 2375:**Prototype**
        -: 2376:
        -: 2377:```c
        -: 2378:bool
        -: 2379:jerry_value_is_boolean (const jerry_value_t value)
        -: 2380:```
        -: 2381:
        -: 2382:- `value` - api value
        -: 2383:- return value
        -: 2384:  - true, if the given `jerry_value_t` is a boolean value
        -: 2385:  - false, otherwise
        -: 2386:
        -: 2387:**Example**
        -: 2388:
        -: 2389:```c
        -: 2390:{
        -: 2391:  jerry_value_t value;
        -: 2392:  ... // create or acquire value
        -: 2393:
        -: 2394:  if (jerry_value_is_boolean (value))
        -: 2395:  {
        -: 2396:    ...
        -: 2397:  }
        -: 2398:
        -: 2399:  jerry_release_value (value);
        -: 2400:}
        -: 2401:```
        -: 2402:
        -: 2403:**See also**
        -: 2404:
        -: 2405:- [jerry_release_value](#jerry_release_value)
        -: 2406:
        -: 2407:## jerry_value_is_true
        -: 2408:
        -: 2409:**Summary**
        -: 2410:
        -: 2411:Returns whether the given `jerry_value_t` is a true value.
        -: 2412:
        -: 2413:**Prototype**
        -: 2414:
        -: 2415:```c
        -: 2416:bool
        -: 2417:jerry_value_is_true (const jerry_value_t value);
        -: 2418:```
        -: 2419:
        -: 2420:- `value` - api value
        -: 2421:- return value
        -: 2422:    - true, if the given `jerry_value_t` is true value
        -: 2423:    - false, otherwise
        -: 2424:
        -: 2425:*New in version [[NEXT_RELEASE]]*. Replaces the `jerry_value_is_boolean` method.
        -: 2426:
        -: 2427:**Example**
        -: 2428:
        -: 2429:```c
        -: 2430:{
        -: 2431:  jerry_value_t value;
        -: 2432:  ... // create or acquire value
        -: 2433:
        -: 2434:  if (jerry_value_is_true (value))
        -: 2435:  {
        -: 2436:    ...
        -: 2437:  }
        -: 2438:
        -: 2439:  jerry_release_value (value);
        -: 2440:}
        -: 2441:```
        -: 2442:
        -: 2443:**See also**
        -: 2444:
        -: 2445:- [jerry_release_value](#jerry_release_value)
        -: 2446:
        -: 2447:## jerry_value_is_false
        -: 2448:
        -: 2449:**Summary**
        -: 2450:
        -: 2451:Returns whether the given `jerry_value_t` is a false value.
        -: 2452:
        -: 2453:**Prototype**
        -: 2454:
        -: 2455:```c
        -: 2456:bool
        -: 2457:jerry_value_is_false (const jerry_value_t value);
        -: 2458:```
        -: 2459:
        -: 2460:- `value` - api value
        -: 2461:- return value
        -: 2462:    - true, if the given `jerry_value_t` is false value
        -: 2463:    - false, otherwise
        -: 2464:
        -: 2465:*New in version [[NEXT_RELEASE]]*. Replaces the `jerry_value_is_boolean` method.
        -: 2466:
        -: 2467:**Example**
        -: 2468:
        -: 2469:```c
        -: 2470:{
        -: 2471:  jerry_value_t value;
        -: 2472:  ... // create or acquire value
        -: 2473:
        -: 2474:  if (jerry_value_is_false (value))
        -: 2475:  {
        -: 2476:    ...
        -: 2477:  }
        -: 2478:
        -: 2479:  jerry_release_value (value);
        -: 2480:}
        -: 2481:```
        -: 2482:
        -: 2483:**See also**
        -: 2484:
        -: 2485:- [jerry_release_value](#jerry_release_value)
        -: 2486:
        -: 2487:## jerry_value_is_constructor
        -: 2488:
        -: 2489:**Summary**
        -: 2490:
        -: 2491:Returns whether the given `jerry_value_t` is a constructor function.
        -: 2492:
        -: 2493:**Prototype**
        -: 2494:
        -: 2495:```c
        -: 2496:bool
        -: 2497:jerry_value_is_constructor (const jerry_value_t value)
        -: 2498:```
        -: 2499:
        -: 2500:- `value` - api value
        -: 2501:- return value
        -: 2502:  - true, if the given `jerry_value_t` is a constructor
        -: 2503:  - false, otherwise
        -: 2504:
        -: 2505:**Example**
        -: 2506:
        -: 2507:```c
        -: 2508:{
        -: 2509:  jerry_value_t value;
        -: 2510:  ... // create or acquire value
        -: 2511:
        -: 2512:  if (jerry_value_is_constructor (value))
        -: 2513:  {
        -: 2514:    ...
        -: 2515:  }
        -: 2516:
        -: 2517:  jerry_release_value (value);
        -: 2518:}
        -: 2519:```
        -: 2520:
        -: 2521:**See also**
        -: 2522:
        -: 2523:- [jerry_release_value](#jerry_release_value)
        -: 2524:
        -: 2525:## jerry_value_is_dataview
        -: 2526:
        -: 2527:**Summary**
        -: 2528:
        -: 2529:Returns whether the given `jerry_value_t` is a DataView object value.
        -: 2530:
        -: 2531:*Notes*:
        -: 2532:- This API depends on a build option (`JERRY_BUILTIN_DATAVIEW`) and can be checked
        -: 2533:  in runtime with the `JERRY_FEATURE_DATAVIEW` feature enum value,
        -: 2534:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2535:- The es.next profile enables this by default.
        -: 2536:
        -: 2537:**Prototype**
        -: 2538:
        -: 2539:```c
        -: 2540:bool
        -: 2541:jerry_value_is_dataview (const jerry_value_t value)
        -: 2542:```
        -: 2543:
        -: 2544:- `value` - API value
        -: 2545:- return value
        -: 2546:  - true, if the given `jerry_value_t` is a DataView object
        -: 2547:  - false, otherwise
        -: 2548:
        -: 2549:*New in version 2.0*.
        -: 2550:
        -: 2551:**Example**
        -: 2552:
        -: 2553:[doctest]: # ()
        -: 2554:
        -: 2555:```c
        -: 2556:#include "jerryscript.h"
        -: 2557:
        -: 2558:int
    #####: 2559:main (void)
        -: 2560:{
    #####: 2561:  jerry_init (JERRY_INIT_EMPTY);
        -: 2562:
    #####: 2563:  jerry_value_t arraybuffer = jerry_create_arraybuffer (16);
    #####: 2564:  jerry_value_t dataview = jerry_create_dataview (arraybuffer, 0, 16);
        -: 2565:
    #####: 2566:  if (jerry_value_is_dataview (dataview))
        -: 2567:  {
        -: 2568:    // usage of dataview
        -: 2569:  }
        -: 2570:
    #####: 2571:  jerry_release_value (dataview);
    #####: 2572:  jerry_release_value (arraybuffer);
        -: 2573:
    #####: 2574:  jerry_cleanup ();
        -: 2575:  return 0;
        -: 2576:}
        -: 2577:```
        -: 2578:
        -: 2579:**See also**
        -: 2580:
        -: 2581:- [jerry_release_value](#jerry_release_value)
        -: 2582:- [jerry_create_dataview](#jerry_create_dataview)
        -: 2583:
        -: 2584:
        -: 2585:## jerry_value_is_error
        -: 2586:
        -: 2587:**Summary**
        -: 2588:
        -: 2589:Returns whether the given `jerry_value_t` is error value.
        -: 2590:
        -: 2591:**Prototype**
        -: 2592:
        -: 2593:```c
        -: 2594:bool
        -: 2595:jerry_value_is_error (const jerry_value_t value);
        -: 2596:```
        -: 2597:
        -: 2598:- `value` - api value
        -: 2599:- return value
        -: 2600:  - true, if the given `jerry_value_t` is error value.
        -: 2601:  - false, otherwise
        -: 2602:
        -: 2603:*New in version 2.0*.
        -: 2604:
        -: 2605:**Example**
        -: 2606:
        -: 2607:```c
        -: 2608:{
        -: 2609:  jerry_value_t value;
        -: 2610:  ... // create or acquire value
        -: 2611:
        -: 2612:  if (jerry_value_is_error (value))
        -: 2613:  {
        -: 2614:    ...
        -: 2615:  }
        -: 2616:
        -: 2617:  jerry_release_value (value);
        -: 2618:}
        -: 2619:```
        -: 2620:
        -: 2621:**See also**
        -: 2622:
        -: 2623:- [jerry_value_t](#jerry_value_t)
        -: 2624:- [jerry_value_is_abort](#jerry_value_is_abort)
        -: 2625:
        -: 2626:## jerry_value_is_function
        -: 2627:
        -: 2628:**Summary**
        -: 2629:
        -: 2630:Returns whether the given `jerry_value_t` is a function.
        -: 2631:
        -: 2632:**Prototype**
        -: 2633:
        -: 2634:```c
        -: 2635:bool
        -: 2636:jerry_value_is_function (const jerry_value_t value)
        -: 2637:```
        -: 2638:
        -: 2639:- `value` - api value
        -: 2640:- return value
        -: 2641:  - true, if the given `jerry_value_t` is a function
        -: 2642:  - false, otherwise
        -: 2643:
        -: 2644:**Example**
        -: 2645:
        -: 2646:```c
        -: 2647:{
        -: 2648:  jerry_value_t value;
        -: 2649:  ... // create or acquire value
        -: 2650:
        -: 2651:  if (jerry_value_is_function (value))
        -: 2652:  {
        -: 2653:    ...
        -: 2654:  }
        -: 2655:
        -: 2656:  jerry_release_value (value);
        -: 2657:}
        -: 2658:```
        -: 2659:
        -: 2660:**See also**
        -: 2661:
        -: 2662:- [jerry_release_value](#jerry_release_value)
        -: 2663:
        -: 2664:
        -: 2665:## jerry_value_is_async_function
        -: 2666:
        -: 2667:**Summary**
        -: 2668:
        -: 2669:Returns whether the given `jerry_value_t` is an async function.
        -: 2670:
        -: 2671:**Prototype**
        -: 2672:
        -: 2673:```c
        -: 2674:bool
        -: 2675:jerry_value_is_async_function (const jerry_value_t value)
        -: 2676:```
        -: 2677:
        -: 2678:- `value` - api value
        -: 2679:- return value
        -: 2680:  - true, if the given `jerry_value_t` is an async function
        -: 2681:  - false, otherwise
        -: 2682:
        -: 2683:*New in version 2.4*.
        -: 2684:
        -: 2685:**Example**
        -: 2686:
        -: 2687:```c
        -: 2688:{
        -: 2689:  jerry_value_t value;
        -: 2690:  ... // create or acquire value
        -: 2691:
        -: 2692:  if (jerry_value_is_async_function (value))
        -: 2693:  {
        -: 2694:    ...
        -: 2695:  }
        -: 2696:
        -: 2697:  jerry_release_value (value);
        -: 2698:}
        -: 2699:```
        -: 2700:
        -: 2701:**See also**
        -: 2702:
        -: 2703:- [jerry_release_value](#jerry_release_value)
        -: 2704:
        -: 2705:## jerry_value_is_number
        -: 2706:
        -: 2707:**Summary**
        -: 2708:
        -: 2709:Returns whether the given `jerry_value_t` is a number.
        -: 2710:
        -: 2711:**Prototype**
        -: 2712:
        -: 2713:```c
        -: 2714:bool
        -: 2715:jerry_value_is_number (const jerry_value_t value)
        -: 2716:```
        -: 2717:
        -: 2718:- `value` - api value
        -: 2719:- return value
        -: 2720:  - true, if the given `jerry_value_t` is a number
        -: 2721:  - false, otherwise
        -: 2722:
        -: 2723:**Example**
        -: 2724:
        -: 2725:```c
        -: 2726:{
        -: 2727:  jerry_value_t value;
        -: 2728:  ... // create or acquire value
        -: 2729:
        -: 2730:  if (jerry_value_is_number (value))
        -: 2731:  {
        -: 2732:    ...
        -: 2733:  }
        -: 2734:
        -: 2735:  jerry_release_value (value);
        -: 2736:}
        -: 2737:```
        -: 2738:
        -: 2739:**See also**
        -: 2740:
        -: 2741:- [jerry_release_value](#jerry_release_value)
        -: 2742:
        -: 2743:
        -: 2744:## jerry_value_is_null
        -: 2745:
        -: 2746:**Summary**
        -: 2747:
        -: 2748:Returns whether the given `jerry_value_t` is a null value.
        -: 2749:
        -: 2750:**Prototype**
        -: 2751:
        -: 2752:```c
        -: 2753:bool
        -: 2754:jerry_value_is_null (const jerry_value_t value)
        -: 2755:```
        -: 2756:
        -: 2757:- `value` - api value
        -: 2758:- return value
        -: 2759:  - true, if the given `jerry_value_t` is a null
        -: 2760:  - false, otherwise
        -: 2761:
        -: 2762:**Example**
        -: 2763:
        -: 2764:```c
        -: 2765:{
        -: 2766:  jerry_value_t value;
        -: 2767:  ... // create or acquire value
        -: 2768:
        -: 2769:  if (jerry_value_is_null (value))
        -: 2770:  {
        -: 2771:    ...
        -: 2772:  }
        -: 2773:
        -: 2774:  jerry_release_value (value);
        -: 2775:}
        -: 2776:```
        -: 2777:
        -: 2778:**See also**
        -: 2779:
        -: 2780:- [jerry_release_value](#jerry_release_value)
        -: 2781:
        -: 2782:
        -: 2783:## jerry_value_is_object
        -: 2784:
        -: 2785:**Summary**
        -: 2786:
        -: 2787:Returns whether the given `jerry_value_t` is an object value.
        -: 2788:
        -: 2789:**Prototype**
        -: 2790:
        -: 2791:```c
        -: 2792:bool
        -: 2793:jerry_value_is_object (const jerry_value_t value)
        -: 2794:```
        -: 2795:
        -: 2796:- `value` - api value
        -: 2797:- return value
        -: 2798:  - true, if the given `jerry_value_t` is an object
        -: 2799:  - false, otherwise
        -: 2800:
        -: 2801:**Example**
        -: 2802:
        -: 2803:```c
        -: 2804:{
        -: 2805:  jerry_value_t value;
        -: 2806:  ... // create or acquire value
        -: 2807:
        -: 2808:  if (jerry_value_is_object (value))
        -: 2809:  {
        -: 2810:    ...
        -: 2811:  }
        -: 2812:
        -: 2813:  jerry_release_value (value);
        -: 2814:}
        -: 2815:```
        -: 2816:
        -: 2817:**See also**
        -: 2818:
        -: 2819:- [jerry_release_value](#jerry_release_value)
        -: 2820:
        -: 2821:
        -: 2822:## jerry_value_is_promise
        -: 2823:
        -: 2824:**Summary**
        -: 2825:
        -: 2826:Returns whether the given `jerry_value_t` is a promise value.
        -: 2827:
        -: 2828:*Notes*:
        -: 2829:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 2830:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 2831:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2832:- The es.next profile enables this by default.
        -: 2833:
        -: 2834:
        -: 2835:**Prototype**
        -: 2836:
        -: 2837:```c
        -: 2838:bool
        -: 2839:jerry_value_is_promise (const jerry_value_t value)
        -: 2840:```
        -: 2841:
        -: 2842:- `value` - api value
        -: 2843:- return value
        -: 2844:  - true, if the given `jerry_value_t` is a promise
        -: 2845:  - false, otherwise
        -: 2846:
        -: 2847:*New in version 2.0*.
        -: 2848:
        -: 2849:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 2850:
        -: 2851:**Example**
        -: 2852:
        -: 2853:```c
        -: 2854:{
        -: 2855:  jerry_value_t value;
        -: 2856:  ... // create or acquire value
        -: 2857:
        -: 2858:  if (jerry_value_is_promise (value))
        -: 2859:  {
        -: 2860:    ...
        -: 2861:  }
        -: 2862:
        -: 2863:  jerry_release_value (value);
        -: 2864:}
        -: 2865:```
        -: 2866:
        -: 2867:**See also**
        -: 2868:
        -: 2869:- [jerry_release_value](#jerry_release_value)
        -: 2870:- [jerry_create_promise](#jerry_create_promise)
        -: 2871:
        -: 2872:
        -: 2873:## jerry_value_is_proxy
        -: 2874:
        -: 2875:**Summary**
        -: 2876:
        -: 2877:Returns whether the given `jerry_value_t` is a proxy value.
        -: 2878:
        -: 2879:*Notes*:
        -: 2880:- This API depends on a build option (`JERRY_BUILTIN_PROXY`) and can be checked
        -: 2881:  in runtime with the `JERRY_FEATURE_PROXY` feature enum value,
        -: 2882:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2883:- The es.next profile enables this by default.
        -: 2884:
        -: 2885:
        -: 2886:**Prototype**
        -: 2887:
        -: 2888:```c
        -: 2889:bool
        -: 2890:jerry_value_is_proxy (const jerry_value_t value)
        -: 2891:```
        -: 2892:
        -: 2893:- `value` - api value
        -: 2894:- return value
        -: 2895:  - true, if the given `jerry_value_t` is a proxy object
        -: 2896:  - false, otherwise
        -: 2897:
        -: 2898:*New in version 2.3*.
        -: 2899:
        -: 2900:**Example**
        -: 2901:
        -: 2902:```c
        -: 2903:{
        -: 2904:  jerry_value_t value;
        -: 2905:  ... // create or acquire value
        -: 2906:
        -: 2907:  if (jerry_value_is_proxy (value))
        -: 2908:  {
        -: 2909:    ...
        -: 2910:  }
        -: 2911:
        -: 2912:  jerry_release_value (value);
        -: 2913:}
        -: 2914:```
        -: 2915:
        -: 2916:**See also**
        -: 2917:
        -: 2918:- [jerry_release_value](#jerry_release_value)
        -: 2919:- [jerry_create_proxy](#jerry_create_proxy)
        -: 2920:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 2921:
        -: 2922:
        -: 2923:## jerry_value_is_string
        -: 2924:
        -: 2925:**Summary**
        -: 2926:
        -: 2927:Returns whether the given `jerry_value_t` is a string value.
        -: 2928:
        -: 2929:**Prototype**
        -: 2930:
        -: 2931:```c
        -: 2932:bool
        -: 2933:jerry_value_is_string (const jerry_value_t value)
        -: 2934:```
        -: 2935:
        -: 2936:- `value` - api value
        -: 2937:- return value
        -: 2938:  - true, if the given `jerry_value_t` is a string
        -: 2939:  - false, otherwise
        -: 2940:
        -: 2941:**Example**
        -: 2942:
        -: 2943:```c
        -: 2944:{
        -: 2945:  jerry_value_t value;
        -: 2946:  ... // create or acquire value
        -: 2947:
        -: 2948:  if (jerry_value_is_string (value))
        -: 2949:  {
        -: 2950:    ...
        -: 2951:  }
        -: 2952:
        -: 2953:  jerry_release_value (value);
        -: 2954:}
        -: 2955:```
        -: 2956:
        -: 2957:**See also**
        -: 2958:
        -: 2959:- [jerry_release_value](#jerry_release_value)
        -: 2960:
        -: 2961:
        -: 2962:## jerry_value_is_symbol
        -: 2963:
        -: 2964:**Summary**
        -: 2965:
        -: 2966:Returns whether the given `jerry_value_t` is a symbol value.
        -: 2967:
        -: 2968:*Notes*:
        -: 2969:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 2970:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 2971:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2972:- The es.next profile enables this by default.
        -: 2973:
        -: 2974:**Prototype**
        -: 2975:
        -: 2976:```c
        -: 2977:bool
        -: 2978:jerry_value_is_symbol (const jerry_value_t value)
        -: 2979:```
        -: 2980:
        -: 2981:- `value` - API value
        -: 2982:- return value
        -: 2983:  - true, if the given `jerry_value_t` is a symbol
        -: 2984:  - false, otherwise
        -: 2985:
        -: 2986:*New in version 2.0*.
        -: 2987:
        -: 2988:**Example**
        -: 2989:
        -: 2990:[doctest]: # ()
        -: 2991:
        -: 2992:```c
        -: 2993:#include "jerryscript.h"
        -: 2994:
        -: 2995:int
    #####: 2996:main (void)
        -: 2997:{
    #####: 2998:  jerry_init (JERRY_INIT_EMPTY);
        -: 2999:
    #####: 3000:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "Symbol description string");
    #####: 3001:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 3002:
    #####: 3003:  jerry_release_value (string_value);
        -: 3004:
    #####: 3005:  if (jerry_value_is_symbol (symbol_value))
        -: 3006:  {
        -: 3007:    // usage of symbol_value
        -: 3008:  }
        -: 3009:
    #####: 3010:  jerry_release_value (symbol_value);
        -: 3011:
    #####: 3012:  jerry_cleanup ();
        -: 3013:  return 0;
        -: 3014:}
        -: 3015:```
        -: 3016:
        -: 3017:**See also**
        -: 3018:
        -: 3019:- [jerry_release_value](#jerry_release_value)
        -: 3020:- [jerry_create_symbol](#jerry_create_symbol)
        -: 3021:
        -: 3022:
        -: 3023:## jerry_value_is_bigint
        -: 3024:
        -: 3025:**Summary**
        -: 3026:
        -: 3027:Returns whether the given `jerry_value_t` is a bigint value.
        -: 3028:
        -: 3029:*Notes*:
        -: 3030:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 3031:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 3032:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3033:- The es.next profile enables this by default.
        -: 3034:
        -: 3035:**Prototype**
        -: 3036:
        -: 3037:```c
        -: 3038:bool
        -: 3039:jerry_value_is_bigint (const jerry_value_t value)
        -: 3040:```
        -: 3041:
        -: 3042:- `value` - API value
        -: 3043:- return value
        -: 3044:  - true, if the given `jerry_value_t` is a BigInt
        -: 3045:  - false, otherwise
        -: 3046:
        -: 3047:*New in version 2.4*.
        -: 3048:
        -: 3049:**Example**
        -: 3050:
        -: 3051:[doctest]: # ()
        -: 3052:
        -: 3053:```c
        -: 3054:#include "jerryscript.h"
        -: 3055:
        -: 3056:int
    #####: 3057:main (void)
        -: 3058:{
    #####: 3059:  jerry_init (JERRY_INIT_EMPTY);
        -: 3060:
    #####: 3061:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "12345678");
    #####: 3062:  jerry_value_t bigint_value = jerry_value_to_bigint (string_value);
        -: 3063:
    #####: 3064:  jerry_release_value (string_value);
        -: 3065:
    #####: 3066:  if (jerry_value_is_bigint (bigint_value))
        -: 3067:  {
        -: 3068:    // usage of bigint_value
        -: 3069:  }
        -: 3070:
    #####: 3071:  jerry_release_value (bigint_value);
        -: 3072:
    #####: 3073:  jerry_cleanup ();
        -: 3074:  return 0;
        -: 3075:}
        -: 3076:```
        -: 3077:
        -: 3078:**See also**
        -: 3079:
        -: 3080:- [jerry_release_value](#jerry_release_value)
        -: 3081:- [jerry_create_bigint](#jerry_create_bigint)
        -: 3082:- [jerry_value_to_bigint](#jerry_value_to_bigint)
        -: 3083:
        -: 3084:
        -: 3085:## jerry_value_is_typedarray
        -: 3086:
        -: 3087:**Summary**
        -: 3088:
        -: 3089:Checks whether the given `jerry_value_t` is a TypedArray object or not.
        -: 3090:
        -: 3091:*Notes*:
        -: 3092:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 3093:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 3094:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3095:- The es.next profile enables this by default.
        -: 3096:
        -: 3097:**Prototype**
        -: 3098:
        -: 3099:```c
        -: 3100:bool
        -: 3101:jerry_value_is_typedarray (const jerry_value_t value)
        -: 3102:```
        -: 3103:
        -: 3104:- `value` - object to check
        -: 3105:- return value
        -: 3106:  - true, if the given `jerry_value_t` is a TypedArray object.
        -: 3107:  - false, otherwise
        -: 3108:
        -: 3109:*New in version 2.0*.
        -: 3110:
        -: 3111:**Example**
        -: 3112:
        -: 3113:[doctest]: # ()
        -: 3114:
        -: 3115:```c
        -: 3116:#include "jerryscript.h"
        -: 3117:
        -: 3118:int
    #####: 3119:main (void)
        -: 3120:{
    #####: 3121:  jerry_init (JERRY_INIT_EMPTY);
        -: 3122:
    #####: 3123:  jerry_value_t value = jerry_create_typedarray (JERRY_TYPEDARRAY_UINT16, 15);
        -: 3124:
    #####: 3125:  if (jerry_value_is_typedarray (value))
        -: 3126:  {
        -: 3127:    /* "value" is a typedarray. */
        -: 3128:  }
        -: 3129:
    #####: 3130:  jerry_release_value (value);
        -: 3131:
    #####: 3132:  jerry_cleanup ();
        -: 3133:
        -: 3134:  return 0;
        -: 3135:}
        -: 3136:```
        -: 3137:
        -: 3138:**See also**
        -: 3139:
        -: 3140:- [jerry_create_typedarray](#jerry_create_typedarray)
        -: 3141:
        -: 3142:
        -: 3143:## jerry_get_container_type
        -: 3144:
        -: 3145:**Summary**
        -: 3146:
        -: 3147:Checks whether the given `jerry_value_t` is the given `jerry_container_type_t` type container object.
        -: 3148:
        -: 3149:*Notes*
        -: 3150:- This API function depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -: 3151:  runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -: 3152:  feature enum values.
        -: 3153:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3154:- The es.next profile enables this by default.
        -: 3155:
        -: 3156:**Prototype**
        -: 3157:
        -: 3158:```c
        -: 3159:jerry_container_type_t
        -: 3160:jerry_get_container_type (const jerry_value_t value)
        -: 3161:```
        -: 3162:
        -: 3163:- `value` - Container object
        -: 3164:- return value
        -: 3165:  - The corresponding enum value of `jerry_container_type_t`, or `JERRY_CONTAINER_TYPE_INVALID` if the container
        -: 3166:    was not a valid container object.
        -: 3167:
        -: 3168:*New in version 2.3*.
        -: 3169:
        -: 3170:**Example**
        -: 3171:
        -: 3172:[doctest]: # ()
        -: 3173:
        -: 3174:```c
        -: 3175:#include "jerryscript.h"
        -: 3176:int
    #####: 3177:main (void)
        -: 3178:{
    #####: 3179:  jerry_init (JERRY_INIT_EMPTY);
        -: 3180:
    #####: 3181:  jerry_value_t value = jerry_create_container (JERRY_CONTAINER_TYPE_MAP, NULL, 0);
        -: 3182:
    #####: 3183:  if (jerry_get_container_type (value) == JERRY_CONTAINER_TYPE_MAP)
        -: 3184:  {
        -: 3185:    /* "value" is a map. */
        -: 3186:  }
        -: 3187:
    #####: 3188:  jerry_release_value (value);
        -: 3189:
    #####: 3190:  jerry_cleanup ();
        -: 3191:
        -: 3192:  return 0;
        -: 3193:}
        -: 3194:```
        -: 3195:
        -: 3196:**See also**
        -: 3197:
        -: 3198:- [jerry_create_container](#jerry_create_container)
        -: 3199:- [jerry_container_type_t](#jerry_container_type_t)
        -: 3200:
        -: 3201:
        -: 3202:## jerry_value_is_undefined
        -: 3203:
        -: 3204:**Summary**
        -: 3205:
        -: 3206:Returns whether the given `jerry_value_t` is an undefined value.
        -: 3207:
        -: 3208:**Prototype**
        -: 3209:
        -: 3210:```c
        -: 3211:bool
        -: 3212:jerry_value_is_undefined (const jerry_value_t value)
        -: 3213:```
        -: 3214:
        -: 3215:- `value` - api value
        -: 3216:- return value
        -: 3217:  - true, if the given `jerry_value_t` is an undefined value
        -: 3218:  - false, otherwise
        -: 3219:
        -: 3220:**Example**
        -: 3221:
        -: 3222:```c
        -: 3223:{
        -: 3224:  jerry_value_t value;
        -: 3225:  ... // create or acquire value
        -: 3226:
        -: 3227:  if (jerry_value_is_undefined (value))
        -: 3228:  {
        -: 3229:    ...
        -: 3230:  }
        -: 3231:
        -: 3232:  jerry_release_value (value);
        -: 3233:}
        -: 3234:```
        -: 3235:
        -: 3236:**See also**
        -: 3237:
        -: 3238:- [jerry_release_value](#jerry_release_value)
        -: 3239:
        -: 3240:## jerry_value_get_type
        -: 3241:
        -: 3242:**Summary**
        -: 3243:
        -: 3244:Returns the JavaScript type
        -: 3245:for a given value as a [jerry_type_t](#jerry_type_t) enum value.
        -: 3246:
        -: 3247:This is a similar operation to the 'typeof' operator
        -: 3248:in the standard with an exception that the 'null'
        -: 3249:value has its own enum value.
        -: 3250:
        -: 3251:**Prototype**
        -: 3252:
        -: 3253:```c
        -: 3254:jerry_type_t
        -: 3255:jerry_value_get_type (const jerry_value_t value);
        -: 3256:```
        -: 3257:
        -: 3258:- `value` - JavaScript value to check.
        -: 3259:- return value
        -: 3260:  - One of the [jerry_type_t](#jerry_type_t) value.
        -: 3261:
        -: 3262:*New in version 2.0*.
        -: 3263:
        -: 3264:**Example**
        -: 3265:
        -: 3266:```c
        -: 3267:{
        -: 3268:  jerry_value_t number = jerry_create_number (3.3);
        -: 3269:
        -: 3270:  jerry_type_t type_info = jerry_value_get_type (number);
        -: 3271:
        -: 3272:  if (type_info == JERRY_TYPE_NUMBER)
        -: 3273:  {
        -: 3274:    /* ... */
        -: 3275:  }
        -: 3276:
        -: 3277:  jerry_release_value (number);
        -: 3278:}
        -: 3279:```
        -: 3280:
        -: 3281:**See also**
        -: 3282:
        -: 3283:- [jerry_type_t](#jerry_type_t)
        -: 3284:
        -: 3285:## jerry_object_get_type
        -: 3286:
        -: 3287:**Summary**
        -: 3288:
        -: 3289:Returns the **object** type
        -: 3290:for a given value as a [jerry_object_type_t](#jerry_object_type_t) enum value.
        -: 3291:
        -: 3292:Note: For non-object parameters `JERRY_OBJECT_TYPE_NONE` is returned.
        -: 3293:Note: the returned type can be checked for more detailed type information in the following cases:
        -: 3294:  - `JERRY_OBJECT_TYPE_CONTAINER`, *see also:* [jerry_container_get_type](#jerry_container_get_type)
        -: 3295:  - `JERRY_OBJECT_TYPE_FUNCTION`, *see also:* [jerry_function_get_type](#jerry_function_get_type)
        -: 3296:  - `JERRY_OBJECT_TYPE_ITERATOR`, *see also:* [jerry_iterator_get_type](#jerry_iterator_get_type)
        -: 3297:  - `JERRY_OBJECT_TYPE_TYPEDARRAY`, *see also:* [jerry_get_typedarray_type](#jerry_get_typedarray_type)
        -: 3298:
        -: 3299:**Prototype**
        -: 3300:
        -: 3301:```c
        -: 3302:jerry_object_type_t
        -: 3303:jerry_object_get_type (const jerry_value_t value);
        -: 3304:```
        -: 3305:
        -: 3306:- `value` - JavaScript value to check.
        -: 3307:- return value
        -: 3308:  - One of the [jerry_object_type_t](#jerry_object_type_t) value.
        -: 3309:
        -: 3310:*New in version 2.4*.
        -: 3311:
        -: 3312:**Example**
        -: 3313:
        -: 3314:```c
        -: 3315:{
        -: 3316:  jerry_value_t object = jerry_create_object ();
        -: 3317:
        -: 3318:  jerry_object_type_t object_type_info = jerry_object_get_type (object);
        -: 3319:
        -: 3320:  if (type_info == JERRY_OBJECT_TYPE_GENERIC)
        -: 3321:  {
        -: 3322:    /* ... */
        -: 3323:  }
        -: 3324:
        -: 3325:  jerry_release_value (object);
        -: 3326:}
        -: 3327:```
        -: 3328:
        -: 3329:**See also**
        -: 3330:
        -: 3331:- [jerry_object_type_t](#jerry_object_type_t)
        -: 3332:
        -: 3333:## jerry_function_get_type
        -: 3334:
        -: 3335:**Summary**
        -: 3336:
        -: 3337:Returns the **function** type
        -: 3338:for a given value as a [jerry_function_type_t](#jerry_function_type_t) enum value.
        -: 3339:
        -: 3340:**Prototype**
        -: 3341:
        -: 3342:```c
        -: 3343:jerry_function_type_t
        -: 3344:jerry_function_get_type (const jerry_value_t value);
        -: 3345:```
        -: 3346:
        -: 3347:- `value` - JavaScript value to check.
        -: 3348:- return value
        -: 3349:  - One of the [jerry_function_type_t](#jerry_function_type_t) value.
        -: 3350:
        -: 3351:Note: For non-function parameters `JERRY_FUNCTION_TYPE_NONE` is returned.
        -: 3352:
        -: 3353:*New in version 2.4*.
        -: 3354:
        -: 3355:**Example**
        -: 3356:
        -: 3357:```c
        -: 3358:{
        -: 3359:  const jerry_char_t script[] = "function f() {}; f";
        -: 3360:  jerry_value_t function_object = jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
        -: 3361:
        -: 3362:  jerry_function_type_t function_type_info = jerry_function_get_type (function_object);
        -: 3363:
        -: 3364:  if (type_info == JERRY_FUNCTION_TYPE_GENERIC)
        -: 3365:  {
        -: 3366:    /* ... */
        -: 3367:  }
        -: 3368:
        -: 3369:  jerry_release_value (function_object);
        -: 3370:}
        -: 3371:```
        -: 3372:
        -: 3373:**See also**
        -: 3374:
        -: 3375:- [jerry_function_type_t](#jerry_function_type_t)
        -: 3376:
        -: 3377:## jerry_iterator_get_type
        -: 3378:
        -: 3379:**Summary**
        -: 3380:
        -: 3381:Returns the **iterator** type
        -: 3382:for a given value as a [jerry_iterator_type_t](#jerry_iterator_type_t) enum value.
        -: 3383:
        -: 3384:**Prototype**
        -: 3385:
        -: 3386:```c
        -: 3387:jerry_iterator_type_t
        -: 3388:jerry_iterator_get_type (const jerry_value_t value);
        -: 3389:```
        -: 3390:
        -: 3391:- `value` - JavaScript value to check.
        -: 3392:- return value
        -: 3393:  - One of the [jerry_iterator_type_t](#jerry_iterator_type_t) value.
        -: 3394:
        -: 3395:Note: For non-iterator parameters `JERRY_ITERATOR_TYPE_NONE` is returned.
        -: 3396:
        -: 3397:*New in version 2.4*.
        -: 3398:
        -: 3399:**Example**
        -: 3400:
        -: 3401:```c
        -: 3402:{
        -: 3403:  const jerry_char_t script[] = "[1, 2, 3].values()";
        -: 3404:  jerry_value_t iterator = jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
        -: 3405:
        -: 3406:  jerry_iterator_type_t iterator_type_info = jerry_iterator_get_type (iterator);
        -: 3407:
        -: 3408:  if (type_info == JERRY_ITERATOR_TYPE_ARRAY)
        -: 3409:  {
        -: 3410:    /* ... */
        -: 3411:  }
        -: 3412:
        -: 3413:  jerry_release_value (iterator);
        -: 3414:}
        -: 3415:```
        -: 3416:
        -: 3417:**See also**
        -: 3418:
        -: 3419:- [jerry_iterator_type_t](#jerry_iterator_type_t)
        -: 3420:
        -: 3421:## jerry_is_feature_enabled
        -: 3422:
        -: 3423:**Summary**
        -: 3424:
        -: 3425:Returns whether the specified compile time feature is enabled.
        -: 3426:
        -: 3427:**Prototype**
        -: 3428:
        -: 3429:```c
        -: 3430:bool
        -: 3431:jerry_is_feature_enabled (const jerry_feature_t feature);
        -: 3432:```
        -: 3433:
        -: 3434:- `feature` - jerry feature
        -: 3435:- return value
        -: 3436:  - true, if the given `jerry_feature_t` is enabled
        -: 3437:  - false, otherwise
        -: 3438:
        -: 3439:*New in version 2.0*.
        -: 3440:
        -: 3441:**Example**
        -: 3442:
        -: 3443:```c
        -: 3444:{
        -: 3445:  /* ... */
        -: 3446:  jerry_feature_t feature = JERRY_FEATURE_SNAPSHOT_SAVE;
        -: 3447:
        -: 3448:  if (jerry_is_feature_enabled (feature))
        -: 3449:  {
        -: 3450:    /* ... */
        -: 3451:  }
        -: 3452:
        -: 3453:}
        -: 3454:```
        -: 3455:
        -: 3456:**See also**
        -: 3457:
        -: 3458:- [jerry_feature_t](#jerry_feature_t)
        -: 3459:
        -: 3460:
        -: 3461:# Binary operations
        -: 3462:
        -: 3463:## jerry_binary_operation
        -: 3464:
        -: 3465:**Summary**
        -: 3466:
        -: 3467:Perform binary operation on the given operands (==, ===, <, >, etc.).
        -: 3468:
        -: 3469:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3470:is no longer needed.
        -: 3471:
        -: 3472:**Prototype**
        -: 3473:
        -: 3474:```c
        -: 3475:jerry_value_t
        -: 3476:jerry_binary_operation (jerry_binary_operation_t op,
        -: 3477:                        const jerry_value_t lhs,
        -: 3478:                        const jerry_value_t rhs);
        -: 3479:```
        -: 3480:
        -: 3481:- `op` - binary operation
        -: 3482:- `lhs` - left-hand side operand
        -: 3483:- `rhs` - right-hand side operand
        -: 3484:- return value
        -: 3485:  - error, if argument has an error flag or operation is unsuccessful or unsupported
        -: 3486:  - true/false, the result of the binary operation on the given operands otherwise
        -: 3487:
        -: 3488:*New in version 2.0*.
        -: 3489:
        -: 3490:**Example - JERRY_BIN_OP_EQUAL**
        -: 3491:
        -: 3492:```c
        -: 3493:{
        -: 3494:  jerry_value_t value1;
        -: 3495:  jerry_value_t value2;
        -: 3496:  ... // create or acquire value
        -: 3497:  jerry_value_t result = jerry_binary_operation (JERRY_BIN_OP_EQUAL, value1, value2)
        -: 3498:
        -: 3499:  if (!jerry_value_is_error (result))
        -: 3500:  {
        -: 3501:    if (jerry_value_is_true (result))
        -: 3502:    {
        -: 3503:       // value1 and value2 are equal
        -: 3504:    }
        -: 3505:    else
        -: 3506:    {
        -: 3507:      // value1 and value2 are NOT equal
        -: 3508:    }
        -: 3509:  }
        -: 3510:  else
        -: 3511:  {
        -: 3512:    ... // handle error
        -: 3513:  }
        -: 3514:
        -: 3515:  jerry_release_value (value1);
        -: 3516:  jerry_release_value (value2);
        -: 3517:  jerry_release_value (result);
        -: 3518:}
        -: 3519:```
        -: 3520:
        -: 3521:**Example - JERRY_BIN_OP_INSTANCEOF**
        -: 3522:
        -: 3523:[doctest]: # ()
        -: 3524:
        -: 3525:```c
        -: 3526:#include "jerryscript.h"
        -: 3527:
        -: 3528:static jerry_value_t
    #####: 3529:my_constructor (const jerry_call_info_t *call_info_p,
        -: 3530:                const jerry_value_t argv[],
        -: 3531:                const jerry_length_t argc)
        -: 3532:{
    #####: 3533:  return jerry_create_undefined ();
        -: 3534:}
        -: 3535:
        -: 3536:int
    #####: 3537:main (void)
        -: 3538:{
    #####: 3539:  jerry_init (JERRY_INIT_EMPTY);
        -: 3540:
    #####: 3541:  jerry_value_t base_obj = jerry_create_object ();
    #####: 3542:  jerry_value_t constructor = jerry_create_external_function (my_constructor);
        -: 3543:
        -: 3544:  /* External functions does not have a prototype by default, so we need to create one */
    #####: 3545:  jerry_value_t prototype_str = jerry_create_string ((const jerry_char_t *) ("prototype"));
    #####: 3546:  jerry_release_value (jerry_set_property (constructor, prototype_str, base_obj));
    #####: 3547:  jerry_release_value (prototype_str);
        -: 3548:
        -: 3549:  /* Construct the instance. */
    #####: 3550:  jerry_value_t instance_val = jerry_construct_object (constructor, NULL, 0);
        -: 3551:
        -: 3552:  /* Call the API function of 'instanceof'. */
    #####: 3553:  jerry_value_t is_instance = jerry_binary_operation (JERRY_BIN_OP_INSTANCEOF,
        -: 3554:                                                      instance_val,
        -: 3555:                                                      constructor);
    #####: 3556:  if (!jerry_value_is_error (is_instance)
    #####: 3557:      && jerry_value_is_true (is_instance))
        -: 3558:  {
        -: 3559:    /* ... */
        -: 3560:  }
        -: 3561:
        -: 3562:  /* Free all of the jerry values and cleanup the engine. */
    #####: 3563:  jerry_release_value (base_obj);
    #####: 3564:  jerry_release_value (constructor);
    #####: 3565:  jerry_release_value (instance_val);
    #####: 3566:  jerry_release_value (is_instance);
        -: 3567:
    #####: 3568:  jerry_cleanup ();
        -: 3569:  return 0;
        -: 3570:}
        -: 3571:```
        -: 3572:
        -: 3573:**See also**
        -: 3574:
        -: 3575:- [jerry_binary_operation_t](#jerry_binary_operation_t)
        -: 3576:
        -: 3577:
        -: 3578:# Error manipulation functions
        -: 3579:
        -: 3580:*Changed in version 2.0*: The error handling and manipulation was modified and the old methods were replaced.
        -: 3581:
        -: 3582:## jerry_create_abort_from_value
        -: 3583:
        -: 3584:**Summary**
        -: 3585:
        -: 3586:Create (api) abort from a value.
        -: 3587:
        -: 3588:This function creates an API abort value from an API value. The second argument defines
        -: 3589:whether the input value must be released or not. If it is set to `true`,
        -: 3590:then a [`jerry_release_value`](#jerry_release_value) function will be called
        -: 3591:for the first argument, so the api value won't be available after the call of
        -: 3592:`jerry_create_abort_from_value`. The second argument should be false if both value
        -: 3593:and created abort value are needed.
        -: 3594:
        -: 3595:**Prototype**
        -: 3596:
        -: 3597:```c
        -: 3598:jerry_value_t
        -: 3599:jerry_create_abort_from_value (jerry_value_t value, bool release);
        -: 3600:```
        -: 3601:
        -: 3602:- `value` - api value
        -: 3603:- `release` - raw boolean, defines whether input value must be released
        -: 3604:- return value - abort (api) value
        -: 3605:
        -: 3606:*New in version 2.0*.
        -: 3607:
        -: 3608:**Example 1**
        -: 3609:
        -: 3610:```c
        -: 3611:{
        -: 3612:  jerry_value_t value;
        -: 3613:  ... // create or acquire value
        -: 3614:
        -: 3615:  jerry_value_t abort = jerry_create_abort_from_value (value, true);
        -: 3616:  // using the 'value' variable after release is invalid.
        -: 3617:
        -: 3618:  jerry_release_value (abort);
        -: 3619:}
        -: 3620:```
        -: 3621:
        -: 3622:**Example 2**
        -: 3623:
        -: 3624:```c
        -: 3625:{
        -: 3626:  jerry_value_t value;
        -: 3627:  ... // create or acquire value
        -: 3628:
        -: 3629:  jerry_value_t abort = jerry_create_abort_from_value (value, false);
        -: 3630:  // both 'abort' and 'value' can be used and must be released when they are no longer needed
        -: 3631:
        -: 3632:  jerry_release_value (abort);
        -: 3633:  jerry_release_value (value);
        -: 3634:}
        -: 3635:```
        -: 3636:
        -: 3637:**See also**
        -: 3638:
        -: 3639:- [jerry_value_t](#jerry_value_t)
        -: 3640:- [jerry_get_value_from_error](#jerry_get_value_from_error)
        -: 3641:- [jerry_create_error_from_value](#jerry_create_error_from_value)
        -: 3642:
        -: 3643:## jerry_create_error_from_value
        -: 3644:
        -: 3645:**Summary**
        -: 3646:
        -: 3647:Create (api) error from a value.
        -: 3648:
        -: 3649:This function creates an API error value from an API value. The second argument defines
        -: 3650:whether the input value must be released or not. If it is set to `true`,
        -: 3651:then a [`jerry_release_value`](#jerry_release_value) function will be called
        -: 3652:for the first argument, so the api value won't be available after the call of
        -: 3653:`jerry_create_error_from_value`. The second argument should be false if both value
        -: 3654:and created error value are needed.
        -: 3655:
        -: 3656:**Prototype**
        -: 3657:
        -: 3658:```c
        -: 3659:jerry_value_t
        -: 3660:jerry_create_error_from_value (jerry_value_t value, bool release);
        -: 3661:```
        -: 3662:
        -: 3663:- `value` - api value
        -: 3664:- `release` - raw boolean, defines whether input value must be released
        -: 3665:- return value - error (api) value
        -: 3666:
        -: 3667:*New in version 2.0*.
        -: 3668:
        -: 3669:**Example 1**
        -: 3670:
        -: 3671:```c
        -: 3672:{
        -: 3673:  jerry_value_t value;
        -: 3674:  ... // create or acquire value
        -: 3675:
        -: 3676:  jerry_value_t error = jerry_create_error_from_value (value, true);
        -: 3677:  // using the 'value' variable after release is invalid.
        -: 3678:
        -: 3679:
        -: 3680:  jerry_release_value (error);
        -: 3681:}
        -: 3682:```
        -: 3683:
        -: 3684:**Example 2**
        -: 3685:
        -: 3686:```c
        -: 3687:{
        -: 3688:  jerry_value_t value;
        -: 3689:  ... // create or acquire value
        -: 3690:
        -: 3691:  jerry_value_t error = jerry_create_error_from_value (value, false);
        -: 3692:  // both 'error' and 'value' can be used and must be released when they are no longer needed
        -: 3693:
        -: 3694:  jerry_release_value (error);
        -: 3695:  jerry_release_value (value);
        -: 3696:}
        -: 3697:```
        -: 3698:
        -: 3699:**See also**
        -: 3700:
        -: 3701:- [jerry_value_t](#jerry_value_t)
        -: 3702:- [jerry_get_value_from_error](#jerry_get_value_from_error)
        -: 3703:- [jerry_create_abort_from_value](#jerry_create_abort_from_value)
        -: 3704:
        -: 3705:## jerry_get_error_type
        -: 3706:
        -: 3707:**Summary**
        -: 3708:
        -: 3709:Returns the type of the Error object if possible.
        -: 3710:
        -: 3711:If a non-error object is used as the input for the function the method
        -: 3712:will return `JERRY_ERROR_NONE` indicating that the value was not
        -: 3713:an Error object. However it is still possible that the value contains
        -: 3714:error semantics. To correctly detect if a value have error use the
        -: 3715:[jerry_value_is_error](#jerry_value_is_error) method.
        -: 3716:
        -: 3717:**Prototype**
        -: 3718:
        -: 3719:```c
        -: 3720:jerry_error_t
        -: 3721:jerry_get_error_type (const jerry_value_t value);
        -: 3722:```
        -: 3723:
        -: 3724:- `value` - api value (possible error object)
        -: 3725:- return value
        -: 3726:  - JERRY_ERROR_NONE if the input is not an error object
        -: 3727:  - one of the [jerry_error_t](#jerry_error_t) value
        -: 3728:
        -: 3729:*New in version 2.0*.
        -: 3730:
        -: 3731:**Example**
        -: 3732:
        -: 3733:```c
        -: 3734:{
        -: 3735:  jerry_value_t error_obj = jerry_create_error (JERRY_ERROR_RANGE,
        -: 3736:                                                (const jerry_char_t *) "error msg");
        -: 3737:  jerry_error_t error_type = jerry_get_error_type (error_obj);
        -: 3738:
        -: 3739:  // error_type is now JERRY_ERROR_RANGE.
        -: 3740:
        -: 3741:  jerry_release_value (error_obj);
        -: 3742:}
        -: 3743:```
        -: 3744:
        -: 3745:**See also**
        -: 3746:
        -: 3747:- [jerry_create_error](#jerry_create_error)
        -: 3748:- [jerry_value_is_error](#jerry_value_is_error)
        -: 3749:
        -: 3750:## jerry_get_value_from_error
        -: 3751:
        -: 3752:**Summary**
        -: 3753:
        -: 3754:Get the value from an error.
        -: 3755:
        -: 3756:Many API functions cannot be called with an error value.
        -: 3757:This function extracts the API value from an error. The second argument defines
        -: 3758:whether the input error value must be released or not. If it is set to `true`,
        -: 3759:then a [`jerry_release_value`](#jerry_release_value) function will be called
        -: 3760:for the first argument, so the error value won't be available after the call of
        -: 3761:`jerry_get_value_from_error`. The second argument should be false if both error
        -: 3762:and its represented value are needed.
        -: 3763:
        -: 3764:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3765:is no longer needed.
        -: 3766:
        -: 3767:**Prototype**
        -: 3768:
        -: 3769:```c
        -: 3770:jerry_value_t
        -: 3771:jerry_get_value_from_error (jerry_value_t value, bool release)
        -: 3772:```
        -: 3773:
        -: 3774:- `value` - error (api) value
        -: 3775:- `release` - raw boolean, defines whether input value must be released
        -: 3776:- return value - api value
        -: 3777:
        -: 3778:*New in version 2.0*.
        -: 3779:
        -: 3780:**Example 1**
        -: 3781:
        -: 3782:```c
        -: 3783:{
        -: 3784:  jerry_value_t value;
        -: 3785:  ... // create or acquire value
        -: 3786:
        -: 3787:  jerry_value_t error = jerry_create_error_from_value (value, true);
        -: 3788:  jerry_value_t value_from_error = jerry_get_value_from_error (error, true);
        -: 3789:  // using the 'error' variable after release is invalid.
        -: 3790:
        -: 3791:  jerry_release_value (value_from_error);
        -: 3792:}
        -: 3793:```
        -: 3794:
        -: 3795:**Example 2**
        -: 3796:
        -: 3797:```c
        -: 3798:{
        -: 3799:  jerry_value_t value;
        -: 3800:  ... // create or acquire value
        -: 3801:
        -: 3802:  jerry_value_t error = jerry_create_error_from_value (value, true);
        -: 3803:  jerry_value_t value_from_error = jerry_get_value_from_error (error, false);
        -: 3804:  // both 'error' and 'value_from_error' can be used and must be released when they are no longer needed
        -: 3805:
        -: 3806:  jerry_release_value (value_from_error);
        -: 3807:  jerry_release_value (error);
        -: 3808:}
        -: 3809:```
        -: 3810:
        -: 3811:**See also**
        -: 3812:
        -: 3813:- [jerry_value_t](#jerry_value_t)
        -: 3814:- [jerry_create_error_from_value](#jerry_create_error_from_value)
        -: 3815:- [jerry_create_abort_from_value](#jerry_create_abort_from_value)
        -: 3816:
        -: 3817:## jerry_set_error_object_created_callback
        -: 3818:
        -: 3819:**Summary**
        -: 3820:
        -: 3821:Set the decorator callback for newly created Error objects. The operation of the callback
        -: 3822:is described in [jerry_error_object_created_callback_t](#jerry_error_object_created_callback_t).
        -: 3823:
        -: 3824:**Prototype**
        -: 3825:
        -: 3826:```c
        -: 3827:void jerry_set_error_object_created_callback (jerry_error_object_created_callback_t callback, void *user_p);
        -: 3828:```
        -: 3829:
        -: 3830:- `callback` - callback function, the previously set value is overwritten, and setting NULL
        -: 3831:               disables the operation
        -: 3832:- `user_p` - pointer passed to the callback function, can be NULL
        -: 3833:
        -: 3834:*New in version 2.4*.
        -: 3835:
        -: 3836:**Example**
        -: 3837:
        -: 3838:```c
        -: 3839:static void
        -: 3840:error_object_created_callback (const jerry_value_t error_object) /**< new error object */
        -: 3841:                               void *user_p) /**< user pointer */
        -: 3842:{
        -: 3843:  (void) error_object;
        -: 3844:  (void) user_p;
        -: 3845:  printf ("Notification: a new error is created\n");
        -: 3846:} /* error_object_created_callback */
        -: 3847:
        -: 3848:void main(void)
        -: 3849:{
        -: 3850:  jerry_init (JERRY_INIT_EMPTY);
        -: 3851:
        -: 3852:  jerry_set_error_object_created_callback (error_object_created_callback, NULL);
        -: 3853:
        -: 3854:  jerry_release_value (jerry_create_error (JERRY_ERROR_COMMON,
        -: 3855:                                           (const jerry_char_t *) "Message"));
        -: 3856:
        -: 3857:  jerry_cleanup ();
        -: 3858:} /* main */
        -: 3859:```
        -: 3860:
        -: 3861:**See also**
        -: 3862:
        -: 3863:- [jerry_error_object_created_callback_t](#jerry_error_object_created_callback_t)
        -: 3864:
        -: 3865:# Getter functions of 'jerry_value_t'
        -: 3866:
        -: 3867:Get raw data from API values.
        -: 3868:
        -: 3869:## jerry_get_number_value
        -: 3870:
        -: 3871:**Summary**
        -: 3872:
        -: 3873:Gets the number value of the given `jerry_value_t` parameter as a raw double.
        -: 3874:
        -: 3875:If the argument passed is not a number `0.0` will be returned.
        -: 3876:
        -: 3877:**Prototype**
        -: 3878:
        -: 3879:```c
        -: 3880:double
        -: 3881:jerry_get_number_value (const jerry_value_t value);
        -: 3882:```
        -: 3883:
        -: 3884:- `value` - api value
        -: 3885:- return value
        -: 3886:  - the number value of the given `jerry_value_t` parameter as a raw double.
        -: 3887:  - `0.0` if the api value passed is not a number.
        -: 3888:
        -: 3889:**Example**
        -: 3890:
        -: 3891:```c
        -: 3892:{
        -: 3893:  jerry_value_t value;
        -: 3894:  ... // create or acquire value
        -: 3895:
        -: 3896:  if (jerry_value_is_number (value))
        -: 3897:  {
        -: 3898:    double raw_value = jerry_get_number_value (value);
        -: 3899:
        -: 3900:    ... // usage of raw value
        -: 3901:
        -: 3902:  }
        -: 3903:
        -: 3904:  jerry_release_value (value);
        -: 3905:}
        -: 3906:```
        -: 3907:
        -: 3908:**See also**
        -: 3909:
        -: 3910:- [jerry_value_is_number](#jerry_value_is_number)
        -: 3911:- [jerry_release_value](#jerry_release_value)
        -: 3912:
        -: 3913:
        -: 3914:# Functions for string values
        -: 3915:
        -: 3916:## jerry_get_string_size
        -: 3917:
        -: 3918:**Summary**
        -: 3919:
        -: 3920:Get the size of a string. Returns zero, if the value parameter is not a string.
        -: 3921:This is effectively the number of bytes required to store the string's characters.
        -: 3922:
        -: 3923:**Prototype**
        -: 3924:
        -: 3925:```c
        -: 3926:jerry_size_t
        -: 3927:jerry_get_string_size (const jerry_value_t value);
        -: 3928:```
        -: 3929:- `value` - api value
        -: 3930:- return value - number of bytes in the buffer needed to represent the string.
        -: 3931:
        -: 3932:**Example**
        -: 3933:
        -: 3934:```c
        -: 3935:{
        -: 3936:  const jerry_char_t char_array[] = "a string";
        -: 3937:  jerry_value_t string = jerry_create_string (char_array);
        -: 3938:
        -: 3939:  jerry_size_t string_size = jerry_get_string_size (string);
        -: 3940:
        -: 3941:  ... // usage of string_size
        -: 3942:
        -: 3943:  jerry_release_value (string);
        -: 3944:}
        -: 3945:```
        -: 3946:
        -: 3947:**See also**
        -: 3948:
        -: 3949:- [jerry_create_string](#jerry_create_string)
        -: 3950:- [jerry_get_string_length](#jerry_get_string_length)
        -: 3951:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 3952:
        -: 3953:
        -: 3954:## jerry_get_utf8_string_size
        -: 3955:
        -: 3956:**Summary**
        -: 3957:
        -: 3958:Get the size of an utf8-encoded string. Returns zero, if the value parameter is not a string.
        -: 3959:This is effectively the number of bytes required to store the utf8 encoded string's characters.
        -: 3960:
        -: 3961:*Note*: The difference from [jerry_get_string_size](#jerry_get_string_size) is that it returns with utf-8 string size
        -: 3962:instead of the cesu-8 string size.
        -: 3963:
        -: 3964:**Prototype**
        -: 3965:
        -: 3966:```c
        -: 3967:jerry_size_t
        -: 3968:jerry_get_utf8_string_size (const jerry_value_t value);
        -: 3969:```
        -: 3970:- `value` - api value
        -: 3971:- return value - number of bytes in the buffer needed to represent the utf8-encoded string.
        -: 3972:
        -: 3973:*New in version 2.0*.
        -: 3974:
        -: 3975:**Example**
        -: 3976:
        -: 3977:```c
        -: 3978:{
        -: 3979:  const jerry_char_t char_array[] = "a string";
        -: 3980:  jerry_value_t string = jerry_create_string (char_array);
        -: 3981:
        -: 3982:  jerry_size_t string_size = jerry_get_utf8_string_size (string);
        -: 3983:
        -: 3984:  ... // usage of string_size
        -: 3985:
        -: 3986:  jerry_release_value (string);
        -: 3987:}
        -: 3988:```
        -: 3989:
        -: 3990:**See also**
        -: 3991:
        -: 3992:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 3993:- [jerry_get_utf8_string_length](#jerry_get_utf8_string_length)
        -: 3994:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 3995:
        -: 3996:
        -: 3997:## jerry_get_string_length
        -: 3998:
        -: 3999:**Summary**
        -: 4000:
        -: 4001:Get the length of a string. Returns zero, if the value parameter is not a string.
        -: 4002:
        -: 4003:*Notes:*
        -: 4004:- The difference from [jerry_get_string_size](#jerry_get_string_size) is that it
        -: 4005:  returns the number of bytes used for the string.
        -: 4006:- This is **not** the number of bytes required to store the string.
        -: 4007:
        -: 4008:**Prototype**
        -: 4009:
        -: 4010:```c
        -: 4011:jerry_length_t
        -: 4012:jerry_get_string_length (const jerry_value_t value);
        -: 4013:```
        -: 4014:
        -: 4015:- `value` - api value
        -: 4016:- return value - number of characters in the string
        -: 4017:
        -: 4018:**Example**
        -: 4019:
        -: 4020:```c
        -: 4021:{
        -: 4022:  const jerry_char_t char_array[] = "a string";
        -: 4023:  jerry_value_t string = jerry_create_string (char_array);
        -: 4024:
        -: 4025:  jerry_length_t string_length = jerry_get_string_length (string);
        -: 4026:
        -: 4027:  ... // usage of string_length
        -: 4028:
        -: 4029:  jerry_release_value (string);
        -: 4030:}
        -: 4031:```
        -: 4032:
        -: 4033:**See also**
        -: 4034:
        -: 4035:- [jerry_create_string](#jerry_create_string)
        -: 4036:- [jerry_get_string_size](#jerry_get_string_size)
        -: 4037:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 4038:
        -: 4039:
        -: 4040:## jerry_get_utf8_string_length
        -: 4041:
        -: 4042:**Summary**
        -: 4043:
        -: 4044:Get the length of an UTF-8 encoded string. Returns zero, if the value parameter is not a string.
        -: 4045:
        -: 4046:*Notes*:
        -: 4047:- The difference from [jerry_get_string_length](#jerry_get_string_length) is that it
        -: 4048:  returns with utf-8 string length instead of the cesu-8 string length.
        -: 4049:- This is **not** the number of bytes required to store the string.
        -: 4050:
        -: 4051:**Prototype**
        -: 4052:
        -: 4053:```c
        -: 4054:jerry_length_t
        -: 4055:jerry_get_utf8_string_length (const jerry_value_t value);
        -: 4056:```
        -: 4057:
        -: 4058:- `value` - input string value
        -: 4059:- return value - number of characters in the string
        -: 4060:
        -: 4061:*New in version 2.0*.
        -: 4062:
        -: 4063:**Example**
        -: 4064:
        -: 4065:```c
        -: 4066:{
        -: 4067:  const jerry_char_t char_array[] = "a string";
        -: 4068:  jerry_value_t string = jerry_create_string_from_utf8 (char_array);
        -: 4069:
        -: 4070:  jerry_length_t string_length = jerry_get_utf8_string_length (string);
        -: 4071:
        -: 4072:  ... // usage of string_length
        -: 4073:
        -: 4074:  jerry_release_value (string);
        -: 4075:}
        -: 4076:```
        -: 4077:
        -: 4078:**See also**
        -: 4079:
        -: 4080:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 4081:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -: 4082:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 4083:
        -: 4084:
        -: 4085:## jerry_string_to_char_buffer
        -: 4086:
        -: 4087:**Summary**
        -: 4088:
        -: 4089:Copy the characters of a string into a specified cesu-8 buffer.
        -: 4090:The '\0' character could occur in the character buffer. Returns 0,
        -: 4091:if the value parameter is not a string or the buffer is not large
        -: 4092:enough for the whole string.
        -: 4093:
        -: 4094:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 4095:the number of valid bytes in the output buffer.
        -: 4096:
        -: 4097:*Note*: If the size of the string in jerry value is larger than the size of the
        -: 4098:target buffer, the copy will fail. To copy a substring the
        -: 4099:[jerry_substring_to_char_buffer](#jerry_substring_to_char_buffer) API function
        -: 4100:is recommended instead.
        -: 4101:
        -: 4102:
        -: 4103:**Prototype**
        -: 4104:
        -: 4105:```c
        -: 4106:jerry_size_t
        -: 4107:jerry_string_to_char_buffer (const jerry_value_t value,
        -: 4108:                             jerry_char_t *buffer_p,
        -: 4109:                             jerry_size_t buffer_size);
        -: 4110:```
        -: 4111:
        -: 4112:- `value` - input string value
        -: 4113:- `buffer_p` - pointer to output buffer
        -: 4114:- `buffer_size` - size of the buffer
        -: 4115:- return value - number of bytes, actually copied to the buffer
        -: 4116:
        -: 4117:**Example**
        -: 4118:
        -: 4119:[doctest]: # ()
        -: 4120:
        -: 4121:```c
        -: 4122:#include <stdio.h>
        -: 4123:#include <stdlib.h>
        -: 4124:#include "jerryscript.h"
        -: 4125:
        -: 4126:int
    #####: 4127:main (void)
        -: 4128:{
    #####: 4129:  jerry_init (JERRY_INIT_EMPTY);
        -: 4130:
        -: 4131:  jerry_value_t value;
        -: 4132:  // create or acquire value
    #####: 4133:  value = jerry_create_string ((const jerry_char_t *) "Demo string");
        -: 4134:
        -: 4135:  // Read the string into a byte buffer.
    #####: 4136:  jerry_size_t string_size = jerry_get_string_size (value);
    #####: 4137:  jerry_char_t *string_buffer_p = (jerry_char_t *) malloc (sizeof (jerry_char_t) * (string_size + 1));
        -: 4138:
    #####: 4139:  jerry_size_t copied_bytes = jerry_string_to_char_buffer (value, string_buffer_p, string_size);
    #####: 4140:  string_buffer_p[copied_bytes] = '\0';
        -: 4141:
    #####: 4142:  jerry_release_value (value);
        -: 4143:
    #####: 4144:  jerry_cleanup ();
        -: 4145:
    #####: 4146:  printf ("Test string: %s\n", string_buffer_p);
    #####: 4147:  free (string_buffer_p);
        -: 4148:
        -: 4149:  return 0;
        -: 4150:}
        -: 4151:```
        -: 4152:
        -: 4153:**See also**
        -: 4154:
        -: 4155:- [jerry_create_string](#jerry_create_string)
        -: 4156:- [jerry_get_string_size](#jerry_get_string_size)
        -: 4157:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 4158:- [jerry_substring_to_char_buffer](#jerry_substring_to_char_buffer)
        -: 4159:
        -: 4160:
        -: 4161:## jerry_string_to_utf8_char_buffer
        -: 4162:
        -: 4163:**Summary**
        -: 4164:
        -: 4165:Copy the characters of a string into a specified utf-8 buffer.
        -: 4166:The '\0' character could occur in character buffer. Returns 0,
        -: 4167:if the value parameter is not a string or the buffer is not
        -: 4168:large enough for the whole string.
        -: 4169:
        -: 4170:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 4171:the number of valid bytes in the output buffer.
        -: 4172:
        -: 4173:*Note*: If the size of the string in jerry value is larger than the size of the
        -: 4174:target buffer, the copy will fail. To copy a substring the
        -: 4175:[jerry_substring_to_utf8_char_buffer](#jerry_substring_to_utf8_char_buffer)
        -: 4176:API function is recommended instead.
        -: 4177:
        -: 4178:**Prototype**
        -: 4179:
        -: 4180:```c
        -: 4181:jerry_size_t
        -: 4182:jerry_string_to_utf8_char_buffer (const jerry_value_t value,
        -: 4183:                                  jerry_char_t *buffer_p,
        -: 4184:                                  jerry_size_t buffer_size);
        -: 4185:```
        -: 4186:
        -: 4187:- `value` - input string value
        -: 4188:- `buffer_p` - pointer to output buffer
        -: 4189:- `buffer_size` - size of the buffer
        -: 4190:- return value - number of bytes, actually copied to the buffer
        -: 4191:
        -: 4192:*New in version 2.0*.
        -: 4193:
        -: 4194:**Example**
        -: 4195:
        -: 4196:```c
        -: 4197:{
        -: 4198:  jerry_value_t value;
        -: 4199:  ... // create or acquire value
        -: 4200:
        -: 4201:  jerry_size_t req_sz = jerry_get_utf8_string_size (value);
        -: 4202:  jerry_char_t str_buf_p[req_sz];
        -: 4203:
        -: 4204:  jerry_size_t bytes_copied = jerry_string_to_utf8_char_buffer (value, str_buf_p, req_sz);
        -: 4205:
        -: 4206:  jerry_release_value (value);
        -: 4207:}
        -: 4208:```
        -: 4209:
        -: 4210:**See also**
        -: 4211:
        -: 4212:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 4213:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -: 4214:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 4215:- [jerry_substring_to_utf8_char_buffer](#jerry_substring_to_utf8_char_buffer)
        -: 4216:
        -: 4217:
        -: 4218:## jerry_substring_to_char_buffer
        -: 4219:
        -: 4220:**Summary**
        -: 4221:
        -: 4222:Copy the characters of a cesu-8 encoded substring into a specified buffer.
        -: 4223:The '\0' character could occur in character buffer. Returns 0, if the value
        -: 4224:parameter is not a string. It will extract the substring between the
        -: 4225:specified start position and the end position (or the end of the string,
        -: 4226:whichever comes first).
        -: 4227:
        -: 4228:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 4229:the number of valid bytes in the output buffer.
        -: 4230:
        -: 4231:**Prototype**
        -: 4232:
        -: 4233:```c
        -: 4234:jerry_size_t
        -: 4235:jerry_substring_to_char_buffer (const jerry_value_t value,
        -: 4236:                                jerry_length_t start_pos,
        -: 4237:                                jerry_length_t end_pos,
        -: 4238:                                jerry_char_t *buffer_p,
        -: 4239:                                jerry_size_t buffer_size);
        -: 4240:```
        -: 4241:
        -: 4242:- `value` - input string value
        -: 4243:- `start_pos` - position of the first character
        -: 4244:- `end_pos` - position of the last character
        -: 4245:- `buffer_p` - pointer to output buffer
        -: 4246:- `buffer_size` - size of the buffer
        -: 4247:- return value - number of bytes, actually copied to the buffer
        -: 4248:
        -: 4249:*New in version 2.0*.
        -: 4250:
        -: 4251:**Example**
        -: 4252:
        -: 4253:```c
        -: 4254:{
        -: 4255:  jerry_value_t value;
        -: 4256:  ... // create or acquire value
        -: 4257:
        -: 4258:  jerry_size_t req_sz = jerry_get_string_size (value);
        -: 4259:  jerry_char_t str_buf_p[req_sz];
        -: 4260:  jerry_length_t start_pos = 0;
        -: 4261:  jerry_length_t end_pos = jerry_get_string_length (value);
        -: 4262:
        -: 4263:  jerry_substring_to_char_buffer (value, start_pos, end_pos, str_buf_p, req_sz);
        -: 4264:
        -: 4265:  jerry_release_value (value);
        -: 4266:}
        -: 4267:```
        -: 4268:
        -: 4269:**See also**
        -: 4270:
        -: 4271:- [jerry_create_string](#jerry_create_string)
        -: 4272:- [jerry_get_string_size](#jerry_get_string_size)
        -: 4273:- [jerry_get_string_length](#jerry_get_string_length)
        -: 4274:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 4275:
        -: 4276:
        -: 4277:## jerry_substring_to_utf8_char_buffer
        -: 4278:
        -: 4279:**Summary**
        -: 4280:
        -: 4281:Copy the characters of an utf-8 encoded substring into a specified buffer.
        -: 4282:The '\0' character could occur in character buffer. Returns 0, if the value
        -: 4283:parameter is not a string. It will extract the substring between the specified
        -: 4284:start position and the end position (or the end of the string, whichever
        -: 4285:comes first).
        -: 4286:
        -: 4287:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 4288:the number of valid bytes in the output buffer.
        -: 4289:
        -: 4290:**Prototype**
        -: 4291:
        -: 4292:```c
        -: 4293:jerry_size_t
        -: 4294:jerry_substring_to_utf8_char_buffer (const jerry_value_t value,
        -: 4295:                                     jerry_length_t start_pos,
        -: 4296:                                     jerry_length_t end_pos,
        -: 4297:                                     jerry_char_t *buffer_p,
        -: 4298:                                     jerry_size_t buffer_size);
        -: 4299:```
        -: 4300:
        -: 4301:- `value` - input string value
        -: 4302:- `start_pos` - position of the first character
        -: 4303:- `end_pos` - position of the last character
        -: 4304:- `buffer_p` - pointer to output buffer
        -: 4305:- `buffer_size` - size of the buffer
        -: 4306:- return value - number of bytes, actually copied to the buffer
        -: 4307:
        -: 4308:*New in version 2.0*.
        -: 4309:
        -: 4310:**Example**
        -: 4311:
        -: 4312:```c
        -: 4313:{
        -: 4314:  jerry_value_t value;
        -: 4315:  ... // create or acquire value
        -: 4316:
        -: 4317:  jerry_size_t req_sz = jerry_get_utf8_string_size (value);
        -: 4318:  jerry_char_t str_buf_p[req_sz];
        -: 4319:  jerry_length_t start_pos = 0;
        -: 4320:  jerry_length_t end_pos = jerry_get_utf8_string_length (value);
        -: 4321:
        -: 4322:  jerry_substring_to_utf8_char_buffer (value, start_pos, end_pos, str_buf_p, req_sz);
        -: 4323:
        -: 4324:  jerry_release_value (value);
        -: 4325:}
        -: 4326:```
        -: 4327:
        -: 4328:**See also**
        -: 4329:
        -: 4330:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 4331:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -: 4332:- [jerry_get_utf8_string_length](#jerry_get_utf8_string_length)
        -: 4333:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 4334:
        -: 4335:
        -: 4336:# jerry_string_set_external_free_callback
        -: 4337:
        -: 4338:**Summary**
        -: 4339:
        -: 4340:Sets the global callback which is called when the string data of an external
        -: 4341:string is no longer used. It is recommended to set this function before the
        -: 4342:first external string is created.
        -: 4343:
        -: 4344:*Note*:
        -: 4345:  - When the callback is NULL, no function is called when an external string is freed.
        -: 4346:  - In some cases (e.g. when the string is also a magic string registered by
        -: 4347:    [jerry_register_magic_strings](#jerry_register_magic_strings)), the callback
        -: 4348:    is called when the string is created, not when it is released.
        -: 4349:
        -: 4350:**Prototype**
        -: 4351:
        -: 4352:```c
        -: 4353:void jerry_string_set_external_free_callback (jerry_external_string_free_callback_t callback_p);
        -: 4354:```
        -: 4355:
        -: 4356:- `callback_p` - callback which is called when an external string is freed.
        -: 4357:
        -: 4358:*New in version [[NEXT_RELEASE]]*.
        -: 4359:
        -: 4360:**Example**
        -: 4361:
        -: 4362:[doctest]: # ()
        -: 4363:
        -: 4364:```c
        -: 4365:#include "jerryscript.h"
        -: 4366:#include <stdio.h>
        -: 4367:
        -: 4368:static void
    #####: 4369:external_string_free_callback (jerry_char_t *string_p, /**< string pointer */
        -: 4370:                               jerry_size_t string_size, /**< size of the string */
        -: 4371:                               void *user_p) /**< user pointer */
        -: 4372:{
    #####: 4373:  printf ("External string is freed!\n");
    #####: 4374:}
        -: 4375:
        -: 4376:int
    #####: 4377:main (void)
        -: 4378:{
    #####: 4379:  jerry_init (JERRY_INIT_EMPTY);
        -: 4380:
    #####: 4381:  jerry_string_set_external_free_callback (external_string_free_callback);
        -: 4382:
    #####: 4383:  const char *string_p = "This is a long external string, should not be duplicated!";
    #####: 4384:  jerry_value_t external_string = jerry_create_external_string ((jerry_char_t *) string_p, NULL);
        -: 4385:  /* The external_string_free_callback is called. */
    #####: 4386:  jerry_release_value (external_string);
        -: 4387:
    #####: 4388:  jerry_cleanup ();
        -: 4389:  return 0;
        -: 4390:}
        -: 4391:```
        -: 4392:
        -: 4393:**See also**
        -: 4394:
        -: 4395:- [jerry_external_string_free_callback_t](#jerry_external_string_free_callback_t)
        -: 4396:- [jerry_string_get_external_user_pointer](#jerry_string_get_external_user_pointer)
        -: 4397:- [jerry_create_external_string](#jerry_create_external_string)
        -: 4398:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -: 4399:
        -: 4400:
        -: 4401:# jerry_string_get_external_user_pointer
        -: 4402:
        -: 4403:**Summary**
        -: 4404:
        -: 4405:Returns the user pointer assigned to an external string.
        -: 4406:
        -: 4407:*Note*:
        -: 4408:  - In some cases (e.g. when the string is also a magic string registered by
        -: 4409:    [jerry_register_magic_strings](#jerry_register_magic_strings)), the
        -: 4410:    string is a normal string without a user pointer even if it is created
        -: 4411:    by [jerry_create_external_string](#jerry_create_external_string).
        -: 4412:
        -: 4413:**Prototype**
        -: 4414:
        -: 4415:```c
        -: 4416:void *jerry_string_get_external_user_pointer (const jerry_value_t value,
        -: 4417:                                              bool *is_external);
        -: 4418:```
        -: 4419:
        -: 4420:- `value` - string value.
        -: 4421:- `is_external` - when `is_external` is non-NULL, the referenced boolean value is set
        -: 4422:                  to true, if `value` is an external string, and set to false otherwise
        -: 4423:- return value
        -: 4424:  - user pointer - if `value` argument is an external string
        -: 4425:  - NULL - otherwise
        -: 4426:
        -: 4427:*New in version [[NEXT_RELEASE]]*.
        -: 4428:
        -: 4429:**Example**
        -: 4430:
        -: 4431:[doctest]: # ()
        -: 4432:
        -: 4433:```c
        -: 4434:#include "jerryscript.h"
        -: 4435:#include <stdio.h>
        -: 4436:
        -: 4437:static int user_value = 1;
        -: 4438:
        -: 4439:int
    #####: 4440:main (void)
        -: 4441:{
    #####: 4442:  jerry_init (JERRY_INIT_EMPTY);
        -: 4443:
    #####: 4444:  const char *string_p = "This is a long external string, should not be duplicated!";
        -: 4445:
    #####: 4446:  jerry_value_t external_string = jerry_create_external_string ((jerry_char_t *) string_p, (void *) &user_value);
        -: 4447:
        -: 4448:  bool is_external;
    #####: 4449:  void *user_p = jerry_string_get_external_user_pointer (external_string, &is_external);
        -: 4450:
    #####: 4451:  if (is_external)
        -: 4452:  {
        -: 4453:    /* Prints the address of user_value. */
        -: 4454:    printf("User pointer of an external string: %p\n", user_p);
        -: 4455:  }
        -: 4456:
    #####: 4457:  jerry_release_value (external_string);
        -: 4458:
    #####: 4459:  jerry_cleanup ();
        -: 4460:  return 0;
        -: 4461:}
        -: 4462:```
        -: 4463:
        -: 4464:**See also**
        -: 4465:
        -: 4466:- [jerry_string_set_external_string_free_callback](#jerry_string_set_external_string_free_callback)
        -: 4467:- [jerry_create_external_string](#jerry_create_external_string)
        -: 4468:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -: 4469:
        -: 4470:
        -: 4471:# Functions for array object values
        -: 4472:
        -: 4473:## jerry_get_array_length
        -: 4474:
        -: 4475:**Summary**
        -: 4476:
        -: 4477:Get length of an array object. Returns zero, if the given parameter is not an array object.
        -: 4478:
        -: 4479:**Prototype**
        -: 4480:
        -: 4481:```c
        -: 4482:uint32_t
        -: 4483:jerry_get_array_length (const jerry_value_t value);
        -: 4484:```
        -: 4485:
        -: 4486:- `value` - input array value
        -: 4487:- return value - length of the given array
        -: 4488:
        -: 4489:**Example**
        -: 4490:
        -: 4491:```c
        -: 4492:{
        -: 4493:  jerry_value_t value;
        -: 4494:  ... // create or acquire value
        -: 4495:
        -: 4496:  uint32_t len = jerry_get_array_length (value);
        -: 4497:
        -: 4498:  jerry_release_value (value);
        -: 4499:}
        -: 4500:```
        -: 4501:
        -: 4502:**See also**
        -: 4503:
        -: 4504:- [jerry_create_array](#jerry_create_array)
        -: 4505:
        -: 4506:
        -: 4507:# Converters of 'jerry_value_t'
        -: 4508:
        -: 4509:Functions for converting API values to another value type.
        -: 4510:
        -: 4511:## jerry_value_to_boolean
        -: 4512:
        -: 4513:**Summary**
        -: 4514:
        -: 4515:Call ToBoolean operation on the api value.
        -: 4516:
        -: 4517:**Prototype**
        -: 4518:
        -: 4519:```c
        -: 4520:bool
        -: 4521:jerry_value_to_boolean (const jerry_value_t value);
        -: 4522:```
        -: 4523:
        -: 4524:- `value` - api value
        -: 4525:- return value
        -: 4526:  - true, if the logical value is true
        -: 4527:  - false, otherwise
        -: 4528:
        -: 4529:**Example**
        -: 4530:
        -: 4531:```c
        -: 4532:{
        -: 4533:  jerry_value_t value;
        -: 4534:  ... // create or acquire value
        -: 4535:
        -: 4536:  bool b = jerry_value_to_boolean (value);
        -: 4537:
        -: 4538:  jerry_release_value (value);
        -: 4539:}
        -: 4540:
        -: 4541:```
        -: 4542:
        -: 4543:**See also**
        -: 4544:
        -: 4545:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4546:
        -: 4547:## jerry_value_to_number
        -: 4548:
        -: 4549:**Summary**
        -: 4550:
        -: 4551:Call ToNumber operation on the api value.
        -: 4552:
        -: 4553:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4554:is no longer needed.
        -: 4555:
        -: 4556:**Prototype**
        -: 4557:
        -: 4558:```c
        -: 4559:jerry_value_t
        -: 4560:jerry_value_to_number (const jerry_value_t value);
        -: 4561:```
        -: 4562:
        -: 4563:- `value` - api value
        -: 4564:- return value
        -: 4565:  - converted number value, if success
        -: 4566:  - thrown error, otherwise
        -: 4567:
        -: 4568:**Example**
        -: 4569:
        -: 4570:```c
        -: 4571:{
        -: 4572:  jerry_value_t value;
        -: 4573:  ... // create or acquire value
        -: 4574:
        -: 4575:  jerry_value_t number_value = jerry_value_to_number (value);
        -: 4576:
        -: 4577:  jerry_release_value (number_value);
        -: 4578:  jerry_release_value (value);
        -: 4579:}
        -: 4580:
        -: 4581:```
        -: 4582:
        -: 4583:**See also**
        -: 4584:
        -: 4585:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4586:
        -: 4587:## jerry_value_to_object
        -: 4588:
        -: 4589:**Summary**
        -: 4590:
        -: 4591:Call ToObject operation on the api value.
        -: 4592:
        -: 4593:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4594:is no longer needed.
        -: 4595:
        -: 4596:**Prototype**
        -: 4597:
        -: 4598:```c
        -: 4599:jerry_value_t
        -: 4600:jerry_value_to_object (const jerry_value_t value);
        -: 4601:```
        -: 4602:
        -: 4603:- `value` - api value
        -: 4604:- return value
        -: 4605:  - converted object value, if success
        -: 4606:  - thrown error, otherwise
        -: 4607:
        -: 4608:**Example**
        -: 4609:
        -: 4610:```c
        -: 4611:{
        -: 4612:  jerry_value_t value;
        -: 4613:  ... // create or acquire value
        -: 4614:
        -: 4615:  jerry_value_t object_value = jerry_value_to_object (value);
        -: 4616:
        -: 4617:  jerry_release_value (object_value);
        -: 4618:  jerry_release_value (value);
        -: 4619:}
        -: 4620:```
        -: 4621:
        -: 4622:**See also**
        -: 4623:
        -: 4624:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4625:
        -: 4626:## jerry_value_to_primitive
        -: 4627:
        -: 4628:**Summary**
        -: 4629:
        -: 4630:Call ToPrimitive operation on the api value.
        -: 4631:
        -: 4632:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4633:is no longer needed.
        -: 4634:
        -: 4635:**Prototype**
        -: 4636:
        -: 4637:```c
        -: 4638:jerry_value_t
        -: 4639:jerry_value_to_primitive (const jerry_value_t value);
        -: 4640:```
        -: 4641:
        -: 4642:- `value` - api value
        -: 4643:- return value
        -: 4644:  - converted primitive value, if success
        -: 4645:  - thrown error, otherwise
        -: 4646:
        -: 4647:**Example**
        -: 4648:
        -: 4649:```c
        -: 4650:{
        -: 4651:  jerry_value_t value;
        -: 4652:  ... // create or acquire value
        -: 4653:
        -: 4654:  jerry_value_t prim_value = jerry_value_to_primitive (value);
        -: 4655:
        -: 4656:  jerry_release_value (prim_value);
        -: 4657:  jerry_release_value (value);
        -: 4658:}
        -: 4659:```
        -: 4660:
        -: 4661:**See also**
        -: 4662:
        -: 4663:- [jerry_value_t](#jerry_value_t)
        -: 4664:
        -: 4665:## jerry_value_to_string
        -: 4666:
        -: 4667:**Summary**
        -: 4668:
        -: 4669:Call the ToString ecma builtin operation on the api value.
        -: 4670:
        -: 4671:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4672:is no longer needed.
        -: 4673:
        -: 4674:**Prototype**
        -: 4675:
        -: 4676:```c
        -: 4677:jerry_value_t
        -: 4678:jerry_value_to_string (const jerry_value_t value);
        -: 4679:```
        -: 4680:
        -: 4681:- `value` - api value
        -: 4682:- return value
        -: 4683:  - converted string value, if success
        -: 4684:  - thrown error, otherwise
        -: 4685:
        -: 4686:**Example**
        -: 4687:
        -: 4688:```c
        -: 4689:{
        -: 4690:  jerry_value_t value;
        -: 4691:  ... // create or acquire value
        -: 4692:
        -: 4693:  jerry_value_t string_value = jerry_value_to_string (value);
        -: 4694:
        -: 4695:  jerry_release_value (string_value);
        -: 4696:  jerry_release_value (value);
        -: 4697:}
        -: 4698:```
        -: 4699:
        -: 4700:**See also**
        -: 4701:
        -: 4702:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4703:
        -: 4704:
        -: 4705:## jerry_value_to_bigint
        -: 4706:
        -: 4707:**Summary**
        -: 4708:
        -: 4709:Call the BigInt constructor ecma builtin operation on the api value.
        -: 4710:
        -: 4711:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4712:is no longer needed.
        -: 4713:
        -: 4714:**Prototype**
        -: 4715:
        -: 4716:```c
        -: 4717:jerry_value_t
        -: 4718:jerry_value_to_bigint (const jerry_value_t value);
        -: 4719:```
        -: 4720:
        -: 4721:- `value` - api value
        -: 4722:- return value
        -: 4723:  - converted BigInt value, if success
        -: 4724:  - thrown error, otherwise
        -: 4725:
        -: 4726:*New in version 2.4*.
        -: 4727:
        -: 4728:**Example**
        -: 4729:
        -: 4730:```c
        -: 4731:{
        -: 4732:  jerry_value_t value;
        -: 4733:  ... // create or acquire value
        -: 4734:
        -: 4735:  jerry_value_t bigint_value = jerry_value_to_bigint (value);
        -: 4736:
        -: 4737:  jerry_release_value (bigint_value);
        -: 4738:  jerry_release_value (value);
        -: 4739:}
        -: 4740:```
        -: 4741:
        -: 4742:**See also**
        -: 4743:
        -: 4744:- [jerry_release_value](#jerry_release_value)
        -: 4745:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 4746:- [jerry_get_bigint_digits](#jerry_get_bigint_digits)
        -: 4747:
        -: 4748:## jerry_value_as_integer
        -: 4749:
        -: 4750:**Summary**
        -: 4751:
        -: 4752:Convert any number to integer number. Returns 0 if value is not number.
        -: 4753:Based on ECMA 262 v11 7.1.5
        -: 4754:
        -: 4755:**Prototype**
        -: 4756:
        -: 4757:```c
        -: 4758:double
        -: 4759:jerry_value_as_integer (const jerry_value_t value);
        -: 4760:```
        -: 4761:
        -: 4762:- `value` - api value
        -: 4763:- return
        -: 4764:  - 0, if value is not a number
        -: 4765:  - integer representation of the number, otherwise
        -: 4766:
        -: 4767:*New in version 2.4*.
        -: 4768:
        -: 4769:**Example**
        -: 4770:
        -: 4771:```c
        -: 4772:{
        -: 4773:  jerry_value_t number_val = jerry_create_number (123321);
        -: 4774:  double number = jerry_value_as_integer (number_val);
        -: 4775:  jerry_release_value (number_val);
        -: 4776:}
        -: 4777:```
        -: 4778:
        -: 4779:## jerry_value_as_int32
        -: 4780:
        -: 4781:**Summary**
        -: 4782:
        -: 4783:Convert any number to int32 number. Returns 0 if value is not number.
        -: 4784:Based on ECMA 262 v11 7.1.6
        -: 4785:
        -: 4786:**Prototype**
        -: 4787:
        -: 4788:```c
        -: 4789:int32_t
        -: 4790:jerry_value_as_int32 (const jerry_value_t value);
        -: 4791:```
        -: 4792:
        -: 4793:- `value` - api value
        -: 4794:- return
        -: 4795:  - 0, if value is not a number
        -: 4796:  - int32 representation of the number, otherwise
        -: 4797:
        -: 4798:*New in version 2.4*.
        -: 4799:
        -: 4800:**Example**
        -: 4801:
        -: 4802:```c
        -: 4803:{
        -: 4804:  jerry_value_t number_val = jerry_create_number (123321);
        -: 4805:  int32_t number = jerry_value_as_int32 (number_val);
        -: 4806:  jerry_release_value (number_val);
        -: 4807:}
        -: 4808:```
        -: 4809:
        -: 4810:## jerry_value_as_uint32
        -: 4811:
        -: 4812:**Summary**
        -: 4813:
        -: 4814:Convert any number to uint32 number. Returns 0 if value is not number.
        -: 4815:Based on ECMA 262 v11 7.1.7
        -: 4816:
        -: 4817:**Prototype**
        -: 4818:
        -: 4819:```c
        -: 4820:uint32_t
        -: 4821:jerry_value_as_uint32 (const jerry_value_t value);
        -: 4822:```
        -: 4823:
        -: 4824:- `value` - api value
        -: 4825:- return
        -: 4826:  - 0, if value is not a number
        -: 4827:  - uint32 representation of the number, otherwise
        -: 4828:
        -: 4829:*New in version 2.4*.
        -: 4830:
        -: 4831:**Example**
        -: 4832:
        -: 4833:```c
        -: 4834:{
        -: 4835:  jerry_value_t number_val = jerry_create_number (123321);
        -: 4836:  uint32_t number = jerry_value_as_uint32 (number_val);
        -: 4837:  jerry_release_value (number_val);
        -: 4838:}
        -: 4839:```
        -: 4840:
        -: 4841:# Functions for module objects
        -: 4842:
        -: 4843:These APIs all depend on module support.
        -: 4844:
        -: 4845:## jerry_module_link
        -: 4846:
        -: 4847:**Summary**
        -: 4848:
        -: 4849:Link modules to their dependencies. The dependencies are resolved by a user callback.
        -: 4850:
        -: 4851:*Notes*:
        -: 4852:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4853:  is no longer needed.
        -: 4854:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 4855:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 4856:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 4857:
        -: 4858:**Prototype**
        -: 4859:
        -: 4860:```c
        -: 4861:jerry_value_t jerry_module_link (const jerry_value_t module_val,
        -: 4862:                                 jerry_module_resolve_callback_t callback, void *user_p)
        -: 4863:```
        -: 4864:
        -: 4865:- `module_val` - module object in unlinked state
        -: 4866:- `callback` - user callback which is called to resolve dependencies,
        -: 4867:               uses `jerry_port_module_resolve` when NULL is passed
        -: 4868:- `user_p` - user pointer passed to the callback
        -: 4869:- return
        -: 4870:  - true - if linking is successful
        -: 4871:  - error - otherwise
        -: 4872:
        -: 4873:*New in version [[NEXT_RELEASE]]*.
        -: 4874:
        -: 4875:**Example**
        -: 4876:
        -: 4877:[doctest]: # (test="compile")
        -: 4878:
        -: 4879:```c
        -: 4880:#include <jerryscript.h>
        -: 4881:
        -: 4882:static jerry_value_t
    #####: 4883:module_resolve_callback (const jerry_value_t specifier,
        -: 4884:                         const jerry_value_t referrer,
        -: 4885:                         void *user_data_p)
        -: 4886:{
        -: 4887:  /* In this case, the specifier contains 'b.mjs', and the referrer is the module
        -: 4888:   * created in the main() function below. Normally the specifier string should be
        -: 4889:   * extended to a full file system path, and it should be checked whether a module
        -: 4890:   * corresponding to this path has been loaded already. For simplicity, this function
        -: 4891:   * returns with a new module. */
        -: 4892:
    #####: 4893:  const jerry_char_t script[] = "export var a = 5";
        -: 4894:
        -: 4895:  jerry_parse_options_t parse_options;
    #####: 4896:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 4897:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "b.mjs");
        -: 4898:
    #####: 4899:  jerry_value_t result = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 4900:  jerry_release_value (parse_options.resource_name);
    #####: 4901:  return result;
        -: 4902:} /* module_resolve_callback */
        -: 4903:
        -: 4904:int
    #####: 4905:main (void)
        -: 4906:{
    #####: 4907:  jerry_init (JERRY_INIT_EMPTY);
        -: 4908:
    #####: 4909:  const jerry_char_t script[] = "import a from 'b.mjs'";
        -: 4910:
        -: 4911:  jerry_parse_options_t parse_options;
    #####: 4912:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 4913:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 4914:
    #####: 4915:  jerry_value_t ret_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 4916:  jerry_release_value (parse_options.resource_name);
        -: 4917:
    #####: 4918:  jerry_module_link (ret_value, module_resolve_callback, NULL);
        -: 4919:
    #####: 4920:  jerry_release_value (ret_value);
        -: 4921:
    #####: 4922:  jerry_cleanup ();
        -: 4923:  return 0;
        -: 4924:}
        -: 4925:```
        -: 4926:
        -: 4927:**See also**
        -: 4928:- [jerry_module_resolve_callback_t](#jerry_module_resolve_callback_t)
        -: 4929:
        -: 4930:## jerry_module_evaluate
        -: 4931:
        -: 4932:Evaluate a module and its dependencies. The module must be in linked state.
        -: 4933:
        -: 4934:*Notes*:
        -: 4935:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 4936:  when it is no longer needed.
        -: 4937:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 4938:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 4939:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 4940:
        -: 4941:**Prototype**
        -: 4942:
        -: 4943:```c
        -: 4944:jerry_value_t jerry_module_evaluate (const jerry_value_t module_val);
        -: 4945:```
        -: 4946:
        -: 4947:- `module_val` - module object
        -: 4948:- return
        -: 4949:  - result of module bytecode execution - if evaluation was successful
        -: 4950:  - error, otherwise
        -: 4951:
        -: 4952:*New in version [[NEXT_RELEASE]]*.
        -: 4953:
        -: 4954:**Example**
        -: 4955:
        -: 4956:[doctest]: # (test="compile")
        -: 4957:
        -: 4958:```c
        -: 4959:#include <jerryscript.h>
        -: 4960:#include <stdio.h>
        -: 4961:
        -: 4962:int
    #####: 4963:main (void)
        -: 4964:{
    #####: 4965:  jerry_init (JERRY_INIT_EMPTY);
        -: 4966:
    #####: 4967:  const jerry_char_t script[] = "export var a = 6";
        -: 4968:
        -: 4969:  jerry_parse_options_t parse_options;
    #####: 4970:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 4971:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 4972:
    #####: 4973:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 4974:  jerry_release_value (parse_options.resource_name);
        -: 4975:
    #####: 4976:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
    #####: 4977:  jerry_release_value (jerry_module_evaluate (module_value));
        -: 4978:
    #####: 4979:  jerry_release_value (module_value);
        -: 4980:
    #####: 4981:  jerry_cleanup ();
        -: 4982:  return 0;
        -: 4983:}
        -: 4984:```
        -: 4985:
        -: 4986:**See also**
        -: 4987:
        -: 4988:- [jerry_module_link](#jerry_module_link)
        -: 4989:
        -: 4990:## jerry_module_get_state
        -: 4991:
        -: 4992:**Summary**
        -: 4993:
        -: 4994:Returns the current status of a module. The available values
        -: 4995:are listed in [jerry_module_state_t](#jerry_module_state_t)
        -: 4996:
        -: 4997:*Notes*:
        -: 4998:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 4999:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5000:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5001:
        -: 5002:**Prototype**
        -: 5003:
        -: 5004:```c
        -: 5005:jerry_module_state_t jerry_module_get_state (const jerry_value_t module_val);
        -: 5006:```
        -: 5007:
        -: 5008:- `module_val` - module object
        -: 5009:- return
        -: 5010:  - current status - if module_val is a module
        -: 5011:  - JERRY_MODULE_STATE_INVALID - otherwise
        -: 5012:
        -: 5013:*New in version [[NEXT_RELEASE]]*.
        -: 5014:
        -: 5015:**Example**
        -: 5016:
        -: 5017:[doctest]: # (test="compile")
        -: 5018:
        -: 5019:```c
        -: 5020:#include <jerryscript.h>
        -: 5021:#include <stdio.h>
        -: 5022:
        -: 5023:int
    #####: 5024:main (void)
        -: 5025:{
    #####: 5026:  jerry_init (JERRY_INIT_EMPTY);
        -: 5027:
    #####: 5028:  const jerry_char_t script[] = "import a from 'b.mjs'";
        -: 5029:
        -: 5030:  jerry_parse_options_t parse_options;
    #####: 5031:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5032:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5033:
    #####: 5034:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5035:  jerry_release_value (parse_options.resource_name);
        -: 5036:
    #####: 5037:  if (jerry_module_get_state (module_value) == JERRY_MODULE_STATE_UNLINKED)
        -: 5038:  {
        -: 5039:    printf ("Module parsing has been successful\n");
        -: 5040:  }
        -: 5041:
    #####: 5042:  jerry_release_value (module_value);
        -: 5043:
    #####: 5044:  jerry_cleanup ();
        -: 5045:  return 0;
        -: 5046:}
        -: 5047:```
        -: 5048:
        -: 5049:**See also**
        -: 5050:
        -: 5051:- [jerry_module_state_t](#jerry_module_state_t)
        -: 5052:
        -: 5053:## jerry_module_set_state_changed_callback
        -: 5054:
        -: 5055:**Summary**
        -: 5056:
        -: 5057:Sets a callback which is called after a module state is changed to linked, evaluated, or error.
        -: 5058:
        -: 5059:*Notes*:
        -: 5060:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5061:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5062:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5063:
        -: 5064:**Prototype**
        -: 5065:
        -: 5066:```c
        -: 5067:void jerry_module_set_state_changed_callback (jerry_module_state_changed_callback_t callback,
        -: 5068:                                              void *user_p);
        -: 5069:```
        -: 5070:
        -: 5071:- `callback` - callback, which is called after the state change.
        -: 5072:- `user_p` - pointer passed to the callback function.
        -: 5073:
        -: 5074:*New in version [[NEXT_RELEASE]]*.
        -: 5075:
        -: 5076:**Example**
        -: 5077:
        -: 5078:[doctest]: # (test="compile")
        -: 5079:
        -: 5080:```c
        -: 5081:#include <jerryscript.h>
        -: 5082:#include <stdio.h>
        -: 5083:
        -: 5084:static void
    #####: 5085:module_state_changed (jerry_module_state_t new_state, /**< new state of the module */
        -: 5086:                      const jerry_value_t module_val, /**< a module whose state is changed */
        -: 5087:                      const jerry_value_t value, /**< value argument */
        -: 5088:                      void *user_p) /**< user pointer */
        -: 5089:{
        -: 5090:  (void) module_val;
        -: 5091:  (void) value;
        -: 5092:  (void) user_p;
        -: 5093:
    #####: 5094:  if (new_state == JERRY_MODULE_STATE_LINKED)
        -: 5095:  {
        -: 5096:    printf ("A module is entered into linked state\n");
        -: 5097:  }
    #####: 5098:} /* module_state_changed */
        -: 5099:
        -: 5100:int
    #####: 5101:main (void)
        -: 5102:{
    #####: 5103:  jerry_init (JERRY_INIT_EMPTY);
        -: 5104:
    #####: 5105:  const jerry_char_t script[] = "12";
        -: 5106:
    #####: 5107:  jerry_module_set_state_changed_callback (module_state_changed, NULL);
        -: 5108:
        -: 5109:  jerry_parse_options_t parse_options;
    #####: 5110:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5111:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5112:
    #####: 5113:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5114:  jerry_release_value (parse_options.resource_name);
        -: 5115:
    #####: 5116:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
        -: 5117:
    #####: 5118:  jerry_release_value (module_value);
        -: 5119:
    #####: 5120:  jerry_cleanup ();
        -: 5121:  return 0;
        -: 5122:}
        -: 5123:```
        -: 5124:
        -: 5125:**See also**
        -: 5126:
        -: 5127:- [jerry_module_state_t](#jerry_module_state_t)
        -: 5128:- [jerry_module_state_changed_callback_t](#jerry_module_state_changed_callback_t)
        -: 5129:
        -: 5130:## jerry_module_set_import_meta_callback
        -: 5131:
        -: 5132:**Summary**
        -: 5133:
        -: 5134:Sets a callback which is called when an import.meta expression of a module is evaluated the first time.
        -: 5135:
        -: 5136:*Notes*:
        -: 5137:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5138:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5139:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5140:
        -: 5141:**Prototype**
        -: 5142:
        -: 5143:```c
        -: 5144:void jerry_module_set_import_meta_callback (jerry_module_import_meta_callback_t callback,
        -: 5145:                                            void *user_p);
        -: 5146:```
        -: 5147:
        -: 5148:- `callback` - callback, which is called when an import.meta
        -: 5149:               expression of a module is evaluated the first time
        -: 5150:- `user_p` - pointer passed to the callback function.
        -: 5151:
        -: 5152:*New in version [[NEXT_RELEASE]]*.
        -: 5153:
        -: 5154:**Example**
        -: 5155:
        -: 5156:[doctest]: # (test="compile")
        -: 5157:
        -: 5158:```c
        -: 5159:#include <jerryscript.h>
        -: 5160:#include <stdio.h>
        -: 5161:
        -: 5162:static void
    #####: 5163:module_import_meta_callback (const jerry_value_t module, /**< module */
        -: 5164:                             const jerry_value_t meta_object, /**< import.meta object */
        -: 5165:                             void *user_p) /**< user pointer */
        -: 5166:{
        -: 5167:  (void) user_p;
        -: 5168:
        -: 5169:  /* Create a property for the meta object */
    #####: 5170:  jerry_value_t property_name_value = jerry_create_string ((const jerry_char_t *) "prop");
    #####: 5171:  jerry_value_t property_value = jerry_create_string ((const jerry_char_t *) "prop");
    #####: 5172:  jerry_value_t result_value = jerry_set_property (meta_object, property_name_value, property_value);
    #####: 5173:  jerry_release_value (result_value);
    #####: 5174:  jerry_release_value (property_value);
    #####: 5175:  jerry_release_value (property_name_value);
    #####: 5176:} /* module_import_meta_callback */
        -: 5177:
        -: 5178:int
    #####: 5179:main (void)
        -: 5180:{
    #####: 5181:  jerry_init (JERRY_INIT_EMPTY);
        -: 5182:
    #####: 5183:  const jerry_char_t script[] = "import.meta";
        -: 5184:
    #####: 5185:  jerry_module_set_import_meta_callback (module_import_meta_callback, NULL);
        -: 5186:
        -: 5187:  jerry_parse_options_t parse_options;
    #####: 5188:  parse_options.options = JERRY_PARSE_MODULE;
        -: 5189:
    #####: 5190:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
        -: 5191:
    #####: 5192:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
    #####: 5193:  jerry_release_value (jerry_module_evaluate (module_value));
        -: 5194:
    #####: 5195:  jerry_release_value (module_value);
        -: 5196:
    #####: 5197:  jerry_cleanup ();
        -: 5198:  return 0;
        -: 5199:}
        -: 5200:```
        -: 5201:
        -: 5202:**See also**
        -: 5203:
        -: 5204:- [jerry_module_import_meta_callback_t](#jerry_module_import_meta_callback_t)
        -: 5205:
        -: 5206:## jerry_module_get_number_of_requests
        -: 5207:
        -: 5208:**Summary**
        -: 5209:
        -: 5210:Returns the number of import/export requests of a module.
        -: 5211:The requests can be queried by [jerry_module_get_request](#jerry_module_get_request).
        -: 5212:
        -: 5213:
        -: 5214:*Notes*:
        -: 5215:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5216:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5217:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5218:
        -: 5219:**Prototype**
        -: 5220:
        -: 5221:```c
        -: 5222:size_t jerry_module_get_number_of_requests (const jerry_value_t module_val);
        -: 5223:```
        -: 5224:
        -: 5225:- `module_val` - module object
        -: 5226:- return
        -: 5227:  - number of import/export requests of a module, if `module_val` is module,
        -: 5228:  - 0, otherwise
        -: 5229:
        -: 5230:*New in version [[NEXT_RELEASE]]*.
        -: 5231:
        -: 5232:**Example**
        -: 5233:
        -: 5234:[doctest]: # (test="compile")
        -: 5235:
        -: 5236:```c
        -: 5237:#include <jerryscript.h>
        -: 5238:#include <stdio.h>
        -: 5239:
        -: 5240:int
    #####: 5241:main (void)
        -: 5242:{
    #####: 5243:  jerry_init (JERRY_INIT_EMPTY);
        -: 5244:
    #####: 5245:  const jerry_char_t script[] = "export * from 'b.mjs'"
        -: 5246:                                "import a from 'c.mjs'";
        -: 5247:
        -: 5248:  jerry_parse_options_t parse_options;
    #####: 5249:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5250:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5251:
    #####: 5252:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5253:  jerry_release_value (parse_options.resource_name);
        -: 5254:
        -: 5255:  /* Prints 2. */
    #####: 5256:  printf ("Number of requests: %d\n", (int) jerry_module_get_number_of_requests (module_value));
        -: 5257:
    #####: 5258:  jerry_release_value (module_value);
        -: 5259:
    #####: 5260:  jerry_cleanup ();
        -: 5261:  return 0;
        -: 5262:}
        -: 5263:```
        -: 5264:
        -: 5265:**See also**
        -: 5266:
        -: 5267:- [jerry_module_get_request](#jerry_module_get_request)
        -: 5268:- [jerry_parse](#jerry_parse)
        -: 5269:- [jerry_module_link](#jerry_module_link)
        -: 5270:
        -: 5271:## jerry_module_get_request
        -: 5272:
        -: 5273:**Summary**
        -: 5274:
        -: 5275:Returns the module request specified by the `request_index` argument. The requests
        -: 5276:are ordered in source code occurence. When parsing is completed, all returned values
        -: 5277:are strings. If [jerry_module_link](#jerry_module_link) is completed successfully
        -: 5278:all returned values are module objects instead. If linking is in progress or fails,
        -: 5279:the successfully resolved dependencies are module objects, the rest are strings.
        -: 5280:The number of requests can be queried by
        -: 5281:[jerry_module_get_number_of_requests](#jerry_module_get_number_of_requests).
        -: 5282:
        -: 5283:*Notes*:
        -: 5284:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5285:  when it is no longer needed.
        -: 5286:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5287:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5288:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5289:
        -: 5290:**Prototype**
        -: 5291:
        -: 5292:```c
        -: 5293:jerry_value_t jerry_module_get_request (const jerry_value_t module_val, size_t request_index);
        -: 5294:```
        -: 5295:
        -: 5296:- `module_val` - module object
        -: 5297:- return
        -: 5298:  - string, if the request has not been resolved yet
        -: 5299:  - module object, if the request has been resolved successfully
        -: 5300:  - error, otherwise
        -: 5301:
        -: 5302:*New in version [[NEXT_RELEASE]]*.
        -: 5303:
        -: 5304:**Example**
        -: 5305:
        -: 5306:[doctest]: # (test="compile")
        -: 5307:
        -: 5308:```c
        -: 5309:#include <jerryscript.h>
        -: 5310:
        -: 5311:int
    #####: 5312:main (void)
        -: 5313:{
    #####: 5314:  jerry_init (JERRY_INIT_EMPTY);
        -: 5315:
    #####: 5316:  const jerry_char_t script[] = "export * from 'b.mjs'"
        -: 5317:                                "import a from 'c.mjs'";
        -: 5318:  const jerry_char_t file[] = "a.mjs";
        -: 5319:
        -: 5320:  jerry_parse_options_t parse_options;
    #####: 5321:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5322:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5323:
    #####: 5324:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5325:  jerry_release_value (parse_options.resource_name);
        -: 5326:
    #####: 5327:  jerry_value_t request_value = jerry_module_get_request (module_value, 0);
        -: 5328:  /* Returns with b.mjs */
    #####: 5329:  jerry_release_value (request_value);
        -: 5330:
    #####: 5331:  request_value = jerry_module_get_request (module_value, 1);
        -: 5332:  /* Returns with c.mjs */
    #####: 5333:  jerry_release_value (request_value);
        -: 5334:
    #####: 5335:  jerry_release_value (module_value);
        -: 5336:
    #####: 5337:  jerry_cleanup ();
        -: 5338:  return 0;
        -: 5339:}
        -: 5340:```
        -: 5341:
        -: 5342:**See also**
        -: 5343:
        -: 5344:- [jerry_module_get_number_of_requests](#jerry_module_get_number_of_requests)
        -: 5345:- [jerry_parse](#jerry_parse)
        -: 5346:- [jerry_module_link](#jerry_module_link)
        -: 5347:
        -: 5348:## jerry_module_get_namespace
        -: 5349:
        -: 5350:Returns the namespace object of a module
        -: 5351:
        -: 5352:*Notes*:
        -: 5353:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5354:  when it is no longer needed.
        -: 5355:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5356:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5357:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5358:
        -: 5359:**Prototype**
        -: 5360:
        -: 5361:```c
        -: 5362:jerry_value_t jerry_module_get_namespace (const jerry_value_t module_val);
        -: 5363:```
        -: 5364:
        -: 5365:- `module_val` - module object
        -: 5366:- return
        -: 5367:  - object, if namespace object is available
        -: 5368:  - error, otherwise
        -: 5369:
        -: 5370:*New in version [[NEXT_RELEASE]]*.
        -: 5371:
        -: 5372:**Example**
        -: 5373:
        -: 5374:[doctest]: # (test="compile")
        -: 5375:
        -: 5376:```c
        -: 5377:#include <jerryscript.h>
        -: 5378:#include <stdio.h>
        -: 5379:
        -: 5380:int
    #####: 5381:main (void)
        -: 5382:{
    #####: 5383:  jerry_init (JERRY_INIT_EMPTY);
        -: 5384:
    #####: 5385:  const jerry_char_t script[] = "export var a = 6";
        -: 5386:
        -: 5387:  jerry_parse_options_t parse_options;
    #####: 5388:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5389:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5390:
    #####: 5391:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5392:  jerry_release_value (parse_options.resource_name);
        -: 5393:
    #####: 5394:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
    #####: 5395:  jerry_release_value (jerry_module_evaluate (module_value));
        -: 5396:
    #####: 5397:  jerry_value_t namespace_value = jerry_module_get_namespace (module_value);
        -: 5398:
        -: 5399:  /* Exports can be checked. */
        -: 5400:
    #####: 5401:  jerry_release_value (namespace_value);
    #####: 5402:  jerry_release_value (module_value);
        -: 5403:
    #####: 5404:  jerry_cleanup ();
        -: 5405:  return 0;
        -: 5406:}
        -: 5407:```
        -: 5408:
        -: 5409:**See also**
        -: 5410:
        -: 5411:- [jerry_module_link](#jerry_module_link)
        -: 5412:- [jerry_module_evaluate](#jerry_module_evaluate)
        -: 5413:
        -: 5414:## jerry_module_set_import_callback
        -: 5415:
        -: 5416:Sets the callback which is called when dynamic imports are resolved. The resolver
        -: 5417:receives the `user_value` assigned to the currently executed script, which should
        -: 5418:provide all the information that is necessary for the resolve.
        -: 5419:
        -: 5420:*Notes*:
        -: 5421:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5422:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5423:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5424:- The possible return values of the callback is explained
        -: 5425:  in [jerry_module_import_callback_t](#jerry_module_import_callback_t)
        -: 5426:
        -: 5427:**Prototype**
        -: 5428:
        -: 5429:```c
        -: 5430:void
        -: 5431:jerry_module_set_import_callback (jerry_module_import_callback_t callback_p,
        -: 5432:                                  void *user_p)
        -: 5433:```
        -: 5434:
        -: 5435:- `callback_p` - a [jerry_module_import_callback_t](#jerry_module_import_callback_t) callback which handles `import()` calls
        -: 5436:- `user_p` - user pointer passed to the callback
        -: 5437:
        -: 5438:*New in version [[NEXT_RELEASE]]*.
        -: 5439:
        -: 5440:**Example**
        -: 5441:
        -: 5442:[doctest]: # (test="compile")
        -: 5443:
        -: 5444:```c
        -: 5445:#include <jerryscript.h>
        -: 5446:#include <stdio.h>
        -: 5447:
        -: 5448:typedef struct {
        -: 5449:  jerry_value_t specifier;
        -: 5450:  jerry_value_t user_value;
        -: 5451:  jerry_value_t promise;
        -: 5452:} resolve_module_task_t;
        -: 5453:
        -: 5454:static jerry_value_t
    #####: 5455:resolve_dynamic (const jerry_value_t specifier, /**< module specifier */
        -: 5456:                 const jerry_value_t user_value, /**< user value assigned to the script */
        -: 5457:                 void *user_p) /**< user data */
        -: 5458:{
        -: 5459:  /* If the specified module has already been evaluated, this callback can
        -: 5460:   * return with it and the promise creation is automatically done by the engine.
        -: 5461:   * Otherwise the application usually adds a resolve task to a command queue. */
        -: 5462:
        -: 5463:  /* This very simple command queue supports only one task. */
    #####: 5464:  resolve_module_task_t *task_p = (resolve_module_task_t *) user_p;
    #####: 5465:  task_p->specifier = jerry_acquire_value (specifier);
    #####: 5466:  task_p->user_value = jerry_acquire_value (user_value);
        -: 5467:
        -: 5468:  /* This Promise should be evaluated later. */
    #####: 5469:  jerry_value_t promise = jerry_create_promise ();
    #####: 5470:  task_p->promise = jerry_acquire_value (promise);
    #####: 5471:  return promise;
        -: 5472:}
        -: 5473:
        -: 5474:int
    #####: 5475:main (void)
        -: 5476:{
    #####: 5477:  jerry_init (JERRY_INIT_EMPTY);
        -: 5478:
        -: 5479:  resolve_module_task_t task;
    #####: 5480:  jerry_module_set_import_callback (resolve_dynamic, &task);
        -: 5481:
    #####: 5482:  const jerry_char_t script[] = "import('modules/my_module.mjs').then(\n"
        -: 5483:                                "  function (namespace) { /* use namespace */},\n"
        -: 5484:                                "  function (error) { /* handle error */}\n"
        -: 5485:                                ")";
        -: 5486:
        -: 5487:  jerry_parse_options_t parse_options;
    #####: 5488:  parse_options.options = JERRY_PARSE_HAS_RESOURCE | JERRY_PARSE_HAS_USER_VALUE;
        -: 5489:
        -: 5490:  /* Resource is usually used for debugging purposes, e.g. for generating backtrace. */
    #####: 5491:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "dir/my_script.js");
        -: 5492:
        -: 5493:  /* User value should provide information for resolving dynamic imports.
        -: 5494:   * In this case it contains the full path excluding the filename. */
    #####: 5495:  parse_options.user_value = jerry_create_string ((const jerry_char_t *) "/home/user/dir");
        -: 5496:
    #####: 5497:  jerry_value_t script_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5498:  jerry_release_value (parse_options.resource_name);
    #####: 5499:  jerry_release_value (parse_options.user_value);
    #####: 5500:  jerry_release_value (jerry_run (script_value));
    #####: 5501:  jerry_release_value (script_value);
        -: 5502:
        -: 5503:  /* The application resolves both the module and the promise using the specifier
        -: 5504:   * and the user_value. In this example the specifier is modules/my_module.mjs. */
    #####: 5505:  const jerry_char_t module_script[] = "export var a = 5";
        -: 5506:
    #####: 5507:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE | JERRY_PARSE_HAS_USER_VALUE;
    #####: 5508:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "modules/my_module.mjs");
    #####: 5509:  parse_options.user_value = jerry_create_string ((const jerry_char_t *) "/home/user/dir/modules");
        -: 5510:
    #####: 5511:  jerry_value_t module_value = jerry_parse (module_script, sizeof (module_script) - 1, &parse_options);
    #####: 5512:  jerry_release_value (parse_options.resource_name);
    #####: 5513:  jerry_release_value (parse_options.user_value);
    #####: 5514:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
    #####: 5515:  jerry_release_value (jerry_module_evaluate (module_value));
        -: 5516:
        -: 5517:  /* The promise must be resolved with the namespace object, not the module. */
    #####: 5518:  jerry_value_t namespace_value = jerry_module_get_namespace (module_value);
    #####: 5519:  jerry_release_value (jerry_resolve_or_reject_promise (task.promise, namespace_value, true));
        -: 5520:
    #####: 5521:  jerry_release_value (namespace_value);
    #####: 5522:  jerry_release_value (module_value);
    #####: 5523:  jerry_release_value (task.specifier);
    #####: 5524:  jerry_release_value (task.user_value);
    #####: 5525:  jerry_release_value (task.promise);
        -: 5526:
        -: 5527:  /* Process promise handlers. */
    #####: 5528:  jerry_release_value (jerry_run_all_enqueued_jobs ());
        -: 5529:
    #####: 5530:  jerry_cleanup ();
        -: 5531:  return 0;
        -: 5532:}
        -: 5533:```
        -: 5534:
        -: 5535:**See also**
        -: 5536:- [jerry_module_import_callback_t](#jerry_module_import_callback_t)
        -: 5537:
        -: 5538:## jerry_native_module_create
        -: 5539:
        -: 5540:Creates a native module with a list of exports. The initial state of the module is linked.
        -: 5541:
        -: 5542:*Notes*:
        -: 5543:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5544:  when it is no longer needed.
        -: 5545:- Native pointers can be used to assign private data to a native module,
        -: 5546:  see [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -: 5547:- When `callback` is `NULL`, no function is called when the module is evaluated,
        -: 5548:  only its state is changed to evaluated.
        -: 5549:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5550:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5551:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5552:
        -: 5553:**Prototype**
        -: 5554:
        -: 5555:```c
        -: 5556:jerry_value_t
        -: 5557:jerry_native_module_create (jerry_native_module_evaluate_callback_t callback,
        -: 5558:                            const jerry_value_t * const exports_p,
        -: 5559:                            size_t number_of_exports);
        -: 5560:```
        -: 5561:
        -: 5562:- `callback` - a [jerry_native_module_evaluate_callback_t](#jerry_native_module_evaluate_callback_t) callback
        -: 5563:               which is called by [jerry_module_evaluate](#jerry_module_evaluate) to evaluate the native module.
        -: 5564:- `exports_p` - list of the exported bindings of the module, must be valid string identifiers.
        -: 5565:- `number_of_exports` - number of exports in the `exports_p` list.
        -: 5566:- return
        -: 5567:  - a native module, if the module is successfully created
        -: 5568:  - error, otherwise
        -: 5569:
        -: 5570:*New in version [[NEXT_RELEASE]]*.
        -: 5571:
        -: 5572:**Example**
        -: 5573:
        -: 5574:[doctest]: # (test="compile")
        -: 5575:
        -: 5576:```c
        -: 5577:#include <jerryscript.h>
        -: 5578:
        -: 5579:int
    #####: 5580:main (void)
        -: 5581:{
    #####: 5582:  jerry_init (JERRY_INIT_EMPTY);
        -: 5583:
    #####: 5584:  jerry_value_t exports[2] =
        -: 5585:  {
    #####: 5586:    jerry_create_string ((const jerry_char_t *) "first_export"),
    #####: 5587:    jerry_create_string ((const jerry_char_t *) "second_export")
        -: 5588:  };
        -: 5589:
    #####: 5590:  jerry_value_t native_module = jerry_native_module_create (NULL, exports, 2);
        -: 5591:
    #####: 5592:  jerry_release_value (exports[0]);
    #####: 5593:  jerry_release_value (exports[1]);
    #####: 5594:  jerry_release_value (native_module);
        -: 5595:
    #####: 5596:  jerry_cleanup ();
        -: 5597:  return 0;
        -: 5598:}
        -: 5599:```
        -: 5600:
        -: 5601:**See also**
        -: 5602:
        -: 5603:- [jerry_module_link](#jerry_module_link)
        -: 5604:- [jerry_module_evaluate](#jerry_module_evaluate)
        -: 5605:- [jerry_native_module_get_export](#jerry_native_module_get_export)
        -: 5606:- [jerry_native_module_set_export](#jerry_native_module_set_export)
        -: 5607:
        -: 5608:## jerry_native_module_get_export
        -: 5609:
        -: 5610:Gets the value of an export binding which belongs to a native module.
        -: 5611:
        -: 5612:*Notes*:
        -: 5613:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5614:  when it is no longer needed.
        -: 5615:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5616:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5617:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5618:
        -: 5619:**Prototype**
        -: 5620:
        -: 5621:```c
        -: 5622:jerry_value_t
        -: 5623:jerry_native_module_get_export (const jerry_value_t native_module_val,
        -: 5624:                                const jerry_value_t export_name_val);
        -: 5625:```
        -: 5626:
        -: 5627:- `module_val` - a native module object.
        -: 5628:- `export_name_val` - string identifier of the export.
        -: 5629:- return
        -: 5630:  - value of the export, if success
        -: 5631:  - error, otherwise
        -: 5632:
        -: 5633:*New in version [[NEXT_RELEASE]]*.
        -: 5634:
        -: 5635:**Example**
        -: 5636:
        -: 5637:[doctest]: # (test="compile")
        -: 5638:
        -: 5639:```c
        -: 5640:#include <jerryscript.h>
        -: 5641:
        -: 5642:int
    #####: 5643:main (void)
        -: 5644:{
    #####: 5645:  jerry_init (JERRY_INIT_EMPTY);
        -: 5646:
    #####: 5647:  jerry_value_t export = jerry_create_string ((const jerry_char_t *) "an_export");
        -: 5648:
    #####: 5649:  jerry_value_t native_module = jerry_native_module_create (NULL, &export, 1);
        -: 5650:
    #####: 5651:  jerry_value_t value = jerry_native_module_get_export (native_module, export);
    #####: 5652:  jerry_release_value (value);
        -: 5653:
    #####: 5654:  jerry_release_value (export);
    #####: 5655:  jerry_release_value (native_module);
        -: 5656:
    #####: 5657:  jerry_cleanup ();
        -: 5658:  return 0;
        -: 5659:}
        -: 5660:```
        -: 5661:
        -: 5662:**See also**
        -: 5663:
        -: 5664:- [jerry_native_module_create](#jerry_native_module_create)
        -: 5665:- [jerry_native_module_set_export](#jerry_native_module_set_export)
        -: 5666:
        -: 5667:## jerry_native_module_set_export
        -: 5668:
        -: 5669:Sets the value of an export binding which belongs to a native module.
        -: 5670:
        -: 5671:*Notes*:
        -: 5672:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5673:  when it is no longer needed.
        -: 5674:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5675:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5676:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5677:
        -: 5678:**Prototype**
        -: 5679:
        -: 5680:```c
        -: 5681:jerry_value_t
        -: 5682:jerry_value_t jerry_native_module_set_export (const jerry_value_t native_mmodule_val,
        -: 5683:                                              const jerry_value_t export_name_val,
        -: 5684:                                              const jerry_value_t value_to_set)
        -: 5685:```
        -: 5686:
        -: 5687:- `module_val` - a native module object.
        -: 5688:- `export_name_val` - string identifier of the export.
        -: 5689:- `value_to_set` - new value of the export.
        -: 5690:- return
        -: 5691:  - true, if success
        -: 5692:  - error, otherwise
        -: 5693:
        -: 5694:*New in version [[NEXT_RELEASE]]*.
        -: 5695:
        -: 5696:**Example**
        -: 5697:
        -: 5698:[doctest]: # (test="compile")
        -: 5699:
        -: 5700:```c
        -: 5701:#include <jerryscript.h>
        -: 5702:
        -: 5703:int
    #####: 5704:main (void)
        -: 5705:{
    #####: 5706:  jerry_init (JERRY_INIT_EMPTY);
        -: 5707:
    #####: 5708:  jerry_value_t export = jerry_create_string ((const jerry_char_t *) "an_export");
        -: 5709:
    #####: 5710:  jerry_value_t native_module = jerry_native_module_create (NULL, &export, 1);
        -: 5711:
    #####: 5712:  jerry_value_t number = jerry_create_number (3.5);
    #####: 5713:  jerry_value_t value = jerry_native_module_set_export (native_module, export, number);
    #####: 5714:  jerry_release_value (value);
    #####: 5715:  jerry_release_value (number);
        -: 5716:
    #####: 5717:  jerry_release_value (export);
    #####: 5718:  jerry_release_value (native_module);
        -: 5719:
    #####: 5720:  jerry_cleanup ();
        -: 5721:  return 0;
        -: 5722:}
        -: 5723:```
        -: 5724:
        -: 5725:**See also**
        -: 5726:
        -: 5727:- [jerry_native_module_create](#jerry_native_module_create)
        -: 5728:- [jerry_native_module_get_export](#jerry_native_module_get_export)
        -: 5729:
        -: 5730:# Functions for promise objects
        -: 5731:
        -: 5732:These APIs all depend on the es.next profile (or on some build options).
        -: 5733:
        -: 5734:## jerry_get_promise_result
        -: 5735:
        -: 5736:**Summary**
        -: 5737:
        -: 5738:The function returns the result of a Promise object.
        -: 5739:
        -: 5740:*Notes*:
        -: 5741:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5742:  is no longer needed.
        -: 5743:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 5744:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 5745:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5746:- The es.next profile enables this by default.
        -: 5747:
        -: 5748:
        -: 5749:**Prototype**
        -: 5750:
        -: 5751:```c
        -: 5752:jerry_value_t
        -: 5753:jerry_get_promise_result (const jerry_value_t promise);
        -: 5754:```
        -: 5755:
        -: 5756:- `promise` - the input Promise object.
        -: 5757:- return
        -: 5758:  - The result of the Promise.
        -: 5759:  - If the Promise is not resolved yet the result is the 'undefined' value.
        -: 5760:  - A TypeError is returned if the input argument was not a Promise object or
        -: 5761:    the Promise support was not built into the library.
        -: 5762:
        -: 5763:*New in version 2.2*.
        -: 5764:
        -: 5765:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 5766:
        -: 5767:**Example**
        -: 5768:
        -: 5769:[doctest]: # (test="compile")
        -: 5770:
        -: 5771:```c
        -: 5772:#include <jerryscript.h>
        -: 5773:
        -: 5774:static void
        -: 5775:example (void)
        -: 5776:{
        -: 5777:  // acquire/create a promise object.
        -: 5778:  jerry_value_t promise = jerry_create_promise ();
        -: 5779:  {
        -: 5780:    // prepare the argumnent for the resolve or reject.
        -: 5781:    jerry_value_t argument = jerry_create_number (33);
        -: 5782:
        -: 5783:    jerry_value_t is_ok = jerry_resolve_or_reject_promise (promise,
        -: 5784:                                                           argument,
        -: 5785:                                                           true);
        -: 5786:    // 'is_ok' should be checked if it is an error or not.
        -: 5787:    // skipped in this example
        -: 5788:    jerry_release_value (is_ok);
        -: 5789:    jerry_release_value (argument);
        -: 5790:  }
        -: 5791:
        -: 5792:  jerry_value_t promise_result = jerry_get_promise_result (promise);
        -: 5793:  // 'promise_result' is now the number 33.
        -: 5794:
        -: 5795:  jerry_release_value (promise_result);
        -: 5796:  jerry_release_value (promise);
        -: 5797:}
        -: 5798:```
        -: 5799:
        -: 5800:**See also**
        -: 5801:
        -: 5802:- [jerry_create_promise](#jerry_create_promise)
        -: 5803:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 5804:
        -: 5805:## jerry_get_promise_state
        -: 5806:
        -: 5807:**Summary**
        -: 5808:
        -: 5809:*Notes*:
        -: 5810:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5811:  is no longer needed.
        -: 5812:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 5813:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 5814:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5815:- The es.next profile enables this by default.
        -: 5816:
        -: 5817:
        -: 5818:**Prototype**
        -: 5819:
        -: 5820:```c
        -: 5821:jerry_promise_state_t
        -: 5822:jerry_get_promise_state (const jerry_value_t promise);
        -: 5823:```
        -: 5824:
        -: 5825:- `promise` - the input promise object.
        -: 5826:- return
        -: 5827:  - [jerry_promise_state_t](#jerry_promise_state_t)
        -: 5828:  - `JERRY_PROMISE_STATE_NONE` is returned if the input argument was not a promise object or
        -: 5829:    the Promise support was not built into the library.
        -: 5830:
        -: 5831:*New in version 2.2*.
        -: 5832:
        -: 5833:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 5834:
        -: 5835:**Example**
        -: 5836:
        -: 5837:[doctest]: # (test="compile")
        -: 5838:
        -: 5839:```c
        -: 5840:#include <jerryscript.h>
        -: 5841:
        -: 5842:static void
        -: 5843:example (void)
        -: 5844:{
        -: 5845:  // acquire/create a promise object.
        -: 5846:  jerry_value_t promise = jerry_create_promise ();
        -: 5847:
        -: 5848:  jerry_promise_state_t start_state = jerry_get_promise_state (promise);
        -: 5849:  // a Promise have a default state of JERRY_PROMISE_STATE_PENDING
        -: 5850:
        -: 5851:  {
        -: 5852:    // prepare the argumnent for the resolve or reject.
        -: 5853:    jerry_value_t argument = jerry_create_number (33);
        -: 5854:
        -: 5855:    jerry_value_t is_ok = jerry_resolve_or_reject_promise (promise,
        -: 5856:                                                           argument,
        -: 5857:                                                           true);
        -: 5858:    // 'is_ok' should be checked if it is an error or not.
        -: 5859:    // skipped in this example
        -: 5860:    jerry_release_value (is_ok);
        -: 5861:    jerry_release_value (argument);
        -: 5862:  }
        -: 5863:
        -: 5864:  jerry_promise_state_t current_state = jerry_get_promise_state (promise);
        -: 5865:  // at this point the Promise should be in the JERRY_PROMISE_STATE_FULFILLED state.
        -: 5866:
        -: 5867:  jerry_release_value (promise);
        -: 5868:}
        -: 5869:```
        -: 5870:
        -: 5871:**See also**
        -: 5872:
        -: 5873:- [jerry_create_promise](#jerry_create_promise)
        -: 5874:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 5875:
        -: 5876:## jerry_promise_set_callback
        -: 5877:
        -: 5878:**Summary**
        -: 5879:
        -: 5880:Sets a callback for tracking Promise and async operations.
        -: 5881:
        -: 5882:*Notes*:
        -: 5883:- This API depends on a build option (`JERRY_PROMISE_CALLBACK`) and can be checked
        -: 5884:  in runtime with the `JERRY_FEATURE_PROMISE_CALLBACK` feature enum value,
        -: 5885:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5886:
        -: 5887:
        -: 5888:**Prototype**
        -: 5889:
        -: 5890:```c
        -: 5891:void jerry_promise_set_callback (jerry_promise_event_filter_t filters, jerry_promise_callback_t callback,
        -: 5892:                                 void *user_p);
        -: 5893:```
        -: 5894:
        -: 5895:- `filters` - combination of [jerry_promise_event_filter_t](#jerry_promise_event_filter_t) options
        -: 5896:- `callback` - callback function, the previously set value is overwritten,
        -: 5897:               and setting NULL disables the tracking
        -: 5898:- `user_p` - pointer passed to the callback function, can be NULL
        -: 5899:
        -: 5900:*New in version [[NEXT_RELEASE]]*.
        -: 5901:
        -: 5902:**Example**
        -: 5903:
        -: 5904:[doctest]: # ()
        -: 5905:
        -: 5906:```c
        -: 5907:#include <stdio.h>
        -: 5908:#include <string.h>
        -: 5909:#include "jerryscript.h"
        -: 5910:
        -: 5911:static void
    #####: 5912:promise_callback (jerry_promise_event_type_t event_type, /**< event type */
        -: 5913:                  const jerry_value_t object, /**< target object */
        -: 5914:                  const jerry_value_t value, /**< optional argument */
        -: 5915:                  void *user_p) /**< user pointer passed to the callback */
        -: 5916:{
    #####: 5917:  if (event_type == JERRY_PROMISE_EVENT_CREATE)
        -: 5918:  {
    #####: 5919:    printf ("A new promise is created\n");
        -: 5920:
    #####: 5921:    if (!jerry_value_is_undefined (value))
        -: 5922:    {
        -: 5923:      printf ("  The Promise is created by Promise.then() built-in.\n");
        -: 5924:    }
        -: 5925:  }
    #####: 5926:} /* promise_callback */
        -: 5927:
        -: 5928:int
    #####: 5929:main (void)
        -: 5930:{
    #####: 5931:  jerry_init (JERRY_INIT_EMPTY);
        -: 5932:
    #####: 5933:  jerry_promise_set_callback (JERRY_PROMISE_EVENT_FILTER_MAIN, promise_callback, NULL);
        -: 5934:
    #####: 5935:  const char *source_p = "var p = Promise.resolve(0)\n"
        -: 5936:                         "p.then(function (v) { return v; })";
    #####: 5937:  jerry_release_value (jerry_eval ((const jerry_char_t *) source_p,
        -: 5938:                                   strlen (source_p),
        -: 5939:                                   JERRY_PARSE_NO_OPTS));
        -: 5940:
    #####: 5941:  jerry_cleanup ();
        -: 5942:  return 0;
        -: 5943:} /* main */
        -: 5944:```
        -: 5945:
        -: 5946:**See also**
        -: 5947:
        -: 5948:- [jerry_create_promise](#jerry_create_promise)
        -: 5949:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 5950:
        -: 5951:## jerry_from_property_descriptor
        -: 5952:
        -: 5953:**Summary**
        -: 5954:
        -: 5955:This API function is equivalent to FromPropertyDescriptor operation defined in ECMA 262 v11 6.2.5.4.
        -: 5956:It returns with an ECMAScript Object which represents the property attributes.
        -: 5957:
        -: 5958:*Notes*:
        -: 5959:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5960:  is no longer needed.
        -: 5961:
        -: 5962:**Prototype**
        -: 5963:
        -: 5964:```c
        -: 5965:jerry_value_t
        -: 5966:jerry_from_property_descriptor (const jerry_property_descriptor_t *src_prop_desc_p)
        -: 5967:```
        -: 5968:
        -: 5969:- `src_prop_desc_p` - the input property descriptor.
        -: 5970:- return
        -: 5971:  - [jerry_value_t](#jerry_value_t)
        -: 5972:  - jerry value - if success
        -: 5973:  - value marked with error flag - otherwise
        -: 5974:
        -: 5975:*New in version 2.4*.
        -: 5976:
        -: 5977:**Example**
        -: 5978:
        -: 5979:[doctest]: # (test="compile")
        -: 5980:
        -: 5981:```c
        -: 5982:#include <jerryscript.h>
        -: 5983:
        -: 5984:static void
        -: 5985:example (void)
        -: 5986:{
        -: 5987:  jerry_value_t prop_name = jerry_create_string_from_utf8 ((jerry_char_t *) "value");
        -: 5988:
        -: 5989:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 5990:
        -: 5991:  prop_desc.value = prop_name;
        -: 5992:  prop_desc.flags |= JERRY_PROP_IS_VALUE_DEFINED;
        -: 5993:
        -: 5994:  jerry_value_t from_object = jerry_from_property_descriptor (&prop_desc);
        -: 5995:
        -: 5996:  jerry_release_value (prop_name);
        -: 5997:  jerry_release_value (from_object);
        -: 5998:  jerry_property_descriptor_free (&prop_desc);
        -: 5999:}
        -: 6000:```
        -: 6001:
        -: 6002:## jerry_to_property_descriptor
        -: 6003:
        -: 6004:**Summary**
        -: 6005:
        -: 6006:This API function is equivalent to ToPropertyDescriptor operation defined in ECMA 262 v11 6.2.5.5.
        -: 6007:It decodes the ECMAScript object and fills the fields of a JerryScript property descriptor.
        -: 6008:
        -: 6009:*Notes*:
        -: 6010:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6011:  is no longer needed.
        -: 6012:
        -: 6013:**Prototype**
        -: 6014:
        -: 6015:```c
        -: 6016:jerry_value_t
        -: 6017:jerry_to_property_descriptor (jerry_value_t obj_value, jerry_property_descriptor_t *out_prop_desc_p);
        -: 6018:```
        -: 6019:
        -: 6020:- `obj_value` - the input object
        -: 6021:- `src_prop_desc_p` - the output property descriptor.
        -: 6022:- return
        -: 6023:  - [jerry_value_t](#jerry_value_t)
        -: 6024:  - true, if success
        -: 6025:  - thrown error, otherwise
        -: 6026:
        -: 6027:*New in version 2.4*.
        -: 6028:
        -: 6029:**Example**
        -: 6030:
        -: 6031:[doctest]: # (test="compile")
        -: 6032:
        -: 6033:```c
        -: 6034:#include <jerryscript.h>
        -: 6035:
        -: 6036:static void
        -: 6037:example (void)
        -: 6038:{
        -: 6039:  jerry_value_t object = jerry_create_object ();
        -: 6040:  jerry_value_t prop_name = jerry_create_string_from_utf8 ((jerry_char_t *) "value");
        -: 6041:  jerry_value_t value = jerry_create_boolean (true);
        -: 6042:  jerry_property_descriptor_t prop_desc;
        -: 6043:
        -: 6044:  jerry_release_value (jerry_set_property (object, prop_name, prop_name));
        -: 6045:
        -: 6046:  jerry_release_value (jerry_to_property_descriptor (object, &prop_desc));
        -: 6047:
        -: 6048:  jerry_release_value (object);
        -: 6049:  jerry_release_value (prop_name);
        -: 6050:  jerry_release_value (value);
        -: 6051:  jerry_property_descriptor_free (&prop_desc);
        -: 6052:}
        -: 6053:```
        -: 6054:
        -: 6055:## jerry_resolve_or_reject_promise
        -: 6056:
        -: 6057:**Summary**
        -: 6058:
        -: 6059:Resolve or reject the promise with an argument.
        -: 6060:
        -: 6061:*Note*:
        -: 6062:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6063:  is no longer needed.
        -: 6064:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 6065:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 6066:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6067:- The es.next profile enables this by default.
        -: 6068:
        -: 6069:
        -: 6070:**Prototype**
        -: 6071:
        -: 6072:```c
        -: 6073:jerry_value_t
        -: 6074:jerry_resolve_or_reject_promise (jerry_value_t promise,
        -: 6075:                                 jerry_value_t argument,
        -: 6076:                                 bool is_resolve)
        -: 6077:```
        -: 6078:
        -: 6079:- `promise` - the promise value
        -: 6080:- `argument` - the argument for resolve or reject
        -: 6081:- `is_resolve` - whether the promise should be resolved or rejected
        -: 6082:- return value
        -: 6083:  - undefined jerry value - resolve or reject successed
        -: 6084:  - jerry value with error flag - otherwise
        -: 6085:
        -: 6086:*New in version 2.0*.
        -: 6087:
        -: 6088:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 6089:
        -: 6090:**Example**
        -: 6091:
        -: 6092:```c
        -: 6093:{
        -: 6094:  jerry_value_t promise = ... // acquire/create a promise object.
        -: 6095:
        -: 6096:  ...
        -: 6097:
        -: 6098:  bool is_resolve = ... // whether the promise should be resolved or rejected
        -: 6099:  jerry_value_t argument = ... // prepare the argumnent for the resolve or reject.
        -: 6100:
        -: 6101:  jerry_value_t is_ok = jerry_resolve_or_reject_promise (promise,
        -: 6102:                                                         argument,
        -: 6103:                                                         is_resolve);
        -: 6104:
        -: 6105:  if (jerry_value_is_error (is_ok))
        -: 6106:  {
        -: 6107:    // handle the error.
        -: 6108:  }
        -: 6109:
        -: 6110:  jerry_release_value (is_ok);
        -: 6111:  jerry_release_value (argument);
        -: 6112:  jerry_release_value (promise);
        -: 6113:}
        -: 6114:```
        -: 6115:
        -: 6116:**See also**
        -: 6117:
        -: 6118:- [jerry_release_value](#jerry_release_value)
        -: 6119:- [jerry_value_is_error](#jerry_value_is_error)
        -: 6120:
        -: 6121:# Functions for symbols
        -: 6122:
        -: 6123:These APIs all depend on the es.next profile (or on build options).
        -: 6124:
        -: 6125:## jerry_get_well_known_symbol
        -: 6126:
        -: 6127:**Summary**
        -: 6128:
        -: 6129:Get the well-known symbol corresponding to the given [well-known symbol id](#jerry_well_known_symbol_t).
        -: 6130:
        -: 6131:*Notes*:
        -: 6132:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6133:  is no longer needed.
        -: 6134:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 6135:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 6136:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6137:- The es.next profile enables this by default.
        -: 6138:- If the symbol support is not enabled an undefined will be returned.
        -: 6139:
        -: 6140:**Prototype**
        -: 6141:
        -: 6142:```c
        -: 6143:jerry_value_t
        -: 6144:jerry_get_well_known_symbol (jerry_well_known_symbol_t symbol);
        -: 6145:```
        -: 6146:
        -: 6147:- `symbol` - [jerry_well_known_symbol_t](#jerry_well_known_symbol_t) enum value
        -: 6148:- return value
        -: 6149:  - undefined value - if invalid well-known symbol was requested
        -: 6150:  - well-known symbol value, otherwise
        -: 6151:
        -: 6152:*New in version 2.4*.
        -: 6153:
        -: 6154:**Example**
        -: 6155:
        -: 6156:[doctest]: # ()
        -: 6157:
        -: 6158:```c
        -: 6159:#include "jerryscript.h"
        -: 6160:
        -: 6161:int
    #####: 6162:main (void)
        -: 6163:{
    #####: 6164:  jerry_init (JERRY_INIT_EMPTY);
        -: 6165:
    #####: 6166:  jerry_value_t array_value = jerry_create_array (5);
    #####: 6167:  jerry_value_t symbol_iterator = jerry_get_well_known_symbol (JERRY_SYMBOL_ITERATOR);
    #####: 6168:  jerry_value_t array_iterator = jerry_get_property (array_value, symbol_iterator);
        -: 6169:
        -: 6170:  // usage of array_iterator
        -: 6171:
    #####: 6172:  jerry_release_value (array_iterator);
    #####: 6173:  jerry_release_value (symbol_iterator);
    #####: 6174:  jerry_release_value (array_value);
        -: 6175:
    #####: 6176:  jerry_cleanup ();
        -: 6177:  return 0;
        -: 6178:}
        -: 6179:```
        -: 6180:
        -: 6181:**See also**
        -: 6182:
        -: 6183:- [jerry_well_known_symbol_t](#jerry_well_known_symbol_t)
        -: 6184:
        -: 6185:## jerry_get_symbol_description
        -: 6186:
        -: 6187:**Summary**
        -: 6188:
        -: 6189:Returns with the `[[Description]]` internal property of a symbol value.
        -: 6190:
        -: 6191:*Notes*:
        -: 6192:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6193:  is no longer needed.
        -: 6194:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 6195:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 6196:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6197:- The es.next profile enables this by default.
        -: 6198:- If the symbol support is not enabled an error will be returned.
        -: 6199:
        -: 6200:**Prototype**
        -: 6201:
        -: 6202:```c
        -: 6203:jerry_value_t
        -: 6204:jerry_get_symbol_description (const jerry_value_t value);
        -: 6205:```
        -: 6206:
        -: 6207:- `value` - symbol value
        -: 6208:- return value
        -: 6209:  - string or undefined value containing the symbol's description - if success
        -: 6210:  - thrown error, otherwise
        -: 6211:
        -: 6212:*New in version 2.4*.
        -: 6213:
        -: 6214:**Example**
        -: 6215:
        -: 6216:[doctest]: # ()
        -: 6217:
        -: 6218:```c
        -: 6219:#include "jerryscript.h"
        -: 6220:
        -: 6221:int
    #####: 6222:main (void)
        -: 6223:{
    #####: 6224:  jerry_init (JERRY_INIT_EMPTY);
        -: 6225:
    #####: 6226:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "foo");
    #####: 6227:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 6228:
    #####: 6229:  jerry_release_value (string_value);
        -: 6230:
    #####: 6231:  jerry_value_t symbol_description = jerry_get_symbol_description (symbol_value);
        -: 6232:
        -: 6233:  // usage of symbol_desc_string
        -: 6234:
    #####: 6235:  jerry_release_value (symbol_description);
    #####: 6236:  jerry_release_value (symbol_value);
        -: 6237:
    #####: 6238:  jerry_cleanup ();
        -: 6239:  return 0;
        -: 6240:}
        -: 6241:```
        -: 6242:
        -: 6243:**See also**
        -: 6244:
        -: 6245:- [jerry_get_symbol_descriptive_string](#jerry_get_symbol_descriptive_string)
        -: 6246:
        -: 6247:## jerry_get_symbol_descriptive_string
        -: 6248:
        -: 6249:**Summary**
        -: 6250:
        -: 6251:Call the SymbolDescriptiveString ecma builtin operation on the API value.
        -: 6252:Based on ECMA 262 v6 19.4.3.2.1 this is in the form of `Symbol(<description>)`.
        -: 6253:
        -: 6254:*Notes*:
        -: 6255:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6256:  is no longer needed.
        -: 6257:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 6258:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 6259:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6260:- The es.next profile enables this by default.
        -: 6261:- If the symbol support is not enabled an error will be returned.
        -: 6262:
        -: 6263:**Prototype**
        -: 6264:
        -: 6265:```c
        -: 6266:jerry_value_t
        -: 6267:jerry_get_symbol_descriptive_string (const jerry_value_t value);
        -: 6268:```
        -: 6269:
        -: 6270:- `value` - symbol value
        -: 6271:- return value
        -: 6272:  - string value containing the symbol's descriptive string - if success
        -: 6273:  - thrown error, otherwise
        -: 6274:
        -: 6275:*New in version 2.0*.
        -: 6276:
        -: 6277:**Example**
        -: 6278:
        -: 6279:[doctest]: # ()
        -: 6280:
        -: 6281:```c
        -: 6282:#include "jerryscript.h"
        -: 6283:
        -: 6284:int
    #####: 6285:main (void)
        -: 6286:{
    #####: 6287:  jerry_init (JERRY_INIT_EMPTY);
        -: 6288:
    #####: 6289:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "foo");
    #####: 6290:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 6291:
    #####: 6292:  jerry_release_value (string_value);
        -: 6293:
    #####: 6294:  jerry_value_t symbol_desc_string = jerry_get_symbol_descriptive_string (symbol_value);
        -: 6295:
        -: 6296:  // usage of symbol_desc_string
        -: 6297:
    #####: 6298:  jerry_release_value (symbol_desc_string);
    #####: 6299:  jerry_release_value (symbol_value);
        -: 6300:
    #####: 6301:  jerry_cleanup ();
        -: 6302:  return 0;
        -: 6303:}
        -: 6304:```
        -: 6305:
        -: 6306:**See also**
        -: 6307:
        -: 6308:- [jerry_get_symbol_description](#jerry_get_symbol_description)
        -: 6309:
        -: 6310:# Functions for BigInts
        -: 6311:
        -: 6312:These APIs all depend on build option (`JERRY_BUILTIN_BIGINT`).
        -: 6313:
        -: 6314:## jerry_get_bigint_size_in_digits
        -: 6315:
        -: 6316:**Summary**
        -: 6317:
        -: 6318:Returns the size of uint64 digits of a BigInt value. This value is the
        -: 6319:minimum size of the buffer which can hold all digits of a BigInt value when
        -: 6320:the digits are retreived by `[jerry_get_bigint_digits](#jerry_get_bigint_digits)`.
        -: 6321:
        -: 6322:*Notes*:
        -: 6323:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 6324:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 6325:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6326:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6327:  is no longer needed.
        -: 6328:
        -: 6329:**Prototype**
        -: 6330:
        -: 6331:```c
        -: 6332:uint32_t
        -: 6333:jerry_get_bigint_size_in_digits (jerry_value_t value)
        -: 6334:```
        -: 6335:
        -: 6336:- `value` - BigInt value
        -: 6337:- return value
        -: 6338:  - number of digits (can be zero for BigInt zero)
        -: 6339:  - if value is not a BigInt value, it returns with zero
        -: 6340:
        -: 6341:*New in version 2.4*.
        -: 6342:
        -: 6343:**Example**
        -: 6344:
        -: 6345:[doctest]: # ()
        -: 6346:
        -: 6347:```c
        -: 6348:#include "jerryscript.h"
        -: 6349:
        -: 6350:int
    #####: 6351:main (void)
        -: 6352:{
    #####: 6353:  jerry_init (JERRY_INIT_EMPTY);
        -: 6354:
    #####: 6355:  uint64_t digits[4] = { 0x1, 0x1, 0x0, 0x0 };
    #####: 6356:  jerry_value_t bigint_value = jerry_create_bigint (digits, 4, true);
        -: 6357:
        -: 6358:  /* Prints two, because the leading zeroes in digits buffer are discarded. */
    #####: 6359:  printf("size: %d\n", (int) jerry_get_bigint_size_in_digits (bigint_value));
        -: 6360:
    #####: 6361:  jerry_release_value (bigint_value);
        -: 6362:
    #####: 6363:  jerry_cleanup ();
        -: 6364:  return 0;
        -: 6365:}
        -: 6366:```
        -: 6367:
        -: 6368:**See also**
        -: 6369:
        -: 6370:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 6371:- [jerry_get_bigint_digits](#jerry_get_bigint_digits)
        -: 6372:
        -: 6373:
        -: 6374:## jerry_get_bigint_digits
        -: 6375:
        -: 6376:**Summary**
        -: 6377:
        -: 6378:Copies the uint64 digits of a BigInt value into a buffer. This function supports any
        -: 6379:buffer sizes. If the buffer size is smaller than the size returned by
        -: 6380:`[jerry_get_bigint_size_in_digits](#jerry_get_bigint_size_in_digits)`, only the
        -: 6381:least significant digits are copied into the buffer. If the buffer size is greater,
        -: 6382:the unused digits are filled with zero.
        -: 6383:
        -: 6384:*Notes*:
        -: 6385:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 6386:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 6387:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6388:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6389:  is no longer needed.
        -: 6390:
        -: 6391:**Prototype**
        -: 6392:
        -: 6393:```c
        -: 6394:void
        -: 6395:jerry_get_bigint_digits (jerry_value_t value, uint64_t *digits_p, uint32_t size, bool *sign_p)
        -: 6396:```
        -: 6397:
        -: 6398:- `value` - BigInt value
        -: 6399:- `digits_p` - output buffer for digits
        -: 6400:- `size` - size of the output buffer
        -: 6401:- `sign_p` - the boolean passed to the function is set to false when the BigInt
        -: 6402:             is positive, and set to true otherwise (this parameter can be NULL)
        -: 6403:
        -: 6404:*New in version 2.4*.
        -: 6405:
        -: 6406:**Example**
        -: 6407:
        -: 6408:[doctest]: # ()
        -: 6409:
        -: 6410:```c
        -: 6411:#include "jerryscript.h"
        -: 6412:
        -: 6413:int
    #####: 6414:main (void)
        -: 6415:{
    #####: 6416:  jerry_init (JERRY_INIT_EMPTY);
        -: 6417:
    #####: 6418:  uint64_t digits[4] = { 0x1, 0x1, 0x0, 0x0 };
    #####: 6419:  jerry_value_t bigint_value = jerry_create_bigint (digits, 4, true);
        -: 6420:
        -: 6421:  uint64_t get_digits[4];
        -: 6422:  bool sign;
    #####: 6423:  jerry_get_bigint_digits (bigint_value, get_digits, 2, &sign);
        -: 6424:
    #####: 6425:  jerry_release_value (bigint_value);
        -: 6426:
    #####: 6427:  jerry_cleanup ();
        -: 6428:  return 0;
        -: 6429:}
        -: 6430:```
        -: 6431:
        -: 6432:**See also**
        -: 6433:
        -: 6434:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 6435:- [jerry_get_bigint_size_in_digits](#jerry_get_bigint_size_in_digits)
        -: 6436:
        -: 6437:
        -: 6438:# Functions for Proxy objects
        -: 6439:
        -: 6440:These APIs all depend on build option (`JERRY_BUILTIN_PROXY`).
        -: 6441:
        -: 6442:## jerry_get_proxy_target
        -: 6443:
        -: 6444:**Summary**
        -: 6445:
        -: 6446:Gets the target object of a Proxy object.
        -: 6447:
        -: 6448:*Notes*:
        -: 6449:- This API depends on a build option (`JERRY_BUILTIN_PROXY`) and can be checked
        -: 6450:  in runtime with the `JERRY_FEATURE_PROXY` feature enum value,
        -: 6451:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6452:- The es.next profile enables this by default.
        -: 6453:
        -: 6454:
        -: 6455:**Prototype**
        -: 6456:
        -: 6457:```c
        -: 6458:jerry_value_t
        -: 6459:jerry_get_proxy_target (jerry_value_t proxy_value);
        -: 6460:```
        -: 6461:
        -: 6462:- `proxy_value` - Proxy object value
        -: 6463:- return value
        -: 6464:  - type error - if proxy_value is not a Proxy object
        -: 6465:  - target object - otherwise
        -: 6466:
        -: 6467:*New in version 2.4*.
        -: 6468:
        -: 6469:**Example**
        -: 6470:
        -: 6471:```c
        -: 6472:{
        -: 6473:  jerry_value_t target = jerry_create_object ();
        -: 6474:  jerry_value_t handler = jerry_create_object ();
        -: 6475:  jerry_value_t proxy = jerry_create_proxy (target, handler);
        -: 6476:
        -: 6477:  jerry_release_value (target);
        -: 6478:  jerry_release_value (handler);
        -: 6479:
        -: 6480:  target = jerry_get_proxy_target (proxy);
        -: 6481:
        -: 6482:  // ... usage of the target
        -: 6483:
        -: 6484:  jerry_release_value (target);
        -: 6485:  jerry_release_value (proxy);
        -: 6486:}
        -: 6487:```
        -: 6488:
        -: 6489:**See also**
        -: 6490:
        -: 6491:- [jerry_create_proxy](#jerry_create_proxy)
        -: 6492:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 6493:- [jerry_get_proxy_handler](#jerry_get_proxy_handler)
        -: 6494:
        -: 6495:## jerry_get_proxy_handler
        -: 6496:
        -: 6497:**Summary**
        -: 6498:
        -: 6499:Gets the handler object of a Proxy object.
        -: 6500:
        -: 6501:*Notes*:
        -: 6502:- This API depends on a build option (`JERRY_BUILTIN_PROXY`) and can be checked
        -: 6503:  in runtime with the `JERRY_FEATURE_PROXY` feature enum value,
        -: 6504:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6505:- The es.next profile enables this by default.
        -: 6506:
        -: 6507:
        -: 6508:**Prototype**
        -: 6509:
        -: 6510:```c
        -: 6511:jerry_value_t
        -: 6512:jerry_get_proxy_handler (jerry_value_t proxy_value);
        -: 6513:```
        -: 6514:
        -: 6515:- `proxy_value` - Proxy object value
        -: 6516:- return value
        -: 6517:  - type error - if proxy_value is not a Proxy object
        -: 6518:  - handler object - otherwise
        -: 6519:
        -: 6520:*New in version [[NEXT_RELEASE]]*.
        -: 6521:
        -: 6522:**Example**
        -: 6523:
        -: 6524:```c
        -: 6525:{
        -: 6526:  jerry_value_t target = jerry_create_object ();
        -: 6527:  jerry_value_t handler = jerry_create_object ();
        -: 6528:  jerry_value_t proxy = jerry_create_proxy (target, handler);
        -: 6529:
        -: 6530:  jerry_release_value (target);
        -: 6531:  jerry_release_value (handler);
        -: 6532:
        -: 6533:  handler = jerry_get_proxy_handler (proxy);
        -: 6534:
        -: 6535:  // ... usage of the handler
        -: 6536:
        -: 6537:  jerry_release_value (handler);
        -: 6538:  jerry_release_value (proxy);
        -: 6539:}
        -: 6540:```
        -: 6541:
        -: 6542:**See also**
        -: 6543:
        -: 6544:- [jerry_create_proxy](#jerry_create_proxy)
        -: 6545:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 6546:- [jerry_get_proxy_target](#jerry_get_proxy_target)
        -: 6547:
        -: 6548:
        -: 6549:# Acquire and release API values
        -: 6550:
        -: 6551:## jerry_acquire_value
        -: 6552:
        -: 6553:**Summary**
        -: 6554:
        -: 6555:Acquires the specified Jerry API value.
        -: 6556:
        -: 6557:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6558:is no longer needed.
        -: 6559:
        -: 6560:**Prototype**
        -: 6561:
        -: 6562:```c
        -: 6563:jerry_value_t
        -: 6564:jerry_acquire_value (jerry_value_t value);
        -: 6565:```
        -: 6566:
        -: 6567:- `value` - api value
        -: 6568:- return value - acquired value that may be used outside of the engine
        -: 6569:
        -: 6570:**Example**
        -: 6571:
        -: 6572:```c
        -: 6573:{
        -: 6574:  jerry_value_t object_value = jerry_create_object ();
        -: 6575:
        -: 6576:  jerry_value_t acquired_object = jerry_acquire_value (object_value);
        -: 6577:
        -: 6578:  jerry_release_value (object_value);
        -: 6579:
        -: 6580:  // acquired_object refers to the created object and makes it
        -: 6581:  // available after the release of 'object_value'
        -: 6582:
        -: 6583:  jerry_release_value (acquired_object);
        -: 6584:}
        -: 6585:```
        -: 6586:
        -: 6587:**See also**
        -: 6588:
        -: 6589:- [jerry_release_value](#jerry_release_value)
        -: 6590:- [jerry_value_t](#jerry_value_t)
        -: 6591:
        -: 6592:
        -: 6593:## jerry_release_value
        -: 6594:
        -: 6595:**Summary**
        -: 6596:
        -: 6597:Release specified Jerry API value.
        -: 6598:
        -: 6599:**Prototype**
        -: 6600:
        -: 6601:```c
        -: 6602:void
        -: 6603:jerry_release_value (jerry_value_t value);
        -: 6604:```
        -: 6605:
        -: 6606:- `value` - api value
        -: 6607:
        -: 6608:**Example**
        -: 6609:
        -: 6610:```c
        -: 6611:{
        -: 6612:  jerry_value_t object_value = jerry_create_object ();
        -: 6613:
        -: 6614:  ...
        -: 6615:
        -: 6616:  jerry_release_value (object_value);
        -: 6617:}
        -: 6618:```
        -: 6619:
        -: 6620:
        -: 6621:# Create API values
        -: 6622:
        -: 6623:Function for creating [API values](#jerry_value_t).
        -: 6624:
        -: 6625:*Note*: Every created API value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6626:is no longer needed.
        -: 6627:
        -: 6628:## jerry_create_array
        -: 6629:
        -: 6630:**Summary**
        -: 6631:
        -: 6632:Create an array object value.
        -: 6633:
        -: 6634:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6635:is no longer needed.
        -: 6636:
        -: 6637:**Prototype**
        -: 6638:
        -: 6639:```c
        -: 6640:jerry_value_t
        -: 6641:jerry_create_array (uint32_t size);
        -: 6642:```
        -: 6643:
        -: 6644: - `size` - size of array;
        -: 6645: - return value - value of the constructed array object
        -: 6646:
        -: 6647: **Example**
        -: 6648:
        -: 6649:```c
        -: 6650:{
        -: 6651:    jerry_value_t array = jerry_create_array (10);
        -: 6652:
        -: 6653:    ...
        -: 6654:
        -: 6655:    jerry_release_value (array);
        -: 6656:}
        -: 6657:```
        -: 6658:
        -: 6659:**See also**
        -: 6660:
        -: 6661:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 6662:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 6663:
        -: 6664:
        -: 6665:## jerry_create_arraybuffer
        -: 6666:
        -: 6667:**Summary**
        -: 6668:
        -: 6669:Create a jerry_value_t representing an ArrayBuffer object.
        -: 6670:
        -: 6671:*Note*:
        -: 6672:  - This API depends on the es.next profile.
        -: 6673:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 6674:    when it is no longer needed.
        -: 6675:
        -: 6676:**Prototype**
        -: 6677:
        -: 6678:```c
        -: 6679:jerry_value_t
        -: 6680:jerry_create_arraybuffer (jerry_length_t size);
        -: 6681:```
        -: 6682:
        -: 6683: - `size` - size of the ArrayBuffer to create **in bytes**
        -: 6684: - return value - the new ArrayBuffer as a `jerry_value_t`
        -: 6685:
        -: 6686:*New in version 2.0*.
        -: 6687:
        -: 6688:**Example**
        -: 6689:
        -: 6690:```c
        -: 6691:{
        -: 6692:  jerry_value_t buffer_value = jerry_create_arraybuffer (15);
        -: 6693:
        -: 6694:  ... // use the ArrayBuffer
        -: 6695:
        -: 6696:  jerry_release_value (buffer_value);
        -: 6697:}
        -: 6698:```
        -: 6699:
        -: 6700:**See also**
        -: 6701:
        -: 6702:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 6703:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 6704:- [jerry_value_is_arraybuffer](#jerry_value_is_arraybuffer)
        -: 6705:- [jerry_release_value](#jerry_release_value)
        -: 6706:
        -: 6707:
        -: 6708:## jerry_create_arraybuffer_external
        -: 6709:
        -: 6710:**Summary**
        -: 6711:
        -: 6712:Creates a jerry_value_t representing an ArrayBuffer object with
        -: 6713:user specified back-buffer.
        -: 6714:
        -: 6715:User must pass a buffer pointer which is at least `size` big.
        -: 6716:After the object is not needed the GC will call the `free_cb`
        -: 6717:so the user can release the buffer which was provided.
        -: 6718:
        -: 6719:*Note*:
        -: 6720:  - This API depends on the es.next profile.
        -: 6721:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 6722:    when it is no longer needed.
        -: 6723:
        -: 6724:**Prototype**
        -: 6725:
        -: 6726:```c
        -: 6727:jerry_value_t
        -: 6728:jerry_create_arraybuffer_external (const jerry_length_t size
        -: 6729:                                   uint8_t *buffer_p,
        -: 6730:                                   jerry_value_free_callback_t free_cb);
        -: 6731:```
        -: 6732:
        -: 6733:- `size` - size of the buffer to use **in bytes** (should not be 0)
        -: 6734:- `buffer_p` - the buffer used for the Array Buffer object (should not be a null pointer)
        -: 6735:- `free_cb` - the callback function called when the object is released
        -: 6736:- return value
        -: 6737:  - the new ArrayBuffer as a `jerry_value_t`
        -: 6738:  - if the `size` is zero or `buffer_p` is a null pointer this will return an empty ArrayBuffer.
        -: 6739:
        -: 6740:*New in version 2.0*.
        -: 6741:
        -: 6742:*Changed in version [[NEXT_RELEASE]]*: type of `free_cb` has been changed.
        -: 6743:
        -: 6744:**Example**
        -: 6745:
        -: 6746:```c
        -: 6747:{
        -: 6748:  uint8_t buffer_p[15];
        -: 6749:  jerry_value_t buffer_value = jerry_create_arraybuffer_external (15, buffer_p, NULL);
        -: 6750:
        -: 6751:  ... // use the array buffer
        -: 6752:
        -: 6753:  jerry_release_value (buffer_value);
        -: 6754:}
        -: 6755:```
        -: 6756:
        -: 6757:**See also**
        -: 6758:
        -: 6759:- [jerry_get_arraybuffer_pointer](#jerry_get_arraybuffer_pointer)
        -: 6760:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 6761:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 6762:- [jerry_value_is_arraybuffer](#jerry_value_is_arraybuffer)
        -: 6763:- [jerry_release_value](#jerry_release_value)
        -: 6764:- [jerry_object_native_free_callback_t](#jerry_object_native_free_callback_t)
        -: 6765:
        -: 6766:
        -: 6767:## jerry_create_shared_arraybuffer
        -: 6768:
        -: 6769:**Summary**
        -: 6770:
        -: 6771:Create a jerry_value_t representing a SharedArrayBuffer object.
        -: 6772:
        -: 6773:*Note*:
        -: 6774:- This API depends on the es.next profile.
        -: 6775:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 6776:  when it is no longer needed.
        -: 6777:
        -: 6778:**Prototype**
        -: 6779:
        -: 6780:```c
        -: 6781:jerry_value_t
        -: 6782:jerry_create_shared_arraybuffer (jerry_length_t size);
        -: 6783:```
        -: 6784:
        -: 6785:- `size` - size of the SharedArrayBuffer to create **in bytes**
        -: 6786:- return value - the new SharedArrayBuffer as a `jerry_value_t`
        -: 6787:
        -: 6788:*New in version [[NEXT_RELEASE]]*.
        -: 6789:
        -: 6790:**Example**
        -: 6791:
        -: 6792:```c
        -: 6793:{
        -: 6794:  jerry_value_t buffer_value = jerry_create_shared_arraybuffer (15);
        -: 6795:
        -: 6796:  ... // use the SharedArrayBuffer
        -: 6797:
        -: 6798:  jerry_release_value (buffer_value);
        -: 6799:}
        -: 6800:```
        -: 6801:
        -: 6802:**See also**
        -: 6803:
        -: 6804:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 6805:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 6806:- [jerry_value_is_shared_arraybuffer](#jerry_value_is_shared_arraybuffer)
        -: 6807:- [jerry_release_value](#jerry_release_value)
        -: 6808:
        -: 6809:
        -: 6810:## jerry_create_shared_arraybuffer_external
        -: 6811:
        -: 6812:**Summary**
        -: 6813:
        -: 6814:Creates a jerry_value_t representing an SharedArrayBuffer object with
        -: 6815:user specified back-buffer.
        -: 6816:
        -: 6817:User must pass a buffer pointer which is at least `size` big.
        -: 6818:After the object is not needed the GC will call the `free_cb`
        -: 6819:so the user can release the buffer which was provided.
        -: 6820:
        -: 6821:*Note*:
        -: 6822:- This API depends on the es.next profile.
        -: 6823:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 6824:  when it is no longer needed.
        -: 6825:
        -: 6826:**Prototype**
        -: 6827:
        -: 6828:```c
        -: 6829:jerry_value_t
        -: 6830:jerry_create_shared_arraybuffer_external (const jerry_length_t size
        -: 6831:                                          uint8_t *buffer_p,
        -: 6832:                                          jerry_value_free_callback_t free_cb);
        -: 6833:```
        -: 6834:
        -: 6835:- `size` - size of the buffer to use **in bytes** (should not be 0)
        -: 6836:- `buffer_p` - the buffer used for the Shared Array Buffer object (should not be a null pointer)
        -: 6837:- `free_cb` - the callback function called when the object is released
        -: 6838:- return value
        -: 6839:    - the new SharedArrayBuffer as a `jerry_value_t`
        -: 6840:    - if the `size` is zero or `buffer_p` is a null pointer this will return an empty SharedArrayBuffer.
        -: 6841:
        -: 6842:*New in version [[NEXT_RELEASE]]*.
        -: 6843:
        -: 6844:**Example**
        -: 6845:
        -: 6846:```c
        -: 6847:{
        -: 6848:  uint8_t buffer_p[15];
        -: 6849:  jerry_value_t buffer_value = jerry_create_shared_arraybuffer_external (15, buffer_p, NULL);
        -: 6850:
        -: 6851:  ... // use the shared array buffer
        -: 6852:
        -: 6853:  jerry_release_value (buffer_value);
        -: 6854:}
        -: 6855:```
        -: 6856:
        -: 6857:**See also**
        -: 6858:
        -: 6859:- [jerry_get_arraybuffer_pointer](#jerry_get_arraybuffer_pointer)
        -: 6860:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 6861:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 6862:- [jerry_value_is_shared_arraybuffer](#jerry_value_is_shared_arraybuffer)
        -: 6863:- [jerry_release_value](#jerry_release_value)
        -: 6864:- [jerry_object_native_free_callback_t](#jerry_object_native_free_callback_t)
        -: 6865:
        -: 6866:
        -: 6867:## jerry_create_boolean
        -: 6868:
        -: 6869:**Summary**
        -: 6870:
        -: 6871:Create a jerry_value_t representing a boolean value from the given boolean parameter.
        -: 6872:
        -: 6873:**Prototype**
        -: 6874:
        -: 6875:```c
        -: 6876:jerry_value_t
        -: 6877:jerry_create_boolean (bool value);
        -: 6878:```
        -: 6879:
        -: 6880:- `value` - raw boolean value.
        -: 6881:- return value - a `jerry_value_t` created from the given boolean argument.
        -: 6882:
        -: 6883:**Example**
        -: 6884:
        -: 6885:```c
        -: 6886:{
        -: 6887:  jerry_value_t boolean_value = jerry_create_boolean (true);
        -: 6888:
        -: 6889:  ... // usage of the value
        -: 6890:
        -: 6891:  jerry_release_value (boolean_value);
        -: 6892:}
        -: 6893:```
        -: 6894:
        -: 6895:**See also**
        -: 6896:
        -: 6897:- [jerry_release_value](#jerry_release_value)
        -: 6898:
        -: 6899:
        -: 6900:## jerry_create_error
        -: 6901:
        -: 6902:**Summary**
        -: 6903:
        -: 6904:Create new JavaScript error object.
        -: 6905:
        -: 6906:Important! The `error_type` argument *must not be* `JERRY_ERROR_NONE`.
        -: 6907:Creating an error with no error type is not valid.
        -: 6908:
        -: 6909:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6910:is no longer needed.
        -: 6911:
        -: 6912:**Prototype**
        -: 6913:
        -: 6914:```c
        -: 6915:jerry_value_t
        -: 6916:jerry_create_error (jerry_error_t error_type,
        -: 6917:                    const jerry_char_t *message_p);
        -: 6918:```
        -: 6919:
        -: 6920:- `error_type` - type of error
        -: 6921:- `message_p` - value of 'message' property of constructed error object
        -: 6922:- return value - value of the constructed error object
        -: 6923:
        -: 6924:**Example**
        -: 6925:
        -: 6926:```c
        -: 6927:{
        -: 6928:  jerry_value_t error_obj = jerry_create_error (JERRY_ERROR_TYPE,
        -: 6929:                                                (const jerry_char_t *) "error");
        -: 6930:
        -: 6931:  ... // usage of error_obj
        -: 6932:
        -: 6933:
        -: 6934:  jerry_release_value (error_obj);
        -: 6935:}
        -: 6936:```
        -: 6937:
        -: 6938:**See also**
        -: 6939:
        -: 6940:- [jerry_value_is_error](#jerry_value_is_error)
        -: 6941:- [jerry_get_value_from_error](#jerry_get_value_from_error)
        -: 6942:- [jerry_create_error_from_value](#jerry_create_error_from_value)
        -: 6943:
        -: 6944:
        -: 6945:## jerry_create_error_sz
        -: 6946:
        -: 6947:**Summary**
        -: 6948:
        -: 6949:Create new JavaScript error object.
        -: 6950:
        -: 6951:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6952:is no longer needed.
        -: 6953:
        -: 6954:**Prototype**
        -: 6955:
        -: 6956:```c
        -: 6957:jerry_value_t
        -: 6958:jerry_create_error_sz (jerry_error_t error_type,
        -: 6959:                       const jerry_char_t *message_p,
        -: 6960:                       jerry_size_t message_size);
        -: 6961:```
        -: 6962:
        -: 6963:- `error_type` - type of the error
        -: 6964:- `message_p` - value of 'message' property of the constructed error object
        -: 6965:- `message_size` - size of the message in bytes
        -: 6966:- return value - value of the constructed error object
        -: 6967:
        -: 6968:**Example**
        -: 6969:
        -: 6970:```c
        -: 6971:{
        -: 6972:  const jerry_char_t message[] = "error";
        -: 6973:  jerry_value_t error_obj = jerry_create_error_sz (JERRY_ERROR_COMMON,
        -: 6974:                                                   message,
        -: 6975:                                                   sizeof (message) - 1);
        -: 6976:
        -: 6977:  ... // usage of error_obj
        -: 6978:
        -: 6979:  jerry_release_value (error_obj);
        -: 6980:}
        -: 6981:```
        -: 6982:
        -: 6983:**See also**
        -: 6984:
        -: 6985:- [jerry_create_error](#jerry_create_error)
        -: 6986:
        -: 6987:
        -: 6988:## jerry_create_dataview
        -: 6989:
        -: 6990:**Summary**
        -: 6991:
        -: 6992:Create new JavaScript DataView object.
        -: 6993:
        -: 6994:*Note*:
        -: 6995:  - This API depends on the es.next profile.
        -: 6996:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 6997:    when it is no longer needed.
        -: 6998:
        -: 6999:**Prototype**
        -: 7000:
        -: 7001:```c
        -: 7002:jerry_value_t
        -: 7003:jerry_create_dataview (const jerry_value_t array_buffer,
        -: 7004:                       const jerry_length_t byte_offset,
        -: 7005:                       const jerry_length_t byte_length)
        -: 7006:```
        -: 7007:
        -: 7008:- `array_buffer` - arrayBuffer to create DataView from
        -: 7009:- `byte_offset` - offset in bytes, to the first byte in the buffer
        -: 7010:- `byte_length` - number of elements in the byte array
        -: 7011:- return value
        -: 7012:  - value of the constructed DataView object - if success
        -: 7013:  - created error - otherwise
        -: 7014:
        -: 7015:*New in version 2.0*.
        -: 7016:
        -: 7017:**Example**
        -: 7018:
        -: 7019:[doctest]: # ()
        -: 7020:
        -: 7021:```c
        -: 7022:#include "jerryscript.h"
        -: 7023:
        -: 7024:int
    #####: 7025:main (void)
        -: 7026:{
    #####: 7027:  jerry_init (JERRY_INIT_EMPTY);
        -: 7028:
    #####: 7029:  jerry_value_t arraybuffer = jerry_create_arraybuffer (16);
    #####: 7030:  jerry_value_t dataview = jerry_create_dataview (arraybuffer, 0, 16);
        -: 7031:
        -: 7032:  // usage of dataview
        -: 7033:
    #####: 7034:  jerry_release_value (dataview);
    #####: 7035:  jerry_release_value (arraybuffer);
        -: 7036:
    #####: 7037:  jerry_cleanup ();
        -: 7038:  return 0;
        -: 7039:}
        -: 7040:```
        -: 7041:
        -: 7042:**See also**
        -: 7043:
        -: 7044:- [jerry_value_is_dataview](#jerry_value_is_dataview)
        -: 7045:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -: 7046:
        -: 7047:
        -: 7048:## jerry_create_external_function
        -: 7049:
        -: 7050:**Summary**
        -: 7051:
        -: 7052:Create an external function object.
        -: 7053:
        -: 7054:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7055:is no longer needed.
        -: 7056:
        -: 7057:**Prototype**
        -: 7058:
        -: 7059:```c
        -: 7060:jerry_value_t
        -: 7061:jerry_create_external_function (jerry_external_handler_t handler_p);
        -: 7062:```
        -: 7063:
        -: 7064:- `handler_p` - pointer to native handler of the function object
        -: 7065:- return value - value of the constructed function object
        -: 7066:
        -: 7067:**Example**
        -: 7068:
        -: 7069:[doctest]: # ()
        -: 7070:
        -: 7071:```c
        -: 7072:#include <stdio.h>
        -: 7073:#include <string.h>
        -: 7074:#include "jerryscript.h"
        -: 7075:
        -: 7076:static jerry_value_t
    #####: 7077:handler (const jerry_call_info_t *call_info_p,
        -: 7078:         const jerry_value_t args_p[],
        -: 7079:         const jerry_length_t args_cnt)
        -: 7080:{
    #####: 7081:  printf ("Native handler called!\n");
        -: 7082:
    #####: 7083:  return jerry_create_boolean (true);
        -: 7084:}
        -: 7085:
        -: 7086:int
    #####: 7087:main (void)
        -: 7088:{
    #####: 7089:  jerry_init (JERRY_INIT_EMPTY);
        -: 7090:
    #####: 7091:  jerry_value_t func_val = jerry_create_external_function (handler);
    #####: 7092:  jerry_value_t glob_obj = jerry_get_global_object ();
        -: 7093:
        -: 7094:  // after this, script can invoke the native handler through "handler_field (1, 2, 3);"
    #####: 7095:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "handler_field");
        -: 7096:  // set property and release the return value without any check
    #####: 7097:  jerry_release_value (jerry_set_property (glob_obj, prop_name, func_val));
    #####: 7098:  jerry_release_value (prop_name);
        -: 7099:
    #####: 7100:  jerry_release_value (func_val);
    #####: 7101:  jerry_release_value (glob_obj);
        -: 7102:
        -: 7103:  // Test the method by calling it
    #####: 7104:  const char *test_src = "handler_field ();";
    #####: 7105:  jerry_value_t ret_val = jerry_eval ((const jerry_char_t *) test_src,
        -: 7106:                                      strlen (test_src),
        -: 7107:                                      JERRY_PARSE_NO_OPTS);
        -: 7108:  // release the eval result
    #####: 7109:  jerry_release_value (ret_val);
    #####: 7110:  jerry_cleanup ();
        -: 7111:  return 0;
        -: 7112:}
        -: 7113:```
        -: 7114:
        -: 7115:**See also**
        -: 7116:
        -: 7117:- [jerry_external_handler_t](#jerry_external_handler_t)
        -: 7118:- [jerry_set_property](#jerry_set_property)
        -: 7119:- [jerry_call_function](#jerry_call_function)
        -: 7120:
        -: 7121:
        -: 7122:## jerry_create_number
        -: 7123:
        -: 7124:**Summary**
        -: 7125:
        -: 7126:Creates a `jerry_value_t` representing a number value.
        -: 7127:
        -: 7128:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7129:is no longer needed.
        -: 7130:
        -: 7131:**Prototype**
        -: 7132:
        -: 7133:```c
        -: 7134:jerry_value_t
        -: 7135:jerry_create_number (double value);
        -: 7136:```
        -: 7137:
        -: 7138:- `value` - double value from which a `jerry_value_t` will be created
        -: 7139:- return value - a `jerry_value_t` created from the given double argument
        -: 7140:
        -: 7141:**Example**
        -: 7142:
        -: 7143:```c
        -: 7144:{
        -: 7145:  jerry_value_t number_value = jerry_create_number (3.14);
        -: 7146:
        -: 7147:  ... // usage of the value
        -: 7148:
        -: 7149:  jerry_release_value (number_value);
        -: 7150:}
        -: 7151:```
        -: 7152:
        -: 7153:**See also**
        -: 7154:
        -: 7155:- [jerry_release_value](#jerry_release_value)
        -: 7156:- [jerry_create_number_infinity](#jerry_create_number_infinity)
        -: 7157:- [jerry_create_number_nan](#jerry_create_number_nan)
        -: 7158:
        -: 7159:
        -: 7160:## jerry_create_number_infinity
        -: 7161:
        -: 7162:**Summary**
        -: 7163:
        -: 7164:Creates a `jerry_value_t` representing a positive or negative infinity value.
        -: 7165:
        -: 7166:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7167:is no longer needed.
        -: 7168:
        -: 7169:**Prototype**
        -: 7170:
        -: 7171:```c
        -: 7172:jerry_value_t
        -: 7173:jerry_create_number_infinity (bool sign);
        -: 7174:```
        -: 7175:
        -: 7176:- `sign` - true for negative Infinity and false for positive Infinity
        -: 7177:- return value - a `jerry_value_t` representing the infinity value
        -: 7178:
        -: 7179:**Example**
        -: 7180:
        -: 7181:```c
        -: 7182:{
        -: 7183:  jerry_value_t positive_inf_value = jerry_create_number_infinity (false);
        -: 7184:
        -: 7185:  ... // usage of the positive_inf_value
        -: 7186:
        -: 7187:  jerry_release_value (positive_inf_value);
        -: 7188:}
        -: 7189:```
        -: 7190:
        -: 7191:**See also**
        -: 7192:
        -: 7193:- [jerry_release_value](#jerry_release_value)
        -: 7194:- [jerry_create_number](#jerry_create_number)
        -: 7195:- [jerry_create_number_nan](#jerry_create_number_nan)
        -: 7196:
        -: 7197:
        -: 7198:## jerry_create_number_nan
        -: 7199:
        -: 7200:**Summary**
        -: 7201:
        -: 7202:Creates a `jerry_value_t` representing a not-a-number value.
        -: 7203:
        -: 7204:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7205:is no longer needed.
        -: 7206:
        -: 7207:**Prototype**
        -: 7208:
        -: 7209:```c
        -: 7210:jerry_value_t
        -: 7211:jerry_create_number_nan (void);
        -: 7212:```
        -: 7213:
        -: 7214:- return value - a `jerry_value_t` representing the not-a-number value
        -: 7215:
        -: 7216:**Example**
        -: 7217:
        -: 7218:```c
        -: 7219:{
        -: 7220:  jerry_value_t nan_value = jerry_create_number_nan ();
        -: 7221:
        -: 7222:  ... // usage of the nan_value
        -: 7223:
        -: 7224:  jerry_release_value (nan_value);
        -: 7225:}
        -: 7226:```
        -: 7227:
        -: 7228:**See also**
        -: 7229:
        -: 7230:- [jerry_release_value](#jerry_release_value)
        -: 7231:- [jerry_create_number](#jerry_create_number)
        -: 7232:- [jerry_create_number_infinity](#jerry_create_number_infinity)
        -: 7233:
        -: 7234:
        -: 7235:## jerry_create_null
        -: 7236:
        -: 7237:**Summary**
        -: 7238:
        -: 7239:Creates and returns a `jerry_value_t` with type null object.
        -: 7240:
        -: 7241:**Prototype**
        -: 7242:
        -: 7243:```c
        -: 7244:jerry_value_t
        -: 7245:jerry_create_null (void);
        -: 7246:```
        -: 7247:
        -: 7248:- return value - a `jerry_value_t` representing null.
        -: 7249:
        -: 7250:**Example**
        -: 7251:
        -: 7252:```c
        -: 7253:{
        -: 7254:  jerry_value_t null_value = jerry_create_null ();
        -: 7255:
        -: 7256:  ... // usage of the value
        -: 7257:
        -: 7258:  jerry_release_value (null_value);
        -: 7259:}
        -: 7260:```
        -: 7261:
        -: 7262:**See also**
        -: 7263:
        -: 7264:- [jerry_release_value](#jerry_release_value)
        -: 7265:
        -: 7266:
        -: 7267:## jerry_create_object
        -: 7268:
        -: 7269:**Summary**
        -: 7270:
        -: 7271:Create new JavaScript object, like with new Object().
        -: 7272:
        -: 7273:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7274:is no longer needed.
        -: 7275:
        -: 7276:**Prototype**
        -: 7277:
        -: 7278:```c
        -: 7279:jerry_value_t
        -: 7280:jerry_create_object (void);
        -: 7281:```
        -: 7282:
        -: 7283:- return value - value of the created object
        -: 7284:
        -: 7285:**Example**
        -: 7286:
        -: 7287:```c
        -: 7288:{
        -: 7289:  jerry_value_t object_value = jerry_create_object ();
        -: 7290:
        -: 7291:  ... // usage of object_value
        -: 7292:
        -: 7293:  jerry_release_value (object_value);
        -: 7294:}
        -: 7295:```
        -: 7296:
        -: 7297:**See also**
        -: 7298:
        -: 7299:- [jerry_release_value](#jerry_release_value)
        -: 7300:
        -: 7301:
        -: 7302:## jerry_create_promise
        -: 7303:
        -: 7304:**Summary**
        -: 7305:
        -: 7306:Create an empty promise object which can be resolved or rejected later
        -: 7307:by calling jerry_resolve_or_reject_promise.
        -: 7308:
        -: 7309:*Note*:
        -: 7310:  - This API depends on the es.next profile.
        -: 7311:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7312:    when it is no longer needed.
        -: 7313:
        -: 7314:**Prototype**
        -: 7315:
        -: 7316:```c
        -: 7317:jerry_value_t
        -: 7318:jerry_create_promise (void)
        -: 7319:```
        -: 7320:
        -: 7321:- return value - value of the newly created promise
        -: 7322:
        -: 7323:*New in version 2.0*.
        -: 7324:
        -: 7325:**Example**
        -: 7326:
        -: 7327:```c
        -: 7328:{
        -: 7329:  jerry_value_t p = jerry_create_promise ();
        -: 7330:
        -: 7331:  ...// usage of the promise
        -: 7332:
        -: 7333:  jerry_release_value (p);
        -: 7334:}
        -: 7335:```
        -: 7336:
        -: 7337:**See also**
        -: 7338:
        -: 7339:- [jerry_resolve_or_reject_promise](#jerry_resolve_or_reject_promise)
        -: 7340:- [jerry_release_value](#jerry_release_value)
        -: 7341:
        -: 7342:
        -: 7343:## jerry_create_proxy
        -: 7344:
        -: 7345:**Summary**
        -: 7346:
        -: 7347:Create a new Proxy object with the given target and handler.
        -: 7348:
        -: 7349:*Note*:
        -: 7350:  - This API depends on the es.next profile.
        -: 7351:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7352:    when it is no longer needed.
        -: 7353:
        -: 7354:**Prototype**
        -: 7355:
        -: 7356:```c
        -: 7357:jerry_value_t
        -: 7358:jerry_create_proxy (const jerry_value_t target,
        -: 7359:                    const jerry_value_t handler);
        -: 7360:```
        -: 7361:
        -: 7362:- `target` - proxy target
        -: 7363:- `handler` - proxy handler
        -: 7364:- return thrown error - if the Proxy construction fails
        -: 7365:         value of the newly created proxy object - otherwise
        -: 7366:
        -: 7367:*New in version 2.3*.
        -: 7368:
        -: 7369:**Example**
        -: 7370:
        -: 7371:[doctest]: # ()
        -: 7372:
        -: 7373:```c
        -: 7374:#include "jerryscript.h"
        -: 7375:
        -: 7376:int
    #####: 7377:main (void)
        -: 7378:{
    #####: 7379:  jerry_init (JERRY_INIT_EMPTY);
        -: 7380:
    #####: 7381:  jerry_value_t target = jerry_create_object ();
    #####: 7382:  jerry_value_t handler = jerry_create_object ();
    #####: 7383:  jerry_value_t proxy = jerry_create_proxy (target, handler);
        -: 7384:
    #####: 7385:  jerry_release_value (target);
    #####: 7386:  jerry_release_value (handler);
        -: 7387:
        -: 7388:  // usage of the proxy
        -: 7389:
    #####: 7390:  jerry_release_value (proxy);
        -: 7391:
    #####: 7392:  jerry_cleanup ();
        -: 7393:}
        -: 7394:```
        -: 7395:
        -: 7396:**See also**
        -: 7397:
        -: 7398:- [jerry_value_is_proxy](#jerry_value_is_proxy)
        -: 7399:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 7400:- [jerry_release_value](#jerry_release_value)
        -: 7401:
        -: 7402:
        -: 7403:## jerry_create_special_proxy
        -: 7404:
        -: 7405:**Summary**
        -: 7406:
        -: 7407:Create a new Proxy object with the given target and handler.
        -: 7408:The behaviour of the Proxy can be specialized with an options argument.
        -: 7409:
        -: 7410:*Note*:
        -: 7411:  - This API depends on the es.next profile.
        -: 7412:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7413:    when it is no longer needed.
        -: 7414:
        -: 7415:**Prototype**
        -: 7416:
        -: 7417:```c
        -: 7418:jerry_value_t
        -: 7419:jerry_create_special_proxy (const jerry_value_t target,
        -: 7420:                            const jerry_value_t handler,
        -: 7421:                            uint32_t options);
        -: 7422:```
        -: 7423:
        -: 7424:- `target` - proxy target
        -: 7425:- `handler` - proxy handler
        -: 7426:- `options` - any combination of [jerry_proxy_object_options_t](#jerry_proxy_object_options_t) options
        -: 7427:- return thrown error - if the Proxy construction fails
        -: 7428:         value of the newly created proxy object - otherwise
        -: 7429:
        -: 7430:*New in version [[NEXT_RELEASE]]*.
        -: 7431:
        -: 7432:**Example**
        -: 7433:
        -: 7434:[doctest]: # ()
        -: 7435:
        -: 7436:```c
        -: 7437:#include "jerryscript.h"
        -: 7438:
        -: 7439:int
    #####: 7440:main (void)
        -: 7441:{
    #####: 7442:  jerry_init (JERRY_INIT_EMPTY);
        -: 7443:
    #####: 7444:  jerry_value_t target = jerry_create_object ();
    #####: 7445:  jerry_value_t handler = jerry_create_object ();
    #####: 7446:  jerry_value_t proxy = jerry_create_special_proxy (target, handler, JERRY_PROXY_SKIP_RESULT_VALIDATION);
        -: 7447:
    #####: 7448:  jerry_release_value (target);
    #####: 7449:  jerry_release_value (handler);
        -: 7450:
        -: 7451:  // usage of the proxy
        -: 7452:
    #####: 7453:  jerry_release_value (proxy);
        -: 7454:
    #####: 7455:  jerry_cleanup ();
        -: 7456:}
        -: 7457:```
        -: 7458:
        -: 7459:**See also**
        -: 7460:
        -: 7461:- [jerry_value_is_proxy](#jerry_value_is_proxy)
        -: 7462:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 7463:- [jerry_release_value](#jerry_release_value)
        -: 7464:
        -: 7465:
        -: 7466:## jerry_create_string
        -: 7467:
        -: 7468:**Summary**
        -: 7469:
        -: 7470:Create string from a valid CESU8 string.
        -: 7471:
        -: 7472:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7473:is no longer needed.
        -: 7474:
        -: 7475:**Prototype**
        -: 7476:
        -: 7477:```c
        -: 7478:jerry_value_t
        -: 7479:jerry_create_string (const jerry_char_t *str_p);
        -: 7480:```
        -: 7481:
        -: 7482:- `str_p` - non-null pointer to string
        -: 7483:- return value - value of the created string
        -: 7484:
        -: 7485:**Example**
        -: 7486:
        -: 7487:```c
        -: 7488:{
        -: 7489:  const jerry_char_t char_array[] = "a string";
        -: 7490:  jerry_value_t string_value  = jerry_create_string (char_array);
        -: 7491:
        -: 7492:  ... // usage of string_value
        -: 7493:
        -: 7494:  jerry_release_value (string_value);
        -: 7495:}
        -: 7496:```
        -: 7497:
        -: 7498:**See also**
        -: 7499:
        -: 7500:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 7501:- [jerry_create_string_sz](#jerry_create_string_sz)
        -: 7502:
        -: 7503:
        -: 7504:## jerry_create_string_sz
        -: 7505:
        -: 7506:**Summary**
        -: 7507:
        -: 7508:Create string from a valid CESU8 string.
        -: 7509:
        -: 7510:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7511:is no longer needed.
        -: 7512:
        -: 7513:**Prototype**
        -: 7514:
        -: 7515:```c
        -: 7516:jerry_value_t
        -: 7517:jerry_create_string_sz (const jerry_char_t *str_p,
        -: 7518:                        jerry_size_t str_size)
        -: 7519:```
        -: 7520:
        -: 7521:- `str_p` - non-null pointer to string
        -: 7522:- `str_size` - size of the string
        -: 7523:- return value - value of the created string
        -: 7524:
        -: 7525:**Example**
        -: 7526:
        -: 7527:```c
        -: 7528:{
        -: 7529:  const jerry_char_t char_array[] = "a string";
        -: 7530:  jerry_value_t string_value  = jerry_create_string_sz (char_array,
        -: 7531:                                                        sizeof (char_array) - 1);
        -: 7532:
        -: 7533:  ... // usage of string_value
        -: 7534:
        -: 7535:  jerry_release_value (string_value);
        -: 7536:}
        -: 7537:
        -: 7538:```
        -: 7539:
        -: 7540:**See also**
        -: 7541:
        -: 7542:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 7543:- [jerry_create_string](#jerry_create_string)
        -: 7544:
        -: 7545:
        -: 7546:## jerry_create_string_from_utf8
        -: 7547:
        -: 7548:**Summary**
        -: 7549:
        -: 7550:Create string from a valid UTF8 string.
        -: 7551:
        -: 7552:*Note*:
        -: 7553: - The difference from [jerry_create_string](#jerry_create_string) is that it accepts utf-8 string instead of cesu-8 string.
        -: 7554: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7555:is no longer needed.
        -: 7556:
        -: 7557:**Prototype**
        -: 7558:
        -: 7559:```c
        -: 7560:jerry_value_t
        -: 7561:jerry_create_string_from_utf8 (const jerry_char_t *str_p);
        -: 7562:```
        -: 7563:
        -: 7564:- `str_p` - non-null pointer to string
        -: 7565:- return value - value of the created string
        -: 7566:
        -: 7567:*New in version 2.0*.
        -: 7568:
        -: 7569:**Example**
        -: 7570:
        -: 7571:```c
        -: 7572:{
        -: 7573:  const jerry_char_t char_array[] = "a string";
        -: 7574:  jerry_value_t string_value  = jerry_create_string_from_utf8 (char_array);
        -: 7575:
        -: 7576:  ... // usage of string_value
        -: 7577:
        -: 7578:  jerry_release_value (string_value);
        -: 7579:}
        -: 7580:```
        -: 7581:
        -: 7582:**See also**
        -: 7583:
        -: 7584:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 7585:- [jerry_create_string_sz_from_utf8](#jerry_create_string_sz_from_utf8)
        -: 7586:
        -: 7587:
        -: 7588:## jerry_create_string_sz_from_utf8
        -: 7589:
        -: 7590:**Summary**
        -: 7591:
        -: 7592:Create string from a valid UTF8 string.
        -: 7593:
        -: 7594:*Note*:
        -: 7595: - The difference from [jerry_create_string_sz](#jerry_create_string_sz) is that it accepts utf-8 string instead of cesu-8 string.
        -: 7596: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7597:is no longer needed.
        -: 7598:
        -: 7599:**Prototype**
        -: 7600:
        -: 7601:```c
        -: 7602:jerry_value_t
        -: 7603:jerry_create_string_sz_from_utf8 (const jerry_char_t *str_p,
        -: 7604:                                  jerry_size_t str_size)
        -: 7605:```
        -: 7606:
        -: 7607:- `str_p` - non-null pointer to string
        -: 7608:- `str_size` - size of the string
        -: 7609:- return value - value of the created string
        -: 7610:
        -: 7611:*New in version 2.0*.
        -: 7612:
        -: 7613:**Example**
        -: 7614:
        -: 7615:```c
        -: 7616:{
        -: 7617:  const jerry_char_t char_array[] = "a string";
        -: 7618:  jerry_value_t string_value  = jerry_create_string_sz_from_utf8 (char_array,
        -: 7619:                                                                  sizeof (char_array) - 1);
        -: 7620:
        -: 7621:  ... // usage of string_value
        -: 7622:
        -: 7623:  jerry_release_value (string_value);
        -: 7624:}
        -: 7625:
        -: 7626:```
        -: 7627:
        -: 7628:**See also**
        -: 7629:
        -: 7630:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 7631:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 7632:
        -: 7633:
        -: 7634:## jerry_create_external_string
        -: 7635:
        -: 7636:**Summary**
        -: 7637:
        -: 7638:Create an external string from a valid CESU8 string. The string buffer passed to the function
        -: 7639:should not be modified until the free callback is called. This function can be used to avoid
        -: 7640:the duplication of large strings.
        -: 7641:
        -: 7642:*Note*:
        -: 7643: - The free callback can be set by [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -: 7644: - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7645:   when it is no longer needed.
        -: 7646:
        -: 7647:**Prototype**
        -: 7648:
        -: 7649:```c
        -: 7650:jerry_value_t
        -: 7651:jerry_create_external_string (const jerry_char_t *str_p, void *user_p);
        -: 7652:```
        -: 7653:
        -: 7654:- `str_p` - non-null pointer to string
        -: 7655:- `user_p` - user pointer passed to the callback when the string is freed
        -: 7656:- return value - value of the created string
        -: 7657:
        -: 7658:*New in version 2.4*.
        -: 7659:
        -: 7660:*Changed in version [[NEXT_RELEASE]]*: `free_cb` is replaced by `user_p`.
        -: 7661:
        -: 7662:**Example**
        -: 7663:
        -: 7664:```c
        -: 7665:{
        -: 7666:  const char* string_p = "a large and immutable string: this is a story about ....";
        -: 7667:  jerry_value_t string_value  = jerry_create_external_string ((const jerry_char_t *) string_p,
        -: 7668:                                                              NULL);
        -: 7669:
        -: 7670:  ... // usage of string_value
        -: 7671:
        -: 7672:  jerry_release_value (string_value);
        -: 7673:}
        -: 7674:```
        -: 7675:
        -: 7676:**See also**
        -: 7677:
        -: 7678:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 7679:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -: 7680:- [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -: 7681:
        -: 7682:
        -: 7683:## jerry_create_external_string_sz
        -: 7684:
        -: 7685:**Summary**
        -: 7686:
        -: 7687:Create an external string from a valid CESU8 string. The string buffer passed to the function
        -: 7688:should not be modified until the free callback is called. This function can be used to avoid
        -: 7689:the duplication of large strings.
        -: 7690:
        -: 7691:*Note*:
        -: 7692: - The free callback can be set by [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -: 7693: - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7694:   when it is no longer needed.
        -: 7695:
        -: 7696:**Prototype**
        -: 7697:
        -: 7698:```c
        -: 7699:jerry_value_t
        -: 7700:jerry_create_external_string_sz (const jerry_char_t *str_p,
        -: 7701:                                 jerry_size_t str_size,
        -: 7702:                                 void *user_p);
        -: 7703:```
        -: 7704:
        -: 7705:- `str_p` - non-null pointer to string
        -: 7706:- `str_size` - size of the string
        -: 7707:- `user_p` - user pointer passed to the callback when the string is freed
        -: 7708:- return value - value of the created string
        -: 7709:
        -: 7710:*New in version 2.4*.
        -: 7711:
        -: 7712:*Changed in version [[NEXT_RELEASE]]*: `free_cb` is replaced by `user_p`.
        -: 7713:
        -: 7714:**Example**
        -: 7715:
        -: 7716:```c
        -: 7717:{
        -: 7718:  const char* string_p = "a large and immutable string: this is a story about ....";
        -: 7719:  jerry_value_t string_value  = jerry_create_external_string_sz ((const jerry_char_t *) string_p,
        -: 7720:                                                                 strlen (string_p),
        -: 7721:                                                                 NULL);
        -: 7722:
        -: 7723:  ... // usage of string_value
        -: 7724:
        -: 7725:  jerry_release_value (string_value);
        -: 7726:}
        -: 7727:
        -: 7728:```
        -: 7729:
        -: 7730:**See also**
        -: 7731:
        -: 7732:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 7733:- [jerry_create_external_string](#jerry_create_external_string)
        -: 7734:- [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -: 7735:
        -: 7736:
        -: 7737:## jerry_create_symbol
        -: 7738:
        -: 7739:**Summary**
        -: 7740:
        -: 7741:Create symbol from an API value.
        -: 7742:
        -: 7743:*Note*:
        -: 7744:  - The given argument is converted to string. This operation can throw an error.
        -: 7745:  - This API depends on the es.next profile.
        -: 7746:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7747:    when it is no longer needed.
        -: 7748:
        -: 7749:**Prototype**
        -: 7750:
        -: 7751:```c
        -: 7752:jerry_value_t
        -: 7753:jerry_create_symbol (const jerry_value_t value)
        -: 7754:```
        -: 7755:
        -: 7756:- `value` - API value
        -: 7757:- return value
        -: 7758:  - value of the created symbol, if success
        -: 7759:  - thrown error, otherwise
        -: 7760:
        -: 7761:*New in version 2.0*.
        -: 7762:
        -: 7763:**Example**
        -: 7764:
        -: 7765:[doctest]: # ()
        -: 7766:
        -: 7767:```c
        -: 7768:#include "jerryscript.h"
        -: 7769:
        -: 7770:int
    #####: 7771:main (void)
        -: 7772:{
    #####: 7773:  jerry_init (JERRY_INIT_EMPTY);
        -: 7774:
    #####: 7775:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "Symbol description string");
    #####: 7776:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 7777:
        -: 7778:  // The description value is no longer needed
    #####: 7779:  jerry_release_value (string_value);
        -: 7780:
        -: 7781:  // usage of symbol_value
        -: 7782:
    #####: 7783:  jerry_release_value (symbol_value);
        -: 7784:
    #####: 7785:  jerry_cleanup ();
        -: 7786:}
        -: 7787:```
        -: 7788:
        -: 7789:**See also**
        -: 7790:
        -: 7791:- [jerry_value_is_symbol](#jerry_value_is_symbol)
        -: 7792:- [jerry_release_value](#jerry_release_value)
        -: 7793:
        -: 7794:
        -: 7795:## jerry_create_bigint
        -: 7796:
        -: 7797:**Summary**
        -: 7798:
        -: 7799:Create BigInt value from uint64 digits
        -: 7800:
        -: 7801:*Note*:
        -: 7802:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 7803:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 7804:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 7805:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7806:  when it is no longer needed.
        -: 7807:
        -: 7808:**Prototype**
        -: 7809:
        -: 7810:```c
        -: 7811:jerry_value_t
        -: 7812:jerry_create_bigint (const uint64_t *digits_p, uint32_t size, bool sign)
        -: 7813:```
        -: 7814:
        -: 7815:- `digits_p` - array of uint64 digits, least significant digit first
        -: 7816:- `size` - size of the `digits_p` array
        -: 7817:- `sign` - false if the created value should be positive, and true if the created value should be negative
        -: 7818:- return value
        -: 7819:  - value of the created bigint, if success
        -: 7820:  - thrown error, otherwise
        -: 7821:
        -: 7822:*New in version 2.4*.
        -: 7823:
        -: 7824:**Example**
        -: 7825:
        -: 7826:[doctest]: # ()
        -: 7827:
        -: 7828:```c
        -: 7829:#include "jerryscript.h"
        -: 7830:
        -: 7831:int
    #####: 7832:main (void)
        -: 7833:{
    #####: 7834:  jerry_init (JERRY_INIT_EMPTY);
        -: 7835:
    #####: 7836:  uint64_t digits[2] = { 0x1, 0x1 };
    #####: 7837:  jerry_value_t bigint_value = jerry_create_bigint (digits, 2, true);
        -: 7838:
        -: 7839:  // usage of bigint_value
        -: 7840:
    #####: 7841:  jerry_release_value (bigint_value);
        -: 7842:
    #####: 7843:  jerry_cleanup ();
        -: 7844:}
        -: 7845:```
        -: 7846:
        -: 7847:**See also**
        -: 7848:
        -: 7849:- [jerry_release_value](#jerry_release_value)
        -: 7850:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 7851:- [jerry_get_bigint_digits](#jerry_get_bigint_digits)
        -: 7852:
        -: 7853:
        -: 7854:## jerry_create_regexp
        -: 7855:
        -: 7856:**Summary**
        -: 7857:
        -: 7858:Returns a `jerry_value_t` RegExp object or an error, if the construction of the object fails.
        -: 7859:Optional flags can be set using [jerry_regexp_flags_t](#jerry_regexp_flags_t).
        -: 7860:These flags can be combined together with the binary OR operator or used on their own as enum values.
        -: 7861:
        -: 7862:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7863:is no longer needed.
        -: 7864:
        -: 7865:**Prototype**
        -: 7866:```c
        -: 7867:jerry_value_t
        -: 7868:jerry_create_regexp (const jerry_char_t *pattern_p, uint16_t flags);
        -: 7869:```
        -: 7870:
        -: 7871:- `pattern_p` - the RegExp pattern as a zero-terminated UTF-8 string
        -: 7872:- `flags` - optional flags for the RegExp object, see [jerry_regexp_flags_t](#jerry_regexp_flags_t)
        -: 7873:- return value - the RegExp object as a `jerry_value_t`
        -: 7874:
        -: 7875:*New in version 2.0*.
        -: 7876:
        -: 7877:**Example**
        -: 7878:
        -: 7879:```c
        -: 7880:{
        -: 7881:  jerry_char_t pattern_p = "[cgt]gggtaaa|tttaccc[acg]";
        -: 7882:  uint16_t pattern_flags = JERRY_REGEXP_FLAG_IGNORE_CASE;
        -: 7883:
        -: 7884:  jerry_value_t regexp = jerry_create_regexp (pattern_p, pattern_flags);
        -: 7885:
        -: 7886:  ...
        -: 7887:
        -: 7888:  jerry_release_value (regexp);
        -: 7889:}
        -: 7890:```
        -: 7891:
        -: 7892:
        -: 7893:## jerry_create_regexp_sz
        -: 7894:
        -: 7895:**Summary**
        -: 7896:
        -: 7897:Returns a `jerry_value_t` RegExp object or an error, if the construction of the object fails.
        -: 7898:Optional flags can be set using [jerry_regexp_flags_t](#jerry_regexp_flags_t).
        -: 7899:These flags can be combined together with the binary OR operator or used on their own as enum values.
        -: 7900:
        -: 7901:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7902:is no longer needed.
        -: 7903:
        -: 7904:**Prototype**
        -: 7905:```c
        -: 7906:jerry_value_t
        -: 7907:jerry_create_regexp_sz (const jerry_char_t *pattern_p, jerry_size_t pattern_size, uint16_t flags);
        -: 7908:```
        -: 7909:
        -: 7910:- `pattern_p` - the RegExp pattern as a zero-terminated UTF-8 string
        -: 7911:- `pattern_size` - size of the `pattern`
        -: 7912:- `flags` - optional flags for the RegExp object, see [jerry_regexp_flags_t](#jerry_regexp_flags_t)
        -: 7913:- return value - the RegExp object as a `jerry_value_t`
        -: 7914:
        -: 7915:*New in version 2.0*.
        -: 7916:
        -: 7917:**Example**
        -: 7918:
        -: 7919:```c
        -: 7920:{
        -: 7921:  jerry_char_t pattern_p = "[cgt]gggtaaa|tttaccc[acg]";
        -: 7922:  jerry_size_t pattern_size = sizeof (pattern_p) - 1;
        -: 7923:  uint16_t pattern_flags = JERRY_REGEXP_FLAG_IGNORE_CASE;
        -: 7924:
        -: 7925:  jerry_value_t regexp = jerry_create_regexp_sz (pattern_p, pattern_size, pattern_flags);
        -: 7926:
        -: 7927:  ...
        -: 7928:
        -: 7929:  jerry_release_value (regexp);
        -: 7930:}
        -: 7931:```
        -: 7932:
        -: 7933:
        -: 7934:## jerry_create_typedarray
        -: 7935:
        -: 7936:**Summary**
        -: 7937:
        -: 7938:Create a jerry_value_t representing an TypedArray object.
        -: 7939:
        -: 7940:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 7941:and element count can be specified.
        -: 7942:
        -: 7943:*Notes*:
        -: 7944:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7945:  when it is no longer needed.
        -: 7946:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 7947:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 7948:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 7949:- The es.next profile enables this by default.
        -: 7950:
        -: 7951:**Prototype**
        -: 7952:
        -: 7953:```c
        -: 7954:jerry_value_t
        -: 7955:jerry_create_typedarray (jerry_typedarray_type_t type_name, jerry_length_t item_count);
        -: 7956:```
        -: 7957:
        -: 7958:- `type_name` - type of TypedArray to create
        -: 7959:- `item_count` - number of items in the new TypedArray
        -: 7960:- return value - the new TypedArray as a `jerry_value_t`
        -: 7961:
        -: 7962:*New in version 2.0*.
        -: 7963:
        -: 7964:**Example**
        -: 7965:
        -: 7966:```c
        -: 7967:{
        -: 7968:  jerry_value_t array = jerry_create_typedarray (JERRY_TYPEDARRAY_UINT16, 15);
        -: 7969:
        -: 7970:  ... // use the TypedArray
        -: 7971:
        -: 7972:  jerry_release_value (array);
        -: 7973:}
        -: 7974:```
        -: 7975:
        -: 7976:**See also**
        -: 7977:
        -: 7978:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 7979:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 7980:- [jerry_release_value](#jerry_release_value)
        -: 7981:
        -: 7982:
        -: 7983:## jerry_create_typedarray_for_arraybuffer
        -: 7984:
        -: 7985:**Summary**
        -: 7986:
        -: 7987:Create a jerry_value_t representing an TypedArray object using
        -: 7988:an already existing ArrayBuffer object.
        -: 7989:
        -: 7990:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 7991:and element count can be specified.
        -: 7992:
        -: 7993:The developer must ensure that the ArrayBuffer has the correct length for the given
        -: 7994:type of TypedArray otherwise an error is generated.
        -: 7995:
        -: 7996:The JavaScript equivalent of this function is: `new %TypedArray%(arraybuffer)` where `%TypedArray%` is
        -: 7997:one of the allowed TypedArray functions.
        -: 7998:
        -: 7999:*Notes*:
        -: 8000:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8001:  when it is no longer needed.
        -: 8002:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 8003:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 8004:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8005:- The es.next profile enables this by default.
        -: 8006:
        -: 8007:**Prototype**
        -: 8008:
        -: 8009:```c
        -: 8010:jerry_value_t
        -: 8011:jerry_create_typedarray_for_arraybuffer (jerry_typedarray_type_t type_name,
        -: 8012:                                         const jerry_value_t arraybuffer);
        -: 8013:```
        -: 8014:
        -: 8015:- `type_name` - type of TypedArray to create
        -: 8016:- `arraybuffer` - the ArrayBuffer to use for the new TypedArray
        -: 8017:- return value
        -: 8018:  - the new TypedArray as a `jerry_value_t`
        -: 8019:  - Error if the ArrayBuffer does not have enough space for the given type of TypedArray
        -: 8020:
        -: 8021:*New in version 2.0*.
        -: 8022:
        -: 8023:**Example**
        -: 8024:
        -: 8025:```c
        -: 8026:{
        -: 8027:  jerry_value_t buffer = jerry_create_array_buffer (12 * 2);
        -: 8028:  jerry_value_t array = jerry_create_typedarray_for_arraybuffer (JERRY_TYPEDARRAY_UINT16, buffer);
        -: 8029:  jerry_release_value (buffer);
        -: 8030:
        -: 8031:  ... // use the TypedArray
        -: 8032:
        -: 8033:  jerry_release_value (array);
        -: 8034:}
        -: 8035:```
        -: 8036:
        -: 8037:**See also**
        -: 8038:
        -: 8039:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 8040:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 8041:- [jerry_release_value](#jerry_release_value)
        -: 8042:
        -: 8043:
        -: 8044:## jerry_create_typedarray_for_arraybuffer_sz
        -: 8045:
        -: 8046:**Summary**
        -: 8047:
        -: 8048:Create a jerry_value_t representing an TypedArray object using
        -: 8049:an already existing ArrayBuffer object and by specifying the byteOffset, and length properties.
        -: 8050:
        -: 8051:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 8052:and element count can be specified.
        -: 8053:
        -: 8054:The developer must ensure that the ArrayBuffer has the correct length for the given
        -: 8055:type of TypedArray otherwise an error is generated.
        -: 8056:
        -: 8057:The JavaScript equivalent of this function is: `new %TypedArray%(arraybuffer, byteOffset, length)` where `%TypedArray%` is
        -: 8058:one of the allowed TypedArray functions.
        -: 8059:
        -: 8060:*Notes*:
        -: 8061:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8062:  when it is no longer needed.
        -: 8063:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 8064:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 8065:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8066:- The es.next profile enables this by default.
        -: 8067:
        -: 8068:**Prototype**
        -: 8069:
        -: 8070:```c
        -: 8071:jerry_value_t
        -: 8072:jerry_create_typedarray_for_arraybuffer_sz (jerry_typedarray_type_t type_name,
        -: 8073:                                            const jerry_value_t arraybuffer,
        -: 8074:                                            jerry_length_t byte_offset,
        -: 8075:                                            jerry_length_t length);
        -: 8076:```
        -: 8077:
        -: 8078:- `type_name` - type of TypedArray to create
        -: 8079:- `arraybuffer` - the ArrayBuffer to use for the new TypedArray
        -: 8080:- `byte_offset` - start offset to use for the ArrayBuffer
        -: 8081:- `length` - number of elements to used from the ArrayBuffer (this is not the same as the byteLength)
        -: 8082:- return value
        -: 8083:  - the new TypedArray as a `jerry_value_t`
        -: 8084:  - Error if the ArrayBuffer does not have enough space for the given type of TypedArray
        -: 8085:
        -: 8086:*New in version 2.0*.
        -: 8087:
        -: 8088:**Example**
        -: 8089:
        -: 8090:```c
        -: 8091:{
        -: 8092:  jerry_value_t buffer = jerry_create_array_buffer (12 * 2);
        -: 8093:  jerry_value_t array = jerry_create_typedarray_for_arraybuffer_sz (JERRY_TYPEDARRAY_UINT16, buffer, 4, 10);
        -: 8094:  jerry_release_value (buffer);
        -: 8095:
        -: 8096:  ... // use the TypedArray
        -: 8097:
        -: 8098:  jerry_release_value (array);
        -: 8099:}
        -: 8100:```
        -: 8101:
        -: 8102:**See also**
        -: 8103:
        -: 8104:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 8105:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 8106:- [jerry_release_value](#jerry_release_value)
        -: 8107:
        -: 8108:
        -: 8109:## jerry_create_container
        -: 8110:
        -: 8111:**Summary**
        -: 8112:
        -: 8113:Create a jerry_value_t representing a given type container object.
        -: 8114:
        -: 8115:*Notes*:
        -: 8116:- This method is expected to work the same way as the JavaScript Map constructor.
        -: 8117:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8118:  when it is no longer needed.
        -: 8119:- This API depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -: 8120:  in runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -: 8121:  feature enum values.
        -: 8122:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8123:- The es.next profile enables this by default.
        -: 8124:
        -: 8125:**Prototype**
        -: 8126:
        -: 8127:```c
        -: 8128:jerry_value_t
        -: 8129:jerry_create_container (jerry_container_type_t container_type,
        -: 8130:                        const jerry_value_t *arguments_list_p,
        -: 8131:                        jerry_length_t arguments_list_len);
        -: 8132:```
        -: 8133:
        -: 8134:- `container_type` - Type of the container to be created, see `jerry_container_type_t`.
        -: 8135:- `arguments_list_p` - The arguments passed to the container constructor to be inserted to the container.
        -: 8136:- `arguments_list_len` - The length of the above arguments.
        -: 8137:- return value - the new container object as a `jerry_value_t`
        -: 8138:
        -: 8139:*New in version 2.3*.
        -: 8140:
        -: 8141:**Example**
        -: 8142:
        -: 8143:[doctest]: # ()
        -: 8144:
        -: 8145:```c
        -: 8146:#include "jerryscript.h"
        -: 8147:
        -: 8148:int
    #####: 8149:main (void)
        -: 8150:{
    #####: 8151:  jerry_init (JERRY_INIT_EMPTY);
    #####: 8152:  jerry_char_t src[] = "[1,2,3,4].entries()";
    #####: 8153:  jerry_value_t iterable = jerry_eval (src, sizeof (src) - 1, JERRY_PARSE_NO_OPTS);
        -: 8154:
    #####: 8155:  jerry_value_t map = jerry_create_container (JERRY_CONTAINER_TYPE_MAP, &iterable, 1);
    #####: 8156:  jerry_release_value (iterable);
        -: 8157:
        -: 8158:  // use the Map
        -: 8159:
    #####: 8160:  jerry_release_value (map);
        -: 8161:
    #####: 8162:  jerry_cleanup ();
        -: 8163:  return 0;
        -: 8164:}
        -: 8165:```
        -: 8166:
        -: 8167:**See also**
        -: 8168:
        -: 8169:- [jerry_container_type_t](#jerry_container_type_t)
        -: 8170:- [jerry_get_container_type](#jerry_get_container_type)
        -: 8171:
        -: 8172:
        -: 8173:## jerry_create_undefined
        -: 8174:
        -: 8175:**Summary**
        -: 8176:
        -: 8177:Creates a `jerry_value_t` representing an undefined value.
        -: 8178:
        -: 8179:**Prototype**
        -: 8180:
        -: 8181:```c
        -: 8182:jerry_value_t
        -: 8183:jerry_create_undefined (void);
        -: 8184:```
        -: 8185:
        -: 8186:- return value - value of undefined
        -: 8187:
        -: 8188:**Example**
        -: 8189:
        -: 8190:```c
        -: 8191:{
        -: 8192:  jerry_value_t undefined_value = jerry_create_undefined ();
        -: 8193:
        -: 8194:  ... // usage of the value
        -: 8195:
        -: 8196:  jerry_release_value (undefined_value);
        -: 8197:}
        -: 8198:```
        -: 8199:
        -: 8200:**See also**
        -: 8201:
        -: 8202:- [jerry_release_value](#jerry_release_value)
        -: 8203:
        -: 8204:
        -: 8205:## jerry_create_realm
        -: 8206:
        -: 8207:**Summary**
        -: 8208:
        -: 8209:Creates a `jerry_value_t` representing a new global object.
        -: 8210:
        -: 8211:*Notes*:
        -: 8212:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8213:  when it is no longer needed.
        -: 8214:- This API depends on a build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -: 8215:  in runtime with the `JERRY_FEATURE_REALM` feature enum value.
        -: 8216:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8217:- The es.next profile enables this by default.
        -: 8218:
        -: 8219:**Prototype**
        -: 8220:
        -: 8221:```c
        -: 8222:jerry_value_t
        -: 8223:jerry_create_realm (void);
        -: 8224:```
        -: 8225:
        -: 8226:- return value - realm object value
        -: 8227:
        -: 8228:*New in version 2.4*.
        -: 8229:
        -: 8230:**Example**
        -: 8231:
        -: 8232:[doctest]: # ()
        -: 8233:
        -: 8234:```c
        -: 8235:#include "jerryscript.h"
        -: 8236:
        -: 8237:int
    #####: 8238:main (void)
        -: 8239:{
    #####: 8240:  jerry_init (JERRY_INIT_EMPTY);
        -: 8241:
    #####: 8242:  jerry_value_t realm_value = jerry_create_realm ();
        -: 8243:
        -: 8244:  // usage of the value
        -: 8245:
    #####: 8246:  jerry_release_value (realm_value);
    #####: 8247:  jerry_cleanup ();
        -: 8248:
        -: 8249:  return 0;
        -: 8250:}
        -: 8251:```
        -: 8252:
        -: 8253:**See also**
        -: 8254:
        -: 8255:- [jerry_release_value](#jerry_release_value)
        -: 8256:
        -: 8257:
        -: 8258:# General API functions of JS objects
        -: 8259:
        -: 8260:## jerry_has_property
        -: 8261:
        -: 8262:**Summary**
        -: 8263:
        -: 8264:Checks whether the object or its prototype objects have the given property.
        -: 8265:
        -: 8266:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8267:is no longer needed.
        -: 8268:
        -: 8269:**Prototype**
        -: 8270:
        -: 8271:```c
        -: 8272:jerry_value_t
        -: 8273:jerry_has_property (const jerry_value_t obj_val,
        -: 8274:                    const jerry_value_t prop_name_val);
        -: 8275:```
        -: 8276:
        -: 8277:- `obj_val` - object value
        -: 8278:- `prop_name_val` - property name
        -: 8279:- return value - JavaScript value that evaluates to
        -: 8280:  -  raised error - if the operation fail
        -: 8281:  -  true/false API value  - depend on whether the property exists
        -: 8282:
        -: 8283:*Changed in version 2.0*: The return value type is now a JavaScript value and not a primitive boolean value.
        -: 8284:
        -: 8285:*Changed in version 2.3*: The return value can be an error value.
        -: 8286:
        -: 8287:**Example**
        -: 8288:
        -: 8289:[doctest]: # ()
        -: 8290:
        -: 8291:```c
        -: 8292:#include "jerryscript.h"
        -: 8293:
        -: 8294:int
    #####: 8295:main (void)
        -: 8296:{
    #####: 8297:  jerry_init (JERRY_INIT_EMPTY);
        -: 8298:
    #####: 8299:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8300:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "handler_field");
        -: 8301:
    #####: 8302:  jerry_value_t has_prop_js = jerry_has_property (global_object, prop_name);
    #####: 8303:  bool has_prop = jerry_value_is_true (has_prop_js);
        -: 8304:
    #####: 8305:  jerry_release_value (has_prop_js);
    #####: 8306:  jerry_release_value (prop_name);
    #####: 8307:  jerry_release_value (global_object);
        -: 8308:
    #####: 8309:  jerry_cleanup ();
        -: 8310:
        -: 8311:  return 0;
        -: 8312:}
        -: 8313:```
        -: 8314:
        -: 8315:**See also**
        -: 8316:
        -: 8317:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8318:- [jerry_delete_property](#jerry_delete_property)
        -: 8319:
        -: 8320:
        -: 8321:## jerry_has_own_property
        -: 8322:
        -: 8323:**Summary**
        -: 8324:
        -: 8325:Checks whether the object has the given property.
        -: 8326:
        -: 8327:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8328:is no longer needed.
        -: 8329:
        -: 8330:**Prototype**
        -: 8331:
        -: 8332:```c
        -: 8333:jerry_value_t
        -: 8334:jerry_has_own_property (const jerry_value_t obj_val,
        -: 8335:                        const jerry_value_t prop_name_val);
        -: 8336:```
        -: 8337:
        -: 8338:- `obj_val` - object value
        -: 8339:- `prop_name_val` - property name
        -: 8340:- return value - JavaScript value that evaluates to
        -: 8341:  -  raised error - if the operation fails
        -: 8342:  -  true/false API value - depend on whether the property exists
        -: 8343:
        -: 8344:*Changed in version 2.0*: The return value type is now a JavaScript value and not a primitive boolean value.
        -: 8345:
        -: 8346:*Changed in version 2.3*: The return value can be an error value.
        -: 8347:
        -: 8348:**Example**
        -: 8349:
        -: 8350:[doctest]: # ()
        -: 8351:
        -: 8352:```c
        -: 8353:#include "jerryscript.h"
        -: 8354:
        -: 8355:int
    #####: 8356:main (void)
        -: 8357:{
    #####: 8358:  jerry_init (JERRY_INIT_EMPTY);
        -: 8359:
    #####: 8360:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8361:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "handler_field");
        -: 8362:
    #####: 8363:  jerry_value_t has_prop_js = jerry_has_own_property (global_object, prop_name);
    #####: 8364:  bool has_prop = jerry_value_is_true (has_prop_js);
        -: 8365:
    #####: 8366:  jerry_release_value (has_prop_js);
    #####: 8367:  jerry_release_value (prop_name);
    #####: 8368:  jerry_release_value (global_object);
        -: 8369:
    #####: 8370:  jerry_cleanup ();
        -: 8371:
        -: 8372:  return 0;
        -: 8373:}
        -: 8374:```
        -: 8375:
        -: 8376:**See also**
        -: 8377:
        -: 8378:- [jerry_has_property](#jerry_has_property)
        -: 8379:- [jerry_delete_property](#jerry_delete_property)
        -: 8380:
        -: 8381:
        -: 8382:## jerry_has_internal_property
        -: 8383:
        -: 8384:**Summary**
        -: 8385:
        -: 8386:Checks whether the object has the given internal property.
        -: 8387:
        -: 8388:*Note*:
        -: 8389: - Properties which were not created with [jerry_set_internal_property](#jerry_set_internal_property) are excluded
        -: 8390:   during the operation.
        -: 8391: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8392:is no longer needed.
        -: 8393:
        -: 8394:**Prototype**
        -: 8395:
        -: 8396:```c
        -: 8397:bool
        -: 8398:jerry_has_internal_property (const jerry_value_t obj_val,
        -: 8399:                             const jerry_value_t prop_name_val);
        -: 8400:```
        -: 8401:
        -: 8402:- `obj_val` - object value
        -: 8403:- `prop_name_val` - property name
        -: 8404:- return value
        -: 8405:  - true, if the property exists
        -: 8406:  - false, otherwise
        -: 8407:
        -: 8408:*New in version 2.2*.
        -: 8409:
        -: 8410:**Example**
        -: 8411:
        -: 8412:[doctest]: # ()
        -: 8413:
        -: 8414:```c
        -: 8415:#include "jerryscript.h"
        -: 8416:
        -: 8417:int
    #####: 8418:main (void)
        -: 8419:{
    #####: 8420:  jerry_init (JERRY_INIT_EMPTY);
        -: 8421:
    #####: 8422:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8423:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
        -: 8424:
    #####: 8425:  bool has_internal_js_prop = jerry_has_internal_property (global_object, prop_name);
        -: 8426:
    #####: 8427:  jerry_release_value (prop_name);
    #####: 8428:  jerry_release_value (global_object);
        -: 8429:
        -: 8430:  return 0;
        -: 8431:}
        -: 8432:```
        -: 8433:
        -: 8434:**See also**
        -: 8435:
        -: 8436:- [jerry_delete_internal_property](#jerry_delete_internal_property)
        -: 8437:- [jerry_get_internal_property](#jerry_get_internal_property)
        -: 8438:- [jerry_set_internal_property](#jerry_set_internal_property)
        -: 8439:
        -: 8440:
        -: 8441:## jerry_delete_property
        -: 8442:
        -: 8443:**Summary**
        -: 8444:
        -: 8445:Delete a property from an object.
        -: 8446:
        -: 8447:**Prototype**
        -: 8448:
        -: 8449:```c
        -: 8450:bool
        -: 8451:jerry_delete_property (const jerry_value_t obj_val,
        -: 8452:                       const jerry_value_t prop_name_val);
        -: 8453:```
        -: 8454:
        -: 8455:- `obj_val` - object value
        -: 8456:- `prop_name_val` - property name
        -: 8457:- return value
        -: 8458:  - true, if property was deleted successfully
        -: 8459:  - false, otherwise
        -: 8460:
        -: 8461:**Example**
        -: 8462:
        -: 8463:```c
        -: 8464:{
        -: 8465:  jerry_value_t global_object = jerry_get_global_object ();
        -: 8466:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
        -: 8467:
        -: 8468:  bool delete_result = jerry_delete_property (global_object, prop_name);
        -: 8469:  /* use "delete_result" */
        -: 8470:
        -: 8471:  jerry_release_value (prop_name);
        -: 8472:  jerry_release_value (global_object);
        -: 8473:}
        -: 8474:```
        -: 8475:
        -: 8476:**See also**
        -: 8477:
        -: 8478:- [jerry_has_property](#jerry_has_property)
        -: 8479:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8480:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 8481:- [jerry_get_property](#jerry_get_property)
        -: 8482:
        -: 8483:
        -: 8484:## jerry_delete_property_by_index
        -: 8485:
        -: 8486:**Summary**
        -: 8487:
        -: 8488:Delete indexed property from the specified object.
        -: 8489:
        -: 8490:**Prototype**
        -: 8491:
        -: 8492:```c
        -: 8493:bool
        -: 8494:jerry_delete_property_by_index (const jerry_value_t obj_val,
        -: 8495:                                uint32_t index);
        -: 8496:```
        -: 8497:
        -: 8498:- `obj_val` - object value
        -: 8499:- `index` - index number
        -: 8500:- return value
        -: 8501:  - true, if property was deleted successfully
        -: 8502:  - false, otherwise
        -: 8503:
        -: 8504:*New in version 2.0*.
        -: 8505:
        -: 8506:**Example**
        -: 8507:
        -: 8508:```c
        -: 8509:{
        -: 8510:  jerry_value_t object;
        -: 8511:
        -: 8512:  ... // create or acquire object
        -: 8513:
        -: 8514:  bool delete_result = jerry_delete_property_by_index (object, 5);
        -: 8515:
        -: 8516:  jerry_release_value (object);
        -: 8517:}
        -: 8518:```
        -: 8519:
        -: 8520:**See also**
        -: 8521:
        -: 8522:- [jerry_has_property](#jerry_has_property)
        -: 8523:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8524:- [jerry_delete_property](#jerry_delete_property)
        -: 8525:- [jerry_get_property](#jerry_get_property)
        -: 8526:- [jerry_set_property](#jerry_set_property)
        -: 8527:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 8528:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 8529:
        -: 8530:## jerry_delete_internal_property
        -: 8531:
        -: 8532:**Summary**
        -: 8533:
        -: 8534:Delete an internal property from an object.
        -: 8535:
        -: 8536:*Note*: Properties which were not created with [jerry_set_internal_property](#jerry_set_internal_property) are excluded
        -: 8537:        during the operation.
        -: 8538:
        -: 8539:**Prototype**
        -: 8540:
        -: 8541:```c
        -: 8542:bool
        -: 8543:jerry_delete_internal_property (const jerry_value_t obj_val,
        -: 8544:                                const jerry_value_t prop_name_val);
        -: 8545:```
        -: 8546:
        -: 8547:- `obj_val` - object value
        -: 8548:- `prop_name_val` - property name
        -: 8549:- return value
        -: 8550:  - true, if property was deleted successfully
        -: 8551:  - false, otherwise
        -: 8552:
        -: 8553:*New in version 2.2*.
        -: 8554:
        -: 8555:**Example**
        -: 8556:
        -: 8557:```c
        -: 8558:{
        -: 8559:  jerry_value_t global_object = jerry_get_global_object ();
        -: 8560:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
        -: 8561:
        -: 8562:  bool delete_result = jerry_delete_internal_property (global_object, prop_name);
        -: 8563:  /* use "delete_result" */
        -: 8564:
        -: 8565:  jerry_release_value (prop_name);
        -: 8566:  jerry_release_value (global_object);
        -: 8567:}
        -: 8568:```
        -: 8569:
        -: 8570:**See also**
        -: 8571:
        -: 8572:- [jerry_has_internal_property](#jerry_has_internal_property)
        -: 8573:- [jerry_get_internal_property](#jerry_get_internal_property)
        -: 8574:- [jerry_set_internal_property](#jerry_set_internal_property)
        -: 8575:
        -: 8576:
        -: 8577:## jerry_get_property
        -: 8578:
        -: 8579:**Summary**
        -: 8580:
        -: 8581:Get value of a property to the specified object with the given name.
        -: 8582:
        -: 8583:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8584:is no longer needed.
        -: 8585:
        -: 8586:**Prototype**
        -: 8587:
        -: 8588:```c
        -: 8589:jerry_value_t
        -: 8590:jerry_get_property (const jerry_value_t obj_val,
        -: 8591:                    const jerry_value_t prop_name_val);
        -: 8592:```
        -: 8593:
        -: 8594:- `obj_val` - object value
        -: 8595:- `prop_name_val` - property name
        -: 8596:- return value
        -: 8597:  - value of property, if success
        -: 8598:  - thrown error, otherwise
        -: 8599:
        -: 8600:**Example**
        -: 8601:
        -: 8602:[doctest]: # ()
        -: 8603:
        -: 8604:```c
        -: 8605:#include "jerryscript.h"
        -: 8606:
        -: 8607:int
    #####: 8608:main (void)
        -: 8609:{
    #####: 8610:  jerry_init (JERRY_INIT_EMPTY);
        -: 8611:
    #####: 8612:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8613:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "Object");
        -: 8614:
    #####: 8615:  jerry_value_t prop_value = jerry_get_property (global_object, prop_name);
        -: 8616:
        -: 8617:  /* use "prop_value" then release it. */
        -: 8618:
    #####: 8619:  jerry_release_value (prop_value);
    #####: 8620:  jerry_release_value (prop_name);
    #####: 8621:  jerry_release_value (global_object);
        -: 8622:
        -: 8623:  return 0;
        -: 8624:}
        -: 8625:```
        -: 8626:
        -: 8627:**See also**
        -: 8628:
        -: 8629:- [jerry_has_property](#jerry_has_property)
        -: 8630:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8631:- [jerry_delete_property](#jerry_delete_property)
        -: 8632:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 8633:- [jerry_set_property](#jerry_set_property)
        -: 8634:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 8635:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 8636:
        -: 8637:
        -: 8638:## jerry_get_property_by_index
        -: 8639:
        -: 8640:**Summary**
        -: 8641:
        -: 8642:Get value by an index from the specified object.
        -: 8643:
        -: 8644:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8645:is no longer needed.
        -: 8646:
        -: 8647:**Prototype**
        -: 8648:
        -: 8649:```c
        -: 8650:jerry_value_t
        -: 8651:jerry_get_property_by_index (const jerry_value_t obj_val,
        -: 8652:                             uint32_t index);
        -: 8653:```
        -: 8654:
        -: 8655:- `obj_val` - object value
        -: 8656:- `index` - index number
        -: 8657:- return value
        -: 8658:  - stored value on the specified index, if success
        -: 8659:  - thrown exception, otherwise.
        -: 8660:
        -: 8661:**Example**
        -: 8662:
        -: 8663:```c
        -: 8664:{
        -: 8665:  jerry_value_t object;
        -: 8666:
        -: 8667:  ... // create or acquire object
        -: 8668:
        -: 8669:  jerry_value_t value = jerry_get_property_by_index (object, 5);
        -: 8670:
        -: 8671:  ...
        -: 8672:
        -: 8673:  jerry_release_value (value);
        -: 8674:  jerry_release_value (object);
        -: 8675:}
        -: 8676:```
        -: 8677:
        -: 8678:**See also**
        -: 8679:
        -: 8680:- [jerry_has_property](#jerry_has_property)
        -: 8681:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8682:- [jerry_delete_property](#jerry_delete_property)
        -: 8683:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 8684:- [jerry_get_property](#jerry_get_property)
        -: 8685:- [jerry_set_property](#jerry_set_property)
        -: 8686:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 8687:
        -: 8688:## jerry_get_own_property
        -: 8689:
        -: 8690:**Summary**
        -: 8691:
        -: 8692:Get the own property value of an object with the given name. The function tells
        -: 8693:whether the property is found, and the receiver object can be specified as well.
        -: 8694:The receiver is passed as the `this` argument for getters, and the receiver
        -: 8695:argument for Proxy `get` traps.
        -: 8696:
        -: 8697:*Notes*:
        -: 8698:  - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it is no longer needed.
        -: 8699:  - The `found_p` argument is ignored if its value is NULL.
        -: 8700:  - The target value of `found_p` argument is set to false when the arguments are invalid, e.g. `obj_val` is not an object.
        -: 8701:
        -: 8702:**Prototype**
        -: 8703:
        -: 8704:```c
        -: 8705:jerry_value_t
        -: 8706:jerry_get_own_property (const jerry_value_t obj_val,
        -: 8707:                        const jerry_value_t prop_name_val,
        -: 8708:                        const jerry_value_t receiver_val,
        -: 8709:                        bool *found_p);
        -: 8710:```
        -: 8711:
        -: 8712:- `obj_val` - object value
        -: 8713:- `prop_name_val` - property name
        -: 8714:- `receiver_val` - receiver object
        -: 8715:- `found_p` - [out] true, if the property is found or obj_val is a Proxy object, false otherwise
        -: 8716:- return value
        -: 8717:  - value of property, if success
        -: 8718:  - thrown error, otherwise
        -: 8719:
        -: 8720:**Example**
        -: 8721:
        -: 8722:[doctest]: # ()
        -: 8723:
        -: 8724:```c
        -: 8725:#include "jerryscript.h"
        -: 8726:#include "stdio.h"
        -: 8727:
        -: 8728:int
    #####: 8729:main (void)
        -: 8730:{
    #####: 8731:  jerry_init (JERRY_INIT_EMPTY);
        -: 8732:
    #####: 8733:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8734:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "Object");
        -: 8735:
        -: 8736:  bool found;
    #####: 8737:  jerry_value_t prop_value = jerry_get_own_property (global_object, prop_name, global_object, &found);
        -: 8738:
    #####: 8739:  if (found)
        -: 8740:  {
        -: 8741:    printf ("Property is found!\n");
        -: 8742:  }
        -: 8743:
        -: 8744:  /* use "prop_value" then release it. */
        -: 8745:
    #####: 8746:  jerry_release_value (prop_value);
    #####: 8747:  jerry_release_value (prop_name);
    #####: 8748:  jerry_release_value (global_object);
        -: 8749:
        -: 8750:  return 0;
        -: 8751:}
        -: 8752:```
        -: 8753:
        -: 8754:**See also**
        -: 8755:
        -: 8756:- [jerry_get_property](#jerry_get_property)
        -: 8757:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 8758:
        -: 8759:## jerry_get_internal_property
        -: 8760:
        -: 8761:**Summary**
        -: 8762:
        -: 8763:Get value of an internal property to the specified object with the given name.
        -: 8764:
        -: 8765:*Note*:
        -: 8766: - Properties which were not created with [jerry_set_internal_property](#jerry_set_internal_property) are excluded
        -: 8767:   during the operation.
        -: 8768: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8769:   is no longer needed.
        -: 8770:
        -: 8771:**Prototype**
        -: 8772:
        -: 8773:```c
        -: 8774:jerry_value_t
        -: 8775:jerry_get_internal_property (const jerry_value_t obj_val,
        -: 8776:                             const jerry_value_t prop_name_val);
        -: 8777:```
        -: 8778:
        -: 8779:- `obj_val` - object value
        -: 8780:- `prop_name_val` - property name
        -: 8781:- return value
        -: 8782:  - value of property, if the internal property exists
        -: 8783:  - undefined value, if the, if the internal does not property exists
        -: 8784:  - thrown error, otherwise
        -: 8785:
        -: 8786:*New in version 2.2*.
        -: 8787:
        -: 8788:**Example**
        -: 8789:
        -: 8790:[doctest]: # ()
        -: 8791:
        -: 8792:```c
        -: 8793:#include "jerryscript.h"
        -: 8794:
        -: 8795:int
    #####: 8796:main (void)
        -: 8797:{
    #####: 8798:  jerry_init (JERRY_INIT_EMPTY);
        -: 8799:
    #####: 8800:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8801:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
        -: 8802:
    #####: 8803:  jerry_value_t prop_value = jerry_get_internal_property (global_object, prop_name);
        -: 8804:
        -: 8805:  /* use "prop_value" then release it. */
        -: 8806:
    #####: 8807:  jerry_release_value (prop_value);
    #####: 8808:  jerry_release_value (prop_name);
    #####: 8809:  jerry_release_value (global_object);
        -: 8810:
        -: 8811:  return 0;
        -: 8812:}
        -: 8813:```
        -: 8814:
        -: 8815:**See also**
        -: 8816:
        -: 8817:- [jerry_has_internal_property](#jerry_has_internal_property)
        -: 8818:- [jerry_delete_internal_property](#jerry_delete_internal_property)
        -: 8819:- [jerry_set_internal_property](#jerry_set_internal_property)
        -: 8820:
        -: 8821:
        -: 8822:## jerry_set_property
        -: 8823:
        -: 8824:**Summary**
        -: 8825:
        -: 8826:Set a property to the specified object with the given name.
        -: 8827:
        -: 8828:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8829:is no longer needed.
        -: 8830:
        -: 8831:**Prototype**
        -: 8832:
        -: 8833:```c
        -: 8834:jerry_value_t
        -: 8835:jerry_set_property (const jerry_value_t obj_val,
        -: 8836:                    const jerry_value_t prop_name_val,
        -: 8837:                    const jerry_value_t value_to_set)
        -: 8838:```
        -: 8839:
        -: 8840:- `obj_val` - object value
        -: 8841:- `prop_name_val` - property name
        -: 8842:- `value_to_set` - value to set
        -: 8843:- return value
        -: 8844:  - true, if success
        -: 8845:  - thrown error, otherwise
        -: 8846:
        -: 8847:**Example**
        -: 8848:
        -: 8849:```c
        -: 8850:{
        -: 8851:  jerry_value_t value_to_set;
        -: 8852:
        -: 8853:  ... // create or acquire value to set
        -: 8854:
        -: 8855:  jerry_value_t glob_obj = jerry_get_global_object ();
        -: 8856:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
        -: 8857:
        -: 8858:  jerry_value_t set_result = jerry_set_property (glob_obj, prop_name, value_to_set);
        -: 8859:
        -: 8860:  ... // check result of property set call
        -: 8861:
        -: 8862:  jerry_release_value (set_result);
        -: 8863:  jerry_release_value (prop_name);
        -: 8864:
        -: 8865:  ...
        -: 8866:
        -: 8867:  jerry_release_value (value_to_set);
        -: 8868:  jerry_release_value (glob_obj);
        -: 8869:}
        -: 8870:```
        -: 8871:
        -: 8872:**See also**
        -: 8873:
        -: 8874:- [jerry_has_property](#jerry_has_property)
        -: 8875:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8876:- [jerry_delete_property](#jerry_delete_property)
        -: 8877:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 8878:- [jerry_get_property](#jerry_get_property)
        -: 8879:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 8880:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 8881:
        -: 8882:
        -: 8883:## jerry_set_property_by_index
        -: 8884:
        -: 8885:**Summary**
        -: 8886:
        -: 8887:Set indexed value in the specified object
        -: 8888:
        -: 8889:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8890:is no longer needed.
        -: 8891:
        -: 8892:**Prototype**
        -: 8893:
        -: 8894:```c
        -: 8895:jerry_value_t
        -: 8896:jerry_set_property_by_index (const jerry_value_t obj_val,
        -: 8897:                             uint32_t index,
        -: 8898:                             const jerry_value_t value_to_set);
        -: 8899:```
        -: 8900:
        -: 8901:- `obj_val` - object value
        -: 8902:- `index` - index number
        -: 8903:- `value_to_set` - value to set
        -: 8904:- return value
        -: 8905:  - true, if field value was set successfully
        -: 8906:  - thrown exception, otherwise
        -: 8907:
        -: 8908:**Example**
        -: 8909:
        -: 8910:```c
        -: 8911:{
        -: 8912:  jerry_value_t object;
        -: 8913:  jerry_value_t value_to_set;
        -: 8914:
        -: 8915:  ... // create or acquire object and value to set
        -: 8916:
        -: 8917:  jerry_value_t ret_val = jerry_set_property_by_index (object, 5, value_to_set);
        -: 8918:
        -: 8919:  ...
        -: 8920:
        -: 8921:  jerry_release_value (value_to_set);
        -: 8922:  jerry_release_value (ret_val);
        -: 8923:  jerry_release_value (object);
        -: 8924:}
        -: 8925:```
        -: 8926:
        -: 8927:**See also**
        -: 8928:
        -: 8929:- [jerry_has_property](#jerry_has_property)
        -: 8930:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8931:- [jerry_delete_property](#jerry_delete_property)
        -: 8932:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 8933:- [jerry_get_property](#jerry_get_property)
        -: 8934:- [jerry_set_property](#jerry_set_property)
        -: 8935:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 8936:
        -: 8937:
        -: 8938:## jerry_set_internal_property
        -: 8939:
        -: 8940:**Summary**
        -: 8941:
        -: 8942:Set an internal property to the specified object with the given name.
        -: 8943:
        -: 8944:*Note*:
        -: 8945: - The property cannot be accessed from the JavaScript context, only from the public API.
        -: 8946: - It is different from [jerry_set_object_native_pointer](#jerry_set_object_native_pointer) in that any jerry API value
        -: 8947:   can be hidden from the JavaScript context, not only native pointers.
        -: 8948:
        -: 8949:**Prototype**
        -: 8950:
        -: 8951:```c
        -: 8952:bool
        -: 8953:jerry_set_internal_property (const jerry_value_t obj_val,
        -: 8954:                             const jerry_value_t prop_name_val,
        -: 8955:                             const jerry_value_t value_to_set)
        -: 8956:```
        -: 8957:
        -: 8958:- `obj_val` - object value
        -: 8959:- `prop_name_val` - property name
        -: 8960:- `value_to_set` - value to set
        -: 8961:- return value
        -: 8962:  - true, if success
        -: 8963:  - thrown error, otherwise
        -: 8964:
        -: 8965:*New in version 2.2*.
        -: 8966:
        -: 8967:**Example**
        -: 8968:
        -: 8969:[doctest]: # ()
        -: 8970:
        -: 8971:```c
        -: 8972:#include "jerryscript.h"
        -: 8973:
        -: 8974:int
    #####: 8975:main (void)
        -: 8976:{
    #####: 8977:  jerry_init (JERRY_INIT_EMPTY);
        -: 8978:
    #####: 8979:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8980:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
    #####: 8981:  jerry_value_t value_to_set = jerry_create_number (5);
        -: 8982:
    #####: 8983:  bool set_result = jerry_set_internal_property (global_object, prop_name, value_to_set);
        -: 8984:
        -: 8985:  /* check the result of internal property set call */
        -: 8986:
    #####: 8987:  jerry_release_value (value_to_set);
    #####: 8988:  jerry_release_value (prop_name);
    #####: 8989:  jerry_release_value (global_object);
        -: 8990:
        -: 8991:  return 0;
        -: 8992:}
        -: 8993:```
        -: 8994:
        -: 8995:**See also**
        -: 8996:
        -: 8997:- [jerry_has_internal_property](#jerry_has_internal_property)
        -: 8998:- [jerry_delete_internal_property](#jerry_delete_internal_property)
        -: 8999:- [jerry_get_internal_property](#jerry_get_internal_property)
        -: 9000:
        -: 9001:
        -: 9002:## jerry_property_descriptor_create
        -: 9003:
        -: 9004:**Summary**
        -: 9005:
        -: 9006:Create a property descriptor and initialize it with default values. This means that all fields in
        -: 9007:the `jerry_property_descriptor_t` struct will be set to zero or false depending on the field's type.
        -: 9008:
        -: 9009:**Prototype**
        -: 9010:
        -: 9011:```c
        -: 9012:jerry_property_descriptor_t
        -: 9013:jerry_property_descriptor_create (void);
        -: 9014:```
        -: 9015:
        -: 9016:*New in version [[NEXT_RELEASE]]*: Replaces `jerry_init_property_descriptor_fields`.
        -: 9017:
        -: 9018:**Example**
        -: 9019:
        -: 9020:```c
        -: 9021:{
        -: 9022:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9023:
        -: 9024:  ... // usage of prop_desc
        -: 9025:
        -: 9026:  jerry_property_descriptor_free (&prop_desc);
        -: 9027:}
        -: 9028:```
        -: 9029:
        -: 9030:For a more complete example see [jerry_define_own_property](#jerry_define_own_property).
        -: 9031:
        -: 9032:**See also**
        -: 9033:
        -: 9034:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 9035:- [jerry_define_own_property](#jerry_define_own_property)
        -: 9036:- [jerry_get_own_property_descriptor](#jerry_get_own_property_descriptor)
        -: 9037:- [jerry_property_descriptor_free](#jerry_property_descriptor_free)
        -: 9038:
        -: 9039:
        -: 9040:## jerry_define_own_property
        -: 9041:
        -: 9042:**Summary**
        -: 9043:
        -: 9044:Define a property to the specified object with the given name.
        -: 9045:
        -: 9046:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9047:is no longer needed.
        -: 9048:
        -: 9049:**Prototype**
        -: 9050:
        -: 9051:```c
        -: 9052:jerry_value_t
        -: 9053:jerry_define_own_property (const jerry_value_t obj_val,
        -: 9054:                           const jerry_value_t prop_name_val,
        -: 9055:                           const jerry_property_descriptor_t *prop_desc_p);
        -: 9056:```
        -: 9057:
        -: 9058:- `obj_val` - target object where the property should be registered
        -: 9059:- `prop_name_val` - property name
        -: 9060:- `prop_desc_p` - pointer to property descriptor
        -: 9061:- return value
        -: 9062:  - true, if success
        -: 9063:  - thrown error, otherwise
        -: 9064:
        -: 9065:**Example**
        -: 9066:
        -: 9067:Registering a simple value property via the `jerry_define_own_property` method:
        -: 9068:
        -: 9069:[doctest]: # (name="02.API-REFERENCE-define-property.c")
        -: 9070:
        -: 9071:```c
        -: 9072:#include "jerryscript.h"
        -: 9073:
        -: 9074:int
    #####: 9075:main (void)
        -: 9076:{
    #####: 9077:  jerry_init (JERRY_INIT_EMPTY);
        -: 9078:
    #####: 9079:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -: 9080:
        -: 9081:  // configure the property
    #####: 9082:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9083:
        -: 9084:  // create or acquire value to set
        -: 9085:  // For example:
    #####: 9086:  jerry_value_t value_to_set = jerry_create_number (33);
        -: 9087:
        -: 9088:  // set the property descriptor fields:
        -: 9089:  // set the "JERRY_PROP_IS_VALUE_DEFINED" flag to indicate the "value"
        -: 9090:  //  field should be used during the property registration.
        -: 9091:  // set the writable, configurable, enumerable flags to true
    #####: 9092:  prop_desc.flags |= (JERRY_PROP_IS_WRITABLE_DEFINED
        -: 9093:                      | JERRY_PROP_IS_WRITABLE
        -: 9094:                      | JERRY_PROP_IS_CONFIGURABLE_DEFINED
        -: 9095:                      | JERRY_PROP_IS_CONFIGURABLE
        -: 9096:                      | JERRY_PROP_IS_ENUMERABLE_DEFINED
        -: 9097:                      | JERRY_PROP_IS_ENUMERABLE
        -: 9098:                      | JERRY_PROP_IS_VALUE_DEFINED);
        -: 9099:
        -: 9100:  // set the "value" field to the number 33
    #####: 9101:  prop_desc.value = value_to_set;
        -: 9102:
        -: 9103:  // add the property as "my_prop" for the global object
    #####: 9104:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
    #####: 9105:  jerry_value_t return_value = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####: 9106:  if (jerry_value_is_error (return_value))
        -: 9107:  {
        -: 9108:    // there was an error
        -: 9109:  }
        -: 9110:
        -: 9111:  // re-define the property with the enumerable flag set to false
    #####: 9112:  prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_ENUMERABLE;
    #####: 9113:  return_value = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####: 9114:  if (jerry_value_is_error (return_value))
        -: 9115:  {
        -: 9116:    // there was an error
        -: 9117:  }
        -: 9118:
        -: 9119:  // if there was no error at this point the global object should have a "my_prop" property
        -: 9120:
    #####: 9121:  jerry_release_value (return_value);
    #####: 9122:  jerry_release_value (prop_name);
        -: 9123:
    #####: 9124:  jerry_property_descriptor_free (&prop_desc);
    #####: 9125:  jerry_release_value (global_obj_val);
        -: 9126:
    #####: 9127:  jerry_cleanup ();
        -: 9128:  return 0;
        -: 9129:}
        -: 9130:```
        -: 9131:
        -: 9132:
        -: 9133:Registering a getter/setter property via the `jerry_define_own_property` method:
        -: 9134:
        -: 9135:[doctest]: # (name="02.API-REFERENCE-define-property-getset.c")
        -: 9136:
        -: 9137:```c
        -: 9138:#include <stdio.h>
        -: 9139:#include <string.h>
        -: 9140:#include "jerryscript.h"
        -: 9141:
        -: 9142:static int counter = 0;
        -: 9143:
        -: 9144:static jerry_value_t
    #####: 9145:method_getter (const jerry_call_info_t *call_info_p,
        -: 9146:               const jerry_value_t args[],
        -: 9147:               const jerry_length_t argc)
        -: 9148:{
    #####: 9149:  counter++;
    #####: 9150:  printf("Getter called, returning: %d\n", counter);
        -: 9151:
    #####: 9152:  return jerry_create_number (counter);
        -: 9153:}
        -: 9154:
        -: 9155:static jerry_value_t
    #####: 9156:method_setter (const jerry_call_info_t *call_info_p,
        -: 9157:               const jerry_value_t args[],
        -: 9158:               const jerry_length_t argc)
        -: 9159:{
        -: 9160:  // Note: the arguments count and type should be checked
        -: 9161:  // in this example it is ommitted!
        -: 9162:
    #####: 9163:  double new_value = jerry_get_number_value (args[0]);
    #####: 9164:  counter = (int) new_value;
        -: 9165:
    #####: 9166:  printf("Setter called, setting: %d\n", counter);
        -: 9167:
    #####: 9168:  return jerry_create_undefined ();
        -: 9169:}
        -: 9170:
        -: 9171:int
    #####: 9172:main (void)
        -: 9173:{
    #####: 9174:  jerry_init (JERRY_INIT_EMPTY);
        -: 9175:
    #####: 9176:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -: 9177:
        -: 9178:  // configure the property
    #####: 9179:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9180:
        -: 9181:  // set the property descriptor fields:
        -: 9182:
    #####: 9183:  prop_desc.flags |= JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED;
    #####: 9184:  prop_desc.getter = jerry_create_external_function (method_getter);
    #####: 9185:  prop_desc.setter = jerry_create_external_function (method_setter);
        -: 9186:
        -: 9187:  // add the property as "my_prop" for the global object
    #####: 9188:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
    #####: 9189:  jerry_value_t return_value = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####: 9190:  if (jerry_value_is_error (return_value))
        -: 9191:  {
        -: 9192:    // there was an error
        -: 9193:  }
        -: 9194:
        -: 9195:  // if there was no error at this point the global object should have a "my_prop" property
        -: 9196:
    #####: 9197:  jerry_release_value (return_value);
    #####: 9198:  jerry_release_value (prop_name);
        -: 9199:
    #####: 9200:  jerry_property_descriptor_free (&prop_desc);
    #####: 9201:  jerry_release_value (global_obj_val);
        -: 9202:
        -: 9203:  // run an example js code to use the getter/setters
        -: 9204:
    #####: 9205:  const char *src_p = "this.my_prop; this.my_prop; this.my_prop = 4; this.my_prop";
    #####: 9206:  jerry_value_t eval_result = jerry_eval ((const jerry_char_t *) src_p, strlen (src_p), JERRY_PARSE_NO_OPTS);
        -: 9207:
        -: 9208:  // "eval_result" is the last result of "this.my_prop" that is "5" currently.
    #####: 9209:  double result_number = jerry_get_number_value (eval_result);
    #####: 9210:  printf("output: %lf\n", result_number);
        -: 9211:
    #####: 9212:  jerry_cleanup ();
        -: 9213:
    #####: 9214:  return result_number != 5.0;
        -: 9215:}
        -: 9216:```
        -: 9217:
        -: 9218:**See also**
        -: 9219:
        -: 9220:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 9221:- [jerry_property_descriptor_create](#jerry_property_descriptor_create)
        -: 9222:- [jerry_get_own_property_descriptor](#jerry_get_own_property_descriptor)
        -: 9223:- [jerry_property_descriptor_free](#jerry_property_descriptor_free)
        -: 9224:
        -: 9225:
        -: 9226:## jerry_get_own_property_descriptor
        -: 9227:
        -: 9228:**Summary**
        -: 9229:
        -: 9230:Construct property descriptor from specified property.
        -: 9231:
        -: 9232:**Prototype**
        -: 9233:
        -: 9234:```c
        -: 9235:jerry_value_t
        -: 9236:jerry_get_own_property_descriptor (const jerry_value_t  obj_val,
        -: 9237:                                   const jerry_value_t prop_name_val,
        -: 9238:                                   jerry_property_descriptor_t *prop_desc_p);
        -: 9239:```
        -: 9240:
        -: 9241:- `obj_val` - object value
        -: 9242:- `prop_name_val` - property name
        -: 9243:- `prop_desc_p` - pointer to property descriptor
        -: 9244:- return value
        -: 9245:
        -: 9246:*Changed in version [[NEXT_RELEASE]]*: Return value type is changed to `jerry_value_t`.
        -: 9247:
        -: 9248:**Example**
        -: 9249:
        -: 9250:```c
        -: 9251:{
        -: 9252:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -: 9253:
        -: 9254:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9255:
        -: 9256:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
        -: 9257:  jerry_get_own_property_descriptor (global_obj_val, prop_name, &prop_desc);
        -: 9258:  jerry_release_value (prop_name);
        -: 9259:
        -: 9260:  ... // usage of property descriptor
        -: 9261:
        -: 9262:  jerry_property_descriptor_free (&prop_desc);
        -: 9263:  jerry_release_value (global_obj_val);
        -: 9264:}
        -: 9265:```
        -: 9266:
        -: 9267:**See also**
        -: 9268:
        -: 9269:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 9270:- [jerry_property_descriptor_create](#jerry_property_descriptor_create)
        -: 9271:- [jerry_define_own_property](#jerry_define_own_property)
        -: 9272:- [jerry_property_descriptor_free](#jerry_property_descriptor_free)
        -: 9273:
        -: 9274:
        -: 9275:## jerry_property_descriptor_free
        -: 9276:
        -: 9277:**Summary**
        -: 9278:
        -: 9279:Free fields of property descriptor (setter, getter and value).
        -: 9280:
        -: 9281:**Prototype**
        -: 9282:
        -: 9283:```c
        -: 9284:void
        -: 9285:jerry_property_descriptor_free (const jerry_property_descriptor_t *prop_desc_p);
        -: 9286:```
        -: 9287:
        -: 9288:- `prop_desc_p` - pointer to property descriptor
        -: 9289:
        -: 9290:*New in version [[NEXT_RELEASE]]*: Replaces `jerry_free_property_descriptor_fields`.
        -: 9291:
        -: 9292:**Example**
        -: 9293:
        -: 9294:```c
        -: 9295:{
        -: 9296:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9297:
        -: 9298:  ... // usage of property descriptor
        -: 9299:
        -: 9300:  jerry_property_descriptor_free (&prop_desc);
        -: 9301:}
        -: 9302:```
        -: 9303:
        -: 9304:**See also**
        -: 9305:
        -: 9306:- [jerry_property_descriptor_create](#jerry_property_descriptor_create)
        -: 9307:- [jerry_define_own_property](#jerry_define_own_property)
        -: 9308:- [jerry_get_own_property_descriptor](#jerry_get_own_property_descriptor)
        -: 9309:
        -: 9310:
        -: 9311:## jerry_call_function
        -: 9312:
        -: 9313:**Summary**
        -: 9314:
        -: 9315:Call function specified by a function value. Error flag must
        -: 9316:not be set for any arguments of this function. Value of `this`
        -: 9317:parameter should be set to `undefined` for non-method calls.
        -: 9318:
        -: 9319:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9320:is no longer needed.
        -: 9321:
        -: 9322:**Prototype**
        -: 9323:
        -: 9324:```c
        -: 9325:jerry_value_t
        -: 9326:jerry_call_function (const jerry_value_t func_obj_val,
        -: 9327:                     const jerry_value_t this_val,
        -: 9328:                     const jerry_value_t args_p[],
        -: 9329:                     jerry_size_t args_count);
        -: 9330:```
        -: 9331:
        -: 9332:- `func_obj_val` - the function object to call
        -: 9333:- `this_val` - object for 'this' binding
        -: 9334:- `args_p` - function's call arguments
        -: 9335:- `args_count` - number of arguments
        -: 9336:- return value - returned jerry value of the called function
        -: 9337:
        -: 9338:**Example**
        -: 9339:
        -: 9340:```c
        -: 9341:{
        -: 9342:  jerry_value_t target_function;
        -: 9343:
        -: 9344:  ... // create or get "target_function"
        -: 9345:
        -: 9346:  if (jerry_value_is_function (target_function))
        -: 9347:  {
        -: 9348:    jerry_value_t this_val = jerry_create_undefined ();
        -: 9349:    jerry_value_t ret_val = jerry_call_function (target_function, this_val, NULL, 0);
        -: 9350:
        -: 9351:    if (!jerry_value_is_error (ret_val))
        -: 9352:    {
        -: 9353:      ... // handle return value
        -: 9354:    }
        -: 9355:
        -: 9356:    jerry_release_value (ret_val);
        -: 9357:    jerry_release_value (this_val);
        -: 9358:  }
        -: 9359:
        -: 9360:  jerry_release_value (target_function);
        -: 9361:}
        -: 9362:```
        -: 9363:
        -: 9364:**See also**
        -: 9365:
        -: 9366:- [jerry_is_function](#jerry_is_function)
        -: 9367:- [jerry_create_external_function](#jerry_create_external_function)
        -: 9368:
        -: 9369:
        -: 9370:## jerry_construct_object
        -: 9371:
        -: 9372:**Summary**
        -: 9373:
        -: 9374:Construct object, invoking specified function object as constructor.
        -: 9375:Error flag must not be set for any arguments of this function.
        -: 9376:
        -: 9377:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9378:is no longer needed.
        -: 9379:
        -: 9380:**Prototype**
        -: 9381:
        -: 9382:```c
        -: 9383:jerry_value_t
        -: 9384:jerry_construct_object (const jerry_value_t func_obj_val,
        -: 9385:                        const jerry_value_t args_p[],
        -: 9386:                        jerry_size_t args_count);
        -: 9387:```
        -: 9388:
        -: 9389:- `func_obj_val` - function object to call
        -: 9390:- `args_p` - function's call arguments
        -: 9391:- `args_count` - number of arguments
        -: 9392:- return value - returned value of the invoked constructor
        -: 9393:
        -: 9394:**Example**
        -: 9395:
        -: 9396:```c
        -: 9397:{
        -: 9398:  jerry_value_t val;
        -: 9399:
        -: 9400:  ... // receiving val
        -: 9401:
        -: 9402:  if (jerry_is_constructor (val))
        -: 9403:  {
        -: 9404:    jerry_value_t ret_val = jerry_construct_object (val, NULL, 0);
        -: 9405:
        -: 9406:    if (!jerry_value_is_error (ret_val))
        -: 9407:    {
        -: 9408:      ... // handle return value
        -: 9409:    }
        -: 9410:
        -: 9411:    jerry_release_value (ret_val);
        -: 9412:  }
        -: 9413:}
        -: 9414:```
        -: 9415:
        -: 9416:**See also**
        -: 9417:
        -: 9418: - [jerry_is_constructor](#jerry_is_constructor)
        -: 9419:
        -: 9420:
        -: 9421:## jerry_get_object_keys
        -: 9422:
        -: 9423:**Summary**
        -: 9424:
        -: 9425:Get keys of the specified object value.
        -: 9426:
        -: 9427:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9428:is no longer needed.
        -: 9429:
        -: 9430:**Prototype**
        -: 9431:
        -: 9432:```c
        -: 9433:jerry_value_t
        -: 9434:jerry_get_object_keys (const jerry_value_t obj_val);
        -: 9435:```
        -: 9436:
        -: 9437:- `obj_val` - object value
        -: 9438:- return value
        -: 9439:  - array object value, if success
        -: 9440:  - thrown error, otherwise
        -: 9441:
        -: 9442:**Example**
        -: 9443:
        -: 9444:```c
        -: 9445:{
        -: 9446:  jerry_value_t object;
        -: 9447:  ... // create or acquire object
        -: 9448:
        -: 9449:  jerry_value_t keys_array = jerry_get_object_keys (object);
        -: 9450:
        -: 9451:  ... // usage of keys_array
        -: 9452:
        -: 9453:  jerry_release_value (keys_array);
        -: 9454:}
        -: 9455:```
        -: 9456:
        -: 9457:**See also**
        -: 9458:
        -: 9459:- [jerry_get_property](#jerry_get_property)
        -: 9460:- [jerry_set_property](#jerry_set_property)
        -: 9461:
        -: 9462:
        -: 9463:## jerry_get_prototype
        -: 9464:
        -: 9465:**Summary**
        -: 9466:
        -: 9467:Get the prototype of the specified object.
        -: 9468:
        -: 9469:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9470:is no longer needed.
        -: 9471:
        -: 9472:**Prototype**
        -: 9473:
        -: 9474:```c
        -: 9475:jerry_value_t
        -: 9476:jerry_get_prototype (const jerry_value_t obj_val);
        -: 9477:```
        -: 9478:
        -: 9479:- `obj_val` - object value
        -: 9480:- return value
        -: 9481:  - object value, if success
        -: 9482:  - null or thrown error, otherwise
        -: 9483:
        -: 9484:**Example**
        -: 9485:
        -: 9486:```c
        -: 9487:{
        -: 9488:  jerry_value_t object;
        -: 9489:  ... // create or acquire object
        -: 9490:
        -: 9491:  jerry_value_t prototype = jerry_get_prototype (object);
        -: 9492:
        -: 9493:  ... // usage of prototype object
        -: 9494:
        -: 9495:  jerry_release_value (prototype);
        -: 9496:  jerry_release_value (object);
        -: 9497:}
        -: 9498:```
        -: 9499:
        -: 9500:**See also**
        -: 9501:
        -: 9502:- [jerry_set_prototype](#jerry_set_prototype)
        -: 9503:
        -: 9504:
        -: 9505:## jerry_set_prototype
        -: 9506:
        -: 9507:**Summary**
        -: 9508:
        -: 9509:Set the prototype of the specified object.
        -: 9510:
        -: 9511:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9512:is no longer needed.
        -: 9513:
        -: 9514:**Prototype**
        -: 9515:
        -: 9516:```c
        -: 9517:jerry_value_t
        -: 9518:jerry_set_prototype (const jerry_value_t obj_val,
        -: 9519:                     const jerry_value_t proto_obj_val);
        -: 9520:```
        -: 9521:
        -: 9522:- `obj_val` - object value
        -: 9523:- `proto_obj_val` - prototype object value
        -: 9524:- return value
        -: 9525:  - true, if success
        -: 9526:  - thrown error, otherwise
        -: 9527:
        -: 9528:**Example**
        -: 9529:
        -: 9530:```c
        -: 9531:{
        -: 9532:  jerry_value_t object;
        -: 9533:  jerry_value_t prototype;
        -: 9534:
        -: 9535:  ... // create or acquire object and prototype
        -: 9536:
        -: 9537:  jerry_value_t ret_val = jerry_set_prototype (object, prototype);
        -: 9538:
        -: 9539:  jerry_release_value (ret_val);
        -: 9540:  jerry_release_value (prototype);
        -: 9541:  jerry_release_value (object);
        -: 9542:}
        -: 9543:```
        -: 9544:
        -: 9545:**See also**
        -: 9546:
        -: 9547:- [jerry_get_prototype](#jerry_get_prototype)
        -: 9548:
        -: 9549:
        -: 9550:## jerry_get_object_native_pointer
        -: 9551:
        -: 9552:**Summary**
        -: 9553:
        -: 9554:Get native pointer by the given type information.
        -: 9555:The pointer and the type information are previously associated with the object by
        -: 9556:[jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -: 9557:
        -: 9558:*Note*: `out_native_pointer_p` can be NULL, and it means the
        -: 9559:        caller doesn't want to get the native_pointer.
        -: 9560:
        -: 9561:**Prototype**
        -: 9562:
        -: 9563:```c
        -: 9564:bool
        -: 9565:jerry_get_object_native_pointer (const jerry_value_t obj_val,
        -: 9566:                                 void **out_native_pointer_p,
        -: 9567:                                 const jerry_object_native_info_t *native_info_p)
        -: 9568:```
        -: 9569:
        -: 9570:- `obj_val` - object value to get native pointer from.
        -: 9571:- `out_native_pointer_p` - native pointer (output parameter).
        -: 9572:- `native_info_p` - native pointer's type information.
        -: 9573:- return value
        -: 9574:  - true, if there is native pointer associated of the specified object with the given native type info
        -: 9575:  - false, otherwise
        -: 9576:
        -: 9577:*New in version 2.0*: Changed from `jerry_get_object_native_handle`.
        -: 9578:
        -: 9579:**Example**
        -: 9580:
        -: 9581:[doctest]: # ()
        -: 9582:
        -: 9583:```c
        -: 9584:#include <stdio.h>
        -: 9585:#include <stdlib.h>
        -: 9586:#include <string.h>
        -: 9587:#include "jerryscript.h"
        -: 9588:
        -: 9589:typedef struct
        -: 9590:{
        -: 9591:  char *data_p;
        -: 9592:  unsigned int length;
        -: 9593:} buffer_native_object_t;
        -: 9594:
        -: 9595:typedef struct
        -: 9596:{
        -: 9597:  int area;
        -: 9598:  int perimeter;
        -: 9599:} shape_native_object_t;
        -: 9600:
        -: 9601:#define SECRET_INFO ((void *) 42)
        -: 9602:
        -: 9603:static void
    #####: 9604:buffer_native_freecb (void *native_p,
        -: 9605:                      jerry_object_native_info_t *info_p)
        -: 9606:{
        -: 9607:  (void) info_p;
        -: 9608:
    #####: 9609:  char *data_p = ((buffer_native_object_t*)native_p)->data_p;
        -: 9610:
    #####: 9611:  if (data_p != NULL)
        -: 9612:  {
    #####: 9613:    free (data_p);
        -: 9614:  }
        -: 9615:
    #####: 9616:  free (native_p);
    #####: 9617:}
        -: 9618:
        -: 9619:static void
    #####: 9620:shape_native_freecb (void *native_p,
        -: 9621:                     jerry_object_native_info_t *info_p)
        -: 9622:{
        -: 9623:  (void) info_p;
        -: 9624:
    #####: 9625:  free (native_p);
    #####: 9626:}
        -: 9627:
        -: 9628:static void
    #####: 9629:destructor_freecb (void *native_p,
        -: 9630:                   jerry_object_native_info_t *info_p)
        -: 9631:{
        -: 9632:  (void) native_p;
        -: 9633:  (void) info_p;
        -: 9634:
    #####: 9635:   printf("Note: the object has been freed\n");
    #####: 9636:}
        -: 9637:
        -: 9638:// NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -: 9639:// C type `buffer_native_object_t *`.
        -: 9640:static const jerry_object_native_info_t buffer_obj_type_info =
        -: 9641:{
        -: 9642:  .free_cb = buffer_native_freecb
        -: 9643:};
        -: 9644:
        -: 9645:// NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -: 9646:// C type `shape_native_object_t *`.
        -: 9647:static const jerry_object_native_info_t shape_obj_type_info =
        -: 9648:{
        -: 9649:  .free_cb = shape_native_freecb
        -: 9650:};
        -: 9651:
        -: 9652:// NOTE: The address (!) of type_info is the unique "identifier"
        -: 9653:static const jerry_object_native_info_t destructor_obj_type_info =
        -: 9654:{
        -: 9655:  .free_cb = destructor_freecb
        -: 9656:};
        -: 9657:
        -: 9658:static void
    #####: 9659:print_buffer (char *data_p,
        -: 9660:              unsigned int length)
        -: 9661:{
    #####: 9662:  for (unsigned int i = 0; i < length; ++i)
        -: 9663:  {
    #####: 9664:    printf("%c", data_p[i]);
        -: 9665:  }
        -: 9666:
    #####: 9667:  printf("\n");
    #####: 9668:}
        -: 9669:
        -: 9670:static void
    #####: 9671:do_stuff (jerry_value_t object)
        -: 9672:{
        -: 9673:  void *native_p;
    #####: 9674:  bool has_p = jerry_get_object_native_pointer (object, &native_p, &buffer_obj_type_info);
        -: 9675:
    #####: 9676:  if (!has_p)
        -: 9677:  {
        -: 9678:    // Process the error
    #####: 9679:    return;
        -: 9680:  }
        -: 9681:
        -: 9682:  // It is safe to cast to buffer_native_object_t * and dereference the pointer:
    #####: 9683:  buffer_native_object_t *buffer_p = (buffer_native_object_t *) native_p;
    #####: 9684:  print_buffer (buffer_p->data_p, buffer_p->length); // Usage of buffer_p
        -: 9685:
    #####: 9686:  bool need_shape_info = true; // implementation dependent
        -: 9687:
        -: 9688:  if (need_shape_info)
        -: 9689:  {
    #####: 9690:    has_p = jerry_get_object_native_pointer (object, &native_p, &shape_obj_type_info);
        -: 9691:
    #####: 9692:    if (!has_p)
        -: 9693:    {
        -: 9694:      // Process the error
        -: 9695:      return;
        -: 9696:    }
        -: 9697:
        -: 9698:    // It is safe to cast to shape_native_object_t * and dereference the pointer:
    #####: 9699:    shape_native_object_t *shape_p = (shape_native_object_t *) native_p;
        -: 9700:
    #####: 9701:    printf("Area: %d\tPerimeter: %d\n", shape_p->area, shape_p->perimeter); // Usage of shape_p
        -: 9702:  }
        -: 9703:
    #####: 9704:  bool need_secret_info = true; // implementation dependent
        -: 9705:
        -: 9706:  if (need_secret_info)
        -: 9707:  {
    #####: 9708:    has_p = jerry_get_object_native_pointer (object, &native_p, NULL);
        -: 9709:
    #####: 9710:    if (!has_p)
        -: 9711:    {
        -: 9712:      // Process the error
        -: 9713:      return;
        -: 9714:    }
        -: 9715:
    #####: 9716:    printf("Secret: %d\n", (int)((uintptr_t) native_p)); // Usage of native_p
        -: 9717:
    #####: 9718:    bool deleted = jerry_delete_object_native_pointer (object, NULL);
        -: 9719:
    #####: 9720:    if (deleted)
        -: 9721:    {
        -: 9722:      printf("The secret is no longer available\n");
        -: 9723:    }
        -: 9724:  }
        -: 9725:}
        -: 9726:
        -: 9727:int
    #####: 9728:main (void)
        -: 9729:{
    #####: 9730:  jerry_init (JERRY_INIT_EMPTY);
        -: 9731:
    #####: 9732:  jerry_value_t object = jerry_create_object ();
    #####: 9733:  buffer_native_object_t *buffer_p = (buffer_native_object_t *) malloc (sizeof (buffer_native_object_t));
    #####: 9734:  buffer_p->length = 14;
    #####: 9735:  buffer_p->data_p = (char *) malloc (buffer_p->length * sizeof (char));
    #####: 9736:  memcpy (buffer_p->data_p, "My buffer data", buffer_p->length);
    #####: 9737:  jerry_set_object_native_pointer (object, buffer_p, &buffer_obj_type_info);
        -: 9738:
    #####: 9739:  shape_native_object_t *shape_p = (shape_native_object_t *) malloc (sizeof (shape_native_object_t));
    #####: 9740:  shape_p->area = 6;
    #####: 9741:  shape_p->perimeter = 12;
    #####: 9742:  jerry_set_object_native_pointer (object, shape_p, &shape_obj_type_info);
        -: 9743:
        -: 9744:  // The native pointer can be NULL. This gives possibily to get notified via the native type info's
        -: 9745:  // free callback when the object has been freed by the GC.
    #####: 9746:  jerry_set_object_native_pointer (object, NULL, &destructor_obj_type_info);
        -: 9747:
        -: 9748:  // The native type info can be NULL as well. In this case the registered property is simply freed
        -: 9749:  // when the object is freed by te GC.
    #####: 9750:  jerry_set_object_native_pointer (object, SECRET_INFO, NULL);
        -: 9751:
    #####: 9752:  do_stuff (object);
        -: 9753:
    #####: 9754:  jerry_release_value (object);
    #####: 9755:  jerry_cleanup ();
        -: 9756:
        -: 9757:  return 0;
        -: 9758:}
        -: 9759:```
        -: 9760:
        -: 9761:**See also**
        -: 9762:
        -: 9763:- [jerry_create_object](#jerry_create_object)
        -: 9764:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -: 9765:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 9766:
        -: 9767:
        -: 9768:## jerry_set_object_native_pointer
        -: 9769:
        -: 9770:**Summary**
        -: 9771:
        -: 9772:Set native pointer and an optional type information for the specified object.
        -: 9773:You can get them by calling [jerry_get_object_native_pointer](#jerry_get_object_native_pointer) later.
        -: 9774:
        -: 9775:*Notes*:
        -: 9776: - If a native pointer was already set for the object with the same type information, its value is updated.
        -: 9777: - If a non-NULL free callback is specified in the native type information,
        -: 9778:   it will be called by the garbage collector when the object is freed.
        -: 9779: - If the object is only referenced via the "global" object (or one of it's "child"),
        -: 9780:   the free callback will be invoked during the execution of `jerry_cleanup`.
        -: 9781: - The free callback can invoke API functions.
        -: 9782:
        -: 9783:*Note*: If possible do not store API values in native pointers, rather check
        -: 9784:        [jerry_set_internal_property](#jerry_set_internal_property).
        -: 9785:
        -: 9786:**Prototype**
        -: 9787:
        -: 9788:```c
        -: 9789:void
        -: 9790:jerry_set_object_native_pointer (const jerry_value_t obj_val,
        -: 9791:                                 void *native_p,
        -: 9792:                                 const jerry_object_native_info_t *info_p)
        -: 9793:```
        -: 9794:
        -: 9795:- `obj_val` - object to set native pointer in.
        -: 9796:- `native_p` - native pointer.
        -: 9797:- `info_p` - native pointer's type information or NULL. When used, this should
        -: 9798:             be a long-lived pointer, usually a pointer to a
        -: 9799:             `static const jerry_object_native_info_t` makes most sense.
        -: 9800:
        -: 9801:*New in version 2.0*: Changed from `jerry_set_object_native_handle`.
        -: 9802:
        -: 9803:**Example**
        -: 9804:
        -: 9805:See [jerry_get_object_native_pointer](#jerry_get_object_native_pointer) for a
        -: 9806:best-practice example.
        -: 9807:
        -: 9808:**See also**
        -: 9809:
        -: 9810:- [jerry_create_object](#jerry_create_object)
        -: 9811:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -: 9812:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 9813:
        -: 9814:## jerry_delete_object_native_pointer
        -: 9815:
        -: 9816:**Summary**
        -: 9817:
        -: 9818:Delete the native pointer of the specified object associated with the given native type info.
        -: 9819:
        -: 9820:*Notes*:
        -: 9821: - If the specified object has no matching native pointer for the given native type info the operation has no effect.
        -: 9822: - The method does not invoke the free callback specified in the type info.
        -: 9823:   If the native pointer should be freed then one must get the native pointer first and invoke the free callback manually
        -: 9824:   before calling this method.
        -: 9825: - This operation cannot throw an exception.
        -: 9826:
        -: 9827:**Prototype**
        -: 9828:
        -: 9829:```c
        -: 9830:bool
        -: 9831:jerry_delete_object_native_pointer (const jerry_value_t obj_val,
        -: 9832:                                    const jerry_object_native_info_t *info_p)
        -: 9833:```
        -: 9834:
        -: 9835:- `obj_val` - object to delete native pointer from.
        -: 9836:- `info_p` - native pointer's type information.
        -: 9837:
        -: 9838:*New in version 2.0*.
        -: 9839:
        -: 9840:**Example**
        -: 9841:
        -: 9842:See [jerry_get_object_native_pointer](#jerry_get_object_native_pointer) for a
        -: 9843:best-practice example.
        -: 9844:
        -: 9845:**See also**
        -: 9846:
        -: 9847:- [jerry_create_object](#jerry_create_object)
        -: 9848:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -: 9849:- [jerry_get_object_native_pointer](#jerry_set_object_native_pointer)
        -: 9850:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 9851:
        -: 9852:
        -: 9853:## jerry_native_pointer_init_references
        -: 9854:
        -: 9855:**Summary**
        -: 9856:
        -: 9857:Initialize the references stored in a buffer pointed by a native pointer.
        -: 9858:The references are initialized to undefined. This function must be called
        -: 9859:before the buffer is attached to an object by
        -: 9860:[jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -: 9861:
        -: 9862:*Note*:
        -: 9863:  - The description of [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 9864:    provides detailed information about these references.
        -: 9865:
        -: 9866:**Prototype**
        -: 9867:
        -: 9868:```c
        -: 9869:void
        -: 9870:jerry_native_pointer_init_references (void *native_pointer_p,
        -: 9871:                                      const jerry_object_native_info_t *native_info_p);
        -: 9872:```
        -: 9873:
        -: 9874:- `native_pointer_p` - a valid non-NULL pointer to a native buffer.
        -: 9875:- `native_info_p` - native pointer's type information.
        -: 9876:
        -: 9877:*New in version [[NEXT_RELEASE]]*.
        -: 9878:
        -: 9879:**Example**
        -: 9880:
        -: 9881:[doctest]: # ()
        -: 9882:
        -: 9883:```c
        -: 9884:#include <stdlib.h>
        -: 9885:#include "jerryscript.h"
        -: 9886:
        -: 9887:typedef struct
        -: 9888:{
        -: 9889:  uint32_t user_data;
        -: 9890:  jerry_value_t a;
        -: 9891:  jerry_value_t b;
        -: 9892:  uint32_t user_other_data;
        -: 9893:} user_buffer_t;
        -: 9894:
        -: 9895:static void
    #####: 9896:native_references_free_callback (void *native_p, /**< native pointer */
        -: 9897:                                 jerry_object_native_info_t *info_p) /**< native info */
        -: 9898:{
        -: 9899:  /* References must be finalized when a buffer is no longer attached. */
    #####: 9900:  jerry_native_pointer_release_references (native_p, info_p);
    #####: 9901:  free (native_p);
    #####: 9902:} /* native_references_free_callback */
        -: 9903:
        -: 9904:static const jerry_object_native_info_t native_info =
        -: 9905:{
        -: 9906:  .free_cb = native_references_free_callback,
        -: 9907:  .number_of_references = 2,
        -: 9908:  .offset_of_references = offsetof(user_buffer_t, a),
        -: 9909:};
        -: 9910:
        -: 9911:int
    #####: 9912:main (void)
        -: 9913:{
    #####: 9914:  jerry_init (JERRY_INIT_EMPTY);
        -: 9915:
    #####: 9916:  jerry_value_t object_value = jerry_create_object ();
        -: 9917:
    #####: 9918:  user_buffer_t *buffer_p = (user_buffer_t *) malloc (sizeof (user_buffer_t));
        -: 9919:
        -: 9920:  /* References must be initialized before a buffer is attached. */
    #####: 9921:  jerry_native_pointer_init_references ((void *) buffer_p, &native_info);
        -: 9922:
    #####: 9923:  jerry_set_object_native_pointer (object_value, (void *) buffer_p, &native_info);
        -: 9924:
        -: 9925:  /* References can be modified after the buffer is attached.
        -: 9926:   * This example sets a self reference. */
    #####: 9927:  jerry_native_pointer_set_reference (&buffer_p->a, object_value);
        -: 9928:
    #####: 9929:  jerry_release_value (object_value);
        -: 9930:
    #####: 9931:  jerry_cleanup ();
        -: 9932:  return 0;
        -: 9933:}
        -: 9934:```
        -: 9935:
        -: 9936:**See also**
        -: 9937:
        -: 9938:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -: 9939:- [jerry_native_pointer_release_references](#jerry_native_pointer_release_references)
        -: 9940:- [jerry_native_pointer_set_reference](#jerry_native_pointer_set_reference)
        -: 9941:
        -: 9942:## jerry_native_pointer_release_references
        -: 9943:
        -: 9944:**Summary**
        -: 9945:
        -: 9946:Release the value references stored in a buffer pointed by a native pointer.
        -: 9947:This function must be called after a buffer is no longer attached to any
        -: 9948:object, even if the buffer is attached to another object again. This
        -: 9949:function also initializes the values to undefined, so calling
        -: 9950:[jerry_native_pointer_init_references](#jerry_native_pointer_init_references)
        -: 9951:is optional before the buffer is attached again.
        -: 9952:
        -: 9953:*Note*:
        -: 9954:  - The description of [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 9955:    provides detailed information about these references.
        -: 9956:
        -: 9957:**Prototype**
        -: 9958:
        -: 9959:```c
        -: 9960:void
        -: 9961:jerry_native_pointer_release_references (void *native_pointer_p,
        -: 9962:                                         const jerry_object_native_info_t *native_info_p);
        -: 9963:```
        -: 9964:
        -: 9965:- `native_pointer_p` - a valid non-NULL pointer to a native buffer.
        -: 9966:- `native_info_p` - native pointer's type information.
        -: 9967:
        -: 9968:*New in version [[NEXT_RELEASE]]*.
        -: 9969:
        -: 9970:**Example**
        -: 9971:
        -: 9972:See the example of [jerry_native_pointer_init_references](#jerry_native_pointer_init_references).
        -: 9973:
        -: 9974:**See also**
        -: 9975:
        -: 9976:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -: 9977:- [jerry_native_pointer_init_references](#jerry_native_pointer_init_references)
        -: 9978:- [jerry_native_pointer_set_reference](#jerry_native_pointer_set_reference)
        -: 9979:
        -: 9980:
        -: 9981:## jerry_native_pointer_set_reference
        -: 9982:
        -: 9983:**Summary**
        -: 9984:
        -: 9985:Updates a value reference inside the area specified by the `number_of_references` and
        -: 9986:`offset_of_references` fields in its corresponding
        -: 9987:[jerry_object_native_info_t](#jerry_object_native_info_t) data. The area must be
        -: 9988:part of a buffer which is currently assigned to an object.
        -: 9989:
        -: 9990:*Note*:
        -: 9991:  - The description of [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 9992:    provides detailed information about these references.
        -: 9993:
        -: 9994:**Prototype**
        -: 9995:
        -: 9996:```c
        -: 9997:void
        -: 9998:jerry_native_pointer_set_reference (jerry_value_t *reference_p,
        -: 9999:                                    jerry_value_t value)
        -:10000:```
        -:10001:
        -:10002:- `reference_p` - a valid non-NULL pointer to a reference in a native buffer.
        -:10003:- `value` - new value of the reference.
        -:10004:
        -:10005:*New in version [[NEXT_RELEASE]]*.
        -:10006:
        -:10007:**Example**
        -:10008:
        -:10009:See the example of [jerry_native_pointer_init_references](#jerry_native_pointer_init_references).
        -:10010:
        -:10011:**See also**
        -:10012:
        -:10013:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:10014:- [jerry_native_pointer_init_references](#jerry_native_pointer_init_references)
        -:10015:- [jerry_native_pointer_release_references](#jerry_native_pointer_release_references)
        -:10016:
        -:10017:
        -:10018:## jerry_object_get_property_names
        -:10019:
        -:10020:**Summary**
        -:10021:
        -:10022:Gets the property keys for the given object using the selected filters.
        -:10023:
        -:10024:**Prototype**
        -:10025:
        -:10026:```c
        -:10027:jerry_value_t
        -:10028:jerry_object_get_property_names (jerry_value_t obj_val,
        -:10029:                                 jerry_property_filter_t filter);
        -:10030:```
        -:10031:
        -:10032:- `obj_val` - object value
        -:10033:- `filter` - any combination of [jerry_property_filter_t](#jerry_property_filter_t) options
        -:10034:- return value
        -:10035:  - array containing the filtered property keys in successful operation
        -:10036:  - error marked with error flag, otherwise
        -:10037:
        -:10038:*New in version 2.4*.
        -:10039:
        -:10040:**Example**
        -:10041:
        -:10042:```c
        -:10043:{
        -:10044:  jerry_value_t global_object = jerry_get_global_object ();
        -:10045:  jerry_value_t keys = jerry_object_get_property_names (object, JERRY_PROPERTY_FILTER_ALL);
        -:10046:
        -:10047:  ... // usage of keys
        -:10048:
        -:10049:  jerry_release_value (keys);
        -:10050:  jerry_release_value (global_object);
        -:10051:}
        -:10052:```
        -:10053:
        -:10054:**See also**
        -:10055:
        -:10056:- [jerry_property_filter_t](#jerry_property_filter_t)
        -:10057:
        -:10058:## jerry_foreach_object_property
        -:10059:
        -:10060:**Summary**
        -:10061:
        -:10062:Applies the given function to every enumerable(!) property in the given object.
        -:10063:
        -:10064:The "iterator" `foreach_p` method should return `true` value to continue the iteration.
        -:10065:If the method returns `false` the iteration will end.
        -:10066:
        -:10067:**Prototype**
        -:10068:
        -:10069:```c
        -:10070:bool
        -:10071:jerry_foreach_object_property (jerry_value_t obj_val,
        -:10072:                               jerry_object_property_foreach_t foreach_p,
        -:10073:                               void *user_data_p);
        -:10074:```
        -:10075:
        -:10076:- `obj_val` - object value
        -:10077:- `foreach_p` - foreach function, that will be applied for each property
        -:10078:- `user_data_p` - user data for foreach function
        -:10079:- return value
        -:10080:  - true, if object fields traversal was performed successfully, i.e.:
        -:10081:    - no unhandled exceptions were thrown in object fields traversal
        -:10082:    - object fields traversal was stopped on callback that returned false
        -:10083:  - false, otherwise
        -:10084:
        -:10085:**Example**
        -:10086:
        -:10087:
        -:10088:[doctest]: # (name="02.API-REFERENCE-foreach-property.c")
        -:10089:
        -:10090:```c
        -:10091:#include <stdio.h>
        -:10092:#include "jerryscript.h"
        -:10093:
        -:10094:/* Example structure used as user data for the property iteration. */
        -:10095:struct iteration_data {
        -:10096:  int string_property_count;
        -:10097:};
        -:10098:
        -:10099:/*
        -:10100: * Example foreach function to print out property names.
        -:10101: */
        -:10102:static bool
    #####:10103:foreach_function (const jerry_value_t prop_name,
        -:10104:                  const jerry_value_t prop_value,
        -:10105:                  void *user_data_p)
        -:10106:{
    #####:10107:  if (jerry_value_is_string (prop_name)) {
        -:10108:    jerry_char_t string_buffer[128];
    #####:10109:    jerry_size_t copied_bytes = jerry_substring_to_char_buffer (prop_name,
        -:10110:                                                                0,
        -:10111:                                                                127,
        -:10112:                                                                string_buffer,
        -:10113:                                                                127);
    #####:10114:    string_buffer[copied_bytes] = '\0';
        -:10115:
    #####:10116:    printf ("Property: %s\n", string_buffer);
        -:10117:
    #####:10118:    struct iteration_data *data = (struct iteration_data *) user_data_p;
    #####:10119:    data->string_property_count++;
        -:10120:  }
        -:10121:
        -:10122:  /* return true to continue iteration */
    #####:10123:  return true;
        -:10124:}
        -:10125:
        -:10126:int
    #####:10127:main (void)
        -:10128:{
    #####:10129:  jerry_init (JERRY_INIT_EMPTY);
        -:10130:
        -:10131:  /* Construct an example object with a single property. */
    #####:10132:  jerry_value_t object = jerry_create_object ();
        -:10133:  {
    #####:10134:    jerry_value_t test_property = jerry_create_string ((const jerry_char_t *) "DemoProp");
    #####:10135:    jerry_value_t test_value = jerry_create_number (3);
        -:10136:    /* By default all properties added to an object are enumerable. */
    #####:10137:    jerry_value_t set_result = jerry_set_property (object, test_property, test_value);
        -:10138:    /* The `set_result` should be checked if it is an error or not. */
    #####:10139:    jerry_release_value (set_result);
    #####:10140:    jerry_release_value (test_value);
    #####:10141:    jerry_release_value (test_property);
        -:10142:  }
        -:10143:
        -:10144:  /* Iterate on the object's properties with the given user data. */
    #####:10145:  struct iteration_data user_data = { 0 };
        -:10146:
    #####:10147:  bool iteration_result = jerry_foreach_object_property (object, foreach_function, &user_data);
        -:10148:  /* Check and process the `iteration_result` if required. */
        -:10149:
    #####:10150:  jerry_release_value (object);
        -:10151:
    #####:10152:  jerry_cleanup ();
        -:10153:
    #####:10154:  return user_data.string_property_count == 0;
        -:10155:}
        -:10156:```
        -:10157:
        -:10158:**See also**
        -:10159:
        -:10160:- [jerry_object_property_foreach_t](#jerry_object_property_foreach_t)
        -:10161:
        -:10162:## jerry_objects_foreach
        -:10163:
        -:10164:**Summary**
        -:10165:
        -:10166:Iterate over all objects available in the engine.
        -:10167:
        -:10168:The "iterator" `foreach_p` method should return `true` value to continue the search.
        -:10169:If the method returns `false` the search for the object is finished.
        -:10170:
        -:10171:*Note*: Values obtained in `foreach_p` must be retained using [jerry_acquire_value](#jerry_acquire_value).
        -:10172:
        -:10173:**Prototype**
        -:10174:
        -:10175:```c
        -:10176:bool
        -:10177:jerry_objects_foreach (jerry_objects_foreach_t foreach_p,
        -:10178:                       void *user_data_p);
        -:10179:```
        -:10180:
        -:10181:- `foreach_p` - function that will be invoked for each object.
        -:10182:- `user_data_p` - User data to pass to the function.
        -:10183:- return value
        -:10184:  - `true`, if the search function terminated the traversal by returning `false`
        -:10185:  - `false`, if the end of the list of objects was reached
        -:10186:
        -:10187:*New in version 2.0*.
        -:10188:
        -:10189:**Example**
        -:10190:
        -:10191:[doctest]: # (name="02.API-REFERENCE-objects-foreach.c")
        -:10192:
        -:10193:```c
        -:10194:#include <stdio.h>
        -:10195:#include "jerryscript.h"
        -:10196:
        -:10197:/* Create a custom structure to guide the search and store the result. */
        -:10198:typedef struct
        -:10199:{
        -:10200:  jerry_value_t property_name;
        -:10201:  jerry_value_t result;
        -:10202:} find_my_object_info_t;
        -:10203:
        -:10204:/*
        -:10205: * Find the first object with the given property.
        -:10206: */
        -:10207:static bool
    #####:10208:find_my_object (const jerry_value_t candidate,
        -:10209:                void *user_data_p)
        -:10210:{
    #####:10211:  find_my_object_info_t *info_p = (find_my_object_info_t *) user_data_p;
        -:10212:
        -:10213:  /* Check if the given object has the required property. */
    #####:10214:  jerry_value_t has_property = jerry_has_property (candidate, info_p->property_name);
    #####:10215:  bool object_found = jerry_value_is_true (has_property);
        -:10216:
    #####:10217:  if (object_found)
        -:10218:  {
        -:10219:    /* We found it, so we acquire the value and record it. */
    #####:10220:    info_p->result = jerry_acquire_value (candidate);
        -:10221:  }
        -:10222:
    #####:10223:  jerry_release_value (has_property);
        -:10224:
        -:10225:  /* If the object was not found continue the search. */
    #####:10226:  return !object_found;
        -:10227:} /* find_my_object */
        -:10228:
        -:10229:int
    #####:10230:main (void)
        -:10231:{
    #####:10232:  int return_value = 0;
        -:10233:
        -:10234:  /* Initialize JerryScript engine. */
    #####:10235:  jerry_init (JERRY_INIT_EMPTY);
        -:10236:
        -:10237:  /* Create the test object. */
        -:10238:  {
    #####:10239:    jerry_value_t test_object = jerry_create_object ();
        -:10240:
        -:10241:    {
    #####:10242:      jerry_value_t test_property = jerry_create_string ((const jerry_char_t *) "DemoProp");
    #####:10243:      jerry_value_t test_value = jerry_create_number (3);
    #####:10244:      jerry_value_t set_result = jerry_set_property (test_object, test_property, test_value);
        -:10245:      /* The `set_result` should be checked if it is an error or not. */
    #####:10246:      jerry_release_value (set_result);
    #####:10247:      jerry_release_value (test_value);
    #####:10248:      jerry_release_value (test_property);
        -:10249:    }
        -:10250:
        -:10251:    {
        -:10252:      /* Register the test object into the global object. */
    #####:10253:      jerry_value_t global_object = jerry_get_global_object ();
    #####:10254:      jerry_value_t demo_property = jerry_create_string ((const jerry_char_t *) "DemoObject");
    #####:10255:      jerry_value_t set_result = jerry_set_property (global_object, demo_property, test_object);
        -:10256:      /* The `set_result` should be checked if it is an error or not. */
    #####:10257:      jerry_release_value (set_result);
    #####:10258:      jerry_release_value (demo_property);
    #####:10259:      jerry_release_value (global_object);
        -:10260:    }
        -:10261:
    #####:10262:    jerry_release_value (test_object);
        -:10263:  }
        -:10264:
        -:10265:  /* Look up the test object base on a property name. */
    #####:10266:  find_my_object_info_t search_info =
        -:10267:  {
    #####:10268:    .property_name = jerry_create_string ((const jerry_char_t *) "DemoProp")
        -:10269:  };
        -:10270:
    #####:10271:  if (jerry_objects_foreach (find_my_object, &search_info))
        -:10272:  {
        -:10273:    /* The search was successful. Do something useful with search_info.result. */
        -:10274:    // ...
    #####:10275:    printf ("Object found\n");
        -:10276:
        -:10277:    /* Release the found object after we're done using it. */
    #####:10278:    jerry_release_value (search_info.result);
        -:10279:  }
        -:10280:  else
        -:10281:  {
        -:10282:    /* The search has failed. */
    #####:10283:    printf ("Object not found\n");
        -:10284:
    #####:10285:    return_value = 1;
        -:10286:  }
        -:10287:
    #####:10288:  jerry_release_value (search_info.property_name);
        -:10289:
        -:10290:  /* Engine cleanup */
    #####:10291:  jerry_cleanup ();
        -:10292:  return return_value;
        -:10293:}
        -:10294:```
        -:10295:
        -:10296:**See also**
        -:10297:
        -:10298:- [jerry_objects_foreach_t](#jerry_objects_foreach_t)
        -:10299:
        -:10300:## jerry_objects_foreach_by_native_info
        -:10301:
        -:10302:**Summary**
        -:10303:
        -:10304:Iterate over all objects in the engine matching a certain native data type.
        -:10305:
        -:10306:The "iterator" `foreach_p` method should return `true` value to continue the search.
        -:10307:If the method returns `false` the search for the object is finished.
        -:10308:
        -:10309:*Note*: Values obtained in `foreach_p` must be retained using [jerry_acquire_value](#jerry_acquire_value).
        -:10310:
        -:10311:**Prototype**
        -:10312:
        -:10313:```c
        -:10314:bool
        -:10315:jerry_objects_foreach_by_native_info (const jerry_object_native_info_t *native_info_p,
        -:10316:                                      jerry_objects_foreach_by_native_info_t foreach_p,
        -:10317:                                      void *user_data_p);
        -:10318:```
        -:10319:
        -:10320:- `native_info_p` - native pointer's type information.
        -:10321:- `foreach_p` - function that will be invoked for each object.
        -:10322:- return value
        -:10323:  - `true`, if the search function terminated the traversal by returning `false`
        -:10324:  - `false`, if the end of the list of objects was reached
        -:10325:
        -:10326:*New in version 2.0*.
        -:10327:
        -:10328:**Example**
        -:10329:
        -:10330:[doctest]: # (name="02.API-REFERENCE-objects-foreach-nativeptr.c")
        -:10331:
        -:10332:```c
        -:10333:#include <stdio.h>
        -:10334:#include <stdlib.h>
        -:10335:#include "jerryscript.h"
        -:10336:
        -:10337:typedef struct
        -:10338:{
        -:10339:  int foo;
        -:10340:  bool bar;
        -:10341:} native_obj_t;
        -:10342:
        -:10343:typedef struct
        -:10344:{
        -:10345:  jerry_value_t found_object;
        -:10346:  native_obj_t *found_native_data_p;
        -:10347:
        -:10348:  int match_foo_value;
        -:10349:} find_object_data_t;
        -:10350:
    #####:10351:static void native_freecb (void *native_p,
        -:10352:                           jerry_object_native_info_t *info_p)
        -:10353:{
        -:10354:  (void) info_p;
        -:10355:
        -:10356:  /* `native_p` was allocated via malloc. */
    #####:10357:  free (native_p);
    #####:10358:} /* native_freecb */
        -:10359:
        -:10360:/*
        -:10361: * NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -:10362: * C type `native_obj_t *`.
        -:10363: */
        -:10364:static const jerry_object_native_info_t native_obj_type_info =
        -:10365:{
        -:10366:  .free_cb = native_freecb
        -:10367:};
        -:10368:
        -:10369:/*
        -:10370: * Function creating JS object that is "backed" by a `native_obj_t`.
        -:10371: */
        -:10372:static void
    #####:10373:add_object_with_nativeptr (int foo_value)
        -:10374:{
        -:10375:  // construct object and native_set value:
    #####:10376:  jerry_value_t test_object = jerry_create_object ();
    #####:10377:  native_obj_t *native_obj_p = malloc (sizeof (*native_obj_p));
    #####:10378:  native_obj_p->foo = foo_value;
    #####:10379:  native_obj_p->bar = true;
        -:10380:
    #####:10381:  jerry_set_object_native_pointer (test_object, native_obj_p, &native_obj_type_info);
        -:10382:
        -:10383:  /* Register the test object into the global object. */
    #####:10384:  jerry_value_t global_object = jerry_get_global_object ();
    #####:10385:  jerry_value_t demo_property = jerry_create_string ((const jerry_char_t *) "DemoObject");
    #####:10386:  jerry_value_t set_result = jerry_set_property (global_object, demo_property, test_object);
        -:10387:  /* The `set_result` should be checked if it is an error or not. */
    #####:10388:  jerry_release_value (set_result);
    #####:10389:  jerry_release_value (demo_property);
    #####:10390:  jerry_release_value (global_object);
        -:10391:
    #####:10392:  jerry_release_value (test_object);
    #####:10393:} /* create_object_with_nativeptr */
        -:10394:
        -:10395:/*
        -:10396: * Example native method that searches for a JavaScript object
        -:10397: * with a `native_obj_type_info` has the correct value.
        -:10398: */
        -:10399:static bool
    #####:10400:find_object (const jerry_value_t candidate, void *data_p, void *user_data_p)
        -:10401:{
    #####:10402:  find_object_data_t *find_data_p = (find_object_data_t *) user_data_p;
    #####:10403:  native_obj_t *native_obj_p = (native_obj_t *) data_p;
        -:10404:
    #####:10405:  if (find_data_p->match_foo_value == native_obj_p->foo)
        -:10406:  {
        -:10407:    /* If the object was found, acquire it and store it in the user data. */
    #####:10408:    find_data_p->found_object = jerry_acquire_value (candidate);
    #####:10409:    find_data_p->found_native_data_p = native_obj_p;
        -:10410:
        -:10411:    /* Stop traversing over the objects. */
    #####:10412:    return false;
        -:10413:  }
        -:10414:
        -:10415:  /* Indicate that the object was not found, so traversal must continue. */
        -:10416:  return true;
        -:10417:} /* find_object */
        -:10418:
        -:10419:int
    #####:10420:main (void)
        -:10421:{
    #####:10422:  jerry_init (JERRY_INIT_EMPTY);
        -:10423:
    #####:10424:  add_object_with_nativeptr (4);
    #####:10425:  add_object_with_nativeptr (3);
    #####:10426:  add_object_with_nativeptr (2);
        -:10427:
    #####:10428:  find_object_data_t find_data =
        -:10429:  {
        -:10430:    .match_foo_value = 3,
        -:10431:  };
        -:10432:
    #####:10433:  if (jerry_objects_foreach_by_native_info (&native_obj_type_info, find_object, &find_data))
        -:10434:  {
        -:10435:    /* The object was found and is now stored in `find_data.found_object`. After using it, it must be released. */
    #####:10436:    printf ("Object found, native foo value: %d\n", find_data.found_native_data_p->foo);
        -:10437:
    #####:10438:    jerry_release_value (find_data.found_object);
        -:10439:  }
        -:10440:  else
        -:10441:  {
        -:10442:    printf ("Object not found\n");
        -:10443:  }
        -:10444:
    #####:10445:  jerry_cleanup ();
        -:10446:
        -:10447:  return 0;
        -:10448:}
        -:10449:```
        -:10450:
        -:10451:**See also**
        -:10452:
        -:10453:- [jerry_create_object](#jerry_create_object)
        -:10454:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:10455:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -:10456:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10457:- [jerry_objects_foreach](#jerry_objects_foreach)
        -:10458:
        -:10459:
        -:10460:# Input validator functions
        -:10461:
        -:10462:## jerry_is_valid_utf8_string
        -:10463:
        -:10464:**Summary**
        -:10465:
        -:10466:Check if a given character buffer is a valid UTF-8 string.
        -:10467:
        -:10468:**Notes**: Calling this method is safe in any time. It can be called
        -:10469:even before engine initialization.
        -:10470:
        -:10471:**Prototype**
        -:10472:
        -:10473:```c
        -:10474:bool
        -:10475:jerry_is_valid_utf8_string (const jerry_char_t *utf8_buf_p, /**< UTF-8 string */
        -:10476:                            jerry_size_t buf_size) /**< string size */
        -:10477:```
        -:10478:
        -:10479:- `utf8_buf_p` - UTF-8 input string buffer.
        -:10480:- `buf_size` - input string buffer size in bytes.
        -:10481:- return value
        -:10482:  - true, if the provided string was a valid UTF-8 string.
        -:10483:  - false, if the string is not valid as an UTF-8 string.
        -:10484:
        -:10485:*New in version 2.0*.
        -:10486:
        -:10487:**Example**
        -:10488:
        -:10489:[doctest]: # ()
        -:10490:
        -:10491:```c
        -:10492:#include "jerryscript.h"
        -:10493:
        -:10494:int
    #####:10495:main (void)
        -:10496:{
    #####:10497:  const jerry_char_t script[] = "print ('Hello, World!');";
    #####:10498:  const jerry_size_t script_size = sizeof (script) - 1;
        -:10499:
    #####:10500:  if (jerry_is_valid_utf8_string (script, script_size))
        -:10501:  {
    #####:10502:    jerry_run_simple (script, script_size, JERRY_INIT_EMPTY);
        -:10503:  }
        -:10504:
        -:10505:  return 0;
        -:10506:}
        -:10507:```
        -:10508:
        -:10509:**See also**
        -:10510:
        -:10511:- [jerry_run_simple](#jerry_run_simple)
        -:10512:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -:10513:- [jerry_create_string_sz_from_utf8](#jerry_create_string_sz_from_utf8)
        -:10514:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -:10515:- [jerry_get_utf8_string_length](#jerry_get_utf8_string_length)
        -:10516:- [jerry_string_to_utf8_char_buffer](#jerry_string_to_utf8_char_buffer)
        -:10517:- [jerry_substring_to_utf8_char_buffer](#jerry_substring_to_utf8_char_buffer)
        -:10518:
        -:10519:## jerry_is_valid_cesu8_string
        -:10520:
        -:10521:**Summary**
        -:10522:
        -:10523:Check if a given character buffer is a valid CESU-8 string.
        -:10524:
        -:10525:**Notes**: Calling this method is safe in any time. It can be called
        -:10526:even before engine initialization.
        -:10527:
        -:10528:**Prototype**
        -:10529:
        -:10530:```c
        -:10531:bool
        -:10532:jerry_is_valid_cesu8_string (const jerry_char_t *cesu8_buf_p, /**< CESU-8 string */
        -:10533:                             jerry_size_t buf_size) /**< string size */
        -:10534:```
        -:10535:
        -:10536:- `cesu8_buf_p` - CESU-8 input string buffer.
        -:10537:- `buf_size` - input string buffer size in bytes.
        -:10538:- return value
        -:10539:  - true, if the provided string was a valid CESU-8 string.
        -:10540:  - false, if the string is not valid as a CESU-8 string.
        -:10541:
        -:10542:*New in version 2.0*.
        -:10543:
        -:10544:**Example**
        -:10545:
        -:10546:[doctest]: # ()
        -:10547:
        -:10548:```c
        -:10549:#include "jerryscript.h"
        -:10550:
        -:10551:int
    #####:10552:main (void)
        -:10553:{
    #####:10554:  jerry_init (JERRY_INIT_EMPTY);
        -:10555:
    #####:10556:  const jerry_char_t script[] = "Hello, World!";
    #####:10557:  const jerry_size_t script_size = sizeof (script) - 1;
        -:10558:
    #####:10559:  if (jerry_is_valid_cesu8_string (script, script_size))
        -:10560:  {
    #####:10561:    jerry_value_t string_value = jerry_create_string_sz (script,
        -:10562:                                                         script_size);
        -:10563:
        -:10564:    // usage of string_value
        -:10565:
    #####:10566:    jerry_release_value (string_value);
        -:10567:  }
        -:10568:
    #####:10569:  jerry_cleanup ();
        -:10570:  return 0;
        -:10571:}
        -:10572:```
        -:10573:
        -:10574:**See also**
        -:10575:
        -:10576:- [jerry_create_string](#jerry_create_string)
        -:10577:- [jerry_create_string_sz](#jerry_create_string_sz)
        -:10578:- [jerry_get_string_size](#jerry_get_string_size)
        -:10579:- [jerry_get_string_length](#jerry_get_string_length)
        -:10580:- [jerry_string_to_char_buffer](#jerry_string_to_char_buffer)
        -:10581:- [jerry_substring_to_char_buffer](#jerry_substring_to_char_buffer)
        -:10582:
        -:10583:
        -:10584:# Dynamic memory management functions
        -:10585:
        -:10586:## jerry_heap_alloc
        -:10587:
        -:10588:**Summary**
        -:10589:
        -:10590:Allocate memory on the engine's heap.
        -:10591:
        -:10592:*Note*: This function may take away memory from the executed JavaScript code.
        -:10593:If any other dynamic memory allocation API is available (e.g., libc malloc), it
        -:10594:should be used instead.
        -:10595:
        -:10596:**Prototype**
        -:10597:
        -:10598:```c
        -:10599:void *jerry_heap_alloc (size_t size);
        -:10600:```
        -:10601:
        -:10602:- `size`: size of the memory block.
        -:10603:- return value: non-NULL pointer, if the memory is successfully allocated,
        -:10604:                NULL otherwise.
        -:10605:
        -:10606:*New in version 2.0*.
        -:10607:
        -:10608:**See also**
        -:10609:
        -:10610:- [jerry_heap_free](#jerry_heap_free)
        -:10611:
        -:10612:## jerry_heap_free
        -:10613:
        -:10614:**Summary**
        -:10615:
        -:10616:Free memory allocated on the engine's heap.
        -:10617:
        -:10618:**Prototype**
        -:10619:
        -:10620:```c
        -:10621:void jerry_heap_free (void *mem_p, size_t size);
        -:10622:```
        -:10623:
        -:10624:- `mem_p`: value returned by `jerry_heap_alloc`.
        -:10625:- `size`: same size as passed to `jerry_heap_alloc`.
        -:10626:
        -:10627:*New in version 2.0*.
        -:10628:
        -:10629:**See also**
        -:10630:
        -:10631:- [jerry_heap_alloc](#jerry_heap_alloc)
        -:10632:
        -:10633:
        -:10634:# External context functions
        -:10635:
        -:10636:## jerry_create_context
        -:10637:
        -:10638:**Summary**
        -:10639:
        -:10640:Create an external JerryScript engine context.
        -:10641:
        -:10642:**Prototype**
        -:10643:
        -:10644:```c
        -:10645:jerry_context_t *
        -:10646:jerry_create_context (uint32_t heap_size,
        -:10647:                      jerry_context_alloc_t alloc,
        -:10648:                      void *cb_data_p);
        -:10649:```
        -:10650:
        -:10651:- `heap_size` - requested heap size of the JerryScript context
        -:10652:- `alloc` - function for allocation
        -:10653:- `cb_data_p` - user data
        -:10654:- return value
        -:10655:  - pointer to the newly created JerryScript context if success
        -:10656:  - NULL otherwise.
        -:10657:
        -:10658:*New in version 2.0*.
        -:10659:
        -:10660:**Example**
        -:10661:
        -:10662:[doctest]: # (test="compile", name="02.API-REFERENCE-create-context.c")
        -:10663:
        -:10664:```c
        -:10665:#include <stdlib.h>
        -:10666:#include <pthread.h>
        -:10667:
        -:10668:#include "jerryscript.h"
        -:10669:#include "jerryscript-port.h"
        -:10670:
        -:10671:/* A different Thread Local Storage variable for each jerry context. */
        -:10672:__thread jerry_context_t *tls_context;
        -:10673:
        -:10674:jerry_context_t *
    #####:10675:jerry_port_get_current_context (void)
        -:10676:{
        -:10677:  /* Returns the context assigned to the thread. */
    #####:10678:  return tls_context;
        -:10679:}
        -:10680:
        -:10681:/* Allocate JerryScript heap for each thread. */
        -:10682:static void *
    #####:10683:context_alloc_fn (size_t size, void *cb_data)
        -:10684:{
        -:10685:  (void) cb_data;
    #####:10686:  return malloc (size);
        -:10687:}
        -:10688:
        -:10689:static void *
    #####:10690:thread_function (void *param)
        -:10691:{
    #####:10692:  tls_context = jerry_create_context (512 * 1024,
        -:10693:                                      context_alloc_fn,
        -:10694:                                      NULL);
    #####:10695:  jerry_init (JERRY_INIT_EMPTY);
        -:10696:  /* Run JerryScript in the context (e.g.: jerry_parse & jerry_run) */
    #####:10697:  jerry_cleanup ();
        -:10698:
        -:10699:  /* Deallocate JerryScript context */
    #####:10700:  free (tls_context);
        -:10701:
    #####:10702:  return NULL;
        -:10703:}
        -:10704:
        -:10705:#define NUM_OF_THREADS 8
        -:10706:
        -:10707:int
    #####:10708:main (void)
        -:10709:{
        -:10710:  pthread_t threads[NUM_OF_THREADS];
        -:10711:
        -:10712:  /* Create the threads. */
    #####:10713:  for (int i = 0; i < NUM_OF_THREADS; i++)
        -:10714:  {
    #####:10715:    pthread_create (&threads[i], NULL, thread_function, (void *) (intptr_t) i);
        -:10716:  }
        -:10717:
        -:10718:  /* Wait for the threads to complete, and release their resources. */
    #####:10719:  for (int i = 0; i < NUM_OF_THREADS; i++)
        -:10720:  {
    #####:10721:    pthread_join (threads[i], NULL);
        -:10722:  }
        -:10723:
        -:10724:  return 0;
        -:10725:}
        -:10726:```
        -:10727:
        -:10728:**See also**
        -:10729:
        -:10730:- [jerry_context_t](#jerry_context_t)
        -:10731:- [jerry_context_alloc_t](#jerry_context_alloc_t)
        -:10732:- [jerry_port_get_current_context](05.PORT-API.md#jerry_port_get_current_context)
        -:10733:
        -:10734:
        -:10735:# Snapshot functions
        -:10736:
        -:10737:## jerry_generate_snapshot
        -:10738:
        -:10739:**Summary**
        -:10740:
        -:10741:Generate snapshot from the specified source code.
        -:10742:
        -:10743:*Notes*:
        -:10744:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:10745:  is no longer needed.
        -:10746:- This API depends on a build option (`JERRY_SNAPSHOT_SAVE`) and can be checked in runtime with
        -:10747:  the `JERRY_FEATURE_SNAPSHOT_SAVE` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:10748:  If the feature is not enabled the function will return an error.
        -:10749:
        -:10750:**Prototype**
        -:10751:
        -:10752:```c
        -:10753:jerry_value_t
        -:10754:jerry_generate_snapshot (jerry_value_t compiled_code,
        -:10755:                         uint32_t generate_snapshot_opts,
        -:10756:                         uint32_t *buffer_p,
        -:10757:                         size_t buffer_size);
        -:10758:```
        -:10759:
        -:10760:- `compiled_code` - compiled script or function (see: [jerry_parse](#jerry_parse)).
        -:10761:- `generate_snapshot_opts` - any combination of [jerry_generate_snapshot_opts_t](#jerry_generate_snapshot_opts_t) flags.
        -:10762:- `buffer_p` - output buffer (aligned to 4 bytes) to save snapshot to.
        -:10763:- `buffer_size` - the output buffer's size in bytes.
        -:10764:- return value
        -:10765:  - the size of the generated snapshot in bytes as number value, if it was generated succesfully (i.e. there
        -:10766:    are no syntax errors in source code, buffer size is sufficient, and snapshot support is enabled in
        -:10767:    current configuration through JERRY_SNAPSHOT_SAVE)
        -:10768:  - thrown error, otherwise.
        -:10769:
        -:10770:*New in version 2.0*.
        -:10771:
        -:10772:*Changed in version [[NEXT_RELEASE]]*: The `source_p`, `source_size`, `resource_name_p`,
        -:10773:                                       and `resource_name_length` arguments are replaced by `compiled_code`
        -:10774:                                       which should contain a compiled ECMAScript script / function.
        -:10775:                                       The `jerry_generate_function_snapshot` is now removed and can be reproduced
        -:10776:                                       by calling `jerry_parse` with function arguments and using this method
        -:10777:                                       (see [jerry_exec_snapshot](#jerry_exec_snapshot)).
        -:10778:**Example**
        -:10779:
        -:10780:[doctest]: # ()
        -:10781:
        -:10782:```c
        -:10783:#include "jerryscript.h"
        -:10784:
        -:10785:int
    #####:10786:main (void)
        -:10787:{
    #####:10788:  jerry_init (JERRY_INIT_EMPTY);
        -:10789:
        -:10790:  static uint32_t global_mode_snapshot_buffer[256];
    #####:10791:  const jerry_char_t script_to_snapshot[] = "(function () { return 'string from snapshot'; }) ();";
        -:10792:
    #####:10793:  jerry_value_t parse_result = jerry_parse (script_to_snapshot,
        -:10794:                                            sizeof (script_to_snapshot) - 1,
        -:10795:                                            NULL);
        -:10796:
    #####:10797:  size_t buffer_size = sizeof (global_mode_snapshot_buffer) / sizeof (uint32_t);
    #####:10798:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:10799:                                                           0,
        -:10800:                                                           global_mode_snapshot_buffer,
        -:10801:                                                           buffer_size);
    #####:10802:  jerry_release_value (parse_result);
        -:10803:
    #####:10804:  if (!jerry_value_is_error (generate_result))
        -:10805:  {
    #####:10806:    size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
        -:10807:  }
        -:10808:
    #####:10809:  jerry_release_value (generate_result);
        -:10810:
    #####:10811:  jerry_cleanup ();
        -:10812:  return 0;
        -:10813:}
        -:10814:```
        -:10815:
        -:10816:**See also**
        -:10817:
        -:10818:- [jerry_parse](#jerry_parse)
        -:10819:- [jerry_parse_value](#jerry_parse_value)
        -:10820:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:10821:- [jerry_parse_options_t](#jerry_parse_options_t)
        -:10822:
        -:10823:
        -:10824:## jerry_exec_snapshot
        -:10825:
        -:10826:**Summary**
        -:10827:
        -:10828:Execute/load snapshot from the specified buffer.
        -:10829:
        -:10830:*Notes*:
        -:10831:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:10832:  is no longer needed.
        -:10833:- This API depends on a build option (`JERRY_SNAPSHOT_EXEC`) and can be checked in runtime with
        -:10834:  the `JERRY_FEATURE_SNAPSHOT_EXEC` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:10835:  If the feature is not enabled the function will return an error.
        -:10836:
        -:10837:**Prototype**
        -:10838:
        -:10839:```c
        -:10840:jerry_value_t
        -:10841:jerry_exec_snapshot (const uint32_t *snapshot_p,
        -:10842:                     size_t snapshot_size,
        -:10843:                     size_t func_index,
        -:10844:                     uint32_t exec_snapshot_opts,
        -:10845:                     const jerry_exec_snapshot_option_values_t *options_values_p);
        -:10846:```
        -:10847:
        -:10848:- `snapshot_p` - pointer to snapshot.
        -:10849:- `snapshot_size` - size of snapshot in bytes.
        -:10850:- `func_index` - index of executed function.
        -:10851:- `exec_snapshot_opts` - any combination of [jerry_exec_snapshot_opts_t](#jerry_exec_snapshot_opts_t) flags.
        -:10852:- `options_values_p` - additional loadig options, can be NULL if not used. The fields are described in
        -:10853:                       [jerry_exec_snapshot_option_values_t](#jerry_exec_snapshot_option_values_t).
        -:10854:- return value
        -:10855:  - result of bytecode, if run was successful.
        -:10856:  - thrown error, otherwise (an error is reported if the snapshot execution feature is not enabled).
        -:10857:
        -:10858:*Changed in version 2.0*: Added `func_index` and `exec_snapshot_opts` arguments. Removed the `copy_bytecode` last argument.
        -:10859:
        -:10860:*Changed in version [[NEXT_RELEASE]]*: Added `options_p` argument.
        -:10861:
        -:10862:**Example 1**
        -:10863:
        -:10864:[doctest]: # ()
        -:10865:
        -:10866:```c
        -:10867:#include "jerryscript.h"
        -:10868:
        -:10869:int
    #####:10870:main (void)
        -:10871:{
        -:10872:  static uint32_t snapshot_buffer[256];
        -:10873:
        -:10874:  /* 1st example: global mode snapshot. */
    #####:10875:  jerry_init (JERRY_INIT_EMPTY);
        -:10876:
    #####:10877:  const jerry_char_t script_to_snapshot[] = "(function () { return 'string from snapshot'; }) ();";
        -:10878:
    #####:10879:  jerry_value_t parse_result = jerry_parse (script_to_snapshot,
        -:10880:                                            sizeof (script_to_snapshot) - 1,
        -:10881:                                            NULL);
        -:10882:
    #####:10883:  size_t buffer_size = sizeof (snapshot_buffer) / sizeof (uint32_t);
    #####:10884:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:10885:                                                           0,
        -:10886:                                                           snapshot_buffer,
        -:10887:                                                           buffer_size);
    #####:10888:  jerry_release_value (parse_result);
        -:10889:
        -:10890:  /* 'generate_result' variable should be checked whether it contains an error. */
        -:10891:
    #####:10892:  size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:10893:  jerry_release_value (generate_result);
        -:10894:
    #####:10895:  jerry_cleanup ();
    #####:10896:  jerry_init (JERRY_INIT_EMPTY);
        -:10897:
    #####:10898:  jerry_value_t res = jerry_exec_snapshot (snapshot_buffer,
        -:10899:                                           snapshot_size,
        -:10900:                                           0,
        -:10901:                                           0,
        -:10902:                                           NULL);
        -:10903:
        -:10904:  /* 'res' now contains 'string from snapshot' */
    #####:10905:  jerry_release_value (res);
        -:10906:
    #####:10907:  jerry_cleanup ();
        -:10908:  return 0;
        -:10909:}
        -:10910:```
        -:10911:
        -:10912:**Example 2**
        -:10913:
        -:10914:[doctest]: # ()
        -:10915:
        -:10916:```c
        -:10917:#include "jerryscript.h"
        -:10918:
        -:10919:int
    #####:10920:main (void)
        -:10921:{
        -:10922:  static uint32_t snapshot_buffer[256];
        -:10923:
        -:10924:  /* 2nd example: function snapshot. */
    #####:10925:  jerry_init (JERRY_INIT_EMPTY);
        -:10926:
    #####:10927:  const jerry_char_t function_to_snapshot[] = "return a + b;";
        -:10928:
        -:10929:  jerry_parse_options_t parse_options;
    #####:10930:  parse_options.options = JERRY_PARSE_HAS_ARGUMENT_LIST;
    #####:10931:  parse_options.argument_list = jerry_create_string ((const jerry_char_t *) "a, b");
        -:10932:
    #####:10933:  jerry_value_t parse_result = jerry_parse (function_to_snapshot,
        -:10934:                                            sizeof (function_to_snapshot) - 1,
        -:10935:                                            &parse_options);
        -:10936:
    #####:10937:  size_t buffer_size = sizeof (snapshot_buffer) / sizeof (uint32_t);
    #####:10938:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:10939:                                                           0,
        -:10940:                                                           snapshot_buffer,
        -:10941:                                                           buffer_size);
    #####:10942:  jerry_release_value (parse_result);
    #####:10943:  jerry_release_value (parse_options.argument_list);
        -:10944:
        -:10945:  /* 'generate_result' variable should be checked whether it contains an error. */
        -:10946:
    #####:10947:  size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:10948:  jerry_release_value (generate_result);
        -:10949:
    #####:10950:  jerry_cleanup ();
    #####:10951:  jerry_init (JERRY_INIT_EMPTY);
        -:10952:
    #####:10953:  jerry_value_t func = jerry_exec_snapshot (snapshot_buffer,
        -:10954:                                            snapshot_size,
        -:10955:                                            0,
        -:10956:                                            JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION,
        -:10957:                                            NULL);
        -:10958:  /* 'func' can be used now as a function object. */
        -:10959:
    #####:10960:  jerry_value_t this_value = jerry_create_undefined ();
        -:10961:  jerry_value_t args[2];
    #####:10962:  args[0] = jerry_create_number (1.0);
    #####:10963:  args[1] = jerry_create_number (2.0);
        -:10964:
    #####:10965:  jerry_value_t res = jerry_call_function (func, this_value, args, 2);
        -:10966:
        -:10967:  /* 'res' now contains the value 3 as a jerry_value_t. */
    #####:10968:  jerry_release_value (res);
    #####:10969:  jerry_release_value (args[0]);
    #####:10970:  jerry_release_value (args[1]);
    #####:10971:  jerry_release_value (this_value);
    #####:10972:  jerry_release_value (func);
        -:10973:
    #####:10974:  jerry_cleanup ();
        -:10975:  return 0;
        -:10976:}
        -:10977:```
        -:10978:
        -:10979:**See also**
        -:10980:
        -:10981:- [jerry_init](#jerry_init)
        -:10982:- [jerry_cleanup](#jerry_cleanup)
        -:10983:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:10984:
        -:10985:
        -:10986:## jerry_get_literals_from_snapshot
        -:10987:
        -:10988:**Summary**
        -:10989:
        -:10990:Collect the used literals from the given snapshot and save them into a buffer in list or C format.
        -:10991:None of these literals are magic strings. In C format only valid identifiers are collected.
        -:10992:
        -:10993:*Note*:
        -:10994:- This API depends on a build option (`JERRY_SNAPSHOT_SAVE`) and can be checked in runtime with
        -:10995:  the `JERRY_FEATURE_SNAPSHOT_SAVE` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:10996:  If the feature is not enabled the function will return zero.
        -:10997:
        -:10998:**Prototype**
        -:10999:
        -:11000:```c
        -:11001:size_t
        -:11002:jerry_get_literals_from_snapshot (const uint32_t *snapshot_p,
        -:11003:                                  size_t snapshot_size,
        -:11004:                                  jerry_char_t *lit_buf_p,
        -:11005:                                  size_t lit_buf_size,
        -:11006:                                  bool is_c_format);
        -:11007:```
        -:11008:
        -:11009:- `snapshot_p` - input snapshot buffer.
        -:11010:- `snapshot_size` - size of snapshot in bytes.
        -:11011:- `lit_buf_p` - buffer to save literals to.
        -:11012:- `lit_buf_size` - the buffer's size.
        -:11013:- `is_c_format` - the output format would be C-style (true) or a simple list (false).
        -:11014:- return value
        -:11015:  - the size of the literal-list, if it was generated succesfully (i.e. the list of literals isn't empty,
        -:11016:    and literal-save support is enabled in current configuration through JERRY_SNAPSHOT_SAVE)
        -:11017:  - 0 otherwise.
        -:11018:
        -:11019:*New in version 2.0*.
        -:11020:
        -:11021:**Example**
        -:11022:
        -:11023:[doctest]: # (test="link")
        -:11024:
        -:11025:```c
        -:11026:#include <stdio.h>
        -:11027:#include "jerryscript.h"
        -:11028:
        -:11029:int
    #####:11030:main (void)
        -:11031:{
    #####:11032:  jerry_init (JERRY_INIT_EMPTY);
        -:11033:
        -:11034:  static jerry_char_t literal_buffer[256];
        -:11035:  static uint32_t snapshot_buffer[256];
    #####:11036:  const jerry_char_t script_for_literal_save[] = "var obj = { a:'aa', bb:'Bb' }";
        -:11037:
    #####:11038:  jerry_value_t parse_result = jerry_parse (script_for_literal_save,
        -:11039:                                            sizeof (script_for_literal_save) - 1,
        -:11040:                                            NULL);
        -:11041:
    #####:11042:  size_t buffer_size = sizeof (snapshot_buffer) / sizeof (uint32_t);
    #####:11043:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:11044:                                                           0,
        -:11045:                                                           snapshot_buffer,
        -:11046:                                                           buffer_size);
    #####:11047:  jerry_release_value (parse_result);
        -:11048:
    #####:11049:  size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:11050:  jerry_release_value (generate_result);
        -:11051:
    #####:11052:  const size_t literal_size = jerry_get_literals_from_snapshot (snapshot_buffer,
        -:11053:                                                                snapshot_size,
        -:11054:                                                                literal_buffer,
        -:11055:                                                                256,
        -:11056:                                                                true);
        -:11057:
    #####:11058:  if (literal_size != 0)
        -:11059:  {
    #####:11060:    FILE *literal_file_p = fopen ("literals.h", "wb");
    #####:11061:    fwrite (literal_buffer, sizeof (uint8_t), literal_size, literal_file_p);
    #####:11062:    fclose (literal_file_p);
        -:11063:  }
        -:11064:
    #####:11065:  jerry_cleanup ();
        -:11066:  return 0;
        -:11067:}
        -:11068:```
        -:11069:
        -:11070:**See also**
        -:11071:
        -:11072:- [jerry_init](#jerry_init)
        -:11073:- [jerry_cleanup](#jerry_cleanup)
        -:11074:- [jerry_register_magic_strings](#jerry_register_magic_strings)
        -:11075:
        -:11076:
        -:11077:# Backtrace functions
        -:11078:
        -:11079:## jerry_get_backtrace
        -:11080:
        -:11081:**Summary**
        -:11082:
        -:11083:Get backtrace. The backtrace is an array of strings where
        -:11084:each string contains the position of the corresponding frame.
        -:11085:The array length is zero if the backtrace is not available.
        -:11086:
        -:11087:This function is typically called from native callbacks.
        -:11088:
        -:11089:*Notes*:
        -:11090:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:11091:is no longer needed.
        -:11092:- This feature depends on build option (`JERRY_LINE_INFO`) and can be checked
        -:11093:  in runtime with the `JERRY_FEATURE_LINE_INFO` feature enum value,
        -:11094:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11095:
        -:11096:**Prototype**
        -:11097:
        -:11098:```c
        -:11099:jerry_value_t
        -:11100:jerry_get_backtrace (uint32_t max_depth);
        -:11101:```
        -:11102:
        -:11103:- `max_depth` - backtrace collection stops after reaching this value, 0 = unlimited
        -:11104:- return value
        -:11105:  - a newly constructed JS array
        -:11106:
        -:11107:*New in version 2.0*.
        -:11108:
        -:11109:**Example**
        -:11110:
        -:11111:[doctest]: # (name="02.API-REFERENCE-jsbacktrace.c")
        -:11112:
        -:11113:```c
        -:11114:#include <stdio.h>
        -:11115:#include <string.h>
        -:11116:#include "jerryscript.h"
        -:11117:
        -:11118:static jerry_value_t
    #####:11119:backtrace_handler (const jerry_call_info_t *call_info_p,
        -:11120:                   const jerry_value_t args_p[],
        -:11121:                   const jerry_length_t args_count)
        -:11122:{
    #####:11123:  if (!jerry_is_feature_enabled (JERRY_FEATURE_LINE_INFO))
        -:11124:  {
    #####:11125:    printf ("Line info disabled, no backtrace will be printed\n");
    #####:11126:    return jerry_create_undefined ();
        -:11127:  }
        -:11128:
        -:11129:  /* If the line info feature is disabled an empty array will be returned. */
    #####:11130:  jerry_value_t backtrace_array = jerry_get_backtrace (5);
    #####:11131:  uint32_t array_length = jerry_get_array_length (backtrace_array);
        -:11132:
    #####:11133:  for (uint32_t idx = 0; idx < array_length; idx++)
        -:11134:  {
    #####:11135:    jerry_value_t property = jerry_get_property_by_index (backtrace_array, idx);
        -:11136:
        -:11137:    jerry_char_t string_buffer[64];
    #####:11138:    jerry_size_t copied_bytes = jerry_substring_to_char_buffer (property,
        -:11139:                                                                0,
        -:11140:                                                                63,
        -:11141:                                                                string_buffer,
        -:11142:                                                                63);
    #####:11143:    string_buffer[copied_bytes] = '\0';
    #####:11144:    printf(" %d: %s\n", idx, string_buffer);
        -:11145:
    #####:11146:    jerry_release_value (property);
        -:11147:  }
        -:11148:
    #####:11149:  jerry_release_value (backtrace_array);
        -:11150:
    #####:11151:  return jerry_create_undefined ();
        -:11152:} /* backtrace_handler */
        -:11153:
        -:11154:int
    #####:11155:main (void)
        -:11156:{
    #####:11157:  jerry_init (JERRY_INIT_EMPTY);
        -:11158:
    #####:11159:  jerry_value_t global = jerry_get_global_object ();
        -:11160:
        -:11161:  /* Register the "capture_backtrace" method. */
        -:11162:  {
    #####:11163:    jerry_value_t func = jerry_create_external_function (backtrace_handler);
    #####:11164:    jerry_value_t name = jerry_create_string ((const jerry_char_t *) "backtrace");
    #####:11165:    jerry_value_t result = jerry_set_property (global, name, func);
    #####:11166:    jerry_release_value (result);
    #####:11167:    jerry_release_value (name);
    #####:11168:    jerry_release_value (func);
        -:11169:  }
        -:11170:
    #####:11171:  jerry_release_value (global);
        -:11172:
    #####:11173:  const char *source = ("function f() { g (); }\n"
        -:11174:                        "function g() { h (); }\n"
        -:11175:                        "function h() { backtrace (); }\n"
        -:11176:                        "f ();\n");
        -:11177:
        -:11178:  jerry_parse_options_t parse_options;
    #####:11179:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
    #####:11180:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "demo_memory.js");
        -:11181:
    #####:11182:  jerry_value_t program = jerry_parse ((const jerry_char_t *) source,
        -:11183:                                       strlen (source),
        -:11184:                                       &parse_options);
    #####:11185:  jerry_release_value (parse_options.resource_name);
        -:11186:
    #####:11187:  if (!jerry_value_is_error (program))
        -:11188:  {
    #####:11189:    jerry_value_t run_result = jerry_run (program);
    #####:11190:    jerry_release_value (run_result);
        -:11191:  }
        -:11192:
    #####:11193:  jerry_release_value (program);
    #####:11194:  jerry_cleanup ();
        -:11195:
        -:11196:  return 0;
        -:11197:}
        -:11198:```
        -:11199:
        -:11200:**See also**
        -:11201:
        -:11202:- [jerry_get_backtrace_from](#jerry_get_backtrace_from)
        -:11203:- [jerry_create_external_function](#jerry_create_external_function)
        -:11204:
        -:11205:
        -:11206:## jerry_backtrace_capture
        -:11207:
        -:11208:**Summary**
        -:11209:
        -:11210:Low-level function to capture each backtrace frame. The captured frame data
        -:11211:is passed to a callback function. To improve performance, the majority of
        -:11212:the frame data is not initialized when the callback function is called. The
        -:11213:initialization of these fields can be done later by helper functions such
        -:11214:as [jerry_backtrace_get_location](#jerry_backtrace_get_location).
        -:11215:
        -:11216:**Prototype**
        -:11217:
        -:11218:```c
        -:11219:void
        -:11220:jerry_backtrace_capture (jerry_backtrace_callback_t callback, void *user_p);
        -:11221:```
        -:11222:
        -:11223:- `callback` - a [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11224:               which is called for each captured frame
        -:11225:- `user_p` - pointer passed to the `callback` function, can be NULL
        -:11226:
        -:11227:*New in version [[NEXT_RELEASE]]*.
        -:11228:
        -:11229:**Example**
        -:11230:
        -:11231:[doctest]: # (name="02.API-REFERENCE-jscapturebacktrace.c")
        -:11232:
        -:11233:```c
        -:11234:#include <stdio.h>
        -:11235:#include <string.h>
        -:11236:#include "jerryscript.h"
        -:11237:
        -:11238:static bool
    #####:11239:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11240:                    void *user_p)
        -:11241:{
    #####:11242:  printf (" A stack frame is captured\n");
    #####:11243:  return true;
        -:11244:}
        -:11245:
        -:11246:static jerry_value_t
    #####:11247:backtrace_handler (const jerry_call_info_t *call_info_p,
        -:11248:                   const jerry_value_t args_p[],
        -:11249:                   const jerry_length_t args_count)
        -:11250:{
        -:11251:  (void) call_info_p;
        -:11252:  (void) args_p;
        -:11253:  (void) args_count;
        -:11254:
    #####:11255:  jerry_backtrace_capture (&backtrace_callback, NULL);
        -:11256:
    #####:11257:  return jerry_create_undefined ();
        -:11258:} /* backtrace_handler */
        -:11259:
        -:11260:int
    #####:11261:main (void)
        -:11262:{
    #####:11263:  jerry_init (JERRY_INIT_EMPTY);
        -:11264:
    #####:11265:  jerry_value_t global = jerry_get_global_object ();
        -:11266:
        -:11267:  /* Register the "dump_backtrace" method. */
        -:11268:  {
    #####:11269:    jerry_value_t func = jerry_create_external_function (backtrace_handler);
    #####:11270:    jerry_value_t name = jerry_create_string ((const jerry_char_t *) "backtrace");
    #####:11271:    jerry_value_t result = jerry_set_property (global, name, func);
    #####:11272:    jerry_release_value (result);
    #####:11273:    jerry_release_value (name);
    #####:11274:    jerry_release_value (func);
        -:11275:  }
        -:11276:
    #####:11277:  jerry_release_value (global);
        -:11278:
    #####:11279:  const char *source = ("function f() { g (); }\n"
        -:11280:                        "function g() { h (); }\n"
        -:11281:                        "function h() { backtrace (g); }\n"
        -:11282:                        "f ();\n");
        -:11283:
        -:11284:  jerry_parse_options_t parse_options;
    #####:11285:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
    #####:11286:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "demo_backtrace.js");
        -:11287:
    #####:11288:  jerry_value_t program = jerry_parse ((const jerry_char_t *) source,
        -:11289:                                       strlen (source),
        -:11290:                                       &parse_options);
    #####:11291:  jerry_release_value (parse_options.resource_name);
        -:11292:
    #####:11293:  if (!jerry_value_is_error (program))
        -:11294:  {
    #####:11295:    jerry_value_t run_result = jerry_run (program);
    #####:11296:    jerry_release_value (run_result);
        -:11297:  }
        -:11298:
    #####:11299:  jerry_release_value (program);
    #####:11300:  jerry_cleanup ();
        -:11301:
        -:11302:  return 0;
        -:11303:}
        -:11304:```
        -:11305:
        -:11306:**See also**
        -:11307:
        -:11308:- [jerry_get_backtrace](#jerry_get_backtrace)
        -:11309:- [jerry_backtrace_get_frame_type](#jerry_backtrace_get_frame_type)
        -:11310:- [jerry_backtrace_get_location](#jerry_backtrace_get_location)
        -:11311:- [jerry_backtrace_get_function](#jerry_backtrace_get_function)
        -:11312:- [jerry_backtrace_get_this](#jerry_backtrace_get_this)
        -:11313:- [jerry_backtrace_is_strict](#jerry_backtrace_is_strict)
        -:11314:
        -:11315:
        -:11316:## jerry_backtrace_get_frame_type
        -:11317:
        -:11318:**Summary**
        -:11319:
        -:11320:Returns with the type of the backtrace frame. This function can only be called
        -:11321:from the callback function of [jerry_backtrace_capture](#jerry_backtrace_capture),
        -:11322:and the value becomes invalid after the callback returns.
        -:11323:
        -:11324:**Prototype**
        -:11325:
        -:11326:```c
        -:11327:jerry_backtrace_frame_types_t
        -:11328:jerry_backtrace_get_frame_type (jerry_backtrace_frame_t *frame_p);
        -:11329:```
        -:11330:
        -:11331:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11332:- return value
        -:11333:  - frame type listed in [jerry_backtrace_frame_types_t](#jerry_backtrace_frame_types_t)
        -:11334:
        -:11335:*New in version [[NEXT_RELEASE]]*.
        -:11336:
        -:11337:**Example**
        -:11338:
        -:11339:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11340:with the following callback function:
        -:11341:
        -:11342:```c
        -:11343:static bool
        -:11344:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11345:                    void *user_p)
        -:11346:{
        -:11347:  switch (jerry_backtrace_get_frame_type (frame_p))
        -:11348:  {
        -:11349:    case JERRY_BACKTRACE_FRAME_JS:
        -:11350:    {
        -:11351:      printf (" ECMAScript frame\n");
        -:11352:      break;
        -:11353:    }
        -:11354:    default:
        -:11355:    {
        -:11356:      printf (" Other frame\n");
        -:11357:      break;
        -:11358:    }
        -:11359:  }
        -:11360:
        -:11361:  return true;
        -:11362:}
        -:11363:```
        -:11364:
        -:11365:**See also**
        -:11366:
        -:11367:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11368:
        -:11369:
        -:11370:## jerry_backtrace_get_location
        -:11371:
        -:11372:**Summary**
        -:11373:
        -:11374:Initialize and return with the location private field of a backtrace
        -:11375:frame. If the location is not available, the returned value is NULL.
        -:11376:This function can only be called from the callback function of
        -:11377:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value
        -:11378:becomes invalid after the callback returns.
        -:11379:
        -:11380:*Notes*:
        -:11381:- Location information can only be retrieved if JERRY_FEATURE_LINE_INFO feature is
        -:11382:  enabled. Otherwise the function always returns with NULL.
        -:11383:- The returned data must not be modified, and does not need to be freed.
        -:11384:  Any cleanup is done automatically after the callback is returned.
        -:11385:
        -:11386:**Prototype**
        -:11387:
        -:11388:```c
        -:11389:const jerry_backtrace_location_t *
        -:11390:jerry_backtrace_get_location (jerry_backtrace_frame_t *frame_p);
        -:11391:```
        -:11392:
        -:11393:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11394:- return value
        -:11395:  - pointer to the location private field if the location is available,
        -:11396:  - NULL otherwise
        -:11397:
        -:11398:*New in version [[NEXT_RELEASE]]*.
        -:11399:
        -:11400:**Example**
        -:11401:
        -:11402:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11403:with the following callback function:
        -:11404:
        -:11405:```c
        -:11406:static bool
        -:11407:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11408:                    void *user_p)
        -:11409:{
        -:11410:  const jerry_backtrace_location_t *location_p;
        -:11411:  location_p = jerry_backtrace_get_location (frame_p);
        -:11412:
        -:11413:  if (location_p == NULL)
        -:11414:  {
        -:11415:    printf ("No location info is available\n");
        -:11416:    return true;
        -:11417:  }
        -:11418:
        -:11419:  jerry_char_t string_buffer[64];
        -:11420:  jerry_size_t copied_bytes = jerry_substring_to_char_buffer (location_p->resource_name,
        -:11421:                                                              0,
        -:11422:                                                              63,
        -:11423:                                                              string_buffer,
        -:11424:                                                              63);
        -:11425:  string_buffer[copied_bytes] = '\0';
        -:11426:  printf(" %s:%d:%d\n", string_buffer, (int) location_p->line, (int) location_p->column);
        -:11427:  return true;
        -:11428:}
        -:11429:```
        -:11430:
        -:11431:**See also**
        -:11432:
        -:11433:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11434:
        -:11435:
        -:11436:## jerry_backtrace_get_function
        -:11437:
        -:11438:**Summary**
        -:11439:
        -:11440:Initialize and return with the called function private field of a backtrace frame.
        -:11441:The backtrace frame is created for running the code bound to this function. This
        -:11442:function can only be called from the callback function of
        -:11443:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value becomes invalid
        -:11444:after the callback returns.
        -:11445:
        -:11446:*Notes*:
        -:11447:- The returned data must not be modified, and does not need to be freed.
        -:11448:  Any cleanup is done automatically after the callback is returned.
        -:11449:
        -:11450:**Prototype**
        -:11451:
        -:11452:```c
        -:11453:const jerry_value_t *
        -:11454:jerry_backtrace_get_function (jerry_backtrace_frame_t *frame_p);
        -:11455:```
        -:11456:
        -:11457:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11458:- return value
        -:11459:  - pointer to the called function if the function is available,
        -:11460:  - NULL otherwise
        -:11461:
        -:11462:*New in version [[NEXT_RELEASE]]*.
        -:11463:
        -:11464:**Example**
        -:11465:
        -:11466:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11467:with the following callback function:
        -:11468:
        -:11469:```c
        -:11470:static bool
        -:11471:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11472:                    void *user_p)
        -:11473:{
        -:11474:  jerry_value_t *function_p = jerry_backtrace_get_function (frame_p);
        -:11475:
        -:11476:  if (function_p != NULL)
        -:11477:  {
        -:11478:    printf ("Called function is available");
        -:11479:    return true;
        -:11480:  }
        -:11481:
        -:11482:  printf ("Called function is NOT available");
        -:11483:  return true;
        -:11484:}
        -:11485:```
        -:11486:
        -:11487:**See also**
        -:11488:
        -:11489:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11490:
        -:11491:
        -:11492:## jerry_backtrace_get_this
        -:11493:
        -:11494:**Summary**
        -:11495:
        -:11496:Initialize and return with the 'this' binding private field of a backtrace frame.
        -:11497:The 'this' binding is a hidden value passed to the called function. As for arrow
        -:11498:functions, the 'this' binding is assigned at function creation. This getter
        -:11499:function can only be called from the callback function of
        -:11500:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value becomes invalid
        -:11501:after the callback returns.
        -:11502:
        -:11503:*Notes*:
        -:11504:- The returned data must not be modified, and does not need to be freed.
        -:11505:  Any cleanup is done automatically after the callback is returned.
        -:11506:
        -:11507:**Prototype**
        -:11508:
        -:11509:```c
        -:11510:const jerry_value_t *
        -:11511:jerry_backtrace_get_this (jerry_backtrace_frame_t *frame_p);
        -:11512:```
        -:11513:
        -:11514:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11515:- return value
        -:11516:  - pointer to the 'this' binding if the binding is available,
        -:11517:  - NULL otherwise
        -:11518:
        -:11519:*New in version [[NEXT_RELEASE]]*.
        -:11520:
        -:11521:**Example**
        -:11522:
        -:11523:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11524:with the following callback function:
        -:11525:
        -:11526:```c
        -:11527:static bool
        -:11528:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11529:                    void *user_p)
        -:11530:{
        -:11531:  jerry_value_t *this_p = jerry_backtrace_get_this (frame_p);
        -:11532:
        -:11533:  if (this_p != NULL)
        -:11534:  {
        -:11535:    printf ("The 'this' binding is available");
        -:11536:    return true;
        -:11537:  }
        -:11538:
        -:11539:  printf ("The 'this' binding is NOT available");
        -:11540:  return true;
        -:11541:}
        -:11542:```
        -:11543:
        -:11544:**See also**
        -:11545:
        -:11546:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11547:
        -:11548:
        -:11549:## jerry_backtrace_is_strict
        -:11550:
        -:11551:**Summary**
        -:11552:
        -:11553:Returns true, if the code bound to the backtrace frame is strict mode
        -:11554:code. This function can only be called from the callback function of
        -:11555:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value
        -:11556:becomes invalid after the callback returns.
        -:11557:
        -:11558:**Prototype**
        -:11559:
        -:11560:```c
        -:11561:bool
        -:11562:jerry_backtrace_is_strict (jerry_backtrace_frame_t *frame_p);
        -:11563:```
        -:11564:
        -:11565:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11566:- return value
        -:11567:  - true, if strict mode code is bound to the frame
        -:11568:  - false, otherwise
        -:11569:
        -:11570:*New in version [[NEXT_RELEASE]]*.
        -:11571:
        -:11572:**Example**
        -:11573:
        -:11574:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11575:with the following callback function:
        -:11576:
        -:11577:```c
        -:11578:static bool
        -:11579:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11580:                    void *user_p)
        -:11581:{
        -:11582:  if (jerry_backtrace_is_strict (frame_p))
        -:11583:  {
        -:11584:    printf ("Strict mode code is running");
        -:11585:    return truel
        -:11586:  }
        -:11587:
        -:11588:  printf ("Non-strict mode code is running");
        -:11589:  return true;
        -:11590:}
        -:11591:```
        -:11592:
        -:11593:**See also**
        -:11594:
        -:11595:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11596:
        -:11597:
        -:11598:# Miscellaneous functions
        -:11599:
        -:11600:## jerry_set_vm_exec_stop_callback
        -:11601:
        -:11602:**Summary**
        -:11603:
        -:11604:The callback passed to this function is periodically called when
        -:11605:JerryScript executes an ECMAScript program.
        -:11606:
        -:11607:If the callback returns with undefined value the ECMAScript execution
        -:11608:continues. Otherwise the result is thrown by the engine (if the error
        -:11609:flag is not set for the returned value the engine automatically sets
        -:11610:it). The callback function might be called again even if it threw
        -:11611:an error. In this case the function must throw the same error again.
        -:11612:
        -:11613:To reduce the CPU overhead of constantly checking the termination
        -:11614:condition the callback is called when a backward jump is executed
        -:11615:or an exception is caught. Setting the `frequency` to a greater
        -:11616:than `1` value reduces this overhead further. If its value is N
        -:11617:only every Nth event (backward jump, etc.) trigger the next check.
        -:11618:
        -:11619:*Notes*:
        -:11620:- This API depends on a build option (`JERRY_VM_EXEC_STOP`) and can be checked
        -:11621:  in runtime with the `JERRY_FEATURE_VM_EXEC_STOP` feature enum value,
        -:11622:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11623:
        -:11624:**Prototype**
        -:11625:
        -:11626:```c
        -:11627:void
        -:11628:jerry_set_vm_exec_stop_callback (jerry_vm_exec_stop_callback_t stop_cb,
        -:11629:                                 void *user_p,
        -:11630:                                 uint32_t frequency);
        -:11631:```
        -:11632:
        -:11633:- `stop_cb` - periodically called callback (passing NULL disables this feature)
        -:11634:- `user_p` - user pointer passed to the `stop_cb` function
        -:11635:- `frequency` - frequency of calling the `stop_cb` function
        -:11636:
        -:11637:*New in version 2.0*.
        -:11638:
        -:11639:**Example**
        -:11640:
        -:11641:[doctest]: # (test="link")
        -:11642:
        -:11643:```c
        -:11644:#include "jerryscript.h"
        -:11645:
        -:11646:static jerry_value_t
    #####:11647:vm_exec_stop_callback (void *user_p)
        -:11648:{
    #####:11649:  int *countdown_p = (int *) user_p;
        -:11650:
    #####:11651:  while (*countdown_p > 0)
        -:11652:  {
    #####:11653:    (*countdown_p)--;
    #####:11654:    return jerry_create_undefined ();
        -:11655:  }
        -:11656:
        -:11657:  // The error flag is added automatically.
    #####:11658:  return jerry_create_string ((const jerry_char_t *) "Abort script");
        -:11659:}
        -:11660:
        -:11661:int
    #####:11662:main (void)
        -:11663:{
    #####:11664:  jerry_init (JERRY_INIT_EMPTY);
        -:11665:
    #####:11666:  int countdown = 10;
    #####:11667:  jerry_set_vm_exec_stop_callback (vm_exec_stop_callback, &countdown, 16);
        -:11668:
        -:11669:  // Infinite loop.
    #####:11670:  const jerry_char_t script[] = "while(true) {}";
        -:11671:
    #####:11672:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
    #####:11673:  jerry_release_value (jerry_run (parsed_code));
    #####:11674:  jerry_release_value (parsed_code);
    #####:11675:  jerry_cleanup ();
        -:11676:}
        -:11677:```
        -:11678:
        -:11679:**See also**
        -:11680:
        -:11681:- [jerry_vm_exec_stop_callback_t](#jerry_vm_exec_stop_callback_t)
        -:11682:
        -:11683:## jerry_set_vm_throw_callback
        -:11684:
        -:11685:**Summary**
        -:11686:
        -:11687:The callback passed to this function is called when an error is thrown
        -:11688:in ECMAScript code. The callback is not called again until the value is
        -:11689:caught. See: [jerry_vm_throw_callback_t](#jerry_vm_throw_callback_t).
        -:11690:
        -:11691:*Notes*:
        -:11692:- This API depends on a build option (`JERRY_VM_THROW`) and can be checked
        -:11693:  in runtime with the `JERRY_FEATURE_VM_THROW` feature enum value,
        -:11694:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11695:
        -:11696:**Prototype**
        -:11697:
        -:11698:```c
        -:11699:void
        -:11700:jerry_set_vm_throw_callback (jerry_vm_throw_callback_t throw_cb,
        -:11701:                             void *user_p);
        -:11702:```
        -:11703:
        -:11704:- `throw_cb` - callback which is called on throws (passing NULL disables this feature)
        -:11705:- `user_p` - user pointer passed to the `throw_cb` function
        -:11706:
        -:11707:*New in version [[NEXT_RELEASE]]*.
        -:11708:
        -:11709:**Example**
        -:11710:
        -:11711:[doctest]: # (test="compile")
        -:11712:
        -:11713:```c
        -:11714:#include "jerryscript.h"
        -:11715:
        -:11716:static void
    #####:11717:vm_throw_callback (const jerry_value_t error_value, /**< captured error */
        -:11718:                   void *user_p) /**< user pointer */
        -:11719:{
        -:11720:  (void) error_value;
        -:11721:
        -:11722:  /* Counts the number of throws. */
    #####:11723:  int *counter_p = (int *) user_p;
    #####:11724:  (*counter_p)++;
    #####:11725:}
        -:11726:
        -:11727:int
    #####:11728:main (void)
        -:11729:{
    #####:11730:  jerry_init (JERRY_INIT_EMPTY);
        -:11731:
    #####:11732:  int counter = 0;
    #####:11733:  jerry_set_vm_throw_callback (vm_throw_callback, &counter);
        -:11734:
    #####:11735:  const jerry_char_t script[] = "try { throw new Error('1') } catch (e) { throw new Error('2') }";
        -:11736:
    #####:11737:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
    #####:11738:  jerry_release_value (jerry_run (parsed_code));
    #####:11739:  jerry_release_value (parsed_code);
        -:11740:
        -:11741:  /* The counter contains 2. */
        -:11742:
    #####:11743:  jerry_cleanup ();
        -:11744:  return 0;
        -:11745:}
        -:11746:```
        -:11747:
        -:11748:**See also**
        -:11749:
        -:11750:- [jerry_vm_throw_callback_t](#jerry_vm_throw_callback_t)
        -:11751:
        -:11752:## jerry_get_resource_name
        -:11753:
        -:11754:**Summary**
        -:11755:
        -:11756:Get the resource name (usually a file name) of the currently executed script or the given function object.
        -:11757:
        -:11758:This function is typically called from native callbacks.
        -:11759:
        -:11760:*Notes*:
        -:11761:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:11762:is no longer needed.
        -:11763:- This feature depends on build option (`JERRY_LINE_INFO`) and can be checked
        -:11764:  in runtime with the `JERRY_FEATURE_LINE_INFO` feature enum value,
        -:11765:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11766:
        -:11767:**Prototype**
        -:11768:
        -:11769:```c
        -:11770:jerry_value_t
        -:11771:jerry_get_resource_name (jerry_value_t value);
        -:11772:```
        -:11773:- `value` - api value to obtain the resource name from
        -:11774:- return string value constructed from
        -:11775:  - the currently executed function object's resource name, if the given value is undefined
        -:11776:  - resource name of the function object, if the given value is a function object
        -:11777:  - "<anonymous>", otherwise
        -:11778:
        -:11779:*New in version 2.2*.
        -:11780:
        -:11781:**Example**
        -:11782:
        -:11783:[doctest]: # (name="02.API-REFERENCE-jsresourcename.c")
        -:11784:
        -:11785:```c
        -:11786:#include <stdio.h>
        -:11787:#include <string.h>
        -:11788:#include "jerryscript.h"
        -:11789:
        -:11790:static jerry_value_t
    #####:11791:resource_name_handler (const jerry_call_info_t *call_info_p,
        -:11792:                       const jerry_value_t args_p[],
        -:11793:                       const jerry_length_t args_count)
        -:11794:{
    #####:11795:  jerry_value_t undefined_value = jerry_create_undefined ();
    #####:11796:  jerry_value_t resource_name = jerry_get_resource_name (args_count > 0 ? args_p[0] : undefined_value);
    #####:11797:  jerry_release_value (undefined_value);
        -:11798:
    #####:11799:  return resource_name;
        -:11800:} /* resource_name_handler */
        -:11801:
        -:11802:int
    #####:11803:main (void)
        -:11804:{
    #####:11805:  jerry_init (JERRY_INIT_EMPTY);
        -:11806:
    #####:11807:  jerry_value_t global = jerry_get_global_object ();
        -:11808:
        -:11809:  /* Register the "resourceName" method. */
        -:11810:  {
    #####:11811:    jerry_value_t func = jerry_create_external_function (resource_name_handler);
    #####:11812:    jerry_value_t name = jerry_create_string ((const jerry_char_t *) "resourceName");
    #####:11813:    jerry_value_t result = jerry_set_property (global, name, func);
    #####:11814:    jerry_release_value (result);
    #####:11815:    jerry_release_value (name);
    #####:11816:    jerry_release_value (func);
        -:11817:  }
        -:11818:
    #####:11819:  jerry_release_value (global);
        -:11820:
    #####:11821:  const jerry_char_t source[] = "function myFunction() { return resourceName() }; myFunction()";
        -:11822:
        -:11823:  jerry_parse_options_t parse_options;
    #####:11824:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
    #####:11825:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "demo.js");
        -:11826:
    #####:11827:  jerry_value_t program = jerry_parse (source,
        -:11828:                                       sizeof (source) - 1,
        -:11829:                                       &parse_options);
    #####:11830:  jerry_release_value (parse_options.resource_name);
        -:11831:
    #####:11832:  if (!jerry_value_is_error (program))
        -:11833:  {
        -:11834:    /* `run_result` contains "demo.js" */
    #####:11835:    jerry_value_t run_result = jerry_run (program);
        -:11836:
        -:11837:    /* usage of `run_result` */
        -:11838:
    #####:11839:    jerry_release_value (run_result);
        -:11840:  }
        -:11841:
    #####:11842:  jerry_release_value (program);
    #####:11843:  jerry_cleanup ();
        -:11844:
        -:11845:  return 0;
        -:11846:}
        -:11847:```
        -:11848:
        -:11849:**See also**
        -:11850:
        -:11851:- [jerry_create_external_function](#jerry_create_external_function)
        -:11852:
        -:11853:## jerry_get_user_value
        -:11854:
        -:11855:**Summary**
        -:11856:
        -:11857:Returns the user value assigned to a script / module / function. This value is
        -:11858:set by the parser when the JERRY_PARSE_HAS_USER_VALUE flag is set in the `options`
        -:11859:member of the [jerry_parse_options_t](#jerry_parse_options_t) structure.
        -:11860:
        -:11861:*Notes*:
        -:11862:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:11863:is no longer needed.
        -:11864:
        -:11865:**Prototype**
        -:11866:
        -:11867:```c
        -:11868:jerry_value_t
        -:11869:jerry_get_user_value (const jerry_value_t value);
        -:11870:```
        -:11871:- `value` - script / module / function value which executes JavaScript
        -:11872:            code (native modules / functions do not have user value).
        -:11873:- return
        -:11874:  - user value - if available,
        -:11875:  - undefined - otherwise
        -:11876:
        -:11877:*New in version [[NEXT_RELEASE]]*.
        -:11878:
        -:11879:**Example**
        -:11880:
        -:11881:[doctest]: # ()
        -:11882:
        -:11883:```c
        -:11884:#include "jerryscript.h"
        -:11885:
        -:11886:int
    #####:11887:main (void)
        -:11888:{
    #####:11889:  jerry_init (JERRY_INIT_EMPTY);
        -:11890:
    #####:11891:  const jerry_char_t script[] = "function abc() {} abc";
        -:11892:
    #####:11893:  jerry_value_t user_value = jerry_create_object ();
        -:11894:
        -:11895:  jerry_parse_options_t parse_options;
    #####:11896:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:11897:  parse_options.user_value = user_value;
        -:11898:
    #####:11899:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####:11900:  jerry_release_value (user_value);
        -:11901:
        -:11902:  /* The jerry_get_user_value returns the object which
        -:11903:   * was created by jerry_create_object before. */
        -:11904:
    #####:11905:  user_value = jerry_get_user_value (parsed_code);
    #####:11906:  jerry_release_value (parsed_code);
        -:11907:
    #####:11908:  jerry_release_value (user_value);
    #####:11909:  jerry_cleanup ();
        -:11910:  return 0;
        -:11911:}
        -:11912:```
        -:11913:
        -:11914:**See also**
        -:11915:
        -:11916:- [jerry_parse](#jerry_parse)
        -:11917:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:11918:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:11919:
        -:11920:## jerry_get_source_info
        -:11921:
        -:11922:**Summary**
        -:11923:
        -:11924:Returns a newly created source info structure corresponding to the passed script/module/function.
        -:11925:The function is lower level than `toString()` operation, but provides more contextual information.
        -:11926:
        -:11927:*Notes*:
        -:11928:- Returned value must be freed with [jerry_free_source_info](#jerry_free_source_info) when it
        -:11929:is no longer needed.
        -:11930:- This API depends on a build option (`JERRY_FUNCTION_TO_STRING`) and can be checked
        -:11931:  in runtime with the `JERRY_FEATURE_FUNCTION_TO_STRING` feature enum value,
        -:11932:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11933:
        -:11934:**Prototype**
        -:11935:
        -:11936:```c
        -:11937:jerry_source_info_t *jerry_get_source_info (const jerry_value_t value);
        -:11938:```
        -:11939:- `value` - script / module / function value which executes JavaScript
        -:11940:            code (native modules / functions do not have source info).
        -:11941:- return
        -:11942:  - source info - a newly created source info, if at least one field is available,
        -:11943:  - NULL - otherwise
        -:11944:
        -:11945:*New in version [[NEXT_RELEASE]]*.
        -:11946:
        -:11947:**Example**
        -:11948:
        -:11949:[doctest]: # ()
        -:11950:
        -:11951:```c
        -:11952:#include "jerryscript.h"
        -:11953:
        -:11954:int
    #####:11955:main (void)
        -:11956:{
    #####:11957:  jerry_init (JERRY_INIT_EMPTY);
        -:11958:
    #####:11959:  const jerry_char_t script[] = "function abc() {} abc";
        -:11960:
    #####:11961:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
        -:11962:
    #####:11963:  jerry_source_info_t *source_info_p = jerry_get_source_info (parsed_code);
    #####:11964:  jerry_release_value (parsed_code);
        -:11965:
        -:11966:  if (source_info_p != NULL)
        -:11967:  {
        -:11968:    /* Check the information provided by jerry_get_source_info. */
        -:11969:  }
        -:11970:
    #####:11971:  jerry_free_source_info (source_info_p);
        -:11972:
    #####:11973:  jerry_cleanup ();
        -:11974:  return 0;
        -:11975:}
        -:11976:```
        -:11977:
        -:11978:**See also**
        -:11979:
        -:11980:- [jerry_free_source_info](#jerry_free_source_info)
        -:11981:- [jerry_source_info_t](#jerry_source_info_t)
        -:11982:
        -:11983:## jerry_free_source_info
        -:11984:
        -:11985:**Summary**
        -:11986:
        -:11987:Frees the the source info structure returned by [jerry_get_source_info](#jerry_get_source_info).
        -:11988:
        -:11989:*Notes*:
        -:11990:- This API depends on a build option (`JERRY_FUNCTION_TO_STRING`) and can be checked
        -:11991:  in runtime with the `JERRY_FEATURE_FUNCTION_TO_STRING` feature enum value,
        -:11992:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11993:
        -:11994:**Prototype**
        -:11995:
        -:11996:```c
        -:11997:void jerry_free_source_info (jerry_source_info_t *source_info_p)
        -:11998:```
        -:11999:- `source_info_p` - source info structure returned by [jerry_get_source_info](#jerry_get_source_info)
        -:12000:
        -:12001:*New in version [[NEXT_RELEASE]]*.
        -:12002:
        -:12003:**Example**
        -:12004:
        -:12005:See [jerry_get_source_info](#jerry_get_source_info)
        -:12006:
        -:12007:**See also**
        -:12008:
        -:12009:- [jerry_get_source_info](#jerry_get_source_info)
        -:12010:- [jerry_source_info_t](#jerry_source_info_t)
        -:12011:
        -:12012:
        -:12013:# Functions for realm objects
        -:12014:
        -:12015:These APIs all depend on build option (`JERRY_BUILTIN_REALMS`).
        -:12016:
        -:12017:## jerry_set_realm
        -:12018:
        -:12019:**Summary**
        -:12020:
        -:12021:Replaces the currently active realm (including the global object) with another realm.
        -:12022:The replacement should be temporary, and the original realm must be restored after
        -:12023:the tasks are completed. During the replacement, the realm must be referenced
        -:12024:by the application (i.e. the gc must not reclaim it). This is also true to
        -:12025:the returned previously active realm, so there is no need to free the value
        -:12026:after the restoration. The function can only fail if realms are not supported
        -:12027:or the passed argument is not a realm. In this case the returned exception must
        -:12028:be freed by [jerry_release_value](#jerry_release_value).
        -:12029:
        -:12030:This function is useful to parse a script, create a native function, load a snapshot
        -:12031:or create an exception in another realm. Each ECMAScript code runs in the realm
        -:12032:which was active when the code was parsed or loaded regardless of the current realm.
        -:12033:
        -:12034:*Notes*:
        -:12035:- This feature depends on build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -:12036:  in runtime with the `JERRY_FEATURE_REALM` feature enum value,
        -:12037:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12038:- The es.next profile enables this by default.
        -:12039:
        -:12040:**Prototype**
        -:12041:
        -:12042:```c
        -:12043:jerry_value_t
        -:12044:jerry_set_realm (jerry_value_t realm_value);
        -:12045:```
        -:12046:- `realm_value` - the new realm value
        -:12047:- return
        -:12048:  - previous realm value - if the passed value is a realm
        -:12049:  - exception - otherwise
        -:12050:
        -:12051:*New in version 2.4*.
        -:12052:
        -:12053:**Example**
        -:12054:
        -:12055:```c
        -:12056:{
        -:12057:  jerry_value_t realm_value = jerry_create_realm ();
        -:12058:
        -:12059:  jerry_value_t old_realm = jerry_set_realm (realm_value);
        -:12060:
        -:12061:  ... // usage of the realm
        -:12062:
        -:12063:  jerry_set_realm (old_realm);
        -:12064:}
        -:12065:```
        -:12066:
        -:12067:**See also**
        -:12068:
        -:12069:- [jerry_create_realm](#jerry_create_realm)
        -:12070:
        -:12071:## jerry_realm_get_this
        -:12072:
        -:12073:**Summary**
        -:12074:
        -:12075:Gets the 'this' binding of a realm. The 'this' binding is always an object.
        -:12076:By default the 'this' binding is the same as the realm object and can be
        -:12077:changed by [jerry_realm_set_this](#jerry_realm_set_this).
        -:12078:
        -:12079:*Notes*:
        -:12080:- This feature depends on build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -:12081:  in runtime with the `JERRY_FEATURE_REALM` feature enum value,
        -:12082:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12083:- The es.next profile enables this by default.
        -:12084:
        -:12085:**Prototype**
        -:12086:
        -:12087:```c
        -:12088:jerry_value_t
        -:12089:jerry_realm_get_this (jerry_value_t realm_value)
        -:12090:```
        -:12091:- `realm_value` - realm value
        -:12092:- return
        -:12093:  - type error - if realm_value is not a realm
        -:12094:  - 'this' binding object - otherwise
        -:12095:
        -:12096:*New in version 2.4*.
        -:12097:
        -:12098:**Example**
        -:12099:
        -:12100:```c
        -:12101:{
        -:12102:  jerry_value_t realm_value = jerry_create_realm ();
        -:12103:
        -:12104:  jerry_value_t this_value = jerry_realm_get_this (realm_value);
        -:12105:
        -:12106:  ... // usage of the this_value
        -:12107:
        -:12108:  jerry_release_value (this_value);
        -:12109:  jerry_release_value (realm_value);
        -:12110:}
        -:12111:```
        -:12112:
        -:12113:**See also**
        -:12114:
        -:12115:- [jerry_create_realm](#jerry_create_realm)
        -:12116:- [jerry_realm_set_this](#jerry_realm_set_this)
        -:12117:
        -:12118:## jerry_realm_set_this
        -:12119:
        -:12120:**Summary**
        -:12121:
        -:12122:Sets the 'this' binding of a realm. This function must be called before executing
        -:12123:any script on the realm. Otherwise the operation is undefined.
        -:12124:
        -:12125:*Notes*:
        -:12126:- This feature depends on build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -:12127:  in runtime with the `JERRY_FEATURE_REALM` feature enum value,
        -:12128:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12129:- The es.next profile enables this by default.
        -:12130:
        -:12131:**Prototype**
        -:12132:
        -:12133:```c
        -:12134:jerry_value_t
        -:12135:jerry_realm_set_this (jerry_value_t realm_value, jerry_value_t this_value)
        -:12136:```
        -:12137:- `realm_value` - realm value
        -:12138:- `this_value` - new this value
        -:12139:- return
        -:12140:  - type error - if realm_value is not a realm or this_value is not object
        -:12141:  - true - otherwise
        -:12142:
        -:12143:*New in version 2.4*.
        -:12144:
        -:12145:**Example**
        -:12146:
        -:12147:```c
        -:12148:{
        -:12149:  jerry_value_t realm_value = jerry_create_realm ();
        -:12150:
        -:12151:  jerry_value_t old_realm = jerry_set_realm (realm_value);
        -:12152:  /* The prototype of the object comes from the new realm. */
        -:12153:  jerry_value_t this_value = jerry_create_object ();
        -:12154:  jerry_set_realm (old_realm);
        -:12155:
        -:12156:  jerry_value_t result = jerry_realm_set_this (realm_value, this_value);
        -:12157:
        -:12158:  ... // usage of the realm
        -:12159:}
        -:12160:```
        -:12161:
        -:12162:**See also**
        -:12163:
        -:12164:- [jerry_create_realm](#jerry_create_realm)
        -:12165:- [jerry_set_realm](#jerry_set_realm)
        -:12166:- [jerry_realm_get_this](#jerry_realm_get_this)
        -:12167:
        -:12168:# ArrayBuffer and TypedArray functions
        -:12169:
        -:12170:These APIs all depend on the es.next profile.
        -:12171:
        -:12172:## jerry_get_arraybuffer_byte_length
        -:12173:
        -:12174:**Summary**
        -:12175:
        -:12176:Get the byte length property of the ArrayBuffer or SharedArrayBuffer. This is the
        -:12177:same value which was passed to the ArrayBuffer constructor call.
        -:12178:
        -:12179:**Prototype**
        -:12180:
        -:12181:```c
        -:12182:jerry_length_t
        -:12183:jerry_get_arraybuffer_byte_length (const jerry_value_t value);
        -:12184:```
        -:12185:
        -:12186:- `value` - ArrayBuffer object
        -:12187:- return value
        -:12188:  - size of the ArrayBuffer in bytes
        -:12189:  - 0 if the `value` parameter is not an ArrayBuffer
        -:12190:
        -:12191:*New in version 2.0*.
        -:12192:
        -:12193:**Example**
        -:12194:
        -:12195:```c
        -:12196:{
        -:12197:  jerry_value_t buffer = jerry_create_arraybuffer (15);
        -:12198:  jerry_length_t length = jerry_get_arraybuffer_byte_length (buffer);
        -:12199:  // length should be 15
        -:12200:
        -:12201:  jerry_release_value (buffer);
        -:12202:}
        -:12203:```
        -:12204:
        -:12205:**See also**
        -:12206:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -:12207:
        -:12208:
        -:12209:## jerry_arraybuffer_read
        -:12210:
        -:12211:**Summary**
        -:12212:
        -:12213:Copy the portion of the ArrayBuffer or SharedArrayBuffer into a user provided buffer.
        -:12214:The start offset of the read operation can be specified.
        -:12215:
        -:12216:The number bytes to be read can be specified via the `buf_size`
        -:12217:parameter. It is not possible to read more than the length of
        -:12218:the ArrayBuffer.
        -:12219:
        -:12220:Function returns the number of bytes read from the ArrayBuffer
        -:12221:(and written to the buffer parameter). This value is
        -:12222:calculated in the following way: `min(array buffer length - offset, buf_size)`.
        -:12223:
        -:12224:**Prototype**
        -:12225:
        -:12226:```c
        -:12227:jerry_length_t
        -:12228:jerry_arraybuffer_read (const jerry_value_t value,
        -:12229:                        jerry_length_t offset,
        -:12230:                        uint8_t *buf_p,
        -:12231:                        jerry_length_t buf_size);
        -:12232:```
        -:12233:
        -:12234:- `value` - ArrayBuffer to read from
        -:12235:- `offset` - start offset of the read operation
        -:12236:- `buf_p` - buffer to read the data to
        -:12237:- `buf_size` - maximum number of bytes to read into the buffer
        -:12238:- return value
        -:12239:  - number of bytes written into the buffer (read from the ArrayBuffer)
        -:12240:  - 0 if the `value` is not an ArrayBuffer object
        -:12241:  - 0 if the `buf_size` is zero or there is nothing to read
        -:12242:
        -:12243:*New in version 2.0*.
        -:12244:
        -:12245:**Example**
        -:12246:
        -:12247:```c
        -:12248:{
        -:12249:  uint8_t data[20];
        -:12250:  jerry_value_t buffer;
        -:12251:  // ... create the ArrayBuffer or acuiqre it from somewhere.
        -:12252:
        -:12253:  jerry_value_t bytes_read;
        -:12254:
        -:12255:  // read 10 bytes from the start of the ArrayBuffer.
        -:12256:  bytes_read = jerry_arraybuffer_read (buffer, 0, data, 10);
        -:12257:  // read the next 10 bytes
        -:12258:  bytes_read += jerry_arraybuffer_read (buffer, bytes_read, data + bytes_read, 10);
        -:12259:
        -:12260:  // process the data variable
        -:12261:
        -:12262:  jerry_release_value (buffer);
        -:12263:}
        -:12264:```
        -:12265:
        -:12266:**See also**
        -:12267:
        -:12268:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -:12269:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -:12270:- [jerry_get_arraybuffer_byte_length](#jerry_get_arraybuffer_byte_length)
        -:12271:
        -:12272:
        -:12273:## jerry_arraybuffer_write
        -:12274:
        -:12275:**Summary**
        -:12276:
        -:12277:Copy the contents of a buffer into the ArrayBuffer or SharedArrayBuffer.
        -:12278:The start offset of the write operation can be specified.
        -:12279:
        -:12280:The number bytes to be written can be specified via the `buf_size`
        -:12281:parameter. It is not possible to write more than the length of
        -:12282:the ArrayBuffer.
        -:12283:
        -:12284:Function returns the number of bytes written into the ArrayBuffer
        -:12285:(and read from the buffer parameter). This value is
        -:12286:calculated in the following way: `min(array buffer length - offset, buf_size)`.
        -:12287:
        -:12288:**Prototype**
        -:12289:
        -:12290:```c
        -:12291:jerry_length_t
        -:12292:jerry_arraybuffer_write (const jerry_value_t value,
        -:12293:                         jerry_length_t offset,
        -:12294:                         const uint8_t *buf_p,
        -:12295:                         jerry_length_t buf_size);
        -:12296:```
        -:12297:
        -:12298:- `value` - ArrayBuffer to write to
        -:12299:- `offset` - start offset of the write operation
        -:12300:- `buf_p` - buffer to read the data from
        -:12301:- `buf_size` - maximum number of bytes to write into the ArrayBuffer
        -:12302:- return value
        -:12303:  - number of bytes written into the ArrayBuffer (read from the buffer parameter)
        -:12304:  - 0 if the `value` is not an ArrayBuffer object
        -:12305:  - 0 if the `buf_size` is zero or there is nothing to write
        -:12306:
        -:12307:*New in version 2.0*.
        -:12308:
        -:12309:**Example**
        -:12310:
        -:12311:```c
        -:12312:{
        -:12313:  uint8_t data[20];
        -:12314:
        -:12315:  // fill the data with values
        -:12316:  for (int i = 0; i < 20; i++)
        -:12317:  {
        -:12318:    data[i] = (uint8_t) (i * 2);
        -:12319:  }
        -:12320:
        -:12321:  jerry_value_t buffer;
        -:12322:  // ... create the ArrayBuffer or acquire it from somewhere.
        -:12323:
        -:12324:  jerry_value_t bytes_written;
        -:12325:
        -:12326:  // write 10 bytes from to the start of the ArrayBuffer.
        -:12327:  bytes_written = jerry_arraybuffer_write (buffer, 0, data, 10);
        -:12328:  // read the next 10 bytes
        -:12329:  bytes_written += jerry_arraybuffer_write (buffer, bytes_written, data + bytes_written, 10);
        -:12330:
        -:12331:  // use the ArrayBuffer
        -:12332:
        -:12333:  jerry_release_value (buffer);
        -:12334:}
        -:12335:```
        -:12336:
        -:12337:**See also**
        -:12338:
        -:12339:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -:12340:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -:12341:- [jerry_get_arraybuffer_byte_length](#jerry_get_arraybuffer_byte_length)
        -:12342:
        -:12343:
        -:12344:## jerry_get_arraybuffer_pointer
        -:12345:
        -:12346:**Summary**
        -:12347:
        -:12348:The function allows access to the contents of the Array Buffer directly.
        -:12349:
        -:12350:**WARNING!** This operation is for expert use only! The programmer must
        -:12351:ensure that the returned memory area is used correctly. That is
        -:12352:there is no out of bounds reads or writes. The lifetime of the underlying
        -:12353:data buffer is managed by the ArrayBuffer value. Make sure to acquire the
        -:12354:value with [`jerry_acquire_value`](#jerry_acquire_value) if the data
        -:12355:buffer is needed later.
        -:12356:
        -:12357:**Prototype**
        -:12358:
        -:12359:```c
        -:12360:uint8_t *
        -:12361:jerry_get_arraybuffer_pointer (const jerry_value_t value);
        -:12362:```
        -:12363:
        -:12364:- `value` - Array Buffer object.
        -:12365:- return value
        -:12366:  - pointer to the Array Buffer's data area.
        -:12367:  - NULL if the `value` is:
        -:12368:    - not an ArrayBuffer object
        -:12369:    - an external ArrayBuffer has been detached
        -:12370:
        -:12371:*New in version 2.0*.
        -:12372:
        -:12373:**Example**
        -:12374:
        -:12375:```c
        -:12376:{
        -:12377:  // create the ArrayBuffer
        -:12378:  jerry_value_t buffer = jerry_create_arraybuffer (16);
        -:12379:
        -:12380:  uint8_t *const data = jerry_get_arraybuffer_pointer (buffer);
        -:12381:
        -:12382:  for (int i = 0; i < 16; i++)
        -:12383:  {
        -:12384:    data[i] = (uint8_t) (i + 4);
        -:12385:  }
        -:12386:
        -:12387:  // use the Array Buffer
        -:12388:
        -:12389:  // release buffer as it is not needed after this point
        -:12390:  jerry_release_value (buffer);
        -:12391:}
        -:12392:```
        -:12393:
        -:12394:**See also**
        -:12395:
        -:12396:- [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external)
        -:12397:
        -:12398:## jerry_is_arraybuffer_detachable
        -:12399:
        -:12400:**Summary**
        -:12401:
        -:12402:Get if the ArrayBuffer is detachable.
        -:12403:
        -:12404:**Prototype**
        -:12405:
        -:12406:```c
        -:12407:jerry_value_t
        -:12408:jerry_is_arraybuffer_detachable (const jerry_value_t value);
        -:12409:```
        -:12410:
        -:12411:- `value` - ArrayBuffer to be detached
        -:12412:- return
        -:12413:  - boolean value if success
        -:12414:  - Error otherwise
        -:12415:
        -:12416:*New in version 2.2*.
        -:12417:
        -:12418:**Example**
        -:12419:
        -:12420:```c
        -:12421:{
        -:12422:  // create the ArrayBuffer
        -:12423:  jerry_value_t buffer = jerry_create_arraybuffer (16);
        -:12424:
        -:12425:  jerry_value_t res = jerry_is_arraybuffer_detachable (buffer);
        -:12426:  bool is_detachable = jerry_value_is_true (res);
        -:12427:
        -:12428:  // release buffer as it is not needed after this point
        -:12429:  jerry_release_value (res);
        -:12430:  jerry_release_value (buffer);
        -:12431:}
        -:12432:```
        -:12433:
        -:12434:**See also**
        -:12435:
        -:12436:- [jerry_detach_arraybuffer](#jerry_detach_arraybuffer)
        -:12437:
        -:12438:## jerry_detach_arraybuffer
        -:12439:
        -:12440:**Summary**
        -:12441:
        -:12442:Detach the underlying data block from ArrayBuffer and set its bytelength to 0.
        -:12443:
        -:12444:This operation requires the ArrayBuffer to be external that created by
        -:12445:`jerry_create_arraybuffer_external`.
        -:12446:
        -:12447:**Prototype**
        -:12448:
        -:12449:```c
        -:12450:jerry_value_t
        -:12451:jerry_detach_arraybuffer (const jerry_value_t value);
        -:12452:```
        -:12453:
        -:12454:*Note*: If the ArrayBuffer has been created with `jerry_create_arraybuffer_external` the optional free callback is called on a successful detach operation
        -:12455:
        -:12456:- `value` - ArrayBuffer to be detached
        -:12457:- return
        -:12458:  - null value if success
        -:12459:  - Error otherwise
        -:12460:
        -:12461:*New in version 2.2*.
        -:12462:
        -:12463:**Example**
        -:12464:
        -:12465:```c
        -:12466:{
        -:12467:  uint8_t buf[1];
        -:12468:  jerry_size_t length = 1;
        -:12469:  // create the ArrayBuffer
        -:12470:  jerry_value_t buffer = jerry_create_arraybuffer (length, buf, NULL);
        -:12471:
        -:12472:  jerry_value_t res = jerry_detach_arraybuffer (buffer);
        -:12473:
        -:12474:  // release buffer as it is not needed after this point
        -:12475:  jerry_release_value (res);
        -:12476:  jerry_release_value (buffer);
        -:12477:}
        -:12478:```
        -:12479:
        -:12480:**See also**
        -:12481:
        -:12482:- [jerry_is_arraybuffer_detachable](#jerry_is_arraybuffer_detachable)
        -:12483:
        -:12484:## jerry_get_dataview_buffer
        -:12485:
        -:12486:**Summary**
        -:12487:
        -:12488:Get the ArrayBuffer object used by a DataView object.
        -:12489:Additionally returns the byteLength and byteOffset properties
        -:12490:of the DataView object.
        -:12491:
        -:12492:For the returned ArrayBuffer the [jerry_release_value](#jerry_release_value)
        -:12493:must be called when it is no longer needed.
        -:12494:
        -:12495:**Prototype**
        -:12496:
        -:12497:```c
        -:12498:jerry_value_t
        -:12499:jerry_get_dataview_buffer (const jerry_value_t value,
        -:12500:                           jerry_length_t *byteOffset,
        -:12501:                           jerry_length_t *byteLength);
        -:12502:```
        -:12503:
        -:12504:- `value` - DataView to get the ArrayBuffer from
        -:12505:- `byteOffset` - (Optional) returns the start offset of the ArrayBuffer for the DataView
        -:12506:- `byteLength` - (Optional) returns the number of bytes used from the ArrayBuffer for the DataView
        -:12507:- return
        -:12508:  - DataView object's underlying ArrayBuffer object
        -:12509:  - TypeError if the `value` is not a DataView object
        -:12510:
        -:12511:*New in version 2.0*.
        -:12512:
        -:12513:**Example**
        -:12514:
        -:12515:[doctest]: # ()
        -:12516:
        -:12517:```c
        -:12518:#include "jerryscript.h"
        -:12519:
        -:12520:int
    #####:12521:main (void)
        -:12522:{
    #####:12523:  jerry_init (JERRY_INIT_EMPTY);
        -:12524:
    #####:12525:  jerry_value_t arraybuffer = jerry_create_arraybuffer (16);
    #####:12526:  jerry_value_t dataview = jerry_create_dataview (arraybuffer, 0, 16);
    #####:12527:  jerry_length_t byteOffset = 0;
    #####:12528:  jerry_length_t byteLength = 0;
    #####:12529:  jerry_value_t buffer = jerry_get_dataview_buffer (dataview, &byteOffset, &byteLength);
        -:12530:
        -:12531:  // buffer is an ArrayBuffer object and ArrayBuffer operations can be performed on it
        -:12532:  // byteOffset is 0
        -:12533:  // byteLength is 16
        -:12534:
        -:12535:  // usage of buffer
        -:12536:
    #####:12537:  jerry_release_value (buffer);
    #####:12538:  jerry_release_value (dataview);
    #####:12539:  jerry_release_value (arraybuffer);
        -:12540:
    #####:12541:  jerry_cleanup ();
        -:12542:}
        -:12543:```
        -:12544:
        -:12545:**See also**
        -:12546:
        -:12547:- [jerry_create_dataview](#jerry_create_dataview)
        -:12548:
        -:12549:
        -:12550:## jerry_get_typedarray_type
        -:12551:
        -:12552:**Summary**
        -:12553:
        -:12554:Get the type of the TypedArray.
        -:12555:
        -:12556:The returned type is one of the [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -:12557:enum value.
        -:12558:
        -:12559:**Prototype**
        -:12560:
        -:12561:```c
        -:12562:jerry_typedarray_type_t
        -:12563:jerry_get_typedarray_type (jerry_value_t value);
        -:12564:```
        -:12565:
        -:12566:- `value` - TypedArray object to query for type.
        -:12567:- return
        -:12568:  - the type of the TypedArray
        -:12569:  - JERRY_TYPEDARRAY_INVALID if the object was not a TypedArray
        -:12570:
        -:12571:*New in version 2.0*.
        -:12572:
        -:12573:**Example**
        -:12574:
        -:12575:```c
        -:12576:{
        -:12577:  jerry_typedarray_type_t expected_type = JERRY_TYPEDARRAY_UINT32;
        -:12578:  jerry_value_t typedarray = jerry_create_typedarray (expected_klass, 25);
        -:12579:
        -:12580:  jerry_typedarray_type_t type = jerry_get_typedarray_type (typedarray);
        -:12581:
        -:12582:  // 'type' is now JERRY_TYPEDARRAY_UINT32
        -:12583:
        -:12584:  jerry_release_value (typedarray);
        -:12585:}
        -:12586:```
        -:12587:
        -:12588:**See also**
        -:12589:
        -:12590:- [jerry_create_typedarray](#jerry_create_typedarray)
        -:12591:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -:12592:
        -:12593:
        -:12594:## jerry_get_typedarray_length
        -:12595:
        -:12596:**Summary**
        -:12597:
        -:12598:Get the element count of the TypedArray as specified during creation.
        -:12599:
        -:12600:This is not the same as the byteLength property of a TypedArray object.
        -:12601:
        -:12602:**Prototype**
        -:12603:
        -:12604:```
        -:12605:jerry_length_t
        -:12606:jerry_get_typedarray_length (jerry_value_t value);
        -:12607:```
        -:12608:
        -:12609:- `value` - TypedArray object to query
        -:12610:- return
        -:12611:  - length (element count) of the TypedArray object
        -:12612:  - 0 if the object is not a TypedArray
        -:12613:
        -:12614:*New in version 2.0*.
        -:12615:
        -:12616:**Example**
        -:12617:
        -:12618:```c
        -:12619:{
        -:12620:  jerry_value_t array = jerry_create_typedarray (JERRY_TYPEDARRAY_INT32, 21);
        -:12621:
        -:12622:  jerry_length_t element_count = jerry_get_typedarray_length (array);
        -:12623:
        -:12624:  // element_count is now 21.
        -:12625:
        -:12626:  jerry_release_value (array);
        -:12627:}
        -:12628:```
        -:12629:
        -:12630:**See also**
        -:12631:
        -:12632:- [jerry_create_typedarray](#jerry_create_typedarray)
        -:12633:
        -:12634:
        -:12635:## jerry_get_typedarray_buffer
        -:12636:
        -:12637:**Summary**
        -:12638:
        -:12639:Get the ArrayBuffer object used by a TypedArray object.
        -:12640:Additionally returns the byteLength and byteOffset properties
        -:12641:of the TypedArray object.
        -:12642:
        -:12643:For the returned ArrayBuffer the [jerry_release_value](#jerry_release_value)
        -:12644:must be called.
        -:12645:
        -:12646:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:12647:is no longer needed.
        -:12648:
        -:12649:**Prototype**
        -:12650:
        -:12651:```c
        -:12652:jerry_value_t
        -:12653:jerry_get_typedarray_buffer (jerry_value_t value,
        -:12654:                             jerry_length_t *byteOffset,
        -:12655:                             jerry_length_t *byteLength);
        -:12656:```
        -:12657:
        -:12658:- `value` - TypedArray to get the ArrayBuffer from
        -:12659:- `byteOffset` - (Optional) returns the start offset of the ArrayBuffer for the TypedArray
        -:12660:- `byteLength` - (Optional) returns the number of bytes used from the ArrayBuffer for the TypedArray
        -:12661:- return
        -:12662:  - TypedArray object's underlying ArrayBuffer object
        -:12663:  - TypeError if the `value` is not a TypedArray object
        -:12664:
        -:12665:*New in version 2.0*.
        -:12666:
        -:12667:**Example**
        -:12668:
        -:12669:```c
        -:12670:{
        -:12671:  jerry_value_t array = jerry_create_typedarray (JERRY_TYPEDARRAY_INT16, 11);
        -:12672:
        -:12673:  jerry_length_t byteLength = 0;
        -:12674:  jerry_length_t byteOffset = 0;
        -:12675:  jerry_value_t buffer = jerry_get_typedarray_buffer (array, &byteOffset, &byteLength);
        -:12676:
        -:12677:  // buffer is an ArrayBuffer object and ArrayBuffer operations can be performed on it
        -:12678:  // byteLength is 11 * 2  (2 as the TypedArray stores Int16 that is 2 byte elements)
        -:12679:  // byteOffset is 0
        -:12680:
        -:12681:  jerry_release_value (buffer);
        -:12682:  jerry_release_value (array);
        -:12683:}
        -:12684:```
        -:12685:
        -:12686:**See also**
        -:12687:
        -:12688:- [jerry_create_typedarray](#jerry_create_typedarray)
        -:12689:
        -:12690:# JSON functions
        -:12691:
        -:12692:## jerry_json_parse
        -:12693:
        -:12694:**Summary**
        -:12695:
        -:12696:Parses a JSON string creating a JavaScript value. The behaviour is equivalent with
        -:12697:the "JSON.parse(string)" JS call.
        -:12698:
        -:12699:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:12700:is no longer needed.
        -:12701:
        -:12702:**Prototype**
        -:12703:
        -:12704:```c
        -:12705:jerry_value_t
        -:12706:jerry_json_parse (const jerry_char_t *string_p,
        -:12707:                  jerry_size_t string_size);
        -:12708:```
        -:12709:
        -:12710:- `string_p` - pointer to a JSON string.
        -:12711:- `string_size` - size of the string.
        -:12712:- return
        -:12713:  - `jerry_value_t` containing a JavaScript value.
        -:12714:  - Error value in case of any parse error.
        -:12715:
        -:12716:*New in version 2.0*.
        -:12717:
        -:12718:**Example**
        -:12719:
        -:12720:[doctest]: # ()
        -:12721:
        -:12722:```c
        -:12723:#include "jerryscript.h"
        -:12724:
        -:12725:int
    #####:12726:main (void)
        -:12727:{
        -:12728:  /* Initialize engine */
    #####:12729:  jerry_init (JERRY_INIT_EMPTY);
        -:12730:
    #####:12731:  const jerry_char_t data[] = "{\"name\": \"John\", \"age\": 5}";
    #####:12732:  jerry_value_t obj = jerry_json_parse (data, sizeof (data) - 1);
        -:12733:
        -:12734:  /* "obj" now conatins and object created from the "data" JSON string. */
        -:12735:
    #####:12736:  jerry_release_value (obj);
        -:12737:
        -:12738:  /* Cleanup engine */
    #####:12739:  jerry_cleanup ();
        -:12740:
        -:12741:  return 0;
        -:12742:}
        -:12743:```
        -:12744:
        -:12745:## jerry_json_stringify
        -:12746:
        -:12747:**Summary**
        -:12748:
        -:12749:Create a JSON string value from a JavaScript value. The behaviour is equivalent with
        -:12750:the "JSON.stringify(input_value)" JS call.
        -:12751:
        -:12752:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:12753:is no longer needed.
        -:12754:
        -:12755:**Prototype**
        -:12756:
        -:12757:```c
        -:12758:jerry_value_t
        -:12759:jerry_json_stringify (const jerry_value_t input_value);
        -:12760:```
        -:12761:
        -:12762:- `input_value` - a `jerry_value_t` to stringify.
        -:12763:- return
        -:12764:  - `jerry_value_t` containing a JSON string.
        -:12765:  - Error value in case of any stringification error.
        -:12766:
        -:12767:*New in version 2.0*.
        -:12768:
        -:12769:**Example**
        -:12770:
        -:12771:[doctest]: # ()
        -:12772:
        -:12773:```c
        -:12774:#include "jerryscript.h"
        -:12775:
        -:12776:int
    #####:12777:main (void)
        -:12778:{
        -:12779:  /* Initialize engine */
    #####:12780:  jerry_init (JERRY_INIT_EMPTY);
        -:12781:
    #####:12782:  jerry_value_t obj = jerry_create_object ();
        -:12783:  {
    #####:12784:    jerry_value_t key = jerry_create_string ((const jerry_char_t *) "name");
    #####:12785:    jerry_value_t value = jerry_create_string ((const jerry_char_t *) "John");
    #####:12786:    jerry_release_value (jerry_set_property (obj, key, value));
    #####:12787:    jerry_release_value (key);
    #####:12788:    jerry_release_value (value);
        -:12789:  }
        -:12790:
    #####:12791:  jerry_value_t stringified = jerry_json_stringify (obj);
        -:12792:
        -:12793:  /* "stringified" now contains a JSON string */
        -:12794:
    #####:12795:  jerry_release_value (stringified);
    #####:12796:  jerry_release_value (obj);
        -:12797:
        -:12798:  /* Cleanup engine */
    #####:12799:  jerry_cleanup ();
        -:12800:
        -:12801:  return 0;
        -:12802:}
        -:12803:```
        -:12804:
        -:12805:# Container Functions
        -:12806:
        -:12807:## jerry_get_array_from_container
        -:12808:
        -:12809:**Summary**
        -:12810:
        -:12811:Return a new array containing elements from a Container, or a Container Iterator. Sets the is_key_value_p to true.
        -:12812:if the container object contains key-value structure and false if not.
        -:12813:
        -:12814:*Notes*
        -:12815:- The return value will be an empty array if the Map/Set or Iterator object was empty or finished.
        -:12816:- This API function depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -:12817:  runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -:12818:  feature enum values.
        -:12819:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12820:- The es.next profile enables this by default.
        -:12821:
        -:12822:*New in version [[NEXT_RELEASE]]*.
        -:12823:
        -:12824:**Prototype**
        -:12825:
        -:12826:```c
        -:12827:jerry_value_t
        -:12828:jerry_get_array_from_container(jerry_value_t value,
        -:12829:                               bool *is_key_value_p);
        -:12830:```
        -:12831:
        -:12832:- `value` - Map/Set or iterator object
        -:12833:- `is_key_value` - Will be set to `true` if the given container has key-value pairs, `false` otherwise.
        -:12834:- return value
        -:12835:  - jerry_value_t containing an array of values from the Map/Set or iterator object
        -:12836:  - Error if the `value` is nor a Container or a Container Iterator.
        -:12837:  - `undefined` if the `value` is undefined/null.
        -:12838:**Example**
        -:12839:
        -:12840:[doctest]: # ()
        -:12841:
        -:12842:```c
        -:12843:#include "jerryscript.h"
        -:12844:int
    #####:12845:main (void)
        -:12846:{
    #####:12847:  jerry_init (JERRY_INIT_EMPTY);
        -:12848:
    #####:12849:  jerry_char_t src[] = "var map = new Map(); map.set(1,2); map.entries()";
    #####:12850:  jerry_value_t iterable = jerry_eval (src, sizeof (src) - 1, JERRY_PARSE_NO_OPTS);
        -:12851:
    #####:12852:  bool is_key_value_container = false;
    #####:12853:  jerry_value_t buffer_from_map = jerry_get_array_from_container (iterable, &is_key_value_container);
        -:12854:
        -:12855:  /*
        -:12856:    The buffer_from_map contains two elements: 1 and 2, which is the key/value pair of the only item in the set.
        -:12857:    is_key_value set to true, as the original is a key-value structure (a Map Iterator)
        -:12858:  */
        -:12859:
    #####:12860:  jerry_release_value (iterable);
    #####:12861:  jerry_release_value (buffer_from_map);
        -:12862:
    #####:12863:  jerry_cleanup ();
        -:12864:
        -:12865:  return 0;
        -:12866:}
        -:12867:```
        -:12868:
        -:12869:**See also**
        -:12870:
        -:12871:- [jerry_create_container](#jerry_create_container)
        -:12872:- [jerry_container_type_t](#jerry_container_type_t)
        -:12873:
        -:12874:
        -:12875:## jerry_container_operation
        -:12876:
        -:12877:**Summary**
        -:12878:
        -:12879:Perform container operation on the given operands (add, delete, set, etc.).
        -:12880:
        -:12881:*Note*:
        -:12882:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:12883:  is no longer needed.
        -:12884:- This API function depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -:12885:  runtime with the `JERRY_FEATURE_MAP` , `JERRY_FEATURE_SET` , `JERRY_FEATURE_WEAKMAP` , `JERRY_FEATURE_WEAKSET`
        -:12886:  feature enum values.
        -:12887:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12888:- The es.next profile enables this by default.
        -:12889:
        -:12890:**Prototype**
        -:12891:
        -:12892:```c
        -:12893:jerry_value_t
        -:12894:jerry_container_operation (jerry_container_operation_t operation,
        -:12895:                           jerry_value_t container,
        -:12896:                           jerry_value_t *arguments,
        -:12897:                           uint32_t arguments_number)
        -:12898:```
        -:12899:
        -:12900: - `operation` - container operation
        -:12901: - `container` - this value
        -:12902: - `arguments` - array of arguments
        -:12903: - `arguments_number` - number of arguments
        -:12904: - result if the operation is successful
        -:12905: - error, otherwise
        -:12906:
        -:12907:*New in version [[NEXT_RELEASE]]*.
        -:12908:
        -:12909:**Example**
        -:12910:
        -:12911:[doctest]: # ()
        -:12912:
        -:12913:```c
        -:12914:#include "jerryscript.h"
        -:12915:
        -:12916:int
    #####:12917:main (void)
        -:12918:{
    #####:12919:  jerry_init (JERRY_INIT_EMPTY);
        -:12920:
    #####:12921:  jerry_value_t map = jerry_create_container (JERRY_CONTAINER_TYPE_MAP, NULL, 0);
    #####:12922:  jerry_value_t key_str = jerry_create_string ((jerry_char_t *) "number");
    #####:12923:  jerry_value_t number = jerry_create_number (10);
    #####:12924:  jerry_value_t args[2] = {key_str, number};
        -:12925:
    #####:12926:  jerry_value_t result = jerry_container_operation (JERRY_CONTAINER_OP_SET, map, args, 2);
    #####:12927:  jerry_release_value (result);
        -:12928:
    #####:12929:  result = jerry_container_operation (JERRY_CONTAINER_OP_SIZE, map, NULL, 0);
    #####:12930:  jerry_release_value (result);
        -:12931:
    #####:12932:  result = jerry_container_operation (JERRY_CONTAINER_OP_CLEAR, map, NULL, 0);
    #####:12933:  jerry_release_value (result);
        -:12934:
    #####:12935:  jerry_release_value (map);
    #####:12936:  jerry_release_value (key_str);
    #####:12937:  jerry_release_value (number);
        -:12938:
    #####:12939:  jerry_cleanup ();
        -:12940:  return 0;
        -:12941:}
        -:12942:```
        -:12943:
        -:12944:**See also**
        -:12945:
        -:12946:- [jerry_create_container](#jerry_create_container)
        -:12947:- [jerry_container_type_t](#jerry_container_type_t)
