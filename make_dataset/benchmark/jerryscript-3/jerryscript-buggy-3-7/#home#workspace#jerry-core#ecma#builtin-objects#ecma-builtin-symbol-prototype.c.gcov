        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-symbol-prototype.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16: #include "ecma-alloc.h"
        -:   17: #include "ecma-builtins.h"
        -:   18: #include "ecma-conversion.h"
        -:   19: #include "ecma-exceptions.h"
        -:   20: #include "ecma-gc.h"
        -:   21: #include "ecma-globals.h"
        -:   22: #include "ecma-helpers.h"
        -:   23: #include "ecma-objects.h"
        -:   24: #include "ecma-symbol-object.h"
        -:   25: #include "jrt.h"
        -:   26:
        -:   27:#if JERRY_ESNEXT
        -:   28:
        -:   29:#define ECMA_BUILTINS_INTERNAL
        -:   30:#include "ecma-builtins-internal.h"
        -:   31:
        -:   32:/**
        -:   33: * This object has a custom dispatch function.
        -:   34: */
        -:   35:#define BUILTIN_CUSTOM_DISPATCH
        -:   36:
        -:   37:/**
        -:   38: * List of built-in routine identifiers.
        -:   39: */
        -:   40:enum
        -:   41:{
        -:   42:  ECMA_SYMBOL_PROTOTYPE_ROUTINE_START = 0,
        -:   43:  ECMA_SYMBOL_PROTOTYPE_VALUE_OF, /**< ECMA-262 v11, 19.4.3.4 */
        -:   44:  ECMA_SYMBOL_PROTOTYPE_TO_PRIMITIVE, /**< ECMA-262 v11, 19.4.3.5 */
        -:   45:  ECMA_SYMBOL_PROTOTYPE_TO_STRING, /**< ECMA-262 v11, 19.4.3.3 */
        -:   46:  ECMA_SYMBOL_PROTOTYPE_DESCRIPTION, /**< ECMA-262 v11, 19.4.3.2 */
        -:   47:};
        -:   48:
        -:   49:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-symbol-prototype.inc.h"
        -:   50:#define BUILTIN_UNDERSCORED_ID symbol_prototype
        -:   51:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   52:
        -:   53:/** \addtogroup ecma ECMA
        -:   54: * @{
        -:   55: *
        -:   56: * \addtogroup ecmabuiltins
        -:   57: * @{
        -:   58: *
        -:   59: * \addtogroup symbolprototype ECMA Symbol prototype object built-in
        -:   60: * @{
        -:   61: */
        -:   62:
        -:   63:/**
        -:   64: * Dispatcher of the Symbol built-in's routines
        -:   65: *
        -:   66: * @return ecma value
        -:   67: *         Returned value must be freed with ecma_free_value.
        -:   68: */
        -:   69:ecma_value_t
    #####:   70:ecma_builtin_symbol_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:   71:                                                ecma_value_t this_arg, /**< 'this' argument value */
        -:   72:                                                const ecma_value_t arguments_list[], /**< list of arguments
        -:   73:                                                                                      *   passed to routine */
        -:   74:                                                uint32_t arguments_number) /**< length of arguments' list */
        -:   75:{
        -:   76:  JERRY_UNUSED_2 (arguments_list, arguments_number);
        -:   77:
    #####:   78:  ecma_value_t sym = ecma_symbol_this_value (this_arg);
        -:   79:
    #####:   80:  if (ECMA_IS_VALUE_ERROR (sym))
        -:   81:  {
    #####:   82:    return sym;
        -:   83:  }
        -:   84:
    #####:   85:  if (builtin_routine_id < ECMA_SYMBOL_PROTOTYPE_TO_STRING)
        -:   86:  {
    #####:   87:    return ecma_copy_value (sym);
        -:   88:  }
        -:   89:
    #####:   90:  if (builtin_routine_id == ECMA_SYMBOL_PROTOTYPE_TO_STRING)
        -:   91:  {
    #####:   92:    return ecma_get_symbol_descriptive_string (sym);
        -:   93:  }
        -:   94:
    #####:   95:  JERRY_ASSERT (builtin_routine_id == ECMA_SYMBOL_PROTOTYPE_DESCRIPTION);
    #####:   96:  ecma_string_t *symbol_p = ecma_get_symbol_from_value (sym);
    #####:   97:  ecma_value_t desc = ecma_get_symbol_description (symbol_p);
    #####:   98:  if (ecma_is_value_undefined (desc))
        -:   99:  {
    #####:  100:    return desc;
        -:  101:  }
        -:  102:
    #####:  103:  ecma_string_t *desc_p = ecma_get_string_from_value (desc);
    #####:  104:  ecma_ref_ecma_string (desc_p);
    #####:  105:  return desc;
        -:  106:} /* ecma_builtin_symbol_prototype_dispatch_routine */
        -:  107:
        -:  108:/**
        -:  109: * @}
        -:  110: * @}
        -:  111: * @}
        -:  112: */
        -:  113:
        -:  114:#endif /* JERRY_ESNEXT */
