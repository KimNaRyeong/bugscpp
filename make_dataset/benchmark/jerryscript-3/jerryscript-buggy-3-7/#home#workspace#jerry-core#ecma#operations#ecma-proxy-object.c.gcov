        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-proxy-object.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-array-object.h"
        -:   18:#include "ecma-builtins.h"
        -:   19:#include "ecma-builtin-handlers.h"
        -:   20:#include "ecma-builtin-object.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-function-object.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-globals.h"
        -:   25:#include "ecma-helpers.h"
        -:   26:#include "ecma-objects.h"
        -:   27:#include "ecma-objects-general.h"
        -:   28:#include "ecma-proxy-object.h"
        -:   29:#include "jcontext.h"
        -:   30:
        -:   31:/** \addtogroup ecma ECMA
        -:   32: * @{
        -:   33: *
        -:   34: * \addtogroup ecmaproxyobject ECMA Proxy object related routines
        -:   35: * @{
        -:   36: */
        -:   37:
        -:   38:#if JERRY_BUILTIN_PROXY
        -:   39:/**
        -:   40: * ProxyCreate operation for create a new proxy object
        -:   41: *
        -:   42: * See also:
        -:   43: *         ES2015 9.5.15
        -:   44: *         ES11+: 9.5.14 ProxyCreate
        -:   45: *
        -:   46: * @return created Proxy object as an ecma-value - if success
        -:   47: *         raised error - otherwise
        -:   48: */
        -:   49:ecma_object_t *
    #####:   50:ecma_proxy_create (ecma_value_t target, /**< proxy target */
        -:   51:                   ecma_value_t handler, /**< proxy handler */
        -:   52:                   uint32_t options) /**< ecma_proxy_flag_types_t option bits */
        -:   53:{
        -:   54:  /* ES2015: 1, 3. */
        -:   55:  /* ES11+: 1 - 2. */
    #####:   56:  if (!ecma_is_value_object (target) || !ecma_is_value_object (handler))
        -:   57:  {
    #####:   58:    ecma_raise_type_error (ECMA_ERR_MSG ("Cannot create Proxy with a non-object target or handler"));
    #####:   59:    return NULL;
        -:   60:  }
        -:   61:
        -:   62:  /* ES2015: 5 - 6. */
        -:   63:  /* ES11+: 3 - 4. */
        -:   64:  /* A Proxy does not have [[Prototype]] value as per standard */
    #####:   65:  ecma_object_t *obj_p = ecma_create_object (NULL, sizeof (ecma_proxy_object_t), ECMA_OBJECT_TYPE_PROXY);
        -:   66:
    #####:   67:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:   68:
    #####:   69:  obj_p->u2.prototype_cp = (jmem_cpointer_t) options;
        -:   70:
        -:   71:  /* ES2015: 7. */
        -:   72:  /* ES11+: 5. */
    #####:   73:  if (ecma_op_is_callable (target))
        -:   74:  {
    #####:   75:    obj_p->u2.prototype_cp |= ECMA_PROXY_IS_CALLABLE;
        -:   76:
        -:   77:    /* ES2015: 7.b. */
        -:   78:    /* ES11+: 5.b. */
    #####:   79:    if (ecma_is_constructor (target))
        -:   80:    {
    #####:   81:      obj_p->u2.prototype_cp |= ECMA_PROXY_IS_CONSTRUCTABLE;
        -:   82:    }
        -:   83:  }
        -:   84:
        -:   85:  /* ES2015: 8. */
        -:   86:  /* ES11+: 6. */
    #####:   87:  proxy_obj_p->target = target;
        -:   88:
        -:   89:  /* ES2015: 9. */
        -:   90:  /* ES11+: 7. */
    #####:   91:  proxy_obj_p->handler = handler;
        -:   92:
        -:   93:  /* ES2015: 10. */
        -:   94:  /* ES11+: 8 */
    #####:   95:  return obj_p;
        -:   96:} /* ecma_proxy_create */
        -:   97:
        -:   98:/**
        -:   99: * Definition of Proxy Revocation Function
        -:  100: *
        -:  101: * See also:
        -:  102: *         ES2015 26.2.2.1.1
        -:  103: *
        -:  104: * @return ECMA_VALUE_UNDEFINED
        -:  105: */
        -:  106:ecma_value_t
    #####:  107:ecma_proxy_revoke_cb (ecma_object_t *function_obj_p, /**< function object */
        -:  108:                      const ecma_value_t args_p[], /**< argument list */
        -:  109:                      const uint32_t args_count) /**< argument number */
        -:  110:{
        -:  111:  JERRY_UNUSED_2 (args_p, args_count);
        -:  112:
        -:  113:  /* 1. */
    #####:  114:  ecma_revocable_proxy_object_t *rev_proxy_p = (ecma_revocable_proxy_object_t *) function_obj_p;
        -:  115:
        -:  116:  /* 2. */
    #####:  117:  if (ecma_is_value_null (rev_proxy_p->proxy))
        -:  118:  {
    #####:  119:    return ECMA_VALUE_UNDEFINED;
        -:  120:  }
        -:  121:
        -:  122:  /* 4. */
    #####:  123:  ecma_proxy_object_t *proxy_p = (ecma_proxy_object_t *) ecma_get_object_from_value (rev_proxy_p->proxy);
    #####:  124:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY ((ecma_object_t *) proxy_p));
        -:  125:
        -:  126:  /* 3. */
    #####:  127:  rev_proxy_p->proxy = ECMA_VALUE_NULL;
        -:  128:
        -:  129:  /* 5. */
    #####:  130:  proxy_p->target = ECMA_VALUE_NULL;
        -:  131:
        -:  132:  /* 6. */
    #####:  133:  proxy_p->handler = ECMA_VALUE_NULL;
        -:  134:
        -:  135:  /* 7. */
    #####:  136:  return ECMA_VALUE_UNDEFINED;
        -:  137:} /* ecma_proxy_revoke_cb */
        -:  138:
        -:  139:/**
        -:  140: * Proxy.revocable operation for create a new revocable proxy object
        -:  141: *
        -:  142: * See also:
        -:  143: *         ES2015 26.2.2.1
        -:  144: *
        -:  145: * @return NULL - if the operation fails
        -:  146: *         pointer to the newly created revocable proxy object - otherwise
        -:  147: */
        -:  148:ecma_object_t *
    #####:  149:ecma_proxy_create_revocable (ecma_value_t target, /**< target argument */
        -:  150:                             ecma_value_t handler) /**< handler argument */
        -:  151:{
        -:  152:  /* 1. */
    #####:  153:  ecma_object_t *proxy_p = ecma_proxy_create (target, handler, 0);
        -:  154:
        -:  155:  /* 2. */
    #####:  156:  if (proxy_p == NULL)
        -:  157:  {
    #####:  158:    return proxy_p;
        -:  159:  }
        -:  160:
    #####:  161:  ecma_value_t proxy_value = ecma_make_object_value (proxy_p);
        -:  162:
        -:  163:  /* 3. */
        -:  164:  ecma_object_t *func_obj_p;
    #####:  165:  func_obj_p = ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROXY_REVOKE,
        -:  166:                                              sizeof (ecma_revocable_proxy_object_t));
        -:  167:
        -:  168:  /* 4. */
    #####:  169:  ecma_revocable_proxy_object_t *rev_proxy_p = (ecma_revocable_proxy_object_t *) func_obj_p;
    #####:  170:  rev_proxy_p->proxy = proxy_value;
        -:  171:
        -:  172:  ecma_property_value_t *prop_value_p;
    #####:  173:  ecma_value_t revoker = ecma_make_object_value (func_obj_p);
        -:  174:
        -:  175:  /* 5. */
    #####:  176:  ecma_object_t *obj_p = ecma_create_object (ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE),
        -:  177:                                             0,
        -:  178:                                             ECMA_OBJECT_TYPE_GENERAL);
        -:  179:
        -:  180:  /* 6. */
    #####:  181:  prop_value_p = ecma_create_named_data_property (obj_p,
        -:  182:                                                  ecma_get_magic_string (LIT_MAGIC_STRING_PROXY),
        -:  183:                                                  ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  184:                                                  NULL);
    #####:  185:  prop_value_p->value = proxy_value;
        -:  186:
        -:  187:  /* 7. */
    #####:  188:  prop_value_p = ecma_create_named_data_property (obj_p,
        -:  189:                                                  ecma_get_magic_string (LIT_MAGIC_STRING_REVOKE),
        -:  190:                                                  ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  191:                                                  NULL);
    #####:  192:  prop_value_p->value = revoker;
        -:  193:
    #####:  194:  ecma_deref_object (proxy_p);
    #####:  195:  ecma_deref_object (func_obj_p);
        -:  196:
        -:  197:  /* 8. */
    #####:  198:  return obj_p;
        -:  199:} /* ecma_proxy_create_revocable */
        -:  200:
        -:  201:/**
        -:  202: * Internal find property operation for Proxy object
        -:  203: *
        -:  204: * Note: Returned value must be freed with ecma_free_value.
        -:  205: *
        -:  206: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  207: *         ECMA_VALUE_NOT_FOUND - if the property is not found
        -:  208: *         value of the property - otherwise
        -:  209: */
        -:  210:ecma_value_t
    #####:  211:ecma_proxy_object_find (ecma_object_t *obj_p, /**< proxy object */
        -:  212:                        ecma_string_t *prop_name_p) /**< property name */
        -:  213:{
    #####:  214:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
        -:  215:
    #####:  216:  ecma_value_t has_result = ecma_proxy_object_has (obj_p, prop_name_p);
        -:  217:
    #####:  218:  if (ECMA_IS_VALUE_ERROR (has_result))
        -:  219:  {
    #####:  220:    return has_result;
        -:  221:  }
        -:  222:
    #####:  223:  if (ecma_is_value_false (has_result))
        -:  224:  {
    #####:  225:    return ECMA_VALUE_NOT_FOUND;
        -:  226:  }
        -:  227:
    #####:  228:  return ecma_proxy_object_get (obj_p, prop_name_p, ecma_make_object_value (obj_p));
        -:  229:} /* ecma_proxy_object_find */
        -:  230:
        -:  231:/**
        -:  232: * Helper method for validate the proxy object
        -:  233: *
        -:  234: * @return proxy trap - if the validation is successful
        -:  235: *         ECMA_VALUE_ERROR - otherwise
        -:  236: */
        -:  237:static ecma_value_t
    #####:  238:ecma_validate_proxy_object (ecma_value_t handler, /**< proxy handler */
        -:  239:                            lit_magic_string_id_t magic_id) /**< routine magic id */
        -:  240:{
    #####:  241:  if (ecma_is_value_null (handler))
        -:  242:  {
    #####:  243:    return ecma_raise_type_error (ECMA_ERR_MSG ("Handler cannot be null"));
        -:  244:  }
        -:  245:
    #####:  246:  JERRY_ASSERT (ecma_is_value_object (handler));
        -:  247:
    #####:  248:  return ecma_op_get_method_by_magic_id (handler, magic_id);
        -:  249:} /* ecma_validate_proxy_object */
        -:  250:
        -:  251:/* Interal operations */
        -:  252:
        -:  253:/**
        -:  254: * The Proxy object [[GetPrototypeOf]] internal routine
        -:  255: *
        -:  256: * See also:
        -:  257: *          ECMAScript v6, 9.5.1
        -:  258: *
        -:  259: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  260: *         ECMA_VALUE_NULL or valid object (prototype) otherwise
        -:  261: */
        -:  262:ecma_value_t
    #####:  263:ecma_proxy_object_get_prototype_of (ecma_object_t *obj_p) /**< proxy object */
        -:  264:{
    #####:  265:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####:  266:  ECMA_CHECK_STACK_USAGE ();
        -:  267:
    #####:  268:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:  269:
        -:  270:  /* 1. */
    #####:  271:  ecma_value_t handler = proxy_obj_p->handler;
        -:  272:
        -:  273:  /* 2-5. */
    #####:  274:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_GET_PROTOTYPE_OF_UL);
        -:  275:
        -:  276:  /* 6. */
    #####:  277:  if (ECMA_IS_VALUE_ERROR (trap))
        -:  278:  {
    #####:  279:    return trap;
        -:  280:  }
        -:  281:
    #####:  282:  ecma_value_t target = proxy_obj_p->target;
    #####:  283:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -:  284:
        -:  285:  /* 7. */
    #####:  286:  if (ecma_is_value_undefined (trap))
        -:  287:  {
    #####:  288:    ecma_value_t result = ecma_builtin_object_object_get_prototype_of (target_obj_p);
    #####:  289:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####:  290:    return result;
        -:  291:  }
        -:  292:
    #####:  293:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
        -:  294:
        -:  295:  /* 8. */
    #####:  296:  ecma_value_t handler_proto = ecma_op_function_call (func_obj_p, handler, &target, 1);
        -:  297:
    #####:  298:  ecma_deref_object (func_obj_p);
        -:  299:
        -:  300:  /* 9. */
    #####:  301:  if (ECMA_IS_VALUE_ERROR (handler_proto))
        -:  302:  {
    #####:  303:    return handler_proto;
        -:  304:  }
        -:  305:
        -:  306:  /* 10. */
    #####:  307:  if (!ecma_is_value_object (handler_proto) && !ecma_is_value_null (handler_proto))
        -:  308:  {
    #####:  309:    ecma_free_value (handler_proto);
        -:  310:
    #####:  311:    return ecma_raise_type_error (ECMA_ERR_MSG ("Trap returned neither object nor null"));
        -:  312:  }
        -:  313:
    #####:  314:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -:  315:  {
    #####:  316:    return handler_proto;
        -:  317:  }
        -:  318:
        -:  319:  /* 11. */
    #####:  320:  ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -:  321:
        -:  322:  /* 12. */
    #####:  323:  if (ECMA_IS_VALUE_ERROR (extensible_target))
        -:  324:  {
    #####:  325:    ecma_free_value (handler_proto);
        -:  326:
    #####:  327:    return extensible_target;
        -:  328:  }
        -:  329:
        -:  330:  /* 13. */
    #####:  331:  if (ecma_is_value_true (extensible_target))
        -:  332:  {
    #####:  333:    return handler_proto;
        -:  334:  }
        -:  335:
        -:  336:  /* 14. */
    #####:  337:  ecma_value_t target_proto = ecma_builtin_object_object_get_prototype_of (target_obj_p);
        -:  338:
        -:  339:  /* 15. */
    #####:  340:  if (ECMA_IS_VALUE_ERROR (target_proto))
        -:  341:  {
    #####:  342:    return target_proto;
        -:  343:  }
        -:  344:
    #####:  345:  ecma_value_t ret_value = handler_proto;
        -:  346:
        -:  347:  /* 16. */
    #####:  348:  if (handler_proto != target_proto)
        -:  349:  {
    #####:  350:    ecma_free_value (handler_proto);
        -:  351:
    #####:  352:    ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Proxy target is non-extensible, but the trap did not "
        -:  353:                                                     "return its actual prototype"));
        -:  354:  }
        -:  355:
    #####:  356:  ecma_free_value (target_proto);
        -:  357:
        -:  358:  /* 17. */
    #####:  359:  return ret_value;
        -:  360:} /* ecma_proxy_object_get_prototype_of */
        -:  361:
        -:  362:/**
        -:  363: * The Proxy object [[SetPrototypeOf]] internal routine
        -:  364: *
        -:  365: * See also:
        -:  366: *          ECMAScript v6, 9.5.2
        -:  367: *          ECMAScript v11: 9.5.2
        -:  368: *
        -:  369: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -:  370: *
        -:  371: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  372: *         ECMA_VALUE_{TRUE/FALSE} - depends on whether the new prototype can be set for the given object
        -:  373: */
        -:  374:ecma_value_t
    #####:  375:ecma_proxy_object_set_prototype_of (ecma_object_t *obj_p, /**< proxy object */
        -:  376:                                    ecma_value_t proto) /**< new prototype object */
        -:  377:{
    #####:  378:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####:  379:  ECMA_CHECK_STACK_USAGE ();
        -:  380:
        -:  381:  /* 1. */
    #####:  382:  JERRY_ASSERT (ecma_is_value_object (proto) || ecma_is_value_null (proto));
        -:  383:
    #####:  384:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:  385:
        -:  386:  /* 2. */
    #####:  387:  ecma_value_t handler = proxy_obj_p->handler;
        -:  388:
        -:  389:  /* 3-6. */
    #####:  390:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_SET_PROTOTYPE_OF_UL);
        -:  391:
        -:  392:  /* 7.*/
    #####:  393:  if (ECMA_IS_VALUE_ERROR (trap))
        -:  394:  {
    #####:  395:    return trap;
        -:  396:  }
        -:  397:
    #####:  398:  ecma_value_t target = proxy_obj_p->target;
    #####:  399:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -:  400:
        -:  401:  /* 8. */
    #####:  402:  if (ecma_is_value_undefined (trap))
        -:  403:  {
    #####:  404:    if (ECMA_OBJECT_IS_PROXY (target_obj_p))
        -:  405:    {
    #####:  406:      ecma_value_t result = ecma_proxy_object_set_prototype_of (target_obj_p, proto);
    #####:  407:      JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####:  408:      return result;
        -:  409:    }
        -:  410:
    #####:  411:    ecma_value_t result = ecma_op_ordinary_object_set_prototype_of (target_obj_p, proto);
    #####:  412:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####:  413:    return result;
        -:  414:  }
        -:  415:
    #####:  416:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####:  417:  ecma_value_t args[] = { target, proto };
        -:  418:
        -:  419:  /* 9. */
    #####:  420:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 2);
        -:  421:
    #####:  422:  ecma_deref_object (func_obj_p);
        -:  423:
        -:  424:  /* 10. */
    #####:  425:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -:  426:  {
    #####:  427:    return trap_result;
        -:  428:  }
        -:  429:
    #####:  430:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -:  431:
    #####:  432:  ecma_free_value (trap_result);
        -:  433:
        -:  434:  /* ES11: 9 */
    #####:  435:  if (!boolean_trap_result)
        -:  436:  {
    #####:  437:    return ecma_make_boolean_value (false);
        -:  438:  }
        -:  439:
    #####:  440:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -:  441:  {
    #####:  442:    return ecma_make_boolean_value (boolean_trap_result);
        -:  443:  }
        -:  444:
        -:  445:  /* 11. */
    #####:  446:  ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -:  447:
        -:  448:  /* 12. */
    #####:  449:  if (ECMA_IS_VALUE_ERROR (extensible_target))
        -:  450:  {
    #####:  451:    return extensible_target;
        -:  452:  }
        -:  453:
        -:  454:  /* 13. */
    #####:  455:  if (ecma_is_value_true (extensible_target))
        -:  456:  {
    #####:  457:    return ecma_make_boolean_value (boolean_trap_result);
        -:  458:  }
        -:  459:
        -:  460:  /* 14. */
    #####:  461:  ecma_value_t target_proto = ecma_builtin_object_object_get_prototype_of (target_obj_p);
        -:  462:
        -:  463:  /* 15. */
    #####:  464:  if (ECMA_IS_VALUE_ERROR (target_proto))
        -:  465:  {
    #####:  466:    return target_proto;
        -:  467:  }
        -:  468:
    #####:  469:  ecma_value_t ret_value = ecma_make_boolean_value (boolean_trap_result);
        -:  470:
        -:  471:  /* 16. */
    #####:  472:  if (boolean_trap_result && (target_proto != proto))
        -:  473:  {
    #####:  474:    ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Target object is non-extensible and trap "
        -:  475:                                                     "returned different prototype"));
        -:  476:  }
        -:  477:
    #####:  478:  ecma_free_value (target_proto);
        -:  479:
        -:  480:  /* 17. */
    #####:  481:  return ret_value;
        -:  482:} /* ecma_proxy_object_set_prototype_of */
        -:  483:
        -:  484:/**
        -:  485: * The Proxy object [[isExtensible]] internal routine
        -:  486: *
        -:  487: * See also:
        -:  488: *          ECMAScript v6, 9.5.3
        -:  489: *
        -:  490: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -:  491: *
        -:  492: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  493: *         ECMA_VALUE_{TRUE/FALSE} - depends on whether the object is extensible
        -:  494: */
        -:  495:ecma_value_t
    #####:  496:ecma_proxy_object_is_extensible (ecma_object_t *obj_p) /**< proxy object */
        -:  497:{
    #####:  498:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####:  499:  ECMA_CHECK_STACK_USAGE ();
        -:  500:
    #####:  501:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:  502:
        -:  503:  /* 1. */
    #####:  504:  ecma_value_t handler = proxy_obj_p->handler;
        -:  505:
        -:  506:  /* 2-5. */
    #####:  507:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_IS_EXTENSIBLE);
        -:  508:
        -:  509:  /* 6. */
    #####:  510:  if (ECMA_IS_VALUE_ERROR (trap))
        -:  511:  {
    #####:  512:    return trap;
        -:  513:  }
        -:  514:
    #####:  515:  ecma_value_t target = proxy_obj_p->target;
    #####:  516:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -:  517:
        -:  518:  /* 7. */
    #####:  519:  if (ecma_is_value_undefined (trap))
        -:  520:  {
    #####:  521:    ecma_value_t result = ecma_builtin_object_object_is_extensible (target_obj_p);
    #####:  522:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####:  523:    return result;
        -:  524:  }
        -:  525:
    #####:  526:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
        -:  527:
        -:  528:  /* 8. */
    #####:  529:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, &target, 1);
        -:  530:
    #####:  531:  ecma_deref_object (func_obj_p);
        -:  532:
        -:  533:  /* 9. */
    #####:  534:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -:  535:  {
    #####:  536:    return trap_result;
        -:  537:  }
        -:  538:
    #####:  539:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -:  540:
    #####:  541:  ecma_free_value (trap_result);
        -:  542:
    #####:  543:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -:  544:  {
    #####:  545:    return ecma_make_boolean_value (boolean_trap_result);
        -:  546:  }
        -:  547:
        -:  548:  bool target_result;
        -:  549:
        -:  550:  /* 10. */
    #####:  551:  if (ECMA_OBJECT_IS_PROXY (target_obj_p))
        -:  552:  {
    #####:  553:    ecma_value_t proxy_is_ext = ecma_proxy_object_is_extensible (target_obj_p);
        -:  554:
    #####:  555:    if (ECMA_IS_VALUE_ERROR (proxy_is_ext))
        -:  556:    {
    #####:  557:      return proxy_is_ext;
        -:  558:    }
        -:  559:
    #####:  560:    target_result = ecma_is_value_true (proxy_is_ext);
        -:  561:  }
        -:  562:  else
        -:  563:  {
    #####:  564:    target_result = ecma_op_ordinary_object_is_extensible (target_obj_p);
        -:  565:  }
        -:  566:
        -:  567:  /* 12. */
    #####:  568:  if (boolean_trap_result != target_result)
        -:  569:  {
    #####:  570:    return ecma_raise_type_error (ECMA_ERR_MSG ("Trap result does not reflect extensibility of Proxy target"));
        -:  571:  }
        -:  572:
    #####:  573:  return ecma_make_boolean_value (boolean_trap_result);
        -:  574:} /* ecma_proxy_object_is_extensible */
        -:  575:
        -:  576:/**
        -:  577: * The Proxy object [[PreventExtensions]] internal routine
        -:  578: *
        -:  579: * See also:
        -:  580: *          ECMAScript v6, 9.5.4
        -:  581: *
        -:  582: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -:  583: *
        -:  584: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  585: *         ECMA_VALUE_{TRUE/FALSE} - depends on whether the object can be set as inextensible
        -:  586: */
        -:  587:ecma_value_t
    #####:  588:ecma_proxy_object_prevent_extensions (ecma_object_t *obj_p) /**< proxy object */
        -:  589:{
    #####:  590:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####:  591:  ECMA_CHECK_STACK_USAGE ();
        -:  592:
    #####:  593:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:  594:
        -:  595:  /* 1. */
    #####:  596:  ecma_value_t handler = proxy_obj_p->handler;
        -:  597:
        -:  598:  /* 2-5. */
    #####:  599:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_PREVENT_EXTENSIONS_UL);
        -:  600:
        -:  601:  /* 6. */
    #####:  602:  if (ECMA_IS_VALUE_ERROR (trap))
        -:  603:  {
    #####:  604:    return trap;
        -:  605:  }
        -:  606:
    #####:  607:  ecma_value_t target = proxy_obj_p->target;
    #####:  608:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -:  609:
        -:  610:  /* 7. */
    #####:  611:  if (ecma_is_value_undefined (trap))
        -:  612:  {
    #####:  613:    ecma_value_t ret_value = ecma_builtin_object_object_prevent_extensions (target_obj_p);
        -:  614:
    #####:  615:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -:  616:    {
    #####:  617:      return ret_value;
        -:  618:    }
        -:  619:
    #####:  620:    ecma_deref_object (target_obj_p);
        -:  621:
    #####:  622:    return ECMA_VALUE_TRUE;
        -:  623:  }
        -:  624:
    #####:  625:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
        -:  626:
        -:  627:  /* 8. */
    #####:  628:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, &target, 1);
        -:  629:
    #####:  630:  ecma_deref_object (func_obj_p);
        -:  631:
        -:  632:  /* 9. */
    #####:  633:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -:  634:  {
    #####:  635:    return trap_result;
        -:  636:  }
        -:  637:
    #####:  638:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -:  639:
    #####:  640:  ecma_free_value (trap_result);
        -:  641:
        -:  642:  /* 10. */
    #####:  643:  if (boolean_trap_result
    #####:  644:      && !(obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION))
        -:  645:  {
    #####:  646:    ecma_value_t target_is_ext = ecma_builtin_object_object_is_extensible (target_obj_p);
        -:  647:
    #####:  648:    if (ECMA_IS_VALUE_ERROR (target_is_ext))
        -:  649:    {
    #####:  650:      return target_is_ext;
        -:  651:    }
        -:  652:
    #####:  653:    if (ecma_is_value_true (target_is_ext))
        -:  654:    {
    #####:  655:      return ecma_raise_type_error (ECMA_ERR_MSG ("Trap result does not reflect inextensibility of Proxy target"));
        -:  656:    }
        -:  657:  }
        -:  658:
        -:  659:  /* 11. */
    #####:  660:  return ecma_make_boolean_value (boolean_trap_result);
        -:  661:} /* ecma_proxy_object_prevent_extensions */
        -:  662:
        -:  663:/**
        -:  664: * The Proxy object [[GetOwnProperty]] internal routine
        -:  665: *
        -:  666: * See also:
        -:  667: *          ECMAScript v6, 9.5.5
        -:  668: *
        -:  669: * Note: - Returned value is always a simple value so freeing it is unnecessary.
        -:  670: *       - If the operation does not fail, freeing the filled property descriptor is the caller's responsibility
        -:  671: *
        -:  672: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  673: *         ECMA_VALUE_{TRUE_FALSE} - depends on whether object has property with the given name
        -:  674: */
        -:  675:ecma_value_t
    #####:  676:ecma_proxy_object_get_own_property_descriptor (ecma_object_t *obj_p, /**< proxy object */
        -:  677:                                               ecma_string_t *prop_name_p, /**< property name */
        -:  678:                                               ecma_property_descriptor_t *prop_desc_p) /**< [out] property
        -:  679:                                                                                         *   descriptor */
        -:  680:{
    #####:  681:  ECMA_CHECK_STACK_USAGE ();
        -:  682:
    #####:  683:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:  684:
        -:  685:  /* 2. */
    #####:  686:  ecma_value_t handler = proxy_obj_p->handler;
        -:  687:
        -:  688:  /* 3-6. */
    #####:  689:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_GET_OWN_PROPERTY_DESCRIPTOR_UL);
        -:  690:
    #####:  691:  ecma_value_t target = proxy_obj_p->target;
        -:  692:
        -:  693:  /* 7. */
    #####:  694:  if (ECMA_IS_VALUE_ERROR (trap))
        -:  695:  {
    #####:  696:    return trap;
        -:  697:  }
        -:  698:
    #####:  699:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -:  700:
        -:  701:  /* 8. */
    #####:  702:  if (ecma_is_value_undefined (trap))
        -:  703:  {
    #####:  704:    ecma_value_t result = ecma_op_object_get_own_property_descriptor (target_obj_p, prop_name_p, prop_desc_p);
    #####:  705:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####:  706:    return result;
        -:  707:  }
        -:  708:
    #####:  709:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####:  710:  ecma_value_t prop_value = ecma_make_prop_name_value (prop_name_p);
    #####:  711:  ecma_value_t args[] = { target, prop_value };
        -:  712:
        -:  713:  /* 9. */
    #####:  714:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 2);
    #####:  715:  ecma_deref_object (func_obj_p);
        -:  716:
        -:  717:  /* 10. */
    #####:  718:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -:  719:  {
    #####:  720:    return trap_result;
        -:  721:  }
        -:  722:
        -:  723:  /* 11. */
    #####:  724:  if (!ecma_is_value_object (trap_result) && !ecma_is_value_undefined (trap_result))
        -:  725:  {
    #####:  726:    ecma_free_value (trap_result);
    #####:  727:    return ecma_raise_type_error (ECMA_ERR_MSG ("Trap is neither an object nor undefined"));
        -:  728:  }
        -:  729:
    #####:  730:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -:  731:  {
    #####:  732:    if (ecma_is_value_undefined (trap_result))
        -:  733:    {
    #####:  734:      return ECMA_VALUE_FALSE;
        -:  735:    }
        -:  736:
    #####:  737:    ecma_value_t result_val = ecma_op_to_property_descriptor (trap_result, prop_desc_p);
    #####:  738:    ecma_free_value (trap_result);
        -:  739:
    #####:  740:    if (ECMA_IS_VALUE_ERROR (result_val))
        -:  741:    {
    #####:  742:      return result_val;
        -:  743:    }
        -:  744:
    #####:  745:    ecma_op_to_complete_property_descriptor (prop_desc_p);
    #####:  746:    return ECMA_VALUE_TRUE;
        -:  747:  }
        -:  748:
        -:  749:  /* 12. */
    #####:  750:  ecma_property_descriptor_t target_desc;
    #####:  751:  ecma_value_t target_status = ecma_op_object_get_own_property_descriptor (target_obj_p, prop_name_p, &target_desc);
        -:  752:
        -:  753:  /* 13. */
    #####:  754:  if (ECMA_IS_VALUE_ERROR (target_status))
        -:  755:  {
    #####:  756:    ecma_free_value (trap_result);
    #####:  757:    return target_status;
        -:  758:  }
        -:  759:
        -:  760:  /* 14. */
    #####:  761:  if (ecma_is_value_undefined (trap_result))
        -:  762:  {
        -:  763:    /* .a */
    #####:  764:    if (ecma_is_value_false (target_status))
        -:  765:    {
    #####:  766:      return ECMA_VALUE_FALSE;
        -:  767:    }
        -:  768:    /* .b */
    #####:  769:    if (!(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE))
        -:  770:    {
    #####:  771:      ecma_free_property_descriptor (&target_desc);
    #####:  772:      return ecma_raise_type_error (ECMA_ERR_MSG ("Given property is a non-configurable"
        -:  773:                                                  " data property on the proxy target"));
        -:  774:    }
        -:  775:
        -:  776:    /* .c */
    #####:  777:    ecma_free_property_descriptor (&target_desc);
    #####:  778:    ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -:  779:
        -:  780:    /* .d */
    #####:  781:    if (ECMA_IS_VALUE_ERROR (extensible_target))
        -:  782:    {
    #####:  783:      return extensible_target;
        -:  784:    }
        -:  785:
        -:  786:    /* .e */
    #####:  787:    JERRY_ASSERT (ecma_is_value_boolean (extensible_target));
        -:  788:
        -:  789:    /* .f */
    #####:  790:    if (ecma_is_value_false (extensible_target))
        -:  791:    {
    #####:  792:      return ecma_raise_type_error (ECMA_ERR_MSG ("Target not extensible"));
        -:  793:    }
        -:  794:
        -:  795:    /* .g */
    #####:  796:    return ECMA_VALUE_FALSE;
        -:  797:  }
        -:  798:
        -:  799:  /* 15. */
    #####:  800:  ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -:  801:
        -:  802:  /* 16. */
    #####:  803:  if (ECMA_IS_VALUE_ERROR (extensible_target))
        -:  804:  {
    #####:  805:    if (ecma_is_value_true (target_status))
        -:  806:    {
    #####:  807:      ecma_free_property_descriptor (&target_desc);
        -:  808:    }
    #####:  809:    ecma_free_value (trap_result);
    #####:  810:    return extensible_target;
        -:  811:  }
        -:  812:
        -:  813:  /* 17, 19 */
    #####:  814:  ecma_value_t result_val = ecma_op_to_property_descriptor (trap_result, prop_desc_p);
        -:  815:
    #####:  816:  ecma_op_to_complete_property_descriptor (prop_desc_p);
    #####:  817:  ecma_free_value (trap_result);
        -:  818:
        -:  819:  /* 18. */
    #####:  820:  if (ECMA_IS_VALUE_ERROR (result_val))
        -:  821:  {
    #####:  822:    if (ecma_is_value_true (target_status))
        -:  823:    {
    #####:  824:      ecma_free_property_descriptor (&target_desc);
        -:  825:    }
    #####:  826:    return result_val;
        -:  827:  }
        -:  828:
        -:  829:  /* 20. */
    #####:  830:  bool is_extensible = ecma_is_value_true (extensible_target);
        -:  831:
    #####:  832:  bool is_valid = ecma_op_is_compatible_property_descriptor (prop_desc_p,
    #####:  833:                                                             (ecma_is_value_true (target_status) ? &target_desc : NULL),
        -:  834:                                                             is_extensible);
        -:  835:
    #####:  836:  bool target_has_desc = ecma_is_value_true (target_status);
    #####:  837:  bool target_is_writable = (target_desc.flags & JERRY_PROP_IS_WRITABLE) ;
    #####:  838:  bool target_is_configurable = false;
        -:  839:
    #####:  840:  if (target_has_desc)
        -:  841:  {
    #####:  842:    target_is_configurable = ((target_desc.flags & JERRY_PROP_IS_CONFIGURABLE) != 0);
    #####:  843:    ecma_free_property_descriptor (&target_desc);
        -:  844:  }
        -:  845:
        -:  846:  /* 21. */
    #####:  847:  if (!is_valid)
        -:  848:  {
    #####:  849:    ecma_free_property_descriptor (prop_desc_p);
    #####:  850:    return ecma_raise_type_error (ECMA_ERR_MSG ("The two descriptors are incompatible"));
        -:  851:  }
        -:  852:
        -:  853:  /* 22. */
    #####:  854:  else if (!(prop_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE))
        -:  855:  {
    #####:  856:    const uint16_t mask = (JERRY_PROP_IS_WRITABLE_DEFINED | JERRY_PROP_IS_WRITABLE);
        -:  857:
    #####:  858:    if (!target_has_desc
    #####:  859:        || target_is_configurable
    #####:  860:        || ((prop_desc_p->flags & mask) == JERRY_PROP_IS_WRITABLE_DEFINED
    #####:  861:            && target_is_writable))
        -:  862:    {
    #####:  863:      ecma_free_property_descriptor (prop_desc_p);
    #####:  864:      return ecma_raise_type_error (ECMA_ERR_MSG ("The two descriptors are incompatible"));
        -:  865:    }
        -:  866:  }
    #####:  867:  return ECMA_VALUE_TRUE;
        -:  868:} /* ecma_proxy_object_get_own_property_descriptor */
        -:  869:
        -:  870:/**
        -:  871: * The Proxy object [[DefineOwnProperty]] internal routine
        -:  872: *
        -:  873: * See also:
        -:  874: *          ECMAScript v6, 9.5.6
        -:  875: *
        -:  876: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -:  877: *
        -:  878: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  879: *         ECMA_VALUE_{TRUE_FALSE} - depends on whether the property can be defined for the given object
        -:  880: */
        -:  881:ecma_value_t
    #####:  882:ecma_proxy_object_define_own_property (ecma_object_t *obj_p, /**< proxy object */
        -:  883:                                       ecma_string_t *prop_name_p, /**< property name */
        -:  884:                                       const ecma_property_descriptor_t *prop_desc_p) /**< property descriptor */
        -:  885:{
    #####:  886:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####:  887:  ECMA_CHECK_STACK_USAGE ();
        -:  888:
    #####:  889:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:  890:
        -:  891:  /* 2. */
    #####:  892:  ecma_value_t handler = proxy_obj_p->handler;
        -:  893:
        -:  894:  /* 3-6. */
    #####:  895:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_DEFINE_PROPERTY_UL);
        -:  896:
        -:  897:  /* 7. */
    #####:  898:  if (ECMA_IS_VALUE_ERROR (trap))
        -:  899:  {
    #####:  900:    return trap;
        -:  901:  }
        -:  902:
    #####:  903:  ecma_value_t target = proxy_obj_p->target;
    #####:  904:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -:  905:
        -:  906:  /* 8. */
    #####:  907:  if (ecma_is_value_undefined (trap))
        -:  908:  {
    #####:  909:    ecma_value_t result = ecma_op_object_define_own_property (target_obj_p, prop_name_p, prop_desc_p);
    #####:  910:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####:  911:    return result;
        -:  912:  }
        -:  913:
        -:  914:  /* 9. */
    #####:  915:  ecma_object_t *desc_obj = ecma_op_from_property_descriptor (prop_desc_p);
        -:  916:
    #####:  917:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####:  918:  ecma_value_t prop_value = ecma_make_prop_name_value (prop_name_p);
    #####:  919:  ecma_value_t desc_obj_value = ecma_make_object_value (desc_obj);
    #####:  920:  ecma_value_t args[] = {target, prop_value, desc_obj_value};
        -:  921:
        -:  922:  /* 10. */
    #####:  923:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 3);
        -:  924:
    #####:  925:  ecma_deref_object (func_obj_p);
    #####:  926:  ecma_deref_object (desc_obj);
        -:  927:
        -:  928:  /* 11. */
    #####:  929:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -:  930:  {
    #####:  931:    return trap_result;
        -:  932:  }
        -:  933:
    #####:  934:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -:  935:
    #####:  936:  ecma_free_value (trap_result);
        -:  937:
        -:  938:  /* 12. */
    #####:  939:  if (!boolean_trap_result)
        -:  940:  {
    #####:  941:    return ECMA_VALUE_FALSE;
        -:  942:  }
        -:  943:
    #####:  944:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -:  945:  {
    #####:  946:    return ECMA_VALUE_TRUE;
        -:  947:  }
        -:  948:
        -:  949:  /* 13. */
    #####:  950:  ecma_property_descriptor_t target_desc;
        -:  951:
    #####:  952:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (target_obj_p, prop_name_p, &target_desc);
        -:  953:
        -:  954:  /* 14. */
    #####:  955:  if (ECMA_IS_VALUE_ERROR (status))
        -:  956:  {
    #####:  957:    return status;
        -:  958:  }
        -:  959:
    #####:  960:  bool target_prop_found = ecma_is_value_true (status);
        -:  961:
        -:  962:  /* 15. */
    #####:  963:  ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -:  964:
    #####:  965:  bool is_target_ext = ecma_is_value_true (extensible_target);
        -:  966:
        -:  967:  /* 16. */
    #####:  968:  if (ECMA_IS_VALUE_ERROR (extensible_target))
        -:  969:  {
    #####:  970:    if (target_prop_found)
        -:  971:    {
    #####:  972:      ecma_free_property_descriptor (&target_desc);
        -:  973:    }
        -:  974:
    #####:  975:    return extensible_target;
        -:  976:  }
        -:  977:
        -:  978:  /* 17. */
    #####:  979:  bool setting_config_false = ((prop_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED)
    #####:  980:                                && !(prop_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE));
        -:  981:
        -:  982:  /* 19. */
    #####:  983:  if (!target_prop_found)
        -:  984:  {
    #####:  985:    if (!is_target_ext)
        -:  986:    {
    #####:  987:      return ecma_raise_type_error (ECMA_ERR_MSG ("Trap returned truish for adding property "
        -:  988:                                                  "to the non-extensible target"));
        -:  989:    }
        -:  990:
    #####:  991:    if (setting_config_false)
        -:  992:    {
    #####:  993:      return ecma_raise_type_error (ECMA_ERR_MSG ("Trap returned truish for defining non-configurable property "
        -:  994:                                                  "which is non-existent in the target"));
        -:  995:    }
        -:  996:  }
        -:  997:  /* 20. */
        -:  998:  else
        -:  999:  {
    #####: 1000:    ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -: 1001:
    #####: 1002:    if (!ecma_op_is_compatible_property_descriptor (prop_desc_p, &target_desc, is_target_ext))
        -: 1003:    {
    #####: 1004:      ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Trap returned truish for adding property that is "
        -: 1005:                                                       "incompatible with the existing property in the target"));
        -: 1006:    }
    #####: 1007:    else if (setting_config_false && (target_desc.flags & JERRY_PROP_IS_CONFIGURABLE))
        -: 1008:    {
    #####: 1009:      ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Trap returned truish for defining non-configurable property "
        -: 1010:                                                       "which is configurable in the target"));
        -: 1011:    }
        -: 1012:    /* ES11: 16.c */
    #####: 1013:    else if ((target_desc.flags & (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE_DEFINED)) != 0
    #####: 1014:             && (prop_desc_p->flags & (JERRY_PROP_IS_WRITABLE_DEFINED | JERRY_PROP_IS_WRITABLE))
        -: 1015:                 == JERRY_PROP_IS_WRITABLE_DEFINED
    #####: 1016:             && (target_desc.flags & (JERRY_PROP_IS_WRITABLE | JERRY_PROP_IS_CONFIGURABLE)) == JERRY_PROP_IS_WRITABLE)
        -: 1017:
        -: 1018:    {
    #####: 1019:      ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Trap returned truish for defining non-configurable property "
        -: 1020:                                                       "which is configurable in the target"));
        -: 1021:    }
        -: 1022:
    #####: 1023:    ecma_free_property_descriptor (&target_desc);
        -: 1024:
    #####: 1025:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -: 1026:    {
    #####: 1027:      return ret_value;
        -: 1028:    }
        -: 1029:  }
        -: 1030:
    #####: 1031:  return ECMA_VALUE_TRUE;
        -: 1032:} /* ecma_proxy_object_define_own_property */
        -: 1033:
        -: 1034:/**
        -: 1035: * The Proxy object [[HasProperty]] internal routine
        -: 1036: *
        -: 1037: * See also:
        -: 1038: *          ECMAScript v6, 9.5.7
        -: 1039: *
        -: 1040: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -: 1041: *
        -: 1042: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 1043: *         ECMA_VALUE_{TRUE_FALSE} - depends on whether the property is found
        -: 1044: */
        -: 1045:ecma_value_t
    #####: 1046:ecma_proxy_object_has (ecma_object_t *obj_p, /**< proxy object */
        -: 1047:                       ecma_string_t *prop_name_p) /**< property name */
        -: 1048:{
    #####: 1049:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####: 1050:  ECMA_CHECK_STACK_USAGE ();
        -: 1051:
    #####: 1052:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1053:
        -: 1054:  /* 2. */
    #####: 1055:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1056:
        -: 1057:  /* 3-6. */
    #####: 1058:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_HAS);
        -: 1059:
        -: 1060:  /* 7. */
    #####: 1061:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1062:  {
    #####: 1063:    return trap;
        -: 1064:  }
        -: 1065:
    #####: 1066:  ecma_value_t target = proxy_obj_p->target;
    #####: 1067:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -: 1068:
        -: 1069:  /* 8. */
    #####: 1070:  if (ecma_is_value_undefined (trap))
        -: 1071:  {
    #####: 1072:    ecma_value_t result = ecma_op_object_has_property (target_obj_p, prop_name_p);
    #####: 1073:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1074:    return result;
        -: 1075:  }
        -: 1076:
    #####: 1077:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####: 1078:  ecma_value_t prop_value = ecma_make_prop_name_value (prop_name_p);
    #####: 1079:  ecma_value_t args[] = {target, prop_value};
        -: 1080:
        -: 1081:  /* 9. */
    #####: 1082:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 2);
        -: 1083:
    #####: 1084:  ecma_deref_object (func_obj_p);
        -: 1085:
        -: 1086:  /* 10. */
    #####: 1087:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -: 1088:  {
    #####: 1089:    return trap_result;
        -: 1090:  }
        -: 1091:
    #####: 1092:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -: 1093:
    #####: 1094:  ecma_free_value (trap_result);
        -: 1095:
        -: 1096:  /* 11. */
    #####: 1097:  if (!boolean_trap_result
    #####: 1098:      && !(obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION))
        -: 1099:  {
    #####: 1100:    ecma_property_descriptor_t target_desc;
        -: 1101:
    #####: 1102:    ecma_value_t status = ecma_op_object_get_own_property_descriptor (target_obj_p, prop_name_p, &target_desc);
        -: 1103:
    #####: 1104:    if (ECMA_IS_VALUE_ERROR (status))
        -: 1105:    {
    #####: 1106:      return status;
        -: 1107:    }
        -: 1108:
    #####: 1109:    if (ecma_is_value_true (status))
        -: 1110:    {
    #####: 1111:      bool prop_is_configurable = target_desc.flags & JERRY_PROP_IS_CONFIGURABLE;
        -: 1112:
    #####: 1113:      ecma_free_property_descriptor (&target_desc);
        -: 1114:
    #####: 1115:      if (!prop_is_configurable)
        -: 1116:      {
    #####: 1117:        return ecma_raise_type_error (ECMA_ERR_MSG ("Trap returned falsish for property which exists "
        -: 1118:                                                    "in the proxy target as non-configurable"));
        -: 1119:      }
        -: 1120:
    #####: 1121:      ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -: 1122:
    #####: 1123:      if (ECMA_IS_VALUE_ERROR (extensible_target))
        -: 1124:      {
    #####: 1125:        return extensible_target;
        -: 1126:      }
        -: 1127:
    #####: 1128:      if (ecma_is_value_false (extensible_target))
        -: 1129:      {
    #####: 1130:        return ecma_raise_type_error (ECMA_ERR_MSG ("Trap returned falsish for property but "
        -: 1131:                                                    "the proxy target is not extensible"));
        -: 1132:      }
        -: 1133:    }
        -: 1134:  }
        -: 1135:
        -: 1136:  /* 12. */
    #####: 1137:  return ecma_make_boolean_value (boolean_trap_result);
        -: 1138:} /* ecma_proxy_object_has */
        -: 1139:
        -: 1140:/**
        -: 1141: * The Proxy object [[Get]] internal routine
        -: 1142: *
        -: 1143: * See also:
        -: 1144: *          ECMAScript v6, 9.5.8
        -: 1145: *
        -: 1146: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -: 1147: *
        -: 1148: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 1149: *         value of the given nameddata property or the result of the getter function call - otherwise
        -: 1150: */
        -: 1151:ecma_value_t
    #####: 1152:ecma_proxy_object_get (ecma_object_t *obj_p, /**< proxy object */
        -: 1153:                       ecma_string_t *prop_name_p, /**< property name */
        -: 1154:                       ecma_value_t receiver) /**< receiver to invoke getter function */
        -: 1155:{
    #####: 1156:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####: 1157:  ECMA_CHECK_STACK_USAGE ();
        -: 1158:
    #####: 1159:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1160:
        -: 1161:  /* 2. */
    #####: 1162:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1163:
        -: 1164:  /* 3-6. */
    #####: 1165:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_GET);
        -: 1166:
        -: 1167:  /* 7. */
    #####: 1168:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1169:  {
    #####: 1170:    return trap;
        -: 1171:  }
        -: 1172:
        -: 1173:  /* 8. */
    #####: 1174:  if (ecma_is_value_undefined (trap))
        -: 1175:  {
    #####: 1176:    ecma_object_t *target_obj_p = ecma_get_object_from_value (proxy_obj_p->target);
    #####: 1177:    ecma_value_t result = ecma_op_object_get_with_receiver (target_obj_p, prop_name_p, receiver);
    #####: 1178:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1179:    return result;
        -: 1180:  }
        -: 1181:
    #####: 1182:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####: 1183:  ecma_value_t prop_value = ecma_make_prop_name_value (prop_name_p);
    #####: 1184:  ecma_value_t args[] = { proxy_obj_p->target, prop_value, receiver };
        -: 1185:
        -: 1186:  /* 9. */
    #####: 1187:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 3);
        -: 1188:
    #####: 1189:  ecma_deref_object (func_obj_p);
        -: 1190:
        -: 1191:  /* 10. */
    #####: 1192:  if (ECMA_IS_VALUE_ERROR (trap_result)
    #####: 1193:      || (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION))
        -: 1194:  {
    #####: 1195:    return trap_result;
        -: 1196:  }
        -: 1197:
        -: 1198:  /* 11. */
    #####: 1199:  ecma_property_descriptor_t target_desc;
    #####: 1200:  ecma_value_t status = ecma_op_get_own_property_descriptor (proxy_obj_p->target, prop_name_p, &target_desc);
        -: 1201:
        -: 1202:  /* 12. */
    #####: 1203:  if (ECMA_IS_VALUE_ERROR (status))
        -: 1204:  {
    #####: 1205:    ecma_free_value (trap_result);
    #####: 1206:    return status;
        -: 1207:  }
        -: 1208:
        -: 1209:  /* 13. */
    #####: 1210:  if (ecma_is_value_true (status))
        -: 1211:  {
    #####: 1212:    ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -: 1213:
    #####: 1214:    if ((target_desc.flags & JERRY_PROP_IS_VALUE_DEFINED)
    #####: 1215:        && !(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE)
    #####: 1216:        && !(target_desc.flags & JERRY_PROP_IS_WRITABLE)
    #####: 1217:        && !ecma_op_same_value (trap_result, target_desc.value))
        -: 1218:    {
    #####: 1219:      ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Incorrect value is returned by a Proxy 'get' trap"));
        -: 1220:    }
    #####: 1221:    else if (!(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE)
    #####: 1222:             && (target_desc.flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED))
    #####: 1223:             && target_desc.get_p == NULL
    #####: 1224:             && !ecma_is_value_undefined (trap_result))
        -: 1225:    {
    #####: 1226:      ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Property of a Proxy is non-configurable and "
        -: 1227:                                                       "does not have a getter function"));
        -: 1228:    }
        -: 1229:
    #####: 1230:    ecma_free_property_descriptor (&target_desc);
        -: 1231:
    #####: 1232:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -: 1233:    {
    #####: 1234:      ecma_free_value (trap_result);
        -: 1235:
    #####: 1236:      return ret_value;
        -: 1237:    }
        -: 1238:  }
        -: 1239:
        -: 1240:  /* 14. */
    #####: 1241:  return trap_result;
        -: 1242:} /* ecma_proxy_object_get */
        -: 1243:
        -: 1244:/**
        -: 1245: * The Proxy object [[Set]] internal routine
        -: 1246: *
        -: 1247: * See also:
        -: 1248: *          ECMAScript v6, 9.5.9
        -: 1249: *
        -: 1250: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -: 1251: *
        -: 1252: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 1253: *         ECMA_VALUE_{TRUE/FALSE} - depends on whether the propety can be set to the given object
        -: 1254: */
        -: 1255:ecma_value_t
    #####: 1256:ecma_proxy_object_set (ecma_object_t *obj_p, /**< proxy object */
        -: 1257:                       ecma_string_t *prop_name_p, /**< property name */
        -: 1258:                       ecma_value_t value, /**< value to set */
        -: 1259:                       ecma_value_t receiver, /**< receiver to invoke setter function */
        -: 1260:                       bool is_strict) /**< indicate strict mode */
        -: 1261:{
    #####: 1262:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####: 1263:  ECMA_CHECK_STACK_USAGE ();
        -: 1264:
    #####: 1265:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1266:
        -: 1267:  /* 2. */
    #####: 1268:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1269:
        -: 1270:  /* 3-6. */
    #####: 1271:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_SET);
        -: 1272:
        -: 1273:  /* 7. */
    #####: 1274:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1275:  {
    #####: 1276:    return trap;
        -: 1277:  }
        -: 1278:
    #####: 1279:  ecma_value_t target = proxy_obj_p->target;
    #####: 1280:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -: 1281:
        -: 1282:  /* 8. */
    #####: 1283:  if (ecma_is_value_undefined (trap))
        -: 1284:  {
    #####: 1285:    ecma_value_t result = ecma_op_object_put_with_receiver (target_obj_p, prop_name_p, value, receiver, is_strict);
    #####: 1286:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1287:    return result;
        -: 1288:  }
        -: 1289:
    #####: 1290:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####: 1291:  ecma_value_t prop_name_value = ecma_make_prop_name_value (prop_name_p);
    #####: 1292:  ecma_value_t args[] = { target, prop_name_value, value, receiver };
        -: 1293:
        -: 1294:  /* 9. */
    #####: 1295:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 4);
        -: 1296:
    #####: 1297:  ecma_deref_object (func_obj_p);
        -: 1298:
        -: 1299:  /* 10. */
    #####: 1300:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -: 1301:  {
    #####: 1302:    return trap_result;
        -: 1303:  }
        -: 1304:
    #####: 1305:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -: 1306:
    #####: 1307:  ecma_free_value (trap_result);
        -: 1308:
        -: 1309:  /* 11. */
    #####: 1310:  if (!boolean_trap_result)
        -: 1311:  {
    #####: 1312:    if (is_strict)
        -: 1313:    {
    #####: 1314:      return ecma_raise_type_error (ECMA_ERR_MSG ("Proxy trap returned falsish"));
        -: 1315:    }
        -: 1316:
    #####: 1317:    return ECMA_VALUE_FALSE;
        -: 1318:  }
        -: 1319:
    #####: 1320:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -: 1321:  {
    #####: 1322:    return ECMA_VALUE_TRUE;
        -: 1323:  }
        -: 1324:
        -: 1325:  /* 12. */
    #####: 1326:  ecma_property_descriptor_t target_desc;
        -: 1327:
    #####: 1328:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (target_obj_p, prop_name_p, &target_desc);
        -: 1329:
        -: 1330:  /* 13. */
    #####: 1331:  if (ECMA_IS_VALUE_ERROR (status))
        -: 1332:  {
    #####: 1333:    return status;
        -: 1334:  }
        -: 1335:
        -: 1336:  /* 14. */
    #####: 1337:  if (ecma_is_value_true (status))
        -: 1338:  {
    #####: 1339:    ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -: 1340:
    #####: 1341:    if ((target_desc.flags & JERRY_PROP_IS_VALUE_DEFINED)
    #####: 1342:        && !(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE)
    #####: 1343:        && !(target_desc.flags & JERRY_PROP_IS_WRITABLE)
    #####: 1344:        && !ecma_op_same_value (value, target_desc.value))
        -: 1345:    {
    #####: 1346:      ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Incorrect value is returned by a Proxy 'set' trap"));
        -: 1347:    }
    #####: 1348:    else if (!(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE)
    #####: 1349:             && (target_desc.flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED))
    #####: 1350:             && target_desc.set_p == NULL)
        -: 1351:    {
    #####: 1352:      ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("The property of a Proxy target is a non "
        -: 1353:                                                       "configurable accessor without a setter"));
        -: 1354:    }
        -: 1355:
    #####: 1356:    ecma_free_property_descriptor (&target_desc);
        -: 1357:
    #####: 1358:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -: 1359:    {
    #####: 1360:      return ret_value;
        -: 1361:    }
        -: 1362:  }
        -: 1363:
        -: 1364:  /* 15. */
    #####: 1365:  return ECMA_VALUE_TRUE;
        -: 1366:} /* ecma_proxy_object_set */
        -: 1367:
        -: 1368:/**
        -: 1369: * The Proxy object [[Delete]] internal routine
        -: 1370: *
        -: 1371: * See also:
        -: 1372: *          ECMAScript v6, 9.5.10
        -: 1373: *
        -: 1374: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -: 1375: *
        -: 1376: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 1377: *         ECMA_VALUE_{TRUE/FALSE} - depends on whether the propety can be deleted
        -: 1378: */
        -: 1379:ecma_value_t
    #####: 1380:ecma_proxy_object_delete_property (ecma_object_t *obj_p, /**< proxy object */
        -: 1381:                                   ecma_string_t *prop_name_p, /**< property name */
        -: 1382:                                   bool is_strict) /**< delete in strict mode? */
        -: 1383:{
    #####: 1384:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####: 1385:  ECMA_CHECK_STACK_USAGE ();
        -: 1386:
    #####: 1387:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1388:
        -: 1389:  /* 2. */
    #####: 1390:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1391:
        -: 1392:  /* 3-6.*/
    #####: 1393:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_DELETE_PROPERTY_UL);
        -: 1394:
        -: 1395:  /* 7. */
    #####: 1396:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1397:  {
    #####: 1398:    return trap;
        -: 1399:  }
        -: 1400:
    #####: 1401:  ecma_value_t target = proxy_obj_p->target;
    #####: 1402:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -: 1403:
        -: 1404:  /* 8. */
    #####: 1405:  if (ecma_is_value_undefined (trap))
        -: 1406:  {
    #####: 1407:    ecma_value_t result = ecma_op_object_delete (target_obj_p, prop_name_p, is_strict);
    #####: 1408:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1409:    return result;
        -: 1410:  }
        -: 1411:
    #####: 1412:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####: 1413:  ecma_value_t prop_name_value = ecma_make_prop_name_value (prop_name_p);
    #####: 1414:  ecma_value_t args[] = { target, prop_name_value };
        -: 1415:
        -: 1416:  /* 9. */
    #####: 1417:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 2);
        -: 1418:
    #####: 1419:  ecma_deref_object (func_obj_p);
        -: 1420:
        -: 1421:  /* 10. */
    #####: 1422:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -: 1423:  {
    #####: 1424:    return trap_result;
        -: 1425:  }
        -: 1426:
    #####: 1427:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -: 1428:
    #####: 1429:  ecma_free_value (trap_result);
        -: 1430:
        -: 1431:  /* 11. */
    #####: 1432:  if (!boolean_trap_result)
        -: 1433:  {
    #####: 1434:    return ECMA_VALUE_FALSE;
        -: 1435:  }
        -: 1436:
    #####: 1437:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -: 1438:  {
    #####: 1439:    return ECMA_VALUE_TRUE;
        -: 1440:  }
        -: 1441:
        -: 1442:  /* 12. */
    #####: 1443:  ecma_property_descriptor_t target_desc;
        -: 1444:
    #####: 1445:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (target_obj_p, prop_name_p, &target_desc);
        -: 1446:
        -: 1447:  /* 13. */
    #####: 1448:  if (ECMA_IS_VALUE_ERROR (status))
        -: 1449:  {
    #####: 1450:    return status;
        -: 1451:  }
        -: 1452:
        -: 1453:  /* 14. */
    #####: 1454:  if (ecma_is_value_false (status))
        -: 1455:  {
    #####: 1456:    return ECMA_VALUE_TRUE;
        -: 1457:  }
        -: 1458:
    #####: 1459:  ecma_value_t ret_value = ECMA_VALUE_TRUE;
        -: 1460:
        -: 1461:  /* 15. */
    #####: 1462:  if (!(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE))
        -: 1463:  {
    #####: 1464:    ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Trap returned truish for property which is "
        -: 1465:                                                     "non-configurable in the proxy target"));
        -: 1466:  }
        -: 1467:  /* ES11: 13-14 */
    #####: 1468:  ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -: 1469:
    #####: 1470:  if (!ecma_is_value_true (extensible_target))
        -: 1471:  {
    #####: 1472:    ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Trap returned truish for target is not extensible"));
        -: 1473:  }
        -: 1474:
    #####: 1475:  ecma_free_property_descriptor (&target_desc);
        -: 1476:
        -: 1477:  /* 16. */
    #####: 1478:  return ret_value;
        -: 1479:} /* ecma_proxy_object_delete_property */
        -: 1480:
        -: 1481:/**
        -: 1482: * Helper method for the Proxy object [[OwnPropertyKeys]] operation
        -: 1483: *
        -: 1484: * See also:
        -: 1485: *          ECMAScript v6, 9.5.12 steps 21. 23.
        -: 1486: *
        -: 1487: * @return ECMA_VALUE_ERROR - if a target key is not in the unchecked_result_keys collection
        -: 1488: *         ECMA_VALUE_EMPTY - otherwise
        -: 1489: */
        -: 1490:static ecma_value_t
    #####: 1491:ecma_proxy_object_own_property_keys_helper (ecma_collection_t *target_collection, /**< target keys */
        -: 1492:                                            ecma_collection_t *unchecked_result_keys, /**< unchecked keys */
        -: 1493:                                            uint32_t *counter) /**< unchecked property counter */
        -: 1494:{
    #####: 1495:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -: 1496:
    #####: 1497:  for (uint32_t i = 0; i < target_collection->item_count; i++)
        -: 1498:  {
    #####: 1499:    ecma_string_t *current_prop_name = ecma_get_prop_name_from_value (target_collection->buffer_p[i]);
        -: 1500:
    #####: 1501:    ret_value = ECMA_VALUE_ERROR;
        -: 1502:
    #####: 1503:    for (uint32_t j = 0; j < unchecked_result_keys->item_count; j++)
        -: 1504:    {
    #####: 1505:      if (ecma_is_value_empty (unchecked_result_keys->buffer_p[j]))
        -: 1506:      {
    #####: 1507:        continue;
        -: 1508:      }
        -: 1509:
    #####: 1510:      ecma_string_t *unchecked_prop_name = ecma_get_prop_name_from_value (unchecked_result_keys->buffer_p[j]);
        -: 1511:
    #####: 1512:      if (ecma_compare_ecma_strings (current_prop_name, unchecked_prop_name))
        -: 1513:      {
    #####: 1514:        ecma_deref_ecma_string (unchecked_prop_name);
    #####: 1515:        ret_value = ECMA_VALUE_EMPTY;
    #####: 1516:        unchecked_result_keys->buffer_p[j] = ECMA_VALUE_EMPTY;
    #####: 1517:        (*counter)++;
        -: 1518:      }
        -: 1519:    }
        -: 1520:
    #####: 1521:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -: 1522:    {
    #####: 1523:      break;
        -: 1524:    }
        -: 1525:  }
        -: 1526:
    #####: 1527:  return ret_value;
        -: 1528:} /* ecma_proxy_object_own_property_keys_helper */
        -: 1529:
        -: 1530:/**
        -: 1531: * Helper method for checking the invariants in the Proxy object [[OwnPropertyKeys]] operation
        -: 1532: *
        -: 1533: * See also:
        -: 1534: *          ECMAScript v6, 9.5.12 steps 20-25.
        -: 1535: *
        -: 1536: * @return true - if none of the invariants got violated
        -: 1537: *         false - otherwise
        -: 1538: */
        -: 1539:static bool
    #####: 1540:ecma_proxy_check_invariants_for_own_prop_keys (ecma_collection_t *trap_result,
        -: 1541:                                               ecma_collection_t *target_non_configurable_keys,
        -: 1542:                                               ecma_collection_t *target_configurable_keys,
        -: 1543:                                               ecma_value_t extensible_target)
        -: 1544:{
        -: 1545:  /* 20. */
    #####: 1546:  ecma_collection_t *unchecked_result_keys = ecma_new_collection ();
        -: 1547:
    #####: 1548:  ecma_collection_append (unchecked_result_keys, trap_result->buffer_p, trap_result->item_count);
        -: 1549:
    #####: 1550:  for (uint32_t i = 0; i < unchecked_result_keys->item_count; i++)
        -: 1551:  {
    #####: 1552:    ecma_string_t *unchecked_prop_name = ecma_get_prop_name_from_value (unchecked_result_keys->buffer_p[i]);
    #####: 1553:    ecma_ref_ecma_string (unchecked_prop_name);
        -: 1554:  }
        -: 1555:
    #####: 1556:  bool check_ok = false;
    #####: 1557:  uint32_t unchecked_prop_name_counter = 0;
        -: 1558:
        -: 1559:  /* 21. */
    #####: 1560:  if (ECMA_IS_VALUE_ERROR (ecma_proxy_object_own_property_keys_helper (target_non_configurable_keys,
        -: 1561:                                                                       unchecked_result_keys,
        -: 1562:                                                                       &unchecked_prop_name_counter)))
        -: 1563:  {
    #####: 1564:    ecma_raise_type_error (ECMA_ERR_MSG ("Trap result did not include all non-configurable keys"));
        -: 1565:  }
        -: 1566:  /* 22. */
    #####: 1567:  else if (ecma_is_value_true (extensible_target))
        -: 1568:  {
    #####: 1569:    check_ok = true;
        -: 1570:  }
        -: 1571:  /* 23. */
    #####: 1572:  else if (ECMA_IS_VALUE_ERROR (ecma_proxy_object_own_property_keys_helper (target_configurable_keys,
        -: 1573:                                                                            unchecked_result_keys,
        -: 1574:                                                                            &unchecked_prop_name_counter)))
        -: 1575:  {
    #####: 1576:    ecma_raise_type_error (ECMA_ERR_MSG ("Trap result did not include all configurable keys"));
        -: 1577:  }
        -: 1578:  /* 24. */
    #####: 1579:  else if (unchecked_result_keys->item_count != unchecked_prop_name_counter)
        -: 1580:  {
    #####: 1581:    ecma_raise_type_error (ECMA_ERR_MSG ("Trap returned extra keys for a non-extensible Proxy target"));
        -: 1582:  }
        -: 1583:  /* 25. */
        -: 1584:  else
        -: 1585:  {
    #####: 1586:    check_ok = true;
        -: 1587:  }
        -: 1588:
    #####: 1589:  ecma_collection_free (unchecked_result_keys);
        -: 1590:
    #####: 1591:  return check_ok;
        -: 1592:} /* ecma_proxy_check_invariants_for_own_prop_keys */
        -: 1593:
        -: 1594:/**
        -: 1595: * The Proxy object [[OwnPropertyKeys]] internal routine
        -: 1596: *
        -: 1597: * See also:
        -: 1598: *          ECMAScript v11, 9.5.11
        -: 1599: *
        -: 1600: * Note: If the returned collection is not NULL, it must be freed with
        -: 1601: *       ecma_collection_free if it is no longer needed
        -: 1602: *
        -: 1603: * @return NULL - if the operation fails
        -: 1604: *         pointer to a newly allocated list of property names - otherwise
        -: 1605: */
        -: 1606:ecma_collection_t *
    #####: 1607:ecma_proxy_object_own_property_keys (ecma_object_t *obj_p) /**< proxy object */
        -: 1608:{
    #####: 1609:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####: 1610:  ECMA_CHECK_STACK_USAGE_RETURN (NULL);
        -: 1611:
    #####: 1612:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1613:
        -: 1614:  /* 1. */
    #####: 1615:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1616:
        -: 1617:  /* 2-5. */
    #####: 1618:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_OWN_KEYS_UL);
        -: 1619:
    #####: 1620:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1621:  {
    #####: 1622:    return NULL;
        -: 1623:  }
        -: 1624:
    #####: 1625:  ecma_value_t target = proxy_obj_p->target;
    #####: 1626:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -: 1627:
        -: 1628:  /* 6. */
    #####: 1629:  if (ecma_is_value_undefined (trap))
        -: 1630:  {
    #####: 1631:    ecma_collection_t *result = ecma_op_object_own_property_keys (target_obj_p, JERRY_PROPERTY_FILTER_ALL);
    #####: 1632:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1633:    return result;
        -: 1634:  }
        -: 1635:
    #####: 1636:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
        -: 1637:
        -: 1638:  /* 7. */
    #####: 1639:  ecma_value_t trap_result_array = ecma_op_function_call (func_obj_p, handler, &target, 1);
        -: 1640:
    #####: 1641:  ecma_deref_object (func_obj_p);
        -: 1642:
    #####: 1643:  if (ECMA_IS_VALUE_ERROR (trap_result_array))
        -: 1644:  {
    #####: 1645:    return NULL;
        -: 1646:  }
        -: 1647:
        -: 1648:  /* 8. */
    #####: 1649:  ecma_collection_t *trap_result = ecma_op_create_list_from_array_like (trap_result_array, true);
        -: 1650:
    #####: 1651:  ecma_free_value (trap_result_array);
        -: 1652:
    #####: 1653:  if (trap_result == NULL
    #####: 1654:      || (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION))
        -: 1655:  {
    #####: 1656:    return trap_result;
        -: 1657:  }
        -: 1658:
        -: 1659:  /* 9. */
    #####: 1660:  if (ecma_collection_check_duplicated_entries (trap_result))
        -: 1661:  {
    #####: 1662:    ecma_collection_free (trap_result);
    #####: 1663:    ecma_raise_type_error (ECMA_ERR_MSG ("Trap returned with duplicated entries"));
    #####: 1664:    return NULL;
        -: 1665:  }
        -: 1666:
        -: 1667:  /* 10. */
    #####: 1668:  ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -: 1669:
    #####: 1670:  if (ECMA_IS_VALUE_ERROR (extensible_target))
        -: 1671:  {
    #####: 1672:    ecma_collection_free (trap_result);
    #####: 1673:    return NULL;
        -: 1674:  }
        -: 1675:
        -: 1676:  /* 11. */
    #####: 1677:  ecma_collection_t *target_keys = ecma_op_object_own_property_keys (target_obj_p, JERRY_PROPERTY_FILTER_ALL);
        -: 1678:
    #####: 1679:  if (target_keys == NULL)
        -: 1680:  {
    #####: 1681:    ecma_collection_free (trap_result);
    #####: 1682:    return target_keys;
        -: 1683:  }
        -: 1684:
        -: 1685:  /* 14. */
    #####: 1686:  ecma_collection_t *target_configurable_keys = ecma_new_collection ();
        -: 1687:
        -: 1688:  /* 15. */
    #####: 1689:  ecma_collection_t *target_non_configurable_keys = ecma_new_collection ();
        -: 1690:
    #####: 1691:  ecma_collection_t *ret_value = NULL;
        -: 1692:
        -: 1693:  /* 16. */
    #####: 1694:  for (uint32_t i = 0; i < target_keys->item_count; i++)
        -: 1695:  {
    #####: 1696:    ecma_property_descriptor_t target_desc;
        -: 1697:
    #####: 1698:    ecma_string_t *prop_name_p = ecma_get_prop_name_from_value (target_keys->buffer_p[i]);
        -: 1699:
    #####: 1700:    ecma_value_t status = ecma_op_object_get_own_property_descriptor (target_obj_p,
        -: 1701:                                                                      prop_name_p,
        -: 1702:                                                                      &target_desc);
        -: 1703:
    #####: 1704:    if (ECMA_IS_VALUE_ERROR (status))
        -: 1705:    {
    #####: 1706:      ecma_collection_free (trap_result);
    #####: 1707:      goto free_target_collections;
        -: 1708:    }
        -: 1709:
    #####: 1710:    ecma_value_t prop_value = ecma_make_prop_name_value (prop_name_p);
        -: 1711:
    #####: 1712:    if (ecma_is_value_true (status)
    #####: 1713:        && !(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE))
        -: 1714:    {
    #####: 1715:      ecma_collection_push_back (target_non_configurable_keys, prop_value);
        -: 1716:    }
        -: 1717:    else
        -: 1718:    {
    #####: 1719:      ecma_collection_push_back (target_configurable_keys, prop_value);
        -: 1720:    }
        -: 1721:
    #####: 1722:    if (ecma_is_value_true (status))
        -: 1723:    {
    #####: 1724:      ecma_free_property_descriptor (&target_desc);
        -: 1725:    }
        -: 1726:  }
        -: 1727:
        -: 1728:  /* 17. */
    #####: 1729:  if (ecma_is_value_true (extensible_target) && target_non_configurable_keys->item_count == 0)
        -: 1730:  {
    #####: 1731:    ret_value = trap_result;
        -: 1732:  }
        -: 1733:  /* 18-22. */
    #####: 1734:  else if (ecma_proxy_check_invariants_for_own_prop_keys (trap_result,
        -: 1735:                                                          target_non_configurable_keys,
        -: 1736:                                                          target_configurable_keys,
        -: 1737:                                                          extensible_target))
        -: 1738:  {
    #####: 1739:    ret_value = trap_result;
        -: 1740:  }
        -: 1741:  else
        -: 1742:  {
    #####: 1743:    JERRY_ASSERT (ret_value == NULL);
    #####: 1744:    ecma_collection_free (trap_result);
        -: 1745:  }
        -: 1746:
    #####: 1747:free_target_collections:
    #####: 1748:  ecma_collection_destroy (target_keys);
    #####: 1749:  ecma_collection_free (target_configurable_keys);
    #####: 1750:  ecma_collection_free (target_non_configurable_keys);
        -: 1751:
        -: 1752:  /* 23. */
    #####: 1753:  return ret_value;
        -: 1754:} /* ecma_proxy_object_own_property_keys */
        -: 1755:
        -: 1756:/**
        -: 1757: * The Proxy object [[Call]] internal routine
        -: 1758: *
        -: 1759: * See also:
        -: 1760: *          ECMAScript v6, 9.5.13
        -: 1761: *
        -: 1762: * Note: Returned value must be freed with ecma_free_value.
        -: 1763: *
        -: 1764: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 1765: *         result of the function call - otherwise
        -: 1766: */
        -: 1767:ecma_value_t
    #####: 1768:ecma_proxy_object_call (ecma_object_t *obj_p, /**< proxy object */
        -: 1769:                        ecma_value_t this_argument, /**< this argument to invoke the function */
        -: 1770:                        const ecma_value_t *args_p, /**< argument list */
        -: 1771:                        uint32_t argc) /**< number of arguments */
        -: 1772:{
    #####: 1773:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####: 1774:  ECMA_CHECK_STACK_USAGE ();
        -: 1775:
    #####: 1776:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1777:
        -: 1778:  /* 1. */
    #####: 1779:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1780:
        -: 1781:  /* 2-5.*/
    #####: 1782:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_APPLY);
        -: 1783:
        -: 1784:  /* 6. */
    #####: 1785:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1786:  {
    #####: 1787:    return trap;
        -: 1788:  }
        -: 1789:
    #####: 1790:  ecma_value_t target = proxy_obj_p->target;
        -: 1791:
        -: 1792:  /* 7. */
    #####: 1793:  if (ecma_is_value_undefined (trap))
        -: 1794:  {
    #####: 1795:    ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
    #####: 1796:    ecma_value_t result = ecma_op_function_call (target_obj_p, this_argument, args_p, argc);
    #####: 1797:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1798:    return result;
        -: 1799:  }
        -: 1800:
        -: 1801:  /* 8. */
    #####: 1802:  ecma_value_t args_array = ecma_op_new_array_object_from_buffer (args_p, argc);
    #####: 1803:  ecma_value_t value_array[] = {target, this_argument, args_array};
    #####: 1804:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
        -: 1805:  /* 9. */
    #####: 1806:  ecma_value_t ret_value = ecma_op_function_call (func_obj_p, handler, value_array, 3);
    #####: 1807:  ecma_deref_object (func_obj_p);
    #####: 1808:  ecma_free_object (args_array);
        -: 1809:
    #####: 1810:  return ret_value;
        -: 1811:} /* ecma_proxy_object_call */
        -: 1812:
        -: 1813:/**
        -: 1814: * The Proxy object [[Construct]] internal routine
        -: 1815: *
        -: 1816: * See also:
        -: 1817: *          ECMAScript v6, 9.5.14
        -: 1818: *
        -: 1819: * Note: Returned value must be freed with ecma_free_value.
        -: 1820: *
        -: 1821: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 1822: *         result of the construct call - otherwise
        -: 1823: */
        -: 1824:ecma_value_t
    #####: 1825:ecma_proxy_object_construct (ecma_object_t *obj_p, /**< proxy object */
        -: 1826:                             ecma_object_t *new_target_p, /**< new target */
        -: 1827:                             const ecma_value_t *args_p, /**< argument list */
        -: 1828:                             uint32_t argc) /**< number of arguments */
        -: 1829:{
    #####: 1830:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####: 1831:  ECMA_CHECK_STACK_USAGE ();
        -: 1832:
    #####: 1833:  ecma_proxy_object_t * proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1834:
        -: 1835:  /* 1. */
    #####: 1836:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1837:
        -: 1838:  /* 2-5. */
    #####: 1839:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_CONSTRUCT);
        -: 1840:
        -: 1841:  /* 6. */
    #####: 1842:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1843:  {
    #####: 1844:    return trap;
        -: 1845:  }
        -: 1846:
    #####: 1847:  ecma_value_t target = proxy_obj_p->target;
    #####: 1848:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -: 1849:
        -: 1850:  /* 7. */
    #####: 1851:  if (ecma_is_value_undefined (trap))
        -: 1852:  {
    #####: 1853:    JERRY_ASSERT (ecma_object_is_constructor (target_obj_p));
        -: 1854:
    #####: 1855:    ecma_value_t result = ecma_op_function_construct (target_obj_p, new_target_p, args_p, argc);
    #####: 1856:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1857:    return result;
        -: 1858:  }
        -: 1859:
        -: 1860:  /* 8. */
    #####: 1861:  ecma_value_t args_array = ecma_op_new_array_object_from_buffer (args_p, argc);
        -: 1862:
    #####: 1863:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####: 1864:  ecma_value_t new_target_value = ecma_make_object_value (new_target_p);
    #####: 1865:  ecma_value_t function_call_args[] = {target, args_array, new_target_value};
        -: 1866:
        -: 1867:  /* 9. */
    #####: 1868:  ecma_value_t new_obj = ecma_op_function_call (func_obj_p, handler, function_call_args, 3);
        -: 1869:
    #####: 1870:  ecma_free_object (args_array);
    #####: 1871:  ecma_deref_object (func_obj_p);
        -: 1872:
        -: 1873:  /* 10 .*/
    #####: 1874:  if (ECMA_IS_VALUE_ERROR (new_obj))
        -: 1875:  {
    #####: 1876:    return new_obj;
        -: 1877:  }
        -: 1878:
        -: 1879:  /* 11. */
    #####: 1880:  if (!ecma_is_value_object (new_obj))
        -: 1881:  {
    #####: 1882:    ecma_free_value (new_obj);
        -: 1883:
    #####: 1884:    return ecma_raise_type_error (ECMA_ERR_MSG ("Trap must return with an object"));
        -: 1885:  }
        -: 1886:
        -: 1887:  /* 12. */
    #####: 1888:  return new_obj;
        -: 1889:} /* ecma_proxy_object_construct */
        -: 1890:
        -: 1891:#endif /* JERRY_BUILTIN_PROXY */
        -: 1892:
        -: 1893:/**
        -: 1894: * @}
        -: 1895: * @}
        -: 1896: */
