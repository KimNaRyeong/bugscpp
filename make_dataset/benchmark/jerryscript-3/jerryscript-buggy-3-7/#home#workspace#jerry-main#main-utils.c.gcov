        -:    0:Source:/home/workspace/jerry-main/main-utils.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <assert.h>
        -:   17:#include <stdio.h>
        -:   18:#include <stdlib.h>
        -:   19:#include <string.h>
        -:   20:
        -:   21:#include "jerryscript.h"
        -:   22:#include "jerryscript-ext/debugger.h"
        -:   23:#include "jerryscript-ext/handler.h"
        -:   24:#include "jerryscript-port.h"
        -:   25:#include "jerryscript-port-default.h"
        -:   26:
        -:   27:#include "main-utils.h"
        -:   28:#include "main-options.h"
        -:   29:
        -:   30:/**
        -:   31: * Max line size that will be printed on a Syntax Error
        -:   32: */
        -:   33:#define SYNTAX_ERROR_MAX_LINE_LENGTH 256
        -:   34:
        -:   35:/**
        -:   36: * Register a JavaScript function in the global object.
        -:   37: */
        -:   38:static void
        5:   39:main_register_global_function (const char *name_p, /**< name of the function */
        -:   40:                               jerry_external_handler_t handler_p) /**< function callback */
        -:   41:{
        5:   42:  jerry_value_t result_val = jerryx_handler_register_global ((const jerry_char_t *) name_p, handler_p);
        5:   43:  assert (!jerry_value_is_error (result_val));
        5:   44:  jerry_release_value (result_val);
        5:   45:} /* main_register_global_function */
        -:   46:
        -:   47:static jerry_value_t
    #####:   48:main_create_realm (const jerry_call_info_t *call_info_p, /**< call information */
        -:   49:                   const jerry_value_t args_p[], /**< function arguments */
        -:   50:                   const jerry_length_t args_cnt) /**< number of function arguments */
        -:   51:{
        -:   52:  (void) call_info_p; /* unused */
        -:   53:  (void) args_p; /* unused */
        -:   54:  (void) args_cnt; /* unused */
    #####:   55:  return jerry_create_realm ();
        -:   56:} /* main_create_realm */
        -:   57:
        -:   58:/**
        -:   59: * Register a method for the $262 object.
        -:   60: */
        -:   61:static void
    #####:   62:test262_register_function (jerry_value_t test262_obj, /** $262 object */
        -:   63:                           const char *name_p, /**< name of the function */
        -:   64:                           jerry_external_handler_t handler_p) /**< function callback */
        -:   65:{
    #####:   66:  jerry_value_t function_name_val = jerry_create_string ((const jerry_char_t *) name_p);
    #####:   67:  jerry_value_t function_val = jerry_create_external_function (handler_p);
        -:   68:
    #####:   69:  jerry_value_t result_val = jerry_set_property (test262_obj, function_name_val, function_val);
        -:   70:
    #####:   71:  jerry_release_value (function_val);
    #####:   72:  jerry_release_value (function_name_val);
        -:   73:
    #####:   74:  assert (!jerry_value_is_error (result_val));
    #####:   75:  jerry_release_value (result_val);
    #####:   76:} /* test262_register_function */
        -:   77:
        -:   78:/**
        -:   79: * $262.detachArrayBuffer
        -:   80: *
        -:   81: * A function which implements the DetachArrayBuffer abstract operation
        -:   82: *
        -:   83: * @return null value - if success
        -:   84: *         value marked with error flag - otherwise
        -:   85: */
        -:   86:static jerry_value_t
    #####:   87:test262_detach_array_buffer (const jerry_call_info_t *call_info_p, /**< call information */
        -:   88:                             const jerry_value_t args_p[], /**< function arguments */
        -:   89:                             const jerry_length_t args_cnt) /**< number of function arguments */
        -:   90:{
        -:   91:  (void) call_info_p; /* unused */
        -:   92:
    #####:   93:  if (args_cnt < 1 || !jerry_value_is_arraybuffer (args_p[0]))
        -:   94:  {
    #####:   95:    return jerry_create_error (JERRY_ERROR_TYPE, (jerry_char_t *) "Expected an ArrayBuffer object");
        -:   96:  }
        -:   97:
        -:   98:  /* TODO: support the optional 'key' argument */
        -:   99:
    #####:  100:  return jerry_detach_arraybuffer (args_p[0]);
        -:  101:} /* test262_detach_array_buffer */
        -:  102:
        -:  103:/**
        -:  104: * $262.evalScript
        -:  105: *
        -:  106: * A function which accepts a string value as its first argument and executes it
        -:  107: *
        -:  108: * @return completion of the script parsing and execution.
        -:  109: */
        -:  110:static jerry_value_t
    #####:  111:test262_eval_script (const jerry_call_info_t *call_info_p, /**< call information */
        -:  112:                     const jerry_value_t args_p[], /**< function arguments */
        -:  113:                     const jerry_length_t args_cnt) /**< number of function arguments */
        -:  114:{
        -:  115:  (void) call_info_p; /* unused */
        -:  116:
    #####:  117:  if (args_cnt < 1 || !jerry_value_is_string (args_p[0]))
        -:  118:  {
    #####:  119:    return jerry_create_error (JERRY_ERROR_TYPE, (jerry_char_t *) "Expected a string");
        -:  120:  }
        -:  121:
    #####:  122:  jerry_size_t str_size = jerry_get_utf8_string_size (args_p[0]);
    #####:  123:  jerry_char_t *str_buf_p = malloc (str_size * sizeof (jerry_char_t));
        -:  124:
    #####:  125:  if (str_buf_p == NULL || jerry_string_to_utf8_char_buffer (args_p[0], str_buf_p, str_size) != str_size)
        -:  126:  {
    #####:  127:    free (str_buf_p);
    #####:  128:    return jerry_create_error (JERRY_ERROR_RANGE, (jerry_char_t *) "Internal error");
        -:  129:  }
        -:  130:
    #####:  131:  jerry_value_t ret_value = jerry_parse (str_buf_p, str_size, NULL);
        -:  132:
    #####:  133:  if (!jerry_value_is_error (ret_value))
        -:  134:  {
    #####:  135:    jerry_value_t func_val = ret_value;
    #####:  136:    ret_value = jerry_run (func_val);
    #####:  137:    jerry_release_value (func_val);
        -:  138:  }
        -:  139:
    #####:  140:  free (str_buf_p);
        -:  141:
    #####:  142:  return ret_value;
        -:  143:} /* test262_eval_script */
        -:  144:
        -:  145:static jerry_value_t
        -:  146:create_test262 (jerry_value_t global_obj);
        -:  147:
        -:  148:/**
        -:  149: * $262.createRealm
        -:  150: *
        -:  151: * A function which creates a new realm object, and returns a newly created $262 object
        -:  152: *
        -:  153: * @return a new $262 object
        -:  154: */
        -:  155:static jerry_value_t
    #####:  156:test262_create_realm (const jerry_call_info_t *call_info_p, /**< call information */
        -:  157:                      const jerry_value_t args_p[], /**< function arguments */
        -:  158:                      const jerry_length_t args_cnt) /**< number of function arguments */
        -:  159:{
        -:  160:  (void) call_info_p; /* unused */
        -:  161:  (void) args_p; /* unused */
        -:  162:  (void) args_cnt; /* unused */
        -:  163:
    #####:  164:  jerry_value_t realm_object = jerry_create_realm ();
    #####:  165:  jerry_value_t previous_realm = jerry_set_realm (realm_object);
    #####:  166:  assert (!jerry_value_is_error (previous_realm));
    #####:  167:  jerry_value_t test262_object = create_test262 (realm_object);
    #####:  168:  jerry_set_realm (previous_realm);
    #####:  169:  jerry_release_value (realm_object);
        -:  170:
    #####:  171:  return test262_object;
        -:  172:} /* test262_create_realm */
        -:  173:
        -:  174:/**
        -:  175: * Create a new $262 object
        -:  176: *
        -:  177: * @return a new $262 object
        -:  178: */
        -:  179:static jerry_value_t
    #####:  180:create_test262 (jerry_value_t global_obj) /**< global object */
        -:  181:{
    #####:  182:  jerry_value_t test262_object = jerry_create_object ();
        -:  183:
    #####:  184:  test262_register_function (test262_object, "detachArrayBuffer", test262_detach_array_buffer);
    #####:  185:  test262_register_function (test262_object, "evalScript", test262_eval_script);
    #####:  186:  test262_register_function (test262_object, "createRealm", test262_create_realm);
    #####:  187:  test262_register_function (test262_object, "gc", jerryx_handler_gc);
        -:  188:
    #####:  189:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "global");
    #####:  190:  jerry_value_t result = jerry_set_property (test262_object, prop_name, global_obj);
    #####:  191:  assert (!jerry_value_is_error (result));
    #####:  192:  jerry_release_value (prop_name);
    #####:  193:  jerry_release_value (result);
    #####:  194:  prop_name = jerry_create_string ((const jerry_char_t *) "$262");
    #####:  195:  result = jerry_set_property (global_obj, prop_name, test262_object);
        -:  196:
    #####:  197:  jerry_release_value (prop_name);
    #####:  198:  assert (!jerry_value_is_error (result));
    #####:  199:  jerry_release_value (result);
        -:  200:
    #####:  201:  return test262_object;
        -:  202:} /* create_test262 */
        -:  203:
        -:  204:static void
    #####:  205:promise_callback (jerry_promise_event_type_t event_type, /**< event type */
        -:  206:                  const jerry_value_t object, /**< target object */
        -:  207:                  const jerry_value_t value, /**< optional argument */
        -:  208:                  void *user_p) /**< user pointer passed to the callback */
        -:  209:{
        -:  210:  (void) value; /* unused */
        -:  211:  (void) user_p; /* unused */
    #####:  212:  const jerry_size_t max_allowed_size = 5 * 1024 - 1;
        -:  213:
    #####:  214:  if (event_type != JERRY_PROMISE_EVENT_REJECT_WITHOUT_HANDLER)
        -:  215:  {
    #####:  216:    return;
        -:  217:  }
        -:  218:
    #####:  219:  jerry_value_t reason = jerry_get_promise_result (object);
    #####:  220:  jerry_value_t reason_to_string = jerry_value_to_string (reason);
        -:  221:
    #####:  222:  if (!jerry_value_is_error (reason_to_string))
    #####:  223:  {
    #####:  224:    jerry_size_t buffer_size = jerry_get_utf8_string_size (reason_to_string);
        -:  225:
    #####:  226:    if (buffer_size > max_allowed_size)
        -:  227:    {
    #####:  228:      buffer_size = max_allowed_size;
        -:  229:    }
        -:  230:
    #####:  231:    JERRY_VLA (jerry_char_t, str_buf_p, buffer_size + 1);
    #####:  232:    jerry_string_to_utf8_char_buffer (reason_to_string, str_buf_p, buffer_size);
    #####:  233:    str_buf_p[buffer_size] = '\0';
        -:  234:
    #####:  235:    jerry_port_log (JERRY_LOG_LEVEL_WARNING, "Uncaught Promise rejection: %s\n", str_buf_p);
        -:  236:  }
        -:  237:  else
        -:  238:  {
    #####:  239:    jerry_port_log (JERRY_LOG_LEVEL_WARNING, "Uncaught Promise rejection (reason cannot be converted to string)\n");
        -:  240:  }
        -:  241:
    #####:  242:  jerry_release_value (reason_to_string);
    #####:  243:  jerry_release_value (reason);
        -:  244:} /* promise_callback */
        -:  245:
        -:  246:/**
        -:  247: * Inits the engine and the debugger
        -:  248: */
        -:  249:void
        1:  250:main_init_engine (main_args_t *arguments_p) /**< main arguments */
        -:  251:{
        1:  252:  jerry_init (arguments_p->init_flags);
        -:  253:
        1:  254:  jerry_promise_set_callback (JERRY_PROMISE_EVENT_FILTER_ERROR, promise_callback, NULL);
        -:  255:
        1:  256:  if (arguments_p->option_flags & OPT_FLAG_DEBUG_SERVER)
        -:  257:  {
    #####:  258:    bool protocol = false;
        -:  259:
    #####:  260:    if (!strcmp (arguments_p->debug_protocol, "tcp"))
        -:  261:    {
    #####:  262:      protocol = jerryx_debugger_tcp_create (arguments_p->debug_port);
        -:  263:    }
        -:  264:    else
        -:  265:    {
    #####:  266:      assert (!strcmp (arguments_p->debug_protocol, "serial"));
    #####:  267:      protocol = jerryx_debugger_serial_create (arguments_p->debug_serial_config);
        -:  268:    }
        -:  269:
    #####:  270:    if (!strcmp (arguments_p->debug_channel, "rawpacket"))
        -:  271:    {
    #####:  272:      jerryx_debugger_after_connect (protocol && jerryx_debugger_rp_create ());
        -:  273:    }
        -:  274:    else
        -:  275:    {
    #####:  276:      assert (!strcmp (arguments_p->debug_channel, "websocket"));
    #####:  277:      jerryx_debugger_after_connect (protocol && jerryx_debugger_ws_create ());
        -:  278:    }
        -:  279:  }
        1:  280:  if (arguments_p->option_flags & OPT_FLAG_TEST262_OBJECT)
        -:  281:  {
    #####:  282:    jerry_value_t global_obj = jerry_get_global_object ();
    #####:  283:    jerry_value_t test262_object = create_test262 (global_obj);
    #####:  284:    jerry_release_value (test262_object);
    #####:  285:    jerry_release_value (global_obj);
        -:  286:  }
        1:  287:  main_register_global_function ("assert", jerryx_handler_assert);
        1:  288:  main_register_global_function ("gc", jerryx_handler_gc);
        1:  289:  main_register_global_function ("print", jerryx_handler_print);
        1:  290:  main_register_global_function ("resourceName", jerryx_handler_resource_name);
        1:  291:  main_register_global_function ("createRealm", main_create_realm);
        1:  292:} /* main_init_engine */
        -:  293:
        -:  294:/**
        -:  295: * Print an error value.
        -:  296: *
        -:  297: * Note: the error value will be released.
        -:  298: */
        -:  299:void
    #####:  300:main_print_unhandled_exception (jerry_value_t error_value) /**< error value */
        -:  301:{
    #####:  302:  assert (jerry_value_is_error (error_value));
    #####:  303:  error_value = jerry_get_value_from_error (error_value, true);
        -:  304:
    #####:  305:  jerry_char_t err_str_buf[256];
        -:  306:
    #####:  307:  jerry_value_t err_str_val = jerry_value_to_string (error_value);
    #####:  308:  jerry_size_t err_str_size = jerry_get_utf8_string_size (err_str_val);
        -:  309:
    #####:  310:  if (err_str_size >= 256)
        -:  311:  {
    #####:  312:    const char msg[] = "[Error message too long]";
    #####:  313:    err_str_size = sizeof (msg) / sizeof (char) - 1;
    #####:  314:    memcpy (err_str_buf, msg, err_str_size + 1);
        -:  315:  }
        -:  316:  else
        -:  317:  {
    #####:  318:    jerry_size_t string_end = jerry_string_to_utf8_char_buffer (err_str_val, err_str_buf, err_str_size);
    #####:  319:    assert (string_end == err_str_size);
    #####:  320:    err_str_buf[string_end] = 0;
        -:  321:
    #####:  322:    if (jerry_is_feature_enabled (JERRY_FEATURE_ERROR_MESSAGES)
    #####:  323:        && jerry_get_error_type (error_value) == JERRY_ERROR_SYNTAX)
        -:  324:    {
    #####:  325:      jerry_char_t *string_end_p = err_str_buf + string_end;
    #####:  326:      unsigned int err_line = 0;
    #####:  327:      unsigned int err_col = 0;
    #####:  328:      char *path_str_p = NULL;
    #####:  329:      char *path_str_end_p = NULL;
        -:  330:
        -:  331:      /* 1. parse column and line information */
    #####:  332:      for (jerry_char_t *current_p = err_str_buf; current_p < string_end_p; current_p++)
        -:  333:      {
    #####:  334:        if (*current_p == '[')
        -:  335:        {
    #####:  336:          current_p++;
        -:  337:
    #####:  338:          if (*current_p == '<')
        -:  339:          {
    #####:  340:            break;
        -:  341:          }
        -:  342:
    #####:  343:          path_str_p = (char *) current_p;
    #####:  344:          while (current_p < string_end_p && *current_p != ':')
        -:  345:          {
    #####:  346:            current_p++;
        -:  347:          }
        -:  348:
    #####:  349:          path_str_end_p = (char *) current_p++;
        -:  350:
    #####:  351:          err_line = (unsigned int) strtol ((char *) current_p, (char **) &current_p, 10);
        -:  352:
    #####:  353:          current_p++;
        -:  354:
    #####:  355:          err_col = (unsigned int) strtol ((char *) current_p, NULL, 10);
    #####:  356:          break;
        -:  357:        }
        -:  358:      } /* for */
        -:  359:
    #####:  360:      if (err_line != 0 && err_col > 0 && err_col < SYNTAX_ERROR_MAX_LINE_LENGTH)
        -:  361:      {
        -:  362:        /* Temporarily modify the error message, so we can use the path. */
    #####:  363:        *path_str_end_p = '\0';
        -:  364:
    #####:  365:        size_t source_size;
    #####:  366:        uint8_t *source_p = jerry_port_read_source (path_str_p, &source_size);
        -:  367:
        -:  368:        /* Revert the error message. */
    #####:  369:        *path_str_end_p = ':';
        -:  370:
    #####:  371:        if (source_p != NULL)
        -:  372:        {
    #####:  373:          uint32_t curr_line = 1;
    #####:  374:          uint32_t pos = 0;
        -:  375:
        -:  376:          /* 2. seek and print */
    #####:  377:          while (pos < source_size && curr_line < err_line)
        -:  378:          {
    #####:  379:            if (source_p[pos] == '\n')
        -:  380:            {
    #####:  381:              curr_line++;
        -:  382:            }
        -:  383:
    #####:  384:            pos++;
        -:  385:          }
        -:  386:
        -:  387:          /* Print character if:
        -:  388:          * - The max line length is not reached.
        -:  389:          * - The current position is valid (it is not the end of the source).
        -:  390:          * - The current character is not a newline.
        -:  391:          **/
    #####:  392:          for (uint32_t char_count = 0;
    #####:  393:              (char_count < SYNTAX_ERROR_MAX_LINE_LENGTH) && (pos < source_size) && (source_p[pos] != '\n');
    #####:  394:              char_count++, pos++)
        -:  395:          {
    #####:  396:            jerry_port_log (JERRY_LOG_LEVEL_ERROR, "%c", source_p[pos]);
        -:  397:          }
    #####:  398:          jerry_port_log (JERRY_LOG_LEVEL_ERROR, "\n");
        -:  399:
    #####:  400:          jerry_port_release_source (source_p);
        -:  401:
    #####:  402:          while (--err_col)
        -:  403:          {
    #####:  404:            jerry_port_log (JERRY_LOG_LEVEL_ERROR, "~");
        -:  405:          }
        -:  406:
    #####:  407:          jerry_port_log (JERRY_LOG_LEVEL_ERROR, "^\n\n");
        -:  408:        }
        -:  409:      }
        -:  410:    }
        -:  411:  }
        -:  412:
    #####:  413:  jerry_port_log (JERRY_LOG_LEVEL_ERROR, "%s\n", err_str_buf);
    #####:  414:  jerry_release_value (err_str_val);
        -:  415:
    #####:  416:  if (jerry_value_is_object (error_value))
        -:  417:  {
    #####:  418:    jerry_value_t stack_str = jerry_create_string ((const jerry_char_t *) "stack");
    #####:  419:    jerry_value_t backtrace_val = jerry_get_property (error_value, stack_str);
    #####:  420:    jerry_release_value (stack_str);
        -:  421:
    #####:  422:    if (jerry_value_is_array (backtrace_val))
        -:  423:    {
    #####:  424:      uint32_t length = jerry_get_array_length (backtrace_val);
        -:  425:
        -:  426:      /* This length should be enough. */
    #####:  427:      if (length > 32)
        -:  428:      {
    #####:  429:        length = 32;
        -:  430:      }
        -:  431:
    #####:  432:      for (uint32_t i = 0; i < length; i++)
        -:  433:      {
    #####:  434:        jerry_value_t item_val = jerry_get_property_by_index (backtrace_val, i);
        -:  435:
    #####:  436:        if (jerry_value_is_string (item_val))
        -:  437:        {
    #####:  438:          jerry_size_t str_size = jerry_get_utf8_string_size (item_val);
        -:  439:
    #####:  440:          if (str_size >= 256)
        -:  441:          {
    #####:  442:            printf ("%6u: [Backtrace string too long]\n", i);
        -:  443:          }
        -:  444:          else
        -:  445:          {
    #####:  446:            jerry_size_t string_end = jerry_string_to_utf8_char_buffer (item_val, err_str_buf, str_size);
    #####:  447:            assert (string_end == str_size);
    #####:  448:            err_str_buf[string_end] = 0;
        -:  449:
    #####:  450:            printf ("%6u: %s\n", i, err_str_buf);
        -:  451:          }
        -:  452:        }
        -:  453:
    #####:  454:        jerry_release_value (item_val);
        -:  455:      }
        -:  456:    }
        -:  457:
    #####:  458:    jerry_release_value (backtrace_val);
        -:  459:  }
        -:  460:
    #####:  461:  jerry_release_value (error_value);
    #####:  462:} /* main_print_unhandled_exception */
        -:  463:
        -:  464:/**
        -:  465: * Runs the source code received by jerry_debugger_wait_for_client_source.
        -:  466: *
        -:  467: * @return result fo the source code execution
        -:  468: */
        -:  469:jerry_value_t
    #####:  470:main_wait_for_source_callback (const jerry_char_t *resource_name_p, /**< resource name */
        -:  471:                               size_t resource_name_size, /**< size of resource name */
        -:  472:                               const jerry_char_t *source_p, /**< source code */
        -:  473:                               size_t source_size, /**< source code size */
        -:  474:                               void *user_p) /**< user pointer */
        -:  475:{
        -:  476:  (void) user_p; /* unused */
        -:  477:
    #####:  478:  jerry_parse_options_t parse_options;
    #####:  479:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
    #####:  480:  parse_options.resource_name = jerry_create_string_sz (resource_name_p, (jerry_size_t) resource_name_size);
        -:  481:
    #####:  482:  jerry_value_t ret_val = jerry_parse (source_p,
        -:  483:                                       source_size,
        -:  484:                                       &parse_options);
        -:  485:
    #####:  486:  jerry_release_value (parse_options.resource_name);
        -:  487:
    #####:  488:  if (!jerry_value_is_error (ret_val))
        -:  489:  {
    #####:  490:    jerry_value_t func_val = ret_val;
    #####:  491:    ret_val = jerry_run (func_val);
    #####:  492:    jerry_release_value (func_val);
        -:  493:  }
        -:  494:
    #####:  495:  return ret_val;
        -:  496:} /* main_wait_for_source_callback */
        -:  497:
        -:  498:/**
        -:  499: * Check that value contains the reset abort value.
        -:  500: *
        -:  501: * Note: if the value is the reset abort value, the value is release.
        -:  502: *
        -:  503: * return true, if reset abort
        -:  504: *        false, otherwise
        -:  505: */
        -:  506:bool
    #####:  507:main_is_value_reset (jerry_value_t value) /**< jerry value */
        -:  508:{
    #####:  509:  if (!jerry_value_is_abort (value))
        -:  510:  {
    #####:  511:    return false;
        -:  512:  }
        -:  513:
    #####:  514:  jerry_value_t abort_value = jerry_get_value_from_error (value, false);
        -:  515:
    #####:  516:  if (!jerry_value_is_string (abort_value))
        -:  517:  {
    #####:  518:    jerry_release_value (abort_value);
    #####:  519:    return false;
        -:  520:  }
        -:  521:
        -:  522:  static const char restart_str[] = "r353t";
        -:  523:
    #####:  524:  jerry_size_t str_size = jerry_get_string_size (abort_value);
    #####:  525:  bool is_reset = false;
        -:  526:
    #####:  527:  if (str_size == sizeof (restart_str) - 1)
    #####:  528:  {
    #####:  529:    JERRY_VLA (jerry_char_t, str_buf, str_size);
    #####:  530:    jerry_string_to_char_buffer (abort_value, str_buf, str_size);
        -:  531:
    #####:  532:    is_reset = memcmp (restart_str, (char *) (str_buf), str_size) == 0;
        -:  533:
    #####:  534:    if (is_reset)
        -:  535:    {
    #####:  536:      jerry_release_value (value);
        -:  537:    }
        -:  538:  }
        -:  539:
    #####:  540:  jerry_release_value (abort_value);
    #####:  541:  return is_reset;
        -:  542:} /* main_is_value_reset */
