        -:    0:Source:/home/workspace/tests/unit-core/test-resource-name.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "config.h"
        -:   17:#include "jerryscript.h"
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:static jerry_value_t
    #####:   21:resource_name_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   22:                       const jerry_value_t args_p[], /**< argument list */
        -:   23:                       const jerry_length_t args_count) /**< argument count */
        -:   24:{
        -:   25:  (void) call_info_p;
        -:   26:
    #####:   27:  jerry_value_t undefined_value = jerry_create_undefined ();
    #####:   28:  jerry_value_t resource_name = jerry_get_resource_name (args_count > 0 ? args_p[0] : undefined_value);
    #####:   29:  jerry_release_value (undefined_value);
        -:   30:
    #####:   31:  return resource_name;
        -:   32:} /* resource_name_handler */
        -:   33:
        -:   34:int
    #####:   35:main (void)
        -:   36:{
    #####:   37:  TEST_INIT ();
        -:   38:
    #####:   39:  if (!jerry_is_feature_enabled (JERRY_FEATURE_LINE_INFO))
        -:   40:  {
    #####:   41:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Line info support is disabled!\n");
    #####:   42:    return 0;
        -:   43:  }
        -:   44:
    #####:   45:  jerry_init (JERRY_INIT_EMPTY);
        -:   46:
    #####:   47:  jerry_value_t global = jerry_get_global_object ();
        -:   48:
        -:   49:  /* Register the "resourceName" method. */
        -:   50:  {
    #####:   51:    jerry_value_t func = jerry_create_external_function (resource_name_handler);
    #####:   52:    jerry_value_t name = jerry_create_string ((const jerry_char_t *) "resourceName");
    #####:   53:    jerry_value_t result = jerry_set_property (global, name, func);
    #####:   54:    jerry_release_value (result);
    #####:   55:    jerry_release_value (name);
    #####:   56:    jerry_release_value (func);
        -:   57:  }
        -:   58:
    #####:   59:  jerry_release_value (global);
        -:   60:
        -:   61:  jerry_parse_options_t parse_options;
    #####:   62:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
        -:   63:
    #####:   64:  const char *source_1 = ("function f1 () {\n"
        -:   65:                          "  if (resourceName() !== 'demo1.js') return false; \n"
        -:   66:                          "  if (resourceName(f1) !== 'demo1.js') return false; \n"
        -:   67:                          "  if (resourceName(5) !== '<anonymous>') return false; \n"
        -:   68:                          "  return f1; \n"
        -:   69:                          "} \n"
        -:   70:                          "f1();");
        -:   71:
    #####:   72:  parse_options.resource_name = jerry_create_string ((jerry_char_t *) "demo1.js");
        -:   73:
    #####:   74:  jerry_value_t program = jerry_parse ((const jerry_char_t *) source_1,
        -:   75:                                       strlen (source_1),
        -:   76:                                       &parse_options);
    #####:   77:  TEST_ASSERT (!jerry_value_is_error (program));
        -:   78:
    #####:   79:  jerry_value_t run_result = jerry_run (program);
    #####:   80:  TEST_ASSERT (!jerry_value_is_error (run_result));
    #####:   81:  TEST_ASSERT (jerry_value_is_object (run_result));
        -:   82:
    #####:   83:  jerry_value_t resource_value = jerry_get_resource_name (run_result);
    #####:   84:  jerry_value_t compare_result = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL,
        -:   85:                                                         resource_value,
        -:   86:                                                         parse_options.resource_name);
    #####:   87:  TEST_ASSERT (jerry_value_is_true (compare_result));
        -:   88:
    #####:   89:  jerry_release_value (compare_result);
    #####:   90:  jerry_release_value (resource_value);
    #####:   91:  jerry_release_value (parse_options.resource_name);
        -:   92:
    #####:   93:  jerry_release_value (run_result);
    #####:   94:  jerry_release_value (program);
        -:   95:
    #####:   96:  const char *source_2 = ("function f2 () { \n"
        -:   97:                          "  if (resourceName() !== 'demo2.js') return false; \n"
        -:   98:                          "  if (resourceName(f2) !== 'demo2.js') return false; \n"
        -:   99:                          "  if (resourceName(f1) !== 'demo1.js') return false; \n"
        -:  100:                          "  if (resourceName(Object.prototype) !== '<anonymous>') return false; \n"
        -:  101:                          "  if (resourceName(Function) !== '<anonymous>') return false; \n"
        -:  102:                          "  return f2; \n"
        -:  103:                          "} \n"
        -:  104:                          "f2(); \n");
        -:  105:
    #####:  106:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "demo2.js");
        -:  107:
    #####:  108:  program = jerry_parse ((const jerry_char_t *) source_2,
        -:  109:                         strlen (source_2),
        -:  110:                         &parse_options);
    #####:  111:  TEST_ASSERT (!jerry_value_is_error (program));
        -:  112:
    #####:  113:  run_result = jerry_run (program);
    #####:  114:  TEST_ASSERT (!jerry_value_is_error (run_result));
    #####:  115:  TEST_ASSERT (jerry_value_is_object (run_result));
        -:  116:
    #####:  117:  resource_value = jerry_get_resource_name (run_result);
    #####:  118:  compare_result = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL, resource_value, parse_options.resource_name);
    #####:  119:  TEST_ASSERT (jerry_value_is_true (compare_result));
        -:  120:
    #####:  121:  jerry_release_value (compare_result);
    #####:  122:  jerry_release_value (resource_value);
    #####:  123:  jerry_release_value (parse_options.resource_name);
        -:  124:
    #####:  125:  jerry_release_value (run_result);
    #####:  126:  jerry_release_value (program);
    #####:  127:  if (jerry_is_feature_enabled (JERRY_FEATURE_MODULE))
        -:  128:  {
    #####:  129:    jerry_value_t anon = jerry_create_string ((const jerry_char_t *) "<anonymous>");
    #####:  130:    const char *source_3 = "";
        -:  131:
    #####:  132:    parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####:  133:    parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "demo3.js");
        -:  134:
    #####:  135:    program = jerry_parse ((const jerry_char_t *) source_3,
        -:  136:                           strlen (source_3),
        -:  137:                           &parse_options);
    #####:  138:    TEST_ASSERT (!jerry_value_is_error (program));
        -:  139:
    #####:  140:    resource_value = jerry_get_resource_name (program);
    #####:  141:    compare_result = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL, resource_value, parse_options.resource_name);
    #####:  142:    TEST_ASSERT (jerry_value_is_true (compare_result));
        -:  143:
    #####:  144:    jerry_release_value (compare_result);
    #####:  145:    jerry_release_value (resource_value);
        -:  146:
    #####:  147:    run_result = jerry_module_link (program, NULL, NULL);
    #####:  148:    TEST_ASSERT (!jerry_value_is_error (run_result));
        -:  149:
    #####:  150:    resource_value = jerry_get_resource_name (run_result);
    #####:  151:    compare_result = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL, resource_value, anon);
    #####:  152:    TEST_ASSERT (jerry_value_is_true (compare_result));
        -:  153:
    #####:  154:    jerry_release_value (compare_result);
    #####:  155:    jerry_release_value (resource_value);
    #####:  156:    jerry_release_value (run_result);
        -:  157:
    #####:  158:    run_result = jerry_module_evaluate (program);
    #####:  159:    TEST_ASSERT (!jerry_value_is_error (run_result));
        -:  160:
    #####:  161:    resource_value = jerry_get_resource_name (run_result);
    #####:  162:    compare_result = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL, resource_value, anon);
    #####:  163:    TEST_ASSERT (jerry_value_is_true (compare_result));
        -:  164:
    #####:  165:    jerry_release_value (compare_result);
    #####:  166:    jerry_release_value (resource_value);
    #####:  167:    jerry_release_value (run_result);
    #####:  168:    jerry_release_value (program);
    #####:  169:    jerry_release_value (parse_options.resource_name);
        -:  170:  }
    #####:  171:  const char *source_4 = ("function f(){} \n"
        -:  172:                          "f.bind().bind();");
        -:  173:
    #####:  174:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
    #####:  175:  parse_options.resource_name = jerry_create_string ((jerry_char_t *) "demo4.js");
        -:  176:
    #####:  177:  program = jerry_parse ((const jerry_char_t *) source_4,
        -:  178:                         strlen (source_4),
        -:  179:                         &parse_options);
    #####:  180:  TEST_ASSERT (!jerry_value_is_error (program));
        -:  181:
    #####:  182:  run_result = jerry_run (program);
    #####:  183:  TEST_ASSERT (!jerry_value_is_error (run_result));
    #####:  184:  TEST_ASSERT (jerry_value_is_object (run_result));
        -:  185:
    #####:  186:  resource_value = jerry_get_resource_name (run_result);
    #####:  187:  compare_result = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL, resource_value, parse_options.resource_name);
    #####:  188:  TEST_ASSERT (jerry_value_is_true (compare_result));
    #####:  189:  jerry_release_value (compare_result);
        -:  190:
    #####:  191:  jerry_release_value (resource_value);
    #####:  192:  jerry_release_value (parse_options.resource_name);
    #####:  193:  jerry_release_value (run_result);
    #####:  194:  jerry_release_value (program);
        -:  195:
    #####:  196:  const char *source_5 = "";
        -:  197:
    #####:  198:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE | JERRY_PARSE_HAS_RESOURCE;
    #####:  199:  parse_options.user_value = jerry_create_object ();
    #####:  200:  parse_options.resource_name = jerry_create_string ((jerry_char_t *) "demo5.js");
        -:  201:
    #####:  202:  program = jerry_parse ((const jerry_char_t *) source_5,
        -:  203:                         strlen (source_5),
        -:  204:                         &parse_options);
    #####:  205:  TEST_ASSERT (!jerry_value_is_error (program));
        -:  206:
    #####:  207:  resource_value = jerry_get_resource_name (program);
    #####:  208:  compare_result = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL, resource_value, parse_options.resource_name);
    #####:  209:  TEST_ASSERT (jerry_value_is_true (compare_result));
        -:  210:
    #####:  211:  jerry_release_value (resource_value);
    #####:  212:  jerry_release_value (compare_result);
    #####:  213:  jerry_release_value (parse_options.user_value);
    #####:  214:  jerry_release_value (parse_options.resource_name);
    #####:  215:  jerry_release_value (program);
        -:  216:
    #####:  217:  const char *source_6 = "(class {})";
        -:  218:
    #####:  219:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
    #####:  220:  parse_options.resource_name = jerry_create_string ((jerry_char_t *) "demo6.js");
        -:  221:
    #####:  222:  program = jerry_parse ((const jerry_char_t *) source_6,
        -:  223:                         strlen (source_6),
        -:  224:                         &parse_options);
    #####:  225:  if (!jerry_value_is_error (program))
        -:  226:  {
    #####:  227:    resource_value = jerry_get_resource_name (program);
    #####:  228:    compare_result = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL, resource_value, parse_options.resource_name);
    #####:  229:    TEST_ASSERT (jerry_value_is_true (compare_result));
        -:  230:
    #####:  231:    jerry_release_value (resource_value);
    #####:  232:    jerry_release_value (compare_result);
        -:  233:  }
        -:  234:
    #####:  235:  jerry_release_value (parse_options.resource_name);
    #####:  236:  jerry_release_value (program);
        -:  237:
    #####:  238:  jerry_cleanup ();
        -:  239:
    #####:  240:  return 0;
        -:  241:} /* main */
