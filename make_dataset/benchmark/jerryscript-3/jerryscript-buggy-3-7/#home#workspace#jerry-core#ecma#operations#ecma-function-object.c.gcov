        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-function-object.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtin-helpers.h"
        -:   18:#include "ecma-builtin-handlers.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-extended-info.h"
        -:   21:#include "ecma-function-object.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-helpers.h"
        -:   24:#include "ecma-promise-object.h"
        -:   25:#include "lit-char-helpers.h"
        -:   26:#include "ecma-lex-env.h"
        -:   27:#include "ecma-objects.h"
        -:   28:#include "ecma-objects-general.h"
        -:   29:#include "ecma-proxy-object.h"
        -:   30:#include "ecma-symbol-object.h"
        -:   31:#include "jcontext.h"
        -:   32:#include "opcodes.h"
        -:   33:
        -:   34:/** \addtogroup ecma ECMA
        -:   35: * @{
        -:   36: *
        -:   37: * \addtogroup ecmafunctionobject ECMA Function object related routines
        -:   38: * @{
        -:   39: */
        -:   40:
        -:   41:#if JERRY_ESNEXT
        -:   42:/**
        -:   43: * SetFunctionName operation
        -:   44: *
        -:   45: * See also: ECMAScript v6, 9.2.1.1
        -:   46: *
        -:   47: * @return resource name as ecma-string
        -:   48: */
        -:   49:ecma_value_t
    #####:   50:ecma_op_function_form_name (ecma_string_t *prop_name_p, /**< property name */
        -:   51:                            char *prefix_p, /**< prefix */
        -:   52:                            lit_utf8_size_t prefix_size) /**< prefix length */
        -:   53:{
        -:   54:  /* 4. */
    #####:   55:  if (ecma_prop_name_is_symbol (prop_name_p))
        -:   56:  {
        -:   57:    /* .a */
    #####:   58:    ecma_value_t string_desc = ecma_get_symbol_description (prop_name_p);
        -:   59:
        -:   60:    /* .b */
    #####:   61:    if (ecma_is_value_undefined (string_desc))
        -:   62:    {
    #####:   63:      prop_name_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
        -:   64:    }
        -:   65:    /* .c */
        -:   66:    else
        -:   67:    {
    #####:   68:      ecma_string_t *string_desc_p = ecma_get_string_from_value (string_desc);
    #####:   69:      ecma_stringbuilder_t builder = ecma_stringbuilder_create_raw ((lit_utf8_byte_t *) "[", 1);
    #####:   70:      ecma_stringbuilder_append (&builder, string_desc_p);
    #####:   71:      ecma_stringbuilder_append_byte (&builder, (lit_utf8_byte_t) LIT_CHAR_RIGHT_SQUARE);
    #####:   72:      prop_name_p = ecma_stringbuilder_finalize (&builder);
        -:   73:    }
        -:   74:  }
        -:   75:  else
        -:   76:  {
    #####:   77:    ecma_ref_ecma_string (prop_name_p);
        -:   78:  }
        -:   79:
        -:   80:  /* 5. */
    #####:   81:  if (JERRY_UNLIKELY (prefix_p != NULL))
        -:   82:  {
    #####:   83:    ecma_stringbuilder_t builder = ecma_stringbuilder_create_raw ((lit_utf8_byte_t *) prefix_p, prefix_size);
    #####:   84:    ecma_stringbuilder_append (&builder, prop_name_p);
    #####:   85:    ecma_deref_ecma_string (prop_name_p);
    #####:   86:    prop_name_p = ecma_stringbuilder_finalize (&builder);
        -:   87:  }
        -:   88:
    #####:   89:  return ecma_make_string_value (prop_name_p);
        -:   90:} /* ecma_op_function_form_name */
        -:   91:#endif /* JERRY_ESNEXT */
        -:   92:
        -:   93:/**
        -:   94: * IsCallable operation.
        -:   95: *
        -:   96: * See also: ECMA-262 v5, 9.11
        -:   97: *
        -:   98: * @return true - if the given object is callable;
        -:   99: *         false - otherwise
        -:  100: */
        -:  101:extern inline bool JERRY_ATTR_ALWAYS_INLINE
        2:  102:ecma_op_object_is_callable (ecma_object_t *obj_p) /**< ecma object */
        -:  103:{
       14:  104:  JERRY_ASSERT (!ecma_is_lexical_environment (obj_p));
        -:  105:
       14:  106:  const ecma_object_type_t type = ecma_get_object_type (obj_p);
        -:  107:
        -:  108:#if JERRY_BUILTIN_PROXY
       14:  109:  if (ECMA_OBJECT_TYPE_IS_PROXY (type))
        -:  110:  {
    #####:  111:    return (obj_p->u2.prototype_cp & ECMA_PROXY_IS_CALLABLE) != 0;
        -:  112:  }
        -:  113:#endif /* JERRY_BUILTIN_PROXY */
        -:  114:
       14:  115:  return type >= ECMA_OBJECT_TYPE_FUNCTION;
        -:  116:} /* ecma_op_object_is_callable */
        -:  117:
        -:  118:/**
        -:  119: * IsCallable operation.
        -:  120: *
        -:  121: * See also: ECMA-262 v5, 9.11
        -:  122: *
        -:  123: * @return true - if value is callable object;
        -:  124: *         false - otherwise
        -:  125: */
        -:  126:bool
        3:  127:ecma_op_is_callable (ecma_value_t value) /**< ecma value */
        -:  128:{
        3:  129:  return (ecma_is_value_object (value)
        6:  130:          && ecma_op_object_is_callable (ecma_get_object_from_value (value)));
        -:  131:} /* ecma_op_is_callable */
        -:  132:
        -:  133:/**
        -:  134: * Implement IsConstructor abstract operation.
        -:  135: *
        -:  136: *
        -:  137: * @return ECMA_IS_VALID_CONSTRUCTOR - if object is a valid for constructor call
        -:  138: *         any other value - if object is not a valid constructor, the pointer contains the error message.
        -:  139: */
        -:  140:char *
    #####:  141:ecma_object_check_constructor (ecma_object_t *obj_p) /**< ecma object */
        -:  142:{
    #####:  143:  JERRY_ASSERT (!ecma_is_lexical_environment (obj_p));
        -:  144:
    #####:  145:  ecma_object_type_t type = ecma_get_object_type (obj_p);
        -:  146:
    #####:  147:  if (JERRY_UNLIKELY (type < ECMA_OBJECT_TYPE_PROXY))
        -:  148:  {
    #####:  149:    return ECMA_ERR_MSG ("Invalid type for constructor call");
        -:  150:  }
        -:  151:
    #####:  152:  while (JERRY_UNLIKELY (type == ECMA_OBJECT_TYPE_BOUND_FUNCTION))
        -:  153:  {
    #####:  154:    ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) obj_p;
        -:  155:
    #####:  156:    obj_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,
        -:  157:                                                        bound_func_p->header.u.bound_function.target_function);
        -:  158:
    #####:  159:    type = ecma_get_object_type (obj_p);
        -:  160:  }
        -:  161:
    #####:  162:  if (JERRY_LIKELY (type == ECMA_OBJECT_TYPE_FUNCTION))
        -:  163:  {
        -:  164:#if JERRY_ESNEXT
    #####:  165:    const ecma_compiled_code_t *byte_code_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) obj_p);
        -:  166:
    #####:  167:    if (!CBC_FUNCTION_IS_CONSTRUCTABLE (byte_code_p->status_flags))
        -:  168:    {
        -:  169:#if JERRY_ERROR_MESSAGES
    #####:  170:      switch (CBC_FUNCTION_GET_TYPE (byte_code_p->status_flags))
        -:  171:      {
    #####:  172:        case CBC_FUNCTION_SCRIPT:
        -:  173:        {
    #####:  174:          return "Script (global) functions cannot be invoked with 'new'";
        -:  175:        }
    #####:  176:        case CBC_FUNCTION_GENERATOR:
        -:  177:        {
    #####:  178:          return "Generator functions cannot be invoked with 'new'";
        -:  179:        }
    #####:  180:        case CBC_FUNCTION_ASYNC:
        -:  181:        {
    #####:  182:          return "Async functions cannot be invoked with 'new'";
        -:  183:        }
    #####:  184:        case CBC_FUNCTION_ASYNC_GENERATOR:
        -:  185:        {
    #####:  186:          return "Async generator functions cannot be invoked with 'new'";
        -:  187:        }
    #####:  188:        case CBC_FUNCTION_ACCESSOR:
        -:  189:        {
    #####:  190:          return "Accessor functions cannot be invoked with 'new'";
        -:  191:        }
    #####:  192:        case CBC_FUNCTION_METHOD:
        -:  193:        {
    #####:  194:          return "Methods cannot be invoked with 'new'";
        -:  195:        }
    #####:  196:        case CBC_FUNCTION_ARROW:
        -:  197:        {
    #####:  198:          return "Arrow functions cannot be invoked with 'new'";
        -:  199:        }
    #####:  200:        default:
        -:  201:        {
    #####:  202:          JERRY_ASSERT (CBC_FUNCTION_GET_TYPE (byte_code_p->status_flags) == CBC_FUNCTION_ASYNC_ARROW);
    #####:  203:          return "Async arrow functions cannot be invoked with 'new'";
        -:  204:        }
        -:  205:      }
        -:  206:#else /* !JERRY_ERROR_MESSAGES */
        -:  207:      return NULL;
        -:  208:#endif /* JERRY_ERROR_MESSAGES */
        -:  209:    }
        -:  210:#endif /* JERRY_NEXT */
        -:  211:
    #####:  212:    return ECMA_IS_VALID_CONSTRUCTOR;
        -:  213:  }
        -:  214:
        -:  215:#if JERRY_BUILTIN_PROXY
    #####:  216:  if (ECMA_OBJECT_TYPE_IS_PROXY (type))
        -:  217:  {
    #####:  218:    if (!(obj_p->u2.prototype_cp & ECMA_PROXY_IS_CONSTRUCTABLE))
        -:  219:    {
    #####:  220:      return ECMA_ERR_MSG ("Proxy target is not a constructor");
        -:  221:    }
        -:  222:
    #####:  223:    return ECMA_IS_VALID_CONSTRUCTOR;
        -:  224:  }
        -:  225:#endif /* JERRY_BUILTIN_PROXY */
        -:  226:
    #####:  227:  JERRY_ASSERT (type == ECMA_OBJECT_TYPE_NATIVE_FUNCTION
        -:  228:                || type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION
        -:  229:                || type == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION);
        -:  230:
    #####:  231:  if (type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION)
        -:  232:  {
    #####:  233:    if (ecma_builtin_function_is_routine (obj_p))
        -:  234:    {
    #####:  235:      return ECMA_ERR_MSG ("Built-in routines have no constructor");
        -:  236:    }
        -:  237:
        -:  238:#if JERRY_ESNEXT
    #####:  239:    JERRY_ASSERT (((ecma_extended_object_t *) obj_p)->u.built_in.id != ECMA_BUILTIN_ID_HANDLER);
        -:  240:#endif /* !JERRY_ESNEXT */
        -:  241:  }
        -:  242:
    #####:  243:  return ECMA_IS_VALID_CONSTRUCTOR;
        -:  244:} /* ecma_object_check_constructor */
        -:  245:
        -:  246:/**
        -:  247: * Implement IsConstructor abstract operation.
        -:  248: *
        -:  249: * @return ECMA_IS_VALID_CONSTRUCTOR - if the input value is a constructor.
        -:  250: *         any other value - if the input value is not a valid constructor, the pointer contains the error message.
        -:  251: */
        -:  252:extern inline char *JERRY_ATTR_ALWAYS_INLINE
    #####:  253:ecma_check_constructor (ecma_value_t value) /**< ecma object */
        -:  254:{
    #####:  255:  if (!ecma_is_value_object (value))
        -:  256:  {
    #####:  257:    return ECMA_ERR_MSG ("Invalid type for constructor call");
        -:  258:  }
        -:  259:
    #####:  260:  return ecma_object_check_constructor (ecma_get_object_from_value (value));
        -:  261:} /* ecma_check_constructor */
        -:  262:
        -:  263:/**
        -:  264: * Checks whether the given object implements [[Construct]].
        -:  265: *
        -:  266: * @return true - if the given object is constructor;
        -:  267: *         false - otherwise
        -:  268: */
        -:  269:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:  270:ecma_object_is_constructor (ecma_object_t *obj_p) /**< ecma object */
        -:  271:{
    #####:  272:  return ecma_object_check_constructor (obj_p) == ECMA_IS_VALID_CONSTRUCTOR;
        -:  273:} /* ecma_object_is_constructor */
        -:  274:
        -:  275:/**
        -:  276: * Checks whether the value is Object that implements [[Construct]].
        -:  277: *
        -:  278: * @return true - if value is constructor object;
        -:  279: *         false - otherwise
        -:  280: */
        -:  281:bool
    #####:  282:ecma_is_constructor (ecma_value_t value) /**< ecma value */
        -:  283:{
    #####:  284:  return (ecma_is_value_object (value)
    #####:  285:          && ecma_object_is_constructor (ecma_get_object_from_value (value)));
        -:  286:} /* ecma_is_constructor */
        -:  287:
        -:  288:/**
        -:  289: * Helper method to count and convert the arguments for the Function/GeneratorFunction constructor call.
        -:  290: *
        -:  291: * See also:
        -:  292: *          ECMA 262 v5.1 15.3.2.1 steps 5.a-d
        -:  293: *          ECMA 262 v6 19.2.1.1.1 steps 8
        -:  294: *
        -:  295: * @return ecma value - concatenated arguments as a string.
        -:  296: *         Returned value must be freed with ecma_free_value.
        -:  297: */
        -:  298:static ecma_string_t *
    #####:  299:ecma_op_create_dynamic_function_arguments_helper (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  300:                                                  uint32_t arguments_list_len) /**< number of arguments */
        -:  301:{
    #####:  302:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  303:
    #####:  304:  if (arguments_list_len <= 1)
        -:  305:  {
    #####:  306:    return ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
        -:  307:  }
        -:  308:
    #####:  309:  ecma_string_t *str_p = ecma_op_to_string (arguments_list_p[0]);
        -:  310:
    #####:  311:  if (JERRY_UNLIKELY (str_p == NULL))
        -:  312:  {
    #####:  313:    return str_p;
        -:  314:  }
        -:  315:
    #####:  316:  if (arguments_list_len == 2)
        -:  317:  {
    #####:  318:    return str_p;
        -:  319:  }
        -:  320:
    #####:  321:  ecma_stringbuilder_t builder = ecma_stringbuilder_create_from (str_p);
    #####:  322:  ecma_deref_ecma_string (str_p);
        -:  323:
    #####:  324:  for (uint32_t idx = 1; idx < arguments_list_len - 1; idx++)
        -:  325:  {
    #####:  326:    str_p = ecma_op_to_string (arguments_list_p[idx]);
        -:  327:
    #####:  328:    if (JERRY_UNLIKELY (str_p == NULL))
        -:  329:    {
    #####:  330:      ecma_stringbuilder_destroy (&builder);
    #####:  331:      return str_p;
        -:  332:    }
        -:  333:
    #####:  334:    ecma_stringbuilder_append_char (&builder, LIT_CHAR_COMMA);
    #####:  335:    ecma_stringbuilder_append (&builder, str_p);
    #####:  336:    ecma_deref_ecma_string (str_p);
        -:  337:  }
        -:  338:
    #####:  339:  return ecma_stringbuilder_finalize (&builder);
        -:  340:} /* ecma_op_create_dynamic_function_arguments_helper */
        -:  341:
        -:  342:/**
        -:  343: * Function object creation operation.
        -:  344: *
        -:  345: * See also: ECMA-262 v5, 13.2
        -:  346: *
        -:  347: * @return pointer to newly created Function object
        -:  348: */
        -:  349:static ecma_object_t *
        4:  350:ecma_op_create_function_object (ecma_object_t *scope_p, /**< function's scope */
        -:  351:                                const ecma_compiled_code_t *bytecode_data_p, /**< byte-code array */
        -:  352:                                ecma_builtin_id_t proto_id) /**< builtin id of the prototype object */
        -:  353:{
        4:  354:  JERRY_ASSERT (ecma_is_lexical_environment (scope_p));
        -:  355:
        -:  356:  /* 1., 4., 13. */
        4:  357:  ecma_object_t *prototype_obj_p = ecma_builtin_get (proto_id);
        -:  358:
        4:  359:  size_t function_object_size = sizeof (ecma_extended_object_t);
        -:  360:
        -:  361:#if JERRY_SNAPSHOT_EXEC
    #####:  362:  if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)
        -:  363:  {
    #####:  364:    function_object_size = sizeof (ecma_static_function_t);
        -:  365:  }
        -:  366:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  367:
        4:  368:  ecma_object_t *func_p = ecma_create_object (prototype_obj_p,
        -:  369:                                              function_object_size,
        -:  370:                                              ECMA_OBJECT_TYPE_FUNCTION);
        -:  371:
        -:  372:  /* 2., 6., 7., 8. */
        -:  373:  /*
        -:  374:   * We don't setup [[Get]], [[Call]], [[Construct]], [[HasInstance]] for each function object.
        -:  375:   * Instead we set the object's type to ECMA_OBJECT_TYPE_FUNCTION
        -:  376:   * that defines which version of the routine should be used on demand.
        -:  377:   */
        -:  378:
        -:  379:  /* 3. */
        -:  380:  /*
        -:  381:   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_FUNCTION type.
        -:  382:   *
        -:  383:   * See also: ecma_object_get_class_name
        -:  384:   */
        -:  385:
        4:  386:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_p;
        -:  387:
        -:  388:  /* 9. */
        4:  389:  ECMA_SET_NON_NULL_POINTER_TAG (ext_func_p->u.function.scope_cp, scope_p, 0);
        -:  390:
        -:  391:  /* 10., 11., 12. */
        -:  392:
        -:  393:#if JERRY_SNAPSHOT_EXEC
    #####:  394:  if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)
        -:  395:  {
    #####:  396:    ext_func_p->u.function.bytecode_cp = JMEM_CP_NULL;
    #####:  397:    ((ecma_static_function_t *) func_p)->bytecode_p = bytecode_data_p;
        -:  398:  }
        -:  399:  else
        -:  400:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  401:  {
        4:  402:    ECMA_SET_INTERNAL_VALUE_POINTER (ext_func_p->u.function.bytecode_cp, bytecode_data_p);
        4:  403:    ecma_bytecode_ref ((ecma_compiled_code_t *) bytecode_data_p);
        -:  404:  }
        -:  405:
        -:  406:  /* 14., 15., 16., 17., 18. */
        -:  407:  /*
        -:  408:   * 'length' and 'prototype' properties are instantiated lazily
        -:  409:   *
        -:  410:   * See also: ecma_op_function_try_to_lazy_instantiate_property
        -:  411:   */
        -:  412:
        4:  413:  return func_p;
        -:  414:} /* ecma_op_create_function_object */
        -:  415:
        -:  416:/**
        -:  417: * CreateDynamicFunction operation
        -:  418: *
        -:  419: * See also:
        -:  420: *          ECMA-262 v5, 15.3.
        -:  421: *          ECMA-262 v6, 19.2.1.1
        -:  422: *
        -:  423: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  424: *         constructed function object - otherwise
        -:  425: */
        -:  426:ecma_value_t
    #####:  427:ecma_op_create_dynamic_function (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  428:                                 uint32_t arguments_list_len, /**< number of arguments */
        -:  429:                                 ecma_parse_opts_t parse_opts) /**< parse options */
        -:  430:{
    #####:  431:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  432:
    #####:  433:  ecma_string_t *arguments_str_p = ecma_op_create_dynamic_function_arguments_helper (arguments_list_p,
        -:  434:                                                                                     arguments_list_len);
        -:  435:
    #####:  436:  if (JERRY_UNLIKELY (arguments_str_p == NULL))
        -:  437:  {
    #####:  438:    return ECMA_VALUE_ERROR;
        -:  439:  }
        -:  440:
        -:  441:  ecma_string_t *function_body_str_p;
        -:  442:
    #####:  443:  if (arguments_list_len > 0)
        -:  444:  {
    #####:  445:    function_body_str_p = ecma_op_to_string (arguments_list_p[arguments_list_len - 1]);
        -:  446:
    #####:  447:    if (JERRY_UNLIKELY (function_body_str_p == NULL))
        -:  448:    {
    #####:  449:      ecma_deref_ecma_string (arguments_str_p);
    #####:  450:      return ECMA_VALUE_ERROR;
        -:  451:    }
        -:  452:  }
        -:  453:  else
        -:  454:  {
        -:  455:    /* Very unlikely code path, not optimized. */
    #####:  456:    function_body_str_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
        -:  457:  }
        -:  458:
    #####:  459:  ecma_value_t source[2];
    #####:  460:  source[0] = ecma_make_string_value (function_body_str_p);
    #####:  461:  source[1] = ecma_make_string_value (arguments_str_p);
        -:  462:
    #####:  463:  parse_opts |= ECMA_PARSE_HAS_SOURCE_VALUE | ECMA_PARSE_HAS_ARGUMENT_LIST_VALUE;
        -:  464:
    #####:  465:  ecma_compiled_code_t *bytecode_p = parser_parse_script ((void *) source, parse_opts, NULL);
        -:  466:
    #####:  467:  ecma_deref_ecma_string (arguments_str_p);
    #####:  468:  ecma_deref_ecma_string (function_body_str_p);
        -:  469:
    #####:  470:  if (JERRY_UNLIKELY (bytecode_p == NULL))
        -:  471:  {
    #####:  472:    return ECMA_VALUE_ERROR;
        -:  473:  }
        -:  474:
        -:  475:#if JERRY_ESNEXT
        -:  476:  ecma_value_t *func_name_p;
    #####:  477:  func_name_p = ecma_compiled_code_resolve_function_name ((const ecma_compiled_code_t *) bytecode_p);
    #####:  478:  *func_name_p = ecma_make_magic_string_value (LIT_MAGIC_STRING_ANONYMOUS);
        -:  479:#endif /* JERRY_ESNEXT */
        -:  480:
    #####:  481:  ecma_object_t *global_object_p = ecma_builtin_get_global ();
        -:  482:
        -:  483:#if JERRY_BUILTIN_REALMS
    #####:  484:  JERRY_ASSERT (global_object_p == (ecma_object_t *) ecma_op_function_get_realm (bytecode_p));
        -:  485:#endif /* JERRY_BUILTIN_REALMS */
        -:  486:
    #####:  487:  ecma_object_t *global_env_p = ecma_get_global_environment (global_object_p);
    #####:  488:  ecma_builtin_id_t fallback_proto = ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE;
        -:  489:
        -:  490:#if JERRY_ESNEXT
    #####:  491:  ecma_object_t *new_target_p = JERRY_CONTEXT (current_new_target_p);
    #####:  492:  ecma_builtin_id_t fallback_ctor = ECMA_BUILTIN_ID_FUNCTION;
        -:  493:
    #####:  494:  if (JERRY_UNLIKELY (parse_opts & (ECMA_PARSE_GENERATOR_FUNCTION | ECMA_PARSE_ASYNC_FUNCTION)))
        -:  495:  {
    #####:  496:    fallback_proto = ECMA_BUILTIN_ID_ASYNC_GENERATOR;
    #####:  497:    fallback_ctor = ECMA_BUILTIN_ID_ASYNC_GENERATOR_FUNCTION;
        -:  498:
    #####:  499:    if (!(parse_opts & ECMA_PARSE_GENERATOR_FUNCTION))
        -:  500:    {
    #####:  501:      fallback_proto = ECMA_BUILTIN_ID_ASYNC_FUNCTION_PROTOTYPE;
    #####:  502:      fallback_ctor = ECMA_BUILTIN_ID_ASYNC_FUNCTION;
        -:  503:    }
    #####:  504:    else if (!(parse_opts & ECMA_PARSE_ASYNC_FUNCTION))
        -:  505:    {
    #####:  506:      fallback_proto = ECMA_BUILTIN_ID_GENERATOR;
    #####:  507:      fallback_ctor = ECMA_BUILTIN_ID_GENERATOR_FUNCTION;
        -:  508:    }
        -:  509:  }
        -:  510:
    #####:  511:  if (new_target_p == NULL)
        -:  512:  {
    #####:  513:    new_target_p = ecma_builtin_get (fallback_ctor);
        -:  514:  }
        -:  515:
    #####:  516:  ecma_object_t *proto = ecma_op_get_prototype_from_constructor (new_target_p, fallback_proto);
        -:  517:
    #####:  518:  if (JERRY_UNLIKELY (proto == NULL))
        -:  519:  {
    #####:  520:    ecma_bytecode_deref (bytecode_p);
    #####:  521:    return ECMA_VALUE_ERROR;
        -:  522:  }
        -:  523:#endif /* JERRY_ESNEXT */
        -:  524:
    #####:  525:  ecma_object_t *func_obj_p = ecma_op_create_function_object (global_env_p, bytecode_p, fallback_proto);
        -:  526:
        -:  527:#if JERRY_ESNEXT
    #####:  528:  ECMA_SET_NON_NULL_POINTER (func_obj_p->u2.prototype_cp, proto);
    #####:  529:  ecma_deref_object (proto);
        -:  530:#endif /* JERRY_ESNEXT */
        -:  531:
    #####:  532:  ecma_bytecode_deref (bytecode_p);
    #####:  533:  return ecma_make_object_value (func_obj_p);
        -:  534:} /* ecma_op_create_dynamic_function */
        -:  535:
        -:  536:/**
        -:  537: * Function object creation operation.
        -:  538: *
        -:  539: * See also: ECMA-262 v5, 13.2
        -:  540: *
        -:  541: * @return pointer to newly created Function object
        -:  542: */
        -:  543:ecma_object_t *
    #####:  544:ecma_op_create_simple_function_object (ecma_object_t *scope_p, /**< function's scope */
        -:  545:                                       const ecma_compiled_code_t *bytecode_data_p) /**< byte-code array */
        -:  546:{
    #####:  547:  return ecma_op_create_function_object (scope_p, bytecode_data_p, ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  548:} /* ecma_op_create_simple_function_object */
        -:  549:
        -:  550:#if JERRY_ESNEXT
        -:  551:
        -:  552:/**
        -:  553: * Create a function object with the appropriate prototype.
        -:  554: *
        -:  555: * @return pointer to newly created Function object
        -:  556: */
        -:  557:ecma_object_t *
        4:  558:ecma_op_create_any_function_object (ecma_object_t *scope_p, /**< function's scope */
        -:  559:                                    const ecma_compiled_code_t *bytecode_data_p) /**< byte-code array */
        -:  560:{
        -:  561:  ecma_builtin_id_t proto_id;
        -:  562:
        4:  563:  switch (CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags))
        -:  564:  {
    #####:  565:    case CBC_FUNCTION_GENERATOR:
        -:  566:    {
    #####:  567:      proto_id = ECMA_BUILTIN_ID_GENERATOR;
    #####:  568:      break;
        -:  569:    }
    #####:  570:    case CBC_FUNCTION_ASYNC:
        -:  571:    {
    #####:  572:      proto_id = ECMA_BUILTIN_ID_ASYNC_FUNCTION_PROTOTYPE;
    #####:  573:      break;
        -:  574:    }
    #####:  575:    case CBC_FUNCTION_ASYNC_GENERATOR:
        -:  576:    {
    #####:  577:      proto_id = ECMA_BUILTIN_ID_ASYNC_GENERATOR;
    #####:  578:      break;
        -:  579:    }
        4:  580:    default:
        -:  581:    {
        4:  582:      proto_id = ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE;
        4:  583:      break;
        -:  584:    }
        -:  585:  }
        -:  586:
        4:  587:  return ecma_op_create_function_object (scope_p, bytecode_data_p, proto_id);
        -:  588:} /* ecma_op_create_any_function_object */
        -:  589:
        -:  590:/**
        -:  591: * Arrow function object creation operation.
        -:  592: *
        -:  593: * See also: ES2015, 9.2.12
        -:  594: *
        -:  595: * @return pointer to newly created Function object
        -:  596: */
        -:  597:ecma_object_t *
        1:  598:ecma_op_create_arrow_function_object (ecma_object_t *scope_p, /**< function's scope */
        -:  599:                                      const ecma_compiled_code_t *bytecode_data_p, /**< byte-code array */
        -:  600:                                      ecma_value_t this_binding) /**< value of 'this' binding */
        -:  601:{
        -:  602:  ecma_object_t *prototype_obj_p;
        -:  603:
        1:  604:  if (CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags) == CBC_FUNCTION_ARROW)
        -:  605:  {
        1:  606:    prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  607:  }
        -:  608:  else
        -:  609:  {
    #####:  610:    JERRY_ASSERT (CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags) == CBC_FUNCTION_ASYNC_ARROW);
    #####:  611:    prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_ASYNC_FUNCTION_PROTOTYPE);
        -:  612:  }
        -:  613:
        1:  614:  size_t arrow_function_object_size = sizeof (ecma_arrow_function_t);
        -:  615:
        -:  616:#if JERRY_SNAPSHOT_EXEC
    #####:  617:  if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)
        -:  618:  {
    #####:  619:    arrow_function_object_size = sizeof (ecma_static_arrow_function_t);
        -:  620:  }
        -:  621:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  622:
        1:  623:  ecma_object_t *func_p = ecma_create_object (prototype_obj_p,
        -:  624:                                              arrow_function_object_size,
        -:  625:                                              ECMA_OBJECT_TYPE_FUNCTION);
        -:  626:
        1:  627:  ecma_arrow_function_t *arrow_func_p = (ecma_arrow_function_t *) func_p;
        -:  628:
        1:  629:  ECMA_SET_NON_NULL_POINTER_TAG (arrow_func_p->header.u.function.scope_cp, scope_p, 0);
        -:  630:
        -:  631:#if JERRY_SNAPSHOT_EXEC
    #####:  632:  if ((bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION))
        -:  633:  {
    #####:  634:    arrow_func_p->header.u.function.bytecode_cp = ECMA_NULL_POINTER;
    #####:  635:    ((ecma_static_arrow_function_t *) func_p)->bytecode_p = bytecode_data_p;
        -:  636:  }
        -:  637:  else
        -:  638:  {
        -:  639:#endif /* JERRY_SNAPSHOT_EXEC */
        1:  640:    ECMA_SET_INTERNAL_VALUE_POINTER (arrow_func_p->header.u.function.bytecode_cp, bytecode_data_p);
        1:  641:    ecma_bytecode_ref ((ecma_compiled_code_t *) bytecode_data_p);
        -:  642:#if JERRY_SNAPSHOT_EXEC
        -:  643:  }
        -:  644:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  645:
        1:  646:  arrow_func_p->this_binding = ecma_copy_value_if_not_object (this_binding);
        1:  647:  arrow_func_p->new_target = ECMA_VALUE_UNDEFINED;
        -:  648:
        1:  649:  if (JERRY_CONTEXT (current_new_target_p) != NULL)
        -:  650:  {
    #####:  651:    arrow_func_p->new_target = ecma_make_object_value (JERRY_CONTEXT (current_new_target_p));
        -:  652:  }
        1:  653:  return func_p;
        -:  654:} /* ecma_op_create_arrow_function_object */
        -:  655:
        -:  656:#endif /* JERRY_ESNEXT */
        -:  657:
        -:  658:/**
        -:  659: * External function object creation operation.
        -:  660: *
        -:  661: * Note:
        -:  662: *      external function object is implementation-defined object type
        -:  663: *      that represent functions implemented in native code, using Embedding API
        -:  664: *
        -:  665: * @return pointer to newly created external function object
        -:  666: */
        -:  667:ecma_object_t *
        5:  668:ecma_op_create_external_function_object (ecma_native_handler_t handler_cb) /**< pointer to external native handler */
        -:  669:{
        5:  670:  ecma_object_t *prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  671:
        5:  672:  ecma_object_t *function_obj_p = ecma_create_object (prototype_obj_p,
        -:  673:                                                      sizeof (ecma_native_function_t),
        -:  674:                                                      ECMA_OBJECT_TYPE_NATIVE_FUNCTION);
        -:  675:
        -:  676:  /*
        -:  677:   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_NATIVE_FUNCTION type.
        -:  678:   *
        -:  679:   * See also: ecma_object_get_class_name
        -:  680:   */
        -:  681:
        5:  682:  ecma_native_function_t *native_function_p = (ecma_native_function_t *) function_obj_p;
        -:  683:#if JERRY_BUILTIN_REALMS
        5:  684:  ECMA_SET_INTERNAL_VALUE_POINTER (native_function_p->realm_value,
        -:  685:                                   ecma_builtin_get_global ());
        -:  686:#endif /* JERRY_BUILTIN_REALMS */
        5:  687:  native_function_p->native_handler_cb = handler_cb;
        -:  688:
        5:  689:  return function_obj_p;
        -:  690:} /* ecma_op_create_external_function_object */
        -:  691:
        -:  692:#if JERRY_ESNEXT
        -:  693:
        -:  694:/**
        -:  695: * Create built-in native handler object.
        -:  696: *
        -:  697: * @return pointer to newly created native handler object
        -:  698: */
        -:  699:ecma_object_t *
    #####:  700:ecma_op_create_native_handler (ecma_native_handler_id_t id, /**< handler id */
        -:  701:                               size_t object_size) /**< created object size */
        -:  702:{
    #####:  703:  ecma_object_t *prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  704:
    #####:  705:  ecma_object_t *function_obj_p = ecma_create_object (prototype_obj_p,
        -:  706:                                                      object_size,
        -:  707:                                                      ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
        -:  708:
    #####:  709:  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) function_obj_p;
    #####:  710:  ext_func_obj_p->u.built_in.id = ECMA_BUILTIN_ID_HANDLER;
    #####:  711:  ext_func_obj_p->u.built_in.routine_id = (uint8_t) id;
    #####:  712:  ext_func_obj_p->u.built_in.u2.routine_flags = ECMA_NATIVE_HANDLER_FLAGS_NONE;
        -:  713:
        -:  714:#if JERRY_BUILTIN_REALMS
    #####:  715:  ECMA_SET_INTERNAL_VALUE_POINTER (ext_func_obj_p->u.built_in.realm_value,
        -:  716:                                   ecma_builtin_get_global ());
        -:  717:#endif /* JERRY_BUILTIN_REALMS */
        -:  718:
    #####:  719:  return function_obj_p;
        -:  720:} /* ecma_op_create_native_handler */
        -:  721:
        -:  722:#endif /* JERRY_ESNEXT */
        -:  723:
        -:  724:/**
        -:  725: * Get compiled code of a function object.
        -:  726: *
        -:  727: * @return compiled code
        -:  728: */
        -:  729:extern inline const ecma_compiled_code_t * JERRY_ATTR_ALWAYS_INLINE
    #####:  730:ecma_op_function_get_compiled_code (ecma_extended_object_t *function_p) /**< function pointer */
        -:  731:{
        -:  732:#if JERRY_SNAPSHOT_EXEC
    #####:  733:  if (JERRY_LIKELY (function_p->u.function.bytecode_cp != ECMA_NULL_POINTER))
        -:  734:  {
    #####:  735:    return ECMA_GET_INTERNAL_VALUE_POINTER (const ecma_compiled_code_t,
        -:  736:                                            function_p->u.function.bytecode_cp);
        -:  737:  }
        -:  738:
    #####:  739:  return ((ecma_static_function_t *) function_p)->bytecode_p;
        -:  740:#else /* !JERRY_SNAPSHOT_EXEC */
        7:  741:  return ECMA_GET_INTERNAL_VALUE_POINTER (const ecma_compiled_code_t,
        -:  742:                                          function_p->u.function.bytecode_cp);
        -:  743:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  744:} /* ecma_op_function_get_compiled_code */
        -:  745:
        -:  746:#if JERRY_BUILTIN_REALMS
        -:  747:
        -:  748:/**
        -:  749: * Get realm from a byte code.
        -:  750: *
        -:  751: * Note:
        -:  752: *   Does not increase the reference counter.
        -:  753: *
        -:  754: * @return pointer to realm (global) object
        -:  755: */
        -:  756:extern inline ecma_global_object_t * JERRY_ATTR_ALWAYS_INLINE
        1:  757:ecma_op_function_get_realm (const ecma_compiled_code_t *bytecode_header_p) /**< byte code header */
        -:  758:{
        -:  759:#if JERRY_SNAPSHOT_EXEC
    #####:  760:  if (JERRY_UNLIKELY (bytecode_header_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION))
        -:  761:  {
    #####:  762:    return (ecma_global_object_t *) ecma_builtin_get_global ();
        -:  763:  }
        -:  764:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  765:
        8:  766:  ecma_value_t script_value = ((cbc_uint8_arguments_t *) bytecode_header_p)->script_value;
        8:  767:  cbc_script_t *script_p = ECMA_GET_INTERNAL_VALUE_POINTER (cbc_script_t, script_value);
        -:  768:
        8:  769:  return (ecma_global_object_t *) script_p->realm_p;
        -:  770:} /* ecma_op_function_get_realm */
        -:  771:
        -:  772:/**
        -:  773: * Get realm from a function
        -:  774: *
        -:  775: * Note:
        -:  776: *   Does not increase the reference counter.
        -:  777: *
        -:  778: * @return realm (global) object
        -:  779: */
        -:  780:ecma_global_object_t *
    #####:  781:ecma_op_function_get_function_realm (ecma_object_t *func_obj_p) /**< function object */
        -:  782:{
        -:  783:  while (true)
    #####:  784:  {
    #####:  785:    ecma_object_type_t type = ecma_get_object_type (func_obj_p);
        -:  786:
    #####:  787:    if (type == ECMA_OBJECT_TYPE_FUNCTION)
        -:  788:    {
    #####:  789:      ecma_extended_object_t *ext_function_obj_p = (ecma_extended_object_t *) func_obj_p;
    #####:  790:      const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_function_obj_p);
    #####:  791:      return ecma_op_function_get_realm (bytecode_data_p);
        -:  792:    }
        -:  793:
    #####:  794:    if (type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION)
        -:  795:    {
    #####:  796:      ecma_extended_object_t *ext_function_obj_p = (ecma_extended_object_t *) func_obj_p;
    #####:  797:      return ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t,
        -:  798:                                              ext_function_obj_p->u.built_in.realm_value);
        -:  799:    }
        -:  800:
    #####:  801:    if (type == ECMA_OBJECT_TYPE_NATIVE_FUNCTION)
        -:  802:    {
    #####:  803:      ecma_native_function_t *native_function_p = (ecma_native_function_t *) func_obj_p;
    #####:  804:      return ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t,
        -:  805:                                              native_function_p->realm_value);
        -:  806:    }
        -:  807:
        -:  808:#if JERRY_ESNEXT
    #####:  809:    if (type == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION)
        -:  810:    {
    #####:  811:      ecma_value_t script_value = ((ecma_extended_object_t *) func_obj_p)->u.constructor_function.script_value;
    #####:  812:      cbc_script_t *script_p = ECMA_GET_INTERNAL_VALUE_POINTER (cbc_script_t, script_value);
        -:  813:
    #####:  814:      return (ecma_global_object_t *) script_p->realm_p;
        -:  815:    }
        -:  816:#endif /* JERRY_ESNEXT */
        -:  817:
        -:  818:#if JERRY_BUILTIN_PROXY
    #####:  819:    if (ECMA_OBJECT_IS_PROXY (func_obj_p))
        -:  820:    {
    #####:  821:      ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) func_obj_p;
    #####:  822:      if (ecma_is_value_null (proxy_obj_p->handler))
        -:  823:      {
    #####:  824:        ecma_raise_type_error (ECMA_ERR_MSG ("Prototype from revoked Proxy is invalid"));
    #####:  825:        return NULL;
        -:  826:      }
    #####:  827:      func_obj_p = ecma_get_object_from_value (proxy_obj_p->target);
    #####:  828:      continue;
        -:  829:    }
        -:  830:#endif /* JERRY_BUILTIN_PROXY */
        -:  831:
    #####:  832:    JERRY_ASSERT (type == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
    #####:  833:    ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) func_obj_p;
    #####:  834:    func_obj_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,
        -:  835:                                                             bound_func_p->header.u.bound_function.target_function);
        -:  836:  }
        -:  837:} /* ecma_op_function_get_function_realm */
        -:  838:
        -:  839:#endif /* JERRY_BUILTIN_REALMS */
        -:  840:
        -:  841:/**
        -:  842: * 15.3.5.3 implementation of [[HasInstance]] for Function objects
        -:  843: *
        -:  844: * @return true/false - if arguments are valid
        -:  845: *         error - otherwise
        -:  846: *         Returned value must be freed with ecma_free_value
        -:  847: */
        -:  848:ecma_value_t
    #####:  849:ecma_op_function_has_instance (ecma_object_t *func_obj_p, /**< Function object */
        -:  850:                               ecma_value_t value) /**< argument 'V' */
        -:  851:{
    #####:  852:  JERRY_ASSERT (func_obj_p != NULL
        -:  853:                && !ecma_is_lexical_environment (func_obj_p));
        -:  854:
    #####:  855:  if (!ecma_is_value_object (value))
        -:  856:  {
    #####:  857:    return ECMA_VALUE_FALSE;
        -:  858:  }
        -:  859:
    #####:  860:  while (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION)
        -:  861:  {
    #####:  862:    JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -:  863:
        -:  864:    /* 1. 3. */
    #####:  865:    ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) func_obj_p;
        -:  866:
    #####:  867:    func_obj_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,
        -:  868:                                                             bound_func_p->header.u.bound_function.target_function);
        -:  869:  }
        -:  870:
    #####:  871:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION
        -:  872:                || ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION
        -:  873:                || ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION
        -:  874:                || ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_NATIVE_FUNCTION
        -:  875:                || ECMA_OBJECT_IS_PROXY (func_obj_p));
        -:  876:
    #####:  877:  ecma_object_t *v_obj_p = ecma_get_object_from_value (value);
        -:  878:
    #####:  879:  ecma_value_t prototype_obj_value = ecma_op_object_get_by_magic_id (func_obj_p,
        -:  880:                                                                     LIT_MAGIC_STRING_PROTOTYPE);
        -:  881:
    #####:  882:  if (ECMA_IS_VALUE_ERROR (prototype_obj_value))
        -:  883:  {
    #####:  884:    return prototype_obj_value;
        -:  885:  }
        -:  886:
    #####:  887:  if (!ecma_is_value_object (prototype_obj_value))
        -:  888:  {
    #####:  889:    ecma_free_value (prototype_obj_value);
    #####:  890:    return ecma_raise_type_error (ECMA_ERR_MSG ("Object expected"));
        -:  891:  }
        -:  892:
    #####:  893:  ecma_object_t *prototype_obj_p = ecma_get_object_from_value (prototype_obj_value);
    #####:  894:  JERRY_ASSERT (prototype_obj_p != NULL);
        -:  895:
        -:  896:#if JERRY_BUILTIN_PROXY
    #####:  897:  ecma_value_t result = ECMA_VALUE_ERROR;
        -:  898:#else /* !JERRY_BUILTIN_PROXY */
    #####:  899:  ecma_value_t result = ECMA_VALUE_FALSE;
        -:  900:#endif /* JERRY_BUILTIN_PROXY */
        -:  901:
    #####:  902:  ecma_ref_object (v_obj_p);
        -:  903:
        -:  904:  while (true)
    #####:  905:  {
    #####:  906:    ecma_object_t *current_proto_p = ecma_op_object_get_prototype_of (v_obj_p);
    #####:  907:    ecma_deref_object (v_obj_p);
        -:  908:
    #####:  909:    if (current_proto_p == NULL)
        -:  910:    {
        -:  911:#if JERRY_BUILTIN_PROXY
    #####:  912:      result = ECMA_VALUE_FALSE;
        -:  913:#endif /* JERRY_BUILTIN_PROXY */
    #####:  914:      break;
        -:  915:    }
    #####:  916:    else if (current_proto_p == ECMA_OBJECT_POINTER_ERROR)
        -:  917:    {
    #####:  918:      break;
        -:  919:    }
        -:  920:
    #####:  921:    if (current_proto_p == prototype_obj_p)
        -:  922:    {
    #####:  923:      ecma_deref_object (current_proto_p);
    #####:  924:      result = ECMA_VALUE_TRUE;
    #####:  925:      break;
        -:  926:    }
        -:  927:
        -:  928:    /* Advance up on prototype chain. */
    #####:  929:    v_obj_p = current_proto_p;
        -:  930:  }
        -:  931:
    #####:  932:  ecma_deref_object (prototype_obj_p);
    #####:  933:  return result;
        -:  934:} /* ecma_op_function_has_instance */
        -:  935:
        -:  936:#if JERRY_ESNEXT
        -:  937:
        -:  938:/**
        -:  939: * GetSuperConstructor operation for class methods
        -:  940: *
        -:  941: * See also: ECMAScript v6, 12.3.5.2
        -:  942: *
        -:  943: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  944: *         super constructor - otherwise
        -:  945: */
        -:  946:ecma_value_t
    #####:  947:ecma_op_function_get_super_constructor (ecma_object_t *func_obj_p) /**< function object */
        -:  948:{
    #####:  949:  ecma_object_t *super_ctor_p = ecma_op_object_get_prototype_of (func_obj_p);
        -:  950:
    #####:  951:  if (JERRY_UNLIKELY (super_ctor_p == ECMA_OBJECT_POINTER_ERROR))
        -:  952:  {
    #####:  953:    return ECMA_VALUE_ERROR;
        -:  954:  }
    #####:  955:  else if (super_ctor_p == NULL || !ecma_object_is_constructor (super_ctor_p))
        -:  956:  {
    #####:  957:    if (super_ctor_p != NULL)
        -:  958:    {
    #####:  959:      ecma_deref_object (super_ctor_p);
        -:  960:    }
    #####:  961:    return ecma_raise_type_error (ECMA_ERR_MSG ("Super binding must be a constructor"));
        -:  962:  }
        -:  963:
    #####:  964:  return ecma_make_object_value (super_ctor_p);
        -:  965:} /* ecma_op_function_get_super_constructor */
        -:  966:#endif /* JERRY_ESNEXT */
        -:  967:
        -:  968:/**
        -:  969: * Ordinary internal method: GetPrototypeFromConstructor (constructor, intrinsicDefaultProto)
        -:  970: *
        -:  971: * See also:
        -:  972: *   - ECMAScript v6, 9.1.15
        -:  973: *   - ECMAScript v10, 9.1.14
        -:  974: *
        -:  975: * @return NULL - if the operation fail (exception on the global context is raised)
        -:  976: *         pointer to the prototype object - otherwise
        -:  977: */
        -:  978:ecma_object_t *
    #####:  979:ecma_op_get_prototype_from_constructor (ecma_object_t *ctor_obj_p, /**< constructor to get prototype from  */
        -:  980:                                        ecma_builtin_id_t default_proto_id) /**< intrinsicDefaultProto */
        -:  981:{
    #####:  982:  JERRY_ASSERT (ecma_op_object_is_callable (ctor_obj_p));
    #####:  983:  JERRY_ASSERT (default_proto_id < ECMA_BUILTIN_ID__COUNT);
        -:  984:
    #####:  985:  ecma_value_t proto = ecma_op_object_get_by_magic_id (ctor_obj_p, LIT_MAGIC_STRING_PROTOTYPE);
        -:  986:
    #####:  987:  if (ECMA_IS_VALUE_ERROR (proto))
        -:  988:  {
    #####:  989:    return NULL;
        -:  990:  }
        -:  991:
        -:  992:  ecma_object_t *proto_obj_p;
        -:  993:
    #####:  994:  if (!ecma_is_value_object (proto))
        -:  995:  {
    #####:  996:    ecma_free_value (proto);
        -:  997:
        -:  998:#if JERRY_BUILTIN_PROXY
    #####:  999:    if (ECMA_OBJECT_IS_PROXY (ctor_obj_p))
        -: 1000:    {
    #####: 1001:      ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) ctor_obj_p;
    #####: 1002:      if (ecma_is_value_null (proxy_obj_p->handler))
        -: 1003:      {
    #####: 1004:        ecma_raise_type_error (ECMA_ERR_MSG ("Prototype from revoked Proxy is invalid"));
    #####: 1005:        return NULL;
        -: 1006:      }
        -: 1007:    }
        -: 1008:#endif /* JERRY_BUILTIN_PROXY */
        -: 1009:
        -: 1010:#if JERRY_BUILTIN_REALMS
    #####: 1011:    proto_obj_p = ecma_builtin_get_from_realm (ecma_op_function_get_function_realm (ctor_obj_p), default_proto_id);
        -: 1012:#else /* !JERRY_BUILTIN_REALMS */
    #####: 1013:    proto_obj_p = ecma_builtin_get (default_proto_id);
        -: 1014:#endif /* JERRY_BUILTIN_REALMS */
    #####: 1015:    ecma_ref_object (proto_obj_p);
        -: 1016:  }
        -: 1017:  else
        -: 1018:  {
    #####: 1019:    proto_obj_p = ecma_get_object_from_value (proto);
        -: 1020:  }
        -: 1021:
    #####: 1022:  return proto_obj_p;
        -: 1023:} /* ecma_op_get_prototype_from_constructor */
        -: 1024:
        -: 1025:/**
        -: 1026: * Perform a JavaScript function object method call.
        -: 1027: *
        -: 1028: * The input function object should be a pure JavaScript method
        -: 1029: *
        -: 1030: * @return the result of the function call.
        -: 1031: */
        -: 1032:static ecma_value_t
        7: 1033:ecma_op_function_call_simple (ecma_object_t *func_obj_p, /**< Function object */
        -: 1034:                              ecma_value_t this_arg_value, /**< 'this' argument's value */
        -: 1035:                              const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1036:                              uint32_t arguments_list_len) /**< length of arguments list */
        -: 1037:{
        7: 1038:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION);
        -: 1039:
        7: 1040:  vm_frame_ctx_shared_args_t shared_args;
        7: 1041:  shared_args.header.status_flags = VM_FRAME_CTX_SHARED_HAS_ARG_LIST;
        7: 1042:  shared_args.header.function_object_p = func_obj_p;
        7: 1043:  shared_args.arg_list_p = arguments_list_p;
        7: 1044:  shared_args.arg_list_len = arguments_list_len;
        -: 1045:
        -: 1046:  /* Entering Function Code (ECMA-262 v5, 10.4.3) */
        7: 1047:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_obj_p;
        -: 1048:
        7: 1049:  ecma_object_t *scope_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,
        -: 1050:                                                                       ext_func_p->u.function.scope_cp);
        -: 1051:
        -: 1052:  /* 8. */
        7: 1053:  ecma_value_t this_binding = this_arg_value;
        -: 1054:
        7: 1055:  const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);
        7: 1056:  uint16_t status_flags = bytecode_data_p->status_flags;
        -: 1057:
        7: 1058:  shared_args.header.bytecode_header_p = bytecode_data_p;
        -: 1059:
        -: 1060:#if JERRY_BUILTIN_REALMS
        7: 1061:  ecma_global_object_t *realm_p = ecma_op_function_get_realm (bytecode_data_p);
        -: 1062:#endif /* JERRY_BUILTIN_REALMS */
        -: 1063:
        -: 1064:  /* 1. */
        -: 1065:#if JERRY_ESNEXT
        7: 1066:  if (JERRY_UNLIKELY (CBC_FUNCTION_IS_ARROW (status_flags)))
        -: 1067:  {
        2: 1068:    ecma_arrow_function_t *arrow_func_p = (ecma_arrow_function_t *) func_obj_p;
        -: 1069:
        2: 1070:    if (ecma_is_value_undefined (arrow_func_p->new_target))
        -: 1071:    {
        2: 1072:      JERRY_CONTEXT (current_new_target_p) = NULL;
        -: 1073:    }
        -: 1074:    else
        -: 1075:    {
    #####: 1076:      JERRY_CONTEXT (current_new_target_p) = ecma_get_object_from_value (arrow_func_p->new_target);
        -: 1077:    }
        2: 1078:    this_binding = arrow_func_p->this_binding;
        -: 1079:  }
        -: 1080:  else
        -: 1081:  {
        5: 1082:    shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_NON_ARROW_FUNC;
        -: 1083:#endif /* JERRY_ESNEXT */
        -: 1084:
        5: 1085:    if (!(status_flags & CBC_CODE_FLAGS_STRICT_MODE))
        -: 1086:    {
        5: 1087:      if (ecma_is_value_undefined (this_binding)
        4: 1088:          || ecma_is_value_null (this_binding))
        -: 1089:      {
        -: 1090:        /* 2. */
        -: 1091:#if JERRY_BUILTIN_REALMS
        1: 1092:        this_binding = realm_p->this_binding;
        -: 1093:#else /* !JERRY_BUILTIN_REALMS */
    #####: 1094:        this_binding = ecma_make_object_value (ecma_builtin_get_global ());
        -: 1095:#endif /* JERRY_BUILTIN_REALMS */
        -: 1096:      }
        4: 1097:      else if (!ecma_is_value_object (this_binding))
        -: 1098:      {
        -: 1099:        /* 3., 4. */
    #####: 1100:        this_binding = ecma_op_to_object (this_binding);
    #####: 1101:        shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_THIS;
        -: 1102:
    #####: 1103:        JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (this_binding));
        -: 1104:      }
        -: 1105:    }
        -: 1106:#if JERRY_ESNEXT
        -: 1107:  }
        -: 1108:#endif /* JERRY_ESNEXT */
        -: 1109:
        -: 1110:  /* 5. */
        7: 1111:  if (!(status_flags & CBC_CODE_FLAGS_LEXICAL_ENV_NOT_NEEDED))
        -: 1112:  {
        1: 1113:    shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV;
        1: 1114:    scope_p = ecma_create_decl_lex_env (scope_p);
        -: 1115:  }
        -: 1116:
        -: 1117:  ecma_value_t ret_value;
        -: 1118:
        -: 1119:#if JERRY_ESNEXT
        7: 1120:  if (JERRY_UNLIKELY (CBC_FUNCTION_GET_TYPE (status_flags) == CBC_FUNCTION_CONSTRUCTOR))
        -: 1121:  {
    #####: 1122:    if (JERRY_CONTEXT (current_new_target_p) == NULL)
        -: 1123:    {
    #####: 1124:      ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Class constructor requires 'new'"));
    #####: 1125:      goto exit;
        -: 1126:    }
        -: 1127:
    #####: 1128:    ecma_value_t lexical_this = this_binding;
        -: 1129:
    #####: 1130:    if (ECMA_GET_THIRD_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))
        -: 1131:    {
    #####: 1132:      shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_HERITAGE_PRESENT;
    #####: 1133:      lexical_this = ECMA_VALUE_UNINITIALIZED;
        -: 1134:    }
        -: 1135:
    #####: 1136:    ecma_op_create_environment_record (scope_p, lexical_this, func_obj_p);
        -: 1137:  }
        -: 1138:#endif /* JERRY_ESNEXT */
        -: 1139:
        -: 1140:#if JERRY_BUILTIN_REALMS
        7: 1141:  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);
        7: 1142:  JERRY_CONTEXT (global_object_p) = realm_p;
        -: 1143:#endif /* JERRY_BUILTIN_REALMS */
        -: 1144:
        7: 1145:  ret_value = vm_run (&shared_args.header, this_binding, scope_p);
        -: 1146:
        -: 1147:#if JERRY_BUILTIN_REALMS
        7: 1148:  JERRY_CONTEXT (global_object_p) = saved_global_object_p;
        -: 1149:#endif /* JERRY_BUILTIN_REALMS */
        -: 1150:
        -: 1151:#if JERRY_ESNEXT
        -: 1152:  /* ECMAScript v6, 9.2.2.13 */
        7: 1153:  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_HERITAGE_PRESENT))
        -: 1154:  {
    #####: 1155:    if (!ECMA_IS_VALUE_ERROR (ret_value) && !ecma_is_value_object (ret_value))
        -: 1156:    {
    #####: 1157:      if (!ecma_is_value_undefined (ret_value))
        -: 1158:      {
    #####: 1159:        ecma_free_value (ret_value);
    #####: 1160:        ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Derived constructors may only return object or undefined"));
        -: 1161:      }
        -: 1162:      else
        -: 1163:      {
    #####: 1164:        ret_value = ecma_op_get_this_binding (scope_p);
        -: 1165:      }
        -: 1166:    }
        -: 1167:  }
        -: 1168:
       14: 1169:exit:
        -: 1170:#endif /* JERRY_ESNEXT */
        -: 1171:
        7: 1172:  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV))
        -: 1173:  {
        1: 1174:    ecma_deref_object (scope_p);
        -: 1175:  }
        -: 1176:
        7: 1177:  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_THIS))
        -: 1178:  {
    #####: 1179:    ecma_free_value (this_binding);
        -: 1180:  }
        -: 1181:
        7: 1182:  return ret_value;
        -: 1183:} /* ecma_op_function_call_simple */
        -: 1184:
        -: 1185:/**
        -: 1186: * Perform a built-in method call.
        -: 1187: *
        -: 1188: * @return the result of the function call.
        -: 1189: */
        -: 1190:static ecma_value_t JERRY_ATTR_NOINLINE
        2: 1191:ecma_op_function_call_native_built_in (ecma_object_t *func_obj_p, /**< Function object */
        -: 1192:                                       ecma_value_t this_arg_value, /**< 'this' argument's value */
        -: 1193:                                       const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1194:                                       uint32_t arguments_list_len) /**< length of arguments list */
        -: 1195:{
        2: 1196:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
        -: 1197:
        -: 1198:#if JERRY_BUILTIN_REALMS
        2: 1199:  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);
        -: 1200:
        2: 1201:  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) func_obj_p;
        2: 1202:  JERRY_CONTEXT (global_object_p) = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t,
        -: 1203:                                                                     ext_func_obj_p->u.built_in.realm_value);
        -: 1204:#endif /* JERRY_BUILTIN_REALMS */
        -: 1205:
        2: 1206:  ecma_value_t ret_value = ecma_builtin_dispatch_call (func_obj_p,
        -: 1207:                                                       this_arg_value,
        -: 1208:                                                       arguments_list_p,
        -: 1209:                                                       arguments_list_len);
        -: 1210:
        -: 1211:#if JERRY_BUILTIN_REALMS
        2: 1212:  JERRY_CONTEXT (global_object_p) = saved_global_object_p;
        -: 1213:#endif /* JERRY_BUILTIN_REALMS */
        2: 1214:  return ret_value;
        -: 1215:} /* ecma_op_function_call_native_built_in */
        -: 1216:
        -: 1217:/**
        -: 1218: * Perform a native C method call which was registered via the API.
        -: 1219: *
        -: 1220: * @return the result of the function call.
        -: 1221: */
        -: 1222:static ecma_value_t JERRY_ATTR_NOINLINE
    #####: 1223:ecma_op_function_call_native (ecma_object_t *func_obj_p, /**< Function object */
        -: 1224:                              ecma_value_t this_arg_value, /**< 'this' argument's value */
        -: 1225:                              const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1226:                              uint32_t arguments_list_len) /**< length of arguments list */
        -: 1227:{
    #####: 1228:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_NATIVE_FUNCTION);
        -: 1229:
    #####: 1230:  ecma_native_function_t *native_function_p = (ecma_native_function_t *) func_obj_p;
        -: 1231:
        -: 1232:#if JERRY_BUILTIN_REALMS
    #####: 1233:  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);
    #####: 1234:  JERRY_CONTEXT (global_object_p) = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t,
        -: 1235:                                                                     native_function_p->realm_value);
        -: 1236:#endif /* JERRY_BUILTIN_REALMS */
        -: 1237:
    #####: 1238:  jerry_call_info_t call_info;
    #####: 1239:  call_info.function = ecma_make_object_value (func_obj_p);
    #####: 1240:  call_info.this_value = this_arg_value;
        -: 1241:
        -: 1242:#if JERRY_ESNEXT
    #####: 1243:  ecma_object_t *new_target_p = JERRY_CONTEXT (current_new_target_p);
    #####: 1244:  call_info.new_target = (new_target_p == NULL) ? ECMA_VALUE_UNDEFINED : ecma_make_object_value (new_target_p);
        -: 1245:#else /* JERRY_ESNEXT */
    #####: 1246:  call_info.new_target = ECMA_VALUE_UNDEFINED;
        -: 1247:#endif /* JERRY_ESNEXT */
        -: 1248:
    #####: 1249:  JERRY_ASSERT (native_function_p->native_handler_cb != NULL);
    #####: 1250:  ecma_value_t ret_value = native_function_p->native_handler_cb (&call_info,
        -: 1251:                                                                 arguments_list_p,
        -: 1252:                                                                 arguments_list_len);
        -: 1253:#if JERRY_BUILTIN_REALMS
    #####: 1254:  JERRY_CONTEXT (global_object_p) = saved_global_object_p;
        -: 1255:#endif /* JERRY_BUILTIN_REALMS */
        -: 1256:
    #####: 1257:  if (JERRY_UNLIKELY (ecma_is_value_error_reference (ret_value)))
        -: 1258:  {
    #####: 1259:    ecma_raise_error_from_error_reference (ret_value);
    #####: 1260:    return ECMA_VALUE_ERROR;
        -: 1261:  }
        -: 1262:
        -: 1263:#if JERRY_DEBUGGER
        -: 1264:  JERRY_DEBUGGER_CLEAR_FLAGS (JERRY_DEBUGGER_VM_EXCEPTION_THROWN);
        -: 1265:#endif /* JERRY_DEBUGGER */
    #####: 1266:  return ret_value;
        -: 1267:} /* ecma_op_function_call_native */
        -: 1268:
        -: 1269:/**
        -: 1270: * Append the bound arguments into the given collection
        -: 1271: *
        -: 1272: * Note:
        -: 1273: *       - The whole bound chain is resolved
        -: 1274: *       - The first element of the collection contains the bounded this value
        -: 1275: *
        -: 1276: * @return target function of the bound function
        -: 1277: */
        -: 1278:JERRY_ATTR_NOINLINE static ecma_object_t *
    #####: 1279:ecma_op_bound_function_get_argument_list (ecma_object_t *func_obj_p, /**< bound bunction object */
        -: 1280:                                          ecma_collection_t *list_p) /**< list of arguments */
        -: 1281:{
    #####: 1282:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -: 1283:
    #####: 1284:  ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) func_obj_p;
        -: 1285:
    #####: 1286:  func_obj_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,
        -: 1287:                                                           bound_func_p->header.u.bound_function.target_function);
        -: 1288:
    #####: 1289:  ecma_value_t args_len_or_this = bound_func_p->header.u.bound_function.args_len_or_this;
        -: 1290:
    #####: 1291:  uint32_t args_length = 1;
        -: 1292:
    #####: 1293:  if (ecma_is_value_integer_number (args_len_or_this))
        -: 1294:  {
    #####: 1295:    args_length = (uint32_t) ecma_get_integer_from_value (args_len_or_this);
        -: 1296:  }
        -: 1297:
        -: 1298:  /* 5. */
    #####: 1299:  if (args_length != 1)
        -: 1300:  {
    #####: 1301:    const ecma_value_t *args_p = (const ecma_value_t *) (bound_func_p + 1);
    #####: 1302:    list_p->buffer_p[0] = *args_p;
        -: 1303:
    #####: 1304:    if (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION)
        -: 1305:    {
    #####: 1306:      func_obj_p = ecma_op_bound_function_get_argument_list (func_obj_p, list_p);
        -: 1307:    }
    #####: 1308:    ecma_collection_append (list_p, args_p + 1, args_length - 1);
        -: 1309:  }
        -: 1310:  else
        -: 1311:  {
    #####: 1312:    list_p->buffer_p[0] = args_len_or_this;
        -: 1313:  }
        -: 1314:
    #####: 1315:  return func_obj_p;
        -: 1316:} /* ecma_op_bound_function_get_argument_list */
        -: 1317:
        -: 1318:/**
        -: 1319: * [[Call]] internal method for bound function objects
        -: 1320: *
        -: 1321: * @return ecma value
        -: 1322: *         Returned value must be freed with ecma_free_value
        -: 1323: */
        -: 1324:static ecma_value_t JERRY_ATTR_NOINLINE
    #####: 1325:ecma_op_function_call_bound (ecma_object_t *func_obj_p, /**< Function object */
        -: 1326:                             const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1327:                             uint32_t arguments_list_len) /**< length of arguments list */
        -: 1328:{
    #####: 1329:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -: 1330:
    #####: 1331:  JERRY_CONTEXT (status_flags) &= (uint32_t) ~ECMA_STATUS_DIRECT_EVAL;
        -: 1332:
    #####: 1333:  ecma_collection_t *bound_arg_list_p = ecma_new_collection ();
    #####: 1334:  ecma_collection_push_back (bound_arg_list_p, ECMA_VALUE_EMPTY);
        -: 1335:
    #####: 1336:  ecma_object_t *target_obj_p = ecma_op_bound_function_get_argument_list (func_obj_p, bound_arg_list_p);
        -: 1337:
    #####: 1338:  ecma_collection_append (bound_arg_list_p, arguments_list_p, arguments_list_len);
        -: 1339:
    #####: 1340:  JERRY_ASSERT (!ecma_is_value_empty (bound_arg_list_p->buffer_p[0]));
        -: 1341:
    #####: 1342:  ecma_value_t ret_value = ecma_op_function_call (target_obj_p,
    #####: 1343:                                                  bound_arg_list_p->buffer_p[0],
    #####: 1344:                                                  bound_arg_list_p->buffer_p + 1,
    #####: 1345:                                                  (uint32_t) (bound_arg_list_p->item_count - 1));
        -: 1346:
    #####: 1347:  ecma_collection_destroy (bound_arg_list_p);
        -: 1348:
    #####: 1349:  return ret_value;
        -: 1350:} /* ecma_op_function_call_bound */
        -: 1351:
        -: 1352:/**
        -: 1353: * [[Call]] implementation for Function objects,
        -: 1354: * created through 13.2 (ECMA_OBJECT_TYPE_FUNCTION)
        -: 1355: * or 15.3.4.5 (ECMA_OBJECT_TYPE_BOUND_FUNCTION),
        -: 1356: * and for built-in Function objects
        -: 1357: * from section 15 (ECMA_OBJECT_TYPE_FUNCTION).
        -: 1358: *
        -: 1359: * @return ecma value
        -: 1360: *         Returned value must be freed with ecma_free_value
        -: 1361: */
        -: 1362:ecma_value_t
        9: 1363:ecma_op_function_call (ecma_object_t *func_obj_p, /**< Function object */
        -: 1364:                       ecma_value_t this_arg_value, /**< 'this' argument's value */
        -: 1365:                       const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1366:                       uint32_t arguments_list_len) /**< length of arguments list */
        -: 1367:{
        9: 1368:  JERRY_ASSERT (func_obj_p != NULL
        -: 1369:                && !ecma_is_lexical_environment (func_obj_p));
        9: 1370:  JERRY_ASSERT (ecma_op_object_is_callable (func_obj_p));
        -: 1371:
        9: 1372:  ECMA_CHECK_STACK_USAGE ();
        -: 1373:
        9: 1374:  const ecma_object_type_t type = ecma_get_object_type (func_obj_p);
        -: 1375:
        -: 1376:#if JERRY_BUILTIN_PROXY
        9: 1377:  if (ECMA_OBJECT_TYPE_IS_PROXY (type))
        -: 1378:  {
    #####: 1379:    return ecma_proxy_object_call (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
        -: 1380:  }
        -: 1381:#endif /* JERRY_BUILTIN_PROXY */
        -: 1382:
        -: 1383:#if JERRY_ESNEXT
        9: 1384:  ecma_object_t *old_new_target_p = JERRY_CONTEXT (current_new_target_p);
        9: 1385:  if (JERRY_UNLIKELY (!(JERRY_CONTEXT (status_flags) & ECMA_STATUS_DIRECT_EVAL)))
        -: 1386:  {
        9: 1387:    JERRY_CONTEXT (current_new_target_p) = NULL;
        -: 1388:  }
        -: 1389:#endif /* JERRY_ESNEXT */
        -: 1390:
        -: 1391:  ecma_value_t result;
        -: 1392:
        9: 1393:  if (JERRY_LIKELY (type == ECMA_OBJECT_TYPE_FUNCTION))
        -: 1394:  {
        7: 1395:    result = ecma_op_function_call_simple (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
        -: 1396:  }
        2: 1397:  else if (type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION)
        -: 1398:  {
        2: 1399:    result = ecma_op_function_call_native_built_in (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
        -: 1400:  }
    #####: 1401:  else if (type == ECMA_OBJECT_TYPE_NATIVE_FUNCTION)
        -: 1402:  {
    #####: 1403:    result = ecma_op_function_call_native (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
        -: 1404:  }
        -: 1405:#if JERRY_ESNEXT
    #####: 1406:  else if (JERRY_UNLIKELY (type == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION))
        -: 1407:  {
    #####: 1408:    result = ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_class_constructor_new));
        -: 1409:  }
        -: 1410:#endif /* JERRY_ESNEXT */
        -: 1411:  else
        -: 1412:  {
    #####: 1413:    result = ecma_op_function_call_bound (func_obj_p, arguments_list_p, arguments_list_len);
        -: 1414:  }
        -: 1415:
        -: 1416:#if JERRY_ESNEXT
        9: 1417:  JERRY_CONTEXT (current_new_target_p) = old_new_target_p;
        -: 1418:#endif /* JERRY_ESNEXT */
        -: 1419:
        9: 1420:  return result;
        -: 1421:} /* ecma_op_function_call */
        -: 1422:
        -: 1423:/**
        -: 1424: * [[Construct]] internal method for ECMAScript function objects
        -: 1425: *
        -: 1426: * @return ecma value
        -: 1427: *         Returned value must be freed with ecma_free_value
        -: 1428: */
        -: 1429:static ecma_value_t
    #####: 1430:ecma_op_function_construct_simple (ecma_object_t *func_obj_p, /**< Function object */
        -: 1431:                                   ecma_object_t *new_target_p, /**< new target */
        -: 1432:                                   const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1433:                                   uint32_t arguments_list_len) /**< length of arguments list */
        -: 1434:{
    #####: 1435:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION);
        -: 1436:
    #####: 1437:  ecma_object_t *new_this_obj_p = NULL;
        -: 1438:  ecma_value_t this_arg;
        -: 1439:
        -: 1440:#if JERRY_ESNEXT
    #####: 1441:  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) func_obj_p;
        -: 1442:
        -: 1443:  /* 5. */
    #####: 1444:  if (!ECMA_GET_THIRD_BIT_FROM_POINTER_TAG (ext_func_obj_p->u.function.scope_cp))
        -: 1445:  {
        -: 1446:#endif /* JERRY_ESNEXT */
        -: 1447:    /* 5.a */
    #####: 1448:    ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (new_target_p, ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -: 1449:
        -: 1450:    /* 5.b */
    #####: 1451:    if (JERRY_UNLIKELY (proto_p == NULL))
        -: 1452:    {
    #####: 1453:      return ECMA_VALUE_ERROR;
        -: 1454:    }
        -: 1455:
    #####: 1456:    new_this_obj_p = ecma_create_object (proto_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####: 1457:    ecma_deref_object (proto_p);
    #####: 1458:    this_arg = ecma_make_object_value (new_this_obj_p);
        -: 1459:#if JERRY_ESNEXT
        -: 1460:  }
        -: 1461:  else
        -: 1462:  {
    #####: 1463:    this_arg = ECMA_VALUE_UNDEFINED;
        -: 1464:  }
        -: 1465:
        -: 1466:  /* 6. */
    #####: 1467:  ecma_object_t *old_new_target_p = JERRY_CONTEXT (current_new_target_p);
    #####: 1468:  JERRY_CONTEXT (current_new_target_p) = new_target_p;
        -: 1469:#endif /* JERRY_ESNEXT */
        -: 1470:
    #####: 1471:  ecma_value_t ret_value = ecma_op_function_call_simple (func_obj_p, this_arg, arguments_list_p, arguments_list_len);
        -: 1472:
        -: 1473:#if JERRY_ESNEXT
    #####: 1474:  JERRY_CONTEXT (current_new_target_p) = old_new_target_p;
        -: 1475:#endif /* JERRY_ESNEXT */
        -: 1476:
        -: 1477:  /* 13.a */
    #####: 1478:  if (ECMA_IS_VALUE_ERROR (ret_value) || ecma_is_value_object (ret_value))
        -: 1479:  {
        -: 1480:#if JERRY_ESNEXT
    #####: 1481:    if (new_this_obj_p != NULL)
        -: 1482:    {
    #####: 1483:      ecma_deref_object (new_this_obj_p);
        -: 1484:    }
        -: 1485:#else /* !JERRY_ESNEXT */
    #####: 1486:    ecma_deref_object (new_this_obj_p);
        -: 1487:#endif /* JERRY_ESNEXT */
    #####: 1488:    return ret_value;
        -: 1489:  }
        -: 1490:
        -: 1491:  /* 13.b */
    #####: 1492:  ecma_free_value (ret_value);
    #####: 1493:  return this_arg;
        -: 1494:} /* ecma_op_function_construct_simple */
        -: 1495:
        -: 1496:/**
        -: 1497: * [[Construct]] internal method for built-in function objects
        -: 1498: *
        -: 1499: * @return ecma value
        -: 1500: *         Returned value must be freed with ecma_free_value
        -: 1501: */
        -: 1502:static ecma_value_t
    #####: 1503:ecma_op_function_construct_built_in (ecma_object_t *func_obj_p, /**< Function object */
        -: 1504:                                     ecma_object_t *new_target_p, /**< new target */
        -: 1505:                                     const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1506:                                     uint32_t arguments_list_len) /**< length of arguments list */
        -: 1507:{
        -: 1508:  JERRY_UNUSED (new_target_p);
        -: 1509:
    #####: 1510:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
        -: 1511:
        -: 1512:#if JERRY_BUILTIN_REALMS
    #####: 1513:  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);
    #####: 1514:  ecma_value_t realm_value = ((ecma_extended_object_t *) func_obj_p)->u.built_in.realm_value;
    #####: 1515:  JERRY_CONTEXT (global_object_p) = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t, realm_value);
        -: 1516:#endif /* JERRY_BUILTIN_REALMS */
        -: 1517:
        -: 1518:#if JERRY_ESNEXT
    #####: 1519:  ecma_object_t *old_new_target = JERRY_CONTEXT (current_new_target_p);
    #####: 1520:  JERRY_CONTEXT (current_new_target_p) = new_target_p;
        -: 1521:#endif /* JERRY_ESNEXT */
        -: 1522:
    #####: 1523:  ecma_value_t ret_value = ecma_builtin_dispatch_construct (func_obj_p, arguments_list_p, arguments_list_len);
        -: 1524:
        -: 1525:#if JERRY_ESNEXT
    #####: 1526:  JERRY_CONTEXT (current_new_target_p) = old_new_target;
        -: 1527:#endif /* JERRY_ESNEXT */
        -: 1528:
        -: 1529:#if JERRY_BUILTIN_REALMS
    #####: 1530:  JERRY_CONTEXT (global_object_p) = saved_global_object_p;
        -: 1531:#endif /* JERRY_BUILTIN_REALMS */
    #####: 1532:  return ret_value;
        -: 1533:} /* ecma_op_function_construct_built_in */
        -: 1534:
        -: 1535:/**
        -: 1536: * [[Construct]] internal method for bound function objects
        -: 1537: *
        -: 1538: * @return ecma value
        -: 1539: *         Returned value must be freed with ecma_free_value
        -: 1540: */
        -: 1541:static ecma_value_t JERRY_ATTR_NOINLINE
    #####: 1542:ecma_op_function_construct_bound (ecma_object_t *func_obj_p, /**< Function object */
        -: 1543:                                  ecma_object_t *new_target_p, /**< new target */
        -: 1544:                                  const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1545:                                  uint32_t arguments_list_len) /**< length of arguments list */
        -: 1546:{
    #####: 1547:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -: 1548:
    #####: 1549:  ecma_collection_t *bound_arg_list_p = ecma_new_collection ();
    #####: 1550:  ecma_collection_push_back (bound_arg_list_p, ECMA_VALUE_EMPTY);
        -: 1551:
    #####: 1552:  ecma_object_t *target_obj_p = ecma_op_bound_function_get_argument_list (func_obj_p, bound_arg_list_p);
        -: 1553:
    #####: 1554:  ecma_collection_append (bound_arg_list_p, arguments_list_p, arguments_list_len);
        -: 1555:
    #####: 1556:  if (func_obj_p == new_target_p)
        -: 1557:  {
    #####: 1558:    new_target_p = target_obj_p;
        -: 1559:  }
        -: 1560:
    #####: 1561:  ecma_value_t ret_value = ecma_op_function_construct (target_obj_p,
        -: 1562:                                                       new_target_p,
    #####: 1563:                                                       bound_arg_list_p->buffer_p + 1,
    #####: 1564:                                                       (uint32_t) (bound_arg_list_p->item_count - 1));
        -: 1565:
    #####: 1566:  ecma_collection_destroy (bound_arg_list_p);
        -: 1567:
    #####: 1568:  return ret_value;
        -: 1569:} /* ecma_op_function_construct_bound */
        -: 1570:
        -: 1571:#if JERRY_ESNEXT
        -: 1572:
        -: 1573:/**
        -: 1574: * [[Construct]] internal method for class implicit constructor objects
        -: 1575: *
        -: 1576: * @return ecma value
        -: 1577: *         Returned value must be freed with ecma_free_value
        -: 1578: */
        -: 1579:static ecma_value_t
    #####: 1580:ecma_op_function_construct_constructor (ecma_object_t *func_obj_p, /**< Function object */
        -: 1581:                                        ecma_object_t *new_target_p, /**< new target */
        -: 1582:                                        const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1583:                                        uint32_t arguments_list_len) /**< length of arguments list */
        -: 1584:{
    #####: 1585:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION);
        -: 1586:
    #####: 1587:  ecma_extended_object_t *constructor_object_p = (ecma_extended_object_t *) func_obj_p;
        -: 1588:
    #####: 1589:  if (!(constructor_object_p->u.constructor_function.flags & ECMA_CONSTRUCTOR_FUNCTION_HAS_HERITAGE))
        -: 1590:  {
    #####: 1591:    ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (new_target_p, ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -: 1592:
    #####: 1593:    if (JERRY_UNLIKELY (proto_p == NULL))
        -: 1594:    {
    #####: 1595:      return ECMA_VALUE_ERROR;
        -: 1596:    }
        -: 1597:
    #####: 1598:    ecma_object_t *new_this_object_p = ecma_create_object (proto_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####: 1599:    ecma_deref_object (proto_p);
        -: 1600:
    #####: 1601:    jerry_value_t new_this_value = ecma_make_object_value (new_this_object_p);
    #####: 1602:    jerry_value_t ret_value = opfunc_init_class_fields (func_obj_p, new_this_value);
        -: 1603:
    #####: 1604:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -: 1605:    {
    #####: 1606:      ecma_deref_object (new_this_object_p);
    #####: 1607:      return ret_value;
        -: 1608:    }
        -: 1609:
    #####: 1610:    return new_this_value;
        -: 1611:  }
        -: 1612:
    #####: 1613:  ecma_value_t super_ctor = ecma_op_function_get_super_constructor (func_obj_p);
        -: 1614:
    #####: 1615:  if (ECMA_IS_VALUE_ERROR (super_ctor))
        -: 1616:  {
    #####: 1617:    return super_ctor;
        -: 1618:  }
        -: 1619:
    #####: 1620:  ecma_object_t *super_ctor_p = ecma_get_object_from_value (super_ctor);
    #####: 1621:  ecma_value_t result = ecma_op_function_construct (super_ctor_p,
        -: 1622:                                                    new_target_p,
        -: 1623:                                                    arguments_list_p,
        -: 1624:                                                    arguments_list_len);
    #####: 1625:  ecma_deref_object (super_ctor_p);
        -: 1626:
    #####: 1627:  if (ecma_is_value_object (result))
        -: 1628:  {
    #####: 1629:    ecma_value_t fields_value = opfunc_init_class_fields (func_obj_p, result);
        -: 1630:
    #####: 1631:    if (ECMA_IS_VALUE_ERROR (fields_value))
        -: 1632:    {
    #####: 1633:      ecma_free_value (result);
    #####: 1634:      return fields_value;
        -: 1635:    }
        -: 1636:  }
        -: 1637:
    #####: 1638:  return result;
        -: 1639:} /* ecma_op_function_construct_constructor */
        -: 1640:
        -: 1641:#endif /* JERRY_ESNEXT */
        -: 1642:
        -: 1643:/**
        -: 1644: * [[Construct]] internal method for external function objects
        -: 1645: *
        -: 1646: * @return ecma value
        -: 1647: *         Returned value must be freed with ecma_free_value
        -: 1648: */
        -: 1649:static ecma_value_t
    #####: 1650:ecma_op_function_construct_native (ecma_object_t *func_obj_p, /**< Function object */
        -: 1651:                                   ecma_object_t *new_target_p, /**< new target */
        -: 1652:                                   const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1653:                                   uint32_t arguments_list_len) /**< length of arguments list */
        -: 1654:{
    #####: 1655:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_NATIVE_FUNCTION);
        -: 1656:
    #####: 1657:  ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (new_target_p, ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -: 1658:
    #####: 1659:  if (JERRY_UNLIKELY (proto_p == NULL))
        -: 1660:  {
    #####: 1661:    return ECMA_VALUE_ERROR;
        -: 1662:  }
        -: 1663:
    #####: 1664:  ecma_object_t *new_this_obj_p = ecma_create_object (proto_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####: 1665:  ecma_value_t this_arg = ecma_make_object_value (new_this_obj_p);
    #####: 1666:  ecma_deref_object (proto_p);
        -: 1667:
        -: 1668:#if JERRY_ESNEXT
    #####: 1669:  ecma_object_t *old_new_target_p = JERRY_CONTEXT (current_new_target_p);
    #####: 1670:  JERRY_CONTEXT (current_new_target_p) = new_target_p;
        -: 1671:#endif /* JERRY_ESNEXT */
        -: 1672:
    #####: 1673:  ecma_value_t ret_value = ecma_op_function_call_native (func_obj_p, this_arg, arguments_list_p, arguments_list_len);
        -: 1674:
        -: 1675:#if JERRY_ESNEXT
    #####: 1676:  JERRY_CONTEXT (current_new_target_p) = old_new_target_p;
        -: 1677:#endif /* JERRY_ESNEXT */
        -: 1678:
    #####: 1679:  if (ECMA_IS_VALUE_ERROR (ret_value) || ecma_is_value_object (ret_value))
        -: 1680:  {
    #####: 1681:    ecma_deref_object (new_this_obj_p);
    #####: 1682:    return ret_value;
        -: 1683:  }
        -: 1684:
    #####: 1685:  ecma_free_value (ret_value);
        -: 1686:
    #####: 1687:  return this_arg;
        -: 1688:} /* ecma_op_function_construct_native */
        -: 1689:
        -: 1690:/**
        -: 1691: * General [[Construct]] implementation function objects
        -: 1692: *
        -: 1693: * See also: ECMAScript v6, 9.2.2
        -: 1694: *
        -: 1695: * @return ecma value
        -: 1696: *         Returned value must be freed with ecma_free_value
        -: 1697: */
        -: 1698:ecma_value_t
    #####: 1699:ecma_op_function_construct (ecma_object_t *func_obj_p, /**< Function object */
        -: 1700:                            ecma_object_t *new_target_p, /**< new target */
        -: 1701:                            const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1702:                            uint32_t arguments_list_len) /**< length of arguments list */
        -: 1703:{
    #####: 1704:  JERRY_ASSERT (func_obj_p != NULL
        -: 1705:                && !ecma_is_lexical_environment (func_obj_p));
        -: 1706:
    #####: 1707:  const ecma_object_type_t type = ecma_get_object_type (func_obj_p);
        -: 1708:
    #####: 1709:  if (JERRY_LIKELY (type == ECMA_OBJECT_TYPE_FUNCTION))
        -: 1710:  {
    #####: 1711:    return ecma_op_function_construct_simple (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1712:  }
        -: 1713:
    #####: 1714:  if (type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION)
        -: 1715:  {
    #####: 1716:    return ecma_op_function_construct_built_in (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1717:  }
        -: 1718:
        -: 1719:#if JERRY_BUILTIN_PROXY
    #####: 1720:  if (ECMA_OBJECT_TYPE_IS_PROXY (type))
        -: 1721:  {
    #####: 1722:    return ecma_proxy_object_construct (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1723:  }
        -: 1724:#endif /* JERRY_BUILTIN_PROXY */
        -: 1725:
    #####: 1726:  if (JERRY_UNLIKELY (type == ECMA_OBJECT_TYPE_BOUND_FUNCTION))
        -: 1727:  {
    #####: 1728:    return ecma_op_function_construct_bound (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1729:  }
        -: 1730:
        -: 1731:#if JERRY_ESNEXT
    #####: 1732:  if (type == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION)
        -: 1733:  {
    #####: 1734:    return ecma_op_function_construct_constructor (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1735:  }
        -: 1736:#endif /* JERRY_ESNEXT */
        -: 1737:
    #####: 1738:  JERRY_ASSERT (type == ECMA_OBJECT_TYPE_NATIVE_FUNCTION);
    #####: 1739:  return ecma_op_function_construct_native (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1740:} /* ecma_op_function_construct */
        -: 1741:
        -: 1742:/**
        -: 1743: * Lazy instantiation of 'prototype' property for non-builtin and external functions
        -: 1744: *
        -: 1745: * @return pointer to newly instantiated property
        -: 1746: */
        -: 1747:static ecma_property_t *
    #####: 1748:ecma_op_lazy_instantiate_prototype_object (ecma_object_t *object_p) /**< the function object */
        -: 1749:{
    #####: 1750:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION
        -: 1751:                || ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_NATIVE_FUNCTION);
        -: 1752:
        -: 1753:#if JERRY_BUILTIN_REALMS
        -: 1754:  ecma_global_object_t *global_object_p;
        -: 1755:
    #####: 1756:  if (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION)
        -: 1757:  {
        -: 1758:    const ecma_compiled_code_t *bytecode_data_p;
    #####: 1759:    bytecode_data_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) object_p);
        -: 1760:
    #####: 1761:    global_object_p = ecma_op_function_get_realm (bytecode_data_p);
        -: 1762:  }
        -: 1763:  else
        -: 1764:  {
    #####: 1765:    ecma_native_function_t *native_function_p = (ecma_native_function_t *) object_p;
        -: 1766:
    #####: 1767:    global_object_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t,
        -: 1768:                                                       native_function_p->realm_value);
        -: 1769:  }
        -: 1770:#endif /* JERRY_BUILTIN_REALMS */
        -: 1771:
        -: 1772:  /* ECMA-262 v5, 13.2, 16-18 */
        -: 1773:
    #####: 1774:  ecma_object_t *proto_object_p = NULL;
    #####: 1775:  bool init_constructor = true;
        -: 1776:
        -: 1777:#if JERRY_ESNEXT
    #####: 1778:  if (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION)
        -: 1779:  {
    #####: 1780:    const ecma_compiled_code_t *byte_code_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) object_p);
        -: 1781:
    #####: 1782:    if (!CBC_FUNCTION_HAS_PROTOTYPE (byte_code_p->status_flags))
        -: 1783:    {
    #####: 1784:      return NULL;
        -: 1785:    }
        -: 1786:
    #####: 1787:    if (CBC_FUNCTION_GET_TYPE (byte_code_p->status_flags) == CBC_FUNCTION_GENERATOR)
        -: 1788:    {
        -: 1789:      ecma_object_t *prototype_p;
        -: 1790:
        -: 1791:#if JERRY_BUILTIN_REALMS
    #####: 1792:      prototype_p = ecma_builtin_get_from_realm (global_object_p, ECMA_BUILTIN_ID_GENERATOR_PROTOTYPE);
        -: 1793:#else /* !JERRY_BUILTIN_REALMS */
        -: 1794:      prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_GENERATOR_PROTOTYPE);
        -: 1795:#endif /* JERRY_BUILTIN_REALMS */
        -: 1796:
    #####: 1797:      proto_object_p = ecma_create_object (prototype_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####: 1798:      init_constructor = false;
        -: 1799:    }
        -: 1800:
    #####: 1801:    if (CBC_FUNCTION_GET_TYPE (byte_code_p->status_flags) == CBC_FUNCTION_ASYNC_GENERATOR)
        -: 1802:    {
        -: 1803:      ecma_object_t *prototype_p;
        -: 1804:
        -: 1805:#if JERRY_BUILTIN_REALMS
    #####: 1806:      prototype_p = ecma_builtin_get_from_realm (global_object_p, ECMA_BUILTIN_ID_ASYNC_GENERATOR_PROTOTYPE);
        -: 1807:#else /* !JERRY_BUILTIN_REALMS */
        -: 1808:      prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_ASYNC_GENERATOR_PROTOTYPE);
        -: 1809:#endif /* JERRY_BUILTIN_REALMS */
        -: 1810:
    #####: 1811:      proto_object_p = ecma_create_object (prototype_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####: 1812:      init_constructor = false;
        -: 1813:    }
        -: 1814:  }
        -: 1815:#endif /* JERRY_ESNEXT */
        -: 1816:
        -: 1817:#if JERRY_ESNEXT
    #####: 1818:  if (proto_object_p == NULL)
        -: 1819:#endif /* JERRY_ESNEXT */
        -: 1820:  {
        -: 1821:    ecma_object_t *prototype_p;
        -: 1822:
        -: 1823:#if JERRY_BUILTIN_REALMS
    #####: 1824:    prototype_p = ecma_builtin_get_from_realm (global_object_p, ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -: 1825:#else /* !JERRY_BUILTIN_REALMS */
    #####: 1826:    prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -: 1827:#endif /* JERRY_BUILTIN_REALMS */
        -: 1828:
    #####: 1829:    proto_object_p = ecma_op_create_object_object_noarg_and_set_prototype (prototype_p);
        -: 1830:  }
        -: 1831:
        -: 1832:  /* 17. */
    #####: 1833:  if (init_constructor)
        -: 1834:  {
        -: 1835:    ecma_property_value_t *constructor_prop_value_p;
    #####: 1836:    constructor_prop_value_p = ecma_create_named_data_property (proto_object_p,
        -: 1837:                                                                ecma_get_magic_string (LIT_MAGIC_STRING_CONSTRUCTOR),
        -: 1838:                                                                ECMA_PROPERTY_CONFIGURABLE_WRITABLE,
        -: 1839:                                                                NULL);
        -: 1840:
    #####: 1841:    constructor_prop_value_p->value = ecma_make_object_value (object_p);
        -: 1842:  }
        -: 1843:
        -: 1844:  /* 18. */
    #####: 1845:  ecma_property_t *prototype_prop_p;
        -: 1846:  ecma_property_value_t *prototype_prop_value_p;
    #####: 1847:  prototype_prop_value_p = ecma_create_named_data_property (object_p,
        -: 1848:                                                            ecma_get_magic_string (LIT_MAGIC_STRING_PROTOTYPE),
        -: 1849:                                                            ECMA_PROPERTY_BUILT_IN_WRITABLE,
        -: 1850:                                                            &prototype_prop_p);
        -: 1851:
    #####: 1852:  prototype_prop_value_p->value = ecma_make_object_value (proto_object_p);
        -: 1853:
    #####: 1854:  ecma_deref_object (proto_object_p);
        -: 1855:
    #####: 1856:  return prototype_prop_p;
        -: 1857:} /* ecma_op_lazy_instantiate_prototype_object */
        -: 1858:
        -: 1859:/**
        -: 1860: * Lazy instantiation of non-builtin ecma function object's properties
        -: 1861: *
        -: 1862: * Warning:
        -: 1863: *         Only non-configurable properties could be instantiated lazily in this function,
        -: 1864: *         as configurable properties could be deleted and it would be incorrect
        -: 1865: *         to reinstantiate them in the function in second time.
        -: 1866: *
        -: 1867: * @return pointer to newly instantiated property, if a property was instantiated,
        -: 1868: *         NULL - otherwise
        -: 1869: */
        -: 1870:ecma_property_t *
    #####: 1871:ecma_op_function_try_to_lazy_instantiate_property (ecma_object_t *object_p, /**< the function object */
        -: 1872:                                                   ecma_string_t *property_name_p) /**< property name */
        -: 1873:{
    #####: 1874:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION);
        -: 1875:
        -: 1876:#if JERRY_ESNEXT
    #####: 1877:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_LENGTH))
        -: 1878:  {
    #####: 1879:    ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
        -: 1880:
    #####: 1881:    if (ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))
        -: 1882:    {
    #####: 1883:      return NULL;
        -: 1884:    }
        -: 1885:
        -: 1886:    /* Initialize 'length' property */
    #####: 1887:    const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);
        -: 1888:    uint32_t len;
        -: 1889:
    #####: 1890:    if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)
        -: 1891:    {
    #####: 1892:      cbc_uint16_arguments_t *args_p = (cbc_uint16_arguments_t *) bytecode_data_p;
    #####: 1893:      len = args_p->argument_end;
        -: 1894:    }
        -: 1895:    else
        -: 1896:    {
    #####: 1897:      cbc_uint8_arguments_t *args_p = (cbc_uint8_arguments_t *) bytecode_data_p;
    #####: 1898:      len = args_p->argument_end;
        -: 1899:    }
        -: 1900:
    #####: 1901:    if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_HAS_EXTENDED_INFO)
        -: 1902:    {
    #####: 1903:      uint8_t *extended_info_p = ecma_compiled_code_resolve_extended_info (bytecode_data_p);
        -: 1904:
    #####: 1905:      if (*extended_info_p & CBC_EXTENDED_CODE_FLAGS_HAS_ARGUMENT_LENGTH)
        -: 1906:      {
    #####: 1907:        len = ecma_extended_info_decode_vlq (&extended_info_p);
        -: 1908:      }
        -: 1909:    }
        -: 1910:
    #####: 1911:    ecma_property_t *value_prop_p;
    #####: 1912:    ecma_property_value_t *value_p = ecma_create_named_data_property (object_p,
        -: 1913:                                                                      property_name_p,
        -: 1914:                                                                      ECMA_PROPERTY_BUILT_IN_CONFIGURABLE,
        -: 1915:                                                                      &value_prop_p);
    #####: 1916:    value_p->value = ecma_make_uint32_value (len);
    #####: 1917:    return value_prop_p;
        -: 1918:  }
        -: 1919:
    #####: 1920:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_NAME))
        -: 1921:  {
    #####: 1922:    ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
        -: 1923:
    #####: 1924:    if (ECMA_GET_SECOND_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))
        -: 1925:    {
    #####: 1926:      return NULL;
        -: 1927:    }
        -: 1928:
    #####: 1929:    const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);
        -: 1930:
    #####: 1931:    if (CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags) == CBC_FUNCTION_CONSTRUCTOR)
        -: 1932:    {
    #####: 1933:      return NULL;
        -: 1934:    }
        -: 1935:
    #####: 1936:    ecma_value_t value = *ecma_compiled_code_resolve_function_name (bytecode_data_p);
    #####: 1937:    JERRY_ASSERT (ecma_is_value_string (value));
        -: 1938:
        -: 1939:    /* Initialize 'name' property */
    #####: 1940:    ecma_property_t *value_prop_p;
    #####: 1941:    ecma_property_value_t *value_p = ecma_create_named_data_property (object_p,
        -: 1942:                                                                      property_name_p,
        -: 1943:                                                                      ECMA_PROPERTY_BUILT_IN_CONFIGURABLE,
        -: 1944:                                                                      &value_prop_p);
    #####: 1945:    value_p->value = ecma_copy_value (value);
    #####: 1946:    return value_prop_p;
        -: 1947:  }
        -: 1948:#endif /* JERRY_ESNEXT */
        -: 1949:
    #####: 1950:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_PROTOTYPE)
    #####: 1951:      && ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION)
        -: 1952:  {
    #####: 1953:    return ecma_op_lazy_instantiate_prototype_object (object_p);
        -: 1954:  }
        -: 1955:
    #####: 1956:  const bool is_arguments = ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_ARGUMENTS);
        -: 1957:
    #####: 1958:  if (is_arguments
    #####: 1959:      || ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_CALLER))
        -: 1960:  {
        -: 1961:    const ecma_compiled_code_t *bytecode_data_p;
    #####: 1962:    bytecode_data_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) object_p);
        -: 1963:
        -: 1964:#if JERRY_ESNEXT
    #####: 1965:    if (!(bytecode_data_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE)
    #####: 1966:        && CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags) == CBC_FUNCTION_NORMAL)
        -: 1967:    {
    #####: 1968:      ecma_property_t *value_prop_p;
        -: 1969:      /* The property_name_p argument contains the name. */
    #####: 1970:      ecma_property_value_t *value_p = ecma_create_named_data_property (object_p,
        -: 1971:                                                                        property_name_p,
        -: 1972:                                                                        ECMA_PROPERTY_BUILT_IN_FIXED,
        -: 1973:                                                                        &value_prop_p);
    #####: 1974:      value_p->value = is_arguments ? ECMA_VALUE_NULL : ECMA_VALUE_UNDEFINED;
    #####: 1975:      return value_prop_p;
        -: 1976:    }
        -: 1977:#else /* !JERRY_ESNEXT */
    #####: 1978:    if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE)
        -: 1979:    {
    #####: 1980:      ecma_object_t *thrower_p = ecma_builtin_get (ECMA_BUILTIN_ID_TYPE_ERROR_THROWER);
        -: 1981:
        -: 1982:      ecma_property_t *caller_prop_p;
        -: 1983:      /* The property_name_p argument contains the name. */
    #####: 1984:      ecma_create_named_accessor_property (object_p,
        -: 1985:                                           property_name_p,
        -: 1986:                                           thrower_p,
        -: 1987:                                           thrower_p,
        -: 1988:                                           ECMA_PROPERTY_BUILT_IN_FIXED,
        -: 1989:                                           &caller_prop_p);
    #####: 1990:      return caller_prop_p;
        -: 1991:    }
        -: 1992:#endif /* JERRY_ESNEXT */
        -: 1993:  }
        -: 1994:
    #####: 1995:  return NULL;
        -: 1996:} /* ecma_op_function_try_to_lazy_instantiate_property */
        -: 1997:
        -: 1998:/**
        -: 1999: * Create specification defined non-configurable properties for external functions.
        -: 2000: *
        -: 2001: * See also:
        -: 2002: *          ECMA-262 v5, 15.3.4.5
        -: 2003: *
        -: 2004: * @return pointer property, if one was instantiated,
        -: 2005: *         NULL - otherwise.
        -: 2006: */
        -: 2007:ecma_property_t *
    #####: 2008:ecma_op_external_function_try_to_lazy_instantiate_property (ecma_object_t *object_p, /**< object */
        -: 2009:                                                            ecma_string_t *property_name_p) /**< property's name */
        -: 2010:{
    #####: 2011:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_NATIVE_FUNCTION);
        -: 2012:
    #####: 2013:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_PROTOTYPE))
        -: 2014:  {
    #####: 2015:    return ecma_op_lazy_instantiate_prototype_object (object_p);
        -: 2016:  }
        -: 2017:
    #####: 2018:  return NULL;
        -: 2019:} /* ecma_op_external_function_try_to_lazy_instantiate_property */
        -: 2020:
        -: 2021:/**
        -: 2022: * Create specification defined non-configurable properties for bound functions.
        -: 2023: *
        -: 2024: * See also:
        -: 2025: *          ECMA-262 v5, 15.3.4.5
        -: 2026: *
        -: 2027: * @return pointer property, if one was instantiated,
        -: 2028: *         NULL - otherwise.
        -: 2029: */
        -: 2030:ecma_property_t *
    #####: 2031:ecma_op_bound_function_try_to_lazy_instantiate_property (ecma_object_t *object_p, /**< object */
        -: 2032:                                                         ecma_string_t *property_name_p) /**< property's name */
        -: 2033:{
    #####: 2034:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -: 2035:
    #####: 2036:  if (ecma_string_is_length (property_name_p))
        -: 2037:  {
    #####: 2038:    ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) object_p;
    #####: 2039:    ecma_value_t args_len_or_this = bound_func_p->header.u.bound_function.args_len_or_this;
    #####: 2040:    ecma_number_t length = 0;
    #####: 2041:    ecma_integer_value_t args_length = 1;
        -: 2042:    uint8_t length_attributes;
        -: 2043:
    #####: 2044:    if (ecma_is_value_integer_number (args_len_or_this))
        -: 2045:    {
    #####: 2046:      args_length = ecma_get_integer_from_value (args_len_or_this);
        -: 2047:    }
        -: 2048:
        -: 2049:#if JERRY_ESNEXT
    #####: 2050:    if (ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (bound_func_p->header.u.bound_function.target_function))
        -: 2051:    {
    #####: 2052:      return NULL;
        -: 2053:    }
        -: 2054:
    #####: 2055:    length_attributes = ECMA_PROPERTY_BUILT_IN_CONFIGURABLE;
    #####: 2056:    length = ecma_get_number_from_value (bound_func_p->target_length) - (args_length - 1);
        -: 2057:#else /* !JERRY_ESNEXT */
    #####: 2058:    length_attributes = ECMA_PROPERTY_BUILT_IN_FIXED;
        -: 2059:
        -: 2060:    ecma_object_t *target_func_p;
    #####: 2061:    target_func_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,
        -: 2062:                                                                bound_func_p->header.u.bound_function.target_function);
        -: 2063:
    #####: 2064:    if (ecma_object_get_class_name (target_func_p) == LIT_MAGIC_STRING_FUNCTION_UL)
        -: 2065:    {
        -: 2066:      /* The property_name_p argument contains the 'length' string. */
    #####: 2067:      ecma_value_t get_len_value = ecma_op_object_get (target_func_p, property_name_p);
        -: 2068:
        -: 2069:      JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (get_len_value));
        -: 2070:      JERRY_ASSERT (ecma_is_value_integer_number (get_len_value));
        -: 2071:
    #####: 2072:      length = (ecma_number_t) (ecma_get_integer_from_value (get_len_value) - (args_length - 1));
        -: 2073:    }
        -: 2074:#endif /* JERRY_ESNEXT */
        -: 2075:
    #####: 2076:    if (length < 0)
        -: 2077:    {
    #####: 2078:      length = 0;
        -: 2079:    }
        -: 2080:
    #####: 2081:    ecma_property_t *len_prop_p;
    #####: 2082:    ecma_property_value_t *len_prop_value_p = ecma_create_named_data_property (object_p,
        -: 2083:                                                                               property_name_p,
        -: 2084:                                                                               length_attributes,
        -: 2085:                                                                               &len_prop_p);
        -: 2086:
    #####: 2087:    len_prop_value_p->value = ecma_make_number_value (length);
    #####: 2088:    return len_prop_p;
        -: 2089:  }
        -: 2090:
        -: 2091:#if !JERRY_ESNEXT
    #####: 2092:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_CALLER)
    #####: 2093:      || ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_ARGUMENTS))
        -: 2094:  {
    #####: 2095:    ecma_object_t *thrower_p = ecma_builtin_get (ECMA_BUILTIN_ID_TYPE_ERROR_THROWER);
        -: 2096:
        -: 2097:    ecma_property_t *caller_prop_p;
        -: 2098:    /* The string_p argument contans the name. */
    #####: 2099:    ecma_create_named_accessor_property (object_p,
        -: 2100:                                         property_name_p,
        -: 2101:                                         thrower_p,
        -: 2102:                                         thrower_p,
        -: 2103:                                         ECMA_PROPERTY_BUILT_IN_FIXED,
        -: 2104:                                         &caller_prop_p);
    #####: 2105:    return caller_prop_p;
        -: 2106:  }
        -: 2107:#endif /* !JERRY_ESNEXT */
        -: 2108:
    #####: 2109:  return NULL;
        -: 2110:} /* ecma_op_bound_function_try_to_lazy_instantiate_property */
        -: 2111:
        -: 2112:#if JERRY_ESNEXT
        -: 2113:
        -: 2114:/**
        -: 2115: * Delete configurable properties of functions.
        -: 2116: */
        -: 2117:void
    #####: 2118:ecma_op_function_delete_built_in_property (ecma_object_t *object_p, /**< object */
        -: 2119:                                           ecma_string_t *property_name_p) /**< property name */
        -: 2120:{
    #####: 2121:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
        -: 2122:
    #####: 2123:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_LENGTH))
        -: 2124:  {
    #####: 2125:    JERRY_ASSERT (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp));
    #####: 2126:    ECMA_SET_FIRST_BIT_TO_POINTER_TAG (ext_func_p->u.function.scope_cp);
    #####: 2127:    return;
        -: 2128:  }
        -: 2129:
    #####: 2130:  JERRY_ASSERT (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_NAME));
    #####: 2131:  JERRY_ASSERT (!ECMA_GET_SECOND_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp));
        -: 2132:
    #####: 2133:  ECMA_SET_SECOND_BIT_TO_POINTER_TAG (ext_func_p->u.function.scope_cp);
        -: 2134:} /* ecma_op_function_delete_built_in_property */
        -: 2135:
        -: 2136:/**
        -: 2137: * Delete configurable properties of bound functions.
        -: 2138: */
        -: 2139:void
    #####: 2140:ecma_op_bound_function_delete_built_in_property (ecma_object_t *object_p, /**< object */
        -: 2141:                                                 ecma_string_t *property_name_p) /**< property name */
        -: 2142:{
        -: 2143:  JERRY_UNUSED (property_name_p);
        -: 2144:
    #####: 2145:  ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) object_p;
        -: 2146:
    #####: 2147:  JERRY_ASSERT (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_LENGTH));
    #####: 2148:  JERRY_ASSERT (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (bound_func_p->header.u.bound_function.target_function));
        -: 2149:
    #####: 2150:  ECMA_SET_FIRST_BIT_TO_POINTER_TAG (bound_func_p->header.u.bound_function.target_function);
    #####: 2151:} /* ecma_op_bound_function_delete_built_in_property */
        -: 2152:
        -: 2153:#endif /* JERRY_ESNEXT */
        -: 2154:
        -: 2155:/**
        -: 2156: * List names of a Function object's lazy instantiated properties,
        -: 2157: * adding them to corresponding string collections
        -: 2158: *
        -: 2159: * See also:
        -: 2160: *          ecma_op_function_try_to_lazy_instantiate_property
        -: 2161: */
        -: 2162:void
    #####: 2163:ecma_op_function_list_lazy_property_names (ecma_object_t *object_p, /**< functionobject */
        -: 2164:                                           ecma_collection_t *prop_names_p, /**< prop name collection */
        -: 2165:                                           ecma_property_counter_t *prop_counter_p, /**< property counters */
        -: 2166:                                           jerry_property_filter_t filter) /**< property name filter options */
        -: 2167:{
    #####: 2168:  if (filter & JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS)
        -: 2169:  {
    #####: 2170:    return;
        -: 2171:  }
        -: 2172:
        -: 2173:  const ecma_compiled_code_t *bytecode_data_p;
    #####: 2174:  bytecode_data_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) object_p);
        -: 2175:
        -: 2176:#if JERRY_ESNEXT
    #####: 2177:  bool append_prototype = CBC_FUNCTION_HAS_PROTOTYPE (bytecode_data_p->status_flags);
        -: 2178:#else /* !JERRY_ESNEXT */
    #####: 2179:  bool append_prototype = true;
        -: 2180:#endif /* JERRY_ESNEXT */
        -: 2181:
    #####: 2182:  if (append_prototype)
        -: 2183:  {
        -: 2184:    /* 'prototype' property is non-enumerable (ECMA-262 v5, 13.2.18) */
    #####: 2185:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_PROTOTYPE));
    #####: 2186:    prop_counter_p->string_named_props++;
        -: 2187:  }
        -: 2188:
        -: 2189:#if JERRY_ESNEXT
    #####: 2190:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
        -: 2191:
    #####: 2192:  if (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))
        -: 2193:  {
        -: 2194:    /* Unintialized 'length' property is non-enumerable (ECMA-262 v6, 19.2.4.1) */
    #####: 2195:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
    #####: 2196:    prop_counter_p->string_named_props++;
        -: 2197:  }
        -: 2198:
    #####: 2199:  if (CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags) != CBC_FUNCTION_CONSTRUCTOR
    #####: 2200:      && !ECMA_GET_SECOND_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))
        -: 2201:  {
        -: 2202:    /* Unintialized 'name' property is non-enumerable (ECMA-262 v6, 19.2.4.2) */
    #####: 2203:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_NAME));
    #####: 2204:    prop_counter_p->string_named_props++;
        -: 2205:  }
        -: 2206:#else /* !JERRY_ESNEXT */
        -: 2207:  /* 'length' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 2208:  ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
    #####: 2209:  prop_counter_p->string_named_props++;
        -: 2210:#endif /* JERRY_ESNEXT */
        -: 2211:
        -: 2212:#if JERRY_ESNEXT
    #####: 2213:  if (!append_prototype)
        -: 2214:  {
    #####: 2215:    return;
        -: 2216:  }
        -: 2217:
    #####: 2218:  bool append_caller_and_arguments = !(bytecode_data_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE);
        -: 2219:#else /* !JERRY_ESNEXT */
    #####: 2220:  bool append_caller_and_arguments = (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE);
        -: 2221:#endif /* JERRY_ESNEXT */
        -: 2222:
    #####: 2223:  if (append_caller_and_arguments)
        -: 2224:  {
        -: 2225:    /* 'caller' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 2226:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_CALLER));
        -: 2227:
        -: 2228:    /* 'arguments' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 2229:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_ARGUMENTS));
        -: 2230:
    #####: 2231:    prop_counter_p->string_named_props += 2;
        -: 2232:  }
        -: 2233:} /* ecma_op_function_list_lazy_property_names */
        -: 2234:
        -: 2235:/**
        -: 2236: * List names of an External Function object's lazy instantiated properties,
        -: 2237: * adding them to corresponding string collections
        -: 2238: *
        -: 2239: * See also:
        -: 2240: *          ecma_op_external_function_try_to_lazy_instantiate_property
        -: 2241: */
        -: 2242:void
    #####: 2243:ecma_op_external_function_list_lazy_property_names (ecma_object_t *object_p, /**< function object */
        -: 2244:                                                    ecma_collection_t *prop_names_p, /**< prop name collection */
        -: 2245:                                                    ecma_property_counter_t *prop_counter_p, /**< property counters */
        -: 2246:                                                    jerry_property_filter_t filter) /**< property name
        -: 2247:                                                                                     *   filter options */
        -: 2248:{
        -: 2249:  JERRY_UNUSED (object_p);
        -: 2250:
    #####: 2251:  if (filter & JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS)
        -: 2252:  {
    #####: 2253:    return;
        -: 2254:  }
        -: 2255:
        -: 2256:  /* 'prototype' property is non-enumerable (ECMA-262 v5, 13.2.18) */
    #####: 2257:  ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_PROTOTYPE));
    #####: 2258:  prop_counter_p->string_named_props++;
        -: 2259:} /* ecma_op_external_function_list_lazy_property_names */
        -: 2260:
        -: 2261:/**
        -: 2262: * List names of a Bound Function object's lazy instantiated properties,
        -: 2263: * adding them to corresponding string collections
        -: 2264: *
        -: 2265: * See also:
        -: 2266: *          ecma_op_bound_function_try_to_lazy_instantiate_property
        -: 2267: */
        -: 2268:void
    #####: 2269:ecma_op_bound_function_list_lazy_property_names (ecma_object_t *object_p, /**< bound function object*/
        -: 2270:                                                 ecma_collection_t *prop_names_p, /**< prop name collection */
        -: 2271:                                                 ecma_property_counter_t *prop_counter_p, /**< property counters */
        -: 2272:                                                 jerry_property_filter_t filter) /**< property name filter options */
        -: 2273:{
    #####: 2274:  if (filter & JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS)
        -: 2275:  {
    #####: 2276:    return;
        -: 2277:  }
        -: 2278:
        -: 2279:#if JERRY_ESNEXT
        -: 2280:  /* Unintialized 'length' property is non-enumerable (ECMA-262 v6, 19.2.4.1) */
    #####: 2281:  ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) object_p;
    #####: 2282:  if (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (bound_func_p->header.u.bound_function.target_function))
        -: 2283:  {
    #####: 2284:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
    #####: 2285:    prop_counter_p->string_named_props++;
        -: 2286:  }
        -: 2287:#else /* !JERRY_ESNEXT */
        -: 2288:  JERRY_UNUSED (object_p);
        -: 2289:  /* 'length' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 2290:  ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
    #####: 2291:  prop_counter_p->string_named_props++;
        -: 2292:#endif /* JERRY_ESNEXT */
        -: 2293:
        -: 2294:  /* 'caller' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 2295:  ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_CALLER));
        -: 2296:
        -: 2297:  /* 'arguments' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 2298:  ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_ARGUMENTS));
        -: 2299:
    #####: 2300:  prop_counter_p->string_named_props += 2;
        -: 2301:} /* ecma_op_bound_function_list_lazy_property_names */
        -: 2302:
        -: 2303:/**
        -: 2304: * @}
        -: 2305: * @}
        -: 2306: */
