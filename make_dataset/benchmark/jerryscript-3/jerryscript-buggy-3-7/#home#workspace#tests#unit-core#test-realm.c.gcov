        -:    0:Source:/home/workspace/tests/unit-core/test-realm.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:static void
    #####:   21:create_number_property (jerry_value_t object_value, /**< object value */
        -:   22:                        char *name_p, /**< name */
        -:   23:                        double number) /**< value */
        -:   24:{
    #####:   25:  jerry_value_t name_value = jerry_create_string ((const jerry_char_t *) name_p);
    #####:   26:  jerry_value_t number_value = jerry_create_number (number);
    #####:   27:  jerry_value_t result_value = jerry_set_property (object_value, name_value, number_value);
    #####:   28:  TEST_ASSERT (!jerry_value_is_error (result_value));
        -:   29:
    #####:   30:  jerry_release_value (result_value);
    #####:   31:  jerry_release_value (number_value);
    #####:   32:  jerry_release_value (name_value);
    #####:   33:} /* create_number_property */
        -:   34:
        -:   35:static double
    #####:   36:get_number_property (jerry_value_t object_value, /**< object value */
        -:   37:                     char *name_p) /**< name */
        -:   38:{
    #####:   39:  jerry_value_t name_value = jerry_create_string ((const jerry_char_t *) name_p);
    #####:   40:  jerry_value_t result_value = jerry_get_property (object_value, name_value);
    #####:   41:  TEST_ASSERT (!jerry_value_is_error (result_value));
    #####:   42:  TEST_ASSERT (jerry_value_is_number (result_value));
        -:   43:
    #####:   44:  double result = jerry_get_number_value (result_value);
        -:   45:
    #####:   46:  jerry_release_value (result_value);
    #####:   47:  jerry_release_value (name_value);
    #####:   48:  return result;
        -:   49:} /* get_number_property */
        -:   50:
        -:   51:static double
    #####:   52:eval_and_get_number (char *script_p) /**< script source */
        -:   53:{
        -:   54:  jerry_value_t result_value;
    #####:   55:  result_value = jerry_eval ((const jerry_char_t *) script_p, strlen (script_p), JERRY_PARSE_NO_OPTS);
        -:   56:
    #####:   57:  TEST_ASSERT (jerry_value_is_number (result_value));
    #####:   58:  double result = jerry_get_number_value (result_value);
    #####:   59:  jerry_release_value (result_value);
    #####:   60:  return result;
        -:   61:} /* eval_and_get_number */
        -:   62:
        -:   63:static void
    #####:   64:check_type_error (jerry_value_t result_value) /**< result value */
        -:   65:{
    #####:   66:  TEST_ASSERT (jerry_value_is_error (result_value));
    #####:   67:  result_value = jerry_get_value_from_error (result_value, true);
    #####:   68:  TEST_ASSERT (jerry_get_error_type (result_value) == JERRY_ERROR_TYPE);
    #####:   69:  jerry_release_value (result_value);
    #####:   70:} /* check_type_error */
        -:   71:
        -:   72:static void
    #####:   73:check_array_prototype (jerry_value_t realm_value, jerry_value_t result_value)
        -:   74:{
    #####:   75:  jerry_value_t name_value = jerry_create_string ((const jerry_char_t *) "Array");
    #####:   76:  jerry_value_t array_value = jerry_get_property (realm_value, name_value);
    #####:   77:  TEST_ASSERT (jerry_value_is_object (array_value));
    #####:   78:  jerry_release_value (name_value);
        -:   79:
    #####:   80:  name_value = jerry_create_string ((const jerry_char_t *) "prototype");
    #####:   81:  jerry_value_t prototype_value = jerry_get_property (array_value, name_value);
    #####:   82:  TEST_ASSERT (jerry_value_is_object (prototype_value));
    #####:   83:  jerry_release_value (name_value);
    #####:   84:  jerry_release_value (array_value);
        -:   85:
    #####:   86:  jerry_value_t compare_value = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL, result_value, prototype_value);
    #####:   87:  jerry_release_value (prototype_value);
        -:   88:
    #####:   89:  TEST_ASSERT (jerry_value_is_boolean (compare_value) && jerry_value_is_true (compare_value));
    #####:   90:  jerry_release_value (compare_value);
    #####:   91:} /* check_array_prototype */
        -:   92:
        -:   93:/**
        -:   94: * Unit test's main function.
        -:   95: */
        -:   96:int
    #####:   97:main (void)
        -:   98:{
    #####:   99:  TEST_INIT ();
        -:  100:
    #####:  101:  jerry_init (JERRY_INIT_EMPTY);
        -:  102:
    #####:  103:  jerry_value_t global_value = jerry_get_global_object ();
    #####:  104:  jerry_value_t result_value = jerry_realm_get_this (global_value);
    #####:  105:  TEST_ASSERT (global_value == result_value);
    #####:  106:  jerry_release_value (global_value);
        -:  107:
    #####:  108:  jerry_value_t number_value = jerry_create_number (3);
    #####:  109:  check_type_error (jerry_realm_get_this (number_value));
    #####:  110:  jerry_release_value (number_value);
        -:  111:
    #####:  112:  if (!jerry_is_feature_enabled (JERRY_FEATURE_REALM))
        -:  113:  {
    #####:  114:    printf ("Skipping test, Realms not enabled\n");
    #####:  115:    return 0;
        -:  116:  }
        -:  117:
    #####:  118:  jerry_value_t realm_value = jerry_create_realm ();
        -:  119:
    #####:  120:  create_number_property (global_value, "a", 3.5);
    #####:  121:  create_number_property (global_value, "b", 7.25);
    #####:  122:  create_number_property (realm_value, "a", -1.25);
    #####:  123:  create_number_property (realm_value, "b", -6.75);
        -:  124:
    #####:  125:  TEST_ASSERT (eval_and_get_number ("a") == 3.5);
        -:  126:
    #####:  127:  result_value = jerry_set_realm (realm_value);
    #####:  128:  TEST_ASSERT (result_value == global_value);
    #####:  129:  TEST_ASSERT (eval_and_get_number ("a") == -1.25);
        -:  130:
    #####:  131:  result_value = jerry_set_realm (global_value);
    #####:  132:  TEST_ASSERT (result_value == realm_value);
    #####:  133:  TEST_ASSERT (eval_and_get_number ("b") == 7.25);
        -:  134:
    #####:  135:  result_value = jerry_set_realm (realm_value);
    #####:  136:  TEST_ASSERT (result_value == global_value);
    #####:  137:  TEST_ASSERT (eval_and_get_number ("b") == -6.75);
        -:  138:
    #####:  139:  result_value = jerry_set_realm (global_value);
    #####:  140:  TEST_ASSERT (result_value == realm_value);
        -:  141:
    #####:  142:  jerry_value_t object_value = jerry_create_object ();
    #####:  143:  check_type_error (jerry_set_realm (object_value));
    #####:  144:  jerry_release_value (object_value);
        -:  145:
    #####:  146:  number_value = jerry_create_number (5);
    #####:  147:  check_type_error (jerry_set_realm (number_value));
    #####:  148:  jerry_release_value (number_value);
        -:  149:
    #####:  150:  jerry_release_value (global_value);
    #####:  151:  jerry_release_value (realm_value);
        -:  152:
    #####:  153:  realm_value = jerry_create_realm ();
        -:  154:
    #####:  155:  result_value = jerry_realm_get_this (realm_value);
    #####:  156:  TEST_ASSERT (result_value == realm_value);
    #####:  157:  jerry_release_value (result_value);
        -:  158:
    #####:  159:  result_value = jerry_set_realm (realm_value);
    #####:  160:  TEST_ASSERT (!jerry_value_is_error (result_value));
    #####:  161:  object_value = jerry_create_object ();
    #####:  162:  jerry_set_realm (result_value);
        -:  163:
    #####:  164:  number_value = jerry_create_number (7);
    #####:  165:  check_type_error (jerry_realm_set_this (realm_value, number_value));
    #####:  166:  check_type_error (jerry_realm_set_this (number_value, object_value));
    #####:  167:  jerry_release_value (number_value);
        -:  168:
    #####:  169:  result_value = jerry_realm_set_this (realm_value, object_value);
    #####:  170:  TEST_ASSERT (jerry_value_is_boolean (result_value) && jerry_value_is_true (result_value));
    #####:  171:  jerry_release_value (result_value);
        -:  172:
    #####:  173:  create_number_property (object_value, "x", 7.25);
    #####:  174:  create_number_property (object_value, "y", 1.25);
        -:  175:
    #####:  176:  result_value = jerry_set_realm (realm_value);
    #####:  177:  TEST_ASSERT (!jerry_value_is_error (result_value));
    #####:  178:  TEST_ASSERT (eval_and_get_number ("var z = -5.5; x + this.y") == 8.5);
    #####:  179:  jerry_set_realm (result_value);
        -:  180:
    #####:  181:  TEST_ASSERT (get_number_property (object_value, "z") == -5.5);
        -:  182:
    #####:  183:  result_value = jerry_realm_get_this (realm_value);
    #####:  184:  TEST_ASSERT (result_value == object_value);
    #####:  185:  jerry_release_value (result_value);
        -:  186:
    #####:  187:  jerry_release_value (object_value);
    #####:  188:  jerry_release_value (realm_value);
        -:  189:
    #####:  190:  if (jerry_is_feature_enabled (JERRY_FEATURE_PROXY))
        -:  191:  {
        -:  192:    /* Check property creation. */
    #####:  193:    jerry_value_t handler_value = jerry_create_object ();
    #####:  194:    jerry_value_t target_value = jerry_create_realm ();
    #####:  195:    jerry_value_t proxy_value = jerry_create_proxy (target_value, handler_value);
        -:  196:
    #####:  197:    jerry_realm_set_this (target_value, proxy_value);
    #####:  198:    jerry_release_value (proxy_value);
    #####:  199:    jerry_release_value (handler_value);
        -:  200:
    #####:  201:    jerry_value_t old_realm_value = jerry_set_realm (target_value);
    #####:  202:    TEST_ASSERT (!jerry_value_is_error (old_realm_value));
    #####:  203:    TEST_ASSERT (eval_and_get_number ("var z = 1.5; z") == 1.5);
    #####:  204:    jerry_set_realm (old_realm_value);
        -:  205:
    #####:  206:    TEST_ASSERT (get_number_property (target_value, "z") == 1.5);
    #####:  207:    jerry_release_value (target_value);
        -:  208:
        -:  209:    /* Check isExtensible error. */
        -:  210:
    #####:  211:    const char *script_p = "new Proxy({}, { isExtensible: function() { throw 42.5 } })";
    #####:  212:    proxy_value = jerry_eval ((const jerry_char_t *) script_p, strlen (script_p), JERRY_PARSE_NO_OPTS);
    #####:  213:    TEST_ASSERT (!jerry_value_is_error (proxy_value) && jerry_value_is_object (proxy_value));
        -:  214:
    #####:  215:    target_value = jerry_create_realm ();
    #####:  216:    jerry_realm_set_this (target_value, proxy_value);
    #####:  217:    jerry_release_value (proxy_value);
        -:  218:
    #####:  219:    old_realm_value = jerry_set_realm (target_value);
    #####:  220:    TEST_ASSERT (!jerry_value_is_error (old_realm_value));
    #####:  221:    script_p = "var z = 1.5";
    #####:  222:    result_value = jerry_eval ((const jerry_char_t *) script_p, strlen (script_p), JERRY_PARSE_NO_OPTS);
    #####:  223:    jerry_set_realm (old_realm_value);
    #####:  224:    jerry_release_value (target_value);
        -:  225:
    #####:  226:    TEST_ASSERT (jerry_value_is_error (result_value));
    #####:  227:    result_value = jerry_get_value_from_error (result_value, true);
    #####:  228:    TEST_ASSERT (jerry_value_is_number (result_value) && jerry_get_number_value (result_value) == 42.5);
    #####:  229:    jerry_release_value (result_value);
        -:  230:  }
        -:  231:
    #####:  232:  realm_value = jerry_create_realm ();
        -:  233:
    #####:  234:  result_value = jerry_set_realm (realm_value);
    #####:  235:  TEST_ASSERT (!jerry_value_is_error (result_value));
        -:  236:
    #####:  237:  const char *script_p = "global2 = global1 - 1; Object.getPrototypeOf([])";
    #####:  238:  jerry_value_t script_value = jerry_parse ((const jerry_char_t *) script_p,
        -:  239:                                            strlen (script_p),
        -:  240:                                            NULL);
        -:  241:
    #####:  242:  TEST_ASSERT (!jerry_value_is_error (script_value));
    #####:  243:  jerry_set_realm (result_value);
        -:  244:
        -:  245:  /* Script is compiled in another realm. */
    #####:  246:  create_number_property (realm_value, "global1", 7.5);
    #####:  247:  result_value = jerry_run (script_value);
    #####:  248:  TEST_ASSERT (!jerry_value_is_error (result_value));
        -:  249:
    #####:  250:  check_array_prototype (realm_value, result_value);
        -:  251:
    #####:  252:  jerry_release_value (result_value);
    #####:  253:  jerry_release_value (script_value);
        -:  254:
    #####:  255:  TEST_ASSERT (get_number_property (realm_value, "global2") == 6.5);
        -:  256:
    #####:  257:  jerry_release_value (realm_value);
        -:  258:
    #####:  259:  jerry_cleanup ();
    #####:  260:  return 0;
        -:  261:} /* main */
