        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-proxy.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtins.h"
        -:   17:#include "ecma-exceptions.h"
        -:   18:#include "ecma-gc.h"
        -:   19:#include "ecma-globals.h"
        -:   20:#include "ecma-helpers.h"
        -:   21:#include "ecma-proxy-object.h"
        -:   22:#include "jrt.h"
        -:   23:
        -:   24:#if JERRY_BUILTIN_PROXY
        -:   25:
        -:   26:#define ECMA_BUILTINS_INTERNAL
        -:   27:#include "ecma-builtins-internal.h"
        -:   28:
        -:   29:/**
        -:   30: * This object has a custom dispatch function.
        -:   31: */
        -:   32:#define BUILTIN_CUSTOM_DISPATCH
        -:   33:
        -:   34:/**
        -:   35: * List of built-in routine identifiers.
        -:   36: */
        -:   37:enum
        -:   38:{
        -:   39:  ECMA_BUILTIN_PROXY_OBJECT_ROUTINE_START = 0,
        -:   40:  ECMA_BUILTIN_PROXY_OBJECT_REVOCABLE,
        -:   41:};
        -:   42:
        -:   43:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-proxy.inc.h"
        -:   44:#define BUILTIN_UNDERSCORED_ID proxy
        -:   45:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   46:
        -:   47:/** \addtogroup ecma ECMA
        -:   48: * @{
        -:   49: *
        -:   50: * \addtogroup ecmabuiltins
        -:   51: * @{
        -:   52: *
        -:   53: * \addtogroup proxy ECMA Proxy object built-in
        -:   54: * @{
        -:   55: */
        -:   56:
        -:   57:/**
        -:   58: * The Proxy object's 'revocable' routine
        -:   59: *
        -:   60: * See also:
        -:   61: *         ES2015 26.2.2.1
        -:   62: *
        -:   63: * @return ecma value
        -:   64: *         Returned value must be freed with ecma_free_value.
        -:   65: */
        -:   66:static ecma_value_t
    #####:   67:ecma_builtin_proxy_object_revocable (ecma_value_t target, /**< target argument */
        -:   68:                                     ecma_value_t handler) /**< handler argument */
        -:   69:{
    #####:   70:  ecma_object_t *rev_proxy_p = ecma_proxy_create_revocable (target, handler);
        -:   71:
    #####:   72:  if (JERRY_UNLIKELY (rev_proxy_p == NULL))
        -:   73:  {
    #####:   74:    return ECMA_VALUE_ERROR;
        -:   75:  }
        -:   76:
    #####:   77:  return ecma_make_object_value (rev_proxy_p);
        -:   78:} /* ecma_builtin_proxy_object_revocable */
        -:   79:
        -:   80:/**
        -:   81: * Handle calling [[Call]] of built-in Proxy object
        -:   82: *
        -:   83: * See also:
        -:   84: *          ES2015 26.2.2
        -:   85: *
        -:   86: * @return raised error
        -:   87: */
        -:   88:ecma_value_t
    #####:   89:ecma_builtin_proxy_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   90:                                  uint32_t arguments_list_len) /**< number of arguments */
        -:   91:{
    #####:   92:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   93:
        -:   94:  /* 1. */
    #####:   95:  return ecma_raise_type_error (ECMA_ERR_MSG ("Constructor Proxy requires 'new'"));
        -:   96:} /* ecma_builtin_proxy_dispatch_call */
        -:   97:
        -:   98:/**
        -:   99: * Handle calling [[Construct]] of built-in proxy object
        -:  100: *
        -:  101: * See also:
        -:  102: *          ES2015 26.2.2
        -:  103: *
        -:  104: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  105: *         new proxy object - otherwise
        -:  106: */
        -:  107:ecma_value_t
        2:  108:ecma_builtin_proxy_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  109:                                       uint32_t arguments_list_len) /**< number of arguments */
        -:  110:{
        2:  111:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  112:
        -:  113:  /* 2. */
        4:  114:  ecma_object_t *proxy_p = ecma_proxy_create (arguments_list_len > 0 ? arguments_list_p[0] : ECMA_VALUE_UNDEFINED,
        2:  115:                                              arguments_list_len > 1 ? arguments_list_p[1] : ECMA_VALUE_UNDEFINED,
        -:  116:                                              0);
        -:  117:
        2:  118:  if (JERRY_UNLIKELY (proxy_p == NULL))
        -:  119:  {
    #####:  120:    return ECMA_VALUE_ERROR;
        -:  121:  }
        -:  122:
        2:  123:  return ecma_make_object_value (proxy_p);
        -:  124:} /* ecma_builtin_proxy_dispatch_construct */
        -:  125:
        -:  126:/**
        -:  127: * Dispatcher of the built-in's routines
        -:  128: *
        -:  129: * @return ecma value
        -:  130: *         Returned value must be freed with ecma_free_value.
        -:  131: */
        -:  132:ecma_value_t
    #####:  133:ecma_builtin_proxy_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  134:                                     ecma_value_t this_arg, /**< 'this' argument value */
        -:  135:                                     const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  136:                                                                             *   passed to routine */
        -:  137:                                     uint32_t arguments_number) /**< length of arguments' list */
        -:  138:{
        -:  139:  JERRY_UNUSED_2 (this_arg, arguments_number);
        -:  140:
    #####:  141:  switch (builtin_routine_id)
        -:  142:  {
    #####:  143:    case ECMA_BUILTIN_PROXY_OBJECT_REVOCABLE:
        -:  144:    {
    #####:  145:      return ecma_builtin_proxy_object_revocable (arguments_list_p[0], arguments_list_p[1]);
        -:  146:    }
    #####:  147:    default:
        -:  148:    {
    #####:  149:      JERRY_UNREACHABLE ();
        -:  150:    }
        -:  151:  }
        -:  152:} /* ecma_builtin_proxy_dispatch_routine */
        -:  153:/**
        -:  154: * @}
        -:  155: * @}
        -:  156: * @}
        -:  157: */
        -:  158:
        -:  159:#endif /* JERRY_BUILTIN_PROXY */
