        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-atomics-object.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-atomics-object.h"
        -:   17:#include "ecma-arraybuffer-object.h"
        -:   18:#include "ecma-shared-arraybuffer-object.h"
        -:   19:#include "ecma-bigint.h"
        -:   20:#include "ecma-typedarray-object.h"
        -:   21:#include "ecma-objects.h"
        -:   22:#include "ecma-builtins.h"
        -:   23:#include "ecma-exceptions.h"
        -:   24:#include "ecma-gc.h"
        -:   25:#include "ecma-globals.h"
        -:   26:#include "ecma-helpers.h"
        -:   27:#include "jmem.h"
        -:   28:#include "jcontext.h"
        -:   29:#include "ecma-function-object.h"
        -:   30:
        -:   31:#if JERRY_BUILTIN_ATOMICS
        -:   32:
        -:   33:/** \addtogroup ecma ECMA
        -:   34: * @{
        -:   35: *
        -:   36: * \addtogroup ecmaatomicsobject ECMA builtin Atomics helper functions
        -:   37: * @{
        -:   38: */
        -:   39:
        -:   40:/**
        -:   41: * Atomics validate Shared integer typedArray
        -:   42: *
        -:   43: * See also: ES11 24.4.1.1
        -:   44: *
        -:   45: * @return ecma value
        -:   46: */
        -:   47:ecma_value_t
    #####:   48:ecma_validate_shared_integer_typedarray (ecma_value_t typedarray, /**< typedArray argument */
        -:   49:                                         bool waitable) /**< waitable argument */
        -:   50:{
        -:   51:  /* 2. */
    #####:   52:  if (!ecma_is_value_object (typedarray))
        -:   53:  {
    #####:   54:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object"));
        -:   55:  }
        -:   56:
        -:   57:  /* 3-4. */
    #####:   58:  ecma_object_t *typedarray_p = ecma_get_object_from_value (typedarray);
    #####:   59:  ecma_typedarray_info_t target_info =  ecma_typedarray_get_info (typedarray_p);
        -:   60:
        -:   61:  /* 5-6. */
    #####:   62:  if (waitable)
        -:   63:  {
    #####:   64:    if (!(target_info.id == ECMA_BIGINT64_ARRAY || target_info.id == ECMA_INT32_ARRAY))
        -:   65:    {
    #####:   66:      return ecma_raise_type_error (ECMA_ERR_MSG ("Argument is not supported"));
        -:   67:    }
        -:   68:  }
        -:   69:  else
        -:   70:  {
    #####:   71:    if (target_info.id  == ECMA_UINT8_CLAMPED_ARRAY || target_info.id == ECMA_FLOAT32_ARRAY
    #####:   72:        || target_info.id == ECMA_FLOAT64_ARRAY)
        -:   73:    {
    #####:   74:      return ecma_raise_type_error (ECMA_ERR_MSG ("Argument is not supported"));
        -:   75:    }
        -:   76:  }
        -:   77:
        -:   78:  /* 7. */
    #####:   79:  JERRY_ASSERT (target_info.array_buffer_p != NULL);
        -:   80:
        -:   81:  /* 8-10. */
    #####:   82:  ecma_object_t *buffer = ecma_typedarray_get_arraybuffer (typedarray_p);
        -:   83:
    #####:   84:  if (!ecma_object_class_is (buffer, ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER))
        -:   85:  {
    #####:   86:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument is not SharedArrayBuffer"));
        -:   87:  }
        -:   88:
    #####:   89:  return ecma_make_object_value (buffer);
        -:   90:} /* ecma_validate_shared_integer_typedarray */
        -:   91:
        -:   92:/**
        -:   93: * Atomics validate Atomic Access
        -:   94: *
        -:   95: * See also: ES11 24.4.1.2
        -:   96: *
        -:   97: * @return ecma value
        -:   98: */
        -:   99:ecma_value_t
    #####:  100:ecma_validate_atomic_access (ecma_value_t typedarray, /**< typedArray argument */
        -:  101:                             ecma_value_t request_index) /**< request_index argument */
        -:  102:{
        -:  103:  /* 1. */
    #####:  104:  JERRY_ASSERT (ecma_is_value_object (typedarray)
        -:  105:                && ecma_typedarray_get_arraybuffer (ecma_get_object_from_value (typedarray)) != NULL);
        -:  106:
    #####:  107:  ecma_object_t *typedarray_p = ecma_get_object_from_value (typedarray);
        -:  108:
        -:  109:  /* 2. */
    #####:  110:  ecma_number_t access_index;
    #####:  111:  if (ECMA_IS_VALUE_ERROR (ecma_op_to_index (request_index, &access_index)))
        -:  112:  {
    #####:  113:    return ECMA_VALUE_ERROR;
        -:  114:  }
        -:  115:
        -:  116:  /* 3. */
    #####:  117:  ecma_typedarray_info_t target_info = ecma_typedarray_get_info (typedarray_p);
        -:  118:
        -:  119:  /* 4. */
    #####:  120:  JERRY_ASSERT (access_index >= 0);
        -:  121:
        -:  122:  /* 5-6. */
    #####:  123:  if (JERRY_UNLIKELY (access_index >= target_info.length))
        -:  124:  {
    #####:  125:    return ecma_raise_range_error (ECMA_ERR_MSG ("Invalid length"));
        -:  126:  }
        -:  127:
    #####:  128:  return ecma_make_number_value (access_index);
        -:  129:} /* ecma_validate_atomic_access */
        -:  130:
        -:  131:/**
        -:  132: * Atomics read, modify, write
        -:  133: *
        -:  134: * See also: ES11 24.4.1.11
        -:  135: *
        -:  136: * @return ecma value
        -:  137: */
        -:  138:ecma_value_t
    #####:  139:ecma_atomic_read_modify_write (ecma_value_t typedarray, /**< typedArray argument */
        -:  140:                               ecma_value_t index, /**< index argument */
        -:  141:                               ecma_value_t value, /**< value argument */
        -:  142:                               ecma_atomics_op_t op) /**< operation argument */
        -:  143:{
        -:  144:  /* 1. */
    #####:  145:  ecma_value_t buffer = ecma_validate_shared_integer_typedarray (typedarray, false);
        -:  146:
    #####:  147:  if (ECMA_IS_VALUE_ERROR (buffer))
        -:  148:  {
    #####:  149:    return buffer;
        -:  150:  }
        -:  151:
        -:  152:  /* 2. */
    #####:  153:  ecma_value_t idx = ecma_validate_atomic_access (typedarray, index);
        -:  154:
    #####:  155:  if (ECMA_IS_VALUE_ERROR (idx))
        -:  156:  {
    #####:  157:    return idx;
        -:  158:  }
        -:  159:
        -:  160:  /* 3. */
    #####:  161:  ecma_object_t *typedarray_p = ecma_get_object_from_value (typedarray);
    #####:  162:  ecma_typedarray_info_t target_info =  ecma_typedarray_get_info (typedarray_p);
        -:  163:
        -:  164:  /* 4-5. */
    #####:  165:  ecma_value_t val = ECMA_VALUE_ERROR;
    #####:  166:  ecma_number_t tmp;
    #####:  167:  if (target_info.id == ECMA_BIGINT64_ARRAY || target_info.id == ECMA_BIGUINT64_ARRAY)
        -:  168:  {
    #####:  169:    val = ecma_bigint_to_bigint (value, true);
        -:  170:  }
    #####:  171:  else if (!ECMA_IS_VALUE_ERROR (ecma_op_to_integer (value, &tmp)))
        -:  172:  {
    #####:  173:    val = ecma_make_number_value (tmp);
        -:  174:  }
        -:  175:
    #####:  176:  if (ECMA_IS_VALUE_ERROR (val))
        -:  177:  {
    #####:  178:    return val;
        -:  179:  }
        -:  180:
        -:  181:  /* 6. */
    #####:  182:  uint8_t element_size = target_info.element_size;
        -:  183:
        -:  184:  /* 7. */
    #####:  185:  ecma_typedarray_type_t element_type = target_info.id;
        -:  186:
        -:  187:  /* 8. */
    #####:  188:  uint32_t offset = target_info.offset;
        -:  189:
        -:  190:  /* 9. */
    #####:  191:  uint32_t indexed_position = ecma_number_to_uint32 (idx) * element_size + offset;
        -:  192:
        -:  193:  JERRY_UNUSED (indexed_position);
        -:  194:  JERRY_UNUSED (element_type);
        -:  195:  JERRY_UNUSED (val);
        -:  196:  JERRY_UNUSED (buffer);
        -:  197:  JERRY_UNUSED (op);
        -:  198:
    #####:  199:  ecma_free_value (val);
        -:  200:
        -:  201:  /* 10. */
    #####:  202:  return ecma_make_uint32_value (0);
        -:  203:} /* ecma_atomic_read_modify_write */
        -:  204:
        -:  205:/**
        -:  206: * Atomics load
        -:  207: *
        -:  208: * See also: ES11 24.4.1.12
        -:  209: *
        -:  210: * @return ecma value
        -:  211: */
        -:  212:ecma_value_t
    #####:  213:ecma_atomic_load (ecma_value_t typedarray, /**< typedArray argument */
        -:  214:                  ecma_value_t index) /**< index argument */
        -:  215:{
    #####:  216:  ecma_value_t buffer = ecma_validate_shared_integer_typedarray (typedarray, false);
        -:  217:
    #####:  218:  if (ECMA_IS_VALUE_ERROR (buffer))
        -:  219:  {
    #####:  220:    return buffer;
        -:  221:  }
        -:  222:
        -:  223:  /* 2. */
    #####:  224:  ecma_value_t idx = ecma_validate_atomic_access (typedarray, index);
        -:  225:
    #####:  226:  if (ECMA_IS_VALUE_ERROR (idx))
        -:  227:  {
    #####:  228:    return idx;
        -:  229:  }
        -:  230:
        -:  231:  /* 3. */
    #####:  232:  ecma_object_t *typedarray_p = ecma_get_object_from_value (typedarray);
    #####:  233:  ecma_typedarray_info_t target_info = ecma_typedarray_get_info (typedarray_p);
        -:  234:
        -:  235:  /* 4. */
    #####:  236:  uint8_t element_size = target_info.element_size;
        -:  237:
        -:  238:  /* 5. */
    #####:  239:  ecma_typedarray_type_t element_type = target_info.id;
        -:  240:
        -:  241:  /* 6. */
    #####:  242:  uint32_t offset = target_info.offset;
        -:  243:
        -:  244:  /* 7. */
    #####:  245:  uint32_t indexed_position = ecma_number_to_uint32 (idx) * element_size + offset;
        -:  246:
        -:  247:  JERRY_UNUSED (indexed_position);
        -:  248:  JERRY_UNUSED (element_type);
        -:  249:  JERRY_UNUSED (buffer);
        -:  250:
        -:  251:  /* 8. */
    #####:  252:  return ecma_make_uint32_value (0);
        -:  253:} /* ecma_atomic_load */
        -:  254:
        -:  255:/**
        -:  256: * @}
        -:  257: * @}
        -:  258: */
        -:  259:#endif /* JERRY_BUILTIN_ATOMICS */
