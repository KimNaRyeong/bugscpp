        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-shared-arraybuffer-object.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-arraybuffer-object.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-function-object.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-objects.h"
        -:   24:#include "ecma-shared-arraybuffer-object.h"
        -:   25:#include "ecma-typedarray-object.h"
        -:   26:#include "jcontext.h"
        -:   27:
        -:   28:/** \addtogroup ecma ECMA
        -:   29: * @{
        -:   30: *
        -:   31: * \addtogroup ecmasharedarraybufferobject ECMA SharedArrayBuffer object related routines
        -:   32: * @{
        -:   33: */
        -:   34:
        -:   35:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
        -:   36:
        -:   37:/**
        -:   38: * Creating SharedArrayBuffer objects based on the array length
        -:   39: *
        -:   40: * @return new SharedArrayBuffer object
        -:   41: */
        -:   42:ecma_object_t *
    #####:   43:ecma_shared_arraybuffer_new_object (uint32_t length) /**< length of the SharedArrayBuffer */
        -:   44:{
    #####:   45:  if (length > 0)
        -:   46:  {
    #####:   47:    return ecma_arraybuffer_create_object_with_buffer (ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER, length);
        -:   48:  }
        -:   49:
    #####:   50:  return ecma_arraybuffer_create_object (ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER, length);
        -:   51:} /* ecma_shared_arraybuffer_new_object */
        -:   52:
        -:   53:/**
        -:   54: * SharedArrayBuffer object creation operation.
        -:   55: *
        -:   56: * See also: ES11 24.1.1.1
        -:   57: *
        -:   58: * @return ecma value
        -:   59: *         Returned value must be freed with ecma_free_value
        -:   60: */
        -:   61:ecma_value_t
    #####:   62:ecma_op_create_shared_arraybuffer_object (const ecma_value_t *arguments_list_p, /**< list of arguments that
        -:   63:                                                                          *   are passed to String constructor */
        -:   64:                                          uint32_t arguments_list_len) /**< length of the arguments' list */
        -:   65:{
    #####:   66:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   67:
    #####:   68:  ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (JERRY_CONTEXT (current_new_target_p),
        -:   69:                                                                   ECMA_BUILTIN_ID_SHARED_ARRAYBUFFER_PROTOTYPE);
        -:   70:
    #####:   71:  if (proto_p == NULL)
        -:   72:  {
    #####:   73:    return ECMA_VALUE_ERROR;
        -:   74:  }
        -:   75:
    #####:   76:  ecma_number_t length_num = 0;
        -:   77:
    #####:   78:  if (arguments_list_len > 0)
        -:   79:  {
    #####:   80:    if (ecma_is_value_number (arguments_list_p[0]))
        -:   81:    {
    #####:   82:      length_num = ecma_get_number_from_value (arguments_list_p[0]);
        -:   83:    }
        -:   84:    else
        -:   85:    {
    #####:   86:      ecma_value_t to_number_value = ecma_op_to_number (arguments_list_p[0], &length_num);
        -:   87:
    #####:   88:      if (ECMA_IS_VALUE_ERROR (to_number_value))
        -:   89:      {
    #####:   90:        ecma_deref_object (proto_p);
    #####:   91:        return to_number_value;
        -:   92:      }
        -:   93:    }
        -:   94:
    #####:   95:    if (ecma_number_is_nan (length_num))
        -:   96:    {
    #####:   97:      length_num = 0;
        -:   98:    }
        -:   99:
    #####:  100:    const uint32_t maximum_size_in_byte = UINT32_MAX - sizeof (ecma_extended_object_t) - JMEM_ALIGNMENT + 1;
        -:  101:
    #####:  102:    if (length_num <= -1.0 || length_num > (ecma_number_t) maximum_size_in_byte + 0.5)
        -:  103:    {
    #####:  104:      ecma_deref_object (proto_p);
    #####:  105:      return ecma_raise_range_error (ECMA_ERR_MSG ("Invalid Shared ArrayBuffer length"));
        -:  106:    }
        -:  107:  }
        -:  108:
    #####:  109:  uint32_t length_uint32 = ecma_number_to_uint32 (length_num);
    #####:  110:  ecma_object_t *shared_array_buffer = ecma_shared_arraybuffer_new_object (length_uint32);
    #####:  111:  ECMA_SET_NON_NULL_POINTER (shared_array_buffer->u2.prototype_cp, proto_p);
    #####:  112:  ecma_deref_object (proto_p);
        -:  113:
    #####:  114:  return ecma_make_object_value (shared_array_buffer);
        -:  115:} /* ecma_op_create_shared_arraybuffer_object */
        -:  116:
        -:  117:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  118:
        -:  119:/**
        -:  120: * Helper function: check if the target is SharedArrayBuffer
        -:  121: *
        -:  122: * See also: ES11 24.1.1.4
        -:  123: *
        -:  124: * @return true - if value is a SharedArrayBuffer object
        -:  125: *         false - otherwise
        -:  126: */
        -:  127:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:  128:ecma_is_shared_arraybuffer (ecma_value_t target) /**< the target value */
        -:  129:{
        -:  130:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
    #####:  131:  return (ecma_is_value_object (target)
    #####:  132:          && ecma_object_class_is (ecma_get_object_from_value (target), ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER));
        -:  133:#else /* !JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  134:  JERRY_UNUSED (target);
    #####:  135:  return false;
        -:  136:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  137:} /* ecma_is_shared_arraybuffer */
        -:  138:
        -:  139:/**
        -:  140: * Helper function: check if the target is SharedArrayBuffer Object
        -:  141: *
        -:  142: * @return true - if value is a SharedArrayBuffer object
        -:  143: *         false - otherwise
        -:  144: */
        -:  145:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:  146:ecma_object_is_shared_arraybuffer (ecma_object_t *object_p) /**< the target object */
        -:  147:{
        -:  148:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
    #####:  149:  return ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER);
        -:  150:#else /* !JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  151:  JERRY_UNUSED (object_p);
    #####:  152:  return false;
        -:  153:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  154:} /* ecma_object_is_shared_arraybuffer */
        -:  155:
        -:  156:/**
        -:  157: * @}
        -:  158: * @}
        -:  159: */
