        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-promise.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-array-object.h"
        -:   18:#include "ecma-builtin-helpers.h"
        -:   19:#include "ecma-builtin-handlers.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-function-object.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-iterator-object.h"
        -:   25:#include "ecma-number-object.h"
        -:   26:#include "ecma-promise-object.h"
        -:   27:#include "jcontext.h"
        -:   28:
        -:   29:#if JERRY_ESNEXT
        -:   30:
        -:   31:#define ECMA_BUILTINS_INTERNAL
        -:   32:#include "ecma-builtins-internal.h"
        -:   33:
        -:   34:/**
        -:   35: * This object has a custom dispatch function.
        -:   36: */
        -:   37:#define BUILTIN_CUSTOM_DISPATCH
        -:   38:
        -:   39:/**
        -:   40: * List of built-in routine identifiers.
        -:   41: */
        -:   42:enum
        -:   43:{
        -:   44:  ECMA_PROMISE_ROUTINE_START = 0,
        -:   45:  ECMA_PROMISE_ROUTINE_REJECT,
        -:   46:  ECMA_PROMISE_ROUTINE_RESOLVE,
        -:   47:  ECMA_PROMISE_ROUTINE_RACE,
        -:   48:  ECMA_PROMISE_ROUTINE_ALL,
        -:   49:  ECMA_PROMISE_ROUTINE_ALLSETTLED,
        -:   50:  ECMA_PROMISE_ROUTINE_ANY,
        -:   51:  ECMA_PROMISE_ROUTINE_SPECIES_GET
        -:   52:};
        -:   53:
        -:   54:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-promise.inc.h"
        -:   55:#define BUILTIN_UNDERSCORED_ID promise
        -:   56:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   57:
        -:   58:/** \addtogroup ecma ECMA
        -:   59: * @{
        -:   60: *
        -:   61: * \addtogroup ecmabuiltins
        -:   62: * @{
        -:   63: *
        -:   64: * \addtogroup promise ECMA Promise object built-in
        -:   65: * @{
        -:   66: */
        -:   67:
        -:   68:/**
        -:   69: * Runtime Semantics: PerformPromiseRace.
        -:   70: *
        -:   71: * See also:
        -:   72: *         ES2020 25.6.4.4.1
        -:   73: *
        -:   74: * @return ecma value of the new promise.
        -:   75: *         Returned value must be freed with ecma_free_value.
        -:   76: */
        -:   77:static inline ecma_value_t
    #####:   78:ecma_builtin_promise_perform_race (ecma_value_t iterator, /**< the iterator for race */
        -:   79:                                   ecma_value_t next_method, /**< next method */
        -:   80:                                   ecma_object_t *capability_obj_p, /**< PromiseCapability record */
        -:   81:                                   ecma_value_t ctor, /**< Constructor value */
        -:   82:                                   bool *done_p) /**< [out] iteratorRecord[[done]] */
        -:   83:{
    #####:   84:  JERRY_ASSERT (ecma_is_value_object (iterator));
    #####:   85:  JERRY_ASSERT (ecma_object_class_is (capability_obj_p, ECMA_OBJECT_CLASS_PROMISE_CAPABILITY));
    #####:   86:  JERRY_ASSERT (ecma_is_constructor (ctor));
        -:   87:
    #####:   88:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
        -:   89:
    #####:   90:  ecma_value_t resolve = ecma_op_object_get_by_magic_id (ecma_get_object_from_value (ctor),
        -:   91:                                                         LIT_MAGIC_STRING_RESOLVE);
        -:   92:
    #####:   93:  if (ECMA_IS_VALUE_ERROR (resolve))
        -:   94:  {
    #####:   95:    return resolve;
        -:   96:  }
        -:   97:
    #####:   98:  if (!ecma_op_is_callable (resolve))
        -:   99:  {
    #####:  100:    ecma_free_value (resolve);
    #####:  101:    return ecma_raise_type_error (ECMA_ERR_MSG ("Resolve method must be callable"));
        -:  102:  }
        -:  103:
    #####:  104:  ecma_object_t *resolve_func_p = ecma_get_object_from_value (resolve);
    #####:  105:  ecma_value_t ret_value = ECMA_VALUE_ERROR;
        -:  106:
        -:  107:  /* 5. */
        -:  108:  while (true)
    #####:  109:  {
        -:  110:    /* a. */
    #####:  111:    ecma_value_t next = ecma_op_iterator_step (iterator, next_method);
        -:  112:    /* b, c. */
    #####:  113:    if (ECMA_IS_VALUE_ERROR (next))
        -:  114:    {
    #####:  115:      goto done;
        -:  116:    }
        -:  117:
        -:  118:    /* d. */
    #####:  119:    if (ecma_is_value_false (next))
        -:  120:    {
        -:  121:      /* ii. */
    #####:  122:      ret_value = ecma_copy_value (capability_p->header.u.cls.u3.promise);
    #####:  123:      goto done;
        -:  124:    }
        -:  125:
        -:  126:    /* e. */
    #####:  127:    ecma_value_t next_val = ecma_op_iterator_value (next);
    #####:  128:    ecma_free_value (next);
        -:  129:
        -:  130:    /* f, g. */
    #####:  131:    if (ECMA_IS_VALUE_ERROR (next_val))
        -:  132:    {
    #####:  133:      goto done;
        -:  134:    }
        -:  135:
        -:  136:    /* h. */
    #####:  137:    ecma_value_t next_promise = ecma_op_function_call (resolve_func_p, ctor, &next_val, 1);
    #####:  138:    ecma_free_value (next_val);
        -:  139:
    #####:  140:    if (ECMA_IS_VALUE_ERROR (next_promise))
        -:  141:    {
    #####:  142:      goto exit;
        -:  143:    }
        -:  144:
        -:  145:    /* i. */
    #####:  146:    ecma_value_t args[2] = {capability_p->resolve, capability_p->reject};
    #####:  147:    ecma_value_t result = ecma_op_invoke_by_magic_id (next_promise, LIT_MAGIC_STRING_THEN, args, 2);
    #####:  148:    ecma_free_value (next_promise);
        -:  149:
    #####:  150:    if (ECMA_IS_VALUE_ERROR (result))
        -:  151:    {
    #####:  152:      goto exit;
        -:  153:    }
        -:  154:
    #####:  155:    ecma_free_value (result);
        -:  156:  }
        -:  157:
    #####:  158:done:
    #####:  159:  *done_p = true;
    #####:  160:exit:
    #####:  161:  ecma_deref_object (resolve_func_p);
        -:  162:
    #####:  163:  return ret_value;
        -:  164:} /* ecma_builtin_promise_perform_race */
        -:  165:
        -:  166:/**
        -:  167: * Runtime Semantics: Perform Promise all, allSettled or any.
        -:  168: *
        -:  169: * See also:
        -:  170: *         ES2020 25.6.4.1.1
        -:  171: *
        -:  172: * @return ecma value of the new promise.
        -:  173: *         Returned value must be freed with ecma_free_value.
        -:  174: */
        -:  175:static inline ecma_value_t
    #####:  176:ecma_builtin_promise_perform (ecma_value_t iterator, /**< iteratorRecord */
        -:  177:                              ecma_value_t next_method, /**< next method */
        -:  178:                              ecma_object_t *capability_obj_p,  /**< PromiseCapability record */
        -:  179:                              ecma_value_t ctor, /**< the caller of Promise.all */
        -:  180:                              uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  181:                              bool *done_p) /**< [out] iteratorRecord[[done]] */
        -:  182:{
        -:  183:  /* 1. - 2. */
    #####:  184:  JERRY_ASSERT (ecma_object_class_is (capability_obj_p, ECMA_OBJECT_CLASS_PROMISE_CAPABILITY));
    #####:  185:  JERRY_ASSERT (ecma_is_constructor (ctor));
        -:  186:
    #####:  187:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
        -:  188:
    #####:  189:  ecma_value_t resolve = ecma_op_object_get_by_magic_id (ecma_get_object_from_value (ctor),
        -:  190:                                                         LIT_MAGIC_STRING_RESOLVE);
        -:  191:
    #####:  192:  if (ECMA_IS_VALUE_ERROR (resolve))
        -:  193:  {
    #####:  194:    return resolve;
        -:  195:  }
        -:  196:
    #####:  197:  if (!ecma_op_is_callable (resolve))
        -:  198:  {
    #####:  199:    ecma_free_value (resolve);
    #####:  200:    return ecma_raise_type_error (ECMA_ERR_MSG ("Resolve method must be callable"));
        -:  201:  }
        -:  202:
    #####:  203:  ecma_object_t *resolve_func_p = ecma_get_object_from_value (resolve);
        -:  204:
        -:  205:  /* 3. */
    #####:  206:  ecma_object_t *values_array_obj_p = ecma_op_new_array_object (0);
    #####:  207:  ecma_value_t values_array = ecma_make_object_value (values_array_obj_p);
        -:  208:  /* 4. */
    #####:  209:  ecma_value_t remaining = ecma_op_create_number_object (ecma_make_integer_value (1));
        -:  210:  /* 5. */
    #####:  211:  uint32_t idx = 0;
        -:  212:
    #####:  213:  ecma_value_t ret_value = ECMA_VALUE_ERROR;
        -:  214:
        -:  215:  /* 6. */
        -:  216:  while (true)
    #####:  217:  {
        -:  218:    /* a. */
    #####:  219:    ecma_value_t next = ecma_op_iterator_step (iterator, next_method);
        -:  220:    /* b. - c. */
    #####:  221:    if (ECMA_IS_VALUE_ERROR (next))
        -:  222:    {
    #####:  223:      goto done;
        -:  224:    }
        -:  225:
        -:  226:    /* d. */
    #####:  227:    if (ecma_is_value_false (next))
        -:  228:    {
        -:  229:      /* ii. - iii. */
    #####:  230:      if (ecma_promise_remaining_inc_or_dec (remaining, false) == 0)
        -:  231:      {
    #####:  232:        if (builtin_routine_id == ECMA_PROMISE_ROUTINE_ANY)
        -:  233:        {
    #####:  234:          ret_value = ecma_raise_aggregate_error (values_array, ECMA_VALUE_UNDEFINED);
    #####:  235:          goto done;
        -:  236:        }
        -:  237:
        -:  238:        /* 2. */
    #####:  239:        ecma_value_t resolve_result = ecma_op_function_call (ecma_get_object_from_value (capability_p->resolve),
        -:  240:                                                             ECMA_VALUE_UNDEFINED,
        -:  241:                                                             &values_array,
        -:  242:                                                             1);
        -:  243:        /* 3. */
    #####:  244:        if (ECMA_IS_VALUE_ERROR (resolve_result))
        -:  245:        {
    #####:  246:          goto done;
        -:  247:        }
        -:  248:
    #####:  249:        ecma_free_value (resolve_result);
        -:  250:      }
        -:  251:
        -:  252:      /* iv. */
    #####:  253:      ret_value = ecma_copy_value (capability_p->header.u.cls.u3.promise);
    #####:  254:      goto done;
        -:  255:    }
        -:  256:
        -:  257:    /* e. */
    #####:  258:    ecma_value_t next_value = ecma_op_iterator_value (next);
    #####:  259:    ecma_free_value (next);
        -:  260:
        -:  261:    /* f. - g. */
    #####:  262:    if (ECMA_IS_VALUE_ERROR (next_value))
        -:  263:    {
    #####:  264:      goto done;
        -:  265:    }
        -:  266:
        -:  267:    /* h. */
    #####:  268:    ecma_builtin_helper_def_prop_by_index (values_array_obj_p,
        -:  269:                                           idx,
        -:  270:                                           ECMA_VALUE_UNDEFINED,
        -:  271:                                           ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);
        -:  272:
        -:  273:    /* i. */
    #####:  274:    ecma_value_t next_promise = ecma_op_function_call (resolve_func_p, ctor, &next_value, 1);
    #####:  275:    ecma_free_value (next_value);
        -:  276:
        -:  277:    /* j. */
    #####:  278:    if (ECMA_IS_VALUE_ERROR (next_promise))
        -:  279:    {
    #####:  280:      goto exit;
        -:  281:    }
        -:  282:
    #####:  283:    if (JERRY_UNLIKELY (idx == UINT32_MAX - 1))
        -:  284:    {
    #####:  285:      ecma_raise_range_error (ECMA_ERR_MSG ("Promise.all remaining elements limit reached"));
    #####:  286:      goto exit;
        -:  287:    }
        -:  288:
    #####:  289:    idx++;
    #####:  290:    ecma_value_t args[2];
    #####:  291:    ecma_object_t *executor_func_p = NULL;
        -:  292:
    #####:  293:    if (builtin_routine_id != ECMA_PROMISE_ROUTINE_ANY)
        -:  294:    {
        -:  295:      /* k. */
    #####:  296:      executor_func_p = ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROMISE_ALL_HELPER,
        -:  297:                                                       sizeof (ecma_promise_all_executor_t));
        -:  298:
    #####:  299:      ecma_promise_all_executor_t *executor_p = (ecma_promise_all_executor_t *) executor_func_p;
        -:  300:
        -:  301:      /* m. + t. */
    #####:  302:      executor_p->index = idx;
        -:  303:
        -:  304:      /* n. */
    #####:  305:      executor_p->values = values_array;
        -:  306:
        -:  307:      /* o. */
    #####:  308:      executor_p->capability = ecma_make_object_value (capability_obj_p);
        -:  309:
        -:  310:      /* p. */
    #####:  311:      executor_p->remaining_elements = remaining;
        -:  312:
    #####:  313:      uint8_t executor_type = ECMA_PROMISE_ALL_RESOLVE << ECMA_NATIVE_HANDLER_COMMON_FLAGS_SHIFT;
        -:  314:
    #####:  315:      if (builtin_routine_id == ECMA_PROMISE_ROUTINE_ALLSETTLED)
        -:  316:      {
    #####:  317:        executor_type = ECMA_PROMISE_ALLSETTLED_RESOLVE << ECMA_NATIVE_HANDLER_COMMON_FLAGS_SHIFT;
        -:  318:      }
        -:  319:
    #####:  320:      executor_p->header.u.built_in.u2.routine_flags |= executor_type;
        -:  321:
    #####:  322:      args[0] = ecma_make_object_value (executor_func_p);
        -:  323:    }
        -:  324:    else
        -:  325:    {
    #####:  326:      args[0] = capability_p->resolve;
        -:  327:    }
        -:  328:
        -:  329:    /* q. */
    #####:  330:    ecma_promise_remaining_inc_or_dec (remaining, true);
        -:  331:    ecma_value_t result;
        -:  332:
    #####:  333:    if (builtin_routine_id != ECMA_PROMISE_ROUTINE_ALL)
        -:  334:    {
    #####:  335:      uint8_t executor_type = ECMA_PROMISE_ALLSETTLED_REJECT << ECMA_NATIVE_HANDLER_COMMON_FLAGS_SHIFT;
        -:  336:
    #####:  337:      if (builtin_routine_id == ECMA_PROMISE_ROUTINE_ANY)
        -:  338:      {
    #####:  339:        executor_type = ECMA_PROMISE_ANY_REJECT << ECMA_NATIVE_HANDLER_COMMON_FLAGS_SHIFT;
        -:  340:      }
        -:  341:
    #####:  342:      ecma_object_t *reject_func_p = ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROMISE_ALL_HELPER,
        -:  343:                                                                    sizeof (ecma_promise_all_executor_t));
        -:  344:
    #####:  345:      ecma_promise_all_executor_t *reject_p = (ecma_promise_all_executor_t *) reject_func_p;
    #####:  346:      reject_p->index = idx;
    #####:  347:      reject_p->values = values_array;
    #####:  348:      reject_p->capability = ecma_make_object_value (capability_obj_p);
    #####:  349:      reject_p->remaining_elements = remaining;
    #####:  350:      reject_p->header.u.built_in.u2.routine_flags |= executor_type;
    #####:  351:      args[1] = ecma_make_object_value (reject_func_p);
    #####:  352:      result = ecma_op_invoke_by_magic_id (next_promise, LIT_MAGIC_STRING_THEN, args, 2);
    #####:  353:      ecma_deref_object (reject_func_p);
        -:  354:    }
        -:  355:    else
        -:  356:    {
    #####:  357:      args[1] = capability_p->reject;
    #####:  358:      result = ecma_op_invoke_by_magic_id (next_promise, LIT_MAGIC_STRING_THEN, args, 2);
        -:  359:    }
        -:  360:
    #####:  361:    ecma_free_value (next_promise);
        -:  362:
    #####:  363:    if (builtin_routine_id != ECMA_PROMISE_ROUTINE_ANY)
        -:  364:    {
    #####:  365:      ecma_deref_object (executor_func_p);
        -:  366:    }
        -:  367:
        -:  368:    /* s. */
    #####:  369:    if (ECMA_IS_VALUE_ERROR (result))
        -:  370:    {
    #####:  371:      goto exit;
        -:  372:    }
        -:  373:
    #####:  374:    ecma_free_value (result);
        -:  375:  }
        -:  376:
    #####:  377:done:
    #####:  378:  *done_p = true;
    #####:  379:exit:
    #####:  380:  ecma_free_value (remaining);
    #####:  381:  ecma_deref_object (values_array_obj_p);
    #####:  382:  ecma_deref_object (resolve_func_p);
        -:  383:
    #####:  384:  return ret_value;
        -:  385:} /* ecma_builtin_promise_perform */
        -:  386:
        -:  387:/**
        -:  388: * The common function for Promise.race, Promise.all, Promise.any and Promise.allSettled.
        -:  389: *
        -:  390: * @return ecma value of the new promise.
        -:  391: *         Returned value must be freed with ecma_free_value.
        -:  392: */
        -:  393:static ecma_value_t
    #####:  394:ecma_builtin_promise_helper (ecma_value_t this_arg, /**< 'this' argument */
        -:  395:                             ecma_value_t iterable, /**< the items to be resolved */
        -:  396:                             uint8_t builtin_routine_id) /**< built-in wide routine identifier */
        -:  397:{
    #####:  398:  ecma_object_t *capability_obj_p = ecma_promise_new_capability (this_arg, ECMA_VALUE_UNDEFINED);
        -:  399:
    #####:  400:  if (JERRY_UNLIKELY (capability_obj_p == NULL))
        -:  401:  {
    #####:  402:    return ECMA_VALUE_ERROR;
        -:  403:  }
        -:  404:
    #####:  405:  ecma_value_t next_method;
    #####:  406:  ecma_value_t iterator = ecma_op_get_iterator (iterable, ECMA_VALUE_SYNC_ITERATOR, &next_method);
    #####:  407:  ecma_value_t ret = ECMA_VALUE_ERROR;
        -:  408:
    #####:  409:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&iterator, capability_obj_p)))
        -:  410:  {
    #####:  411:    ecma_free_value (next_method);
    #####:  412:    ecma_deref_object (capability_obj_p);
    #####:  413:    return iterator;
        -:  414:  }
        -:  415:
    #####:  416:  bool is_done = false;
        -:  417:
    #####:  418:  if (builtin_routine_id == ECMA_PROMISE_ROUTINE_RACE)
        -:  419:  {
    #####:  420:    ret = ecma_builtin_promise_perform_race (iterator, next_method, capability_obj_p, this_arg, &is_done);
        -:  421:  }
        -:  422:  else
        -:  423:  {
    #####:  424:    ret = ecma_builtin_promise_perform (iterator,
        -:  425:                                        next_method,
        -:  426:                                        capability_obj_p,
        -:  427:                                        this_arg,
        -:  428:                                        builtin_routine_id,
        -:  429:                                        &is_done);
        -:  430:  }
        -:  431:
    #####:  432:  if (ECMA_IS_VALUE_ERROR (ret))
        -:  433:  {
    #####:  434:    if (!is_done)
        -:  435:    {
    #####:  436:      ret = ecma_op_iterator_close (iterator);
        -:  437:    }
        -:  438:
    #####:  439:    ecma_op_if_abrupt_reject_promise (&ret, capability_obj_p);
        -:  440:  }
        -:  441:
    #####:  442:  ecma_free_value (iterator);
    #####:  443:  ecma_free_value (next_method);
    #####:  444:  ecma_deref_object (capability_obj_p);
        -:  445:
    #####:  446:  return ret;
        -:  447:} /* ecma_builtin_promise_helper */
        -:  448:
        -:  449:/**
        -:  450: * Handle calling [[Call]] of built-in Promise object.
        -:  451: *
        -:  452: * ES2015 25.4.3 Promise is not intended to be called
        -:  453: * as a function and will throw an exception when called
        -:  454: * in that manner.
        -:  455: *
        -:  456: * @return ecma value
        -:  457: */
        -:  458:ecma_value_t
    #####:  459:ecma_builtin_promise_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  460:                                    uint32_t arguments_list_len) /**< number of arguments */
        -:  461:{
    #####:  462:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  463:
    #####:  464:  return ecma_raise_type_error (ECMA_ERR_MSG ("Constructor Promise requires 'new'"));
        -:  465:} /* ecma_builtin_promise_dispatch_call */
        -:  466:
        -:  467:/**
        -:  468: * Handle calling [[Construct]] of built-in Promise object.
        -:  469: *
        -:  470: * @return ecma value
        -:  471: */
        -:  472:ecma_value_t
    #####:  473:ecma_builtin_promise_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  474:                                         uint32_t arguments_list_len) /**< number of arguments */
        -:  475:{
    #####:  476:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  477:
    #####:  478:  if (arguments_list_len == 0 || !ecma_op_is_callable (arguments_list_p[0]))
        -:  479:  {
    #####:  480:    return ecma_raise_type_error (ECMA_ERR_MSG ("First parameter must be callable"));
        -:  481:  }
        -:  482:
    #####:  483:  return ecma_op_create_promise_object (arguments_list_p[0],
        -:  484:                                        ECMA_VALUE_UNDEFINED,
        -:  485:                                        JERRY_CONTEXT (current_new_target_p));
        -:  486:} /* ecma_builtin_promise_dispatch_construct */
        -:  487:
        -:  488:/**
        -:  489: * Dispatcher of the built-in's routines
        -:  490: *
        -:  491: * @return ecma value
        -:  492: *         Returned value must be freed with ecma_free_value.
        -:  493: */
        -:  494:ecma_value_t
    #####:  495:ecma_builtin_promise_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:  496:                                                                    *   identifier */
        -:  497:                                       ecma_value_t this_arg, /**< 'this' argument value */
        -:  498:                                       const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  499:                                                                               *   passed to routine */
        -:  500:                                       uint32_t arguments_number) /**< length of arguments' list */
        -:  501:{
        -:  502:  JERRY_UNUSED (arguments_number);
        -:  503:
    #####:  504:  switch (builtin_routine_id)
        -:  505:  {
    #####:  506:    case ECMA_PROMISE_ROUTINE_REJECT:
        -:  507:    case ECMA_PROMISE_ROUTINE_RESOLVE:
        -:  508:    {
    #####:  509:      bool is_resolve = (builtin_routine_id == ECMA_PROMISE_ROUTINE_RESOLVE);
    #####:  510:      return ecma_promise_reject_or_resolve (this_arg, arguments_list_p[0], is_resolve);
        -:  511:    }
    #####:  512:    case ECMA_PROMISE_ROUTINE_RACE:
        -:  513:    case ECMA_PROMISE_ROUTINE_ALL:
        -:  514:    case ECMA_PROMISE_ROUTINE_ALLSETTLED:
        -:  515:    case ECMA_PROMISE_ROUTINE_ANY:
        -:  516:    {
    #####:  517:      return ecma_builtin_promise_helper (this_arg, arguments_list_p[0], builtin_routine_id);
        -:  518:    }
    #####:  519:    case ECMA_PROMISE_ROUTINE_SPECIES_GET:
        -:  520:    {
    #####:  521:      return ecma_copy_value (this_arg);
        -:  522:    }
    #####:  523:    default:
        -:  524:    {
    #####:  525:      JERRY_UNREACHABLE ();
        -:  526:    }
        -:  527:  }
        -:  528:} /* ecma_builtin_promise_dispatch_routine */
        -:  529:
        -:  530:/**
        -:  531: * @}
        -:  532: * @}
        -:  533: * @}
        -:  534: */
        -:  535:
        -:  536:#endif /* JERRY_ESNEXT */
