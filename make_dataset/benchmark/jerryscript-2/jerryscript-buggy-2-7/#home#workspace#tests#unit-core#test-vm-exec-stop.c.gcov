        -:    0:Source:/home/workspace/tests/unit-core/test-vm-exec-stop.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "config.h"
        -:   17:#include "jerryscript.h"
        -:   18:
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static jerry_value_t
    #####:   22:vm_exec_stop_callback (void *user_p)
        -:   23:{
    #####:   24:  int *int_p = (int *) user_p;
        -:   25:
    #####:   26:  if (*int_p > 0)
        -:   27:  {
    #####:   28:    (*int_p)--;
        -:   29:
    #####:   30:    return jerry_create_undefined ();
        -:   31:  }
        -:   32:
    #####:   33:  return jerry_create_string ((const jerry_char_t *) "Abort script");
        -:   34:} /* vm_exec_stop_callback */
        -:   35:
        -:   36:int
    #####:   37:main (void)
        -:   38:{
    #####:   39:  TEST_INIT ();
        -:   40:
        -:   41:  /* Test stopping an infinite loop. */
    #####:   42:  if (!jerry_is_feature_enabled (JERRY_FEATURE_VM_EXEC_STOP))
        -:   43:  {
        -:   44:    return 0;
        -:   45:  }
        -:   46:
    #####:   47:  jerry_init (JERRY_INIT_EMPTY);
        -:   48:
    #####:   49:  int countdown = 6;
    #####:   50:  jerry_set_vm_exec_stop_callback (vm_exec_stop_callback, &countdown, 16);
        -:   51:
    #####:   52:  const jerry_char_t inf_loop_code_src1[] = "while(true) {}";
    #####:   53:  jerry_value_t parsed_code_val = jerry_parse (inf_loop_code_src1,
        -:   54:                                               sizeof (inf_loop_code_src1) - 1,
        -:   55:                                               NULL);
        -:   56:
    #####:   57:  TEST_ASSERT (!jerry_value_is_error (parsed_code_val));
    #####:   58:  jerry_value_t res = jerry_run (parsed_code_val);
    #####:   59:  TEST_ASSERT (countdown == 0);
        -:   60:
    #####:   61:  TEST_ASSERT (jerry_value_is_error (res));
        -:   62:
    #####:   63:  jerry_release_value (res);
    #####:   64:  jerry_release_value (parsed_code_val);
        -:   65:
        -:   66:  /* A more complex example. Although the callback error is captured
        -:   67:   * by the catch block, it is automatically thrown again. */
        -:   68:
        -:   69:  /* We keep the callback function, only the countdown is reset. */
    #####:   70:  countdown = 6;
        -:   71:
    #####:   72:  const jerry_char_t inf_loop_code_src2[] = TEST_STRING_LITERAL (
        -:   73:    "function f() { while (true) ; }\n"
        -:   74:    "try { f(); } catch(e) {}"
        -:   75:  );
        -:   76:
    #####:   77:  parsed_code_val = jerry_parse (inf_loop_code_src2,
        -:   78:                                 sizeof (inf_loop_code_src2) - 1,
        -:   79:                                 NULL);
        -:   80:
    #####:   81:  TEST_ASSERT (!jerry_value_is_error (parsed_code_val));
    #####:   82:  res = jerry_run (parsed_code_val);
    #####:   83:  TEST_ASSERT (countdown == 0);
        -:   84:
        -:   85:  /* The result must have an error flag which proves that
        -:   86:   * the error is thrown again inside the catch block. */
    #####:   87:  TEST_ASSERT (jerry_value_is_error (res));
        -:   88:
    #####:   89:  jerry_release_value (res);
    #####:   90:  jerry_release_value (parsed_code_val);
        -:   91:
    #####:   92:  jerry_cleanup ();
    #####:   93:  return 0;
        -:   94:} /* main */
