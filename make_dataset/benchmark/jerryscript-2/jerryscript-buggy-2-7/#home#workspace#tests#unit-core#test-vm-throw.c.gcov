        -:    0:Source:/home/workspace/tests/unit-core/test-vm-throw.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "config.h"
        -:   17:#include "jerryscript.h"
        -:   18:
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static int mode = 0;
        -:   22:static int counter = 0;
        -:   23:
        -:   24:static void
    #####:   25:vm_throw_callback (const jerry_value_t error_value, /**< captured error */
        -:   26:                   void *user_p) /**< user pointer */
        -:   27:{
    #####:   28:  TEST_ASSERT (user_p == (void *) &mode);
    #####:   29:  counter++;
        -:   30:
    #####:   31:  switch (mode)
        -:   32:  {
    #####:   33:    case 0:
        -:   34:    {
    #####:   35:      TEST_ASSERT (counter == 1);
    #####:   36:      TEST_ASSERT (jerry_value_is_number (error_value) && jerry_get_number_value (error_value) == -5.6);
        -:   37:      break;
        -:   38:    }
    #####:   39:    case 1:
        -:   40:    {
    #####:   41:      TEST_ASSERT (counter == 1);
    #####:   42:      TEST_ASSERT (jerry_value_is_null (error_value));
        -:   43:      break;
        -:   44:    }
    #####:   45:    case 2:
        -:   46:    {
        -:   47:      jerry_char_t string_buf[2];
    #####:   48:      jerry_size_t size = sizeof (string_buf);
        -:   49:
    #####:   50:      string_buf[0] = '\0';
    #####:   51:      string_buf[1] = '\0';
        -:   52:
    #####:   53:      TEST_ASSERT (counter >= 1 && counter <= 3);
    #####:   54:      TEST_ASSERT (jerry_value_is_string (error_value));
    #####:   55:      TEST_ASSERT (jerry_get_string_size (error_value) == size);
    #####:   56:      TEST_ASSERT (jerry_string_to_char_buffer (error_value, string_buf, size) == size);
    #####:   57:      TEST_ASSERT (string_buf[0] == 'e' && string_buf[1] == (char) ('0' + counter));
        -:   58:      break;
        -:   59:    }
    #####:   60:    case 3:
        -:   61:    {
    #####:   62:      TEST_ASSERT (counter == 1);
    #####:   63:      TEST_ASSERT (jerry_get_error_type (error_value) == JERRY_ERROR_RANGE);
        -:   64:      break;
        -:   65:    }
    #####:   66:    case 4:
        -:   67:    {
    #####:   68:      TEST_ASSERT (mode == 4);
    #####:   69:      TEST_ASSERT (counter >= 1 && counter <= 2);
        -:   70:
    #####:   71:      jerry_error_t error = (counter == 1) ? JERRY_ERROR_REFERENCE : JERRY_ERROR_TYPE;
    #####:   72:      TEST_ASSERT (jerry_get_error_type (error_value) == error);
        -:   73:      break;
        -:   74:    }
    #####:   75:    case 5:
        -:   76:    case 6:
        -:   77:    {
    #####:   78:      TEST_ASSERT (counter >= 1 && counter <= 2);
    #####:   79:      TEST_ASSERT (jerry_value_is_false (error_value));
        -:   80:      break;
        -:   81:    }
    #####:   82:    default:
        -:   83:    {
    #####:   84:      TEST_ASSERT (mode == 8 || mode == 9);
    #####:   85:      TEST_ASSERT (counter == 1);
    #####:   86:      TEST_ASSERT (jerry_value_is_true (error_value));
        -:   87:      break;
        -:   88:    }
        -:   89:  }
    #####:   90:} /* vm_throw_callback */
        -:   91:
        -:   92:static jerry_value_t
    #####:   93:native_handler (const jerry_call_info_t *call_info_p, /**< call info */
        -:   94:                const jerry_value_t args_p[], /**< arguments */
        -:   95:                const jerry_length_t args_count) /**< arguments length */
        -:   96:{
        -:   97:  (void) call_info_p;
        -:   98:  (void) args_p;
    #####:   99:  TEST_ASSERT (args_count == 0);
        -:  100:
    #####:  101:  if (mode == 7)
        -:  102:  {
    #####:  103:    jerry_value_t result = jerry_create_error (JERRY_ERROR_COMMON, (const jerry_char_t *) "Error!");
        -:  104:
    #####:  105:    TEST_ASSERT (!jerry_error_is_throw_captured (result));
    #####:  106:    jerry_error_set_throw_capture (result, false);
    #####:  107:    TEST_ASSERT (jerry_error_is_throw_captured (result));
        -:  108:    return result;
        -:  109:  }
        -:  110:
    #####:  111:  jerry_char_t source[] = TEST_STRING_LITERAL ("throw false");
    #####:  112:  jerry_value_t result = jerry_eval (source, sizeof (source) - 1, JERRY_PARSE_NO_OPTS);
        -:  113:
    #####:  114:  TEST_ASSERT (jerry_error_is_throw_captured (result));
        -:  115:
    #####:  116:  if (mode == 6)
        -:  117:  {
    #####:  118:    jerry_error_set_throw_capture (result, true);
    #####:  119:    TEST_ASSERT (!jerry_error_is_throw_captured (result));
        -:  120:  }
        -:  121:  return result;
        -:  122:} /* native_handler */
        -:  123:
        -:  124:static void
    #####:  125:do_eval (const char *script_p, /**< script to evaluate */
        -:  126:         bool should_throw) /**< script throws an error */
        -:  127:{
    #####:  128:  jerry_value_t result = jerry_eval ((const jerry_char_t *) script_p, strlen (script_p), JERRY_PARSE_NO_OPTS);
    #####:  129:  TEST_ASSERT (jerry_value_is_error (result) == should_throw);
    #####:  130:  jerry_release_value (result);
    #####:  131:} /* do_eval */
        -:  132:
        -:  133:int
    #####:  134:main (void)
        -:  135:{
    #####:  136:  TEST_INIT ();
        -:  137:
        -:  138:  /* Test stopping an infinite loop. */
    #####:  139:  if (!jerry_is_feature_enabled (JERRY_FEATURE_VM_THROW))
        -:  140:  {
        -:  141:    return 0;
        -:  142:  }
        -:  143:
    #####:  144:  jerry_init (JERRY_INIT_EMPTY);
        -:  145:
    #####:  146:  jerry_set_vm_throw_callback (vm_throw_callback, (void *) &mode);
        -:  147:
    #####:  148:  mode = 0;
    #####:  149:  counter = 0;
    #####:  150:  do_eval (TEST_STRING_LITERAL ("throw -5.6"),
        -:  151:           true);
    #####:  152:  TEST_ASSERT (counter == 1);
        -:  153:
    #####:  154:  mode = 1;
    #####:  155:  counter = 0;
    #####:  156:  do_eval (TEST_STRING_LITERAL ("function f() { throw null }\n"
        -:  157:                                "function g() { f() }\n"
        -:  158:                                "g()\n"),
        -:  159:           true);
    #####:  160:  TEST_ASSERT (counter == 1);
        -:  161:
    #####:  162:  mode = 2;
    #####:  163:  counter = 0;
    #####:  164:  do_eval (TEST_STRING_LITERAL ("function f() { throw 'e1' }\n"
        -:  165:                                "function g() { try { f() } catch (e) { throw 'e2' } }\n"
        -:  166:                                "try { g() } catch (e) { throw 'e3' }\n"),
        -:  167:           true);
    #####:  168:  TEST_ASSERT (counter == 3);
        -:  169:
    #####:  170:  mode = 3;
    #####:  171:  counter = 0;
    #####:  172:  do_eval (TEST_STRING_LITERAL ("function f() { throw new RangeError() }\n"
        -:  173:                                "function g() { try { f() } finally { } }\n"
        -:  174:                                "try { g() } finally { }\n"),
        -:  175:           true);
    #####:  176:  TEST_ASSERT (counter == 1);
        -:  177:
    #####:  178:  mode = 4;
    #####:  179:  counter = 0;
    #####:  180:  do_eval (TEST_STRING_LITERAL ("function f() { unresolved }\n"
        -:  181:                                "function g() { try { f() } finally { null.member } }\n"
        -:  182:                                "try { g() } finally { }\n"),
        -:  183:           true);
    #####:  184:  TEST_ASSERT (counter == 2);
        -:  185:
        -:  186:  /* Native functions may trigger the call twice: */
    #####:  187:  jerry_value_t global_object_value = jerry_get_global_object ();
    #####:  188:  jerry_value_t function_value = jerry_create_external_function (native_handler);
    #####:  189:  jerry_value_t function_name_value = jerry_create_string ((const jerry_char_t *) "native");
        -:  190:
    #####:  191:  jerry_release_value (jerry_set_property (global_object_value, function_name_value, function_value));
    #####:  192:  jerry_release_value (function_name_value);
    #####:  193:  jerry_release_value (function_value);
    #####:  194:  jerry_release_value (global_object_value);
        -:  195:
    #####:  196:  mode = 5;
    #####:  197:  counter = 0;
    #####:  198:  do_eval (TEST_STRING_LITERAL ("native()\n"),
        -:  199:           true);
    #####:  200:  TEST_ASSERT (counter == 1);
        -:  201:
    #####:  202:  mode = 6;
    #####:  203:  counter = 0;
    #####:  204:  do_eval (TEST_STRING_LITERAL ("native()\n"),
        -:  205:           true);
    #####:  206:  TEST_ASSERT (counter == 2);
        -:  207:
    #####:  208:  mode = 7;
    #####:  209:  counter = 0;
    #####:  210:  do_eval (TEST_STRING_LITERAL ("native()\n"),
        -:  211:           true);
    #####:  212:  TEST_ASSERT (counter == 0);
        -:  213:
        -:  214:  /* Built-in functions should not trigger the call twice: */
    #####:  215:  mode = 8;
    #####:  216:  counter = 0;
    #####:  217:  do_eval (TEST_STRING_LITERAL ("function f() { eval('eval(\\'throw true\\')') }\n"
        -:  218:                                "f()\n"),
        -:  219:           true);
    #####:  220:  TEST_ASSERT (counter == 1);
        -:  221:
    #####:  222:  mode = 9;
    #####:  223:  counter = 0;
    #####:  224:  do_eval (TEST_STRING_LITERAL ("function f() { [1].map(function() { throw true }) }\n"
        -:  225:                                "f()\n"),
        -:  226:           true);
    #####:  227:  TEST_ASSERT (counter == 1);
        -:  228:
    #####:  229:  jerry_value_t value = jerry_create_object ();
    #####:  230:  TEST_ASSERT (!jerry_error_is_throw_captured (value));
    #####:  231:  jerry_error_set_throw_capture (value, false);
    #####:  232:  TEST_ASSERT (!jerry_error_is_throw_captured (value));
    #####:  233:  jerry_release_value (value);
        -:  234:
    #####:  235:  jerry_cleanup ();
    #####:  236:  return 0;
        -:  237:} /* main */
