        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-arraybuffer-object.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-arraybuffer-object.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-builtin-helpers.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-function-object.h"
        -:   21:#include "ecma-gc.h"
        -:   22:#include "ecma-globals.h"
        -:   23:#include "ecma-helpers.h"
        -:   24:#include "ecma-objects.h"
        -:   25:#include "ecma-shared-arraybuffer-object.h"
        -:   26:#include "ecma-typedarray-object.h"
        -:   27:#include "jcontext.h"
        -:   28:
        -:   29:#if JERRY_BUILTIN_TYPEDARRAY
        -:   30:
        -:   31:/** \addtogroup ecma ECMA
        -:   32: * @{
        -:   33: *
        -:   34: * \addtogroup ecmaarraybufferobject ECMA ArrayBuffer object related routines
        -:   35: * @{
        -:   36: */
        -:   37:
        -:   38:/**
        -:   39: * Creating ArrayBuffer objects with a buffer after the arraybuffer header
        -:   40: *
        -:   41: * @return new ArrayBuffer object
        -:   42: */
        -:   43:ecma_object_t *
    #####:   44:ecma_arraybuffer_create_object (uint8_t type, /**< type of the arraybuffer */
        -:   45:                                uint32_t length) /**< length of the arraybuffer */
        -:   46:{
        -:   47:  ecma_builtin_id_t prototype_id;
        -:   48:
        -:   49:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
    #####:   50:  JERRY_ASSERT (type == ECMA_OBJECT_CLASS_ARRAY_BUFFER
        -:   51:                || type == ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER);
        -:   52:
    #####:   53:  prototype_id = (type == ECMA_OBJECT_CLASS_ARRAY_BUFFER ? ECMA_BUILTIN_ID_ARRAYBUFFER_PROTOTYPE
    #####:   54:                                                         : ECMA_BUILTIN_ID_SHARED_ARRAYBUFFER_PROTOTYPE);
        -:   55:#else /* !JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:   56:  JERRY_ASSERT (type == ECMA_OBJECT_CLASS_ARRAY_BUFFER);
        -:   57:
        -:   58:  prototype_id = ECMA_BUILTIN_ID_ARRAYBUFFER_PROTOTYPE;
        -:   59:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:   60:
    #####:   61:  ecma_object_t *object_p = ecma_create_object (ecma_builtin_get (prototype_id),
        -:   62:                                                sizeof (ecma_extended_object_t) + length,
        -:   63:                                                ECMA_OBJECT_TYPE_CLASS);
        -:   64:
    #####:   65:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
    #####:   66:  ext_object_p->u.cls.type = type;
    #####:   67:  ext_object_p->u.cls.u1.array_buffer_flags = ECMA_ARRAYBUFFER_ALLOCATED;
    #####:   68:  ext_object_p->u.cls.u3.length = length;
        -:   69:
    #####:   70:  memset ((uint8_t *) (ext_object_p + 1), 0, length);
    #####:   71:  return object_p;
        -:   72:} /* ecma_arraybuffer_create_object */
        -:   73:
        -:   74:/**
        -:   75: * Creating ArrayBuffer objects with a pointer to its buffer
        -:   76: *
        -:   77: * @return new ArrayBuffer object
        -:   78: */
        -:   79:ecma_object_t *
        1:   80:ecma_arraybuffer_create_object_with_buffer (uint8_t type, /**< type of the arraybuffer */
        -:   81:                                            uint32_t length)
        -:   82:{
        -:   83:  ecma_builtin_id_t prototype_id;
        -:   84:
        -:   85:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
        1:   86:  JERRY_ASSERT (type == ECMA_OBJECT_CLASS_ARRAY_BUFFER
        -:   87:                || type == ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER);
        -:   88:
        1:   89:  prototype_id = (type == ECMA_OBJECT_CLASS_ARRAY_BUFFER ? ECMA_BUILTIN_ID_ARRAYBUFFER_PROTOTYPE
        1:   90:                                                         : ECMA_BUILTIN_ID_SHARED_ARRAYBUFFER_PROTOTYPE);
        -:   91:#else /* !JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:   92:  JERRY_ASSERT (type == ECMA_OBJECT_CLASS_ARRAY_BUFFER);
        -:   93:
        -:   94:  prototype_id = ECMA_BUILTIN_ID_ARRAYBUFFER_PROTOTYPE;
        -:   95:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:   96:
        1:   97:  ecma_object_t *object_p = ecma_create_object (ecma_builtin_get (prototype_id),
        -:   98:                                                sizeof (ecma_arraybuffer_pointer_t),
        -:   99:                                                ECMA_OBJECT_TYPE_CLASS);
        -:  100:
        1:  101:  ecma_arraybuffer_pointer_t *arraybuffer_pointer_p = (ecma_arraybuffer_pointer_t *) object_p;
        1:  102:  arraybuffer_pointer_p->extended_object.u.cls.type = type;
        1:  103:  arraybuffer_pointer_p->extended_object.u.cls.u1.array_buffer_flags = ECMA_ARRAYBUFFER_HAS_POINTER;
        1:  104:  arraybuffer_pointer_p->extended_object.u.cls.u3.length = length;
        -:  105:
        1:  106:  arraybuffer_pointer_p->buffer_p = NULL;
        1:  107:  arraybuffer_pointer_p->arraybuffer_user_p = NULL;
        -:  108:
        1:  109:  return object_p;
        -:  110:} /* ecma_arraybuffer_create_object_with_buffer */
        -:  111:
        -:  112:/**
        -:  113: * Creating ArrayBuffer objects based on the array length
        -:  114: *
        -:  115: * @return new ArrayBuffer object
        -:  116: */
        -:  117:ecma_object_t *
        1:  118:ecma_arraybuffer_new_object (uint32_t length) /**< length of the arraybuffer */
        -:  119:{
        1:  120:  if (length > JERRY_CONTEXT (arraybuffer_compact_allocation_limit))
        -:  121:  {
        1:  122:    return ecma_arraybuffer_create_object_with_buffer (ECMA_OBJECT_CLASS_ARRAY_BUFFER, length);
        -:  123:  }
        -:  124:
    #####:  125:  return ecma_arraybuffer_create_object (ECMA_OBJECT_CLASS_ARRAY_BUFFER, length);
        -:  126:} /* ecma_arraybuffer_new_object */
        -:  127:
        -:  128:/**
        -:  129: * Allocate a backing store for an array buffer.
        -:  130: *
        -:  131: * @return ECMA_VALUE_UNDEFINED on success,
        -:  132: *         ECMA_VALUE_ERROR otherwise
        -:  133: */
        -:  134:ecma_value_t
        1:  135:ecma_arraybuffer_allocate_buffer (ecma_object_t *object_p) /**< ArrayBuffer object */
        -:  136:{
        1:  137:  JERRY_ASSERT (!(ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_ALLOCATED));
        -:  138:
        1:  139:  if (ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_DETACHED)
        -:  140:  {
    #####:  141:    return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_arraybuffer_is_detached));
        -:  142:  }
        -:  143:
        1:  144:  JERRY_ASSERT (ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_HAS_POINTER);
        -:  145:
        1:  146:  ecma_extended_object_t *extended_object_p = (ecma_extended_object_t *) object_p;
        1:  147:  uint32_t arraybuffer_length = extended_object_p->u.cls.u3.length;
        1:  148:  ecma_arraybuffer_pointer_t *arraybuffer_pointer_p = (ecma_arraybuffer_pointer_t *) object_p;
        1:  149:  jerry_arraybuffer_allocate_t arraybuffer_allocate_callback = JERRY_CONTEXT (arraybuffer_allocate_callback);
        -:  150:  void *buffer_p;
        -:  151:
        1:  152:  if (arraybuffer_allocate_callback != NULL)
        -:  153:  {
    #####:  154:    jerry_arraybuffer_type_t type = JERRY_ARRAYBUFFER_TYPE_ARRAYBUFFER;
        -:  155:
        -:  156:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
    #####:  157:    if (extended_object_p->u.cls.type == ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER)
        -:  158:    {
    #####:  159:      type = JERRY_ARRAYBUFFER_TYPE_SHARED_ARRAYBUFFER;
        -:  160:    }
        -:  161:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  162:
    #####:  163:    buffer_p = arraybuffer_allocate_callback (type,
        -:  164:                                              arraybuffer_length,
        -:  165:                                              &arraybuffer_pointer_p->arraybuffer_user_p,
        -:  166:                                              JERRY_CONTEXT (arraybuffer_allocate_callback_user_p));
        -:  167:  }
        -:  168:  else
        -:  169:  {
        1:  170:    buffer_p = jmem_heap_alloc_block_null_on_error (arraybuffer_length);
        -:  171:  }
        -:  172:
        1:  173:  if (buffer_p == NULL)
        -:  174:  {
    #####:  175:    extended_object_p->u.cls.u1.array_buffer_flags |= ECMA_ARRAYBUFFER_DETACHED;
    #####:  176:    return ecma_raise_range_error (ECMA_ERR_MSG ("Cannot allocate memory for ArrayBuffer"));
        -:  177:  }
        -:  178:
        1:  179:  arraybuffer_pointer_p->buffer_p = buffer_p;
        1:  180:  extended_object_p->u.cls.u1.array_buffer_flags |= ECMA_ARRAYBUFFER_ALLOCATED;
        -:  181:
        1:  182:  memset (buffer_p, 0, arraybuffer_length);
        1:  183:  return ECMA_VALUE_UNDEFINED;
        -:  184:} /* ecma_arraybuffer_allocate_buffer */
        -:  185:
        -:  186:/**
        -:  187: * Release the backing store allocated by an array buffer.
        -:  188: */
        -:  189:void
    #####:  190:ecma_arraybuffer_release_buffer (ecma_object_t *object_p) /**< ArrayBuffer object */
        -:  191:{
    #####:  192:  JERRY_ASSERT (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_ARRAY_BUFFER)
        -:  193:                || ecma_object_is_shared_arraybuffer (object_p));
        -:  194:
    #####:  195:  jerry_arraybuffer_free_t free_callback = JERRY_CONTEXT (arraybuffer_free_callback);
    #####:  196:  ecma_arraybuffer_pointer_t *arraybuffer_pointer_p = (ecma_arraybuffer_pointer_t *) object_p;
    #####:  197:  uint32_t arraybuffer_length = arraybuffer_pointer_p->extended_object.u.cls.u3.length;
        -:  198:
    #####:  199:  if (free_callback == NULL)
        -:  200:  {
    #####:  201:    jmem_heap_free_block (arraybuffer_pointer_p->buffer_p, arraybuffer_length);
    #####:  202:    return;
        -:  203:  }
        -:  204:
    #####:  205:  jerry_arraybuffer_type_t type = JERRY_ARRAYBUFFER_TYPE_ARRAYBUFFER;
        -:  206:
        -:  207:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
    #####:  208:  if (arraybuffer_pointer_p->extended_object.u.cls.type == ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER)
        -:  209:  {
    #####:  210:    type = JERRY_ARRAYBUFFER_TYPE_SHARED_ARRAYBUFFER;
        -:  211:  }
        -:  212:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  213:
    #####:  214:  free_callback (type,
    #####:  215:                 arraybuffer_pointer_p->buffer_p,
        -:  216:                 arraybuffer_length,
        -:  217:                 arraybuffer_pointer_p->arraybuffer_user_p,
        -:  218:                 JERRY_CONTEXT (arraybuffer_allocate_callback_user_p));
        -:  219:} /* ecma_arraybuffer_release_buffer */
        -:  220:
        -:  221:/**
        -:  222: * ArrayBuffer object creation operation.
        -:  223: *
        -:  224: * See also: ES2015 24.1.1.1
        -:  225: *
        -:  226: * @return ecma value
        -:  227: *         Returned value must be freed with ecma_free_value
        -:  228: */
        -:  229:ecma_value_t
    #####:  230:ecma_op_create_arraybuffer_object (const ecma_value_t *arguments_list_p, /**< list of arguments that
        -:  231:                                                                          *   are passed to String constructor */
        -:  232:                                   uint32_t arguments_list_len) /**< length of the arguments' list */
        -:  233:{
    #####:  234:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  235:
    #####:  236:  ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (JERRY_CONTEXT (current_new_target_p),
        -:  237:                                                                   ECMA_BUILTIN_ID_ARRAYBUFFER_PROTOTYPE);
        -:  238:
    #####:  239:  if (proto_p == NULL)
        -:  240:  {
    #####:  241:    return ECMA_VALUE_ERROR;
        -:  242:  }
        -:  243:
    #####:  244:  ecma_number_t length_num = 0;
        -:  245:
    #####:  246:  if (arguments_list_len > 0)
        -:  247:  {
        -:  248:
    #####:  249:    if (ecma_is_value_number (arguments_list_p[0]))
        -:  250:    {
    #####:  251:      length_num = ecma_get_number_from_value (arguments_list_p[0]);
        -:  252:    }
        -:  253:    else
        -:  254:    {
    #####:  255:      ecma_value_t to_number_value = ecma_op_to_number (arguments_list_p[0], &length_num);
        -:  256:
    #####:  257:      if (ECMA_IS_VALUE_ERROR (to_number_value))
        -:  258:      {
    #####:  259:        ecma_deref_object (proto_p);
    #####:  260:        return to_number_value;
        -:  261:      }
        -:  262:    }
        -:  263:
    #####:  264:    if (ecma_number_is_nan (length_num))
        -:  265:    {
    #####:  266:      length_num = 0;
        -:  267:    }
        -:  268:
    #####:  269:    const uint32_t maximum_size_in_byte = UINT32_MAX - sizeof (ecma_extended_object_t) - JMEM_ALIGNMENT + 1;
        -:  270:
    #####:  271:    if (length_num <= -1.0 || length_num > (ecma_number_t) maximum_size_in_byte + 0.5)
        -:  272:    {
    #####:  273:      ecma_deref_object (proto_p);
    #####:  274:      return ecma_raise_range_error (ECMA_ERR_MSG ("Invalid ArrayBuffer length"));
        -:  275:    }
        -:  276:  }
        -:  277:
    #####:  278:  uint32_t length_uint32 = ecma_number_to_uint32 (length_num);
        -:  279:
    #####:  280:  ecma_object_t *array_buffer = ecma_arraybuffer_new_object (length_uint32);
    #####:  281:  ECMA_SET_NON_NULL_POINTER (array_buffer->u2.prototype_cp, proto_p);
    #####:  282:  ecma_deref_object (proto_p);
        -:  283:
    #####:  284:  return ecma_make_object_value (array_buffer);
        -:  285:} /* ecma_op_create_arraybuffer_object */
        -:  286:
        -:  287:/**
        -:  288: * Helper function: check if the target is ArrayBuffer
        -:  289: *
        -:  290: *
        -:  291: * See also: ES2015 24.1.1.4
        -:  292: *
        -:  293: * @return true - if value is an ArrayBuffer object
        -:  294: *         false - otherwise
        -:  295: */
        -:  296:bool
    #####:  297:ecma_is_arraybuffer (ecma_value_t target) /**< the target value */
        -:  298:{
    #####:  299:  return (ecma_is_value_object (target)
    #####:  300:          && ecma_object_class_is (ecma_get_object_from_value (target), ECMA_OBJECT_CLASS_ARRAY_BUFFER));
        -:  301:} /* ecma_is_arraybuffer */
        -:  302:
        -:  303:/**
        -:  304: * Helper function: return the length of the buffer inside the arraybuffer object
        -:  305: *
        -:  306: * @return uint32_t, the length of the arraybuffer
        -:  307: */
        -:  308:uint32_t JERRY_ATTR_PURE
    #####:  309:ecma_arraybuffer_get_length (ecma_object_t *object_p) /**< pointer to the ArrayBuffer object */
        -:  310:{
    #####:  311:  JERRY_ASSERT (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_ARRAY_BUFFER)
        -:  312:                || ecma_object_is_shared_arraybuffer (object_p));
        -:  313:
    #####:  314:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
    #####:  315:  return ecma_arraybuffer_is_detached (object_p) ? 0 : ext_object_p->u.cls.u3.length;
        -:  316:} /* ecma_arraybuffer_get_length */
        -:  317:
        -:  318:/**
        -:  319: * Helper function: return the pointer to the data buffer inside the arraybuffer object
        -:  320: *
        -:  321: * @return pointer to the data buffer
        -:  322: */
        -:  323:extern inline uint8_t * JERRY_ATTR_PURE JERRY_ATTR_ALWAYS_INLINE
        1:  324:ecma_arraybuffer_get_buffer (ecma_object_t *object_p) /**< pointer to the ArrayBuffer object */
        -:  325:{
        1:  326:  JERRY_ASSERT (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_ARRAY_BUFFER)
        -:  327:                || ecma_object_is_shared_arraybuffer (object_p));
        -:  328:
        1:  329:  JERRY_ASSERT (ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_ALLOCATED);
        -:  330:
        1:  331:  if (!(ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_HAS_POINTER))
        -:  332:  {
    #####:  333:    return (uint8_t *) object_p + sizeof (ecma_extended_object_t);
        -:  334:  }
        -:  335:
        1:  336:  ecma_arraybuffer_pointer_t *arraybuffer_pointer_p = (ecma_arraybuffer_pointer_t *) object_p;
        1:  337:  return (uint8_t *) arraybuffer_pointer_p->buffer_p;
        -:  338:} /* ecma_arraybuffer_get_buffer */
        -:  339:
        -:  340:/**
        -:  341: * Helper function: check if the target ArrayBuffer is detached
        -:  342: *
        -:  343: * @return true - if value is an detached ArrayBuffer object
        -:  344: *         false - otherwise
        -:  345: */
        -:  346:extern inline bool JERRY_ATTR_PURE JERRY_ATTR_ALWAYS_INLINE
    #####:  347:ecma_arraybuffer_is_detached (ecma_object_t *object_p) /**< pointer to the ArrayBuffer object */
        -:  348:{
    #####:  349:  JERRY_ASSERT (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_ARRAY_BUFFER)
        -:  350:                || ecma_object_is_shared_arraybuffer (object_p));
        -:  351:
    #####:  352:  return (ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_DETACHED) != 0;
        -:  353:} /* ecma_arraybuffer_is_detached */
        -:  354:
        -:  355:/**
        -:  356: * ArrayBuffer object detaching operation
        -:  357: *
        -:  358: * See also: ES2015 24.1.1.3
        -:  359: *
        -:  360: * @return true - if detach operation is succeeded
        -:  361: *         false - otherwise
        -:  362: */
        -:  363:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:  364:ecma_arraybuffer_detach (ecma_object_t *object_p) /**< pointer to the ArrayBuffer object */
        -:  365:{
    #####:  366:  JERRY_ASSERT (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_ARRAY_BUFFER));
        -:  367:
    #####:  368:  if (ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_DETACHED)
        -:  369:  {
    #####:  370:    return false;
        -:  371:  }
        -:  372:
    #####:  373:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
    #####:  374:  ext_object_p->u.cls.u1.array_buffer_flags |= ECMA_ARRAYBUFFER_DETACHED;
        -:  375:
    #####:  376:  if (!(ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_ALLOCATED))
        -:  377:  {
    #####:  378:    return true;
        -:  379:  }
        -:  380:
    #####:  381:  ext_object_p->u.cls.u1.array_buffer_flags &= (uint8_t) ~ECMA_ARRAYBUFFER_ALLOCATED;
        -:  382:
    #####:  383:  if (!(ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_HAS_POINTER))
        -:  384:  {
    #####:  385:    return true;
        -:  386:  }
        -:  387:
    #####:  388:  ecma_arraybuffer_release_buffer (object_p);
    #####:  389:  return true;
        -:  390:} /* ecma_arraybuffer_detach */
        -:  391:
        -:  392:/**
        -:  393: * ArrayBuffer slice operation
        -:  394: *
        -:  395: * See also:
        -:  396: *          ECMA-262 v11, 24.1.4.3
        -:  397: *
        -:  398: * @return ecma value
        -:  399: *         Returned value must be freed with ecma_free_value.
        -:  400: */
        -:  401:ecma_value_t
    #####:  402:ecma_builtin_arraybuffer_slice (ecma_value_t this_arg,
        -:  403:                                const ecma_value_t *argument_list_p,
        -:  404:                                uint32_t arguments_number)
        -:  405:{
    #####:  406:  ecma_object_t *object_p = ecma_get_object_from_value (this_arg);
        -:  407:
        -:  408:  /* 3-4. */
    #####:  409:  if (ECMA_ARRAYBUFFER_CHECK_BUFFER_ERROR (object_p))
        -:  410:  {
    #####:  411:    return ECMA_VALUE_ERROR;
        -:  412:  }
        -:  413:
        -:  414:  /* 5. */
    #####:  415:  uint32_t len = ecma_arraybuffer_get_length (object_p);
        -:  416:
    #####:  417:  uint32_t start = 0;
    #####:  418:  uint32_t end = len;
        -:  419:
    #####:  420:  if (arguments_number > 0)
        -:  421:  {
        -:  422:    /* 6-7. */
    #####:  423:    if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_uint32_index_normalize (argument_list_p[0],
        -:  424:                                                                         len,
        -:  425:                                                                         &start)))
        -:  426:    {
    #####:  427:      return ECMA_VALUE_ERROR;
        -:  428:    }
        -:  429:
    #####:  430:    if (arguments_number > 1 && !ecma_is_value_undefined (argument_list_p[1]))
        -:  431:    {
        -:  432:      /* 8-9. */
    #####:  433:      if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_uint32_index_normalize (argument_list_p[1],
        -:  434:                                                                           len,
        -:  435:                                                                           &end)))
        -:  436:      {
    #####:  437:        return ECMA_VALUE_ERROR;
        -:  438:      }
        -:  439:    }
        -:  440:  }
        -:  441:
        -:  442:  /* 10. */
    #####:  443:  uint32_t new_len = (end >= start) ? (end - start) : 0;
        -:  444:
        -:  445:  /* 11. */
    #####:  446:  ecma_builtin_id_t buffer_builtin_id = ECMA_BUILTIN_ID_ARRAYBUFFER;
        -:  447:
    #####:  448:  if (ecma_is_shared_arraybuffer (this_arg))
        -:  449:  {
    #####:  450:    buffer_builtin_id = ECMA_BUILTIN_ID_SHARED_ARRAYBUFFER;
        -:  451:  }
        -:  452:
    #####:  453:  ecma_value_t ctor = ecma_op_species_constructor (object_p, buffer_builtin_id);
        -:  454:
    #####:  455:  if (ECMA_IS_VALUE_ERROR (ctor))
        -:  456:  {
    #####:  457:    return ctor;
        -:  458:  }
        -:  459:
        -:  460:  /* 12. */
    #####:  461:  ecma_object_t *ctor_obj_p = ecma_get_object_from_value (ctor);
    #####:  462:  ecma_value_t new_len_value = ecma_make_uint32_value (new_len);
        -:  463:
    #####:  464:  ecma_value_t new_arraybuffer = ecma_op_function_construct (ctor_obj_p, ctor_obj_p, &new_len_value, 1);
        -:  465:
    #####:  466:  ecma_deref_object (ctor_obj_p);
    #####:  467:  ecma_free_value (new_len_value);
        -:  468:
    #####:  469:  if (ECMA_IS_VALUE_ERROR (new_arraybuffer))
        -:  470:  {
    #####:  471:    return new_arraybuffer;
        -:  472:  }
        -:  473:
    #####:  474:  ecma_object_t *new_arraybuffer_p = ecma_get_object_from_value (new_arraybuffer);
    #####:  475:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -:  476:
        -:  477:  /* 13. */
    #####:  478:  if (!(ecma_object_class_is (new_arraybuffer_p, ECMA_OBJECT_CLASS_ARRAY_BUFFER)
    #####:  479:        || ecma_object_is_shared_arraybuffer (new_arraybuffer_p)))
        -:  480:  {
    #####:  481:    ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Return value is not an ArrayBuffer object"));
    #####:  482:    goto free_new_arraybuffer;
        -:  483:  }
        -:  484:
        -:  485:  /* 14-15. */
    #####:  486:  if (ECMA_ARRAYBUFFER_CHECK_BUFFER_ERROR (new_arraybuffer_p))
        -:  487:  {
    #####:  488:    ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Returned ArrayBuffer has been detached"));
    #####:  489:    goto free_new_arraybuffer;
        -:  490:  }
        -:  491:
        -:  492:  /* 16. */
    #####:  493:  if (new_arraybuffer == this_arg)
        -:  494:  {
    #####:  495:    ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("ArrayBuffer subclass returned this from species constructor"));
    #####:  496:    goto free_new_arraybuffer;
        -:  497:  }
        -:  498:
        -:  499:  /* 17. */
    #####:  500:  if (ecma_arraybuffer_get_length (new_arraybuffer_p) < new_len)
        -:  501:  {
    #####:  502:    ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Derived ArrayBuffer constructor created a too small buffer"));
    #####:  503:    goto free_new_arraybuffer;
        -:  504:  }
        -:  505:
        -:  506:  /* 19. */
    #####:  507:  if (ecma_arraybuffer_is_detached (object_p))
        -:  508:  {
    #####:  509:    ret_value = ECMA_VALUE_ERROR;
    #####:  510:    goto free_new_arraybuffer;
        -:  511:  }
        -:  512:
        -:  513:  /* 20. */
    #####:  514:  lit_utf8_byte_t *old_buf = ecma_arraybuffer_get_buffer (object_p);
        -:  515:
        -:  516:  /* 21. */
    #####:  517:  lit_utf8_byte_t *new_buf = ecma_arraybuffer_get_buffer (new_arraybuffer_p);
        -:  518:
        -:  519:  /* 22. */
    #####:  520:  memcpy (new_buf, old_buf + start, new_len);
        -:  521:
    #####:  522:  free_new_arraybuffer:
    #####:  523:  if (ret_value != ECMA_VALUE_EMPTY)
        -:  524:  {
    #####:  525:    ecma_deref_object (new_arraybuffer_p);
        -:  526:  }
        -:  527:  else
        -:  528:  {
        -:  529:    /* 23. */
    #####:  530:    ret_value = ecma_make_object_value (new_arraybuffer_p);
        -:  531:  }
        -:  532:
    #####:  533:  return ret_value;
        -:  534:} /* ecma_builtin_arraybuffer_slice */
        -:  535:
        -:  536:/**
        -:  537: * @}
        -:  538: * @}
        -:  539: */
        -:  540:#endif /* JERRY_BUILTIN_TYPEDARRAY */
