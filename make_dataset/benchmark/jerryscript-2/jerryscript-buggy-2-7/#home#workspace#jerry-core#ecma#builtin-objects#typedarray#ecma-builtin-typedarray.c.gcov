        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/typedarray/ecma-builtin-typedarray.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-typedarray-object.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-gc.h"
        -:   20:#include "ecma-globals.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:#include "ecma-typedarray-object.h"
        -:   23:#include "ecma-function-object.h"
        -:   24:#include "jrt.h"
        -:   25:
        -:   26:#if JERRY_BUILTIN_TYPEDARRAY
        -:   27:
        -:   28:#define ECMA_BUILTINS_INTERNAL
        -:   29:#include "ecma-builtins-internal.h"
        -:   30:
        -:   31:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-typedarray.inc.h"
        -:   32:#define BUILTIN_UNDERSCORED_ID typedarray
        -:   33:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   34:
        -:   35:#include "ecma-builtin-typedarray-helpers.h"
        -:   36:
        -:   37:/** \addtogroup ecma ECMA
        -:   38: * @{
        -:   39: *
        -:   40: * \addtogroup ecmabuiltins
        -:   41: * @{
        -:   42: *
        -:   43: * \addtogroup typedarray ECMA %TypedArray% object built-in
        -:   44: * @{
        -:   45: */
        -:   46:
        -:   47:/**
        -:   48: * The %TypedArray%.from routine
        -:   49: *
        -:   50: * See also:
        -:   51: *         ES2015 22.2.2.1
        -:   52: *
        -:   53: * @return ecma value
        -:   54: *         Returned value must be freed with ecma_free_value.
        -:   55: */
        -:   56:static ecma_value_t
    #####:   57:ecma_builtin_typedarray_from (ecma_value_t this_arg, /**< 'this' argument */
        -:   58:                              const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   59:                              uint32_t arguments_list_len) /**< number of arguments */
        -:   60:{
    #####:   61:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   62:
    #####:   63:  if (!ecma_is_constructor (this_arg))
        -:   64:  {
    #####:   65:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not a constructor"));
        -:   66:  }
        -:   67:
        -:   68:  ecma_value_t source;
    #####:   69:  ecma_value_t map_fn = ECMA_VALUE_UNDEFINED;
    #####:   70:  ecma_value_t this_in_fn = ECMA_VALUE_UNDEFINED;
        -:   71:
    #####:   72:  if (arguments_list_len == 0)
        -:   73:  {
    #####:   74:    return ecma_raise_type_error (ECMA_ERR_MSG ("No source argument"));
        -:   75:  }
        -:   76:
    #####:   77:  source = arguments_list_p[0];
        -:   78:
    #####:   79:  if (arguments_list_len > 1)
        -:   80:  {
    #####:   81:    map_fn = arguments_list_p[1];
        -:   82:
    #####:   83:    if (!ecma_op_is_callable (map_fn))
        -:   84:    {
    #####:   85:      return ecma_raise_type_error (ECMA_ERR_MSG ("The 'mapfn' argument is not callable"));
        -:   86:    }
        -:   87:
    #####:   88:    if (arguments_list_len > 2)
        -:   89:    {
    #####:   90:      this_in_fn = arguments_list_p[2];
        -:   91:    }
        -:   92:  }
        -:   93:
    #####:   94:  return ecma_op_typedarray_from (this_arg,
        -:   95:                                  source,
        -:   96:                                  map_fn,
        -:   97:                                  this_in_fn);
        -:   98:
        -:   99:} /* ecma_builtin_typedarray_from */
        -:  100:
        -:  101:/**
        -:  102: * The %TypedArray%.of routine
        -:  103: *
        -:  104: * See also:
        -:  105: *         ES2015 22.2.2.2
        -:  106: *
        -:  107: * @return ecma value
        -:  108: *         Returned value must be freed with ecma_free_value.
        -:  109: */
        -:  110:static ecma_value_t
    #####:  111:ecma_builtin_typedarray_of (ecma_value_t this_arg, /**< 'this' argument */
        -:  112:                            const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  113:                            uint32_t arguments_list_len) /**< number of arguments */
        -:  114:{
    #####:  115:  if (!ecma_is_constructor (this_arg))
        -:  116:  {
    #####:  117:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not a constructor"));
        -:  118:  }
        -:  119:
    #####:  120:  ecma_object_t *constructor_obj_p = ecma_get_object_from_value (this_arg);
    #####:  121:  ecma_value_t len_val = ecma_make_uint32_value (arguments_list_len);
    #####:  122:  ecma_value_t ret_val = ecma_typedarray_create (constructor_obj_p, &len_val, 1);
    #####:  123:  ecma_free_value (len_val);
        -:  124:
    #####:  125:  if (ECMA_IS_VALUE_ERROR (ret_val))
        -:  126:  {
    #####:  127:    return ret_val;
        -:  128:  }
        -:  129:
    #####:  130:  uint32_t k = 0;
    #####:  131:  ecma_object_t *ret_obj_p = ecma_get_object_from_value (ret_val);
    #####:  132:  ecma_typedarray_info_t info = ecma_typedarray_get_info (ret_obj_p);
    #####:  133:  ecma_typedarray_setter_fn_t setter_cb = ecma_get_typedarray_setter_fn (info.id);
    #####:  134:  lit_utf8_byte_t *buffer_p = ecma_typedarray_get_buffer (&info);
        -:  135:
    #####:  136:  if (JERRY_UNLIKELY (buffer_p == NULL))
        -:  137:  {
    #####:  138:    ecma_deref_object (ret_obj_p);
    #####:  139:    return ECMA_VALUE_ERROR;
        -:  140:  }
        -:  141:
    #####:  142:  while (k < arguments_list_len)
        -:  143:  {
    #####:  144:    ecma_value_t set_element = setter_cb (buffer_p, arguments_list_p[k]);
        -:  145:
    #####:  146:    if (ECMA_IS_VALUE_ERROR (set_element))
        -:  147:    {
    #####:  148:      ecma_deref_object (ret_obj_p);
    #####:  149:      return set_element;
        -:  150:    }
        -:  151:
    #####:  152:    k++;
    #####:  153:    buffer_p += info.element_size;
        -:  154:  }
        -:  155:
    #####:  156:  return ret_val;
        -:  157:} /* ecma_builtin_typedarray_of */
        -:  158:
        -:  159:/**
        -:  160: * Handle calling [[Call]] of built-in %TypedArray% object
        -:  161: *
        -:  162: * ES2015 22.2.1 If %TypedArray% is directly called or
        -:  163: * called as part of a new expression an exception is thrown
        -:  164: *
        -:  165: * @return ecma value
        -:  166: */
        -:  167:ecma_value_t
    #####:  168:ecma_builtin_typedarray_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  169:                                       uint32_t arguments_list_len) /**< number of arguments */
        -:  170:{
    #####:  171:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  172:
    #####:  173:  return ecma_raise_type_error (ECMA_ERR_MSG ("TypedArray intrinstic cannot be directly called"));
        -:  174:} /* ecma_builtin_typedarray_dispatch_call */
        -:  175:
        -:  176:/**
        -:  177: * Handle calling [[Construct]] of built-in %TypedArray% object
        -:  178: *
        -:  179: * ES2015 22.2.1 If %TypedArray% is directly called or
        -:  180: * called as part of a new expression an exception is thrown
        -:  181: *
        -:  182: * @return ecma value
        -:  183: */
        -:  184:ecma_value_t
    #####:  185:ecma_builtin_typedarray_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  186:                                            uint32_t arguments_list_len) /**< number of arguments */
        -:  187:{
    #####:  188:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  189:
    #####:  190:  return ecma_raise_type_error (ECMA_ERR_MSG ("TypedArray intrinstic cannot be called by a 'new' expression"));
        -:  191:} /* ecma_builtin_typedarray_dispatch_construct */
        -:  192:
        -:  193:/**
        -:  194: * 22.2.2.4 get %TypedArray% [ @@species ] accessor
        -:  195: *
        -:  196: * @return ecma_value
        -:  197: *         returned value must be freed with ecma_free_value
        -:  198: */
        -:  199:ecma_value_t
    #####:  200:ecma_builtin_typedarray_species_get (ecma_value_t this_value) /**< This Value */
        -:  201:{
    #####:  202:  return ecma_copy_value (this_value);
        -:  203:} /* ecma_builtin_typedarray_species_get */
        -:  204:
        -:  205:/**
        -:  206: * @}
        -:  207: * @}
        -:  208: * @}
        -:  209: */
        -:  210:
        -:  211:#endif /* JERRY_BUILTIN_TYPEDARRAY */
