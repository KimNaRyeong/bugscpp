        -:    0:Source:/home/workspace/docs/02.API-REFERENCE.md
        -:    0:Programs:296
        -:    1:# JerryScript types
        -:    2:
        -:    3:## jerry_init_flag_t
        -:    4:
        -:    5:Enum that contains the following elements:
        -:    6:
        -:    7: - JERRY_INIT_EMPTY - empty flag set
        -:    8: - JERRY_INIT_SHOW_OPCODES - dump byte-code to log after parse
        -:    9: - JERRY_INIT_SHOW_REGEXP_OPCODES - dump regexp byte-code to log after compilation
        -:   10: - JERRY_INIT_MEM_STATS - dump memory statistics
        -:   11: - JERRY_INIT_MEM_STATS_SEPARATE - **deprecated**, dump memory statistics and reset peak values after parse
        -:   12: - JERRY_INIT_DEBUGGER - **deprecated**, an unused placeholder now
        -:   13:
        -:   14:*Changed in version 2.0*: `JERRY_INIT_MEM_STATS_SEPARATE` and `JERRY_INIT_DEBUGGER` are now deprecated and not used internally.
        -:   15:
        -:   16:## jerry_type_t
        -:   17:
        -:   18:Enum that contains JerryScript API value types:
        -:   19:
        -:   20: - JERRY_TYPE_NONE - no type information
        -:   21: - JERRY_TYPE_UNDEFINED - undefined type
        -:   22: - JERRY_TYPE_NULL - null type
        -:   23: - JERRY_TYPE_BOOLEAN - boolean type
        -:   24: - JERRY_TYPE_NUMBER - number type
        -:   25: - JERRY_TYPE_STRING - string type
        -:   26: - JERRY_TYPE_OBJECT - object type
        -:   27: - JERRY_TYPE_FUNCTION - function type
        -:   28: - JERRY_TYPE_ERROR - error/abort type
        -:   29: - JERRY_TYPE_SYMBOL - symbol type
        -:   30: - JERRY_TYPE_BIGINT - bigint type
        -:   31:
        -:   32:*New in version 2.0*.
        -:   33:
        -:   34:*Changed in version 2.4*: Added `JERRY_TYPE_BIGINT` value.
        -:   35:
        -:   36:## jerry_object_type_t
        -:   37:
        -:   38:Enum that contains JerryScript **object** value types:
        -:   39:
        -:   40: - JERRY_OBJECT_TYPE_NONE - Non-object type
        -:   41: - JERRY_OBJECT_TYPE_GENERIC - Generic JavaScript object without any internal property
        -:   42: - JERRY_OBJECT_TYPE_MODULE_NAMESPACE - Module namespace object
        -:   43: - JERRY_OBJECT_TYPE_ARRAY - Array object
        -:   44: - JERRY_OBJECT_TYPE_PROXY - Proxy object
        -:   45: - JERRY_OBJECT_TYPE_SCRIPT - Script object (see [jerry_parse](#jerry_parse))
        -:   46: - JERRY_OBJECT_TYPE_MODULE - Module object (see [jerry_parse](#jerry_parse))
        -:   47: - JERRY_OBJECT_TYPE_PROMISE - Promise object
        -:   48: - JERRY_OBJECT_TYPE_DATAVIEW - Dataview object
        -:   49: - JERRY_OBJECT_TYPE_FUNCTION - Function object (see [jerry_function_get_type](#jerry_function_get_type))
        -:   50: - JERRY_OBJECT_TYPE_TYPEDARRAY - %TypedArray% object (see [jerry_get_typedarray_type](#jerry_get_typedarray_type))
        -:   51: - JERRY_OBJECT_TYPE_ITERATOR - Iterator object (see [jerry_iterator_get_type](#jerry_get_typedarray_type))
        -:   52: - JERRY_OBJECT_TYPE_CONTAINER - Container object (see [jerry_get_container_type](#jerry_get_container_type))
        -:   53: - JERRY_OBJECT_TYPE_ERROR - Error object
        -:   54: - JERRY_OBJECT_TYPE_ARRAYBUFFER - Array buffer object
        -:   55: - JERRY_OBJECT_TYPE_SHARED_ARRAYBUFFER - Shared Array buffer object
        -:   56:
        -:   57: - JERRY_OBJECT_TYPE_ARGUMENTS - Arguments object
        -:   58: - JERRY_OBJECT_TYPE_BOOLEAN - Boolean object
        -:   59: - JERRY_OBJECT_TYPE_DATE - Date object
        -:   60: - JERRY_OBJECT_TYPE_NUMBER - Number object
        -:   61: - JERRY_OBJECT_TYPE_REGEXP - RegExp object
        -:   62: - JERRY_OBJECT_TYPE_STRING - String object
        -:   63: - JERRY_OBJECT_TYPE_SYMBOL - Symbol object
        -:   64: - JERRY_OBJECT_TYPE_GENERATOR - Generator object
        -:   65: - JERRY_OBJECT_TYPE_BIGINT - BigInt object
        -:   66: - JERRY_OBJECT_TYPE_WEAKREF - WeakRef object
        -:   67:
        -:   68:*New in version 2.4*.
        -:   69:
        -:   70:*Changed in version [[NEXT_RELEASE]]*: Added `JERRY_OBJECT_TYPE_MODULE_NAMESPACE`, `JERRY_OBJECT_TYPE_PROMISE`, `JERRY_OBJECT_TYPE_DATAVIEW`,
        -:   71:                                       `JERRY_OBJECT_TYPE_ERROR`, `JERRY_OBJECT_TYPE_SHARED_ARRAYBUFFER`, `JERRY_OBJECT_TYPE_WEAKREF`,
        -:   72:                                       `JERRY_OBJECT_TYPE_SCRIPT`, and `JERRY_OBJECT_TYPE_MODULE` values.
        -:   73:
        -:   74:## jerry_function_type_t
        -:   75:
        -:   76:Enum that contains JerryScript **function** value types:
        -:   77:
        -:   78: - JERRY_FUNCTION_TYPE_NONE - Non-function type
        -:   79: - JERRY_FUNCTION_TYPE_GENERIC - Generic JavaScript function
        -:   80: - JERRY_FUNCTION_TYPE_ACCESSOR - Accessor function
        -:   81: - JERRY_FUNCTION_TYPE_BOUND - Bound function
        -:   82: - JERRY_FUNCTION_TYPE_ARROW - Arrow fuction
        -:   83: - JERRY_FUNCTION_TYPE_GENERATOR - Generator function object
        -:   84:
        -:   85:*New in version 2.4*.
        -:   86:
        -:   87:## jerry_iterator_type_t
        -:   88:
        -:   89:Enum that contains JerryScript **iterator** value types:
        -:   90:
        -:   91: - JERRY_ITERATOR_TYPE_NONE - Non-iterator type
        -:   92: - JERRY_ITERATOR_TYPE_ARRAY - Array iterator
        -:   93: - JERRY_ITERATOR_TYPE_STRING - String iterator
        -:   94: - JERRY_ITERATOR_TYPE_MAP - Map iterator
        -:   95: - JERRY_ITERATOR_TYPE_SET - Set iterator
        -:   96:
        -:   97:*New in version 2.4*.
        -:   98:
        -:   99:## jerry_proxy_object_options_t
        -:  100:
        -:  101:These option bits allow specializing Proxies with non-standard behaviour.
        -:  102:These flags are recommended only for those trusted Proxies, whose handlers
        -:  103:produce correct results.
        -:  104:
        -:  105:- JERRY_PROXY_SKIP_RESULT_VALIDATION - skip result validation for [[GetPrototypeOf]], [[SetPrototypeOf]], [[IsExtensible]],
        -:  106:                                       [[PreventExtensions]], [[GetOwnProperty]], [[DefineOwnProperty]], [[HasProperty]],
        -:  107:                                       [[Get]], [[Set]], [[Delete]] and [[OwnPropertyKeys]]
        -:  108:
        -:  109:*New in version [[NEXT_RELEASE]]*.
        -:  110:
        -:  111:## jerry_property_filter_t
        -:  112:
        -:  113:Enum that contains JerryScript **property filter** options bits:
        -:  114:
        -:  115: - JERRY_PROPERTY_FILTER_ALL -  List all property keys independently from key type or property value attributes (equivalent to Reflect.ownKeys call)
        -:  116: - JERRY_PROPERTY_FILTER_TRAVERSE_PROTOTYPE_CHAIN - Include keys from the objects's  prototype chain as well
        -:  117: - JERRY_PROPERTY_FILTER_EXLCUDE_NON_CONFIGURABLE - Exclude property key if the property is non-configurable
        -:  118: - JERRY_PROPERTY_FILTER_EXLCUDE_NON_ENUMERABLE - Exclude property key if the property is non-enumerable
        -:  119: - JERRY_PROPERTY_FILTER_EXLCUDE_NON_WRITABLE - Exclude property key if the property is non-writable
        -:  120: - JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS - Exclude property key if it is a string
        -:  121: - JERRY_PROPERTY_FILTER_EXLCUDE_SYMBOLS - Exclude property key if it is a symbol
        -:  122: - JERRY_PROPERTY_FILTER_EXLCUDE_INTEGER_INDICES - Exclude property key if it is an integer index
        -:  123: - JERRY_PROPERTY_FILTER_INTEGER_INDICES_AS_NUMBER - By default integer index property keys are converted to string. Enabling this flags keeps integer index property keys as numbers
        -:  124:
        -:  125:*New in version 2.4*.
        -:  126:
        -:  127:## jerry_error_t
        -:  128:
        -:  129:Possible types of an error:
        -:  130:
        -:  131: - JERRY_ERROR_COMMON - common error
        -:  132: - JERRY_ERROR_EVAL - eval error
        -:  133: - JERRY_ERROR_RANGE - range error
        -:  134: - JERRY_ERROR_REFERENCE - reference error
        -:  135: - JERRY_ERROR_SYNTAX - syntax error
        -:  136: - JERRY_ERROR_TYPE - type error
        -:  137: - JERRY_ERROR_URI - URI error
        -:  138:
        -:  139:There is also a special value `JERRY_ERROR_NONE` which is not an error type
        -:  140:this value can only be returned by the [jerry_get_error_type](#jerry_get_error_type).
        -:  141:
        -:  142:*Changed in version 2.0*: The `JERRY_ERROR_NONE` was added to be used by the [jerry_get_error_type](#jerry_get_error_type) method.
        -:  143:
        -:  144:## jerry_feature_t
        -:  145:
        -:  146:Possible compile time enabled feature types:
        -:  147:
        -:  148: - JERRY_FEATURE_CPOINTER_32_BIT - 32 bit compressed pointers
        -:  149: - JERRY_FEATURE_ERROR_MESSAGES - error messages
        -:  150: - JERRY_FEATURE_JS_PARSER - js-parser
        -:  151: - JERRY_FEATURE_MEM_STATS - memory statistics
        -:  152: - JERRY_FEATURE_PARSER_DUMP - parser byte-code dumps
        -:  153: - JERRY_FEATURE_REGEXP_DUMP - regexp byte-code dumps
        -:  154: - JERRY_FEATURE_SNAPSHOT_SAVE - saving snapshot files
        -:  155: - JERRY_FEATURE_SNAPSHOT_EXEC - executing snapshot files
        -:  156: - JERRY_FEATURE_DEBUGGER - debugging
        -:  157: - JERRY_FEATURE_VM_EXEC_STOP - stopping ECMAScript execution
        -:  158: - JERRY_FEATURE_VM_THROW - capturing ECMAScript throws
        -:  159: - JERRY_FEATURE_JSON - JSON support
        -:  160: - JERRY_FEATURE_PROMISE - promise support
        -:  161: - JERRY_FEATURE_TYPEDARRAY - Typedarray support
        -:  162: - JERRY_FEATURE_DATE - Date support
        -:  163: - JERRY_FEATURE_REGEXP - RegExp support
        -:  164: - JERRY_FEATURE_LINE_INFO - line info available
        -:  165: - JERRY_FEATURE_LOGGING - logging
        -:  166: - JERRY_FEATURE_SYMBOL - symbol support
        -:  167: - JERRY_FEATURE_DATAVIEW - DataView support
        -:  168: - JERRY_FEATURE_PROXY - Proxy support
        -:  169: - JERRY_FEATURE_MAP - Map support
        -:  170: - JERRY_FEATURE_SET - Set support
        -:  171: - JERRY_FEATURE_WEAKMAP - WeakMap support
        -:  172: - JERRY_FEATURE_WEAKSET - WeakSet support
        -:  173: - JERRY_FEATURE_BIGINT - BigInt support
        -:  174: - JERRY_FEATURE_REALM - realm support
        -:  175: - JERRY_FEATURE_GLOBAL_THIS - GlobalThisValue support
        -:  176: - JERRY_FEATURE_PROMISE_CALLBACK - Promise callback support
        -:  177: - JERRY_FEATURE_MODULE - Module support
        -:  178: - JERRY_FEATURE_WEAKREF - WeakRef support
        -:  179: - JERRY_FEATURE_FUNCTION_TO_STRING - function toString support
        -:  180:
        -:  181:*New in version 2.0*.
        -:  182:
        -:  183:*Changed in version 2.3*: Added `JERRY_FEATURE_WEAKMAP`, `JERRY_FEATURE_WEAKSET` values.
        -:  184:
        -:  185:*Changed in version 2.4*: Added `JERRY_FEATURE_BIGINT`, `JERRY_FEATURE_REALM` values.
        -:  186:
        -:  187:*Changed in version [[NEXT_RELEASE]]*: Added `JERRY_FEATURE_VM_THROW`, `JERRY_FEATURE_GLOBAL_THIS`,
        -:  188:                                       `JERRY_FEATURE_PROMISE_CALLBACK`, and `JERRY_FEATURE_MODULE`,
        -:  189:                                       `JERRY_FEATURE_WEAKREF`, and `JERRY_FEATURE_FUNCTION_TO_STRING` values.
        -:  190:
        -:  191:## jerry_container_type_t
        -:  192:
        -:  193:Container object types:
        -:  194:
        -:  195: - JERRY_CONTAINER_TYPE_INVALID - Invalid container
        -:  196: - JERRY_CONTAINER_TYPE_MAP - Map type
        -:  197: - JERRY_CONTAINER_TYPE_SET - Set type
        -:  198: - JERRY_CONTAINER_TYPE_WEAKMAP - WeakMap type
        -:  199: - JERRY_CONTAINER_TYPE_WEAKSET - WeakSet type
        -:  200:
        -:  201: *New in version 2.3*.
        -:  202:
        -:  203:## jerry_well_known_symbol_t
        -:  204:
        -:  205:Well-known symbols:
        -:  206:
        -:  207: - JERRY_SYMBOL_ASYNC_ITERATOR - @@asyncIterator well-known symbol
        -:  208: - JERRY_SYMBOL_HAS_INSTANCE - @@hasInstance well-known symbol
        -:  209: - JERRY_SYMBOL_IS_CONCAT_SPREADABLE - @@isConcatSpreadable well-known symbol
        -:  210: - JERRY_SYMBOL_ITERATOR - @@iterator well-known symbol
        -:  211: - JERRY_SYMBOL_MATCH - @@match well-known symbol
        -:  212: - JERRY_SYMBOL_REPLACE - @@replace well-known symbol
        -:  213: - JERRY_SYMBOL_SEARCH - @@search well-known symbol
        -:  214: - JERRY_SYMBOL_SPECIES - @@species well-known symbol
        -:  215: - JERRY_SYMBOL_SPLIT - @@split well-known symbol
        -:  216: - JERRY_SYMBOL_TO_PRIMITIVE - @@toPrimitive well-known symbol
        -:  217: - JERRY_SYMBOL_TO_STRING_TAG - @@toStringTag well-known symbol
        -:  218: - JERRY_SYMBOL_UNSCOPABLES - @@unscopables well-known symbol
        -:  219: - JERRY_SYMBOL_MATCH_ALL - @@matchAll well-known symbol
        -:  220:
        -:  221: *New in version 2.4*.
        -:  222:
        -:  223:## jerry_regexp_flags_t
        -:  224:
        -:  225:RegExp object optional flags:
        -:  226:
        -:  227:  - JERRY_REGEXP_FLAG_GLOBAL - global match; find all matches rather than stopping after the first match
        -:  228:  - JERRY_REGEXP_FLAG_IGNORE_CASE - ignore case
        -:  229:  - JERRY_REGEXP_FLAG_MULTILINE - multiline; treat beginning and end characters (^ and $) as working
        -:  230:    over
        -:  231:    multiple lines (i.e., match the beginning or end of each line (delimited by \n or \r), not only the
        -:  232:    very beginning or end of the whole input string)
        -:  233:  - JERRY_REGEXP_FLAG_STICKY - The sticky flag indicates that it matches only from the index indicated
        -:  234:    by the lastIndex property
        -:  235:  - JERRY_REGEXP_FLAG_UNICODE - The unicode flag enables various Unicode-related features
        -:  236:  - JERRY_REGEXP_FLAG_DOTALL -The dotall flag indicates that the dot special character (".") should
        -:  237:    additionally match the following line terminator ("newline") characters in a string;
        -:  238:
        -:  239:
        -:  240:*New in version 2.0*.
        -:  241:
        -:  242:*Changed in version 2.4*: Added `JERRY_REGEXP_FLAG_STICKY`, `JERRY_REGEXP_FLAG_UNICODE` , `JERRY_REGEXP_FLAG_DOTALL` values.
        -:  243:
        -:  244:
        -:  245:## jerry_parse_option_enable_feature_t
        -:  246:
        -:  247:Option bits for [jerry_parse_options_t](#jerry_parse_options_t).
        -:  248:
        -:  249: - JERRY_PARSE_NO_OPTS - No options passed
        -:  250: - JERRY_PARSE_STRICT_MODE - Enable strict mode
        -:  251: - JERRY_PARSE_MODULE - Parse source as an ECMAScript module
        -:  252: - JERRY_PARSE_HAS_ARGUMENT_LIST - `argument_list` field is valid, this also means that function parsing will be done
        -:  253: - JERRY_PARSE_HAS_RESOURCE - `resource_name` field is valid
        -:  254: - JERRY_PARSE_HAS_START - `start_line` and `start_column` fields are valid
        -:  255: - JERRY_PARSE_HAS_USER_VALUE - `user_value` field is valid
        -:  256:
        -:  257:*New in version [[NEXT_RELEASE]]*.
        -:  258:
        -:  259:Using both `JERRY_PARSE_MODULE` and `JERRY_PARSE_HAS_ARGUMENT_LIST` is an invalid combination and will result in
        -:  260:an error during parsing.
        -:  261:
        -:  262:**See also**
        -:  263:
        -:  264:- [jerry_parse_options_t](#jerry_parse_options_t)
        -:  265:
        -:  266:## jerry_gc_mode_t
        -:  267:
        -:  268:Set garbage collection operational mode
        -:  269:
        -:  270: - JERRY_GC_PRESSURE_LOW - free unused objects
        -:  271: - JERRY_GC_PRESSURE_HIGH - free as much memory as possible
        -:  272:
        -:  273:The difference between `JERRY_GC_PRESSURE_LOW` and `JERRY_GC_PRESSURE_HIGH`
        -:  274:is that the former keeps memory allocated for performance improvements such
        -:  275:as property hash tables for large objects. The latter frees all possible
        -:  276:memory blocks but the performance may drop after the garbage collection.
        -:  277:
        -:  278:*New in version 2.0*.
        -:  279:
        -:  280:## jerry_backtrace_frame_types_t
        -:  281:
        -:  282:List of backtrace frame types returned by
        -:  283:[jerry_backtrace_get_frame_type](#jerry_backtrace_get_frame_type).
        -:  284:
        -:  285: - JERRY_BACKTRACE_FRAME_JS - indicates that the frame is created for a JavaScript function/method
        -:  286:
        -:  287:*New in version [[NEXT_RELEASE]]*.
        -:  288:
        -:  289:## jerry_generate_snapshot_opts_t
        -:  290:
        -:  291:Flags for [jerry_generate_snapshot](#jerry_generate_snapshot):
        -:  292:
        -:  293: - JERRY_SNAPSHOT_SAVE_STATIC - generate static snapshot (see below)
        -:  294:
        -:  295:**Generate static snapshots**
        -:  296:Snapshots contain literal pools, and these literal pools contain references
        -:  297:to constant literals (strings, numbers, etc.). When a snapshot is executed,
        -:  298:these literals are converted to jerry values and the literal pool entries
        -:  299:are changed to their corresponding jerry value. To support this conversion,
        -:  300:the literals and literal pools are copied into RAM even if the
        -:  301:`JERRY_SNAPSHOT_EXEC_COPY_DATA` option is passed to
        -:  302:[jerry_exec_snapshot](#jerry_exec_snapshot). This non-negligible memory
        -:  303:consumption can be avoided by using static snapshots. The literals of
        -:  304:these snapshots are limited to magic strings and 28 bit signed integers,
        -:  305:so their constant pools do not need to be loaded into the memory.
        -:  306:Hence these snapshots can be executed from ROM.
        -:  307:
        -:  308:***Important note:*** The [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  309:function rejects static snaphots unless the `JERRY_SNAPSHOT_EXEC_ALLOW_STATIC`
        -:  310:option bit is set. The caller must also ensure that the same magic
        -:  311:strings are set by [jerry_register_magic_strings](#jerry_register_magic_strings)
        -:  312:when the snapshot is generated and executed. Furthermore the
        -:  313:`JERRY_SNAPSHOT_EXEC_COPY_DATA` option is not allowed.
        -:  314:
        -:  315:*New in version 2.0*.
        -:  316:
        -:  317:*Changed in version [[NEXT_RELEASE]]*: The `JERRY_SNAPSHOT_SAVE_STRICT` value is removed, `JERRY_PARSE_STRICT_MODE` should be used instead.
        -:  318:
        -:  319:## jerry_exec_snapshot_opts_t
        -:  320:
        -:  321:Flags for [jerry_exec_snapshot](#jerry_exec_snapshot) functions:
        -:  322:
        -:  323: - JERRY_SNAPSHOT_EXEC_COPY_DATA - copy snapshot data into memory (see below)
        -:  324: - JERRY_SNAPSHOT_EXEC_ALLOW_STATIC - allow executing static snapshots
        -:  325: - JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION - load snapshot as function instead of executing it
        -:  326: - JERRY_SNAPSHOT_EXEC_HAS_RESOURCE - `resource_name` field is valid
        -:  327:                                      in [jerry_exec_snapshot_option_values_t](#jerry_exec_snapshot_option_values_t)
        -:  328: - JERRY_SNAPSHOT_EXEC_HAS_USER_VALUE - `user_value` field is valid
        -:  329:                                        in [jerry_exec_snapshot_option_values_t](#jerry_exec_snapshot_option_values_t)
        -:  330:
        -:  331:*Changed in version [[NEXT_RELEASE]]*: The `JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION` value is added,
        -:  332:                                       which replaces the `jerry_load_function_snapshot` function.
        -:  333:
        -:  334:**Copy snapshot data into memory**
        -:  335:
        -:  336:By default the snapshot buffer is expected to be present in memory until
        -:  337:[jerry_cleanup](#jerry_cleanup) is called. For example `static const` buffers
        -:  338:compiled into the application binary satisfy this requirement.
        -:  339:
        -:  340:If the snapshot buffer is freed after [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  341:is called the `JERRY_SNAPSHOT_EXEC_COPY_DATA` must be passed to copy the necessary
        -:  342:parts of the snapshot buffer into memory.
        -:  343:
        -:  344:The `JERRY_SNAPSHOT_EXEC_COPY_DATA` option is not allowed for static snapshots.
        -:  345:
        -:  346:*New in version 2.0*.
        -:  347:
        -:  348:## jerry_char_t
        -:  349:
        -:  350:**Summary**
        -:  351:
        -:  352:Jerry's char value
        -:  353:
        -:  354:**Prototype**
        -:  355:
        -:  356:```c
        -:  357:typedef uint8_t jerry_char_t;
        -:  358:```
        -:  359:
        -:  360:## jerry_size_t
        -:  361:
        -:  362:**Summary**
        -:  363:
        -:  364:Jerry's size
        -:  365:
        -:  366:**Prototype**
        -:  367:
        -:  368:```c
        -:  369:typedef uint32_t jerry_size_t;
        -:  370:```
        -:  371:
        -:  372:## jerry_length_t
        -:  373:
        -:  374:**Summary**
        -:  375:
        -:  376:Jerry's length
        -:  377:
        -:  378:**Prototype**
        -:  379:
        -:  380:```c
        -:  381:typedef uint32_t jerry_length_t;
        -:  382:```
        -:  383:
        -:  384:## jerry_value_t
        -:  385:
        -:  386:**Summary**
        -:  387:
        -:  388:JerryScript value can be a boolean, number, null, object, string or undefined. The value has an error flag,
        -:  389:that indicates whether is an error or not. Every type has an error flag not only objects. The error flag should
        -:  390:be cleared before the value is passed as an argument, otherwise it can lead to a type error. The error objects
        -:  391:created by API functions has the error flag set.
        -:  392:
        -:  393:Returned and created values by the API functions must be freed with
        -:  394:[jerry_release_value](#jerry_release_value) when they are no longer needed.
        -:  395:
        -:  396:**Prototype**
        -:  397:
        -:  398:```c
        -:  399:typedef uint32_t jerry_value_t;
        -:  400:```
        -:  401:
        -:  402:## jerry_context_data_manager_t
        -:  403:
        -:  404:**Summary**
        -:  405:
        -:  406:Structure that defines how a context data item will be initialized and deinitialized. JerryScript zeroes out the memory
        -:  407:for the item by default, and if the `init_cb` field is not NULL, it will be called with the pointer to the memory as
        -:  408:an additional custom initializer. The `deinit_cb` (if non-`NULL`) is called during a call to `jerry_cleanup ()` to run
        -:  409:any custom deinitialization *before* the VM has been fully cleaned up. The `finalize_cb` (if non-`NULL`) is also called
        -:  410:during a call to `jerry_cleanup ()` to run any custom deinitialization *after* the VM has been fully cleaned up.
        -:  411:If bytes_needed field is 0, no buffer is allocated for the manager, callback functions are called with NULL pointer.
        -:  412:
        -:  413:**Prototype**
        -:  414:
        -:  415:```c
        -:  416:typedef struct
        -:  417:{
        -:  418:  /**
        -:  419:   * Callback responsible for initializing a context item, or NULL to zero out the memory. This is called lazily, the
        -:  420:   * first time jerry_get_context_data () is called with this manager.
        -:  421:   *
        -:  422:   * @param [in] data The buffer that JerryScript allocated for the manager. The buffer is zeroed out. The size is
        -:  423:   * determined by the bytes_needed field. The buffer is kept alive until jerry_cleanup () is called.
        -:  424:   */
        -:  425:  void (*init_cb) (void *data);
        -:  426:
        -:  427:  /**
        -:  428:   * Callback responsible for deinitializing a context item, or NULL. This is called as part of jerry_cleanup (),
        -:  429:   * right *before* the VM has been cleaned up. This is a good place to release strong references to jerry_value_t's
        -:  430:   * that the manager may be holding.
        -:  431:   * Note: because the VM has not been fully cleaned up yet, jerry_object_native_info_t free_cb's can still get called
        -:  432:   * *after* all deinit_cb's have been run. See finalize_cb for a callback that is guaranteed to run *after* all
        -:  433:   * free_cb's have been run.
        -:  434:   *
        -:  435:   * @param [in] data The buffer that JerryScript allocated for the manager.
        -:  436:   */
        -:  437:  void (*deinit_cb) (void *data);
        -:  438:
        -:  439:  /**
        -:  440:   * Callback responsible for finalizing a context item, or NULL. This is called as part of jerry_cleanup (),
        -:  441:   * right *after* the VM has been cleaned up and destroyed and jerry_... APIs cannot be called any more. At this point,
        -:  442:   * all values in the VM have been cleaned up. This is a good place to clean up native state that can only be cleaned
        -:  443:   * up at the very end when there are no more VM values around that may need to access that state.
        -:  444:   *
        -:  445:   * @param [in] data The buffer that JerryScript allocated for the manager. After returning from this callback,
        -:  446:   * the data pointer may no longer be used.
        -:  447:   */
        -:  448:  void (*finalize_cb) (void *data);
        -:  449:
        -:  450:  /**
        -:  451:   * Number of bytes to allocate for this manager. This is the size of the buffer that JerryScript will allocate on
        -:  452:   * behalf of the manager. The pointer to this buffer is passed into init_cb, deinit_cb and finalize_cb. It is also
        -:  453:   * returned from the jerry_get_context_data () API.
        -:  454:   */
        -:  455:  size_t bytes_needed;
        -:  456:} jerry_context_data_manager_t;
        -:  457:```
        -:  458:
        -:  459:*New in version 2.0*.
        -:  460:
        -:  461:## jerry_context_alloc_t
        -:  462:
        -:  463:**Summary**
        -:  464:
        -:  465:Function type for allocating buffer for JerryScript context.
        -:  466:
        -:  467:**Prototype**
        -:  468:
        -:  469:```c
        -:  470:typedef void *(*jerry_context_alloc_t) (size_t size, void *cb_data_p);
        -:  471:```
        -:  472:
        -:  473:- `size` - allocation size
        -:  474:- `cb_data_p` - pointer to user data
        -:  475:
        -:  476:*New in version 2.0*.
        -:  477:
        -:  478:## jerry_context_t
        -:  479:
        -:  480:**Summary**
        -:  481:
        -:  482:An opaque declaration of the JerryScript context structure.
        -:  483:
        -:  484:**Prototype**
        -:  485:
        -:  486:```c
        -:  487:typedef struct jerry_context_t jerry_context_t;
        -:  488:```
        -:  489:
        -:  490:*New in version 2.0*.
        -:  491:
        -:  492:## jerry_container_operation_t
        -:  493:
        -:  494:Enum that contains the supported container operation types
        -:  495:  - JERRY_CONTAINER_OP_ADD - Set/WeakSet add operation
        -:  496:  - JERRY_CONTAINER_OP_GET - Map/WeakMap get operation
        -:  497:  - JERRY_CONTAINER_OP_SET - Map/WeakMap set operation
        -:  498:  - JERRY_CONTAINER_OP_HAS - Set/WeakSet/Map/WeakMap has operation
        -:  499:  - JERRY_CONTAINER_OP_DELETE - Set/WeakSet/Map/WeakMap delete operation
        -:  500:  - JERRY_CONTAINER_OP_SIZE - Set/WeakSet/Map/WeakMap size operation
        -:  501:  - JERRY_CONTAINER_OP_CLEAR - Set/Map clear operation
        -:  502:
        -:  503:*New in version [[NEXT_RELEASE]]*.
        -:  504:
        -:  505:## jerry_binary_operation_t
        -:  506:
        -:  507:Enum that contains the supported binary operation types
        -:  508: - JERRY_BIN_OP_EQUAL - equal comparison (==)
        -:  509: - JERRY_BIN_OP_STRICT_EQUAL - strict equal comparison (===)
        -:  510: - JERRY_BIN_OP_LESS - less relation (<)
        -:  511: - JERRY_BIN_OP_LESS_EQUAL - less or equal relation (<=)
        -:  512: - JERRY_BIN_OP_GREATER - greater relation (>)
        -:  513: - JERRY_BIN_OP_GREATER_EQUAL - greater or equal relation (>=)
        -:  514: - JERRY_BIN_OP_INSTANCEOF - instanceof operation
        -:  515: - JERRY_BIN_OP_ADD - addition operator (+)
        -:  516: - JERRY_BIN_OP_SUB - subtraction operator (-)
        -:  517: - JERRY_BIN_OP_MUL - multiplication operator (*)
        -:  518: - JERRY_BIN_OP_DIV - division operator (/)
        -:  519: - JERRY_BIN_OP_REM - remainder operator (%)
        -:  520:
        -:  521:*New in version 2.0*.
        -:  522:
        -:  523:**See also**
        -:  524:
        -:  525:- [jerry_binary_operation](#jerry_binary_operation)
        -:  526:
        -:  527:## jerry_property_descriptor_flags_t
        -:  528:
        -:  529:Enum that contains the flags of property descriptors.
        -:  530:
        -:  531: - JERRY_PROP_NO_OPTS - empty property descriptor
        -:  532: - JERRY_PROP_IS_CONFIGURABLE - [[Configurable]]
        -:  533: - JERRY_PROP_IS_ENUMERABLE - [[Enumerable]]
        -:  534: - JERRY_PROP_IS_WRITABLE - [[Writable]]
        -:  535: - JERRY_PROP_IS_CONFIGURABLE_DEFINED - Is [[Configurable]] defined?
        -:  536: - JERRY_PROP_IS_ENUMERABLE_DEFINED - Is [[Enumerable]] defined?
        -:  537: - JERRY_PROP_IS_WRITABLE_DEFINED - Is [[Writable]] defined?
        -:  538: - JERRY_PROP_IS_VALUE_DEFINED - Is [[Value]] defined?
        -:  539: - JERRY_PROP_IS_GET_DEFINED - Is [[Get]] defined?
        -:  540: - JERRY_PROP_IS_SET_DEFINED - Is [[Set]] defined?
        -:  541: - JERRY_PROP_SHOULD_THROW - Should throw on error, instead of returning with false
        -:  542:
        -:  543:*New in version [[NEXT_RELEASE]]*.
        -:  544:
        -:  545:**See also**
        -:  546:
        -:  547:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -:  548:
        -:  549:## jerry_parse_options_t
        -:  550:
        -:  551:**Summary**
        -:  552:
        -:  553:Various configuration options for parsing functions such as [jerry_parse](#jerry_parse).
        -:  554:
        -:  555:**Prototype**
        -:  556:
        -:  557:```c
        -:  558:typedef struct
        -:  559:{
        -:  560:  uint32_t options; /**< combination of jerry_parse_option_enable_feature_t values */
        -:  561:  jerry_value_t argument_list; /**< function argument list if JERRY_PARSE_HAS_ARGUMENT_LIST is set in options
        -:  562:                                *   Note: must be string value */
        -:  563:  jerry_value_t resource_name; /**< resource name string (usually a file name)
        -:  564:                                *   if JERRY_PARSE_HAS_RESOURCE is set in options
        -:  565:                                *   Note: must be string value */
        -:  566:  uint32_t start_line; /**< start line of the source code if JERRY_PARSE_HAS_START is set in options */
        -:  567:  uint32_t start_column; /**< start column of the source code if JERRY_PARSE_HAS_START is set in options */
        -:  568:  jerry_value_t user_value; /**< user value assigned to all functions created by this script including eval
        -:  569:                             *   calls executed by the script if JERRY_PARSE_HAS_USER_VALUE is set in options */
        -:  570:} jerry_parse_options_t;
        -:  571:```
        -:  572:
        -:  573:*New in version [[NEXT_RELEASE]]*.
        -:  574:
        -:  575:**See also**
        -:  576:
        -:  577:- [jerry_parse](#jerry_parse)
        -:  578:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:  579:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  580:- [jerry_parse_option_enable_feature_t](#jerry_parse_option_enable_feature_t)
        -:  581:
        -:  582:## jerry_property_descriptor_t
        -:  583:
        -:  584:**Summary**
        -:  585:
        -:  586:Description of ECMA property descriptor. This struct can be used
        -:  587:for the [jerry_define_own_property](#jerry_define_own_property) method to
        -:  588:configure how the property should be registered.
        -:  589:
        -:  590:The naming scheme is similar to the JavaScript `Object.defineProperty` method.
        -:  591:
        -:  592:Fields should be used in pairs. That is if the `is_value_defined` is set to `true`
        -:  593:the `value` field should contain the value for the property.
        -:  594:
        -:  595:**Prototype**
        -:  596:
        -:  597:```c
        -:  598:typedef struct
        -:  599:{
        -:  600:  uint16_t flags; /**< any combination of jerry_property_descriptor_flags_t bits */
        -:  601:  jerry_value_t value; /**< [[Value]] */
        -:  602:  jerry_value_t getter; /**< [[Get]] */
        -:  603:  jerry_value_t setter; /**< [[Set]] */
        -:  604:} jerry_property_descriptor_t;
        -:  605:```
        -:  606:
        -:  607:*Changed in version [[NEXT_RELEASE]]*: The `is_value_defined`, `is_get_defined`, `is_set_defined`,
        -:  608:                                       `is_writable_defined`, `is_writable`, `is_enumerable_defined`,
        -:  609:                                       `is_enumerable`, `is_configurable_defined`, and `is_configurable`
        -:  610:                                       fields are replaced by the `flags` field.
        -:  611:
        -:  612:**See also**
        -:  613:
        -:  614:- [jerry_property_descriptor_flags_t](#jerry_property_descriptor_flags_t)
        -:  615:- [jerry_define_own_property](#jerry_define_own_property)
        -:  616:
        -:  617:## jerry_backtrace_location_t
        -:  618:
        -:  619:**Summary**
        -:  620:
        -:  621:Source code location data retreived by
        -:  622:[jerry_backtrace_get_location](#jerry_backtrace_get_location).
        -:  623:
        -:  624:**Prototype**
        -:  625:
        -:  626:```c
        -:  627:typedef struct
        -:  628:{
        -:  629:  jerry_value_t resource_name; /**< resource name */
        -:  630:  jerry_size_t line; /**< line index */
        -:  631:  jerry_size_t column; /**< column index */
        -:  632:} jerry_backtrace_location_t;
        -:  633:```
        -:  634:
        -:  635:*New in version [[NEXT_RELEASE]]*.
        -:  636:
        -:  637:## jerry_backtrace_frame_t
        -:  638:
        -:  639:**Summary**
        -:  640:
        -:  641:Backtrace frame data passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t)
        -:  642:handler. This is an internal data structure which fields can be accessed by helper functions
        -:  643:such as [jerry_backtrace_get_location](#jerry_backtrace_get_location).
        -:  644:
        -:  645:**Prototype**
        -:  646:
        -:  647:```c
        -:  648:/**
        -:  649: * Internal data structure for jerry_backtrace_frame_t definition.
        -:  650: */
        -:  651:struct jerry_backtrace_frame_internal_t;
        -:  652:
        -:  653:/**
        -:  654: * Backtrace frame data passed to the jerry_backtrace_callback_t handler.
        -:  655: */
        -:  656:typedef struct jerry_backtrace_frame_internal_t jerry_backtrace_frame_t;
        -:  657:```
        -:  658:
        -:  659:*New in version [[NEXT_RELEASE]]*.
        -:  660:
        -:  661:## jerry_heap_stats_t
        -:  662:
        -:  663:**Summary**
        -:  664:
        -:  665:Description of JerryScript heap memory stats.
        -:  666:It is for memory profiling.
        -:  667:
        -:  668:**Prototype**
        -:  669:
        -:  670:```c
        -:  671:typedef struct
        -:  672:{
        -:  673:  size_t version /**< the version of the stats struct */
        -:  674:  size_t size; /**< heap total size */
        -:  675:  size_t allocated_bytes; /**< currently allocated bytes */
        -:  676:  size_t peak_allocated_bytes; /**< peak allocated bytes */
        -:  677:  size_t reserved[4]; /**< padding for future extensions */
        -:  678:} jerry_heap_stats_t;
        -:  679:```
        -:  680:
        -:  681:*New in version 2.0*.
        -:  682:
        -:  683:**See also**
        -:  684:
        -:  685:- [jerry_get_memory_stats](#jerry_get_memory_stats)
        -:  686:
        -:  687:## jerry_call_info_t
        -:  688:
        -:  689:**Summary**
        -:  690:
        -:  691:Call related information passed to [jerry_external_handler_t](#jerry_external_handler_t).
        -:  692:
        -:  693:**Prototype**
        -:  694:
        -:  695:```c
        -:  696:typedef struct jerry_call_info_t
        -:  697:{
        -:  698:  jerry_value_t function; /**< invoked function object */
        -:  699:  jerry_value_t this_value; /**< this value passed to the function  */
        -:  700:  jerry_value_t new_target; /**< current new target value, undefined for non-constructor calls */
        -:  701:} jerry_call_info_t;
        -:  702:```
        -:  703:
        -:  704:*New in version [[NEXT_RELEASE]]*. Contents of this struct replaces the `jerry_get_new_target` function.
        -:  705:
        -:  706:**See also**
        -:  707:
        -:  708:- [jerry_external_handler_t](#jerry_external_handler_t)
        -:  709:
        -:  710:## jerry_external_handler_t
        -:  711:
        -:  712:**Summary**
        -:  713:
        -:  714:Type of an external function handler
        -:  715:
        -:  716:**Prototype**
        -:  717:
        -:  718:```c
        -:  719:typedef jerry_value_t (*jerry_external_handler_t) (const jerry_call_info_t *call_info_p,
        -:  720:                                                   const jerry_value_t args_p[],
        -:  721:                                                   const jerry_length_t args_count);
        -:  722:```
        -:  723:
        -:  724:- `call_info_p` - pointer to a [jerry_call_info_t](#jerry_call_info_t)
        -:  725:                  structure which holds call related information.
        -:  726:- `args_p` - the function arguments, array of JavaScript values.
        -:  727:- `args_count` - the number of arguments.
        -:  728:- return value
        -:  729:  - The function's return value. If there is no return value, use [jerry_create_undefined()](#jerry_create_undefined).
        -:  730:
        -:  731:**See also**
        -:  732:
        -:  733:- [jerry_create_external_function](#jerry_create_external_function)
        -:  734:
        -:  735:## jerry_value_free_callback_t
        -:  736:
        -:  737:**Summary**
        -:  738:
        -:  739:Native free callback of generic value types.
        -:  740:
        -:  741:*Note*:
        -:  742: - Referred values by this method must have at least 1 reference. (Correct API usage satisfies this condition)
        -:  743:
        -:  744:**Prototype**
        -:  745:
        -:  746:```c
        -:  747:typedef void (*jerry_value_free_callback_t) (void *native_p);
        -:  748:```
        -:  749:
        -:  750:*New in version [[NEXT_RELEASE]]*.
        -:  751:
        -:  752:**See also**
        -:  753:
        -:  754:- [jerry_create_external_string](#jerry_create_external_string)
        -:  755:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -:  756:- [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external)
        -:  757:
        -:  758:## jerry_object_native_free_callback_t
        -:  759:
        -:  760:**Summary**
        -:  761:
        -:  762:Native free callback of an object. The callback receives both the memory pointer and the type
        -:  763:information passed to [jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -:  764:
        -:  765:*Note*:
        -:  766: - Referred values by this method must have at least 1 reference. (Correct API usage satisfies this condition)
        -:  767:
        -:  768:**Prototype**
        -:  769:
        -:  770:```c
        -:  771:typedef void (*jerry_object_native_free_callback_t) (void *native_p, struct jerry_object_native_info_t *info_p);
        -:  772:```
        -:  773:
        -:  774:- `native_p` - native pointer passed to [jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -:  775:- `info_p` - native type info passed to [jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -:  776:
        -:  777:*New in version 2.0*: Renamed from `jerry_object_free_callback_t`.
        -:  778:
        -:  779:*Changed in version 2.2*: API calls are once again allowed. (See note)
        -:  780:
        -:  781:*Changed in version [[NEXT_RELEASE]]*: `info_p` argument is added
        -:  782:
        -:  783:**See also**
        -:  784:
        -:  785:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:  786:
        -:  787:## jerry_external_string_free_callback_t
        -:  788:
        -:  789:**Summary**
        -:  790:
        -:  791:Free callback for external strings. See
        -:  792:[jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -:  793:for more information.
        -:  794:
        -:  795:**Prototype**
        -:  796:
        -:  797:```c
        -:  798:typedef void (*jerry_external_string_free_callback_t) (jerry_char_t *string_p,
        -:  799:                                                       jerry_size_t string_size,
        -:  800:                                                       void *user_p);
        -:  801:```
        -:  802:
        -:  803:- `string_p` - extrenal string pointer
        -:  804:- `string_size` - size of external string
        -:  805:- `user_p` - pointer passed when the external string is created
        -:  806:
        -:  807:*New in version [[NEXT_RELEASE]]*.
        -:  808:
        -:  809:**See also**
        -:  810:
        -:  811:- [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -:  812:- [jerry_create_external_string](#jerry_create_external_string)
        -:  813:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -:  814:
        -:  815:## jerry_error_object_created_callback_t
        -:  816:
        -:  817:**Summary**
        -:  818:
        -:  819:Decorator callback for Error objects. This native callback is called every time when an Error
        -:  820:object is created and the decorator can create or update any properties of the newly created
        -:  821:Error object.
        -:  822:
        -:  823:*Note*:
        -:  824: - The callback function cannot be called recursively, so the Error objects created
        -:  825:   when the callback is running are not updated.
        -:  826:
        -:  827:**Prototype**
        -:  828:
        -:  829:```c
        -:  830:typedef void (*jerry_error_object_created_callback_t) (const jerry_value_t error_object, void *user_p);
        -:  831:```
        -:  832:
        -:  833:- `error_object` - the newly created Error object.
        -:  834:- `user_p` - pointer passed to [jerry_set_error_object_created_callback](#jerry_set_error_object_created_callback).
        -:  835:
        -:  836:*New in version 2.4*.
        -:  837:
        -:  838:**See also**
        -:  839:
        -:  840:- [jerry_set_error_object_created_callback](#jerry_set_error_object_created_callback)
        -:  841:
        -:  842:## jerry_module_state_t
        -:  843:
        -:  844:An enum representing the current status of a module
        -:  845:
        -:  846: - JERRY_MODULE_STATE_INVALID - Return value for jerry_module_get_state when its argument is not a module
        -:  847: - JERRY_MODULE_STATE_UNLINKED - Module is currently unlinked
        -:  848: - JERRY_MODULE_STATE_LINKING - Module is currently being linked
        -:  849: - JERRY_MODULE_STATE_LINKED - Module has been linked (its depencencies has been resolved)
        -:  850: - JERRY_MODULE_STATE_EVALUATING - Module is currently being evaluated
        -:  851: - JERRY_MODULE_STATE_EVALUATED - Module has been evaluated (its source code has been executed)
        -:  852: - JERRY_MODULE_STATE_ERROR - An error has been encountered before the evaluated state is reached
        -:  853:
        -:  854:*New in version [[NEXT_RELEASE]]*.
        -:  855:
        -:  856:## jerry_module_resolve_callback_t
        -:  857:
        -:  858:**Summary**
        -:  859:
        -:  860:Callback which is called by [jerry_module_link](#jerry_module_link) to get the referenced module.
        -:  861:
        -:  862:*Note*:
        -:  863: - If realms are enabled, the returned module should be created in the current realm
        -:  864:   (see: [jerry_get_global_object](#jerry_get_global_object))
        -:  865:
        -:  866:**Prototype**
        -:  867:
        -:  868:```c
        -:  869:typedef jerry_value_t (*jerry_module_resolve_callback_t) (const jerry_value_t specifier,
        -:  870:                                                          const jerry_value_t referrer,
        -:  871:                                                          void *user_p);
        -:  872:```
        -:  873:
        -:  874:- `specifier` - a module specifier string (usually used as a path to the module)
        -:  875:- `referrer` - a module object which contains the `specifier` in its source code
        -:  876:- `user_p` - pointer passed to [jerry_module_link](#jerry_module_link).
        -:  877:- return value
        -:  878:  - a module object - if it can be resolved successfully
        -:  879:  - an error - otherwise
        -:  880:
        -:  881:*New in version [[NEXT_RELEASE]]*.
        -:  882:
        -:  883:**See also**
        -:  884:- [jerry_module_link](#jerry_module_link)
        -:  885:- [jerry_get_global_object](#jerry_get_global_object)
        -:  886:
        -:  887:## jerry_module_import_callback_t
        -:  888:
        -:  889:**Summary**
        -:  890:
        -:  891:Callback which is called when an import is resolved dynamically to get the referenced module.
        -:  892:
        -:  893:*Note*:
        -:  894: - If the function returns with a promise, the import call returns with this promise. The
        -:  895:   application should try to resolve the requested module later. If the module is evaluated
        -:  896:   successfully, the returned promise should be resolved with the namespace object of the
        -:  897:   module. Otherwise, the returned promise should be rejected with an error.
        -:  898: - If the function returns with a resolved module, a promise is created and resolved with the
        -:  899:   namespace object of the module. The import call returns with the resolved promise.
        -:  900: - If the function returns with an error, a promise is created and rejected with the
        -:  901:   return error. The import call returns with the rejected promise.
        -:  902: - All other return values are considered invalid. In this case the import call returns
        -:  903:   with a rejected promise. The rejected promise has a fixed error message, it does not
        -:  904:   specify the reason of the fail.
        -:  905: - If realms are enabled, the returned module should be created in the current realm
        -:  906:   (see: [jerry_get_global_object](#jerry_get_global_object))
        -:  907:
        -:  908:**Prototype**
        -:  909:
        -:  910:```c
        -:  911:typedef jerry_value_t (*jerry_module_import_callback_t) (const jerry_value_t specifier,
        -:  912:                                                         const jerry_value_t user_value,
        -:  913:                                                         void *user_p);
        -:  914:```
        -:  915:
        -:  916:- `specifier` - a module specifier string (usually used as a path to the module)
        -:  917:- `user_value` - the user value assigned to the script (see [jerry_parse_options_t](#jerry_parse_options_t))
        -:  918:- `user_p` - pointer passed to [jerry_module_set_import_callback](#jerry_module_set_import_callback).
        -:  919:- return value
        -:  920:  - promise or resolved module - if the operation is successful
        -:  921:  - an error - otherwise
        -:  922:
        -:  923:*New in version [[NEXT_RELEASE]]*.
        -:  924:
        -:  925:**See also**
        -:  926:- [jerry_module_set_import_callback](#jerry_module_set_import_callback)
        -:  927:- [jerry_get_global_object](#jerry_get_global_object)
        -:  928:
        -:  929:## jerry_module_state_changed_callback_t
        -:  930:
        -:  931:**Summary**
        -:  932:
        -:  933:Callback which is called after the module enters into linked, evaluated or error state.
        -:  934:
        -:  935:**Prototype**
        -:  936:
        -:  937:```c
        -:  938:typedef void (*jerry_module_state_changed_callback_t) (jerry_module_state_t new_state,
        -:  939:                                                       const jerry_value_t module,
        -:  940:                                                       const jerry_value_t value,
        -:  941:                                                       void *user_p);
        -:  942:```
        -:  943:
        -:  944:- `new_state` - new state of the module.
        -:  945:- `module` - a module whose state is changed
        -:  946:- `value` - depends on the state: undefined for linked, module script result for evaluated,
        -:  947:            and error value for error state.
        -:  948:- `user_p` - pointer passed to [jerry_module_set_state_changed_callback](#jerry_module_set_state_changed_callback).
        -:  949:
        -:  950:*New in version [[NEXT_RELEASE]]*.
        -:  951:
        -:  952:**See also**
        -:  953:- [jerry_module_set_state_changed_callback](#jerry_module_set_state_changed_callback)
        -:  954:
        -:  955:## jerry_module_import_meta_callback_t
        -:  956:
        -:  957:**Summary**
        -:  958:
        -:  959:Callback which is called when an import.meta expression of a module is evaluated the first time.
        -:  960:The object returned by import.meta is passed as the `meta_object` argument to the callback, and
        -:  961:the callback can set the initial status of the object (e.g. add properties or set prototype).
        -:  962:
        -:  963:**Prototype**
        -:  964:
        -:  965:```c
        -:  966:typedef void (*jerry_module_import_meta_callback_t) (const jerry_value_t module,
        -:  967:                                                     const jerry_value_t meta_object,
        -:  968:                                                     void *user_p);
        -:  969:```
        -:  970:
        -:  971:- `module` - module whose import.meta object is requested.
        -:  972:- `meta_object` - import.meta object created for the module.
        -:  973:- `user_p` - pointer passed to [jerry_module_set_import_meta_callback](#jerry_module_set_import_meta_callback).
        -:  974:
        -:  975:*New in version [[NEXT_RELEASE]]*.
        -:  976:
        -:  977:**See also**
        -:  978:- [jerry_module_set_import_meta_callback](#jerry_module_set_import_meta_callback)
        -:  979:
        -:  980:## jerry_native_module_evaluate_callback_t
        -:  981:
        -:  982:**Summary**
        -:  983:
        -:  984:Callback which is called by [jerry_module_evaluate](#jerry_module_evaluate) to evaluate the native module.
        -:  985:
        -:  986:Note:
        -:  987: - Native pointers can be used to assign private data to a native module,
        -:  988:   see [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:  989:
        -:  990:**Prototype**
        -:  991:
        -:  992:```c
        -:  993:typedef jerry_value_t (*jerry_native_module_evaluate_callback_t) (const jerry_value_t native_module);
        -:  994:```
        -:  995:
        -:  996:- `native_module` - a native module
        -:  997:- return value
        -:  998:  - any non-error value - if the module is evaluated successfully
        -:  999:  - an error - otherwise
        -: 1000:
        -: 1001:*New in version [[NEXT_RELEASE]]*.
        -: 1002:
        -: 1003:**See also**
        -: 1004:- [jerry_module_evaluate](#jerry_module_evaluate)
        -: 1005:
        -: 1006:## jerry_backtrace_callback_t
        -: 1007:
        -: 1008:**Summary**
        -: 1009:
        -: 1010:Callback function which is called by [jerry_backtrace_capture](#jerry_backtrace_capture)
        -: 1011:for each stack frame.
        -: 1012:
        -: 1013:**Prototype**
        -: 1014:
        -: 1015:```c
        -: 1016:typedef bool (*jerry_backtrace_callback_t) (jerry_backtrace_frame_t *frame_p, void *user_p);
        -: 1017:```
        -: 1018:
        -: 1019:- `frame_p` - pointer to [jerry_backtrace_frame_t](#jerry_backtrace_frame_t) data.
        -: 1020:- `user_p` - pointer passed to [jerry_backtrace_capture](#jerry_backtrace_capture).
        -: 1021:- return value
        -: 1022:  - true, to continue capturing more frames
        -: 1023:  - false, to end the stack capturing
        -: 1024:
        -: 1025:*New in version [[NEXT_RELEASE]]*.
        -: 1026:
        -: 1027:**See also**
        -: 1028:
        -: 1029:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -: 1030:- [jerry_backtrace_frame_t](#jerry_backtrace_frame_t)
        -: 1031:
        -: 1032:## jerry_object_native_info_t
        -: 1033:
        -: 1034:**Summary**
        -: 1035:
        -: 1036:Type information for native pointers. Since each native pointer has a type information,
        -: 1037:multiple native pointers can be assigned to an object, and these can be updated or
        -: 1038:deleted independently.
        -: 1039:
        -: 1040:The type information has a free callback, which is called when the object is freed
        -: 1041:by the garbage collector. If the callback is NULL, the application is not notified
        -: 1042:about the destruction of the object.
        -: 1043:
        -: 1044:The buffer pointed by the native pointer can have a fixed number of jerry values,
        -: 1045:which refer to other values as long as the object is alive. The starting byte
        -: 1046:offset and the number of these values are specified by `offset_of_references` and
        -: 1047:`number_of_references` fields respectively. Before a buffer is attached to an
        -: 1048:object by [jerry_set_object_native_pointer](#jerry_set_object_native_pointer),
        -: 1049:the values must be initialized to undefined by
        -: 1050:[jerry_native_pointer_init_references](#jerry_native_pointer_init_references).
        -: 1051:When a buffer is no longer attached to any object, the
        -: 1052:[jerry_native_pointer_release_references](#jerry_native_pointer_release_references)
        -: 1053:must be called to release the values. A single buffer can be attached to any
        -: 1054:number of living objects. When a buffer is currently attached to at least
        -: 1055:one object, the references can be updated by
        -: 1056:[jerry_native_pointer_set_reference](#jerry_native_pointer_set_reference).
        -: 1057:However, if the buffer is no longer attached to an object, the finalize function
        -: 1058:must be called even if the buffer is reattached to another object later. In this
        -: 1059:case, calling the init function after the finalization is optional, because the
        -: 1060:finalize function also initializes all values to undefined.
        -: 1061:
        -: 1062:**Prototype**
        -: 1063:
        -: 1064:```c
        -: 1065:typedef struct
        -: 1066:{
        -: 1067:  jerry_object_native_free_callback_t free_cb; /**< the free callback of the native pointer */
        -: 1068:  uint16_t number_of_references; /**< the number of value references which are marked by the garbage collector */
        -: 1069:  uint16_t offset_of_references; /**< byte offset indicating the start offset of value
        -: 1070:                                  *   references in the user allocated buffer */
        -: 1071:} jerry_object_native_info_t;
        -: 1072:```
        -: 1073:
        -: 1074:*New in version 2.0*.
        -: 1075:
        -: 1076:*Changed in version [[NEXT_RELEASE]]*: Added `number_of_references`, and `offset_of_references` fields.
        -: 1077:
        -: 1078:**See also**
        -: 1079:
        -: 1080:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -: 1081:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -: 1082:- [jerry_delete_object_native_pointer](#jerry_delete_object_native_pointer)
        -: 1083:- [jerry_native_pointer_init_references](#jerry_native_pointer_init_references)
        -: 1084:- [jerry_native_pointer_release_references](#jerry_native_pointer_release_references)
        -: 1085:- [jerry_native_pointer_set_reference](#jerry_native_pointer_set_reference)
        -: 1086:
        -: 1087:## jerry_object_property_foreach_t
        -: 1088:
        -: 1089:**Summary**
        -: 1090:
        -: 1091:Function type used as a callback for the [jerry_foreach_object_property](#jerry_foreach_object_property)
        -: 1092:method. A function with this type must return "true" to continue the iteration or "false" to finish the
        -: 1093:iteration on the object's properties.
        -: 1094:
        -: 1095:**Prototype**
        -: 1096:
        -: 1097:```c
        -: 1098:typedef bool (*jerry_object_property_foreach_t) (const jerry_value_t property_name,
        -: 1099:                                                 const jerry_value_t property_value,
        -: 1100:                                                 void *user_data_p);
        -: 1101:```
        -: 1102:
        -: 1103:- `property_name` - a property name, this is not always a string.
        -: 1104:- `property_value` - the value for the given property.
        -: 1105:- `user_data_p` - optional user data pointer supplied via the (jerry_foreach_object_property)[#jerry_foreach_object_property] method.
        -: 1106:- return value
        -: 1107:  - true, to continue the iteration
        -: 1108:  - false, to stop the iteration
        -: 1109:
        -: 1110:**See also**
        -: 1111:
        -: 1112:- [jerry_foreach_object_property](#jerry_foreach_object_property)
        -: 1113:
        -: 1114:## jerry_objects_foreach_t
        -: 1115:
        -: 1116:**Summary**
        -: 1117:
        -: 1118:Function type used as a callback for the (jerry_objects_foreach)[#jerry_objects_foreach] method.
        -: 1119:A function with this type must return "true" to continue the iteration or "false" to finish the
        -: 1120:iteration on the object's properties.
        -: 1121:
        -: 1122:**Prototype**
        -: 1123:
        -: 1124:```c
        -: 1125:typedef bool (*jerry_objects_foreach_t) (const jerry_value_t object,
        -: 1126:                                         void *user_data_p);
        -: 1127:```
        -: 1128:
        -: 1129:- `object` - the current JavaScript object in the for-each iteration.
        -: 1130:- `user_data_p` - optional user data pointer supplied via the (jerry_objects_foreach)[#jerry_objects_foreach] method.
        -: 1131:- return value
        -: 1132:  - true, to continue the iteration
        -: 1133:  - false, to stop the iteration
        -: 1134:
        -: 1135:*New in version 2.0*.
        -: 1136:
        -: 1137:**See also**
        -: 1138:
        -: 1139:- [jerry_objects_foreach](#jerry_objects_foreach)
        -: 1140:
        -: 1141:## jerry_objects_foreach_by_native_info_t
        -: 1142:
        -: 1143:**Summary**
        -: 1144:
        -: 1145:Function type used as a callback for the (jerry_objects_foreach_by_native_info)[#jerry_objects_foreach_by_native_info]
        -: 1146:method. A function with this type must return "true" to continue the iteration or "false" to finish the
        -: 1147:iteration on the object's properties.
        -: 1148:
        -: 1149:**Prototype**
        -: 1150:
        -: 1151:```c
        -: 1152:typedef bool (*jerry_objects_foreach_by_native_info_t) (const jerry_value_t object,
        -: 1153:                                                        void *object_data_p,
        -: 1154:                                                        void *user_data_p);
        -: 1155:```
        -: 1156:
        -: 1157:- `object` - the current JavaScript object in the for-each iteration.
        -: 1158:- `object_data_p` - the current object's native data pointer.
        -: 1159:- `user_data_p` - optional user data pointer supplied via the (jerry_objects_foreach_by_native_info)[#jerry_objects_foreach_by_native_info] method.
        -: 1160:- return value
        -: 1161:  - true, to continue the iteration
        -: 1162:  - false, to stop the iteration
        -: 1163:
        -: 1164:*New in version 2.0*.
        -: 1165:
        -: 1166:**See also**
        -: 1167:
        -: 1168:- [jerry_objects_foreach_by_native_info](#jerry_objects_foreach_by_native_info)
        -: 1169:
        -: 1170:## jerry_vm_exec_stop_callback_t
        -: 1171:
        -: 1172:**Summary**
        -: 1173:
        -: 1174:Callback which tells whether the ECMAScript execution should be stopped.
        -: 1175:If it returns with undefined value the ECMAScript execution continues.
        -: 1176:Otherwise the result is thrown by the engine (if the error flag is not
        -: 1177:set for the returned value the engine automatically sets it). The
        -: 1178:callback function might be called again even if it threw an error.
        -: 1179:In this case the function must throw the same error again.
        -: 1180:
        -: 1181:**Prototype**
        -: 1182:
        -: 1183:```c
        -: 1184:typedef jerry_value_t (*jerry_vm_exec_stop_callback_t) (void *user_p);
        -: 1185:```
        -: 1186:
        -: 1187:*New in version 2.0*.
        -: 1188:
        -: 1189:**See also**
        -: 1190:
        -: 1191:- [jerry_set_vm_exec_stop_callback](#jerry_set_vm_exec_stop_callback)
        -: 1192:
        -: 1193:## jerry_vm_throw_callback_t
        -: 1194:
        -: 1195:**Summary**
        -: 1196:
        -: 1197:Callback which is called when a value is thrown in an ECMAScript code. The callback
        -: 1198:should not change the `error_value`. The callback is not called again until the value
        -: 1199:is caught.
        -: 1200:
        -: 1201:Note:
        -: 1202: - The engine considers errors thrown by external functions as never caught. The
        -: 1203:   application can maintain a status flag to ignore the next call of the callback
        -: 1204:   if necessary.
        -: 1205:   See: [jerry_create_external_function](#jerry_create_external_function)
        -: 1206:
        -: 1207:**Prototype**
        -: 1208:
        -: 1209:```c
        -: 1210:typedef void (*jerry_vm_throw_callback_t) (const jerry_value_t error_value, void *user_p);
        -: 1211:```
        -: 1212:
        -: 1213:*New in [[NEXT_RELEASE]]*.
        -: 1214:
        -: 1215:**See also**
        -: 1216:
        -: 1217:- [jerry_set_vm_throw_callback](#jerry_set_vm_throw_callback)
        -: 1218:
        -: 1219:## jerry_promise_state_t
        -: 1220:
        -: 1221:Enum which describes the state of a Promise.
        -: 1222:
        -: 1223:Possible values:
        -: 1224:
        -: 1225: - JERRY_PROMISE_STATE_NONE - Invalid/Unknown state (possibly called on a non-promise object).
        -: 1226: - JERRY_PROMISE_STATE_PENDING - Promise is in "Pending" state.
        -: 1227: - JERRY_PROMISE_STATE_FULFILLED - Promise is in "Fulfilled" state.
        -: 1228: - JERRY_PROMISE_STATE_REJECTED - Promise is in "Rejected" state.
        -: 1229:
        -: 1230:*New in version 2.2*.
        -: 1231:
        -: 1232:**See also**
        -: 1233:
        -: 1234:- [jerry_get_promise_result](#jerry_get_promise_result)
        -: 1235:
        -: 1236:## jerry_promise_event_type_t
        -: 1237:
        -: 1238:Event types for [jerry_promise_callback_t](#jerry_promise_callback_t) callback function.
        -: 1239:The description of the `object` and `value` arguments are provided for each type.
        -: 1240:
        -: 1241:Possible values:
        -: 1242:
        -: 1243:- JERRY_PROMISE_EVENT_CREATE - A new Promise object is created.
        -: 1244:  - object - the new Promise object
        -: 1245:  - value - parent Promise for `then` chains, undefined otherwise.
        -: 1246:- JERRY_PROMISE_EVENT_RESOLVE - Called when a Promise is about to be resolved.
        -: 1247:  - object - the Promise object
        -: 1248:  - value - value for resolving.
        -: 1249:- JERRY_PROMISE_EVENT_REJECT - Called when a Promise is about to be rejected.
        -: 1250:  - object - the Promise object
        -: 1251:  - value - value for rejecting.
        -: 1252:- JERRY_PROMISE_EVENT_RESOLVE_FULFILLED - Called when a resolve is called on a fulfilled Promise.
        -: 1253:  - object - the Promise object
        -: 1254:  - value - value for resolving
        -: 1255:- JERRY_PROMISE_EVENT_REJECT_FULFILLED - Called when a reject is called on a fulfilled Promise.
        -: 1256:  - object - the Promise object
        -: 1257:  - value - value for rejecting
        -: 1258:- JERRY_PROMISE_EVENT_REJECT_WITHOUT_HANDLER - Called when a Promise is rejected without a handler.
        -: 1259:  - object - the Promise object
        -: 1260:  - value - value for rejecting
        -: 1261:- JERRY_PROMISE_EVENT_CATCH_HANDLER_ADDED - Called when a catch handler is added to a rejected
        -: 1262:                                            Promise which did not have a catch handler before.
        -: 1263:  - object - the Promise object
        -: 1264:  - value - undefined
        -: 1265:- JERRY_PROMISE_EVENT_BEFORE_REACTION_JOB - Called before executing a Promise reaction job.
        -: 1266:  - object - the Promise object
        -: 1267:  - value - undefined
        -: 1268:- JERRY_PROMISE_EVENT_AFTER_REACTION_JOB - Called after a Promise reaction job is completed.
        -: 1269:  - object - the Promise object
        -: 1270:  - value - undefined
        -: 1271:- JERRY_PROMISE_EVENT_ASYNC_AWAIT - Called when an async function awaits the result of a Promise object.
        -: 1272:  - object - internal object representing the execution status
        -: 1273:  - value - the Promise object
        -: 1274:- JERRY_PROMISE_EVENT_ASYNC_BEFORE_RESOLVE - Called when an async function is continued with resolve.
        -: 1275:  - object - internal object representing the execution status
        -: 1276:  - value - value for resolving
        -: 1277:- JERRY_PROMISE_EVENT_ASYNC_BEFORE_REJECT - Called when an async function is continued with reject.
        -: 1278:  - object - internal object representing the execution status
        -: 1279:  - value - value for rejecting
        -: 1280:- JERRY_PROMISE_EVENT_ASYNC_AFTER_RESOLVE - Called when an async function resolve is completed.
        -: 1281:  - object - internal object representing the execution status
        -: 1282:  - value - value for resolving
        -: 1283:- JERRY_PROMISE_EVENT_ASYNC_AFTER_REJECT - Called when an async function reject is completed.
        -: 1284:  - object - internal object representing the execution status
        -: 1285:  - value - value for rejecting
        -: 1286:
        -: 1287:*New in version [[NEXT_RELEASE]]*.
        -: 1288:
        -: 1289:**See also**
        -: 1290:
        -: 1291:- [jerry_promise_callback_t](#jerry_promise_callback_t)
        -: 1292:- [jerry_promise_set_callback](#jerry_promise_set_callback)
        -: 1293:
        -: 1294:
        -: 1295:## jerry_promise_event_filter_t
        -: 1296:
        -: 1297:Filter types for [jerry_promise_set_callback](#jerry_promise_set_callback) callback function.
        -: 1298:The callback is only called for those events which are enabled by the filters. The events are
        -: 1299:described in [jerry_promise_event_type_t](#jerry_promise_event_type_t).
        -: 1300:
        -: 1301:Possible values:
        -: 1302:
        -: 1303:- JERRY_PROMISE_EVENT_FILTER_DISABLE - Disable reporting of all events.
        -: 1304:- JERRY_PROMISE_EVENT_FILTER_CREATE - Enables the following event:
        -: 1305:  - JERRY_PROMISE_EVENT_CREATE
        -: 1306:- JERRY_PROMISE_EVENT_FILTER_RESOLVE - Enables the following event:
        -: 1307:  - JERRY_PROMISE_EVENT_RESOLVE
        -: 1308:- JERRY_PROMISE_EVENT_FILTER_REJECT - Enables the following event:
        -: 1309:  - JERRY_PROMISE_EVENT_REJECT
        -: 1310:- JERRY_PROMISE_EVENT_FILTER_ERROR - Enables the following events:
        -: 1311:  - JERRY_PROMISE_EVENT_RESOLVE_FULFILLED
        -: 1312:  - JERRY_PROMISE_EVENT_REJECT_FULFILLED
        -: 1313:  - JERRY_PROMISE_EVENT_REJECT_WITHOUT_HANDLER
        -: 1314:  - JERRY_PROMISE_EVENT_CATCH_HANDLER_ADDED
        -: 1315:- JERRY_PROMISE_EVENT_FILTER_REACTION_JOB - Enables the following events:
        -: 1316:  - JERRY_PROMISE_EVENT_BEFORE_REACTION_JOB
        -: 1317:  - JERRY_PROMISE_EVENT_AFTER_REACTION_JOB
        -: 1318:- JERRY_PROMISE_EVENT_FILTER_ASYNC_MAIN - Enables the following events:
        -: 1319:  - JERRY_PROMISE_EVENT_ASYNC_AWAIT
        -: 1320:- JERRY_PROMISE_EVENT_FILTER_ASYNC_REACTION_JOB - Enables the following events:
        -: 1321:  - JERRY_PROMISE_EVENT_ASYNC_BEFORE_RESOLVE
        -: 1322:  - JERRY_PROMISE_EVENT_ASYNC_BEFORE_REJECT
        -: 1323:  - JERRY_PROMISE_EVENT_ASYNC_AFTER_RESOLVE
        -: 1324:  - JERRY_PROMISE_EVENT_ASYNC_AFTER_REJECT
        -: 1325:
        -: 1326:*New in version [[NEXT_RELEASE]]*.
        -: 1327:
        -: 1328:**See also**
        -: 1329:
        -: 1330:- [jerry_promise_event_type_t](#jerry_promise_event_type_t)
        -: 1331:- [jerry_promise_set_callback](#jerry_promise_set_callback)
        -: 1332:
        -: 1333:
        -: 1334:## jerry_promise_callback_t
        -: 1335:
        -: 1336:**Summary**
        -: 1337:
        -: 1338:Notification callback for tracking Promise and async function operations. The arguments
        -: 1339:passed to the callback depends on the `event_type` which is detailed in the
        -: 1340:description of [jerry_promise_event_type_t](#jerry_promise_event_type_t).
        -: 1341:
        -: 1342:**Prototype**
        -: 1343:
        -: 1344:```c
        -: 1345:typedef void (*jerry_promise_callback_t) (jerry_promise_event_type_t event_type,
        -: 1346:                                          const jerry_value_t object, const jerry_value_t value,
        -: 1347:                                          void *user_p);
        -: 1348:```
        -: 1349:
        -: 1350:- `event_type` - type of the event notification.
        -: 1351:- `object` - object corresponding to the event.
        -: 1352:- `value` - optional value argument.
        -: 1353:- `user_data_p` - optional user data pointer supplied via the (jerry_promise_set_callback)[#jerry_promise_set_callback] method.
        -: 1354:
        -: 1355:*New in version [[NEXT_RELEASE]]*.
        -: 1356:
        -: 1357:**See also**
        -: 1358:
        -: 1359:- [jerry_promise_event_type_t](#jerry_promise_event_type_t)
        -: 1360:- [jerry_promise_set_callback](#jerry_promise_set_callback)
        -: 1361:
        -: 1362:## jerry_typedarray_type_t
        -: 1363:
        -: 1364:Enum which describes the TypedArray types.
        -: 1365:Possible values:
        -: 1366:
        -: 1367: - JERRY_TYPEDARRAY_UINT8 - represents the Uint8Array TypedArray
        -: 1368: - JERRY_TYPEDARRAY_UINT8CLAMPED - represents the Uint8ClampedArray TypedArray
        -: 1369: - JERRY_TYPEDARRAY_INT8 - represents the Int8Array TypedArray
        -: 1370: - JERRY_TYPEDARRAY_UINT16 - represents the Uint16Array TypedArray
        -: 1371: - JERRY_TYPEDARRAY_INT16 - represents the Int16Array TypedArray
        -: 1372: - JERRY_TYPEDARRAY_UINT32 - represents the Uint32Array TypedArray
        -: 1373: - JERRY_TYPEDARRAY_INT32 - represents the Int32Array TypedArray
        -: 1374: - JERRY_TYPEDARRAY_FLOAT32 - represents the Float32Array TypedArray
        -: 1375: - JERRY_TYPEDARRAY_FLOAT64 - represents the Float64Array TypedArray
        -: 1376: - JERRY_TYPEDARRAY_BIGINT64 - represents the BigInt64Array TypedArray
        -: 1377: - JERRY_TYPEDARRAY_BIGUINT64 - represents the BigUint64Array TypedArray
        -: 1378: - JERRY_TYPEDARRAY_INVALID - represents an invalid TypedArray
        -: 1379:
        -: 1380:API functions can return the `JERRY_TYPEDARRAY_INVALID` value if the
        -: 1381:TypedArray support is not in the engine.
        -: 1382:
        -: 1383:*New in version 2.0*.
        -: 1384:
        -: 1385:*Changed in version 2.4*: Added `JERRY_TYPEDARRAY_BIGINT64`, `JERRY_TYPEDARRAY_BIGUINT64` values.
        -: 1386:
        -: 1387:**See also**
        -: 1388:
        -: 1389:- [jerry_get_typedarray_type](#jerry_get_typedarray_type)
        -: 1390:
        -: 1391:
        -: 1392:## jerry_exec_snapshot_option_values_t
        -: 1393:
        -: 1394:**Summary**
        -: 1395:
        -: 1396:Various configuration options for [jerry_exec_snapshot](#jerry_exec_snapshot)
        -: 1397:
        -: 1398:**Prototype**
        -: 1399:
        -: 1400:```c
        -: 1401:typedef struct
        -: 1402:{
        -: 1403:  jerry_value_t resource_name; /**< resource name string (usually a file name)
        -: 1404:                                *   if JERRY_SNAPSHOT_EXEC_HAS_RESOURCE is set in exec_snapshot_opts
        -: 1405:                                *   Note: non-string values are ignored */
        -: 1406:  jerry_value_t user_value; /**< user value assigned to all functions created by this script including
        -: 1407:                             *   eval calls executed by the script if JERRY_SNAPSHOT_EXEC_HAS_USER_VALUE
        -: 1408:                             *   is set in exec_snapshot_opts */
        -: 1409:} jerry_exec_snapshot_option_values_t;
        -: 1410:```
        -: 1411:
        -: 1412:*New in version [[NEXT_RELEASE]]*.
        -: 1413:
        -: 1414:**See also**
        -: 1415:
        -: 1416:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -: 1417:
        -: 1418:## jerry_source_info_enabled_fields_t
        -: 1419:
        -: 1420:Enum which describes the enabled fields of [jerry_source_info_t](#jerry_source_info_t).
        -: 1421:Possible values:
        -: 1422:
        -: 1423: - JERRY_SOURCE_INFO_HAS_SOURCE_CODE - source_code field is valid
        -: 1424: - JERRY_SOURCE_INFO_HAS_FUNCTION_ARGUMENTS - function_arguments field is valid
        -: 1425: - JERRY_SOURCE_INFO_HAS_SOURCE_RANGE - both source_range_start and source_range_length fields are valid
        -: 1426:
        -: 1427:*New in version [[NEXT_RELEASE]]*.
        -: 1428:
        -: 1429:**See also**
        -: 1430:
        -: 1431:- [jerry_source_info_t](#jerry_source_info_t)
        -: 1432:- [jerry_get_source_info](#jerry_get_source_info)
        -: 1433:
        -: 1434:## jerry_source_info_t
        -: 1435:
        -: 1436:**Summary**
        -: 1437:
        -: 1438:Source related information of a script/module/function.
        -: 1439:
        -: 1440:**Prototype**
        -: 1441:
        -: 1442:```c
        -: 1443:typedef struct
        -: 1444:{
        -: 1445:  uint32_t enabled_fields; /**< combination of jerry_source_info_enabled_fields_t values */
        -: 1446:  jerry_value_t source_code; /**< script source code or function body */
        -: 1447:  jerry_value_t function_arguments; /**< function arguments */
        -: 1448:  uint32_t source_range_start; /**< start position of the function in the source code */
        -: 1449:  uint32_t source_range_length; /**< source length of the function in the source code */
        -: 1450:} jerry_source_info_t;
        -: 1451:```
        -: 1452:
        -: 1453:*New in version [[NEXT_RELEASE]]*.
        -: 1454:
        -: 1455:**See also**
        -: 1456:
        -: 1457:- [jerry_source_info_enabled_fields_t](#jerry_source_info_enabled_fields_t)
        -: 1458:- [jerry_get_source_info](#jerry_get_source_info)
        -: 1459:
        -: 1460:## jerry_arraybuffer_type_t
        -: 1461:
        -: 1462:**Summary**
        -: 1463:
        -: 1464:Enum that contains the JerryScript type of an array buffer:
        -: 1465:
        -: 1466: - JERRY_ARRAYBUFFER_TYPE_ARRAYBUFFER - the object is an array buffer object
        -: 1467: - JERRY_ARRAYBUFFER_TYPE_SHARED_ARRAYBUFFER - the object is a shared array buffer object
        -: 1468:
        -: 1469:*New in version [[NEXT_RELEASE]]*.
        -: 1470:
        -: 1471:**See also**
        -: 1472:
        -: 1473:- [jerry_arraybuffer_allocate_t](#jerry_arraybuffer_allocate_t)
        -: 1474:- [jerry_arraybuffer_free_t](#jerry_arraybuffer_free_t)
        -: 1475:
        -: 1476:## jerry_arraybuffer_allocate_t
        -: 1477:
        -: 1478:**Summary**
        -: 1479:
        -: 1480:Callback for allocating the backing store of array buffer or shared array buffer objects.
        -: 1481:
        -: 1482:*Note*:
        -: 1483:- The value referenced by `arraybuffer_user_p` is always NULL unless the buffer is created by
        -: 1484:  [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external) or
        -: 1485:  [jerry_create_shared_arraybuffer_external](#jerry_create_shared_arraybuffer_external).
        -: 1486:  The value referenced by `arraybuffer_user_p` can be changed, and the new value is passed to
        -: 1487:  [jerry_arraybuffer_free_t](#jerry_arraybuffer_free_t).
        -: 1488:
        -: 1489:**Prototype**
        -: 1490:
        -: 1491:```c
        -: 1492:typedef uint8_t *(*jerry_arraybuffer_allocate_t) (jerry_arraybuffer_type_t buffer_type, uint32_t buffer_size,
        -: 1493:                                                  void **arraybuffer_user_p, void *user_p);
        -: 1494:```
        -: 1495:
        -: 1496:- `buffer_type` - type of the array buffer object, see: [jerry_arraybuffer_type_t](#jerry_arraybuffer_type_t).
        -: 1497:- `buffer_size` - size of the requested buffer.
        -: 1498:- `arraybuffer_user_p` - [in/out] user pointer assigned to the array buffer or shared array buffer object.
        -: 1499:- `user_p` - user pointer passed to [jerry_arraybuffer_set_allocator_callbacks](#jerry_arraybuffer_set_allocator_callbacks)
        -: 1500:- return value
        -: 1501:  - Pointer to the buffer, if the allocation is successful, NULL otherwise.
        -: 1502:
        -: 1503:*New in version [[NEXT_RELEASE]]*.
        -: 1504:
        -: 1505:**See also**
        -: 1506:
        -: 1507:- [jerry_arraybuffer_set_allocator_callbacks](#jerry_arraybuffer_set_allocator_callbacks)
        -: 1508:
        -: 1509:## jerry_arraybuffer_free_t
        -: 1510:
        -: 1511:**Summary**
        -: 1512:
        -: 1513:Callback for freeing the backing store of array buffer or shared array buffer objects.
        -: 1514:
        -: 1515:*Note*:
        -: 1516:- The value passed to `arraybuffer_user_p` is always NULL unless the buffer is created by
        -: 1517:  [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external) or
        -: 1518:  [jerry_create_shared_arraybuffer_external](#jerry_create_shared_arraybuffer_external),
        -: 1519:  or the value is modified by [jerry_arraybuffer_allocate_t](#jerry_arraybuffer_allocate_t).
        -: 1520:
        -: 1521:**Prototype**
        -: 1522:
        -: 1523:```c
        -: 1524:typedef void (*jerry_arraybuffer_free_t) (jerry_arraybuffer_type_t buffer_type, uint8_t *buffer_p,
        -: 1525:                                          uint32_t buffer_size, void *arraybuffer_user_p, void *user_p);
        -: 1526:```
        -: 1527:
        -: 1528:- `buffer_type` - type of the array buffer object, see: [jerry_arraybuffer_type_t](#jerry_arraybuffer_type_t).
        -: 1529:- `buffer_p` - pointer to the allocated buffer.
        -: 1530:- `buffer_size` - size of the allocated buffer.
        -: 1531:- `arraybuffer_user_p` - [in/out] user pointer assigned to the array buffer or shared array buffer object.
        -: 1532:- `user_p` - user pointer passed to [jerry_arraybuffer_set_allocator_callbacks](#jerry_arraybuffer_set_allocator_callbacks)
        -: 1533:
        -: 1534:*New in version [[NEXT_RELEASE]]*.
        -: 1535:
        -: 1536:**See also**
        -: 1537:
        -: 1538:- [jerry_arraybuffer_set_allocator_callbacks](#jerry_arraybuffer_set_allocator_callbacks)
        -: 1539:
        -: 1540:
        -: 1541:# General engine functions
        -: 1542:
        -: 1543:## jerry_init
        -: 1544:
        -: 1545:**Summary**
        -: 1546:
        -: 1547:Initializes the JerryScript engine, making it possible to run JavaScript code and perform operations
        -: 1548:on JavaScript values. This is required for almost all API functions.
        -: 1549:
        -: 1550:**Prototype**
        -: 1551:
        -: 1552:```c
        -: 1553:void
        -: 1554:jerry_init (jerry_init_flag_t flags)
        -: 1555:```
        -: 1556:
        -: 1557:`flags` - combination of various engine configuration flags [jerry_init_flag_t](#jerry_init_flag_t).
        -: 1558:
        -: 1559:**Example**
        -: 1560:
        -: 1561:[doctest]: # ()
        -: 1562:
        -: 1563:```c
        -: 1564:#include "jerryscript.h"
        -: 1565:
        -: 1566:int
    #####: 1567:main (void)
        -: 1568:{
    #####: 1569:  jerry_init (JERRY_INIT_SHOW_OPCODES | JERRY_INIT_SHOW_REGEXP_OPCODES);
        -: 1570:
        -: 1571:  // ...
        -: 1572:
    #####: 1573:  jerry_cleanup ();
        -: 1574:  return 0;
        -: 1575:}
        -: 1576:```
        -: 1577:
        -: 1578:**See also**
        -: 1579:
        -: 1580:- [jerry_init_flag_t](#jerry_init_flag_t)
        -: 1581:- [jerry_cleanup](#jerry_cleanup)
        -: 1582:
        -: 1583:
        -: 1584:## jerry_cleanup
        -: 1585:
        -: 1586:**Summary**
        -: 1587:
        -: 1588:Finish JavaScript engine execution, freeing memory and JavaScript values.
        -: 1589:
        -: 1590:*Note*: JavaScript values, received from engine, will be inaccessible after the cleanup.
        -: 1591:
        -: 1592:**Prototype**
        -: 1593:
        -: 1594:```c
        -: 1595:void
        -: 1596:jerry_cleanup (void);
        -: 1597:```
        -: 1598:
        -: 1599:**See also**
        -: 1600:
        -: 1601:- [jerry_init](#jerry_init)
        -: 1602:
        -: 1603:
        -: 1604:## jerry_get_context_data
        -: 1605:
        -: 1606:**Summary**
        -: 1607:
        -: 1608:Retrieve a pointer to the item stored within the current context by the given manager.
        -: 1609:
        -: 1610:*Note*: Since internally the pointer to a manager's context data item is linked to the next such pointer in a linked
        -: 1611:        list, it is inadvisable to invoke too many different managers, because doing so will increase the time it takes
        -: 1612:        to retrieve a manager's context data item, degrading performance. For example, try to keep the number of
        -: 1613:        managers below five.
        -: 1614:
        -: 1615:**Prototype**
        -: 1616:
        -: 1617:```c
        -: 1618:void *
        -: 1619:jerry_get_context_data (const jerry_context_data_manager *manager_p);
        -: 1620:```
        -: 1621:
        -: 1622:- `manager_p`: the manager of this context data item.
        -: 1623:- return value: the item created by `manager_p` when `jerry_get_context_data ()` was first called, or a new item created
        -: 1624:  by `manager_p`, which will be stored for future identical calls to `jerry_get_context_data ()`, and which will be
        -: 1625:  deinitialized using the `deinit_cb` callback provided by `manager_p` when the context will be destroyed.
        -: 1626:
        -: 1627:*New in version 2.0*.
        -: 1628:
        -: 1629:**Example**
        -: 1630:
        -: 1631:[doctest]: # (test="compile")
        -: 1632:
        -: 1633:```c
        -: 1634:#include "jerryscript.h"
        -: 1635:
        -: 1636:typedef struct
        -: 1637:{
        -: 1638:  int my_data1;
        -: 1639:  double my_data2;
        -: 1640:  char *my_data3;
        -: 1641:} my_context_data_t;
        -: 1642:
        -: 1643:/* Define how context items will be initialized. */
        -: 1644:static void
        -: 1645:my_context_data_new (void *user_data_p)
        -: 1646:{
        -: 1647:  my_context_data_t *my_data_p = (my_context_data_t *) user_data_p;
        -: 1648:
        -: 1649:  /*
        -: 1650:   * Initialize my_data_p. JerryScript will store it on the current context and return it whenever
        -: 1651:   * jerry_get_context_data () is called with a pointer to my_manager as defined below.
        -: 1652:   */
        -: 1653:}
        -: 1654:
        -: 1655:/* Define how context items will be deinitialized */
        -: 1656:static void
        -: 1657:my_context_data_free (void *user_data_p)
        -: 1658:{
        -: 1659:  my_context_data_t *my_data_p = ((my_context_data_t *) user_data_p);
        -: 1660:
        -: 1661:  /* Perform any necessary cleanup on my_data. JerryScript will free the pointer after this function completes. */
        -: 1662:}
        -: 1663:
        -: 1664:/* Wrap the creation and destruction functions into a manager */
        -: 1665:static const jerry_context_data_manager_t my_manager =
        -: 1666:{
        -: 1667:  .init_cb = my_context_data_new,
        -: 1668:  .deinit_cb = my_context_data_free,
        -: 1669:  .bytes_needed = sizeof (my_context_data_t)
        -: 1670:};
        -: 1671:
        -: 1672:/*
        -: 1673: * Then, in some function in your code, you can retrieve an item of type my_context_data_t from the currently active
        -: 1674: * context such that JerryScript will create and store such an item if one was not previously created
        -: 1675: */
        -: 1676:static void
        -: 1677:someplace_in_the_code (void)
        -: 1678:{
        -: 1679:  my_context_data_t *my_data = (my_context_data_t *) jerry_get_context_data (&my_manager);
        -: 1680:  /* Perform useful things using the data found in my_data */
        -: 1681:}
        -: 1682:```
        -: 1683:
        -: 1684:
        -: 1685:## jerry_register_magic_strings
        -: 1686:
        -: 1687:**Summary**
        -: 1688:
        -: 1689:Registers an external magic string array.
        -: 1690:
        -: 1691:*Notes*:
        -: 1692:  - The strings in the array must be sorted by size at first, then lexicographically.
        -: 1693:  - The maximum number of external magic strings is limited to 2147483648 (UINT32_MAX / 2).
        -: 1694:    If there are more than 2147483648 external magic strings the extra is cropped.
        -: 1695:
        -: 1696:**Prototype**
        -: 1697:
        -: 1698:```c
        -: 1699:void
        -: 1700:jerry_register_magic_strings  (const jerry_char_t * const *ex_str_items_p,
        -: 1701:                               uint32_t count,
        -: 1702:                               const jerry_length_t *str_lengths_p);
        -: 1703:```
        -: 1704:
        -: 1705:- `ex_str_items_p` - character arrays, representing external magic strings' contents
        -: 1706:- `count` - number of elements in `ext_str_items_p` array
        -: 1707:- `str_lengths_p` - array of lengths for each magic string
        -: 1708:
        -: 1709:*Changed in version 2.0*: The first function argument type was changed.
        -: 1710:
        -: 1711:**Example**
        -: 1712:
        -: 1713:[doctest]: # ()
        -: 1714:
        -: 1715:```c
        -: 1716:#include "jerryscript.h"
        -: 1717:
        -: 1718:int
    #####: 1719:main (void)
        -: 1720:{
    #####: 1721:  jerry_init (JERRY_INIT_EMPTY);
        -: 1722:
        -: 1723:  // must be static, because 'jerry_register_magic_strings' does not copy
        -: 1724:  // the items must be sorted by size at first, then lexicographically
        -: 1725:  static const jerry_char_t * const magic_string_items[] = {
        -: 1726:                                                             (const jerry_char_t *) "magicstring1",
        -: 1727:                                                             (const jerry_char_t *) "magicstring2",
        -: 1728:                                                             (const jerry_char_t *) "magicstring3"
        -: 1729:                                                           };
    #####: 1730:  uint32_t num_magic_string_items = (uint32_t) (sizeof (magic_string_items) / sizeof (jerry_char_t *));
        -: 1731:
        -: 1732:  // must be static, because 'jerry_register_magic_strings' does not copy
        -: 1733:  static const jerry_length_t magic_string_lengths[] = {
        -: 1734:                                                         12,
        -: 1735:                                                         12,
        -: 1736:                                                         12
        -: 1737:                                                       };
    #####: 1738:  jerry_register_magic_strings (magic_string_items, num_magic_string_items, magic_string_lengths);
        -: 1739:}
        -: 1740:```
        -: 1741:
        -: 1742:**See also**
        -: 1743:
        -: 1744:- [jerry_init](#jerry_init)
        -: 1745:- [jerry_cleanup](#jerry_cleanup)
        -: 1746:- [jerry_get_literals_from_snapshot](#jerry_get_literals_from_snapshot)
        -: 1747:
        -: 1748:
        -: 1749:## jerry_get_memory_stats
        -: 1750:
        -: 1751:**Summary**
        -: 1752:
        -: 1753:Get heap memory stats.
        -: 1754:
        -: 1755:**Notes**:
        -: 1756:- The engine must be initialized with the `JERRY_INIT_MEM_STATS` option to allow
        -: 1757:  heap statistic collections. See [jerry_init](#jerry_init)
        -: 1758:- This API depends on a build option (`JERRY_MEM_STATS`) and can be checked
        -: 1759:  in runtime with the `JERRY_FEATURE_MEM_STATS` feature enum value,
        -: 1760:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 1761:
        -: 1762:
        -: 1763:**Prototype**
        -: 1764:
        -: 1765:```c
        -: 1766:bool
        -: 1767:jerry_get_memory_stats (jerry_heap_stats_t *out_stats_p);
        -: 1768:```
        -: 1769:
        -: 1770:- `out_stats_p` - out parameter, that provides the heap statistics.
        -: 1771:- return value
        -: 1772:  - true, if stats were written into the `out_stats_p` pointer.
        -: 1773:  - false, otherwise. Usually it is because the `JERRY_FEATURE_MEM_STATS` feature is not enabled.
        -: 1774:
        -: 1775:*New in version 2.0*.
        -: 1776:
        -: 1777:**Example**
        -: 1778:
        -: 1779:```c
        -: 1780:jerry_init (JERRY_INIT_MEM_STATS);
        -: 1781:// ...
        -: 1782:
        -: 1783:jerry_heap_stats_t stats = {0};
        -: 1784:bool get_stats_ret = jerry_get_memory_stats (&stats);
        -: 1785:```
        -: 1786:
        -: 1787:**See also**
        -: 1788:
        -: 1789:- [jerry_init](#jerry_init)
        -: 1790:
        -: 1791:
        -: 1792:## jerry_gc
        -: 1793:
        -: 1794:**Summary**
        -: 1795:
        -: 1796:Performs garbage collection.
        -: 1797:
        -: 1798:**Prototype**
        -: 1799:
        -: 1800:```c
        -: 1801:void
        -: 1802:jerry_gc (jerry_gc_mode_t mode);
        -: 1803:```
        -: 1804:
        -: 1805:- `mode` - operational mode, see [jerry_gc_mode_t](#jerry_gc_mode_t)
        -: 1806:
        -: 1807:*Changed in version 2.0*: Added `mode` argument.
        -: 1808:
        -: 1809:**Example**
        -: 1810:
        -: 1811:[doctest]: # ()
        -: 1812:
        -: 1813:```c
        -: 1814:#include "jerryscript.h"
        -: 1815:
        -: 1816:int
    #####: 1817:main (void)
        -: 1818:{
    #####: 1819:  jerry_init (JERRY_INIT_EMPTY);
        -: 1820:
    #####: 1821:  jerry_value_t object_value = jerry_create_object ();
    #####: 1822:  jerry_release_value (object_value);
        -: 1823:
    #####: 1824:  jerry_gc (JERRY_GC_PRESSURE_LOW);
        -: 1825:
    #####: 1826:  jerry_cleanup ();
        -: 1827:}
        -: 1828:```
        -: 1829:
        -: 1830:**See also**
        -: 1831:
        -: 1832:- [jerry_gc_mode_t](#jerry_gc_mode_t)
        -: 1833:- [jerry_init](#jerry_init)
        -: 1834:- [jerry_cleanup](#jerry_cleanup)
        -: 1835:
        -: 1836:# Parser and executor functions
        -: 1837:
        -: 1838:Functions to parse and run JavaScript source code.
        -: 1839:
        -: 1840:## jerry_run_simple
        -: 1841:
        -: 1842:**Summary**
        -: 1843:
        -: 1844:The simplest way to run JavaScript.
        -: 1845:
        -: 1846:**Prototype**
        -: 1847:
        -: 1848:```c
        -: 1849:bool
        -: 1850:jerry_run_simple (const jerry_char_t *script_source_p,
        -: 1851:                  size_t script_source_size,
        -: 1852:                  jerry_init_flag_t flags);
        -: 1853:```
        -: 1854:
        -: 1855:- `script_source_p` - source code, it must be a valid utf8 string.
        -: 1856:- `script_source_size` - size of source code buffer, in bytes.
        -: 1857:- `jerry_init_flag_t` - combination of various engine configuration flags
        -: 1858:- return value
        -: 1859:  - true, if run was successful
        -: 1860:  - false, otherwise
        -: 1861:
        -: 1862:**Example**
        -: 1863:
        -: 1864:[doctest]: # ()
        -: 1865:
        -: 1866:```c
        -: 1867:#include "jerryscript.h"
        -: 1868:
        -: 1869:int
    #####: 1870:main (void)
        -: 1871:{
    #####: 1872:  const jerry_char_t script[] = "print ('Hello, World!');";
        -: 1873:
    #####: 1874:  jerry_run_simple (script, sizeof (script) - 1, JERRY_INIT_EMPTY);
        -: 1875:  return 0;
        -: 1876:}
        -: 1877:```
        -: 1878:
        -: 1879:**See also**
        -: 1880:
        -: 1881:- [jerry_init](#jerry_init)
        -: 1882:- [jerry_cleanup](#jerry_cleanup)
        -: 1883:- [jerry_parse](#jerry_parse)
        -: 1884:- [jerry_run](#jerry_run)
        -: 1885:
        -: 1886:
        -: 1887:## jerry_parse
        -: 1888:
        -: 1889:**Summary**
        -: 1890:
        -: 1891:Parse a script, module, or function and create a compiled code using a character string.
        -: 1892:
        -: 1893:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 1894:is no longer needed.
        -: 1895:
        -: 1896:**Prototype**
        -: 1897:
        -: 1898:```c
        -: 1899:jerry_value_t
        -: 1900:jerry_parse (const jerry_char_t *source_p,
        -: 1901:             size_t source_size,
        -: 1902:             const jerry_parse_options_t *options_p);
        -: 1903:```
        -: 1904:
        -: 1905:- `source_p` - string, containing source code to parse (must be a valid UTF8 string).
        -: 1906:- `source_size` - size of the string, in bytes.
        -: 1907:- `options_p` - additional parsing options, can be NULL if not used
        -: 1908:- return value
        -: 1909:  - function object value, if script was parsed successfully,
        -: 1910:  - thrown error, otherwise
        -: 1911:
        -: 1912:*Changed in version 2.0*: Added `resource_name_p`, and `resource_name_length` arguments.
        -: 1913:
        -: 1914:*Changed in version [[NEXT_RELEASE]]*: The `resource_name_p`, `resource_name_length`, and `parse_opts` arguments are replaced by `options_p`.
        -: 1915:                                       This function replaces the `jerry_parse_function` method.
        -: 1916:
        -: 1917:**Example 1**
        -: 1918:
        -: 1919:[doctest]: # (name="02.API-REFERENCE-parse-simple.c")
        -: 1920:
        -: 1921:```c
        -: 1922:#include "jerryscript.h"
        -: 1923:
        -: 1924:int
    #####: 1925:main (void)
        -: 1926:{
    #####: 1927:  jerry_init (JERRY_INIT_EMPTY);
        -: 1928:
        -: 1929:  /* Parsing a script. */
    #####: 1930:  const jerry_char_t script[] = "print ('Hello, World!');";
        -: 1931:
        -: 1932:  jerry_parse_options_t parse_options;
    #####: 1933:  parse_options.options = JERRY_PARSE_STRICT_MODE | JERRY_PARSE_HAS_RESOURCE | JERRY_PARSE_HAS_START;
    #####: 1934:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "hello.js");
        -: 1935:  /* This example script is extracted from the middle of a file. */
    #####: 1936:  parse_options.start_line = 10;
    #####: 1937:  parse_options.start_column = 1;
        -: 1938:
    #####: 1939:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 1940:  jerry_release_value (parse_options.resource_name);
        -: 1941:
        -: 1942:  /* Run the "parsed_code" script with "jerry_run". */
        -: 1943:
    #####: 1944:  jerry_release_value (jerry_run (parsed_code));
    #####: 1945:  jerry_release_value (parsed_code);
        -: 1946:
    #####: 1947:  jerry_cleanup ();
        -: 1948:  return 0;
        -: 1949:}
        -: 1950:```
        -: 1951:
        -: 1952:**Example - function parsing**
        -: 1953:
        -: 1954:[doctest]: # (name="02.API-REFERENCE-parse-function.c")
        -: 1955:
        -: 1956:```c
        -: 1957:#include "jerryscript.h"
        -: 1958:
        -: 1959:int
    #####: 1960:main (void)
        -: 1961:{
    #####: 1962:  jerry_init (JERRY_INIT_EMPTY);
        -: 1963:
        -: 1964:  /* Specifly the argument list to parse a function. */
        -: 1965:  jerry_parse_options_t parse_options;
    #####: 1966:  parse_options.options = JERRY_PARSE_HAS_ARGUMENT_LIST;
    #####: 1967:  parse_options.argument_list = jerry_create_string ((const jerry_char_t *) "a, b");
        -: 1968:
    #####: 1969:  const jerry_char_t function_code[] = "return a + b;";
    #####: 1970:  jerry_value_t parsed_function = jerry_parse (function_code, sizeof (function_code) - 1, &parse_options);
    #####: 1971:  jerry_release_value (parse_options.argument_list);
        -: 1972:
        -: 1973:  /* Use the "parsed_function" as a normal JavaScript function. */
        -: 1974:
    #####: 1975:  jerry_value_t args[] = {
    #####: 1976:    jerry_create_number (3),
    #####: 1977:    jerry_create_number (4),
        -: 1978:  };
    #####: 1979:  jerry_size_t argc = sizeof (args) / sizeof (args[0]);
    #####: 1980:  jerry_value_t call_result = jerry_call_function (parsed_function,
        -: 1981:                                                   jerry_create_undefined(),
        -: 1982:                                                   args,
        -: 1983:                                                   argc);
        -: 1984:
        -: 1985:  /* use the function result */
    #####: 1986:  jerry_release_value (call_result);
    #####: 1987:  jerry_release_value (parsed_function);
        -: 1988:
    #####: 1989:  jerry_cleanup ();
        -: 1990:  return 0;
        -: 1991:}
        -: 1992:```
        -: 1993:
        -: 1994:**See also**
        -: 1995:
        -: 1996:- [jerry_parse_value](#jerry_parse_value)
        -: 1997:- [jerry_run](#jerry_run)
        -: 1998:- [jerry_parse_options_t](#jerry_parse_options_t)
        -: 1999:
        -: 2000:## jerry_parse_value
        -: 2001:
        -: 2002:**Summary**
        -: 2003:
        -: 2004:Parse a script, module, or function and create a compiled code using a string value.
        -: 2005:
        -: 2006:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 2007:is no longer needed.
        -: 2008:
        -: 2009:**Prototype**
        -: 2010:
        -: 2011:```c
        -: 2012:jerry_value_t
        -: 2013:jerry_parse_value (const jerry_value_t source_value,
        -: 2014:                   const jerry_parse_options_t *options_p);
        -: 2015:```
        -: 2016:
        -: 2017:- `source_value` - string value, containing source code to parse (only string values are accepted).
        -: 2018:- `options_p` - additional parsing options, can be NULL if not used
        -: 2019:- return value
        -: 2020:  - function object value, if script was parsed successfully,
        -: 2021:  - thrown error, otherwise
        -: 2022:
        -: 2023:*New in version [[NEXT_RELEASE]]*.
        -: 2024:
        -: 2025:**Example**
        -: 2026:
        -: 2027:[doctest]: # ()
        -: 2028:
        -: 2029:```c
        -: 2030:#include "jerryscript.h"
        -: 2031:
        -: 2032:int
    #####: 2033:main (void)
        -: 2034:{
    #####: 2035:  jerry_init (JERRY_INIT_EMPTY);
        -: 2036:
    #####: 2037:  jerry_value_t script_value = jerry_create_string ((const jerry_char_t *) "print ('Hello, World!');");
        -: 2038:
        -: 2039:  jerry_parse_options_t parse_options;
    #####: 2040:  parse_options.options = JERRY_PARSE_STRICT_MODE | JERRY_PARSE_HAS_RESOURCE | JERRY_PARSE_HAS_START;
    #####: 2041:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "hello.js");
        -: 2042:  /* This example script is extracted from the middle of a file. */
    #####: 2043:  parse_options.start_line = 10;
    #####: 2044:  parse_options.start_column = 1;
        -: 2045:
    #####: 2046:  jerry_value_t parsed_code = jerry_parse_value (script_value, &parse_options);
    #####: 2047:  jerry_release_value (parse_options.resource_name);
    #####: 2048:  jerry_release_value (script_value);
    #####: 2049:  jerry_release_value (parsed_code);
        -: 2050:
    #####: 2051:  jerry_cleanup ();
        -: 2052:  return 0;
        -: 2053:}
        -: 2054:```
        -: 2055:
        -: 2056:**See also**
        -: 2057:
        -: 2058:- [jerry_parse](#jerry_parse)
        -: 2059:- [jerry_run](#jerry_run)
        -: 2060:- [jerry_parse_options_t](#jerry_parse_options_t)
        -: 2061:
        -: 2062:## jerry_run
        -: 2063:
        -: 2064:**Summary**
        -: 2065:
        -: 2066:Run a Script or Module created by [jerry_parse](#jerry_parse).
        -: 2067:
        -: 2068:*Notes*:
        -: 2069:  - The code should be previously parsed with `jerry_parse`.
        -: 2070:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 2071:    when it is no longer needed.
        -: 2072:
        -: 2073:**Prototype**
        -: 2074:
        -: 2075:```c
        -: 2076:jerry_value_t
        -: 2077:jerry_run (const jerry_value_t func_val);
        -: 2078:```
        -: 2079:
        -: 2080:- `func_val` - function to run
        -: 2081:- return value
        -: 2082:  - result of bytecode, if run was successful
        -: 2083:  - thrown error, otherwise
        -: 2084:
        -: 2085:**Example**
        -: 2086:
        -: 2087:[doctest]: # ()
        -: 2088:
        -: 2089:```c
        -: 2090:#include "jerryscript.h"
        -: 2091:
        -: 2092:int
    #####: 2093:main (void)
        -: 2094:{
    #####: 2095:  const jerry_char_t script[] = "print ('Hello, World!');";
        -: 2096:
        -: 2097:  /* Initialize engine */
    #####: 2098:  jerry_init (JERRY_INIT_EMPTY);
        -: 2099:
        -: 2100:  /* Setup Global scope code */
    #####: 2101:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
        -: 2102:
    #####: 2103:  if (!jerry_value_is_error (parsed_code))
        -: 2104:  {
        -: 2105:    /* Execute the parsed source code in the Global scope */
    #####: 2106:    jerry_value_t ret_value = jerry_run (parsed_code);
        -: 2107:
        -: 2108:    /* Returned value must be freed */
    #####: 2109:    jerry_release_value (ret_value);
        -: 2110:  }
        -: 2111:
        -: 2112:  /* Parsed source code must be freed */
    #####: 2113:  jerry_release_value (parsed_code);
        -: 2114:
        -: 2115:  /* Cleanup engine */
    #####: 2116:  jerry_cleanup ();
        -: 2117:}
        -: 2118:```
        -: 2119:
        -: 2120:**See also**
        -: 2121:
        -: 2122:- [jerry_parse](#jerry_parse)
        -: 2123:
        -: 2124:
        -: 2125:## jerry_eval
        -: 2126:
        -: 2127:**Summary**
        -: 2128:
        -: 2129:Perform JavaScript `eval` function call (ECMA-262 v5.1 sec-15.1.2.1).
        -: 2130:
        -: 2131:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 2132:is no longer needed.
        -: 2133:
        -: 2134:**Prototype**
        -: 2135:
        -: 2136:```c
        -: 2137:jerry_value_t
        -: 2138:jerry_eval (const jerry_char_t *source_p,
        -: 2139:            size_t source_size,
        -: 2140:            uint32_t parse_opts);
        -: 2141:```
        -: 2142:
        -: 2143:- `source_p` - source code to evaluate, it must be a valid utf8 string.
        -: 2144:- `source_size` - length of the source code
        -: 2145:- `parse_opts` - combination of [jerry_parse_option_enable_feature_t](#jerry_parse_option_enable_feature_t) flags.
        -: 2146:                 The following flags are allowed: JERRY_PARSE_STRICT_MODE
        -: 2147:- return value - result of eval, may be an error value.
        -: 2148:
        -: 2149:**Example**
        -: 2150:
        -: 2151:```c
        -: 2152:{
        -: 2153:  jerry_value_t ret_val = jerry_eval (str_to_eval,
        -: 2154:                                      strlen (str_to_eval),
        -: 2155:                                      JERRY_PARSE_NO_OPTS);
        -: 2156:}
        -: 2157:```
        -: 2158:
        -: 2159:**See also**
        -: 2160:
        -: 2161:- [jerry_create_external_function](#jerry_create_external_function)
        -: 2162:- [jerry_external_handler_t](#jerry_external_handler_t)
        -: 2163:
        -: 2164:## jerry_run_all_enqueued_jobs
        -: 2165:
        -: 2166:**Summary**
        -: 2167:
        -: 2168:Run enqueued Promise jobs until the first thrown error or until all get executed.
        -: 2169:
        -: 2170:*Important Note*: The job queue is not guaranteed to be empty, after the function call has returned a value.
        -: 2171:Therefore, this function is best used in a while loop, handling each error it returns, until the job queue is empty.
        -: 2172:
        -: 2173:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 2174:is no longer needed.
        -: 2175:
        -: 2176:**Prototype**
        -: 2177:
        -: 2178:```c
        -: 2179:jerry_value_t
        -: 2180:jerry_run_all_enqueued_jobs (void)
        -: 2181:```
        -: 2182:
        -: 2183:- return value - result of last executed job, may be error value.
        -: 2184:
        -: 2185:*New in version 2.0*.
        -: 2186:
        -: 2187:**Example**
        -: 2188:
        -: 2189:[doctest]: # ()
        -: 2190:
        -: 2191:```c
        -: 2192:#include "jerryscript.h"
        -: 2193:
        -: 2194:int
    #####: 2195:main (void)
        -: 2196:{
    #####: 2197:  jerry_init (JERRY_INIT_EMPTY);
        -: 2198:
    #####: 2199:  const jerry_char_t script[] = "new Promise(function(f,r) { f('Hello, World!'); }).then(function(x) { print(x); });";
        -: 2200:
    #####: 2201:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
    #####: 2202:  jerry_value_t script_value = jerry_run (parsed_code);
        -: 2203:
        -: 2204:  jerry_value_t job_value;
        -: 2205:  while (true)
        -: 2206:  {
    #####: 2207:    job_value = jerry_run_all_enqueued_jobs ();
        -: 2208:
    #####: 2209:    if (jerry_value_is_error (job_value))
        -: 2210:    {
    #####: 2211:      if (jerry_value_is_abort (job_value))
        -: 2212:      {
        -: 2213:        // Terminate the engine
        -: 2214:      }
        -: 2215:
        -: 2216:      // Handle the error here
        -: 2217:    }
        -: 2218:    else
        -: 2219:    {
        -: 2220:      // The queue should be empty now
        -: 2221:      break;
        -: 2222:    }
        -: 2223:  }
        -: 2224:
    #####: 2225:  jerry_release_value (job_value);
    #####: 2226:  jerry_release_value (script_value);
    #####: 2227:  jerry_release_value (parsed_code);
        -: 2228:
    #####: 2229:  jerry_cleanup ();
        -: 2230:  return 0;
        -: 2231:}
        -: 2232:```
        -: 2233:
        -: 2234:
        -: 2235:# Get the global context
        -: 2236:
        -: 2237:## jerry_get_global_object
        -: 2238:
        -: 2239:**Summary**
        -: 2240:
        -: 2241:Get the Global object.
        -: 2242:
        -: 2243:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 2244:is no longer needed.
        -: 2245:
        -: 2246:**Prototype**
        -: 2247:
        -: 2248:```c
        -: 2249:jerry_value_t
        -: 2250:jerry_get_global_object (void);
        -: 2251:```
        -: 2252:
        -: 2253:- return value - api value of global object
        -: 2254:
        -: 2255:**Example**
        -: 2256:
        -: 2257:```c
        -: 2258:{
        -: 2259:  jerry_value_t glob_obj_val = jerry_get_global_object ();
        -: 2260:
        -: 2261:  ... // Do something with global object, ex: add properties
        -: 2262:
        -: 2263:  jerry_release_value (glob_obj_val);
        -: 2264:}
        -: 2265:```
        -: 2266:
        -: 2267:**See also**
        -: 2268:
        -: 2269:- [jerry_release_value](#jerry_release_value)
        -: 2270:- [jerry_define_own_property](#jerry_define_own_property)
        -: 2271:
        -: 2272:
        -: 2273:# Checker functions
        -: 2274:
        -: 2275:Functions to check the type of an API value ([jerry_value_t](#jerry_value_t)).
        -: 2276:
        -: 2277:## jerry_value_is_abort
        -: 2278:
        -: 2279:**Summary**
        -: 2280:
        -: 2281:Returns whether the given `jerry_value_t` has the error and abort value set.
        -: 2282:
        -: 2283:**Prototype**
        -: 2284:
        -: 2285:```c
        -: 2286:bool
        -: 2287:jerry_value_is_abort (const jerry_value_t value);
        -: 2288:```
        -: 2289:
        -: 2290:- `value` - api value
        -: 2291:- return value
        -: 2292:  - true, if the given `jerry_value_t` has the error and abort value set
        -: 2293:  - false, otherwise
        -: 2294:
        -: 2295:*New in version 2.0*.
        -: 2296:
        -: 2297:**Example**
        -: 2298:
        -: 2299:```c
        -: 2300:{
        -: 2301:  jerry_value_t value;
        -: 2302:  ... // create or acquire value
        -: 2303:
        -: 2304:  if (jerry_value_is_abort (value))
        -: 2305:  {
        -: 2306:    ...
        -: 2307:  }
        -: 2308:
        -: 2309:  jerry_release_value (value);
        -: 2310:}
        -: 2311:```
        -: 2312:
        -: 2313:**See also**
        -: 2314:
        -: 2315:- [jerry_value_t](#jerry_value_t)
        -: 2316:- [jerry_value_is_error](#jerry_value_is_error)
        -: 2317:
        -: 2318:## jerry_value_is_array
        -: 2319:
        -: 2320:**Summary**
        -: 2321:
        -: 2322:Returns whether the given `jerry_value_t` is an array.
        -: 2323:
        -: 2324:**Prototype**
        -: 2325:
        -: 2326:```c
        -: 2327:bool
        -: 2328:jerry_value_is_array (const jerry_value_t value)
        -: 2329:```
        -: 2330:
        -: 2331:- `value` - api value
        -: 2332:- return value
        -: 2333:  - true, if the given `jerry_value_t` is an array
        -: 2334:  - false, otherwise
        -: 2335:
        -: 2336:**Example**
        -: 2337:
        -: 2338:```c
        -: 2339:{
        -: 2340:  jerry_value_t value;
        -: 2341:  ... // create or acquire value
        -: 2342:
        -: 2343:  if (jerry_value_is_array (value))
        -: 2344:  {
        -: 2345:    ...
        -: 2346:  }
        -: 2347:
        -: 2348:  jerry_release_value (value);
        -: 2349:}
        -: 2350:```
        -: 2351:
        -: 2352:**See also**
        -: 2353:
        -: 2354:- [jerry_release_value](#jerry_release_value)
        -: 2355:
        -: 2356:## jerry_value_is_arraybuffer
        -: 2357:
        -: 2358:**Summary**
        -: 2359:
        -: 2360:Returns whether the given `jerry_value_t` is an ArrayBuffer object.
        -: 2361:
        -: 2362:*Notes*:
        -: 2363:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 2364:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 2365:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2366:- The es.next profile enables this by default.
        -: 2367:
        -: 2368:**Prototype**
        -: 2369:
        -: 2370:```c
        -: 2371:bool
        -: 2372:jerry_value_is_arraybuffer (const jerry_value_t value)
        -: 2373:```
        -: 2374:
        -: 2375:- `value` - api value to check.
        -: 2376:- return value
        -: 2377:  - true, if the given `jerry_value_t` is an ArrayBuffer object.
        -: 2378:  - false, otherwise
        -: 2379:
        -: 2380:*New in version 2.0*.
        -: 2381:
        -: 2382:**Example**
        -: 2383:
        -: 2384:```c
        -: 2385:{
        -: 2386:  jerry_value_t value;
        -: 2387:  ... // create or acquire value
        -: 2388:
        -: 2389:  if (jerry_value_is_arraybuffer (value))
        -: 2390:  {
        -: 2391:    ...
        -: 2392:  }
        -: 2393:
        -: 2394:  jerry_release_value (value);
        -: 2395:}
        -: 2396:```
        -: 2397:
        -: 2398:**See also**
        -: 2399:
        -: 2400:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -: 2401:- [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external)
        -: 2402:
        -: 2403:## jerry_value_is_shared_arraybuffer
        -: 2404:
        -: 2405:**Summary**
        -: 2406:
        -: 2407:Returns whether the given `jerry_value_t` is a SharedArrayBuffer object.
        -: 2408:
        -: 2409:*Notes*:
        -: 2410:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 2411:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 2412:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2413:- The es.next profile enables this by default.
        -: 2414:
        -: 2415:**Prototype**
        -: 2416:
        -: 2417:```c
        -: 2418:bool
        -: 2419:jerry_value_is_shared_arraybuffer (const jerry_value_t value);
        -: 2420:```
        -: 2421:
        -: 2422:- `value` - api value to check.
        -: 2423:- return value
        -: 2424:    - true, if the given `jerry_value_t` is a SharedArrayBuffer object.
        -: 2425:    - false, otherwise
        -: 2426:
        -: 2427:*New in version [[NEXT_RELEASE]]*.
        -: 2428:
        -: 2429:**Example**
        -: 2430:
        -: 2431:```c
        -: 2432:{
        -: 2433:  jerry_value_t value;
        -: 2434:  ... // create or acquire value
        -: 2435:
        -: 2436:  if (jerry_value_is_shared_arraybuffer (value))
        -: 2437:  {
        -: 2438:    ...
        -: 2439:  }
        -: 2440:
        -: 2441:  jerry_release_value (value);
        -: 2442:}
        -: 2443:```
        -: 2444:
        -: 2445:**See also**
        -: 2446:
        -: 2447:- [jerry_create_shared_arraybuffer](#jerry_create_shared_arraybuffer)
        -: 2448:- [jerry_create_shared_arraybuffer_external](#jerry_create_shared_arraybuffer_external)
        -: 2449:
        -: 2450:
        -: 2451:## jerry_value_is_boolean
        -: 2452:
        -: 2453:**Summary**
        -: 2454:
        -: 2455:Returns whether the given `jerry_value_t` is a boolean value.
        -: 2456:
        -: 2457:**Prototype**
        -: 2458:
        -: 2459:```c
        -: 2460:bool
        -: 2461:jerry_value_is_boolean (const jerry_value_t value)
        -: 2462:```
        -: 2463:
        -: 2464:- `value` - api value
        -: 2465:- return value
        -: 2466:  - true, if the given `jerry_value_t` is a boolean value
        -: 2467:  - false, otherwise
        -: 2468:
        -: 2469:**Example**
        -: 2470:
        -: 2471:```c
        -: 2472:{
        -: 2473:  jerry_value_t value;
        -: 2474:  ... // create or acquire value
        -: 2475:
        -: 2476:  if (jerry_value_is_boolean (value))
        -: 2477:  {
        -: 2478:    ...
        -: 2479:  }
        -: 2480:
        -: 2481:  jerry_release_value (value);
        -: 2482:}
        -: 2483:```
        -: 2484:
        -: 2485:**See also**
        -: 2486:
        -: 2487:- [jerry_release_value](#jerry_release_value)
        -: 2488:
        -: 2489:## jerry_value_is_true
        -: 2490:
        -: 2491:**Summary**
        -: 2492:
        -: 2493:Returns whether the given `jerry_value_t` is a true value.
        -: 2494:
        -: 2495:**Prototype**
        -: 2496:
        -: 2497:```c
        -: 2498:bool
        -: 2499:jerry_value_is_true (const jerry_value_t value);
        -: 2500:```
        -: 2501:
        -: 2502:- `value` - api value
        -: 2503:- return value
        -: 2504:    - true, if the given `jerry_value_t` is true value
        -: 2505:    - false, otherwise
        -: 2506:
        -: 2507:*New in version [[NEXT_RELEASE]]*. Replaces the `jerry_get_boolean_value` method.
        -: 2508:
        -: 2509:**Example**
        -: 2510:
        -: 2511:```c
        -: 2512:{
        -: 2513:  jerry_value_t value;
        -: 2514:  ... // create or acquire value
        -: 2515:
        -: 2516:  if (jerry_value_is_true (value))
        -: 2517:  {
        -: 2518:    ...
        -: 2519:  }
        -: 2520:
        -: 2521:  jerry_release_value (value);
        -: 2522:}
        -: 2523:```
        -: 2524:
        -: 2525:**See also**
        -: 2526:
        -: 2527:- [jerry_release_value](#jerry_release_value)
        -: 2528:
        -: 2529:## jerry_value_is_false
        -: 2530:
        -: 2531:**Summary**
        -: 2532:
        -: 2533:Returns whether the given `jerry_value_t` is a false value.
        -: 2534:
        -: 2535:**Prototype**
        -: 2536:
        -: 2537:```c
        -: 2538:bool
        -: 2539:jerry_value_is_false (const jerry_value_t value);
        -: 2540:```
        -: 2541:
        -: 2542:- `value` - api value
        -: 2543:- return value
        -: 2544:    - true, if the given `jerry_value_t` is false value
        -: 2545:    - false, otherwise
        -: 2546:
        -: 2547:*New in version [[NEXT_RELEASE]]*.
        -: 2548:
        -: 2549:**Example**
        -: 2550:
        -: 2551:```c
        -: 2552:{
        -: 2553:  jerry_value_t value;
        -: 2554:  ... // create or acquire value
        -: 2555:
        -: 2556:  if (jerry_value_is_false (value))
        -: 2557:  {
        -: 2558:    ...
        -: 2559:  }
        -: 2560:
        -: 2561:  jerry_release_value (value);
        -: 2562:}
        -: 2563:```
        -: 2564:
        -: 2565:**See also**
        -: 2566:
        -: 2567:- [jerry_release_value](#jerry_release_value)
        -: 2568:
        -: 2569:## jerry_value_is_constructor
        -: 2570:
        -: 2571:**Summary**
        -: 2572:
        -: 2573:Returns whether the given `jerry_value_t` is a constructor function.
        -: 2574:
        -: 2575:**Prototype**
        -: 2576:
        -: 2577:```c
        -: 2578:bool
        -: 2579:jerry_value_is_constructor (const jerry_value_t value)
        -: 2580:```
        -: 2581:
        -: 2582:- `value` - api value
        -: 2583:- return value
        -: 2584:  - true, if the given `jerry_value_t` is a constructor
        -: 2585:  - false, otherwise
        -: 2586:
        -: 2587:**Example**
        -: 2588:
        -: 2589:```c
        -: 2590:{
        -: 2591:  jerry_value_t value;
        -: 2592:  ... // create or acquire value
        -: 2593:
        -: 2594:  if (jerry_value_is_constructor (value))
        -: 2595:  {
        -: 2596:    ...
        -: 2597:  }
        -: 2598:
        -: 2599:  jerry_release_value (value);
        -: 2600:}
        -: 2601:```
        -: 2602:
        -: 2603:**See also**
        -: 2604:
        -: 2605:- [jerry_release_value](#jerry_release_value)
        -: 2606:
        -: 2607:## jerry_value_is_dataview
        -: 2608:
        -: 2609:**Summary**
        -: 2610:
        -: 2611:Returns whether the given `jerry_value_t` is a DataView object value.
        -: 2612:
        -: 2613:*Notes*:
        -: 2614:- This API depends on a build option (`JERRY_BUILTIN_DATAVIEW`) and can be checked
        -: 2615:  in runtime with the `JERRY_FEATURE_DATAVIEW` feature enum value,
        -: 2616:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2617:- The es.next profile enables this by default.
        -: 2618:
        -: 2619:**Prototype**
        -: 2620:
        -: 2621:```c
        -: 2622:bool
        -: 2623:jerry_value_is_dataview (const jerry_value_t value)
        -: 2624:```
        -: 2625:
        -: 2626:- `value` - API value
        -: 2627:- return value
        -: 2628:  - true, if the given `jerry_value_t` is a DataView object
        -: 2629:  - false, otherwise
        -: 2630:
        -: 2631:*New in version 2.0*.
        -: 2632:
        -: 2633:**Example**
        -: 2634:
        -: 2635:[doctest]: # ()
        -: 2636:
        -: 2637:```c
        -: 2638:#include "jerryscript.h"
        -: 2639:
        -: 2640:int
    #####: 2641:main (void)
        -: 2642:{
    #####: 2643:  jerry_init (JERRY_INIT_EMPTY);
        -: 2644:
    #####: 2645:  jerry_value_t arraybuffer = jerry_create_arraybuffer (16);
    #####: 2646:  jerry_value_t dataview = jerry_create_dataview (arraybuffer, 0, 16);
        -: 2647:
    #####: 2648:  if (jerry_value_is_dataview (dataview))
        -: 2649:  {
        -: 2650:    // usage of dataview
        -: 2651:  }
        -: 2652:
    #####: 2653:  jerry_release_value (dataview);
    #####: 2654:  jerry_release_value (arraybuffer);
        -: 2655:
    #####: 2656:  jerry_cleanup ();
        -: 2657:  return 0;
        -: 2658:}
        -: 2659:```
        -: 2660:
        -: 2661:**See also**
        -: 2662:
        -: 2663:- [jerry_release_value](#jerry_release_value)
        -: 2664:- [jerry_create_dataview](#jerry_create_dataview)
        -: 2665:
        -: 2666:
        -: 2667:## jerry_value_is_error
        -: 2668:
        -: 2669:**Summary**
        -: 2670:
        -: 2671:Returns whether the given `jerry_value_t` is error value.
        -: 2672:
        -: 2673:**Prototype**
        -: 2674:
        -: 2675:```c
        -: 2676:bool
        -: 2677:jerry_value_is_error (const jerry_value_t value);
        -: 2678:```
        -: 2679:
        -: 2680:- `value` - api value
        -: 2681:- return value
        -: 2682:  - true, if the given `jerry_value_t` is error value.
        -: 2683:  - false, otherwise
        -: 2684:
        -: 2685:*New in version 2.0*.
        -: 2686:
        -: 2687:**Example**
        -: 2688:
        -: 2689:```c
        -: 2690:{
        -: 2691:  jerry_value_t value;
        -: 2692:  ... // create or acquire value
        -: 2693:
        -: 2694:  if (jerry_value_is_error (value))
        -: 2695:  {
        -: 2696:    ...
        -: 2697:  }
        -: 2698:
        -: 2699:  jerry_release_value (value);
        -: 2700:}
        -: 2701:```
        -: 2702:
        -: 2703:**See also**
        -: 2704:
        -: 2705:- [jerry_value_t](#jerry_value_t)
        -: 2706:- [jerry_value_is_abort](#jerry_value_is_abort)
        -: 2707:
        -: 2708:## jerry_value_is_function
        -: 2709:
        -: 2710:**Summary**
        -: 2711:
        -: 2712:Returns whether the given `jerry_value_t` is a function.
        -: 2713:
        -: 2714:**Prototype**
        -: 2715:
        -: 2716:```c
        -: 2717:bool
        -: 2718:jerry_value_is_function (const jerry_value_t value)
        -: 2719:```
        -: 2720:
        -: 2721:- `value` - api value
        -: 2722:- return value
        -: 2723:  - true, if the given `jerry_value_t` is a function
        -: 2724:  - false, otherwise
        -: 2725:
        -: 2726:**Example**
        -: 2727:
        -: 2728:```c
        -: 2729:{
        -: 2730:  jerry_value_t value;
        -: 2731:  ... // create or acquire value
        -: 2732:
        -: 2733:  if (jerry_value_is_function (value))
        -: 2734:  {
        -: 2735:    ...
        -: 2736:  }
        -: 2737:
        -: 2738:  jerry_release_value (value);
        -: 2739:}
        -: 2740:```
        -: 2741:
        -: 2742:**See also**
        -: 2743:
        -: 2744:- [jerry_release_value](#jerry_release_value)
        -: 2745:
        -: 2746:
        -: 2747:## jerry_value_is_async_function
        -: 2748:
        -: 2749:**Summary**
        -: 2750:
        -: 2751:Returns whether the given `jerry_value_t` is an async function.
        -: 2752:
        -: 2753:**Prototype**
        -: 2754:
        -: 2755:```c
        -: 2756:bool
        -: 2757:jerry_value_is_async_function (const jerry_value_t value)
        -: 2758:```
        -: 2759:
        -: 2760:- `value` - api value
        -: 2761:- return value
        -: 2762:  - true, if the given `jerry_value_t` is an async function
        -: 2763:  - false, otherwise
        -: 2764:
        -: 2765:*New in version 2.4*.
        -: 2766:
        -: 2767:**Example**
        -: 2768:
        -: 2769:```c
        -: 2770:{
        -: 2771:  jerry_value_t value;
        -: 2772:  ... // create or acquire value
        -: 2773:
        -: 2774:  if (jerry_value_is_async_function (value))
        -: 2775:  {
        -: 2776:    ...
        -: 2777:  }
        -: 2778:
        -: 2779:  jerry_release_value (value);
        -: 2780:}
        -: 2781:```
        -: 2782:
        -: 2783:**See also**
        -: 2784:
        -: 2785:- [jerry_release_value](#jerry_release_value)
        -: 2786:
        -: 2787:## jerry_value_is_number
        -: 2788:
        -: 2789:**Summary**
        -: 2790:
        -: 2791:Returns whether the given `jerry_value_t` is a number.
        -: 2792:
        -: 2793:**Prototype**
        -: 2794:
        -: 2795:```c
        -: 2796:bool
        -: 2797:jerry_value_is_number (const jerry_value_t value)
        -: 2798:```
        -: 2799:
        -: 2800:- `value` - api value
        -: 2801:- return value
        -: 2802:  - true, if the given `jerry_value_t` is a number
        -: 2803:  - false, otherwise
        -: 2804:
        -: 2805:**Example**
        -: 2806:
        -: 2807:```c
        -: 2808:{
        -: 2809:  jerry_value_t value;
        -: 2810:  ... // create or acquire value
        -: 2811:
        -: 2812:  if (jerry_value_is_number (value))
        -: 2813:  {
        -: 2814:    ...
        -: 2815:  }
        -: 2816:
        -: 2817:  jerry_release_value (value);
        -: 2818:}
        -: 2819:```
        -: 2820:
        -: 2821:**See also**
        -: 2822:
        -: 2823:- [jerry_release_value](#jerry_release_value)
        -: 2824:
        -: 2825:
        -: 2826:## jerry_value_is_null
        -: 2827:
        -: 2828:**Summary**
        -: 2829:
        -: 2830:Returns whether the given `jerry_value_t` is a null value.
        -: 2831:
        -: 2832:**Prototype**
        -: 2833:
        -: 2834:```c
        -: 2835:bool
        -: 2836:jerry_value_is_null (const jerry_value_t value)
        -: 2837:```
        -: 2838:
        -: 2839:- `value` - api value
        -: 2840:- return value
        -: 2841:  - true, if the given `jerry_value_t` is a null
        -: 2842:  - false, otherwise
        -: 2843:
        -: 2844:**Example**
        -: 2845:
        -: 2846:```c
        -: 2847:{
        -: 2848:  jerry_value_t value;
        -: 2849:  ... // create or acquire value
        -: 2850:
        -: 2851:  if (jerry_value_is_null (value))
        -: 2852:  {
        -: 2853:    ...
        -: 2854:  }
        -: 2855:
        -: 2856:  jerry_release_value (value);
        -: 2857:}
        -: 2858:```
        -: 2859:
        -: 2860:**See also**
        -: 2861:
        -: 2862:- [jerry_release_value](#jerry_release_value)
        -: 2863:
        -: 2864:
        -: 2865:## jerry_value_is_object
        -: 2866:
        -: 2867:**Summary**
        -: 2868:
        -: 2869:Returns whether the given `jerry_value_t` is an object value.
        -: 2870:
        -: 2871:**Prototype**
        -: 2872:
        -: 2873:```c
        -: 2874:bool
        -: 2875:jerry_value_is_object (const jerry_value_t value)
        -: 2876:```
        -: 2877:
        -: 2878:- `value` - api value
        -: 2879:- return value
        -: 2880:  - true, if the given `jerry_value_t` is an object
        -: 2881:  - false, otherwise
        -: 2882:
        -: 2883:**Example**
        -: 2884:
        -: 2885:```c
        -: 2886:{
        -: 2887:  jerry_value_t value;
        -: 2888:  ... // create or acquire value
        -: 2889:
        -: 2890:  if (jerry_value_is_object (value))
        -: 2891:  {
        -: 2892:    ...
        -: 2893:  }
        -: 2894:
        -: 2895:  jerry_release_value (value);
        -: 2896:}
        -: 2897:```
        -: 2898:
        -: 2899:**See also**
        -: 2900:
        -: 2901:- [jerry_release_value](#jerry_release_value)
        -: 2902:
        -: 2903:
        -: 2904:## jerry_value_is_promise
        -: 2905:
        -: 2906:**Summary**
        -: 2907:
        -: 2908:Returns whether the given `jerry_value_t` is a promise value.
        -: 2909:
        -: 2910:*Notes*:
        -: 2911:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 2912:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 2913:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2914:- The es.next profile enables this by default.
        -: 2915:
        -: 2916:
        -: 2917:**Prototype**
        -: 2918:
        -: 2919:```c
        -: 2920:bool
        -: 2921:jerry_value_is_promise (const jerry_value_t value)
        -: 2922:```
        -: 2923:
        -: 2924:- `value` - api value
        -: 2925:- return value
        -: 2926:  - true, if the given `jerry_value_t` is a promise
        -: 2927:  - false, otherwise
        -: 2928:
        -: 2929:*New in version 2.0*.
        -: 2930:
        -: 2931:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 2932:
        -: 2933:**Example**
        -: 2934:
        -: 2935:```c
        -: 2936:{
        -: 2937:  jerry_value_t value;
        -: 2938:  ... // create or acquire value
        -: 2939:
        -: 2940:  if (jerry_value_is_promise (value))
        -: 2941:  {
        -: 2942:    ...
        -: 2943:  }
        -: 2944:
        -: 2945:  jerry_release_value (value);
        -: 2946:}
        -: 2947:```
        -: 2948:
        -: 2949:**See also**
        -: 2950:
        -: 2951:- [jerry_release_value](#jerry_release_value)
        -: 2952:- [jerry_create_promise](#jerry_create_promise)
        -: 2953:
        -: 2954:
        -: 2955:## jerry_value_is_proxy
        -: 2956:
        -: 2957:**Summary**
        -: 2958:
        -: 2959:Returns whether the given `jerry_value_t` is a proxy value.
        -: 2960:
        -: 2961:*Notes*:
        -: 2962:- This API depends on a build option (`JERRY_BUILTIN_PROXY`) and can be checked
        -: 2963:  in runtime with the `JERRY_FEATURE_PROXY` feature enum value,
        -: 2964:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2965:- The es.next profile enables this by default.
        -: 2966:
        -: 2967:
        -: 2968:**Prototype**
        -: 2969:
        -: 2970:```c
        -: 2971:bool
        -: 2972:jerry_value_is_proxy (const jerry_value_t value)
        -: 2973:```
        -: 2974:
        -: 2975:- `value` - api value
        -: 2976:- return value
        -: 2977:  - true, if the given `jerry_value_t` is a proxy object
        -: 2978:  - false, otherwise
        -: 2979:
        -: 2980:*New in version 2.3*.
        -: 2981:
        -: 2982:**Example**
        -: 2983:
        -: 2984:```c
        -: 2985:{
        -: 2986:  jerry_value_t value;
        -: 2987:  ... // create or acquire value
        -: 2988:
        -: 2989:  if (jerry_value_is_proxy (value))
        -: 2990:  {
        -: 2991:    ...
        -: 2992:  }
        -: 2993:
        -: 2994:  jerry_release_value (value);
        -: 2995:}
        -: 2996:```
        -: 2997:
        -: 2998:**See also**
        -: 2999:
        -: 3000:- [jerry_release_value](#jerry_release_value)
        -: 3001:- [jerry_create_proxy](#jerry_create_proxy)
        -: 3002:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 3003:
        -: 3004:
        -: 3005:## jerry_value_is_string
        -: 3006:
        -: 3007:**Summary**
        -: 3008:
        -: 3009:Returns whether the given `jerry_value_t` is a string value.
        -: 3010:
        -: 3011:**Prototype**
        -: 3012:
        -: 3013:```c
        -: 3014:bool
        -: 3015:jerry_value_is_string (const jerry_value_t value)
        -: 3016:```
        -: 3017:
        -: 3018:- `value` - api value
        -: 3019:- return value
        -: 3020:  - true, if the given `jerry_value_t` is a string
        -: 3021:  - false, otherwise
        -: 3022:
        -: 3023:**Example**
        -: 3024:
        -: 3025:```c
        -: 3026:{
        -: 3027:  jerry_value_t value;
        -: 3028:  ... // create or acquire value
        -: 3029:
        -: 3030:  if (jerry_value_is_string (value))
        -: 3031:  {
        -: 3032:    ...
        -: 3033:  }
        -: 3034:
        -: 3035:  jerry_release_value (value);
        -: 3036:}
        -: 3037:```
        -: 3038:
        -: 3039:**See also**
        -: 3040:
        -: 3041:- [jerry_release_value](#jerry_release_value)
        -: 3042:
        -: 3043:
        -: 3044:## jerry_value_is_symbol
        -: 3045:
        -: 3046:**Summary**
        -: 3047:
        -: 3048:Returns whether the given `jerry_value_t` is a symbol value.
        -: 3049:
        -: 3050:*Notes*:
        -: 3051:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 3052:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 3053:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3054:- The es.next profile enables this by default.
        -: 3055:
        -: 3056:**Prototype**
        -: 3057:
        -: 3058:```c
        -: 3059:bool
        -: 3060:jerry_value_is_symbol (const jerry_value_t value)
        -: 3061:```
        -: 3062:
        -: 3063:- `value` - API value
        -: 3064:- return value
        -: 3065:  - true, if the given `jerry_value_t` is a symbol
        -: 3066:  - false, otherwise
        -: 3067:
        -: 3068:*New in version 2.0*.
        -: 3069:
        -: 3070:**Example**
        -: 3071:
        -: 3072:[doctest]: # ()
        -: 3073:
        -: 3074:```c
        -: 3075:#include "jerryscript.h"
        -: 3076:
        -: 3077:int
    #####: 3078:main (void)
        -: 3079:{
    #####: 3080:  jerry_init (JERRY_INIT_EMPTY);
        -: 3081:
    #####: 3082:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "Symbol description string");
    #####: 3083:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 3084:
    #####: 3085:  jerry_release_value (string_value);
        -: 3086:
    #####: 3087:  if (jerry_value_is_symbol (symbol_value))
        -: 3088:  {
        -: 3089:    // usage of symbol_value
        -: 3090:  }
        -: 3091:
    #####: 3092:  jerry_release_value (symbol_value);
        -: 3093:
    #####: 3094:  jerry_cleanup ();
        -: 3095:  return 0;
        -: 3096:}
        -: 3097:```
        -: 3098:
        -: 3099:**See also**
        -: 3100:
        -: 3101:- [jerry_release_value](#jerry_release_value)
        -: 3102:- [jerry_create_symbol](#jerry_create_symbol)
        -: 3103:
        -: 3104:
        -: 3105:## jerry_value_is_bigint
        -: 3106:
        -: 3107:**Summary**
        -: 3108:
        -: 3109:Returns whether the given `jerry_value_t` is a bigint value.
        -: 3110:
        -: 3111:*Notes*:
        -: 3112:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 3113:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 3114:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3115:- The es.next profile enables this by default.
        -: 3116:
        -: 3117:**Prototype**
        -: 3118:
        -: 3119:```c
        -: 3120:bool
        -: 3121:jerry_value_is_bigint (const jerry_value_t value)
        -: 3122:```
        -: 3123:
        -: 3124:- `value` - API value
        -: 3125:- return value
        -: 3126:  - true, if the given `jerry_value_t` is a BigInt
        -: 3127:  - false, otherwise
        -: 3128:
        -: 3129:*New in version 2.4*.
        -: 3130:
        -: 3131:**Example**
        -: 3132:
        -: 3133:[doctest]: # ()
        -: 3134:
        -: 3135:```c
        -: 3136:#include "jerryscript.h"
        -: 3137:
        -: 3138:int
    #####: 3139:main (void)
        -: 3140:{
    #####: 3141:  jerry_init (JERRY_INIT_EMPTY);
        -: 3142:
    #####: 3143:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "12345678");
    #####: 3144:  jerry_value_t bigint_value = jerry_value_to_bigint (string_value);
        -: 3145:
    #####: 3146:  jerry_release_value (string_value);
        -: 3147:
    #####: 3148:  if (jerry_value_is_bigint (bigint_value))
        -: 3149:  {
        -: 3150:    // usage of bigint_value
        -: 3151:  }
        -: 3152:
    #####: 3153:  jerry_release_value (bigint_value);
        -: 3154:
    #####: 3155:  jerry_cleanup ();
        -: 3156:  return 0;
        -: 3157:}
        -: 3158:```
        -: 3159:
        -: 3160:**See also**
        -: 3161:
        -: 3162:- [jerry_release_value](#jerry_release_value)
        -: 3163:- [jerry_create_bigint](#jerry_create_bigint)
        -: 3164:- [jerry_value_to_bigint](#jerry_value_to_bigint)
        -: 3165:
        -: 3166:
        -: 3167:## jerry_value_is_typedarray
        -: 3168:
        -: 3169:**Summary**
        -: 3170:
        -: 3171:Checks whether the given `jerry_value_t` is a TypedArray object or not.
        -: 3172:
        -: 3173:*Notes*:
        -: 3174:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 3175:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 3176:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3177:- The es.next profile enables this by default.
        -: 3178:
        -: 3179:**Prototype**
        -: 3180:
        -: 3181:```c
        -: 3182:bool
        -: 3183:jerry_value_is_typedarray (const jerry_value_t value)
        -: 3184:```
        -: 3185:
        -: 3186:- `value` - object to check
        -: 3187:- return value
        -: 3188:  - true, if the given `jerry_value_t` is a TypedArray object.
        -: 3189:  - false, otherwise
        -: 3190:
        -: 3191:*New in version 2.0*.
        -: 3192:
        -: 3193:**Example**
        -: 3194:
        -: 3195:[doctest]: # ()
        -: 3196:
        -: 3197:```c
        -: 3198:#include "jerryscript.h"
        -: 3199:
        -: 3200:int
    #####: 3201:main (void)
        -: 3202:{
    #####: 3203:  jerry_init (JERRY_INIT_EMPTY);
        -: 3204:
    #####: 3205:  jerry_value_t value = jerry_create_typedarray (JERRY_TYPEDARRAY_UINT16, 15);
        -: 3206:
    #####: 3207:  if (jerry_value_is_typedarray (value))
        -: 3208:  {
        -: 3209:    /* "value" is a typedarray. */
        -: 3210:  }
        -: 3211:
    #####: 3212:  jerry_release_value (value);
        -: 3213:
    #####: 3214:  jerry_cleanup ();
        -: 3215:
        -: 3216:  return 0;
        -: 3217:}
        -: 3218:```
        -: 3219:
        -: 3220:**See also**
        -: 3221:
        -: 3222:- [jerry_create_typedarray](#jerry_create_typedarray)
        -: 3223:
        -: 3224:
        -: 3225:## jerry_get_container_type
        -: 3226:
        -: 3227:**Summary**
        -: 3228:
        -: 3229:Checks whether the given `jerry_value_t` is the given `jerry_container_type_t` type container object.
        -: 3230:
        -: 3231:*Notes*
        -: 3232:- This API function depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -: 3233:  runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -: 3234:  feature enum values.
        -: 3235:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3236:- The es.next profile enables this by default.
        -: 3237:
        -: 3238:**Prototype**
        -: 3239:
        -: 3240:```c
        -: 3241:jerry_container_type_t
        -: 3242:jerry_get_container_type (const jerry_value_t value)
        -: 3243:```
        -: 3244:
        -: 3245:- `value` - Container object
        -: 3246:- return value
        -: 3247:  - The corresponding enum value of `jerry_container_type_t`, or `JERRY_CONTAINER_TYPE_INVALID` if the container
        -: 3248:    was not a valid container object.
        -: 3249:
        -: 3250:*New in version 2.3*.
        -: 3251:
        -: 3252:**Example**
        -: 3253:
        -: 3254:[doctest]: # ()
        -: 3255:
        -: 3256:```c
        -: 3257:#include "jerryscript.h"
        -: 3258:int
    #####: 3259:main (void)
        -: 3260:{
    #####: 3261:  jerry_init (JERRY_INIT_EMPTY);
        -: 3262:
    #####: 3263:  jerry_value_t value = jerry_create_container (JERRY_CONTAINER_TYPE_MAP, NULL, 0);
        -: 3264:
    #####: 3265:  if (jerry_get_container_type (value) == JERRY_CONTAINER_TYPE_MAP)
        -: 3266:  {
        -: 3267:    /* "value" is a map. */
        -: 3268:  }
        -: 3269:
    #####: 3270:  jerry_release_value (value);
        -: 3271:
    #####: 3272:  jerry_cleanup ();
        -: 3273:
        -: 3274:  return 0;
        -: 3275:}
        -: 3276:```
        -: 3277:
        -: 3278:**See also**
        -: 3279:
        -: 3280:- [jerry_create_container](#jerry_create_container)
        -: 3281:- [jerry_container_type_t](#jerry_container_type_t)
        -: 3282:
        -: 3283:
        -: 3284:## jerry_value_is_undefined
        -: 3285:
        -: 3286:**Summary**
        -: 3287:
        -: 3288:Returns whether the given `jerry_value_t` is an undefined value.
        -: 3289:
        -: 3290:**Prototype**
        -: 3291:
        -: 3292:```c
        -: 3293:bool
        -: 3294:jerry_value_is_undefined (const jerry_value_t value)
        -: 3295:```
        -: 3296:
        -: 3297:- `value` - api value
        -: 3298:- return value
        -: 3299:  - true, if the given `jerry_value_t` is an undefined value
        -: 3300:  - false, otherwise
        -: 3301:
        -: 3302:**Example**
        -: 3303:
        -: 3304:```c
        -: 3305:{
        -: 3306:  jerry_value_t value;
        -: 3307:  ... // create or acquire value
        -: 3308:
        -: 3309:  if (jerry_value_is_undefined (value))
        -: 3310:  {
        -: 3311:    ...
        -: 3312:  }
        -: 3313:
        -: 3314:  jerry_release_value (value);
        -: 3315:}
        -: 3316:```
        -: 3317:
        -: 3318:**See also**
        -: 3319:
        -: 3320:- [jerry_release_value](#jerry_release_value)
        -: 3321:
        -: 3322:## jerry_value_get_type
        -: 3323:
        -: 3324:**Summary**
        -: 3325:
        -: 3326:Returns the JavaScript type
        -: 3327:for a given value as a [jerry_type_t](#jerry_type_t) enum value.
        -: 3328:
        -: 3329:This is a similar operation to the 'typeof' operator
        -: 3330:in the standard with an exception that the 'null'
        -: 3331:value has its own enum value.
        -: 3332:
        -: 3333:**Prototype**
        -: 3334:
        -: 3335:```c
        -: 3336:jerry_type_t
        -: 3337:jerry_value_get_type (const jerry_value_t value);
        -: 3338:```
        -: 3339:
        -: 3340:- `value` - JavaScript value to check.
        -: 3341:- return value
        -: 3342:  - One of the [jerry_type_t](#jerry_type_t) value.
        -: 3343:
        -: 3344:*New in version 2.0*.
        -: 3345:
        -: 3346:**Example**
        -: 3347:
        -: 3348:```c
        -: 3349:{
        -: 3350:  jerry_value_t number = jerry_create_number (3.3);
        -: 3351:
        -: 3352:  jerry_type_t type_info = jerry_value_get_type (number);
        -: 3353:
        -: 3354:  if (type_info == JERRY_TYPE_NUMBER)
        -: 3355:  {
        -: 3356:    /* ... */
        -: 3357:  }
        -: 3358:
        -: 3359:  jerry_release_value (number);
        -: 3360:}
        -: 3361:```
        -: 3362:
        -: 3363:**See also**
        -: 3364:
        -: 3365:- [jerry_type_t](#jerry_type_t)
        -: 3366:
        -: 3367:## jerry_object_get_type
        -: 3368:
        -: 3369:**Summary**
        -: 3370:
        -: 3371:Returns the **object** type
        -: 3372:for a given value as a [jerry_object_type_t](#jerry_object_type_t) enum value.
        -: 3373:
        -: 3374:Note: For non-object parameters `JERRY_OBJECT_TYPE_NONE` is returned.
        -: 3375:Note: the returned type can be checked for more detailed type information in the following cases:
        -: 3376:  - `JERRY_OBJECT_TYPE_CONTAINER`, *see also:* [jerry_container_get_type](#jerry_container_get_type)
        -: 3377:  - `JERRY_OBJECT_TYPE_FUNCTION`, *see also:* [jerry_function_get_type](#jerry_function_get_type)
        -: 3378:  - `JERRY_OBJECT_TYPE_ITERATOR`, *see also:* [jerry_iterator_get_type](#jerry_iterator_get_type)
        -: 3379:  - `JERRY_OBJECT_TYPE_TYPEDARRAY`, *see also:* [jerry_get_typedarray_type](#jerry_get_typedarray_type)
        -: 3380:
        -: 3381:**Prototype**
        -: 3382:
        -: 3383:```c
        -: 3384:jerry_object_type_t
        -: 3385:jerry_object_get_type (const jerry_value_t value);
        -: 3386:```
        -: 3387:
        -: 3388:- `value` - JavaScript value to check.
        -: 3389:- return value
        -: 3390:  - One of the [jerry_object_type_t](#jerry_object_type_t) value.
        -: 3391:
        -: 3392:*New in version 2.4*.
        -: 3393:
        -: 3394:**Example**
        -: 3395:
        -: 3396:```c
        -: 3397:{
        -: 3398:  jerry_value_t object = jerry_create_object ();
        -: 3399:
        -: 3400:  jerry_object_type_t object_type_info = jerry_object_get_type (object);
        -: 3401:
        -: 3402:  if (type_info == JERRY_OBJECT_TYPE_GENERIC)
        -: 3403:  {
        -: 3404:    /* ... */
        -: 3405:  }
        -: 3406:
        -: 3407:  jerry_release_value (object);
        -: 3408:}
        -: 3409:```
        -: 3410:
        -: 3411:**See also**
        -: 3412:
        -: 3413:- [jerry_object_type_t](#jerry_object_type_t)
        -: 3414:
        -: 3415:## jerry_function_get_type
        -: 3416:
        -: 3417:**Summary**
        -: 3418:
        -: 3419:Returns the **function** type
        -: 3420:for a given value as a [jerry_function_type_t](#jerry_function_type_t) enum value.
        -: 3421:
        -: 3422:**Prototype**
        -: 3423:
        -: 3424:```c
        -: 3425:jerry_function_type_t
        -: 3426:jerry_function_get_type (const jerry_value_t value);
        -: 3427:```
        -: 3428:
        -: 3429:- `value` - JavaScript value to check.
        -: 3430:- return value
        -: 3431:  - One of the [jerry_function_type_t](#jerry_function_type_t) value.
        -: 3432:
        -: 3433:Note: For non-function parameters `JERRY_FUNCTION_TYPE_NONE` is returned.
        -: 3434:
        -: 3435:*New in version 2.4*.
        -: 3436:
        -: 3437:**Example**
        -: 3438:
        -: 3439:```c
        -: 3440:{
        -: 3441:  const jerry_char_t script[] = "function f() {}; f";
        -: 3442:  jerry_value_t function_object = jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
        -: 3443:
        -: 3444:  jerry_function_type_t function_type_info = jerry_function_get_type (function_object);
        -: 3445:
        -: 3446:  if (type_info == JERRY_FUNCTION_TYPE_GENERIC)
        -: 3447:  {
        -: 3448:    /* ... */
        -: 3449:  }
        -: 3450:
        -: 3451:  jerry_release_value (function_object);
        -: 3452:}
        -: 3453:```
        -: 3454:
        -: 3455:**See also**
        -: 3456:
        -: 3457:- [jerry_function_type_t](#jerry_function_type_t)
        -: 3458:
        -: 3459:## jerry_iterator_get_type
        -: 3460:
        -: 3461:**Summary**
        -: 3462:
        -: 3463:Returns the **iterator** type
        -: 3464:for a given value as a [jerry_iterator_type_t](#jerry_iterator_type_t) enum value.
        -: 3465:
        -: 3466:**Prototype**
        -: 3467:
        -: 3468:```c
        -: 3469:jerry_iterator_type_t
        -: 3470:jerry_iterator_get_type (const jerry_value_t value);
        -: 3471:```
        -: 3472:
        -: 3473:- `value` - JavaScript value to check.
        -: 3474:- return value
        -: 3475:  - One of the [jerry_iterator_type_t](#jerry_iterator_type_t) value.
        -: 3476:
        -: 3477:Note: For non-iterator parameters `JERRY_ITERATOR_TYPE_NONE` is returned.
        -: 3478:
        -: 3479:*New in version 2.4*.
        -: 3480:
        -: 3481:**Example**
        -: 3482:
        -: 3483:```c
        -: 3484:{
        -: 3485:  const jerry_char_t script[] = "[1, 2, 3].values()";
        -: 3486:  jerry_value_t iterator = jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
        -: 3487:
        -: 3488:  jerry_iterator_type_t iterator_type_info = jerry_iterator_get_type (iterator);
        -: 3489:
        -: 3490:  if (type_info == JERRY_ITERATOR_TYPE_ARRAY)
        -: 3491:  {
        -: 3492:    /* ... */
        -: 3493:  }
        -: 3494:
        -: 3495:  jerry_release_value (iterator);
        -: 3496:}
        -: 3497:```
        -: 3498:
        -: 3499:**See also**
        -: 3500:
        -: 3501:- [jerry_iterator_type_t](#jerry_iterator_type_t)
        -: 3502:
        -: 3503:## jerry_is_feature_enabled
        -: 3504:
        -: 3505:**Summary**
        -: 3506:
        -: 3507:Returns whether the specified compile time feature is enabled.
        -: 3508:
        -: 3509:**Prototype**
        -: 3510:
        -: 3511:```c
        -: 3512:bool
        -: 3513:jerry_is_feature_enabled (const jerry_feature_t feature);
        -: 3514:```
        -: 3515:
        -: 3516:- `feature` - jerry feature
        -: 3517:- return value
        -: 3518:  - true, if the given `jerry_feature_t` is enabled
        -: 3519:  - false, otherwise
        -: 3520:
        -: 3521:*New in version 2.0*.
        -: 3522:
        -: 3523:**Example**
        -: 3524:
        -: 3525:```c
        -: 3526:{
        -: 3527:  /* ... */
        -: 3528:  jerry_feature_t feature = JERRY_FEATURE_SNAPSHOT_SAVE;
        -: 3529:
        -: 3530:  if (jerry_is_feature_enabled (feature))
        -: 3531:  {
        -: 3532:    /* ... */
        -: 3533:  }
        -: 3534:
        -: 3535:}
        -: 3536:```
        -: 3537:
        -: 3538:**See also**
        -: 3539:
        -: 3540:- [jerry_feature_t](#jerry_feature_t)
        -: 3541:
        -: 3542:
        -: 3543:# Binary operations
        -: 3544:
        -: 3545:## jerry_binary_operation
        -: 3546:
        -: 3547:**Summary**
        -: 3548:
        -: 3549:Perform binary operation on the given operands (==, ===, <, >, etc.).
        -: 3550:
        -: 3551:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3552:is no longer needed.
        -: 3553:
        -: 3554:**Prototype**
        -: 3555:
        -: 3556:```c
        -: 3557:jerry_value_t
        -: 3558:jerry_binary_operation (jerry_binary_operation_t op,
        -: 3559:                        const jerry_value_t lhs,
        -: 3560:                        const jerry_value_t rhs);
        -: 3561:```
        -: 3562:
        -: 3563:- `op` - binary operation
        -: 3564:- `lhs` - left-hand side operand
        -: 3565:- `rhs` - right-hand side operand
        -: 3566:- return value
        -: 3567:  - error, if argument has an error flag or operation is unsuccessful or unsupported
        -: 3568:  - true/false, the result of the binary operation on the given operands otherwise
        -: 3569:
        -: 3570:*New in version 2.0*.
        -: 3571:
        -: 3572:**Example - JERRY_BIN_OP_EQUAL**
        -: 3573:
        -: 3574:```c
        -: 3575:{
        -: 3576:  jerry_value_t value1;
        -: 3577:  jerry_value_t value2;
        -: 3578:  ... // create or acquire value
        -: 3579:  jerry_value_t result = jerry_binary_operation (JERRY_BIN_OP_EQUAL, value1, value2)
        -: 3580:
        -: 3581:  if (!jerry_value_is_error (result))
        -: 3582:  {
        -: 3583:    if (jerry_value_is_true (result))
        -: 3584:    {
        -: 3585:       // value1 and value2 are equal
        -: 3586:    }
        -: 3587:    else
        -: 3588:    {
        -: 3589:      // value1 and value2 are NOT equal
        -: 3590:    }
        -: 3591:  }
        -: 3592:  else
        -: 3593:  {
        -: 3594:    ... // handle error
        -: 3595:  }
        -: 3596:
        -: 3597:  jerry_release_value (value1);
        -: 3598:  jerry_release_value (value2);
        -: 3599:  jerry_release_value (result);
        -: 3600:}
        -: 3601:```
        -: 3602:
        -: 3603:**Example - JERRY_BIN_OP_INSTANCEOF**
        -: 3604:
        -: 3605:[doctest]: # ()
        -: 3606:
        -: 3607:```c
        -: 3608:#include "jerryscript.h"
        -: 3609:
        -: 3610:static jerry_value_t
    #####: 3611:my_constructor (const jerry_call_info_t *call_info_p,
        -: 3612:                const jerry_value_t argv[],
        -: 3613:                const jerry_length_t argc)
        -: 3614:{
    #####: 3615:  return jerry_create_undefined ();
        -: 3616:}
        -: 3617:
        -: 3618:int
    #####: 3619:main (void)
        -: 3620:{
    #####: 3621:  jerry_init (JERRY_INIT_EMPTY);
        -: 3622:
    #####: 3623:  jerry_value_t base_obj = jerry_create_object ();
    #####: 3624:  jerry_value_t constructor = jerry_create_external_function (my_constructor);
        -: 3625:
        -: 3626:  /* External functions does not have a prototype by default, so we need to create one */
    #####: 3627:  jerry_value_t prototype_str = jerry_create_string ((const jerry_char_t *) ("prototype"));
    #####: 3628:  jerry_release_value (jerry_set_property (constructor, prototype_str, base_obj));
    #####: 3629:  jerry_release_value (prototype_str);
        -: 3630:
        -: 3631:  /* Construct the instance. */
    #####: 3632:  jerry_value_t instance_val = jerry_construct_object (constructor, NULL, 0);
        -: 3633:
        -: 3634:  /* Call the API function of 'instanceof'. */
    #####: 3635:  jerry_value_t is_instance = jerry_binary_operation (JERRY_BIN_OP_INSTANCEOF,
        -: 3636:                                                      instance_val,
        -: 3637:                                                      constructor);
    #####: 3638:  if (!jerry_value_is_error (is_instance)
    #####: 3639:      && jerry_value_is_true (is_instance))
        -: 3640:  {
        -: 3641:    /* ... */
        -: 3642:  }
        -: 3643:
        -: 3644:  /* Free all of the jerry values and cleanup the engine. */
    #####: 3645:  jerry_release_value (base_obj);
    #####: 3646:  jerry_release_value (constructor);
    #####: 3647:  jerry_release_value (instance_val);
    #####: 3648:  jerry_release_value (is_instance);
        -: 3649:
    #####: 3650:  jerry_cleanup ();
        -: 3651:  return 0;
        -: 3652:}
        -: 3653:```
        -: 3654:
        -: 3655:**See also**
        -: 3656:
        -: 3657:- [jerry_binary_operation_t](#jerry_binary_operation_t)
        -: 3658:
        -: 3659:
        -: 3660:# Error manipulation functions
        -: 3661:
        -: 3662:*Changed in version 2.0*: The error handling and manipulation was modified and the old methods were replaced.
        -: 3663:
        -: 3664:## jerry_create_abort_from_value
        -: 3665:
        -: 3666:**Summary**
        -: 3667:
        -: 3668:Create (api) abort from a value.
        -: 3669:
        -: 3670:This function creates an API abort value from an API value. The second argument defines
        -: 3671:whether the input value must be released or not. If it is set to `true`,
        -: 3672:then a [`jerry_release_value`](#jerry_release_value) function will be called
        -: 3673:for the first argument, so the api value won't be available after the call of
        -: 3674:`jerry_create_abort_from_value`. The second argument should be false if both value
        -: 3675:and created abort value are needed.
        -: 3676:
        -: 3677:**Prototype**
        -: 3678:
        -: 3679:```c
        -: 3680:jerry_value_t
        -: 3681:jerry_create_abort_from_value (jerry_value_t value, bool release);
        -: 3682:```
        -: 3683:
        -: 3684:- `value` - api value
        -: 3685:- `release` - raw boolean, defines whether input value must be released
        -: 3686:- return value - abort (api) value
        -: 3687:
        -: 3688:*New in version 2.0*.
        -: 3689:
        -: 3690:**Example 1**
        -: 3691:
        -: 3692:```c
        -: 3693:{
        -: 3694:  jerry_value_t value;
        -: 3695:  ... // create or acquire value
        -: 3696:
        -: 3697:  jerry_value_t abort = jerry_create_abort_from_value (value, true);
        -: 3698:  // using the 'value' variable after release is invalid.
        -: 3699:
        -: 3700:  jerry_release_value (abort);
        -: 3701:}
        -: 3702:```
        -: 3703:
        -: 3704:**Example 2**
        -: 3705:
        -: 3706:```c
        -: 3707:{
        -: 3708:  jerry_value_t value;
        -: 3709:  ... // create or acquire value
        -: 3710:
        -: 3711:  jerry_value_t abort = jerry_create_abort_from_value (value, false);
        -: 3712:  // both 'abort' and 'value' can be used and must be released when they are no longer needed
        -: 3713:
        -: 3714:  jerry_release_value (abort);
        -: 3715:  jerry_release_value (value);
        -: 3716:}
        -: 3717:```
        -: 3718:
        -: 3719:**See also**
        -: 3720:
        -: 3721:- [jerry_value_t](#jerry_value_t)
        -: 3722:- [jerry_get_value_from_error](#jerry_get_value_from_error)
        -: 3723:- [jerry_create_error_from_value](#jerry_create_error_from_value)
        -: 3724:
        -: 3725:## jerry_create_error_from_value
        -: 3726:
        -: 3727:**Summary**
        -: 3728:
        -: 3729:Create (api) error from a value.
        -: 3730:
        -: 3731:This function creates an API error value from an API value. The second argument defines
        -: 3732:whether the input value must be released or not. If it is set to `true`,
        -: 3733:then a [`jerry_release_value`](#jerry_release_value) function will be called
        -: 3734:for the first argument, so the api value won't be available after the call of
        -: 3735:`jerry_create_error_from_value`. The second argument should be false if both value
        -: 3736:and created error value are needed.
        -: 3737:
        -: 3738:**Prototype**
        -: 3739:
        -: 3740:```c
        -: 3741:jerry_value_t
        -: 3742:jerry_create_error_from_value (jerry_value_t value, bool release);
        -: 3743:```
        -: 3744:
        -: 3745:- `value` - api value
        -: 3746:- `release` - raw boolean, defines whether input value must be released
        -: 3747:- return value - error (api) value
        -: 3748:
        -: 3749:*New in version 2.0*.
        -: 3750:
        -: 3751:**Example 1**
        -: 3752:
        -: 3753:```c
        -: 3754:{
        -: 3755:  jerry_value_t value;
        -: 3756:  ... // create or acquire value
        -: 3757:
        -: 3758:  jerry_value_t error = jerry_create_error_from_value (value, true);
        -: 3759:  // using the 'value' variable after release is invalid.
        -: 3760:
        -: 3761:
        -: 3762:  jerry_release_value (error);
        -: 3763:}
        -: 3764:```
        -: 3765:
        -: 3766:**Example 2**
        -: 3767:
        -: 3768:```c
        -: 3769:{
        -: 3770:  jerry_value_t value;
        -: 3771:  ... // create or acquire value
        -: 3772:
        -: 3773:  jerry_value_t error = jerry_create_error_from_value (value, false);
        -: 3774:  // both 'error' and 'value' can be used and must be released when they are no longer needed
        -: 3775:
        -: 3776:  jerry_release_value (error);
        -: 3777:  jerry_release_value (value);
        -: 3778:}
        -: 3779:```
        -: 3780:
        -: 3781:**See also**
        -: 3782:
        -: 3783:- [jerry_value_t](#jerry_value_t)
        -: 3784:- [jerry_get_value_from_error](#jerry_get_value_from_error)
        -: 3785:- [jerry_create_abort_from_value](#jerry_create_abort_from_value)
        -: 3786:
        -: 3787:## jerry_get_error_type
        -: 3788:
        -: 3789:**Summary**
        -: 3790:
        -: 3791:Returns the type of the Error object if possible.
        -: 3792:
        -: 3793:If a non-error object is used as the input for the function the method
        -: 3794:will return `JERRY_ERROR_NONE` indicating that the value was not
        -: 3795:an Error object. However it is still possible that the value contains
        -: 3796:error semantics. To correctly detect if a value have error use the
        -: 3797:[jerry_value_is_error](#jerry_value_is_error) method.
        -: 3798:
        -: 3799:**Prototype**
        -: 3800:
        -: 3801:```c
        -: 3802:jerry_error_t
        -: 3803:jerry_get_error_type (const jerry_value_t value);
        -: 3804:```
        -: 3805:
        -: 3806:- `value` - api value (possible error object)
        -: 3807:- return value
        -: 3808:  - JERRY_ERROR_NONE if the input is not an error object
        -: 3809:  - one of the [jerry_error_t](#jerry_error_t) value
        -: 3810:
        -: 3811:*New in version 2.0*.
        -: 3812:
        -: 3813:**Example**
        -: 3814:
        -: 3815:```c
        -: 3816:{
        -: 3817:  jerry_value_t error_obj = jerry_create_error (JERRY_ERROR_RANGE,
        -: 3818:                                                (const jerry_char_t *) "error msg");
        -: 3819:  jerry_error_t error_type = jerry_get_error_type (error_obj);
        -: 3820:
        -: 3821:  // error_type is now JERRY_ERROR_RANGE.
        -: 3822:
        -: 3823:  jerry_release_value (error_obj);
        -: 3824:}
        -: 3825:```
        -: 3826:
        -: 3827:**See also**
        -: 3828:
        -: 3829:- [jerry_create_error](#jerry_create_error)
        -: 3830:- [jerry_value_is_error](#jerry_value_is_error)
        -: 3831:
        -: 3832:## jerry_get_value_from_error
        -: 3833:
        -: 3834:**Summary**
        -: 3835:
        -: 3836:Get the value from an error.
        -: 3837:
        -: 3838:Many API functions cannot be called with an error value.
        -: 3839:This function extracts the API value from an error. The second argument defines
        -: 3840:whether the input error value must be released or not. If it is set to `true`,
        -: 3841:then a [`jerry_release_value`](#jerry_release_value) function will be called
        -: 3842:for the first argument, so the error value won't be available after the call of
        -: 3843:`jerry_get_value_from_error`. The second argument should be false if both error
        -: 3844:and its represented value are needed.
        -: 3845:
        -: 3846:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3847:is no longer needed.
        -: 3848:
        -: 3849:**Prototype**
        -: 3850:
        -: 3851:```c
        -: 3852:jerry_value_t
        -: 3853:jerry_get_value_from_error (jerry_value_t value, bool release)
        -: 3854:```
        -: 3855:
        -: 3856:- `value` - error (api) value
        -: 3857:- `release` - raw boolean, defines whether input value must be released
        -: 3858:- return value - api value
        -: 3859:
        -: 3860:*New in version 2.0*.
        -: 3861:
        -: 3862:**Example 1**
        -: 3863:
        -: 3864:```c
        -: 3865:{
        -: 3866:  jerry_value_t value;
        -: 3867:  ... // create or acquire value
        -: 3868:
        -: 3869:  jerry_value_t error = jerry_create_error_from_value (value, true);
        -: 3870:  jerry_value_t value_from_error = jerry_get_value_from_error (error, true);
        -: 3871:  // using the 'error' variable after release is invalid.
        -: 3872:
        -: 3873:  jerry_release_value (value_from_error);
        -: 3874:}
        -: 3875:```
        -: 3876:
        -: 3877:**Example 2**
        -: 3878:
        -: 3879:```c
        -: 3880:{
        -: 3881:  jerry_value_t value;
        -: 3882:  ... // create or acquire value
        -: 3883:
        -: 3884:  jerry_value_t error = jerry_create_error_from_value (value, true);
        -: 3885:  jerry_value_t value_from_error = jerry_get_value_from_error (error, false);
        -: 3886:  // both 'error' and 'value_from_error' can be used and must be released when they are no longer needed
        -: 3887:
        -: 3888:  jerry_release_value (value_from_error);
        -: 3889:  jerry_release_value (error);
        -: 3890:}
        -: 3891:```
        -: 3892:
        -: 3893:**See also**
        -: 3894:
        -: 3895:- [jerry_value_t](#jerry_value_t)
        -: 3896:- [jerry_create_error_from_value](#jerry_create_error_from_value)
        -: 3897:- [jerry_create_abort_from_value](#jerry_create_abort_from_value)
        -: 3898:
        -: 3899:## jerry_set_error_object_created_callback
        -: 3900:
        -: 3901:**Summary**
        -: 3902:
        -: 3903:Set the decorator callback for newly created Error objects. The operation of the callback
        -: 3904:is described in [jerry_error_object_created_callback_t](#jerry_error_object_created_callback_t).
        -: 3905:
        -: 3906:**Prototype**
        -: 3907:
        -: 3908:```c
        -: 3909:void jerry_set_error_object_created_callback (jerry_error_object_created_callback_t callback, void *user_p);
        -: 3910:```
        -: 3911:
        -: 3912:- `callback` - callback function, the previously set value is overwritten, and setting NULL
        -: 3913:               disables the operation
        -: 3914:- `user_p` - pointer passed to the callback function, can be NULL
        -: 3915:
        -: 3916:*New in version 2.4*.
        -: 3917:
        -: 3918:**Example**
        -: 3919:
        -: 3920:```c
        -: 3921:static void
        -: 3922:error_object_created_callback (const jerry_value_t error_object) /**< new error object */
        -: 3923:                               void *user_p) /**< user pointer */
        -: 3924:{
        -: 3925:  (void) error_object;
        -: 3926:  (void) user_p;
        -: 3927:  printf ("Notification: a new error is created\n");
        -: 3928:} /* error_object_created_callback */
        -: 3929:
        -: 3930:void main(void)
        -: 3931:{
        -: 3932:  jerry_init (JERRY_INIT_EMPTY);
        -: 3933:
        -: 3934:  jerry_set_error_object_created_callback (error_object_created_callback, NULL);
        -: 3935:
        -: 3936:  jerry_release_value (jerry_create_error (JERRY_ERROR_COMMON,
        -: 3937:                                           (const jerry_char_t *) "Message"));
        -: 3938:
        -: 3939:  jerry_cleanup ();
        -: 3940:} /* main */
        -: 3941:```
        -: 3942:
        -: 3943:**See also**
        -: 3944:
        -: 3945:- [jerry_error_object_created_callback_t](#jerry_error_object_created_callback_t)
        -: 3946:
        -: 3947:## jerry_set_vm_throw_callback
        -: 3948:
        -: 3949:**Summary**
        -: 3950:
        -: 3951:The callback passed to this function is called when an error is thrown
        -: 3952:in ECMAScript code. The callback is not called again until the value is
        -: 3953:caught. See: [jerry_vm_throw_callback_t](#jerry_vm_throw_callback_t).
        -: 3954:
        -: 3955:*Notes*:
        -: 3956:- This API depends on a build option (`JERRY_VM_THROW`) and can be checked
        -: 3957:  in runtime with the `JERRY_FEATURE_VM_THROW` feature enum value,
        -: 3958:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3959:
        -: 3960:**Prototype**
        -: 3961:
        -: 3962:```c
        -: 3963:void
        -: 3964:jerry_set_vm_throw_callback (jerry_vm_throw_callback_t throw_cb,
        -: 3965:                             void *user_p);
        -: 3966:```
        -: 3967:
        -: 3968:- `throw_cb` - callback which is called on throws (passing NULL disables this feature)
        -: 3969:- `user_p` - user pointer passed to the `throw_cb` function
        -: 3970:
        -: 3971:*New in version [[NEXT_RELEASE]]*.
        -: 3972:
        -: 3973:**Example**
        -: 3974:
        -: 3975:[doctest]: # (test="compile")
        -: 3976:
        -: 3977:```c
        -: 3978:#include "jerryscript.h"
        -: 3979:
        -: 3980:static void
    #####: 3981:vm_throw_callback (const jerry_value_t error_value, /**< captured error */
        -: 3982:                   void *user_p) /**< user pointer */
        -: 3983:{
        -: 3984:  (void) error_value;
        -: 3985:
        -: 3986:  /* Counts the number of throws. */
    #####: 3987:  int *counter_p = (int *) user_p;
    #####: 3988:  (*counter_p)++;
    #####: 3989:}
        -: 3990:
        -: 3991:int
    #####: 3992:main (void)
        -: 3993:{
    #####: 3994:  jerry_init (JERRY_INIT_EMPTY);
        -: 3995:
    #####: 3996:  int counter = 0;
    #####: 3997:  jerry_set_vm_throw_callback (vm_throw_callback, &counter);
        -: 3998:
    #####: 3999:  const jerry_char_t script[] = "try { throw new Error('1') } catch (e) { throw new Error('2') }";
        -: 4000:
    #####: 4001:  jerry_release_value (jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS));
        -: 4002:
        -: 4003:  /* The counter contains 2. */
        -: 4004:
    #####: 4005:  jerry_cleanup ();
        -: 4006:  return 0;
        -: 4007:}
        -: 4008:```
        -: 4009:
        -: 4010:**See also**
        -: 4011:
        -: 4012:- [jerry_vm_throw_callback_t](#jerry_vm_throw_callback_t)
        -: 4013:- [jerry_error_is_throw_captured](#jerry_error_is_throw_captured)
        -: 4014:- [jerry_error_set_throw_capture](#jerry_error_set_throw_capture)
        -: 4015:
        -: 4016:## jerry_error_is_throw_captured
        -: 4017:
        -: 4018:**Summary**
        -: 4019:
        -: 4020:Checks whether the callback set by [jerry_set_vm_throw_callback](#jerry_set_vm_throw_callback)
        -: 4021:captured the error.
        -: 4022:
        -: 4023:*Notes*:
        -: 4024:- This API depends on a build option (`JERRY_VM_THROW`) and can be checked
        -: 4025:  in runtime with the `JERRY_FEATURE_VM_THROW` feature enum value,
        -: 4026:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 4027:
        -: 4028:**Prototype**
        -: 4029:
        -: 4030:```c
        -: 4031:bool jerry_error_is_throw_captured (jerry_value_t value);
        -: 4032:```
        -: 4033:
        -: 4034:- `value` - api value (should be an error reference)
        -: 4035:- return value
        -: 4036:  - true, if the vm throw callback captured the error
        -: 4037:  - false, otherwise
        -: 4038:
        -: 4039:*New in version [[NEXT_RELEASE]]*.
        -: 4040:
        -: 4041:**Example**
        -: 4042:
        -: 4043:[doctest]: # (test="compile")
        -: 4044:
        -: 4045:```c
        -: 4046:#include "jerryscript.h"
        -: 4047:
        -: 4048:static void
    #####: 4049:vm_throw_callback (const jerry_value_t error_value, /**< captured error */
        -: 4050:                   void *user_p) /**< user pointer */
        -: 4051:{
        -: 4052:  (void) error_value;
        -: 4053:  (void) user_p;
    #####: 4054:}
        -: 4055:
        -: 4056:int
    #####: 4057:main (void)
        -: 4058:{
    #####: 4059:  jerry_init (JERRY_INIT_EMPTY);
        -: 4060:
    #####: 4061:  int counter = 0;
    #####: 4062:  jerry_set_vm_throw_callback (vm_throw_callback, &counter);
        -: 4063:
    #####: 4064:  const jerry_char_t script[] = "throw new Error()";
    #####: 4065:  jerry_value_t result_value = jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
        -: 4066:
    #####: 4067:  if (jerry_error_is_throw_captured (result_value))
        -: 4068:  {
        -: 4069:    /* Code enters here, because the vm_throw_callback function is called. */
        -: 4070:  }
        -: 4071:
    #####: 4072:  jerry_release_value (result_value);
        -: 4073:
    #####: 4074:  jerry_cleanup ();
        -: 4075:  return 0;
        -: 4076:}
        -: 4077:```
        -: 4078:
        -: 4079:**See also**
        -: 4080:
        -: 4081:- [jerry_set_vm_throw_callback](#jerry_set_vm_throw_callback)
        -: 4082:- [jerry_error_set_throw_capture](#jerry_error_set_throw_capture)
        -: 4083:
        -: 4084:## jerry_error_set_throw_capture
        -: 4085:
        -: 4086:**Summary**
        -: 4087:
        -: 4088:Sets whether the callback set by [jerry_set_vm_throw_callback](#jerry_set_vm_throw_callback)
        -: 4089:should capture the error or not.
        -: 4090:
        -: 4091:*Notes*:
        -: 4092:- This API depends on a build option (`JERRY_VM_THROW`) and can be checked
        -: 4093:  in runtime with the `JERRY_FEATURE_VM_THROW` feature enum value,
        -: 4094:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 4095:
        -: 4096:**Prototype**
        -: 4097:
        -: 4098:```c
        -: 4099:void jerry_error_set_throw_capture (jerry_value_t value, bool should_capture);
        -: 4100:```
        -: 4101:
        -: 4102:- `value` - api value (should be an error reference)
        -: 4103:- `should_capture` - callback should capture this error
        -: 4104:
        -: 4105:*New in version [[NEXT_RELEASE]]*.
        -: 4106:
        -: 4107:**Example**
        -: 4108:
        -: 4109:[doctest]: # (test="compile")
        -: 4110:
        -: 4111:```c
        -: 4112:#include "jerryscript.h"
        -: 4113:
        -: 4114:static void
    #####: 4115:vm_throw_callback (const jerry_value_t error_value, /**< captured error */
        -: 4116:                   void *user_p) /**< user pointer */
        -: 4117:{
        -: 4118:  (void) error_value;
        -: 4119:  (void) user_p;
    #####: 4120:}
        -: 4121:
        -: 4122:static jerry_value_t
    #####: 4123:throw_exception (const jerry_call_info_t *call_info_p, /**< call info */
        -: 4124:                 const jerry_value_t argv[], /**< argument list */
        -: 4125:                 const jerry_length_t argc) /**< argument count */
        -: 4126:{
        -: 4127:  (void) call_info_p;
        -: 4128:  (void) argv;
        -: 4129:  (void) argc;
        -: 4130:
    #####: 4131:  jerry_value_t result_value = jerry_create_error (JERRY_ERROR_COMMON, (const jerry_char_t *) "Error!");
        -: 4132:
        -: 4133:  /* Ignore calling the vm_throw_callback function. */
    #####: 4134:  jerry_error_set_throw_capture (result_value, false);
    #####: 4135:  return result_value;
        -: 4136:}
        -: 4137:
        -: 4138:int
    #####: 4139:main (void)
        -: 4140:{
    #####: 4141:  jerry_init (JERRY_INIT_EMPTY);
        -: 4142:
    #####: 4143:  int counter = 0;
    #####: 4144:  jerry_set_vm_throw_callback (vm_throw_callback, &counter);
        -: 4145:
    #####: 4146:  jerry_value_t global_object_value = jerry_get_global_object ();
    #####: 4147:  jerry_value_t function_value = jerry_create_external_function (throw_exception);
    #####: 4148:  jerry_value_t function_name_value = jerry_create_string ((const jerry_char_t *) "throw_exception");
        -: 4149:
    #####: 4150:  jerry_release_value (jerry_set_property (global_object_value, function_name_value, function_value));
    #####: 4151:  jerry_release_value (function_name_value);
    #####: 4152:  jerry_release_value (function_value);
    #####: 4153:  jerry_release_value (global_object_value);
        -: 4154:
    #####: 4155:  const jerry_char_t script[] = "throw_exception()";
    #####: 4156:  jerry_release_value (jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS));
        -: 4157:
    #####: 4158:  jerry_cleanup ();
        -: 4159:  return 0;
        -: 4160:}
        -: 4161:```
        -: 4162:
        -: 4163:**See also**
        -: 4164:
        -: 4165:- [jerry_set_vm_throw_callback](#jerry_set_vm_throw_callback)
        -: 4166:- [jerry_error_is_throw_captured](#jerry_error_is_throw_captured)
        -: 4167:
        -: 4168:
        -: 4169:# Getter functions of 'jerry_value_t'
        -: 4170:
        -: 4171:Get raw data from API values.
        -: 4172:
        -: 4173:## jerry_get_number_value
        -: 4174:
        -: 4175:**Summary**
        -: 4176:
        -: 4177:Gets the number value of the given `jerry_value_t` parameter as a raw double.
        -: 4178:
        -: 4179:If the argument passed is not a number `0.0` will be returned.
        -: 4180:
        -: 4181:**Prototype**
        -: 4182:
        -: 4183:```c
        -: 4184:double
        -: 4185:jerry_get_number_value (const jerry_value_t value);
        -: 4186:```
        -: 4187:
        -: 4188:- `value` - api value
        -: 4189:- return value
        -: 4190:  - the number value of the given `jerry_value_t` parameter as a raw double.
        -: 4191:  - `0.0` if the api value passed is not a number.
        -: 4192:
        -: 4193:**Example**
        -: 4194:
        -: 4195:```c
        -: 4196:{
        -: 4197:  jerry_value_t value;
        -: 4198:  ... // create or acquire value
        -: 4199:
        -: 4200:  if (jerry_value_is_number (value))
        -: 4201:  {
        -: 4202:    double raw_value = jerry_get_number_value (value);
        -: 4203:
        -: 4204:    ... // usage of raw value
        -: 4205:
        -: 4206:  }
        -: 4207:
        -: 4208:  jerry_release_value (value);
        -: 4209:}
        -: 4210:```
        -: 4211:
        -: 4212:**See also**
        -: 4213:
        -: 4214:- [jerry_value_is_number](#jerry_value_is_number)
        -: 4215:- [jerry_release_value](#jerry_release_value)
        -: 4216:
        -: 4217:
        -: 4218:# Functions for string values
        -: 4219:
        -: 4220:## jerry_get_string_size
        -: 4221:
        -: 4222:**Summary**
        -: 4223:
        -: 4224:Get the size of a string. Returns zero, if the value parameter is not a string.
        -: 4225:This is effectively the number of bytes required to store the string's characters.
        -: 4226:
        -: 4227:**Prototype**
        -: 4228:
        -: 4229:```c
        -: 4230:jerry_size_t
        -: 4231:jerry_get_string_size (const jerry_value_t value);
        -: 4232:```
        -: 4233:- `value` - api value
        -: 4234:- return value - number of bytes in the buffer needed to represent the string.
        -: 4235:
        -: 4236:**Example**
        -: 4237:
        -: 4238:```c
        -: 4239:{
        -: 4240:  const jerry_char_t char_array[] = "a string";
        -: 4241:  jerry_value_t string = jerry_create_string (char_array);
        -: 4242:
        -: 4243:  jerry_size_t string_size = jerry_get_string_size (string);
        -: 4244:
        -: 4245:  ... // usage of string_size
        -: 4246:
        -: 4247:  jerry_release_value (string);
        -: 4248:}
        -: 4249:```
        -: 4250:
        -: 4251:**See also**
        -: 4252:
        -: 4253:- [jerry_create_string](#jerry_create_string)
        -: 4254:- [jerry_get_string_length](#jerry_get_string_length)
        -: 4255:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 4256:
        -: 4257:
        -: 4258:## jerry_get_utf8_string_size
        -: 4259:
        -: 4260:**Summary**
        -: 4261:
        -: 4262:Get the size of an utf8-encoded string. Returns zero, if the value parameter is not a string.
        -: 4263:This is effectively the number of bytes required to store the utf8 encoded string's characters.
        -: 4264:
        -: 4265:*Note*: The difference from [jerry_get_string_size](#jerry_get_string_size) is that it returns with utf-8 string size
        -: 4266:instead of the cesu-8 string size.
        -: 4267:
        -: 4268:**Prototype**
        -: 4269:
        -: 4270:```c
        -: 4271:jerry_size_t
        -: 4272:jerry_get_utf8_string_size (const jerry_value_t value);
        -: 4273:```
        -: 4274:- `value` - api value
        -: 4275:- return value - number of bytes in the buffer needed to represent the utf8-encoded string.
        -: 4276:
        -: 4277:*New in version 2.0*.
        -: 4278:
        -: 4279:**Example**
        -: 4280:
        -: 4281:```c
        -: 4282:{
        -: 4283:  const jerry_char_t char_array[] = "a string";
        -: 4284:  jerry_value_t string = jerry_create_string (char_array);
        -: 4285:
        -: 4286:  jerry_size_t string_size = jerry_get_utf8_string_size (string);
        -: 4287:
        -: 4288:  ... // usage of string_size
        -: 4289:
        -: 4290:  jerry_release_value (string);
        -: 4291:}
        -: 4292:```
        -: 4293:
        -: 4294:**See also**
        -: 4295:
        -: 4296:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 4297:- [jerry_get_utf8_string_length](#jerry_get_utf8_string_length)
        -: 4298:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 4299:
        -: 4300:
        -: 4301:## jerry_get_string_length
        -: 4302:
        -: 4303:**Summary**
        -: 4304:
        -: 4305:Get the length of a string. Returns zero, if the value parameter is not a string.
        -: 4306:
        -: 4307:*Notes:*
        -: 4308:- The difference from [jerry_get_string_size](#jerry_get_string_size) is that it
        -: 4309:  returns the number of bytes used for the string.
        -: 4310:- This is **not** the number of bytes required to store the string.
        -: 4311:
        -: 4312:**Prototype**
        -: 4313:
        -: 4314:```c
        -: 4315:jerry_length_t
        -: 4316:jerry_get_string_length (const jerry_value_t value);
        -: 4317:```
        -: 4318:
        -: 4319:- `value` - api value
        -: 4320:- return value - number of characters in the string
        -: 4321:
        -: 4322:**Example**
        -: 4323:
        -: 4324:```c
        -: 4325:{
        -: 4326:  const jerry_char_t char_array[] = "a string";
        -: 4327:  jerry_value_t string = jerry_create_string (char_array);
        -: 4328:
        -: 4329:  jerry_length_t string_length = jerry_get_string_length (string);
        -: 4330:
        -: 4331:  ... // usage of string_length
        -: 4332:
        -: 4333:  jerry_release_value (string);
        -: 4334:}
        -: 4335:```
        -: 4336:
        -: 4337:**See also**
        -: 4338:
        -: 4339:- [jerry_create_string](#jerry_create_string)
        -: 4340:- [jerry_get_string_size](#jerry_get_string_size)
        -: 4341:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 4342:
        -: 4343:
        -: 4344:## jerry_get_utf8_string_length
        -: 4345:
        -: 4346:**Summary**
        -: 4347:
        -: 4348:Get the length of an UTF-8 encoded string. Returns zero, if the value parameter is not a string.
        -: 4349:
        -: 4350:*Notes*:
        -: 4351:- The difference from [jerry_get_string_length](#jerry_get_string_length) is that it
        -: 4352:  returns with utf-8 string length instead of the cesu-8 string length.
        -: 4353:- This is **not** the number of bytes required to store the string.
        -: 4354:
        -: 4355:**Prototype**
        -: 4356:
        -: 4357:```c
        -: 4358:jerry_length_t
        -: 4359:jerry_get_utf8_string_length (const jerry_value_t value);
        -: 4360:```
        -: 4361:
        -: 4362:- `value` - input string value
        -: 4363:- return value - number of characters in the string
        -: 4364:
        -: 4365:*New in version 2.0*.
        -: 4366:
        -: 4367:**Example**
        -: 4368:
        -: 4369:```c
        -: 4370:{
        -: 4371:  const jerry_char_t char_array[] = "a string";
        -: 4372:  jerry_value_t string = jerry_create_string_from_utf8 (char_array);
        -: 4373:
        -: 4374:  jerry_length_t string_length = jerry_get_utf8_string_length (string);
        -: 4375:
        -: 4376:  ... // usage of string_length
        -: 4377:
        -: 4378:  jerry_release_value (string);
        -: 4379:}
        -: 4380:```
        -: 4381:
        -: 4382:**See also**
        -: 4383:
        -: 4384:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 4385:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -: 4386:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 4387:
        -: 4388:
        -: 4389:## jerry_string_to_char_buffer
        -: 4390:
        -: 4391:**Summary**
        -: 4392:
        -: 4393:Copy the characters of a string into a specified cesu-8 buffer.
        -: 4394:The '\0' character could occur in the character buffer. Returns 0,
        -: 4395:if the value parameter is not a string or the buffer is not large
        -: 4396:enough for the whole string.
        -: 4397:
        -: 4398:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 4399:the number of valid bytes in the output buffer.
        -: 4400:
        -: 4401:*Note*: If the size of the string in jerry value is larger than the size of the
        -: 4402:target buffer, the copy will fail. To copy a substring the
        -: 4403:[jerry_substring_to_char_buffer](#jerry_substring_to_char_buffer) API function
        -: 4404:is recommended instead.
        -: 4405:
        -: 4406:
        -: 4407:**Prototype**
        -: 4408:
        -: 4409:```c
        -: 4410:jerry_size_t
        -: 4411:jerry_string_to_char_buffer (const jerry_value_t value,
        -: 4412:                             jerry_char_t *buffer_p,
        -: 4413:                             jerry_size_t buffer_size);
        -: 4414:```
        -: 4415:
        -: 4416:- `value` - input string value
        -: 4417:- `buffer_p` - pointer to output buffer
        -: 4418:- `buffer_size` - size of the buffer
        -: 4419:- return value - number of bytes, actually copied to the buffer
        -: 4420:
        -: 4421:**Example**
        -: 4422:
        -: 4423:[doctest]: # ()
        -: 4424:
        -: 4425:```c
        -: 4426:#include <stdio.h>
        -: 4427:#include <stdlib.h>
        -: 4428:#include "jerryscript.h"
        -: 4429:
        -: 4430:int
    #####: 4431:main (void)
        -: 4432:{
    #####: 4433:  jerry_init (JERRY_INIT_EMPTY);
        -: 4434:
        -: 4435:  jerry_value_t value;
        -: 4436:  // create or acquire value
    #####: 4437:  value = jerry_create_string ((const jerry_char_t *) "Demo string");
        -: 4438:
        -: 4439:  // Read the string into a byte buffer.
    #####: 4440:  jerry_size_t string_size = jerry_get_string_size (value);
    #####: 4441:  jerry_char_t *string_buffer_p = (jerry_char_t *) malloc (sizeof (jerry_char_t) * (string_size + 1));
        -: 4442:
    #####: 4443:  jerry_size_t copied_bytes = jerry_string_to_char_buffer (value, string_buffer_p, string_size);
    #####: 4444:  string_buffer_p[copied_bytes] = '\0';
        -: 4445:
    #####: 4446:  jerry_release_value (value);
        -: 4447:
    #####: 4448:  jerry_cleanup ();
        -: 4449:
    #####: 4450:  printf ("Test string: %s\n", string_buffer_p);
    #####: 4451:  free (string_buffer_p);
        -: 4452:
        -: 4453:  return 0;
        -: 4454:}
        -: 4455:```
        -: 4456:
        -: 4457:**See also**
        -: 4458:
        -: 4459:- [jerry_create_string](#jerry_create_string)
        -: 4460:- [jerry_get_string_size](#jerry_get_string_size)
        -: 4461:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 4462:- [jerry_substring_to_char_buffer](#jerry_substring_to_char_buffer)
        -: 4463:
        -: 4464:
        -: 4465:## jerry_string_to_utf8_char_buffer
        -: 4466:
        -: 4467:**Summary**
        -: 4468:
        -: 4469:Copy the characters of a string into a specified utf-8 buffer.
        -: 4470:The '\0' character could occur in character buffer. Returns 0,
        -: 4471:if the value parameter is not a string or the buffer is not
        -: 4472:large enough for the whole string.
        -: 4473:
        -: 4474:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 4475:the number of valid bytes in the output buffer.
        -: 4476:
        -: 4477:*Note*: If the size of the string in jerry value is larger than the size of the
        -: 4478:target buffer, the copy will fail. To copy a substring the
        -: 4479:[jerry_substring_to_utf8_char_buffer](#jerry_substring_to_utf8_char_buffer)
        -: 4480:API function is recommended instead.
        -: 4481:
        -: 4482:**Prototype**
        -: 4483:
        -: 4484:```c
        -: 4485:jerry_size_t
        -: 4486:jerry_string_to_utf8_char_buffer (const jerry_value_t value,
        -: 4487:                                  jerry_char_t *buffer_p,
        -: 4488:                                  jerry_size_t buffer_size);
        -: 4489:```
        -: 4490:
        -: 4491:- `value` - input string value
        -: 4492:- `buffer_p` - pointer to output buffer
        -: 4493:- `buffer_size` - size of the buffer
        -: 4494:- return value - number of bytes, actually copied to the buffer
        -: 4495:
        -: 4496:*New in version 2.0*.
        -: 4497:
        -: 4498:**Example**
        -: 4499:
        -: 4500:```c
        -: 4501:{
        -: 4502:  jerry_value_t value;
        -: 4503:  ... // create or acquire value
        -: 4504:
        -: 4505:  jerry_size_t req_sz = jerry_get_utf8_string_size (value);
        -: 4506:  jerry_char_t str_buf_p[req_sz];
        -: 4507:
        -: 4508:  jerry_size_t bytes_copied = jerry_string_to_utf8_char_buffer (value, str_buf_p, req_sz);
        -: 4509:
        -: 4510:  jerry_release_value (value);
        -: 4511:}
        -: 4512:```
        -: 4513:
        -: 4514:**See also**
        -: 4515:
        -: 4516:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 4517:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -: 4518:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 4519:- [jerry_substring_to_utf8_char_buffer](#jerry_substring_to_utf8_char_buffer)
        -: 4520:
        -: 4521:
        -: 4522:## jerry_substring_to_char_buffer
        -: 4523:
        -: 4524:**Summary**
        -: 4525:
        -: 4526:Copy the characters of a cesu-8 encoded substring into a specified buffer.
        -: 4527:The '\0' character could occur in character buffer. Returns 0, if the value
        -: 4528:parameter is not a string. It will extract the substring between the
        -: 4529:specified start position and the end position (or the end of the string,
        -: 4530:whichever comes first).
        -: 4531:
        -: 4532:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 4533:the number of valid bytes in the output buffer.
        -: 4534:
        -: 4535:**Prototype**
        -: 4536:
        -: 4537:```c
        -: 4538:jerry_size_t
        -: 4539:jerry_substring_to_char_buffer (const jerry_value_t value,
        -: 4540:                                jerry_length_t start_pos,
        -: 4541:                                jerry_length_t end_pos,
        -: 4542:                                jerry_char_t *buffer_p,
        -: 4543:                                jerry_size_t buffer_size);
        -: 4544:```
        -: 4545:
        -: 4546:- `value` - input string value
        -: 4547:- `start_pos` - position of the first character
        -: 4548:- `end_pos` - position of the last character
        -: 4549:- `buffer_p` - pointer to output buffer
        -: 4550:- `buffer_size` - size of the buffer
        -: 4551:- return value - number of bytes, actually copied to the buffer
        -: 4552:
        -: 4553:*New in version 2.0*.
        -: 4554:
        -: 4555:**Example**
        -: 4556:
        -: 4557:```c
        -: 4558:{
        -: 4559:  jerry_value_t value;
        -: 4560:  ... // create or acquire value
        -: 4561:
        -: 4562:  jerry_size_t req_sz = jerry_get_string_size (value);
        -: 4563:  jerry_char_t str_buf_p[req_sz];
        -: 4564:  jerry_length_t start_pos = 0;
        -: 4565:  jerry_length_t end_pos = jerry_get_string_length (value);
        -: 4566:
        -: 4567:  jerry_substring_to_char_buffer (value, start_pos, end_pos, str_buf_p, req_sz);
        -: 4568:
        -: 4569:  jerry_release_value (value);
        -: 4570:}
        -: 4571:```
        -: 4572:
        -: 4573:**See also**
        -: 4574:
        -: 4575:- [jerry_create_string](#jerry_create_string)
        -: 4576:- [jerry_get_string_size](#jerry_get_string_size)
        -: 4577:- [jerry_get_string_length](#jerry_get_string_length)
        -: 4578:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 4579:
        -: 4580:
        -: 4581:## jerry_substring_to_utf8_char_buffer
        -: 4582:
        -: 4583:**Summary**
        -: 4584:
        -: 4585:Copy the characters of an utf-8 encoded substring into a specified buffer.
        -: 4586:The '\0' character could occur in character buffer. Returns 0, if the value
        -: 4587:parameter is not a string. It will extract the substring between the specified
        -: 4588:start position and the end position (or the end of the string, whichever
        -: 4589:comes first).
        -: 4590:
        -: 4591:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 4592:the number of valid bytes in the output buffer.
        -: 4593:
        -: 4594:**Prototype**
        -: 4595:
        -: 4596:```c
        -: 4597:jerry_size_t
        -: 4598:jerry_substring_to_utf8_char_buffer (const jerry_value_t value,
        -: 4599:                                     jerry_length_t start_pos,
        -: 4600:                                     jerry_length_t end_pos,
        -: 4601:                                     jerry_char_t *buffer_p,
        -: 4602:                                     jerry_size_t buffer_size);
        -: 4603:```
        -: 4604:
        -: 4605:- `value` - input string value
        -: 4606:- `start_pos` - position of the first character
        -: 4607:- `end_pos` - position of the last character
        -: 4608:- `buffer_p` - pointer to output buffer
        -: 4609:- `buffer_size` - size of the buffer
        -: 4610:- return value - number of bytes, actually copied to the buffer
        -: 4611:
        -: 4612:*New in version 2.0*.
        -: 4613:
        -: 4614:**Example**
        -: 4615:
        -: 4616:```c
        -: 4617:{
        -: 4618:  jerry_value_t value;
        -: 4619:  ... // create or acquire value
        -: 4620:
        -: 4621:  jerry_size_t req_sz = jerry_get_utf8_string_size (value);
        -: 4622:  jerry_char_t str_buf_p[req_sz];
        -: 4623:  jerry_length_t start_pos = 0;
        -: 4624:  jerry_length_t end_pos = jerry_get_utf8_string_length (value);
        -: 4625:
        -: 4626:  jerry_substring_to_utf8_char_buffer (value, start_pos, end_pos, str_buf_p, req_sz);
        -: 4627:
        -: 4628:  jerry_release_value (value);
        -: 4629:}
        -: 4630:```
        -: 4631:
        -: 4632:**See also**
        -: 4633:
        -: 4634:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 4635:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -: 4636:- [jerry_get_utf8_string_length](#jerry_get_utf8_string_length)
        -: 4637:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 4638:
        -: 4639:
        -: 4640:# jerry_string_set_external_free_callback
        -: 4641:
        -: 4642:**Summary**
        -: 4643:
        -: 4644:Sets the global callback which is called when the string data of an external
        -: 4645:string is no longer used. It is recommended to set this function before the
        -: 4646:first external string is created.
        -: 4647:
        -: 4648:*Note*:
        -: 4649:  - When the callback is NULL, no function is called when an external string is freed.
        -: 4650:  - In some cases (e.g. when the string is also a magic string registered by
        -: 4651:    [jerry_register_magic_strings](#jerry_register_magic_strings)), the callback
        -: 4652:    is called when the string is created, not when it is released.
        -: 4653:
        -: 4654:**Prototype**
        -: 4655:
        -: 4656:```c
        -: 4657:void jerry_string_set_external_free_callback (jerry_external_string_free_callback_t callback_p);
        -: 4658:```
        -: 4659:
        -: 4660:- `callback_p` - callback which is called when an external string is freed.
        -: 4661:
        -: 4662:*New in version [[NEXT_RELEASE]]*.
        -: 4663:
        -: 4664:**Example**
        -: 4665:
        -: 4666:[doctest]: # ()
        -: 4667:
        -: 4668:```c
        -: 4669:#include "jerryscript.h"
        -: 4670:#include <stdio.h>
        -: 4671:
        -: 4672:static void
    #####: 4673:external_string_free_callback (jerry_char_t *string_p, /**< string pointer */
        -: 4674:                               jerry_size_t string_size, /**< size of the string */
        -: 4675:                               void *user_p) /**< user pointer */
        -: 4676:{
    #####: 4677:  printf ("External string is freed!\n");
    #####: 4678:}
        -: 4679:
        -: 4680:int
    #####: 4681:main (void)
        -: 4682:{
    #####: 4683:  jerry_init (JERRY_INIT_EMPTY);
        -: 4684:
    #####: 4685:  jerry_string_set_external_free_callback (external_string_free_callback);
        -: 4686:
    #####: 4687:  const char *string_p = "This is a long external string, should not be duplicated!";
    #####: 4688:  jerry_value_t external_string = jerry_create_external_string ((jerry_char_t *) string_p, NULL);
        -: 4689:  /* The external_string_free_callback is called. */
    #####: 4690:  jerry_release_value (external_string);
        -: 4691:
    #####: 4692:  jerry_cleanup ();
        -: 4693:  return 0;
        -: 4694:}
        -: 4695:```
        -: 4696:
        -: 4697:**See also**
        -: 4698:
        -: 4699:- [jerry_external_string_free_callback_t](#jerry_external_string_free_callback_t)
        -: 4700:- [jerry_string_get_external_user_pointer](#jerry_string_get_external_user_pointer)
        -: 4701:- [jerry_create_external_string](#jerry_create_external_string)
        -: 4702:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -: 4703:
        -: 4704:
        -: 4705:# jerry_string_get_external_user_pointer
        -: 4706:
        -: 4707:**Summary**
        -: 4708:
        -: 4709:Returns the user pointer assigned to an external string.
        -: 4710:
        -: 4711:*Note*:
        -: 4712:  - In some cases (e.g. when the string is also a magic string registered by
        -: 4713:    [jerry_register_magic_strings](#jerry_register_magic_strings)), the
        -: 4714:    string is a normal string without a user pointer even if it is created
        -: 4715:    by [jerry_create_external_string](#jerry_create_external_string).
        -: 4716:
        -: 4717:**Prototype**
        -: 4718:
        -: 4719:```c
        -: 4720:void *jerry_string_get_external_user_pointer (const jerry_value_t value,
        -: 4721:                                              bool *is_external);
        -: 4722:```
        -: 4723:
        -: 4724:- `value` - string value.
        -: 4725:- `is_external` - when `is_external` is non-NULL, the referenced boolean value is set
        -: 4726:                  to true, if `value` is an external string, and set to false otherwise
        -: 4727:- return value
        -: 4728:  - user pointer - if `value` argument is an external string
        -: 4729:  - NULL - otherwise
        -: 4730:
        -: 4731:*New in version [[NEXT_RELEASE]]*.
        -: 4732:
        -: 4733:**Example**
        -: 4734:
        -: 4735:[doctest]: # ()
        -: 4736:
        -: 4737:```c
        -: 4738:#include "jerryscript.h"
        -: 4739:#include <stdio.h>
        -: 4740:
        -: 4741:static int user_value = 1;
        -: 4742:
        -: 4743:int
    #####: 4744:main (void)
        -: 4745:{
    #####: 4746:  jerry_init (JERRY_INIT_EMPTY);
        -: 4747:
    #####: 4748:  const char *string_p = "This is a long external string, should not be duplicated!";
        -: 4749:
    #####: 4750:  jerry_value_t external_string = jerry_create_external_string ((jerry_char_t *) string_p, (void *) &user_value);
        -: 4751:
        -: 4752:  bool is_external;
    #####: 4753:  void *user_p = jerry_string_get_external_user_pointer (external_string, &is_external);
        -: 4754:
    #####: 4755:  if (is_external)
        -: 4756:  {
        -: 4757:    /* Prints the address of user_value. */
        -: 4758:    printf("User pointer of an external string: %p\n", user_p);
        -: 4759:  }
        -: 4760:
    #####: 4761:  jerry_release_value (external_string);
        -: 4762:
    #####: 4763:  jerry_cleanup ();
        -: 4764:  return 0;
        -: 4765:}
        -: 4766:```
        -: 4767:
        -: 4768:**See also**
        -: 4769:
        -: 4770:- [jerry_string_set_external_string_free_callback](#jerry_string_set_external_string_free_callback)
        -: 4771:- [jerry_create_external_string](#jerry_create_external_string)
        -: 4772:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -: 4773:
        -: 4774:
        -: 4775:# Functions for array object values
        -: 4776:
        -: 4777:## jerry_get_array_length
        -: 4778:
        -: 4779:**Summary**
        -: 4780:
        -: 4781:Get length of an array object. Returns zero, if the given parameter is not an array object.
        -: 4782:
        -: 4783:**Prototype**
        -: 4784:
        -: 4785:```c
        -: 4786:uint32_t
        -: 4787:jerry_get_array_length (const jerry_value_t value);
        -: 4788:```
        -: 4789:
        -: 4790:- `value` - input array value
        -: 4791:- return value - length of the given array
        -: 4792:
        -: 4793:**Example**
        -: 4794:
        -: 4795:```c
        -: 4796:{
        -: 4797:  jerry_value_t value;
        -: 4798:  ... // create or acquire value
        -: 4799:
        -: 4800:  uint32_t len = jerry_get_array_length (value);
        -: 4801:
        -: 4802:  jerry_release_value (value);
        -: 4803:}
        -: 4804:```
        -: 4805:
        -: 4806:**See also**
        -: 4807:
        -: 4808:- [jerry_create_array](#jerry_create_array)
        -: 4809:
        -: 4810:
        -: 4811:# Converters of 'jerry_value_t'
        -: 4812:
        -: 4813:Functions for converting API values to another value type.
        -: 4814:
        -: 4815:## jerry_value_to_boolean
        -: 4816:
        -: 4817:**Summary**
        -: 4818:
        -: 4819:Call ToBoolean operation on the api value.
        -: 4820:
        -: 4821:**Prototype**
        -: 4822:
        -: 4823:```c
        -: 4824:bool
        -: 4825:jerry_value_to_boolean (const jerry_value_t value);
        -: 4826:```
        -: 4827:
        -: 4828:- `value` - api value
        -: 4829:- return value
        -: 4830:  - true, if the logical value is true
        -: 4831:  - false, otherwise
        -: 4832:
        -: 4833:**Example**
        -: 4834:
        -: 4835:```c
        -: 4836:{
        -: 4837:  jerry_value_t value;
        -: 4838:  ... // create or acquire value
        -: 4839:
        -: 4840:  bool b = jerry_value_to_boolean (value);
        -: 4841:
        -: 4842:  jerry_release_value (value);
        -: 4843:}
        -: 4844:
        -: 4845:```
        -: 4846:
        -: 4847:**See also**
        -: 4848:
        -: 4849:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4850:
        -: 4851:## jerry_value_to_number
        -: 4852:
        -: 4853:**Summary**
        -: 4854:
        -: 4855:Call ToNumber operation on the api value.
        -: 4856:
        -: 4857:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4858:is no longer needed.
        -: 4859:
        -: 4860:**Prototype**
        -: 4861:
        -: 4862:```c
        -: 4863:jerry_value_t
        -: 4864:jerry_value_to_number (const jerry_value_t value);
        -: 4865:```
        -: 4866:
        -: 4867:- `value` - api value
        -: 4868:- return value
        -: 4869:  - converted number value, if success
        -: 4870:  - thrown error, otherwise
        -: 4871:
        -: 4872:**Example**
        -: 4873:
        -: 4874:```c
        -: 4875:{
        -: 4876:  jerry_value_t value;
        -: 4877:  ... // create or acquire value
        -: 4878:
        -: 4879:  jerry_value_t number_value = jerry_value_to_number (value);
        -: 4880:
        -: 4881:  jerry_release_value (number_value);
        -: 4882:  jerry_release_value (value);
        -: 4883:}
        -: 4884:
        -: 4885:```
        -: 4886:
        -: 4887:**See also**
        -: 4888:
        -: 4889:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4890:
        -: 4891:## jerry_value_to_object
        -: 4892:
        -: 4893:**Summary**
        -: 4894:
        -: 4895:Call ToObject operation on the api value.
        -: 4896:
        -: 4897:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4898:is no longer needed.
        -: 4899:
        -: 4900:**Prototype**
        -: 4901:
        -: 4902:```c
        -: 4903:jerry_value_t
        -: 4904:jerry_value_to_object (const jerry_value_t value);
        -: 4905:```
        -: 4906:
        -: 4907:- `value` - api value
        -: 4908:- return value
        -: 4909:  - converted object value, if success
        -: 4910:  - thrown error, otherwise
        -: 4911:
        -: 4912:**Example**
        -: 4913:
        -: 4914:```c
        -: 4915:{
        -: 4916:  jerry_value_t value;
        -: 4917:  ... // create or acquire value
        -: 4918:
        -: 4919:  jerry_value_t object_value = jerry_value_to_object (value);
        -: 4920:
        -: 4921:  jerry_release_value (object_value);
        -: 4922:  jerry_release_value (value);
        -: 4923:}
        -: 4924:```
        -: 4925:
        -: 4926:**See also**
        -: 4927:
        -: 4928:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4929:
        -: 4930:## jerry_value_to_primitive
        -: 4931:
        -: 4932:**Summary**
        -: 4933:
        -: 4934:Call ToPrimitive operation on the api value.
        -: 4935:
        -: 4936:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4937:is no longer needed.
        -: 4938:
        -: 4939:**Prototype**
        -: 4940:
        -: 4941:```c
        -: 4942:jerry_value_t
        -: 4943:jerry_value_to_primitive (const jerry_value_t value);
        -: 4944:```
        -: 4945:
        -: 4946:- `value` - api value
        -: 4947:- return value
        -: 4948:  - converted primitive value, if success
        -: 4949:  - thrown error, otherwise
        -: 4950:
        -: 4951:**Example**
        -: 4952:
        -: 4953:```c
        -: 4954:{
        -: 4955:  jerry_value_t value;
        -: 4956:  ... // create or acquire value
        -: 4957:
        -: 4958:  jerry_value_t prim_value = jerry_value_to_primitive (value);
        -: 4959:
        -: 4960:  jerry_release_value (prim_value);
        -: 4961:  jerry_release_value (value);
        -: 4962:}
        -: 4963:```
        -: 4964:
        -: 4965:**See also**
        -: 4966:
        -: 4967:- [jerry_value_t](#jerry_value_t)
        -: 4968:
        -: 4969:## jerry_value_to_string
        -: 4970:
        -: 4971:**Summary**
        -: 4972:
        -: 4973:Call the ToString ecma builtin operation on the api value.
        -: 4974:
        -: 4975:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4976:is no longer needed.
        -: 4977:
        -: 4978:**Prototype**
        -: 4979:
        -: 4980:```c
        -: 4981:jerry_value_t
        -: 4982:jerry_value_to_string (const jerry_value_t value);
        -: 4983:```
        -: 4984:
        -: 4985:- `value` - api value
        -: 4986:- return value
        -: 4987:  - converted string value, if success
        -: 4988:  - thrown error, otherwise
        -: 4989:
        -: 4990:**Example**
        -: 4991:
        -: 4992:```c
        -: 4993:{
        -: 4994:  jerry_value_t value;
        -: 4995:  ... // create or acquire value
        -: 4996:
        -: 4997:  jerry_value_t string_value = jerry_value_to_string (value);
        -: 4998:
        -: 4999:  jerry_release_value (string_value);
        -: 5000:  jerry_release_value (value);
        -: 5001:}
        -: 5002:```
        -: 5003:
        -: 5004:**See also**
        -: 5005:
        -: 5006:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 5007:
        -: 5008:
        -: 5009:## jerry_value_to_bigint
        -: 5010:
        -: 5011:**Summary**
        -: 5012:
        -: 5013:Call the BigInt constructor ecma builtin operation on the api value.
        -: 5014:
        -: 5015:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5016:is no longer needed.
        -: 5017:
        -: 5018:**Prototype**
        -: 5019:
        -: 5020:```c
        -: 5021:jerry_value_t
        -: 5022:jerry_value_to_bigint (const jerry_value_t value);
        -: 5023:```
        -: 5024:
        -: 5025:- `value` - api value
        -: 5026:- return value
        -: 5027:  - converted BigInt value, if success
        -: 5028:  - thrown error, otherwise
        -: 5029:
        -: 5030:*New in version 2.4*.
        -: 5031:
        -: 5032:**Example**
        -: 5033:
        -: 5034:```c
        -: 5035:{
        -: 5036:  jerry_value_t value;
        -: 5037:  ... // create or acquire value
        -: 5038:
        -: 5039:  jerry_value_t bigint_value = jerry_value_to_bigint (value);
        -: 5040:
        -: 5041:  jerry_release_value (bigint_value);
        -: 5042:  jerry_release_value (value);
        -: 5043:}
        -: 5044:```
        -: 5045:
        -: 5046:**See also**
        -: 5047:
        -: 5048:- [jerry_release_value](#jerry_release_value)
        -: 5049:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 5050:- [jerry_get_bigint_digits](#jerry_get_bigint_digits)
        -: 5051:
        -: 5052:## jerry_value_as_integer
        -: 5053:
        -: 5054:**Summary**
        -: 5055:
        -: 5056:Convert any number to integer number. Returns 0 if value is not number.
        -: 5057:Based on ECMA 262 v11 7.1.5
        -: 5058:
        -: 5059:**Prototype**
        -: 5060:
        -: 5061:```c
        -: 5062:double
        -: 5063:jerry_value_as_integer (const jerry_value_t value);
        -: 5064:```
        -: 5065:
        -: 5066:- `value` - api value
        -: 5067:- return
        -: 5068:  - 0, if value is not a number
        -: 5069:  - integer representation of the number, otherwise
        -: 5070:
        -: 5071:*New in version 2.4*.
        -: 5072:
        -: 5073:**Example**
        -: 5074:
        -: 5075:```c
        -: 5076:{
        -: 5077:  jerry_value_t number_val = jerry_create_number (123321);
        -: 5078:  double number = jerry_value_as_integer (number_val);
        -: 5079:  jerry_release_value (number_val);
        -: 5080:}
        -: 5081:```
        -: 5082:
        -: 5083:## jerry_value_as_int32
        -: 5084:
        -: 5085:**Summary**
        -: 5086:
        -: 5087:Convert any number to int32 number. Returns 0 if value is not number.
        -: 5088:Based on ECMA 262 v11 7.1.6
        -: 5089:
        -: 5090:**Prototype**
        -: 5091:
        -: 5092:```c
        -: 5093:int32_t
        -: 5094:jerry_value_as_int32 (const jerry_value_t value);
        -: 5095:```
        -: 5096:
        -: 5097:- `value` - api value
        -: 5098:- return
        -: 5099:  - 0, if value is not a number
        -: 5100:  - int32 representation of the number, otherwise
        -: 5101:
        -: 5102:*New in version 2.4*.
        -: 5103:
        -: 5104:**Example**
        -: 5105:
        -: 5106:```c
        -: 5107:{
        -: 5108:  jerry_value_t number_val = jerry_create_number (123321);
        -: 5109:  int32_t number = jerry_value_as_int32 (number_val);
        -: 5110:  jerry_release_value (number_val);
        -: 5111:}
        -: 5112:```
        -: 5113:
        -: 5114:## jerry_value_as_uint32
        -: 5115:
        -: 5116:**Summary**
        -: 5117:
        -: 5118:Convert any number to uint32 number. Returns 0 if value is not number.
        -: 5119:Based on ECMA 262 v11 7.1.7
        -: 5120:
        -: 5121:**Prototype**
        -: 5122:
        -: 5123:```c
        -: 5124:uint32_t
        -: 5125:jerry_value_as_uint32 (const jerry_value_t value);
        -: 5126:```
        -: 5127:
        -: 5128:- `value` - api value
        -: 5129:- return
        -: 5130:  - 0, if value is not a number
        -: 5131:  - uint32 representation of the number, otherwise
        -: 5132:
        -: 5133:*New in version 2.4*.
        -: 5134:
        -: 5135:**Example**
        -: 5136:
        -: 5137:```c
        -: 5138:{
        -: 5139:  jerry_value_t number_val = jerry_create_number (123321);
        -: 5140:  uint32_t number = jerry_value_as_uint32 (number_val);
        -: 5141:  jerry_release_value (number_val);
        -: 5142:}
        -: 5143:```
        -: 5144:
        -: 5145:# Functions for module objects
        -: 5146:
        -: 5147:These APIs all depend on module support.
        -: 5148:
        -: 5149:## jerry_module_link
        -: 5150:
        -: 5151:**Summary**
        -: 5152:
        -: 5153:Link modules to their dependencies. The dependencies are resolved by a user callback.
        -: 5154:
        -: 5155:*Notes*:
        -: 5156:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5157:  is no longer needed.
        -: 5158:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5159:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5160:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5161:
        -: 5162:**Prototype**
        -: 5163:
        -: 5164:```c
        -: 5165:jerry_value_t jerry_module_link (const jerry_value_t module_val,
        -: 5166:                                 jerry_module_resolve_callback_t callback, void *user_p)
        -: 5167:```
        -: 5168:
        -: 5169:- `module_val` - module object in unlinked state
        -: 5170:- `callback` - user callback which is called to resolve dependencies,
        -: 5171:               uses `jerry_port_module_resolve` when NULL is passed
        -: 5172:- `user_p` - user pointer passed to the callback
        -: 5173:- return
        -: 5174:  - true - if linking is successful
        -: 5175:  - error - otherwise
        -: 5176:
        -: 5177:*New in version [[NEXT_RELEASE]]*.
        -: 5178:
        -: 5179:**Example**
        -: 5180:
        -: 5181:[doctest]: # (test="compile")
        -: 5182:
        -: 5183:```c
        -: 5184:#include <jerryscript.h>
        -: 5185:
        -: 5186:static jerry_value_t
    #####: 5187:module_resolve_callback (const jerry_value_t specifier,
        -: 5188:                         const jerry_value_t referrer,
        -: 5189:                         void *user_data_p)
        -: 5190:{
        -: 5191:  /* In this case, the specifier contains 'b.mjs', and the referrer is the module
        -: 5192:   * created in the main() function below. Normally the specifier string should be
        -: 5193:   * extended to a full file system path, and it should be checked whether a module
        -: 5194:   * corresponding to this path has been loaded already. For simplicity, this function
        -: 5195:   * returns with a new module. */
        -: 5196:
    #####: 5197:  const jerry_char_t script[] = "export var a = 5";
        -: 5198:
        -: 5199:  jerry_parse_options_t parse_options;
    #####: 5200:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5201:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "b.mjs");
        -: 5202:
    #####: 5203:  jerry_value_t result = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5204:  jerry_release_value (parse_options.resource_name);
    #####: 5205:  return result;
        -: 5206:} /* module_resolve_callback */
        -: 5207:
        -: 5208:int
    #####: 5209:main (void)
        -: 5210:{
    #####: 5211:  jerry_init (JERRY_INIT_EMPTY);
        -: 5212:
    #####: 5213:  const jerry_char_t script[] = "import a from 'b.mjs'";
        -: 5214:
        -: 5215:  jerry_parse_options_t parse_options;
    #####: 5216:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5217:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5218:
    #####: 5219:  jerry_value_t ret_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5220:  jerry_release_value (parse_options.resource_name);
        -: 5221:
    #####: 5222:  jerry_module_link (ret_value, module_resolve_callback, NULL);
        -: 5223:
    #####: 5224:  jerry_release_value (ret_value);
        -: 5225:
    #####: 5226:  jerry_cleanup ();
        -: 5227:  return 0;
        -: 5228:}
        -: 5229:```
        -: 5230:
        -: 5231:**See also**
        -: 5232:- [jerry_module_resolve_callback_t](#jerry_module_resolve_callback_t)
        -: 5233:
        -: 5234:## jerry_module_evaluate
        -: 5235:
        -: 5236:Evaluate a module and its dependencies. The module must be in linked state.
        -: 5237:
        -: 5238:*Notes*:
        -: 5239:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5240:  when it is no longer needed.
        -: 5241:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5242:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5243:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5244:
        -: 5245:**Prototype**
        -: 5246:
        -: 5247:```c
        -: 5248:jerry_value_t jerry_module_evaluate (const jerry_value_t module_val);
        -: 5249:```
        -: 5250:
        -: 5251:- `module_val` - module object
        -: 5252:- return
        -: 5253:  - result of module bytecode execution - if evaluation was successful
        -: 5254:  - error, otherwise
        -: 5255:
        -: 5256:*New in version [[NEXT_RELEASE]]*.
        -: 5257:
        -: 5258:**Example**
        -: 5259:
        -: 5260:[doctest]: # (test="compile")
        -: 5261:
        -: 5262:```c
        -: 5263:#include <jerryscript.h>
        -: 5264:#include <stdio.h>
        -: 5265:
        -: 5266:int
    #####: 5267:main (void)
        -: 5268:{
    #####: 5269:  jerry_init (JERRY_INIT_EMPTY);
        -: 5270:
    #####: 5271:  const jerry_char_t script[] = "export var a = 6";
        -: 5272:
        -: 5273:  jerry_parse_options_t parse_options;
    #####: 5274:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5275:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5276:
    #####: 5277:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5278:  jerry_release_value (parse_options.resource_name);
        -: 5279:
    #####: 5280:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
    #####: 5281:  jerry_release_value (jerry_module_evaluate (module_value));
        -: 5282:
    #####: 5283:  jerry_release_value (module_value);
        -: 5284:
    #####: 5285:  jerry_cleanup ();
        -: 5286:  return 0;
        -: 5287:}
        -: 5288:```
        -: 5289:
        -: 5290:**See also**
        -: 5291:
        -: 5292:- [jerry_module_link](#jerry_module_link)
        -: 5293:
        -: 5294:## jerry_module_get_state
        -: 5295:
        -: 5296:**Summary**
        -: 5297:
        -: 5298:Returns the current status of a module. The available values
        -: 5299:are listed in [jerry_module_state_t](#jerry_module_state_t)
        -: 5300:
        -: 5301:*Notes*:
        -: 5302:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5303:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5304:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5305:
        -: 5306:**Prototype**
        -: 5307:
        -: 5308:```c
        -: 5309:jerry_module_state_t jerry_module_get_state (const jerry_value_t module_val);
        -: 5310:```
        -: 5311:
        -: 5312:- `module_val` - module object
        -: 5313:- return
        -: 5314:  - current status - if module_val is a module
        -: 5315:  - JERRY_MODULE_STATE_INVALID - otherwise
        -: 5316:
        -: 5317:*New in version [[NEXT_RELEASE]]*.
        -: 5318:
        -: 5319:**Example**
        -: 5320:
        -: 5321:[doctest]: # (test="compile")
        -: 5322:
        -: 5323:```c
        -: 5324:#include <jerryscript.h>
        -: 5325:#include <stdio.h>
        -: 5326:
        -: 5327:int
    #####: 5328:main (void)
        -: 5329:{
    #####: 5330:  jerry_init (JERRY_INIT_EMPTY);
        -: 5331:
    #####: 5332:  const jerry_char_t script[] = "import a from 'b.mjs'";
        -: 5333:
        -: 5334:  jerry_parse_options_t parse_options;
    #####: 5335:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5336:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5337:
    #####: 5338:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5339:  jerry_release_value (parse_options.resource_name);
        -: 5340:
    #####: 5341:  if (jerry_module_get_state (module_value) == JERRY_MODULE_STATE_UNLINKED)
        -: 5342:  {
        -: 5343:    printf ("Module parsing has been successful\n");
        -: 5344:  }
        -: 5345:
    #####: 5346:  jerry_release_value (module_value);
        -: 5347:
    #####: 5348:  jerry_cleanup ();
        -: 5349:  return 0;
        -: 5350:}
        -: 5351:```
        -: 5352:
        -: 5353:**See also**
        -: 5354:
        -: 5355:- [jerry_module_state_t](#jerry_module_state_t)
        -: 5356:
        -: 5357:## jerry_module_set_state_changed_callback
        -: 5358:
        -: 5359:**Summary**
        -: 5360:
        -: 5361:Sets a callback which is called after a module state is changed to linked, evaluated, or error.
        -: 5362:
        -: 5363:*Notes*:
        -: 5364:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5365:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5366:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5367:
        -: 5368:**Prototype**
        -: 5369:
        -: 5370:```c
        -: 5371:void jerry_module_set_state_changed_callback (jerry_module_state_changed_callback_t callback,
        -: 5372:                                              void *user_p);
        -: 5373:```
        -: 5374:
        -: 5375:- `callback` - callback, which is called after the state change.
        -: 5376:- `user_p` - pointer passed to the callback function.
        -: 5377:
        -: 5378:*New in version [[NEXT_RELEASE]]*.
        -: 5379:
        -: 5380:**Example**
        -: 5381:
        -: 5382:[doctest]: # (test="compile")
        -: 5383:
        -: 5384:```c
        -: 5385:#include <jerryscript.h>
        -: 5386:#include <stdio.h>
        -: 5387:
        -: 5388:static void
    #####: 5389:module_state_changed (jerry_module_state_t new_state, /**< new state of the module */
        -: 5390:                      const jerry_value_t module_val, /**< a module whose state is changed */
        -: 5391:                      const jerry_value_t value, /**< value argument */
        -: 5392:                      void *user_p) /**< user pointer */
        -: 5393:{
        -: 5394:  (void) module_val;
        -: 5395:  (void) value;
        -: 5396:  (void) user_p;
        -: 5397:
    #####: 5398:  if (new_state == JERRY_MODULE_STATE_LINKED)
        -: 5399:  {
        -: 5400:    printf ("A module is entered into linked state\n");
        -: 5401:  }
    #####: 5402:} /* module_state_changed */
        -: 5403:
        -: 5404:int
    #####: 5405:main (void)
        -: 5406:{
    #####: 5407:  jerry_init (JERRY_INIT_EMPTY);
        -: 5408:
    #####: 5409:  const jerry_char_t script[] = "12";
        -: 5410:
    #####: 5411:  jerry_module_set_state_changed_callback (module_state_changed, NULL);
        -: 5412:
        -: 5413:  jerry_parse_options_t parse_options;
    #####: 5414:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5415:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5416:
    #####: 5417:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5418:  jerry_release_value (parse_options.resource_name);
        -: 5419:
    #####: 5420:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
        -: 5421:
    #####: 5422:  jerry_release_value (module_value);
        -: 5423:
    #####: 5424:  jerry_cleanup ();
        -: 5425:  return 0;
        -: 5426:}
        -: 5427:```
        -: 5428:
        -: 5429:**See also**
        -: 5430:
        -: 5431:- [jerry_module_state_t](#jerry_module_state_t)
        -: 5432:- [jerry_module_state_changed_callback_t](#jerry_module_state_changed_callback_t)
        -: 5433:
        -: 5434:## jerry_module_set_import_meta_callback
        -: 5435:
        -: 5436:**Summary**
        -: 5437:
        -: 5438:Sets a callback which is called when an import.meta expression of a module is evaluated the first time.
        -: 5439:
        -: 5440:*Notes*:
        -: 5441:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5442:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5443:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5444:
        -: 5445:**Prototype**
        -: 5446:
        -: 5447:```c
        -: 5448:void jerry_module_set_import_meta_callback (jerry_module_import_meta_callback_t callback,
        -: 5449:                                            void *user_p);
        -: 5450:```
        -: 5451:
        -: 5452:- `callback` - callback, which is called when an import.meta
        -: 5453:               expression of a module is evaluated the first time
        -: 5454:- `user_p` - pointer passed to the callback function.
        -: 5455:
        -: 5456:*New in version [[NEXT_RELEASE]]*.
        -: 5457:
        -: 5458:**Example**
        -: 5459:
        -: 5460:[doctest]: # (test="compile")
        -: 5461:
        -: 5462:```c
        -: 5463:#include <jerryscript.h>
        -: 5464:#include <stdio.h>
        -: 5465:
        -: 5466:static void
    #####: 5467:module_import_meta_callback (const jerry_value_t module, /**< module */
        -: 5468:                             const jerry_value_t meta_object, /**< import.meta object */
        -: 5469:                             void *user_p) /**< user pointer */
        -: 5470:{
        -: 5471:  (void) user_p;
        -: 5472:
        -: 5473:  /* Create a property for the meta object */
    #####: 5474:  jerry_value_t property_name_value = jerry_create_string ((const jerry_char_t *) "prop");
    #####: 5475:  jerry_value_t property_value = jerry_create_string ((const jerry_char_t *) "prop");
    #####: 5476:  jerry_value_t result_value = jerry_set_property (meta_object, property_name_value, property_value);
    #####: 5477:  jerry_release_value (result_value);
    #####: 5478:  jerry_release_value (property_value);
    #####: 5479:  jerry_release_value (property_name_value);
    #####: 5480:} /* module_import_meta_callback */
        -: 5481:
        -: 5482:int
    #####: 5483:main (void)
        -: 5484:{
    #####: 5485:  jerry_init (JERRY_INIT_EMPTY);
        -: 5486:
    #####: 5487:  const jerry_char_t script[] = "import.meta";
        -: 5488:
    #####: 5489:  jerry_module_set_import_meta_callback (module_import_meta_callback, NULL);
        -: 5490:
        -: 5491:  jerry_parse_options_t parse_options;
    #####: 5492:  parse_options.options = JERRY_PARSE_MODULE;
        -: 5493:
    #####: 5494:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
        -: 5495:
    #####: 5496:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
    #####: 5497:  jerry_release_value (jerry_module_evaluate (module_value));
        -: 5498:
    #####: 5499:  jerry_release_value (module_value);
        -: 5500:
    #####: 5501:  jerry_cleanup ();
        -: 5502:  return 0;
        -: 5503:}
        -: 5504:```
        -: 5505:
        -: 5506:**See also**
        -: 5507:
        -: 5508:- [jerry_module_import_meta_callback_t](#jerry_module_import_meta_callback_t)
        -: 5509:
        -: 5510:## jerry_module_get_number_of_requests
        -: 5511:
        -: 5512:**Summary**
        -: 5513:
        -: 5514:Returns the number of import/export requests of a module.
        -: 5515:The requests can be queried by [jerry_module_get_request](#jerry_module_get_request).
        -: 5516:
        -: 5517:
        -: 5518:*Notes*:
        -: 5519:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5520:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5521:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5522:
        -: 5523:**Prototype**
        -: 5524:
        -: 5525:```c
        -: 5526:size_t jerry_module_get_number_of_requests (const jerry_value_t module_val);
        -: 5527:```
        -: 5528:
        -: 5529:- `module_val` - module object
        -: 5530:- return
        -: 5531:  - number of import/export requests of a module, if `module_val` is module,
        -: 5532:  - 0, otherwise
        -: 5533:
        -: 5534:*New in version [[NEXT_RELEASE]]*.
        -: 5535:
        -: 5536:**Example**
        -: 5537:
        -: 5538:[doctest]: # (test="compile")
        -: 5539:
        -: 5540:```c
        -: 5541:#include <jerryscript.h>
        -: 5542:#include <stdio.h>
        -: 5543:
        -: 5544:int
    #####: 5545:main (void)
        -: 5546:{
    #####: 5547:  jerry_init (JERRY_INIT_EMPTY);
        -: 5548:
    #####: 5549:  const jerry_char_t script[] = "export * from 'b.mjs'"
        -: 5550:                                "import a from 'c.mjs'";
        -: 5551:
        -: 5552:  jerry_parse_options_t parse_options;
    #####: 5553:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5554:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5555:
    #####: 5556:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5557:  jerry_release_value (parse_options.resource_name);
        -: 5558:
        -: 5559:  /* Prints 2. */
    #####: 5560:  printf ("Number of requests: %d\n", (int) jerry_module_get_number_of_requests (module_value));
        -: 5561:
    #####: 5562:  jerry_release_value (module_value);
        -: 5563:
    #####: 5564:  jerry_cleanup ();
        -: 5565:  return 0;
        -: 5566:}
        -: 5567:```
        -: 5568:
        -: 5569:**See also**
        -: 5570:
        -: 5571:- [jerry_module_get_request](#jerry_module_get_request)
        -: 5572:- [jerry_parse](#jerry_parse)
        -: 5573:- [jerry_module_link](#jerry_module_link)
        -: 5574:
        -: 5575:## jerry_module_get_request
        -: 5576:
        -: 5577:**Summary**
        -: 5578:
        -: 5579:Returns the module request specified by the `request_index` argument. The requests
        -: 5580:are ordered in source code occurence. When parsing is completed, all returned values
        -: 5581:are strings. If [jerry_module_link](#jerry_module_link) is completed successfully
        -: 5582:all returned values are module objects instead. If linking is in progress or fails,
        -: 5583:the successfully resolved dependencies are module objects, the rest are strings.
        -: 5584:The number of requests can be queried by
        -: 5585:[jerry_module_get_number_of_requests](#jerry_module_get_number_of_requests).
        -: 5586:
        -: 5587:*Notes*:
        -: 5588:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5589:  when it is no longer needed.
        -: 5590:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5591:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5592:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5593:
        -: 5594:**Prototype**
        -: 5595:
        -: 5596:```c
        -: 5597:jerry_value_t jerry_module_get_request (const jerry_value_t module_val, size_t request_index);
        -: 5598:```
        -: 5599:
        -: 5600:- `module_val` - module object
        -: 5601:- return
        -: 5602:  - string, if the request has not been resolved yet
        -: 5603:  - module object, if the request has been resolved successfully
        -: 5604:  - error, otherwise
        -: 5605:
        -: 5606:*New in version [[NEXT_RELEASE]]*.
        -: 5607:
        -: 5608:**Example**
        -: 5609:
        -: 5610:[doctest]: # (test="compile")
        -: 5611:
        -: 5612:```c
        -: 5613:#include <jerryscript.h>
        -: 5614:
        -: 5615:int
    #####: 5616:main (void)
        -: 5617:{
    #####: 5618:  jerry_init (JERRY_INIT_EMPTY);
        -: 5619:
    #####: 5620:  const jerry_char_t script[] = "export * from 'b.mjs'"
        -: 5621:                                "import a from 'c.mjs'";
        -: 5622:  const jerry_char_t file[] = "a.mjs";
        -: 5623:
        -: 5624:  jerry_parse_options_t parse_options;
    #####: 5625:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5626:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5627:
    #####: 5628:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5629:  jerry_release_value (parse_options.resource_name);
        -: 5630:
    #####: 5631:  jerry_value_t request_value = jerry_module_get_request (module_value, 0);
        -: 5632:  /* Returns with b.mjs */
    #####: 5633:  jerry_release_value (request_value);
        -: 5634:
    #####: 5635:  request_value = jerry_module_get_request (module_value, 1);
        -: 5636:  /* Returns with c.mjs */
    #####: 5637:  jerry_release_value (request_value);
        -: 5638:
    #####: 5639:  jerry_release_value (module_value);
        -: 5640:
    #####: 5641:  jerry_cleanup ();
        -: 5642:  return 0;
        -: 5643:}
        -: 5644:```
        -: 5645:
        -: 5646:**See also**
        -: 5647:
        -: 5648:- [jerry_module_get_number_of_requests](#jerry_module_get_number_of_requests)
        -: 5649:- [jerry_parse](#jerry_parse)
        -: 5650:- [jerry_module_link](#jerry_module_link)
        -: 5651:
        -: 5652:## jerry_module_get_namespace
        -: 5653:
        -: 5654:Returns the namespace object of a module
        -: 5655:
        -: 5656:*Notes*:
        -: 5657:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5658:  when it is no longer needed.
        -: 5659:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5660:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5661:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5662:
        -: 5663:**Prototype**
        -: 5664:
        -: 5665:```c
        -: 5666:jerry_value_t jerry_module_get_namespace (const jerry_value_t module_val);
        -: 5667:```
        -: 5668:
        -: 5669:- `module_val` - module object
        -: 5670:- return
        -: 5671:  - object, if namespace object is available
        -: 5672:  - error, otherwise
        -: 5673:
        -: 5674:*New in version [[NEXT_RELEASE]]*.
        -: 5675:
        -: 5676:**Example**
        -: 5677:
        -: 5678:[doctest]: # (test="compile")
        -: 5679:
        -: 5680:```c
        -: 5681:#include <jerryscript.h>
        -: 5682:#include <stdio.h>
        -: 5683:
        -: 5684:int
    #####: 5685:main (void)
        -: 5686:{
    #####: 5687:  jerry_init (JERRY_INIT_EMPTY);
        -: 5688:
    #####: 5689:  const jerry_char_t script[] = "export var a = 6";
        -: 5690:
        -: 5691:  jerry_parse_options_t parse_options;
    #####: 5692:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5693:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5694:
    #####: 5695:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5696:  jerry_release_value (parse_options.resource_name);
        -: 5697:
    #####: 5698:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
    #####: 5699:  jerry_release_value (jerry_module_evaluate (module_value));
        -: 5700:
    #####: 5701:  jerry_value_t namespace_value = jerry_module_get_namespace (module_value);
        -: 5702:
        -: 5703:  /* Exports can be checked. */
        -: 5704:
    #####: 5705:  jerry_release_value (namespace_value);
    #####: 5706:  jerry_release_value (module_value);
        -: 5707:
    #####: 5708:  jerry_cleanup ();
        -: 5709:  return 0;
        -: 5710:}
        -: 5711:```
        -: 5712:
        -: 5713:**See also**
        -: 5714:
        -: 5715:- [jerry_module_link](#jerry_module_link)
        -: 5716:- [jerry_module_evaluate](#jerry_module_evaluate)
        -: 5717:
        -: 5718:## jerry_module_set_import_callback
        -: 5719:
        -: 5720:Sets the callback which is called when dynamic imports are resolved. The resolver
        -: 5721:receives the `user_value` assigned to the currently executed script, which should
        -: 5722:provide all the information that is necessary for the resolve.
        -: 5723:
        -: 5724:*Notes*:
        -: 5725:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5726:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5727:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5728:- The possible return values of the callback is explained
        -: 5729:  in [jerry_module_import_callback_t](#jerry_module_import_callback_t)
        -: 5730:
        -: 5731:**Prototype**
        -: 5732:
        -: 5733:```c
        -: 5734:void
        -: 5735:jerry_module_set_import_callback (jerry_module_import_callback_t callback_p,
        -: 5736:                                  void *user_p)
        -: 5737:```
        -: 5738:
        -: 5739:- `callback_p` - a [jerry_module_import_callback_t](#jerry_module_import_callback_t) callback which handles `import()` calls
        -: 5740:- `user_p` - user pointer passed to the callback
        -: 5741:
        -: 5742:*New in version [[NEXT_RELEASE]]*.
        -: 5743:
        -: 5744:**Example**
        -: 5745:
        -: 5746:[doctest]: # (test="compile")
        -: 5747:
        -: 5748:```c
        -: 5749:#include <jerryscript.h>
        -: 5750:#include <stdio.h>
        -: 5751:
        -: 5752:typedef struct {
        -: 5753:  jerry_value_t specifier;
        -: 5754:  jerry_value_t user_value;
        -: 5755:  jerry_value_t promise;
        -: 5756:} resolve_module_task_t;
        -: 5757:
        -: 5758:static jerry_value_t
    #####: 5759:resolve_dynamic (const jerry_value_t specifier, /**< module specifier */
        -: 5760:                 const jerry_value_t user_value, /**< user value assigned to the script */
        -: 5761:                 void *user_p) /**< user data */
        -: 5762:{
        -: 5763:  /* If the specified module has already been evaluated, this callback can
        -: 5764:   * return with it and the promise creation is automatically done by the engine.
        -: 5765:   * Otherwise the application usually adds a resolve task to a command queue. */
        -: 5766:
        -: 5767:  /* This very simple command queue supports only one task. */
    #####: 5768:  resolve_module_task_t *task_p = (resolve_module_task_t *) user_p;
    #####: 5769:  task_p->specifier = jerry_acquire_value (specifier);
    #####: 5770:  task_p->user_value = jerry_acquire_value (user_value);
        -: 5771:
        -: 5772:  /* This Promise should be evaluated later. */
    #####: 5773:  jerry_value_t promise = jerry_create_promise ();
    #####: 5774:  task_p->promise = jerry_acquire_value (promise);
    #####: 5775:  return promise;
        -: 5776:}
        -: 5777:
        -: 5778:int
    #####: 5779:main (void)
        -: 5780:{
    #####: 5781:  jerry_init (JERRY_INIT_EMPTY);
        -: 5782:
        -: 5783:  resolve_module_task_t task;
    #####: 5784:  jerry_module_set_import_callback (resolve_dynamic, &task);
        -: 5785:
    #####: 5786:  const jerry_char_t script[] = "import('modules/my_module.mjs').then(\n"
        -: 5787:                                "  function (namespace) { /* use namespace */},\n"
        -: 5788:                                "  function (error) { /* handle error */}\n"
        -: 5789:                                ")";
        -: 5790:
        -: 5791:  jerry_parse_options_t parse_options;
    #####: 5792:  parse_options.options = JERRY_PARSE_HAS_RESOURCE | JERRY_PARSE_HAS_USER_VALUE;
        -: 5793:
        -: 5794:  /* Resource is usually used for debugging purposes, e.g. for generating backtrace. */
    #####: 5795:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "dir/my_script.js");
        -: 5796:
        -: 5797:  /* User value should provide information for resolving dynamic imports.
        -: 5798:   * In this case it contains the full path excluding the filename. */
    #####: 5799:  parse_options.user_value = jerry_create_string ((const jerry_char_t *) "/home/user/dir");
        -: 5800:
    #####: 5801:  jerry_value_t script_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5802:  jerry_release_value (parse_options.resource_name);
    #####: 5803:  jerry_release_value (parse_options.user_value);
    #####: 5804:  jerry_release_value (jerry_run (script_value));
    #####: 5805:  jerry_release_value (script_value);
        -: 5806:
        -: 5807:  /* The application resolves both the module and the promise using the specifier
        -: 5808:   * and the user_value. In this example the specifier is modules/my_module.mjs. */
    #####: 5809:  const jerry_char_t module_script[] = "export var a = 5";
        -: 5810:
    #####: 5811:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE | JERRY_PARSE_HAS_USER_VALUE;
    #####: 5812:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "modules/my_module.mjs");
    #####: 5813:  parse_options.user_value = jerry_create_string ((const jerry_char_t *) "/home/user/dir/modules");
        -: 5814:
    #####: 5815:  jerry_value_t module_value = jerry_parse (module_script, sizeof (module_script) - 1, &parse_options);
    #####: 5816:  jerry_release_value (parse_options.resource_name);
    #####: 5817:  jerry_release_value (parse_options.user_value);
    #####: 5818:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
    #####: 5819:  jerry_release_value (jerry_module_evaluate (module_value));
        -: 5820:
        -: 5821:  /* The promise must be resolved with the namespace object, not the module. */
    #####: 5822:  jerry_value_t namespace_value = jerry_module_get_namespace (module_value);
    #####: 5823:  jerry_release_value (jerry_resolve_or_reject_promise (task.promise, namespace_value, true));
        -: 5824:
    #####: 5825:  jerry_release_value (namespace_value);
    #####: 5826:  jerry_release_value (module_value);
    #####: 5827:  jerry_release_value (task.specifier);
    #####: 5828:  jerry_release_value (task.user_value);
    #####: 5829:  jerry_release_value (task.promise);
        -: 5830:
        -: 5831:  /* Process promise handlers. */
    #####: 5832:  jerry_release_value (jerry_run_all_enqueued_jobs ());
        -: 5833:
    #####: 5834:  jerry_cleanup ();
        -: 5835:  return 0;
        -: 5836:}
        -: 5837:```
        -: 5838:
        -: 5839:**See also**
        -: 5840:- [jerry_module_import_callback_t](#jerry_module_import_callback_t)
        -: 5841:
        -: 5842:## jerry_native_module_create
        -: 5843:
        -: 5844:Creates a native module with a list of exports. The initial state of the module is linked.
        -: 5845:
        -: 5846:*Notes*:
        -: 5847:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5848:  when it is no longer needed.
        -: 5849:- Native pointers can be used to assign private data to a native module,
        -: 5850:  see [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -: 5851:- When `callback` is `NULL`, no function is called when the module is evaluated,
        -: 5852:  only its state is changed to evaluated.
        -: 5853:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5854:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5855:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5856:
        -: 5857:**Prototype**
        -: 5858:
        -: 5859:```c
        -: 5860:jerry_value_t
        -: 5861:jerry_native_module_create (jerry_native_module_evaluate_callback_t callback,
        -: 5862:                            const jerry_value_t * const exports_p,
        -: 5863:                            size_t number_of_exports);
        -: 5864:```
        -: 5865:
        -: 5866:- `callback` - a [jerry_native_module_evaluate_callback_t](#jerry_native_module_evaluate_callback_t) callback
        -: 5867:               which is called by [jerry_module_evaluate](#jerry_module_evaluate) to evaluate the native module.
        -: 5868:- `exports_p` - list of the exported bindings of the module, must be valid string identifiers.
        -: 5869:- `number_of_exports` - number of exports in the `exports_p` list.
        -: 5870:- return
        -: 5871:  - a native module, if the module is successfully created
        -: 5872:  - error, otherwise
        -: 5873:
        -: 5874:*New in version [[NEXT_RELEASE]]*.
        -: 5875:
        -: 5876:**Example**
        -: 5877:
        -: 5878:[doctest]: # (test="compile")
        -: 5879:
        -: 5880:```c
        -: 5881:#include <jerryscript.h>
        -: 5882:
        -: 5883:int
    #####: 5884:main (void)
        -: 5885:{
    #####: 5886:  jerry_init (JERRY_INIT_EMPTY);
        -: 5887:
    #####: 5888:  jerry_value_t exports[2] =
        -: 5889:  {
    #####: 5890:    jerry_create_string ((const jerry_char_t *) "first_export"),
    #####: 5891:    jerry_create_string ((const jerry_char_t *) "second_export")
        -: 5892:  };
        -: 5893:
    #####: 5894:  jerry_value_t native_module = jerry_native_module_create (NULL, exports, 2);
        -: 5895:
    #####: 5896:  jerry_release_value (exports[0]);
    #####: 5897:  jerry_release_value (exports[1]);
    #####: 5898:  jerry_release_value (native_module);
        -: 5899:
    #####: 5900:  jerry_cleanup ();
        -: 5901:  return 0;
        -: 5902:}
        -: 5903:```
        -: 5904:
        -: 5905:**See also**
        -: 5906:
        -: 5907:- [jerry_module_link](#jerry_module_link)
        -: 5908:- [jerry_module_evaluate](#jerry_module_evaluate)
        -: 5909:- [jerry_native_module_get_export](#jerry_native_module_get_export)
        -: 5910:- [jerry_native_module_set_export](#jerry_native_module_set_export)
        -: 5911:
        -: 5912:## jerry_native_module_get_export
        -: 5913:
        -: 5914:Gets the value of an export binding which belongs to a native module.
        -: 5915:
        -: 5916:*Notes*:
        -: 5917:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5918:  when it is no longer needed.
        -: 5919:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5920:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5921:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5922:
        -: 5923:**Prototype**
        -: 5924:
        -: 5925:```c
        -: 5926:jerry_value_t
        -: 5927:jerry_native_module_get_export (const jerry_value_t native_module_val,
        -: 5928:                                const jerry_value_t export_name_val);
        -: 5929:```
        -: 5930:
        -: 5931:- `module_val` - a native module object.
        -: 5932:- `export_name_val` - string identifier of the export.
        -: 5933:- return
        -: 5934:  - value of the export, if success
        -: 5935:  - error, otherwise
        -: 5936:
        -: 5937:*New in version [[NEXT_RELEASE]]*.
        -: 5938:
        -: 5939:**Example**
        -: 5940:
        -: 5941:[doctest]: # (test="compile")
        -: 5942:
        -: 5943:```c
        -: 5944:#include <jerryscript.h>
        -: 5945:
        -: 5946:int
    #####: 5947:main (void)
        -: 5948:{
    #####: 5949:  jerry_init (JERRY_INIT_EMPTY);
        -: 5950:
    #####: 5951:  jerry_value_t export = jerry_create_string ((const jerry_char_t *) "an_export");
        -: 5952:
    #####: 5953:  jerry_value_t native_module = jerry_native_module_create (NULL, &export, 1);
        -: 5954:
    #####: 5955:  jerry_value_t value = jerry_native_module_get_export (native_module, export);
    #####: 5956:  jerry_release_value (value);
        -: 5957:
    #####: 5958:  jerry_release_value (export);
    #####: 5959:  jerry_release_value (native_module);
        -: 5960:
    #####: 5961:  jerry_cleanup ();
        -: 5962:  return 0;
        -: 5963:}
        -: 5964:```
        -: 5965:
        -: 5966:**See also**
        -: 5967:
        -: 5968:- [jerry_native_module_create](#jerry_native_module_create)
        -: 5969:- [jerry_native_module_set_export](#jerry_native_module_set_export)
        -: 5970:
        -: 5971:## jerry_native_module_set_export
        -: 5972:
        -: 5973:Sets the value of an export binding which belongs to a native module.
        -: 5974:
        -: 5975:*Notes*:
        -: 5976:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5977:  when it is no longer needed.
        -: 5978:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5979:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5980:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5981:
        -: 5982:**Prototype**
        -: 5983:
        -: 5984:```c
        -: 5985:jerry_value_t
        -: 5986:jerry_value_t jerry_native_module_set_export (const jerry_value_t native_mmodule_val,
        -: 5987:                                              const jerry_value_t export_name_val,
        -: 5988:                                              const jerry_value_t value_to_set)
        -: 5989:```
        -: 5990:
        -: 5991:- `module_val` - a native module object.
        -: 5992:- `export_name_val` - string identifier of the export.
        -: 5993:- `value_to_set` - new value of the export.
        -: 5994:- return
        -: 5995:  - true, if success
        -: 5996:  - error, otherwise
        -: 5997:
        -: 5998:*New in version [[NEXT_RELEASE]]*.
        -: 5999:
        -: 6000:**Example**
        -: 6001:
        -: 6002:[doctest]: # (test="compile")
        -: 6003:
        -: 6004:```c
        -: 6005:#include <jerryscript.h>
        -: 6006:
        -: 6007:int
    #####: 6008:main (void)
        -: 6009:{
    #####: 6010:  jerry_init (JERRY_INIT_EMPTY);
        -: 6011:
    #####: 6012:  jerry_value_t export = jerry_create_string ((const jerry_char_t *) "an_export");
        -: 6013:
    #####: 6014:  jerry_value_t native_module = jerry_native_module_create (NULL, &export, 1);
        -: 6015:
    #####: 6016:  jerry_value_t number = jerry_create_number (3.5);
    #####: 6017:  jerry_value_t value = jerry_native_module_set_export (native_module, export, number);
    #####: 6018:  jerry_release_value (value);
    #####: 6019:  jerry_release_value (number);
        -: 6020:
    #####: 6021:  jerry_release_value (export);
    #####: 6022:  jerry_release_value (native_module);
        -: 6023:
    #####: 6024:  jerry_cleanup ();
        -: 6025:  return 0;
        -: 6026:}
        -: 6027:```
        -: 6028:
        -: 6029:**See also**
        -: 6030:
        -: 6031:- [jerry_native_module_create](#jerry_native_module_create)
        -: 6032:- [jerry_native_module_get_export](#jerry_native_module_get_export)
        -: 6033:
        -: 6034:# Functions for promise objects
        -: 6035:
        -: 6036:These APIs all depend on the es.next profile (or on some build options).
        -: 6037:
        -: 6038:## jerry_get_promise_result
        -: 6039:
        -: 6040:**Summary**
        -: 6041:
        -: 6042:The function returns the result of a Promise object.
        -: 6043:
        -: 6044:*Notes*:
        -: 6045:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6046:  is no longer needed.
        -: 6047:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 6048:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 6049:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6050:- The es.next profile enables this by default.
        -: 6051:
        -: 6052:
        -: 6053:**Prototype**
        -: 6054:
        -: 6055:```c
        -: 6056:jerry_value_t
        -: 6057:jerry_get_promise_result (const jerry_value_t promise);
        -: 6058:```
        -: 6059:
        -: 6060:- `promise` - the input Promise object.
        -: 6061:- return
        -: 6062:  - The result of the Promise.
        -: 6063:  - If the Promise is not resolved yet the result is the 'undefined' value.
        -: 6064:  - A TypeError is returned if the input argument was not a Promise object or
        -: 6065:    the Promise support was not built into the library.
        -: 6066:
        -: 6067:*New in version 2.2*.
        -: 6068:
        -: 6069:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 6070:
        -: 6071:**Example**
        -: 6072:
        -: 6073:[doctest]: # (test="compile")
        -: 6074:
        -: 6075:```c
        -: 6076:#include <jerryscript.h>
        -: 6077:
        -: 6078:static void
        -: 6079:example (void)
        -: 6080:{
        -: 6081:  // acquire/create a promise object.
        -: 6082:  jerry_value_t promise = jerry_create_promise ();
        -: 6083:  {
        -: 6084:    // prepare the argumnent for the resolve or reject.
        -: 6085:    jerry_value_t argument = jerry_create_number (33);
        -: 6086:
        -: 6087:    jerry_value_t is_ok = jerry_resolve_or_reject_promise (promise,
        -: 6088:                                                           argument,
        -: 6089:                                                           true);
        -: 6090:    // 'is_ok' should be checked if it is an error or not.
        -: 6091:    // skipped in this example
        -: 6092:    jerry_release_value (is_ok);
        -: 6093:    jerry_release_value (argument);
        -: 6094:  }
        -: 6095:
        -: 6096:  jerry_value_t promise_result = jerry_get_promise_result (promise);
        -: 6097:  // 'promise_result' is now the number 33.
        -: 6098:
        -: 6099:  jerry_release_value (promise_result);
        -: 6100:  jerry_release_value (promise);
        -: 6101:}
        -: 6102:```
        -: 6103:
        -: 6104:**See also**
        -: 6105:
        -: 6106:- [jerry_create_promise](#jerry_create_promise)
        -: 6107:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 6108:
        -: 6109:## jerry_get_promise_state
        -: 6110:
        -: 6111:**Summary**
        -: 6112:
        -: 6113:*Notes*:
        -: 6114:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6115:  is no longer needed.
        -: 6116:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 6117:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 6118:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6119:- The es.next profile enables this by default.
        -: 6120:
        -: 6121:
        -: 6122:**Prototype**
        -: 6123:
        -: 6124:```c
        -: 6125:jerry_promise_state_t
        -: 6126:jerry_get_promise_state (const jerry_value_t promise);
        -: 6127:```
        -: 6128:
        -: 6129:- `promise` - the input promise object.
        -: 6130:- return
        -: 6131:  - [jerry_promise_state_t](#jerry_promise_state_t)
        -: 6132:  - `JERRY_PROMISE_STATE_NONE` is returned if the input argument was not a promise object or
        -: 6133:    the Promise support was not built into the library.
        -: 6134:
        -: 6135:*New in version 2.2*.
        -: 6136:
        -: 6137:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 6138:
        -: 6139:**Example**
        -: 6140:
        -: 6141:[doctest]: # (test="compile")
        -: 6142:
        -: 6143:```c
        -: 6144:#include <jerryscript.h>
        -: 6145:
        -: 6146:static void
        -: 6147:example (void)
        -: 6148:{
        -: 6149:  // acquire/create a promise object.
        -: 6150:  jerry_value_t promise = jerry_create_promise ();
        -: 6151:
        -: 6152:  jerry_promise_state_t start_state = jerry_get_promise_state (promise);
        -: 6153:  // a Promise have a default state of JERRY_PROMISE_STATE_PENDING
        -: 6154:
        -: 6155:  {
        -: 6156:    // prepare the argumnent for the resolve or reject.
        -: 6157:    jerry_value_t argument = jerry_create_number (33);
        -: 6158:
        -: 6159:    jerry_value_t is_ok = jerry_resolve_or_reject_promise (promise,
        -: 6160:                                                           argument,
        -: 6161:                                                           true);
        -: 6162:    // 'is_ok' should be checked if it is an error or not.
        -: 6163:    // skipped in this example
        -: 6164:    jerry_release_value (is_ok);
        -: 6165:    jerry_release_value (argument);
        -: 6166:  }
        -: 6167:
        -: 6168:  jerry_promise_state_t current_state = jerry_get_promise_state (promise);
        -: 6169:  // at this point the Promise should be in the JERRY_PROMISE_STATE_FULFILLED state.
        -: 6170:
        -: 6171:  jerry_release_value (promise);
        -: 6172:}
        -: 6173:```
        -: 6174:
        -: 6175:**See also**
        -: 6176:
        -: 6177:- [jerry_create_promise](#jerry_create_promise)
        -: 6178:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 6179:
        -: 6180:## jerry_promise_set_callback
        -: 6181:
        -: 6182:**Summary**
        -: 6183:
        -: 6184:Sets a callback for tracking Promise and async operations.
        -: 6185:
        -: 6186:*Notes*:
        -: 6187:- This API depends on a build option (`JERRY_PROMISE_CALLBACK`) and can be checked
        -: 6188:  in runtime with the `JERRY_FEATURE_PROMISE_CALLBACK` feature enum value,
        -: 6189:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6190:
        -: 6191:
        -: 6192:**Prototype**
        -: 6193:
        -: 6194:```c
        -: 6195:void jerry_promise_set_callback (jerry_promise_event_filter_t filters, jerry_promise_callback_t callback,
        -: 6196:                                 void *user_p);
        -: 6197:```
        -: 6198:
        -: 6199:- `filters` - combination of [jerry_promise_event_filter_t](#jerry_promise_event_filter_t) options
        -: 6200:- `callback` - callback function, the previously set value is overwritten,
        -: 6201:               and setting NULL disables the tracking
        -: 6202:- `user_p` - pointer passed to the callback function, can be NULL
        -: 6203:
        -: 6204:*New in version [[NEXT_RELEASE]]*.
        -: 6205:
        -: 6206:**Example**
        -: 6207:
        -: 6208:[doctest]: # ()
        -: 6209:
        -: 6210:```c
        -: 6211:#include <stdio.h>
        -: 6212:#include <string.h>
        -: 6213:#include "jerryscript.h"
        -: 6214:
        -: 6215:static void
    #####: 6216:promise_callback (jerry_promise_event_type_t event_type, /**< event type */
        -: 6217:                  const jerry_value_t object, /**< target object */
        -: 6218:                  const jerry_value_t value, /**< optional argument */
        -: 6219:                  void *user_p) /**< user pointer passed to the callback */
        -: 6220:{
    #####: 6221:  if (event_type == JERRY_PROMISE_EVENT_CREATE)
        -: 6222:  {
    #####: 6223:    printf ("A new promise is created\n");
        -: 6224:
    #####: 6225:    if (!jerry_value_is_undefined (value))
        -: 6226:    {
        -: 6227:      printf ("  The Promise is created by Promise.then() built-in.\n");
        -: 6228:    }
        -: 6229:  }
    #####: 6230:} /* promise_callback */
        -: 6231:
        -: 6232:int
    #####: 6233:main (void)
        -: 6234:{
    #####: 6235:  jerry_init (JERRY_INIT_EMPTY);
        -: 6236:
    #####: 6237:  jerry_promise_set_callback (JERRY_PROMISE_EVENT_FILTER_CREATE, promise_callback, NULL);
        -: 6238:
    #####: 6239:  const char *source_p = "var p = Promise.resolve(0)\n"
        -: 6240:                         "p.then(function (v) { return v; })";
    #####: 6241:  jerry_release_value (jerry_eval ((const jerry_char_t *) source_p,
        -: 6242:                                   strlen (source_p),
        -: 6243:                                   JERRY_PARSE_NO_OPTS));
        -: 6244:
    #####: 6245:  jerry_cleanup ();
        -: 6246:  return 0;
        -: 6247:} /* main */
        -: 6248:```
        -: 6249:
        -: 6250:**See also**
        -: 6251:
        -: 6252:- [jerry_create_promise](#jerry_create_promise)
        -: 6253:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 6254:
        -: 6255:## jerry_from_property_descriptor
        -: 6256:
        -: 6257:**Summary**
        -: 6258:
        -: 6259:This API function is equivalent to FromPropertyDescriptor operation defined in ECMA 262 v11 6.2.5.4.
        -: 6260:It returns with an ECMAScript Object which represents the property attributes.
        -: 6261:
        -: 6262:*Notes*:
        -: 6263:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6264:  is no longer needed.
        -: 6265:
        -: 6266:**Prototype**
        -: 6267:
        -: 6268:```c
        -: 6269:jerry_value_t
        -: 6270:jerry_from_property_descriptor (const jerry_property_descriptor_t *src_prop_desc_p)
        -: 6271:```
        -: 6272:
        -: 6273:- `src_prop_desc_p` - the input property descriptor.
        -: 6274:- return
        -: 6275:  - [jerry_value_t](#jerry_value_t)
        -: 6276:  - jerry value - if success
        -: 6277:  - value marked with error flag - otherwise
        -: 6278:
        -: 6279:*New in version 2.4*.
        -: 6280:
        -: 6281:**Example**
        -: 6282:
        -: 6283:[doctest]: # (test="compile")
        -: 6284:
        -: 6285:```c
        -: 6286:#include <jerryscript.h>
        -: 6287:
        -: 6288:static void
        -: 6289:example (void)
        -: 6290:{
        -: 6291:  jerry_value_t prop_name = jerry_create_string_from_utf8 ((jerry_char_t *) "value");
        -: 6292:
        -: 6293:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 6294:
        -: 6295:  prop_desc.value = prop_name;
        -: 6296:  prop_desc.flags |= JERRY_PROP_IS_VALUE_DEFINED;
        -: 6297:
        -: 6298:  jerry_value_t from_object = jerry_from_property_descriptor (&prop_desc);
        -: 6299:
        -: 6300:  jerry_release_value (prop_name);
        -: 6301:  jerry_release_value (from_object);
        -: 6302:  jerry_property_descriptor_free (&prop_desc);
        -: 6303:}
        -: 6304:```
        -: 6305:
        -: 6306:## jerry_to_property_descriptor
        -: 6307:
        -: 6308:**Summary**
        -: 6309:
        -: 6310:This API function is equivalent to ToPropertyDescriptor operation defined in ECMA 262 v11 6.2.5.5.
        -: 6311:It decodes the ECMAScript object and fills the fields of a JerryScript property descriptor.
        -: 6312:
        -: 6313:*Notes*:
        -: 6314:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6315:  is no longer needed.
        -: 6316:
        -: 6317:**Prototype**
        -: 6318:
        -: 6319:```c
        -: 6320:jerry_value_t
        -: 6321:jerry_to_property_descriptor (jerry_value_t obj_value, jerry_property_descriptor_t *out_prop_desc_p);
        -: 6322:```
        -: 6323:
        -: 6324:- `obj_value` - the input object
        -: 6325:- `src_prop_desc_p` - the output property descriptor.
        -: 6326:- return
        -: 6327:  - [jerry_value_t](#jerry_value_t)
        -: 6328:  - true, if success
        -: 6329:  - thrown error, otherwise
        -: 6330:
        -: 6331:*New in version 2.4*.
        -: 6332:
        -: 6333:**Example**
        -: 6334:
        -: 6335:[doctest]: # (test="compile")
        -: 6336:
        -: 6337:```c
        -: 6338:#include <jerryscript.h>
        -: 6339:
        -: 6340:static void
        -: 6341:example (void)
        -: 6342:{
        -: 6343:  jerry_value_t object = jerry_create_object ();
        -: 6344:  jerry_value_t prop_name = jerry_create_string_from_utf8 ((jerry_char_t *) "value");
        -: 6345:  jerry_value_t value = jerry_create_boolean (true);
        -: 6346:  jerry_property_descriptor_t prop_desc;
        -: 6347:
        -: 6348:  jerry_release_value (jerry_set_property (object, prop_name, prop_name));
        -: 6349:
        -: 6350:  jerry_release_value (jerry_to_property_descriptor (object, &prop_desc));
        -: 6351:
        -: 6352:  jerry_release_value (object);
        -: 6353:  jerry_release_value (prop_name);
        -: 6354:  jerry_release_value (value);
        -: 6355:  jerry_property_descriptor_free (&prop_desc);
        -: 6356:}
        -: 6357:```
        -: 6358:
        -: 6359:## jerry_resolve_or_reject_promise
        -: 6360:
        -: 6361:**Summary**
        -: 6362:
        -: 6363:Resolve or reject the promise with an argument.
        -: 6364:
        -: 6365:*Note*:
        -: 6366:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6367:  is no longer needed.
        -: 6368:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 6369:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 6370:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6371:- The es.next profile enables this by default.
        -: 6372:
        -: 6373:
        -: 6374:**Prototype**
        -: 6375:
        -: 6376:```c
        -: 6377:jerry_value_t
        -: 6378:jerry_resolve_or_reject_promise (jerry_value_t promise,
        -: 6379:                                 jerry_value_t argument,
        -: 6380:                                 bool is_resolve)
        -: 6381:```
        -: 6382:
        -: 6383:- `promise` - the promise value
        -: 6384:- `argument` - the argument for resolve or reject
        -: 6385:- `is_resolve` - whether the promise should be resolved or rejected
        -: 6386:- return value
        -: 6387:  - undefined jerry value - resolve or reject successed
        -: 6388:  - jerry value with error flag - otherwise
        -: 6389:
        -: 6390:*New in version 2.0*.
        -: 6391:
        -: 6392:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 6393:
        -: 6394:**Example**
        -: 6395:
        -: 6396:```c
        -: 6397:{
        -: 6398:  jerry_value_t promise = ... // acquire/create a promise object.
        -: 6399:
        -: 6400:  ...
        -: 6401:
        -: 6402:  bool is_resolve = ... // whether the promise should be resolved or rejected
        -: 6403:  jerry_value_t argument = ... // prepare the argumnent for the resolve or reject.
        -: 6404:
        -: 6405:  jerry_value_t is_ok = jerry_resolve_or_reject_promise (promise,
        -: 6406:                                                         argument,
        -: 6407:                                                         is_resolve);
        -: 6408:
        -: 6409:  if (jerry_value_is_error (is_ok))
        -: 6410:  {
        -: 6411:    // handle the error.
        -: 6412:  }
        -: 6413:
        -: 6414:  jerry_release_value (is_ok);
        -: 6415:  jerry_release_value (argument);
        -: 6416:  jerry_release_value (promise);
        -: 6417:}
        -: 6418:```
        -: 6419:
        -: 6420:**See also**
        -: 6421:
        -: 6422:- [jerry_release_value](#jerry_release_value)
        -: 6423:- [jerry_value_is_error](#jerry_value_is_error)
        -: 6424:
        -: 6425:# Functions for symbols
        -: 6426:
        -: 6427:These APIs all depend on the es.next profile (or on build options).
        -: 6428:
        -: 6429:## jerry_get_well_known_symbol
        -: 6430:
        -: 6431:**Summary**
        -: 6432:
        -: 6433:Get the well-known symbol corresponding to the given [well-known symbol id](#jerry_well_known_symbol_t).
        -: 6434:
        -: 6435:*Notes*:
        -: 6436:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6437:  is no longer needed.
        -: 6438:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 6439:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 6440:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6441:- The es.next profile enables this by default.
        -: 6442:- If the symbol support is not enabled an undefined will be returned.
        -: 6443:
        -: 6444:**Prototype**
        -: 6445:
        -: 6446:```c
        -: 6447:jerry_value_t
        -: 6448:jerry_get_well_known_symbol (jerry_well_known_symbol_t symbol);
        -: 6449:```
        -: 6450:
        -: 6451:- `symbol` - [jerry_well_known_symbol_t](#jerry_well_known_symbol_t) enum value
        -: 6452:- return value
        -: 6453:  - undefined value - if invalid well-known symbol was requested
        -: 6454:  - well-known symbol value, otherwise
        -: 6455:
        -: 6456:*New in version 2.4*.
        -: 6457:
        -: 6458:**Example**
        -: 6459:
        -: 6460:[doctest]: # ()
        -: 6461:
        -: 6462:```c
        -: 6463:#include "jerryscript.h"
        -: 6464:
        -: 6465:int
    #####: 6466:main (void)
        -: 6467:{
    #####: 6468:  jerry_init (JERRY_INIT_EMPTY);
        -: 6469:
    #####: 6470:  jerry_value_t array_value = jerry_create_array (5);
    #####: 6471:  jerry_value_t symbol_iterator = jerry_get_well_known_symbol (JERRY_SYMBOL_ITERATOR);
    #####: 6472:  jerry_value_t array_iterator = jerry_get_property (array_value, symbol_iterator);
        -: 6473:
        -: 6474:  // usage of array_iterator
        -: 6475:
    #####: 6476:  jerry_release_value (array_iterator);
    #####: 6477:  jerry_release_value (symbol_iterator);
    #####: 6478:  jerry_release_value (array_value);
        -: 6479:
    #####: 6480:  jerry_cleanup ();
        -: 6481:  return 0;
        -: 6482:}
        -: 6483:```
        -: 6484:
        -: 6485:**See also**
        -: 6486:
        -: 6487:- [jerry_well_known_symbol_t](#jerry_well_known_symbol_t)
        -: 6488:
        -: 6489:## jerry_get_symbol_description
        -: 6490:
        -: 6491:**Summary**
        -: 6492:
        -: 6493:Returns with the `[[Description]]` internal property of a symbol value.
        -: 6494:
        -: 6495:*Notes*:
        -: 6496:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6497:  is no longer needed.
        -: 6498:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 6499:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 6500:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6501:- The es.next profile enables this by default.
        -: 6502:- If the symbol support is not enabled an error will be returned.
        -: 6503:
        -: 6504:**Prototype**
        -: 6505:
        -: 6506:```c
        -: 6507:jerry_value_t
        -: 6508:jerry_get_symbol_description (const jerry_value_t value);
        -: 6509:```
        -: 6510:
        -: 6511:- `value` - symbol value
        -: 6512:- return value
        -: 6513:  - string or undefined value containing the symbol's description - if success
        -: 6514:  - thrown error, otherwise
        -: 6515:
        -: 6516:*New in version 2.4*.
        -: 6517:
        -: 6518:**Example**
        -: 6519:
        -: 6520:[doctest]: # ()
        -: 6521:
        -: 6522:```c
        -: 6523:#include "jerryscript.h"
        -: 6524:
        -: 6525:int
    #####: 6526:main (void)
        -: 6527:{
    #####: 6528:  jerry_init (JERRY_INIT_EMPTY);
        -: 6529:
    #####: 6530:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "foo");
    #####: 6531:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 6532:
    #####: 6533:  jerry_release_value (string_value);
        -: 6534:
    #####: 6535:  jerry_value_t symbol_description = jerry_get_symbol_description (symbol_value);
        -: 6536:
        -: 6537:  // usage of symbol_desc_string
        -: 6538:
    #####: 6539:  jerry_release_value (symbol_description);
    #####: 6540:  jerry_release_value (symbol_value);
        -: 6541:
    #####: 6542:  jerry_cleanup ();
        -: 6543:  return 0;
        -: 6544:}
        -: 6545:```
        -: 6546:
        -: 6547:**See also**
        -: 6548:
        -: 6549:- [jerry_get_symbol_descriptive_string](#jerry_get_symbol_descriptive_string)
        -: 6550:
        -: 6551:## jerry_get_symbol_descriptive_string
        -: 6552:
        -: 6553:**Summary**
        -: 6554:
        -: 6555:Call the SymbolDescriptiveString ecma builtin operation on the API value.
        -: 6556:Based on ECMA 262 v6 19.4.3.2.1 this is in the form of `Symbol(<description>)`.
        -: 6557:
        -: 6558:*Notes*:
        -: 6559:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6560:  is no longer needed.
        -: 6561:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 6562:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 6563:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6564:- The es.next profile enables this by default.
        -: 6565:- If the symbol support is not enabled an error will be returned.
        -: 6566:
        -: 6567:**Prototype**
        -: 6568:
        -: 6569:```c
        -: 6570:jerry_value_t
        -: 6571:jerry_get_symbol_descriptive_string (const jerry_value_t value);
        -: 6572:```
        -: 6573:
        -: 6574:- `value` - symbol value
        -: 6575:- return value
        -: 6576:  - string value containing the symbol's descriptive string - if success
        -: 6577:  - thrown error, otherwise
        -: 6578:
        -: 6579:*New in version 2.0*.
        -: 6580:
        -: 6581:**Example**
        -: 6582:
        -: 6583:[doctest]: # ()
        -: 6584:
        -: 6585:```c
        -: 6586:#include "jerryscript.h"
        -: 6587:
        -: 6588:int
    #####: 6589:main (void)
        -: 6590:{
    #####: 6591:  jerry_init (JERRY_INIT_EMPTY);
        -: 6592:
    #####: 6593:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "foo");
    #####: 6594:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 6595:
    #####: 6596:  jerry_release_value (string_value);
        -: 6597:
    #####: 6598:  jerry_value_t symbol_desc_string = jerry_get_symbol_descriptive_string (symbol_value);
        -: 6599:
        -: 6600:  // usage of symbol_desc_string
        -: 6601:
    #####: 6602:  jerry_release_value (symbol_desc_string);
    #####: 6603:  jerry_release_value (symbol_value);
        -: 6604:
    #####: 6605:  jerry_cleanup ();
        -: 6606:  return 0;
        -: 6607:}
        -: 6608:```
        -: 6609:
        -: 6610:**See also**
        -: 6611:
        -: 6612:- [jerry_get_symbol_description](#jerry_get_symbol_description)
        -: 6613:
        -: 6614:# Functions for BigInts
        -: 6615:
        -: 6616:These APIs all depend on build option (`JERRY_BUILTIN_BIGINT`).
        -: 6617:
        -: 6618:## jerry_get_bigint_size_in_digits
        -: 6619:
        -: 6620:**Summary**
        -: 6621:
        -: 6622:Returns the size of uint64 digits of a BigInt value. This value is the
        -: 6623:minimum size of the buffer which can hold all digits of a BigInt value when
        -: 6624:the digits are retreived by `[jerry_get_bigint_digits](#jerry_get_bigint_digits)`.
        -: 6625:
        -: 6626:*Notes*:
        -: 6627:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 6628:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 6629:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6630:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6631:  is no longer needed.
        -: 6632:
        -: 6633:**Prototype**
        -: 6634:
        -: 6635:```c
        -: 6636:uint32_t
        -: 6637:jerry_get_bigint_size_in_digits (jerry_value_t value)
        -: 6638:```
        -: 6639:
        -: 6640:- `value` - BigInt value
        -: 6641:- return value
        -: 6642:  - number of digits (can be zero for BigInt zero)
        -: 6643:  - if value is not a BigInt value, it returns with zero
        -: 6644:
        -: 6645:*New in version 2.4*.
        -: 6646:
        -: 6647:**Example**
        -: 6648:
        -: 6649:[doctest]: # ()
        -: 6650:
        -: 6651:```c
        -: 6652:#include "jerryscript.h"
        -: 6653:
        -: 6654:int
    #####: 6655:main (void)
        -: 6656:{
    #####: 6657:  jerry_init (JERRY_INIT_EMPTY);
        -: 6658:
    #####: 6659:  uint64_t digits[4] = { 0x1, 0x1, 0x0, 0x0 };
    #####: 6660:  jerry_value_t bigint_value = jerry_create_bigint (digits, 4, true);
        -: 6661:
        -: 6662:  /* Prints two, because the leading zeroes in digits buffer are discarded. */
    #####: 6663:  printf("size: %d\n", (int) jerry_get_bigint_size_in_digits (bigint_value));
        -: 6664:
    #####: 6665:  jerry_release_value (bigint_value);
        -: 6666:
    #####: 6667:  jerry_cleanup ();
        -: 6668:  return 0;
        -: 6669:}
        -: 6670:```
        -: 6671:
        -: 6672:**See also**
        -: 6673:
        -: 6674:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 6675:- [jerry_get_bigint_digits](#jerry_get_bigint_digits)
        -: 6676:
        -: 6677:
        -: 6678:## jerry_get_bigint_digits
        -: 6679:
        -: 6680:**Summary**
        -: 6681:
        -: 6682:Copies the uint64 digits of a BigInt value into a buffer. This function supports any
        -: 6683:buffer sizes. If the buffer size is smaller than the size returned by
        -: 6684:`[jerry_get_bigint_size_in_digits](#jerry_get_bigint_size_in_digits)`, only the
        -: 6685:least significant digits are copied into the buffer. If the buffer size is greater,
        -: 6686:the unused digits are filled with zero.
        -: 6687:
        -: 6688:*Notes*:
        -: 6689:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 6690:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 6691:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6692:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6693:  is no longer needed.
        -: 6694:
        -: 6695:**Prototype**
        -: 6696:
        -: 6697:```c
        -: 6698:void
        -: 6699:jerry_get_bigint_digits (jerry_value_t value, uint64_t *digits_p, uint32_t size, bool *sign_p)
        -: 6700:```
        -: 6701:
        -: 6702:- `value` - BigInt value
        -: 6703:- `digits_p` - output buffer for digits
        -: 6704:- `size` - size of the output buffer
        -: 6705:- `sign_p` - the boolean passed to the function is set to false when the BigInt
        -: 6706:             is positive, and set to true otherwise (this parameter can be NULL)
        -: 6707:
        -: 6708:*New in version 2.4*.
        -: 6709:
        -: 6710:**Example**
        -: 6711:
        -: 6712:[doctest]: # ()
        -: 6713:
        -: 6714:```c
        -: 6715:#include "jerryscript.h"
        -: 6716:
        -: 6717:int
    #####: 6718:main (void)
        -: 6719:{
    #####: 6720:  jerry_init (JERRY_INIT_EMPTY);
        -: 6721:
    #####: 6722:  uint64_t digits[4] = { 0x1, 0x1, 0x0, 0x0 };
    #####: 6723:  jerry_value_t bigint_value = jerry_create_bigint (digits, 4, true);
        -: 6724:
        -: 6725:  uint64_t get_digits[4];
        -: 6726:  bool sign;
    #####: 6727:  jerry_get_bigint_digits (bigint_value, get_digits, 2, &sign);
        -: 6728:
    #####: 6729:  jerry_release_value (bigint_value);
        -: 6730:
    #####: 6731:  jerry_cleanup ();
        -: 6732:  return 0;
        -: 6733:}
        -: 6734:```
        -: 6735:
        -: 6736:**See also**
        -: 6737:
        -: 6738:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 6739:- [jerry_get_bigint_size_in_digits](#jerry_get_bigint_size_in_digits)
        -: 6740:
        -: 6741:
        -: 6742:# Functions for Proxy objects
        -: 6743:
        -: 6744:These APIs all depend on build option (`JERRY_BUILTIN_PROXY`).
        -: 6745:
        -: 6746:## jerry_get_proxy_target
        -: 6747:
        -: 6748:**Summary**
        -: 6749:
        -: 6750:Gets the target object of a Proxy object.
        -: 6751:
        -: 6752:*Notes*:
        -: 6753:- This API depends on a build option (`JERRY_BUILTIN_PROXY`) and can be checked
        -: 6754:  in runtime with the `JERRY_FEATURE_PROXY` feature enum value,
        -: 6755:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6756:- The es.next profile enables this by default.
        -: 6757:
        -: 6758:
        -: 6759:**Prototype**
        -: 6760:
        -: 6761:```c
        -: 6762:jerry_value_t
        -: 6763:jerry_get_proxy_target (jerry_value_t proxy_value);
        -: 6764:```
        -: 6765:
        -: 6766:- `proxy_value` - Proxy object value
        -: 6767:- return value
        -: 6768:  - type error - if proxy_value is not a Proxy object
        -: 6769:  - target object - otherwise
        -: 6770:
        -: 6771:*New in version 2.4*.
        -: 6772:
        -: 6773:**Example**
        -: 6774:
        -: 6775:```c
        -: 6776:{
        -: 6777:  jerry_value_t target = jerry_create_object ();
        -: 6778:  jerry_value_t handler = jerry_create_object ();
        -: 6779:  jerry_value_t proxy = jerry_create_proxy (target, handler);
        -: 6780:
        -: 6781:  jerry_release_value (target);
        -: 6782:  jerry_release_value (handler);
        -: 6783:
        -: 6784:  target = jerry_get_proxy_target (proxy);
        -: 6785:
        -: 6786:  // ... usage of the target
        -: 6787:
        -: 6788:  jerry_release_value (target);
        -: 6789:  jerry_release_value (proxy);
        -: 6790:}
        -: 6791:```
        -: 6792:
        -: 6793:**See also**
        -: 6794:
        -: 6795:- [jerry_create_proxy](#jerry_create_proxy)
        -: 6796:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 6797:- [jerry_get_proxy_handler](#jerry_get_proxy_handler)
        -: 6798:
        -: 6799:## jerry_get_proxy_handler
        -: 6800:
        -: 6801:**Summary**
        -: 6802:
        -: 6803:Gets the handler object of a Proxy object.
        -: 6804:
        -: 6805:*Notes*:
        -: 6806:- This API depends on a build option (`JERRY_BUILTIN_PROXY`) and can be checked
        -: 6807:  in runtime with the `JERRY_FEATURE_PROXY` feature enum value,
        -: 6808:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6809:- The es.next profile enables this by default.
        -: 6810:
        -: 6811:
        -: 6812:**Prototype**
        -: 6813:
        -: 6814:```c
        -: 6815:jerry_value_t
        -: 6816:jerry_get_proxy_handler (jerry_value_t proxy_value);
        -: 6817:```
        -: 6818:
        -: 6819:- `proxy_value` - Proxy object value
        -: 6820:- return value
        -: 6821:  - type error - if proxy_value is not a Proxy object
        -: 6822:  - handler object - otherwise
        -: 6823:
        -: 6824:*New in version [[NEXT_RELEASE]]*.
        -: 6825:
        -: 6826:**Example**
        -: 6827:
        -: 6828:```c
        -: 6829:{
        -: 6830:  jerry_value_t target = jerry_create_object ();
        -: 6831:  jerry_value_t handler = jerry_create_object ();
        -: 6832:  jerry_value_t proxy = jerry_create_proxy (target, handler);
        -: 6833:
        -: 6834:  jerry_release_value (target);
        -: 6835:  jerry_release_value (handler);
        -: 6836:
        -: 6837:  handler = jerry_get_proxy_handler (proxy);
        -: 6838:
        -: 6839:  // ... usage of the handler
        -: 6840:
        -: 6841:  jerry_release_value (handler);
        -: 6842:  jerry_release_value (proxy);
        -: 6843:}
        -: 6844:```
        -: 6845:
        -: 6846:**See also**
        -: 6847:
        -: 6848:- [jerry_create_proxy](#jerry_create_proxy)
        -: 6849:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 6850:- [jerry_get_proxy_target](#jerry_get_proxy_target)
        -: 6851:
        -: 6852:
        -: 6853:# Acquire and release API values
        -: 6854:
        -: 6855:## jerry_acquire_value
        -: 6856:
        -: 6857:**Summary**
        -: 6858:
        -: 6859:Acquires the specified Jerry API value.
        -: 6860:
        -: 6861:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6862:is no longer needed.
        -: 6863:
        -: 6864:**Prototype**
        -: 6865:
        -: 6866:```c
        -: 6867:jerry_value_t
        -: 6868:jerry_acquire_value (jerry_value_t value);
        -: 6869:```
        -: 6870:
        -: 6871:- `value` - api value
        -: 6872:- return value - acquired value that may be used outside of the engine
        -: 6873:
        -: 6874:**Example**
        -: 6875:
        -: 6876:```c
        -: 6877:{
        -: 6878:  jerry_value_t object_value = jerry_create_object ();
        -: 6879:
        -: 6880:  jerry_value_t acquired_object = jerry_acquire_value (object_value);
        -: 6881:
        -: 6882:  jerry_release_value (object_value);
        -: 6883:
        -: 6884:  // acquired_object refers to the created object and makes it
        -: 6885:  // available after the release of 'object_value'
        -: 6886:
        -: 6887:  jerry_release_value (acquired_object);
        -: 6888:}
        -: 6889:```
        -: 6890:
        -: 6891:**See also**
        -: 6892:
        -: 6893:- [jerry_release_value](#jerry_release_value)
        -: 6894:- [jerry_value_t](#jerry_value_t)
        -: 6895:
        -: 6896:
        -: 6897:## jerry_release_value
        -: 6898:
        -: 6899:**Summary**
        -: 6900:
        -: 6901:Release specified Jerry API value.
        -: 6902:
        -: 6903:**Prototype**
        -: 6904:
        -: 6905:```c
        -: 6906:void
        -: 6907:jerry_release_value (jerry_value_t value);
        -: 6908:```
        -: 6909:
        -: 6910:- `value` - api value
        -: 6911:
        -: 6912:**Example**
        -: 6913:
        -: 6914:```c
        -: 6915:{
        -: 6916:  jerry_value_t object_value = jerry_create_object ();
        -: 6917:
        -: 6918:  ...
        -: 6919:
        -: 6920:  jerry_release_value (object_value);
        -: 6921:}
        -: 6922:```
        -: 6923:
        -: 6924:
        -: 6925:# Create API values
        -: 6926:
        -: 6927:Function for creating [API values](#jerry_value_t).
        -: 6928:
        -: 6929:*Note*: Every created API value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6930:is no longer needed.
        -: 6931:
        -: 6932:## jerry_create_array
        -: 6933:
        -: 6934:**Summary**
        -: 6935:
        -: 6936:Create an array object value.
        -: 6937:
        -: 6938:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6939:is no longer needed.
        -: 6940:
        -: 6941:**Prototype**
        -: 6942:
        -: 6943:```c
        -: 6944:jerry_value_t
        -: 6945:jerry_create_array (uint32_t size);
        -: 6946:```
        -: 6947:
        -: 6948: - `size` - size of array;
        -: 6949: - return value - value of the constructed array object
        -: 6950:
        -: 6951: **Example**
        -: 6952:
        -: 6953:```c
        -: 6954:{
        -: 6955:    jerry_value_t array = jerry_create_array (10);
        -: 6956:
        -: 6957:    ...
        -: 6958:
        -: 6959:    jerry_release_value (array);
        -: 6960:}
        -: 6961:```
        -: 6962:
        -: 6963:**See also**
        -: 6964:
        -: 6965:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 6966:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 6967:
        -: 6968:
        -: 6969:## jerry_create_arraybuffer
        -: 6970:
        -: 6971:**Summary**
        -: 6972:
        -: 6973:Create a jerry_value_t representing an ArrayBuffer object.
        -: 6974:
        -: 6975:*Note*:
        -: 6976:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 6977:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 6978:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6979:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 6980:  when it is no longer needed.
        -: 6981:
        -: 6982:**Prototype**
        -: 6983:
        -: 6984:```c
        -: 6985:jerry_value_t
        -: 6986:jerry_create_arraybuffer (jerry_length_t size);
        -: 6987:```
        -: 6988:
        -: 6989: - `size` - size of the backing store allocated for the array buffer **in bytes**.
        -: 6990: - return value - the new ArrayBuffer as a `jerry_value_t`
        -: 6991:
        -: 6992:*New in version 2.0*.
        -: 6993:
        -: 6994:**Example**
        -: 6995:
        -: 6996:```c
        -: 6997:{
        -: 6998:  jerry_value_t buffer_value = jerry_create_arraybuffer (15);
        -: 6999:
        -: 7000:  ... // use the ArrayBuffer
        -: 7001:
        -: 7002:  jerry_release_value (buffer_value);
        -: 7003:}
        -: 7004:```
        -: 7005:
        -: 7006:**See also**
        -: 7007:
        -: 7008:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 7009:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 7010:- [jerry_value_is_arraybuffer](#jerry_value_is_arraybuffer)
        -: 7011:- [jerry_release_value](#jerry_release_value)
        -: 7012:
        -: 7013:
        -: 7014:## jerry_create_arraybuffer_external
        -: 7015:
        -: 7016:**Summary**
        -: 7017:
        -: 7018:Creates a jerry_value_t representing an ArrayBuffer object with
        -: 7019:user specified back-buffer.
        -: 7020:
        -: 7021:User must pass a buffer pointer which is at least `size` big.
        -: 7022:After the object is not needed the GC will call the `free_cb`
        -: 7023:so the user can release the buffer which was provided.
        -: 7024:
        -: 7025:*Note*:
        -: 7026:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 7027:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 7028:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 7029:- If `buffer_p` is NULL, the buffer is allocated by the allocator callback passed to
        -: 7030:  [jerry_arraybuffer_set_allocator_callbacks](#jerry_arraybuffer_set_allocator_callbacks)
        -: 7031:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7032:  when it is no longer needed.
        -: 7033:
        -: 7034:**Prototype**
        -: 7035:
        -: 7036:```c
        -: 7037:jerry_value_t
        -: 7038:jerry_create_arraybuffer_external (const jerry_length_t size
        -: 7039:                                   uint8_t *buffer_p, void *arraybuffer_user_p);
        -: 7040:```
        -: 7041:
        -: 7042:- `size` - size of the buffer **in bytes**.
        -: 7043:- `buffer_p` - the backing store used by the array buffer object.
        -: 7044:- `arraybuffer_user_p` - user pointer assigned to the array buffer object.
        -: 7045:- return value
        -: 7046:  - value of the newly construced array buffer object.
        -: 7047:
        -: 7048:*New in version 2.0*.
        -: 7049:
        -: 7050:*Changed in version [[NEXT_RELEASE]]*: `free_cb` has been replaced by `arraybuffer_user_p`.
        -: 7051:
        -: 7052:**Example**
        -: 7053:
        -: 7054:```c
        -: 7055:{
        -: 7056:  uint8_t buffer_p[15];
        -: 7057:  jerry_value_t buffer_value = jerry_create_arraybuffer_external (15, buffer_p, NULL);
        -: 7058:
        -: 7059:  ... // use the array buffer
        -: 7060:
        -: 7061:  jerry_release_value (buffer_value);
        -: 7062:}
        -: 7063:```
        -: 7064:
        -: 7065:**See also**
        -: 7066:
        -: 7067:- [jerry_get_arraybuffer_pointer](#jerry_get_arraybuffer_pointer)
        -: 7068:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 7069:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 7070:- [jerry_value_is_arraybuffer](#jerry_value_is_arraybuffer)
        -: 7071:- [jerry_release_value](#jerry_release_value)
        -: 7072:- [jerry_object_native_free_callback_t](#jerry_object_native_free_callback_t)
        -: 7073:
        -: 7074:
        -: 7075:## jerry_create_shared_arraybuffer
        -: 7076:
        -: 7077:**Summary**
        -: 7078:
        -: 7079:Create a jerry_value_t representing a SharedArrayBuffer object.
        -: 7080:
        -: 7081:*Note*:
        -: 7082:- This API depends on a build option (`JERRY_BUILTIN_SHAREDARRAYBUFFER`).
        -: 7083:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7084:  when it is no longer needed.
        -: 7085:
        -: 7086:**Prototype**
        -: 7087:
        -: 7088:```c
        -: 7089:jerry_value_t
        -: 7090:jerry_create_shared_arraybuffer (jerry_length_t size);
        -: 7091:```
        -: 7092:
        -: 7093:- `size` - size of the backing store allocated for the shared array buffer **in bytes**.
        -: 7094:- return value - the new SharedArrayBuffer as a `jerry_value_t`
        -: 7095:
        -: 7096:*New in version [[NEXT_RELEASE]]*.
        -: 7097:
        -: 7098:**Example**
        -: 7099:
        -: 7100:```c
        -: 7101:{
        -: 7102:  jerry_value_t buffer_value = jerry_create_shared_arraybuffer (15);
        -: 7103:
        -: 7104:  ... // use the SharedArrayBuffer
        -: 7105:
        -: 7106:  jerry_release_value (buffer_value);
        -: 7107:}
        -: 7108:```
        -: 7109:
        -: 7110:**See also**
        -: 7111:
        -: 7112:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 7113:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 7114:- [jerry_value_is_shared_arraybuffer](#jerry_value_is_shared_arraybuffer)
        -: 7115:- [jerry_release_value](#jerry_release_value)
        -: 7116:
        -: 7117:
        -: 7118:## jerry_create_shared_arraybuffer_external
        -: 7119:
        -: 7120:**Summary**
        -: 7121:
        -: 7122:Creates a jerry_value_t representing an SharedArrayBuffer object with
        -: 7123:user specified back-buffer.
        -: 7124:
        -: 7125:User must pass a buffer pointer which is at least `size` big.
        -: 7126:After the object is not needed the GC will call the `free_cb`
        -: 7127:so the user can release the buffer which was provided.
        -: 7128:
        -: 7129:*Note*:
        -: 7130:- This API depends on a build option (`JERRY_BUILTIN_SHAREDARRAYBUFFER`).
        -: 7131:- If `buffer_p` is NULL, the buffer is allocated by the allocator callback passed to
        -: 7132:  [jerry_arraybuffer_set_allocator_callbacks](#jerry_arraybuffer_set_allocator_callbacks)
        -: 7133:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7134:  when it is no longer needed.
        -: 7135:
        -: 7136:**Prototype**
        -: 7137:
        -: 7138:```c
        -: 7139:jerry_value_t
        -: 7140:jerry_create_shared_arraybuffer_external (const jerry_length_t size
        -: 7141:                                          uint8_t *buffer_p,
        -: 7142:                                          jerry_value_free_callback_t free_cb);
        -: 7143:```
        -: 7144:
        -: 7145:- `size` - size of the buffer **in bytes**.
        -: 7146:- `buffer_p` - the backing store used by the shared array buffer object.
        -: 7147:- `arraybuffer_user_p` - user pointer assigned to the shared array buffer object.
        -: 7148:- return value
        -: 7149:    - value of the newly construced shared array buffer object.
        -: 7150:
        -: 7151:*New in version [[NEXT_RELEASE]]*.
        -: 7152:
        -: 7153:**Example**
        -: 7154:
        -: 7155:```c
        -: 7156:{
        -: 7157:  uint8_t buffer_p[15];
        -: 7158:  jerry_value_t buffer_value = jerry_create_shared_arraybuffer_external (15, buffer_p, NULL);
        -: 7159:
        -: 7160:  ... // use the shared array buffer
        -: 7161:
        -: 7162:  jerry_release_value (buffer_value);
        -: 7163:}
        -: 7164:```
        -: 7165:
        -: 7166:**See also**
        -: 7167:
        -: 7168:- [jerry_get_arraybuffer_pointer](#jerry_get_arraybuffer_pointer)
        -: 7169:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 7170:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 7171:- [jerry_value_is_shared_arraybuffer](#jerry_value_is_shared_arraybuffer)
        -: 7172:- [jerry_release_value](#jerry_release_value)
        -: 7173:- [jerry_object_native_free_callback_t](#jerry_object_native_free_callback_t)
        -: 7174:
        -: 7175:
        -: 7176:## jerry_create_boolean
        -: 7177:
        -: 7178:**Summary**
        -: 7179:
        -: 7180:Create a jerry_value_t representing a boolean value from the given boolean parameter.
        -: 7181:
        -: 7182:*Notes*:
        -: 7183:- The boolean values (true/false) are fixed constants. Their values can be copied any number of times without calling
        -: 7184: [jerry_acquire_value](#jerry_acquire_value), and freeing it with [jerry_release_value](#jerry_release_value) is optional.
        -: 7185:
        -: 7186:**Prototype**
        -: 7187:
        -: 7188:```c
        -: 7189:jerry_value_t
        -: 7190:jerry_create_boolean (bool value);
        -: 7191:```
        -: 7192:
        -: 7193:- `value` - raw boolean value.
        -: 7194:- return value - a `jerry_value_t` created from the given boolean argument.
        -: 7195:
        -: 7196:**Example**
        -: 7197:
        -: 7198:```c
        -: 7199:{
        -: 7200:  jerry_value_t boolean_value = jerry_create_boolean (true);
        -: 7201:
        -: 7202:  ... // usage of the value
        -: 7203:
        -: 7204:  jerry_release_value (boolean_value);
        -: 7205:}
        -: 7206:```
        -: 7207:
        -: 7208:**See also**
        -: 7209:
        -: 7210:- [jerry_release_value](#jerry_release_value)
        -: 7211:
        -: 7212:
        -: 7213:## jerry_create_error
        -: 7214:
        -: 7215:**Summary**
        -: 7216:
        -: 7217:Create new JavaScript error object.
        -: 7218:
        -: 7219:Important! The `error_type` argument *must not be* `JERRY_ERROR_NONE`.
        -: 7220:Creating an error with no error type is not valid.
        -: 7221:
        -: 7222:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7223:is no longer needed.
        -: 7224:
        -: 7225:**Prototype**
        -: 7226:
        -: 7227:```c
        -: 7228:jerry_value_t
        -: 7229:jerry_create_error (jerry_error_t error_type,
        -: 7230:                    const jerry_char_t *message_p);
        -: 7231:```
        -: 7232:
        -: 7233:- `error_type` - type of error
        -: 7234:- `message_p` - value of 'message' property of constructed error object
        -: 7235:- return value - value of the constructed error object
        -: 7236:
        -: 7237:**Example**
        -: 7238:
        -: 7239:```c
        -: 7240:{
        -: 7241:  jerry_value_t error_obj = jerry_create_error (JERRY_ERROR_TYPE,
        -: 7242:                                                (const jerry_char_t *) "error");
        -: 7243:
        -: 7244:  ... // usage of error_obj
        -: 7245:
        -: 7246:
        -: 7247:  jerry_release_value (error_obj);
        -: 7248:}
        -: 7249:```
        -: 7250:
        -: 7251:**See also**
        -: 7252:
        -: 7253:- [jerry_value_is_error](#jerry_value_is_error)
        -: 7254:- [jerry_get_value_from_error](#jerry_get_value_from_error)
        -: 7255:- [jerry_create_error_from_value](#jerry_create_error_from_value)
        -: 7256:
        -: 7257:
        -: 7258:## jerry_create_error_sz
        -: 7259:
        -: 7260:**Summary**
        -: 7261:
        -: 7262:Create new JavaScript error object.
        -: 7263:
        -: 7264:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7265:is no longer needed.
        -: 7266:
        -: 7267:**Prototype**
        -: 7268:
        -: 7269:```c
        -: 7270:jerry_value_t
        -: 7271:jerry_create_error_sz (jerry_error_t error_type,
        -: 7272:                       const jerry_char_t *message_p,
        -: 7273:                       jerry_size_t message_size);
        -: 7274:```
        -: 7275:
        -: 7276:- `error_type` - type of the error
        -: 7277:- `message_p` - value of 'message' property of the constructed error object
        -: 7278:- `message_size` - size of the message in bytes
        -: 7279:- return value - value of the constructed error object
        -: 7280:
        -: 7281:**Example**
        -: 7282:
        -: 7283:```c
        -: 7284:{
        -: 7285:  const jerry_char_t message[] = "error";
        -: 7286:  jerry_value_t error_obj = jerry_create_error_sz (JERRY_ERROR_COMMON,
        -: 7287:                                                   message,
        -: 7288:                                                   sizeof (message) - 1);
        -: 7289:
        -: 7290:  ... // usage of error_obj
        -: 7291:
        -: 7292:  jerry_release_value (error_obj);
        -: 7293:}
        -: 7294:```
        -: 7295:
        -: 7296:**See also**
        -: 7297:
        -: 7298:- [jerry_create_error](#jerry_create_error)
        -: 7299:
        -: 7300:
        -: 7301:## jerry_create_dataview
        -: 7302:
        -: 7303:**Summary**
        -: 7304:
        -: 7305:Create new JavaScript DataView object.
        -: 7306:
        -: 7307:*Note*:
        -: 7308:  - This API depends on the es.next profile.
        -: 7309:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7310:    when it is no longer needed.
        -: 7311:
        -: 7312:**Prototype**
        -: 7313:
        -: 7314:```c
        -: 7315:jerry_value_t
        -: 7316:jerry_create_dataview (const jerry_value_t array_buffer,
        -: 7317:                       const jerry_length_t byte_offset,
        -: 7318:                       const jerry_length_t byte_length)
        -: 7319:```
        -: 7320:
        -: 7321:- `array_buffer` - arrayBuffer to create DataView from
        -: 7322:- `byte_offset` - offset in bytes, to the first byte in the buffer
        -: 7323:- `byte_length` - number of elements in the byte array
        -: 7324:- return value
        -: 7325:  - value of the constructed DataView object - if success
        -: 7326:  - created error - otherwise
        -: 7327:
        -: 7328:*New in version 2.0*.
        -: 7329:
        -: 7330:**Example**
        -: 7331:
        -: 7332:[doctest]: # ()
        -: 7333:
        -: 7334:```c
        -: 7335:#include "jerryscript.h"
        -: 7336:
        -: 7337:int
    #####: 7338:main (void)
        -: 7339:{
    #####: 7340:  jerry_init (JERRY_INIT_EMPTY);
        -: 7341:
    #####: 7342:  jerry_value_t arraybuffer = jerry_create_arraybuffer (16);
    #####: 7343:  jerry_value_t dataview = jerry_create_dataview (arraybuffer, 0, 16);
        -: 7344:
        -: 7345:  // usage of dataview
        -: 7346:
    #####: 7347:  jerry_release_value (dataview);
    #####: 7348:  jerry_release_value (arraybuffer);
        -: 7349:
    #####: 7350:  jerry_cleanup ();
        -: 7351:  return 0;
        -: 7352:}
        -: 7353:```
        -: 7354:
        -: 7355:**See also**
        -: 7356:
        -: 7357:- [jerry_value_is_dataview](#jerry_value_is_dataview)
        -: 7358:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -: 7359:
        -: 7360:
        -: 7361:## jerry_create_external_function
        -: 7362:
        -: 7363:**Summary**
        -: 7364:
        -: 7365:Create an external function object.
        -: 7366:
        -: 7367:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7368:is no longer needed.
        -: 7369:
        -: 7370:**Prototype**
        -: 7371:
        -: 7372:```c
        -: 7373:jerry_value_t
        -: 7374:jerry_create_external_function (jerry_external_handler_t handler_p);
        -: 7375:```
        -: 7376:
        -: 7377:- `handler_p` - pointer to native handler of the function object
        -: 7378:- return value - value of the constructed function object
        -: 7379:
        -: 7380:**Example**
        -: 7381:
        -: 7382:[doctest]: # ()
        -: 7383:
        -: 7384:```c
        -: 7385:#include <stdio.h>
        -: 7386:#include <string.h>
        -: 7387:#include "jerryscript.h"
        -: 7388:
        -: 7389:static jerry_value_t
    #####: 7390:handler (const jerry_call_info_t *call_info_p,
        -: 7391:         const jerry_value_t args_p[],
        -: 7392:         const jerry_length_t args_cnt)
        -: 7393:{
    #####: 7394:  printf ("Native handler called!\n");
        -: 7395:
    #####: 7396:  return jerry_create_boolean (true);
        -: 7397:}
        -: 7398:
        -: 7399:int
    #####: 7400:main (void)
        -: 7401:{
    #####: 7402:  jerry_init (JERRY_INIT_EMPTY);
        -: 7403:
    #####: 7404:  jerry_value_t func_val = jerry_create_external_function (handler);
    #####: 7405:  jerry_value_t glob_obj = jerry_get_global_object ();
        -: 7406:
        -: 7407:  // after this, script can invoke the native handler through "handler_field (1, 2, 3);"
    #####: 7408:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "handler_field");
        -: 7409:  // set property and release the return value without any check
    #####: 7410:  jerry_release_value (jerry_set_property (glob_obj, prop_name, func_val));
    #####: 7411:  jerry_release_value (prop_name);
        -: 7412:
    #####: 7413:  jerry_release_value (func_val);
    #####: 7414:  jerry_release_value (glob_obj);
        -: 7415:
        -: 7416:  // Test the method by calling it
    #####: 7417:  const char *test_src = "handler_field ();";
    #####: 7418:  jerry_value_t ret_val = jerry_eval ((const jerry_char_t *) test_src,
        -: 7419:                                      strlen (test_src),
        -: 7420:                                      JERRY_PARSE_NO_OPTS);
        -: 7421:  // release the eval result
    #####: 7422:  jerry_release_value (ret_val);
    #####: 7423:  jerry_cleanup ();
        -: 7424:  return 0;
        -: 7425:}
        -: 7426:```
        -: 7427:
        -: 7428:**See also**
        -: 7429:
        -: 7430:- [jerry_external_handler_t](#jerry_external_handler_t)
        -: 7431:- [jerry_set_property](#jerry_set_property)
        -: 7432:- [jerry_call_function](#jerry_call_function)
        -: 7433:
        -: 7434:
        -: 7435:## jerry_create_number
        -: 7436:
        -: 7437:**Summary**
        -: 7438:
        -: 7439:Creates a `jerry_value_t` representing a number value.
        -: 7440:
        -: 7441:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7442:is no longer needed.
        -: 7443:
        -: 7444:**Prototype**
        -: 7445:
        -: 7446:```c
        -: 7447:jerry_value_t
        -: 7448:jerry_create_number (double value);
        -: 7449:```
        -: 7450:
        -: 7451:- `value` - double value from which a `jerry_value_t` will be created
        -: 7452:- return value - a `jerry_value_t` created from the given double argument
        -: 7453:
        -: 7454:**Example**
        -: 7455:
        -: 7456:```c
        -: 7457:{
        -: 7458:  jerry_value_t number_value = jerry_create_number (3.14);
        -: 7459:
        -: 7460:  ... // usage of the value
        -: 7461:
        -: 7462:  jerry_release_value (number_value);
        -: 7463:}
        -: 7464:```
        -: 7465:
        -: 7466:**See also**
        -: 7467:
        -: 7468:- [jerry_release_value](#jerry_release_value)
        -: 7469:- [jerry_create_number_infinity](#jerry_create_number_infinity)
        -: 7470:- [jerry_create_number_nan](#jerry_create_number_nan)
        -: 7471:
        -: 7472:
        -: 7473:## jerry_create_number_infinity
        -: 7474:
        -: 7475:**Summary**
        -: 7476:
        -: 7477:Creates a `jerry_value_t` representing a positive or negative infinity value.
        -: 7478:
        -: 7479:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7480:is no longer needed.
        -: 7481:
        -: 7482:**Prototype**
        -: 7483:
        -: 7484:```c
        -: 7485:jerry_value_t
        -: 7486:jerry_create_number_infinity (bool sign);
        -: 7487:```
        -: 7488:
        -: 7489:- `sign` - true for negative Infinity and false for positive Infinity
        -: 7490:- return value - a `jerry_value_t` representing the infinity value
        -: 7491:
        -: 7492:**Example**
        -: 7493:
        -: 7494:```c
        -: 7495:{
        -: 7496:  jerry_value_t positive_inf_value = jerry_create_number_infinity (false);
        -: 7497:
        -: 7498:  ... // usage of the positive_inf_value
        -: 7499:
        -: 7500:  jerry_release_value (positive_inf_value);
        -: 7501:}
        -: 7502:```
        -: 7503:
        -: 7504:**See also**
        -: 7505:
        -: 7506:- [jerry_release_value](#jerry_release_value)
        -: 7507:- [jerry_create_number](#jerry_create_number)
        -: 7508:- [jerry_create_number_nan](#jerry_create_number_nan)
        -: 7509:
        -: 7510:
        -: 7511:## jerry_create_number_nan
        -: 7512:
        -: 7513:**Summary**
        -: 7514:
        -: 7515:Creates a `jerry_value_t` representing a not-a-number value.
        -: 7516:
        -: 7517:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7518:is no longer needed.
        -: 7519:
        -: 7520:**Prototype**
        -: 7521:
        -: 7522:```c
        -: 7523:jerry_value_t
        -: 7524:jerry_create_number_nan (void);
        -: 7525:```
        -: 7526:
        -: 7527:- return value - a `jerry_value_t` representing the not-a-number value
        -: 7528:
        -: 7529:**Example**
        -: 7530:
        -: 7531:```c
        -: 7532:{
        -: 7533:  jerry_value_t nan_value = jerry_create_number_nan ();
        -: 7534:
        -: 7535:  ... // usage of the nan_value
        -: 7536:
        -: 7537:  jerry_release_value (nan_value);
        -: 7538:}
        -: 7539:```
        -: 7540:
        -: 7541:**See also**
        -: 7542:
        -: 7543:- [jerry_release_value](#jerry_release_value)
        -: 7544:- [jerry_create_number](#jerry_create_number)
        -: 7545:- [jerry_create_number_infinity](#jerry_create_number_infinity)
        -: 7546:
        -: 7547:
        -: 7548:## jerry_create_null
        -: 7549:
        -: 7550:**Summary**
        -: 7551:
        -: 7552:Creates and returns a `jerry_value_t` with type null object.
        -: 7553:
        -: 7554:*Notes*:
        -: 7555:- The null value is a fixed constant. Its value can be copied any number of times without calling
        -: 7556: [jerry_acquire_value](#jerry_acquire_value), and freeing it with [jerry_release_value](#jerry_release_value) is optional.
        -: 7557:
        -: 7558:**Prototype**
        -: 7559:
        -: 7560:```c
        -: 7561:jerry_value_t
        -: 7562:jerry_create_null (void);
        -: 7563:```
        -: 7564:
        -: 7565:- return value - a `jerry_value_t` representing null.
        -: 7566:
        -: 7567:**Example**
        -: 7568:
        -: 7569:```c
        -: 7570:{
        -: 7571:  jerry_value_t null_value = jerry_create_null ();
        -: 7572:
        -: 7573:  ... // usage of the value
        -: 7574:
        -: 7575:  jerry_release_value (null_value);
        -: 7576:}
        -: 7577:```
        -: 7578:
        -: 7579:**See also**
        -: 7580:
        -: 7581:- [jerry_release_value](#jerry_release_value)
        -: 7582:
        -: 7583:
        -: 7584:## jerry_create_object
        -: 7585:
        -: 7586:**Summary**
        -: 7587:
        -: 7588:Create new JavaScript object, like with new Object().
        -: 7589:
        -: 7590:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7591:is no longer needed.
        -: 7592:
        -: 7593:**Prototype**
        -: 7594:
        -: 7595:```c
        -: 7596:jerry_value_t
        -: 7597:jerry_create_object (void);
        -: 7598:```
        -: 7599:
        -: 7600:- return value - value of the created object
        -: 7601:
        -: 7602:**Example**
        -: 7603:
        -: 7604:```c
        -: 7605:{
        -: 7606:  jerry_value_t object_value = jerry_create_object ();
        -: 7607:
        -: 7608:  ... // usage of object_value
        -: 7609:
        -: 7610:  jerry_release_value (object_value);
        -: 7611:}
        -: 7612:```
        -: 7613:
        -: 7614:**See also**
        -: 7615:
        -: 7616:- [jerry_release_value](#jerry_release_value)
        -: 7617:
        -: 7618:
        -: 7619:## jerry_create_promise
        -: 7620:
        -: 7621:**Summary**
        -: 7622:
        -: 7623:Create an empty promise object which can be resolved or rejected later
        -: 7624:by calling jerry_resolve_or_reject_promise.
        -: 7625:
        -: 7626:*Note*:
        -: 7627:  - This API depends on the es.next profile.
        -: 7628:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7629:    when it is no longer needed.
        -: 7630:
        -: 7631:**Prototype**
        -: 7632:
        -: 7633:```c
        -: 7634:jerry_value_t
        -: 7635:jerry_create_promise (void)
        -: 7636:```
        -: 7637:
        -: 7638:- return value - value of the newly created promise
        -: 7639:
        -: 7640:*New in version 2.0*.
        -: 7641:
        -: 7642:**Example**
        -: 7643:
        -: 7644:```c
        -: 7645:{
        -: 7646:  jerry_value_t p = jerry_create_promise ();
        -: 7647:
        -: 7648:  ...// usage of the promise
        -: 7649:
        -: 7650:  jerry_release_value (p);
        -: 7651:}
        -: 7652:```
        -: 7653:
        -: 7654:**See also**
        -: 7655:
        -: 7656:- [jerry_resolve_or_reject_promise](#jerry_resolve_or_reject_promise)
        -: 7657:- [jerry_release_value](#jerry_release_value)
        -: 7658:
        -: 7659:
        -: 7660:## jerry_create_proxy
        -: 7661:
        -: 7662:**Summary**
        -: 7663:
        -: 7664:Create a new Proxy object with the given target and handler.
        -: 7665:
        -: 7666:*Note*:
        -: 7667:  - This API depends on the es.next profile.
        -: 7668:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7669:    when it is no longer needed.
        -: 7670:
        -: 7671:**Prototype**
        -: 7672:
        -: 7673:```c
        -: 7674:jerry_value_t
        -: 7675:jerry_create_proxy (const jerry_value_t target,
        -: 7676:                    const jerry_value_t handler);
        -: 7677:```
        -: 7678:
        -: 7679:- `target` - proxy target
        -: 7680:- `handler` - proxy handler
        -: 7681:- return thrown error - if the Proxy construction fails
        -: 7682:         value of the newly created proxy object - otherwise
        -: 7683:
        -: 7684:*New in version 2.3*.
        -: 7685:
        -: 7686:**Example**
        -: 7687:
        -: 7688:[doctest]: # ()
        -: 7689:
        -: 7690:```c
        -: 7691:#include "jerryscript.h"
        -: 7692:
        -: 7693:int
    #####: 7694:main (void)
        -: 7695:{
    #####: 7696:  jerry_init (JERRY_INIT_EMPTY);
        -: 7697:
    #####: 7698:  jerry_value_t target = jerry_create_object ();
    #####: 7699:  jerry_value_t handler = jerry_create_object ();
    #####: 7700:  jerry_value_t proxy = jerry_create_proxy (target, handler);
        -: 7701:
    #####: 7702:  jerry_release_value (target);
    #####: 7703:  jerry_release_value (handler);
        -: 7704:
        -: 7705:  // usage of the proxy
        -: 7706:
    #####: 7707:  jerry_release_value (proxy);
        -: 7708:
    #####: 7709:  jerry_cleanup ();
        -: 7710:}
        -: 7711:```
        -: 7712:
        -: 7713:**See also**
        -: 7714:
        -: 7715:- [jerry_value_is_proxy](#jerry_value_is_proxy)
        -: 7716:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 7717:- [jerry_release_value](#jerry_release_value)
        -: 7718:
        -: 7719:
        -: 7720:## jerry_create_special_proxy
        -: 7721:
        -: 7722:**Summary**
        -: 7723:
        -: 7724:Create a new Proxy object with the given target and handler.
        -: 7725:The behaviour of the Proxy can be specialized with an options argument.
        -: 7726:
        -: 7727:*Note*:
        -: 7728:  - This API depends on the es.next profile.
        -: 7729:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7730:    when it is no longer needed.
        -: 7731:
        -: 7732:**Prototype**
        -: 7733:
        -: 7734:```c
        -: 7735:jerry_value_t
        -: 7736:jerry_create_special_proxy (const jerry_value_t target,
        -: 7737:                            const jerry_value_t handler,
        -: 7738:                            uint32_t options);
        -: 7739:```
        -: 7740:
        -: 7741:- `target` - proxy target
        -: 7742:- `handler` - proxy handler
        -: 7743:- `options` - any combination of [jerry_proxy_object_options_t](#jerry_proxy_object_options_t) options
        -: 7744:- return thrown error - if the Proxy construction fails
        -: 7745:         value of the newly created proxy object - otherwise
        -: 7746:
        -: 7747:*New in version [[NEXT_RELEASE]]*.
        -: 7748:
        -: 7749:**Example**
        -: 7750:
        -: 7751:[doctest]: # ()
        -: 7752:
        -: 7753:```c
        -: 7754:#include "jerryscript.h"
        -: 7755:
        -: 7756:int
    #####: 7757:main (void)
        -: 7758:{
    #####: 7759:  jerry_init (JERRY_INIT_EMPTY);
        -: 7760:
    #####: 7761:  jerry_value_t target = jerry_create_object ();
    #####: 7762:  jerry_value_t handler = jerry_create_object ();
    #####: 7763:  jerry_value_t proxy = jerry_create_special_proxy (target, handler, JERRY_PROXY_SKIP_RESULT_VALIDATION);
        -: 7764:
    #####: 7765:  jerry_release_value (target);
    #####: 7766:  jerry_release_value (handler);
        -: 7767:
        -: 7768:  // usage of the proxy
        -: 7769:
    #####: 7770:  jerry_release_value (proxy);
        -: 7771:
    #####: 7772:  jerry_cleanup ();
        -: 7773:}
        -: 7774:```
        -: 7775:
        -: 7776:**See also**
        -: 7777:
        -: 7778:- [jerry_value_is_proxy](#jerry_value_is_proxy)
        -: 7779:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 7780:- [jerry_release_value](#jerry_release_value)
        -: 7781:
        -: 7782:
        -: 7783:## jerry_create_string
        -: 7784:
        -: 7785:**Summary**
        -: 7786:
        -: 7787:Create string from a valid CESU8 string.
        -: 7788:
        -: 7789:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7790:is no longer needed.
        -: 7791:
        -: 7792:**Prototype**
        -: 7793:
        -: 7794:```c
        -: 7795:jerry_value_t
        -: 7796:jerry_create_string (const jerry_char_t *str_p);
        -: 7797:```
        -: 7798:
        -: 7799:- `str_p` - non-null pointer to string
        -: 7800:- return value - value of the created string
        -: 7801:
        -: 7802:**Example**
        -: 7803:
        -: 7804:```c
        -: 7805:{
        -: 7806:  const jerry_char_t char_array[] = "a string";
        -: 7807:  jerry_value_t string_value  = jerry_create_string (char_array);
        -: 7808:
        -: 7809:  ... // usage of string_value
        -: 7810:
        -: 7811:  jerry_release_value (string_value);
        -: 7812:}
        -: 7813:```
        -: 7814:
        -: 7815:**See also**
        -: 7816:
        -: 7817:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 7818:- [jerry_create_string_sz](#jerry_create_string_sz)
        -: 7819:
        -: 7820:
        -: 7821:## jerry_create_string_sz
        -: 7822:
        -: 7823:**Summary**
        -: 7824:
        -: 7825:Create string from a valid CESU8 string.
        -: 7826:
        -: 7827:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7828:is no longer needed.
        -: 7829:
        -: 7830:**Prototype**
        -: 7831:
        -: 7832:```c
        -: 7833:jerry_value_t
        -: 7834:jerry_create_string_sz (const jerry_char_t *str_p,
        -: 7835:                        jerry_size_t str_size)
        -: 7836:```
        -: 7837:
        -: 7838:- `str_p` - non-null pointer to string
        -: 7839:- `str_size` - size of the string
        -: 7840:- return value - value of the created string
        -: 7841:
        -: 7842:**Example**
        -: 7843:
        -: 7844:```c
        -: 7845:{
        -: 7846:  const jerry_char_t char_array[] = "a string";
        -: 7847:  jerry_value_t string_value  = jerry_create_string_sz (char_array,
        -: 7848:                                                        sizeof (char_array) - 1);
        -: 7849:
        -: 7850:  ... // usage of string_value
        -: 7851:
        -: 7852:  jerry_release_value (string_value);
        -: 7853:}
        -: 7854:
        -: 7855:```
        -: 7856:
        -: 7857:**See also**
        -: 7858:
        -: 7859:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 7860:- [jerry_create_string](#jerry_create_string)
        -: 7861:
        -: 7862:
        -: 7863:## jerry_create_string_from_utf8
        -: 7864:
        -: 7865:**Summary**
        -: 7866:
        -: 7867:Create string from a valid UTF8 string.
        -: 7868:
        -: 7869:*Note*:
        -: 7870: - The difference from [jerry_create_string](#jerry_create_string) is that it accepts utf-8 string instead of cesu-8 string.
        -: 7871: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7872:is no longer needed.
        -: 7873:
        -: 7874:**Prototype**
        -: 7875:
        -: 7876:```c
        -: 7877:jerry_value_t
        -: 7878:jerry_create_string_from_utf8 (const jerry_char_t *str_p);
        -: 7879:```
        -: 7880:
        -: 7881:- `str_p` - non-null pointer to string
        -: 7882:- return value - value of the created string
        -: 7883:
        -: 7884:*New in version 2.0*.
        -: 7885:
        -: 7886:**Example**
        -: 7887:
        -: 7888:```c
        -: 7889:{
        -: 7890:  const jerry_char_t char_array[] = "a string";
        -: 7891:  jerry_value_t string_value  = jerry_create_string_from_utf8 (char_array);
        -: 7892:
        -: 7893:  ... // usage of string_value
        -: 7894:
        -: 7895:  jerry_release_value (string_value);
        -: 7896:}
        -: 7897:```
        -: 7898:
        -: 7899:**See also**
        -: 7900:
        -: 7901:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 7902:- [jerry_create_string_sz_from_utf8](#jerry_create_string_sz_from_utf8)
        -: 7903:
        -: 7904:
        -: 7905:## jerry_create_string_sz_from_utf8
        -: 7906:
        -: 7907:**Summary**
        -: 7908:
        -: 7909:Create string from a valid UTF8 string.
        -: 7910:
        -: 7911:*Note*:
        -: 7912: - The difference from [jerry_create_string_sz](#jerry_create_string_sz) is that it accepts utf-8 string instead of cesu-8 string.
        -: 7913: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7914:is no longer needed.
        -: 7915:
        -: 7916:**Prototype**
        -: 7917:
        -: 7918:```c
        -: 7919:jerry_value_t
        -: 7920:jerry_create_string_sz_from_utf8 (const jerry_char_t *str_p,
        -: 7921:                                  jerry_size_t str_size)
        -: 7922:```
        -: 7923:
        -: 7924:- `str_p` - non-null pointer to string
        -: 7925:- `str_size` - size of the string
        -: 7926:- return value - value of the created string
        -: 7927:
        -: 7928:*New in version 2.0*.
        -: 7929:
        -: 7930:**Example**
        -: 7931:
        -: 7932:```c
        -: 7933:{
        -: 7934:  const jerry_char_t char_array[] = "a string";
        -: 7935:  jerry_value_t string_value  = jerry_create_string_sz_from_utf8 (char_array,
        -: 7936:                                                                  sizeof (char_array) - 1);
        -: 7937:
        -: 7938:  ... // usage of string_value
        -: 7939:
        -: 7940:  jerry_release_value (string_value);
        -: 7941:}
        -: 7942:
        -: 7943:```
        -: 7944:
        -: 7945:**See also**
        -: 7946:
        -: 7947:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 7948:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 7949:
        -: 7950:
        -: 7951:## jerry_create_external_string
        -: 7952:
        -: 7953:**Summary**
        -: 7954:
        -: 7955:Create an external string from a valid CESU8 string. The string buffer passed to the function
        -: 7956:should not be modified until the free callback is called. This function can be used to avoid
        -: 7957:the duplication of large strings.
        -: 7958:
        -: 7959:*Note*:
        -: 7960: - The free callback can be set by [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -: 7961: - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7962:   when it is no longer needed.
        -: 7963:
        -: 7964:**Prototype**
        -: 7965:
        -: 7966:```c
        -: 7967:jerry_value_t
        -: 7968:jerry_create_external_string (const jerry_char_t *str_p, void *user_p);
        -: 7969:```
        -: 7970:
        -: 7971:- `str_p` - non-null pointer to string
        -: 7972:- `user_p` - user pointer passed to the callback when the string is freed
        -: 7973:- return value - value of the created string
        -: 7974:
        -: 7975:*New in version 2.4*.
        -: 7976:
        -: 7977:*Changed in version [[NEXT_RELEASE]]*: `free_cb` is replaced by `user_p`.
        -: 7978:
        -: 7979:**Example**
        -: 7980:
        -: 7981:```c
        -: 7982:{
        -: 7983:  const char* string_p = "a large and immutable string: this is a story about ....";
        -: 7984:  jerry_value_t string_value  = jerry_create_external_string ((const jerry_char_t *) string_p,
        -: 7985:                                                              NULL);
        -: 7986:
        -: 7987:  ... // usage of string_value
        -: 7988:
        -: 7989:  jerry_release_value (string_value);
        -: 7990:}
        -: 7991:```
        -: 7992:
        -: 7993:**See also**
        -: 7994:
        -: 7995:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 7996:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -: 7997:- [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -: 7998:
        -: 7999:
        -: 8000:## jerry_create_external_string_sz
        -: 8001:
        -: 8002:**Summary**
        -: 8003:
        -: 8004:Create an external string from a valid CESU8 string. The string buffer passed to the function
        -: 8005:should not be modified until the free callback is called. This function can be used to avoid
        -: 8006:the duplication of large strings.
        -: 8007:
        -: 8008:*Note*:
        -: 8009: - The free callback can be set by [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -: 8010: - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8011:   when it is no longer needed.
        -: 8012:
        -: 8013:**Prototype**
        -: 8014:
        -: 8015:```c
        -: 8016:jerry_value_t
        -: 8017:jerry_create_external_string_sz (const jerry_char_t *str_p,
        -: 8018:                                 jerry_size_t str_size,
        -: 8019:                                 void *user_p);
        -: 8020:```
        -: 8021:
        -: 8022:- `str_p` - non-null pointer to string
        -: 8023:- `str_size` - size of the string
        -: 8024:- `user_p` - user pointer passed to the callback when the string is freed
        -: 8025:- return value - value of the created string
        -: 8026:
        -: 8027:*New in version 2.4*.
        -: 8028:
        -: 8029:*Changed in version [[NEXT_RELEASE]]*: `free_cb` is replaced by `user_p`.
        -: 8030:
        -: 8031:**Example**
        -: 8032:
        -: 8033:```c
        -: 8034:{
        -: 8035:  const char* string_p = "a large and immutable string: this is a story about ....";
        -: 8036:  jerry_value_t string_value  = jerry_create_external_string_sz ((const jerry_char_t *) string_p,
        -: 8037:                                                                 strlen (string_p),
        -: 8038:                                                                 NULL);
        -: 8039:
        -: 8040:  ... // usage of string_value
        -: 8041:
        -: 8042:  jerry_release_value (string_value);
        -: 8043:}
        -: 8044:
        -: 8045:```
        -: 8046:
        -: 8047:**See also**
        -: 8048:
        -: 8049:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 8050:- [jerry_create_external_string](#jerry_create_external_string)
        -: 8051:- [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -: 8052:
        -: 8053:
        -: 8054:## jerry_create_symbol
        -: 8055:
        -: 8056:**Summary**
        -: 8057:
        -: 8058:Create symbol from an API value.
        -: 8059:
        -: 8060:*Note*:
        -: 8061:  - The given argument is converted to string. This operation can throw an error.
        -: 8062:  - This API depends on the es.next profile.
        -: 8063:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8064:    when it is no longer needed.
        -: 8065:
        -: 8066:**Prototype**
        -: 8067:
        -: 8068:```c
        -: 8069:jerry_value_t
        -: 8070:jerry_create_symbol (const jerry_value_t value)
        -: 8071:```
        -: 8072:
        -: 8073:- `value` - API value
        -: 8074:- return value
        -: 8075:  - value of the created symbol, if success
        -: 8076:  - thrown error, otherwise
        -: 8077:
        -: 8078:*New in version 2.0*.
        -: 8079:
        -: 8080:**Example**
        -: 8081:
        -: 8082:[doctest]: # ()
        -: 8083:
        -: 8084:```c
        -: 8085:#include "jerryscript.h"
        -: 8086:
        -: 8087:int
    #####: 8088:main (void)
        -: 8089:{
    #####: 8090:  jerry_init (JERRY_INIT_EMPTY);
        -: 8091:
    #####: 8092:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "Symbol description string");
    #####: 8093:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 8094:
        -: 8095:  // The description value is no longer needed
    #####: 8096:  jerry_release_value (string_value);
        -: 8097:
        -: 8098:  // usage of symbol_value
        -: 8099:
    #####: 8100:  jerry_release_value (symbol_value);
        -: 8101:
    #####: 8102:  jerry_cleanup ();
        -: 8103:}
        -: 8104:```
        -: 8105:
        -: 8106:**See also**
        -: 8107:
        -: 8108:- [jerry_value_is_symbol](#jerry_value_is_symbol)
        -: 8109:- [jerry_release_value](#jerry_release_value)
        -: 8110:
        -: 8111:
        -: 8112:## jerry_create_bigint
        -: 8113:
        -: 8114:**Summary**
        -: 8115:
        -: 8116:Create BigInt value from uint64 digits
        -: 8117:
        -: 8118:*Note*:
        -: 8119:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 8120:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 8121:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8122:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8123:  when it is no longer needed.
        -: 8124:
        -: 8125:**Prototype**
        -: 8126:
        -: 8127:```c
        -: 8128:jerry_value_t
        -: 8129:jerry_create_bigint (const uint64_t *digits_p, uint32_t size, bool sign)
        -: 8130:```
        -: 8131:
        -: 8132:- `digits_p` - array of uint64 digits, least significant digit first
        -: 8133:- `size` - size of the `digits_p` array
        -: 8134:- `sign` - false if the created value should be positive, and true if the created value should be negative
        -: 8135:- return value
        -: 8136:  - value of the created bigint, if success
        -: 8137:  - thrown error, otherwise
        -: 8138:
        -: 8139:*New in version 2.4*.
        -: 8140:
        -: 8141:**Example**
        -: 8142:
        -: 8143:[doctest]: # ()
        -: 8144:
        -: 8145:```c
        -: 8146:#include "jerryscript.h"
        -: 8147:
        -: 8148:int
    #####: 8149:main (void)
        -: 8150:{
    #####: 8151:  jerry_init (JERRY_INIT_EMPTY);
        -: 8152:
    #####: 8153:  uint64_t digits[2] = { 0x1, 0x1 };
    #####: 8154:  jerry_value_t bigint_value = jerry_create_bigint (digits, 2, true);
        -: 8155:
        -: 8156:  // usage of bigint_value
        -: 8157:
    #####: 8158:  jerry_release_value (bigint_value);
        -: 8159:
    #####: 8160:  jerry_cleanup ();
        -: 8161:}
        -: 8162:```
        -: 8163:
        -: 8164:**See also**
        -: 8165:
        -: 8166:- [jerry_release_value](#jerry_release_value)
        -: 8167:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 8168:- [jerry_get_bigint_digits](#jerry_get_bigint_digits)
        -: 8169:
        -: 8170:
        -: 8171:## jerry_create_regexp
        -: 8172:
        -: 8173:**Summary**
        -: 8174:
        -: 8175:Returns a `jerry_value_t` RegExp object or an error, if the construction of the object fails.
        -: 8176:Optional flags can be set using [jerry_regexp_flags_t](#jerry_regexp_flags_t).
        -: 8177:These flags can be combined together with the binary OR operator or used on their own as enum values.
        -: 8178:
        -: 8179:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8180:is no longer needed.
        -: 8181:
        -: 8182:**Prototype**
        -: 8183:```c
        -: 8184:jerry_value_t
        -: 8185:jerry_create_regexp (const jerry_char_t *pattern_p, uint16_t flags);
        -: 8186:```
        -: 8187:
        -: 8188:- `pattern_p` - the RegExp pattern as a zero-terminated UTF-8 string
        -: 8189:- `flags` - optional flags for the RegExp object, see [jerry_regexp_flags_t](#jerry_regexp_flags_t)
        -: 8190:- return value - the RegExp object as a `jerry_value_t`
        -: 8191:
        -: 8192:*New in version 2.0*.
        -: 8193:
        -: 8194:**Example**
        -: 8195:
        -: 8196:```c
        -: 8197:{
        -: 8198:  jerry_char_t pattern_p = "[cgt]gggtaaa|tttaccc[acg]";
        -: 8199:  uint16_t pattern_flags = JERRY_REGEXP_FLAG_IGNORE_CASE;
        -: 8200:
        -: 8201:  jerry_value_t regexp = jerry_create_regexp (pattern_p, pattern_flags);
        -: 8202:
        -: 8203:  ...
        -: 8204:
        -: 8205:  jerry_release_value (regexp);
        -: 8206:}
        -: 8207:```
        -: 8208:
        -: 8209:
        -: 8210:## jerry_create_regexp_sz
        -: 8211:
        -: 8212:**Summary**
        -: 8213:
        -: 8214:Returns a `jerry_value_t` RegExp object or an error, if the construction of the object fails.
        -: 8215:Optional flags can be set using [jerry_regexp_flags_t](#jerry_regexp_flags_t).
        -: 8216:These flags can be combined together with the binary OR operator or used on their own as enum values.
        -: 8217:
        -: 8218:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8219:is no longer needed.
        -: 8220:
        -: 8221:**Prototype**
        -: 8222:```c
        -: 8223:jerry_value_t
        -: 8224:jerry_create_regexp_sz (const jerry_char_t *pattern_p, jerry_size_t pattern_size, uint16_t flags);
        -: 8225:```
        -: 8226:
        -: 8227:- `pattern_p` - the RegExp pattern as a zero-terminated UTF-8 string
        -: 8228:- `pattern_size` - size of the `pattern`
        -: 8229:- `flags` - optional flags for the RegExp object, see [jerry_regexp_flags_t](#jerry_regexp_flags_t)
        -: 8230:- return value - the RegExp object as a `jerry_value_t`
        -: 8231:
        -: 8232:*New in version 2.0*.
        -: 8233:
        -: 8234:**Example**
        -: 8235:
        -: 8236:```c
        -: 8237:{
        -: 8238:  jerry_char_t pattern_p = "[cgt]gggtaaa|tttaccc[acg]";
        -: 8239:  jerry_size_t pattern_size = sizeof (pattern_p) - 1;
        -: 8240:  uint16_t pattern_flags = JERRY_REGEXP_FLAG_IGNORE_CASE;
        -: 8241:
        -: 8242:  jerry_value_t regexp = jerry_create_regexp_sz (pattern_p, pattern_size, pattern_flags);
        -: 8243:
        -: 8244:  ...
        -: 8245:
        -: 8246:  jerry_release_value (regexp);
        -: 8247:}
        -: 8248:```
        -: 8249:
        -: 8250:
        -: 8251:## jerry_create_typedarray
        -: 8252:
        -: 8253:**Summary**
        -: 8254:
        -: 8255:Create a jerry_value_t representing an TypedArray object.
        -: 8256:
        -: 8257:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 8258:and element count can be specified.
        -: 8259:
        -: 8260:*Notes*:
        -: 8261:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8262:  when it is no longer needed.
        -: 8263:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 8264:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 8265:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8266:- The es.next profile enables this by default.
        -: 8267:
        -: 8268:**Prototype**
        -: 8269:
        -: 8270:```c
        -: 8271:jerry_value_t
        -: 8272:jerry_create_typedarray (jerry_typedarray_type_t type_name, jerry_length_t item_count);
        -: 8273:```
        -: 8274:
        -: 8275:- `type_name` - type of TypedArray to create
        -: 8276:- `item_count` - number of items in the new TypedArray
        -: 8277:- return value - the new TypedArray as a `jerry_value_t`
        -: 8278:
        -: 8279:*New in version 2.0*.
        -: 8280:
        -: 8281:**Example**
        -: 8282:
        -: 8283:```c
        -: 8284:{
        -: 8285:  jerry_value_t array = jerry_create_typedarray (JERRY_TYPEDARRAY_UINT16, 15);
        -: 8286:
        -: 8287:  ... // use the TypedArray
        -: 8288:
        -: 8289:  jerry_release_value (array);
        -: 8290:}
        -: 8291:```
        -: 8292:
        -: 8293:**See also**
        -: 8294:
        -: 8295:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 8296:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 8297:- [jerry_release_value](#jerry_release_value)
        -: 8298:
        -: 8299:
        -: 8300:## jerry_create_typedarray_for_arraybuffer
        -: 8301:
        -: 8302:**Summary**
        -: 8303:
        -: 8304:Create a jerry_value_t representing an TypedArray object using
        -: 8305:an already existing ArrayBuffer object.
        -: 8306:
        -: 8307:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 8308:and element count can be specified.
        -: 8309:
        -: 8310:The developer must ensure that the ArrayBuffer has the correct length for the given
        -: 8311:type of TypedArray otherwise an error is generated.
        -: 8312:
        -: 8313:The JavaScript equivalent of this function is: `new %TypedArray%(arraybuffer)` where `%TypedArray%` is
        -: 8314:one of the allowed TypedArray functions.
        -: 8315:
        -: 8316:*Notes*:
        -: 8317:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8318:  when it is no longer needed.
        -: 8319:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 8320:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 8321:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8322:- The es.next profile enables this by default.
        -: 8323:
        -: 8324:**Prototype**
        -: 8325:
        -: 8326:```c
        -: 8327:jerry_value_t
        -: 8328:jerry_create_typedarray_for_arraybuffer (jerry_typedarray_type_t type_name,
        -: 8329:                                         const jerry_value_t arraybuffer);
        -: 8330:```
        -: 8331:
        -: 8332:- `type_name` - type of TypedArray to create
        -: 8333:- `arraybuffer` - the ArrayBuffer to use for the new TypedArray
        -: 8334:- return value
        -: 8335:  - the new TypedArray as a `jerry_value_t`
        -: 8336:  - Error if the ArrayBuffer does not have enough space for the given type of TypedArray
        -: 8337:
        -: 8338:*New in version 2.0*.
        -: 8339:
        -: 8340:**Example**
        -: 8341:
        -: 8342:```c
        -: 8343:{
        -: 8344:  jerry_value_t buffer = jerry_create_array_buffer (12 * 2);
        -: 8345:  jerry_value_t array = jerry_create_typedarray_for_arraybuffer (JERRY_TYPEDARRAY_UINT16, buffer);
        -: 8346:  jerry_release_value (buffer);
        -: 8347:
        -: 8348:  ... // use the TypedArray
        -: 8349:
        -: 8350:  jerry_release_value (array);
        -: 8351:}
        -: 8352:```
        -: 8353:
        -: 8354:**See also**
        -: 8355:
        -: 8356:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 8357:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 8358:- [jerry_release_value](#jerry_release_value)
        -: 8359:
        -: 8360:
        -: 8361:## jerry_create_typedarray_for_arraybuffer_sz
        -: 8362:
        -: 8363:**Summary**
        -: 8364:
        -: 8365:Create a jerry_value_t representing an TypedArray object using
        -: 8366:an already existing ArrayBuffer object and by specifying the byteOffset, and length properties.
        -: 8367:
        -: 8368:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 8369:and element count can be specified.
        -: 8370:
        -: 8371:The developer must ensure that the ArrayBuffer has the correct length for the given
        -: 8372:type of TypedArray otherwise an error is generated.
        -: 8373:
        -: 8374:The JavaScript equivalent of this function is: `new %TypedArray%(arraybuffer, byteOffset, length)` where `%TypedArray%` is
        -: 8375:one of the allowed TypedArray functions.
        -: 8376:
        -: 8377:*Notes*:
        -: 8378:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8379:  when it is no longer needed.
        -: 8380:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 8381:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 8382:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8383:- The es.next profile enables this by default.
        -: 8384:
        -: 8385:**Prototype**
        -: 8386:
        -: 8387:```c
        -: 8388:jerry_value_t
        -: 8389:jerry_create_typedarray_for_arraybuffer_sz (jerry_typedarray_type_t type_name,
        -: 8390:                                            const jerry_value_t arraybuffer,
        -: 8391:                                            jerry_length_t byte_offset,
        -: 8392:                                            jerry_length_t length);
        -: 8393:```
        -: 8394:
        -: 8395:- `type_name` - type of TypedArray to create
        -: 8396:- `arraybuffer` - the ArrayBuffer to use for the new TypedArray
        -: 8397:- `byte_offset` - start offset to use for the ArrayBuffer
        -: 8398:- `length` - number of elements to used from the ArrayBuffer (this is not the same as the byteLength)
        -: 8399:- return value
        -: 8400:  - the new TypedArray as a `jerry_value_t`
        -: 8401:  - Error if the ArrayBuffer does not have enough space for the given type of TypedArray
        -: 8402:
        -: 8403:*New in version 2.0*.
        -: 8404:
        -: 8405:**Example**
        -: 8406:
        -: 8407:```c
        -: 8408:{
        -: 8409:  jerry_value_t buffer = jerry_create_array_buffer (12 * 2);
        -: 8410:  jerry_value_t array = jerry_create_typedarray_for_arraybuffer_sz (JERRY_TYPEDARRAY_UINT16, buffer, 4, 10);
        -: 8411:  jerry_release_value (buffer);
        -: 8412:
        -: 8413:  ... // use the TypedArray
        -: 8414:
        -: 8415:  jerry_release_value (array);
        -: 8416:}
        -: 8417:```
        -: 8418:
        -: 8419:**See also**
        -: 8420:
        -: 8421:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 8422:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 8423:- [jerry_release_value](#jerry_release_value)
        -: 8424:
        -: 8425:
        -: 8426:## jerry_create_container
        -: 8427:
        -: 8428:**Summary**
        -: 8429:
        -: 8430:Create a jerry_value_t representing a given type container object.
        -: 8431:
        -: 8432:*Notes*:
        -: 8433:- This method is expected to work the same way as the JavaScript Map constructor.
        -: 8434:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8435:  when it is no longer needed.
        -: 8436:- This API depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -: 8437:  in runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -: 8438:  feature enum values.
        -: 8439:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8440:- The es.next profile enables this by default.
        -: 8441:
        -: 8442:**Prototype**
        -: 8443:
        -: 8444:```c
        -: 8445:jerry_value_t
        -: 8446:jerry_create_container (jerry_container_type_t container_type,
        -: 8447:                        const jerry_value_t *arguments_list_p,
        -: 8448:                        jerry_length_t arguments_list_len);
        -: 8449:```
        -: 8450:
        -: 8451:- `container_type` - Type of the container to be created, see `jerry_container_type_t`.
        -: 8452:- `arguments_list_p` - The arguments passed to the container constructor to be inserted to the container.
        -: 8453:- `arguments_list_len` - The length of the above arguments.
        -: 8454:- return value - the new container object as a `jerry_value_t`
        -: 8455:
        -: 8456:*New in version 2.3*.
        -: 8457:
        -: 8458:**Example**
        -: 8459:
        -: 8460:[doctest]: # ()
        -: 8461:
        -: 8462:```c
        -: 8463:#include "jerryscript.h"
        -: 8464:
        -: 8465:int
    #####: 8466:main (void)
        -: 8467:{
    #####: 8468:  jerry_init (JERRY_INIT_EMPTY);
    #####: 8469:  jerry_char_t src[] = "[1,2,3,4].entries()";
    #####: 8470:  jerry_value_t iterable = jerry_eval (src, sizeof (src) - 1, JERRY_PARSE_NO_OPTS);
        -: 8471:
    #####: 8472:  jerry_value_t map = jerry_create_container (JERRY_CONTAINER_TYPE_MAP, &iterable, 1);
    #####: 8473:  jerry_release_value (iterable);
        -: 8474:
        -: 8475:  // use the Map
        -: 8476:
    #####: 8477:  jerry_release_value (map);
        -: 8478:
    #####: 8479:  jerry_cleanup ();
        -: 8480:  return 0;
        -: 8481:}
        -: 8482:```
        -: 8483:
        -: 8484:**See also**
        -: 8485:
        -: 8486:- [jerry_container_type_t](#jerry_container_type_t)
        -: 8487:- [jerry_get_container_type](#jerry_get_container_type)
        -: 8488:
        -: 8489:
        -: 8490:## jerry_create_undefined
        -: 8491:
        -: 8492:**Summary**
        -: 8493:
        -: 8494:Creates a `jerry_value_t` representing an undefined value.
        -: 8495:
        -: 8496:*Notes*:
        -: 8497:- The undefined value is a fixed constant. Its value can be copied any number of times without calling [jerry_acquire_value](#jerry_acquire_value), and freeing it with [jerry_release_value](#jerry_release_value) is optional.
        -: 8498:
        -: 8499:
        -: 8500:**Prototype**
        -: 8501:
        -: 8502:```c
        -: 8503:jerry_value_t
        -: 8504:jerry_create_undefined (void);
        -: 8505:```
        -: 8506:
        -: 8507:- return value - value of undefined
        -: 8508:
        -: 8509:**Example**
        -: 8510:
        -: 8511:```c
        -: 8512:{
        -: 8513:  jerry_value_t undefined_value = jerry_create_undefined ();
        -: 8514:
        -: 8515:  ... // usage of the value
        -: 8516:
        -: 8517:  jerry_release_value (undefined_value);
        -: 8518:}
        -: 8519:```
        -: 8520:
        -: 8521:**See also**
        -: 8522:
        -: 8523:- [jerry_release_value](#jerry_release_value)
        -: 8524:
        -: 8525:
        -: 8526:## jerry_create_realm
        -: 8527:
        -: 8528:**Summary**
        -: 8529:
        -: 8530:Creates a `jerry_value_t` representing a new global object.
        -: 8531:
        -: 8532:*Notes*:
        -: 8533:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8534:  when it is no longer needed.
        -: 8535:- This API depends on a build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -: 8536:  in runtime with the `JERRY_FEATURE_REALM` feature enum value.
        -: 8537:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8538:- The es.next profile enables this by default.
        -: 8539:
        -: 8540:**Prototype**
        -: 8541:
        -: 8542:```c
        -: 8543:jerry_value_t
        -: 8544:jerry_create_realm (void);
        -: 8545:```
        -: 8546:
        -: 8547:- return value - realm object value
        -: 8548:
        -: 8549:*New in version 2.4*.
        -: 8550:
        -: 8551:**Example**
        -: 8552:
        -: 8553:[doctest]: # ()
        -: 8554:
        -: 8555:```c
        -: 8556:#include "jerryscript.h"
        -: 8557:
        -: 8558:int
    #####: 8559:main (void)
        -: 8560:{
    #####: 8561:  jerry_init (JERRY_INIT_EMPTY);
        -: 8562:
    #####: 8563:  jerry_value_t realm_value = jerry_create_realm ();
        -: 8564:
        -: 8565:  // usage of the value
        -: 8566:
    #####: 8567:  jerry_release_value (realm_value);
    #####: 8568:  jerry_cleanup ();
        -: 8569:
        -: 8570:  return 0;
        -: 8571:}
        -: 8572:```
        -: 8573:
        -: 8574:**See also**
        -: 8575:
        -: 8576:- [jerry_release_value](#jerry_release_value)
        -: 8577:
        -: 8578:
        -: 8579:# General API functions of JS objects
        -: 8580:
        -: 8581:## jerry_has_property
        -: 8582:
        -: 8583:**Summary**
        -: 8584:
        -: 8585:Checks whether the object or its prototype objects have the given property.
        -: 8586:
        -: 8587:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8588:is no longer needed.
        -: 8589:
        -: 8590:**Prototype**
        -: 8591:
        -: 8592:```c
        -: 8593:jerry_value_t
        -: 8594:jerry_has_property (const jerry_value_t obj_val,
        -: 8595:                    const jerry_value_t prop_name_val);
        -: 8596:```
        -: 8597:
        -: 8598:- `obj_val` - object value
        -: 8599:- `prop_name_val` - property name
        -: 8600:- return value - JavaScript value that evaluates to
        -: 8601:  -  raised error - if the operation fail
        -: 8602:  -  true/false API value  - depend on whether the property exists
        -: 8603:
        -: 8604:*Changed in version 2.0*: The return value type is now a JavaScript value and not a primitive boolean value.
        -: 8605:
        -: 8606:*Changed in version 2.3*: The return value can be an error value.
        -: 8607:
        -: 8608:**Example**
        -: 8609:
        -: 8610:[doctest]: # ()
        -: 8611:
        -: 8612:```c
        -: 8613:#include "jerryscript.h"
        -: 8614:
        -: 8615:int
    #####: 8616:main (void)
        -: 8617:{
    #####: 8618:  jerry_init (JERRY_INIT_EMPTY);
        -: 8619:
    #####: 8620:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8621:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "handler_field");
        -: 8622:
    #####: 8623:  jerry_value_t has_prop_js = jerry_has_property (global_object, prop_name);
    #####: 8624:  bool has_prop = jerry_value_is_true (has_prop_js);
        -: 8625:
    #####: 8626:  jerry_release_value (has_prop_js);
    #####: 8627:  jerry_release_value (prop_name);
    #####: 8628:  jerry_release_value (global_object);
        -: 8629:
    #####: 8630:  jerry_cleanup ();
        -: 8631:
        -: 8632:  return 0;
        -: 8633:}
        -: 8634:```
        -: 8635:
        -: 8636:**See also**
        -: 8637:
        -: 8638:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8639:- [jerry_delete_property](#jerry_delete_property)
        -: 8640:
        -: 8641:
        -: 8642:## jerry_has_own_property
        -: 8643:
        -: 8644:**Summary**
        -: 8645:
        -: 8646:Checks whether the object has the given property.
        -: 8647:
        -: 8648:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8649:is no longer needed.
        -: 8650:
        -: 8651:**Prototype**
        -: 8652:
        -: 8653:```c
        -: 8654:jerry_value_t
        -: 8655:jerry_has_own_property (const jerry_value_t obj_val,
        -: 8656:                        const jerry_value_t prop_name_val);
        -: 8657:```
        -: 8658:
        -: 8659:- `obj_val` - object value
        -: 8660:- `prop_name_val` - property name
        -: 8661:- return value - JavaScript value that evaluates to
        -: 8662:  -  raised error - if the operation fails
        -: 8663:  -  true/false API value - depend on whether the property exists
        -: 8664:
        -: 8665:*Changed in version 2.0*: The return value type is now a JavaScript value and not a primitive boolean value.
        -: 8666:
        -: 8667:*Changed in version 2.3*: The return value can be an error value.
        -: 8668:
        -: 8669:**Example**
        -: 8670:
        -: 8671:[doctest]: # ()
        -: 8672:
        -: 8673:```c
        -: 8674:#include "jerryscript.h"
        -: 8675:
        -: 8676:int
    #####: 8677:main (void)
        -: 8678:{
    #####: 8679:  jerry_init (JERRY_INIT_EMPTY);
        -: 8680:
    #####: 8681:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8682:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "handler_field");
        -: 8683:
    #####: 8684:  jerry_value_t has_prop_js = jerry_has_own_property (global_object, prop_name);
    #####: 8685:  bool has_prop = jerry_value_is_true (has_prop_js);
        -: 8686:
    #####: 8687:  jerry_release_value (has_prop_js);
    #####: 8688:  jerry_release_value (prop_name);
    #####: 8689:  jerry_release_value (global_object);
        -: 8690:
    #####: 8691:  jerry_cleanup ();
        -: 8692:
        -: 8693:  return 0;
        -: 8694:}
        -: 8695:```
        -: 8696:
        -: 8697:**See also**
        -: 8698:
        -: 8699:- [jerry_has_property](#jerry_has_property)
        -: 8700:- [jerry_delete_property](#jerry_delete_property)
        -: 8701:
        -: 8702:
        -: 8703:## jerry_has_internal_property
        -: 8704:
        -: 8705:**Summary**
        -: 8706:
        -: 8707:Checks whether the object has the given internal property.
        -: 8708:
        -: 8709:*Note*:
        -: 8710: - Properties which were not created with [jerry_set_internal_property](#jerry_set_internal_property) are excluded
        -: 8711:   during the operation.
        -: 8712: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8713:is no longer needed.
        -: 8714:
        -: 8715:**Prototype**
        -: 8716:
        -: 8717:```c
        -: 8718:bool
        -: 8719:jerry_has_internal_property (const jerry_value_t obj_val,
        -: 8720:                             const jerry_value_t prop_name_val);
        -: 8721:```
        -: 8722:
        -: 8723:- `obj_val` - object value
        -: 8724:- `prop_name_val` - property name
        -: 8725:- return value
        -: 8726:  - true, if the property exists
        -: 8727:  - false, otherwise
        -: 8728:
        -: 8729:*New in version 2.2*.
        -: 8730:
        -: 8731:**Example**
        -: 8732:
        -: 8733:[doctest]: # ()
        -: 8734:
        -: 8735:```c
        -: 8736:#include "jerryscript.h"
        -: 8737:
        -: 8738:int
    #####: 8739:main (void)
        -: 8740:{
    #####: 8741:  jerry_init (JERRY_INIT_EMPTY);
        -: 8742:
    #####: 8743:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8744:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
        -: 8745:
    #####: 8746:  bool has_internal_js_prop = jerry_has_internal_property (global_object, prop_name);
        -: 8747:
    #####: 8748:  jerry_release_value (prop_name);
    #####: 8749:  jerry_release_value (global_object);
        -: 8750:
        -: 8751:  return 0;
        -: 8752:}
        -: 8753:```
        -: 8754:
        -: 8755:**See also**
        -: 8756:
        -: 8757:- [jerry_delete_internal_property](#jerry_delete_internal_property)
        -: 8758:- [jerry_get_internal_property](#jerry_get_internal_property)
        -: 8759:- [jerry_set_internal_property](#jerry_set_internal_property)
        -: 8760:
        -: 8761:
        -: 8762:## jerry_delete_property
        -: 8763:
        -: 8764:**Summary**
        -: 8765:
        -: 8766:Delete a property from an object.
        -: 8767:
        -: 8768:**Prototype**
        -: 8769:
        -: 8770:```c
        -: 8771:bool
        -: 8772:jerry_delete_property (const jerry_value_t obj_val,
        -: 8773:                       const jerry_value_t prop_name_val);
        -: 8774:```
        -: 8775:
        -: 8776:- `obj_val` - object value
        -: 8777:- `prop_name_val` - property name
        -: 8778:- return value
        -: 8779:  - true, if property was deleted successfully
        -: 8780:  - false, otherwise
        -: 8781:
        -: 8782:**Example**
        -: 8783:
        -: 8784:```c
        -: 8785:{
        -: 8786:  jerry_value_t global_object = jerry_get_global_object ();
        -: 8787:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
        -: 8788:
        -: 8789:  bool delete_result = jerry_delete_property (global_object, prop_name);
        -: 8790:  /* use "delete_result" */
        -: 8791:
        -: 8792:  jerry_release_value (prop_name);
        -: 8793:  jerry_release_value (global_object);
        -: 8794:}
        -: 8795:```
        -: 8796:
        -: 8797:**See also**
        -: 8798:
        -: 8799:- [jerry_has_property](#jerry_has_property)
        -: 8800:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8801:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 8802:- [jerry_get_property](#jerry_get_property)
        -: 8803:
        -: 8804:
        -: 8805:## jerry_delete_property_by_index
        -: 8806:
        -: 8807:**Summary**
        -: 8808:
        -: 8809:Delete indexed property from the specified object.
        -: 8810:
        -: 8811:**Prototype**
        -: 8812:
        -: 8813:```c
        -: 8814:bool
        -: 8815:jerry_delete_property_by_index (const jerry_value_t obj_val,
        -: 8816:                                uint32_t index);
        -: 8817:```
        -: 8818:
        -: 8819:- `obj_val` - object value
        -: 8820:- `index` - index number
        -: 8821:- return value
        -: 8822:  - true, if property was deleted successfully
        -: 8823:  - false, otherwise
        -: 8824:
        -: 8825:*New in version 2.0*.
        -: 8826:
        -: 8827:**Example**
        -: 8828:
        -: 8829:```c
        -: 8830:{
        -: 8831:  jerry_value_t object;
        -: 8832:
        -: 8833:  ... // create or acquire object
        -: 8834:
        -: 8835:  bool delete_result = jerry_delete_property_by_index (object, 5);
        -: 8836:
        -: 8837:  jerry_release_value (object);
        -: 8838:}
        -: 8839:```
        -: 8840:
        -: 8841:**See also**
        -: 8842:
        -: 8843:- [jerry_has_property](#jerry_has_property)
        -: 8844:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8845:- [jerry_delete_property](#jerry_delete_property)
        -: 8846:- [jerry_get_property](#jerry_get_property)
        -: 8847:- [jerry_set_property](#jerry_set_property)
        -: 8848:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 8849:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 8850:
        -: 8851:## jerry_delete_internal_property
        -: 8852:
        -: 8853:**Summary**
        -: 8854:
        -: 8855:Delete an internal property from an object.
        -: 8856:
        -: 8857:*Note*: Properties which were not created with [jerry_set_internal_property](#jerry_set_internal_property) are excluded
        -: 8858:        during the operation.
        -: 8859:
        -: 8860:**Prototype**
        -: 8861:
        -: 8862:```c
        -: 8863:bool
        -: 8864:jerry_delete_internal_property (const jerry_value_t obj_val,
        -: 8865:                                const jerry_value_t prop_name_val);
        -: 8866:```
        -: 8867:
        -: 8868:- `obj_val` - object value
        -: 8869:- `prop_name_val` - property name
        -: 8870:- return value
        -: 8871:  - true, if property was deleted successfully
        -: 8872:  - false, otherwise
        -: 8873:
        -: 8874:*New in version 2.2*.
        -: 8875:
        -: 8876:**Example**
        -: 8877:
        -: 8878:```c
        -: 8879:{
        -: 8880:  jerry_value_t global_object = jerry_get_global_object ();
        -: 8881:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
        -: 8882:
        -: 8883:  bool delete_result = jerry_delete_internal_property (global_object, prop_name);
        -: 8884:  /* use "delete_result" */
        -: 8885:
        -: 8886:  jerry_release_value (prop_name);
        -: 8887:  jerry_release_value (global_object);
        -: 8888:}
        -: 8889:```
        -: 8890:
        -: 8891:**See also**
        -: 8892:
        -: 8893:- [jerry_has_internal_property](#jerry_has_internal_property)
        -: 8894:- [jerry_get_internal_property](#jerry_get_internal_property)
        -: 8895:- [jerry_set_internal_property](#jerry_set_internal_property)
        -: 8896:
        -: 8897:
        -: 8898:## jerry_get_property
        -: 8899:
        -: 8900:**Summary**
        -: 8901:
        -: 8902:Get value of a property to the specified object with the given name.
        -: 8903:
        -: 8904:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8905:is no longer needed.
        -: 8906:
        -: 8907:**Prototype**
        -: 8908:
        -: 8909:```c
        -: 8910:jerry_value_t
        -: 8911:jerry_get_property (const jerry_value_t obj_val,
        -: 8912:                    const jerry_value_t prop_name_val);
        -: 8913:```
        -: 8914:
        -: 8915:- `obj_val` - object value
        -: 8916:- `prop_name_val` - property name
        -: 8917:- return value
        -: 8918:  - value of property, if success
        -: 8919:  - thrown error, otherwise
        -: 8920:
        -: 8921:**Example**
        -: 8922:
        -: 8923:[doctest]: # ()
        -: 8924:
        -: 8925:```c
        -: 8926:#include "jerryscript.h"
        -: 8927:
        -: 8928:int
    #####: 8929:main (void)
        -: 8930:{
    #####: 8931:  jerry_init (JERRY_INIT_EMPTY);
        -: 8932:
    #####: 8933:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8934:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "Object");
        -: 8935:
    #####: 8936:  jerry_value_t prop_value = jerry_get_property (global_object, prop_name);
        -: 8937:
        -: 8938:  /* use "prop_value" then release it. */
        -: 8939:
    #####: 8940:  jerry_release_value (prop_value);
    #####: 8941:  jerry_release_value (prop_name);
    #####: 8942:  jerry_release_value (global_object);
        -: 8943:
        -: 8944:  return 0;
        -: 8945:}
        -: 8946:```
        -: 8947:
        -: 8948:**See also**
        -: 8949:
        -: 8950:- [jerry_has_property](#jerry_has_property)
        -: 8951:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8952:- [jerry_delete_property](#jerry_delete_property)
        -: 8953:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 8954:- [jerry_set_property](#jerry_set_property)
        -: 8955:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 8956:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 8957:
        -: 8958:
        -: 8959:## jerry_get_property_by_index
        -: 8960:
        -: 8961:**Summary**
        -: 8962:
        -: 8963:Get value by an index from the specified object.
        -: 8964:
        -: 8965:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8966:is no longer needed.
        -: 8967:
        -: 8968:**Prototype**
        -: 8969:
        -: 8970:```c
        -: 8971:jerry_value_t
        -: 8972:jerry_get_property_by_index (const jerry_value_t obj_val,
        -: 8973:                             uint32_t index);
        -: 8974:```
        -: 8975:
        -: 8976:- `obj_val` - object value
        -: 8977:- `index` - index number
        -: 8978:- return value
        -: 8979:  - stored value on the specified index, if success
        -: 8980:  - thrown exception, otherwise.
        -: 8981:
        -: 8982:**Example**
        -: 8983:
        -: 8984:```c
        -: 8985:{
        -: 8986:  jerry_value_t object;
        -: 8987:
        -: 8988:  ... // create or acquire object
        -: 8989:
        -: 8990:  jerry_value_t value = jerry_get_property_by_index (object, 5);
        -: 8991:
        -: 8992:  ...
        -: 8993:
        -: 8994:  jerry_release_value (value);
        -: 8995:  jerry_release_value (object);
        -: 8996:}
        -: 8997:```
        -: 8998:
        -: 8999:**See also**
        -: 9000:
        -: 9001:- [jerry_has_property](#jerry_has_property)
        -: 9002:- [jerry_has_own_property](#jerry_has_own_property)
        -: 9003:- [jerry_delete_property](#jerry_delete_property)
        -: 9004:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 9005:- [jerry_get_property](#jerry_get_property)
        -: 9006:- [jerry_set_property](#jerry_set_property)
        -: 9007:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 9008:
        -: 9009:## jerry_get_own_property
        -: 9010:
        -: 9011:**Summary**
        -: 9012:
        -: 9013:Get the own property value of an object with the given name. The function tells
        -: 9014:whether the property is found, and the receiver object can be specified as well.
        -: 9015:The receiver is passed as the `this` argument for getters, and the receiver
        -: 9016:argument for Proxy `get` traps.
        -: 9017:
        -: 9018:*Notes*:
        -: 9019:  - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it is no longer needed.
        -: 9020:  - The `found_p` argument is ignored if its value is NULL.
        -: 9021:  - The target value of `found_p` argument is set to false when the arguments are invalid, e.g. `obj_val` is not an object.
        -: 9022:
        -: 9023:**Prototype**
        -: 9024:
        -: 9025:```c
        -: 9026:jerry_value_t
        -: 9027:jerry_get_own_property (const jerry_value_t obj_val,
        -: 9028:                        const jerry_value_t prop_name_val,
        -: 9029:                        const jerry_value_t receiver_val,
        -: 9030:                        bool *found_p);
        -: 9031:```
        -: 9032:
        -: 9033:- `obj_val` - object value
        -: 9034:- `prop_name_val` - property name
        -: 9035:- `receiver_val` - receiver object
        -: 9036:- `found_p` - [out] true, if the property is found or obj_val is a Proxy object, false otherwise
        -: 9037:- return value
        -: 9038:  - value of property, if success
        -: 9039:  - thrown error, otherwise
        -: 9040:
        -: 9041:**Example**
        -: 9042:
        -: 9043:[doctest]: # ()
        -: 9044:
        -: 9045:```c
        -: 9046:#include "jerryscript.h"
        -: 9047:#include "stdio.h"
        -: 9048:
        -: 9049:int
    #####: 9050:main (void)
        -: 9051:{
    #####: 9052:  jerry_init (JERRY_INIT_EMPTY);
        -: 9053:
    #####: 9054:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 9055:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "Object");
        -: 9056:
        -: 9057:  bool found;
    #####: 9058:  jerry_value_t prop_value = jerry_get_own_property (global_object, prop_name, global_object, &found);
        -: 9059:
    #####: 9060:  if (found)
        -: 9061:  {
        -: 9062:    printf ("Property is found!\n");
        -: 9063:  }
        -: 9064:
        -: 9065:  /* use "prop_value" then release it. */
        -: 9066:
    #####: 9067:  jerry_release_value (prop_value);
    #####: 9068:  jerry_release_value (prop_name);
    #####: 9069:  jerry_release_value (global_object);
        -: 9070:
        -: 9071:  return 0;
        -: 9072:}
        -: 9073:```
        -: 9074:
        -: 9075:**See also**
        -: 9076:
        -: 9077:- [jerry_get_property](#jerry_get_property)
        -: 9078:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 9079:
        -: 9080:## jerry_get_internal_property
        -: 9081:
        -: 9082:**Summary**
        -: 9083:
        -: 9084:Get value of an internal property to the specified object with the given name.
        -: 9085:
        -: 9086:*Note*:
        -: 9087: - Properties which were not created with [jerry_set_internal_property](#jerry_set_internal_property) are excluded
        -: 9088:   during the operation.
        -: 9089: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9090:   is no longer needed.
        -: 9091:
        -: 9092:**Prototype**
        -: 9093:
        -: 9094:```c
        -: 9095:jerry_value_t
        -: 9096:jerry_get_internal_property (const jerry_value_t obj_val,
        -: 9097:                             const jerry_value_t prop_name_val);
        -: 9098:```
        -: 9099:
        -: 9100:- `obj_val` - object value
        -: 9101:- `prop_name_val` - property name
        -: 9102:- return value
        -: 9103:  - value of property, if the internal property exists
        -: 9104:  - undefined value, if the, if the internal does not property exists
        -: 9105:  - thrown error, otherwise
        -: 9106:
        -: 9107:*New in version 2.2*.
        -: 9108:
        -: 9109:**Example**
        -: 9110:
        -: 9111:[doctest]: # ()
        -: 9112:
        -: 9113:```c
        -: 9114:#include "jerryscript.h"
        -: 9115:
        -: 9116:int
    #####: 9117:main (void)
        -: 9118:{
    #####: 9119:  jerry_init (JERRY_INIT_EMPTY);
        -: 9120:
    #####: 9121:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 9122:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
        -: 9123:
    #####: 9124:  jerry_value_t prop_value = jerry_get_internal_property (global_object, prop_name);
        -: 9125:
        -: 9126:  /* use "prop_value" then release it. */
        -: 9127:
    #####: 9128:  jerry_release_value (prop_value);
    #####: 9129:  jerry_release_value (prop_name);
    #####: 9130:  jerry_release_value (global_object);
        -: 9131:
        -: 9132:  return 0;
        -: 9133:}
        -: 9134:```
        -: 9135:
        -: 9136:**See also**
        -: 9137:
        -: 9138:- [jerry_has_internal_property](#jerry_has_internal_property)
        -: 9139:- [jerry_delete_internal_property](#jerry_delete_internal_property)
        -: 9140:- [jerry_set_internal_property](#jerry_set_internal_property)
        -: 9141:
        -: 9142:
        -: 9143:## jerry_set_property
        -: 9144:
        -: 9145:**Summary**
        -: 9146:
        -: 9147:Set a property to the specified object with the given name.
        -: 9148:
        -: 9149:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9150:is no longer needed.
        -: 9151:
        -: 9152:**Prototype**
        -: 9153:
        -: 9154:```c
        -: 9155:jerry_value_t
        -: 9156:jerry_set_property (const jerry_value_t obj_val,
        -: 9157:                    const jerry_value_t prop_name_val,
        -: 9158:                    const jerry_value_t value_to_set)
        -: 9159:```
        -: 9160:
        -: 9161:- `obj_val` - object value
        -: 9162:- `prop_name_val` - property name
        -: 9163:- `value_to_set` - value to set
        -: 9164:- return value
        -: 9165:  - true, if success
        -: 9166:  - thrown error, otherwise
        -: 9167:
        -: 9168:**Example**
        -: 9169:
        -: 9170:```c
        -: 9171:{
        -: 9172:  jerry_value_t value_to_set;
        -: 9173:
        -: 9174:  ... // create or acquire value to set
        -: 9175:
        -: 9176:  jerry_value_t glob_obj = jerry_get_global_object ();
        -: 9177:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
        -: 9178:
        -: 9179:  jerry_value_t set_result = jerry_set_property (glob_obj, prop_name, value_to_set);
        -: 9180:
        -: 9181:  ... // check result of property set call
        -: 9182:
        -: 9183:  jerry_release_value (set_result);
        -: 9184:  jerry_release_value (prop_name);
        -: 9185:
        -: 9186:  ...
        -: 9187:
        -: 9188:  jerry_release_value (value_to_set);
        -: 9189:  jerry_release_value (glob_obj);
        -: 9190:}
        -: 9191:```
        -: 9192:
        -: 9193:**See also**
        -: 9194:
        -: 9195:- [jerry_has_property](#jerry_has_property)
        -: 9196:- [jerry_has_own_property](#jerry_has_own_property)
        -: 9197:- [jerry_delete_property](#jerry_delete_property)
        -: 9198:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 9199:- [jerry_get_property](#jerry_get_property)
        -: 9200:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 9201:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 9202:
        -: 9203:
        -: 9204:## jerry_set_property_by_index
        -: 9205:
        -: 9206:**Summary**
        -: 9207:
        -: 9208:Set indexed value in the specified object
        -: 9209:
        -: 9210:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9211:is no longer needed.
        -: 9212:
        -: 9213:**Prototype**
        -: 9214:
        -: 9215:```c
        -: 9216:jerry_value_t
        -: 9217:jerry_set_property_by_index (const jerry_value_t obj_val,
        -: 9218:                             uint32_t index,
        -: 9219:                             const jerry_value_t value_to_set);
        -: 9220:```
        -: 9221:
        -: 9222:- `obj_val` - object value
        -: 9223:- `index` - index number
        -: 9224:- `value_to_set` - value to set
        -: 9225:- return value
        -: 9226:  - true, if field value was set successfully
        -: 9227:  - thrown exception, otherwise
        -: 9228:
        -: 9229:**Example**
        -: 9230:
        -: 9231:```c
        -: 9232:{
        -: 9233:  jerry_value_t object;
        -: 9234:  jerry_value_t value_to_set;
        -: 9235:
        -: 9236:  ... // create or acquire object and value to set
        -: 9237:
        -: 9238:  jerry_value_t ret_val = jerry_set_property_by_index (object, 5, value_to_set);
        -: 9239:
        -: 9240:  ...
        -: 9241:
        -: 9242:  jerry_release_value (value_to_set);
        -: 9243:  jerry_release_value (ret_val);
        -: 9244:  jerry_release_value (object);
        -: 9245:}
        -: 9246:```
        -: 9247:
        -: 9248:**See also**
        -: 9249:
        -: 9250:- [jerry_has_property](#jerry_has_property)
        -: 9251:- [jerry_has_own_property](#jerry_has_own_property)
        -: 9252:- [jerry_delete_property](#jerry_delete_property)
        -: 9253:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 9254:- [jerry_get_property](#jerry_get_property)
        -: 9255:- [jerry_set_property](#jerry_set_property)
        -: 9256:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 9257:
        -: 9258:
        -: 9259:## jerry_set_internal_property
        -: 9260:
        -: 9261:**Summary**
        -: 9262:
        -: 9263:Set an internal property to the specified object with the given name.
        -: 9264:
        -: 9265:*Note*:
        -: 9266: - The property cannot be accessed from the JavaScript context, only from the public API.
        -: 9267: - It is different from [jerry_set_object_native_pointer](#jerry_set_object_native_pointer) in that any jerry API value
        -: 9268:   can be hidden from the JavaScript context, not only native pointers.
        -: 9269:
        -: 9270:**Prototype**
        -: 9271:
        -: 9272:```c
        -: 9273:bool
        -: 9274:jerry_set_internal_property (const jerry_value_t obj_val,
        -: 9275:                             const jerry_value_t prop_name_val,
        -: 9276:                             const jerry_value_t value_to_set)
        -: 9277:```
        -: 9278:
        -: 9279:- `obj_val` - object value
        -: 9280:- `prop_name_val` - property name
        -: 9281:- `value_to_set` - value to set
        -: 9282:- return value
        -: 9283:  - true, if success
        -: 9284:  - thrown error, otherwise
        -: 9285:
        -: 9286:*New in version 2.2*.
        -: 9287:
        -: 9288:**Example**
        -: 9289:
        -: 9290:[doctest]: # ()
        -: 9291:
        -: 9292:```c
        -: 9293:#include "jerryscript.h"
        -: 9294:
        -: 9295:int
    #####: 9296:main (void)
        -: 9297:{
    #####: 9298:  jerry_init (JERRY_INIT_EMPTY);
        -: 9299:
    #####: 9300:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 9301:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
    #####: 9302:  jerry_value_t value_to_set = jerry_create_number (5);
        -: 9303:
    #####: 9304:  bool set_result = jerry_set_internal_property (global_object, prop_name, value_to_set);
        -: 9305:
        -: 9306:  /* check the result of internal property set call */
        -: 9307:
    #####: 9308:  jerry_release_value (value_to_set);
    #####: 9309:  jerry_release_value (prop_name);
    #####: 9310:  jerry_release_value (global_object);
        -: 9311:
        -: 9312:  return 0;
        -: 9313:}
        -: 9314:```
        -: 9315:
        -: 9316:**See also**
        -: 9317:
        -: 9318:- [jerry_has_internal_property](#jerry_has_internal_property)
        -: 9319:- [jerry_delete_internal_property](#jerry_delete_internal_property)
        -: 9320:- [jerry_get_internal_property](#jerry_get_internal_property)
        -: 9321:
        -: 9322:
        -: 9323:## jerry_property_descriptor_create
        -: 9324:
        -: 9325:**Summary**
        -: 9326:
        -: 9327:Create a property descriptor and initialize it with default values. This means that all fields in
        -: 9328:the `jerry_property_descriptor_t` struct will be set to zero or false depending on the field's type.
        -: 9329:
        -: 9330:**Prototype**
        -: 9331:
        -: 9332:```c
        -: 9333:jerry_property_descriptor_t
        -: 9334:jerry_property_descriptor_create (void);
        -: 9335:```
        -: 9336:
        -: 9337:*New in version [[NEXT_RELEASE]]*: Replaces `jerry_init_property_descriptor_fields`.
        -: 9338:
        -: 9339:**Example**
        -: 9340:
        -: 9341:```c
        -: 9342:{
        -: 9343:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9344:
        -: 9345:  ... // usage of prop_desc
        -: 9346:
        -: 9347:  jerry_property_descriptor_free (&prop_desc);
        -: 9348:}
        -: 9349:```
        -: 9350:
        -: 9351:For a more complete example see [jerry_define_own_property](#jerry_define_own_property).
        -: 9352:
        -: 9353:**See also**
        -: 9354:
        -: 9355:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 9356:- [jerry_define_own_property](#jerry_define_own_property)
        -: 9357:- [jerry_get_own_property_descriptor](#jerry_get_own_property_descriptor)
        -: 9358:- [jerry_property_descriptor_free](#jerry_property_descriptor_free)
        -: 9359:
        -: 9360:
        -: 9361:## jerry_define_own_property
        -: 9362:
        -: 9363:**Summary**
        -: 9364:
        -: 9365:Define a property to the specified object with the given name.
        -: 9366:
        -: 9367:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9368:is no longer needed.
        -: 9369:
        -: 9370:**Prototype**
        -: 9371:
        -: 9372:```c
        -: 9373:jerry_value_t
        -: 9374:jerry_define_own_property (const jerry_value_t obj_val,
        -: 9375:                           const jerry_value_t prop_name_val,
        -: 9376:                           const jerry_property_descriptor_t *prop_desc_p);
        -: 9377:```
        -: 9378:
        -: 9379:- `obj_val` - target object where the property should be registered
        -: 9380:- `prop_name_val` - property name
        -: 9381:- `prop_desc_p` - pointer to property descriptor
        -: 9382:- return value
        -: 9383:  - true, if success
        -: 9384:  - thrown error, otherwise
        -: 9385:
        -: 9386:**Example**
        -: 9387:
        -: 9388:Registering a simple value property via the `jerry_define_own_property` method:
        -: 9389:
        -: 9390:[doctest]: # (name="02.API-REFERENCE-define-property.c")
        -: 9391:
        -: 9392:```c
        -: 9393:#include "jerryscript.h"
        -: 9394:
        -: 9395:int
    #####: 9396:main (void)
        -: 9397:{
    #####: 9398:  jerry_init (JERRY_INIT_EMPTY);
        -: 9399:
    #####: 9400:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -: 9401:
        -: 9402:  // configure the property
    #####: 9403:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9404:
        -: 9405:  // create or acquire value to set
        -: 9406:  // For example:
    #####: 9407:  jerry_value_t value_to_set = jerry_create_number (33);
        -: 9408:
        -: 9409:  // set the property descriptor fields:
        -: 9410:  // set the "JERRY_PROP_IS_VALUE_DEFINED" flag to indicate the "value"
        -: 9411:  //  field should be used during the property registration.
        -: 9412:  // set the writable, configurable, enumerable flags to true
    #####: 9413:  prop_desc.flags |= (JERRY_PROP_IS_WRITABLE_DEFINED
        -: 9414:                      | JERRY_PROP_IS_WRITABLE
        -: 9415:                      | JERRY_PROP_IS_CONFIGURABLE_DEFINED
        -: 9416:                      | JERRY_PROP_IS_CONFIGURABLE
        -: 9417:                      | JERRY_PROP_IS_ENUMERABLE_DEFINED
        -: 9418:                      | JERRY_PROP_IS_ENUMERABLE
        -: 9419:                      | JERRY_PROP_IS_VALUE_DEFINED);
        -: 9420:
        -: 9421:  // set the "value" field to the number 33
    #####: 9422:  prop_desc.value = value_to_set;
        -: 9423:
        -: 9424:  // add the property as "my_prop" for the global object
    #####: 9425:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
    #####: 9426:  jerry_value_t return_value = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####: 9427:  if (jerry_value_is_error (return_value))
        -: 9428:  {
        -: 9429:    // there was an error
        -: 9430:  }
        -: 9431:
        -: 9432:  // re-define the property with the enumerable flag set to false
    #####: 9433:  prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_ENUMERABLE;
    #####: 9434:  return_value = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####: 9435:  if (jerry_value_is_error (return_value))
        -: 9436:  {
        -: 9437:    // there was an error
        -: 9438:  }
        -: 9439:
        -: 9440:  // if there was no error at this point the global object should have a "my_prop" property
        -: 9441:
    #####: 9442:  jerry_release_value (return_value);
    #####: 9443:  jerry_release_value (prop_name);
        -: 9444:
    #####: 9445:  jerry_property_descriptor_free (&prop_desc);
    #####: 9446:  jerry_release_value (global_obj_val);
        -: 9447:
    #####: 9448:  jerry_cleanup ();
        -: 9449:  return 0;
        -: 9450:}
        -: 9451:```
        -: 9452:
        -: 9453:
        -: 9454:Registering a getter/setter property via the `jerry_define_own_property` method:
        -: 9455:
        -: 9456:[doctest]: # (name="02.API-REFERENCE-define-property-getset.c")
        -: 9457:
        -: 9458:```c
        -: 9459:#include <stdio.h>
        -: 9460:#include <string.h>
        -: 9461:#include "jerryscript.h"
        -: 9462:
        -: 9463:static int counter = 0;
        -: 9464:
        -: 9465:static jerry_value_t
    #####: 9466:method_getter (const jerry_call_info_t *call_info_p,
        -: 9467:               const jerry_value_t args[],
        -: 9468:               const jerry_length_t argc)
        -: 9469:{
    #####: 9470:  counter++;
    #####: 9471:  printf("Getter called, returning: %d\n", counter);
        -: 9472:
    #####: 9473:  return jerry_create_number (counter);
        -: 9474:}
        -: 9475:
        -: 9476:static jerry_value_t
    #####: 9477:method_setter (const jerry_call_info_t *call_info_p,
        -: 9478:               const jerry_value_t args[],
        -: 9479:               const jerry_length_t argc)
        -: 9480:{
        -: 9481:  // Note: the arguments count and type should be checked
        -: 9482:  // in this example it is ommitted!
        -: 9483:
    #####: 9484:  double new_value = jerry_get_number_value (args[0]);
    #####: 9485:  counter = (int) new_value;
        -: 9486:
    #####: 9487:  printf("Setter called, setting: %d\n", counter);
        -: 9488:
    #####: 9489:  return jerry_create_undefined ();
        -: 9490:}
        -: 9491:
        -: 9492:int
    #####: 9493:main (void)
        -: 9494:{
    #####: 9495:  jerry_init (JERRY_INIT_EMPTY);
        -: 9496:
    #####: 9497:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -: 9498:
        -: 9499:  // configure the property
    #####: 9500:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9501:
        -: 9502:  // set the property descriptor fields:
        -: 9503:
    #####: 9504:  prop_desc.flags |= JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED;
    #####: 9505:  prop_desc.getter = jerry_create_external_function (method_getter);
    #####: 9506:  prop_desc.setter = jerry_create_external_function (method_setter);
        -: 9507:
        -: 9508:  // add the property as "my_prop" for the global object
    #####: 9509:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
    #####: 9510:  jerry_value_t return_value = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####: 9511:  if (jerry_value_is_error (return_value))
        -: 9512:  {
        -: 9513:    // there was an error
        -: 9514:  }
        -: 9515:
        -: 9516:  // if there was no error at this point the global object should have a "my_prop" property
        -: 9517:
    #####: 9518:  jerry_release_value (return_value);
    #####: 9519:  jerry_release_value (prop_name);
        -: 9520:
    #####: 9521:  jerry_property_descriptor_free (&prop_desc);
    #####: 9522:  jerry_release_value (global_obj_val);
        -: 9523:
        -: 9524:  // run an example js code to use the getter/setters
        -: 9525:
    #####: 9526:  const char *src_p = "this.my_prop; this.my_prop; this.my_prop = 4; this.my_prop";
    #####: 9527:  jerry_value_t eval_result = jerry_eval ((const jerry_char_t *) src_p, strlen (src_p), JERRY_PARSE_NO_OPTS);
        -: 9528:
        -: 9529:  // "eval_result" is the last result of "this.my_prop" that is "5" currently.
    #####: 9530:  double result_number = jerry_get_number_value (eval_result);
    #####: 9531:  printf("output: %lf\n", result_number);
        -: 9532:
    #####: 9533:  jerry_cleanup ();
        -: 9534:
    #####: 9535:  return result_number != 5.0;
        -: 9536:}
        -: 9537:```
        -: 9538:
        -: 9539:**See also**
        -: 9540:
        -: 9541:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 9542:- [jerry_property_descriptor_create](#jerry_property_descriptor_create)
        -: 9543:- [jerry_get_own_property_descriptor](#jerry_get_own_property_descriptor)
        -: 9544:- [jerry_property_descriptor_free](#jerry_property_descriptor_free)
        -: 9545:
        -: 9546:
        -: 9547:## jerry_get_own_property_descriptor
        -: 9548:
        -: 9549:**Summary**
        -: 9550:
        -: 9551:Construct property descriptor from specified property.
        -: 9552:
        -: 9553:**Prototype**
        -: 9554:
        -: 9555:```c
        -: 9556:jerry_value_t
        -: 9557:jerry_get_own_property_descriptor (const jerry_value_t  obj_val,
        -: 9558:                                   const jerry_value_t prop_name_val,
        -: 9559:                                   jerry_property_descriptor_t *prop_desc_p);
        -: 9560:```
        -: 9561:
        -: 9562:- `obj_val` - object value
        -: 9563:- `prop_name_val` - property name
        -: 9564:- `prop_desc_p` - pointer to property descriptor
        -: 9565:- return value
        -: 9566:
        -: 9567:*Changed in version [[NEXT_RELEASE]]*: Return value type is changed to `jerry_value_t`.
        -: 9568:
        -: 9569:**Example**
        -: 9570:
        -: 9571:```c
        -: 9572:{
        -: 9573:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -: 9574:
        -: 9575:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9576:
        -: 9577:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
        -: 9578:  jerry_get_own_property_descriptor (global_obj_val, prop_name, &prop_desc);
        -: 9579:  jerry_release_value (prop_name);
        -: 9580:
        -: 9581:  ... // usage of property descriptor
        -: 9582:
        -: 9583:  jerry_property_descriptor_free (&prop_desc);
        -: 9584:  jerry_release_value (global_obj_val);
        -: 9585:}
        -: 9586:```
        -: 9587:
        -: 9588:**See also**
        -: 9589:
        -: 9590:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 9591:- [jerry_property_descriptor_create](#jerry_property_descriptor_create)
        -: 9592:- [jerry_define_own_property](#jerry_define_own_property)
        -: 9593:- [jerry_property_descriptor_free](#jerry_property_descriptor_free)
        -: 9594:
        -: 9595:
        -: 9596:## jerry_property_descriptor_free
        -: 9597:
        -: 9598:**Summary**
        -: 9599:
        -: 9600:Free fields of property descriptor (setter, getter and value).
        -: 9601:
        -: 9602:**Prototype**
        -: 9603:
        -: 9604:```c
        -: 9605:void
        -: 9606:jerry_property_descriptor_free (const jerry_property_descriptor_t *prop_desc_p);
        -: 9607:```
        -: 9608:
        -: 9609:- `prop_desc_p` - pointer to property descriptor
        -: 9610:
        -: 9611:*New in version [[NEXT_RELEASE]]*: Replaces `jerry_free_property_descriptor_fields`.
        -: 9612:
        -: 9613:**Example**
        -: 9614:
        -: 9615:```c
        -: 9616:{
        -: 9617:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9618:
        -: 9619:  ... // usage of property descriptor
        -: 9620:
        -: 9621:  jerry_property_descriptor_free (&prop_desc);
        -: 9622:}
        -: 9623:```
        -: 9624:
        -: 9625:**See also**
        -: 9626:
        -: 9627:- [jerry_property_descriptor_create](#jerry_property_descriptor_create)
        -: 9628:- [jerry_define_own_property](#jerry_define_own_property)
        -: 9629:- [jerry_get_own_property_descriptor](#jerry_get_own_property_descriptor)
        -: 9630:
        -: 9631:
        -: 9632:## jerry_call_function
        -: 9633:
        -: 9634:**Summary**
        -: 9635:
        -: 9636:Call function specified by a function value. Error flag must
        -: 9637:not be set for any arguments of this function. Value of `this`
        -: 9638:parameter should be set to `undefined` for non-method calls.
        -: 9639:
        -: 9640:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9641:is no longer needed.
        -: 9642:
        -: 9643:**Prototype**
        -: 9644:
        -: 9645:```c
        -: 9646:jerry_value_t
        -: 9647:jerry_call_function (const jerry_value_t func_obj_val,
        -: 9648:                     const jerry_value_t this_val,
        -: 9649:                     const jerry_value_t args_p[],
        -: 9650:                     jerry_size_t args_count);
        -: 9651:```
        -: 9652:
        -: 9653:- `func_obj_val` - the function object to call
        -: 9654:- `this_val` - object for 'this' binding
        -: 9655:- `args_p` - function's call arguments
        -: 9656:- `args_count` - number of arguments
        -: 9657:- return value - returned jerry value of the called function
        -: 9658:
        -: 9659:**Example**
        -: 9660:
        -: 9661:```c
        -: 9662:{
        -: 9663:  jerry_value_t target_function;
        -: 9664:
        -: 9665:  ... // create or get "target_function"
        -: 9666:
        -: 9667:  if (jerry_value_is_function (target_function))
        -: 9668:  {
        -: 9669:    jerry_value_t this_val = jerry_create_undefined ();
        -: 9670:    jerry_value_t ret_val = jerry_call_function (target_function, this_val, NULL, 0);
        -: 9671:
        -: 9672:    if (!jerry_value_is_error (ret_val))
        -: 9673:    {
        -: 9674:      ... // handle return value
        -: 9675:    }
        -: 9676:
        -: 9677:    jerry_release_value (ret_val);
        -: 9678:    jerry_release_value (this_val);
        -: 9679:  }
        -: 9680:
        -: 9681:  jerry_release_value (target_function);
        -: 9682:}
        -: 9683:```
        -: 9684:
        -: 9685:**See also**
        -: 9686:
        -: 9687:- [jerry_is_function](#jerry_is_function)
        -: 9688:- [jerry_create_external_function](#jerry_create_external_function)
        -: 9689:
        -: 9690:
        -: 9691:## jerry_construct_object
        -: 9692:
        -: 9693:**Summary**
        -: 9694:
        -: 9695:Construct object, invoking specified function object as constructor.
        -: 9696:Error flag must not be set for any arguments of this function.
        -: 9697:
        -: 9698:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9699:is no longer needed.
        -: 9700:
        -: 9701:**Prototype**
        -: 9702:
        -: 9703:```c
        -: 9704:jerry_value_t
        -: 9705:jerry_construct_object (const jerry_value_t func_obj_val,
        -: 9706:                        const jerry_value_t args_p[],
        -: 9707:                        jerry_size_t args_count);
        -: 9708:```
        -: 9709:
        -: 9710:- `func_obj_val` - function object to call
        -: 9711:- `args_p` - function's call arguments
        -: 9712:- `args_count` - number of arguments
        -: 9713:- return value - returned value of the invoked constructor
        -: 9714:
        -: 9715:**Example**
        -: 9716:
        -: 9717:```c
        -: 9718:{
        -: 9719:  jerry_value_t val;
        -: 9720:
        -: 9721:  ... // receiving val
        -: 9722:
        -: 9723:  if (jerry_is_constructor (val))
        -: 9724:  {
        -: 9725:    jerry_value_t ret_val = jerry_construct_object (val, NULL, 0);
        -: 9726:
        -: 9727:    if (!jerry_value_is_error (ret_val))
        -: 9728:    {
        -: 9729:      ... // handle return value
        -: 9730:    }
        -: 9731:
        -: 9732:    jerry_release_value (ret_val);
        -: 9733:  }
        -: 9734:}
        -: 9735:```
        -: 9736:
        -: 9737:**See also**
        -: 9738:
        -: 9739: - [jerry_is_constructor](#jerry_is_constructor)
        -: 9740:
        -: 9741:
        -: 9742:## jerry_get_object_keys
        -: 9743:
        -: 9744:**Summary**
        -: 9745:
        -: 9746:Get keys of the specified object value.
        -: 9747:
        -: 9748:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9749:is no longer needed.
        -: 9750:
        -: 9751:**Prototype**
        -: 9752:
        -: 9753:```c
        -: 9754:jerry_value_t
        -: 9755:jerry_get_object_keys (const jerry_value_t obj_val);
        -: 9756:```
        -: 9757:
        -: 9758:- `obj_val` - object value
        -: 9759:- return value
        -: 9760:  - array object value, if success
        -: 9761:  - thrown error, otherwise
        -: 9762:
        -: 9763:**Example**
        -: 9764:
        -: 9765:```c
        -: 9766:{
        -: 9767:  jerry_value_t object;
        -: 9768:  ... // create or acquire object
        -: 9769:
        -: 9770:  jerry_value_t keys_array = jerry_get_object_keys (object);
        -: 9771:
        -: 9772:  ... // usage of keys_array
        -: 9773:
        -: 9774:  jerry_release_value (keys_array);
        -: 9775:}
        -: 9776:```
        -: 9777:
        -: 9778:**See also**
        -: 9779:
        -: 9780:- [jerry_get_property](#jerry_get_property)
        -: 9781:- [jerry_set_property](#jerry_set_property)
        -: 9782:
        -: 9783:
        -: 9784:## jerry_get_prototype
        -: 9785:
        -: 9786:**Summary**
        -: 9787:
        -: 9788:Get the prototype of the specified object.
        -: 9789:
        -: 9790:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9791:is no longer needed.
        -: 9792:
        -: 9793:**Prototype**
        -: 9794:
        -: 9795:```c
        -: 9796:jerry_value_t
        -: 9797:jerry_get_prototype (const jerry_value_t obj_val);
        -: 9798:```
        -: 9799:
        -: 9800:- `obj_val` - object value
        -: 9801:- return value
        -: 9802:  - object value, if success
        -: 9803:  - null or thrown error, otherwise
        -: 9804:
        -: 9805:**Example**
        -: 9806:
        -: 9807:```c
        -: 9808:{
        -: 9809:  jerry_value_t object;
        -: 9810:  ... // create or acquire object
        -: 9811:
        -: 9812:  jerry_value_t prototype = jerry_get_prototype (object);
        -: 9813:
        -: 9814:  ... // usage of prototype object
        -: 9815:
        -: 9816:  jerry_release_value (prototype);
        -: 9817:  jerry_release_value (object);
        -: 9818:}
        -: 9819:```
        -: 9820:
        -: 9821:**See also**
        -: 9822:
        -: 9823:- [jerry_set_prototype](#jerry_set_prototype)
        -: 9824:
        -: 9825:
        -: 9826:## jerry_set_prototype
        -: 9827:
        -: 9828:**Summary**
        -: 9829:
        -: 9830:Set the prototype of the specified object.
        -: 9831:
        -: 9832:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9833:is no longer needed.
        -: 9834:
        -: 9835:**Prototype**
        -: 9836:
        -: 9837:```c
        -: 9838:jerry_value_t
        -: 9839:jerry_set_prototype (const jerry_value_t obj_val,
        -: 9840:                     const jerry_value_t proto_obj_val);
        -: 9841:```
        -: 9842:
        -: 9843:- `obj_val` - object value
        -: 9844:- `proto_obj_val` - prototype object value
        -: 9845:- return value
        -: 9846:  - true, if success
        -: 9847:  - thrown error, otherwise
        -: 9848:
        -: 9849:**Example**
        -: 9850:
        -: 9851:```c
        -: 9852:{
        -: 9853:  jerry_value_t object;
        -: 9854:  jerry_value_t prototype;
        -: 9855:
        -: 9856:  ... // create or acquire object and prototype
        -: 9857:
        -: 9858:  jerry_value_t ret_val = jerry_set_prototype (object, prototype);
        -: 9859:
        -: 9860:  jerry_release_value (ret_val);
        -: 9861:  jerry_release_value (prototype);
        -: 9862:  jerry_release_value (object);
        -: 9863:}
        -: 9864:```
        -: 9865:
        -: 9866:**See also**
        -: 9867:
        -: 9868:- [jerry_get_prototype](#jerry_get_prototype)
        -: 9869:
        -: 9870:
        -: 9871:## jerry_get_object_native_pointer
        -: 9872:
        -: 9873:**Summary**
        -: 9874:
        -: 9875:Get native pointer by the given type information.
        -: 9876:The pointer and the type information are previously associated with the object by
        -: 9877:[jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -: 9878:
        -: 9879:*Note*: `out_native_pointer_p` can be NULL, and it means the
        -: 9880:        caller doesn't want to get the native_pointer.
        -: 9881:
        -: 9882:**Prototype**
        -: 9883:
        -: 9884:```c
        -: 9885:bool
        -: 9886:jerry_get_object_native_pointer (const jerry_value_t obj_val,
        -: 9887:                                 void **out_native_pointer_p,
        -: 9888:                                 const jerry_object_native_info_t *native_info_p)
        -: 9889:```
        -: 9890:
        -: 9891:- `obj_val` - object value to get native pointer from.
        -: 9892:- `out_native_pointer_p` - native pointer (output parameter).
        -: 9893:- `native_info_p` - native pointer's type information.
        -: 9894:- return value
        -: 9895:  - true, if there is native pointer associated of the specified object with the given native type info
        -: 9896:  - false, otherwise
        -: 9897:
        -: 9898:*New in version 2.0*: Changed from `jerry_get_object_native_handle`.
        -: 9899:
        -: 9900:**Example**
        -: 9901:
        -: 9902:[doctest]: # ()
        -: 9903:
        -: 9904:```c
        -: 9905:#include <stdio.h>
        -: 9906:#include <stdlib.h>
        -: 9907:#include <string.h>
        -: 9908:#include "jerryscript.h"
        -: 9909:
        -: 9910:typedef struct
        -: 9911:{
        -: 9912:  char *data_p;
        -: 9913:  unsigned int length;
        -: 9914:} buffer_native_object_t;
        -: 9915:
        -: 9916:typedef struct
        -: 9917:{
        -: 9918:  int area;
        -: 9919:  int perimeter;
        -: 9920:} shape_native_object_t;
        -: 9921:
        -: 9922:#define SECRET_INFO ((void *) 42)
        -: 9923:
        -: 9924:static void
    #####: 9925:buffer_native_freecb (void *native_p,
        -: 9926:                      jerry_object_native_info_t *info_p)
        -: 9927:{
        -: 9928:  (void) info_p;
        -: 9929:
    #####: 9930:  char *data_p = ((buffer_native_object_t*)native_p)->data_p;
        -: 9931:
    #####: 9932:  if (data_p != NULL)
        -: 9933:  {
    #####: 9934:    free (data_p);
        -: 9935:  }
        -: 9936:
    #####: 9937:  free (native_p);
    #####: 9938:}
        -: 9939:
        -: 9940:static void
    #####: 9941:shape_native_freecb (void *native_p,
        -: 9942:                     jerry_object_native_info_t *info_p)
        -: 9943:{
        -: 9944:  (void) info_p;
        -: 9945:
    #####: 9946:  free (native_p);
    #####: 9947:}
        -: 9948:
        -: 9949:static void
    #####: 9950:destructor_freecb (void *native_p,
        -: 9951:                   jerry_object_native_info_t *info_p)
        -: 9952:{
        -: 9953:  (void) native_p;
        -: 9954:  (void) info_p;
        -: 9955:
    #####: 9956:   printf("Note: the object has been freed\n");
    #####: 9957:}
        -: 9958:
        -: 9959:// NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -: 9960:// C type `buffer_native_object_t *`.
        -: 9961:static const jerry_object_native_info_t buffer_obj_type_info =
        -: 9962:{
        -: 9963:  .free_cb = buffer_native_freecb
        -: 9964:};
        -: 9965:
        -: 9966:// NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -: 9967:// C type `shape_native_object_t *`.
        -: 9968:static const jerry_object_native_info_t shape_obj_type_info =
        -: 9969:{
        -: 9970:  .free_cb = shape_native_freecb
        -: 9971:};
        -: 9972:
        -: 9973:// NOTE: The address (!) of type_info is the unique "identifier"
        -: 9974:static const jerry_object_native_info_t destructor_obj_type_info =
        -: 9975:{
        -: 9976:  .free_cb = destructor_freecb
        -: 9977:};
        -: 9978:
        -: 9979:static void
    #####: 9980:print_buffer (char *data_p,
        -: 9981:              unsigned int length)
        -: 9982:{
    #####: 9983:  for (unsigned int i = 0; i < length; ++i)
        -: 9984:  {
    #####: 9985:    printf("%c", data_p[i]);
        -: 9986:  }
        -: 9987:
    #####: 9988:  printf("\n");
    #####: 9989:}
        -: 9990:
        -: 9991:static void
    #####: 9992:do_stuff (jerry_value_t object)
        -: 9993:{
        -: 9994:  void *native_p;
    #####: 9995:  bool has_p = jerry_get_object_native_pointer (object, &native_p, &buffer_obj_type_info);
        -: 9996:
    #####: 9997:  if (!has_p)
        -: 9998:  {
        -: 9999:    // Process the error
    #####:10000:    return;
        -:10001:  }
        -:10002:
        -:10003:  // It is safe to cast to buffer_native_object_t * and dereference the pointer:
    #####:10004:  buffer_native_object_t *buffer_p = (buffer_native_object_t *) native_p;
    #####:10005:  print_buffer (buffer_p->data_p, buffer_p->length); // Usage of buffer_p
        -:10006:
    #####:10007:  bool need_shape_info = true; // implementation dependent
        -:10008:
        -:10009:  if (need_shape_info)
        -:10010:  {
    #####:10011:    has_p = jerry_get_object_native_pointer (object, &native_p, &shape_obj_type_info);
        -:10012:
    #####:10013:    if (!has_p)
        -:10014:    {
        -:10015:      // Process the error
        -:10016:      return;
        -:10017:    }
        -:10018:
        -:10019:    // It is safe to cast to shape_native_object_t * and dereference the pointer:
    #####:10020:    shape_native_object_t *shape_p = (shape_native_object_t *) native_p;
        -:10021:
    #####:10022:    printf("Area: %d\tPerimeter: %d\n", shape_p->area, shape_p->perimeter); // Usage of shape_p
        -:10023:  }
        -:10024:
    #####:10025:  bool need_secret_info = true; // implementation dependent
        -:10026:
        -:10027:  if (need_secret_info)
        -:10028:  {
    #####:10029:    has_p = jerry_get_object_native_pointer (object, &native_p, NULL);
        -:10030:
    #####:10031:    if (!has_p)
        -:10032:    {
        -:10033:      // Process the error
        -:10034:      return;
        -:10035:    }
        -:10036:
    #####:10037:    printf("Secret: %d\n", (int)((uintptr_t) native_p)); // Usage of native_p
        -:10038:
    #####:10039:    bool deleted = jerry_delete_object_native_pointer (object, NULL);
        -:10040:
    #####:10041:    if (deleted)
        -:10042:    {
        -:10043:      printf("The secret is no longer available\n");
        -:10044:    }
        -:10045:  }
        -:10046:}
        -:10047:
        -:10048:int
    #####:10049:main (void)
        -:10050:{
    #####:10051:  jerry_init (JERRY_INIT_EMPTY);
        -:10052:
    #####:10053:  jerry_value_t object = jerry_create_object ();
    #####:10054:  buffer_native_object_t *buffer_p = (buffer_native_object_t *) malloc (sizeof (buffer_native_object_t));
    #####:10055:  buffer_p->length = 14;
    #####:10056:  buffer_p->data_p = (char *) malloc (buffer_p->length * sizeof (char));
    #####:10057:  memcpy (buffer_p->data_p, "My buffer data", buffer_p->length);
    #####:10058:  jerry_set_object_native_pointer (object, buffer_p, &buffer_obj_type_info);
        -:10059:
    #####:10060:  shape_native_object_t *shape_p = (shape_native_object_t *) malloc (sizeof (shape_native_object_t));
    #####:10061:  shape_p->area = 6;
    #####:10062:  shape_p->perimeter = 12;
    #####:10063:  jerry_set_object_native_pointer (object, shape_p, &shape_obj_type_info);
        -:10064:
        -:10065:  // The native pointer can be NULL. This gives possibily to get notified via the native type info's
        -:10066:  // free callback when the object has been freed by the GC.
    #####:10067:  jerry_set_object_native_pointer (object, NULL, &destructor_obj_type_info);
        -:10068:
        -:10069:  // The native type info can be NULL as well. In this case the registered property is simply freed
        -:10070:  // when the object is freed by te GC.
    #####:10071:  jerry_set_object_native_pointer (object, SECRET_INFO, NULL);
        -:10072:
    #####:10073:  do_stuff (object);
        -:10074:
    #####:10075:  jerry_release_value (object);
    #####:10076:  jerry_cleanup ();
        -:10077:
        -:10078:  return 0;
        -:10079:}
        -:10080:```
        -:10081:
        -:10082:**See also**
        -:10083:
        -:10084:- [jerry_create_object](#jerry_create_object)
        -:10085:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:10086:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10087:
        -:10088:
        -:10089:## jerry_set_object_native_pointer
        -:10090:
        -:10091:**Summary**
        -:10092:
        -:10093:Set native pointer and an optional type information for the specified object.
        -:10094:You can get them by calling [jerry_get_object_native_pointer](#jerry_get_object_native_pointer) later.
        -:10095:
        -:10096:*Notes*:
        -:10097: - If a native pointer was already set for the object with the same type information, its value is updated.
        -:10098: - If a non-NULL free callback is specified in the native type information,
        -:10099:   it will be called by the garbage collector when the object is freed.
        -:10100: - If the object is only referenced via the "global" object (or one of it's "child"),
        -:10101:   the free callback will be invoked during the execution of `jerry_cleanup`.
        -:10102: - The free callback can invoke API functions.
        -:10103:
        -:10104:*Note*: If possible do not store API values in native pointers, rather check
        -:10105:        [jerry_set_internal_property](#jerry_set_internal_property).
        -:10106:
        -:10107:**Prototype**
        -:10108:
        -:10109:```c
        -:10110:void
        -:10111:jerry_set_object_native_pointer (const jerry_value_t obj_val,
        -:10112:                                 void *native_p,
        -:10113:                                 const jerry_object_native_info_t *info_p)
        -:10114:```
        -:10115:
        -:10116:- `obj_val` - object to set native pointer in.
        -:10117:- `native_p` - native pointer.
        -:10118:- `info_p` - native pointer's type information or NULL. When used, this should
        -:10119:             be a long-lived pointer, usually a pointer to a
        -:10120:             `static const jerry_object_native_info_t` makes most sense.
        -:10121:
        -:10122:*New in version 2.0*: Changed from `jerry_set_object_native_handle`.
        -:10123:
        -:10124:**Example**
        -:10125:
        -:10126:See [jerry_get_object_native_pointer](#jerry_get_object_native_pointer) for a
        -:10127:best-practice example.
        -:10128:
        -:10129:**See also**
        -:10130:
        -:10131:- [jerry_create_object](#jerry_create_object)
        -:10132:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -:10133:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10134:
        -:10135:## jerry_delete_object_native_pointer
        -:10136:
        -:10137:**Summary**
        -:10138:
        -:10139:Delete the native pointer of the specified object associated with the given native type info.
        -:10140:
        -:10141:*Notes*:
        -:10142: - If the specified object has no matching native pointer for the given native type info the operation has no effect.
        -:10143: - The method does not invoke the free callback specified in the type info.
        -:10144:   If the native pointer should be freed then one must get the native pointer first and invoke the free callback manually
        -:10145:   before calling this method.
        -:10146: - This operation cannot throw an exception.
        -:10147:
        -:10148:**Prototype**
        -:10149:
        -:10150:```c
        -:10151:bool
        -:10152:jerry_delete_object_native_pointer (const jerry_value_t obj_val,
        -:10153:                                    const jerry_object_native_info_t *info_p)
        -:10154:```
        -:10155:
        -:10156:- `obj_val` - object to delete native pointer from.
        -:10157:- `info_p` - native pointer's type information.
        -:10158:
        -:10159:*New in version 2.0*.
        -:10160:
        -:10161:**Example**
        -:10162:
        -:10163:See [jerry_get_object_native_pointer](#jerry_get_object_native_pointer) for a
        -:10164:best-practice example.
        -:10165:
        -:10166:**See also**
        -:10167:
        -:10168:- [jerry_create_object](#jerry_create_object)
        -:10169:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -:10170:- [jerry_get_object_native_pointer](#jerry_set_object_native_pointer)
        -:10171:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10172:
        -:10173:
        -:10174:## jerry_native_pointer_init_references
        -:10175:
        -:10176:**Summary**
        -:10177:
        -:10178:Initialize the references stored in a buffer pointed by a native pointer.
        -:10179:The references are initialized to undefined. This function must be called
        -:10180:before the buffer is attached to an object by
        -:10181:[jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -:10182:
        -:10183:*Note*:
        -:10184:  - The description of [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10185:    provides detailed information about these references.
        -:10186:
        -:10187:**Prototype**
        -:10188:
        -:10189:```c
        -:10190:void
        -:10191:jerry_native_pointer_init_references (void *native_pointer_p,
        -:10192:                                      const jerry_object_native_info_t *native_info_p);
        -:10193:```
        -:10194:
        -:10195:- `native_pointer_p` - a valid non-NULL pointer to a native buffer.
        -:10196:- `native_info_p` - native pointer's type information.
        -:10197:
        -:10198:*New in version [[NEXT_RELEASE]]*.
        -:10199:
        -:10200:**Example**
        -:10201:
        -:10202:[doctest]: # ()
        -:10203:
        -:10204:```c
        -:10205:#include <stdlib.h>
        -:10206:#include "jerryscript.h"
        -:10207:
        -:10208:typedef struct
        -:10209:{
        -:10210:  uint32_t user_data;
        -:10211:  jerry_value_t a;
        -:10212:  jerry_value_t b;
        -:10213:  uint32_t user_other_data;
        -:10214:} user_buffer_t;
        -:10215:
        -:10216:static void
    #####:10217:native_references_free_callback (void *native_p, /**< native pointer */
        -:10218:                                 jerry_object_native_info_t *info_p) /**< native info */
        -:10219:{
        -:10220:  /* References must be finalized when a buffer is no longer attached. */
    #####:10221:  jerry_native_pointer_release_references (native_p, info_p);
    #####:10222:  free (native_p);
    #####:10223:} /* native_references_free_callback */
        -:10224:
        -:10225:static const jerry_object_native_info_t native_info =
        -:10226:{
        -:10227:  .free_cb = native_references_free_callback,
        -:10228:  .number_of_references = 2,
        -:10229:  .offset_of_references = offsetof(user_buffer_t, a),
        -:10230:};
        -:10231:
        -:10232:int
    #####:10233:main (void)
        -:10234:{
    #####:10235:  jerry_init (JERRY_INIT_EMPTY);
        -:10236:
    #####:10237:  jerry_value_t object_value = jerry_create_object ();
        -:10238:
    #####:10239:  user_buffer_t *buffer_p = (user_buffer_t *) malloc (sizeof (user_buffer_t));
        -:10240:
        -:10241:  /* References must be initialized before a buffer is attached. */
    #####:10242:  jerry_native_pointer_init_references ((void *) buffer_p, &native_info);
        -:10243:
    #####:10244:  jerry_set_object_native_pointer (object_value, (void *) buffer_p, &native_info);
        -:10245:
        -:10246:  /* References can be modified after the buffer is attached.
        -:10247:   * This example sets a self reference. */
    #####:10248:  jerry_native_pointer_set_reference (&buffer_p->a, object_value);
        -:10249:
    #####:10250:  jerry_release_value (object_value);
        -:10251:
    #####:10252:  jerry_cleanup ();
        -:10253:  return 0;
        -:10254:}
        -:10255:```
        -:10256:
        -:10257:**See also**
        -:10258:
        -:10259:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:10260:- [jerry_native_pointer_release_references](#jerry_native_pointer_release_references)
        -:10261:- [jerry_native_pointer_set_reference](#jerry_native_pointer_set_reference)
        -:10262:
        -:10263:## jerry_native_pointer_release_references
        -:10264:
        -:10265:**Summary**
        -:10266:
        -:10267:Release the value references stored in a buffer pointed by a native pointer.
        -:10268:This function must be called after a buffer is no longer attached to any
        -:10269:object, even if the buffer is attached to another object again. This
        -:10270:function also initializes the values to undefined, so calling
        -:10271:[jerry_native_pointer_init_references](#jerry_native_pointer_init_references)
        -:10272:is optional before the buffer is attached again.
        -:10273:
        -:10274:*Note*:
        -:10275:  - The description of [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10276:    provides detailed information about these references.
        -:10277:
        -:10278:**Prototype**
        -:10279:
        -:10280:```c
        -:10281:void
        -:10282:jerry_native_pointer_release_references (void *native_pointer_p,
        -:10283:                                         const jerry_object_native_info_t *native_info_p);
        -:10284:```
        -:10285:
        -:10286:- `native_pointer_p` - a valid non-NULL pointer to a native buffer.
        -:10287:- `native_info_p` - native pointer's type information.
        -:10288:
        -:10289:*New in version [[NEXT_RELEASE]]*.
        -:10290:
        -:10291:**Example**
        -:10292:
        -:10293:See the example of [jerry_native_pointer_init_references](#jerry_native_pointer_init_references).
        -:10294:
        -:10295:**See also**
        -:10296:
        -:10297:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:10298:- [jerry_native_pointer_init_references](#jerry_native_pointer_init_references)
        -:10299:- [jerry_native_pointer_set_reference](#jerry_native_pointer_set_reference)
        -:10300:
        -:10301:
        -:10302:## jerry_native_pointer_set_reference
        -:10303:
        -:10304:**Summary**
        -:10305:
        -:10306:Updates a value reference inside the area specified by the `number_of_references` and
        -:10307:`offset_of_references` fields in its corresponding
        -:10308:[jerry_object_native_info_t](#jerry_object_native_info_t) data. The area must be
        -:10309:part of a buffer which is currently assigned to an object.
        -:10310:
        -:10311:*Note*:
        -:10312:  - The description of [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10313:    provides detailed information about these references.
        -:10314:
        -:10315:**Prototype**
        -:10316:
        -:10317:```c
        -:10318:void
        -:10319:jerry_native_pointer_set_reference (jerry_value_t *reference_p,
        -:10320:                                    jerry_value_t value)
        -:10321:```
        -:10322:
        -:10323:- `reference_p` - a valid non-NULL pointer to a reference in a native buffer.
        -:10324:- `value` - new value of the reference.
        -:10325:
        -:10326:*New in version [[NEXT_RELEASE]]*.
        -:10327:
        -:10328:**Example**
        -:10329:
        -:10330:See the example of [jerry_native_pointer_init_references](#jerry_native_pointer_init_references).
        -:10331:
        -:10332:**See also**
        -:10333:
        -:10334:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:10335:- [jerry_native_pointer_init_references](#jerry_native_pointer_init_references)
        -:10336:- [jerry_native_pointer_release_references](#jerry_native_pointer_release_references)
        -:10337:
        -:10338:
        -:10339:## jerry_object_get_property_names
        -:10340:
        -:10341:**Summary**
        -:10342:
        -:10343:Gets the property keys for the given object using the selected filters.
        -:10344:
        -:10345:**Prototype**
        -:10346:
        -:10347:```c
        -:10348:jerry_value_t
        -:10349:jerry_object_get_property_names (jerry_value_t obj_val,
        -:10350:                                 jerry_property_filter_t filter);
        -:10351:```
        -:10352:
        -:10353:- `obj_val` - object value
        -:10354:- `filter` - any combination of [jerry_property_filter_t](#jerry_property_filter_t) options
        -:10355:- return value
        -:10356:  - array containing the filtered property keys in successful operation
        -:10357:  - error marked with error flag, otherwise
        -:10358:
        -:10359:*New in version 2.4*.
        -:10360:
        -:10361:**Example**
        -:10362:
        -:10363:```c
        -:10364:{
        -:10365:  jerry_value_t global_object = jerry_get_global_object ();
        -:10366:  jerry_value_t keys = jerry_object_get_property_names (object, JERRY_PROPERTY_FILTER_ALL);
        -:10367:
        -:10368:  ... // usage of keys
        -:10369:
        -:10370:  jerry_release_value (keys);
        -:10371:  jerry_release_value (global_object);
        -:10372:}
        -:10373:```
        -:10374:
        -:10375:**See also**
        -:10376:
        -:10377:- [jerry_property_filter_t](#jerry_property_filter_t)
        -:10378:
        -:10379:## jerry_foreach_object_property
        -:10380:
        -:10381:**Summary**
        -:10382:
        -:10383:Applies the given function to every enumerable(!) property in the given object.
        -:10384:
        -:10385:The "iterator" `foreach_p` method should return `true` value to continue the iteration.
        -:10386:If the method returns `false` the iteration will end.
        -:10387:
        -:10388:**Prototype**
        -:10389:
        -:10390:```c
        -:10391:bool
        -:10392:jerry_foreach_object_property (jerry_value_t obj_val,
        -:10393:                               jerry_object_property_foreach_t foreach_p,
        -:10394:                               void *user_data_p);
        -:10395:```
        -:10396:
        -:10397:- `obj_val` - object value
        -:10398:- `foreach_p` - foreach function, that will be applied for each property
        -:10399:- `user_data_p` - user data for foreach function
        -:10400:- return value
        -:10401:  - true, if object fields traversal was performed successfully, i.e.:
        -:10402:    - no unhandled exceptions were thrown in object fields traversal
        -:10403:    - object fields traversal was stopped on callback that returned false
        -:10404:  - false, otherwise
        -:10405:
        -:10406:**Example**
        -:10407:
        -:10408:
        -:10409:[doctest]: # (name="02.API-REFERENCE-foreach-property.c")
        -:10410:
        -:10411:```c
        -:10412:#include <stdio.h>
        -:10413:#include "jerryscript.h"
        -:10414:
        -:10415:/* Example structure used as user data for the property iteration. */
        -:10416:struct iteration_data {
        -:10417:  int string_property_count;
        -:10418:};
        -:10419:
        -:10420:/*
        -:10421: * Example foreach function to print out property names.
        -:10422: */
        -:10423:static bool
    #####:10424:foreach_function (const jerry_value_t prop_name,
        -:10425:                  const jerry_value_t prop_value,
        -:10426:                  void *user_data_p)
        -:10427:{
    #####:10428:  if (jerry_value_is_string (prop_name)) {
        -:10429:    jerry_char_t string_buffer[128];
    #####:10430:    jerry_size_t copied_bytes = jerry_substring_to_char_buffer (prop_name,
        -:10431:                                                                0,
        -:10432:                                                                127,
        -:10433:                                                                string_buffer,
        -:10434:                                                                127);
    #####:10435:    string_buffer[copied_bytes] = '\0';
        -:10436:
    #####:10437:    printf ("Property: %s\n", string_buffer);
        -:10438:
    #####:10439:    struct iteration_data *data = (struct iteration_data *) user_data_p;
    #####:10440:    data->string_property_count++;
        -:10441:  }
        -:10442:
        -:10443:  /* return true to continue iteration */
    #####:10444:  return true;
        -:10445:}
        -:10446:
        -:10447:int
    #####:10448:main (void)
        -:10449:{
    #####:10450:  jerry_init (JERRY_INIT_EMPTY);
        -:10451:
        -:10452:  /* Construct an example object with a single property. */
    #####:10453:  jerry_value_t object = jerry_create_object ();
        -:10454:  {
    #####:10455:    jerry_value_t test_property = jerry_create_string ((const jerry_char_t *) "DemoProp");
    #####:10456:    jerry_value_t test_value = jerry_create_number (3);
        -:10457:    /* By default all properties added to an object are enumerable. */
    #####:10458:    jerry_value_t set_result = jerry_set_property (object, test_property, test_value);
        -:10459:    /* The `set_result` should be checked if it is an error or not. */
    #####:10460:    jerry_release_value (set_result);
    #####:10461:    jerry_release_value (test_value);
    #####:10462:    jerry_release_value (test_property);
        -:10463:  }
        -:10464:
        -:10465:  /* Iterate on the object's properties with the given user data. */
    #####:10466:  struct iteration_data user_data = { 0 };
        -:10467:
    #####:10468:  bool iteration_result = jerry_foreach_object_property (object, foreach_function, &user_data);
        -:10469:  /* Check and process the `iteration_result` if required. */
        -:10470:
    #####:10471:  jerry_release_value (object);
        -:10472:
    #####:10473:  jerry_cleanup ();
        -:10474:
    #####:10475:  return user_data.string_property_count == 0;
        -:10476:}
        -:10477:```
        -:10478:
        -:10479:**See also**
        -:10480:
        -:10481:- [jerry_object_property_foreach_t](#jerry_object_property_foreach_t)
        -:10482:
        -:10483:## jerry_objects_foreach
        -:10484:
        -:10485:**Summary**
        -:10486:
        -:10487:Iterate over all objects available in the engine.
        -:10488:
        -:10489:The "iterator" `foreach_p` method should return `true` value to continue the search.
        -:10490:If the method returns `false` the search for the object is finished.
        -:10491:
        -:10492:*Note*: Values obtained in `foreach_p` must be retained using [jerry_acquire_value](#jerry_acquire_value).
        -:10493:
        -:10494:**Prototype**
        -:10495:
        -:10496:```c
        -:10497:bool
        -:10498:jerry_objects_foreach (jerry_objects_foreach_t foreach_p,
        -:10499:                       void *user_data_p);
        -:10500:```
        -:10501:
        -:10502:- `foreach_p` - function that will be invoked for each object.
        -:10503:- `user_data_p` - User data to pass to the function.
        -:10504:- return value
        -:10505:  - `true`, if the search function terminated the traversal by returning `false`
        -:10506:  - `false`, if the end of the list of objects was reached
        -:10507:
        -:10508:*New in version 2.0*.
        -:10509:
        -:10510:**Example**
        -:10511:
        -:10512:[doctest]: # (name="02.API-REFERENCE-objects-foreach.c")
        -:10513:
        -:10514:```c
        -:10515:#include <stdio.h>
        -:10516:#include "jerryscript.h"
        -:10517:
        -:10518:/* Create a custom structure to guide the search and store the result. */
        -:10519:typedef struct
        -:10520:{
        -:10521:  jerry_value_t property_name;
        -:10522:  jerry_value_t result;
        -:10523:} find_my_object_info_t;
        -:10524:
        -:10525:/*
        -:10526: * Find the first object with the given property.
        -:10527: */
        -:10528:static bool
    #####:10529:find_my_object (const jerry_value_t candidate,
        -:10530:                void *user_data_p)
        -:10531:{
    #####:10532:  find_my_object_info_t *info_p = (find_my_object_info_t *) user_data_p;
        -:10533:
        -:10534:  /* Check if the given object has the required property. */
    #####:10535:  jerry_value_t has_property = jerry_has_property (candidate, info_p->property_name);
    #####:10536:  bool object_found = jerry_value_is_true (has_property);
        -:10537:
    #####:10538:  if (object_found)
        -:10539:  {
        -:10540:    /* We found it, so we acquire the value and record it. */
    #####:10541:    info_p->result = jerry_acquire_value (candidate);
        -:10542:  }
        -:10543:
    #####:10544:  jerry_release_value (has_property);
        -:10545:
        -:10546:  /* If the object was not found continue the search. */
    #####:10547:  return !object_found;
        -:10548:} /* find_my_object */
        -:10549:
        -:10550:int
    #####:10551:main (void)
        -:10552:{
    #####:10553:  int return_value = 0;
        -:10554:
        -:10555:  /* Initialize JerryScript engine. */
    #####:10556:  jerry_init (JERRY_INIT_EMPTY);
        -:10557:
        -:10558:  /* Create the test object. */
        -:10559:  {
    #####:10560:    jerry_value_t test_object = jerry_create_object ();
        -:10561:
        -:10562:    {
    #####:10563:      jerry_value_t test_property = jerry_create_string ((const jerry_char_t *) "DemoProp");
    #####:10564:      jerry_value_t test_value = jerry_create_number (3);
    #####:10565:      jerry_value_t set_result = jerry_set_property (test_object, test_property, test_value);
        -:10566:      /* The `set_result` should be checked if it is an error or not. */
    #####:10567:      jerry_release_value (set_result);
    #####:10568:      jerry_release_value (test_value);
    #####:10569:      jerry_release_value (test_property);
        -:10570:    }
        -:10571:
        -:10572:    {
        -:10573:      /* Register the test object into the global object. */
    #####:10574:      jerry_value_t global_object = jerry_get_global_object ();
    #####:10575:      jerry_value_t demo_property = jerry_create_string ((const jerry_char_t *) "DemoObject");
    #####:10576:      jerry_value_t set_result = jerry_set_property (global_object, demo_property, test_object);
        -:10577:      /* The `set_result` should be checked if it is an error or not. */
    #####:10578:      jerry_release_value (set_result);
    #####:10579:      jerry_release_value (demo_property);
    #####:10580:      jerry_release_value (global_object);
        -:10581:    }
        -:10582:
    #####:10583:    jerry_release_value (test_object);
        -:10584:  }
        -:10585:
        -:10586:  /* Look up the test object base on a property name. */
    #####:10587:  find_my_object_info_t search_info =
        -:10588:  {
    #####:10589:    .property_name = jerry_create_string ((const jerry_char_t *) "DemoProp")
        -:10590:  };
        -:10591:
    #####:10592:  if (jerry_objects_foreach (find_my_object, &search_info))
        -:10593:  {
        -:10594:    /* The search was successful. Do something useful with search_info.result. */
        -:10595:    // ...
    #####:10596:    printf ("Object found\n");
        -:10597:
        -:10598:    /* Release the found object after we're done using it. */
    #####:10599:    jerry_release_value (search_info.result);
        -:10600:  }
        -:10601:  else
        -:10602:  {
        -:10603:    /* The search has failed. */
    #####:10604:    printf ("Object not found\n");
        -:10605:
    #####:10606:    return_value = 1;
        -:10607:  }
        -:10608:
    #####:10609:  jerry_release_value (search_info.property_name);
        -:10610:
        -:10611:  /* Engine cleanup */
    #####:10612:  jerry_cleanup ();
        -:10613:  return return_value;
        -:10614:}
        -:10615:```
        -:10616:
        -:10617:**See also**
        -:10618:
        -:10619:- [jerry_objects_foreach_t](#jerry_objects_foreach_t)
        -:10620:
        -:10621:## jerry_objects_foreach_by_native_info
        -:10622:
        -:10623:**Summary**
        -:10624:
        -:10625:Iterate over all objects in the engine matching a certain native data type.
        -:10626:
        -:10627:The "iterator" `foreach_p` method should return `true` value to continue the search.
        -:10628:If the method returns `false` the search for the object is finished.
        -:10629:
        -:10630:*Note*: Values obtained in `foreach_p` must be retained using [jerry_acquire_value](#jerry_acquire_value).
        -:10631:
        -:10632:**Prototype**
        -:10633:
        -:10634:```c
        -:10635:bool
        -:10636:jerry_objects_foreach_by_native_info (const jerry_object_native_info_t *native_info_p,
        -:10637:                                      jerry_objects_foreach_by_native_info_t foreach_p,
        -:10638:                                      void *user_data_p);
        -:10639:```
        -:10640:
        -:10641:- `native_info_p` - native pointer's type information.
        -:10642:- `foreach_p` - function that will be invoked for each object.
        -:10643:- return value
        -:10644:  - `true`, if the search function terminated the traversal by returning `false`
        -:10645:  - `false`, if the end of the list of objects was reached
        -:10646:
        -:10647:*New in version 2.0*.
        -:10648:
        -:10649:**Example**
        -:10650:
        -:10651:[doctest]: # (name="02.API-REFERENCE-objects-foreach-nativeptr.c")
        -:10652:
        -:10653:```c
        -:10654:#include <stdio.h>
        -:10655:#include <stdlib.h>
        -:10656:#include "jerryscript.h"
        -:10657:
        -:10658:typedef struct
        -:10659:{
        -:10660:  int foo;
        -:10661:  bool bar;
        -:10662:} native_obj_t;
        -:10663:
        -:10664:typedef struct
        -:10665:{
        -:10666:  jerry_value_t found_object;
        -:10667:  native_obj_t *found_native_data_p;
        -:10668:
        -:10669:  int match_foo_value;
        -:10670:} find_object_data_t;
        -:10671:
    #####:10672:static void native_freecb (void *native_p,
        -:10673:                           jerry_object_native_info_t *info_p)
        -:10674:{
        -:10675:  (void) info_p;
        -:10676:
        -:10677:  /* `native_p` was allocated via malloc. */
    #####:10678:  free (native_p);
    #####:10679:} /* native_freecb */
        -:10680:
        -:10681:/*
        -:10682: * NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -:10683: * C type `native_obj_t *`.
        -:10684: */
        -:10685:static const jerry_object_native_info_t native_obj_type_info =
        -:10686:{
        -:10687:  .free_cb = native_freecb
        -:10688:};
        -:10689:
        -:10690:/*
        -:10691: * Function creating JS object that is "backed" by a `native_obj_t`.
        -:10692: */
        -:10693:static void
    #####:10694:add_object_with_nativeptr (int foo_value)
        -:10695:{
        -:10696:  // construct object and native_set value:
    #####:10697:  jerry_value_t test_object = jerry_create_object ();
    #####:10698:  native_obj_t *native_obj_p = malloc (sizeof (*native_obj_p));
    #####:10699:  native_obj_p->foo = foo_value;
    #####:10700:  native_obj_p->bar = true;
        -:10701:
    #####:10702:  jerry_set_object_native_pointer (test_object, native_obj_p, &native_obj_type_info);
        -:10703:
        -:10704:  /* Register the test object into the global object. */
    #####:10705:  jerry_value_t global_object = jerry_get_global_object ();
    #####:10706:  jerry_value_t demo_property = jerry_create_string ((const jerry_char_t *) "DemoObject");
    #####:10707:  jerry_value_t set_result = jerry_set_property (global_object, demo_property, test_object);
        -:10708:  /* The `set_result` should be checked if it is an error or not. */
    #####:10709:  jerry_release_value (set_result);
    #####:10710:  jerry_release_value (demo_property);
    #####:10711:  jerry_release_value (global_object);
        -:10712:
    #####:10713:  jerry_release_value (test_object);
    #####:10714:} /* create_object_with_nativeptr */
        -:10715:
        -:10716:/*
        -:10717: * Example native method that searches for a JavaScript object
        -:10718: * with a `native_obj_type_info` has the correct value.
        -:10719: */
        -:10720:static bool
    #####:10721:find_object (const jerry_value_t candidate, void *data_p, void *user_data_p)
        -:10722:{
    #####:10723:  find_object_data_t *find_data_p = (find_object_data_t *) user_data_p;
    #####:10724:  native_obj_t *native_obj_p = (native_obj_t *) data_p;
        -:10725:
    #####:10726:  if (find_data_p->match_foo_value == native_obj_p->foo)
        -:10727:  {
        -:10728:    /* If the object was found, acquire it and store it in the user data. */
    #####:10729:    find_data_p->found_object = jerry_acquire_value (candidate);
    #####:10730:    find_data_p->found_native_data_p = native_obj_p;
        -:10731:
        -:10732:    /* Stop traversing over the objects. */
    #####:10733:    return false;
        -:10734:  }
        -:10735:
        -:10736:  /* Indicate that the object was not found, so traversal must continue. */
        -:10737:  return true;
        -:10738:} /* find_object */
        -:10739:
        -:10740:int
    #####:10741:main (void)
        -:10742:{
    #####:10743:  jerry_init (JERRY_INIT_EMPTY);
        -:10744:
    #####:10745:  add_object_with_nativeptr (4);
    #####:10746:  add_object_with_nativeptr (3);
    #####:10747:  add_object_with_nativeptr (2);
        -:10748:
    #####:10749:  find_object_data_t find_data =
        -:10750:  {
        -:10751:    .match_foo_value = 3,
        -:10752:  };
        -:10753:
    #####:10754:  if (jerry_objects_foreach_by_native_info (&native_obj_type_info, find_object, &find_data))
        -:10755:  {
        -:10756:    /* The object was found and is now stored in `find_data.found_object`. After using it, it must be released. */
    #####:10757:    printf ("Object found, native foo value: %d\n", find_data.found_native_data_p->foo);
        -:10758:
    #####:10759:    jerry_release_value (find_data.found_object);
        -:10760:  }
        -:10761:  else
        -:10762:  {
        -:10763:    printf ("Object not found\n");
        -:10764:  }
        -:10765:
    #####:10766:  jerry_cleanup ();
        -:10767:
        -:10768:  return 0;
        -:10769:}
        -:10770:```
        -:10771:
        -:10772:**See also**
        -:10773:
        -:10774:- [jerry_create_object](#jerry_create_object)
        -:10775:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:10776:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -:10777:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10778:- [jerry_objects_foreach](#jerry_objects_foreach)
        -:10779:
        -:10780:
        -:10781:# Input validator functions
        -:10782:
        -:10783:## jerry_is_valid_utf8_string
        -:10784:
        -:10785:**Summary**
        -:10786:
        -:10787:Check if a given character buffer is a valid UTF-8 string.
        -:10788:
        -:10789:**Notes**: Calling this method is safe in any time. It can be called
        -:10790:even before engine initialization.
        -:10791:
        -:10792:**Prototype**
        -:10793:
        -:10794:```c
        -:10795:bool
        -:10796:jerry_is_valid_utf8_string (const jerry_char_t *utf8_buf_p, /**< UTF-8 string */
        -:10797:                            jerry_size_t buf_size) /**< string size */
        -:10798:```
        -:10799:
        -:10800:- `utf8_buf_p` - UTF-8 input string buffer.
        -:10801:- `buf_size` - input string buffer size in bytes.
        -:10802:- return value
        -:10803:  - true, if the provided string was a valid UTF-8 string.
        -:10804:  - false, if the string is not valid as an UTF-8 string.
        -:10805:
        -:10806:*New in version 2.0*.
        -:10807:
        -:10808:**Example**
        -:10809:
        -:10810:[doctest]: # ()
        -:10811:
        -:10812:```c
        -:10813:#include "jerryscript.h"
        -:10814:
        -:10815:int
    #####:10816:main (void)
        -:10817:{
    #####:10818:  const jerry_char_t script[] = "print ('Hello, World!');";
    #####:10819:  const jerry_size_t script_size = sizeof (script) - 1;
        -:10820:
    #####:10821:  if (jerry_is_valid_utf8_string (script, script_size))
        -:10822:  {
    #####:10823:    jerry_run_simple (script, script_size, JERRY_INIT_EMPTY);
        -:10824:  }
        -:10825:
        -:10826:  return 0;
        -:10827:}
        -:10828:```
        -:10829:
        -:10830:**See also**
        -:10831:
        -:10832:- [jerry_run_simple](#jerry_run_simple)
        -:10833:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -:10834:- [jerry_create_string_sz_from_utf8](#jerry_create_string_sz_from_utf8)
        -:10835:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -:10836:- [jerry_get_utf8_string_length](#jerry_get_utf8_string_length)
        -:10837:- [jerry_string_to_utf8_char_buffer](#jerry_string_to_utf8_char_buffer)
        -:10838:- [jerry_substring_to_utf8_char_buffer](#jerry_substring_to_utf8_char_buffer)
        -:10839:
        -:10840:## jerry_is_valid_cesu8_string
        -:10841:
        -:10842:**Summary**
        -:10843:
        -:10844:Check if a given character buffer is a valid CESU-8 string.
        -:10845:
        -:10846:**Notes**: Calling this method is safe in any time. It can be called
        -:10847:even before engine initialization.
        -:10848:
        -:10849:**Prototype**
        -:10850:
        -:10851:```c
        -:10852:bool
        -:10853:jerry_is_valid_cesu8_string (const jerry_char_t *cesu8_buf_p, /**< CESU-8 string */
        -:10854:                             jerry_size_t buf_size) /**< string size */
        -:10855:```
        -:10856:
        -:10857:- `cesu8_buf_p` - CESU-8 input string buffer.
        -:10858:- `buf_size` - input string buffer size in bytes.
        -:10859:- return value
        -:10860:  - true, if the provided string was a valid CESU-8 string.
        -:10861:  - false, if the string is not valid as a CESU-8 string.
        -:10862:
        -:10863:*New in version 2.0*.
        -:10864:
        -:10865:**Example**
        -:10866:
        -:10867:[doctest]: # ()
        -:10868:
        -:10869:```c
        -:10870:#include "jerryscript.h"
        -:10871:
        -:10872:int
    #####:10873:main (void)
        -:10874:{
    #####:10875:  jerry_init (JERRY_INIT_EMPTY);
        -:10876:
    #####:10877:  const jerry_char_t script[] = "Hello, World!";
    #####:10878:  const jerry_size_t script_size = sizeof (script) - 1;
        -:10879:
    #####:10880:  if (jerry_is_valid_cesu8_string (script, script_size))
        -:10881:  {
    #####:10882:    jerry_value_t string_value = jerry_create_string_sz (script,
        -:10883:                                                         script_size);
        -:10884:
        -:10885:    // usage of string_value
        -:10886:
    #####:10887:    jerry_release_value (string_value);
        -:10888:  }
        -:10889:
    #####:10890:  jerry_cleanup ();
        -:10891:  return 0;
        -:10892:}
        -:10893:```
        -:10894:
        -:10895:**See also**
        -:10896:
        -:10897:- [jerry_create_string](#jerry_create_string)
        -:10898:- [jerry_create_string_sz](#jerry_create_string_sz)
        -:10899:- [jerry_get_string_size](#jerry_get_string_size)
        -:10900:- [jerry_get_string_length](#jerry_get_string_length)
        -:10901:- [jerry_string_to_char_buffer](#jerry_string_to_char_buffer)
        -:10902:- [jerry_substring_to_char_buffer](#jerry_substring_to_char_buffer)
        -:10903:
        -:10904:
        -:10905:# Dynamic memory management functions
        -:10906:
        -:10907:## jerry_heap_alloc
        -:10908:
        -:10909:**Summary**
        -:10910:
        -:10911:Allocate memory on the engine's heap.
        -:10912:
        -:10913:*Note*: This function may take away memory from the executed JavaScript code.
        -:10914:If any other dynamic memory allocation API is available (e.g., libc malloc), it
        -:10915:should be used instead.
        -:10916:
        -:10917:**Prototype**
        -:10918:
        -:10919:```c
        -:10920:void *jerry_heap_alloc (size_t size);
        -:10921:```
        -:10922:
        -:10923:- `size`: size of the memory block.
        -:10924:- return value: non-NULL pointer, if the memory is successfully allocated,
        -:10925:                NULL otherwise.
        -:10926:
        -:10927:*New in version 2.0*.
        -:10928:
        -:10929:**See also**
        -:10930:
        -:10931:- [jerry_heap_free](#jerry_heap_free)
        -:10932:
        -:10933:## jerry_heap_free
        -:10934:
        -:10935:**Summary**
        -:10936:
        -:10937:Free memory allocated on the engine's heap.
        -:10938:
        -:10939:**Prototype**
        -:10940:
        -:10941:```c
        -:10942:void jerry_heap_free (void *mem_p, size_t size);
        -:10943:```
        -:10944:
        -:10945:- `mem_p`: value returned by `jerry_heap_alloc`.
        -:10946:- `size`: same size as passed to `jerry_heap_alloc`.
        -:10947:
        -:10948:*New in version 2.0*.
        -:10949:
        -:10950:**See also**
        -:10951:
        -:10952:- [jerry_heap_alloc](#jerry_heap_alloc)
        -:10953:
        -:10954:
        -:10955:# External context functions
        -:10956:
        -:10957:## jerry_create_context
        -:10958:
        -:10959:**Summary**
        -:10960:
        -:10961:Create an external JerryScript engine context.
        -:10962:
        -:10963:**Prototype**
        -:10964:
        -:10965:```c
        -:10966:jerry_context_t *
        -:10967:jerry_create_context (uint32_t heap_size,
        -:10968:                      jerry_context_alloc_t alloc,
        -:10969:                      void *cb_data_p);
        -:10970:```
        -:10971:
        -:10972:- `heap_size` - requested heap size of the JerryScript context
        -:10973:- `alloc` - function for allocation
        -:10974:- `cb_data_p` - user data
        -:10975:- return value
        -:10976:  - pointer to the newly created JerryScript context if success
        -:10977:  - NULL otherwise.
        -:10978:
        -:10979:*New in version 2.0*.
        -:10980:
        -:10981:**Example**
        -:10982:
        -:10983:[doctest]: # (test="compile", name="02.API-REFERENCE-create-context.c")
        -:10984:
        -:10985:```c
        -:10986:#include <stdlib.h>
        -:10987:#include <pthread.h>
        -:10988:
        -:10989:#include "jerryscript.h"
        -:10990:#include "jerryscript-port.h"
        -:10991:
        -:10992:/* A different Thread Local Storage variable for each jerry context. */
        -:10993:__thread jerry_context_t *tls_context;
        -:10994:
        -:10995:jerry_context_t *
    #####:10996:jerry_port_get_current_context (void)
        -:10997:{
        -:10998:  /* Returns the context assigned to the thread. */
    #####:10999:  return tls_context;
        -:11000:}
        -:11001:
        -:11002:/* Allocate JerryScript heap for each thread. */
        -:11003:static void *
    #####:11004:context_alloc_fn (size_t size, void *cb_data)
        -:11005:{
        -:11006:  (void) cb_data;
    #####:11007:  return malloc (size);
        -:11008:}
        -:11009:
        -:11010:static void *
    #####:11011:thread_function (void *param)
        -:11012:{
    #####:11013:  tls_context = jerry_create_context (512 * 1024,
        -:11014:                                      context_alloc_fn,
        -:11015:                                      NULL);
    #####:11016:  jerry_init (JERRY_INIT_EMPTY);
        -:11017:  /* Run JerryScript in the context (e.g.: jerry_parse & jerry_run) */
    #####:11018:  jerry_cleanup ();
        -:11019:
        -:11020:  /* Deallocate JerryScript context */
    #####:11021:  free (tls_context);
        -:11022:
    #####:11023:  return NULL;
        -:11024:}
        -:11025:
        -:11026:#define NUM_OF_THREADS 8
        -:11027:
        -:11028:int
    #####:11029:main (void)
        -:11030:{
        -:11031:  pthread_t threads[NUM_OF_THREADS];
        -:11032:
        -:11033:  /* Create the threads. */
    #####:11034:  for (int i = 0; i < NUM_OF_THREADS; i++)
        -:11035:  {
    #####:11036:    pthread_create (&threads[i], NULL, thread_function, (void *) (intptr_t) i);
        -:11037:  }
        -:11038:
        -:11039:  /* Wait for the threads to complete, and release their resources. */
    #####:11040:  for (int i = 0; i < NUM_OF_THREADS; i++)
        -:11041:  {
    #####:11042:    pthread_join (threads[i], NULL);
        -:11043:  }
        -:11044:
        -:11045:  return 0;
        -:11046:}
        -:11047:```
        -:11048:
        -:11049:**See also**
        -:11050:
        -:11051:- [jerry_context_t](#jerry_context_t)
        -:11052:- [jerry_context_alloc_t](#jerry_context_alloc_t)
        -:11053:- [jerry_port_get_current_context](05.PORT-API.md#jerry_port_get_current_context)
        -:11054:
        -:11055:
        -:11056:# Snapshot functions
        -:11057:
        -:11058:## jerry_generate_snapshot
        -:11059:
        -:11060:**Summary**
        -:11061:
        -:11062:Generate snapshot from the specified source code.
        -:11063:
        -:11064:*Notes*:
        -:11065:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:11066:  is no longer needed.
        -:11067:- This API depends on a build option (`JERRY_SNAPSHOT_SAVE`) and can be checked in runtime with
        -:11068:  the `JERRY_FEATURE_SNAPSHOT_SAVE` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11069:  If the feature is not enabled the function will return an error.
        -:11070:
        -:11071:**Prototype**
        -:11072:
        -:11073:```c
        -:11074:jerry_value_t
        -:11075:jerry_generate_snapshot (jerry_value_t compiled_code,
        -:11076:                         uint32_t generate_snapshot_opts,
        -:11077:                         uint32_t *buffer_p,
        -:11078:                         size_t buffer_size);
        -:11079:```
        -:11080:
        -:11081:- `compiled_code` - compiled script or function (see: [jerry_parse](#jerry_parse)).
        -:11082:- `generate_snapshot_opts` - any combination of [jerry_generate_snapshot_opts_t](#jerry_generate_snapshot_opts_t) flags.
        -:11083:- `buffer_p` - output buffer (aligned to 4 bytes) to save snapshot to.
        -:11084:- `buffer_size` - the output buffer's size in bytes.
        -:11085:- return value
        -:11086:  - the size of the generated snapshot in bytes as number value, if it was generated succesfully (i.e. there
        -:11087:    are no syntax errors in source code, buffer size is sufficient, and snapshot support is enabled in
        -:11088:    current configuration through JERRY_SNAPSHOT_SAVE)
        -:11089:  - thrown error, otherwise.
        -:11090:
        -:11091:*New in version 2.0*.
        -:11092:
        -:11093:*Changed in version [[NEXT_RELEASE]]*: The `source_p`, `source_size`, `resource_name_p`,
        -:11094:                                       and `resource_name_length` arguments are replaced by `compiled_code`
        -:11095:                                       which should contain a compiled ECMAScript script / function.
        -:11096:                                       The `jerry_generate_function_snapshot` is now removed and can be reproduced
        -:11097:                                       by calling `jerry_parse` with function arguments and using this method
        -:11098:                                       (see [jerry_exec_snapshot](#jerry_exec_snapshot)).
        -:11099:**Example**
        -:11100:
        -:11101:[doctest]: # ()
        -:11102:
        -:11103:```c
        -:11104:#include "jerryscript.h"
        -:11105:
        -:11106:int
    #####:11107:main (void)
        -:11108:{
    #####:11109:  jerry_init (JERRY_INIT_EMPTY);
        -:11110:
        -:11111:  static uint32_t global_mode_snapshot_buffer[256];
    #####:11112:  const jerry_char_t script_to_snapshot[] = "(function () { return 'string from snapshot'; }) ();";
        -:11113:
    #####:11114:  jerry_value_t parse_result = jerry_parse (script_to_snapshot,
        -:11115:                                            sizeof (script_to_snapshot) - 1,
        -:11116:                                            NULL);
        -:11117:
    #####:11118:  size_t buffer_size = sizeof (global_mode_snapshot_buffer) / sizeof (uint32_t);
    #####:11119:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:11120:                                                           0,
        -:11121:                                                           global_mode_snapshot_buffer,
        -:11122:                                                           buffer_size);
    #####:11123:  jerry_release_value (parse_result);
        -:11124:
    #####:11125:  if (!jerry_value_is_error (generate_result))
        -:11126:  {
    #####:11127:    size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
        -:11128:  }
        -:11129:
    #####:11130:  jerry_release_value (generate_result);
        -:11131:
    #####:11132:  jerry_cleanup ();
        -:11133:  return 0;
        -:11134:}
        -:11135:```
        -:11136:
        -:11137:**See also**
        -:11138:
        -:11139:- [jerry_parse](#jerry_parse)
        -:11140:- [jerry_parse_value](#jerry_parse_value)
        -:11141:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:11142:- [jerry_parse_options_t](#jerry_parse_options_t)
        -:11143:
        -:11144:
        -:11145:## jerry_exec_snapshot
        -:11146:
        -:11147:**Summary**
        -:11148:
        -:11149:Execute/load snapshot from the specified buffer.
        -:11150:
        -:11151:*Notes*:
        -:11152:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:11153:  is no longer needed.
        -:11154:- This API depends on a build option (`JERRY_SNAPSHOT_EXEC`) and can be checked in runtime with
        -:11155:  the `JERRY_FEATURE_SNAPSHOT_EXEC` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11156:  If the feature is not enabled the function will return an error.
        -:11157:
        -:11158:**Prototype**
        -:11159:
        -:11160:```c
        -:11161:jerry_value_t
        -:11162:jerry_exec_snapshot (const uint32_t *snapshot_p,
        -:11163:                     size_t snapshot_size,
        -:11164:                     size_t func_index,
        -:11165:                     uint32_t exec_snapshot_opts,
        -:11166:                     const jerry_exec_snapshot_option_values_t *options_values_p);
        -:11167:```
        -:11168:
        -:11169:- `snapshot_p` - pointer to snapshot.
        -:11170:- `snapshot_size` - size of snapshot in bytes.
        -:11171:- `func_index` - index of executed function.
        -:11172:- `exec_snapshot_opts` - any combination of [jerry_exec_snapshot_opts_t](#jerry_exec_snapshot_opts_t) flags.
        -:11173:- `options_values_p` - additional loadig options, can be NULL if not used. The fields are described in
        -:11174:                       [jerry_exec_snapshot_option_values_t](#jerry_exec_snapshot_option_values_t).
        -:11175:- return value
        -:11176:  - result of bytecode, if run was successful.
        -:11177:  - thrown error, otherwise (an error is reported if the snapshot execution feature is not enabled).
        -:11178:
        -:11179:*Changed in version 2.0*: Added `func_index` and `exec_snapshot_opts` arguments. Removed the `copy_bytecode` last argument.
        -:11180:
        -:11181:*Changed in version [[NEXT_RELEASE]]*: Added `options_p` argument.
        -:11182:
        -:11183:**Example 1**
        -:11184:
        -:11185:[doctest]: # ()
        -:11186:
        -:11187:```c
        -:11188:#include "jerryscript.h"
        -:11189:
        -:11190:int
    #####:11191:main (void)
        -:11192:{
        -:11193:  static uint32_t snapshot_buffer[256];
        -:11194:
        -:11195:  /* 1st example: global mode snapshot. */
    #####:11196:  jerry_init (JERRY_INIT_EMPTY);
        -:11197:
    #####:11198:  const jerry_char_t script_to_snapshot[] = "(function () { return 'string from snapshot'; }) ();";
        -:11199:
    #####:11200:  jerry_value_t parse_result = jerry_parse (script_to_snapshot,
        -:11201:                                            sizeof (script_to_snapshot) - 1,
        -:11202:                                            NULL);
        -:11203:
    #####:11204:  size_t buffer_size = sizeof (snapshot_buffer) / sizeof (uint32_t);
    #####:11205:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:11206:                                                           0,
        -:11207:                                                           snapshot_buffer,
        -:11208:                                                           buffer_size);
    #####:11209:  jerry_release_value (parse_result);
        -:11210:
        -:11211:  /* 'generate_result' variable should be checked whether it contains an error. */
        -:11212:
    #####:11213:  size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:11214:  jerry_release_value (generate_result);
        -:11215:
    #####:11216:  jerry_cleanup ();
    #####:11217:  jerry_init (JERRY_INIT_EMPTY);
        -:11218:
    #####:11219:  jerry_value_t res = jerry_exec_snapshot (snapshot_buffer,
        -:11220:                                           snapshot_size,
        -:11221:                                           0,
        -:11222:                                           0,
        -:11223:                                           NULL);
        -:11224:
        -:11225:  /* 'res' now contains 'string from snapshot' */
    #####:11226:  jerry_release_value (res);
        -:11227:
    #####:11228:  jerry_cleanup ();
        -:11229:  return 0;
        -:11230:}
        -:11231:```
        -:11232:
        -:11233:**Example 2**
        -:11234:
        -:11235:[doctest]: # ()
        -:11236:
        -:11237:```c
        -:11238:#include "jerryscript.h"
        -:11239:
        -:11240:int
    #####:11241:main (void)
        -:11242:{
        -:11243:  static uint32_t snapshot_buffer[256];
        -:11244:
        -:11245:  /* 2nd example: function snapshot. */
    #####:11246:  jerry_init (JERRY_INIT_EMPTY);
        -:11247:
    #####:11248:  const jerry_char_t function_to_snapshot[] = "return a + b;";
        -:11249:
        -:11250:  jerry_parse_options_t parse_options;
    #####:11251:  parse_options.options = JERRY_PARSE_HAS_ARGUMENT_LIST;
    #####:11252:  parse_options.argument_list = jerry_create_string ((const jerry_char_t *) "a, b");
        -:11253:
    #####:11254:  jerry_value_t parse_result = jerry_parse (function_to_snapshot,
        -:11255:                                            sizeof (function_to_snapshot) - 1,
        -:11256:                                            &parse_options);
        -:11257:
    #####:11258:  size_t buffer_size = sizeof (snapshot_buffer) / sizeof (uint32_t);
    #####:11259:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:11260:                                                           0,
        -:11261:                                                           snapshot_buffer,
        -:11262:                                                           buffer_size);
    #####:11263:  jerry_release_value (parse_result);
    #####:11264:  jerry_release_value (parse_options.argument_list);
        -:11265:
        -:11266:  /* 'generate_result' variable should be checked whether it contains an error. */
        -:11267:
    #####:11268:  size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:11269:  jerry_release_value (generate_result);
        -:11270:
    #####:11271:  jerry_cleanup ();
    #####:11272:  jerry_init (JERRY_INIT_EMPTY);
        -:11273:
    #####:11274:  jerry_value_t func = jerry_exec_snapshot (snapshot_buffer,
        -:11275:                                            snapshot_size,
        -:11276:                                            0,
        -:11277:                                            JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION,
        -:11278:                                            NULL);
        -:11279:  /* 'func' can be used now as a function object. */
        -:11280:
    #####:11281:  jerry_value_t this_value = jerry_create_undefined ();
        -:11282:  jerry_value_t args[2];
    #####:11283:  args[0] = jerry_create_number (1.0);
    #####:11284:  args[1] = jerry_create_number (2.0);
        -:11285:
    #####:11286:  jerry_value_t res = jerry_call_function (func, this_value, args, 2);
        -:11287:
        -:11288:  /* 'res' now contains the value 3 as a jerry_value_t. */
    #####:11289:  jerry_release_value (res);
    #####:11290:  jerry_release_value (args[0]);
    #####:11291:  jerry_release_value (args[1]);
    #####:11292:  jerry_release_value (this_value);
    #####:11293:  jerry_release_value (func);
        -:11294:
    #####:11295:  jerry_cleanup ();
        -:11296:  return 0;
        -:11297:}
        -:11298:```
        -:11299:
        -:11300:**See also**
        -:11301:
        -:11302:- [jerry_init](#jerry_init)
        -:11303:- [jerry_cleanup](#jerry_cleanup)
        -:11304:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:11305:
        -:11306:
        -:11307:## jerry_get_literals_from_snapshot
        -:11308:
        -:11309:**Summary**
        -:11310:
        -:11311:Collect the used literals from the given snapshot and save them into a buffer in list or C format.
        -:11312:None of these literals are magic strings. In C format only valid identifiers are collected.
        -:11313:
        -:11314:*Note*:
        -:11315:- This API depends on a build option (`JERRY_SNAPSHOT_SAVE`) and can be checked in runtime with
        -:11316:  the `JERRY_FEATURE_SNAPSHOT_SAVE` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11317:  If the feature is not enabled the function will return zero.
        -:11318:
        -:11319:**Prototype**
        -:11320:
        -:11321:```c
        -:11322:size_t
        -:11323:jerry_get_literals_from_snapshot (const uint32_t *snapshot_p,
        -:11324:                                  size_t snapshot_size,
        -:11325:                                  jerry_char_t *lit_buf_p,
        -:11326:                                  size_t lit_buf_size,
        -:11327:                                  bool is_c_format);
        -:11328:```
        -:11329:
        -:11330:- `snapshot_p` - input snapshot buffer.
        -:11331:- `snapshot_size` - size of snapshot in bytes.
        -:11332:- `lit_buf_p` - buffer to save literals to.
        -:11333:- `lit_buf_size` - the buffer's size.
        -:11334:- `is_c_format` - the output format would be C-style (true) or a simple list (false).
        -:11335:- return value
        -:11336:  - the size of the literal-list, if it was generated succesfully (i.e. the list of literals isn't empty,
        -:11337:    and literal-save support is enabled in current configuration through JERRY_SNAPSHOT_SAVE)
        -:11338:  - 0 otherwise.
        -:11339:
        -:11340:*New in version 2.0*.
        -:11341:
        -:11342:**Example**
        -:11343:
        -:11344:[doctest]: # (test="link")
        -:11345:
        -:11346:```c
        -:11347:#include <stdio.h>
        -:11348:#include "jerryscript.h"
        -:11349:
        -:11350:int
    #####:11351:main (void)
        -:11352:{
    #####:11353:  jerry_init (JERRY_INIT_EMPTY);
        -:11354:
        -:11355:  static jerry_char_t literal_buffer[256];
        -:11356:  static uint32_t snapshot_buffer[256];
    #####:11357:  const jerry_char_t script_for_literal_save[] = "var obj = { a:'aa', bb:'Bb' }";
        -:11358:
    #####:11359:  jerry_value_t parse_result = jerry_parse (script_for_literal_save,
        -:11360:                                            sizeof (script_for_literal_save) - 1,
        -:11361:                                            NULL);
        -:11362:
    #####:11363:  size_t buffer_size = sizeof (snapshot_buffer) / sizeof (uint32_t);
    #####:11364:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:11365:                                                           0,
        -:11366:                                                           snapshot_buffer,
        -:11367:                                                           buffer_size);
    #####:11368:  jerry_release_value (parse_result);
        -:11369:
    #####:11370:  size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:11371:  jerry_release_value (generate_result);
        -:11372:
    #####:11373:  const size_t literal_size = jerry_get_literals_from_snapshot (snapshot_buffer,
        -:11374:                                                                snapshot_size,
        -:11375:                                                                literal_buffer,
        -:11376:                                                                256,
        -:11377:                                                                true);
        -:11378:
    #####:11379:  if (literal_size != 0)
        -:11380:  {
    #####:11381:    FILE *literal_file_p = fopen ("literals.h", "wb");
    #####:11382:    fwrite (literal_buffer, sizeof (uint8_t), literal_size, literal_file_p);
    #####:11383:    fclose (literal_file_p);
        -:11384:  }
        -:11385:
    #####:11386:  jerry_cleanup ();
        -:11387:  return 0;
        -:11388:}
        -:11389:```
        -:11390:
        -:11391:**See also**
        -:11392:
        -:11393:- [jerry_init](#jerry_init)
        -:11394:- [jerry_cleanup](#jerry_cleanup)
        -:11395:- [jerry_register_magic_strings](#jerry_register_magic_strings)
        -:11396:
        -:11397:
        -:11398:# Backtrace functions
        -:11399:
        -:11400:## jerry_get_backtrace
        -:11401:
        -:11402:**Summary**
        -:11403:
        -:11404:Get backtrace. The backtrace is an array of strings where
        -:11405:each string contains the position of the corresponding frame.
        -:11406:The array length is zero if the backtrace is not available.
        -:11407:
        -:11408:This function is typically called from native callbacks.
        -:11409:
        -:11410:*Notes*:
        -:11411:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:11412:is no longer needed.
        -:11413:- This feature depends on build option (`JERRY_LINE_INFO`) and can be checked
        -:11414:  in runtime with the `JERRY_FEATURE_LINE_INFO` feature enum value,
        -:11415:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11416:
        -:11417:**Prototype**
        -:11418:
        -:11419:```c
        -:11420:jerry_value_t
        -:11421:jerry_get_backtrace (uint32_t max_depth);
        -:11422:```
        -:11423:
        -:11424:- `max_depth` - backtrace collection stops after reaching this value, 0 = unlimited
        -:11425:- return value
        -:11426:  - a newly constructed JS array
        -:11427:
        -:11428:*New in version 2.0*.
        -:11429:
        -:11430:**Example**
        -:11431:
        -:11432:[doctest]: # (name="02.API-REFERENCE-jsbacktrace.c")
        -:11433:
        -:11434:```c
        -:11435:#include <stdio.h>
        -:11436:#include <string.h>
        -:11437:#include "jerryscript.h"
        -:11438:
        -:11439:static jerry_value_t
    #####:11440:backtrace_handler (const jerry_call_info_t *call_info_p,
        -:11441:                   const jerry_value_t args_p[],
        -:11442:                   const jerry_length_t args_count)
        -:11443:{
    #####:11444:  if (!jerry_is_feature_enabled (JERRY_FEATURE_LINE_INFO))
        -:11445:  {
    #####:11446:    printf ("Line info disabled, no backtrace will be printed\n");
    #####:11447:    return jerry_create_undefined ();
        -:11448:  }
        -:11449:
        -:11450:  /* If the line info feature is disabled an empty array will be returned. */
    #####:11451:  jerry_value_t backtrace_array = jerry_get_backtrace (5);
    #####:11452:  uint32_t array_length = jerry_get_array_length (backtrace_array);
        -:11453:
    #####:11454:  for (uint32_t idx = 0; idx < array_length; idx++)
        -:11455:  {
    #####:11456:    jerry_value_t property = jerry_get_property_by_index (backtrace_array, idx);
        -:11457:
        -:11458:    jerry_char_t string_buffer[64];
    #####:11459:    jerry_size_t copied_bytes = jerry_substring_to_char_buffer (property,
        -:11460:                                                                0,
        -:11461:                                                                63,
        -:11462:                                                                string_buffer,
        -:11463:                                                                63);
    #####:11464:    string_buffer[copied_bytes] = '\0';
    #####:11465:    printf(" %d: %s\n", idx, string_buffer);
        -:11466:
    #####:11467:    jerry_release_value (property);
        -:11468:  }
        -:11469:
    #####:11470:  jerry_release_value (backtrace_array);
        -:11471:
    #####:11472:  return jerry_create_undefined ();
        -:11473:} /* backtrace_handler */
        -:11474:
        -:11475:int
    #####:11476:main (void)
        -:11477:{
    #####:11478:  jerry_init (JERRY_INIT_EMPTY);
        -:11479:
    #####:11480:  jerry_value_t global = jerry_get_global_object ();
        -:11481:
        -:11482:  /* Register the "capture_backtrace" method. */
        -:11483:  {
    #####:11484:    jerry_value_t func = jerry_create_external_function (backtrace_handler);
    #####:11485:    jerry_value_t name = jerry_create_string ((const jerry_char_t *) "backtrace");
    #####:11486:    jerry_value_t result = jerry_set_property (global, name, func);
    #####:11487:    jerry_release_value (result);
    #####:11488:    jerry_release_value (name);
    #####:11489:    jerry_release_value (func);
        -:11490:  }
        -:11491:
    #####:11492:  jerry_release_value (global);
        -:11493:
    #####:11494:  const char *source = ("function f() { g (); }\n"
        -:11495:                        "function g() { h (); }\n"
        -:11496:                        "function h() { backtrace (); }\n"
        -:11497:                        "f ();\n");
        -:11498:
        -:11499:  jerry_parse_options_t parse_options;
    #####:11500:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
    #####:11501:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "demo_memory.js");
        -:11502:
    #####:11503:  jerry_value_t program = jerry_parse ((const jerry_char_t *) source,
        -:11504:                                       strlen (source),
        -:11505:                                       &parse_options);
    #####:11506:  jerry_release_value (parse_options.resource_name);
        -:11507:
    #####:11508:  if (!jerry_value_is_error (program))
        -:11509:  {
    #####:11510:    jerry_value_t run_result = jerry_run (program);
    #####:11511:    jerry_release_value (run_result);
        -:11512:  }
        -:11513:
    #####:11514:  jerry_release_value (program);
    #####:11515:  jerry_cleanup ();
        -:11516:
        -:11517:  return 0;
        -:11518:}
        -:11519:```
        -:11520:
        -:11521:**See also**
        -:11522:
        -:11523:- [jerry_get_backtrace_from](#jerry_get_backtrace_from)
        -:11524:- [jerry_create_external_function](#jerry_create_external_function)
        -:11525:
        -:11526:
        -:11527:## jerry_backtrace_capture
        -:11528:
        -:11529:**Summary**
        -:11530:
        -:11531:Low-level function to capture each backtrace frame. The captured frame data
        -:11532:is passed to a callback function. To improve performance, the majority of
        -:11533:the frame data is not initialized when the callback function is called. The
        -:11534:initialization of these fields can be done later by helper functions such
        -:11535:as [jerry_backtrace_get_location](#jerry_backtrace_get_location).
        -:11536:
        -:11537:**Prototype**
        -:11538:
        -:11539:```c
        -:11540:void
        -:11541:jerry_backtrace_capture (jerry_backtrace_callback_t callback, void *user_p);
        -:11542:```
        -:11543:
        -:11544:- `callback` - a [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11545:               which is called for each captured frame
        -:11546:- `user_p` - pointer passed to the `callback` function, can be NULL
        -:11547:
        -:11548:*New in version [[NEXT_RELEASE]]*.
        -:11549:
        -:11550:**Example**
        -:11551:
        -:11552:[doctest]: # (name="02.API-REFERENCE-jscapturebacktrace.c")
        -:11553:
        -:11554:```c
        -:11555:#include <stdio.h>
        -:11556:#include <string.h>
        -:11557:#include "jerryscript.h"
        -:11558:
        -:11559:static bool
    #####:11560:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11561:                    void *user_p)
        -:11562:{
    #####:11563:  printf (" A stack frame is captured\n");
    #####:11564:  return true;
        -:11565:}
        -:11566:
        -:11567:static jerry_value_t
    #####:11568:backtrace_handler (const jerry_call_info_t *call_info_p,
        -:11569:                   const jerry_value_t args_p[],
        -:11570:                   const jerry_length_t args_count)
        -:11571:{
        -:11572:  (void) call_info_p;
        -:11573:  (void) args_p;
        -:11574:  (void) args_count;
        -:11575:
    #####:11576:  jerry_backtrace_capture (&backtrace_callback, NULL);
        -:11577:
    #####:11578:  return jerry_create_undefined ();
        -:11579:} /* backtrace_handler */
        -:11580:
        -:11581:int
    #####:11582:main (void)
        -:11583:{
    #####:11584:  jerry_init (JERRY_INIT_EMPTY);
        -:11585:
    #####:11586:  jerry_value_t global = jerry_get_global_object ();
        -:11587:
        -:11588:  /* Register the "dump_backtrace" method. */
        -:11589:  {
    #####:11590:    jerry_value_t func = jerry_create_external_function (backtrace_handler);
    #####:11591:    jerry_value_t name = jerry_create_string ((const jerry_char_t *) "backtrace");
    #####:11592:    jerry_value_t result = jerry_set_property (global, name, func);
    #####:11593:    jerry_release_value (result);
    #####:11594:    jerry_release_value (name);
    #####:11595:    jerry_release_value (func);
        -:11596:  }
        -:11597:
    #####:11598:  jerry_release_value (global);
        -:11599:
    #####:11600:  const char *source = ("function f() { g (); }\n"
        -:11601:                        "function g() { h (); }\n"
        -:11602:                        "function h() { backtrace (g); }\n"
        -:11603:                        "f ();\n");
        -:11604:
        -:11605:  jerry_parse_options_t parse_options;
    #####:11606:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
    #####:11607:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "demo_backtrace.js");
        -:11608:
    #####:11609:  jerry_value_t program = jerry_parse ((const jerry_char_t *) source,
        -:11610:                                       strlen (source),
        -:11611:                                       &parse_options);
    #####:11612:  jerry_release_value (parse_options.resource_name);
        -:11613:
    #####:11614:  if (!jerry_value_is_error (program))
        -:11615:  {
    #####:11616:    jerry_value_t run_result = jerry_run (program);
    #####:11617:    jerry_release_value (run_result);
        -:11618:  }
        -:11619:
    #####:11620:  jerry_release_value (program);
    #####:11621:  jerry_cleanup ();
        -:11622:
        -:11623:  return 0;
        -:11624:}
        -:11625:```
        -:11626:
        -:11627:**See also**
        -:11628:
        -:11629:- [jerry_get_backtrace](#jerry_get_backtrace)
        -:11630:- [jerry_backtrace_get_frame_type](#jerry_backtrace_get_frame_type)
        -:11631:- [jerry_backtrace_get_location](#jerry_backtrace_get_location)
        -:11632:- [jerry_backtrace_get_function](#jerry_backtrace_get_function)
        -:11633:- [jerry_backtrace_get_this](#jerry_backtrace_get_this)
        -:11634:- [jerry_backtrace_is_strict](#jerry_backtrace_is_strict)
        -:11635:
        -:11636:
        -:11637:## jerry_backtrace_get_frame_type
        -:11638:
        -:11639:**Summary**
        -:11640:
        -:11641:Returns with the type of the backtrace frame. This function can only be called
        -:11642:from the callback function of [jerry_backtrace_capture](#jerry_backtrace_capture),
        -:11643:and the value becomes invalid after the callback returns.
        -:11644:
        -:11645:**Prototype**
        -:11646:
        -:11647:```c
        -:11648:jerry_backtrace_frame_types_t
        -:11649:jerry_backtrace_get_frame_type (jerry_backtrace_frame_t *frame_p);
        -:11650:```
        -:11651:
        -:11652:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11653:- return value
        -:11654:  - frame type listed in [jerry_backtrace_frame_types_t](#jerry_backtrace_frame_types_t)
        -:11655:
        -:11656:*New in version [[NEXT_RELEASE]]*.
        -:11657:
        -:11658:**Example**
        -:11659:
        -:11660:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11661:with the following callback function:
        -:11662:
        -:11663:```c
        -:11664:static bool
        -:11665:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11666:                    void *user_p)
        -:11667:{
        -:11668:  switch (jerry_backtrace_get_frame_type (frame_p))
        -:11669:  {
        -:11670:    case JERRY_BACKTRACE_FRAME_JS:
        -:11671:    {
        -:11672:      printf (" ECMAScript frame\n");
        -:11673:      break;
        -:11674:    }
        -:11675:    default:
        -:11676:    {
        -:11677:      printf (" Other frame\n");
        -:11678:      break;
        -:11679:    }
        -:11680:  }
        -:11681:
        -:11682:  return true;
        -:11683:}
        -:11684:```
        -:11685:
        -:11686:**See also**
        -:11687:
        -:11688:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11689:
        -:11690:
        -:11691:## jerry_backtrace_get_location
        -:11692:
        -:11693:**Summary**
        -:11694:
        -:11695:Initialize and return with the location private field of a backtrace
        -:11696:frame. If the location is not available, the returned value is NULL.
        -:11697:This function can only be called from the callback function of
        -:11698:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value
        -:11699:becomes invalid after the callback returns.
        -:11700:
        -:11701:*Notes*:
        -:11702:- Location information can only be retrieved if JERRY_FEATURE_LINE_INFO feature is
        -:11703:  enabled. Otherwise the function always returns with NULL.
        -:11704:- The returned data must not be modified, and does not need to be freed.
        -:11705:  Any cleanup is done automatically after the callback is returned.
        -:11706:
        -:11707:**Prototype**
        -:11708:
        -:11709:```c
        -:11710:const jerry_backtrace_location_t *
        -:11711:jerry_backtrace_get_location (jerry_backtrace_frame_t *frame_p);
        -:11712:```
        -:11713:
        -:11714:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11715:- return value
        -:11716:  - pointer to the location private field if the location is available,
        -:11717:  - NULL otherwise
        -:11718:
        -:11719:*New in version [[NEXT_RELEASE]]*.
        -:11720:
        -:11721:**Example**
        -:11722:
        -:11723:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11724:with the following callback function:
        -:11725:
        -:11726:```c
        -:11727:static bool
        -:11728:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11729:                    void *user_p)
        -:11730:{
        -:11731:  const jerry_backtrace_location_t *location_p;
        -:11732:  location_p = jerry_backtrace_get_location (frame_p);
        -:11733:
        -:11734:  if (location_p == NULL)
        -:11735:  {
        -:11736:    printf ("No location info is available\n");
        -:11737:    return true;
        -:11738:  }
        -:11739:
        -:11740:  jerry_char_t string_buffer[64];
        -:11741:  jerry_size_t copied_bytes = jerry_substring_to_char_buffer (location_p->resource_name,
        -:11742:                                                              0,
        -:11743:                                                              63,
        -:11744:                                                              string_buffer,
        -:11745:                                                              63);
        -:11746:  string_buffer[copied_bytes] = '\0';
        -:11747:  printf(" %s:%d:%d\n", string_buffer, (int) location_p->line, (int) location_p->column);
        -:11748:  return true;
        -:11749:}
        -:11750:```
        -:11751:
        -:11752:**See also**
        -:11753:
        -:11754:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11755:
        -:11756:
        -:11757:## jerry_backtrace_get_function
        -:11758:
        -:11759:**Summary**
        -:11760:
        -:11761:Initialize and return with the called function private field of a backtrace frame.
        -:11762:The backtrace frame is created for running the code bound to this function. This
        -:11763:function can only be called from the callback function of
        -:11764:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value becomes invalid
        -:11765:after the callback returns.
        -:11766:
        -:11767:*Notes*:
        -:11768:- The returned data must not be modified, and does not need to be freed.
        -:11769:  Any cleanup is done automatically after the callback is returned.
        -:11770:
        -:11771:**Prototype**
        -:11772:
        -:11773:```c
        -:11774:const jerry_value_t *
        -:11775:jerry_backtrace_get_function (jerry_backtrace_frame_t *frame_p);
        -:11776:```
        -:11777:
        -:11778:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11779:- return value
        -:11780:  - pointer to the called function if the function is available,
        -:11781:  - NULL otherwise
        -:11782:
        -:11783:*New in version [[NEXT_RELEASE]]*.
        -:11784:
        -:11785:**Example**
        -:11786:
        -:11787:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11788:with the following callback function:
        -:11789:
        -:11790:```c
        -:11791:static bool
        -:11792:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11793:                    void *user_p)
        -:11794:{
        -:11795:  jerry_value_t *function_p = jerry_backtrace_get_function (frame_p);
        -:11796:
        -:11797:  if (function_p != NULL)
        -:11798:  {
        -:11799:    printf ("Called function is available");
        -:11800:    return true;
        -:11801:  }
        -:11802:
        -:11803:  printf ("Called function is NOT available");
        -:11804:  return true;
        -:11805:}
        -:11806:```
        -:11807:
        -:11808:**See also**
        -:11809:
        -:11810:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11811:
        -:11812:
        -:11813:## jerry_backtrace_get_this
        -:11814:
        -:11815:**Summary**
        -:11816:
        -:11817:Initialize and return with the 'this' binding private field of a backtrace frame.
        -:11818:The 'this' binding is a hidden value passed to the called function. As for arrow
        -:11819:functions, the 'this' binding is assigned at function creation. This getter
        -:11820:function can only be called from the callback function of
        -:11821:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value becomes invalid
        -:11822:after the callback returns.
        -:11823:
        -:11824:*Notes*:
        -:11825:- The returned data must not be modified, and does not need to be freed.
        -:11826:  Any cleanup is done automatically after the callback is returned.
        -:11827:
        -:11828:**Prototype**
        -:11829:
        -:11830:```c
        -:11831:const jerry_value_t *
        -:11832:jerry_backtrace_get_this (jerry_backtrace_frame_t *frame_p);
        -:11833:```
        -:11834:
        -:11835:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11836:- return value
        -:11837:  - pointer to the 'this' binding if the binding is available,
        -:11838:  - NULL otherwise
        -:11839:
        -:11840:*New in version [[NEXT_RELEASE]]*.
        -:11841:
        -:11842:**Example**
        -:11843:
        -:11844:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11845:with the following callback function:
        -:11846:
        -:11847:```c
        -:11848:static bool
        -:11849:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11850:                    void *user_p)
        -:11851:{
        -:11852:  jerry_value_t *this_p = jerry_backtrace_get_this (frame_p);
        -:11853:
        -:11854:  if (this_p != NULL)
        -:11855:  {
        -:11856:    printf ("The 'this' binding is available");
        -:11857:    return true;
        -:11858:  }
        -:11859:
        -:11860:  printf ("The 'this' binding is NOT available");
        -:11861:  return true;
        -:11862:}
        -:11863:```
        -:11864:
        -:11865:**See also**
        -:11866:
        -:11867:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11868:
        -:11869:
        -:11870:## jerry_backtrace_is_strict
        -:11871:
        -:11872:**Summary**
        -:11873:
        -:11874:Returns true, if the code bound to the backtrace frame is strict mode
        -:11875:code. This function can only be called from the callback function of
        -:11876:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value
        -:11877:becomes invalid after the callback returns.
        -:11878:
        -:11879:**Prototype**
        -:11880:
        -:11881:```c
        -:11882:bool
        -:11883:jerry_backtrace_is_strict (jerry_backtrace_frame_t *frame_p);
        -:11884:```
        -:11885:
        -:11886:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11887:- return value
        -:11888:  - true, if strict mode code is bound to the frame
        -:11889:  - false, otherwise
        -:11890:
        -:11891:*New in version [[NEXT_RELEASE]]*.
        -:11892:
        -:11893:**Example**
        -:11894:
        -:11895:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11896:with the following callback function:
        -:11897:
        -:11898:```c
        -:11899:static bool
        -:11900:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11901:                    void *user_p)
        -:11902:{
        -:11903:  if (jerry_backtrace_is_strict (frame_p))
        -:11904:  {
        -:11905:    printf ("Strict mode code is running");
        -:11906:    return truel
        -:11907:  }
        -:11908:
        -:11909:  printf ("Non-strict mode code is running");
        -:11910:  return true;
        -:11911:}
        -:11912:```
        -:11913:
        -:11914:**See also**
        -:11915:
        -:11916:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11917:
        -:11918:
        -:11919:# Miscellaneous functions
        -:11920:
        -:11921:## jerry_set_vm_exec_stop_callback
        -:11922:
        -:11923:**Summary**
        -:11924:
        -:11925:The callback passed to this function is periodically called when
        -:11926:JerryScript executes an ECMAScript program.
        -:11927:
        -:11928:If the callback returns with undefined value the ECMAScript execution
        -:11929:continues. Otherwise the result is thrown by the engine (if the error
        -:11930:flag is not set for the returned value the engine automatically sets
        -:11931:it). The callback function might be called again even if it threw
        -:11932:an error. In this case the function must throw the same error again.
        -:11933:
        -:11934:To reduce the CPU overhead of constantly checking the termination
        -:11935:condition the callback is called when a backward jump is executed
        -:11936:or an exception is caught. Setting the `frequency` to a greater
        -:11937:than `1` value reduces this overhead further. If its value is N
        -:11938:only every Nth event (backward jump, etc.) trigger the next check.
        -:11939:
        -:11940:*Notes*:
        -:11941:- This API depends on a build option (`JERRY_VM_EXEC_STOP`) and can be checked
        -:11942:  in runtime with the `JERRY_FEATURE_VM_EXEC_STOP` feature enum value,
        -:11943:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11944:
        -:11945:**Prototype**
        -:11946:
        -:11947:```c
        -:11948:void
        -:11949:jerry_set_vm_exec_stop_callback (jerry_vm_exec_stop_callback_t stop_cb,
        -:11950:                                 void *user_p,
        -:11951:                                 uint32_t frequency);
        -:11952:```
        -:11953:
        -:11954:- `stop_cb` - periodically called callback (passing NULL disables this feature)
        -:11955:- `user_p` - user pointer passed to the `stop_cb` function
        -:11956:- `frequency` - frequency of calling the `stop_cb` function
        -:11957:
        -:11958:*New in version 2.0*.
        -:11959:
        -:11960:**Example**
        -:11961:
        -:11962:[doctest]: # (test="link")
        -:11963:
        -:11964:```c
        -:11965:#include "jerryscript.h"
        -:11966:
        -:11967:static jerry_value_t
    #####:11968:vm_exec_stop_callback (void *user_p)
        -:11969:{
    #####:11970:  int *countdown_p = (int *) user_p;
        -:11971:
    #####:11972:  while (*countdown_p > 0)
        -:11973:  {
    #####:11974:    (*countdown_p)--;
    #####:11975:    return jerry_create_undefined ();
        -:11976:  }
        -:11977:
        -:11978:  // The error flag is added automatically.
    #####:11979:  return jerry_create_string ((const jerry_char_t *) "Abort script");
        -:11980:}
        -:11981:
        -:11982:int
    #####:11983:main (void)
        -:11984:{
    #####:11985:  jerry_init (JERRY_INIT_EMPTY);
        -:11986:
    #####:11987:  int countdown = 10;
    #####:11988:  jerry_set_vm_exec_stop_callback (vm_exec_stop_callback, &countdown, 16);
        -:11989:
        -:11990:  // Infinite loop.
    #####:11991:  const jerry_char_t script[] = "while(true) {}";
        -:11992:
    #####:11993:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
    #####:11994:  jerry_release_value (jerry_run (parsed_code));
    #####:11995:  jerry_release_value (parsed_code);
    #####:11996:  jerry_cleanup ();
        -:11997:}
        -:11998:```
        -:11999:
        -:12000:**See also**
        -:12001:
        -:12002:- [jerry_vm_exec_stop_callback_t](#jerry_vm_exec_stop_callback_t)
        -:12003:
        -:12004:## jerry_get_resource_name
        -:12005:
        -:12006:**Summary**
        -:12007:
        -:12008:Get the resource name (usually a file name) of the currently executed script or the given function object.
        -:12009:
        -:12010:This function is typically called from native callbacks.
        -:12011:
        -:12012:*Notes*:
        -:12013:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:12014:is no longer needed.
        -:12015:- This feature depends on build option (`JERRY_LINE_INFO`) and can be checked
        -:12016:  in runtime with the `JERRY_FEATURE_LINE_INFO` feature enum value,
        -:12017:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12018:
        -:12019:**Prototype**
        -:12020:
        -:12021:```c
        -:12022:jerry_value_t
        -:12023:jerry_get_resource_name (jerry_value_t value);
        -:12024:```
        -:12025:- `value` - api value to obtain the resource name from
        -:12026:- return string value constructed from
        -:12027:  - the currently executed function object's resource name, if the given value is undefined
        -:12028:  - resource name of the function object, if the given value is a function object
        -:12029:  - "<anonymous>", otherwise
        -:12030:
        -:12031:*New in version 2.2*.
        -:12032:
        -:12033:**Example**
        -:12034:
        -:12035:[doctest]: # (name="02.API-REFERENCE-jsresourcename.c")
        -:12036:
        -:12037:```c
        -:12038:#include <stdio.h>
        -:12039:#include <string.h>
        -:12040:#include "jerryscript.h"
        -:12041:
        -:12042:static jerry_value_t
    #####:12043:resource_name_handler (const jerry_call_info_t *call_info_p,
        -:12044:                       const jerry_value_t args_p[],
        -:12045:                       const jerry_length_t args_count)
        -:12046:{
    #####:12047:  jerry_value_t undefined_value = jerry_create_undefined ();
    #####:12048:  jerry_value_t resource_name = jerry_get_resource_name (args_count > 0 ? args_p[0] : undefined_value);
    #####:12049:  jerry_release_value (undefined_value);
        -:12050:
    #####:12051:  return resource_name;
        -:12052:} /* resource_name_handler */
        -:12053:
        -:12054:int
    #####:12055:main (void)
        -:12056:{
    #####:12057:  jerry_init (JERRY_INIT_EMPTY);
        -:12058:
    #####:12059:  jerry_value_t global = jerry_get_global_object ();
        -:12060:
        -:12061:  /* Register the "resourceName" method. */
        -:12062:  {
    #####:12063:    jerry_value_t func = jerry_create_external_function (resource_name_handler);
    #####:12064:    jerry_value_t name = jerry_create_string ((const jerry_char_t *) "resourceName");
    #####:12065:    jerry_value_t result = jerry_set_property (global, name, func);
    #####:12066:    jerry_release_value (result);
    #####:12067:    jerry_release_value (name);
    #####:12068:    jerry_release_value (func);
        -:12069:  }
        -:12070:
    #####:12071:  jerry_release_value (global);
        -:12072:
    #####:12073:  const jerry_char_t source[] = "function myFunction() { return resourceName() }; myFunction()";
        -:12074:
        -:12075:  jerry_parse_options_t parse_options;
    #####:12076:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
    #####:12077:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "demo.js");
        -:12078:
    #####:12079:  jerry_value_t program = jerry_parse (source,
        -:12080:                                       sizeof (source) - 1,
        -:12081:                                       &parse_options);
    #####:12082:  jerry_release_value (parse_options.resource_name);
        -:12083:
    #####:12084:  if (!jerry_value_is_error (program))
        -:12085:  {
        -:12086:    /* `run_result` contains "demo.js" */
    #####:12087:    jerry_value_t run_result = jerry_run (program);
        -:12088:
        -:12089:    /* usage of `run_result` */
        -:12090:
    #####:12091:    jerry_release_value (run_result);
        -:12092:  }
        -:12093:
    #####:12094:  jerry_release_value (program);
    #####:12095:  jerry_cleanup ();
        -:12096:
        -:12097:  return 0;
        -:12098:}
        -:12099:```
        -:12100:
        -:12101:**See also**
        -:12102:
        -:12103:- [jerry_create_external_function](#jerry_create_external_function)
        -:12104:
        -:12105:## jerry_get_user_value
        -:12106:
        -:12107:**Summary**
        -:12108:
        -:12109:Returns the user value assigned to a script / module / function. This value is
        -:12110:set by the parser when the JERRY_PARSE_HAS_USER_VALUE flag is set in the `options`
        -:12111:member of the [jerry_parse_options_t](#jerry_parse_options_t) structure.
        -:12112:
        -:12113:*Notes*:
        -:12114:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:12115:is no longer needed.
        -:12116:
        -:12117:**Prototype**
        -:12118:
        -:12119:```c
        -:12120:jerry_value_t
        -:12121:jerry_get_user_value (const jerry_value_t value);
        -:12122:```
        -:12123:- `value` - script / module / function value which executes ECMAScript
        -:12124:            code (native modules / functions do not have user value).
        -:12125:- return
        -:12126:  - user value - if available,
        -:12127:  - undefined - otherwise
        -:12128:
        -:12129:*New in version [[NEXT_RELEASE]]*.
        -:12130:
        -:12131:**Example**
        -:12132:
        -:12133:[doctest]: # ()
        -:12134:
        -:12135:```c
        -:12136:#include "jerryscript.h"
        -:12137:
        -:12138:int
    #####:12139:main (void)
        -:12140:{
    #####:12141:  jerry_init (JERRY_INIT_EMPTY);
        -:12142:
    #####:12143:  const jerry_char_t script[] = "function abc() {} abc";
        -:12144:
    #####:12145:  jerry_value_t user_value = jerry_create_object ();
        -:12146:
        -:12147:  jerry_parse_options_t parse_options;
    #####:12148:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:12149:  parse_options.user_value = user_value;
        -:12150:
    #####:12151:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####:12152:  jerry_release_value (user_value);
        -:12153:
        -:12154:  /* The jerry_get_user_value returns the object which
        -:12155:   * was created by jerry_create_object before. */
        -:12156:
    #####:12157:  user_value = jerry_get_user_value (parsed_code);
    #####:12158:  jerry_release_value (parsed_code);
        -:12159:
    #####:12160:  jerry_release_value (user_value);
    #####:12161:  jerry_cleanup ();
        -:12162:  return 0;
        -:12163:}
        -:12164:```
        -:12165:
        -:12166:**See also**
        -:12167:
        -:12168:- [jerry_parse](#jerry_parse)
        -:12169:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:12170:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:12171:
        -:12172:## jerry_is_eval_code
        -:12173:
        -:12174:**Summary**
        -:12175:
        -:12176:Checks whether an ECMAScript code is compiled by eval like (eval, new Function,
        -:12177:[jerry_eval](#jerry_eval), etc.) command.
        -:12178:
        -:12179:**Prototype**
        -:12180:
        -:12181:```c
        -:12182:bool jerry_is_eval_code (const jerry_value_t value);
        -:12183:```
        -:12184:- `value` - script / module / function value which executes ECMAScript code
        -:12185:- return
        -:12186:  - true - if code is compiled by eval like command
        -:12187:  - false - otherwise
        -:12188:
        -:12189:*New in version [[NEXT_RELEASE]]*.
        -:12190:
        -:12191:**Example**
        -:12192:
        -:12193:[doctest]: # ()
        -:12194:
        -:12195:```c
        -:12196:#include "jerryscript.h"
        -:12197:
        -:12198:int
    #####:12199:main (void)
        -:12200:{
    #####:12201:  jerry_init (JERRY_INIT_EMPTY);
        -:12202:
    #####:12203:  const jerry_char_t script[] = "eval('(function (a) { return a; })')";
        -:12204:
    #####:12205:  jerry_value_t script_value = jerry_parse (script, sizeof (script) - 1, NULL);
    #####:12206:  jerry_value_t function_value = jerry_run (script_value);
    #####:12207:  jerry_release_value (script_value);
        -:12208:
    #####:12209:  if (jerry_is_eval_code (function_value))
        -:12210:  {
        -:12211:    /* Code enters here. */
        -:12212:  }
        -:12213:
    #####:12214:  jerry_release_value (function_value);
    #####:12215:  jerry_cleanup ();
        -:12216:  return 0;
        -:12217:}
        -:12218:```
        -:12219:
        -:12220:**See also**
        -:12221:
        -:12222:- [jerry_parse](#jerry_parse)
        -:12223:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:12224:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:12225:
        -:12226:## jerry_get_source_info
        -:12227:
        -:12228:**Summary**
        -:12229:
        -:12230:Returns a newly created source info structure corresponding to the passed script/module/function.
        -:12231:The function is lower level than `toString()` operation, but provides more contextual information.
        -:12232:
        -:12233:*Notes*:
        -:12234:- Returned value must be freed with [jerry_free_source_info](#jerry_free_source_info) when it
        -:12235:is no longer needed.
        -:12236:- This API depends on a build option (`JERRY_FUNCTION_TO_STRING`) and can be checked
        -:12237:  in runtime with the `JERRY_FEATURE_FUNCTION_TO_STRING` feature enum value,
        -:12238:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12239:
        -:12240:**Prototype**
        -:12241:
        -:12242:```c
        -:12243:jerry_source_info_t *jerry_get_source_info (const jerry_value_t value);
        -:12244:```
        -:12245:- `value` - script / module / function value which executes JavaScript
        -:12246:            code (native modules / functions do not have source info).
        -:12247:- return
        -:12248:  - source info - a newly created source info, if at least one field is available,
        -:12249:  - NULL - otherwise
        -:12250:
        -:12251:*New in version [[NEXT_RELEASE]]*.
        -:12252:
        -:12253:**Example**
        -:12254:
        -:12255:[doctest]: # ()
        -:12256:
        -:12257:```c
        -:12258:#include "jerryscript.h"
        -:12259:
        -:12260:int
    #####:12261:main (void)
        -:12262:{
    #####:12263:  jerry_init (JERRY_INIT_EMPTY);
        -:12264:
    #####:12265:  const jerry_char_t script[] = "function abc() {} abc";
        -:12266:
    #####:12267:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
        -:12268:
    #####:12269:  jerry_source_info_t *source_info_p = jerry_get_source_info (parsed_code);
    #####:12270:  jerry_release_value (parsed_code);
        -:12271:
        -:12272:  if (source_info_p != NULL)
        -:12273:  {
        -:12274:    /* Check the information provided by jerry_get_source_info. */
        -:12275:  }
        -:12276:
    #####:12277:  jerry_free_source_info (source_info_p);
        -:12278:
    #####:12279:  jerry_cleanup ();
        -:12280:  return 0;
        -:12281:}
        -:12282:```
        -:12283:
        -:12284:**See also**
        -:12285:
        -:12286:- [jerry_free_source_info](#jerry_free_source_info)
        -:12287:- [jerry_source_info_t](#jerry_source_info_t)
        -:12288:
        -:12289:## jerry_free_source_info
        -:12290:
        -:12291:**Summary**
        -:12292:
        -:12293:Frees the the source info structure returned by [jerry_get_source_info](#jerry_get_source_info).
        -:12294:
        -:12295:*Notes*:
        -:12296:- This API depends on a build option (`JERRY_FUNCTION_TO_STRING`) and can be checked
        -:12297:  in runtime with the `JERRY_FEATURE_FUNCTION_TO_STRING` feature enum value,
        -:12298:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12299:
        -:12300:**Prototype**
        -:12301:
        -:12302:```c
        -:12303:void jerry_free_source_info (jerry_source_info_t *source_info_p)
        -:12304:```
        -:12305:- `source_info_p` - source info structure returned by [jerry_get_source_info](#jerry_get_source_info)
        -:12306:
        -:12307:*New in version [[NEXT_RELEASE]]*.
        -:12308:
        -:12309:**Example**
        -:12310:
        -:12311:See [jerry_get_source_info](#jerry_get_source_info)
        -:12312:
        -:12313:**See also**
        -:12314:
        -:12315:- [jerry_get_source_info](#jerry_get_source_info)
        -:12316:- [jerry_source_info_t](#jerry_source_info_t)
        -:12317:
        -:12318:
        -:12319:# Functions for realm objects
        -:12320:
        -:12321:These APIs all depend on build option (`JERRY_BUILTIN_REALMS`).
        -:12322:
        -:12323:## jerry_set_realm
        -:12324:
        -:12325:**Summary**
        -:12326:
        -:12327:Replaces the currently active realm (including the global object) with another realm.
        -:12328:The replacement should be temporary, and the original realm must be restored after
        -:12329:the tasks are completed. During the replacement, the realm must be referenced
        -:12330:by the application (i.e. the gc must not reclaim it). This is also true to
        -:12331:the returned previously active realm, so there is no need to free the value
        -:12332:after the restoration. The function can only fail if realms are not supported
        -:12333:or the passed argument is not a realm. In this case the returned exception must
        -:12334:be freed by [jerry_release_value](#jerry_release_value).
        -:12335:
        -:12336:This function is useful to parse a script, create a native function, load a snapshot
        -:12337:or create an exception in another realm. Each ECMAScript code runs in the realm
        -:12338:which was active when the code was parsed or loaded regardless of the current realm.
        -:12339:
        -:12340:*Notes*:
        -:12341:- This feature depends on build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -:12342:  in runtime with the `JERRY_FEATURE_REALM` feature enum value,
        -:12343:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12344:- The es.next profile enables this by default.
        -:12345:
        -:12346:**Prototype**
        -:12347:
        -:12348:```c
        -:12349:jerry_value_t
        -:12350:jerry_set_realm (jerry_value_t realm_value);
        -:12351:```
        -:12352:- `realm_value` - the new realm value
        -:12353:- return
        -:12354:  - previous realm value - if the passed value is a realm
        -:12355:  - exception - otherwise
        -:12356:
        -:12357:*New in version 2.4*.
        -:12358:
        -:12359:**Example**
        -:12360:
        -:12361:```c
        -:12362:{
        -:12363:  jerry_value_t realm_value = jerry_create_realm ();
        -:12364:
        -:12365:  jerry_value_t old_realm = jerry_set_realm (realm_value);
        -:12366:
        -:12367:  ... // usage of the realm
        -:12368:
        -:12369:  jerry_set_realm (old_realm);
        -:12370:}
        -:12371:```
        -:12372:
        -:12373:**See also**
        -:12374:
        -:12375:- [jerry_create_realm](#jerry_create_realm)
        -:12376:
        -:12377:## jerry_realm_get_this
        -:12378:
        -:12379:**Summary**
        -:12380:
        -:12381:Gets the 'this' binding of a realm. The 'this' binding is always an object.
        -:12382:By default the 'this' binding is the same as the realm object and can be
        -:12383:changed by [jerry_realm_set_this](#jerry_realm_set_this).
        -:12384:
        -:12385:*Notes*:
        -:12386:- This feature depends on build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -:12387:  in runtime with the `JERRY_FEATURE_REALM` feature enum value,
        -:12388:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12389:- The es.next profile enables this by default.
        -:12390:
        -:12391:**Prototype**
        -:12392:
        -:12393:```c
        -:12394:jerry_value_t
        -:12395:jerry_realm_get_this (jerry_value_t realm_value)
        -:12396:```
        -:12397:- `realm_value` - realm value
        -:12398:- return
        -:12399:  - type error - if realm_value is not a realm
        -:12400:  - 'this' binding object - otherwise
        -:12401:
        -:12402:*New in version 2.4*.
        -:12403:
        -:12404:**Example**
        -:12405:
        -:12406:```c
        -:12407:{
        -:12408:  jerry_value_t realm_value = jerry_create_realm ();
        -:12409:
        -:12410:  jerry_value_t this_value = jerry_realm_get_this (realm_value);
        -:12411:
        -:12412:  ... // usage of the this_value
        -:12413:
        -:12414:  jerry_release_value (this_value);
        -:12415:  jerry_release_value (realm_value);
        -:12416:}
        -:12417:```
        -:12418:
        -:12419:**See also**
        -:12420:
        -:12421:- [jerry_create_realm](#jerry_create_realm)
        -:12422:- [jerry_realm_set_this](#jerry_realm_set_this)
        -:12423:
        -:12424:## jerry_realm_set_this
        -:12425:
        -:12426:**Summary**
        -:12427:
        -:12428:Sets the 'this' binding of a realm. This function must be called before executing
        -:12429:any script on the realm. Otherwise the operation is undefined.
        -:12430:
        -:12431:*Notes*:
        -:12432:- This feature depends on build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -:12433:  in runtime with the `JERRY_FEATURE_REALM` feature enum value,
        -:12434:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12435:- The es.next profile enables this by default.
        -:12436:
        -:12437:**Prototype**
        -:12438:
        -:12439:```c
        -:12440:jerry_value_t
        -:12441:jerry_realm_set_this (jerry_value_t realm_value, jerry_value_t this_value)
        -:12442:```
        -:12443:- `realm_value` - realm value
        -:12444:- `this_value` - new this value
        -:12445:- return
        -:12446:  - type error - if realm_value is not a realm or this_value is not object
        -:12447:  - true - otherwise
        -:12448:
        -:12449:*New in version 2.4*.
        -:12450:
        -:12451:**Example**
        -:12452:
        -:12453:```c
        -:12454:{
        -:12455:  jerry_value_t realm_value = jerry_create_realm ();
        -:12456:
        -:12457:  jerry_value_t old_realm = jerry_set_realm (realm_value);
        -:12458:  /* The prototype of the object comes from the new realm. */
        -:12459:  jerry_value_t this_value = jerry_create_object ();
        -:12460:  jerry_set_realm (old_realm);
        -:12461:
        -:12462:  jerry_value_t result = jerry_realm_set_this (realm_value, this_value);
        -:12463:
        -:12464:  ... // usage of the realm
        -:12465:}
        -:12466:```
        -:12467:
        -:12468:**See also**
        -:12469:
        -:12470:- [jerry_create_realm](#jerry_create_realm)
        -:12471:- [jerry_set_realm](#jerry_set_realm)
        -:12472:- [jerry_realm_get_this](#jerry_realm_get_this)
        -:12473:
        -:12474:# ArrayBuffer and TypedArray functions
        -:12475:
        -:12476:These APIs all depend on the es.next profile.
        -:12477:
        -:12478:## jerry_get_arraybuffer_byte_length
        -:12479:
        -:12480:**Summary**
        -:12481:
        -:12482:Get the byte length property of the ArrayBuffer or SharedArrayBuffer. This is the
        -:12483:same value which was passed to the ArrayBuffer constructor call.
        -:12484:
        -:12485:**Prototype**
        -:12486:
        -:12487:```c
        -:12488:jerry_length_t
        -:12489:jerry_get_arraybuffer_byte_length (const jerry_value_t value);
        -:12490:```
        -:12491:
        -:12492:- `value` - ArrayBuffer object
        -:12493:- return value
        -:12494:  - size of the ArrayBuffer in bytes
        -:12495:  - 0 if the `value` parameter is not an ArrayBuffer
        -:12496:
        -:12497:*New in version 2.0*.
        -:12498:
        -:12499:**Example**
        -:12500:
        -:12501:```c
        -:12502:{
        -:12503:  jerry_value_t buffer = jerry_create_arraybuffer (15);
        -:12504:  jerry_length_t length = jerry_get_arraybuffer_byte_length (buffer);
        -:12505:  // length should be 15
        -:12506:
        -:12507:  jerry_release_value (buffer);
        -:12508:}
        -:12509:```
        -:12510:
        -:12511:**See also**
        -:12512:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -:12513:
        -:12514:
        -:12515:## jerry_arraybuffer_read
        -:12516:
        -:12517:**Summary**
        -:12518:
        -:12519:Copy the portion of the ArrayBuffer or SharedArrayBuffer into a user provided buffer.
        -:12520:The start offset of the read operation can be specified.
        -:12521:
        -:12522:The number bytes to be read can be specified via the `buf_size`
        -:12523:parameter. It is not possible to read more than the length of
        -:12524:the ArrayBuffer.
        -:12525:
        -:12526:Function returns the number of bytes read from the ArrayBuffer
        -:12527:(and written to the buffer parameter). This value is
        -:12528:calculated in the following way: `min(array buffer length - offset, buf_size)`.
        -:12529:
        -:12530:**Prototype**
        -:12531:
        -:12532:```c
        -:12533:jerry_length_t
        -:12534:jerry_arraybuffer_read (const jerry_value_t value,
        -:12535:                        jerry_length_t offset,
        -:12536:                        uint8_t *buf_p,
        -:12537:                        jerry_length_t buf_size);
        -:12538:```
        -:12539:
        -:12540:- `value` - ArrayBuffer to read from
        -:12541:- `offset` - start offset of the read operation
        -:12542:- `buf_p` - buffer to read the data to
        -:12543:- `buf_size` - maximum number of bytes to read into the buffer
        -:12544:- return value
        -:12545:  - number of bytes written into the buffer (read from the ArrayBuffer)
        -:12546:  - 0 if the `value` is not an ArrayBuffer object
        -:12547:  - 0 if the `buf_size` is zero or there is nothing to read
        -:12548:
        -:12549:*New in version 2.0*.
        -:12550:
        -:12551:**Example**
        -:12552:
        -:12553:```c
        -:12554:{
        -:12555:  uint8_t data[20];
        -:12556:  jerry_value_t buffer;
        -:12557:  // ... create the ArrayBuffer or acuiqre it from somewhere.
        -:12558:
        -:12559:  jerry_value_t bytes_read;
        -:12560:
        -:12561:  // read 10 bytes from the start of the ArrayBuffer.
        -:12562:  bytes_read = jerry_arraybuffer_read (buffer, 0, data, 10);
        -:12563:  // read the next 10 bytes
        -:12564:  bytes_read += jerry_arraybuffer_read (buffer, bytes_read, data + bytes_read, 10);
        -:12565:
        -:12566:  // process the data variable
        -:12567:
        -:12568:  jerry_release_value (buffer);
        -:12569:}
        -:12570:```
        -:12571:
        -:12572:**See also**
        -:12573:
        -:12574:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -:12575:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -:12576:- [jerry_get_arraybuffer_byte_length](#jerry_get_arraybuffer_byte_length)
        -:12577:
        -:12578:
        -:12579:## jerry_arraybuffer_write
        -:12580:
        -:12581:**Summary**
        -:12582:
        -:12583:Copy the contents of a buffer into the ArrayBuffer or SharedArrayBuffer.
        -:12584:The start offset of the write operation can be specified.
        -:12585:
        -:12586:The number bytes to be written can be specified via the `buf_size`
        -:12587:parameter. It is not possible to write more than the length of
        -:12588:the ArrayBuffer.
        -:12589:
        -:12590:Function returns the number of bytes written into the ArrayBuffer
        -:12591:(and read from the buffer parameter). This value is
        -:12592:calculated in the following way: `min(array buffer length - offset, buf_size)`.
        -:12593:
        -:12594:**Prototype**
        -:12595:
        -:12596:```c
        -:12597:jerry_length_t
        -:12598:jerry_arraybuffer_write (const jerry_value_t value,
        -:12599:                         jerry_length_t offset,
        -:12600:                         const uint8_t *buf_p,
        -:12601:                         jerry_length_t buf_size);
        -:12602:```
        -:12603:
        -:12604:- `value` - ArrayBuffer to write to
        -:12605:- `offset` - start offset of the write operation
        -:12606:- `buf_p` - buffer to read the data from
        -:12607:- `buf_size` - maximum number of bytes to write into the ArrayBuffer
        -:12608:- return value
        -:12609:  - number of bytes written into the ArrayBuffer (read from the buffer parameter)
        -:12610:  - 0 if the `value` is not an ArrayBuffer object
        -:12611:  - 0 if the `buf_size` is zero or there is nothing to write
        -:12612:
        -:12613:*New in version 2.0*.
        -:12614:
        -:12615:**Example**
        -:12616:
        -:12617:```c
        -:12618:{
        -:12619:  uint8_t data[20];
        -:12620:
        -:12621:  // fill the data with values
        -:12622:  for (int i = 0; i < 20; i++)
        -:12623:  {
        -:12624:    data[i] = (uint8_t) (i * 2);
        -:12625:  }
        -:12626:
        -:12627:  jerry_value_t buffer;
        -:12628:  // ... create the ArrayBuffer or acquire it from somewhere.
        -:12629:
        -:12630:  jerry_value_t bytes_written;
        -:12631:
        -:12632:  // write 10 bytes from to the start of the ArrayBuffer.
        -:12633:  bytes_written = jerry_arraybuffer_write (buffer, 0, data, 10);
        -:12634:  // read the next 10 bytes
        -:12635:  bytes_written += jerry_arraybuffer_write (buffer, bytes_written, data + bytes_written, 10);
        -:12636:
        -:12637:  // use the ArrayBuffer
        -:12638:
        -:12639:  jerry_release_value (buffer);
        -:12640:}
        -:12641:```
        -:12642:
        -:12643:**See also**
        -:12644:
        -:12645:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -:12646:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -:12647:- [jerry_get_arraybuffer_byte_length](#jerry_get_arraybuffer_byte_length)
        -:12648:
        -:12649:
        -:12650:## jerry_get_arraybuffer_pointer
        -:12651:
        -:12652:**Summary**
        -:12653:
        -:12654:The function allows access to the contents of the Array Buffer directly.
        -:12655:
        -:12656:**WARNING!** This operation is for expert use only! The programmer must
        -:12657:ensure that the returned memory area is used correctly. That is
        -:12658:there is no out of bounds reads or writes. The lifetime of the underlying
        -:12659:data buffer is managed by the ArrayBuffer value. Make sure to acquire the
        -:12660:value with [`jerry_acquire_value`](#jerry_acquire_value) if the data
        -:12661:buffer is needed later.
        -:12662:
        -:12663:**Prototype**
        -:12664:
        -:12665:```c
        -:12666:uint8_t *
        -:12667:jerry_get_arraybuffer_pointer (const jerry_value_t value);
        -:12668:```
        -:12669:
        -:12670:- `value` - Array Buffer object.
        -:12671:- return value
        -:12672:  - pointer to the Array Buffer's data area.
        -:12673:  - NULL if the `value` is:
        -:12674:    - not an ArrayBuffer object
        -:12675:    - an external ArrayBuffer has been detached
        -:12676:
        -:12677:*New in version 2.0*.
        -:12678:
        -:12679:**Example**
        -:12680:
        -:12681:```c
        -:12682:{
        -:12683:  // create the ArrayBuffer
        -:12684:  jerry_value_t buffer = jerry_create_arraybuffer (16);
        -:12685:
        -:12686:  uint8_t *const data = jerry_get_arraybuffer_pointer (buffer);
        -:12687:
        -:12688:  for (int i = 0; i < 16; i++)
        -:12689:  {
        -:12690:    data[i] = (uint8_t) (i + 4);
        -:12691:  }
        -:12692:
        -:12693:  // use the Array Buffer
        -:12694:
        -:12695:  // release buffer as it is not needed after this point
        -:12696:  jerry_release_value (buffer);
        -:12697:}
        -:12698:```
        -:12699:
        -:12700:**See also**
        -:12701:
        -:12702:- [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external)
        -:12703:
        -:12704:## jerry_is_arraybuffer_detachable
        -:12705:
        -:12706:**Summary**
        -:12707:
        -:12708:Get if the ArrayBuffer is detachable.
        -:12709:
        -:12710:**Prototype**
        -:12711:
        -:12712:```c
        -:12713:jerry_value_t
        -:12714:jerry_is_arraybuffer_detachable (const jerry_value_t value);
        -:12715:```
        -:12716:
        -:12717:- `value` - ArrayBuffer to be detached
        -:12718:- return
        -:12719:  - boolean value if success
        -:12720:  - Error otherwise
        -:12721:
        -:12722:*New in version 2.2*.
        -:12723:
        -:12724:**Example**
        -:12725:
        -:12726:```c
        -:12727:{
        -:12728:  // create the ArrayBuffer
        -:12729:  jerry_value_t buffer = jerry_create_arraybuffer (16);
        -:12730:
        -:12731:  jerry_value_t res = jerry_is_arraybuffer_detachable (buffer);
        -:12732:  bool is_detachable = jerry_value_is_true (res);
        -:12733:
        -:12734:  // release buffer as it is not needed after this point
        -:12735:  jerry_release_value (res);
        -:12736:  jerry_release_value (buffer);
        -:12737:}
        -:12738:```
        -:12739:
        -:12740:**See also**
        -:12741:
        -:12742:- [jerry_detach_arraybuffer](#jerry_detach_arraybuffer)
        -:12743:
        -:12744:## jerry_detach_arraybuffer
        -:12745:
        -:12746:**Summary**
        -:12747:
        -:12748:Detach the underlying data block from ArrayBuffer and set its bytelength to 0.
        -:12749:
        -:12750:This operation requires the ArrayBuffer to be external that created by
        -:12751:`jerry_create_arraybuffer_external`.
        -:12752:
        -:12753:**Prototype**
        -:12754:
        -:12755:```c
        -:12756:jerry_value_t
        -:12757:jerry_detach_arraybuffer (const jerry_value_t value);
        -:12758:```
        -:12759:
        -:12760:*Note*: If the ArrayBuffer has been created with `jerry_create_arraybuffer_external` the optional free callback is called on a successful detach operation
        -:12761:
        -:12762:- `value` - ArrayBuffer to be detached
        -:12763:- return
        -:12764:  - null value if success
        -:12765:  - Error otherwise
        -:12766:
        -:12767:*New in version 2.2*.
        -:12768:
        -:12769:**Example**
        -:12770:
        -:12771:```c
        -:12772:{
        -:12773:  uint8_t buf[1];
        -:12774:  jerry_size_t length = 1;
        -:12775:  // create the ArrayBuffer
        -:12776:  jerry_value_t buffer = jerry_create_arraybuffer (length, buf, NULL);
        -:12777:
        -:12778:  jerry_value_t res = jerry_detach_arraybuffer (buffer);
        -:12779:
        -:12780:  // release buffer as it is not needed after this point
        -:12781:  jerry_release_value (res);
        -:12782:  jerry_release_value (buffer);
        -:12783:}
        -:12784:```
        -:12785:
        -:12786:**See also**
        -:12787:
        -:12788:- [jerry_is_arraybuffer_detachable](#jerry_is_arraybuffer_detachable)
        -:12789:
        -:12790:## jerry_arraybuffer_has_buffer
        -:12791:
        -:12792:**Summary**
        -:12793:
        -:12794:Checks whether a buffer is currently allocated for an array buffer or typed array.
        -:12795:
        -:12796:*Notes*:
        -:12797:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -:12798:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -:12799:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12800:
        -:12801:**Prototype**
        -:12802:
        -:12803:```c
        -:12804:bool
        -:12805:jerry_arraybuffer_has_buffer (const jerry_value_t value);
        -:12806:```
        -:12807:
        -:12808:- `value` - array buffer or typed array value.
        -:12809:- return
        -:12810:  - true, if a buffer is allocated for an array buffer or typed array
        -:12811:  - false, otherwise
        -:12812:
        -:12813:*New in version [[NEXT_RELEASE]]*.
        -:12814:
        -:12815:**Example**
        -:12816:
        -:12817:[doctest]: # (test="compile")
        -:12818:
        -:12819:```c
        -:12820:#include "jerryscript.h"
        -:12821:
        -:12822:int
    #####:12823:main (void)
        -:12824:{
    #####:12825:  jerry_init (JERRY_INIT_EMPTY);
        -:12826:
    #####:12827:  jerry_value_t array_buffer_value = jerry_create_arraybuffer (1024 * 1024);
        -:12828:
        -:12829:  /* By default, the backing store of large array buffers
        -:12830:   * is allocated when it is used the first time. */
        -:12831:
    #####:12832:  if (!jerry_arraybuffer_has_buffer (array_buffer_value))
        -:12833:  {
        -:12834:    /* Code enters here in this case. */
        -:12835:  }
        -:12836:
    #####:12837:  jerry_release_value (array_buffer_value);
        -:12838:
    #####:12839:  jerry_cleanup ();
        -:12840:  return 0;
        -:12841:}
        -:12842:```
        -:12843:
        -:12844:**See also**
        -:12845:
        -:12846:- [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external)
        -:12847:- [jerry_create_shared_arraybuffer_external](#jerry_create_shared_arraybuffer_external)
        -:12848:- [jerry_arraybuffer_set_compact_allocation_limit](#jerry_arraybuffer_set_compact_allocation_limit)
        -:12849:- [jerry_arraybuffer_set_allocator_callbacks](#jerry_arraybuffer_set_allocator_callbacks)
        -:12850:
        -:12851:## jerry_arraybuffer_set_compact_allocation_limit
        -:12852:
        -:12853:**Summary**
        -:12854:
        -:12855:Array buffers which size is less or equal than the limit passed to this
        -:12856:function are allocated in a single memory block. The allocator callbacks set by
        -:12857:[jerry_arraybuffer_set_allocation_callbacks](#jerry_arraybuffer_set_allocation_callbacks)
        -:12858:are not called for these array buffers.
        -:12859:
        -:12860:*Notes*:
        -:12861:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -:12862:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -:12863:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12864:- The default limit is 256 bytes.
        -:12865:- When an array buffer is allocated in a single memory block, its
        -:12866:  backing store is not freed when the array buffer is detached.
        -:12867:- This limit does not affect shared array buffers, their backing store is always
        -:12868:  allocated by the allocator callback.
        -:12869:
        -:12870:**Prototype**
        -:12871:
        -:12872:```c
        -:12873:void
        -:12874:jerry_arraybuffer_set_compact_allocation_limit (const jerry_length_t allocation_limit);
        -:12875:```
        -:12876:
        -:12877:- `allocation_limit` - maximum size of compact allocation.
        -:12878:
        -:12879:*New in version [[NEXT_RELEASE]]*.
        -:12880:
        -:12881:**Example**
        -:12882:
        -:12883:[doctest]: # (test="compile")
        -:12884:
        -:12885:```c
        -:12886:#include "jerryscript.h"
        -:12887:
        -:12888:int
    #####:12889:main (void)
        -:12890:{
    #####:12891:  jerry_init (JERRY_INIT_EMPTY);
        -:12892:
    #####:12893:  jerry_arraybuffer_set_compact_allocation_limit (1);
        -:12894:
    #####:12895:  jerry_value_t array_buffer_value = jerry_create_arraybuffer (1);
        -:12896:
    #####:12897:  if (jerry_arraybuffer_has_buffer (array_buffer_value))
        -:12898:  {
        -:12899:    /* Code enters here because the backing store
        -:12900:     * is allocated during buffer creation. */
        -:12901:  }
        -:12902:
    #####:12903:  jerry_release_value (array_buffer_value);
        -:12904:
    #####:12905:  array_buffer_value = jerry_create_arraybuffer (2);
        -:12906:
    #####:12907:  if (jerry_arraybuffer_has_buffer (array_buffer_value))
        -:12908:  {
        -:12909:    /* Code does not enter here because the backing store
        -:12910:     * is allocated when it is used the first time. */
        -:12911:  }
        -:12912:
    #####:12913:  jerry_release_value (array_buffer_value);
        -:12914:
    #####:12915:  jerry_cleanup ();
        -:12916:  return 0;
        -:12917:}
        -:12918:```
        -:12919:
        -:12920:**See also**
        -:12921:
        -:12922:- [jerry_arraybuffer_has_buffer](#jerry_arraybuffer_has_buffer)
        -:12923:- [jerry_arraybuffer_set_allocator_callbacks](#jerry_arraybuffer_set_allocator_callbacks)
        -:12924:
        -:12925:## jerry_arraybuffer_set_allocator_callbacks
        -:12926:
        -:12927:**Summary**
        -:12928:
        -:12929:Set callbacks for allocating and freeing backing stores for array buffer objects.
        -:12930:
        -:12931:*Notes*:
        -:12932:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -:12933:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -:12934:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12935:- This function is recommended to be called after [jerry_init](#jerry_init) before
        -:12936:  any array buffer is allocated.
        -:12937:- The callbacks can be NULL to use the default callbacks. The default `allocate_callback`
        -:12938:  allocates memory using [jerry_heap_alloc](#jerry_heap_alloc) and the default
        -:12939:  `free_callback` frees memory using [jerry_heap_free](#jerry_heap_free).
        -:12940:
        -:12941:
        -:12942:**Prototype**
        -:12943:
        -:12944:```c
        -:12945:void
        -:12946:jerry_arraybuffer_set_allocator_callbacks (jerry_arraybuffer_allocate_t allocate_callback,
        -:12947:                                           jerry_arraybuffer_free_t free_callback,
        -:12948:                                           void *user_p)
        -:12949:```
        -:12950:
        -:12951:- `allocate_callback` - callback for allocating array buffer memory.
        -:12952:- `free_callback` - callback for freeing array buffer memory.
        -:12953:- `user_p` - user pointer passed to the callbacks.
        -:12954:
        -:12955:*New in version [[NEXT_RELEASE]]*.
        -:12956:
        -:12957:**Example**
        -:12958:
        -:12959:[doctest]: # (test="compile")
        -:12960:
        -:12961:```c
        -:12962:#include "jerryscript.h"
        -:12963:
        -:12964:static uint8_t global_buffer[64];
        -:12965:
        -:12966:static void
    #####:12967:array_buffer_free_cb (jerry_arraybuffer_type_t buffer_type, /**< type of the array buffer object */
        -:12968:                      uint8_t *buffer_p, /**< pointer to the allocated buffer */
        -:12969:                      uint32_t buffer_size, /**< size of the allocated buffer */
        -:12970:                      void *arraybuffer_user_p, /**< user pointer assigned to the array buffer object */
        -:12971:                      void *user_p) /**< user pointer passed to jerry_arraybuffer_set_allocation_callbacks */
        -:12972:{
        -:12973:  (void) buffer_type;
        -:12974:  (void) user_p;
        -:12975:
        -:12976:  /* As for this example, only the free callback is redirected. This callback
        -:12977:   * function does not free the memory if the arraybuffer_user_p is non-NULL. */
        -:12978:
    #####:12979:  if (arraybuffer_user_p == NULL)
        -:12980:  {
    #####:12981:    jerry_heap_free (buffer_p, buffer_size);
        -:12982:  }
    #####:12983:} /* array_buffer_free_cb */
        -:12984:
        -:12985:int
    #####:12986:main (void)
        -:12987:{
    #####:12988:  jerry_init (JERRY_INIT_EMPTY);
        -:12989:
    #####:12990:  jerry_arraybuffer_set_allocator_callbacks (NULL, array_buffer_free_cb, NULL);
        -:12991:
        -:12992:  /* The buffer of the array buffer object is allocated by the default
        -:12993:   * allocator using jerry_heap_alloc and freed by array_buffer_free_cb. */
        -:12994:
    #####:12995:  const jerry_char_t script[] = "var result = new uint32Array(1024); result[0] = 1; result";
    #####:12996:  jerry_value_t array_buffer_value = jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
    #####:12997:  jerry_release_value (array_buffer_value);
        -:12998:
        -:12999:  /* The buffer of the array buffer object has a non-NULL
        -:13000:   * arraybuffer_user_p value, so it is not freed by array_buffer_free_cb. */
        -:13001:
    #####:13002:  array_buffer_value = jerry_create_arraybuffer_external (sizeof (global_buffer), global_buffer, global_buffer);
    #####:13003:  jerry_release_value (array_buffer_value);
        -:13004:
    #####:13005:  jerry_cleanup ();
        -:13006:  return 0;
        -:13007:}
        -:13008:```
        -:13009:
        -:13010:**See also**
        -:13011:
        -:13012:- [jerry_arraybuffer_has_buffer](#jerry_arraybuffer_has_buffer)
        -:13013:- [jerry_arraybuffer_set_allocator_callbacks](#jerry_arraybuffer_set_allocator_callbacks)
        -:13014:
        -:13015:## jerry_get_dataview_buffer
        -:13016:
        -:13017:**Summary**
        -:13018:
        -:13019:Get the ArrayBuffer object used by a DataView object.
        -:13020:Additionally returns the byteLength and byteOffset properties
        -:13021:of the DataView object.
        -:13022:
        -:13023:For the returned ArrayBuffer the [jerry_release_value](#jerry_release_value)
        -:13024:must be called when it is no longer needed.
        -:13025:
        -:13026:**Prototype**
        -:13027:
        -:13028:```c
        -:13029:jerry_value_t
        -:13030:jerry_get_dataview_buffer (const jerry_value_t value,
        -:13031:                           jerry_length_t *byteOffset,
        -:13032:                           jerry_length_t *byteLength);
        -:13033:```
        -:13034:
        -:13035:- `value` - DataView to get the ArrayBuffer from
        -:13036:- `byteOffset` - (Optional) returns the start offset of the ArrayBuffer for the DataView
        -:13037:- `byteLength` - (Optional) returns the number of bytes used from the ArrayBuffer for the DataView
        -:13038:- return
        -:13039:  - DataView object's underlying ArrayBuffer object
        -:13040:  - TypeError if the `value` is not a DataView object
        -:13041:
        -:13042:*New in version 2.0*.
        -:13043:
        -:13044:**Example**
        -:13045:
        -:13046:[doctest]: # ()
        -:13047:
        -:13048:```c
        -:13049:#include "jerryscript.h"
        -:13050:
        -:13051:int
    #####:13052:main (void)
        -:13053:{
    #####:13054:  jerry_init (JERRY_INIT_EMPTY);
        -:13055:
    #####:13056:  jerry_value_t arraybuffer = jerry_create_arraybuffer (16);
    #####:13057:  jerry_value_t dataview = jerry_create_dataview (arraybuffer, 0, 16);
    #####:13058:  jerry_length_t byteOffset = 0;
    #####:13059:  jerry_length_t byteLength = 0;
    #####:13060:  jerry_value_t buffer = jerry_get_dataview_buffer (dataview, &byteOffset, &byteLength);
        -:13061:
        -:13062:  // buffer is an ArrayBuffer object and ArrayBuffer operations can be performed on it
        -:13063:  // byteOffset is 0
        -:13064:  // byteLength is 16
        -:13065:
        -:13066:  // usage of buffer
        -:13067:
    #####:13068:  jerry_release_value (buffer);
    #####:13069:  jerry_release_value (dataview);
    #####:13070:  jerry_release_value (arraybuffer);
        -:13071:
    #####:13072:  jerry_cleanup ();
        -:13073:}
        -:13074:```
        -:13075:
        -:13076:**See also**
        -:13077:
        -:13078:- [jerry_create_dataview](#jerry_create_dataview)
        -:13079:
        -:13080:
        -:13081:## jerry_get_typedarray_type
        -:13082:
        -:13083:**Summary**
        -:13084:
        -:13085:Get the type of the TypedArray.
        -:13086:
        -:13087:The returned type is one of the [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -:13088:enum value.
        -:13089:
        -:13090:**Prototype**
        -:13091:
        -:13092:```c
        -:13093:jerry_typedarray_type_t
        -:13094:jerry_get_typedarray_type (jerry_value_t value);
        -:13095:```
        -:13096:
        -:13097:- `value` - TypedArray object to query for type.
        -:13098:- return
        -:13099:  - the type of the TypedArray
        -:13100:  - JERRY_TYPEDARRAY_INVALID if the object was not a TypedArray
        -:13101:
        -:13102:*New in version 2.0*.
        -:13103:
        -:13104:**Example**
        -:13105:
        -:13106:```c
        -:13107:{
        -:13108:  jerry_typedarray_type_t expected_type = JERRY_TYPEDARRAY_UINT32;
        -:13109:  jerry_value_t typedarray = jerry_create_typedarray (expected_klass, 25);
        -:13110:
        -:13111:  jerry_typedarray_type_t type = jerry_get_typedarray_type (typedarray);
        -:13112:
        -:13113:  // 'type' is now JERRY_TYPEDARRAY_UINT32
        -:13114:
        -:13115:  jerry_release_value (typedarray);
        -:13116:}
        -:13117:```
        -:13118:
        -:13119:**See also**
        -:13120:
        -:13121:- [jerry_create_typedarray](#jerry_create_typedarray)
        -:13122:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -:13123:
        -:13124:
        -:13125:## jerry_get_typedarray_length
        -:13126:
        -:13127:**Summary**
        -:13128:
        -:13129:Get the element count of the TypedArray as specified during creation.
        -:13130:
        -:13131:This is not the same as the byteLength property of a TypedArray object.
        -:13132:
        -:13133:**Prototype**
        -:13134:
        -:13135:```
        -:13136:jerry_length_t
        -:13137:jerry_get_typedarray_length (jerry_value_t value);
        -:13138:```
        -:13139:
        -:13140:- `value` - TypedArray object to query
        -:13141:- return
        -:13142:  - length (element count) of the TypedArray object
        -:13143:  - 0 if the object is not a TypedArray
        -:13144:
        -:13145:*New in version 2.0*.
        -:13146:
        -:13147:**Example**
        -:13148:
        -:13149:```c
        -:13150:{
        -:13151:  jerry_value_t array = jerry_create_typedarray (JERRY_TYPEDARRAY_INT32, 21);
        -:13152:
        -:13153:  jerry_length_t element_count = jerry_get_typedarray_length (array);
        -:13154:
        -:13155:  // element_count is now 21.
        -:13156:
        -:13157:  jerry_release_value (array);
        -:13158:}
        -:13159:```
        -:13160:
        -:13161:**See also**
        -:13162:
        -:13163:- [jerry_create_typedarray](#jerry_create_typedarray)
        -:13164:
        -:13165:
        -:13166:## jerry_get_typedarray_buffer
        -:13167:
        -:13168:**Summary**
        -:13169:
        -:13170:Get the ArrayBuffer object used by a TypedArray object.
        -:13171:Additionally returns the byteLength and byteOffset properties
        -:13172:of the TypedArray object.
        -:13173:
        -:13174:For the returned ArrayBuffer the [jerry_release_value](#jerry_release_value)
        -:13175:must be called.
        -:13176:
        -:13177:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:13178:is no longer needed.
        -:13179:
        -:13180:**Prototype**
        -:13181:
        -:13182:```c
        -:13183:jerry_value_t
        -:13184:jerry_get_typedarray_buffer (jerry_value_t value,
        -:13185:                             jerry_length_t *byteOffset,
        -:13186:                             jerry_length_t *byteLength);
        -:13187:```
        -:13188:
        -:13189:- `value` - TypedArray to get the ArrayBuffer from
        -:13190:- `byteOffset` - (Optional) returns the start offset of the ArrayBuffer for the TypedArray
        -:13191:- `byteLength` - (Optional) returns the number of bytes used from the ArrayBuffer for the TypedArray
        -:13192:- return
        -:13193:  - TypedArray object's underlying ArrayBuffer object
        -:13194:  - TypeError if the `value` is not a TypedArray object
        -:13195:
        -:13196:*New in version 2.0*.
        -:13197:
        -:13198:**Example**
        -:13199:
        -:13200:```c
        -:13201:{
        -:13202:  jerry_value_t array = jerry_create_typedarray (JERRY_TYPEDARRAY_INT16, 11);
        -:13203:
        -:13204:  jerry_length_t byteLength = 0;
        -:13205:  jerry_length_t byteOffset = 0;
        -:13206:  jerry_value_t buffer = jerry_get_typedarray_buffer (array, &byteOffset, &byteLength);
        -:13207:
        -:13208:  // buffer is an ArrayBuffer object and ArrayBuffer operations can be performed on it
        -:13209:  // byteLength is 11 * 2  (2 as the TypedArray stores Int16 that is 2 byte elements)
        -:13210:  // byteOffset is 0
        -:13211:
        -:13212:  jerry_release_value (buffer);
        -:13213:  jerry_release_value (array);
        -:13214:}
        -:13215:```
        -:13216:
        -:13217:**See also**
        -:13218:
        -:13219:- [jerry_create_typedarray](#jerry_create_typedarray)
        -:13220:
        -:13221:# JSON functions
        -:13222:
        -:13223:## jerry_json_parse
        -:13224:
        -:13225:**Summary**
        -:13226:
        -:13227:Parses a JSON string creating a JavaScript value. The behaviour is equivalent with
        -:13228:the "JSON.parse(string)" JS call.
        -:13229:
        -:13230:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:13231:is no longer needed.
        -:13232:
        -:13233:**Prototype**
        -:13234:
        -:13235:```c
        -:13236:jerry_value_t
        -:13237:jerry_json_parse (const jerry_char_t *string_p,
        -:13238:                  jerry_size_t string_size);
        -:13239:```
        -:13240:
        -:13241:- `string_p` - pointer to a JSON string.
        -:13242:- `string_size` - size of the string.
        -:13243:- return
        -:13244:  - `jerry_value_t` containing a JavaScript value.
        -:13245:  - Error value in case of any parse error.
        -:13246:
        -:13247:*New in version 2.0*.
        -:13248:
        -:13249:**Example**
        -:13250:
        -:13251:[doctest]: # ()
        -:13252:
        -:13253:```c
        -:13254:#include "jerryscript.h"
        -:13255:
        -:13256:int
    #####:13257:main (void)
        -:13258:{
        -:13259:  /* Initialize engine */
    #####:13260:  jerry_init (JERRY_INIT_EMPTY);
        -:13261:
    #####:13262:  const jerry_char_t data[] = "{\"name\": \"John\", \"age\": 5}";
    #####:13263:  jerry_value_t obj = jerry_json_parse (data, sizeof (data) - 1);
        -:13264:
        -:13265:  /* "obj" now conatins and object created from the "data" JSON string. */
        -:13266:
    #####:13267:  jerry_release_value (obj);
        -:13268:
        -:13269:  /* Cleanup engine */
    #####:13270:  jerry_cleanup ();
        -:13271:
        -:13272:  return 0;
        -:13273:}
        -:13274:```
        -:13275:
        -:13276:## jerry_json_stringify
        -:13277:
        -:13278:**Summary**
        -:13279:
        -:13280:Create a JSON string value from a JavaScript value. The behaviour is equivalent with
        -:13281:the "JSON.stringify(input_value)" JS call.
        -:13282:
        -:13283:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:13284:is no longer needed.
        -:13285:
        -:13286:**Prototype**
        -:13287:
        -:13288:```c
        -:13289:jerry_value_t
        -:13290:jerry_json_stringify (const jerry_value_t input_value);
        -:13291:```
        -:13292:
        -:13293:- `input_value` - a `jerry_value_t` to stringify.
        -:13294:- return
        -:13295:  - `jerry_value_t` containing a JSON string.
        -:13296:  - Error value in case of any stringification error.
        -:13297:
        -:13298:*New in version 2.0*.
        -:13299:
        -:13300:**Example**
        -:13301:
        -:13302:[doctest]: # ()
        -:13303:
        -:13304:```c
        -:13305:#include "jerryscript.h"
        -:13306:
        -:13307:int
    #####:13308:main (void)
        -:13309:{
        -:13310:  /* Initialize engine */
    #####:13311:  jerry_init (JERRY_INIT_EMPTY);
        -:13312:
    #####:13313:  jerry_value_t obj = jerry_create_object ();
        -:13314:  {
    #####:13315:    jerry_value_t key = jerry_create_string ((const jerry_char_t *) "name");
    #####:13316:    jerry_value_t value = jerry_create_string ((const jerry_char_t *) "John");
    #####:13317:    jerry_release_value (jerry_set_property (obj, key, value));
    #####:13318:    jerry_release_value (key);
    #####:13319:    jerry_release_value (value);
        -:13320:  }
        -:13321:
    #####:13322:  jerry_value_t stringified = jerry_json_stringify (obj);
        -:13323:
        -:13324:  /* "stringified" now contains a JSON string */
        -:13325:
    #####:13326:  jerry_release_value (stringified);
    #####:13327:  jerry_release_value (obj);
        -:13328:
        -:13329:  /* Cleanup engine */
    #####:13330:  jerry_cleanup ();
        -:13331:
        -:13332:  return 0;
        -:13333:}
        -:13334:```
        -:13335:
        -:13336:# Container Functions
        -:13337:
        -:13338:## jerry_get_array_from_container
        -:13339:
        -:13340:**Summary**
        -:13341:
        -:13342:Return a new array containing elements from a Container, or a Container Iterator. Sets the is_key_value_p to true.
        -:13343:if the container object contains key-value structure and false if not.
        -:13344:
        -:13345:*Notes*
        -:13346:- The return value will be an empty array if the Map/Set or Iterator object was empty or finished.
        -:13347:- This API function depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -:13348:  runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -:13349:  feature enum values.
        -:13350:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:13351:- The es.next profile enables this by default.
        -:13352:
        -:13353:*New in version [[NEXT_RELEASE]]*.
        -:13354:
        -:13355:**Prototype**
        -:13356:
        -:13357:```c
        -:13358:jerry_value_t
        -:13359:jerry_get_array_from_container(jerry_value_t value,
        -:13360:                               bool *is_key_value_p);
        -:13361:```
        -:13362:
        -:13363:- `value` - Map/Set or iterator object
        -:13364:- `is_key_value` - Will be set to `true` if the given container has key-value pairs, `false` otherwise.
        -:13365:- return value
        -:13366:  - jerry_value_t containing an array of values from the Map/Set or iterator object
        -:13367:  - Error if the `value` is nor a Container or a Container Iterator.
        -:13368:  - `undefined` if the `value` is undefined/null.
        -:13369:**Example**
        -:13370:
        -:13371:[doctest]: # ()
        -:13372:
        -:13373:```c
        -:13374:#include "jerryscript.h"
        -:13375:int
    #####:13376:main (void)
        -:13377:{
    #####:13378:  jerry_init (JERRY_INIT_EMPTY);
        -:13379:
    #####:13380:  jerry_char_t src[] = "var map = new Map(); map.set(1,2); map.entries()";
    #####:13381:  jerry_value_t iterable = jerry_eval (src, sizeof (src) - 1, JERRY_PARSE_NO_OPTS);
        -:13382:
    #####:13383:  bool is_key_value_container = false;
    #####:13384:  jerry_value_t buffer_from_map = jerry_get_array_from_container (iterable, &is_key_value_container);
        -:13385:
        -:13386:  /*
        -:13387:    The buffer_from_map contains two elements: 1 and 2, which is the key/value pair of the only item in the set.
        -:13388:    is_key_value set to true, as the original is a key-value structure (a Map Iterator)
        -:13389:  */
        -:13390:
    #####:13391:  jerry_release_value (iterable);
    #####:13392:  jerry_release_value (buffer_from_map);
        -:13393:
    #####:13394:  jerry_cleanup ();
        -:13395:
        -:13396:  return 0;
        -:13397:}
        -:13398:```
        -:13399:
        -:13400:**See also**
        -:13401:
        -:13402:- [jerry_create_container](#jerry_create_container)
        -:13403:- [jerry_container_type_t](#jerry_container_type_t)
        -:13404:
        -:13405:
        -:13406:## jerry_container_operation
        -:13407:
        -:13408:**Summary**
        -:13409:
        -:13410:Perform container operation on the given operands (add, delete, set, etc.).
        -:13411:
        -:13412:*Note*:
        -:13413:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:13414:  is no longer needed.
        -:13415:- This API function depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -:13416:  runtime with the `JERRY_FEATURE_MAP` , `JERRY_FEATURE_SET` , `JERRY_FEATURE_WEAKMAP` , `JERRY_FEATURE_WEAKSET`
        -:13417:  feature enum values.
        -:13418:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:13419:- The es.next profile enables this by default.
        -:13420:
        -:13421:**Prototype**
        -:13422:
        -:13423:```c
        -:13424:jerry_value_t
        -:13425:jerry_container_operation (jerry_container_operation_t operation,
        -:13426:                           jerry_value_t container,
        -:13427:                           jerry_value_t *arguments,
        -:13428:                           uint32_t arguments_number)
        -:13429:```
        -:13430:
        -:13431: - `operation` - container operation
        -:13432: - `container` - this value
        -:13433: - `arguments` - array of arguments
        -:13434: - `arguments_number` - number of arguments
        -:13435: - result if the operation is successful
        -:13436: - error, otherwise
        -:13437:
        -:13438:*New in version [[NEXT_RELEASE]]*.
        -:13439:
        -:13440:**Example**
        -:13441:
        -:13442:[doctest]: # ()
        -:13443:
        -:13444:```c
        -:13445:#include "jerryscript.h"
        -:13446:
        -:13447:int
    #####:13448:main (void)
        -:13449:{
    #####:13450:  jerry_init (JERRY_INIT_EMPTY);
        -:13451:
    #####:13452:  jerry_value_t map = jerry_create_container (JERRY_CONTAINER_TYPE_MAP, NULL, 0);
    #####:13453:  jerry_value_t key_str = jerry_create_string ((jerry_char_t *) "number");
    #####:13454:  jerry_value_t number = jerry_create_number (10);
    #####:13455:  jerry_value_t args[2] = {key_str, number};
        -:13456:
    #####:13457:  jerry_value_t result = jerry_container_operation (JERRY_CONTAINER_OP_SET, map, args, 2);
    #####:13458:  jerry_release_value (result);
        -:13459:
    #####:13460:  result = jerry_container_operation (JERRY_CONTAINER_OP_SIZE, map, NULL, 0);
    #####:13461:  jerry_release_value (result);
        -:13462:
    #####:13463:  result = jerry_container_operation (JERRY_CONTAINER_OP_CLEAR, map, NULL, 0);
    #####:13464:  jerry_release_value (result);
        -:13465:
    #####:13466:  jerry_release_value (map);
    #####:13467:  jerry_release_value (key_str);
    #####:13468:  jerry_release_value (number);
        -:13469:
    #####:13470:  jerry_cleanup ();
        -:13471:  return 0;
        -:13472:}
        -:13473:```
        -:13474:
        -:13475:**See also**
        -:13476:
        -:13477:- [jerry_create_container](#jerry_create_container)
        -:13478:- [jerry_container_type_t](#jerry_container_type_t)
