        -:    0:Source:/home/workspace/jerry-core/parser/js/js-parser-tagged-template-literal.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "js-parser-tagged-template-literal.h"
        -:   17:#include "js-lexer.h"
        -:   18:#include "ecma-array-object.h"
        -:   19:#include "ecma-builtin-helpers.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:#include "ecma-objects.h"
        -:   23:
        -:   24:/* \addtogroup parser Parser
        -:   25: * @{
        -:   26: *
        -:   27: * \addtogroup jsparser JavaScript
        -:   28: * @{
        -:   29: *
        -:   30: * \addtogroup jsparser_tagged_template_literal Tagged template literal
        -:   31: * @{
        -:   32: */
        -:   33:
        -:   34:#if JERRY_ESNEXT
        -:   35:/**
        -:   36: * Append the cooked and raw string to the corresponding array
        -:   37: */
        -:   38:void
    #####:   39:parser_tagged_template_literal_append_strings (parser_context_t *context_p, /**< parser context */
        -:   40:                                               ecma_object_t *template_obj_p, /**< template object */
        -:   41:                                               ecma_object_t *raw_strings_p, /**< raw strings object */
        -:   42:                                               uint32_t prop_idx) /**< property index to set the values */
        -:   43:{
    #####:   44:  lexer_lit_location_t *lit_loc_p = &context_p->token.lit_location;
        -:   45:
    #####:   46:  if (lit_loc_p->length == 0 && !(lit_loc_p->status_flags & LEXER_LIT_LOCATION_HAS_ESCAPE))
        -:   47:  {
    #####:   48:    ecma_builtin_helper_def_prop_by_index (template_obj_p,
        -:   49:                                           prop_idx,
        -:   50:                                           ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY),
        -:   51:                                           ECMA_PROPERTY_FLAG_ENUMERABLE);
        -:   52:
    #####:   53:    ecma_builtin_helper_def_prop_by_index (raw_strings_p,
        -:   54:                                           prop_idx,
        -:   55:                                           ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY),
        -:   56:                                           ECMA_PROPERTY_FLAG_ENUMERABLE);
    #####:   57:    return;
        -:   58:  }
        -:   59:
    #####:   60:  uint8_t local_byte_array[LEXER_MAX_LITERAL_LOCAL_BUFFER_SIZE];
    #####:   61:  const uint8_t *source_p = lexer_convert_literal_to_chars (context_p,
    #####:   62:                                                            &context_p->token.lit_location,
        -:   63:                                                            local_byte_array,
        -:   64:                                                            LEXER_STRING_NO_OPTS);
        -:   65:
        -:   66:  ecma_string_t *raw_str_p;
    #####:   67:  ecma_string_t *cooked_str_p = ((lit_loc_p->status_flags & LEXER_FLAG_ASCII)
    #####:   68:                                  ? ecma_new_ecma_string_from_ascii (source_p, lit_loc_p->length)
    #####:   69:                                  : ecma_new_ecma_string_from_utf8 (source_p, lit_loc_p->length));
        -:   70:
    #####:   71:  parser_free_allocated_buffer (context_p);
        -:   72:
    #####:   73:  if (lit_loc_p->status_flags & LEXER_LIT_LOCATION_HAS_ESCAPE)
        -:   74:  {
    #####:   75:    context_p->source_p = context_p->token.lit_location.char_p - 1;
    #####:   76:    lexer_parse_string (context_p, LEXER_STRING_RAW);
    #####:   77:    source_p = lexer_convert_literal_to_chars (context_p,
    #####:   78:                                               &context_p->token.lit_location,
        -:   79:                                               local_byte_array,
        -:   80:                                               LEXER_STRING_RAW);
        -:   81:
    #####:   82:    raw_str_p = ((lit_loc_p->status_flags & LEXER_FLAG_ASCII)
    #####:   83:                  ? ecma_new_ecma_string_from_ascii (source_p, lit_loc_p->length)
    #####:   84:                  : ecma_new_ecma_string_from_utf8 (source_p, lit_loc_p->length));
        -:   85:
    #####:   86:    parser_free_allocated_buffer (context_p);
        -:   87:  }
        -:   88:  else
        -:   89:  {
    #####:   90:    ecma_ref_ecma_string (cooked_str_p);
    #####:   91:    raw_str_p = cooked_str_p;
        -:   92:  }
        -:   93:
    #####:   94:  ecma_builtin_helper_def_prop_by_index (template_obj_p,
        -:   95:                                         prop_idx,
        -:   96:                                         ecma_make_string_value (cooked_str_p),
        -:   97:                                         ECMA_PROPERTY_FLAG_ENUMERABLE);
        -:   98:
    #####:   99:  ecma_builtin_helper_def_prop_by_index (raw_strings_p,
        -:  100:                                         prop_idx,
        -:  101:                                         ecma_make_string_value (raw_str_p),
        -:  102:                                         ECMA_PROPERTY_FLAG_ENUMERABLE);
        -:  103:
    #####:  104:  ecma_deref_ecma_string (cooked_str_p);
    #####:  105:  ecma_deref_ecma_string (raw_str_p);
        -:  106:} /* parser_tagged_template_literal_append_strings */
        -:  107:
        -:  108:/**
        -:  109: * Create new tagged template literal object
        -:  110: *
        -:  111: * @return pointer to the allocated object
        -:  112: */
        -:  113:ecma_object_t *
    #####:  114:parser_new_tagged_template_literal (ecma_object_t **raw_strings_p) /**< [out] raw strings object */
        -:  115:{
    #####:  116:  ecma_object_t *template_obj_p = ecma_op_new_array_object (0);
    #####:  117:  *raw_strings_p = ecma_op_new_array_object (0);
        -:  118:
    #####:  119:  ecma_extended_object_t *template_ext_obj_p = (ecma_extended_object_t *) template_obj_p;
    #####:  120:  ecma_extended_object_t *raw_ext_obj_p = (ecma_extended_object_t *) *raw_strings_p;
        -:  121:
    #####:  122:  const uint8_t flags = ECMA_PROPERTY_VIRTUAL | ECMA_PROPERTY_FLAG_WRITABLE | ECMA_FAST_ARRAY_FLAG;
    #####:  123:  JERRY_ASSERT (template_ext_obj_p->u.array.length_prop_and_hole_count == flags);
    #####:  124:  JERRY_ASSERT (raw_ext_obj_p->u.array.length_prop_and_hole_count == flags);
        -:  125:
    #####:  126:  template_ext_obj_p->u.array.length_prop_and_hole_count = flags | ECMA_ARRAY_TEMPLATE_LITERAL;
    #####:  127:  raw_ext_obj_p->u.array.length_prop_and_hole_count = flags | ECMA_ARRAY_TEMPLATE_LITERAL;
        -:  128:
    #####:  129:  ecma_builtin_helper_def_prop (template_obj_p,
        -:  130:                                ecma_get_magic_string (LIT_MAGIC_STRING_RAW),
        -:  131:                                ecma_make_object_value (*raw_strings_p),
        -:  132:                                ECMA_PROPERTY_FIXED);
        -:  133:
    #####:  134:  return template_obj_p;
        -:  135:} /* parser_new_tagged_template_literal */
        -:  136:
        -:  137:/**
        -:  138: * Set integrity level of the given template array object to "frozen"
        -:  139: */
        -:  140:static void
    #####:  141:parser_tagged_template_literal_freeze_array (ecma_object_t *obj_p)
        -:  142:{
    #####:  143:  JERRY_ASSERT (ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_ARRAY);
    #####:  144:  ecma_op_ordinary_object_prevent_extensions (obj_p);
    #####:  145:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;
    #####:  146:  ext_obj_p->u.array.length_prop_and_hole_count &= (uint32_t) ~ECMA_PROPERTY_FLAG_WRITABLE;
    #####:  147:} /* parser_tagged_template_literal_freeze_array */
        -:  148:
        -:  149:/**
        -:  150: * Finalize the tagged template object
        -:  151: */
        -:  152:void
    #####:  153:parser_tagged_template_literal_finalize (ecma_object_t *template_obj_p, /**< template object */
        -:  154:                                         ecma_object_t *raw_strings_p) /**< raw strings object */
        -:  155:{
    #####:  156:  parser_tagged_template_literal_freeze_array (template_obj_p);
    #####:  157:  parser_tagged_template_literal_freeze_array (raw_strings_p);
    #####:  158:} /* parser_tagged_template_literal_finalize */
        -:  159:#endif /* JERRY_ESNEXT */
        -:  160:
        -:  161:/**
        -:  162: * @}
        -:  163: * @}
        -:  164: * @}
        -:  165: */
