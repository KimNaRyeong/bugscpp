        -:    0:Source:/home/workspace/tests/unit-core/test-get-own-property.c
        -:    0:Programs:296
        -:    1: /* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:static jerry_value_t
    #####:   21:create_object (const char *source_p) /**< source script */
        -:   22:{
    #####:   23:  jerry_value_t result = jerry_eval ((const jerry_char_t *) source_p, strlen (source_p), 0);
    #####:   24:  TEST_ASSERT (jerry_value_is_object (result));
    #####:   25:  return result;
        -:   26:} /* create_object */
        -:   27:
        -:   28:static void
    #####:   29:compare_string (jerry_value_t value, /**< value to compare */
        -:   30:                const char *string_p) /**< expected value */
        -:   31:{
        -:   32:  jerry_char_t string_buffer[64];
        -:   33:
    #####:   34:  TEST_ASSERT (jerry_value_is_string (value));
        -:   35:
    #####:   36:  size_t size = strlen (string_p);
    #####:   37:  TEST_ASSERT (size <= sizeof (string_buffer));
    #####:   38:  TEST_ASSERT (size == jerry_get_string_size (value));
        -:   39:
    #####:   40:  jerry_string_to_char_buffer (value, string_buffer, (jerry_size_t) size);
    #####:   41:  TEST_ASSERT (memcmp (string_p, string_buffer, size) == 0);
    #####:   42:} /* compare_string */
        -:   43:
        -:   44:int
    #####:   45:main (void)
        -:   46:{
    #####:   47:  TEST_INIT ();
    #####:   48:  jerry_init (JERRY_INIT_EMPTY);
        -:   49:
    #####:   50:  jerry_value_t pp_string = jerry_create_string ((const jerry_char_t *) "pp");
    #####:   51:  jerry_value_t qq_string = jerry_create_string ((const jerry_char_t *) "qq");
    #####:   52:  jerry_value_t rr_string = jerry_create_string ((const jerry_char_t *) "rr");
        -:   53:
    #####:   54:  jerry_value_t object = create_object ("'use strict';\n"
        -:   55:                                        "({ pp:'A', get qq() { return 'B' } })");
        -:   56:
    #####:   57:  jerry_value_t result = jerry_get_own_property (object, pp_string, object, NULL);
    #####:   58:  compare_string (result, "A");
    #####:   59:  jerry_release_value (result);
        -:   60:
    #####:   61:  bool found = false;
    #####:   62:  result = jerry_get_own_property (object, pp_string, object, &found);
    #####:   63:  compare_string (result, "A");
    #####:   64:  TEST_ASSERT (found);
    #####:   65:  jerry_release_value (result);
        -:   66:
    #####:   67:  result = jerry_get_own_property (object, qq_string, object, NULL);
    #####:   68:  compare_string (result, "B");
    #####:   69:  jerry_release_value (result);
        -:   70:
    #####:   71:  found = false;
    #####:   72:  result = jerry_get_own_property (object, qq_string, object, &found);
    #####:   73:  compare_string (result, "B");
    #####:   74:  TEST_ASSERT (found);
    #####:   75:  jerry_release_value (result);
        -:   76:
    #####:   77:  result = jerry_get_own_property (object, rr_string, object, NULL);
    #####:   78:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:   79:  jerry_release_value (result);
        -:   80:
    #####:   81:  found = true;
    #####:   82:  result = jerry_get_own_property (object, rr_string, object, &found);
    #####:   83:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:   84:  TEST_ASSERT (!found);
    #####:   85:  jerry_release_value (result);
        -:   86:
    #####:   87:  jerry_release_value (object);
        -:   88:
    #####:   89:  object = create_object ("'use strict';\n"
        -:   90:                          "Object.create({ pp:'Found!' })\n");
        -:   91:
    #####:   92:  found = true;
        -:   93:  /* Does not check prototype. */
    #####:   94:  result = jerry_get_own_property (object, pp_string, object, &found);
    #####:   95:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:   96:  TEST_ASSERT (!found);
    #####:   97:  jerry_release_value (result);
        -:   98:
    #####:   99:  jerry_release_value (object);
        -:  100:
    #####:  101:  object = create_object ("'use strict';\n"
        -:  102:                          "var obj = Object.create({ get pp() { return this.qq } })\n"
        -:  103:                          "Object.defineProperty(obj, 'qq', { value: 'Prop' })\n"
        -:  104:                          "obj");
    #####:  105:  jerry_value_t prototype = jerry_get_prototype (object);
        -:  106:
    #####:  107:  TEST_ASSERT (jerry_value_is_object (prototype));
    #####:  108:  found = false;
    #####:  109:  result = jerry_get_own_property (prototype, pp_string, object, &found);
    #####:  110:  compare_string (result, "Prop");
    #####:  111:  TEST_ASSERT (found);
    #####:  112:  jerry_release_value (result);
        -:  113:
    #####:  114:  jerry_release_value (prototype);
    #####:  115:  jerry_release_value (object);
        -:  116:
        -:  117:  /* Error cases. */
    #####:  118:  jerry_value_t invalid_arg = jerry_create_null ();
    #####:  119:  object = jerry_create_object ();
        -:  120:
    #####:  121:  found = true;
    #####:  122:  result = jerry_get_own_property (invalid_arg, pp_string, object, &found);
    #####:  123:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  124:  TEST_ASSERT (!found);
    #####:  125:  jerry_release_value (result);
        -:  126:
    #####:  127:  result = jerry_get_own_property (object, pp_string, invalid_arg, NULL);
    #####:  128:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  129:  jerry_release_value (result);
        -:  130:
    #####:  131:  found = true;
    #####:  132:  result = jerry_get_own_property (object, invalid_arg, object, &found);
    #####:  133:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  134:  TEST_ASSERT (!found);
    #####:  135:  jerry_release_value (result);
        -:  136:
    #####:  137:  jerry_release_value (object);
    #####:  138:  jerry_release_value (invalid_arg);
        -:  139:
    #####:  140:  if (jerry_is_feature_enabled (JERRY_FEATURE_PROXY))
        -:  141:  {
    #####:  142:    object = create_object ("'use strict';\n"
        -:  143:                            "var proxy = new Proxy({}, {\n"
        -:  144:                            "    get: function(target, prop, receiver) {\n"
        -:  145:                            "        if (prop === 'qq') return\n"
        -:  146:                            "        return receiver[prop]\n"
        -:  147:                            "    }\n"
        -:  148:                            "})\n"
        -:  149:                            "var obj = Object.create(proxy)\n"
        -:  150:                            "Object.defineProperty(obj, 'pp', { value: 'Prop' })\n"
        -:  151:                            "obj");
        -:  152:
    #####:  153:    prototype = jerry_get_prototype (object);
    #####:  154:    found = false;
    #####:  155:    result = jerry_get_own_property (prototype, pp_string, object, &found);
    #####:  156:    compare_string (result, "Prop");
    #####:  157:    TEST_ASSERT (found);
    #####:  158:    jerry_release_value (result);
        -:  159:
    #####:  160:    found = false;
    #####:  161:    result = jerry_get_own_property (prototype, qq_string, object, &found);
    #####:  162:    TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  163:    TEST_ASSERT (found);
    #####:  164:    jerry_release_value (result);
        -:  165:
    #####:  166:    jerry_release_value (prototype);
    #####:  167:    jerry_release_value (object);
        -:  168:
    #####:  169:    object = create_object ("'use strict';\n"
        -:  170:                            "(new Proxy({}, {\n"
        -:  171:                            "    get: function(target, prop, receiver) {\n"
        -:  172:                            "        throw 'Error'\n"
        -:  173:                            "    }\n"
        -:  174:                            "}))\n");
        -:  175:
    #####:  176:    found = false;
    #####:  177:    result = jerry_get_own_property (object, qq_string, object, &found);
    #####:  178:    TEST_ASSERT (jerry_value_is_error (result));
    #####:  179:    TEST_ASSERT (found);
    #####:  180:    jerry_release_value (result);
        -:  181:
    #####:  182:    jerry_release_value (object);
        -:  183:  }
        -:  184:
    #####:  185:  if (jerry_is_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:  186:  {
    #####:  187:    object = create_object ("'use strict'\n"
        -:  188:                            "var sym = Symbol();\n"
        -:  189:                            "({ pp:sym, [sym]:'Prop' })");
        -:  190:
    #####:  191:    found = false;
    #####:  192:    jerry_value_t symbol = jerry_get_own_property (object, pp_string, object, &found);
    #####:  193:    TEST_ASSERT (jerry_value_is_symbol (symbol));
    #####:  194:    TEST_ASSERT (found);
        -:  195:
    #####:  196:    found = false;
    #####:  197:    result = jerry_get_own_property (object, symbol, object, &found);
    #####:  198:    compare_string (result, "Prop");
    #####:  199:    TEST_ASSERT (found);
    #####:  200:    jerry_release_value (result);
        -:  201:
    #####:  202:    jerry_release_value (symbol);
    #####:  203:    jerry_release_value (object);
        -:  204:  }
        -:  205:
    #####:  206:  jerry_release_value (pp_string);
    #####:  207:  jerry_release_value (qq_string);
    #####:  208:  jerry_release_value (rr_string);
        -:  209:
    #####:  210:  jerry_cleanup ();
        -:  211:  return 0;
        -:  212:} /* main */
