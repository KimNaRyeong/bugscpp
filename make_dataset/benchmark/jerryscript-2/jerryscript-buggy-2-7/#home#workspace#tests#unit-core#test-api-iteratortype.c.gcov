        -:    0:Source:/home/workspace/tests/unit-core/test-api-iteratortype.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:typedef struct
        -:   22:{
        -:   23:  jerry_iterator_type_t type_info;
        -:   24:  jerry_value_t value;
        -:   25:  bool active;
        -:   26:} test_entry_t;
        -:   27:
        -:   28:#define ENTRY(TYPE, VALUE) { TYPE, VALUE, true }
        -:   29:#define ENTRY_IF(TYPE, VALUE, FEATURE) { TYPE, VALUE, jerry_is_feature_enabled (FEATURE) }
        -:   30:#define EVALUATE(BUFF) (jerry_eval ((BUFF), sizeof ((BUFF)) - 1, JERRY_PARSE_NO_OPTS))
        -:   31:
        -:   32:int
    #####:   33:main (void)
        -:   34:{
    #####:   35:  TEST_INIT ();
        -:   36:
    #####:   37:  jerry_init (JERRY_INIT_EMPTY);
        -:   38:
    #####:   39:  const jerry_char_t array_iterator_keys[] = "[1, 2, 3].keys()";
    #####:   40:  const jerry_char_t array_iterator_values[] = "[1, 2, 3].values()";
    #####:   41:  const jerry_char_t array_iterator_entries[] = "[1, 2, 3].entries()";
    #####:   42:  const jerry_char_t array_iterator_symbol_iterator[] = "([1, 2, 3])[Symbol.iterator]()";
        -:   43:
    #####:   44:  const jerry_char_t typedarray_iterator_keys[] = "new Uint8Array([1, 2, 3]).keys()";
    #####:   45:  const jerry_char_t typedarray_iterator_values[] = "new Uint8Array([1, 2, 3]).values()";
    #####:   46:  const jerry_char_t typedarray_iterator_entries[] = "new Uint8Array([1, 2, 3]).entries()";
    #####:   47:  const jerry_char_t typedarray_iterator_symbol_iterator[] = "new Uint8Array([1, 2, 3])[Symbol.iterator]()";
        -:   48:
    #####:   49:  const jerry_char_t string_symbol_iterator[] = "('foo')[Symbol.iterator]()";
        -:   50:
    #####:   51:  const jerry_char_t map_iterator_keys[] = "new Map([1, 2, 3].entries()).keys()";
    #####:   52:  const jerry_char_t map_iterator_values[] = "new Map([1, 2, 3].entries()).values()";
    #####:   53:  const jerry_char_t map_iterator_entries[] = "new Map([1, 2, 3].entries()).entries()";
    #####:   54:  const jerry_char_t map_iterator_symbol_iterator[] = "new Map([1, 2, 3].entries())[Symbol.iterator]()";
        -:   55:
    #####:   56:  const jerry_char_t set_iterator_keys[] = "new Set([1, 2, 3]).keys()";
    #####:   57:  const jerry_char_t set_iterator_values[] = "new Set([1, 2, 3]).values()";
    #####:   58:  const jerry_char_t set_iterator_entries[] = "new Set([1, 2, 3]).entries()";
    #####:   59:  const jerry_char_t set_iterator_symbol_iterator[] = "new Set([1, 2, 3])[Symbol.iterator]()";
        -:   60:
    #####:   61:  test_entry_t entries[] =
        -:   62:  {
    #####:   63:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_create_number (-33.0)),
    #####:   64:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_create_boolean (true)),
    #####:   65:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_create_undefined ()),
    #####:   66:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_create_null ()),
    #####:   67:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_create_string ((const jerry_char_t *) "foo")),
    #####:   68:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_create_error (JERRY_ERROR_TYPE, (const jerry_char_t *) "error")),
        -:   69:
    #####:   70:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_create_object ()),
    #####:   71:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_create_array (10)),
        -:   72:
    #####:   73:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (array_iterator_keys), JERRY_FEATURE_SYMBOL),
    #####:   74:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (array_iterator_values), JERRY_FEATURE_SYMBOL),
    #####:   75:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (array_iterator_entries), JERRY_FEATURE_SYMBOL),
    #####:   76:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (array_iterator_symbol_iterator), JERRY_FEATURE_SYMBOL),
        -:   77:
    #####:   78:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (typedarray_iterator_keys), JERRY_FEATURE_SYMBOL),
    #####:   79:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (typedarray_iterator_values), JERRY_FEATURE_SYMBOL),
    #####:   80:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (typedarray_iterator_entries), JERRY_FEATURE_SYMBOL),
    #####:   81:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (typedarray_iterator_symbol_iterator), JERRY_FEATURE_SYMBOL),
        -:   82:
    #####:   83:    ENTRY_IF (JERRY_ITERATOR_TYPE_STRING, EVALUATE (string_symbol_iterator), JERRY_FEATURE_SYMBOL),
        -:   84:
    #####:   85:    ENTRY_IF (JERRY_ITERATOR_TYPE_MAP, EVALUATE (map_iterator_keys), JERRY_FEATURE_MAP),
    #####:   86:    ENTRY_IF (JERRY_ITERATOR_TYPE_MAP, EVALUATE (map_iterator_values), JERRY_FEATURE_MAP),
    #####:   87:    ENTRY_IF (JERRY_ITERATOR_TYPE_MAP, EVALUATE (map_iterator_entries), JERRY_FEATURE_MAP),
    #####:   88:    ENTRY_IF (JERRY_ITERATOR_TYPE_MAP, EVALUATE (map_iterator_symbol_iterator), JERRY_FEATURE_MAP),
        -:   89:
    #####:   90:    ENTRY_IF (JERRY_ITERATOR_TYPE_SET, EVALUATE (set_iterator_keys), JERRY_FEATURE_SET),
    #####:   91:    ENTRY_IF (JERRY_ITERATOR_TYPE_SET, EVALUATE (set_iterator_values), JERRY_FEATURE_SET),
    #####:   92:    ENTRY_IF (JERRY_ITERATOR_TYPE_SET, EVALUATE (set_iterator_entries), JERRY_FEATURE_SET),
    #####:   93:    ENTRY_IF (JERRY_ITERATOR_TYPE_SET, EVALUATE (set_iterator_symbol_iterator), JERRY_FEATURE_SET),
        -:   94:  };
        -:   95:
    #####:   96:  for (size_t idx = 0; idx < sizeof (entries) / sizeof (entries[0]); idx++)
        -:   97:  {
    #####:   98:    jerry_iterator_type_t type_info = jerry_iterator_get_type (entries[idx].value);
    #####:   99:    TEST_ASSERT (!entries[idx].active || type_info == entries[idx].type_info);
    #####:  100:    jerry_release_value (entries[idx].value);
        -:  101:  }
        -:  102:
    #####:  103:  jerry_cleanup ();
        -:  104:
        -:  105:  return 0;
        -:  106:} /* main */
