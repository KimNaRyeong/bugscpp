        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-async-from-sync-iterator-prototype.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtin-handlers.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-function-object.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-iterator-object.h"
        -:   24:#include "ecma-objects.h"
        -:   25:#include "ecma-promise-object.h"
        -:   26:#include "jcontext.h"
        -:   27:#include "jerryscript-types.h"
        -:   28:#include "jrt.h"
        -:   29:#include "lit-magic-strings.h"
        -:   30:#include "lit-strings.h"
        -:   31:#include "opcodes.h"
        -:   32:#include "vm-defines.h"
        -:   33:
        -:   34:#if JERRY_ESNEXT
        -:   35:
        -:   36:#define ECMA_BUILTINS_INTERNAL
        -:   37:#include "ecma-builtins-internal.h"
        -:   38:
        -:   39:/**
        -:   40:  * This object has a custom dispatch function.
        -:   41:  */
        -:   42:#define BUILTIN_CUSTOM_DISPATCH
        -:   43:
        -:   44:/**
        -:   45: * List of built-in routine identifiers.
        -:   46: */
        -:   47:enum
        -:   48:{
        -:   49:  ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_START = 0, /**< buitlin routine start id */
        -:   50:  ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_NEXT, /**< 'next' routine v11, 25.1.4.2.1  */
        -:   51:  ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_RETURN, /**< 'return' routine v11, 25.1.4.2.2  */
        -:   52:  ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_THROW /**< 'throw' routine v11, 25.1.4.2.3  */
        -:   53:} ecma_async_from_sync_iterator_operation_type_t;
        -:   54:
        -:   55:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-async-from-sync-iterator-prototype.inc.h"
        -:   56:#define BUILTIN_UNDERSCORED_ID async_from_sync_iterator_prototype
        -:   57:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   58:
        -:   59:/** \addtogroup ecma ECMA
        -:   60: * @{
        -:   61: *
        -:   62: * \addtogroup ecmabuiltins
        -:   63: * @{
        -:   64: *
        -:   65: * \addtogroup generator ECMA %AsyncFromSyncIteratorPrototype% object built-in
        -:   66: * @{
        -:   67: */
        -:   68:
        -:   69:/**
        -:   70: * AsyncFromSyncIteratorContinuation operation
        -:   71: *
        -:   72: * See also:
        -:   73: *         ECMAScript v11, 25.1.4.4
        -:   74: *
        -:   75: * @return ecma value
        -:   76: *         Returned value must be freed with ecma_free_value.
        -:   77: */
        -:   78:static ecma_value_t
    #####:   79:ecma_op_async_from_sync_iterator_prototype_continuation (ecma_value_t result, /**< routine's 'result' argument */
        -:   80:                                                         ecma_object_t *capability_obj_p) /**< promise capability */
        -:   81:{
        -:   82:  /* 1. */
    #####:   83:  ecma_value_t done = ecma_op_iterator_complete (result);
        -:   84:
        -:   85:  /* 2. */
    #####:   86:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&done, capability_obj_p)))
        -:   87:  {
    #####:   88:    return done;
        -:   89:  }
        -:   90:
    #####:   91:  uint16_t done_flag = ecma_is_value_false (done) ? 0 : (1 << ECMA_NATIVE_HANDLER_COMMON_FLAGS_SHIFT);
    #####:   92:  ecma_free_value (done);
        -:   93:
        -:   94:  /* 3. */
    #####:   95:  ecma_value_t value = ecma_op_iterator_value (result);
        -:   96:
        -:   97:  /* 4. */
    #####:   98:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&value, capability_obj_p)))
        -:   99:  {
    #####:  100:    return value;
        -:  101:  }
        -:  102:
        -:  103:  /* 5. */
    #####:  104:  ecma_value_t builtin_promise = ecma_make_object_value (ecma_builtin_get (ECMA_BUILTIN_ID_PROMISE));
    #####:  105:  ecma_value_t value_wrapper = ecma_promise_reject_or_resolve (builtin_promise, value, true);
    #####:  106:  ecma_free_value (value);
        -:  107:
        -:  108:  /* 6. */
    #####:  109:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&value_wrapper, capability_obj_p)))
        -:  110:  {
    #####:  111:    return value_wrapper;
        -:  112:  }
        -:  113:
        -:  114:  /* 8 - 9. */
    #####:  115:  ecma_object_t *on_fullfilled = ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_ASYNC_FROM_SYNC_ITERATOR_UNWRAP,
        -:  116:                                                                sizeof (ecma_extended_object_t));
    #####:  117:  ((ecma_extended_object_t *) on_fullfilled)->u.built_in.u2.routine_flags = (uint8_t) done_flag;
        -:  118:
        -:  119:  /* 10. */
    #####:  120:  ecma_value_t then_result = ecma_promise_perform_then (value_wrapper,
        -:  121:                                                        ecma_make_object_value (on_fullfilled),
        -:  122:                                                        ECMA_VALUE_UNDEFINED,
        -:  123:                                                        capability_obj_p);
        -:  124:
    #####:  125:  JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (then_result));
    #####:  126:  ecma_deref_object (on_fullfilled);
    #####:  127:  ecma_free_value (value_wrapper);
        -:  128:
        -:  129:  /* 11. */
    #####:  130:  return then_result;
        -:  131:} /* ecma_op_async_from_sync_iterator_prototype_continuation */
        -:  132:
        -:  133:/**
        -:  134: * The %AsyncFromSyncIteratorPrototype% object's 'next' routine
        -:  135: *
        -:  136: * See also:
        -:  137: *         ECMAScript v11, 25.1.4.2.1
        -:  138: *
        -:  139: * @return ecma value
        -:  140: *         Returned value must be freed with ecma_free_value.
        -:  141: */
        -:  142:static ecma_value_t
    #####:  143:ecma_builtin_async_from_sync_iterator_prototype_next (ecma_async_from_sync_iterator_object_t *iter_p, /**< iterator
        -:  144:                                                                                                       *   record*/
        -:  145:                                                      ecma_object_t *capability_p, /**< promise capability */
        -:  146:                                                      ecma_value_t value) /**< routine's 'value' argument */
        -:  147:{
        -:  148:  /* 5. */
    #####:  149:  ecma_value_t next_result = ecma_op_iterator_next (iter_p->header.u.cls.u3.sync_iterator,
        -:  150:                                                    iter_p->sync_next_method,
        -:  151:                                                    value);
        -:  152:
        -:  153:  /* 6. */
    #####:  154:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&next_result, capability_p)))
        -:  155:  {
    #####:  156:    return next_result;
        -:  157:  }
        -:  158:
        -:  159:  /* 7. */
    #####:  160:  ecma_value_t result = ecma_op_async_from_sync_iterator_prototype_continuation (next_result, capability_p);
    #####:  161:  ecma_free_value (next_result);
        -:  162:
    #####:  163:  return result;
        -:  164:} /* ecma_builtin_async_from_sync_iterator_prototype_next */
        -:  165:
        -:  166:/**
        -:  167: * The %AsyncFromSyncIteratorPrototype% object's 'return' and 'throw' routines
        -:  168: *
        -:  169: * See also:
        -:  170: *         ECMAScript v11, 25.1.4.2.2
        -:  171: *         ECMAScript v11, 25.1.4.2.3
        -:  172: *
        -:  173: * @return ecma value
        -:  174: *         Returned value must be freed with ecma_free_value.
        -:  175: */
        -:  176:static ecma_value_t
    #####:  177:ecma_builtin_async_from_sync_iterator_prototype_do (ecma_async_from_sync_iterator_object_t *iter_p, /**< iterator
        -:  178:                                                                                                     *   record*/
        -:  179:                                                    ecma_object_t *capability_obj_p, /**< promise capability */
        -:  180:                                                    ecma_value_t value, /**< routine's 'value' argument */
        -:  181:                                                    lit_magic_string_id_t method_id) /**< method id */
        -:  182:{
        -:  183:  /* 5. */
    #####:  184:  ecma_value_t sync_iterator = iter_p->header.u.cls.u3.sync_iterator;
    #####:  185:  ecma_value_t method = ecma_op_get_method_by_magic_id (sync_iterator, method_id);
        -:  186:
        -:  187:  /* 6. */
    #####:  188:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&method, capability_obj_p)))
        -:  189:  {
    #####:  190:    return method;
        -:  191:  }
        -:  192:
    #####:  193:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
        -:  194:
    #####:  195:  ecma_value_t call_arg;
        -:  196:  uint32_t arg_size;
        -:  197:
    #####:  198:  if (ecma_is_value_empty (value))
        -:  199:  {
    #####:  200:    arg_size = 0;
    #####:  201:    call_arg = ECMA_VALUE_UNDEFINED;
        -:  202:  }
        -:  203:  else
        -:  204:  {
    #####:  205:    arg_size = 1;
    #####:  206:    call_arg = value;
        -:  207:  }
        -:  208:
        -:  209:  /* 7. */
    #####:  210:  if (ecma_is_value_undefined (method))
        -:  211:  {
        -:  212:    ecma_value_t func_obj;
        -:  213:
    #####:  214:    if (method_id == LIT_MAGIC_STRING_RETURN)
        -:  215:    {
        -:  216:      /* 7.a. */
    #####:  217:      call_arg = ecma_create_iter_result_object (call_arg, ECMA_VALUE_TRUE);
    #####:  218:      arg_size = 1;
    #####:  219:      func_obj = capability_p->resolve;
        -:  220:    }
        -:  221:    else
        -:  222:    {
    #####:  223:      func_obj = capability_p->reject;
        -:  224:    }
        -:  225:
        -:  226:    /* 7.b. */
    #####:  227:    ecma_value_t resolve = ecma_op_function_call (ecma_get_object_from_value (func_obj),
        -:  228:                                                  ECMA_VALUE_UNDEFINED,
        -:  229:                                                  &call_arg,
        -:  230:                                                  arg_size);
    #####:  231:    JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (resolve));
    #####:  232:    ecma_free_value (resolve);
        -:  233:
    #####:  234:    if (method_id == LIT_MAGIC_STRING_RETURN)
        -:  235:    {
    #####:  236:      ecma_free_value (call_arg);
        -:  237:    }
        -:  238:
        -:  239:    /* 7.c. */
    #####:  240:    return ecma_copy_value (capability_p->header.u.cls.u3.promise);
        -:  241:  }
        -:  242:
        -:  243:  /* 8. */
    #####:  244:  ecma_value_t call_result;
        -:  245:
    #####:  246:  if (!ecma_op_is_callable (method))
        -:  247:  {
    #####:  248:    ecma_free_value (method);
    #####:  249:    call_result = ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_expected_a_function));
        -:  250:  }
        -:  251:  else
        -:  252:  {
    #####:  253:    ecma_object_t *method_func_obj = ecma_get_object_from_value (method);
    #####:  254:    call_result = ecma_op_function_call (method_func_obj, sync_iterator, &call_arg, arg_size);
    #####:  255:    ecma_deref_object (method_func_obj);
        -:  256:  }
        -:  257:
        -:  258:  /* 9. */
    #####:  259:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&call_result, capability_obj_p)))
        -:  260:  {
    #####:  261:    return call_result;
        -:  262:  }
        -:  263:
        -:  264:  /* 10. */
    #####:  265:  if (!ecma_is_value_object (call_result))
        -:  266:  {
    #####:  267:    ecma_free_value (call_result);
        -:  268:
        -:  269:#if JERRY_ERROR_MESSAGES
    #####:  270:    const lit_utf8_byte_t *msg_p = (const lit_utf8_byte_t *) ecma_error_argument_is_not_an_object;
    #####:  271:    lit_utf8_size_t msg_size = (lit_utf8_size_t) ecma_error_argument_is_not_an_object_length;
    #####:  272:    JERRY_ASSERT (lit_zt_utf8_string_size (msg_p) == msg_size);
    #####:  273:    ecma_string_t *error_msg_p = ecma_new_ecma_string_from_ascii (msg_p, msg_size);
        -:  274:#else /* !JERRY_ERROR_MESSAGES */
        -:  275:    ecma_string_t *error_msg_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
        -:  276:#endif /* JERRY_ERROR_MESSAGES */
        -:  277:
    #####:  278:    ecma_object_t *type_error_obj_p = ecma_new_standard_error (JERRY_ERROR_TYPE, error_msg_p);
        -:  279:
        -:  280:#if JERRY_ERROR_MESSAGES
    #####:  281:    ecma_deref_ecma_string (error_msg_p);
        -:  282:#endif /* JERRY_ERROR_MESSAGES */
        -:  283:
    #####:  284:    ecma_value_t type_error = ecma_make_object_value (type_error_obj_p);
        -:  285:
        -:  286:    /* 10.a. */
    #####:  287:    ecma_value_t reject = ecma_op_function_call (ecma_get_object_from_value (capability_p->reject),
        -:  288:                                                 ECMA_VALUE_UNDEFINED,
        -:  289:                                                 &type_error,
        -:  290:                                                 1);
    #####:  291:    JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (reject));
    #####:  292:    ecma_deref_object (type_error_obj_p);
    #####:  293:    ecma_free_value (reject);
        -:  294:
        -:  295:    /* 10.b. */
    #####:  296:    return ecma_copy_value (capability_p->header.u.cls.u3.promise);
        -:  297:  }
        -:  298:
    #####:  299:  ecma_value_t result = ecma_op_async_from_sync_iterator_prototype_continuation (call_result, capability_obj_p);
    #####:  300:  ecma_free_value (call_result);
        -:  301:
    #####:  302:  return result;
        -:  303:} /* ecma_builtin_async_from_sync_iterator_prototype_do */
        -:  304:
        -:  305:/**
        -:  306:  * Dispatcher of the %AsyncFromSyncIteratorPrototype% built-in's routines
        -:  307:  *
        -:  308:  * @return ecma value
        -:  309:  *         Returned value must be freed with ecma_free_value.
        -:  310:  */
        -:  311:ecma_value_t
    #####:  312:ecma_builtin_async_from_sync_iterator_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide
        -:  313:                                                                                               *   routine
        -:  314:                                                                                               *   identifier */
        -:  315:                                                                  ecma_value_t this_arg, /**< 'this' argument value */
        -:  316:                                                                  const ecma_value_t arguments_list_p[], /**< list of
        -:  317:                                                                                                          *   arguments
        -:  318:                                                                                                          *   passed to
        -:  319:                                                                                                          *   routine */
        -:  320:                                                                  uint32_t arguments_number) /**< length of
        -:  321:                                                                                              *   arguments' list */
        -:  322:{
        -:  323:  JERRY_UNUSED (arguments_number);
    #####:  324:  JERRY_ASSERT (ecma_is_value_object (this_arg));
        -:  325:
    #####:  326:  ecma_object_t *this_obj_p = ecma_get_object_from_value (this_arg);
        -:  327:
    #####:  328:  JERRY_ASSERT (ecma_object_class_is (this_obj_p, ECMA_OBJECT_CLASS_ASYNC_FROM_SYNC_ITERATOR));
        -:  329:
    #####:  330:  ecma_async_from_sync_iterator_object_t *iter_p = (ecma_async_from_sync_iterator_object_t *) this_obj_p;
        -:  331:
    #####:  332:  ecma_value_t builtin_promise = ecma_make_object_value (ecma_builtin_get (ECMA_BUILTIN_ID_PROMISE));
    #####:  333:  ecma_object_t *capability_p = ecma_promise_new_capability (builtin_promise, ECMA_VALUE_UNDEFINED);
    #####:  334:  JERRY_ASSERT (capability_p != NULL);
        -:  335:
        -:  336:  ecma_value_t result;
    #####:  337:  ecma_value_t arg = (arguments_number == 0 ? ECMA_VALUE_EMPTY : arguments_list_p[0]);
        -:  338:
    #####:  339:  switch (builtin_routine_id)
        -:  340:  {
    #####:  341:    case ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_NEXT:
        -:  342:    {
    #####:  343:      result = ecma_builtin_async_from_sync_iterator_prototype_next (iter_p, capability_p, arg);
    #####:  344:      break;
        -:  345:    }
    #####:  346:    case ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_RETURN:
        -:  347:    {
    #####:  348:      result = ecma_builtin_async_from_sync_iterator_prototype_do (iter_p, capability_p, arg, LIT_MAGIC_STRING_RETURN);
    #####:  349:      break;
        -:  350:    }
    #####:  351:    case ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_THROW:
        -:  352:    {
    #####:  353:      result = ecma_builtin_async_from_sync_iterator_prototype_do (iter_p, capability_p, arg, LIT_MAGIC_STRING_THROW);
    #####:  354:      break;
        -:  355:    }
    #####:  356:    default:
        -:  357:    {
    #####:  358:      JERRY_UNREACHABLE ();
        -:  359:      break;
        -:  360:    }
        -:  361:  }
        -:  362:
    #####:  363:  ecma_deref_object (capability_p);
        -:  364:
    #####:  365:  return result;
        -:  366:} /* ecma_builtin_async_from_sync_iterator_prototype_dispatch_routine */
        -:  367:
        -:  368:/**
        -:  369: * @}
        -:  370: * @}
        -:  371: * @}
        -:  372: */
        -:  373:
        -:  374:#endif /* JERRY_ESNEXT */
