        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-symbol.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16: #include "ecma-alloc.h"
        -:   17: #include "ecma-builtins.h"
        -:   18: #include "ecma-conversion.h"
        -:   19: #include "ecma-exceptions.h"
        -:   20: #include "ecma-gc.h"
        -:   21: #include "ecma-globals.h"
        -:   22: #include "ecma-helpers.h"
        -:   23: #include "ecma-objects.h"
        -:   24: #include "ecma-symbol-object.h"
        -:   25: #include "ecma-literal-storage.h"
        -:   26: #include "jcontext.h"
        -:   27: #include "jrt.h"
        -:   28:
        -:   29:#if JERRY_ESNEXT
        -:   30:
        -:   31:#define ECMA_BUILTINS_INTERNAL
        -:   32:#include "ecma-builtins-internal.h"
        -:   33:
        -:   34:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-symbol.inc.h"
        -:   35:#define BUILTIN_UNDERSCORED_ID symbol
        -:   36:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   37:
        -:   38:/** \addtogroup ecma ECMA
        -:   39: * @{
        -:   40: *
        -:   41: * \addtogroup ecmabuiltins
        -:   42: * @{
        -:   43: *
        -:   44: * \addtogroup symbol ECMA Symbol object built-in
        -:   45: * @{
        -:   46: */
        -:   47:
        -:   48:/**
        -:   49: * Handle calling [[Call]] of built-in Symbol object.
        -:   50: *
        -:   51: * @return ecma value
        -:   52: */
        -:   53:ecma_value_t
    #####:   54:ecma_builtin_symbol_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   55:                                   uint32_t arguments_list_len) /**< number of arguments */
        -:   56:{
    #####:   57:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   58:
    #####:   59:  return ecma_op_create_symbol (arguments_list_p, arguments_list_len);
        -:   60:} /* ecma_builtin_symbol_dispatch_call */
        -:   61:
        -:   62:/**
        -:   63: * Handle calling [[Construct]] of built-in Symbol object.
        -:   64: *
        -:   65: * Symbol constructor is not intended to be used
        -:   66: * with the new operator or to be subclassed.
        -:   67: *
        -:   68: * See also:
        -:   69: *          ECMA-262 v6, 19.4.1
        -:   70: * @return ecma value
        -:   71: */
        -:   72:ecma_value_t
    #####:   73:ecma_builtin_symbol_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   74:                                        uint32_t arguments_list_len) /**< number of arguments */
        -:   75:{
    #####:   76:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   77:
    #####:   78:  return ecma_raise_type_error (ECMA_ERR_MSG ("Symbol is not a constructor"));
        -:   79:} /* ecma_builtin_symbol_dispatch_construct */
        -:   80:
        -:   81:/**
        -:   82: * Helper function for Symbol object's 'for' and `keyFor`
        -:   83: * routines common parts
        -:   84: *
        -:   85: * @return ecma value
        -:   86: *         Returned value must be freed with ecma_free_value.
        -:   87: */
        -:   88:static ecma_value_t
    #####:   89:ecma_builtin_symbol_for_helper (ecma_value_t value_to_find) /**< symbol or ecma-string */
        -:   90:{
        -:   91:  ecma_string_t *string_p;
        -:   92:
    #####:   93:  bool is_for = ecma_is_value_string (value_to_find);
        -:   94:
    #####:   95:  if (is_for)
        -:   96:  {
    #####:   97:    string_p = ecma_get_string_from_value (value_to_find);
        -:   98:  }
        -:   99:  else
        -:  100:  {
    #####:  101:    string_p = ecma_get_symbol_from_value (value_to_find);
        -:  102:  }
        -:  103:
    #####:  104:  jmem_cpointer_t symbol_list_cp = JERRY_CONTEXT (symbol_list_first_cp);
    #####:  105:  jmem_cpointer_t *empty_cpointer_p = NULL;
        -:  106:
    #####:  107:  while (symbol_list_cp != JMEM_CP_NULL)
        -:  108:  {
    #####:  109:    ecma_lit_storage_item_t *symbol_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t,
        -:  110:                                                                           symbol_list_cp);
        -:  111:
    #####:  112:    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:  113:    {
    #####:  114:      if (symbol_list_p->values[i] != JMEM_CP_NULL)
        -:  115:      {
    #####:  116:        ecma_string_t *value_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_string_t,
        -:  117:                                                               symbol_list_p->values[i]);
        -:  118:
    #####:  119:        if (is_for)
        -:  120:        {
    #####:  121:          ecma_value_t symbol_desc = ecma_get_symbol_description (value_p);
        -:  122:
    #####:  123:          if (ecma_is_value_undefined (symbol_desc))
        -:  124:          {
    #####:  125:            ecma_ref_ecma_string (value_p);
    #####:  126:            return ecma_make_symbol_value (value_p);
        -:  127:          }
        -:  128:
    #####:  129:          ecma_string_t *symbol_desc_p = ecma_get_string_from_value (symbol_desc);
        -:  130:
    #####:  131:          if (ecma_compare_ecma_strings (symbol_desc_p, string_p))
        -:  132:          {
        -:  133:            /* The current symbol's descriptor matches with the value_to_find,
        -:  134:               so the value is no longer needed. */
    #####:  135:            ecma_deref_ecma_string (string_p);
    #####:  136:            return ecma_copy_value (ecma_make_symbol_value (value_p));
        -:  137:          }
        -:  138:        }
        -:  139:        else
        -:  140:        {
    #####:  141:          if (string_p == value_p)
        -:  142:          {
    #####:  143:            ecma_value_t symbol_desc = ecma_get_symbol_description (string_p);
        -:  144:
    #####:  145:            if (ecma_is_value_undefined (symbol_desc))
        -:  146:            {
    #####:  147:              return symbol_desc;
        -:  148:            }
        -:  149:
    #####:  150:            ecma_string_t *symbol_desc_p = ecma_get_string_from_value (symbol_desc);
    #####:  151:            ecma_ref_ecma_string (symbol_desc_p);
    #####:  152:            return symbol_desc;
        -:  153:          }
        -:  154:        }
        -:  155:      }
        -:  156:      else
        -:  157:      {
    #####:  158:        if (empty_cpointer_p == NULL)
        -:  159:        {
    #####:  160:          empty_cpointer_p = symbol_list_p->values + i;
        -:  161:        }
        -:  162:      }
        -:  163:    }
        -:  164:
    #####:  165:    symbol_list_cp = symbol_list_p->next_cp;
        -:  166:  }
        -:  167:
    #####:  168:  if (!is_for)
        -:  169:  {
    #####:  170:    return ECMA_VALUE_UNDEFINED;
        -:  171:  }
        -:  172:
        -:  173:  /* There was no matching, sp a new symbol should be added the the global symbol list. The symbol creation requires
        -:  174:     an extra reference to the descriptor string, but this reference has already been added. */
    #####:  175:  ecma_string_t *new_symbol_p = ecma_new_symbol_from_descriptor_string (value_to_find);
        -:  176:
        -:  177:  jmem_cpointer_t result;
    #####:  178:  JMEM_CP_SET_NON_NULL_POINTER (result, new_symbol_p);
        -:  179:
    #####:  180:  if (empty_cpointer_p != NULL)
        -:  181:  {
    #####:  182:    *empty_cpointer_p = result;
    #####:  183:    return ecma_copy_value (ecma_make_symbol_value (new_symbol_p));
        -:  184:  }
        -:  185:
        -:  186:  ecma_lit_storage_item_t *new_item_p;
    #####:  187:  new_item_p = (ecma_lit_storage_item_t *) jmem_pools_alloc (sizeof (ecma_lit_storage_item_t));
        -:  188:
    #####:  189:  new_item_p->values[0] = result;
    #####:  190:  for (int i = 1; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:  191:  {
    #####:  192:    new_item_p->values[i] = JMEM_CP_NULL;
        -:  193:  }
        -:  194:
    #####:  195:  new_item_p->next_cp = JERRY_CONTEXT (symbol_list_first_cp);
    #####:  196:  JMEM_CP_SET_NON_NULL_POINTER (JERRY_CONTEXT (symbol_list_first_cp), new_item_p);
        -:  197:
    #####:  198:  return ecma_copy_value (ecma_make_symbol_value (new_symbol_p));
        -:  199:} /* ecma_builtin_symbol_for_helper */
        -:  200:
        -:  201:/**
        -:  202: * The Symbol object's 'for' routine
        -:  203: *
        -:  204: * See also:
        -:  205: *          ECMA-262 v6, 19.4.2.1
        -:  206: *
        -:  207: * @return ecma value
        -:  208: *         Returned value must be freed with ecma_free_value.
        -:  209: */
        -:  210:static ecma_value_t
    #####:  211:ecma_builtin_symbol_for (ecma_value_t this_arg, /**< this argument */
        -:  212:                         ecma_value_t key) /**< key string */
        -:  213:{
        -:  214:  JERRY_UNUSED (this_arg);
    #####:  215:  ecma_string_t *string_desc_p = ecma_op_to_string (key);
        -:  216:
        -:  217:  /* 1. */
    #####:  218:  if (JERRY_UNLIKELY (string_desc_p == NULL))
        -:  219:  {
        -:  220:    /* 2. */
    #####:  221:    return ECMA_VALUE_ERROR;
        -:  222:  }
        -:  223:
    #####:  224:  return ecma_builtin_symbol_for_helper (ecma_make_string_value (string_desc_p));
        -:  225:} /* ecma_builtin_symbol_for */
        -:  226:
        -:  227:/**
        -:  228: * The Symbol object's 'keyFor' routine
        -:  229: *
        -:  230: * See also:
        -:  231: *          ECMA-262 v6, 19.4.2.
        -:  232: *
        -:  233: * @return ecma value
        -:  234: *         Returned value must be freed with ecma_free_value.
        -:  235: */
        -:  236:static ecma_value_t
    #####:  237:ecma_builtin_symbol_key_for (ecma_value_t this_arg, /**< this argument */
        -:  238:                             ecma_value_t symbol) /**< symbol */
        -:  239:{
        -:  240:  JERRY_UNUSED (this_arg);
        -:  241:
        -:  242:  /* 1. */
    #####:  243:  if (!ecma_is_value_symbol (symbol))
        -:  244:  {
    #####:  245:    return ecma_raise_type_error (ECMA_ERR_MSG ("The given argument is not a Symbol"));
        -:  246:  }
        -:  247:
        -:  248:  /* 2-4. */
    #####:  249:  return ecma_builtin_symbol_for_helper (symbol);
        -:  250:} /* ecma_builtin_symbol_key_for */
        -:  251:
        -:  252:/**
        -:  253: * @}
        -:  254: * @}
        -:  255: * @}
        -:  256: */
        -:  257:
        -:  258:#endif /* JERRY_ESNEXT */
