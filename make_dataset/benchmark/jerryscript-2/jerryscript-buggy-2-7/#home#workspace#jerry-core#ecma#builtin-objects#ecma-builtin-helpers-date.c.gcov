        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-helpers-date.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <math.h>
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-builtin-helpers.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-objects.h"
        -:   24:#include "lit-char-helpers.h"
        -:   25:
        -:   26:#if JERRY_BUILTIN_DATE
        -:   27:
        -:   28:/** \addtogroup ecma ECMA
        -:   29: * @{
        -:   30: *
        -:   31: * \addtogroup ecmabuiltinhelpers ECMA builtin helper operations
        -:   32: * @{
        -:   33: */
        -:   34:
        -:   35:/**
        -:   36: * Day names
        -:   37: */
        -:   38:const char day_names_p[7][3] =
        -:   39:{
        -:   40:  "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
        -:   41:};
        -:   42:
        -:   43:/**
        -:   44: * Month names
        -:   45: */
        -:   46:const char month_names_p[12][3] =
        -:   47:{
        -:   48:  "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
        -:   49:};
        -:   50:
        -:   51:/**
        -:   52: * Calculate the elapsed days since Unix Epoch
        -:   53: *
        -:   54: * @return elapsed days since Unix Epoch
        -:   55: */
        -:   56:extern inline int32_t JERRY_ATTR_ALWAYS_INLINE
    #####:   57:ecma_date_day_from_time (ecma_number_t time) /**< time value */
        -:   58:{
    #####:   59:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:   60:
    #####:   61:  if (time < 0)
        -:   62:  {
    #####:   63:    time -= ECMA_DATE_MS_PER_DAY - 1;
        -:   64:  }
        -:   65:
    #####:   66:  return (int32_t) (time / ECMA_DATE_MS_PER_DAY);
        -:   67:} /* ecma_date_day_from_time */
        -:   68:
        -:   69:/**
        -:   70: * Abstract operation: DayFromYear
        -:   71: *
        -:   72: *  See also:
        -:   73: *          ECMA-262 v11, 20.4.1.3
        -:   74: *
        -:   75: * @return first of day in the given year
        -:   76: */
        -:   77:static int32_t
    #####:   78:ecma_date_day_from_year (int32_t year) /**< year value */
        -:   79:{
    #####:   80:  if (JERRY_LIKELY (year >= 1970))
        -:   81:  {
    #####:   82:    return (int32_t) (365 * (year - 1970)
    #####:   83:                      + ((year - 1969) / 4)
    #####:   84:                      - ((year - 1901) / 100)
    #####:   85:                      + ((year - 1601) / 400));
        -:   86:  }
        -:   87:
    #####:   88:  return (int32_t) (365 * (year - 1970)
    #####:   89:                    + floor ((year - 1969) / 4.0)
    #####:   90:                    - floor ((year - 1901) / 100.0)
    #####:   91:                    + floor ((year - 1601) / 400.0));
        -:   92:} /* ecma_date_day_from_year */
        -:   93:
        -:   94:/**
        -:   95: * Abstract operation: DaysInYear
        -:   96: *
        -:   97: *  See also:
        -:   98: *          ECMA-262 v11, 20.4.1.3
        -:   99: *
        -:  100: * @return number of days in the given year
        -:  101: */
        -:  102:static int
    #####:  103:ecma_date_days_in_year (int32_t year) /**< year */
        -:  104:{
    #####:  105:  if (year % 4 != 0
    #####:  106:      || (year % 100 == 0 && (year % 400 != 0)))
        -:  107:  {
    #####:  108:    return ECMA_DATE_DAYS_IN_YEAR;
        -:  109:  }
        -:  110:
    #####:  111:  return ECMA_DATE_DAYS_IN_LEAP_YEAR;
        -:  112:} /* ecma_date_days_in_year */
        -:  113:
        -:  114:/**
        -:  115: * Abstract operation: InLeapYear
        -:  116: *
        -:  117: *  See also:
        -:  118: *          ECMA-262 v11, 20.4.1.3
        -:  119: *
        -:  120: * @return 1 - if the year is leap
        -:  121: *         0 - otherwise
        -:  122: */
        -:  123:static int32_t
    #####:  124:ecma_date_in_leap_year (int32_t year) /**< time value */
        -:  125:{
    #####:  126:  return ecma_date_days_in_year (year) - ECMA_DATE_DAYS_IN_YEAR;
        -:  127:} /* ecma_date_in_leap_year */
        -:  128:
        -:  129:/**
        -:  130: * First days of months in normal and leap years
        -:  131: */
        -:  132:static const uint16_t first_day_in_month[2][12] =
        -:  133:{
        -:  134:  {
        -:  135:    0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, /* normal year */
        -:  136:  }
        -:  137:  ,
        -:  138:  {
        -:  139:    0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335  /* leap year */
        -:  140:  }
        -:  141:};
        -:  142:
        -:  143:/**
        -:  144: * Abstract operation: YearFromTime
        -:  145: *
        -:  146: *  See also:
        -:  147: *          ECMA-262 v11, 20.4.1.3
        -:  148: *
        -:  149: * @return year corresponds to the given time
        -:  150: */
        -:  151:int32_t
    #####:  152:ecma_date_year_from_time (ecma_number_t time) /**< time value */
        -:  153:{
    #####:  154:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  155:
    #####:  156:  int32_t approx = (int32_t) (floor (time / ECMA_DATE_MS_PER_DAY / 365.2425) + 1970);
    #####:  157:  int64_t year_ms = ecma_date_day_from_year (approx) * ((int64_t) ECMA_DATE_MS_PER_DAY);
        -:  158:
    #####:  159:  if ((ecma_number_t) year_ms > time)
        -:  160:  {
    #####:  161:    approx--;
        -:  162:  }
        -:  163:
    #####:  164:  if ((ecma_number_t) (year_ms + ecma_date_days_in_year (approx) * ((int64_t) ECMA_DATE_MS_PER_DAY)) <= time)
        -:  165:  {
    #####:  166:    approx++;
        -:  167:  }
        -:  168:
    #####:  169:  return approx;
        -:  170:} /* ecma_date_year_from_time */
        -:  171:
        -:  172:/**
        -:  173: * Abstract operation: MonthFromTime
        -:  174: *
        -:  175: *  See also:
        -:  176: *          ECMA-262 v11, 20.4.1.4
        -:  177: *
        -:  178: * @return month corresponds to the given time
        -:  179: */
        -:  180:int32_t
    #####:  181:ecma_date_month_from_time (ecma_number_t time) /**< time value */
        -:  182:{
    #####:  183:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  184:
    #####:  185:  int32_t year = ecma_date_year_from_time (time);
    #####:  186:  int32_t day_within_year = ecma_date_day_from_time (time) - ecma_date_day_from_year (year);
        -:  187:
    #####:  188:  JERRY_ASSERT (day_within_year >= 0 && day_within_year < ECMA_DATE_DAYS_IN_LEAP_YEAR);
        -:  189:
    #####:  190:  int32_t in_leap_year = ecma_date_in_leap_year (year);
        -:  191:
    #####:  192:  for (int i = 1; i < 12; i++)
        -:  193:  {
    #####:  194:    if (day_within_year < first_day_in_month[in_leap_year][i])
        -:  195:    {
    #####:  196:      return i - 1;
        -:  197:    }
        -:  198:  }
        -:  199:
    #####:  200:  return 11;
        -:  201:} /* ecma_date_month_from_time */
        -:  202:
        -:  203:/**
        -:  204: * Abstract operation: DateFromTime
        -:  205: *
        -:  206: *  See also:
        -:  207: *          ECMA-262 v11, 20.4.1.4
        -:  208: *
        -:  209: * @return date corresponds to the given time
        -:  210: */
        -:  211:int32_t
    #####:  212:ecma_date_date_from_time (ecma_number_t time) /**< time value */
        -:  213:{
    #####:  214:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  215:
    #####:  216:  int32_t year = ecma_date_year_from_time (time);
    #####:  217:  int32_t day_within_year = ecma_date_day_from_time (time) - ecma_date_day_from_year (year);
        -:  218:
    #####:  219:  JERRY_ASSERT (day_within_year >= 0 && day_within_year < ECMA_DATE_DAYS_IN_LEAP_YEAR);
        -:  220:
    #####:  221:  int32_t in_leap_year = ecma_date_in_leap_year (year);
        -:  222:
    #####:  223:  int32_t month = 11;
        -:  224:
    #####:  225:  for (int i = 1; i < 12; i++)
        -:  226:  {
    #####:  227:    if (day_within_year < first_day_in_month[in_leap_year][i])
        -:  228:    {
    #####:  229:      month = i - 1;
    #####:  230:      break;
        -:  231:    }
        -:  232:  }
        -:  233:
    #####:  234:  return day_within_year + 1 - first_day_in_month[in_leap_year][month];
        -:  235:} /* ecma_date_date_from_time */
        -:  236:
        -:  237:/**
        -:  238: * Abstract operation: WeekDay
        -:  239: *
        -:  240: *  See also:
        -:  241: *          ECMA-262 v11, 20.4.1.4
        -:  242: *
        -:  243: * @return weekday corresponds to the given time
        -:  244: */
        -:  245:int32_t
    #####:  246:ecma_date_week_day (ecma_number_t time) /**< time value */
        -:  247:{
    #####:  248:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  249:
    #####:  250:  int32_t day = ecma_date_day_from_time (time);
        -:  251:
    #####:  252:  int week_day = (day + 4) % 7;
        -:  253:
    #####:  254:  return week_day >= 0 ? week_day : week_day + 7;
        -:  255:} /* ecma_date_week_day */
        -:  256:
        -:  257:/**
        -:  258: * Abstract operation: LocalTZA
        -:  259: *
        -:  260: *  See also:
        -:  261: *          ECMA-262 v11, 20.4.1.7
        -:  262: *
        -:  263: * @return local time zone adjustment
        -:  264: */
        -:  265:extern inline ecma_number_t JERRY_ATTR_ALWAYS_INLINE
    #####:  266:ecma_date_local_time_zone_adjustment (ecma_number_t time) /**< time value */
        -:  267:{
    #####:  268:  return jerry_port_get_local_time_zone_adjustment (time, true);
        -:  269:} /* ecma_date_local_time_zone_adjustment */
        -:  270:
        -:  271:/**
        -:  272: * Abstract operation: UTC
        -:  273: *
        -:  274: *  See also:
        -:  275: *          ECMA-262 v11, 20.4.1.9
        -:  276: *
        -:  277: * @return UTC time
        -:  278: */
        -:  279:ecma_number_t
    #####:  280:ecma_date_utc (ecma_number_t time) /**< time value */
        -:  281:{
    #####:  282:  return time - jerry_port_get_local_time_zone_adjustment (time, false);
        -:  283:} /* ecma_date_utc */
        -:  284:
        -:  285:/**
        -:  286: * Calculate the time component from the given time
        -:  287: *
        -:  288: * @return time component of the given time
        -:  289: */
        -:  290:int32_t
    #####:  291:ecma_date_time_in_day_from_time (ecma_number_t time) /**< time value */
        -:  292:{
    #####:  293:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  294:
    #####:  295:  ecma_number_t day = ecma_date_day_from_time (time);
        -:  296:
    #####:  297:  return (int32_t) (time - (day * ECMA_DATE_MS_PER_DAY));
        -:  298:} /* ecma_date_time_in_day_from_time */
        -:  299:
        -:  300:/**
        -:  301: * Abstract operation: HourFromTime
        -:  302: *
        -:  303: *  See also:
        -:  304: *          ECMA-262 v11, 20.4.1.10
        -:  305: *
        -:  306: * @return hours component of the given time
        -:  307: */
        -:  308:int32_t
    #####:  309:ecma_date_hour_from_time (ecma_number_t time) /**< time value */
        -:  310:{
    #####:  311:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  312:
    #####:  313:  int32_t time_in_day = ecma_date_time_in_day_from_time (time);
        -:  314:
    #####:  315:  return (int32_t) (time_in_day / ECMA_DATE_MS_PER_HOUR);
        -:  316:} /* ecma_date_hour_from_time */
        -:  317:
        -:  318:/**
        -:  319: * Abstract operation: HourFromTime
        -:  320: *
        -:  321: *  See also:
        -:  322: *          ECMA-262 v11, 20.4.1.10
        -:  323: *
        -:  324: * @return minutes component of the given time
        -:  325: */
        -:  326:int32_t
    #####:  327:ecma_date_min_from_time (ecma_number_t time) /**< time value */
        -:  328:{
    #####:  329:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  330:
    #####:  331:  int32_t time_in_day = ecma_date_time_in_day_from_time (time);
        -:  332:
    #####:  333:  return ((int32_t) (time_in_day / ECMA_DATE_MS_PER_MINUTE)) % ECMA_DATE_MINUTES_PER_HOUR;
        -:  334:} /* ecma_date_min_from_time */
        -:  335:
        -:  336:/**
        -:  337: * Abstract operation: HourFromTime
        -:  338: *
        -:  339: *  See also:
        -:  340: *          ECMA-262 v11, 20.4.1.10
        -:  341: *
        -:  342: * @return seconds component of the given time
        -:  343: */
        -:  344:int32_t
    #####:  345:ecma_date_sec_from_time (ecma_number_t time) /**< time value */
        -:  346:{
    #####:  347:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  348:
    #####:  349:  int32_t time_in_day = ecma_date_time_in_day_from_time (time);
        -:  350:
    #####:  351:  return ((int32_t) (time_in_day / ECMA_DATE_MS_PER_SECOND)) % ECMA_DATE_SECONDS_PER_MINUTE;
        -:  352:} /* ecma_date_sec_from_time */
        -:  353:
        -:  354:/**
        -:  355: * Abstract operation: HourFromTime
        -:  356: *
        -:  357: *  See also:
        -:  358: *          ECMA-262 v11, 20.4.1.10
        -:  359: *
        -:  360: * @return milliseconds component of the given time
        -:  361: */
        -:  362:int32_t
    #####:  363:ecma_date_ms_from_time (ecma_number_t time) /**< time value */
        -:  364:{
    #####:  365:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  366:
    #####:  367:  int32_t time_in_day = ecma_date_time_in_day_from_time (time);
        -:  368:
    #####:  369:  return (int32_t) (time_in_day % ECMA_DATE_MS_PER_SECOND);
        -:  370:} /* ecma_date_ms_from_time */
        -:  371:
        -:  372:/**
        -:  373: * Abstract operation: MakeTime
        -:  374: *
        -:  375: *  See also:
        -:  376: *          ECMA-262 v11, 20.4.1.11
        -:  377: *
        -:  378: * @return constructed time in milliseconds
        -:  379: */
        -:  380:ecma_number_t
    #####:  381:ecma_date_make_time (ecma_number_t hour, /**< hour value */
        -:  382:                     ecma_number_t min, /**< minute value */
        -:  383:                     ecma_number_t sec, /**< second value */
        -:  384:                     ecma_number_t ms) /**< millisecond value */
        -:  385:{
    #####:  386:  if (!ecma_number_is_finite (hour)
    #####:  387:      || !ecma_number_is_finite (min)
    #####:  388:      || !ecma_number_is_finite (sec)
    #####:  389:      || !ecma_number_is_finite (ms))
        -:  390:  {
    #####:  391:    return ecma_number_make_nan ();
        -:  392:  }
        -:  393:
    #####:  394:  ecma_number_t h = ecma_number_trunc (hour);
    #####:  395:  ecma_number_t m = ecma_number_trunc (min);
    #####:  396:  ecma_number_t s = ecma_number_trunc (sec);
    #####:  397:  ecma_number_t milli = ecma_number_trunc (ms);
        -:  398:
    #####:  399:  return (ecma_number_t) ((h * ECMA_DATE_MS_PER_HOUR
    #####:  400:                          + m * ECMA_DATE_MS_PER_MINUTE
    #####:  401:                          + s * ECMA_DATE_MS_PER_SECOND
    #####:  402:                          + milli));
        -:  403:} /* ecma_date_make_time */
        -:  404:
        -:  405:/**
        -:  406: * Abstract operation: MakeDay
        -:  407: *
        -:  408: *  See also:
        -:  409: *          ECMA-262 v11, 20.4.1.12
        -:  410: *
        -:  411: * @return elpased number of days since Unix Epoch
        -:  412: */
        -:  413:ecma_number_t
    #####:  414:ecma_date_make_day (ecma_number_t year, /**< year value */
        -:  415:                    ecma_number_t month, /**< month value */
        -:  416:                    ecma_number_t date) /**< date value */
        -:  417:{
        -:  418:  /* 1. */
    #####:  419:  if (!ecma_number_is_finite (year)
    #####:  420:      || !ecma_number_is_finite (month)
    #####:  421:      || !ecma_number_is_finite (date)
    #####:  422:      || fabs (year) > INT32_MAX)
        -:  423:  {
    #####:  424:    return ecma_number_make_nan ();
        -:  425:  }
        -:  426:
        -:  427:  /* 2., 3., 4. */
    #####:  428:  int32_t y = (int32_t) (year);
    #####:  429:  ecma_number_t m = ecma_number_trunc (month);
    #####:  430:  ecma_number_t dt = ecma_number_trunc (date);
        -:  431:
        -:  432:  /* 5. */
    #####:  433:  int32_t ym = y + (int32_t) (floor (m / 12));
        -:  434:
        -:  435:  /* 6. */
    #####:  436:  int32_t mn = (int32_t) fmod (m, 12);
        -:  437:
    #####:  438:  if (mn < 0)
        -:  439:  {
    #####:  440:    mn += 12;
        -:  441:  }
        -:  442:
        -:  443:  /* 7. */
    #####:  444:  ecma_number_t days = (ecma_date_day_from_year (ym)
    #####:  445:                        + first_day_in_month[ecma_date_in_leap_year (ym)][mn]
    #####:  446:                        + (dt - 1));
    #####:  447:  return days * ECMA_DATE_MS_PER_DAY;
        -:  448:} /* ecma_date_make_day */
        -:  449:
        -:  450:/**
        -:  451: * Abstract operation: MakeTime
        -:  452: *
        -:  453: *  See also:
        -:  454: *          ECMA-262 v11, 20.4.1.13
        -:  455: *
        -:  456: * @return elpased number of milliceconds since Unix Epoch
        -:  457: */
        -:  458:ecma_number_t
    #####:  459:ecma_date_make_date (ecma_number_t day, /**< day value */
        -:  460:                     ecma_number_t time) /**< time value */
        -:  461:{
    #####:  462:  if (!ecma_number_is_finite (day)
    #####:  463:      || !ecma_number_is_finite (time))
        -:  464:  {
    #####:  465:    return ecma_number_make_nan ();
        -:  466:  }
        -:  467:
    #####:  468:  return day + time;
        -:  469:} /* ecma_date_make_date */
        -:  470:
        -:  471:/**
        -:  472: * Abstract operation: TimeClip
        -:  473: *
        -:  474: *  See also:
        -:  475: *          ECMA-262 v11, 20.4.1.14
        -:  476: *
        -:  477: * @return elpased number of milliceconds since Unix Epoch
        -:  478: */
        -:  479:ecma_number_t
    #####:  480:ecma_date_time_clip (ecma_number_t time) /**< time value */
        -:  481:{
    #####:  482:  if (!ecma_number_is_finite (time)
    #####:  483:      || fabs (time) > ECMA_DATE_MAX_VALUE)
        -:  484:  {
    #####:  485:    return ecma_number_make_nan ();
        -:  486:  }
        -:  487:
    #####:  488:  return ecma_number_trunc (time);
        -:  489:} /* ecma_date_time_clip */
        -:  490:
        -:  491:/**
        -:  492: * Common function to convert date to string.
        -:  493: *
        -:  494: * @return ecma value
        -:  495: *         Returned value must be freed with ecma_free_value.
        -:  496: */
        -:  497:static ecma_value_t
    #####:  498:ecma_date_to_string_format (ecma_number_t datetime_number, /**< datetime */
        -:  499:                            const char *format_p) /**< format buffer */
    #####:  500:{
    #####:  501:  const uint32_t date_buffer_length = 37;
    #####:  502:  JERRY_VLA (lit_utf8_byte_t, date_buffer, date_buffer_length);
        -:  503:
    #####:  504:  lit_utf8_byte_t *dest_p = date_buffer;
        -:  505:
    #####:  506:  while (*format_p != LIT_CHAR_NULL)
        -:  507:  {
    #####:  508:    if (*format_p != LIT_CHAR_DOLLAR_SIGN)
        -:  509:    {
    #####:  510:      *dest_p++ = (lit_utf8_byte_t) *format_p++;
    #####:  511:      continue;
        -:  512:    }
        -:  513:
    #####:  514:    format_p++;
        -:  515:
    #####:  516:    const char *str_p = NULL;
    #####:  517:    int32_t number = 0;
    #####:  518:    int32_t number_length = 0;
        -:  519:
    #####:  520:    switch (*format_p)
        -:  521:    {
    #####:  522:      case LIT_CHAR_UPPERCASE_Y: /* Year. */
        -:  523:      {
    #####:  524:        number = ecma_date_year_from_time (datetime_number);
        -:  525:
    #####:  526:        if (number >= 100000 || number <= -100000)
        -:  527:        {
    #####:  528:          number_length = 6;
        -:  529:        }
    #####:  530:        else if (number >= 10000 || number <= -10000)
        -:  531:        {
    #####:  532:          number_length = 5;
        -:  533:        }
        -:  534:        else
        -:  535:        {
    #####:  536:          number_length = 4;
        -:  537:        }
    #####:  538:        break;
        -:  539:      }
    #####:  540:      case LIT_CHAR_LOWERCASE_Y: /* ISO Year: -000001, 0000, 0001, 9999, +012345 */
        -:  541:      {
    #####:  542:        number = ecma_date_year_from_time (datetime_number);
    #####:  543:        if (0 <= number && number <= 9999)
        -:  544:        {
    #####:  545:          number_length = 4;
        -:  546:        }
        -:  547:        else
        -:  548:        {
    #####:  549:          number_length = 6;
        -:  550:        }
    #####:  551:        break;
        -:  552:      }
    #####:  553:      case LIT_CHAR_UPPERCASE_M: /* Month. */
        -:  554:      {
    #####:  555:        int32_t month = ecma_date_month_from_time (datetime_number);
        -:  556:
    #####:  557:        JERRY_ASSERT (month >= 0 && month <= 11);
        -:  558:
    #####:  559:        str_p = month_names_p[month];
    #####:  560:        break;
        -:  561:      }
    #####:  562:      case LIT_CHAR_UPPERCASE_O: /* Month as number. */
        -:  563:      {
        -:  564:        /* The 'ecma_date_month_from_time' (ECMA 262 v5, 15.9.1.4) returns a
        -:  565:         * number from 0 to 11, but we have to print the month from 1 to 12
        -:  566:         * for ISO 8601 standard (ECMA 262 v5, 15.9.1.15). */
    #####:  567:        number = ecma_date_month_from_time (datetime_number) + 1;
    #####:  568:        number_length = 2;
    #####:  569:        break;
        -:  570:      }
    #####:  571:      case LIT_CHAR_UPPERCASE_D: /* Day. */
        -:  572:      {
    #####:  573:        number = ecma_date_date_from_time (datetime_number);
    #####:  574:        number_length = 2;
    #####:  575:        break;
        -:  576:      }
    #####:  577:      case LIT_CHAR_UPPERCASE_W: /* Day of week. */
        -:  578:      {
    #####:  579:        int32_t day = ecma_date_week_day (datetime_number);
        -:  580:
    #####:  581:        JERRY_ASSERT (day >= 0 && day <= 6);
        -:  582:
    #####:  583:        str_p = day_names_p[day];
    #####:  584:        break;
        -:  585:      }
    #####:  586:      case LIT_CHAR_LOWERCASE_H: /* Hour. */
        -:  587:      {
    #####:  588:        number = ecma_date_hour_from_time (datetime_number);
    #####:  589:        number_length = 2;
    #####:  590:        break;
        -:  591:      }
    #####:  592:      case LIT_CHAR_LOWERCASE_M: /* Minutes. */
        -:  593:      {
    #####:  594:        number = ecma_date_min_from_time (datetime_number);
    #####:  595:        number_length = 2;
    #####:  596:        break;
        -:  597:      }
    #####:  598:      case LIT_CHAR_LOWERCASE_S: /* Seconds. */
        -:  599:      {
    #####:  600:        number = ecma_date_sec_from_time (datetime_number);
    #####:  601:        number_length = 2;
    #####:  602:        break;
        -:  603:      }
    #####:  604:      case LIT_CHAR_LOWERCASE_I: /* Milliseconds. */
        -:  605:      {
    #####:  606:        number = ecma_date_ms_from_time (datetime_number);
    #####:  607:        number_length = 3;
    #####:  608:        break;
        -:  609:      }
    #####:  610:      case LIT_CHAR_LOWERCASE_Z: /* Time zone hours part. */
        -:  611:      {
    #####:  612:        int32_t time_zone = (int32_t) ecma_date_local_time_zone_adjustment (datetime_number);
        -:  613:
    #####:  614:        if (time_zone >= 0)
        -:  615:        {
    #####:  616:          *dest_p++ = LIT_CHAR_PLUS;
        -:  617:        }
        -:  618:        else
        -:  619:        {
    #####:  620:          *dest_p++ = LIT_CHAR_MINUS;
    #####:  621:          time_zone = -time_zone;
        -:  622:        }
        -:  623:
    #####:  624:        number = time_zone / ECMA_DATE_MS_PER_HOUR;
    #####:  625:        number_length = 2;
    #####:  626:        break;
        -:  627:      }
    #####:  628:      default:
        -:  629:      {
    #####:  630:        JERRY_ASSERT (*format_p == LIT_CHAR_UPPERCASE_Z); /* Time zone minutes part. */
        -:  631:
    #####:  632:        int32_t time_zone = (int32_t) ecma_date_local_time_zone_adjustment (datetime_number);
        -:  633:
    #####:  634:        if (time_zone < 0)
        -:  635:        {
    #####:  636:          time_zone = -time_zone;
        -:  637:        }
        -:  638:
    #####:  639:        number = (time_zone % ECMA_DATE_MS_PER_HOUR) / ECMA_DATE_MS_PER_MINUTE;
    #####:  640:        number_length = 2;
    #####:  641:        break;
        -:  642:      }
        -:  643:    }
        -:  644:
    #####:  645:    format_p++;
        -:  646:
    #####:  647:    if (str_p != NULL)
        -:  648:    {
        -:  649:      /* Print string values: month or day name which is always 3 characters */
    #####:  650:      memcpy (dest_p, str_p, 3);
    #####:  651:      dest_p += 3;
    #####:  652:      continue;
        -:  653:    }
        -:  654:
        -:  655:    /* Print right aligned number values. */
    #####:  656:    JERRY_ASSERT (number_length > 0);
        -:  657:
    #####:  658:    if (number < 0)
        -:  659:    {
    #####:  660:      number = -number;
    #####:  661:      *dest_p++ = '-';
        -:  662:    }
    #####:  663:    else if (*(format_p - 1) == LIT_CHAR_LOWERCASE_Y && number_length == 6)
        -:  664:    {
        -:  665:      /* positive sign is compulsory for extended years */
    #####:  666:      *dest_p++ = '+';
        -:  667:    }
        -:  668:
    #####:  669:    dest_p += number_length;
    #####:  670:    lit_utf8_byte_t *buffer_p = dest_p;
        -:  671:
        -:  672:    do
        -:  673:    {
    #####:  674:      buffer_p--;
    #####:  675:      *buffer_p = (lit_utf8_byte_t) ((number % 10) + (int32_t) LIT_CHAR_0);
    #####:  676:      number /= 10;
        -:  677:    }
    #####:  678:    while (--number_length);
        -:  679:  }
        -:  680:
    #####:  681:  JERRY_ASSERT (dest_p <= date_buffer + date_buffer_length);
        -:  682:
    #####:  683:  return ecma_make_string_value (ecma_new_ecma_string_from_ascii (date_buffer,
    #####:  684:                                                                 (lit_utf8_size_t) (dest_p - date_buffer)));
        -:  685:} /* ecma_date_to_string_format */
        -:  686:
        -:  687:/**
        -:  688: * Common function to create a time zone specific string from a numeric value.
        -:  689: *
        -:  690: * Used by:
        -:  691: *        - The Date routine.
        -:  692: *        - The Date.prototype.toString routine.
        -:  693: *
        -:  694: * @return ecma value
        -:  695: *         Returned value must be freed with ecma_free_value.
        -:  696: */
        -:  697:ecma_value_t
    #####:  698:ecma_date_value_to_string (ecma_number_t datetime_number) /**< datetime */
        -:  699:{
    #####:  700:  datetime_number += ecma_date_local_time_zone_adjustment (datetime_number);
    #####:  701:  return ecma_date_to_string_format (datetime_number, "$W $M $D $Y $h:$m:$s GMT$z$Z");
        -:  702:} /* ecma_date_value_to_string */
        -:  703:
        -:  704:/**
        -:  705: * Common function to create a time zone specific string from a numeric value.
        -:  706: *
        -:  707: * Used by:
        -:  708: *        - The Date.prototype.toUTCString routine.
        -:  709: *
        -:  710: * @return ecma value
        -:  711: *         Returned value must be freed with ecma_free_value.
        -:  712: */
        -:  713:ecma_value_t
    #####:  714:ecma_date_value_to_utc_string (ecma_number_t datetime_number) /**< datetime */
        -:  715:{
    #####:  716:  return ecma_date_to_string_format (datetime_number, "$W, $D $M $Y $h:$m:$s GMT");
        -:  717:} /* ecma_date_value_to_utc_string */
        -:  718:
        -:  719:/**
        -:  720: * Common function to create a ISO specific string from a numeric value.
        -:  721: *
        -:  722: * Used by:
        -:  723: *        - The Date.prototype.toISOString routine.
        -:  724: *
        -:  725: * @return ecma value
        -:  726: *         Returned value must be freed with ecma_free_value.
        -:  727: */
        -:  728:ecma_value_t
    #####:  729:ecma_date_value_to_iso_string (ecma_number_t datetime_number) /**<datetime */
        -:  730:{
    #####:  731:  return ecma_date_to_string_format (datetime_number, "$y-$O-$DT$h:$m:$s.$iZ");
        -:  732:} /* ecma_date_value_to_iso_string */
        -:  733:
        -:  734:/**
        -:  735: * Common function to create a date string from a numeric value.
        -:  736: *
        -:  737: * Used by:
        -:  738: *        - The Date.prototype.toDateString routine.
        -:  739: *
        -:  740: * @return ecma value
        -:  741: *         Returned value must be freed with ecma_free_value.
        -:  742: */
        -:  743:ecma_value_t
    #####:  744:ecma_date_value_to_date_string (ecma_number_t datetime_number) /**<datetime */
        -:  745:{
    #####:  746:  return ecma_date_to_string_format (datetime_number, "$W $M $D $Y");
        -:  747:} /* ecma_date_value_to_date_string */
        -:  748:
        -:  749:/**
        -:  750: * Common function to create a time string from a numeric value.
        -:  751: *
        -:  752: * Used by:
        -:  753: *        - The Date.prototype.toTimeString routine.
        -:  754: *
        -:  755: * @return ecma value
        -:  756: *         Returned value must be freed with ecma_free_value.
        -:  757: */
        -:  758:ecma_value_t
    #####:  759:ecma_date_value_to_time_string (ecma_number_t datetime_number) /**<datetime */
        -:  760:{
    #####:  761:  return ecma_date_to_string_format (datetime_number, "$h:$m:$s GMT$z$Z");
        -:  762:} /* ecma_date_value_to_time_string */
        -:  763:
        -:  764:/**
        -:  765: * @}
        -:  766: * @}
        -:  767: */
        -:  768:
        -:  769:#endif /* JERRY_BUILTIN_DATE */
