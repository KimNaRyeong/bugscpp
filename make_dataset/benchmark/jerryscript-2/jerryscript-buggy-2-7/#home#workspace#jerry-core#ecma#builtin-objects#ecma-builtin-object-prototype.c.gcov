        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-object-prototype.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtin-helpers.h"
        -:   18:#include "ecma-builtins.h"
        -:   19:#include "ecma-builtin-object.h"
        -:   20:#include "ecma-conversion.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-function-object.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-globals.h"
        -:   25:#include "ecma-helpers.h"
        -:   26:#include "ecma-objects.h"
        -:   27:#include "ecma-proxy-object.h"
        -:   28:#include "ecma-string-object.h"
        -:   29:#include "jrt.h"
        -:   30:
        -:   31:#define ECMA_BUILTINS_INTERNAL
        -:   32:#include "ecma-builtins-internal.h"
        -:   33:
        -:   34:/**
        -:   35: * This object has a custom dispatch function.
        -:   36: */
        -:   37:#define BUILTIN_CUSTOM_DISPATCH
        -:   38:
        -:   39:/**
        -:   40: * List of built-in routine identifiers.
        -:   41: */
        -:   42:enum
        -:   43:{
        -:   44:  /* Note: these 6 routines must be in this order */
        -:   45:  ECMA_OBJECT_PROTOTYPE_ROUTINE_START = 0,
        -:   46:  ECMA_OBJECT_PROTOTYPE_TO_STRING,
        -:   47:  ECMA_OBJECT_PROTOTYPE_VALUE_OF,
        -:   48:  ECMA_OBJECT_PROTOTYPE_TO_LOCALE_STRING,
        -:   49:  ECMA_OBJECT_PROTOTYPE_GET_PROTO,
        -:   50:  ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF,
        -:   51:  ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY,
        -:   52:  ECMA_OBJECT_PROTOTYPE_PROPERTY_IS_ENUMERABLE,
        -:   53:  ECMA_OBJECT_PROTOTYPE_SET_PROTO,
        -:   54:#if JERRY_ESNEXT && JERRY_BUILTIN_ANNEXB
        -:   55:  ECMA_OBJECT_PROTOTYPE_DEFINE_GETTER,
        -:   56:  ECMA_OBJECT_PROTOTYPE_DEFINE_SETTER,
        -:   57:  ECMA_OBJECT_PROTOTYPE_LOOKUP_GETTER,
        -:   58:  ECMA_OBJECT_PROTOTYPE_LOOKUP_SETTER,
        -:   59:#endif /* JERRY_ESNEXT && JERRY_BUILTIN_ANNEXB */
        -:   60:};
        -:   61:
        -:   62:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-object-prototype.inc.h"
        -:   63:#define BUILTIN_UNDERSCORED_ID object_prototype
        -:   64:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   65:
        -:   66:/** \addtogroup ecma ECMA
        -:   67: * @{
        -:   68: *
        -:   69: * \addtogroup ecmabuiltins
        -:   70: * @{
        -:   71: *
        -:   72: * \addtogroup objectprototype ECMA Object.prototype object built-in
        -:   73: * @{
        -:   74: */
        -:   75:
        -:   76:/**
        -:   77: * The Object.prototype object's 'toString' routine
        -:   78: *
        -:   79: * See also:
        -:   80: *          ECMA-262 v5, 15.2.4.2
        -:   81: *
        -:   82: * @return ecma value
        -:   83: *         Returned value must be freed with ecma_free_value.
        -:   84: */
        -:   85:static ecma_value_t
       10:   86:ecma_builtin_object_prototype_object_to_string (ecma_value_t this_arg) /**< this argument */
        -:   87:{
       10:   88:  return ecma_builtin_helper_object_to_string (this_arg);
        -:   89:} /* ecma_builtin_object_prototype_object_to_string */
        -:   90:
        -:   91:/**
        -:   92: * The Object.prototype object's 'valueOf' routine
        -:   93: *
        -:   94: * See also:
        -:   95: *          ECMA-262 v5, 15.2.4.4
        -:   96: *
        -:   97: * @return ecma value
        -:   98: *         Returned value must be freed with ecma_free_value.
        -:   99: */
        -:  100:static ecma_value_t
    #####:  101:ecma_builtin_object_prototype_object_value_of (ecma_value_t this_arg) /**< this argument */
        -:  102:{
    #####:  103:  return ecma_op_to_object (this_arg);
        -:  104:} /* ecma_builtin_object_prototype_object_value_of */
        -:  105:
        -:  106:/**
        -:  107: * The Object.prototype object's 'toLocaleString' routine
        -:  108: *
        -:  109: * See also:
        -:  110: *          ECMA-262 v5, 15.2.4.3
        -:  111: *
        -:  112: * @return ecma value
        -:  113: *         Returned value must be freed with ecma_free_value.
        -:  114: */
        -:  115:static ecma_value_t
    #####:  116:ecma_builtin_object_prototype_object_to_locale_string (ecma_value_t this_arg) /**< this argument */
        -:  117:{
    #####:  118:  return ecma_op_invoke_by_magic_id (this_arg, LIT_MAGIC_STRING_TO_STRING_UL, &this_arg, 1);
        -:  119:} /* ecma_builtin_object_prototype_object_to_locale_string */
        -:  120:
        -:  121:/**
        -:  122: * The Object.prototype object's 'hasOwnProperty' routine
        -:  123: *
        -:  124: * See also:
        -:  125: *          ECMA-262 v5, 15.2.4.5
        -:  126: *
        -:  127: * @return ecma value
        -:  128: *         Returned value must be freed with ecma_free_value.
        -:  129: */
        -:  130:static ecma_value_t
    #####:  131:ecma_builtin_object_prototype_object_has_own_property (ecma_object_t *obj_p, /**< this argument */
        -:  132:                                                       ecma_string_t *prop_name_p) /**< first argument */
        -:  133:{
        -:  134:#if JERRY_BUILTIN_PROXY
    #####:  135:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  136:  {
    #####:  137:    ecma_property_descriptor_t prop_desc;
        -:  138:
    #####:  139:    ecma_value_t status = ecma_proxy_object_get_own_property_descriptor (obj_p, prop_name_p, &prop_desc);
        -:  140:
    #####:  141:    if (ecma_is_value_true (status))
        -:  142:    {
    #####:  143:      ecma_free_property_descriptor (&prop_desc);
        -:  144:    }
        -:  145:
    #####:  146:    return status;
        -:  147:  }
        -:  148:#endif /* JERRY_BUILTIN_PROXY */
        -:  149:
    #####:  150:  return ecma_make_boolean_value (ecma_op_ordinary_object_has_own_property (obj_p, prop_name_p));
        -:  151:} /* ecma_builtin_object_prototype_object_has_own_property */
        -:  152:
        -:  153:/**
        -:  154: * The Object.prototype object's 'isPrototypeOf' routine
        -:  155: *
        -:  156: * See also:
        -:  157: *          ECMA-262 v5, 15.2.4.6
        -:  158: *
        -:  159: * @return ecma value
        -:  160: *         Returned value must be freed with ecma_free_value.
        -:  161: */
        -:  162:static ecma_value_t
    #####:  163:ecma_builtin_object_prototype_object_is_prototype_of (ecma_object_t *obj_p, /**< this argument */
        -:  164:                                                      ecma_value_t arg) /**< routine's first argument */
        -:  165:{
        -:  166:  /* 3. Compare prototype to object */
    #####:  167:  ecma_value_t v_obj_value = ecma_op_to_object (arg);
        -:  168:
    #####:  169:  if (ECMA_IS_VALUE_ERROR (v_obj_value))
        -:  170:  {
    #####:  171:    return v_obj_value;
        -:  172:  }
        -:  173:
    #####:  174:  ecma_object_t *v_obj_p = ecma_get_object_from_value (v_obj_value);
        -:  175:
    #####:  176:  ecma_value_t ret_value = ecma_op_object_is_prototype_of (obj_p, v_obj_p);
        -:  177:
    #####:  178:  ecma_deref_object (v_obj_p);
        -:  179:
    #####:  180:  return ret_value;
        -:  181:} /* ecma_builtin_object_prototype_object_is_prototype_of */
        -:  182:
        -:  183:/**
        -:  184: * The Object.prototype object's 'propertyIsEnumerable' routine
        -:  185: *
        -:  186: * See also:
        -:  187: *          ECMA-262 v5, 15.2.4.7
        -:  188: *
        -:  189: * @return ecma value
        -:  190: *         Returned value must be freed with ecma_free_value.
        -:  191: */
        -:  192:static ecma_value_t
    #####:  193:ecma_builtin_object_prototype_object_property_is_enumerable (ecma_object_t *obj_p, /**< this argument */
        -:  194:                                                             ecma_string_t *prop_name_p) /**< first argument */
        -:  195:{
    #####:  196:  ecma_property_descriptor_t prop_desc;
    #####:  197:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, prop_name_p, &prop_desc);
        -:  198:
    #####:  199:  if (!ecma_is_value_true (status))
        -:  200:  {
    #####:  201:    return status;
        -:  202:  }
        -:  203:
    #####:  204:  bool is_enumerable = (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE);
        -:  205:
    #####:  206:  ecma_free_property_descriptor (&prop_desc);
        -:  207:
    #####:  208:  return ecma_make_boolean_value (is_enumerable);
        -:  209:} /* ecma_builtin_object_prototype_object_property_is_enumerable */
        -:  210:
        -:  211:#if JERRY_ESNEXT && JERRY_BUILTIN_ANNEXB
        -:  212:/**
        -:  213: * The Object.prototype object's '__defineGetter__' and '__defineSetter__' routine
        -:  214: *
        -:  215: * See also:
        -:  216: *          ECMA-262 v11, B.2.2.2
        -:  217: *          ECMA-262 v11, B.2.2.3
        -:  218: *
        -:  219: * @return ECMA_VALUE_ERROR - if the operation fails,
        -:  220: *         ECMA_VALUE_UNDEFINED - otherwise
        -:  221: */
        -:  222:static ecma_value_t
    #####:  223:ecma_builtin_object_prototype_define_getter_setter (ecma_value_t this_arg, /**< this argument */
        -:  224:                                                    ecma_value_t prop, /**< property */
        -:  225:                                                    ecma_value_t accessor, /**< getter/setter function */
        -:  226:                                                    bool define_getter) /**< true - defineGetter method
        -:  227:                                                                             false - defineSetter method */
        -:  228:{
        -:  229:  /* 1. */
    #####:  230:  ecma_value_t to_obj = ecma_op_to_object (this_arg);
        -:  231:
    #####:  232:  if (ECMA_IS_VALUE_ERROR (to_obj))
        -:  233:  {
    #####:  234:    return to_obj;
        -:  235:  }
        -:  236:
    #####:  237:  ecma_object_t *obj_p = ecma_get_object_from_value (to_obj);
        -:  238:
        -:  239:  /* 2. */
    #####:  240:  if (!ecma_op_is_callable (accessor))
        -:  241:  {
    #####:  242:    ecma_deref_object (obj_p);
    #####:  243:    return ecma_raise_type_error (ECMA_ERR_MSG ("Getter is not callable"));
        -:  244:  }
        -:  245:
    #####:  246:  ecma_object_t *accessor_obj_p = ecma_get_object_from_value (accessor);
        -:  247:
        -:  248:  /* 3. */
    #####:  249:  ecma_property_descriptor_t desc = ecma_make_empty_property_descriptor ();
    #####:  250:  desc.flags |= (JERRY_PROP_IS_ENUMERABLE
        -:  251:                 | JERRY_PROP_IS_CONFIGURABLE
        -:  252:                 | JERRY_PROP_IS_ENUMERABLE_DEFINED
        -:  253:                 | JERRY_PROP_IS_CONFIGURABLE_DEFINED
        -:  254:                 | JERRY_PROP_SHOULD_THROW);
        -:  255:
    #####:  256:  if (define_getter)
        -:  257:  {
    #####:  258:    desc.get_p = accessor_obj_p;
    #####:  259:    desc.flags |= JERRY_PROP_IS_GET_DEFINED;
        -:  260:  }
        -:  261:  else
        -:  262:  {
    #####:  263:    desc.set_p = accessor_obj_p;
    #####:  264:    desc.flags |= JERRY_PROP_IS_SET_DEFINED;
        -:  265:  }
        -:  266:
        -:  267:  /* 4. */
    #####:  268:  ecma_string_t *prop_name_p = ecma_op_to_property_key (prop);
        -:  269:
    #####:  270:  if (JERRY_UNLIKELY (prop_name_p == NULL))
        -:  271:  {
    #####:  272:    ecma_deref_object (obj_p);
    #####:  273:    return ECMA_VALUE_ERROR;
        -:  274:  }
        -:  275:
        -:  276:  /* 5. */
    #####:  277:  ecma_value_t define_prop = ecma_op_object_define_own_property (obj_p, prop_name_p, &desc);
        -:  278:
    #####:  279:  ecma_deref_object (obj_p);
    #####:  280:  ecma_deref_ecma_string (prop_name_p);
        -:  281:
    #####:  282:  if (ECMA_IS_VALUE_ERROR (define_prop))
        -:  283:  {
    #####:  284:    return define_prop;
        -:  285:  }
        -:  286:
        -:  287:  /* 6. */
    #####:  288:  return ECMA_VALUE_UNDEFINED;
        -:  289:} /* ecma_builtin_object_prototype_define_getter_setter */
        -:  290:
        -:  291:/**
        -:  292: * The Object.prototype object's '__lookupGetter__' and '__lookupSetter__' routine
        -:  293: *
        -:  294: * See also:
        -:  295: *          ECMA-262 v11, B.2.2.4
        -:  296: *          ECMA-262 v11, B.2.2.5
        -:  297: *
        -:  298: * @return ECMA_VALUE_ERROR - if the operation fails,
        -:  299: *         ECMA_VALUE_UNDEFINED - if the property was not found
        -:  300: *         Accessor property - otherwise
        -:  301: */
        -:  302:static ecma_value_t
    #####:  303:ecma_builtin_object_prototype_lookup_getter_setter (ecma_value_t this_arg, /**< this argument */
        -:  304:                                                    ecma_value_t prop, /**< property */
        -:  305:                                                    bool lookup_getter) /**< true - lookupGetter method
        -:  306:                                                                             false - lookupSetter method */
        -:  307:{
        -:  308:  /* 1. */
    #####:  309:  ecma_value_t to_obj = ecma_op_to_object (this_arg);
        -:  310:
    #####:  311:  if (ECMA_IS_VALUE_ERROR (to_obj))
        -:  312:  {
    #####:  313:    return to_obj;
        -:  314:  }
        -:  315:
    #####:  316:  ecma_object_t *obj_p = ecma_get_object_from_value (to_obj);
        -:  317:
        -:  318:  /* 2. */
    #####:  319:  ecma_string_t *prop_name_p = ecma_op_to_property_key (prop);
        -:  320:
    #####:  321:  if (JERRY_UNLIKELY (prop_name_p == NULL))
        -:  322:  {
    #####:  323:    ecma_deref_object (obj_p);
    #####:  324:    return ECMA_VALUE_ERROR;
        -:  325:  }
        -:  326:
    #####:  327:  ecma_value_t ret_value = ECMA_VALUE_UNDEFINED;
        -:  328:
    #####:  329:  ecma_ref_object (obj_p);
        -:  330:
        -:  331:  /* 3. */
        -:  332:  while (true)
    #####:  333:  {
        -:  334:    /* 3.a */
    #####:  335:    ecma_property_descriptor_t desc;
    #####:  336:    ecma_value_t get_desc = ecma_op_object_get_own_property_descriptor (obj_p, prop_name_p, &desc);
        -:  337:
    #####:  338:    if (ECMA_IS_VALUE_ERROR (get_desc))
        -:  339:    {
    #####:  340:      ret_value = get_desc;
    #####:  341:      ecma_deref_object (obj_p);
    #####:  342:      break;
        -:  343:    }
        -:  344:
        -:  345:    /* 3.b */
    #####:  346:    if (ecma_is_value_true (get_desc))
        -:  347:    {
    #####:  348:      if ((desc.flags & JERRY_PROP_IS_SET_DEFINED) || (desc.flags & JERRY_PROP_IS_GET_DEFINED))
        -:  349:      {
    #####:  350:        if (lookup_getter && desc.get_p != NULL)
        -:  351:        {
    #####:  352:          ecma_ref_object (desc.get_p);
    #####:  353:          ret_value = ecma_make_object_value (desc.get_p);
        -:  354:        }
    #####:  355:        else if (!lookup_getter && desc.set_p != NULL)
        -:  356:        {
    #####:  357:          ecma_ref_object (desc.set_p);
    #####:  358:          ret_value = ecma_make_object_value (desc.set_p);
        -:  359:        }
        -:  360:      }
        -:  361:
    #####:  362:      ecma_free_property_descriptor (&desc);
    #####:  363:      ecma_deref_object (obj_p);
    #####:  364:      break;
        -:  365:    }
        -:  366:
        -:  367:    /* 3.c */
    #####:  368:    ecma_object_t *proto_p = ecma_op_object_get_prototype_of (obj_p);
    #####:  369:    ecma_deref_object (obj_p);
        -:  370:
    #####:  371:    if (proto_p == NULL)
        -:  372:    {
    #####:  373:      break;
        -:  374:    }
    #####:  375:    else if (JERRY_UNLIKELY (proto_p == ECMA_OBJECT_POINTER_ERROR))
        -:  376:    {
    #####:  377:      ret_value = ECMA_VALUE_ERROR;
    #####:  378:      break;
        -:  379:    }
        -:  380:
        -:  381:    /* Advance up on prototype chain. */
    #####:  382:    obj_p = proto_p;
        -:  383:  }
        -:  384:
    #####:  385:  ecma_free_value (to_obj);
    #####:  386:  ecma_deref_ecma_string (prop_name_p);
        -:  387:
    #####:  388:  return ret_value;
        -:  389:} /* ecma_builtin_object_prototype_lookup_getter_setter */
        -:  390:#endif /* JERRY_ESNEXT && JERRY_BUILTIN_ANNEXB */
        -:  391:
        -:  392:/**
        -:  393: * Dispatcher of the built-in's routines
        -:  394: *
        -:  395: * @return ecma value
        -:  396: *         Returned value must be freed with ecma_free_value.
        -:  397: */
        -:  398:ecma_value_t
       10:  399:ecma_builtin_object_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:  400:                                                                             *   identifier */
        -:  401:                                                ecma_value_t this_arg, /**< 'this' argument value */
        -:  402:                                                const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  403:                                                                                        *   passed to routine */
        -:  404:                                                uint32_t arguments_number) /**< length of arguments' list */
        -:  405:{
        -:  406:  JERRY_UNUSED (arguments_number);
        -:  407:
        -:  408:  /* no specialization */
       10:  409:  if (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_VALUE_OF)
        -:  410:  {
       10:  411:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_TO_STRING)
        -:  412:    {
       10:  413:      return ecma_builtin_object_prototype_object_to_string (this_arg);
        -:  414:    }
        -:  415:
    #####:  416:    JERRY_ASSERT (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_VALUE_OF);
        -:  417:
    #####:  418:    return ecma_builtin_object_prototype_object_value_of (this_arg);
        -:  419:  }
        -:  420:
    #####:  421:  if (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF)
        -:  422:  {
    #####:  423:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF)
        -:  424:    {
        -:  425:      /* 15.2.4.6.1. */
    #####:  426:      if (!ecma_is_value_object (arguments_list_p[0]))
        -:  427:      {
    #####:  428:        return ECMA_VALUE_FALSE;
        -:  429:      }
        -:  430:    }
        -:  431:
    #####:  432:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_TO_LOCALE_STRING)
        -:  433:    {
    #####:  434:      return ecma_builtin_object_prototype_object_to_locale_string (this_arg);
        -:  435:    }
        -:  436:
    #####:  437:    ecma_value_t to_object = ecma_op_to_object (this_arg);
        -:  438:
    #####:  439:    if (ECMA_IS_VALUE_ERROR (to_object))
        -:  440:    {
    #####:  441:      return to_object;
        -:  442:    }
        -:  443:
    #####:  444:    ecma_object_t *obj_p = ecma_get_object_from_value (to_object);
        -:  445:
        -:  446:    ecma_value_t ret_value;
        -:  447:
        -:  448:#if JERRY_ESNEXT
    #####:  449:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_GET_PROTO)
        -:  450:    {
    #####:  451:      ret_value = ecma_builtin_object_object_get_prototype_of (obj_p);
        -:  452:    }
        -:  453:    else
        -:  454:#endif /* JERRY_ESNEXT */
        -:  455:    {
    #####:  456:      ret_value = ecma_builtin_object_prototype_object_is_prototype_of (obj_p, arguments_list_p[0]);
        -:  457:    }
        -:  458:
    #####:  459:    ecma_deref_object (obj_p);
        -:  460:
    #####:  461:    return ret_value;
        -:  462:  }
        -:  463:
    #####:  464:  JERRY_ASSERT (builtin_routine_id >= ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY);
        -:  465:
        -:  466:#if JERRY_ESNEXT
    #####:  467:  if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_SET_PROTO)
        -:  468:  {
    #####:  469:    return ecma_builtin_object_object_set_proto (this_arg, arguments_list_p[0]);
        -:  470:  }
        -:  471:#if JERRY_BUILTIN_ANNEXB
    #####:  472:  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_LOOKUP_GETTER)
        -:  473:  {
    #####:  474:    return ecma_builtin_object_prototype_lookup_getter_setter (this_arg, arguments_list_p[0], true);
        -:  475:  }
    #####:  476:  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_LOOKUP_SETTER)
        -:  477:  {
    #####:  478:    return ecma_builtin_object_prototype_lookup_getter_setter (this_arg, arguments_list_p[0], false);
        -:  479:  }
    #####:  480:  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_DEFINE_GETTER)
        -:  481:  {
    #####:  482:    return ecma_builtin_object_prototype_define_getter_setter (this_arg,
        -:  483:                                                               arguments_list_p[0],
    #####:  484:                                                               arguments_list_p[1],
        -:  485:                                                               true);
        -:  486:  }
    #####:  487:  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_DEFINE_SETTER)
        -:  488:  {
    #####:  489:    return ecma_builtin_object_prototype_define_getter_setter (this_arg,
        -:  490:                                                               arguments_list_p[0],
    #####:  491:                                                               arguments_list_p[1],
        -:  492:                                                               false);
        -:  493:  }
        -:  494:#endif /* JERRY_BUILTIN_ANNEXB */
        -:  495:#endif /* JERRY_ESNEXT*/
        -:  496:
    #####:  497:  ecma_string_t *prop_name_p = ecma_op_to_property_key (arguments_list_p[0]);
        -:  498:
    #####:  499:  if (prop_name_p == NULL)
        -:  500:  {
    #####:  501:    return ECMA_VALUE_ERROR;
        -:  502:  }
        -:  503:
    #####:  504:  ecma_value_t to_object = ecma_op_to_object (this_arg);
        -:  505:
    #####:  506:  if (ECMA_IS_VALUE_ERROR (to_object))
        -:  507:  {
    #####:  508:    ecma_deref_ecma_string (prop_name_p);
    #####:  509:    return to_object;
        -:  510:  }
        -:  511:
    #####:  512:  ecma_object_t *obj_p = ecma_get_object_from_value (to_object);
        -:  513:
        -:  514:  ecma_value_t ret_value;
        -:  515:
    #####:  516:  if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY)
        -:  517:  {
    #####:  518:    ret_value = ecma_builtin_object_prototype_object_has_own_property (obj_p, prop_name_p);
        -:  519:  }
        -:  520:  else
        -:  521:  {
    #####:  522:    ret_value = ecma_builtin_object_prototype_object_property_is_enumerable (obj_p, prop_name_p);
        -:  523:  }
        -:  524:
    #####:  525:  ecma_deref_ecma_string (prop_name_p);
    #####:  526:  ecma_deref_object (obj_p);
        -:  527:
    #####:  528:  return ret_value;
        -:  529:} /* ecma_builtin_object_prototype_dispatch_routine */
        -:  530:
        -:  531:/**
        -:  532: * @}
        -:  533: * @}
        -:  534: * @}
        -:  535: */
