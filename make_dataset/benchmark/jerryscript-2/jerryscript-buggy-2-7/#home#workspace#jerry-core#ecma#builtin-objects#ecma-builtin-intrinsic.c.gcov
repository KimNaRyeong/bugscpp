        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-intrinsic.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtins.h"
        -:   17:#include "ecma-builtin-helpers.h"
        -:   18:#include "ecma-container-object.h"
        -:   19:#include "ecma-array-object.h"
        -:   20:#include "ecma-arraybuffer-object.h"
        -:   21:#include "ecma-typedarray-object.h"
        -:   22:#include "ecma-string-object.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "lit-char-helpers.h"
        -:   26:
        -:   27:#if JERRY_ESNEXT
        -:   28:
        -:   29:#define ECMA_BUILTINS_INTERNAL
        -:   30:#include "ecma-builtins-internal.h"
        -:   31:
        -:   32:/**
        -:   33: * This object has a custom dispatch function.
        -:   34: */
        -:   35:#define BUILTIN_CUSTOM_DISPATCH
        -:   36:
        -:   37:/**
        -:   38: * List of built-in routine identifiers.
        -:   39: */
        -:   40:enum
        -:   41:{
        -:   42:  ECMA_INTRINSIC_ROUTINE_START = 0,
        -:   43:  ECMA_INTRINSIC_ARRAY_PROTOTYPE_VALUES,
        -:   44:  ECMA_INTRINSIC_TYPEDARRAY_PROTOTYPE_VALUES,
        -:   45:  ECMA_INTRINSIC_MAP_PROTOTYPE_ENTRIES,
        -:   46:  ECMA_INTRINSIC_SET_PROTOTYPE_VALUES,
        -:   47:  ECMA_INTRINSIC_ARRAY_TO_STRING,
        -:   48:  ECMA_INTRINSIC_DATE_TO_UTC_STRING,
        -:   49:  ECMA_INTRINSIC_PARSE_FLOAT,
        -:   50:  ECMA_INTRINSIC_PARSE_INT,
        -:   51:  ECMA_INTRINSIC_STRING_TRIM_START,
        -:   52:  ECMA_INTRINSIC_STRING_TRIM_END,
        -:   53:};
        -:   54:
        -:   55:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-intrinsic.inc.h"
        -:   56:#define BUILTIN_UNDERSCORED_ID intrinsic
        -:   57:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   58:
        -:   59:/** \addtogroup ecma ECMA
        -:   60: * @{
        -:   61: *
        -:   62: * \addtogroup ecmabuiltins
        -:   63: * @{
        -:   64: *
        -:   65: * \addtogroup intrinsic ECMA Intrinsic object built-in
        -:   66: * @{
        -:   67: */
        -:   68:
        -:   69:/**
        -:   70: * The %ArrayProto_values% intrinsic routine
        -:   71: *
        -:   72: * See also:
        -:   73: *          ECMA-262 v5, 15.4.4.4
        -:   74: *
        -:   75: * @return ecma value
        -:   76: *         Returned value must be freed with ecma_free_value.
        -:   77: */
        -:   78:static ecma_value_t
    #####:   79:ecma_builtin_intrinsic_array_prototype_values (ecma_value_t this_value) /**< this argument */
        -:   80:{
    #####:   81:  ecma_value_t this_obj = ecma_op_to_object (this_value);
        -:   82:
    #####:   83:  if (ECMA_IS_VALUE_ERROR (this_obj))
        -:   84:  {
    #####:   85:    return this_obj;
        -:   86:  }
        -:   87:
    #####:   88:  ecma_object_t *this_obj_p = ecma_get_object_from_value (this_obj);
        -:   89:
    #####:   90:  ecma_value_t ret_value = ecma_op_create_array_iterator (this_obj_p, ECMA_ITERATOR_VALUES);
        -:   91:
    #####:   92:  ecma_deref_object (this_obj_p);
        -:   93:
    #####:   94:  return ret_value;
        -:   95:} /* ecma_builtin_intrinsic_array_prototype_values */
        -:   96:
        -:   97:/**
        -:   98: * The Map.prototype entries and [@@iterator] routines
        -:   99: *
        -:  100: * See also:
        -:  101: *          ECMA-262 v6, 23.1.3.4
        -:  102: *          ECMA-262 v6, 23.1.3.12
        -:  103: *
        -:  104: * @return ecma value
        -:  105: *         Returned value must be freed with ecma_free_value.
        -:  106: */
        -:  107:static ecma_value_t
    #####:  108:ecma_builtin_intrinsic_map_prototype_entries (ecma_value_t this_value)
        -:  109:{
    #####:  110:  ecma_extended_object_t *map_object_p = ecma_op_container_get_object (this_value, LIT_MAGIC_STRING_MAP_UL);
        -:  111:
    #####:  112:  if (map_object_p == NULL)
        -:  113:  {
    #####:  114:    return ECMA_VALUE_ERROR;
        -:  115:  }
        -:  116:
    #####:  117:  return ecma_op_container_create_iterator (this_value,
        -:  118:                                            ECMA_BUILTIN_ID_MAP_ITERATOR_PROTOTYPE,
        -:  119:                                            ECMA_OBJECT_CLASS_MAP_ITERATOR,
        -:  120:                                            ECMA_ITERATOR_ENTRIES);
        -:  121:} /* ecma_builtin_intrinsic_map_prototype_entries */
        -:  122:
        -:  123:/**
        -:  124: * The Set.prototype values, keys and [@@iterator] routines
        -:  125: *
        -:  126: * See also:
        -:  127: *          ECMA-262 v6, 23.2.3.8
        -:  128: *          ECMA-262 v6, 23.2.3.10
        -:  129: *
        -:  130: * @return ecma value
        -:  131: *         Returned value must be freed with ecma_free_value.
        -:  132: */
        -:  133:static ecma_value_t
    #####:  134:ecma_builtin_intrinsic_set_prototype_values (ecma_value_t this_value)
        -:  135:{
    #####:  136:  ecma_extended_object_t *map_object_p = ecma_op_container_get_object (this_value, LIT_MAGIC_STRING_SET_UL);
        -:  137:
    #####:  138:  if (map_object_p == NULL)
        -:  139:  {
    #####:  140:    return ECMA_VALUE_ERROR;
        -:  141:  }
        -:  142:
    #####:  143:  return ecma_op_container_create_iterator (this_value,
        -:  144:                                            ECMA_BUILTIN_ID_SET_ITERATOR_PROTOTYPE,
        -:  145:                                            ECMA_OBJECT_CLASS_SET_ITERATOR,
        -:  146:                                            ECMA_ITERATOR_VALUES);
        -:  147:} /* ecma_builtin_intrinsic_set_prototype_values */
        -:  148:
        -:  149:/**
        -:  150: * Dispatcher of the built-in's routines
        -:  151: *
        -:  152: * @return ecma value
        -:  153: *         Returned value must be freed with ecma_free_value.
        -:  154: */
        -:  155:ecma_value_t
    #####:  156:ecma_builtin_intrinsic_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  157:                                         ecma_value_t this_arg, /**< 'this' argument value */
        -:  158:                                         const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  159:                                                                                 *   passed to routine */
        -:  160:                                         uint32_t arguments_number) /**< length of arguments' list */
        -:  161:{
        -:  162:  JERRY_UNUSED (arguments_number);
        -:  163:
    #####:  164:  switch (builtin_routine_id)
        -:  165:  {
    #####:  166:    case ECMA_INTRINSIC_ARRAY_PROTOTYPE_VALUES:
        -:  167:    {
    #####:  168:      return ecma_builtin_intrinsic_array_prototype_values (this_arg);
        -:  169:    }
    #####:  170:    case ECMA_INTRINSIC_TYPEDARRAY_PROTOTYPE_VALUES:
        -:  171:    {
    #####:  172:      if (!ecma_is_typedarray (this_arg))
        -:  173:      {
    #####:  174:        return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not a TypedArray"));
        -:  175:      }
        -:  176:
    #####:  177:      if (ecma_arraybuffer_is_detached (ecma_typedarray_get_arraybuffer (ecma_get_object_from_value (this_arg))))
        -:  178:      {
    #####:  179:        return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_arraybuffer_is_detached));
        -:  180:      }
        -:  181:
    #####:  182:      return ecma_typedarray_iterators_helper (this_arg, ECMA_ITERATOR_VALUES);
        -:  183:    }
    #####:  184:    case ECMA_INTRINSIC_SET_PROTOTYPE_VALUES:
        -:  185:    {
    #####:  186:      return ecma_builtin_intrinsic_set_prototype_values (this_arg);
        -:  187:    }
    #####:  188:    case ECMA_INTRINSIC_MAP_PROTOTYPE_ENTRIES:
        -:  189:    {
    #####:  190:      return ecma_builtin_intrinsic_map_prototype_entries (this_arg);
        -:  191:    }
    #####:  192:    case ECMA_INTRINSIC_ARRAY_TO_STRING:
        -:  193:    {
    #####:  194:      ecma_value_t this_obj = ecma_op_to_object (this_arg);
    #####:  195:      if (ECMA_IS_VALUE_ERROR (this_obj))
        -:  196:      {
    #####:  197:        return this_obj;
        -:  198:      }
        -:  199:
    #####:  200:      ecma_value_t result = ecma_array_object_to_string (this_obj);
    #####:  201:      ecma_deref_object (ecma_get_object_from_value (this_obj));
        -:  202:
    #####:  203:      return result;
        -:  204:    }
    #####:  205:    case ECMA_INTRINSIC_DATE_TO_UTC_STRING:
        -:  206:    {
    #####:  207:      if (!ecma_is_value_object (this_arg)
    #####:  208:          || !ecma_object_class_is (ecma_get_object_from_value (this_arg), ECMA_OBJECT_CLASS_DATE))
        -:  209:      {
    #####:  210:        return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not a Date object"));
        -:  211:      }
        -:  212:
        -:  213:#if JERRY_ESNEXT
    #####:  214:      ecma_number_t *date_value_p = &((ecma_date_object_t *) ecma_get_object_from_value (this_arg))->date_value;
        -:  215:#else /* !JERRY_ESNEXT */
        -:  216:      ecma_extended_object_t *arg_ext_object_p = (ecma_extended_object_t *) ecma_get_object_from_value (argument);
        -:  217:      ecma_number_t *date_value_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_number_t,
        -:  218:                                                                     arg_ext_object_p->u.class_prop.u.date);
        -:  219:#endif /* JERRY_ESNEXT */
        -:  220:
    #####:  221:      if (ecma_number_is_nan (*date_value_p))
        -:  222:      {
    #####:  223:        return ecma_make_magic_string_value (LIT_MAGIC_STRING_INVALID_DATE_UL);
        -:  224:      }
        -:  225:
    #####:  226:      return ecma_date_value_to_utc_string (*date_value_p);
        -:  227:    }
    #####:  228:    case ECMA_INTRINSIC_STRING_TRIM_START:
        -:  229:    case ECMA_INTRINSIC_STRING_TRIM_END:
        -:  230:    {
    #####:  231:      if (!ecma_op_require_object_coercible (this_arg))
        -:  232:      {
    #####:  233:        return ECMA_VALUE_ERROR;
        -:  234:      }
        -:  235:
    #####:  236:      ecma_string_t *to_str_p = ecma_op_to_string (this_arg);
    #####:  237:      if (to_str_p == NULL)
        -:  238:      {
    #####:  239:        return ECMA_VALUE_ERROR;
        -:  240:      }
        -:  241:
    #####:  242:      ECMA_STRING_TO_UTF8_STRING (to_str_p, start_p, input_start_size);
        -:  243:
        -:  244:      lit_utf8_size_t size;
    #####:  245:      const lit_utf8_byte_t *input_start_p = start_p;
    #####:  246:      const lit_utf8_byte_t *input_str_end_p = start_p + input_start_size;
        -:  247:
        -:  248:      ecma_string_t *ret_str_p;
    #####:  249:      if (builtin_routine_id == ECMA_INTRINSIC_STRING_TRIM_START)
        -:  250:      {
    #####:  251:        const lit_utf8_byte_t *new_start_p = ecma_string_trim_front (input_start_p, input_str_end_p);
    #####:  252:        size = (lit_utf8_size_t) (input_str_end_p - new_start_p);
    #####:  253:        ret_str_p = ecma_new_ecma_string_from_utf8 (new_start_p, size);
        -:  254:      }
        -:  255:      else
        -:  256:      {
    #####:  257:        const lit_utf8_byte_t *new_end_p = ecma_string_trim_back (input_start_p, input_str_end_p);
    #####:  258:        size = (lit_utf8_size_t) (new_end_p - input_start_p);
    #####:  259:        ret_str_p = ecma_new_ecma_string_from_utf8 (input_start_p, size);
        -:  260:      }
        -:  261:
    #####:  262:      ECMA_FINALIZE_UTF8_STRING (start_p, input_start_size);
    #####:  263:      ecma_value_t result = ecma_make_string_value (ret_str_p);
    #####:  264:      ecma_deref_ecma_string (to_str_p);
    #####:  265:      return result;
        -:  266:
        -:  267:    }
    #####:  268:    default:
        -:  269:    {
    #####:  270:      JERRY_ASSERT (builtin_routine_id == ECMA_INTRINSIC_PARSE_INT
        -:  271:                    || builtin_routine_id == ECMA_INTRINSIC_PARSE_FLOAT);
        -:  272:
    #####:  273:      ecma_string_t *str_p = ecma_op_to_string (arguments_list_p[0]);
        -:  274:
    #####:  275:      if (JERRY_UNLIKELY (str_p == NULL))
        -:  276:      {
    #####:  277:        return ECMA_VALUE_ERROR;
        -:  278:      }
        -:  279:
        -:  280:      ecma_value_t result;
    #####:  281:      ECMA_STRING_TO_UTF8_STRING (str_p, string_buff, string_buff_size);
        -:  282:
    #####:  283:      if (builtin_routine_id == ECMA_INTRINSIC_PARSE_INT)
        -:  284:      {
    #####:  285:        result = ecma_number_parse_int (string_buff,
        -:  286:                                        string_buff_size,
    #####:  287:                                        arguments_list_p[1]);
        -:  288:      }
        -:  289:      else
        -:  290:      {
    #####:  291:        JERRY_ASSERT (builtin_routine_id == ECMA_INTRINSIC_PARSE_FLOAT);
    #####:  292:        result = ecma_number_parse_float (string_buff,
        -:  293:                                          string_buff_size);
        -:  294:      }
        -:  295:
    #####:  296:      ECMA_FINALIZE_UTF8_STRING (string_buff, string_buff_size);
    #####:  297:      ecma_deref_ecma_string (str_p);
    #####:  298:      return result;
        -:  299:    }
        -:  300:  }
        -:  301:} /* ecma_builtin_intrinsic_dispatch_routine */
        -:  302:
        -:  303:/**
        -:  304: * @}
        -:  305: * @}
        -:  306: * @}
        -:  307: */
        -:  308:
        -:  309:#endif /* JERRY_ESNEXT */
