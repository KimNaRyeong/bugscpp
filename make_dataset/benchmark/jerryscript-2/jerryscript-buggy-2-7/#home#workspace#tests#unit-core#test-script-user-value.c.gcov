        -:    0:Source:/home/workspace/tests/unit-core/test-script-user-value.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "config.h"
        -:   17:#include "jerryscript.h"
        -:   18:
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static jerry_value_t user_values[4];
        -:   22:
        -:   23:#define USER_VALUES_SIZE (sizeof (user_values) / sizeof (jerry_value_t))
        -:   24:
        -:   25:static void
    #####:   26:test_parse (const char *source_p, /**< source code */
        -:   27:            jerry_parse_options_t *options_p, /**< options passed to jerry_parse */
        -:   28:            bool run_code) /**< run the code after parsing */
        -:   29:{
    #####:   30:  for (size_t i = 0; i < USER_VALUES_SIZE; i++)
        -:   31:  {
    #####:   32:    options_p->user_value = user_values[i];
        -:   33:
    #####:   34:    jerry_value_t result = jerry_parse ((const jerry_char_t *) source_p,
        -:   35:                                        strlen (source_p),
        -:   36:                                        options_p);
    #####:   37:    TEST_ASSERT (!jerry_value_is_error (result));
        -:   38:
    #####:   39:    if (run_code)
        -:   40:    {
    #####:   41:      jerry_value_t parse_result = result;
    #####:   42:      result = jerry_run (result);
    #####:   43:      jerry_release_value (parse_result);
    #####:   44:      TEST_ASSERT (!jerry_value_is_error (result));
        -:   45:    }
        -:   46:
    #####:   47:    jerry_value_t user_value = jerry_get_user_value (result);
    #####:   48:    jerry_value_t compare_value = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL,
        -:   49:                                                          user_value,
        -:   50:                                                          user_values[i]);
        -:   51:
    #####:   52:    TEST_ASSERT (jerry_value_is_true (compare_value));
        -:   53:
    #####:   54:    jerry_release_value (compare_value);
    #####:   55:    jerry_release_value (user_value);
    #####:   56:    jerry_release_value (result);
        -:   57:  }
    #####:   58:} /* test_parse */
        -:   59:
        -:   60:static void
    #####:   61:test_parse_function (const char *source_p, /**< source code */
        -:   62:                     jerry_parse_options_t *options_p, /**< options passed to jerry_parse */
        -:   63:                     bool run_code) /**< run the code after parsing */
        -:   64:{
    #####:   65:  options_p->options |= JERRY_PARSE_HAS_ARGUMENT_LIST;
    #####:   66:  options_p->argument_list = jerry_create_string ((const jerry_char_t *) "");
        -:   67:
    #####:   68:  for (size_t i = 0; i < USER_VALUES_SIZE; i++)
        -:   69:  {
    #####:   70:    options_p->user_value = user_values[i];
        -:   71:
    #####:   72:    jerry_value_t result = jerry_parse ((const jerry_char_t *) source_p,
        -:   73:                                        strlen (source_p),
        -:   74:                                        options_p);
    #####:   75:    TEST_ASSERT (!jerry_value_is_error (result));
        -:   76:
    #####:   77:    if (run_code)
        -:   78:    {
    #####:   79:      jerry_value_t parse_result = result;
    #####:   80:      jerry_value_t this_value = jerry_create_undefined ();
    #####:   81:      result = jerry_call_function (result, this_value, NULL, 0);
    #####:   82:      jerry_release_value (parse_result);
    #####:   83:      jerry_release_value (this_value);
    #####:   84:      TEST_ASSERT (!jerry_value_is_error (result));
        -:   85:    }
        -:   86:
    #####:   87:    jerry_value_t user_value = jerry_get_user_value (result);
    #####:   88:    jerry_value_t compare_value = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL,
        -:   89:                                                          user_value,
        -:   90:                                                          user_values[i]);
        -:   91:
    #####:   92:    TEST_ASSERT (jerry_value_is_true (compare_value));
        -:   93:
    #####:   94:    jerry_release_value (compare_value);
    #####:   95:    jerry_release_value (user_value);
    #####:   96:    jerry_release_value (result);
        -:   97:  }
        -:   98:
    #####:   99:  jerry_release_value (options_p->argument_list);
    #####:  100:} /* test_parse_function */
        -:  101:
        -:  102:int
    #####:  103:main (void)
        -:  104:{
    #####:  105:  TEST_INIT ();
        -:  106:
    #####:  107:  jerry_init (JERRY_INIT_EMPTY);
        -:  108:
    #####:  109:  user_values[0] = jerry_create_object ();
    #####:  110:  user_values[1] = jerry_create_null ();
    #####:  111:  user_values[2] = jerry_create_number (5.5);
    #####:  112:  user_values[3] = jerry_create_string ((const jerry_char_t *) "AnyString...");
        -:  113:
        -:  114:  jerry_parse_options_t parse_options;
    #####:  115:  const char *source_p = TEST_STRING_LITERAL ("");
        -:  116:
    #####:  117:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  118:  test_parse (source_p, &parse_options, false);
    #####:  119:  test_parse_function (source_p, &parse_options, false);
        -:  120:
    #####:  121:  if (jerry_is_feature_enabled (JERRY_FEATURE_MODULE))
        -:  122:  {
    #####:  123:    parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_USER_VALUE;
    #####:  124:    test_parse (source_p, &parse_options, false);
        -:  125:  }
        -:  126:
    #####:  127:  source_p = TEST_STRING_LITERAL ("function f() { }\n"
        -:  128:                                  "f");
    #####:  129:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  130:  test_parse (source_p, &parse_options, true);
        -:  131:
    #####:  132:  source_p = TEST_STRING_LITERAL ("function f() { return function() {} }\n"
        -:  133:                                  "f()");
    #####:  134:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  135:  test_parse (source_p, &parse_options, true);
        -:  136:
    #####:  137:  source_p = TEST_STRING_LITERAL ("return function() {}");
    #####:  138:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  139:  test_parse_function (source_p, &parse_options, true);
        -:  140:
        -:  141:  /* There is no test for ESNEXT, using SYMBOL instead. */
    #####:  142:  if (jerry_is_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:  143:  {
    #####:  144:    source_p = TEST_STRING_LITERAL ("(class {})");
    #####:  145:    parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  146:    test_parse (source_p, &parse_options, true);
        -:  147:  }
        -:  148:
    #####:  149:  source_p = TEST_STRING_LITERAL ("eval('function f() {}')\n"
        -:  150:                                  "f");
    #####:  151:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  152:  test_parse (source_p, &parse_options, true);
        -:  153:
    #####:  154:  source_p = TEST_STRING_LITERAL ("eval('function f() { return eval(\\'(function () {})\\') }')\n"
        -:  155:                                  "f()");
    #####:  156:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  157:  test_parse (source_p, &parse_options, true);
        -:  158:
    #####:  159:  source_p = TEST_STRING_LITERAL ("eval('function f() {}')\n"
        -:  160:                                  "return f");
    #####:  161:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  162:  test_parse_function (source_p, &parse_options, true);
        -:  163:
    #####:  164:  source_p = TEST_STRING_LITERAL ("eval('function f() { return eval(\\'(function () {})\\') }')\n"
        -:  165:                                  "return f()");
    #####:  166:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  167:  test_parse_function (source_p, &parse_options, true);
        -:  168:
    #####:  169:  source_p = TEST_STRING_LITERAL ("function f() {}\n"
        -:  170:                                  "f.bind(1)");
    #####:  171:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  172:  test_parse (source_p, &parse_options, true);
        -:  173:
    #####:  174:  source_p = TEST_STRING_LITERAL ("function f() {}\n"
        -:  175:                                  "f.bind(1).bind(2, 3)");
    #####:  176:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  177:  test_parse (source_p, &parse_options, true);
        -:  178:
    #####:  179:  source_p = TEST_STRING_LITERAL ("function f() {}\n"
        -:  180:                                  "return f.bind(1)");
    #####:  181:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  182:  test_parse_function (source_p, &parse_options, true);
        -:  183:
    #####:  184:  source_p = TEST_STRING_LITERAL ("function f() {}\n"
        -:  185:                                  "return f.bind(1).bind(2, 3)");
    #####:  186:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  187:  test_parse_function (source_p, &parse_options, true);
        -:  188:
    #####:  189:  for (size_t i = 0; i < USER_VALUES_SIZE; i++)
        -:  190:  {
    #####:  191:    jerry_value_t result = jerry_get_user_value (user_values[i]);
    #####:  192:    TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  193:    jerry_release_value (result);
        -:  194:  }
        -:  195:
    #####:  196:  for (size_t i = 0; i < USER_VALUES_SIZE; i++)
        -:  197:  {
    #####:  198:    jerry_release_value (user_values[i]);
        -:  199:  }
        -:  200:
    #####:  201:  jerry_cleanup ();
        -:  202:  return 0;
        -:  203:} /* main */
