        -:    0:Source:/home/workspace/tests/unit-core/test-container.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "test-common.h"
        -:   18:
        -:   19:static int global_counter;
        -:   20:
        -:   21:static void
    #####:   22:native_free_callback (void *native_p, /**< native pointer */
        -:   23:                      jerry_object_native_info_t *info_p) /**< native info */
        -:   24:{
    #####:   25:  TEST_ASSERT (native_p == (void *) &global_counter);
    #####:   26:  TEST_ASSERT (info_p->free_cb == native_free_callback);
    #####:   27:  global_counter++;
    #####:   28:} /* native_free_callback */
        -:   29:
        -:   30:static const jerry_object_native_info_t native_info =
        -:   31:{
        -:   32:  .free_cb = native_free_callback,
        -:   33:  .number_of_references = 0,
        -:   34:  .offset_of_references = 0,
        -:   35:};
        -:   36:
        -:   37:static jerry_value_t
    #####:   38:create_array_from_container_handler (const jerry_call_info_t *call_info_p,
        -:   39:                                     const jerry_value_t args_p[],
        -:   40:                                     const jerry_length_t args_count)
        -:   41:{
        -:   42:  JERRY_UNUSED (call_info_p);
        -:   43:
    #####:   44:  if (args_count < 2)
        -:   45:  {
    #####:   46:    return jerry_create_undefined ();
        -:   47:  }
        -:   48:
    #####:   49:  bool is_key_value_pairs = false;
    #####:   50:  jerry_value_t result = jerry_get_array_from_container (args_p[0], &is_key_value_pairs);
        -:   51:
    #####:   52:  TEST_ASSERT (is_key_value_pairs == jerry_value_is_true (args_p[1]));
        -:   53:  return result;
        -:   54:} /* create_array_from_container_handler */
        -:   55:
        -:   56:static void
    #####:   57:run_eval (const char *source_p)
        -:   58:{
    #####:   59:  jerry_value_t result = jerry_eval ((const jerry_char_t *) source_p, strlen (source_p), 0);
        -:   60:
    #####:   61:  TEST_ASSERT (!jerry_value_is_error (result));
    #####:   62:  jerry_release_value (result);
    #####:   63:} /* run_eval */
        -:   64:
        -:   65:static void
    #####:   66:run_eval_error (const char *source_p)
        -:   67:{
    #####:   68:  jerry_value_t result = jerry_eval ((const jerry_char_t *) source_p, strlen (source_p), 0);
    #####:   69:  jerry_release_value (result);
    #####:   70:} /* run_eval_error */
        -:   71:
        -:   72:int
    #####:   73:main (void)
        -:   74:{
    #####:   75:  jerry_init (JERRY_INIT_EMPTY);
        -:   76:
    #####:   77:  if (!jerry_is_feature_enabled (JERRY_FEATURE_MAP)
    #####:   78:      || !jerry_is_feature_enabled (JERRY_FEATURE_SET)
    #####:   79:      || !jerry_is_feature_enabled (JERRY_FEATURE_WEAKMAP)
    #####:   80:      || !jerry_is_feature_enabled (JERRY_FEATURE_WEAKSET))
        -:   81:  {
    #####:   82:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Containers are disabled!\n");
    #####:   83:    jerry_cleanup ();
    #####:   84:    return 0;
        -:   85:  }
        -:   86:
        -:   87:  jerry_value_t instance_check;
    #####:   88:  jerry_value_t global = jerry_get_global_object ();
    #####:   89:  jerry_value_t map_str = jerry_create_string ((jerry_char_t *) "Map");
    #####:   90:  jerry_value_t set_str = jerry_create_string ((jerry_char_t *) "Set");
    #####:   91:  jerry_value_t weakmap_str = jerry_create_string ((jerry_char_t *) "WeakMap");
    #####:   92:  jerry_value_t weakset_str = jerry_create_string ((jerry_char_t *) "WeakSet");
    #####:   93:  jerry_value_t global_map = jerry_get_property (global, map_str);
    #####:   94:  jerry_value_t global_set = jerry_get_property (global, set_str);
    #####:   95:  jerry_value_t global_weakmap = jerry_get_property (global, weakmap_str);
    #####:   96:  jerry_value_t global_weakset = jerry_get_property (global, weakset_str);
        -:   97:
    #####:   98:  jerry_value_t function = jerry_create_external_function (create_array_from_container_handler);
    #####:   99:  jerry_value_t name = jerry_create_string ((const jerry_char_t *) "create_array_from_container");
    #####:  100:  jerry_value_t res = jerry_set_property (global, name, function);
    #####:  101:  TEST_ASSERT (!jerry_value_is_error (res));
        -:  102:
    #####:  103:  jerry_release_value (res);
    #####:  104:  jerry_release_value (name);
    #####:  105:  jerry_release_value (function);
        -:  106:
    #####:  107:  jerry_release_value (global);
        -:  108:
    #####:  109:  jerry_release_value (map_str);
    #####:  110:  jerry_release_value (set_str);
    #####:  111:  jerry_release_value (weakmap_str);
    #####:  112:  jerry_release_value (weakset_str);
        -:  113:
    #####:  114:  jerry_value_t empty_map = jerry_create_container (JERRY_CONTAINER_TYPE_MAP, NULL, 0);
    #####:  115:  TEST_ASSERT (jerry_get_container_type (empty_map) == JERRY_CONTAINER_TYPE_MAP);
    #####:  116:  instance_check = jerry_binary_operation (JERRY_BIN_OP_INSTANCEOF, empty_map, global_map);
    #####:  117:  TEST_ASSERT (jerry_value_is_true (instance_check));
    #####:  118:  jerry_release_value (instance_check);
    #####:  119:  jerry_release_value (global_map);
    #####:  120:  jerry_release_value (empty_map);
        -:  121:
    #####:  122:  jerry_value_t empty_set = jerry_create_container (JERRY_CONTAINER_TYPE_SET, NULL, 0);
    #####:  123:  TEST_ASSERT (jerry_get_container_type (empty_set) == JERRY_CONTAINER_TYPE_SET);
    #####:  124:  instance_check = jerry_binary_operation (JERRY_BIN_OP_INSTANCEOF, empty_set, global_set);
    #####:  125:  TEST_ASSERT (jerry_value_is_true (instance_check));
    #####:  126:  jerry_release_value (instance_check);
    #####:  127:  jerry_release_value (global_set);
    #####:  128:  jerry_release_value (empty_set);
        -:  129:
    #####:  130:  jerry_value_t empty_weakmap = jerry_create_container (JERRY_CONTAINER_TYPE_WEAKMAP, NULL, 0);
    #####:  131:  TEST_ASSERT (jerry_get_container_type (empty_weakmap) == JERRY_CONTAINER_TYPE_WEAKMAP);
    #####:  132:  instance_check = jerry_binary_operation (JERRY_BIN_OP_INSTANCEOF, empty_weakmap, global_weakmap);
    #####:  133:  TEST_ASSERT (jerry_value_is_true (instance_check));
    #####:  134:  jerry_release_value (instance_check);
    #####:  135:  jerry_release_value (global_weakmap);
    #####:  136:  jerry_release_value (empty_weakmap);
        -:  137:
    #####:  138:  jerry_value_t empty_weakset = jerry_create_container (JERRY_CONTAINER_TYPE_WEAKSET, NULL, 0);
    #####:  139:  TEST_ASSERT (jerry_get_container_type (empty_weakset) == JERRY_CONTAINER_TYPE_WEAKSET);
    #####:  140:  instance_check = jerry_binary_operation (JERRY_BIN_OP_INSTANCEOF, empty_weakset, global_weakset);
    #####:  141:  TEST_ASSERT (jerry_value_is_true (instance_check));
    #####:  142:  jerry_release_value (instance_check);
    #####:  143:  jerry_release_value (global_weakset);
    #####:  144:  jerry_release_value (empty_weakset);
        -:  145:
    #####:  146:  const jerry_char_t source[] = TEST_STRING_LITERAL (
        -:  147:    "(function () {\n"
        -:  148:    "  var o1 = {}\n"
        -:  149:    "  var o2 = {}\n"
        -:  150:    "  var o3 = {}\n"
        -:  151:    "  var wm = new WeakMap()\n"
        -:  152:    "  wm.set(o1, o2)\n"
        -:  153:    "  wm.set(o2, o3)\n"
        -:  154:    "  return o3\n"
        -:  155:    "})()\n"
        -:  156:  );
    #####:  157:  jerry_value_t result = jerry_eval (source,
        -:  158:                                     sizeof (source) - 1,
        -:  159:                                     JERRY_PARSE_NO_OPTS);
    #####:  160:  TEST_ASSERT (jerry_value_is_object (result));
        -:  161:
    #####:  162:  jerry_set_object_native_pointer (result, (void *) &global_counter, &native_info);
    #####:  163:  jerry_release_value (result);
        -:  164:
    #####:  165:  global_counter = 0;
    #####:  166:  jerry_gc (JERRY_GC_PRESSURE_LOW);
    #####:  167:  TEST_ASSERT (global_counter == 1);
        -:  168:
    #####:  169:  run_eval ("function assert(v) {\n"
        -:  170:            "  if(v !== true)\n"
        -:  171:            "    throw 'Assertion failed!'\n"
        -:  172:            "}");
        -:  173:
    #####:  174:  run_eval ("function test_values(arr1, arr2) {\n"
        -:  175:            "  assert(Array.isArray(arr1));\n"
        -:  176:            "  assert(arr1.length == arr2.length);\n"
        -:  177:            "  for(let i = 0; i < arr1.length; i++) {\n"
        -:  178:            "    assert(arr1[i] === arr2[i]);\n"
        -:  179:            "  }\n"
        -:  180:            "}\n");
        -:  181:
    #####:  182:  run_eval ("var map = new Map();\n"
        -:  183:            "map.set(1, 3.14);\n"
        -:  184:            "map.set(2, true);\n"
        -:  185:            "map.set(3, 'foo');\n"
        -:  186:            "var set = new Set();\n"
        -:  187:            "set.add(3.14);\n"
        -:  188:            "set.add(true);\n"
        -:  189:            "set.add('foo');\n"
        -:  190:            "var obj = { x:3, y:'foo'};\n"
        -:  191:            "var b_int = 1n;\n"
        -:  192:            "var obj_bint_map = new Map();\n"
        -:  193:            "obj_bint_map.set(1, obj);\n"
        -:  194:            "obj_bint_map.set(2, b_int);\n");
        -:  195:
    #####:  196:  run_eval ("var result = create_array_from_container(map, true);\n"
        -:  197:            "test_values(result, [1, 3.14, 2, true, 3, 'foo']);");
        -:  198:
    #####:  199:  run_eval ("var result = create_array_from_container(set, false);\n"
        -:  200:            "test_values(result, [3.14, true, 'foo']);");
        -:  201:
    #####:  202:  run_eval ("var result = create_array_from_container(map.entries(), true);\n"
        -:  203:            "test_values(result, [1, 3.14, 2, true, 3, 'foo']);");
        -:  204:
    #####:  205:  run_eval ("var result = create_array_from_container(map.keys(), false);\n"
        -:  206:            "test_values(result, [1, 2, 3,]);");
        -:  207:
    #####:  208:  run_eval ("var result = create_array_from_container(map.values(), false);\n"
        -:  209:            "test_values(result, [3.14, true, 'foo']);");
        -:  210:
    #####:  211:  run_eval ("var result = create_array_from_container(obj_bint_map, true)\n"
        -:  212:            "test_values(result, [1, obj, 2, b_int]);");
        -:  213:
    #####:  214:  run_eval ("var map = new Map();\n"
        -:  215:            "map.set(1, 1);\n"
        -:  216:            "var iter = map.entries();\n"
        -:  217:            "iter.next();\n"
        -:  218:            "var result = create_array_from_container(iter, true);\n"
        -:  219:            "assert(Array.isArray(result));\n"
        -:  220:            "assert(result.length == 0);");
        -:  221:
    #####:  222:  run_eval ("var ws = new WeakSet();\n"
        -:  223:            "var foo = {};\n"
        -:  224:            "var bar = {};\n"
        -:  225:            "ws.add(foo);\n"
        -:  226:            "ws.add(bar);\n"
        -:  227:            "var result = create_array_from_container(ws, false);\n"
        -:  228:            "test_values(result, [foo, bar]);\n");
        -:  229:
    #####:  230:  run_eval ("var ws = new WeakMap();\n"
        -:  231:            "var foo = {};\n"
        -:  232:            "var bar = {};\n"
        -:  233:            "ws.set(foo, 37);\n"
        -:  234:            "ws.set(bar, 'asd');\n"
        -:  235:            "var result = create_array_from_container(ws, true);\n"
        -:  236:            "test_values(result, [foo, 37, bar, 'asd']);\n");
        -:  237:
    #####:  238:  run_eval_error ("var iter = null;\n"
        -:  239:                  "var result = create_array_from_container(iter, false);\n"
        -:  240:                  "assert(result instanceof Error);");
        -:  241:
    #####:  242:  run_eval_error ("var iter = 3;\n"
        -:  243:                  "var result = create_array_from_container(iter, false);\n"
        -:  244:                  "assert(result instanceof Error);");
        -:  245:
    #####:  246:  run_eval_error ("var iter = [3.14, true, 'foo'].entries();\n"
        -:  247:                  "var result = create_array_from_container(iter, false);\n"
        -:  248:                  "assert(result instanceof Error);");
        -:  249:
    #####:  250:  jerry_cleanup ();
    #####:  251:  return 0;
        -:  252:} /* main */
