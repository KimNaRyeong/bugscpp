        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-referenceerror.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-conversion.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-builtin-helpers.h"
        -:   24:#include "ecma-objects.h"
        -:   25:#include "ecma-function-object.h"
        -:   26:#include "jrt.h"
        -:   27:#include "jcontext.h"
        -:   28:
        -:   29:#if JERRY_BUILTIN_ERRORS
        -:   30:
        -:   31:#define ECMA_BUILTINS_INTERNAL
        -:   32:#include "ecma-builtins-internal.h"
        -:   33:
        -:   34:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-referenceerror.inc.h"
        -:   35:#define BUILTIN_UNDERSCORED_ID reference_error
        -:   36:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   37:
        -:   38:/** \addtogroup ecma ECMA
        -:   39: * @{
        -:   40: *
        -:   41: * \addtogroup ecmabuiltins
        -:   42: * @{
        -:   43: *
        -:   44: * \addtogroup referenceerror ECMA ReferenceError object built-in
        -:   45: * @{
        -:   46: */
        -:   47:
        -:   48:/**
        -:   49: * Handle calling [[Call]] of built-in ReferenceError object
        -:   50: *
        -:   51: * @return ecma value
        -:   52: */
        -:   53:ecma_value_t
    #####:   54:ecma_builtin_reference_error_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   55:                                            uint32_t arguments_list_len) /**< number of arguments */
        -:   56:{
    #####:   57:  return ecma_builtin_helper_error_dispatch_call (JERRY_ERROR_REFERENCE, arguments_list_p, arguments_list_len);
        -:   58:} /* ecma_builtin_reference_error_dispatch_call */
        -:   59:
        -:   60:/**
        -:   61: * Handle calling [[Construct]] of built-in ReferenceError object
        -:   62: *
        -:   63: * @return ecma value
        -:   64: */
        -:   65:ecma_value_t
    #####:   66:ecma_builtin_reference_error_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   67:                                                 uint32_t arguments_list_len) /**< number of arguments */
        -:   68:{
        -:   69:#if !JERRY_ESNEXT
    #####:   70:  return ecma_builtin_reference_error_dispatch_call (arguments_list_p, arguments_list_len);
        -:   71:#else /* JERRY_ESNEXT */
    #####:   72:  ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (JERRY_CONTEXT (current_new_target_p),
        -:   73:                                                                   ECMA_BUILTIN_ID_REFERENCE_ERROR_PROTOTYPE);
        -:   74:
    #####:   75:  if (proto_p == NULL)
        -:   76:  {
    #####:   77:    return ECMA_VALUE_ERROR;
        -:   78:  }
        -:   79:
    #####:   80:  ecma_value_t result = ecma_builtin_reference_error_dispatch_call (arguments_list_p, arguments_list_len);
        -:   81:
    #####:   82:  if (!ECMA_IS_VALUE_ERROR (result))
        -:   83:  {
    #####:   84:    ecma_object_t *object_p = ecma_get_object_from_value (result);
    #####:   85:    ECMA_SET_NON_NULL_POINTER (object_p->u2.prototype_cp, proto_p);
        -:   86:  }
        -:   87:
    #####:   88:  ecma_deref_object (proto_p);
        -:   89:
    #####:   90:  return result;
        -:   91:#endif /* JERRY_ESNEXT */
        -:   92:} /* ecma_builtin_reference_error_dispatch_construct */
        -:   93:
        -:   94:/**
        -:   95: * @}
        -:   96: * @}
        -:   97: * @}
        -:   98: */
        -:   99:
        -:  100:#endif /* JERRY_BUILTIN_ERRORS */
