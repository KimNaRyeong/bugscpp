        -:    0:Source:/home/workspace/tests/unit-core/test-module.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <string.h>
        -:   17:
        -:   18:#include "jerryscript.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static void
    #####:   22:compare_specifier (jerry_value_t specifier, /* string value */
        -:   23:                   int id) /* module id */
        -:   24:{
    #####:   25:  jerry_char_t string[] = "XX_module.mjs";
        -:   26:
    #####:   27:  TEST_ASSERT (id >= 1 && id <= 99 && string[0] == 'X' && string[1] == 'X');
        -:   28:
    #####:   29:  string[0] = (jerry_char_t) ((id / 10) + '0');
    #####:   30:  string[1] = (jerry_char_t) ((id % 10) + '0');
        -:   31:
    #####:   32:  jerry_size_t length = (jerry_size_t) (sizeof (string) - 1);
        -:   33:  jerry_char_t buffer[sizeof (string) - 1];
        -:   34:
    #####:   35:  TEST_ASSERT (jerry_value_is_string (specifier));
    #####:   36:  TEST_ASSERT (jerry_get_string_size (specifier) == length);
        -:   37:
    #####:   38:  TEST_ASSERT (jerry_string_to_char_buffer (specifier, buffer, length) == length);
    #####:   39:  TEST_ASSERT (memcmp (buffer, string, length) == 0);
    #####:   40:} /* compare_specifier */
        -:   41:
        -:   42:static void
    #####:   43:compare_property (jerry_value_t namespace_object, /**< namespace object */
        -:   44:                  const char *name_p, /**< property name */
        -:   45:                  double expected_value) /**< property value (number for simplicity) */
        -:   46:{
    #####:   47:  jerry_value_t name = jerry_create_string ((const jerry_char_t *) name_p);
    #####:   48:  jerry_value_t result = jerry_get_property (namespace_object, name);
        -:   49:
    #####:   50:  TEST_ASSERT (jerry_value_is_number (result));
    #####:   51:  TEST_ASSERT (jerry_get_number_value (result) == expected_value);
        -:   52:
    #####:   53:  jerry_release_value (result);
    #####:   54:  jerry_release_value (name);
    #####:   55:} /* compare_property */
        -:   56:
        -:   57:static jerry_value_t
    #####:   58:create_module (int id) /**< module id */
        -:   59:{
        -:   60:  jerry_parse_options_t module_parse_options;
    #####:   61:  module_parse_options.options = JERRY_PARSE_MODULE;
        -:   62:
        -:   63:  jerry_value_t result;
        -:   64:
    #####:   65:  if (id == 0)
        -:   66:  {
    #####:   67:    jerry_char_t source[] = "export var a = 7";
        -:   68:
    #####:   69:    result = jerry_parse (source, sizeof (source) - 1, &module_parse_options);
        -:   70:  }
        -:   71:  else
        -:   72:  {
    #####:   73:    jerry_char_t source[] = "export {a} from 'XX_module.mjs'";
        -:   74:
    #####:   75:    TEST_ASSERT (id >= 1 && id <= 99 && source[17] == 'X' && source[18] == 'X');
        -:   76:
    #####:   77:    source[17] = (jerry_char_t) ((id / 10) + '0');
    #####:   78:    source[18] = (jerry_char_t) ((id % 10) + '0');
        -:   79:
    #####:   80:    result = jerry_parse (source, sizeof (source) - 1, &module_parse_options);
        -:   81:  }
        -:   82:
    #####:   83:  TEST_ASSERT (!jerry_value_is_error (result));
    #####:   84:  return result;
        -:   85:} /* create_module */
        -:   86:
        -:   87:static int counter = 0;
        -:   88:static jerry_value_t module;
        -:   89:
        -:   90:static jerry_value_t
    #####:   91:resolve_callback1 (const jerry_value_t specifier, /**< module specifier */
        -:   92:                   const jerry_value_t referrer, /**< parent module */
        -:   93:                   void *user_p) /**< user data */
        -:   94:{
    #####:   95:  TEST_ASSERT (user_p == (void *) &module);
    #####:   96:  TEST_ASSERT (referrer == module);
    #####:   97:  compare_specifier (specifier, 1);
        -:   98:
    #####:   99:  counter++;
    #####:  100:  return counter == 1 ? jerry_create_number (7) : jerry_create_object ();
        -:  101:} /* resolve_callback1 */
        -:  102:
        -:  103:static jerry_value_t prev_module;
        -:  104:static bool terminate_with_error;
        -:  105:
        -:  106:static jerry_value_t
    #####:  107:resolve_callback2 (const jerry_value_t specifier, /**< module specifier */
        -:  108:                   const jerry_value_t referrer, /**< parent module */
        -:  109:                   void *user_p) /**< user data */
        -:  110:{
    #####:  111:  TEST_ASSERT (prev_module == referrer);
    #####:  112:  TEST_ASSERT (user_p == NULL);
        -:  113:
    #####:  114:  compare_specifier (specifier, ++counter);
        -:  115:
    #####:  116:  if (counter >= 32)
        -:  117:  {
    #####:  118:    if (terminate_with_error)
        -:  119:    {
    #####:  120:      return jerry_create_error (JERRY_ERROR_RANGE, (const jerry_char_t *) "Module not found");
        -:  121:    }
        -:  122:
    #####:  123:    return create_module (0);
        -:  124:  }
        -:  125:
    #####:  126:  prev_module = create_module (counter + 1);
    #####:  127:  return prev_module;
        -:  128:} /* resolve_callback2 */
        -:  129:
        -:  130:static jerry_value_t
    #####:  131:resolve_callback3 (const jerry_value_t specifier, /**< module specifier */
        -:  132:                   const jerry_value_t referrer, /**< parent module */
        -:  133:                   void *user_p) /**< user data */
        -:  134:{
        -:  135:  (void) specifier;
        -:  136:  (void) referrer;
        -:  137:  (void) user_p;
        -:  138:
    #####:  139:  TEST_ASSERT (false);
        -:  140:} /* resolve_callback3 */
        -:  141:
        -:  142:static jerry_value_t
    #####:  143:native_module_evaluate (const jerry_value_t native_module) /**< native module */
        -:  144:{
    #####:  145:  ++counter;
        -:  146:
    #####:  147:  TEST_ASSERT (jerry_module_get_state (module) == JERRY_MODULE_STATE_EVALUATING);
        -:  148:
    #####:  149:  jerry_value_t exp_val = jerry_create_string ((const jerry_char_t *) "exp");
    #####:  150:  jerry_value_t other_exp_val = jerry_create_string ((const jerry_char_t *) "other_exp");
        -:  151:  /* The native module has no such export. */
    #####:  152:  jerry_value_t no_exp_val = jerry_create_string ((const jerry_char_t *) "no_exp");
        -:  153:
    #####:  154:  jerry_value_t result = jerry_native_module_get_export (native_module, exp_val);
    #####:  155:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  156:  jerry_release_value (result);
        -:  157:
    #####:  158:  result = jerry_native_module_get_export (native_module, other_exp_val);
    #####:  159:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  160:  jerry_release_value (result);
        -:  161:
    #####:  162:  result = jerry_native_module_get_export (native_module, no_exp_val);
    #####:  163:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  164:  TEST_ASSERT (jerry_get_error_type (result) == JERRY_ERROR_REFERENCE);
    #####:  165:  jerry_release_value (result);
        -:  166:
    #####:  167:  jerry_value_t export = jerry_create_number (3.5);
    #####:  168:  result = jerry_native_module_set_export (native_module, exp_val, export);
    #####:  169:  TEST_ASSERT (jerry_value_is_boolean (result) && jerry_value_is_true (result));
    #####:  170:  jerry_release_value (result);
    #####:  171:  jerry_release_value (export);
        -:  172:
    #####:  173:  export = jerry_create_string ((const jerry_char_t *) "str");
    #####:  174:  result = jerry_native_module_set_export (native_module, other_exp_val, export);
    #####:  175:  TEST_ASSERT (jerry_value_is_boolean (result) && jerry_value_is_true (result));
    #####:  176:  jerry_release_value (result);
    #####:  177:  jerry_release_value (export);
        -:  178:
    #####:  179:  result = jerry_native_module_set_export (native_module, no_exp_val, no_exp_val);
    #####:  180:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  181:  TEST_ASSERT (jerry_get_error_type (result) == JERRY_ERROR_REFERENCE);
    #####:  182:  jerry_release_value (result);
        -:  183:
    #####:  184:  result = jerry_native_module_get_export (native_module, exp_val);
    #####:  185:  TEST_ASSERT (jerry_value_is_number (result) && jerry_get_number_value (result) == 3.5);
    #####:  186:  jerry_release_value (result);
        -:  187:
    #####:  188:  result = jerry_native_module_get_export (native_module, other_exp_val);
    #####:  189:  TEST_ASSERT (jerry_value_is_string (result));
    #####:  190:  jerry_release_value (result);
        -:  191:
    #####:  192:  jerry_release_value (exp_val);
    #####:  193:  jerry_release_value (other_exp_val);
    #####:  194:  jerry_release_value (no_exp_val);
        -:  195:
    #####:  196:  if (counter == 4)
        -:  197:  {
    #####:  198:    ++counter;
    #####:  199:    return jerry_create_error (JERRY_ERROR_COMMON, (const jerry_char_t *) "Ooops!");
        -:  200:  }
        -:  201:
    #####:  202:  return jerry_create_undefined ();
        -:  203:} /* native_module_evaluate */
        -:  204:
        -:  205:static jerry_value_t
    #####:  206:resolve_callback4 (const jerry_value_t specifier, /**< module specifier */
        -:  207:                   const jerry_value_t referrer, /**< parent module */
        -:  208:                   void *user_p) /**< user data */
        -:  209:{
        -:  210:  (void) specifier;
        -:  211:  (void) referrer;
        -:  212:
    #####:  213:  ++counter;
        -:  214:
    #####:  215:  jerry_value_t exports[2] =
        -:  216:  {
    #####:  217:    jerry_create_string ((const jerry_char_t *) "exp"),
    #####:  218:    jerry_create_string ((const jerry_char_t *) "other_exp")
        -:  219:  };
        -:  220:
    #####:  221:  jerry_value_t native_module = jerry_native_module_create (native_module_evaluate, exports, 2);
    #####:  222:  TEST_ASSERT (!jerry_value_is_error (native_module));
        -:  223:
    #####:  224:  jerry_release_value (exports[0]);
    #####:  225:  jerry_release_value (exports[1]);
        -:  226:
    #####:  227:  *((jerry_value_t *) user_p) = jerry_acquire_value (native_module);
    #####:  228:  return native_module;
        -:  229:} /* resolve_callback4 */
        -:  230:
        -:  231:static void
    #####:  232:module_state_changed (jerry_module_state_t new_state, /**< new state of the module */
        -:  233:                      const jerry_value_t module_val, /**< a module whose state is changed */
        -:  234:                      const jerry_value_t value, /**< value argument */
        -:  235:                      void *user_p) /**< user pointer */
        -:  236:{
    #####:  237:  TEST_ASSERT (jerry_module_get_state (module_val) == new_state);
    #####:  238:  TEST_ASSERT (module_val == module);
    #####:  239:  TEST_ASSERT (user_p == (void *) &counter);
        -:  240:
    #####:  241:  ++counter;
        -:  242:
    #####:  243:  switch (counter)
        -:  244:  {
    #####:  245:    case 1:
        -:  246:    case 3:
        -:  247:    {
    #####:  248:      TEST_ASSERT (new_state == JERRY_MODULE_STATE_LINKED);
    #####:  249:      TEST_ASSERT (jerry_value_is_undefined (value));
        -:  250:      break;
        -:  251:    }
    #####:  252:    case 2:
        -:  253:    {
    #####:  254:      TEST_ASSERT (new_state == JERRY_MODULE_STATE_EVALUATED);
    #####:  255:      TEST_ASSERT (jerry_value_is_number (value) && jerry_get_number_value (value) == 33.5);
        -:  256:      break;
        -:  257:    }
    #####:  258:    default:
        -:  259:    {
    #####:  260:      TEST_ASSERT (counter == 4);
    #####:  261:      TEST_ASSERT (new_state == JERRY_MODULE_STATE_ERROR);
    #####:  262:      TEST_ASSERT (jerry_value_is_number (value) && jerry_get_number_value (value) == -5.5);
        -:  263:      break;
        -:  264:    }
        -:  265:  }
    #####:  266:} /* module_state_changed */
        -:  267:
        -:  268:static jerry_value_t
    #####:  269:resolve_callback5 (const jerry_value_t specifier, /**< module specifier */
        -:  270:                   const jerry_value_t referrer, /**< parent module */
        -:  271:                   void *user_p) /**< user data */
        -:  272:{
        -:  273:  (void) specifier;
        -:  274:  (void) user_p;
        -:  275:
        -:  276:  /* This circular reference is valid. However, import resolving triggers
        -:  277:   * a SyntaxError, because the module does not export a default binding. */
    #####:  278:  return referrer;
        -:  279:} /* resolve_callback5 */
        -:  280:
        -:  281:int
    #####:  282:main (void)
        -:  283:{
    #####:  284:  jerry_init (JERRY_INIT_EMPTY);
        -:  285:
    #####:  286:  if (!jerry_is_feature_enabled (JERRY_FEATURE_MODULE))
        -:  287:  {
    #####:  288:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Module is disabled!\n");
    #####:  289:    jerry_cleanup ();
    #####:  290:    return 0;
        -:  291:  }
        -:  292:
    #####:  293:  jerry_value_t number = jerry_create_number (5);
    #####:  294:  jerry_value_t object = jerry_create_object ();
        -:  295:
    #####:  296:  jerry_value_t result = jerry_module_link (number, resolve_callback1, NULL);
    #####:  297:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  298:  jerry_release_value (result);
        -:  299:
    #####:  300:  result = jerry_module_link (object, resolve_callback1, NULL);
    #####:  301:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  302:  jerry_release_value (result);
        -:  303:
    #####:  304:  module = create_module (1);
        -:  305:
        -:  306:  /* After an error, module must remain in unlinked mode. */
    #####:  307:  result = jerry_module_link (module, resolve_callback1, (void *) &module);
    #####:  308:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  309:  TEST_ASSERT (counter == 1);
    #####:  310:  jerry_release_value (result);
        -:  311:
    #####:  312:  result = jerry_module_link (module, resolve_callback1, (void *) &module);
    #####:  313:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  314:  TEST_ASSERT (counter == 2);
    #####:  315:  jerry_release_value (result);
        -:  316:
    #####:  317:  prev_module = module;
    #####:  318:  counter = 0;
    #####:  319:  terminate_with_error = true;
    #####:  320:  result = jerry_module_link (module, resolve_callback2, NULL);
    #####:  321:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  322:  TEST_ASSERT (counter == 32);
    #####:  323:  jerry_release_value (result);
        -:  324:
        -:  325:  /* The successfully resolved modules is kept around in unlinked state. */
    #####:  326:  jerry_gc (JERRY_GC_PRESSURE_HIGH);
        -:  327:
    #####:  328:  counter = 31;
    #####:  329:  terminate_with_error = false;
    #####:  330:  result = jerry_module_link (module, resolve_callback2, NULL);
    #####:  331:  TEST_ASSERT (jerry_value_is_boolean (result) && jerry_value_is_true (result));
    #####:  332:  TEST_ASSERT (counter == 32);
    #####:  333:  jerry_release_value (result);
        -:  334:
    #####:  335:  TEST_ASSERT (jerry_module_get_state (module) == JERRY_MODULE_STATE_LINKED);
    #####:  336:  TEST_ASSERT (jerry_module_get_number_of_requests (module) == 1);
    #####:  337:  result = jerry_module_get_request (module, 0);
    #####:  338:  TEST_ASSERT (jerry_module_get_state (module) == JERRY_MODULE_STATE_LINKED);
    #####:  339:  jerry_release_value (result);
        -:  340:
    #####:  341:  jerry_release_value (module);
        -:  342:
    #####:  343:  module = create_module (1);
        -:  344:
    #####:  345:  prev_module = module;
    #####:  346:  counter = 0;
    #####:  347:  terminate_with_error = false;
    #####:  348:  result = jerry_module_link (module, resolve_callback2, NULL);
    #####:  349:  TEST_ASSERT (jerry_value_is_boolean (result) && jerry_value_is_true (result));
    #####:  350:  TEST_ASSERT (counter == 32);
    #####:  351:  jerry_release_value (result);
    #####:  352:  jerry_release_value (module);
        -:  353:
    #####:  354:  TEST_ASSERT (jerry_module_get_state (number) == JERRY_MODULE_STATE_INVALID);
        -:  355:
        -:  356:  jerry_parse_options_t module_parse_options;
    #####:  357:  module_parse_options.options = JERRY_PARSE_MODULE;
        -:  358:
    #####:  359:  jerry_char_t source1[] = TEST_STRING_LITERAL (
        -:  360:    "import a from '16_module.mjs'\n"
        -:  361:    "export * from '07_module.mjs'\n"
        -:  362:    "export * from '44_module.mjs'\n"
        -:  363:    "import * as b from '36_module.mjs'\n"
        -:  364:  );
    #####:  365:  module = jerry_parse (source1, sizeof (source1) - 1, &module_parse_options);
    #####:  366:  TEST_ASSERT (!jerry_value_is_error (module));
    #####:  367:  TEST_ASSERT (jerry_module_get_state (module) == JERRY_MODULE_STATE_UNLINKED);
        -:  368:
    #####:  369:  TEST_ASSERT (jerry_module_get_number_of_requests (number) == 0);
    #####:  370:  TEST_ASSERT (jerry_module_get_number_of_requests (module) == 4);
        -:  371:
    #####:  372:  result = jerry_module_get_request (object, 0);
    #####:  373:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  374:  jerry_release_value (result);
        -:  375:
    #####:  376:  result = jerry_module_get_request (module, 0);
    #####:  377:  compare_specifier (result, 16);
    #####:  378:  jerry_release_value (result);
        -:  379:
    #####:  380:  result = jerry_module_get_request (module, 1);
    #####:  381:  compare_specifier (result, 7);
    #####:  382:  jerry_release_value (result);
        -:  383:
    #####:  384:  result = jerry_module_get_request (module, 2);
    #####:  385:  compare_specifier (result, 44);
    #####:  386:  jerry_release_value (result);
        -:  387:
    #####:  388:  result = jerry_module_get_request (module, 3);
    #####:  389:  compare_specifier (result, 36);
    #####:  390:  jerry_release_value (result);
        -:  391:
    #####:  392:  result = jerry_module_get_request (module, 4);
    #####:  393:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  394:  jerry_release_value (result);
        -:  395:
    #####:  396:  jerry_release_value (module);
        -:  397:
    #####:  398:  result = jerry_module_get_namespace (number);
    #####:  399:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  400:  jerry_release_value (result);
        -:  401:
    #####:  402:  jerry_char_t source2[] = TEST_STRING_LITERAL (
        -:  403:    "export let a = 6\n"
        -:  404:    "export let b = 8.5\n"
        -:  405:  );
    #####:  406:  module = jerry_parse (source2, sizeof (source2) - 1, &module_parse_options);
    #####:  407:  TEST_ASSERT (!jerry_value_is_error (module));
    #####:  408:  TEST_ASSERT (jerry_module_get_state (module) == JERRY_MODULE_STATE_UNLINKED);
        -:  409:
    #####:  410:  result = jerry_module_link (module, resolve_callback3, NULL);
    #####:  411:  TEST_ASSERT (!jerry_value_is_error (result));
    #####:  412:  jerry_release_value (result);
        -:  413:
    #####:  414:  TEST_ASSERT (jerry_module_get_state (module) == JERRY_MODULE_STATE_LINKED);
        -:  415:
    #####:  416:  result = jerry_module_evaluate (module);
    #####:  417:  TEST_ASSERT (!jerry_value_is_error (result));
    #####:  418:  jerry_release_value (result);
        -:  419:
    #####:  420:  TEST_ASSERT (jerry_module_get_state (module) == JERRY_MODULE_STATE_EVALUATED);
        -:  421:
    #####:  422:  result = jerry_module_get_namespace (module);
    #####:  423:  TEST_ASSERT (jerry_value_is_object (result));
    #####:  424:  compare_property (result, "a", 6);
    #####:  425:  compare_property (result, "b", 8.5);
    #####:  426:  jerry_release_value (result);
        -:  427:
    #####:  428:  jerry_release_value (module);
        -:  429:
    #####:  430:  module = jerry_native_module_create (NULL, &object, 1);
    #####:  431:  TEST_ASSERT (jerry_value_is_error (module));
    #####:  432:  jerry_release_value (module);
        -:  433:
    #####:  434:  module = jerry_native_module_create (NULL, NULL, 0);
    #####:  435:  TEST_ASSERT (!jerry_value_is_error (module));
    #####:  436:  TEST_ASSERT (jerry_module_get_state (module) == JERRY_MODULE_STATE_UNLINKED);
        -:  437:
    #####:  438:  result = jerry_native_module_get_export (object, number);
    #####:  439:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  440:  jerry_release_value (result);
        -:  441:
    #####:  442:  result = jerry_native_module_set_export (module, number, number);
    #####:  443:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  444:  jerry_release_value (result);
        -:  445:
    #####:  446:  jerry_release_value (module);
        -:  447:
        -:  448:  /* Valid identifier. */
    #####:  449:  jerry_value_t export = jerry_create_string ((const jerry_char_t *) "\xed\xa0\x83\xed\xb2\x80");
        -:  450:
    #####:  451:  module = jerry_native_module_create (NULL, &export, 1);
    #####:  452:  TEST_ASSERT (!jerry_value_is_error (module));
    #####:  453:  TEST_ASSERT (jerry_module_get_state (module) == JERRY_MODULE_STATE_UNLINKED);
        -:  454:
    #####:  455:  result = jerry_module_link (module, NULL, NULL);
    #####:  456:  TEST_ASSERT (jerry_value_is_boolean (result) && jerry_value_is_true (result));
    #####:  457:  jerry_release_value (result);
        -:  458:
    #####:  459:  result = jerry_module_evaluate (module);
    #####:  460:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  461:  jerry_release_value (result);
        -:  462:
    #####:  463:  jerry_release_value (module);
    #####:  464:  jerry_release_value (export);
        -:  465:
        -:  466:  /* Invalid identifiers. */
    #####:  467:  export = jerry_create_string ((const jerry_char_t *) "a+");
    #####:  468:  module = jerry_native_module_create (NULL, &export, 1);
    #####:  469:  TEST_ASSERT (jerry_value_is_error (module));
    #####:  470:  jerry_release_value (module);
    #####:  471:  jerry_release_value (export);
        -:  472:
    #####:  473:  export = jerry_create_string ((const jerry_char_t *) "\xed\xa0\x80");
    #####:  474:  module = jerry_native_module_create (NULL, &export, 1);
    #####:  475:  TEST_ASSERT (jerry_value_is_error (module));
    #####:  476:  jerry_release_value (module);
    #####:  477:  jerry_release_value (export);
        -:  478:
    #####:  479:  counter = 0;
        -:  480:
    #####:  481:  for (int i = 0; i < 2; i++)
        -:  482:  {
    #####:  483:    jerry_char_t source3[] = TEST_STRING_LITERAL (
        -:  484:      "import {exp, other_exp as other} from 'native.js'\n"
        -:  485:      "import * as namespace from 'native.js'\n"
        -:  486:      "if (exp !== 3.5 || other !== 'str') { throw 'Assertion failed!' }\n"
        -:  487:      "if (namespace.exp !== 3.5 || namespace.other_exp !== 'str') { throw 'Assertion failed!' }\n"
        -:  488:    );
    #####:  489:    module = jerry_parse (source3, sizeof (source3) - 1, &module_parse_options);
    #####:  490:    TEST_ASSERT (!jerry_value_is_error (module));
    #####:  491:    TEST_ASSERT (jerry_module_get_state (module) == JERRY_MODULE_STATE_UNLINKED);
        -:  492:
        -:  493:    jerry_value_t native_module;
        -:  494:
    #####:  495:    result = jerry_module_link (module, resolve_callback4, (void *) &native_module);
    #####:  496:    TEST_ASSERT (!jerry_value_is_error (result));
    #####:  497:    jerry_release_value (result);
        -:  498:
    #####:  499:    TEST_ASSERT (counter == i * 2 + 1);
    #####:  500:    TEST_ASSERT (jerry_module_get_state (module) == JERRY_MODULE_STATE_LINKED);
    #####:  501:    TEST_ASSERT (jerry_module_get_state (native_module) == JERRY_MODULE_STATE_LINKED);
        -:  502:
    #####:  503:    result = jerry_module_evaluate (module);
        -:  504:
    #####:  505:    if (i == 0)
        -:  506:    {
    #####:  507:      TEST_ASSERT (!jerry_value_is_error (result));
    #####:  508:      TEST_ASSERT (jerry_module_get_state (module) == JERRY_MODULE_STATE_EVALUATED);
    #####:  509:      TEST_ASSERT (jerry_module_get_state (native_module) == JERRY_MODULE_STATE_EVALUATED);
    #####:  510:      TEST_ASSERT (counter == 2);
        -:  511:    }
        -:  512:    else
        -:  513:    {
    #####:  514:      TEST_ASSERT (jerry_value_is_error (result));
    #####:  515:      TEST_ASSERT (jerry_module_get_state (module) == JERRY_MODULE_STATE_ERROR);
    #####:  516:      TEST_ASSERT (jerry_module_get_state (native_module) == JERRY_MODULE_STATE_ERROR);
    #####:  517:      TEST_ASSERT (counter == 5);
        -:  518:    }
        -:  519:
    #####:  520:    jerry_release_value (result);
    #####:  521:    jerry_release_value (module);
    #####:  522:    jerry_release_value (native_module);
        -:  523:  }
        -:  524:
    #####:  525:  jerry_release_value (object);
    #####:  526:  jerry_release_value (number);
        -:  527:
    #####:  528:  counter = 0;
    #####:  529:  jerry_module_set_state_changed_callback (module_state_changed, (void *) &counter);
        -:  530:
    #####:  531:  jerry_char_t source4[] = TEST_STRING_LITERAL (
        -:  532:    "33.5\n"
        -:  533:  );
    #####:  534:  module = jerry_parse (source4, sizeof (source4) - 1, &module_parse_options);
        -:  535:
    #####:  536:  result = jerry_module_link (module, NULL, NULL);
    #####:  537:  TEST_ASSERT (!jerry_value_is_error (result));
    #####:  538:  jerry_release_value (result);
        -:  539:
    #####:  540:  result = jerry_module_evaluate (module);
    #####:  541:  TEST_ASSERT (!jerry_value_is_error (result));
    #####:  542:  jerry_release_value (result);
        -:  543:
    #####:  544:  jerry_release_value (module);
        -:  545:
    #####:  546:  jerry_char_t source5[] = TEST_STRING_LITERAL (
        -:  547:    "throw -5.5\n"
        -:  548:  );
    #####:  549:  module = jerry_parse (source5, sizeof (source5) - 1, &module_parse_options);
        -:  550:
    #####:  551:  result = jerry_module_link (module, NULL, NULL);
    #####:  552:  TEST_ASSERT (!jerry_value_is_error (result));
    #####:  553:  jerry_release_value (result);
        -:  554:
    #####:  555:  result = jerry_module_evaluate (module);
    #####:  556:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  557:  jerry_release_value (result);
        -:  558:
    #####:  559:  jerry_release_value (module);
        -:  560:
    #####:  561:  jerry_module_set_state_changed_callback (NULL, NULL);
        -:  562:
    #####:  563:  TEST_ASSERT (counter == 4);
        -:  564:
    #####:  565:  jerry_char_t source6[] = TEST_STRING_LITERAL (
        -:  566:    "import a from 'self'\n"
        -:  567:  );
    #####:  568:  module = jerry_parse (source6, sizeof (source6) - 1, &module_parse_options);
        -:  569:
    #####:  570:  result = jerry_module_link (module, resolve_callback5, NULL);
    #####:  571:  TEST_ASSERT (jerry_value_is_error (result)
        -:  572:               && jerry_get_error_type (result) == JERRY_ERROR_SYNTAX);
    #####:  573:  jerry_release_value (result);
        -:  574:
    #####:  575:  jerry_cleanup ();
        -:  576:
    #####:  577:  return 0;
        -:  578:} /* main */
