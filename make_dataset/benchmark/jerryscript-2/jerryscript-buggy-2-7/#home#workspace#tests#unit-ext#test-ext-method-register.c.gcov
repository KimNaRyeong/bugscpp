        -:    0:Source:/home/workspace/tests/unit-ext/test-ext-method-register.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:/**
        -:   17: * Unit test for jerry-ext/handler property registration
        -:   18: */
        -:   19:
        -:   20:#include "jerryscript.h"
        -:   21:#include "jerryscript-ext/handler.h"
        -:   22:#include "test-common.h"
        -:   23:
        -:   24:#include <string.h>
        -:   25:
        -:   26:static jerry_value_t
    #####:   27:method_hello (const jerry_call_info_t *call_info_p, /**< call information */
        -:   28:              const jerry_value_t jargv[], /**< arguments */
        -:   29:              const jerry_length_t jargc) /**< number of arguments */
        -:   30:{
        -:   31:  (void) call_info_p;
        -:   32:  (void) jargv;
    #####:   33:  return jerry_create_number (jargc);
        -:   34:} /* method_hello */
        -:   35:
        -:   36:/**
        -:   37: * Helper method to create a non-configurable property on an object
        -:   38: */
        -:   39:static void
    #####:   40:freeze_property (jerry_value_t target_obj, /**< target object */
        -:   41:                 const char *target_prop) /**< target property name */
        -:   42:{
        -:   43:  // "freeze" property
    #####:   44:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
    #####:   45:  prop_desc.flags |= JERRY_PROP_IS_CONFIGURABLE_DEFINED;
        -:   46:
    #####:   47:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) target_prop);
    #####:   48:  jerry_value_t return_value = jerry_define_own_property (target_obj, prop_name, &prop_desc);
    #####:   49:  TEST_ASSERT (jerry_value_is_boolean (return_value));
    #####:   50:  jerry_release_value (return_value);
    #####:   51:  jerry_release_value (prop_name);
        -:   52:
    #####:   53:  jerry_property_descriptor_free (&prop_desc);
    #####:   54:} /* freeze_property */
        -:   55:
        -:   56:/**
        -:   57: * Test registration of various property values.
        -:   58: */
        -:   59:static void
    #####:   60:test_simple_registration (void)
        -:   61:{
    #####:   62:  jerry_init (JERRY_INIT_EMPTY);
        -:   63:
    #####:   64:  jerry_value_t target_object = jerry_create_object ();
        -:   65:
        -:   66:  // Test simple registration
    #####:   67:  jerryx_property_entry methods[] =
        -:   68:  {
    #####:   69:    JERRYX_PROPERTY_FUNCTION ("hello", method_hello),
    #####:   70:    JERRYX_PROPERTY_NUMBER ("my_number", 42.5),
    #####:   71:    JERRYX_PROPERTY_STRING ("my_str", "super_str"),
    #####:   72:    JERRYX_PROPERTY_STRING_SZ ("my_str_sz", "super_str", 6),
    #####:   73:    JERRYX_PROPERTY_BOOLEAN ("my_bool", true),
    #####:   74:    JERRYX_PROPERTY_BOOLEAN ("my_bool_false", false),
    #####:   75:    JERRYX_PROPERTY_UNDEFINED ("my_non_value"),
        -:   76:    JERRYX_PROPERTY_LIST_END (),
        -:   77:  };
        -:   78:
    #####:   79:  jerryx_register_result register_result = jerryx_set_properties (target_object, methods);
        -:   80:
    #####:   81:  TEST_ASSERT (register_result.registered == 7);
    #####:   82:  TEST_ASSERT (jerry_value_is_undefined (register_result.result));
        -:   83:
    #####:   84:  jerryx_release_property_entry (methods, register_result);
    #####:   85:  jerry_release_value (register_result.result);
        -:   86:
    #####:   87:  jerry_value_t global_obj = jerry_get_global_object ();
    #####:   88:  jerryx_set_property_str (global_obj, "test", target_object);
    #####:   89:  jerry_release_value (target_object);
    #####:   90:  jerry_release_value (global_obj);
        -:   91:
        -:   92:  {
    #####:   93:    const char *test_A = "test.my_number";
    #####:   94:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:   95:    TEST_ASSERT (jerry_value_is_number (result));
    #####:   96:    TEST_ASSERT (jerry_get_number_value (result) == 42.5);
    #####:   97:    jerry_release_value (result);
        -:   98:  }
        -:   99:
        -:  100:  {
    #####:  101:    const char *test_A = "test.my_str_sz === 'super_'";
    #####:  102:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:  103:    TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  104:    TEST_ASSERT (jerry_value_is_true (result));
    #####:  105:    jerry_release_value (result);
        -:  106:  }
        -:  107:
        -:  108:  {
    #####:  109:    const char *test_A = "test.my_str === 'super_str'";
    #####:  110:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:  111:    TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  112:    TEST_ASSERT (jerry_value_is_true (result));
    #####:  113:    jerry_release_value (result);
        -:  114:  }
        -:  115:
        -:  116:  {
    #####:  117:    const char *test_A = "test.my_bool";
    #####:  118:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:  119:    TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  120:    TEST_ASSERT (jerry_value_is_true (result));
    #####:  121:    jerry_release_value (result);
        -:  122:  }
        -:  123:
        -:  124:  {
    #####:  125:    const char *test_A = "test.my_bool_false";
    #####:  126:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:  127:    TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  128:    TEST_ASSERT (jerry_value_is_true (result) == false);
    #####:  129:    jerry_release_value (result);
        -:  130:  }
        -:  131:
        -:  132:  {
    #####:  133:    const char *test_A = "test.my_non_value";
    #####:  134:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:  135:    TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  136:    jerry_release_value (result);
        -:  137:  }
        -:  138:
        -:  139:  {
    #####:  140:    const char *test_A = "test.hello(33, 42, 2);";
    #####:  141:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:  142:    TEST_ASSERT (jerry_value_is_number (result));
    #####:  143:    TEST_ASSERT ((uint32_t) jerry_get_number_value (result) == 3u);
    #####:  144:    jerry_release_value (result);
        -:  145:  }
        -:  146:
        -:  147:  {
    #####:  148:    const char *test_A = "test.hello();";
    #####:  149:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:  150:    TEST_ASSERT (jerry_value_is_number (result));
    #####:  151:    TEST_ASSERT ((uint32_t) jerry_get_number_value (result) == 0u);
    #####:  152:    jerry_release_value (result);
        -:  153:  }
        -:  154:
    #####:  155:  jerry_cleanup ();
    #####:  156:} /* test_simple_registration */
        -:  157:
        -:  158:/**
        -:  159: * Test registration error.
        -:  160: *
        -:  161: * Trying to register a property which is already a non-configurable property
        -:  162: * should result in an error.
        -:  163: */
        -:  164:static void
    #####:  165:test_error_setvalue (void)
        -:  166:{
    #####:  167:  jerry_init (JERRY_INIT_EMPTY);
        -:  168:
    #####:  169:  const char *target_prop = "test_err";
    #####:  170:  jerry_value_t global_obj = jerry_get_global_object ();
    #####:  171:  freeze_property (global_obj, target_prop);
        -:  172:
    #####:  173:  jerry_value_t new_object = jerry_create_object ();
    #####:  174:  jerry_value_t set_result = jerryx_set_property_str (global_obj, target_prop, new_object);
    #####:  175:  TEST_ASSERT (jerry_value_is_error (set_result));
        -:  176:
    #####:  177:  jerry_release_value (set_result);
    #####:  178:  jerry_release_value (new_object);
    #####:  179:  jerry_release_value (global_obj);
        -:  180:
    #####:  181:  jerry_cleanup ();
    #####:  182:} /* test_error_setvalue */
        -:  183:
        -:  184:/**
        -:  185: * Test registration error with jerryx_set_properties.
        -:  186: *
        -:  187: * Trying to register a property which is already a non-configurable property
        -:  188: * should result in an error.
        -:  189: */
        -:  190:static void
    #####:  191:test_error_single_function (void)
        -:  192:{
    #####:  193:  jerry_init (JERRY_INIT_EMPTY);
        -:  194:
    #####:  195:  const char *target_prop = "test_err";
    #####:  196:  jerry_value_t target_object = jerry_create_object ();
    #####:  197:  freeze_property (target_object, target_prop);
        -:  198:
    #####:  199:  jerryx_property_entry methods[] =
        -:  200:  {
    #####:  201:    JERRYX_PROPERTY_FUNCTION (target_prop, method_hello), // This registration should fail
        -:  202:    JERRYX_PROPERTY_LIST_END (),
        -:  203:  };
        -:  204:
    #####:  205:  jerryx_register_result register_result = jerryx_set_properties (target_object, methods);
        -:  206:
    #####:  207:  TEST_ASSERT (register_result.registered == 0);
    #####:  208:  TEST_ASSERT (jerry_value_is_error (register_result.result));
    #####:  209:  jerryx_release_property_entry (methods, register_result);
    #####:  210:  jerry_release_value (register_result.result);
        -:  211:
    #####:  212:  jerry_release_value (target_object);
        -:  213:
    #####:  214:  jerry_cleanup ();
    #####:  215:} /* test_error_single_function */
        -:  216:
        -:  217:/**
        -:  218: * Test to see if jerryx_set_properties exits at the first error.
        -:  219: */
        -:  220:static void
    #####:  221:test_error_multiple_functions (void)
        -:  222:{
    #####:  223:  jerry_init (JERRY_INIT_EMPTY);
        -:  224:
    #####:  225:  const char *prop_ok = "prop_ok";
    #####:  226:  const char *prop_err = "prop_err";
    #####:  227:  const char *prop_not = "prop_not";
    #####:  228:  jerry_value_t target_object = jerry_create_object ();
    #####:  229:  freeze_property (target_object, prop_err);
        -:  230:
    #####:  231:  jerryx_property_entry methods[] =
        -:  232:  {
    #####:  233:    JERRYX_PROPERTY_FUNCTION (prop_ok, method_hello), // This registration is ok
    #####:  234:    JERRYX_PROPERTY_FUNCTION (prop_err, method_hello), // This registration should fail
    #####:  235:    JERRYX_PROPERTY_FUNCTION (prop_not, method_hello), // This registration is not done
        -:  236:    JERRYX_PROPERTY_LIST_END (),
        -:  237:  };
        -:  238:
    #####:  239:  jerryx_register_result register_result = jerryx_set_properties (target_object, methods);
        -:  240:
    #####:  241:  TEST_ASSERT (register_result.registered == 1);
    #####:  242:  TEST_ASSERT (jerry_value_is_error (register_result.result));
        -:  243:
    #####:  244:  jerryx_release_property_entry (methods, register_result);
    #####:  245:  jerry_release_value (register_result.result);
        -:  246:
        -:  247:  {
        -:  248:    // Test if property "prop_ok" is correctly registered.
    #####:  249:    jerry_value_t prop_ok_val = jerry_create_string ((const jerry_char_t *) prop_ok);
    #####:  250:    jerry_value_t prop_ok_exists = jerry_has_own_property (target_object, prop_ok_val);
    #####:  251:    TEST_ASSERT (jerry_value_is_true (prop_ok_exists));
    #####:  252:    jerry_release_value (prop_ok_exists);
        -:  253:
        -:  254:    // Try calling the method
    #####:  255:    jerry_value_t prop_ok_func = jerry_get_property (target_object, prop_ok_val);
    #####:  256:    TEST_ASSERT (jerry_value_is_function (prop_ok_func) == true);
    #####:  257:    jerry_value_t args[2] =
        -:  258:    {
    #####:  259:      jerry_create_number (22),
    #####:  260:      jerry_create_number (-3),
        -:  261:    };
    #####:  262:    jerry_size_t args_cnt = sizeof (args) / sizeof (jerry_value_t);
    #####:  263:    jerry_value_t func_result = jerry_call_function (prop_ok_func,
        -:  264:                                                     jerry_create_undefined (),
        -:  265:                                                     args,
        -:  266:                                                     args_cnt);
    #####:  267:    TEST_ASSERT (jerry_value_is_number (func_result) == true);
    #####:  268:    TEST_ASSERT ((uint32_t) jerry_get_number_value (func_result) == 2u);
    #####:  269:    jerry_release_value (func_result);
    #####:  270:    for (jerry_size_t idx = 0; idx < args_cnt; idx++)
        -:  271:    {
    #####:  272:      jerry_release_value (args[idx]);
        -:  273:    }
    #####:  274:    jerry_release_value (prop_ok_func);
    #####:  275:    jerry_release_value (prop_ok_val);
        -:  276:  }
        -:  277:
        -:  278:  {
        -:  279:    // The "prop_err" should exist - as it was "freezed" - but it should not be a function
    #####:  280:    jerry_value_t prop_err_val = jerry_create_string ((const jerry_char_t *) prop_err);
    #####:  281:    jerry_value_t prop_err_exists = jerry_has_own_property (target_object, prop_err_val);
    #####:  282:    TEST_ASSERT (jerry_value_is_true (prop_err_exists));
    #####:  283:    jerry_release_value (prop_err_exists);
        -:  284:
    #####:  285:    jerry_value_t prop_err_func = jerry_value_is_function (prop_err_val);
    #####:  286:    TEST_ASSERT (jerry_value_is_function (prop_err_func) == false);
    #####:  287:    jerry_release_value (prop_err_val);
        -:  288:  }
        -:  289:
        -:  290:  { // The "prop_not" is not available on the target object
    #####:  291:    jerry_value_t prop_not_val = jerry_create_string ((const jerry_char_t *) prop_not);
    #####:  292:    jerry_value_t prop_not_exists = jerry_has_own_property (target_object, prop_not_val);
    #####:  293:    TEST_ASSERT (jerry_value_is_true (prop_not_exists) == false);
    #####:  294:    jerry_release_value (prop_not_exists);
    #####:  295:    jerry_release_value (prop_not_val);
        -:  296:  }
        -:  297:
    #####:  298:  jerry_release_value (target_object);
        -:  299:
    #####:  300:  jerry_cleanup ();
    #####:  301:} /* test_error_multiple_functions */
        -:  302:
        -:  303:int
    #####:  304:main (void)
        -:  305:{
    #####:  306:  test_simple_registration ();
    #####:  307:  test_error_setvalue ();
    #####:  308:  test_error_single_function ();
    #####:  309:  test_error_multiple_functions ();
        -:  310:  return 0;
        -:  311:} /* main */
