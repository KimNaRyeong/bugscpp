        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-string-object.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-gc.h"
        -:   20:#include "ecma-globals.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:#include "ecma-objects.h"
        -:   23:#include "ecma-objects-general.h"
        -:   24:#include "ecma-string-object.h"
        -:   25:#include "ecma-function-object.h"
        -:   26:#include "jcontext.h"
        -:   27:
        -:   28:/** \addtogroup ecma ECMA
        -:   29: * @{
        -:   30: *
        -:   31: * \addtogroup ecmastringobject ECMA String object related routines
        -:   32: * @{
        -:   33: */
        -:   34:
        -:   35:/**
        -:   36: * String object creation operation.
        -:   37: *
        -:   38: * See also: ECMA-262 v5, 15.5.2.1
        -:   39: *
        -:   40: * @return ecma value
        -:   41: *         Returned value must be freed with ecma_free_value
        -:   42: */
        -:   43:ecma_value_t
    #####:   44:ecma_op_create_string_object (const ecma_value_t *arguments_list_p, /**< list of arguments that
        -:   45:                                                                         are passed to String constructor */
        -:   46:                              uint32_t arguments_list_len) /**< length of the arguments' list */
        -:   47:{
    #####:   48:  JERRY_ASSERT (arguments_list_len == 0
        -:   49:                || arguments_list_p != NULL);
        -:   50:
    #####:   51:  ecma_value_t prim_value = ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY);
        -:   52:
    #####:   53:  if (arguments_list_len > 0)
        -:   54:  {
    #####:   55:    ecma_string_t *str_p = ecma_op_to_string (arguments_list_p[0]);
        -:   56:
    #####:   57:    if (JERRY_UNLIKELY (str_p == NULL))
        -:   58:    {
    #####:   59:      return ECMA_VALUE_ERROR;
        -:   60:    }
        -:   61:
    #####:   62:    prim_value = ecma_make_string_value (str_p);
        -:   63:  }
        -:   64:
        -:   65:  ecma_builtin_id_t proto_id;
        -:   66:#if JERRY_BUILTIN_STRING
    #####:   67:  proto_id = ECMA_BUILTIN_ID_STRING_PROTOTYPE;
        -:   68:#else /* !JERRY_BUILTIN_STRING */
        -:   69:  proto_id = ECMA_BUILTIN_ID_OBJECT_PROTOTYPE;
        -:   70:#endif /* JERRY_BUILTIN_STRING */
    #####:   71:  ecma_object_t *prototype_obj_p = ecma_builtin_get (proto_id);
        -:   72:#if JERRY_ESNEXT
    #####:   73:  ecma_object_t *new_target = JERRY_CONTEXT (current_new_target_p);
    #####:   74:  if (new_target)
        -:   75:  {
    #####:   76:    prototype_obj_p = ecma_op_get_prototype_from_constructor (new_target, proto_id);
    #####:   77:    if (JERRY_UNLIKELY (prototype_obj_p == NULL))
        -:   78:    {
    #####:   79:      return ECMA_VALUE_ERROR;
        -:   80:    }
        -:   81:  }
        -:   82:#endif /* JERRY_ESNEXT */
    #####:   83:  ecma_object_t *object_p = ecma_create_object (prototype_obj_p,
        -:   84:                                                sizeof (ecma_extended_object_t),
        -:   85:                                                ECMA_OBJECT_TYPE_CLASS);
        -:   86:
    #####:   87:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
    #####:   88:  ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_STRING;
    #####:   89:  ext_object_p->u.cls.u3.value = prim_value;
        -:   90:
        -:   91:#if JERRY_ESNEXT
    #####:   92:  if (new_target)
        -:   93:  {
    #####:   94:    ecma_deref_object (prototype_obj_p);
        -:   95:  }
        -:   96:#endif /* JERRY_ESNEXT */
    #####:   97:  return ecma_make_object_value (object_p);
        -:   98:} /* ecma_op_create_string_object */
        -:   99:
        -:  100:/**
        -:  101: * List names of a String object's lazy instantiated properties
        -:  102: *
        -:  103: * @return string values collection
        -:  104: */
        -:  105:void
    #####:  106:ecma_op_string_list_lazy_property_names (ecma_object_t *obj_p, /**< a String object */
        -:  107:                                         ecma_collection_t *prop_names_p, /**< prop name collection */
        -:  108:                                         ecma_property_counter_t *prop_counter_p, /**< property counters */
        -:  109:                                         jerry_property_filter_t filter) /**< property name filter options */
        -:  110:{
    #####:  111:  JERRY_ASSERT (ecma_get_object_base_type (obj_p) == ECMA_OBJECT_BASE_TYPE_CLASS);
        -:  112:
    #####:  113:  if (!(filter & JERRY_PROPERTY_FILTER_EXLCUDE_INTEGER_INDICES))
        -:  114:  {
    #####:  115:    ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
    #####:  116:    JERRY_ASSERT (ext_object_p->u.cls.type == ECMA_OBJECT_CLASS_STRING);
        -:  117:
    #####:  118:    ecma_string_t *prim_value_str_p = ecma_get_string_from_value (ext_object_p->u.cls.u3.value);
        -:  119:
    #####:  120:    lit_utf8_size_t length = ecma_string_get_length (prim_value_str_p);
        -:  121:
    #####:  122:    for (lit_utf8_size_t i = 0; i < length; i++)
        -:  123:    {
    #####:  124:      ecma_string_t *name_p = ecma_new_ecma_string_from_uint32 (i);
        -:  125:
        -:  126:      /* the properties are enumerable (ECMA-262 v5, 15.5.5.2.9) */
    #####:  127:      ecma_collection_push_back (prop_names_p, ecma_make_string_value (name_p));
        -:  128:    }
        -:  129:
    #####:  130:    prop_counter_p->array_index_named_props += length;
        -:  131:  }
        -:  132:
    #####:  133:  if (!(filter & JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS))
        -:  134:  {
    #####:  135:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
    #####:  136:    prop_counter_p->string_named_props++;
        -:  137:  }
    #####:  138:} /* ecma_op_string_list_lazy_property_names */
        -:  139:
        -:  140:/**
        -:  141: * @}
        -:  142: * @}
        -:  143: */
