        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-shared-arraybuffer-prototype.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtin-helpers.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-conversion.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-function-object.h"
        -:   21:#include "ecma-gc.h"
        -:   22:#include "ecma-globals.h"
        -:   23:#include "ecma-helpers.h"
        -:   24:#include "ecma-objects.h"
        -:   25:#include "ecma-shared-arraybuffer-object.h"
        -:   26:#include "ecma-arraybuffer-object.h"
        -:   27:#include "jrt.h"
        -:   28:#include "jrt-libc-includes.h"
        -:   29:
        -:   30:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
        -:   31:
        -:   32:#define ECMA_BUILTINS_INTERNAL
        -:   33:#include "ecma-builtins-internal.h"
        -:   34:
        -:   35:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-shared-arraybuffer-prototype.inc.h"
        -:   36:#define BUILTIN_UNDERSCORED_ID shared_arraybuffer_prototype
        -:   37:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   38:
        -:   39:/** \addtogroup ecma ECMA
        -:   40: * @{
        -:   41: *
        -:   42: * \addtogroup ecmabuiltins
        -:   43: * @{
        -:   44: *
        -:   45: * \addtogroup sharedarraybufferprototype ECMA SharedArrayBuffer.prototype object built-in
        -:   46: * @{
        -:   47: */
        -:   48:
        -:   49:/**
        -:   50: * The SharedArrayBuffer.prototype.bytelength accessor
        -:   51: *
        -:   52: * See also:
        -:   53: *          ES11, 24.2.4.1
        -:   54: *
        -:   55: * @return ecma value
        -:   56: *         Returned value must be freed with ecma_free_value.
        -:   57: */
        -:   58:static ecma_value_t
    #####:   59:ecma_builtin_shared_arraybuffer_prototype_bytelength_getter (ecma_value_t this_arg) /**< this argument */
        -:   60:{
    #####:   61:  if (ecma_is_value_object (this_arg))
        -:   62:  {
    #####:   63:    ecma_object_t *object_p = ecma_get_object_from_value (this_arg);
        -:   64:
    #####:   65:    if (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER))
        -:   66:    {
    #####:   67:      uint32_t len = ecma_arraybuffer_get_length (object_p);
        -:   68:
    #####:   69:      return ecma_make_uint32_value (len);
        -:   70:    }
        -:   71:  }
        -:   72:
    #####:   73:  return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not a SharedArrayBuffer object"));
        -:   74:} /* ecma_builtin_shared_arraybuffer_prototype_bytelength_getter */
        -:   75:
        -:   76:/**
        -:   77: * The SharedArrayBuffer.prototype object's 'slice' routine
        -:   78: *
        -:   79: * See also:
        -:   80: *          ECMA-262 v11, 24.2.4.3
        -:   81: *
        -:   82: * @return ecma value
        -:   83: *         Returned value must be freed with ecma_free_value.
        -:   84: */
        -:   85:static ecma_value_t
    #####:   86:ecma_builtin_shared_arraybuffer_prototype_object_slice (ecma_value_t this_arg, /**< this argument */
        -:   87:                                                        const ecma_value_t *argument_list_p, /**< arguments list */
        -:   88:                                                        uint32_t arguments_number) /**< number of arguments */
        -:   89:{
    #####:   90:  if (!ecma_is_value_object (this_arg))
        -:   91:  {
    #####:   92:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object"));
        -:   93:  }
        -:   94:
    #####:   95:  ecma_object_t *object_p = ecma_get_object_from_value (this_arg);
        -:   96:
        -:   97:  /* 2. */
    #####:   98:  if (!ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER))
        -:   99:  {
    #####:  100:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an SharedArrayBuffer object"));
        -:  101:  }
        -:  102:
    #####:  103:  return ecma_builtin_arraybuffer_slice (this_arg, argument_list_p, arguments_number);
        -:  104:} /* ecma_builtin_shared_arraybuffer_prototype_object_slice */
        -:  105:
        -:  106:/**
        -:  107: * @}
        -:  108: * @}
        -:  109: * @}
        -:  110: */
        -:  111:
        -:  112:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
