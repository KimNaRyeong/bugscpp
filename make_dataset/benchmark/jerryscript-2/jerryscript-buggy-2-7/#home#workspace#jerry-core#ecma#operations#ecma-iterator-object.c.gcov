        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-iterator-object.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-array-object.h"
        -:   18:#include "ecma-iterator-object.h"
        -:   19:#include "ecma-builtin-helpers.h"
        -:   20:#include "ecma-builtins.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-number-arithmetic.h"
        -:   26:#include "ecma-objects.h"
        -:   27:#include "ecma-objects-general.h"
        -:   28:#include "ecma-function-object.h"
        -:   29:#include "jcontext.h"
        -:   30:
        -:   31:/** \addtogroup ecma ECMA
        -:   32: * @{
        -:   33: *
        -:   34: * \addtogroup ecmaiteratorobject ECMA iterator object related routines
        -:   35: * @{
        -:   36: */
        -:   37:
        -:   38:#if JERRY_ESNEXT
        -:   39:
        -:   40:/**
        -:   41: * Implementation of 'CreateArrayFromList' specialized for iterators
        -:   42: *
        -:   43: * See also:
        -:   44: *          ECMA-262 v6, 7.3.16.
        -:   45: *
        -:   46: * Note:
        -:   47: *      Returned value must be freed with ecma_free_value.
        -:   48: *
        -:   49: * @return new array object
        -:   50: */
        -:   51:ecma_value_t
    #####:   52:ecma_create_array_from_iter_element (ecma_value_t value, /**< value */
        -:   53:                                     ecma_value_t index_value) /**< iterator index */
        -:   54:{
        -:   55:  /* 2. */
    #####:   56:  ecma_object_t *new_array_p = ecma_op_new_array_object (0);
        -:   57:
        -:   58:  /* 3-4. */
        -:   59:  ecma_value_t completion;
    #####:   60:  completion = ecma_builtin_helper_def_prop_by_index (new_array_p,
        -:   61:                                                      0,
        -:   62:                                                      index_value,
        -:   63:                                                      ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);
        -:   64:
        -:   65:  /* 4.b */
    #####:   66:  JERRY_ASSERT (ecma_is_value_true (completion));
        -:   67:
    #####:   68:  completion = ecma_builtin_helper_def_prop_by_index (new_array_p,
        -:   69:                                                      1,
        -:   70:                                                      value,
        -:   71:                                                      ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);
    #####:   72:  JERRY_ASSERT (ecma_is_value_true (completion));
        -:   73:
        -:   74:  /* 5. */
    #####:   75:  return ecma_make_object_value (new_array_p);
        -:   76:} /* ecma_create_array_from_iter_element */
        -:   77:
        -:   78:/**
        -:   79: * CreateIterResultObject operation
        -:   80: *
        -:   81: * See also:
        -:   82: *          ECMA-262 v6, 7.4.7.
        -:   83: *
        -:   84: * Note:
        -:   85: *      Returned value must be freed with ecma_free_value.
        -:   86: *
        -:   87: * @return iterator result object
        -:   88: */
        -:   89:ecma_value_t
    #####:   90:ecma_create_iter_result_object (ecma_value_t value, /**< value */
        -:   91:                                ecma_value_t done) /**< ECMA_VALUE_{TRUE,FALSE} based
        -:   92:                                                    *   on the iterator index */
        -:   93:{
        -:   94:  /* 1. */
    #####:   95:  JERRY_ASSERT (ecma_is_value_boolean (done));
        -:   96:
        -:   97:  /* 2. */
    #####:   98:  ecma_object_t *object_p = ecma_create_object (ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE),
        -:   99:                                                0,
        -:  100:                                                ECMA_OBJECT_TYPE_GENERAL);
        -:  101:
        -:  102:  /* 3. */
        -:  103:  ecma_property_value_t *prop_value_p;
    #####:  104:  prop_value_p = ecma_create_named_data_property (object_p,
        -:  105:                                                  ecma_get_magic_string (LIT_MAGIC_STRING_VALUE),
        -:  106:                                                  ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  107:                                                  NULL);
        -:  108:
    #####:  109:  prop_value_p->value = ecma_copy_value_if_not_object (value);
        -:  110:
        -:  111:  /* 4. */
    #####:  112:  prop_value_p = ecma_create_named_data_property (object_p,
        -:  113:                                                  ecma_get_magic_string (LIT_MAGIC_STRING_DONE),
        -:  114:                                                  ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  115:                                                  NULL);
    #####:  116:  prop_value_p->value = done;
        -:  117:
        -:  118:  /* 5. */
    #####:  119:  return ecma_make_object_value (object_p);
        -:  120:} /* ecma_create_iter_result_object */
        -:  121:
        -:  122:/**
        -:  123: * General iterator object creation operation.
        -:  124: *
        -:  125: * See also: ECMA-262 v6, 21.1.5.1, 22.1.5.1, 23.1.5.1
        -:  126: *
        -:  127: * Note:
        -:  128: *      Returned value must be freed with ecma_free_value.
        -:  129: *
        -:  130: * @return iterator object
        -:  131: */
        -:  132:ecma_value_t
    #####:  133:ecma_op_create_iterator_object (ecma_value_t iterated_value, /**< value from create iterator */
        -:  134:                                ecma_object_t *prototype_obj_p, /**< prototype object */
        -:  135:                                ecma_object_class_type_t iterator_type, /**< iterator type */
        -:  136:                                ecma_iterator_kind_t kind) /**< iterator kind*/
        -:  137:{
        -:  138:  /* 1. */
    #####:  139:  JERRY_ASSERT (iterator_type == ECMA_OBJECT_CLASS_ARRAY_ITERATOR
        -:  140:                || iterator_type == ECMA_OBJECT_CLASS_SET_ITERATOR
        -:  141:                || iterator_type == ECMA_OBJECT_CLASS_MAP_ITERATOR
        -:  142:                || iterator_type == ECMA_OBJECT_CLASS_REGEXP_STRING_ITERATOR
        -:  143:                || iterator_type == ECMA_OBJECT_CLASS_STRING_ITERATOR);
    #####:  144:  JERRY_ASSERT (kind < ECMA_ITERATOR__COUNT);
        -:  145:
        -:  146:  /* 2. */
    #####:  147:  ecma_object_t *object_p = ecma_create_object (prototype_obj_p,
        -:  148:                                                sizeof (ecma_extended_object_t),
        -:  149:                                                ECMA_OBJECT_TYPE_CLASS);
        -:  150:
    #####:  151:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) object_p;
    #####:  152:  ext_obj_p->u.cls.type = (uint8_t) iterator_type;
        -:  153:
        -:  154:  /* 3. */
    #####:  155:  ext_obj_p->u.cls.u3.iterated_value = iterated_value;
        -:  156:  /* 4. */
    #####:  157:  ext_obj_p->u.cls.u2.iterator_index = 0;
        -:  158:  /* 5. */
    #####:  159:  ext_obj_p->u.cls.u1.iterator_kind = (uint8_t) kind;
        -:  160:
        -:  161:  /* 6. */
    #####:  162:  return ecma_make_object_value (object_p);
        -:  163:} /* ecma_op_create_iterator_object */
        -:  164:
        -:  165:/**
        -:  166: * GetIterator operation
        -:  167: *
        -:  168: * See also: ECMA-262 v10, 7.4.1
        -:  169: *
        -:  170: * Note:
        -:  171: *      Returned value must be freed with ecma_free_value.
        -:  172: *
        -:  173: * @return iterator object - if success
        -:  174: *         raised error - otherwise
        -:  175: */
        -:  176:ecma_value_t
    #####:  177:ecma_op_get_iterator (ecma_value_t value, /**< value to get iterator from */
        -:  178:                      ecma_value_t method, /**< provided method argument */
        -:  179:                      ecma_value_t *next_method_p) /**< [out] next method */
        -:  180:{
    #####:  181:  JERRY_ASSERT (next_method_p != NULL);
    #####:  182:  *next_method_p = ECMA_VALUE_UNDEFINED;
        -:  183:
        -:  184:  /* 1. */
    #####:  185:  if (ECMA_IS_VALUE_ERROR (value))
        -:  186:  {
    #####:  187:    return value;
        -:  188:  }
        -:  189:
    #####:  190:  bool use_default_method = false;
        -:  191:
        -:  192:  /* 2. */
    #####:  193:  if (method == ECMA_VALUE_SYNC_ITERATOR)
        -:  194:  {
        -:  195:    /* 2.a */
    #####:  196:    use_default_method = true;
    #####:  197:    method = ecma_op_get_method_by_symbol_id (value, LIT_GLOBAL_SYMBOL_ITERATOR);
        -:  198:
        -:  199:    /* 2.b */
    #####:  200:    if (ECMA_IS_VALUE_ERROR (method))
        -:  201:    {
    #####:  202:      return method;
        -:  203:    }
        -:  204:  }
        -:  205:  /* 3.a */
    #####:  206:  else if (method == ECMA_VALUE_ASYNC_ITERATOR)
        -:  207:  {
    #####:  208:    use_default_method = true;
        -:  209:
        -:  210:    /* 3.a.i */
    #####:  211:    method = ecma_op_get_method_by_symbol_id (value, LIT_GLOBAL_SYMBOL_ASYNC_ITERATOR);
        -:  212:
    #####:  213:    if (ECMA_IS_VALUE_ERROR (method))
        -:  214:    {
    #####:  215:      return method;
        -:  216:    }
        -:  217:
        -:  218:    /* 3.a.ii */
        -:  219:
    #####:  220:    if (ecma_is_value_undefined (method))
        -:  221:    {
    #####:  222:      method = ecma_op_get_method_by_symbol_id (value, LIT_GLOBAL_SYMBOL_ITERATOR);
        -:  223:
    #####:  224:      if (ECMA_IS_VALUE_ERROR (method))
        -:  225:      {
    #####:  226:        return method;
        -:  227:      }
        -:  228:
    #####:  229:      ecma_value_t sync_next_method;
    #####:  230:      ecma_value_t sync_iterator = ecma_op_get_iterator (value, method, &sync_next_method);
        -:  231:
    #####:  232:      if (ECMA_IS_VALUE_ERROR (sync_iterator))
        -:  233:      {
    #####:  234:        ecma_free_value (method);
    #####:  235:        return sync_iterator;
        -:  236:      }
        -:  237:
    #####:  238:      ecma_value_t async_iterator = ecma_op_create_async_from_sync_iterator (sync_iterator,
        -:  239:                                                                             sync_next_method,
        -:  240:                                                                             next_method_p);
        -:  241:
    #####:  242:      ecma_free_value (method);
    #####:  243:      ecma_free_value (sync_iterator);
    #####:  244:      ecma_free_value (sync_next_method);
        -:  245:
    #####:  246:      return async_iterator;
        -:  247:    }
        -:  248:  }
        -:  249:
        -:  250:  /* 3. */
    #####:  251:  if (!ecma_op_is_callable (method))
        -:  252:  {
    #####:  253:    ecma_free_value (method);
    #####:  254:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator is not function"));
        -:  255:  }
        -:  256:
    #####:  257:  ecma_object_t *method_obj_p = ecma_get_object_from_value (method);
    #####:  258:  ecma_value_t iterator = ecma_op_function_call (method_obj_p, value, NULL, 0);
        -:  259:
    #####:  260:  if (use_default_method)
        -:  261:  {
    #####:  262:    ecma_deref_object (method_obj_p);
        -:  263:  }
        -:  264:
        -:  265:  /* 4. */
    #####:  266:  if (ECMA_IS_VALUE_ERROR (iterator))
        -:  267:  {
    #####:  268:    return iterator;
        -:  269:  }
        -:  270:
        -:  271:  /* 5. */
    #####:  272:  if (!ecma_is_value_object (iterator))
        -:  273:  {
    #####:  274:    ecma_free_value (iterator);
    #####:  275:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator is not an object"));
        -:  276:  }
        -:  277:
    #####:  278:  ecma_object_t *obj_p = ecma_get_object_from_value (iterator);
    #####:  279:  ecma_value_t next_method = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_NEXT);
        -:  280:
    #####:  281:  if (ECMA_IS_VALUE_ERROR (next_method))
        -:  282:  {
    #####:  283:    ecma_free_value (iterator);
    #####:  284:    return next_method;
        -:  285:  }
        -:  286:
    #####:  287:  if (ecma_is_value_object (next_method) && ecma_op_is_callable (next_method))
        -:  288:  {
    #####:  289:    *next_method_p = next_method;
        -:  290:  }
        -:  291:  else
        -:  292:  {
    #####:  293:    ecma_free_value (next_method);
        -:  294:  }
        -:  295:
        -:  296:  /* 6. */
    #####:  297:  return iterator;
        -:  298:} /* ecma_op_get_iterator */
        -:  299:
        -:  300:/**
        -:  301: * IteratorNext operation
        -:  302: *
        -:  303: * See also: ECMA-262 v10, 7.4.2
        -:  304: *
        -:  305: * Note:
        -:  306: *      Returned value must be freed with ecma_free_value.
        -:  307: *
        -:  308: * @return iterator result object - if success
        -:  309: *         raised error - otherwise
        -:  310: */
        -:  311:ecma_value_t
    #####:  312:ecma_op_iterator_next (ecma_value_t iterator, /**< iterator value */
        -:  313:                       ecma_value_t next_method, /**< next method */
        -:  314:                       ecma_value_t value) /**< the routines's value argument */
        -:  315:{
    #####:  316:  JERRY_ASSERT (ecma_is_value_object (iterator));
        -:  317:
        -:  318:  /* 1 - 2. */
    #####:  319:  if (next_method == ECMA_VALUE_UNDEFINED)
        -:  320:  {
    #####:  321:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator 'next' is not callable"));
        -:  322:  }
        -:  323:
    #####:  324:  ecma_object_t *next_method_obj_p = ecma_get_object_from_value (next_method);
        -:  325:
    #####:  326:  bool has_value = !ecma_is_value_empty (value);
        -:  327:
    #####:  328:  if (has_value)
        -:  329:  {
    #####:  330:    return ecma_op_function_call (next_method_obj_p, iterator, &value, 1);
        -:  331:  }
        -:  332:
    #####:  333:  return ecma_op_function_call (next_method_obj_p, iterator, NULL, 0);
        -:  334:} /* ecma_op_iterator_next */
        -:  335:
        -:  336:/**
        -:  337: * IteratorReturn operation
        -:  338: *
        -:  339: * See also: ECMA-262 v6, 14.4.14 (last part)
        -:  340: *
        -:  341: * Note:
        -:  342: *      Returned value must be freed with ecma_free_value.
        -:  343: *
        -:  344: * @return iterator result object - if success
        -:  345: *         raised error - otherwise
        -:  346: */
        -:  347:static ecma_value_t
    #####:  348:ecma_op_iterator_return (ecma_value_t iterator, /**< iterator value */
        -:  349:                         ecma_value_t value) /**< the routines's value argument */
        -:  350:{
    #####:  351:  JERRY_ASSERT (ecma_is_value_object (iterator));
        -:  352:
    #####:  353:  ecma_object_t *obj_p = ecma_get_object_from_value (iterator);
    #####:  354:  ecma_value_t func_return = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_RETURN);
        -:  355:
    #####:  356:  if (ECMA_IS_VALUE_ERROR (func_return))
        -:  357:  {
    #####:  358:    return func_return;
        -:  359:  }
        -:  360:
    #####:  361:  if (func_return == ECMA_VALUE_UNDEFINED)
        -:  362:  {
    #####:  363:    return ecma_create_iter_result_object (value, ECMA_VALUE_TRUE);
        -:  364:  }
        -:  365:
    #####:  366:  if (!ecma_op_is_callable (func_return))
        -:  367:  {
    #####:  368:    ecma_free_value (func_return);
    #####:  369:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator 'return' is not callable"));
        -:  370:  }
        -:  371:
    #####:  372:  ecma_object_t *return_obj_p = ecma_get_object_from_value (func_return);
        -:  373:
    #####:  374:  ecma_value_t result = ecma_op_function_call (return_obj_p, iterator, &value, 1);
    #####:  375:  ecma_free_value (func_return);
        -:  376:
    #####:  377:  return result;
        -:  378:} /* ecma_op_iterator_return */
        -:  379:
        -:  380:/**
        -:  381: * IteratorThrow operation
        -:  382: *
        -:  383: * See also: ECMA-262 v6, 14.4.14 (last part)
        -:  384: *
        -:  385: * Note:
        -:  386: *      Returned value must be freed with ecma_free_value.
        -:  387: *
        -:  388: * @return iterator result object - if success
        -:  389: *         raised error - otherwise
        -:  390: */
        -:  391:static ecma_value_t
    #####:  392:ecma_op_iterator_throw (ecma_value_t iterator, /**< iterator value */
        -:  393:                        ecma_value_t value) /**< the routines's value argument */
        -:  394:{
    #####:  395:  JERRY_ASSERT (ecma_is_value_object (iterator));
        -:  396:
    #####:  397:  ecma_object_t *obj_p = ecma_get_object_from_value (iterator);
    #####:  398:  ecma_value_t func_throw = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_THROW);
        -:  399:
    #####:  400:  if (ECMA_IS_VALUE_ERROR (func_throw))
        -:  401:  {
    #####:  402:    return func_throw;
        -:  403:  }
        -:  404:
    #####:  405:  if (func_throw == ECMA_VALUE_UNDEFINED)
        -:  406:  {
    #####:  407:    ecma_value_t result = ecma_op_iterator_close (iterator);
        -:  408:
    #####:  409:    if (ECMA_IS_VALUE_ERROR (result))
        -:  410:    {
    #####:  411:      return result;
        -:  412:    }
        -:  413:
    #####:  414:    ecma_free_value (result);
    #####:  415:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator 'throw' is not available"));
        -:  416:  }
        -:  417:
    #####:  418:  if (!ecma_is_value_object (func_throw) || !ecma_op_is_callable (func_throw))
        -:  419:  {
    #####:  420:    ecma_free_value (func_throw);
    #####:  421:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator 'throw' is not callable"));
        -:  422:  }
        -:  423:
    #####:  424:  ecma_object_t *return_obj_p = ecma_get_object_from_value (func_throw);
        -:  425:
    #####:  426:  ecma_value_t result = ecma_op_function_call (return_obj_p, iterator, &value, 1);
    #####:  427:  ecma_free_value (func_throw);
        -:  428:
    #####:  429:  return result;
        -:  430:} /* ecma_op_iterator_throw */
        -:  431:
        -:  432:/**
        -:  433: * IteratorComplete operation
        -:  434: *
        -:  435: * See also: ECMA-262 v10, 7.4.3
        -:  436: *
        -:  437: * @return true/false - whether the iteration ended
        -:  438: */
        -:  439:ecma_value_t
    #####:  440:ecma_op_iterator_complete (ecma_value_t iter_result) /**< iterator value */
        -:  441:{
        -:  442:  /* 1. */
    #####:  443:  JERRY_ASSERT (ecma_is_value_object (iter_result));
        -:  444:
        -:  445:  /* 2. */
    #####:  446:  ecma_object_t *obj_p = ecma_get_object_from_value (iter_result);
        -:  447:
    #####:  448:  ecma_value_t done = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_DONE);
        -:  449:
    #####:  450:  if (ECMA_IS_VALUE_ERROR (done))
        -:  451:  {
    #####:  452:    return done;
        -:  453:  }
        -:  454:
    #####:  455:  ecma_value_t res = ecma_make_boolean_value (ecma_op_to_boolean (done));
    #####:  456:  ecma_free_value (done);
        -:  457:
    #####:  458:  return res;
        -:  459:} /* ecma_op_iterator_complete */
        -:  460:
        -:  461:/**
        -:  462: * IteratorValue operation
        -:  463: *
        -:  464: * See also: ECMA-262 v6, 7.4.4
        -:  465: *
        -:  466: * Note:
        -:  467: *      Returned value must be freed with ecma_free_value.
        -:  468: *
        -:  469: * @return value of the iterator result object
        -:  470: */
        -:  471:ecma_value_t
    #####:  472:ecma_op_iterator_value (ecma_value_t iter_result) /**< iterator value */
        -:  473:{
        -:  474:  /* 1. */
    #####:  475:  JERRY_ASSERT (ecma_is_value_object (iter_result));
        -:  476:
        -:  477:  /* 2. */
    #####:  478:  ecma_object_t *obj_p = ecma_get_object_from_value (iter_result);
    #####:  479:  return ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_VALUE);
        -:  480:} /* ecma_op_iterator_value */
        -:  481:
        -:  482:/**
        -:  483: * IteratorClose operation
        -:  484: *
        -:  485: * See also: ECMA-262 v6, 7.4.6
        -:  486: *
        -:  487: * @return ECMA_VALUE_EMPTY - if "return" is succesfully invoked,
        -:  488: *                            and the operation is called with normal completion
        -:  489: *         ECMA_VALUE_ERROR - otherwise
        -:  490: */
        -:  491:ecma_value_t
    #####:  492:ecma_op_iterator_close (ecma_value_t iterator) /**< iterator value */
        -:  493:{
        -:  494:  /* 1. */
    #####:  495:  JERRY_ASSERT (ecma_is_value_object (iterator));
        -:  496:
        -:  497:  /* 2. */
    #####:  498:  ecma_value_t completion = ECMA_VALUE_EMPTY;
        -:  499:
    #####:  500:  if (jcontext_has_pending_exception ())
        -:  501:  {
    #####:  502:    completion = jcontext_take_exception ();
        -:  503:  }
        -:  504:
        -:  505:  /* 3. */
    #####:  506:  ecma_value_t return_method = ecma_op_get_method_by_magic_id (iterator, LIT_MAGIC_STRING_RETURN);
        -:  507:
        -:  508:  /* 4. */
    #####:  509:  if (ECMA_IS_VALUE_ERROR (return_method))
        -:  510:  {
    #####:  511:    ecma_free_value (completion);
    #####:  512:    return return_method;
        -:  513:  }
        -:  514:
        -:  515:  /* 5. */
    #####:  516:  if (ecma_is_value_undefined (return_method))
        -:  517:  {
    #####:  518:    if (ecma_is_value_empty (completion))
        -:  519:    {
    #####:  520:      return ECMA_VALUE_UNDEFINED;
        -:  521:    }
        -:  522:
    #####:  523:    jcontext_raise_exception (completion);
    #####:  524:    return ECMA_VALUE_ERROR;
        -:  525:  }
        -:  526:
        -:  527:  /* 6. */
    #####:  528:  ecma_object_t *return_obj_p = ecma_get_object_from_value (return_method);
    #####:  529:  ecma_value_t inner_result = ecma_op_function_call (return_obj_p, iterator, NULL, 0);
    #####:  530:  ecma_deref_object (return_obj_p);
        -:  531:
        -:  532:  /* 7. */
    #####:  533:  if (!ecma_is_value_empty (completion))
        -:  534:  {
    #####:  535:    if (ECMA_IS_VALUE_ERROR (inner_result))
        -:  536:    {
    #####:  537:      jcontext_release_exception ();
        -:  538:    }
        -:  539:    else
        -:  540:    {
    #####:  541:      ecma_free_value (inner_result);
        -:  542:    }
        -:  543:
    #####:  544:    jcontext_raise_exception (completion);
    #####:  545:    return ECMA_VALUE_ERROR;
        -:  546:  }
        -:  547:
        -:  548:  /* 8. */
    #####:  549:  if (ECMA_IS_VALUE_ERROR (inner_result))
        -:  550:  {
    #####:  551:    ecma_free_value (completion);
    #####:  552:    return inner_result;
        -:  553:  }
        -:  554:
        -:  555:  /* 9. */
    #####:  556:  bool is_object = ecma_is_value_object (inner_result);
    #####:  557:  ecma_free_value (inner_result);
        -:  558:
    #####:  559:  if (!is_object)
        -:  560:  {
    #####:  561:    ecma_free_value (completion);
    #####:  562:    return ecma_raise_type_error (ECMA_ERR_MSG ("method 'return' is not callable"));
        -:  563:  }
        -:  564:
        -:  565:  /* 10. */
    #####:  566:  if (ecma_is_value_empty (completion))
        -:  567:  {
    #####:  568:    return ECMA_VALUE_UNDEFINED;
        -:  569:  }
        -:  570:
    #####:  571:  jcontext_raise_exception (completion);
    #####:  572:  return ECMA_VALUE_ERROR;
        -:  573:} /* ecma_op_iterator_close */
        -:  574:
        -:  575:/**
        -:  576: * IteratorStep operation
        -:  577: *
        -:  578: * See also: ECMA-262 v6, 7.4.5
        -:  579: *
        -:  580: * Note:
        -:  581: *      Returned value must be freed with ecma_free_value.
        -:  582: *
        -:  583: * @return iterator object or ECMA_VALUE_FALSE - if success
        -:  584: *         raised error - otherwise
        -:  585: */
        -:  586:ecma_value_t
    #####:  587:ecma_op_iterator_step (ecma_value_t iterator, /**< iterator value */
        -:  588:                       ecma_value_t next_method) /**< next method */
        -:  589:{
        -:  590:  /* 1. */
    #####:  591:  ecma_value_t result = ecma_op_iterator_next (iterator, next_method, ECMA_VALUE_EMPTY);
        -:  592:
        -:  593:  /* 2. */
    #####:  594:  if (ECMA_IS_VALUE_ERROR (result))
        -:  595:  {
    #####:  596:    return result;
        -:  597:  }
        -:  598:
    #####:  599:  if (!ecma_is_value_object (result))
        -:  600:  {
    #####:  601:    ecma_free_value (result);
    #####:  602:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator result is not an object"));
        -:  603:  }
        -:  604:
        -:  605:  /* 3. */
    #####:  606:  ecma_object_t *obj_p = ecma_get_object_from_value (result);
    #####:  607:  ecma_value_t done = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_DONE);
        -:  608:
        -:  609:  /* 4. */
    #####:  610:  if (ECMA_IS_VALUE_ERROR (done))
        -:  611:  {
    #####:  612:    ecma_free_value (result);
    #####:  613:    return done;
        -:  614:  }
        -:  615:
    #####:  616:  bool is_done = ecma_op_to_boolean (done);
    #####:  617:  ecma_free_value (done);
        -:  618:
        -:  619:  /* 5. */
    #####:  620:  if (is_done)
        -:  621:  {
    #####:  622:    ecma_free_value (result);
    #####:  623:    return ECMA_VALUE_FALSE;
        -:  624:  }
        -:  625:
        -:  626:  /* 6. */
    #####:  627:  return result;
        -:  628:} /* ecma_op_iterator_step */
        -:  629:
        -:  630:/**
        -:  631: * Perform a command specified by the command argument
        -:  632: *
        -:  633: * Note:
        -:  634: *      Returned value must be freed with ecma_free_value.
        -:  635: *
        -:  636: * @return iterator object - if success
        -:  637: *         raised error - otherwise
        -:  638: */
        -:  639:ecma_value_t
    #####:  640:ecma_op_iterator_do (ecma_iterator_command_type_t command, /**< command to be executed */
        -:  641:                     ecma_value_t iterator, /**< iterator object */
        -:  642:                     ecma_value_t next_method, /**< next method */
        -:  643:                     ecma_value_t value, /**< the routines's value argument */
        -:  644:                     bool *done_p) /**< it contains the logical value of the done property */
        -:  645:{
        -:  646:  ecma_value_t result;
        -:  647:
    #####:  648:  if (command == ECMA_ITERATOR_NEXT)
        -:  649:  {
    #####:  650:    result = ecma_op_iterator_next (iterator, next_method, value);
        -:  651:  }
    #####:  652:  else if (command == ECMA_ITERATOR_THROW)
        -:  653:  {
    #####:  654:    result = ecma_op_iterator_throw (iterator, value);
        -:  655:  }
        -:  656:  else
        -:  657:  {
    #####:  658:    JERRY_ASSERT (command == ECMA_ITERATOR_RETURN);
    #####:  659:    result = ecma_op_iterator_return (iterator, value);
        -:  660:  }
        -:  661:
    #####:  662:  if (ECMA_IS_VALUE_ERROR (result))
        -:  663:  {
    #####:  664:    return result;
        -:  665:  }
        -:  666:
    #####:  667:  if (!ecma_is_value_object (result))
        -:  668:  {
    #####:  669:    ecma_free_value (result);
    #####:  670:    return ecma_raise_type_error (ECMA_ERR_MSG ("Iterator result is not an object"));
        -:  671:  }
        -:  672:
    #####:  673:  ecma_object_t *obj_p = ecma_get_object_from_value (result);
    #####:  674:  ecma_value_t done = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_DONE);
        -:  675:
    #####:  676:  if (ECMA_IS_VALUE_ERROR (done))
        -:  677:  {
    #####:  678:    ecma_free_value (result);
    #####:  679:    return done;
        -:  680:  }
        -:  681:
    #####:  682:  *done_p = ecma_op_to_boolean (done);
    #####:  683:  ecma_free_value (done);
        -:  684:
    #####:  685:  return result;
        -:  686:} /* ecma_op_iterator_do */
        -:  687:
        -:  688:/**
        -:  689: * CreateAsyncFromSyncIterator operation
        -:  690: *
        -:  691: * See also: ECMA-262 v10, 25.1.4.1
        -:  692: *
        -:  693: * Note:
        -:  694: *      Returned value must be freed with ecma_free_value.
        -:  695: *
        -:  696: * @return async from sync iterator object
        -:  697: */
        -:  698:ecma_value_t
    #####:  699:ecma_op_create_async_from_sync_iterator (ecma_value_t sync_iterator, /**< sync iterator */
        -:  700:                                         ecma_value_t sync_next_method, /**< sync iterator next method */
        -:  701:                                         ecma_value_t *async_next_method_p) /**< [out] async next method */
        -:  702:{
    #####:  703:  JERRY_ASSERT (ecma_is_value_object (sync_iterator));
    #####:  704:  JERRY_ASSERT (ecma_is_value_object (sync_next_method) || ecma_is_value_undefined (sync_next_method));
        -:  705:
        -:  706:  /* 1. */
    #####:  707:  ecma_object_t *obj_p = ecma_create_object (ecma_builtin_get (ECMA_BUILTIN_ID_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE),
        -:  708:                                             sizeof (ecma_async_from_sync_iterator_object_t),
        -:  709:                                             ECMA_OBJECT_TYPE_CLASS);
        -:  710:
    #####:  711:  ecma_async_from_sync_iterator_object_t *ext_obj_p = (ecma_async_from_sync_iterator_object_t *) obj_p;
        -:  712:
        -:  713:  /* 2. */
    #####:  714:  ext_obj_p->sync_next_method = sync_next_method;
    #####:  715:  ext_obj_p->header.u.cls.u3.sync_iterator = sync_iterator;
    #####:  716:  ext_obj_p->header.u.cls.type = ECMA_OBJECT_CLASS_ASYNC_FROM_SYNC_ITERATOR;
        -:  717:
        -:  718:  /* 3. */
    #####:  719:  *async_next_method_p = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_NEXT);
    #####:  720:  JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (*async_next_method_p));
        -:  721:
        -:  722:  /* 4. */
    #####:  723:  return ecma_make_object_value (obj_p);
        -:  724:} /* ecma_op_create_async_from_sync_iterator */
        -:  725:
        -:  726:/**
        -:  727: * Async-from-Sync Iterator Value Unwrap Functions
        -:  728: *
        -:  729: * See also: ES11 25.1.4.2.4
        -:  730: *
        -:  731: * @return iterator result object
        -:  732: */
        -:  733:ecma_value_t
    #####:  734:ecma_async_from_sync_iterator_unwrap_cb (ecma_object_t *function_obj_p, /**< function object */
        -:  735:                                         const ecma_value_t args_p[], /**< argument list */
        -:  736:                                         const uint32_t args_count) /**< argument number */
        -:  737:{
    #####:  738:  ecma_extended_object_t *unwrap_p = (ecma_extended_object_t *) function_obj_p;
        -:  739:
        -:  740:  /* 2. */
    #####:  741:  ecma_value_t arg = args_count > 0 ? args_p[0] : ECMA_VALUE_UNDEFINED;
    #####:  742:  ecma_value_t done = ecma_make_boolean_value (unwrap_p->u.built_in.u2.routine_flags
        -:  743:                                               >> ECMA_NATIVE_HANDLER_COMMON_FLAGS_SHIFT);
        -:  744:
    #####:  745:  return ecma_create_iter_result_object (arg, done);
        -:  746:} /* ecma_async_from_sync_iterator_unwrap_cb */
        -:  747:
        -:  748:#endif /* JERRY_ESNEXT */
        -:  749:
        -:  750:/**
        -:  751: * @}
        -:  752: * @}
        -:  753: */
