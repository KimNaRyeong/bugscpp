        -:    0:Source:/home/workspace/tests/unit-core/test-native-instanceof.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "test-common.h"
        -:   18:
        -:   19:static const char instanceof_source[] = "var x = function(o, c) {return (o instanceof c);}; x";
        -:   20:
        -:   21:static jerry_value_t
    #####:   22:external_function (const jerry_call_info_t *call_info_p,
        -:   23:                   const jerry_value_t args_p[],
        -:   24:                   const jerry_size_t args_count)
        -:   25:{
        -:   26:  (void) call_info_p;
        -:   27:  (void) args_p;
        -:   28:  (void) args_count;
        -:   29:
    #####:   30:  return jerry_create_undefined ();
        -:   31:} /* external_function */
        -:   32:
        -:   33:static void
    #####:   34:test_instanceof (jerry_value_t instanceof,
        -:   35:                 jerry_value_t constructor)
        -:   36:{
    #####:   37:  jerry_value_t instance = jerry_construct_object (constructor, NULL, 0);
    #####:   38:  jerry_value_t args[2] =
        -:   39:  {
        -:   40:    instance, constructor
        -:   41:  };
        -:   42:
    #####:   43:  jerry_value_t undefined = jerry_create_undefined ();
    #####:   44:  jerry_value_t result = jerry_call_function (instanceof, undefined, args, 2);
    #####:   45:  jerry_release_value (undefined);
        -:   46:
    #####:   47:  TEST_ASSERT (!jerry_value_is_error (result));
    #####:   48:  TEST_ASSERT (jerry_value_is_boolean (result));
        -:   49:
    #####:   50:  TEST_ASSERT (jerry_value_is_true (result));
        -:   51:
    #####:   52:  jerry_release_value (instance);
    #####:   53:  jerry_release_value (result);
    #####:   54:} /* test_instanceof */
        -:   55:
        -:   56:int
    #####:   57:main (void)
        -:   58:{
    #####:   59:  jerry_init (JERRY_INIT_EMPTY);
        -:   60:
    #####:   61:  jerry_value_t instanceof = jerry_eval ((jerry_char_t *) instanceof_source, sizeof (instanceof_source) - 1, true);
        -:   62:
        -:   63:  /* Test for a native-backed function. */
    #####:   64:  jerry_value_t constructor = jerry_create_external_function (external_function);
        -:   65:
    #####:   66:  test_instanceof (instanceof, constructor);
    #####:   67:  jerry_release_value (constructor);
        -:   68:
        -:   69:  /* Test for a JS constructor. */
    #####:   70:  jerry_value_t global = jerry_get_global_object ();
    #####:   71:  jerry_value_t object_name = jerry_create_string ((jerry_char_t *) "Object");
    #####:   72:  constructor = jerry_get_property (global, object_name);
    #####:   73:  jerry_release_value (object_name);
    #####:   74:  jerry_release_value (global);
        -:   75:
    #####:   76:  test_instanceof (instanceof, constructor);
    #####:   77:  jerry_release_value (constructor);
        -:   78:
    #####:   79:  jerry_release_value (instanceof);
        -:   80:
    #####:   81:  jerry_cleanup ();
        -:   82:
        -:   83:  return 0;
        -:   84:} /* main */
