        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-string-iterator-prototype.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtin-helpers.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-iterator-object.h"
        -:   19:
        -:   20:#if JERRY_ESNEXT
        -:   21:
        -:   22:#define ECMA_BUILTINS_INTERNAL
        -:   23:#include "ecma-builtins-internal.h"
        -:   24:
        -:   25:/**
        -:   26: * This object has a custom dispatch function.
        -:   27: */
        -:   28:#define BUILTIN_CUSTOM_DISPATCH
        -:   29:
        -:   30:/**
        -:   31: * List of built-in routine identifiers.
        -:   32: */
        -:   33:enum
        -:   34:{
        -:   35:  ECMA_BUILTIN_STRING_ITERATOR_PROTOTYPE_ROUTINE_START = 0,
        -:   36:  ECMA_BUILTIN_STRING_ITERATOR_PROTOTYPE_OBJECT_NEXT,
        -:   37:};
        -:   38:
        -:   39:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-string-iterator-prototype.inc.h"
        -:   40:#define BUILTIN_UNDERSCORED_ID string_iterator_prototype
        -:   41:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   42:
        -:   43:/** \addtogroup ecma ECMA
        -:   44: * @{
        -:   45: *
        -:   46: * \addtogroup ecmabuiltins
        -:   47: * @{
        -:   48: *
        -:   49: * \addtogroup %stringiteratorprototype% ECMA %ArrayIteratorPrototype% object built-in
        -:   50: * @{
        -:   51: */
        -:   52:
        -:   53:/**
        -:   54: * The %StringIteratorPrototype% object's 'next' routine
        -:   55: *
        -:   56: * See also:
        -:   57: *          ECMA-262 v6, 22.1.5.2.1
        -:   58: *
        -:   59: * Note:
        -:   60: *     Returned value must be freed with ecma_free_value.
        -:   61: *
        -:   62: * @return iterator result object, if success
        -:   63: *         error - otherwise
        -:   64: */
        -:   65:static ecma_value_t
    #####:   66:ecma_builtin_string_iterator_prototype_object_next (ecma_value_t this_val) /**< this argument */
        -:   67:{
        -:   68:  /* 1 - 2. */
    #####:   69:  if (!ecma_is_value_object (this_val))
        -:   70:  {
    #####:   71:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object"));
        -:   72:  }
        -:   73:
    #####:   74:  ecma_object_t *obj_p = ecma_get_object_from_value (this_val);
    #####:   75:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;
        -:   76:
        -:   77:  /* 3. */
    #####:   78:  if (!ecma_object_class_is (obj_p, ECMA_OBJECT_CLASS_STRING_ITERATOR))
        -:   79:  {
    #####:   80:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an iterator"));
        -:   81:  }
        -:   82:
    #####:   83:  ecma_value_t iterated_value = ext_obj_p->u.cls.u3.iterated_value;
        -:   84:
        -:   85:  /* 4 - 5 */
    #####:   86:  if (ecma_is_value_empty (iterated_value))
        -:   87:  {
    #####:   88:    return ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
        -:   89:  }
        -:   90:
    #####:   91:  JERRY_ASSERT (ecma_is_value_string (iterated_value));
        -:   92:
    #####:   93:  ecma_string_t *string_p = ecma_get_string_from_value (iterated_value);
        -:   94:
        -:   95:  /* 6. */
    #####:   96:  lit_utf8_size_t position = ext_obj_p->u.cls.u2.iterator_index;
        -:   97:
    #####:   98:  if (JERRY_UNLIKELY (position == ECMA_ITERATOR_INDEX_LIMIT))
        -:   99:  {
        -:  100:    /* After the ECMA_ITERATOR_INDEX_LIMIT limit is reached the [[%Iterator%NextIndex]]
        -:  101:       property is stored as an internal property */
    #####:  102:    ecma_string_t *prop_name_p = ecma_get_magic_string (LIT_INTERNAL_MAGIC_STRING_ITERATOR_NEXT_INDEX);
    #####:  103:    ecma_value_t position_value = ecma_op_object_get (obj_p, prop_name_p);
        -:  104:
    #####:  105:    position = (lit_utf8_size_t) (ecma_get_number_from_value (position_value));
    #####:  106:    ecma_free_value (position_value);
        -:  107:  }
        -:  108:
        -:  109:  /* 7. */
    #####:  110:  lit_utf8_size_t len = ecma_string_get_length (string_p);
        -:  111:
        -:  112:  /* 8. */
    #####:  113:  if (position >= len)
        -:  114:  {
    #####:  115:    ecma_deref_ecma_string (string_p);
    #####:  116:    ext_obj_p->u.cls.u3.iterated_value = ECMA_VALUE_EMPTY;
    #####:  117:    return ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
        -:  118:  }
        -:  119:
        -:  120:  /* 9. */
    #####:  121:  ecma_char_t first = ecma_string_get_char_at_pos (string_p, position);
        -:  122:
        -:  123:  ecma_string_t *result_str_p;
    #####:  124:  lit_utf8_size_t result_size = 1;
        -:  125:
        -:  126:  /* 10. */
    #####:  127:  if (first < LIT_UTF16_HIGH_SURROGATE_MIN || first > LIT_UTF16_HIGH_SURROGATE_MAX || (position + 1 == len))
        -:  128:  {
    #####:  129:    result_str_p = ecma_new_ecma_string_from_code_unit (first);
        -:  130:  }
        -:  131:  /* 11. */
        -:  132:  else
        -:  133:  {
        -:  134:    /* 11.a */
    #####:  135:    ecma_char_t second = ecma_string_get_char_at_pos (string_p, position + 1);
        -:  136:
        -:  137:    /* 11.b */
    #####:  138:    if (second < LIT_UTF16_LOW_SURROGATE_MIN || second > LIT_UTF16_LOW_SURROGATE_MAX)
        -:  139:    {
    #####:  140:      result_str_p = ecma_new_ecma_string_from_code_unit (first);
        -:  141:    }
        -:  142:    /* 11.c */
        -:  143:    else
        -:  144:    {
    #####:  145:      result_str_p = ecma_new_ecma_string_from_code_units (first, second);
    #####:  146:      result_size = 2;
        -:  147:    }
        -:  148:  }
        -:  149:
        -:  150:  /* 13. */
    #####:  151:  if (position + result_size < ECMA_ITERATOR_INDEX_LIMIT)
        -:  152:  {
    #####:  153:    ext_obj_p->u.cls.u2.iterator_index = (uint16_t) (position + result_size);
        -:  154:  }
        -:  155:  else
        -:  156:  {
    #####:  157:    ext_obj_p->u.cls.u2.iterator_index = ECMA_ITERATOR_INDEX_LIMIT;
        -:  158:
    #####:  159:    ecma_string_t *prop_name_p = ecma_get_magic_string (LIT_INTERNAL_MAGIC_STRING_ITERATOR_NEXT_INDEX);
    #####:  160:    ecma_value_t put_result = ecma_op_object_put (obj_p,
        -:  161:                                                  prop_name_p,
    #####:  162:                                                  ecma_make_length_value (position + result_size),
        -:  163:                                                  true);
        -:  164:
    #####:  165:    JERRY_ASSERT (ecma_is_value_true (put_result));
        -:  166:  }
        -:  167:
        -:  168:  /* 14. */
    #####:  169:  ecma_value_t result = ecma_create_iter_result_object (ecma_make_string_value (result_str_p), ECMA_VALUE_FALSE);
    #####:  170:  ecma_deref_ecma_string (result_str_p);
        -:  171:
    #####:  172:  return result;
        -:  173:} /* ecma_builtin_string_iterator_prototype_object_next */
        -:  174:
        -:  175:/**
        -:  176: * Dispatcher of the built-in's routines
        -:  177: *
        -:  178: * @return ecma value
        -:  179: *         Returned value must be freed with ecma_free_value.
        -:  180: */
        -:  181:ecma_value_t
    #####:  182:ecma_builtin_string_iterator_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide
        -:  183:                                                                                      *   routine identifier */
        -:  184:                                                         ecma_value_t this_arg, /**< 'this' argument value */
        -:  185:                                                         const ecma_value_t arguments_list_p[], /**<
        -:  186:                                                                                                 * list of arguments
        -:  187:                                                                                                 * passed to routine */
        -:  188:                                                         uint32_t arguments_number) /**< length of arguments' list */
        -:  189:{
        -:  190:  JERRY_UNUSED_2 (arguments_list_p, arguments_number);
        -:  191:
    #####:  192:  switch (builtin_routine_id)
        -:  193:  {
    #####:  194:    case ECMA_BUILTIN_STRING_ITERATOR_PROTOTYPE_OBJECT_NEXT:
        -:  195:    {
    #####:  196:      return ecma_builtin_string_iterator_prototype_object_next (this_arg);
        -:  197:    }
    #####:  198:    default:
        -:  199:    {
    #####:  200:      JERRY_UNREACHABLE ();
        -:  201:    }
        -:  202:  }
        -:  203:} /* ecma_builtin_string_iterator_prototype_dispatch_routine */
        -:  204:
        -:  205:/**
        -:  206: * @}
        -:  207: * @}
        -:  208: * @}
        -:  209: */
        -:  210:
        -:  211:#endif /* JERRY_ESNEXT */
