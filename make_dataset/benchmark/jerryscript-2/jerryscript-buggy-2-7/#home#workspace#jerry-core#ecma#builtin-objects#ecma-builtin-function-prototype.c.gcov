        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-function-prototype.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtin-helpers.h"
        -:   18:#include "ecma-builtins.h"
        -:   19:#include "ecma-conversion.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-extended-info.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-function-object.h"
        -:   26:#include "ecma-objects.h"
        -:   27:#include "ecma-proxy-object.h"
        -:   28:#include "jrt.h"
        -:   29:#include "ecma-builtin-function-prototype.h"
        -:   30:
        -:   31:#define ECMA_BUILTINS_INTERNAL
        -:   32:#include "ecma-builtins-internal.h"
        -:   33:
        -:   34:/**
        -:   35: * This object has a custom dispatch function.
        -:   36: */
        -:   37:#define BUILTIN_CUSTOM_DISPATCH
        -:   38:
        -:   39:/**
        -:   40: * List of built-in routine identifiers.
        -:   41: */
        -:   42:enum
        -:   43:{
        -:   44:  ECMA_FUNCTION_PROTOTYPE_ROUTINE_START = 0,
        -:   45:  ECMA_FUNCTION_PROTOTYPE_TO_STRING,
        -:   46:  ECMA_FUNCTION_PROTOTYPE_CALL,
        -:   47:  ECMA_FUNCTION_PROTOTYPE_APPLY,
        -:   48:  ECMA_FUNCTION_PROTOTYPE_BIND,
        -:   49:#if JERRY_ESNEXT
        -:   50:  ECMA_FUNCTION_PROTOTYPE_SYMBOL_HAS_INSTANCE,
        -:   51:#endif /* JERRY_ESNEXT */
        -:   52:};
        -:   53:
        -:   54:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-function-prototype.inc.h"
        -:   55:#define BUILTIN_UNDERSCORED_ID function_prototype
        -:   56:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   57:
        -:   58:/** \addtogroup ecma ECMA
        -:   59: * @{
        -:   60: *
        -:   61: * \addtogroup ecmabuiltins
        -:   62: * @{
        -:   63: *
        -:   64: * \addtogroup functionprototype ECMA Function.prototype object built-in
        -:   65: * @{
        -:   66: */
        -:   67:
        -:   68:/**
        -:   69: * Maximum number of arguments for an apply function.
        -:   70: */
        -:   71:#define ECMA_FUNCTION_APPLY_ARGUMENT_COUNT_LIMIT 65535
        -:   72:
        -:   73:/**
        -:   74: * The Function.prototype object's 'toString' routine
        -:   75: *
        -:   76: * See also:
        -:   77: *          ECMA-262 v5, 15.3.4.2
        -:   78: *
        -:   79: * @return ecma value
        -:   80: *         Returned value must be freed with ecma_free_value.
        -:   81: */
        -:   82:static ecma_value_t
    #####:   83:ecma_builtin_function_prototype_object_to_string (ecma_object_t *func_obj_p) /**< this argument object */
        -:   84:{
    #####:   85:  if (ecma_get_object_type (func_obj_p) != ECMA_OBJECT_TYPE_FUNCTION)
        -:   86:  {
    #####:   87:    return ecma_make_magic_string_value (LIT_MAGIC_STRING_FUNCTION_TO_STRING_NATIVE);
        -:   88:  }
        -:   89:
        -:   90:#if JERRY_FUNCTION_TO_STRING
        -:   91:  const ecma_compiled_code_t *bytecode_p;
    #####:   92:  bytecode_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) func_obj_p);
        -:   93:
    #####:   94:  ecma_value_t script_value = ((cbc_uint8_arguments_t *) bytecode_p)->script_value;
    #####:   95:  cbc_script_t *script_p = ECMA_GET_INTERNAL_VALUE_POINTER (cbc_script_t, script_value);
        -:   96:
    #####:   97:  if (bytecode_p->status_flags & CBC_CODE_FLAGS_HAS_EXTENDED_INFO)
        -:   98:  {
    #####:   99:    uint8_t *extended_info_p = ecma_compiled_code_resolve_extended_info (bytecode_p);
    #####:  100:    uint8_t extended_info = *extended_info_p;
        -:  101:
    #####:  102:    if (extended_info & CBC_EXTENDED_CODE_FLAGS_HAS_SOURCE_CODE_RANGE)
        -:  103:    {
        -:  104:#if JERRY_ESNEXT
    #####:  105:      if (extended_info & CBC_EXTENDED_CODE_FLAGS_HAS_ARGUMENT_LENGTH)
        -:  106:      {
    #####:  107:        ecma_extended_info_decode_vlq (&extended_info_p);
        -:  108:      }
        -:  109:#endif /* JERRY_ESNEXT */
        -:  110:
    #####:  111:      uint32_t range_start = ecma_extended_info_decode_vlq (&extended_info_p);
    #####:  112:      uint32_t range_size = ecma_extended_info_decode_vlq (&extended_info_p);
        -:  113:      ecma_value_t source_code;
        -:  114:
    #####:  115:      if (!(extended_info & CBC_EXTENDED_CODE_FLAGS_SOURCE_CODE_IN_ARGUMENTS))
        -:  116:      {
    #####:  117:        source_code = script_p->source_code;
        -:  118:#if JERRY_SNAPSHOT_EXEC
    #####:  119:        if (ecma_is_value_magic_string (source_code, LIT_MAGIC_STRING__EMPTY))
        -:  120:        {
    #####:  121:          return ecma_make_magic_string_value (LIT_MAGIC_STRING_FUNCTION_TO_STRING_ECMA);
        -:  122:        }
        -:  123:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  124:      }
        -:  125:      else
        -:  126:      {
        -:  127:#if JERRY_SNAPSHOT_EXEC
    #####:  128:        if (!(script_p->refs_and_type & CBC_SCRIPT_HAS_FUNCTION_ARGUMENTS))
        -:  129:        {
    #####:  130:          return ecma_make_magic_string_value (LIT_MAGIC_STRING_FUNCTION_TO_STRING_ECMA);
        -:  131:        }
        -:  132:#else /* !JERRY_SNAPSHOT_EXEC */
        -:  133:        JERRY_ASSERT (script_p->refs_and_type & CBC_SCRIPT_HAS_FUNCTION_ARGUMENTS);
        -:  134:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  135:
    #####:  136:        source_code = CBC_SCRIPT_GET_FUNCTION_ARGUMENTS (script_p, script_p->refs_and_type);
        -:  137:      }
        -:  138:
        -:  139:      ecma_string_t *result_string_p;
        -:  140:
    #####:  141:      ECMA_STRING_TO_UTF8_STRING (ecma_get_string_from_value (source_code), source_p, source_size);
    #####:  142:      result_string_p = ecma_new_ecma_string_from_utf8 (source_p + range_start, range_size);
    #####:  143:      ECMA_FINALIZE_UTF8_STRING (source_p, source_size);
        -:  144:
    #####:  145:      return ecma_make_string_value (result_string_p);
        -:  146:    }
        -:  147:  }
        -:  148:
        -:  149:#if JERRY_SNAPSHOT_EXEC
    #####:  150:  if (!(script_p->refs_and_type & CBC_SCRIPT_HAS_FUNCTION_ARGUMENTS))
        -:  151:  {
    #####:  152:    return ecma_make_magic_string_value (LIT_MAGIC_STRING_FUNCTION_TO_STRING_ECMA);
        -:  153:  }
        -:  154:#else /* !JERRY_SNAPSHOT_EXEC */
        -:  155:  JERRY_ASSERT (script_p->refs_and_type & CBC_SCRIPT_HAS_FUNCTION_ARGUMENTS);
        -:  156:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  157:
    #####:  158:  lit_magic_string_id_t header_id = LIT_MAGIC_STRING_FUNCTION_TO_STRING_ANON;
        -:  159:
        -:  160:#if JERRY_ESNEXT
    #####:  161:  switch (CBC_FUNCTION_GET_TYPE (bytecode_p->status_flags))
        -:  162:  {
        -:  163:    case CBC_FUNCTION_GENERATOR:
        -:  164:    {
        -:  165:      header_id = LIT_MAGIC_STRING_FUNCTION_TO_STRING_ANON_GENERATOR;
        -:  166:      break;
        -:  167:    }
        -:  168:    case CBC_FUNCTION_ASYNC_GENERATOR:
        -:  169:    {
        -:  170:      header_id = LIT_MAGIC_STRING_FUNCTION_TO_STRING_ANON_ASYNC_GENERATOR;
        -:  171:      break;
        -:  172:    }
        -:  173:    case CBC_FUNCTION_ASYNC:
        -:  174:    {
        -:  175:      header_id = LIT_MAGIC_STRING_FUNCTION_TO_STRING_ANON_ASYNC;
        -:  176:      break;
        -:  177:    }
        -:  178:  }
        -:  179:#endif /* JERRY_ESNEXT */
        -:  180:
    #####:  181:  ecma_stringbuilder_t builder = ecma_stringbuilder_create_from (ecma_get_magic_string (header_id));
    #####:  182:  ecma_value_t function_arguments = CBC_SCRIPT_GET_FUNCTION_ARGUMENTS (script_p, script_p->refs_and_type);
        -:  183:
    #####:  184:  ecma_stringbuilder_append (&builder, ecma_get_string_from_value (function_arguments));
    #####:  185:  ecma_stringbuilder_append_raw (&builder, (const lit_utf8_byte_t *) "\n) {\n", 5);
    #####:  186:  ecma_stringbuilder_append (&builder, ecma_get_string_from_value (script_p->source_code));
    #####:  187:  ecma_stringbuilder_append_raw (&builder, (const lit_utf8_byte_t *) "\n}", 2);
        -:  188:
    #####:  189:  return ecma_make_string_value (ecma_stringbuilder_finalize (&builder));
        -:  190:#else /* !JERRY_FUNCTION_TO_STRING */
    #####:  191:  return ecma_make_magic_string_value (LIT_MAGIC_STRING_FUNCTION_TO_STRING_ECMA);
        -:  192:#endif /* JERRY_FUNCTION_TO_STRING */
        -:  193:} /* ecma_builtin_function_prototype_object_to_string */
        -:  194:
        -:  195:/**
        -:  196: * The Function.prototype object's 'apply' routine
        -:  197: *
        -:  198: * See also:
        -:  199: *          ECMA-262 v5, 15.3.4.3
        -:  200: *
        -:  201: * @return ecma value
        -:  202: *         Returned value must be freed with ecma_free_value.
        -:  203: */
        -:  204:ecma_value_t
    #####:  205:ecma_builtin_function_prototype_object_apply (ecma_object_t *func_obj_p, /**< this argument object */
        -:  206:                                              ecma_value_t arg1, /**< first argument */
        -:  207:                                              ecma_value_t arg2) /**< second argument */
        -:  208:{
        -:  209:  /* 2. */
    #####:  210:  if (ecma_is_value_null (arg2) || ecma_is_value_undefined (arg2))
        -:  211:  {
    #####:  212:    return  ecma_op_function_call (func_obj_p, arg1, NULL, 0);
        -:  213:  }
        -:  214:
        -:  215:  /* 3. */
    #####:  216:  if (!ecma_is_value_object (arg2))
        -:  217:  {
    #####:  218:    return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_argument_is_not_an_object));
        -:  219:  }
        -:  220:
    #####:  221:  ecma_object_t *obj_p = ecma_get_object_from_value (arg2);
        -:  222:
        -:  223:  /* 4-5. */
    #####:  224:  ecma_length_t length;
    #####:  225:  ecma_value_t len_value = ecma_op_object_get_length (obj_p, &length);
        -:  226:
    #####:  227:  if (ECMA_IS_VALUE_ERROR (len_value))
        -:  228:  {
    #####:  229:    return len_value;
        -:  230:  }
        -:  231:
    #####:  232:  if (length >= ECMA_FUNCTION_APPLY_ARGUMENT_COUNT_LIMIT)
        -:  233:  {
    #####:  234:    return ecma_raise_range_error (ECMA_ERR_MSG ("Too many arguments declared for Function.apply"));
        -:  235:  }
        -:  236:
        -:  237:  /* 6. */
    #####:  238:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
    #####:  239:  JMEM_DEFINE_LOCAL_ARRAY (arguments_list_p, length, ecma_value_t);
    #####:  240:  ecma_length_t index = 0;
        -:  241:
        -:  242:  /* 7. */
    #####:  243:  for (index = 0; index < length; index++)
        -:  244:  {
    #####:  245:    ecma_value_t get_value = ecma_op_object_get_by_index (obj_p, index);
        -:  246:
    #####:  247:    if (ECMA_IS_VALUE_ERROR (get_value))
        -:  248:    {
    #####:  249:      ret_value = get_value;
    #####:  250:      break;
        -:  251:    }
        -:  252:
    #####:  253:    arguments_list_p[index] = get_value;
        -:  254:  }
        -:  255:
    #####:  256:  if (ecma_is_value_empty (ret_value))
        -:  257:  {
    #####:  258:    JERRY_ASSERT (index == length);
    #####:  259:    ret_value = ecma_op_function_call (func_obj_p,
        -:  260:                                       arg1,
        -:  261:                                       arguments_list_p,
        -:  262:                                       (uint32_t) length);
        -:  263:  }
        -:  264:
    #####:  265:  for (uint32_t remove_index = 0; remove_index < index; remove_index++)
        -:  266:  {
    #####:  267:    ecma_free_value (arguments_list_p[remove_index]);
        -:  268:  }
        -:  269:
    #####:  270:  JMEM_FINALIZE_LOCAL_ARRAY (arguments_list_p);
        -:  271:
    #####:  272:  return ret_value;
        -:  273:} /* ecma_builtin_function_prototype_object_apply */
        -:  274:
        -:  275:/**
        -:  276: * The Function.prototype object's 'call' routine
        -:  277: *
        -:  278: * See also:
        -:  279: *          ECMA-262 v5, 15.3.4.4
        -:  280: *
        -:  281: * @return ecma value
        -:  282: *         Returned value must be freed with ecma_free_value.
        -:  283: */
        -:  284:static ecma_value_t
    #####:  285:ecma_builtin_function_prototype_object_call (ecma_object_t *func_obj_p , /**< this argument object */
        -:  286:                                             const ecma_value_t *arguments_list_p, /**< list of arguments */
        -:  287:                                             uint32_t arguments_number) /**< number of arguments */
        -:  288:{
    #####:  289:  if (arguments_number == 0)
        -:  290:  {
        -:  291:    /* Even a 'this' argument is missing. */
    #####:  292:    return ecma_op_function_call (func_obj_p,
        -:  293:                                  ECMA_VALUE_UNDEFINED,
        -:  294:                                  NULL,
        -:  295:                                  0);
        -:  296:  }
        -:  297:
    #####:  298:  return ecma_op_function_call (func_obj_p,
        -:  299:                                arguments_list_p[0],
        -:  300:                                arguments_list_p + 1,
    #####:  301:                                (uint32_t) (arguments_number - 1u));
        -:  302:} /* ecma_builtin_function_prototype_object_call */
        -:  303:
        -:  304:/**
        -:  305: * The Function.prototype object's 'bind' routine
        -:  306: *
        -:  307: * See also:
        -:  308: *          ECMA-262 v5, 15.3.4.5
        -:  309: *
        -:  310: * @return ecma value
        -:  311: *         Returned value must be freed with ecma_free_value.
        -:  312: */
        -:  313:static ecma_value_t
    #####:  314:ecma_builtin_function_prototype_object_bind (ecma_object_t *this_arg_obj_p , /**< this argument object */
        -:  315:                                             const ecma_value_t *arguments_list_p, /**< list of arguments */
        -:  316:                                             uint32_t arguments_number) /**< number of arguments */
        -:  317:{
        -:  318:  /* 4. 11. 18. */
        -:  319:  ecma_object_t *prototype_obj_p;
        -:  320:
        -:  321:#if !JERRY_ESNEXT
    #####:  322:  prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  323:#else /* JERRY_ESNEXT */
        -:  324:#if JERRY_BUILTIN_PROXY
    #####:  325:  if (ECMA_OBJECT_IS_PROXY (this_arg_obj_p))
        -:  326:  {
    #####:  327:    ecma_value_t proto = ecma_proxy_object_get_prototype_of (this_arg_obj_p);
        -:  328:
    #####:  329:    if (ECMA_IS_VALUE_ERROR (proto))
        -:  330:    {
    #####:  331:      return proto;
        -:  332:    }
    #####:  333:    prototype_obj_p = ecma_is_value_null (proto) ? NULL : ecma_get_object_from_value (proto);
        -:  334:  }
        -:  335:  else
        -:  336:  {
        -:  337:#endif /* JERRY_BUILTIN_PROXY */
    #####:  338:    jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (this_arg_obj_p);
    #####:  339:    if (proto_cp != JMEM_CP_NULL)
        -:  340:    {
    #####:  341:      prototype_obj_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);
    #####:  342:      ecma_ref_object (prototype_obj_p);
        -:  343:    }
        -:  344:    else
        -:  345:    {
    #####:  346:      prototype_obj_p = NULL;
        -:  347:    }
        -:  348:#if JERRY_BUILTIN_PROXY
        -:  349:  }
        -:  350:#endif /* JERRY_BUILTIN_PROXY */
        -:  351:#endif /* !JERRY_ESNEXT */
        -:  352:
        -:  353:  ecma_object_t *function_p;
        -:  354:  ecma_bound_function_t *bound_func_p;
        -:  355:
    #####:  356:  if (arguments_number == 0
    #####:  357:      || (arguments_number == 1 && !ecma_is_value_integer_number (arguments_list_p[0])))
        -:  358:  {
    #####:  359:    function_p = ecma_create_object (prototype_obj_p,
        -:  360:                                     sizeof (ecma_bound_function_t),
        -:  361:                                     ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -:  362:
        -:  363:    /* 8. */
    #####:  364:    bound_func_p = (ecma_bound_function_t *) function_p;
    #####:  365:    ECMA_SET_NON_NULL_POINTER_TAG (bound_func_p->header.u.bound_function.target_function,
        -:  366:                                   this_arg_obj_p,
        -:  367:                                   0);
        -:  368:
    #####:  369:    bound_func_p->header.u.bound_function.args_len_or_this = ECMA_VALUE_UNDEFINED;
        -:  370:
    #####:  371:    if (arguments_number != 0)
        -:  372:    {
    #####:  373:      bound_func_p->header.u.bound_function.args_len_or_this = ecma_copy_value_if_not_object (arguments_list_p[0]);
        -:  374:    }
        -:  375:  }
        -:  376:  else
        -:  377:  {
    #####:  378:    JERRY_ASSERT (arguments_number > 0);
        -:  379:
    #####:  380:    size_t obj_size = sizeof (ecma_bound_function_t) + (arguments_number * sizeof (ecma_value_t));
        -:  381:
    #####:  382:    function_p = ecma_create_object (prototype_obj_p,
        -:  383:                                     obj_size,
        -:  384:                                     ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -:  385:
        -:  386:    /* 8. */
    #####:  387:    bound_func_p = (ecma_bound_function_t *) function_p;
    #####:  388:    ECMA_SET_NON_NULL_POINTER_TAG (bound_func_p->header.u.bound_function.target_function,
        -:  389:                                   this_arg_obj_p,
        -:  390:                                   0);
        -:  391:
        -:  392:    /* NOTE: This solution provides temporary false data about the object's size
        -:  393:       but prevents GC from freeing it until it's not fully initialized. */
    #####:  394:    bound_func_p->header.u.bound_function.args_len_or_this = ECMA_VALUE_UNDEFINED;
    #####:  395:    ecma_value_t *args_p = (ecma_value_t *) (bound_func_p + 1);
        -:  396:
    #####:  397:    for (uint32_t i = 0; i < arguments_number; i++)
        -:  398:    {
    #####:  399:      *args_p++ = ecma_copy_value_if_not_object (arguments_list_p[i]);
        -:  400:    }
        -:  401:
    #####:  402:    ecma_value_t args_len_or_this = ecma_make_integer_value ((ecma_integer_value_t) arguments_number);
    #####:  403:    bound_func_p->header.u.bound_function.args_len_or_this = args_len_or_this;
        -:  404:  }
        -:  405:
        -:  406:#if JERRY_ESNEXT
    #####:  407:  if (prototype_obj_p != NULL)
        -:  408:  {
    #####:  409:    ecma_deref_object (prototype_obj_p);
        -:  410:  }
        -:  411:
    #####:  412:  bound_func_p->target_length = ecma_make_integer_value (0);
        -:  413:
    #####:  414:  ecma_string_t *len_string = ecma_get_magic_string (LIT_MAGIC_STRING_LENGTH);
    #####:  415:  ecma_property_descriptor_t prop_desc;
    #####:  416:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (this_arg_obj_p,
        -:  417:                                                                    len_string,
        -:  418:                                                                    &prop_desc);
        -:  419:
        -:  420:#if JERRY_BUILTIN_PROXY
    #####:  421:  if (ECMA_IS_VALUE_ERROR (status))
        -:  422:  {
    #####:  423:    ecma_deref_object (function_p);
    #####:  424:    return status;
        -:  425:  }
        -:  426:#endif /* JERRY_BUILTIN_PROXY */
        -:  427:
    #####:  428:  if (ecma_is_value_true (status))
        -:  429:  {
    #####:  430:    ecma_free_property_descriptor (&prop_desc);
    #####:  431:    ecma_value_t len_value = ecma_op_object_get (this_arg_obj_p,
        -:  432:                                                 len_string);
        -:  433:
    #####:  434:    if (ECMA_IS_VALUE_ERROR (len_value))
        -:  435:    {
    #####:  436:      ecma_deref_object (function_p);
    #####:  437:      return len_value;
        -:  438:    }
        -:  439:
    #####:  440:    if (ecma_is_value_number (len_value))
        -:  441:    {
    #####:  442:      ecma_number_t len_num;
    #####:  443:      ecma_op_to_integer (len_value, &len_num);
    #####:  444:      bound_func_p->target_length = ecma_make_number_value (len_num);
        -:  445:    }
    #####:  446:    ecma_free_value (len_value);
        -:  447:  }
        -:  448:
        -:  449:  /* 12. */
    #####:  450:  ecma_value_t name_value = ecma_op_object_get_by_magic_id (this_arg_obj_p, LIT_MAGIC_STRING_NAME);
    #####:  451:  if (ECMA_IS_VALUE_ERROR (name_value))
        -:  452:  {
    #####:  453:    ecma_deref_object (function_p);
    #####:  454:    return name_value;
        -:  455:  }
        -:  456:
        -:  457:  ecma_string_t *name_p;
        -:  458:
    #####:  459:  if (ecma_is_value_string (name_value))
        -:  460:  {
    #####:  461:    name_p = ecma_get_string_from_value (name_value);
        -:  462:  }
        -:  463:  else
        -:  464:  {
    #####:  465:    ecma_free_value (name_value);
    #####:  466:    name_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
        -:  467:  }
        -:  468:
    #####:  469:  ecma_value_t bound_function_name = ecma_op_function_form_name (name_p, "bound ", 6);
        -:  470:
    #####:  471:  ecma_deref_ecma_string (name_p);
        -:  472:
        -:  473:  ecma_property_value_t *name_prop_value_p;
    #####:  474:  name_prop_value_p = ecma_create_named_data_property (function_p,
        -:  475:                                                       ecma_get_magic_string (LIT_MAGIC_STRING_NAME),
        -:  476:                                                       ECMA_PROPERTY_FLAG_CONFIGURABLE,
        -:  477:                                                       NULL);
        -:  478:
    #####:  479:  name_prop_value_p->value = bound_function_name;
        -:  480:#endif /* JERRY_ESNEXT */
        -:  481:
        -:  482:  /*
        -:  483:   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_FUNCTION type.
        -:  484:   *
        -:  485:   * See also: ecma_object_get_class_name
        -:  486:   */
        -:  487:
        -:  488:  /* 22. */
    #####:  489:  return ecma_make_object_value (function_p);
        -:  490:} /* ecma_builtin_function_prototype_object_bind */
        -:  491:
        -:  492:/**
        -:  493: * Handle calling [[Call]] of built-in Function.prototype object
        -:  494: *
        -:  495: * @return ecma value
        -:  496: */
        -:  497:ecma_value_t
    #####:  498:ecma_builtin_function_prototype_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  499:                                               uint32_t arguments_list_len) /**< number of arguments */
        -:  500:{
    #####:  501:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  502:
    #####:  503:  return ECMA_VALUE_UNDEFINED;
        -:  504:} /* ecma_builtin_function_prototype_dispatch_call */
        -:  505:
        -:  506:/**
        -:  507: * Handle calling [[Construct]] of built-in Function.prototype object
        -:  508: *
        -:  509: * @return ecma value
        -:  510: */
        -:  511:ecma_value_t
    #####:  512:ecma_builtin_function_prototype_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  513:                                                    uint32_t arguments_list_len) /**< number of arguments */
        -:  514:{
    #####:  515:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  516:
    #####:  517:  return ecma_raise_type_error (ECMA_ERR_MSG ("Function.prototype is not a constructor"));
        -:  518:} /* ecma_builtin_function_prototype_dispatch_construct */
        -:  519:
        -:  520:/**
        -:  521: * Dispatcher of the built-in's routines
        -:  522: *
        -:  523: * @return ecma value
        -:  524: *         Returned value must be freed with ecma_free_value.
        -:  525: */
        -:  526:ecma_value_t
    #####:  527:ecma_builtin_function_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  528:                                                  ecma_value_t this_arg, /**< 'this' argument value */
        -:  529:                                                  const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  530:                                                                                          *   passed to routine */
        -:  531:                                                  uint32_t arguments_number) /**< length of arguments' list */
        -:  532:{
    #####:  533:  if (!ecma_op_is_callable (this_arg))
        -:  534:  {
        -:  535:#if JERRY_ESNEXT
    #####:  536:    if (JERRY_UNLIKELY (builtin_routine_id == ECMA_FUNCTION_PROTOTYPE_SYMBOL_HAS_INSTANCE))
        -:  537:    {
    #####:  538:      return ECMA_VALUE_FALSE;
        -:  539:    }
        -:  540:#endif /* JERRY_ESNEXT */
        -:  541:
    #####:  542:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not a function"));
        -:  543:  }
        -:  544:
    #####:  545:  ecma_object_t *func_obj_p = ecma_get_object_from_value (this_arg);
        -:  546:
    #####:  547:  switch (builtin_routine_id)
        -:  548:  {
    #####:  549:    case ECMA_FUNCTION_PROTOTYPE_TO_STRING:
        -:  550:    {
    #####:  551:      return ecma_builtin_function_prototype_object_to_string (func_obj_p);
        -:  552:    }
    #####:  553:    case ECMA_FUNCTION_PROTOTYPE_APPLY:
        -:  554:    {
    #####:  555:      return ecma_builtin_function_prototype_object_apply (func_obj_p,
        -:  556:                                                           arguments_list_p[0],
    #####:  557:                                                           arguments_list_p[1]);
        -:  558:    }
    #####:  559:    case ECMA_FUNCTION_PROTOTYPE_CALL:
        -:  560:    {
    #####:  561:      return ecma_builtin_function_prototype_object_call (func_obj_p, arguments_list_p, arguments_number);
        -:  562:    }
    #####:  563:    case ECMA_FUNCTION_PROTOTYPE_BIND:
        -:  564:    {
    #####:  565:      return ecma_builtin_function_prototype_object_bind (func_obj_p, arguments_list_p, arguments_number);
        -:  566:    }
        -:  567:#if JERRY_ESNEXT
    #####:  568:    case ECMA_FUNCTION_PROTOTYPE_SYMBOL_HAS_INSTANCE:
        -:  569:    {
    #####:  570:      return ecma_op_object_has_instance (func_obj_p, arguments_list_p[0]);
        -:  571:    }
        -:  572:#endif /* JERRY_ESNEXT */
    #####:  573:    default:
        -:  574:    {
    #####:  575:      JERRY_UNREACHABLE ();
        -:  576:    }
        -:  577:  }
        -:  578:} /* ecma_builtin_function_prototype_dispatch_routine */
        -:  579:
        -:  580:/**
        -:  581: * @}
        -:  582: * @}
        -:  583: * @}
        -:  584: */
