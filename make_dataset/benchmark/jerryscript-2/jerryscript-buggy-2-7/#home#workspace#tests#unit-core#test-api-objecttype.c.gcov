        -:    0:Source:/home/workspace/tests/unit-core/test-api-objecttype.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:typedef struct
        -:   22:{
        -:   23:  jerry_object_type_t type_info;
        -:   24:  jerry_value_t value;
        -:   25:  bool active;
        -:   26:} test_entry_t;
        -:   27:
        -:   28:#define ENTRY(TYPE, VALUE) { TYPE, VALUE, true }
        -:   29:#define ENTRY_IF(TYPE, VALUE, FEATURE) { TYPE, VALUE, jerry_is_feature_enabled (FEATURE) }
        -:   30:#define EVALUATE(BUFF) (jerry_eval ((BUFF), sizeof ((BUFF)) - 1, JERRY_PARSE_NO_OPTS))
        -:   31:#define PARSE(OPTS) (jerry_parse ((const jerry_char_t *) "", 0, (OPTS)))
        -:   32:static jerry_value_t
    #####:   33:test_ext_function (const jerry_call_info_t *call_info_p, /**< call information */
        -:   34:                   const jerry_value_t args_p[], /**< array of arguments */
        -:   35:                   const jerry_length_t args_cnt) /**< number of arguments */
        -:   36:{
        -:   37:  (void) call_info_p;
        -:   38:  (void) args_p;
        -:   39:  (void) args_cnt;
    #####:   40:  return jerry_create_boolean (true);
        -:   41:} /* test_ext_function */
        -:   42:
        -:   43:static jerry_object_type_t
    #####:   44:test_namespace (const jerry_parse_options_t module_parse_options) /** module options */
        -:   45:{
    #####:   46:  jerry_value_t module = jerry_parse ((const jerry_char_t *) "", 0, &module_parse_options);
    #####:   47:  jerry_value_t module_linked = jerry_module_link (module, NULL, NULL);
    #####:   48:  jerry_object_type_t namespace = jerry_module_get_namespace (module);
    #####:   49:  jerry_release_value (module_linked);
    #####:   50:  jerry_release_value (module);
    #####:   51:  return namespace;
        -:   52:} /* test_namespace */
        -:   53:
        -:   54:static jerry_value_t
    #####:   55:test_dataview (void)
        -:   56:{
    #####:   57:  jerry_value_t arraybuffer = jerry_create_arraybuffer (10);
    #####:   58:  jerry_value_t dataview = jerry_create_dataview (arraybuffer, 0, 4);
        -:   59:
    #####:   60:  jerry_release_value (arraybuffer);
        -:   61:
    #####:   62:  return dataview;
        -:   63:} /* test_dataview */
        -:   64:
        -:   65:int
    #####:   66:main (void)
        -:   67:{
    #####:   68:  TEST_INIT ();
        -:   69:
    #####:   70:  jerry_init (JERRY_INIT_EMPTY);
        -:   71:
    #####:   72:  const jerry_char_t proxy_object[] = "new Proxy({}, {})";
    #####:   73:  const jerry_char_t typedarray_object[] = "new Uint8Array()";
    #####:   74:  const jerry_char_t container_object[] = "new Map()";
    #####:   75:  const jerry_char_t iterator_object[] = "[1, 2, 3].values()";
    #####:   76:  const jerry_char_t arrow_function[] = "_ => 5";
    #####:   77:  const jerry_char_t async_arrow_function[] = "async _ => 5";
    #####:   78:  const jerry_char_t generator_function[] = "function *f() {}; f";
    #####:   79:  const jerry_char_t async_generator_function[] = "async function *f() {}; f";
    #####:   80:  const jerry_char_t getter_function[] = "Object.getOwnPropertyDescriptor({get a(){}}, 'a').get";
    #####:   81:  const jerry_char_t setter_function[] = "Object.getOwnPropertyDescriptor({set a(b){}}, 'a').set";
    #####:   82:  const jerry_char_t method_function[] = "Object.getOwnPropertyDescriptor({a(){}}, 'a').value";
        -:   83:
    #####:   84:  const jerry_char_t symbol_object[] = "new Object(Symbol('foo'))";
    #####:   85:  const jerry_char_t generator_object[] = "function *f() { yield 5 }; f()";
    #####:   86:  const jerry_char_t bigint_object[] = "Object(5n)";
        -:   87:
    #####:   88:  const jerry_char_t builtin_function[] = "Object";
    #####:   89:  const jerry_char_t simple_function[] = "function f() {}; f";
    #####:   90:  const jerry_char_t bound_function[] = "function f() {}; f.bind(1,2)";
    #####:   91:  const jerry_char_t mapped_arguments[] = "function f(a, b) { return arguments; }; f()";
    #####:   92:  const jerry_char_t unmapped_arguments[] = "function f(a, b) {'use strict'; return arguments; }; f()";
    #####:   93:  const jerry_char_t boolean_object[] = "new Boolean(true)";
    #####:   94:  const jerry_char_t date_object[] = "new Date()";
    #####:   95:  const jerry_char_t number_object[] = "new Number(5)";
    #####:   96:  const jerry_char_t regexp_object[] = "new RegExp()";
    #####:   97:  const jerry_char_t string_object[] = "new String('foo')";
    #####:   98:  const jerry_char_t weak_ref_object[] = "new WeakRef({})";
    #####:   99:  const jerry_char_t error_object[] = "new Error()";
        -:  100:
        -:  101:  jerry_parse_options_t module_parse_options;
    #####:  102:  module_parse_options.options = JERRY_PARSE_MODULE;
        -:  103:
    #####:  104:  test_entry_t entries[] =
        -:  105:  {
    #####:  106:    ENTRY (JERRY_OBJECT_TYPE_NONE, jerry_create_number (-33.0)),
    #####:  107:    ENTRY (JERRY_OBJECT_TYPE_NONE, jerry_create_boolean (true)),
    #####:  108:    ENTRY (JERRY_OBJECT_TYPE_NONE, jerry_create_undefined ()),
    #####:  109:    ENTRY (JERRY_OBJECT_TYPE_NONE, jerry_create_null ()),
    #####:  110:    ENTRY (JERRY_OBJECT_TYPE_NONE, jerry_create_string ((const jerry_char_t *) "foo")),
    #####:  111:    ENTRY (JERRY_OBJECT_TYPE_NONE, jerry_create_error (JERRY_ERROR_TYPE, (const jerry_char_t *) "error")),
        -:  112:
    #####:  113:    ENTRY (JERRY_OBJECT_TYPE_GENERIC, jerry_create_object ()),
    #####:  114:    ENTRY_IF (JERRY_OBJECT_TYPE_MODULE_NAMESPACE, test_namespace (module_parse_options), JERRY_FEATURE_MODULE),
    #####:  115:    ENTRY (JERRY_OBJECT_TYPE_ARRAY, jerry_create_array (10)),
        -:  116:
    #####:  117:    ENTRY_IF (JERRY_OBJECT_TYPE_PROXY, EVALUATE (proxy_object), JERRY_FEATURE_PROXY),
    #####:  118:    ENTRY_IF (JERRY_OBJECT_TYPE_TYPEDARRAY, EVALUATE (typedarray_object), JERRY_FEATURE_TYPEDARRAY),
    #####:  119:    ENTRY_IF (JERRY_OBJECT_TYPE_CONTAINER, EVALUATE (container_object), JERRY_FEATURE_MAP),
    #####:  120:    ENTRY_IF (JERRY_OBJECT_TYPE_ITERATOR, EVALUATE (iterator_object), JERRY_FEATURE_SYMBOL),
        -:  121:
    #####:  122:    ENTRY (JERRY_OBJECT_TYPE_SCRIPT, PARSE (NULL)),
    #####:  123:    ENTRY_IF (JERRY_OBJECT_TYPE_MODULE, PARSE (&module_parse_options), JERRY_FEATURE_MODULE),
    #####:  124:    ENTRY_IF (JERRY_OBJECT_TYPE_PROMISE, jerry_create_promise (), JERRY_FEATURE_PROMISE),
    #####:  125:    ENTRY_IF (JERRY_OBJECT_TYPE_DATAVIEW, test_dataview (), JERRY_FEATURE_DATAVIEW),
    #####:  126:    ENTRY_IF (JERRY_OBJECT_TYPE_FUNCTION, EVALUATE (arrow_function), JERRY_FEATURE_SYMBOL),
    #####:  127:    ENTRY_IF (JERRY_OBJECT_TYPE_FUNCTION, EVALUATE (async_arrow_function), JERRY_FEATURE_SYMBOL),
    #####:  128:    ENTRY_IF (JERRY_OBJECT_TYPE_FUNCTION, EVALUATE (generator_function), JERRY_FEATURE_SYMBOL),
    #####:  129:    ENTRY_IF (JERRY_OBJECT_TYPE_FUNCTION, EVALUATE (async_generator_function), JERRY_FEATURE_SYMBOL),
    #####:  130:    ENTRY_IF (JERRY_OBJECT_TYPE_FUNCTION, EVALUATE (method_function), JERRY_FEATURE_SYMBOL),
    #####:  131:    ENTRY (JERRY_OBJECT_TYPE_FUNCTION, EVALUATE (builtin_function)),
    #####:  132:    ENTRY (JERRY_OBJECT_TYPE_FUNCTION, EVALUATE (simple_function)),
    #####:  133:    ENTRY (JERRY_OBJECT_TYPE_FUNCTION, EVALUATE (bound_function)),
    #####:  134:    ENTRY (JERRY_OBJECT_TYPE_FUNCTION, jerry_create_external_function (test_ext_function)),
    #####:  135:    ENTRY (JERRY_OBJECT_TYPE_FUNCTION, EVALUATE (getter_function)),
    #####:  136:    ENTRY (JERRY_OBJECT_TYPE_FUNCTION, EVALUATE (setter_function)),
    #####:  137:    ENTRY_IF (JERRY_OBJECT_TYPE_ERROR, EVALUATE (error_object), JERRY_FEATURE_ERROR_MESSAGES),
    #####:  138:    ENTRY_IF (JERRY_OBJECT_TYPE_ARRAYBUFFER, jerry_create_arraybuffer (10), JERRY_FEATURE_TYPEDARRAY),
        -:  139:
    #####:  140:    ENTRY (JERRY_OBJECT_TYPE_ARGUMENTS, EVALUATE (mapped_arguments)),
    #####:  141:    ENTRY (JERRY_OBJECT_TYPE_ARGUMENTS, EVALUATE (unmapped_arguments)),
    #####:  142:    ENTRY (JERRY_OBJECT_TYPE_BOOLEAN, EVALUATE (boolean_object)),
    #####:  143:    ENTRY (JERRY_OBJECT_TYPE_DATE, EVALUATE (date_object)),
    #####:  144:    ENTRY (JERRY_OBJECT_TYPE_NUMBER, EVALUATE (number_object)),
    #####:  145:    ENTRY (JERRY_OBJECT_TYPE_REGEXP, EVALUATE (regexp_object)),
    #####:  146:    ENTRY (JERRY_OBJECT_TYPE_STRING, EVALUATE (string_object)),
    #####:  147:    ENTRY_IF (JERRY_OBJECT_TYPE_SYMBOL, EVALUATE (symbol_object), JERRY_FEATURE_SYMBOL),
    #####:  148:    ENTRY_IF (JERRY_OBJECT_TYPE_GENERATOR, EVALUATE (generator_object), JERRY_FEATURE_SYMBOL),
    #####:  149:    ENTRY_IF (JERRY_OBJECT_TYPE_BIGINT, EVALUATE (bigint_object), JERRY_FEATURE_BIGINT),
    #####:  150:    ENTRY_IF (JERRY_OBJECT_TYPE_WEAKREF, EVALUATE (weak_ref_object), JERRY_FEATURE_WEAKREF),
        -:  151:  };
        -:  152:
    #####:  153:  for (size_t idx = 0; idx < sizeof (entries) / sizeof (entries[0]); idx++)
        -:  154:  {
    #####:  155:    jerry_object_type_t type_info = jerry_object_get_type (entries[idx].value);
        -:  156:
    #####:  157:    TEST_ASSERT (!entries[idx].active || type_info == entries[idx].type_info);
    #####:  158:    jerry_release_value (entries[idx].value);
        -:  159:  }
        -:  160:
    #####:  161:  if (jerry_is_feature_enabled (JERRY_FEATURE_REALM))
        -:  162:  {
    #####:  163:    jerry_value_t new_realm = jerry_create_realm ();
    #####:  164:    jerry_object_type_t new_realm_object_type = jerry_object_get_type (new_realm);
    #####:  165:    TEST_ASSERT (new_realm_object_type == JERRY_OBJECT_TYPE_GENERIC);
        -:  166:
    #####:  167:    jerry_value_t old_realm = jerry_set_realm (new_realm);
    #####:  168:    jerry_object_type_t old_realm_object_type = jerry_object_get_type (old_realm);
    #####:  169:    TEST_ASSERT (old_realm_object_type == JERRY_OBJECT_TYPE_GENERIC);
        -:  170:
    #####:  171:    jerry_set_realm (old_realm);
        -:  172:
    #####:  173:    jerry_release_value (new_realm);
        -:  174:  }
        -:  175:
    #####:  176:  jerry_cleanup ();
        -:  177:
        -:  178:  return 0;
        -:  179:} /* main */
