        -:    0:Source:/home/workspace/tests/unit-core/test-arraybuffer.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:/**
        -:   22: * Register a JavaScript value in the global object.
        -:   23: */
        -:   24:static void
    #####:   25:register_js_value (const char *name_p, /**< name of the function */
        -:   26:                   jerry_value_t value) /**< JS value */
        -:   27:{
    #####:   28:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -:   29:
    #####:   30:  jerry_value_t name_val = jerry_create_string ((const jerry_char_t *) name_p);
    #####:   31:  jerry_value_t result_val = jerry_set_property (global_obj_val, name_val, value);
    #####:   32:  TEST_ASSERT (jerry_value_is_boolean (result_val));
        -:   33:
    #####:   34:  jerry_release_value (name_val);
    #####:   35:  jerry_release_value (global_obj_val);
        -:   36:
    #####:   37:  jerry_release_value (result_val);
    #####:   38:} /* register_js_value */
        -:   39:
        -:   40:static jerry_value_t
    #####:   41:assert_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   42:                const jerry_value_t args_p[], /**< function arguments */
        -:   43:                const jerry_length_t args_cnt) /**< number of function arguments */
        -:   44:{
        -:   45:  JERRY_UNUSED (call_info_p);
        -:   46:
    #####:   47:  if (args_cnt > 0
    #####:   48:      && jerry_value_is_true (args_p[0]))
        -:   49:  {
    #####:   50:    return jerry_create_boolean (true);
        -:   51:  }
        -:   52:
    #####:   53:  if (args_cnt > 1
    #####:   54:      && jerry_value_is_string (args_p[1]))
    #####:   55:  {
    #####:   56:    jerry_length_t utf8_sz = jerry_get_string_size (args_p[1]);
    #####:   57:    TEST_ASSERT (utf8_sz <= 127); /* 127 is the expected max assert fail message size. */
    #####:   58:    JERRY_VLA (char, string_from_utf8, utf8_sz + 1);
    #####:   59:    string_from_utf8[utf8_sz] = 0;
        -:   60:
    #####:   61:    jerry_string_to_char_buffer (args_p[1], (jerry_char_t *) string_from_utf8, utf8_sz);
        -:   62:
    #####:   63:    printf ("JS assert: %s\n", string_from_utf8);
        -:   64:  }
        -:   65:
    #####:   66:  TEST_ASSERT (false);
        -:   67:} /* assert_handler */
        -:   68:
        -:   69:/**
        -:   70: * Test ArrayBuffer 'read' api call with various offset values.
        -:   71: */
        -:   72:static void
    #####:   73:test_read_with_offset (uint8_t offset) /**< offset for buffer read. */
        -:   74:{
    #####:   75:  const jerry_char_t eval_arraybuffer_src[] = TEST_STRING_LITERAL (
        -:   76:    "var array = new Uint8Array (15);"
        -:   77:    "for (var i = 0; i < array.length; i++) { array[i] = i * 2; };"
        -:   78:    "array.buffer"
        -:   79:  );
    #####:   80:  jerry_value_t arraybuffer = jerry_eval (eval_arraybuffer_src,
        -:   81:                                          sizeof (eval_arraybuffer_src) - 1,
        -:   82:                                          JERRY_PARSE_STRICT_MODE);
        -:   83:
    #####:   84:  TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:   85:  TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:   86:  TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == 15);
        -:   87:
        -:   88:  uint8_t buffer[20];
    #####:   89:  memset (buffer, 120, 20);
        -:   90:
        -:   91:  /* Try to copy more than the target buffer size. */
    #####:   92:  jerry_length_t copied = jerry_arraybuffer_read (arraybuffer, offset, buffer, 20);
    #####:   93:  TEST_ASSERT (copied == (jerry_length_t) (15 - offset));
        -:   94:
    #####:   95:  for (uint8_t i = 0; i < copied; i++)
        -:   96:  {
    #####:   97:    TEST_ASSERT (buffer[i] == (i + offset) * 2);
        -:   98:  }
    #####:   99:  TEST_ASSERT (buffer[15 - offset] == 120);
        -:  100:
    #####:  101:  jerry_release_value (arraybuffer);
    #####:  102:} /* test_read_with_offset */
        -:  103:
        -:  104:/**
        -:  105: * Test ArrayBuffer 'write' api call with various offset values.
        -:  106: */
    #####:  107:static void test_write_with_offset (uint8_t offset) /**< offset for buffer write. */
        -:  108:{
        -:  109:  {
    #####:  110:    jerry_value_t offset_val = jerry_create_number (offset);
    #####:  111:    register_js_value ("offset", offset_val);
    #####:  112:    jerry_release_value (offset_val);
        -:  113:  }
        -:  114:
    #####:  115:  const jerry_char_t eval_arraybuffer_src[] = "var array = new Uint8Array (15); array.buffer";
    #####:  116:  jerry_value_t arraybuffer = jerry_eval (eval_arraybuffer_src,
        -:  117:                                          sizeof (eval_arraybuffer_src) - 1,
        -:  118:                                          JERRY_PARSE_STRICT_MODE);
        -:  119:
    #####:  120:  TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  121:  TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  122:  TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == 15);
        -:  123:
        -:  124:  uint8_t buffer[20];
        -:  125:
    #####:  126:  for (uint8_t i = 0; i < 20; i++)
        -:  127:  {
    #####:  128:    buffer[i] = (uint8_t) (i * 3);
        -:  129:  }
        -:  130:
        -:  131:  /* Intentionally copy more than the allowed space. */
    #####:  132:  jerry_length_t copied = jerry_arraybuffer_write (arraybuffer, offset, buffer, 20);
    #####:  133:  TEST_ASSERT (copied == (jerry_length_t) (15 - offset));
        -:  134:
    #####:  135:  const jerry_char_t eval_test_arraybuffer[] = TEST_STRING_LITERAL (
        -:  136:    "for (var i = 0; i < offset; i++)"
        -:  137:    "{"
        -:  138:    "  assert (array[i] == 0, 'offset check for: ' + i + ' was: ' + array[i] + ' should be: 0');"
        -:  139:    "};"
        -:  140:    "for (var i = offset; i < array.length; i++)"
        -:  141:    "{"
        -:  142:    "  var expected = (i - offset) * 3;"
        -:  143:    "  assert (array[i] == expected, 'calc check for: ' + i + ' was: ' + array[i] + ' should be: ' + expected);"
        -:  144:    "};"
        -:  145:    "assert (array[15] === undefined, 'ArrayBuffer out of bounds index should return undefined value');"
        -:  146:  );
    #####:  147:  jerry_value_t res = jerry_eval (eval_test_arraybuffer,
        -:  148:                                  sizeof (eval_test_arraybuffer) - 1,
        -:  149:                                  JERRY_PARSE_STRICT_MODE);
    #####:  150:  jerry_release_value (res);
    #####:  151:  jerry_release_value (arraybuffer);
    #####:  152:} /* test_write_with_offset */
        -:  153:
        -:  154:static int allocate_mode = 0;
        -:  155:static int allocate_count = 0;
        -:  156:static int free_count = 0;
        -:  157:
        -:  158:static uint8_t *
    #####:  159:test_allocate_cb (jerry_arraybuffer_type_t buffer_type, /**< type of the array buffer object */
        -:  160:                  uint32_t buffer_size, /**< size of the requested buffer */
        -:  161:                  void **buffer_user_p, /**< [in/out] user pointer assigned to the array buffer object */
        -:  162:                  void *user_p) /**< user pointer passed to jerry_arraybuffer_set_allocation_callbacks */
        -:  163:{
    #####:  164:  TEST_ASSERT (buffer_type == JERRY_ARRAYBUFFER_TYPE_ARRAYBUFFER);
    #####:  165:  TEST_ASSERT (user_p == (void *) &allocate_mode);
        -:  166:
    #####:  167:  if (*buffer_user_p != NULL)
        -:  168:  {
    #####:  169:    TEST_ASSERT (*buffer_user_p == (void *) &allocate_count);
    #####:  170:    TEST_ASSERT (buffer_size == 20);
    #####:  171:    allocate_count++;
    #####:  172:    *buffer_user_p = (void *) &free_count;
        -:  173:  }
        -:  174:  else
        -:  175:  {
    #####:  176:    *buffer_user_p = (void *) &allocate_mode;
        -:  177:  }
    #####:  178:  return (uint8_t *) malloc (buffer_size);
        -:  179:} /* test_allocate_cb */
        -:  180:
        -:  181:static void
    #####:  182:test_free_cb (jerry_arraybuffer_type_t buffer_type, /**< type of the array buffer object */
        -:  183:              uint8_t *buffer_p, /**< pointer to the allocated buffer */
        -:  184:              uint32_t buffer_size, /**< size of the allocated buffer */
        -:  185:              void *buffer_user_p, /**< user pointer assigned to the array buffer object */
        -:  186:              void *user_p) /**< user pointer passed to jerry_arraybuffer_set_allocation_callbacks */
        -:  187:{
    #####:  188:  TEST_ASSERT (buffer_type == JERRY_ARRAYBUFFER_TYPE_ARRAYBUFFER);
    #####:  189:  TEST_ASSERT (user_p == (void *) &allocate_mode);
        -:  190:
    #####:  191:  if (buffer_user_p == NULL)
        -:  192:  {
    #####:  193:    TEST_ASSERT (buffer_size == 15);
    #####:  194:    free_count++;
        -:  195:  }
    #####:  196:  else if (buffer_user_p == (void *) &free_count)
        -:  197:  {
    #####:  198:    TEST_ASSERT (buffer_size == 20);
    #####:  199:    free_count++;
        -:  200:  }
        -:  201:  else
        -:  202:  {
    #####:  203:    TEST_ASSERT (buffer_user_p == (void *) &allocate_mode);
        -:  204:  }
        -:  205:
    #####:  206:  free (buffer_p);
    #####:  207:} /* test_free_cb */
        -:  208:
        -:  209:int
    #####:  210:main (void)
        -:  211:{
    #####:  212:  jerry_init (JERRY_INIT_EMPTY);
        -:  213:
    #####:  214:  if (!jerry_is_feature_enabled (JERRY_FEATURE_TYPEDARRAY))
        -:  215:  {
    #####:  216:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "ArrayBuffer is disabled!\n");
    #####:  217:    jerry_cleanup ();
    #####:  218:    return 0;
        -:  219:  }
        -:  220:
    #####:  221:  jerry_arraybuffer_set_compact_allocation_limit (4);
    #####:  222:  jerry_arraybuffer_set_allocator_callbacks (test_allocate_cb, test_free_cb, (void *) &allocate_mode);
        -:  223:
    #####:  224:  jerry_value_t function_val = jerry_create_external_function (assert_handler);
    #####:  225:  register_js_value ("assert", function_val);
    #####:  226:  jerry_release_value (function_val);
        -:  227:
        -:  228:  /* Test array buffer queries */
        -:  229:  {
    #####:  230:    const jerry_char_t eval_arraybuffer_src[] = "new ArrayBuffer (10)";
    #####:  231:    jerry_value_t eval_arraybuffer = jerry_eval (eval_arraybuffer_src,
        -:  232:                                                 sizeof (eval_arraybuffer_src) - 1,
        -:  233:                                                 JERRY_PARSE_STRICT_MODE);
    #####:  234:    TEST_ASSERT (!jerry_value_is_error (eval_arraybuffer));
    #####:  235:    TEST_ASSERT (jerry_value_is_arraybuffer (eval_arraybuffer));
    #####:  236:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (eval_arraybuffer) == 10);
    #####:  237:    jerry_release_value (eval_arraybuffer);
        -:  238:  }
        -:  239:
        -:  240:  /* Test array buffer creation */
        -:  241:  {
    #####:  242:    const uint32_t length = 15;
    #####:  243:    jerry_value_t arraybuffer = jerry_create_arraybuffer (length);
    #####:  244:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  245:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  246:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
    #####:  247:    jerry_release_value (arraybuffer);
        -:  248:  }
        -:  249:
        -:  250:  /* Test array buffer read operations */
    #####:  251:  for (uint8_t i = 0; i < 15; i++)
        -:  252:  {
    #####:  253:    test_read_with_offset (i);
        -:  254:  }
        -:  255:
        -:  256:  /* Test zero length ArrayBuffer read */
        -:  257:  {
    #####:  258:    const uint32_t length = 0;
    #####:  259:    jerry_value_t arraybuffer = jerry_create_arraybuffer (length);
    #####:  260:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  261:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  262:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
        -:  263:
        -:  264:    uint8_t data[20];
    #####:  265:    memset (data, 11, 20);
        -:  266:
    #####:  267:    jerry_length_t bytes_read = jerry_arraybuffer_read (arraybuffer, 0, data, 20);
    #####:  268:    TEST_ASSERT (bytes_read == 0);
        -:  269:
    #####:  270:    for (int i = 0; i < 20; i++)
        -:  271:    {
    #####:  272:      TEST_ASSERT (data[i] == 11);
        -:  273:    }
        -:  274:
    #####:  275:    jerry_release_value (arraybuffer);
        -:  276:  }
        -:  277:
        -:  278:  /* Test array buffer write operations */
    #####:  279:  for (uint8_t i = 0; i < 15; i++)
        -:  280:  {
    #####:  281:    test_write_with_offset (i);
        -:  282:  }
        -:  283:
        -:  284:  /* Test zero length ArrayBuffer write */
        -:  285:  {
    #####:  286:    const uint32_t length = 0;
    #####:  287:    jerry_value_t arraybuffer = jerry_create_arraybuffer (length);
    #####:  288:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  289:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  290:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
        -:  291:
        -:  292:    uint8_t data[20];
    #####:  293:    memset (data, 11, 20);
        -:  294:
    #####:  295:    jerry_length_t bytes_written = jerry_arraybuffer_write (arraybuffer, 0, data, 20);
    #####:  296:    TEST_ASSERT (bytes_written == 0);
        -:  297:
    #####:  298:    jerry_release_value (arraybuffer);
        -:  299:  }
        -:  300:
        -:  301:  /* Test zero length external ArrayBuffer */
        -:  302:  {
    #####:  303:    const uint32_t length = 0;
    #####:  304:    jerry_value_t arraybuffer = jerry_create_arraybuffer_external (length, NULL, NULL);
    #####:  305:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  306:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  307:    TEST_ASSERT (jerry_is_arraybuffer_detachable (arraybuffer));
    #####:  308:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
        -:  309:
        -:  310:    uint8_t data[20];
    #####:  311:    memset (data, 11, 20);
        -:  312:
    #####:  313:    jerry_length_t bytes_written = jerry_arraybuffer_write (arraybuffer, 0, data, 20);
    #####:  314:    TEST_ASSERT (bytes_written == 0);
        -:  315:
    #####:  316:    jerry_release_value (arraybuffer);
        -:  317:  }
        -:  318:
        -:  319:  /* Test ArrayBuffer with buffer allocated externally */
        -:  320:  {
    #####:  321:    const uint32_t buffer_size = 15;
    #####:  322:    const uint8_t base_value = 51;
        -:  323:
    #####:  324:    uint8_t *buffer_p = (uint8_t *) malloc (buffer_size);
    #####:  325:    memset (buffer_p, base_value, buffer_size);
        -:  326:
    #####:  327:    jerry_value_t arrayb = jerry_create_arraybuffer_external (buffer_size, buffer_p, NULL);
    #####:  328:    uint8_t new_value = 123;
    #####:  329:    jerry_length_t copied = jerry_arraybuffer_write (arrayb, 0, &new_value, 1);
    #####:  330:    TEST_ASSERT (copied == 1);
    #####:  331:    TEST_ASSERT (buffer_p[0] == new_value);
    #####:  332:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arrayb) == buffer_size);
        -:  333:
    #####:  334:    for (uint32_t i = 1; i < buffer_size; i++)
        -:  335:    {
    #####:  336:      TEST_ASSERT (buffer_p[i] == base_value);
        -:  337:    }
        -:  338:
    #####:  339:    JERRY_VLA (uint8_t, test_buffer, buffer_size);
    #####:  340:    jerry_length_t read = jerry_arraybuffer_read (arrayb, 0, test_buffer, buffer_size);
    #####:  341:    TEST_ASSERT (read == buffer_size);
    #####:  342:    TEST_ASSERT (test_buffer[0] == new_value);
        -:  343:
    #####:  344:    for (uint32_t i = 1; i < buffer_size; i++)
        -:  345:    {
    #####:  346:      TEST_ASSERT (test_buffer[i] == base_value);
        -:  347:    }
        -:  348:
    #####:  349:    TEST_ASSERT (jerry_value_is_arraybuffer (arrayb));
    #####:  350:    jerry_release_value (arrayb);
        -:  351:  }
        -:  352:
        -:  353:  /* Test ArrayBuffer external memory map/unmap */
        -:  354:  {
    #####:  355:    const uint32_t buffer_size = 20;
        -:  356:
    #####:  357:    jerry_value_t input_buffer = jerry_create_arraybuffer_external (buffer_size, NULL, (void *) &allocate_count);
    #####:  358:    register_js_value ("input_buffer", input_buffer);
    #####:  359:    jerry_release_value (input_buffer);
        -:  360:
    #####:  361:    const jerry_char_t eval_arraybuffer_src[] = TEST_STRING_LITERAL (
        -:  362:      "var array = new Uint8Array(input_buffer);"
        -:  363:      "for (var i = 0; i < array.length; i++)"
        -:  364:      "{"
        -:  365:      "  array[i] = i * 2;"
        -:  366:      "};"
        -:  367:      "array.buffer"
        -:  368:    );
    #####:  369:    jerry_value_t buffer = jerry_eval (eval_arraybuffer_src,
        -:  370:                                       sizeof (eval_arraybuffer_src) - 1,
        -:  371:                                       JERRY_PARSE_STRICT_MODE);
        -:  372:
    #####:  373:    TEST_ASSERT (!jerry_value_is_error (buffer));
    #####:  374:    TEST_ASSERT (jerry_value_is_arraybuffer (buffer));
    #####:  375:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (buffer) == 20);
        -:  376:
    #####:  377:    uint8_t *const data = jerry_get_arraybuffer_pointer (buffer);
        -:  378:
        -:  379:    /* test memory read */
    #####:  380:    for (int i = 0; i < 20; i++)
        -:  381:    {
    #####:  382:      TEST_ASSERT (data[i] == (uint8_t) (i * 2));
        -:  383:    }
        -:  384:
        -:  385:    /* "upload" new data */
        -:  386:    double sum = 0;
    #####:  387:    for (int i = 0; i < 20; i++)
        -:  388:    {
    #####:  389:      data[i] = (uint8_t) (i * 3);
    #####:  390:      sum += data[i];
        -:  391:    }
        -:  392:
    #####:  393:    const jerry_char_t eval_test_arraybuffer[] = TEST_STRING_LITERAL (
        -:  394:      "var sum = 0;"
        -:  395:      "for (var i = 0; i < array.length; i++)"
        -:  396:      "{"
        -:  397:      "  var expected = i * 3;"
        -:  398:      "  assert(array[i] == expected, 'Array at index ' + i + ' was: ' + array[i] + ' should be: ' + expected);"
        -:  399:      "  sum += array[i]"
        -:  400:      "};"
        -:  401:      "sum"
        -:  402:    );
    #####:  403:    jerry_value_t res = jerry_eval (eval_test_arraybuffer,
        -:  404:                                    sizeof (eval_test_arraybuffer) - 1,
        -:  405:                                    JERRY_PARSE_STRICT_MODE);
    #####:  406:    TEST_ASSERT (jerry_value_is_number (res));
    #####:  407:    TEST_ASSERT (jerry_get_number_value (res) == sum);
    #####:  408:    jerry_release_value (res);
        -:  409:
    #####:  410:    jerry_release_value (buffer);
        -:  411:  }
        -:  412:
        -:  413:  /* Test internal ArrayBuffer detach */
        -:  414:  {
    #####:  415:    const uint32_t length = 4;
    #####:  416:    jerry_value_t arraybuffer = jerry_create_arraybuffer (length);
    #####:  417:    TEST_ASSERT (jerry_arraybuffer_has_buffer (arraybuffer));
    #####:  418:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  419:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  420:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
        -:  421:
    #####:  422:    jerry_value_t is_detachable = jerry_is_arraybuffer_detachable (arraybuffer);
    #####:  423:    TEST_ASSERT (jerry_value_is_true (is_detachable));
    #####:  424:    jerry_release_value (is_detachable);
        -:  425:
    #####:  426:    jerry_value_t res = jerry_detach_arraybuffer (arraybuffer);
    #####:  427:    TEST_ASSERT (!jerry_arraybuffer_has_buffer (arraybuffer));
    #####:  428:    TEST_ASSERT (!jerry_value_is_error (res));
    #####:  429:    TEST_ASSERT (jerry_get_arraybuffer_pointer (arraybuffer) == NULL);
    #####:  430:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == 0);
        -:  431:
    #####:  432:    is_detachable = jerry_is_arraybuffer_detachable (arraybuffer);
    #####:  433:    TEST_ASSERT (jerry_value_is_false (is_detachable));
    #####:  434:    jerry_release_value (is_detachable);
        -:  435:
    #####:  436:    jerry_release_value (res);
    #####:  437:    jerry_release_value (arraybuffer);
        -:  438:  }
        -:  439:
        -:  440:  /* Test external ArrayBuffer detach */
        -:  441:  {
    #####:  442:    const uint32_t length = 64;
    #####:  443:    jerry_value_t arraybuffer = jerry_create_arraybuffer_external (length, NULL, NULL);
    #####:  444:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  445:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  446:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
    #####:  447:    TEST_ASSERT (!jerry_arraybuffer_has_buffer (arraybuffer));
        -:  448:
    #####:  449:    uint8_t buf[1] = { 1 };
    #####:  450:    TEST_ASSERT (jerry_arraybuffer_write (arraybuffer, 0, buf, 1) == 1);
    #####:  451:    TEST_ASSERT (jerry_arraybuffer_has_buffer (arraybuffer));
        -:  452:
    #####:  453:    jerry_value_t is_detachable = jerry_is_arraybuffer_detachable (arraybuffer);
    #####:  454:    TEST_ASSERT (!jerry_value_is_error (is_detachable));
    #####:  455:    TEST_ASSERT (jerry_value_is_true (is_detachable));
    #####:  456:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
    #####:  457:    jerry_release_value (is_detachable);
        -:  458:
    #####:  459:    jerry_value_t res = jerry_detach_arraybuffer (arraybuffer);
    #####:  460:    TEST_ASSERT (!jerry_value_is_error (res));
    #####:  461:    TEST_ASSERT (jerry_get_arraybuffer_pointer (arraybuffer) == NULL);
    #####:  462:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == 0);
        -:  463:
    #####:  464:    is_detachable = jerry_is_arraybuffer_detachable (arraybuffer);
    #####:  465:    TEST_ASSERT (!jerry_value_is_error (is_detachable));
    #####:  466:    TEST_ASSERT (!jerry_value_is_true (is_detachable));
    #####:  467:    TEST_ASSERT (!jerry_arraybuffer_has_buffer (arraybuffer));
    #####:  468:    jerry_release_value (is_detachable);
        -:  469:
    #####:  470:    jerry_release_value (res);
    #####:  471:    jerry_release_value (arraybuffer);
        -:  472:  }
        -:  473:
        -:  474:  /* Test ArrayBuffer created in ECMAScript */
        -:  475:  {
    #####:  476:    const jerry_char_t source[] = TEST_STRING_LITERAL ("new ArrayBuffer(64)");
    #####:  477:    jerry_value_t arraybuffer = jerry_eval (source, sizeof (source) - 1, JERRY_PARSE_NO_OPTS);
    #####:  478:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  479:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  480:    TEST_ASSERT (!jerry_arraybuffer_has_buffer (arraybuffer));
        -:  481:
    #####:  482:    uint8_t buf[2] = { 2, 3 };
    #####:  483:    TEST_ASSERT (jerry_arraybuffer_write (arraybuffer, 63, buf, 2) == 1);
    #####:  484:    TEST_ASSERT (jerry_arraybuffer_has_buffer (arraybuffer));
        -:  485:
    #####:  486:    jerry_release_value (arraybuffer);
        -:  487:  }
        -:  488:
    #####:  489:  jerry_cleanup ();
        -:  490:
    #####:  491:  TEST_ASSERT (allocate_count == 1);
    #####:  492:  TEST_ASSERT (free_count == 2);
        -:  493:
        -:  494:  return 0;
        -:  495:} /* main */
