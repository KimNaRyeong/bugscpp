        -:    0:Source:/home/workspace/tests/unit-core/test-to-property-descriptor.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "config.h"
        -:   17:#include "jerryscript.h"
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:static jerry_value_t
    #####:   21:create_property_descriptor (const char *script_p) /**< source code */
        -:   22:{
    #####:   23:  jerry_value_t result = jerry_eval ((const jerry_char_t *) script_p, strlen (script_p), 0);
    #####:   24:  TEST_ASSERT (jerry_value_is_object (result));
    #####:   25:  return result;
        -:   26:} /* create_property_descriptor */
        -:   27:
        -:   28:static void
    #####:   29:check_attribute (jerry_value_t attribute, /**< attribute to be checked */
        -:   30:                 jerry_value_t object, /**< original object */
        -:   31:                 const char *name_p) /**< name of the attribute */
        -:   32:{
    #####:   33:  jerry_value_t prop_name = jerry_create_string_from_utf8 ((const jerry_char_t *) name_p);
    #####:   34:  jerry_value_t value = jerry_get_property (object, prop_name);
        -:   35:
    #####:   36:  if (jerry_value_is_undefined (value))
        -:   37:  {
    #####:   38:    TEST_ASSERT (jerry_value_is_null (attribute));
        -:   39:  }
        -:   40:  else
        -:   41:  {
    #####:   42:    jerry_value_t result = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL, attribute, value);
    #####:   43:    TEST_ASSERT (jerry_value_is_true (result));
    #####:   44:    jerry_release_value (result);
        -:   45:  }
        -:   46:
    #####:   47:  jerry_release_value (value);
    #####:   48:  jerry_release_value (prop_name);
    #####:   49:} /* check_attribute */
        -:   50:
        -:   51:static jerry_property_descriptor_t
    #####:   52:to_property_descriptor (jerry_value_t object /**< object */)
        -:   53:{
    #####:   54:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -:   55:
    #####:   56:  jerry_value_t result = jerry_to_property_descriptor (object, &prop_desc);
    #####:   57:  TEST_ASSERT (jerry_value_is_boolean (result) && jerry_value_is_true (result));
    #####:   58:  jerry_release_value (result);
        -:   59:
    #####:   60:  return prop_desc;
        -:   61:} /* to_property_descriptor */
        -:   62:
        -:   63:int
    #####:   64:main (void)
        -:   65:{
    #####:   66:  TEST_INIT ();
        -:   67:
    #####:   68:  jerry_init (JERRY_INIT_EMPTY);
        -:   69:
        -:   70:  /* Next test. */
    #####:   71:  const char *source_p = "({ value:'X', writable:true, enumerable:true, configurable:true })";
    #####:   72:  jerry_value_t object = create_property_descriptor (source_p);
        -:   73:
    #####:   74:  jerry_property_descriptor_t prop_desc = to_property_descriptor (object);
        -:   75:
    #####:   76:  check_attribute (prop_desc.value, object, "value");
        -:   77:
    #####:   78:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_VALUE_DEFINED);
    #####:   79:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_GET_DEFINED));
    #####:   80:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_SET_DEFINED));
    #####:   81:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_WRITABLE_DEFINED);
    #####:   82:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_WRITABLE);
    #####:   83:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE_DEFINED);
    #####:   84:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE);
    #####:   85:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED);
    #####:   86:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE);
        -:   87:
    #####:   88:  jerry_release_value (object);
    #####:   89:  jerry_property_descriptor_free (&prop_desc);
        -:   90:
        -:   91:  /* Next test. */
    #####:   92:  source_p = "({ writable:false, configurable:true })";
    #####:   93:  object = create_property_descriptor (source_p);
        -:   94:
    #####:   95:  prop_desc = to_property_descriptor (object);
        -:   96:
    #####:   97:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_VALUE_DEFINED));
    #####:   98:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_GET_DEFINED));
    #####:   99:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_SET_DEFINED));
    #####:  100:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_WRITABLE_DEFINED);
    #####:  101:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_WRITABLE));
    #####:  102:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_ENUMERABLE_DEFINED));
    #####:  103:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED);
    #####:  104:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE);
        -:  105:
    #####:  106:  jerry_release_value (object);
    #####:  107:  jerry_property_descriptor_free (&prop_desc);
        -:  108:
        -:  109:  /* Next test. */
        -:  110:  /* Note: the 'set' property is defined, and it has a value of undefined.
        -:  111:   *       This is different from not having a 'set' property. */
    #####:  112:  source_p = "({ get: function() {}, set:undefined, configurable:true })";
    #####:  113:  object = create_property_descriptor (source_p);
        -:  114:
    #####:  115:  prop_desc = to_property_descriptor (object);
        -:  116:
    #####:  117:  check_attribute (prop_desc.getter, object, "get");
    #####:  118:  check_attribute (prop_desc.setter, object, "set");
        -:  119:
    #####:  120:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_VALUE_DEFINED));
    #####:  121:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_WRITABLE_DEFINED));
    #####:  122:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_GET_DEFINED);
    #####:  123:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_SET_DEFINED);
    #####:  124:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_ENUMERABLE_DEFINED));
    #####:  125:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED);
    #####:  126:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE);
        -:  127:
    #####:  128:  jerry_release_value (object);
    #####:  129:  jerry_property_descriptor_free (&prop_desc);
        -:  130:
        -:  131:  /* Next test. */
    #####:  132:  source_p = "({ get: undefined, enumerable:false })";
    #####:  133:  object = create_property_descriptor (source_p);
        -:  134:
    #####:  135:  prop_desc = to_property_descriptor (object);
        -:  136:
    #####:  137:  check_attribute (prop_desc.getter, object, "get");
        -:  138:
    #####:  139:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_VALUE_DEFINED));
    #####:  140:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_WRITABLE_DEFINED));
    #####:  141:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_GET_DEFINED);
    #####:  142:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_SET_DEFINED));
    #####:  143:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE_DEFINED);
    #####:  144:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_ENUMERABLE));
    #####:  145:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED));
        -:  146:
    #####:  147:  jerry_release_value (object);
    #####:  148:  jerry_property_descriptor_free (&prop_desc);
        -:  149:
        -:  150:  /* Next test. */
    #####:  151:  source_p = "({ set: function(v) {}, enumerable:true, configurable:false })";
    #####:  152:  object = create_property_descriptor (source_p);
        -:  153:
    #####:  154:  prop_desc = to_property_descriptor (object);
        -:  155:
    #####:  156:  check_attribute (prop_desc.setter, object, "set");
        -:  157:
    #####:  158:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_VALUE_DEFINED));
    #####:  159:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_WRITABLE_DEFINED));
    #####:  160:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_GET_DEFINED));
    #####:  161:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_SET_DEFINED);
    #####:  162:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE_DEFINED);
    #####:  163:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE);
    #####:  164:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED);
    #####:  165:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE));
        -:  166:
    #####:  167:  jerry_release_value (object);
    #####:  168:  jerry_property_descriptor_free (&prop_desc);
        -:  169:
        -:  170:  /* Next test. */
    #####:  171:  source_p = "({ get: function(v) {}, writable:true })";
    #####:  172:  object = create_property_descriptor (source_p);
    #####:  173:  jerry_value_t result = jerry_to_property_descriptor (object, &prop_desc);
    #####:  174:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  175:  jerry_release_value (result);
    #####:  176:  jerry_release_value (object);
        -:  177:
        -:  178:  /* Next test. */
    #####:  179:  object = jerry_create_null ();
    #####:  180:  result = jerry_to_property_descriptor (object, &prop_desc);
    #####:  181:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  182:  jerry_release_value (result);
    #####:  183:  jerry_release_value (object);
        -:  184:
    #####:  185:  jerry_cleanup ();
        -:  186:  return 0;
        -:  187:} /* main */
