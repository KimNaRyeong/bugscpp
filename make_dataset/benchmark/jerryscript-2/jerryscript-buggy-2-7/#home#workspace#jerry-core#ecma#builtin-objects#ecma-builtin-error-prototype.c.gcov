        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-error-prototype.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-conversion.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "lit-char-helpers.h"
        -:   24:#include "ecma-objects.h"
        -:   25:#include "ecma-string-object.h"
        -:   26:#include "jrt.h"
        -:   27:#include "lit-magic-strings.h"
        -:   28:
        -:   29:#define ECMA_BUILTINS_INTERNAL
        -:   30:#include "ecma-builtins-internal.h"
        -:   31:
        -:   32:/**
        -:   33:  * This object has a custom dispatch function.
        -:   34:  */
        -:   35:#define BUILTIN_CUSTOM_DISPATCH
        -:   36:
        -:   37:/**
        -:   38: * List of built-in routine identifiers.
        -:   39: */
        -:   40:enum
        -:   41:{
        -:   42:  ECMA_ERROR_PROTOTYPE_ROUTINE_START = 0,
        -:   43:  ECMA_ERROR_PROTOTYPE_ROUTINE_TO_STRING,
        -:   44:};
        -:   45:
        -:   46:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-error-prototype.inc.h"
        -:   47:#define BUILTIN_UNDERSCORED_ID error_prototype
        -:   48:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   49:
        -:   50:/** \addtogroup ecma ECMA
        -:   51: * @{
        -:   52: *
        -:   53: * \addtogroup ecmabuiltins
        -:   54: * @{
        -:   55: *
        -:   56: * \addtogroup errorprototype ECMA Error.prototype object built-in
        -:   57: * @{
        -:   58: */
        -:   59:
        -:   60:/**
        -:   61: * Helper method to get a property value from an error object
        -:   62: *
        -:   63: * @return ecma_string_t
        -:   64: */
        -:   65:static ecma_string_t *
    #####:   66:ecma_builtin_error_prototype_object_to_string_helper (ecma_object_t *obj_p, /**< error object */
        -:   67:                                                      lit_magic_string_id_t property_id, /**< property id */
        -:   68:                                                      lit_magic_string_id_t default_value) /**< default prop value */
        -:   69:{
    #####:   70:  ecma_value_t prop_value = ecma_op_object_get_by_magic_id (obj_p, property_id);
        -:   71:
    #####:   72:  if (ECMA_IS_VALUE_ERROR (prop_value))
        -:   73:  {
    #####:   74:    return NULL;
        -:   75:  }
        -:   76:
    #####:   77:  if (ecma_is_value_undefined (prop_value))
        -:   78:  {
    #####:   79:    return ecma_get_magic_string (default_value);
        -:   80:  }
        -:   81:
    #####:   82:  ecma_string_t *ret_str_p = ecma_op_to_string (prop_value);
    #####:   83:  ecma_free_value (prop_value);
        -:   84:
    #####:   85:  return ret_str_p;
        -:   86:} /* ecma_builtin_error_prototype_object_to_string_helper */
        -:   87:
        -:   88:/**
        -:   89: * The Error.prototype object's 'toString' routine
        -:   90: *
        -:   91: * See also:
        -:   92: *          ECMA-262 v5, 15.11.4.4
        -:   93: *
        -:   94: * @return ecma value
        -:   95: *         Returned value must be freed with ecma_free_value.
        -:   96: */
        -:   97:static ecma_value_t
    #####:   98:ecma_builtin_error_prototype_object_to_string (ecma_value_t this_arg) /**< this argument */
        -:   99:{
        -:  100:  /* 2. */
    #####:  101:  if (!ecma_is_value_object (this_arg))
        -:  102:  {
    #####:  103:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object"));
        -:  104:  }
        -:  105:
    #####:  106:  ecma_object_t *obj_p = ecma_get_object_from_value (this_arg);
        -:  107:
    #####:  108:  ecma_string_t *name_string_p = ecma_builtin_error_prototype_object_to_string_helper (obj_p,
        -:  109:                                                                                       LIT_MAGIC_STRING_NAME,
        -:  110:                                                                                       LIT_MAGIC_STRING_ERROR_UL);
        -:  111:
    #####:  112:  if (JERRY_UNLIKELY (name_string_p == NULL))
        -:  113:  {
    #####:  114:    return ECMA_VALUE_ERROR;
        -:  115:  }
        -:  116:
    #####:  117:  ecma_string_t *msg_string_p = ecma_builtin_error_prototype_object_to_string_helper (obj_p,
        -:  118:                                                                                      LIT_MAGIC_STRING_MESSAGE,
        -:  119:                                                                                      LIT_MAGIC_STRING__EMPTY);
        -:  120:
    #####:  121:  if (JERRY_UNLIKELY (msg_string_p == NULL))
        -:  122:  {
    #####:  123:    ecma_deref_ecma_string (name_string_p);
    #####:  124:    return ECMA_VALUE_ERROR;
        -:  125:  }
        -:  126:
    #####:  127:  if (ecma_string_is_empty (name_string_p))
        -:  128:  {
    #####:  129:    return ecma_make_string_value (msg_string_p);
        -:  130:  }
        -:  131:
    #####:  132:  if (ecma_string_is_empty (msg_string_p))
        -:  133:  {
    #####:  134:    return ecma_make_string_value (name_string_p);
        -:  135:  }
        -:  136:
    #####:  137:  ecma_stringbuilder_t builder = ecma_stringbuilder_create_from (name_string_p);
        -:  138:
    #####:  139:  ecma_stringbuilder_append_raw (&builder, (const lit_utf8_byte_t *)": ", 2);
    #####:  140:  ecma_stringbuilder_append (&builder, msg_string_p);
        -:  141:
    #####:  142:  ecma_deref_ecma_string (name_string_p);
    #####:  143:  ecma_deref_ecma_string (msg_string_p);
        -:  144:
    #####:  145:  return ecma_make_string_value (ecma_stringbuilder_finalize (&builder));
        -:  146:} /* ecma_builtin_error_prototype_object_to_string */
        -:  147:
        -:  148:/**
        -:  149: * Dispatcher of the built-in's routines
        -:  150: *
        -:  151: * @return ecma value
        -:  152: *         Returned value must be freed with ecma_free_value.
        -:  153: */
        -:  154:ecma_value_t
    #####:  155:ecma_builtin_error_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:  156:                                                                            *   identifier */
        -:  157:                                               ecma_value_t this_arg, /**< 'this' argument value */
        -:  158:                                               const ecma_value_t arguments_list_p[], /**< list of arguments passed to
        -:  159:                                                                                       *  routine */
        -:  160:                                               uint32_t arguments_number) /**< length of arguments' list */
        -:  161:{
        -:  162:  JERRY_UNUSED_2 (arguments_number, arguments_list_p);
        -:  163:
    #####:  164:  switch (builtin_routine_id)
        -:  165:  {
    #####:  166:    case ECMA_ERROR_PROTOTYPE_ROUTINE_TO_STRING:
        -:  167:    {
    #####:  168:      return ecma_builtin_error_prototype_object_to_string (this_arg);
        -:  169:    }
    #####:  170:    default:
        -:  171:    {
    #####:  172:      JERRY_UNREACHABLE ();
        -:  173:    }
        -:  174:  }
        -:  175:} /* ecma_builtin_error_prototype_dispatch_routine */
        -:  176:
        -:  177:/**
        -:  178: * @}
        -:  179: * @}
        -:  180: * @}
        -:  181: */
