        -:    0:Source:/home/workspace/tests/unit-core/test-api-property.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:int
    #####:   21:main (void)
        -:   22:{
    #####:   23:  TEST_INIT ();
        -:   24:
    #####:   25:  jerry_init (JERRY_INIT_EMPTY);
        -:   26:
        -:   27:  /* Test: init property descriptor */
    #####:   28:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
    #####:   29:  TEST_ASSERT (prop_desc.flags == JERRY_PROP_NO_OPTS);
    #####:   30:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.value));
    #####:   31:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.getter));
    #####:   32:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.setter));
        -:   33:
        -:   34:  /* Test: define own properties */
    #####:   35:  jerry_value_t global_obj_val = jerry_get_global_object ();
    #####:   36:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_defined_property");
    #####:   37:  prop_desc.flags |= JERRY_PROP_IS_VALUE_DEFINED;
    #####:   38:  prop_desc.value = jerry_acquire_value (prop_name);
    #####:   39:  jerry_value_t res = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####:   40:  TEST_ASSERT (jerry_value_is_boolean (res) && jerry_value_is_true (res));
    #####:   41:  jerry_release_value (res);
    #####:   42:  jerry_property_descriptor_free (&prop_desc);
        -:   43:
        -:   44:  /* Test: define own property with error */
    #####:   45:  prop_desc = jerry_property_descriptor_create ();
    #####:   46:  prop_desc.flags |= JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_SHOULD_THROW;
    #####:   47:  prop_desc.value = jerry_create_number (3.14);
    #####:   48:  res = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####:   49:  TEST_ASSERT (jerry_value_is_error (res));
    #####:   50:  jerry_release_value (res);
    #####:   51:  jerry_property_descriptor_free (&prop_desc);
        -:   52:
        -:   53:  /* Test: test define own property failure without throw twice */
    #####:   54:  prop_desc = jerry_property_descriptor_create ();
    #####:   55:  prop_desc.flags |= JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_GET_DEFINED;
    #####:   56:  res = jerry_define_own_property (prop_name, prop_name, &prop_desc);
    #####:   57:  TEST_ASSERT (jerry_value_is_boolean (res) && !jerry_value_is_true (res));
    #####:   58:  jerry_release_value (res);
    #####:   59:  res = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####:   60:  TEST_ASSERT (jerry_value_is_boolean (res) && !jerry_value_is_true (res));
    #####:   61:  jerry_release_value (res);
    #####:   62:  jerry_property_descriptor_free (&prop_desc);
        -:   63:
        -:   64:  /* Test: get own property descriptor */
    #####:   65:  prop_desc = jerry_property_descriptor_create ();
    #####:   66:  jerry_value_t is_ok = jerry_get_own_property_descriptor (global_obj_val, prop_name, &prop_desc);
    #####:   67:  TEST_ASSERT (jerry_value_is_boolean (is_ok) && jerry_value_is_true (is_ok));
    #####:   68:  jerry_release_value (is_ok);
    #####:   69:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_VALUE_DEFINED);
    #####:   70:  TEST_ASSERT (jerry_value_is_string (prop_desc.value));
    #####:   71:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_WRITABLE));
    #####:   72:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_ENUMERABLE));
    #####:   73:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE));
    #####:   74:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_GET_DEFINED));
    #####:   75:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.getter));
    #####:   76:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_SET_DEFINED));
    #####:   77:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.setter));
    #####:   78:  jerry_property_descriptor_free (&prop_desc);
        -:   79:
    #####:   80:  if (jerry_is_feature_enabled (JERRY_FEATURE_PROXY))
        -:   81:  {
        -:   82:    /* Note: update this test when the internal method is implemented */
    #####:   83:    jerry_value_t target = jerry_create_object ();
    #####:   84:    jerry_value_t handler = jerry_create_object ();
    #####:   85:    jerry_value_t proxy = jerry_create_proxy (target, handler);
        -:   86:
    #####:   87:    jerry_release_value (target);
    #####:   88:    jerry_release_value (handler);
    #####:   89:    is_ok = jerry_get_own_property_descriptor (proxy, prop_name, &prop_desc);
    #####:   90:    TEST_ASSERT (jerry_value_is_boolean (is_ok) && !jerry_value_is_true (is_ok));
    #####:   91:    jerry_release_value (is_ok);
    #####:   92:    jerry_release_value (proxy);
        -:   93:  }
        -:   94:
    #####:   95:  jerry_release_value (prop_name);
        -:   96:
        -:   97:  /* Test: define and get own property descriptor */
    #####:   98:  prop_desc.flags |= JERRY_PROP_IS_ENUMERABLE;
    #####:   99:  prop_name = jerry_create_string ((const jerry_char_t *) "enumerable-property");
    #####:  100:  res = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####:  101:  TEST_ASSERT (!jerry_value_is_error (res));
    #####:  102:  TEST_ASSERT (jerry_value_is_boolean (res));
    #####:  103:  TEST_ASSERT (jerry_value_is_true (res));
    #####:  104:  jerry_release_value (res);
    #####:  105:  jerry_property_descriptor_free (&prop_desc);
    #####:  106:  is_ok = jerry_get_own_property_descriptor (global_obj_val, prop_name, &prop_desc);
    #####:  107:  TEST_ASSERT (jerry_value_is_boolean (is_ok) && jerry_value_is_true (is_ok));
    #####:  108:  jerry_release_value (is_ok);
    #####:  109:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_WRITABLE));
    #####:  110:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE);
    #####:  111:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE));
        -:  112:
    #####:  113:  jerry_release_value (prop_name);
    #####:  114:  jerry_release_value (global_obj_val);
        -:  115:
        -:  116:  /* Test: define own property descriptor error */
    #####:  117:  prop_desc = jerry_property_descriptor_create ();
    #####:  118:  prop_desc.flags |= JERRY_PROP_IS_VALUE_DEFINED;
    #####:  119:  prop_desc.value = jerry_create_number (11);
        -:  120:
    #####:  121:  jerry_value_t obj_val = jerry_create_object ();
    #####:  122:  prop_name = jerry_create_string ((const jerry_char_t *) "property_key");
    #####:  123:  res = jerry_define_own_property (obj_val, prop_name, &prop_desc);
    #####:  124:  TEST_ASSERT (!jerry_value_is_error (res));
    #####:  125:  jerry_release_value (res);
        -:  126:
    #####:  127:  jerry_release_value (prop_desc.value);
    #####:  128:  prop_desc.value = jerry_create_number (22);
    #####:  129:  res = jerry_define_own_property (obj_val, prop_name, &prop_desc);
    #####:  130:  TEST_ASSERT (jerry_value_is_error (res));
    #####:  131:  jerry_release_value (res);
        -:  132:
    #####:  133:  jerry_release_value (prop_name);
    #####:  134:  jerry_release_value (obj_val);
        -:  135:
    #####:  136:  jerry_cleanup ();
        -:  137:
        -:  138:  return 0;
        -:  139:} /* main */
