        -:    0:Source:/home/workspace/tests/unit-core/test-abort.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "config.h"
        -:   17:#include "jerryscript.h"
        -:   18:
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static jerry_value_t
    #####:   22:callback_func (const jerry_call_info_t *call_info_p,
        -:   23:               const jerry_value_t args_p[],
        -:   24:               const jerry_length_t args_count)
        -:   25:{
        -:   26:  JERRY_UNUSED (call_info_p);
        -:   27:  JERRY_UNUSED (args_p);
        -:   28:  JERRY_UNUSED (args_count);
        -:   29:
    #####:   30:  jerry_value_t value = jerry_create_string ((jerry_char_t *) "Abort run!");
    #####:   31:  value = jerry_create_abort_from_value (value, true);
    #####:   32:  return value;
        -:   33:} /* callback_func */
        -:   34:
        -:   35:int
    #####:   36:main (void)
        -:   37:{
    #####:   38:  TEST_INIT ();
        -:   39:
    #####:   40:  jerry_init (JERRY_INIT_EMPTY);
        -:   41:
    #####:   42:  jerry_value_t global = jerry_get_global_object ();
    #####:   43:  jerry_value_t callback_name = jerry_create_string ((jerry_char_t *) "callback");
    #####:   44:  jerry_value_t func = jerry_create_external_function (callback_func);
    #####:   45:  jerry_value_t res = jerry_set_property (global, callback_name, func);
    #####:   46:  TEST_ASSERT (!jerry_value_is_error (res));
        -:   47:
    #####:   48:  jerry_release_value (res);
    #####:   49:  jerry_release_value (func);
    #####:   50:  jerry_release_value (callback_name);
    #####:   51:  jerry_release_value (global);
        -:   52:
    #####:   53:  const jerry_char_t inf_loop_code_src1[] = TEST_STRING_LITERAL (
        -:   54:    "while(true) {\n"
        -:   55:    "  with ({}) {\n"
        -:   56:    "    try {\n"
        -:   57:    "      callback();\n"
        -:   58:    "    } catch (e) {\n"
        -:   59:    "    } finally {\n"
        -:   60:    "    }\n"
        -:   61:    "  }\n"
        -:   62:    "}"
        -:   63:  );
        -:   64:
    #####:   65:  jerry_value_t parsed_code_val = jerry_parse (inf_loop_code_src1,
        -:   66:                                               sizeof (inf_loop_code_src1) - 1,
        -:   67:                                               NULL);
        -:   68:
    #####:   69:  TEST_ASSERT (!jerry_value_is_error (parsed_code_val));
    #####:   70:  res = jerry_run (parsed_code_val);
        -:   71:
    #####:   72:  TEST_ASSERT (jerry_value_is_abort (res));
        -:   73:
    #####:   74:  jerry_release_value (res);
    #####:   75:  jerry_release_value (parsed_code_val);
        -:   76:
    #####:   77:  const jerry_char_t inf_loop_code_src2[] = TEST_STRING_LITERAL (
        -:   78:    "function f() {"
        -:   79:    "  while(true) {\n"
        -:   80:    "    with ({}) {\n"
        -:   81:    "      try {\n"
        -:   82:    "        callback();\n"
        -:   83:    "      } catch (e) {\n"
        -:   84:    "      } finally {\n"
        -:   85:    "      }\n"
        -:   86:    "    }\n"
        -:   87:    "  }"
        -:   88:    "}\n"
        -:   89:    "function g() {\n"
        -:   90:    "  for (a in { x:5 })\n"
        -:   91:    "    f();\n"
        -:   92:    "}\n"
        -:   93:    "\n"
        -:   94:    "with({})\n"
        -:   95:    " f();\n"
        -:   96:  );
        -:   97:
    #####:   98:  parsed_code_val = jerry_parse (inf_loop_code_src2,
        -:   99:                                 sizeof (inf_loop_code_src2) - 1,
        -:  100:                                 NULL);
        -:  101:
    #####:  102:  TEST_ASSERT (!jerry_value_is_error (parsed_code_val));
    #####:  103:  res = jerry_run (parsed_code_val);
        -:  104:
    #####:  105:  TEST_ASSERT (jerry_value_is_abort (res));
        -:  106:
    #####:  107:  jerry_release_value (res);
    #####:  108:  jerry_release_value (parsed_code_val);
        -:  109:
        -:  110:  /* Test flag overwrites. */
    #####:  111:  jerry_value_t value = jerry_create_string ((jerry_char_t *) "Error description");
    #####:  112:  TEST_ASSERT (!jerry_value_is_abort (value));
    #####:  113:  TEST_ASSERT (!jerry_value_is_error (value));
        -:  114:
    #####:  115:  value = jerry_create_abort_from_value (value, true);
    #####:  116:  TEST_ASSERT (jerry_value_is_abort (value));
    #####:  117:  TEST_ASSERT (jerry_value_is_error (value));
        -:  118:
    #####:  119:  value = jerry_create_error_from_value (value, true);
    #####:  120:  TEST_ASSERT (!jerry_value_is_abort (value));
    #####:  121:  TEST_ASSERT (jerry_value_is_error (value));
        -:  122:
    #####:  123:  value = jerry_create_abort_from_value (value, true);
    #####:  124:  TEST_ASSERT (jerry_value_is_abort (value));
    #####:  125:  TEST_ASSERT (jerry_value_is_error (value));
        -:  126:
    #####:  127:  jerry_release_value (value);
        -:  128:
    #####:  129:  jerry_cleanup ();
        -:  130:  return 0;
        -:  131:} /* main */
