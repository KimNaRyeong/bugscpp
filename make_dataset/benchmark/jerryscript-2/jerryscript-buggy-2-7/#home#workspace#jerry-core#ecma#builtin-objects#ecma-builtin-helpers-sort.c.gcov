        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-helpers-sort.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtin-helpers.h"
        -:   17:#include "ecma-globals.h"
        -:   18:
        -:   19:/**
        -:   20: * Function used to merge two arrays for merge sort.
        -:   21: * Arrays are stored as below:
        -:   22: * First  -> source_array_p [left_idx : right_idx - 1]
        -:   23: * Second -> source_array_p [right_idx : end_idx - 1]
        -:   24: * Output -> output_array_p
        -:   25: *
        -:   26: * @return ecma value
        -:   27: *         Returned value must be freed with ecma_free_value.
        -:   28: */
        -:   29:static ecma_value_t
        2:   30:ecma_builtin_helper_array_merge_sort_bottom_up (ecma_value_t *source_array_p, /**< arrays to merge */
        -:   31:                                                uint32_t left_idx, /**< first array begin */
        -:   32:                                                uint32_t right_idx, /**< first array end */
        -:   33:                                                uint32_t end_idx, /**< second array end */
        -:   34:                                                ecma_value_t *output_array_p, /**< output array */
        -:   35:                                                ecma_value_t compare_func, /**< compare function */
        -:   36:                                                const ecma_builtin_helper_sort_compare_fn_t sort_cb, /**< sorting cb */
        -:   37:                                                ecma_object_t *array_buffer_p) /* array_buffer_p */
        -:   38:{
        2:   39:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        2:   40:  uint32_t i = left_idx, j = right_idx;
        -:   41:
        2:   42:  for (uint32_t k = left_idx; k < end_idx; k++)
        -:   43:  {
        2:   44:    ecma_value_t compare_value = ecma_make_number_value (ECMA_NUMBER_ZERO);
        -:   45:
        2:   46:    if (i < right_idx && j < end_idx)
        -:   47:    {
        2:   48:      compare_value = sort_cb (source_array_p[i], source_array_p[j], compare_func, array_buffer_p);
        2:   49:      if (ECMA_IS_VALUE_ERROR (compare_value))
        -:   50:      {
        2:   51:        ret_value = ECMA_VALUE_ERROR;
        2:   52:        break;
        -:   53:      }
        -:   54:    }
        -:   55:
    #####:   56:    if (i < right_idx && ecma_get_number_from_value (compare_value) <= ECMA_NUMBER_ZERO)
        -:   57:    {
    #####:   58:      output_array_p[k] = source_array_p[i];
    #####:   59:      i++;
        -:   60:    }
        -:   61:    else
        -:   62:    {
    #####:   63:      output_array_p[k] = source_array_p[j];
    #####:   64:      j++;
        -:   65:    }
    #####:   66:    ecma_free_value (compare_value);
        -:   67:  }
        -:   68:
        2:   69:  return ret_value;
        -:   70:} /* ecma_builtin_helper_array_merge_sort_bottom_up */
        -:   71:
        -:   72:/**
        -:   73: * Mergesort function
        -:   74: *
        -:   75: * @return ecma value
        -:   76: *         Returned value must be freed with ecma_free_value.
        -:   77: */
        -:   78:ecma_value_t
        2:   79:ecma_builtin_helper_array_merge_sort_helper (ecma_value_t *array_p, /**< array to sort */
        -:   80:                                             uint32_t length, /**< length */
        -:   81:                                             ecma_value_t compare_func, /**< compare function */
        -:   82:                                             const ecma_builtin_helper_sort_compare_fn_t sort_cb, /**< sorting cb */
        -:   83:                                             ecma_object_t *array_buffer_p) /**< arrayBuffer */
        -:   84:{
        2:   85:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        2:   86:  JMEM_DEFINE_LOCAL_ARRAY (dest_array_p, length, ecma_value_t);
        -:   87:
        -:   88:  ecma_value_t *temp_p;
        2:   89:  ecma_value_t *base_array_p = array_p;
        -:   90:  uint32_t r, e;
        -:   91:
        2:   92:  for (uint32_t w = 1; w < length; w = 2 * w)
        -:   93:  {
        2:   94:    for (uint32_t i = 0; i < length; i = i + 2 * w)
        -:   95:    {
        -:   96:      // End of first array
        2:   97:      r = i + w;
        2:   98:      if (r > length)
        -:   99:      {
    #####:  100:        r = length;
        -:  101:      }
        -:  102:
        -:  103:      // End of second array
        2:  104:      e = i + 2 * w;
        2:  105:      if (e > length)
        -:  106:      {
    #####:  107:        e = length;
        -:  108:      }
        -:  109:
        -:  110:      // Merge two arrays
        2:  111:      ret_value = ecma_builtin_helper_array_merge_sort_bottom_up (array_p,
        -:  112:                                                                  i,
        -:  113:                                                                  r,
        -:  114:                                                                  e,
        -:  115:                                                                  dest_array_p,
        -:  116:                                                                  compare_func,
        -:  117:                                                                  sort_cb,
        -:  118:                                                                  array_buffer_p);
        2:  119:      if (ECMA_IS_VALUE_ERROR (ret_value))
        -:  120:      {
        2:  121:        break;
        -:  122:      }
        -:  123:    }
        -:  124:
        2:  125:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -:  126:    {
        2:  127:      break;
        -:  128:    }
        -:  129:
        -:  130:    // Swap arrays
    #####:  131:    temp_p = dest_array_p;
    #####:  132:    dest_array_p = array_p;
    #####:  133:    array_p = temp_p;
        -:  134:  }
        -:  135:
        -:  136:  // Sorted array is in dest_array_p - there was uneven number of arrays swaps
        2:  137:  if (dest_array_p == base_array_p)
        -:  138:  {
    #####:  139:    uint32_t index = 0;
    #####:  140:    temp_p = dest_array_p;
    #####:  141:    dest_array_p = array_p;
    #####:  142:    array_p = temp_p;
        -:  143:
    #####:  144:    while (index < length)
        -:  145:    {
    #####:  146:      array_p[index] = dest_array_p[index];
    #####:  147:      index++;
        -:  148:    }
    #####:  149:    JERRY_ASSERT (index == length);
        -:  150:  }
        -:  151:
        2:  152:  JMEM_FINALIZE_LOCAL_ARRAY (dest_array_p);
        -:  153:
        2:  154:  return ret_value;
        -:  155:} /* ecma_builtin_helper_array_merge_sort_helper */
