        -:    0:Source:/home/workspace/tests/unit-core/test-promise.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static const jerry_char_t test_source[] = TEST_STRING_LITERAL (
        -:   22:  "var p1 = create_promise1();"
        -:   23:  "var p2 = create_promise2();"
        -:   24:  "p1.then(function(x) { "
        -:   25:  "  assert(x==='resolved'); "
        -:   26:  "}); "
        -:   27:  "p2.catch(function(x) { "
        -:   28:  "  assert(x==='rejected'); "
        -:   29:  "}); "
        -:   30:);
        -:   31:
        -:   32:static int count_in_assert = 0;
        -:   33:static jerry_value_t my_promise1;
        -:   34:static jerry_value_t my_promise2;
        -:   35:static const jerry_char_t s1[] = "resolved";
        -:   36:static const jerry_char_t s2[] = "rejected";
        -:   37:
        -:   38:static jerry_value_t
    #####:   39:create_promise1_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   40:                         const jerry_value_t args_p[], /**< arguments list */
        -:   41:                         const jerry_length_t args_cnt) /**< arguments length */
        -:   42:{
        -:   43:  JERRY_UNUSED (call_info_p);
        -:   44:  JERRY_UNUSED (args_p);
        -:   45:  JERRY_UNUSED (args_cnt);
        -:   46:
    #####:   47:  jerry_value_t ret =  jerry_create_promise ();
    #####:   48:  my_promise1 = jerry_acquire_value (ret);
        -:   49:
    #####:   50:  return ret;
        -:   51:} /* create_promise1_handler */
        -:   52:
        -:   53:static jerry_value_t
    #####:   54:create_promise2_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   55:                         const jerry_value_t args_p[], /**< arguments list */
        -:   56:                         const jerry_length_t args_cnt) /**< arguments length */
        -:   57:{
        -:   58:  JERRY_UNUSED (call_info_p);
        -:   59:  JERRY_UNUSED (args_p);
        -:   60:  JERRY_UNUSED (args_cnt);
        -:   61:
    #####:   62:  jerry_value_t ret =  jerry_create_promise ();
    #####:   63:  my_promise2 = jerry_acquire_value (ret);
        -:   64:
    #####:   65:  return ret;
        -:   66:} /* create_promise2_handler */
        -:   67:
        -:   68:static jerry_value_t
    #####:   69:assert_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   70:                const jerry_value_t args_p[], /**< function arguments */
        -:   71:                const jerry_length_t args_cnt) /**< number of function arguments */
        -:   72:{
        -:   73:  JERRY_UNUSED (call_info_p);
        -:   74:
    #####:   75:  count_in_assert++;
        -:   76:
    #####:   77:  if (args_cnt == 1
    #####:   78:      && jerry_value_is_true (args_p[0]))
        -:   79:  {
    #####:   80:    return jerry_create_boolean (true);
        -:   81:  }
        -:   82:  else
        -:   83:  {
    #####:   84:    TEST_ASSERT (false);
        -:   85:  }
        -:   86:} /* assert_handler */
        -:   87:
        -:   88:/**
        -:   89: * Register a JavaScript function in the global object.
        -:   90: */
        -:   91:static void
    #####:   92:register_js_function (const char *name_p, /**< name of the function */
        -:   93:                      jerry_external_handler_t handler_p) /**< function callback */
        -:   94:{
    #####:   95:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -:   96:
    #####:   97:  jerry_value_t function_val = jerry_create_external_function (handler_p);
    #####:   98:  jerry_value_t function_name_val = jerry_create_string ((const jerry_char_t *) name_p);
    #####:   99:  jerry_value_t result_val = jerry_set_property (global_obj_val, function_name_val, function_val);
        -:  100:
    #####:  101:  jerry_release_value (function_name_val);
    #####:  102:  jerry_release_value (function_val);
    #####:  103:  jerry_release_value (global_obj_val);
        -:  104:
    #####:  105:  jerry_release_value (result_val);
    #####:  106:} /* register_js_function */
        -:  107:
        -:  108:int
    #####:  109:main (void)
        -:  110:{
    #####:  111:  jerry_init (JERRY_INIT_EMPTY);
        -:  112:
    #####:  113:  if (!jerry_is_feature_enabled (JERRY_FEATURE_PROMISE))
        -:  114:  {
    #####:  115:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Promise is disabled!\n");
    #####:  116:    jerry_cleanup ();
    #####:  117:    return 0;
        -:  118:  }
        -:  119:
    #####:  120:  register_js_function ("create_promise1", create_promise1_handler);
    #####:  121:  register_js_function ("create_promise2", create_promise2_handler);
    #####:  122:  register_js_function ("assert", assert_handler);
        -:  123:
    #####:  124:  jerry_value_t parsed_code_val = jerry_parse (test_source,
        -:  125:                                               sizeof (test_source) - 1,
        -:  126:                                               NULL);
    #####:  127:  TEST_ASSERT (!jerry_value_is_error (parsed_code_val));
        -:  128:
    #####:  129:  jerry_value_t res = jerry_run (parsed_code_val);
    #####:  130:  TEST_ASSERT (!jerry_value_is_error (res));
        -:  131:
    #####:  132:  jerry_release_value (res);
    #####:  133:  jerry_release_value (parsed_code_val);
        -:  134:
        -:  135:  /* Test jerry_create_promise and jerry_value_is_promise. */
    #####:  136:  TEST_ASSERT (jerry_value_is_promise (my_promise1));
    #####:  137:  TEST_ASSERT (jerry_value_is_promise (my_promise2));
        -:  138:
    #####:  139:  TEST_ASSERT (count_in_assert == 0);
        -:  140:
        -:  141:  /* Test jerry_resolve_or_reject_promise. */
    #####:  142:  jerry_value_t str_resolve = jerry_create_string (s1);
    #####:  143:  jerry_value_t str_reject = jerry_create_string (s2);
        -:  144:
    #####:  145:  jerry_resolve_or_reject_promise (my_promise1, str_resolve, true);
    #####:  146:  jerry_resolve_or_reject_promise (my_promise2, str_reject, false);
        -:  147:
        -:  148:  /* The resolve/reject function should be invalid after the promise has the result. */
    #####:  149:  jerry_resolve_or_reject_promise (my_promise2, str_resolve, true);
    #####:  150:  jerry_resolve_or_reject_promise (my_promise1, str_reject, false);
        -:  151:
        -:  152:  /* Run the jobqueue. */
    #####:  153:  res = jerry_run_all_enqueued_jobs ();
        -:  154:
    #####:  155:  TEST_ASSERT (!jerry_value_is_error (res));
    #####:  156:  TEST_ASSERT (count_in_assert == 2);
        -:  157:
    #####:  158:  jerry_release_value (my_promise1);
    #####:  159:  jerry_release_value (my_promise2);
    #####:  160:  jerry_release_value (str_resolve);
    #####:  161:  jerry_release_value (str_reject);
        -:  162:
    #####:  163:  jerry_cleanup ();
        -:  164:
    #####:  165:  return 0;
        -:  166:} /* main */
