        -:    0:Source:/home/workspace/tests/unit-core/test-symbol.c
        -:    0:Programs:296
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:/* foo string */
        -:   22:#define STRING_FOO ((const jerry_char_t *) "foo")
        -:   23:
        -:   24:/* bar string */
        -:   25:#define STRING_BAR ((const jerry_char_t *) "bar")
        -:   26:
        -:   27:/* Symbol(bar) desciptive string */
        -:   28:#define SYMBOL_DESCIPTIVE_STRING_BAR "Symbol(bar)"
        -:   29:
        -:   30:/* bar string desciption */
        -:   31:#define SYMBOL_DESCIPTION_BAR "bar"
        -:   32:
        -:   33:int
    #####:   34:main (void)
    #####:   35:{
    #####:   36:  if (!jerry_is_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:   37:  {
    #####:   38:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Symbol support is disabled!\n");
    #####:   39:    return 0;
        -:   40:  }
        -:   41:
    #####:   42:  jerry_init (JERRY_INIT_EMPTY);
        -:   43:
    #####:   44:  jerry_value_t object = jerry_create_object ();
        -:   45:
        -:   46:  /* Test for that each symbol is unique independently from their descriptor strings */
    #####:   47:  jerry_value_t symbol_desc_1 = jerry_create_string (STRING_FOO);
    #####:   48:  jerry_value_t symbol_desc_2 = jerry_create_string (STRING_FOO);
        -:   49:
    #####:   50:  jerry_value_t symbol_1 = jerry_create_symbol (symbol_desc_1);
    #####:   51:  TEST_ASSERT (!jerry_value_is_error (symbol_1));
    #####:   52:  TEST_ASSERT (jerry_value_is_symbol (symbol_1));
        -:   53:
    #####:   54:  jerry_value_t symbol_2 = jerry_create_symbol (symbol_desc_2);
    #####:   55:  TEST_ASSERT (!jerry_value_is_error (symbol_2));
    #####:   56:  TEST_ASSERT (jerry_value_is_symbol (symbol_2));
        -:   57:
        -:   58:  /* The descriptor strings are no longer needed */
    #####:   59:  jerry_release_value (symbol_desc_1);
    #####:   60:  jerry_release_value (symbol_desc_2);
        -:   61:
    #####:   62:  jerry_value_t value_1 = jerry_create_number (1);
    #####:   63:  jerry_value_t value_2 = jerry_create_number (2);
        -:   64:
    #####:   65:  jerry_value_t result_val = jerry_set_property (object, symbol_1, value_1);
    #####:   66:  TEST_ASSERT (jerry_value_is_boolean (result_val));
    #####:   67:  TEST_ASSERT (jerry_value_is_true (jerry_has_property (object, symbol_1)));
    #####:   68:  TEST_ASSERT (jerry_value_is_true (jerry_has_own_property (object, symbol_1)));
        -:   69:
    #####:   70:  result_val = jerry_set_property (object, symbol_2, value_2);
    #####:   71:  TEST_ASSERT (jerry_value_is_boolean (result_val));
    #####:   72:  TEST_ASSERT (jerry_value_is_true (jerry_has_property (object, symbol_2)));
    #####:   73:  TEST_ASSERT (jerry_value_is_true (jerry_has_own_property (object, symbol_2)));
        -:   74:
    #####:   75:  jerry_value_t get_value_1 = jerry_get_property (object, symbol_1);
    #####:   76:  TEST_ASSERT (jerry_get_number_value (get_value_1) == jerry_get_number_value (value_1));
    #####:   77:  jerry_release_value (get_value_1);
        -:   78:
    #####:   79:  jerry_value_t get_value_2 = jerry_get_property (object, symbol_2);
    #####:   80:  TEST_ASSERT (jerry_get_number_value (get_value_2) == jerry_get_number_value (value_2));
    #####:   81:  jerry_release_value (get_value_2);
        -:   82:
        -:   83:  /* Test delete / has_{own}_property */
    #####:   84:  TEST_ASSERT (jerry_delete_property (object, symbol_1));
    #####:   85:  TEST_ASSERT (!jerry_value_is_true (jerry_has_property (object, symbol_1)));
    #####:   86:  TEST_ASSERT (!jerry_value_is_true (jerry_has_own_property (object, symbol_1)));
        -:   87:
    #####:   88:  jerry_release_value (value_1);
    #####:   89:  jerry_release_value (symbol_1);
        -:   90:
        -:   91:  /* Test {get, define}_own_property_descriptor */
        -:   92:  jerry_property_descriptor_t prop_desc;
    #####:   93:  TEST_ASSERT (jerry_get_own_property_descriptor (object, symbol_2, &prop_desc));
    #####:   94:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_VALUE_DEFINED);
    #####:   95:  TEST_ASSERT (value_2 == prop_desc.value);
    #####:   96:  TEST_ASSERT (jerry_get_number_value (value_2) == jerry_get_number_value (prop_desc.value));
    #####:   97:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_WRITABLE);
    #####:   98:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE);
    #####:   99:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE);
    #####:  100:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_GET_DEFINED));
    #####:  101:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.getter));
    #####:  102:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_SET_DEFINED));
    #####:  103:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.setter));
    #####:  104:  jerry_property_descriptor_free (&prop_desc);
        -:  105:
        -:  106:  /* Modify the descriptor fields */
    #####:  107:  prop_desc = jerry_property_descriptor_create ();
    #####:  108:  jerry_value_t value_3 = jerry_create_string (STRING_BAR);
        -:  109:
    #####:  110:  prop_desc.flags |= JERRY_PROP_IS_VALUE_DEFINED
        -:  111:  | JERRY_PROP_IS_WRITABLE_DEFINED
        -:  112:  | JERRY_PROP_IS_ENUMERABLE_DEFINED
        -:  113:  | JERRY_PROP_IS_CONFIGURABLE_DEFINED;
    #####:  114:  prop_desc.value = jerry_acquire_value (value_3);
    #####:  115:  TEST_ASSERT (jerry_value_is_true (jerry_define_own_property (object, symbol_2, &prop_desc)));
    #####:  116:  jerry_property_descriptor_free (&prop_desc);
        -:  117:
        -:  118:  /* Check the modified fields */
    #####:  119:  TEST_ASSERT (jerry_get_own_property_descriptor (object, symbol_2, &prop_desc));
    #####:  120:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_VALUE_DEFINED);
    #####:  121:  TEST_ASSERT (value_3 == prop_desc.value);
    #####:  122:  TEST_ASSERT (jerry_value_is_string (prop_desc.value));
    #####:  123:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_WRITABLE_DEFINED);
    #####:  124:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_WRITABLE));
    #####:  125:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE_DEFINED);
    #####:  126:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_ENUMERABLE));
    #####:  127:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED);
    #####:  128:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE));
    #####:  129:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_GET_DEFINED));
    #####:  130:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.getter));
    #####:  131:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_SET_DEFINED));
    #####:  132:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.setter));
    #####:  133:  jerry_property_descriptor_free (&prop_desc);
        -:  134:
    #####:  135:  jerry_release_value (value_3);
    #####:  136:  jerry_release_value (value_2);
    #####:  137:  jerry_release_value (symbol_2);
    #####:  138:  jerry_release_value (object);
        -:  139:
        -:  140:  /* Test creating symbol with a symbol description */
    #####:  141:  jerry_value_t empty_symbol_desc = jerry_create_string ((const jerry_char_t *) "");
        -:  142:
    #####:  143:  jerry_value_t empty_symbol = jerry_create_symbol (empty_symbol_desc);
    #####:  144:  TEST_ASSERT (!jerry_value_is_error (empty_symbol));
    #####:  145:  TEST_ASSERT (jerry_value_is_symbol (empty_symbol));
        -:  146:
    #####:  147:  jerry_release_value (empty_symbol_desc);
        -:  148:
    #####:  149:  jerry_value_t symbol_symbol = jerry_create_symbol (empty_symbol);
    #####:  150:  TEST_ASSERT (!jerry_value_is_symbol (symbol_symbol));
    #####:  151:  TEST_ASSERT (jerry_value_is_error (symbol_symbol));
        -:  152:
    #####:  153:  jerry_value_t error_obj = jerry_get_value_from_error (symbol_symbol, true);
        -:  154:
    #####:  155:  TEST_ASSERT (jerry_get_error_type (error_obj) == JERRY_ERROR_TYPE);
        -:  156:
    #####:  157:  jerry_release_value (error_obj);
    #####:  158:  jerry_release_value (empty_symbol);
        -:  159:
        -:  160:  /* Test symbol to string operation with symbol argument */
    #####:  161:  jerry_value_t bar_symbol_desc = jerry_create_string (STRING_BAR);
        -:  162:
    #####:  163:  jerry_value_t bar_symbol = jerry_create_symbol (bar_symbol_desc);
    #####:  164:  TEST_ASSERT (!jerry_value_is_error (bar_symbol));
    #####:  165:  TEST_ASSERT (jerry_value_is_symbol (bar_symbol));
        -:  166:
    #####:  167:  jerry_release_value (bar_symbol_desc);
        -:  168:
    #####:  169:  jerry_value_t bar_symbol_string = jerry_get_symbol_descriptive_string (bar_symbol);
    #####:  170:  TEST_ASSERT (jerry_value_is_string (bar_symbol_string));
        -:  171:
    #####:  172:  jerry_size_t bar_symbol_string_size = jerry_get_string_size (bar_symbol_string);
    #####:  173:  TEST_ASSERT (bar_symbol_string_size == (sizeof (SYMBOL_DESCIPTIVE_STRING_BAR) - 1));
    #####:  174:  JERRY_VLA (jerry_char_t, str_buff, bar_symbol_string_size);
        -:  175:
    #####:  176:  jerry_string_to_char_buffer (bar_symbol_string, str_buff, bar_symbol_string_size);
    #####:  177:  TEST_ASSERT (memcmp (str_buff, SYMBOL_DESCIPTIVE_STRING_BAR, sizeof (SYMBOL_DESCIPTIVE_STRING_BAR) - 1) == 0);
        -:  178:
    #####:  179:  jerry_release_value (bar_symbol_string);
        -:  180:
        -:  181:  /* Test symbol get description operation with string description */
    #####:  182:  bar_symbol_string = jerry_get_symbol_description (bar_symbol);
    #####:  183:  TEST_ASSERT (jerry_value_is_string (bar_symbol_string));
        -:  184:
    #####:  185:  bar_symbol_string_size = jerry_get_string_size (bar_symbol_string);
    #####:  186:  TEST_ASSERT (bar_symbol_string_size == (sizeof (SYMBOL_DESCIPTION_BAR) - 1));
        -:  187:
    #####:  188:  jerry_string_to_char_buffer (bar_symbol_string, str_buff, bar_symbol_string_size);
    #####:  189:  TEST_ASSERT (memcmp (str_buff, STRING_BAR, sizeof (SYMBOL_DESCIPTION_BAR) - 1) == 0);
        -:  190:
    #####:  191:  jerry_release_value (bar_symbol_string);
    #####:  192:  jerry_release_value (bar_symbol);
        -:  193:
        -:  194:  /* Test symbol get description operation with undefined description */
    #####:  195:  jerry_value_t undefined_value = jerry_create_undefined ();
    #####:  196:  jerry_value_t undefined_symbol = jerry_create_symbol (undefined_value);
    #####:  197:  jerry_release_value (undefined_value);
    #####:  198:  TEST_ASSERT (!jerry_value_is_error (bar_symbol));
    #####:  199:  TEST_ASSERT (jerry_value_is_symbol (bar_symbol));
        -:  200:
    #####:  201:  undefined_value = jerry_get_symbol_description (undefined_symbol);
    #####:  202:  TEST_ASSERT (jerry_value_is_undefined (undefined_value));
    #####:  203:  jerry_release_value (undefined_value);
    #####:  204:  jerry_release_value (undefined_symbol);
        -:  205:
        -:  206:  /* Test symbol to string operation with non-symbol argument */
    #####:  207:  jerry_value_t null_value = jerry_create_null ();
    #####:  208:  jerry_value_t to_string_value = jerry_get_symbol_descriptive_string (null_value);
    #####:  209:  TEST_ASSERT (jerry_value_is_error (to_string_value));
        -:  210:
    #####:  211:  error_obj = jerry_get_value_from_error (to_string_value, true);
        -:  212:
    #####:  213:  TEST_ASSERT (jerry_get_error_type (error_obj) == JERRY_ERROR_TYPE);
        -:  214:
    #####:  215:  jerry_release_value (error_obj);
    #####:  216:  jerry_release_value (null_value);
        -:  217:
    #####:  218:  const jerry_char_t obj_src[] = ""
        -:  219:  "({"
        -:  220:  "  [Symbol.asyncIterator]: 1,"
        -:  221:  "  [Symbol.hasInstance]: 2,"
        -:  222:  "  [Symbol.isConcatSpreadable]: 3,"
        -:  223:  "  [Symbol.iterator]: 4,"
        -:  224:  "  [Symbol.match]: 5,"
        -:  225:  "  [Symbol.replace]: 6,"
        -:  226:  "  [Symbol.search]: 7,"
        -:  227:  "  [Symbol.species]: 8,"
        -:  228:  "  [Symbol.split]: 9,"
        -:  229:  "  [Symbol.toPrimitive]: 10,"
        -:  230:  "  [Symbol.toStringTag]: 11,"
        -:  231:  "  [Symbol.unscopables]: 12,"
        -:  232:  "  [Symbol.matchAll]: 13,"
        -:  233:  "})";
        -:  234:
    #####:  235:  const char *symbols[] =
        -:  236:  {
        -:  237:    "asyncIterator",
        -:  238:    "hasInstance",
        -:  239:    "isConcatSpreadable",
        -:  240:    "iterator",
        -:  241:    "match",
        -:  242:    "replace",
        -:  243:    "search",
        -:  244:    "species",
        -:  245:    "split",
        -:  246:    "toPrimitive",
        -:  247:    "toStringTag",
        -:  248:    "unscopables",
        -:  249:    "matchAll",
        -:  250:  };
        -:  251:
    #####:  252:  jerry_value_t obj = jerry_eval (obj_src, sizeof (obj_src) - 1, JERRY_PARSE_NO_OPTS);
    #####:  253:  TEST_ASSERT (jerry_value_is_object (obj));
        -:  254:
    #####:  255:  jerry_value_t global_obj = jerry_get_global_object ();
    #####:  256:  jerry_value_t symbol_str = jerry_create_string ((const jerry_char_t *) "Symbol");
    #####:  257:  jerry_value_t builtin_symbol = jerry_get_property (global_obj, symbol_str);
    #####:  258:  TEST_ASSERT (jerry_value_is_object (builtin_symbol));
        -:  259:
        -:  260:  double expected = 1.0;
        -:  261:  uint32_t prop_index = 0;
        -:  262:
    #####:  263:  for (jerry_well_known_symbol_t id = JERRY_SYMBOL_ASYNC_ITERATOR;
        -:  264:       id <= JERRY_SYMBOL_MATCH_ALL;
    #####:  265:       id++, expected++, prop_index++)
        -:  266:  {
    #####:  267:    jerry_value_t well_known_symbol = jerry_get_well_known_symbol (id);
        -:  268:
    #####:  269:    jerry_value_t prop_str = jerry_create_string ((const jerry_char_t *) symbols[prop_index]);
    #####:  270:    jerry_value_t current_global_symbol = jerry_get_property (builtin_symbol, prop_str);
    #####:  271:    jerry_release_value (prop_str);
        -:  272:
    #####:  273:    jerry_value_t relation = jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL,
        -:  274:                                                     well_known_symbol,
        -:  275:                                                     current_global_symbol);
        -:  276:
    #####:  277:    TEST_ASSERT (jerry_value_is_boolean (relation)
        -:  278:                 && jerry_value_is_true (relation));
        -:  279:
    #####:  280:    jerry_release_value (relation);
        -:  281:
    #####:  282:    jerry_value_t prop_result_wn = jerry_get_property (obj, well_known_symbol);
    #####:  283:    jerry_value_t prop_result_global = jerry_get_property (obj, current_global_symbol);
        -:  284:
    #####:  285:    TEST_ASSERT (jerry_value_is_number (prop_result_wn));
    #####:  286:    double number_wn = jerry_get_number_value (prop_result_wn);
    #####:  287:    TEST_ASSERT (number_wn == expected);
        -:  288:
    #####:  289:    TEST_ASSERT (jerry_value_is_number (prop_result_global));
    #####:  290:    double number_global = jerry_get_number_value (prop_result_global);
    #####:  291:    TEST_ASSERT (number_global == expected);
        -:  292:
    #####:  293:    jerry_release_value (prop_result_global);
    #####:  294:    jerry_release_value (prop_result_wn);
    #####:  295:    jerry_release_value (current_global_symbol);
    #####:  296:    jerry_release_value (well_known_symbol);
        -:  297:  }
        -:  298:
    #####:  299:  jerry_release_value (builtin_symbol);
        -:  300:
        -:  301:  /* Deletion of the 'Symbol' builtin makes the well-known symbols unaccessible from JS context
        -:  302:     but the symbols still can be obtained via 'jerry_get_well_known_symbol' */
    #####:  303:  const jerry_char_t deleter_src[] = "delete Symbol";
        -:  304:
    #####:  305:  jerry_value_t deleter = jerry_eval (deleter_src, sizeof (deleter_src) - 1, JERRY_PARSE_NO_OPTS);
    #####:  306:  TEST_ASSERT (jerry_value_is_boolean (deleter)
        -:  307:               && jerry_value_is_true (deleter));
    #####:  308:  jerry_release_value (deleter);
        -:  309:
    #####:  310:  builtin_symbol = jerry_get_property (global_obj, symbol_str);
    #####:  311:  TEST_ASSERT (jerry_value_is_undefined (builtin_symbol));
    #####:  312:  jerry_release_value (builtin_symbol);
        -:  313:
    #####:  314:  expected = 1.0;
    #####:  315:  prop_index = 0;
        -:  316:
    #####:  317:  for (jerry_well_known_symbol_t id = JERRY_SYMBOL_ASYNC_ITERATOR;
        -:  318:       id <= JERRY_SYMBOL_MATCH_ALL;
    #####:  319:       id++, expected++, prop_index++)
        -:  320:  {
    #####:  321:    jerry_value_t well_known_symbol = jerry_get_well_known_symbol (id);
    #####:  322:    jerry_value_t prop_result_wn = jerry_get_property (obj, well_known_symbol);
        -:  323:
    #####:  324:    TEST_ASSERT (jerry_value_is_number (prop_result_wn));
    #####:  325:    double number_wn = jerry_get_number_value (prop_result_wn);
    #####:  326:    TEST_ASSERT (number_wn == expected);
        -:  327:
    #####:  328:    jerry_release_value (prop_result_wn);
    #####:  329:    jerry_release_value (well_known_symbol);
        -:  330:  }
        -:  331:
    #####:  332:  jerry_well_known_symbol_t invalid_symbol = (jerry_well_known_symbol_t) (JERRY_SYMBOL_MATCH_ALL + 1);
    #####:  333:  jerry_value_t invalid_well_known_symbol = jerry_get_well_known_symbol (invalid_symbol);
    #####:  334:  TEST_ASSERT (jerry_value_is_undefined (invalid_well_known_symbol));
    #####:  335:  jerry_release_value (invalid_well_known_symbol);
        -:  336:
    #####:  337:  invalid_symbol = (jerry_well_known_symbol_t) (JERRY_SYMBOL_ASYNC_ITERATOR - 1);
    #####:  338:  invalid_well_known_symbol = jerry_get_well_known_symbol (invalid_symbol);
    #####:  339:  TEST_ASSERT (jerry_value_is_undefined (invalid_well_known_symbol));
    #####:  340:  jerry_release_value (invalid_well_known_symbol);
        -:  341:
    #####:  342:  jerry_release_value (symbol_str);
    #####:  343:  jerry_release_value (global_obj);
    #####:  344:  jerry_release_value (obj);
        -:  345:
    #####:  346:  jerry_cleanup ();
        -:  347:
    #####:  348:  return 0;
        -:  349:} /* main */
