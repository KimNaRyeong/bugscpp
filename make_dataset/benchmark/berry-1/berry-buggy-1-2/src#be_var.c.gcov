        -:    0:Source:src/be_var.c
        -:    0:Graph:./src/be_var.gcno
        -:    0:Data:./src/be_var.gcda
        -:    0:Runs:1
        -:    1:/********************************************************************
        -:    2:** Copyright (c) 2018-2020 Guan Wenliang
        -:    3:** This file is part of the Berry default interpreter.
        -:    4:** skiars@qq.com, https://github.com/Skiars/berry
        -:    5:** See Copyright Notice in the LICENSE file or at
        -:    6:** https://github.com/Skiars/berry/blob/master/LICENSE
        -:    7:********************************************************************/
        -:    8:#include "be_var.h"
        -:    9:#include "be_vm.h"
        -:   10:#include "be_vector.h"
        -:   11:#include "be_string.h"
        -:   12:#include "be_map.h"
        -:   13:#include "be_gc.h"
        -:   14:
        -:   15:#define global(vm)      ((vm)->gbldesc.global)
        -:   16:#define builtin(vm)     ((vm)->gbldesc.builtin)
        -:   17:
        1:   18:void be_globalvar_init(bvm *vm)
        -:   19:{
        1:   20:    global(vm).vtab = be_map_new(vm);
        1:   21:    be_gc_fix(vm, gc_object(global(vm).vtab));
        1:   22:    be_vector_init(vm, &global(vm).vlist, sizeof(bvalue));
        -:   23:#if !BE_USE_PRECOMPILED_OBJECT
        -:   24:    builtin(vm).vtab = be_map_new(vm);
        -:   25:    be_vector_init(vm, &builtin(vm).vlist, sizeof(bvalue));
        -:   26:    be_gc_fix(vm, gc_object(builtin(vm).vtab));
        -:   27:#endif
        1:   28:}
        -:   29:
        1:   30:void be_globalvar_deinit(bvm *vm)
        -:   31:{
        1:   32:    global(vm).vtab = NULL;
        1:   33:    be_vector_delete(vm, &global(vm).vlist);
        -:   34:#if !BE_USE_PRECOMPILED_OBJECT
        -:   35:    builtin(vm).vtab = NULL;
        -:   36:    be_vector_delete(vm, &builtin(vm).vlist);
        -:   37:#endif
        1:   38:}
        -:   39:
       27:   40:static int global_find(bvm *vm, bstring *name)
        -:   41:{
       27:   42:    bvalue *res = be_map_findstr(vm, global(vm).vtab, name);
       27:   43:    if (res) {
        8:   44:        return var_toidx(res) + be_builtin_count(vm);
        -:   45:    }
       19:   46:    return -1; /* not found */
        -:   47:}
        -:   48:
       25:   49:int be_global_find(bvm *vm, bstring *name)
        -:   50:{
       25:   51:    int res = global_find(vm, name);
       25:   52:    return res != -1 ? res : be_builtin_find(vm, name);
        -:   53:}
        -:   54:
        2:   55:static int global_new_anonymous(bvm *vm)
        -:   56:{
        2:   57:    int idx = be_global_count(vm);
        -:   58:    /* allocate space for new variables */
        2:   59:    be_vector_resize(vm, &global(vm).vlist, idx + 1);
        -:   60:    /* set the new variable to nil */
        2:   61:    var_setnil((bvalue *)global(vm).vlist.end);
        2:   62:    return idx;
        -:   63:}
        -:   64:
        2:   65:int be_global_new(bvm *vm, bstring *name)
        -:   66:{
        2:   67:    int idx = global_find(vm, name);
        2:   68:    if (idx == -1) {
        -:   69:        bvalue *desc;
        2:   70:        idx = global_new_anonymous(vm);
        2:   71:        desc = be_map_insertstr(vm, global(vm).vtab, name, NULL);
        2:   72:        var_setint(desc, idx);
        2:   73:        idx += be_builtin_count(vm);
        -:   74:    }
        2:   75:    return idx;
        -:   76:}
        -:   77:
       14:   78:bvalue* be_global_var(bvm *vm, int index)
        -:   79:{
       14:   80:    int bcnt = be_builtin_count(vm);
       14:   81:    if (index < bcnt) {
        8:   82:        return be_vector_at(&builtin(vm).vlist, index);
        -:   83:    }
        6:   84:    index -= bcnt;
        6:   85:    return be_vector_at(&global(vm).vlist, index);
        -:   86:}
        -:   87:
        1:   88:void be_global_release_space(bvm *vm)
        -:   89:{
        1:   90:    be_map_release(vm, global(vm).vtab);
        1:   91:    be_vector_release(vm, &global(vm).vlist);
        1:   92:}
        -:   93:
       18:   94:int be_builtin_find(bvm *vm, bstring *name)
        -:   95:{
       18:   96:    bvalue *res = be_map_findstr(vm, builtin(vm).vtab, name);
       18:   97:    if (res) {
       17:   98:        return var_toidx(res);
        -:   99:    }
        1:  100:    return -1; /* not found */
        -:  101:}
        -:  102:
    #####:  103:bstring* be_builtin_name(bvm *vm, int index)
        -:  104:{
    #####:  105:    bmap *map = builtin(vm).vtab;
    #####:  106:    bmapnode *end, *node = map->slots;
    #####:  107:    for (end = node + map->size; node < end; ++node) {
    #####:  108:        if (var_isstr(&node->key) && node->value.v.i == index) {
    #####:  109:            return node->key.v.s;
        -:  110:        }
        -:  111:    }
    #####:  112:    return NULL;
        -:  113:}
        -:  114:
        -:  115:#if !BE_USE_PRECOMPILED_OBJECT
        -:  116:int be_builtin_new(bvm *vm, bstring *name)
        -:  117:{
        -:  118:    int idx = be_builtin_find(vm, name);
        -:  119:    if (idx == -1) {
        -:  120:        bvalue *desc;
        -:  121:        idx = be_map_count(builtin(vm).vtab);
        -:  122:        desc = be_map_insertstr(vm, builtin(vm).vtab, name, NULL);
        -:  123:        var_setint(desc, idx);
        -:  124:        be_vector_resize(vm, &builtin(vm).vlist, idx + 1);
        -:  125:        /* set the new variable to nil */
        -:  126:        var_setnil((bvalue*)(builtin(vm).vlist.end));
        -:  127:    }
        -:  128:    return idx;
        -:  129:}
        -:  130:
        -:  131:void be_bulitin_release_space(bvm *vm)
        -:  132:{
        -:  133:    be_map_release(vm, builtin(vm).vtab);
        -:  134:    be_vector_release(vm, &builtin(vm).vlist);
        -:  135:}
        -:  136:#else
        1:  137:void be_const_builtin_set(bvm *vm, const bmap *map, const bvector *vec)
        -:  138:{
        1:  139:    builtin(vm).vtab = cast(bmap*, map);
        1:  140:    builtin(vm).vlist = *vec;
        1:  141:}
        -:  142:#endif
