        -:    0:Source:src/be_repl.c
        -:    0:Graph:./src/be_repl.gcno
        -:    0:Data:./src/be_repl.gcda
        -:    0:Runs:1
        -:    1:/********************************************************************
        -:    2:** Copyright (c) 2018-2020 Guan Wenliang
        -:    3:** This file is part of the Berry default interpreter.
        -:    4:** skiars@qq.com, https://github.com/Skiars/berry
        -:    5:** See Copyright Notice in the LICENSE file or at
        -:    6:** https://github.com/Skiars/berry/blob/master/LICENSE
        -:    7:********************************************************************/
        -:    8:#include "berry.h"
        -:    9:#include "be_repl.h"
        -:   10:#include <string.h>
        -:   11:
        -:   12:#define safecall(func, ...) if (func) { func(__VA_ARGS__); }
        -:   13:
        -:   14:#if BE_USE_SCRIPT_COMPILER
        -:   15:
    #####:   16:static int try_return(bvm *vm, const char *line)
        -:   17:{
        -:   18:    int res, idx;
    #####:   19:    line = be_pushfstring(vm, "return (%s)", line);
    #####:   20:    idx = be_absindex(vm, -1); /* get the source text absolute index */
    #####:   21:    res = be_loadbuffer(vm, "stdin", line, strlen(line)); /* compile line */
    #####:   22:    be_remove(vm, idx); /* remove source string */
    #####:   23:    return res;
        -:   24:}
        -:   25:
    #####:   26:static bbool is_multline(bvm *vm)
        -:   27:{
    #####:   28:    const char *msg = be_tostring(vm, -1);
    #####:   29:    size_t len = strlen(msg);
    #####:   30:    if (len > 5) { /* multi-line text if the error message is 'EOS' at the end */
    #####:   31:        return !strcmp(msg + len - 5, "'EOS'");
        -:   32:    }
    #####:   33:    return bfalse;
        -:   34:}
        -:   35:
    #####:   36:static int compile(bvm *vm, char *line, breadline getl, bfreeline freel)
        -:   37:{
    #####:   38:    int res = try_return(vm, line);
    #####:   39:    if (be_getexcept(vm, res) == BE_SYNTAX_ERROR) {
    #####:   40:        be_pop(vm, 2); /* pop exception values */
    #####:   41:        be_pushstring(vm, line);
    #####:   42:        safecall(freel, line); /* free line buffer */
    #####:   43:        for (;;) {
    #####:   44:            const char *src = be_tostring(vm, -1); /* get source code */
    #####:   45:            int idx = be_absindex(vm, -1); /* get the source text absolute index */
        -:   46:            /* compile source line */
    #####:   47:            res = be_loadbuffer(vm, "stdin", src, strlen(src));
    #####:   48:            if (!res || !is_multline(vm)) {
    #####:   49:                be_remove(vm, idx); /* remove source code */
    #####:   50:                return res;
        -:   51:            }
    #####:   52:            be_pop(vm, 2); /* pop exception values */
    #####:   53:            line = getl(">> "); /* read a new input line */
    #####:   54:            be_pushfstring(vm, "\n%s", line);
    #####:   55:            safecall(freel, line); /* free line buffer */
    #####:   56:            be_strconcat(vm, -2);
    #####:   57:            be_pop(vm, 1); /* pop new line */
        -:   58:        }
        -:   59:    } else {
    #####:   60:        safecall(freel, line); /* free line buffer */
        -:   61:    }
    #####:   62:    return res;
        -:   63:}
        -:   64:
    #####:   65:static int call_script(bvm *vm)
        -:   66:{
    #####:   67:    int res = be_pcall(vm, 0); /* call the main function */
    #####:   68:    switch (res) { 
    #####:   69:    case BE_OK: /* execution succeed */
    #####:   70:        if (!be_isnil(vm, -1)) { /* print return value when it's not nil */
    #####:   71:            be_dumpvalue(vm, -1);
        -:   72:        }
    #####:   73:        be_pop(vm, 1); /* pop the result value */
    #####:   74:        break;
    #####:   75:    case BE_EXCEPTION: /* vm run error */
    #####:   76:        be_dumpexcept(vm);
    #####:   77:        be_pop(vm, 1); /* pop the function value */
    #####:   78:        break;
    #####:   79:    default: /* BE_EXIT or BE_MALLOC_FAIL */
    #####:   80:        return res;
        -:   81:    }
    #####:   82:    return 0;
        -:   83:}
        -:   84:
    #####:   85:BERRY_API int be_repl(bvm *vm, breadline getline, bfreeline freeline)
        -:   86:{
        -:   87:    char *line;
        -:   88:    be_assert(getline != NULL);
    #####:   89:    while ((line = getline("> ")) != NULL) {
    #####:   90:        int res = compile(vm, line, getline, freeline);
    #####:   91:        if (res == BE_MALLOC_FAIL)
    #####:   92:            return BE_MALLOC_FAIL;
    #####:   93:        if (res) {
    #####:   94:            be_dumpexcept(vm);
        -:   95:        } else { /* compiled successfully */
    #####:   96:            res = call_script(vm);
    #####:   97:            if (res) {
    #####:   98:                return res == BE_EXIT ? be_toindex(vm, -1) : res;
        -:   99:            }
        -:  100:        }
        -:  101:    }
    #####:  102:    be_writenewline();
    #####:  103:    return 0;
        -:  104:}
        -:  105:
        -:  106:#endif
