        -:    0:Source:src/be_list.c
        -:    0:Graph:./src/be_list.gcno
        -:    0:Data:./src/be_list.gcda
        -:    0:Runs:1
        -:    1:/********************************************************************
        -:    2:** Copyright (c) 2018-2020 Guan Wenliang
        -:    3:** This file is part of the Berry default interpreter.
        -:    4:** skiars@qq.com, https://github.com/Skiars/berry
        -:    5:** See Copyright Notice in the LICENSE file or at
        -:    6:** https://github.com/Skiars/berry/blob/master/LICENSE
        -:    7:********************************************************************/
        -:    8:#include "be_list.h"
        -:    9:#include "be_mem.h"
        -:   10:#include "be_gc.h"
        -:   11:#include "be_vm.h"
        -:   12:#include "be_vector.h"
        -:   13:#include "be_exec.h"
        -:   14:#include <string.h>
        -:   15:
        -:   16:#define datasize(size)          ((size) * sizeof(bvalue))
        -:   17:
        3:   18:blist* be_list_new(bvm *vm)
        -:   19:{
        3:   20:    bgcobject *gco = be_gcnew(vm, BE_LIST, blist);
       3*:   21:    blist *list = cast_list(gco);
        3:   22:    if (list) {
        3:   23:        list->count = 0;
        3:   24:        list->capacity = 2;
        3:   25:        var_setlist(vm->top, list);
        3:   26:        be_incrtop(vm);
        3:   27:        list->data = be_malloc(vm, datasize(list->capacity));
        3:   28:        be_stackpop(vm, 1);
        -:   29:    }
        3:   30:    return list;
        -:   31:}
        -:   32:
        3:   33:void be_list_delete(bvm *vm, blist *list)
        -:   34:{
        3:   35:    be_free(vm, list->data, datasize(list->capacity));
        3:   36:    be_free(vm, list, sizeof(blist));
        3:   37:}
        -:   38:
    #####:   39:blist* be_list_copy(bvm *vm, blist *original)
        -:   40:{
    #####:   41:    bgcobject *gco = be_gcnew(vm, BE_LIST, blist);
    #####:   42:    blist *list = cast_list(gco);
    #####:   43:    if (list) {
    #####:   44:        size_t size = datasize(original->capacity);
    #####:   45:        list->count = original->count;
    #####:   46:        list->capacity = original->capacity;
    #####:   47:        var_setlist(vm->top, list);
    #####:   48:        be_incrtop(vm);
    #####:   49:        list->data = be_malloc(vm, size);
    #####:   50:        be_stackpop(vm, 1);
    #####:   51:        memcpy(list->data, original->data, size);
        -:   52:    }
    #####:   53:    return list;
        -:   54:}
        -:   55:
    #####:   56:bvalue* be_list_index(blist *list, int index)
        -:   57:{
    #####:   58:    if (index < 0) {
    #####:   59:        index = list->count + index;
        -:   60:    }
    #####:   61:    if (index < 0 || index >= list->count) {
    #####:   62:        return NULL;
        -:   63:    }
    #####:   64:    return be_list_at(list, index);
        -:   65:}
        -:   66:
        2:   67:bvalue* be_list_push(bvm *vm, blist *list, bvalue *value)
        -:   68:{
        -:   69:    bvalue *slot;
        2:   70:    if (list->count >= list->capacity) {
    #####:   71:        int newcap = be_nextsize(list->capacity);
    #####:   72:        list->data = be_realloc(vm, list->data,
    #####:   73:            datasize(list->capacity), datasize(newcap));
    #####:   74:        list->capacity = newcap;
        -:   75:    }
        2:   76:    slot = list->data + list->count++;
        2:   77:    if (value != NULL) {
        1:   78:        *slot = *value;
        -:   79:    }
        2:   80:    return slot;
        -:   81:}
        -:   82:
    #####:   83:bvalue* be_list_insert(bvm *vm, blist *list, int index, bvalue *value)
        -:   84:{
        -:   85:    int i;
        -:   86:    bvalue *data;
    #####:   87:    if (index < 0) {
    #####:   88:        index = list->count + index;
        -:   89:    }
    #####:   90:    if (index < 0 || index > list->count) {
    #####:   91:        return NULL;
        -:   92:    }
    #####:   93:    if (list->count >= list->capacity) {
    #####:   94:        int newcap = be_nextsize(list->capacity);
    #####:   95:        list->data = be_realloc(vm, list->data,
    #####:   96:            datasize(list->capacity), datasize(newcap));
    #####:   97:        list->capacity = newcap;
        -:   98:    }
    #####:   99:    data = list->data;
    #####:  100:    for (i = list->count++; i > index; --i) {
    #####:  101:        data[i] = data[i - 1];
        -:  102:    }
    #####:  103:    data = list->data + index;
    #####:  104:    if (value != NULL) {
    #####:  105:        *data = *value;
        -:  106:    }
    #####:  107:    return data;
        -:  108:}
        -:  109:
    #####:  110:int be_list_remove(bvm *vm, blist *list, int index)
        -:  111:{
        -:  112:    int i;
        -:  113:    bvalue *data;
        -:  114:    (void)vm;
    #####:  115:    if (index < 0) {
    #####:  116:        index = list->count + index;
        -:  117:    }
    #####:  118:    if (index < 0 || index >= list->count) {
    #####:  119:        return bfalse;
        -:  120:    }
    #####:  121:    data = list->data;
    #####:  122:    list->count--;
    #####:  123:    for (i = index; i < list->count; ++i) {
    #####:  124:        data[i] = data[i + 1];
        -:  125:    }
    #####:  126:    return btrue;
        -:  127:}
        -:  128:
        1:  129:void be_list_resize(bvm *vm, blist *list, int count)
        -:  130:{
        1:  131:    if (count != list->count) {
    #####:  132:        int newcap = be_nextsize(count);
    #####:  133:        if (newcap > list->capacity) {
        -:  134:            bvalue *v, *end;
    #####:  135:            list->data = be_realloc(vm, list->data,
    #####:  136:                datasize(list->capacity), datasize(newcap));
    #####:  137:            list->capacity = newcap;
    #####:  138:            v = list->data + list->count;
    #####:  139:            end = list->data + count;
    #####:  140:            while (v < end) {
    #####:  141:                var_setnil(v++);
        -:  142:            }
        -:  143:        }
    #####:  144:        list->count = count;
        -:  145:    }
        1:  146:}
        -:  147:
    #####:  148:void be_list_merge(bvm *vm, blist *list, const blist *other)
        -:  149:{
    #####:  150:    int dst_len = list->count;
    #####:  151:    int src_len = other->count;
    #####:  152:    int length = src_len + dst_len;
    #####:  153:    if (length != 0) {
    #####:  154:        int newcap = be_nextsize(length);
    #####:  155:        if (newcap > list->capacity) {
    #####:  156:            list->data = be_realloc(vm, list->data,
    #####:  157:                datasize(list->capacity), datasize(newcap));
    #####:  158:            list->capacity = newcap;
        -:  159:        }
    #####:  160:        memcpy(list->data + dst_len, other->data, src_len * sizeof(bvalue));
    #####:  161:        list->count = length;
        -:  162:    }
    #####:  163:}
        -:  164:
    #####:  165:void be_list_reverse(blist *list)
        -:  166:{
    #####:  167:    bvalue *left = list->data;
    #####:  168:    bvalue *right = left + list->count - 1;
    #####:  169:    for (; left < right; ++left, --right) {
    #####:  170:        bvalue temp = *left;
    #####:  171:        *left = *right;
    #####:  172:        *right = temp;
        -:  173:    }
    #####:  174:}
        -:  175:
    #####:  176:void be_list_pool_init(bvm *vm, blist *list)
        -:  177:{
        -:  178:    bvalue *head;
    #####:  179:    be_list_resize(vm, list, 0);
    #####:  180:    head = be_list_push(vm, list, NULL);
    #####:  181:    var_setint(head, 0);
    #####:  182:}
        -:  183:
    #####:  184:int be_list_pool_alloc(bvm *vm, blist *list, bvalue *src)
        -:  185:{
    #####:  186:    bvalue *head = be_list_data(list), *node;
    #####:  187:    int id = var_toidx(head); /* get the first free node */
    #####:  188:    if (id) {
    #####:  189:        node = head + id;
    #####:  190:        head->v.i = var_toint(node); /* link the next free node to head */
        -:  191:    } else {
    #####:  192:        id = be_list_count(list);
    #####:  193:        node = be_list_push(vm, list, NULL);
        -:  194:    }
    #####:  195:    *node = *src;
    #####:  196:    return id;
        -:  197:}
        -:  198:
    #####:  199:void be_list_pool_free(blist *list, int id)
        -:  200:{
    #####:  201:    bvalue *head = be_list_data(list);
    #####:  202:    bvalue *node = head + id;
        -:  203:    be_assert(id > 0 && id < list->count);
        -:  204:    /* insert a new free node to head */
    #####:  205:    *node = *head;
    #####:  206:    head->v.i = id;
    #####:  207:}
