        -:    0:Source:src/be_gc.c
        -:    0:Graph:./src/be_gc.gcno
        -:    0:Data:./src/be_gc.gcda
        -:    0:Runs:1
        -:    1:/********************************************************************
        -:    2:** Copyright (c) 2018-2020 Guan Wenliang
        -:    3:** This file is part of the Berry default interpreter.
        -:    4:** skiars@qq.com, https://github.com/Skiars/berry
        -:    5:** See Copyright Notice in the LICENSE file or at
        -:    6:** https://github.com/Skiars/berry/blob/master/LICENSE
        -:    7:********************************************************************/
        -:    8:#include "be_gc.h"
        -:    9:#include "be_vm.h"
        -:   10:#include "be_mem.h"
        -:   11:#include "be_var.h"
        -:   12:#include "be_vector.h"
        -:   13:#include "be_string.h"
        -:   14:#include "be_class.h"
        -:   15:#include "be_list.h"
        -:   16:#include "be_func.h"
        -:   17:#include "be_map.h"
        -:   18:#include "be_module.h"
        -:   19:#include "be_exec.h"
        -:   20:#include "be_debug.h"
        -:   21:
        -:   22:#define GC_PAUSE    (1 << 0) /* GC will not be executed automatically */
        -:   23:#define GC_HALT     (1 << 1) /* GC completely stopped */
        -:   24:#define GC_ALLOC    (1 << 2) /* GC in alloc */
        -:   25:
        -:   26:#define gc_try(expr)        be_assert(expr); if (expr)
        -:   27:#define gc_setdark_safe(o)  if (o) gc_setdark(o)
        -:   28:
        -:   29:#define next_threshold(gc)  ((gc).usage * ((size_t)(gc).steprate + 100) / 100)
        -:   30:
        -:   31:#define link_gray(vm, obj)     {    \
        -:   32:    (obj)->gray = (vm)->gc.gray;    \
        -:   33:    (vm)->gc.gray = gc_object(obj); \
        -:   34:}
        -:   35:
        -:   36:static void destruct_object(bvm *vm, bgcobject *obj);
        -:   37:static void free_object(bvm *vm, bgcobject *obj);
        -:   38:
        1:   39:void be_gc_init(bvm *vm)
        -:   40:{
        1:   41:    vm->gc.usage = sizeof(bvm);
        1:   42:    be_gc_setsteprate(vm, 200);
        1:   43:}
        -:   44:
        1:   45:void be_gc_deleteall(bvm *vm)
        -:   46:{
        -:   47:    bupval *uv, *uvnext;
        -:   48:    bgcobject *node, *next;
        -:   49:    /* halt GC and delete all objects */
        1:   50:    vm->gc.status |= GC_HALT;
        -:   51:    /* first: call destructor */
       10:   52:    for (node = vm->gc.list; node; node = node->next) {
        9:   53:        destruct_object(vm, node);
        -:   54:    }
        -:   55:    /* second: free objects */
       10:   56:    for (node = vm->gc.list; node; node = next) {
        9:   57:        next = node->next;
        9:   58:        free_object(vm, node);
        -:   59:    }
        -:   60:    /* delete open upvalue list */
       1*:   61:    for (uv = vm->upvalist; uv; uv = uvnext) {
    #####:   62:        uvnext = uv->u.next;
    #####:   63:        be_free(vm, uv, sizeof(bupval));
        -:   64:    }
        1:   65:}
        -:   66:
        1:   67:void be_gc_setsteprate(bvm *vm, int rate)
        -:   68:{
        -:   69:    be_assert(rate >= 100 && rate <= 355);
        1:   70:    vm->gc.steprate = (bbyte)(rate - 100);
        1:   71:    vm->gc.threshold = next_threshold(vm->gc);
        1:   72:}
        -:   73:
        1:   74:void be_gc_setpause(bvm *vm, int pause)
        -:   75:{
        1:   76:    if (pause) {
        1:   77:        vm->gc.status |= GC_PAUSE;
        -:   78:    } else {
    #####:   79:        vm->gc.status &= ~GC_PAUSE;
        -:   80:    }
        1:   81:}
        -:   82:
        9:   83:bgcobject* be_newgcobj(bvm *vm, int type, size_t size)
        -:   84:{
        9:   85:    bgcobject *obj = be_malloc(vm, size);
        9:   86:    be_gc_auto(vm);
        9:   87:    var_settype(obj, (bbyte)type); /* mark the object type */
        9:   88:    obj->marked = GC_WHITE; /* default gc object type is white */
        9:   89:    obj->next = vm->gc.list; /* link to the next field */
        9:   90:    vm->gc.list = obj; /* insert to head */
        9:   91:    return obj;
        -:   92:}
        -:   93:
        7:   94:bgcobject* be_gc_newstr(bvm *vm, size_t size, int islong)
        -:   95:{
        -:   96:    bgcobject *obj;
        7:   97:    if (islong) { /* creating long strings is similar to ordinary GC objects */
    #####:   98:        return be_newgcobj(vm, BE_STRING, size);
        -:   99:    }
        7:  100:    obj = be_malloc(vm, size);
        7:  101:    be_gc_auto(vm);
        7:  102:    var_settype(obj, BE_STRING); /* mark the object type to BE_STRING */
        7:  103:    obj->marked = GC_WHITE; /* default string type is white */
        7:  104:    return obj;
        -:  105:}
        -:  106:
       23:  107:void be_gc_fix(bvm *vm, bgcobject *obj)
        -:  108:{
        -:  109:    (void)vm;
       23:  110:    if (!gc_isconst(obj)) {
        1:  111:        gc_setfixed(obj);
        -:  112:    }
       23:  113:}
        -:  114:
       22:  115:void be_gc_unfix(bvm *vm, bgcobject *obj)
        -:  116:{
        -:  117:    (void)vm;
       22:  118:    if (!gc_isconst(obj)) {
    #####:  119:        gc_clearfixed(obj);
        -:  120:    }
       22:  121:}
        -:  122:
        8:  123:bbool be_gc_fix_set(bvm *vm, bgcobject *obj, bbool fix)
        -:  124:{
        -:  125:    (void)vm;
        8:  126:    bbool was_fixed = gc_isfixed(obj);
        8:  127:    if (!gc_isconst(obj)) {
        6:  128:        if (fix) {
        3:  129:            gc_setfixed(obj);
        -:  130:        } else {
        3:  131:            gc_clearfixed(obj);
        -:  132:        }
        -:  133:    }
        8:  134:    return was_fixed;
        -:  135:}
        -:  136:
        9:  137:static void mark_gray(bvm *vm, bgcobject *obj)
        -:  138:{
        9:  139:    if (obj && gc_iswhite(obj) && !gc_isconst(obj)) {
        1:  140:        gc_setgray(obj);
        1:  141:        switch (var_type(obj)) {
    #####:  142:        case BE_STRING: gc_setdark(obj); break; /* just set dark */
    #####:  143:        case BE_CLASS: link_gray(vm, cast_class(obj)); break;
    #####:  144:        case BE_PROTO: link_gray(vm, cast_proto(obj)); break;
    #####:  145:        case BE_INSTANCE: link_gray(vm, cast_instance(obj)); break;
       1*:  146:        case BE_MAP: link_gray(vm, cast_map(obj)); break;
    #####:  147:        case BE_LIST: link_gray(vm, cast_list(obj)); break;
    #####:  148:        case BE_CLOSURE: link_gray(vm, cast_closure(obj)); break;
    #####:  149:        case BE_NTVCLOS: link_gray(vm, cast_ntvclos(obj)); break;
    #####:  150:        case BE_MODULE: link_gray(vm, cast_module(obj)); break;
    #####:  151:        case BE_COMOBJ: gc_setdark(obj); break; /* just set dark */
    #####:  152:        default: break;
        -:  153:        }
       8*:  154:    }
        9:  155:}
        -:  156:
       23:  157:static void mark_gray_var(bvm *vm, bvalue *value)
        -:  158:{
       23:  159:    if (be_isgcobj(value)) {
        4:  160:        mark_gray(vm, var_togc(value));
        -:  161:    }
       23:  162:}
        -:  163:
        1:  164:static void mark_map(bvm *vm, bgcobject *obj)
        -:  165:{
       1*:  166:    bmap *map = cast_map(obj);
        1:  167:    gc_try (map != NULL) {
        -:  168:        bmapnode *node;
        1:  169:        bmapiter iter = be_map_iter();
        1:  170:        vm->gc.gray = map->gray; /* remove object from gray list */
        1:  171:        while ((node = be_map_next(map, &iter)) != NULL) {
    #####:  172:            bmapkey *key = &node->key;
    #####:  173:            bvalue *val = &node->value;
    #####:  174:            if (be_isgctype((signed char)key->type)) {
    #####:  175:                mark_gray(vm, var_togc(key));
        -:  176:            }
    #####:  177:            mark_gray_var(vm, val);
        -:  178:        }
        -:  179:    }
        1:  180:}
        -:  181:
    #####:  182:static void mark_list(bvm *vm, bgcobject *obj)
        -:  183:{
    #####:  184:    blist *list = cast_list(obj);
    #####:  185:    gc_try (list != NULL) {
    #####:  186:        bvalue *val = be_list_data(list);
    #####:  187:        bvalue *end = be_list_end(list);
    #####:  188:        vm->gc.gray = list->gray; /* remove object from gray list */
    #####:  189:        for (; val < end; val++) {
    #####:  190:            mark_gray_var(vm, val);
        -:  191:        }
        -:  192:    }
    #####:  193:}
        -:  194:
    #####:  195:static void mark_proto(bvm *vm, bgcobject *obj)
        -:  196:{
    #####:  197:    bproto *p = cast_proto(obj);
    #####:  198:    gc_try (p != NULL) {
        -:  199:        int count;
    #####:  200:        bvalue *k = p->ktab;
    #####:  201:        bproto **ptab = p->ptab;
    #####:  202:        vm->gc.gray = p->gray; /* remove object from gray list */
    #####:  203:        for (count = p->nconst; count--; ++k) {
    #####:  204:            mark_gray_var(vm, k);
        -:  205:        }
    #####:  206:        for (count = p->nproto; count--; ++ptab) {
    #####:  207:            mark_gray(vm, gc_object(*ptab));
        -:  208:        }
    #####:  209:        gc_setdark_safe(p->name);
    #####:  210:        gc_setdark_safe(p->source);
        -:  211:#if BE_DEBUG_VAR_INFO
    #####:  212:        if (p->nvarinfo) {
    #####:  213:            bvarinfo *vinfo = p->varinfo;
        -:  214:            be_assert(vinfo != NULL);
    #####:  215:            for (count = p->nvarinfo; count--; ++vinfo) {
    #####:  216:                gc_setdark_safe(vinfo->name);
        -:  217:            }
        -:  218:        }
        -:  219:#endif
        -:  220:    }
    #####:  221:}
        -:  222:
    #####:  223:static void mark_closure(bvm *vm, bgcobject *obj)
        -:  224:{
    #####:  225:    bclosure *cl = cast_closure(obj);
    #####:  226:    gc_try (cl != NULL) {
    #####:  227:        int count = cl->nupvals;
    #####:  228:        bupval **uv = cl->upvals;
    #####:  229:        vm->gc.gray = cl->gray; /* remove object from gray list */
    #####:  230:        for (; count--; ++uv) {
    #####:  231:            if (*uv && (*uv)->refcnt) {
    #####:  232:                mark_gray_var(vm, (*uv)->value);
        -:  233:            }
        -:  234:        }
    #####:  235:        mark_gray(vm, gc_object(cl->proto));
        -:  236:    }
    #####:  237:}
        -:  238:
    #####:  239:static void mark_ntvclos(bvm *vm, bgcobject *obj)
        -:  240:{
    #####:  241:    bntvclos *f = cast_ntvclos(obj);
    #####:  242:    gc_try (f != NULL) {
    #####:  243:        int count = f->nupvals;
    #####:  244:        bupval **uv = &be_ntvclos_upval(f, 0);
    #####:  245:        vm->gc.gray = f->gray; /* remove object from gray list */
    #####:  246:        for (; count--; ++uv) {
    #####:  247:            if (*uv && (*uv)->refcnt) {
    #####:  248:                mark_gray_var(vm, (*uv)->value);
        -:  249:            }
        -:  250:        }
        -:  251:    }
    #####:  252:}
        -:  253:
    #####:  254:static void mark_class(bvm *vm, bgcobject *obj)
        -:  255:{
    #####:  256:    bclass *c = cast_class(obj);
    #####:  257:    gc_try (c != NULL) {
    #####:  258:        vm->gc.gray = c->gray; /* remove object from gray list */
    #####:  259:        mark_gray(vm, gc_object(be_class_name(c)));
    #####:  260:        mark_gray(vm, gc_object(be_class_members(c)));
    #####:  261:        mark_gray(vm, gc_object(be_class_super(c)));
        -:  262:    }
    #####:  263:}
        -:  264:
    #####:  265:static void mark_instance(bvm *vm, bgcobject *obj)
        -:  266:{
    #####:  267:    binstance *o = cast_instance(obj);
    #####:  268:    gc_try (o != NULL) {
    #####:  269:        bvalue *var = be_instance_members(o);
    #####:  270:        int nvar = be_instance_member_count(o);
    #####:  271:        vm->gc.gray = o->gray; /* remove object from gray list */
    #####:  272:        mark_gray(vm, gc_object(be_instance_class(o)));
    #####:  273:        mark_gray(vm, gc_object(be_instance_super(o)));
    #####:  274:        for (; nvar--; var++) { /* mark variables */
    #####:  275:            mark_gray_var(vm, var);
        -:  276:        }
        -:  277:    }
    #####:  278:}
        -:  279:
    #####:  280:static void mark_module(bvm *vm, bgcobject *obj)
        -:  281:{
    #####:  282:    bmodule *o = cast_module(obj);
    #####:  283:    gc_try (o != NULL) {
    #####:  284:        vm->gc.gray = o->gray; /* remove object from gray list */
    #####:  285:        mark_gray(vm, gc_object(o->table));
    #####:  286:        if (!gc_isconst(o) && gc_exmark(o) & BE_MODULE_NAME) {
    #####:  287:            mark_gray(vm, gc_object(o->info.sname));
        -:  288:        }
        -:  289:    }
    #####:  290:}
        -:  291:
        1:  292:static void free_proto(bvm *vm, bgcobject *obj)
        -:  293:{
       1*:  294:    bproto *proto = cast_proto(obj);
        1:  295:    gc_try (proto != NULL) {
        1:  296:        be_free(vm, proto->upvals, proto->nupvals * sizeof(bupvaldesc));
        1:  297:        be_free(vm, proto->ktab, proto->nconst * sizeof(bvalue));
        1:  298:        be_free(vm, proto->ptab, proto->nproto * sizeof(bproto*));
        1:  299:        be_free(vm, proto->code, proto->codesize * sizeof(binstruction));
        -:  300:#if BE_DEBUG_RUNTIME_INFO
        1:  301:        be_free(vm, proto->lineinfo, proto->nlineinfo * sizeof(blineinfo));
        -:  302:#endif
        -:  303:#if BE_DEBUG_VAR_INFO
        1:  304:        be_free(vm, proto->varinfo, proto->nvarinfo * sizeof(bvarinfo));
        -:  305:#endif
        1:  306:        be_free(vm, proto, sizeof(bproto));
        -:  307:    }
        1:  308:}
        -:  309:
        1:  310:static void free_closure(bvm *vm, bgcobject *obj)
        -:  311:{
       1*:  312:    bclosure *cl = cast_closure(obj);
        1:  313:    gc_try (cl != NULL) {
        1:  314:        int count = cl->nupvals;
        1:  315:        be_release_upvalues(vm, cl);
        1:  316:        be_free(vm, cl, sizeof(bclosure)
        -:  317:            + sizeof(bupval*) * ((size_t)count - 1));
        -:  318:    }
        1:  319:}
        -:  320:
    #####:  321:static void free_ntvclos(bvm *vm, bgcobject *obj)
        -:  322:{
    #####:  323:    bntvclos *f = cast_ntvclos(obj);
    #####:  324:    gc_try (f != NULL)  {
    #####:  325:        int count = f->nupvals;
    #####:  326:        bupval **uv = &be_ntvclos_upval(f, 0);
    #####:  327:        while (count--) {
    #####:  328:            be_free(vm, *uv++, sizeof(bupval));
        -:  329:        }
    #####:  330:        be_free(vm, f, sizeof(bntvclos) + sizeof(bupval*) * f->nupvals);
        -:  331:    }
    #####:  332:}
        -:  333:
    #####:  334:static void free_lstring(bvm *vm, bgcobject *obj)
        -:  335:{
    #####:  336:    blstring *ls = gc_cast(obj, BE_STRING, blstring);
    #####:  337:    gc_try (ls != NULL)  {
    #####:  338:        be_free(vm, ls, sizeof(blstring) + ls->llen + 1);
        -:  339:    }
    #####:  340:}
        -:  341:
        1:  342:static void free_instance(bvm *vm, bgcobject *obj)
        -:  343:{
       1*:  344:    binstance *o = cast_instance(obj);
        1:  345:    int nvar = be_instance_member_count(o);
        1:  346:    be_free(vm, obj, sizeof(binstance) + sizeof(bvalue) * (nvar - 1));
        1:  347:}
        -:  348:
        9:  349:static void free_object(bvm *vm, bgcobject *obj)
        -:  350:{
        9:  351:    switch (obj->type) {
    #####:  352:    case BE_STRING: free_lstring(vm, obj); break; /* long string */
    #####:  353:    case BE_CLASS: be_free(vm, obj, sizeof(bclass)); break;
        1:  354:    case BE_INSTANCE: free_instance(vm, obj); break;
       3*:  355:    case BE_MAP: be_map_delete(vm, cast_map(obj)); break;
       3*:  356:    case BE_LIST: be_list_delete(vm, cast_list(obj)); break;
        1:  357:    case BE_CLOSURE: free_closure(vm, obj); break;
    #####:  358:    case BE_NTVCLOS: free_ntvclos(vm, obj); break;
        1:  359:    case BE_PROTO: free_proto(vm, obj); break;
    #####:  360:    case BE_MODULE: be_module_delete(vm, cast_module(obj)); break;
    #####:  361:    case BE_COMOBJ: be_commonobj_delete(vm, obj); break;
    #####:  362:    default: break; /* case BE_STRING: break; */
        -:  363:    }
        9:  364:}
        -:  365:
        1:  366:static void premark_internal(bvm *vm)
        -:  367:{
        1:  368:    mark_gray(vm, gc_object(vm->module.loaded));
        1:  369:    mark_gray(vm, gc_object(vm->module.path));
        1:  370:    mark_gray(vm, gc_object(vm->ntvclass));
        1:  371:    mark_gray(vm, gc_object(vm->registry));
        -:  372:#if BE_USE_DEBUG_HOOK
        1:  373:    if (be_isgcobj(&vm->hook)) {
    #####:  374:        mark_gray(vm, gc_object(var_toobj(&vm->hook)));
        -:  375:    }
        -:  376:#endif
        1:  377:}
        -:  378:
        1:  379:static void premark_global(bvm *vm)
        -:  380:{
        1:  381:    bvalue *v = vm->gbldesc.global.vlist.data;
        1:  382:    bvalue *end = v + be_global_count(vm);
        1:  383:    while (v < end) {
    #####:  384:        if (be_isgcobj(v)) {
    #####:  385:            mark_gray(vm, var_togc(v));
        -:  386:        }
    #####:  387:        ++v;
        -:  388:    }
        1:  389:    v = vm->gbldesc.builtin.vlist.data;
        1:  390:    end = v + be_builtin_count(vm);
       24:  391:    while (v < end) {
       23:  392:        mark_gray_var(vm, v++);
        -:  393:    }
        1:  394:}
        -:  395:
        1:  396:static void premark_stack(bvm *vm)
        -:  397:{
        1:  398:    bvalue *v = vm->stack, *end = vm->top;
        -:  399:    /* mark live objects */
       1*:  400:    for (; v < end; ++v) {
    #####:  401:        mark_gray_var(vm, v);
        -:  402:    }
        -:  403:    /* set other values to nil */
        1:  404:    end = vm->stacktop;
       11:  405:    for (; v < end; ++v) {
       10:  406:        var_setnil(v);
        -:  407:    }
        1:  408:}
        -:  409:
        1:  410:static void premark_tracestack(bvm *vm)
        -:  411:{
        1:  412:    bcallsnapshot *cf = be_vector_data(&vm->tracestack);
        1:  413:    bcallsnapshot *end = be_vector_end(&vm->tracestack);
       1*:  414:    for (; cf <= end; ++cf) {
    #####:  415:        mark_gray_var(vm, &cf->func);
        -:  416:    }
        1:  417:}
        -:  418:
        1:  419:static void premark_fixed(bvm *vm)
        -:  420:{
        1:  421:    bgcobject *node = vm->gc.list;
        2:  422:    for (; node; node = node->next) {
        1:  423:        if (gc_isfixed(node) && gc_iswhite(node)) {
        1:  424:            mark_gray(vm, node);
        -:  425:        }
        -:  426:    }
        1:  427:}
        -:  428:
        1:  429:static void mark_unscanned(bvm *vm)
        -:  430:{
        2:  431:    while (vm->gc.gray) {
        1:  432:        bgcobject *obj = vm->gc.gray;
        1:  433:        if (obj && !gc_isdark(obj) && !gc_isconst(obj)) {
        1:  434:            gc_setdark(obj);
        1:  435:            switch (var_type(obj)) {
    #####:  436:            case BE_CLASS: mark_class(vm, obj); break;
    #####:  437:            case BE_PROTO: mark_proto(vm, obj); break;
    #####:  438:            case BE_INSTANCE: mark_instance(vm, obj); break;
        1:  439:            case BE_MAP: mark_map(vm, obj); break;
    #####:  440:            case BE_LIST: mark_list(vm, obj); break;
    #####:  441:            case BE_CLOSURE: mark_closure(vm, obj); break;
    #####:  442:            case BE_NTVCLOS: mark_ntvclos(vm, obj); break;
    #####:  443:            case BE_MODULE: mark_module(vm, obj); break;
    #####:  444:            default:
        -:  445:                be_assert(0); /* error */
    #####:  446:                break;
        -:  447:            }
    #####:  448:        }
        -:  449:    }
        1:  450:}
        -:  451:
        9:  452:static void destruct_object(bvm *vm, bgcobject *obj)
        -:  453:{
        9:  454:    if (vm->gc.status & GC_ALLOC) {
    #####:  455:        return; /* no destructor is called during the allocation. */
        -:  456:    }
        9:  457:    if (obj->type == BE_INSTANCE) {
        -:  458:        int type;
       1*:  459:        binstance *ins = cast_instance(obj);
        -:  460:        /* does not GC when creating the string "deinit". */
        1:  461:        type = be_instance_member_simple(vm, ins, str_literal(vm, "deinit"), vm->top);
        1:  462:        be_incrtop(vm);
        1:  463:        if (basetype(type) == BE_FUNCTION) {
    #####:  464:            var_setinstance(vm->top, ins);  /* push instance on stack as arg 1 */
    #####:  465:            be_incrtop(vm);
    #####:  466:            be_dofunc(vm, vm->top - 2, 1);  /* warning, there shoudln't be any exception raised here, or the gc stops */
    #####:  467:            be_stackpop(vm, 1);
        -:  468:        }
        1:  469:        be_stackpop(vm, 1);
        -:  470:    }
        -:  471:}
        -:  472:
        1:  473:static void destruct_white(bvm *vm)
        -:  474:{
        1:  475:    bgcobject *node = vm->gc.list;
        -:  476:    /* since the destructor may allocate objects, we must first suspend the GC */
        1:  477:    vm->gc.status |= GC_HALT; /* mark GC is halt */
        2:  478:    while (node) {
        1:  479:        if (gc_iswhite(node)) {
    #####:  480:            destruct_object(vm, node);
        -:  481:        }
        1:  482:        node = node->next;
        -:  483:    }
        1:  484:    vm->gc.status &= ~GC_HALT; /* reset GC halt flag */
        1:  485:}
        -:  486:
        1:  487:static void delete_white(bvm *vm)
        -:  488:{
        -:  489:    bgcobject *node, *prev, *next;
        2:  490:    for (node = vm->gc.list, prev = node; node; node = next) {
        1:  491:        next = node->next;
        1:  492:        if (gc_iswhite(node)) {
    #####:  493:            if (node == vm->gc.list) { /* first node */
    #####:  494:                vm->gc.list = node->next;
    #####:  495:                prev = node->next;
        -:  496:            } else { /* not first node */
    #####:  497:                prev->next = next;
        -:  498:            }
    #####:  499:            free_object(vm, node);
        -:  500:        } else {
        1:  501:            gc_setwhite(node);
        1:  502:            prev = node;
        -:  503:        }
        -:  504:    }
        1:  505:}
        -:  506:
        1:  507:static void reset_fixedlist(bvm *vm)
        -:  508:{
        -:  509:    bgcobject *node;
       1*:  510:    for (node = vm->gc.fixed; node; node = node->next) {
    #####:  511:        if (gc_isdark(node)) {
    #####:  512:            gc_setwhite(node);
        -:  513:        }
        -:  514:    }
        1:  515:}
        -:  516:
       16:  517:void be_gc_auto(bvm *vm)
        -:  518:{
        -:  519:#if BE_USE_DEBUG_GC
        -:  520:    if (vm->gc.status & GC_PAUSE) { /* force gc each time it's possible */
        -:  521:        be_gc_collect(vm);
        -:  522:    }
        -:  523:#else
       16:  524:    if (vm->gc.status & GC_PAUSE && vm->gc.usage > vm->gc.threshold) {
        1:  525:        be_gc_collect(vm);
        -:  526:    }
        -:  527:#endif
       16:  528:}
        -:  529:
    #####:  530:size_t be_gc_memcount(bvm *vm)
        -:  531:{
    #####:  532:    return vm->gc.usage;
        -:  533:}
        -:  534:
        1:  535:void be_gc_collect(bvm *vm)
        -:  536:{
        1:  537:    if (vm->gc.status & GC_HALT) {
    #####:  538:        return; /* the GC cannot run for some reason */
        -:  539:    }
        -:  540:#if BE_USE_OBSERVABILITY_HOOK
        -:  541:    if (vm->obshook != NULL)
        -:  542:        (*vm->obshook)(vm, BE_OBS_GC_START, vm->gc.usage);
        -:  543:#endif
        -:  544:    /* step 1: set root-set reference objects to unscanned */
        1:  545:    premark_internal(vm); /* object internal the VM */
        1:  546:    premark_global(vm); /* global objects */
        1:  547:    premark_stack(vm); /* stack objects */
        1:  548:    premark_tracestack(vm); /* trace stack objects */
        1:  549:    premark_fixed(vm); /* fixed objects */
        -:  550:    /* step 2: set unscanned objects to black */
        1:  551:    mark_unscanned(vm);
        -:  552:    /* step 3: destruct and delete unreachable objects */
        1:  553:    destruct_white(vm);
        1:  554:    delete_white(vm);
        1:  555:    be_gcstrtab(vm);
        -:  556:    /* step 4: reset the fixed objects */
        1:  557:    reset_fixedlist(vm);
        -:  558:    /* step 5: calculate the next GC threshold */
        1:  559:    vm->gc.threshold = next_threshold(vm->gc);
        -:  560:#if BE_USE_OBSERVABILITY_HOOK
        -:  561:    if (vm->obshook != NULL)
        -:  562:        (*vm->obshook)(vm, BE_OBS_GC_END, vm->gc.usage);
        -:  563:#endif
        -:  564:}
