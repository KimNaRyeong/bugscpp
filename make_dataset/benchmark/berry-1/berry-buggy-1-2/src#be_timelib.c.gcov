        -:    0:Source:src/be_timelib.c
        -:    0:Graph:./src/be_timelib.gcno
        -:    0:Data:./src/be_timelib.gcda
        -:    0:Runs:1
        -:    1:/********************************************************************
        -:    2:** Copyright (c) 2018-2020 Guan Wenliang
        -:    3:** This file is part of the Berry default interpreter.
        -:    4:** skiars@qq.com, https://github.com/Skiars/berry
        -:    5:** See Copyright Notice in the LICENSE file or at
        -:    6:** https://github.com/Skiars/berry/blob/master/LICENSE
        -:    7:********************************************************************/
        -:    8:#include "berry.h"
        -:    9:#include <time.h>
        -:   10:
        -:   11:#if BE_USE_TIME_MODULE
        -:   12:
    #####:   13:static int m_time(bvm *vm)
        -:   14:{
    #####:   15:    be_pushint(vm, (bint)time(NULL));
    #####:   16:    be_return(vm);
        -:   17:}
        -:   18:
    #####:   19:static void time_insert(bvm *vm, const char *key, int value)
        -:   20:{
    #####:   21:    be_pushstring(vm, key);
    #####:   22:    be_pushint(vm, value);
    #####:   23:    be_data_insert(vm, -3);
    #####:   24:    be_pop(vm, 2);
    #####:   25:}
        -:   26:
    #####:   27:static int m_dump(bvm *vm)
        -:   28:{
    #####:   29:    if (be_top(vm) >= 1 && be_isint(vm, 1)) {
    #####:   30:        time_t ts = be_toint(vm, 1);
    #####:   31:        struct tm *t = localtime(&ts);
    #####:   32:        be_newobject(vm, "map");
    #####:   33:        time_insert(vm, "year", t->tm_year + 1900);
    #####:   34:        time_insert(vm, "month", t->tm_mon + 1);
    #####:   35:        time_insert(vm, "day", t->tm_mday);
    #####:   36:        time_insert(vm, "hour", t->tm_hour);
    #####:   37:        time_insert(vm, "min", t->tm_min);
    #####:   38:        time_insert(vm, "sec", t->tm_sec);
    #####:   39:        time_insert(vm, "weekday", t->tm_wday);
    #####:   40:        be_pop(vm, 1);
    #####:   41:        be_return(vm);
        -:   42:    }
    #####:   43:    be_return_nil(vm);
        -:   44:}
        -:   45:
    #####:   46:static int m_clock(bvm *vm)
        -:   47:{
    #####:   48:    be_pushreal(vm, clock() / (breal)CLOCKS_PER_SEC);
    #####:   49:    be_return(vm);
        -:   50:}
        -:   51:
        -:   52:#if !BE_USE_PRECOMPILED_OBJECT
        -:   53:be_native_module_attr_table(time) {
        -:   54:    be_native_module_function("time", m_time),
        -:   55:    be_native_module_function("dump", m_dump),
        -:   56:    be_native_module_function("clock", m_clock)
        -:   57:};
        -:   58:
        -:   59:be_define_native_module(time, NULL);
        -:   60:#else
        -:   61:/* @const_object_info_begin
        -:   62:module time (scope: global, depend: BE_USE_TIME_MODULE) {
        -:   63:    time, func(m_time)
        -:   64:    dump, func(m_dump)
        -:   65:    clock, func(m_clock)
        -:   66:}
        -:   67:@const_object_info_end */
        -:   68:#include "../generate/be_fixed_time.h"
        -:   69:#endif
        -:   70:
        -:   71:#endif /* BE_USE_TIME_MODULE */
