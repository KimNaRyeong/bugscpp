        -:    0:Source:src/be_globallib.c
        -:    0:Graph:./src/be_globallib.gcno
        -:    0:Data:./src/be_globallib.gcda
        -:    0:Runs:1
        -:    1:/********************************************************************
        -:    2:** Copyright (c) 2018-2021 Guan Wenliang & Stephan Hadinger
        -:    3:** This file is part of the Berry default interpreter.
        -:    4:** skiars@qq.com, https://github.com/Skiars/berry
        -:    5:** See Copyright Notice in the LICENSE file or at
        -:    6:** https://github.com/Skiars/berry/blob/master/LICENSE
        -:    7:********************************************************************/
        -:    8:#include "be_object.h"
        -:    9:#include "be_module.h"
        -:   10:#include "be_string.h"
        -:   11:#include "be_vector.h"
        -:   12:#include "be_class.h"
        -:   13:#include "be_debug.h"
        -:   14:#include "be_map.h"
        -:   15:#include "be_vm.h"
        -:   16:#include <string.h>
        -:   17:
        -:   18:#if BE_USE_GLOBAL_MODULE
        -:   19:
        -:   20:#define global(vm)      ((vm)->gbldesc.global)
        -:   21:
    #####:   22:static void dump_map_keys(bvm *vm, bmap *map)
        -:   23:{
    #####:   24:    if (!map) { return; }   /* protect agains potential null pointer */
        -:   25:    bmapnode *node;
    #####:   26:    bmapiter iter = be_map_iter();
    #####:   27:    while ((node = be_map_next(map, &iter)) != NULL) {
    #####:   28:        if (var_isstr(&node->key)) {
    #####:   29:            bstring *s = var_tostr(&node->key);
    #####:   30:            be_pushstring(vm, str(s));
    #####:   31:            be_data_push(vm, -2);
    #####:   32:            be_pop(vm, 1);
        -:   33:        }
        -:   34:    }
        -:   35:}
        -:   36:
    #####:   37:static int m_globals(bvm *vm)
        -:   38:{
    #####:   39:    be_newobject(vm, "list");
    #####:   40:    dump_map_keys(vm, global(vm).vtab);
    #####:   41:    be_pop(vm, 1);
    #####:   42:    be_return(vm);
        -:   43:}
        -:   44:
    #####:   45:static int m_findglobal(bvm *vm)
        -:   46:{
    #####:   47:    int top = be_top(vm);
    #####:   48:    if (top >= 1 && be_isstring(vm, 1)) {
    #####:   49:        const char * name = be_tostring(vm, 1);
    #####:   50:        be_getglobal(vm, name);
    #####:   51:        be_return(vm);
        -:   52:    }
    #####:   53:    be_return_nil(vm);
        -:   54:}
        -:   55:
    #####:   56:static int m_setglobal(bvm *vm)
        -:   57:{
    #####:   58:    int top = be_top(vm);
    #####:   59:    if (top >= 2 && be_isstring(vm, 1)) {
    #####:   60:        const char * name = be_tostring(vm, 1);
    #####:   61:        be_setglobal(vm, name);
    #####:   62:        be_return(vm);
        -:   63:    }
    #####:   64:    be_return_nil(vm);
        -:   65:}
        -:   66:
        -:   67:#if !BE_USE_PRECOMPILED_OBJECT
        -:   68:be_native_module_attr_table(global) {
        -:   69:    be_native_module_function("()", m_globals),
        -:   70:    be_native_module_function("member", m_findglobal),
        -:   71:    be_native_module_function("setmember", m_setglobal),
        -:   72:};
        -:   73:
        -:   74:be_define_native_module(global, NULL);
        -:   75:#else
        -:   76:/* @const_object_info_begin
        -:   77:module global (scope: global, depend: BE_USE_GLOBAL_MODULE) {
        -:   78:    (), func(m_globals)
        -:   79:    member, func(m_findglobal)
        -:   80:    setmember, func(m_setglobal)
        -:   81:}
        -:   82:@const_object_info_end */
        -:   83:#include "../generate/be_fixed_global.h"
        -:   84:#endif
        -:   85:
        -:   86:#endif /* BE_USE_GLOBAL_MODULE */
