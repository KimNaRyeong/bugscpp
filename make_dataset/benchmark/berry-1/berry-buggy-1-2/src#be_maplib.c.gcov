        -:    0:Source:src/be_maplib.c
        -:    0:Graph:./src/be_maplib.gcno
        -:    0:Data:./src/be_maplib.gcda
        -:    0:Runs:1
        -:    1:/********************************************************************
        -:    2:** Copyright (c) 2018-2020 Guan Wenliang
        -:    3:** This file is part of the Berry default interpreter.
        -:    4:** skiars@qq.com, https://github.com/Skiars/berry
        -:    5:** See Copyright Notice in the LICENSE file or at
        -:    6:** https://github.com/Skiars/berry/blob/master/LICENSE
        -:    7:********************************************************************/
        -:    8:#include "be_object.h"
        -:    9:#include "be_func.h"
        -:   10:#include "be_exec.h"
        -:   11:#include "be_map.h"
        -:   12:#include "be_vm.h"
        -:   13:
        -:   14:#define map_check_data(vm, argc)                        \
        -:   15:    if (!be_ismap(vm, -1) || be_top(vm) - 1 < argc) {   \
        -:   16:        be_return_nil(vm);                              \
        -:   17:    }
        -:   18:
        -:   19:#define map_check_ref(vm)                               \
        -:   20:    if (be_refcontains(vm, 1)) {                        \
        -:   21:        be_pushstring(vm, "{...}");                     \
        -:   22:        be_return(vm);                                  \
        -:   23:    }
        -:   24:
    #####:   25:static int m_init(bvm *vm)
        -:   26:{
    #####:   27:    if (be_top(vm) > 1 && be_ismap(vm, 2)) {
    #####:   28:        be_pushvalue(vm, 2);
    #####:   29:        be_setmember(vm, 1, ".p");
        -:   30:    } else {
    #####:   31:        be_newmap(vm);
    #####:   32:        be_setmember(vm, 1, ".p");
        -:   33:    }
    #####:   34:    be_return_nil(vm);
        -:   35:}
        -:   36:
    #####:   37:static void push_key(bvm *vm)
        -:   38:{
    #####:   39:    be_toescape(vm, -2, 'x'); /* escape string */
    #####:   40:    be_pushvalue(vm, -2); /* push to top */
    #####:   41:    be_strconcat(vm, -5);
    #####:   42:    be_pop(vm, 1);
    #####:   43:}
        -:   44:
    #####:   45:static void push_value(bvm *vm)
        -:   46:{
    #####:   47:    be_toescape(vm, -1, 'x'); /* escape string */
    #####:   48:    be_strconcat(vm, -4);
    #####:   49:    be_pop(vm, 2);
    #####:   50:    if (be_iter_hasnext(vm, -3)) {
    #####:   51:        be_pushstring(vm, ", ");
    #####:   52:        be_strconcat(vm, -3);
    #####:   53:        be_pop(vm, 1);
        -:   54:    }
    #####:   55:}
        -:   56:
    #####:   57:static int m_tostring(bvm *vm)
        -:   58:{
    #####:   59:    be_getmember(vm, 1, ".p");
    #####:   60:    map_check_data(vm, 1);
    #####:   61:    map_check_ref(vm);
    #####:   62:    be_refpush(vm, 1);
    #####:   63:    be_pushstring(vm, "{");
    #####:   64:    be_pushiter(vm, -2); /* map iterator use 1 register */
    #####:   65:    while (be_iter_hasnext(vm, -3)) {
    #####:   66:        be_iter_next(vm, -3);
    #####:   67:        push_key(vm); /* key.tostring() */
    #####:   68:        be_pushstring(vm, ": "); /* add ': ' */
    #####:   69:        be_strconcat(vm, -5);
    #####:   70:        be_pop(vm, 1);
    #####:   71:        push_value(vm); /* value.tostring() */
        -:   72:    }
    #####:   73:    be_pop(vm, 1); /* pop iterator */
    #####:   74:    be_pushstring(vm, "}");
    #####:   75:    be_strconcat(vm, -2);
    #####:   76:    be_pop(vm, 1);
    #####:   77:    be_refpop(vm);
    #####:   78:    be_return(vm);
        -:   79:}
        -:   80:
    #####:   81:static int m_remove(bvm *vm)
        -:   82:{
    #####:   83:    be_getmember(vm, 1, ".p");
    #####:   84:    map_check_data(vm, 2);
    #####:   85:    be_pushvalue(vm, 2);
    #####:   86:    be_data_remove(vm, -2);
    #####:   87:    be_return_nil(vm);
        -:   88:}
        -:   89:
    #####:   90:static int m_item(bvm *vm)
        -:   91:{
    #####:   92:    be_getmember(vm, 1, ".p");
    #####:   93:    map_check_data(vm, 2);
    #####:   94:    be_pushvalue(vm, 2);
    #####:   95:    if (!be_getindex(vm, -2)) {
    #####:   96:        be_raise(vm, "key_error", be_tostring(vm, 2));
        -:   97:    }
    #####:   98:    be_return(vm);
        -:   99:}
        -:  100:
    #####:  101:static int m_setitem(bvm *vm)
        -:  102:{
    #####:  103:    be_getmember(vm, 1, ".p");
    #####:  104:    map_check_data(vm, 3);
    #####:  105:    be_pushvalue(vm, 2);
    #####:  106:    be_pushvalue(vm, 3);
    #####:  107:    be_setindex(vm, -3);
    #####:  108:    be_return_nil(vm);
        -:  109:}
        -:  110:
    #####:  111:static int m_find(bvm *vm)
        -:  112:{
    #####:  113:    int argc = be_top(vm);
    #####:  114:    be_getmember(vm, 1, ".p");
    #####:  115:    map_check_data(vm, 2);
    #####:  116:    be_pushvalue(vm, 2);
        -:  117:    /* not find and has default value */
    #####:  118:    if (!be_getindex(vm, -2) && argc >= 3) {
    #####:  119:        be_pushvalue(vm, 3);
        -:  120:    }
    #####:  121:    be_return(vm);
        -:  122:}
        -:  123:
    #####:  124:static int m_insert(bvm *vm)
        -:  125:{
        -:  126:    bbool res;
    #####:  127:    be_getmember(vm, 1, ".p");
    #####:  128:    map_check_data(vm, 3);
    #####:  129:    be_pushvalue(vm, 2);
    #####:  130:    be_pushvalue(vm, 3);
    #####:  131:    res = be_data_insert(vm, -3);
    #####:  132:    be_pushbool(vm, res);
    #####:  133:    be_return(vm);
        -:  134:}
        -:  135:
    #####:  136:static int m_size(bvm *vm)
        -:  137:{
    #####:  138:    be_getmember(vm, 1, ".p");
    #####:  139:    map_check_data(vm, 1);
    #####:  140:    be_pushint(vm, be_data_size(vm, -1));
    #####:  141:    be_return(vm);
        -:  142:}
        -:  143:
    #####:  144:static int iter_closure(bvm *vm)
        -:  145:{
        -:  146:    /* for better performance, we operate the upvalues
        -:  147:     * directly without using by the stack. */
    #####:  148:    bntvclos *func = var_toobj(vm->cf->func);
    #####:  149:    bvalue *uv0 = be_ntvclos_upval(func, 0)->value; /* list value */
    #####:  150:    bvalue *uv1 = be_ntvclos_upval(func, 1)->value; /* iter value */
    #####:  151:    bmapiter iter = var_toobj(uv1);
    #####:  152:    bmapnode *next = be_map_next(var_toobj(uv0), &iter);
    #####:  153:    if (next == NULL) {
    #####:  154:        be_stop_iteration(vm);
    #####:  155:        be_return_nil(vm); /* will not be executed */
        -:  156:    }
    #####:  157:    var_setobj(uv1, BE_COMPTR, iter); /* set upvale[1] (iter value) */
        -:  158:    /* push next value to top */
    #####:  159:    var_setval(vm->top, &next->value);
    #####:  160:    be_incrtop(vm);
    #####:  161:    be_return(vm);
        -:  162:}
        -:  163:
    #####:  164:static int m_iter(bvm *vm)
        -:  165:{
    #####:  166:    be_pushntvclosure(vm, iter_closure, 2);
    #####:  167:    be_getmember(vm, 1, ".p");
    #####:  168:    be_setupval(vm, -2, 0);
    #####:  169:    be_pushiter(vm, -1);
    #####:  170:    be_setupval(vm, -3, 1);
    #####:  171:    be_pop(vm, 2);
    #####:  172:    be_return(vm);
        -:  173:}
        -:  174:
    #####:  175:static int keys_iter_closure(bvm *vm)
        -:  176:{
        -:  177:    /* for better performance, we operate the upvalues
        -:  178:     * directly without using by the stack. */
    #####:  179:    bntvclos *func = var_toobj(vm->cf->func);
    #####:  180:    bvalue *uv0 = be_ntvclos_upval(func, 0)->value; /* list value */
    #####:  181:    bvalue *uv1 = be_ntvclos_upval(func, 1)->value; /* iter value */
    #####:  182:    bmapiter iter = var_toobj(uv1);
    #####:  183:    bmapnode *next = be_map_next(var_toobj(uv0), &iter);
    #####:  184:    if (next == NULL) {
    #####:  185:        be_stop_iteration(vm);
    #####:  186:        be_return_nil(vm); /* will not be executed */
        -:  187:    }
    #####:  188:    var_setobj(uv1, BE_COMPTR, iter); /* set upvale[1] (iter value) */
        -:  189:    /* push next value to top */
    #####:  190:    var_setobj(vm->top, next->key.type, next->key.v.p);
    #####:  191:    be_incrtop(vm);
    #####:  192:    be_return(vm);
        -:  193:}
        -:  194:
    #####:  195:static int m_keys(bvm *vm)
        -:  196:{
    #####:  197:    be_pushntvclosure(vm, keys_iter_closure, 2);
    #####:  198:    be_getmember(vm, 1, ".p");
    #####:  199:    be_setupval(vm, -2, 0);
    #####:  200:    be_pushiter(vm, -1);
    #####:  201:    be_setupval(vm, -3, 1);
    #####:  202:    be_pop(vm, 2);
    #####:  203:    be_return(vm);
        -:  204:}
        -:  205:
        -:  206:#if !BE_USE_PRECOMPILED_OBJECT
        -:  207:void be_load_maplib(bvm *vm)
        -:  208:{
        -:  209:    static const bnfuncinfo members[] = {
        -:  210:        { ".p", NULL },
        -:  211:        { "init", m_init },
        -:  212:        { "tostring", m_tostring },
        -:  213:        { "remove", m_remove },
        -:  214:        { "item", m_item },
        -:  215:        { "setitem", m_setitem },
        -:  216:        { "find", m_find },
        -:  217:        { "size", m_size },
        -:  218:        { "insert", m_insert },
        -:  219:        { "iter", m_iter },
        -:  220:        { "keys", m_keys },
        -:  221:        { NULL, NULL }
        -:  222:    };
        -:  223:    be_regclass(vm, "map", members);
        -:  224:}
        -:  225:#else
        -:  226:/* @const_object_info_begin
        -:  227:class be_class_map (scope: global, name: map) {
        -:  228:    .p, var
        -:  229:    init, func(m_init)
        -:  230:    tostring, func(m_tostring)
        -:  231:    remove, func(m_remove)
        -:  232:    item, func(m_item)
        -:  233:    setitem, func(m_setitem)
        -:  234:    find, func(m_find)
        -:  235:    size, func(m_size)
        -:  236:    insert, func(m_insert)
        -:  237:    iter, func(m_iter)
        -:  238:    keys, func(m_keys)
        -:  239:}
        -:  240:@const_object_info_end */
        -:  241:#include "../generate/be_fixed_be_class_map.h"
        -:  242:#endif
