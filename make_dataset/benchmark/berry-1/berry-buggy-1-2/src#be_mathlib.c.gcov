        -:    0:Source:src/be_mathlib.c
        -:    0:Graph:./src/be_mathlib.gcno
        -:    0:Data:./src/be_mathlib.gcda
        -:    0:Runs:1
        -:    1:/********************************************************************
        -:    2:** Copyright (c) 2018-2020 Guan Wenliang
        -:    3:** This file is part of the Berry default interpreter.
        -:    4:** skiars@qq.com, https://github.com/Skiars/berry
        -:    5:** See Copyright Notice in the LICENSE file or at
        -:    6:** https://github.com/Skiars/berry/blob/master/LICENSE
        -:    7:********************************************************************/
        -:    8:#include "be_object.h"
        -:    9:#include <math.h>
        -:   10:#include <limits.h>
        -:   11:#include <stdlib.h>
        -:   12:
        -:   13:#if BE_USE_MATH_MODULE
        -:   14:
        -:   15:#ifdef M_PI
        -:   16:  #undef M_PI
        -:   17:#endif
        -:   18:#define M_PI        3.141592653589793238462643383279
        -:   19:
        -:   20:#if BE_INTGER_TYPE == 0 /* int */
        -:   21:  #define M_IMAX    INT_MAX
        -:   22:  #define M_IMIN    INT_MIN
        -:   23:#elif BE_INTGER_TYPE == 1 /* long */
        -:   24:  #define M_IMAX    LONG_MAX
        -:   25:  #define M_IMIN    LONG_MIN
        -:   26:#else /* int64_t (long long) */
        -:   27:  #define M_IMAX    LLONG_MAX
        -:   28:  #define M_IMIN    LLONG_MIN
        -:   29:#endif
        -:   30:
        -:   31:#if BE_USE_SINGLE_FLOAT
        -:   32:  #define mathfunc(func)        func##f
        -:   33:#else
        -:   34:  #define mathfunc(func)        func
        -:   35:#endif
        -:   36:
    #####:   37:static int m_abs(bvm *vm)
        -:   38:{
    #####:   39:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:   40:        breal x = be_toreal(vm, 1);
    #####:   41:        be_pushreal(vm, mathfunc(fabs)(x));
        -:   42:    } else {
    #####:   43:        be_pushreal(vm, (breal)0.0);
        -:   44:    }
    #####:   45:    be_return(vm);
        -:   46:}
        -:   47:
    #####:   48:static int m_ceil(bvm *vm)
        -:   49:{
    #####:   50:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:   51:        breal x = be_toreal(vm, 1);
    #####:   52:        be_pushreal(vm, mathfunc(ceil)(x));
        -:   53:    } else {
    #####:   54:        be_pushreal(vm, (breal)0.0);
        -:   55:    }
    #####:   56:    be_return(vm);
        -:   57:}
        -:   58:
    #####:   59:static int m_floor(bvm *vm)
        -:   60:{
    #####:   61:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:   62:        breal x = be_toreal(vm, 1);
    #####:   63:        be_pushreal(vm, mathfunc(floor)(x));
        -:   64:    } else {
    #####:   65:        be_pushreal(vm, (breal)0.0);
        -:   66:    }
    #####:   67:    be_return(vm);
        -:   68:}
        -:   69:
    #####:   70:static int m_sin(bvm *vm)
        -:   71:{
    #####:   72:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:   73:        breal x = be_toreal(vm, 1);
    #####:   74:        be_pushreal(vm, mathfunc(sin)(x));
        -:   75:    } else {
    #####:   76:        be_pushreal(vm, (breal)0.0);
        -:   77:    }
    #####:   78:    be_return(vm);
        -:   79:}
        -:   80:
    #####:   81:static int m_cos(bvm *vm)
        -:   82:{
    #####:   83:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:   84:        breal x = be_toreal(vm, 1);
    #####:   85:        be_pushreal(vm, mathfunc(cos)(x));
        -:   86:    } else {
    #####:   87:        be_pushreal(vm, (breal)0.0);
        -:   88:    }
    #####:   89:    be_return(vm);
        -:   90:}
        -:   91:
    #####:   92:static int m_tan(bvm *vm)
        -:   93:{
    #####:   94:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:   95:        breal x = be_toreal(vm, 1);
    #####:   96:        be_pushreal(vm, mathfunc(tan)(x));
        -:   97:    } else {
    #####:   98:        be_pushreal(vm, (breal)0.0);
        -:   99:    }
    #####:  100:    be_return(vm);
        -:  101:}
        -:  102:
    #####:  103:static int m_asin(bvm *vm)
        -:  104:{
    #####:  105:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:  106:        breal x = be_toreal(vm, 1);
    #####:  107:        be_pushreal(vm, mathfunc(asin)(x));
        -:  108:    } else {
    #####:  109:        be_pushreal(vm, (breal)0.0);
        -:  110:    }
    #####:  111:    be_return(vm);
        -:  112:}
        -:  113:
    #####:  114:static int m_acos(bvm *vm)
        -:  115:{
    #####:  116:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:  117:        breal x = be_toreal(vm, 1);
    #####:  118:        be_pushreal(vm, mathfunc(acos)(x));
        -:  119:    } else {
    #####:  120:        be_pushreal(vm, (breal)0.0);
        -:  121:    }
    #####:  122:    be_return(vm);
        -:  123:}
        -:  124:
    #####:  125:static int m_atan(bvm *vm)
        -:  126:{
    #####:  127:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:  128:        breal x = be_toreal(vm, 1);
    #####:  129:        be_pushreal(vm, mathfunc(atan)(x));
        -:  130:    } else {
    #####:  131:        be_pushreal(vm, (breal)0.0);
        -:  132:    }
    #####:  133:    be_return(vm);
        -:  134:}
        -:  135:
    #####:  136:static int m_atan2(bvm *vm)
        -:  137:{
    #####:  138:    if (be_top(vm) >= 2 && be_isnumber(vm, 1) && be_isnumber(vm, 2)) {
    #####:  139:        breal y = be_toreal(vm, 1);
    #####:  140:        breal x = be_toreal(vm, 2);
    #####:  141:        be_pushreal(vm, mathfunc(atan2)(y, x));
        -:  142:    } else {
    #####:  143:        be_pushreal(vm, (breal)0.0);
        -:  144:    }
    #####:  145:    be_return(vm);
        -:  146:}
        -:  147:
    #####:  148:static int m_sinh(bvm *vm)
        -:  149:{
    #####:  150:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:  151:        breal x = be_toreal(vm, 1);
    #####:  152:        be_pushreal(vm, mathfunc(sinh)(x));
        -:  153:    } else {
    #####:  154:        be_pushreal(vm, (breal)0.0);
        -:  155:    }
    #####:  156:    be_return(vm);
        -:  157:}
        -:  158:
    #####:  159:static int m_cosh(bvm *vm)
        -:  160:{
    #####:  161:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:  162:        breal x = be_toreal(vm, 1);
    #####:  163:        be_pushreal(vm, mathfunc(cosh)(x));
        -:  164:    } else {
    #####:  165:        be_pushreal(vm, (breal)0.0);
        -:  166:    }
    #####:  167:    be_return(vm);
        -:  168:}
        -:  169:
    #####:  170:static int m_tanh(bvm *vm)
        -:  171:{
    #####:  172:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:  173:        breal x = be_toreal(vm, 1);
    #####:  174:        be_pushreal(vm, mathfunc(tanh)(x));
        -:  175:    } else {
    #####:  176:        be_pushreal(vm, (breal)0.0);
        -:  177:    }
    #####:  178:    be_return(vm);
        -:  179:}
        -:  180:
    #####:  181:static int m_sqrt(bvm *vm)
        -:  182:{
    #####:  183:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:  184:        breal x = be_toreal(vm, 1);
    #####:  185:        be_pushreal(vm, mathfunc(sqrt)(x));
        -:  186:    } else {
    #####:  187:        be_pushreal(vm, (breal)0.0);
        -:  188:    }
    #####:  189:    be_return(vm);
        -:  190:}
        -:  191:
    #####:  192:static int m_exp(bvm *vm)
        -:  193:{
    #####:  194:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:  195:        breal x = be_toreal(vm, 1);
    #####:  196:        be_pushreal(vm, mathfunc(exp)(x));
        -:  197:    } else {
    #####:  198:        be_pushreal(vm, (breal)0.0);
        -:  199:    }
    #####:  200:    be_return(vm);
        -:  201:}
        -:  202:
    #####:  203:static int m_log(bvm *vm)
        -:  204:{
    #####:  205:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:  206:        breal x = be_toreal(vm, 1);
    #####:  207:        be_pushreal(vm, mathfunc(log)(x));
        -:  208:    } else {
    #####:  209:        be_pushreal(vm, (breal)0.0);
        -:  210:    }
    #####:  211:    be_return(vm);
        -:  212:}
        -:  213:
    #####:  214:static int m_log10(bvm *vm)
        -:  215:{
    #####:  216:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:  217:        breal x = be_toreal(vm, 1);
    #####:  218:        be_pushreal(vm, mathfunc(log10)(x));
        -:  219:    } else {
    #####:  220:        be_pushreal(vm, (breal)0.0);
        -:  221:    }
    #####:  222:    be_return(vm);
        -:  223:}
        -:  224:
    #####:  225:static int m_deg(bvm *vm)
        -:  226:{
    #####:  227:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:  228:        breal x = be_toreal(vm, 1);
    #####:  229:        be_pushreal(vm, x * (breal)(180.0 / M_PI));
        -:  230:    } else {
    #####:  231:        be_pushreal(vm, (breal)0.0);
        -:  232:    }
    #####:  233:    be_return(vm);
        -:  234:}
        -:  235:
    #####:  236:static int m_rad(bvm *vm)
        -:  237:{
    #####:  238:    if (be_top(vm) >= 1 && be_isnumber(vm, 1)) {
    #####:  239:        breal x = be_toreal(vm, 1);
    #####:  240:        be_pushreal(vm, x * (breal)(M_PI / 180.0));
        -:  241:    } else {
    #####:  242:        be_pushreal(vm, (breal)0.0);
        -:  243:    }
    #####:  244:    be_return(vm);
        -:  245:}
        -:  246:
    #####:  247:static int m_pow(bvm *vm)
        -:  248:{
    #####:  249:    if (be_top(vm) >= 2 && be_isnumber(vm, 1) && be_isnumber(vm, 2)) {
    #####:  250:        breal x = be_toreal(vm, 1);
    #####:  251:        breal y = be_toreal(vm, 2);
    #####:  252:        be_pushreal(vm, mathfunc(pow)(x, y));
        -:  253:    } else {
    #####:  254:        be_pushreal(vm, (breal)0.0);
        -:  255:    }
    #####:  256:    be_return(vm);
        -:  257:}
        -:  258:
    #####:  259:static int m_srand(bvm *vm)
        -:  260:{
    #####:  261:    if (be_top(vm) >= 1 && be_isint(vm, 1)) {
    #####:  262:        srand((unsigned int)be_toint(vm, 1));
        -:  263:    }
    #####:  264:    be_return_nil(vm);
        -:  265:}
        -:  266:
    #####:  267:static int m_rand(bvm *vm)
        -:  268:{
    #####:  269:    be_pushint(vm, rand());
    #####:  270:    be_return(vm);
        -:  271:}
        -:  272:
        -:  273:#if !BE_USE_PRECOMPILED_OBJECT
        -:  274:be_native_module_attr_table(math) {
        -:  275:    be_native_module_function("abs", m_abs),
        -:  276:    be_native_module_function("ceil", m_ceil),
        -:  277:    be_native_module_function("floor", m_floor),
        -:  278:    be_native_module_function("sin", m_sin),
        -:  279:    be_native_module_function("cos", m_cos),
        -:  280:    be_native_module_function("tan", m_tan),
        -:  281:    be_native_module_function("asin", m_asin),
        -:  282:    be_native_module_function("acos", m_acos),
        -:  283:    be_native_module_function("atan", m_atan),
        -:  284:    be_native_module_function("atan2", m_atan2),
        -:  285:    be_native_module_function("sinh", m_sinh),
        -:  286:    be_native_module_function("cosh", m_cosh),
        -:  287:    be_native_module_function("tanh", m_tanh),
        -:  288:    be_native_module_function("sqrt", m_sqrt),
        -:  289:    be_native_module_function("exp", m_exp),
        -:  290:    be_native_module_function("log", m_log),
        -:  291:    be_native_module_function("log10", m_log10),
        -:  292:    be_native_module_function("deg", m_deg),
        -:  293:    be_native_module_function("rad", m_rad),
        -:  294:    be_native_module_function("pow", m_pow),
        -:  295:    be_native_module_function("srand", m_srand),
        -:  296:    be_native_module_function("rand", m_rand),
        -:  297:    be_native_module_real("pi", M_PI),
        -:  298:    be_native_module_int("imax", M_IMAX),
        -:  299:    be_native_module_int("imin", M_IMIN),
        -:  300:};
        -:  301:
        -:  302:be_define_native_module(math, NULL);
        -:  303:#else
        -:  304:/* @const_object_info_begin
        -:  305:module math (scope: global, depend: BE_USE_MATH_MODULE) {
        -:  306:    abs, func(m_abs)
        -:  307:    ceil, func(m_ceil)
        -:  308:    floor, func(m_floor)
        -:  309:    sin, func(m_sin)
        -:  310:    cos, func(m_cos)
        -:  311:    tan, func(m_tan)
        -:  312:    asin, func(m_asin)
        -:  313:    acos, func(m_acos)
        -:  314:    atan, func(m_atan)
        -:  315:    atan2, func(m_atan2)
        -:  316:    sinh, func(m_sinh)
        -:  317:    cosh, func(m_cosh)
        -:  318:    tanh, func(m_tanh)
        -:  319:    sqrt, func(m_sqrt)
        -:  320:    exp, func(m_exp)
        -:  321:    log, func(m_log)
        -:  322:    log10, func(m_log10)
        -:  323:    deg, func(m_deg)
        -:  324:    rad, func(m_rad)
        -:  325:    pow, func(m_pow)
        -:  326:    srand, func(m_srand)
        -:  327:    rand, func(m_rand)
        -:  328:    pi, real(M_PI)
        -:  329:    imax, int(M_IMAX)
        -:  330:    imin, int(M_IMIN)
        -:  331:}
        -:  332:@const_object_info_end */
        -:  333:#include "../generate/be_fixed_math.h"
        -:  334:#endif
        -:  335:
        -:  336:#endif /* BE_USE_MATH_MODULE */
