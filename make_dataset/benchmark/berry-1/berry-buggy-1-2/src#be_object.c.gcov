        -:    0:Source:src/be_object.c
        -:    0:Graph:./src/be_object.gcno
        -:    0:Data:./src/be_object.gcda
        -:    0:Runs:1
        -:    1:/********************************************************************
        -:    2:** Copyright (c) 2018-2020 Guan Wenliang
        -:    3:** This file is part of the Berry default interpreter.
        -:    4:** skiars@qq.com, https://github.com/Skiars/berry
        -:    5:** See Copyright Notice in the LICENSE file or at
        -:    6:** https://github.com/Skiars/berry/blob/master/LICENSE
        -:    7:********************************************************************/
        -:    8:#include "be_object.h"
        -:    9:#include "be_exec.h"
        -:   10:#include "be_mem.h"
        -:   11:#include "be_gc.h"
        -:   12:#include "be_vm.h"
        -:   13:
        -:   14:#define cast_comobj(o)      gc_cast(o, BE_COMOBJ, bcommomobj)
        -:   15:
    #####:   16:const char* be_vtype2str(bvalue *v)
        -:   17:{
    #####:   18:    switch(var_type(v)) {
    #####:   19:    case BE_NIL: return "nil";
    #####:   20:    case BE_INT: return "int";
    #####:   21:    case BE_REAL: return "real";
    #####:   22:    case BE_BOOL: return "bool";
    #####:   23:    case BE_CLOSURE: case BE_NTVCLOS:
    #####:   24:    case BE_NTVFUNC: return "function";
    #####:   25:    case BE_PROTO: return "proto";
    #####:   26:    case BE_CLASS: return "class";
    #####:   27:    case BE_STRING: return "string";
    #####:   28:    case BE_LIST: return "list";
    #####:   29:    case BE_MAP: return "map";
    #####:   30:    case BE_INSTANCE: return "instance";
    #####:   31:    case BE_MODULE: return "module";
    #####:   32:    case BE_INDEX: return "var";
    #####:   33:    default: return "invalid type";
        -:   34:    }
        -:   35:}
        -:   36:
       22:   37:bvalue* be_indexof(bvm *vm, int idx)
        -:   38:{
       22:   39:    if (idx > 0) { /* absolute index */
        -:   40:        be_assert(vm->reg + idx <= vm->top);
       16:   41:        return vm->reg + idx - 1;
        -:   42:    }
        -:   43:    /* relative index */
        -:   44:    be_assert(vm->top + idx >= vm->reg);
        6:   45:    return vm->top + idx;
        -:   46:}
        -:   47:
    #####:   48:BERRY_API void be_newcomobj(bvm *vm, void *data, bntvfunc destory)
        -:   49:{
        -:   50:    bcommomobj *obj;
    #####:   51:    bgcobject *gco = be_gcnew(vm, BE_COMOBJ, bcommomobj);
    #####:   52:    if ((obj = cast_comobj(gco)) != NULL) {
    #####:   53:        bvalue* top = be_incrtop(vm);
    #####:   54:        obj->data = data;
    #####:   55:        obj->destory = destory;
    #####:   56:        var_setobj(top, BE_COMOBJ, obj);
        -:   57:    }
    #####:   58:}
        -:   59:
    #####:   60:void be_commonobj_delete(bvm *vm, bgcobject *obj)
        -:   61:{
    #####:   62:    bcommomobj *co = cast_comobj(obj);
    #####:   63:    if (co) {
    #####:   64:        if (co->destory && co->data) {
    #####:   65:            be_pushntvfunction(vm, co->destory);
    #####:   66:            be_pushcomptr(vm, co->data);
    #####:   67:            be_call(vm, 1);
    #####:   68:            be_pop(vm, 2);
        -:   69:        }
    #####:   70:        be_free(vm, co, sizeof(bcommomobj));
        -:   71:    }
    #####:   72:}
