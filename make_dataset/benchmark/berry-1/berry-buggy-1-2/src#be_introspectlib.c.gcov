        -:    0:Source:src/be_introspectlib.c
        -:    0:Graph:./src/be_introspectlib.gcno
        -:    0:Data:./src/be_introspectlib.gcda
        -:    0:Runs:1
        -:    1:/********************************************************************
        -:    2:** Copyright (c) 2018-2020 Guan Wenliang
        -:    3:** This file is part of the Berry default interpreter.
        -:    4:** skiars@qq.com, https://github.com/Skiars/berry
        -:    5:** See Copyright Notice in the LICENSE file or at
        -:    6:** https://github.com/Skiars/berry/blob/master/LICENSE
        -:    7:********************************************************************/
        -:    8:#include "be_object.h"
        -:    9:#include "be_module.h"
        -:   10:#include "be_string.h"
        -:   11:#include "be_vector.h"
        -:   12:#include "be_class.h"
        -:   13:#include "be_debug.h"
        -:   14:#include "be_map.h"
        -:   15:#include "be_vm.h"
        -:   16:#include <string.h>
        -:   17:
        -:   18:#if BE_USE_INTROSPECT_MODULE
        -:   19:
        -:   20:#define global(vm)      ((vm)->gbldesc.global)
        -:   21:#define builtin(vm)     ((vm)->gbldesc.builtin)
        -:   22:
    #####:   23:static void dump_map_keys(bvm *vm, bmap *map)
        -:   24:{
    #####:   25:    if (!map) { return; }   /* protect agains potential null pointer */
        -:   26:    bmapnode *node;
    #####:   27:    bmapiter iter = be_map_iter();
    #####:   28:    while ((node = be_map_next(map, &iter)) != NULL) {
    #####:   29:        if (var_isstr(&node->key)) {
    #####:   30:            bstring *s = var_tostr(&node->key);
    #####:   31:            be_pushstring(vm, str(s));
    #####:   32:            be_data_push(vm, -2);
    #####:   33:            be_pop(vm, 1);
        -:   34:        }
        -:   35:    }
        -:   36:}
        -:   37:
    #####:   38:static int m_attrlist(bvm *vm)
        -:   39:{
    #####:   40:    int top = be_top(vm);
    #####:   41:    be_newobject(vm, "list");
    #####:   42:    if (top >= 1) {
    #####:   43:        bvalue *v = be_indexof(vm, 1);
    #####:   44:        void *obj = var_toobj(v);
    #####:   45:        switch (var_type(v)) {
    #####:   46:        case BE_NIL: dump_map_keys(vm, global(vm).vtab); break;
    #####:   47:        case BE_MODULE: dump_map_keys(vm, ((bmodule*)obj)->table); break;
    #####:   48:        case BE_CLASS: dump_map_keys(vm, ((bclass*)obj)->members); break;
    #####:   49:        case BE_INSTANCE: dump_map_keys(vm, ((binstance*)obj)->_class->members); break;
    #####:   50:        default: break;
        -:   51:        }
        -:   52:    } else {    /* if no parameter, then dump globals */
    #####:   53:        dump_map_keys(vm, global(vm).vtab);
        -:   54:    }
    #####:   55:    be_pop(vm, 1);
    #####:   56:    be_return(vm);
        -:   57:}
        -:   58:
    #####:   59:static int m_findmember(bvm *vm)
        -:   60:{
    #####:   61:    int top = be_top(vm);
    #####:   62:    if (top >= 2 && (be_isinstance(vm, 1) || be_ismodule(vm, 1) || be_isclass(vm, 1)) && be_isstring(vm, 2)) {
    #####:   63:        be_getmember(vm, 1, be_tostring(vm, 2));
    #####:   64:        be_return(vm);
        -:   65:    }
    #####:   66:    be_return_nil(vm);
        -:   67:}
        -:   68:
    #####:   69:static int m_setmember(bvm *vm)
        -:   70:{
    #####:   71:    int top = be_top(vm);
    #####:   72:    if (top >= 3 && (be_isinstance(vm, 1) || be_ismodule(vm, 1)) && be_isstring(vm, 2)) {
    #####:   73:        be_setmember(vm, 1, be_tostring(vm, 2));
    #####:   74:        be_return(vm);
        -:   75:    }
    #####:   76:    be_return_nil(vm);
        -:   77:}
        -:   78:
        -:   79:#if !BE_USE_PRECOMPILED_OBJECT
        -:   80:be_native_module_attr_table(introspect) {
        -:   81:    be_native_module_function("members", m_attrlist),
        -:   82:
        -:   83:    be_native_module_function("get", m_findmember),
        -:   84:    be_native_module_function("set", m_setmember),
        -:   85:};
        -:   86:
        -:   87:be_define_native_module(introspect, NULL);
        -:   88:#else
        -:   89:/* @const_object_info_begin
        -:   90:module introspect (scope: global, depend: BE_USE_INTROSPECT_MODULE) {
        -:   91:    members, func(m_attrlist)
        -:   92:
        -:   93:    get, func(m_findmember)
        -:   94:    set, func(m_setmember)
        -:   95:}
        -:   96:@const_object_info_end */
        -:   97:#include "../generate/be_fixed_introspect.h"
        -:   98:#endif
        -:   99:
        -:  100:#endif /* BE_USE_INTROSPECT_MODULE */
