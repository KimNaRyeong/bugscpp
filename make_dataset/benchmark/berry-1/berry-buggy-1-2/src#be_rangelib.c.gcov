        -:    0:Source:src/be_rangelib.c
        -:    0:Graph:./src/be_rangelib.gcno
        -:    0:Data:./src/be_rangelib.gcda
        -:    0:Runs:1
        -:    1:/********************************************************************
        -:    2:** Copyright (c) 2018-2020 Guan Wenliang
        -:    3:** This file is part of the Berry default interpreter.
        -:    4:** skiars@qq.com, https://github.com/Skiars/berry
        -:    5:** See Copyright Notice in the LICENSE file or at
        -:    6:** https://github.com/Skiars/berry/blob/master/LICENSE
        -:    7:********************************************************************/
        -:    8:#include "be_object.h"
        -:    9:#include "be_func.h"
        -:   10:#include "be_vm.h"
        -:   11:
    #####:   12:static int m_init(bvm *vm)
        -:   13:{
    #####:   14:    be_pushvalue(vm, 2);
    #####:   15:    be_setmember(vm, 1, "__lower__");
    #####:   16:    be_pop(vm, 1);
    #####:   17:    be_pushvalue(vm, 3);
    #####:   18:    be_setmember(vm, 1, "__upper__");
    #####:   19:    be_return_nil(vm);
        -:   20:}
        -:   21:
    #####:   22:static int m_tostring(bvm *vm)
        -:   23:{
    #####:   24:    be_pushstring(vm, "(");
    #####:   25:    be_getmember(vm, 1, "__lower__");
    #####:   26:    be_tostring(vm, -1);
    #####:   27:    be_strconcat(vm, -2);
    #####:   28:    be_pop(vm, 1);
    #####:   29:    be_pushstring(vm, "..");
    #####:   30:    be_strconcat(vm, -2);
    #####:   31:    be_pop(vm, 1);
    #####:   32:    be_getmember(vm, 1, "__upper__");
    #####:   33:    be_tostring(vm, -1);
    #####:   34:    be_strconcat(vm, -2);
    #####:   35:    be_pop(vm, 1);
    #####:   36:    be_pushstring(vm, ")");
    #####:   37:    be_strconcat(vm, -2);
    #####:   38:    be_pop(vm, 1);
    #####:   39:    be_return(vm);
        -:   40:}
        -:   41:
    #####:   42:static int m_upper(bvm *vm)
        -:   43:{
    #####:   44:    be_getmember(vm, 1, "__upper__");
    #####:   45:    be_return(vm);
        -:   46:}
        -:   47:
    #####:   48:static int m_lower(bvm *vm)
        -:   49:{
    #####:   50:    be_getmember(vm, 1, "__lower__");
    #####:   51:    be_return(vm);
        -:   52:}
        -:   53:
    #####:   54:static int m_setrange(bvm *vm)
        -:   55:{
    #####:   56:    be_pushvalue(vm, 2);
    #####:   57:    be_setmember(vm, 1, "__lower__");
    #####:   58:    be_pop(vm, 1);
    #####:   59:    be_pushvalue(vm, 3);
    #####:   60:    be_setmember(vm, 1, "__upper__");
    #####:   61:    be_return_nil(vm);
        -:   62:}
        -:   63:
    #####:   64:static int iter_closure(bvm *vm)
        -:   65:{
        -:   66:    /* for better performance, we operate the upvalues
        -:   67:     * directly without using by the stack. */
    #####:   68:    bntvclos *func = var_toobj(vm->cf->func);
    #####:   69:    bvalue *uv0 = be_ntvclos_upval(func, 0)->value;
    #####:   70:    bvalue *uv1 = be_ntvclos_upval(func, 1)->value;
    #####:   71:    bint lower = var_toint(uv0); /* upvalue[0] => lower */
    #####:   72:    bint upper = var_toint(uv1); /* upvalue[1] => upper */
    #####:   73:    if (lower > upper) {
    #####:   74:        be_stop_iteration(vm);
        -:   75:    }
    #####:   76:    var_toint(uv0) = lower + 1; /* set upvale[0] */
    #####:   77:    be_pushint(vm, lower); /* push the return value */
    #####:   78:    be_return(vm);
        -:   79:}
        -:   80:
    #####:   81:static int m_iter(bvm *vm)
        -:   82:{
    #####:   83:    be_pushntvclosure(vm, iter_closure, 2);
    #####:   84:    be_getmember(vm, 1, "__lower__");
    #####:   85:    be_setupval(vm, -2, 0);
    #####:   86:    be_pop(vm, 1);
    #####:   87:    be_getmember(vm, 1, "__upper__");
    #####:   88:    be_setupval(vm, -2, 1);
    #####:   89:    be_pop(vm, 1);
    #####:   90:    be_return(vm);
        -:   91:}
        -:   92:
        -:   93:#if !BE_USE_PRECOMPILED_OBJECT
        -:   94:void be_load_rangelib(bvm *vm)
        -:   95:{
        -:   96:    static const bnfuncinfo members[] = {
        -:   97:        { "__lower__", NULL },
        -:   98:        { "__upper__", NULL },
        -:   99:        { "init", m_init },
        -:  100:        { "tostring", m_tostring },
        -:  101:        { "lower", m_lower },
        -:  102:        { "upper", m_upper },
        -:  103:        { "setrange", m_setrange },
        -:  104:        { "iter", m_iter },
        -:  105:        { NULL, NULL }
        -:  106:    };
        -:  107:    be_regclass(vm, "range", members);
        -:  108:}
        -:  109:#else
        -:  110:/* @const_object_info_begin
        -:  111:class be_class_range (scope: global, name: range) {
        -:  112:    __lower__, var
        -:  113:    __upper__, var
        -:  114:    init, func(m_init)
        -:  115:    tostring, func(m_tostring)
        -:  116:    lower, func(m_lower)
        -:  117:    upper, func(m_upper)
        -:  118:    setrange, func(m_setrange)
        -:  119:    iter, func(m_iter)
        -:  120:}
        -:  121:@const_object_info_end */
        -:  122:#include "../generate/be_fixed_be_class_range.h"
        -:  123:#endif
