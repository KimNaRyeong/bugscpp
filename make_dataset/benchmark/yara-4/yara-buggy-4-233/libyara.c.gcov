        -:    0:Source:libyara.c
        -:    0:Graph:/home/workspace/libyara/libyara.gcno
        -:    0:Data:/home/workspace/libyara/libyara.gcda
        -:    0:Runs:9
        -:    1:/*
        -:    2:Copyright (c) 2013. The YARA Authors. All Rights Reserved.
        -:    3:
        -:    4:Redistribution and use in source and binary forms, with or without modification,
        -:    5:are permitted provided that the following conditions are met:
        -:    6:
        -:    7:1. Redistributions of source code must retain the above copyright notice, this
        -:    8:list of conditions and the following disclaimer.
        -:    9:
        -:   10:2. Redistributions in binary form must reproduce the above copyright notice,
        -:   11:this list of conditions and the following disclaimer in the documentation and/or
        -:   12:other materials provided with the distribution.
        -:   13:
        -:   14:3. Neither the name of the copyright holder nor the names of its contributors
        -:   15:may be used to endorse or promote products derived from this software without
        -:   16:specific prior written permission.
        -:   17:
        -:   18:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:   19:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   20:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   21:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:   22:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   23:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   24:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:   25:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   26:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   27:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   28:*/
        -:   29:
        -:   30:#if defined(JEMALLOC)
        -:   31:#include <jemalloc/jemalloc.h>
        -:   32:#endif
        -:   33:
        -:   34:#include <string.h>
        -:   35:#include <stdio.h>
        -:   36:#include <ctype.h>
        -:   37:
        -:   38:#include <yara/globals.h>
        -:   39:#include <yara/error.h>
        -:   40:#include <yara/re.h>
        -:   41:#include <yara/modules.h>
        -:   42:#include <yara/mem.h>
        -:   43:#include <yara/threading.h>
        -:   44:
        -:   45:#include "crypto.h"
        -:   46:
        -:   47:#if defined(_WIN32) || defined(__CYGWIN__)
        -:   48:#if !defined(_MSC_VER) || (defined(_MSC_VER) && (_MSC_VER < 1900))
        -:   49:#define snprintf _snprintf
        -:   50:#endif
        -:   51:#endif
        -:   52:
        -:   53:
        -:   54:YR_THREAD_STORAGE_KEY yr_tidx_key;
        -:   55:YR_THREAD_STORAGE_KEY yr_recovery_state_key;
        -:   56:
        -:   57:
        -:   58:static int init_count = 0;
        -:   59:
        -:   60:static struct yr_config_var
        -:   61:{
        -:   62:  union
        -:   63:  {
        -:   64:    size_t   sz;
        -:   65:    uint32_t ui32;
        -:   66:    uint64_t ui64;
        -:   67:    char*    str;
        -:   68:  };
        -:   69:
        -:   70:} yr_cfgs[YR_CONFIG_LAST];
        -:   71:
        -:   72:
        -:   73:// Global variables. See globals.h for their descriptions.
        -:   74:
        -:   75:char yr_lowercase[256];
        -:   76:char yr_altercase[256];
        -:   77:
        -:   78:
        -:   79:#if defined(HAVE_LIBCRYPTO) && OPENSSL_VERSION_NUMBER < 0x10100000L
        -:   80:
        -:   81:// The OpenSSL library before version 1.1 requires some locks in order
        -:   82:// to be thread-safe. These locks are initialized in yr_initialize
        -:   83:// function.
        -:   84:
        -:   85:static YR_MUTEX *openssl_locks;
        -:   86:
        -:   87:
        -:   88:static void _thread_id(CRYPTO_THREADID *id)
        -:   89:{
        -:   90:  CRYPTO_THREADID_set_numeric(id, (unsigned long) yr_current_thread_id());
        -:   91:}
        -:   92:
        -:   93:
        -:   94:static void _locking_function(
        -:   95:    int mode,
        -:   96:    int n,
        -:   97:    const char *file,
        -:   98:    int line)
        -:   99:{
        -:  100:  if (mode & CRYPTO_LOCK)
        -:  101:    yr_mutex_lock(&openssl_locks[n]);
        -:  102:  else
        -:  103:    yr_mutex_unlock(&openssl_locks[n]);
        -:  104:}
        -:  105:
        -:  106:#endif
        -:  107:
        -:  108://
        -:  109:// yr_initialize
        -:  110://
        -:  111:// Should be called by main thread before using any other
        -:  112:// function from libyara.
        -:  113://
        -:  114:
        7:  115:YR_API int yr_initialize(void)
        -:  116:{
        7:  117:  uint32_t def_stack_size = DEFAULT_STACK_SIZE;
        7:  118:  uint32_t def_max_strings_per_rule = DEFAULT_MAX_STRINGS_PER_RULE;
        7:  119:  uint32_t def_max_match_data = DEFAULT_MAX_MATCH_DATA;
        -:  120:
        -:  121:  int i;
        -:  122:
        7:  123:  init_count++;
        -:  124:
        7:  125:  if (init_count > 1)
    #####:  126:    return ERROR_SUCCESS;
        -:  127:
        -:  128:  // Initialize random number generator, as it is used for generating object
        -:  129:  // canaries.
        7:  130:  srand((unsigned) time(NULL));
        -:  131:
     1799:  132:  for (i = 0; i < 256; i++)
        -:  133:  {
     1792:  134:    if (i >= 'a' && i <= 'z')
      182:  135:      yr_altercase[i] = i - 32;
     1610:  136:    else if (i >= 'A' && i <= 'Z')
      182:  137:      yr_altercase[i] = i + 32;
        -:  138:    else
     1428:  139:      yr_altercase[i] = i;
        -:  140:
     1792:  141:    yr_lowercase[i] = tolower(i);
        -:  142:  }
        -:  143:
       7*:  144:  FAIL_ON_ERROR(yr_heap_alloc());
       7*:  145:  FAIL_ON_ERROR(yr_thread_storage_create(&yr_tidx_key));
       7*:  146:  FAIL_ON_ERROR(yr_thread_storage_create(&yr_recovery_state_key));
        -:  147:
        -:  148:  #if defined HAVE_LIBCRYPTO && OPENSSL_VERSION_NUMBER < 0x10100000L
        -:  149:
        -:  150:  openssl_locks = (YR_MUTEX*) OPENSSL_malloc(
        -:  151:      CRYPTO_num_locks() * sizeof(YR_MUTEX));
        -:  152:
        -:  153:  for (i = 0; i < CRYPTO_num_locks(); i++)
        -:  154:    yr_mutex_create(&openssl_locks[i]);
        -:  155:
        -:  156:  CRYPTO_THREADID_set_callback(_thread_id);
        -:  157:  CRYPTO_set_locking_callback(_locking_function);
        -:  158:
        -:  159:  #elif defined(HAVE_WINCRYPT_H)
        -:  160:
        -:  161:  if (!CryptAcquireContext(&yr_cryptprov, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
        -:  162:    return ERROR_INTERNAL_FATAL_ERROR;
        -:  163:  }
        -:  164:
        -:  165:  #elif defined(HAVE_COMMON_CRYPTO)
        -:  166:
        -:  167:  ...
        -:  168:
        -:  169:  #endif
        -:  170:
       7*:  171:  FAIL_ON_ERROR(yr_modules_initialize());
        -:  172:
        -:  173:  // Initialize default configuration options
       7*:  174:  FAIL_ON_ERROR(yr_set_configuration(
        -:  175:      YR_CONFIG_STACK_SIZE, &def_stack_size));
        -:  176:
       7*:  177:  FAIL_ON_ERROR(yr_set_configuration(
        -:  178:      YR_CONFIG_MAX_STRINGS_PER_RULE, &def_max_strings_per_rule));
        -:  179:
       7*:  180:  FAIL_ON_ERROR(yr_set_configuration(
        -:  181:      YR_CONFIG_MAX_MATCH_DATA, &def_max_match_data));
        -:  182:
        7:  183:  return ERROR_SUCCESS;
        -:  184:}
        -:  185:
        -:  186:
        -:  187://
        -:  188:// yr_finalize_thread
        -:  189://
        -:  190:// This function is deprecated, it's maintained only for backward compatibility
        -:  191:// with programs that already use it. Calling yr_finalize_thread from each
        -:  192:// thread using libyara is not required anymore.
        -:  193:
    #####:  194:YR_DEPRECATED_API void yr_finalize_thread(void)
        -:  195:{
    #####:  196:}
        -:  197:
        -:  198:
        -:  199://
        -:  200:// yr_finalize
        -:  201://
        -:  202:// Should be called by main thread before exiting.
        -:  203://
        -:  204:
        3:  205:YR_API int yr_finalize(void)
        -:  206:{
        -:  207:  #if defined HAVE_LIBCRYPTO && OPENSSL_VERSION_NUMBER < 0x10100000L
        -:  208:  int i;
        -:  209:  #endif
        -:  210:
        -:  211:  // yr_finalize shouldn't be called without calling yr_initialize first
        -:  212:
        3:  213:  if (init_count == 0)
    #####:  214:    return ERROR_INTERNAL_FATAL_ERROR;
        -:  215:
        3:  216:  init_count--;
        -:  217:
        3:  218:  if (init_count > 0)
    #####:  219:    return ERROR_SUCCESS;
        -:  220:
        -:  221:  #if defined HAVE_LIBCRYPTO && OPENSSL_VERSION_NUMBER < 0x10100000L
        -:  222:
        -:  223:  for (i = 0; i < CRYPTO_num_locks(); i ++)
        -:  224:    yr_mutex_destroy(&openssl_locks[i]);
        -:  225:
        -:  226:  OPENSSL_free(openssl_locks);
        -:  227:  CRYPTO_THREADID_set_callback(NULL);
        -:  228:  CRYPTO_set_locking_callback(NULL);
        -:  229:
        -:  230:  #elif defined(HAVE_WINCRYPT_H)
        -:  231:
        -:  232:  CryptReleaseContext(yr_cryptprov, 0);
        -:  233:
        -:  234:  #endif
        -:  235:
       3*:  236:  FAIL_ON_ERROR(yr_thread_storage_destroy(&yr_tidx_key));
       3*:  237:  FAIL_ON_ERROR(yr_thread_storage_destroy(&yr_recovery_state_key));
       3*:  238:  FAIL_ON_ERROR(yr_modules_finalize());
       3*:  239:  FAIL_ON_ERROR(yr_heap_free());
        -:  240:
        -:  241:  #if defined(JEMALLOC)
        -:  242:  malloc_stats_print(NULL, NULL, NULL);
        -:  243:  mallctl("prof.dump", NULL, NULL, NULL, 0);
        -:  244:  #endif
        -:  245:
        3:  246:  return ERROR_SUCCESS;
        -:  247:}
        -:  248:
        -:  249://
        -:  250:// yr_set_tidx
        -:  251://
        -:  252:// Set the thread index (tidx) for the current thread. The tidx is the index
        -:  253:// that will be used by the thread to access thread-specific data stored in
        -:  254:// YR_RULES structure.
        -:  255://
        -:  256:// Args:
        -:  257://    int tidx   - The zero-based tidx that will be associated to the current
        -:  258://                 thread.
        -:  259://
        -:  260:
      560:  261:YR_API void yr_set_tidx(int tidx)
        -:  262:{
      560:  263:  yr_thread_storage_set_value(&yr_tidx_key, (void*) (size_t) (tidx + 1));
      560:  264:}
        -:  265:
        -:  266:
        -:  267://
        -:  268:// yr_get_tidx
        -:  269://
        -:  270:// Get the thread index (tidx) for the current thread.
        -:  271://
        -:  272:// Returns:
        -:  273://    The tidx for the current thread or -1 if the current thread doesn't
        -:  274://    have any tidx associated.
        -:  275://
        -:  276:
     1020:  277:YR_API int yr_get_tidx(void)
        -:  278:{
     1020:  279:  return (int) (size_t) yr_thread_storage_get_value(&yr_tidx_key) - 1;
        -:  280:}
        -:  281:
        -:  282:
        -:  283://
        -:  284:// yr_set_configuration
        -:  285://
        -:  286:// Sets a configuration option. This function receives a configuration name,
        -:  287:// as defined by the YR_CONFIG_NAME enum, and a pointer to the value being
        -:  288:// set. The type of the value depends on the configuration name.
        -:  289://
        -:  290:// Args:
        -:  291://    YR_CONFIG_NAME  name   - Any of the values defined by the YR_CONFIG_NAME
        -:  292://                             enum. Posible values are:
        -:  293://
        -:  294://       YR_CONFIG_STACK_SIZE             data type: uint32_t
        -:  295://       YR_CONFIG_MAX_STRINGS_PER_RULE   data type: uint32_t
        -:  296://       YR_CONFIG_MAX_MATCH_DATA         data type: uint32_t
        -:  297://
        -:  298://    void *src              - Pointer to the value being set for the option.
        -:  299://
        -:  300:// Returns:
        -:  301://    An error code.
        -:  302:
       21:  303:YR_API int yr_set_configuration(
        -:  304:    YR_CONFIG_NAME name,
        -:  305:    void *src)
        -:  306:{
       21:  307:  if (src == NULL)
    #####:  308:    return ERROR_INTERNAL_FATAL_ERROR;
        -:  309:
       21:  310:  switch (name)
        -:  311:  { // lump all the cases using same types together in one cascade
       21:  312:    case YR_CONFIG_STACK_SIZE:
        -:  313:    case YR_CONFIG_MAX_STRINGS_PER_RULE:
        -:  314:    case YR_CONFIG_MAX_MATCH_DATA:
       21:  315:      yr_cfgs[name].ui32 = *(uint32_t*) src;
       21:  316:      break;
        -:  317:
    #####:  318:    default:
    #####:  319:      return ERROR_INTERNAL_FATAL_ERROR;
        -:  320:  }
        -:  321:
       21:  322:  return ERROR_SUCCESS;
        -:  323:}
        -:  324:
        -:  325:
      930:  326:YR_API int yr_get_configuration(
        -:  327:    YR_CONFIG_NAME name,
        -:  328:    void *dest)
        -:  329:{
      930:  330:  if (dest == NULL)
    #####:  331:    return ERROR_INTERNAL_FATAL_ERROR;
        -:  332:
      930:  333:  switch (name)
        -:  334:  { // lump all the cases using same types together in one cascade
      930:  335:    case YR_CONFIG_STACK_SIZE:
        -:  336:    case YR_CONFIG_MAX_STRINGS_PER_RULE:
        -:  337:    case YR_CONFIG_MAX_MATCH_DATA:
      930:  338:      *(uint32_t*) dest = yr_cfgs[name].ui32;
      930:  339:      break;
        -:  340:
    #####:  341:    default:
    #####:  342:      return ERROR_INTERNAL_FATAL_ERROR;
        -:  343:  }
        -:  344:
      930:  345:  return ERROR_SUCCESS;
        -:  346:}
