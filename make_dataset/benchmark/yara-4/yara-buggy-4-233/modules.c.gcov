        -:    0:Source:modules.c
        -:    0:Graph:/home/workspace/libyara/modules.gcno
        -:    0:Data:/home/workspace/libyara/modules.gcda
        -:    0:Runs:9
        -:    1:/*
        -:    2:Copyright (c) 2014. The YARA Authors. All Rights Reserved.
        -:    3:
        -:    4:Redistribution and use in source and binary forms, with or without modification,
        -:    5:are permitted provided that the following conditions are met:
        -:    6:
        -:    7:1. Redistributions of source code must retain the above copyright notice, this
        -:    8:list of conditions and the following disclaimer.
        -:    9:
        -:   10:2. Redistributions in binary form must reproduce the above copyright notice,
        -:   11:this list of conditions and the following disclaimer in the documentation and/or
        -:   12:other materials provided with the distribution.
        -:   13:
        -:   14:3. Neither the name of the copyright holder nor the names of its contributors
        -:   15:may be used to endorse or promote products derived from this software without
        -:   16:specific prior written permission.
        -:   17:
        -:   18:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:   19:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   20:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   21:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:   22:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   23:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   24:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:   25:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   26:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   27:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   28:*/
        -:   29:
        -:   30:#include <yara/exec.h>
        -:   31:#include <yara/modules.h>
        -:   32:#include <yara/libyara.h>
        -:   33:
        -:   34:
        -:   35:#define MODULE(name) \
        -:   36:    int name ## __declarations(YR_OBJECT* module); \
        -:   37:    int name ## __load(YR_SCAN_CONTEXT* context, \
        -:   38:                       YR_OBJECT* module, \
        -:   39:                       void* module_data, \
        -:   40:                       size_t module_data_size); \
        -:   41:    int name ## __unload(YR_OBJECT* main_structure); \
        -:   42:    int name ## __initialize(YR_MODULE* module); \
        -:   43:    int name ## __finalize(YR_MODULE* module);
        -:   44:
        -:   45:
        -:   46:#include <modules/module_list>
        -:   47:
        -:   48:#undef MODULE
        -:   49:
        -:   50:
        -:   51:#define MODULE(name) \
        -:   52:    { \
        -:   53:      #name, \
        -:   54:      name##__declarations, \
        -:   55:      name##__load, \
        -:   56:      name##__unload, \
        -:   57:      name##__initialize, \
        -:   58:      name##__finalize \
        -:   59:    },
        -:   60:
        -:   61:YR_MODULE yr_modules_table[] =
        -:   62:{
        -:   63:  #include <modules/module_list>
        -:   64:};
        -:   65:
        -:   66:#undef MODULE
        -:   67:
        -:   68:
        7:   69:int yr_modules_initialize()
        -:   70:{
        -:   71:  int i;
        -:   72:
       49:   73:  for (i = 0; i < sizeof(yr_modules_table) / sizeof(YR_MODULE); i++)
        -:   74:  {
       42:   75:    int result = yr_modules_table[i].initialize(&yr_modules_table[i]);
        -:   76:
       42:   77:    if (result != ERROR_SUCCESS)
    #####:   78:      return result;
        -:   79:  }
        -:   80:
        7:   81:  return ERROR_SUCCESS;
        -:   82:}
        -:   83:
        -:   84:
        3:   85:int yr_modules_finalize()
        -:   86:{
        -:   87:  int i;
        -:   88:
       21:   89:  for (i = 0; i < sizeof(yr_modules_table) / sizeof(YR_MODULE); i++)
        -:   90:  {
       18:   91:    int result = yr_modules_table[i].finalize(&yr_modules_table[i]);
        -:   92:
       18:   93:    if (result != ERROR_SUCCESS)
    #####:   94:      return result;
        -:   95:  }
        -:   96:
        3:   97:  return ERROR_SUCCESS;
        -:   98:}
        -:   99:
        -:  100:
    #####:  101:int yr_modules_do_declarations(
        -:  102:    const char* module_name,
        -:  103:    YR_OBJECT* main_structure)
        -:  104:{
        -:  105:  int i;
        -:  106:
    #####:  107:  for (i = 0; i < sizeof(yr_modules_table) / sizeof(YR_MODULE); i++)
        -:  108:  {
    #####:  109:    if (strcmp(yr_modules_table[i].name, module_name) == 0)
    #####:  110:      return yr_modules_table[i].declarations(main_structure);
        -:  111:  }
        -:  112:
    #####:  113:  return ERROR_UNKNOWN_MODULE;
        -:  114:}
        -:  115:
        -:  116:
    #####:  117:int yr_modules_load(
        -:  118:    const char* module_name,
        -:  119:    YR_SCAN_CONTEXT* context)
        -:  120:{
        -:  121:  int i, result;
        -:  122:
        -:  123:  YR_MODULE_IMPORT mi;
        -:  124:
    #####:  125:  YR_OBJECT* module_structure = (YR_OBJECT*) yr_hash_table_lookup(
        -:  126:      context->objects_table,
        -:  127:      module_name,
        -:  128:      NULL);
        -:  129:
        -:  130:  // if module_structure != NULL, the module was already
        -:  131:  // loaded, return successfully without doing nothing.
        -:  132:
    #####:  133:  if (module_structure != NULL)
    #####:  134:    return ERROR_SUCCESS;
        -:  135:
        -:  136:  // not loaded yet
        -:  137:
    #####:  138:  FAIL_ON_ERROR(yr_object_create(
        -:  139:      OBJECT_TYPE_STRUCTURE,
        -:  140:      module_name,
        -:  141:      NULL,
        -:  142:      &module_structure));
        -:  143:
        -:  144:  // initialize canary for module's top-level structure, every other object
        -:  145:  // within the module inherits the same canary.
    #####:  146:  yr_object_set_canary(module_structure, context->canary);
        -:  147:
    #####:  148:  mi.module_name = module_name;
    #####:  149:  mi.module_data = NULL;
    #####:  150:  mi.module_data_size = 0;
        -:  151:
    #####:  152:  result = context->callback(
        -:  153:      CALLBACK_MSG_IMPORT_MODULE,
        -:  154:      &mi,
        -:  155:      context->user_data);
        -:  156:
    #####:  157:  if (result == CALLBACK_ERROR)
        -:  158:  {
    #####:  159:    yr_object_destroy(module_structure);
    #####:  160:    return ERROR_CALLBACK_ERROR;
        -:  161:  }
        -:  162:
    #####:  163:  FAIL_ON_ERROR_WITH_CLEANUP(
        -:  164:      yr_modules_do_declarations(module_name, module_structure),
        -:  165:      yr_object_destroy(module_structure));
        -:  166:
    #####:  167:  FAIL_ON_ERROR_WITH_CLEANUP(
        -:  168:      yr_hash_table_add(
        -:  169:          context->objects_table,
        -:  170:          module_name,
        -:  171:          NULL,
        -:  172:          module_structure),
        -:  173:      yr_object_destroy(module_structure));
        -:  174:
    #####:  175:  for (i = 0; i < sizeof(yr_modules_table) / sizeof(YR_MODULE); i++)
        -:  176:  {
    #####:  177:    if (strcmp(yr_modules_table[i].name, module_name) == 0)
        -:  178:    {
    #####:  179:      result = yr_modules_table[i].load(
        -:  180:          context,
        -:  181:          module_structure,
        -:  182:          mi.module_data,
        -:  183:          mi.module_data_size);
        -:  184:
    #####:  185:      if (result != ERROR_SUCCESS)
    #####:  186:        return result;
        -:  187:    }
        -:  188:  }
        -:  189:
    #####:  190:  result = context->callback(
        -:  191:      CALLBACK_MSG_MODULE_IMPORTED,
        -:  192:      module_structure,
        -:  193:      context->user_data);
        -:  194:
    #####:  195:  if (result == CALLBACK_ERROR)
    #####:  196:    return ERROR_CALLBACK_ERROR;
        -:  197:
    #####:  198:  return ERROR_SUCCESS;
        -:  199:}
        -:  200:
        -:  201:
      280:  202:int yr_modules_unload_all(
        -:  203:    YR_SCAN_CONTEXT* context)
        -:  204:{
        -:  205:  int i;
        -:  206:
     1960:  207:  for (i = 0; i < sizeof(yr_modules_table) / sizeof(YR_MODULE); i++)
        -:  208:  {
     1680:  209:    YR_OBJECT* module_structure = (YR_OBJECT*) yr_hash_table_remove(
        -:  210:        context->objects_table,
     1680:  211:        yr_modules_table[i].name,
        -:  212:        NULL);
        -:  213:
     1680:  214:    if (module_structure != NULL)
        -:  215:    {
    #####:  216:      yr_modules_table[i].unload(module_structure);
    #####:  217:      yr_object_destroy(module_structure);
        -:  218:    }
        -:  219:  }
        -:  220:
      280:  221:  return ERROR_SUCCESS;
        -:  222:}
