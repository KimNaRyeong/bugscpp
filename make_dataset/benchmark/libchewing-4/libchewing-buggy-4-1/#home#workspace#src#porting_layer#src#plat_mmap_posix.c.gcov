        -:    0:Source:/home/workspace/src/porting_layer/src/plat_mmap_posix.c
        -:    0:Graph:/home/workspace/build/CMakeFiles/chewing.dir/src/porting_layer/src/plat_mmap_posix.gcno
        -:    0:Data:/home/workspace/build/CMakeFiles/chewing.dir/src/porting_layer/src/plat_mmap_posix.gcda
        -:    0:Runs:1
        -:    1:/**
        -:    2: * plat_mmap_posix.c
        -:    3: *
        -:    4: * Copyright (c) 2005, 2006, 2008
        -:    5: *      libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:#ifdef HAVE_CONFIG_H
        -:   12:  #include <config.h>
        -:   13:#endif
        -:   14:
        -:   15:#ifdef UNDER_POSIX
        -:   16:
        -:   17:#include <sys/types.h>
        -:   18:#include <sys/mman.h>
        -:   19:#include <sys/stat.h>
        -:   20:#include <unistd.h>
        -:   21:#include <fcntl.h>
        -:   22:#include "plat_mmap.h"
        -:   23:
        -:   24:/* set the mmap handle an invalid value */
       86:   25:void plat_mmap_set_invalid( plat_mmap *handle )
        -:   26:{
        -:   27:	/* check error(s) */
       86:   28:	if ( ! handle )
    #####:   29:		return;
        -:   30:
       86:   31:	handle->fd = -1;
       86:   32:	handle->address = NULL;
       86:   33:	handle->fAccessAttr = 0;
        -:   34:}
        -:   35:
        -:   36:/* verify if the mmap handle is valid */
    #####:   37:int plat_mmap_is_valid( plat_mmap *handle )
        -:   38:{
        -:   39:	/* check error(s) */
    #####:   40:	if ( ! handle )
    #####:   41:		return 0;
        -:   42:
    #####:   43:	return ( handle->fd != -1 );
        -:   44:}
        -:   45:
        -:   46:/* map a file into system memory, return size of the mapped file */
       86:   47:size_t plat_mmap_create( plat_mmap *handle, const char *file, int fileAccessAttr )
        -:   48:{
        -:   49:	size_t sizet;
        -:   50:
        -:   51:	/* check error(s) */
       86:   52:	if ( ! handle )
    #####:   53:		return 0;
        -:   54:
       86:   55:	handle->address = NULL;
       86:   56:	handle->sizet = 0;
        -:   57:
       86:   58:	if ( FLAG_ATTRIBUTE_READ & fileAccessAttr )
       86:   59:		handle->fd = open( file, O_RDONLY );
        -:   60:	else
    #####:   61:		handle->fd = open( file, O_RDWR );
        -:   62:
       86:   63:	if ( handle->fd == -1 )
    #####:   64:		return 0;
        -:   65:
       86:   66:	sizet = lseek( handle->fd, 0, SEEK_END );
       86:   67:	lseek( handle->fd, 0, SEEK_SET );
        -:   68:
       86:   69:	return sizet;
        -:   70:}
        -:   71:
        -:   72:/* obtain a view of the mapped file, return the adjusted offset & size */
       86:   73:void *plat_mmap_set_view( plat_mmap *handle, size_t *offset, size_t *sizet )
        -:   74:{
       86:   75:	size_t pagesize = getpagesize();
        -:   76:	size_t edge;
        -:   77:
        -:   78:	/* check error(s) */
       86:   79:	if ( ! handle )
    #####:   80:		return NULL;
        -:   81:
       86:   82:	if ( handle->address )
    #####:   83:		munmap( handle->address, handle->sizet );
        -:   84:
       86:   85:	edge = (*sizet) + (*offset);
       86:   86:	(*offset) = ((size_t)((*offset) / pagesize)) * pagesize;
       86:   87:	handle->sizet = (*sizet) = edge - (*offset);
      172:   88:	handle->address = mmap(
        -:   89:			0,
        -:   90:			*sizet,
        -:   91:			PROT_READ,
        -:   92:			MAP_SHARED,
        -:   93:			handle->fd,
       86:   94:			*offset );
        -:   95:
       86:   96:	return handle->address;
        -:   97:}
        -:   98:
        -:   99:/* close the mmap */
       86:  100:void plat_mmap_close( plat_mmap *handle )
        -:  101:{
        -:  102:	/* check error(s) */
       86:  103:	if ( ! handle )
    #####:  104:		return;
        -:  105:
       86:  106:	if ( handle->address ) {
       86:  107:		munmap( handle->address, handle->sizet );
       86:  108:		handle->address = NULL;
        -:  109:	}
        -:  110:
       86:  111:	if ( handle->fd != -1 ) {
       86:  112:		close( handle->fd );
       86:  113:		handle->fd = -1;
        -:  114:	}
        -:  115:}
        -:  116:
        -:  117:/* return page size */
    #####:  118:unsigned int plat_mmap_get_page_size()
        -:  119:{
    #####:  120:	return getpagesize();
        -:  121:
        -:  122:}
        -:  123:
    #####:  124:unsigned int plat_mmap_get_alloc_granularity()
        -:  125:{
    #####:  126:	return 16 * getpagesize();
        -:  127:}
        -:  128:
    #####:  129:void plat_mmap_unmap( plat_mmap *handle )
        -:  130:{
        -:  131:	/* check error(s) */
    #####:  132:	if ( ! handle )
    #####:  133:		return;
        -:  134:
    #####:  135:	if ( handle->address ) {
    #####:  136:		munmap( handle->address, handle->sizet );
    #####:  137:		handle->address = NULL;
        -:  138:	}
        -:  139:}
        -:  140:
        -:  141:#endif /* UNDER_POSIX */
        -:  142:
