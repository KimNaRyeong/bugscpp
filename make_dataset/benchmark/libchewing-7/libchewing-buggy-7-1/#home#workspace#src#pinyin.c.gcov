        -:    0:Source:/home/workspace/src/pinyin.c
        -:    0:Graph:/home/workspace/build/CMakeFiles/chewing.dir/src/pinyin.gcno
        -:    0:Data:/home/workspace/build/CMakeFiles/chewing.dir/src/pinyin.gcda
        -:    0:Runs:1
        -:    1:/**
        -:    2: * pinyin.c
        -:    3: *
        -:    4: * Copyright (c) 2005, 2006, 2008, 2012-2014
        -:    5: *      libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:/* @(#)pinyin.c
        -:   12: */
        -:   13:
        -:   14:#include <stdio.h>
        -:   15:#include <string.h>
        -:   16:#include <stdlib.h>
        -:   17:
        -:   18:#include "global-private.h"
        -:   19:#include "pinyin-private.h"
        -:   20:#include "bopomofo-private.h"
        -:   21:#include "private.h"
        -:   22:
       55:   23:void TerminatePinyin(ChewingData *pgdata)
        -:   24:{
       55:   25:    free(pgdata->static_data.hanyuInitialsMap);
       55:   26:    free(pgdata->static_data.hanyuFinalsMap);
       55:   27:}
        -:   28:
       55:   29:int InitPinyin(ChewingData *pgdata, const char *prefix)
        -:   30:{
        -:   31:    char filename[PATH_MAX];
        -:   32:    int i;
        -:   33:    FILE *fd;
        -:   34:    int ret;
        -:   35:
       55:   36:    sprintf(filename, "%s" PLAT_SEPARATOR "%s", prefix, PINYIN_TAB_NAME);
        -:   37:
       55:   38:    fd = fopen(filename, "r");
        -:   39:
       55:   40:    if (!fd)
    #####:   41:        return 0;
        -:   42:
       55:   43:    ret = fscanf(fd, "%d", &pgdata->static_data.HANYU_INITIALS);
       55:   44:    if (ret != 1) {
    #####:   45:        goto fail;
        -:   46:    }
       55:   47:    ++pgdata->static_data.HANYU_INITIALS;
       55:   48:    pgdata->static_data.hanyuInitialsMap = ALC(keymap, pgdata->static_data.HANYU_INITIALS);
     1430:   49:    for (i = 0; i < pgdata->static_data.HANYU_INITIALS - 1; i++) {
     1375:   50:        ret = fscanf(fd, "%s %s",
     1375:   51:                     pgdata->static_data.hanyuInitialsMap[i].pinyin, pgdata->static_data.hanyuInitialsMap[i].bopomofo);
     1375:   52:        if (ret != 2) {
    #####:   53:            goto fail;
        -:   54:        }
        -:   55:    }
        -:   56:
       55:   57:    ret = fscanf(fd, "%d", &pgdata->static_data.HANYU_FINALS);
       55:   58:    if (ret != 1) {
    #####:   59:        goto fail;
        -:   60:    }
       55:   61:    ++pgdata->static_data.HANYU_FINALS;
       55:   62:    pgdata->static_data.hanyuFinalsMap = ALC(keymap, pgdata->static_data.HANYU_FINALS);
     5005:   63:    for (i = 0; i < pgdata->static_data.HANYU_FINALS - 1; i++) {
     4950:   64:        ret = fscanf(fd, "%s %s",
     4950:   65:                     pgdata->static_data.hanyuFinalsMap[i].pinyin, pgdata->static_data.hanyuFinalsMap[i].bopomofo);
     4950:   66:        if (ret != 2) {
    #####:   67:            goto fail;
        -:   68:        }
        -:   69:    }
        -:   70:
       55:   71:    fclose(fd);
       55:   72:    return 1;
        -:   73:
    #####:   74:fail:
    #####:   75:    fclose(fd);
    #####:   76:    return 0;
        -:   77:}
        -:   78:
        -:   79:/**
        -:   80: * Map pinyin key-sequence to Bopomofo key-sequence.
        -:   81: * Caller should allocate char bopomofo[4].
        -:   82: *
        -:   83: * Non-Zero: Fail to fully convert
        -:   84: *
        -:   85: * @retval 0 Success
        -:   86: */
       45:   87:int PinyinToBopomofo(ChewingData *pgdata, const char *pinyinKeySeq, char *bopomofoKeySeq, char *bopomofoKeySeqAlt)
        -:   88:{
       45:   89:    const char *p, *cursor = NULL;
       45:   90:    const char *initial = 0;
       45:   91:    const char *final = 0;
       45:   92:    const char *seq = 0;
        -:   93:    int i;
        -:   94:
        -:   95:    /* special cases for WG */
       45:   96:    if (!strcmp(pinyinKeySeq, "tzu")) {
    #####:   97:        seq = "y yj";           /* ㄗ|ㄗㄨ */
       45:   98:    } else if (!strcmp(pinyinKeySeq, "ssu") || !strcmp(pinyinKeySeq, "szu")) {
    #####:   99:        seq = "n n";            /* ㄙ|ㄙㄨ */
        -:  100:    }
        -:  101:
        -:  102:    /* common multiple mapping */
       45:  103:    if (!strcmp(pinyinKeySeq, "e")) {
    #####:  104:        seq = "k ,";            /* ㄜ|ㄝ */
       45:  105:    } else if (!strcmp(pinyinKeySeq, "ch")) {
    #####:  106:        seq = "t f";            /* ㄔ|ㄑ */
       45:  107:    } else if (!strcmp(pinyinKeySeq, "sh")) {
    #####:  108:        seq = "g v";            /* ㄕ|ㄒ */
       45:  109:    } else if (!strcmp(pinyinKeySeq, "c")) {
    #####:  110:        seq = "h f";            /* ㄘ|ㄑ */
       45:  111:    } else if (!strcmp(pinyinKeySeq, "s")) {
    #####:  112:        seq = "n v";            /* ㄙ|ㄒ */
       45:  113:    } else if (!strcmp(pinyinKeySeq, "nu")) {
    #####:  114:        seq = "sj sm";          /* ㄋㄨ|ㄋㄩ */
       45:  115:    } else if (!strcmp(pinyinKeySeq, "lu")) {
    #####:  116:        seq = "xj xm";          /* ㄌㄨ|ㄌㄩ */
       45:  117:    } else if (!strcmp(pinyinKeySeq, "luan")) {
    #####:  118:        seq = "xj0 xm0";        /* ㄌㄨㄢ|ㄌㄩㄢ */
       45:  119:    } else if (!strcmp(pinyinKeySeq, "niu")) {
    #####:  120:        seq = "su. sm";         /* ㄋㄧㄡ|ㄋㄩ */
       45:  121:    } else if (!strcmp(pinyinKeySeq, "liu")) {
    #####:  122:        seq = "xu. xm";         /* ㄌㄧㄡ|ㄌㄩ */
       45:  123:    } else if (!strcmp(pinyinKeySeq, "jiu")) {
    #####:  124:        seq = "ru. rm";         /* ㄐㄧㄡ|ㄐㄩ */
       45:  125:    } else if (!strcmp(pinyinKeySeq, "chiu")) {
    #####:  126:        seq = "fu. fm";         /* ㄑㄧㄡ|ㄑㄩ */
       45:  127:    } else if (!strcmp(pinyinKeySeq, "shiu")) {
    #####:  128:        seq = "vu. vm";         /* ㄒㄧㄡ|ㄒㄩ */
       45:  129:    } else if (!strcmp(pinyinKeySeq, "ju")) {
    #####:  130:        seq = "rm 5j";          /* ㄐㄩ|ㄓㄨ */
       45:  131:    } else if (!strcmp(pinyinKeySeq, "juan")) {
    #####:  132:        seq = "rm0 5j0";        /* ㄐㄩㄢ|ㄓㄨㄢ */
        -:  133:    }
        -:  134:
        -:  135:    /* multiple mapping for each kbtype */
       45:  136:    switch (pgdata->bopomofoData.kbtype) {
       15:  137:    case KB_HANYU_PINYIN:
       15:  138:        if (!strcmp(pinyinKeySeq, "chi")) {
    #####:  139:            seq = "t fu";       /* ㄔ|ㄑㄧ */
       15:  140:        } else if (!strcmp(pinyinKeySeq, "shi")) {
        2:  141:            seq = "g vu";       /* ㄕ|ㄒㄧ */
       13:  142:        } else if (!strcmp(pinyinKeySeq, "ci")) {
    #####:  143:            seq = "h fu";       /* ㄘ|ㄑㄧ */
       13:  144:        } else if (!strcmp(pinyinKeySeq, "si")) {
    #####:  145:            seq = "n vu";       /* ㄙ|ㄒㄧ */
        -:  146:        }
       15:  147:        break;
       15:  148:    case KB_THL_PINYIN:
       15:  149:        if (!strcmp(pinyinKeySeq, "chi")) {
    #####:  150:            seq = "fu t";       /* ㄑㄧ|ㄔ */
       15:  151:        } else if (!strcmp(pinyinKeySeq, "shi")) {
    #####:  152:            seq = "vu g";       /* ㄒㄧ|ㄕ */
       15:  153:        } else if (!strcmp(pinyinKeySeq, "ci")) {
    #####:  154:            seq = "fu h";       /* ㄑㄧ|ㄘ */
       15:  155:        } else if (!strcmp(pinyinKeySeq, "si")) {
    #####:  156:            seq = "vu n";       /* ㄒㄧ|ㄙ */
        -:  157:        }
       15:  158:        break;
       15:  159:    case KB_MPS2_PINYIN:
       15:  160:        if (!strcmp(pinyinKeySeq, "chi")) {
    #####:  161:            seq = "fu t";       /* ㄑㄧ|ㄔ */
       15:  162:        } else if (!strcmp(pinyinKeySeq, "shi")) {
    #####:  163:            seq = "vu g";       /* ㄒㄧ|ㄕ */
       15:  164:        } else if (!strcmp(pinyinKeySeq, "ci")) {
    #####:  165:            seq = "fu h";       /* ㄑㄧ|ㄘ */
       15:  166:        } else if (!strcmp(pinyinKeySeq, "si")) {
    #####:  167:            seq = "vu n";       /* ㄒㄧ|ㄙ */
       15:  168:        } else if (!strcmp(pinyinKeySeq, "niu")) {
    #####:  169:            seq = "sm su.";     /* ㄋㄩ|ㄋㄧㄡ */
       15:  170:        } else if (!strcmp(pinyinKeySeq, "liu")) {
    #####:  171:            seq = "xm xu.";     /* ㄌㄩ|ㄌㄧㄡ */
       15:  172:        } else if (!strcmp(pinyinKeySeq, "jiu")) {
    #####:  173:            seq = "rm ru.";     /* ㄐㄩ|ㄐㄧㄡ */
       15:  174:        } else if (!strcmp(pinyinKeySeq, "chiu")) {
    #####:  175:            seq = "fm fu.";     /* ㄑㄩ|ㄑㄧㄡ */
       15:  176:        } else if (!strcmp(pinyinKeySeq, "shiu")) {
    #####:  177:            seq = "vm vu.";     /* ㄒㄩ|ㄒㄧㄡ */
       15:  178:        } else if (!strcmp(pinyinKeySeq, "ju")) {
    #####:  179:            seq = "5j rm";      /* ㄓㄨ|ㄐㄩ */
       15:  180:        } else if (!strcmp(pinyinKeySeq, "juan")) {
    #####:  181:            seq = "5j0 rm0";    /* ㄓㄨㄢ|ㄐㄩㄢ */
       15:  182:        } else if (!strcmp(pinyinKeySeq, "juen")) {
    #####:  183:            seq = "5jp 5jp";    /* ㄓㄨㄣ|ㄓㄨㄣ */
       15:  184:        } else if (!strcmp(pinyinKeySeq, "tzu")) {
    #####:  185:            seq = "yj y";       /* ㄗㄨ|ㄗ */
        -:  186:        }
       15:  187:        break;
        -:  188:    }
       45:  189:    if (seq != NULL) {
        -:  190:        char s[BOPOMOFO_SIZE * 2 + 1];
        -:  191:
        2:  192:        strcpy(s, seq);
        2:  193:        initial = strtok(s, " ");
        2:  194:        strcpy(bopomofoKeySeq, initial);
        2:  195:        initial = strtok(NULL, " ");
        2:  196:        strcpy(bopomofoKeySeqAlt, initial);
        2:  197:        return 0;
        -:  198:    }
        -:  199:
        -:  200:
      675:  201:    for (i = 0; i < pgdata->static_data.HANYU_INITIALS; i++) {
      675:  202:        p = strstr(pinyinKeySeq, pgdata->static_data.hanyuInitialsMap[i].pinyin);
      675:  203:        if (p == pinyinKeySeq) {
       43:  204:            initial = pgdata->static_data.hanyuInitialsMap[i].bopomofo;
       43:  205:            cursor = pinyinKeySeq + strlen(pgdata->static_data.hanyuInitialsMap[i].pinyin);
       43:  206:            break;
        -:  207:        }
        -:  208:    }
       43:  209:    if (i == pgdata->static_data.HANYU_INITIALS) {
        -:  210:        /* No initials. might be ㄧㄨㄩ */
        -:  211:        /* XXX: I NEED Implementation
        -:  212:           if(finalsKeySeq[0] != ) {
        -:  213:           }
        -:  214:         */
    #####:  215:        return 1;
        -:  216:    }
        -:  217:
       43:  218:    if (cursor) {
     2391:  219:        for (i = 0; i < pgdata->static_data.HANYU_FINALS; i++) {
     2391:  220:            if (strcmp(cursor, pgdata->static_data.hanyuFinalsMap[i].pinyin) == 0) {
       43:  221:                final = pgdata->static_data.hanyuFinalsMap[i].bopomofo;
       43:  222:                break;
        -:  223:            }
        -:  224:        }
       43:  225:        if (i == pgdata->static_data.HANYU_FINALS) {
    #####:  226:            return 2;
        -:  227:        }
        -:  228:    }
        -:  229:
        -:  230:
        -:  231:    /* THL empty rime
        -:  232:     * we use '=' in pinyin.tab as empty rime, restore it to ''
        -:  233:     */
       43:  234:    if (!strcmp(final, "=")) {
        4:  235:        final = "";
        -:  236:    }
        -:  237:
        -:  238:    /* Hanyu empty rime
        -:  239:     * ㄓ/ㄔ/ㄕ/ㄖ/ㄗ/ㄘ/ㄙ + -i, -i is empty rime, not ㄧ
        -:  240:     * */
       43:  241:    if (!strcmp(final, "u")) {
    #####:  242:        if (!strcmp(initial, "5") ||
    #####:  243:            !strcmp(initial, "t") ||
    #####:  244:            !strcmp(initial, "g") ||
    #####:  245:            !strcmp(initial, "b") || !strcmp(initial, "y") || !strcmp(initial, "h") || !strcmp(initial, "n")) {
    #####:  246:            final = "";
        -:  247:        }
        -:  248:    }
        -:  249:
        -:  250:    /* Hanyu uan/un/u :
        -:  251:     * ㄐ/ㄑ/ㄒ + -uan, -uan is ㄩㄢ, not ㄨㄢ
        -:  252:     * ㄐ/ㄑ/ㄒ + -un,  -un is ㄩㄣ, not ㄨㄣ
        -:  253:     * ㄐ/ㄑ/ㄒ + -u,   -u is ㄧ, not ㄨ
        -:  254:     */
       43:  255:    if (!strcmp(initial, "f") || !strcmp(initial, "r") || !strcmp(initial, "v")) {
        2:  256:        if (!strcmp(final, "j0")) {
    #####:  257:            final = "m0";
        2:  258:        } else if (!strcmp(final, "jp")) {
    #####:  259:            final = "mp";
        2:  260:        } else if (!strcmp(final, "j")) {
    #####:  261:            final = "m";
        -:  262:        }
        -:  263:
        -:  264:    }
        -:  265:
        -:  266:    /* THL/MPS2 s/sh/c/ch/j :
        -:  267:     * s-  + ー/ㄩ, s-  is ㄒ, not ㄙ (THL/Tongyong)
        -:  268:     * sh- + ー/ㄩ, sh- is ㄒ, not ㄕ (MPS2)
        -:  269:     * c-  + ー/ㄩ, c-  is ㄑ, not ㄘ (Tongyong)
        -:  270:     * ch- + ㄧ/ㄩ, ch- is ㄑ, not ㄔ (THL)
        -:  271:     * j-  + other than ー/ㄩ, j-  is ㄓ, not ㄐ (MPS2)
        -:  272:     */
        -:  273:
       43:  274:    if (final == strstr(final, "u") || final == strstr(final, "m")) {
       18:  275:        if (!strcmp(initial, "n")) {
        1:  276:            initial = "v";
       17:  277:        } else if (!strcmp(initial, "g")) {
        1:  278:            initial = "v";
       16:  279:        } else if (!strcmp(initial, "h")) {
    #####:  280:            initial = "f";
       16:  281:        } else if (!strcmp(initial, "t")) {
    #####:  282:            initial = "f";
        -:  283:        }
        -:  284:    } else {
       25:  285:        if (!strcmp(initial, "r")) {
        1:  286:            initial = "5";
        -:  287:        }
        -:  288:    }
        -:  289:
        -:  290:    /* THL supplemental set
        -:  291:     * ㄅ/ㄆ/ㄇ/ㄈ + -ㄨㄥ, -ㄨㄥ is another reading of -ㄥ
        -:  292:     * ㄅ/ㄆ/ㄇ/ㄈ + -ㄨㄛ, -ㄨㄛ is another reading of -ㄛ
        -:  293:     */
       43:  294:    if (!strcmp(initial, "1") || !strcmp(initial, "q") || !strcmp(initial, "a") || !strcmp(initial, "z")) {
        -:  295:
        9:  296:        if (!strcmp(final, "ji")) {
        1:  297:            final = "i";
        8:  298:        } else if (!strcmp(final, "j/")) {
    #####:  299:            final = "/";
        -:  300:        }
        -:  301:
        -:  302:    }
        -:  303:
       43:  304:    sprintf(bopomofoKeySeq, "%s%s", initial, final);
       43:  305:    strcpy(bopomofoKeySeqAlt, bopomofoKeySeq);
       43:  306:    return 0;
        -:  307:}
