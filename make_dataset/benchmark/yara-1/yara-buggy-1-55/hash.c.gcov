        -:    0:Source:hash.c
        -:    0:Graph:/home/workspace/libyara/hash.gcno
        -:    0:Data:/home/workspace/libyara/hash.gcda
        -:    0:Runs:6
        -:    1:/*
        -:    2:Copyright (c) 2013. The YARA Authors. All Rights Reserved.
        -:    3:
        -:    4:Redistribution and use in source and binary forms, with or without modification,
        -:    5:are permitted provided that the following conditions are met:
        -:    6:
        -:    7:1. Redistributions of source code must retain the above copyright notice, this
        -:    8:list of conditions and the following disclaimer.
        -:    9:
        -:   10:2. Redistributions in binary form must reproduce the above copyright notice,
        -:   11:this list of conditions and the following disclaimer in the documentation and/or
        -:   12:other materials provided with the distribution.
        -:   13:
        -:   14:3. Neither the name of the copyright holder nor the names of its contributors
        -:   15:may be used to endorse or promote products derived from this software without
        -:   16:specific prior written permission.
        -:   17:
        -:   18:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:   19:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   20:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   21:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:   22:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   23:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   24:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:   25:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   26:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   27:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   28:*/
        -:   29:
        -:   30:#include <assert.h>
        -:   31:#include <stdbool.h>
        -:   32:#include <string.h>
        -:   33:
        -:   34:#include <yara/integers.h>
        -:   35:#include <yara/hash.h>
        -:   36:#include <yara/mem.h>
        -:   37:#include <yara/error.h>
        -:   38:
        -:   39:// Constant-time left rotate that does not invoke undefined behavior.
        -:   40:// http://blog.regehr.org/archives/1063
       33:   41:static uint32_t rotl32(uint32_t x, uint32_t shift) {
      33*:   42:  assert(shift < 32);
       33:   43:  return (x << shift) | (x >> (-shift & 31));
        -:   44:}
        -:   45:
        -:   46:#define ROTATE_INT32(x, shift) \
        -:   47:    rotl32(x, shift % 32)
        -:   48:
        -:   49:uint32_t byte_to_int32[]  =
        -:   50:{
        -:   51:  0xC3113E7F,0x4C353C5F,0x7423810B,0x258D264E,0xDAD39DED,0x75D0B694,0x98CE1216,
        -:   52:  0x93334482,0xC5C48EA5,0xF57E0E8B,0x5D7F3723,0x396B1B24,0xA8883D9F,0xB2A74A00,
        -:   53:  0xF8E171AE,0x3F01FBAB,0x5C1840CB,0xDDD833C4,0x8D8CCA34,0x32EF223A,0x1A05B871,
        -:   54:  0x9A9B6BFC,0x50406A0C,0xE7E1FC04,0x5E07D7F6,0x80B83660,0x20892A62,0xB2C6FEA6,
        -:   55:  0x6CEC7CAA,0x182F764B,0x3B0353E7,0x57FC2520,0x4B6812D4,0xACB654E4,0x23C75C04,
        -:   56:  0xB1DCD731,0xE3AF0733,0xF2366D39,0xC729671B,0xFF3BE6F2,0xABA37E34,0x3CDAFA38,
        -:   57:  0xAAD18D03,0xA8D35345,0x08E9A92C,0xF9324059,0x42D821BE,0x1BC152DD,0x5588811C,
        -:   58:  0x874A1F9A,0x6E83E9CD,0xDA6F3AF8,0x965D4670,0xA7A565C0,0x68D8A9AF,0xFC8FD8FD,
        -:   59:  0x8FF99FF9,0x4C9B42AE,0x2D066A8D,0x4D1802F7,0x557032B2,0x12BCF371,0xDC29D5AE,
        -:   60:  0x72EA361F,0xE2835B0B,0xDFC58966,0x13B0F34D,0x3FA02BCD,0xBF282E3D,0x7DC877F5,
        -:   61:  0xF4848A32,0x861E35F5,0x7FFA0D7F,0x515F2E4E,0x6B235D5C,0x55F46E24,0x35AD2C99,
        -:   62:  0x072654A8,0x05163F0F,0x9317B11A,0xAED1FC10,0x989444F0,0xDB3E1814,0x446C0CF1,
        -:   63:  0x660BF511,0x2F227D3A,0xFDBA0539,0xC649E621,0x5204D7CE,0x5FA386D0,0xE5F22005,
        -:   64:  0x97B6C8A1,0x4AB69EC2,0x5C7CA70D,0x39A48EC6,0x7BACF378,0x8D0ED3D1,0xE39DE582,
        -:   65:  0xC5FBE2AB,0x37E3D2D0,0x06F44724,0x73144144,0xBA57E905,0xB05B4307,0xAEED8D97,
        -:   66:  0xA68CCAC4,0xE30DA57E,0xED0F194B,0x8C2B9B7A,0x814575D5,0x79588493,0x81D3712A,
        -:   67:  0x3FA892F2,0x80F0BB94,0x44EAF51A,0x4E05F1D4,0xFC69F858,0x775E8D60,0x22B20DD7,
        -:   68:  0x170A87EA,0x1077DE52,0x3D5EC9FB,0x0B6EB1E5,0xF2F9CCAF,0xA76C7DEB,0xD8C2D873,
        -:   69:  0xF438C592,0x6239FEEC,0x26D3D2A9,0x30F6FADF,0x4B2984CC,0x6257F3DA,0x0E0583E2,
        -:   70:  0x143E5E61,0xBB2732BF,0x9653217A,0x027A84EA,0x95C9AE8B,0x89B8B82B,0x9F286485,
        -:   71:  0x29F622FE,0x52A3196B,0x8392D95F,0x33A79167,0xF5DEE92A,0x6E397DB9,0x11931C01,
        -:   72:  0x8DD2CD3B,0xF9E6003D,0xAB955AF4,0xD38725F9,0xDCF6F8AE,0x7667A958,0xE67AD995,
        -:   73:  0xB7CF979A,0xD88EBE5B,0x5BA889F0,0x078BDD90,0x447238F9,0x3135F672,0x187B95A8,
        -:   74:  0x0B7D5751,0xACD59D2A,0x9C5D1929,0x579E5022,0xEA90499B,0x59901800,0x82237DB5,
        -:   75:  0x7A375509,0xACA9A22A,0xEC96E649,0x69339DB0,0x081D0D9B,0xD72FB8B9,0xA4184653,
        -:   76:  0xC057321D,0xED19CAB9,0xB48F1E3E,0xB9DAC51E,0xDAED2FC7,0x7598CBBD,0x208DF346,
        -:   77:  0x044BE6EC,0x1C63E6EB,0xA15F64C1,0xE024A061,0x68309584,0x0758A68D,0xF274E9AE,
        -:   78:  0x0ABEA0CC,0xED4FB267,0x63D6EC46,0x9F28E026,0xF0694A17,0x9D6E9115,0xC4600FAD,
        -:   79:  0x5B121E99,0xD6B4A13B,0xF5364B8A,0x8514B254,0x0182F8DD,0xDB09F90B,0x78C70B32,
        -:   80:  0xD8EC3B02,0x8CD7084D,0xA4439838,0x72F35A3D,0x200B48A5,0xE2351444,0xA5552F5F,
        -:   81:  0xD8C1E746,0x0FE5EF3C,0xB6A47063,0x61F4E68B,0x08FED99B,0x7E461445,0x43CB8380,
        -:   82:  0x28BA03C8,0x21A7A2E2,0x43437ED6,0x2A9E6670,0x89B4A106,0xC6C2F4EE,0x9C4063CC,
        -:   83:  0x2FA0DF6C,0xB54DC409,0xCF01538F,0x616431D7,0x02CB0E4D,0x44FFF425,0xAAD5188E,
        -:   84:  0x0742E9BC,0xFFF41353,0x130F0A15,0x787BDC10,0x4A327B72,0x702989F7,0x5F704798,
        -:   85:  0x8156A1BB,0x2BCA3E74,0x1911A8C4,0x5E1F27D3,0x07949DC7,0xF24C2056,0xB4299EE6,
        -:   86:  0x9C7045D9,0xA8BF6307,0x7454AAD2,0x256425E5,0xD87DEF67,0xCFE95452,0xE7548DF7,
        -:   87:  0xA84956C7,0xD8402C60,0xCFBD0373,0x6B6CDAFE
        -:   88:};
        -:   89:
        -:   90:
        8:   91:uint32_t yr_hash(
        -:   92:    uint32_t seed,
        -:   93:    const void* buffer,
        -:   94:    size_t len)
        -:   95:{
        8:   96:  const uint8_t* b = (uint8_t*) buffer;
        -:   97:
        8:   98:  uint32_t result = seed;
        -:   99:  size_t i;
        -:  100:
       8*:  101:  assert(len > 0);
        -:  102:
       41:  103:  for (i = len - 1; i > 0; i--)
        -:  104:  {
       33:  105:    result ^= ROTATE_INT32(byte_to_int32[*b], i);
       33:  106:    b++;
        -:  107:  }
        -:  108:
        8:  109:  result ^= byte_to_int32[*b];
        8:  110:  return result;
        -:  111:}
        -:  112:
        -:  113:// _yr_hash_table_lookup
        -:  114://
        -:  115:// Return the value associated to a given key and optionally remove it from
        -:  116:// the hash table. Key can be any byte sequence, namespace is a null-terminated
        -:  117:// string, and remove is a boolean.
        -:  118:
        3:  119:static void* _yr_hash_table_lookup(
        -:  120:    YR_HASH_TABLE* table,
        -:  121:    const void* key,
        -:  122:    size_t key_length,
        -:  123:    const char* ns,
        -:  124:    int remove)
        -:  125:{
        -:  126:  YR_HASH_TABLE_ENTRY* entry;
        -:  127:  YR_HASH_TABLE_ENTRY* prev_entry;
        -:  128:
        -:  129:  void* result;
        -:  130:
        3:  131:  uint32_t bucket_index = yr_hash(0, key, key_length);
        -:  132:
        3:  133:  if (ns != NULL)
        2:  134:    bucket_index = yr_hash(bucket_index, (uint8_t*) ns, strlen(ns));
        -:  135:
        3:  136:  bucket_index = bucket_index % table->size;
        3:  137:  prev_entry = NULL;
        3:  138:  entry = table->buckets[bucket_index];
        -:  139:
        3:  140:  while (entry != NULL)
        -:  141:  {
    #####:  142:    int key_match = (
    #####:  143:        (entry->key_length == key_length) &&
    #####:  144:        (memcmp(entry->key, key, key_length) == 0));
        -:  145:
    #####:  146:    int ns_match = (
    #####:  147:        (entry->ns == ns) ||
    #####:  148:        (entry->ns != NULL && ns != NULL && strcmp(entry->ns, ns) == 0));
        -:  149:
    #####:  150:    if (key_match && ns_match)
        -:  151:    {
    #####:  152:      result = entry->value;
        -:  153:
    #####:  154:      if (remove)
        -:  155:      {
    #####:  156:        if (prev_entry == NULL)
    #####:  157:          table->buckets[bucket_index] = entry->next;
        -:  158:        else
    #####:  159:          prev_entry->next = entry->next;
        -:  160:
    #####:  161:        if (entry->ns != NULL)
    #####:  162:          yr_free(entry->ns);
        -:  163:
    #####:  164:        yr_free(entry->key);
    #####:  165:        yr_free(entry);
        -:  166:      }
        -:  167:
    #####:  168:      return result;
        -:  169:    }
        -:  170:
    #####:  171:    prev_entry = entry;
    #####:  172:    entry = entry->next;
        -:  173:  }
        -:  174:
        3:  175:  return NULL;
        -:  176:}
        -:  177:
        -:  178:
        3:  179:YR_API int yr_hash_table_create(
        -:  180:    int size,
        -:  181:    YR_HASH_TABLE** table)
        -:  182:{
        -:  183:  YR_HASH_TABLE* new_table;
        -:  184:  int i;
        -:  185:
        3:  186:  new_table = (YR_HASH_TABLE*) yr_malloc(
        3:  187:      sizeof(YR_HASH_TABLE) + size * sizeof(YR_HASH_TABLE_ENTRY*));
        -:  188:
        3:  189:  if (new_table == NULL)
    #####:  190:    return ERROR_INSUFFICIENT_MEMORY;
        -:  191:
        3:  192:  new_table->size = size;
        -:  193:
    20118:  194:  for (i = 0; i < size; i++)
    20115:  195:    new_table->buckets[i] = NULL;
        -:  196:
        3:  197:  *table = new_table;
        -:  198:
        3:  199:  return ERROR_SUCCESS;
        -:  200:}
        -:  201:
        -:  202:
        4:  203:YR_API void yr_hash_table_clean(
        -:  204:    YR_HASH_TABLE* table,
        -:  205:    YR_HASH_TABLE_FREE_VALUE_FUNC free_value)
        -:  206:{
        -:  207:  YR_HASH_TABLE_ENTRY* entry;
        -:  208:  YR_HASH_TABLE_ENTRY* next_entry;
        -:  209:
        -:  210:  int i;
        -:  211:
        4:  212:  if (table == NULL)
    #####:  213:    return;
        -:  214:
    20220:  215:  for (i = 0; i < table->size; i++)
        -:  216:  {
    20216:  217:    entry = table->buckets[i];
        -:  218:
    20218:  219:    while (entry != NULL)
        -:  220:    {
        2:  221:      next_entry = entry->next;
        -:  222:
        2:  223:      if (free_value != NULL)
        1:  224:        free_value(entry->value);
        -:  225:
        2:  226:      if (entry->ns != NULL)
        1:  227:        yr_free(entry->ns);
        -:  228:
        2:  229:      yr_free(entry->key);
        2:  230:      yr_free(entry);
        -:  231:
        2:  232:      entry = next_entry;
        -:  233:    }
        -:  234:
    20216:  235:    table->buckets[i] = NULL;
        -:  236:  }
        -:  237:}
        -:  238:
        -:  239:
        3:  240:YR_API void yr_hash_table_destroy(
        -:  241:    YR_HASH_TABLE* table,
        -:  242:    YR_HASH_TABLE_FREE_VALUE_FUNC free_value)
        -:  243:{
        3:  244:  yr_hash_table_clean(table, free_value);
        3:  245:  yr_free(table);
        3:  246:}
        -:  247:
        -:  248:
        3:  249:YR_API void* yr_hash_table_lookup_raw_key(
        -:  250:    YR_HASH_TABLE* table,
        -:  251:    const void* key,
        -:  252:    size_t key_length,
        -:  253:    const char* ns)
        -:  254:{
        3:  255:  return _yr_hash_table_lookup(table, key, key_length, ns, false);
        -:  256:}
        -:  257:
        -:  258:
    #####:  259:YR_API void* yr_hash_table_remove_raw_key(
        -:  260:    YR_HASH_TABLE* table,
        -:  261:    const void* key,
        -:  262:    size_t key_length,
        -:  263:    const char* ns)
        -:  264:{
    #####:  265:  return _yr_hash_table_lookup(table, key, key_length, ns, true);
        -:  266:}
        -:  267:
        -:  268:
        2:  269:YR_API int yr_hash_table_add_raw_key(
        -:  270:    YR_HASH_TABLE* table,
        -:  271:    const void* key,
        -:  272:    size_t key_length,
        -:  273:    const char* ns,
        -:  274:    void* value)
        -:  275:{
        -:  276:  YR_HASH_TABLE_ENTRY* entry;
        -:  277:  uint32_t bucket_index;
        -:  278:
        2:  279:  entry = (YR_HASH_TABLE_ENTRY*) yr_malloc(sizeof(YR_HASH_TABLE_ENTRY));
        -:  280:
        2:  281:  if (entry == NULL)
    #####:  282:    return ERROR_INSUFFICIENT_MEMORY;
        -:  283:
        2:  284:  entry->key = yr_malloc(key_length);
        -:  285:
        2:  286:  if (entry->key == NULL)
        -:  287:  {
    #####:  288:    yr_free(entry);
    #####:  289:    return ERROR_INSUFFICIENT_MEMORY;
        -:  290:  }
        -:  291:
        2:  292:  if (ns != NULL)
        -:  293:  {
        1:  294:    entry->ns = yr_strdup(ns);
        -:  295:
        1:  296:    if (entry->ns == NULL)
        -:  297:    {
    #####:  298:      yr_free(entry->key);
    #####:  299:      yr_free(entry);
        -:  300:
    #####:  301:      return ERROR_INSUFFICIENT_MEMORY;
        -:  302:    }
        -:  303:  }
        -:  304:  else
        -:  305:  {
        1:  306:    entry->ns = NULL;
        -:  307:  }
        -:  308:
        2:  309:  entry->key_length = key_length;
        2:  310:  entry->value = value;
        -:  311:
        2:  312:  memcpy(entry->key, key, key_length);
        -:  313:
        2:  314:  bucket_index = yr_hash(0, key, key_length);
        -:  315:
        2:  316:  if (ns != NULL)
        1:  317:    bucket_index = yr_hash(bucket_index, (uint8_t*) ns, strlen(ns));
        -:  318:
        2:  319:  bucket_index = bucket_index % table->size;
        -:  320:
        2:  321:  entry->next = table->buckets[bucket_index];
        2:  322:  table->buckets[bucket_index] = entry;
        -:  323:
        2:  324:  return ERROR_SUCCESS;
        -:  325:}
        -:  326:
        -:  327:
        3:  328:YR_API void* yr_hash_table_lookup(
        -:  329:    YR_HASH_TABLE* table,
        -:  330:    const char* key,
        -:  331:    const char* ns)
        -:  332:{
        3:  333:  return yr_hash_table_lookup_raw_key(
        -:  334:      table,
        -:  335:      (void*) key,
        -:  336:      strlen(key),
        -:  337:      ns);
        -:  338:}
        -:  339:
        -:  340:
    #####:  341:YR_API void* yr_hash_table_remove(
        -:  342:    YR_HASH_TABLE* table,
        -:  343:    const char* key,
        -:  344:    const char* ns)
        -:  345:{
    #####:  346:  return yr_hash_table_remove_raw_key(
        -:  347:      table,
        -:  348:      (void*) key,
        -:  349:      strlen(key),
        -:  350:      ns);
        -:  351:}
        -:  352:
        -:  353:
        2:  354:YR_API int yr_hash_table_add(
        -:  355:    YR_HASH_TABLE* table,
        -:  356:    const char* key,
        -:  357:    const char* ns,
        -:  358:    void* value)
        -:  359:{
        2:  360:  return yr_hash_table_add_raw_key(
        -:  361:      table,
        -:  362:      (void*) key,
        -:  363:      strlen(key),
        -:  364:      ns,
        -:  365:      value);
        -:  366:}
