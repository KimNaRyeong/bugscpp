        -:    0:Source:stopwatch.c
        -:    0:Graph:/home/workspace/libyara/stopwatch.gcno
        -:    0:Data:/home/workspace/libyara/stopwatch.gcda
        -:    0:Runs:6
        -:    1:/*
        -:    2:Copyright (c) 2017. The YARA Authors. All Rights Reserved.
        -:    3:
        -:    4:Redistribution and use in source and binary forms, with or without modification,
        -:    5:are permitted provided that the following conditions are met:
        -:    6:
        -:    7:1. Redistributions of source code must retain the above copyright notice, this
        -:    8:list of conditions and the following disclaimer.
        -:    9:
        -:   10:2. Redistributions in binary form must reproduce the above copyright notice,
        -:   11:this list of conditions and the following disclaimer in the documentation and/or
        -:   12:other materials provided with the distribution.
        -:   13:
        -:   14:3. Neither the name of the copyright holder nor the names of its contributors
        -:   15:may be used to endorse or promote products derived from this software without
        -:   16:specific prior written permission.
        -:   17:
        -:   18:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:   19:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   20:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   21:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:   22:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   23:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   24:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:   25:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   26:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   27:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   28:*/
        -:   29:
        -:   30:#include <stdbool.h>
        -:   31:#include <time.h>
        -:   32:
        -:   33:#include <yara/stopwatch.h>
        -:   34:
        -:   35:#if defined(_WIN32)
        -:   36:
        -:   37:void yr_stopwatch_start(
        -:   38:    YR_STOPWATCH* sw)
        -:   39:{
        -:   40:  QueryPerformanceFrequency(&sw->frequency);
        -:   41:  QueryPerformanceCounter(&sw->start);
        -:   42:}
        -:   43:
        -:   44:
        -:   45:uint64_t yr_stopwatch_elapsed_us(
        -:   46:    YR_STOPWATCH* sw)
        -:   47:{
        -:   48:  LARGE_INTEGER li;
        -:   49:
        -:   50:  QueryPerformanceCounter(&li);
        -:   51:
        -:   52:  return (li.QuadPart - sw->start.QuadPart) * 1000000L / sw->frequency.QuadPart;
        -:   53:}
        -:   54:
        -:   55:
        -:   56:#elif defined(__MACH__)
        -:   57:
        -:   58:void yr_stopwatch_start(
        -:   59:    YR_STOPWATCH* sw)
        -:   60:{
        -:   61:  mach_timebase_info(&sw->timebase);
        -:   62:  sw->start = mach_absolute_time();
        -:   63:}
        -:   64:
        -:   65:
        -:   66:uint64_t yr_stopwatch_elapsed_us(
        -:   67:    YR_STOPWATCH* sw)
        -:   68:{
        -:   69:  uint64_t now;
        -:   70:
        -:   71:  now = mach_absolute_time();
        -:   72:  return (now - sw->start) * sw->timebase.numer /
        -:   73:         (sw->timebase.denom * 1000ULL);
        -:   74:}
        -:   75:
        -:   76:
        -:   77:#else
        -:   78:
        -:   79:#define timespecsub(tsp, usp, vsp)                      \
        -:   80:do {                                                    \
        -:   81:  (vsp)->tv_sec = (tsp)->tv_sec - (usp)->tv_sec;        \
        -:   82:  (vsp)->tv_nsec = (tsp)->tv_nsec - (usp)->tv_nsec;     \
        -:   83:  if ((vsp)->tv_nsec < 0) {                             \
        -:   84:    (vsp)->tv_sec--;                                    \
        -:   85:    (vsp)->tv_nsec += 1000000000L;                      \
        -:   86:  }                                                     \
        -:   87:} while (0)
        -:   88:
        -:   89:
    #####:   90:void yr_stopwatch_start(
        -:   91:    YR_STOPWATCH* stopwatch)
        -:   92:{
        -:   93:  #if defined(HAVE_CLOCK_GETTIME)
    #####:   94:  clock_gettime(CLOCK_MONOTONIC, &stopwatch->ts_start);
        -:   95:  #else
        -:   96:  #endif
    #####:   97:}
        -:   98:
        -:   99:
    #####:  100:uint64_t yr_stopwatch_elapsed_us(
        -:  101:    YR_STOPWATCH* stopwatch)
        -:  102:{
        -:  103:  struct timespec ts_stop;
        -:  104:  struct timespec ts_elapsed;
        -:  105:
        -:  106:  #if defined(HAVE_CLOCK_GETTIME)
    #####:  107:  clock_gettime(CLOCK_MONOTONIC, &ts_stop);
    #####:  108:  timespecsub(&ts_stop, &stopwatch->ts_start, &ts_elapsed);
        -:  109:  #else
        -:  110:  #endif
        -:  111:
    #####:  112:  return ts_elapsed.tv_sec * 1000000L + ts_elapsed.tv_nsec / 1000;
        -:  113:}
        -:  114:
        -:  115:#endif
