        -:    0:Source:modules/pe_utils.c
        -:    0:Graph:/home/workspace/libyara/modules/pe_utils.gcno
        -:    0:Data:/home/workspace/libyara/modules/pe_utils.gcda
        -:    0:Runs:6
        -:    1:/*
        -:    2:Copyright (c) 2014-2015. The YARA Authors. All Rights Reserved.
        -:    3:
        -:    4:Redistribution and use in source and binary forms, with or without modification,
        -:    5:are permitted provided that the following conditions are met:
        -:    6:
        -:    7:1. Redistributions of source code must retain the above copyright notice, this
        -:    8:list of conditions and the following disclaimer.
        -:    9:
        -:   10:2. Redistributions in binary form must reproduce the above copyright notice,
        -:   11:this list of conditions and the following disclaimer in the documentation and/or
        -:   12:other materials provided with the distribution.
        -:   13:
        -:   14:3. Neither the name of the copyright holder nor the names of its contributors
        -:   15:may be used to endorse or promote products derived from this software without
        -:   16:specific prior written permission.
        -:   17:
        -:   18:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:   19:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   20:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   21:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:   22:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   23:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   24:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:   25:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   26:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   27:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   28:*/
        -:   29:
        -:   30:#include <stdbool.h>
        -:   31:#include <stdio.h>
        -:   32:
        -:   33:#include <string.h>
        -:   34:
        -:   35:#include <yara/endian.h>
        -:   36:#include <yara/utils.h>
        -:   37:#include <yara/strutils.h>
        -:   38:#include <yara/mem.h>
        -:   39:#include <yara/integers.h>
        -:   40:#include <yara/pe_utils.h>
        -:   41:#include <yara/pe.h>
        -:   42:
        -:   43:#if HAVE_LIBCRYPTO
        -:   44:#include <openssl/asn1.h>
        -:   45:#endif
        -:   46:
    #####:   47:PIMAGE_NT_HEADERS32 pe_get_header(
        -:   48:    const uint8_t* data,
        -:   49:    size_t data_size)
        -:   50:{
        -:   51:  PIMAGE_DOS_HEADER mz_header;
        -:   52:  PIMAGE_NT_HEADERS32 pe_header;
        -:   53:
    #####:   54:  size_t headers_size = 0;
        -:   55:
    #####:   56:  if (data_size < sizeof(IMAGE_DOS_HEADER))
    #####:   57:    return NULL;
        -:   58:
    #####:   59:  mz_header = (PIMAGE_DOS_HEADER) data;
        -:   60:
    #####:   61:  if (yr_le16toh(mz_header->e_magic) != IMAGE_DOS_SIGNATURE)
    #####:   62:    return NULL;
        -:   63:
    #####:   64:  if (yr_le32toh(mz_header->e_lfanew) < 0)
    #####:   65:    return NULL;
        -:   66:
    #####:   67:  headers_size = yr_le32toh(mz_header->e_lfanew) + \
        -:   68:                 sizeof(pe_header->Signature) + \
        -:   69:                 sizeof(IMAGE_FILE_HEADER);
        -:   70:
    #####:   71:  if (data_size < headers_size)
    #####:   72:    return NULL;
        -:   73:
    #####:   74:  pe_header = (PIMAGE_NT_HEADERS32) (data + yr_le32toh(mz_header->e_lfanew));
        -:   75:
    #####:   76:  if (yr_le32toh(pe_header->Signature) != IMAGE_NT_SIGNATURE)
    #####:   77:    return NULL;
        -:   78:
    #####:   79:  if (data_size < headers_size + sizeof(IMAGE_OPTIONAL_HEADER32))
    #####:   80:    return NULL;
        -:   81:
    #####:   82:  if (pe_header->OptionalHeader.Magic == IMAGE_NT_OPTIONAL_HDR64_MAGIC)
    #####:   83:    headers_size += sizeof(IMAGE_OPTIONAL_HEADER64);
        -:   84:  else
    #####:   85:    headers_size += sizeof(IMAGE_OPTIONAL_HEADER32);
        -:   86:
    #####:   87:  if (data_size < headers_size)
    #####:   88:    return NULL;
        -:   89:
    #####:   90:  if (yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_UNKNOWN &&
    #####:   91:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_AM33 &&
    #####:   92:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_AMD64 &&
    #####:   93:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_ARM &&
    #####:   94:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_ARMNT &&
    #####:   95:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_ARM64 &&
    #####:   96:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_EBC &&
    #####:   97:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_I386 &&
    #####:   98:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_IA64 &&
    #####:   99:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_M32R &&
    #####:  100:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_MIPS16 &&
    #####:  101:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_MIPSFPU &&
    #####:  102:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_MIPSFPU16 &&
    #####:  103:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_POWERPC &&
    #####:  104:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_POWERPCFP &&
    #####:  105:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_R4000 &&
    #####:  106:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_SH3 &&
    #####:  107:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_SH3DSP &&
    #####:  108:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_SH4 &&
    #####:  109:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_SH5 &&
    #####:  110:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_THUMB &&
    #####:  111:      yr_le16toh(pe_header->FileHeader.Machine) != IMAGE_FILE_MACHINE_WCEMIPSV2)
        -:  112:  {
    #####:  113:    return NULL;
        -:  114:  }
        -:  115:
    #####:  116:  return pe_header;
        -:  117:}
        -:  118:
        -:  119:
    #####:  120:PIMAGE_DATA_DIRECTORY pe_get_directory_entry(
        -:  121:    PE* pe,
        -:  122:    int entry)
        -:  123:{
        -:  124:  PIMAGE_DATA_DIRECTORY directory_start;
        -:  125:  uint8_t* optional_header_start;
        -:  126:  uint16_t optional_header_size;
        -:  127:
        -:  128:  // We are specifically NOT checking NumberOfRvaAndSizes here because it can
        -:  129:  // lie. 7ff1bf680c80fd73c0b35084904848b3705480ddeb6d0eff62180bd14cd18570 has
        -:  130:  // NumberOfRvaAndSizes set to 11 when in fact there is a valid
        -:  131:  // IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR entry (which is more than 11). If we
        -:  132:  // are overly strict here and only parse entries which are less than
        -:  133:  // NumberOfRvaAndSizes we run the risk of missing otherwise perfectly valid
        -:  134:  // files. Instead of being strict we check to make sure the entry is within
        -:  135:  // the OptionalHeader, since SizeOfOptionalHeader includes the DataDirectory
        -:  136:  // array.
        -:  137:
        -:  138:  // In case someone requests an entry which is, by definition, invalid.
    #####:  139:  if (entry >= IMAGE_NUMBEROF_DIRECTORY_ENTRIES)
    #####:  140:    return NULL;
        -:  141:
    #####:  142:  if (IS_64BITS_PE(pe))
        -:  143:  {
    #####:  144:    optional_header_start = (uint8_t*) &pe->header64->OptionalHeader;
    #####:  145:    optional_header_size = pe->header64->FileHeader.SizeOfOptionalHeader;
    #####:  146:    directory_start = pe->header64->OptionalHeader.DataDirectory;
        -:  147:  }
        -:  148:  else
        -:  149:  {
    #####:  150:    optional_header_start = (uint8_t*) &pe->header->OptionalHeader;
    #####:  151:    optional_header_size = pe->header->FileHeader.SizeOfOptionalHeader;
    #####:  152:    directory_start = pe->header->OptionalHeader.DataDirectory;
        -:  153:  }
        -:  154:
        -:  155:  // Make sure the entry doesn't point outside of the OptionalHeader.
    #####:  156:  if ((uint8_t*) (directory_start + entry) <= optional_header_start + optional_header_size)
        -:  157:  {
    #####:  158:    if (IS_64BITS_PE(pe))
    #####:  159:      return &pe->header64->OptionalHeader.DataDirectory[entry];
        -:  160:    else
    #####:  161:      return &pe->header->OptionalHeader.DataDirectory[entry];
        -:  162:  }
        -:  163:
    #####:  164:  return NULL;
        -:  165:}
        -:  166:
        -:  167:
    #####:  168:int64_t pe_rva_to_offset(
        -:  169:    PE* pe,
        -:  170:    uint64_t rva)
        -:  171:{
    #####:  172:  PIMAGE_SECTION_HEADER section = IMAGE_FIRST_SECTION(pe->header);
        -:  173:
    #####:  174:  DWORD lowest_section_rva = 0xffffffff;
    #####:  175:  DWORD section_rva = 0;
    #####:  176:  DWORD section_offset = 0;
    #####:  177:  DWORD section_raw_size = 0;
        -:  178:
        -:  179:  int64_t result;
        -:  180:
    #####:  181:  int i = 0;
        -:  182:
    #####:  183:  int alignment = 0;
    #####:  184:  int rest = 0;
        -:  185:
    #####:  186:  while(i < yr_min(yr_le16toh(pe->header->FileHeader.NumberOfSections), MAX_PE_SECTIONS))
        -:  187:  {
    #####:  188:    if (struct_fits_in_pe(pe, section, IMAGE_SECTION_HEADER))
        -:  189:    {
    #####:  190:      if (lowest_section_rva > yr_le32toh(section->VirtualAddress))
        -:  191:      {
    #####:  192:        lowest_section_rva = yr_le32toh(section->VirtualAddress);
        -:  193:      }
        -:  194:
    #####:  195:      if (rva >= yr_le32toh(section->VirtualAddress) &&
    #####:  196:          section_rva <= yr_le32toh(section->VirtualAddress))
        -:  197:      {
        -:  198:        // Round section_offset
        -:  199:        //
        -:  200:        // Rounding everything less than 0x200 to 0 as discussed in
        -:  201:        // https://code.google.com/archive/p/corkami/wikis/PE.wiki#PointerToRawData
        -:  202:        // does not work for PE32_FILE from the test suite and for
        -:  203:        // some tinype samples where File Alignment = 4
        -:  204:        // (http://www.phreedom.org/research/tinype/).
        -:  205:        //
        -:  206:        // If FileAlignment is >= 0x200, it is apparently ignored (see
        -:  207:        // Ero Carreras's pefile.py, PE.adjust_FileAlignment).
        -:  208:
    #####:  209:        alignment = yr_min(yr_le32toh(OptionalHeader(pe, FileAlignment)), 0x200);
        -:  210:
    #####:  211:        section_rva = yr_le32toh(section->VirtualAddress);
    #####:  212:        section_offset = yr_le32toh(section->PointerToRawData);
    #####:  213:        section_raw_size = yr_le32toh(section->SizeOfRawData);
        -:  214:
    #####:  215:        if (alignment)
        -:  216:        {
    #####:  217:          rest = section_offset % alignment;
        -:  218:
    #####:  219:          if (rest)
    #####:  220:            section_offset -= rest;
        -:  221:        }
        -:  222:      }
        -:  223:
    #####:  224:      section++;
    #####:  225:      i++;
        -:  226:    }
        -:  227:    else
        -:  228:    {
    #####:  229:      return -1;
        -:  230:    }
        -:  231:  }
        -:  232:
        -:  233:  // Everything before the first section seems to get mapped straight
        -:  234:  // relative to ImageBase.
        -:  235:
    #####:  236:  if (rva < lowest_section_rva)
        -:  237:  {
    #####:  238:    section_rva = 0;
    #####:  239:    section_offset = 0;
    #####:  240:    section_raw_size = (DWORD) pe->data_size;
        -:  241:  }
        -:  242:
        -:  243:  // Many sections, have a raw (on disk) size smaller than their in-memory size.
        -:  244:  // Check for rva's that map to this sparse space, and therefore have no valid
        -:  245:  // associated file offset.
        -:  246:
    #####:  247:  if ((rva - section_rva) >= section_raw_size)
    #####:  248:    return -1;
        -:  249:
    #####:  250:  result = section_offset + (rva - section_rva);
        -:  251:
        -:  252:  // Check that the offset fits within the file.
    #####:  253:  if (result >= pe->data_size)
    #####:  254:    return -1;
        -:  255:
    #####:  256:  return result;
        -:  257:}
        -:  258:
        -:  259:
        -:  260:#if !HAVE_TIMEGM
        -:  261:#if HAVE__MKGMTIME
        -:  262:#define timegm _mkgmtime
        -:  263:#else
        -:  264:
        -:  265:#include <time.h>
        -:  266:
        -:  267:static bool is_leap(
        -:  268:    unsigned int year)
        -:  269:{
        -:  270:  year += 1900;
        -:  271:  return (year % 4) == 0 && ((year % 100) != 0 || (year % 400) == 0);
        -:  272:}
        -:  273:
        -:  274:
        -:  275:time_t timegm(
        -:  276:    struct tm *tm)
        -:  277:{
        -:  278:  static const unsigned ndays[2][12] = {
        -:  279:      {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
        -:  280:      {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}};
        -:  281:
        -:  282:  time_t res = 0;
        -:  283:  int i;
        -:  284:
        -:  285:  for (i = 70; i < tm->tm_year; ++i)
        -:  286:    res += is_leap(i) ? 366 : 365;
        -:  287:
        -:  288:  for (i = 0; i < tm->tm_mon; ++i)
        -:  289:    res += ndays[is_leap(tm->tm_year)][i];
        -:  290:
        -:  291:  res += tm->tm_mday - 1;
        -:  292:  res *= 24;
        -:  293:  res += tm->tm_hour;
        -:  294:  res *= 60;
        -:  295:  res += tm->tm_min;
        -:  296:  res *= 60;
        -:  297:  res += tm->tm_sec;
        -:  298:
        -:  299:  return res;
        -:  300:}
        -:  301:
        -:  302:#endif // HAVE__MKGMTIME
        -:  303:#endif // !HAVE_TIMEGM
        -:  304:
        -:  305:#if HAVE_LIBCRYPTO
        -:  306:
        -:  307:// Taken from http://stackoverflow.com/questions/10975542/asn1-time-conversion
        -:  308:// and cleaned up. Also uses timegm(3) instead of mktime(3).
        -:  309:
    #####:  310:time_t ASN1_get_time_t(
        -:  311:  	ASN1_TIME* time)
        -:  312:{
        -:  313:  struct tm t;
    #####:  314:  const char* str = (const char*) time->data;
    #####:  315:  size_t i = 0;
        -:  316:
    #####:  317:  memset(&t, 0, sizeof(t));
        -:  318:
    #####:  319:  if (time->type == V_ASN1_UTCTIME) /* two digit year */
        -:  320:  {
    #####:  321:    t.tm_year = (str[i++] - '0') * 10;
    #####:  322:    t.tm_year += (str[i++] - '0');
        -:  323:
    #####:  324:    if (t.tm_year < 70)
    #####:  325:      t.tm_year += 100;
        -:  326:  }
    #####:  327:  else if (time->type == V_ASN1_GENERALIZEDTIME) /* four digit year */
        -:  328:  {
    #####:  329:    t.tm_year = (str[i++] - '0') * 1000;
    #####:  330:    t.tm_year += (str[i++] - '0') * 100;
    #####:  331:    t.tm_year += (str[i++] - '0') * 10;
    #####:  332:    t.tm_year += (str[i++] - '0');
    #####:  333:    t.tm_year -= 1900;
        -:  334:  }
        -:  335:
    #####:  336:  t.tm_mon = (str[i++] - '0') * 10;
    #####:  337:  t.tm_mon += (str[i++] - '0') - 1; // -1 since January is 0 not 1.
    #####:  338:  t.tm_mday = (str[i++] - '0') * 10;
    #####:  339:  t.tm_mday += (str[i++] - '0');
    #####:  340:  t.tm_hour = (str[i++] - '0') * 10;
    #####:  341:  t.tm_hour += (str[i++] - '0');
    #####:  342:  t.tm_min = (str[i++] - '0') * 10;
    #####:  343:  t.tm_min += (str[i++] - '0');
    #####:  344:  t.tm_sec = (str[i++] - '0') * 10;
    #####:  345:  t.tm_sec += (str[i++] - '0');
        -:  346:
        -:  347:  /* Note: we did not adjust the time based on time zone information */
    #####:  348:  return timegm(&t);
        -:  349:}
        -:  350:
        -:  351:#endif
        -:  352:
        -:  353:
        -:  354:// These ordinals are taken from pefile. If a lookup fails attempt to return
        -:  355:// "ordN" and if that fails, return NULL. The caller is responsible for freeing
        -:  356:// the returned string.
        -:  357:
    #####:  358:char *ord_lookup(
        -:  359:    char *dll,
        -:  360:    uint16_t ord)
        -:  361:{
        -:  362:  char name[64];
    #####:  363:  name[0] = '\0';
        -:  364:
    #####:  365:  if (strncasecmp(dll, "WS2_32.dll", 10) == 0 ||
    #####:  366:      strncasecmp(dll, "wsock32.dll", 11) == 0)
        -:  367:  {
    #####:  368:    switch(ord) {
    #####:  369:      case 1:
    #####:  370:        sprintf(name, "accept");
    #####:  371:        break;
    #####:  372:      case 2:
    #####:  373:        sprintf(name, "bind");
    #####:  374:        break;
    #####:  375:      case 3:
    #####:  376:        sprintf(name, "closesocket");
    #####:  377:        break;
    #####:  378:      case 4:
    #####:  379:        sprintf(name, "connect");
    #####:  380:        break;
    #####:  381:      case 5:
    #####:  382:        sprintf(name, "getpeername");
    #####:  383:        break;
    #####:  384:      case 6:
    #####:  385:        sprintf(name, "getsockname");
    #####:  386:        break;
    #####:  387:      case 7:
    #####:  388:        sprintf(name, "getsockopt");
    #####:  389:        break;
    #####:  390:      case 8:
    #####:  391:        sprintf(name, "htonl");
    #####:  392:        break;
    #####:  393:      case 9:
    #####:  394:        sprintf(name, "htons");
    #####:  395:        break;
    #####:  396:      case 10:
    #####:  397:        sprintf(name, "ioctlsocket");
    #####:  398:        break;
    #####:  399:      case 11:
    #####:  400:        sprintf(name, "inet_addr");
    #####:  401:        break;
    #####:  402:      case 12:
    #####:  403:        sprintf(name, "inet_ntoa");
    #####:  404:        break;
    #####:  405:      case 13:
    #####:  406:        sprintf(name, "listen");
    #####:  407:        break;
    #####:  408:      case 14:
    #####:  409:        sprintf(name, "ntohl");
    #####:  410:        break;
    #####:  411:      case 15:
    #####:  412:        sprintf(name, "ntohs");
    #####:  413:        break;
    #####:  414:      case 16:
    #####:  415:        sprintf(name, "recv");
    #####:  416:        break;
    #####:  417:      case 17:
    #####:  418:        sprintf(name, "recvfrom");
    #####:  419:        break;
    #####:  420:      case 18:
    #####:  421:        sprintf(name, "select");
    #####:  422:        break;
    #####:  423:      case 19:
    #####:  424:        sprintf(name, "send");
    #####:  425:        break;
    #####:  426:      case 20:
    #####:  427:        sprintf(name, "sendto");
    #####:  428:        break;
    #####:  429:      case 21:
    #####:  430:        sprintf(name, "setsockopt");
    #####:  431:        break;
    #####:  432:      case 22:
    #####:  433:        sprintf(name, "shutdown");
    #####:  434:        break;
    #####:  435:      case 23:
    #####:  436:        sprintf(name, "socket");
    #####:  437:        break;
    #####:  438:      case 24:
    #####:  439:        sprintf(name, "GetAddrInfoW");
    #####:  440:        break;
    #####:  441:      case 25:
    #####:  442:        sprintf(name, "GetNameInfoW");
    #####:  443:        break;
    #####:  444:      case 26:
    #####:  445:        sprintf(name, "WSApSetPostRoutine");
    #####:  446:        break;
    #####:  447:      case 27:
    #####:  448:        sprintf(name, "FreeAddrInfoW");
    #####:  449:        break;
    #####:  450:      case 28:
    #####:  451:        sprintf(name, "WPUCompleteOverlappedRequest");
    #####:  452:        break;
    #####:  453:      case 29:
    #####:  454:        sprintf(name, "WSAAccept");
    #####:  455:        break;
    #####:  456:      case 30:
    #####:  457:        sprintf(name, "WSAAddressToStringA");
    #####:  458:        break;
    #####:  459:      case 31:
    #####:  460:        sprintf(name, "WSAAddressToStringW");
    #####:  461:        break;
    #####:  462:      case 32:
    #####:  463:        sprintf(name, "WSACloseEvent");
    #####:  464:        break;
    #####:  465:      case 33:
    #####:  466:        sprintf(name, "WSAConnect");
    #####:  467:        break;
    #####:  468:      case 34:
    #####:  469:        sprintf(name, "WSACreateEvent");
    #####:  470:        break;
    #####:  471:      case 35:
    #####:  472:        sprintf(name, "WSADuplicateSocketA");
    #####:  473:        break;
    #####:  474:      case 36:
    #####:  475:        sprintf(name, "WSADuplicateSocketW");
    #####:  476:        break;
    #####:  477:      case 37:
    #####:  478:        sprintf(name, "WSAEnumNameSpaceProvidersA");
    #####:  479:        break;
    #####:  480:      case 38:
    #####:  481:        sprintf(name, "WSAEnumNameSpaceProvidersW");
    #####:  482:        break;
    #####:  483:      case 39:
    #####:  484:        sprintf(name, "WSAEnumNetworkEvents");
    #####:  485:        break;
    #####:  486:      case 40:
    #####:  487:        sprintf(name, "WSAEnumProtocolsA");
    #####:  488:        break;
    #####:  489:      case 41:
    #####:  490:        sprintf(name, "WSAEnumProtocolsW");
    #####:  491:        break;
    #####:  492:      case 42:
    #####:  493:        sprintf(name, "WSAEventSelect");
    #####:  494:        break;
    #####:  495:      case 43:
    #####:  496:        sprintf(name, "WSAGetOverlappedResult");
    #####:  497:        break;
    #####:  498:      case 44:
    #####:  499:        sprintf(name, "WSAGetQOSByName");
    #####:  500:        break;
    #####:  501:      case 45:
    #####:  502:        sprintf(name, "WSAGetServiceClassInfoA");
    #####:  503:        break;
    #####:  504:      case 46:
    #####:  505:        sprintf(name, "WSAGetServiceClassInfoW");
    #####:  506:        break;
    #####:  507:      case 47:
    #####:  508:        sprintf(name, "WSAGetServiceClassNameByClassIdA");
    #####:  509:        break;
    #####:  510:      case 48:
    #####:  511:        sprintf(name, "WSAGetServiceClassNameByClassIdW");
    #####:  512:        break;
    #####:  513:      case 49:
    #####:  514:        sprintf(name, "WSAHtonl");
    #####:  515:        break;
    #####:  516:      case 50:
    #####:  517:        sprintf(name, "WSAHtons");
    #####:  518:        break;
    #####:  519:      case 51:
    #####:  520:        sprintf(name, "gethostbyaddr");
    #####:  521:        break;
    #####:  522:      case 52:
    #####:  523:        sprintf(name, "gethostbyname");
    #####:  524:        break;
    #####:  525:      case 53:
    #####:  526:        sprintf(name, "getprotobyname");
    #####:  527:        break;
    #####:  528:      case 54:
    #####:  529:        sprintf(name, "getprotobynumber");
    #####:  530:        break;
    #####:  531:      case 55:
    #####:  532:        sprintf(name, "getservbyname");
    #####:  533:        break;
    #####:  534:      case 56:
    #####:  535:        sprintf(name, "getservbyport");
    #####:  536:        break;
    #####:  537:      case 57:
    #####:  538:        sprintf(name, "gethostname");
    #####:  539:        break;
    #####:  540:      case 58:
    #####:  541:        sprintf(name, "WSAInstallServiceClassA");
    #####:  542:        break;
    #####:  543:      case 59:
    #####:  544:        sprintf(name, "WSAInstallServiceClassW");
    #####:  545:        break;
    #####:  546:      case 60:
    #####:  547:        sprintf(name, "WSAIoctl");
    #####:  548:        break;
    #####:  549:      case 61:
    #####:  550:        sprintf(name, "WSAJoinLeaf");
    #####:  551:        break;
    #####:  552:      case 62:
    #####:  553:        sprintf(name, "WSALookupServiceBeginA");
    #####:  554:        break;
    #####:  555:      case 63:
    #####:  556:        sprintf(name, "WSALookupServiceBeginW");
    #####:  557:        break;
    #####:  558:      case 64:
    #####:  559:        sprintf(name, "WSALookupServiceEnd");
    #####:  560:        break;
    #####:  561:      case 65:
    #####:  562:        sprintf(name, "WSALookupServiceNextA");
    #####:  563:        break;
    #####:  564:      case 66:
    #####:  565:        sprintf(name, "WSALookupServiceNextW");
    #####:  566:        break;
    #####:  567:      case 67:
    #####:  568:        sprintf(name, "WSANSPIoctl");
    #####:  569:        break;
    #####:  570:      case 68:
    #####:  571:        sprintf(name, "WSANtohl");
    #####:  572:        break;
    #####:  573:      case 69:
    #####:  574:        sprintf(name, "WSANtohs");
    #####:  575:        break;
    #####:  576:      case 70:
    #####:  577:        sprintf(name, "WSAProviderConfigChange");
    #####:  578:        break;
    #####:  579:      case 71:
    #####:  580:        sprintf(name, "WSARecv");
    #####:  581:        break;
    #####:  582:      case 72:
    #####:  583:        sprintf(name, "WSARecvDisconnect");
    #####:  584:        break;
    #####:  585:      case 73:
    #####:  586:        sprintf(name, "WSARecvFrom");
    #####:  587:        break;
    #####:  588:      case 74:
    #####:  589:        sprintf(name, "WSARemoveServiceClass");
    #####:  590:        break;
    #####:  591:      case 75:
    #####:  592:        sprintf(name, "WSAResetEvent");
    #####:  593:        break;
    #####:  594:      case 76:
    #####:  595:        sprintf(name, "WSASend");
    #####:  596:        break;
    #####:  597:      case 77:
    #####:  598:        sprintf(name, "WSASendDisconnect");
    #####:  599:        break;
    #####:  600:      case 78:
    #####:  601:        sprintf(name, "WSASendTo");
    #####:  602:        break;
    #####:  603:      case 79:
    #####:  604:        sprintf(name, "WSASetEvent");
    #####:  605:        break;
    #####:  606:      case 80:
    #####:  607:        sprintf(name, "WSASetServiceA");
    #####:  608:        break;
    #####:  609:      case 81:
    #####:  610:        sprintf(name, "WSASetServiceW");
    #####:  611:        break;
    #####:  612:      case 82:
    #####:  613:        sprintf(name, "WSASocketA");
    #####:  614:        break;
    #####:  615:      case 83:
    #####:  616:        sprintf(name, "WSASocketW");
    #####:  617:        break;
    #####:  618:      case 84:
    #####:  619:        sprintf(name, "WSAStringToAddressA");
    #####:  620:        break;
    #####:  621:      case 85:
    #####:  622:        sprintf(name, "WSAStringToAddressW");
    #####:  623:        break;
    #####:  624:      case 86:
    #####:  625:        sprintf(name, "WSAWaitForMultipleEvents");
    #####:  626:        break;
    #####:  627:      case 87:
    #####:  628:        sprintf(name, "WSCDeinstallProvider");
    #####:  629:        break;
    #####:  630:      case 88:
    #####:  631:        sprintf(name, "WSCEnableNSProvider");
    #####:  632:        break;
    #####:  633:      case 89:
    #####:  634:        sprintf(name, "WSCEnumProtocols");
    #####:  635:        break;
    #####:  636:      case 90:
    #####:  637:        sprintf(name, "WSCGetProviderPath");
    #####:  638:        break;
    #####:  639:      case 91:
    #####:  640:        sprintf(name, "WSCInstallNameSpace");
    #####:  641:        break;
    #####:  642:      case 92:
    #####:  643:        sprintf(name, "WSCInstallProvider");
    #####:  644:        break;
    #####:  645:      case 93:
    #####:  646:        sprintf(name, "WSCUnInstallNameSpace");
    #####:  647:        break;
    #####:  648:      case 94:
    #####:  649:        sprintf(name, "WSCUpdateProvider");
    #####:  650:        break;
    #####:  651:      case 95:
    #####:  652:        sprintf(name, "WSCWriteNameSpaceOrder");
    #####:  653:        break;
    #####:  654:      case 96:
    #####:  655:        sprintf(name, "WSCWriteProviderOrder");
    #####:  656:        break;
    #####:  657:      case 97:
    #####:  658:        sprintf(name, "freeaddrinfo");
    #####:  659:        break;
    #####:  660:      case 98:
    #####:  661:        sprintf(name, "getaddrinfo");
    #####:  662:        break;
    #####:  663:      case 99:
    #####:  664:        sprintf(name, "getnameinfo");
    #####:  665:        break;
    #####:  666:      case 101:
    #####:  667:        sprintf(name, "WSAAsyncSelect");
    #####:  668:        break;
    #####:  669:      case 102:
    #####:  670:        sprintf(name, "WSAAsyncGetHostByAddr");
    #####:  671:        break;
    #####:  672:      case 103:
    #####:  673:        sprintf(name, "WSAAsyncGetHostByName");
    #####:  674:        break;
    #####:  675:      case 104:
    #####:  676:        sprintf(name, "WSAAsyncGetProtoByNumber");
    #####:  677:        break;
    #####:  678:      case 105:
    #####:  679:        sprintf(name, "WSAAsyncGetProtoByName");
    #####:  680:        break;
    #####:  681:      case 106:
    #####:  682:        sprintf(name, "WSAAsyncGetServByPort");
    #####:  683:        break;
    #####:  684:      case 107:
    #####:  685:        sprintf(name, "WSAAsyncGetServByName");
    #####:  686:        break;
    #####:  687:      case 108:
    #####:  688:        sprintf(name, "WSACancelAsyncRequest");
    #####:  689:        break;
    #####:  690:      case 109:
    #####:  691:        sprintf(name, "WSASetBlockingHook");
    #####:  692:        break;
    #####:  693:      case 110:
    #####:  694:        sprintf(name, "WSAUnhookBlockingHook");
    #####:  695:        break;
    #####:  696:      case 111:
    #####:  697:        sprintf(name, "WSAGetLastError");
    #####:  698:        break;
    #####:  699:      case 112:
    #####:  700:        sprintf(name, "WSASetLastError");
    #####:  701:        break;
    #####:  702:      case 113:
    #####:  703:        sprintf(name, "WSACancelBlockingCall");
    #####:  704:        break;
    #####:  705:      case 114:
    #####:  706:        sprintf(name, "WSAIsBlocking");
    #####:  707:        break;
    #####:  708:      case 115:
    #####:  709:        sprintf(name, "WSAStartup");
    #####:  710:        break;
    #####:  711:      case 116:
    #####:  712:        sprintf(name, "WSACleanup");
    #####:  713:        break;
    #####:  714:      case 151:
    #####:  715:        sprintf(name, "__WSAFDIsSet");
    #####:  716:        break;
    #####:  717:      case 500:
    #####:  718:        sprintf(name, "WEP");
    #####:  719:        break;
    #####:  720:      default:
    #####:  721:        break;
        -:  722:    }
        -:  723:  }
    #####:  724:  else if (strncasecmp(dll, "oleaut32.dll", 12) == 0)
        -:  725:  {
    #####:  726:    switch (ord) {
    #####:  727:      case 2:
    #####:  728:        sprintf(name, "SysAllocString");
    #####:  729:        break;
    #####:  730:      case 3:
    #####:  731:        sprintf(name, "SysReAllocString");
    #####:  732:        break;
    #####:  733:      case 4:
    #####:  734:        sprintf(name, "SysAllocStringLen");
    #####:  735:        break;
    #####:  736:      case 5:
    #####:  737:        sprintf(name, "SysReAllocStringLen");
    #####:  738:        break;
    #####:  739:      case 6:
    #####:  740:        sprintf(name, "SysFreeString");
    #####:  741:        break;
    #####:  742:      case 7:
    #####:  743:        sprintf(name, "SysStringLen");
    #####:  744:        break;
    #####:  745:      case 8:
    #####:  746:        sprintf(name, "VariantInit");
    #####:  747:        break;
    #####:  748:      case 9:
    #####:  749:        sprintf(name, "VariantClear");
    #####:  750:        break;
    #####:  751:      case 10:
    #####:  752:        sprintf(name, "VariantCopy");
    #####:  753:        break;
    #####:  754:      case 11:
    #####:  755:        sprintf(name, "VariantCopyInd");
    #####:  756:        break;
    #####:  757:      case 12:
    #####:  758:        sprintf(name, "VariantChangeType");
    #####:  759:        break;
    #####:  760:      case 13:
    #####:  761:        sprintf(name, "VariantTimeToDosDateTime");
    #####:  762:        break;
    #####:  763:      case 14:
    #####:  764:        sprintf(name, "DosDateTimeToVariantTime");
    #####:  765:        break;
    #####:  766:      case 15:
    #####:  767:        sprintf(name, "SafeArrayCreate");
    #####:  768:        break;
    #####:  769:      case 16:
    #####:  770:        sprintf(name, "SafeArrayDestroy");
    #####:  771:        break;
    #####:  772:      case 17:
    #####:  773:        sprintf(name, "SafeArrayGetDim");
    #####:  774:        break;
    #####:  775:      case 18:
    #####:  776:        sprintf(name, "SafeArrayGetElemsize");
    #####:  777:        break;
    #####:  778:      case 19:
    #####:  779:        sprintf(name, "SafeArrayGetUBound");
    #####:  780:        break;
    #####:  781:      case 20:
    #####:  782:        sprintf(name, "SafeArrayGetLBound");
    #####:  783:        break;
    #####:  784:      case 21:
    #####:  785:        sprintf(name, "SafeArrayLock");
    #####:  786:        break;
    #####:  787:      case 22:
    #####:  788:        sprintf(name, "SafeArrayUnlock");
    #####:  789:        break;
    #####:  790:      case 23:
    #####:  791:        sprintf(name, "SafeArrayAccessData");
    #####:  792:        break;
    #####:  793:      case 24:
    #####:  794:        sprintf(name, "SafeArrayUnaccessData");
    #####:  795:        break;
    #####:  796:      case 25:
    #####:  797:        sprintf(name, "SafeArrayGetElement");
    #####:  798:        break;
    #####:  799:      case 26:
    #####:  800:        sprintf(name, "SafeArrayPutElement");
    #####:  801:        break;
    #####:  802:      case 27:
    #####:  803:        sprintf(name, "SafeArrayCopy");
    #####:  804:        break;
    #####:  805:      case 28:
    #####:  806:        sprintf(name, "DispGetParam");
    #####:  807:        break;
    #####:  808:      case 29:
    #####:  809:        sprintf(name, "DispGetIDsOfNames");
    #####:  810:        break;
    #####:  811:      case 30:
    #####:  812:        sprintf(name, "DispInvoke");
    #####:  813:        break;
    #####:  814:      case 31:
    #####:  815:        sprintf(name, "CreateDispTypeInfo");
    #####:  816:        break;
    #####:  817:      case 32:
    #####:  818:        sprintf(name, "CreateStdDispatch");
    #####:  819:        break;
    #####:  820:      case 33:
    #####:  821:        sprintf(name, "RegisterActiveObject");
    #####:  822:        break;
    #####:  823:      case 34:
    #####:  824:        sprintf(name, "RevokeActiveObject");
    #####:  825:        break;
    #####:  826:      case 35:
    #####:  827:        sprintf(name, "GetActiveObject");
    #####:  828:        break;
    #####:  829:      case 36:
    #####:  830:        sprintf(name, "SafeArrayAllocDescriptor");
    #####:  831:        break;
    #####:  832:      case 37:
    #####:  833:        sprintf(name, "SafeArrayAllocData");
    #####:  834:        break;
    #####:  835:      case 38:
    #####:  836:        sprintf(name, "SafeArrayDestroyDescriptor");
    #####:  837:        break;
    #####:  838:      case 39:
    #####:  839:        sprintf(name, "SafeArrayDestroyData");
    #####:  840:        break;
    #####:  841:      case 40:
    #####:  842:        sprintf(name, "SafeArrayRedim");
    #####:  843:        break;
    #####:  844:      case 41:
    #####:  845:        sprintf(name, "SafeArrayAllocDescriptorEx");
    #####:  846:        break;
    #####:  847:      case 42:
    #####:  848:        sprintf(name, "SafeArrayCreateEx");
    #####:  849:        break;
    #####:  850:      case 43:
    #####:  851:        sprintf(name, "SafeArrayCreateVectorEx");
    #####:  852:        break;
    #####:  853:      case 44:
    #####:  854:        sprintf(name, "SafeArraySetRecordInfo");
    #####:  855:        break;
    #####:  856:      case 45:
    #####:  857:        sprintf(name, "SafeArrayGetRecordInfo");
    #####:  858:        break;
    #####:  859:      case 46:
    #####:  860:        sprintf(name, "VarParseNumFromStr");
    #####:  861:        break;
    #####:  862:      case 47:
    #####:  863:        sprintf(name, "VarNumFromParseNum");
    #####:  864:        break;
    #####:  865:      case 48:
    #####:  866:        sprintf(name, "VarI2FromUI1");
    #####:  867:        break;
    #####:  868:      case 49:
    #####:  869:        sprintf(name, "VarI2FromI4");
    #####:  870:        break;
    #####:  871:      case 50:
    #####:  872:        sprintf(name, "VarI2FromR4");
    #####:  873:        break;
    #####:  874:      case 51:
    #####:  875:        sprintf(name, "VarI2FromR8");
    #####:  876:        break;
    #####:  877:      case 52:
    #####:  878:        sprintf(name, "VarI2FromCy");
    #####:  879:        break;
    #####:  880:      case 53:
    #####:  881:        sprintf(name, "VarI2FromDate");
    #####:  882:        break;
    #####:  883:      case 54:
    #####:  884:        sprintf(name, "VarI2FromStr");
    #####:  885:        break;
    #####:  886:      case 55:
    #####:  887:        sprintf(name, "VarI2FromDisp");
    #####:  888:        break;
    #####:  889:      case 56:
    #####:  890:        sprintf(name, "VarI2FromBool");
    #####:  891:        break;
    #####:  892:      case 57:
    #####:  893:        sprintf(name, "SafeArraySetIID");
    #####:  894:        break;
    #####:  895:      case 58:
    #####:  896:        sprintf(name, "VarI4FromUI1");
    #####:  897:        break;
    #####:  898:      case 59:
    #####:  899:        sprintf(name, "VarI4FromI2");
    #####:  900:        break;
    #####:  901:      case 60:
    #####:  902:        sprintf(name, "VarI4FromR4");
    #####:  903:        break;
    #####:  904:      case 61:
    #####:  905:        sprintf(name, "VarI4FromR8");
    #####:  906:        break;
    #####:  907:      case 62:
    #####:  908:        sprintf(name, "VarI4FromCy");
    #####:  909:        break;
    #####:  910:      case 63:
    #####:  911:        sprintf(name, "VarI4FromDate");
    #####:  912:        break;
    #####:  913:      case 64:
    #####:  914:        sprintf(name, "VarI4FromStr");
    #####:  915:        break;
    #####:  916:      case 65:
    #####:  917:        sprintf(name, "VarI4FromDisp");
    #####:  918:        break;
    #####:  919:      case 66:
    #####:  920:        sprintf(name, "VarI4FromBool");
    #####:  921:        break;
    #####:  922:      case 67:
    #####:  923:        sprintf(name, "SafeArrayGetIID");
    #####:  924:        break;
    #####:  925:      case 68:
    #####:  926:        sprintf(name, "VarR4FromUI1");
    #####:  927:        break;
    #####:  928:      case 69:
    #####:  929:        sprintf(name, "VarR4FromI2");
    #####:  930:        break;
    #####:  931:      case 70:
    #####:  932:        sprintf(name, "VarR4FromI4");
    #####:  933:        break;
    #####:  934:      case 71:
    #####:  935:        sprintf(name, "VarR4FromR8");
    #####:  936:        break;
    #####:  937:      case 72:
    #####:  938:        sprintf(name, "VarR4FromCy");
    #####:  939:        break;
    #####:  940:      case 73:
    #####:  941:        sprintf(name, "VarR4FromDate");
    #####:  942:        break;
    #####:  943:      case 74:
    #####:  944:        sprintf(name, "VarR4FromStr");
    #####:  945:        break;
    #####:  946:      case 75:
    #####:  947:        sprintf(name, "VarR4FromDisp");
    #####:  948:        break;
    #####:  949:      case 76:
    #####:  950:        sprintf(name, "VarR4FromBool");
    #####:  951:        break;
    #####:  952:      case 77:
    #####:  953:        sprintf(name, "SafeArrayGetVartype");
    #####:  954:        break;
    #####:  955:      case 78:
    #####:  956:        sprintf(name, "VarR8FromUI1");
    #####:  957:        break;
    #####:  958:      case 79:
    #####:  959:        sprintf(name, "VarR8FromI2");
    #####:  960:        break;
    #####:  961:      case 80:
    #####:  962:        sprintf(name, "VarR8FromI4");
    #####:  963:        break;
    #####:  964:      case 81:
    #####:  965:        sprintf(name, "VarR8FromR4");
    #####:  966:        break;
    #####:  967:      case 82:
    #####:  968:        sprintf(name, "VarR8FromCy");
    #####:  969:        break;
    #####:  970:      case 83:
    #####:  971:        sprintf(name, "VarR8FromDate");
    #####:  972:        break;
    #####:  973:      case 84:
    #####:  974:        sprintf(name, "VarR8FromStr");
    #####:  975:        break;
    #####:  976:      case 85:
    #####:  977:        sprintf(name, "VarR8FromDisp");
    #####:  978:        break;
    #####:  979:      case 86:
    #####:  980:        sprintf(name, "VarR8FromBool");
    #####:  981:        break;
    #####:  982:      case 87:
    #####:  983:        sprintf(name, "VarFormat");
    #####:  984:        break;
    #####:  985:      case 88:
    #####:  986:        sprintf(name, "VarDateFromUI1");
    #####:  987:        break;
    #####:  988:      case 89:
    #####:  989:        sprintf(name, "VarDateFromI2");
    #####:  990:        break;
    #####:  991:      case 90:
    #####:  992:        sprintf(name, "VarDateFromI4");
    #####:  993:        break;
    #####:  994:      case 91:
    #####:  995:        sprintf(name, "VarDateFromR4");
    #####:  996:        break;
    #####:  997:      case 92:
    #####:  998:        sprintf(name, "VarDateFromR8");
    #####:  999:        break;
    #####: 1000:      case 93:
    #####: 1001:        sprintf(name, "VarDateFromCy");
    #####: 1002:        break;
    #####: 1003:      case 94:
    #####: 1004:        sprintf(name, "VarDateFromStr");
    #####: 1005:        break;
    #####: 1006:      case 95:
    #####: 1007:        sprintf(name, "VarDateFromDisp");
    #####: 1008:        break;
    #####: 1009:      case 96:
    #####: 1010:        sprintf(name, "VarDateFromBool");
    #####: 1011:        break;
    #####: 1012:      case 97:
    #####: 1013:        sprintf(name, "VarFormatDateTime");
    #####: 1014:        break;
    #####: 1015:      case 98:
    #####: 1016:        sprintf(name, "VarCyFromUI1");
    #####: 1017:        break;
    #####: 1018:      case 99:
    #####: 1019:        sprintf(name, "VarCyFromI2");
    #####: 1020:        break;
    #####: 1021:      case 100:
    #####: 1022:        sprintf(name, "VarCyFromI4");
    #####: 1023:        break;
    #####: 1024:      case 101:
    #####: 1025:        sprintf(name, "VarCyFromR4");
    #####: 1026:        break;
    #####: 1027:      case 102:
    #####: 1028:        sprintf(name, "VarCyFromR8");
    #####: 1029:        break;
    #####: 1030:      case 103:
    #####: 1031:        sprintf(name, "VarCyFromDate");
    #####: 1032:        break;
    #####: 1033:      case 104:
    #####: 1034:        sprintf(name, "VarCyFromStr");
    #####: 1035:        break;
    #####: 1036:      case 105:
    #####: 1037:        sprintf(name, "VarCyFromDisp");
    #####: 1038:        break;
    #####: 1039:      case 106:
    #####: 1040:        sprintf(name, "VarCyFromBool");
    #####: 1041:        break;
    #####: 1042:      case 107:
    #####: 1043:        sprintf(name, "VarFormatNumber");
    #####: 1044:        break;
    #####: 1045:      case 108:
    #####: 1046:        sprintf(name, "VarBstrFromUI1");
    #####: 1047:        break;
    #####: 1048:      case 109:
    #####: 1049:        sprintf(name, "VarBstrFromI2");
    #####: 1050:        break;
    #####: 1051:      case 110:
    #####: 1052:        sprintf(name, "VarBstrFromI4");
    #####: 1053:        break;
    #####: 1054:      case 111:
    #####: 1055:        sprintf(name, "VarBstrFromR4");
    #####: 1056:        break;
    #####: 1057:      case 112:
    #####: 1058:        sprintf(name, "VarBstrFromR8");
    #####: 1059:        break;
    #####: 1060:      case 113:
    #####: 1061:        sprintf(name, "VarBstrFromCy");
    #####: 1062:        break;
    #####: 1063:      case 114:
    #####: 1064:        sprintf(name, "VarBstrFromDate");
    #####: 1065:        break;
    #####: 1066:      case 115:
    #####: 1067:        sprintf(name, "VarBstrFromDisp");
    #####: 1068:        break;
    #####: 1069:      case 116:
    #####: 1070:        sprintf(name, "VarBstrFromBool");
    #####: 1071:        break;
    #####: 1072:      case 117:
    #####: 1073:        sprintf(name, "VarFormatPercent");
    #####: 1074:        break;
    #####: 1075:      case 118:
    #####: 1076:        sprintf(name, "VarBoolFromUI1");
    #####: 1077:        break;
    #####: 1078:      case 119:
    #####: 1079:        sprintf(name, "VarBoolFromI2");
    #####: 1080:        break;
    #####: 1081:      case 120:
    #####: 1082:        sprintf(name, "VarBoolFromI4");
    #####: 1083:        break;
    #####: 1084:      case 121:
    #####: 1085:        sprintf(name, "VarBoolFromR4");
    #####: 1086:        break;
    #####: 1087:      case 122:
    #####: 1088:        sprintf(name, "VarBoolFromR8");
    #####: 1089:        break;
    #####: 1090:      case 123:
    #####: 1091:        sprintf(name, "VarBoolFromDate");
    #####: 1092:        break;
    #####: 1093:      case 124:
    #####: 1094:        sprintf(name, "VarBoolFromCy");
    #####: 1095:        break;
    #####: 1096:      case 125:
    #####: 1097:        sprintf(name, "VarBoolFromStr");
    #####: 1098:        break;
    #####: 1099:      case 126:
    #####: 1100:        sprintf(name, "VarBoolFromDisp");
    #####: 1101:        break;
    #####: 1102:      case 127:
    #####: 1103:        sprintf(name, "VarFormatCurrency");
    #####: 1104:        break;
    #####: 1105:      case 128:
    #####: 1106:        sprintf(name, "VarWeekdayName");
    #####: 1107:        break;
    #####: 1108:      case 129:
    #####: 1109:        sprintf(name, "VarMonthName");
    #####: 1110:        break;
    #####: 1111:      case 130:
    #####: 1112:        sprintf(name, "VarUI1FromI2");
    #####: 1113:        break;
    #####: 1114:      case 131:
    #####: 1115:        sprintf(name, "VarUI1FromI4");
    #####: 1116:        break;
    #####: 1117:      case 132:
    #####: 1118:        sprintf(name, "VarUI1FromR4");
    #####: 1119:        break;
    #####: 1120:      case 133:
    #####: 1121:        sprintf(name, "VarUI1FromR8");
    #####: 1122:        break;
    #####: 1123:      case 134:
    #####: 1124:        sprintf(name, "VarUI1FromCy");
    #####: 1125:        break;
    #####: 1126:      case 135:
    #####: 1127:        sprintf(name, "VarUI1FromDate");
    #####: 1128:        break;
    #####: 1129:      case 136:
    #####: 1130:        sprintf(name, "VarUI1FromStr");
    #####: 1131:        break;
    #####: 1132:      case 137:
    #####: 1133:        sprintf(name, "VarUI1FromDisp");
    #####: 1134:        break;
    #####: 1135:      case 138:
    #####: 1136:        sprintf(name, "VarUI1FromBool");
    #####: 1137:        break;
    #####: 1138:      case 139:
    #####: 1139:        sprintf(name, "VarFormatFromTokens");
    #####: 1140:        break;
    #####: 1141:      case 140:
    #####: 1142:        sprintf(name, "VarTokenizeFormatString");
    #####: 1143:        break;
    #####: 1144:      case 141:
    #####: 1145:        sprintf(name, "VarAdd");
    #####: 1146:        break;
    #####: 1147:      case 142:
    #####: 1148:        sprintf(name, "VarAnd");
    #####: 1149:        break;
    #####: 1150:      case 143:
    #####: 1151:        sprintf(name, "VarDiv");
    #####: 1152:        break;
    #####: 1153:      case 144:
    #####: 1154:        sprintf(name, "DllCanUnloadNow");
    #####: 1155:        break;
    #####: 1156:      case 145:
    #####: 1157:        sprintf(name, "DllGetClassObject");
    #####: 1158:        break;
    #####: 1159:      case 146:
    #####: 1160:        sprintf(name, "DispCallFunc");
    #####: 1161:        break;
    #####: 1162:      case 147:
    #####: 1163:        sprintf(name, "VariantChangeTypeEx");
    #####: 1164:        break;
    #####: 1165:      case 148:
    #####: 1166:        sprintf(name, "SafeArrayPtrOfIndex");
    #####: 1167:        break;
    #####: 1168:      case 149:
    #####: 1169:        sprintf(name, "SysStringByteLen");
    #####: 1170:        break;
    #####: 1171:      case 150:
    #####: 1172:        sprintf(name, "SysAllocStringByteLen");
    #####: 1173:        break;
    #####: 1174:      case 151:
    #####: 1175:        sprintf(name, "DllRegisterServer");
    #####: 1176:        break;
    #####: 1177:      case 152:
    #####: 1178:        sprintf(name, "VarEqv");
    #####: 1179:        break;
    #####: 1180:      case 153:
    #####: 1181:        sprintf(name, "VarIdiv");
    #####: 1182:        break;
    #####: 1183:      case 154:
    #####: 1184:        sprintf(name, "VarImp");
    #####: 1185:        break;
    #####: 1186:      case 155:
    #####: 1187:        sprintf(name, "VarMod");
    #####: 1188:        break;
    #####: 1189:      case 156:
    #####: 1190:        sprintf(name, "VarMul");
    #####: 1191:        break;
    #####: 1192:      case 157:
    #####: 1193:        sprintf(name, "VarOr");
    #####: 1194:        break;
    #####: 1195:      case 158:
    #####: 1196:        sprintf(name, "VarPow");
    #####: 1197:        break;
    #####: 1198:      case 159:
    #####: 1199:        sprintf(name, "VarSub");
    #####: 1200:        break;
    #####: 1201:      case 160:
    #####: 1202:        sprintf(name, "CreateTypeLib");
    #####: 1203:        break;
    #####: 1204:      case 161:
    #####: 1205:        sprintf(name, "LoadTypeLib");
    #####: 1206:        break;
    #####: 1207:      case 162:
    #####: 1208:        sprintf(name, "LoadRegTypeLib");
    #####: 1209:        break;
    #####: 1210:      case 163:
    #####: 1211:        sprintf(name, "RegisterTypeLib");
    #####: 1212:        break;
    #####: 1213:      case 164:
    #####: 1214:        sprintf(name, "QueryPathOfRegTypeLib");
    #####: 1215:        break;
    #####: 1216:      case 165:
    #####: 1217:        sprintf(name, "LHashValOfNameSys");
    #####: 1218:        break;
    #####: 1219:      case 166:
    #####: 1220:        sprintf(name, "LHashValOfNameSysA");
    #####: 1221:        break;
    #####: 1222:      case 167:
    #####: 1223:        sprintf(name, "VarXor");
    #####: 1224:        break;
    #####: 1225:      case 168:
    #####: 1226:        sprintf(name, "VarAbs");
    #####: 1227:        break;
    #####: 1228:      case 169:
    #####: 1229:        sprintf(name, "VarFix");
    #####: 1230:        break;
    #####: 1231:      case 170:
    #####: 1232:        sprintf(name, "OaBuildVersion");
    #####: 1233:        break;
    #####: 1234:      case 171:
    #####: 1235:        sprintf(name, "ClearCustData");
    #####: 1236:        break;
    #####: 1237:      case 172:
    #####: 1238:        sprintf(name, "VarInt");
    #####: 1239:        break;
    #####: 1240:      case 173:
    #####: 1241:        sprintf(name, "VarNeg");
    #####: 1242:        break;
    #####: 1243:      case 174:
    #####: 1244:        sprintf(name, "VarNot");
    #####: 1245:        break;
    #####: 1246:      case 175:
    #####: 1247:        sprintf(name, "VarRound");
    #####: 1248:        break;
    #####: 1249:      case 176:
    #####: 1250:        sprintf(name, "VarCmp");
    #####: 1251:        break;
    #####: 1252:      case 177:
    #####: 1253:        sprintf(name, "VarDecAdd");
    #####: 1254:        break;
    #####: 1255:      case 178:
    #####: 1256:        sprintf(name, "VarDecDiv");
    #####: 1257:        break;
    #####: 1258:      case 179:
    #####: 1259:        sprintf(name, "VarDecMul");
    #####: 1260:        break;
    #####: 1261:      case 180:
    #####: 1262:        sprintf(name, "CreateTypeLib2");
    #####: 1263:        break;
    #####: 1264:      case 181:
    #####: 1265:        sprintf(name, "VarDecSub");
    #####: 1266:        break;
    #####: 1267:      case 182:
    #####: 1268:        sprintf(name, "VarDecAbs");
    #####: 1269:        break;
    #####: 1270:      case 183:
    #####: 1271:        sprintf(name, "LoadTypeLibEx");
    #####: 1272:        break;
    #####: 1273:      case 184:
    #####: 1274:        sprintf(name, "SystemTimeToVariantTime");
    #####: 1275:        break;
    #####: 1276:      case 185:
    #####: 1277:        sprintf(name, "VariantTimeToSystemTime");
    #####: 1278:        break;
    #####: 1279:      case 186:
    #####: 1280:        sprintf(name, "UnRegisterTypeLib");
    #####: 1281:        break;
    #####: 1282:      case 187:
    #####: 1283:        sprintf(name, "VarDecFix");
    #####: 1284:        break;
    #####: 1285:      case 188:
    #####: 1286:        sprintf(name, "VarDecInt");
    #####: 1287:        break;
    #####: 1288:      case 189:
    #####: 1289:        sprintf(name, "VarDecNeg");
    #####: 1290:        break;
    #####: 1291:      case 190:
    #####: 1292:        sprintf(name, "VarDecFromUI1");
    #####: 1293:        break;
    #####: 1294:      case 191:
    #####: 1295:        sprintf(name, "VarDecFromI2");
    #####: 1296:        break;
    #####: 1297:      case 192:
    #####: 1298:        sprintf(name, "VarDecFromI4");
    #####: 1299:        break;
    #####: 1300:      case 193:
    #####: 1301:        sprintf(name, "VarDecFromR4");
    #####: 1302:        break;
    #####: 1303:      case 194:
    #####: 1304:        sprintf(name, "VarDecFromR8");
    #####: 1305:        break;
    #####: 1306:      case 195:
    #####: 1307:        sprintf(name, "VarDecFromDate");
    #####: 1308:        break;
    #####: 1309:      case 196:
    #####: 1310:        sprintf(name, "VarDecFromCy");
    #####: 1311:        break;
    #####: 1312:      case 197:
    #####: 1313:        sprintf(name, "VarDecFromStr");
    #####: 1314:        break;
    #####: 1315:      case 198:
    #####: 1316:        sprintf(name, "VarDecFromDisp");
    #####: 1317:        break;
    #####: 1318:      case 199:
    #####: 1319:        sprintf(name, "VarDecFromBool");
    #####: 1320:        break;
    #####: 1321:      case 200:
    #####: 1322:        sprintf(name, "GetErrorInfo");
    #####: 1323:        break;
    #####: 1324:      case 201:
    #####: 1325:        sprintf(name, "SetErrorInfo");
    #####: 1326:        break;
    #####: 1327:      case 202:
    #####: 1328:        sprintf(name, "CreateErrorInfo");
    #####: 1329:        break;
    #####: 1330:      case 203:
    #####: 1331:        sprintf(name, "VarDecRound");
    #####: 1332:        break;
    #####: 1333:      case 204:
    #####: 1334:        sprintf(name, "VarDecCmp");
    #####: 1335:        break;
    #####: 1336:      case 205:
    #####: 1337:        sprintf(name, "VarI2FromI1");
    #####: 1338:        break;
    #####: 1339:      case 206:
    #####: 1340:        sprintf(name, "VarI2FromUI2");
    #####: 1341:        break;
    #####: 1342:      case 207:
    #####: 1343:        sprintf(name, "VarI2FromUI4");
    #####: 1344:        break;
    #####: 1345:      case 208:
    #####: 1346:        sprintf(name, "VarI2FromDec");
    #####: 1347:        break;
    #####: 1348:      case 209:
    #####: 1349:        sprintf(name, "VarI4FromI1");
    #####: 1350:        break;
    #####: 1351:      case 210:
    #####: 1352:        sprintf(name, "VarI4FromUI2");
    #####: 1353:        break;
    #####: 1354:      case 211:
    #####: 1355:        sprintf(name, "VarI4FromUI4");
    #####: 1356:        break;
    #####: 1357:      case 212:
    #####: 1358:        sprintf(name, "VarI4FromDec");
    #####: 1359:        break;
    #####: 1360:      case 213:
    #####: 1361:        sprintf(name, "VarR4FromI1");
    #####: 1362:        break;
    #####: 1363:      case 214:
    #####: 1364:        sprintf(name, "VarR4FromUI2");
    #####: 1365:        break;
    #####: 1366:      case 215:
    #####: 1367:        sprintf(name, "VarR4FromUI4");
    #####: 1368:        break;
    #####: 1369:      case 216:
    #####: 1370:        sprintf(name, "VarR4FromDec");
    #####: 1371:        break;
    #####: 1372:      case 217:
    #####: 1373:        sprintf(name, "VarR8FromI1");
    #####: 1374:        break;
    #####: 1375:      case 218:
    #####: 1376:        sprintf(name, "VarR8FromUI2");
    #####: 1377:        break;
    #####: 1378:      case 219:
    #####: 1379:        sprintf(name, "VarR8FromUI4");
    #####: 1380:        break;
    #####: 1381:      case 220:
    #####: 1382:        sprintf(name, "VarR8FromDec");
    #####: 1383:        break;
    #####: 1384:      case 221:
    #####: 1385:        sprintf(name, "VarDateFromI1");
    #####: 1386:        break;
    #####: 1387:      case 222:
    #####: 1388:        sprintf(name, "VarDateFromUI2");
    #####: 1389:        break;
    #####: 1390:      case 223:
    #####: 1391:        sprintf(name, "VarDateFromUI4");
    #####: 1392:        break;
    #####: 1393:      case 224:
    #####: 1394:        sprintf(name, "VarDateFromDec");
    #####: 1395:        break;
    #####: 1396:      case 225:
    #####: 1397:        sprintf(name, "VarCyFromI1");
    #####: 1398:        break;
    #####: 1399:      case 226:
    #####: 1400:        sprintf(name, "VarCyFromUI2");
    #####: 1401:        break;
    #####: 1402:      case 227:
    #####: 1403:        sprintf(name, "VarCyFromUI4");
    #####: 1404:        break;
    #####: 1405:      case 228:
    #####: 1406:        sprintf(name, "VarCyFromDec");
    #####: 1407:        break;
    #####: 1408:      case 229:
    #####: 1409:        sprintf(name, "VarBstrFromI1");
    #####: 1410:        break;
    #####: 1411:      case 230:
    #####: 1412:        sprintf(name, "VarBstrFromUI2");
    #####: 1413:        break;
    #####: 1414:      case 231:
    #####: 1415:        sprintf(name, "VarBstrFromUI4");
    #####: 1416:        break;
    #####: 1417:      case 232:
    #####: 1418:        sprintf(name, "VarBstrFromDec");
    #####: 1419:        break;
    #####: 1420:      case 233:
    #####: 1421:        sprintf(name, "VarBoolFromI1");
    #####: 1422:        break;
    #####: 1423:      case 234:
    #####: 1424:        sprintf(name, "VarBoolFromUI2");
    #####: 1425:        break;
    #####: 1426:      case 235:
    #####: 1427:        sprintf(name, "VarBoolFromUI4");
    #####: 1428:        break;
    #####: 1429:      case 236:
    #####: 1430:        sprintf(name, "VarBoolFromDec");
    #####: 1431:        break;
    #####: 1432:      case 237:
    #####: 1433:        sprintf(name, "VarUI1FromI1");
    #####: 1434:        break;
    #####: 1435:      case 238:
    #####: 1436:        sprintf(name, "VarUI1FromUI2");
    #####: 1437:        break;
    #####: 1438:      case 239:
    #####: 1439:        sprintf(name, "VarUI1FromUI4");
    #####: 1440:        break;
    #####: 1441:      case 240:
    #####: 1442:        sprintf(name, "VarUI1FromDec");
    #####: 1443:        break;
    #####: 1444:      case 241:
    #####: 1445:        sprintf(name, "VarDecFromI1");
    #####: 1446:        break;
    #####: 1447:      case 242:
    #####: 1448:        sprintf(name, "VarDecFromUI2");
    #####: 1449:        break;
    #####: 1450:      case 243:
    #####: 1451:        sprintf(name, "VarDecFromUI4");
    #####: 1452:        break;
    #####: 1453:      case 244:
    #####: 1454:        sprintf(name, "VarI1FromUI1");
    #####: 1455:        break;
    #####: 1456:      case 245:
    #####: 1457:        sprintf(name, "VarI1FromI2");
    #####: 1458:        break;
    #####: 1459:      case 246:
    #####: 1460:        sprintf(name, "VarI1FromI4");
    #####: 1461:        break;
    #####: 1462:      case 247:
    #####: 1463:        sprintf(name, "VarI1FromR4");
    #####: 1464:        break;
    #####: 1465:      case 248:
    #####: 1466:        sprintf(name, "VarI1FromR8");
    #####: 1467:        break;
    #####: 1468:      case 249:
    #####: 1469:        sprintf(name, "VarI1FromDate");
    #####: 1470:        break;
    #####: 1471:      case 250:
    #####: 1472:        sprintf(name, "VarI1FromCy");
    #####: 1473:        break;
    #####: 1474:      case 251:
    #####: 1475:        sprintf(name, "VarI1FromStr");
    #####: 1476:        break;
    #####: 1477:      case 252:
    #####: 1478:        sprintf(name, "VarI1FromDisp");
    #####: 1479:        break;
    #####: 1480:      case 253:
    #####: 1481:        sprintf(name, "VarI1FromBool");
    #####: 1482:        break;
    #####: 1483:      case 254:
    #####: 1484:        sprintf(name, "VarI1FromUI2");
    #####: 1485:        break;
    #####: 1486:      case 255:
    #####: 1487:        sprintf(name, "VarI1FromUI4");
    #####: 1488:        break;
    #####: 1489:      case 256:
    #####: 1490:        sprintf(name, "VarI1FromDec");
    #####: 1491:        break;
    #####: 1492:      case 257:
    #####: 1493:        sprintf(name, "VarUI2FromUI1");
    #####: 1494:        break;
    #####: 1495:      case 258:
    #####: 1496:        sprintf(name, "VarUI2FromI2");
    #####: 1497:        break;
    #####: 1498:      case 259:
    #####: 1499:        sprintf(name, "VarUI2FromI4");
    #####: 1500:        break;
    #####: 1501:      case 260:
    #####: 1502:        sprintf(name, "VarUI2FromR4");
    #####: 1503:        break;
    #####: 1504:      case 261:
    #####: 1505:        sprintf(name, "VarUI2FromR8");
    #####: 1506:        break;
    #####: 1507:      case 262:
    #####: 1508:        sprintf(name, "VarUI2FromDate");
    #####: 1509:        break;
    #####: 1510:      case 263:
    #####: 1511:        sprintf(name, "VarUI2FromCy");
    #####: 1512:        break;
    #####: 1513:      case 264:
    #####: 1514:        sprintf(name, "VarUI2FromStr");
    #####: 1515:        break;
    #####: 1516:      case 265:
    #####: 1517:        sprintf(name, "VarUI2FromDisp");
    #####: 1518:        break;
    #####: 1519:      case 266:
    #####: 1520:        sprintf(name, "VarUI2FromBool");
    #####: 1521:        break;
    #####: 1522:      case 267:
    #####: 1523:        sprintf(name, "VarUI2FromI1");
    #####: 1524:        break;
    #####: 1525:      case 268:
    #####: 1526:        sprintf(name, "VarUI2FromUI4");
    #####: 1527:        break;
    #####: 1528:      case 269:
    #####: 1529:        sprintf(name, "VarUI2FromDec");
    #####: 1530:        break;
    #####: 1531:      case 270:
    #####: 1532:        sprintf(name, "VarUI4FromUI1");
    #####: 1533:        break;
    #####: 1534:      case 271:
    #####: 1535:        sprintf(name, "VarUI4FromI2");
    #####: 1536:        break;
    #####: 1537:      case 272:
    #####: 1538:        sprintf(name, "VarUI4FromI4");
    #####: 1539:        break;
    #####: 1540:      case 273:
    #####: 1541:        sprintf(name, "VarUI4FromR4");
    #####: 1542:        break;
    #####: 1543:      case 274:
    #####: 1544:        sprintf(name, "VarUI4FromR8");
    #####: 1545:        break;
    #####: 1546:      case 275:
    #####: 1547:        sprintf(name, "VarUI4FromDate");
    #####: 1548:        break;
    #####: 1549:      case 276:
    #####: 1550:        sprintf(name, "VarUI4FromCy");
    #####: 1551:        break;
    #####: 1552:      case 277:
    #####: 1553:        sprintf(name, "VarUI4FromStr");
    #####: 1554:        break;
    #####: 1555:      case 278:
    #####: 1556:        sprintf(name, "VarUI4FromDisp");
    #####: 1557:        break;
    #####: 1558:      case 279:
    #####: 1559:        sprintf(name, "VarUI4FromBool");
    #####: 1560:        break;
    #####: 1561:      case 280:
    #####: 1562:        sprintf(name, "VarUI4FromI1");
    #####: 1563:        break;
    #####: 1564:      case 281:
    #####: 1565:        sprintf(name, "VarUI4FromUI2");
    #####: 1566:        break;
    #####: 1567:      case 282:
    #####: 1568:        sprintf(name, "VarUI4FromDec");
    #####: 1569:        break;
    #####: 1570:      case 283:
    #####: 1571:        sprintf(name, "BSTR_UserSize");
    #####: 1572:        break;
    #####: 1573:      case 284:
    #####: 1574:        sprintf(name, "BSTR_UserMarshal");
    #####: 1575:        break;
    #####: 1576:      case 285:
    #####: 1577:        sprintf(name, "BSTR_UserUnmarshal");
    #####: 1578:        break;
    #####: 1579:      case 286:
    #####: 1580:        sprintf(name, "BSTR_UserFree");
    #####: 1581:        break;
    #####: 1582:      case 287:
    #####: 1583:        sprintf(name, "VARIANT_UserSize");
    #####: 1584:        break;
    #####: 1585:      case 288:
    #####: 1586:        sprintf(name, "VARIANT_UserMarshal");
    #####: 1587:        break;
    #####: 1588:      case 289:
    #####: 1589:        sprintf(name, "VARIANT_UserUnmarshal");
    #####: 1590:        break;
    #####: 1591:      case 290:
    #####: 1592:        sprintf(name, "VARIANT_UserFree");
    #####: 1593:        break;
    #####: 1594:      case 291:
    #####: 1595:        sprintf(name, "LPSAFEARRAY_UserSize");
    #####: 1596:        break;
    #####: 1597:      case 292:
    #####: 1598:        sprintf(name, "LPSAFEARRAY_UserMarshal");
    #####: 1599:        break;
    #####: 1600:      case 293:
    #####: 1601:        sprintf(name, "LPSAFEARRAY_UserUnmarshal");
    #####: 1602:        break;
    #####: 1603:      case 294:
    #####: 1604:        sprintf(name, "LPSAFEARRAY_UserFree");
    #####: 1605:        break;
    #####: 1606:      case 295:
    #####: 1607:        sprintf(name, "LPSAFEARRAY_Size");
    #####: 1608:        break;
    #####: 1609:      case 296:
    #####: 1610:        sprintf(name, "LPSAFEARRAY_Marshal");
    #####: 1611:        break;
    #####: 1612:      case 297:
    #####: 1613:        sprintf(name, "LPSAFEARRAY_Unmarshal");
    #####: 1614:        break;
    #####: 1615:      case 298:
    #####: 1616:        sprintf(name, "VarDecCmpR8");
    #####: 1617:        break;
    #####: 1618:      case 299:
    #####: 1619:        sprintf(name, "VarCyAdd");
    #####: 1620:        break;
    #####: 1621:      case 300:
    #####: 1622:        sprintf(name, "DllUnregisterServer");
    #####: 1623:        break;
    #####: 1624:      case 301:
    #####: 1625:        sprintf(name, "OACreateTypeLib2");
    #####: 1626:        break;
    #####: 1627:      case 303:
    #####: 1628:        sprintf(name, "VarCyMul");
    #####: 1629:        break;
    #####: 1630:      case 304:
    #####: 1631:        sprintf(name, "VarCyMulI4");
    #####: 1632:        break;
    #####: 1633:      case 305:
    #####: 1634:        sprintf(name, "VarCySub");
    #####: 1635:        break;
    #####: 1636:      case 306:
    #####: 1637:        sprintf(name, "VarCyAbs");
    #####: 1638:        break;
    #####: 1639:      case 307:
    #####: 1640:        sprintf(name, "VarCyFix");
    #####: 1641:        break;
    #####: 1642:      case 308:
    #####: 1643:        sprintf(name, "VarCyInt");
    #####: 1644:        break;
    #####: 1645:      case 309:
    #####: 1646:        sprintf(name, "VarCyNeg");
    #####: 1647:        break;
    #####: 1648:      case 310:
    #####: 1649:        sprintf(name, "VarCyRound");
    #####: 1650:        break;
    #####: 1651:      case 311:
    #####: 1652:        sprintf(name, "VarCyCmp");
    #####: 1653:        break;
    #####: 1654:      case 312:
    #####: 1655:        sprintf(name, "VarCyCmpR8");
    #####: 1656:        break;
    #####: 1657:      case 313:
    #####: 1658:        sprintf(name, "VarBstrCat");
    #####: 1659:        break;
    #####: 1660:      case 314:
    #####: 1661:        sprintf(name, "VarBstrCmp");
    #####: 1662:        break;
    #####: 1663:      case 315:
    #####: 1664:        sprintf(name, "VarR8Pow");
    #####: 1665:        break;
    #####: 1666:      case 316:
    #####: 1667:        sprintf(name, "VarR4CmpR8");
    #####: 1668:        break;
    #####: 1669:      case 317:
    #####: 1670:        sprintf(name, "VarR8Round");
    #####: 1671:        break;
    #####: 1672:      case 318:
    #####: 1673:        sprintf(name, "VarCat");
    #####: 1674:        break;
    #####: 1675:      case 319:
    #####: 1676:        sprintf(name, "VarDateFromUdateEx");
    #####: 1677:        break;
    #####: 1678:      case 322:
    #####: 1679:        sprintf(name, "GetRecordInfoFromGuids");
    #####: 1680:        break;
    #####: 1681:      case 323:
    #####: 1682:        sprintf(name, "GetRecordInfoFromTypeInfo");
    #####: 1683:        break;
    #####: 1684:      case 325:
    #####: 1685:        sprintf(name, "SetVarConversionLocaleSetting");
    #####: 1686:        break;
    #####: 1687:      case 326:
    #####: 1688:        sprintf(name, "GetVarConversionLocaleSetting");
    #####: 1689:        break;
    #####: 1690:      case 327:
    #####: 1691:        sprintf(name, "SetOaNoCache");
    #####: 1692:        break;
    #####: 1693:      case 329:
    #####: 1694:        sprintf(name, "VarCyMulI8");
    #####: 1695:        break;
    #####: 1696:      case 330:
    #####: 1697:        sprintf(name, "VarDateFromUdate");
    #####: 1698:        break;
    #####: 1699:      case 331:
    #####: 1700:        sprintf(name, "VarUdateFromDate");
    #####: 1701:        break;
    #####: 1702:      case 332:
    #####: 1703:        sprintf(name, "GetAltMonthNames");
    #####: 1704:        break;
    #####: 1705:      case 333:
    #####: 1706:        sprintf(name, "VarI8FromUI1");
    #####: 1707:        break;
    #####: 1708:      case 334:
    #####: 1709:        sprintf(name, "VarI8FromI2");
    #####: 1710:        break;
    #####: 1711:      case 335:
    #####: 1712:        sprintf(name, "VarI8FromR4");
    #####: 1713:        break;
    #####: 1714:      case 336:
    #####: 1715:        sprintf(name, "VarI8FromR8");
    #####: 1716:        break;
    #####: 1717:      case 337:
    #####: 1718:        sprintf(name, "VarI8FromCy");
    #####: 1719:        break;
    #####: 1720:      case 338:
    #####: 1721:        sprintf(name, "VarI8FromDate");
    #####: 1722:        break;
    #####: 1723:      case 339:
    #####: 1724:        sprintf(name, "VarI8FromStr");
    #####: 1725:        break;
    #####: 1726:      case 340:
    #####: 1727:        sprintf(name, "VarI8FromDisp");
    #####: 1728:        break;
    #####: 1729:      case 341:
    #####: 1730:        sprintf(name, "VarI8FromBool");
    #####: 1731:        break;
    #####: 1732:      case 342:
    #####: 1733:        sprintf(name, "VarI8FromI1");
    #####: 1734:        break;
    #####: 1735:      case 343:
    #####: 1736:        sprintf(name, "VarI8FromUI2");
    #####: 1737:        break;
    #####: 1738:      case 344:
    #####: 1739:        sprintf(name, "VarI8FromUI4");
    #####: 1740:        break;
    #####: 1741:      case 345:
    #####: 1742:        sprintf(name, "VarI8FromDec");
    #####: 1743:        break;
    #####: 1744:      case 346:
    #####: 1745:        sprintf(name, "VarI2FromI8");
    #####: 1746:        break;
    #####: 1747:      case 347:
    #####: 1748:        sprintf(name, "VarI2FromUI8");
    #####: 1749:        break;
    #####: 1750:      case 348:
    #####: 1751:        sprintf(name, "VarI4FromI8");
    #####: 1752:        break;
    #####: 1753:      case 349:
    #####: 1754:        sprintf(name, "VarI4FromUI8");
    #####: 1755:        break;
    #####: 1756:      case 360:
    #####: 1757:        sprintf(name, "VarR4FromI8");
    #####: 1758:        break;
    #####: 1759:      case 361:
    #####: 1760:        sprintf(name, "VarR4FromUI8");
    #####: 1761:        break;
    #####: 1762:      case 362:
    #####: 1763:        sprintf(name, "VarR8FromI8");
    #####: 1764:        break;
    #####: 1765:      case 363:
    #####: 1766:        sprintf(name, "VarR8FromUI8");
    #####: 1767:        break;
    #####: 1768:      case 364:
    #####: 1769:        sprintf(name, "VarDateFromI8");
    #####: 1770:        break;
    #####: 1771:      case 365:
    #####: 1772:        sprintf(name, "VarDateFromUI8");
    #####: 1773:        break;
    #####: 1774:      case 366:
    #####: 1775:        sprintf(name, "VarCyFromI8");
    #####: 1776:        break;
    #####: 1777:      case 367:
    #####: 1778:        sprintf(name, "VarCyFromUI8");
    #####: 1779:        break;
    #####: 1780:      case 368:
    #####: 1781:        sprintf(name, "VarBstrFromI8");
    #####: 1782:        break;
    #####: 1783:      case 369:
    #####: 1784:        sprintf(name, "VarBstrFromUI8");
    #####: 1785:        break;
    #####: 1786:      case 370:
    #####: 1787:        sprintf(name, "VarBoolFromI8");
    #####: 1788:        break;
    #####: 1789:      case 371:
    #####: 1790:        sprintf(name, "VarBoolFromUI8");
    #####: 1791:        break;
    #####: 1792:      case 372:
    #####: 1793:        sprintf(name, "VarUI1FromI8");
    #####: 1794:        break;
    #####: 1795:      case 373:
    #####: 1796:        sprintf(name, "VarUI1FromUI8");
    #####: 1797:        break;
    #####: 1798:      case 374:
    #####: 1799:        sprintf(name, "VarDecFromI8");
    #####: 1800:        break;
    #####: 1801:      case 375:
    #####: 1802:        sprintf(name, "VarDecFromUI8");
    #####: 1803:        break;
    #####: 1804:      case 376:
    #####: 1805:        sprintf(name, "VarI1FromI8");
    #####: 1806:        break;
    #####: 1807:      case 377:
    #####: 1808:        sprintf(name, "VarI1FromUI8");
    #####: 1809:        break;
    #####: 1810:      case 378:
    #####: 1811:        sprintf(name, "VarUI2FromI8");
    #####: 1812:        break;
    #####: 1813:      case 379:
    #####: 1814:        sprintf(name, "VarUI2FromUI8");
    #####: 1815:        break;
    #####: 1816:      case 401:
    #####: 1817:        sprintf(name, "OleLoadPictureEx");
    #####: 1818:        break;
    #####: 1819:      case 402:
    #####: 1820:        sprintf(name, "OleLoadPictureFileEx");
    #####: 1821:        break;
    #####: 1822:      case 411:
    #####: 1823:        sprintf(name, "SafeArrayCreateVector");
    #####: 1824:        break;
    #####: 1825:      case 412:
    #####: 1826:        sprintf(name, "SafeArrayCopyData");
    #####: 1827:        break;
    #####: 1828:      case 413:
    #####: 1829:        sprintf(name, "VectorFromBstr");
    #####: 1830:        break;
    #####: 1831:      case 414:
    #####: 1832:        sprintf(name, "BstrFromVector");
    #####: 1833:        break;
    #####: 1834:      case 415:
    #####: 1835:        sprintf(name, "OleIconToCursor");
    #####: 1836:        break;
    #####: 1837:      case 416:
    #####: 1838:        sprintf(name, "OleCreatePropertyFrameIndirect");
    #####: 1839:        break;
    #####: 1840:      case 417:
    #####: 1841:        sprintf(name, "OleCreatePropertyFrame");
    #####: 1842:        break;
    #####: 1843:      case 418:
    #####: 1844:        sprintf(name, "OleLoadPicture");
    #####: 1845:        break;
    #####: 1846:      case 419:
    #####: 1847:        sprintf(name, "OleCreatePictureIndirect");
    #####: 1848:        break;
    #####: 1849:      case 420:
    #####: 1850:        sprintf(name, "OleCreateFontIndirect");
    #####: 1851:        break;
    #####: 1852:      case 421:
    #####: 1853:        sprintf(name, "OleTranslateColor");
    #####: 1854:        break;
    #####: 1855:      case 422:
    #####: 1856:        sprintf(name, "OleLoadPictureFile");
    #####: 1857:        break;
    #####: 1858:      case 423:
    #####: 1859:        sprintf(name, "OleSavePictureFile");
    #####: 1860:        break;
    #####: 1861:      case 424:
    #####: 1862:        sprintf(name, "OleLoadPicturePath");
    #####: 1863:        break;
    #####: 1864:      case 425:
    #####: 1865:        sprintf(name, "VarUI4FromI8");
    #####: 1866:        break;
    #####: 1867:      case 426:
    #####: 1868:        sprintf(name, "VarUI4FromUI8");
    #####: 1869:        break;
    #####: 1870:      case 427:
    #####: 1871:        sprintf(name, "VarI8FromUI8");
    #####: 1872:        break;
    #####: 1873:      case 428:
    #####: 1874:        sprintf(name, "VarUI8FromI8");
    #####: 1875:        break;
    #####: 1876:      case 429:
    #####: 1877:        sprintf(name, "VarUI8FromUI1");
    #####: 1878:        break;
    #####: 1879:      case 430:
    #####: 1880:        sprintf(name, "VarUI8FromI2");
    #####: 1881:        break;
    #####: 1882:      case 431:
    #####: 1883:        sprintf(name, "VarUI8FromR4");
    #####: 1884:        break;
    #####: 1885:      case 432:
    #####: 1886:        sprintf(name, "VarUI8FromR8");
    #####: 1887:        break;
    #####: 1888:      case 433:
    #####: 1889:        sprintf(name, "VarUI8FromCy");
    #####: 1890:        break;
    #####: 1891:      case 434:
    #####: 1892:        sprintf(name, "VarUI8FromDate");
    #####: 1893:        break;
    #####: 1894:      case 435:
    #####: 1895:        sprintf(name, "VarUI8FromStr");
    #####: 1896:        break;
    #####: 1897:      case 436:
    #####: 1898:        sprintf(name, "VarUI8FromDisp");
    #####: 1899:        break;
    #####: 1900:      case 437:
    #####: 1901:        sprintf(name, "VarUI8FromBool");
    #####: 1902:        break;
    #####: 1903:      case 438:
    #####: 1904:        sprintf(name, "VarUI8FromI1");
    #####: 1905:        break;
    #####: 1906:      case 439:
    #####: 1907:        sprintf(name, "VarUI8FromUI2");
    #####: 1908:        break;
    #####: 1909:      case 440:
    #####: 1910:        sprintf(name, "VarUI8FromUI4");
    #####: 1911:        break;
    #####: 1912:      case 441:
    #####: 1913:        sprintf(name, "VarUI8FromDec");
    #####: 1914:        break;
    #####: 1915:      case 442:
    #####: 1916:        sprintf(name, "RegisterTypeLibForUser");
    #####: 1917:        break;
    #####: 1918:      case 443:
    #####: 1919:        sprintf(name, "UnRegisterTypeLibForUser");
    #####: 1920:        break;
    #####: 1921:      default:
    #####: 1922:        break;
        -: 1923:    }
    #####: 1924:  }
        -: 1925:
    #####: 1926:  if (name[0] == '\0')
    #####: 1927:    sprintf(name, "ord%u", ord);
        -: 1928:
    #####: 1929:  return yr_strdup(name);
        -: 1930:}
