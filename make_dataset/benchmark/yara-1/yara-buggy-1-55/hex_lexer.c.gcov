        -:    0:Source:hex_lexer.c
        -:    0:Graph:/home/workspace/libyara/hex_lexer.gcno
        -:    0:Data:/home/workspace/libyara/hex_lexer.gcda
        -:    0:Runs:6
        -:    1:#line 2 "hex_lexer.c"
        -:    2:
        -:    3:#line 4 "hex_lexer.c"
        -:    4:
        -:    5:#define  YY_INT_ALIGNED short int
        -:    6:
        -:    7:/* A lexical scanner generated by flex */
        -:    8:
        -:    9:#define FLEX_SCANNER
        -:   10:#define YY_FLEX_MAJOR_VERSION 2
        -:   11:#define YY_FLEX_MINOR_VERSION 6
        -:   12:#define YY_FLEX_SUBMINOR_VERSION 4
        -:   13:#if YY_FLEX_SUBMINOR_VERSION > 0
        -:   14:#define FLEX_BETA
        -:   15:#endif
        -:   16:
        -:   17:#ifdef yy_create_buffer
        -:   18:#define hex_yy_create_buffer_ALREADY_DEFINED
        -:   19:#else
        -:   20:#define yy_create_buffer hex_yy_create_buffer
        -:   21:#endif
        -:   22:
        -:   23:#ifdef yy_delete_buffer
        -:   24:#define hex_yy_delete_buffer_ALREADY_DEFINED
        -:   25:#else
        -:   26:#define yy_delete_buffer hex_yy_delete_buffer
        -:   27:#endif
        -:   28:
        -:   29:#ifdef yy_scan_buffer
        -:   30:#define hex_yy_scan_buffer_ALREADY_DEFINED
        -:   31:#else
        -:   32:#define yy_scan_buffer hex_yy_scan_buffer
        -:   33:#endif
        -:   34:
        -:   35:#ifdef yy_scan_string
        -:   36:#define hex_yy_scan_string_ALREADY_DEFINED
        -:   37:#else
        -:   38:#define yy_scan_string hex_yy_scan_string
        -:   39:#endif
        -:   40:
        -:   41:#ifdef yy_scan_bytes
        -:   42:#define hex_yy_scan_bytes_ALREADY_DEFINED
        -:   43:#else
        -:   44:#define yy_scan_bytes hex_yy_scan_bytes
        -:   45:#endif
        -:   46:
        -:   47:#ifdef yy_init_buffer
        -:   48:#define hex_yy_init_buffer_ALREADY_DEFINED
        -:   49:#else
        -:   50:#define yy_init_buffer hex_yy_init_buffer
        -:   51:#endif
        -:   52:
        -:   53:#ifdef yy_flush_buffer
        -:   54:#define hex_yy_flush_buffer_ALREADY_DEFINED
        -:   55:#else
        -:   56:#define yy_flush_buffer hex_yy_flush_buffer
        -:   57:#endif
        -:   58:
        -:   59:#ifdef yy_load_buffer_state
        -:   60:#define hex_yy_load_buffer_state_ALREADY_DEFINED
        -:   61:#else
        -:   62:#define yy_load_buffer_state hex_yy_load_buffer_state
        -:   63:#endif
        -:   64:
        -:   65:#ifdef yy_switch_to_buffer
        -:   66:#define hex_yy_switch_to_buffer_ALREADY_DEFINED
        -:   67:#else
        -:   68:#define yy_switch_to_buffer hex_yy_switch_to_buffer
        -:   69:#endif
        -:   70:
        -:   71:#ifdef yypush_buffer_state
        -:   72:#define hex_yypush_buffer_state_ALREADY_DEFINED
        -:   73:#else
        -:   74:#define yypush_buffer_state hex_yypush_buffer_state
        -:   75:#endif
        -:   76:
        -:   77:#ifdef yypop_buffer_state
        -:   78:#define hex_yypop_buffer_state_ALREADY_DEFINED
        -:   79:#else
        -:   80:#define yypop_buffer_state hex_yypop_buffer_state
        -:   81:#endif
        -:   82:
        -:   83:#ifdef yyensure_buffer_stack
        -:   84:#define hex_yyensure_buffer_stack_ALREADY_DEFINED
        -:   85:#else
        -:   86:#define yyensure_buffer_stack hex_yyensure_buffer_stack
        -:   87:#endif
        -:   88:
        -:   89:#ifdef yylex
        -:   90:#define hex_yylex_ALREADY_DEFINED
        -:   91:#else
        -:   92:#define yylex hex_yylex
        -:   93:#endif
        -:   94:
        -:   95:#ifdef yyrestart
        -:   96:#define hex_yyrestart_ALREADY_DEFINED
        -:   97:#else
        -:   98:#define yyrestart hex_yyrestart
        -:   99:#endif
        -:  100:
        -:  101:#ifdef yylex_init
        -:  102:#define hex_yylex_init_ALREADY_DEFINED
        -:  103:#else
        -:  104:#define yylex_init hex_yylex_init
        -:  105:#endif
        -:  106:
        -:  107:#ifdef yylex_init_extra
        -:  108:#define hex_yylex_init_extra_ALREADY_DEFINED
        -:  109:#else
        -:  110:#define yylex_init_extra hex_yylex_init_extra
        -:  111:#endif
        -:  112:
        -:  113:#ifdef yylex_destroy
        -:  114:#define hex_yylex_destroy_ALREADY_DEFINED
        -:  115:#else
        -:  116:#define yylex_destroy hex_yylex_destroy
        -:  117:#endif
        -:  118:
        -:  119:#ifdef yyget_debug
        -:  120:#define hex_yyget_debug_ALREADY_DEFINED
        -:  121:#else
        -:  122:#define yyget_debug hex_yyget_debug
        -:  123:#endif
        -:  124:
        -:  125:#ifdef yyset_debug
        -:  126:#define hex_yyset_debug_ALREADY_DEFINED
        -:  127:#else
        -:  128:#define yyset_debug hex_yyset_debug
        -:  129:#endif
        -:  130:
        -:  131:#ifdef yyget_extra
        -:  132:#define hex_yyget_extra_ALREADY_DEFINED
        -:  133:#else
        -:  134:#define yyget_extra hex_yyget_extra
        -:  135:#endif
        -:  136:
        -:  137:#ifdef yyset_extra
        -:  138:#define hex_yyset_extra_ALREADY_DEFINED
        -:  139:#else
        -:  140:#define yyset_extra hex_yyset_extra
        -:  141:#endif
        -:  142:
        -:  143:#ifdef yyget_in
        -:  144:#define hex_yyget_in_ALREADY_DEFINED
        -:  145:#else
        -:  146:#define yyget_in hex_yyget_in
        -:  147:#endif
        -:  148:
        -:  149:#ifdef yyset_in
        -:  150:#define hex_yyset_in_ALREADY_DEFINED
        -:  151:#else
        -:  152:#define yyset_in hex_yyset_in
        -:  153:#endif
        -:  154:
        -:  155:#ifdef yyget_out
        -:  156:#define hex_yyget_out_ALREADY_DEFINED
        -:  157:#else
        -:  158:#define yyget_out hex_yyget_out
        -:  159:#endif
        -:  160:
        -:  161:#ifdef yyset_out
        -:  162:#define hex_yyset_out_ALREADY_DEFINED
        -:  163:#else
        -:  164:#define yyset_out hex_yyset_out
        -:  165:#endif
        -:  166:
        -:  167:#ifdef yyget_leng
        -:  168:#define hex_yyget_leng_ALREADY_DEFINED
        -:  169:#else
        -:  170:#define yyget_leng hex_yyget_leng
        -:  171:#endif
        -:  172:
        -:  173:#ifdef yyget_text
        -:  174:#define hex_yyget_text_ALREADY_DEFINED
        -:  175:#else
        -:  176:#define yyget_text hex_yyget_text
        -:  177:#endif
        -:  178:
        -:  179:#ifdef yyget_lineno
        -:  180:#define hex_yyget_lineno_ALREADY_DEFINED
        -:  181:#else
        -:  182:#define yyget_lineno hex_yyget_lineno
        -:  183:#endif
        -:  184:
        -:  185:#ifdef yyset_lineno
        -:  186:#define hex_yyset_lineno_ALREADY_DEFINED
        -:  187:#else
        -:  188:#define yyset_lineno hex_yyset_lineno
        -:  189:#endif
        -:  190:
        -:  191:#ifdef yyget_column
        -:  192:#define hex_yyget_column_ALREADY_DEFINED
        -:  193:#else
        -:  194:#define yyget_column hex_yyget_column
        -:  195:#endif
        -:  196:
        -:  197:#ifdef yyset_column
        -:  198:#define hex_yyset_column_ALREADY_DEFINED
        -:  199:#else
        -:  200:#define yyset_column hex_yyset_column
        -:  201:#endif
        -:  202:
        -:  203:#ifdef yywrap
        -:  204:#define hex_yywrap_ALREADY_DEFINED
        -:  205:#else
        -:  206:#define yywrap hex_yywrap
        -:  207:#endif
        -:  208:
        -:  209:#ifdef yyget_lval
        -:  210:#define hex_yyget_lval_ALREADY_DEFINED
        -:  211:#else
        -:  212:#define yyget_lval hex_yyget_lval
        -:  213:#endif
        -:  214:
        -:  215:#ifdef yyset_lval
        -:  216:#define hex_yyset_lval_ALREADY_DEFINED
        -:  217:#else
        -:  218:#define yyset_lval hex_yyset_lval
        -:  219:#endif
        -:  220:
        -:  221:#ifdef yyalloc
        -:  222:#define hex_yyalloc_ALREADY_DEFINED
        -:  223:#else
        -:  224:#define yyalloc hex_yyalloc
        -:  225:#endif
        -:  226:
        -:  227:#ifdef yyrealloc
        -:  228:#define hex_yyrealloc_ALREADY_DEFINED
        -:  229:#else
        -:  230:#define yyrealloc hex_yyrealloc
        -:  231:#endif
        -:  232:
        -:  233:#ifdef yyfree
        -:  234:#define hex_yyfree_ALREADY_DEFINED
        -:  235:#else
        -:  236:#define yyfree hex_yyfree
        -:  237:#endif
        -:  238:
        -:  239:/* First, we deal with  platform-specific or compiler-specific issues. */
        -:  240:
        -:  241:/* begin standard C headers. */
        -:  242:#include <stdio.h>
        -:  243:#include <string.h>
        -:  244:#include <errno.h>
        -:  245:#include <stdlib.h>
        -:  246:
        -:  247:/* end standard C headers. */
        -:  248:
        -:  249:/* flex integer type definitions */
        -:  250:
        -:  251:#ifndef FLEXINT_H
        -:  252:#define FLEXINT_H
        -:  253:
        -:  254:/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
        -:  255:
        -:  256:#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
        -:  257:
        -:  258:/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
        -:  259: * if you want the limit (max/min) macros for int types. 
        -:  260: */
        -:  261:#ifndef __STDC_LIMIT_MACROS
        -:  262:#define __STDC_LIMIT_MACROS 1
        -:  263:#endif
        -:  264:
        -:  265:#include <inttypes.h>
        -:  266:typedef int8_t flex_int8_t;
        -:  267:typedef uint8_t flex_uint8_t;
        -:  268:typedef int16_t flex_int16_t;
        -:  269:typedef uint16_t flex_uint16_t;
        -:  270:typedef int32_t flex_int32_t;
        -:  271:typedef uint32_t flex_uint32_t;
        -:  272:#else
        -:  273:typedef signed char flex_int8_t;
        -:  274:typedef short int flex_int16_t;
        -:  275:typedef int flex_int32_t;
        -:  276:typedef unsigned char flex_uint8_t; 
        -:  277:typedef unsigned short int flex_uint16_t;
        -:  278:typedef unsigned int flex_uint32_t;
        -:  279:
        -:  280:/* Limits of integral types. */
        -:  281:#ifndef INT8_MIN
        -:  282:#define INT8_MIN               (-128)
        -:  283:#endif
        -:  284:#ifndef INT16_MIN
        -:  285:#define INT16_MIN              (-32767-1)
        -:  286:#endif
        -:  287:#ifndef INT32_MIN
        -:  288:#define INT32_MIN              (-2147483647-1)
        -:  289:#endif
        -:  290:#ifndef INT8_MAX
        -:  291:#define INT8_MAX               (127)
        -:  292:#endif
        -:  293:#ifndef INT16_MAX
        -:  294:#define INT16_MAX              (32767)
        -:  295:#endif
        -:  296:#ifndef INT32_MAX
        -:  297:#define INT32_MAX              (2147483647)
        -:  298:#endif
        -:  299:#ifndef UINT8_MAX
        -:  300:#define UINT8_MAX              (255U)
        -:  301:#endif
        -:  302:#ifndef UINT16_MAX
        -:  303:#define UINT16_MAX             (65535U)
        -:  304:#endif
        -:  305:#ifndef UINT32_MAX
        -:  306:#define UINT32_MAX             (4294967295U)
        -:  307:#endif
        -:  308:
        -:  309:#ifndef SIZE_MAX
        -:  310:#define SIZE_MAX               (~(size_t)0)
        -:  311:#endif
        -:  312:
        -:  313:#endif /* ! C99 */
        -:  314:
        -:  315:#endif /* ! FLEXINT_H */
        -:  316:
        -:  317:/* begin standard C++ headers. */
        -:  318:
        -:  319:/* TODO: this is always defined, so inline it */
        -:  320:#define yyconst const
        -:  321:
        -:  322:#if defined(__GNUC__) && __GNUC__ >= 3
        -:  323:#define yynoreturn __attribute__((__noreturn__))
        -:  324:#else
        -:  325:#define yynoreturn
        -:  326:#endif
        -:  327:
        -:  328:/* Returned upon end-of-file. */
        -:  329:#define YY_NULL 0
        -:  330:
        -:  331:/* Promotes a possibly negative, possibly signed char to an
        -:  332: *   integer in range [0..255] for use as an array index.
        -:  333: */
        -:  334:#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
        -:  335:
        -:  336:/* An opaque pointer. */
        -:  337:#ifndef YY_TYPEDEF_YY_SCANNER_T
        -:  338:#define YY_TYPEDEF_YY_SCANNER_T
        -:  339:typedef void* yyscan_t;
        -:  340:#endif
        -:  341:
        -:  342:/* For convenience, these vars (plus the bison vars far below)
        -:  343:   are macros in the reentrant scanner. */
        -:  344:#define yyin yyg->yyin_r
        -:  345:#define yyout yyg->yyout_r
        -:  346:#define yyextra yyg->yyextra_r
        -:  347:#define yyleng yyg->yyleng_r
        -:  348:#define yytext yyg->yytext_r
        -:  349:#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
        -:  350:#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
        -:  351:#define yy_flex_debug yyg->yy_flex_debug_r
        -:  352:
        -:  353:/* Enter a start condition.  This macro really ought to take a parameter,
        -:  354: * but we do it the disgusting crufty way forced on us by the ()-less
        -:  355: * definition of BEGIN.
        -:  356: */
        -:  357:#define BEGIN yyg->yy_start = 1 + 2 *
        -:  358:/* Translate the current start state into a value that can be later handed
        -:  359: * to BEGIN to return to the state.  The YYSTATE alias is for lex
        -:  360: * compatibility.
        -:  361: */
        -:  362:#define YY_START ((yyg->yy_start - 1) / 2)
        -:  363:#define YYSTATE YY_START
        -:  364:/* Action number for EOF rule of a given start state. */
        -:  365:#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
        -:  366:/* Special action meaning "start processing a new file". */
        -:  367:#define YY_NEW_FILE yyrestart( yyin , yyscanner )
        -:  368:#define YY_END_OF_BUFFER_CHAR 0
        -:  369:
        -:  370:/* Size of default input buffer. */
        -:  371:#ifndef YY_BUF_SIZE
        -:  372:#ifdef __ia64__
        -:  373:/* On IA-64, the buffer size is 16k, not 8k.
        -:  374: * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
        -:  375: * Ditto for the __ia64__ case accordingly.
        -:  376: */
        -:  377:#define YY_BUF_SIZE 32768
        -:  378:#else
        -:  379:#define YY_BUF_SIZE 16384
        -:  380:#endif /* __ia64__ */
        -:  381:#endif
        -:  382:
        -:  383:/* The state buf must be large enough to hold one state per character in the main buffer.
        -:  384: */
        -:  385:#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
        -:  386:
        -:  387:#ifndef YY_TYPEDEF_YY_BUFFER_STATE
        -:  388:#define YY_TYPEDEF_YY_BUFFER_STATE
        -:  389:typedef struct yy_buffer_state *YY_BUFFER_STATE;
        -:  390:#endif
        -:  391:
        -:  392:#ifndef YY_TYPEDEF_YY_SIZE_T
        -:  393:#define YY_TYPEDEF_YY_SIZE_T
        -:  394:typedef size_t yy_size_t;
        -:  395:#endif
        -:  396:
        -:  397:#define EOB_ACT_CONTINUE_SCAN 0
        -:  398:#define EOB_ACT_END_OF_FILE 1
        -:  399:#define EOB_ACT_LAST_MATCH 2
        -:  400:    
        -:  401:    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
        -:  402:     *       access to the local variable yy_act. Since yyless() is a macro, it would break
        -:  403:     *       existing scanners that call yyless() from OUTSIDE yylex.
        -:  404:     *       One obvious solution it to make yy_act a global. I tried that, and saw
        -:  405:     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
        -:  406:     *       normally declared as a register variable-- so it is not worth it.
        -:  407:     */
        -:  408:    #define  YY_LESS_LINENO(n) \
        -:  409:            do { \
        -:  410:                int yyl;\
        -:  411:                for ( yyl = n; yyl < yyleng; ++yyl )\
        -:  412:                    if ( yytext[yyl] == '\n' )\
        -:  413:                        --yylineno;\
        -:  414:            }while(0)
        -:  415:    #define YY_LINENO_REWIND_TO(dst) \
        -:  416:            do {\
        -:  417:                const char *p;\
        -:  418:                for ( p = yy_cp-1; p >= (dst); --p)\
        -:  419:                    if ( *p == '\n' )\
        -:  420:                        --yylineno;\
        -:  421:            }while(0)
        -:  422:    
        -:  423:/* Return all but the first "n" matched characters back to the input stream. */
        -:  424:#define yyless(n) \
        -:  425:	do \
        -:  426:		{ \
        -:  427:		/* Undo effects of setting up yytext. */ \
        -:  428:        int yyless_macro_arg = (n); \
        -:  429:        YY_LESS_LINENO(yyless_macro_arg);\
        -:  430:		*yy_cp = yyg->yy_hold_char; \
        -:  431:		YY_RESTORE_YY_MORE_OFFSET \
        -:  432:		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
        -:  433:		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        -:  434:		} \
        -:  435:	while ( 0 )
        -:  436:#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )
        -:  437:
        -:  438:#ifndef YY_STRUCT_YY_BUFFER_STATE
        -:  439:#define YY_STRUCT_YY_BUFFER_STATE
        -:  440:struct yy_buffer_state
        -:  441:	{
        -:  442:	FILE *yy_input_file;
        -:  443:
        -:  444:	char *yy_ch_buf;		/* input buffer */
        -:  445:	char *yy_buf_pos;		/* current position in input buffer */
        -:  446:
        -:  447:	/* Size of input buffer in bytes, not including room for EOB
        -:  448:	 * characters.
        -:  449:	 */
        -:  450:	int yy_buf_size;
        -:  451:
        -:  452:	/* Number of characters read into yy_ch_buf, not including EOB
        -:  453:	 * characters.
        -:  454:	 */
        -:  455:	int yy_n_chars;
        -:  456:
        -:  457:	/* Whether we "own" the buffer - i.e., we know we created it,
        -:  458:	 * and can realloc() it to grow it, and should free() it to
        -:  459:	 * delete it.
        -:  460:	 */
        -:  461:	int yy_is_our_buffer;
        -:  462:
        -:  463:	/* Whether this is an "interactive" input source; if so, and
        -:  464:	 * if we're using stdio for input, then we want to use getc()
        -:  465:	 * instead of fread(), to make sure we stop fetching input after
        -:  466:	 * each newline.
        -:  467:	 */
        -:  468:	int yy_is_interactive;
        -:  469:
        -:  470:	/* Whether we're considered to be at the beginning of a line.
        -:  471:	 * If so, '^' rules will be active on the next match, otherwise
        -:  472:	 * not.
        -:  473:	 */
        -:  474:	int yy_at_bol;
        -:  475:
        -:  476:    int yy_bs_lineno; /**< The line count. */
        -:  477:    int yy_bs_column; /**< The column count. */
        -:  478:
        -:  479:	/* Whether to try to fill the input buffer when we reach the
        -:  480:	 * end of it.
        -:  481:	 */
        -:  482:	int yy_fill_buffer;
        -:  483:
        -:  484:	int yy_buffer_status;
        -:  485:
        -:  486:#define YY_BUFFER_NEW 0
        -:  487:#define YY_BUFFER_NORMAL 1
        -:  488:	/* When an EOF's been seen but there's still some text to process
        -:  489:	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
        -:  490:	 * shouldn't try reading from the input source any more.  We might
        -:  491:	 * still have a bunch of tokens to match, though, because of
        -:  492:	 * possible backing-up.
        -:  493:	 *
        -:  494:	 * When we actually see the EOF, we change the status to "new"
        -:  495:	 * (via yyrestart()), so that the user can continue scanning by
        -:  496:	 * just pointing yyin at a new input file.
        -:  497:	 */
        -:  498:#define YY_BUFFER_EOF_PENDING 2
        -:  499:
        -:  500:	};
        -:  501:#endif /* !YY_STRUCT_YY_BUFFER_STATE */
        -:  502:
        -:  503:/* We provide macros for accessing buffer states in case in the
        -:  504: * future we want to put the buffer states in a more general
        -:  505: * "scanner state".
        -:  506: *
        -:  507: * Returns the top of the stack, or NULL.
        -:  508: */
        -:  509:#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
        -:  510:                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
        -:  511:                          : NULL)
        -:  512:/* Same as previous macro, but useful when we know that the buffer stack is not
        -:  513: * NULL or when we need an lvalue. For internal use only.
        -:  514: */
        -:  515:#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]
        -:  516:
        -:  517:void yyrestart ( FILE *input_file , yyscan_t yyscanner );
        -:  518:void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
        -:  519:YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
        -:  520:void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
        -:  521:void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
        -:  522:void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
        -:  523:void yypop_buffer_state ( yyscan_t yyscanner );
        -:  524:
        -:  525:static void yyensure_buffer_stack ( yyscan_t yyscanner );
        -:  526:static void yy_load_buffer_state ( yyscan_t yyscanner );
        -:  527:static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
        -:  528:#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)
        -:  529:
        -:  530:YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
        -:  531:YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
        -:  532:YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );
        -:  533:
        -:  534:void *yyalloc ( yy_size_t , yyscan_t yyscanner );
        -:  535:void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
        -:  536:void yyfree ( void * , yyscan_t yyscanner );
        -:  537:
        -:  538:#define yy_new_buffer yy_create_buffer
        -:  539:#define yy_set_interactive(is_interactive) \
        -:  540:	{ \
        -:  541:	if ( ! YY_CURRENT_BUFFER ){ \
        -:  542:        yyensure_buffer_stack (yyscanner); \
        -:  543:		YY_CURRENT_BUFFER_LVALUE =    \
        -:  544:            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
        -:  545:	} \
        -:  546:	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
        -:  547:	}
        -:  548:#define yy_set_bol(at_bol) \
        -:  549:	{ \
        -:  550:	if ( ! YY_CURRENT_BUFFER ){\
        -:  551:        yyensure_buffer_stack (yyscanner); \
        -:  552:		YY_CURRENT_BUFFER_LVALUE =    \
        -:  553:            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
        -:  554:	} \
        -:  555:	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
        -:  556:	}
        -:  557:#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
        -:  558:
        -:  559:/* Begin user sect3 */
        -:  560:
        -:  561:#define hex_yywrap(yyscanner) (/*CONSTCOND*/1)
        -:  562:#define YY_SKIP_YYWRAP
        -:  563:typedef flex_uint8_t YY_CHAR;
        -:  564:
        -:  565:typedef int yy_state_type;
        -:  566:
        -:  567:#define yytext_ptr yytext_r
        -:  568:
        -:  569:static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
        -:  570:static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
        -:  571:static int yy_get_next_buffer ( yyscan_t yyscanner );
        -:  572:static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );
        -:  573:
        -:  574:/* Done after the current pattern has been matched and before the
        -:  575: * corresponding action - sets up yytext.
        -:  576: */
        -:  577:#define YY_DO_BEFORE_ACTION \
        -:  578:	yyg->yytext_ptr = yy_bp; \
        -:  579:	yyleng = (int) (yy_cp - yy_bp); \
        -:  580:	yyg->yy_hold_char = *yy_cp; \
        -:  581:	*yy_cp = '\0'; \
        -:  582:	yyg->yy_c_buf_p = yy_cp;
        -:  583:#define YY_NUM_RULES 16
        -:  584:#define YY_END_OF_BUFFER 17
        -:  585:/* This struct is not used in this scanner,
        -:  586:   but its presence is necessary. */
        -:  587:struct yy_trans_info
        -:  588:	{
        -:  589:	flex_int32_t yy_verify;
        -:  590:	flex_int32_t yy_nxt;
        -:  591:	};
        -:  592:static const flex_int16_t yy_accept[35] =
        -:  593:    {   0,
        -:  594:        0,    0,    0,    0,    0,    0,   17,   15,   13,   13,
        -:  595:       14,   15,   15,   15,    5,   16,   12,   11,   11,    8,
        -:  596:        9,   10,    0,    7,    1,    2,    3,    4,    9,    0,
        -:  597:        0,    7,    6,    0
        -:  598:    } ;
        -:  599:
        -:  600:static const YY_CHAR yy_ec[256] =
        -:  601:    {   0,
        -:  602:        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        -:  603:        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        -:  604:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  605:        1,    2,    1,    1,    1,    1,    1,    1,    1,    4,
        -:  606:        4,    5,    1,    1,    6,    1,    7,    8,    8,    8,
        -:  607:        8,    8,    8,    8,    8,    8,    8,    1,    1,    1,
        -:  608:        1,    1,    9,    1,   10,   10,   10,   10,   10,   10,
        -:  609:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  610:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  611:       11,    1,   12,    1,    1,    1,   10,   10,   10,   10,
        -:  612:
        -:  613:       10,   10,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  614:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  615:        1,    1,    4,    4,    4,    1,    1,    1,    1,    1,
        -:  616:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  617:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  618:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  619:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  620:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  621:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  622:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  623:
        -:  624:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  625:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  626:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  627:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  628:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  629:        1,    1,    1,    1,    1
        -:  630:    } ;
        -:  631:
        -:  632:static const YY_CHAR yy_meta[13] =
        -:  633:    {   0,
        -:  634:        1,    1,    2,    1,    1,    1,    1,    3,    3,    3,
        -:  635:        1,    1
        -:  636:    } ;
        -:  637:
        -:  638:static const flex_int16_t yy_base[40] =
        -:  639:    {   0,
        -:  640:        0,    0,    0,    0,   12,    0,   46,   47,   47,   47,
        -:  641:       47,   20,   36,   35,   47,   47,   47,   47,   47,   47,
        -:  642:       35,   47,   37,    0,   47,   47,   47,   47,   33,   35,
        -:  643:       23,    0,   33,   47,   30,   26,   23,   33,   36
        -:  644:    } ;
        -:  645:
        -:  646:static const flex_int16_t yy_def[40] =
        -:  647:    {   0,
        -:  648:       34,    1,   35,   35,   34,    5,   34,   34,   34,   34,
        -:  649:       34,   34,   36,   37,   34,   34,   34,   34,   34,   34,
        -:  650:       34,   34,   38,   39,   34,   34,   34,   34,   34,   38,
        -:  651:       38,   39,   38,    0,   34,   34,   34,   34,   34
        -:  652:    } ;
        -:  653:
        -:  654:static const flex_int16_t yy_nxt[60] =
        -:  655:    {   0,
        -:  656:        8,    9,   10,   11,    8,    8,   12,   13,   14,   13,
        -:  657:       15,    8,   17,   18,   19,   17,   17,   20,   17,   21,
        -:  658:       17,   17,   17,   22,   23,   27,   24,   31,   25,   33,
        -:  659:       16,   16,   16,   30,   30,   30,   32,   31,   32,   31,
        -:  660:       29,   31,   29,   28,   26,   34,    7,   34,   34,   34,
        -:  661:       34,   34,   34,   34,   34,   34,   34,   34,   34
        -:  662:    } ;
        -:  663:
        -:  664:static const flex_int16_t yy_chk[60] =
        -:  665:    {   0,
        -:  666:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  667:        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        -:  668:        5,    5,    5,    5,   12,   37,   12,   31,   36,   31,
        -:  669:       35,   35,   35,   38,   38,   38,   39,   33,   39,   30,
        -:  670:       29,   23,   21,   14,   13,    7,   34,   34,   34,   34,
        -:  671:       34,   34,   34,   34,   34,   34,   34,   34,   34
        -:  672:    } ;
        -:  673:
        -:  674:/* Table of booleans, true if rule could match eol. */
        -:  675:static const flex_int32_t yy_rule_can_match_eol[17] =
        -:  676:    {   0,
        -:  677:0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,     };
        -:  678:
        -:  679:/* The intent behind this definition is that it'll catch
        -:  680: * any uses of REJECT which flex missed.
        -:  681: */
        -:  682:#define REJECT reject_used_but_not_detected
        -:  683:#define yymore() yymore_used_but_not_detected
        -:  684:#define YY_MORE_ADJ 0
        -:  685:#define YY_RESTORE_YY_MORE_OFFSET
        -:  686:#line 1 "hex_lexer.l"
        -:  687:/*
        -:  688:Copyright (c) 2013. The YARA Authors. All Rights Reserved.
        -:  689:
        -:  690:Redistribution and use in source and binary forms, with or without modification,
        -:  691:are permitted provided that the following conditions are met:
        -:  692:
        -:  693:1. Redistributions of source code must retain the above copyright notice, this
        -:  694:list of conditions and the following disclaimer.
        -:  695:
        -:  696:2. Redistributions in binary form must reproduce the above copyright notice,
        -:  697:this list of conditions and the following disclaimer in the documentation and/or
        -:  698:other materials provided with the distribution.
        -:  699:
        -:  700:3. Neither the name of the copyright holder nor the names of its contributors
        -:  701:may be used to endorse or promote products derived from this software without
        -:  702:specific prior written permission.
        -:  703:
        -:  704:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:  705:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:  706:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:  707:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:  708:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:  709:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:  710:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:  711:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:  712:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:  713:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:  714:*/
        -:  715:/* Lexical analyzer for hex strings */
        -:  716:#line 33 "hex_lexer.l"
        -:  717:
        -:  718:/* Disable warnings for unused functions in this file.
        -:  719:
        -:  720:As we redefine YY_FATAL_ERROR macro to use our own function hex_yyfatal, the
        -:  721:yy_fatal_error function generated by Flex is not actually used, causing a
        -:  722:compiler warning. Flex doesn't offer any options to remove the yy_fatal_error
        -:  723:function. When they include something like %option noyy_fatal_error as they do
        -:  724:with noyywrap then we can remove this pragma.
        -:  725:*/
        -:  726:
        -:  727:#ifdef __GNUC__
        -:  728:#pragma GCC diagnostic ignored "-Wunused-function"
        -:  729:#endif
        -:  730:
        -:  731:#include <setjmp.h>
        -:  732:
        -:  733:#include <yara/globals.h>
        -:  734:#include <yara/limits.h>
        -:  735:#include <yara/error.h>
        -:  736:#include <yara/mem.h>
        -:  737:#include <yara/re.h>
        -:  738:#include <yara/threading.h>
        -:  739:#include <yara/strutils.h>
        -:  740:#include <yara/hex_lexer.h>
        -:  741:
        -:  742:#include "hex_grammar.h"
        -:  743:
        -:  744:#ifdef _WIN32
        -:  745:#define snprintf _snprintf
        -:  746:#endif
        -:  747:
        -:  748:#define ERROR_IF(x, error) \
        -:  749:    if (x) \
        -:  750:    { \
        -:  751:      RE_AST* re_ast = yyget_extra(yyscanner); \
        -:  752:      re_ast->error_code = error; \
        -:  753:      YYABORT; \
        -:  754:    } \
        -:  755:
        -:  756:#line 757 "hex_lexer.c"
        -:  757:#define YY_NO_UNISTD_H 1
        -:  758:#define YY_NO_INPUT 1
        -:  759:
        -:  760:#line 761 "hex_lexer.c"
        -:  761:
        -:  762:#define INITIAL 0
        -:  763:#define comment 1
        -:  764:#define range 2
        -:  765:
        -:  766:#ifndef YY_NO_UNISTD_H
        -:  767:/* Special case for "unistd.h", since it is non-ANSI. We include it way
        -:  768: * down here because we want the user's section 1 to have been scanned first.
        -:  769: * The user has a chance to override it with an option.
        -:  770: */
        -:  771:#include <unistd.h>
        -:  772:#endif
        -:  773:
        -:  774:#ifndef YY_EXTRA_TYPE
        -:  775:#define YY_EXTRA_TYPE void *
        -:  776:#endif
        -:  777:
        -:  778:/* Holds the entire state of the reentrant scanner. */
        -:  779:struct yyguts_t
        -:  780:    {
        -:  781:
        -:  782:    /* User-defined. Not touched by flex. */
        -:  783:    YY_EXTRA_TYPE yyextra_r;
        -:  784:
        -:  785:    /* The rest are the same as the globals declared in the non-reentrant scanner. */
        -:  786:    FILE *yyin_r, *yyout_r;
        -:  787:    size_t yy_buffer_stack_top; /**< index of top of stack. */
        -:  788:    size_t yy_buffer_stack_max; /**< capacity of stack. */
        -:  789:    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
        -:  790:    char yy_hold_char;
        -:  791:    int yy_n_chars;
        -:  792:    int yyleng_r;
        -:  793:    char *yy_c_buf_p;
        -:  794:    int yy_init;
        -:  795:    int yy_start;
        -:  796:    int yy_did_buffer_switch_on_eof;
        -:  797:    int yy_start_stack_ptr;
        -:  798:    int yy_start_stack_depth;
        -:  799:    int *yy_start_stack;
        -:  800:    yy_state_type yy_last_accepting_state;
        -:  801:    char* yy_last_accepting_cpos;
        -:  802:
        -:  803:    int yylineno_r;
        -:  804:    int yy_flex_debug_r;
        -:  805:
        -:  806:    char *yytext_r;
        -:  807:    int yy_more_flag;
        -:  808:    int yy_more_len;
        -:  809:
        -:  810:    YYSTYPE * yylval_r;
        -:  811:
        -:  812:    }; /* end struct yyguts_t */
        -:  813:
        -:  814:static int yy_init_globals ( yyscan_t yyscanner );
        -:  815:
        -:  816:    /* This must go here because YYSTYPE and YYLTYPE are included
        -:  817:     * from bison output in section 1.*/
        -:  818:    #    define yylval yyg->yylval_r
        -:  819:    
        -:  820:int yylex_init (yyscan_t* scanner);
        -:  821:
        -:  822:int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);
        -:  823:
        -:  824:/* Accessor methods to globals.
        -:  825:   These are made visible to non-reentrant scanners for convenience. */
        -:  826:
        -:  827:int yylex_destroy ( yyscan_t yyscanner );
        -:  828:
        -:  829:int yyget_debug ( yyscan_t yyscanner );
        -:  830:
        -:  831:void yyset_debug ( int debug_flag , yyscan_t yyscanner );
        -:  832:
        -:  833:YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );
        -:  834:
        -:  835:void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );
        -:  836:
        -:  837:FILE *yyget_in ( yyscan_t yyscanner );
        -:  838:
        -:  839:void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );
        -:  840:
        -:  841:FILE *yyget_out ( yyscan_t yyscanner );
        -:  842:
        -:  843:void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );
        -:  844:
        -:  845:			int yyget_leng ( yyscan_t yyscanner );
        -:  846:
        -:  847:char *yyget_text ( yyscan_t yyscanner );
        -:  848:
        -:  849:int yyget_lineno ( yyscan_t yyscanner );
        -:  850:
        -:  851:void yyset_lineno ( int _line_number , yyscan_t yyscanner );
        -:  852:
        -:  853:int yyget_column  ( yyscan_t yyscanner );
        -:  854:
        -:  855:void yyset_column ( int _column_no , yyscan_t yyscanner );
        -:  856:
        -:  857:YYSTYPE * yyget_lval ( yyscan_t yyscanner );
        -:  858:
        -:  859:void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );
        -:  860:
        -:  861:/* Macros after this point can all be overridden by user definitions in
        -:  862: * section 1.
        -:  863: */
        -:  864:
        -:  865:#ifndef YY_SKIP_YYWRAP
        -:  866:#ifdef __cplusplus
        -:  867:extern "C" int yywrap ( yyscan_t yyscanner );
        -:  868:#else
        -:  869:extern int yywrap ( yyscan_t yyscanner );
        -:  870:#endif
        -:  871:#endif
        -:  872:
        -:  873:#ifndef YY_NO_UNPUT
        -:  874:    
        -:  875:#endif
        -:  876:
        -:  877:#ifndef yytext_ptr
        -:  878:static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
        -:  879:#endif
        -:  880:
        -:  881:#ifdef YY_NEED_STRLEN
        -:  882:static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
        -:  883:#endif
        -:  884:
        -:  885:#ifndef YY_NO_INPUT
        -:  886:#ifdef __cplusplus
        -:  887:static int yyinput ( yyscan_t yyscanner );
        -:  888:#else
        -:  889:static int input ( yyscan_t yyscanner );
        -:  890:#endif
        -:  891:
        -:  892:#endif
        -:  893:
        -:  894:/* Amount of stuff to slurp up with each read. */
        -:  895:#ifndef YY_READ_BUF_SIZE
        -:  896:#ifdef __ia64__
        -:  897:/* On IA-64, the buffer size is 16k, not 8k */
        -:  898:#define YY_READ_BUF_SIZE 16384
        -:  899:#else
        -:  900:#define YY_READ_BUF_SIZE 8192
        -:  901:#endif /* __ia64__ */
        -:  902:#endif
        -:  903:
        -:  904:/* Copy whatever the last rule matched to the standard output. */
        -:  905:#ifndef ECHO
        -:  906:/* This used to be an fputs(), but since the string might contain NUL's,
        -:  907: * we now use fwrite().
        -:  908: */
        -:  909:#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
        -:  910:#endif
        -:  911:
        -:  912:/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
        -:  913: * is returned in "result".
        -:  914: */
        -:  915:#ifndef YY_INPUT
        -:  916:#define YY_INPUT(buf,result,max_size) \
        -:  917:	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
        -:  918:		{ \
        -:  919:		int c = '*'; \
        -:  920:		int n; \
        -:  921:		for ( n = 0; n < max_size && \
        -:  922:			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
        -:  923:			buf[n] = (char) c; \
        -:  924:		if ( c == '\n' ) \
        -:  925:			buf[n++] = (char) c; \
        -:  926:		if ( c == EOF && ferror( yyin ) ) \
        -:  927:			YY_FATAL_ERROR( "input in flex scanner failed" ); \
        -:  928:		result = n; \
        -:  929:		} \
        -:  930:	else \
        -:  931:		{ \
        -:  932:		errno=0; \
        -:  933:		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
        -:  934:			{ \
        -:  935:			if( errno != EINTR) \
        -:  936:				{ \
        -:  937:				YY_FATAL_ERROR( "input in flex scanner failed" ); \
        -:  938:				break; \
        -:  939:				} \
        -:  940:			errno=0; \
        -:  941:			clearerr(yyin); \
        -:  942:			} \
        -:  943:		}\
        -:  944:\
        -:  945:
        -:  946:#endif
        -:  947:
        -:  948:/* No semi-colon after return; correct usage is to write "yyterminate();" -
        -:  949: * we don't want an extra ';' after the "return" because that will cause
        -:  950: * some compilers to complain about unreachable statements.
        -:  951: */
        -:  952:#ifndef yyterminate
        -:  953:#define yyterminate() return YY_NULL
        -:  954:#endif
        -:  955:
        -:  956:/* Number of entries by which start-condition stack grows. */
        -:  957:#ifndef YY_START_STACK_INCR
        -:  958:#define YY_START_STACK_INCR 25
        -:  959:#endif
        -:  960:
        -:  961:/* Report a fatal error. */
        -:  962:#ifndef YY_FATAL_ERROR
        -:  963:#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
        -:  964:#endif
        -:  965:
        -:  966:/* end tables serialization structures and prototypes */
        -:  967:
        -:  968:/* Default declaration of generated scanner - a define so the user can
        -:  969: * easily add parameters.
        -:  970: */
        -:  971:#ifndef YY_DECL
        -:  972:#define YY_DECL_IS_OURS 1
        -:  973:
        -:  974:extern int yylex \
        -:  975:               (YYSTYPE * yylval_param , yyscan_t yyscanner);
        -:  976:
        -:  977:#define YY_DECL int yylex \
        -:  978:               (YYSTYPE * yylval_param , yyscan_t yyscanner)
        -:  979:#endif /* !YY_DECL */
        -:  980:
        -:  981:/* Code executed at the beginning of each rule, after yytext and yyleng
        -:  982: * have been set up.
        -:  983: */
        -:  984:#ifndef YY_USER_ACTION
        -:  985:#define YY_USER_ACTION
        -:  986:#endif
        -:  987:
        -:  988:/* Code executed at the end of each rule. */
        -:  989:#ifndef YY_BREAK
        -:  990:#define YY_BREAK /*LINTED*/break;
        -:  991:#endif
        -:  992:
        -:  993:#define YY_RULE_SETUP \
        -:  994:	YY_USER_ACTION
        -:  995:
        -:  996:/** The main scanner function which does all the work.
        -:  997: */
    #####:  998:YY_DECL
        -:  999:{
        -: 1000:	yy_state_type yy_current_state;
        -: 1001:	char *yy_cp, *yy_bp;
        -: 1002:	int yy_act;
    #####: 1003:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 1004:
    #####: 1005:    yylval = yylval_param;
        -: 1006:
    #####: 1007:	if ( !yyg->yy_init )
        -: 1008:		{
    #####: 1009:		yyg->yy_init = 1;
        -: 1010:
        -: 1011:#ifdef YY_USER_INIT
        -: 1012:		YY_USER_INIT;
        -: 1013:#endif
        -: 1014:
    #####: 1015:		if ( ! yyg->yy_start )
    #####: 1016:			yyg->yy_start = 1;	/* first start state */
        -: 1017:
    #####: 1018:		if ( ! yyin )
    #####: 1019:			yyin = stdin;
        -: 1020:
    #####: 1021:		if ( ! yyout )
    #####: 1022:			yyout = stdout;
        -: 1023:
    #####: 1024:		if ( ! YY_CURRENT_BUFFER ) {
    #####: 1025:			yyensure_buffer_stack (yyscanner);
    #####: 1026:			YY_CURRENT_BUFFER_LVALUE =
    #####: 1027:				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
        -: 1028:		}
        -: 1029:
    #####: 1030:		yy_load_buffer_state( yyscanner );
        -: 1031:		}
        -: 1032:
        -: 1033:	{
        -: 1034:#line 95 "hex_lexer.l"
        -: 1035:
        -: 1036:
        -: 1037:
        -: 1038:#line 1039 "hex_lexer.c"
        -: 1039:
        -: 1040:	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
        -: 1041:		{
    #####: 1042:		yy_cp = yyg->yy_c_buf_p;
        -: 1043:
        -: 1044:		/* Support of yytext. */
    #####: 1045:		*yy_cp = yyg->yy_hold_char;
        -: 1046:
        -: 1047:		/* yy_bp points to the position in yy_ch_buf of the start of
        -: 1048:		 * the current run.
        -: 1049:		 */
    #####: 1050:		yy_bp = yy_cp;
        -: 1051:
    #####: 1052:		yy_current_state = yyg->yy_start;
    #####: 1053:yy_match:
        -: 1054:		do
        -: 1055:			{
    #####: 1056:			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
    #####: 1057:			if ( yy_accept[yy_current_state] )
        -: 1058:				{
    #####: 1059:				yyg->yy_last_accepting_state = yy_current_state;
    #####: 1060:				yyg->yy_last_accepting_cpos = yy_cp;
        -: 1061:				}
    #####: 1062:			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        -: 1063:				{
    #####: 1064:				yy_current_state = (int) yy_def[yy_current_state];
    #####: 1065:				if ( yy_current_state >= 35 )
    #####: 1066:					yy_c = yy_meta[yy_c];
        -: 1067:				}
    #####: 1068:			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    #####: 1069:			++yy_cp;
        -: 1070:			}
    #####: 1071:		while ( yy_current_state != 34 );
    #####: 1072:		yy_cp = yyg->yy_last_accepting_cpos;
    #####: 1073:		yy_current_state = yyg->yy_last_accepting_state;
        -: 1074:
    #####: 1075:yy_find_action:
    #####: 1076:		yy_act = yy_accept[yy_current_state];
        -: 1077:
    #####: 1078:		YY_DO_BEFORE_ACTION;
        -: 1079:
    #####: 1080:		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
        -: 1081:			{
        -: 1082:			int yyl;
    #####: 1083:			for ( yyl = 0; yyl < yyleng; ++yyl )
    #####: 1084:				if ( yytext[yyl] == '\n' )
        -: 1085:					
    #####: 1086:    do{ yylineno++;
    #####: 1087:        yycolumn=0;
        -: 1088:    }while(0)
        -: 1089:;
        -: 1090:			}
        -: 1091:
    #####: 1092:do_action:	/* This label is used only to access EOF actions. */
        -: 1093:
    #####: 1094:		switch ( yy_act )
        -: 1095:	{ /* beginning of action switch */
    #####: 1096:			case 0: /* must back up */
        -: 1097:			/* undo the effects of YY_DO_BEFORE_ACTION */
    #####: 1098:			*yy_cp = yyg->yy_hold_char;
    #####: 1099:			yy_cp = yyg->yy_last_accepting_cpos;
    #####: 1100:			yy_current_state = yyg->yy_last_accepting_state;
    #####: 1101:			goto yy_find_action;
        -: 1102:
    #####: 1103:case 1:
        -: 1104:YY_RULE_SETUP
        -: 1105:#line 98 "hex_lexer.l"
        -: 1106:{
        -: 1107:
        -: 1108:  yylval->integer = xtoi(yytext);
        -: 1109:  return _BYTE_;
        -: 1110:}
        -: 1111:	YY_BREAK
        -: 1112:case 2:
        -: 1113:YY_RULE_SETUP
        -: 1114:#line 104 "hex_lexer.l"
        -: 1115:{
        -: 1116:
        -: 1117:  yytext[1] = '0'; // replace ? by 0
        -: 1118:  yylval->integer = xtoi(yytext) | 0xF000 ;
        -: 1119:  return _MASKED_BYTE_;
        -: 1120:}
        -: 1121:	YY_BREAK
        -: 1122:case 3:
        -: 1123:YY_RULE_SETUP
        -: 1124:#line 111 "hex_lexer.l"
        -: 1125:{
        -: 1126:
        -: 1127:  yytext[0] = '0'; // replace ? by 0
        -: 1128:  yylval->integer = xtoi(yytext) | 0x0F00 ;
        -: 1129:  return _MASKED_BYTE_;
        -: 1130:}
        -: 1131:	YY_BREAK
        -: 1132:case 4:
        -: 1133:YY_RULE_SETUP
        -: 1134:#line 118 "hex_lexer.l"
        -: 1135:{
        -: 1136:
        -: 1137:  yylval->integer = 0x0000;
        -: 1138:  return _MASKED_BYTE_;
        -: 1139:}
        -: 1140:	YY_BREAK
        -: 1141:case 5:
        -: 1142:YY_RULE_SETUP
        -: 1143:#line 124 "hex_lexer.l"
        -: 1144:{
        -: 1145:
        -: 1146:  BEGIN(range);
        -: 1147:  return yytext[0];
        -: 1148:}
        -: 1149:	YY_BREAK
        -: 1150:case 6:
        -: 1151:/* rule 6 can match eol */
        -: 1152:YY_RULE_SETUP
        -: 1153:#line 130 "hex_lexer.l"
        -: 1154:// skip comments
        -: 1155:	YY_BREAK
        -: 1156:case 7:
        -: 1157:YY_RULE_SETUP
        -: 1158:#line 132 "hex_lexer.l"
        -: 1159:// skip single-line comments
        -: 1160:	YY_BREAK
        -: 1161:case 8:
        -: 1162:YY_RULE_SETUP
        -: 1163:#line 134 "hex_lexer.l"
        -: 1164:{
        -: 1165:  return yytext[0];
        -: 1166:}
        -: 1167:	YY_BREAK
        -: 1168:case 9:
        -: 1169:YY_RULE_SETUP
        -: 1170:#line 138 "hex_lexer.l"
        -: 1171:{
        -: 1172:
        -: 1173:  yylval->integer = atoi(yytext);
        -: 1174:  return _NUMBER_;
        -: 1175:}
        -: 1176:	YY_BREAK
        -: 1177:case 10:
        -: 1178:YY_RULE_SETUP
        -: 1179:#line 144 "hex_lexer.l"
        -: 1180:{
        -: 1181:
        -: 1182:  BEGIN(INITIAL);
        -: 1183:  return yytext[0];
        -: 1184:}
        -: 1185:	YY_BREAK
        -: 1186:case 11:
        -: 1187:/* rule 11 can match eol */
        -: 1188:YY_RULE_SETUP
        -: 1189:#line 150 "hex_lexer.l"
        -: 1190:// skip whitespaces
        -: 1191:	YY_BREAK
        -: 1192:case 12:
        -: 1193:YY_RULE_SETUP
        -: 1194:#line 152 "hex_lexer.l"
        -: 1195:{
        -: 1196:
        -: 1197:  yyerror(yyscanner, lex_env, "invalid character in hex string jump");
        -: 1198:  yyterminate();
        -: 1199:}
        -: 1200:	YY_BREAK
        -: 1201:case 13:
        -: 1202:/* rule 13 can match eol */
        -: 1203:YY_RULE_SETUP
        -: 1204:#line 158 "hex_lexer.l"
        -: 1205:// skip whitespaces
        -: 1206:	YY_BREAK
        -: 1207:case 14:
        -: 1208:YY_RULE_SETUP
        -: 1209:#line 160 "hex_lexer.l"
        -: 1210:{        // pass valid characters to the parser
        -: 1211:
        -: 1212:  return yytext[0];
        -: 1213:}
        -: 1214:	YY_BREAK
        -: 1215:case 15:
        -: 1216:YY_RULE_SETUP
        -: 1217:#line 165 "hex_lexer.l"
        -: 1218:{               // reject all other characters
        -: 1219:
        -: 1220:  yyerror(yyscanner, lex_env, "invalid character in hex string");
        -: 1221:  yyterminate();
        -: 1222:}
        -: 1223:	YY_BREAK
        -: 1224:case 16:
        -: 1225:YY_RULE_SETUP
        -: 1226:#line 171 "hex_lexer.l"
        -: 1227:ECHO;
        -: 1228:	YY_BREAK
        -: 1229:#line 1230 "hex_lexer.c"
    #####: 1230:case YY_STATE_EOF(INITIAL):
        -: 1231:case YY_STATE_EOF(comment):
        -: 1232:case YY_STATE_EOF(range):
    #####: 1233:	yyterminate();
        -: 1234:
    #####: 1235:	case YY_END_OF_BUFFER:
        -: 1236:		{
        -: 1237:		/* Amount of text matched not including the EOB char. */
    #####: 1238:		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;
        -: 1239:
        -: 1240:		/* Undo the effects of YY_DO_BEFORE_ACTION. */
    #####: 1241:		*yy_cp = yyg->yy_hold_char;
        -: 1242:		YY_RESTORE_YY_MORE_OFFSET
        -: 1243:
    #####: 1244:		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
        -: 1245:			{
        -: 1246:			/* We're scanning a new file or input source.  It's
        -: 1247:			 * possible that this happened because the user
        -: 1248:			 * just pointed yyin at a new source and called
        -: 1249:			 * yylex().  If so, then we have to assure
        -: 1250:			 * consistency between YY_CURRENT_BUFFER and our
        -: 1251:			 * globals.  Here is the right place to do so, because
        -: 1252:			 * this is the first action (other than possibly a
        -: 1253:			 * back-up) that will match for the new input source.
        -: 1254:			 */
    #####: 1255:			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    #####: 1256:			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
    #####: 1257:			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
        -: 1258:			}
        -: 1259:
        -: 1260:		/* Note that here we test for yy_c_buf_p "<=" to the position
        -: 1261:		 * of the first EOB in the buffer, since yy_c_buf_p will
        -: 1262:		 * already have been incremented past the NUL character
        -: 1263:		 * (since all states make transitions on EOB to the
        -: 1264:		 * end-of-buffer state).  Contrast this with the test
        -: 1265:		 * in input().
        -: 1266:		 */
    #####: 1267:		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
        -: 1268:			{ /* This was really a NUL. */
        -: 1269:			yy_state_type yy_next_state;
        -: 1270:
    #####: 1271:			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;
        -: 1272:
    #####: 1273:			yy_current_state = yy_get_previous_state( yyscanner );
        -: 1274:
        -: 1275:			/* Okay, we're now positioned to make the NUL
        -: 1276:			 * transition.  We couldn't have
        -: 1277:			 * yy_get_previous_state() go ahead and do it
        -: 1278:			 * for us because it doesn't know how to deal
        -: 1279:			 * with the possibility of jamming (and we don't
        -: 1280:			 * want to build jamming into it because then it
        -: 1281:			 * will run more slowly).
        -: 1282:			 */
        -: 1283:
    #####: 1284:			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);
        -: 1285:
    #####: 1286:			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
        -: 1287:
    #####: 1288:			if ( yy_next_state )
        -: 1289:				{
        -: 1290:				/* Consume the NUL. */
    #####: 1291:				yy_cp = ++yyg->yy_c_buf_p;
    #####: 1292:				yy_current_state = yy_next_state;
    #####: 1293:				goto yy_match;
        -: 1294:				}
        -: 1295:
        -: 1296:			else
        -: 1297:				{
    #####: 1298:				yy_cp = yyg->yy_last_accepting_cpos;
    #####: 1299:				yy_current_state = yyg->yy_last_accepting_state;
    #####: 1300:				goto yy_find_action;
        -: 1301:				}
        -: 1302:			}
        -: 1303:
    #####: 1304:		else switch ( yy_get_next_buffer( yyscanner ) )
        -: 1305:			{
    #####: 1306:			case EOB_ACT_END_OF_FILE:
        -: 1307:				{
    #####: 1308:				yyg->yy_did_buffer_switch_on_eof = 0;
        -: 1309:
        -: 1310:				if ( yywrap( yyscanner ) )
        -: 1311:					{
        -: 1312:					/* Note: because we've taken care in
        -: 1313:					 * yy_get_next_buffer() to have set up
        -: 1314:					 * yytext, we can now set up
        -: 1315:					 * yy_c_buf_p so that if some total
        -: 1316:					 * hoser (like flex itself) wants to
        -: 1317:					 * call the scanner after we return the
        -: 1318:					 * YY_NULL, it'll still work - another
        -: 1319:					 * YY_NULL will get returned.
        -: 1320:					 */
    #####: 1321:					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;
        -: 1322:
    #####: 1323:					yy_act = YY_STATE_EOF(YY_START);
    #####: 1324:					goto do_action;
        -: 1325:					}
        -: 1326:
        -: 1327:				else
        -: 1328:					{
        -: 1329:					if ( ! yyg->yy_did_buffer_switch_on_eof )
        -: 1330:						YY_NEW_FILE;
        -: 1331:					}
        -: 1332:				break;
        -: 1333:				}
        -: 1334:
    #####: 1335:			case EOB_ACT_CONTINUE_SCAN:
    #####: 1336:				yyg->yy_c_buf_p =
    #####: 1337:					yyg->yytext_ptr + yy_amount_of_matched_text;
        -: 1338:
    #####: 1339:				yy_current_state = yy_get_previous_state( yyscanner );
        -: 1340:
    #####: 1341:				yy_cp = yyg->yy_c_buf_p;
    #####: 1342:				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
    #####: 1343:				goto yy_match;
        -: 1344:
    #####: 1345:			case EOB_ACT_LAST_MATCH:
    #####: 1346:				yyg->yy_c_buf_p =
    #####: 1347:				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];
        -: 1348:
    #####: 1349:				yy_current_state = yy_get_previous_state( yyscanner );
        -: 1350:
    #####: 1351:				yy_cp = yyg->yy_c_buf_p;
    #####: 1352:				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
    #####: 1353:				goto yy_find_action;
        -: 1354:			}
    #####: 1355:		break;
        -: 1356:		}
        -: 1357:
    #####: 1358:	default:
    #####: 1359:		YY_FATAL_ERROR(
        -: 1360:			"fatal flex scanner internal error--no action found" );
        -: 1361:	} /* end of action switch */
        -: 1362:		} /* end of scanning one token */
        -: 1363:	} /* end of user's declarations */
        -: 1364:} /* end of yylex */
        -: 1365:
        -: 1366:/* yy_get_next_buffer - try to read in a new buffer
        -: 1367: *
        -: 1368: * Returns a code representing an action:
        -: 1369: *	EOB_ACT_LAST_MATCH -
        -: 1370: *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
        -: 1371: *	EOB_ACT_END_OF_FILE - end of file
        -: 1372: */
    #####: 1373:static int yy_get_next_buffer (yyscan_t yyscanner)
        -: 1374:{
    #####: 1375:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 1376:	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    #####: 1377:	char *source = yyg->yytext_ptr;
        -: 1378:	int number_to_move, i;
        -: 1379:	int ret_val;
        -: 1380:
    #####: 1381:	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
    #####: 1382:		YY_FATAL_ERROR(
        -: 1383:		"fatal flex scanner internal error--end of buffer missed" );
        -: 1384:
    #####: 1385:	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
        -: 1386:		{ /* Don't try to fill the buffer, so this is an EOF. */
    #####: 1387:		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
        -: 1388:			{
        -: 1389:			/* We matched a single character, the EOB, so
        -: 1390:			 * treat this as a final EOF.
        -: 1391:			 */
    #####: 1392:			return EOB_ACT_END_OF_FILE;
        -: 1393:			}
        -: 1394:
        -: 1395:		else
        -: 1396:			{
        -: 1397:			/* We matched some text prior to the EOB, first
        -: 1398:			 * process it.
        -: 1399:			 */
    #####: 1400:			return EOB_ACT_LAST_MATCH;
        -: 1401:			}
        -: 1402:		}
        -: 1403:
        -: 1404:	/* Try to read more data. */
        -: 1405:
        -: 1406:	/* First move last chars to start of buffer. */
    #####: 1407:	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);
        -: 1408:
    #####: 1409:	for ( i = 0; i < number_to_move; ++i )
    #####: 1410:		*(dest++) = *(source++);
        -: 1411:
    #####: 1412:	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        -: 1413:		/* don't do the read, it's not guaranteed to return an EOF,
        -: 1414:		 * just force an EOF
        -: 1415:		 */
    #####: 1416:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;
        -: 1417:
        -: 1418:	else
        -: 1419:		{
    #####: 1420:			int num_to_read =
    #####: 1421:			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
        -: 1422:
    #####: 1423:		while ( num_to_read <= 0 )
        -: 1424:			{ /* Not enough room in the buffer - grow it. */
        -: 1425:
        -: 1426:			/* just a shorter name for the current buffer */
    #####: 1427:			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;
        -: 1428:
    #####: 1429:			int yy_c_buf_p_offset =
    #####: 1430:				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);
        -: 1431:
    #####: 1432:			if ( b->yy_is_our_buffer )
        -: 1433:				{
    #####: 1434:				int new_size = b->yy_buf_size * 2;
        -: 1435:
    #####: 1436:				if ( new_size <= 0 )
    #####: 1437:					b->yy_buf_size += b->yy_buf_size / 8;
        -: 1438:				else
    #####: 1439:					b->yy_buf_size *= 2;
        -: 1440:
    #####: 1441:				b->yy_ch_buf = (char *)
        -: 1442:					/* Include room in for 2 EOB chars. */
    #####: 1443:					yyrealloc( (void *) b->yy_ch_buf,
    #####: 1444:							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
        -: 1445:				}
        -: 1446:			else
        -: 1447:				/* Can't grow it, we don't own it. */
    #####: 1448:				b->yy_ch_buf = NULL;
        -: 1449:
    #####: 1450:			if ( ! b->yy_ch_buf )
    #####: 1451:				YY_FATAL_ERROR(
        -: 1452:				"fatal error - scanner input buffer overflow" );
        -: 1453:
    #####: 1454:			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
        -: 1455:
    #####: 1456:			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
        -: 1457:						number_to_move - 1;
        -: 1458:
        -: 1459:			}
        -: 1460:
    #####: 1461:		if ( num_to_read > YY_READ_BUF_SIZE )
    #####: 1462:			num_to_read = YY_READ_BUF_SIZE;
        -: 1463:
        -: 1464:		/* Read in more data. */
    #####: 1465:		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
        -: 1466:			yyg->yy_n_chars, num_to_read );
        -: 1467:
    #####: 1468:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        -: 1469:		}
        -: 1470:
    #####: 1471:	if ( yyg->yy_n_chars == 0 )
        -: 1472:		{
    #####: 1473:		if ( number_to_move == YY_MORE_ADJ )
        -: 1474:			{
    #####: 1475:			ret_val = EOB_ACT_END_OF_FILE;
    #####: 1476:			yyrestart( yyin  , yyscanner);
        -: 1477:			}
        -: 1478:
        -: 1479:		else
        -: 1480:			{
    #####: 1481:			ret_val = EOB_ACT_LAST_MATCH;
    #####: 1482:			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
        -: 1483:				YY_BUFFER_EOF_PENDING;
        -: 1484:			}
        -: 1485:		}
        -: 1486:
        -: 1487:	else
    #####: 1488:		ret_val = EOB_ACT_CONTINUE_SCAN;
        -: 1489:
    #####: 1490:	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
        -: 1491:		/* Extend the array by 50%, plus the number we really need. */
    #####: 1492:		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
    #####: 1493:		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
    #####: 1494:			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
    #####: 1495:		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    #####: 1496:			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
        -: 1497:		/* "- 2" to take care of EOB's */
    #####: 1498:		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
        -: 1499:	}
        -: 1500:
    #####: 1501:	yyg->yy_n_chars += number_to_move;
    #####: 1502:	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    #####: 1503:	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
        -: 1504:
    #####: 1505:	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
        -: 1506:
    #####: 1507:	return ret_val;
        -: 1508:}
        -: 1509:
        -: 1510:/* yy_get_previous_state - get the state just before the EOB char was reached */
        -: 1511:
    #####: 1512:    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
        -: 1513:{
        -: 1514:	yy_state_type yy_current_state;
        -: 1515:	char *yy_cp;
    #####: 1516:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 1517:
    #####: 1518:	yy_current_state = yyg->yy_start;
        -: 1519:
    #####: 1520:	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
        -: 1521:		{
    #####: 1522:		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    #####: 1523:		if ( yy_accept[yy_current_state] )
        -: 1524:			{
    #####: 1525:			yyg->yy_last_accepting_state = yy_current_state;
    #####: 1526:			yyg->yy_last_accepting_cpos = yy_cp;
        -: 1527:			}
    #####: 1528:		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        -: 1529:			{
    #####: 1530:			yy_current_state = (int) yy_def[yy_current_state];
    #####: 1531:			if ( yy_current_state >= 35 )
    #####: 1532:				yy_c = yy_meta[yy_c];
        -: 1533:			}
    #####: 1534:		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
        -: 1535:		}
        -: 1536:
    #####: 1537:	return yy_current_state;
        -: 1538:}
        -: 1539:
        -: 1540:/* yy_try_NUL_trans - try to make a transition on the NUL character
        -: 1541: *
        -: 1542: * synopsis
        -: 1543: *	next_state = yy_try_NUL_trans( current_state );
        -: 1544: */
    #####: 1545:    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
        -: 1546:{
        -: 1547:	int yy_is_jam;
    #####: 1548:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
    #####: 1549:	char *yy_cp = yyg->yy_c_buf_p;
        -: 1550:
    #####: 1551:	YY_CHAR yy_c = 1;
    #####: 1552:	if ( yy_accept[yy_current_state] )
        -: 1553:		{
    #####: 1554:		yyg->yy_last_accepting_state = yy_current_state;
    #####: 1555:		yyg->yy_last_accepting_cpos = yy_cp;
        -: 1556:		}
    #####: 1557:	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        -: 1558:		{
    #####: 1559:		yy_current_state = (int) yy_def[yy_current_state];
    #####: 1560:		if ( yy_current_state >= 35 )
    #####: 1561:			yy_c = yy_meta[yy_c];
        -: 1562:		}
    #####: 1563:	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    #####: 1564:	yy_is_jam = (yy_current_state == 34);
        -: 1565:
        -: 1566:	(void)yyg;
    #####: 1567:	return yy_is_jam ? 0 : yy_current_state;
        -: 1568:}
        -: 1569:
        -: 1570:#ifndef YY_NO_UNPUT
        -: 1571:
        -: 1572:#endif
        -: 1573:
        -: 1574:#ifndef YY_NO_INPUT
        -: 1575:#ifdef __cplusplus
        -: 1576:    static int yyinput (yyscan_t yyscanner)
        -: 1577:#else
        -: 1578:    static int input  (yyscan_t yyscanner)
        -: 1579:#endif
        -: 1580:
        -: 1581:{
        -: 1582:	int c;
        -: 1583:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 1584:
        -: 1585:	*yyg->yy_c_buf_p = yyg->yy_hold_char;
        -: 1586:
        -: 1587:	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        -: 1588:		{
        -: 1589:		/* yy_c_buf_p now points to the character we want to return.
        -: 1590:		 * If this occurs *before* the EOB characters, then it's a
        -: 1591:		 * valid NUL; if not, then we've hit the end of the buffer.
        -: 1592:		 */
        -: 1593:		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
        -: 1594:			/* This was really a NUL. */
        -: 1595:			*yyg->yy_c_buf_p = '\0';
        -: 1596:
        -: 1597:		else
        -: 1598:			{ /* need more input */
        -: 1599:			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
        -: 1600:			++yyg->yy_c_buf_p;
        -: 1601:
        -: 1602:			switch ( yy_get_next_buffer( yyscanner ) )
        -: 1603:				{
        -: 1604:				case EOB_ACT_LAST_MATCH:
        -: 1605:					/* This happens because yy_g_n_b()
        -: 1606:					 * sees that we've accumulated a
        -: 1607:					 * token and flags that we need to
        -: 1608:					 * try matching the token before
        -: 1609:					 * proceeding.  But for input(),
        -: 1610:					 * there's no matching to consider.
        -: 1611:					 * So convert the EOB_ACT_LAST_MATCH
        -: 1612:					 * to EOB_ACT_END_OF_FILE.
        -: 1613:					 */
        -: 1614:
        -: 1615:					/* Reset buffer status. */
        -: 1616:					yyrestart( yyin , yyscanner);
        -: 1617:
        -: 1618:					/*FALLTHROUGH*/
        -: 1619:
        -: 1620:				case EOB_ACT_END_OF_FILE:
        -: 1621:					{
        -: 1622:					if ( yywrap( yyscanner ) )
        -: 1623:						return 0;
        -: 1624:
        -: 1625:					if ( ! yyg->yy_did_buffer_switch_on_eof )
        -: 1626:						YY_NEW_FILE;
        -: 1627:#ifdef __cplusplus
        -: 1628:					return yyinput(yyscanner);
        -: 1629:#else
        -: 1630:					return input(yyscanner);
        -: 1631:#endif
        -: 1632:					}
        -: 1633:
        -: 1634:				case EOB_ACT_CONTINUE_SCAN:
        -: 1635:					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
        -: 1636:					break;
        -: 1637:				}
        -: 1638:			}
        -: 1639:		}
        -: 1640:
        -: 1641:	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
        -: 1642:	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
        -: 1643:	yyg->yy_hold_char = *++yyg->yy_c_buf_p;
        -: 1644:
        -: 1645:	if ( c == '\n' )
        -: 1646:		
        -: 1647:    do{ yylineno++;
        -: 1648:        yycolumn=0;
        -: 1649:    }while(0)
        -: 1650:;
        -: 1651:
        -: 1652:	return c;
        -: 1653:}
        -: 1654:#endif	/* ifndef YY_NO_INPUT */
        -: 1655:
        -: 1656:/** Immediately switch to a different input stream.
        -: 1657: * @param input_file A readable stream.
        -: 1658: * @param yyscanner The scanner object.
        -: 1659: * @note This function does not reset the start condition to @c INITIAL .
        -: 1660: */
    #####: 1661:    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
        -: 1662:{
    #####: 1663:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 1664:
    #####: 1665:	if ( ! YY_CURRENT_BUFFER ){
    #####: 1666:        yyensure_buffer_stack (yyscanner);
    #####: 1667:		YY_CURRENT_BUFFER_LVALUE =
    #####: 1668:            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
        -: 1669:	}
        -: 1670:
    #####: 1671:	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
    #####: 1672:	yy_load_buffer_state( yyscanner );
    #####: 1673:}
        -: 1674:
        -: 1675:/** Switch to a different input buffer.
        -: 1676: * @param new_buffer The new input buffer.
        -: 1677: * @param yyscanner The scanner object.
        -: 1678: */
    #####: 1679:    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
        -: 1680:{
    #####: 1681:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 1682:
        -: 1683:	/* TODO. We should be able to replace this entire function body
        -: 1684:	 * with
        -: 1685:	 *		yypop_buffer_state();
        -: 1686:	 *		yypush_buffer_state(new_buffer);
        -: 1687:     */
    #####: 1688:	yyensure_buffer_stack (yyscanner);
    #####: 1689:	if ( YY_CURRENT_BUFFER == new_buffer )
    #####: 1690:		return;
        -: 1691:
    #####: 1692:	if ( YY_CURRENT_BUFFER )
        -: 1693:		{
        -: 1694:		/* Flush out information for old buffer. */
    #####: 1695:		*yyg->yy_c_buf_p = yyg->yy_hold_char;
    #####: 1696:		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    #####: 1697:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        -: 1698:		}
        -: 1699:
    #####: 1700:	YY_CURRENT_BUFFER_LVALUE = new_buffer;
    #####: 1701:	yy_load_buffer_state( yyscanner );
        -: 1702:
        -: 1703:	/* We don't actually know whether we did this switch during
        -: 1704:	 * EOF (yywrap()) processing, but the only time this flag
        -: 1705:	 * is looked at is after yywrap() is called, so it's safe
        -: 1706:	 * to go ahead and always set it.
        -: 1707:	 */
    #####: 1708:	yyg->yy_did_buffer_switch_on_eof = 1;
        -: 1709:}
        -: 1710:
    #####: 1711:static void yy_load_buffer_state  (yyscan_t yyscanner)
        -: 1712:{
    #####: 1713:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 1714:	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    #####: 1715:	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    #####: 1716:	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    #####: 1717:	yyg->yy_hold_char = *yyg->yy_c_buf_p;
    #####: 1718:}
        -: 1719:
        -: 1720:/** Allocate and initialize an input buffer state.
        -: 1721: * @param file A readable stream.
        -: 1722: * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
        -: 1723: * @param yyscanner The scanner object.
        -: 1724: * @return the allocated buffer state.
        -: 1725: */
    #####: 1726:    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
        -: 1727:{
        -: 1728:	YY_BUFFER_STATE b;
        -: 1729:    
    #####: 1730:	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
    #####: 1731:	if ( ! b )
    #####: 1732:		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
        -: 1733:
    #####: 1734:	b->yy_buf_size = size;
        -: 1735:
        -: 1736:	/* yy_ch_buf has to be 2 characters longer than the size given because
        -: 1737:	 * we need to put in 2 end-of-buffer characters.
        -: 1738:	 */
    #####: 1739:	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
    #####: 1740:	if ( ! b->yy_ch_buf )
    #####: 1741:		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
        -: 1742:
    #####: 1743:	b->yy_is_our_buffer = 1;
        -: 1744:
    #####: 1745:	yy_init_buffer( b, file , yyscanner);
        -: 1746:
    #####: 1747:	return b;
        -: 1748:}
        -: 1749:
        -: 1750:/** Destroy the buffer.
        -: 1751: * @param b a buffer created with yy_create_buffer()
        -: 1752: * @param yyscanner The scanner object.
        -: 1753: */
    #####: 1754:    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
        -: 1755:{
    #####: 1756:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 1757:
    #####: 1758:	if ( ! b )
    #####: 1759:		return;
        -: 1760:
    #####: 1761:	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
    #####: 1762:		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
        -: 1763:
    #####: 1764:	if ( b->yy_is_our_buffer )
    #####: 1765:		yyfree( (void *) b->yy_ch_buf , yyscanner );
        -: 1766:
    #####: 1767:	yyfree( (void *) b , yyscanner );
        -: 1768:}
        -: 1769:
        -: 1770:/* Initializes or reinitializes a buffer.
        -: 1771: * This function is sometimes called more than once on the same buffer,
        -: 1772: * such as during a yyrestart() or at EOF.
        -: 1773: */
    #####: 1774:    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
        -: 1775:
        -: 1776:{
    #####: 1777:	int oerrno = errno;
    #####: 1778:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 1779:
    #####: 1780:	yy_flush_buffer( b , yyscanner);
        -: 1781:
    #####: 1782:	b->yy_input_file = file;
    #####: 1783:	b->yy_fill_buffer = 1;
        -: 1784:
        -: 1785:    /* If b is the current buffer, then yy_init_buffer was _probably_
        -: 1786:     * called from yyrestart() or through yy_get_next_buffer.
        -: 1787:     * In that case, we don't want to reset the lineno or column.
        -: 1788:     */
    #####: 1789:    if (b != YY_CURRENT_BUFFER){
    #####: 1790:        b->yy_bs_lineno = 1;
    #####: 1791:        b->yy_bs_column = 0;
        -: 1792:    }
        -: 1793:
    #####: 1794:        b->yy_is_interactive = 0;
        -: 1795:    
    #####: 1796:	errno = oerrno;
    #####: 1797:}
        -: 1798:
        -: 1799:/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
        -: 1800: * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
        -: 1801: * @param yyscanner The scanner object.
        -: 1802: */
    #####: 1803:    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
        -: 1804:{
    #####: 1805:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 1806:	if ( ! b )
    #####: 1807:		return;
        -: 1808:
    #####: 1809:	b->yy_n_chars = 0;
        -: 1810:
        -: 1811:	/* We always need two end-of-buffer characters.  The first causes
        -: 1812:	 * a transition to the end-of-buffer state.  The second causes
        -: 1813:	 * a jam in that state.
        -: 1814:	 */
    #####: 1815:	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    #####: 1816:	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
        -: 1817:
    #####: 1818:	b->yy_buf_pos = &b->yy_ch_buf[0];
        -: 1819:
    #####: 1820:	b->yy_at_bol = 1;
    #####: 1821:	b->yy_buffer_status = YY_BUFFER_NEW;
        -: 1822:
    #####: 1823:	if ( b == YY_CURRENT_BUFFER )
    #####: 1824:		yy_load_buffer_state( yyscanner );
        -: 1825:}
        -: 1826:
        -: 1827:/** Pushes the new state onto the stack. The new state becomes
        -: 1828: *  the current state. This function will allocate the stack
        -: 1829: *  if necessary.
        -: 1830: *  @param new_buffer The new state.
        -: 1831: *  @param yyscanner The scanner object.
        -: 1832: */
    #####: 1833:void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
        -: 1834:{
    #####: 1835:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 1836:	if (new_buffer == NULL)
    #####: 1837:		return;
        -: 1838:
    #####: 1839:	yyensure_buffer_stack(yyscanner);
        -: 1840:
        -: 1841:	/* This block is copied from yy_switch_to_buffer. */
    #####: 1842:	if ( YY_CURRENT_BUFFER )
        -: 1843:		{
        -: 1844:		/* Flush out information for old buffer. */
    #####: 1845:		*yyg->yy_c_buf_p = yyg->yy_hold_char;
    #####: 1846:		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    #####: 1847:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        -: 1848:		}
        -: 1849:
        -: 1850:	/* Only push if top exists. Otherwise, replace top. */
    #####: 1851:	if (YY_CURRENT_BUFFER)
    #####: 1852:		yyg->yy_buffer_stack_top++;
    #####: 1853:	YY_CURRENT_BUFFER_LVALUE = new_buffer;
        -: 1854:
        -: 1855:	/* copied from yy_switch_to_buffer. */
    #####: 1856:	yy_load_buffer_state( yyscanner );
    #####: 1857:	yyg->yy_did_buffer_switch_on_eof = 1;
        -: 1858:}
        -: 1859:
        -: 1860:/** Removes and deletes the top of the stack, if present.
        -: 1861: *  The next element becomes the new top.
        -: 1862: *  @param yyscanner The scanner object.
        -: 1863: */
    #####: 1864:void yypop_buffer_state (yyscan_t yyscanner)
        -: 1865:{
    #####: 1866:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 1867:	if (!YY_CURRENT_BUFFER)
    #####: 1868:		return;
        -: 1869:
    #####: 1870:	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
    #####: 1871:	YY_CURRENT_BUFFER_LVALUE = NULL;
    #####: 1872:	if (yyg->yy_buffer_stack_top > 0)
    #####: 1873:		--yyg->yy_buffer_stack_top;
        -: 1874:
    #####: 1875:	if (YY_CURRENT_BUFFER) {
    #####: 1876:		yy_load_buffer_state( yyscanner );
    #####: 1877:		yyg->yy_did_buffer_switch_on_eof = 1;
        -: 1878:	}
        -: 1879:}
        -: 1880:
        -: 1881:/* Allocates the stack if it does not exist.
        -: 1882: *  Guarantees space for at least one push.
        -: 1883: */
    #####: 1884:static void yyensure_buffer_stack (yyscan_t yyscanner)
        -: 1885:{
        -: 1886:	yy_size_t num_to_alloc;
    #####: 1887:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 1888:
    #####: 1889:	if (!yyg->yy_buffer_stack) {
        -: 1890:
        -: 1891:		/* First allocation is just for 2 elements, since we don't know if this
        -: 1892:		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
        -: 1893:		 * immediate realloc on the next call.
        -: 1894:         */
    #####: 1895:      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
    #####: 1896:		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
        -: 1897:								(num_to_alloc * sizeof(struct yy_buffer_state*)
        -: 1898:								, yyscanner);
    #####: 1899:		if ( ! yyg->yy_buffer_stack )
    #####: 1900:			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        -: 1901:
    #####: 1902:		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
        -: 1903:
    #####: 1904:		yyg->yy_buffer_stack_max = num_to_alloc;
    #####: 1905:		yyg->yy_buffer_stack_top = 0;
    #####: 1906:		return;
        -: 1907:	}
        -: 1908:
    #####: 1909:	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){
        -: 1910:
        -: 1911:		/* Increase the buffer to prepare for a possible push. */
    #####: 1912:		yy_size_t grow_size = 8 /* arbitrary grow size */;
        -: 1913:
    #####: 1914:		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
    #####: 1915:		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
    #####: 1916:								(yyg->yy_buffer_stack,
        -: 1917:								num_to_alloc * sizeof(struct yy_buffer_state*)
        -: 1918:								, yyscanner);
    #####: 1919:		if ( ! yyg->yy_buffer_stack )
    #####: 1920:			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        -: 1921:
        -: 1922:		/* zero only the new slots.*/
    #####: 1923:		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
    #####: 1924:		yyg->yy_buffer_stack_max = num_to_alloc;
        -: 1925:	}
        -: 1926:}
        -: 1927:
        -: 1928:/** Setup the input buffer state to scan directly from a user-specified character buffer.
        -: 1929: * @param base the character buffer
        -: 1930: * @param size the size in bytes of the character buffer
        -: 1931: * @param yyscanner The scanner object.
        -: 1932: * @return the newly allocated buffer state object.
        -: 1933: */
    #####: 1934:YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
        -: 1935:{
        -: 1936:	YY_BUFFER_STATE b;
        -: 1937:    
    #####: 1938:	if ( size < 2 ||
    #####: 1939:	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
    #####: 1940:	     base[size-1] != YY_END_OF_BUFFER_CHAR )
        -: 1941:		/* They forgot to leave room for the EOB's. */
    #####: 1942:		return NULL;
        -: 1943:
    #####: 1944:	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
    #####: 1945:	if ( ! b )
    #####: 1946:		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
        -: 1947:
    #####: 1948:	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
    #####: 1949:	b->yy_buf_pos = b->yy_ch_buf = base;
    #####: 1950:	b->yy_is_our_buffer = 0;
    #####: 1951:	b->yy_input_file = NULL;
    #####: 1952:	b->yy_n_chars = b->yy_buf_size;
    #####: 1953:	b->yy_is_interactive = 0;
    #####: 1954:	b->yy_at_bol = 1;
    #####: 1955:	b->yy_fill_buffer = 0;
    #####: 1956:	b->yy_buffer_status = YY_BUFFER_NEW;
        -: 1957:
    #####: 1958:	yy_switch_to_buffer( b , yyscanner );
        -: 1959:
    #####: 1960:	return b;
        -: 1961:}
        -: 1962:
        -: 1963:/** Setup the input buffer state to scan a string. The next call to yylex() will
        -: 1964: * scan from a @e copy of @a str.
        -: 1965: * @param yystr a NUL-terminated string to scan
        -: 1966: * @param yyscanner The scanner object.
        -: 1967: * @return the newly allocated buffer state object.
        -: 1968: * @note If you want to scan bytes that may contain NUL values, then use
        -: 1969: *       yy_scan_bytes() instead.
        -: 1970: */
    #####: 1971:YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
        -: 1972:{
        -: 1973:    
    #####: 1974:	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
        -: 1975:}
        -: 1976:
        -: 1977:/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
        -: 1978: * scan from a @e copy of @a bytes.
        -: 1979: * @param yybytes the byte buffer to scan
        -: 1980: * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
        -: 1981: * @param yyscanner The scanner object.
        -: 1982: * @return the newly allocated buffer state object.
        -: 1983: */
    #####: 1984:YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
        -: 1985:{
        -: 1986:	YY_BUFFER_STATE b;
        -: 1987:	char *buf;
        -: 1988:	yy_size_t n;
        -: 1989:	int i;
        -: 1990:    
        -: 1991:	/* Get memory for full buffer, including space for trailing EOB's. */
    #####: 1992:	n = (yy_size_t) (_yybytes_len + 2);
    #####: 1993:	buf = (char *) yyalloc( n , yyscanner );
    #####: 1994:	if ( ! buf )
    #####: 1995:		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
        -: 1996:
    #####: 1997:	for ( i = 0; i < _yybytes_len; ++i )
    #####: 1998:		buf[i] = yybytes[i];
        -: 1999:
    #####: 2000:	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
        -: 2001:
    #####: 2002:	b = yy_scan_buffer( buf, n , yyscanner);
    #####: 2003:	if ( ! b )
    #####: 2004:		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
        -: 2005:
        -: 2006:	/* It's okay to grow etc. this buffer, and we should throw it
        -: 2007:	 * away when we're done.
        -: 2008:	 */
    #####: 2009:	b->yy_is_our_buffer = 1;
        -: 2010:
    #####: 2011:	return b;
        -: 2012:}
        -: 2013:
        -: 2014:#ifndef YY_EXIT_FAILURE
        -: 2015:#define YY_EXIT_FAILURE 2
        -: 2016:#endif
        -: 2017:
    #####: 2018:static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
        -: 2019:{
    #####: 2020:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2021:	(void)yyg;
    #####: 2022:	fprintf( stderr, "%s\n", msg );
    #####: 2023:	exit( YY_EXIT_FAILURE );
        -: 2024:}
        -: 2025:
        -: 2026:/* Redefine yyless() so it works in section 3 code. */
        -: 2027:
        -: 2028:#undef yyless
        -: 2029:#define yyless(n) \
        -: 2030:	do \
        -: 2031:		{ \
        -: 2032:		/* Undo effects of setting up yytext. */ \
        -: 2033:        int yyless_macro_arg = (n); \
        -: 2034:        YY_LESS_LINENO(yyless_macro_arg);\
        -: 2035:		yytext[yyleng] = yyg->yy_hold_char; \
        -: 2036:		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
        -: 2037:		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
        -: 2038:		*yyg->yy_c_buf_p = '\0'; \
        -: 2039:		yyleng = yyless_macro_arg; \
        -: 2040:		} \
        -: 2041:	while ( 0 )
        -: 2042:
        -: 2043:/* Accessor  methods (get/set functions) to struct members. */
        -: 2044:
        -: 2045:/** Get the user-defined data for this scanner.
        -: 2046: * @param yyscanner The scanner object.
        -: 2047: */
    #####: 2048:YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
        -: 2049:{
    #####: 2050:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2051:    return yyextra;
        -: 2052:}
        -: 2053:
        -: 2054:/** Get the current line number.
        -: 2055: * @param yyscanner The scanner object.
        -: 2056: */
    #####: 2057:int yyget_lineno  (yyscan_t yyscanner)
        -: 2058:{
    #####: 2059:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2060:
    #####: 2061:        if (! YY_CURRENT_BUFFER)
    #####: 2062:            return 0;
        -: 2063:    
    #####: 2064:    return yylineno;
        -: 2065:}
        -: 2066:
        -: 2067:/** Get the current column number.
        -: 2068: * @param yyscanner The scanner object.
        -: 2069: */
    #####: 2070:int yyget_column  (yyscan_t yyscanner)
        -: 2071:{
    #####: 2072:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2073:
    #####: 2074:        if (! YY_CURRENT_BUFFER)
    #####: 2075:            return 0;
        -: 2076:    
    #####: 2077:    return yycolumn;
        -: 2078:}
        -: 2079:
        -: 2080:/** Get the input stream.
        -: 2081: * @param yyscanner The scanner object.
        -: 2082: */
    #####: 2083:FILE *yyget_in  (yyscan_t yyscanner)
        -: 2084:{
    #####: 2085:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2086:    return yyin;
        -: 2087:}
        -: 2088:
        -: 2089:/** Get the output stream.
        -: 2090: * @param yyscanner The scanner object.
        -: 2091: */
    #####: 2092:FILE *yyget_out  (yyscan_t yyscanner)
        -: 2093:{
    #####: 2094:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2095:    return yyout;
        -: 2096:}
        -: 2097:
        -: 2098:/** Get the length of the current token.
        -: 2099: * @param yyscanner The scanner object.
        -: 2100: */
    #####: 2101:int yyget_leng  (yyscan_t yyscanner)
        -: 2102:{
    #####: 2103:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2104:    return yyleng;
        -: 2105:}
        -: 2106:
        -: 2107:/** Get the current token.
        -: 2108: * @param yyscanner The scanner object.
        -: 2109: */
        -: 2110:
    #####: 2111:char *yyget_text  (yyscan_t yyscanner)
        -: 2112:{
    #####: 2113:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2114:    return yytext;
        -: 2115:}
        -: 2116:
        -: 2117:/** Set the user-defined data. This data is never touched by the scanner.
        -: 2118: * @param user_defined The data to be associated with this scanner.
        -: 2119: * @param yyscanner The scanner object.
        -: 2120: */
    #####: 2121:void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
        -: 2122:{
    #####: 2123:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2124:    yyextra = user_defined ;
    #####: 2125:}
        -: 2126:
        -: 2127:/** Set the current line number.
        -: 2128: * @param _line_number line number
        -: 2129: * @param yyscanner The scanner object.
        -: 2130: */
    #####: 2131:void yyset_lineno (int  _line_number , yyscan_t yyscanner)
        -: 2132:{
    #####: 2133:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2134:
        -: 2135:        /* lineno is only valid if an input buffer exists. */
    #####: 2136:        if (! YY_CURRENT_BUFFER )
    #####: 2137:           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
        -: 2138:    
    #####: 2139:    yylineno = _line_number;
    #####: 2140:}
        -: 2141:
        -: 2142:/** Set the current column.
        -: 2143: * @param _column_no column number
        -: 2144: * @param yyscanner The scanner object.
        -: 2145: */
    #####: 2146:void yyset_column (int  _column_no , yyscan_t yyscanner)
        -: 2147:{
    #####: 2148:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2149:
        -: 2150:        /* column is only valid if an input buffer exists. */
    #####: 2151:        if (! YY_CURRENT_BUFFER )
    #####: 2152:           YY_FATAL_ERROR( "yyset_column called with no buffer" );
        -: 2153:    
    #####: 2154:    yycolumn = _column_no;
    #####: 2155:}
        -: 2156:
        -: 2157:/** Set the input stream. This does not discard the current
        -: 2158: * input buffer.
        -: 2159: * @param _in_str A readable stream.
        -: 2160: * @param yyscanner The scanner object.
        -: 2161: * @see yy_switch_to_buffer
        -: 2162: */
    #####: 2163:void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
        -: 2164:{
    #####: 2165:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2166:    yyin = _in_str ;
    #####: 2167:}
        -: 2168:
    #####: 2169:void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
        -: 2170:{
    #####: 2171:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2172:    yyout = _out_str ;
    #####: 2173:}
        -: 2174:
    #####: 2175:int yyget_debug  (yyscan_t yyscanner)
        -: 2176:{
    #####: 2177:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2178:    return yy_flex_debug;
        -: 2179:}
        -: 2180:
    #####: 2181:void yyset_debug (int  _bdebug , yyscan_t yyscanner)
        -: 2182:{
    #####: 2183:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2184:    yy_flex_debug = _bdebug ;
    #####: 2185:}
        -: 2186:
        -: 2187:/* Accessor methods for yylval and yylloc */
        -: 2188:
    #####: 2189:YYSTYPE * yyget_lval  (yyscan_t yyscanner)
        -: 2190:{
    #####: 2191:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2192:    return yylval;
        -: 2193:}
        -: 2194:
    #####: 2195:void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
        -: 2196:{
    #####: 2197:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2198:    yylval = yylval_param;
    #####: 2199:}
        -: 2200:
        -: 2201:/* User-visible API */
        -: 2202:
        -: 2203:/* yylex_init is special because it creates the scanner itself, so it is
        -: 2204: * the ONLY reentrant function that doesn't take the scanner as the last argument.
        -: 2205: * That's why we explicitly handle the declaration, instead of using our macros.
        -: 2206: */
    #####: 2207:int yylex_init(yyscan_t* ptr_yy_globals)
        -: 2208:{
    #####: 2209:    if (ptr_yy_globals == NULL){
    #####: 2210:        errno = EINVAL;
    #####: 2211:        return 1;
        -: 2212:    }
        -: 2213:
    #####: 2214:    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );
        -: 2215:
    #####: 2216:    if (*ptr_yy_globals == NULL){
    #####: 2217:        errno = ENOMEM;
    #####: 2218:        return 1;
        -: 2219:    }
        -: 2220:
        -: 2221:    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    #####: 2222:    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
        -: 2223:
    #####: 2224:    return yy_init_globals ( *ptr_yy_globals );
        -: 2225:}
        -: 2226:
        -: 2227:/* yylex_init_extra has the same functionality as yylex_init, but follows the
        -: 2228: * convention of taking the scanner as the last argument. Note however, that
        -: 2229: * this is a *pointer* to a scanner, as it will be allocated by this call (and
        -: 2230: * is the reason, too, why this function also must handle its own declaration).
        -: 2231: * The user defined value in the first argument will be available to yyalloc in
        -: 2232: * the yyextra field.
        -: 2233: */
    #####: 2234:int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
        -: 2235:{
        -: 2236:    struct yyguts_t dummy_yyguts;
        -: 2237:
    #####: 2238:    yyset_extra (yy_user_defined, &dummy_yyguts);
        -: 2239:
    #####: 2240:    if (ptr_yy_globals == NULL){
    #####: 2241:        errno = EINVAL;
    #####: 2242:        return 1;
        -: 2243:    }
        -: 2244:
    #####: 2245:    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
        -: 2246:
    #####: 2247:    if (*ptr_yy_globals == NULL){
    #####: 2248:        errno = ENOMEM;
    #####: 2249:        return 1;
        -: 2250:    }
        -: 2251:
        -: 2252:    /* By setting to 0xAA, we expose bugs in
        -: 2253:    yy_init_globals. Leave at 0x00 for releases. */
    #####: 2254:    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
        -: 2255:
    #####: 2256:    yyset_extra (yy_user_defined, *ptr_yy_globals);
        -: 2257:
    #####: 2258:    return yy_init_globals ( *ptr_yy_globals );
        -: 2259:}
        -: 2260:
    #####: 2261:static int yy_init_globals (yyscan_t yyscanner)
        -: 2262:{
    #####: 2263:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2264:    /* Initialization is the same as for the non-reentrant scanner.
        -: 2265:     * This function is called from yylex_destroy(), so don't allocate here.
        -: 2266:     */
        -: 2267:
    #####: 2268:    yyg->yy_buffer_stack = NULL;
    #####: 2269:    yyg->yy_buffer_stack_top = 0;
    #####: 2270:    yyg->yy_buffer_stack_max = 0;
    #####: 2271:    yyg->yy_c_buf_p = NULL;
    #####: 2272:    yyg->yy_init = 0;
    #####: 2273:    yyg->yy_start = 0;
        -: 2274:
    #####: 2275:    yyg->yy_start_stack_ptr = 0;
    #####: 2276:    yyg->yy_start_stack_depth = 0;
    #####: 2277:    yyg->yy_start_stack =  NULL;
        -: 2278:
        -: 2279:/* Defined in main.c */
        -: 2280:#ifdef YY_STDINIT
        -: 2281:    yyin = stdin;
        -: 2282:    yyout = stdout;
        -: 2283:#else
    #####: 2284:    yyin = NULL;
    #####: 2285:    yyout = NULL;
        -: 2286:#endif
        -: 2287:
        -: 2288:    /* For future reference: Set errno on error, since we are called by
        -: 2289:     * yylex_init()
        -: 2290:     */
    #####: 2291:    return 0;
        -: 2292:}
        -: 2293:
        -: 2294:/* yylex_destroy is for both reentrant and non-reentrant scanners. */
    #####: 2295:int yylex_destroy  (yyscan_t yyscanner)
        -: 2296:{
    #####: 2297:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2298:
        -: 2299:    /* Pop the buffer stack, destroying each element. */
    #####: 2300:	while(YY_CURRENT_BUFFER){
    #####: 2301:		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
    #####: 2302:		YY_CURRENT_BUFFER_LVALUE = NULL;
    #####: 2303:		yypop_buffer_state(yyscanner);
        -: 2304:	}
        -: 2305:
        -: 2306:	/* Destroy the stack itself. */
    #####: 2307:	yyfree(yyg->yy_buffer_stack , yyscanner);
    #####: 2308:	yyg->yy_buffer_stack = NULL;
        -: 2309:
        -: 2310:    /* Destroy the start condition stack. */
    #####: 2311:        yyfree( yyg->yy_start_stack , yyscanner );
    #####: 2312:        yyg->yy_start_stack = NULL;
        -: 2313:
        -: 2314:    /* Reset the globals. This is important in a non-reentrant scanner so the next time
        -: 2315:     * yylex() is called, initialization will occur. */
    #####: 2316:    yy_init_globals( yyscanner);
        -: 2317:
        -: 2318:    /* Destroy the main struct (reentrant only). */
    #####: 2319:    yyfree ( yyscanner , yyscanner );
    #####: 2320:    yyscanner = NULL;
    #####: 2321:    return 0;
        -: 2322:}
        -: 2323:
        -: 2324:/*
        -: 2325: * Internal utility routines.
        -: 2326: */
        -: 2327:
        -: 2328:#ifndef yytext_ptr
        -: 2329:static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
        -: 2330:{
        -: 2331:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2332:	(void)yyg;
        -: 2333:
        -: 2334:	int i;
        -: 2335:	for ( i = 0; i < n; ++i )
        -: 2336:		s1[i] = s2[i];
        -: 2337:}
        -: 2338:#endif
        -: 2339:
        -: 2340:#ifdef YY_NEED_STRLEN
        -: 2341:static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
        -: 2342:{
        -: 2343:	int n;
        -: 2344:	for ( n = 0; s[n]; ++n )
        -: 2345:		;
        -: 2346:
        -: 2347:	return n;
        -: 2348:}
        -: 2349:#endif
        -: 2350:
    #####: 2351:void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
        -: 2352:{
    #####: 2353:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2354:	(void)yyg;
    #####: 2355:	return malloc(size);
        -: 2356:}
        -: 2357:
    #####: 2358:void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
        -: 2359:{
    #####: 2360:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2361:	(void)yyg;
        -: 2362:
        -: 2363:	/* The cast to (char *) in the following accommodates both
        -: 2364:	 * implementations that use char* generic pointers, and those
        -: 2365:	 * that use void* generic pointers.  It works with the latter
        -: 2366:	 * because both ANSI C and C++ allow castless assignment from
        -: 2367:	 * any pointer type to void*, and deal with argument conversions
        -: 2368:	 * as though doing an assignment.
        -: 2369:	 */
    #####: 2370:	return realloc(ptr, size);
        -: 2371:}
        -: 2372:
    #####: 2373:void yyfree (void * ptr , yyscan_t yyscanner)
        -: 2374:{
    #####: 2375:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2376:	(void)yyg;
    #####: 2377:	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
    #####: 2378:}
        -: 2379:
        -: 2380:#define YYTABLES_NAME "yytables"
        -: 2381:
        -: 2382:#line 171 "hex_lexer.l"
        -: 2383:
        -: 2384:
        -: 2385:void yyfatal(
        -: 2386:    yyscan_t yyscanner,
        -: 2387:    const char *error_message)
        -: 2388:{
        -: 2389:  jmp_buf* recovery_state = (jmp_buf*) yr_thread_storage_get_value(
        -: 2390:      &yr_recovery_state_key);
        -: 2391:
        -: 2392:  longjmp(*recovery_state, 1);
        -: 2393:}
        -: 2394:
        -: 2395:void yyerror(
        -: 2396:    yyscan_t yyscanner,
        -: 2397:    HEX_LEX_ENVIRONMENT* lex_env,
        -: 2398:    const char *error_message)
        -: 2399:{
        -: 2400:  // if lex_env->last_error was set to some error code before
        -: 2401:  // don't overwrite it, we are interested in the first error, not in
        -: 2402:  // subsequent errors like "syntax error, unexpected $end" caused by
        -: 2403:  // early parser termination.
        -: 2404:
        -: 2405:  if (lex_env->last_error == ERROR_SUCCESS)
        -: 2406:  {
        -: 2407:    lex_env->last_error = ERROR_INVALID_HEX_STRING;
        -: 2408:
        -: 2409:    strlcpy(
        -: 2410:        lex_env->last_error_message,
        -: 2411:        error_message,
        -: 2412:        sizeof(lex_env->last_error_message));
        -: 2413:  }
        -: 2414:}
        -: 2415:
        -: 2416:
        -: 2417:int yr_parse_hex_string(
        -: 2418:    const char* hex_string,
        -: 2419:    RE_AST** re_ast,
        -: 2420:    RE_ERROR* error)
        -: 2421:{
        -: 2422:  yyscan_t yyscanner;
        -: 2423:  jmp_buf recovery_state;
        -: 2424:  HEX_LEX_ENVIRONMENT lex_env;
        -: 2425:
        -: 2426:  lex_env.last_error = ERROR_SUCCESS;
        -: 2427:  lex_env.inside_or = 0;
        -: 2428:
        -: 2429:  yr_thread_storage_set_value(&yr_recovery_state_key, &recovery_state);
        -: 2430:
        -: 2431:  if (setjmp(recovery_state) != 0)
        -: 2432:    return ERROR_INTERNAL_FATAL_ERROR;
        -: 2433:
        -: 2434:  FAIL_ON_ERROR(yr_re_ast_create(re_ast));
        -: 2435:
        -: 2436:  // The RE_FLAGS_FAST_REGEXP flag indicates a regular expression can be
        -: 2437:  // matched by faster algorithm. These regular expressions come from hex
        -: 2438:  // strings that do not contain alternatives, like in:
        -: 2439:  //
        -: 2440:  // { ( 01 02 | 03 04) 05 06 }.
        -: 2441:  //
        -: 2442:  // This flag is unset later during parsing if alternatives are used.
        -: 2443:
        -: 2444:  (*re_ast)->flags |= RE_FLAGS_FAST_REGEXP;
        -: 2445:
        -: 2446:  // Set RE_FLAGS_DOT_ALL because in hex strings the "dot" (?? in this case)
        -: 2447:  // must match all characters including new-line.
        -: 2448:
        -: 2449:  (*re_ast)->flags |= RE_FLAGS_DOT_ALL;
        -: 2450:
        -: 2451:  yylex_init(&yyscanner);
        -: 2452:  yyset_extra(*re_ast, yyscanner);
        -: 2453:  yy_scan_string(hex_string, yyscanner);
        -: 2454:  yyparse(yyscanner, &lex_env);
        -: 2455:  yylex_destroy(yyscanner);
        -: 2456:
        -: 2457:  if (lex_env.last_error != ERROR_SUCCESS)
        -: 2458:  {
        -: 2459:    strlcpy(error->message, lex_env.last_error_message, sizeof(error->message));
        -: 2460:    return lex_env.last_error;
        -: 2461:  }
        -: 2462:
        -: 2463:  return ERROR_SUCCESS;
        -: 2464:}
        -: 2465:
