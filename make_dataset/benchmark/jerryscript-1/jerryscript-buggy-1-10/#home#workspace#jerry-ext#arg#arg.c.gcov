        -:    0:Source:/home/workspace/jerry-ext/arg/arg.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "arg-internal.h"
        -:   17:#include "jerryscript-ext/arg.h"
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#define JERRYX_STATIC_ASSERT(x, msg) \
        -:   21:  enum { static_assertion_failed_ ## msg = 1 / (!!(x)) }
        -:   22:
        -:   23:JERRYX_STATIC_ASSERT (sizeof (jerryx_arg_int_option_t) <= sizeof (((jerryx_arg_t *) 0)->extra_info),
        -:   24:                      jerryx_arg_number_options_t_must_fit_into_extra_info);
        -:   25:
        -:   26:#undef JERRYX_STATIC_ASSERT
        -:   27:
        -:   28:/**
        -:   29: * Validate the JS arguments and assign them to the native arguments.
        -:   30: *
        -:   31: * @return jerry undefined: all validators passed,
        -:   32: *         jerry error: a validator failed.
        -:   33: */
        -:   34:jerry_value_t
    #####:   35:jerryx_arg_transform_args (const jerry_value_t *js_arg_p, /**< points to the array with JS arguments */
        -:   36:                           const jerry_length_t js_arg_cnt, /**< the count of the `js_arg_p` array */
        -:   37:                           const jerryx_arg_t *c_arg_p, /**< points to the array of validation/transformation steps */
        -:   38:                           jerry_length_t c_arg_cnt) /**< the count of the `c_arg_p` array */
        -:   39:{
    #####:   40:  jerry_value_t ret = jerry_create_undefined ();
        -:   41:
    #####:   42:  jerryx_arg_js_iterator_t iterator =
        -:   43:  {
        -:   44:    .js_arg_p = js_arg_p,
        -:   45:    .js_arg_cnt = js_arg_cnt,
        -:   46:    .js_arg_idx = 0
        -:   47:  };
        -:   48:
    #####:   49:  for (; c_arg_cnt != 0 && !jerry_value_is_error (ret); c_arg_cnt--, c_arg_p++)
        -:   50:  {
    #####:   51:    ret = c_arg_p->func (&iterator, c_arg_p);
        -:   52:  }
        -:   53:
    #####:   54:  return ret;
        -:   55:} /* jerryx_arg_transform_args */
        -:   56:
        -:   57:/**
        -:   58: * Validate the this value and the JS arguments,
        -:   59: * and assign them to the native arguments.
        -:   60: * This function is useful to perform input validation inside external
        -:   61: * function handlers (see jerry_external_handler_t).
        -:   62: * @note this_val is processed as the first value, before the array of arguments.
        -:   63: *
        -:   64: * @return jerry undefined: all validators passed,
        -:   65: *         jerry error: a validator failed.
        -:   66: */
        -:   67:jerry_value_t
    #####:   68:jerryx_arg_transform_this_and_args (const jerry_value_t this_val, /**< the this_val for the external function */
        -:   69:                                    const jerry_value_t *js_arg_p, /**< points to the array with JS arguments */
        -:   70:                                    const jerry_length_t js_arg_cnt, /**< the count of the `js_arg_p` array */
        -:   71:                                    const jerryx_arg_t *c_arg_p, /**< points to the array of transformation steps */
        -:   72:                                    jerry_length_t c_arg_cnt) /**< the count of the `c_arg_p` array */
        -:   73:{
    #####:   74:  if (c_arg_cnt == 0)
        -:   75:  {
    #####:   76:    return jerry_create_undefined ();
        -:   77:  }
        -:   78:
    #####:   79:  jerryx_arg_js_iterator_t iterator =
        -:   80:  {
        -:   81:    .js_arg_p = &this_val,
        -:   82:    .js_arg_cnt = 1,
        -:   83:    .js_arg_idx = 0
        -:   84:  };
        -:   85:
    #####:   86:  jerry_value_t ret = c_arg_p->func (&iterator, c_arg_p);
        -:   87:
    #####:   88:  if (jerry_value_is_error (ret))
        -:   89:  {
    #####:   90:    jerry_release_value (ret);
        -:   91:
    #####:   92:    return jerry_create_error (JERRY_ERROR_TYPE, (jerry_char_t *) "'this' validation failed.");
        -:   93:  }
        -:   94:
    #####:   95:  return jerryx_arg_transform_args (js_arg_p, js_arg_cnt, c_arg_p + 1, c_arg_cnt - 1);
        -:   96:} /* jerryx_arg_transform_this_and_args */
        -:   97:
        -:   98:/**
        -:   99: * Validate the `obj_val`'s properties,
        -:  100: * and assign them to the native arguments.
        -:  101: *
        -:  102: * @return jerry undefined: all validators passed,
        -:  103: *         jerry error: a validator failed.
        -:  104: */
        -:  105:jerry_value_t
    #####:  106:jerryx_arg_transform_object_properties (const jerry_value_t obj_val,/**< the JS object */
        -:  107:                                        const jerry_char_t **name_p, /**< property name list of the JS object */
        -:  108:                                        const jerry_length_t name_cnt, /**< count of the name list */
        -:  109:                                        const jerryx_arg_t *c_arg_p, /**< points to the array of transformation steps */
        -:  110:                                        jerry_length_t c_arg_cnt) /**< the count of the `c_arg_p` array */
    #####:  111:{
    #####:  112:  if (!jerry_value_is_object (obj_val))
        -:  113:  {
    #####:  114:    return jerry_create_error (JERRY_ERROR_TYPE, (jerry_char_t *) "Not an object.");
        -:  115:  }
        -:  116:
    #####:  117:  JERRY_VLA (jerry_value_t, prop, name_cnt);
        -:  118:
    #####:  119:  for (jerry_length_t i = 0; i < name_cnt; i++, name_p++)
        -:  120:  {
    #####:  121:    const jerry_value_t name_str = jerry_create_string (*name_p);
    #####:  122:    prop[i] = jerry_get_property (obj_val, name_str);
    #####:  123:    jerry_release_value (name_str);
        -:  124:
    #####:  125:    if (jerry_value_is_error (prop[i]))
        -:  126:    {
    #####:  127:      for (jerry_length_t j = 0; j < i; j++)
        -:  128:      {
    #####:  129:        jerry_release_value (prop[j]);
        -:  130:      }
        -:  131:
    #####:  132:      return prop[i];
        -:  133:    }
        -:  134:  }
        -:  135:
    #####:  136:  const jerry_value_t ret = jerryx_arg_transform_args (prop, name_cnt, c_arg_p, c_arg_cnt);
        -:  137:
    #####:  138:  for (jerry_length_t i = 0; i < name_cnt; i++)
        -:  139:  {
    #####:  140:    jerry_release_value (prop[i]);
        -:  141:  }
        -:  142:
    #####:  143:  return ret;
        -:  144:} /* jerryx_arg_transform_object_properties */
        -:  145:
        -:  146:/**
        -:  147: * Validate the items in the JS array and assign them to the native arguments.
        -:  148: *
        -:  149: * @return jerry undefined: all validators passed,
        -:  150: *         jerry error: a validator failed.
        -:  151: */
        -:  152:jerry_value_t
    #####:  153:jerryx_arg_transform_array (const jerry_value_t array_val, /**< points to the JS array */
        -:  154:                            const jerryx_arg_t *c_arg_p, /**< points to the array of validation/transformation steps */
        -:  155:                            jerry_length_t c_arg_cnt) /**< the count of the `c_arg_p` array */
    #####:  156:{
    #####:  157:  if (!jerry_value_is_array (array_val))
        -:  158:  {
    #####:  159:    return jerry_create_error (JERRY_ERROR_TYPE, (jerry_char_t *) "Not an array.");
        -:  160:  }
        -:  161:
    #####:  162:  JERRY_VLA (jerry_value_t, arr, c_arg_cnt);
        -:  163:
    #####:  164:  for (jerry_length_t i = 0; i < c_arg_cnt; i++)
        -:  165:  {
    #####:  166:    arr[i] = jerry_get_property_by_index (array_val, i);
        -:  167:
    #####:  168:    if (jerry_value_is_error (arr[i]))
        -:  169:    {
    #####:  170:      for (jerry_length_t j = 0; j < i; j++)
        -:  171:      {
    #####:  172:        jerry_release_value (arr[j]);
        -:  173:      }
        -:  174:
    #####:  175:      return arr[i];
        -:  176:    }
        -:  177:  }
        -:  178:
    #####:  179:  const jerry_value_t ret = jerryx_arg_transform_args (arr, c_arg_cnt, c_arg_p, c_arg_cnt);
        -:  180:
    #####:  181:  for (jerry_length_t i = 0; i < c_arg_cnt; i++)
        -:  182:  {
    #####:  183:    jerry_release_value (arr[i]);
        -:  184:  }
        -:  185:
    #####:  186:  return ret;
        -:  187:} /* jerryx_arg_transform_array */
