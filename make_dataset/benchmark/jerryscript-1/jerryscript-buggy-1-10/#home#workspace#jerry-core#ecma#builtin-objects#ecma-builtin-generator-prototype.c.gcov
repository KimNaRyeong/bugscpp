        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-generator-prototype.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtins.h"
        -:   17:#include "ecma-exceptions.h"
        -:   18:#include "ecma-gc.h"
        -:   19:#include "ecma-globals.h"
        -:   20:#include "ecma-helpers.h"
        -:   21:#include "ecma-iterator-object.h"
        -:   22:#include "jcontext.h"
        -:   23:#include "opcodes.h"
        -:   24:#include "vm-defines.h"
        -:   25:
        -:   26:#if ENABLED (JERRY_ES2015)
        -:   27:
        -:   28:#define ECMA_BUILTINS_INTERNAL
        -:   29:#include "ecma-builtins-internal.h"
        -:   30:
        -:   31:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-generator-prototype.inc.h"
        -:   32:#define BUILTIN_UNDERSCORED_ID generator_prototype
        -:   33:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   34:
        -:   35:/** \addtogroup ecma ECMA
        -:   36: * @{
        -:   37: *
        -:   38: * \addtogroup ecmabuiltins
        -:   39: * @{
        -:   40: *
        -:   41: * \addtogroup generator ECMA Generator.prototype object built-in
        -:   42: * @{
        -:   43: */
        -:   44:
        -:   45:/**
        -:   46: * Byte code sequence which returns from the generator.
        -:   47: */
        -:   48:static const uint8_t ecma_builtin_generator_prototype_return[2] =
        -:   49:{
        -:   50:  CBC_EXT_OPCODE, CBC_EXT_RETURN
        -:   51:};
        -:   52:
        -:   53:/**
        -:   54: * Byte code sequence which throws an exception.
        -:   55: */
        -:   56:static const uint8_t ecma_builtin_generator_prototype_throw[1] =
        -:   57:{
        -:   58:  CBC_THROW
        -:   59:};
        -:   60:
        -:   61:/**
        -:   62: * Helper function for next / return / throw
        -:   63: *
        -:   64: * @return ecma value
        -:   65: *         Returned value must be freed with ecma_free_value.
        -:   66: */
        -:   67:static ecma_value_t
    #####:   68:ecma_builtin_generator_prototype_object_do (ecma_value_t this_arg, /**< this argument */
        -:   69:                                            ecma_value_t arg, /**< argument */
        -:   70:                                            ecma_iterator_command_type_t resume_mode) /**< resume mode */
        -:   71:{
    #####:   72:  vm_executable_object_t *executable_object_p = NULL;
        -:   73:
    #####:   74:  if (ecma_is_value_object (this_arg))
        -:   75:  {
    #####:   76:    ecma_object_t *object_p = ecma_get_object_from_value (this_arg);
        -:   77:
    #####:   78:    if (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_CLASS)
        -:   79:    {
    #####:   80:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -:   81:
    #####:   82:      if (ext_object_p->u.class_prop.class_id == LIT_MAGIC_STRING_GENERATOR_UL)
        -:   83:      {
    #####:   84:        executable_object_p = (vm_executable_object_t *) ext_object_p;
        -:   85:      }
        -:   86:    }
        -:   87:  }
        -:   88:
    #####:   89:  if (executable_object_p == NULL)
        -:   90:  {
    #####:   91:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not a generator object."));
        -:   92:  }
        -:   93:
    #####:   94:  if (executable_object_p->extended_object.u.class_prop.extra_info & ECMA_EXECUTABLE_OBJECT_RUNNING)
        -:   95:  {
    #####:   96:    return ecma_raise_type_error (ECMA_ERR_MSG ("Generator is currently under execution."));
        -:   97:  }
        -:   98:
    #####:   99:  if (executable_object_p->extended_object.u.class_prop.extra_info & ECMA_EXECUTABLE_OBJECT_COMPLETED)
        -:  100:  {
    #####:  101:    return ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
        -:  102:  }
        -:  103:
    #####:  104:  arg = ecma_copy_value (arg);
        -:  105:
        -:  106:  while (true)
    #####:  107:  {
    #####:  108:    if (executable_object_p->extended_object.u.class_prop.extra_info & ECMA_GENERATOR_ITERATE_AND_YIELD)
        -:  109:    {
    #####:  110:      ecma_value_t iterator = executable_object_p->extended_object.u.class_prop.u.value;
        -:  111:
    #####:  112:      bool done = false;
    #####:  113:      ecma_value_t result = ecma_op_iterator_do (resume_mode, iterator, arg, &done);
    #####:  114:      ecma_free_value (arg);
        -:  115:
    #####:  116:      if (ECMA_IS_VALUE_ERROR (result))
        -:  117:      {
    #####:  118:        arg = result;
        -:  119:      }
    #####:  120:      else if (done)
        -:  121:      {
    #####:  122:        arg = ecma_op_iterator_value (result);
    #####:  123:        ecma_free_value (result);
    #####:  124:        if (resume_mode == ECMA_ITERATOR_THROW)
        -:  125:        {
        -:  126:          /* This part is changed in the newest ECMAScript standard.
        -:  127:           * It was ECMA_ITERATOR_RETURN in ES2015, but I think it was a typo. */
    #####:  128:          resume_mode = ECMA_ITERATOR_NEXT;
        -:  129:        }
        -:  130:      }
        -:  131:      else
        -:  132:      {
    #####:  133:        return result;
        -:  134:      }
        -:  135:
    #####:  136:      executable_object_p->extended_object.u.class_prop.extra_info &= (uint16_t) ~ECMA_GENERATOR_ITERATE_AND_YIELD;
        -:  137:
    #####:  138:      if (ECMA_IS_VALUE_ERROR (arg))
        -:  139:      {
    #####:  140:        arg = jcontext_take_exception ();
    #####:  141:        resume_mode = ECMA_ITERATOR_THROW;
        -:  142:      }
        -:  143:    }
        -:  144:
    #####:  145:    if (resume_mode == ECMA_ITERATOR_RETURN)
        -:  146:    {
    #####:  147:      executable_object_p->frame_ctx.byte_code_p = ecma_builtin_generator_prototype_return;
        -:  148:    }
    #####:  149:    else if (resume_mode == ECMA_ITERATOR_THROW)
        -:  150:    {
    #####:  151:      executable_object_p->frame_ctx.byte_code_p = ecma_builtin_generator_prototype_throw;
        -:  152:    }
        -:  153:
    #####:  154:    ecma_value_t value = opfunc_resume_executable_object (executable_object_p, arg);
        -:  155:
    #####:  156:    if (ECMA_IS_VALUE_ERROR (value))
        -:  157:    {
    #####:  158:      return value;
        -:  159:    }
        -:  160:
    #####:  161:    bool done = (executable_object_p->extended_object.u.class_prop.extra_info & ECMA_EXECUTABLE_OBJECT_COMPLETED);
        -:  162:
    #####:  163:    if (!done)
        -:  164:    {
    #####:  165:      const uint8_t *byte_code_p = executable_object_p->frame_ctx.byte_code_p;
        -:  166:
    #####:  167:      JERRY_ASSERT (byte_code_p[-2] == CBC_EXT_OPCODE
        -:  168:                    && (byte_code_p[-1] == CBC_EXT_YIELD || byte_code_p[-1] == CBC_EXT_YIELD_ITERATOR));
        -:  169:
    #####:  170:      if (byte_code_p[-1] == CBC_EXT_YIELD_ITERATOR)
        -:  171:      {
    #####:  172:        ecma_value_t iterator = ecma_op_get_iterator (value, ECMA_VALUE_EMPTY);
    #####:  173:        ecma_free_value (value);
        -:  174:
    #####:  175:        if (ECMA_IS_VALUE_ERROR (iterator))
        -:  176:        {
    #####:  177:          resume_mode = ECMA_ITERATOR_THROW;
    #####:  178:          arg = jcontext_take_exception ();
    #####:  179:          continue;
        -:  180:        }
        -:  181:
    #####:  182:        ecma_deref_object (ecma_get_object_from_value (iterator));
    #####:  183:        executable_object_p->extended_object.u.class_prop.extra_info |= ECMA_GENERATOR_ITERATE_AND_YIELD;
    #####:  184:        executable_object_p->extended_object.u.class_prop.u.value = iterator;
    #####:  185:        arg = ECMA_VALUE_UNDEFINED;
    #####:  186:        continue;
        -:  187:      }
        -:  188:    }
        -:  189:
    #####:  190:    ecma_value_t result = ecma_create_iter_result_object (value, ecma_make_boolean_value (done));
    #####:  191:    ecma_fast_free_value (value);
    #####:  192:    return result;
        -:  193:  }
        -:  194:} /* ecma_builtin_generator_prototype_object_do */
        -:  195:
        -:  196:/**
        -:  197: * The Generator.prototype object's 'next' routine
        -:  198: *
        -:  199: * See also:
        -:  200: *          ECMA-262 v6, 25.3.1.2
        -:  201: *
        -:  202: * @return ecma value
        -:  203: *         Returned value must be freed with ecma_free_value.
        -:  204: */
        -:  205:static ecma_value_t
    #####:  206:ecma_builtin_generator_prototype_object_next (ecma_value_t this_arg, /**< this argument */
        -:  207:                                              ecma_value_t next_arg) /**< next argument */
        -:  208:{
    #####:  209:  return ecma_builtin_generator_prototype_object_do (this_arg, next_arg, ECMA_ITERATOR_NEXT);
        -:  210:} /* ecma_builtin_generator_prototype_object_next */
        -:  211:
        -:  212:/**
        -:  213: * The Generator.prototype object's 'return' routine
        -:  214: *
        -:  215: * See also:
        -:  216: *          ECMA-262 v6, 25.3.1.3
        -:  217: *
        -:  218: * @return ecma value
        -:  219: *         Returned value must be freed with ecma_free_value.
        -:  220: */
        -:  221:static ecma_value_t
    #####:  222:ecma_builtin_generator_prototype_object_return (ecma_value_t this_arg, /**< this argument */
        -:  223:                                                ecma_value_t return_arg) /**< return argument */
        -:  224:{
    #####:  225:  return ecma_builtin_generator_prototype_object_do (this_arg, return_arg, ECMA_ITERATOR_RETURN);
        -:  226:} /* ecma_builtin_generator_prototype_object_return */
        -:  227:
        -:  228:/**
        -:  229: * The Generator.prototype object's 'throw' routine
        -:  230: *
        -:  231: * See also:
        -:  232: *          ECMA-262 v6, 25.3.1.4
        -:  233: *
        -:  234: * @return ecma value
        -:  235: *         Returned value must be freed with ecma_free_value.
        -:  236: */
        -:  237:static ecma_value_t
    #####:  238:ecma_builtin_generator_prototype_object_throw (ecma_value_t this_arg, /**< this argument */
        -:  239:                                                ecma_value_t throw_arg) /**< throw argument */
        -:  240:{
    #####:  241:  return ecma_builtin_generator_prototype_object_do (this_arg, throw_arg, ECMA_ITERATOR_THROW);
        -:  242:} /* ecma_builtin_generator_prototype_object_throw */
        -:  243:
        -:  244:/**
        -:  245: * @}
        -:  246: * @}
        -:  247: * @}
        -:  248: */
        -:  249:
        -:  250:#endif /* ENABLED (JERRY_ES2015) */
