        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-dataview-prototype.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-arraybuffer-object.h"
        -:   17:#include "ecma-exceptions.h"
        -:   18:#include "ecma-dataview-object.h"
        -:   19:#include "ecma-gc.h"
        -:   20:
        -:   21:#if ENABLED (JERRY_ES2015_BUILTIN_DATAVIEW)
        -:   22:
        -:   23:#ifdef CONFIG_DISABLE_ES2015_TYPEDARRAY_BUILTIN
        -:   24:#error "DataView builtin requires ES2015 TypedArray builtin"
        -:   25:#endif /* !CONFIG_DISABLE_ES2015_TYPEDARRAY_BUILTIN */
        -:   26:
        -:   27:#define ECMA_BUILTINS_INTERNAL
        -:   28:#include "ecma-builtins-internal.h"
        -:   29:
        -:   30:/**
        -:   31: * This object has a custom dispatch function.
        -:   32: */
        -:   33:#define BUILTIN_CUSTOM_DISPATCH
        -:   34:
        -:   35:/**
        -:   36: * List of built-in routine identifiers.
        -:   37: */
        -:   38:enum
        -:   39:{
        -:   40:  ECMA_DATAVIEW_PROTOTYPE_ROUTINE_START = ECMA_BUILTIN_ID__COUNT - 1,
        -:   41:  ECMA_DATAVIEW_PROTOTYPE_BUFFER_GETTER,
        -:   42:  ECMA_DATAVIEW_PROTOTYPE_BYTE_LENGTH_GETTER,
        -:   43:  ECMA_DATAVIEW_PROTOTYPE_BYTE_OFFSET_GETTER,
        -:   44:  ECMA_DATAVIEW_PROTOTYPE_GET_INT8,
        -:   45:  ECMA_DATAVIEW_PROTOTYPE_GET_UINT8,
        -:   46:  ECMA_DATAVIEW_PROTOTYPE_GET_UINT8_CLAMPED, /* unused value */
        -:   47:  ECMA_DATAVIEW_PROTOTYPE_GET_INT16,
        -:   48:  ECMA_DATAVIEW_PROTOTYPE_GET_UINT16,
        -:   49:  ECMA_DATAVIEW_PROTOTYPE_GET_INT32,
        -:   50:  ECMA_DATAVIEW_PROTOTYPE_GET_UINT32,
        -:   51:  ECMA_DATAVIEW_PROTOTYPE_GET_FLOAT32,
        -:   52:#if ENABLED (JERRY_NUMBER_TYPE_FLOAT64)
        -:   53:  ECMA_DATAVIEW_PROTOTYPE_GET_FLOAT64,
        -:   54:#endif /* ENABLED (JERRY_NUMBER_TYPE_FLOAT64) */
        -:   55:  ECMA_DATAVIEW_PROTOTYPE_SET_INT8,
        -:   56:  ECMA_DATAVIEW_PROTOTYPE_SET_UINT8,
        -:   57:  ECMA_DATAVIEW_PROTOTYPE_SET_UINT8_CLAMPED, /* unused value */
        -:   58:  ECMA_DATAVIEW_PROTOTYPE_SET_INT16,
        -:   59:  ECMA_DATAVIEW_PROTOTYPE_SET_UINT16,
        -:   60:  ECMA_DATAVIEW_PROTOTYPE_SET_INT32,
        -:   61:  ECMA_DATAVIEW_PROTOTYPE_SET_UINT32,
        -:   62:  ECMA_DATAVIEW_PROTOTYPE_SET_FLOAT32,
        -:   63:#if ENABLED (JERRY_NUMBER_TYPE_FLOAT64)
        -:   64:  ECMA_DATAVIEW_PROTOTYPE_SET_FLOAT64,
        -:   65:#endif /* ENABLED (JERRY_NUMBER_TYPE_FLOAT64) */
        -:   66:};
        -:   67:
        -:   68:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-dataview-prototype.inc.h"
        -:   69:#define BUILTIN_UNDERSCORED_ID dataview_prototype
        -:   70:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   71:
        -:   72:/** \addtogroup ecma ECMA
        -:   73: * @{
        -:   74: *
        -:   75: * \addtogroup ecmabuiltins
        -:   76: * @{
        -:   77: *
        -:   78: * \addtogroup dataviewprototype ECMA DataView.prototype object built-in
        -:   79: * @{
        -:   80: */
        -:   81:
        -:   82:/**
        -:   83: * The DataView.prototype object's {buffer, byteOffset, byteLength} getters
        -:   84: *
        -:   85: * See also:
        -:   86: *          ECMA-262 v6, 24.2.4.1
        -:   87: *          ECMA-262 v6, 24.2.4.2
        -:   88: *          ECMA-262 v6, 24.2.4.3
        -:   89: *
        -:   90: * @return ecma value
        -:   91: *         Returned value must be freed with ecma_free_value.
        -:   92: */
        -:   93:static ecma_value_t
    #####:   94:ecma_builtin_dataview_prototype_object_getters (ecma_value_t this_arg, /**< this argument */
        -:   95:                                                uint16_t builtin_routine_id) /**< built-in wide routine identifier */
        -:   96:{
    #####:   97:  ecma_dataview_object_t *obj_p = ecma_op_dataview_get_object (this_arg);
        -:   98:
    #####:   99:  if (JERRY_UNLIKELY (obj_p == NULL))
        -:  100:  {
    #####:  101:    return ECMA_VALUE_ERROR;
        -:  102:  }
        -:  103:
    #####:  104:  switch (builtin_routine_id)
        -:  105:  {
    #####:  106:    case ECMA_DATAVIEW_PROTOTYPE_BUFFER_GETTER:
        -:  107:    {
    #####:  108:      ecma_object_t *buffer_p = obj_p->buffer_p;
    #####:  109:      ecma_ref_object (buffer_p);
        -:  110:
    #####:  111:      return ecma_make_object_value (buffer_p);
        -:  112:    }
    #####:  113:    case ECMA_DATAVIEW_PROTOTYPE_BYTE_LENGTH_GETTER:
        -:  114:    {
    #####:  115:      if (ecma_arraybuffer_is_detached (obj_p->buffer_p))
        -:  116:      {
    #####:  117:        return ecma_raise_type_error (ECMA_ERR_MSG ("ArrayBuffer has been detached."));
        -:  118:      }
    #####:  119:      return ecma_make_uint32_value (obj_p->header.u.class_prop.u.length);
        -:  120:    }
    #####:  121:    default:
        -:  122:    {
    #####:  123:      JERRY_ASSERT (builtin_routine_id == ECMA_DATAVIEW_PROTOTYPE_BYTE_OFFSET_GETTER);
        -:  124:
    #####:  125:      if (ecma_arraybuffer_is_detached (obj_p->buffer_p))
        -:  126:      {
    #####:  127:        return ecma_raise_type_error (ECMA_ERR_MSG ("ArrayBuffer has been detached."));
        -:  128:      }
    #####:  129:      return ecma_make_uint32_value (obj_p->byte_offset);
        -:  130:    }
        -:  131:  }
        -:  132:} /* ecma_builtin_dataview_prototype_object_getters */
        -:  133:
        -:  134:/**
        -:  135: * Dispatcher of the built-in's routines
        -:  136: *
        -:  137: * @return ecma value
        -:  138: *         Returned value must be freed with ecma_free_value.
        -:  139: */
        -:  140:ecma_value_t
    #####:  141:ecma_builtin_dataview_prototype_dispatch_routine (uint16_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  142:                                                  ecma_value_t this_arg, /**< 'this' argument value */
        -:  143:                                                  const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  144:                                                                                          *   passed to routine */
        -:  145:                                                  ecma_length_t arguments_number) /**< length of arguments' list */
        -:  146:{
    #####:  147:  ecma_value_t byte_offset = arguments_number > 0 ? arguments_list_p[0] : ECMA_VALUE_UNDEFINED;
        -:  148:
    #####:  149:  switch (builtin_routine_id)
        -:  150:  {
    #####:  151:    case ECMA_DATAVIEW_PROTOTYPE_BUFFER_GETTER:
        -:  152:    case ECMA_DATAVIEW_PROTOTYPE_BYTE_LENGTH_GETTER:
        -:  153:    case ECMA_DATAVIEW_PROTOTYPE_BYTE_OFFSET_GETTER:
        -:  154:    {
    #####:  155:      return ecma_builtin_dataview_prototype_object_getters (this_arg, builtin_routine_id);
        -:  156:    }
    #####:  157:    case ECMA_DATAVIEW_PROTOTYPE_GET_FLOAT32:
        -:  158:#if ENABLED (JERRY_NUMBER_TYPE_FLOAT64)
        -:  159:    case ECMA_DATAVIEW_PROTOTYPE_GET_FLOAT64:
        -:  160:#endif /* ENABLED (JERRY_NUMBER_TYPE_FLOAT64) */
        -:  161:    case ECMA_DATAVIEW_PROTOTYPE_GET_INT16:
        -:  162:    case ECMA_DATAVIEW_PROTOTYPE_GET_INT32:
        -:  163:    case ECMA_DATAVIEW_PROTOTYPE_GET_UINT16:
        -:  164:    case ECMA_DATAVIEW_PROTOTYPE_GET_UINT32:
        -:  165:    {
    #####:  166:      ecma_value_t little_endian = arguments_number > 1 ? arguments_list_p[1] : ECMA_VALUE_FALSE;
    #####:  167:      ecma_typedarray_type_t id = (ecma_typedarray_type_t) (builtin_routine_id - ECMA_DATAVIEW_PROTOTYPE_GET_INT8);
        -:  168:
    #####:  169:      return ecma_op_dataview_get_set_view_value (this_arg, byte_offset, little_endian, ECMA_VALUE_EMPTY, id);
        -:  170:    }
    #####:  171:    case ECMA_DATAVIEW_PROTOTYPE_SET_FLOAT32:
        -:  172:#if ENABLED (JERRY_NUMBER_TYPE_FLOAT64)
        -:  173:    case ECMA_DATAVIEW_PROTOTYPE_SET_FLOAT64:
        -:  174:#endif /* ENABLED (JERRY_NUMBER_TYPE_FLOAT64) */
        -:  175:    case ECMA_DATAVIEW_PROTOTYPE_SET_INT16:
        -:  176:    case ECMA_DATAVIEW_PROTOTYPE_SET_INT32:
        -:  177:    case ECMA_DATAVIEW_PROTOTYPE_SET_UINT16:
        -:  178:    case ECMA_DATAVIEW_PROTOTYPE_SET_UINT32:
        -:  179:    {
    #####:  180:      ecma_value_t value_to_set = arguments_number > 1 ? arguments_list_p[1] : ECMA_VALUE_UNDEFINED;
    #####:  181:      ecma_value_t little_endian = arguments_number > 2 ? arguments_list_p[2] : ECMA_VALUE_FALSE;
    #####:  182:      ecma_typedarray_type_t id = (ecma_typedarray_type_t) (builtin_routine_id - ECMA_DATAVIEW_PROTOTYPE_SET_INT8);
        -:  183:
    #####:  184:      return ecma_op_dataview_get_set_view_value (this_arg, byte_offset, little_endian, value_to_set, id);
        -:  185:    }
    #####:  186:    case ECMA_DATAVIEW_PROTOTYPE_GET_INT8:
        -:  187:    case ECMA_DATAVIEW_PROTOTYPE_GET_UINT8:
        -:  188:    {
    #####:  189:      ecma_typedarray_type_t id = (ecma_typedarray_type_t) (builtin_routine_id - ECMA_DATAVIEW_PROTOTYPE_GET_INT8);
        -:  190:
    #####:  191:      return ecma_op_dataview_get_set_view_value (this_arg, byte_offset, ECMA_VALUE_FALSE, ECMA_VALUE_EMPTY, id);
        -:  192:    }
    #####:  193:    default:
        -:  194:    {
    #####:  195:      JERRY_ASSERT (builtin_routine_id == ECMA_DATAVIEW_PROTOTYPE_SET_INT8
        -:  196:                    || builtin_routine_id == ECMA_DATAVIEW_PROTOTYPE_SET_UINT8);
    #####:  197:      ecma_value_t value_to_set = arguments_number > 1 ? arguments_list_p[1] : ECMA_VALUE_UNDEFINED;
    #####:  198:      ecma_typedarray_type_t id = (ecma_typedarray_type_t) (builtin_routine_id - ECMA_DATAVIEW_PROTOTYPE_SET_INT8);
        -:  199:
    #####:  200:      return ecma_op_dataview_get_set_view_value (this_arg, byte_offset, ECMA_VALUE_FALSE, value_to_set, id);
        -:  201:    }
        -:  202:  }
        -:  203:} /* ecma_builtin_dataview_prototype_dispatch_routine */
        -:  204:
        -:  205:/**
        -:  206: * @}
        -:  207: * @}
        -:  208: * @}
        -:  209: */
        -:  210:
        -:  211:#endif /* ENABLED (JERRY_ES2015_BUILTIN_DATAVIEW */
