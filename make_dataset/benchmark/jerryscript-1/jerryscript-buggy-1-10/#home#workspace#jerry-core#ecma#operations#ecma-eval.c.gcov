        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-eval.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtins.h"
        -:   17:#include "ecma-exceptions.h"
        -:   18:#include "ecma-eval.h"
        -:   19:#include "ecma-gc.h"
        -:   20:#include "ecma-globals.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:#include "ecma-lex-env.h"
        -:   23:#include "js-parser.h"
        -:   24:#include "vm.h"
        -:   25:#include "jcontext.h"
        -:   26:
        -:   27:/** \addtogroup ecma ECMA
        -:   28: * @{
        -:   29: *
        -:   30: * \addtogroup eval eval
        -:   31: * @{
        -:   32: */
        -:   33:
        -:   34:/**
        -:   35: * Perform 'eval' with code stored in ecma-string
        -:   36: *
        -:   37: * See also:
        -:   38: *          ecma_op_eval_chars_buffer
        -:   39: *          ECMA-262 v5, 15.1.2.1 (steps 2 to 8)
        -:   40: *
        -:   41: * @return ecma value
        -:   42: */
        -:   43:ecma_value_t
     1309:   44:ecma_op_eval (ecma_string_t *code_p, /**< code string */
        -:   45:              uint32_t parse_opts) /**< ecma_parse_opts_t option bits */
        -:   46:{
        -:   47:  ecma_value_t ret_value;
        -:   48:
     1309:   49:  lit_utf8_size_t chars_num = ecma_string_get_size (code_p);
     1309:   50:  if (chars_num == 0)
        -:   51:  {
    #####:   52:    ret_value = ECMA_VALUE_UNDEFINED;
        -:   53:  }
        -:   54:  else
        -:   55:  {
     1309:   56:    ECMA_STRING_TO_UTF8_STRING (code_p, code_utf8_buffer_p, code_utf8_buffer_size);
        -:   57:
     1309:   58:    ret_value = ecma_op_eval_chars_buffer (code_utf8_buffer_p,
        -:   59:                                           chars_num,
        -:   60:                                           parse_opts);
        -:   61:
     1308:   62:    ECMA_FINALIZE_UTF8_STRING (code_utf8_buffer_p, code_utf8_buffer_size);
        -:   63:  }
        -:   64:
     1308:   65:  return ret_value;
        -:   66:} /* ecma_op_eval */
        -:   67:
        -:   68:/**
        -:   69: * Perform 'eval' with code stored in continuous character buffer
        -:   70: *
        -:   71: * See also:
        -:   72: *          ecma_op_eval
        -:   73: *          ECMA-262 v5, 15.1.2.1 (steps 2 to 8)
        -:   74: *
        -:   75: * @return ecma value
        -:   76: */
        -:   77:ecma_value_t
     1309:   78:ecma_op_eval_chars_buffer (const lit_utf8_byte_t *code_p, /**< code characters buffer */
        -:   79:                           size_t code_buffer_size, /**< size of the buffer */
        -:   80:                           uint32_t parse_opts) /**< ecma_parse_opts_t option bits */
        -:   81:{
        -:   82:#if ENABLED (JERRY_PARSER)
     1309:   83:  JERRY_ASSERT (code_p != NULL);
        -:   84:
     1309:   85:  ecma_compiled_code_t *bytecode_data_p;
        -:   86:
     1309:   87:  uint32_t is_strict_call = ECMA_PARSE_STRICT_MODE | ECMA_PARSE_DIRECT_EVAL;
        -:   88:
     1309:   89:  if ((parse_opts & is_strict_call) != is_strict_call)
        -:   90:  {
    #####:   91:    parse_opts &= (uint32_t) ~ECMA_PARSE_STRICT_MODE;
        -:   92:  }
        -:   93:
     1309:   94:  parse_opts |= ECMA_PARSE_EVAL;
        -:   95:
        -:   96:#if ENABLED (JERRY_LINE_INFO) || ENABLED (JERRY_ERROR_MESSAGES)
     1309:   97:  JERRY_CONTEXT (resource_name) = ecma_make_magic_string_value (LIT_MAGIC_STRING_RESOURCE_EVAL);
        -:   98:#endif /* ENABLED (JERRY_LINE_INFO) || ENABLED (JERRY_ERROR_MESSAGES) */
        -:   99:
        -:  100:#if ENABLED (JERRY_ES2015)
     1309:  101:  ECMA_CLEAR_LOCAL_PARSE_OPTS ();
        -:  102:#endif /* ENABLED (JERRY_ES2015) */
        -:  103:
     1309:  104:  ecma_value_t parse_status = parser_parse_script (NULL,
        -:  105:                                                   0,
        -:  106:                                                   code_p,
        -:  107:                                                   code_buffer_size,
        -:  108:                                                   parse_opts,
        -:  109:                                                   &bytecode_data_p);
        -:  110:
     1308:  111:  if (ECMA_IS_VALUE_ERROR (parse_status))
        -:  112:  {
     1308:  113:    return parse_status;
        -:  114:  }
        -:  115:
    #####:  116:  return vm_run_eval (bytecode_data_p, parse_opts);
        -:  117:#else /* !ENABLED (JERRY_PARSER) */
        -:  118:  JERRY_UNUSED (code_p);
        -:  119:  JERRY_UNUSED (code_buffer_size);
        -:  120:  JERRY_UNUSED (parse_opts);
        -:  121:
        -:  122:  return ecma_raise_syntax_error (ECMA_ERR_MSG ("The parser has been disabled."));
        -:  123:#endif /* ENABLED (JERRY_PARSER) */
        -:  124:} /* ecma_op_eval_chars_buffer */
        -:  125:
        -:  126:/**
        -:  127: * @}
        -:  128: * @}
        -:  129: */
