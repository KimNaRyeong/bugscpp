        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-helpers-date.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <math.h>
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-builtin-helpers.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-objects.h"
        -:   24:#include "ecma-try-catch-macro.h"
        -:   25:#include "lit-char-helpers.h"
        -:   26:
        -:   27:#if ENABLED (JERRY_BUILTIN_DATE)
        -:   28:
        -:   29:/** \addtogroup ecma ECMA
        -:   30: * @{
        -:   31: *
        -:   32: * \addtogroup ecmabuiltinhelpers ECMA builtin helper operations
        -:   33: * @{
        -:   34: */
        -:   35:
        -:   36:const char day_names_p[7][3] =
        -:   37:{
        -:   38:  "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
        -:   39:};
        -:   40:
        -:   41:const char month_names_p[12][3] =
        -:   42:{
        -:   43:  "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
        -:   44:};
        -:   45:
        -:   46:/**
        -:   47: * Helper function to get day number from time value.
        -:   48: *
        -:   49: * See also:
        -:   50: *          ECMA-262 v5, 15.9.1.2
        -:   51: *
        -:   52: * @return time value for day number
        -:   53: */
        -:   54:extern inline ecma_number_t JERRY_ATTR_ALWAYS_INLINE
    #####:   55:ecma_date_day (ecma_number_t time) /**< time value */
        -:   56:{
    #####:   57:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:   58:
    #####:   59:  return (ecma_number_t) floor (time / ECMA_DATE_MS_PER_DAY);
        -:   60:} /* ecma_date_day */
        -:   61:
        -:   62:/**
        -:   63: * Helper function to get time within day from time value.
        -:   64: *
        -:   65: * See also:
        -:   66: *          ECMA-262 v5, 15.9.1.2
        -:   67: *
        -:   68: * @return time value within the day
        -:   69: */
        -:   70:extern inline ecma_number_t JERRY_ATTR_ALWAYS_INLINE
    #####:   71:ecma_date_time_within_day (ecma_number_t time) /**< time value */
        -:   72:{
    #####:   73:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:   74:
    #####:   75:  return (ecma_number_t) fmod (time, ECMA_DATE_MS_PER_DAY);
        -:   76:} /* ecma_date_time_within_day */
        -:   77:
        -:   78:/**
        -:   79: * Helper function to get the day number of the first day of a year.
        -:   80: *
        -:   81: * See also:
        -:   82: *          ECMA-262 v5, 15.9.1.3
        -:   83: *
        -:   84: * @return day number of the first day of a year
        -:   85: */
        -:   86:static ecma_number_t
    #####:   87:ecma_date_day_from_year (ecma_number_t year) /**< year value */
        -:   88:{
    #####:   89:  JERRY_ASSERT (!ecma_number_is_nan (year));
        -:   90:
    #####:   91:  return (ecma_number_t) (365 * (year - 1970)
    #####:   92:                          + floor ((year - 1969) / 4)
    #####:   93:                          - floor ((year - 1901) / 100)
    #####:   94:                          + floor ((year - 1601) / 400));
        -:   95:} /* ecma_date_day_from_year */
        -:   96:
        -:   97:/**
        -:   98: * Helper function to get the time value of the start of a year.
        -:   99: *
        -:  100: * See also:
        -:  101: *          ECMA-262 v5, 15.9.1.3
        -:  102: *
        -:  103: * @return  time value of the start of a year
        -:  104: */
        -:  105:static inline ecma_number_t JERRY_ATTR_ALWAYS_INLINE
        -:  106:ecma_date_time_from_year (ecma_number_t year) /**< year value */
        -:  107:{
    #####:  108:  JERRY_ASSERT (!ecma_number_is_nan (year));
        -:  109:
    #####:  110:  return ECMA_DATE_MS_PER_DAY * ecma_date_day_from_year (year);
        -:  111:} /* ecma_date_time_from_year */
        -:  112:
        -:  113:/**
        -:  114: * Helper function to determine a year value from the time value.
        -:  115: *
        -:  116: * See also:
        -:  117: *          ECMA-262 v5, 15.9.1.3
        -:  118: *
        -:  119: * @return year value
        -:  120: */
        -:  121:ecma_number_t
    #####:  122:ecma_date_year_from_time (ecma_number_t time) /**< time value */
        -:  123:{
    #####:  124:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  125:
        -:  126:  /* ECMA-262 v5, 15.9.1.1 define the largest year that is
        -:  127:   * representable (285616) forward from 01 January, 1970 UTC.
        -:  128:   */
    #####:  129:  ecma_number_t year = (ecma_number_t) (1970 + 285616);
    #####:  130:  ecma_number_t lower_year_boundary = (ecma_number_t) (1970 - 285616);
        -:  131:
    #####:  132:  if (ecma_date_time_from_year (year) < time || ecma_date_time_from_year (lower_year_boundary) > time)
        -:  133:  {
    #####:  134:    return ecma_number_make_nan ();
        -:  135:  }
        -:  136:
    #####:  137:  while (ecma_date_time_from_year (year) > time)
        -:  138:  {
    #####:  139:    ecma_number_t year_boundary = (ecma_number_t) floor (lower_year_boundary + (year - lower_year_boundary) / 2);
    #####:  140:    if (ecma_date_time_from_year (year_boundary) > time)
        -:  141:    {
    #####:  142:      year = year_boundary;
        -:  143:    }
        -:  144:    else
        -:  145:    {
    #####:  146:      lower_year_boundary = year_boundary;
        -:  147:    }
        -:  148:
    #####:  149:    year--;
        -:  150:  }
        -:  151:
    #####:  152:  return year;
        -:  153:} /* ecma_date_year_from_time */
        -:  154:
        -:  155:/**
        -:  156: * Helper function to decide if time value is in a leap-year.
        -:  157: *
        -:  158: * See also:
        -:  159: *          ECMA-262 v5, 15.9.1.3
        -:  160: *
        -:  161: * @return 1 if time within a leap year
        -:  162: *         0 otherwise
        -:  163: */
        -:  164:static int
    #####:  165:ecma_date_in_leap_year (ecma_number_t year) /**< time value */
        -:  166:{
    #####:  167:  int mod_400 = (int) fmod (floor (year), 400);
        -:  168:
    #####:  169:  JERRY_ASSERT (mod_400 >= -399 && mod_400 <= 399);
        -:  170:
    #####:  171:  if ((mod_400 % 4) != 0)
        -:  172:  {
    #####:  173:    return 0;
        -:  174:  }
        -:  175:
    #####:  176:  if ((mod_400 % 100) != 0)
        -:  177:  {
    #####:  178:    return 1;
        -:  179:  }
        -:  180:
    #####:  181:  if (mod_400 != 0)
        -:  182:  {
    #####:  183:    return 0;
        -:  184:  }
        -:  185:
    #####:  186:  return 1;
        -:  187:} /* ecma_date_in_leap_year */
        -:  188:
        -:  189:/**
        -:  190: * End day for the first 11 months.
        -:  191: */
        -:  192:static const int16_t ecma_date_month_end_day[10] =
        -:  193:{
        -:  194:  58, 89, 119, 150, 180, 211, 242, 272, 303, 333
        -:  195:};
        -:  196:
        -:  197:/**
        -:  198: * Helper function to get month from time value.
        -:  199: *
        -:  200: * See also:
        -:  201: *          ECMA-262 v5, 15.9.1.4
        -:  202: *
        -:  203: * @return month number
        -:  204: */
        -:  205:ecma_number_t
    #####:  206:ecma_date_month_from_time (ecma_number_t time) /**< time value */
        -:  207:{
    #####:  208:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  209:
    #####:  210:  ecma_number_t year = ecma_date_year_from_time (time);
        -:  211:
    #####:  212:  if (ecma_number_is_nan (year))
        -:  213:  {
    #####:  214:    return ecma_number_make_nan ();
        -:  215:  }
        -:  216:
    #####:  217:  int day_within_year = (int) (ecma_date_day (time) - ecma_date_day_from_year (year));
        -:  218:
    #####:  219:  JERRY_ASSERT (day_within_year >= 0);
        -:  220:
    #####:  221:  if (day_within_year <= 30)
        -:  222:  {
    #####:  223:    return 0;
        -:  224:  }
        -:  225:
    #####:  226:  day_within_year -= ecma_date_in_leap_year (year);
        -:  227:
    #####:  228:  JERRY_ASSERT (day_within_year < 365);
        -:  229:
    #####:  230:  for (int i = 0; i < 10; i++)
        -:  231:  {
    #####:  232:    if (day_within_year <= ecma_date_month_end_day[i])
        -:  233:    {
    #####:  234:      return i + 1;
        -:  235:    }
        -:  236:  }
        -:  237:
    #####:  238:  return 11;
        -:  239:} /* ecma_date_month_from_time */
        -:  240:
        -:  241:/**
        -:  242: * Helper function to get date number from time value.
        -:  243: *
        -:  244: * See also:
        -:  245: *          ECMA-262 v5, 15.9.1.5
        -:  246: *
        -:  247: * @return date number
        -:  248: */
        -:  249:ecma_number_t
    #####:  250:ecma_date_date_from_time (ecma_number_t time) /**< time value */
        -:  251:{
    #####:  252:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  253:
    #####:  254:  ecma_number_t year = ecma_date_year_from_time (time);
        -:  255:
    #####:  256:  if (ecma_number_is_nan (year))
        -:  257:  {
    #####:  258:    return ecma_number_make_nan ();
        -:  259:  }
        -:  260:
    #####:  261:  int day_within_year = (int) (ecma_date_day (time) - ecma_date_day_from_year (year));
        -:  262:
    #####:  263:  JERRY_ASSERT (day_within_year >= 0);
        -:  264:
    #####:  265:  if (day_within_year <= 30)
        -:  266:  {
    #####:  267:    return day_within_year + 1;
        -:  268:  }
        -:  269:
    #####:  270:  int leap_year = ecma_date_in_leap_year (year);
        -:  271:
    #####:  272:  if (day_within_year <= 58 + leap_year)
        -:  273:  {
    #####:  274:    return day_within_year - 30;
        -:  275:  }
        -:  276:
    #####:  277:  day_within_year -= leap_year;
        -:  278:
    #####:  279:  JERRY_ASSERT (day_within_year < 365);
        -:  280:
    #####:  281:  for (int i = 1; i < 10; i++)
        -:  282:  {
    #####:  283:    if (day_within_year <= ecma_date_month_end_day[i])
        -:  284:    {
    #####:  285:      return day_within_year - ecma_date_month_end_day[i - 1];
        -:  286:    }
        -:  287:  }
        -:  288:
    #####:  289:  return day_within_year - 333;
        -:  290:} /* ecma_date_date_from_time */
        -:  291:
        -:  292:/**
        -:  293: * Helper function to get weekday from time value.
        -:  294: *
        -:  295: * See also:
        -:  296: *          ECMA-262 v5, 15.9.1.6
        -:  297: *
        -:  298: * Used by:
        -:  299: *         - The Date.prototype.getDay routine. (Generated.)
        -:  300: *         - The Date.prototype.getUTCDay routine. (Generated.)
        -:  301: *
        -:  302: * @return  weekday number
        -:  303: */
        -:  304:ecma_number_t
    #####:  305:ecma_date_week_day (ecma_number_t time) /**< time value */
        -:  306:{
    #####:  307:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  308:
    #####:  309:  ecma_number_t week_day = (ecma_number_t) fmod ((ecma_date_day (time) + 4), 7);
        -:  310:
    #####:  311:  return (week_day < 0) ? (7 + week_day) : week_day;
        -:  312:} /* ecma_date_week_day */
        -:  313:
        -:  314:/**
        -:  315: * Helper function to get the local time zone offset at a given UTC timestamp.
        -:  316: * You can add this number to the given UTC timestamp to get local time.
        -:  317: *
        -:  318: * See also:
        -:  319: *          ECMA-262 v5, 15.9.1.9
        -:  320: *
        -:  321: * @return local time zone adjustment
        -:  322: */
        -:  323:inline ecma_number_t JERRY_ATTR_ALWAYS_INLINE
    #####:  324:ecma_date_local_time_zone_adjustment (ecma_number_t time) /**< time value */
        -:  325:{
    #####:  326:  return jerry_port_get_local_time_zone_adjustment (time, true);
        -:  327:} /* ecma_date_local_time_zone_adjustment */
        -:  328:
        -:  329:/**
        -:  330: * Helper function to get UTC time from local time.
        -:  331: *
        -:  332: * See also:
        -:  333: *          ECMA-262 v5, 15.9.1.9
        -:  334: *
        -:  335: * @return UTC time
        -:  336: */
        -:  337:ecma_number_t
    #####:  338:ecma_date_utc (ecma_number_t time) /**< time value */
        -:  339:{
    #####:  340:  return time - jerry_port_get_local_time_zone_adjustment (time, false);
        -:  341:} /* ecma_date_utc */
        -:  342:
        -:  343:/**
        -:  344: * Helper function to get hour from time value.
        -:  345: *
        -:  346: * See also:
        -:  347: *          ECMA-262 v5, 15.9.1.10
        -:  348: *
        -:  349: * @return hour value
        -:  350: */
        -:  351:ecma_number_t
    #####:  352:ecma_date_hour_from_time (ecma_number_t time) /**< time value */
        -:  353:{
    #####:  354:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  355:
    #####:  356:  ecma_number_t hour = (ecma_number_t) fmod (floor (time / ECMA_DATE_MS_PER_HOUR),
        -:  357:                                             ECMA_DATE_HOURS_PER_DAY);
    #####:  358:  return (hour < 0) ? ECMA_DATE_HOURS_PER_DAY + hour : hour;
        -:  359:} /* ecma_date_hour_from_time */
        -:  360:
        -:  361:/**
        -:  362: * Helper function to get minute from time value.
        -:  363: *
        -:  364: * See also:
        -:  365: *          ECMA-262 v5, 15.9.1.10
        -:  366: *
        -:  367: * @return minute value
        -:  368: */
        -:  369:ecma_number_t
    #####:  370:ecma_date_min_from_time (ecma_number_t time) /**< time value */
        -:  371:{
    #####:  372:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  373:
    #####:  374:  ecma_number_t min = (ecma_number_t) fmod (floor (time / ECMA_DATE_MS_PER_MINUTE),
        -:  375:                                            ECMA_DATE_MINUTES_PER_HOUR);
    #####:  376:  return (min < 0) ? ECMA_DATE_MINUTES_PER_HOUR + min : min;
        -:  377:} /* ecma_date_min_from_time */
        -:  378:
        -:  379:/**
        -:  380: * Helper function to get second from time value.
        -:  381: *
        -:  382: * See also:
        -:  383: *          ECMA-262 v5, 15.9.1.10
        -:  384: *
        -:  385: * @return second value
        -:  386: */
        -:  387:ecma_number_t
    #####:  388:ecma_date_sec_from_time (ecma_number_t time) /**< time value */
        -:  389:{
    #####:  390:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  391:
    #####:  392:  ecma_number_t sec = (ecma_number_t) fmod (floor (time / ECMA_DATE_MS_PER_SECOND),
        -:  393:                                            ECMA_DATE_SECONDS_PER_MINUTE);
    #####:  394:  return (sec < 0) ? ECMA_DATE_SECONDS_PER_MINUTE + sec : sec;
        -:  395:} /* ecma_date_sec_from_time */
        -:  396:
        -:  397:/**
        -:  398: * Helper function to get millisecond from time value.
        -:  399: *
        -:  400: * See also:
        -:  401: *          ECMA-262 v5, 15.9.1.10
        -:  402: *
        -:  403: * @return millisecond value
        -:  404: */
        -:  405:ecma_number_t
    #####:  406:ecma_date_ms_from_time (ecma_number_t time) /**< time value */
        -:  407:{
    #####:  408:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  409:
    #####:  410:  ecma_number_t milli = (ecma_number_t) fmod (time, ECMA_DATE_MS_PER_SECOND);
    #####:  411:  return (milli < 0) ? ECMA_DATE_MS_PER_SECOND + milli : milli;
        -:  412:} /* ecma_date_ms_from_time */
        -:  413:
        -:  414:/**
        -:  415: * Helper function to make time value from hour, min, sec and ms.
        -:  416: *
        -:  417: * See also:
        -:  418: *          ECMA-262 v5, 15.9.1.11
        -:  419: *
        -:  420: * @return time value
        -:  421: */
        -:  422:ecma_number_t
    #####:  423:ecma_date_make_time (ecma_number_t hour, /**< hour value */
        -:  424:                     ecma_number_t min, /**< minute value */
        -:  425:                     ecma_number_t sec, /**< second value */
        -:  426:                     ecma_number_t ms) /**< millisecond value */
        -:  427:{
    #####:  428:  if (ecma_number_is_nan (hour)
    #####:  429:      || ecma_number_is_nan (min)
    #####:  430:      || ecma_number_is_nan (sec)
    #####:  431:      || ecma_number_is_nan (ms)
    #####:  432:      || ecma_number_is_infinity (hour)
    #####:  433:      || ecma_number_is_infinity (min)
    #####:  434:      || ecma_number_is_infinity (sec)
    #####:  435:      || ecma_number_is_infinity (ms))
        -:  436:  {
    #####:  437:    return ecma_number_make_nan ();
        -:  438:  }
        -:  439:
        -:  440:  /* Replaced toInteger to ecma_number_trunc because it does the same thing. */
    #####:  441:  ecma_number_t h = ecma_number_trunc (hour);
    #####:  442:  ecma_number_t m = ecma_number_trunc (min);
    #####:  443:  ecma_number_t s = ecma_number_trunc (sec);
    #####:  444:  ecma_number_t milli = ecma_number_trunc (ms);
        -:  445:
    #####:  446:  return (h * ECMA_DATE_MS_PER_HOUR
    #####:  447:          + m * ECMA_DATE_MS_PER_MINUTE
    #####:  448:          + s * ECMA_DATE_MS_PER_SECOND
    #####:  449:          + milli);
        -:  450:} /* ecma_date_make_time */
        -:  451:
        -:  452:/**
        -:  453: * Helper function to make day value from year, month and date.
        -:  454: *
        -:  455: * See also:
        -:  456: *          ECMA-262 v5, 15.9.1.12
        -:  457: *
        -:  458: * @return day value
        -:  459: */
        -:  460:ecma_number_t
    #####:  461:ecma_date_make_day (ecma_number_t year, /**< year value */
        -:  462:                    ecma_number_t month, /**< month value */
        -:  463:                    ecma_number_t date) /**< date value */
        -:  464:{
        -:  465:  /* 1. */
    #####:  466:  if (ecma_number_is_nan (year)
    #####:  467:      || ecma_number_is_nan (month)
    #####:  468:      || ecma_number_is_nan (date)
    #####:  469:      || ecma_number_is_infinity (year)
    #####:  470:      || ecma_number_is_infinity (month)
    #####:  471:      || ecma_number_is_infinity (date))
        -:  472:  {
    #####:  473:    return ecma_number_make_nan ();
        -:  474:  }
        -:  475:
        -:  476:  /* 2., 3., 4. */
    #####:  477:  ecma_number_t y = ecma_number_trunc (year);
    #####:  478:  ecma_number_t m = ecma_number_trunc (month);
    #####:  479:  ecma_number_t dt = ecma_number_trunc (date);
        -:  480:  /* 5. */
    #####:  481:  ecma_number_t ym = y + (ecma_number_t) floor (m / 12);
        -:  482:  /* 6. */
    #####:  483:  ecma_number_t mn = (ecma_number_t) fmod (m, 12);
    #####:  484:  mn = (mn < 0) ? 12 + mn : mn;
        -:  485:
        -:  486:  /* 7. */
    #####:  487:  ecma_number_t time = ecma_date_time_from_year (ym);
        -:  488:
        -:  489:  /**
        -:  490:   * The algorithm below searches the following date: ym-mn-1
        -:  491:   * To find this time it starts from the beginning of the year (ym)
        -:  492:   * then find the first day of the month.
        -:  493:   */
    #####:  494:  if (!ecma_number_is_nan (time)
    #####:  495:      && ecma_date_year_from_time (time) == ym)
        -:  496:  {
        -:  497:    /* Get the month */
    #####:  498:    time += 31 * mn * ECMA_DATE_MS_PER_DAY;
        -:  499:
        -:  500:    /* Get the month's first day */
    #####:  501:    time += ((ecma_number_t) 1.0 - ecma_date_date_from_time (time)) * ECMA_DATE_MS_PER_DAY;
        -:  502:
    #####:  503:    if (!ecma_number_is_nan (time)
    #####:  504:        && ecma_date_month_from_time (time) == mn
    #####:  505:        && ecma_date_date_from_time (time) == 1)
        -:  506:    {
        -:  507:      /* 8. */
    #####:  508:      return ecma_date_day (time) + dt - ((ecma_number_t) 1.0);
        -:  509:    }
        -:  510:  }
        -:  511:
    #####:  512:  return ecma_number_make_nan ();
        -:  513:} /* ecma_date_make_day */
        -:  514:
        -:  515:/**
        -:  516: * Helper function to make date value from day and time.
        -:  517: *
        -:  518: * See also:
        -:  519: *          ECMA-262 v5, 15.9.1.13
        -:  520: *
        -:  521: * @return date value
        -:  522: */
        -:  523:ecma_number_t
    #####:  524:ecma_date_make_date (ecma_number_t day, /**< day value */
        -:  525:                     ecma_number_t time) /**< time value */
        -:  526:{
    #####:  527:  if (ecma_number_is_nan (day)
    #####:  528:      || ecma_number_is_nan (time))
        -:  529:  {
    #####:  530:    return ecma_number_make_nan ();
        -:  531:  }
        -:  532:
    #####:  533:  ecma_number_t result = day * ECMA_DATE_MS_PER_DAY + time;
        -:  534:
    #####:  535:  if (ecma_number_is_infinity (result))
        -:  536:  {
    #####:  537:    return ecma_number_make_nan ();
        -:  538:  }
        -:  539:
    #####:  540:  return result;
        -:  541:} /* ecma_date_make_date */
        -:  542:
        -:  543:/**
        -:  544: * Helper function to calculate number of milliseconds from time value.
        -:  545: *
        -:  546: * See also:
        -:  547: *          ECMA-262 v5, 15.9.1.14
        -:  548: *
        -:  549: * @return number of milliseconds
        -:  550: */
        -:  551:ecma_number_t
    #####:  552:ecma_date_time_clip (ecma_number_t time) /**< time value */
        -:  553:{
    #####:  554:  if (ecma_number_is_nan (time)
    #####:  555:      || ecma_number_is_infinity (time)
    #####:  556:      || fabs (time) > ECMA_DATE_MAX_VALUE)
        -:  557:  {
    #####:  558:    return ecma_number_make_nan ();
        -:  559:  }
        -:  560:
    #####:  561:  return ecma_number_trunc (time);
        -:  562:} /* ecma_date_time_clip */
        -:  563:
        -:  564:/**
        -:  565: * Helper function to calculate timezone offset.
        -:  566: *
        -:  567: * See also:
        -:  568: *          ECMA-262 v5, 15.9.5.26
        -:  569: *
        -:  570: * @return timezone offset
        -:  571: */
        -:  572:inline ecma_number_t JERRY_ATTR_ALWAYS_INLINE
    #####:  573:ecma_date_timezone_offset (ecma_number_t time) /**< time value */
        -:  574:{
    #####:  575:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  576:
    #####:  577:  return (-ecma_date_local_time_zone_adjustment (time)) / ECMA_DATE_MS_PER_MINUTE;
        -:  578:} /* ecma_date_timezone_offset */
        -:  579:
        -:  580:/**
        -:  581: * Common function to convert date to string.
        -:  582: *
        -:  583: * @return ecma value
        -:  584: *         Returned value must be freed with ecma_free_value.
        -:  585: */
        -:  586:static ecma_value_t
    #####:  587:ecma_date_to_string_format (ecma_number_t datetime_number, /**< datetime */
        -:  588:                            const char *format_p) /**< format buffer */
    #####:  589:{
    #####:  590:  const uint32_t date_buffer_length = 37;
    #####:  591:  JERRY_VLA (lit_utf8_byte_t, date_buffer, date_buffer_length);
        -:  592:
    #####:  593:  lit_utf8_byte_t *dest_p = date_buffer;
        -:  594:
    #####:  595:  while (*format_p != LIT_CHAR_NULL)
        -:  596:  {
    #####:  597:    if (*format_p != LIT_CHAR_DOLLAR_SIGN)
        -:  598:    {
    #####:  599:      *dest_p++ = (lit_utf8_byte_t) *format_p++;
    #####:  600:      continue;
        -:  601:    }
        -:  602:
    #####:  603:    format_p++;
        -:  604:
    #####:  605:    const char *str_p = NULL;
    #####:  606:    int32_t number = 0;
    #####:  607:    int32_t number_length = 0;
        -:  608:
    #####:  609:    switch (*format_p)
        -:  610:    {
    #####:  611:      case LIT_CHAR_UPPERCASE_Y: /* Year. */
        -:  612:      {
    #####:  613:        number = (int32_t) ecma_date_year_from_time (datetime_number);
        -:  614:
    #####:  615:        if (number >= 100000 || number <= -100000)
        -:  616:        {
    #####:  617:          number_length = 6;
        -:  618:        }
    #####:  619:        else if (number >= 10000 || number <= -10000)
        -:  620:        {
    #####:  621:          number_length = 5;
        -:  622:        }
        -:  623:        else
        -:  624:        {
    #####:  625:          number_length = 4;
        -:  626:        }
    #####:  627:        break;
        -:  628:      }
    #####:  629:      case LIT_CHAR_LOWERCASE_Y: /* ISO Year: -000001, 0000, 0001, 9999, +012345 */
        -:  630:      {
    #####:  631:        number = (int32_t) ecma_date_year_from_time (datetime_number);
    #####:  632:        if (0 <= number && number <= 9999)
        -:  633:        {
    #####:  634:          number_length = 4;
        -:  635:        }
        -:  636:        else
        -:  637:        {
    #####:  638:          number_length = 6;
        -:  639:        }
    #####:  640:        break;
        -:  641:      }
    #####:  642:      case LIT_CHAR_UPPERCASE_M: /* Month. */
        -:  643:      {
    #####:  644:        int32_t month = (int32_t) ecma_date_month_from_time (datetime_number);
        -:  645:
    #####:  646:        JERRY_ASSERT (month >= 0 && month <= 11);
        -:  647:
    #####:  648:        str_p = month_names_p[month];
    #####:  649:        break;
        -:  650:      }
    #####:  651:      case LIT_CHAR_UPPERCASE_O: /* Month as number. */
        -:  652:      {
        -:  653:        /* The 'ecma_date_month_from_time' (ECMA 262 v5, 15.9.1.4) returns a
        -:  654:         * number from 0 to 11, but we have to print the month from 1 to 12
        -:  655:         * for ISO 8601 standard (ECMA 262 v5, 15.9.1.15). */
    #####:  656:        number = ((int32_t) ecma_date_month_from_time (datetime_number)) + 1;
    #####:  657:        number_length = 2;
    #####:  658:        break;
        -:  659:      }
    #####:  660:      case LIT_CHAR_UPPERCASE_D: /* Day. */
        -:  661:      {
    #####:  662:        number = (int32_t) ecma_date_date_from_time (datetime_number);
    #####:  663:        number_length = 2;
    #####:  664:        break;
        -:  665:      }
    #####:  666:      case LIT_CHAR_UPPERCASE_W: /* Day of week. */
        -:  667:      {
    #####:  668:        int32_t day = (int32_t) ecma_date_week_day (datetime_number);
        -:  669:
    #####:  670:        JERRY_ASSERT (day >= 0 && day <= 6);
        -:  671:
    #####:  672:        str_p = day_names_p[day];
    #####:  673:        break;
        -:  674:      }
    #####:  675:      case LIT_CHAR_LOWERCASE_H: /* Hour. */
        -:  676:      {
    #####:  677:        number = (int32_t) ecma_date_hour_from_time (datetime_number);
    #####:  678:        number_length = 2;
    #####:  679:        break;
        -:  680:      }
    #####:  681:      case LIT_CHAR_LOWERCASE_M: /* Minutes. */
        -:  682:      {
    #####:  683:        number = (int32_t) ecma_date_min_from_time (datetime_number);
    #####:  684:        number_length = 2;
    #####:  685:        break;
        -:  686:      }
    #####:  687:      case LIT_CHAR_LOWERCASE_S: /* Seconds. */
        -:  688:      {
    #####:  689:        number = (int32_t) ecma_date_sec_from_time (datetime_number);
    #####:  690:        number_length = 2;
    #####:  691:        break;
        -:  692:      }
    #####:  693:      case LIT_CHAR_LOWERCASE_I: /* Milliseconds. */
        -:  694:      {
    #####:  695:        number = (int32_t) ecma_date_ms_from_time (datetime_number);
    #####:  696:        number_length = 3;
    #####:  697:        break;
        -:  698:      }
    #####:  699:      case LIT_CHAR_LOWERCASE_Z: /* Time zone hours part. */
        -:  700:      {
    #####:  701:        int32_t time_zone = (int32_t) ecma_date_local_time_zone_adjustment (datetime_number);
        -:  702:
    #####:  703:        if (time_zone >= 0)
        -:  704:        {
    #####:  705:          *dest_p++ = LIT_CHAR_PLUS;
        -:  706:        }
        -:  707:        else
        -:  708:        {
    #####:  709:          *dest_p++ = LIT_CHAR_MINUS;
    #####:  710:          time_zone = -time_zone;
        -:  711:        }
        -:  712:
    #####:  713:        number = time_zone / (int32_t) ECMA_DATE_MS_PER_HOUR;
    #####:  714:        number_length = 2;
    #####:  715:        break;
        -:  716:      }
    #####:  717:      default:
        -:  718:      {
    #####:  719:        JERRY_ASSERT (*format_p == LIT_CHAR_UPPERCASE_Z); /* Time zone minutes part. */
        -:  720:
    #####:  721:        int32_t time_zone = (int32_t) ecma_date_local_time_zone_adjustment (datetime_number);
        -:  722:
    #####:  723:        if (time_zone < 0)
        -:  724:        {
    #####:  725:          time_zone = -time_zone;
        -:  726:        }
        -:  727:
    #####:  728:        number = time_zone % (int32_t) ECMA_DATE_MS_PER_HOUR / (int32_t) ECMA_DATE_MS_PER_MINUTE;
    #####:  729:        number_length = 2;
    #####:  730:        break;
        -:  731:      }
        -:  732:    }
        -:  733:
    #####:  734:    format_p++;
        -:  735:
    #####:  736:    if (str_p != NULL)
        -:  737:    {
        -:  738:      /* Print string values: month or day name which is always 3 characters */
    #####:  739:      memcpy (dest_p, str_p, 3);
    #####:  740:      dest_p += 3;
    #####:  741:      continue;
        -:  742:    }
        -:  743:
        -:  744:    /* Print right aligned number values. */
    #####:  745:    JERRY_ASSERT (number_length > 0);
        -:  746:
    #####:  747:    if (number < 0)
        -:  748:    {
    #####:  749:      number = -number;
    #####:  750:      *dest_p++ = '-';
        -:  751:    }
    #####:  752:    else if (*(format_p - 1) == LIT_CHAR_LOWERCASE_Y && number_length == 6)
        -:  753:    {
        -:  754:      /* positive sign is compulsory for extended years */
    #####:  755:      *dest_p++ = '+';
        -:  756:    }
        -:  757:
    #####:  758:    dest_p += number_length;
    #####:  759:    lit_utf8_byte_t *buffer_p = dest_p;
        -:  760:
        -:  761:    do
        -:  762:    {
    #####:  763:      buffer_p--;
    #####:  764:      *buffer_p = (lit_utf8_byte_t) ((number % 10) + (int32_t) LIT_CHAR_0);
    #####:  765:      number /= 10;
        -:  766:    }
    #####:  767:    while (--number_length);
        -:  768:  }
        -:  769:
    #####:  770:  JERRY_ASSERT (dest_p <= date_buffer + date_buffer_length);
        -:  771:
    #####:  772:  return ecma_make_string_value (ecma_new_ecma_string_from_utf8 (date_buffer,
    #####:  773:                                                                 (lit_utf8_size_t) (dest_p - date_buffer)));
        -:  774:} /* ecma_date_to_string_format */
        -:  775:
        -:  776:/**
        -:  777: * Common function to create a time zone specific string from a numeric value.
        -:  778: *
        -:  779: * Used by:
        -:  780: *        - The Date routine.
        -:  781: *        - The Date.prototype.toString routine.
        -:  782: *
        -:  783: * @return ecma value
        -:  784: *         Returned value must be freed with ecma_free_value.
        -:  785: */
        -:  786:ecma_value_t
    #####:  787:ecma_date_value_to_string (ecma_number_t datetime_number) /**< datetime */
        -:  788:{
    #####:  789:  datetime_number += ecma_date_local_time_zone_adjustment (datetime_number);
    #####:  790:  return ecma_date_to_string_format (datetime_number, "$W $M $D $Y $h:$m:$s GMT$z$Z");
        -:  791:} /* ecma_date_value_to_string */
        -:  792:
        -:  793:/**
        -:  794: * Common function to create a time zone specific string from a numeric value.
        -:  795: *
        -:  796: * Used by:
        -:  797: *        - The Date.prototype.toUTCString routine.
        -:  798: *
        -:  799: * @return ecma value
        -:  800: *         Returned value must be freed with ecma_free_value.
        -:  801: */
        -:  802:ecma_value_t
    #####:  803:ecma_date_value_to_utc_string (ecma_number_t datetime_number) /**< datetime */
        -:  804:{
    #####:  805:  return ecma_date_to_string_format (datetime_number, "$W, $D $M $Y $h:$m:$s GMT");
        -:  806:} /* ecma_date_value_to_utc_string */
        -:  807:
        -:  808:/**
        -:  809: * Common function to create a ISO specific string from a numeric value.
        -:  810: *
        -:  811: * Used by:
        -:  812: *        - The Date.prototype.toISOString routine.
        -:  813: *
        -:  814: * @return ecma value
        -:  815: *         Returned value must be freed with ecma_free_value.
        -:  816: */
        -:  817:ecma_value_t
    #####:  818:ecma_date_value_to_iso_string (ecma_number_t datetime_number) /**<datetime */
        -:  819:{
    #####:  820:  return ecma_date_to_string_format (datetime_number, "$y-$O-$DT$h:$m:$s.$iZ");
        -:  821:} /* ecma_date_value_to_iso_string */
        -:  822:
        -:  823:/**
        -:  824: * Common function to create a date string from a numeric value.
        -:  825: *
        -:  826: * Used by:
        -:  827: *        - The Date.prototype.toDateString routine.
        -:  828: *
        -:  829: * @return ecma value
        -:  830: *         Returned value must be freed with ecma_free_value.
        -:  831: */
        -:  832:ecma_value_t
    #####:  833:ecma_date_value_to_date_string (ecma_number_t datetime_number) /**<datetime */
        -:  834:{
    #####:  835:  return ecma_date_to_string_format (datetime_number, "$Y-$O-$D");
        -:  836:} /* ecma_date_value_to_date_string */
        -:  837:
        -:  838:/**
        -:  839: * Common function to create a time string from a numeric value.
        -:  840: *
        -:  841: * Used by:
        -:  842: *        - The Date.prototype.toTimeString routine.
        -:  843: *
        -:  844: * @return ecma value
        -:  845: *         Returned value must be freed with ecma_free_value.
        -:  846: */
        -:  847:ecma_value_t
    #####:  848:ecma_date_value_to_time_string (ecma_number_t datetime_number) /**<datetime */
        -:  849:{
    #####:  850:  return ecma_date_to_string_format (datetime_number, "$h:$m:$s.$i");
        -:  851:} /* ecma_date_value_to_time_string */
        -:  852:
        -:  853:/**
        -:  854: * @}
        -:  855: * @}
        -:  856: */
        -:  857:
        -:  858:#endif /* ENABLED (JERRY_BUILTIN_DATE) */
