        -:    0:Source:/home/workspace/tests/unit-core/test-api-property.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:int
    #####:   21:main (void)
        -:   22:{
    #####:   23:  TEST_INIT ();
        -:   24:
    #####:   25:  jerry_init (JERRY_INIT_EMPTY);
        -:   26:
        -:   27:  /* Test: init property descriptor */
        -:   28:  jerry_property_descriptor_t prop_desc;
    #####:   29:  jerry_init_property_descriptor_fields (&prop_desc);
    #####:   30:  TEST_ASSERT (prop_desc.is_value_defined == false);
    #####:   31:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.value));
    #####:   32:  TEST_ASSERT (prop_desc.is_writable_defined == false);
    #####:   33:  TEST_ASSERT (prop_desc.is_writable == false);
    #####:   34:  TEST_ASSERT (prop_desc.is_enumerable_defined == false);
    #####:   35:  TEST_ASSERT (prop_desc.is_enumerable == false);
    #####:   36:  TEST_ASSERT (prop_desc.is_configurable_defined == false);
    #####:   37:  TEST_ASSERT (prop_desc.is_configurable == false);
    #####:   38:  TEST_ASSERT (prop_desc.is_get_defined == false);
    #####:   39:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.getter));
    #####:   40:  TEST_ASSERT (prop_desc.is_set_defined == false);
    #####:   41:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.setter));
        -:   42:
        -:   43:  /* Test: define own properties */
    #####:   44:  jerry_value_t global_obj_val = jerry_get_global_object ();
    #####:   45:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_defined_property");
    #####:   46:  prop_desc.is_value_defined = true;
    #####:   47:  prop_desc.value = jerry_acquire_value (prop_name);
    #####:   48:  jerry_value_t res = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####:   49:  TEST_ASSERT (!jerry_value_is_error (res));
    #####:   50:  TEST_ASSERT (jerry_value_is_boolean (res));
    #####:   51:  TEST_ASSERT (jerry_get_boolean_value (res));
    #####:   52:  jerry_release_value (res);
    #####:   53:  jerry_free_property_descriptor_fields (&prop_desc);
        -:   54:
        -:   55:  /* Test: get own property descriptor */
    #####:   56:  bool is_ok = jerry_get_own_property_descriptor (global_obj_val, prop_name, &prop_desc);
    #####:   57:  TEST_ASSERT (is_ok);
    #####:   58:  TEST_ASSERT (prop_desc.is_value_defined == true);
    #####:   59:  TEST_ASSERT (jerry_value_is_string (prop_desc.value));
    #####:   60:  TEST_ASSERT (prop_desc.is_writable == false);
    #####:   61:  TEST_ASSERT (prop_desc.is_enumerable == false);
    #####:   62:  TEST_ASSERT (prop_desc.is_configurable == false);
    #####:   63:  TEST_ASSERT (prop_desc.is_get_defined == false);
    #####:   64:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.getter));
    #####:   65:  TEST_ASSERT (prop_desc.is_set_defined == false);
    #####:   66:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.setter));
    #####:   67:  jerry_release_value (global_obj_val);
    #####:   68:  jerry_free_property_descriptor_fields (&prop_desc);
        -:   69:
    #####:   70:  if (jerry_is_feature_enabled (JERRY_FEATURE_PROXY))
        -:   71:  {
        -:   72:    /* Note: update this test when the internal method is implemented */
    #####:   73:    jerry_value_t target = jerry_create_object ();
    #####:   74:    jerry_value_t handler = jerry_create_object ();
    #####:   75:    jerry_value_t proxy = jerry_create_proxy (target, handler);
        -:   76:
    #####:   77:    jerry_release_value (target);
    #####:   78:    jerry_release_value (handler);
    #####:   79:    is_ok = jerry_get_own_property_descriptor (proxy, prop_name, &prop_desc);
    #####:   80:    TEST_ASSERT (!is_ok);
    #####:   81:    jerry_release_value (proxy);
        -:   82:  }
        -:   83:
    #####:   84:  jerry_release_value (prop_name);
        -:   85:
    #####:   86:  jerry_cleanup ();
        -:   87:
    #####:   88:  return 0;
        -:   89:} /* main */
