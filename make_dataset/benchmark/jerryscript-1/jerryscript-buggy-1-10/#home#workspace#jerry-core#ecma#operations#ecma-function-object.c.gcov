        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-function-object.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtin-helpers.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-function-object.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:#include "lit-char-helpers.h"
        -:   23:#include "ecma-lex-env.h"
        -:   24:#include "ecma-objects.h"
        -:   25:#include "ecma-objects-general.h"
        -:   26:#include "ecma-objects-arguments.h"
        -:   27:#include "ecma-proxy-object.h"
        -:   28:#include "ecma-try-catch-macro.h"
        -:   29:#include "jcontext.h"
        -:   30:
        -:   31:/** \addtogroup ecma ECMA
        -:   32: * @{
        -:   33: *
        -:   34: * \addtogroup ecmafunctionobject ECMA Function object related routines
        -:   35: * @{
        -:   36: */
        -:   37:
        -:   38:#if ENABLED (JERRY_LINE_INFO) || ENABLED (JERRY_ES2015_MODULE_SYSTEM)
        -:   39:/**
        -:   40: * Get the resource name from the compiled code header
        -:   41: *
        -:   42: * @return resource name as ecma-string
        -:   43: */
        -:   44:ecma_value_t
     1311:   45:ecma_op_resource_name (const ecma_compiled_code_t *bytecode_header_p)
        -:   46:{
     1311:   47:  JERRY_ASSERT (bytecode_header_p != NULL);
        -:   48:
     1311:   49:  uint8_t *byte_p = (uint8_t *) bytecode_header_p;
     1311:   50:  byte_p += ((size_t) bytecode_header_p->size) << JMEM_ALIGNMENT_LOG;
        -:   51:
     1311:   52:  ecma_value_t *resource_name_p = (ecma_value_t *) byte_p;
     1311:   53:  resource_name_p -= ecma_compiled_code_get_formal_params (bytecode_header_p);
        -:   54:
        -:   55:#if ENABLED (JERRY_ES2015)
     1311:   56:  if (bytecode_header_p->status_flags & CBC_CODE_FLAG_HAS_TAGGED_LITERALS)
        -:   57:  {
    #####:   58:    resource_name_p--;
        -:   59:  }
        -:   60:#endif /* ENABLED (JERRY_ES2015) */
        -:   61:
     1311:   62:  return resource_name_p[-1];
        -:   63:} /* ecma_op_resource_name */
        -:   64:#endif /* ENABLED (JERRY_LINE_INFO) || ENABLED (JERRY_ES2015_MODULE_SYSTEM) */
        -:   65:
        -:   66:/**
        -:   67: * IsCallable operation.
        -:   68: *
        -:   69: * See also: ECMA-262 v5, 9.11
        -:   70: *
        -:   71: * @return true - if the given object is callable;
        -:   72: *         false - otherwise
        -:   73: */
        -:   74:inline bool JERRY_ATTR_ALWAYS_INLINE
     2619:   75:ecma_op_object_is_callable (ecma_object_t *obj_p) /**< ecma object */
        -:   76:{
    14400:   77:  JERRY_ASSERT (!ecma_is_lexical_environment (obj_p));
        -:   78:
    14400:   79:  const ecma_object_type_t type = ecma_get_object_type (obj_p);
        -:   80:
        -:   81:#if ENABLED (JERRY_ES2015_BUILTIN_PROXY)
    14400:   82:  if (ECMA_OBJECT_TYPE_IS_PROXY (type))
        -:   83:  {
    #####:   84:    return ecma_op_is_callable (((ecma_proxy_object_t *) obj_p)->target);
        -:   85:  }
        -:   86:#endif /* ENABLED (JERRY_ES2015_BUILTIN_PROXY) */
        -:   87:
    14400:   88:  return type >= ECMA_OBJECT_TYPE_FUNCTION;
        -:   89:} /* ecma_op_object_is_callable */
        -:   90:
        -:   91:/**
        -:   92: * IsCallable operation.
        -:   93: *
        -:   94: * See also: ECMA-262 v5, 9.11
        -:   95: *
        -:   96: * @return true - if value is callable object;
        -:   97: *         false - otherwise
        -:   98: */
        -:   99:bool
     5236:  100:ecma_op_is_callable (ecma_value_t value) /**< ecma value */
        -:  101:{
     5236:  102:  return (ecma_is_value_object (value)
    10472:  103:          && ecma_op_object_is_callable (ecma_get_object_from_value (value)));
        -:  104:} /* ecma_op_is_callable */
        -:  105:
        -:  106:/**
        -:  107: * Checks whether the given object implements [[Construct]].
        -:  108: *
        -:  109: * @return true - if the given object is constructor;
        -:  110: *         false - otherwise
        -:  111: */
        -:  112:inline bool JERRY_ATTR_ALWAYS_INLINE
     1311:  113:ecma_object_is_constructor (ecma_object_t *obj_p) /**< ecma object */
        -:  114:{
     2620:  115:  JERRY_ASSERT (!ecma_is_lexical_environment (obj_p));
        -:  116:
     2620:  117:  ecma_object_type_t type = ecma_get_object_type (obj_p);
        -:  118:
     3931:  119:  while (type == ECMA_OBJECT_TYPE_BOUND_FUNCTION)
        -:  120:  {
    #####:  121:    ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) obj_p;
        -:  122:
    #####:  123:    obj_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,
        -:  124:                                                        bound_func_p->header.u.bound_function.target_function);
        -:  125:
    #####:  126:    type = ecma_get_object_type (obj_p);
        -:  127:  }
        -:  128:
        -:  129:#if ENABLED (JERRY_ES2015_BUILTIN_PROXY)
     2620:  130:  if (ECMA_OBJECT_TYPE_IS_PROXY (type))
        -:  131:  {
    #####:  132:    return ecma_is_constructor (((ecma_proxy_object_t *) obj_p)->target);
        -:  133:  }
        -:  134:#endif /* ENABLED (JERRY_ES2015_BUILTIN_PROXY) */
        -:  135:
     2620:  136:  if (type == ECMA_OBJECT_TYPE_FUNCTION)
        -:  137:  {
     2620:  138:    return (!ecma_get_object_is_builtin (obj_p) || !ecma_builtin_function_is_routine (obj_p));
        -:  139:  }
        -:  140:
    #####:  141:  return (type >= ECMA_OBJECT_TYPE_EXTERNAL_FUNCTION);
        -:  142:} /* ecma_object_is_constructor */
        -:  143:
        -:  144:/**
        -:  145: * Checks whether the value is Object that implements [[Construct]].
        -:  146: *
        -:  147: * @return true - if value is constructor object;
        -:  148: *         false - otherwise
        -:  149: */
        -:  150:bool
    #####:  151:ecma_is_constructor (ecma_value_t value) /**< ecma value */
        -:  152:{
    #####:  153:  return (ecma_is_value_object (value)
    #####:  154:          && ecma_object_is_constructor (ecma_get_object_from_value (value)));
        -:  155:} /* ecma_is_constructor */
        -:  156:
        -:  157:/**
        -:  158: * Helper method to count and convert the arguments for the Function/GeneratorFunction constructor call.
        -:  159: *
        -:  160: * See also:
        -:  161: *          ECMA 262 v5.1 15.3.2.1 steps 5.a-d
        -:  162: *          ECMA 262 v6 19.2.1.1.1 steps 8
        -:  163: *
        -:  164: * @return ecma value - concatenated arguments as a string.
        -:  165: *         Returned value must be freed with ecma_free_value.
        -:  166: */
        -:  167:static ecma_string_t *
    #####:  168:ecma_op_create_dynamic_function_arguments_helper (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  169:                                                  ecma_length_t arguments_list_len) /**< number of arguments */
        -:  170:{
    #####:  171:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  172:
    #####:  173:  if (arguments_list_len <= 1)
        -:  174:  {
    #####:  175:    return ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
        -:  176:  }
        -:  177:
    #####:  178:  ecma_string_t *str_p = ecma_op_to_string (arguments_list_p[0]);
        -:  179:
    #####:  180:  if (JERRY_UNLIKELY (str_p == NULL))
        -:  181:  {
    #####:  182:    return str_p;
        -:  183:  }
        -:  184:
    #####:  185:  if (arguments_list_len == 2)
        -:  186:  {
    #####:  187:    return str_p;
        -:  188:  }
        -:  189:
    #####:  190:  ecma_stringbuilder_t builder = ecma_stringbuilder_create_from (str_p);
    #####:  191:  ecma_deref_ecma_string (str_p);
        -:  192:
    #####:  193:  for (ecma_length_t idx = 1; idx < arguments_list_len - 1; idx++)
        -:  194:  {
    #####:  195:    str_p = ecma_op_to_string (arguments_list_p[idx]);
        -:  196:
    #####:  197:    if (JERRY_UNLIKELY (str_p == NULL))
        -:  198:    {
    #####:  199:      ecma_stringbuilder_destroy (&builder);
    #####:  200:      return str_p;
        -:  201:    }
        -:  202:
    #####:  203:    ecma_stringbuilder_append_char (&builder, LIT_CHAR_COMMA);
    #####:  204:    ecma_stringbuilder_append (&builder, str_p);
    #####:  205:    ecma_deref_ecma_string (str_p);
        -:  206:  }
        -:  207:
    #####:  208:  return ecma_stringbuilder_finalize (&builder);
        -:  209:} /* ecma_op_create_dynamic_function_arguments_helper */
        -:  210:
        -:  211:/**
        -:  212: * Function object creation operation.
        -:  213: *
        -:  214: * See also: ECMA-262 v5, 13.2
        -:  215: *
        -:  216: * @return pointer to newly created Function object
        -:  217: */
        -:  218:static ecma_object_t *
     1311:  219:ecma_op_create_function_object (ecma_object_t *scope_p, /**< function's scope */
        -:  220:                                const ecma_compiled_code_t *bytecode_data_p, /**< byte-code array */
        -:  221:                                ecma_builtin_id_t proto_id) /**< builtin id of the prototype object */
        -:  222:{
     1311:  223:  JERRY_ASSERT (ecma_is_lexical_environment (scope_p));
        -:  224:
        -:  225:  /* 1., 4., 13. */
     1311:  226:  ecma_object_t *prototype_obj_p = ecma_builtin_get (proto_id);
        -:  227:
     1311:  228:  size_t function_object_size = sizeof (ecma_extended_object_t);
        -:  229:
        -:  230:#if ENABLED (JERRY_SNAPSHOT_EXEC)
    #####:  231:  if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)
        -:  232:  {
    #####:  233:    function_object_size = sizeof (ecma_static_function_t);
        -:  234:  }
        -:  235:#endif /* ENABLED (JERRY_SNAPSHOT_EXEC) */
        -:  236:
     1311:  237:  ecma_object_t *func_p = ecma_create_object (prototype_obj_p,
        -:  238:                                              function_object_size,
        -:  239:                                              ECMA_OBJECT_TYPE_FUNCTION);
        -:  240:
        -:  241:  /* 2., 6., 7., 8. */
        -:  242:  /*
        -:  243:   * We don't setup [[Get]], [[Call]], [[Construct]], [[HasInstance]] for each function object.
        -:  244:   * Instead we set the object's type to ECMA_OBJECT_TYPE_FUNCTION
        -:  245:   * that defines which version of the routine should be used on demand.
        -:  246:   */
        -:  247:
        -:  248:  /* 3. */
        -:  249:  /*
        -:  250:   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_FUNCTION type.
        -:  251:   *
        -:  252:   * See also: ecma_object_get_class_name
        -:  253:   */
        -:  254:
     1311:  255:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_p;
        -:  256:
        -:  257:  /* 9. */
     1311:  258:  ECMA_SET_NON_NULL_POINTER_TAG (ext_func_p->u.function.scope_cp, scope_p, 0);
        -:  259:
        -:  260:  /* 10., 11., 12. */
        -:  261:
        -:  262:#if ENABLED (JERRY_SNAPSHOT_EXEC)
    #####:  263:  if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)
        -:  264:  {
    #####:  265:    ext_func_p->u.function.bytecode_cp = ECMA_NULL_POINTER;
    #####:  266:    ((ecma_static_function_t *) func_p)->bytecode_p = bytecode_data_p;
        -:  267:  }
        -:  268:  else
        -:  269:#endif /* ENABLED (JERRY_SNAPSHOT_EXEC) */
        -:  270:  {
     1311:  271:    ECMA_SET_INTERNAL_VALUE_POINTER (ext_func_p->u.function.bytecode_cp, bytecode_data_p);
     1311:  272:    ecma_bytecode_ref ((ecma_compiled_code_t *) bytecode_data_p);
        -:  273:  }
        -:  274:
        -:  275:  /* 14., 15., 16., 17., 18. */
        -:  276:  /*
        -:  277:   * 'length' and 'prototype' properties are instantiated lazily
        -:  278:   *
        -:  279:   * See also: ecma_op_function_try_to_lazy_instantiate_property
        -:  280:   */
        -:  281:
     1311:  282:  return func_p;
        -:  283:} /* ecma_op_create_function_object */
        -:  284:
        -:  285:/**
        -:  286: * CreateDynamicFunction operation
        -:  287: *
        -:  288: * See also:
        -:  289: *          ECMA-262 v5, 15.3.
        -:  290: *          ECMA-262 v6, 19.2.1.1
        -:  291: *
        -:  292: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  293: *         constructed function object - otherwise
        -:  294: */
        -:  295:ecma_value_t
    #####:  296:ecma_op_create_dynamic_function (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  297:                                 ecma_length_t arguments_list_len, /**< number of arguments */
        -:  298:                                 ecma_parse_opts_t parse_opts) /**< parse options */
        -:  299:{
    #####:  300:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  301:
    #####:  302:  ecma_string_t *arguments_str_p = ecma_op_create_dynamic_function_arguments_helper (arguments_list_p,
        -:  303:                                                                                     arguments_list_len);
        -:  304:
    #####:  305:  if (JERRY_UNLIKELY (arguments_str_p == NULL))
        -:  306:  {
    #####:  307:    return ECMA_VALUE_ERROR;
        -:  308:  }
        -:  309:
        -:  310:  ecma_string_t *function_body_str_p;
        -:  311:
    #####:  312:  if (arguments_list_len > 0)
        -:  313:  {
    #####:  314:    function_body_str_p = ecma_op_to_string (arguments_list_p[arguments_list_len - 1]);
        -:  315:
    #####:  316:    if (JERRY_UNLIKELY (function_body_str_p == NULL))
        -:  317:    {
    #####:  318:      ecma_deref_ecma_string (arguments_str_p);
    #####:  319:      return ECMA_VALUE_ERROR;
        -:  320:    }
        -:  321:  }
        -:  322:  else
        -:  323:  {
        -:  324:    /* Very unlikely code path, not optimized. */
    #####:  325:    function_body_str_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
        -:  326:  }
        -:  327:
    #####:  328:  ECMA_STRING_TO_UTF8_STRING (arguments_str_p, arguments_buffer_p, arguments_buffer_size);
    #####:  329:  ECMA_STRING_TO_UTF8_STRING (function_body_str_p, function_body_buffer_p, function_body_buffer_size);
        -:  330:
        -:  331:#if ENABLED (JERRY_LINE_INFO) || ENABLED (JERRY_ERROR_MESSAGES) || ENABLED (JERRY_ES2015_MODULE_SYSTEM)
    #####:  332:  JERRY_CONTEXT (resource_name) = ecma_make_magic_string_value (LIT_MAGIC_STRING_RESOURCE_ANON);
        -:  333:#endif /* ENABLED (JERRY_LINE_INFO) || ENABLED (JERRY_ERROR_MESSAGES) || ENABLED (JERRY_ES2015_MODULE_SYSTEM) */
        -:  334:
    #####:  335:  ecma_compiled_code_t *bytecode_data_p = NULL;
        -:  336:
    #####:  337:  ecma_value_t ret_value = parser_parse_script (arguments_buffer_p,
        -:  338:                                                arguments_buffer_size,
        -:  339:                                                function_body_buffer_p,
        -:  340:                                                function_body_buffer_size,
        -:  341:                                                parse_opts,
        -:  342:                                                &bytecode_data_p);
        -:  343:
    #####:  344:  if (!ECMA_IS_VALUE_ERROR (ret_value))
        -:  345:  {
    #####:  346:    JERRY_ASSERT (ecma_is_value_true (ret_value));
        -:  347:
    #####:  348:    ecma_object_t *global_env_p = ecma_get_global_environment ();
    #####:  349:    ecma_builtin_id_t fallback_proto = ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE;
        -:  350:
        -:  351:#if ENABLED (JERRY_ES2015)
    #####:  352:    ecma_object_t *new_target_p = JERRY_CONTEXT (current_new_target);
    #####:  353:    bool is_generator_func = parse_opts & ECMA_PARSE_GENERATOR_FUNCTION;
        -:  354:
    #####:  355:    if (is_generator_func)
        -:  356:    {
    #####:  357:      fallback_proto = ECMA_BUILTIN_ID_GENERATOR;
        -:  358:    }
        -:  359:
    #####:  360:    if (new_target_p == NULL)
        -:  361:    {
    #####:  362:      if (is_generator_func)
        -:  363:      {
    #####:  364:        new_target_p = ecma_builtin_get (ECMA_BUILTIN_ID_GENERATOR_FUNCTION);
        -:  365:      }
        -:  366:      else
        -:  367:      {
    #####:  368:        new_target_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION);
        -:  369:      }
        -:  370:    }
        -:  371:
    #####:  372:    ecma_object_t *proto = ecma_op_get_prototype_from_constructor (new_target_p, fallback_proto);
        -:  373:
    #####:  374:    if (JERRY_UNLIKELY (proto == NULL))
        -:  375:    {
    #####:  376:      ecma_bytecode_deref (bytecode_data_p);
    #####:  377:      return ECMA_VALUE_ERROR;
        -:  378:    }
        -:  379:#endif /* ENABLED (JERRY_ES2015) */
        -:  380:
    #####:  381:    ecma_object_t *func_obj_p = ecma_op_create_function_object (global_env_p, bytecode_data_p, fallback_proto);
        -:  382:
        -:  383:#if ENABLED (JERRY_ES2015)
    #####:  384:    ECMA_SET_NON_NULL_POINTER (func_obj_p->u2.prototype_cp, proto);
    #####:  385:    ecma_deref_object (proto);
        -:  386:#endif /* ENABLED (JERRY_ES2015) */
        -:  387:
    #####:  388:    ecma_bytecode_deref (bytecode_data_p);
    #####:  389:    ret_value = ecma_make_object_value (func_obj_p);
        -:  390:  }
        -:  391:
    #####:  392:  ECMA_FINALIZE_UTF8_STRING (function_body_buffer_p, function_body_buffer_size);
    #####:  393:  ECMA_FINALIZE_UTF8_STRING (arguments_buffer_p, arguments_buffer_size);
        -:  394:
    #####:  395:  ecma_deref_ecma_string (arguments_str_p);
    #####:  396:  ecma_deref_ecma_string (function_body_str_p);
        -:  397:
    #####:  398:  return ret_value;
        -:  399:} /* ecma_op_create_dynamic_function */
        -:  400:
        -:  401:/**
        -:  402: * Function object creation operation.
        -:  403: *
        -:  404: * See also: ECMA-262 v5, 13.2
        -:  405: *
        -:  406: * @return pointer to newly created Function object
        -:  407: */
        -:  408:ecma_object_t *
     1311:  409:ecma_op_create_simple_function_object (ecma_object_t *scope_p, /**< function's scope */
        -:  410:                                       const ecma_compiled_code_t *bytecode_data_p) /**< byte-code array */
        -:  411:{
     1311:  412:  return ecma_op_create_function_object (scope_p, bytecode_data_p, ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  413:} /* ecma_op_create_simple_function_object */
        -:  414:
        -:  415:#if ENABLED (JERRY_ES2015)
        -:  416:
        -:  417:/**
        -:  418: * GeneratorFunction object creation operation.
        -:  419: *
        -:  420: * See also: ECMA-262 v5, 13.2
        -:  421: *
        -:  422: * @return pointer to newly created Function object
        -:  423: */
        -:  424:ecma_object_t *
    #####:  425:ecma_op_create_generator_function_object (ecma_object_t *scope_p, /**< function's scope */
        -:  426:                                          const ecma_compiled_code_t *bytecode_data_p) /**< byte-code array */
        -:  427:{
    #####:  428:  return ecma_op_create_function_object (scope_p, bytecode_data_p, ECMA_BUILTIN_ID_GENERATOR);
        -:  429:} /* ecma_op_create_generator_function_object */
        -:  430:
        -:  431:/**
        -:  432: * Arrow function object creation operation.
        -:  433: *
        -:  434: * See also: ES2015, 9.2.12
        -:  435: *
        -:  436: * @return pointer to newly created Function object
        -:  437: */
        -:  438:ecma_object_t *
    #####:  439:ecma_op_create_arrow_function_object (ecma_object_t *scope_p, /**< function's scope */
        -:  440:                                      const ecma_compiled_code_t *bytecode_data_p, /**< byte-code array */
        -:  441:                                      ecma_value_t this_binding) /**< value of 'this' binding */
        -:  442:{
    #####:  443:  ecma_object_t *prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  444:
    #####:  445:  size_t arrow_function_object_size = sizeof (ecma_arrow_function_t);
        -:  446:
        -:  447:#if ENABLED (JERRY_SNAPSHOT_EXEC)
    #####:  448:  if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)
        -:  449:  {
    #####:  450:    arrow_function_object_size = sizeof (ecma_static_arrow_function_t);
        -:  451:  }
        -:  452:#endif /* ENABLED (JERRY_SNAPSHOT_EXEC) */
        -:  453:
    #####:  454:  ecma_object_t *func_p = ecma_create_object (prototype_obj_p,
        -:  455:                                              arrow_function_object_size,
        -:  456:                                              ECMA_OBJECT_TYPE_FUNCTION);
        -:  457:
    #####:  458:  ecma_arrow_function_t *arrow_func_p = (ecma_arrow_function_t *) func_p;
        -:  459:
    #####:  460:  ECMA_SET_NON_NULL_POINTER_TAG (arrow_func_p->header.u.function.scope_cp, scope_p, 0);
        -:  461:
        -:  462:#if ENABLED (JERRY_SNAPSHOT_EXEC)
    #####:  463:  if ((bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION))
        -:  464:  {
    #####:  465:    arrow_func_p->header.u.function.bytecode_cp = ECMA_NULL_POINTER;
    #####:  466:    ((ecma_static_arrow_function_t *) func_p)->bytecode_p = bytecode_data_p;
        -:  467:  }
        -:  468:  else
        -:  469:  {
        -:  470:#endif /* ENABLED (JERRY_SNAPSHOT_EXEC) */
    #####:  471:    ECMA_SET_INTERNAL_VALUE_POINTER (arrow_func_p->header.u.function.bytecode_cp, bytecode_data_p);
    #####:  472:    ecma_bytecode_ref ((ecma_compiled_code_t *) bytecode_data_p);
        -:  473:#if ENABLED (JERRY_SNAPSHOT_EXEC)
        -:  474:  }
        -:  475:#endif /* ENABLED (JERRY_SNAPSHOT_EXEC) */
        -:  476:
    #####:  477:  arrow_func_p->this_binding = ecma_copy_value_if_not_object (this_binding);
    #####:  478:  arrow_func_p->new_target = ECMA_VALUE_UNDEFINED;
        -:  479:
    #####:  480:  if (JERRY_CONTEXT (current_new_target) != NULL)
        -:  481:  {
    #####:  482:    arrow_func_p->new_target = ecma_make_object_value (JERRY_CONTEXT (current_new_target));
        -:  483:  }
    #####:  484:  return func_p;
        -:  485:} /* ecma_op_create_arrow_function_object */
        -:  486:
        -:  487:#endif /* ENABLED (JERRY_ES2015) */
        -:  488:
        -:  489:/**
        -:  490: * External function object creation operation.
        -:  491: *
        -:  492: * Note:
        -:  493: *      external function object is implementation-defined object type
        -:  494: *      that represent functions implemented in native code, using Embedding API
        -:  495: *
        -:  496: * @return pointer to newly created external function object
        -:  497: */
        -:  498:ecma_object_t *
     2622:  499:ecma_op_create_external_function_object (ecma_external_handler_t handler_cb) /**< pointer to external native handler */
        -:  500:{
     2622:  501:  ecma_object_t *prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  502:
        -:  503:  ecma_object_t *function_obj_p;
     2622:  504:  function_obj_p = ecma_create_object (prototype_obj_p,
        -:  505:                                       sizeof (ecma_extended_object_t),
        -:  506:                                       ECMA_OBJECT_TYPE_EXTERNAL_FUNCTION);
        -:  507:
        -:  508:  /*
        -:  509:   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_EXTERNAL_FUNCTION type.
        -:  510:   *
        -:  511:   * See also: ecma_object_get_class_name
        -:  512:   */
        -:  513:
     2622:  514:  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) function_obj_p;
     2622:  515:  ext_func_obj_p->u.external_handler_cb = handler_cb;
        -:  516:
     2622:  517:  return function_obj_p;
        -:  518:} /* ecma_op_create_external_function_object */
        -:  519:
        -:  520:/**
        -:  521: * Get compiled code of a function object.
        -:  522: *
        -:  523: * @return compiled code
        -:  524: */
        -:  525:inline const ecma_compiled_code_t * JERRY_ATTR_ALWAYS_INLINE
      879:  526:ecma_op_function_get_compiled_code (ecma_extended_object_t *function_p) /**< function pointer */
        -:  527:{
        -:  528:#if ENABLED (JERRY_SNAPSHOT_EXEC)
    #####:  529:  if (function_p->u.function.bytecode_cp != ECMA_NULL_POINTER)
        -:  530:  {
    #####:  531:    return ECMA_GET_INTERNAL_VALUE_POINTER (const ecma_compiled_code_t,
        -:  532:                                            function_p->u.function.bytecode_cp);
        -:  533:  }
        -:  534:  else
        -:  535:  {
    #####:  536:    return ((ecma_static_function_t *) function_p)->bytecode_p;
        -:  537:  }
        -:  538:#else /* !ENABLED (JERRY_SNAPSHOT_EXEC) */
     2189:  539:  return ECMA_GET_INTERNAL_VALUE_POINTER (const ecma_compiled_code_t,
        -:  540:                                          function_p->u.function.bytecode_cp);
        -:  541:#endif /* ENABLED (JERRY_SNAPSHOT_EXEC) */
        -:  542:} /* ecma_op_function_get_compiled_code */
        -:  543:
        -:  544:#if ENABLED (JERRY_ES2015)
        -:  545:/**
        -:  546: * Check whether the given object [[FunctionKind]] internal slot value is "generator".
        -:  547: *
        -:  548: * @return true - if the given object is a generator function
        -:  549: *         false - otherwise
        -:  550: */
        -:  551:bool
    #####:  552:ecma_op_function_is_generator (ecma_object_t *obj_p) /**< object */
        -:  553:{
    #####:  554:  if (ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_FUNCTION
    #####:  555:      && !ecma_get_object_is_builtin (obj_p))
        -:  556:  {
    #####:  557:    ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) obj_p;
    #####:  558:    const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_obj_p);
        -:  559:
    #####:  560:    return (bytecode_data_p->status_flags & CBC_CODE_FLAGS_GENERATOR) != 0;
        -:  561:  }
        -:  562:
    #####:  563:  return false;
        -:  564:} /* ecma_op_function_is_generator */
        -:  565:
        -:  566:#endif /* ENABLED (JERRY_ES2015) */
        -:  567:
        -:  568:/**
        -:  569: * 15.3.5.3 implementation of [[HasInstance]] for Function objects
        -:  570: *
        -:  571: * @return true/false - if arguments are valid
        -:  572: *         error - otherwise
        -:  573: *         Returned value must be freed with ecma_free_value
        -:  574: */
        -:  575:ecma_value_t
    #####:  576:ecma_op_function_has_instance (ecma_object_t *func_obj_p, /**< Function object */
        -:  577:                               ecma_value_t value) /**< argument 'V' */
        -:  578:{
    #####:  579:  JERRY_ASSERT (func_obj_p != NULL
        -:  580:                && !ecma_is_lexical_environment (func_obj_p));
        -:  581:
    #####:  582:  if (!ecma_is_value_object (value))
        -:  583:  {
    #####:  584:    return ECMA_VALUE_FALSE;
        -:  585:  }
        -:  586:
    #####:  587:  while (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION)
        -:  588:  {
    #####:  589:    JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -:  590:
        -:  591:    /* 1. 3. */
    #####:  592:    ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) func_obj_p;
        -:  593:
    #####:  594:    func_obj_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,
        -:  595:                                                             bound_func_p->header.u.bound_function.target_function);
        -:  596:  }
        -:  597:
    #####:  598:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION
        -:  599:                || ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_EXTERNAL_FUNCTION);
        -:  600:
    #####:  601:  ecma_object_t *v_obj_p = ecma_get_object_from_value (value);
        -:  602:
    #####:  603:  ecma_value_t prototype_obj_value = ecma_op_object_get_by_magic_id (func_obj_p,
        -:  604:                                                                     LIT_MAGIC_STRING_PROTOTYPE);
        -:  605:
    #####:  606:  if (ECMA_IS_VALUE_ERROR (prototype_obj_value))
        -:  607:  {
    #####:  608:    return prototype_obj_value;
        -:  609:  }
        -:  610:
    #####:  611:  if (!ecma_is_value_object (prototype_obj_value))
        -:  612:  {
    #####:  613:    ecma_free_value (prototype_obj_value);
    #####:  614:    return ecma_raise_type_error (ECMA_ERR_MSG ("Object expected."));
        -:  615:  }
        -:  616:
    #####:  617:  ecma_object_t *prototype_obj_p = ecma_get_object_from_value (prototype_obj_value);
    #####:  618:  JERRY_ASSERT (prototype_obj_p != NULL);
        -:  619:
        -:  620:#if ENABLED (JERRY_ES2015_BUILTIN_PROXY)
    #####:  621:  ecma_value_t result = ECMA_VALUE_ERROR;
        -:  622:#else /* !ENABLED (JERRY_ES2015_BUILTIN_PROXY) */
    #####:  623:  ecma_value_t result = ECMA_VALUE_FALSE;
        -:  624:#endif /* ENABLED (JERRY_ES2015_BUILTIN_PROXY) */
        -:  625:
        -:  626:  while (true)
    #####:  627:  {
        -:  628:    jmem_cpointer_t v_obj_cp;
        -:  629:#if ENABLED (JERRY_ES2015_BUILTIN_PROXY)
    #####:  630:    if (ECMA_OBJECT_IS_PROXY (v_obj_p))
        -:  631:    {
    #####:  632:      ecma_value_t parent = ecma_proxy_object_get_prototype_of (v_obj_p);
        -:  633:
    #####:  634:      if (ECMA_IS_VALUE_ERROR (parent))
        -:  635:      {
    #####:  636:        break;
        -:  637:      }
        -:  638:
    #####:  639:      v_obj_cp = ecma_proxy_object_prototype_to_cp (parent);
        -:  640:    }
        -:  641:    else
        -:  642:    {
        -:  643:#endif /* ENABLED (JERRY_ES2015_BUILTIN_PROXY) */
    #####:  644:      v_obj_cp = ecma_op_ordinary_object_get_prototype_of (v_obj_p);
        -:  645:#if ENABLED (JERRY_ES2015_BUILTIN_PROXY)
        -:  646:    }
        -:  647:#endif /* ENABLED (JERRY_ES2015_BUILTIN_PROXY) */
        -:  648:
    #####:  649:    if (v_obj_cp == JMEM_CP_NULL)
        -:  650:    {
        -:  651:#if ENABLED (JERRY_ES2015_BUILTIN_PROXY)
    #####:  652:      result = ECMA_VALUE_FALSE;
        -:  653:#endif /* ENABLED (JERRY_ES2015_BUILTIN_PROXY) */
    #####:  654:      break;
        -:  655:    }
        -:  656:
    #####:  657:    v_obj_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, v_obj_cp);
        -:  658:
    #####:  659:    if (v_obj_p == prototype_obj_p)
        -:  660:    {
    #####:  661:      result = ECMA_VALUE_TRUE;
    #####:  662:      break;
        -:  663:    }
        -:  664:  }
        -:  665:
    #####:  666:  ecma_deref_object (prototype_obj_p);
    #####:  667:  return result;
        -:  668:} /* ecma_op_function_has_instance */
        -:  669:
        -:  670:#if ENABLED (JERRY_ES2015)
        -:  671:
        -:  672:/**
        -:  673: * GetSuperConstructor operation for class methods
        -:  674: *
        -:  675: * See also: ECMAScript v6, 12.3.5.2
        -:  676: *
        -:  677: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  678: *         super constructor - otherwise
        -:  679: */
        -:  680:ecma_value_t
    #####:  681:ecma_op_function_get_super_constructor (ecma_object_t *func_obj_p) /**< function object */
        -:  682:{
        -:  683:  ecma_object_t *super_ctor_p;
        -:  684:
        -:  685:#if ENABLED (JERRY_ES2015_BUILTIN_PROXY)
    #####:  686:  if (ECMA_OBJECT_IS_PROXY (func_obj_p))
        -:  687:  {
    #####:  688:    ecma_value_t super_ctor = ecma_proxy_object_get_prototype_of (func_obj_p);
        -:  689:
    #####:  690:    if (ECMA_IS_VALUE_ERROR (super_ctor))
        -:  691:    {
    #####:  692:      return super_ctor;
        -:  693:    }
        -:  694:
    #####:  695:    super_ctor_p = ecma_is_value_null (super_ctor) ? NULL : ecma_get_object_from_value (super_ctor);
        -:  696:  }
        -:  697:  else
        -:  698:  {
        -:  699:#endif /* ENABLED (JERRY_ES2015_BUILTIN_PROXY) */
    #####:  700:    jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (func_obj_p);
    #####:  701:    if (proto_cp == JMEM_CP_NULL)
        -:  702:    {
    #####:  703:      super_ctor_p = NULL;
        -:  704:    }
        -:  705:    else
        -:  706:    {
    #####:  707:      super_ctor_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);
    #####:  708:      ecma_ref_object (super_ctor_p);
        -:  709:    }
        -:  710:#if ENABLED (JERRY_ES2015_BUILTIN_PROXY)
        -:  711:  }
        -:  712:#endif /* ENABLED (JERRY_ES2015_BUILTIN_PROXY) */
        -:  713:
    #####:  714:  if (super_ctor_p == NULL || !ecma_object_is_constructor (super_ctor_p))
        -:  715:  {
    #####:  716:    if (super_ctor_p != NULL)
        -:  717:    {
    #####:  718:      ecma_deref_object (super_ctor_p);
        -:  719:    }
    #####:  720:    return ecma_raise_type_error (ECMA_ERR_MSG ("Super binding must be a constructor."));
        -:  721:  }
        -:  722:
    #####:  723:  return ecma_make_object_value (super_ctor_p);
        -:  724:} /* ecma_op_function_get_super_constructor */
        -:  725:#endif /* ENABLED (JERRY_ES2015) */
        -:  726:
        -:  727:/**
        -:  728: * Ordinary internal method: GetPrototypeFromConstructor (constructor, intrinsicDefaultProto)
        -:  729: *
        -:  730: * See also: ECMAScript v6, 9.1.15
        -:  731: *
        -:  732: * @return NULL - if the operation fail (exception on the global context is raised)
        -:  733: *         pointer to the prototype object - otherwise
        -:  734: */
        -:  735:ecma_object_t *
     1309:  736:ecma_op_get_prototype_from_constructor (ecma_object_t *ctor_obj_p, /**< constructor to get prototype from  */
        -:  737:                                        ecma_builtin_id_t default_proto_id) /**< intrinsicDefaultProto */
        -:  738:{
     1309:  739:  JERRY_ASSERT (ecma_object_is_constructor (ctor_obj_p));
     1309:  740:  JERRY_ASSERT (default_proto_id < ECMA_BUILTIN_ID__COUNT);
        -:  741:
     1309:  742:  ecma_value_t proto = ecma_op_object_get_by_magic_id (ctor_obj_p, LIT_MAGIC_STRING_PROTOTYPE);
        -:  743:
     1309:  744:  if (ECMA_IS_VALUE_ERROR (proto))
        -:  745:  {
    #####:  746:    return NULL;
        -:  747:  }
        -:  748:
        -:  749:  ecma_object_t *proto_obj_p;
        -:  750:
     1309:  751:  if (!ecma_is_value_object (proto))
        -:  752:  {
    #####:  753:    ecma_free_value (proto);
    #####:  754:    proto_obj_p = ecma_builtin_get (default_proto_id);
    #####:  755:    ecma_ref_object (proto_obj_p);
        -:  756:  }
        -:  757:  else
        -:  758:  {
     1309:  759:    proto_obj_p = ecma_get_object_from_value (proto);
        -:  760:  }
        -:  761:
     1309:  762:  return proto_obj_p;
        -:  763:} /* ecma_op_get_prototype_from_constructor */
        -:  764:
        -:  765:/**
        -:  766: * Perform a JavaScript function object method call.
        -:  767: *
        -:  768: * The input function object should be a pure JavaScript method
        -:  769: *
        -:  770: * @return the result of the function call.
        -:  771: */
        -:  772:static ecma_value_t
     5237:  773:ecma_op_function_call_simple (ecma_object_t *func_obj_p, /**< Function object */
        -:  774:                              ecma_value_t this_arg_value, /**< 'this' argument's value */
        -:  775:                              const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  776:                              ecma_length_t arguments_list_len) /**< length of arguments list */
        -:  777:{
     5237:  778:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION);
        -:  779:
     5237:  780:  if (JERRY_UNLIKELY (ecma_get_object_is_builtin (func_obj_p)))
        -:  781:  {
     3927:  782:    return ecma_builtin_dispatch_call (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
        -:  783:  }
        -:  784:
        -:  785:  /* Entering Function Code (ECMA-262 v5, 10.4.3) */
     1310:  786:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_obj_p;
        -:  787:
     1310:  788:  ecma_object_t *scope_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,
        -:  789:                                                                       ext_func_p->u.function.scope_cp);
        -:  790:
        -:  791:  /* 8. */
     1310:  792:  ecma_value_t this_binding = this_arg_value;
     1310:  793:  bool free_this_binding = false;
        -:  794:
     1310:  795:  const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);
     1310:  796:  uint16_t status_flags = bytecode_data_p->status_flags;
        -:  797:
        -:  798:#if ENABLED (JERRY_ES2015)
     1310:  799:  bool is_construct_call = JERRY_CONTEXT (current_new_target) != NULL;
     1310:  800:  if (JERRY_UNLIKELY (status_flags & (CBC_CODE_FLAGS_CLASS_CONSTRUCTOR | CBC_CODE_FLAGS_GENERATOR)))
        -:  801:  {
    #####:  802:    if (!is_construct_call && (status_flags & CBC_CODE_FLAGS_CLASS_CONSTRUCTOR))
        -:  803:    {
    #####:  804:      return ecma_raise_type_error (ECMA_ERR_MSG ("Class constructor cannot be invoked without 'new'."));
        -:  805:    }
        -:  806:
    #####:  807:    if ((status_flags & CBC_CODE_FLAGS_GENERATOR) && is_construct_call)
        -:  808:    {
    #####:  809:      return ecma_raise_type_error (ECMA_ERR_MSG ("Generator functions cannot be invoked with 'new'."));
        -:  810:    }
        -:  811:  }
        -:  812:#endif /* ENABLED (JERRY_ES2015) */
        -:  813:
        -:  814:  /* 1. */
        -:  815:#if ENABLED (JERRY_ES2015)
     1310:  816:  ecma_object_t *old_function_object_p = JERRY_CONTEXT (current_function_obj_p);
        -:  817:
     1310:  818:  if (JERRY_UNLIKELY (status_flags & CBC_CODE_FLAGS_ARROW_FUNCTION))
        -:  819:  {
    #####:  820:    ecma_arrow_function_t *arrow_func_p = (ecma_arrow_function_t *) func_obj_p;
        -:  821:
    #####:  822:    if (ecma_is_value_undefined (arrow_func_p->new_target))
        -:  823:    {
    #####:  824:      JERRY_CONTEXT (current_new_target) = NULL;
        -:  825:    }
        -:  826:    else
        -:  827:    {
    #####:  828:      JERRY_CONTEXT (current_new_target) = ecma_get_object_from_value (arrow_func_p->new_target);
        -:  829:    }
    #####:  830:    this_binding = arrow_func_p->this_binding;
        -:  831:  }
        -:  832:  else
        -:  833:  {
     1310:  834:    JERRY_CONTEXT (current_function_obj_p) = func_obj_p;
        -:  835:#endif /* ENABLED (JERRY_ES2015) */
     1310:  836:    if (!(status_flags & CBC_CODE_FLAGS_STRICT_MODE))
        -:  837:    {
        1:  838:      if (ecma_is_value_undefined (this_binding)
    #####:  839:          || ecma_is_value_null (this_binding))
        -:  840:      {
        -:  841:        /* 2. */
        1:  842:        this_binding = ecma_make_object_value (ecma_builtin_get_global ());
        -:  843:      }
    #####:  844:      else if (!ecma_is_value_object (this_binding))
        -:  845:      {
        -:  846:        /* 3., 4. */
    #####:  847:        this_binding = ecma_op_to_object (this_binding);
    #####:  848:        free_this_binding = true;
        -:  849:
    #####:  850:        JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (this_binding));
        -:  851:      }
        -:  852:    }
        -:  853:#if ENABLED (JERRY_ES2015)
        -:  854:  }
        -:  855:#endif /* ENABLED (JERRY_ES2015) */
        -:  856:
        -:  857:  /* 5. */
        -:  858:  ecma_object_t *local_env_p;
     1310:  859:  if (status_flags & CBC_CODE_FLAGS_LEXICAL_ENV_NOT_NEEDED)
        -:  860:  {
    #####:  861:    local_env_p = scope_p;
        -:  862:  }
        -:  863:  else
        -:  864:  {
     1310:  865:    local_env_p = ecma_create_decl_lex_env (scope_p);
     1310:  866:    if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_IS_ARGUMENTS_NEEDED)
        -:  867:    {
     1310:  868:      ecma_op_create_arguments_object (func_obj_p,
        -:  869:                                       local_env_p,
        -:  870:                                       arguments_list_p,
        -:  871:                                       arguments_list_len,
        -:  872:                                       bytecode_data_p);
        -:  873:    }
        -:  874:#if ENABLED (JERRY_ES2015)
        -:  875:    // ECMAScript v6, 9.2.2.8
     1310:  876:    if (JERRY_UNLIKELY (status_flags & CBC_CODE_FLAGS_CLASS_CONSTRUCTOR))
        -:  877:    {
        -:  878:      ecma_value_t lexical_this;
    #####:  879:      lexical_this = (ECMA_GET_THIRD_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp) ? ECMA_VALUE_UNINITIALIZED
    #####:  880:                                                                                            : this_binding);
    #####:  881:      ecma_op_init_this_binding (local_env_p, lexical_this);
        -:  882:    }
        -:  883:#endif /* ENABLED (JERRY_ES2015) */
        -:  884:  }
        -:  885:
     1310:  886:  ecma_value_t ret_value = vm_run (bytecode_data_p,
        -:  887:                                   this_binding,
        -:  888:                                   local_env_p,
        -:  889:                                   arguments_list_p,
        -:  890:                                   arguments_list_len);
        -:  891:
        -:  892:#if ENABLED (JERRY_ES2015)
     1308:  893:  JERRY_CONTEXT (current_function_obj_p) = old_function_object_p;
        -:  894:
        -:  895:  /* ECMAScript v6, 9.2.2.13 */
     1308:  896:  if (ECMA_GET_THIRD_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))
        -:  897:  {
    #####:  898:    if (!ECMA_IS_VALUE_ERROR (ret_value) && !ecma_is_value_object (ret_value))
        -:  899:    {
    #####:  900:      if (!ecma_is_value_undefined (ret_value))
        -:  901:      {
    #####:  902:        ecma_free_value (ret_value);
    #####:  903:        ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("Derived constructors may only return object or undefined."));
        -:  904:      }
        -:  905:      else
        -:  906:      {
    #####:  907:        ret_value = ecma_op_get_this_binding (local_env_p);
        -:  908:      }
        -:  909:    }
        -:  910:  }
        -:  911:
        -:  912:#endif /* ENABLED (JERRY_ES2015) */
        -:  913:
     1308:  914:  if (!(status_flags & CBC_CODE_FLAGS_LEXICAL_ENV_NOT_NEEDED))
        -:  915:  {
     1308:  916:    ecma_deref_object (local_env_p);
        -:  917:  }
        -:  918:
     1308:  919:  if (JERRY_UNLIKELY (free_this_binding))
        -:  920:  {
    #####:  921:    ecma_free_value (this_binding);
        -:  922:  }
        -:  923:
     1308:  924:  return ret_value;
        -:  925:} /* ecma_op_function_call_simple */
        -:  926:
        -:  927:/**
        -:  928: * Perform a native C method call which was registered via the API.
        -:  929: *
        -:  930: * @return the result of the function call.
        -:  931: */
        -:  932:static ecma_value_t JERRY_ATTR_NOINLINE
     1308:  933:ecma_op_function_call_external (ecma_object_t *func_obj_p, /**< Function object */
        -:  934:                                ecma_value_t this_arg_value, /**< 'this' argument's value */
        -:  935:                                const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  936:                                ecma_length_t arguments_list_len) /**< length of arguments list */
        -:  937:
        -:  938:{
     1308:  939:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_EXTERNAL_FUNCTION);
     1308:  940:  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) func_obj_p;
     1308:  941:  JERRY_ASSERT (ext_func_obj_p->u.external_handler_cb != NULL);
        -:  942:
     1308:  943:  ecma_value_t ret_value = ext_func_obj_p->u.external_handler_cb (ecma_make_object_value (func_obj_p),
        -:  944:                                                                  this_arg_value,
        -:  945:                                                                  arguments_list_p,
        -:  946:                                                                  arguments_list_len);
     1308:  947:  if (JERRY_UNLIKELY (ecma_is_value_error_reference (ret_value)))
        -:  948:  {
    #####:  949:    ecma_raise_error_from_error_reference (ret_value);
    #####:  950:    return ECMA_VALUE_ERROR;
        -:  951:  }
        -:  952:
        -:  953:#if ENABLED (JERRY_DEBUGGER)
        -:  954:  JERRY_DEBUGGER_CLEAR_FLAGS (JERRY_DEBUGGER_VM_EXCEPTION_THROWN);
        -:  955:#endif /* ENABLED (JERRY_DEBUGGER) */
     1308:  956:  return ret_value;
        -:  957:} /* ecma_op_function_call_external */
        -:  958:
        -:  959:/**
        -:  960: * Append the bound arguments into the given collection
        -:  961: *
        -:  962: * Note:
        -:  963: *       - The whole bound chain is resolved
        -:  964: *       - The first element of the collection contains the bounded this value
        -:  965: *
        -:  966: * @return target function of the bound function
        -:  967: */
        -:  968:JERRY_ATTR_NOINLINE static ecma_object_t *
    #####:  969:ecma_op_bound_function_get_argument_list (ecma_object_t *func_obj_p, /**< bound bunction object */
        -:  970:                                          ecma_collection_t *list_p) /**< list of arguments */
        -:  971:{
    #####:  972:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -:  973:
    #####:  974:  ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) func_obj_p;
        -:  975:
    #####:  976:  func_obj_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,
        -:  977:                                                           bound_func_p->header.u.bound_function.target_function);
        -:  978:
    #####:  979:  ecma_value_t args_len_or_this = bound_func_p->header.u.bound_function.args_len_or_this;
        -:  980:
    #####:  981:  ecma_length_t args_length = 1;
        -:  982:
    #####:  983:  if (ecma_is_value_integer_number (args_len_or_this))
        -:  984:  {
    #####:  985:    args_length = (ecma_length_t) ecma_get_integer_from_value (args_len_or_this);
        -:  986:  }
        -:  987:
        -:  988:  /* 5. */
    #####:  989:  if (args_length != 1)
        -:  990:  {
    #####:  991:    const ecma_value_t *args_p = (const ecma_value_t *) (bound_func_p + 1);
    #####:  992:    list_p->buffer_p[0] = *args_p;
        -:  993:
    #####:  994:    if (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION)
        -:  995:    {
    #####:  996:      func_obj_p = ecma_op_bound_function_get_argument_list (func_obj_p, list_p);
        -:  997:    }
    #####:  998:    ecma_collection_append (list_p, args_p + 1, args_length - 1);
        -:  999:  }
        -: 1000:  else
        -: 1001:  {
    #####: 1002:    list_p->buffer_p[0] = args_len_or_this;
        -: 1003:  }
        -: 1004:
    #####: 1005:  return func_obj_p;
        -: 1006:} /* ecma_op_bound_function_get_argument_list */
        -: 1007:
        -: 1008:/**
        -: 1009: * [[Call]] internal method for bound function objects
        -: 1010: *
        -: 1011: * @return ecma value
        -: 1012: *         Returned value must be freed with ecma_free_value
        -: 1013: */
        -: 1014:static ecma_value_t JERRY_ATTR_NOINLINE
    #####: 1015:ecma_op_function_call_bound (ecma_object_t *func_obj_p, /**< Function object */
        -: 1016:                             const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1017:                             ecma_length_t arguments_list_len) /**< length of arguments list */
        -: 1018:{
    #####: 1019:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -: 1020:
    #####: 1021:  JERRY_CONTEXT (status_flags) &= (uint32_t) ~ECMA_STATUS_DIRECT_EVAL;
        -: 1022:
    #####: 1023:  ecma_collection_t *bound_arg_list_p = ecma_new_collection ();
    #####: 1024:  ecma_collection_push_back (bound_arg_list_p, ECMA_VALUE_EMPTY);
        -: 1025:
    #####: 1026:  ecma_object_t *target_obj_p = ecma_op_bound_function_get_argument_list (func_obj_p, bound_arg_list_p);
        -: 1027:
    #####: 1028:  ecma_collection_append (bound_arg_list_p, arguments_list_p, arguments_list_len);
        -: 1029:
    #####: 1030:  JERRY_ASSERT (!ecma_is_value_empty (bound_arg_list_p->buffer_p[0]));
        -: 1031:
    #####: 1032:  ecma_value_t ret_value = ecma_op_function_call (target_obj_p,
    #####: 1033:                                                  bound_arg_list_p->buffer_p[0],
    #####: 1034:                                                  bound_arg_list_p->buffer_p + 1,
    #####: 1035:                                                  (ecma_length_t) (bound_arg_list_p->item_count - 1));
        -: 1036:
    #####: 1037:  ecma_collection_destroy (bound_arg_list_p);
        -: 1038:
    #####: 1039:  return ret_value;
        -: 1040:} /* ecma_op_function_call_bound */
        -: 1041:
        -: 1042:/**
        -: 1043: * [[Call]] implementation for Function objects,
        -: 1044: * created through 13.2 (ECMA_OBJECT_TYPE_FUNCTION)
        -: 1045: * or 15.3.4.5 (ECMA_OBJECT_TYPE_BOUND_FUNCTION),
        -: 1046: * and for built-in Function objects
        -: 1047: * from section 15 (ECMA_OBJECT_TYPE_FUNCTION).
        -: 1048: *
        -: 1049: * @return ecma value
        -: 1050: *         Returned value must be freed with ecma_free_value
        -: 1051: */
        -: 1052:ecma_value_t
     6545: 1053:ecma_op_function_call (ecma_object_t *func_obj_p, /**< Function object */
        -: 1054:                       ecma_value_t this_arg_value, /**< 'this' argument's value */
        -: 1055:                       const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1056:                       ecma_length_t arguments_list_len) /**< length of arguments list */
        -: 1057:{
     6545: 1058:  JERRY_ASSERT (func_obj_p != NULL
        -: 1059:                && !ecma_is_lexical_environment (func_obj_p));
     6545: 1060:  JERRY_ASSERT (ecma_op_object_is_callable (func_obj_p));
        -: 1061:
     6545: 1062:  ECMA_CHECK_STACK_USAGE ();
        -: 1063:
     6545: 1064:  const ecma_object_type_t type = ecma_get_object_type (func_obj_p);
        -: 1065:
        -: 1066:#if ENABLED (JERRY_ES2015_BUILTIN_PROXY)
     6545: 1067:  if (ECMA_OBJECT_TYPE_IS_PROXY (type))
        -: 1068:  {
    #####: 1069:    return ecma_proxy_object_call (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
        -: 1070:  }
        -: 1071:#endif /* ENABLED (JERRY_ES2015_BUILTIN_PROXY) */
        -: 1072:
        -: 1073:#if ENABLED (JERRY_ES2015)
     6545: 1074:  ecma_object_t *old_new_target_p = JERRY_CONTEXT (current_new_target);
     6545: 1075:  if (JERRY_UNLIKELY (!(JERRY_CONTEXT (status_flags) & ECMA_STATUS_DIRECT_EVAL)))
        -: 1076:  {
     5236: 1077:    JERRY_CONTEXT (current_new_target) = NULL;
        -: 1078:  }
        -: 1079:#endif /* ENABLED (JERRY_ES2015) */
        -: 1080:
        -: 1081:  ecma_value_t result;
        -: 1082:
     6545: 1083:  if (JERRY_LIKELY (type == ECMA_OBJECT_TYPE_FUNCTION))
        -: 1084:  {
     5237: 1085:    result = ecma_op_function_call_simple (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
        -: 1086:  }
     1308: 1087:  else if (type == ECMA_OBJECT_TYPE_EXTERNAL_FUNCTION)
        -: 1088:  {
     1308: 1089:    result = ecma_op_function_call_external (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
        -: 1090:  }
        -: 1091:  else
        -: 1092:  {
    #####: 1093:    result = ecma_op_function_call_bound (func_obj_p, arguments_list_p, arguments_list_len);
        -: 1094:  }
        -: 1095:
        -: 1096:#if ENABLED (JERRY_ES2015)
     6542: 1097:  JERRY_CONTEXT (current_new_target) = old_new_target_p;
        -: 1098:#endif /* ENABLED (JERRY_ES2015) */
        -: 1099:
     6542: 1100:  return result;
        -: 1101:} /* ecma_op_function_call */
        -: 1102:
        -: 1103:/**
        -: 1104: * [[Construct]] internal method for bound function objects
        -: 1105: *
        -: 1106: * @return ecma value
        -: 1107: *         Returned value must be freed with ecma_free_value
        -: 1108: */
        -: 1109:static ecma_value_t JERRY_ATTR_NOINLINE
    #####: 1110:ecma_op_function_construct_bound (ecma_object_t *func_obj_p, /**< Function object */
        -: 1111:                                  ecma_object_t *new_target_p, /**< new target */
        -: 1112:                                  const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1113:                                  ecma_length_t arguments_list_len) /**< length of arguments list */
        -: 1114:{
    #####: 1115:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -: 1116:
    #####: 1117:  ecma_collection_t *bound_arg_list_p = ecma_new_collection ();
    #####: 1118:  ecma_collection_push_back (bound_arg_list_p, ECMA_VALUE_EMPTY);
        -: 1119:
    #####: 1120:  ecma_object_t *target_obj_p = ecma_op_bound_function_get_argument_list (func_obj_p, bound_arg_list_p);
        -: 1121:
    #####: 1122:  ecma_collection_append (bound_arg_list_p, arguments_list_p, arguments_list_len);
        -: 1123:
    #####: 1124:  if (func_obj_p == new_target_p)
        -: 1125:  {
    #####: 1126:    new_target_p = target_obj_p;
        -: 1127:  }
        -: 1128:
    #####: 1129:  ecma_value_t ret_value = ecma_op_function_construct (target_obj_p,
        -: 1130:                                                       new_target_p,
    #####: 1131:                                                       bound_arg_list_p->buffer_p + 1,
    #####: 1132:                                                       (ecma_length_t) (bound_arg_list_p->item_count - 1));
        -: 1133:
    #####: 1134:  ecma_collection_destroy (bound_arg_list_p);
        -: 1135:
    #####: 1136:  return ret_value;
        -: 1137:} /* ecma_op_function_construct_bound */
        -: 1138:
        -: 1139:/**
        -: 1140: * [[Construct]] internal method for external function objects
        -: 1141: *
        -: 1142: * @return ecma value
        -: 1143: *         Returned value must be freed with ecma_free_value
        -: 1144: */
        -: 1145:static ecma_value_t JERRY_ATTR_NOINLINE
    #####: 1146:ecma_op_function_construct_external (ecma_object_t *func_obj_p, /**< Function object */
        -: 1147:                                     ecma_object_t *new_target_p, /**< new target */
        -: 1148:                                     const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1149:                                     ecma_length_t arguments_list_len) /**< length of arguments list */
        -: 1150:{
    #####: 1151:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_EXTERNAL_FUNCTION);
        -: 1152:
    #####: 1153:  ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (new_target_p, ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -: 1154:
    #####: 1155:  if (JERRY_UNLIKELY (proto_p == NULL))
        -: 1156:  {
    #####: 1157:    return ECMA_VALUE_ERROR;
        -: 1158:  }
        -: 1159:
    #####: 1160:  ecma_object_t *new_this_obj_p = ecma_create_object (proto_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####: 1161:  ecma_value_t this_arg = ecma_make_object_value (new_this_obj_p);
    #####: 1162:  ecma_deref_object (proto_p);
        -: 1163:
        -: 1164:#if ENABLED (JERRY_ES2015)
    #####: 1165:  ecma_object_t *old_new_target_p = JERRY_CONTEXT (current_new_target);
    #####: 1166:  JERRY_CONTEXT (current_new_target) = new_target_p;
        -: 1167:#endif /* ENABLED (JERRY_ES2015) */
        -: 1168:
    #####: 1169:  ecma_value_t ret_value = ecma_op_function_call_external (func_obj_p, this_arg, arguments_list_p, arguments_list_len);
        -: 1170:
        -: 1171:#if ENABLED (JERRY_ES2015)
    #####: 1172:  JERRY_CONTEXT (current_new_target) = old_new_target_p;
        -: 1173:#endif /* ENABLED (JERRY_ES2015) */
        -: 1174:
    #####: 1175:  if (ECMA_IS_VALUE_ERROR (ret_value) || ecma_is_value_object (ret_value))
        -: 1176:  {
    #####: 1177:    ecma_deref_object (new_this_obj_p);
    #####: 1178:    return ret_value;
        -: 1179:  }
        -: 1180:
    #####: 1181:  ecma_free_value (ret_value);
        -: 1182:
    #####: 1183:  return this_arg;
        -: 1184:} /* ecma_op_function_construct_external */
        -: 1185:
        -: 1186:/**
        -: 1187: * General [[Construct]] implementation function objects
        -: 1188: *
        -: 1189: * See also: ECMAScript v6, 9.2.2
        -: 1190: *
        -: 1191: * @return ecma value
        -: 1192: *         Returned value must be freed with ecma_free_value
        -: 1193: */
        -: 1194:ecma_value_t
     1311: 1195:ecma_op_function_construct (ecma_object_t *func_obj_p, /**< Function object */
        -: 1196:                            ecma_object_t *new_target_p, /**< new target */
        -: 1197:                            const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1198:                            ecma_length_t arguments_list_len) /**< length of arguments list */
        -: 1199:{
     1311: 1200:  JERRY_ASSERT (func_obj_p != NULL
        -: 1201:                && !ecma_is_lexical_environment (func_obj_p));
        -: 1202:
     1311: 1203:  const ecma_object_type_t type = ecma_get_object_type (func_obj_p);
        -: 1204:
        -: 1205:#if ENABLED (JERRY_ES2015_BUILTIN_PROXY)
     1311: 1206:  if (ECMA_OBJECT_TYPE_IS_PROXY (type))
        -: 1207:  {
    #####: 1208:    return ecma_proxy_object_construct (func_obj_p,
        -: 1209:                                        new_target_p,
        -: 1210:                                        arguments_list_p,
        -: 1211:                                        arguments_list_len);
        -: 1212:  }
        -: 1213:#endif /* ENABLED (JERRY_ES2015_BUILTIN_PROXY) */
        -: 1214:
     1311: 1215:  if (JERRY_UNLIKELY (type == ECMA_OBJECT_TYPE_BOUND_FUNCTION))
        -: 1216:  {
    #####: 1217:    return ecma_op_function_construct_bound (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1218:  }
        -: 1219:
     1311: 1220:  if (JERRY_UNLIKELY (type == ECMA_OBJECT_TYPE_EXTERNAL_FUNCTION))
        -: 1221:  {
    #####: 1222:    return ecma_op_function_construct_external (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1223:  }
        -: 1224:
     1311: 1225:  JERRY_ASSERT (type == ECMA_OBJECT_TYPE_FUNCTION);
        -: 1226:
     1311: 1227:  if (JERRY_UNLIKELY (ecma_get_object_is_builtin (func_obj_p)))
        -: 1228:  {
     1311: 1229:    return ecma_builtin_dispatch_construct (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1230:  }
        -: 1231:
    #####: 1232:  ecma_object_t *new_this_obj_p = NULL;
        -: 1233:  ecma_value_t this_arg;
    #####: 1234:  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) func_obj_p;
    #####: 1235:  const ecma_compiled_code_t *byte_code_p = ecma_op_function_get_compiled_code (ext_func_obj_p);
        -: 1236:
    #####: 1237:  if (byte_code_p->status_flags & (CBC_CODE_FLAGS_ARROW_FUNCTION | CBC_CODE_FLAGS_ACCESSOR))
        -: 1238:  {
    #####: 1239:    if (byte_code_p->status_flags & CBC_CODE_FLAGS_ARROW_FUNCTION)
        -: 1240:    {
    #####: 1241:      return ecma_raise_type_error (ECMA_ERR_MSG ("Arrow functions have no constructor."));
        -: 1242:    }
        -: 1243:
    #####: 1244:    return ecma_raise_type_error (ECMA_ERR_MSG ("Expected a constructor."));
        -: 1245:  }
        -: 1246:
        -: 1247:#if ENABLED (JERRY_ES2015)
        -: 1248:  /* 6. */
    #####: 1249:  ecma_object_t *old_new_target_p = JERRY_CONTEXT (current_new_target);
    #####: 1250:  JERRY_CONTEXT (current_new_target) = new_target_p;
        -: 1251:
        -: 1252:  /* 5. */
    #####: 1253:  if (!ECMA_GET_THIRD_BIT_FROM_POINTER_TAG (ext_func_obj_p->u.function.scope_cp))
        -: 1254:  {
        -: 1255:#endif /* ENABLED (JERRY_ES2015) */
        -: 1256:    /* 5.a */
    #####: 1257:    ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (new_target_p, ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -: 1258:
        -: 1259:    /* 5.b */
    #####: 1260:    if (JERRY_UNLIKELY (proto_p == NULL))
        -: 1261:    {
    #####: 1262:      return ECMA_VALUE_ERROR;
        -: 1263:    }
        -: 1264:
    #####: 1265:    new_this_obj_p = ecma_create_object (proto_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####: 1266:    ecma_deref_object (proto_p);
    #####: 1267:    this_arg = ecma_make_object_value (new_this_obj_p);
        -: 1268:#if ENABLED (JERRY_ES2015)
        -: 1269:  }
        -: 1270:  else
        -: 1271:  {
    #####: 1272:    this_arg = ECMA_VALUE_UNDEFINED;
        -: 1273:  }
        -: 1274:#endif /* ENABLED (JERRY_ES2015) */
        -: 1275:
    #####: 1276:  ecma_value_t ret_value = ecma_op_function_call_simple (func_obj_p, this_arg, arguments_list_p, arguments_list_len);
        -: 1277:
        -: 1278:#if ENABLED (JERRY_ES2015)
    #####: 1279:  JERRY_CONTEXT (current_new_target) = old_new_target_p;
        -: 1280:#endif /* ENABLED (JERRY_ES2015) */
        -: 1281:
        -: 1282:  /* 13.a */
    #####: 1283:  if (ECMA_IS_VALUE_ERROR (ret_value) || ecma_is_value_object (ret_value))
        -: 1284:  {
        -: 1285:#if ENABLED (JERRY_ES2015)
    #####: 1286:    if (new_this_obj_p != NULL)
        -: 1287:    {
    #####: 1288:      ecma_deref_object (new_this_obj_p);
        -: 1289:    }
        -: 1290:#else /* !ENABLED (JERRY_ES2015) */
    #####: 1291:    ecma_deref_object (new_this_obj_p);
        -: 1292:#endif /* ENABLED (JERRY_ES2015) */
    #####: 1293:    return ret_value;
        -: 1294:  }
        -: 1295:
        -: 1296:  /* 13.b */
    #####: 1297:  ecma_free_value (ret_value);
    #####: 1298:  return this_arg;
        -: 1299:} /* ecma_op_function_construct */
        -: 1300:
        -: 1301:/**
        -: 1302: * Lazy instantiation of 'prototype' property for non-builtin and external functions
        -: 1303: *
        -: 1304: * @return pointer to newly instantiated property
        -: 1305: */
        -: 1306:static ecma_property_t *
    #####: 1307:ecma_op_lazy_instantiate_prototype_object (ecma_object_t *object_p) /**< the function object */
        -: 1308:{
    #####: 1309:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION
        -: 1310:                || ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_EXTERNAL_FUNCTION);
        -: 1311:
        -: 1312:  /* ECMA-262 v5, 13.2, 16-18 */
        -: 1313:
    #####: 1314:  ecma_object_t *proto_object_p = NULL;
    #####: 1315:  bool init_constructor = true;
        -: 1316:
        -: 1317:#if ENABLED (JERRY_ES2015)
    #####: 1318:  if (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION)
        -: 1319:  {
    #####: 1320:    const ecma_compiled_code_t *byte_code_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) object_p);
        -: 1321:
    #####: 1322:    if (byte_code_p->status_flags & CBC_CODE_FLAGS_GENERATOR)
        -: 1323:    {
    #####: 1324:      proto_object_p = ecma_create_object (ecma_builtin_get (ECMA_BUILTIN_ID_GENERATOR_PROTOTYPE),
        -: 1325:                                           0,
        -: 1326:                                           ECMA_OBJECT_TYPE_GENERAL);
    #####: 1327:      init_constructor = false;
        -: 1328:    }
    #####: 1329:    else if (byte_code_p->status_flags & (CBC_CODE_FLAGS_ARROW_FUNCTION | CBC_CODE_FLAGS_ACCESSOR))
        -: 1330:    {
    #####: 1331:      return NULL;
        -: 1332:    }
        -: 1333:  }
        -: 1334:#endif /* ENABLED (JERRY_ES2015) */
        -: 1335:
        -: 1336:#if ENABLED (JERRY_ES2015)
    #####: 1337:  if (proto_object_p == NULL)
        -: 1338:#endif /* ENABLED (JERRY_ES2015) */
        -: 1339:  {
    #####: 1340:    proto_object_p = ecma_op_create_object_object_noarg ();
        -: 1341:  }
        -: 1342:
        -: 1343:  /* 17. */
    #####: 1344:  if (init_constructor)
        -: 1345:  {
        -: 1346:    ecma_property_value_t *constructor_prop_value_p;
    #####: 1347:    constructor_prop_value_p = ecma_create_named_data_property (proto_object_p,
        -: 1348:                                                                ecma_get_magic_string (LIT_MAGIC_STRING_CONSTRUCTOR),
        -: 1349:                                                                ECMA_PROPERTY_CONFIGURABLE_WRITABLE,
        -: 1350:                                                                NULL);
        -: 1351:
    #####: 1352:    constructor_prop_value_p->value = ecma_make_object_value (object_p);
        -: 1353:  }
        -: 1354:
        -: 1355:  /* 18. */
    #####: 1356:  ecma_property_t *prototype_prop_p;
        -: 1357:  ecma_property_value_t *prototype_prop_value_p;
    #####: 1358:  prototype_prop_value_p = ecma_create_named_data_property (object_p,
        -: 1359:                                                            ecma_get_magic_string (LIT_MAGIC_STRING_PROTOTYPE),
        -: 1360:                                                            ECMA_PROPERTY_FLAG_WRITABLE,
        -: 1361:                                                            &prototype_prop_p);
        -: 1362:
    #####: 1363:  prototype_prop_value_p->value = ecma_make_object_value (proto_object_p);
        -: 1364:
    #####: 1365:  ecma_deref_object (proto_object_p);
        -: 1366:
    #####: 1367:  return prototype_prop_p;
        -: 1368:} /* ecma_op_lazy_instantiate_prototype_object */
        -: 1369:
        -: 1370:/**
        -: 1371: * Lazy instantiation of non-builtin ecma function object's properties
        -: 1372: *
        -: 1373: * Warning:
        -: 1374: *         Only non-configurable properties could be instantiated lazily in this function,
        -: 1375: *         as configurable properties could be deleted and it would be incorrect
        -: 1376: *         to reinstantiate them in the function in second time.
        -: 1377: *
        -: 1378: * @return pointer to newly instantiated property, if a property was instantiated,
        -: 1379: *         NULL - otherwise
        -: 1380: */
        -: 1381:ecma_property_t *
    #####: 1382:ecma_op_function_try_to_lazy_instantiate_property (ecma_object_t *object_p, /**< the function object */
        -: 1383:                                                   ecma_string_t *property_name_p) /**< property name */
        -: 1384:{
    #####: 1385:  JERRY_ASSERT (!ecma_get_object_is_builtin (object_p));
        -: 1386:
        -: 1387:#if ENABLED (JERRY_ES2015)
    #####: 1388:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_LENGTH))
        -: 1389:  {
    #####: 1390:    ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
    #####: 1391:    if (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))
        -: 1392:    {
        -: 1393:      /* Initialize 'length' property */
    #####: 1394:      const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);
        -: 1395:      uint32_t len;
    #####: 1396:      if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)
        -: 1397:      {
    #####: 1398:        cbc_uint16_arguments_t *args_p = (cbc_uint16_arguments_t *) bytecode_data_p;
    #####: 1399:        len = args_p->argument_end;
        -: 1400:      }
        -: 1401:      else
        -: 1402:      {
    #####: 1403:        cbc_uint8_arguments_t *args_p = (cbc_uint8_arguments_t *) bytecode_data_p;
    #####: 1404:        len = args_p->argument_end;
        -: 1405:      }
        -: 1406:
        -: 1407:      /* Set tag bit to represent initialized 'length' property */
    #####: 1408:      ECMA_SET_FIRST_BIT_TO_POINTER_TAG (ext_func_p->u.function.scope_cp);
    #####: 1409:      ecma_property_t *value_prop_p;
    #####: 1410:      ecma_property_value_t *value_p = ecma_create_named_data_property (object_p,
        -: 1411:                                                                        property_name_p,
        -: 1412:                                                                        ECMA_PROPERTY_FLAG_CONFIGURABLE,
        -: 1413:                                                                        &value_prop_p);
    #####: 1414:      value_p->value = ecma_make_uint32_value (len);
    #####: 1415:      return value_prop_p;
        -: 1416:    }
        -: 1417:
    #####: 1418:    return NULL;
        -: 1419:  }
        -: 1420:#endif /* ENABLED (JERRY_ES2015) */
        -: 1421:
    #####: 1422:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_PROTOTYPE)
    #####: 1423:      && ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION)
        -: 1424:  {
    #####: 1425:    return ecma_op_lazy_instantiate_prototype_object (object_p);
        -: 1426:  }
        -: 1427:
    #####: 1428:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_CALLER)
    #####: 1429:      || ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_ARGUMENTS))
        -: 1430:  {
        -: 1431:    const ecma_compiled_code_t *bytecode_data_p;
    #####: 1432:    bytecode_data_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) object_p);
        -: 1433:
        -: 1434:#if ENABLED (JERRY_ES2015)
    #####: 1435:    if (!(bytecode_data_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE))
        -: 1436:    {
    #####: 1437:      ecma_property_t *value_prop_p;
        -: 1438:      /* The property_name_p argument contans the name. */
    #####: 1439:      ecma_property_value_t *value_p = ecma_create_named_data_property (object_p,
        -: 1440:                                                                        property_name_p,
        -: 1441:                                                                        ECMA_PROPERTY_FIXED,
        -: 1442:                                                                        &value_prop_p);
    #####: 1443:      value_p->value = ECMA_VALUE_NULL;
    #####: 1444:      return value_prop_p;
        -: 1445:    }
        -: 1446:#else /* !ENABLED (JERRY_ES2015) */
    #####: 1447:    if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE)
        -: 1448:    {
    #####: 1449:      ecma_object_t *thrower_p = ecma_builtin_get (ECMA_BUILTIN_ID_TYPE_ERROR_THROWER);
        -: 1450:
        -: 1451:      ecma_property_t *caller_prop_p;
        -: 1452:      /* The property_name_p argument contans the name. */
    #####: 1453:      ecma_create_named_accessor_property (object_p,
        -: 1454:                                           property_name_p,
        -: 1455:                                           thrower_p,
        -: 1456:                                           thrower_p,
        -: 1457:                                           ECMA_PROPERTY_FIXED,
        -: 1458:                                           &caller_prop_p);
    #####: 1459:      return caller_prop_p;
        -: 1460:    }
        -: 1461:#endif /* ENABLED (JERRY_ES2015) */
        -: 1462:
        -: 1463:  }
        -: 1464:
    #####: 1465:  return NULL;
        -: 1466:} /* ecma_op_function_try_to_lazy_instantiate_property */
        -: 1467:
        -: 1468:/**
        -: 1469: * Create specification defined non-configurable properties for external functions.
        -: 1470: *
        -: 1471: * See also:
        -: 1472: *          ECMA-262 v5, 15.3.4.5
        -: 1473: *
        -: 1474: * @return pointer property, if one was instantiated,
        -: 1475: *         NULL - otherwise.
        -: 1476: */
        -: 1477:ecma_property_t *
     5236: 1478:ecma_op_external_function_try_to_lazy_instantiate_property (ecma_object_t *object_p, /**< object */
        -: 1479:                                                            ecma_string_t *property_name_p) /**< property's name */
        -: 1480:{
     5236: 1481:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_EXTERNAL_FUNCTION);
        -: 1482:
     5236: 1483:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_PROTOTYPE))
        -: 1484:  {
    #####: 1485:    return ecma_op_lazy_instantiate_prototype_object (object_p);
        -: 1486:  }
        -: 1487:
     5236: 1488:  return NULL;
        -: 1489:} /* ecma_op_external_function_try_to_lazy_instantiate_property */
        -: 1490:
        -: 1491:/**
        -: 1492: * Create specification defined non-configurable properties for bound functions.
        -: 1493: *
        -: 1494: * See also:
        -: 1495: *          ECMA-262 v5, 15.3.4.5
        -: 1496: *
        -: 1497: * @return pointer property, if one was instantiated,
        -: 1498: *         NULL - otherwise.
        -: 1499: */
        -: 1500:ecma_property_t *
    #####: 1501:ecma_op_bound_function_try_to_lazy_instantiate_property (ecma_object_t *object_p, /**< object */
        -: 1502:                                                         ecma_string_t *property_name_p) /**< property's name */
        -: 1503:{
    #####: 1504:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -: 1505:
    #####: 1506:  if (ecma_string_is_length (property_name_p))
        -: 1507:  {
    #####: 1508:    ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) object_p;
    #####: 1509:    ecma_value_t args_len_or_this = bound_func_p->header.u.bound_function.args_len_or_this;
    #####: 1510:    ecma_integer_value_t length = 0;
    #####: 1511:    ecma_integer_value_t args_length = 1;
        -: 1512:    uint8_t length_attributes;
        -: 1513:
    #####: 1514:    if (ecma_is_value_integer_number (args_len_or_this))
        -: 1515:    {
    #####: 1516:      args_length = ecma_get_integer_from_value (args_len_or_this);
        -: 1517:    }
        -: 1518:
        -: 1519:#if ENABLED (JERRY_ES2015)
    #####: 1520:    if (ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (bound_func_p->header.u.bound_function.target_function))
        -: 1521:    {
    #####: 1522:      return NULL;
        -: 1523:    }
        -: 1524:
    #####: 1525:    length_attributes = ECMA_PROPERTY_FLAG_CONFIGURABLE;
    #####: 1526:    length = bound_func_p->target_length - (args_length - 1);
        -: 1527:
        -: 1528:    /* Set tag bit to represent initialized 'length' property */
    #####: 1529:    ECMA_SET_FIRST_BIT_TO_POINTER_TAG (bound_func_p->header.u.bound_function.target_function);
        -: 1530:#else /* !ENABLED (JERRY_ES2015) */
    #####: 1531:    length_attributes = ECMA_PROPERTY_FIXED;
        -: 1532:
        -: 1533:    ecma_object_t *target_func_p;
    #####: 1534:    target_func_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,
        -: 1535:                                                                bound_func_p->header.u.bound_function.target_function);
        -: 1536:
    #####: 1537:    if (ecma_object_get_class_name (target_func_p) == LIT_MAGIC_STRING_FUNCTION_UL)
        -: 1538:    {
        -: 1539:      /* The property_name_p argument contains the 'length' string. */
    #####: 1540:      ecma_value_t get_len_value = ecma_op_object_get (target_func_p, property_name_p);
        -: 1541:
    #####: 1542:      JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (get_len_value));
    #####: 1543:      JERRY_ASSERT (ecma_is_value_integer_number (get_len_value));
        -: 1544:
    #####: 1545:      length = ecma_get_integer_from_value (get_len_value) - (args_length - 1);
        -: 1546:    }
        -: 1547:#endif /* ENABLED (JERRY_ES2015) */
        -: 1548:
    #####: 1549:    if (length < 0)
        -: 1550:    {
    #####: 1551:      length = 0;
        -: 1552:    }
        -: 1553:
    #####: 1554:    ecma_property_t *len_prop_p;
    #####: 1555:    ecma_property_value_t *len_prop_value_p = ecma_create_named_data_property (object_p,
        -: 1556:                                                                               property_name_p,
        -: 1557:                                                                               length_attributes,
        -: 1558:                                                                               &len_prop_p);
        -: 1559:
    #####: 1560:    len_prop_value_p->value = ecma_make_integer_value (length);
    #####: 1561:    return len_prop_p;
        -: 1562:  }
        -: 1563:
    #####: 1564:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_CALLER)
    #####: 1565:      || ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_ARGUMENTS))
        -: 1566:  {
    #####: 1567:    ecma_object_t *thrower_p = ecma_builtin_get (ECMA_BUILTIN_ID_TYPE_ERROR_THROWER);
        -: 1568:
    #####: 1569:    ecma_property_t *caller_prop_p;
        -: 1570:    /* The string_p argument contans the name. */
    #####: 1571:    ecma_create_named_accessor_property (object_p,
        -: 1572:                                         property_name_p,
        -: 1573:                                         thrower_p,
        -: 1574:                                         thrower_p,
        -: 1575:                                         ECMA_PROPERTY_FIXED,
        -: 1576:                                         &caller_prop_p);
    #####: 1577:    return caller_prop_p;
        -: 1578:  }
        -: 1579:
    #####: 1580:  return NULL;
        -: 1581:} /* ecma_op_bound_function_try_to_lazy_instantiate_property */
        -: 1582:
        -: 1583:/**
        -: 1584: * List names of a Function object's lazy instantiated properties,
        -: 1585: * adding them to corresponding string collections
        -: 1586: *
        -: 1587: * See also:
        -: 1588: *          ecma_op_function_try_to_lazy_instantiate_property
        -: 1589: */
        -: 1590:void
    #####: 1591:ecma_op_function_list_lazy_property_names (ecma_object_t *object_p, /**< functionobject */
        -: 1592:                                           uint32_t opts, /**< listing options using flags
        -: 1593:                                                           *   from ecma_list_properties_options_t */
        -: 1594:                                           ecma_collection_t *main_collection_p, /**< 'main' collection */
        -: 1595:                                           ecma_collection_t *non_enum_collection_p) /**< skipped
        -: 1596:                                                                                      *   'non-enumerable'
        -: 1597:                                                                                      *   collection */
        -: 1598:{
        -: 1599:  JERRY_UNUSED (main_collection_p);
        -: 1600:
    #####: 1601:  ecma_collection_t *for_non_enumerable_p = (opts & ECMA_LIST_ENUMERABLE) ? non_enum_collection_p : main_collection_p;
        -: 1602:
        -: 1603:#if ENABLED (JERRY_ES2015)
    #####: 1604:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
    #####: 1605:  if (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))
        -: 1606:  {
        -: 1607:    /* Unintialized 'length' property is non-enumerable (ECMA-262 v6, 19.2.4.1) */
    #####: 1608:    ecma_collection_push_back (for_non_enumerable_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
        -: 1609:  }
        -: 1610:#else /* !ENABLED (JERRY_ES2015) */
        -: 1611:  /* 'length' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 1612:  ecma_collection_push_back (for_non_enumerable_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
        -: 1613:#endif /* ENABLED (JERRY_ES2015) */
        -: 1614:
        -: 1615:  const ecma_compiled_code_t *bytecode_data_p;
    #####: 1616:  bytecode_data_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) object_p);
        -: 1617:
        -: 1618:#if ENABLED (JERRY_ES2015)
    #####: 1619:  if (bytecode_data_p->status_flags & (CBC_CODE_FLAGS_ARROW_FUNCTION | CBC_CODE_FLAGS_ACCESSOR))
        -: 1620:  {
    #####: 1621:    return;
        -: 1622:  }
        -: 1623:#endif /* ENABLED (JERRY_ES2015) */
        -: 1624:
        -: 1625:  /* 'prototype' property is non-enumerable (ECMA-262 v5, 13.2.18) */
    #####: 1626:  ecma_collection_push_back (for_non_enumerable_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_PROTOTYPE));
        -: 1627:
        -: 1628:#if ENABLED (JERRY_ES2015)
    #####: 1629:  bool append_caller_and_arguments = !(bytecode_data_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE);
        -: 1630:#else /* !ENABLED (JERRY_ES2015) */
    #####: 1631:  bool append_caller_and_arguments = (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE);
        -: 1632:#endif /* ENABLED (JERRY_ES2015) */
        -: 1633:
    #####: 1634:  if (append_caller_and_arguments)
        -: 1635:  {
        -: 1636:    /* 'caller' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 1637:    ecma_collection_push_back (for_non_enumerable_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_CALLER));
        -: 1638:
        -: 1639:    /* 'arguments' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 1640:    ecma_collection_push_back (for_non_enumerable_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_ARGUMENTS));
        -: 1641:  }
    #####: 1642:} /* ecma_op_function_list_lazy_property_names */
        -: 1643:
        -: 1644:/**
        -: 1645: * List names of an External Function object's lazy instantiated properties,
        -: 1646: * adding them to corresponding string collections
        -: 1647: *
        -: 1648: * See also:
        -: 1649: *          ecma_op_external_function_try_to_lazy_instantiate_property
        -: 1650: */
        -: 1651:void
    #####: 1652:ecma_op_external_function_list_lazy_property_names (ecma_object_t *object_p, /**< function object */
        -: 1653:                                                    uint32_t opts, /**< listing options using flags
        -: 1654:                                                                    *   from ecma_list_properties_options_t */
        -: 1655:                                                    ecma_collection_t *main_collection_p, /**< 'main' collection */
        -: 1656:                                                    ecma_collection_t *non_enum_collection_p) /**< skipped
        -: 1657:                                                                                               *   collection */
        -: 1658:{
        -: 1659:  JERRY_UNUSED (main_collection_p);
        -: 1660:
    #####: 1661:  ecma_collection_t *for_non_enumerable_p = (opts & ECMA_LIST_ENUMERABLE) ? non_enum_collection_p : main_collection_p;
        -: 1662:
        -: 1663:#if !ENABLED (JERRY_ES2015)
        -: 1664:  JERRY_UNUSED (object_p);
        -: 1665:#else /* ENABLED (JERRY_ES2015) */
    #####: 1666:  if (!ecma_op_ordinary_object_has_own_property (object_p, ecma_get_magic_string (LIT_MAGIC_STRING_PROTOTYPE)))
        -: 1667:#endif /* !ENABLED (JERRY_ES2015) */
        -: 1668:  {
        -: 1669:    /* 'prototype' property is non-enumerable (ECMA-262 v5, 13.2.18) */
    #####: 1670:    ecma_collection_push_back (for_non_enumerable_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_PROTOTYPE));
        -: 1671:  }
    #####: 1672:} /* ecma_op_external_function_list_lazy_property_names */
        -: 1673:
        -: 1674:/**
        -: 1675: * List names of a Bound Function object's lazy instantiated properties,
        -: 1676: * adding them to corresponding string collections
        -: 1677: *
        -: 1678: * See also:
        -: 1679: *          ecma_op_bound_function_try_to_lazy_instantiate_property
        -: 1680: */
        -: 1681:void
    #####: 1682:ecma_op_bound_function_list_lazy_property_names (ecma_object_t *object_p, /**< bound function object*/
        -: 1683:                                                 uint32_t opts, /**< listing options using flags
        -: 1684:                                                                 *   from ecma_list_properties_options_t */
        -: 1685:                                                 ecma_collection_t *main_collection_p, /**< 'main' collection */
        -: 1686:                                                 ecma_collection_t *non_enum_collection_p) /**< skipped
        -: 1687:                                                                                            *   'non-enumerable'
        -: 1688:                                                                                            *   collection */
        -: 1689:{
        -: 1690:  JERRY_UNUSED (main_collection_p);
        -: 1691:
    #####: 1692:  ecma_collection_t *for_non_enumerable_p = (opts & ECMA_LIST_ENUMERABLE) ? non_enum_collection_p : main_collection_p;
        -: 1693:
        -: 1694:#if ENABLED (JERRY_ES2015)
        -: 1695:  /* Unintialized 'length' property is non-enumerable (ECMA-262 v6, 19.2.4.1) */
    #####: 1696:  ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) object_p;
    #####: 1697:  if (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (bound_func_p->header.u.bound_function.target_function))
        -: 1698:  {
    #####: 1699:    ecma_collection_push_back (for_non_enumerable_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
        -: 1700:  }
        -: 1701:#else /* !ENABLED (JERRY_ES2015) */
        -: 1702:  JERRY_UNUSED (object_p);
        -: 1703:  /* 'length' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 1704:  ecma_collection_push_back (for_non_enumerable_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
        -: 1705:#endif /* ENABLED (JERRY_ES2015) */
        -: 1706:
        -: 1707:  /* 'caller' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 1708:  ecma_collection_push_back (for_non_enumerable_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_CALLER));
        -: 1709:
        -: 1710:  /* 'arguments' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 1711:  ecma_collection_push_back (for_non_enumerable_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_ARGUMENTS));
    #####: 1712:} /* ecma_op_bound_function_list_lazy_property_names */
        -: 1713:
        -: 1714:/**
        -: 1715: * @}
        -: 1716: * @}
        -: 1717: */
