        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-date-prototype.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <math.h>
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-builtin-helpers.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-function-object.h"
        -:   22:#include "ecma-globals.h"
        -:   23:#include "ecma-helpers.h"
        -:   24:#include "ecma-objects.h"
        -:   25:#include "ecma-objects-general.h"
        -:   26:#include "ecma-try-catch-macro.h"
        -:   27:
        -:   28:#if ENABLED (JERRY_BUILTIN_DATE)
        -:   29:
        -:   30:#define ECMA_BUILTINS_INTERNAL
        -:   31:#include "ecma-builtins-internal.h"
        -:   32:
        -:   33:/**
        -:   34: * This object has a custom dispatch function.
        -:   35: */
        -:   36:#define BUILTIN_CUSTOM_DISPATCH
        -:   37:
        -:   38:/**
        -:   39: * Checks whether the function uses UTC time zone.
        -:   40: */
        -:   41:#define BUILTIN_DATE_FUNCTION_IS_UTC(builtin_routine_id) \
        -:   42:  (((builtin_routine_id) - ECMA_DATE_PROTOTYPE_GET_FULL_YEAR) & 0x1)
        -:   43:
        -:   44:/**
        -:   45: * List of built-in routine identifiers.
        -:   46: */
        -:   47:enum
        -:   48:{
        -:   49:  ECMA_DATE_PROTOTYPE_ROUTINE_START = ECMA_BUILTIN_ID__COUNT - 1,
        -:   50:
        -:   51:  ECMA_DATE_PROTOTYPE_GET_FULL_YEAR, /* ECMA-262 v5 15.9.5.10 */
        -:   52:  ECMA_DATE_PROTOTYPE_GET_UTC_FULL_YEAR, /* ECMA-262 v5 15.9.5.11 */
        -:   53:#if ENABLED (JERRY_BUILTIN_ANNEXB)
        -:   54:  ECMA_DATE_PROTOTYPE_GET_YEAR, /* ECMA-262 v5, AnnexB.B.2.4 */
        -:   55:  ECMA_DATE_PROTOTYPE_GET_UTC_YEAR, /* has no UTC variant */
        -:   56:#endif /* ENABLED (JERRY_BUILTIN_ANNEXB) */
        -:   57:  ECMA_DATE_PROTOTYPE_GET_MONTH, /* ECMA-262 v5 15.9.5.12 */
        -:   58:  ECMA_DATE_PROTOTYPE_GET_UTC_MONTH, /* ECMA-262 v5 15.9.5.13 */
        -:   59:  ECMA_DATE_PROTOTYPE_GET_DATE, /* ECMA-262 v5 15.9.5.14 */
        -:   60:  ECMA_DATE_PROTOTYPE_GET_UTC_DATE, /* ECMA-262 v5 15.9.5.15 */
        -:   61:  ECMA_DATE_PROTOTYPE_GET_DAY, /* ECMA-262 v5 15.9.5.16 */
        -:   62:  ECMA_DATE_PROTOTYPE_GET_UTC_DAY, /* ECMA-262 v5 15.9.5.17 */
        -:   63:  ECMA_DATE_PROTOTYPE_GET_HOURS, /* ECMA-262 v5 15.9.5.18 */
        -:   64:  ECMA_DATE_PROTOTYPE_GET_UTC_HOURS, /* ECMA-262 v5 15.9.5.19 */
        -:   65:  ECMA_DATE_PROTOTYPE_GET_MINUTES, /* ECMA-262 v5 15.9.5.20 */
        -:   66:  ECMA_DATE_PROTOTYPE_GET_UTC_MINUTES, /* ECMA-262 v5 15.9.5.21 */
        -:   67:  ECMA_DATE_PROTOTYPE_GET_SECONDS, /* ECMA-262 v5 15.9.5.22 */
        -:   68:  ECMA_DATE_PROTOTYPE_GET_UTC_SECONDS, /* ECMA-262 v5 15.9.5.23 */
        -:   69:  ECMA_DATE_PROTOTYPE_GET_MILLISECONDS, /* ECMA-262 v5 15.9.5.24 */
        -:   70:  ECMA_DATE_PROTOTYPE_GET_UTC_MILLISECONDS, /* ECMA-262 v5 15.9.5.25 */
        -:   71:  ECMA_DATE_PROTOTYPE_GET_TIMEZONE_OFFSET, /* has no local time zone variant */
        -:   72:  ECMA_DATE_PROTOTYPE_GET_UTC_TIMEZONE_OFFSET, /* ECMA-262 v5 15.9.5.26 */
        -:   73:
        -:   74:  ECMA_DATE_PROTOTYPE_SET_FULL_YEAR, /* ECMA-262 v5, 15.9.5.40 */
        -:   75:  ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR, /* ECMA-262 v5, 15.9.5.41 */
        -:   76:#if ENABLED (JERRY_BUILTIN_ANNEXB)
        -:   77:  ECMA_DATE_PROTOTYPE_SET_YEAR, /* ECMA-262 v5, ECMA-262 v5, AnnexB.B.2.5 */
        -:   78:  ECMA_DATE_PROTOTYPE_SET_UTC_YEAR, /* has no UTC variant */
        -:   79:#endif /* ENABLED (JERRY_BUILTIN_ANNEXB) */
        -:   80:  ECMA_DATE_PROTOTYPE_SET_MONTH, /* ECMA-262 v5, 15.9.5.38 */
        -:   81:  ECMA_DATE_PROTOTYPE_SET_UTC_MONTH, /* ECMA-262 v5, 15.9.5.39 */
        -:   82:  ECMA_DATE_PROTOTYPE_SET_DATE, /* ECMA-262 v5, 15.9.5.36 */
        -:   83:  ECMA_DATE_PROTOTYPE_SET_UTC_DATE, /* ECMA-262 v5, 15.9.5.37 */
        -:   84:  ECMA_DATE_PROTOTYPE_SET_HOURS, /* ECMA-262 v5, 15.9.5.34 */
        -:   85:  ECMA_DATE_PROTOTYPE_SET_UTC_HOURS, /* ECMA-262 v5, 15.9.5.35 */
        -:   86:  ECMA_DATE_PROTOTYPE_SET_MINUTES, /* ECMA-262 v5, 15.9.5.32 */
        -:   87:  ECMA_DATE_PROTOTYPE_SET_UTC_MINUTES, /* ECMA-262 v5, 15.9.5.33 */
        -:   88:  ECMA_DATE_PROTOTYPE_SET_SECONDS, /* ECMA-262 v5, 15.9.5.30 */
        -:   89:  ECMA_DATE_PROTOTYPE_SET_UTC_SECONDS, /* ECMA-262 v5, 15.9.5.31 */
        -:   90:  ECMA_DATE_PROTOTYPE_SET_MILLISECONDS, /* ECMA-262 v5, 15.9.5.28 */
        -:   91:  ECMA_DATE_PROTOTYPE_SET_UTC_MILLISECONDS, /* ECMA-262 v5, 15.9.5.29 */
        -:   92:
        -:   93:  ECMA_DATE_PROTOTYPE_TO_STRING, /* ECMA-262 v5, 15.9.5.2 */
        -:   94:  ECMA_DATE_PROTOTYPE_TO_DATE_STRING, /* ECMA-262 v5, 15.9.5.3 */
        -:   95:  ECMA_DATE_PROTOTYPE_TO_TIME_STRING, /* ECMA-262 v5, 15.9.5.4 */
        -:   96:  ECMA_DATE_PROTOTYPE_TO_UTC_STRING, /* ECMA-262 v5, 15.9.5.42 */
        -:   97:  ECMA_DATE_PROTOTYPE_TO_ISO_STRING, /* ECMA-262 v5, 15.9.5.43 */
        -:   98:
        -:   99:  ECMA_DATE_PROTOTYPE_GET_TIME, /* ECMA-262 v5, 15.9.5.9 */
        -:  100:  ECMA_DATE_PROTOTYPE_SET_TIME, /* ECMA-262 v5, 15.9.5.27 */
        -:  101:  ECMA_DATE_PROTOTYPE_TO_JSON, /* ECMA-262 v5, 15.9.5.44 */
        -:  102:
        -:  103:#if ENABLED (JERRY_ES2015)
        -:  104:  ECMA_DATE_PROTOTYPE_TO_PRIMITIVE, /*  ECMA-262 v6 20.3.4.45 */
        -:  105:#endif /* ENABLED (JERRY_ES2015) */
        -:  106:};
        -:  107:
        -:  108:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-date-prototype.inc.h"
        -:  109:#define BUILTIN_UNDERSCORED_ID date_prototype
        -:  110:#include "ecma-builtin-internal-routines-template.inc.h"
        -:  111:
        -:  112:/** \addtogroup ecma ECMA
        -:  113: * @{
        -:  114: *
        -:  115: * \addtogroup ecmabuiltins
        -:  116: * @{
        -:  117: *
        -:  118: * \addtogroup dateprototype ECMA Date.prototype object built-in
        -:  119: * @{
        -:  120: */
        -:  121:
        -:  122:/**
        -:  123: * The Date.prototype object's 'toJSON' routine
        -:  124: *
        -:  125: * See also:
        -:  126: *          ECMA-262 v5, 15.9.5.44
        -:  127: *
        -:  128: * @return ecma value
        -:  129: *         Returned value must be freed with ecma_free_value.
        -:  130: */
        -:  131:static ecma_value_t
    #####:  132:ecma_builtin_date_prototype_to_json (ecma_value_t this_arg) /**< this argument */
        -:  133:{
    #####:  134:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -:  135:
        -:  136:  /* 1. */
    #####:  137:  ECMA_TRY_CATCH (obj,
        -:  138:                  ecma_op_to_object (this_arg),
        -:  139:                  ret_value);
        -:  140:
        -:  141:  /* 2. */
    #####:  142:  ECMA_TRY_CATCH (tv,
        -:  143:                  ecma_op_to_primitive (obj, ECMA_PREFERRED_TYPE_NUMBER),
        -:  144:                  ret_value);
        -:  145:
        -:  146:  /* 3. */
    #####:  147:  if (ecma_is_value_number (tv))
        -:  148:  {
    #####:  149:    ecma_number_t num_value = ecma_get_number_from_value (tv);
        -:  150:
    #####:  151:    if (ecma_number_is_nan (num_value) || ecma_number_is_infinity (num_value))
        -:  152:    {
    #####:  153:      ret_value = ECMA_VALUE_NULL;
        -:  154:    }
        -:  155:  }
        -:  156:
    #####:  157:  if (ecma_is_value_empty (ret_value))
        -:  158:  {
    #####:  159:    ecma_object_t *value_obj_p = ecma_get_object_from_value (obj);
        -:  160:
        -:  161:    /* 4. */
    #####:  162:    ECMA_TRY_CATCH (to_iso,
        -:  163:                    ecma_op_object_get_by_magic_id (value_obj_p, LIT_MAGIC_STRING_TO_ISO_STRING_UL),
        -:  164:                    ret_value);
        -:  165:
        -:  166:    /* 5. */
    #####:  167:    if (!ecma_op_is_callable (to_iso))
        -:  168:    {
    #####:  169:      ret_value = ecma_raise_type_error (ECMA_ERR_MSG ("'toISOString' is missing or not a function."));
        -:  170:    }
        -:  171:    /* 6. */
        -:  172:    else
        -:  173:    {
    #####:  174:      ecma_object_t *to_iso_obj_p = ecma_get_object_from_value (to_iso);
    #####:  175:      ret_value = ecma_op_function_call (to_iso_obj_p, this_arg, NULL, 0);
        -:  176:    }
        -:  177:
    #####:  178:    ECMA_FINALIZE (to_iso);
        -:  179:  }
        -:  180:
    #####:  181:  ECMA_FINALIZE (tv);
    #####:  182:  ECMA_FINALIZE (obj);
        -:  183:
    #####:  184:  return ret_value;
        -:  185:} /* ecma_builtin_date_prototype_to_json */
        -:  186:
        -:  187:#if ENABLED (JERRY_ES2015)
        -:  188:/**
        -:  189: * The Date.prototype object's toPrimitive routine
        -:  190: *
        -:  191: * See also:
        -:  192: *          ECMA-262 v6, 20.3.4.45
        -:  193: *
        -:  194: * @return ecma value
        -:  195: *         Returned value must be freed with ecma_free_value.
        -:  196: */
        -:  197:static ecma_value_t
    #####:  198:ecma_builtin_date_prototype_to_primitive (ecma_value_t this_arg, /**< this argument */
        -:  199:                                          ecma_value_t hint_arg) /**< {"default", "number", "string"} */
        -:  200:{
    #####:  201:  if (ecma_is_value_object (this_arg) && ecma_is_value_string (hint_arg))
        -:  202:  {
    #####:  203:    ecma_string_t *hint_str_p = ecma_get_string_from_value (hint_arg);
        -:  204:
    #####:  205:    ecma_preferred_type_hint_t hint = ECMA_PREFERRED_TYPE_NUMBER;
        -:  206:
    #####:  207:    if (hint_str_p == ecma_get_magic_string (LIT_MAGIC_STRING_STRING)
    #####:  208:        || hint_str_p == ecma_get_magic_string (LIT_MAGIC_STRING_DEFAULT))
        -:  209:    {
    #####:  210:      hint = ECMA_PREFERRED_TYPE_STRING;
        -:  211:    }
    #####:  212:    else if (hint_str_p == ecma_get_magic_string (LIT_MAGIC_STRING_NUMBER))
        -:  213:    {
    #####:  214:      hint = ECMA_PREFERRED_TYPE_NUMBER;
        -:  215:    }
        -:  216:
    #####:  217:    if (hint != ECMA_PREFERRED_TYPE_NO)
        -:  218:    {
    #####:  219:      return ecma_op_general_object_ordinary_value (ecma_get_object_from_value (this_arg), hint);
        -:  220:    }
        -:  221:  }
        -:  222:
    #####:  223:  return ecma_raise_type_error (ECMA_ERR_MSG ("Invalid argument type in toPrimitive."));
        -:  224:} /* ecma_builtin_date_prototype_to_primitive */
        -:  225:#endif /* ENABLED (JERRY_ES2015) */
        -:  226:
        -:  227:/**
        -:  228: * Dispatch get date functions
        -:  229: *
        -:  230: * @return ecma value
        -:  231: *         Returned value must be freed with ecma_free_value.
        -:  232: */
        -:  233:static ecma_value_t
    #####:  234:ecma_builtin_date_prototype_dispatch_get (uint16_t builtin_routine_id, /**< built-in wide routine
        -:  235:                                                                        *   identifier */
        -:  236:                                          ecma_number_t date_num) /**< date converted to number */
        -:  237:{
    #####:  238:  if (ecma_number_is_nan (date_num))
        -:  239:  {
    #####:  240:    return ecma_make_magic_string_value (LIT_MAGIC_STRING_NAN);
        -:  241:  }
        -:  242:
    #####:  243:  switch (builtin_routine_id)
        -:  244:  {
    #####:  245:    case ECMA_DATE_PROTOTYPE_GET_FULL_YEAR:
        -:  246:    case ECMA_DATE_PROTOTYPE_GET_UTC_FULL_YEAR:
        -:  247:#if ENABLED (JERRY_BUILTIN_ANNEXB)
        -:  248:    case ECMA_DATE_PROTOTYPE_GET_YEAR:
        -:  249:#endif /* ENABLED (JERRY_BUILTIN_ANNEXB) */
        -:  250:    {
    #####:  251:      date_num = ecma_date_year_from_time (date_num);
        -:  252:
        -:  253:#if ENABLED (JERRY_BUILTIN_ANNEXB)
    #####:  254:      if (builtin_routine_id == ECMA_DATE_PROTOTYPE_GET_YEAR)
        -:  255:      {
    #####:  256:        date_num -= 1900;
        -:  257:      }
        -:  258:#endif /* ENABLED (JERRY_BUILTIN_ANNEXB) */
        -:  259:
    #####:  260:      break;
        -:  261:    }
    #####:  262:    case ECMA_DATE_PROTOTYPE_GET_MONTH:
        -:  263:    case ECMA_DATE_PROTOTYPE_GET_UTC_MONTH:
        -:  264:    {
    #####:  265:      date_num = ecma_date_month_from_time (date_num);
    #####:  266:      break;
        -:  267:    }
    #####:  268:    case ECMA_DATE_PROTOTYPE_GET_DATE:
        -:  269:    case ECMA_DATE_PROTOTYPE_GET_UTC_DATE:
        -:  270:    {
    #####:  271:      date_num = ecma_date_date_from_time (date_num);
    #####:  272:      break;
        -:  273:    }
    #####:  274:    case ECMA_DATE_PROTOTYPE_GET_DAY:
        -:  275:    case ECMA_DATE_PROTOTYPE_GET_UTC_DAY:
        -:  276:    {
    #####:  277:      date_num = ecma_date_week_day (date_num);
    #####:  278:      break;
        -:  279:    }
    #####:  280:    case ECMA_DATE_PROTOTYPE_GET_HOURS:
        -:  281:    case ECMA_DATE_PROTOTYPE_GET_UTC_HOURS:
        -:  282:    {
    #####:  283:      date_num = ecma_date_hour_from_time (date_num);
    #####:  284:      break;
        -:  285:    }
    #####:  286:    case ECMA_DATE_PROTOTYPE_GET_MINUTES:
        -:  287:    case ECMA_DATE_PROTOTYPE_GET_UTC_MINUTES:
        -:  288:    {
    #####:  289:      date_num = ecma_date_min_from_time (date_num);
    #####:  290:      break;
        -:  291:    }
    #####:  292:    case ECMA_DATE_PROTOTYPE_GET_SECONDS:
        -:  293:    case ECMA_DATE_PROTOTYPE_GET_UTC_SECONDS:
        -:  294:    {
    #####:  295:      date_num = ecma_date_sec_from_time (date_num);
    #####:  296:      break;
        -:  297:    }
    #####:  298:    case ECMA_DATE_PROTOTYPE_GET_MILLISECONDS:
        -:  299:    case ECMA_DATE_PROTOTYPE_GET_UTC_MILLISECONDS:
        -:  300:    {
    #####:  301:      date_num = ecma_date_ms_from_time (date_num);
    #####:  302:      break;
        -:  303:    }
    #####:  304:    default:
        -:  305:    {
    #####:  306:      JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_GET_UTC_TIMEZONE_OFFSET);
        -:  307:
    #####:  308:      date_num = ecma_date_timezone_offset (date_num);
    #####:  309:      break;
        -:  310:    }
        -:  311:  }
        -:  312:
    #####:  313:  return ecma_make_number_value (date_num);
        -:  314:} /* ecma_builtin_date_prototype_dispatch_get */
        -:  315:
        -:  316:#if ENABLED (JERRY_BUILTIN_ANNEXB)
        -:  317:
        -:  318:/**
        -:  319: * Returns true, if the built-in id sets a year.
        -:  320: */
        -:  321:#define ECMA_DATE_PROTOTYPE_IS_SET_YEAR_ROUTINE(builtin_routine_id) \
        -:  322:  ((builtin_routine_id) == ECMA_DATE_PROTOTYPE_SET_FULL_YEAR \
        -:  323:   || (builtin_routine_id) == ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR \
        -:  324:   || (builtin_routine_id) == ECMA_DATE_PROTOTYPE_SET_YEAR)
        -:  325:
        -:  326:#else /* !ENABLED (JERRY_BUILTIN_ANNEXB) */
        -:  327:
        -:  328:/**
        -:  329: * Returns true, if the built-in id sets a year.
        -:  330: */
        -:  331:#define ECMA_DATE_PROTOTYPE_IS_SET_YEAR_ROUTINE(builtin_routine_id) \
        -:  332:  ((builtin_routine_id) == ECMA_DATE_PROTOTYPE_SET_FULL_YEAR \
        -:  333:   || (builtin_routine_id) == ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR)
        -:  334:
        -:  335:#endif /* ENABLED (JERRY_BUILTIN_ANNEXB) */
        -:  336:
        -:  337:/**
        -:  338: * Dispatch set date functions
        -:  339: *
        -:  340: * @return ecma value
        -:  341: *         Returned value must be freed with ecma_free_value.
        -:  342: */
        -:  343:static ecma_value_t
    #####:  344:ecma_builtin_date_prototype_dispatch_set (uint16_t builtin_routine_id, /**< built-in wide routine
        -:  345:                                                                        *   identifier */
        -:  346:                                          ecma_extended_object_t *ext_object_p, /**< date extended object */
        -:  347:                                          ecma_number_t date_num, /**< date converted to number */
        -:  348:                                          const ecma_value_t arguments_list[], /**< list of arguments
        -:  349:                                                                                *   passed to routine */
        -:  350:                                          ecma_length_t arguments_number) /**< length of arguments' list */
        -:  351:{
    #####:  352:  ecma_number_t converted_number[4];
    #####:  353:  ecma_length_t conversions = 0;
        -:  354:
        -:  355:  /* If the first argument is not specified, it is always converted to NaN. */
    #####:  356:  converted_number[0] = ecma_number_make_nan ();
        -:  357:
    #####:  358:  switch (builtin_routine_id)
        -:  359:  {
        -:  360:#if ENABLED (JERRY_BUILTIN_ANNEXB)
    #####:  361:    case ECMA_DATE_PROTOTYPE_SET_YEAR:
        -:  362:#endif /* ENABLED (JERRY_BUILTIN_ANNEXB) */
        -:  363:    case ECMA_DATE_PROTOTYPE_SET_DATE:
        -:  364:    case ECMA_DATE_PROTOTYPE_SET_UTC_DATE:
        -:  365:    case ECMA_DATE_PROTOTYPE_SET_UTC_MILLISECONDS:
        -:  366:    case ECMA_DATE_PROTOTYPE_SET_MILLISECONDS:
        -:  367:    {
    #####:  368:      conversions = 1;
    #####:  369:      break;
        -:  370:    }
    #####:  371:    case ECMA_DATE_PROTOTYPE_SET_MONTH:
        -:  372:    case ECMA_DATE_PROTOTYPE_SET_UTC_MONTH:
        -:  373:    case ECMA_DATE_PROTOTYPE_SET_UTC_SECONDS:
        -:  374:    case ECMA_DATE_PROTOTYPE_SET_SECONDS:
        -:  375:    {
    #####:  376:      conversions = 2;
    #####:  377:      break;
        -:  378:    }
    #####:  379:    case ECMA_DATE_PROTOTYPE_SET_FULL_YEAR:
        -:  380:    case ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR:
        -:  381:    case ECMA_DATE_PROTOTYPE_SET_MINUTES:
        -:  382:    case ECMA_DATE_PROTOTYPE_SET_UTC_MINUTES:
        -:  383:    {
    #####:  384:      conversions = 3;
    #####:  385:      break;
        -:  386:    }
    #####:  387:    default:
        -:  388:    {
    #####:  389:      JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_HOURS
        -:  390:                    || builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_UTC_HOURS);
        -:  391:
    #####:  392:      conversions = 4;
    #####:  393:      break;
        -:  394:    }
        -:  395:  }
        -:  396:
    #####:  397:  if (conversions > arguments_number)
        -:  398:  {
    #####:  399:    conversions = arguments_number;
        -:  400:  }
        -:  401:
    #####:  402:  for (ecma_length_t i = 0; i < conversions; i++)
        -:  403:  {
    #####:  404:    ecma_value_t value = ecma_op_to_number (arguments_list[i]);
        -:  405:
    #####:  406:    if (ECMA_IS_VALUE_ERROR (value))
        -:  407:    {
    #####:  408:      return value;
        -:  409:    }
        -:  410:
    #####:  411:    converted_number[i] = ecma_get_number_from_value (value);
    #####:  412:    ecma_free_value (value);
        -:  413:  }
        -:  414:
        -:  415:  ecma_number_t day_part;
        -:  416:  ecma_number_t time_part;
        -:  417:
    #####:  418:  if (builtin_routine_id <= ECMA_DATE_PROTOTYPE_SET_UTC_DATE)
        -:  419:  {
    #####:  420:    if (ecma_number_is_nan (date_num))
        -:  421:    {
    #####:  422:      if (ECMA_DATE_PROTOTYPE_IS_SET_YEAR_ROUTINE (builtin_routine_id))
        -:  423:      {
    #####:  424:        date_num = ECMA_NUMBER_ZERO;
        -:  425:      }
        -:  426:      else
        -:  427:      {
    #####:  428:        return ecma_make_number_value (date_num);
        -:  429:      }
        -:  430:    }
        -:  431:
    #####:  432:    time_part = ecma_date_time_within_day (date_num);
        -:  433:
    #####:  434:    ecma_number_t year = ecma_date_year_from_time (date_num);
    #####:  435:    ecma_number_t month = ecma_date_month_from_time (date_num);
    #####:  436:    ecma_number_t day = ecma_date_date_from_time (date_num);
        -:  437:
    #####:  438:    switch (builtin_routine_id)
        -:  439:    {
    #####:  440:      case ECMA_DATE_PROTOTYPE_SET_FULL_YEAR:
        -:  441:      case ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR:
        -:  442:      {
    #####:  443:        year = converted_number[0];
    #####:  444:        if (conversions >= 2)
        -:  445:        {
    #####:  446:          month = converted_number[1];
        -:  447:        }
    #####:  448:        if (conversions >= 3)
        -:  449:        {
    #####:  450:          day = converted_number[2];
        -:  451:        }
    #####:  452:        break;
        -:  453:      }
        -:  454:#if ENABLED (JERRY_BUILTIN_ANNEXB)
    #####:  455:      case ECMA_DATE_PROTOTYPE_SET_YEAR:
        -:  456:      {
    #####:  457:        year = converted_number[0];
    #####:  458:        if (year >= 0 && year <= 99)
        -:  459:        {
    #####:  460:          year += 1900;
        -:  461:        }
    #####:  462:        break;
        -:  463:      }
        -:  464:#endif /* ENABLED (JERRY_BUILTIN_ANNEXB) */
    #####:  465:      case ECMA_DATE_PROTOTYPE_SET_MONTH:
        -:  466:      case ECMA_DATE_PROTOTYPE_SET_UTC_MONTH:
        -:  467:      {
    #####:  468:        month = converted_number[0];
    #####:  469:        if (conversions >= 2)
        -:  470:        {
    #####:  471:          day = converted_number[1];
        -:  472:        }
    #####:  473:        break;
        -:  474:      }
    #####:  475:      default:
        -:  476:      {
    #####:  477:        JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_DATE
        -:  478:                      || builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_UTC_DATE);
        -:  479:
    #####:  480:        day = converted_number[0];
    #####:  481:        break;
        -:  482:      }
        -:  483:    }
        -:  484:
    #####:  485:    day_part = ecma_date_make_day (year, month, day);
        -:  486:
        -:  487:#if ENABLED (JERRY_BUILTIN_ANNEXB)
    #####:  488:    if (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_YEAR)
        -:  489:    {
    #####:  490:      builtin_routine_id = ECMA_DATE_PROTOTYPE_SET_UTC_YEAR;
        -:  491:
    #####:  492:      if (ecma_number_is_nan (converted_number[0]))
        -:  493:      {
    #####:  494:        day_part = 0;
    #####:  495:        time_part = converted_number[0];
        -:  496:      }
        -:  497:    }
        -:  498:#endif /* ENABLED (JERRY_BUILTIN_ANNEXB) */
        -:  499:  }
        -:  500:  else
        -:  501:  {
    #####:  502:    if (ecma_number_is_nan (date_num))
        -:  503:    {
    #####:  504:      return ecma_make_number_value (date_num);
        -:  505:    }
        -:  506:
    #####:  507:    day_part = ecma_date_day (date_num);
        -:  508:
    #####:  509:    ecma_number_t hour = ecma_date_hour_from_time (date_num);
    #####:  510:    ecma_number_t min = ecma_date_min_from_time (date_num);
    #####:  511:    ecma_number_t sec = ecma_date_sec_from_time (date_num);
    #####:  512:    ecma_number_t ms = ecma_date_ms_from_time (date_num);
        -:  513:
    #####:  514:    switch (builtin_routine_id)
        -:  515:    {
    #####:  516:      case ECMA_DATE_PROTOTYPE_SET_HOURS:
        -:  517:      case ECMA_DATE_PROTOTYPE_SET_UTC_HOURS:
        -:  518:      {
    #####:  519:        hour = converted_number[0];
    #####:  520:        if (conversions >= 2)
        -:  521:        {
    #####:  522:          min = converted_number[1];
        -:  523:        }
    #####:  524:        if (conversions >= 3)
        -:  525:        {
    #####:  526:          sec = converted_number[2];
        -:  527:        }
    #####:  528:        if (conversions >= 4)
        -:  529:        {
    #####:  530:          ms = converted_number[3];
        -:  531:        }
    #####:  532:        break;
        -:  533:      }
    #####:  534:      case ECMA_DATE_PROTOTYPE_SET_MINUTES:
        -:  535:      case ECMA_DATE_PROTOTYPE_SET_UTC_MINUTES:
        -:  536:      {
    #####:  537:        min = converted_number[0];
    #####:  538:        if (conversions >= 2)
        -:  539:        {
    #####:  540:          sec = converted_number[1];
        -:  541:        }
    #####:  542:        if (conversions >= 3)
        -:  543:        {
    #####:  544:          ms = converted_number[2];
        -:  545:        }
    #####:  546:        break;
        -:  547:      }
    #####:  548:      case ECMA_DATE_PROTOTYPE_SET_UTC_SECONDS:
        -:  549:      case ECMA_DATE_PROTOTYPE_SET_SECONDS:
        -:  550:      {
    #####:  551:        sec = converted_number[0];
    #####:  552:        if (conversions >= 2)
        -:  553:        {
    #####:  554:          ms = converted_number[1];
        -:  555:        }
    #####:  556:        break;
        -:  557:      }
    #####:  558:      default:
        -:  559:      {
    #####:  560:        JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_UTC_MILLISECONDS
        -:  561:                      || builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_MILLISECONDS);
        -:  562:
    #####:  563:        ms = converted_number[0];
    #####:  564:        break;
        -:  565:      }
        -:  566:    }
        -:  567:
    #####:  568:    time_part = ecma_date_make_time (hour, min, sec, ms);
        -:  569:  }
        -:  570:
    #####:  571:  bool is_utc = BUILTIN_DATE_FUNCTION_IS_UTC (builtin_routine_id);
        -:  572:
    #####:  573:  ecma_number_t full_date = ecma_date_make_date (day_part, time_part);
        -:  574:
    #####:  575:  if (!is_utc)
        -:  576:  {
    #####:  577:    full_date = ecma_date_utc (full_date);
        -:  578:  }
        -:  579:
    #####:  580:  full_date = ecma_date_time_clip (full_date);
        -:  581:
    #####:  582:  *ECMA_GET_INTERNAL_VALUE_POINTER (ecma_number_t, ext_object_p->u.class_prop.u.value) = full_date;
        -:  583:
    #####:  584:  return ecma_make_number_value (full_date);
        -:  585:} /* ecma_builtin_date_prototype_dispatch_set */
        -:  586:
        -:  587:#undef ECMA_DATE_PROTOTYPE_IS_SET_YEAR_ROUTINE
        -:  588:
        -:  589:/**
        -:  590: * Dispatcher of the built-in's routines
        -:  591: *
        -:  592: * @return ecma value
        -:  593: *         Returned value must be freed with ecma_free_value.
        -:  594: */
        -:  595:ecma_value_t
    #####:  596:ecma_builtin_date_prototype_dispatch_routine (uint16_t builtin_routine_id, /**< built-in wide routine
        -:  597:                                                                            *   identifier */
        -:  598:                                              ecma_value_t this_arg, /**< 'this' argument value */
        -:  599:                                              const ecma_value_t arguments_list[], /**< list of arguments
        -:  600:                                                                                    *   passed to routine */
        -:  601:                                              ecma_length_t arguments_number) /**< length of arguments' list */
        -:  602:{
    #####:  603:  if (JERRY_UNLIKELY (builtin_routine_id == ECMA_DATE_PROTOTYPE_TO_JSON))
        -:  604:  {
    #####:  605:    return ecma_builtin_date_prototype_to_json (this_arg);
        -:  606:  }
        -:  607:
        -:  608:#if ENABLED (JERRY_ES2015)
    #####:  609:  if (JERRY_UNLIKELY (builtin_routine_id == ECMA_DATE_PROTOTYPE_TO_PRIMITIVE))
        -:  610:  {
    #####:  611:    ecma_value_t argument = arguments_number > 0 ? arguments_list[0] : ECMA_VALUE_UNDEFINED;
    #####:  612:    return ecma_builtin_date_prototype_to_primitive (this_arg, argument);
        -:  613:  }
        -:  614:#endif /* ENABLED (JERRY_ES2015) */
        -:  615:
    #####:  616:  if (!ecma_is_value_object (this_arg)
    #####:  617:      || !ecma_object_class_is (ecma_get_object_from_value (this_arg), LIT_MAGIC_STRING_DATE_UL))
        -:  618:  {
    #####:  619:    return ecma_raise_type_error (ECMA_ERR_MSG ("'this' is not a Date object"));
        -:  620:  }
        -:  621:
    #####:  622:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) ecma_get_object_from_value (this_arg);
    #####:  623:  ecma_number_t *prim_value_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_number_t,
        -:  624:                                                                 ext_object_p->u.class_prop.u.value);
        -:  625:
    #####:  626:  if (builtin_routine_id == ECMA_DATE_PROTOTYPE_GET_TIME)
        -:  627:  {
    #####:  628:    return ecma_make_number_value (*prim_value_p);
        -:  629:  }
        -:  630:
    #####:  631:  if (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_TIME)
        -:  632:  {
    #####:  633:    ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -:  634:
        -:  635:    /* 1. */
    #####:  636:    ECMA_OP_TO_NUMBER_TRY_CATCH (time_num, arguments_list[0], ret_value);
    #####:  637:    *prim_value_p = ecma_date_time_clip (time_num);
        -:  638:
    #####:  639:    ret_value = ecma_make_number_value (time_num);
        -:  640:    ECMA_OP_TO_NUMBER_FINALIZE (time_num);
        -:  641:
    #####:  642:    return ret_value;
        -:  643:  }
        -:  644:
    #####:  645:  if (builtin_routine_id <= ECMA_DATE_PROTOTYPE_SET_UTC_MILLISECONDS)
        -:  646:  {
    #####:  647:    ecma_number_t this_num = *prim_value_p;
        -:  648:
    #####:  649:    if (!BUILTIN_DATE_FUNCTION_IS_UTC (builtin_routine_id))
        -:  650:    {
    #####:  651:      this_num += ecma_date_local_time_zone_adjustment (this_num);
        -:  652:    }
        -:  653:
    #####:  654:    if (builtin_routine_id <= ECMA_DATE_PROTOTYPE_GET_UTC_TIMEZONE_OFFSET)
        -:  655:    {
    #####:  656:      return ecma_builtin_date_prototype_dispatch_get (builtin_routine_id, this_num);
        -:  657:    }
        -:  658:
    #####:  659:    return ecma_builtin_date_prototype_dispatch_set (builtin_routine_id,
        -:  660:                                                     ext_object_p,
        -:  661:                                                     this_num,
        -:  662:                                                     arguments_list,
        -:  663:                                                     arguments_number);
        -:  664:  }
        -:  665:
    #####:  666:  if (builtin_routine_id == ECMA_DATE_PROTOTYPE_TO_ISO_STRING)
        -:  667:  {
    #####:  668:    if (ecma_number_is_nan (*prim_value_p) || ecma_number_is_infinity (*prim_value_p))
        -:  669:    {
    #####:  670:      return ecma_raise_range_error (ECMA_ERR_MSG ("Date must be a finite number."));
        -:  671:    }
        -:  672:
    #####:  673:    return ecma_date_value_to_iso_string (*prim_value_p);
        -:  674:  }
        -:  675:
    #####:  676:  if (ecma_number_is_nan (*prim_value_p))
        -:  677:  {
    #####:  678:    return ecma_make_magic_string_value (LIT_MAGIC_STRING_INVALID_DATE_UL);
        -:  679:  }
        -:  680:
    #####:  681:  switch (builtin_routine_id)
        -:  682:  {
    #####:  683:    case ECMA_DATE_PROTOTYPE_TO_STRING:
        -:  684:    {
    #####:  685:      return ecma_date_value_to_string (*prim_value_p);
        -:  686:    }
    #####:  687:    case ECMA_DATE_PROTOTYPE_TO_DATE_STRING:
        -:  688:    {
    #####:  689:      return ecma_date_value_to_date_string (*prim_value_p);
        -:  690:    }
    #####:  691:    case ECMA_DATE_PROTOTYPE_TO_TIME_STRING:
        -:  692:    {
    #####:  693:      return ecma_date_value_to_time_string (*prim_value_p);
        -:  694:    }
    #####:  695:    default:
        -:  696:    {
    #####:  697:      JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_TO_UTC_STRING);
        -:  698:
    #####:  699:      return ecma_date_value_to_utc_string (*prim_value_p);
        -:  700:    }
        -:  701:  }
        -:  702:} /* ecma_builtin_date_prototype_dispatch_routine */
        -:  703:
        -:  704:/**
        -:  705: * @}
        -:  706: * @}
        -:  707: * @}
        -:  708: */
        -:  709:
        -:  710:#endif /* ENABLED (JERRY_BUILTIN_DATE) */
