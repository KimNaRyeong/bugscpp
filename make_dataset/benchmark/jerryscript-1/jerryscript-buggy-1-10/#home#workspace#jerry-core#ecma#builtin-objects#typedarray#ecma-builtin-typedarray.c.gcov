        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/typedarray/ecma-builtin-typedarray.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-typedarray-object.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-gc.h"
        -:   20:#include "ecma-globals.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:#include "ecma-typedarray-object.h"
        -:   23:#include "ecma-try-catch-macro.h"
        -:   24:#include "ecma-function-object.h"
        -:   25:#include "jrt.h"
        -:   26:
        -:   27:#if ENABLED (JERRY_ES2015_BUILTIN_TYPEDARRAY)
        -:   28:
        -:   29:#define ECMA_BUILTINS_INTERNAL
        -:   30:#include "ecma-builtins-internal.h"
        -:   31:
        -:   32:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-typedarray.inc.h"
        -:   33:#define BUILTIN_UNDERSCORED_ID typedarray
        -:   34:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   35:
        -:   36:#include "ecma-builtin-typedarray-helpers.h"
        -:   37:
        -:   38:/** \addtogroup ecma ECMA
        -:   39: * @{
        -:   40: *
        -:   41: * \addtogroup ecmabuiltins
        -:   42: * @{
        -:   43: *
        -:   44: * \addtogroup typedarray ECMA %TypedArray% object built-in
        -:   45: * @{
        -:   46: */
        -:   47:
        -:   48:/**
        -:   49: * The %TypedArray%.from routine
        -:   50: *
        -:   51: * See also:
        -:   52: *         ES2015 22.2.2.1
        -:   53: *
        -:   54: * @return ecma value
        -:   55: *         Returned value must be freed with ecma_free_value.
        -:   56: */
        -:   57:static ecma_value_t
    #####:   58:ecma_builtin_typedarray_from (ecma_value_t this_arg, /**< 'this' argument */
        -:   59:                              const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   60:                              ecma_length_t arguments_list_len) /**< number of arguments */
        -:   61:{
    #####:   62:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   63:
    #####:   64:  if (!ecma_is_constructor (this_arg))
        -:   65:  {
    #####:   66:    return ecma_raise_type_error (ECMA_ERR_MSG ("'this' is not a constructor."));
        -:   67:  }
        -:   68:
        -:   69:  ecma_value_t source;
    #####:   70:  ecma_value_t map_fn = ECMA_VALUE_UNDEFINED;
    #####:   71:  ecma_value_t this_in_fn = ECMA_VALUE_UNDEFINED;
        -:   72:
    #####:   73:  if (arguments_list_len == 0)
        -:   74:  {
    #####:   75:    return ecma_raise_type_error (ECMA_ERR_MSG ("no source argument"));
        -:   76:  }
        -:   77:
    #####:   78:  source = arguments_list_p[0];
        -:   79:
    #####:   80:  if (arguments_list_len > 1)
        -:   81:  {
    #####:   82:    map_fn = arguments_list_p[1];
        -:   83:
    #####:   84:    if (!ecma_op_is_callable (map_fn))
        -:   85:    {
    #####:   86:      return ecma_raise_type_error (ECMA_ERR_MSG ("mapfn argument is not callable"));
        -:   87:    }
        -:   88:
    #####:   89:    if (arguments_list_len > 2)
        -:   90:    {
    #####:   91:      this_in_fn = arguments_list_p[2];
        -:   92:    }
        -:   93:  }
        -:   94:
    #####:   95:  ecma_object_t *obj_p = ecma_get_object_from_value (this_arg);
        -:   96:
    #####:   97:  const uint8_t builtin_id = ecma_get_object_builtin_id (obj_p);
    #####:   98:  if (!ecma_typedarray_helper_is_typedarray (builtin_id))
        -:   99:  {
    #####:  100:    return ecma_raise_type_error (ECMA_ERR_MSG ("'this' is not a typedarray constructor"));
        -:  101:  }
        -:  102:
    #####:  103:  ecma_typedarray_type_t typedarray_id = ecma_typedarray_helper_builtin_to_typedarray_id (builtin_id);
        -:  104:
    #####:  105:  ecma_object_t *proto_p = ecma_builtin_get (ecma_typedarray_helper_get_prototype_id (typedarray_id));
    #####:  106:  const uint8_t element_size_shift = ecma_typedarray_helper_get_shift_size (typedarray_id);
        -:  107:
    #####:  108:  return ecma_op_typedarray_from (source,
        -:  109:                                  map_fn,
        -:  110:                                  this_in_fn,
        -:  111:                                  proto_p,
        -:  112:                                  element_size_shift,
        -:  113:                                  typedarray_id);
        -:  114:
        -:  115:} /* ecma_builtin_typedarray_from */
        -:  116:
        -:  117:/**
        -:  118: * The %TypedArray%.of routine
        -:  119: *
        -:  120: * See also:
        -:  121: *         ES2015 22.2.2.2
        -:  122: *
        -:  123: * @return ecma value
        -:  124: *         Returned value must be freed with ecma_free_value.
        -:  125: */
        -:  126:static ecma_value_t
    #####:  127:ecma_builtin_typedarray_of (ecma_value_t this_arg, /**< 'this' argument */
        -:  128:                            const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  129:                            ecma_length_t arguments_list_len) /**< number of arguments */
        -:  130:{
    #####:  131:  if (!ecma_is_constructor (this_arg))
        -:  132:  {
    #####:  133:    return ecma_raise_type_error (ECMA_ERR_MSG ("'this' is not a constructor."));
        -:  134:  }
        -:  135:
    #####:  136:  ecma_object_t *obj_p = ecma_get_object_from_value (this_arg);
    #####:  137:  const uint8_t builtin_id = ecma_get_object_builtin_id (obj_p);
        -:  138:
    #####:  139:  if (!ecma_typedarray_helper_is_typedarray (builtin_id))
        -:  140:  {
    #####:  141:    return ecma_raise_type_error (ECMA_ERR_MSG ("'this' is not a typedarray constructor"));
        -:  142:  }
        -:  143:
    #####:  144:  ecma_typedarray_type_t typedarray_id = ecma_typedarray_helper_builtin_to_typedarray_id (builtin_id);
        -:  145:
    #####:  146:  ecma_object_t *proto_p = ecma_builtin_get (ecma_typedarray_helper_get_prototype_id (typedarray_id));
    #####:  147:  const uint8_t element_size_shift = ecma_typedarray_helper_get_shift_size (typedarray_id);
        -:  148:
    #####:  149:  ecma_value_t ret_val = ecma_typedarray_create_object_with_length (arguments_list_len,
        -:  150:                                                                    NULL,
        -:  151:                                                                    proto_p,
        -:  152:                                                                    element_size_shift,
        -:  153:                                                                    typedarray_id);
        -:  154:
    #####:  155:  if (ECMA_IS_VALUE_ERROR (ret_val))
        -:  156:  {
    #####:  157:    return ret_val;
        -:  158:  }
        -:  159:
    #####:  160:  uint32_t k = 0;
    #####:  161:  ecma_object_t *ret_obj_p = ecma_get_object_from_value (ret_val);
    #####:  162:  ecma_typedarray_info_t info = ecma_typedarray_get_info (ret_obj_p);
    #####:  163:  ecma_typedarray_setter_fn_t setter_cb = ecma_get_typedarray_setter_fn (info.id);
        -:  164:
    #####:  165:  while (k < arguments_list_len)
        -:  166:  {
    #####:  167:    ecma_number_t num;
    #####:  168:    ecma_value_t next_val = ecma_get_number (arguments_list_p[k], &num);
        -:  169:
    #####:  170:    if (ECMA_IS_VALUE_ERROR (next_val))
        -:  171:    {
    #####:  172:      ecma_deref_object (ret_obj_p);
    #####:  173:      return next_val;
        -:  174:    }
        -:  175:
    #####:  176:    setter_cb (info.buffer_p, num);
        -:  177:
    #####:  178:    k++;
    #####:  179:    info.buffer_p += info.element_size;
        -:  180:  }
        -:  181:
    #####:  182:  return ret_val;
        -:  183:} /* ecma_builtin_typedarray_of */
        -:  184:
        -:  185:/**
        -:  186: * Handle calling [[Call]] of built-in %TypedArray% object
        -:  187: *
        -:  188: * ES2015 22.2.1 If %TypedArray% is directly called or
        -:  189: * called as part of a new expression an exception is thrown
        -:  190: *
        -:  191: * @return ecma value
        -:  192: */
        -:  193:ecma_value_t
    #####:  194:ecma_builtin_typedarray_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  195:                                       ecma_length_t arguments_list_len) /**< number of arguments */
        -:  196:{
    #####:  197:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  198:
    #####:  199:  return ecma_raise_type_error (ECMA_ERR_MSG ("TypedArray intrinstic cannot be directly called"));
        -:  200:} /* ecma_builtin_typedarray_dispatch_call */
        -:  201:
        -:  202:/**
        -:  203: * Handle calling [[Construct]] of built-in %TypedArray% object
        -:  204: *
        -:  205: * ES2015 22.2.1 If %TypedArray% is directly called or
        -:  206: * called as part of a new expression an exception is thrown
        -:  207: *
        -:  208: * @return ecma value
        -:  209: */
        -:  210:ecma_value_t
    #####:  211:ecma_builtin_typedarray_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  212:                                            ecma_length_t arguments_list_len) /**< number of arguments */
        -:  213:{
    #####:  214:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  215:
    #####:  216:  return ecma_raise_type_error (ECMA_ERR_MSG ("TypedArray intrinstic cannot be called by a 'new' expression"));
        -:  217:} /* ecma_builtin_typedarray_dispatch_construct */
        -:  218:
        -:  219:/**
        -:  220: * 22.2.2.4 get %TypedArray% [ @@species ] accessor
        -:  221: *
        -:  222: * @return ecma_value
        -:  223: *         returned value must be freed with ecma_free_value
        -:  224: */
        -:  225:ecma_value_t
    #####:  226:ecma_builtin_typedarray_species_get (ecma_value_t this_value) /**< This Value */
        -:  227:{
    #####:  228:  return ecma_copy_value (this_value);
        -:  229:} /* ecma_builtin_typedarray_species_get */
        -:  230:
        -:  231:/**
        -:  232: * @}
        -:  233: * @}
        -:  234: * @}
        -:  235: */
        -:  236:
        -:  237:#endif /* ENABLED (JERRY_ES2015_BUILTIN_TYPEDARRAY) */
