        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtins.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-gc.h"
        -:   20:#include "ecma-globals.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:#include "ecma-objects.h"
        -:   23:#include "jcontext.h"
        -:   24:#include "jrt-bit-fields.h"
        -:   25:
        -:   26:#define ECMA_BUILTINS_INTERNAL
        -:   27:#include "ecma-builtins-internal.h"
        -:   28:
        -:   29:/** \addtogroup ecma ECMA
        -:   30: * @{
        -:   31: *
        -:   32: * \addtogroup ecmabuiltins
        -:   33: * @{
        -:   34: */
        -:   35:
        -:   36:static void ecma_instantiate_builtin (ecma_builtin_id_t id);
        -:   37:
        -:   38:/**
        -:   39: * Helper definition for ecma_builtin_property_list_references.
        -:   40: */
        -:   41:typedef const ecma_builtin_property_descriptor_t *ecma_builtin_property_list_reference_t;
        -:   42:
        -:   43:/**
        -:   44: * Definition of built-in dispatch routine function pointer.
        -:   45: */
        -:   46:typedef ecma_value_t (*ecma_builtin_dispatch_routine_t) (uint16_t builtin_routine_id,
        -:   47:                                                         ecma_value_t this_arg,
        -:   48:                                                         const ecma_value_t arguments_list[],
        -:   49:                                                         ecma_length_t arguments_number);
        -:   50:/**
        -:   51: * Definition of built-in dispatch call function pointer.
        -:   52: */
        -:   53:typedef ecma_value_t (*ecma_builtin_dispatch_call_t) (const ecma_value_t arguments_list[],
        -:   54:                                                      ecma_length_t arguments_number);
        -:   55:/**
        -:   56: * Definition of a builtin descriptor which contains the builtin object's:
        -:   57: * - prototype objects's id (13-bits)
        -:   58: * - type (3-bits)
        -:   59: *
        -:   60: * Layout:
        -:   61: *
        -:   62: * |----------------------|---------------|
        -:   63: *     prototype_id(13)      obj_type(3)
        -:   64: */
        -:   65:typedef uint16_t ecma_builtin_descriptor_t;
        -:   66:
        -:   67:/**
        -:   68: * Bitshift index for get the prototype object's id from a builtin descriptor
        -:   69: */
        -:   70:#define ECMA_BUILTIN_PROTOTYPE_ID_SHIFT 3
        -:   71:
        -:   72:/**
        -:   73: * Bitmask for get the object's type from a builtin descriptor
        -:   74: */
        -:   75:#define ECMA_BUILTIN_OBJECT_TYPE_MASK ((1 << ECMA_BUILTIN_PROTOTYPE_ID_SHIFT) - 1)
        -:   76:
        -:   77:/**
        -:   78: * Create a builtin descriptor value
        -:   79: */
        -:   80:#define ECMA_MAKE_BUILTIN_DESCRIPTOR(type, proto_id) \
        -:   81:  (((proto_id) << ECMA_BUILTIN_PROTOTYPE_ID_SHIFT) | (type))
        -:   82:
        -:   83:/**
        -:   84: * List of the built-in descriptors.
        -:   85: */
        -:   86:static const ecma_builtin_descriptor_t ecma_builtin_descriptors[] =
        -:   87:{
        -:   88:/** @cond doxygen_suppress */
        -:   89:#define BUILTIN(a, b, c, d, e)
        -:   90:#define BUILTIN_ROUTINE(builtin_id, \
        -:   91:                        object_type, \
        -:   92:                        object_prototype_builtin_id, \
        -:   93:                        is_extensible, \
        -:   94:                        lowercase_name) \
        -:   95:  ECMA_MAKE_BUILTIN_DESCRIPTOR (object_type, object_prototype_builtin_id),
        -:   96:#include "ecma-builtins.inc.h"
        -:   97:#undef BUILTIN
        -:   98:#undef BUILTIN_ROUTINE
        -:   99:#define BUILTIN_ROUTINE(a, b, c, d, e)
        -:  100:#define BUILTIN(builtin_id, \
        -:  101:                object_type, \
        -:  102:                object_prototype_builtin_id, \
        -:  103:                is_extensible, \
        -:  104:                lowercase_name) \
        -:  105:  ECMA_MAKE_BUILTIN_DESCRIPTOR (object_type, object_prototype_builtin_id),
        -:  106:#include "ecma-builtins.inc.h"
        -:  107:#undef BUILTIN
        -:  108:#undef BUILTIN_ROUTINE
        -:  109:/** @endcond */
        -:  110:};
        -:  111:
        -:  112:#ifndef JERRY_NDEBUG
        -:  113:/** @cond doxygen_suppress */
        -:  114:enum
        -:  115:{
        -:  116:  ECMA_BUILTIN_EXTENSIBLE_CHECK =
        -:  117:#define BUILTIN(a, b, c, d, e)
        -:  118:#define BUILTIN_ROUTINE(builtin_id, \
        -:  119:                        object_type, \
        -:  120:                        object_prototype_builtin_id, \
        -:  121:                        is_extensible, \
        -:  122:                        lowercase_name) \
        -:  123:  (is_extensible != 0 || builtin_id == ECMA_BUILTIN_ID_TYPE_ERROR_THROWER) &&
        -:  124:#include "ecma-builtins.inc.h"
        -:  125:#undef BUILTIN
        -:  126:#undef BUILTIN_ROUTINE
        -:  127:#define BUILTIN_ROUTINE(a, b, c, d, e)
        -:  128:#define BUILTIN(builtin_id, \
        -:  129:                object_type, \
        -:  130:                object_prototype_builtin_id, \
        -:  131:                is_extensible, \
        -:  132:                lowercase_name) \
        -:  133:  (is_extensible != 0 || builtin_id == ECMA_BUILTIN_ID_TYPE_ERROR_THROWER) &&
        -:  134:#include "ecma-builtins.inc.h"
        -:  135:#undef BUILTIN
        -:  136:#undef BUILTIN_ROUTINE
        -:  137:  true
        -:  138:};
        -:  139:/** @endcond */
        -:  140:
        -:  141:/**
        -:  142: * All the builtin object must be extensible except the ThrowTypeError object.
        -:  143: */
        -:  144:JERRY_STATIC_ASSERT (ECMA_BUILTIN_EXTENSIBLE_CHECK == true,
        -:  145:                     ecma_builtin_must_be_extensible_except_the_builtin_thorw_type_error_object);
        -:  146:#endif /* !JERRY_NDEBUG */
        -:  147:
        -:  148:/**
        -:  149: * List of the built-in routines.
        -:  150: */
        -:  151:static const ecma_builtin_dispatch_routine_t ecma_builtin_routines[] =
        -:  152:{
        -:  153:/** @cond doxygen_suppress */
        -:  154:#define BUILTIN(a, b, c, d, e)
        -:  155:#define BUILTIN_ROUTINE(builtin_id, \
        -:  156:                        object_type, \
        -:  157:                        object_prototype_builtin_id, \
        -:  158:                        is_extensible, \
        -:  159:                        lowercase_name) \
        -:  160:  ecma_builtin_ ## lowercase_name ## _dispatch_routine,
        -:  161:#include "ecma-builtins.inc.h"
        -:  162:#undef BUILTIN
        -:  163:#undef BUILTIN_ROUTINE
        -:  164:#define BUILTIN_ROUTINE(a, b, c, d, e)
        -:  165:#define BUILTIN(builtin_id, \
        -:  166:                object_type, \
        -:  167:                object_prototype_builtin_id, \
        -:  168:                is_extensible, \
        -:  169:                lowercase_name) \
        -:  170:  ecma_builtin_ ## lowercase_name ## _dispatch_routine,
        -:  171:#include "ecma-builtins.inc.h"
        -:  172:#undef BUILTIN
        -:  173:#undef BUILTIN_ROUTINE
        -:  174:/** @endcond */
        -:  175:};
        -:  176:
        -:  177:/**
        -:  178: * List of the built-in call functions.
        -:  179: */
        -:  180:static const ecma_builtin_dispatch_call_t ecma_builtin_call_functions[] =
        -:  181:{
        -:  182:/** @cond doxygen_suppress */
        -:  183:#define BUILTIN(a, b, c, d, e)
        -:  184:#define BUILTIN_ROUTINE(builtin_id, \
        -:  185:                        object_type, \
        -:  186:                        object_prototype_builtin_id, \
        -:  187:                        is_extensible, \
        -:  188:                        lowercase_name) \
        -:  189:  ecma_builtin_ ## lowercase_name ## _dispatch_call,
        -:  190:#include "ecma-builtins.inc.h"
        -:  191:#undef BUILTIN_ROUTINE
        -:  192:#undef BUILTIN
        -:  193:/** @endcond */
        -:  194:};
        -:  195:
        -:  196:/**
        -:  197: * List of the built-in construct functions.
        -:  198: */
        -:  199:static const ecma_builtin_dispatch_call_t ecma_builtin_construct_functions[] =
        -:  200:{
        -:  201:/** @cond doxygen_suppress */
        -:  202:#define BUILTIN(a, b, c, d, e)
        -:  203:#define BUILTIN_ROUTINE(builtin_id, \
        -:  204:                        object_type, \
        -:  205:                        object_prototype_builtin_id, \
        -:  206:                        is_extensible, \
        -:  207:                        lowercase_name) \
        -:  208:  ecma_builtin_ ## lowercase_name ## _dispatch_construct,
        -:  209:#include "ecma-builtins.inc.h"
        -:  210:#undef BUILTIN_ROUTINE
        -:  211:#undef BUILTIN
        -:  212:/** @endcond */
        -:  213:};
        -:  214:
        -:  215:/**
        -:  216: * Property descriptor lists for all built-ins.
        -:  217: */
        -:  218:static const ecma_builtin_property_list_reference_t ecma_builtin_property_list_references[] =
        -:  219:{
        -:  220:/** @cond doxygen_suppress */
        -:  221:#define BUILTIN(a, b, c, d, e)
        -:  222:#define BUILTIN_ROUTINE(builtin_id, \
        -:  223:                        object_type, \
        -:  224:                        object_prototype_builtin_id, \
        -:  225:                        is_extensible, \
        -:  226:                        lowercase_name) \
        -:  227:  ecma_builtin_ ## lowercase_name ## _property_descriptor_list,
        -:  228:#include "ecma-builtins.inc.h"
        -:  229:#undef BUILTIN
        -:  230:#undef BUILTIN_ROUTINE
        -:  231:#define BUILTIN_ROUTINE(a, b, c, d, e)
        -:  232:#define BUILTIN(builtin_id, \
        -:  233:                object_type, \
        -:  234:                object_prototype_builtin_id, \
        -:  235:                is_extensible, \
        -:  236:                lowercase_name) \
        -:  237:  ecma_builtin_ ## lowercase_name ## _property_descriptor_list,
        -:  238:#include "ecma-builtins.inc.h"
        -:  239:#undef BUILTIN_ROUTINE
        -:  240:#undef BUILTIN
        -:  241:/** @endcond */
        -:  242:};
        -:  243:
        -:  244:/**
        -:  245: * Get the number of properties of a built-in object.
        -:  246: *
        -:  247: * @return the number of properties
        -:  248: */
        -:  249:static size_t
       38:  250:ecma_builtin_get_property_count (ecma_builtin_id_t builtin_id) /**< built-in ID */
        -:  251:{
       38:  252:  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);
       38:  253:  const ecma_builtin_property_descriptor_t *property_list_p = ecma_builtin_property_list_references[builtin_id];
        -:  254:
       38:  255:  const ecma_builtin_property_descriptor_t *curr_property_p = property_list_p;
        -:  256:
      512:  257:  while (curr_property_p->magic_string_id != LIT_MAGIC_STRING__COUNT)
        -:  258:  {
      436:  259:    curr_property_p++;
        -:  260:  }
        -:  261:
       38:  262:  return (size_t) (curr_property_p - property_list_p);
        -:  263:} /* ecma_builtin_get_property_count */
        -:  264:
        -:  265:/**
        -:  266: * Check if passed object is the instance of specified built-in.
        -:  267: *
        -:  268: * @return true  - if the object is instance of the specified built-in
        -:  269: *         false - otherwise
        -:  270: */
        -:  271:bool
    34056:  272:ecma_builtin_is (ecma_object_t *obj_p, /**< pointer to an object */
        -:  273:                 ecma_builtin_id_t builtin_id) /**< id of built-in to check on */
        -:  274:{
    34056:  275:  JERRY_ASSERT (obj_p != NULL && !ecma_is_lexical_environment (obj_p));
    34056:  276:  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);
        -:  277:
        -:  278:  /* If a built-in object is not instantiated, its value is NULL,
        -:  279:     hence it cannot be equal to a valid object. */
    34056:  280:  jmem_cpointer_t builtin_cp = JERRY_CONTEXT (ecma_builtin_objects)[builtin_id];
        -:  281:
    34056:  282:  return (builtin_cp != JMEM_CP_NULL && (obj_p == ECMA_GET_NON_NULL_POINTER (ecma_object_t, builtin_cp)));
        -:  283:} /* ecma_builtin_is */
        -:  284:
        -:  285:/**
        -:  286: * Get reference to specified built-in object
        -:  287: *
        -:  288: * Note:
        -:  289: *   Does not increase the reference counter.
        -:  290: *
        -:  291: * @return pointer to the object's instance
        -:  292: */
        -:  293:ecma_object_t *
    20976:  294:ecma_builtin_get (ecma_builtin_id_t builtin_id) /**< id of built-in to check on */
        -:  295:{
    20976:  296:  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);
        -:  297:
    20976:  298:  if (JERRY_UNLIKELY (JERRY_CONTEXT (ecma_builtin_objects)[builtin_id] == JMEM_CP_NULL))
        -:  299:  {
       30:  300:    ecma_instantiate_builtin (builtin_id);
        -:  301:  }
        -:  302:
    20976:  303:  return ECMA_GET_NON_NULL_POINTER (ecma_object_t, JERRY_CONTEXT (ecma_builtin_objects)[builtin_id]);
        -:  304:} /* ecma_builtin_get */
        -:  305:
        -:  306:/**
        -:  307: * Get reference to the global object
        -:  308: *
        -:  309: * Note:
        -:  310: *   Does not increase the reference counter.
        -:  311: *
        -:  312: * @return pointer to the global object
        -:  313: */
        -:  314:inline ecma_object_t * JERRY_ATTR_ALWAYS_INLINE
       12:  315:ecma_builtin_get_global (void)
        -:  316:{
       12:  317:  JERRY_ASSERT (JERRY_CONTEXT (ecma_builtin_objects)[ECMA_BUILTIN_ID_GLOBAL] != JMEM_CP_NULL);
        -:  318:
       12:  319:  return ECMA_GET_NON_NULL_POINTER (ecma_object_t, JERRY_CONTEXT (ecma_builtin_objects)[ECMA_BUILTIN_ID_GLOBAL]);
        -:  320:} /* ecma_builtin_get_global */
        -:  321:
        -:  322:/**
        -:  323: * Checks whether the given function is a built-in routine
        -:  324: *
        -:  325: * @return true - if the function object is a built-in routine
        -:  326: *         false - otherwise
        -:  327: */
        -:  328:inline bool JERRY_ATTR_ALWAYS_INLINE
    23570:  329:ecma_builtin_function_is_routine (ecma_object_t *func_obj_p) /**< function object */
        -:  330:{
    60230:  331:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION);
    60230:  332:  JERRY_ASSERT (ecma_get_object_is_builtin (func_obj_p));
        -:  333:
    60230:  334:  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) func_obj_p;
    60230:  335:  return (ext_func_obj_p->u.built_in.routine_id >= ECMA_BUILTIN_ID__COUNT);
        -:  336:} /* ecma_builtin_function_is_routine */
        -:  337:
        -:  338:/**
        -:  339: * Instantiate specified ECMA built-in object
        -:  340: */
        -:  341:static void
       38:  342:ecma_instantiate_builtin (ecma_builtin_id_t obj_builtin_id) /**< built-in id */
        -:  343:{
       38:  344:  JERRY_ASSERT (obj_builtin_id < ECMA_BUILTIN_ID__COUNT);
       38:  345:  JERRY_ASSERT (JERRY_CONTEXT (ecma_builtin_objects)[obj_builtin_id] == JMEM_CP_NULL);
        -:  346:
       38:  347:  ecma_builtin_descriptor_t builtin_desc = ecma_builtin_descriptors[obj_builtin_id];
       38:  348:  ecma_builtin_id_t object_prototype_builtin_id = (ecma_builtin_id_t) (builtin_desc >> ECMA_BUILTIN_PROTOTYPE_ID_SHIFT);
        -:  349:
        -:  350:  ecma_object_t *prototype_obj_p;
        -:  351:
        -:  352:  /* cppcheck-suppress arrayIndexOutOfBoundsCond */
       38:  353:  if (JERRY_UNLIKELY (object_prototype_builtin_id == ECMA_BUILTIN_ID__COUNT))
        -:  354:  {
        4:  355:    prototype_obj_p = NULL;
        -:  356:  }
        -:  357:  else
        -:  358:  {
       34:  359:    if (JERRY_CONTEXT (ecma_builtin_objects)[object_prototype_builtin_id] == JMEM_CP_NULL)
        -:  360:    {
        8:  361:      ecma_instantiate_builtin (object_prototype_builtin_id);
        -:  362:    }
       34:  363:    prototype_obj_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t,
        -:  364:                                                 JERRY_CONTEXT (ecma_builtin_objects)[object_prototype_builtin_id]);
       34:  365:    JERRY_ASSERT (prototype_obj_p != NULL);
        -:  366:  }
        -:  367:
       38:  368:  ecma_object_type_t obj_type = (ecma_object_type_t) (builtin_desc & ECMA_BUILTIN_OBJECT_TYPE_MASK);
        -:  369:
       38:  370:  bool is_extended_built_in = (obj_type == ECMA_OBJECT_TYPE_CLASS
       38:  371:                               || obj_type == ECMA_OBJECT_TYPE_ARRAY);
        -:  372:
       38:  373:  size_t ext_object_size = (is_extended_built_in ? sizeof (ecma_extended_built_in_object_t)
       38:  374:                                                 : sizeof (ecma_extended_object_t));
        -:  375:
       38:  376:  size_t property_count = ecma_builtin_get_property_count (obj_builtin_id);
        -:  377:
       38:  378:  if (property_count > 32)
        -:  379:  {
        -:  380:    /* Only 64 extra properties supported at the moment.
        -:  381:     * This can be extended to 256 later. */
        2:  382:    JERRY_ASSERT (property_count <= (32 + 64));
        -:  383:
        2:  384:    ext_object_size += sizeof (uint32_t) * 2;
        -:  385:  }
        -:  386:
       38:  387:  ecma_object_t *obj_p = ecma_create_object (prototype_obj_p, ext_object_size, obj_type);
        -:  388:
       38:  389:  if (JERRY_UNLIKELY (obj_builtin_id == ECMA_BUILTIN_ID_TYPE_ERROR_THROWER))
        -:  390:  {
        2:  391:    ecma_op_ordinary_object_prevent_extensions (obj_p);
        -:  392:  }
        -:  393:  else
        -:  394:  {
       36:  395:    ecma_op_ordinary_object_set_extensible (obj_p);
        -:  396:  }
        -:  397:
        -:  398:  /*
        -:  399:   * [[Class]] property of built-in object is not stored explicitly.
        -:  400:   *
        -:  401:   * See also: ecma_object_get_class_name
        -:  402:   */
        -:  403:
       38:  404:  ecma_set_object_is_builtin (obj_p);
        -:  405:  ecma_built_in_props_t *built_in_props_p;
        -:  406:
       38:  407:  if (is_extended_built_in)
        -:  408:  {
        2:  409:    built_in_props_p = &((ecma_extended_built_in_object_t *) obj_p)->built_in;
        -:  410:  }
        -:  411:  else
        -:  412:  {
       36:  413:    built_in_props_p = &((ecma_extended_object_t *) obj_p)->u.built_in;
        -:  414:  }
        -:  415:
       38:  416:  built_in_props_p->id = (uint8_t) obj_builtin_id;
       38:  417:  built_in_props_p->routine_id = (uint16_t) obj_builtin_id;
       38:  418:  built_in_props_p->u.instantiated_bitset[0] = 0;
        -:  419:
       38:  420:  if (property_count > 32)
        -:  421:  {
        2:  422:    built_in_props_p->length_and_bitset_size = 1 << ECMA_BUILT_IN_BITSET_SHIFT;
        -:  423:
        2:  424:    uint32_t *instantiated_bitset_p = built_in_props_p->u.instantiated_bitset;
        2:  425:    instantiated_bitset_p[1] = 0;
        2:  426:    instantiated_bitset_p[2] = 0;
        -:  427:  }
        -:  428:  else
        -:  429:  {
       36:  430:    built_in_props_p->length_and_bitset_size = 0;
        -:  431:  }
        -:  432:
        -:  433:  /** Initializing [[PrimitiveValue]] properties of built-in prototype objects */
       38:  434:  switch (obj_builtin_id)
        -:  435:  {
        -:  436:#if ENABLED (JERRY_BUILTIN_ARRAY)
        2:  437:    case ECMA_BUILTIN_ID_ARRAY_PROTOTYPE:
        -:  438:    {
        2:  439:      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_ARRAY);
        2:  440:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:  441:
        2:  442:      ext_object_p->u.array.length = 0;
        2:  443:      ext_object_p->u.array.u.length_prop = ECMA_PROPERTY_FLAG_WRITABLE | ECMA_PROPERTY_TYPE_VIRTUAL;
        2:  444:      break;
        -:  445:    }
        -:  446:#endif /* ENABLED (JERRY_BUILTIN_ARRAY) */
        -:  447:
        -:  448:#if !ENABLED (JERRY_ES2015)
        -:  449:#if ENABLED (JERRY_BUILTIN_STRING)
    #####:  450:    case ECMA_BUILTIN_ID_STRING_PROTOTYPE:
        -:  451:    {
    #####:  452:      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_CLASS);
    #####:  453:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:  454:
    #####:  455:      ext_object_p->u.class_prop.class_id = LIT_MAGIC_STRING_STRING_UL;
    #####:  456:      ext_object_p->u.class_prop.u.value = ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY);
    #####:  457:      break;
        -:  458:    }
        -:  459:#endif /* ENABLED (JERRY_BUILTIN_STRING) */
        -:  460:
        -:  461:#if ENABLED (JERRY_BUILTIN_NUMBER)
    #####:  462:    case ECMA_BUILTIN_ID_NUMBER_PROTOTYPE:
        -:  463:    {
    #####:  464:      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_CLASS);
    #####:  465:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:  466:
    #####:  467:      ext_object_p->u.class_prop.class_id = LIT_MAGIC_STRING_NUMBER_UL;
    #####:  468:      ext_object_p->u.class_prop.u.value = ecma_make_integer_value (0);
    #####:  469:      break;
        -:  470:    }
        -:  471:#endif /* ENABLED (JERRY_BUILTIN_NUMBER) */
        -:  472:
        -:  473:#if ENABLED (JERRY_BUILTIN_BOOLEAN)
    #####:  474:    case ECMA_BUILTIN_ID_BOOLEAN_PROTOTYPE:
        -:  475:    {
    #####:  476:      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_CLASS);
    #####:  477:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:  478:
    #####:  479:      ext_object_p->u.class_prop.class_id = LIT_MAGIC_STRING_BOOLEAN_UL;
    #####:  480:      ext_object_p->u.class_prop.u.value = ECMA_VALUE_FALSE;
    #####:  481:      break;
        -:  482:    }
        -:  483:#endif /* ENABLED (JERRY_BUILTIN_BOOLEAN) */
        -:  484:
        -:  485:#if ENABLED (JERRY_BUILTIN_DATE)
    #####:  486:    case ECMA_BUILTIN_ID_DATE_PROTOTYPE:
        -:  487:    {
    #####:  488:      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_CLASS);
    #####:  489:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:  490:
    #####:  491:      ext_object_p->u.class_prop.class_id = LIT_MAGIC_STRING_DATE_UL;
        -:  492:
    #####:  493:      ecma_number_t *prim_prop_num_value_p = ecma_alloc_number ();
    #####:  494:      *prim_prop_num_value_p = ecma_number_make_nan ();
    #####:  495:      ECMA_SET_INTERNAL_VALUE_POINTER (ext_object_p->u.class_prop.u.value, prim_prop_num_value_p);
    #####:  496:      break;
        -:  497:    }
        -:  498:#endif /* ENABLED (JERRY_BUILTIN_DATE) */
        -:  499:
        -:  500:#if ENABLED (JERRY_BUILTIN_REGEXP)
    #####:  501:    case ECMA_BUILTIN_ID_REGEXP_PROTOTYPE:
        -:  502:    {
    #####:  503:      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_CLASS);
    #####:  504:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:  505:
    #####:  506:      ext_object_p->u.class_prop.class_id = LIT_MAGIC_STRING_REGEXP_UL;
        -:  507:
    #####:  508:      re_compiled_code_t *bc_p = re_compile_bytecode (ecma_get_magic_string (LIT_MAGIC_STRING_EMPTY_NON_CAPTURE_GROUP),
        -:  509:                                                      RE_FLAG_EMPTY);
        -:  510:
    #####:  511:      JERRY_ASSERT (bc_p != NULL);
        -:  512:
    #####:  513:      ECMA_SET_INTERNAL_VALUE_POINTER (ext_object_p->u.class_prop.u.value, bc_p);
        -:  514:
    #####:  515:      break;
        -:  516:    }
        -:  517:#endif /* ENABLED (JERRY_BUILTIN_REGEXP) */
        -:  518:#endif /* !ENABLED (JERRY_ES2015) */
       36:  519:    default:
        -:  520:    {
       36:  521:      JERRY_ASSERT (obj_type != ECMA_OBJECT_TYPE_CLASS);
       36:  522:      break;
        -:  523:    }
        -:  524:  }
        -:  525:
       38:  526:  ECMA_SET_NON_NULL_POINTER (JERRY_CONTEXT (ecma_builtin_objects)[obj_builtin_id], obj_p);
       38:  527:} /* ecma_instantiate_builtin */
        -:  528:
        -:  529:/**
        -:  530: * Finalize ECMA built-in objects
        -:  531: */
        -:  532:void
    #####:  533:ecma_finalize_builtins (void)
        -:  534:{
    #####:  535:  for (ecma_builtin_id_t id = (ecma_builtin_id_t) 0;
        -:  536:       id < ECMA_BUILTIN_ID__COUNT;
    #####:  537:       id = (ecma_builtin_id_t) (id + 1))
        -:  538:  {
    #####:  539:    if (JERRY_CONTEXT (ecma_builtin_objects)[id] != JMEM_CP_NULL)
        -:  540:    {
    #####:  541:      ecma_deref_object (ECMA_GET_NON_NULL_POINTER (ecma_object_t, JERRY_CONTEXT (ecma_builtin_objects)[id]));
    #####:  542:      JERRY_CONTEXT (ecma_builtin_objects)[id] = JMEM_CP_NULL;
        -:  543:    }
        -:  544:  }
    #####:  545:} /* ecma_finalize_builtins */
        -:  546:
        -:  547:/**
        -:  548: * Construct a Function object for specified built-in routine
        -:  549: *
        -:  550: * See also: ECMA-262 v5, 15
        -:  551: *
        -:  552: * @return pointer to constructed Function object
        -:  553: */
        -:  554:static ecma_object_t *
       10:  555:ecma_builtin_make_function_object_for_routine (ecma_builtin_id_t builtin_id, /**< identifier of built-in object */
        -:  556:                                               uint16_t routine_id, /**< builtin-wide identifier of the built-in
        -:  557:                                                                     *   object's routine property */
        -:  558:                                               uint16_t name_id, /**< magic string id of 'name' property */
        -:  559:                                               uint8_t length_prop_value) /**< value of 'length' property */
        -:  560:{
       10:  561:  JERRY_ASSERT (length_prop_value < (1 << ECMA_BUILT_IN_BITSET_SHIFT));
        -:  562:
       10:  563:  ecma_object_t *prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  564:
       10:  565:  size_t ext_object_size = sizeof (ecma_extended_object_t);
        -:  566:
       10:  567:  ecma_object_t *func_obj_p = ecma_create_object (prototype_obj_p,
        -:  568:                                                  ext_object_size,
        -:  569:                                                  ECMA_OBJECT_TYPE_FUNCTION);
        -:  570:
       10:  571:  ecma_set_object_is_builtin (func_obj_p);
        -:  572:
       10:  573:  JERRY_ASSERT (routine_id >= ECMA_BUILTIN_ID__COUNT);
        -:  574:
       10:  575:  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) func_obj_p;
       10:  576:  ext_func_obj_p->u.built_in.id = (uint8_t) builtin_id;
       10:  577:  ext_func_obj_p->u.built_in.routine_id = routine_id;
       10:  578:  ext_func_obj_p->u.built_in.u.builtin_routine.name = name_id;
       10:  579:  ext_func_obj_p->u.built_in.u.builtin_routine.bitset = 0;
        -:  580:
       10:  581:  ext_func_obj_p->u.built_in.length_and_bitset_size = length_prop_value;
        -:  582:
       10:  583:  return func_obj_p;
        -:  584:} /* ecma_builtin_make_function_object_for_routine */
        -:  585:
        -:  586:/**
        -:  587: * Construct a Function object for specified built-in accessor getter
        -:  588: *
        -:  589: * @return pointer to constructed accessor getter Function object
        -:  590: */
        -:  591:static ecma_object_t *
    #####:  592:ecma_builtin_make_function_object_for_getter_accessor (ecma_builtin_id_t builtin_id, /**< id of built-in object */
        -:  593:                                                       uint16_t routine_id, /**< builtin-wide id of the built-in
        -:  594:                                                                            *   object's routine property */
        -:  595:                                                       uint16_t name_id) /**< magic string id of 'name' property */
        -:  596:{
    #####:  597:  return ecma_builtin_make_function_object_for_routine (builtin_id, routine_id, name_id, 0);
        -:  598:} /* ecma_builtin_make_function_object_for_getter_accessor */
        -:  599:
        -:  600:/**
        -:  601: * Construct a Function object for specified built-in accessor setter
        -:  602: *
        -:  603: * @return pointer to constructed accessor getter Function object
        -:  604: */
        -:  605:static ecma_object_t *
    #####:  606:ecma_builtin_make_function_object_for_setter_accessor (ecma_builtin_id_t builtin_id, /**< id of built-in object */
        -:  607:                                                       uint16_t routine_id, /**< builtin-wide id of the built-in
        -:  608:                                                                            *   object's routine property */
        -:  609:                                                       uint16_t name_id) /**< magic string id of 'name' property */
        -:  610:{
    #####:  611:  return ecma_builtin_make_function_object_for_routine (builtin_id, routine_id, name_id, 1);
        -:  612:} /* ecma_builtin_make_function_object_for_setter_accessor */
        -:  613:
        -:  614:/**
        -:  615: * Lazy instantiation of builtin routine property of builtin object
        -:  616: *
        -:  617: * If the property is not instantiated yet, instantiate the property and
        -:  618: * return pointer to the instantiated property.
        -:  619: *
        -:  620: * @return pointer property, if one was instantiated,
        -:  621: *         NULL - otherwise.
        -:  622: */
        -:  623:ecma_property_t *
    #####:  624:ecma_builtin_routine_try_to_instantiate_property (ecma_object_t *object_p, /**< object */
        -:  625:                                                  ecma_string_t *string_p) /**< property's name */
        -:  626:{
    #####:  627:  JERRY_ASSERT (ecma_get_object_is_builtin (object_p));
    #####:  628:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION);
    #####:  629:  JERRY_ASSERT (ecma_builtin_function_is_routine (object_p));
        -:  630:
    #####:  631:  if (ecma_string_is_length (string_p))
        -:  632:  {
        -:  633:    /*
        -:  634:     * Lazy instantiation of 'length' property
        -:  635:     */
        -:  636:
    #####:  637:    ecma_property_t *len_prop_p;
    #####:  638:    ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
        -:  639:#if ENABLED (JERRY_ES2015)
    #####:  640:    uint16_t *bitset_p = &ext_func_p->u.built_in.u.builtin_routine.bitset;
    #####:  641:    if (*bitset_p & (1u << 0))
        -:  642:    {
        -:  643:      /* length property was already instantiated */
    #####:  644:      return NULL;
        -:  645:    }
        -:  646:    /* We mark that the property was lazily instantiated,
        -:  647:     * as it is configurable and so can be deleted (ECMA-262 v6, 19.2.4.1) */
    #####:  648:    *bitset_p |= (1u << 0);
    #####:  649:    ecma_property_value_t *len_prop_value_p = ecma_create_named_data_property (object_p,
        -:  650:                                                                               string_p,
        -:  651:                                                                               ECMA_PROPERTY_FLAG_CONFIGURABLE,
        -:  652:                                                                               &len_prop_p);
        -:  653:#else /* !ENABLED (JERRY_ES2015) */
        -:  654:    /* We don't need to mark that the property was already lazy instantiated,
        -:  655:     * as it is non-configurable and so can't be deleted (ECMA-262 v5, 13.2.5) */
    #####:  656:    ecma_property_value_t *len_prop_value_p = ecma_create_named_data_property (object_p,
        -:  657:                                                                               string_p,
        -:  658:                                                                               ECMA_PROPERTY_FIXED,
        -:  659:                                                                               &len_prop_p);
        -:  660:#endif /* ENABLED (JERRY_ES2015) */
        -:  661:
    #####:  662:    uint8_t length = ext_func_p->u.built_in.length_and_bitset_size;
    #####:  663:    JERRY_ASSERT (length < (1 << ECMA_BUILT_IN_BITSET_SHIFT));
        -:  664:
    #####:  665:    len_prop_value_p->value = ecma_make_integer_value (length);
        -:  666:
    #####:  667:    return len_prop_p;
        -:  668:  }
        -:  669:
    #####:  670:  return NULL;
        -:  671:} /* ecma_builtin_routine_try_to_instantiate_property */
        -:  672:
        -:  673:/**
        -:  674: * If the property's name is one of built-in properties of the object
        -:  675: * that is not instantiated yet, instantiate the property and
        -:  676: * return pointer to the instantiated property.
        -:  677: *
        -:  678: * @return pointer property, if one was instantiated,
        -:  679: *         NULL - otherwise.
        -:  680: */
        -:  681:ecma_property_t *
    39318:  682:ecma_builtin_try_to_instantiate_property (ecma_object_t *object_p, /**< object */
        -:  683:                                          ecma_string_t *string_p) /**< property's name */
        -:  684:{
    39318:  685:  JERRY_ASSERT (ecma_get_object_is_builtin (object_p));
        -:  686:
    39318:  687:  lit_magic_string_id_t magic_string_id = ecma_get_string_magic (string_p);
        -:  688:
        -:  689:#if ENABLED (JERRY_ES2015)
    39318:  690:  if (JERRY_UNLIKELY (ecma_prop_name_is_symbol (string_p)))
        -:  691:  {
    #####:  692:    if (string_p->u.hash & ECMA_GLOBAL_SYMBOL_FLAG)
        -:  693:    {
    #####:  694:      magic_string_id = (string_p->u.hash >> ECMA_GLOBAL_SYMBOL_SHIFT);
        -:  695:    }
        -:  696:  }
        -:  697:#endif /* ENABLED (JERRY_ES2015) */
        -:  698:
    39318:  699:  if (magic_string_id == LIT_MAGIC_STRING__COUNT)
        -:  700:  {
     5262:  701:    return NULL;
        -:  702:  }
        -:  703:
        -:  704:  ecma_built_in_props_t *built_in_props_p;
    34056:  705:  ecma_object_type_t object_type = ecma_get_object_type (object_p);
    52386:  706:  JERRY_ASSERT (object_type != ECMA_OBJECT_TYPE_FUNCTION || !ecma_builtin_function_is_routine (object_p));
        -:  707:
    34056:  708:  if (object_type == ECMA_OBJECT_TYPE_CLASS || object_type == ECMA_OBJECT_TYPE_ARRAY)
        -:  709:  {
        2:  710:    built_in_props_p = &((ecma_extended_built_in_object_t *) object_p)->built_in;
        -:  711:  }
        -:  712:  else
        -:  713:  {
    34054:  714:    built_in_props_p = &((ecma_extended_object_t *) object_p)->u.built_in;
        -:  715:  }
        -:  716:
    34056:  717:  ecma_builtin_id_t builtin_id = (ecma_builtin_id_t) built_in_props_p->id;
        -:  718:
    34056:  719:  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);
    34056:  720:  JERRY_ASSERT (ecma_builtin_is (object_p, builtin_id));
        -:  721:
    34056:  722:  const ecma_builtin_property_descriptor_t *property_list_p = ecma_builtin_property_list_references[builtin_id];
        -:  723:
    34056:  724:  const ecma_builtin_property_descriptor_t *curr_property_p = property_list_p;
        -:  725:
   296174:  726:  while (curr_property_p->magic_string_id != magic_string_id)
        -:  727:  {
   262096:  728:    if (curr_property_p->magic_string_id == LIT_MAGIC_STRING__COUNT)
        -:  729:    {
    34034:  730:      return NULL;
        -:  731:    }
   228062:  732:    curr_property_p++;
        -:  733:  }
        -:  734:
       22:  735:  uint32_t index = (uint32_t) (curr_property_p - property_list_p);
        -:  736:
       22:  737:  uint32_t *bitset_p = built_in_props_p->u.instantiated_bitset + (index >> 5);
        -:  738:
       22:  739:  uint32_t bit_for_index = (uint32_t) (1u << (index & 0x1f));
        -:  740:
       22:  741:  if (*bitset_p & bit_for_index)
        -:  742:  {
        -:  743:    /* This property was instantiated before. */
    #####:  744:    return NULL;
        -:  745:  }
        -:  746:
       22:  747:  *bitset_p |= bit_for_index;
        -:  748:
       22:  749:  ecma_value_t value = ECMA_VALUE_EMPTY;
       22:  750:  bool is_accessor = false;
       22:  751:  ecma_object_t *getter_p = NULL;
       22:  752:  ecma_object_t *setter_p = NULL;
        -:  753:
       22:  754:  switch (curr_property_p->type)
        -:  755:  {
    #####:  756:    case ECMA_BUILTIN_PROPERTY_SIMPLE:
        -:  757:    {
    #####:  758:      value = curr_property_p->value;
    #####:  759:      break;
        -:  760:    }
    #####:  761:    case ECMA_BUILTIN_PROPERTY_NUMBER:
        -:  762:    {
    #####:  763:      ecma_number_t num = 0.0;
        -:  764:
    #####:  765:      if (curr_property_p->value < ECMA_BUILTIN_NUMBER_MAX)
        -:  766:      {
    #####:  767:        num = curr_property_p->value;
        -:  768:      }
    #####:  769:      else if (curr_property_p->value < ECMA_BUILTIN_NUMBER_NAN)
        -:  770:      {
        -:  771:        static const ecma_number_t builtin_number_list[] =
        -:  772:        {
        -:  773:          ECMA_NUMBER_MAX_VALUE,
        -:  774:          ECMA_NUMBER_MIN_VALUE,
        -:  775:#if ENABLED (JERRY_ES2015)
        -:  776:          ECMA_NUMBER_EPSILON,
        -:  777:          ECMA_NUMBER_MAX_SAFE_INTEGER,
        -:  778:          ECMA_NUMBER_MIN_SAFE_INTEGER,
        -:  779:#endif /* ENABLED (JERRY_ES2015) */
        -:  780:          ECMA_NUMBER_E,
        -:  781:          ECMA_NUMBER_PI,
        -:  782:          ECMA_NUMBER_LN10,
        -:  783:          ECMA_NUMBER_LN2,
        -:  784:          ECMA_NUMBER_LOG2E,
        -:  785:          ECMA_NUMBER_LOG10E,
        -:  786:          ECMA_NUMBER_SQRT2,
        -:  787:          ECMA_NUMBER_SQRT_1_2,
        -:  788:        };
        -:  789:
    #####:  790:        num = builtin_number_list[curr_property_p->value - ECMA_BUILTIN_NUMBER_MAX];
        -:  791:      }
        -:  792:      else
        -:  793:      {
    #####:  794:        switch (curr_property_p->value)
        -:  795:        {
    #####:  796:          case ECMA_BUILTIN_NUMBER_POSITIVE_INFINITY:
        -:  797:          {
    #####:  798:            num = ecma_number_make_infinity (false);
    #####:  799:            break;
        -:  800:          }
    #####:  801:          case ECMA_BUILTIN_NUMBER_NEGATIVE_INFINITY:
        -:  802:          {
    #####:  803:            num = ecma_number_make_infinity (true);
    #####:  804:            break;
        -:  805:          }
    #####:  806:          default:
        -:  807:          {
    #####:  808:            JERRY_ASSERT (curr_property_p->value == ECMA_BUILTIN_NUMBER_NAN);
        -:  809:
    #####:  810:            num = ecma_number_make_nan ();
    #####:  811:            break;
        -:  812:          }
        -:  813:        }
        -:  814:      }
        -:  815:
    #####:  816:      value = ecma_make_number_value (num);
    #####:  817:      break;
        -:  818:    }
    #####:  819:    case ECMA_BUILTIN_PROPERTY_STRING:
        -:  820:    {
    #####:  821:      value = ecma_make_magic_string_value ((lit_magic_string_id_t) curr_property_p->value);
    #####:  822:      break;
        -:  823:    }
        -:  824:#if ENABLED (JERRY_ES2015)
        2:  825:    case ECMA_BUILTIN_PROPERTY_SYMBOL:
        -:  826:    {
        2:  827:      ecma_stringbuilder_t builder = ecma_stringbuilder_create_raw ((lit_utf8_byte_t *) "Symbol.", 7);
        -:  828:
        2:  829:      lit_magic_string_id_t symbol_desc_id = (lit_magic_string_id_t) curr_property_p->value;
        -:  830:
        2:  831:      ecma_stringbuilder_append_magic (&builder, symbol_desc_id);
        -:  832:
        2:  833:      ecma_value_t symbol_desc_value = ecma_make_string_value (ecma_stringbuilder_finalize (&builder));
        -:  834:
        2:  835:      ecma_string_t *symbol_p = ecma_new_symbol_from_descriptor_string (symbol_desc_value);
        2:  836:      lit_magic_string_id_t symbol_id = (lit_magic_string_id_t) curr_property_p->magic_string_id;
        2:  837:      symbol_p->u.hash = (uint16_t) ((symbol_id << ECMA_GLOBAL_SYMBOL_SHIFT) | ECMA_GLOBAL_SYMBOL_FLAG);
        -:  838:
        2:  839:      value = ecma_make_symbol_value (symbol_p);
        2:  840:      break;
        -:  841:    }
    #####:  842:    case ECMA_BUILTIN_PROPERTY_INTRINSIC_PROPERTY:
        -:  843:    {
    #####:  844:      value = ecma_op_object_get_by_magic_id (ecma_builtin_get (ECMA_BUILTIN_ID_INTRINSIC_OBJECT),
    #####:  845:                                              (lit_magic_string_id_t) curr_property_p->value);
    #####:  846:      break;
        -:  847:    }
    #####:  848:    case ECMA_BUILTIN_PROPERTY_ACCESSOR_BUILTIN_FUNCTION:
        -:  849:    {
    #####:  850:      is_accessor = true;
    #####:  851:      uint16_t getter_id = ECMA_ACCESSOR_READ_WRITE_GET_GETTER_ID (curr_property_p->value);
    #####:  852:      uint16_t setter_id = ECMA_ACCESSOR_READ_WRITE_GET_SETTER_ID (curr_property_p->value);
    #####:  853:      getter_p = ecma_builtin_get (getter_id);
    #####:  854:      setter_p = ecma_builtin_get (setter_id);
    #####:  855:      ecma_ref_object (getter_p);
    #####:  856:      ecma_ref_object (setter_p);
    #####:  857:      break;
        -:  858:    }
        -:  859:#endif /* ENABLED (JERRY_ES2015) */
       10:  860:    case ECMA_BUILTIN_PROPERTY_OBJECT:
        -:  861:    {
       10:  862:      ecma_object_t *builtin_object_p = ecma_builtin_get ((ecma_builtin_id_t) curr_property_p->value);
       10:  863:      ecma_ref_object (builtin_object_p);
       10:  864:      value = ecma_make_object_value (builtin_object_p);
       10:  865:      break;
        -:  866:    }
       10:  867:    case ECMA_BUILTIN_PROPERTY_ROUTINE:
        -:  868:    {
        -:  869:      ecma_object_t *func_obj_p;
       30:  870:      func_obj_p = ecma_builtin_make_function_object_for_routine (builtin_id,
       10:  871:                                                                  ECMA_GET_ROUTINE_ID (curr_property_p->value),
       10:  872:                                                                  curr_property_p->magic_string_id,
       10:  873:                                                                  ECMA_GET_ROUTINE_LENGTH (curr_property_p->value));
       10:  874:      value = ecma_make_object_value (func_obj_p);
       10:  875:      break;
        -:  876:    }
    #####:  877:    case ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_WRITE:
        -:  878:    {
    #####:  879:      is_accessor = true;
    #####:  880:      uint16_t getter_id = ECMA_ACCESSOR_READ_WRITE_GET_GETTER_ID (curr_property_p->value);
    #####:  881:      uint16_t setter_id = ECMA_ACCESSOR_READ_WRITE_GET_SETTER_ID (curr_property_p->value);
    #####:  882:      getter_p = ecma_builtin_make_function_object_for_getter_accessor (builtin_id,
        -:  883:                                                                        getter_id,
    #####:  884:                                                                        curr_property_p->magic_string_id);
    #####:  885:      setter_p = ecma_builtin_make_function_object_for_setter_accessor (builtin_id,
        -:  886:                                                                        setter_id,
    #####:  887:                                                                        curr_property_p->magic_string_id);
    #####:  888:      break;
        -:  889:    }
    #####:  890:    default:
        -:  891:    {
    #####:  892:      JERRY_ASSERT (curr_property_p->type == ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_ONLY);
        -:  893:
    #####:  894:      is_accessor = true;
    #####:  895:      getter_p = ecma_builtin_make_function_object_for_getter_accessor (builtin_id,
    #####:  896:                                                                        curr_property_p->value,
    #####:  897:                                                                        curr_property_p->magic_string_id);
    #####:  898:      break;
        -:  899:    }
        -:  900:  }
        -:  901:
       22:  902:  ecma_property_t *prop_p;
        -:  903:
       22:  904:  if (is_accessor)
        -:  905:  {
    #####:  906:    ecma_create_named_accessor_property (object_p,
        -:  907:                                         string_p,
        -:  908:                                         getter_p,
        -:  909:                                         setter_p,
    #####:  910:                                         curr_property_p->attributes,
        -:  911:                                         &prop_p);
        -:  912:
    #####:  913:    if (setter_p)
        -:  914:    {
    #####:  915:      ecma_deref_object (setter_p);
        -:  916:    }
    #####:  917:    if (getter_p)
        -:  918:    {
    #####:  919:      ecma_deref_object (getter_p);
        -:  920:    }
        -:  921:  }
        -:  922:  else
        -:  923:  {
       22:  924:    ecma_property_value_t *prop_value_p = ecma_create_named_data_property (object_p,
        -:  925:                                                                           string_p,
       22:  926:                                                                           curr_property_p->attributes,
        -:  927:                                                                           &prop_p);
       22:  928:    prop_value_p->value = value;
        -:  929:
        -:  930:    /* Reference count of objects must be decreased. */
       22:  931:    if (ecma_is_value_object (value))
        -:  932:    {
       20:  933:      ecma_free_value (value);
        -:  934:    }
        -:  935:  }
        -:  936:
       22:  937:  return prop_p;
        -:  938:} /* ecma_builtin_try_to_instantiate_property */
        -:  939:
        -:  940:/**
        -:  941: * List names of a built-in function's lazy instantiated properties
        -:  942: *
        -:  943: * See also:
        -:  944: *          ecma_builtin_routine_try_to_instantiate_property
        -:  945: */
        -:  946:void
    #####:  947:ecma_builtin_routine_list_lazy_property_names (ecma_object_t *object_p, /**< a built-in object */
        -:  948:                                               uint32_t opts, /**< listing options using flags
        -:  949:                                                               *   from ecma_list_properties_options_t */
        -:  950:                                               ecma_collection_t *main_collection_p, /**< 'main' collection */
        -:  951:                                               ecma_collection_t *non_enum_collection_p) /**< skipped 'non-enumerable'
        -:  952:                                                                                          *   collection */
        -:  953:{
    #####:  954:  JERRY_ASSERT (ecma_get_object_is_builtin (object_p));
    #####:  955:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION);
    #####:  956:  JERRY_ASSERT (ecma_builtin_function_is_routine (object_p));
        -:  957:
    #####:  958:  const bool separate_enumerable = (opts & ECMA_LIST_ENUMERABLE) != 0;
    #####:  959:  const bool is_array_indices_only = (opts & ECMA_LIST_ARRAY_INDICES) != 0;
        -:  960:
    #####:  961:  ecma_collection_t *for_enumerable_p = main_collection_p;
        -:  962:  JERRY_UNUSED (for_enumerable_p);
        -:  963:
    #####:  964:  ecma_collection_t *for_non_enumerable_p = separate_enumerable ? non_enum_collection_p : main_collection_p;
        -:  965:
    #####:  966:  if (!is_array_indices_only)
        -:  967:  {
        -:  968:#if ENABLED (JERRY_ES2015)
    #####:  969:    ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
    #####:  970:    if (!(ext_func_p->u.built_in.u.builtin_routine.bitset & (1u << 0)))
        -:  971:    {
        -:  972:      /* Unintialized 'length' property is non-enumerable (ECMA-262 v6, 19.2.4.1) */
    #####:  973:      ecma_collection_push_back (for_non_enumerable_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
        -:  974:    }
        -:  975:#else /* !ENABLED (JERRY_ES2015) */
        -:  976:    /* 'length' property is non-enumerable (ECMA-262 v5, 15) */
    #####:  977:    ecma_collection_push_back (for_non_enumerable_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
        -:  978:#endif /* ENABLED (JERRY_ES2015) */
        -:  979:  }
    #####:  980:} /* ecma_builtin_routine_list_lazy_property_names */
        -:  981:
        -:  982:/**
        -:  983: * List names of a built-in object's lazy instantiated properties
        -:  984: *
        -:  985: * See also:
        -:  986: *          ecma_builtin_try_to_instantiate_property
        -:  987: */
        -:  988:void
    #####:  989:ecma_builtin_list_lazy_property_names (ecma_object_t *object_p, /**< a built-in object */
        -:  990:                                       uint32_t opts, /**< listing options using flags
        -:  991:                                                       *   from ecma_list_properties_options_t */
        -:  992:                                       ecma_collection_t *main_collection_p, /**< 'main' collection */
        -:  993:                                       ecma_collection_t *non_enum_collection_p) /**< skipped 'non-enumerable'
        -:  994:                                                                                  *   collection */
        -:  995:{
    #####:  996:  JERRY_ASSERT (ecma_get_object_is_builtin (object_p));
    #####:  997:  JERRY_ASSERT (ecma_get_object_type (object_p) != ECMA_OBJECT_TYPE_FUNCTION
        -:  998:                || !ecma_builtin_function_is_routine (object_p));
        -:  999:
    #####: 1000:  const bool separate_enumerable = (opts & ECMA_LIST_ENUMERABLE) != 0;
    #####: 1001:  const bool is_array_indices_only = (opts & ECMA_LIST_ARRAY_INDICES) != 0;
        -: 1002:
        -: 1003:  ecma_built_in_props_t *built_in_props_p;
    #####: 1004:  ecma_object_type_t object_type = ecma_get_object_type (object_p);
        -: 1005:
    #####: 1006:  if (object_type == ECMA_OBJECT_TYPE_CLASS || object_type == ECMA_OBJECT_TYPE_ARRAY)
        -: 1007:  {
    #####: 1008:    built_in_props_p = &((ecma_extended_built_in_object_t *) object_p)->built_in;
        -: 1009:  }
        -: 1010:  else
        -: 1011:  {
    #####: 1012:    built_in_props_p = &((ecma_extended_object_t *) object_p)->u.built_in;
        -: 1013:  }
        -: 1014:
    #####: 1015:  ecma_builtin_id_t builtin_id = (ecma_builtin_id_t) built_in_props_p->id;
        -: 1016:
    #####: 1017:  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);
    #####: 1018:  JERRY_ASSERT (ecma_builtin_is (object_p, builtin_id));
        -: 1019:
    #####: 1020:  const ecma_builtin_property_descriptor_t *curr_property_p = ecma_builtin_property_list_references[builtin_id];
        -: 1021:
    #####: 1022:  ecma_length_t index = 0;
    #####: 1023:  uint32_t *bitset_p = built_in_props_p->u.instantiated_bitset;
        -: 1024:
    #####: 1025:  ecma_collection_t *for_non_enumerable_p = (separate_enumerable ? non_enum_collection_p
    #####: 1026:                                                                 : main_collection_p);
        -: 1027:
    #####: 1028:  while (curr_property_p->magic_string_id != LIT_MAGIC_STRING__COUNT)
        -: 1029:  {
    #####: 1030:    if (index == 32)
        -: 1031:    {
    #####: 1032:      bitset_p++;
    #####: 1033:      index = 0;
        -: 1034:    }
        -: 1035:
        -: 1036:#if ENABLED (JERRY_ES2015)
        -: 1037:    /* Builtin symbol properties are internal magic strings which must not be listed */
    #####: 1038:    if (curr_property_p->magic_string_id > LIT_NON_INTERNAL_MAGIC_STRING__COUNT)
        -: 1039:    {
    #####: 1040:      curr_property_p++;
    #####: 1041:      continue;
        -: 1042:    }
        -: 1043:#endif /* ENABLED (JERRY_ES2015) */
        -: 1044:
    #####: 1045:    ecma_string_t *name_p = ecma_get_magic_string ((lit_magic_string_id_t) curr_property_p->magic_string_id);
        -: 1046:
    #####: 1047:    if (is_array_indices_only && ecma_string_get_array_index (name_p) == ECMA_STRING_NOT_ARRAY_INDEX)
        -: 1048:    {
    #####: 1049:      curr_property_p++;
    #####: 1050:      continue;
        -: 1051:    }
        -: 1052:
    #####: 1053:    uint32_t bit_for_index = (uint32_t) 1u << index;
        -: 1054:
    #####: 1055:    if (!(*bitset_p & bit_for_index) || ecma_op_ordinary_object_has_own_property (object_p, name_p))
        -: 1056:    {
    #####: 1057:      ecma_value_t name = ecma_make_magic_string_value ((lit_magic_string_id_t) curr_property_p->magic_string_id);
        -: 1058:
        -: 1059:#if ENABLED (JERRY_ES2015)
    #####: 1060:      if (curr_property_p->attributes & ECMA_PROPERTY_FLAG_ENUMERABLE)
        -: 1061:      {
    #####: 1062:        ecma_collection_push_back (main_collection_p, name);
        -: 1063:      }
        -: 1064:      else
        -: 1065:#endif /* ENABLED (JERRY_ES2015) */
        -: 1066:      {
    #####: 1067:        ecma_collection_push_back (for_non_enumerable_p, name);
        -: 1068:      }
        -: 1069:    }
        -: 1070:
    #####: 1071:    curr_property_p++;
    #####: 1072:    index++;
        -: 1073:  }
    #####: 1074:} /* ecma_builtin_list_lazy_property_names */
        -: 1075:
        -: 1076:/**
        -: 1077: * Dispatcher of built-in routines
        -: 1078: *
        -: 1079: * @return ecma value
        -: 1080: *         Returned value must be freed with ecma_free_value.
        -: 1081: */
        -: 1082:static ecma_value_t
     7854: 1083:ecma_builtin_dispatch_routine (ecma_extended_object_t *func_obj_p, /**< builtin object */
        -: 1084:                               ecma_value_t this_arg_value, /**< 'this' argument value */
        -: 1085:                               const ecma_value_t *arguments_list_p, /**< list of arguments passed to routine */
        -: 1086:                               ecma_length_t arguments_list_len) /**< length of arguments' list */
        -: 1087:{
     7854: 1088:  JERRY_ASSERT (ecma_builtin_function_is_routine ((ecma_object_t *) func_obj_p));
        -: 1089:
     7854: 1090:  ecma_value_t padded_arguments_list_p[3] = { ECMA_VALUE_UNDEFINED, ECMA_VALUE_UNDEFINED, ECMA_VALUE_UNDEFINED };
        -: 1091:
     7854: 1092:  if (arguments_list_len <= 2)
        -: 1093:  {
     7854: 1094:    switch (arguments_list_len)
        -: 1095:    {
    #####: 1096:      case 2:
        -: 1097:      {
    #####: 1098:        padded_arguments_list_p[1] = arguments_list_p[1];
        -: 1099:        /* FALLTHRU */
        -: 1100:      }
     2618: 1101:      case 1:
        -: 1102:      {
     2618: 1103:        padded_arguments_list_p[0] = arguments_list_p[0];
     2618: 1104:        break;
        -: 1105:      }
     5236: 1106:      default:
        -: 1107:      {
     5236: 1108:        JERRY_ASSERT (arguments_list_len == 0);
        -: 1109:      }
        -: 1110:    }
        -: 1111:
     7854: 1112:    arguments_list_p = padded_arguments_list_p;
        -: 1113:  }
        -: 1114:
     7854: 1115:  return ecma_builtin_routines[func_obj_p->u.built_in.id] (func_obj_p->u.built_in.routine_id,
        -: 1116:                                                           this_arg_value,
        -: 1117:                                                           arguments_list_p,
        -: 1118:                                                           arguments_list_len);
        -: 1119:} /* ecma_builtin_dispatch_routine */
        -: 1120:
        -: 1121:/**
        -: 1122: * Handle calling [[Call]] of built-in object
        -: 1123: *
        -: 1124: * @return ecma value
        -: 1125: */
        -: 1126:ecma_value_t
     7854: 1127:ecma_builtin_dispatch_call (ecma_object_t *obj_p, /**< built-in object */
        -: 1128:                            ecma_value_t this_arg_value, /**< 'this' argument value */
        -: 1129:                            const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1130:                            ecma_length_t arguments_list_len) /**< arguments list length */
        -: 1131:{
     7854: 1132:  JERRY_ASSERT (ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_FUNCTION);
     7854: 1133:  JERRY_ASSERT (ecma_get_object_is_builtin (obj_p));
        -: 1134:
     7854: 1135:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;
        -: 1136:
     7854: 1137:  if (ecma_builtin_function_is_routine (obj_p))
        -: 1138:  {
     7854: 1139:    return ecma_builtin_dispatch_routine (ext_obj_p,
        -: 1140:                                          this_arg_value,
        -: 1141:                                          arguments_list_p,
        -: 1142:                                          arguments_list_len);
        -: 1143:  }
        -: 1144:
    #####: 1145:  ecma_builtin_id_t builtin_object_id = ext_obj_p->u.built_in.id;
    #####: 1146:  JERRY_ASSERT (builtin_object_id < sizeof (ecma_builtin_call_functions) / sizeof (ecma_builtin_dispatch_call_t));
    #####: 1147:  return ecma_builtin_call_functions[builtin_object_id] (arguments_list_p, arguments_list_len);
        -: 1148:} /* ecma_builtin_dispatch_call */
        -: 1149:
        -: 1150:/**
        -: 1151: * Handle calling [[Construct]] of built-in object
        -: 1152: *
        -: 1153: * @return ecma value
        -: 1154: */
        -: 1155:ecma_value_t
     2622: 1156:ecma_builtin_dispatch_construct (ecma_object_t *obj_p, /**< built-in object */
        -: 1157:                                 ecma_object_t *new_target_p, /**< new target */
        -: 1158:                                 const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1159:                                 ecma_length_t arguments_list_len) /**< arguments list length */
        -: 1160:{
     2622: 1161:  JERRY_ASSERT (ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_FUNCTION);
     2622: 1162:  JERRY_ASSERT (ecma_get_object_is_builtin (obj_p));
        -: 1163:
     2622: 1164:  if (ecma_builtin_function_is_routine (obj_p))
        -: 1165:  {
    #####: 1166:    return ecma_raise_type_error (ECMA_ERR_MSG ("Built-in routines have no constructor."));
        -: 1167:  }
        -: 1168:
     2622: 1169:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;
     2622: 1170:  ecma_builtin_id_t builtin_object_id = ext_obj_p->u.built_in.id;
     2622: 1171:  JERRY_ASSERT (builtin_object_id < sizeof (ecma_builtin_construct_functions) / sizeof (ecma_builtin_dispatch_call_t));
        -: 1172:
        -: 1173:#if ENABLED (JERRY_ES2015)
     2622: 1174:  ecma_object_t *old_new_target = JERRY_CONTEXT (current_new_target);
     2622: 1175:  JERRY_CONTEXT (current_new_target) = new_target_p;
        -: 1176:#else /* !ENABLED (JERRY_ES2015) */
        -: 1177:  JERRY_UNUSED (new_target_p);
        -: 1178:#endif /* ENABLED (JERRY_ES2015) */
        -: 1179:
     2622: 1180:  ecma_value_t ret_value = ecma_builtin_construct_functions[builtin_object_id] (arguments_list_p, arguments_list_len);
        -: 1181:
        -: 1182:#if ENABLED (JERRY_ES2015)
     2620: 1183:  JERRY_CONTEXT (current_new_target) = old_new_target;
        -: 1184:#endif /* ENABLED (JERRY_ES2015) */
        -: 1185:
     2620: 1186:  return ret_value;
        -: 1187:} /* ecma_builtin_dispatch_construct */
        -: 1188:
        -: 1189:/**
        -: 1190: * @}
        -: 1191: * @}
        -: 1192: */
