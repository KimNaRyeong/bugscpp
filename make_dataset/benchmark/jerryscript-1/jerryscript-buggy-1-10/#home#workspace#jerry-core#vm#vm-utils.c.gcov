        -:    0:Source:/home/workspace/jerry-core/vm/vm-utils.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-array-object.h"
        -:   17:#include "ecma-helpers.h"
        -:   18:#include "jcontext.h"
        -:   19:#include "lit-char-helpers.h"
        -:   20:#include "vm.h"
        -:   21:
        -:   22:/**
        -:   23: * Check whether currently executed code is strict mode code
        -:   24: *
        -:   25: * @return true - current code is executed in strict mode,
        -:   26: *         false - otherwise
        -:   27: */
        -:   28:bool
     1310:   29:vm_is_strict_mode (void)
        -:   30:{
     1310:   31:  JERRY_ASSERT (JERRY_CONTEXT (vm_top_context_p) != NULL);
        -:   32:
     1310:   33:  return JERRY_CONTEXT (vm_top_context_p)->bytecode_header_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE;
        -:   34:} /* vm_is_strict_mode */
        -:   35:
        -:   36:/**
        -:   37: * Check whether currently performed call (on top of call-stack) is performed in form,
        -:   38: * meeting conditions of 'Direct Call to Eval' (see also: ECMA-262 v5, 15.1.2.1.1)
        -:   39: *
        -:   40: * Warning:
        -:   41: *         the function should only be called from implementation
        -:   42: *         of built-in 'eval' routine of Global object
        -:   43: *
        -:   44: * @return true - currently performed call is performed through 'eval' identifier,
        -:   45: *                without 'this' argument,
        -:   46: *         false - otherwise
        -:   47: */
        -:   48:inline bool JERRY_ATTR_ALWAYS_INLINE
     2618:   49:vm_is_direct_eval_form_call (void)
        -:   50:{
     2618:   51:  return (JERRY_CONTEXT (status_flags) & ECMA_STATUS_DIRECT_EVAL) != 0;
        -:   52:} /* vm_is_direct_eval_form_call */
        -:   53:
        -:   54:/**
        -:   55: * Get backtrace. The backtrace is an array of strings where
        -:   56: * each string contains the position of the corresponding frame.
        -:   57: * The array length is zero if the backtrace is not available.
        -:   58: *
        -:   59: * @return array ecma value
        -:   60: */
        -:   61:ecma_value_t
    #####:   62:vm_get_backtrace (uint32_t max_depth) /**< maximum backtrace depth, 0 = unlimited */
        -:   63:{
        -:   64:#if ENABLED (JERRY_LINE_INFO)
    #####:   65:  ecma_value_t result_array = ecma_op_create_array_object (NULL, 0, false);
        -:   66:
    #####:   67:  if (max_depth == 0)
        -:   68:  {
    #####:   69:    max_depth = UINT32_MAX;
        -:   70:  }
        -:   71:
    #####:   72:  vm_frame_ctx_t *context_p = JERRY_CONTEXT (vm_top_context_p);
    #####:   73:  ecma_object_t *array_p = ecma_get_object_from_value (result_array);
    #####:   74:  JERRY_ASSERT (ecma_op_object_is_fast_array (array_p));
    #####:   75:  uint32_t index = 0;
        -:   76:
    #####:   77:  while (context_p != NULL)
        -:   78:  {
    #####:   79:    if (context_p->resource_name == ECMA_VALUE_UNDEFINED)
        -:   80:    {
    #####:   81:      context_p = context_p->prev_context_p;
    #####:   82:      continue;
        -:   83:    }
        -:   84:
    #####:   85:    ecma_string_t *str_p = ecma_get_string_from_value (context_p->resource_name);
    #####:   86:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
        -:   87:
    #####:   88:    if (ecma_string_is_empty (str_p))
        -:   89:    {
    #####:   90:      ecma_stringbuilder_append_raw (&builder, (const lit_utf8_byte_t *)"<unknown>:", 10);
        -:   91:    }
        -:   92:    else
        -:   93:    {
    #####:   94:      ecma_stringbuilder_append (&builder, str_p);
    #####:   95:      ecma_stringbuilder_append_byte (&builder, LIT_CHAR_COLON);
        -:   96:    }
        -:   97:
    #####:   98:    ecma_string_t *line_str_p = ecma_new_ecma_string_from_uint32 (context_p->current_line);
    #####:   99:    ecma_stringbuilder_append (&builder, line_str_p);
    #####:  100:    ecma_deref_ecma_string (line_str_p);
        -:  101:
    #####:  102:    ecma_string_t *builder_str_p = ecma_stringbuilder_finalize (&builder);
    #####:  103:    ecma_fast_array_set_property (array_p, index, ecma_make_string_value (builder_str_p));
    #####:  104:    ecma_deref_ecma_string (builder_str_p);
        -:  105:
    #####:  106:    context_p = context_p->prev_context_p;
    #####:  107:    index++;
        -:  108:
    #####:  109:    if (index >= max_depth)
        -:  110:    {
    #####:  111:      break;
        -:  112:    }
        -:  113:  }
        -:  114:
    #####:  115:  return result_array;
        -:  116:#else /* !ENABLED (JERRY_LINE_INFO) */
        -:  117:  JERRY_UNUSED (max_depth);
        -:  118:
    #####:  119:  return ecma_op_create_array_object (NULL, 0, false);
        -:  120:#endif /* ENABLED (JERRY_LINE_INFO) */
        -:  121:} /* vm_get_backtrace */
