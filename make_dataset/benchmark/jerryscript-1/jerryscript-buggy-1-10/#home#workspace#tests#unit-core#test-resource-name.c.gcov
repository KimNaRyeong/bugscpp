        -:    0:Source:/home/workspace/tests/unit-core/test-resource-name.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "config.h"
        -:   17:#include "jerryscript.h"
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:static jerry_value_t
    #####:   21:resource_name_handler (const jerry_value_t function_obj, /**< function object */
        -:   22:                       const jerry_value_t this_val, /**< this value */
        -:   23:                       const jerry_value_t args_p[], /**< argument list */
        -:   24:                       const jerry_length_t args_count) /**< argument count */
        -:   25:{
        -:   26:  (void) function_obj;
        -:   27:  (void) this_val;
        -:   28:
    #####:   29:  jerry_value_t undefined_value = jerry_create_undefined ();
    #####:   30:  jerry_value_t resource_name = jerry_get_resource_name (args_count > 0 ? args_p[0] : undefined_value);
    #####:   31:  jerry_release_value (undefined_value);
        -:   32:
    #####:   33:  return resource_name;
        -:   34:} /* resource_name_handler */
        -:   35:
        -:   36:int
    #####:   37:main (void)
        -:   38:{
    #####:   39:  TEST_INIT ();
        -:   40:
    #####:   41:  if (!jerry_is_feature_enabled (JERRY_FEATURE_LINE_INFO))
        -:   42:  {
    #####:   43:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Line info support is disabled!\n");
    #####:   44:    return 0;
        -:   45:  }
        -:   46:
    #####:   47:  jerry_init (JERRY_INIT_EMPTY);
        -:   48:
    #####:   49:  jerry_value_t global = jerry_get_global_object ();
        -:   50:
        -:   51:  /* Register the "resourceName" method. */
        -:   52:  {
    #####:   53:    jerry_value_t func = jerry_create_external_function (resource_name_handler);
    #####:   54:    jerry_value_t name = jerry_create_string ((const jerry_char_t *) "resourceName");
    #####:   55:    jerry_value_t result = jerry_set_property (global, name, func);
    #####:   56:    jerry_release_value (result);
    #####:   57:    jerry_release_value (name);
    #####:   58:    jerry_release_value (func);
        -:   59:  }
        -:   60:
    #####:   61:  jerry_release_value (global);
        -:   62:
    #####:   63:  const char *source_1 = ("function f1 () {\n"
        -:   64:                          "  if (resourceName() !== 'demo1.js') return false; \n"
        -:   65:                          "  if (resourceName(f1) !== 'demo1.js') return false; \n"
        -:   66:                          "  if (resourceName(5) !== '<anonymous>') return false; \n"
        -:   67:                          "  return f1; \n"
        -:   68:                          "} \n"
        -:   69:                          "f1();");
    #####:   70:  const char *resource_1 = "demo1.js";
        -:   71:
    #####:   72:  jerry_value_t program = jerry_parse ((const jerry_char_t *) resource_1,
        -:   73:                                       strlen (resource_1),
        -:   74:                                       (const jerry_char_t *) source_1,
        -:   75:                                       strlen (source_1),
        -:   76:                                       JERRY_PARSE_NO_OPTS);
    #####:   77:  TEST_ASSERT (!jerry_value_is_error (program));
        -:   78:
    #####:   79:  jerry_value_t run_result = jerry_run (program);
    #####:   80:  TEST_ASSERT (!jerry_value_is_error (run_result));
    #####:   81:  TEST_ASSERT (jerry_value_is_object (run_result));
        -:   82:
    #####:   83:  jerry_value_t resource_value = jerry_get_resource_name (run_result);
    #####:   84:  jerry_value_t resource1_name_value = jerry_create_string ((const jerry_char_t *) resource_1);
    #####:   85:  TEST_ASSERT (jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL, resource_value, resource1_name_value));
    #####:   86:  jerry_release_value (resource1_name_value);
    #####:   87:  jerry_release_value (resource_value);
        -:   88:
    #####:   89:  jerry_release_value (run_result);
    #####:   90:  jerry_release_value (program);
        -:   91:
    #####:   92:  const char *source_2 = ("function f2 () { \n"
        -:   93:                          "  if (resourceName() !== 'demo2.js') return false; \n"
        -:   94:                          "  if (resourceName(f2) !== 'demo2.js') return false; \n"
        -:   95:                          "  if (resourceName(f1) !== 'demo1.js') return false; \n"
        -:   96:                          "  if (resourceName(Object.prototype) !== '<anonymous>') return false; \n"
        -:   97:                          "  if (resourceName(Function) !== '<anonymous>') return false; \n"
        -:   98:                          "  return f2; \n"
        -:   99:                          "} \n"
        -:  100:                          "f2(); \n");
    #####:  101:  const char *resource_2 = "demo2.js";
        -:  102:
    #####:  103:  program = jerry_parse ((const jerry_char_t *) resource_2,
        -:  104:                         strlen (resource_2),
        -:  105:                         (const jerry_char_t *) source_2,
        -:  106:                         strlen (source_2),
        -:  107:                         JERRY_PARSE_NO_OPTS);
    #####:  108:  TEST_ASSERT (!jerry_value_is_error (program));
        -:  109:
    #####:  110:  run_result = jerry_run (program);
    #####:  111:  TEST_ASSERT (!jerry_value_is_error (run_result));
    #####:  112:  TEST_ASSERT (jerry_value_is_object (run_result));
        -:  113:
    #####:  114:  resource_value = jerry_get_resource_name (run_result);
    #####:  115:  jerry_value_t resource2_name_value = jerry_create_string ((const jerry_char_t *) resource_2);
    #####:  116:  TEST_ASSERT (jerry_binary_operation (JERRY_BIN_OP_STRICT_EQUAL, resource_value, resource2_name_value));
    #####:  117:  jerry_release_value (resource2_name_value);
    #####:  118:  jerry_release_value (resource_value);
        -:  119:
    #####:  120:  jerry_release_value (run_result);
    #####:  121:  jerry_release_value (program);
        -:  122:
    #####:  123:  jerry_cleanup ();
        -:  124:
    #####:  125:  return 0;
        -:  126:} /* main */
