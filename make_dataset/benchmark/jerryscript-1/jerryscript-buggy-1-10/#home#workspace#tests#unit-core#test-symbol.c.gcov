        -:    0:Source:/home/workspace/tests/unit-core/test-symbol.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:/* foo string */
        -:   22:#define STRING_FOO ((const jerry_char_t *) "foo")
        -:   23:
        -:   24:/* bar string */
        -:   25:#define STRING_BAR ((const jerry_char_t *) "bar")
        -:   26:
        -:   27:/* Symbol(bar) desciptive string */
        -:   28:#define SYMBOL_DESCIPTIVE_STRING_BAR "Symbol(bar)"
        -:   29:
        -:   30:int
    #####:   31:main (void)
    #####:   32:{
    #####:   33:  if (!jerry_is_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:   34:  {
    #####:   35:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Symbol support is disabled!\n");
    #####:   36:    return 0;
        -:   37:  }
        -:   38:
    #####:   39:  jerry_init (JERRY_INIT_EMPTY);
        -:   40:
    #####:   41:  jerry_value_t object = jerry_create_object ();
        -:   42:
        -:   43:  /* Test for that each symbol is unique independently from their descriptor strings */
    #####:   44:  jerry_value_t symbol_desc_1 = jerry_create_string (STRING_FOO);
    #####:   45:  jerry_value_t symbol_desc_2 = jerry_create_string (STRING_FOO);
        -:   46:
    #####:   47:  jerry_value_t symbol_1 = jerry_create_symbol (symbol_desc_1);
    #####:   48:  TEST_ASSERT (!jerry_value_is_error (symbol_1));
    #####:   49:  TEST_ASSERT (jerry_value_is_symbol (symbol_1));
        -:   50:
    #####:   51:  jerry_value_t symbol_2 = jerry_create_symbol (symbol_desc_2);
    #####:   52:  TEST_ASSERT (!jerry_value_is_error (symbol_2));
    #####:   53:  TEST_ASSERT (jerry_value_is_symbol (symbol_2));
        -:   54:
        -:   55:  /* The descriptor strings are no longer needed */
    #####:   56:  jerry_release_value (symbol_desc_1);
    #####:   57:  jerry_release_value (symbol_desc_2);
        -:   58:
    #####:   59:  jerry_value_t value_1 = jerry_create_number (1);
    #####:   60:  jerry_value_t value_2 = jerry_create_number (2);
        -:   61:
    #####:   62:  jerry_value_t result_val = jerry_set_property (object, symbol_1, value_1);
    #####:   63:  TEST_ASSERT (jerry_value_is_boolean (result_val));
    #####:   64:  TEST_ASSERT (jerry_get_boolean_value (jerry_has_property (object, symbol_1)));
    #####:   65:  TEST_ASSERT (jerry_get_boolean_value (jerry_has_own_property (object, symbol_1)));
        -:   66:
    #####:   67:  result_val = jerry_set_property (object, symbol_2, value_2);
    #####:   68:  TEST_ASSERT (jerry_value_is_boolean (result_val));
    #####:   69:  TEST_ASSERT (jerry_get_boolean_value (jerry_has_property (object, symbol_2)));
    #####:   70:  TEST_ASSERT (jerry_get_boolean_value (jerry_has_own_property (object, symbol_2)));
        -:   71:
    #####:   72:  jerry_value_t get_value_1 = jerry_get_property (object, symbol_1);
    #####:   73:  TEST_ASSERT (jerry_get_number_value (get_value_1) == jerry_get_number_value (value_1));
    #####:   74:  jerry_release_value (get_value_1);
        -:   75:
    #####:   76:  jerry_value_t get_value_2 = jerry_get_property (object, symbol_2);
    #####:   77:  TEST_ASSERT (jerry_get_number_value (get_value_2) == jerry_get_number_value (value_2));
    #####:   78:  jerry_release_value (get_value_2);
        -:   79:
        -:   80:  /* Test delete / has_{own}_property */
    #####:   81:  TEST_ASSERT (jerry_delete_property (object, symbol_1));
    #####:   82:  TEST_ASSERT (!jerry_get_boolean_value (jerry_has_property (object, symbol_1)));
    #####:   83:  TEST_ASSERT (!jerry_get_boolean_value (jerry_has_own_property (object, symbol_1)));
        -:   84:
    #####:   85:  jerry_release_value (value_1);
    #####:   86:  jerry_release_value (symbol_1);
        -:   87:
        -:   88:  /* Test {get, define}_own_property_descriptor */
        -:   89:  jerry_property_descriptor_t prop_desc;
    #####:   90:  TEST_ASSERT (jerry_get_own_property_descriptor (object, symbol_2, &prop_desc));
    #####:   91:  TEST_ASSERT (prop_desc.is_value_defined == true);
    #####:   92:  TEST_ASSERT (value_2 == prop_desc.value);
    #####:   93:  TEST_ASSERT (jerry_get_number_value (value_2) == jerry_get_number_value (prop_desc.value));
    #####:   94:  TEST_ASSERT (prop_desc.is_writable == true);
    #####:   95:  TEST_ASSERT (prop_desc.is_enumerable == true);
    #####:   96:  TEST_ASSERT (prop_desc.is_configurable == true);
    #####:   97:  TEST_ASSERT (prop_desc.is_get_defined == false);
    #####:   98:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.getter));
    #####:   99:  TEST_ASSERT (prop_desc.is_set_defined == false);
    #####:  100:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.setter));
    #####:  101:  jerry_free_property_descriptor_fields (&prop_desc);
        -:  102:
        -:  103:  /* Modify the descriptor fields */
    #####:  104:  jerry_init_property_descriptor_fields (&prop_desc);
    #####:  105:  jerry_value_t value_3 = jerry_create_string (STRING_BAR);
        -:  106:
    #####:  107:  prop_desc.is_value_defined = true;
    #####:  108:  prop_desc.value = jerry_acquire_value (value_3);
    #####:  109:  prop_desc.is_writable_defined = true;
    #####:  110:  prop_desc.is_writable = false;
    #####:  111:  prop_desc.is_enumerable_defined = true;
    #####:  112:  prop_desc.is_enumerable = false;
    #####:  113:  prop_desc.is_configurable_defined = true;
    #####:  114:  prop_desc.is_configurable = false;
    #####:  115:  TEST_ASSERT (jerry_get_boolean_value (jerry_define_own_property (object, symbol_2, &prop_desc)));
    #####:  116:  jerry_free_property_descriptor_fields (&prop_desc);
        -:  117:
        -:  118:  /* Check the modified fields */
    #####:  119:  TEST_ASSERT (jerry_get_own_property_descriptor (object, symbol_2, &prop_desc));
    #####:  120:  TEST_ASSERT (prop_desc.is_value_defined == true);
    #####:  121:  TEST_ASSERT (value_3 == prop_desc.value);
    #####:  122:  TEST_ASSERT (jerry_value_is_string (prop_desc.value));
    #####:  123:  TEST_ASSERT (prop_desc.is_writable_defined == true);
    #####:  124:  TEST_ASSERT (prop_desc.is_writable == false);
    #####:  125:  TEST_ASSERT (prop_desc.is_enumerable_defined == true);
    #####:  126:  TEST_ASSERT (prop_desc.is_enumerable == false);
    #####:  127:  TEST_ASSERT (prop_desc.is_configurable_defined == true);
    #####:  128:  TEST_ASSERT (prop_desc.is_configurable == false);
    #####:  129:  TEST_ASSERT (prop_desc.is_get_defined == false);
    #####:  130:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.getter));
    #####:  131:  TEST_ASSERT (prop_desc.is_set_defined == false);
    #####:  132:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.setter));
    #####:  133:  jerry_free_property_descriptor_fields (&prop_desc);
        -:  134:
    #####:  135:  jerry_release_value (value_3);
    #####:  136:  jerry_release_value (value_2);
    #####:  137:  jerry_release_value (symbol_2);
    #####:  138:  jerry_release_value (object);
        -:  139:
        -:  140:  /* Test creating symbol with a symbol description */
    #####:  141:  jerry_value_t empty_symbol_desc = jerry_create_string ((const jerry_char_t *) "");
        -:  142:
    #####:  143:  jerry_value_t empty_symbol = jerry_create_symbol (empty_symbol_desc);
    #####:  144:  TEST_ASSERT (!jerry_value_is_error (empty_symbol));
    #####:  145:  TEST_ASSERT (jerry_value_is_symbol (empty_symbol));
        -:  146:
    #####:  147:  jerry_release_value (empty_symbol_desc);
        -:  148:
    #####:  149:  jerry_value_t symbol_symbol = jerry_create_symbol (empty_symbol);
    #####:  150:  TEST_ASSERT (!jerry_value_is_symbol (symbol_symbol));
    #####:  151:  TEST_ASSERT (jerry_value_is_error (symbol_symbol));
        -:  152:
    #####:  153:  jerry_value_t error_obj = jerry_get_value_from_error (symbol_symbol, true);
        -:  154:
    #####:  155:  TEST_ASSERT (jerry_get_error_type (error_obj) == JERRY_ERROR_TYPE);
        -:  156:
    #####:  157:  jerry_release_value (error_obj);
    #####:  158:  jerry_release_value (empty_symbol);
        -:  159:
        -:  160:  /* Test symbol to string operation with symbol argument */
    #####:  161:  jerry_value_t bar_symbol_desc = jerry_create_string (STRING_BAR);
        -:  162:
    #####:  163:  jerry_value_t bar_symbol = jerry_create_symbol (bar_symbol_desc);
    #####:  164:  TEST_ASSERT (!jerry_value_is_error (bar_symbol));
    #####:  165:  TEST_ASSERT (jerry_value_is_symbol (bar_symbol));
        -:  166:
    #####:  167:  jerry_release_value (bar_symbol_desc);
        -:  168:
    #####:  169:  jerry_value_t bar_symbol_string = jerry_get_symbol_descriptive_string (bar_symbol);
    #####:  170:  TEST_ASSERT (jerry_value_is_string (bar_symbol_string));
        -:  171:
    #####:  172:  jerry_size_t bar_symbol_string_size = jerry_get_string_size (bar_symbol_string);
    #####:  173:  TEST_ASSERT (bar_symbol_string_size == (sizeof (SYMBOL_DESCIPTIVE_STRING_BAR) - 1));
    #####:  174:  JERRY_VLA (jerry_char_t, str_buff, bar_symbol_string_size);
        -:  175:
    #####:  176:  jerry_string_to_char_buffer (bar_symbol_string, str_buff, bar_symbol_string_size);
    #####:  177:  TEST_ASSERT (memcmp (str_buff, SYMBOL_DESCIPTIVE_STRING_BAR, sizeof (SYMBOL_DESCIPTIVE_STRING_BAR) - 1) == 0);
        -:  178:
    #####:  179:  jerry_release_value (bar_symbol_string);
    #####:  180:  jerry_release_value (bar_symbol);
        -:  181:
        -:  182:  /* Test symbol to string operation with non-symbol argument */
    #####:  183:  jerry_value_t null_value = jerry_create_null ();
    #####:  184:  jerry_value_t to_string_value = jerry_get_symbol_descriptive_string (null_value);
    #####:  185:  TEST_ASSERT (jerry_value_is_error (to_string_value));
        -:  186:
    #####:  187:  error_obj = jerry_get_value_from_error (to_string_value, true);
        -:  188:
    #####:  189:  TEST_ASSERT (jerry_get_error_type (error_obj) == JERRY_ERROR_TYPE);
        -:  190:
    #####:  191:  jerry_release_value (error_obj);
    #####:  192:  jerry_release_value (null_value);
        -:  193:
    #####:  194:  jerry_cleanup ();
        -:  195:
    #####:  196:  return 0;
        -:  197:} /* main */
