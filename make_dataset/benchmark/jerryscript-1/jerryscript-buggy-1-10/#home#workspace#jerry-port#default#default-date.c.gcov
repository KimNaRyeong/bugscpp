        -:    0:Source:/home/workspace/jerry-port/default/default-date.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#ifdef HAVE_TM_GMTOFF
        -:   17:#include <time.h>
        -:   18:#endif /* HAVE_TM_GMTOFF */
        -:   19:
        -:   20:#ifdef _WINDOWS
        -:   21:#include <windows.h>
        -:   22:#include <winbase.h>
        -:   23:#include <winnt.h>
        -:   24:#include <time.h>
        -:   25:#endif /* _WINDOWS */
        -:   26:
        -:   27:#ifdef __GNUC__
        -:   28:#include <sys/time.h>
        -:   29:#endif /* __GNUC__ */
        -:   30:
        -:   31:#include "jerryscript-port.h"
        -:   32:#include "jerryscript-port-default.h"
        -:   33:
        -:   34:#ifdef _WINDOWS
        -:   35:/* https://support.microsoft.com/en-us/help/167296/how-to-convert-a-unix-time-t-to-a-win32-filetime-or-systemtime */
        -:   36:void UnixTimeToFileTime (LONGLONG t, LPFILETIME pft)
        -:   37:{
        -:   38:  LONGLONG ll = t * 10000000 + 116444736000000000;
        -:   39:  pft->dwLowDateTime = (DWORD) ll;
        -:   40:  pft->dwHighDateTime = ll >> 32;
        -:   41:} /* UnixTimeToFileTime */
        -:   42:#endif /* _WINDOWS */
        -:   43:
        -:   44:/**
        -:   45: * Default implementation of jerry_port_get_local_time_zone_adjustment. Uses the 'tm_gmtoff' field
        -:   46: * of 'struct tm' (a GNU extension) filled by 'localtime_r' if available on the
        -:   47: * system, does nothing otherwise.
        -:   48: *
        -:   49: * @return offset between UTC and local time at the given unix timestamp, if
        -:   50: *         available. Otherwise, returns 0, assuming UTC time.
        -:   51: */
    #####:   52:double jerry_port_get_local_time_zone_adjustment (double unix_ms,  /**< ms since unix epoch */
        -:   53:                                                  bool is_utc)  /**< is the time above in UTC? */
        -:   54:{
        -:   55:#ifdef HAVE_TM_GMTOFF
    #####:   56:  struct tm tm;
    #####:   57:  time_t now = (time_t) (unix_ms / 1000);
    #####:   58:  localtime_r (&now, &tm);
    #####:   59:  if (!is_utc)
        -:   60:  {
    #####:   61:    now -= tm.tm_gmtoff;
    #####:   62:    localtime_r (&now, &tm);
        -:   63:  }
    #####:   64:  return ((double) tm.tm_gmtoff) * 1000;
        -:   65:#else /* !HAVE_TM_GMTOFF */
        -:   66:  (void) unix_ms;
        -:   67:  (void) is_utc;
        -:   68:#ifdef _WINDOWS
        -:   69:  FILETIME fileTime, localFileTime;
        -:   70:  SYSTEMTIME systemTime, localSystemTime;
        -:   71:  ULARGE_INTEGER time, localTime;
        -:   72:
        -:   73:  _tzset ();
        -:   74:  UnixTimeToFileTime ((LONGLONG) (unix_ms / 1000), &fileTime);
        -:   75:
        -:   76:  if (FileTimeToSystemTime (&fileTime, &systemTime)
        -:   77:      && SystemTimeToTzSpecificLocalTime (0, &systemTime, &localSystemTime)
        -:   78:      && SystemTimeToFileTime (&localSystemTime, &localFileTime))
        -:   79:  {
        -:   80:    time.LowPart = fileTime.dwLowDateTime;
        -:   81:    time.HighPart = fileTime.dwHighDateTime;
        -:   82:    localTime.LowPart = localFileTime.dwLowDateTime;
        -:   83:    localTime.HighPart = localFileTime.dwHighDateTime;
        -:   84:    return ((LONGLONG) localTime.QuadPart - (LONGLONG) time.QuadPart) / 10000;
        -:   85:  }
        -:   86:#endif /* _WINDOWS */
        -:   87:  return 0.0;
        -:   88:#endif /* HAVE_TM_GMTOFF */
        -:   89:} /* jerry_port_get_local_time_zone_adjustment */
        -:   90:
        -:   91:/**
        -:   92: * Default implementation of jerry_port_get_current_time. Uses 'gettimeofday' if
        -:   93: * available on the system, does nothing otherwise.
        -:   94: *
        -:   95: * @return milliseconds since Unix epoch - if 'gettimeofday' is available and
        -:   96: *                                         executed successfully,
        -:   97: *         0 - otherwise.
        -:   98: */
        1:   99:double jerry_port_get_current_time (void)
        -:  100:{
        -:  101:#ifdef __GNUC__
        1:  102:  struct timeval tv;
        -:  103:
        1:  104:  if (gettimeofday (&tv, NULL) == 0)
        -:  105:  {
        1:  106:    return ((double) tv.tv_sec) * 1000.0 + ((double) tv.tv_usec) / 1000.0;
        -:  107:  }
        -:  108:#endif /* __GNUC__ */
        -:  109:
        -:  110:#ifdef _WINDOWS
        -:  111:  time_t ltime;
        -:  112:  time (&ltime);
        -:  113:  return ltime * 1000;
        -:  114:#endif /* _WINDOWS */
        -:  115:
    #####:  116:  return 0.0;
        -:  117:} /* jerry_port_get_current_time */
