        -:    0:Source:/home/workspace/jerry-port/default/default-io.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <stdarg.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:
        -:   20:#include "jerryscript-port.h"
        -:   21:#include "jerryscript-port-default.h"
        -:   22:#include "jerryscript-debugger.h"
        -:   23:
        -:   24:#ifndef DISABLE_EXTRA_API
        -:   25:
        -:   26:/**
        -:   27: * Actual log level
        -:   28: */
        -:   29:static jerry_log_level_t jerry_port_default_log_level = JERRY_LOG_LEVEL_ERROR;
        -:   30:
        -:   31:#define JERRY_PORT_DEFAULT_LOG_LEVEL jerry_port_default_log_level
        -:   32:
        -:   33:/**
        -:   34: * Get the log level
        -:   35: *
        -:   36: * @return current log level
        -:   37: *
        -:   38: * Note:
        -:   39: *      This function is only available if the port implementation library is
        -:   40: *      compiled without the DISABLE_EXTRA_API macro.
        -:   41: */
        -:   42:jerry_log_level_t
    #####:   43:jerry_port_default_get_log_level (void)
        -:   44:{
    #####:   45:  return jerry_port_default_log_level;
        -:   46:} /* jerry_port_default_get_log_level */
        -:   47:
        -:   48:/**
        -:   49: * Set the log level
        -:   50: *
        -:   51: * Note:
        -:   52: *      This function is only available if the port implementation library is
        -:   53: *      compiled without the DISABLE_EXTRA_API macro.
        -:   54: */
        -:   55:void
    #####:   56:jerry_port_default_set_log_level (jerry_log_level_t level) /**< log level */
        -:   57:{
    #####:   58:  jerry_port_default_log_level = level;
    #####:   59:} /* jerry_port_default_set_log_level */
        -:   60:
        -:   61:#else /* DISABLE_EXTRA_API */
        -:   62:#define JERRY_PORT_DEFAULT_LOG_LEVEL JERRY_LOG_LEVEL_ERROR
        -:   63:#endif /* !DISABLE_EXTRA_API */
        -:   64:
        -:   65:/**
        -:   66: * Default implementation of jerry_port_log. Prints log message to the standard
        -:   67: * error with 'vfprintf' if message log level is less than or equal to the
        -:   68: * current log level.
        -:   69: *
        -:   70: * If debugger support is enabled, printing happens first to an in-memory buffer,
        -:   71: * which is then sent both to the standard error and to the debugger client.
        -:   72: *
        -:   73: * Note:
        -:   74: *      Changing the log level from JERRY_LOG_LEVEL_ERROR is only possible if
        -:   75: *      the port implementation library is compiled without the
        -:   76: *      DISABLE_EXTRA_API macro.
        -:   77: */
        -:   78:void
    #####:   79:jerry_port_log (jerry_log_level_t level, /**< message log level */
        -:   80:                const char *format, /**< format string */
        -:   81:                ...)  /**< parameters */
        -:   82:{
    #####:   83:  if (level <= JERRY_PORT_DEFAULT_LOG_LEVEL)
        -:   84:  {
    #####:   85:    va_list args;
    #####:   86:    va_start (args, format);
        -:   87:#if defined (JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1)
        -:   88:    int length = vsnprintf (NULL, 0, format, args);
        -:   89:    va_end (args);
        -:   90:    va_start (args, format);
        -:   91:
        -:   92:    JERRY_VLA (char, buffer, length + 1);
        -:   93:    vsnprintf (buffer, (size_t) length + 1, format, args);
        -:   94:
        -:   95:    fprintf (stderr, "%s", buffer);
        -:   96:    jerry_debugger_send_log (level, (jerry_char_t *) buffer, (jerry_size_t) length);
        -:   97:#else /* If jerry-debugger isn't defined, libc is turned on */
    #####:   98:    vfprintf (stderr, format, args);
        -:   99:#endif /* defined (JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1) */
    #####:  100:    va_end (args);
        -:  101:  }
    #####:  102:} /* jerry_port_log */
        -:  103:
        -:  104:#if defined (JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1)
        -:  105:
        -:  106:#define DEBUG_BUFFER_SIZE (256)
        -:  107:static char debug_buffer[DEBUG_BUFFER_SIZE];
        -:  108:static int debug_buffer_index = 0;
        -:  109:
        -:  110:#endif /* defined (JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1) */
        -:  111:
        -:  112:/**
        -:  113: * Default implementation of jerry_port_print_char. Uses 'putchar' to
        -:  114: * print a single character to standard output.
        -:  115: */
        -:  116:void
    #####:  117:jerry_port_print_char (char c) /**< the character to print */
        -:  118:{
    #####:  119:  putchar (c);
        -:  120:
        -:  121:#if defined (JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1)
        -:  122:  debug_buffer[debug_buffer_index++] = c;
        -:  123:
        -:  124:  if ((debug_buffer_index == DEBUG_BUFFER_SIZE) || (c == '\n'))
        -:  125:  {
        -:  126:    jerry_debugger_send_output ((jerry_char_t *) debug_buffer, (jerry_size_t) debug_buffer_index);
        -:  127:    debug_buffer_index = 0;
        -:  128:  }
        -:  129:#endif /* defined (JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1) */
    #####:  130:} /* jerry_port_print_char */
