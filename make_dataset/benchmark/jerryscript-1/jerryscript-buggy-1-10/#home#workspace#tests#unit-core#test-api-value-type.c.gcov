        -:    0:Source:/home/workspace/tests/unit-core/test-api-value-type.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:typedef struct
        -:   22:{
        -:   23:  jerry_type_t type_info;
        -:   24:  jerry_value_t value;
        -:   25:} test_entry_t;
        -:   26:
        -:   27:#define ENTRY(TYPE, VALUE) { TYPE, VALUE }
        -:   28:
        -:   29:static jerry_value_t
    #####:   30:test_ext_function (const jerry_value_t function_obj, /**< function object */
        -:   31:                   const jerry_value_t this_val, /**< function this value */
        -:   32:                   const jerry_value_t args_p[], /**< array of arguments */
        -:   33:                   const jerry_length_t args_cnt) /**< number of arguments */
        -:   34:{
        -:   35:  (void) function_obj;
        -:   36:  (void) this_val;
        -:   37:  (void) args_p;
        -:   38:  (void) args_cnt;
    #####:   39:  return jerry_create_boolean (true);
        -:   40:} /* test_ext_function */
        -:   41:
        -:   42:int
    #####:   43:main (void)
        -:   44:{
    #####:   45:  TEST_INIT ();
        -:   46:
    #####:   47:  jerry_init (JERRY_INIT_EMPTY);
        -:   48:
    #####:   49:  const jerry_char_t test_eval_function[] = "function demo(a) { return a + 1; }; demo";
        -:   50:
    #####:   51:  test_entry_t entries[] =
        -:   52:  {
    #####:   53:    ENTRY (JERRY_TYPE_NUMBER, jerry_create_number (-33.0)),
    #####:   54:    ENTRY (JERRY_TYPE_NUMBER, jerry_create_number (3)),
    #####:   55:    ENTRY (JERRY_TYPE_NUMBER, jerry_create_number_nan ()),
    #####:   56:    ENTRY (JERRY_TYPE_NUMBER, jerry_create_number_infinity (false)),
    #####:   57:    ENTRY (JERRY_TYPE_NUMBER, jerry_create_number_infinity (true)),
        -:   58:
    #####:   59:    ENTRY (JERRY_TYPE_BOOLEAN, jerry_create_boolean (true)),
    #####:   60:    ENTRY (JERRY_TYPE_BOOLEAN, jerry_create_boolean (false)),
        -:   61:
    #####:   62:    ENTRY (JERRY_TYPE_UNDEFINED, jerry_create_undefined ()),
        -:   63:
    #####:   64:    ENTRY (JERRY_TYPE_OBJECT, jerry_create_object ()),
    #####:   65:    ENTRY (JERRY_TYPE_OBJECT, jerry_create_array (10)),
    #####:   66:    ENTRY (JERRY_TYPE_ERROR, jerry_create_error (JERRY_ERROR_TYPE, (const jerry_char_t *) "error")),
        -:   67:
    #####:   68:    ENTRY (JERRY_TYPE_NULL, jerry_create_null ()),
        -:   69:
    #####:   70:    ENTRY (JERRY_TYPE_FUNCTION, jerry_eval (test_eval_function,
        -:   71:                                            sizeof (test_eval_function) - 1,
        -:   72:                                            JERRY_PARSE_NO_OPTS)),
    #####:   73:    ENTRY (JERRY_TYPE_FUNCTION, jerry_create_external_function (test_ext_function)),
        -:   74:
    #####:   75:    ENTRY (JERRY_TYPE_STRING, jerry_create_string (test_eval_function)),
    #####:   76:    ENTRY (JERRY_TYPE_STRING, jerry_create_string ((jerry_char_t *) "")),
        -:   77:  };
        -:   78:
    #####:   79:  for (size_t idx = 0; idx < sizeof (entries) / sizeof (entries[0]); idx++)
        -:   80:  {
    #####:   81:    jerry_type_t type_info = jerry_value_get_type (entries[idx].value);
        -:   82:
    #####:   83:    TEST_ASSERT (type_info != JERRY_TYPE_NONE);
    #####:   84:    TEST_ASSERT (type_info == entries[idx].type_info);
        -:   85:
    #####:   86:    jerry_release_value (entries[idx].value);
        -:   87:  }
        -:   88:
    #####:   89:  if (jerry_is_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:   90:  {
    #####:   91:    jerry_value_t symbol_desc_value = jerry_create_string ((jerry_char_t *) "foo");
    #####:   92:    jerry_value_t symbol_value = jerry_create_symbol (symbol_desc_value);
    #####:   93:    jerry_type_t type_info = jerry_value_get_type (symbol_value);
        -:   94:
    #####:   95:    TEST_ASSERT (type_info != JERRY_TYPE_NONE);
    #####:   96:    TEST_ASSERT (type_info == JERRY_TYPE_SYMBOL);
        -:   97:
    #####:   98:    jerry_release_value (symbol_value);
    #####:   99:    jerry_release_value (symbol_desc_value);
        -:  100:  }
        -:  101:
    #####:  102:  jerry_cleanup ();
        -:  103:
    #####:  104:  return 0;
        -:  105:} /* main */
