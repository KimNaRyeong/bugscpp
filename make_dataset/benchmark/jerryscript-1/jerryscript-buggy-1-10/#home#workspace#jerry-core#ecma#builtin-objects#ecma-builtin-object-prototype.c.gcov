        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-object-prototype.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtin-helpers.h"
        -:   18:#include "ecma-builtins.h"
        -:   19:#include "ecma-builtin-object.h"
        -:   20:#include "ecma-conversion.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-function-object.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-globals.h"
        -:   25:#include "ecma-helpers.h"
        -:   26:#include "ecma-objects.h"
        -:   27:#include "ecma-proxy-object.h"
        -:   28:#include "ecma-string-object.h"
        -:   29:#include "ecma-try-catch-macro.h"
        -:   30:#include "jrt.h"
        -:   31:
        -:   32:#define ECMA_BUILTINS_INTERNAL
        -:   33:#include "ecma-builtins-internal.h"
        -:   34:
        -:   35:/**
        -:   36: * This object has a custom dispatch function.
        -:   37: */
        -:   38:#define BUILTIN_CUSTOM_DISPATCH
        -:   39:
        -:   40:/**
        -:   41: * List of built-in routine identifiers.
        -:   42: */
        -:   43:enum
        -:   44:{
        -:   45:  /* Note: these 6 routines must be in this order */
        -:   46:  ECMA_OBJECT_PROTOTYPE_ROUTINE_START = ECMA_BUILTIN_ID__COUNT - 1,
        -:   47:  ECMA_OBJECT_PROTOTYPE_TO_STRING,
        -:   48:  ECMA_OBJECT_PROTOTYPE_VALUE_OF,
        -:   49:  ECMA_OBJECT_PROTOTYPE_TO_LOCALE_STRING,
        -:   50:  ECMA_OBJECT_PROTOTYPE_GET_PROTO,
        -:   51:  ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF,
        -:   52:  ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY,
        -:   53:  ECMA_OBJECT_PROTOTYPE_PROPERTY_IS_ENUMERABLE,
        -:   54:  ECMA_OBJECT_PROTOTYPE_SET_PROTO
        -:   55:};
        -:   56:
        -:   57:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-object-prototype.inc.h"
        -:   58:#define BUILTIN_UNDERSCORED_ID object_prototype
        -:   59:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   60:
        -:   61:/** \addtogroup ecma ECMA
        -:   62: * @{
        -:   63: *
        -:   64: * \addtogroup ecmabuiltins
        -:   65: * @{
        -:   66: *
        -:   67: * \addtogroup objectprototype ECMA Object.prototype object built-in
        -:   68: * @{
        -:   69: */
        -:   70:
        -:   71:/**
        -:   72: * The Object.prototype object's 'toString' routine
        -:   73: *
        -:   74: * See also:
        -:   75: *          ECMA-262 v5, 15.2.4.2
        -:   76: *
        -:   77: * @return ecma value
        -:   78: *         Returned value must be freed with ecma_free_value.
        -:   79: */
        -:   80:static ecma_value_t
    #####:   81:ecma_builtin_object_prototype_object_to_string (ecma_value_t this_arg) /**< this argument */
        -:   82:{
    #####:   83:  return ecma_builtin_helper_object_to_string (this_arg);
        -:   84:} /* ecma_builtin_object_prototype_object_to_string */
        -:   85:
        -:   86:/**
        -:   87: * The Object.prototype object's 'valueOf' routine
        -:   88: *
        -:   89: * See also:
        -:   90: *          ECMA-262 v5, 15.2.4.4
        -:   91: *
        -:   92: * @return ecma value
        -:   93: *         Returned value must be freed with ecma_free_value.
        -:   94: */
        -:   95:static ecma_value_t
    #####:   96:ecma_builtin_object_prototype_object_value_of (ecma_value_t this_arg) /**< this argument */
        -:   97:{
    #####:   98:  return ecma_op_to_object (this_arg);
        -:   99:} /* ecma_builtin_object_prototype_object_value_of */
        -:  100:
        -:  101:/**
        -:  102: * The Object.prototype object's 'toLocaleString' routine
        -:  103: *
        -:  104: * See also:
        -:  105: *          ECMA-262 v5, 15.2.4.3
        -:  106: *
        -:  107: * @return ecma value
        -:  108: *         Returned value must be freed with ecma_free_value.
        -:  109: */
        -:  110:static ecma_value_t
     2618:  111:ecma_builtin_object_prototype_object_to_locale_string (ecma_object_t *obj_p) /**< this argument */
        -:  112:{
        -:  113:  /* 2. */
     2618:  114:  ecma_value_t to_string_val = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_TO_STRING_UL);
        -:  115:
     2618:  116:  if (ECMA_IS_VALUE_ERROR (to_string_val))
        -:  117:  {
    #####:  118:    return to_string_val;
        -:  119:  }
        -:  120:
        -:  121:  /* 3. */
     2618:  122:  if (!ecma_op_is_callable (to_string_val))
        -:  123:  {
    #####:  124:    ecma_free_value (to_string_val);
    #####:  125:    return ecma_raise_type_error (ECMA_ERR_MSG ("'toString is missing or not a function.'"));
        -:  126:  }
        -:  127:
        -:  128:  /* 4. */
     2618:  129:  ecma_object_t *to_string_func_obj_p = ecma_get_object_from_value (to_string_val);
     2618:  130:  ecma_value_t ret_value = ecma_op_function_call (to_string_func_obj_p, ecma_make_object_value (obj_p), NULL, 0);
        -:  131:
     2618:  132:  ecma_deref_object (to_string_func_obj_p);
        -:  133:
     2618:  134:  return ret_value;
        -:  135:} /* ecma_builtin_object_prototype_object_to_locale_string */
        -:  136:
        -:  137:/**
        -:  138: * The Object.prototype object's 'hasOwnProperty' routine
        -:  139: *
        -:  140: * See also:
        -:  141: *          ECMA-262 v5, 15.2.4.5
        -:  142: *
        -:  143: * @return ecma value
        -:  144: *         Returned value must be freed with ecma_free_value.
        -:  145: */
        -:  146:static ecma_value_t
    #####:  147:ecma_builtin_object_prototype_object_has_own_property (ecma_object_t *obj_p, /**< this argument */
        -:  148:                                                       ecma_string_t *prop_name_p) /**< first argument */
        -:  149:{
        -:  150:#if ENABLED (JERRY_ES2015_BUILTIN_PROXY)
    #####:  151:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  152:  {
    #####:  153:    ecma_property_descriptor_t prop_desc;
        -:  154:
    #####:  155:    ecma_value_t status = ecma_proxy_object_get_own_property_descriptor (obj_p, prop_name_p, &prop_desc);
        -:  156:
    #####:  157:    if (ecma_is_value_true (status))
        -:  158:    {
    #####:  159:      ecma_free_property_descriptor (&prop_desc);
        -:  160:    }
        -:  161:
    #####:  162:    return status;
        -:  163:  }
        -:  164:#endif /* ENABLED (JERRY_ES2015_BUILTIN_PROXY) */
        -:  165:
    #####:  166:  return ecma_make_boolean_value (ecma_op_ordinary_object_has_own_property (obj_p, prop_name_p));
        -:  167:} /* ecma_builtin_object_prototype_object_has_own_property */
        -:  168:
        -:  169:/**
        -:  170: * The Object.prototype object's 'isPrototypeOf' routine
        -:  171: *
        -:  172: * See also:
        -:  173: *          ECMA-262 v5, 15.2.4.6
        -:  174: *
        -:  175: * @return ecma value
        -:  176: *         Returned value must be freed with ecma_free_value.
        -:  177: */
        -:  178:static ecma_value_t
    #####:  179:ecma_builtin_object_prototype_object_is_prototype_of (ecma_object_t *obj_p, /**< this argument */
        -:  180:                                                      ecma_value_t arg) /**< routine's first argument */
        -:  181:{
        -:  182:  /* 3. Compare prototype to object */
    #####:  183:  ecma_value_t v_obj_value = ecma_op_to_object (arg);
        -:  184:
    #####:  185:  if (ECMA_IS_VALUE_ERROR (v_obj_value))
        -:  186:  {
    #####:  187:    return v_obj_value;
        -:  188:  }
        -:  189:
    #####:  190:  ecma_object_t *v_obj_p = ecma_get_object_from_value (v_obj_value);
        -:  191:
    #####:  192:  ecma_value_t ret_value = ecma_op_object_is_prototype_of (obj_p, v_obj_p);
        -:  193:
    #####:  194:  ecma_deref_object (v_obj_p);
        -:  195:
    #####:  196:  return ret_value;
        -:  197:} /* ecma_builtin_object_prototype_object_is_prototype_of */
        -:  198:
        -:  199:/**
        -:  200: * The Object.prototype object's 'propertyIsEnumerable' routine
        -:  201: *
        -:  202: * See also:
        -:  203: *          ECMA-262 v5, 15.2.4.7
        -:  204: *
        -:  205: * @return ecma value
        -:  206: *         Returned value must be freed with ecma_free_value.
        -:  207: */
        -:  208:static ecma_value_t
    #####:  209:ecma_builtin_object_prototype_object_property_is_enumerable (ecma_object_t *obj_p, /**< this argument */
        -:  210:                                                             ecma_string_t *prop_name_p) /**< first argument */
        -:  211:{
    #####:  212:  ecma_property_descriptor_t prop_desc;
    #####:  213:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, prop_name_p, &prop_desc);
        -:  214:
    #####:  215:  if (!ecma_is_value_true (status))
        -:  216:  {
    #####:  217:    return status;
        -:  218:  }
        -:  219:
    #####:  220:  bool is_enumerable = (prop_desc.flags & ECMA_PROP_IS_ENUMERABLE);
        -:  221:
    #####:  222:  ecma_free_property_descriptor (&prop_desc);
        -:  223:
    #####:  224:  return ecma_make_boolean_value (is_enumerable);
        -:  225:} /* ecma_builtin_object_prototype_object_property_is_enumerable */
        -:  226:
        -:  227:/**
        -:  228: * Dispatcher of the built-in's routines
        -:  229: *
        -:  230: * @return ecma value
        -:  231: *         Returned value must be freed with ecma_free_value.
        -:  232: */
        -:  233:ecma_value_t
     2618:  234:ecma_builtin_object_prototype_dispatch_routine (uint16_t builtin_routine_id, /**< built-in wide routine
        -:  235:                                                                              *   identifier */
        -:  236:                                                ecma_value_t this_arg, /**< 'this' argument value */
        -:  237:                                                const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  238:                                                                                      *   passed to routine */
        -:  239:                                                ecma_length_t arguments_number) /**< length of arguments' list */
        -:  240:{
        -:  241:  JERRY_UNUSED (arguments_number);
        -:  242:
        -:  243:  /* no specialization */
     2618:  244:  if (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_VALUE_OF)
        -:  245:  {
    #####:  246:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_TO_STRING)
        -:  247:    {
    #####:  248:      return ecma_builtin_object_prototype_object_to_string (this_arg);
        -:  249:    }
        -:  250:
    #####:  251:    JERRY_ASSERT (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_VALUE_OF);
        -:  252:
    #####:  253:    return ecma_builtin_object_prototype_object_value_of (this_arg);
        -:  254:  }
        -:  255:
     2618:  256:  if (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF)
        -:  257:  {
     2618:  258:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF)
        -:  259:    {
        -:  260:      /* 15.2.4.6.1. */
    #####:  261:      if (!ecma_is_value_object (arguments_list_p[0]))
        -:  262:      {
    #####:  263:        return ECMA_VALUE_FALSE;
        -:  264:      }
        -:  265:    }
        -:  266:
     2618:  267:    ecma_value_t to_object = ecma_op_to_object (this_arg);
        -:  268:
     2618:  269:    if (ECMA_IS_VALUE_ERROR (to_object))
        -:  270:    {
    #####:  271:      return to_object;
        -:  272:    }
        -:  273:
     2618:  274:    ecma_object_t *obj_p = ecma_get_object_from_value (to_object);
        -:  275:
        -:  276:    ecma_value_t ret_value;
        -:  277:
     2618:  278:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF)
        -:  279:    {
    #####:  280:      ret_value = ecma_builtin_object_prototype_object_is_prototype_of (obj_p, arguments_list_p[0]);
        -:  281:    }
        -:  282:
        -:  283:#if ENABLED (JERRY_ES2015)
     2618:  284:    else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_GET_PROTO)
        -:  285:    {
    #####:  286:      ret_value = ecma_builtin_object_object_get_prototype_of (obj_p);
        -:  287:    }
        -:  288:#endif /* ENABLED (JERRY_ES2015)*/
        -:  289:
        -:  290:    else
        -:  291:    {
     2618:  292:      ret_value = ecma_builtin_object_prototype_object_to_locale_string (obj_p);
        -:  293:    }
        -:  294:
     2618:  295:    ecma_deref_object (obj_p);
        -:  296:
     2618:  297:    return ret_value;
        -:  298:  }
        -:  299:
    #####:  300:  JERRY_ASSERT (builtin_routine_id >= ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY);
        -:  301:
        -:  302:#if ENABLED (JERRY_ES2015)
    #####:  303:  if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_SET_PROTO)
        -:  304:  {
    #####:  305:    return ecma_builtin_object_object_set_proto (this_arg, arguments_list_p[0]);
        -:  306:  }
        -:  307:#endif /* ENABLED (JERRY_ES2015)*/
        -:  308:
    #####:  309:  ecma_string_t *prop_name_p = ecma_op_to_prop_name (arguments_list_p[0]);
        -:  310:
    #####:  311:  if (prop_name_p == NULL)
        -:  312:  {
    #####:  313:    return ECMA_VALUE_ERROR;
        -:  314:  }
        -:  315:
    #####:  316:  ecma_value_t to_object = ecma_op_to_object (this_arg);
        -:  317:
    #####:  318:  if (ECMA_IS_VALUE_ERROR (to_object))
        -:  319:  {
    #####:  320:    ecma_deref_ecma_string (prop_name_p);
    #####:  321:    return to_object;
        -:  322:  }
        -:  323:
    #####:  324:  ecma_object_t *obj_p = ecma_get_object_from_value (to_object);
        -:  325:
        -:  326:  ecma_value_t ret_value;
        -:  327:
    #####:  328:  if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY)
        -:  329:  {
    #####:  330:    ret_value = ecma_builtin_object_prototype_object_has_own_property (obj_p, prop_name_p);
        -:  331:  }
        -:  332:  else
        -:  333:  {
    #####:  334:    ret_value = ecma_builtin_object_prototype_object_property_is_enumerable (obj_p, prop_name_p);
        -:  335:  }
        -:  336:
    #####:  337:  ecma_deref_ecma_string (prop_name_p);
    #####:  338:  ecma_deref_object (obj_p);
        -:  339:
    #####:  340:  return ret_value;
        -:  341:} /* ecma_builtin_object_prototype_dispatch_routine */
        -:  342:
        -:  343:/**
        -:  344: * @}
        -:  345: * @}
        -:  346: * @}
        -:  347: */
