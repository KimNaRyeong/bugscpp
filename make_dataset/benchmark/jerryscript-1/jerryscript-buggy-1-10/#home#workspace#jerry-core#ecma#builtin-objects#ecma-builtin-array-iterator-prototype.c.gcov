        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-array-iterator-prototype.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtin-helpers.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-iterator-object.h"
        -:   19:#include "ecma-typedarray-object.h"
        -:   20:
        -:   21:#if ENABLED (JERRY_ES2015)
        -:   22:
        -:   23:#define ECMA_BUILTINS_INTERNAL
        -:   24:#include "ecma-builtins-internal.h"
        -:   25:
        -:   26:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-array-iterator-prototype.inc.h"
        -:   27:#define BUILTIN_UNDERSCORED_ID array_iterator_prototype
        -:   28:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   29:
        -:   30:/** \addtogroup ecma ECMA
        -:   31: * @{
        -:   32: *
        -:   33: * \addtogroup ecmabuiltins
        -:   34: * @{
        -:   35: *
        -:   36: * \addtogroup %arrayiteratorprototype% ECMA %ArrayIteratorPrototype% object built-in
        -:   37: * @{
        -:   38: */
        -:   39:
        -:   40:/**
        -:   41: * The %ArrayIteratorPrototype% object's 'next' routine
        -:   42: *
        -:   43: * See also:
        -:   44: *          ECMA-262 v6, 22.1.5.2.1
        -:   45: *
        -:   46: * Note:
        -:   47: *     Returned value must be freed with ecma_free_value.
        -:   48: *
        -:   49: * @return iterator result object, if success
        -:   50: *         error - otherwise
        -:   51: */
        -:   52:static ecma_value_t
    #####:   53:ecma_builtin_array_iterator_prototype_object_next (ecma_value_t this_val) /**< this argument */
        -:   54:{
        -:   55:  /* 1 - 2. */
    #####:   56:  if (!ecma_is_value_object (this_val))
        -:   57:  {
    #####:   58:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object."));
        -:   59:  }
        -:   60:
    #####:   61:  ecma_object_t *obj_p = ecma_get_object_from_value (this_val);
    #####:   62:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;
        -:   63:
        -:   64:  /* 3. */
    #####:   65:  if (ecma_get_object_type (obj_p) != ECMA_OBJECT_TYPE_PSEUDO_ARRAY
    #####:   66:      || ext_obj_p->u.pseudo_array.type != ECMA_PSEUDO_ARRAY_ITERATOR)
        -:   67:  {
    #####:   68:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an iterator."));
        -:   69:  }
        -:   70:
    #####:   71:  ecma_value_t iterated_value = ext_obj_p->u.pseudo_array.u2.iterated_value;
        -:   72:
        -:   73:  /* 4 - 5 */
    #####:   74:  if (ecma_is_value_empty (iterated_value))
        -:   75:  {
    #####:   76:    return ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
        -:   77:  }
        -:   78:
    #####:   79:  ecma_object_t *array_object_p = ecma_get_object_from_value (iterated_value);
        -:   80:
        -:   81:  /* 8 - 9. */
    #####:   82:  uint32_t length;
    #####:   83:  ecma_value_t len_value = ecma_op_object_get_length (array_object_p, &length);
        -:   84:
    #####:   85:  if (ECMA_IS_VALUE_ERROR (len_value))
        -:   86:  {
    #####:   87:    return len_value;
        -:   88:  }
        -:   89:
    #####:   90:  uint32_t index = ext_obj_p->u.pseudo_array.u1.iterator_index;
        -:   91:
    #####:   92:  if (JERRY_UNLIKELY (index == ECMA_ITERATOR_INDEX_LIMIT))
        -:   93:  {
        -:   94:    /* After the ECMA_ITERATOR_INDEX_LIMIT limit is reached the [[%Iterator%NextIndex]]
        -:   95:       property is stored as an internal property */
    #####:   96:    ecma_string_t *prop_name_p = ecma_get_magic_string (LIT_INTERNAL_MAGIC_STRING_ITERATOR_NEXT_INDEX);
    #####:   97:    ecma_value_t index_value = ecma_op_object_get (obj_p, prop_name_p);
        -:   98:
    #####:   99:    if (!ecma_is_value_undefined (index_value))
        -:  100:    {
    #####:  101:      index = (uint32_t) (ecma_get_number_from_value (index_value) + 1);
        -:  102:    }
        -:  103:
    #####:  104:    ecma_value_t put_result = ecma_op_object_put (obj_p,
        -:  105:                                                  prop_name_p,
        -:  106:                                                  ecma_make_uint32_value (index),
        -:  107:                                                  true);
        -:  108:
    #####:  109:    JERRY_ASSERT (ecma_is_value_true (put_result));
        -:  110:
    #####:  111:    ecma_free_value (index_value);
        -:  112:  }
        -:  113:  else
        -:  114:  {
        -:  115:    /* 11. */
    #####:  116:    ext_obj_p->u.pseudo_array.u1.iterator_index++;
        -:  117:  }
        -:  118:
    #####:  119:  if (index >= length)
        -:  120:  {
    #####:  121:    ext_obj_p->u.pseudo_array.u2.iterated_value = ECMA_VALUE_EMPTY;
    #####:  122:    return ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
        -:  123:  }
        -:  124:
        -:  125:  /* 7. */
    #####:  126:  uint8_t iterator_type = ext_obj_p->u.pseudo_array.extra_info;
        -:  127:
    #####:  128:  if (iterator_type == ECMA_ITERATOR_KEYS)
        -:  129:  {
        -:  130:    /* 12. */
    #####:  131:    return ecma_create_iter_result_object (ecma_make_uint32_value (index), ECMA_VALUE_FALSE);
        -:  132:  }
        -:  133:
        -:  134:  /* 14. */
    #####:  135:  ecma_value_t get_value = ecma_op_object_get_by_uint32_index (array_object_p, index);
        -:  136:
        -:  137:  /* 15. */
    #####:  138:  if (ECMA_IS_VALUE_ERROR (get_value))
        -:  139:  {
    #####:  140:    return get_value;
        -:  141:  }
        -:  142:
        -:  143:  ecma_value_t result;
        -:  144:
        -:  145:  /* 16. */
    #####:  146:  if (iterator_type == ECMA_ITERATOR_VALUES)
        -:  147:  {
    #####:  148:    result = ecma_create_iter_result_object (get_value, ECMA_VALUE_FALSE);
        -:  149:  }
        -:  150:  else
        -:  151:  {
        -:  152:    /* 17.a */
    #####:  153:    JERRY_ASSERT (iterator_type == ECMA_ITERATOR_KEYS_VALUES);
        -:  154:
        -:  155:    /* 17.b */
        -:  156:    ecma_value_t entry_array_value;
    #####:  157:    entry_array_value = ecma_create_array_from_iter_element (get_value,
        -:  158:                                                             ecma_make_uint32_value (index));
        -:  159:
    #####:  160:    result = ecma_create_iter_result_object (entry_array_value, ECMA_VALUE_FALSE);
    #####:  161:    ecma_free_value (entry_array_value);
        -:  162:  }
        -:  163:
    #####:  164:  ecma_free_value (get_value);
        -:  165:
    #####:  166:  return result;
        -:  167:} /* ecma_builtin_array_iterator_prototype_object_next */
        -:  168:
        -:  169:/**
        -:  170: * @}
        -:  171: * @}
        -:  172: * @}
        -:  173: */
        -:  174:
        -:  175:#endif /* ENABLED (JERRY_ES2015) */
