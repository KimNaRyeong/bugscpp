        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-dataview-object.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-arraybuffer-object.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-gc.h"
        -:   20:#include "ecma-helpers.h"
        -:   21:#include "ecma-dataview-object.h"
        -:   22:#include "ecma-typedarray-object.h"
        -:   23:#include "ecma-objects.h"
        -:   24:
        -:   25:#if ENABLED (JERRY_ES2015_BUILTIN_DATAVIEW)
        -:   26:
        -:   27:/** \addtogroup ecma ECMA
        -:   28: * @{
        -:   29: *
        -:   30: * \addtogroup ecmadataviewobject ECMA builtin DataView helper functions
        -:   31: * @{
        -:   32: */
        -:   33:
        -:   34:/**
        -:   35: * Handle calling [[Construct]] of built-in DataView like objects
        -:   36: *
        -:   37: * See also:
        -:   38: *          ECMA-262 v6, 24.2.2.1
        -:   39: *
        -:   40: * @return created DataView object as an ecma-value - if success
        -:   41: *         raised error - otherwise
        -:   42: */
        -:   43:ecma_value_t
    #####:   44:ecma_op_dataview_create (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   45:                         ecma_length_t arguments_list_len) /**< number of arguments */
        -:   46:{
    #####:   47:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   48:
    #####:   49:  ecma_value_t buffer = arguments_list_len > 0 ? arguments_list_p[0] : ECMA_VALUE_UNDEFINED;
        -:   50:
        -:   51:  /* 2. */
    #####:   52:  if (!ecma_is_value_object (buffer))
        -:   53:  {
    #####:   54:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument buffer is not an object."));
        -:   55:  }
        -:   56:
    #####:   57:  ecma_object_t *buffer_p = ecma_get_object_from_value (buffer);
        -:   58:
        -:   59:  /* 3. */
    #####:   60:  if (!ecma_object_class_is (buffer_p, LIT_MAGIC_STRING_ARRAY_BUFFER_UL))
        -:   61:  {
    #####:   62:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument buffer is not an arraybuffer."));
        -:   63:  }
        -:   64:
        -:   65:  /* 4 - 6. */
    #####:   66:  uint32_t offset = 0;
        -:   67:
    #####:   68:  if (arguments_list_len > 1)
        -:   69:  {
    #####:   70:    ecma_number_t number_offset, offset_num;
    #####:   71:    if (ECMA_IS_VALUE_ERROR (ecma_get_number (arguments_list_p[1], &number_offset)))
        -:   72:    {
    #####:   73:      return ECMA_VALUE_ERROR;
        -:   74:    }
    #####:   75:    if (ECMA_IS_VALUE_ERROR (ecma_op_to_integer (arguments_list_p[1], &offset_num)))
        -:   76:    {
    #####:   77:      return ECMA_VALUE_ERROR;
        -:   78:    }
        -:   79:
        -:   80:    /* 7. */
    #####:   81:    if (number_offset != offset_num || offset_num < 0)
        -:   82:    {
    #####:   83:      return ecma_raise_range_error (ECMA_ERR_MSG ("Start offset is outside the bounds of the buffer."));
        -:   84:    }
        -:   85:
    #####:   86:    offset = (uint32_t) offset_num;
        -:   87:  }
        -:   88:
        -:   89:  /* 8. */
    #####:   90:  if (ecma_arraybuffer_is_detached (buffer_p))
        -:   91:  {
    #####:   92:    return ecma_raise_type_error (ECMA_ERR_MSG ("ArrayBuffer has been detached."));
        -:   93:  }
        -:   94:
        -:   95:  /* 9. */
    #####:   96:  ecma_length_t buffer_byte_length = ecma_arraybuffer_get_length (buffer_p);
        -:   97:
        -:   98:  /* 10. */
    #####:   99:  if ((ecma_length_t) offset > buffer_byte_length)
        -:  100:  {
    #####:  101:    return ecma_raise_range_error (ECMA_ERR_MSG ("Start offset is outside the bounds of the buffer."));
        -:  102:  }
        -:  103:
        -:  104:  /* 11 - 12. */
    #####:  105:  uint32_t viewByteLength;
    #####:  106:  if (arguments_list_len > 2)
        -:  107:  {
        -:  108:    /* 12.a */
    #####:  109:    ecma_value_t byte_length_value = ecma_op_to_length (arguments_list_p[2], &viewByteLength);
        -:  110:
        -:  111:    /* 12.b */
    #####:  112:    if (ECMA_IS_VALUE_ERROR (byte_length_value))
        -:  113:    {
    #####:  114:      return byte_length_value;
        -:  115:    }
        -:  116:
        -:  117:    /* 12.c */
    #####:  118:    if ((ecma_number_t) offset + viewByteLength > buffer_byte_length)
        -:  119:    {
    #####:  120:      return ecma_raise_range_error (ECMA_ERR_MSG ("Start offset is outside the bounds of the buffer."));
        -:  121:    }
        -:  122:  }
        -:  123:  else
        -:  124:  {
        -:  125:    /* 11.a */
    #####:  126:    viewByteLength = (uint32_t) (buffer_byte_length - (ecma_length_t) offset);
        -:  127:  }
        -:  128:
        -:  129:  /* 13. */
    #####:  130:  ecma_object_t *object_p = ecma_create_object (ecma_builtin_get (ECMA_BUILTIN_ID_DATAVIEW_PROTOTYPE),
        -:  131:                                                sizeof (ecma_dataview_object_t),
        -:  132:                                                ECMA_OBJECT_TYPE_CLASS);
        -:  133:
    #####:  134:  ecma_dataview_object_t *dataview_obj_p = (ecma_dataview_object_t *) object_p;
    #####:  135:  dataview_obj_p->header.u.class_prop.class_id = LIT_MAGIC_STRING_DATAVIEW_UL;
    #####:  136:  dataview_obj_p->header.u.class_prop.u.length = viewByteLength;
    #####:  137:  dataview_obj_p->buffer_p = buffer_p;
    #####:  138:  dataview_obj_p->byte_offset = (uint32_t) offset;
        -:  139:
    #####:  140:  return ecma_make_object_value (object_p);
        -:  141:} /* ecma_op_dataview_create */
        -:  142:
        -:  143:/**
        -:  144: * Get the DataView object pointer
        -:  145: *
        -:  146: * Note:
        -:  147: *   If the function returns with NULL, the error object has
        -:  148: *   already set, and the caller must return with ECMA_VALUE_ERROR
        -:  149: *
        -:  150: * @return pointer to the dataView if this_arg is a valid dataView object
        -:  151: *         NULL otherwise
        -:  152: */
        -:  153:ecma_dataview_object_t *
    #####:  154:ecma_op_dataview_get_object (ecma_value_t this_arg) /**< this argument */
        -:  155:{
    #####:  156:  if (ecma_is_value_object (this_arg))
        -:  157:  {
    #####:  158:    ecma_dataview_object_t *dataview_object_p = (ecma_dataview_object_t *) ecma_get_object_from_value (this_arg);
        -:  159:
    #####:  160:    if (ecma_get_object_type (&dataview_object_p->header.object) == ECMA_OBJECT_TYPE_CLASS
    #####:  161:        && dataview_object_p->header.u.class_prop.class_id == LIT_MAGIC_STRING_DATAVIEW_UL)
        -:  162:    {
    #####:  163:      return dataview_object_p;
        -:  164:    }
        -:  165:  }
        -:  166:
    #####:  167:  ecma_raise_type_error (ECMA_ERR_MSG ("Expected a DataView object."));
    #####:  168:  return NULL;
        -:  169:} /* ecma_op_dataview_get_object */
        -:  170:
        -:  171:/**
        -:  172: * Helper union to specify the system's endiannes
        -:  173: */
        -:  174:typedef union
        -:  175:{
        -:  176:  uint32_t number; /**< for write numeric data */
        -:  177:  char data[sizeof (uint32_t)]; /**< for read numeric data */
        -:  178:} ecma_dataview_endiannes_check_t;
        -:  179:
        -:  180:/**
        -:  181: * Helper function to check the current system endiannes
        -:  182: *
        -:  183: * @return true - if the current system has little endian byteorder
        -:  184: *         false - otherwise
        -:  185: */
        -:  186:static bool
    #####:  187:ecma_dataview_check_little_endian (void)
        -:  188:{
        -:  189:  ecma_dataview_endiannes_check_t checker;
    #####:  190:  checker.number = 0x01;
        -:  191:
    #####:  192:  return checker.data[0] == 0x01;
        -:  193:} /* ecma_dataview_check_little_endian */
        -:  194:
        -:  195:/**
        -:  196: * Helper function for swap bytes if the system's endiannes
        -:  197: * does not match with the requested endiannes.
        -:  198: */
        -:  199:static void
    #####:  200:ecma_dataview_swap_order (bool system_is_little_endian, /**< true - if the system has little endian byteorder
        -:  201:                                                         *   false - otherwise */
        -:  202:                          bool is_little_endian, /**< true - if little endian byteorder is requested
        -:  203:                                                  *   false - otherwise */
        -:  204:                          uint32_t element_size, /**< element size byte according to the Table 49.*/
        -:  205:                          lit_utf8_byte_t *block_p) /**< data block */
        -:  206:{
    #####:  207:  if (system_is_little_endian ^ is_little_endian)
        -:  208:  {
    #####:  209:    for (uint32_t i = 0; i < element_size / 2; i++)
        -:  210:    {
    #####:  211:      lit_utf8_byte_t tmp = block_p[i];
    #####:  212:      block_p[i] = block_p[element_size - i -  1];
    #####:  213:      block_p[element_size - i - 1] = tmp;
        -:  214:    }
        -:  215:  }
    #####:  216:} /* ecma_dataview_swap_order */
        -:  217:
        -:  218:/**
        -:  219: * GetViewValue and SetViewValue abstact operation
        -:  220: *
        -:  221: * See also:
        -:  222: *          ECMA-262 v6, 24.2.1.1
        -:  223: *          ECMA-262 v6, 24.2.1.2
        -:  224: *
        -:  225: * @return ecma value
        -:  226: */
        -:  227:ecma_value_t
    #####:  228:ecma_op_dataview_get_set_view_value (ecma_value_t view, /**< the operation's 'view' argument */
        -:  229:                                     ecma_value_t request_index, /**< the operation's 'requestIndex' argument */
        -:  230:                                     ecma_value_t is_little_endian_value, /**< the operation's
        -:  231:                                                                           *   'isLittleEndian' argument */
        -:  232:                                     ecma_value_t value_to_set, /**< the operation's 'value' argument */
        -:  233:                                     ecma_typedarray_type_t id) /**< the operation's 'type' argument */
        -:  234:{
        -:  235:  /* 1 - 2. */
    #####:  236:  ecma_dataview_object_t *view_p = ecma_op_dataview_get_object (view);
        -:  237:
    #####:  238:  if (JERRY_UNLIKELY (view_p == NULL))
        -:  239:  {
    #####:  240:    return ECMA_VALUE_ERROR;
        -:  241:  }
        -:  242:
        -:  243:  /* 3 - 5. */
    #####:  244:  ecma_number_t number_index;
    #####:  245:  ecma_value_t number_index_value = ecma_op_to_integer (request_index, &number_index);
        -:  246:
    #####:  247:  if (ECMA_IS_VALUE_ERROR (number_index_value))
        -:  248:  {
    #####:  249:    return number_index_value;
        -:  250:  }
        -:  251:
    #####:  252:  int32_t get_index = ecma_number_to_int32 (number_index);
        -:  253:
        -:  254:  /* 6. */
    #####:  255:  if (number_index != get_index || get_index < 0)
        -:  256:  {
    #####:  257:    return ecma_raise_range_error (ECMA_ERR_MSG ("Start offset is outside the bounds of the buffer."));
        -:  258:  }
        -:  259:
        -:  260:  /* 7. */
    #####:  261:  bool is_little_endian = ecma_op_to_boolean (is_little_endian_value);
        -:  262:
        -:  263:  /* 8. TODO: Throw TypeError, when Detached ArrayBuffer will be supported. */
        -:  264:
        -:  265:  /* 9. */
    #####:  266:  ecma_object_t *buffer_p = view_p->buffer_p;
    #####:  267:  JERRY_ASSERT (ecma_object_class_is (buffer_p, LIT_MAGIC_STRING_ARRAY_BUFFER_UL));
    #####:  268:  if (ecma_arraybuffer_is_detached (buffer_p))
        -:  269:  {
    #####:  270:    return ecma_raise_type_error (ECMA_ERR_MSG ("ArrayBuffer has been detached."));
        -:  271:  }
        -:  272:
        -:  273:  /* 10. */
    #####:  274:  uint32_t view_offset = view_p->byte_offset;
        -:  275:
        -:  276:  /* 11. */
    #####:  277:  uint32_t view_size = view_p->header.u.class_prop.u.length;
        -:  278:
        -:  279:  /* 12. */
    #####:  280:  uint8_t element_size = (uint8_t) (1 << (ecma_typedarray_helper_get_shift_size (id)));
        -:  281:
        -:  282:  /* 13. */
    #####:  283:  if ((uint32_t) get_index + element_size > view_size)
        -:  284:  {
    #####:  285:    return ecma_raise_range_error (ECMA_ERR_MSG ("Start offset is outside the bounds of the buffer."));
        -:  286:  }
        -:  287:
        -:  288:  /* 14. */
    #####:  289:  uint32_t buffer_index = (uint32_t) get_index + view_offset;
    #####:  290:  lit_utf8_byte_t *block_p = ecma_arraybuffer_get_buffer (buffer_p) + buffer_index;
        -:  291:
    #####:  292:  bool system_is_little_endian = ecma_dataview_check_little_endian ();
        -:  293:
    #####:  294:  if (ecma_is_value_empty (value_to_set))
    #####:  295:  {
    #####:  296:    JERRY_VLA (lit_utf8_byte_t, swap_block_p, element_size);
    #####:  297:    memcpy (swap_block_p, block_p, element_size * sizeof (lit_utf8_byte_t));
    #####:  298:    ecma_dataview_swap_order (system_is_little_endian, is_little_endian, element_size, swap_block_p);
    #####:  299:    return ecma_make_number_value (ecma_get_typedarray_element (swap_block_p, id));
        -:  300:  }
        -:  301:
    #####:  302:  if (ecma_is_value_number (value_to_set))
        -:  303:  {
    #####:  304:    ecma_set_typedarray_element (block_p, ecma_get_number_from_value (value_to_set), id);
    #####:  305:    ecma_dataview_swap_order (system_is_little_endian, is_little_endian, element_size, block_p);
        -:  306:  }
        -:  307:
    #####:  308:  return ECMA_VALUE_UNDEFINED;
        -:  309:} /* ecma_op_dataview_get_set_view_value */
        -:  310:
        -:  311:/**
        -:  312: * Check if the value is dataview
        -:  313: *
        -:  314: * @return true - if value is a DataView object
        -:  315: *         false - otherwise
        -:  316: */
        -:  317:bool
    #####:  318:ecma_is_dataview (ecma_value_t value) /**< the target need to be checked */
        -:  319:{
    #####:  320:  if (!ecma_is_value_object (value))
        -:  321:  {
    #####:  322:    return false;
        -:  323:  }
        -:  324:
    #####:  325:  ecma_dataview_object_t *dataview_object_p = (ecma_dataview_object_t *) ecma_get_object_from_value (value);
        -:  326:
    #####:  327:  return (ecma_get_object_type (&dataview_object_p->header.object) == ECMA_OBJECT_TYPE_CLASS
    #####:  328:          && dataview_object_p->header.u.class_prop.class_id == LIT_MAGIC_STRING_DATAVIEW_UL);
        -:  329:} /* ecma_is_dataview */
        -:  330:
        -:  331:/**
        -:  332: * @}
        -:  333: * @}
        -:  334: */
        -:  335:
        -:  336:#endif /* ENABLED (JERRY_ES2015_BUILTIN_DATAVIEW */
