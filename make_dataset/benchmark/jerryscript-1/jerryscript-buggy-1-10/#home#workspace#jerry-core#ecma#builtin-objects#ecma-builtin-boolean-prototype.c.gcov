        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-boolean-prototype.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-conversion.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-objects.h"
        -:   24:#include "ecma-string-object.h"
        -:   25:#include "ecma-try-catch-macro.h"
        -:   26:#include "jrt.h"
        -:   27:
        -:   28:#if ENABLED (JERRY_BUILTIN_BOOLEAN)
        -:   29:
        -:   30:#define ECMA_BUILTINS_INTERNAL
        -:   31:#include "ecma-builtins-internal.h"
        -:   32:
        -:   33:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-boolean-prototype.inc.h"
        -:   34:#define BUILTIN_UNDERSCORED_ID boolean_prototype
        -:   35:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   36:
        -:   37:/** \addtogroup ecma ECMA
        -:   38: * @{
        -:   39: *
        -:   40: * \addtogroup ecmabuiltins
        -:   41: * @{
        -:   42: *
        -:   43: * \addtogroup booleanprototype ECMA Boolean.prototype object built-in
        -:   44: * @{
        -:   45: */
        -:   46:
        -:   47:/**
        -:   48: * The Boolean.prototype object's 'toString' routine
        -:   49: *
        -:   50: * See also:
        -:   51: *          ECMA-262 v5, 15.6.4.2
        -:   52: *
        -:   53: * @return ecma value
        -:   54: *         Returned value must be freed with ecma_free_value.
        -:   55: */
        -:   56:static ecma_value_t
    #####:   57:ecma_builtin_boolean_prototype_object_to_string (ecma_value_t this_arg) /**< this argument */
        -:   58:{
    #####:   59:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -:   60:
    #####:   61:  ECMA_TRY_CATCH (value_of_ret,
        -:   62:                  ecma_builtin_boolean_prototype_object_value_of (this_arg),
        -:   63:                  ret_value);
        -:   64:
    #####:   65:  if (ecma_is_value_true (value_of_ret))
        -:   66:  {
    #####:   67:    ret_value = ecma_make_magic_string_value (LIT_MAGIC_STRING_TRUE);
        -:   68:  }
        -:   69:  else
        -:   70:  {
    #####:   71:    JERRY_ASSERT (ecma_is_value_boolean (value_of_ret));
        -:   72:
    #####:   73:    ret_value = ecma_make_magic_string_value (LIT_MAGIC_STRING_FALSE);
        -:   74:  }
        -:   75:
    #####:   76:  ECMA_FINALIZE (value_of_ret);
        -:   77:
    #####:   78:  return ret_value;
        -:   79:} /* ecma_builtin_boolean_prototype_object_to_string */
        -:   80:
        -:   81:/**
        -:   82: * The Boolean.prototype object's 'valueOf' routine
        -:   83: *
        -:   84: * See also:
        -:   85: *          ECMA-262 v5, 15.6.4.3
        -:   86: *
        -:   87: * @return ecma value
        -:   88: *         Returned value must be freed with ecma_free_value.
        -:   89: */
        -:   90:static ecma_value_t
    #####:   91:ecma_builtin_boolean_prototype_object_value_of (ecma_value_t this_arg) /**< this argument */
        -:   92:{
    #####:   93:  if (ecma_is_value_boolean (this_arg))
        -:   94:  {
    #####:   95:    return this_arg;
        -:   96:  }
    #####:   97:  else if (ecma_is_value_object (this_arg))
        -:   98:  {
    #####:   99:    ecma_object_t *object_p = ecma_get_object_from_value (this_arg);
        -:  100:
    #####:  101:    if (ecma_object_class_is (object_p, LIT_MAGIC_STRING_BOOLEAN_UL))
        -:  102:    {
    #####:  103:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -:  104:
    #####:  105:      JERRY_ASSERT (ecma_is_value_boolean (ext_object_p->u.class_prop.u.value));
        -:  106:
    #####:  107:      return ext_object_p->u.class_prop.u.value;
        -:  108:    }
        -:  109:  }
        -:  110:
    #####:  111:  return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not a Boolean object."));
        -:  112:} /* ecma_builtin_boolean_prototype_object_value_of */
        -:  113:
        -:  114:/**
        -:  115: * @}
        -:  116: * @}
        -:  117: * @}
        -:  118: */
        -:  119:
        -:  120:#endif /* ENABLED (JERRY_BUILTIN_BOOLEAN) */
