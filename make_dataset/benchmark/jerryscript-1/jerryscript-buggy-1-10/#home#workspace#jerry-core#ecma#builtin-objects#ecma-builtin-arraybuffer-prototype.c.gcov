        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-arraybuffer-prototype.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtin-helpers.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-globals.h"
        -:   20:#include "ecma-helpers.h"
        -:   21:#include "ecma-objects.h"
        -:   22:#include "ecma-arraybuffer-object.h"
        -:   23:#include "ecma-try-catch-macro.h"
        -:   24:#include "jrt.h"
        -:   25:#include "jrt-libc-includes.h"
        -:   26:
        -:   27:#if ENABLED (JERRY_ES2015_BUILTIN_TYPEDARRAY)
        -:   28:
        -:   29:#define ECMA_BUILTINS_INTERNAL
        -:   30:#include "ecma-builtins-internal.h"
        -:   31:
        -:   32:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-arraybuffer-prototype.inc.h"
        -:   33:#define BUILTIN_UNDERSCORED_ID arraybuffer_prototype
        -:   34:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   35:
        -:   36:/** \addtogroup ecma ECMA
        -:   37: * @{
        -:   38: *
        -:   39: * \addtogroup ecmabuiltins
        -:   40: * @{
        -:   41: *
        -:   42: * \addtogroup arraybufferprototype ECMA ArrayBuffer.prototype object built-in
        -:   43: * @{
        -:   44: */
        -:   45:
        -:   46:/**
        -:   47: * The ArrayBuffer.prototype.bytelength accessor
        -:   48: *
        -:   49: * See also:
        -:   50: *          ES2015, 24.1.4.1
        -:   51: *
        -:   52: * @return ecma value
        -:   53: *         Returned value must be freed with ecma_free_value.
        -:   54: */
        -:   55:static ecma_value_t
    #####:   56:ecma_builtin_arraybuffer_prototype_bytelength_getter (ecma_value_t this_arg) /**< this argument */
        -:   57:{
    #####:   58:  if (ecma_is_value_object (this_arg))
        -:   59:  {
    #####:   60:    ecma_object_t *object_p = ecma_get_object_from_value (this_arg);
        -:   61:
    #####:   62:    if (ecma_object_class_is (object_p, LIT_MAGIC_STRING_ARRAY_BUFFER_UL))
        -:   63:    {
    #####:   64:      if (ecma_arraybuffer_is_detached (object_p))
        -:   65:      {
    #####:   66:        return ecma_raise_type_error (ECMA_ERR_MSG ("ArrayBuffer has been detached."));
        -:   67:      }
    #####:   68:      ecma_length_t len = ecma_arraybuffer_get_length (object_p);
        -:   69:
    #####:   70:      return ecma_make_uint32_value (len);
        -:   71:    }
        -:   72:  }
        -:   73:
    #####:   74:  return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not a ArrayBuffer object."));
        -:   75:} /* ecma_builtin_arraybuffer_prototype_bytelength_getter */
        -:   76:
        -:   77:/**
        -:   78: * The ArrayBuffer.prototype object's 'slice' routine
        -:   79: *
        -:   80: * See also:
        -:   81: *          ES2015, 24.1.4.3
        -:   82: *
        -:   83: * @return ecma value
        -:   84: *         Returned value must be freed with ecma_free_value.
        -:   85: */
        -:   86:static ecma_value_t
    #####:   87:ecma_builtin_arraybuffer_prototype_object_slice (ecma_value_t this_arg, /**< this argument */
        -:   88:                                                 ecma_value_t arg1, /**< routine's first argument */
        -:   89:                                                 ecma_value_t arg2) /**< routine's second argument */
        -:   90:{
    #####:   91:  if (!ecma_is_value_object (this_arg))
        -:   92:  {
    #####:   93:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not object."));
        -:   94:  }
        -:   95:
    #####:   96:  ecma_object_t *object_p = ecma_get_object_from_value (this_arg);
        -:   97:
    #####:   98:  if (!ecma_object_class_is (object_p, LIT_MAGIC_STRING_ARRAY_BUFFER_UL))
        -:   99:  {
    #####:  100:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an ArrayBuffer object."));
        -:  101:  }
        -:  102:
    #####:  103:  if (ecma_arraybuffer_is_detached (object_p))
        -:  104:  {
    #####:  105:    return ecma_raise_type_error (ECMA_ERR_MSG ("ArrayBuffer has been detached."));
        -:  106:  }
        -:  107:
    #####:  108:  ecma_length_t len = ecma_arraybuffer_get_length (object_p);
        -:  109:
    #####:  110:  ecma_length_t start = 0, end = len;
        -:  111:
    #####:  112:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -:  113:
    #####:  114:  if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_array_index_normalize (arg1,
        -:  115:                                                                      len,
        -:  116:                                                                      &start)))
        -:  117:  {
    #####:  118:    return ECMA_VALUE_ERROR;
        -:  119:  }
        -:  120:
    #####:  121:  if (!ecma_is_value_undefined (arg2))
        -:  122:  {
    #####:  123:    if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_array_index_normalize (arg2,
        -:  124:                                                                        len,
        -:  125:                                                                        &end)))
        -:  126:    {
    #####:  127:      return ECMA_VALUE_ERROR;
        -:  128:    }
        -:  129:  }
        -:  130:
    #####:  131:  if (ret_value != ECMA_VALUE_EMPTY)
        -:  132:  {
    #####:  133:    return ret_value;
        -:  134:  }
        -:  135:
    #####:  136:  JERRY_ASSERT (start <= len && end <= len);
    #####:  137:  ecma_length_t new_len = (end >= start) ? (end - start) : 0;
    #####:  138:  ecma_object_t *new_arraybuffer_p = ecma_arraybuffer_new_object (new_len);
    #####:  139:  lit_utf8_byte_t *old_buf = ecma_arraybuffer_get_buffer (object_p);
    #####:  140:  lit_utf8_byte_t *new_buf = ecma_arraybuffer_get_buffer (new_arraybuffer_p);
        -:  141:
    #####:  142:  memcpy (new_buf, old_buf + start, new_len);
        -:  143:
    #####:  144:  return ecma_make_object_value (new_arraybuffer_p);
        -:  145:} /* ecma_builtin_arraybuffer_prototype_object_slice */
        -:  146:
        -:  147:/**
        -:  148: * @}
        -:  149: * @}
        -:  150: * @}
        -:  151: */
        -:  152:
        -:  153:#endif /* ENABLED (JERRY_ES2015_BUILTIN_TYPEDARRAY) */
