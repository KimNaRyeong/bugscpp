        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-string-iterator-prototype.c
        -:    0:Programs:274
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtin-helpers.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-iterator-object.h"
        -:   19:
        -:   20:#if ENABLED (JERRY_ES2015)
        -:   21:
        -:   22:#define ECMA_BUILTINS_INTERNAL
        -:   23:#include "ecma-builtins-internal.h"
        -:   24:
        -:   25:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-string-iterator-prototype.inc.h"
        -:   26:#define BUILTIN_UNDERSCORED_ID string_iterator_prototype
        -:   27:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   28:
        -:   29:/** \addtogroup ecma ECMA
        -:   30: * @{
        -:   31: *
        -:   32: * \addtogroup ecmabuiltins
        -:   33: * @{
        -:   34: *
        -:   35: * \addtogroup %stringiteratorprototype% ECMA %ArrayIteratorPrototype% object built-in
        -:   36: * @{
        -:   37: */
        -:   38:
        -:   39:/**
        -:   40: * The %StringIteratorPrototype% object's 'next' routine
        -:   41: *
        -:   42: * See also:
        -:   43: *          ECMA-262 v6, 22.1.5.2.1
        -:   44: *
        -:   45: * Note:
        -:   46: *     Returned value must be freed with ecma_free_value.
        -:   47: *
        -:   48: * @return iterator result object, if success
        -:   49: *         error - otherwise
        -:   50: */
        -:   51:static ecma_value_t
    #####:   52:ecma_builtin_string_iterator_prototype_object_next (ecma_value_t this_val) /**< this argument */
        -:   53:{
        -:   54:    /* 1 - 2. */
    #####:   55:  if (!ecma_is_value_object (this_val))
        -:   56:  {
    #####:   57:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an object."));
        -:   58:  }
        -:   59:
    #####:   60:  ecma_object_t *obj_p = ecma_get_object_from_value (this_val);
    #####:   61:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;
        -:   62:
        -:   63:  /* 3. */
    #####:   64:  if (ecma_get_object_type (obj_p) != ECMA_OBJECT_TYPE_PSEUDO_ARRAY
    #####:   65:      || ext_obj_p->u.pseudo_array.type != ECMA_PSEUDO_STRING_ITERATOR)
        -:   66:  {
    #####:   67:    return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not an iterator."));
        -:   68:  }
        -:   69:
    #####:   70:  ecma_value_t iterated_value = ext_obj_p->u.pseudo_array.u2.iterated_value;
        -:   71:
        -:   72:  /* 4 - 5 */
    #####:   73:  if (ecma_is_value_empty (iterated_value))
        -:   74:  {
    #####:   75:    return ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
        -:   76:  }
        -:   77:
    #####:   78:  JERRY_ASSERT (ecma_is_value_string (iterated_value));
        -:   79:
    #####:   80:  ecma_string_t *string_p = ecma_get_string_from_value (iterated_value);
        -:   81:
        -:   82:  /* 6. */
    #####:   83:  ecma_length_t position = ext_obj_p->u.pseudo_array.u1.iterator_index;
        -:   84:
    #####:   85:  if (JERRY_UNLIKELY (position == ECMA_ITERATOR_INDEX_LIMIT))
        -:   86:  {
    #####:   87:    return ecma_raise_range_error (ECMA_ERR_MSG ("String iteration cannot be continued."));
        -:   88:  }
        -:   89:
        -:   90:  /* 7. */
    #####:   91:  ecma_length_t len = ecma_string_get_length (string_p);
        -:   92:
        -:   93:  /* 8. */
    #####:   94:  if (position >= len)
        -:   95:  {
    #####:   96:    ecma_deref_ecma_string (string_p);
    #####:   97:    ext_obj_p->u.pseudo_array.u2.iterated_value = ECMA_VALUE_EMPTY;
    #####:   98:    return ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
        -:   99:  }
        -:  100:
        -:  101:  /* 9. */
    #####:  102:  ecma_char_t first = ecma_string_get_char_at_pos (string_p, position);
        -:  103:
        -:  104:  ecma_string_t *result_str_p;
    #####:  105:  ecma_length_t result_size = 1;
        -:  106:
        -:  107:  /* 10. */
    #####:  108:  if (first < LIT_UTF16_HIGH_SURROGATE_MIN || first > LIT_UTF16_HIGH_SURROGATE_MAX || (position + 1 == len))
        -:  109:  {
    #####:  110:    result_str_p = ecma_new_ecma_string_from_code_unit (first);
        -:  111:  }
        -:  112:  /* 11. */
        -:  113:  else
        -:  114:  {
        -:  115:    /* 11.a */
    #####:  116:    ecma_char_t second = ecma_string_get_char_at_pos (string_p, (ecma_length_t) (position + 1));
        -:  117:
        -:  118:    /* 11.b */
    #####:  119:    if (second < LIT_UTF16_LOW_SURROGATE_MIN || second > LIT_UTF16_LOW_SURROGATE_MAX)
        -:  120:    {
    #####:  121:      result_str_p = ecma_new_ecma_string_from_code_unit (first);
        -:  122:    }
        -:  123:    /* 11.c */
        -:  124:    else
        -:  125:    {
    #####:  126:      result_str_p = ecma_new_ecma_string_from_code_units (first, second);
    #####:  127:      result_size = 2;
        -:  128:    }
        -:  129:  }
        -:  130:
        -:  131:  /* 13. */
    #####:  132:  ext_obj_p->u.pseudo_array.u1.iterator_index = (uint16_t) (position + result_size);
        -:  133:
        -:  134:  /* 14. */
    #####:  135:  ecma_value_t result = ecma_create_iter_result_object (ecma_make_string_value (result_str_p), ECMA_VALUE_FALSE);
    #####:  136:  ecma_deref_ecma_string (result_str_p);
        -:  137:
    #####:  138:  return result;
        -:  139:} /* ecma_builtin_string_iterator_prototype_object_next */
        -:  140:
        -:  141:/**
        -:  142: * @}
        -:  143: * @}
        -:  144: * @}
        -:  145: */
        -:  146:
        -:  147:#endif /* ENABLED (JERRY_ES2015) */
