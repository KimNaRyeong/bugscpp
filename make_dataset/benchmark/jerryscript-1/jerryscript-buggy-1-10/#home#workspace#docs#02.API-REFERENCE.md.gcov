        -:    0:Source:/home/workspace/docs/02.API-REFERENCE.md
        -:    0:Programs:274
        -:    1:# JerryScript types
        -:    2:
        -:    3:## jerry_init_flag_t
        -:    4:
        -:    5:Enum that contains the following elements:
        -:    6:
        -:    7: - JERRY_INIT_EMPTY - empty flag set
        -:    8: - JERRY_INIT_SHOW_OPCODES - dump byte-code to log after parse
        -:    9: - JERRY_INIT_SHOW_REGEXP_OPCODES - dump regexp byte-code to log after compilation
        -:   10: - JERRY_INIT_MEM_STATS - dump memory statistics
        -:   11: - JERRY_INIT_MEM_STATS_SEPARATE - **deprecated**, dump memory statistics and reset peak values after parse
        -:   12: - JERRY_INIT_DEBUGGER - **deprecated**, an unused placeholder now
        -:   13:
        -:   14:*Changed in version 2.0*: JERRY_INIT_MEM_STATS_SEPARATE and JERRY_INIT_DEBUGGER are now deprecated and not used internally.
        -:   15:
        -:   16:## jerry_type_t
        -:   17:
        -:   18:Enum that contains JerryScript API value types:
        -:   19:
        -:   20: - JERRY_TYPE_NONE - no type information
        -:   21: - JERRY_TYPE_UNDEFINED - undefined type
        -:   22: - JERRY_TYPE_NULL - null type
        -:   23: - JERRY_TYPE_BOOLEAN - boolean type
        -:   24: - JERRY_TYPE_NUMBER - number type
        -:   25: - JERRY_TYPE_STRING - string type
        -:   26: - JERRY_TYPE_OBJECT - object type
        -:   27: - JERRY_TYPE_FUNCTION - function type
        -:   28: - JERRY_TYPE_ERROR - error/abort type
        -:   29: - JERRY_TYPE_SYMBOL - symbol type
        -:   30:
        -:   31:*New in version 2.0*.
        -:   32:
        -:   33:## jerry_error_t
        -:   34:
        -:   35:Possible types of an error:
        -:   36:
        -:   37: - JERRY_ERROR_COMMON - common error
        -:   38: - JERRY_ERROR_EVAL - eval error
        -:   39: - JERRY_ERROR_RANGE - range error
        -:   40: - JERRY_ERROR_REFERENCE - reference error
        -:   41: - JERRY_ERROR_SYNTAX - syntax error
        -:   42: - JERRY_ERROR_TYPE - type error
        -:   43: - JERRY_ERROR_URI - URI error
        -:   44:
        -:   45:There is also a special value `JERRY_ERROR_NONE` which is not an error type
        -:   46:this value can only be returned by the [jerry_get_error_type](#jerry_get_error_type).
        -:   47:
        -:   48:*Changed in version 2.0*: The `JERRY_ERROR_NONE` was added to be used by the [jerry_get_error_type](#jerry_get_error_type) method.
        -:   49:
        -:   50:## jerry_feature_t
        -:   51:
        -:   52:Possible compile time enabled feature types:
        -:   53:
        -:   54: - JERRY_FEATURE_CPOINTER_32_BIT - 32 bit compressed pointers
        -:   55: - JERRY_FEATURE_ERROR_MESSAGES - error messages
        -:   56: - JERRY_FEATURE_JS_PARSER - js-parser
        -:   57: - JERRY_FEATURE_MEM_STATS - memory statistics
        -:   58: - JERRY_FEATURE_PARSER_DUMP - parser byte-code dumps
        -:   59: - JERRY_FEATURE_REGEXP_DUMP - regexp byte-code dumps
        -:   60: - JERRY_FEATURE_SNAPSHOT_SAVE - saving snapshot files
        -:   61: - JERRY_FEATURE_SNAPSHOT_EXEC - executing snapshot files
        -:   62: - JERRY_FEATURE_DEBUGGER - debugging
        -:   63: - JERRY_FEATURE_VM_EXEC_STOP - stopping ECMAScript execution
        -:   64: - JERRY_FEATURE_JSON - JSON support
        -:   65: - JERRY_FEATURE_PROMISE - promise support
        -:   66: - JERRY_FEATURE_TYPEDARRAY - Typedarray support
        -:   67: - JERRY_FEATURE_DATE - Date support
        -:   68: - JERRY_FEATURE_REGEXP - RegExp support
        -:   69: - JERRY_FEATURE_LINE_INFO - line info available
        -:   70: - JERRY_FEATURE_LOGGING - logging
        -:   71: - JERRY_FEATURE_SYMBOL - symbol support
        -:   72: - JERRY_FEATURE_DATAVIEW - DataView support
        -:   73: - JERRY_FEATURE_PROXY - Proxy support
        -:   74: - JERRY_FEATURE_MAP - Map support
        -:   75: - JERRY_FEATURE_SET - Set support
        -:   76: - JERRY_FEATURE_WEAKMAP - WeakMap support
        -:   77: - JERRY_FEATURE_WEAKSET - WeakSet support
        -:   78:
        -:   79:*New in version 2.0*.
        -:   80:*Changed in version 2.3* : Added `JERRY_FEATURE_WEAKMAP`, `JERRY_FEATURE_WEAKSET` values.
        -:   81:
        -:   82:## jerry_container_type_t
        -:   83:
        -:   84:Container object types:
        -:   85:
        -:   86: - JERRY_CONTAINER_TYPE_INVALID - Invalid container
        -:   87: - JERRY_CONTAINER_TYPE_MAP - Map type
        -:   88: - JERRY_CONTAINER_TYPE_SET - Set type
        -:   89: - JERRY_CONTAINER_TYPE_WEAKMAP - WeakMap type
        -:   90: - JERRY_CONTAINER_TYPE_WEAKSET - WeakSet type
        -:   91:
        -:   92: *New in version 2.3*.
        -:   93:
        -:   94:## jerry_regexp_flags_t
        -:   95:
        -:   96:RegExp object optional flags:
        -:   97:
        -:   98:  - JERRY_REGEXP_FLAG_GLOBAL - global match; find all matches rather than stopping after the first match
        -:   99:  - JERRY_REGEXP_FLAG_IGNORE_CASE - ignore case
        -:  100:  - JERRY_REGEXP_FLAG_MULTILINE - multiline; treat beginning and end characters (^ and $) as working over
        -:  101:  multiple lines (i.e., match the beginning or end of each line (delimited by \n or \r), not only the
        -:  102:  very beginning or end of the whole input string)
        -:  103:
        -:  104:*New in version 2.0*.
        -:  105:
        -:  106:## jerry_parse_opts_t
        -:  107:
        -:  108:Option bits for [jerry_parse](#jerry_parse) and
        -:  109:[jerry_parse_function](#jerry_parse_function) functions:
        -:  110:
        -:  111: - JERRY_PARSE_NO_OPTS - no options passed
        -:  112: - JERRY_PARSE_STRICT_MODE - enable strict mode
        -:  113:
        -:  114:*New in version 2.0*.
        -:  115:
        -:  116:## jerry_gc_mode_t
        -:  117:
        -:  118:Set garbage collection operational mode
        -:  119:
        -:  120: - JERRY_GC_PRESSURE_LOW - free unused objects
        -:  121: - JERRY_GC_PRESSURE_HIGH - free as much memory as possible
        -:  122:
        -:  123:The difference between `JERRY_GC_PRESSURE_LOW` and `JERRY_GC_PRESSURE_HIGH`
        -:  124:is that the former keeps memory allocated for performance improvements such
        -:  125:as property hash tables for large objects. The latter frees all possible
        -:  126:memory blocks but the performance may drop after the garbage collection.
        -:  127:
        -:  128:*New in version 2.0*.
        -:  129:
        -:  130:## jerry_generate_snapshot_opts_t
        -:  131:
        -:  132:Flags for [jerry_generate_snapshot](#jerry_generate_snapshot) and
        -:  133:[jerry_generate_function_snapshot](#jerry_generate_function_snapshot) functions:
        -:  134:
        -:  135: - JERRY_SNAPSHOT_SAVE_STATIC - generate static snapshot (see below)
        -:  136: - JERRY_SNAPSHOT_SAVE_STRICT - strict source code provided
        -:  137:
        -:  138:**Generate static snapshots**
        -:  139:Snapshots contain literal pools, and these literal pools contain references
        -:  140:to constant literals (strings, numbers, etc.). When a snapshot is executed,
        -:  141:these literals are converted to jerry values and the literal pool entries
        -:  142:are changed to their corresponding jerry value. To support this conversion,
        -:  143:the literals and literal pools are copied into RAM even if the
        -:  144:`JERRY_SNAPSHOT_EXEC_COPY_DATA` option is passed to
        -:  145:[jerry_exec_snapshot](#jerry_exec_snapshot). This non-negligible memory
        -:  146:consumption can be avoided by using static snapshots. The literals of
        -:  147:these snapshots are limited to magic strings and 28 bit signed integers,
        -:  148:so their constant pools do not need to be loaded into the memory.
        -:  149:Hence these snapshots can be executed from ROM.
        -:  150:
        -:  151:***Important note:*** The [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  152:function rejects static snaphots unless the `JERRY_SNAPSHOT_EXEC_ALLOW_STATIC`
        -:  153:option bit is set. The caller must also ensure that the same magic
        -:  154:strings are set by [jerry_register_magic_strings](#jerry_register_magic_strings)
        -:  155:when the snapshot is generated and executed. Furthermore the
        -:  156:`JERRY_SNAPSHOT_EXEC_COPY_DATA` option is not allowed.
        -:  157:
        -:  158:*New in version 2.0*.
        -:  159:
        -:  160:## jerry_exec_snapshot_opts_t
        -:  161:
        -:  162:Flags for [jerry_exec_snapshot](#jerry_exec_snapshot) and
        -:  163:[jerry_load_function_snapshot](#jerry_load_function_snapshot) functions:
        -:  164:
        -:  165: - JERRY_SNAPSHOT_EXEC_COPY_DATA - copy snapshot data into memory (see below)
        -:  166: - JERRY_SNAPSHOT_EXEC_ALLOW_STATIC - allow executing static snapshots
        -:  167:
        -:  168:**Copy snapshot data into memory**
        -:  169:
        -:  170:By default the snapshot buffer is expected to be present in memory until
        -:  171:[jerry_cleanup](#jerry_cleanup) is called. For example `static const` buffers
        -:  172:compiled into the application binary satisfy this requirement.
        -:  173:
        -:  174:If the snapshot buffer is freed after [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  175:is called the `JERRY_SNAPSHOT_EXEC_COPY_DATA` must be passed to copy the necessary
        -:  176:parts of the snapshot buffer into memory.
        -:  177:
        -:  178:The `JERRY_SNAPSHOT_EXEC_COPY_DATA` option is not allowed for static snapshots.
        -:  179:
        -:  180:*New in version 2.0*.
        -:  181:
        -:  182:## jerry_char_t
        -:  183:
        -:  184:**Summary**
        -:  185:
        -:  186:Jerry's char value
        -:  187:
        -:  188:**Prototype**
        -:  189:
        -:  190:```c
        -:  191:typedef uint8_t jerry_char_t;
        -:  192:```
        -:  193:
        -:  194:## jerry_size_t
        -:  195:
        -:  196:**Summary**
        -:  197:
        -:  198:Jerry's size
        -:  199:
        -:  200:**Prototype**
        -:  201:
        -:  202:```c
        -:  203:typedef uint32_t jerry_size_t;
        -:  204:```
        -:  205:
        -:  206:## jerry_length_t
        -:  207:
        -:  208:**Summary**
        -:  209:
        -:  210:Jerry's length
        -:  211:
        -:  212:**Prototype**
        -:  213:
        -:  214:```c
        -:  215:typedef uint32_t jerry_length_t;
        -:  216:```
        -:  217:
        -:  218:## jerry_value_t
        -:  219:
        -:  220:**Summary**
        -:  221:
        -:  222:JerryScript value can be a boolean, number, null, object, string or undefined. The value has an error flag,
        -:  223:that indicates whether is an error or not. Every type has an error flag not only objects. The error flag should
        -:  224:be cleared before the value is passed as an argument, otherwise it can lead to a type error. The error objects
        -:  225:created by API functions has the error flag set.
        -:  226:
        -:  227:Returned and created values by the API functions must be freed with
        -:  228:[jerry_release_value](#jerry_release_value) when they are no longer needed.
        -:  229:
        -:  230:**Prototype**
        -:  231:
        -:  232:```c
        -:  233:typedef uint32_t jerry_value_t;
        -:  234:```
        -:  235:
        -:  236:## jerry_context_data_manager_t
        -:  237:
        -:  238:**Summary**
        -:  239:
        -:  240:Structure that defines how a context data item will be initialized and deinitialized. JerryScript zeroes out the memory
        -:  241:for the item by default, and if the `init_cb` field is not NULL, it will be called with the pointer to the memory as
        -:  242:an additional custom initializer. The `deinit_cb` (if non-`NULL`) is called during a call to `jerry_cleanup ()` to run
        -:  243:any custom deinitialization *before* the VM has been fully cleaned up. The `finalize_cb` (if non-`NULL`) is also called
        -:  244:during a call to `jerry_cleanup ()` to run any custom deinitialization *after* the VM has been fully cleaned up.
        -:  245:If bytes_needed field is 0, no buffer is allocated for the manager, callback functions are called with NULL pointer.
        -:  246:
        -:  247:**Prototype**
        -:  248:
        -:  249:```c
        -:  250:typedef struct
        -:  251:{
        -:  252:  /**
        -:  253:   * Callback responsible for initializing a context item, or NULL to zero out the memory. This is called lazily, the
        -:  254:   * first time jerry_get_context_data () is called with this manager.
        -:  255:   *
        -:  256:   * @param [in] data The buffer that JerryScript allocated for the manager. The buffer is zeroed out. The size is
        -:  257:   * determined by the bytes_needed field. The buffer is kept alive until jerry_cleanup () is called.
        -:  258:   */
        -:  259:  void (*init_cb) (void *data);
        -:  260:
        -:  261:  /**
        -:  262:   * Callback responsible for deinitializing a context item, or NULL. This is called as part of jerry_cleanup (),
        -:  263:   * right *before* the VM has been cleaned up. This is a good place to release strong references to jerry_value_t's
        -:  264:   * that the manager may be holding.
        -:  265:   * Note: because the VM has not been fully cleaned up yet, jerry_object_native_info_t free_cb's can still get called
        -:  266:   * *after* all deinit_cb's have been run. See finalize_cb for a callback that is guaranteed to run *after* all
        -:  267:   * free_cb's have been run.
        -:  268:   *
        -:  269:   * @param [in] data The buffer that JerryScript allocated for the manager.
        -:  270:   */
        -:  271:  void (*deinit_cb) (void *data);
        -:  272:
        -:  273:  /**
        -:  274:   * Callback responsible for finalizing a context item, or NULL. This is called as part of jerry_cleanup (),
        -:  275:   * right *after* the VM has been cleaned up and destroyed and jerry_... APIs cannot be called any more. At this point,
        -:  276:   * all values in the VM have been cleaned up. This is a good place to clean up native state that can only be cleaned
        -:  277:   * up at the very end when there are no more VM values around that may need to access that state.
        -:  278:   *
        -:  279:   * @param [in] data The buffer that JerryScript allocated for the manager. After returning from this callback,
        -:  280:   * the data pointer may no longer be used.
        -:  281:   */
        -:  282:  void (*finalize_cb) (void *data);
        -:  283:
        -:  284:  /**
        -:  285:   * Number of bytes to allocate for this manager. This is the size of the buffer that JerryScript will allocate on
        -:  286:   * behalf of the manager. The pointer to this buffer is passed into init_cb, deinit_cb and finalize_cb. It is also
        -:  287:   * returned from the jerry_get_context_data () API.
        -:  288:   */
        -:  289:  size_t bytes_needed;
        -:  290:} jerry_context_data_manager_t;
        -:  291:```
        -:  292:
        -:  293:*New in version 2.0*.
        -:  294:
        -:  295:## jerry_context_alloc_t
        -:  296:
        -:  297:**Summary**
        -:  298:
        -:  299:Function type for allocating buffer for JerryScript context.
        -:  300:
        -:  301:**Prototype**
        -:  302:
        -:  303:```c
        -:  304:typedef void *(*jerry_context_alloc_t) (size_t size, void *cb_data_p);
        -:  305:```
        -:  306:
        -:  307:- `size` - allocation size
        -:  308:- `cb_data_p` - pointer to user data
        -:  309:
        -:  310:*New in version 2.0*.
        -:  311:
        -:  312:## jerry_context_t
        -:  313:
        -:  314:**Summary**
        -:  315:
        -:  316:An opaque declaration of the JerryScript context structure.
        -:  317:
        -:  318:**Prototype**
        -:  319:
        -:  320:```c
        -:  321:typedef struct jerry_context_t jerry_context_t;
        -:  322:```
        -:  323:
        -:  324:*New in version 2.0*.
        -:  325:
        -:  326:
        -:  327:## jerry_binary_operation_t
        -:  328:
        -:  329:Enum that contains the supported binary operation types
        -:  330: - JERRY_BIN_OP_EQUAL - equal comparison (==)
        -:  331: - JERRY_BIN_OP_STRICT_EQUAL - strict equal comparison (===)
        -:  332: - JERRY_BIN_OP_LESS - less relation (<)
        -:  333: - JERRY_BIN_OP_LESS_EQUAL - less or equal relation (<=)
        -:  334: - JERRY_BIN_OP_GREATER - greater relation (>)
        -:  335: - JERRY_BIN_OP_GREATER_EQUAL - greater or equal relation (>=)
        -:  336: - JERRY_BIN_OP_INSTANCEOF - instanceof operation
        -:  337: - JERRY_BIN_OP_ADD - addition operator (+)
        -:  338: - JERRY_BIN_OP_SUB - subtraction operator (-)
        -:  339: - JERRY_BIN_OP_MUL - multiplication operator (*)
        -:  340: - JERRY_BIN_OP_DIV - division operator (/)
        -:  341: - JERRY_BIN_OP_REM - remainder operator (%)
        -:  342:
        -:  343:*New in version 2.0*.
        -:  344:
        -:  345:**See also**
        -:  346:
        -:  347:- [jerry_binary_operation](#jerry_binary_operation)
        -:  348:
        -:  349:## jerry_property_descriptor_t
        -:  350:
        -:  351:**Summary**
        -:  352:
        -:  353:Description of ECMA property descriptor. This struct can be used
        -:  354:for the [jerry_define_own_property](#jerry_define_own_property) method to
        -:  355:configure how the property should be registered.
        -:  356:
        -:  357:The naming scheme is similar to the JavaScript `Object.defineProperty` method.
        -:  358:
        -:  359:Fields should be used in pairs. That is if the `is_value_defined` is set to `true`
        -:  360:the `value` field should contain the value for the property.
        -:  361:
        -:  362:**Prototype**
        -:  363:
        -:  364:```c
        -:  365:typedef struct
        -:  366:{
        -:  367:  /** Is [[Value]] defined? */
        -:  368:  bool is_value_defined;
        -:  369:
        -:  370:  /** Is [[Get]] defined? */
        -:  371:  bool is_get_defined;
        -:  372:
        -:  373:  /** Is [[Set]] defined? */
        -:  374:  bool is_set_defined;
        -:  375:
        -:  376:  /** Is [[Writable]] defined? */
        -:  377:  bool is_writable_defined;
        -:  378:
        -:  379:  /** [[Writable]] */
        -:  380:  bool is_writable;
        -:  381:
        -:  382:  /** Is [[Enumerable]] defined? */
        -:  383:  bool is_enumerable_defined;
        -:  384:
        -:  385:  /** [[Enumerable]] */
        -:  386:  bool is_enumerable;
        -:  387:
        -:  388:  /** Is [[Configurable]] defined? */
        -:  389:  bool is_configurable_defined;
        -:  390:
        -:  391:  /** [[Configurable]] */
        -:  392:  bool is_configurable;
        -:  393:
        -:  394:  /** [[Value]] */
        -:  395:  jerry_value_t value;
        -:  396:
        -:  397:  /** [[Get]] */
        -:  398:  jerry_value_t getter;
        -:  399:
        -:  400:  /** [[Set]] */
        -:  401:  jerry_value_t setter;
        -:  402:} jerry_property_descriptor_t;
        -:  403:```
        -:  404:
        -:  405:**See also**
        -:  406:
        -:  407:- [jerry_define_own_property](#jerry_define_own_property)
        -:  408:
        -:  409:## jerry_heap_stats_t
        -:  410:
        -:  411:**Summary**
        -:  412:
        -:  413:Description of JerryScript heap memory stats.
        -:  414:It is for memory profiling.
        -:  415:
        -:  416:**Prototype**
        -:  417:
        -:  418:```c
        -:  419:typedef struct
        -:  420:{
        -:  421:  size_t version /**< the version of the stats struct */
        -:  422:  size_t size; /**< heap total size */
        -:  423:  size_t allocated_bytes; /**< currently allocated bytes */
        -:  424:  size_t peak_allocated_bytes; /**< peak allocated bytes */
        -:  425:  size_t reserved[4]; /**< padding for future extensions */
        -:  426:} jerry_heap_stats_t;
        -:  427:```
        -:  428:
        -:  429:*New in version 2.0*.
        -:  430:
        -:  431:**See also**
        -:  432:
        -:  433:- [jerry_get_memory_stats](#jerry_get_memory_stats)
        -:  434:
        -:  435:## jerry_external_handler_t
        -:  436:
        -:  437:**Summary**
        -:  438:
        -:  439:Type of an external function handler
        -:  440:
        -:  441:**Prototype**
        -:  442:
        -:  443:```c
        -:  444:typedef jerry_value_t (*jerry_external_handler_t) (const jerry_value_t function_obj,
        -:  445:                                                   const jerry_value_t this_val,
        -:  446:                                                   const jerry_value_t args_p[],
        -:  447:                                                   const jerry_length_t args_count);
        -:  448:```
        -:  449:
        -:  450:- `function_object` - the JavaScript function object which was invoked.
        -:  451:- `this_val` - the `this` value provided for the function call.
        -:  452:- `args_p` - the function arguments, array of JavaScript values.
        -:  453:- `args_count` - the number of arguments.
        -:  454:- return value
        -:  455:  - The function's return value. If there is no return value, use [jerry_create_undefined()](#jerry_create_undefined).
        -:  456:
        -:  457:**See also**
        -:  458:
        -:  459:- [jerry_create_external_function](#jerry_create_external_function)
        -:  460:
        -:  461:## jerry_object_native_free_callback_t
        -:  462:
        -:  463:**Summary**
        -:  464:
        -:  465:Native free callback of an object. It is used in `jerry_object_native_info_t` and for external Array buffers.
        -:  466:
        -:  467:*Note*:
        -:  468: - Referred values by this method must have at least 1 reference. (Correct API usage satisfies this condition)
        -:  469:
        -:  470:**Prototype**
        -:  471:
        -:  472:```c
        -:  473:typedef void (*jerry_object_native_free_callback_t) (void *native_p);
        -:  474:```
        -:  475:
        -:  476:*New in version 2.0*: Renamed from `jerry_object_free_callback_t`.
        -:  477:*Changed in version 2.2*: API calls are once again allowed. (See note)
        -:  478:
        -:  479:**See also**
        -:  480:
        -:  481:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:  482:- [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external)
        -:  483:
        -:  484:## jerry_object_native_info_t
        -:  485:
        -:  486:**Summary**
        -:  487:
        -:  488:The type information of the native pointer.
        -:  489:It includes the free callback that will be called when associated JavaScript object is garbage collected. It can be left NULL in case it is not needed.
        -:  490:
        -:  491:Typically, one would create a `static const jerry_object_native_info_t` for
        -:  492:each distinct C type for which a pointer is used with
        -:  493:`jerry_set_object_native_pointer ()` and `jerry_get_object_native_pointer ()`.
        -:  494:This way, each `const jerry_object_native_info_t *` pointer address value itself
        -:  495:uniquely identifies the C type of the native pointer.
        -:  496:
        -:  497:See [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -:  498:for a best-practice code example.
        -:  499:
        -:  500:**Prototype**
        -:  501:
        -:  502:```c
        -:  503:typedef struct
        -:  504:{
        -:  505:  jerry_object_native_free_callback_t free_cb;
        -:  506:} jerry_object_native_info_t;
        -:  507:```
        -:  508:
        -:  509:*New in version 2.0*.
        -:  510:
        -:  511:**See also**
        -:  512:
        -:  513:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:  514:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -:  515:
        -:  516:## jerry_object_property_foreach_t
        -:  517:
        -:  518:**Summary**
        -:  519:
        -:  520:Function type used as a callback for the [jerry_foreach_object_property](#jerry_foreach_object_property)
        -:  521:method. A function with this type must return "true" to continue the iteration or "false" to finish the
        -:  522:iteration on the object's properties.
        -:  523:
        -:  524:**Prototype**
        -:  525:
        -:  526:```c
        -:  527:typedef bool (*jerry_object_property_foreach_t) (const jerry_value_t property_name,
        -:  528:                                                 const jerry_value_t property_value,
        -:  529:                                                 void *user_data_p);
        -:  530:```
        -:  531:
        -:  532:- `property_name` - a property name, this is not always a string.
        -:  533:- `property_value` - the value for the given property.
        -:  534:- `user_data_p` - optional user data pointer supplied via the (jerry_foreach_object_property)[#jerry_foreach_object_property] method.
        -:  535:- return value
        -:  536:  - true, to continue the iteration
        -:  537:  - false, to stop the iteration
        -:  538:
        -:  539:**See also**
        -:  540:
        -:  541:- [jerry_foreach_object_property](#jerry_foreach_object_property)
        -:  542:
        -:  543:## jerry_objects_foreach_t
        -:  544:
        -:  545:**Summary**
        -:  546:
        -:  547:Function type used as a callback for the (jerry_objects_foreach)[#jerry_objects_foreach] method.
        -:  548:A function with this type must return "true" to continue the iteration or "false" to finish the
        -:  549:iteration on the object's properties.
        -:  550:
        -:  551:**Prototype**
        -:  552:
        -:  553:```c
        -:  554:typedef bool (*jerry_objects_foreach_t) (const jerry_value_t object,
        -:  555:                                         void *user_data_p);
        -:  556:```
        -:  557:
        -:  558:- `object` - the current JavaScript object in the for-each iteration.
        -:  559:- `user_data_p` - optional user data pointer supplied via the (jerry_objects_foreach)[#jerry_objects_foreach] method.
        -:  560:- return value
        -:  561:  - true, to continue the iteration
        -:  562:  - false, to stop the iteration
        -:  563:
        -:  564:*New in version 2.0*.
        -:  565:
        -:  566:**See also**
        -:  567:
        -:  568:- [jerry_objects_foreach](#jerry_objects_foreach)
        -:  569:
        -:  570:## jerry_objects_foreach_by_native_info_t
        -:  571:
        -:  572:**Summary**
        -:  573:
        -:  574:Function type used as a callback for the (jerry_objects_foreach_by_native_info)[#jerry_objects_foreach_by_native_info]
        -:  575:method. A function with this type must return "true" to continue the iteration or "false" to finish the
        -:  576:iteration on the object's properties.
        -:  577:
        -:  578:**Prototype**
        -:  579:
        -:  580:```c
        -:  581:typedef bool (*jerry_objects_foreach_by_native_info_t) (const jerry_value_t object,
        -:  582:                                                        void *object_data_p,
        -:  583:                                                        void *user_data_p);
        -:  584:```
        -:  585:
        -:  586:- `object` - the current JavaScript object in the for-each iteration.
        -:  587:- `object_data_p` - the current object's native data pointer.
        -:  588:- `user_data_p` - optional user data pointer supplied via the (jerry_objects_foreach_by_native_info)[#jerry_objects_foreach_by_native_info] method.
        -:  589:- return value
        -:  590:  - true, to continue the iteration
        -:  591:  - false, to stop the iteration
        -:  592:
        -:  593:*New in version 2.0*.
        -:  594:
        -:  595:**See also**
        -:  596:
        -:  597:- [jerry_objects_foreach_by_native_info](#jerry_objects_foreach_by_native_info)
        -:  598:
        -:  599:## jerry_vm_exec_stop_callback_t
        -:  600:
        -:  601:**Summary**
        -:  602:
        -:  603:Callback which tells whether the ECMAScript execution should be stopped.
        -:  604:If it returns with undefined value the ECMAScript execution continues.
        -:  605:Otherwise the result is thrown by the engine (if the error flag is not
        -:  606:set for the returned value the engine automatically sets it). The
        -:  607:callback function might be called again even if it threw an error.
        -:  608:In this case the function must throw the same error again.
        -:  609:
        -:  610:**Prototype**
        -:  611:
        -:  612:```c
        -:  613:typedef jerry_value_t (*jerry_vm_exec_stop_callback_t) (void *user_p);
        -:  614:```
        -:  615:
        -:  616:*New in version 2.0*.
        -:  617:
        -:  618:**See also**
        -:  619:
        -:  620:- [jerry_set_vm_exec_stop_callback](#jerry_set_vm_exec_stop_callback)
        -:  621:
        -:  622:## jerry_promise_state_t
        -:  623:
        -:  624:Enum which describes the state of a Promise.
        -:  625:
        -:  626:Possible values:
        -:  627:
        -:  628: - JERRY_PROMISE_STATE_NONE - Invalid/Unknown state (possibly called on a non-promise object).
        -:  629: - JERRY_PROMISE_STATE_PENDING - Promise is in "Pending" state.
        -:  630: - JERRY_PROMISE_STATE_FULFILLED - Promise is in "Fulfilled" state.
        -:  631: - JERRY_PROMISE_STATE_REJECTED - Promise is in "Rejected" state.
        -:  632:
        -:  633:*New in version 2.2*.
        -:  634:
        -:  635:**See also**
        -:  636:
        -:  637:- [jerry_get_promise_result](#jerry_get_promise_result)
        -:  638:
        -:  639:## jerry_typedarray_type_t
        -:  640:
        -:  641:Enum which describes the TypedArray types.
        -:  642:Possible values:
        -:  643:
        -:  644: - JERRY_TYPEDARRAY_UINT8 - represents the Uint8Array TypedArray
        -:  645: - JERRY_TYPEDARRAY_UINT8CLAMPED - represents the Uint8ClampedArray TypedArray
        -:  646: - JERRY_TYPEDARRAY_INT8 - represents the Int8Array TypedArray
        -:  647: - JERRY_TYPEDARRAY_UINT16 - represents the Uint16Array TypedArray
        -:  648: - JERRY_TYPEDARRAY_INT16 - represents the Int16Array TypedArray
        -:  649: - JERRY_TYPEDARRAY_UINT32 - represents the Uint32Array TypedArray
        -:  650: - JERRY_TYPEDARRAY_INT32 - represents the Int32Array TypedArray
        -:  651: - JERRY_TYPEDARRAY_FLOAT32 - represents the Float32Array TypedArray
        -:  652: - JERRY_TYPEDARRAY_FLOAT64 - represents the Float64Array TypedArray
        -:  653: - JERRY_TYPEDARRAY_INVALID - represents an invalid TypedArray
        -:  654:
        -:  655:API functions can return the `JERRY_TYPEDARRAY_INVALID` value if the
        -:  656:TypedArray support is not in the engine.
        -:  657:
        -:  658:*New in version 2.0*.
        -:  659:
        -:  660:**See also**
        -:  661:
        -:  662:- [jerry_get_typedarray_type](#jerry_get_typedarray_type)
        -:  663:
        -:  664:
        -:  665:# General engine functions
        -:  666:
        -:  667:## jerry_init
        -:  668:
        -:  669:**Summary**
        -:  670:
        -:  671:Initializes the JerryScript engine, making it possible to run JavaScript code and perform operations
        -:  672:on JavaScript values. This is required for almost all API functions.
        -:  673:
        -:  674:**Prototype**
        -:  675:
        -:  676:```c
        -:  677:void
        -:  678:jerry_init (jerry_init_flag_t flags)
        -:  679:```
        -:  680:
        -:  681:`flags` - combination of various engine configuration flags [jerry_init_flag_t](#jerry_init_flag_t).
        -:  682:
        -:  683:**Example**
        -:  684:
        -:  685:[doctest]: # ()
        -:  686:
        -:  687:```c
        -:  688:#include "jerryscript.h"
        -:  689:
        -:  690:int
    #####:  691:main (void)
        -:  692:{
    #####:  693:  jerry_init (JERRY_INIT_SHOW_OPCODES | JERRY_INIT_SHOW_REGEXP_OPCODES);
        -:  694:
        -:  695:  // ...
        -:  696:
    #####:  697:  jerry_cleanup ();
    #####:  698:  return 0;
        -:  699:}
        -:  700:```
        -:  701:
        -:  702:**See also**
        -:  703:
        -:  704:- [jerry_init_flag_t](#jerry_init_flag_t)
        -:  705:- [jerry_cleanup](#jerry_cleanup)
        -:  706:
        -:  707:
        -:  708:## jerry_cleanup
        -:  709:
        -:  710:**Summary**
        -:  711:
        -:  712:Finish JavaScript engine execution, freeing memory and JavaScript values.
        -:  713:
        -:  714:*Note*: JavaScript values, received from engine, will be inaccessible after the cleanup.
        -:  715:
        -:  716:**Prototype**
        -:  717:
        -:  718:```c
        -:  719:void
        -:  720:jerry_cleanup (void);
        -:  721:```
        -:  722:
        -:  723:**See also**
        -:  724:
        -:  725:- [jerry_init](#jerry_init)
        -:  726:
        -:  727:
        -:  728:## jerry_get_context_data
        -:  729:
        -:  730:**Summary**
        -:  731:
        -:  732:Retrieve a pointer to the item stored within the current context by the given manager.
        -:  733:
        -:  734:*Note*: Since internally the pointer to a manager's context data item is linked to the next such pointer in a linked
        -:  735:        list, it is inadvisable to invoke too many different managers, because doing so will increase the time it takes
        -:  736:        to retrieve a manager's context data item, degrading performance. For example, try to keep the number of
        -:  737:        managers below five.
        -:  738:
        -:  739:**Prototype**
        -:  740:
        -:  741:```c
        -:  742:void *
        -:  743:jerry_get_context_data (const jerry_context_data_manager *manager_p);
        -:  744:```
        -:  745:
        -:  746:- `manager_p`: the manager of this context data item.
        -:  747:- return value: the item created by `manager_p` when `jerry_get_context_data ()` was first called, or a new item created
        -:  748:  by `manager_p`, which will be stored for future identical calls to `jerry_get_context_data ()`, and which will be
        -:  749:  deinitialized using the `deinit_cb` callback provided by `manager_p` when the context will be destroyed.
        -:  750:
        -:  751:*New in version 2.0*.
        -:  752:
        -:  753:**Example**
        -:  754:
        -:  755:[doctest]: # (test="compile")
        -:  756:
        -:  757:```c
        -:  758:#include "jerryscript.h"
        -:  759:
        -:  760:typedef struct
        -:  761:{
        -:  762:  int my_data1;
        -:  763:  double my_data2;
        -:  764:  char *my_data3;
        -:  765:} my_context_data_t;
        -:  766:
        -:  767:/* Define how context items will be initialized. */
        -:  768:static void
    #####:  769:my_context_data_new (void *user_data_p)
        -:  770:{
    #####:  771:  my_context_data_t *my_data_p = (my_context_data_t *) user_data_p;
        -:  772:
        -:  773:  /*
        -:  774:   * Initialize my_data_p. JerryScript will store it on the current context and return it whenever
        -:  775:   * jerry_get_context_data () is called with a pointer to my_manager as defined below.
        -:  776:   */
    #####:  777:}
        -:  778:
        -:  779:/* Define how context items will be deinitialized */
        -:  780:static void
    #####:  781:my_context_data_free (void *user_data_p)
        -:  782:{
    #####:  783:  my_context_data_t *my_data_p = ((my_context_data_t *) user_data_p);
        -:  784:
        -:  785:  /* Perform any necessary cleanup on my_data. JerryScript will free the pointer after this function completes. */
    #####:  786:}
        -:  787:
        -:  788:/* Wrap the creation and destruction functions into a manager */
        -:  789:static const jerry_context_data_manager_t my_manager =
        -:  790:{
        -:  791:  .init_cb = my_context_data_new,
        -:  792:  .deinit_cb = my_context_data_free,
        -:  793:  .bytes_needed = sizeof (my_context_data_t)
        -:  794:};
        -:  795:
        -:  796:/*
        -:  797: * Then, in some function in your code, you can retrieve an item of type my_context_data_t from the currently active
        -:  798: * context such that JerryScript will create and store such an item if one was not previously created
        -:  799: */
        -:  800:static void
    #####:  801:someplace_in_the_code (void)
        -:  802:{
    #####:  803:  my_context_data_t *my_data = (my_context_data_t *) jerry_get_context_data (&my_manager);
        -:  804:  /* Perform useful things using the data found in my_data */
    #####:  805:}
        -:  806:```
        -:  807:
        -:  808:
        -:  809:## jerry_register_magic_strings
        -:  810:
        -:  811:**Summary**
        -:  812:
        -:  813:Registers an external magic string array.
        -:  814:
        -:  815:*Notes*:
        -:  816:  - The strings in the array must be sorted by size at first, then lexicographically.
        -:  817:  - The maximum number of external magic strings is limited to 2147483648 (UINT32_MAX / 2).
        -:  818:    If there are more than 2147483648 external magic strings the extra is cropped.
        -:  819:
        -:  820:**Prototype**
        -:  821:
        -:  822:```c
        -:  823:void
        -:  824:jerry_register_magic_strings  (const jerry_char_t * const *ex_str_items_p,
        -:  825:                               uint32_t count,
        -:  826:                               const jerry_length_t *str_lengths_p);
        -:  827:```
        -:  828:
        -:  829:- `ex_str_items_p` - character arrays, representing external magic strings' contents
        -:  830:- `count` - number of elements in `ext_str_items_p` array
        -:  831:- `str_lengths_p` - array of lengths for each magic string
        -:  832:
        -:  833:*Changed in version 2.0*: The first function argument type was changed.
        -:  834:
        -:  835:**Example**
        -:  836:
        -:  837:[doctest]: # ()
        -:  838:
        -:  839:```c
        -:  840:#include "jerryscript.h"
        -:  841:
        -:  842:int
    #####:  843:main (void)
        -:  844:{
    #####:  845:  jerry_init (JERRY_INIT_EMPTY);
        -:  846:
        -:  847:  // must be static, because 'jerry_register_magic_strings' does not copy
        -:  848:  // the items must be sorted by size at first, then lexicographically
        -:  849:  static const jerry_char_t * const magic_string_items[] = {
        -:  850:                                                             (const jerry_char_t *) "magicstring1",
        -:  851:                                                             (const jerry_char_t *) "magicstring2",
        -:  852:                                                             (const jerry_char_t *) "magicstring3"
        -:  853:                                                           };
    #####:  854:  uint32_t num_magic_string_items = (uint32_t) (sizeof (magic_string_items) / sizeof (jerry_char_t *));
        -:  855:
        -:  856:  // must be static, because 'jerry_register_magic_strings' does not copy
        -:  857:  static const jerry_length_t magic_string_lengths[] = {
        -:  858:                                                         12,
        -:  859:                                                         12,
        -:  860:                                                         12
        -:  861:                                                       };
    #####:  862:  jerry_register_magic_strings (magic_string_items, num_magic_string_items, magic_string_lengths);
        -:  863:}
        -:  864:```
        -:  865:
        -:  866:**See also**
        -:  867:
        -:  868:- [jerry_init](#jerry_init)
        -:  869:- [jerry_cleanup](#jerry_cleanup)
        -:  870:- [jerry_get_literals_from_snapshot](#jerry_get_literals_from_snapshot)
        -:  871:
        -:  872:
        -:  873:## jerry_get_memory_stats
        -:  874:
        -:  875:**Summary**
        -:  876:
        -:  877:Get heap memory stats.
        -:  878:
        -:  879:**Notes**:
        -:  880:- The engine must be initialized with the `JERRY_INIT_MEM_STATS` option to allow
        -:  881:  heap statistic collections. See [jerry_init](#jerry_init)
        -:  882:- This API depends on a build option (`JERRY_MEM_STATS`) and can be checked
        -:  883:  in runtime with the `JERRY_FEATURE_MEM_STATS` feature enum value,
        -:  884:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:  885:
        -:  886:
        -:  887:**Prototype**
        -:  888:
        -:  889:```c
        -:  890:bool
        -:  891:jerry_get_memory_stats (jerry_heap_stats_t *out_stats_p);
        -:  892:```
        -:  893:
        -:  894:- `out_stats_p` - out parameter, that provides the heap statistics.
        -:  895:- return value
        -:  896:  - true, if stats were written into the `out_stats_p` pointer.
        -:  897:  - false, otherwise. Usually it is because the `JERRY_FEATURE_MEM_STATS` feature is not enabled.
        -:  898:
        -:  899:*New in version 2.0*.
        -:  900:
        -:  901:**Example**
        -:  902:
        -:  903:```c
        -:  904:jerry_init (JERRY_INIT_MEM_STATS);
        -:  905:// ...
        -:  906:
        -:  907:jerry_heap_stats_t stats = {0};
        -:  908:bool get_stats_ret = jerry_get_memory_stats (&stats);
        -:  909:```
        -:  910:
        -:  911:**See also**
        -:  912:
        -:  913:- [jerry_init](#jerry_init)
        -:  914:
        -:  915:
        -:  916:## jerry_gc
        -:  917:
        -:  918:**Summary**
        -:  919:
        -:  920:Performs garbage collection.
        -:  921:
        -:  922:**Prototype**
        -:  923:
        -:  924:```c
        -:  925:void
        -:  926:jerry_gc (jerry_gc_mode_t mode);
        -:  927:```
        -:  928:
        -:  929:- `mode` - operational mode, see [jerry_gc_mode_t](#jerry_gc_mode_t)
        -:  930:
        -:  931:*Changed in version 2.0*: Added `mode` argument.
        -:  932:
        -:  933:**Example**
        -:  934:
        -:  935:[doctest]: # ()
        -:  936:
        -:  937:```c
        -:  938:#include "jerryscript.h"
        -:  939:
        -:  940:int
    #####:  941:main (void)
        -:  942:{
    #####:  943:  jerry_init (JERRY_INIT_EMPTY);
        -:  944:
    #####:  945:  jerry_value_t object_value = jerry_create_object ();
    #####:  946:  jerry_release_value (object_value);
        -:  947:
    #####:  948:  jerry_gc (JERRY_GC_PRESSURE_LOW);
        -:  949:
    #####:  950:  jerry_cleanup ();
        -:  951:}
        -:  952:```
        -:  953:
        -:  954:**See also**
        -:  955:
        -:  956:- [jerry_gc_mode_t](#jerry_gc_mode_t)
        -:  957:- [jerry_init](#jerry_init)
        -:  958:- [jerry_cleanup](#jerry_cleanup)
        -:  959:
        -:  960:# Parser and executor functions
        -:  961:
        -:  962:Functions to parse and run JavaScript source code.
        -:  963:
        -:  964:## jerry_run_simple
        -:  965:
        -:  966:**Summary**
        -:  967:
        -:  968:The simplest way to run JavaScript.
        -:  969:
        -:  970:**Prototype**
        -:  971:
        -:  972:```c
        -:  973:bool
        -:  974:jerry_run_simple (const jerry_char_t *script_source_p,
        -:  975:                  size_t script_source_size,
        -:  976:                  jerry_init_flag_t flags);
        -:  977:```
        -:  978:
        -:  979:- `script_source_p` - source code, it must be a valid utf8 string.
        -:  980:- `script_source_size` - size of source code buffer, in bytes.
        -:  981:- `jerry_init_flag_t` - combination of various engine configuration flags
        -:  982:- return value
        -:  983:  - true, if run was successful
        -:  984:  - false, otherwise
        -:  985:
        -:  986:**Example**
        -:  987:
        -:  988:[doctest]: # ()
        -:  989:
        -:  990:```c
        -:  991:#include "jerryscript.h"
        -:  992:
        -:  993:int
    #####:  994:main (void)
        -:  995:{
    #####:  996:  const jerry_char_t script[] = "print ('Hello, World!');";
        -:  997:
    #####:  998:  jerry_run_simple (script, sizeof (script) - 1, JERRY_INIT_EMPTY);
    #####:  999:  return 0;
        -: 1000:}
        -: 1001:```
        -: 1002:
        -: 1003:**See also**
        -: 1004:
        -: 1005:- [jerry_init](#jerry_init)
        -: 1006:- [jerry_cleanup](#jerry_cleanup)
        -: 1007:- [jerry_parse](#jerry_parse)
        -: 1008:- [jerry_run](#jerry_run)
        -: 1009:
        -: 1010:
        -: 1011:## jerry_parse
        -: 1012:
        -: 1013:**Summary**
        -: 1014:
        -: 1015:Parse script and construct an EcmaScript function. The lexical environment is
        -: 1016:set to the global lexical environment. The resource name can be used by
        -: 1017:debugging systems to provide line / backtrace info.
        -: 1018:
        -: 1019:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 1020:is no longer needed.
        -: 1021:
        -: 1022:**Prototype**
        -: 1023:
        -: 1024:```c
        -: 1025:jerry_value_t
        -: 1026:jerry_parse (const jerry_char_t *resource_name_p, /**< resource name (usually a file name) */
        -: 1027:             size_t resource_name_length, /**< length of resource name */
        -: 1028:             const jerry_char_t *source_p,
        -: 1029:             size_t source_size,
        -: 1030:             uint32_t parse_opts);
        -: 1031:```
        -: 1032:
        -: 1033:- `resource_name_p` - resource name, usually a file name (must be a valid UTF8 string).
        -: 1034:- `resource_name_length` - size of the resource name, in bytes.
        -: 1035:- `source_p` - string, containing source code to parse (must be a valid UTF8 string).
        -: 1036:- `source_size` - size of the string, in bytes.
        -: 1037:- `parse_opts` - any combination of [jerry_parse_opts_t](#jerry_parse_opts_t) flags.
        -: 1038:- return value
        -: 1039:  - function object value, if script was parsed successfully,
        -: 1040:  - thrown error, otherwise
        -: 1041:
        -: 1042:*Changed in version 2.0*: Added `resource_name_p`, and `resource_name_length` arguments.
        -: 1043:
        -: 1044:**Example**
        -: 1045:
        -: 1046:[doctest]: # ()
        -: 1047:
        -: 1048:```c
        -: 1049:#include "jerryscript.h"
        -: 1050:
        -: 1051:int
    #####: 1052:main (void)
        -: 1053:{
    #####: 1054:  jerry_init (JERRY_INIT_EMPTY);
        -: 1055:
    #####: 1056:  const jerry_char_t script[] = "print ('Hello, World!');";
        -: 1057:
    #####: 1058:  jerry_value_t parsed_code = jerry_parse (NULL, 0, script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
    #####: 1059:  jerry_release_value (parsed_code);
        -: 1060:
    #####: 1061:  jerry_cleanup ();
    #####: 1062:  return 0;
        -: 1063:}
        -: 1064:```
        -: 1065:
        -: 1066:**See also**
        -: 1067:
        -: 1068:- [jerry_run](#jerry_run)
        -: 1069:- [jerry_parse_function](#jerry_parse_function)
        -: 1070:
        -: 1071:## jerry_parse_function
        -: 1072:
        -: 1073:**Summary**
        -: 1074:
        -: 1075:Parse function source code and construct an ECMAScript
        -: 1076:function. The function arguments and function body are
        -: 1077:passed as separated arguments. The lexical environment
        -: 1078:is set to the global lexical environment. The resource
        -: 1079:name (usually a file name) is also passed to this function
        -: 1080:which is used by the debugger to find the source code.
        -: 1081:
        -: 1082:*Note*: The returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 1083:is no longer needed.
        -: 1084:
        -: 1085:**Prototype**
        -: 1086:
        -: 1087:```c
        -: 1088:jerry_value_t
        -: 1089:jerry_parse_function (const jerry_char_t *resource_name_p, /**< resource name (usually a file name) */
        -: 1090:                      size_t resource_name_length, /**< length of resource name */
        -: 1091:                      const jerry_char_t *arg_list_p, /**< script source */
        -: 1092:                      size_t arg_list_size, /**< script source size */
        -: 1093:                      const jerry_char_t *source_p, /**< script source */
        -: 1094:                      size_t source_size, /**< script source size */
        -: 1095:                      uint32_t parse_opts) /**< strict mode */
        -: 1096:```
        -: 1097:
        -: 1098:- `resource_name_p` - resource name, usually a file name (must be a valid UTF8 string).
        -: 1099:- `resource_name_length` - size of the resource name, in bytes.
        -: 1100:- `arg_list_p` - argument list of the function (must be a valid UTF8 string).
        -: 1101:- `arg_list_size` - size of the argument list, in bytes.
        -: 1102:- `source_p` - string, containing source code to parse (must be a valid UTF8 string).
        -: 1103:- `source_size` - size of the string, in bytes.
        -: 1104:- `parse_opts` - any combination of [jerry_parse_opts_t](#jerry_parse_opts_t) flags.
        -: 1105:- return value
        -: 1106:  - function object value, if script was parsed successfully,
        -: 1107:  - thrown error, otherwise
        -: 1108:
        -: 1109:*New in version 2.0*.
        -: 1110:
        -: 1111:**Example**
        -: 1112:
        -: 1113:[doctest]: # (name="02.API-REFERENCE-parse-func.c")
        -: 1114:
        -: 1115:```c
        -: 1116:#include <stdio.h>
        -: 1117:#include <string.h>
        -: 1118:#include "jerryscript.h"
        -: 1119:
        -: 1120:int
    #####: 1121:main (void)
        -: 1122:{
    #####: 1123:  int return_value = 1;
        -: 1124:
        -: 1125:  /* Initialize engine */
    #####: 1126:  jerry_init (JERRY_INIT_EMPTY);
        -: 1127:
        -: 1128:  /* Parse the 'function (a,b) { return a + b; }' function */
    #####: 1129:  const char function_args[] = "a, b";
    #####: 1130:  const char function_source[] = "return a + b";
        -: 1131:
    #####: 1132:  jerry_value_t parsed_function = jerry_parse_function (NULL,
        -: 1133:                                                        0,
        -: 1134:                                                        (const jerry_char_t *) function_args,
        -: 1135:                                                        strlen (function_args),
        -: 1136:                                                        (const jerry_char_t *) function_source,
        -: 1137:                                                        strlen (function_source),
        -: 1138:                                                        JERRY_PARSE_NO_OPTS);
        -: 1139:
    #####: 1140:  if (!jerry_value_is_error (parsed_function))
        -: 1141:  {
        -: 1142:    /* Run the parsed function */
    #####: 1143:    jerry_value_t args[] = {
    #####: 1144:        jerry_create_number (3),
    #####: 1145:        jerry_create_number (55),
        -: 1146:    };
    #####: 1147:    jerry_size_t argc = sizeof (args) / sizeof (args[0]);
    #####: 1148:    jerry_value_t ret_value = jerry_call_function (parsed_function,
        -: 1149:                                                   jerry_create_undefined(),
        -: 1150:                                                   args,
        -: 1151:                                                   argc);
        -: 1152:
        -: 1153:    /* Process result value */
    #####: 1154:    if (jerry_value_is_number (ret_value)) {
    #####: 1155:        double value = jerry_get_number_value (ret_value);
    #####: 1156:        printf ("Function result: %lf\n", value);
        -: 1157:
    #####: 1158:        return_value = !(value == (3 + 55));
        -: 1159:    }
        -: 1160:
        -: 1161:    /* Release the function arguments */
    #####: 1162:    for (jerry_size_t idx = 0; idx < argc; idx++) {
    #####: 1163:        jerry_release_value (args[idx]);
        -: 1164:    }
        -: 1165:
        -: 1166:    /* Returned value must be freed */
    #####: 1167:    jerry_release_value (ret_value);
        -: 1168:  }
        -: 1169:
        -: 1170:  /* Parsed function must be freed */
    #####: 1171:  jerry_release_value (parsed_function);
        -: 1172:
        -: 1173:  /* Cleanup engine */
    #####: 1174:  jerry_cleanup ();
        -: 1175:
    #####: 1176:  return return_value;
        -: 1177:}
        -: 1178:```
        -: 1179:
        -: 1180:**See also**
        -: 1181:
        -: 1182:- [jerry_call_function](#jerry_call_function)
        -: 1183:
        -: 1184:
        -: 1185:## jerry_run
        -: 1186:
        -: 1187:**Summary**
        -: 1188:
        -: 1189:Run an EcmaScript function created by `jerry_parse`.
        -: 1190:
        -: 1191:*Notes*:
        -: 1192:  - The code should be previously parsed with `jerry_parse`.
        -: 1193:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 1194:    when it is no longer needed.
        -: 1195:
        -: 1196:**Prototype**
        -: 1197:
        -: 1198:```c
        -: 1199:jerry_value_t
        -: 1200:jerry_run (const jerry_value_t func_val);
        -: 1201:```
        -: 1202:
        -: 1203:- `func_val` - function to run
        -: 1204:- return value
        -: 1205:  - result of bytecode, if run was successful
        -: 1206:  - thrown error, otherwise
        -: 1207:
        -: 1208:**Example**
        -: 1209:
        -: 1210:[doctest]: # ()
        -: 1211:
        -: 1212:```c
        -: 1213:#include "jerryscript.h"
        -: 1214:
        -: 1215:int
    #####: 1216:main (void)
        -: 1217:{
    #####: 1218:  const jerry_char_t script[] = "print ('Hello, World!');";
        -: 1219:
        -: 1220:  /* Initialize engine */
    #####: 1221:  jerry_init (JERRY_INIT_EMPTY);
        -: 1222:
        -: 1223:  /* Setup Global scope code */
    #####: 1224:  jerry_value_t parsed_code = jerry_parse (NULL, 0, script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
        -: 1225:
    #####: 1226:  if (!jerry_value_is_error (parsed_code))
        -: 1227:  {
        -: 1228:    /* Execute the parsed source code in the Global scope */
    #####: 1229:    jerry_value_t ret_value = jerry_run (parsed_code);
        -: 1230:
        -: 1231:    /* Returned value must be freed */
    #####: 1232:    jerry_release_value (ret_value);
        -: 1233:  }
        -: 1234:
        -: 1235:  /* Parsed source code must be freed */
    #####: 1236:  jerry_release_value (parsed_code);
        -: 1237:
        -: 1238:  /* Cleanup engine */
    #####: 1239:  jerry_cleanup ();
        -: 1240:}
        -: 1241:```
        -: 1242:
        -: 1243:**See also**
        -: 1244:
        -: 1245:- [jerry_parse](#jerry_parse)
        -: 1246:
        -: 1247:
        -: 1248:## jerry_eval
        -: 1249:
        -: 1250:**Summary**
        -: 1251:
        -: 1252:Perform JavaScript `eval` function call (ECMA-262 v5.1 sec-15.1.2.1).
        -: 1253:
        -: 1254:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 1255:is no longer needed.
        -: 1256:
        -: 1257:**Prototype**
        -: 1258:
        -: 1259:```c
        -: 1260:jerry_value_t
        -: 1261:jerry_eval (const jerry_char_t *source_p,
        -: 1262:            size_t source_size,
        -: 1263:            uint32_t parse_opts);
        -: 1264:```
        -: 1265:
        -: 1266:- `source_p` - source code to evaluate, it must be a valid utf8 string.
        -: 1267:- `source_size` - length of the source code
        -: 1268:- `parse_opts` - any combination of [jerry_parse_opts_t](#jerry_parse_opts_t) flags.
        -: 1269:- return value - result of eval, may be an error value.
        -: 1270:
        -: 1271:**Example**
        -: 1272:
        -: 1273:```c
        -: 1274:{
        -: 1275:  jerry_value_t ret_val = jerry_eval (str_to_eval,
        -: 1276:                                      strlen (str_to_eval),
        -: 1277:                                      JERRY_PARSE_NO_OPTS);
        -: 1278:}
        -: 1279:```
        -: 1280:
        -: 1281:**See also**
        -: 1282:
        -: 1283:- [jerry_create_external_function](#jerry_create_external_function)
        -: 1284:- [jerry_external_handler_t](#jerry_external_handler_t)
        -: 1285:
        -: 1286:## jerry_run_all_enqueued_jobs
        -: 1287:
        -: 1288:**Summary**
        -: 1289:
        -: 1290:Run enqueued Promise jobs until the first thrown error or until all get executed.
        -: 1291:
        -: 1292:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 1293:is no longer needed.
        -: 1294:
        -: 1295:**Prototype**
        -: 1296:
        -: 1297:```c
        -: 1298:jerry_value_t
        -: 1299:jerry_run_all_enqueued_jobs (void)
        -: 1300:```
        -: 1301:
        -: 1302:- return value - result of last executed job, may be error value.
        -: 1303:
        -: 1304:*New in version 2.0*.
        -: 1305:
        -: 1306:**Example**
        -: 1307:
        -: 1308:[doctest]: # ()
        -: 1309:
        -: 1310:```c
        -: 1311:#include "jerryscript.h"
        -: 1312:
        -: 1313:int
    #####: 1314:main (void)
        -: 1315:{
    #####: 1316:  jerry_init (JERRY_INIT_EMPTY);
        -: 1317:
    #####: 1318:  const jerry_char_t script[] = "new Promise(function(f,r) { f('Hello, World!'); }).then(function(x) { print(x); });";
        -: 1319:
    #####: 1320:  jerry_value_t parsed_code = jerry_parse (NULL, 0, script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
    #####: 1321:  jerry_value_t script_value = jerry_run (parsed_code);
    #####: 1322:  jerry_value_t job_value = jerry_run_all_enqueued_jobs ();
        -: 1323:
    #####: 1324:  jerry_release_value (job_value);
    #####: 1325:  jerry_release_value (script_value);
    #####: 1326:  jerry_release_value (parsed_code);
        -: 1327:
    #####: 1328:  jerry_cleanup ();
    #####: 1329:  return 0;
        -: 1330:}
        -: 1331:```
        -: 1332:
        -: 1333:
        -: 1334:# Get the global context
        -: 1335:
        -: 1336:## jerry_get_global_object
        -: 1337:
        -: 1338:**Summary**
        -: 1339:
        -: 1340:Get the Global object.
        -: 1341:
        -: 1342:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 1343:is no longer needed.
        -: 1344:
        -: 1345:**Prototype**
        -: 1346:
        -: 1347:```c
        -: 1348:jerry_value_t
        -: 1349:jerry_get_global_object (void);
        -: 1350:```
        -: 1351:
        -: 1352:- return value - api value of global object
        -: 1353:
        -: 1354:**Example**
        -: 1355:
        -: 1356:```c
        -: 1357:{
        -: 1358:  jerry_value_t glob_obj_val = jerry_get_global_object ();
        -: 1359:
        -: 1360:  ... // Do something with global object, ex: add properties
        -: 1361:
        -: 1362:  jerry_release_value (glob_obj_val);
        -: 1363:}
        -: 1364:```
        -: 1365:
        -: 1366:**See also**
        -: 1367:
        -: 1368:- [jerry_release_value](#jerry_release_value)
        -: 1369:- [jerry_define_own_property](#jerry_define_own_property)
        -: 1370:
        -: 1371:
        -: 1372:# Checker functions
        -: 1373:
        -: 1374:Functions to check the type of an API value ([jerry_value_t](#jerry_value_t)).
        -: 1375:
        -: 1376:## jerry_value_is_abort
        -: 1377:
        -: 1378:**Summary**
        -: 1379:
        -: 1380:Returns whether the given `jerry_value_t` has the error and abort value set.
        -: 1381:
        -: 1382:**Prototype**
        -: 1383:
        -: 1384:```c
        -: 1385:bool
        -: 1386:jerry_value_is_abort (const jerry_value_t value);
        -: 1387:```
        -: 1388:
        -: 1389:- `value` - api value
        -: 1390:- return value
        -: 1391:  - true, if the given `jerry_value_t` has the error and abort value set
        -: 1392:  - false, otherwise
        -: 1393:
        -: 1394:*New in version 2.0*.
        -: 1395:
        -: 1396:**Example**
        -: 1397:
        -: 1398:```c
        -: 1399:{
        -: 1400:  jerry_value_t value;
        -: 1401:  ... // create or acquire value
        -: 1402:
        -: 1403:  if (jerry_value_is_abort (value))
        -: 1404:  {
        -: 1405:    ...
        -: 1406:  }
        -: 1407:
        -: 1408:  jerry_release_value (value);
        -: 1409:}
        -: 1410:```
        -: 1411:
        -: 1412:**See also**
        -: 1413:
        -: 1414:- [jerry_value_t](#jerry_value_t)
        -: 1415:- [jerry_value_is_error](#jerry_value_is_error)
        -: 1416:
        -: 1417:## jerry_value_is_array
        -: 1418:
        -: 1419:**Summary**
        -: 1420:
        -: 1421:Returns whether the given `jerry_value_t` is an array.
        -: 1422:
        -: 1423:**Prototype**
        -: 1424:
        -: 1425:```c
        -: 1426:bool
        -: 1427:jerry_value_is_array (const jerry_value_t value)
        -: 1428:```
        -: 1429:
        -: 1430:- `value` - api value
        -: 1431:- return value
        -: 1432:  - true, if the given `jerry_value_t` is an array
        -: 1433:  - false, otherwise
        -: 1434:
        -: 1435:**Example**
        -: 1436:
        -: 1437:```c
        -: 1438:{
        -: 1439:  jerry_value_t value;
        -: 1440:  ... // create or acquire value
        -: 1441:
        -: 1442:  if (jerry_value_is_array (value))
        -: 1443:  {
        -: 1444:    ...
        -: 1445:  }
        -: 1446:
        -: 1447:  jerry_release_value (value);
        -: 1448:}
        -: 1449:```
        -: 1450:
        -: 1451:**See also**
        -: 1452:
        -: 1453:- [jerry_release_value](#jerry_release_value)
        -: 1454:
        -: 1455:## jerry_value_is_arraybuffer
        -: 1456:
        -: 1457:**Summary**
        -: 1458:
        -: 1459:Returns whether the given `jerry_value_t` is an ArrayBuffer object.
        -: 1460:
        -: 1461:*Notes*:
        -: 1462:- This API depends on a build option (`JERRY_ES2015_BUILTIN_TYPEDARRAY`) and can be checked
        -: 1463:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 1464:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 1465:- The ES2015-subset profile enables this by default.
        -: 1466:
        -: 1467:**Prototype**
        -: 1468:
        -: 1469:```c
        -: 1470:bool
        -: 1471:jerry_value_is_arraybuffer (const jerry_value_t value)
        -: 1472:```
        -: 1473:
        -: 1474:- `value` - api value to check.
        -: 1475:- return value
        -: 1476:  - true, if the given `jerry_value_t` is an ArrayBuffer object.
        -: 1477:  - false, otherwise
        -: 1478:
        -: 1479:*New in version 2.0*.
        -: 1480:
        -: 1481:**Example**
        -: 1482:
        -: 1483:```c
        -: 1484:{
        -: 1485:  jerry_value_t value;
        -: 1486:  ... // create or acquire value
        -: 1487:
        -: 1488:  if (jerry_value_is_arraybuffer (value))
        -: 1489:  {
        -: 1490:    ...
        -: 1491:  }
        -: 1492:
        -: 1493:  jerry_release_value (value);
        -: 1494:}
        -: 1495:```
        -: 1496:
        -: 1497:**See also**
        -: 1498:
        -: 1499:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -: 1500:- [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external)
        -: 1501:
        -: 1502:
        -: 1503:## jerry_value_is_boolean
        -: 1504:
        -: 1505:**Summary**
        -: 1506:
        -: 1507:Returns whether the given `jerry_value_t` is a boolean value.
        -: 1508:
        -: 1509:**Prototype**
        -: 1510:
        -: 1511:```c
        -: 1512:bool
        -: 1513:jerry_value_is_boolean (const jerry_value_t value)
        -: 1514:```
        -: 1515:
        -: 1516:- `value` - api value
        -: 1517:- return value
        -: 1518:  - true, if the given `jerry_value_t` is a boolean value
        -: 1519:  - false, otherwise
        -: 1520:
        -: 1521:**Example**
        -: 1522:
        -: 1523:```c
        -: 1524:{
        -: 1525:  jerry_value_t value;
        -: 1526:  ... // create or acquire value
        -: 1527:
        -: 1528:  if (jerry_value_is_boolean (value))
        -: 1529:  {
        -: 1530:    ...
        -: 1531:  }
        -: 1532:
        -: 1533:  jerry_release_value (value);
        -: 1534:}
        -: 1535:```
        -: 1536:
        -: 1537:**See also**
        -: 1538:
        -: 1539:- [jerry_release_value](#jerry_release_value)
        -: 1540:
        -: 1541:
        -: 1542:## jerry_value_is_constructor
        -: 1543:
        -: 1544:**Summary**
        -: 1545:
        -: 1546:Returns whether the given `jerry_value_t` is a constructor function.
        -: 1547:
        -: 1548:**Prototype**
        -: 1549:
        -: 1550:```c
        -: 1551:bool
        -: 1552:jerry_value_is_constructor (const jerry_value_t value)
        -: 1553:```
        -: 1554:
        -: 1555:- `value` - api value
        -: 1556:- return value
        -: 1557:  - true, if the given `jerry_value_t` is a constructor
        -: 1558:  - false, otherwise
        -: 1559:
        -: 1560:**Example**
        -: 1561:
        -: 1562:```c
        -: 1563:{
        -: 1564:  jerry_value_t value;
        -: 1565:  ... // create or acquire value
        -: 1566:
        -: 1567:  if (jerry_value_is_constructor (value))
        -: 1568:  {
        -: 1569:    ...
        -: 1570:  }
        -: 1571:
        -: 1572:  jerry_release_value (value);
        -: 1573:}
        -: 1574:```
        -: 1575:
        -: 1576:**See also**
        -: 1577:
        -: 1578:- [jerry_release_value](#jerry_release_value)
        -: 1579:
        -: 1580:## jerry_value_is_dataview
        -: 1581:
        -: 1582:**Summary**
        -: 1583:
        -: 1584:Returns whether the given `jerry_value_t` is a DataView object value.
        -: 1585:
        -: 1586:*Notes*:
        -: 1587:- This API depends on a build option (`JERRY_ES2015_BUILTIN_DATAVIEW`) and can be checked
        -: 1588:  in runtime with the `JERRY_FEATURE_DATAVIEW` feature enum value,
        -: 1589:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 1590:- The ES2015-subset profile enables this by default.
        -: 1591:
        -: 1592:**Prototype**
        -: 1593:
        -: 1594:```c
        -: 1595:bool
        -: 1596:jerry_value_is_dataview (const jerry_value_t value)
        -: 1597:```
        -: 1598:
        -: 1599:- `value` - API value
        -: 1600:- return value
        -: 1601:  - true, if the given `jerry_value_t` is a DataView object
        -: 1602:  - false, otherwise
        -: 1603:
        -: 1604:*New in version 2.0*.
        -: 1605:
        -: 1606:**Example**
        -: 1607:
        -: 1608:[doctest]: # ()
        -: 1609:
        -: 1610:```c
        -: 1611:#include "jerryscript.h"
        -: 1612:
        -: 1613:int
    #####: 1614:main (void)
        -: 1615:{
    #####: 1616:  jerry_init (JERRY_INIT_EMPTY);
        -: 1617:
    #####: 1618:  jerry_value_t arraybuffer = jerry_create_arraybuffer (16);
    #####: 1619:  jerry_value_t dataview = jerry_create_dataview (arraybuffer, 0, 16);
        -: 1620:
    #####: 1621:  if (jerry_value_is_dataview (dataview))
        -: 1622:  {
        -: 1623:    // usage of dataview
        -: 1624:  }
        -: 1625:
    #####: 1626:  jerry_release_value (dataview);
    #####: 1627:  jerry_release_value (arraybuffer);
        -: 1628:
    #####: 1629:  jerry_cleanup ();
    #####: 1630:  return 0;
        -: 1631:}
        -: 1632:```
        -: 1633:
        -: 1634:**See also**
        -: 1635:
        -: 1636:- [jerry_release_value](#jerry_release_value)
        -: 1637:- [jerry_create_dataview](#jerry_create_dataview)
        -: 1638:
        -: 1639:
        -: 1640:## jerry_value_is_error
        -: 1641:
        -: 1642:**Summary**
        -: 1643:
        -: 1644:Returns whether the given `jerry_value_t` is error value.
        -: 1645:
        -: 1646:**Prototype**
        -: 1647:
        -: 1648:```c
        -: 1649:bool
        -: 1650:jerry_value_is_error (const jerry_value_t value);
        -: 1651:```
        -: 1652:
        -: 1653:- `value` - api value
        -: 1654:- return value
        -: 1655:  - true, if the given `jerry_value_t` is error value.
        -: 1656:  - false, otherwise
        -: 1657:
        -: 1658:*New in version 2.0*.
        -: 1659:
        -: 1660:**Example**
        -: 1661:
        -: 1662:```c
        -: 1663:{
        -: 1664:  jerry_value_t value;
        -: 1665:  ... // create or acquire value
        -: 1666:
        -: 1667:  if (jerry_value_is_error (value))
        -: 1668:  {
        -: 1669:    ...
        -: 1670:  }
        -: 1671:
        -: 1672:  jerry_release_value (value);
        -: 1673:}
        -: 1674:```
        -: 1675:
        -: 1676:**See also**
        -: 1677:
        -: 1678:- [jerry_value_t](#jerry_value_t)
        -: 1679:- [jerry_value_is_abort](#jerry_value_is_abort)
        -: 1680:
        -: 1681:## jerry_value_is_function
        -: 1682:
        -: 1683:**Summary**
        -: 1684:
        -: 1685:Returns whether the given `jerry_value_t` is a function.
        -: 1686:
        -: 1687:**Prototype**
        -: 1688:
        -: 1689:```c
        -: 1690:bool
        -: 1691:jerry_value_is_function (const jerry_value_t value)
        -: 1692:```
        -: 1693:
        -: 1694:- `value` - api value
        -: 1695:- return value
        -: 1696:  - true, if the given `jerry_value_t` is a function
        -: 1697:  - false, otherwise
        -: 1698:
        -: 1699:**Example**
        -: 1700:
        -: 1701:```c
        -: 1702:{
        -: 1703:  jerry_value_t value;
        -: 1704:  ... // create or acquire value
        -: 1705:
        -: 1706:  if (jerry_value_is_function (value))
        -: 1707:  {
        -: 1708:    ...
        -: 1709:  }
        -: 1710:
        -: 1711:  jerry_release_value (value);
        -: 1712:}
        -: 1713:```
        -: 1714:
        -: 1715:**See also**
        -: 1716:
        -: 1717:- [jerry_release_value](#jerry_release_value)
        -: 1718:
        -: 1719:
        -: 1720:## jerry_value_is_number
        -: 1721:
        -: 1722:**Summary**
        -: 1723:
        -: 1724:Returns whether the given `jerry_value_t` is a number.
        -: 1725:
        -: 1726:**Prototype**
        -: 1727:
        -: 1728:```c
        -: 1729:bool
        -: 1730:jerry_value_is_number (const jerry_value_t value)
        -: 1731:```
        -: 1732:
        -: 1733:- `value` - api value
        -: 1734:- return value
        -: 1735:  - true, if the given `jerry_value_t` is a number
        -: 1736:  - false, otherwise
        -: 1737:
        -: 1738:**Example**
        -: 1739:
        -: 1740:```c
        -: 1741:{
        -: 1742:  jerry_value_t value;
        -: 1743:  ... // create or acquire value
        -: 1744:
        -: 1745:  if (jerry_value_is_number (value))
        -: 1746:  {
        -: 1747:    ...
        -: 1748:  }
        -: 1749:
        -: 1750:  jerry_release_value (value);
        -: 1751:}
        -: 1752:```
        -: 1753:
        -: 1754:**See also**
        -: 1755:
        -: 1756:- [jerry_release_value](#jerry_release_value)
        -: 1757:
        -: 1758:
        -: 1759:## jerry_value_is_null
        -: 1760:
        -: 1761:**Summary**
        -: 1762:
        -: 1763:Returns whether the given `jerry_value_t` is a null value.
        -: 1764:
        -: 1765:**Prototype**
        -: 1766:
        -: 1767:```c
        -: 1768:bool
        -: 1769:jerry_value_is_null (const jerry_value_t value)
        -: 1770:```
        -: 1771:
        -: 1772:- `value` - api value
        -: 1773:- return value
        -: 1774:  - true, if the given `jerry_value_t` is a null
        -: 1775:  - false, otherwise
        -: 1776:
        -: 1777:**Example**
        -: 1778:
        -: 1779:```c
        -: 1780:{
        -: 1781:  jerry_value_t value;
        -: 1782:  ... // create or acquire value
        -: 1783:
        -: 1784:  if (jerry_value_is_null (value))
        -: 1785:  {
        -: 1786:    ...
        -: 1787:  }
        -: 1788:
        -: 1789:  jerry_release_value (value);
        -: 1790:}
        -: 1791:```
        -: 1792:
        -: 1793:**See also**
        -: 1794:
        -: 1795:- [jerry_release_value](#jerry_release_value)
        -: 1796:
        -: 1797:
        -: 1798:## jerry_value_is_object
        -: 1799:
        -: 1800:**Summary**
        -: 1801:
        -: 1802:Returns whether the given `jerry_value_t` is an object value.
        -: 1803:
        -: 1804:**Prototype**
        -: 1805:
        -: 1806:```c
        -: 1807:bool
        -: 1808:jerry_value_is_object (const jerry_value_t value)
        -: 1809:```
        -: 1810:
        -: 1811:- `value` - api value
        -: 1812:- return value
        -: 1813:  - true, if the given `jerry_value_t` is an object
        -: 1814:  - false, otherwise
        -: 1815:
        -: 1816:**Example**
        -: 1817:
        -: 1818:```c
        -: 1819:{
        -: 1820:  jerry_value_t value;
        -: 1821:  ... // create or acquire value
        -: 1822:
        -: 1823:  if (jerry_value_is_object (value))
        -: 1824:  {
        -: 1825:    ...
        -: 1826:  }
        -: 1827:
        -: 1828:  jerry_release_value (value);
        -: 1829:}
        -: 1830:```
        -: 1831:
        -: 1832:**See also**
        -: 1833:
        -: 1834:- [jerry_release_value](#jerry_release_value)
        -: 1835:
        -: 1836:
        -: 1837:## jerry_value_is_promise
        -: 1838:
        -: 1839:**Summary**
        -: 1840:
        -: 1841:Returns whether the given `jerry_value_t` is a promise value.
        -: 1842:
        -: 1843:*Notes*:
        -: 1844:- This API depends on a build option (`JERRY_ES2015_BUILTIN_PROMISE`) and can be checked
        -: 1845:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 1846:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 1847:- The ES2015-subset profile enables this by default.
        -: 1848:
        -: 1849:
        -: 1850:**Prototype**
        -: 1851:
        -: 1852:```c
        -: 1853:bool
        -: 1854:jerry_value_is_promise (const jerry_value_t value)
        -: 1855:```
        -: 1856:
        -: 1857:- `value` - api value
        -: 1858:- return value
        -: 1859:  - true, if the given `jerry_value_t` is a promise
        -: 1860:  - false, otherwise
        -: 1861:
        -: 1862:*New in version 2.0*.
        -: 1863:
        -: 1864:**Example**
        -: 1865:
        -: 1866:```c
        -: 1867:{
        -: 1868:  jerry_value_t value;
        -: 1869:  ... // create or acquire value
        -: 1870:
        -: 1871:  if (jerry_value_is_promise (value))
        -: 1872:  {
        -: 1873:    ...
        -: 1874:  }
        -: 1875:
        -: 1876:  jerry_release_value (value);
        -: 1877:}
        -: 1878:```
        -: 1879:
        -: 1880:**See also**
        -: 1881:
        -: 1882:- [jerry_release_value](#jerry_release_value)
        -: 1883:- [jerry_create_promise](#jerry_create_promise)
        -: 1884:
        -: 1885:
        -: 1886:## jerry_value_is_proxy
        -: 1887:
        -: 1888:**Summary**
        -: 1889:
        -: 1890:Returns whether the given `jerry_value_t` is a proxy value.
        -: 1891:
        -: 1892:*Notes*:
        -: 1893:- This API depends on a build option (`JERRY_ES2015_BUILTIN_PROXY`) and can be checked
        -: 1894:  in runtime with the `JERRY_FEATURE_PROXY` feature enum value,
        -: 1895:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 1896:- The ES2015-subset profile enables this by default.
        -: 1897:
        -: 1898:
        -: 1899:**Prototype**
        -: 1900:
        -: 1901:```c
        -: 1902:bool
        -: 1903:jerry_value_is_proxy (const jerry_value_t value)
        -: 1904:```
        -: 1905:
        -: 1906:- `value` - api value
        -: 1907:- return value
        -: 1908:  - true, if the given `jerry_value_t` is a proxy object
        -: 1909:  - false, otherwise
        -: 1910:
        -: 1911:**Example**
        -: 1912:
        -: 1913:*New in version [next_version]*.
        -: 1914:
        -: 1915:```c
        -: 1916:{
        -: 1917:  jerry_value_t value;
        -: 1918:  ... // create or acquire value
        -: 1919:
        -: 1920:  if (jerry_value_is_proxy (value))
        -: 1921:  {
        -: 1922:    ...
        -: 1923:  }
        -: 1924:
        -: 1925:  jerry_release_value (value);
        -: 1926:}
        -: 1927:```
        -: 1928:
        -: 1929:**See also**
        -: 1930:
        -: 1931:- [jerry_release_value](#jerry_release_value)
        -: 1932:- [jerry_create_proxy](#jerry_create_proxy)
        -: 1933:
        -: 1934:
        -: 1935:## jerry_value_is_string
        -: 1936:
        -: 1937:**Summary**
        -: 1938:
        -: 1939:Returns whether the given `jerry_value_t` is a string value.
        -: 1940:
        -: 1941:**Prototype**
        -: 1942:
        -: 1943:```c
        -: 1944:bool
        -: 1945:jerry_value_is_string (const jerry_value_t value)
        -: 1946:```
        -: 1947:
        -: 1948:- `value` - api value
        -: 1949:- return value
        -: 1950:  - true, if the given `jerry_value_t` is a string
        -: 1951:  - false, otherwise
        -: 1952:
        -: 1953:**Example**
        -: 1954:
        -: 1955:```c
        -: 1956:{
        -: 1957:  jerry_value_t value;
        -: 1958:  ... // create or acquire value
        -: 1959:
        -: 1960:  if (jerry_value_is_string (value))
        -: 1961:  {
        -: 1962:    ...
        -: 1963:  }
        -: 1964:
        -: 1965:  jerry_release_value (value);
        -: 1966:}
        -: 1967:```
        -: 1968:
        -: 1969:**See also**
        -: 1970:
        -: 1971:- [jerry_release_value](#jerry_release_value)
        -: 1972:
        -: 1973:
        -: 1974:## jerry_value_is_symbol
        -: 1975:
        -: 1976:**Summary**
        -: 1977:
        -: 1978:Returns whether the given `jerry_value_t` is a symbol value.
        -: 1979:
        -: 1980:*Notes*:
        -: 1981:- This API depends on a build option (`JERRY_ES2015_BUILTIN_SYMBOL`) and can be checked
        -: 1982:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 1983:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 1984:- The ES2015-subset profile enables this by default.
        -: 1985:
        -: 1986:**Prototype**
        -: 1987:
        -: 1988:```c
        -: 1989:bool
        -: 1990:jerry_value_is_symbol (const jerry_value_t value)
        -: 1991:```
        -: 1992:
        -: 1993:- `value` - API value
        -: 1994:- return value
        -: 1995:  - true, if the given `jerry_value_t` is a symbol
        -: 1996:  - false, otherwise
        -: 1997:
        -: 1998:*New in version 2.0*.
        -: 1999:
        -: 2000:**Example**
        -: 2001:
        -: 2002:[doctest]: # ()
        -: 2003:
        -: 2004:```c
        -: 2005:#include "jerryscript.h"
        -: 2006:
        -: 2007:int
    #####: 2008:main (void)
        -: 2009:{
    #####: 2010:  jerry_init (JERRY_INIT_EMPTY);
        -: 2011:
    #####: 2012:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "Symbol description string");
    #####: 2013:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 2014:
    #####: 2015:  jerry_release_value (string_value);
        -: 2016:
    #####: 2017:  if (jerry_value_is_symbol (symbol_value))
        -: 2018:  {
        -: 2019:    // usage of symbol_value
        -: 2020:  }
        -: 2021:
    #####: 2022:  jerry_release_value (symbol_value);
        -: 2023:
    #####: 2024:  jerry_cleanup ();
    #####: 2025:  return 0;
        -: 2026:}
        -: 2027:```
        -: 2028:
        -: 2029:**See also**
        -: 2030:
        -: 2031:- [jerry_release_value](#jerry_release_value)
        -: 2032:- [jerry_create_symbol](#jerry_create_symbol)
        -: 2033:
        -: 2034:## jerry_value_is_typedarray
        -: 2035:
        -: 2036:**Summary**
        -: 2037:
        -: 2038:Checks whether the given `jerry_value_t` is a TypedArray object or not.
        -: 2039:
        -: 2040:*Notes*:
        -: 2041:- This API depends on a build option (`JERRY_ES2015_BUILTIN_TYPEDARRAY`) and can be checked
        -: 2042:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 2043:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2044:- The ES2015-subset profile enables this by default.
        -: 2045:
        -: 2046:**Prototype**
        -: 2047:
        -: 2048:```c
        -: 2049:bool
        -: 2050:jerry_value_is_typedarray (const jerry_value_t value)
        -: 2051:```
        -: 2052:
        -: 2053:- `value` - object to check
        -: 2054:- return value
        -: 2055:  - true, if the given `jerry_value_t` is a TypedArray object.
        -: 2056:  - false, otherwise
        -: 2057:
        -: 2058:*New in version 2.0*.
        -: 2059:
        -: 2060:**Example**
        -: 2061:
        -: 2062:[doctest]: # ()
        -: 2063:
        -: 2064:```c
        -: 2065:#include "jerryscript.h"
        -: 2066:
        -: 2067:int
    #####: 2068:main (void)
        -: 2069:{
    #####: 2070:  jerry_init (JERRY_INIT_EMPTY);
        -: 2071:
    #####: 2072:  jerry_value_t value = jerry_create_typedarray (JERRY_TYPEDARRAY_UINT16, 15);
        -: 2073:
    #####: 2074:  if (jerry_value_is_typedarray (value))
        -: 2075:  {
        -: 2076:    /* "value" is a typedarray. */
        -: 2077:  }
        -: 2078:
    #####: 2079:  jerry_release_value (value);
        -: 2080:
    #####: 2081:  jerry_cleanup ();
        -: 2082:
    #####: 2083:  return 0;
        -: 2084:}
        -: 2085:```
        -: 2086:
        -: 2087:**See also**
        -: 2088:
        -: 2089:- [jerry_create_typedarray](#jerry_create_typedarray)
        -: 2090:
        -: 2091:
        -: 2092:## jerry_get_container_type
        -: 2093:
        -: 2094:**Summary**
        -: 2095:
        -: 2096:Checks whether the given `jerry_value_t` is the given `jerry_container_type_t` type container object.
        -: 2097:
        -: 2098:*Notes*
        -: 2099:- This API function depends on a build option (`JERRY_ES2015_BUILTIN_CONTAINER`) and can be checked
        -: 2100:  runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -: 2101:  feature enum values.
        -: 2102:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2103:- The ES2015-subset profile enables this by default.
        -: 2104:
        -: 2105:*New in version 2.3*.
        -: 2106:
        -: 2107:**Prototype**
        -: 2108:
        -: 2109:```c
        -: 2110:jerry_container_type_t
        -: 2111:jerry_get_container_type (const jerry_value_t value)
        -: 2112:```
        -: 2113:
        -: 2114:- `value` - Container object
        -: 2115:- return value
        -: 2116:  - The corresponding enum value of `jerry_container_type_t`, or `JERRY_CONTAINER_TYPE_INVALID` if the container
        -: 2117:    was not a valid container object.
        -: 2118:**Example**
        -: 2119:
        -: 2120:[doctest]: # ()
        -: 2121:
        -: 2122:```c
        -: 2123:#include "jerryscript.h"
        -: 2124:int
    #####: 2125:main (void)
        -: 2126:{
    #####: 2127:  jerry_init (JERRY_INIT_EMPTY);
        -: 2128:
    #####: 2129:  jerry_value_t value = jerry_create_container (JERRY_CONTAINER_TYPE_MAP, NULL, 0);
        -: 2130:
    #####: 2131:  if (jerry_get_container_type (value) == JERRY_CONTAINER_TYPE_MAP)
        -: 2132:  {
        -: 2133:    /* "value" is a map. */
        -: 2134:  }
        -: 2135:
    #####: 2136:  jerry_release_value (value);
        -: 2137:
    #####: 2138:  jerry_cleanup ();
        -: 2139:
    #####: 2140:  return 0;
        -: 2141:}
        -: 2142:```
        -: 2143:
        -: 2144:**See also**
        -: 2145:
        -: 2146:- [jerry_create_container](#jerry_create_container)
        -: 2147:- [jerry_container_type_t](#jerry_container_type_t)
        -: 2148:
        -: 2149:
        -: 2150:## jerry_value_is_undefined
        -: 2151:
        -: 2152:**Summary**
        -: 2153:
        -: 2154:Returns whether the given `jerry_value_t` is an undefined value.
        -: 2155:
        -: 2156:**Prototype**
        -: 2157:
        -: 2158:```c
        -: 2159:bool
        -: 2160:jerry_value_is_undefined (const jerry_value_t value)
        -: 2161:```
        -: 2162:
        -: 2163:- `value` - api value
        -: 2164:- return value
        -: 2165:  - true, if the given `jerry_value_t` is an undefined value
        -: 2166:  - false, otherwise
        -: 2167:
        -: 2168:**Example**
        -: 2169:
        -: 2170:```c
        -: 2171:{
        -: 2172:  jerry_value_t value;
        -: 2173:  ... // create or acquire value
        -: 2174:
        -: 2175:  if (jerry_value_is_undefined (value))
        -: 2176:  {
        -: 2177:    ...
        -: 2178:  }
        -: 2179:
        -: 2180:  jerry_release_value (value);
        -: 2181:}
        -: 2182:```
        -: 2183:
        -: 2184:**See also**
        -: 2185:
        -: 2186:- [jerry_release_value](#jerry_release_value)
        -: 2187:
        -: 2188:## jerry_value_get_type
        -: 2189:
        -: 2190:**Summary**
        -: 2191:
        -: 2192:Returns the JavaScript type
        -: 2193:for a given value as a [jerry_type_t](#jerry_type_t) enum value.
        -: 2194:
        -: 2195:This is a similar operation to the 'typeof' operator
        -: 2196:in the standard with an exception that the 'null'
        -: 2197:value has its own enum value.
        -: 2198:
        -: 2199:**Prototype**
        -: 2200:
        -: 2201:```c
        -: 2202:jerry_type_t
        -: 2203:jerry_value_get_type (const jerry_value_t value);
        -: 2204:```
        -: 2205:
        -: 2206:- `value` - JavaScript value to check.
        -: 2207:- return value
        -: 2208:  - One of the [jerry_type_t](#jerry_type_t) value.
        -: 2209:
        -: 2210:*New in version 2.0*.
        -: 2211:
        -: 2212:**Example**
        -: 2213:
        -: 2214:```c
        -: 2215:{
        -: 2216:  jerry_value_t number = jerry_create_number (3.3);
        -: 2217:
        -: 2218:  jerry_type_t type_info = jerry_value_get_type (number);
        -: 2219:
        -: 2220:  if (type_info == JERRY_TYPE_NUMBER)
        -: 2221:  {
        -: 2222:    /* ... */
        -: 2223:  }
        -: 2224:
        -: 2225:  jerry_release_value (number);
        -: 2226:}
        -: 2227:```
        -: 2228:
        -: 2229:**See also**
        -: 2230:
        -: 2231:- [jerry_type_t](#jerry_type_t)
        -: 2232:
        -: 2233:## jerry_is_feature_enabled
        -: 2234:
        -: 2235:**Summary**
        -: 2236:
        -: 2237:Returns whether the specified compile time feature is enabled.
        -: 2238:
        -: 2239:**Prototype**
        -: 2240:
        -: 2241:```c
        -: 2242:bool
        -: 2243:jerry_is_feature_enabled (const jerry_feature_t feature);
        -: 2244:```
        -: 2245:
        -: 2246:- `feature` - jerry feature
        -: 2247:- return value
        -: 2248:  - true, if the given `jerry_feature_t` is enabled
        -: 2249:  - false, otherwise
        -: 2250:
        -: 2251:*New in version 2.0*.
        -: 2252:
        -: 2253:**Example**
        -: 2254:
        -: 2255:```c
        -: 2256:{
        -: 2257:  /* ... */
        -: 2258:  jerry_feature_t feature = JERRY_FEATURE_SNAPSHOT_SAVE;
        -: 2259:
        -: 2260:  if (jerry_is_feature_enabled (feature))
        -: 2261:  {
        -: 2262:    /* ... */
        -: 2263:  }
        -: 2264:
        -: 2265:}
        -: 2266:```
        -: 2267:
        -: 2268:**See also**
        -: 2269:
        -: 2270:- [jerry_feature_t](#jerry_feature_t)
        -: 2271:
        -: 2272:
        -: 2273:# Binary operations
        -: 2274:
        -: 2275:## jerry_binary_operation
        -: 2276:
        -: 2277:**Summary**
        -: 2278:
        -: 2279:Perform binary operation on the given operands (==, ===, <, >, etc.).
        -: 2280:
        -: 2281:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 2282:is no longer needed.
        -: 2283:
        -: 2284:**Prototype**
        -: 2285:
        -: 2286:```c
        -: 2287:jerry_value_t
        -: 2288:jerry_binary_operation (jerry_binary_operation_t op,
        -: 2289:                        const jerry_value_t lhs,
        -: 2290:                        const jerry_value_t rhs);
        -: 2291:```
        -: 2292:
        -: 2293:- `op` - binary operation
        -: 2294:- `lhs` - left-hand side operand
        -: 2295:- `rhs` - right-hand side operand
        -: 2296:- return value
        -: 2297:  - error, if argument has an error flag or operation is unsuccessful or unsupported
        -: 2298:  - true/false, the result of the binary operation on the given operands otherwise
        -: 2299:
        -: 2300:*New in version 2.0*.
        -: 2301:
        -: 2302:**Example - JERRY_BIN_OP_EQUAL**
        -: 2303:
        -: 2304:```c
        -: 2305:{
        -: 2306:  jerry_value_t value1;
        -: 2307:  jerry_value_t value2;
        -: 2308:  ... // create or acquire value
        -: 2309:  jerry_value_t result = jerry_binary_operation (JERRY_BIN_OP_EQUAL, value1, value2)
        -: 2310:
        -: 2311:  if (!jerry_value_is_error (result))
        -: 2312:  {
        -: 2313:    if (jerry_get_boolean_value (result))
        -: 2314:    {
        -: 2315:       // value1 and value2 are equal
        -: 2316:    }
        -: 2317:    else
        -: 2318:    {
        -: 2319:      // value1 and value2 are NOT equal
        -: 2320:    }
        -: 2321:  }
        -: 2322:  else
        -: 2323:  {
        -: 2324:    ... // handle error
        -: 2325:  }
        -: 2326:
        -: 2327:  jerry_release_value (value1);
        -: 2328:  jerry_release_value (value2);
        -: 2329:  jerry_release_value (result);
        -: 2330:}
        -: 2331:```
        -: 2332:
        -: 2333:**Example - JERRY_BIN_OP_INSTANCEOF**
        -: 2334:
        -: 2335:[doctest]: # ()
        -: 2336:
        -: 2337:```c
        -: 2338:#include "jerryscript.h"
        -: 2339:
        -: 2340:static jerry_value_t
    #####: 2341:my_constructor (const jerry_value_t func_val,
        -: 2342:                const jerry_value_t this_val,
        -: 2343:                const jerry_value_t argv[],
        -: 2344:                const jerry_length_t argc)
        -: 2345:{
    #####: 2346:  return jerry_create_undefined ();
        -: 2347:}
        -: 2348:
        -: 2349:int
    #####: 2350:main (void)
        -: 2351:{
    #####: 2352:  jerry_init (JERRY_INIT_EMPTY);
        -: 2353:
    #####: 2354:  jerry_value_t base_obj = jerry_create_object ();
    #####: 2355:  jerry_value_t constructor = jerry_create_external_function (my_constructor);
        -: 2356:
        -: 2357:  /* External functions does not have a prototype by default, so we need to create one */
    #####: 2358:  jerry_value_t prototype_str = jerry_create_string ((const jerry_char_t *) ("prototype"));
    #####: 2359:  jerry_release_value (jerry_set_property (constructor, prototype_str, base_obj));
    #####: 2360:  jerry_release_value (prototype_str);
        -: 2361:
        -: 2362:  /* Construct the instance. */
    #####: 2363:  jerry_value_t instance_val = jerry_construct_object (constructor, NULL, 0);
        -: 2364:
        -: 2365:  /* Call the API function of 'instanceof'. */
    #####: 2366:  jerry_value_t is_instance = jerry_binary_operation (JERRY_BIN_OP_INSTANCEOF,
        -: 2367:                                                      instance_val,
        -: 2368:                                                      constructor);
    #####: 2369:  if (!jerry_value_is_error (is_instance)
    #####: 2370:      && jerry_get_boolean_value (is_instance) == true)
        -: 2371:  {
        -: 2372:    /* ... */
        -: 2373:  }
        -: 2374:
        -: 2375:  /* Free all of the jerry values and cleanup the engine. */
    #####: 2376:  jerry_release_value (base_obj);
    #####: 2377:  jerry_release_value (constructor);
    #####: 2378:  jerry_release_value (instance_val);
    #####: 2379:  jerry_release_value (is_instance);
        -: 2380:
    #####: 2381:  jerry_cleanup ();
    #####: 2382:  return 0;
        -: 2383:}
        -: 2384:```
        -: 2385:
        -: 2386:**See also**
        -: 2387:
        -: 2388:- [jerry_binary_operation_t](#jerry_binary_operation_t)
        -: 2389:
        -: 2390:
        -: 2391:# Error manipulation functions
        -: 2392:
        -: 2393:*Changed in version 2.0*: The error handling and manipulation was modified and the old methods were replaced.
        -: 2394:
        -: 2395:## jerry_create_abort_from_value
        -: 2396:
        -: 2397:**Summary**
        -: 2398:
        -: 2399:Create (api) abort from a value.
        -: 2400:
        -: 2401:This function creates an API abort value from an API value. The second argument defines
        -: 2402:whether the input value must be released or not. If it is set to `true`,
        -: 2403:then a [`jerry_release_value`](#jerry_release_value) function will be called
        -: 2404:for the first argument, so the api value won't be available after the call of
        -: 2405:`jerry_create_abort_from_value`. The second argument should be false if both value
        -: 2406:and created abort value are needed.
        -: 2407:
        -: 2408:**Prototype**
        -: 2409:
        -: 2410:```c
        -: 2411:jerry_value_t
        -: 2412:jerry_create_abort_from_value (jerry_value_t value, bool release);
        -: 2413:```
        -: 2414:
        -: 2415:- `value` - api value
        -: 2416:- `release` - raw boolean, defines whether input value must be released
        -: 2417:- return value - abort (api) value
        -: 2418:
        -: 2419:*New in version 2.0*.
        -: 2420:
        -: 2421:**Example 1**
        -: 2422:
        -: 2423:```c
        -: 2424:{
        -: 2425:  jerry_value_t value;
        -: 2426:  ... // create or acquire value
        -: 2427:
        -: 2428:  jerry_value_t abort = jerry_create_abort_from_value (value, true);
        -: 2429:  // using the 'value' variable after release is invalid.
        -: 2430:
        -: 2431:  jerry_release_value (abort);
        -: 2432:}
        -: 2433:```
        -: 2434:
        -: 2435:**Example 2**
        -: 2436:
        -: 2437:```c
        -: 2438:{
        -: 2439:  jerry_value_t value;
        -: 2440:  ... // create or acquire value
        -: 2441:
        -: 2442:  jerry_value_t abort = jerry_create_abort_from_value (value, false);
        -: 2443:  // both 'abort' and 'value' can be used and must be released when they are no longer needed
        -: 2444:
        -: 2445:  jerry_release_value (abort);
        -: 2446:  jerry_release_value (value);
        -: 2447:}
        -: 2448:```
        -: 2449:
        -: 2450:**See also**
        -: 2451:
        -: 2452:- [jerry_value_t](#jerry_value_t)
        -: 2453:- [jerry_get_value_from_error](#jerry_get_value_from_error)
        -: 2454:- [jerry_create_error_from_value](#jerry_create_error_from_value)
        -: 2455:
        -: 2456:## jerry_create_error_from_value
        -: 2457:
        -: 2458:**Summary**
        -: 2459:
        -: 2460:Create (api) error from a value.
        -: 2461:
        -: 2462:This function creates an API error value from an API value. The second argument defines
        -: 2463:whether the input value must be released or not. If it is set to `true`,
        -: 2464:then a [`jerry_release_value`](#jerry_release_value) function will be called
        -: 2465:for the first argument, so the api value won't be available after the call of
        -: 2466:`jerry_create_error_from_value`. The second argument should be false if both value
        -: 2467:and created error value are needed.
        -: 2468:
        -: 2469:**Prototype**
        -: 2470:
        -: 2471:```c
        -: 2472:jerry_value_t
        -: 2473:jerry_create_error_from_value (jerry_value_t value, bool release);
        -: 2474:```
        -: 2475:
        -: 2476:- `value` - api value
        -: 2477:- `release` - raw boolean, defines whether input value must be released
        -: 2478:- return value - error (api) value
        -: 2479:
        -: 2480:*New in version 2.0*.
        -: 2481:
        -: 2482:**Example 1**
        -: 2483:
        -: 2484:```c
        -: 2485:{
        -: 2486:  jerry_value_t value;
        -: 2487:  ... // create or acquire value
        -: 2488:
        -: 2489:  jerry_value_t error = jerry_create_error_from_value (value, true);
        -: 2490:  // using the 'value' variable after release is invalid.
        -: 2491:
        -: 2492:
        -: 2493:  jerry_release_value (error);
        -: 2494:}
        -: 2495:```
        -: 2496:
        -: 2497:**Example 2**
        -: 2498:
        -: 2499:```c
        -: 2500:{
        -: 2501:  jerry_value_t value;
        -: 2502:  ... // create or acquire value
        -: 2503:
        -: 2504:  jerry_value_t error = jerry_create_error_from_value (value, false);
        -: 2505:  // both 'error' and 'value' can be used and must be released when they are no longer needed
        -: 2506:
        -: 2507:  jerry_release_value (error);
        -: 2508:  jerry_release_value (value);
        -: 2509:}
        -: 2510:```
        -: 2511:
        -: 2512:**See also**
        -: 2513:
        -: 2514:- [jerry_value_t](#jerry_value_t)
        -: 2515:- [jerry_get_value_from_error](#jerry_get_value_from_error)
        -: 2516:- [jerry_create_abort_from_value](#jerry_create_abort_from_value)
        -: 2517:
        -: 2518:## jerry_get_error_type
        -: 2519:
        -: 2520:**Summary**
        -: 2521:
        -: 2522:Returns the type of the Error object if possible.
        -: 2523:
        -: 2524:If a non-error object is used as the input for the function the method
        -: 2525:will return `JERRY_ERROR_NONE` indicating that the value was not
        -: 2526:an Error object. However it is still possible that the value contains
        -: 2527:error semantics. To correctly detect if a value have error use the
        -: 2528:[jerry_value_is_error](#jerry_value_is_error) method.
        -: 2529:
        -: 2530:**Prototype**
        -: 2531:
        -: 2532:```c
        -: 2533:jerry_error_t
        -: 2534:jerry_get_error_type (const jerry_value_t value);
        -: 2535:```
        -: 2536:
        -: 2537:- `value` - api value (possible error object)
        -: 2538:- return value
        -: 2539:  - JERRY_ERROR_NONE if the input is not an error object
        -: 2540:  - one of the [jerry_error_t](#jerry_error_t) value
        -: 2541:
        -: 2542:*New in version 2.0*.
        -: 2543:
        -: 2544:**Example**
        -: 2545:
        -: 2546:```c
        -: 2547:{
        -: 2548:  jerry_value_t error_obj = jerry_create_error (JERRY_ERROR_RANGE,
        -: 2549:                                                (const jerry_char_t *) "error msg");
        -: 2550:  jerry_error_t error_type = jerry_get_error_type (error_obj);
        -: 2551:
        -: 2552:  // error_type is now JERRY_ERROR_RANGE.
        -: 2553:
        -: 2554:  jerry_release_value (error_obj);
        -: 2555:}
        -: 2556:```
        -: 2557:
        -: 2558:**See also**
        -: 2559:
        -: 2560:- [jerry_create_error](#jerry_create_error)
        -: 2561:- [jerry_value_is_error](#jerry_value_is_error)
        -: 2562:
        -: 2563:## jerry_get_value_from_error
        -: 2564:
        -: 2565:**Summary**
        -: 2566:
        -: 2567:Get the value from an error.
        -: 2568:
        -: 2569:Many API functions cannot be called with an error value.
        -: 2570:This function extracts the API value from an error. The second argument defines
        -: 2571:whether the input error value must be released or not. If it is set to `true`,
        -: 2572:then a [`jerry_release_value`](#jerry_release_value) function will be called
        -: 2573:for the first argument, so the error value won't be available after the call of
        -: 2574:`jerry_get_value_from_error`. The second argument should be false if both error
        -: 2575:and its represented value are needed.
        -: 2576:
        -: 2577:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 2578:is no longer needed.
        -: 2579:
        -: 2580:**Prototype**
        -: 2581:
        -: 2582:```c
        -: 2583:jerry_value_t
        -: 2584:jerry_get_value_from_error (jerry_value_t value, bool release)
        -: 2585:```
        -: 2586:
        -: 2587:- `value` - error (api) value
        -: 2588:- `release` - raw boolean, defines whether input value must be released
        -: 2589:- return value - api value
        -: 2590:
        -: 2591:*New in version 2.0*.
        -: 2592:
        -: 2593:**Example 1**
        -: 2594:
        -: 2595:```c
        -: 2596:{
        -: 2597:  jerry_value_t value;
        -: 2598:  ... // create or acquire value
        -: 2599:
        -: 2600:  jerry_value_t error = jerry_create_error_from_value (value, true);
        -: 2601:  jerry_value_t value_from_error = jerry_get_value_from_error (error, true);
        -: 2602:  // using the 'error' variable after release is invalid.
        -: 2603:
        -: 2604:  jerry_release_value (value_from_error);
        -: 2605:}
        -: 2606:```
        -: 2607:
        -: 2608:**Example 2**
        -: 2609:
        -: 2610:```c
        -: 2611:{
        -: 2612:  jerry_value_t value;
        -: 2613:  ... // create or acquire value
        -: 2614:
        -: 2615:  jerry_value_t error = jerry_create_error_from_value (value, true);
        -: 2616:  jerry_value_t value_from_error = jerry_get_value_from_error (error, false);
        -: 2617:  // both 'error' and 'value_from_error' can be used and must be released when they are no longer needed
        -: 2618:
        -: 2619:  jerry_release_value (value_from_error);
        -: 2620:  jerry_release_value (error);
        -: 2621:}
        -: 2622:```
        -: 2623:
        -: 2624:**See also**
        -: 2625:
        -: 2626:- [jerry_value_t](#jerry_value_t)
        -: 2627:- [jerry_create_error_from_value](#jerry_create_error_from_value)
        -: 2628:- [jerry_create_abort_from_value](#jerry_create_abort_from_value)
        -: 2629:
        -: 2630:# Getter functions of 'jerry_value_t'
        -: 2631:
        -: 2632:Get raw data from API values.
        -: 2633:
        -: 2634:## jerry_get_boolean_value
        -: 2635:
        -: 2636:**Summary**
        -: 2637:
        -: 2638:Gets the raw bool value from a `jerry_value_t`.
        -: 2639:
        -: 2640:**Prototype**
        -: 2641:
        -: 2642:```c
        -: 2643:bool
        -: 2644:jerry_get_boolean_value (const jerry_value_t value);
        -: 2645:```
        -: 2646:
        -: 2647:- `value` - api value
        -: 2648:- return value - boolean value represented by the argument.
        -: 2649:
        -: 2650:**Example**
        -: 2651:
        -: 2652:```c
        -: 2653:{
        -: 2654:  jerry_value_t value;
        -: 2655:  ... // create or acquire value
        -: 2656:
        -: 2657:  if (jerry_value_is_boolean (value))
        -: 2658:  {
        -: 2659:    bool raw_value = jerry_get_boolean_value (value);
        -: 2660:
        -: 2661:    ... // usage of raw value
        -: 2662:
        -: 2663:  }
        -: 2664:
        -: 2665:  jerry_release_value (value);
        -: 2666:}
        -: 2667:
        -: 2668:```
        -: 2669:
        -: 2670:**See also**
        -: 2671:
        -: 2672:- [jerry_value_is_boolean](#jerry_value_is_boolean)
        -: 2673:- [jerry_release_value](#jerry_release_value)
        -: 2674:
        -: 2675:
        -: 2676:## jerry_get_number_value
        -: 2677:
        -: 2678:**Summary**
        -: 2679:
        -: 2680:Gets the number value of the given `jerry_value_t` parameter as a raw double.
        -: 2681:
        -: 2682:If the argument passed is not a number `0.0` will be returned.
        -: 2683:
        -: 2684:**Prototype**
        -: 2685:
        -: 2686:```c
        -: 2687:double
        -: 2688:jerry_get_number_value (const jerry_value_t value);
        -: 2689:```
        -: 2690:
        -: 2691:- `value` - api value
        -: 2692:- return value
        -: 2693:  - the number value of the given `jerry_value_t` parameter as a raw double.
        -: 2694:  - `0.0` if the api value passed is not a number.
        -: 2695:
        -: 2696:**Example**
        -: 2697:
        -: 2698:```c
        -: 2699:{
        -: 2700:  jerry_value_t value;
        -: 2701:  ... // create or acquire value
        -: 2702:
        -: 2703:  if (jerry_value_is_number (value))
        -: 2704:  {
        -: 2705:    double raw_value = jerry_get_number_value (value);
        -: 2706:
        -: 2707:    ... // usage of raw value
        -: 2708:
        -: 2709:  }
        -: 2710:
        -: 2711:  jerry_release_value (value);
        -: 2712:}
        -: 2713:```
        -: 2714:
        -: 2715:**See also**
        -: 2716:
        -: 2717:- [jerry_value_is_number](#jerry_value_is_number)
        -: 2718:- [jerry_release_value](#jerry_release_value)
        -: 2719:
        -: 2720:
        -: 2721:# Functions for string values
        -: 2722:
        -: 2723:## jerry_get_string_size
        -: 2724:
        -: 2725:**Summary**
        -: 2726:
        -: 2727:Get the size of a string. Returns zero, if the value parameter is not a string.
        -: 2728:This is effectively the number of bytes required to store the string's characters.
        -: 2729:
        -: 2730:**Prototype**
        -: 2731:
        -: 2732:```c
        -: 2733:jerry_size_t
        -: 2734:jerry_get_string_size (const jerry_value_t value);
        -: 2735:```
        -: 2736:- `value` - api value
        -: 2737:- return value - number of bytes in the buffer needed to represent the string.
        -: 2738:
        -: 2739:**Example**
        -: 2740:
        -: 2741:```c
        -: 2742:{
        -: 2743:  const jerry_char_t char_array[] = "a string";
        -: 2744:  jerry_value_t string = jerry_create_string (char_array);
        -: 2745:
        -: 2746:  jerry_size_t string_size = jerry_get_string_size (string);
        -: 2747:
        -: 2748:  ... // usage of string_size
        -: 2749:
        -: 2750:  jerry_release_value (string);
        -: 2751:}
        -: 2752:```
        -: 2753:
        -: 2754:**See also**
        -: 2755:
        -: 2756:- [jerry_create_string](#jerry_create_string)
        -: 2757:- [jerry_get_string_length](#jerry_get_string_length)
        -: 2758:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 2759:
        -: 2760:
        -: 2761:## jerry_get_utf8_string_size
        -: 2762:
        -: 2763:**Summary**
        -: 2764:
        -: 2765:Get the size of an utf8-encoded string. Returns zero, if the value parameter is not a string.
        -: 2766:This is effectively the number of bytes required to store the utf8 encoded string's characters.
        -: 2767:
        -: 2768:*Note*: The difference from [jerry_get_string_size](#jerry_get_string_size) is that it returns with utf-8 string size
        -: 2769:instead of the cesu-8 string size.
        -: 2770:
        -: 2771:**Prototype**
        -: 2772:
        -: 2773:```c
        -: 2774:jerry_size_t
        -: 2775:jerry_get_utf8_string_size (const jerry_value_t value);
        -: 2776:```
        -: 2777:- `value` - api value
        -: 2778:- return value - number of bytes in the buffer needed to represent the utf8-encoded string.
        -: 2779:
        -: 2780:*New in version 2.0*.
        -: 2781:
        -: 2782:**Example**
        -: 2783:
        -: 2784:```c
        -: 2785:{
        -: 2786:  const jerry_char_t char_array[] = "a string";
        -: 2787:  jerry_value_t string = jerry_create_string (char_array);
        -: 2788:
        -: 2789:  jerry_size_t string_size = jerry_get_utf8_string_size (string);
        -: 2790:
        -: 2791:  ... // usage of string_size
        -: 2792:
        -: 2793:  jerry_release_value (string);
        -: 2794:}
        -: 2795:```
        -: 2796:
        -: 2797:**See also**
        -: 2798:
        -: 2799:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 2800:- [jerry_get_utf8_string_length](#jerry_get_utf8_string_length)
        -: 2801:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 2802:
        -: 2803:
        -: 2804:## jerry_get_string_length
        -: 2805:
        -: 2806:**Summary**
        -: 2807:
        -: 2808:Get the length of a string. Returns zero, if the value parameter is not a string.
        -: 2809:
        -: 2810:*Notes:*
        -: 2811:- The difference from [jerry_get_string_size](#jerry_get_string_size) is that it
        -: 2812:  returns the number of bytes used for the string.
        -: 2813:- This is **not** the number of bytes required to store the string.
        -: 2814:
        -: 2815:**Prototype**
        -: 2816:
        -: 2817:```c
        -: 2818:jerry_length_t
        -: 2819:jerry_get_string_length (const jerry_value_t value);
        -: 2820:```
        -: 2821:
        -: 2822:- `value` - api value
        -: 2823:- return value - number of characters in the string
        -: 2824:
        -: 2825:**Example**
        -: 2826:
        -: 2827:```c
        -: 2828:{
        -: 2829:  const jerry_char_t char_array[] = "a string";
        -: 2830:  jerry_value_t string = jerry_create_string (char_array);
        -: 2831:
        -: 2832:  jerry_length_t string_length = jerry_get_string_length (string);
        -: 2833:
        -: 2834:  ... // usage of string_length
        -: 2835:
        -: 2836:  jerry_release_value (string);
        -: 2837:}
        -: 2838:```
        -: 2839:
        -: 2840:**See also**
        -: 2841:
        -: 2842:- [jerry_create_string](#jerry_create_string)
        -: 2843:- [jerry_get_string_size](#jerry_get_string_size)
        -: 2844:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 2845:
        -: 2846:
        -: 2847:## jerry_get_utf8_string_length
        -: 2848:
        -: 2849:**Summary**
        -: 2850:
        -: 2851:Get the length of an UTF-8 encoded string. Returns zero, if the value parameter is not a string.
        -: 2852:
        -: 2853:*Notes*:
        -: 2854:- The difference from [jerry_get_string_length](#jerry_get_string_length) is that it
        -: 2855:  returns with utf-8 string length instead of the cesu-8 string length.
        -: 2856:- This is **not** the number of bytes required to store the string.
        -: 2857:
        -: 2858:**Prototype**
        -: 2859:
        -: 2860:```c
        -: 2861:jerry_length_t
        -: 2862:jerry_get_utf8_string_length (const jerry_value_t value);
        -: 2863:```
        -: 2864:
        -: 2865:- `value` - input string value
        -: 2866:- return value - number of characters in the string
        -: 2867:
        -: 2868:*New in version 2.0*.
        -: 2869:
        -: 2870:**Example**
        -: 2871:
        -: 2872:```c
        -: 2873:{
        -: 2874:  const jerry_char_t char_array[] = "a string";
        -: 2875:  jerry_value_t string = jerry_create_string_from_utf8 (char_array);
        -: 2876:
        -: 2877:  jerry_length_t string_length = jerry_get_utf8_string_length (string);
        -: 2878:
        -: 2879:  ... // usage of string_length
        -: 2880:
        -: 2881:  jerry_release_value (string);
        -: 2882:}
        -: 2883:```
        -: 2884:
        -: 2885:**See also**
        -: 2886:
        -: 2887:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 2888:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -: 2889:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 2890:
        -: 2891:
        -: 2892:## jerry_string_to_char_buffer
        -: 2893:
        -: 2894:**Summary**
        -: 2895:
        -: 2896:Copy the characters of a string into a specified cesu-8 buffer.
        -: 2897:The '\0' character could occur in the character buffer. Returns 0,
        -: 2898:if the value parameter is not a string or the buffer is not large
        -: 2899:enough for the whole string.
        -: 2900:
        -: 2901:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 2902:the number of valid bytes in the output buffer.
        -: 2903:
        -: 2904:*Note*: If the size of the string in jerry value is larger than the size of the
        -: 2905:target buffer, the copy will fail. To copy a substring the
        -: 2906:[jerry_substring_to_char_buffer](#jerry_substring_to_char_buffer) API function
        -: 2907:is recommended instead.
        -: 2908:
        -: 2909:
        -: 2910:**Prototype**
        -: 2911:
        -: 2912:```c
        -: 2913:jerry_size_t
        -: 2914:jerry_string_to_char_buffer (const jerry_value_t value,
        -: 2915:                             jerry_char_t *buffer_p,
        -: 2916:                             jerry_size_t buffer_size);
        -: 2917:```
        -: 2918:
        -: 2919:- `value` - input string value
        -: 2920:- `buffer_p` - pointer to output buffer
        -: 2921:- `buffer_size` - size of the buffer
        -: 2922:- return value - number of bytes, actually copied to the buffer
        -: 2923:
        -: 2924:**Example**
        -: 2925:
        -: 2926:[doctest]: # ()
        -: 2927:
        -: 2928:```c
        -: 2929:#include <stdio.h>
        -: 2930:#include <stdlib.h>
        -: 2931:#include "jerryscript.h"
        -: 2932:
        -: 2933:int
    #####: 2934:main (void)
        -: 2935:{
    #####: 2936:  jerry_init (JERRY_INIT_EMPTY);
        -: 2937:
        -: 2938:  jerry_value_t value;
        -: 2939:  // create or acquire value
    #####: 2940:  value = jerry_create_string ((const jerry_char_t *) "Demo string");
        -: 2941:
        -: 2942:  // Read the string into a byte buffer.
    #####: 2943:  jerry_size_t string_size = jerry_get_string_size (value);
    #####: 2944:  jerry_char_t *string_buffer_p = (jerry_char_t *) malloc (sizeof (jerry_char_t) * (string_size + 1));
        -: 2945:
    #####: 2946:  jerry_size_t copied_bytes = jerry_string_to_char_buffer (value, string_buffer_p, string_size);
    #####: 2947:  string_buffer_p[copied_bytes] = '\0';
        -: 2948:
    #####: 2949:  jerry_release_value (value);
        -: 2950:
    #####: 2951:  jerry_cleanup ();
        -: 2952:
    #####: 2953:  printf ("Test string: %s\n", string_buffer_p);
    #####: 2954:  free (string_buffer_p);
        -: 2955:
    #####: 2956:  return 0;
        -: 2957:}
        -: 2958:```
        -: 2959:
        -: 2960:**See also**
        -: 2961:
        -: 2962:- [jerry_create_string](#jerry_create_string)
        -: 2963:- [jerry_get_string_size](#jerry_get_string_size)
        -: 2964:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 2965:- [jerry_substring_to_char_buffer](#jerry_substring_to_char_buffer)
        -: 2966:
        -: 2967:
        -: 2968:## jerry_string_to_utf8_char_buffer
        -: 2969:
        -: 2970:**Summary**
        -: 2971:
        -: 2972:Copy the characters of a string into a specified utf-8 buffer.
        -: 2973:The '\0' character could occur in character buffer. Returns 0,
        -: 2974:if the value parameter is not a string or the buffer is not
        -: 2975:large enough for the whole string.
        -: 2976:
        -: 2977:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 2978:the number of valid bytes in the output buffer.
        -: 2979:
        -: 2980:*Note*: If the size of the string in jerry value is larger than the size of the
        -: 2981:target buffer, the copy will fail. To copy a substring the
        -: 2982:[jerry_substring_to_utf8_char_buffer](#jerry_substring_to_utf8_char_buffer)
        -: 2983:API function is recommended instead.
        -: 2984:
        -: 2985:**Prototype**
        -: 2986:
        -: 2987:```c
        -: 2988:jerry_size_t
        -: 2989:jerry_string_to_utf8_char_buffer (const jerry_value_t value,
        -: 2990:                                  jerry_char_t *buffer_p,
        -: 2991:                                  jerry_size_t buffer_size);
        -: 2992:```
        -: 2993:
        -: 2994:- `value` - input string value
        -: 2995:- `buffer_p` - pointer to output buffer
        -: 2996:- `buffer_size` - size of the buffer
        -: 2997:- return value - number of bytes, actually copied to the buffer
        -: 2998:
        -: 2999:*New in version 2.0*.
        -: 3000:
        -: 3001:**Example**
        -: 3002:
        -: 3003:```c
        -: 3004:{
        -: 3005:  jerry_value_t value;
        -: 3006:  ... // create or acquire value
        -: 3007:
        -: 3008:  jerry_size_t req_sz = jerry_get_utf8_string_size (value);
        -: 3009:  jerry_char_t str_buf_p[req_sz];
        -: 3010:
        -: 3011:  jerry_size_t bytes_copied = jerry_string_to_utf8_char_buffer (value, str_buf_p, req_sz);
        -: 3012:
        -: 3013:  jerry_release_value (value);
        -: 3014:}
        -: 3015:```
        -: 3016:
        -: 3017:**See also**
        -: 3018:
        -: 3019:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 3020:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -: 3021:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 3022:- [jerry_substring_to_utf8_char_buffer](#jerry_substring_to_utf8_char_buffer)
        -: 3023:
        -: 3024:
        -: 3025:## jerry_substring_to_char_buffer
        -: 3026:
        -: 3027:**Summary**
        -: 3028:
        -: 3029:Copy the characters of a cesu-8 encoded substring into a specified buffer.
        -: 3030:The '\0' character could occur in character buffer. Returns 0, if the value
        -: 3031:parameter is not a string. It will extract the substring between the
        -: 3032:specified start position and the end position (or the end of the string,
        -: 3033:whichever comes first).
        -: 3034:
        -: 3035:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 3036:the number of valid bytes in the output buffer.
        -: 3037:
        -: 3038:**Prototype**
        -: 3039:
        -: 3040:```c
        -: 3041:jerry_size_t
        -: 3042:jerry_substring_to_char_buffer (const jerry_value_t value,
        -: 3043:                                jerry_length_t start_pos,
        -: 3044:                                jerry_length_t end_pos,
        -: 3045:                                jerry_char_t *buffer_p,
        -: 3046:                                jerry_size_t buffer_size);
        -: 3047:```
        -: 3048:
        -: 3049:- `value` - input string value
        -: 3050:- `start_pos` - position of the first character
        -: 3051:- `end_pos` - position of the last character
        -: 3052:- `buffer_p` - pointer to output buffer
        -: 3053:- `buffer_size` - size of the buffer
        -: 3054:- return value - number of bytes, actually copied to the buffer
        -: 3055:
        -: 3056:*New in version 2.0*.
        -: 3057:
        -: 3058:**Example**
        -: 3059:
        -: 3060:```c
        -: 3061:{
        -: 3062:  jerry_value_t value;
        -: 3063:  ... // create or acquire value
        -: 3064:
        -: 3065:  jerry_size_t req_sz = jerry_get_string_size (value);
        -: 3066:  jerry_char_t str_buf_p[req_sz];
        -: 3067:  jerry_length_t start_pos = 0;
        -: 3068:  jerry_length_t end_pos = jerry_get_string_length (value);
        -: 3069:
        -: 3070:  jerry_substring_to_char_buffer (value, start_pos, end_pos, str_buf_p, req_sz);
        -: 3071:
        -: 3072:  jerry_release_value (value);
        -: 3073:}
        -: 3074:```
        -: 3075:
        -: 3076:**See also**
        -: 3077:
        -: 3078:- [jerry_create_string](#jerry_create_string)
        -: 3079:- [jerry_get_string_size](#jerry_get_string_size)
        -: 3080:- [jerry_get_string_length](#jerry_get_string_length)
        -: 3081:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 3082:
        -: 3083:
        -: 3084:## jerry_substring_to_utf8_char_buffer
        -: 3085:
        -: 3086:**Summary**
        -: 3087:
        -: 3088:Copy the characters of an utf-8 encoded substring into a specified buffer.
        -: 3089:The '\0' character could occur in character buffer. Returns 0, if the value
        -: 3090:parameter is not a string. It will extract the substring between the specified
        -: 3091:start position and the end position (or the end of the string, whichever
        -: 3092:comes first).
        -: 3093:
        -: 3094:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 3095:the number of valid bytes in the output buffer.
        -: 3096:
        -: 3097:**Prototype**
        -: 3098:
        -: 3099:```c
        -: 3100:jerry_size_t
        -: 3101:jerry_substring_to_utf8_char_buffer (const jerry_value_t value,
        -: 3102:                                     jerry_length_t start_pos,
        -: 3103:                                     jerry_length_t end_pos,
        -: 3104:                                     jerry_char_t *buffer_p,
        -: 3105:                                     jerry_size_t buffer_size);
        -: 3106:```
        -: 3107:
        -: 3108:- `value` - input string value
        -: 3109:- `start_pos` - position of the first character
        -: 3110:- `end_pos` - position of the last character
        -: 3111:- `buffer_p` - pointer to output buffer
        -: 3112:- `buffer_size` - size of the buffer
        -: 3113:- return value - number of bytes, actually copied to the buffer
        -: 3114:
        -: 3115:*New in version 2.0*.
        -: 3116:
        -: 3117:**Example**
        -: 3118:
        -: 3119:```c
        -: 3120:{
        -: 3121:  jerry_value_t value;
        -: 3122:  ... // create or acquire value
        -: 3123:
        -: 3124:  jerry_size_t req_sz = jerry_get_utf8_string_size (value);
        -: 3125:  jerry_char_t str_buf_p[req_sz];
        -: 3126:  jerry_length_t start_pos = 0;
        -: 3127:  jerry_length_t end_pos = jerry_get_utf8_string_length (value);
        -: 3128:
        -: 3129:  jerry_substring_to_utf8_char_buffer (value, start_pos, end_pos, str_buf_p, req_sz);
        -: 3130:
        -: 3131:  jerry_release_value (value);
        -: 3132:}
        -: 3133:```
        -: 3134:
        -: 3135:**See also**
        -: 3136:
        -: 3137:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 3138:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -: 3139:- [jerry_get_utf8_string_length](#jerry_get_utf8_string_length)
        -: 3140:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 3141:
        -: 3142:
        -: 3143:# Functions for array object values
        -: 3144:
        -: 3145:## jerry_get_array_length
        -: 3146:
        -: 3147:**Summary**
        -: 3148:
        -: 3149:Get length of an array object. Returns zero, if the given parameter is not an array object.
        -: 3150:
        -: 3151:**Prototype**
        -: 3152:
        -: 3153:```c
        -: 3154:uint32_t
        -: 3155:jerry_get_array_length (const jerry_value_t value);
        -: 3156:```
        -: 3157:
        -: 3158:- `value` - input array value
        -: 3159:- return value - length of the given array
        -: 3160:
        -: 3161:**Example**
        -: 3162:
        -: 3163:```c
        -: 3164:{
        -: 3165:  jerry_value_t value;
        -: 3166:  ... // create or acquire value
        -: 3167:
        -: 3168:  uint32_t len = jerry_get_array_length (value);
        -: 3169:
        -: 3170:  jerry_release_value (value);
        -: 3171:}
        -: 3172:```
        -: 3173:
        -: 3174:**See also**
        -: 3175:
        -: 3176:- [jerry_create_array](#jerry_create_array)
        -: 3177:
        -: 3178:
        -: 3179:# Converters of 'jerry_value_t'
        -: 3180:
        -: 3181:Functions for converting API values to another value type.
        -: 3182:
        -: 3183:## jerry_value_to_boolean
        -: 3184:
        -: 3185:**Summary**
        -: 3186:
        -: 3187:Call ToBoolean operation on the api value.
        -: 3188:
        -: 3189:**Prototype**
        -: 3190:
        -: 3191:```c
        -: 3192:bool
        -: 3193:jerry_value_to_boolean (const jerry_value_t value);
        -: 3194:```
        -: 3195:
        -: 3196:- `value` - api value
        -: 3197:- return value
        -: 3198:  - true, if the logical value is true
        -: 3199:  - false, otherwise
        -: 3200:
        -: 3201:**Example**
        -: 3202:
        -: 3203:```c
        -: 3204:{
        -: 3205:  jerry_value_t value;
        -: 3206:  ... // create or acquire value
        -: 3207:
        -: 3208:  bool b = jerry_value_to_boolean (value);
        -: 3209:
        -: 3210:  jerry_release_value (value);
        -: 3211:}
        -: 3212:
        -: 3213:```
        -: 3214:
        -: 3215:**See also**
        -: 3216:
        -: 3217:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 3218:
        -: 3219:## jerry_value_to_number
        -: 3220:
        -: 3221:**Summary**
        -: 3222:
        -: 3223:Call ToNumber operation on the api value.
        -: 3224:
        -: 3225:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3226:is no longer needed.
        -: 3227:
        -: 3228:**Prototype**
        -: 3229:
        -: 3230:```c
        -: 3231:jerry_value_t
        -: 3232:jerry_value_to_number (const jerry_value_t value);
        -: 3233:```
        -: 3234:
        -: 3235:- `value` - api value
        -: 3236:- return value
        -: 3237:  - converted number value, if success
        -: 3238:  - thrown error, otherwise
        -: 3239:
        -: 3240:**Example**
        -: 3241:
        -: 3242:```c
        -: 3243:{
        -: 3244:  jerry_value_t value;
        -: 3245:  ... // create or acquire value
        -: 3246:
        -: 3247:  jerry_value_t number_value = jerry_value_to_number (value);
        -: 3248:
        -: 3249:  jerry_release_value (number_value);
        -: 3250:  jerry_release_value (value);
        -: 3251:}
        -: 3252:
        -: 3253:```
        -: 3254:
        -: 3255:**See also**
        -: 3256:
        -: 3257:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 3258:
        -: 3259:## jerry_value_to_object
        -: 3260:
        -: 3261:**Summary**
        -: 3262:
        -: 3263:Call ToObject operation on the api value.
        -: 3264:
        -: 3265:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3266:is no longer needed.
        -: 3267:
        -: 3268:**Prototype**
        -: 3269:
        -: 3270:```c
        -: 3271:jerry_value_t
        -: 3272:jerry_value_to_object (const jerry_value_t value);
        -: 3273:```
        -: 3274:
        -: 3275:- `value` - api value
        -: 3276:- return value
        -: 3277:  - converted object value, if success
        -: 3278:  - thrown error, otherwise
        -: 3279:
        -: 3280:**Example**
        -: 3281:
        -: 3282:```c
        -: 3283:{
        -: 3284:  jerry_value_t value;
        -: 3285:  ... // create or acquire value
        -: 3286:
        -: 3287:  jerry_value_t object_value = jerry_value_to_object (value);
        -: 3288:
        -: 3289:  jerry_release_value (object_value);
        -: 3290:  jerry_release_value (value);
        -: 3291:}
        -: 3292:```
        -: 3293:
        -: 3294:**See also**
        -: 3295:
        -: 3296:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 3297:
        -: 3298:## jerry_value_to_primitive
        -: 3299:
        -: 3300:**Summary**
        -: 3301:
        -: 3302:Call ToPrimitive operation on the api value.
        -: 3303:
        -: 3304:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3305:is no longer needed.
        -: 3306:
        -: 3307:**Prototype**
        -: 3308:
        -: 3309:```c
        -: 3310:jerry_value_t
        -: 3311:jerry_value_to_primitive (const jerry_value_t value);
        -: 3312:```
        -: 3313:
        -: 3314:- `value` - api value
        -: 3315:- return value
        -: 3316:  - converted primitive value, if success
        -: 3317:  - thrown error, otherwise
        -: 3318:
        -: 3319:**Example**
        -: 3320:
        -: 3321:```c
        -: 3322:{
        -: 3323:  jerry_value_t value;
        -: 3324:  ... // create or acquire value
        -: 3325:
        -: 3326:  jerry_value_t prim_value = jerry_value_to_primitive (value);
        -: 3327:
        -: 3328:  jerry_release_value (prim_value);
        -: 3329:  jerry_release_value (value);
        -: 3330:}
        -: 3331:```
        -: 3332:
        -: 3333:**See also**
        -: 3334:
        -: 3335:- [jerry_value_t](#jerry_value_t)
        -: 3336:
        -: 3337:## jerry_value_to_string
        -: 3338:
        -: 3339:**Summary**
        -: 3340:
        -: 3341:Call the ToString ecma builtin operation on the api value.
        -: 3342:
        -: 3343:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3344:is no longer needed.
        -: 3345:
        -: 3346:**Prototype**
        -: 3347:
        -: 3348:```c
        -: 3349:jerry_value_t
        -: 3350:jerry_value_to_string (const jerry_value_t value);
        -: 3351:```
        -: 3352:
        -: 3353:- `value` - api value
        -: 3354:- return value
        -: 3355:  - converted string value, if success
        -: 3356:  - thrown error, otherwise
        -: 3357:
        -: 3358:**Example**
        -: 3359:
        -: 3360:```c
        -: 3361:{
        -: 3362:  jerry_value_t value;
        -: 3363:  ... // create or acquire value
        -: 3364:
        -: 3365:  jerry_value_t string_value = jerry_value_to_string (value);
        -: 3366:
        -: 3367:  jerry_release_value (string_value);
        -: 3368:  jerry_release_value (value);
        -: 3369:}
        -: 3370:```
        -: 3371:
        -: 3372:**See also**
        -: 3373:
        -: 3374:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 3375:
        -: 3376:
        -: 3377:# Functions for promise objects
        -: 3378:
        -: 3379:These APIs all depend on the ES2015-subset profile (or on some build options).
        -: 3380:
        -: 3381:## jerry_get_promise_result
        -: 3382:
        -: 3383:**Summary**
        -: 3384:
        -: 3385:The function returns the result of a Promise object.
        -: 3386:
        -: 3387:*Notes*:
        -: 3388:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3389:  is no longer needed.
        -: 3390:- This API depends on a build option (`JERRY_ES2015_BUILTIN_PROMISE`) and can be checked
        -: 3391:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 3392:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3393:- The ES2015-subset profile enables this by default.
        -: 3394:
        -: 3395:
        -: 3396:**Prototype**
        -: 3397:
        -: 3398:```c
        -: 3399:jerry_value_t
        -: 3400:jerry_get_promise_result (const jerry_value_t promise);
        -: 3401:```
        -: 3402:
        -: 3403:- `promise` - the input Promise object.
        -: 3404:- return
        -: 3405:  - The result of the Promise.
        -: 3406:  - If the Promise is not resolved yet the result is the 'undefined' value.
        -: 3407:  - A TypeError is returned if the input argument was not a Promise object or
        -: 3408:    the Promise support was not built into the library.
        -: 3409:
        -: 3410:*New in version 2.2*.
        -: 3411:
        -: 3412:**Example**
        -: 3413:
        -: 3414:[doctest]: # (test="compile")
        -: 3415:
        -: 3416:```c
        -: 3417:#include <jerryscript.h>
        -: 3418:
        -: 3419:static void
    #####: 3420:example (void)
        -: 3421:{
        -: 3422:  // acquire/create a promise object.
    #####: 3423:  jerry_value_t promise = jerry_create_promise ();
        -: 3424:  {
        -: 3425:    // prepare the argumnent for the resolve or reject.
    #####: 3426:    jerry_value_t argument = jerry_create_number (33);
        -: 3427:
    #####: 3428:    jerry_value_t is_ok = jerry_resolve_or_reject_promise (promise,
        -: 3429:                                                           argument,
        -: 3430:                                                           true);
        -: 3431:    // 'is_ok' should be checked if it is an error or not.
        -: 3432:    // skipped in this example
    #####: 3433:    jerry_release_value (is_ok);
    #####: 3434:    jerry_release_value (argument);
        -: 3435:  }
        -: 3436:
    #####: 3437:  jerry_value_t promise_result = jerry_get_promise_result (promise);
        -: 3438:  // 'promise_result' is now the number 33.
        -: 3439:
    #####: 3440:  jerry_release_value (promise_result);
    #####: 3441:  jerry_release_value (promise);
    #####: 3442:}
        -: 3443:```
        -: 3444:
        -: 3445:**See also**
        -: 3446:
        -: 3447:- [jerry_create_promise](#jerry_create_promise)
        -: 3448:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 3449:
        -: 3450:## jerry_get_promise_state
        -: 3451:
        -: 3452:**Summary**
        -: 3453:
        -: 3454:*Notes*:
        -: 3455:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3456:  is no longer needed.
        -: 3457:- This API depends on a build option (`JERRY_ES2015_BUILTIN_PROMISE`) and can be checked
        -: 3458:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 3459:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3460:- The ES2015-subset profile enables this by default.
        -: 3461:
        -: 3462:
        -: 3463:**Prototype**
        -: 3464:
        -: 3465:```c
        -: 3466:jerry_promise_state_t
        -: 3467:jerry_get_promise_state (const jerry_value_t promise);
        -: 3468:```
        -: 3469:
        -: 3470:- `promise` - the input promise object.
        -: 3471:- return
        -: 3472:  - [jerry_promise_state_t](#jerry_promise_state_t)
        -: 3473:  - `JERRY_PROMISE_STATE_NONE` is returned if the input argument was not a promise object or
        -: 3474:    the Promise support was not built into the library.
        -: 3475:
        -: 3476:*New in version 2.2*.
        -: 3477:
        -: 3478:**Example**
        -: 3479:
        -: 3480:[doctest]: # (test="compile")
        -: 3481:
        -: 3482:```c
        -: 3483:#include <jerryscript.h>
        -: 3484:
        -: 3485:static void
    #####: 3486:example (void)
        -: 3487:{
        -: 3488:  // acquire/create a promise object.
    #####: 3489:  jerry_value_t promise = jerry_create_promise ();
        -: 3490:
    #####: 3491:  jerry_promise_state_t start_state = jerry_get_promise_state (promise);
        -: 3492:  // a Promise have a default state of JERRY_PROMISE_STATE_PENDING
        -: 3493:
        -: 3494:  {
        -: 3495:    // prepare the argumnent for the resolve or reject.
    #####: 3496:    jerry_value_t argument = jerry_create_number (33);
        -: 3497:
    #####: 3498:    jerry_value_t is_ok = jerry_resolve_or_reject_promise (promise,
        -: 3499:                                                           argument,
        -: 3500:                                                           true);
        -: 3501:    // 'is_ok' should be checked if it is an error or not.
        -: 3502:    // skipped in this example
    #####: 3503:    jerry_release_value (is_ok);
    #####: 3504:    jerry_release_value (argument);
        -: 3505:  }
        -: 3506:
    #####: 3507:  jerry_promise_state_t current_state = jerry_get_promise_state (promise);
        -: 3508:  // at this point the Promise should be in the JERRY_PROMISE_STATE_FULFILLED state.
        -: 3509:
    #####: 3510:  jerry_release_value (promise);
    #####: 3511:}
        -: 3512:```
        -: 3513:
        -: 3514:**See also**
        -: 3515:
        -: 3516:- [jerry_create_promise](#jerry_create_promise)
        -: 3517:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 3518:
        -: 3519:## jerry_resolve_or_reject_promise
        -: 3520:
        -: 3521:**Summary**
        -: 3522:
        -: 3523:Resolve or reject the promise with an argument.
        -: 3524:
        -: 3525:*Note*:
        -: 3526:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3527:  is no longer needed.
        -: 3528:- This API depends on a build option (`JERRY_ES2015_BUILTIN_PROMISE`) and can be checked
        -: 3529:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 3530:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3531:- The ES2015-subset profile enables this by default.
        -: 3532:
        -: 3533:
        -: 3534:**Prototype**
        -: 3535:
        -: 3536:```c
        -: 3537:jerry_value_t
        -: 3538:jerry_resolve_or_reject_promise (jerry_value_t promise,
        -: 3539:                                 jerry_value_t argument,
        -: 3540:                                 bool is_resolve)
        -: 3541:```
        -: 3542:
        -: 3543:- `promise` - the promise value
        -: 3544:- `argument` - the argument for resolve or reject
        -: 3545:- `is_resolve` - whether the promise should be resolved or rejected
        -: 3546:- return value
        -: 3547:  - undefined jerry value - resolve or reject successed
        -: 3548:  - jerry value with error flag - otherwise
        -: 3549:
        -: 3550:*New in version 2.0*.
        -: 3551:
        -: 3552:**Example**
        -: 3553:
        -: 3554:```c
        -: 3555:{
        -: 3556:  jerry_value_t promise = ... // acquire/create a promise object.
        -: 3557:
        -: 3558:  ...
        -: 3559:
        -: 3560:  bool is_resolve = ... // whether the promise should be resolved or rejected
        -: 3561:  jerry_value_t argument = ... // prepare the argumnent for the resolve or reject.
        -: 3562:
        -: 3563:  jerry_value_t is_ok = jerry_resolve_or_reject_promise (promise,
        -: 3564:                                                         argument,
        -: 3565:                                                         is_resolve);
        -: 3566:
        -: 3567:  if (jerry_value_is_error (is_ok))
        -: 3568:  {
        -: 3569:    // handle the error.
        -: 3570:  }
        -: 3571:
        -: 3572:  jerry_release_value (is_ok);
        -: 3573:  jerry_release_value (argument);
        -: 3574:  jerry_release_value (promise);
        -: 3575:}
        -: 3576:```
        -: 3577:
        -: 3578:**See also**
        -: 3579:
        -: 3580:- [jerry_release_value](#jerry_release_value)
        -: 3581:- [jerry_value_is_error](#jerry_value_is_error)
        -: 3582:
        -: 3583:# Functions for symbols
        -: 3584:
        -: 3585:These APIs all depend on the ES2015-subset profile (or on build options).
        -: 3586:
        -: 3587:## jerry_get_symbol_descriptive_string
        -: 3588:
        -: 3589:**Summary**
        -: 3590:
        -: 3591:Call the SymbolDescriptiveString ecma builtin operation on the API value.
        -: 3592:Based on ECMA 262 v6 19.4.3.2.1 this is in the form of `Symbol(<description>)`.
        -: 3593:
        -: 3594:*Notes*:
        -: 3595:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3596:  is no longer needed.
        -: 3597:- This API depends on a build option (`JERRY_ES2015_BUILTIN_SYMBOL`) and can be checked
        -: 3598:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 3599:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3600:- The ES2015-subset profile enables this by default.
        -: 3601:- If the symbol support is not enabled an error will be returned.
        -: 3602:
        -: 3603:**Prototype**
        -: 3604:
        -: 3605:```c
        -: 3606:jerry_value_t
        -: 3607:jerry_get_symbol_descriptive_string (const jerry_value_t value);
        -: 3608:```
        -: 3609:
        -: 3610:- `value` - symbol value
        -: 3611:- return value
        -: 3612:  - string value containing the symbol's descriptive string - if success
        -: 3613:  - thrown error, otherwise
        -: 3614:
        -: 3615:*New in version 2.0*.
        -: 3616:
        -: 3617:**Example**
        -: 3618:
        -: 3619:[doctest]: # ()
        -: 3620:
        -: 3621:```c
        -: 3622:#include "jerryscript.h"
        -: 3623:
        -: 3624:int
    #####: 3625:main (void)
        -: 3626:{
    #####: 3627:  jerry_init (JERRY_INIT_EMPTY);
        -: 3628:
    #####: 3629:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "foo");
    #####: 3630:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 3631:
    #####: 3632:  jerry_release_value (string_value);
        -: 3633:
    #####: 3634:  jerry_value_t symbol_desc_string = jerry_get_symbol_descriptive_string (symbol_value);
        -: 3635:
        -: 3636:  // usage of symbol_desc_string
        -: 3637:
    #####: 3638:  jerry_release_value (symbol_desc_string);
    #####: 3639:  jerry_release_value (symbol_value);
        -: 3640:
    #####: 3641:  jerry_cleanup ();
    #####: 3642:  return 0;
        -: 3643:}
        -: 3644:```
        -: 3645:
        -: 3646:
        -: 3647:# Acquire and release API values
        -: 3648:
        -: 3649:## jerry_acquire_value
        -: 3650:
        -: 3651:**Summary**
        -: 3652:
        -: 3653:Acquires the specified Jerry API value.
        -: 3654:
        -: 3655:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3656:is no longer needed.
        -: 3657:
        -: 3658:**Prototype**
        -: 3659:
        -: 3660:```c
        -: 3661:jerry_value_t
        -: 3662:jerry_acquire_value (jerry_value_t value);
        -: 3663:```
        -: 3664:
        -: 3665:- `value` - api value
        -: 3666:- return value - acquired value that may be used outside of the engine
        -: 3667:
        -: 3668:**Example**
        -: 3669:
        -: 3670:```c
        -: 3671:{
        -: 3672:  jerry_value_t object_value = jerry_create_object ();
        -: 3673:
        -: 3674:  jerry_value_t acquired_object = jerry_acquire_value (object_value);
        -: 3675:
        -: 3676:  jerry_release_value (object_value);
        -: 3677:
        -: 3678:  // acquired_object refers to the created object and makes it
        -: 3679:  // available after the release of 'object_value'
        -: 3680:
        -: 3681:  jerry_release_value (acquired_object);
        -: 3682:}
        -: 3683:```
        -: 3684:
        -: 3685:**See also**
        -: 3686:
        -: 3687:- [jerry_release_value](#jerry_release_value)
        -: 3688:- [jerry_value_t](#jerry_value_t)
        -: 3689:
        -: 3690:
        -: 3691:## jerry_release_value
        -: 3692:
        -: 3693:**Summary**
        -: 3694:
        -: 3695:Release specified Jerry API value.
        -: 3696:
        -: 3697:**Prototype**
        -: 3698:
        -: 3699:```c
        -: 3700:void
        -: 3701:jerry_release_value (jerry_value_t value);
        -: 3702:```
        -: 3703:
        -: 3704:- `value` - api value
        -: 3705:
        -: 3706:**Example**
        -: 3707:
        -: 3708:```c
        -: 3709:{
        -: 3710:  jerry_value_t object_value = jerry_create_object ();
        -: 3711:
        -: 3712:  ...
        -: 3713:
        -: 3714:  jerry_release_value (object_value);
        -: 3715:}
        -: 3716:```
        -: 3717:
        -: 3718:
        -: 3719:# Create API values
        -: 3720:
        -: 3721:Function for creating [API values](#jerry_value_t).
        -: 3722:
        -: 3723:*Note*: Every created API value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3724:is no longer needed.
        -: 3725:
        -: 3726:## jerry_create_array
        -: 3727:
        -: 3728:**Summary**
        -: 3729:
        -: 3730:Create an array object value.
        -: 3731:
        -: 3732:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3733:is no longer needed.
        -: 3734:
        -: 3735:**Prototype**
        -: 3736:
        -: 3737:```c
        -: 3738:jerry_value_t
        -: 3739:jerry_create_array (uint32_t size);
        -: 3740:```
        -: 3741:
        -: 3742: - `size` - size of array;
        -: 3743: - return value - value of the constructed array object
        -: 3744:
        -: 3745: **Example**
        -: 3746:
        -: 3747:```c
        -: 3748:{
        -: 3749:    jerry_value_t array = jerry_create_array (10);
        -: 3750:
        -: 3751:    ...
        -: 3752:
        -: 3753:    jerry_release_value (array);
        -: 3754:}
        -: 3755:```
        -: 3756:
        -: 3757:**See also**
        -: 3758:
        -: 3759:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 3760:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 3761:
        -: 3762:
        -: 3763:## jerry_create_arraybuffer
        -: 3764:
        -: 3765:**Summary**
        -: 3766:
        -: 3767:Create a jerry_value_t representing an ArrayBuffer object.
        -: 3768:
        -: 3769:*Note*:
        -: 3770:  - This API depends on the ES2015-subset profile.
        -: 3771:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 3772:    when it is no longer needed.
        -: 3773:
        -: 3774:**Prototype**
        -: 3775:
        -: 3776:```c
        -: 3777:jerry_value_t
        -: 3778:jerry_create_arraybuffer (jerry_length_t size);
        -: 3779:```
        -: 3780:
        -: 3781: - `size` - size of the ArrayBuffer to create **in bytes**
        -: 3782: - return value - the new ArrayBuffer as a `jerry_value_t`
        -: 3783:
        -: 3784:*New in version 2.0*.
        -: 3785:
        -: 3786:**Example**
        -: 3787:
        -: 3788:```c
        -: 3789:{
        -: 3790:  jerry_value_t buffer_value = jerry_create_arraybuffer (15);
        -: 3791:
        -: 3792:  ... // use the ArrayBuffer
        -: 3793:
        -: 3794:  jerry_release_value (buffer_value);
        -: 3795:}
        -: 3796:```
        -: 3797:
        -: 3798:**See also**
        -: 3799:
        -: 3800:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 3801:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 3802:- [jerry_value_is_arraybuffer](#jerry_value_is_arraybuffer)
        -: 3803:- [jerry_release_value](#jerry_release_value)
        -: 3804:
        -: 3805:
        -: 3806:## jerry_create_arraybuffer_external
        -: 3807:
        -: 3808:**Summary**
        -: 3809:
        -: 3810:Creates a jerry_value_t representing an ArrayBuffer object with
        -: 3811:user specified back-buffer.
        -: 3812:
        -: 3813:User must pass a buffer pointer which is at least `size` big.
        -: 3814:After the object is not needed the GC will call the `free_cb`
        -: 3815:so the user can release the buffer which was provided.
        -: 3816:
        -: 3817:*Note*:
        -: 3818:  - This API depends on the ES2015-subset profile.
        -: 3819:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 3820:    when it is no longer needed.
        -: 3821:
        -: 3822:**Prototype**
        -: 3823:
        -: 3824:```c
        -: 3825:jerry_value_t
        -: 3826:jerry_create_arraybuffer_external (const jerry_length_t size
        -: 3827:                                   uint8_t *buffer_p,
        -: 3828:                                   jerry_object_native_free_callback_t free_cb);
        -: 3829:```
        -: 3830:
        -: 3831:- `size` - size of the buffer to use **in bytes** (should not be 0)
        -: 3832:- `buffer_p` - the buffer used for the Array Buffer object (should not be a null pointer)
        -: 3833:- `free_cb` - the callback function called when the object is released
        -: 3834:- return value
        -: 3835:  - the new ArrayBuffer as a `jerry_value_t`
        -: 3836:  - if the `size` is zero or `buffer_p` is a null pointer this will return an empty ArrayBuffer.
        -: 3837:
        -: 3838:*New in version 2.0*.
        -: 3839:
        -: 3840:**Example**
        -: 3841:
        -: 3842:```c
        -: 3843:{
        -: 3844:  uint8_t buffer_p[15];
        -: 3845:  jerry_value_t buffer_value = jerry_create_arraybuffer_external (15, buffer_p, NULL);
        -: 3846:
        -: 3847:  ... // use the array buffer
        -: 3848:
        -: 3849:  jerry_release_value (buffer_value);
        -: 3850:}
        -: 3851:```
        -: 3852:
        -: 3853:**See also**
        -: 3854:
        -: 3855:- [jerry_get_arraybuffer_pointer](#jerry_get_arraybuffer_pointer)
        -: 3856:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 3857:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 3858:- [jerry_value_is_arraybuffer](#jerry_value_is_arraybuffer)
        -: 3859:- [jerry_release_value](#jerry_release_value)
        -: 3860:- [jerry_object_native_free_callback_t](#jerry_object_native_free_callback_t)
        -: 3861:
        -: 3862:
        -: 3863:## jerry_create_boolean
        -: 3864:
        -: 3865:**Summary**
        -: 3866:
        -: 3867:Create a jerry_value_t representing a boolean value from the given boolean parameter.
        -: 3868:
        -: 3869:**Prototype**
        -: 3870:
        -: 3871:```c
        -: 3872:jerry_value_t
        -: 3873:jerry_create_boolean (bool value);
        -: 3874:```
        -: 3875:
        -: 3876:- `value` - raw boolean value.
        -: 3877:- return value - a `jerry_value_t` created from the given boolean argument.
        -: 3878:
        -: 3879:**Example**
        -: 3880:
        -: 3881:```c
        -: 3882:{
        -: 3883:  jerry_value_t boolean_value = jerry_create_boolean (true);
        -: 3884:
        -: 3885:  ... // usage of the value
        -: 3886:
        -: 3887:  jerry_release_value (boolean_value);
        -: 3888:}
        -: 3889:```
        -: 3890:
        -: 3891:**See also**
        -: 3892:
        -: 3893:- [jerry_release_value](#jerry_release_value)
        -: 3894:
        -: 3895:
        -: 3896:## jerry_create_error
        -: 3897:
        -: 3898:**Summary**
        -: 3899:
        -: 3900:Create new JavaScript error object.
        -: 3901:
        -: 3902:Important! The `error_type` argument *must not be* `JERRY_ERROR_NONE`.
        -: 3903:Creating an error with no error type is not valid.
        -: 3904:
        -: 3905:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3906:is no longer needed.
        -: 3907:
        -: 3908:**Prototype**
        -: 3909:
        -: 3910:```c
        -: 3911:jerry_value_t
        -: 3912:jerry_create_error (jerry_error_t error_type,
        -: 3913:                    const jerry_char_t *message_p);
        -: 3914:```
        -: 3915:
        -: 3916:- `error_type` - type of error
        -: 3917:- `message_p` - value of 'message' property of constructed error object
        -: 3918:- return value - value of the constructed error object
        -: 3919:
        -: 3920:**Example**
        -: 3921:
        -: 3922:```c
        -: 3923:{
        -: 3924:  jerry_value_t error_obj = jerry_create_error (JERRY_ERROR_TYPE,
        -: 3925:                                                (const jerry_char_t *) "error");
        -: 3926:
        -: 3927:  ... // usage of error_obj
        -: 3928:
        -: 3929:
        -: 3930:  jerry_release_value (error_obj);
        -: 3931:}
        -: 3932:```
        -: 3933:
        -: 3934:**See also**
        -: 3935:
        -: 3936:- [jerry_value_is_error](#jerry_value_is_error)
        -: 3937:- [jerry_get_value_from_error](#jerry_get_value_from_error)
        -: 3938:- [jerry_create_error_from_value](#jerry_create_error_from_value)
        -: 3939:
        -: 3940:
        -: 3941:## jerry_create_error_sz
        -: 3942:
        -: 3943:**Summary**
        -: 3944:
        -: 3945:Create new JavaScript error object.
        -: 3946:
        -: 3947:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3948:is no longer needed.
        -: 3949:
        -: 3950:**Prototype**
        -: 3951:
        -: 3952:```c
        -: 3953:jerry_value_t
        -: 3954:jerry_create_error_sz (jerry_error_t error_type,
        -: 3955:                       const jerry_char_t *message_p,
        -: 3956:                       jerry_size_t message_size);
        -: 3957:```
        -: 3958:
        -: 3959:- `error_type` - type of the error
        -: 3960:- `message_p` - value of 'message' property of the constructed error object
        -: 3961:- `message_size` - size of the message in bytes
        -: 3962:- return value - value of the constructed error object
        -: 3963:
        -: 3964:**Example**
        -: 3965:
        -: 3966:```c
        -: 3967:{
        -: 3968:  const jerry_char_t message[] = "error";
        -: 3969:  jerry_value_t error_obj = jerry_create_error_sz (JERRY_ERROR_COMMON,
        -: 3970:                                                   message,
        -: 3971:                                                   sizeof (message) - 1);
        -: 3972:
        -: 3973:  ... // usage of error_obj
        -: 3974:
        -: 3975:  jerry_release_value (error_obj);
        -: 3976:}
        -: 3977:```
        -: 3978:
        -: 3979:**See also**
        -: 3980:
        -: 3981:- [jerry_create_error](#jerry_create_error)
        -: 3982:
        -: 3983:
        -: 3984:## jerry_create_dataview
        -: 3985:
        -: 3986:**Summary**
        -: 3987:
        -: 3988:Create new JavaScript DataView object.
        -: 3989:
        -: 3990:*Note*:
        -: 3991:  - This API depends on the ES2015-subset profile.
        -: 3992:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 3993:    when it is no longer needed.
        -: 3994:
        -: 3995:**Prototype**
        -: 3996:
        -: 3997:```c
        -: 3998:jerry_value_t
        -: 3999:jerry_create_dataview (const jerry_value_t array_buffer,
        -: 4000:                       const jerry_length_t byte_offset,
        -: 4001:                       const jerry_length_t byte_length)
        -: 4002:```
        -: 4003:
        -: 4004:- `array_buffer` - arrayBuffer to create DataView from
        -: 4005:- `byte_offset` - offset in bytes, to the first byte in the buffer
        -: 4006:- `byte_length` - number of elements in the byte array
        -: 4007:- return value
        -: 4008:  - value of the constructed DataView object - if success
        -: 4009:  - created error - otherwise
        -: 4010:
        -: 4011:*New in version 2.0*.
        -: 4012:
        -: 4013:**Example**
        -: 4014:
        -: 4015:[doctest]: # ()
        -: 4016:
        -: 4017:```c
        -: 4018:#include "jerryscript.h"
        -: 4019:
        -: 4020:int
    #####: 4021:main (void)
        -: 4022:{
    #####: 4023:  jerry_init (JERRY_INIT_EMPTY);
        -: 4024:
    #####: 4025:  jerry_value_t arraybuffer = jerry_create_arraybuffer (16);
    #####: 4026:  jerry_value_t dataview = jerry_create_dataview (arraybuffer, 0, 16);
        -: 4027:
        -: 4028:  // usage of dataview
        -: 4029:
    #####: 4030:  jerry_release_value (dataview);
    #####: 4031:  jerry_release_value (arraybuffer);
        -: 4032:
    #####: 4033:  jerry_cleanup ();
    #####: 4034:  return 0;
        -: 4035:}
        -: 4036:```
        -: 4037:
        -: 4038:**See also**
        -: 4039:
        -: 4040:- [jerry_value_is_dataview](#jerry_value_is_dataview)
        -: 4041:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -: 4042:
        -: 4043:
        -: 4044:## jerry_create_external_function
        -: 4045:
        -: 4046:**Summary**
        -: 4047:
        -: 4048:Create an external function object.
        -: 4049:
        -: 4050:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4051:is no longer needed.
        -: 4052:
        -: 4053:**Prototype**
        -: 4054:
        -: 4055:```c
        -: 4056:jerry_value_t
        -: 4057:jerry_create_external_function (jerry_external_handler_t handler_p);
        -: 4058:```
        -: 4059:
        -: 4060:- `handler_p` - pointer to native handler of the function object
        -: 4061:- return value - value of the constructed function object
        -: 4062:
        -: 4063:**Example**
        -: 4064:
        -: 4065:[doctest]: # ()
        -: 4066:
        -: 4067:```c
        -: 4068:#include <stdio.h>
        -: 4069:#include <string.h>
        -: 4070:#include "jerryscript.h"
        -: 4071:
        -: 4072:static jerry_value_t
    #####: 4073:handler (const jerry_value_t function_obj,
        -: 4074:         const jerry_value_t this_val,
        -: 4075:         const jerry_value_t args_p[],
        -: 4076:         const jerry_length_t args_cnt)
        -: 4077:{
    #####: 4078:  printf ("native handler called!\n");
        -: 4079:
    #####: 4080:  return jerry_create_boolean (true);
        -: 4081:}
        -: 4082:
        -: 4083:int
    #####: 4084:main (void)
        -: 4085:{
    #####: 4086:  jerry_init (JERRY_INIT_EMPTY);
        -: 4087:
    #####: 4088:  jerry_value_t func_val = jerry_create_external_function (handler);
    #####: 4089:  jerry_value_t glob_obj = jerry_get_global_object ();
        -: 4090:
        -: 4091:  // after this, script can invoke the native handler through "handler_field (1, 2, 3);"
    #####: 4092:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "handler_field");
        -: 4093:  // set property and release the return value without any check
    #####: 4094:  jerry_release_value (jerry_set_property (glob_obj, prop_name, func_val));
    #####: 4095:  jerry_release_value (prop_name);
        -: 4096:
    #####: 4097:  jerry_release_value (func_val);
    #####: 4098:  jerry_release_value (glob_obj);
        -: 4099:
        -: 4100:  // Test the method by calling it
    #####: 4101:  const char *test_src = "handler_field ();";
    #####: 4102:  jerry_value_t ret_val = jerry_eval ((const jerry_char_t *) test_src,
        -: 4103:                                      strlen (test_src),
        -: 4104:                                      JERRY_PARSE_NO_OPTS);
        -: 4105:  // release the eval result
    #####: 4106:  jerry_release_value (ret_val);
    #####: 4107:  jerry_cleanup ();
    #####: 4108:  return 0;
        -: 4109:}
        -: 4110:```
        -: 4111:
        -: 4112:**See also**
        -: 4113:
        -: 4114:- [jerry_external_handler_t](#jerry_external_handler_t)
        -: 4115:- [jerry_set_property](#jerry_set_property)
        -: 4116:- [jerry_call_function](#jerry_call_function)
        -: 4117:
        -: 4118:
        -: 4119:## jerry_create_number
        -: 4120:
        -: 4121:**Summary**
        -: 4122:
        -: 4123:Creates a `jerry_value_t` representing a number value.
        -: 4124:
        -: 4125:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4126:is no longer needed.
        -: 4127:
        -: 4128:**Prototype**
        -: 4129:
        -: 4130:```c
        -: 4131:jerry_value_t
        -: 4132:jerry_create_number (double value);
        -: 4133:```
        -: 4134:
        -: 4135:- `value` - double value from which a `jerry_value_t` will be created
        -: 4136:- return value - a `jerry_value_t` created from the given double argument
        -: 4137:
        -: 4138:**Example**
        -: 4139:
        -: 4140:```c
        -: 4141:{
        -: 4142:  jerry_value_t number_value = jerry_create_number (3.14);
        -: 4143:
        -: 4144:  ... // usage of the value
        -: 4145:
        -: 4146:  jerry_release_value (number_value);
        -: 4147:}
        -: 4148:```
        -: 4149:
        -: 4150:**See also**
        -: 4151:
        -: 4152:- [jerry_release_value](#jerry_release_value)
        -: 4153:- [jerry_create_number_infinity](#jerry_create_number_infinity)
        -: 4154:- [jerry_create_number_nan](#jerry_create_number_nan)
        -: 4155:
        -: 4156:
        -: 4157:## jerry_create_number_infinity
        -: 4158:
        -: 4159:**Summary**
        -: 4160:
        -: 4161:Creates a `jerry_value_t` representing a positive or negative infinity value.
        -: 4162:
        -: 4163:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4164:is no longer needed.
        -: 4165:
        -: 4166:**Prototype**
        -: 4167:
        -: 4168:```c
        -: 4169:jerry_value_t
        -: 4170:jerry_create_number_infinity (bool sign);
        -: 4171:```
        -: 4172:
        -: 4173:- `sign` - true for negative Infinity and false for positive Infinity
        -: 4174:- return value - a `jerry_value_t` representing the infinity value
        -: 4175:
        -: 4176:**Example**
        -: 4177:
        -: 4178:```c
        -: 4179:{
        -: 4180:  jerry_value_t positive_inf_value = jerry_create_number_infinity (false);
        -: 4181:
        -: 4182:  ... // usage of the positive_inf_value
        -: 4183:
        -: 4184:  jerry_release_value (positive_inf_value);
        -: 4185:}
        -: 4186:```
        -: 4187:
        -: 4188:**See also**
        -: 4189:
        -: 4190:- [jerry_release_value](#jerry_release_value)
        -: 4191:- [jerry_create_number](#jerry_create_number)
        -: 4192:- [jerry_create_number_nan](#jerry_create_number_nan)
        -: 4193:
        -: 4194:
        -: 4195:## jerry_create_number_nan
        -: 4196:
        -: 4197:**Summary**
        -: 4198:
        -: 4199:Creates a `jerry_value_t` representing a not-a-number value.
        -: 4200:
        -: 4201:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4202:is no longer needed.
        -: 4203:
        -: 4204:**Prototype**
        -: 4205:
        -: 4206:```c
        -: 4207:jerry_value_t
        -: 4208:jerry_create_number_nan (void);
        -: 4209:```
        -: 4210:
        -: 4211:- return value - a `jerry_value_t` representing the not-a-number value
        -: 4212:
        -: 4213:**Example**
        -: 4214:
        -: 4215:```c
        -: 4216:{
        -: 4217:  jerry_value_t nan_value = jerry_create_number_nan ();
        -: 4218:
        -: 4219:  ... // usage of the nan_value
        -: 4220:
        -: 4221:  jerry_release_value (nan_value);
        -: 4222:}
        -: 4223:```
        -: 4224:
        -: 4225:**See also**
        -: 4226:
        -: 4227:- [jerry_release_value](#jerry_release_value)
        -: 4228:- [jerry_create_number](#jerry_create_number)
        -: 4229:- [jerry_create_number_infinity](#jerry_create_number_infinity)
        -: 4230:
        -: 4231:
        -: 4232:## jerry_create_null
        -: 4233:
        -: 4234:**Summary**
        -: 4235:
        -: 4236:Creates and returns a `jerry_value_t` with type null object.
        -: 4237:
        -: 4238:**Prototype**
        -: 4239:
        -: 4240:```c
        -: 4241:jerry_value_t
        -: 4242:jerry_create_null (void);
        -: 4243:```
        -: 4244:
        -: 4245:- return value - a `jerry_value_t` representing null.
        -: 4246:
        -: 4247:**Example**
        -: 4248:
        -: 4249:```c
        -: 4250:{
        -: 4251:  jerry_value_t null_value = jerry_create_null ();
        -: 4252:
        -: 4253:  ... // usage of the value
        -: 4254:
        -: 4255:  jerry_release_value (null_value);
        -: 4256:}
        -: 4257:```
        -: 4258:
        -: 4259:**See also**
        -: 4260:
        -: 4261:- [jerry_release_value](#jerry_release_value)
        -: 4262:
        -: 4263:
        -: 4264:## jerry_create_object
        -: 4265:
        -: 4266:**Summary**
        -: 4267:
        -: 4268:Create new JavaScript object, like with new Object().
        -: 4269:
        -: 4270:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4271:is no longer needed.
        -: 4272:
        -: 4273:**Prototype**
        -: 4274:
        -: 4275:```c
        -: 4276:jerry_value_t
        -: 4277:jerry_create_object (void);
        -: 4278:```
        -: 4279:
        -: 4280:- return value - value of the created object
        -: 4281:
        -: 4282:**Example**
        -: 4283:
        -: 4284:```c
        -: 4285:{
        -: 4286:  jerry_value_t object_value = jerry_create_object ();
        -: 4287:
        -: 4288:  ... // usage of object_value
        -: 4289:
        -: 4290:  jerry_release_value (object_value);
        -: 4291:}
        -: 4292:```
        -: 4293:
        -: 4294:**See also**
        -: 4295:
        -: 4296:- [jerry_release_value](#jerry_release_value)
        -: 4297:
        -: 4298:
        -: 4299:## jerry_create_promise
        -: 4300:
        -: 4301:**Summary**
        -: 4302:
        -: 4303:Create an empty promise object which can be resolved or rejected later
        -: 4304:by calling jerry_resolve_or_reject_promise.
        -: 4305:
        -: 4306:*Note*:
        -: 4307:  - This API depends on the ES2015-subset profile.
        -: 4308:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 4309:    when it is no longer needed.
        -: 4310:
        -: 4311:**Prototype**
        -: 4312:
        -: 4313:```c
        -: 4314:jerry_value_t
        -: 4315:jerry_create_promise (void)
        -: 4316:```
        -: 4317:
        -: 4318:- return value - value of the newly created promise
        -: 4319:
        -: 4320:*New in version 2.0*.
        -: 4321:
        -: 4322:**Example**
        -: 4323:
        -: 4324:```c
        -: 4325:{
        -: 4326:  jerry_value_t p = jerry_create_promise ();
        -: 4327:
        -: 4328:  ...// usage of the promise
        -: 4329:
        -: 4330:  jerry_release_value (p);
        -: 4331:}
        -: 4332:```
        -: 4333:
        -: 4334:**See also**
        -: 4335:
        -: 4336:- [jerry_resolve_or_reject_promise](#jerry_resolve_or_reject_promise)
        -: 4337:- [jerry_release_value](#jerry_release_value)
        -: 4338:
        -: 4339:
        -: 4340:## jerry_create_proxy
        -: 4341:
        -: 4342:**Summary**
        -: 4343:
        -: 4344:Create a new Proxy object with the given target and handler.
        -: 4345:
        -: 4346:*Note*:
        -: 4347:  - This API depends on the ES2015-subset profile.
        -: 4348:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 4349:    when it is no longer needed.
        -: 4350:
        -: 4351:**Prototype**
        -: 4352:
        -: 4353:```c
        -: 4354:jerry_value_t
        -: 4355:jerry_create_proxy (const jerry_value_t target,
        -: 4356:                    const jerry_value_t handler)
        -: 4357:```
        -: 4358:
        -: 4359:- `target` - proxy target
        -: 4360:- `handler` - proxy handler
        -: 4361:- return thrown error - if the Proxy construction fails
        -: 4362:         value of the newly created proxy object - otherwise
        -: 4363:
        -: 4364:**Example**
        -: 4365:
        -: 4366:*New in version [next_version]*.
        -: 4367:
        -: 4368:[doctest]: # ()
        -: 4369:
        -: 4370:```c
        -: 4371:#include "jerryscript.h"
        -: 4372:
        -: 4373:int
    #####: 4374:main (void)
        -: 4375:{
    #####: 4376:  jerry_init (JERRY_INIT_EMPTY);
        -: 4377:
    #####: 4378:  jerry_value_t target = jerry_create_object ();
    #####: 4379:  jerry_value_t handler = jerry_create_object ();
    #####: 4380:  jerry_value_t proxy = jerry_create_proxy (target, handler);
        -: 4381:
    #####: 4382:  jerry_release_value (target);
    #####: 4383:  jerry_release_value (handler);
        -: 4384:
        -: 4385:  // usage of the proxy
        -: 4386:
    #####: 4387:  jerry_release_value (proxy);
        -: 4388:
    #####: 4389:  jerry_cleanup ();
        -: 4390:}
        -: 4391:```
        -: 4392:
        -: 4393:**See also**
        -: 4394:
        -: 4395:- [jerry_value_is_proxy](#jerry_value_is_proxy)
        -: 4396:- [jerry_release_value](#jerry_release_value)
        -: 4397:
        -: 4398:
        -: 4399:## jerry_create_string
        -: 4400:
        -: 4401:**Summary**
        -: 4402:
        -: 4403:Create string from a valid CESU8 string.
        -: 4404:
        -: 4405:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4406:is no longer needed.
        -: 4407:
        -: 4408:**Prototype**
        -: 4409:
        -: 4410:```c
        -: 4411:jerry_value_t
        -: 4412:jerry_create_string (const jerry_char_t *str_p);
        -: 4413:```
        -: 4414:
        -: 4415:- `str_p` - non-null pointer to string
        -: 4416:- return value - value of the created string
        -: 4417:
        -: 4418:**Example**
        -: 4419:
        -: 4420:```c
        -: 4421:{
        -: 4422:  const jerry_char_t char_array[] = "a string";
        -: 4423:  jerry_value_t string_value  = jerry_create_string (char_array);
        -: 4424:
        -: 4425:  ... // usage of string_value
        -: 4426:
        -: 4427:  jerry_release_value (string_value);
        -: 4428:}
        -: 4429:```
        -: 4430:
        -: 4431:**See also**
        -: 4432:
        -: 4433:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 4434:- [jerry_create_string_sz](#jerry_create_string_sz)
        -: 4435:
        -: 4436:
        -: 4437:## jerry_create_string_sz
        -: 4438:
        -: 4439:**Summary**
        -: 4440:
        -: 4441:Create string from a valid CESU8 string.
        -: 4442:
        -: 4443:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4444:is no longer needed.
        -: 4445:
        -: 4446:**Prototype**
        -: 4447:
        -: 4448:```c
        -: 4449:jerry_value_t
        -: 4450:jerry_create_string_sz (const jerry_char_t *str_p,
        -: 4451:                        jerry_size_t str_size)
        -: 4452:```
        -: 4453:
        -: 4454:- `str_p` - non-null pointer to string
        -: 4455:- `str_size` - size of the string
        -: 4456:- return value - value of the created string
        -: 4457:
        -: 4458:**Example**
        -: 4459:
        -: 4460:```c
        -: 4461:{
        -: 4462:  const jerry_char_t char_array[] = "a string";
        -: 4463:  jerry_value_t string_value  = jerry_create_string_sz (char_array,
        -: 4464:                                                        sizeof (char_array) - 1);
        -: 4465:
        -: 4466:  ... // usage of string_value
        -: 4467:
        -: 4468:  jerry_release_value (string_value);
        -: 4469:}
        -: 4470:
        -: 4471:```
        -: 4472:
        -: 4473:**See also**
        -: 4474:
        -: 4475:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 4476:- [jerry_create_string](#jerry_create_string)
        -: 4477:
        -: 4478:
        -: 4479:## jerry_create_string_from_utf8
        -: 4480:
        -: 4481:**Summary**
        -: 4482:
        -: 4483:Create string from a valid UTF8 string.
        -: 4484:
        -: 4485:*Note*:
        -: 4486: - The difference from [jerry_create_string](#jerry_create_string) is that it accepts utf-8 string instead of cesu-8 string.
        -: 4487: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4488:is no longer needed.
        -: 4489:
        -: 4490:**Prototype**
        -: 4491:
        -: 4492:```c
        -: 4493:jerry_value_t
        -: 4494:jerry_create_string_from_utf8 (const jerry_char_t *str_p);
        -: 4495:```
        -: 4496:
        -: 4497:- `str_p` - non-null pointer to string
        -: 4498:- return value - value of the created string
        -: 4499:
        -: 4500:*New in version 2.0*.
        -: 4501:
        -: 4502:**Example**
        -: 4503:
        -: 4504:```c
        -: 4505:{
        -: 4506:  const jerry_char_t char_array[] = "a string";
        -: 4507:  jerry_value_t string_value  = jerry_create_string_from_utf8 (char_array);
        -: 4508:
        -: 4509:  ... // usage of string_value
        -: 4510:
        -: 4511:  jerry_release_value (string_value);
        -: 4512:}
        -: 4513:```
        -: 4514:
        -: 4515:**See also**
        -: 4516:
        -: 4517:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 4518:- [jerry_create_string_sz_from_utf8](#jerry_create_string_sz_from_utf8)
        -: 4519:
        -: 4520:
        -: 4521:## jerry_create_string_sz_from_utf8
        -: 4522:
        -: 4523:**Summary**
        -: 4524:
        -: 4525:Create string from a valid UTF8 string.
        -: 4526:
        -: 4527:*Note*:
        -: 4528: - The difference from [jerry_create_string_sz](#jerry_create_string_sz) is that it accepts utf-8 string instead of cesu-8 string.
        -: 4529: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4530:is no longer needed.
        -: 4531:
        -: 4532:**Prototype**
        -: 4533:
        -: 4534:```c
        -: 4535:jerry_value_t
        -: 4536:jerry_create_string_sz_from_utf8 (const jerry_char_t *str_p,
        -: 4537:                                  jerry_size_t str_size)
        -: 4538:```
        -: 4539:
        -: 4540:- `str_p` - non-null pointer to string
        -: 4541:- `str_size` - size of the string
        -: 4542:- return value - value of the created string
        -: 4543:
        -: 4544:*New in version 2.0*.
        -: 4545:
        -: 4546:**Example**
        -: 4547:
        -: 4548:```c
        -: 4549:{
        -: 4550:  const jerry_char_t char_array[] = "a string";
        -: 4551:  jerry_value_t string_value  = jerry_create_string_sz_from_utf8 (char_array,
        -: 4552:                                                                  sizeof (char_array) - 1);
        -: 4553:
        -: 4554:  ... // usage of string_value
        -: 4555:
        -: 4556:  jerry_release_value (string_value);
        -: 4557:}
        -: 4558:
        -: 4559:```
        -: 4560:
        -: 4561:**See also**
        -: 4562:
        -: 4563:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 4564:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 4565:
        -: 4566:
        -: 4567:## jerry_create_symbol
        -: 4568:
        -: 4569:**Summary**
        -: 4570:
        -: 4571:Create symbol from an API value.
        -: 4572:
        -: 4573:*Note*:
        -: 4574:  - The given argument is converted to string. This operation can throw an error.
        -: 4575:  - This API depends on the ES2015-subset profile.
        -: 4576:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 4577:    when it is no longer needed.
        -: 4578:
        -: 4579:**Prototype**
        -: 4580:
        -: 4581:```c
        -: 4582:jerry_value_t
        -: 4583:jerry_create_symbol (const jerry_value_t value)
        -: 4584:```
        -: 4585:
        -: 4586:- `value` - API value
        -: 4587:- return value
        -: 4588:  - value of the created symbol, if success
        -: 4589:  - thrown error, otherwise
        -: 4590:
        -: 4591:*New in version 2.0*.
        -: 4592:
        -: 4593:**Example**
        -: 4594:
        -: 4595:[doctest]: # ()
        -: 4596:
        -: 4597:```c
        -: 4598:#include "jerryscript.h"
        -: 4599:
        -: 4600:int
    #####: 4601:main (void)
        -: 4602:{
    #####: 4603:  jerry_init (JERRY_INIT_EMPTY);
        -: 4604:
    #####: 4605:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "Symbol description string");
    #####: 4606:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 4607:
        -: 4608:  // The description value is no longer needed
    #####: 4609:  jerry_release_value (string_value);
        -: 4610:
        -: 4611:  // usage of symbol_value
        -: 4612:
    #####: 4613:  jerry_release_value (symbol_value);
        -: 4614:
    #####: 4615:  jerry_cleanup ();
        -: 4616:}
        -: 4617:```
        -: 4618:
        -: 4619:**See also**
        -: 4620:
        -: 4621:- [jerry_value_is_symbol](#jerry_value_is_symbol)
        -: 4622:- [jerry_release_value](#jerry_release_value)
        -: 4623:
        -: 4624:
        -: 4625:## jerry_create_regexp
        -: 4626:
        -: 4627:**Summary**
        -: 4628:
        -: 4629:Returns a `jerry_value_t` RegExp object or an error, if the construction of the object fails.
        -: 4630:Optional flags can be set using [jerry_regexp_flags_t](#jerry_regexp_flags_t).
        -: 4631:These flags can be combined together with the binary OR operator or used on their own as enum values.
        -: 4632:
        -: 4633:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4634:is no longer needed.
        -: 4635:
        -: 4636:**Prototype**
        -: 4637:```c
        -: 4638:jerry_value_t
        -: 4639:jerry_create_regexp (const jerry_char_t *pattern_p, uint16_t flags);
        -: 4640:```
        -: 4641:
        -: 4642:- `pattern_p` - the RegExp pattern as a zero-terminated UTF-8 string
        -: 4643:- `flags` - optional flags for the RegExp object, see [jerry_regexp_flags_t](#jerry_regexp_flags_t)
        -: 4644:- return value - the RegExp object as a `jerry_value_t`
        -: 4645:
        -: 4646:*New in version 2.0*.
        -: 4647:
        -: 4648:**Example**
        -: 4649:
        -: 4650:```c
        -: 4651:{
        -: 4652:  jerry_char_t pattern_p = "[cgt]gggtaaa|tttaccc[acg]";
        -: 4653:  uint16_t pattern_flags = JERRY_REGEXP_FLAG_IGNORE_CASE;
        -: 4654:
        -: 4655:  jerry_value_t regexp = jerry_create_regexp (pattern_p, pattern_flags);
        -: 4656:
        -: 4657:  ...
        -: 4658:
        -: 4659:  jerry_release_value (regexp);
        -: 4660:}
        -: 4661:```
        -: 4662:
        -: 4663:
        -: 4664:## jerry_create_regexp_sz
        -: 4665:
        -: 4666:**Summary**
        -: 4667:
        -: 4668:Returns a `jerry_value_t` RegExp object or an error, if the construction of the object fails.
        -: 4669:Optional flags can be set using [jerry_regexp_flags_t](#jerry_regexp_flags_t).
        -: 4670:These flags can be combined together with the binary OR operator or used on their own as enum values.
        -: 4671:
        -: 4672:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4673:is no longer needed.
        -: 4674:
        -: 4675:**Prototype**
        -: 4676:```c
        -: 4677:jerry_value_t
        -: 4678:jerry_create_regexp_sz (const jerry_char_t *pattern_p, jerry_size_t pattern_size, uint16_t flags);
        -: 4679:```
        -: 4680:
        -: 4681:- `pattern_p` - the RegExp pattern as a zero-terminated UTF-8 string
        -: 4682:- `pattern_size` - size of the `pattern`
        -: 4683:- `flags` - optional flags for the RegExp object, see [jerry_regexp_flags_t](#jerry_regexp_flags_t)
        -: 4684:- return value - the RegExp object as a `jerry_value_t`
        -: 4685:
        -: 4686:*New in version 2.0*.
        -: 4687:
        -: 4688:**Example**
        -: 4689:
        -: 4690:```c
        -: 4691:{
        -: 4692:  jerry_char_t pattern_p = "[cgt]gggtaaa|tttaccc[acg]";
        -: 4693:  jerry_size_t pattern_size = sizeof (pattern_p) - 1;
        -: 4694:  uint16_t pattern_flags = JERRY_REGEXP_FLAG_IGNORE_CASE;
        -: 4695:
        -: 4696:  jerry_value_t regexp = jerry_create_regexp_sz (pattern_p, pattern_size, pattern_flags);
        -: 4697:
        -: 4698:  ...
        -: 4699:
        -: 4700:  jerry_release_value (regexp);
        -: 4701:}
        -: 4702:```
        -: 4703:
        -: 4704:
        -: 4705:## jerry_create_typedarray
        -: 4706:
        -: 4707:**Summary**
        -: 4708:
        -: 4709:Create a jerry_value_t representing an TypedArray object.
        -: 4710:
        -: 4711:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 4712:and element count can be specified.
        -: 4713:
        -: 4714:*Notes*:
        -: 4715:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 4716:  when it is no longer needed.
        -: 4717:- This API depends on a build option (`JERRY_ES2015_BUILTIN_TYPEDARRAY`) and can be checked
        -: 4718:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 4719:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 4720:- The ES2015-subset profile enables this by default.
        -: 4721:
        -: 4722:**Prototype**
        -: 4723:
        -: 4724:```c
        -: 4725:jerry_value_t
        -: 4726:jerry_create_typedarray (jerry_typedarray_type_t type_name, jerry_length_t item_count);
        -: 4727:```
        -: 4728:
        -: 4729:- `type_name` - type of TypedArray to create
        -: 4730:- `item_count` - number of items in the new TypedArray
        -: 4731:- return value - the new TypedArray as a `jerry_value_t`
        -: 4732:
        -: 4733:*New in version 2.0*.
        -: 4734:
        -: 4735:**Example**
        -: 4736:
        -: 4737:```c
        -: 4738:{
        -: 4739:  jerry_value_t array = jerry_create_typedarray (JERRY_TYPEDARRAY_UINT16, 15);
        -: 4740:
        -: 4741:  ... // use the TypedArray
        -: 4742:
        -: 4743:  jerry_release_value (array);
        -: 4744:}
        -: 4745:```
        -: 4746:
        -: 4747:**See also**
        -: 4748:
        -: 4749:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 4750:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 4751:- [jerry_release_value](#jerry_release_value)
        -: 4752:
        -: 4753:
        -: 4754:## jerry_create_typedarray_for_arraybuffer
        -: 4755:
        -: 4756:**Summary**
        -: 4757:
        -: 4758:Create a jerry_value_t representing an TypedArray object using
        -: 4759:an already existing ArrayBuffer object.
        -: 4760:
        -: 4761:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 4762:and element count can be specified.
        -: 4763:
        -: 4764:The developer must ensure that the ArrayBuffer has the correct length for the given
        -: 4765:type of TypedArray otherwise an error is generated.
        -: 4766:
        -: 4767:The JavaScript equivalent of this function is: `new %TypedArray%(arraybuffer)` where `%TypedArray%` is
        -: 4768:one of the allowed TypedArray functions.
        -: 4769:
        -: 4770:*Notes*:
        -: 4771:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 4772:  when it is no longer needed.
        -: 4773:- This API depends on a build option (`JERRY_ES2015_BUILTIN_TYPEDARRAY`) and can be checked
        -: 4774:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 4775:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 4776:- The ES2015-subset profile enables this by default.
        -: 4777:
        -: 4778:**Prototype**
        -: 4779:
        -: 4780:```c
        -: 4781:jerry_value_t
        -: 4782:jerry_create_typedarray_for_arraybuffer (jerry_typedarray_type_t type_name,
        -: 4783:                                         const jerry_value_t arraybuffer);
        -: 4784:```
        -: 4785:
        -: 4786:- `type_name` - type of TypedArray to create
        -: 4787:- `arraybuffer` - the ArrayBuffer to use for the new TypedArray
        -: 4788:- return value
        -: 4789:  - the new TypedArray as a `jerry_value_t`
        -: 4790:  - Error if the ArrayBuffer does not have enough space for the given type of TypedArray
        -: 4791:
        -: 4792:*New in version 2.0*.
        -: 4793:
        -: 4794:**Example**
        -: 4795:
        -: 4796:```c
        -: 4797:{
        -: 4798:  jerry_value_t buffer = jerry_create_array_buffer (12 * 2);
        -: 4799:  jerry_value_t array = jerry_create_typedarray_for_arraybuffer (JERRY_TYPEDARRAY_UINT16, buffer);
        -: 4800:  jerry_release_value (buffer);
        -: 4801:
        -: 4802:  ... // use the TypedArray
        -: 4803:
        -: 4804:  jerry_release_value (array);
        -: 4805:}
        -: 4806:```
        -: 4807:
        -: 4808:**See also**
        -: 4809:
        -: 4810:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 4811:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 4812:- [jerry_release_value](#jerry_release_value)
        -: 4813:
        -: 4814:
        -: 4815:## jerry_create_typedarray_for_arraybuffer_sz
        -: 4816:
        -: 4817:**Summary**
        -: 4818:
        -: 4819:Create a jerry_value_t representing an TypedArray object using
        -: 4820:an already existing ArrayBuffer object and by specifying the byteOffset, and length properties.
        -: 4821:
        -: 4822:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 4823:and element count can be specified.
        -: 4824:
        -: 4825:The developer must ensure that the ArrayBuffer has the correct length for the given
        -: 4826:type of TypedArray otherwise an error is generated.
        -: 4827:
        -: 4828:The JavaScript equivalent of this function is: `new %TypedArray%(arraybuffer, byteOffset, length)` where `%TypedArray%` is
        -: 4829:one of the allowed TypedArray functions.
        -: 4830:
        -: 4831:*Notes*:
        -: 4832:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 4833:  when it is no longer needed.
        -: 4834:- This API depends on a build option (`JERRY_ES2015_BUILTIN_TYPEDARRAY`) and can be checked
        -: 4835:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 4836:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 4837:- The ES2015-subset profile enables this by default.
        -: 4838:
        -: 4839:**Prototype**
        -: 4840:
        -: 4841:```c
        -: 4842:jerry_value_t
        -: 4843:jerry_create_typedarray_for_arraybuffer_sz (jerry_typedarray_type_t type_name,
        -: 4844:                                            const jerry_value_t arraybuffer,
        -: 4845:                                            jerry_length_t byte_offset,
        -: 4846:                                            jerry_length_t length);
        -: 4847:```
        -: 4848:
        -: 4849:- `type_name` - type of TypedArray to create
        -: 4850:- `arraybuffer` - the ArrayBuffer to use for the new TypedArray
        -: 4851:- `byte_offset` - start offset to use for the ArrayBuffer
        -: 4852:- `length` - number of elements to used from the ArrayBuffer (this is not the same as the byteLength)
        -: 4853:- return value
        -: 4854:  - the new TypedArray as a `jerry_value_t`
        -: 4855:  - Error if the ArrayBuffer does not have enough space for the given type of TypedArray
        -: 4856:
        -: 4857:*New in version 2.0*.
        -: 4858:
        -: 4859:**Example**
        -: 4860:
        -: 4861:```c
        -: 4862:{
        -: 4863:  jerry_value_t buffer = jerry_create_array_buffer (12 * 2);
        -: 4864:  jerry_value_t array = jerry_create_typedarray_for_arraybuffer_sz (JERRY_TYPEDARRAY_UINT16, buffer, 4, 10);
        -: 4865:  jerry_release_value (buffer);
        -: 4866:
        -: 4867:  ... // use the TypedArray
        -: 4868:
        -: 4869:  jerry_release_value (array);
        -: 4870:}
        -: 4871:```
        -: 4872:
        -: 4873:**See also**
        -: 4874:
        -: 4875:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 4876:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 4877:- [jerry_release_value](#jerry_release_value)
        -: 4878:
        -: 4879:
        -: 4880:## jerry_create_container
        -: 4881:
        -: 4882:**Summary**
        -: 4883:
        -: 4884:Create a jerry_value_t representing a given type container object.
        -: 4885:
        -: 4886:*Notes*:
        -: 4887:- This method is expected to work the same way as the JavaScript Map constructor.
        -: 4888:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 4889:  when it is no longer needed.
        -: 4890:- This API depends on a build option (`JERRY_ES2015_BUILTIN_CONTAINER`) and can be checked
        -: 4891:  in runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -: 4892:  feature enum values.
        -: 4893:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 4894:- The ES2015-subset profile enables this by default.
        -: 4895:
        -: 4896:*New in version 2.3*.
        -: 4897:
        -: 4898:**Prototype**
        -: 4899:
        -: 4900:```c
        -: 4901:jerry_value_t
        -: 4902:jerry_create_container (jerry_container_type_t container_type,
        -: 4903:                        const jerry_value_t *arguments_list_p,
        -: 4904:                        jerry_length_t arguments_list_len);
        -: 4905:```
        -: 4906:
        -: 4907:- `container_type` - Type of the container to be created, see `jerry_container_type_t`.
        -: 4908:- `arguments_list_p` - The arguments passed to the container constructor to be inserted to the container.
        -: 4909:- `arguments_list_len` - The length of the above arguments.
        -: 4910:- return value - the new container object as a `jerry_value_t`
        -: 4911:
        -: 4912:**Example**
        -: 4913:
        -: 4914:[doctest]: # ()
        -: 4915:
        -: 4916:```c
        -: 4917:#include "jerryscript.h"
        -: 4918:
        -: 4919:int
    #####: 4920:main (void)
        -: 4921:{
    #####: 4922:  jerry_init (JERRY_INIT_EMPTY);
    #####: 4923:  jerry_char_t src[] = "[1,2,3,4].entries()";
    #####: 4924:  jerry_value_t iterable = jerry_eval (src, sizeof (src) - 1, JERRY_PARSE_NO_OPTS);
        -: 4925:
    #####: 4926:  jerry_value_t map = jerry_create_container (JERRY_CONTAINER_TYPE_MAP, &iterable, 1);
    #####: 4927:  jerry_release_value (iterable);
        -: 4928:
        -: 4929:  // use the Map
        -: 4930:
    #####: 4931:  jerry_release_value (map);
        -: 4932:
    #####: 4933:  jerry_cleanup ();
    #####: 4934:  return 0;
        -: 4935:}
        -: 4936:```
        -: 4937:
        -: 4938:**See also**
        -: 4939:
        -: 4940:- [jerry_container_type_t](#jerry_container_type_t)
        -: 4941:- [jerry_get_container_type](#jerry_get_container_type)
        -: 4942:
        -: 4943:
        -: 4944:## jerry_create_undefined
        -: 4945:
        -: 4946:**Summary**
        -: 4947:
        -: 4948:Creates a `jerry_value_t` representing an undefined value.
        -: 4949:
        -: 4950:**Prototype**
        -: 4951:
        -: 4952:```c
        -: 4953:jerry_value_t
        -: 4954:jerry_create_undefined (void);
        -: 4955:```
        -: 4956:
        -: 4957:- return value - value of undefined
        -: 4958:
        -: 4959:**Example**
        -: 4960:
        -: 4961:```c
        -: 4962:{
        -: 4963:  jerry_value_t undefined_value = jerry_create_undefined ();
        -: 4964:
        -: 4965:  ... // usage of the value
        -: 4966:
        -: 4967:  jerry_release_value (undefined_value);
        -: 4968:}
        -: 4969:```
        -: 4970:
        -: 4971:**See also**
        -: 4972:
        -: 4973:- [jerry_release_value](#jerry_release_value)
        -: 4974:
        -: 4975:
        -: 4976:# General API functions of JS objects
        -: 4977:
        -: 4978:## jerry_has_property
        -: 4979:
        -: 4980:**Summary**
        -: 4981:
        -: 4982:Checks whether the object or its prototype objects have the given property.
        -: 4983:
        -: 4984:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4985:is no longer needed.
        -: 4986:
        -: 4987:**Prototype**
        -: 4988:
        -: 4989:```c
        -: 4990:jerry_value_t
        -: 4991:jerry_has_property (const jerry_value_t obj_val,
        -: 4992:                    const jerry_value_t prop_name_val);
        -: 4993:```
        -: 4994:
        -: 4995:- `obj_val` - object value
        -: 4996:- `prop_name_val` - property name
        -: 4997:- return value - JavaScript value that evaluates to
        -: 4998:  -  raised error - if the operation fail
        -: 4999:  -  true/false API value  - depend on whether the property exists
        -: 5000:
        -: 5001:*Changed in version 2.0*: The return value type is now a JavaScript value and not a primitive boolean value.
        -: 5002:
        -: 5003:**Example**
        -: 5004:
        -: 5005:[doctest]: # ()
        -: 5006:
        -: 5007:```c
        -: 5008:#include "jerryscript.h"
        -: 5009:
        -: 5010:int
    #####: 5011:main (void)
        -: 5012:{
    #####: 5013:  jerry_init (JERRY_INIT_EMPTY);
        -: 5014:
    #####: 5015:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 5016:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "handler_field");
        -: 5017:
    #####: 5018:  jerry_value_t has_prop_js = jerry_has_property (global_object, prop_name);
    #####: 5019:  bool has_prop = jerry_get_boolean_value (has_prop_js);
        -: 5020:
    #####: 5021:  jerry_release_value (has_prop_js);
    #####: 5022:  jerry_release_value (prop_name);
    #####: 5023:  jerry_release_value (global_object);
        -: 5024:
    #####: 5025:  jerry_cleanup ();
        -: 5026:
    #####: 5027:  return 0;
        -: 5028:}
        -: 5029:```
        -: 5030:
        -: 5031:**See also**
        -: 5032:
        -: 5033:- [jerry_has_own_property](#jerry_has_own_property)
        -: 5034:- [jerry_delete_property](#jerry_delete_property)
        -: 5035:
        -: 5036:
        -: 5037:## jerry_has_own_property
        -: 5038:
        -: 5039:**Summary**
        -: 5040:
        -: 5041:Checks whether the object has the given property.
        -: 5042:
        -: 5043:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5044:is no longer needed.
        -: 5045:
        -: 5046:**Prototype**
        -: 5047:
        -: 5048:```c
        -: 5049:jerry_value_t
        -: 5050:jerry_has_own_property (const jerry_value_t obj_val,
        -: 5051:                        const jerry_value_t prop_name_val);
        -: 5052:```
        -: 5053:
        -: 5054:- `obj_val` - object value
        -: 5055:- `prop_name_val` - property name
        -: 5056:- return value - JavaScript value that evaluates to
        -: 5057:  -  raised error - if the operation fails
        -: 5058:  -  true/false API value - depend on whether the property exists
        -: 5059:
        -: 5060:*Changed in version 2.0*: The return value type is now a JavaScript value and not a primitive boolean value.
        -: 5061:
        -: 5062:**Example**
        -: 5063:
        -: 5064:[doctest]: # ()
        -: 5065:
        -: 5066:```c
        -: 5067:#include "jerryscript.h"
        -: 5068:
        -: 5069:int
    #####: 5070:main (void)
        -: 5071:{
    #####: 5072:  jerry_init (JERRY_INIT_EMPTY);
        -: 5073:
    #####: 5074:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 5075:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "handler_field");
        -: 5076:
    #####: 5077:  jerry_value_t has_prop_js = jerry_has_own_property (global_object, prop_name);
    #####: 5078:  bool has_prop = jerry_get_boolean_value (has_prop_js);
        -: 5079:
    #####: 5080:  jerry_release_value (has_prop_js);
    #####: 5081:  jerry_release_value (prop_name);
    #####: 5082:  jerry_release_value (global_object);
        -: 5083:
    #####: 5084:  jerry_cleanup ();
        -: 5085:
    #####: 5086:  return 0;
        -: 5087:}
        -: 5088:```
        -: 5089:
        -: 5090:**See also**
        -: 5091:
        -: 5092:- [jerry_has_property](#jerry_has_property)
        -: 5093:- [jerry_delete_property](#jerry_delete_property)
        -: 5094:
        -: 5095:
        -: 5096:## jerry_has_internal_property
        -: 5097:
        -: 5098:**Summary**
        -: 5099:
        -: 5100:Checks whether the object has the given internal property.
        -: 5101:
        -: 5102:*Note*:
        -: 5103: - Properties which were not created with [jerry_set_internal_property](#jerry_set_internal_property) are excluded
        -: 5104:   during the operation.
        -: 5105: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5106:is no longer needed.
        -: 5107:
        -: 5108:**Prototype**
        -: 5109:
        -: 5110:```c
        -: 5111:bool
        -: 5112:jerry_has_internal_property (const jerry_value_t obj_val,
        -: 5113:                             const jerry_value_t prop_name_val);
        -: 5114:```
        -: 5115:
        -: 5116:- `obj_val` - object value
        -: 5117:- `prop_name_val` - property name
        -: 5118:- return value
        -: 5119:  - true, if the property exists
        -: 5120:  - false, otherwise
        -: 5121:
        -: 5122:*New in version 2.2*.
        -: 5123:
        -: 5124:**Example**
        -: 5125:
        -: 5126:[doctest]: # ()
        -: 5127:
        -: 5128:```c
        -: 5129:#include "jerryscript.h"
        -: 5130:
        -: 5131:int
    #####: 5132:main (void)
        -: 5133:{
    #####: 5134:  jerry_init (JERRY_INIT_EMPTY);
        -: 5135:
    #####: 5136:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 5137:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
        -: 5138:
    #####: 5139:  bool has_internal_js_prop = jerry_has_internal_property (global_object, prop_name);
        -: 5140:
    #####: 5141:  jerry_release_value (prop_name);
    #####: 5142:  jerry_release_value (global_object);
        -: 5143:
    #####: 5144:  return 0;
        -: 5145:}
        -: 5146:```
        -: 5147:
        -: 5148:**See also**
        -: 5149:
        -: 5150:- [jerry_delete_internal_property](#jerry_delete_internal_property)
        -: 5151:- [jerry_get_internal_property](#jerry_get_internal_property)
        -: 5152:- [jerry_set_internal_property](#jerry_set_internal_property)
        -: 5153:
        -: 5154:
        -: 5155:## jerry_delete_property
        -: 5156:
        -: 5157:**Summary**
        -: 5158:
        -: 5159:Delete a property from an object.
        -: 5160:
        -: 5161:**Prototype**
        -: 5162:
        -: 5163:```c
        -: 5164:bool
        -: 5165:jerry_delete_property (const jerry_value_t obj_val,
        -: 5166:                       const jerry_value_t prop_name_val);
        -: 5167:```
        -: 5168:
        -: 5169:- `obj_val` - object value
        -: 5170:- `prop_name_val` - property name
        -: 5171:- return value
        -: 5172:  - true, if property was deleted successfully
        -: 5173:  - false, otherwise
        -: 5174:
        -: 5175:**Example**
        -: 5176:
        -: 5177:```c
        -: 5178:{
        -: 5179:  jerry_value_t global_object = jerry_get_global_object ();
        -: 5180:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
        -: 5181:
        -: 5182:  bool delete_result = jerry_delete_property (global_object, prop_name);
        -: 5183:  /* use "delete_result" */
        -: 5184:
        -: 5185:  jerry_release_value (prop_name);
        -: 5186:  jerry_release_value (global_object);
        -: 5187:}
        -: 5188:```
        -: 5189:
        -: 5190:**See also**
        -: 5191:
        -: 5192:- [jerry_has_property](#jerry_has_property)
        -: 5193:- [jerry_has_own_property](#jerry_has_own_property)
        -: 5194:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 5195:- [jerry_get_property](#jerry_get_property)
        -: 5196:
        -: 5197:
        -: 5198:## jerry_delete_property_by_index
        -: 5199:
        -: 5200:**Summary**
        -: 5201:
        -: 5202:Delete indexed property from the specified object.
        -: 5203:
        -: 5204:**Prototype**
        -: 5205:
        -: 5206:```c
        -: 5207:bool
        -: 5208:jerry_delete_property_by_index (const jerry_value_t obj_val,
        -: 5209:                                uint32_t index);
        -: 5210:```
        -: 5211:
        -: 5212:- `obj_val` - object value
        -: 5213:- `index` - index number
        -: 5214:- return value
        -: 5215:  - true, if property was deleted successfully
        -: 5216:  - false, otherwise
        -: 5217:
        -: 5218:*New in version 2.0*.
        -: 5219:
        -: 5220:**Example**
        -: 5221:
        -: 5222:```c
        -: 5223:{
        -: 5224:  jerry_value_t object;
        -: 5225:
        -: 5226:  ... // create or acquire object
        -: 5227:
        -: 5228:  bool delete_result = jerry_delete_property_by_index (object, 5);
        -: 5229:
        -: 5230:  jerry_release_value (object);
        -: 5231:}
        -: 5232:```
        -: 5233:
        -: 5234:**See also**
        -: 5235:
        -: 5236:- [jerry_has_property](#jerry_has_property)
        -: 5237:- [jerry_has_own_property](#jerry_has_own_property)
        -: 5238:- [jerry_delete_property](#jerry_delete_property)
        -: 5239:- [jerry_get_property](#jerry_get_property)
        -: 5240:- [jerry_set_property](#jerry_set_property)
        -: 5241:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 5242:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 5243:
        -: 5244:## jerry_delete_internal_property
        -: 5245:
        -: 5246:**Summary**
        -: 5247:
        -: 5248:Delete an internal property from an object.
        -: 5249:
        -: 5250:*Note*: Properties which were not created with [jerry_set_internal_property](#jerry_set_internal_property) are excluded
        -: 5251:        during the operation.
        -: 5252:
        -: 5253:**Prototype**
        -: 5254:
        -: 5255:```c
        -: 5256:bool
        -: 5257:jerry_delete_internal_property (const jerry_value_t obj_val,
        -: 5258:                                const jerry_value_t prop_name_val);
        -: 5259:```
        -: 5260:
        -: 5261:- `obj_val` - object value
        -: 5262:- `prop_name_val` - property name
        -: 5263:- return value
        -: 5264:  - true, if property was deleted successfully
        -: 5265:  - false, otherwise
        -: 5266:
        -: 5267:*New in version 2.2*.
        -: 5268:
        -: 5269:**Example**
        -: 5270:
        -: 5271:```c
        -: 5272:{
        -: 5273:  jerry_value_t global_object = jerry_get_global_object ();
        -: 5274:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
        -: 5275:
        -: 5276:  bool delete_result = jerry_delete_internal_property (global_object, prop_name);
        -: 5277:  /* use "delete_result" */
        -: 5278:
        -: 5279:  jerry_release_value (prop_name);
        -: 5280:  jerry_release_value (global_object);
        -: 5281:}
        -: 5282:```
        -: 5283:
        -: 5284:**See also**
        -: 5285:
        -: 5286:- [jerry_has_internal_property](#jerry_has_internal_property)
        -: 5287:- [jerry_get_internal_property](#jerry_get_internal_property)
        -: 5288:- [jerry_set_internal_property](#jerry_set_internal_property)
        -: 5289:
        -: 5290:
        -: 5291:## jerry_get_property
        -: 5292:
        -: 5293:**Summary**
        -: 5294:
        -: 5295:Get value of a property to the specified object with the given name.
        -: 5296:
        -: 5297:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5298:is no longer needed.
        -: 5299:
        -: 5300:**Prototype**
        -: 5301:
        -: 5302:```c
        -: 5303:jerry_value_t
        -: 5304:jerry_get_property (const jerry_value_t obj_val,
        -: 5305:                    const jerry_value_t prop_name_val);
        -: 5306:```
        -: 5307:
        -: 5308:- `obj_val` - object value
        -: 5309:- `prop_name_val` - property name
        -: 5310:- return value
        -: 5311:  - value of property, if success
        -: 5312:  - thrown error, otherwise
        -: 5313:
        -: 5314:**Example**
        -: 5315:
        -: 5316:[doctest]: # ()
        -: 5317:
        -: 5318:```c
        -: 5319:#include "jerryscript.h"
        -: 5320:
        -: 5321:int
    #####: 5322:main (void)
        -: 5323:{
    #####: 5324:  jerry_init (JERRY_INIT_EMPTY);
        -: 5325:
    #####: 5326:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 5327:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "Object");
        -: 5328:
    #####: 5329:  jerry_value_t prop_value = jerry_get_property (global_object, prop_name);
        -: 5330:
        -: 5331:  /* use "prop_value" then release it. */
        -: 5332:
    #####: 5333:  jerry_release_value (prop_value);
    #####: 5334:  jerry_release_value (prop_name);
    #####: 5335:  jerry_release_value (global_object);
        -: 5336:
    #####: 5337:  return 0;
        -: 5338:}
        -: 5339:```
        -: 5340:
        -: 5341:**See also**
        -: 5342:
        -: 5343:- [jerry_has_property](#jerry_has_property)
        -: 5344:- [jerry_has_own_property](#jerry_has_own_property)
        -: 5345:- [jerry_delete_property](#jerry_delete_property)
        -: 5346:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 5347:- [jerry_set_property](#jerry_set_property)
        -: 5348:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 5349:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 5350:
        -: 5351:
        -: 5352:## jerry_get_property_by_index
        -: 5353:
        -: 5354:**Summary**
        -: 5355:
        -: 5356:Get value by an index from the specified object.
        -: 5357:
        -: 5358:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5359:is no longer needed.
        -: 5360:
        -: 5361:**Prototype**
        -: 5362:
        -: 5363:```c
        -: 5364:jerry_value_t
        -: 5365:jerry_get_property_by_index (const jerry_value_t obj_val,
        -: 5366:                             uint32_t index);
        -: 5367:```
        -: 5368:
        -: 5369:- `obj_val` - object value
        -: 5370:- `index` - index number
        -: 5371:- return value
        -: 5372:  - stored value on the specified index, if success
        -: 5373:  - thrown exception, otherwise.
        -: 5374:
        -: 5375:**Example**
        -: 5376:
        -: 5377:```c
        -: 5378:{
        -: 5379:  jerry_value_t object;
        -: 5380:
        -: 5381:  ... // create or acquire object
        -: 5382:
        -: 5383:  jerry_value_t value = jerry_get_property_by_index (object, 5);
        -: 5384:
        -: 5385:  ...
        -: 5386:
        -: 5387:  jerry_release_value (value);
        -: 5388:  jerry_release_value (object);
        -: 5389:}
        -: 5390:```
        -: 5391:
        -: 5392:**See also**
        -: 5393:
        -: 5394:- [jerry_has_property](#jerry_has_property)
        -: 5395:- [jerry_has_own_property](#jerry_has_own_property)
        -: 5396:- [jerry_delete_property](#jerry_delete_property)
        -: 5397:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 5398:- [jerry_get_property](#jerry_get_property)
        -: 5399:- [jerry_set_property](#jerry_set_property)
        -: 5400:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 5401:
        -: 5402:## jerry_get_internal_property
        -: 5403:
        -: 5404:**Summary**
        -: 5405:
        -: 5406:Get value of an internal property to the specified object with the given name.
        -: 5407:
        -: 5408:*Note*:
        -: 5409: - Properties which were not created with [jerry_set_internal_property](#jerry_set_internal_property) are excluded
        -: 5410:   during the operation.
        -: 5411: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5412:   is no longer needed.
        -: 5413:
        -: 5414:**Prototype**
        -: 5415:
        -: 5416:```c
        -: 5417:jerry_value_t
        -: 5418:jerry_get_internal_property (const jerry_value_t obj_val,
        -: 5419:                             const jerry_value_t prop_name_val);
        -: 5420:```
        -: 5421:
        -: 5422:- `obj_val` - object value
        -: 5423:- `prop_name_val` - property name
        -: 5424:- return value
        -: 5425:  - value of property, if the internal property exists
        -: 5426:  - undefined value, if the, if the internal does not property exists
        -: 5427:  - thrown error, otherwise
        -: 5428:
        -: 5429:*New in version 2.2*.
        -: 5430:
        -: 5431:**Example**
        -: 5432:
        -: 5433:[doctest]: # ()
        -: 5434:
        -: 5435:```c
        -: 5436:#include "jerryscript.h"
        -: 5437:
        -: 5438:int
    #####: 5439:main (void)
        -: 5440:{
    #####: 5441:  jerry_init (JERRY_INIT_EMPTY);
        -: 5442:
    #####: 5443:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 5444:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
        -: 5445:
    #####: 5446:  jerry_value_t prop_value = jerry_get_internal_property (global_object, prop_name);
        -: 5447:
        -: 5448:  /* use "prop_value" then release it. */
        -: 5449:
    #####: 5450:  jerry_release_value (prop_value);
    #####: 5451:  jerry_release_value (prop_name);
    #####: 5452:  jerry_release_value (global_object);
        -: 5453:
    #####: 5454:  return 0;
        -: 5455:}
        -: 5456:```
        -: 5457:
        -: 5458:**See also**
        -: 5459:
        -: 5460:- [jerry_has_internal_property](#jerry_has_internal_property)
        -: 5461:- [jerry_delete_internal_property](#jerry_delete_internal_property)
        -: 5462:- [jerry_set_internal_property](#jerry_set_internal_property)
        -: 5463:
        -: 5464:
        -: 5465:## jerry_set_property
        -: 5466:
        -: 5467:**Summary**
        -: 5468:
        -: 5469:Set a property to the specified object with the given name.
        -: 5470:
        -: 5471:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5472:is no longer needed.
        -: 5473:
        -: 5474:**Prototype**
        -: 5475:
        -: 5476:```c
        -: 5477:jerry_value_t
        -: 5478:jerry_set_property (const jerry_value_t obj_val,
        -: 5479:                    const jerry_value_t prop_name_val,
        -: 5480:                    const jerry_value_t value_to_set)
        -: 5481:```
        -: 5482:
        -: 5483:- `obj_val` - object value
        -: 5484:- `prop_name_val` - property name
        -: 5485:- `value_to_set` - value to set
        -: 5486:- return value
        -: 5487:  - true, if success
        -: 5488:  - thrown error, otherwise
        -: 5489:
        -: 5490:**Example**
        -: 5491:
        -: 5492:```c
        -: 5493:{
        -: 5494:  jerry_value_t value_to_set;
        -: 5495:
        -: 5496:  ... // create or acquire value to set
        -: 5497:
        -: 5498:  jerry_value_t glob_obj = jerry_get_global_object ();
        -: 5499:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
        -: 5500:
        -: 5501:  jerry_value_t set_result = jerry_set_property (glob_obj, prop_name, value_to_set);
        -: 5502:
        -: 5503:  ... // check result of property set call
        -: 5504:
        -: 5505:  jerry_release_value (set_result);
        -: 5506:  jerry_release_value (prop_name);
        -: 5507:
        -: 5508:  ...
        -: 5509:
        -: 5510:  jerry_release_value (value_to_set);
        -: 5511:  jerry_release_value (glob_obj);
        -: 5512:}
        -: 5513:```
        -: 5514:
        -: 5515:**See also**
        -: 5516:
        -: 5517:- [jerry_has_property](#jerry_has_property)
        -: 5518:- [jerry_has_own_property](#jerry_has_own_property)
        -: 5519:- [jerry_delete_property](#jerry_delete_property)
        -: 5520:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 5521:- [jerry_get_property](#jerry_get_property)
        -: 5522:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 5523:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 5524:
        -: 5525:
        -: 5526:## jerry_set_property_by_index
        -: 5527:
        -: 5528:**Summary**
        -: 5529:
        -: 5530:Set indexed value in the specified object
        -: 5531:
        -: 5532:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5533:is no longer needed.
        -: 5534:
        -: 5535:**Prototype**
        -: 5536:
        -: 5537:```c
        -: 5538:jerry_value_t
        -: 5539:jerry_set_property_by_index (const jerry_value_t obj_val,
        -: 5540:                             uint32_t index,
        -: 5541:                             const jerry_value_t value_to_set);
        -: 5542:```
        -: 5543:
        -: 5544:- `obj_val` - object value
        -: 5545:- `index` - index number
        -: 5546:- `value_to_set` - value to set
        -: 5547:- return value
        -: 5548:  - true, if field value was set successfully
        -: 5549:  - thrown exception, otherwise
        -: 5550:
        -: 5551:**Example**
        -: 5552:
        -: 5553:```c
        -: 5554:{
        -: 5555:  jerry_value_t object;
        -: 5556:  jerry_value_t value_to_set;
        -: 5557:
        -: 5558:  ... // create or acquire object and value to set
        -: 5559:
        -: 5560:  jerry_value_t ret_val = jerry_set_property_by_index (object, 5, value_to_set);
        -: 5561:
        -: 5562:  ...
        -: 5563:
        -: 5564:  jerry_release_value (value_to_set);
        -: 5565:  jerry_release_value (ret_val);
        -: 5566:  jerry_release_value (object);
        -: 5567:}
        -: 5568:```
        -: 5569:
        -: 5570:**See also**
        -: 5571:
        -: 5572:- [jerry_has_property](#jerry_has_property)
        -: 5573:- [jerry_has_own_property](#jerry_has_own_property)
        -: 5574:- [jerry_delete_property](#jerry_delete_property)
        -: 5575:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 5576:- [jerry_get_property](#jerry_get_property)
        -: 5577:- [jerry_set_property](#jerry_set_property)
        -: 5578:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 5579:
        -: 5580:
        -: 5581:## jerry_set_internal_property
        -: 5582:
        -: 5583:**Summary**
        -: 5584:
        -: 5585:Set an internal property to the specified object with the given name.
        -: 5586:
        -: 5587:*Note*:
        -: 5588: - The property cannot be accessed from the JavaScript context, only from the public API.
        -: 5589: - It is different from [jerry_set_object_native_pointer](#jerry_set_object_native_pointer) in that any jerry API value
        -: 5590:   can be hidden from the JavaScript context, not only native pointers.
        -: 5591:
        -: 5592:**Prototype**
        -: 5593:
        -: 5594:```c
        -: 5595:bool
        -: 5596:jerry_set_internal_property (const jerry_value_t obj_val,
        -: 5597:                             const jerry_value_t prop_name_val,
        -: 5598:                             const jerry_value_t value_to_set)
        -: 5599:```
        -: 5600:
        -: 5601:- `obj_val` - object value
        -: 5602:- `prop_name_val` - property name
        -: 5603:- `value_to_set` - value to set
        -: 5604:- return value
        -: 5605:  - true, if success
        -: 5606:  - thrown error, otherwise
        -: 5607:
        -: 5608:*New in version 2.2*.
        -: 5609:
        -: 5610:**Example**
        -: 5611:
        -: 5612:[doctest]: # ()
        -: 5613:
        -: 5614:```c
        -: 5615:#include "jerryscript.h"
        -: 5616:
        -: 5617:int
    #####: 5618:main (void)
        -: 5619:{
    #####: 5620:  jerry_init (JERRY_INIT_EMPTY);
        -: 5621:
    #####: 5622:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 5623:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
    #####: 5624:  jerry_value_t value_to_set = jerry_create_number (5);
        -: 5625:
    #####: 5626:  bool set_result = jerry_set_internal_property (global_object, prop_name, value_to_set);
        -: 5627:
        -: 5628:  /* check the result of internal property set call */
        -: 5629:
    #####: 5630:  jerry_release_value (value_to_set);
    #####: 5631:  jerry_release_value (prop_name);
    #####: 5632:  jerry_release_value (global_object);
        -: 5633:
    #####: 5634:  return 0;
        -: 5635:}
        -: 5636:```
        -: 5637:
        -: 5638:**See also**
        -: 5639:
        -: 5640:- [jerry_has_internal_property](#jerry_has_internal_property)
        -: 5641:- [jerry_delete_internal_property](#jerry_delete_internal_property)
        -: 5642:- [jerry_get_internal_property](#jerry_get_internal_property)
        -: 5643:
        -: 5644:
        -: 5645:## jerry_init_property_descriptor_fields
        -: 5646:
        -: 5647:**Summary**
        -: 5648:
        -: 5649:Initialize property descriptor. This means that all fields in the `jerry_property_descriptor_t`
        -: 5650:struct will be set to zero or false depending on the field's type.
        -: 5651:
        -: 5652:**Prototype**
        -: 5653:
        -: 5654:```c
        -: 5655:void
        -: 5656:jerry_init_property_descriptor_fields (jerry_property_descriptor_t *prop_desc_p);
        -: 5657:```
        -: 5658:
        -: 5659:- `prop_desc_p` - pointer to property descriptor
        -: 5660:
        -: 5661:**Example**
        -: 5662:
        -: 5663:```c
        -: 5664:{
        -: 5665:  jerry_property_descriptor_t prop_desc;
        -: 5666:  jerry_init_property_descriptor_fields (&prop_desc);
        -: 5667:
        -: 5668:  ... // usage of prop_desc
        -: 5669:
        -: 5670:  jerry_free_property_descriptor_fields (&prop_desc);
        -: 5671:}
        -: 5672:```
        -: 5673:
        -: 5674:For a more complete example see [jerry_define_own_property](#jerry_define_own_property).
        -: 5675:
        -: 5676:**See also**
        -: 5677:
        -: 5678:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 5679:- [jerry_define_own_property](#jerry_define_own_property)
        -: 5680:- [jerry_get_own_property_descriptor](#jerry_get_own_property_descriptor)
        -: 5681:- [jerry_free_property_descriptor_fields](#jerry_free_property_descriptor_fields)
        -: 5682:
        -: 5683:
        -: 5684:## jerry_define_own_property
        -: 5685:
        -: 5686:**Summary**
        -: 5687:
        -: 5688:Define a property to the specified object with the given name.
        -: 5689:
        -: 5690:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5691:is no longer needed.
        -: 5692:
        -: 5693:**Prototype**
        -: 5694:
        -: 5695:```c
        -: 5696:jerry_value_t
        -: 5697:jerry_define_own_property (const jerry_value_t obj_val,
        -: 5698:                           const jerry_value_t prop_name_val,
        -: 5699:                           const jerry_property_descriptor_t *prop_desc_p);
        -: 5700:```
        -: 5701:
        -: 5702:- `obj_val` - target object where the property should be registered
        -: 5703:- `prop_name_val` - property name
        -: 5704:- `prop_desc_p` - pointer to property descriptor
        -: 5705:- return value
        -: 5706:  - true, if success
        -: 5707:  - thrown error, otherwise
        -: 5708:
        -: 5709:**Example**
        -: 5710:
        -: 5711:Registering a simple value property via the `jerry_define_own_property` method:
        -: 5712:
        -: 5713:[doctest]: # (name="02.API-REFERENCE-define-property.c")
        -: 5714:
        -: 5715:```c
        -: 5716:#include "jerryscript.h"
        -: 5717:
        -: 5718:int
    #####: 5719:main (void)
        -: 5720:{
    #####: 5721:  jerry_init (JERRY_INIT_EMPTY);
        -: 5722:
    #####: 5723:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -: 5724:
        -: 5725:  // configure the property
        -: 5726:  jerry_property_descriptor_t prop_desc;
    #####: 5727:  jerry_init_property_descriptor_fields (&prop_desc);
        -: 5728:
        -: 5729:  jerry_value_t value_to_set;
        -: 5730:
        -: 5731:  // create or acquire value to set
        -: 5732:  // For example:
    #####: 5733:  value_to_set = jerry_create_number (33);
        -: 5734:
        -: 5735:  // set the property descriptor fields:
        -: 5736:  // set the "is_value_defined" field to "true" to indicate the "value"
        -: 5737:  //  field should be used during the property registration.
    #####: 5738:  prop_desc.is_value_defined = true;
        -: 5739:
        -: 5740:  // set the "value" field to the number 33
    #####: 5741:  prop_desc.value = value_to_set;
        -: 5742:
        -: 5743:  // add the property as "my_prop" for the global object
    #####: 5744:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
    #####: 5745:  jerry_value_t return_value = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####: 5746:  if (jerry_value_is_error (return_value))
        -: 5747:  {
        -: 5748:    // there was an error
        -: 5749:  }
        -: 5750:
        -: 5751:  // if there was no error at this point the global object should have a "my_prop" property
        -: 5752:
    #####: 5753:  jerry_release_value (return_value);
    #####: 5754:  jerry_release_value (prop_name);
        -: 5755:
    #####: 5756:  jerry_free_property_descriptor_fields (&prop_desc);
    #####: 5757:  jerry_release_value (global_obj_val);
        -: 5758:
    #####: 5759:  jerry_cleanup ();
    #####: 5760:  return 0;
        -: 5761:}
        -: 5762:```
        -: 5763:
        -: 5764:
        -: 5765:Registering a getter/setter property via the `jerry_define_own_property` method:
        -: 5766:
        -: 5767:[doctest]: # (name="02.API-REFERENCE-define-property-getset.c")
        -: 5768:
        -: 5769:```c
        -: 5770:#include <stdio.h>
        -: 5771:#include <string.h>
        -: 5772:#include "jerryscript.h"
        -: 5773:
        -: 5774:static int counter = 0;
        -: 5775:
        -: 5776:static jerry_value_t
    #####: 5777:method_getter (const jerry_value_t this_obj,
        -: 5778:               const jerry_value_t func_obj,
        -: 5779:               const jerry_value_t args[],
        -: 5780:               const jerry_length_t argc)
        -: 5781:{
    #####: 5782:  counter++;
    #####: 5783:  printf("Getter called, returning: %d\n", counter);
        -: 5784:
    #####: 5785:  return jerry_create_number (counter);
        -: 5786:}
        -: 5787:
        -: 5788:static jerry_value_t
    #####: 5789:method_setter (const jerry_value_t this_obj,
        -: 5790:               const jerry_value_t func_obj,
        -: 5791:               const jerry_value_t args[],
        -: 5792:               const jerry_length_t argc)
        -: 5793:{
        -: 5794:  // Note: the arguments count and type should be checked
        -: 5795:  // in this example it is ommitted!
        -: 5796:
    #####: 5797:  double new_value = jerry_get_number_value (args[0]);
    #####: 5798:  counter = (int) new_value;
        -: 5799:
    #####: 5800:  printf("Setter called, setting: %d\n", counter);
        -: 5801:
    #####: 5802:  return jerry_create_undefined ();
        -: 5803:}
        -: 5804:
        -: 5805:int
    #####: 5806:main (void)
        -: 5807:{
    #####: 5808:  jerry_init (JERRY_INIT_EMPTY);
        -: 5809:
    #####: 5810:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -: 5811:
        -: 5812:  // configure the property
        -: 5813:  jerry_property_descriptor_t prop_desc;
    #####: 5814:  jerry_init_property_descriptor_fields (&prop_desc);
        -: 5815:
        -: 5816:  // set the property descriptor fields:
        -: 5817:
    #####: 5818:  prop_desc.is_get_defined = true;
    #####: 5819:  prop_desc.getter = jerry_create_external_function (method_getter);
    #####: 5820:  prop_desc.is_set_defined = true;
    #####: 5821:  prop_desc.setter = jerry_create_external_function (method_setter);
        -: 5822:
        -: 5823:  // add the property as "my_prop" for the global object
    #####: 5824:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
    #####: 5825:  jerry_value_t return_value = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####: 5826:  if (jerry_value_is_error (return_value))
        -: 5827:  {
        -: 5828:    // there was an error
        -: 5829:  }
        -: 5830:
        -: 5831:  // if there was no error at this point the global object should have a "my_prop" property
        -: 5832:
    #####: 5833:  jerry_release_value (return_value);
    #####: 5834:  jerry_release_value (prop_name);
        -: 5835:
    #####: 5836:  jerry_free_property_descriptor_fields (&prop_desc);
    #####: 5837:  jerry_release_value (global_obj_val);
        -: 5838:
        -: 5839:  // run an example js code to use the getter/setters
        -: 5840:
    #####: 5841:  const char *src_p = "this.my_prop; this.my_prop; this.my_prop = 4; this.my_prop";
    #####: 5842:  jerry_value_t eval_result = jerry_eval ((const jerry_char_t *) src_p, strlen (src_p), JERRY_PARSE_NO_OPTS);
        -: 5843:
        -: 5844:  // "eval_result" is the last result of "this.my_prop" that is "5" currently.
    #####: 5845:  double result_number = jerry_get_number_value (eval_result);
    #####: 5846:  printf("output: %lf\n", result_number);
        -: 5847:
    #####: 5848:  jerry_cleanup ();
        -: 5849:
    #####: 5850:  return result_number != 5.0;
        -: 5851:}
        -: 5852:```
        -: 5853:
        -: 5854:**See also**
        -: 5855:
        -: 5856:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 5857:- [jerry_init_property_descriptor_fields](#jerry_init_property_descriptor_fields)
        -: 5858:- [jerry_get_own_property_descriptor](#jerry_get_own_property_descriptor)
        -: 5859:- [jerry_free_property_descriptor_fields](#jerry_free_property_descriptor_fields)
        -: 5860:
        -: 5861:
        -: 5862:## jerry_get_own_property_descriptor
        -: 5863:
        -: 5864:**Summary**
        -: 5865:
        -: 5866:Construct property descriptor from specified property.
        -: 5867:
        -: 5868:**Prototype**
        -: 5869:
        -: 5870:```c
        -: 5871:bool
        -: 5872:jerry_get_own_property_descriptor (const jerry_value_t  obj_val,
        -: 5873:                                   const jerry_value_t prop_name_val,
        -: 5874:                                   jerry_property_descriptor_t *prop_desc_p);
        -: 5875:```
        -: 5876:
        -: 5877:- `obj_val` - object value
        -: 5878:- `prop_name_val` - property name
        -: 5879:- `prop_desc_p` - pointer to property descriptor
        -: 5880:- return value
        -: 5881:
        -: 5882:**Example**
        -: 5883:
        -: 5884:```c
        -: 5885:{
        -: 5886:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -: 5887:
        -: 5888:  jerry_property_descriptor_t prop_desc;
        -: 5889:  jerry_init_property_descriptor_fields (&prop_desc);
        -: 5890:
        -: 5891:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
        -: 5892:  jerry_get_own_property_descriptor (global_obj_val, prop_name, &prop_desc);
        -: 5893:  jerry_release_value (prop_name);
        -: 5894:
        -: 5895:  ... // usage of property descriptor
        -: 5896:
        -: 5897:  jerry_free_property_descriptor_fields (&prop_desc);
        -: 5898:  jerry_release_value (global_obj_val);
        -: 5899:}
        -: 5900:```
        -: 5901:
        -: 5902:**See also**
        -: 5903:
        -: 5904:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 5905:- [jerry_init_property_descriptor_fields](#jerry_init_property_descriptor_fields)
        -: 5906:- [jerry_define_own_property](#jerry_define_own_property)
        -: 5907:- [jerry_free_property_descriptor_fields](#jerry_free_property_descriptor_fields)
        -: 5908:
        -: 5909:
        -: 5910:## jerry_free_property_descriptor_fields
        -: 5911:
        -: 5912:**Summary**
        -: 5913:
        -: 5914:Free fields of property descriptor (setter, getter and value).
        -: 5915:
        -: 5916:**Prototype**
        -: 5917:
        -: 5918:```c
        -: 5919:void
        -: 5920:jerry_free_property_descriptor_fields (const jerry_property_descriptor_t *prop_desc_p);
        -: 5921:```
        -: 5922:
        -: 5923:- `prop_desc_p` - pointer to property descriptor
        -: 5924:
        -: 5925:**Example**
        -: 5926:
        -: 5927:```c
        -: 5928:{
        -: 5929:  jerry_property_descriptor_t prop_desc;
        -: 5930:  jerry_init_property_descriptor_fields (&prop_desc);
        -: 5931:
        -: 5932:  ... // usage of property descriptor
        -: 5933:
        -: 5934:  jerry_free_property_descriptor_fields (&prop_desc);
        -: 5935:}
        -: 5936:```
        -: 5937:
        -: 5938:**See also**
        -: 5939:
        -: 5940:- [jerry_init_property_descriptor_fields](#jerry_init_property_descriptor_fields)
        -: 5941:- [jerry_define_own_property](#jerry_define_own_property)
        -: 5942:- [jerry_get_own_property_descriptor](#jerry_get_own_property_descriptor)
        -: 5943:
        -: 5944:
        -: 5945:## jerry_call_function
        -: 5946:
        -: 5947:**Summary**
        -: 5948:
        -: 5949:Call function specified by a function value. Error flag must
        -: 5950:not be set for any arguments of this function. Value of `this`
        -: 5951:parameter should be set to `undefined` for non-method calls.
        -: 5952:
        -: 5953:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5954:is no longer needed.
        -: 5955:
        -: 5956:**Prototype**
        -: 5957:
        -: 5958:```c
        -: 5959:jerry_value_t
        -: 5960:jerry_call_function (const jerry_value_t func_obj_val,
        -: 5961:                     const jerry_value_t this_val,
        -: 5962:                     const jerry_value_t args_p[],
        -: 5963:                     jerry_size_t args_count);
        -: 5964:```
        -: 5965:
        -: 5966:- `func_obj_val` - the function object to call
        -: 5967:- `this_val` - object for 'this' binding
        -: 5968:- `args_p` - function's call arguments
        -: 5969:- `args_count` - number of arguments
        -: 5970:- return value - returned jerry value of the called function
        -: 5971:
        -: 5972:**Example**
        -: 5973:
        -: 5974:```c
        -: 5975:{
        -: 5976:  jerry_value_t target_function;
        -: 5977:
        -: 5978:  ... // create or get "target_function"
        -: 5979:
        -: 5980:  if (jerry_value_is_function (target_function))
        -: 5981:  {
        -: 5982:    jerry_value_t this_val = jerry_create_undefined ();
        -: 5983:    jerry_value_t ret_val = jerry_call_function (target_function, this_val, NULL, 0);
        -: 5984:
        -: 5985:    if (!jerry_value_is_error (ret_val))
        -: 5986:    {
        -: 5987:      ... // handle return value
        -: 5988:    }
        -: 5989:
        -: 5990:    jerry_release_value (ret_val);
        -: 5991:    jerry_release_value (this_val);
        -: 5992:  }
        -: 5993:
        -: 5994:  jerry_release_value (target_function);
        -: 5995:}
        -: 5996:```
        -: 5997:
        -: 5998:**See also**
        -: 5999:
        -: 6000:- [jerry_is_function](#jerry_is_function)
        -: 6001:- [jerry_create_external_function](#jerry_create_external_function)
        -: 6002:
        -: 6003:
        -: 6004:## jerry_construct_object
        -: 6005:
        -: 6006:**Summary**
        -: 6007:
        -: 6008:Construct object, invoking specified function object as constructor.
        -: 6009:Error flag must not be set for any arguments of this function.
        -: 6010:
        -: 6011:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6012:is no longer needed.
        -: 6013:
        -: 6014:**Prototype**
        -: 6015:
        -: 6016:```c
        -: 6017:jerry_value_t
        -: 6018:jerry_construct_object (const jerry_value_t func_obj_val,
        -: 6019:                        const jerry_value_t args_p[],
        -: 6020:                        jerry_size_t args_count);
        -: 6021:```
        -: 6022:
        -: 6023:- `func_obj_val` - function object to call
        -: 6024:- `args_p` - function's call arguments
        -: 6025:- `args_count` - number of arguments
        -: 6026:- return value - returned value of the invoked constructor
        -: 6027:
        -: 6028:**Example**
        -: 6029:
        -: 6030:```c
        -: 6031:{
        -: 6032:  jerry_value_t val;
        -: 6033:
        -: 6034:  ... // receiving val
        -: 6035:
        -: 6036:  if (jerry_is_constructor (val))
        -: 6037:  {
        -: 6038:    jerry_value_t ret_val = jerry_construct_object (val, NULL, 0);
        -: 6039:
        -: 6040:    if (!jerry_value_is_error (ret_val))
        -: 6041:    {
        -: 6042:      ... // handle return value
        -: 6043:    }
        -: 6044:
        -: 6045:    jerry_release_value (ret_val);
        -: 6046:  }
        -: 6047:}
        -: 6048:```
        -: 6049:
        -: 6050:**See also**
        -: 6051:
        -: 6052: - [jerry_is_constructor](#jerry_is_constructor)
        -: 6053:
        -: 6054:
        -: 6055:## jerry_get_object_keys
        -: 6056:
        -: 6057:**Summary**
        -: 6058:
        -: 6059:Get keys of the specified object value.
        -: 6060:
        -: 6061:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6062:is no longer needed.
        -: 6063:
        -: 6064:**Prototype**
        -: 6065:
        -: 6066:```c
        -: 6067:jerry_value_t
        -: 6068:jerry_get_object_keys (const jerry_value_t obj_val);
        -: 6069:```
        -: 6070:
        -: 6071:- `obj_val` - object value
        -: 6072:- return value
        -: 6073:  - array object value, if success
        -: 6074:  - thrown error, otherwise
        -: 6075:
        -: 6076:**Example**
        -: 6077:
        -: 6078:```c
        -: 6079:{
        -: 6080:  jerry_value_t object;
        -: 6081:  ... // create or acquire object
        -: 6082:
        -: 6083:  jerry_value_t keys_array = jerry_get_object_keys (object);
        -: 6084:
        -: 6085:  ... // usage of keys_array
        -: 6086:
        -: 6087:  jerry_release_value (keys_array);
        -: 6088:}
        -: 6089:```
        -: 6090:
        -: 6091:**See also**
        -: 6092:
        -: 6093:- [jerry_get_property](#jerry_get_property)
        -: 6094:- [jerry_set_property](#jerry_set_property)
        -: 6095:
        -: 6096:
        -: 6097:## jerry_get_prototype
        -: 6098:
        -: 6099:**Summary**
        -: 6100:
        -: 6101:Get the prototype of the specified object.
        -: 6102:
        -: 6103:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6104:is no longer needed.
        -: 6105:
        -: 6106:**Prototype**
        -: 6107:
        -: 6108:```c
        -: 6109:jerry_value_t
        -: 6110:jerry_get_prototype (const jerry_value_t obj_val);
        -: 6111:```
        -: 6112:
        -: 6113:- `obj_val` - object value
        -: 6114:- return value
        -: 6115:  - object value, if success
        -: 6116:  - null or thrown error, otherwise
        -: 6117:
        -: 6118:**Example**
        -: 6119:
        -: 6120:```c
        -: 6121:{
        -: 6122:  jerry_value_t object;
        -: 6123:  ... // create or acquire object
        -: 6124:
        -: 6125:  jerry_value_t prototype = jerry_get_prototype (object);
        -: 6126:
        -: 6127:  ... // usage of prototype object
        -: 6128:
        -: 6129:  jerry_release_value (prototype);
        -: 6130:  jerry_release_value (object);
        -: 6131:}
        -: 6132:```
        -: 6133:
        -: 6134:**See also**
        -: 6135:
        -: 6136:- [jerry_set_prototype](#jerry_set_prototype)
        -: 6137:
        -: 6138:
        -: 6139:## jerry_set_prototype
        -: 6140:
        -: 6141:**Summary**
        -: 6142:
        -: 6143:Set the prototype of the specified object.
        -: 6144:
        -: 6145:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6146:is no longer needed.
        -: 6147:
        -: 6148:**Prototype**
        -: 6149:
        -: 6150:```c
        -: 6151:jerry_value_t
        -: 6152:jerry_set_prototype (const jerry_value_t obj_val,
        -: 6153:                     const jerry_value_t proto_obj_val);
        -: 6154:```
        -: 6155:
        -: 6156:- `obj_val` - object value
        -: 6157:- `proto_obj_val` - prototype object value
        -: 6158:- return value
        -: 6159:  - true, if success
        -: 6160:  - thrown error, otherwise
        -: 6161:
        -: 6162:**Example**
        -: 6163:
        -: 6164:```c
        -: 6165:{
        -: 6166:  jerry_value_t object;
        -: 6167:  jerry_value_t prototype;
        -: 6168:
        -: 6169:  ... // create or acquire object and prototype
        -: 6170:
        -: 6171:  jerry_value_t ret_val = jerry_set_prototype (object, prototype);
        -: 6172:
        -: 6173:  jerry_release_value (ret_val);
        -: 6174:  jerry_release_value (prototype);
        -: 6175:  jerry_release_value (object);
        -: 6176:}
        -: 6177:```
        -: 6178:
        -: 6179:**See also**
        -: 6180:
        -: 6181:- [jerry_get_prototype](#jerry_get_prototype)
        -: 6182:
        -: 6183:
        -: 6184:## jerry_get_object_native_pointer
        -: 6185:
        -: 6186:**Summary**
        -: 6187:
        -: 6188:Get native pointer by the given type information.
        -: 6189:The pointer and the type information are previously associated with the object by
        -: 6190:[jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -: 6191:
        -: 6192:*Note*: `out_native_pointer_p` can be NULL, and it means the
        -: 6193:        caller doesn't want to get the native_pointer.
        -: 6194:
        -: 6195:**Prototype**
        -: 6196:
        -: 6197:```c
        -: 6198:bool
        -: 6199:jerry_get_object_native_pointer (const jerry_value_t obj_val,
        -: 6200:                                 void **out_native_pointer_p,
        -: 6201:                                 const jerry_object_native_info_t *native_info_p)
        -: 6202:```
        -: 6203:
        -: 6204:- `obj_val` - object value to get native pointer from.
        -: 6205:- `out_native_pointer_p` - native pointer (output parameter).
        -: 6206:- `native_info_p` - native pointer's type information.
        -: 6207:- return value
        -: 6208:  - true, if there is native pointer associated of the specified object with the given native type info
        -: 6209:  - false, otherwise
        -: 6210:
        -: 6211:*New in version 2.0*: Changed from `jerry_get_object_native_handle`.
        -: 6212:
        -: 6213:**Example**
        -: 6214:
        -: 6215:[doctest]: # ()
        -: 6216:
        -: 6217:```c
        -: 6218:#include <stdio.h>
        -: 6219:#include <stdlib.h>
        -: 6220:#include <string.h>
        -: 6221:#include "jerryscript.h"
        -: 6222:
        -: 6223:typedef struct
        -: 6224:{
        -: 6225:  char *data_p;
        -: 6226:  unsigned int length;
        -: 6227:} buffer_native_object_t;
        -: 6228:
        -: 6229:typedef struct
        -: 6230:{
        -: 6231:  int area;
        -: 6232:  int perimeter;
        -: 6233:} shape_native_object_t;
        -: 6234:
        -: 6235:#define SECRET_INFO ((void *) 42)
        -: 6236:
        -: 6237:static void
    #####: 6238:buffer_native_freecb (void *native_p)
        -: 6239:{
    #####: 6240:  char *data_p = ((buffer_native_object_t*)native_p)->data_p;
        -: 6241:
    #####: 6242:  if (data_p != NULL)
        -: 6243:  {
    #####: 6244:    free (data_p);
        -: 6245:  }
        -: 6246:
    #####: 6247:  free (native_p);
    #####: 6248:}
        -: 6249:
        -: 6250:static void
    #####: 6251:shape_native_freecb (void *native_p)
        -: 6252:{
    #####: 6253:  free (native_p);
    #####: 6254:}
        -: 6255:
        -: 6256:static void
    #####: 6257:destructor_freecb (void *native_p)
        -: 6258:{
    #####: 6259:   printf("Note: the object has been freed\n");
    #####: 6260:}
        -: 6261:
        -: 6262:// NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -: 6263:// C type `buffer_native_object_t *`.
        -: 6264:static const jerry_object_native_info_t buffer_obj_type_info =
        -: 6265:{
        -: 6266:  .free_cb = buffer_native_freecb
        -: 6267:};
        -: 6268:
        -: 6269:// NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -: 6270:// C type `shape_native_object_t *`.
        -: 6271:static const jerry_object_native_info_t shape_obj_type_info =
        -: 6272:{
        -: 6273:  .free_cb = shape_native_freecb
        -: 6274:};
        -: 6275:
        -: 6276:// NOTE: The address (!) of type_info is the unique "identifier"
        -: 6277:static const jerry_object_native_info_t destructor_obj_type_info =
        -: 6278:{
        -: 6279:  .free_cb = destructor_freecb
        -: 6280:};
        -: 6281:
        -: 6282:static void
    #####: 6283:print_buffer (char *data_p,
        -: 6284:              unsigned int length)
        -: 6285:{
    #####: 6286:  for (unsigned int i = 0; i < length; ++i)
        -: 6287:  {
    #####: 6288:    printf("%c", data_p[i]);
        -: 6289:  }
        -: 6290:
    #####: 6291:  printf("\n");
    #####: 6292:}
        -: 6293:
        -: 6294:static void
    #####: 6295:do_stuff (jerry_value_t object)
        -: 6296:{
        -: 6297:  void *native_p;
    #####: 6298:  bool has_p = jerry_get_object_native_pointer (object, &native_p, &buffer_obj_type_info);
        -: 6299:
    #####: 6300:  if (!has_p)
        -: 6301:  {
        -: 6302:    // Process the error
    #####: 6303:    return;
        -: 6304:  }
        -: 6305:
        -: 6306:  // It is safe to cast to buffer_native_object_t * and dereference the pointer:
    #####: 6307:  buffer_native_object_t *buffer_p = (buffer_native_object_t *) native_p;
    #####: 6308:  print_buffer (buffer_p->data_p, buffer_p->length); // Usage of buffer_p
        -: 6309:
    #####: 6310:  bool need_shape_info = true; // implementation dependent
        -: 6311:
    #####: 6312:  if (need_shape_info)
        -: 6313:  {
    #####: 6314:    has_p = jerry_get_object_native_pointer (object, &native_p, &shape_obj_type_info);
        -: 6315:
    #####: 6316:    if (!has_p)
        -: 6317:    {
        -: 6318:      // Process the error
    #####: 6319:      return;
        -: 6320:    }
        -: 6321:
        -: 6322:    // It is safe to cast to shape_native_object_t * and dereference the pointer:
    #####: 6323:    shape_native_object_t *shape_p = (shape_native_object_t *) native_p;
        -: 6324:
    #####: 6325:    printf("Area: %d\tPerimeter: %d\n", shape_p->area, shape_p->perimeter); // Usage of shape_p
        -: 6326:  }
        -: 6327:
    #####: 6328:  bool need_secret_info = true; // implementation dependent
        -: 6329:
    #####: 6330:  if (need_secret_info)
        -: 6331:  {
    #####: 6332:    has_p = jerry_get_object_native_pointer (object, &native_p, NULL);
        -: 6333:
    #####: 6334:    if (!has_p)
        -: 6335:    {
        -: 6336:      // Process the error
    #####: 6337:      return;
        -: 6338:    }
        -: 6339:
    #####: 6340:    printf("Secret: %d\n", (int)((uintptr_t) native_p)); // Usage of native_p
        -: 6341:
    #####: 6342:    bool deleted = jerry_delete_object_native_pointer (object, NULL);
        -: 6343:
    #####: 6344:    if (deleted)
        -: 6345:    {
    #####: 6346:      printf("The secret is no longer available\n");
        -: 6347:    }
        -: 6348:  }
        -: 6349:}
        -: 6350:
        -: 6351:int
    #####: 6352:main (void)
        -: 6353:{
    #####: 6354:  jerry_init (JERRY_INIT_EMPTY);
        -: 6355:
    #####: 6356:  jerry_value_t object = jerry_create_object ();
    #####: 6357:  buffer_native_object_t *buffer_p = (buffer_native_object_t *) malloc (sizeof (buffer_native_object_t));
    #####: 6358:  buffer_p->length = 14;
    #####: 6359:  buffer_p->data_p = (char *) malloc (buffer_p->length * sizeof (char));
    #####: 6360:  memcpy (buffer_p->data_p, "My buffer data", buffer_p->length);
    #####: 6361:  jerry_set_object_native_pointer (object, buffer_p, &buffer_obj_type_info);
        -: 6362:
    #####: 6363:  shape_native_object_t *shape_p = (shape_native_object_t *) malloc (sizeof (shape_native_object_t));
    #####: 6364:  shape_p->area = 6;
    #####: 6365:  shape_p->perimeter = 12;
    #####: 6366:  jerry_set_object_native_pointer (object, shape_p, &shape_obj_type_info);
        -: 6367:
        -: 6368:  // The native pointer can be NULL. This gives possibily to get notified via the native type info's
        -: 6369:  // free callback when the object has been freed by the GC.
    #####: 6370:  jerry_set_object_native_pointer (object, NULL, &destructor_obj_type_info);
        -: 6371:
        -: 6372:  // The native type info can be NULL as well. In this case the registered property is simply freed
        -: 6373:  // when the object is freed by te GC.
    #####: 6374:  jerry_set_object_native_pointer (object, SECRET_INFO, NULL);
        -: 6375:
    #####: 6376:  do_stuff (object);
        -: 6377:
    #####: 6378:  jerry_release_value (object);
    #####: 6379:  jerry_cleanup ();
        -: 6380:
    #####: 6381:  return 0;
        -: 6382:}
        -: 6383:```
        -: 6384:
        -: 6385:**See also**
        -: 6386:
        -: 6387:- [jerry_create_object](#jerry_create_object)
        -: 6388:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -: 6389:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 6390:
        -: 6391:
        -: 6392:## jerry_set_object_native_pointer
        -: 6393:
        -: 6394:**Summary**
        -: 6395:
        -: 6396:Set native pointer and an optional type information for the specified object.
        -: 6397:You can get them by calling [jerry_get_object_native_pointer](#jerry_get_object_native_pointer) later.
        -: 6398:
        -: 6399:*Notes*:
        -: 6400: - If a native pointer was already set for the object with the same type information, its value is updated.
        -: 6401: - If a non-NULL free callback is specified in the native type information,
        -: 6402:   it will be called by the garbage collector when the object is freed.
        -: 6403: - If the object is only referenced via the "global" object (or one of it's "child"),
        -: 6404:   the free callback will be invoked during the execution of `jerry_cleanup`.
        -: 6405: - The free callback can invoke API functions.
        -: 6406:
        -: 6407:*Note*: If possible do not store API values in native pointers, rather check
        -: 6408:        [jerry_set_internal_property](#jerry_set_internal_property).
        -: 6409:
        -: 6410:**Prototype**
        -: 6411:
        -: 6412:```c
        -: 6413:void
        -: 6414:jerry_set_object_native_pointer (const jerry_value_t obj_val,
        -: 6415:                                 void *native_p,
        -: 6416:                                 const jerry_object_native_info_t *info_p)
        -: 6417:```
        -: 6418:
        -: 6419:- `obj_val` - object to set native pointer in.
        -: 6420:- `native_p` - native pointer.
        -: 6421:- `info_p` - native pointer's type information or NULL. When used, this should
        -: 6422:             be a long-lived pointer, usually a pointer to a
        -: 6423:             `static const jerry_object_native_info_t` makes most sense.
        -: 6424:
        -: 6425:*New in version 2.0*: Changed from `jerry_set_object_native_handle`.
        -: 6426:
        -: 6427:**Example**
        -: 6428:
        -: 6429:See [jerry_get_object_native_pointer](#jerry_get_object_native_pointer) for a
        -: 6430:best-practice example.
        -: 6431:
        -: 6432:**See also**
        -: 6433:
        -: 6434:- [jerry_create_object](#jerry_create_object)
        -: 6435:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -: 6436:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 6437:
        -: 6438:## jerry_delete_object_native_pointer
        -: 6439:
        -: 6440:**Summary**
        -: 6441:
        -: 6442:Delete the native pointer of the specified object associated with the given native type info.
        -: 6443:
        -: 6444:*Notes*:
        -: 6445: - If the specified object has no matching native pointer for the given native type info the operation has no effect.
        -: 6446: - The method does not invoke the free callback specified in the type info.
        -: 6447:   If the native pointer should be freed then one must get the native pointer first and invoke the free callback manually
        -: 6448:   before calling this method.
        -: 6449: - This operation cannot throw an exception.
        -: 6450:
        -: 6451:**Prototype**
        -: 6452:
        -: 6453:```c
        -: 6454:bool
        -: 6455:jerry_delete_object_native_pointer (const jerry_value_t obj_val,
        -: 6456:                                    const jerry_object_native_info_t *info_p)
        -: 6457:```
        -: 6458:
        -: 6459:- `obj_val` - object to delete native pointer from.
        -: 6460:- `info_p` - native pointer's type information.
        -: 6461:
        -: 6462:*New in version 2.0*.
        -: 6463:
        -: 6464:**Example**
        -: 6465:
        -: 6466:See [jerry_get_object_native_pointer](#jerry_get_object_native_pointer) for a
        -: 6467:best-practice example.
        -: 6468:
        -: 6469:**See also**
        -: 6470:
        -: 6471:- [jerry_create_object](#jerry_create_object)
        -: 6472:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -: 6473:- [jerry_get_object_native_pointer](#jerry_set_object_native_pointer)
        -: 6474:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 6475:
        -: 6476:
        -: 6477:## jerry_foreach_object_property
        -: 6478:
        -: 6479:**Summary**
        -: 6480:
        -: 6481:Applies the given function to every enumerable(!) property in the given object.
        -: 6482:
        -: 6483:The "iterator" `foreach_p` method should return `true` value to continue the iteration.
        -: 6484:If the method returns `false` the iteration will end.
        -: 6485:
        -: 6486:**Prototype**
        -: 6487:
        -: 6488:```c
        -: 6489:bool
        -: 6490:jerry_foreach_object_property (jerry_value_t obj_val,
        -: 6491:                               jerry_object_property_foreach_t foreach_p,
        -: 6492:                               void *user_data_p);
        -: 6493:```
        -: 6494:
        -: 6495:- `obj_val` - object value
        -: 6496:- `foreach_p` - foreach function, that will be applied for each property
        -: 6497:- `user_data_p` - user data for foreach function
        -: 6498:- return value
        -: 6499:  - true, if object fields traversal was performed successfully, i.e.:
        -: 6500:    - no unhandled exceptions were thrown in object fields traversal
        -: 6501:    - object fields traversal was stopped on callback that returned false
        -: 6502:  - false, otherwise
        -: 6503:
        -: 6504:**Example**
        -: 6505:
        -: 6506:
        -: 6507:[doctest]: # (name="02.API-REFERENCE-foreach-property.c")
        -: 6508:
        -: 6509:```c
        -: 6510:#include <stdio.h>
        -: 6511:#include "jerryscript.h"
        -: 6512:
        -: 6513:/* Example structure used as user data for the property iteration. */
        -: 6514:struct iteration_data {
        -: 6515:  int string_property_count;
        -: 6516:};
        -: 6517:
        -: 6518:/*
        -: 6519: * Example foreach function to print out property names.
        -: 6520: */
        -: 6521:static bool
    #####: 6522:foreach_function (const jerry_value_t prop_name,
        -: 6523:                  const jerry_value_t prop_value,
        -: 6524:                  void *user_data_p)
        -: 6525:{
    #####: 6526:  if (jerry_value_is_string (prop_name)) {
        -: 6527:    jerry_char_t string_buffer[128];
    #####: 6528:    jerry_size_t copied_bytes = jerry_substring_to_char_buffer (prop_name,
        -: 6529:                                                                0,
        -: 6530:                                                                127,
        -: 6531:                                                                string_buffer,
        -: 6532:                                                                127);
    #####: 6533:    string_buffer[copied_bytes] = '\0';
        -: 6534:
    #####: 6535:    printf ("Property: %s\n", string_buffer);
        -: 6536:
    #####: 6537:    struct iteration_data *data = (struct iteration_data *) user_data_p;
    #####: 6538:    data->string_property_count++;
        -: 6539:  }
        -: 6540:
        -: 6541:  /* return true to continue iteration */
    #####: 6542:  return true;
        -: 6543:}
        -: 6544:
        -: 6545:int
    #####: 6546:main (void)
        -: 6547:{
    #####: 6548:  jerry_init (JERRY_INIT_EMPTY);
        -: 6549:
        -: 6550:  /* Construct an example object with a single property. */
    #####: 6551:  jerry_value_t object = jerry_create_object ();
        -: 6552:  {
    #####: 6553:    jerry_value_t test_property = jerry_create_string ((const jerry_char_t *) "DemoProp");
    #####: 6554:    jerry_value_t test_value = jerry_create_number (3);
        -: 6555:    /* By default all properties added to an object are enumerable. */
    #####: 6556:    jerry_value_t set_result = jerry_set_property (object, test_property, test_value);
        -: 6557:    /* The `set_result` should be checked if it is an error or not. */
    #####: 6558:    jerry_release_value (set_result);
    #####: 6559:    jerry_release_value (test_value);
    #####: 6560:    jerry_release_value (test_property);
        -: 6561:  }
        -: 6562:
        -: 6563:  /* Iterate on the object's properties with the given user data. */
    #####: 6564:  struct iteration_data user_data = { 0 };
        -: 6565:
    #####: 6566:  bool iteration_result = jerry_foreach_object_property (object, foreach_function, &user_data);
        -: 6567:  /* Check and process the `iteration_result` if required. */
        -: 6568:
    #####: 6569:  jerry_release_value (object);
        -: 6570:
    #####: 6571:  jerry_cleanup ();
        -: 6572:
    #####: 6573:  return user_data.string_property_count == 0;
        -: 6574:}
        -: 6575:```
        -: 6576:
        -: 6577:**See also**
        -: 6578:
        -: 6579:- [jerry_object_property_foreach_t](#jerry_object_property_foreach_t)
        -: 6580:
        -: 6581:## jerry_objects_foreach
        -: 6582:
        -: 6583:**Summary**
        -: 6584:
        -: 6585:Iterate over all objects available in the engine.
        -: 6586:
        -: 6587:The "iterator" `foreach_p` method should return `true` value to continue the search.
        -: 6588:If the method returns `false` the search for the object is finished.
        -: 6589:
        -: 6590:*Note*: Values obtained in `foreach_p` must be retained using [jerry_acquire_value](#jerry_acquire_value).
        -: 6591:
        -: 6592:**Prototype**
        -: 6593:
        -: 6594:```c
        -: 6595:bool
        -: 6596:jerry_objects_foreach (jerry_objects_foreach_t foreach_p,
        -: 6597:                       void *user_data_p);
        -: 6598:```
        -: 6599:
        -: 6600:- `foreach_p` - function that will be invoked for each object.
        -: 6601:- `user_data_p` - User data to pass to the function.
        -: 6602:- return value
        -: 6603:  - `true`, if the search function terminated the traversal by returning `false`
        -: 6604:  - `false`, if the end of the list of objects was reached
        -: 6605:
        -: 6606:*New in version 2.0*.
        -: 6607:
        -: 6608:**Example**
        -: 6609:
        -: 6610:[doctest]: # (name="02.API-REFERENCE-objects-foreach.c")
        -: 6611:
        -: 6612:```c
        -: 6613:#include <stdio.h>
        -: 6614:#include "jerryscript.h"
        -: 6615:
        -: 6616:/* Create a custom structure to guide the search and store the result. */
        -: 6617:typedef struct
        -: 6618:{
        -: 6619:  jerry_value_t property_name;
        -: 6620:  jerry_value_t result;
        -: 6621:} find_my_object_info_t;
        -: 6622:
        -: 6623:/*
        -: 6624: * Find the first object with the given property.
        -: 6625: */
        -: 6626:static bool
    #####: 6627:find_my_object (const jerry_value_t candidate,
        -: 6628:                void *user_data_p)
        -: 6629:{
    #####: 6630:  find_my_object_info_t *info_p = (find_my_object_info_t *) user_data_p;
        -: 6631:
        -: 6632:  /* Check if the given object has the required property. */
    #####: 6633:  jerry_value_t has_property = jerry_has_property (candidate, info_p->property_name);
    #####: 6634:  bool object_found = jerry_get_boolean_value (has_property);
        -: 6635:
    #####: 6636:  if (object_found)
        -: 6637:  {
        -: 6638:    /* We found it, so we acquire the value and record it. */
    #####: 6639:    info_p->result = jerry_acquire_value (candidate);
        -: 6640:  }
        -: 6641:
    #####: 6642:  jerry_release_value (has_property);
        -: 6643:
        -: 6644:  /* If the object was not found continue the search. */
    #####: 6645:  return !object_found;
        -: 6646:} /* find_my_object */
        -: 6647:
        -: 6648:int
    #####: 6649:main (void)
        -: 6650:{
    #####: 6651:  int return_value = 0;
        -: 6652:
        -: 6653:  /* Initialize JerryScript engine. */
    #####: 6654:  jerry_init (JERRY_INIT_EMPTY);
        -: 6655:
        -: 6656:  /* Create the test object. */
        -: 6657:  {
    #####: 6658:    jerry_value_t test_object = jerry_create_object ();
        -: 6659:
        -: 6660:    {
    #####: 6661:      jerry_value_t test_property = jerry_create_string ((const jerry_char_t *) "DemoProp");
    #####: 6662:      jerry_value_t test_value = jerry_create_number (3);
    #####: 6663:      jerry_value_t set_result = jerry_set_property (test_object, test_property, test_value);
        -: 6664:      /* The `set_result` should be checked if it is an error or not. */
    #####: 6665:      jerry_release_value (set_result);
    #####: 6666:      jerry_release_value (test_value);
    #####: 6667:      jerry_release_value (test_property);
        -: 6668:    }
        -: 6669:
        -: 6670:    {
        -: 6671:      /* Register the test object into the global object. */
    #####: 6672:      jerry_value_t global_object = jerry_get_global_object ();
    #####: 6673:      jerry_value_t demo_property = jerry_create_string ((const jerry_char_t *) "DemoObject");
    #####: 6674:      jerry_value_t set_result = jerry_set_property (global_object, demo_property, test_object);
        -: 6675:      /* The `set_result` should be checked if it is an error or not. */
    #####: 6676:      jerry_release_value (set_result);
    #####: 6677:      jerry_release_value (demo_property);
    #####: 6678:      jerry_release_value (global_object);
        -: 6679:    }
        -: 6680:
    #####: 6681:    jerry_release_value (test_object);
        -: 6682:  }
        -: 6683:
        -: 6684:  /* Look up the test object base on a property name. */
    #####: 6685:  find_my_object_info_t search_info =
        -: 6686:  {
    #####: 6687:    .property_name = jerry_create_string ((const jerry_char_t *) "DemoProp")
        -: 6688:  };
        -: 6689:
    #####: 6690:  if (jerry_objects_foreach (find_my_object, &search_info))
        -: 6691:  {
        -: 6692:    /* The search was successful. Do something useful with search_info.result. */
        -: 6693:    // ...
    #####: 6694:    printf ("Object found\n");
        -: 6695:
        -: 6696:    /* Release the found object after we're done using it. */
    #####: 6697:    jerry_release_value (search_info.result);
        -: 6698:  }
        -: 6699:  else
        -: 6700:  {
        -: 6701:    /* The search has failed. */
    #####: 6702:    printf ("Object not found\n");
        -: 6703:
    #####: 6704:    return_value = 1;
        -: 6705:  }
        -: 6706:
    #####: 6707:  jerry_release_value (search_info.property_name);
        -: 6708:
        -: 6709:  /* Engine cleanup */
    #####: 6710:  jerry_cleanup ();
    #####: 6711:  return return_value;
        -: 6712:}
        -: 6713:```
        -: 6714:
        -: 6715:**See also**
        -: 6716:
        -: 6717:- [jerry_objects_foreach_t](#jerry_objects_foreach_t)
        -: 6718:
        -: 6719:## jerry_objects_foreach_by_native_info
        -: 6720:
        -: 6721:**Summary**
        -: 6722:
        -: 6723:Iterate over all objects in the engine matching a certain native data type.
        -: 6724:
        -: 6725:The "iterator" `foreach_p` method should return `true` value to continue the search.
        -: 6726:If the method returns `false` the search for the object is finished.
        -: 6727:
        -: 6728:*Note*: Values obtained in `foreach_p` must be retained using [jerry_acquire_value](#jerry_acquire_value).
        -: 6729:
        -: 6730:**Prototype**
        -: 6731:
        -: 6732:```c
        -: 6733:bool
        -: 6734:jerry_objects_foreach_by_native_info (const jerry_object_native_info_t *native_info_p,
        -: 6735:                                      jerry_objects_foreach_by_native_info_t foreach_p,
        -: 6736:                                      void *user_data_p);
        -: 6737:```
        -: 6738:
        -: 6739:- `native_info_p` - native pointer's type information.
        -: 6740:- `foreach_p` - function that will be invoked for each object.
        -: 6741:- return value
        -: 6742:  - `true`, if the search function terminated the traversal by returning `false`
        -: 6743:  - `false`, if the end of the list of objects was reached
        -: 6744:
        -: 6745:*New in version 2.0*.
        -: 6746:
        -: 6747:**Example**
        -: 6748:
        -: 6749:[doctest]: # (name="02.API-REFERENCE-objects-foreach-nativeptr.c")
        -: 6750:
        -: 6751:```c
        -: 6752:#include <stdio.h>
        -: 6753:#include <stdlib.h>
        -: 6754:#include "jerryscript.h"
        -: 6755:
        -: 6756:typedef struct
        -: 6757:{
        -: 6758:  int foo;
        -: 6759:  bool bar;
        -: 6760:} native_obj_t;
        -: 6761:
        -: 6762:typedef struct
        -: 6763:{
        -: 6764:  jerry_value_t found_object;
        -: 6765:  native_obj_t *found_native_data_p;
        -: 6766:
        -: 6767:  int match_foo_value;
        -: 6768:} find_object_data_t;
        -: 6769:
    #####: 6770:static void native_freecb (void *native_p)
        -: 6771:{
        -: 6772:  /* `native_p` was allocated via malloc. */
    #####: 6773:  free (native_p);
    #####: 6774:} /* native_freecb */
        -: 6775:
        -: 6776:/*
        -: 6777: * NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -: 6778: * C type `native_obj_t *`.
        -: 6779: */
        -: 6780:static const jerry_object_native_info_t native_obj_type_info =
        -: 6781:{
        -: 6782:  .free_cb = native_freecb
        -: 6783:};
        -: 6784:
        -: 6785:/*
        -: 6786: * Function creating JS object that is "backed" by a `native_obj_t`.
        -: 6787: */
        -: 6788:static void
    #####: 6789:add_object_with_nativeptr (int foo_value)
        -: 6790:{
        -: 6791:  // construct object and native_set value:
    #####: 6792:  jerry_value_t test_object = jerry_create_object ();
    #####: 6793:  native_obj_t *native_obj_p = malloc (sizeof (*native_obj_p));
    #####: 6794:  native_obj_p->foo = foo_value;
    #####: 6795:  native_obj_p->bar = true;
        -: 6796:
    #####: 6797:  jerry_set_object_native_pointer (test_object, native_obj_p, &native_obj_type_info);
        -: 6798:
        -: 6799:  /* Register the test object into the global object. */
    #####: 6800:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 6801:  jerry_value_t demo_property = jerry_create_string ((const jerry_char_t *) "DemoObject");
    #####: 6802:  jerry_value_t set_result = jerry_set_property (global_object, demo_property, test_object);
        -: 6803:  /* The `set_result` should be checked if it is an error or not. */
    #####: 6804:  jerry_release_value (set_result);
    #####: 6805:  jerry_release_value (demo_property);
    #####: 6806:  jerry_release_value (global_object);
        -: 6807:
    #####: 6808:  jerry_release_value (test_object);
    #####: 6809:} /* create_object_with_nativeptr */
        -: 6810:
        -: 6811:/*
        -: 6812: * Example native method that searches for a JavaScript object
        -: 6813: * with a `native_obj_type_info` has the correct value.
        -: 6814: */
        -: 6815:static bool
    #####: 6816:find_object (const jerry_value_t candidate, void *data_p, void *user_data_p)
        -: 6817:{
    #####: 6818:  find_object_data_t *find_data_p = (find_object_data_t *) user_data_p;
    #####: 6819:  native_obj_t *native_obj_p = (native_obj_t *) data_p;
        -: 6820:
    #####: 6821:  if (find_data_p->match_foo_value == native_obj_p->foo)
        -: 6822:  {
        -: 6823:    /* If the object was found, acquire it and store it in the user data. */
    #####: 6824:    find_data_p->found_object = jerry_acquire_value (candidate);
    #####: 6825:    find_data_p->found_native_data_p = native_obj_p;
        -: 6826:
        -: 6827:    /* Stop traversing over the objects. */
    #####: 6828:    return false;
        -: 6829:  }
        -: 6830:
        -: 6831:  /* Indicate that the object was not found, so traversal must continue. */
    #####: 6832:  return true;
        -: 6833:} /* find_object */
        -: 6834:
        -: 6835:int
    #####: 6836:main (void)
        -: 6837:{
    #####: 6838:  jerry_init (JERRY_INIT_EMPTY);
        -: 6839:
    #####: 6840:  add_object_with_nativeptr (4);
    #####: 6841:  add_object_with_nativeptr (3);
    #####: 6842:  add_object_with_nativeptr (2);
        -: 6843:
    #####: 6844:  find_object_data_t find_data =
        -: 6845:  {
        -: 6846:    .match_foo_value = 3,
        -: 6847:  };
        -: 6848:
    #####: 6849:  if (jerry_objects_foreach_by_native_info (&native_obj_type_info, find_object, &find_data))
        -: 6850:  {
        -: 6851:    /* The object was found and is now stored in `find_data.found_object`. After using it, it must be released. */
    #####: 6852:    printf ("Object found, native foo value: %d\n", find_data.found_native_data_p->foo);
        -: 6853:
    #####: 6854:    jerry_release_value (find_data.found_object);
        -: 6855:  }
        -: 6856:  else
        -: 6857:  {
    #####: 6858:    printf ("Object not found\n");
        -: 6859:  }
        -: 6860:
    #####: 6861:  jerry_cleanup ();
        -: 6862:
    #####: 6863:  return 0;
        -: 6864:}
        -: 6865:```
        -: 6866:
        -: 6867:**See also**
        -: 6868:
        -: 6869:- [jerry_create_object](#jerry_create_object)
        -: 6870:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -: 6871:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -: 6872:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 6873:- [jerry_objects_foreach](#jerry_objects_foreach)
        -: 6874:
        -: 6875:
        -: 6876:# Input validator functions
        -: 6877:
        -: 6878:## jerry_is_valid_utf8_string
        -: 6879:
        -: 6880:**Summary**
        -: 6881:
        -: 6882:Check if a given character buffer is a valid UTF-8 string.
        -: 6883:
        -: 6884:**Notes**: Calling this method is safe in any time. It can be called
        -: 6885:even before engine initialization.
        -: 6886:
        -: 6887:**Prototype**
        -: 6888:
        -: 6889:```c
        -: 6890:bool
        -: 6891:jerry_is_valid_utf8_string (const jerry_char_t *utf8_buf_p, /**< UTF-8 string */
        -: 6892:                            jerry_size_t buf_size) /**< string size */
        -: 6893:```
        -: 6894:
        -: 6895:- `utf8_buf_p` - UTF-8 input string buffer.
        -: 6896:- `buf_size` - input string buffer size in bytes.
        -: 6897:- return value
        -: 6898:  - true, if the provided string was a valid UTF-8 string.
        -: 6899:  - false, if the string is not valid as an UTF-8 string.
        -: 6900:
        -: 6901:*New in version 2.0*.
        -: 6902:
        -: 6903:**Example**
        -: 6904:
        -: 6905:[doctest]: # ()
        -: 6906:
        -: 6907:```c
        -: 6908:#include "jerryscript.h"
        -: 6909:
        -: 6910:int
    #####: 6911:main (void)
        -: 6912:{
    #####: 6913:  const jerry_char_t script[] = "print ('Hello, World!');";
    #####: 6914:  const jerry_size_t script_size = sizeof (script) - 1;
        -: 6915:
    #####: 6916:  if (jerry_is_valid_utf8_string (script, script_size))
        -: 6917:  {
    #####: 6918:    jerry_run_simple (script, script_size, JERRY_INIT_EMPTY);
        -: 6919:  }
        -: 6920:
    #####: 6921:  return 0;
        -: 6922:}
        -: 6923:```
        -: 6924:
        -: 6925:**See also**
        -: 6926:
        -: 6927:- [jerry_run_simple](#jerry_run_simple)
        -: 6928:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 6929:- [jerry_create_string_sz_from_utf8](#jerry_create_string_sz_from_utf8)
        -: 6930:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -: 6931:- [jerry_get_utf8_string_length](#jerry_get_utf8_string_length)
        -: 6932:- [jerry_string_to_utf8_char_buffer](#jerry_string_to_utf8_char_buffer)
        -: 6933:- [jerry_substring_to_utf8_char_buffer](#jerry_substring_to_utf8_char_buffer)
        -: 6934:
        -: 6935:## jerry_is_valid_cesu8_string
        -: 6936:
        -: 6937:**Summary**
        -: 6938:
        -: 6939:Check if a given character buffer is a valid CESU-8 string.
        -: 6940:
        -: 6941:**Notes**: Calling this method is safe in any time. It can be called
        -: 6942:even before engine initialization.
        -: 6943:
        -: 6944:**Prototype**
        -: 6945:
        -: 6946:```c
        -: 6947:bool
        -: 6948:jerry_is_valid_cesu8_string (const jerry_char_t *cesu8_buf_p, /**< CESU-8 string */
        -: 6949:                             jerry_size_t buf_size) /**< string size */
        -: 6950:```
        -: 6951:
        -: 6952:- `cesu8_buf_p` - CESU-8 input string buffer.
        -: 6953:- `buf_size` - input string buffer size in bytes.
        -: 6954:- return value
        -: 6955:  - true, if the provided string was a valid CESU-8 string.
        -: 6956:  - false, if the string is not valid as a CESU-8 string.
        -: 6957:
        -: 6958:*New in version 2.0*.
        -: 6959:
        -: 6960:**Example**
        -: 6961:
        -: 6962:[doctest]: # ()
        -: 6963:
        -: 6964:```c
        -: 6965:#include "jerryscript.h"
        -: 6966:
        -: 6967:int
    #####: 6968:main (void)
        -: 6969:{
    #####: 6970:  jerry_init (JERRY_INIT_EMPTY);
        -: 6971:
    #####: 6972:  const jerry_char_t script[] = "Hello, World!";
    #####: 6973:  const jerry_size_t script_size = sizeof (script) - 1;
        -: 6974:
    #####: 6975:  if (jerry_is_valid_cesu8_string (script, script_size))
        -: 6976:  {
    #####: 6977:    jerry_value_t string_value = jerry_create_string_sz (script,
        -: 6978:                                                         script_size);
        -: 6979:
        -: 6980:    // usage of string_value
        -: 6981:
    #####: 6982:    jerry_release_value (string_value);
        -: 6983:  }
        -: 6984:
    #####: 6985:  jerry_cleanup ();
    #####: 6986:  return 0;
        -: 6987:}
        -: 6988:```
        -: 6989:
        -: 6990:**See also**
        -: 6991:
        -: 6992:- [jerry_create_string](#jerry_create_string)
        -: 6993:- [jerry_create_string_sz](#jerry_create_string_sz)
        -: 6994:- [jerry_get_string_size](#jerry_get_string_size)
        -: 6995:- [jerry_get_string_length](#jerry_get_string_length)
        -: 6996:- [jerry_string_to_char_buffer](#jerry_string_to_char_buffer)
        -: 6997:- [jerry_substring_to_char_buffer](#jerry_substring_to_char_buffer)
        -: 6998:
        -: 6999:
        -: 7000:# Dynamic memory management functions
        -: 7001:
        -: 7002:## jerry_heap_alloc
        -: 7003:
        -: 7004:**Summary**
        -: 7005:
        -: 7006:Allocate memory on the engine's heap.
        -: 7007:
        -: 7008:*Note*: This function may take away memory from the executed JavaScript code.
        -: 7009:If any other dynamic memory allocation API is available (e.g., libc malloc), it
        -: 7010:should be used instead.
        -: 7011:
        -: 7012:**Prototype**
        -: 7013:
        -: 7014:```c
        -: 7015:void *jerry_heap_alloc (size_t size);
        -: 7016:```
        -: 7017:
        -: 7018:- `size`: size of the memory block.
        -: 7019:- return value: non-NULL pointer, if the memory is successfully allocated,
        -: 7020:                NULL otherwise.
        -: 7021:
        -: 7022:*New in version 2.0*.
        -: 7023:
        -: 7024:**See also**
        -: 7025:
        -: 7026:- [jerry_heap_free](#jerry_heap_free)
        -: 7027:
        -: 7028:## jerry_heap_free
        -: 7029:
        -: 7030:**Summary**
        -: 7031:
        -: 7032:Free memory allocated on the engine's heap.
        -: 7033:
        -: 7034:**Prototype**
        -: 7035:
        -: 7036:```c
        -: 7037:void jerry_heap_free (void *mem_p, size_t size);
        -: 7038:```
        -: 7039:
        -: 7040:- `mem_p`: value returned by `jerry_heap_alloc`.
        -: 7041:- `size`: same size as passed to `jerry_heap_alloc`.
        -: 7042:
        -: 7043:*New in version 2.0*.
        -: 7044:
        -: 7045:**See also**
        -: 7046:
        -: 7047:- [jerry_heap_alloc](#jerry_heap_alloc)
        -: 7048:
        -: 7049:
        -: 7050:# External context functions
        -: 7051:
        -: 7052:## jerry_create_context
        -: 7053:
        -: 7054:**Summary**
        -: 7055:
        -: 7056:Create an external JerryScript engine context.
        -: 7057:
        -: 7058:**Prototype**
        -: 7059:
        -: 7060:```c
        -: 7061:jerry_context_t *
        -: 7062:jerry_create_context (uint32_t heap_size,
        -: 7063:                      jerry_context_alloc_t alloc,
        -: 7064:                      void *cb_data_p);
        -: 7065:```
        -: 7066:
        -: 7067:- `heap_size` - requested heap size of the JerryScript context
        -: 7068:- `alloc` - function for allocation
        -: 7069:- `cb_data_p` - user data
        -: 7070:- return value
        -: 7071:  - pointer to the newly created JerryScript context if success
        -: 7072:  - NULL otherwise.
        -: 7073:
        -: 7074:*New in version 2.0*.
        -: 7075:
        -: 7076:**Example**
        -: 7077:
        -: 7078:[doctest]: # (test="compile", name="02.API-REFERENCE-create-context.c")
        -: 7079:
        -: 7080:```c
        -: 7081:#include <stdlib.h>
        -: 7082:#include <pthread.h>
        -: 7083:
        -: 7084:#include "jerryscript.h"
        -: 7085:#include "jerryscript-port.h"
        -: 7086:
        -: 7087:/* A different Thread Local Storage variable for each jerry context. */
        -: 7088:__thread jerry_context_t *tls_context;
        -: 7089:
        -: 7090:jerry_context_t *
    #####: 7091:jerry_port_get_current_context (void)
        -: 7092:{
        -: 7093:  /* Returns the context assigned to the thread. */
    #####: 7094:  return tls_context;
        -: 7095:}
        -: 7096:
        -: 7097:/* Allocate JerryScript heap for each thread. */
        -: 7098:static void *
    #####: 7099:context_alloc_fn (size_t size, void *cb_data)
        -: 7100:{
        -: 7101:  (void) cb_data;
    #####: 7102:  return malloc (size);
        -: 7103:}
        -: 7104:
        -: 7105:static void *
    #####: 7106:thread_function (void *param)
        -: 7107:{
    #####: 7108:  tls_context = jerry_create_context (512 * 1024,
        -: 7109:                                      context_alloc_fn,
        -: 7110:                                      NULL);
    #####: 7111:  jerry_init (JERRY_INIT_EMPTY);
        -: 7112:  /* Run JerryScript in the context (e.g.: jerry_parse & jerry_run) */
    #####: 7113:  jerry_cleanup ();
        -: 7114:
        -: 7115:  /* Deallocate JerryScript context */
    #####: 7116:  free (tls_context);
        -: 7117:
    #####: 7118:  return NULL;
        -: 7119:}
        -: 7120:
        -: 7121:#define NUM_OF_THREADS 8
        -: 7122:
        -: 7123:int
    #####: 7124:main (void)
        -: 7125:{
        -: 7126:  pthread_t threads[NUM_OF_THREADS];
        -: 7127:
        -: 7128:  /* Create the threads. */
    #####: 7129:  for (int i = 0; i < NUM_OF_THREADS; i++)
        -: 7130:  {
    #####: 7131:    pthread_create (&threads[i], NULL, thread_function, (void *) (intptr_t) i);
        -: 7132:  }
        -: 7133:
        -: 7134:  /* Wait for the threads to complete, and release their resources. */
    #####: 7135:  for (int i = 0; i < NUM_OF_THREADS; i++)
        -: 7136:  {
    #####: 7137:    pthread_join (threads[i], NULL);
        -: 7138:  }
        -: 7139:
    #####: 7140:  return 0;
        -: 7141:}
        -: 7142:```
        -: 7143:
        -: 7144:**See also**
        -: 7145:
        -: 7146:- [jerry_context_t](#jerry_context_t)
        -: 7147:- [jerry_context_alloc_t](#jerry_context_alloc_t)
        -: 7148:- [jerry_port_get_current_context](05.PORT-API.md#jerry_port_get_current_context)
        -: 7149:
        -: 7150:
        -: 7151:# Snapshot functions
        -: 7152:
        -: 7153:## jerry_generate_snapshot
        -: 7154:
        -: 7155:**Summary**
        -: 7156:
        -: 7157:Generate snapshot from the specified source code.
        -: 7158:
        -: 7159:*Notes*:
        -: 7160:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7161:  is no longer needed.
        -: 7162:- This API depends on a build option (`JERRY_SNAPSHOT_SAVE`) and can be checked in runtime with
        -: 7163:  the `JERRY_FEATURE_SNAPSHOT_SAVE` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 7164:  If the feature is not enabled the function will return an error.
        -: 7165:
        -: 7166:**Prototype**
        -: 7167:
        -: 7168:```c
        -: 7169:jerry_value_t
        -: 7170:jerry_generate_snapshot (const jerry_char_t *resource_name_p,
        -: 7171:                         size_t resource_name_length,
        -: 7172:                         const jerry_char_t *source_p,
        -: 7173:                         size_t source_size,
        -: 7174:                         uint32_t generate_snapshot_opts,
        -: 7175:                         uint32_t *buffer_p,
        -: 7176:                         size_t buffer_size);
        -: 7177:```
        -: 7178:
        -: 7179:- `resource_name_p` - resource (file) name of the source code. Currently unused, the debugger may use it in the future.
        -: 7180:- `resource_name_length` - length of resource name.
        -: 7181:- `source_p` - script source, it must be a valid utf8 string.
        -: 7182:- `source_size` - script source size, in bytes.
        -: 7183:- `generate_snapshot_opts` - any combination of [jerry_generate_snapshot_opts_t](#jerry_generate_snapshot_opts_t) flags.
        -: 7184:- `buffer_p` - output buffer (aligned to 4 bytes) to save snapshot to.
        -: 7185:- `buffer_size` - the output buffer's size in bytes.
        -: 7186:- return value
        -: 7187:  - the size of the generated snapshot in bytes as number value, if it was generated succesfully (i.e. there
        -: 7188:    are no syntax errors in source code, buffer size is sufficient, and snapshot support is enabled in
        -: 7189:    current configuration through JERRY_SNAPSHOT_SAVE)
        -: 7190:  - thrown error, otherwise.
        -: 7191:
        -: 7192:*New in version 2.0*.
        -: 7193:
        -: 7194:**Example**
        -: 7195:
        -: 7196:[doctest]: # ()
        -: 7197:
        -: 7198:```c
        -: 7199:#include "jerryscript.h"
        -: 7200:
        -: 7201:int
    #####: 7202:main (void)
        -: 7203:{
    #####: 7204:  jerry_init (JERRY_INIT_EMPTY);
        -: 7205:
        -: 7206:  static uint32_t global_mode_snapshot_buffer[256];
    #####: 7207:  const jerry_char_t script_to_snapshot[] = "(function () { return 'string from snapshot'; }) ();";
        -: 7208:
        -: 7209:  jerry_value_t generate_result;
    #####: 7210:  generate_result = jerry_generate_snapshot (NULL,
        -: 7211:                                             0,
        -: 7212:                                             script_to_snapshot,
        -: 7213:                                             sizeof (script_to_snapshot) - 1,
        -: 7214:                                             0,
        -: 7215:                                             global_mode_snapshot_buffer,
        -: 7216:                                             sizeof (global_mode_snapshot_buffer) / sizeof (uint32_t));
        -: 7217:
    #####: 7218:  if (!jerry_value_is_error (generate_result))
        -: 7219:  {
    #####: 7220:    size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
        -: 7221:  }
        -: 7222:
    #####: 7223:  jerry_release_value (generate_result);
        -: 7224:
    #####: 7225:  jerry_cleanup ();
    #####: 7226:  return 0;
        -: 7227:}
        -: 7228:```
        -: 7229:
        -: 7230:**See also**
        -: 7231:
        -: 7232:- [jerry_init](#jerry_init)
        -: 7233:- [jerry_cleanup](#jerry_cleanup)
        -: 7234:- [jerry_generate_function_snapshot](#jerry_generate_function_snapshot)
        -: 7235:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -: 7236:
        -: 7237:
        -: 7238:## jerry_generate_function_snapshot
        -: 7239:
        -: 7240:**Summary**
        -: 7241:
        -: 7242:Generate function snapshot from the specified source code
        -: 7243:with the given arguments.
        -: 7244:
        -: 7245:The function arguments and function body are
        -: 7246:passed as separated arguments.
        -: 7247:
        -: 7248:*Notes*:
        -: 7249:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7250:  is no longer needed.
        -: 7251:- This API depends on a build option (`JERRY_SNAPSHOT_SAVE`) and can be checked in runtime with
        -: 7252:  the `JERRY_FEATURE_SNAPSHOT_SAVE` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 7253:  If the feature is not enabled the function will return an error.
        -: 7254:
        -: 7255:**Prototype**
        -: 7256:
        -: 7257:```c
        -: 7258:jerry_value_t
        -: 7259:jerry_generate_function_snapshot (const jerry_char_t *resource_name_p,
        -: 7260:                                  size_t resource_name_length,
        -: 7261:                                  const jerry_char_t *source_p,
        -: 7262:                                  size_t source_size,
        -: 7263:                                  const jerry_char_t *args_p,
        -: 7264:                                  size_t args_size,
        -: 7265:                                  uint32_t generate_snapshot_opts,
        -: 7266:                                  uint32_t *buffer_p,
        -: 7267:                                  size_t buffer_size)
        -: 7268:```
        -: 7269:
        -: 7270:- `resource_name_p` - resource (file) name of the source code. Currently unused, the debugger may use it in the future.
        -: 7271:- `resource_name_length` - length of resource name.
        -: 7272:- `source_p` - script source, it must be a valid utf8 string.
        -: 7273:- `source_size` - script source size, in bytes.
        -: 7274:- `args_p` - function arguments, it must be a valid utf8 string.
        -: 7275:- `args_size` - function argument size, in bytes.
        -: 7276:- `generate_snapshot_opts` - any combination of [jerry_generate_snapshot_opts_t](#jerry_generate_snapshot_opts_t) flags.
        -: 7277:- `buffer_p` - buffer (aligned to 4 bytes) to save snapshot to.
        -: 7278:- `buffer_size` - the buffer's size in bytes.
        -: 7279:- return value
        -: 7280:  - the size of the generated snapshot in bytes as number value, if it was generated succesfully (i.e. there
        -: 7281:    are no syntax errors in source code, buffer size is sufficient, and snapshot support is enabled in
        -: 7282:    current configuration through JERRY_SNAPSHOT_SAVE)
        -: 7283:  - thrown error, otherwise.
        -: 7284:
        -: 7285:*New in version 2.0*.
        -: 7286:
        -: 7287:**Example**
        -: 7288:
        -: 7289:[doctest]: # ()
        -: 7290:
        -: 7291:```c
        -: 7292:#include "jerryscript.h"
        -: 7293:
        -: 7294:int
    #####: 7295:main (void)
        -: 7296:{
    #####: 7297:  jerry_init (JERRY_INIT_EMPTY);
        -: 7298:
        -: 7299:  static uint32_t func_snapshot_buffer[256];
    #####: 7300:  const jerry_char_t args[] = "a, b";
    #####: 7301:  const jerry_char_t src[] = "return a + b;";
        -: 7302:
        -: 7303:  jerry_value_t generate_result;
    #####: 7304:  generate_result = jerry_generate_function_snapshot (NULL,
        -: 7305:                                                      0,
        -: 7306:                                                      src,
        -: 7307:                                                      sizeof (src) - 1,
        -: 7308:                                                      args,
        -: 7309:                                                      sizeof (args) - 1,
        -: 7310:                                                      0,
        -: 7311:                                                      func_snapshot_buffer,
        -: 7312:                                                      sizeof (func_snapshot_buffer) / sizeof (uint32_t));
        -: 7313:
    #####: 7314:  if (!jerry_value_is_error (generate_result))
        -: 7315:  {
    #####: 7316:    size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
        -: 7317:  }
        -: 7318:
    #####: 7319:  jerry_release_value (generate_result);
        -: 7320:
    #####: 7321:  jerry_cleanup ();
    #####: 7322:  return 0;
        -: 7323:}
        -: 7324:```
        -: 7325:
        -: 7326:**See also**
        -: 7327:
        -: 7328:- [jerry_init](#jerry_init)
        -: 7329:- [jerry_cleanup](#jerry_cleanup)
        -: 7330:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -: 7331:- [jerry_load_function_snapshot_at](#jerry_load_function_snapshot_at)
        -: 7332:
        -: 7333:
        -: 7334:## jerry_exec_snapshot
        -: 7335:
        -: 7336:**Summary**
        -: 7337:
        -: 7338:Execute snapshot from the specified buffer.
        -: 7339:
        -: 7340:*Notes*:
        -: 7341:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7342:  is no longer needed.
        -: 7343:- This API depends on a build option (`JERRY_SNAPSHOT_EXEC`) and can be checked in runtime with
        -: 7344:  the `JERRY_FEATURE_SNAPSHOT_EXEC` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 7345:  If the feature is not enabled the function will return an error.
        -: 7346:
        -: 7347:**Prototype**
        -: 7348:
        -: 7349:```c
        -: 7350:jerry_value_t
        -: 7351:jerry_exec_snapshot (const uint32_t *snapshot_p,
        -: 7352:                     size_t snapshot_size,
        -: 7353:                     size_t func_index,
        -: 7354:                     uint32_t exec_snapshot_opts);
        -: 7355:```
        -: 7356:
        -: 7357:- `snapshot_p` - pointer to snapshot.
        -: 7358:- `snapshot_size` - size of snapshot in bytes.
        -: 7359:- `func_index` - index of executed function.
        -: 7360:- `exec_snapshot_opts` - any combination of [jerry_exec_snapshot_opts_t](#jerry_exec_snapshot_opts_t) flags.
        -: 7361:- return value
        -: 7362:  - result of bytecode, if run was successful.
        -: 7363:  - thrown error, otherwise (an error is reported if the snapshot execution feature is not enabled).
        -: 7364:
        -: 7365:*Changed in version 2.0*: Added `func_index` and `exec_snapshot_opts` arguments. Removed the `copy_bytecode` last argument.
        -: 7366:
        -: 7367:**Example**
        -: 7368:
        -: 7369:[doctest]: # ()
        -: 7370:
        -: 7371:```c
        -: 7372:#include "jerryscript.h"
        -: 7373:
        -: 7374:int
    #####: 7375:main (void)
        -: 7376:{
        -: 7377:  static uint32_t global_mode_snapshot_buffer[256];
    #####: 7378:  const jerry_char_t script_to_snapshot[] = "(function () { return 'string from snapshot'; }) ();";
        -: 7379:
    #####: 7380:  jerry_init (JERRY_INIT_EMPTY);
        -: 7381:
        -: 7382:  jerry_value_t generate_result;
    #####: 7383:  generate_result = jerry_generate_snapshot (NULL,
        -: 7384:                                             0,
        -: 7385:                                             script_to_snapshot,
        -: 7386:                                             sizeof (script_to_snapshot) - 1,
        -: 7387:                                             0,
        -: 7388:                                             global_mode_snapshot_buffer,
        -: 7389:                                             sizeof (global_mode_snapshot_buffer) / sizeof (uint32_t));
        -: 7390:  // generate_result should be checked if it is an error or not
        -: 7391:
    #####: 7392:  size_t global_mode_snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####: 7393:  jerry_release_value (generate_result);
        -: 7394:
    #####: 7395:  jerry_cleanup ();
        -: 7396:
    #####: 7397:  jerry_init (JERRY_INIT_EMPTY);
        -: 7398:
    #####: 7399:  jerry_value_t res = jerry_exec_snapshot (global_mode_snapshot_buffer,
        -: 7400:                                           global_mode_snapshot_size,
        -: 7401:                                           0,
        -: 7402:                                           0);
        -: 7403:
        -: 7404:  // check the `res` value for error and process the result.
        -: 7405:
    #####: 7406:  jerry_release_value (res);
        -: 7407:
    #####: 7408:  jerry_cleanup ();
    #####: 7409:  return 0;
        -: 7410:}
        -: 7411:```
        -: 7412:
        -: 7413:**See also**
        -: 7414:
        -: 7415:- [jerry_init](#jerry_init)
        -: 7416:- [jerry_cleanup](#jerry_cleanup)
        -: 7417:- [jerry_parse_and_save_snapshot](#jerry_parse_and_save_snapshot)
        -: 7418:
        -: 7419:
        -: 7420:## jerry_load_function_snapshot
        -: 7421:
        -: 7422:**Summary**
        -: 7423:
        -: 7424:Load the selected snapshot function from the specified buffer as a function object.
        -: 7425:
        -: 7426:The lexical environment of the loaded function is always the global lexical environment.
        -: 7427:
        -: 7428:*Notes*:
        -: 7429:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7430:  is no longer needed.
        -: 7431:- This API depends on a build option (`JERRY_SNAPSHOT_EXEC`) and can be checked in runtime with
        -: 7432:  the `JERRY_FEATURE_SNAPSHOT_EXEC` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 7433:  If the feature is not enabled the function will return an error.
        -: 7434:
        -: 7435:**Prototype**
        -: 7436:
        -: 7437:```c
        -: 7438:jerry_value_t
        -: 7439:jerry_load_function_snapshot (const uint32_t *snapshot_p,
        -: 7440:                              size_t snapshot_size,
        -: 7441:                              size_t func_index,
        -: 7442:                              uint32_t exec_snapshot_opts);
        -: 7443:```
        -: 7444:
        -: 7445:- `snapshot_p` - pointer to snapshot.
        -: 7446:- `snapshot_size` - size of snapshot in bytes.
        -: 7447:- `func_index` - index of function to load from the snapshot.
        -: 7448:- `exec_snapshot_opts` - any combination of [jerry_exec_snapshot_opts_t](#jerry_exec_snapshot_opts_t) flags.
        -: 7449:- return value
        -: 7450:  - function object built from the snapshot.
        -: 7451:  - thrown error, otherwise.
        -: 7452:
        -: 7453:*New in version 2.0*.
        -: 7454:
        -: 7455:**Example**
        -: 7456:
        -: 7457:[doctest]: # ()
        -: 7458:
        -: 7459:```c
        -: 7460:#include "jerryscript.h"
        -: 7461:
        -: 7462:int
    #####: 7463:main (void)
        -: 7464:{
        -: 7465:  static uint32_t snapshot_buffer[256];
    #####: 7466:  const jerry_char_t func_args[] = "a, b";
    #####: 7467:  const jerry_char_t func_src[] = "return a + b;";
        -: 7468:
    #####: 7469:  jerry_init (JERRY_INIT_EMPTY);
        -: 7470:
        -: 7471:  jerry_value_t generate_result;
    #####: 7472:  generate_result = jerry_generate_function_snapshot (NULL,
        -: 7473:                                                      0,
        -: 7474:                                                      func_src,
        -: 7475:                                                      sizeof (func_src) - 1,
        -: 7476:                                                      func_args,
        -: 7477:                                                      sizeof (func_args) - 1,
        -: 7478:                                                      false,
        -: 7479:                                                      snapshot_buffer,
        -: 7480:                                                      sizeof (snapshot_buffer) / sizeof (uint32_t));
        -: 7481:
    #####: 7482:  size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####: 7483:  jerry_release_value (generate_result);
        -: 7484:
    #####: 7485:  jerry_cleanup ();
        -: 7486:
    #####: 7487:  jerry_init (JERRY_INIT_EMPTY);
        -: 7488:
    #####: 7489:  jerry_value_t func = jerry_load_function_snapshot (snapshot_buffer,
        -: 7490:                                                     snapshot_size,
        -: 7491:                                                     0,
        -: 7492:                                                     0);
        -: 7493:  /* 'func' can be used now as a function object */
        -: 7494:
    #####: 7495:  jerry_value_t this_value = jerry_create_undefined ();
        -: 7496:  jerry_value_t args[2];
    #####: 7497:  args[0] = jerry_create_number (1.0);
    #####: 7498:  args[1] = jerry_create_number (2.0);
        -: 7499:
    #####: 7500:  jerry_value_t res = jerry_call_function (func, this_value, args, 2);
        -: 7501:
        -: 7502:  /* 'res' now contains the value 3 as a jerry_value_t */
        -: 7503:
    #####: 7504:  jerry_release_value (args[0]);
    #####: 7505:  jerry_release_value (args[1]);
    #####: 7506:  jerry_release_value (this_value);
    #####: 7507:  jerry_release_value (func);
        -: 7508:
    #####: 7509:  jerry_cleanup ();
    #####: 7510:  return 0;
        -: 7511:}
        -: 7512:```
        -: 7513:
        -: 7514:**See also**
        -: 7515:
        -: 7516:- [jerry_init](#jerry_init)
        -: 7517:- [jerry_cleanup](#jerry_cleanup)
        -: 7518:- [jerry_parse_and_save_function_snapshot](#jerry_parse_and_save_function_snapshot)
        -: 7519:
        -: 7520:
        -: 7521:## jerry_get_literals_from_snapshot
        -: 7522:
        -: 7523:**Summary**
        -: 7524:
        -: 7525:Collect the used literals from the given snapshot and save them into a buffer in list or C format.
        -: 7526:None of these literals are magic strings. In C format only valid identifiers are collected.
        -: 7527:
        -: 7528:*Note*:
        -: 7529:- This API depends on a build option (`JERRY_SNAPSHOT_SAVE`) and can be checked in runtime with
        -: 7530:  the `JERRY_FEATURE_SNAPSHOT_SAVE` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 7531:  If the feature is not enabled the function will return zero.
        -: 7532:
        -: 7533:**Prototype**
        -: 7534:
        -: 7535:```c
        -: 7536:size_t
        -: 7537:jerry_get_literals_from_snapshot (const uint32_t *snapshot_p,
        -: 7538:                                  size_t snapshot_size,
        -: 7539:                                  jerry_char_t *lit_buf_p,
        -: 7540:                                  size_t lit_buf_size,
        -: 7541:                                  bool is_c_format);
        -: 7542:```
        -: 7543:
        -: 7544:- `snapshot_p` - input snapshot buffer.
        -: 7545:- `snapshot_size` - size of snapshot in bytes.
        -: 7546:- `lit_buf_p` - buffer to save literals to.
        -: 7547:- `lit_buf_size` - the buffer's size.
        -: 7548:- `is_c_format` - the output format would be C-style (true) or a simple list (false).
        -: 7549:- return value
        -: 7550:  - the size of the literal-list, if it was generated succesfully (i.e. the list of literals isn't empty,
        -: 7551:    and literal-save support is enabled in current configuration through JERRY_SNAPSHOT_SAVE)
        -: 7552:  - 0 otherwise.
        -: 7553:
        -: 7554:*New in version 2.0*.
        -: 7555:
        -: 7556:**Example**
        -: 7557:
        -: 7558:[doctest]: # (test="link")
        -: 7559:
        -: 7560:```c
        -: 7561:#include <stdio.h>
        -: 7562:#include "jerryscript.h"
        -: 7563:
        -: 7564:int
    #####: 7565:main (void)
        -: 7566:{
    #####: 7567:  jerry_init (JERRY_INIT_EMPTY);
        -: 7568:
        -: 7569:  static jerry_char_t literal_buffer[256];
        -: 7570:  static uint32_t snapshot_buffer[256];
    #####: 7571:  const jerry_char_t script_for_literal_save[] = "var obj = { a:'aa', bb:'Bb' }";
        -: 7572:
    #####: 7573:  jerry_value_t generate_result = jerry_generate_snapshot (NULL,
        -: 7574:                                                           0,
        -: 7575:                                                           script_for_literal_save,
        -: 7576:                                                           sizeof (script_for_literal_save) - 1,
        -: 7577:                                                           0,
        -: 7578:                                                           snapshot_buffer,
        -: 7579:                                                           256);
    #####: 7580:  size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####: 7581:  jerry_release_value (generate_result);
        -: 7582:
    #####: 7583:  const size_t literal_size = jerry_get_literals_from_snapshot (snapshot_buffer,
        -: 7584:                                                                snapshot_size,
        -: 7585:                                                                literal_buffer,
        -: 7586:                                                                256,
        -: 7587:                                                                true);
        -: 7588:
    #####: 7589:  if (literal_size != 0)
        -: 7590:  {
    #####: 7591:    FILE *literal_file_p = fopen ("literals.h", "wb");
    #####: 7592:    fwrite (literal_buffer, sizeof (uint8_t), literal_size, literal_file_p);
    #####: 7593:    fclose (literal_file_p);
        -: 7594:  }
        -: 7595:
    #####: 7596:  jerry_cleanup ();
    #####: 7597:  return 0;
        -: 7598:}
        -: 7599:```
        -: 7600:
        -: 7601:**See also**
        -: 7602:
        -: 7603:- [jerry_init](#jerry_init)
        -: 7604:- [jerry_cleanup](#jerry_cleanup)
        -: 7605:- [jerry_register_magic_strings](#jerry_register_magic_strings)
        -: 7606:
        -: 7607:
        -: 7608:# Miscellaneous functions
        -: 7609:
        -: 7610:## jerry_set_vm_exec_stop_callback
        -: 7611:
        -: 7612:**Summary**
        -: 7613:
        -: 7614:When JERRY_FEATURE_VM_EXEC_STOP is enabled a callback function can be
        -: 7615:specified by this function. This callback is periodically called when
        -: 7616:JerryScript executes an ECMAScript program.
        -: 7617:
        -: 7618:If the callback returns with undefined value the ECMAScript execution
        -: 7619:continues. Otherwise the result is thrown by the engine (if the error
        -: 7620:flag is not set for the returned value the engine automatically sets
        -: 7621:it). The callback function might be called again even if it threw
        -: 7622:an error. In this case the function must throw the same error again.
        -: 7623:
        -: 7624:To reduce the CPU overhead of constantly checking the termination
        -: 7625:condition the callback is called when a backward jump is executed
        -: 7626:or an exception is caught. Setting the `frequency` to a greater
        -: 7627:than `1` value reduces this overhead further. If its value is N
        -: 7628:only every Nth event (backward jump, etc.) trigger the next check.
        -: 7629:
        -: 7630:
        -: 7631:**Prototype**
        -: 7632:
        -: 7633:```c
        -: 7634:void
        -: 7635:jerry_set_vm_exec_stop_callback (jerry_vm_exec_stop_callback_t stop_cb,
        -: 7636:                                 void *user_p,
        -: 7637:                                 uint32_t frequency);
        -: 7638:```
        -: 7639:
        -: 7640:- `stop_cb` - periodically called callback (passing NULL disables this feature)
        -: 7641:- `user_p` - user pointer passed to the `stop_cb` function
        -: 7642:- `frequency` - frequency of calling the `stop_cb` function
        -: 7643:
        -: 7644:*New in version 2.0*.
        -: 7645:
        -: 7646:**Example**
        -: 7647:
        -: 7648:[doctest]: # (test="link")
        -: 7649:
        -: 7650:```c
        -: 7651:#include "jerryscript.h"
        -: 7652:
        -: 7653:static int countdown = 10;
        -: 7654:
        -: 7655:static jerry_value_t
    #####: 7656:vm_exec_stop_callback (void *user_p)
        -: 7657:{
    #####: 7658:  while (countdown > 0)
        -: 7659:  {
    #####: 7660:    countdown--;
    #####: 7661:    return jerry_create_undefined ();
        -: 7662:  }
        -: 7663:
        -: 7664:  // The error flag is added automatically.
    #####: 7665:  return jerry_create_string ((const jerry_char_t *) "Abort script");
        -: 7666:}
        -: 7667:
        -: 7668:int
    #####: 7669:main (void)
        -: 7670:{
    #####: 7671:  jerry_init (JERRY_INIT_EMPTY);
        -: 7672:
    #####: 7673:  jerry_set_vm_exec_stop_callback (vm_exec_stop_callback, &countdown, 16);
        -: 7674:
        -: 7675:  // Inifinte loop.
    #####: 7676:  const jerry_char_t script[] = "while(true) {}";
        -: 7677:
    #####: 7678:  jerry_value_t parsed_code = jerry_parse (NULL, 0, script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
    #####: 7679:  jerry_release_value (jerry_run (parsed_code));
    #####: 7680:  jerry_release_value (parsed_code);
    #####: 7681:  jerry_cleanup ();
        -: 7682:}
        -: 7683:```
        -: 7684:
        -: 7685:**See also**
        -: 7686:
        -: 7687:- [jerry_init](#jerry_init)
        -: 7688:- [jerry_cleanup](#jerry_cleanup)
        -: 7689:- [jerry_parse](#jerry_parse)
        -: 7690:- [jerry_run](#jerry_run)
        -: 7691:- [jerry_vm_exec_stop_callback_t](#jerry_vm_exec_stop_callback_t)
        -: 7692:
        -: 7693:## jerry_get_backtrace
        -: 7694:
        -: 7695:**Summary**
        -: 7696:
        -: 7697:Get backtrace. The backtrace is an array of strings where
        -: 7698:each string contains the position of the corresponding frame.
        -: 7699:The array length is zero if the backtrace is not available.
        -: 7700:
        -: 7701:This function is typically called from native callbacks.
        -: 7702:
        -: 7703:*Notes*:
        -: 7704:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7705:is no longer needed.
        -: 7706:- This feature depends on build option (`JERRY_LINE_INFO`) and can be checked
        -: 7707:  in runtime with the `JERRY_FEATURE_LINE_INFO` feature enum value,
        -: 7708:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 7709:
        -: 7710:**Prototype**
        -: 7711:
        -: 7712:```c
        -: 7713:jerry_value_t
        -: 7714:jerry_get_backtrace (uint32_t max_depth);
        -: 7715:```
        -: 7716:
        -: 7717:- `max_depth` - backtrace collection stops after reaching this value, 0 = unlimited
        -: 7718:- return value
        -: 7719:  - a newly constructed JS array
        -: 7720:
        -: 7721:*New in version 2.0*.
        -: 7722:
        -: 7723:**Example**
        -: 7724:
        -: 7725:[doctest]: # (name="02.API-REFERENCE-jsbacktrace.c")
        -: 7726:
        -: 7727:```c
        -: 7728:#include <stdio.h>
        -: 7729:#include <string.h>
        -: 7730:#include "jerryscript.h"
        -: 7731:
        -: 7732:static jerry_value_t
    #####: 7733:backtrace_handler (const jerry_value_t function_obj,
        -: 7734:                   const jerry_value_t this_val,
        -: 7735:                   const jerry_value_t args_p[],
        -: 7736:                   const jerry_length_t args_count)
        -: 7737:{
    #####: 7738:  if (!jerry_is_feature_enabled (JERRY_FEATURE_LINE_INFO))
        -: 7739:  {
    #####: 7740:    printf ("Line info disabled, no backtrace will be printed\n");
        -: 7741:  }
        -: 7742:
        -: 7743:  /* If the line info feature is disabled an empty array will be returned. */
    #####: 7744:  jerry_value_t backtrace_array = jerry_get_backtrace (5);
    #####: 7745:  uint32_t array_length = jerry_get_array_length (backtrace_array);
        -: 7746:
    #####: 7747:  for (uint32_t idx = 0; idx < array_length; idx++)
        -: 7748:  {
    #####: 7749:    jerry_value_t property = jerry_get_property_by_index (backtrace_array, idx);
        -: 7750:
        -: 7751:    jerry_char_t string_buffer[64];
    #####: 7752:    jerry_size_t copied_bytes = jerry_substring_to_char_buffer (property,
        -: 7753:                                                                0,
        -: 7754:                                                                63,
        -: 7755:                                                                string_buffer,
        -: 7756:                                                                63);
    #####: 7757:    string_buffer[copied_bytes] = '\0';
    #####: 7758:    printf(" %d: %s\n", idx, string_buffer);
        -: 7759:
    #####: 7760:    jerry_release_value (property);
        -: 7761:  }
        -: 7762:
    #####: 7763:  jerry_release_value (backtrace_array);
        -: 7764:
    #####: 7765:  return jerry_create_undefined ();
        -: 7766:} /* backtrace_handler */
        -: 7767:
        -: 7768:int
    #####: 7769:main (void)
        -: 7770:{
    #####: 7771:  jerry_init (JERRY_INIT_EMPTY);
        -: 7772:
    #####: 7773:  jerry_value_t global = jerry_get_global_object ();
        -: 7774:
        -: 7775:  /* Register the "dump_backtrace" method. */
        -: 7776:  {
    #####: 7777:    jerry_value_t func = jerry_create_external_function (backtrace_handler);
    #####: 7778:    jerry_value_t name = jerry_create_string ((const jerry_char_t *) "backtrace");
    #####: 7779:    jerry_value_t result = jerry_set_property (global, name, func);
    #####: 7780:    jerry_release_value (result);
    #####: 7781:    jerry_release_value (name);
    #####: 7782:    jerry_release_value (func);
        -: 7783:  }
        -: 7784:
    #####: 7785:  jerry_release_value (global);
        -: 7786:
    #####: 7787:  const char *source = ("function f() { g (); }\n"
        -: 7788:                        "function g() { h (); }\n"
        -: 7789:                        "function h() { backtrace (); }\n"
        -: 7790:                        "f ();\n");
    #####: 7791:  const char *resource = "demo_memoryjs";
        -: 7792:
    #####: 7793:  jerry_value_t program = jerry_parse ((const jerry_char_t *) resource,
        -: 7794:                                       strlen (resource),
        -: 7795:                                       (const jerry_char_t *) source,
        -: 7796:                                       strlen (source),
        -: 7797:                                       JERRY_PARSE_NO_OPTS);
    #####: 7798:  if (!jerry_value_is_error (program))
        -: 7799:  {
    #####: 7800:    jerry_value_t run_result = jerry_run (program);
    #####: 7801:    jerry_release_value (run_result);
        -: 7802:  }
        -: 7803:
    #####: 7804:  jerry_release_value (program);
    #####: 7805:  jerry_cleanup ();
        -: 7806:
    #####: 7807:  return 0;
        -: 7808:}
        -: 7809:```
        -: 7810:
        -: 7811:**See also**
        -: 7812:
        -: 7813:- [jerry_create_external_function](#jerry_create_external_function)
        -: 7814:
        -: 7815:
        -: 7816:## jerry_get_resource_name
        -: 7817:
        -: 7818:**Summary**
        -: 7819:
        -: 7820:Get the resource name (usually a file name) of the currently executed script or the given function object.
        -: 7821:
        -: 7822:This function is typically called from native callbacks.
        -: 7823:
        -: 7824:*Notes*:
        -: 7825:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7826:is no longer needed.
        -: 7827:- This feature depends on build option (`JERRY_LINE_INFO`) and can be checked
        -: 7828:  in runtime with the `JERRY_FEATURE_LINE_INFO` feature enum value,
        -: 7829:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 7830:
        -: 7831:**Prototype**
        -: 7832:
        -: 7833:```c
        -: 7834:jerry_value_t
        -: 7835:jerry_get_resource_name (jerry_value_t value);
        -: 7836:```
        -: 7837:- `value` - api value to obtain the resource name from
        -: 7838:- return string value constructed from
        -: 7839:  - the currently executed function object's resource name, if the given value is undefined
        -: 7840:  - resource name of the function object, if the given value is a function object
        -: 7841:  - "<anonymous>", otherwise
        -: 7842:
        -: 7843:*New in version 2.2*.
        -: 7844:
        -: 7845:**Example**
        -: 7846:
        -: 7847:[doctest]: # (name="02.API-REFERENCE-jsresourcename.c")
        -: 7848:
        -: 7849:```c
        -: 7850:#include <stdio.h>
        -: 7851:#include <string.h>
        -: 7852:#include "jerryscript.h"
        -: 7853:
        -: 7854:static jerry_value_t
    #####: 7855:resource_name_handler (const jerry_value_t function_obj,
        -: 7856:                       const jerry_value_t this_val,
        -: 7857:                       const jerry_value_t args_p[],
        -: 7858:                       const jerry_length_t args_count)
        -: 7859:{
    #####: 7860:  jerry_value_t undefined_value = jerry_create_undefined ();
    #####: 7861:  jerry_value_t resource_name = jerry_get_resource_name (args_count > 0 ? args_p[0] : undefined_value);
    #####: 7862:  jerry_release_value (undefined_value);
        -: 7863:
    #####: 7864:  return resource_name;
        -: 7865:} /* resource_name_handler */
        -: 7866:
        -: 7867:int
    #####: 7868:main (void)
        -: 7869:{
    #####: 7870:  jerry_init (JERRY_INIT_EMPTY);
        -: 7871:
    #####: 7872:  jerry_value_t global = jerry_get_global_object ();
        -: 7873:
        -: 7874:  /* Register the "resourceName" method. */
        -: 7875:  {
    #####: 7876:    jerry_value_t func = jerry_create_external_function (resource_name_handler);
    #####: 7877:    jerry_value_t name = jerry_create_string ((const jerry_char_t *) "resourceName");
    #####: 7878:    jerry_value_t result = jerry_set_property (global, name, func);
    #####: 7879:    jerry_release_value (result);
    #####: 7880:    jerry_release_value (name);
    #####: 7881:    jerry_release_value (func);
        -: 7882:  }
        -: 7883:
    #####: 7884:  jerry_release_value (global);
        -: 7885:
    #####: 7886:  const jerry_char_t source[] = "function myFunction() { return resourceName() }; myFunction()";
    #####: 7887:  const jerry_char_t resource[] = "demo.js";
        -: 7888:
    #####: 7889:  jerry_value_t program = jerry_parse (resource,
        -: 7890:                                       sizeof (resource) - 1,
        -: 7891:                                       source,
        -: 7892:                                       sizeof (source) - 1,
        -: 7893:                                       JERRY_PARSE_NO_OPTS);
        -: 7894:
    #####: 7895:  if (!jerry_value_is_error (program))
        -: 7896:  {
        -: 7897:    /* `run_result` contains "demo.js" */
    #####: 7898:    jerry_value_t run_result = jerry_run (program);
        -: 7899:
        -: 7900:    /* usage of `run_result` */
        -: 7901:
    #####: 7902:    jerry_release_value (run_result);
        -: 7903:  }
        -: 7904:
    #####: 7905:  jerry_release_value (program);
    #####: 7906:  jerry_cleanup ();
        -: 7907:
    #####: 7908:  return 0;
        -: 7909:}
        -: 7910:```
        -: 7911:
        -: 7912:**See also**
        -: 7913:
        -: 7914:- [jerry_create_external_function](#jerry_create_external_function)
        -: 7915:
        -: 7916:## jerry_get_new_target
        -: 7917:
        -: 7918:**Summary**
        -: 7919:
        -: 7920:Returns the current "new.target" JavaScript function at the call site.
        -: 7921:
        -: 7922:If used outside of a native C function it will return "undefined" value.
        -: 7923:
        -: 7924:*Notes*:
        -: 7925:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7926:is no longer needed.
        -: 7927:- This feature depends on build option (`JERRY_ES2015`) and can be checked
        -: 7928:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value (as symbols are enabled in case of ES2015),
        -: 7929:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 7930:- If the ES2015 mode is not enabled this method will always return the "undefined" value.
        -: 7931:
        -: 7932:**Prototype**
        -: 7933:
        -: 7934:```c
        -: 7935:jerry_value_t
        -: 7936:jerry_get_new_target (void);
        -: 7937:```
        -: 7938:- return
        -: 7939:  - "undefined" - if at the call site it was not a constructor call.
        -: 7940:  - function object - if the current call site is in a constructor call.
        -: 7941:
        -: 7942:*New in version 2.2*.
        -: 7943:
        -: 7944:**Example 1**
        -: 7945:
        -: 7946:[doctest]: # (name="02.API-REFERENCE-jsnewtarget-01.c")
        -: 7947:
        -: 7948:```c
        -: 7949:#include <stdio.h>
        -: 7950:#include <string.h>
        -: 7951:#include <jerryscript.h>
        -: 7952:
        -: 7953:static jerry_value_t
    #####: 7954:demo_handler (const jerry_value_t func_obj_val,
        -: 7955:              const jerry_value_t this_val,
        -: 7956:              const jerry_value_t args_p[],
        -: 7957:              const jerry_length_t args_cnt)
        -: 7958:{
    #####: 7959:  jerry_value_t new_target = jerry_get_new_target ();
        -: 7960:
        -: 7961:  /* new_target is the "demo" JS function object */
    #####: 7962:  if (jerry_value_get_type (new_target) == JERRY_TYPE_FUNCTION)
        -: 7963:  {
    #####: 7964:    printf ("This is a construct call\r\n");
        -: 7965:  }
        -: 7966:
    #####: 7967:  jerry_release_value (new_target);
        -: 7968:
    #####: 7969:  return jerry_create_undefined ();
        -: 7970:}
        -: 7971:
        -: 7972:int
    #####: 7973:main (int argc, char** argv)
        -: 7974:{
    #####: 7975:  jerry_init (JERRY_INIT_EMPTY);
        -: 7976:
    #####: 7977:  jerry_value_t function_val = jerry_create_external_function (demo_handler);
        -: 7978:
    #####: 7979:  jerry_value_t ret_val = jerry_construct_object (function_val, NULL, 0);
        -: 7980:
    #####: 7981:  jerry_release_value (ret_val);
    #####: 7982:  jerry_release_value (function_val);
        -: 7983:
    #####: 7984:  jerry_cleanup ();
    #####: 7985:  return 0;
        -: 7986:}
        -: 7987:```
        -: 7988:
        -: 7989:**Example 2**
        -: 7990:
        -: 7991:[doctest]: # (name="02.API-REFERENCE-jsnewtarget-02.c")
        -: 7992:
        -: 7993:```c
        -: 7994:#include <stdio.h>
        -: 7995:#include <string.h>
        -: 7996:#include <jerryscript.h>
        -: 7997:
        -: 7998:static jerry_value_t
    #####: 7999:demo_handler (const jerry_value_t func_obj_val,
        -: 8000:              const jerry_value_t this_val,
        -: 8001:              const jerry_value_t args_p[],
        -: 8002:              const jerry_length_t args_cnt)
        -: 8003:{
    #####: 8004:  jerry_value_t new_target = jerry_get_new_target ();
        -: 8005:
        -: 8006:  /* new_target is a JS function object */
    #####: 8007:  if (jerry_value_get_type (new_target) == JERRY_TYPE_FUNCTION)
        -: 8008:  {
    #####: 8009:    printf ("This is a construct call\r\n");
        -: 8010:  }
        -: 8011:
    #####: 8012:  jerry_release_value (new_target);
        -: 8013:
    #####: 8014:  return jerry_create_undefined ();
        -: 8015:}
        -: 8016:
        -: 8017:int
    #####: 8018:main (int argc, char** argv)
        -: 8019:{
    #####: 8020:  jerry_init (JERRY_INIT_EMPTY);
        -: 8021:
        -: 8022:  /* register C method */
    #####: 8023:  jerry_value_t global_obj_val = jerry_get_global_object ();
    #####: 8024:  jerry_value_t function_val = jerry_create_external_function (demo_handler);
    #####: 8025:  jerry_value_t function_name_val = jerry_create_string ((const jerry_char_t *) "demo");
    #####: 8026:  jerry_value_t result_val = jerry_set_property (global_obj_val, function_name_val, function_val);
    #####: 8027:  jerry_release_value (result_val);
    #####: 8028:  jerry_release_value (function_name_val);
    #####: 8029:  jerry_release_value (function_val);
    #####: 8030:  jerry_release_value (global_obj_val);
        -: 8031:
        -: 8032:  /* Invoke C method via JS */
    #####: 8033:  const char *src = "new demo ()";
    #####: 8034:  jerry_value_t ret_val = jerry_eval ((const jerry_char_t *) src,
        -: 8035:                                      strlen (src),
        -: 8036:                                      JERRY_PARSE_NO_OPTS);
        -: 8037:
    #####: 8038:  jerry_release_value (ret_val);
        -: 8039:
    #####: 8040:  jerry_cleanup ();
    #####: 8041:  return 0;
        -: 8042:}
        -: 8043:```
        -: 8044:
        -: 8045:**See also**
        -: 8046:
        -: 8047:- [jerry_construct_object](#jerry_construct_object)
        -: 8048:
        -: 8049:# ArrayBuffer and TypedArray functions
        -: 8050:
        -: 8051:These APIs all depend on the ES2015-subset profile.
        -: 8052:
        -: 8053:## jerry_get_arraybuffer_byte_length
        -: 8054:
        -: 8055:**Summary**
        -: 8056:
        -: 8057:Get the byte length property of the ArrayBuffer. This is the
        -: 8058:same value which was passed to the ArrayBuffer constructor call.
        -: 8059:
        -: 8060:**Prototype**
        -: 8061:
        -: 8062:```c
        -: 8063:jerry_length_t
        -: 8064:jerry_get_arraybuffer_byte_length (const jerry_value_t value);
        -: 8065:```
        -: 8066:
        -: 8067:- `value` - ArrayBuffer object
        -: 8068:- return value
        -: 8069:  - size of the ArrayBuffer in bytes
        -: 8070:  - 0 if the `value` parameter is not an ArrayBuffer
        -: 8071:
        -: 8072:*New in version 2.0*.
        -: 8073:
        -: 8074:**Example**
        -: 8075:
        -: 8076:```c
        -: 8077:{
        -: 8078:  jerry_value_t buffer = jerry_create_arraybuffer (15);
        -: 8079:  jerry_length_t length = jerry_get_arraybuffer_byte_length (buffer);
        -: 8080:  // length should be 15
        -: 8081:
        -: 8082:  jerry_release_value (buffer);
        -: 8083:}
        -: 8084:```
        -: 8085:
        -: 8086:**See also**
        -: 8087:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -: 8088:
        -: 8089:
        -: 8090:## jerry_arraybuffer_read
        -: 8091:
        -: 8092:**Summary**
        -: 8093:
        -: 8094:Copy the portion of the ArrayBuffer into a user provided buffer.
        -: 8095:The start offset of the read operation can be specified.
        -: 8096:
        -: 8097:The number bytes to be read can be specified via the `buf_size`
        -: 8098:parameter. It is not possible to read more than the length of
        -: 8099:the ArrayBuffer.
        -: 8100:
        -: 8101:Function returns the number of bytes read from the ArrayBuffer
        -: 8102:(and written to the buffer parameter). This value is
        -: 8103:calculated in the following way: `min(array buffer length - offset, buf_size)`.
        -: 8104:
        -: 8105:**Prototype**
        -: 8106:
        -: 8107:```c
        -: 8108:jerry_length_t
        -: 8109:jerry_arraybuffer_read (const jerry_value_t value,
        -: 8110:                        jerry_length_t offset,
        -: 8111:                        uint8_t *buf_p,
        -: 8112:                        jerry_length_t buf_size);
        -: 8113:```
        -: 8114:
        -: 8115:- `value` - ArrayBuffer to read from
        -: 8116:- `offset` - start offset of the read operation
        -: 8117:- `buf_p` - buffer to read the data to
        -: 8118:- `buf_size` - maximum number of bytes to read into the buffer
        -: 8119:- return value
        -: 8120:  - number of bytes written into the buffer (read from the ArrayBuffer)
        -: 8121:  - 0 if the `value` is not an ArrayBuffer object
        -: 8122:  - 0 if the `buf_size` is zero or there is nothing to read
        -: 8123:
        -: 8124:*New in version 2.0*.
        -: 8125:
        -: 8126:**Example**
        -: 8127:
        -: 8128:```c
        -: 8129:{
        -: 8130:  uint8_t data[20];
        -: 8131:  jerry_value_t buffer;
        -: 8132:  // ... create the ArrayBuffer or acuiqre it from somewhere.
        -: 8133:
        -: 8134:  jerry_value_t bytes_read;
        -: 8135:
        -: 8136:  // read 10 bytes from the start of the ArrayBuffer.
        -: 8137:  bytes_read = jerry_arraybuffer_read (buffer, 0, data, 10);
        -: 8138:  // read the next 10 bytes
        -: 8139:  bytes_read += jerry_arraybuffer_read (buffer, bytes_read, data + bytes_read, 10);
        -: 8140:
        -: 8141:  // process the data variable
        -: 8142:
        -: 8143:  jerry_release_value (buffer);
        -: 8144:}
        -: 8145:```
        -: 8146:
        -: 8147:**See also**
        -: 8148:
        -: 8149:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -: 8150:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 8151:- [jerry_get_arraybuffer_byte_length](#jerry_get_arraybuffer_byte_length)
        -: 8152:
        -: 8153:
        -: 8154:## jerry_arraybuffer_write
        -: 8155:
        -: 8156:**Summary**
        -: 8157:
        -: 8158:Copy the contents of a buffer into the ArrayBuffer.
        -: 8159:The start offset of the write operation can be specified.
        -: 8160:
        -: 8161:The number bytes to be written can be specified via the `buf_size`
        -: 8162:parameter. It is not possible to write more than the length of
        -: 8163:the ArrayBuffer.
        -: 8164:
        -: 8165:Function returns the number of bytes written into the ArrayBuffer
        -: 8166:(and read from the buffer parameter). This value is
        -: 8167:calculated in the following way: `min(array buffer length - offset, buf_size)`.
        -: 8168:
        -: 8169:**Prototype**
        -: 8170:
        -: 8171:```c
        -: 8172:jerry_length_t
        -: 8173:jerry_arraybuffer_write (const jerry_value_t value,
        -: 8174:                         jerry_length_t offset,
        -: 8175:                         const uint8_t *buf_p,
        -: 8176:                         jerry_length_t buf_size);
        -: 8177:```
        -: 8178:
        -: 8179:- `value` - ArrayBuffer to write to
        -: 8180:- `offset` - start offset of the write operation
        -: 8181:- `buf_p` - buffer to read the data from
        -: 8182:- `buf_size` - maximum number of bytes to write into the ArrayBuffer
        -: 8183:- return value
        -: 8184:  - number of bytes written into the ArrayBuffer (read from the buffer parameter)
        -: 8185:  - 0 if the `value` is not an ArrayBuffer object
        -: 8186:  - 0 if the `buf_size` is zero or there is nothing to write
        -: 8187:
        -: 8188:*New in version 2.0*.
        -: 8189:
        -: 8190:**Example**
        -: 8191:
        -: 8192:```c
        -: 8193:{
        -: 8194:  uint8_t data[20];
        -: 8195:
        -: 8196:  // fill the data with values
        -: 8197:  for (int i = 0; i < 20; i++)
        -: 8198:  {
        -: 8199:    data[i] = (uint8_t) (i * 2);
        -: 8200:  }
        -: 8201:
        -: 8202:  jerry_value_t buffer;
        -: 8203:  // ... create the ArrayBuffer or acquire it from somewhere.
        -: 8204:
        -: 8205:  jerry_value_t bytes_written;
        -: 8206:
        -: 8207:  // write 10 bytes from to the start of the ArrayBuffer.
        -: 8208:  bytes_written = jerry_arraybuffer_write (buffer, 0, data, 10);
        -: 8209:  // read the next 10 bytes
        -: 8210:  bytes_written += jerry_arraybuffer_write (buffer, bytes_written, data + bytes_written, 10);
        -: 8211:
        -: 8212:  // use the ArrayBuffer
        -: 8213:
        -: 8214:  jerry_release_value (buffer);
        -: 8215:}
        -: 8216:```
        -: 8217:
        -: 8218:**See also**
        -: 8219:
        -: 8220:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -: 8221:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 8222:- [jerry_get_arraybuffer_byte_length](#jerry_get_arraybuffer_byte_length)
        -: 8223:
        -: 8224:
        -: 8225:## jerry_get_arraybuffer_pointer
        -: 8226:
        -: 8227:**Summary**
        -: 8228:
        -: 8229:The function allows access to the contents of the Array Buffer directly.
        -: 8230:
        -: 8231:**WARNING!** This operation is for expert use only! The programmer must
        -: 8232:ensure that the returned memory area is used correctly. That is
        -: 8233:there is no out of bounds reads or writes. The lifetime of the underlying
        -: 8234:data buffer is managed by the ArrayBuffer value. Make sure to acquire the
        -: 8235:value with [`jerry_acquire_value`](#jerry_acquire_value) if the data
        -: 8236:buffer is needed later.
        -: 8237:
        -: 8238:**Prototype**
        -: 8239:
        -: 8240:```c
        -: 8241:uint8_t *
        -: 8242:jerry_get_arraybuffer_pointer (const jerry_value_t value);
        -: 8243:```
        -: 8244:
        -: 8245:- `value` - Array Buffer object.
        -: 8246:- return value
        -: 8247:  - pointer to the Array Buffer's data area.
        -: 8248:  - NULL if the `value` is not an Array Buffer object.
        -: 8249:
        -: 8250:*New in version 2.0*.
        -: 8251:
        -: 8252:**Example**
        -: 8253:
        -: 8254:```c
        -: 8255:{
        -: 8256:  // create the ArrayBuffer
        -: 8257:  jerry_value_t buffer = jerry_create_arraybuffer (16);
        -: 8258:
        -: 8259:  uint8_t *const data = jerry_get_arraybuffer_pointer (buffer);
        -: 8260:
        -: 8261:  for (int i = 0; i < 16; i++)
        -: 8262:  {
        -: 8263:    data[i] = (uint8_t) (i + 4);
        -: 8264:  }
        -: 8265:
        -: 8266:  // use the Array Buffer
        -: 8267:
        -: 8268:  // release buffer as it is not needed after this point
        -: 8269:  jerry_release_value (buffer);
        -: 8270:}
        -: 8271:```
        -: 8272:
        -: 8273:**See also**
        -: 8274:
        -: 8275:- [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external)
        -: 8276:
        -: 8277:## jerry_is_arraybuffer_detachable
        -: 8278:
        -: 8279:**Summary**
        -: 8280:
        -: 8281:Get if the ArrayBuffer is detachable.
        -: 8282:
        -: 8283:**Prototype**
        -: 8284:
        -: 8285:```c
        -: 8286:jerry_value_t
        -: 8287:jerry_is_arraybuffer_detachable (const jerry_value_t value);
        -: 8288:```
        -: 8289:
        -: 8290:- `value` - ArrayBuffer to be detached
        -: 8291:- return
        -: 8292:  - boolean value if success
        -: 8293:  - Error otherwise
        -: 8294:
        -: 8295:*New in version 2.2*.
        -: 8296:
        -: 8297:**Example**
        -: 8298:
        -: 8299:```c
        -: 8300:{
        -: 8301:  // create the ArrayBuffer
        -: 8302:  jerry_value_t buffer = jerry_create_arraybuffer (16);
        -: 8303:
        -: 8304:  jerry_value_t res = jerry_is_arraybuffer_detachable (buffer);
        -: 8305:  bool is_detachable = jerry_get_boolean_value (res);
        -: 8306:
        -: 8307:  // release buffer as it is not needed after this point
        -: 8308:  jerry_release_value (res);
        -: 8309:  jerry_release_value (buffer);
        -: 8310:}
        -: 8311:```
        -: 8312:
        -: 8313:**See also**
        -: 8314:
        -: 8315:- [jerry_detach_arraybuffer](#jerry_detach_arraybuffer)
        -: 8316:
        -: 8317:## jerry_detach_arraybuffer
        -: 8318:
        -: 8319:**Summary**
        -: 8320:
        -: 8321:Detach the underlying data block from ArrayBuffer and set its bytelength to 0.
        -: 8322:
        -: 8323:This operation requires the ArrayBuffer to be external that created by
        -: 8324:`jerry_create_arraybuffer_external`.
        -: 8325:
        -: 8326:**Prototype**
        -: 8327:
        -: 8328:```c
        -: 8329:jerry_value_t
        -: 8330:jerry_detach_arraybuffer (const jerry_value_t value);
        -: 8331:```
        -: 8332:
        -: 8333:- `value` - ArrayBuffer to be detached
        -: 8334:- return
        -: 8335:  - null value if success
        -: 8336:  - Error otherwise
        -: 8337:
        -: 8338:*New in version 2.2*.
        -: 8339:
        -: 8340:**Example**
        -: 8341:
        -: 8342:```c
        -: 8343:{
        -: 8344:  uint8_t buf[1];
        -: 8345:  jerry_size_t length = 1;
        -: 8346:  // create the ArrayBuffer
        -: 8347:  jerry_value_t buffer = jerry_create_arraybuffer (length, buf, NULL);
        -: 8348:
        -: 8349:  jerry_value_t res = jerry_detach_arraybuffer (buffer);
        -: 8350:
        -: 8351:  // release buffer as it is not needed after this point
        -: 8352:  jerry_release_value (res);
        -: 8353:  jerry_release_value (buffer);
        -: 8354:}
        -: 8355:```
        -: 8356:
        -: 8357:**See also**
        -: 8358:
        -: 8359:- [jerry_is_arraybuffer_detachable](#jerry_is_arraybuffer_detachable)
        -: 8360:
        -: 8361:## jerry_get_dataview_buffer
        -: 8362:
        -: 8363:**Summary**
        -: 8364:
        -: 8365:Get the ArrayBuffer object used by a DataView object.
        -: 8366:Additionally returns the byteLength and byteOffset properties
        -: 8367:of the DataView object.
        -: 8368:
        -: 8369:For the returned ArrayBuffer the [jerry_release_value](#jerry_release_value)
        -: 8370:must be called when it is no longer needed.
        -: 8371:
        -: 8372:**Prototype**
        -: 8373:
        -: 8374:```c
        -: 8375:jerry_value_t
        -: 8376:jerry_get_dataview_buffer (const jerry_value_t value,
        -: 8377:                           jerry_length_t *byteOffset,
        -: 8378:                           jerry_length_t *byteLength);
        -: 8379:```
        -: 8380:
        -: 8381:- `value` - DataView to get the ArrayBuffer from
        -: 8382:- `byteOffset` - (Optional) returns the start offset of the ArrayBuffer for the DataView
        -: 8383:- `byteLength` - (Optional) returns the number of bytes used from the ArrayBuffer for the DataView
        -: 8384:- return
        -: 8385:  - DataView object's underlying ArrayBuffer object
        -: 8386:  - TypeError if the `value` is not a DataView object
        -: 8387:
        -: 8388:*New in version 2.0*.
        -: 8389:
        -: 8390:**Example**
        -: 8391:
        -: 8392:[doctest]: # ()
        -: 8393:
        -: 8394:```c
        -: 8395:#include "jerryscript.h"
        -: 8396:
        -: 8397:int
    #####: 8398:main (void)
        -: 8399:{
    #####: 8400:  jerry_init (JERRY_INIT_EMPTY);
        -: 8401:
    #####: 8402:  jerry_value_t arraybuffer = jerry_create_arraybuffer (16);
    #####: 8403:  jerry_value_t dataview = jerry_create_dataview (arraybuffer, 0, 16);
    #####: 8404:  jerry_length_t byteOffset = 0;
    #####: 8405:  jerry_length_t byteLength = 0;
    #####: 8406:  jerry_value_t buffer = jerry_get_dataview_buffer (dataview, &byteOffset, &byteLength);
        -: 8407:
        -: 8408:  // buffer is an ArrayBuffer object and ArrayBuffer operations can be performed on it
        -: 8409:  // byteOffset is 0
        -: 8410:  // byteLength is 16
        -: 8411:
        -: 8412:  // usage of buffer
        -: 8413:
    #####: 8414:  jerry_release_value (buffer);
    #####: 8415:  jerry_release_value (dataview);
    #####: 8416:  jerry_release_value (arraybuffer);
        -: 8417:
    #####: 8418:  jerry_cleanup ();
        -: 8419:}
        -: 8420:```
        -: 8421:
        -: 8422:**See also**
        -: 8423:
        -: 8424:- [jerry_create_dataview](#jerry_create_dataview)
        -: 8425:
        -: 8426:
        -: 8427:## jerry_get_typedarray_type
        -: 8428:
        -: 8429:**Summary**
        -: 8430:
        -: 8431:Get the type of the TypedArray.
        -: 8432:
        -: 8433:The returned type is one of the [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 8434:enum value.
        -: 8435:
        -: 8436:**Prototype**
        -: 8437:
        -: 8438:```c
        -: 8439:jerry_typedarray_type_t
        -: 8440:jerry_get_typedarray_type (jerry_value_t value);
        -: 8441:```
        -: 8442:
        -: 8443:- `value` - TypedArray object to query for type.
        -: 8444:- return
        -: 8445:  - the type of the TypedArray
        -: 8446:  - JERRY_TYPEDARRAY_INVALID if the object was not a TypedArray
        -: 8447:
        -: 8448:*New in version 2.0*.
        -: 8449:
        -: 8450:**Example**
        -: 8451:
        -: 8452:```c
        -: 8453:{
        -: 8454:  jerry_typedarray_type_t expected_type = JERRY_TYPEDARRAY_UINT32;
        -: 8455:  jerry_value_t typedarray = jerry_create_typedarray (expected_klass, 25);
        -: 8456:
        -: 8457:  jerry_typedarray_type_t type = jerry_get_typedarray_type (typedarray);
        -: 8458:
        -: 8459:  // 'type' is now JERRY_TYPEDARRAY_UINT32
        -: 8460:
        -: 8461:  jerry_release_value (typedarray);
        -: 8462:}
        -: 8463:```
        -: 8464:
        -: 8465:**See also**
        -: 8466:
        -: 8467:- [jerry_create_typedarray](#jerry_create_typedarray)
        -: 8468:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 8469:
        -: 8470:
        -: 8471:## jerry_get_typedarray_length
        -: 8472:
        -: 8473:**Summary**
        -: 8474:
        -: 8475:Get the element count of the TypedArray as specified during creation.
        -: 8476:
        -: 8477:This is not the same as the byteLength property of a TypedArray object.
        -: 8478:
        -: 8479:**Prototype**
        -: 8480:
        -: 8481:```
        -: 8482:jerry_length_t
        -: 8483:jerry_get_typedarray_length (jerry_value_t value);
        -: 8484:```
        -: 8485:
        -: 8486:- `value` - TypedArray object to query
        -: 8487:- return
        -: 8488:  - length (element count) of the TypedArray object
        -: 8489:  - 0 if the object is not a TypedArray
        -: 8490:
        -: 8491:*New in version 2.0*.
        -: 8492:
        -: 8493:**Example**
        -: 8494:
        -: 8495:```c
        -: 8496:{
        -: 8497:  jerry_value_t array = jerry_create_typedarray (JERRY_TYPEDARRAY_INT32, 21);
        -: 8498:
        -: 8499:  jerry_length_t element_count = jerry_get_typedarray_length (array);
        -: 8500:
        -: 8501:  // element_count is now 21.
        -: 8502:
        -: 8503:  jerry_release_value (array);
        -: 8504:}
        -: 8505:```
        -: 8506:
        -: 8507:**See also**
        -: 8508:
        -: 8509:- [jerry_create_typedarray](#jerry_create_typedarray)
        -: 8510:
        -: 8511:
        -: 8512:## jerry_get_typedarray_buffer
        -: 8513:
        -: 8514:**Summary**
        -: 8515:
        -: 8516:Get the ArrayBuffer object used by a TypedArray object.
        -: 8517:Additionally returns the byteLength and byteOffset properties
        -: 8518:of the TypedArray object.
        -: 8519:
        -: 8520:For the returned ArrayBuffer the [jerry_release_value](#jerry_release_value)
        -: 8521:must be called.
        -: 8522:
        -: 8523:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8524:is no longer needed.
        -: 8525:
        -: 8526:**Prototype**
        -: 8527:
        -: 8528:```c
        -: 8529:jerry_value_t
        -: 8530:jerry_get_typedarray_buffer (jerry_value_t value,
        -: 8531:                             jerry_length_t *byteOffset,
        -: 8532:                             jerry_length_t *byteLength);
        -: 8533:```
        -: 8534:
        -: 8535:- `value` - TypedArray to get the ArrayBuffer from
        -: 8536:- `byteOffset` - (Optional) returns the start offset of the ArrayBuffer for the TypedArray
        -: 8537:- `byteLength` - (Optional) returns the number of bytes used from the ArrayBuffer for the TypedArray
        -: 8538:- return
        -: 8539:  - TypedArray object's underlying ArrayBuffer object
        -: 8540:  - TypeError if the `value` is not a TypedArray object
        -: 8541:
        -: 8542:*New in version 2.0*.
        -: 8543:
        -: 8544:**Example**
        -: 8545:
        -: 8546:```c
        -: 8547:{
        -: 8548:  jerry_value_t array = jerry_create_typedarray (JERRY_TYPEDARRAY_INT16, 11);
        -: 8549:
        -: 8550:  jerry_length_t byteLength = 0;
        -: 8551:  jerry_length_t byteOffset = 0;
        -: 8552:  jerry_value_t buffer = jerry_get_typedarray_buffer (array, &byteOffset, &byteLength);
        -: 8553:
        -: 8554:  // buffer is an ArrayBuffer object and ArrayBuffer operations can be performed on it
        -: 8555:  // byteLength is 11 * 2  (2 as the TypedArray stores Int16 that is 2 byte elements)
        -: 8556:  // byteOffset is 0
        -: 8557:
        -: 8558:  jerry_release_value (buffer);
        -: 8559:  jerry_release_value (array);
        -: 8560:}
        -: 8561:```
        -: 8562:
        -: 8563:**See also**
        -: 8564:
        -: 8565:- [jerry_create_typedarray](#jerry_create_typedarray)
        -: 8566:
        -: 8567:# JSON functions
        -: 8568:
        -: 8569:## jerry_json_parse
        -: 8570:
        -: 8571:**Summary**
        -: 8572:
        -: 8573:Returns the same result as `JSON.parse` ecmascript function.
        -: 8574:
        -: 8575:**Prototype**
        -: 8576:
        -: 8577:```c
        -: 8578:jerry_value_t
        -: 8579:jerry_json_parse (const jerry_char_t *string_p,
        -: 8580:                  jerry_size_t string_size);
        -: 8581:```
        -: 8582:
        -: 8583:- `string_p` - a JSON string
        -: 8584:- `string_size` - size of the string
        -: 8585:- return
        -: 8586:  - jerry_value_t containing the same as json.parse()
        -: 8587:  - jerry_value_t containing error massage
        -: 8588:
        -: 8589:*New in version 2.0*.
        -: 8590:
        -: 8591:**Example**
        -: 8592:
        -: 8593:```c
        -: 8594:{
        -: 8595:  const jerry_char_t data[] = "{\"name\": \"John\", \"age\": 5}";
        -: 8596:  jerry_value_t parsed_json = jerry_json_parse (data, sizeof (data) - 1);
        -: 8597:
        -: 8598:  // parsed_json now conatins all data stored in data_in_json
        -: 8599:
        -: 8600:  jerry_release_value (parsed_json);
        -: 8601:}
        -: 8602:```
        -: 8603:
        -: 8604:## jerry_json_stringify
        -: 8605:
        -: 8606:**Summary**
        -: 8607:
        -: 8608:Returns the same value as `JSON.stringify` ecmascript function.
        -: 8609:
        -: 8610:**Prototype**
        -: 8611:
        -: 8612:```c
        -: 8613:jerry_value_t
        -: 8614:jerry_json_stringify (const jerry_value_t object_to_stringify);
        -: 8615:```
        -: 8616:
        -: 8617:- `object_to_stringify` - a jerry_value_t object to stringify
        -: 8618:- return
        -: 8619:  - jerry_value_t containing the same as json.stringify()
        -: 8620:  - jerry_value_t containing error massage
        -: 8621:
        -: 8622:*New in version 2.0*.
        -: 8623:
        -: 8624:**Example**
        -: 8625:
        -: 8626:```c
        -: 8627:{
        -: 8628:  jerry_value_t obj = jerry_create_object ();
        -: 8629:  jerry_value_t key = jerry_create_string ((const jerry_char_t *) "name");
        -: 8630:  jerry_value_t value = jerry_create_string ((const jerry_char_t *) "John");
        -: 8631:  jerry_release_value (jerry_set_property (obj, key, value));
        -: 8632:  jerry_value_t stringified = jerry_json_stringify (obj);
        -: 8633:
        -: 8634:  //stringified now contains a json formated string
        -: 8635:
        -: 8636:  jerry_release_value (obj);
        -: 8637:  jerry_release_value (key);
        -: 8638:  jerry_release_value (value);
        -: 8639:  jerry_release_value (stringified);
        -: 8640:}
        -: 8641:```
