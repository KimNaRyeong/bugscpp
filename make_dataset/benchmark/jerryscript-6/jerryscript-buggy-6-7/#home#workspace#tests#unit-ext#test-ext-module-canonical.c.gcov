        -:    0:Source:/home/workspace/tests/unit-ext/test-ext-module-canonical.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <string.h>
        -:   17:
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "jerryscript-ext/module.h"
        -:   21:#include "test-common.h"
        -:   22:
        -:   23:#define ACTUAL_NAME "alice"
        -:   24:#define ALIAS_NAME  "bob"
        -:   25:
        -:   26:static jerry_value_t
    #####:   27:get_canonical_name (const jerry_value_t name)
    #####:   28:{
    #####:   29:  jerry_size_t name_size = jerry_string_size (name, JERRY_ENCODING_CESU8);
    #####:   30:  JERRY_VLA (jerry_char_t, name_string, name_size + 1);
    #####:   31:  jerry_string_to_buffer (name, JERRY_ENCODING_CESU8, name_string, name_size);
    #####:   32:  name_string[name_size] = 0;
        -:   33:
    #####:   34:  if (!strcmp ((char *) name_string, ACTUAL_NAME))
        -:   35:  {
    #####:   36:    return jerry_value_copy (name);
        -:   37:  }
    #####:   38:  else if (!strcmp ((char *) name_string, ALIAS_NAME))
        -:   39:  {
    #####:   40:    return jerry_string_sz (ACTUAL_NAME);
        -:   41:  }
        -:   42:  else
        -:   43:  {
    #####:   44:    return jerry_undefined ();
        -:   45:  }
        -:   46:} /* get_canonical_name */
        -:   47:
        -:   48:static bool
    #####:   49:resolve (const jerry_value_t canonical_name, jerry_value_t *result)
    #####:   50:{
    #####:   51:  jerry_size_t name_size = jerry_string_size (canonical_name, JERRY_ENCODING_CESU8);
    #####:   52:  JERRY_VLA (jerry_char_t, name_string, name_size + 1);
    #####:   53:  jerry_string_to_buffer (canonical_name, JERRY_ENCODING_CESU8, name_string, name_size);
    #####:   54:  name_string[name_size] = 0;
        -:   55:
    #####:   56:  if (!strcmp ((char *) name_string, ACTUAL_NAME))
        -:   57:  {
    #####:   58:    *result = jerry_object ();
    #####:   59:    return true;
        -:   60:  }
        -:   61:  return false;
        -:   62:} /* resolve */
        -:   63:
        -:   64:static const jerryx_module_resolver_t canonical_test = { .get_canonical_name_p = get_canonical_name,
        -:   65:                                                         .resolve_p = resolve };
        -:   66:
        -:   67:#define TEST_VALUE 95.0
        -:   68:
        -:   69:int
    #####:   70:main (int argc, char **argv)
        -:   71:{
        -:   72:  (void) argc;
        -:   73:  (void) argv;
        -:   74:
    #####:   75:  const jerryx_module_resolver_t *resolver = &canonical_test;
        -:   76:
    #####:   77:  jerry_init (JERRY_INIT_EMPTY);
        -:   78:
    #####:   79:  jerry_value_t actual_name = jerry_string_sz (ACTUAL_NAME);
    #####:   80:  jerry_value_t alias_name = jerry_string_sz (ALIAS_NAME);
        -:   81:
        -:   82:  /* It's important that we resolve by the non-canonical name first. */
    #####:   83:  jerry_value_t result2 = jerryx_module_resolve (alias_name, &resolver, 1);
    #####:   84:  jerry_value_t result1 = jerryx_module_resolve (actual_name, &resolver, 1);
    #####:   85:  jerry_value_free (actual_name);
    #####:   86:  jerry_value_free (alias_name);
        -:   87:
        -:   88:  /* An elaborate way of doing strict equal - set a property on one object and it "magically" appears on the other. */
    #####:   89:  jerry_value_t prop_name = jerry_string_sz ("something");
    #####:   90:  jerry_value_t prop_value = jerry_number (TEST_VALUE);
    #####:   91:  jerry_value_free (jerry_object_set (result1, prop_name, prop_value));
    #####:   92:  jerry_value_free (prop_value);
        -:   93:
    #####:   94:  prop_value = jerry_object_get (result2, prop_name);
    #####:   95:  TEST_ASSERT (jerry_value_as_number (prop_value) == TEST_VALUE);
    #####:   96:  jerry_value_free (prop_value);
        -:   97:
    #####:   98:  jerry_value_free (prop_name);
    #####:   99:  jerry_value_free (result1);
    #####:  100:  jerry_value_free (result2);
        -:  101:
    #####:  102:  jerry_cleanup ();
        -:  103:
        -:  104:  return 0;
        -:  105:} /* main */
