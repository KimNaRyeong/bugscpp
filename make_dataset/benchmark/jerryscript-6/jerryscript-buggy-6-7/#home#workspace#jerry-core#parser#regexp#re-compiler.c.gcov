        -:    0:Source:/home/workspace/jerry-core/parser/regexp/re-compiler.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "re-compiler.h"
        -:   17:
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-helpers.h"
        -:   20:#include "ecma-regexp-object.h"
        -:   21:
        -:   22:#include "jcontext.h"
        -:   23:#include "jmem.h"
        -:   24:#include "jrt-libc-includes.h"
        -:   25:#include "lit-char-helpers.h"
        -:   26:#include "re-bytecode.h"
        -:   27:#include "re-compiler-context.h"
        -:   28:#include "re-parser.h"
        -:   29:
        -:   30:#if JERRY_BUILTIN_REGEXP
        -:   31:
        -:   32:/** \addtogroup parser Parser
        -:   33: * @{
        -:   34: *
        -:   35: * \addtogroup regexparser Regular expression
        -:   36: * @{
        -:   37: *
        -:   38: * \addtogroup regexparser_compiler Compiler
        -:   39: * @{
        -:   40: */
        -:   41:
        -:   42:/**
        -:   43: * Search for the given pattern in the RegExp cache.
        -:   44: *
        -:   45: * @return pointer to bytecode if found
        -:   46: *         NULL - otherwise
        -:   47: */
        -:   48:static re_compiled_code_t *
    #####:   49:re_cache_lookup (ecma_string_t *pattern_str_p, /**< pattern string */
        -:   50:                 uint16_t flags) /**< flags */
        -:   51:{
    #####:   52:  re_compiled_code_t **cache_p = JERRY_CONTEXT (re_cache);
        -:   53:
    #####:   54:  for (uint8_t idx = 0u; idx < RE_CACHE_SIZE; idx++)
        -:   55:  {
    #####:   56:    re_compiled_code_t *cached_bytecode_p = cache_p[idx];
        -:   57:
    #####:   58:    if (cached_bytecode_p == NULL)
        -:   59:    {
    #####:   60:      break;
        -:   61:    }
        -:   62:
    #####:   63:    ecma_string_t *cached_pattern_str_p = ecma_get_string_from_value (cached_bytecode_p->source);
        -:   64:
    #####:   65:    if (cached_bytecode_p->header.status_flags == flags
    #####:   66:        && ecma_compare_ecma_strings (cached_pattern_str_p, pattern_str_p))
        -:   67:    {
    #####:   68:      return cached_bytecode_p;
        -:   69:    }
        -:   70:  }
        -:   71:
    #####:   72:  return NULL;
        -:   73:} /* re_cache_lookup */
        -:   74:
        -:   75:/**
        -:   76: * Run garbage collection in RegExp cache.
        -:   77: */
        -:   78:void
        1:   79:re_cache_gc (void)
        -:   80:{
        1:   81:  re_compiled_code_t **cache_p = JERRY_CONTEXT (re_cache);
        -:   82:
        1:   83:  for (uint32_t i = 0u; i < RE_CACHE_SIZE; i++)
        -:   84:  {
        1:   85:    const re_compiled_code_t *cached_bytecode_p = cache_p[i];
        -:   86:
        1:   87:    if (cached_bytecode_p == NULL)
        -:   88:    {
        1:   89:      break;
        -:   90:    }
        -:   91:
    #####:   92:    ecma_bytecode_deref ((ecma_compiled_code_t *) cached_bytecode_p);
    #####:   93:    cache_p[i] = NULL;
        -:   94:  }
        -:   95:
        1:   96:  JERRY_CONTEXT (re_cache_idx) = 0;
        1:   97:} /* re_cache_gc */
        -:   98:
        -:   99:/**
        -:  100: * Compilation of RegExp bytecode
        -:  101: *
        -:  102: * @return pointer to bytecode if compilation was successful
        -:  103: *         NULL - otherwise
        -:  104: */
        -:  105:re_compiled_code_t *
    #####:  106:re_compile_bytecode (ecma_string_t *pattern_str_p, /**< pattern */
        -:  107:                     uint16_t flags) /**< flags */
        -:  108:{
    #####:  109:  re_compiled_code_t *cached_bytecode_p = re_cache_lookup (pattern_str_p, flags);
        -:  110:
    #####:  111:  if (cached_bytecode_p != NULL)
        -:  112:  {
    #####:  113:    ecma_bytecode_ref ((ecma_compiled_code_t *) cached_bytecode_p);
    #####:  114:    return cached_bytecode_p;
        -:  115:  }
        -:  116:
    #####:  117:  re_compiler_ctx_t re_ctx;
    #####:  118:  re_ctx.flags = flags;
    #####:  119:  re_ctx.captures_count = 1;
    #####:  120:  re_ctx.non_captures_count = 0;
        -:  121:
    #####:  122:  re_initialize_regexp_bytecode (&re_ctx);
        -:  123:
    #####:  124:  ECMA_STRING_TO_UTF8_STRING (pattern_str_p, pattern_start_p, pattern_start_size);
        -:  125:
    #####:  126:  re_ctx.input_start_p = pattern_start_p;
    #####:  127:  re_ctx.input_curr_p = (lit_utf8_byte_t *) pattern_start_p;
    #####:  128:  re_ctx.input_end_p = pattern_start_p + pattern_start_size;
    #####:  129:  re_ctx.groups_count = -1;
        -:  130:
        -:  131:  /* Parse RegExp pattern */
    #####:  132:  ecma_value_t result = re_parse_alternative (&re_ctx, true);
        -:  133:
    #####:  134:  ECMA_FINALIZE_UTF8_STRING (pattern_start_p, pattern_start_size);
        -:  135:
    #####:  136:  if (ECMA_IS_VALUE_ERROR (result))
        -:  137:  {
        -:  138:    /* Compilation failed, free bytecode. */
    #####:  139:    jmem_heap_free_block (re_ctx.bytecode_start_p, re_ctx.bytecode_size);
    #####:  140:    return NULL;
        -:  141:  }
        -:  142:
        -:  143:  /* Align bytecode size to JMEM_ALIGNMENT so that it can be stored in the bytecode header. */
    #####:  144:  const uint32_t final_size = JERRY_ALIGNUP (re_ctx.bytecode_size, JMEM_ALIGNMENT);
    #####:  145:  re_compiled_code_t *re_compiled_code_p =
    #####:  146:    (re_compiled_code_t *) jmem_heap_realloc_block (re_ctx.bytecode_start_p, re_ctx.bytecode_size, final_size);
        -:  147:
        -:  148:  /* Bytecoded will be inserted into the cache and returned to the caller, so refcount is implicitly set to 2. */
    #####:  149:  re_compiled_code_p->header.refs = 2;
    #####:  150:  re_compiled_code_p->header.size = (uint16_t) (final_size >> JMEM_ALIGNMENT_LOG);
    #####:  151:  re_compiled_code_p->header.status_flags = re_ctx.flags;
        -:  152:
    #####:  153:  ecma_ref_ecma_string (pattern_str_p);
    #####:  154:  re_compiled_code_p->source = ecma_make_string_value (pattern_str_p);
    #####:  155:  re_compiled_code_p->captures_count = re_ctx.captures_count;
    #####:  156:  re_compiled_code_p->non_captures_count = re_ctx.non_captures_count;
        -:  157:
        -:  158:#if JERRY_REGEXP_DUMP_BYTE_CODE
        -:  159:  if (JERRY_CONTEXT (jerry_init_flags) & JERRY_INIT_SHOW_REGEXP_OPCODES)
        -:  160:  {
        -:  161:    re_dump_bytecode (&re_ctx);
        -:  162:  }
        -:  163:#endif /* JERRY_REGEXP_DUMP_BYTE_CODE */
        -:  164:
    #####:  165:  uint8_t cache_idx = JERRY_CONTEXT (re_cache_idx);
        -:  166:
    #####:  167:  if (JERRY_CONTEXT (re_cache)[cache_idx] != NULL)
        -:  168:  {
    #####:  169:    ecma_bytecode_deref ((ecma_compiled_code_t *) JERRY_CONTEXT (re_cache)[cache_idx]);
        -:  170:  }
        -:  171:
    #####:  172:  JERRY_CONTEXT (re_cache)[cache_idx] = re_compiled_code_p;
    #####:  173:  JERRY_CONTEXT (re_cache_idx) = (uint8_t) (cache_idx + 1) % RE_CACHE_SIZE;
        -:  174:
    #####:  175:  return re_compiled_code_p;
        -:  176:} /* re_compile_bytecode */
        -:  177:
        -:  178:/**
        -:  179: * @}
        -:  180: * @}
        -:  181: * @}
        -:  182: */
        -:  183:
        -:  184:#endif /* JERRY_BUILTIN_REGEXP */
