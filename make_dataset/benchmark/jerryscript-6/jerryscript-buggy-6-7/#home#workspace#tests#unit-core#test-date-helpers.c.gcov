        -:    0:Source:/home/workspace/tests/unit-core/test-date-helpers.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtin-helpers.h"
        -:   17:#include "ecma-globals.h"
        -:   18:#include "ecma-helpers.h"
        -:   19:
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:#define MS_PER_DAY  ((ecma_number_t) 86400000)
        -:   23:#define MS_PER_YEAR ((ecma_number_t) 365 * MS_PER_DAY)
        -:   24:#define START_OF_GREGORIAN_CALENDAR                                                           \
        -:   25:  ((ecma_number_t) (-1970 * MS_PER_YEAR - (1970 / 4) * MS_PER_DAY + (1970 / 100) * MS_PER_DAY \
        -:   26:                    - (1970 / 400) * MS_PER_DAY - MS_PER_DAY))
        -:   27:
        -:   28:/**
        -:   29: * Unit test's main function.
        -:   30: */
        -:   31:int
    #####:   32:main (void)
        -:   33:{
        -:   34:  /* int ecma_date_year_from_time (time) */
        -:   35:
    #####:   36:  TEST_ASSERT (ecma_date_year_from_time (0) == 1970);
    #####:   37:  TEST_ASSERT (ecma_date_year_from_time (0) == 1970);
    #####:   38:  TEST_ASSERT (ecma_date_year_from_time (MS_PER_DAY) == 1970);
    #####:   39:  TEST_ASSERT (ecma_date_year_from_time ((MS_PER_DAY) * (ecma_number_t) 365 - 1) == 1970);
    #####:   40:  TEST_ASSERT (ecma_date_year_from_time (MS_PER_DAY * (ecma_number_t) 365) == 1971);
    #####:   41:  TEST_ASSERT (ecma_date_year_from_time (MS_PER_DAY * (ecma_number_t) (365 * (2015 - 1970))) == 2014);
    #####:   42:  TEST_ASSERT (ecma_date_year_from_time (MS_PER_DAY * (ecma_number_t) (365.25 * (2015 - 1970))) == 2015);
    #####:   43:  TEST_ASSERT (ecma_date_year_from_time (-MS_PER_YEAR) == 1969);
    #####:   44:  TEST_ASSERT (ecma_date_year_from_time (-1970 * MS_PER_YEAR) == 1);
    #####:   45:  TEST_ASSERT (ecma_date_year_from_time (START_OF_GREGORIAN_CALENDAR) == 0);
    #####:   46:  TEST_ASSERT (ecma_date_year_from_time (START_OF_GREGORIAN_CALENDAR - 1) == -1);
    #####:   47:  TEST_ASSERT (ecma_date_year_from_time (START_OF_GREGORIAN_CALENDAR - 3 * MS_PER_YEAR) == -3);
        -:   48:
        -:   49:  /* int ecma_date_month_from_time  (time) */
        -:   50:
    #####:   51:  TEST_ASSERT (ecma_date_month_from_time (START_OF_GREGORIAN_CALENDAR) == 0);
    #####:   52:  TEST_ASSERT (ecma_date_month_from_time (0) == 0);
    #####:   53:  TEST_ASSERT (ecma_date_month_from_time (-MS_PER_DAY) == 11);
    #####:   54:  TEST_ASSERT (ecma_date_month_from_time (31 * MS_PER_DAY) == 1);
        -:   55:
        -:   56:  /* int ecma_date_date_from_time  (time) */
        -:   57:
    #####:   58:  TEST_ASSERT (ecma_date_date_from_time (START_OF_GREGORIAN_CALENDAR) == 1);
    #####:   59:  TEST_ASSERT (ecma_date_date_from_time (0) == 1);
    #####:   60:  TEST_ASSERT (ecma_date_date_from_time (-MS_PER_DAY) == 31);
    #####:   61:  TEST_ASSERT (ecma_date_date_from_time (31 * MS_PER_DAY) == 1);
        -:   62:
        -:   63:  /* int ecma_date_week_day (ecma_number_t time) */
        -:   64:
        -:   65:  /* FIXME: Implement */
        -:   66:
        -:   67:  /* ecma_number_t ecma_date_utc (time) */
        -:   68:
        -:   69:  /* FIXME: Implement */
        -:   70:
        -:   71:  /* ecma_number_t ecma_date_hour_from_time (time) */
        -:   72:
    #####:   73:  TEST_ASSERT (ecma_date_hour_from_time (START_OF_GREGORIAN_CALENDAR) == 0);
    #####:   74:  TEST_ASSERT (ecma_date_hour_from_time (0) == 0);
    #####:   75:  TEST_ASSERT (ecma_date_hour_from_time (-MS_PER_DAY) == 0);
    #####:   76:  TEST_ASSERT (ecma_date_hour_from_time (-1) == 23);
        -:   77:
        -:   78:  /* ecma_number_t ecma_date_min_from_time (time) */
        -:   79:
    #####:   80:  TEST_ASSERT (ecma_date_min_from_time (START_OF_GREGORIAN_CALENDAR) == 0);
    #####:   81:  TEST_ASSERT (ecma_date_min_from_time (0) == 0);
    #####:   82:  TEST_ASSERT (ecma_date_min_from_time (-MS_PER_DAY) == 0);
    #####:   83:  TEST_ASSERT (ecma_date_min_from_time (-1) == 59);
        -:   84:
        -:   85:  /* ecma_number_t ecma_date_sec_from_time (time) */
        -:   86:
    #####:   87:  TEST_ASSERT (ecma_date_sec_from_time (START_OF_GREGORIAN_CALENDAR) == 0);
    #####:   88:  TEST_ASSERT (ecma_date_sec_from_time (0) == 0);
    #####:   89:  TEST_ASSERT (ecma_date_sec_from_time (-MS_PER_DAY) == 0);
    #####:   90:  TEST_ASSERT (ecma_date_sec_from_time (-1) == 59);
        -:   91:
        -:   92:  /* ecma_number_t ecma_date_ms_from_time (time) */
        -:   93:
    #####:   94:  TEST_ASSERT (ecma_date_ms_from_time (START_OF_GREGORIAN_CALENDAR) == 0);
    #####:   95:  TEST_ASSERT (ecma_date_ms_from_time (0) == 0);
    #####:   96:  TEST_ASSERT (ecma_date_ms_from_time (-MS_PER_DAY) == 0);
    #####:   97:  TEST_ASSERT (ecma_date_ms_from_time (-1) == 999);
        -:   98:
        -:   99:  /* ecma_number_t ecma_date_make_time (hour, min, sec, ms) */
        -:  100:
        -:  101:  /* FIXME: Implement */
        -:  102:
        -:  103:  /* ecma_number_t ecma_date_make_day (year, month, date) */
        -:  104:
    #####:  105:  TEST_ASSERT (ecma_date_make_day (1970, 0, 1) == 0);
    #####:  106:  TEST_ASSERT (ecma_date_make_day (1970, -1, 1) == -2678400000);
    #####:  107:  TEST_ASSERT (ecma_date_make_day (1970, 0, 2.5) == 86400000);
    #####:  108:  TEST_ASSERT (ecma_date_make_day (1970, 1, 35) == 5616000000);
    #####:  109:  TEST_ASSERT (ecma_date_make_day (1970, 13, 35) == 37152000000);
    #####:  110:  TEST_ASSERT (ecma_date_make_day (2016, 2, 1) == 1456790400000);
    #####:  111:  TEST_ASSERT (ecma_date_make_day (2016, 8, 31) == 1475280000000);
    #####:  112:  TEST_ASSERT (ecma_date_make_day (2016, 9, 1) == 1475280000000);
        -:  113:
        -:  114:  /* ecma_number_t ecma_date_make_date (day, time) */
        -:  115:
        -:  116:  /* FIXME: Implement */
        -:  117:
        -:  118:  /* ecma_number_t ecma_date_time_clip (year) */
        -:  119:
        -:  120:  /* FIXME: Implement */
        -:  121:
        -:  122:  return 0;
        -:  123:} /* main */
