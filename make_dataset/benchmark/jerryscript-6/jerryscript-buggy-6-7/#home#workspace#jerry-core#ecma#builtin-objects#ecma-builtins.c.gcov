        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtins.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtins.h"
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-function-object.h"
        -:   21:#include "ecma-gc.h"
        -:   22:#include "ecma-globals.h"
        -:   23:#include "ecma-helpers-number.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-objects.h"
        -:   26:
        -:   27:#include "jcontext.h"
        -:   28:#include "jrt-bit-fields.h"
        -:   29:
        -:   30:#define ECMA_BUILTINS_INTERNAL
        -:   31:#include "ecma-builtins-internal.h"
        -:   32:
        -:   33:/** \addtogroup ecma ECMA
        -:   34: * @{
        -:   35: *
        -:   36: * \addtogroup ecmabuiltins
        -:   37: * @{
        -:   38: */
        -:   39:
        -:   40:JERRY_STATIC_ASSERT (ECMA_BUILTIN_ID_GLOBAL == ECMA_BUILTIN_OBJECTS_COUNT,
        -:   41:                     ecma_builtin_id_global_must_be_the_last_builtin_id);
        -:   42:
        -:   43:/**
        -:   44: * Checks whether the built-in is an ecma_extended_built_in_object_t
        -:   45: */
        -:   46:#define ECMA_BUILTIN_IS_EXTENDED_BUILT_IN(object_type) \
        -:   47:  ((object_type) == ECMA_OBJECT_TYPE_BUILT_IN_CLASS || (object_type) == ECMA_OBJECT_TYPE_BUILT_IN_ARRAY)
        -:   48:
        -:   49:/**
        -:   50: * Helper definition for ecma_builtin_property_list_references.
        -:   51: */
        -:   52:typedef const ecma_builtin_property_descriptor_t *ecma_builtin_property_list_reference_t;
        -:   53:
        -:   54:/**
        -:   55: * Definition of built-in dispatch routine function pointer.
        -:   56: */
        -:   57:typedef ecma_value_t (*ecma_builtin_dispatch_routine_t) (uint8_t builtin_routine_id,
        -:   58:                                                         ecma_value_t this_arg,
        -:   59:                                                         const ecma_value_t arguments_list[],
        -:   60:                                                         uint32_t arguments_number);
        -:   61:/**
        -:   62: * Definition of built-in dispatch call function pointer.
        -:   63: */
        -:   64:typedef ecma_value_t (*ecma_builtin_dispatch_call_t) (const ecma_value_t arguments_list[], uint32_t arguments_number);
        -:   65:/**
        -:   66: * Definition of a builtin descriptor which contains the builtin object's:
        -:   67: * - prototype objects's id (13-bits)
        -:   68: * - type (3-bits)
        -:   69: *
        -:   70: * Layout:
        -:   71: *
        -:   72: * |----------------------|---------------|
        -:   73: *     prototype_id(12)      obj_type(4)
        -:   74: */
        -:   75:typedef uint16_t ecma_builtin_descriptor_t;
        -:   76:
        -:   77:/**
        -:   78: * Bitshift index for get the prototype object's id from a builtin descriptor
        -:   79: */
        -:   80:#define ECMA_BUILTIN_PROTOTYPE_ID_SHIFT 4
        -:   81:
        -:   82:/**
        -:   83: * Bitmask for get the object's type from a builtin descriptor
        -:   84: */
        -:   85:#define ECMA_BUILTIN_OBJECT_TYPE_MASK ((1 << ECMA_BUILTIN_PROTOTYPE_ID_SHIFT) - 1)
        -:   86:
        -:   87:/**
        -:   88: * Create a builtin descriptor value
        -:   89: */
        -:   90:#define ECMA_MAKE_BUILTIN_DESCRIPTOR(type, proto_id) (((proto_id) << ECMA_BUILTIN_PROTOTYPE_ID_SHIFT) | (type))
        -:   91:
        -:   92:/**
        -:   93: * List of the built-in descriptors.
        -:   94: */
        -:   95:static const ecma_builtin_descriptor_t ecma_builtin_descriptors[] = {
        -:   96:/** @cond doxygen_suppress */
        -:   97:#define BUILTIN(a, b, c, d, e)
        -:   98:#define BUILTIN_ROUTINE(builtin_id, object_type, object_prototype_builtin_id, is_extensible, lowercase_name) \
        -:   99:  ECMA_MAKE_BUILTIN_DESCRIPTOR (object_type, object_prototype_builtin_id),
        -:  100:#include "ecma-builtins.inc.h"
        -:  101:#undef BUILTIN
        -:  102:#undef BUILTIN_ROUTINE
        -:  103:#define BUILTIN_ROUTINE(a, b, c, d, e)
        -:  104:#define BUILTIN(builtin_id, object_type, object_prototype_builtin_id, is_extensible, lowercase_name) \
        -:  105:  ECMA_MAKE_BUILTIN_DESCRIPTOR (object_type, object_prototype_builtin_id),
        -:  106:#include "ecma-builtins.inc.h"
        -:  107:#undef BUILTIN
        -:  108:#undef BUILTIN_ROUTINE
        -:  109:  /** @endcond */
        -:  110:};
        -:  111:
        -:  112:#ifndef JERRY_NDEBUG
        -:  113:/** @cond doxygen_suppress */
        -:  114:enum
        -:  115:{
        -:  116:  ECMA_BUILTIN_EXTENSIBLE_CHECK =
        -:  117:#define BUILTIN(a, b, c, d, e)
        -:  118:#define BUILTIN_ROUTINE(builtin_id, object_type, object_prototype_builtin_id, is_extensible, lowercase_name) \
        -:  119:  (is_extensible != 0 || builtin_id == ECMA_BUILTIN_ID_TYPE_ERROR_THROWER) &&
        -:  120:#include "ecma-builtins.inc.h"
        -:  121:#undef BUILTIN
        -:  122:#undef BUILTIN_ROUTINE
        -:  123:#define BUILTIN_ROUTINE(a, b, c, d, e)
        -:  124:#define BUILTIN(builtin_id, object_type, object_prototype_builtin_id, is_extensible, lowercase_name) \
        -:  125:  (is_extensible != 0 || builtin_id == ECMA_BUILTIN_ID_TYPE_ERROR_THROWER) &&
        -:  126:#include "ecma-builtins.inc.h"
        -:  127:#undef BUILTIN
        -:  128:#undef BUILTIN_ROUTINE
        -:  129:    true
        -:  130:};
        -:  131:/** @endcond */
        -:  132:
        -:  133:/**
        -:  134: * All the builtin object must be extensible except the ThrowTypeError object.
        -:  135: */
        -:  136:JERRY_STATIC_ASSERT (ECMA_BUILTIN_EXTENSIBLE_CHECK == true,
        -:  137:                     ecma_builtin_must_be_extensible_except_the_builtin_thorw_type_error_object);
        -:  138:#endif /* !JERRY_NDEBUG */
        -:  139:
        -:  140:/**
        -:  141: * List of the built-in routines.
        -:  142: */
        -:  143:static const ecma_builtin_dispatch_routine_t ecma_builtin_routines[] = {
        -:  144:/** @cond doxygen_suppress */
        -:  145:#define BUILTIN(a, b, c, d, e)
        -:  146:#define BUILTIN_ROUTINE(builtin_id, object_type, object_prototype_builtin_id, is_extensible, lowercase_name) \
        -:  147:  ecma_builtin_##lowercase_name##_dispatch_routine,
        -:  148:#include "ecma-builtins.inc.h"
        -:  149:#undef BUILTIN
        -:  150:#undef BUILTIN_ROUTINE
        -:  151:#define BUILTIN_ROUTINE(a, b, c, d, e)
        -:  152:#define BUILTIN(builtin_id, object_type, object_prototype_builtin_id, is_extensible, lowercase_name) \
        -:  153:  ecma_builtin_##lowercase_name##_dispatch_routine,
        -:  154:#include "ecma-builtins.inc.h"
        -:  155:#undef BUILTIN
        -:  156:#undef BUILTIN_ROUTINE
        -:  157:  /** @endcond */
        -:  158:};
        -:  159:
        -:  160:/**
        -:  161: * List of the built-in call functions.
        -:  162: */
        -:  163:static const ecma_builtin_dispatch_call_t ecma_builtin_call_functions[] = {
        -:  164:/** @cond doxygen_suppress */
        -:  165:#define BUILTIN(a, b, c, d, e)
        -:  166:#define BUILTIN_ROUTINE(builtin_id, object_type, object_prototype_builtin_id, is_extensible, lowercase_name) \
        -:  167:  ecma_builtin_##lowercase_name##_dispatch_call,
        -:  168:#include "ecma-builtins.inc.h"
        -:  169:#undef BUILTIN_ROUTINE
        -:  170:#undef BUILTIN
        -:  171:  /** @endcond */
        -:  172:};
        -:  173:
        -:  174:/**
        -:  175: * List of the built-in construct functions.
        -:  176: */
        -:  177:static const ecma_builtin_dispatch_call_t ecma_builtin_construct_functions[] = {
        -:  178:/** @cond doxygen_suppress */
        -:  179:#define BUILTIN(a, b, c, d, e)
        -:  180:#define BUILTIN_ROUTINE(builtin_id, object_type, object_prototype_builtin_id, is_extensible, lowercase_name) \
        -:  181:  ecma_builtin_##lowercase_name##_dispatch_construct,
        -:  182:#include "ecma-builtins.inc.h"
        -:  183:#undef BUILTIN_ROUTINE
        -:  184:#undef BUILTIN
        -:  185:  /** @endcond */
        -:  186:};
        -:  187:
        -:  188:/**
        -:  189: * Property descriptor lists for all built-ins.
        -:  190: */
        -:  191:static const ecma_builtin_property_list_reference_t ecma_builtin_property_list_references[] = {
        -:  192:/** @cond doxygen_suppress */
        -:  193:#define BUILTIN(a, b, c, d, e)
        -:  194:#define BUILTIN_ROUTINE(builtin_id, object_type, object_prototype_builtin_id, is_extensible, lowercase_name) \
        -:  195:  ecma_builtin_##lowercase_name##_property_descriptor_list,
        -:  196:#include "ecma-builtins.inc.h"
        -:  197:#undef BUILTIN
        -:  198:#undef BUILTIN_ROUTINE
        -:  199:#define BUILTIN_ROUTINE(a, b, c, d, e)
        -:  200:#define BUILTIN(builtin_id, object_type, object_prototype_builtin_id, is_extensible, lowercase_name) \
        -:  201:  ecma_builtin_##lowercase_name##_property_descriptor_list,
        -:  202:#include "ecma-builtins.inc.h"
        -:  203:#undef BUILTIN_ROUTINE
        -:  204:#undef BUILTIN
        -:  205:  /** @endcond */
        -:  206:};
        -:  207:
        -:  208:/**
        -:  209: * Get the number of properties of a built-in object.
        -:  210: *
        -:  211: * @return the number of properties
        -:  212: */
        -:  213:static size_t
       20:  214:ecma_builtin_get_property_count (ecma_builtin_id_t builtin_id) /**< built-in ID */
        -:  215:{
       20:  216:  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);
       20:  217:  const ecma_builtin_property_descriptor_t *property_list_p = ecma_builtin_property_list_references[builtin_id];
        -:  218:
       20:  219:  const ecma_builtin_property_descriptor_t *curr_property_p = property_list_p;
        -:  220:
      332:  221:  while (curr_property_p->magic_string_id != LIT_MAGIC_STRING__COUNT)
        -:  222:  {
      292:  223:    curr_property_p++;
        -:  224:  }
        -:  225:
       20:  226:  return (size_t) (curr_property_p - property_list_p);
        -:  227:} /* ecma_builtin_get_property_count */
        -:  228:
        -:  229:/**
        -:  230: * Check if passed object is a global built-in.
        -:  231: *
        -:  232: * @return true  - if the object is a global built-in
        -:  233: *         false - otherwise
        -:  234: */
        -:  235:bool
        2:  236:ecma_builtin_is_global (ecma_object_t *object_p) /**< pointer to an object */
        -:  237:{
        2:  238:  return (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL
        2:  239:          && ((ecma_extended_object_t *) object_p)->u.built_in.id == ECMA_BUILTIN_ID_GLOBAL);
        -:  240:} /* ecma_builtin_is_global */
        -:  241:
        -:  242:/**
        -:  243: * Get reference to the global object
        -:  244: *
        -:  245: * Note:
        -:  246: *   Does not increase the reference counter.
        -:  247: *
        -:  248: * @return pointer to the global object
        -:  249: */
        -:  250:extern inline ecma_object_t *JERRY_ATTR_ALWAYS_INLINE
       36:  251:ecma_builtin_get_global (void)
        -:  252:{
       48:  253:  JERRY_ASSERT (JERRY_CONTEXT (global_object_p) != NULL);
        -:  254:
       48:  255:  return (ecma_object_t *) JERRY_CONTEXT (global_object_p);
        -:  256:} /* ecma_builtin_get_global */
        -:  257:
        -:  258:/**
        -:  259: * Checks whether the given function is a built-in routine
        -:  260: *
        -:  261: * @return true - if the function object is a built-in routine
        -:  262: *         false - otherwise
        -:  263: */
        -:  264:extern inline bool JERRY_ATTR_ALWAYS_INLINE
       18:  265:ecma_builtin_function_is_routine (ecma_object_t *func_obj_p) /**< function object */
        -:  266:{
       30:  267:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
        -:  268:
       30:  269:  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) func_obj_p;
       30:  270:  return (ext_func_obj_p->u.built_in.routine_id != 0);
        -:  271:} /* ecma_builtin_function_is_routine */
        -:  272:
        -:  273:#if JERRY_BUILTIN_REALMS
        -:  274:
        -:  275:/**
        -:  276: * Get reference to the realm provided by another built-in object
        -:  277: *
        -:  278: * Note:
        -:  279: *   Does not increase the reference counter.
        -:  280: *
        -:  281: * @return pointer to the global object
        -:  282: */
        -:  283:static ecma_global_object_t *
       12:  284:ecma_builtin_get_realm (ecma_object_t *builtin_object_p) /**< built-in object */
        -:  285:{
       12:  286:  ecma_object_type_t object_type = ecma_get_object_type (builtin_object_p);
        -:  287:  ecma_value_t realm_value;
        -:  288:
       12:  289:  JERRY_ASSERT (object_type == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL || object_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS
        -:  290:                || object_type == ECMA_OBJECT_TYPE_BUILT_IN_ARRAY || object_type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
        -:  291:
       12:  292:  if (ECMA_BUILTIN_IS_EXTENDED_BUILT_IN (object_type))
        -:  293:  {
    #####:  294:    realm_value = ((ecma_extended_built_in_object_t *) builtin_object_p)->built_in.realm_value;
        -:  295:  }
        -:  296:  else
        -:  297:  {
       12:  298:    realm_value = ((ecma_extended_object_t *) builtin_object_p)->u.built_in.realm_value;
        -:  299:  }
        -:  300:
       12:  301:  return ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t, realm_value);
        -:  302:} /* ecma_builtin_get_realm */
        -:  303:
        -:  304:#endif /* JERRY_BUILTIN_REALMS */
        -:  305:
        -:  306:/**
        -:  307: * Instantiate specified ECMA built-in object
        -:  308: *
        -:  309: * @return the newly instantiated built-in
        -:  310: */
        -:  311:static ecma_object_t *
       18:  312:ecma_instantiate_builtin (ecma_global_object_t *global_object_p, /**< global object */
        -:  313:                          ecma_builtin_id_t obj_builtin_id) /**< built-in id */
        -:  314:{
       18:  315:  jmem_cpointer_t *builtin_objects = global_object_p->builtin_objects;
        -:  316:
       18:  317:  JERRY_ASSERT (obj_builtin_id < ECMA_BUILTIN_OBJECTS_COUNT);
       18:  318:  JERRY_ASSERT (builtin_objects[obj_builtin_id] == JMEM_CP_NULL);
        -:  319:
       18:  320:  ecma_builtin_descriptor_t builtin_desc = ecma_builtin_descriptors[obj_builtin_id];
       18:  321:  ecma_builtin_id_t object_prototype_builtin_id = (ecma_builtin_id_t) (builtin_desc >> ECMA_BUILTIN_PROTOTYPE_ID_SHIFT);
        -:  322:
        -:  323:  ecma_object_t *prototype_obj_p;
        -:  324:
       18:  325:  if (JERRY_UNLIKELY (object_prototype_builtin_id == ECMA_BUILTIN_ID__COUNT))
        -:  326:  {
        2:  327:    prototype_obj_p = NULL;
        -:  328:  }
        -:  329:  else
        -:  330:  {
       16:  331:    if (builtin_objects[object_prototype_builtin_id] == JMEM_CP_NULL)
        -:  332:    {
        4:  333:      ecma_instantiate_builtin (global_object_p, object_prototype_builtin_id);
        -:  334:    }
       16:  335:    prototype_obj_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, builtin_objects[object_prototype_builtin_id]);
       16:  336:    JERRY_ASSERT (prototype_obj_p != NULL);
        -:  337:  }
        -:  338:
       18:  339:  ecma_object_type_t obj_type = (ecma_object_type_t) (builtin_desc & ECMA_BUILTIN_OBJECT_TYPE_MASK);
        -:  340:
       18:  341:  JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL || obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS
        -:  342:                || obj_type == ECMA_OBJECT_TYPE_BUILT_IN_ARRAY || obj_type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
        -:  343:
       18:  344:  bool is_extended_built_in = ECMA_BUILTIN_IS_EXTENDED_BUILT_IN (obj_type);
        -:  345:
       18:  346:  size_t ext_object_size =
       18:  347:    (is_extended_built_in ? sizeof (ecma_extended_built_in_object_t) : sizeof (ecma_extended_object_t));
        -:  348:
       18:  349:  size_t property_count = ecma_builtin_get_property_count (obj_builtin_id);
        -:  350:
       18:  351:  if (property_count > ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE)
        -:  352:  {
        -:  353:    /* Only 64 extra properties supported at the moment.
        -:  354:     * This can be extended to 256 later. */
        8:  355:    JERRY_ASSERT (property_count <= (ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE + 64));
        -:  356:
        8:  357:    ext_object_size += sizeof (uint64_t);
        -:  358:  }
        -:  359:
       18:  360:  ecma_object_t *obj_p = ecma_create_object (prototype_obj_p, ext_object_size, obj_type);
        -:  361:
       18:  362:  if (JERRY_UNLIKELY (obj_builtin_id == ECMA_BUILTIN_ID_TYPE_ERROR_THROWER))
        -:  363:  {
    #####:  364:    ecma_op_ordinary_object_prevent_extensions (obj_p);
        -:  365:  }
        -:  366:  else
        -:  367:  {
       18:  368:    ecma_op_ordinary_object_set_extensible (obj_p);
        -:  369:  }
        -:  370:
        -:  371:  /*
        -:  372:   * [[Class]] property of built-in object is not stored explicitly.
        -:  373:   *
        -:  374:   * See also: ecma_object_get_class_name
        -:  375:   */
        -:  376:
        -:  377:  ecma_built_in_props_t *built_in_props_p;
        -:  378:
       18:  379:  if (is_extended_built_in)
        -:  380:  {
    #####:  381:    built_in_props_p = &((ecma_extended_built_in_object_t *) obj_p)->built_in;
        -:  382:  }
        -:  383:  else
        -:  384:  {
       18:  385:    built_in_props_p = &((ecma_extended_object_t *) obj_p)->u.built_in;
        -:  386:  }
        -:  387:
       18:  388:  built_in_props_p->id = (uint8_t) obj_builtin_id;
       18:  389:  built_in_props_p->routine_id = 0;
       18:  390:  built_in_props_p->u.length_and_bitset_size = 0;
       18:  391:  built_in_props_p->u2.instantiated_bitset[0] = 0;
        -:  392:#if JERRY_BUILTIN_REALMS
       18:  393:  ECMA_SET_INTERNAL_VALUE_POINTER (built_in_props_p->realm_value, global_object_p);
        -:  394:#else /* !JERRY_BUILTIN_REALMS */
    #####:  395:  built_in_props_p->continue_instantiated_bitset[0] = 0;
        -:  396:#endif /* JERRY_BUILTIN_REALMS */
        -:  397:
       18:  398:  if (property_count > ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE)
        -:  399:  {
        8:  400:    built_in_props_p->u.length_and_bitset_size = 1 << ECMA_BUILT_IN_BITSET_SHIFT;
        -:  401:
        8:  402:    uint32_t *instantiated_bitset_p = (uint32_t *) (built_in_props_p + 1);
        8:  403:    instantiated_bitset_p[0] = 0;
        8:  404:    instantiated_bitset_p[1] = 0;
        -:  405:  }
        -:  406:
        -:  407:  /** Initializing [[PrimitiveValue]] properties of built-in prototype objects */
       18:  408:  switch (obj_builtin_id)
        -:  409:  {
        -:  410:#if JERRY_BUILTIN_ARRAY
    #####:  411:    case ECMA_BUILTIN_ID_ARRAY_PROTOTYPE:
        -:  412:    {
    #####:  413:      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_ARRAY);
    #####:  414:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:  415:
    #####:  416:      ext_object_p->u.array.length = 0;
    #####:  417:      ext_object_p->u.array.length_prop_and_hole_count = ECMA_PROPERTY_FLAG_WRITABLE | ECMA_PROPERTY_VIRTUAL;
    #####:  418:      break;
        -:  419:    }
        -:  420:#endif /* JERRY_BUILTIN_ARRAY */
        -:  421:
        -:  422:#if JERRY_BUILTIN_STRING
    #####:  423:    case ECMA_BUILTIN_ID_STRING_PROTOTYPE:
        -:  424:    {
    #####:  425:      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);
    #####:  426:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:  427:
    #####:  428:      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_STRING;
    #####:  429:      ext_object_p->u.cls.u3.value = ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY);
    #####:  430:      break;
        -:  431:    }
        -:  432:#endif /* JERRY_BUILTIN_STRING */
        -:  433:
        -:  434:#if JERRY_BUILTIN_NUMBER
    #####:  435:    case ECMA_BUILTIN_ID_NUMBER_PROTOTYPE:
        -:  436:    {
    #####:  437:      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);
    #####:  438:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:  439:
    #####:  440:      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_NUMBER;
    #####:  441:      ext_object_p->u.cls.u3.value = ecma_make_integer_value (0);
    #####:  442:      break;
        -:  443:    }
        -:  444:#endif /* JERRY_BUILTIN_NUMBER */
        -:  445:
        -:  446:#if JERRY_BUILTIN_BOOLEAN
    #####:  447:    case ECMA_BUILTIN_ID_BOOLEAN_PROTOTYPE:
        -:  448:    {
    #####:  449:      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);
    #####:  450:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:  451:
    #####:  452:      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_BOOLEAN;
    #####:  453:      ext_object_p->u.cls.u3.value = ECMA_VALUE_FALSE;
    #####:  454:      break;
        -:  455:    }
        -:  456:#endif /* JERRY_BUILTIN_BOOLEAN */
        -:  457:
        -:  458:#if !JERRY_ESNEXT
        -:  459:#if JERRY_BUILTIN_DATE
        -:  460:    case ECMA_BUILTIN_ID_DATE_PROTOTYPE:
        -:  461:    {
        -:  462:      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);
    #####:  463:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:  464:
    #####:  465:      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_DATE;
        -:  466:
    #####:  467:      ecma_number_t *prim_prop_num_value_p = ecma_alloc_number ();
    #####:  468:      *prim_prop_num_value_p = ecma_number_make_nan ();
    #####:  469:      ECMA_SET_INTERNAL_VALUE_POINTER (ext_object_p->u.cls.u3.value, prim_prop_num_value_p);
    #####:  470:      break;
        -:  471:    }
        -:  472:#endif /* JERRY_BUILTIN_DATE */
        -:  473:
        -:  474:#if JERRY_BUILTIN_REGEXP
        -:  475:    case ECMA_BUILTIN_ID_REGEXP_PROTOTYPE:
        -:  476:    {
        -:  477:      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);
    #####:  478:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:  479:
    #####:  480:      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_REGEXP;
        -:  481:
    #####:  482:      re_compiled_code_t *bc_p =
    #####:  483:        re_compile_bytecode (ecma_get_magic_string (LIT_MAGIC_STRING_EMPTY_NON_CAPTURE_GROUP), RE_FLAG_EMPTY);
        -:  484:
        -:  485:      JERRY_ASSERT (bc_p != NULL);
        -:  486:
    #####:  487:      ECMA_SET_INTERNAL_VALUE_POINTER (ext_object_p->u.cls.u3.value, bc_p);
    #####:  488:      break;
        -:  489:    }
        -:  490:#endif /* JERRY_BUILTIN_REGEXP */
        -:  491:#endif /* !JERRY_ESNEXT */
       18:  492:    default:
        -:  493:    {
       18:  494:      JERRY_ASSERT (obj_type != ECMA_OBJECT_TYPE_BUILT_IN_CLASS);
       18:  495:      break;
        -:  496:    }
        -:  497:  }
        -:  498:
       18:  499:  ECMA_SET_NON_NULL_POINTER (builtin_objects[obj_builtin_id], obj_p);
       18:  500:  ecma_deref_object (obj_p);
       18:  501:  return obj_p;
        -:  502:} /* ecma_instantiate_builtin */
        -:  503:
        -:  504:/**
        -:  505: * Create a global object
        -:  506: *
        -:  507: * @return a new global object
        -:  508: */
        -:  509:ecma_global_object_t *
        2:  510:ecma_builtin_create_global_object (void)
        -:  511:{
        2:  512:  ecma_builtin_descriptor_t builtin_desc = ecma_builtin_descriptors[ECMA_BUILTIN_ID_GLOBAL];
        2:  513:  ecma_builtin_id_t prototype_builtin_id = (ecma_builtin_id_t) (builtin_desc >> ECMA_BUILTIN_PROTOTYPE_ID_SHIFT);
        2:  514:  ecma_object_type_t obj_type = (ecma_object_type_t) (builtin_desc & ECMA_BUILTIN_OBJECT_TYPE_MASK);
        2:  515:  size_t property_count = ecma_builtin_get_property_count (ECMA_BUILTIN_ID_GLOBAL);
        -:  516:
        2:  517:  JERRY_ASSERT (prototype_builtin_id != ECMA_BUILTIN_ID__COUNT);
        2:  518:  JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL);
        -:  519:
        -:  520:  /* Whenever this assertion fails, the size of extra_instantiated_bitset in ecma_global_object_t
        -:  521:   * must be increased and 32 must be added to these constants. Furthermore the new uint32 item
        -:  522:   * must be set to zero. */
        -:  523:#if JERRY_BUILTIN_REALMS
        2:  524:  JERRY_ASSERT (property_count <= ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE + 64);
        -:  525:#else /* !JERRY_BUILTIN_REALMS */
        -:  526:  JERRY_ASSERT (property_count <= ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE + 32);
        -:  527:#endif /* JERRY_BUILTIN_REALMS */
        -:  528:
        2:  529:  ecma_object_t *object_p = ecma_create_object (NULL, sizeof (ecma_global_object_t), obj_type);
        -:  530:
        2:  531:  ecma_op_ordinary_object_set_extensible (object_p);
        -:  532:
        2:  533:  ecma_global_object_t *global_object_p = (ecma_global_object_t *) object_p;
        -:  534:
        2:  535:  global_object_p->extended_object.u.built_in.id = (uint8_t) ECMA_BUILTIN_ID_GLOBAL;
        2:  536:  global_object_p->extended_object.u.built_in.routine_id = 0;
        -:  537:  /* Bitset size is ignored by the gc. */
        2:  538:  global_object_p->extended_object.u.built_in.u.length_and_bitset_size = 0;
        2:  539:  global_object_p->extended_object.u.built_in.u2.instantiated_bitset[0] = 0;
        2:  540:  global_object_p->extra_instantiated_bitset[0] = 0;
        -:  541:#if JERRY_BUILTIN_REALMS
        2:  542:  ECMA_SET_INTERNAL_VALUE_POINTER (global_object_p->extended_object.u.built_in.realm_value, global_object_p);
        2:  543:  global_object_p->extra_realms_bitset = 0;
        2:  544:  global_object_p->this_binding = ecma_make_object_value (object_p);
        -:  545:#else /* !JERRY_BUILTIN_REALMS */
    #####:  546:  global_object_p->extended_object.u.built_in.continue_instantiated_bitset[0] = 0;
        -:  547:#endif /* JERRY_BUILTIN_REALMS */
        -:  548:
        2:  549:  memset (global_object_p->builtin_objects, 0, (sizeof (jmem_cpointer_t) * ECMA_BUILTIN_OBJECTS_COUNT));
        -:  550:
        -:  551:  /* Temporary self reference for GC mark. */
        2:  552:  ECMA_SET_NON_NULL_POINTER (global_object_p->global_env_cp, object_p);
        -:  553:#if JERRY_ESNEXT
        2:  554:  global_object_p->global_scope_cp = global_object_p->global_env_cp;
        -:  555:#endif /* JERRY_ESNEXT */
        -:  556:
        2:  557:  ecma_object_t *global_lex_env_p = ecma_create_object_lex_env (NULL, object_p);
        2:  558:  ECMA_SET_NON_NULL_POINTER (global_object_p->global_env_cp, global_lex_env_p);
        -:  559:#if JERRY_ESNEXT
        2:  560:  global_object_p->global_scope_cp = global_object_p->global_env_cp;
        -:  561:#endif /* JERRY_ESNEXT */
        2:  562:  ecma_deref_object (global_lex_env_p);
        -:  563:
        -:  564:  ecma_object_t *prototype_object_p;
        2:  565:  prototype_object_p = ecma_instantiate_builtin (global_object_p, prototype_builtin_id);
        2:  566:  JERRY_ASSERT (prototype_object_p != NULL);
        -:  567:
        2:  568:  ECMA_SET_NON_NULL_POINTER (object_p->u2.prototype_cp, prototype_object_p);
        -:  569:
        2:  570:  return global_object_p;
        -:  571:} /* ecma_builtin_create_global_object */
        -:  572:
        -:  573:/**
        -:  574: * Get reference to specified built-in object
        -:  575: *
        -:  576: * Note:
        -:  577: *   Does not increase the reference counter.
        -:  578: *
        -:  579: * @return pointer to the object's instance
        -:  580: */
        -:  581:ecma_object_t *
       12:  582:ecma_builtin_get (ecma_builtin_id_t builtin_id) /**< id of built-in to check on */
        -:  583:{
       12:  584:  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_OBJECTS_COUNT);
        -:  585:
       12:  586:  ecma_global_object_t *global_object_p = (ecma_global_object_t *) ecma_builtin_get_global ();
       12:  587:  jmem_cpointer_t *builtin_p = global_object_p->builtin_objects + builtin_id;
        -:  588:
       12:  589:  if (JERRY_UNLIKELY (*builtin_p == JMEM_CP_NULL))
        -:  590:  {
        2:  591:    return ecma_instantiate_builtin (global_object_p, builtin_id);
        -:  592:  }
        -:  593:
       10:  594:  return ECMA_GET_NON_NULL_POINTER (ecma_object_t, *builtin_p);
        -:  595:} /* ecma_builtin_get */
        -:  596:
        -:  597:#if JERRY_BUILTIN_REALMS
        -:  598:
        -:  599:/**
        -:  600: * Get reference to specified built-in object using the realm provided by another built-in object
        -:  601: *
        -:  602: * Note:
        -:  603: *   Does not increase the reference counter.
        -:  604: *
        -:  605: * @return pointer to the object's instance
        -:  606: */
        -:  607:ecma_object_t *
       12:  608:ecma_builtin_get_from_realm (ecma_global_object_t *global_object_p, /**< global object */
        -:  609:                             ecma_builtin_id_t builtin_id) /**< id of built-in to check on */
        -:  610:{
       12:  611:  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_OBJECTS_COUNT);
        -:  612:
       12:  613:  jmem_cpointer_t *builtin_p = global_object_p->builtin_objects + builtin_id;
        -:  614:
       12:  615:  if (JERRY_UNLIKELY (*builtin_p == JMEM_CP_NULL))
        -:  616:  {
       10:  617:    return ecma_instantiate_builtin (global_object_p, builtin_id);
        -:  618:  }
        -:  619:
        2:  620:  return ECMA_GET_NON_NULL_POINTER (ecma_object_t, *builtin_p);
        -:  621:} /* ecma_builtin_get_from_realm */
        -:  622:
        -:  623:#endif /* JERRY_BUILTIN_REALMS */
        -:  624:
        -:  625:/**
        -:  626: * Get reference to specified built-in object using the realm provided by another built-in object
        -:  627: *
        -:  628: * Note:
        -:  629: *   Does not increase the reference counter.
        -:  630: *
        -:  631: * @return pointer to the object's instance
        -:  632: */
        -:  633:static inline ecma_object_t *JERRY_ATTR_ALWAYS_INLINE
        -:  634:ecma_builtin_get_from_builtin (ecma_object_t *builtin_object_p, /**< built-in object */
        -:  635:                               ecma_builtin_id_t builtin_id) /**< id of built-in to check on */
        -:  636:{
       12:  637:  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_OBJECTS_COUNT);
        -:  638:
        -:  639:#if JERRY_BUILTIN_REALMS
       12:  640:  return ecma_builtin_get_from_realm (ecma_builtin_get_realm (builtin_object_p), builtin_id);
        -:  641:#else /* !JERRY_BUILTIN_REALMS */
        -:  642:  JERRY_UNUSED (builtin_object_p);
    #####:  643:  return ecma_builtin_get (builtin_id);
        -:  644:#endif /* JERRY_BUILTIN_REALMS */
        -:  645:} /* ecma_builtin_get_from_builtin */
        -:  646:
        -:  647:/**
        -:  648: * Construct a Function object for specified built-in routine
        -:  649: *
        -:  650: * See also: ECMA-262 v5, 15
        -:  651: *
        -:  652: * @return pointer to constructed Function object
        -:  653: */
        -:  654:static ecma_object_t *
        2:  655:ecma_builtin_make_function_object_for_routine (ecma_object_t *builtin_object_p, /**< builtin object */
        -:  656:                                               uint8_t routine_id, /**< builtin-wide identifier of the built-in
        -:  657:                                                                    *   object's routine property */
        -:  658:                                               uint32_t routine_index, /**< property descriptor index of routine */
        -:  659:                                               uint8_t flags) /**< see also: ecma_builtin_routine_flags */
        -:  660:{
        2:  661:  ecma_object_t *prototype_obj_p = ecma_builtin_get_from_builtin (builtin_object_p, ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  662:
        2:  663:  size_t ext_object_size = sizeof (ecma_extended_object_t);
        -:  664:
        2:  665:  ecma_object_t *func_obj_p = ecma_create_object (prototype_obj_p, ext_object_size, ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
        -:  666:
        2:  667:  JERRY_ASSERT (routine_id > 0);
        2:  668:  JERRY_ASSERT (routine_index <= UINT8_MAX);
        -:  669:
        -:  670:  ecma_built_in_props_t *built_in_props_p;
        -:  671:
        2:  672:  if (ECMA_BUILTIN_IS_EXTENDED_BUILT_IN (ecma_get_object_type (builtin_object_p)))
        -:  673:  {
    #####:  674:    built_in_props_p = &((ecma_extended_built_in_object_t *) builtin_object_p)->built_in;
        -:  675:  }
        -:  676:  else
        -:  677:  {
        2:  678:    built_in_props_p = &((ecma_extended_object_t *) builtin_object_p)->u.built_in;
        -:  679:  }
        -:  680:
        2:  681:  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) func_obj_p;
        2:  682:  ext_func_obj_p->u.built_in.id = built_in_props_p->id;
        2:  683:  ext_func_obj_p->u.built_in.routine_id = routine_id;
        2:  684:  ext_func_obj_p->u.built_in.u.routine_index = (uint8_t) routine_index;
        2:  685:  ext_func_obj_p->u.built_in.u2.routine_flags = flags;
        -:  686:
        -:  687:#if JERRY_BUILTIN_REALMS
        2:  688:  ext_func_obj_p->u.built_in.realm_value = built_in_props_p->realm_value;
        -:  689:#endif /* JERRY_BUILTIN_REALMS */
        -:  690:
        2:  691:  return func_obj_p;
        -:  692:} /* ecma_builtin_make_function_object_for_routine */
        -:  693:
        -:  694:/**
        -:  695: * Construct a Function object for specified built-in accessor getter
        -:  696: *
        -:  697: * @return pointer to constructed accessor getter Function object
        -:  698: */
        -:  699:static ecma_object_t *
    #####:  700:ecma_builtin_make_function_object_for_getter_accessor (ecma_object_t *builtin_object_p, /**< builtin object */
        -:  701:                                                       uint8_t routine_id, /**< builtin-wide id of the built-in
        -:  702:                                                                            *   object's routine property */
        -:  703:                                                       uint32_t routine_index) /**< property descriptor index
        -:  704:                                                                                *   of routine */
        -:  705:{
    #####:  706:  return ecma_builtin_make_function_object_for_routine (builtin_object_p,
        -:  707:                                                        routine_id,
        -:  708:                                                        routine_index,
        -:  709:                                                        ECMA_BUILTIN_ROUTINE_GETTER);
        -:  710:} /* ecma_builtin_make_function_object_for_getter_accessor */
        -:  711:
        -:  712:/**
        -:  713: * Construct a Function object for specified built-in accessor setter
        -:  714: *
        -:  715: * @return pointer to constructed accessor getter Function object
        -:  716: */
        -:  717:static ecma_object_t *
    #####:  718:ecma_builtin_make_function_object_for_setter_accessor (ecma_object_t *builtin_object_p, /**< builtin object */
        -:  719:                                                       uint8_t routine_id, /**< builtin-wide id of the built-in
        -:  720:                                                                            *   object's routine property */
        -:  721:                                                       uint32_t routine_index) /**< property descriptor index
        -:  722:                                                                                *   of routine */
        -:  723:{
    #####:  724:  return ecma_builtin_make_function_object_for_routine (builtin_object_p,
        -:  725:                                                        routine_id,
        -:  726:                                                        routine_index,
        -:  727:                                                        ECMA_BUILTIN_ROUTINE_SETTER);
        -:  728:} /* ecma_builtin_make_function_object_for_setter_accessor */
        -:  729:
        -:  730:#if JERRY_ESNEXT
        -:  731:
        -:  732:/**
        -:  733: * Create specification defined properties for built-in native handlers.
        -:  734: *
        -:  735: * @return pointer property, if one was instantiated,
        -:  736: *         NULL - otherwise.
        -:  737: */
        -:  738:static ecma_property_t *
    #####:  739:ecma_builtin_native_handler_try_to_instantiate_property (ecma_object_t *object_p, /**< object */
        -:  740:                                                         ecma_string_t *property_name_p) /**< property's name */
        -:  741:{
    #####:  742:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
        -:  743:
    #####:  744:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) object_p;
    #####:  745:  ecma_property_t *prop_p = NULL;
        -:  746:
    #####:  747:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_NAME))
        -:  748:  {
    #####:  749:    if ((ext_obj_p->u.built_in.u2.routine_flags & ECMA_NATIVE_HANDLER_FLAGS_NAME_INITIALIZED) == 0)
        -:  750:    {
    #####:  751:      ecma_property_value_t *value_p =
        -:  752:        ecma_create_named_data_property (object_p, property_name_p, ECMA_PROPERTY_BUILT_IN_CONFIGURABLE, &prop_p);
        -:  753:
    #####:  754:      value_p->value = ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY);
        -:  755:    }
        -:  756:  }
    #####:  757:  else if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_LENGTH))
        -:  758:  {
    #####:  759:    if ((ext_obj_p->u.built_in.u2.routine_flags & ECMA_NATIVE_HANDLER_FLAGS_LENGTH_INITIALIZED) == 0)
        -:  760:    {
    #####:  761:      ecma_property_value_t *value_p =
        -:  762:        ecma_create_named_data_property (object_p, property_name_p, ECMA_PROPERTY_BUILT_IN_CONFIGURABLE, &prop_p);
        -:  763:
    #####:  764:      const uint8_t length = ecma_builtin_handler_get_length (ext_obj_p->u.built_in.routine_id);
    #####:  765:      value_p->value = ecma_make_integer_value (length);
        -:  766:    }
        -:  767:  }
        -:  768:
    #####:  769:  return prop_p;
        -:  770:} /* ecma_builtin_native_handler_try_to_instantiate_property */
        -:  771:
        -:  772:#endif /* JERRY_ESNEXT */
        -:  773:
        -:  774:/**
        -:  775: * Lazy instantiation of builtin routine property of builtin object
        -:  776: *
        -:  777: * If the property is not instantiated yet, instantiate the property and
        -:  778: * return pointer to the instantiated property.
        -:  779: *
        -:  780: * @return pointer property, if one was instantiated,
        -:  781: *         NULL - otherwise.
        -:  782: */
        -:  783:ecma_property_t *
    #####:  784:ecma_builtin_routine_try_to_instantiate_property (ecma_object_t *object_p, /**< object */
        -:  785:                                                  ecma_string_t *property_name_p) /**< property name */
        -:  786:{
    #####:  787:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION
        -:  788:                && ecma_builtin_function_is_routine (object_p));
        -:  789:
    #####:  790:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
        -:  791:
        -:  792:#if JERRY_ESNEXT
    #####:  793:  if (JERRY_UNLIKELY (ext_func_p->u.built_in.id == ECMA_BUILTIN_ID_HANDLER))
        -:  794:  {
    #####:  795:    return ecma_builtin_native_handler_try_to_instantiate_property (object_p, property_name_p);
        -:  796:  }
        -:  797:#endif /* !JERRY_ESNEXT */
        -:  798:
    #####:  799:  if (ecma_string_is_length (property_name_p))
        -:  800:  {
        -:  801:    /*
        -:  802:     * Lazy instantiation of 'length' property
        -:  803:     */
    #####:  804:    ecma_property_t *len_prop_p;
        -:  805:
        -:  806:#if JERRY_ESNEXT
    #####:  807:    uint8_t *bitset_p = &ext_func_p->u.built_in.u2.routine_flags;
        -:  808:
    #####:  809:    if (*bitset_p & ECMA_BUILTIN_ROUTINE_LENGTH_INITIALIZED)
        -:  810:    {
        -:  811:      /* length property was already instantiated */
    #####:  812:      return NULL;
        -:  813:    }
        -:  814:
        -:  815:    /* We mark that the property was lazily instantiated,
        -:  816:     * as it is configurable and so can be deleted (ECMA-262 v6, 19.2.4.1) */
    #####:  817:    ecma_property_value_t *len_prop_value_p =
        -:  818:      ecma_create_named_data_property (object_p, property_name_p, ECMA_PROPERTY_BUILT_IN_CONFIGURABLE, &len_prop_p);
        -:  819:#else /* !JERRY_ESNEXT */
        -:  820:    /* We don't need to mark that the property was already lazy instantiated,
        -:  821:     * as it is non-configurable and so can't be deleted (ECMA-262 v5, 13.2.5) */
    #####:  822:    ecma_property_value_t *len_prop_value_p =
        -:  823:      ecma_create_named_data_property (object_p, property_name_p, ECMA_PROPERTY_BUILT_IN_FIXED, &len_prop_p);
        -:  824:#endif /* JERRY_ESNEXT */
        -:  825:
    #####:  826:    uint8_t length = 0;
        -:  827:
    #####:  828:    if (ext_func_p->u.built_in.u2.routine_flags & ECMA_BUILTIN_ROUTINE_SETTER)
        -:  829:    {
    #####:  830:      length = 1;
        -:  831:    }
    #####:  832:    else if (!(ext_func_p->u.built_in.u2.routine_flags & ECMA_BUILTIN_ROUTINE_GETTER))
        -:  833:    {
    #####:  834:      uint8_t routine_index = ext_func_p->u.built_in.u.routine_index;
        -:  835:      const ecma_builtin_property_descriptor_t *property_list_p;
        -:  836:
    #####:  837:      property_list_p = ecma_builtin_property_list_references[ext_func_p->u.built_in.id];
        -:  838:
    #####:  839:      JERRY_ASSERT (property_list_p[routine_index].type == ECMA_BUILTIN_PROPERTY_ROUTINE);
        -:  840:
    #####:  841:      length = ECMA_GET_ROUTINE_LENGTH (property_list_p[routine_index].value);
        -:  842:    }
        -:  843:
    #####:  844:    len_prop_value_p->value = ecma_make_integer_value (length);
    #####:  845:    return len_prop_p;
        -:  846:  }
        -:  847:
        -:  848:#if JERRY_ESNEXT
        -:  849:  /*
        -:  850:   * Lazy instantiation of 'name' property
        -:  851:   */
    #####:  852:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_NAME))
        -:  853:  {
    #####:  854:    uint8_t *bitset_p = &ext_func_p->u.built_in.u2.routine_flags;
        -:  855:
    #####:  856:    if (*bitset_p & ECMA_BUILTIN_ROUTINE_NAME_INITIALIZED)
        -:  857:    {
        -:  858:      /* name property was already instantiated */
    #####:  859:      return NULL;
        -:  860:    }
        -:  861:
        -:  862:    /* We mark that the property was lazily instantiated */
    #####:  863:    ecma_property_t *name_prop_p;
    #####:  864:    ecma_property_value_t *name_prop_value_p =
        -:  865:      ecma_create_named_data_property (object_p, property_name_p, ECMA_PROPERTY_BUILT_IN_CONFIGURABLE, &name_prop_p);
        -:  866:
    #####:  867:    uint8_t routine_index = ext_func_p->u.built_in.u.routine_index;
        -:  868:    const ecma_builtin_property_descriptor_t *property_list_p;
        -:  869:
    #####:  870:    property_list_p = ecma_builtin_property_list_references[ext_func_p->u.built_in.id];
        -:  871:
    #####:  872:    JERRY_ASSERT (property_list_p[routine_index].type == ECMA_BUILTIN_PROPERTY_ROUTINE
        -:  873:                  || property_list_p[routine_index].type == ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_WRITE
        -:  874:                  || property_list_p[routine_index].type == ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_ONLY);
        -:  875:
    #####:  876:    lit_magic_string_id_t name_id = property_list_p[routine_index].magic_string_id;
        -:  877:    ecma_string_t *name_p;
        -:  878:
    #####:  879:    if (JERRY_UNLIKELY (name_id > LIT_NON_INTERNAL_MAGIC_STRING__COUNT))
        -:  880:    {
        -:  881:      /* Note: Whenever new intrinsic routine is being added this mapping should be updated as well! */
    #####:  882:      if (JERRY_UNLIKELY (name_id == LIT_INTERNAL_MAGIC_STRING_ARRAY_PROTOTYPE_VALUES)
    #####:  883:          || JERRY_UNLIKELY (name_id == LIT_INTERNAL_MAGIC_STRING_TYPEDARRAY_PROTOTYPE_VALUES)
    #####:  884:          || JERRY_UNLIKELY (name_id == LIT_INTERNAL_MAGIC_STRING_SET_PROTOTYPE_VALUES))
        -:  885:      {
    #####:  886:        name_p = ecma_get_magic_string (LIT_MAGIC_STRING_VALUES);
        -:  887:      }
    #####:  888:      else if (JERRY_UNLIKELY (name_id == LIT_INTERNAL_MAGIC_STRING_MAP_PROTOTYPE_ENTRIES))
        -:  889:      {
    #####:  890:        name_p = ecma_get_magic_string (LIT_MAGIC_STRING_ENTRIES);
        -:  891:      }
        -:  892:      else
        -:  893:      {
    #####:  894:        JERRY_ASSERT (LIT_IS_GLOBAL_SYMBOL (name_id));
    #####:  895:        name_p = ecma_op_get_global_symbol (name_id);
        -:  896:      }
        -:  897:    }
        -:  898:    else
        -:  899:    {
    #####:  900:      name_p = ecma_get_magic_string (name_id);
        -:  901:    }
        -:  902:
    #####:  903:    char *prefix_p = NULL;
    #####:  904:    lit_utf8_size_t prefix_size = 0;
        -:  905:
    #####:  906:    if (*bitset_p & (ECMA_BUILTIN_ROUTINE_GETTER | ECMA_BUILTIN_ROUTINE_SETTER))
        -:  907:    {
    #####:  908:      prefix_size = 4;
    #####:  909:      prefix_p = (*bitset_p & ECMA_BUILTIN_ROUTINE_GETTER) ? "get " : "set ";
        -:  910:    }
        -:  911:
    #####:  912:    name_prop_value_p->value = ecma_op_function_form_name (name_p, prefix_p, prefix_size);
        -:  913:
    #####:  914:    if (JERRY_UNLIKELY (name_id > LIT_NON_INTERNAL_MAGIC_STRING__COUNT))
        -:  915:    {
    #####:  916:      ecma_deref_ecma_string (name_p);
        -:  917:    }
        -:  918:
    #####:  919:    return name_prop_p;
        -:  920:  }
        -:  921:#endif /* JERRY_ESNEXT */
        -:  922:
    #####:  923:  return NULL;
        -:  924:} /* ecma_builtin_routine_try_to_instantiate_property */
        -:  925:
        -:  926:/**
        -:  927: * If the property's name is one of built-in properties of the object
        -:  928: * that is not instantiated yet, instantiate the property and
        -:  929: * return pointer to the instantiated property.
        -:  930: *
        -:  931: * @return pointer property, if one was instantiated,
        -:  932: *         NULL - otherwise.
        -:  933: */
        -:  934:ecma_property_t *
       54:  935:ecma_builtin_try_to_instantiate_property (ecma_object_t *object_p, /**< object */
        -:  936:                                          ecma_string_t *property_name_p) /**< property's name */
        -:  937:{
       54:  938:  lit_magic_string_id_t magic_string_id = ecma_get_string_magic (property_name_p);
        -:  939:
        -:  940:#if JERRY_ESNEXT
       54:  941:  if (JERRY_UNLIKELY (ecma_prop_name_is_symbol (property_name_p)) && property_name_p->u.hash & ECMA_SYMBOL_FLAG_GLOBAL)
        -:  942:  {
    #####:  943:    magic_string_id = (property_name_p->u.hash >> ECMA_SYMBOL_FLAGS_SHIFT);
        -:  944:  }
        -:  945:#endif /* JERRY_ESNEXT */
        -:  946:
       54:  947:  if (magic_string_id == LIT_MAGIC_STRING__COUNT)
        -:  948:  {
       42:  949:    return NULL;
        -:  950:  }
        -:  951:
        -:  952:  ecma_built_in_props_t *built_in_props_p;
       12:  953:  ecma_object_type_t object_type = ecma_get_object_type (object_p);
        -:  954:
       16:  955:  JERRY_ASSERT (object_type == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL || object_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS
        -:  956:                || object_type == ECMA_OBJECT_TYPE_BUILT_IN_ARRAY
        -:  957:                || (object_type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION && !ecma_builtin_function_is_routine (object_p)));
        -:  958:
       12:  959:  if (ECMA_BUILTIN_IS_EXTENDED_BUILT_IN (object_type))
        -:  960:  {
    #####:  961:    built_in_props_p = &((ecma_extended_built_in_object_t *) object_p)->built_in;
        -:  962:  }
        -:  963:  else
        -:  964:  {
       12:  965:    built_in_props_p = &((ecma_extended_object_t *) object_p)->u.built_in;
        -:  966:  }
        -:  967:
       12:  968:  ecma_builtin_id_t builtin_id = (ecma_builtin_id_t) built_in_props_p->id;
        -:  969:
       12:  970:  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);
        -:  971:
       12:  972:  const ecma_builtin_property_descriptor_t *property_list_p = ecma_builtin_property_list_references[builtin_id];
       12:  973:  const ecma_builtin_property_descriptor_t *curr_property_p = property_list_p;
        -:  974:
      178:  975:  while (curr_property_p->magic_string_id != magic_string_id)
        -:  976:  {
      154:  977:    if (curr_property_p->magic_string_id == LIT_MAGIC_STRING__COUNT)
        -:  978:    {
    #####:  979:      return NULL;
        -:  980:    }
      154:  981:    curr_property_p++;
        -:  982:  }
        -:  983:
       12:  984:  uint32_t index = (uint32_t) (curr_property_p - property_list_p);
       12:  985:  uint8_t *bitset_p = built_in_props_p->u2.instantiated_bitset + (index >> 3);
        -:  986:
        -:  987:#if JERRY_BUILTIN_REALMS
       12:  988:  if (index >= 8 * sizeof (uint8_t))
        -:  989:  {
        6:  990:    bitset_p += sizeof (ecma_value_t);
        -:  991:  }
        -:  992:#endif /* JERRY_BUILTIN_REALMS */
        -:  993:
       12:  994:  uint8_t bit_for_index = (uint8_t) (1u << (index & 0x7));
        -:  995:
       12:  996:  if (*bitset_p & bit_for_index)
        -:  997:  {
        -:  998:    /* This property was instantiated before. */
    #####:  999:    return NULL;
        -: 1000:  }
        -: 1001:
       12: 1002:  ecma_value_t value = ECMA_VALUE_EMPTY;
       12: 1003:  bool is_accessor = false;
       12: 1004:  ecma_object_t *getter_p = NULL;
       12: 1005:  ecma_object_t *setter_p = NULL;
        -: 1006:
       12: 1007:  switch (curr_property_p->type)
        -: 1008:  {
    #####: 1009:    case ECMA_BUILTIN_PROPERTY_SIMPLE:
        -: 1010:    {
    #####: 1011:      value = curr_property_p->value;
        -: 1012:
        -: 1013:#if JERRY_BUILTIN_GLOBAL_THIS
    #####: 1014:      if (value == ECMA_VALUE_GLOBAL_THIS)
        -: 1015:      {
        -: 1016:        /* Only the global object has globalThis property. */
    #####: 1017:        JERRY_ASSERT (ecma_builtin_is_global (object_p));
    #####: 1018:        ecma_ref_object (object_p);
    #####: 1019:        value = ecma_make_object_value (object_p);
        -: 1020:      }
        -: 1021:#endif /* JERRY_BUILTIN_GLOBAL_THIS */
    #####: 1022:      break;
        -: 1023:    }
    #####: 1024:    case ECMA_BUILTIN_PROPERTY_NUMBER:
        -: 1025:    {
    #####: 1026:      ecma_number_t num = 0.0;
        -: 1027:
    #####: 1028:      if (curr_property_p->value < ECMA_BUILTIN_NUMBER_MAX)
        -: 1029:      {
    #####: 1030:        num = curr_property_p->value;
        -: 1031:      }
    #####: 1032:      else if (curr_property_p->value < ECMA_BUILTIN_NUMBER_NAN)
        -: 1033:      {
        -: 1034:        static const ecma_number_t builtin_number_list[] = {
        -: 1035:          ECMA_NUMBER_MAX_VALUE,
        -: 1036:          ECMA_NUMBER_MIN_VALUE,
        -: 1037:#if JERRY_ESNEXT
        -: 1038:          ECMA_NUMBER_EPSILON,
        -: 1039:          ECMA_NUMBER_MAX_SAFE_INTEGER,
        -: 1040:          ECMA_NUMBER_MIN_SAFE_INTEGER,
        -: 1041:#endif /* JERRY_ESNEXT */
        -: 1042:          ECMA_NUMBER_E,
        -: 1043:          ECMA_NUMBER_PI,
        -: 1044:          ECMA_NUMBER_LN10,
        -: 1045:          ECMA_NUMBER_LN2,
        -: 1046:          ECMA_NUMBER_LOG2E,
        -: 1047:          ECMA_NUMBER_LOG10E,
        -: 1048:          ECMA_NUMBER_SQRT2,
        -: 1049:          ECMA_NUMBER_SQRT_1_2,
        -: 1050:        };
        -: 1051:
    #####: 1052:        num = builtin_number_list[curr_property_p->value - ECMA_BUILTIN_NUMBER_MAX];
        -: 1053:      }
        -: 1054:      else
        -: 1055:      {
    #####: 1056:        switch (curr_property_p->value)
        -: 1057:        {
    #####: 1058:          case ECMA_BUILTIN_NUMBER_POSITIVE_INFINITY:
        -: 1059:          {
    #####: 1060:            num = ecma_number_make_infinity (false);
    #####: 1061:            break;
        -: 1062:          }
    #####: 1063:          case ECMA_BUILTIN_NUMBER_NEGATIVE_INFINITY:
        -: 1064:          {
    #####: 1065:            num = ecma_number_make_infinity (true);
    #####: 1066:            break;
        -: 1067:          }
    #####: 1068:          default:
        -: 1069:          {
    #####: 1070:            JERRY_ASSERT (curr_property_p->value == ECMA_BUILTIN_NUMBER_NAN);
        -: 1071:
    #####: 1072:            num = ecma_number_make_nan ();
    #####: 1073:            break;
        -: 1074:          }
        -: 1075:        }
        -: 1076:      }
        -: 1077:
    #####: 1078:      value = ecma_make_number_value (num);
    #####: 1079:      break;
        -: 1080:    }
    #####: 1081:    case ECMA_BUILTIN_PROPERTY_STRING:
        -: 1082:    {
    #####: 1083:      value = ecma_make_magic_string_value ((lit_magic_string_id_t) curr_property_p->value);
    #####: 1084:      break;
        -: 1085:    }
        -: 1086:#if JERRY_ESNEXT
    #####: 1087:    case ECMA_BUILTIN_PROPERTY_SYMBOL:
        -: 1088:    {
    #####: 1089:      lit_magic_string_id_t symbol_id = (lit_magic_string_id_t) curr_property_p->value;
        -: 1090:
    #####: 1091:      value = ecma_make_symbol_value (ecma_op_get_global_symbol (symbol_id));
    #####: 1092:      break;
        -: 1093:    }
    #####: 1094:    case ECMA_BUILTIN_PROPERTY_INTRINSIC_PROPERTY:
        -: 1095:    {
    #####: 1096:      ecma_object_t *intrinsic_object_p = ecma_builtin_get_from_builtin (object_p, ECMA_BUILTIN_ID_INTRINSIC_OBJECT);
    #####: 1097:      value = ecma_op_object_get_by_magic_id (intrinsic_object_p, (lit_magic_string_id_t) curr_property_p->value);
    #####: 1098:      break;
        -: 1099:    }
    #####: 1100:    case ECMA_BUILTIN_PROPERTY_ACCESSOR_BUILTIN_FUNCTION:
        -: 1101:    {
    #####: 1102:      is_accessor = true;
    #####: 1103:      uint16_t getter_id = ECMA_ACCESSOR_READ_WRITE_GET_GETTER_ID (curr_property_p->value);
    #####: 1104:      uint16_t setter_id = ECMA_ACCESSOR_READ_WRITE_GET_SETTER_ID (curr_property_p->value);
    #####: 1105:      getter_p = ecma_builtin_get_from_builtin (object_p, getter_id);
    #####: 1106:      setter_p = ecma_builtin_get_from_builtin (object_p, setter_id);
    #####: 1107:      ecma_ref_object (getter_p);
    #####: 1108:      ecma_ref_object (setter_p);
    #####: 1109:      break;
        -: 1110:    }
        -: 1111:#endif /* JERRY_ESNEXT */
       10: 1112:    case ECMA_BUILTIN_PROPERTY_OBJECT:
        -: 1113:    {
        -: 1114:      ecma_object_t *builtin_object_p;
       20: 1115:      builtin_object_p = ecma_builtin_get_from_builtin (object_p, (ecma_builtin_id_t) curr_property_p->value);
       10: 1116:      ecma_ref_object (builtin_object_p);
       10: 1117:      value = ecma_make_object_value (builtin_object_p);
       10: 1118:      break;
        -: 1119:    }
        2: 1120:    case ECMA_BUILTIN_PROPERTY_ROUTINE:
        -: 1121:    {
        -: 1122:      ecma_object_t *func_obj_p;
        2: 1123:      func_obj_p = ecma_builtin_make_function_object_for_routine (object_p,
        2: 1124:                                                                  ECMA_GET_ROUTINE_ID (curr_property_p->value),
        -: 1125:                                                                  index,
        -: 1126:                                                                  ECMA_BUILTIN_ROUTINE_NO_OPTS);
        2: 1127:      value = ecma_make_object_value (func_obj_p);
        2: 1128:      break;
        -: 1129:    }
    #####: 1130:    case ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_WRITE:
        -: 1131:    {
    #####: 1132:      is_accessor = true;
    #####: 1133:      uint8_t getter_id = ECMA_ACCESSOR_READ_WRITE_GET_GETTER_ID (curr_property_p->value);
    #####: 1134:      uint8_t setter_id = ECMA_ACCESSOR_READ_WRITE_GET_SETTER_ID (curr_property_p->value);
    #####: 1135:      getter_p = ecma_builtin_make_function_object_for_getter_accessor (object_p, getter_id, index);
    #####: 1136:      setter_p = ecma_builtin_make_function_object_for_setter_accessor (object_p, setter_id, index);
    #####: 1137:      break;
        -: 1138:    }
    #####: 1139:    default:
        -: 1140:    {
    #####: 1141:      JERRY_ASSERT (curr_property_p->type == ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_ONLY);
        -: 1142:
    #####: 1143:      is_accessor = true;
    #####: 1144:      uint8_t getter_id = (uint8_t) curr_property_p->value;
    #####: 1145:      getter_p = ecma_builtin_make_function_object_for_getter_accessor (object_p, getter_id, index);
    #####: 1146:      break;
        -: 1147:    }
        -: 1148:  }
        -: 1149:
       12: 1150:  ecma_property_t *prop_p;
        -: 1151:
       12: 1152:  JERRY_ASSERT (curr_property_p->attributes & ECMA_PROPERTY_FLAG_BUILT_IN);
        -: 1153:
       12: 1154:  if (is_accessor)
        -: 1155:  {
    #####: 1156:    ecma_create_named_accessor_property (object_p,
        -: 1157:                                         property_name_p,
        -: 1158:                                         getter_p,
        -: 1159:                                         setter_p,
    #####: 1160:                                         curr_property_p->attributes,
        -: 1161:                                         &prop_p);
        -: 1162:
    #####: 1163:    if (setter_p)
        -: 1164:    {
    #####: 1165:      ecma_deref_object (setter_p);
        -: 1166:    }
    #####: 1167:    if (getter_p)
        -: 1168:    {
    #####: 1169:      ecma_deref_object (getter_p);
        -: 1170:    }
        -: 1171:  }
        -: 1172:  else
        -: 1173:  {
       12: 1174:    ecma_property_value_t *prop_value_p =
       12: 1175:      ecma_create_named_data_property (object_p, property_name_p, curr_property_p->attributes, &prop_p);
       12: 1176:    prop_value_p->value = value;
        -: 1177:
        -: 1178:    /* Reference count of objects must be decreased. */
       12: 1179:    ecma_deref_if_object (value);
        -: 1180:  }
        -: 1181:
       12: 1182:  return prop_p;
        -: 1183:} /* ecma_builtin_try_to_instantiate_property */
        -: 1184:
        -: 1185:#if JERRY_ESNEXT
        -: 1186:
        -: 1187:/**
        -: 1188: * Delete configurable properties of native handlers.
        -: 1189: */
        -: 1190:static void
    #####: 1191:ecma_builtin_native_handler_delete_built_in_property (ecma_object_t *object_p, /**< object */
        -: 1192:                                                      ecma_string_t *property_name_p) /**< property name */
        -: 1193:{
    #####: 1194:  ecma_extended_object_t *extended_obj_p = (ecma_extended_object_t *) object_p;
        -: 1195:
    #####: 1196:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_LENGTH))
        -: 1197:  {
    #####: 1198:    JERRY_ASSERT (!(extended_obj_p->u.built_in.u2.routine_flags & ECMA_NATIVE_HANDLER_FLAGS_LENGTH_INITIALIZED));
        -: 1199:
    #####: 1200:    extended_obj_p->u.built_in.u2.routine_flags |= ECMA_NATIVE_HANDLER_FLAGS_LENGTH_INITIALIZED;
    #####: 1201:    return;
        -: 1202:  }
        -: 1203:
    #####: 1204:  JERRY_ASSERT (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_NAME));
    #####: 1205:  JERRY_ASSERT (!(extended_obj_p->u.built_in.u2.routine_flags & ECMA_NATIVE_HANDLER_FLAGS_NAME_INITIALIZED));
        -: 1206:
    #####: 1207:  extended_obj_p->u.built_in.u2.routine_flags |= ECMA_NATIVE_HANDLER_FLAGS_NAME_INITIALIZED;
        -: 1208:} /* ecma_builtin_native_handler_delete_built_in_property */
        -: 1209:
        -: 1210:/**
        -: 1211: * Delete configurable properties of built-in routines.
        -: 1212: */
        -: 1213:void
    #####: 1214:ecma_builtin_routine_delete_built_in_property (ecma_object_t *object_p, /**< object */
        -: 1215:                                               ecma_string_t *property_name_p) /**< property name */
        -: 1216:{
    #####: 1217:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION
        -: 1218:                && ecma_builtin_function_is_routine (object_p));
        -: 1219:
    #####: 1220:  ecma_extended_object_t *extended_obj_p = (ecma_extended_object_t *) object_p;
        -: 1221:
    #####: 1222:  if (JERRY_UNLIKELY (extended_obj_p->u.built_in.id == ECMA_BUILTIN_ID_HANDLER))
        -: 1223:  {
    #####: 1224:    ecma_builtin_native_handler_delete_built_in_property (object_p, property_name_p);
    #####: 1225:    return;
        -: 1226:  }
        -: 1227:
    #####: 1228:  uint8_t *bitset_p = &extended_obj_p->u.built_in.u2.routine_flags;
        -: 1229:
    #####: 1230:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_LENGTH))
        -: 1231:  {
    #####: 1232:    JERRY_ASSERT (!(*bitset_p & ECMA_BUILTIN_ROUTINE_LENGTH_INITIALIZED));
        -: 1233:
    #####: 1234:    *bitset_p |= ECMA_BUILTIN_ROUTINE_LENGTH_INITIALIZED;
    #####: 1235:    return;
        -: 1236:  }
        -: 1237:
    #####: 1238:  JERRY_ASSERT (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_NAME));
    #####: 1239:  JERRY_ASSERT (!(*bitset_p & ECMA_BUILTIN_ROUTINE_NAME_INITIALIZED));
        -: 1240:
    #####: 1241:  *bitset_p |= ECMA_BUILTIN_ROUTINE_NAME_INITIALIZED;
        -: 1242:} /* ecma_builtin_routine_delete_built_in_property */
        -: 1243:
        -: 1244:#endif /* JERRY_ESNEXT */
        -: 1245:
        -: 1246:/**
        -: 1247: * Delete configurable properties of built-ins.
        -: 1248: */
        -: 1249:void
    #####: 1250:ecma_builtin_delete_built_in_property (ecma_object_t *object_p, /**< object */
        -: 1251:                                       ecma_string_t *property_name_p) /**< property name */
        -: 1252:{
    #####: 1253:  lit_magic_string_id_t magic_string_id = ecma_get_string_magic (property_name_p);
        -: 1254:
        -: 1255:#if JERRY_ESNEXT
    #####: 1256:  if (JERRY_UNLIKELY (ecma_prop_name_is_symbol (property_name_p)))
        -: 1257:  {
    #####: 1258:    if (property_name_p->u.hash & ECMA_SYMBOL_FLAG_GLOBAL)
        -: 1259:    {
    #####: 1260:      magic_string_id = (property_name_p->u.hash >> ECMA_SYMBOL_FLAGS_SHIFT);
        -: 1261:    }
        -: 1262:  }
        -: 1263:#endif /* JERRY_ESNEXT */
        -: 1264:
        -: 1265:  ecma_built_in_props_t *built_in_props_p;
    #####: 1266:  ecma_object_type_t object_type = ecma_get_object_type (object_p);
        -: 1267:
    #####: 1268:  JERRY_ASSERT (object_type == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL || object_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS
        -: 1269:                || object_type == ECMA_OBJECT_TYPE_BUILT_IN_ARRAY
        -: 1270:                || (object_type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION && !ecma_builtin_function_is_routine (object_p)));
        -: 1271:
    #####: 1272:  if (ECMA_BUILTIN_IS_EXTENDED_BUILT_IN (object_type))
        -: 1273:  {
    #####: 1274:    built_in_props_p = &((ecma_extended_built_in_object_t *) object_p)->built_in;
        -: 1275:  }
        -: 1276:  else
        -: 1277:  {
    #####: 1278:    built_in_props_p = &((ecma_extended_object_t *) object_p)->u.built_in;
        -: 1279:  }
        -: 1280:
    #####: 1281:  ecma_builtin_id_t builtin_id = (ecma_builtin_id_t) built_in_props_p->id;
        -: 1282:
    #####: 1283:  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);
        -: 1284:
    #####: 1285:  const ecma_builtin_property_descriptor_t *property_list_p = ecma_builtin_property_list_references[builtin_id];
    #####: 1286:  const ecma_builtin_property_descriptor_t *curr_property_p = property_list_p;
        -: 1287:
    #####: 1288:  while (curr_property_p->magic_string_id != magic_string_id)
        -: 1289:  {
    #####: 1290:    JERRY_ASSERT (curr_property_p->magic_string_id != LIT_MAGIC_STRING__COUNT);
    #####: 1291:    curr_property_p++;
        -: 1292:  }
        -: 1293:
    #####: 1294:  uint32_t index = (uint32_t) (curr_property_p - property_list_p);
    #####: 1295:  uint8_t *bitset_p = built_in_props_p->u2.instantiated_bitset + (index >> 3);
        -: 1296:
        -: 1297:#if JERRY_BUILTIN_REALMS
    #####: 1298:  if (index >= 8 * sizeof (uint8_t))
        -: 1299:  {
    #####: 1300:    bitset_p += sizeof (ecma_value_t);
        -: 1301:  }
        -: 1302:#endif /* JERRY_BUILTIN_REALMS */
        -: 1303:
    #####: 1304:  uint8_t bit_for_index = (uint8_t) (1u << (index & 0x7));
    #####: 1305:  JERRY_ASSERT (!(*bitset_p & bit_for_index));
        -: 1306:
    #####: 1307:  *bitset_p |= bit_for_index;
    #####: 1308:} /* ecma_builtin_delete_built_in_property */
        -: 1309:
        -: 1310:#if JERRY_ESNEXT
        -: 1311:
        -: 1312:/**
        -: 1313: * List names of an Built-in native handler object's lazy instantiated properties,
        -: 1314: * adding them to corresponding string collections
        -: 1315: */
        -: 1316:static void
    #####: 1317:ecma_builtin_native_handler_list_lazy_property_names (ecma_object_t *object_p, /**< function object */
        -: 1318:                                                      ecma_collection_t *prop_names_p, /**< prop name collection */
        -: 1319:                                                      ecma_property_counter_t *prop_counter_p) /**< prop counter */
        -: 1320:{
    #####: 1321:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
    #####: 1322:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) object_p;
        -: 1323:
    #####: 1324:  if ((ext_obj_p->u.built_in.u2.routine_flags & ECMA_NATIVE_HANDLER_FLAGS_NAME_INITIALIZED) == 0)
        -: 1325:  {
    #####: 1326:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_NAME));
    #####: 1327:    prop_counter_p->string_named_props++;
        -: 1328:  }
        -: 1329:
    #####: 1330:  if ((ext_obj_p->u.built_in.u2.routine_flags & ECMA_NATIVE_HANDLER_FLAGS_LENGTH_INITIALIZED) == 0)
        -: 1331:  {
    #####: 1332:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
    #####: 1333:    prop_counter_p->string_named_props++;
        -: 1334:  }
    #####: 1335:} /* ecma_builtin_native_handler_list_lazy_property_names */
        -: 1336:
        -: 1337:#endif /* JERRY_ESNEXT */
        -: 1338:
        -: 1339:/**
        -: 1340: * List names of a built-in function's lazy instantiated properties
        -: 1341: *
        -: 1342: * See also:
        -: 1343: *          ecma_builtin_routine_try_to_instantiate_property
        -: 1344: */
        -: 1345:void
    #####: 1346:ecma_builtin_routine_list_lazy_property_names (ecma_object_t *object_p, /**< a built-in object */
        -: 1347:                                               ecma_collection_t *prop_names_p, /**< prop name collection */
        -: 1348:                                               ecma_property_counter_t *prop_counter_p, /**< property counters */
        -: 1349:                                               jerry_property_filter_t filter) /**< name filters */
        -: 1350:{
    #####: 1351:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
    #####: 1352:  JERRY_ASSERT (ecma_builtin_function_is_routine (object_p));
        -: 1353:
    #####: 1354:  if (filter & JERRY_PROPERTY_FILTER_EXCLUDE_STRINGS)
        -: 1355:  {
    #####: 1356:    return;
        -: 1357:  }
        -: 1358:
        -: 1359:#if JERRY_ESNEXT
    #####: 1360:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
        -: 1361:
    #####: 1362:  if (JERRY_UNLIKELY (ext_func_p->u.built_in.id == ECMA_BUILTIN_ID_HANDLER))
        -: 1363:  {
    #####: 1364:    ecma_builtin_native_handler_list_lazy_property_names (object_p, prop_names_p, prop_counter_p);
    #####: 1365:    return;
        -: 1366:  }
        -: 1367:
    #####: 1368:  if (!(ext_func_p->u.built_in.u2.routine_flags & ECMA_BUILTIN_ROUTINE_LENGTH_INITIALIZED))
        -: 1369:  {
        -: 1370:    /* Unintialized 'length' property is non-enumerable (ECMA-262 v6, 19.2.4.1) */
    #####: 1371:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
    #####: 1372:    prop_counter_p->string_named_props++;
        -: 1373:  }
    #####: 1374:  if (!(ext_func_p->u.built_in.u2.routine_flags & ECMA_BUILTIN_ROUTINE_NAME_INITIALIZED))
        -: 1375:  {
        -: 1376:    /* Unintialized 'name' property is non-enumerable (ECMA-262 v6, 19.2.4.2) */
    #####: 1377:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_NAME));
    #####: 1378:    prop_counter_p->string_named_props++;
        -: 1379:  }
        -: 1380:#else /* !JERRY_ESNEXT */
        -: 1381:  /* 'length' property is non-enumerable (ECMA-262 v5, 15) */
    #####: 1382:  ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
    #####: 1383:  prop_counter_p->string_named_props++;
        -: 1384:#endif /* JERRY_ESNEXT */
        -: 1385:} /* ecma_builtin_routine_list_lazy_property_names */
        -: 1386:
        -: 1387:/**
        -: 1388: * List names of a built-in object's lazy instantiated properties
        -: 1389: *
        -: 1390: * See also:
        -: 1391: *          ecma_builtin_try_to_instantiate_property
        -: 1392: */
        -: 1393:void
    #####: 1394:ecma_builtin_list_lazy_property_names (ecma_object_t *object_p, /**< a built-in object */
        -: 1395:                                       ecma_collection_t *prop_names_p, /**< prop name collection */
        -: 1396:                                       ecma_property_counter_t *prop_counter_p, /**< property counters */
        -: 1397:                                       jerry_property_filter_t filter) /**< name filters */
        -: 1398:{
    #####: 1399:  JERRY_ASSERT (ecma_get_object_type (object_p) != ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION
        -: 1400:                || !ecma_builtin_function_is_routine (object_p));
        -: 1401:
        -: 1402:  ecma_built_in_props_t *built_in_props_p;
    #####: 1403:  ecma_object_type_t object_type = ecma_get_object_type (object_p);
        -: 1404:
    #####: 1405:  if (ECMA_BUILTIN_IS_EXTENDED_BUILT_IN (object_type))
        -: 1406:  {
    #####: 1407:    built_in_props_p = &((ecma_extended_built_in_object_t *) object_p)->built_in;
        -: 1408:  }
        -: 1409:  else
        -: 1410:  {
    #####: 1411:    built_in_props_p = &((ecma_extended_object_t *) object_p)->u.built_in;
        -: 1412:  }
        -: 1413:
    #####: 1414:  ecma_builtin_id_t builtin_id = (ecma_builtin_id_t) built_in_props_p->id;
        -: 1415:
    #####: 1416:  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);
        -: 1417:
        -: 1418:#if JERRY_BUILTIN_REALMS
    #####: 1419:  uint8_t *bitset_p = built_in_props_p->u2.instantiated_bitset + 1 + sizeof (ecma_value_t);
        -: 1420:#else /* !JERRY_BUILTIN_REALMS */
    #####: 1421:  uint8_t *bitset_p = built_in_props_p->u2.instantiated_bitset + 1;
        -: 1422:#endif /* JERRY_BUILTIN_REALMS */
        -: 1423:
        -: 1424:#if JERRY_ESNEXT
    #####: 1425:  uint8_t *symbol_bitset_p = bitset_p;
    #####: 1426:  bool has_symbol = true;
        -: 1427:#endif /* JERRY_BUILTIN_REALMS */
        -: 1428:
    #####: 1429:  if (!(filter & JERRY_PROPERTY_FILTER_EXCLUDE_STRINGS))
        -: 1430:  {
    #####: 1431:    const ecma_builtin_property_descriptor_t *curr_property_p = ecma_builtin_property_list_references[builtin_id];
    #####: 1432:    uint8_t bitset = built_in_props_p->u2.instantiated_bitset[0];
    #####: 1433:    uint32_t index = 0;
        -: 1434:
        -: 1435:#if JERRY_ESNEXT
    #####: 1436:    has_symbol = false;
        -: 1437:#endif /* JERRY_BUILTIN_REALMS */
        -: 1438:
    #####: 1439:    while (curr_property_p->magic_string_id != LIT_MAGIC_STRING__COUNT)
        -: 1440:    {
    #####: 1441:      if (index == 8)
        -: 1442:      {
    #####: 1443:        bitset = *bitset_p++;
    #####: 1444:        index = 0;
        -: 1445:      }
        -: 1446:
    #####: 1447:      uint32_t bit_for_index = (uint32_t) 1u << index;
        -: 1448:
    #####: 1449:      if (!(bitset & bit_for_index))
        -: 1450:      {
        -: 1451:#if JERRY_ESNEXT
    #####: 1452:        if (JERRY_LIKELY (curr_property_p->magic_string_id < LIT_NON_INTERNAL_MAGIC_STRING__COUNT))
        -: 1453:        {
        -: 1454:#endif /* JERRY_ESNEXT */
    #####: 1455:          ecma_value_t name = ecma_make_magic_string_value ((lit_magic_string_id_t) curr_property_p->magic_string_id);
    #####: 1456:          ecma_collection_push_back (prop_names_p, name);
    #####: 1457:          prop_counter_p->string_named_props++;
        -: 1458:#if JERRY_ESNEXT
        -: 1459:        }
        -: 1460:        else
        -: 1461:        {
    #####: 1462:          JERRY_ASSERT (LIT_IS_GLOBAL_SYMBOL (curr_property_p->magic_string_id));
    #####: 1463:          has_symbol = true;
        -: 1464:        }
        -: 1465:#endif /* JERRY_ESNEXT */
        -: 1466:      }
        -: 1467:
    #####: 1468:      curr_property_p++;
    #####: 1469:      index++;
        -: 1470:    }
        -: 1471:  }
        -: 1472:
        -: 1473:#if JERRY_ESNEXT
    #####: 1474:  if (has_symbol && !(filter & JERRY_PROPERTY_FILTER_EXCLUDE_SYMBOLS))
        -: 1475:  {
    #####: 1476:    const ecma_builtin_property_descriptor_t *curr_property_p = ecma_builtin_property_list_references[builtin_id];
    #####: 1477:    uint8_t bitset = built_in_props_p->u2.instantiated_bitset[0];
    #####: 1478:    uint32_t index = 0;
        -: 1479:
    #####: 1480:    while (curr_property_p->magic_string_id != LIT_MAGIC_STRING__COUNT)
        -: 1481:    {
    #####: 1482:      if (index == 8)
        -: 1483:      {
    #####: 1484:        bitset = *symbol_bitset_p++;
    #####: 1485:        index = 0;
        -: 1486:      }
        -: 1487:
    #####: 1488:      uint32_t bit_for_index = (uint32_t) 1u << index;
        -: 1489:
    #####: 1490:      if (curr_property_p->magic_string_id > LIT_NON_INTERNAL_MAGIC_STRING__COUNT && !(bitset & bit_for_index))
        -: 1491:      {
    #####: 1492:        ecma_string_t *name_p = ecma_op_get_global_symbol (curr_property_p->magic_string_id);
    #####: 1493:        ecma_collection_push_back (prop_names_p, ecma_make_symbol_value (name_p));
    #####: 1494:        prop_counter_p->symbol_named_props++;
        -: 1495:      }
        -: 1496:
    #####: 1497:      curr_property_p++;
    #####: 1498:      index++;
        -: 1499:    }
        -: 1500:  }
        -: 1501:#endif /* JERRY_ESNEXT */
    #####: 1502:} /* ecma_builtin_list_lazy_property_names */
        -: 1503:
        -: 1504:/**
        -: 1505: * Dispatcher of built-in routines
        -: 1506: *
        -: 1507: * @return ecma value
        -: 1508: *         Returned value must be freed with ecma_free_value.
        -: 1509: */
        -: 1510:static ecma_value_t
        2: 1511:ecma_builtin_dispatch_routine (ecma_extended_object_t *func_obj_p, /**< builtin object */
        -: 1512:                               ecma_value_t this_arg_value, /**< 'this' argument value */
        -: 1513:                               const ecma_value_t *arguments_list_p, /**< list of arguments passed to routine */
        -: 1514:                               uint32_t arguments_list_len) /**< length of arguments' list */
        -: 1515:{
        2: 1516:  JERRY_ASSERT (ecma_builtin_function_is_routine ((ecma_object_t *) func_obj_p));
        -: 1517:
        2: 1518:  ecma_value_t padded_arguments_list_p[3] = { ECMA_VALUE_UNDEFINED, ECMA_VALUE_UNDEFINED, ECMA_VALUE_UNDEFINED };
        -: 1519:
        2: 1520:  if (arguments_list_len <= 2)
        -: 1521:  {
    #####: 1522:    switch (arguments_list_len)
        -: 1523:    {
    #####: 1524:      case 2:
        -: 1525:      {
    #####: 1526:        padded_arguments_list_p[1] = arguments_list_p[1];
        -: 1527:        /* FALLTHRU */
        -: 1528:      }
    #####: 1529:      case 1:
        -: 1530:      {
    #####: 1531:        padded_arguments_list_p[0] = arguments_list_p[0];
    #####: 1532:        break;
        -: 1533:      }
    #####: 1534:      default:
        -: 1535:      {
    #####: 1536:        JERRY_ASSERT (arguments_list_len == 0);
        -: 1537:      }
        -: 1538:    }
        -: 1539:
    #####: 1540:    arguments_list_p = padded_arguments_list_p;
        -: 1541:  }
        -: 1542:
        2: 1543:  return ecma_builtin_routines[func_obj_p->u.built_in.id](func_obj_p->u.built_in.routine_id,
        -: 1544:                                                          this_arg_value,
        -: 1545:                                                          arguments_list_p,
        -: 1546:                                                          arguments_list_len);
        -: 1547:} /* ecma_builtin_dispatch_routine */
        -: 1548:
        -: 1549:/**
        -: 1550: * Handle calling [[Call]] of built-in object
        -: 1551: *
        -: 1552: * @return ecma value
        -: 1553: */
        -: 1554:ecma_value_t
        2: 1555:ecma_builtin_dispatch_call (ecma_object_t *obj_p, /**< built-in object */
        -: 1556:                            ecma_value_t this_arg_value, /**< 'this' argument value */
        -: 1557:                            const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1558:                            uint32_t arguments_list_len) /**< arguments list length */
        -: 1559:{
        2: 1560:  JERRY_ASSERT (ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
        -: 1561:
        2: 1562:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;
        -: 1563:
        2: 1564:  if (ecma_builtin_function_is_routine (obj_p))
        -: 1565:  {
        -: 1566:#if JERRY_ESNEXT
        2: 1567:    if (JERRY_UNLIKELY (ext_obj_p->u.built_in.id == ECMA_BUILTIN_ID_HANDLER))
        -: 1568:    {
    #####: 1569:      ecma_builtin_handler_t handler = ecma_builtin_handler_get (ext_obj_p->u.built_in.routine_id);
    #####: 1570:      return handler (obj_p, arguments_list_p, arguments_list_len);
        -: 1571:    }
        -: 1572:#endif /* !JERRY_ESNEXT */
        -: 1573:
        2: 1574:    return ecma_builtin_dispatch_routine (ext_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
        -: 1575:  }
        -: 1576:
    #####: 1577:  ecma_builtin_id_t builtin_object_id = ext_obj_p->u.built_in.id;
    #####: 1578:  JERRY_ASSERT (builtin_object_id < sizeof (ecma_builtin_call_functions) / sizeof (ecma_builtin_dispatch_call_t));
    #####: 1579:  return ecma_builtin_call_functions[builtin_object_id](arguments_list_p, arguments_list_len);
        -: 1580:} /* ecma_builtin_dispatch_call */
        -: 1581:
        -: 1582:/**
        -: 1583: * Handle calling [[Construct]] of built-in object
        -: 1584: *
        -: 1585: * @return ecma value
        -: 1586: */
        -: 1587:ecma_value_t
        4: 1588:ecma_builtin_dispatch_construct (ecma_object_t *obj_p, /**< built-in object */
        -: 1589:                                 const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1590:                                 uint32_t arguments_list_len) /**< arguments list length */
        -: 1591:{
        4: 1592:  JERRY_ASSERT (ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
        -: 1593:
        4: 1594:  if (ecma_builtin_function_is_routine (obj_p))
        -: 1595:  {
    #####: 1596:    return ecma_raise_type_error (ECMA_ERR_BULTIN_ROUTINES_HAVE_NO_CONSTRUCTOR);
        -: 1597:  }
        -: 1598:
        4: 1599:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;
        4: 1600:  ecma_builtin_id_t builtin_object_id = ext_obj_p->u.built_in.id;
        4: 1601:  JERRY_ASSERT (builtin_object_id < sizeof (ecma_builtin_construct_functions) / sizeof (ecma_builtin_dispatch_call_t));
        -: 1602:
        4: 1603:  return ecma_builtin_construct_functions[builtin_object_id](arguments_list_p, arguments_list_len);
        -: 1604:} /* ecma_builtin_dispatch_construct */
        -: 1605:
        -: 1606:/**
        -: 1607: * @}
        -: 1608: * @}
        -: 1609: */
