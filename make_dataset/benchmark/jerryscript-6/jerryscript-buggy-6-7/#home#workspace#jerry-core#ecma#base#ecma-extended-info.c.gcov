        -:    0:Source:/home/workspace/jerry-core/ecma/base/ecma-extended-info.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-extended-info.h"
        -:   17:
        -:   18:#include "ecma-helpers.h"
        -:   19:
        -:   20:#include "byte-code.h"
        -:   21:
        -:   22:#if JERRY_ESNEXT || JERRY_FUNCTION_TO_STRING
        -:   23:
        -:   24:/** \addtogroup ecma ECMA
        -:   25: * @{
        -:   26: *
        -:   27: * \addtogroup ecmaextendedinfo Extended info
        -:   28: * @{
        -:   29: */
        -:   30:
        -:   31:/**
        -:   32: * Decodes an uint32_t number, and updates the buffer position.
        -:   33: *
        -:   34: * @return the decoded value
        -:   35: */
        -:   36:uint32_t
    #####:   37:ecma_extended_info_decode_vlq (uint8_t **buffer_p) /**< [in/out] target buffer */
        -:   38:{
    #####:   39:  uint8_t *source_p = *buffer_p;
    #####:   40:  uint32_t value = 0;
        -:   41:
        -:   42:  do
        -:   43:  {
    #####:   44:    source_p--;
    #####:   45:    value = (value << ECMA_EXTENDED_INFO_VLQ_SHIFT) | (*source_p & ECMA_EXTENDED_INFO_VLQ_MASK);
    #####:   46:  } while (*source_p & ECMA_EXTENDED_INFO_VLQ_CONTINUE);
        -:   47:
    #####:   48:  *buffer_p = source_p;
    #####:   49:  return value;
        -:   50:} /* ecma_extended_info_decode_vlq */
        -:   51:
        -:   52:/**
        -:   53: * Encodes an uint32_t number into a buffer.
        -:   54: */
        -:   55:void
    #####:   56:ecma_extended_info_encode_vlq (uint8_t **buffer_p, /**< target buffer */
        -:   57:                               uint32_t value) /**< encoded value */
        -:   58:{
    #####:   59:  uint8_t *destination_p = *buffer_p - 1;
        -:   60:
    #####:   61:  if (value <= ECMA_EXTENDED_INFO_VLQ_MASK)
        -:   62:  {
    #####:   63:    *destination_p = (uint8_t) value;
    #####:   64:    *buffer_p = destination_p;
    #####:   65:    return;
        -:   66:  }
        -:   67:
    #####:   68:  uint32_t length = 0;
    #####:   69:  uint32_t current_value = value >> ECMA_EXTENDED_INFO_VLQ_SHIFT;
        -:   70:
        -:   71:  do
        -:   72:  {
    #####:   73:    current_value >>= ECMA_EXTENDED_INFO_VLQ_SHIFT;
    #####:   74:    length++;
    #####:   75:  } while (current_value > 0);
        -:   76:
    #####:   77:  destination_p -= length;
    #####:   78:  *buffer_p = destination_p;
        -:   79:
        -:   80:  do
        -:   81:  {
    #####:   82:    *destination_p++ = (uint8_t) (value | ECMA_EXTENDED_INFO_VLQ_CONTINUE);
    #####:   83:    value >>= ECMA_EXTENDED_INFO_VLQ_SHIFT;
    #####:   84:  } while (value > 0);
        -:   85:
    #####:   86:  **buffer_p &= ECMA_EXTENDED_INFO_VLQ_MASK;
        -:   87:} /* ecma_extended_info_encode_vlq */
        -:   88:
        -:   89:/**
        -:   90: * Gets the encoded length of a number.
        -:   91: *
        -:   92: * @return encoded length
        -:   93: */
        -:   94:uint32_t
    #####:   95:ecma_extended_info_get_encoded_length (uint32_t value) /**< encoded value */
        -:   96:{
    #####:   97:  uint32_t length = 0;
        -:   98:
        -:   99:  do
        -:  100:  {
    #####:  101:    value >>= ECMA_EXTENDED_INFO_VLQ_SHIFT;
    #####:  102:    length++;
    #####:  103:  } while (value > 0);
        -:  104:
    #####:  105:  return length;
        -:  106:} /* ecma_extended_info_get_encoded_length */
        -:  107:
        -:  108:/**
        -:  109: * Get the extended info from a byte code
        -:  110: *
        -:  111: * @return pointer to the extended info
        -:  112: */
        -:  113:uint8_t *
    #####:  114:ecma_compiled_code_resolve_extended_info (const ecma_compiled_code_t *bytecode_header_p) /**< compiled code */
        -:  115:{
    #####:  116:  JERRY_ASSERT (bytecode_header_p != NULL);
    #####:  117:  JERRY_ASSERT (bytecode_header_p->status_flags & CBC_CODE_FLAGS_HAS_EXTENDED_INFO);
        -:  118:
    #####:  119:  ecma_value_t *base_p = ecma_compiled_code_resolve_arguments_start (bytecode_header_p);
        -:  120:
        -:  121:#if JERRY_ESNEXT
    #####:  122:  if (CBC_FUNCTION_GET_TYPE (bytecode_header_p->status_flags) != CBC_FUNCTION_CONSTRUCTOR)
        -:  123:  {
    #####:  124:    base_p--;
        -:  125:  }
        -:  126:
    #####:  127:  if (bytecode_header_p->status_flags & CBC_CODE_FLAGS_HAS_TAGGED_LITERALS)
        -:  128:  {
    #####:  129:    base_p--;
        -:  130:  }
        -:  131:#endif /* JERRY_ESNEXT */
        -:  132:
        -:  133:#if JERRY_LINE_INFO
    #####:  134:  if (bytecode_header_p->status_flags & CBC_CODE_FLAGS_HAS_LINE_INFO)
        -:  135:  {
    #####:  136:    base_p--;
        -:  137:  }
        -:  138:#endif /* JERRY_LINE_INFO */
        -:  139:
    #####:  140:  JERRY_ASSERT (((uint8_t *) base_p)[-1] != 0);
        -:  141:
    #####:  142:  return ((uint8_t *) base_p) - 1;
        -:  143:} /* ecma_compiled_code_resolve_extended_info */
        -:  144:
        -:  145:#endif /* JERRY_ESNEXT || JERRY_FUNCTION_TO_STRING */
        -:  146:
        -:  147:/**
        -:  148: * @}
        -:  149: * @}
        -:  150: */
