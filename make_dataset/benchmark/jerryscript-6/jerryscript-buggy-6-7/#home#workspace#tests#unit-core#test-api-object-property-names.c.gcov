        -:    0:Source:/home/workspace/tests/unit-core/test-api-object-property-names.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-port-default.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:static const char *prop_names[] = { "val1", "val2", "val3", "val4", "val5", "37", "symbol" };
        -:   23:
        -:   24:static jerry_char_t buffer[256] = { 0 };
        -:   25:
        -:   26:static void
    #####:   27:create_and_set_property (const jerry_value_t object, const char *prop_name)
        -:   28:{
    #####:   29:  jerry_value_t jprop_name = jerry_string_sz (prop_name);
    #####:   30:  jerry_value_t ret_val = jerry_object_set (object, jprop_name, jerry_undefined ());
        -:   31:
    #####:   32:  jerry_value_free (jprop_name);
    #####:   33:  jerry_value_free (ret_val);
    #####:   34:} /* create_and_set_property */
        -:   35:
        -:   36:static void
    #####:   37:compare_prop_name (const jerry_value_t object, const char *prop_name, uint32_t idx)
        -:   38:{
    #####:   39:  jerry_value_t name = jerry_object_get_index (object, idx);
    #####:   40:  TEST_ASSERT (jerry_value_is_string (name) || jerry_value_is_number (name));
    #####:   41:  if (jerry_value_is_string (name))
        -:   42:  {
    #####:   43:    jerry_size_t name_size = jerry_string_size (name, JERRY_ENCODING_CESU8);
    #####:   44:    TEST_ASSERT (name_size < sizeof (buffer));
    #####:   45:    jerry_size_t ret_size = jerry_string_to_buffer (name, JERRY_ENCODING_CESU8, buffer, sizeof (buffer));
    #####:   46:    TEST_ASSERT (name_size == ret_size);
    #####:   47:    buffer[name_size] = '\0';
    #####:   48:    TEST_ASSERT (strcmp ((const char *) buffer, prop_name) == 0);
        -:   49:  }
        -:   50:  else
        -:   51:  {
    #####:   52:    TEST_ASSERT ((int) jerry_value_as_number (name) == atoi (prop_name));
        -:   53:  }
        -:   54:
    #####:   55:  jerry_value_free (name);
    #####:   56:} /* compare_prop_name */
        -:   57:
        -:   58:static void
    #####:   59:define_property (const jerry_value_t object,
        -:   60:                 const char *prop_name,
        -:   61:                 jerry_property_descriptor_t *prop_desc_p,
        -:   62:                 bool is_symbol)
        -:   63:{
    #####:   64:  jerry_value_t jname = jerry_string_sz (prop_name);
        -:   65:  jerry_value_t ret_val;
    #####:   66:  if (is_symbol)
        -:   67:  {
    #####:   68:    jerry_value_t symbol = jerry_symbol_with_description (jname);
    #####:   69:    ret_val = jerry_object_define_own_prop (object, symbol, prop_desc_p);
    #####:   70:    jerry_value_free (symbol);
        -:   71:  }
        -:   72:  else
        -:   73:  {
    #####:   74:    ret_val = jerry_object_define_own_prop (object, jname, prop_desc_p);
        -:   75:  }
        -:   76:
    #####:   77:  jerry_value_free (jname);
    #####:   78:  jerry_value_free (ret_val);
    #####:   79:} /* define_property */
        -:   80:
        -:   81:int
    #####:   82:main (void)
        -:   83:{
    #####:   84:  if (!jerry_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:   85:  {
        -:   86:    return 0;
        -:   87:  }
        -:   88:
    #####:   89:  TEST_INIT ();
    #####:   90:  jerry_init (JERRY_INIT_EMPTY);
        -:   91:
    #####:   92:  jerry_value_t error_value = jerry_object_property_names (jerry_undefined (), JERRY_PROPERTY_FILTER_ALL);
    #####:   93:  TEST_ASSERT (jerry_value_is_exception (error_value) && jerry_error_type (error_value) == JERRY_ERROR_TYPE);
    #####:   94:  jerry_value_free (error_value);
        -:   95:
    #####:   96:  jerry_value_t test_object = jerry_object ();
    #####:   97:  create_and_set_property (test_object, prop_names[0]);
    #####:   98:  create_and_set_property (test_object, prop_names[1]);
        -:   99:
        -:  100:  jerry_value_t names;
        -:  101:
    #####:  102:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor ();
    #####:  103:  prop_desc.flags |= (JERRY_PROP_IS_CONFIGURABLE_DEFINED | JERRY_PROP_IS_CONFIGURABLE | JERRY_PROP_IS_WRITABLE_DEFINED
        -:  104:                      | JERRY_PROP_IS_WRITABLE | JERRY_PROP_IS_ENUMERABLE_DEFINED);
        -:  105:
        -:  106:  // Test enumerable - non-enumerable filter
    #####:  107:  define_property (test_object, prop_names[2], &prop_desc, false);
    #####:  108:  names =
        -:  109:    jerry_object_property_names (test_object, JERRY_PROPERTY_FILTER_ALL | JERRY_PROPERTY_FILTER_EXCLUDE_NON_ENUMERABLE);
    #####:  110:  TEST_ASSERT (jerry_array_length (names) == (uint32_t) 2);
    #####:  111:  jerry_value_free (names);
    #####:  112:  names = jerry_object_property_names (test_object, JERRY_PROPERTY_FILTER_ALL);
    #####:  113:  TEST_ASSERT (jerry_array_length (names) == (uint32_t) 3);
    #####:  114:  compare_prop_name (names, prop_names[2], 2);
    #####:  115:  jerry_value_free (names);
    #####:  116:  prop_desc.flags |= JERRY_PROP_IS_ENUMERABLE;
        -:  117:
        -:  118:  // Test configurable - non-configurable filter
    #####:  119:  prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_CONFIGURABLE;
    #####:  120:  define_property (test_object, prop_names[3], &prop_desc, false);
    #####:  121:  names = jerry_object_property_names (test_object,
        -:  122:                                       JERRY_PROPERTY_FILTER_ALL | JERRY_PROPERTY_FILTER_EXCLUDE_NON_CONFIGURABLE);
    #####:  123:  TEST_ASSERT (jerry_array_length (names) == (uint32_t) 3);
    #####:  124:  jerry_value_free (names);
    #####:  125:  names = jerry_object_property_names (test_object, JERRY_PROPERTY_FILTER_ALL);
    #####:  126:  TEST_ASSERT (jerry_array_length (names) == (uint32_t) 4);
    #####:  127:  compare_prop_name (names, prop_names[3], 3);
    #####:  128:  jerry_value_free (names);
    #####:  129:  prop_desc.flags |= JERRY_PROP_IS_CONFIGURABLE;
        -:  130:
        -:  131:  // Test writable - non-writable filter
    #####:  132:  prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_WRITABLE;
    #####:  133:  define_property (test_object, prop_names[4], &prop_desc, false);
    #####:  134:  names =
        -:  135:    jerry_object_property_names (test_object, JERRY_PROPERTY_FILTER_ALL | JERRY_PROPERTY_FILTER_EXCLUDE_NON_WRITABLE);
    #####:  136:  TEST_ASSERT (jerry_array_length (names) == (uint32_t) 4);
    #####:  137:  jerry_value_free (names);
    #####:  138:  names = jerry_object_property_names (test_object, JERRY_PROPERTY_FILTER_ALL);
    #####:  139:  TEST_ASSERT (jerry_array_length (names) == (uint32_t) 5);
    #####:  140:  compare_prop_name (names, prop_names[4], 4);
    #####:  141:  jerry_value_free (names);
    #####:  142:  prop_desc.flags |= JERRY_PROP_IS_WRITABLE;
        -:  143:
        -:  144:  // Test all property filter
    #####:  145:  names = jerry_object_property_names (test_object, JERRY_PROPERTY_FILTER_ALL);
    #####:  146:  jerry_length_t array_len = jerry_array_length (names);
    #####:  147:  TEST_ASSERT (array_len == (uint32_t) 5);
        -:  148:
    #####:  149:  for (uint32_t i = 0; i < array_len; i++)
        -:  150:  {
    #####:  151:    compare_prop_name (names, prop_names[i], i);
        -:  152:  }
        -:  153:
    #####:  154:  jerry_value_free (names);
        -:  155:
        -:  156:  // Test number and string index exclusion
    #####:  157:  define_property (test_object, prop_names[5], &prop_desc, false);
    #####:  158:  names = jerry_object_property_names (test_object,
        -:  159:                                       JERRY_PROPERTY_FILTER_ALL | JERRY_PROPERTY_FILTER_EXCLUDE_STRINGS
        -:  160:                                         | JERRY_PROPERTY_FILTER_INTEGER_INDICES_AS_NUMBER);
    #####:  161:  TEST_ASSERT (jerry_array_length (names) == (uint32_t) 1);
    #####:  162:  compare_prop_name (names, prop_names[5], 0);
    #####:  163:  jerry_value_free (names);
    #####:  164:  names = jerry_object_property_names (test_object,
        -:  165:                                       JERRY_PROPERTY_FILTER_ALL | JERRY_PROPERTY_FILTER_EXCLUDE_INTEGER_INDICES);
    #####:  166:  TEST_ASSERT (jerry_array_length (names) == (uint32_t) 5);
    #####:  167:  jerry_value_free (names);
        -:  168:
        -:  169:  // Test prototype chain traversion
    #####:  170:  names = jerry_object_property_names (test_object, JERRY_PROPERTY_FILTER_ALL);
    #####:  171:  TEST_ASSERT (jerry_array_length (names) == (uint32_t) 6);
    #####:  172:  jerry_value_free (names);
    #####:  173:  names = jerry_object_property_names (test_object,
        -:  174:                                       JERRY_PROPERTY_FILTER_ALL | JERRY_PROPERTY_FILTER_TRAVERSE_PROTOTYPE_CHAIN);
    #####:  175:  TEST_ASSERT (jerry_array_length (names) == (uint32_t) 18);
    #####:  176:  jerry_value_free (names);
        -:  177:
        -:  178:  // Test symbol exclusion
    #####:  179:  define_property (test_object, prop_names[6], &prop_desc, true);
    #####:  180:  names = jerry_object_property_names (test_object, JERRY_PROPERTY_FILTER_ALL | JERRY_PROPERTY_FILTER_EXCLUDE_SYMBOLS);
    #####:  181:  TEST_ASSERT (jerry_array_length (names) == (uint32_t) 6);
    #####:  182:  jerry_value_free (names);
    #####:  183:  names = jerry_object_property_names (test_object, JERRY_PROPERTY_FILTER_ALL);
    #####:  184:  TEST_ASSERT (jerry_array_length (names) == (uint32_t) 7);
    #####:  185:  jerry_value_free (names);
        -:  186:
    #####:  187:  jerry_property_descriptor_free (&prop_desc);
    #####:  188:  jerry_value_free (test_object);
    #####:  189:  jerry_cleanup ();
    #####:  190:  return 0;
        -:  191:} /* main */
