        -:    0:Source:/home/workspace/jerry-core/parser/regexp/re-bytecode.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "re-bytecode.h"
        -:   17:
        -:   18:#include "ecma-globals.h"
        -:   19:#include "ecma-regexp-object.h"
        -:   20:
        -:   21:#include "lit-strings.h"
        -:   22:
        -:   23:#if JERRY_BUILTIN_REGEXP
        -:   24:
        -:   25:/** \addtogroup parser Parser
        -:   26: * @{
        -:   27: *
        -:   28: * \addtogroup regexparser Regular expression
        -:   29: * @{
        -:   30: *
        -:   31: * \addtogroup regexparser_bytecode Bytecode
        -:   32: * @{
        -:   33: */
        -:   34:
        -:   35:void
    #####:   36:re_initialize_regexp_bytecode (re_compiler_ctx_t *re_ctx_p) /**< RegExp bytecode context */
        -:   37:{
    #####:   38:  const size_t initial_size = sizeof (re_compiled_code_t);
    #####:   39:  re_ctx_p->bytecode_start_p = jmem_heap_alloc_block (initial_size);
    #####:   40:  re_ctx_p->bytecode_size = initial_size;
    #####:   41:} /* re_initialize_regexp_bytecode */
        -:   42:
        -:   43:extern inline uint32_t JERRY_ATTR_ALWAYS_INLINE
    #####:   44:re_bytecode_size (re_compiler_ctx_t *re_ctx_p) /**< RegExp bytecode context */
        -:   45:{
    #####:   46:  return (uint32_t) re_ctx_p->bytecode_size;
        -:   47:} /* re_bytecode_size */
        -:   48:
        -:   49:/**
        -:   50: * Append a new bytecode to the and of the bytecode container
        -:   51: */
        -:   52:static uint8_t *
    #####:   53:re_bytecode_reserve (re_compiler_ctx_t *re_ctx_p, /**< RegExp bytecode context */
        -:   54:                     const size_t size) /**< size */
        -:   55:{
    #####:   56:  const size_t old_size = re_ctx_p->bytecode_size;
    #####:   57:  const size_t new_size = old_size + size;
    #####:   58:  re_ctx_p->bytecode_start_p = jmem_heap_realloc_block (re_ctx_p->bytecode_start_p, old_size, new_size);
    #####:   59:  re_ctx_p->bytecode_size = new_size;
    #####:   60:  return re_ctx_p->bytecode_start_p + old_size;
        -:   61:} /* re_bytecode_reserve */
        -:   62:
        -:   63:/**
        -:   64: * Insert a new bytecode to the bytecode container
        -:   65: */
        -:   66:static uint8_t *
    #####:   67:re_bytecode_insert (re_compiler_ctx_t *re_ctx_p, /**< RegExp bytecode context */
        -:   68:                    const size_t offset, /**< distance from the start of the container */
        -:   69:                    const size_t size) /**< size */
        -:   70:{
    #####:   71:  const size_t tail_size = re_ctx_p->bytecode_size - offset;
    #####:   72:  re_bytecode_reserve (re_ctx_p, size);
        -:   73:
    #####:   74:  uint8_t *dest_p = re_ctx_p->bytecode_start_p + offset;
    #####:   75:  memmove (dest_p + size, dest_p, tail_size);
        -:   76:
    #####:   77:  return dest_p;
        -:   78:} /* re_bytecode_insert */
        -:   79:
        -:   80:/**
        -:   81: * Append a byte
        -:   82: */
        -:   83:void
    #####:   84:re_append_byte (re_compiler_ctx_t *re_ctx_p, /**< RegExp bytecode context */
        -:   85:                const uint8_t byte) /**< byte value */
        -:   86:{
    #####:   87:  uint8_t *dest_p = re_bytecode_reserve (re_ctx_p, sizeof (uint8_t));
    #####:   88:  *dest_p = byte;
    #####:   89:} /* re_append_byte */
        -:   90:
        -:   91:/**
        -:   92: * Insert a byte value
        -:   93: */
        -:   94:void
    #####:   95:re_insert_byte (re_compiler_ctx_t *re_ctx_p, /**< RegExp bytecode context */
        -:   96:                const uint32_t offset, /**< distance from the start of the container */
        -:   97:                const uint8_t byte) /**< byte value */
        -:   98:{
    #####:   99:  uint8_t *dest_p = re_bytecode_insert (re_ctx_p, offset, sizeof (uint8_t));
    #####:  100:  *dest_p = byte;
    #####:  101:} /* re_insert_byte */
        -:  102:
        -:  103:/**
        -:  104: * Get a single byte and icnrease bytecode position.
        -:  105: */
        -:  106:extern inline uint8_t JERRY_ATTR_ALWAYS_INLINE
    #####:  107:re_get_byte (const uint8_t **bc_p) /**< pointer to bytecode start */
        -:  108:{
    #####:  109:  return *((*bc_p)++);
        -:  110:} /* re_get_byte */
        -:  111:
        -:  112:/**
        -:  113: * Append a RegExp opcode
        -:  114: */
        -:  115:extern inline void JERRY_ATTR_ALWAYS_INLINE
    #####:  116:re_append_opcode (re_compiler_ctx_t *re_ctx_p, /**< RegExp bytecode context */
        -:  117:                  const re_opcode_t opcode) /**< input opcode */
        -:  118:{
    #####:  119:  re_append_byte (re_ctx_p, (uint8_t) opcode);
    #####:  120:} /* re_append_opcode */
        -:  121:
        -:  122:/**
        -:  123: * Insert a RegExp opcode
        -:  124: */
        -:  125:extern inline void JERRY_ATTR_ALWAYS_INLINE
    #####:  126:re_insert_opcode (re_compiler_ctx_t *re_ctx_p, /**< RegExp bytecode context */
        -:  127:                  const uint32_t offset, /**< distance from the start of the container */
        -:  128:                  const re_opcode_t opcode) /**< input opcode */
        -:  129:{
    #####:  130:  re_insert_byte (re_ctx_p, offset, (uint8_t) opcode);
    #####:  131:} /* re_insert_opcode */
        -:  132:
        -:  133:/**
        -:  134: * Get a RegExp opcode and increase the bytecode position
        -:  135: *
        -:  136: * @return current RegExp opcode
        -:  137: */
        -:  138:extern inline re_opcode_t JERRY_ATTR_ALWAYS_INLINE
    #####:  139:re_get_opcode (const uint8_t **bc_p) /**< pointer to bytecode start */
        -:  140:{
    #####:  141:  return (re_opcode_t) re_get_byte (bc_p);
        -:  142:} /* re_get_opcode */
        -:  143:
        -:  144:/**
        -:  145: * Encode 2 byte unsigned integer into the bytecode
        -:  146: */
        -:  147:static void
    #####:  148:re_encode_u16 (uint8_t *dest_p, /**< destination */
        -:  149:               const uint16_t value) /**< value */
        -:  150:{
    #####:  151:  *dest_p++ = (uint8_t) ((value >> 8) & 0xFF);
    #####:  152:  *dest_p = (uint8_t) (value & 0xFF);
    #####:  153:} /* re_encode_u16 */
        -:  154:
        -:  155:/**
        -:  156: * Encode 4 byte unsigned integer into the bytecode
        -:  157: */
        -:  158:static void
    #####:  159:re_encode_u32 (uint8_t *dest_p, /**< destination */
        -:  160:               const uint32_t value) /**< value */
        -:  161:{
    #####:  162:  *dest_p++ = (uint8_t) ((value >> 24) & 0xFF);
    #####:  163:  *dest_p++ = (uint8_t) ((value >> 16) & 0xFF);
    #####:  164:  *dest_p++ = (uint8_t) ((value >> 8) & 0xFF);
    #####:  165:  *dest_p = (uint8_t) (value & 0xFF);
    #####:  166:} /* re_encode_u32 */
        -:  167:
        -:  168:/**
        -:  169: * Decode 2 byte unsigned integer from bytecode
        -:  170: *
        -:  171: * @return uint16_t value
        -:  172: */
        -:  173:static uint16_t
    #####:  174:re_decode_u16 (const uint8_t *src_p) /**< source */
        -:  175:{
    #####:  176:  uint16_t value = (uint16_t) (((uint16_t) *src_p++) << 8);
    #####:  177:  value = (uint16_t) (value + *src_p++);
    #####:  178:  return value;
        -:  179:} /* re_decode_u16 */
        -:  180:
        -:  181:/**
        -:  182: * Decode 4 byte unsigned integer from bytecode
        -:  183: *
        -:  184: * @return uint32_t value
        -:  185: */
        -:  186:static uint32_t JERRY_ATTR_NOINLINE
    #####:  187:re_decode_u32 (const uint8_t *src_p) /**< source */
        -:  188:{
    #####:  189:  uint32_t value = (uint32_t) (((uint32_t) *src_p++) << 24);
    #####:  190:  value += (uint32_t) (((uint32_t) *src_p++) << 16);
    #####:  191:  value += (uint32_t) (((uint32_t) *src_p++) << 8);
    #####:  192:  value += (uint32_t) (*src_p++);
    #####:  193:  return value;
        -:  194:} /* re_decode_u32 */
        -:  195:
        -:  196:/**
        -:  197: * Get the encoded size of an uint32_t value.
        -:  198: *
        -:  199: * @return encoded value size
        -:  200: */
        -:  201:static inline size_t JERRY_ATTR_ALWAYS_INLINE
        -:  202:re_get_encoded_value_size (uint32_t value) /**< value */
        -:  203:{
    #####:  204:  if (JERRY_LIKELY (value <= RE_VALUE_1BYTE_MAX))
        -:  205:  {
    #####:  206:    return 1;
        -:  207:  }
        -:  208:
    #####:  209:  return 5;
        -:  210:} /* re_get_encoded_value_size */
        -:  211:
        -:  212:/*
        -:  213: * Encode a value to the specified position in the bytecode.
        -:  214: */
        -:  215:static void
    #####:  216:re_encode_value (uint8_t *dest_p, /**< position in bytecode */
        -:  217:                 const uint32_t value) /**< value */
        -:  218:{
    #####:  219:  if (JERRY_LIKELY (value <= RE_VALUE_1BYTE_MAX))
        -:  220:  {
    #####:  221:    *dest_p = (uint8_t) value;
    #####:  222:    return;
        -:  223:  }
        -:  224:
    #####:  225:  *dest_p++ = (uint8_t) (RE_VALUE_4BYTE_MARKER);
    #####:  226:  re_encode_u32 (dest_p, value);
        -:  227:} /* re_encode_value */
        -:  228:
        -:  229:/**
        -:  230: * Append a value to the end of the bytecode.
        -:  231: */
        -:  232:void
    #####:  233:re_append_value (re_compiler_ctx_t *re_ctx_p, /**< RegExp bytecode context */
        -:  234:                 const uint32_t value) /**< value */
        -:  235:{
    #####:  236:  const size_t size = re_get_encoded_value_size (value);
    #####:  237:  uint8_t *dest_p = re_bytecode_reserve (re_ctx_p, size);
    #####:  238:  re_encode_value (dest_p, value);
    #####:  239:} /* re_append_value */
        -:  240:
        -:  241:/**
        -:  242: * Insert a value into the bytecode at a specific offset.
        -:  243: */
        -:  244:void
    #####:  245:re_insert_value (re_compiler_ctx_t *re_ctx_p, /**< RegExp bytecode context */
        -:  246:                 const uint32_t offset, /**< bytecode offset */
        -:  247:                 const uint32_t value) /**< value */
        -:  248:{
    #####:  249:  const size_t size = re_get_encoded_value_size (value);
    #####:  250:  uint8_t *dest_p = re_bytecode_insert (re_ctx_p, offset, size);
    #####:  251:  re_encode_value (dest_p, value);
    #####:  252:} /* re_insert_value */
        -:  253:
        -:  254:/**
        -:  255: * Read an encoded value from the bytecode.
        -:  256: *
        -:  257: * @return decoded value
        -:  258: */
        -:  259:extern inline uint32_t JERRY_ATTR_ALWAYS_INLINE
    #####:  260:re_get_value (const uint8_t **bc_p) /** refence to bytecode pointer */
        -:  261:{
    #####:  262:  uint32_t value = *(*bc_p)++;
    #####:  263:  if (JERRY_LIKELY (value <= RE_VALUE_1BYTE_MAX))
        -:  264:  {
    #####:  265:    return value;
        -:  266:  }
        -:  267:
    #####:  268:  value = re_decode_u32 (*bc_p);
    #####:  269:  *bc_p += sizeof (uint32_t);
    #####:  270:  return value;
        -:  271:} /* re_get_value */
        -:  272:
        -:  273:/**
        -:  274: * Append a character to the RegExp bytecode
        -:  275: */
        -:  276:void
    #####:  277:re_append_char (re_compiler_ctx_t *re_ctx_p, /**< RegExp bytecode context */
        -:  278:                const lit_code_point_t cp) /**< code point */
        -:  279:{
        -:  280:#if JERRY_ESNEXT
    #####:  281:  const size_t size = (re_ctx_p->flags & RE_FLAG_UNICODE) ? sizeof (lit_code_point_t) : sizeof (ecma_char_t);
        -:  282:#else /* !JERRY_ESNEXT */
        -:  283:  JERRY_UNUSED (re_ctx_p);
    #####:  284:  const size_t size = sizeof (ecma_char_t);
        -:  285:#endif /* !JERRY_ESNEXT */
        -:  286:
    #####:  287:  uint8_t *dest_p = re_bytecode_reserve (re_ctx_p, size);
        -:  288:
        -:  289:#if JERRY_ESNEXT
    #####:  290:  if (re_ctx_p->flags & RE_FLAG_UNICODE)
        -:  291:  {
    #####:  292:    re_encode_u32 (dest_p, cp);
    #####:  293:    return;
        -:  294:  }
        -:  295:#endif /* JERRY_ESNEXT */
        -:  296:
    #####:  297:  JERRY_ASSERT (cp <= LIT_UTF16_CODE_UNIT_MAX);
    #####:  298:  re_encode_u16 (dest_p, (ecma_char_t) cp);
    #####:  299:} /* re_append_char */
        -:  300:
        -:  301:/**
        -:  302: * Append a character to the RegExp bytecode
        -:  303: */
        -:  304:void
    #####:  305:re_insert_char (re_compiler_ctx_t *re_ctx_p, /**< RegExp bytecode context */
        -:  306:                const uint32_t offset, /**< bytecode offset */
        -:  307:                const lit_code_point_t cp) /**< code point*/
        -:  308:{
        -:  309:#if JERRY_ESNEXT
    #####:  310:  const size_t size = (re_ctx_p->flags & RE_FLAG_UNICODE) ? sizeof (lit_code_point_t) : sizeof (ecma_char_t);
        -:  311:#else /* !JERRY_ESNEXT */
        -:  312:  JERRY_UNUSED (re_ctx_p);
    #####:  313:  const size_t size = sizeof (ecma_char_t);
        -:  314:#endif /* !JERRY_ESNEXT */
        -:  315:
    #####:  316:  uint8_t *dest_p = re_bytecode_insert (re_ctx_p, offset, size);
        -:  317:
        -:  318:#if JERRY_ESNEXT
    #####:  319:  if (re_ctx_p->flags & RE_FLAG_UNICODE)
        -:  320:  {
    #####:  321:    re_encode_u32 (dest_p, cp);
    #####:  322:    return;
        -:  323:  }
        -:  324:#endif /* JERRY_ESNEXT */
        -:  325:
    #####:  326:  JERRY_ASSERT (cp <= LIT_UTF16_CODE_UNIT_MAX);
    #####:  327:  re_encode_u16 (dest_p, (ecma_char_t) cp);
    #####:  328:} /* re_insert_char */
        -:  329:
        -:  330:/**
        -:  331: * Decode a character from the bytecode.
        -:  332: *
        -:  333: * @return decoded character
        -:  334: */
        -:  335:extern inline lit_code_point_t JERRY_ATTR_ALWAYS_INLINE
    #####:  336:re_get_char (const uint8_t **bc_p, /**< reference to bytecode pointer */
        -:  337:             bool unicode) /**< full unicode mode */
        -:  338:{
        -:  339:  lit_code_point_t cp;
        -:  340:
        -:  341:#if !JERRY_ESNEXT
        -:  342:  JERRY_UNUSED (unicode);
        -:  343:#else /* JERRY_ESNEXT */
    #####:  344:  if (unicode)
        -:  345:  {
    #####:  346:    cp = re_decode_u32 (*bc_p);
    #####:  347:    *bc_p += sizeof (lit_code_point_t);
        -:  348:  }
        -:  349:  else
        -:  350:#endif /* JERRY_ESNEXT */
        -:  351:  {
    #####:  352:    cp = re_decode_u16 (*bc_p);
    #####:  353:    *bc_p += sizeof (ecma_char_t);
        -:  354:  }
        -:  355:
    #####:  356:  return cp;
        -:  357:} /* re_get_char */
        -:  358:
        -:  359:#if JERRY_REGEXP_DUMP_BYTE_CODE
        -:  360:static uint32_t
        -:  361:re_get_bytecode_offset (const uint8_t *start_p, /**< bytecode start pointer */
        -:  362:                        const uint8_t *current_p) /**< current bytecode pointer */
        -:  363:{
        -:  364:  return (uint32_t) ((uintptr_t) current_p - (uintptr_t) start_p);
        -:  365:} /* re_get_bytecode_offset */
        -:  366:
        -:  367:/**
        -:  368: * RegExp bytecode dumper
        -:  369: */
        -:  370:void
        -:  371:re_dump_bytecode (re_compiler_ctx_t *re_ctx_p) /**< RegExp bytecode context */
        -:  372:{
        -:  373:  static const char escape_chars[] = { 'd', 'D', 'w', 'W', 's', 'S' };
        -:  374:
        -:  375:  re_compiled_code_t *compiled_code_p = (re_compiled_code_t *) re_ctx_p->bytecode_start_p;
        -:  376:  JERRY_DEBUG_MSG ("Flags: 0x%x ", compiled_code_p->header.status_flags);
        -:  377:  JERRY_DEBUG_MSG ("Capturing groups: %d ", compiled_code_p->captures_count);
        -:  378:  JERRY_DEBUG_MSG ("Non-capturing groups: %d\n", compiled_code_p->non_captures_count);
        -:  379:
        -:  380:  const uint8_t *bytecode_start_p = (const uint8_t *) (compiled_code_p + 1);
        -:  381:  const uint8_t *bytecode_p = bytecode_start_p;
        -:  382:
        -:  383:  while (true)
        -:  384:  {
        -:  385:    JERRY_DEBUG_MSG ("[%3u] ", (uint32_t) ((uintptr_t) bytecode_p - (uintptr_t) bytecode_start_p));
        -:  386:    re_opcode_t op = *bytecode_p++;
        -:  387:    switch (op)
        -:  388:    {
        -:  389:      case RE_OP_ALTERNATIVE_START:
        -:  390:      {
        -:  391:        JERRY_DEBUG_MSG ("ALTERNATIVE_START ");
        -:  392:        const uint32_t offset = re_get_value (&bytecode_p) + re_get_bytecode_offset (bytecode_start_p, bytecode_p);
        -:  393:        JERRY_DEBUG_MSG ("tail offset: [%3u]\n", offset);
        -:  394:        break;
        -:  395:      }
        -:  396:      case RE_OP_ALTERNATIVE_NEXT:
        -:  397:      {
        -:  398:        JERRY_DEBUG_MSG ("ALTERNATIVE_NEXT ");
        -:  399:        const uint32_t offset = re_get_value (&bytecode_p) + re_get_bytecode_offset (bytecode_start_p, bytecode_p);
        -:  400:        JERRY_DEBUG_MSG ("tail offset: [%3u]\n", offset);
        -:  401:        break;
        -:  402:      }
        -:  403:      case RE_OP_NO_ALTERNATIVE:
        -:  404:      {
        -:  405:        JERRY_DEBUG_MSG ("NO_ALTERNATIVES\n");
        -:  406:        break;
        -:  407:      }
        -:  408:      case RE_OP_CAPTURING_GROUP_START:
        -:  409:      {
        -:  410:        JERRY_DEBUG_MSG ("CAPTURING_GROUP_START ");
        -:  411:        JERRY_DEBUG_MSG ("idx: %u, ", re_get_value (&bytecode_p));
        -:  412:        JERRY_DEBUG_MSG ("capture count: %u, ", re_get_value (&bytecode_p));
        -:  413:
        -:  414:        const uint32_t qmin = re_get_value (&bytecode_p);
        -:  415:        JERRY_DEBUG_MSG ("qmin: %u", qmin);
        -:  416:        if (qmin == 0)
        -:  417:        {
        -:  418:          const uint32_t offset = re_get_value (&bytecode_p) + re_get_bytecode_offset (bytecode_start_p, bytecode_p);
        -:  419:          JERRY_DEBUG_MSG (", tail offset: [%3u]\n", offset);
        -:  420:        }
        -:  421:        else
        -:  422:        {
        -:  423:          JERRY_DEBUG_MSG ("\n");
        -:  424:        }
        -:  425:
        -:  426:        break;
        -:  427:      }
        -:  428:      case RE_OP_NON_CAPTURING_GROUP_START:
        -:  429:      {
        -:  430:        JERRY_DEBUG_MSG ("NON_CAPTURING_GROUP_START ");
        -:  431:        JERRY_DEBUG_MSG ("idx: %u, ", re_get_value (&bytecode_p));
        -:  432:        JERRY_DEBUG_MSG ("capture start: %u, ", re_get_value (&bytecode_p));
        -:  433:        JERRY_DEBUG_MSG ("capture count: %u, ", re_get_value (&bytecode_p));
        -:  434:
        -:  435:        const uint32_t qmin = re_get_value (&bytecode_p);
        -:  436:        JERRY_DEBUG_MSG ("qmin: %u", qmin);
        -:  437:        if (qmin == 0)
        -:  438:        {
        -:  439:          const uint32_t offset = re_get_value (&bytecode_p) + re_get_bytecode_offset (bytecode_start_p, bytecode_p);
        -:  440:          JERRY_DEBUG_MSG (", tail offset: [%3u]\n", offset);
        -:  441:        }
        -:  442:        else
        -:  443:        {
        -:  444:          JERRY_DEBUG_MSG ("\n");
        -:  445:        }
        -:  446:
        -:  447:        break;
        -:  448:      }
        -:  449:      case RE_OP_GREEDY_CAPTURING_GROUP_END:
        -:  450:      {
        -:  451:        JERRY_DEBUG_MSG ("GREEDY_CAPTURING_GROUP_END ");
        -:  452:        JERRY_DEBUG_MSG ("idx: %u, ", re_get_value (&bytecode_p));
        -:  453:        JERRY_DEBUG_MSG ("qmin: %u, ", re_get_value (&bytecode_p));
        -:  454:        JERRY_DEBUG_MSG ("qmax: %u\n", re_get_value (&bytecode_p) - RE_QMAX_OFFSET);
        -:  455:        break;
        -:  456:      }
        -:  457:      case RE_OP_LAZY_CAPTURING_GROUP_END:
        -:  458:      {
        -:  459:        JERRY_DEBUG_MSG ("LAZY_CAPTURING_GROUP_END ");
        -:  460:        JERRY_DEBUG_MSG ("idx: %u, ", re_get_value (&bytecode_p));
        -:  461:        JERRY_DEBUG_MSG ("qmin: %u, ", re_get_value (&bytecode_p));
        -:  462:        JERRY_DEBUG_MSG ("qmax: %u\n", re_get_value (&bytecode_p) - RE_QMAX_OFFSET);
        -:  463:        break;
        -:  464:      }
        -:  465:      case RE_OP_GREEDY_NON_CAPTURING_GROUP_END:
        -:  466:      {
        -:  467:        JERRY_DEBUG_MSG ("GREEDY_NON_CAPTURING_GROUP_END ");
        -:  468:        JERRY_DEBUG_MSG ("idx: %u, ", re_get_value (&bytecode_p));
        -:  469:        JERRY_DEBUG_MSG ("qmin: %u, ", re_get_value (&bytecode_p));
        -:  470:        JERRY_DEBUG_MSG ("qmax: %u\n", re_get_value (&bytecode_p) - RE_QMAX_OFFSET);
        -:  471:        break;
        -:  472:      }
        -:  473:      case RE_OP_LAZY_NON_CAPTURING_GROUP_END:
        -:  474:      {
        -:  475:        JERRY_DEBUG_MSG ("LAZY_NON_CAPTURING_GROUP_END ");
        -:  476:        JERRY_DEBUG_MSG ("idx: %u, ", re_get_value (&bytecode_p));
        -:  477:        JERRY_DEBUG_MSG ("qmin: %u, ", re_get_value (&bytecode_p));
        -:  478:        JERRY_DEBUG_MSG ("qmax: %u\n", re_get_value (&bytecode_p) - RE_QMAX_OFFSET);
        -:  479:        break;
        -:  480:      }
        -:  481:      case RE_OP_GREEDY_ITERATOR:
        -:  482:      {
        -:  483:        JERRY_DEBUG_MSG ("GREEDY_ITERATOR ");
        -:  484:        JERRY_DEBUG_MSG ("qmin: %u, ", re_get_value (&bytecode_p));
        -:  485:        JERRY_DEBUG_MSG ("qmax: %u, ", re_get_value (&bytecode_p) - RE_QMAX_OFFSET);
        -:  486:        const uint32_t offset = re_get_value (&bytecode_p) + re_get_bytecode_offset (bytecode_start_p, bytecode_p);
        -:  487:        JERRY_DEBUG_MSG ("tail offset: [%3u]\n", offset);
        -:  488:        break;
        -:  489:      }
        -:  490:      case RE_OP_LAZY_ITERATOR:
        -:  491:      {
        -:  492:        JERRY_DEBUG_MSG ("LAZY_ITERATOR ");
        -:  493:        JERRY_DEBUG_MSG ("qmin: %u, ", re_get_value (&bytecode_p));
        -:  494:        JERRY_DEBUG_MSG ("qmax: %u, ", re_get_value (&bytecode_p) - RE_QMAX_OFFSET);
        -:  495:        const uint32_t offset = re_get_value (&bytecode_p) + re_get_bytecode_offset (bytecode_start_p, bytecode_p);
        -:  496:        JERRY_DEBUG_MSG ("tail offset: [%3u]\n", offset);
        -:  497:        break;
        -:  498:      }
        -:  499:      case RE_OP_ITERATOR_END:
        -:  500:      {
        -:  501:        JERRY_DEBUG_MSG ("ITERATOR_END\n");
        -:  502:        break;
        -:  503:      }
        -:  504:      case RE_OP_BACKREFERENCE:
        -:  505:      {
        -:  506:        JERRY_DEBUG_MSG ("BACKREFERENCE ");
        -:  507:        JERRY_DEBUG_MSG ("idx: %d\n", re_get_value (&bytecode_p));
        -:  508:        break;
        -:  509:      }
        -:  510:      case RE_OP_ASSERT_LINE_START:
        -:  511:      {
        -:  512:        JERRY_DEBUG_MSG ("ASSERT_LINE_START\n");
        -:  513:        break;
        -:  514:      }
        -:  515:      case RE_OP_ASSERT_LINE_END:
        -:  516:      {
        -:  517:        JERRY_DEBUG_MSG ("ASSERT_LINE_END\n");
        -:  518:        break;
        -:  519:      }
        -:  520:      case RE_OP_ASSERT_LOOKAHEAD_POS:
        -:  521:      {
        -:  522:        JERRY_DEBUG_MSG ("ASSERT_LOOKAHEAD_POS ");
        -:  523:        JERRY_DEBUG_MSG ("qmin: %u, ", *bytecode_p++);
        -:  524:        JERRY_DEBUG_MSG ("capture start: %u, ", re_get_value (&bytecode_p));
        -:  525:        JERRY_DEBUG_MSG ("capture count: %u, ", re_get_value (&bytecode_p));
        -:  526:        const uint32_t offset = re_get_value (&bytecode_p) + re_get_bytecode_offset (bytecode_start_p, bytecode_p);
        -:  527:        JERRY_DEBUG_MSG ("tail offset: [%3u]\n", offset);
        -:  528:        break;
        -:  529:      }
        -:  530:      case RE_OP_ASSERT_LOOKAHEAD_NEG:
        -:  531:      {
        -:  532:        JERRY_DEBUG_MSG ("ASSERT_LOOKAHEAD_NEG ");
        -:  533:        JERRY_DEBUG_MSG ("qmin: %u, ", *bytecode_p++);
        -:  534:        JERRY_DEBUG_MSG ("capture start: %u, ", re_get_value (&bytecode_p));
        -:  535:        JERRY_DEBUG_MSG ("capture count: %u, ", re_get_value (&bytecode_p));
        -:  536:        const uint32_t offset = re_get_value (&bytecode_p) + re_get_bytecode_offset (bytecode_start_p, bytecode_p);
        -:  537:        JERRY_DEBUG_MSG ("tail offset: [%3u]\n", offset);
        -:  538:        break;
        -:  539:      }
        -:  540:      case RE_OP_ASSERT_END:
        -:  541:      {
        -:  542:        JERRY_DEBUG_MSG ("ASSERT_END\n");
        -:  543:        break;
        -:  544:      }
        -:  545:      case RE_OP_ASSERT_WORD_BOUNDARY:
        -:  546:      {
        -:  547:        JERRY_DEBUG_MSG ("ASSERT_WORD_BOUNDARY\n");
        -:  548:        break;
        -:  549:      }
        -:  550:      case RE_OP_ASSERT_NOT_WORD_BOUNDARY:
        -:  551:      {
        -:  552:        JERRY_DEBUG_MSG ("ASSERT_NOT_WORD_BOUNDARY\n");
        -:  553:        break;
        -:  554:      }
        -:  555:      case RE_OP_CLASS_ESCAPE:
        -:  556:      {
        -:  557:        ecma_class_escape_t escape = (ecma_class_escape_t) *bytecode_p++;
        -:  558:        JERRY_DEBUG_MSG ("CLASS_ESCAPE \\%c\n", escape_chars[escape]);
        -:  559:        break;
        -:  560:      }
        -:  561:      case RE_OP_CHAR_CLASS:
        -:  562:      {
        -:  563:        JERRY_DEBUG_MSG ("CHAR_CLASS ");
        -:  564:        uint8_t flags = *bytecode_p++;
        -:  565:        uint32_t char_count = (flags & RE_CLASS_HAS_CHARS) ? re_get_value (&bytecode_p) : 0;
        -:  566:        uint32_t range_count = (flags & RE_CLASS_HAS_RANGES) ? re_get_value (&bytecode_p) : 0;
        -:  567:
        -:  568:        if (flags & RE_CLASS_INVERT)
        -:  569:        {
        -:  570:          JERRY_DEBUG_MSG ("inverted ");
        -:  571:        }
        -:  572:
        -:  573:        JERRY_DEBUG_MSG ("escapes: ");
        -:  574:        uint8_t escape_count = flags & RE_CLASS_ESCAPE_COUNT_MASK;
        -:  575:        while (escape_count--)
        -:  576:        {
        -:  577:          JERRY_DEBUG_MSG ("\\%c, ", escape_chars[*bytecode_p++]);
        -:  578:        }
        -:  579:
        -:  580:        JERRY_DEBUG_MSG ("chars: ");
        -:  581:        while (char_count--)
        -:  582:        {
        -:  583:          JERRY_DEBUG_MSG ("\\u%04x, ", re_get_char (&bytecode_p, re_ctx_p->flags & RE_FLAG_UNICODE));
        -:  584:        }
        -:  585:
        -:  586:        JERRY_DEBUG_MSG ("ranges: ");
        -:  587:        while (range_count--)
        -:  588:        {
        -:  589:          const lit_code_point_t begin = re_get_char (&bytecode_p, re_ctx_p->flags & RE_FLAG_UNICODE);
        -:  590:          const lit_code_point_t end = re_get_char (&bytecode_p, re_ctx_p->flags & RE_FLAG_UNICODE);
        -:  591:          JERRY_DEBUG_MSG ("\\u%04x-\\u%04x, ", begin, end);
        -:  592:        }
        -:  593:
        -:  594:        JERRY_DEBUG_MSG ("\n");
        -:  595:        break;
        -:  596:      }
        -:  597:#if JERRY_ESNEXT
        -:  598:      case RE_OP_UNICODE_PERIOD:
        -:  599:      {
        -:  600:        JERRY_DEBUG_MSG ("UNICODE_PERIOD\n");
        -:  601:        break;
        -:  602:      }
        -:  603:#endif /* JERRY_ESNEXT */
        -:  604:      case RE_OP_PERIOD:
        -:  605:      {
        -:  606:        JERRY_DEBUG_MSG ("PERIOD\n");
        -:  607:        break;
        -:  608:      }
        -:  609:      case RE_OP_CHAR:
        -:  610:      {
        -:  611:        JERRY_DEBUG_MSG ("CHAR \\u%04x\n", re_get_char (&bytecode_p, re_ctx_p->flags & RE_FLAG_UNICODE));
        -:  612:        break;
        -:  613:      }
        -:  614:      case RE_OP_BYTE:
        -:  615:      {
        -:  616:        const uint8_t ch = *bytecode_p++;
        -:  617:        JERRY_DEBUG_MSG ("BYTE \\u%04x '%c'\n", ch, (char) ch);
        -:  618:        break;
        -:  619:      }
        -:  620:      case RE_OP_EOF:
        -:  621:      {
        -:  622:        JERRY_DEBUG_MSG ("EOF\n");
        -:  623:        return;
        -:  624:      }
        -:  625:      default:
        -:  626:      {
        -:  627:        JERRY_DEBUG_MSG ("UNKNOWN(%d)\n", (uint32_t) op);
        -:  628:        break;
        -:  629:      }
        -:  630:    }
        -:  631:  }
        -:  632:} /* re_dump_bytecode */
        -:  633:#endif /* JERRY_REGEXP_DUMP_BYTE_CODE */
        -:  634:
        -:  635:/**
        -:  636: * @}
        -:  637: * @}
        -:  638: * @}
        -:  639: */
        -:  640:
        -:  641:#endif /* JERRY_BUILTIN_REGEXP */
