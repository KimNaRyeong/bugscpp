        -:    0:Source:/home/workspace/tests/unit-core/test-is-eval-code.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "config.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static jerry_value_t
    #####:   22:check_eval (const jerry_call_info_t *call_info_p, /**< call information */
        -:   23:            const jerry_value_t args_p[], /**< arguments list */
        -:   24:            const jerry_length_t args_cnt) /**< arguments length */
        -:   25:{
        -:   26:  JERRY_UNUSED (call_info_p);
        -:   27:
    #####:   28:  TEST_ASSERT (args_cnt == 2 && jerry_function_is_dynamic (args_p[0]) == jerry_value_is_true (args_p[1]));
    #####:   29:  return jerry_boolean (true);
        -:   30:} /* check_eval */
        -:   31:
        -:   32:static void
    #####:   33:test_parse (const char *source_p, /**< source code */
        -:   34:            jerry_parse_options_t *options_p) /**< options passed to jerry_parse */
        -:   35:{
    #####:   36:  jerry_value_t parse_result = jerry_parse ((const jerry_char_t *) source_p, strlen (source_p), options_p);
    #####:   37:  TEST_ASSERT (!jerry_value_is_exception (parse_result));
    #####:   38:  TEST_ASSERT (!jerry_function_is_dynamic (parse_result));
        -:   39:
        -:   40:  jerry_value_t result;
        -:   41:
    #####:   42:  if (options_p->options & JERRY_PARSE_HAS_ARGUMENT_LIST)
        -:   43:  {
    #####:   44:    jerry_value_t this_value = jerry_undefined ();
    #####:   45:    result = jerry_call (parse_result, this_value, NULL, 0);
    #####:   46:    jerry_value_free (this_value);
        -:   47:  }
    #####:   48:  else if (options_p->options & JERRY_PARSE_MODULE)
        -:   49:  {
    #####:   50:    result = jerry_module_link (parse_result, NULL, NULL);
    #####:   51:    TEST_ASSERT (!jerry_value_is_exception (result));
    #####:   52:    jerry_value_free (result);
    #####:   53:    result = jerry_module_evaluate (parse_result);
        -:   54:  }
        -:   55:  else
        -:   56:  {
    #####:   57:    result = jerry_run (parse_result);
        -:   58:  }
        -:   59:
    #####:   60:  TEST_ASSERT (!jerry_value_is_exception (result));
        -:   61:
    #####:   62:  jerry_value_free (parse_result);
    #####:   63:  jerry_value_free (result);
    #####:   64:} /* test_parse */
        -:   65:
        -:   66:int
    #####:   67:main (void)
        -:   68:{
    #####:   69:  TEST_INIT ();
        -:   70:
    #####:   71:  jerry_init (JERRY_INIT_EMPTY);
        -:   72:
    #####:   73:  jerry_value_t global_object_value = jerry_current_realm ();
        -:   74:
    #####:   75:  jerry_value_t function_value = jerry_function_external (check_eval);
    #####:   76:  jerry_value_t function_name_value = jerry_string_sz ("check_eval");
    #####:   77:  jerry_value_free (jerry_object_set (global_object_value, function_name_value, function_value));
        -:   78:
    #####:   79:  jerry_value_free (function_name_value);
    #####:   80:  jerry_value_free (function_value);
    #####:   81:  jerry_value_free (global_object_value);
        -:   82:
        -:   83:  jerry_parse_options_t parse_options;
    #####:   84:  const char *source_p = TEST_STRING_LITERAL ("eval('check_eval(function() {}, true)')\n"
        -:   85:                                              "check_eval(function() {}, false)");
        -:   86:
    #####:   87:  parse_options.options = JERRY_PARSE_NO_OPTS;
    #####:   88:  test_parse (source_p, &parse_options);
        -:   89:
    #####:   90:  if (jerry_feature_enabled (JERRY_FEATURE_MODULE))
        -:   91:  {
    #####:   92:    parse_options.options = JERRY_PARSE_MODULE;
    #####:   93:    test_parse (source_p, &parse_options);
        -:   94:  }
        -:   95:
    #####:   96:  parse_options.options = JERRY_PARSE_HAS_ARGUMENT_LIST;
    #####:   97:  parse_options.argument_list = jerry_string_sz ("");
    #####:   98:  test_parse (source_p, &parse_options);
    #####:   99:  jerry_value_free (parse_options.argument_list);
        -:  100:
    #####:  101:  parse_options.options = JERRY_PARSE_NO_OPTS;
    #####:  102:  source_p = TEST_STRING_LITERAL ("check_eval(new Function('a', 'return a'), true)");
    #####:  103:  test_parse (source_p, &parse_options);
        -:  104:
    #####:  105:  source_p = TEST_STRING_LITERAL ("check_eval(function() {}, true)");
    #####:  106:  jerry_value_free (jerry_eval ((const jerry_char_t *) source_p, strlen (source_p), JERRY_PARSE_NO_OPTS));
        -:  107:
    #####:  108:  jerry_cleanup ();
        -:  109:  return 0;
        -:  110:} /* main */
