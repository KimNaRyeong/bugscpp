        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-shared-arraybuffer-object.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-shared-arraybuffer-object.h"
        -:   17:
        -:   18:#include "ecma-arraybuffer-object.h"
        -:   19:#include "ecma-builtins.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-function-object.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-objects.h"
        -:   26:#include "ecma-typedarray-object.h"
        -:   27:
        -:   28:#include "jcontext.h"
        -:   29:
        -:   30:/** \addtogroup ecma ECMA
        -:   31: * @{
        -:   32: *
        -:   33: * \addtogroup ecmasharedarraybufferobject ECMA SharedArrayBuffer object related routines
        -:   34: * @{
        -:   35: */
        -:   36:
        -:   37:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
        -:   38:
        -:   39:/**
        -:   40: * Creating SharedArrayBuffer objects based on the array length
        -:   41: *
        -:   42: * @return new SharedArrayBuffer object
        -:   43: */
        -:   44:ecma_object_t *
        1:   45:ecma_shared_arraybuffer_new_object (uint32_t length) /**< length of the SharedArrayBuffer */
        -:   46:{
        1:   47:  if (length > 0)
        -:   48:  {
        1:   49:    return ecma_arraybuffer_create_object_with_buffer (ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER, length);
        -:   50:  }
        -:   51:
    #####:   52:  return ecma_arraybuffer_create_object (ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER, length);
        -:   53:} /* ecma_shared_arraybuffer_new_object */
        -:   54:
        -:   55:/**
        -:   56: * SharedArrayBuffer object creation operation.
        -:   57: *
        -:   58: * See also: ES11 24.1.1.1
        -:   59: *
        -:   60: * @return ecma value
        -:   61: *         Returned value must be freed with ecma_free_value
        -:   62: */
        -:   63:ecma_value_t
        1:   64:ecma_op_create_shared_arraybuffer_object (const ecma_value_t *arguments_list_p, /**< list of arguments that
        -:   65:                                                                                 *   are passed to String constructor */
        -:   66:                                          uint32_t arguments_list_len) /**< length of the arguments' list */
        -:   67:{
        1:   68:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   69:
        1:   70:  ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (JERRY_CONTEXT (current_new_target_p),
        -:   71:                                                                   ECMA_BUILTIN_ID_SHARED_ARRAYBUFFER_PROTOTYPE);
        -:   72:
        1:   73:  if (proto_p == NULL)
        -:   74:  {
    #####:   75:    return ECMA_VALUE_ERROR;
        -:   76:  }
        -:   77:
        1:   78:  ecma_number_t length_num = 0;
        -:   79:
        1:   80:  if (arguments_list_len > 0)
        -:   81:  {
        1:   82:    if (ecma_is_value_number (arguments_list_p[0]))
        -:   83:    {
        1:   84:      length_num = ecma_get_number_from_value (arguments_list_p[0]);
        -:   85:    }
        -:   86:    else
        -:   87:    {
    #####:   88:      ecma_value_t to_number_value = ecma_op_to_number (arguments_list_p[0], &length_num);
        -:   89:
    #####:   90:      if (ECMA_IS_VALUE_ERROR (to_number_value))
        -:   91:      {
    #####:   92:        ecma_deref_object (proto_p);
    #####:   93:        return to_number_value;
        -:   94:      }
        -:   95:    }
        -:   96:
        1:   97:    if (ecma_number_is_nan (length_num))
        -:   98:    {
    #####:   99:      length_num = 0;
        -:  100:    }
        -:  101:
        1:  102:    const uint32_t maximum_size_in_byte = UINT32_MAX - sizeof (ecma_extended_object_t) - JMEM_ALIGNMENT + 1;
        -:  103:
        1:  104:    if (length_num <= -1.0 || length_num > (ecma_number_t) maximum_size_in_byte + 0.5)
        -:  105:    {
    #####:  106:      ecma_deref_object (proto_p);
    #####:  107:      return ecma_raise_range_error (ECMA_ERR_INVALID_SHARED_ARRAYBUFFER_LENGTH);
        -:  108:    }
        -:  109:  }
        -:  110:
        1:  111:  uint32_t length_uint32 = ecma_number_to_uint32 (length_num);
        1:  112:  ecma_object_t *shared_array_buffer = ecma_shared_arraybuffer_new_object (length_uint32);
        1:  113:  ECMA_SET_NON_NULL_POINTER (shared_array_buffer->u2.prototype_cp, proto_p);
        1:  114:  ecma_deref_object (proto_p);
        -:  115:
        1:  116:  return ecma_make_object_value (shared_array_buffer);
        -:  117:} /* ecma_op_create_shared_arraybuffer_object */
        -:  118:
        -:  119:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  120:
        -:  121:/**
        -:  122: * Helper function: check if the target is SharedArrayBuffer
        -:  123: *
        -:  124: * See also: ES11 24.1.1.4
        -:  125: *
        -:  126: * @return true - if value is a SharedArrayBuffer object
        -:  127: *         false - otherwise
        -:  128: */
        -:  129:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:  130:ecma_is_shared_arraybuffer (ecma_value_t target) /**< the target value */
        -:  131:{
        -:  132:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
    #####:  133:  return (ecma_is_value_object (target)
    #####:  134:          && ecma_object_class_is (ecma_get_object_from_value (target), ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER));
        -:  135:#else /* !JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  136:  JERRY_UNUSED (target);
    #####:  137:  return false;
        -:  138:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  139:} /* ecma_is_shared_arraybuffer */
        -:  140:
        -:  141:/**
        -:  142: * Helper function: check if the target is SharedArrayBuffer Object
        -:  143: *
        -:  144: * @return true - if value is a SharedArrayBuffer object
        -:  145: *         false - otherwise
        -:  146: */
        -:  147:extern inline bool JERRY_ATTR_ALWAYS_INLINE
        4:  148:ecma_object_is_shared_arraybuffer (ecma_object_t *object_p) /**< the target object */
        -:  149:{
        -:  150:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
        4:  151:  return ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER);
        -:  152:#else /* !JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  153:  JERRY_UNUSED (object_p);
    #####:  154:  return false;
        -:  155:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  156:} /* ecma_object_is_shared_arraybuffer */
        -:  157:
        -:  158:/**
        -:  159: * @}
        -:  160: * @}
        -:  161: */
