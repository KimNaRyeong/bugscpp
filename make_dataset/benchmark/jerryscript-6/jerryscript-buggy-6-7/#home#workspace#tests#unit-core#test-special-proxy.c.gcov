        -:    0:Source:/home/workspace/tests/unit-core/test-special-proxy.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:static jerry_value_t
    #####:   21:create_special_proxy_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   22:                              const jerry_value_t args_p[], /**< argument list */
        -:   23:                              const jerry_length_t args_count) /**< argument count */
        -:   24:{
        -:   25:  JERRY_UNUSED (call_info_p);
        -:   26:
    #####:   27:  if (args_count < 2)
        -:   28:  {
    #####:   29:    return jerry_undefined ();
        -:   30:  }
        -:   31:
    #####:   32:  return jerry_proxy_custom (args_p[0], args_p[1], JERRY_PROXY_SKIP_RESULT_VALIDATION);
        -:   33:} /* create_special_proxy_handler */
        -:   34:
        -:   35:static void
    #####:   36:run_eval (const char *source_p)
        -:   37:{
    #####:   38:  jerry_value_t result = jerry_eval ((const jerry_char_t *) source_p, strlen (source_p), 0);
        -:   39:
    #####:   40:  TEST_ASSERT (!jerry_value_is_exception (result));
    #####:   41:  jerry_value_free (result);
    #####:   42:} /* run_eval */
        -:   43:
        -:   44:/**
        -:   45: * Unit test's main function.
        -:   46: */
        -:   47:int
    #####:   48:main (void)
        -:   49:{
    #####:   50:  TEST_INIT ();
        -:   51:
    #####:   52:  if (!jerry_feature_enabled (JERRY_FEATURE_PROXY))
        -:   53:  {
    #####:   54:    printf ("Skipping test, Proxy not enabled\n");
    #####:   55:    return 0;
        -:   56:  }
        -:   57:
    #####:   58:  jerry_init (JERRY_INIT_EMPTY);
        -:   59:
    #####:   60:  jerry_value_t global = jerry_current_realm ();
        -:   61:
    #####:   62:  jerry_value_t function = jerry_function_external (create_special_proxy_handler);
    #####:   63:  jerry_value_t name = jerry_string_sz ("create_special_proxy");
    #####:   64:  jerry_value_t result = jerry_object_set (global, name, function);
    #####:   65:  TEST_ASSERT (!jerry_value_is_exception (result));
        -:   66:
    #####:   67:  jerry_value_free (result);
    #####:   68:  jerry_value_free (name);
    #####:   69:  jerry_value_free (function);
        -:   70:
    #####:   71:  jerry_value_free (global);
        -:   72:
    #####:   73:  run_eval ("function assert (v) {\n"
        -:   74:            "  if (v !== true)\n"
        -:   75:            "     throw 'Assertion failed!'\n"
        -:   76:            "}");
        -:   77:
        -:   78:  /* These tests fail unless JERRY_PROXY_SKIP_RESULT_VALIDATION is set. */
        -:   79:
    #####:   80:  run_eval ("var o = {}\n"
        -:   81:            "Object.preventExtensions(o)\n"
        -:   82:            "var proxy = create_special_proxy(o, {\n"
        -:   83:            "  getPrototypeOf(target) { return Array.prototype }\n"
        -:   84:            "})\n"
        -:   85:            "assert(Object.getPrototypeOf(proxy) === Array.prototype)");
        -:   86:
    #####:   87:  run_eval ("var o = {}\n"
        -:   88:            "Object.preventExtensions(o)\n"
        -:   89:            "var proxy = create_special_proxy(o, {\n"
        -:   90:            "  setPrototypeOf(target, proto) { return true }\n"
        -:   91:            "})\n"
        -:   92:            "Object.setPrototypeOf(proxy, Array.prototype)");
        -:   93:
    #####:   94:  run_eval ("var o = {}\n"
        -:   95:            "var proxy = create_special_proxy(o, {\n"
        -:   96:            "  isExtensible(target) { return false }\n"
        -:   97:            "})\n"
        -:   98:            "assert(Object.isExtensible(proxy) === false)");
        -:   99:
    #####:  100:  run_eval ("var o = {}\n"
        -:  101:            "var proxy = create_special_proxy(o, {\n"
        -:  102:            "  preventExtensions(target) { return true }\n"
        -:  103:            "})\n"
        -:  104:            "Object.preventExtensions(proxy)");
        -:  105:
    #####:  106:  run_eval ("var o = {}\n"
        -:  107:            "Object.defineProperty(o, 'prop', { value:4, enumerable:true })\n"
        -:  108:            "var proxy = create_special_proxy(o, {\n"
        -:  109:            "  getOwnPropertyDescriptor(target, key) {\n"
        -:  110:            "    return { value:5, configurable:true, writable:true }\n"
        -:  111:            "  }\n"
        -:  112:            "})\n"
        -:  113:            "var desc = Object.getOwnPropertyDescriptor(proxy, 'prop')\n"
        -:  114:            "assert(desc.value === 5)\n"
        -:  115:            "assert(desc.configurable === true)\n"
        -:  116:            "assert(desc.enumerable === false)\n"
        -:  117:            "assert(desc.writable === true)\n");
        -:  118:
    #####:  119:  run_eval ("var o = {}\n"
        -:  120:            "Object.defineProperty(o, 'prop', { get() {} })\n"
        -:  121:            "var proxy = create_special_proxy(o, {\n"
        -:  122:            "  defineProperty(target, key, descriptor) { return true }\n"
        -:  123:            "})\n"
        -:  124:            "Object.defineProperty(proxy, 'prop', { value:5 })");
        -:  125:
    #####:  126:  run_eval ("var o = {}\n"
        -:  127:            "Object.defineProperty(o, 'prop', { value:4 })\n"
        -:  128:            "var proxy = create_special_proxy(o, {\n"
        -:  129:            "  has(target, key) { return false }\n"
        -:  130:            "})\n"
        -:  131:            "assert(!Reflect.has(proxy, 'prop'))");
        -:  132:
    #####:  133:  run_eval ("var o = {}\n"
        -:  134:            "Object.defineProperty(o, 'prop', { value:4 })\n"
        -:  135:            "var proxy = create_special_proxy(o, {\n"
        -:  136:            "  get(target, key) { return 5 }\n"
        -:  137:            "})\n"
        -:  138:            "assert(proxy.prop === 5)");
        -:  139:
    #####:  140:  run_eval ("var o = {}\n"
        -:  141:            "Object.defineProperty(o, 'prop', { value:4 })\n"
        -:  142:            "var proxy = create_special_proxy(o, {\n"
        -:  143:            "  set(target, key, value) { return true }\n"
        -:  144:            "})\n"
        -:  145:            "proxy.prop = 8");
        -:  146:
    #####:  147:  run_eval ("var o = {}\n"
        -:  148:            "Object.defineProperty(o, 'prop', { value:4 })\n"
        -:  149:            "var proxy = create_special_proxy(o, {\n"
        -:  150:            "  deleteProperty(target, key) { return true }\n"
        -:  151:            "})\n"
        -:  152:            "assert(delete proxy.prop)");
        -:  153:
    #####:  154:  run_eval ("var o = {}\n"
        -:  155:            "Object.defineProperty(o, 'prop', { value:4 })\n"
        -:  156:            "var proxy = create_special_proxy(o, {\n"
        -:  157:            "  ownKeys(target) { return [] }\n"
        -:  158:            "})\n"
        -:  159:            "Object.keys(proxy)");
        -:  160:
    #####:  161:  jerry_cleanup ();
    #####:  162:  return 0;
        -:  163:} /* main */
