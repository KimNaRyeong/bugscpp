        -:    0:Source:/home/workspace/tests/unit-core/test-api-promise.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-port-default.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:static void
    #####:   23:test_promise_resolve_success (void)
        -:   24:{
    #####:   25:  jerry_value_t my_promise = jerry_promise ();
        -:   26:
        -:   27:  // A created promise has an undefined promise result by default and a pending state
        -:   28:  {
    #####:   29:    jerry_value_t promise_result = jerry_promise_result (my_promise);
    #####:   30:    TEST_ASSERT (jerry_value_is_undefined (promise_result));
        -:   31:
    #####:   32:    jerry_promise_state_t promise_state = jerry_promise_state (my_promise);
    #####:   33:    TEST_ASSERT (promise_state == JERRY_PROMISE_STATE_PENDING);
        -:   34:
    #####:   35:    jerry_value_free (promise_result);
        -:   36:  }
        -:   37:
    #####:   38:  jerry_value_t resolve_value = jerry_object ();
        -:   39:  {
    #####:   40:    jerry_value_t obj_key = jerry_string_sz ("key_one");
    #####:   41:    jerry_value_t set_result = jerry_object_set (resolve_value, obj_key, jerry_number (3));
    #####:   42:    TEST_ASSERT (jerry_value_is_boolean (set_result) && (jerry_value_is_true (set_result)));
    #####:   43:    jerry_value_free (set_result);
    #####:   44:    jerry_value_free (obj_key);
        -:   45:  }
        -:   46:
        -:   47:  // A resolved promise should have the result of from the resolve call and a fulfilled state
        -:   48:  {
    #####:   49:    jerry_value_t resolve_result = jerry_promise_resolve (my_promise, resolve_value);
        -:   50:
        -:   51:    // Release "old" value of resolve.
    #####:   52:    jerry_value_free (resolve_value);
        -:   53:
    #####:   54:    jerry_value_t promise_result = jerry_promise_result (my_promise);
        -:   55:    {
    #####:   56:      TEST_ASSERT (jerry_value_is_object (promise_result));
    #####:   57:      jerry_value_t obj_key = jerry_string_sz ("key_one");
    #####:   58:      jerry_value_t get_result = jerry_object_get (promise_result, obj_key);
    #####:   59:      TEST_ASSERT (jerry_value_is_number (get_result));
    #####:   60:      TEST_ASSERT (jerry_value_as_number (get_result) == 3.0);
        -:   61:
    #####:   62:      jerry_value_free (get_result);
    #####:   63:      jerry_value_free (obj_key);
        -:   64:    }
        -:   65:
    #####:   66:    jerry_promise_state_t promise_state = jerry_promise_state (my_promise);
    #####:   67:    TEST_ASSERT (promise_state == JERRY_PROMISE_STATE_FULFILLED);
        -:   68:
    #####:   69:    jerry_value_free (promise_result);
        -:   70:
    #####:   71:    jerry_value_free (resolve_result);
        -:   72:  }
        -:   73:
        -:   74:  // Resolvind a promise again does not change the result/state
        -:   75:  {
    #####:   76:    jerry_value_t resolve_result = jerry_promise_reject (my_promise, jerry_number (50));
        -:   77:
    #####:   78:    jerry_value_t promise_result = jerry_promise_result (my_promise);
        -:   79:    {
    #####:   80:      TEST_ASSERT (jerry_value_is_object (promise_result));
    #####:   81:      jerry_value_t obj_key = jerry_string_sz ("key_one");
    #####:   82:      jerry_value_t get_result = jerry_object_get (promise_result, obj_key);
    #####:   83:      TEST_ASSERT (jerry_value_is_number (get_result));
    #####:   84:      TEST_ASSERT (jerry_value_as_number (get_result) == 3.0);
        -:   85:
    #####:   86:      jerry_value_free (get_result);
    #####:   87:      jerry_value_free (obj_key);
        -:   88:    }
        -:   89:
    #####:   90:    jerry_promise_state_t promise_state = jerry_promise_state (my_promise);
    #####:   91:    TEST_ASSERT (promise_state == JERRY_PROMISE_STATE_FULFILLED);
        -:   92:
    #####:   93:    jerry_value_free (promise_result);
        -:   94:
    #####:   95:    jerry_value_free (resolve_result);
        -:   96:  }
        -:   97:
    #####:   98:  jerry_value_free (my_promise);
    #####:   99:} /* test_promise_resolve_success */
        -:  100:
        -:  101:static void
    #####:  102:test_promise_resolve_fail (void)
        -:  103:{
    #####:  104:  jerry_value_t my_promise = jerry_promise ();
        -:  105:
        -:  106:  // A created promise has an undefined promise result by default and a pending state
        -:  107:  {
    #####:  108:    jerry_value_t promise_result = jerry_promise_result (my_promise);
    #####:  109:    TEST_ASSERT (jerry_value_is_undefined (promise_result));
        -:  110:
    #####:  111:    jerry_promise_state_t promise_state = jerry_promise_state (my_promise);
    #####:  112:    TEST_ASSERT (promise_state == JERRY_PROMISE_STATE_PENDING);
        -:  113:
    #####:  114:    jerry_value_free (promise_result);
        -:  115:  }
        -:  116:
        -:  117:  // A resolved promise should have the result of from the resolve call and a fulfilled state
        -:  118:  {
    #####:  119:    jerry_value_t error_obj = jerry_error_sz (JERRY_ERROR_TYPE, "resolve_fail");
    #####:  120:    jerry_value_t resolve_result = jerry_promise_reject (my_promise, error_obj);
    #####:  121:    jerry_value_free (error_obj);
        -:  122:
    #####:  123:    jerry_value_t promise_result = jerry_promise_result (my_promise);
        -:  124:    // The error is not throw that's why it is only an error object.
    #####:  125:    TEST_ASSERT (jerry_value_is_object (promise_result));
    #####:  126:    TEST_ASSERT (jerry_error_type (promise_result) == JERRY_ERROR_TYPE);
        -:  127:
    #####:  128:    jerry_promise_state_t promise_state = jerry_promise_state (my_promise);
    #####:  129:    TEST_ASSERT (promise_state == JERRY_PROMISE_STATE_REJECTED);
        -:  130:
    #####:  131:    jerry_value_free (promise_result);
        -:  132:
    #####:  133:    jerry_value_free (resolve_result);
        -:  134:  }
        -:  135:
        -:  136:  // Resolvind a promise again does not change the result/state
        -:  137:  {
    #####:  138:    jerry_value_t resolve_result = jerry_promise_resolve (my_promise, jerry_number (50));
        -:  139:
    #####:  140:    jerry_value_t promise_result = jerry_promise_result (my_promise);
    #####:  141:    TEST_ASSERT (jerry_value_is_object (promise_result));
    #####:  142:    TEST_ASSERT (jerry_error_type (promise_result) == JERRY_ERROR_TYPE);
        -:  143:
    #####:  144:    jerry_promise_state_t promise_state = jerry_promise_state (my_promise);
    #####:  145:    TEST_ASSERT (promise_state == JERRY_PROMISE_STATE_REJECTED);
        -:  146:
    #####:  147:    jerry_value_free (promise_result);
        -:  148:
    #####:  149:    jerry_value_free (resolve_result);
        -:  150:  }
        -:  151:
    #####:  152:  jerry_value_free (my_promise);
    #####:  153:} /* test_promise_resolve_fail */
        -:  154:
        -:  155:static void
    #####:  156:test_promise_from_js (void)
        -:  157:{
    #####:  158:  const jerry_char_t test_source[] = "(new Promise(function(rs, rj) { rs(30); })).then(function(v) { return v + 1; })";
        -:  159:
    #####:  160:  jerry_value_t parsed_code_val = jerry_parse (test_source, sizeof (test_source) - 1, NULL);
    #####:  161:  TEST_ASSERT (!jerry_value_is_exception (parsed_code_val));
        -:  162:
    #####:  163:  jerry_value_t res = jerry_run (parsed_code_val);
    #####:  164:  TEST_ASSERT (jerry_value_is_promise (res));
        -:  165:
    #####:  166:  TEST_ASSERT (jerry_promise_state (res) == JERRY_PROMISE_STATE_PENDING);
        -:  167:
    #####:  168:  jerry_value_t run_result = jerry_run_jobs ();
    #####:  169:  TEST_ASSERT (jerry_value_is_undefined (run_result));
    #####:  170:  jerry_value_free (run_result);
        -:  171:
    #####:  172:  TEST_ASSERT (jerry_promise_state (res) == JERRY_PROMISE_STATE_FULFILLED);
    #####:  173:  jerry_value_t promise_result = jerry_promise_result (res);
    #####:  174:  TEST_ASSERT (jerry_value_is_number (promise_result));
    #####:  175:  TEST_ASSERT (jerry_value_as_number (promise_result) == 31.0);
        -:  176:
    #####:  177:  jerry_value_free (promise_result);
    #####:  178:  jerry_value_free (res);
    #####:  179:  jerry_value_free (parsed_code_val);
    #####:  180:} /* test_promise_from_js */
        -:  181:
        -:  182:int
    #####:  183:main (void)
        -:  184:{
    #####:  185:  if (!jerry_feature_enabled (JERRY_FEATURE_PROMISE))
        -:  186:  {
    #####:  187:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Promise is disabled!\n");
    #####:  188:    return 0;
        -:  189:  }
        -:  190:
    #####:  191:  jerry_init (JERRY_INIT_EMPTY);
        -:  192:
    #####:  193:  test_promise_resolve_fail ();
    #####:  194:  test_promise_resolve_success ();
        -:  195:
    #####:  196:  test_promise_from_js ();
        -:  197:
    #####:  198:  jerry_cleanup ();
        -:  199:
    #####:  200:  return 0;
        -:  201:} /* main */
