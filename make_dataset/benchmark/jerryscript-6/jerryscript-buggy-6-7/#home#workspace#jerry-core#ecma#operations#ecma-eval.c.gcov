        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-eval.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-eval.h"
        -:   17:
        -:   18:#include "ecma-builtins.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-lex-env.h"
        -:   24:
        -:   25:#include "jcontext.h"
        -:   26:#include "js-parser.h"
        -:   27:#include "vm.h"
        -:   28:
        -:   29:/** \addtogroup ecma ECMA
        -:   30: * @{
        -:   31: *
        -:   32: * \addtogroup eval eval
        -:   33: * @{
        -:   34: */
        -:   35:
        -:   36:/**
        -:   37: * Perform 'eval' with code stored in ecma-string
        -:   38: *
        -:   39: * See also:
        -:   40: *          ecma_op_eval_chars_buffer
        -:   41: *          ECMA-262 v5, 15.1.2.1 (steps 2 to 8)
        -:   42: *
        -:   43: * @return ecma value
        -:   44: */
        -:   45:ecma_value_t
    #####:   46:ecma_op_eval (ecma_value_t source_code, /**< source code */
        -:   47:              uint32_t parse_opts) /**< ecma_parse_opts_t option bits */
        -:   48:{
    #####:   49:  JERRY_ASSERT (ecma_is_value_string (source_code));
        -:   50:
    #####:   51:  if (ecma_is_value_magic_string (source_code, LIT_MAGIC_STRING__EMPTY))
        -:   52:  {
    #####:   53:    return ECMA_VALUE_UNDEFINED;
        -:   54:  }
        -:   55:
    #####:   56:  return ecma_op_eval_chars_buffer ((void *) &source_code, parse_opts | ECMA_PARSE_HAS_SOURCE_VALUE);
        -:   57:} /* ecma_op_eval */
        -:   58:
        -:   59:/**
        -:   60: * Perform 'eval' with code stored in continuous character buffer
        -:   61: *
        -:   62: * See also:
        -:   63: *          ecma_op_eval
        -:   64: *          ECMA-262 v5, 15.1.2.1 (steps 2 to 8)
        -:   65: *
        -:   66: * @return ecma value
        -:   67: */
        -:   68:ecma_value_t
    #####:   69:ecma_op_eval_chars_buffer (void *source_p, /**< source code */
        -:   70:                           uint32_t parse_opts) /**< ecma_parse_opts_t option bits */
        -:   71:{
        -:   72:#if JERRY_PARSER
    #####:   73:  JERRY_ASSERT (source_p != NULL);
        -:   74:
    #####:   75:  uint32_t is_strict_call = ECMA_PARSE_STRICT_MODE | ECMA_PARSE_DIRECT_EVAL;
        -:   76:
    #####:   77:  if ((parse_opts & is_strict_call) != is_strict_call)
        -:   78:  {
    #####:   79:    parse_opts &= (uint32_t) ~ECMA_PARSE_STRICT_MODE;
        -:   80:  }
        -:   81:
    #####:   82:  parse_opts |= ECMA_PARSE_EVAL;
        -:   83:
        -:   84:#if JERRY_ESNEXT
    #####:   85:  ECMA_CLEAR_LOCAL_PARSE_OPTS ();
        -:   86:#endif /* JERRY_ESNEXT */
        -:   87:
    #####:   88:  ecma_compiled_code_t *bytecode_p = parser_parse_script (source_p, parse_opts, NULL);
        -:   89:
    #####:   90:  if (JERRY_UNLIKELY (bytecode_p == NULL))
        -:   91:  {
    #####:   92:    return ECMA_VALUE_ERROR;
        -:   93:  }
        -:   94:
    #####:   95:  return vm_run_eval (bytecode_p, parse_opts);
        -:   96:#else /* !JERRY_PARSER */
        -:   97:  JERRY_UNUSED (code_p);
        -:   98:  JERRY_UNUSED (code_buffer_size);
        -:   99:  JERRY_UNUSED (parse_opts);
        -:  100:
        -:  101:  return ecma_raise_syntax_error (ECMA_ERR_PARSER_NOT_SUPPORTED);
        -:  102:#endif /* JERRY_PARSER */
        -:  103:} /* ecma_op_eval_chars_buffer */
        -:  104:
        -:  105:/**
        -:  106: * @}
        -:  107: * @}
        -:  108: */
