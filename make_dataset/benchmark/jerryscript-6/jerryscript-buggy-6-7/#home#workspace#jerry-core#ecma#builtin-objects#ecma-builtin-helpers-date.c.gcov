        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-helpers-date.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <math.h>
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-builtin-helpers.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-objects.h"
        -:   24:
        -:   25:#include "lit-char-helpers.h"
        -:   26:
        -:   27:#if JERRY_BUILTIN_DATE
        -:   28:
        -:   29:/** \addtogroup ecma ECMA
        -:   30: * @{
        -:   31: *
        -:   32: * \addtogroup ecmabuiltinhelpers ECMA builtin helper operations
        -:   33: * @{
        -:   34: */
        -:   35:
        -:   36:/**
        -:   37: * Day names
        -:   38: */
        -:   39:const char day_names_p[7][3] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
        -:   40:
        -:   41:/**
        -:   42: * Month names
        -:   43: */
        -:   44:const char month_names_p[12][3] = {
        -:   45:  "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
        -:   46:};
        -:   47:
        -:   48:/**
        -:   49: * Calculate the elapsed days since Unix Epoch
        -:   50: *
        -:   51: * @return elapsed days since Unix Epoch
        -:   52: */
        -:   53:extern inline int32_t JERRY_ATTR_ALWAYS_INLINE
    #####:   54:ecma_date_day_from_time (ecma_number_t time) /**< time value */
        -:   55:{
    #####:   56:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:   57:
    #####:   58:  if (time < 0)
        -:   59:  {
    #####:   60:    time -= ECMA_DATE_MS_PER_DAY - 1;
        -:   61:  }
        -:   62:
    #####:   63:  return (int32_t) (time / ECMA_DATE_MS_PER_DAY);
        -:   64:} /* ecma_date_day_from_time */
        -:   65:
        -:   66:/**
        -:   67: * Abstract operation: DayFromYear
        -:   68: *
        -:   69: *  See also:
        -:   70: *          ECMA-262 v11, 20.4.1.3
        -:   71: *
        -:   72: * @return first of day in the given year
        -:   73: */
        -:   74:static int32_t
    #####:   75:ecma_date_day_from_year (int32_t year) /**< year value */
        -:   76:{
    #####:   77:  if (JERRY_LIKELY (year >= 1970))
        -:   78:  {
    #####:   79:    return (int32_t) (365 * (year - 1970) + ((year - 1969) / 4) - ((year - 1901) / 100) + ((year - 1601) / 400));
        -:   80:  }
        -:   81:
    #####:   82:  return (int32_t) (365 * (year - 1970) + floor ((year - 1969) / 4.0) - floor ((year - 1901) / 100.0)
    #####:   83:                    + floor ((year - 1601) / 400.0));
        -:   84:} /* ecma_date_day_from_year */
        -:   85:
        -:   86:/**
        -:   87: * Abstract operation: DaysInYear
        -:   88: *
        -:   89: *  See also:
        -:   90: *          ECMA-262 v11, 20.4.1.3
        -:   91: *
        -:   92: * @return number of days in the given year
        -:   93: */
        -:   94:static int
    #####:   95:ecma_date_days_in_year (int32_t year) /**< year */
        -:   96:{
    #####:   97:  if (year % 4 != 0 || (year % 100 == 0 && (year % 400 != 0)))
        -:   98:  {
    #####:   99:    return ECMA_DATE_DAYS_IN_YEAR;
        -:  100:  }
        -:  101:
    #####:  102:  return ECMA_DATE_DAYS_IN_LEAP_YEAR;
        -:  103:} /* ecma_date_days_in_year */
        -:  104:
        -:  105:/**
        -:  106: * Abstract operation: InLeapYear
        -:  107: *
        -:  108: *  See also:
        -:  109: *          ECMA-262 v11, 20.4.1.3
        -:  110: *
        -:  111: * @return 1 - if the year is leap
        -:  112: *         0 - otherwise
        -:  113: */
        -:  114:static int32_t
    #####:  115:ecma_date_in_leap_year (int32_t year) /**< time value */
        -:  116:{
    #####:  117:  return ecma_date_days_in_year (year) - ECMA_DATE_DAYS_IN_YEAR;
        -:  118:} /* ecma_date_in_leap_year */
        -:  119:
        -:  120:/**
        -:  121: * First days of months in normal and leap years
        -:  122: */
        -:  123:static const uint16_t first_day_in_month[2][12] = { {
        -:  124:                                                      0,
        -:  125:                                                      31,
        -:  126:                                                      59,
        -:  127:                                                      90,
        -:  128:                                                      120,
        -:  129:                                                      151,
        -:  130:                                                      181,
        -:  131:                                                      212,
        -:  132:                                                      243,
        -:  133:                                                      273,
        -:  134:                                                      304,
        -:  135:                                                      334, /* normal year */
        -:  136:                                                    },
        -:  137:                                                    {
        -:  138:                                                      0,
        -:  139:                                                      31,
        -:  140:                                                      60,
        -:  141:                                                      91,
        -:  142:                                                      121,
        -:  143:                                                      152,
        -:  144:                                                      182,
        -:  145:                                                      213,
        -:  146:                                                      244,
        -:  147:                                                      274,
        -:  148:                                                      305,
        -:  149:                                                      335 /* leap year */
        -:  150:                                                    } };
        -:  151:
        -:  152:/**
        -:  153: * Abstract operation: YearFromTime
        -:  154: *
        -:  155: *  See also:
        -:  156: *          ECMA-262 v11, 20.4.1.3
        -:  157: *
        -:  158: * @return year corresponds to the given time
        -:  159: */
        -:  160:int32_t
    #####:  161:ecma_date_year_from_time (ecma_number_t time) /**< time value */
        -:  162:{
    #####:  163:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  164:
    #####:  165:  int32_t approx = (int32_t) (floor (time / ECMA_DATE_MS_PER_DAY / 365.2425) + 1970);
    #####:  166:  int64_t year_ms = ecma_date_day_from_year (approx) * ((int64_t) ECMA_DATE_MS_PER_DAY);
        -:  167:
    #####:  168:  if ((ecma_number_t) year_ms > time)
        -:  169:  {
    #####:  170:    approx--;
        -:  171:  }
        -:  172:
    #####:  173:  if ((ecma_number_t) (year_ms + ecma_date_days_in_year (approx) * ((int64_t) ECMA_DATE_MS_PER_DAY)) <= time)
        -:  174:  {
    #####:  175:    approx++;
        -:  176:  }
        -:  177:
    #####:  178:  return approx;
        -:  179:} /* ecma_date_year_from_time */
        -:  180:
        -:  181:/**
        -:  182: * Abstract operation: MonthFromTime
        -:  183: *
        -:  184: *  See also:
        -:  185: *          ECMA-262 v11, 20.4.1.4
        -:  186: *
        -:  187: * @return month corresponds to the given time
        -:  188: */
        -:  189:int32_t
    #####:  190:ecma_date_month_from_time (ecma_number_t time) /**< time value */
        -:  191:{
    #####:  192:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  193:
    #####:  194:  int32_t year = ecma_date_year_from_time (time);
    #####:  195:  int32_t day_within_year = ecma_date_day_from_time (time) - ecma_date_day_from_year (year);
        -:  196:
    #####:  197:  JERRY_ASSERT (day_within_year >= 0 && day_within_year < ECMA_DATE_DAYS_IN_LEAP_YEAR);
        -:  198:
    #####:  199:  int32_t in_leap_year = ecma_date_in_leap_year (year);
        -:  200:
    #####:  201:  for (int i = 1; i < 12; i++)
        -:  202:  {
    #####:  203:    if (day_within_year < first_day_in_month[in_leap_year][i])
        -:  204:    {
    #####:  205:      return i - 1;
        -:  206:    }
        -:  207:  }
        -:  208:
    #####:  209:  return 11;
        -:  210:} /* ecma_date_month_from_time */
        -:  211:
        -:  212:/**
        -:  213: * Abstract operation: DateFromTime
        -:  214: *
        -:  215: *  See also:
        -:  216: *          ECMA-262 v11, 20.4.1.4
        -:  217: *
        -:  218: * @return date corresponds to the given time
        -:  219: */
        -:  220:int32_t
    #####:  221:ecma_date_date_from_time (ecma_number_t time) /**< time value */
        -:  222:{
    #####:  223:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  224:
    #####:  225:  int32_t year = ecma_date_year_from_time (time);
    #####:  226:  int32_t day_within_year = ecma_date_day_from_time (time) - ecma_date_day_from_year (year);
        -:  227:
    #####:  228:  JERRY_ASSERT (day_within_year >= 0 && day_within_year < ECMA_DATE_DAYS_IN_LEAP_YEAR);
        -:  229:
    #####:  230:  int32_t in_leap_year = ecma_date_in_leap_year (year);
        -:  231:
    #####:  232:  int32_t month = 11;
        -:  233:
    #####:  234:  for (int i = 1; i < 12; i++)
        -:  235:  {
    #####:  236:    if (day_within_year < first_day_in_month[in_leap_year][i])
        -:  237:    {
    #####:  238:      month = i - 1;
    #####:  239:      break;
        -:  240:    }
        -:  241:  }
        -:  242:
    #####:  243:  return day_within_year + 1 - first_day_in_month[in_leap_year][month];
        -:  244:} /* ecma_date_date_from_time */
        -:  245:
        -:  246:/**
        -:  247: * Abstract operation: WeekDay
        -:  248: *
        -:  249: *  See also:
        -:  250: *          ECMA-262 v11, 20.4.1.4
        -:  251: *
        -:  252: * @return weekday corresponds to the given time
        -:  253: */
        -:  254:int32_t
    #####:  255:ecma_date_week_day (ecma_number_t time) /**< time value */
        -:  256:{
    #####:  257:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  258:
    #####:  259:  int32_t day = ecma_date_day_from_time (time);
        -:  260:
    #####:  261:  int week_day = (day + 4) % 7;
        -:  262:
    #####:  263:  return week_day >= 0 ? week_day : week_day + 7;
        -:  264:} /* ecma_date_week_day */
        -:  265:
        -:  266:/**
        -:  267: * Abstract operation: LocalTZA
        -:  268: *
        -:  269: *  See also:
        -:  270: *          ECMA-262 v11, 20.4.1.7
        -:  271: *
        -:  272: * @return local time zone adjustment
        -:  273: */
        -:  274:extern inline ecma_number_t JERRY_ATTR_ALWAYS_INLINE
    #####:  275:ecma_date_local_time_zone_adjustment (ecma_number_t time) /**< time value */
        -:  276:{
    #####:  277:  return jerry_port_get_local_time_zone_adjustment (time, true);
        -:  278:} /* ecma_date_local_time_zone_adjustment */
        -:  279:
        -:  280:/**
        -:  281: * Abstract operation: UTC
        -:  282: *
        -:  283: *  See also:
        -:  284: *          ECMA-262 v11, 20.4.1.9
        -:  285: *
        -:  286: * @return UTC time
        -:  287: */
        -:  288:ecma_number_t
    #####:  289:ecma_date_utc (ecma_number_t time) /**< time value */
        -:  290:{
    #####:  291:  return time - jerry_port_get_local_time_zone_adjustment (time, false);
        -:  292:} /* ecma_date_utc */
        -:  293:
        -:  294:/**
        -:  295: * Calculate the time component from the given time
        -:  296: *
        -:  297: * @return time component of the given time
        -:  298: */
        -:  299:int32_t
    #####:  300:ecma_date_time_in_day_from_time (ecma_number_t time) /**< time value */
        -:  301:{
    #####:  302:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  303:
    #####:  304:  ecma_number_t day = ecma_date_day_from_time (time);
        -:  305:
    #####:  306:  return (int32_t) (time - (day * ECMA_DATE_MS_PER_DAY));
        -:  307:} /* ecma_date_time_in_day_from_time */
        -:  308:
        -:  309:/**
        -:  310: * Abstract operation: HourFromTime
        -:  311: *
        -:  312: *  See also:
        -:  313: *          ECMA-262 v11, 20.4.1.10
        -:  314: *
        -:  315: * @return hours component of the given time
        -:  316: */
        -:  317:int32_t
    #####:  318:ecma_date_hour_from_time (ecma_number_t time) /**< time value */
        -:  319:{
    #####:  320:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  321:
    #####:  322:  int32_t time_in_day = ecma_date_time_in_day_from_time (time);
        -:  323:
    #####:  324:  return (int32_t) (time_in_day / ECMA_DATE_MS_PER_HOUR);
        -:  325:} /* ecma_date_hour_from_time */
        -:  326:
        -:  327:/**
        -:  328: * Abstract operation: HourFromTime
        -:  329: *
        -:  330: *  See also:
        -:  331: *          ECMA-262 v11, 20.4.1.10
        -:  332: *
        -:  333: * @return minutes component of the given time
        -:  334: */
        -:  335:int32_t
    #####:  336:ecma_date_min_from_time (ecma_number_t time) /**< time value */
        -:  337:{
    #####:  338:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  339:
    #####:  340:  int32_t time_in_day = ecma_date_time_in_day_from_time (time);
        -:  341:
    #####:  342:  return ((int32_t) (time_in_day / ECMA_DATE_MS_PER_MINUTE)) % ECMA_DATE_MINUTES_PER_HOUR;
        -:  343:} /* ecma_date_min_from_time */
        -:  344:
        -:  345:/**
        -:  346: * Abstract operation: HourFromTime
        -:  347: *
        -:  348: *  See also:
        -:  349: *          ECMA-262 v11, 20.4.1.10
        -:  350: *
        -:  351: * @return seconds component of the given time
        -:  352: */
        -:  353:int32_t
    #####:  354:ecma_date_sec_from_time (ecma_number_t time) /**< time value */
        -:  355:{
    #####:  356:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  357:
    #####:  358:  int32_t time_in_day = ecma_date_time_in_day_from_time (time);
        -:  359:
    #####:  360:  return ((int32_t) (time_in_day / ECMA_DATE_MS_PER_SECOND)) % ECMA_DATE_SECONDS_PER_MINUTE;
        -:  361:} /* ecma_date_sec_from_time */
        -:  362:
        -:  363:/**
        -:  364: * Abstract operation: HourFromTime
        -:  365: *
        -:  366: *  See also:
        -:  367: *          ECMA-262 v11, 20.4.1.10
        -:  368: *
        -:  369: * @return milliseconds component of the given time
        -:  370: */
        -:  371:int32_t
    #####:  372:ecma_date_ms_from_time (ecma_number_t time) /**< time value */
        -:  373:{
    #####:  374:  JERRY_ASSERT (!ecma_number_is_nan (time));
        -:  375:
    #####:  376:  int32_t time_in_day = ecma_date_time_in_day_from_time (time);
        -:  377:
    #####:  378:  return (int32_t) (time_in_day % ECMA_DATE_MS_PER_SECOND);
        -:  379:} /* ecma_date_ms_from_time */
        -:  380:
        -:  381:/**
        -:  382: * Abstract operation: MakeTime
        -:  383: *
        -:  384: *  See also:
        -:  385: *          ECMA-262 v11, 20.4.1.11
        -:  386: *
        -:  387: * @return constructed time in milliseconds
        -:  388: */
        -:  389:ecma_number_t
    #####:  390:ecma_date_make_time (ecma_number_t hour, /**< hour value */
        -:  391:                     ecma_number_t min, /**< minute value */
        -:  392:                     ecma_number_t sec, /**< second value */
        -:  393:                     ecma_number_t ms) /**< millisecond value */
        -:  394:{
    #####:  395:  if (!ecma_number_is_finite (hour) || !ecma_number_is_finite (min) || !ecma_number_is_finite (sec)
    #####:  396:      || !ecma_number_is_finite (ms))
        -:  397:  {
    #####:  398:    return ecma_number_make_nan ();
        -:  399:  }
        -:  400:
    #####:  401:  ecma_number_t h = ecma_number_trunc (hour);
    #####:  402:  ecma_number_t m = ecma_number_trunc (min);
    #####:  403:  ecma_number_t s = ecma_number_trunc (sec);
    #####:  404:  ecma_number_t milli = ecma_number_trunc (ms);
        -:  405:
    #####:  406:  return h * ECMA_DATE_MS_PER_HOUR + m * ECMA_DATE_MS_PER_MINUTE + s * ECMA_DATE_MS_PER_SECOND + milli;
        -:  407:} /* ecma_date_make_time */
        -:  408:
        -:  409:/**
        -:  410: * Abstract operation: MakeDay
        -:  411: *
        -:  412: *  See also:
        -:  413: *          ECMA-262 v11, 20.4.1.12
        -:  414: *
        -:  415: * @return elpased number of days since Unix Epoch
        -:  416: */
        -:  417:ecma_number_t
    #####:  418:ecma_date_make_day (ecma_number_t year, /**< year value */
        -:  419:                    ecma_number_t month, /**< month value */
        -:  420:                    ecma_number_t date) /**< date value */
        -:  421:{
        -:  422:  /* 1. */
    #####:  423:  if (!ecma_number_is_finite (year) || !ecma_number_is_finite (month) || !ecma_number_is_finite (date)
    #####:  424:      || fabs (year) > INT32_MAX)
        -:  425:  {
    #####:  426:    return ecma_number_make_nan ();
        -:  427:  }
        -:  428:
        -:  429:  /* 2., 3., 4. */
    #####:  430:  int32_t y = (int32_t) (year);
    #####:  431:  ecma_number_t m = ecma_number_trunc (month);
    #####:  432:  ecma_number_t dt = ecma_number_trunc (date);
        -:  433:
        -:  434:  /* 5. */
    #####:  435:  int32_t ym = y + (int32_t) (floor (m / 12));
        -:  436:
        -:  437:  /* 6. */
    #####:  438:  int32_t mn = (int32_t) fmod (m, 12);
        -:  439:
    #####:  440:  if (mn < 0)
        -:  441:  {
    #####:  442:    mn += 12;
        -:  443:  }
        -:  444:
        -:  445:  /* 7. */
    #####:  446:  ecma_number_t days = (ecma_date_day_from_year (ym) + first_day_in_month[ecma_date_in_leap_year (ym)][mn] + (dt - 1));
    #####:  447:  return days * ECMA_DATE_MS_PER_DAY;
        -:  448:} /* ecma_date_make_day */
        -:  449:
        -:  450:/**
        -:  451: * Abstract operation: MakeTime
        -:  452: *
        -:  453: *  See also:
        -:  454: *          ECMA-262 v11, 20.4.1.13
        -:  455: *
        -:  456: * @return elpased number of milliceconds since Unix Epoch
        -:  457: */
        -:  458:ecma_number_t
    #####:  459:ecma_date_make_date (ecma_number_t day, /**< day value */
        -:  460:                     ecma_number_t time) /**< time value */
        -:  461:{
    #####:  462:  if (!ecma_number_is_finite (day) || !ecma_number_is_finite (time))
        -:  463:  {
    #####:  464:    return ecma_number_make_nan ();
        -:  465:  }
        -:  466:
    #####:  467:  return day + time;
        -:  468:} /* ecma_date_make_date */
        -:  469:
        -:  470:/**
        -:  471: * Abstract operation: TimeClip
        -:  472: *
        -:  473: *  See also:
        -:  474: *          ECMA-262 v11, 20.4.1.14
        -:  475: *
        -:  476: * @return elpased number of milliceconds since Unix Epoch
        -:  477: */
        -:  478:ecma_number_t
    #####:  479:ecma_date_time_clip (ecma_number_t time) /**< time value */
        -:  480:{
    #####:  481:  if (!ecma_number_is_finite (time) || fabs (time) > ECMA_DATE_MAX_VALUE)
        -:  482:  {
    #####:  483:    return ecma_number_make_nan ();
        -:  484:  }
        -:  485:
    #####:  486:  return ecma_number_trunc (time);
        -:  487:} /* ecma_date_time_clip */
        -:  488:
        -:  489:/**
        -:  490: * Common function to convert date to string.
        -:  491: *
        -:  492: * @return ecma value
        -:  493: *         Returned value must be freed with ecma_free_value.
        -:  494: */
        -:  495:static ecma_value_t
    #####:  496:ecma_date_to_string_format (ecma_number_t datetime_number, /**< datetime */
        -:  497:                            const char *format_p) /**< format buffer */
    #####:  498:{
    #####:  499:  const uint32_t date_buffer_length = 37;
    #####:  500:  JERRY_VLA (lit_utf8_byte_t, date_buffer, date_buffer_length);
        -:  501:
    #####:  502:  lit_utf8_byte_t *dest_p = date_buffer;
        -:  503:
    #####:  504:  while (*format_p != LIT_CHAR_NULL)
        -:  505:  {
    #####:  506:    if (*format_p != LIT_CHAR_DOLLAR_SIGN)
        -:  507:    {
    #####:  508:      *dest_p++ = (lit_utf8_byte_t) *format_p++;
    #####:  509:      continue;
        -:  510:    }
        -:  511:
    #####:  512:    format_p++;
        -:  513:
    #####:  514:    const char *str_p = NULL;
    #####:  515:    int32_t number = 0;
    #####:  516:    int32_t number_length = 0;
        -:  517:
    #####:  518:    switch (*format_p)
        -:  519:    {
    #####:  520:      case LIT_CHAR_UPPERCASE_Y: /* Year. */
        -:  521:      {
    #####:  522:        number = ecma_date_year_from_time (datetime_number);
        -:  523:
    #####:  524:        if (number >= 100000 || number <= -100000)
        -:  525:        {
    #####:  526:          number_length = 6;
        -:  527:        }
    #####:  528:        else if (number >= 10000 || number <= -10000)
        -:  529:        {
    #####:  530:          number_length = 5;
        -:  531:        }
        -:  532:        else
        -:  533:        {
    #####:  534:          number_length = 4;
        -:  535:        }
    #####:  536:        break;
        -:  537:      }
    #####:  538:      case LIT_CHAR_LOWERCASE_Y: /* ISO Year: -000001, 0000, 0001, 9999, +012345 */
        -:  539:      {
    #####:  540:        number = ecma_date_year_from_time (datetime_number);
    #####:  541:        if (0 <= number && number <= 9999)
        -:  542:        {
    #####:  543:          number_length = 4;
        -:  544:        }
        -:  545:        else
        -:  546:        {
    #####:  547:          number_length = 6;
        -:  548:        }
    #####:  549:        break;
        -:  550:      }
    #####:  551:      case LIT_CHAR_UPPERCASE_M: /* Month. */
        -:  552:      {
    #####:  553:        int32_t month = ecma_date_month_from_time (datetime_number);
        -:  554:
    #####:  555:        JERRY_ASSERT (month >= 0 && month <= 11);
        -:  556:
    #####:  557:        str_p = month_names_p[month];
    #####:  558:        break;
        -:  559:      }
    #####:  560:      case LIT_CHAR_UPPERCASE_O: /* Month as number. */
        -:  561:      {
        -:  562:        /* The 'ecma_date_month_from_time' (ECMA 262 v5, 15.9.1.4) returns a
        -:  563:         * number from 0 to 11, but we have to print the month from 1 to 12
        -:  564:         * for ISO 8601 standard (ECMA 262 v5, 15.9.1.15). */
    #####:  565:        number = ecma_date_month_from_time (datetime_number) + 1;
    #####:  566:        number_length = 2;
    #####:  567:        break;
        -:  568:      }
    #####:  569:      case LIT_CHAR_UPPERCASE_D: /* Day. */
        -:  570:      {
    #####:  571:        number = ecma_date_date_from_time (datetime_number);
    #####:  572:        number_length = 2;
    #####:  573:        break;
        -:  574:      }
    #####:  575:      case LIT_CHAR_UPPERCASE_W: /* Day of week. */
        -:  576:      {
    #####:  577:        int32_t day = ecma_date_week_day (datetime_number);
        -:  578:
    #####:  579:        JERRY_ASSERT (day >= 0 && day <= 6);
        -:  580:
    #####:  581:        str_p = day_names_p[day];
    #####:  582:        break;
        -:  583:      }
    #####:  584:      case LIT_CHAR_LOWERCASE_H: /* Hour. */
        -:  585:      {
    #####:  586:        number = ecma_date_hour_from_time (datetime_number);
    #####:  587:        number_length = 2;
    #####:  588:        break;
        -:  589:      }
    #####:  590:      case LIT_CHAR_LOWERCASE_M: /* Minutes. */
        -:  591:      {
    #####:  592:        number = ecma_date_min_from_time (datetime_number);
    #####:  593:        number_length = 2;
    #####:  594:        break;
        -:  595:      }
    #####:  596:      case LIT_CHAR_LOWERCASE_S: /* Seconds. */
        -:  597:      {
    #####:  598:        number = ecma_date_sec_from_time (datetime_number);
    #####:  599:        number_length = 2;
    #####:  600:        break;
        -:  601:      }
    #####:  602:      case LIT_CHAR_LOWERCASE_I: /* Milliseconds. */
        -:  603:      {
    #####:  604:        number = ecma_date_ms_from_time (datetime_number);
    #####:  605:        number_length = 3;
    #####:  606:        break;
        -:  607:      }
    #####:  608:      case LIT_CHAR_LOWERCASE_Z: /* Time zone hours part. */
        -:  609:      {
    #####:  610:        int32_t time_zone = (int32_t) ecma_date_local_time_zone_adjustment (datetime_number);
        -:  611:
    #####:  612:        if (time_zone >= 0)
        -:  613:        {
    #####:  614:          *dest_p++ = LIT_CHAR_PLUS;
        -:  615:        }
        -:  616:        else
        -:  617:        {
    #####:  618:          *dest_p++ = LIT_CHAR_MINUS;
    #####:  619:          time_zone = -time_zone;
        -:  620:        }
        -:  621:
    #####:  622:        number = time_zone / ECMA_DATE_MS_PER_HOUR;
    #####:  623:        number_length = 2;
    #####:  624:        break;
        -:  625:      }
    #####:  626:      default:
        -:  627:      {
    #####:  628:        JERRY_ASSERT (*format_p == LIT_CHAR_UPPERCASE_Z); /* Time zone minutes part. */
        -:  629:
    #####:  630:        int32_t time_zone = (int32_t) ecma_date_local_time_zone_adjustment (datetime_number);
        -:  631:
    #####:  632:        if (time_zone < 0)
        -:  633:        {
    #####:  634:          time_zone = -time_zone;
        -:  635:        }
        -:  636:
    #####:  637:        number = (time_zone % ECMA_DATE_MS_PER_HOUR) / ECMA_DATE_MS_PER_MINUTE;
    #####:  638:        number_length = 2;
    #####:  639:        break;
        -:  640:      }
        -:  641:    }
        -:  642:
    #####:  643:    format_p++;
        -:  644:
    #####:  645:    if (str_p != NULL)
        -:  646:    {
        -:  647:      /* Print string values: month or day name which is always 3 characters */
    #####:  648:      memcpy (dest_p, str_p, 3);
    #####:  649:      dest_p += 3;
    #####:  650:      continue;
        -:  651:    }
        -:  652:
        -:  653:    /* Print right aligned number values. */
    #####:  654:    JERRY_ASSERT (number_length > 0);
        -:  655:
    #####:  656:    if (number < 0)
        -:  657:    {
    #####:  658:      number = -number;
    #####:  659:      *dest_p++ = '-';
        -:  660:    }
    #####:  661:    else if (*(format_p - 1) == LIT_CHAR_LOWERCASE_Y && number_length == 6)
        -:  662:    {
        -:  663:      /* positive sign is compulsory for extended years */
    #####:  664:      *dest_p++ = '+';
        -:  665:    }
        -:  666:
    #####:  667:    dest_p += number_length;
    #####:  668:    lit_utf8_byte_t *buffer_p = dest_p;
        -:  669:
        -:  670:    do
        -:  671:    {
    #####:  672:      buffer_p--;
    #####:  673:      *buffer_p = (lit_utf8_byte_t) ((number % 10) + (int32_t) LIT_CHAR_0);
    #####:  674:      number /= 10;
    #####:  675:    } while (--number_length);
        -:  676:  }
        -:  677:
    #####:  678:  JERRY_ASSERT (dest_p <= date_buffer + date_buffer_length);
        -:  679:
    #####:  680:  return ecma_make_string_value (
    #####:  681:    ecma_new_ecma_string_from_ascii (date_buffer, (lit_utf8_size_t) (dest_p - date_buffer)));
        -:  682:} /* ecma_date_to_string_format */
        -:  683:
        -:  684:/**
        -:  685: * Common function to create a time zone specific string from a numeric value.
        -:  686: *
        -:  687: * Used by:
        -:  688: *        - The Date routine.
        -:  689: *        - The Date.prototype.toString routine.
        -:  690: *
        -:  691: * @return ecma value
        -:  692: *         Returned value must be freed with ecma_free_value.
        -:  693: */
        -:  694:ecma_value_t
    #####:  695:ecma_date_value_to_string (ecma_number_t datetime_number) /**< datetime */
        -:  696:{
    #####:  697:  datetime_number += ecma_date_local_time_zone_adjustment (datetime_number);
    #####:  698:  return ecma_date_to_string_format (datetime_number, "$W $M $D $Y $h:$m:$s GMT$z$Z");
        -:  699:} /* ecma_date_value_to_string */
        -:  700:
        -:  701:/**
        -:  702: * Common function to create a time zone specific string from a numeric value.
        -:  703: *
        -:  704: * Used by:
        -:  705: *        - The Date.prototype.toUTCString routine.
        -:  706: *
        -:  707: * @return ecma value
        -:  708: *         Returned value must be freed with ecma_free_value.
        -:  709: */
        -:  710:ecma_value_t
    #####:  711:ecma_date_value_to_utc_string (ecma_number_t datetime_number) /**< datetime */
        -:  712:{
    #####:  713:  return ecma_date_to_string_format (datetime_number, "$W, $D $M $Y $h:$m:$s GMT");
        -:  714:} /* ecma_date_value_to_utc_string */
        -:  715:
        -:  716:/**
        -:  717: * Common function to create a ISO specific string from a numeric value.
        -:  718: *
        -:  719: * Used by:
        -:  720: *        - The Date.prototype.toISOString routine.
        -:  721: *
        -:  722: * @return ecma value
        -:  723: *         Returned value must be freed with ecma_free_value.
        -:  724: */
        -:  725:ecma_value_t
    #####:  726:ecma_date_value_to_iso_string (ecma_number_t datetime_number) /**<datetime */
        -:  727:{
    #####:  728:  return ecma_date_to_string_format (datetime_number, "$y-$O-$DT$h:$m:$s.$iZ");
        -:  729:} /* ecma_date_value_to_iso_string */
        -:  730:
        -:  731:/**
        -:  732: * Common function to create a date string from a numeric value.
        -:  733: *
        -:  734: * Used by:
        -:  735: *        - The Date.prototype.toDateString routine.
        -:  736: *
        -:  737: * @return ecma value
        -:  738: *         Returned value must be freed with ecma_free_value.
        -:  739: */
        -:  740:ecma_value_t
    #####:  741:ecma_date_value_to_date_string (ecma_number_t datetime_number) /**<datetime */
        -:  742:{
    #####:  743:  return ecma_date_to_string_format (datetime_number, "$W $M $D $Y");
        -:  744:} /* ecma_date_value_to_date_string */
        -:  745:
        -:  746:/**
        -:  747: * Common function to create a time string from a numeric value.
        -:  748: *
        -:  749: * Used by:
        -:  750: *        - The Date.prototype.toTimeString routine.
        -:  751: *
        -:  752: * @return ecma value
        -:  753: *         Returned value must be freed with ecma_free_value.
        -:  754: */
        -:  755:ecma_value_t
    #####:  756:ecma_date_value_to_time_string (ecma_number_t datetime_number) /**<datetime */
        -:  757:{
    #####:  758:  return ecma_date_to_string_format (datetime_number, "$h:$m:$s GMT$z$Z");
        -:  759:} /* ecma_date_value_to_time_string */
        -:  760:
        -:  761:/**
        -:  762: * @}
        -:  763: * @}
        -:  764: */
        -:  765:
        -:  766:#endif /* JERRY_BUILTIN_DATE */
