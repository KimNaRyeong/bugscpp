        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-atomics-object.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-atomics-object.h"
        -:   17:
        -:   18:#include "ecma-arraybuffer-object.h"
        -:   19:#include "ecma-bigint.h"
        -:   20:#include "ecma-builtins.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-function-object.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-globals.h"
        -:   25:#include "ecma-helpers.h"
        -:   26:#include "ecma-objects.h"
        -:   27:#include "ecma-shared-arraybuffer-object.h"
        -:   28:#include "ecma-typedarray-object.h"
        -:   29:
        -:   30:#include "jcontext.h"
        -:   31:#include "jmem.h"
        -:   32:
        -:   33:#if JERRY_BUILTIN_ATOMICS
        -:   34:
        -:   35:/** \addtogroup ecma ECMA
        -:   36: * @{
        -:   37: *
        -:   38: * \addtogroup ecmaatomicsobject ECMA builtin Atomics helper functions
        -:   39: * @{
        -:   40: */
        -:   41:
        -:   42:/**
        -:   43: * Atomics validate Shared integer typedArray
        -:   44: *
        -:   45: * See also: ES11 24.4.1.1
        -:   46: *
        -:   47: * @return ecma value
        -:   48: */
        -:   49:ecma_value_t
        1:   50:ecma_validate_shared_integer_typedarray (ecma_value_t typedarray, /**< typedArray argument */
        -:   51:                                         bool waitable) /**< waitable argument */
        -:   52:{
        -:   53:  /* 2. */
        1:   54:  if (!ecma_is_typedarray (typedarray))
        -:   55:  {
    #####:   56:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_TYPED_ARRAY);
        -:   57:  }
        -:   58:
        -:   59:  /* 3-4. */
        1:   60:  ecma_object_t *typedarray_p = ecma_get_object_from_value (typedarray);
        1:   61:  ecma_typedarray_info_t target_info = ecma_typedarray_get_info (typedarray_p);
        -:   62:
        -:   63:  /* 5-6. */
        1:   64:  if (waitable)
        -:   65:  {
    #####:   66:    if (!(target_info.id == ECMA_BIGINT64_ARRAY || target_info.id == ECMA_INT32_ARRAY))
        -:   67:    {
    #####:   68:      return ecma_raise_type_error (ECMA_ERR_ARGUMENT_NOT_SUPPORTED);
        -:   69:    }
        -:   70:  }
        -:   71:  else
        -:   72:  {
        1:   73:    if (target_info.id == ECMA_UINT8_CLAMPED_ARRAY || target_info.id == ECMA_FLOAT32_ARRAY
        1:   74:        || target_info.id == ECMA_FLOAT64_ARRAY)
        -:   75:    {
    #####:   76:      return ecma_raise_type_error (ECMA_ERR_ARGUMENT_NOT_SUPPORTED);
        -:   77:    }
        -:   78:  }
        -:   79:
        -:   80:  /* 7. */
        1:   81:  JERRY_ASSERT (target_info.array_buffer_p != NULL);
        -:   82:
        -:   83:  /* 8-10. */
        1:   84:  ecma_object_t *buffer = ecma_typedarray_get_arraybuffer (typedarray_p);
        -:   85:
        1:   86:  if (!ecma_object_class_is (buffer, ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER))
        -:   87:  {
    #####:   88:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_NOT_SHARED_ARRAY_BUFFER);
        -:   89:  }
        -:   90:
        1:   91:  return ecma_make_object_value (buffer);
        -:   92:} /* ecma_validate_shared_integer_typedarray */
        -:   93:
        -:   94:/**
        -:   95: * Atomics validate Atomic Access
        -:   96: *
        -:   97: * See also: ES11 24.4.1.2
        -:   98: *
        -:   99: * @return ecma value
        -:  100: */
        -:  101:ecma_value_t
        1:  102:ecma_validate_atomic_access (ecma_value_t typedarray, /**< typedArray argument */
        -:  103:                             ecma_value_t request_index) /**< request_index argument */
        -:  104:{
        -:  105:  /* 1. */
        1:  106:  JERRY_ASSERT (ecma_is_value_object (typedarray)
        -:  107:                && ecma_typedarray_get_arraybuffer (ecma_get_object_from_value (typedarray)) != NULL);
        -:  108:
        1:  109:  ecma_object_t *typedarray_p = ecma_get_object_from_value (typedarray);
        -:  110:
        -:  111:  /* 2. */
        1:  112:  ecma_number_t access_index;
        1:  113:  if (ECMA_IS_VALUE_ERROR (ecma_op_to_index (request_index, &access_index)))
        -:  114:  {
    #####:  115:    return ECMA_VALUE_ERROR;
        -:  116:  }
        -:  117:
        -:  118:  /* 3. */
        1:  119:  ecma_typedarray_info_t target_info = ecma_typedarray_get_info (typedarray_p);
        -:  120:
        -:  121:  /* 4. */
        1:  122:  JERRY_ASSERT (access_index >= 0);
        -:  123:
        -:  124:  /* 5-6. */
        1:  125:  if (JERRY_UNLIKELY (access_index >= target_info.length))
        -:  126:  {
    #####:  127:    return ecma_raise_range_error (ECMA_ERR_INVALID_LENGTH);
        -:  128:  }
        -:  129:
        1:  130:  return ecma_make_number_value (access_index);
        -:  131:} /* ecma_validate_atomic_access */
        -:  132:
        -:  133:/**
        -:  134: * Atomics read, modify, write
        -:  135: *
        -:  136: * See also: ES11 24.4.1.11
        -:  137: *
        -:  138: * @return ecma value
        -:  139: */
        -:  140:ecma_value_t
        1:  141:ecma_atomic_read_modify_write (ecma_value_t typedarray, /**< typedArray argument */
        -:  142:                               ecma_value_t index, /**< index argument */
        -:  143:                               ecma_value_t value, /**< value argument */
        -:  144:                               ecma_atomics_op_t op) /**< operation argument */
        -:  145:{
        -:  146:  /* 1. */
        1:  147:  ecma_value_t buffer = ecma_validate_shared_integer_typedarray (typedarray, false);
        -:  148:
        1:  149:  if (ECMA_IS_VALUE_ERROR (buffer))
        -:  150:  {
    #####:  151:    return buffer;
        -:  152:  }
        -:  153:
        -:  154:  /* 2. */
        1:  155:  ecma_value_t idx = ecma_validate_atomic_access (typedarray, index);
        -:  156:
        1:  157:  if (ECMA_IS_VALUE_ERROR (idx))
        -:  158:  {
    #####:  159:    return idx;
        -:  160:  }
        -:  161:
        -:  162:  /* 3. */
        1:  163:  ecma_object_t *typedarray_p = ecma_get_object_from_value (typedarray);
        1:  164:  ecma_typedarray_info_t target_info = ecma_typedarray_get_info (typedarray_p);
        -:  165:
        -:  166:  /* 4-5. */
        1:  167:  ecma_value_t val = ECMA_VALUE_ERROR;
        1:  168:  ecma_number_t tmp;
        1:  169:  if (target_info.id == ECMA_BIGINT64_ARRAY || target_info.id == ECMA_BIGUINT64_ARRAY)
        -:  170:  {
    #####:  171:    val = ecma_bigint_to_bigint (value, true);
        -:  172:  }
        1:  173:  else if (!ECMA_IS_VALUE_ERROR (ecma_op_to_integer (value, &tmp)))
        -:  174:  {
        1:  175:    val = ecma_make_number_value (tmp);
        -:  176:  }
        -:  177:
        1:  178:  if (ECMA_IS_VALUE_ERROR (val))
        -:  179:  {
    #####:  180:    return val;
        -:  181:  }
        -:  182:
        -:  183:  /* 6. */
        1:  184:  uint8_t element_size = target_info.element_size;
        -:  185:
        -:  186:  /* 7. */
        1:  187:  ecma_typedarray_type_t element_type = target_info.id;
        -:  188:
        -:  189:  /* 8. */
        1:  190:  uint32_t offset = target_info.offset;
        -:  191:
        -:  192:  /* 9. */
        1:  193:  uint32_t indexed_position = ecma_number_to_uint32 (idx) * element_size + offset;
        -:  194:
        -:  195:
        -:  196:  JERRY_UNUSED (indexed_position);
        -:  197:  JERRY_UNUSED (element_type);
        -:  198:  JERRY_UNUSED (val);
        -:  199:  JERRY_UNUSED (buffer);
        -:  200:  JERRY_UNUSED (op);
        -:  201:
        1:  202:  ecma_free_value (val);
        -:  203:
        -:  204:  /* 10. */
        1:  205:  return ecma_make_uint32_value (0);
        -:  206:} /* ecma_atomic_read_modify_write */
        -:  207:
        -:  208:/**
        -:  209: * Atomics load
        -:  210: *
        -:  211: * See also: ES11 24.4.1.12
        -:  212: *
        -:  213: * @return ecma value
        -:  214: */
        -:  215:ecma_value_t
    #####:  216:ecma_atomic_load (ecma_value_t typedarray, /**< typedArray argument */
        -:  217:                  ecma_value_t index) /**< index argument */
        -:  218:{
    #####:  219:  ecma_value_t buffer = ecma_validate_shared_integer_typedarray (typedarray, false);
        -:  220:
    #####:  221:  if (ECMA_IS_VALUE_ERROR (buffer))
        -:  222:  {
    #####:  223:    return buffer;
        -:  224:  }
        -:  225:
        -:  226:  /* 2. */
    #####:  227:  ecma_value_t idx = ecma_validate_atomic_access (typedarray, index);
        -:  228:
    #####:  229:  if (ECMA_IS_VALUE_ERROR (idx))
        -:  230:  {
    #####:  231:    return idx;
        -:  232:  }
        -:  233:
        -:  234:  /* 3. */
    #####:  235:  ecma_object_t *typedarray_p = ecma_get_object_from_value (typedarray);
    #####:  236:  ecma_typedarray_info_t target_info = ecma_typedarray_get_info (typedarray_p);
        -:  237:
        -:  238:  /* 4. */
    #####:  239:  uint8_t element_size = target_info.element_size;
        -:  240:
        -:  241:  /* 5. */
    #####:  242:  ecma_typedarray_type_t element_type = target_info.id;
        -:  243:
        -:  244:  /* 6. */
    #####:  245:  uint32_t offset = target_info.offset;
        -:  246:
        -:  247:  /* 7. */
    #####:  248:  uint32_t indexed_position = ecma_number_to_uint32 (idx) * element_size + offset;
        -:  249:
        -:  250:  JERRY_UNUSED (indexed_position);
        -:  251:  JERRY_UNUSED (element_type);
        -:  252:  JERRY_UNUSED (buffer);
        -:  253:
        -:  254:  /* 8. */
    #####:  255:  return ecma_make_uint32_value (0);
        -:  256:} /* ecma_atomic_load */
        -:  257:
        -:  258:/**
        -:  259: * @}
        -:  260: * @}
        -:  261: */
        -:  262:#endif /* JERRY_BUILTIN_ATOMICS */
