        -:    0:Source:/home/workspace/tests/unit-core/test-strings.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-helpers.h"
        -:   17:#include "ecma-init-finalize.h"
        -:   18:
        -:   19:#include "lit-strings.h"
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:/* Iterations count. */
        -:   23:#define test_iters (1024)
        -:   24:
        -:   25:/* Sub iterations count. */
        -:   26:#define test_subiters (128)
        -:   27:
        -:   28:/* Max bytes in string. */
        -:   29:#define max_bytes_in_string      (65 * 1024)
        -:   30:#define max_code_units_in_string (max_bytes_in_string)
        -:   31:
        -:   32:typedef enum
        -:   33:{
        -:   34:  CESU8_ANY_SIZE,
        -:   35:  CESU8_ONE_BYTE,
        -:   36:  CESU8_TWO_BYTES,
        -:   37:  CESU8_THREE_BYTES,
        -:   38:} utf8_char_size;
        -:   39:
        -:   40:static lit_utf8_size_t
    #####:   41:generate_cesu8_char (utf8_char_size char_size, lit_utf8_byte_t *buf)
        -:   42:{
    #####:   43:  TEST_ASSERT (char_size >= 0 && char_size <= LIT_CESU8_MAX_BYTES_IN_CODE_UNIT);
    #####:   44:  lit_code_point_t code_point = (lit_code_point_t) rand ();
        -:   45:
    #####:   46:  if (char_size == 1)
        -:   47:  {
    #####:   48:    code_point %= LIT_UTF8_1_BYTE_CODE_POINT_MAX;
        -:   49:  }
    #####:   50:  else if (char_size == 2)
        -:   51:  {
    #####:   52:    code_point =
    #####:   53:      LIT_UTF8_2_BYTE_CODE_POINT_MIN + code_point % (LIT_UTF8_2_BYTE_CODE_POINT_MAX - LIT_UTF8_2_BYTE_CODE_POINT_MIN);
        -:   54:  }
    #####:   55:  else if (char_size == 3)
        -:   56:  {
    #####:   57:    code_point =
    #####:   58:      LIT_UTF8_3_BYTE_CODE_POINT_MIN + code_point % (LIT_UTF8_3_BYTE_CODE_POINT_MAX - LIT_UTF8_3_BYTE_CODE_POINT_MIN);
        -:   59:  }
        -:   60:  else
        -:   61:  {
    #####:   62:    code_point %= LIT_UTF8_3_BYTE_CODE_POINT_MAX;
        -:   63:  }
        -:   64:
    #####:   65:  if (code_point >= LIT_UTF16_HIGH_SURROGATE_MIN && code_point <= LIT_UTF16_LOW_SURROGATE_MAX)
        -:   66:  {
    #####:   67:    code_point = LIT_UTF16_HIGH_SURROGATE_MIN - 1;
        -:   68:  }
        -:   69:
    #####:   70:  return lit_code_unit_to_utf8 ((ecma_char_t) code_point, buf);
        -:   71:} /* generate_cesu8_char */
        -:   72:
        -:   73:static lit_utf8_size_t
    #####:   74:generate_cesu8_string (lit_utf8_byte_t *buf_p, lit_utf8_size_t buf_size)
        -:   75:{
    #####:   76:  lit_utf8_size_t length = 0;
        -:   77:
    #####:   78:  lit_utf8_size_t size = 0;
    #####:   79:  while (size < buf_size)
        -:   80:  {
    #####:   81:    const utf8_char_size char_size =
    #####:   82:      (((buf_size - size) > LIT_CESU8_MAX_BYTES_IN_CODE_UNIT) ? CESU8_ANY_SIZE : (utf8_char_size) (buf_size - size));
        -:   83:
    #####:   84:    lit_utf8_size_t bytes_generated = generate_cesu8_char (char_size, buf_p);
        -:   85:
    #####:   86:    TEST_ASSERT (lit_is_valid_cesu8_string (buf_p, bytes_generated));
        -:   87:
    #####:   88:    size += bytes_generated;
    #####:   89:    buf_p += bytes_generated;
    #####:   90:    length++;
        -:   91:  }
        -:   92:
    #####:   93:  TEST_ASSERT (size == buf_size);
        -:   94:
    #####:   95:  return length;
        -:   96:} /* generate_cesu8_string */
        -:   97:
        -:   98:int
    #####:   99:main (void)
        -:  100:{
    #####:  101:  TEST_INIT ();
        -:  102:
    #####:  103:  jmem_init ();
    #####:  104:  ecma_init ();
        -:  105:
        -:  106:  lit_utf8_byte_t cesu8_string[max_bytes_in_string];
        -:  107:  ecma_char_t code_units[max_code_units_in_string];
        -:  108:  const lit_utf8_byte_t *saved_positions[max_code_units_in_string];
        -:  109:
    #####:  110:  for (int i = 0; i < test_iters; i++)
        -:  111:  {
    #####:  112:    lit_utf8_size_t cesu8_string_size = (i == 0) ? 0 : (lit_utf8_size_t) (rand () % max_bytes_in_string);
    #####:  113:    lit_utf8_size_t length = generate_cesu8_string (cesu8_string, cesu8_string_size);
        -:  114:
    #####:  115:    ecma_string_t *char_collection_string_p = ecma_new_ecma_string_from_utf8 (cesu8_string, cesu8_string_size);
    #####:  116:    lit_utf8_size_t char_collection_len = ecma_string_get_length (char_collection_string_p);
    #####:  117:    TEST_ASSERT (char_collection_len == length);
    #####:  118:    ecma_deref_ecma_string (char_collection_string_p);
        -:  119:
    #####:  120:    TEST_ASSERT (lit_utf8_string_length (cesu8_string, cesu8_string_size) == length);
        -:  121:
    #####:  122:    const lit_utf8_byte_t *curr_p = cesu8_string;
    #####:  123:    const lit_utf8_byte_t *end_p = cesu8_string + cesu8_string_size;
        -:  124:
    #####:  125:    lit_utf8_size_t calculated_length = 0;
    #####:  126:    lit_utf8_size_t code_units_count = 0;
        -:  127:
    #####:  128:    while (curr_p < end_p)
        -:  129:    {
    #####:  130:      code_units[code_units_count] = lit_cesu8_peek_next (curr_p);
    #####:  131:      saved_positions[code_units_count] = curr_p;
    #####:  132:      code_units_count++;
    #####:  133:      calculated_length++;
        -:  134:
    #####:  135:      lit_utf8_incr (&curr_p);
        -:  136:    }
        -:  137:
    #####:  138:    TEST_ASSERT (length == calculated_length);
        -:  139:
    #####:  140:    if (code_units_count > 0)
        -:  141:    {
    #####:  142:      for (int j = 0; j < test_subiters; j++)
        -:  143:      {
    #####:  144:        lit_utf8_size_t index = (lit_utf8_size_t) rand () % code_units_count;
    #####:  145:        curr_p = saved_positions[index];
    #####:  146:        TEST_ASSERT (lit_cesu8_peek_next (curr_p) == code_units[index]);
        -:  147:      }
        -:  148:    }
        -:  149:
    #####:  150:    curr_p = (lit_utf8_byte_t *) end_p;
    #####:  151:    while (curr_p > cesu8_string)
        -:  152:    {
    #####:  153:      TEST_ASSERT (code_units_count > 0);
    #####:  154:      calculated_length--;
    #####:  155:      TEST_ASSERT (code_units[calculated_length] == lit_cesu8_peek_prev (curr_p));
    #####:  156:      lit_utf8_decr (&curr_p);
        -:  157:    }
        -:  158:
    #####:  159:    TEST_ASSERT (calculated_length == 0);
        -:  160:
    #####:  161:    while (curr_p < end_p)
        -:  162:    {
    #####:  163:      ecma_char_t code_unit = lit_cesu8_read_next (&curr_p);
    #####:  164:      TEST_ASSERT (code_unit == code_units[calculated_length]);
    #####:  165:      calculated_length++;
        -:  166:    }
        -:  167:
    #####:  168:    TEST_ASSERT (length == calculated_length);
        -:  169:
    #####:  170:    while (curr_p > cesu8_string)
        -:  171:    {
    #####:  172:      TEST_ASSERT (code_units_count > 0);
    #####:  173:      calculated_length--;
    #####:  174:      TEST_ASSERT (code_units[calculated_length] == lit_cesu8_read_prev (&curr_p));
        -:  175:    }
        -:  176:
    #####:  177:    TEST_ASSERT (calculated_length == 0);
        -:  178:  }
        -:  179:
        -:  180:  /* Overlong-encoded code point */
    #####:  181:  lit_utf8_byte_t invalid_cesu8_string_1[] = { 0xC0, 0x82 };
    #####:  182:  TEST_ASSERT (!lit_is_valid_cesu8_string (invalid_cesu8_string_1, sizeof (invalid_cesu8_string_1)));
        -:  183:
        -:  184:  /* Overlong-encoded code point */
    #####:  185:  lit_utf8_byte_t invalid_cesu8_string_2[] = { 0xE0, 0x80, 0x81 };
    #####:  186:  TEST_ASSERT (!lit_is_valid_cesu8_string (invalid_cesu8_string_2, sizeof (invalid_cesu8_string_2)));
        -:  187:
        -:  188:  /* Pair of surrogates: 0xD901 0xDFF0 which encode Unicode character 0x507F0 */
    #####:  189:  lit_utf8_byte_t invalid_cesu8_string_3[] = { 0xED, 0xA4, 0x81, 0xED, 0xBF, 0xB0 };
    #####:  190:  TEST_ASSERT (lit_is_valid_cesu8_string (invalid_cesu8_string_3, sizeof (invalid_cesu8_string_3)));
        -:  191:
        -:  192:  /* Isolated high surrogate 0xD901 */
    #####:  193:  lit_utf8_byte_t valid_utf8_string_1[] = { 0xED, 0xA4, 0x81 };
    #####:  194:  TEST_ASSERT (lit_is_valid_cesu8_string (valid_utf8_string_1, sizeof (valid_utf8_string_1)));
        -:  195:
        -:  196:  lit_utf8_byte_t res_buf[3];
        -:  197:  lit_utf8_size_t res_size;
        -:  198:
    #####:  199:  res_size = lit_code_unit_to_utf8 (0x73, res_buf);
    #####:  200:  TEST_ASSERT (res_size == 1);
    #####:  201:  TEST_ASSERT (res_buf[0] == 0x73);
        -:  202:
    #####:  203:  res_size = lit_code_unit_to_utf8 (0x41A, res_buf);
    #####:  204:  TEST_ASSERT (res_size == 2);
    #####:  205:  TEST_ASSERT (res_buf[0] == 0xD0);
    #####:  206:  TEST_ASSERT (res_buf[1] == 0x9A);
        -:  207:
    #####:  208:  res_size = lit_code_unit_to_utf8 (0xD7FF, res_buf);
    #####:  209:  TEST_ASSERT (res_size == 3);
    #####:  210:  TEST_ASSERT (res_buf[0] == 0xED);
    #####:  211:  TEST_ASSERT (res_buf[1] == 0x9F);
    #####:  212:  TEST_ASSERT (res_buf[2] == 0xBF);
        -:  213:
        -:  214:  /* Ascii string */
    #####:  215:  lit_utf8_byte_t utf8_string_ascii[] = { 'G', 'o', 'o', 'd', 'b', 'y', 'e' };
    #####:  216:  TEST_ASSERT (lit_is_valid_utf8_string (utf8_string_ascii, sizeof (utf8_string_ascii), true));
        -:  217:
        -:  218:  /* Control character */
    #####:  219:  lit_utf8_byte_t utf8_string_control[] = { 0x00 };
    #####:  220:  TEST_ASSERT (lit_is_valid_utf8_string (utf8_string_control, sizeof (utf8_string_control), true));
        -:  221:
        -:  222:  /* 3 byte characters */
    #####:  223:  lit_utf8_byte_t utf8_string_3byte[] = { 0xe4, 0xbd, 0xa0, 0xe5, 0xa5, 0xbd, 0xe4, 0xb8, 0x96, 0xe7, 0x95, 0x8c };
    #####:  224:  TEST_ASSERT (lit_is_valid_utf8_string (utf8_string_3byte, sizeof (utf8_string_3byte), true));
        -:  225:
        -:  226:  /* 4 byte characters */
    #####:  227:  lit_utf8_byte_t utf8_string_4byte[] = { 0xf0, 0x90, 0x80, 0x80, 0xf0, 0x9f, 0xa7, 0xbf };
    #####:  228:  TEST_ASSERT (lit_is_valid_utf8_string (utf8_string_4byte, sizeof (utf8_string_4byte), true));
        -:  229:
        -:  230:  /* Invalid continuation byte */
    #####:  231:  lit_utf8_byte_t utf8_string_invalid[] = { 0xa0 };
    #####:  232:  TEST_ASSERT (!lit_is_valid_utf8_string (utf8_string_invalid, sizeof (utf8_string_invalid), true));
        -:  233:
        -:  234:  /* Isolated high surrogate */
    #####:  235:  lit_utf8_byte_t utf8_string_high[] = { 0xed, 0xa0, 0x80 };
    #####:  236:  TEST_ASSERT (lit_is_valid_utf8_string (utf8_string_high, sizeof (utf8_string_high), true));
        -:  237:
        -:  238:  /* Isolated low surrogate */
    #####:  239:  lit_utf8_byte_t utf8_string_low[] = { 0xed, 0xbf, 0xbf };
    #####:  240:  TEST_ASSERT (lit_is_valid_utf8_string (utf8_string_low, sizeof (utf8_string_low), true));
        -:  241:
        -:  242:  /* Correct pair of surrogates in strict*/
    #####:  243:  lit_utf8_byte_t utf8_string_surrogates_strict[] = { 0xed, 0xa0, 0x80, 0xed, 0xbf, 0xbf };
    #####:  244:  TEST_ASSERT (!lit_is_valid_utf8_string (utf8_string_surrogates_strict, sizeof (utf8_string_surrogates_strict), true));
        -:  245:
        -:  246:  /* Correct pair of surrogates*/
    #####:  247:  lit_utf8_byte_t utf8_string_surrogates[] = { 0xed, 0xa0, 0x80, 0xed, 0xbf, 0xbf };
    #####:  248:  TEST_ASSERT (lit_is_valid_utf8_string (utf8_string_surrogates, sizeof (utf8_string_surrogates), false));
        -:  249:
    #####:  250:  ecma_finalize ();
    #####:  251:  jmem_finalize ();
        -:  252:
        -:  253:  return 0;
        -:  254:} /* main */
