        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-get-put-value.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:/**
        -:   17: * Implementation of ECMA GetValue and PutValue
        -:   18: */
        -:   19:
        -:   20:#include "ecma-builtins.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-function-object.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-lex-env.h"
        -:   26:#include "ecma-objects-general.h"
        -:   27:#include "ecma-objects.h"
        -:   28:#include "ecma-reference.h"
        -:   29:
        -:   30:/** \addtogroup ecma ECMA
        -:   31: * @{
        -:   32: *
        -:   33: * \addtogroup lexicalenvironment Lexical environment
        -:   34: * @{
        -:   35: */
        -:   36:
        -:   37:/**
        -:   38: * GetValue operation part
        -:   39: *
        -:   40: * See also: ECMA-262 v5, 8.7.1, sections 3 and 5
        -:   41: *
        -:   42: * @return ecma value
        -:   43: *         Returned value must be freed with ecma_free_value.
        -:   44: */
        -:   45:ecma_value_t
    #####:   46:ecma_op_get_value_lex_env_base (ecma_object_t *lex_env_p, /**< lexical environment */
        -:   47:                                ecma_object_t **ref_base_lex_env_p, /**< [out] reference's base (lexical environment) */
        -:   48:                                ecma_string_t *name_p) /**< variable name */
        -:   49:{
    #####:   50:  JERRY_ASSERT (lex_env_p != NULL && ecma_is_lexical_environment (lex_env_p));
        -:   51:
        -:   52:  while (true)
        -:   53:  {
    #####:   54:    switch (ecma_get_lex_env_type (lex_env_p))
        -:   55:    {
    #####:   56:      case ECMA_LEXICAL_ENVIRONMENT_DECLARATIVE:
        -:   57:      {
    #####:   58:        ecma_property_t *property_p = ecma_find_named_property (lex_env_p, name_p);
        -:   59:
    #####:   60:        if (property_p != NULL)
        -:   61:        {
    #####:   62:          *ref_base_lex_env_p = lex_env_p;
    #####:   63:          ecma_property_value_t *property_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);
        -:   64:
        -:   65:#if JERRY_ESNEXT
    #####:   66:          if (JERRY_UNLIKELY (property_value_p->value == ECMA_VALUE_UNINITIALIZED))
        -:   67:          {
    #####:   68:            return ecma_raise_reference_error (ECMA_ERR_LET_CONST_NOT_INITIALIZED);
        -:   69:          }
        -:   70:#endif /* JERRY_ESNEXT */
        -:   71:
    #####:   72:          return ecma_fast_copy_value (property_value_p->value);
        -:   73:        }
    #####:   74:        break;
        -:   75:      }
        -:   76:#if JERRY_ESNEXT
    #####:   77:      case ECMA_LEXICAL_ENVIRONMENT_CLASS:
        -:   78:      {
        -:   79:#if JERRY_MODULE_SYSTEM
    #####:   80:        if (ECMA_LEX_ENV_CLASS_IS_MODULE (lex_env_p))
        -:   81:        {
    #####:   82:          ecma_property_t *property_p = ecma_find_named_property (lex_env_p, name_p);
        -:   83:
    #####:   84:          if (property_p != NULL)
        -:   85:          {
    #####:   86:            *ref_base_lex_env_p = lex_env_p;
    #####:   87:            ecma_property_value_t *property_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);
        -:   88:
    #####:   89:            if (!(*property_p & ECMA_PROPERTY_FLAG_DATA))
        -:   90:            {
    #####:   91:              property_value_p = ecma_get_property_value_from_named_reference (property_value_p);
        -:   92:            }
        -:   93:
    #####:   94:            if (JERRY_UNLIKELY (property_value_p->value == ECMA_VALUE_UNINITIALIZED))
        -:   95:            {
    #####:   96:              return ecma_raise_reference_error (ECMA_ERR_LET_CONST_NOT_INITIALIZED);
        -:   97:            }
        -:   98:
    #####:   99:            return ecma_fast_copy_value (property_value_p->value);
        -:  100:          }
        -:  101:        }
        -:  102:#endif /* JERRY_MODULE_SYSTEM */
    #####:  103:        break;
        -:  104:      }
        -:  105:#endif /* JERRY_ESNEXT */
    #####:  106:      default:
        -:  107:      {
    #####:  108:        JERRY_ASSERT (ecma_get_lex_env_type (lex_env_p) == ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND);
        -:  109:
    #####:  110:        ecma_value_t result = ecma_op_object_bound_environment_resolve_reference_value (lex_env_p, name_p);
        -:  111:
    #####:  112:        if (ecma_is_value_found (result))
        -:  113:        {
        -:  114:          /* Note: the result may contains ECMA_VALUE_ERROR */
    #####:  115:          *ref_base_lex_env_p = lex_env_p;
    #####:  116:          return result;
        -:  117:        }
        -:  118:
    #####:  119:        break;
        -:  120:      }
        -:  121:    }
        -:  122:
    #####:  123:    if (lex_env_p->u2.outer_reference_cp == JMEM_CP_NULL)
        -:  124:    {
    #####:  125:      break;
        -:  126:    }
        -:  127:
    #####:  128:    lex_env_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, lex_env_p->u2.outer_reference_cp);
        -:  129:  }
        -:  130:
    #####:  131:  *ref_base_lex_env_p = NULL;
        -:  132:#if JERRY_ERROR_MESSAGES
    #####:  133:  return ecma_raise_standard_error_with_format (JERRY_ERROR_REFERENCE,
        -:  134:                                                "% is not defined",
        -:  135:                                                ecma_make_string_value (name_p));
        -:  136:#else /* JERRY_ERROR_MESSAGES */
        -:  137:  return ecma_raise_reference_error (ECMA_ERR_EMPTY);
        -:  138:#endif /* JERRY_ERROR_MESSAGES */
        -:  139:
        -:  140:} /* ecma_op_get_value_lex_env_base */
        -:  141:
        -:  142:/**
        -:  143: * GetValue operation part (object base).
        -:  144: *
        -:  145: * See also: ECMA-262 v5, 8.7.1, section 4
        -:  146: *
        -:  147: * @return ecma value
        -:  148: *         Returned value must be freed with ecma_free_value.
        -:  149: */
        -:  150:ecma_value_t
    #####:  151:ecma_op_get_value_object_base (ecma_value_t base_value, /**< base value */
        -:  152:                               ecma_string_t *property_name_p) /**< property name */
        -:  153:{
        -:  154:  ecma_object_t *obj_p;
        -:  155:
    #####:  156:  if (JERRY_UNLIKELY (ecma_is_value_object (base_value)))
        -:  157:  {
    #####:  158:    obj_p = ecma_get_object_from_value (base_value);
        -:  159:  }
        -:  160:  else
        -:  161:  {
    #####:  162:    ecma_builtin_id_t id = ECMA_BUILTIN_ID_OBJECT_PROTOTYPE;
        -:  163:
    #####:  164:    if (JERRY_LIKELY (ecma_is_value_string (base_value)))
        -:  165:    {
    #####:  166:      ecma_string_t *string_p = ecma_get_string_from_value (base_value);
        -:  167:
    #####:  168:      if (ecma_string_is_length (property_name_p))
        -:  169:      {
    #####:  170:        return ecma_make_uint32_value (ecma_string_get_length (string_p));
        -:  171:      }
        -:  172:
    #####:  173:      uint32_t index = ecma_string_get_array_index (property_name_p);
        -:  174:
    #####:  175:      if (index != ECMA_STRING_NOT_ARRAY_INDEX && index < ecma_string_get_length (string_p))
        -:  176:      {
    #####:  177:        ecma_char_t char_at_idx = ecma_string_get_char_at_pos (string_p, index);
    #####:  178:        return ecma_make_string_value (ecma_new_ecma_string_from_code_unit (char_at_idx));
        -:  179:      }
        -:  180:
        -:  181:#if JERRY_BUILTIN_STRING
    #####:  182:      id = ECMA_BUILTIN_ID_STRING_PROTOTYPE;
        -:  183:#endif /* JERRY_BUILTIN_STRING */
        -:  184:    }
    #####:  185:    else if (ecma_is_value_number (base_value))
        -:  186:    {
        -:  187:#if JERRY_BUILTIN_NUMBER
    #####:  188:      id = ECMA_BUILTIN_ID_NUMBER_PROTOTYPE;
        -:  189:#endif /* JERRY_BUILTIN_NUMBER */
        -:  190:    }
        -:  191:#if JERRY_ESNEXT
    #####:  192:    else if (ecma_is_value_symbol (base_value))
        -:  193:    {
    #####:  194:      id = ECMA_BUILTIN_ID_SYMBOL_PROTOTYPE;
        -:  195:    }
        -:  196:#endif /* JERRY_ESNEXT */
        -:  197:#if JERRY_BUILTIN_BIGINT
    #####:  198:    else if (ecma_is_value_bigint (base_value))
        -:  199:    {
    #####:  200:      id = ECMA_BUILTIN_ID_BIGINT_PROTOTYPE;
        -:  201:    }
        -:  202:#endif /* JERRY_BUILTIN_BIGINT */
        -:  203:    else
        -:  204:    {
    #####:  205:      JERRY_ASSERT (ecma_is_value_boolean (base_value));
        -:  206:#if JERRY_BUILTIN_BOOLEAN
    #####:  207:      id = ECMA_BUILTIN_ID_BOOLEAN_PROTOTYPE;
        -:  208:#endif /* JERRY_BUILTIN_BOOLEAN */
        -:  209:    }
        -:  210:
    #####:  211:    obj_p = ecma_builtin_get (id);
        -:  212:  }
        -:  213:
    #####:  214:  return ecma_op_object_get_with_receiver (obj_p, property_name_p, base_value);
        -:  215:} /* ecma_op_get_value_object_base */
        -:  216:
        -:  217:/**
        -:  218: * PutValue operation part
        -:  219: *
        -:  220: * See also: ECMA-262 v5, 8.7.2, sections 3 and 5
        -:  221: *
        -:  222: * @return ecma value
        -:  223: *         Returned value must be freed with ecma_free_value.
        -:  224: */
        -:  225:ecma_value_t
        2:  226:ecma_op_put_value_lex_env_base (ecma_object_t *lex_env_p, /**< lexical environment */
        -:  227:                                ecma_string_t *name_p, /**< variable name */
        -:  228:                                bool is_strict, /**< flag indicating strict mode */
        -:  229:                                ecma_value_t value) /**< ECMA-value */
        -:  230:{
        2:  231:  JERRY_ASSERT (lex_env_p != NULL && ecma_is_lexical_environment (lex_env_p));
        -:  232:
        -:  233:  while (true)
        -:  234:  {
        2:  235:    switch (ecma_get_lex_env_type (lex_env_p))
        -:  236:    {
        -:  237:#if JERRY_ESNEXT
    #####:  238:      case ECMA_LEXICAL_ENVIRONMENT_CLASS:
        -:  239:      {
    #####:  240:        if (!ECMA_LEX_ENV_CLASS_IS_MODULE (lex_env_p))
        -:  241:        {
        -:  242:          break;
        -:  243:        }
        -:  244:        /* FALLTHRU */
        -:  245:      }
        -:  246:#endif /* JERRY_ESNEXT */
    #####:  247:      case ECMA_LEXICAL_ENVIRONMENT_DECLARATIVE:
        -:  248:      {
    #####:  249:        ecma_property_t *property_p = ecma_find_named_property (lex_env_p, name_p);
        -:  250:
    #####:  251:        if (property_p != NULL)
        -:  252:        {
        -:  253:#if JERRY_ESNEXT
    #####:  254:          ecma_property_value_t *property_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);
        -:  255:
    #####:  256:          JERRY_ASSERT (!(*property_p & ECMA_PROPERTY_FLAG_WRITABLE) || (*property_p & ECMA_PROPERTY_FLAG_DATA));
        -:  257:
    #####:  258:          if ((*property_p & ECMA_PROPERTY_FLAG_WRITABLE) && property_value_p->value != ECMA_VALUE_UNINITIALIZED)
        -:  259:          {
    #####:  260:            ecma_named_data_property_assign_value (lex_env_p, property_value_p, value);
    #####:  261:            return ECMA_VALUE_EMPTY;
        -:  262:          }
        -:  263:#else /* JERRY_ESNEXT */
    #####:  264:          if (ecma_is_property_writable (*property_p))
        -:  265:          {
    #####:  266:            ecma_property_value_t *property_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);
    #####:  267:            ecma_named_data_property_assign_value (lex_env_p, property_value_p, value);
    #####:  268:            return ECMA_VALUE_EMPTY;
        -:  269:          }
        -:  270:#endif /* JERRY_ESNEXT */
        -:  271:
    #####:  272:          return ecma_op_raise_set_binding_error (property_p, is_strict);
        -:  273:        }
    #####:  274:        break;
        -:  275:      }
        2:  276:      default:
        -:  277:      {
        2:  278:        JERRY_ASSERT (ecma_get_lex_env_type (lex_env_p) == ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND);
        -:  279:
        2:  280:        ecma_object_t *binding_obj_p = ecma_get_lex_env_binding_object (lex_env_p);
        -:  281:
        2:  282:        ecma_value_t has_property = ecma_op_object_has_property (binding_obj_p, name_p);
        -:  283:
        -:  284:#if JERRY_BUILTIN_PROXY
        2:  285:        if (ECMA_IS_VALUE_ERROR (has_property))
        -:  286:        {
    #####:  287:          return has_property;
        -:  288:        }
        -:  289:#endif /* JERRY_BUILTIN_PROXY */
        -:  290:
        2:  291:        if (ecma_is_value_true (has_property))
        -:  292:        {
        2:  293:          ecma_value_t completion = ecma_op_object_put (binding_obj_p, name_p, value, is_strict);
        -:  294:
        2:  295:          if (ECMA_IS_VALUE_ERROR (completion))
        -:  296:          {
    #####:  297:            return completion;
        -:  298:          }
        -:  299:
        2:  300:          JERRY_ASSERT (ecma_is_value_boolean (completion));
        2:  301:          return ECMA_VALUE_EMPTY;
        -:  302:        }
        -:  303:
    #####:  304:        break;
        -:  305:      }
        -:  306:    }
        -:  307:
    #####:  308:    if (lex_env_p->u2.outer_reference_cp == JMEM_CP_NULL)
        -:  309:    {
    #####:  310:      break;
        -:  311:    }
        -:  312:
    #####:  313:    lex_env_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, lex_env_p->u2.outer_reference_cp);
        -:  314:  }
        -:  315:
    #####:  316:  JERRY_ASSERT (ecma_get_lex_env_type (lex_env_p) == ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND);
        -:  317:
    #####:  318:  if (is_strict)
        -:  319:  {
        -:  320:#if JERRY_ERROR_MESSAGES
    #####:  321:    return ecma_raise_standard_error_with_format (JERRY_ERROR_REFERENCE,
        -:  322:                                                  "% is not defined",
        -:  323:                                                  ecma_make_string_value (name_p));
        -:  324:#else /* !JERRY_ERROR_MESSAGES */
        -:  325:    return ecma_raise_reference_error (ECMA_ERR_EMPTY);
        -:  326:#endif /* JERRY_ERROR_MESSAGES */
        -:  327:  }
        -:  328:
    #####:  329:  ecma_value_t completion = ecma_op_object_put (ecma_get_lex_env_binding_object (lex_env_p), name_p, value, false);
        -:  330:
    #####:  331:  JERRY_ASSERT (ecma_is_value_boolean (completion));
        -:  332:
    #####:  333:  return ECMA_VALUE_EMPTY;
        -:  334:} /* ecma_op_put_value_lex_env_base */
        -:  335:
        -:  336:/**
        -:  337: * @}
        -:  338: * @}
        -:  339: */
