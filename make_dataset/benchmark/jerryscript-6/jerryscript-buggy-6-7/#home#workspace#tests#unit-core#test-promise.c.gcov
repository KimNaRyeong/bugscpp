        -:    0:Source:/home/workspace/tests/unit-core/test-promise.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-port-default.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:static const jerry_char_t test_source[] = TEST_STRING_LITERAL ("var p1 = create_promise1();"
        -:   23:                                                               "var p2 = create_promise2();"
        -:   24:                                                               "p1.then(function(x) { "
        -:   25:                                                               "  assert(x==='resolved'); "
        -:   26:                                                               "}); "
        -:   27:                                                               "p2.catch(function(x) { "
        -:   28:                                                               "  assert(x==='rejected'); "
        -:   29:                                                               "}); ");
        -:   30:
        -:   31:static int count_in_assert = 0;
        -:   32:static jerry_value_t my_promise1;
        -:   33:static jerry_value_t my_promise2;
        -:   34:static const char s1[] = "resolved";
        -:   35:static const char s2[] = "rejected";
        -:   36:
        -:   37:static jerry_value_t
    #####:   38:create_promise1_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   39:                         const jerry_value_t args_p[], /**< arguments list */
        -:   40:                         const jerry_length_t args_cnt) /**< arguments length */
        -:   41:{
        -:   42:  JERRY_UNUSED (call_info_p);
        -:   43:  JERRY_UNUSED (args_p);
        -:   44:  JERRY_UNUSED (args_cnt);
        -:   45:
    #####:   46:  jerry_value_t ret = jerry_promise ();
    #####:   47:  my_promise1 = jerry_value_copy (ret);
        -:   48:
    #####:   49:  return ret;
        -:   50:} /* create_promise1_handler */
        -:   51:
        -:   52:static jerry_value_t
    #####:   53:create_promise2_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   54:                         const jerry_value_t args_p[], /**< arguments list */
        -:   55:                         const jerry_length_t args_cnt) /**< arguments length */
        -:   56:{
        -:   57:  JERRY_UNUSED (call_info_p);
        -:   58:  JERRY_UNUSED (args_p);
        -:   59:  JERRY_UNUSED (args_cnt);
        -:   60:
    #####:   61:  jerry_value_t ret = jerry_promise ();
    #####:   62:  my_promise2 = jerry_value_copy (ret);
        -:   63:
    #####:   64:  return ret;
        -:   65:} /* create_promise2_handler */
        -:   66:
        -:   67:static jerry_value_t
    #####:   68:assert_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   69:                const jerry_value_t args_p[], /**< function arguments */
        -:   70:                const jerry_length_t args_cnt) /**< number of function arguments */
        -:   71:{
        -:   72:  JERRY_UNUSED (call_info_p);
        -:   73:
    #####:   74:  count_in_assert++;
        -:   75:
    #####:   76:  if (args_cnt == 1 && jerry_value_is_true (args_p[0]))
        -:   77:  {
    #####:   78:    return jerry_boolean (true);
        -:   79:  }
        -:   80:  else
        -:   81:  {
    #####:   82:    TEST_ASSERT (false);
        -:   83:  }
        -:   84:} /* assert_handler */
        -:   85:
        -:   86:/**
        -:   87: * Register a JavaScript function in the global object.
        -:   88: */
        -:   89:static void
    #####:   90:register_js_function (const char *name_p, /**< name of the function */
        -:   91:                      jerry_external_handler_t handler_p) /**< function callback */
        -:   92:{
    #####:   93:  jerry_value_t global_obj_val = jerry_current_realm ();
        -:   94:
    #####:   95:  jerry_value_t function_val = jerry_function_external (handler_p);
    #####:   96:  jerry_value_t function_name_val = jerry_string_sz (name_p);
    #####:   97:  jerry_value_t result_val = jerry_object_set (global_obj_val, function_name_val, function_val);
        -:   98:
    #####:   99:  jerry_value_free (function_name_val);
    #####:  100:  jerry_value_free (function_val);
    #####:  101:  jerry_value_free (global_obj_val);
        -:  102:
    #####:  103:  jerry_value_free (result_val);
    #####:  104:} /* register_js_function */
        -:  105:
        -:  106:int
    #####:  107:main (void)
        -:  108:{
    #####:  109:  jerry_init (JERRY_INIT_EMPTY);
        -:  110:
    #####:  111:  if (!jerry_feature_enabled (JERRY_FEATURE_PROMISE))
        -:  112:  {
    #####:  113:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Promise is disabled!\n");
    #####:  114:    jerry_cleanup ();
    #####:  115:    return 0;
        -:  116:  }
        -:  117:
    #####:  118:  register_js_function ("create_promise1", create_promise1_handler);
    #####:  119:  register_js_function ("create_promise2", create_promise2_handler);
    #####:  120:  register_js_function ("assert", assert_handler);
        -:  121:
    #####:  122:  jerry_value_t parsed_code_val = jerry_parse (test_source, sizeof (test_source) - 1, NULL);
    #####:  123:  TEST_ASSERT (!jerry_value_is_exception (parsed_code_val));
        -:  124:
    #####:  125:  jerry_value_t res = jerry_run (parsed_code_val);
    #####:  126:  TEST_ASSERT (!jerry_value_is_exception (res));
        -:  127:
    #####:  128:  jerry_value_free (res);
    #####:  129:  jerry_value_free (parsed_code_val);
        -:  130:
        -:  131:  /* Test jerry_promise and jerry_value_is_promise. */
    #####:  132:  TEST_ASSERT (jerry_value_is_promise (my_promise1));
    #####:  133:  TEST_ASSERT (jerry_value_is_promise (my_promise2));
        -:  134:
    #####:  135:  TEST_ASSERT (count_in_assert == 0);
        -:  136:
        -:  137:  /* Test jerry_resolve_or_reject_promise. */
    #####:  138:  jerry_value_t str_resolve = jerry_string_sz (s1);
    #####:  139:  jerry_value_t str_reject = jerry_string_sz (s2);
        -:  140:
    #####:  141:  jerry_promise_resolve (my_promise1, str_resolve);
    #####:  142:  jerry_promise_reject (my_promise2, str_reject);
        -:  143:
        -:  144:  /* The resolve/reject function should be invalid after the promise has the result. */
    #####:  145:  jerry_promise_resolve (my_promise2, str_resolve);
    #####:  146:  jerry_promise_reject (my_promise1, str_reject);
        -:  147:
        -:  148:  /* Run the jobqueue. */
    #####:  149:  res = jerry_run_jobs ();
        -:  150:
    #####:  151:  TEST_ASSERT (!jerry_value_is_exception (res));
    #####:  152:  TEST_ASSERT (count_in_assert == 2);
        -:  153:
    #####:  154:  jerry_value_free (my_promise1);
    #####:  155:  jerry_value_free (my_promise2);
    #####:  156:  jerry_value_free (str_resolve);
    #####:  157:  jerry_value_free (str_reject);
        -:  158:
    #####:  159:  jerry_cleanup ();
        -:  160:
    #####:  161:  return 0;
        -:  162:} /* main */
