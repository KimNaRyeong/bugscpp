        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-objects-general.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-objects-general.h"
        -:   17:
        -:   18:#include "ecma-arguments-object.h"
        -:   19:#include "ecma-array-object.h"
        -:   20:#include "ecma-builtins.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-function-object.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-globals.h"
        -:   25:#include "ecma-helpers.h"
        -:   26:#include "ecma-objects.h"
        -:   27:#include "ecma-proxy-object.h"
        -:   28:
        -:   29:/** \addtogroup ecma ECMA
        -:   30: * @{
        -:   31: *
        -:   32: * \addtogroup ecmaobjectsinternalops ECMA objects' operations
        -:   33: * @{
        -:   34: */
        -:   35:
        -:   36:/**
        -:   37: * 'Object' object creation operation with no arguments.
        -:   38: *
        -:   39: * See also: ECMA-262 v5, 15.2.2.1
        -:   40: *
        -:   41: * @return pointer to newly created 'Object' object
        -:   42: */
        -:   43:ecma_object_t *
    #####:   44:ecma_op_create_object_object_noarg (void)
        -:   45:{
    #####:   46:  ecma_object_t *object_prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -:   47:
        -:   48:  /* 3., 4., 6., 7. */
    #####:   49:  return ecma_op_create_object_object_noarg_and_set_prototype (object_prototype_p);
        -:   50:} /* ecma_op_create_object_object_noarg */
        -:   51:
        -:   52:/**
        -:   53: * Object creation operation with no arguments.
        -:   54: * It sets the given prototype to the newly created object.
        -:   55: *
        -:   56: * See also: ECMA-262 v5, 15.2.2.1, 15.2.3.5
        -:   57: *
        -:   58: * @return pointer to newly created object
        -:   59: */
        -:   60:ecma_object_t *
    #####:   61:ecma_op_create_object_object_noarg_and_set_prototype (ecma_object_t *object_prototype_p) /**< pointer to prototype of
        -:   62:                                                                                              the object
        -:   63:                                                                                              (can be NULL) */
        -:   64:{
    #####:   65:  ecma_object_t *obj_p = ecma_create_object (object_prototype_p, 0, ECMA_OBJECT_TYPE_GENERAL);
        -:   66:
        -:   67:  /*
        -:   68:   * [[Class]] property of ECMA_OBJECT_TYPE_GENERAL type objects
        -:   69:   * without ECMA_INTERNAL_PROPERTY_CLASS internal property
        -:   70:   * is "Object".
        -:   71:   *
        -:   72:   * See also: ecma_object_get_class_name
        -:   73:   */
        -:   74:
    #####:   75:  return obj_p;
        -:   76:} /* ecma_op_create_object_object_noarg_and_set_prototype */
        -:   77:
        -:   78:/**
        -:   79: * [[Delete]] ecma general object's operation
        -:   80: *
        -:   81: * See also:
        -:   82: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -:   83: *          ECMA-262 v5, 8.12.7
        -:   84: *
        -:   85: * @return ecma value
        -:   86: *         Returned value must be freed with ecma_free_value
        -:   87: */
        -:   88:ecma_value_t
    #####:   89:ecma_op_general_object_delete (ecma_object_t *obj_p, /**< the object */
        -:   90:                               ecma_string_t *property_name_p, /**< property name */
        -:   91:                               bool is_throw) /**< flag that controls failure handling */
        -:   92:{
    #####:   93:  JERRY_ASSERT (obj_p != NULL && !ecma_is_lexical_environment (obj_p));
    #####:   94:  JERRY_ASSERT (property_name_p != NULL);
        -:   95:
        -:   96:  /* 1. */
    #####:   97:  ecma_property_ref_t property_ref;
        -:   98:
    #####:   99:  ecma_property_t property =
        -:  100:    ecma_op_object_get_own_property (obj_p, property_name_p, &property_ref, ECMA_PROPERTY_GET_NO_OPTIONS);
        -:  101:
        -:  102:  /* 2. */
    #####:  103:  if (!ECMA_PROPERTY_IS_FOUND (property))
        -:  104:  {
    #####:  105:    JERRY_ASSERT (property == ECMA_PROPERTY_TYPE_NOT_FOUND || property == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP);
    #####:  106:    return ECMA_VALUE_TRUE;
        -:  107:  }
        -:  108:
        -:  109:  /* 3. */
    #####:  110:  if (!ecma_is_property_configurable (property))
        -:  111:  {
        -:  112:    /* 4. */
    #####:  113:    if (is_throw)
        -:  114:    {
    #####:  115:      return ecma_raise_type_error (ECMA_ERR_EXPECTED_A_CONFIGURABLE_PROPERTY);
        -:  116:    }
        -:  117:
        -:  118:    /* 5. */
    #####:  119:    return ECMA_VALUE_FALSE;
        -:  120:  }
        -:  121:
    #####:  122:  ecma_object_type_t type = ecma_get_object_type (obj_p);
        -:  123:
    #####:  124:  if (type == ECMA_OBJECT_TYPE_ARRAY && ecma_array_object_delete_property (obj_p, property_name_p))
        -:  125:  {
    #####:  126:    return ECMA_VALUE_TRUE;
        -:  127:  }
        -:  128:
        -:  129:  /* a. */
    #####:  130:  ecma_delete_property (obj_p, property_ref.value_p);
        -:  131:
    #####:  132:  if (property & ECMA_PROPERTY_FLAG_BUILT_IN)
        -:  133:  {
        -:  134:#if JERRY_ESNEXT
    #####:  135:    switch (type)
        -:  136:    {
    #####:  137:      case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:
        -:  138:      {
    #####:  139:        if (ecma_builtin_function_is_routine (obj_p))
        -:  140:        {
    #####:  141:          ecma_builtin_routine_delete_built_in_property (obj_p, property_name_p);
    #####:  142:          break;
        -:  143:        }
        -:  144:        /* FALLTHRU */
        -:  145:      }
        -:  146:      case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:
        -:  147:      case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:
        -:  148:      case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:
        -:  149:      {
    #####:  150:        ecma_builtin_delete_built_in_property (obj_p, property_name_p);
    #####:  151:        break;
        -:  152:      }
    #####:  153:      case ECMA_OBJECT_TYPE_CLASS:
        -:  154:      {
    #####:  155:        JERRY_ASSERT (ecma_object_class_is (obj_p, ECMA_OBJECT_CLASS_ARGUMENTS));
    #####:  156:        ecma_op_arguments_delete_built_in_property (obj_p, property_name_p);
    #####:  157:        break;
        -:  158:      }
    #####:  159:      case ECMA_OBJECT_TYPE_FUNCTION:
        -:  160:      {
    #####:  161:        ecma_op_function_delete_built_in_property (obj_p, property_name_p);
    #####:  162:        break;
        -:  163:      }
    #####:  164:      case ECMA_OBJECT_TYPE_BOUND_FUNCTION:
        -:  165:      {
    #####:  166:        ecma_op_bound_function_delete_built_in_property (obj_p, property_name_p);
    #####:  167:        break;
        -:  168:      }
    #####:  169:      default:
        -:  170:      {
    #####:  171:        JERRY_UNREACHABLE ();
        -:  172:        break;
        -:  173:      }
        -:  174:    }
        -:  175:#else /* !JERRY_ESNEXT */
    #####:  176:    if (type == ECMA_OBJECT_TYPE_CLASS)
        -:  177:    {
        -:  178:      JERRY_ASSERT (ecma_object_class_is (obj_p, ECMA_OBJECT_CLASS_ARGUMENTS));
    #####:  179:      ecma_op_arguments_delete_built_in_property (obj_p, property_name_p);
        -:  180:    }
        -:  181:    else
        -:  182:    {
    #####:  183:      ecma_builtin_delete_built_in_property (obj_p, property_name_p);
        -:  184:    }
        -:  185:#endif /* JERRY_ESNEXT */
    #####:  186:  }
        -:  187:
        -:  188:  /* b. */
    #####:  189:  return ECMA_VALUE_TRUE;
        -:  190:} /* ecma_op_general_object_delete */
        -:  191:
        -:  192:/**
        -:  193: * Property invocation order during [[DefaultValue]] operation with string hint
        -:  194: */
        -:  195:static const lit_magic_string_id_t to_primitive_string_hint_method_names[2] = {
        -:  196:  LIT_MAGIC_STRING_TO_STRING_UL, /**< toString operation */
        -:  197:  LIT_MAGIC_STRING_VALUE_OF_UL, /**< valueOf operation */
        -:  198:};
        -:  199:
        -:  200:/**
        -:  201: * Property invocation order during [[DefaultValue]] operation with non string hint
        -:  202: */
        -:  203:static const lit_magic_string_id_t to_primitive_non_string_hint_method_names[2] = {
        -:  204:  LIT_MAGIC_STRING_VALUE_OF_UL, /**< valueOf operation */
        -:  205:  LIT_MAGIC_STRING_TO_STRING_UL, /**< toString operation */
        -:  206:};
        -:  207:
        -:  208:#if JERRY_ESNEXT
        -:  209:/**
        -:  210: * Hints for the ecma general object's toPrimitve operation
        -:  211: */
        -:  212:static const lit_magic_string_id_t hints[3] = {
        -:  213:  LIT_MAGIC_STRING_DEFAULT, /**< "default" hint */
        -:  214:  LIT_MAGIC_STRING_NUMBER, /**< "number" hint */
        -:  215:  LIT_MAGIC_STRING_STRING, /**< "string" hint */
        -:  216:};
        -:  217:#endif /* JERRY_ESNEXT */
        -:  218:
        -:  219:/**
        -:  220: * [[DefaultValue]] ecma general object's operation
        -:  221: *
        -:  222: * See also:
        -:  223: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -:  224: *          ECMA-262 v5, 8.12.8
        -:  225: *
        -:  226: * @return ecma value
        -:  227: *         Returned value must be freed with ecma_free_value
        -:  228: */
        -:  229:ecma_value_t
    #####:  230:ecma_op_general_object_default_value (ecma_object_t *obj_p, /**< the object */
        -:  231:                                      ecma_preferred_type_hint_t hint) /**< hint on preferred result type */
        -:  232:{
    #####:  233:  JERRY_ASSERT (obj_p != NULL && !ecma_is_lexical_environment (obj_p));
        -:  234:
        -:  235:#if JERRY_ESNEXT
    #####:  236:  ecma_value_t obj_value = ecma_make_object_value (obj_p);
        -:  237:
    #####:  238:  ecma_value_t exotic_to_prim = ecma_op_get_method_by_symbol_id (obj_value, LIT_GLOBAL_SYMBOL_TO_PRIMITIVE);
        -:  239:
    #####:  240:  if (ECMA_IS_VALUE_ERROR (exotic_to_prim))
        -:  241:  {
    #####:  242:    return exotic_to_prim;
        -:  243:  }
        -:  244:
    #####:  245:  if (!ecma_is_value_undefined (exotic_to_prim))
        -:  246:  {
    #####:  247:    ecma_object_t *call_func_p = ecma_get_object_from_value (exotic_to_prim);
    #####:  248:    ecma_value_t argument = ecma_make_magic_string_value (hints[hint]);
        -:  249:
    #####:  250:    ecma_value_t result = ecma_op_function_call (call_func_p, obj_value, &argument, 1);
        -:  251:
    #####:  252:    ecma_free_value (exotic_to_prim);
        -:  253:
    #####:  254:    if (ECMA_IS_VALUE_ERROR (result) || !ecma_is_value_object (result))
        -:  255:    {
    #####:  256:      return result;
        -:  257:    }
        -:  258:
    #####:  259:    ecma_free_value (result);
        -:  260:
    #####:  261:    return ecma_raise_type_error (ECMA_ERR_RESULT_OF_DEFAULTVALUE_IS_INVALID);
        -:  262:  }
        -:  263:
    #####:  264:  ecma_free_value (exotic_to_prim);
        -:  265:
    #####:  266:  if (hint == ECMA_PREFERRED_TYPE_NO)
        -:  267:  {
    #####:  268:    hint = ECMA_PREFERRED_TYPE_NUMBER;
        -:  269:  }
        -:  270:#else /* !JERRY_ESNEXT */
    #####:  271:  if (hint == ECMA_PREFERRED_TYPE_NO)
        -:  272:  {
    #####:  273:    hint = ECMA_PREFERRED_TYPE_NUMBER;
        -:  274:
        -:  275:#if JERRY_BUILTIN_DATE
    #####:  276:    if (ecma_object_class_is (obj_p, ECMA_OBJECT_CLASS_DATE))
        -:  277:    {
    #####:  278:      hint = ECMA_PREFERRED_TYPE_STRING;
        -:  279:    }
        -:  280:#endif /* JERRY_BUILTIN_DATE */
        -:  281:  }
        -:  282:#endif /* JERRY_ESNEXT */
        -:  283:
    #####:  284:  return ecma_op_general_object_ordinary_value (obj_p, hint);
        -:  285:} /* ecma_op_general_object_default_value */
        -:  286:
        -:  287:/**
        -:  288: * Ecma general object's OrdinaryToPrimitive operation
        -:  289: *
        -:  290: * See also:
        -:  291: *          ECMA-262 v6 7.1.1
        -:  292: *
        -:  293: * @return ecma value
        -:  294: *         Returned value must be freed with ecma_free_value
        -:  295: */
        -:  296:ecma_value_t
    #####:  297:ecma_op_general_object_ordinary_value (ecma_object_t *obj_p, /**< the object */
        -:  298:                                       ecma_preferred_type_hint_t hint) /**< hint on preferred result type */
        -:  299:{
    #####:  300:  const lit_magic_string_id_t *function_name_ids_p =
        -:  301:    (hint == ECMA_PREFERRED_TYPE_STRING ? to_primitive_string_hint_method_names
    #####:  302:                                        : to_primitive_non_string_hint_method_names);
        -:  303:
    #####:  304:  for (uint32_t i = 0; i < 2; i++)
        -:  305:  {
    #####:  306:    ecma_value_t function_value = ecma_op_object_get_by_magic_id (obj_p, function_name_ids_p[i]);
        -:  307:
    #####:  308:    if (ECMA_IS_VALUE_ERROR (function_value))
        -:  309:    {
    #####:  310:      return function_value;
        -:  311:    }
        -:  312:
    #####:  313:    ecma_value_t call_completion = ECMA_VALUE_EMPTY;
        -:  314:
    #####:  315:    if (ecma_op_is_callable (function_value))
        -:  316:    {
    #####:  317:      ecma_object_t *func_obj_p = ecma_get_object_from_value (function_value);
        -:  318:
    #####:  319:      call_completion = ecma_op_function_call (func_obj_p, ecma_make_object_value (obj_p), NULL, 0);
        -:  320:    }
        -:  321:
    #####:  322:    ecma_free_value (function_value);
        -:  323:
    #####:  324:    if (ECMA_IS_VALUE_ERROR (call_completion)
    #####:  325:        || (!ecma_is_value_empty (call_completion) && !ecma_is_value_object (call_completion)))
        -:  326:    {
    #####:  327:      return call_completion;
        -:  328:    }
        -:  329:
    #####:  330:    ecma_free_value (call_completion);
        -:  331:  }
        -:  332:
    #####:  333:  return ecma_raise_type_error (ECMA_ERR_RESULT_OF_DEFAULTVALUE_IS_INVALID);
        -:  334:} /* ecma_op_general_object_ordinary_value */
        -:  335:
        -:  336:/**
        -:  337: * Special types for ecma_op_general_object_define_own_property.
        -:  338: */
        -:  339:typedef enum
        -:  340:{
        -:  341:  ECMA_OP_OBJECT_DEFINE_GENERIC = 1, /**< generic property */
        -:  342:  ECMA_OP_OBJECT_DEFINE_ACCESSOR = 0, /**< accessor property */
        -:  343:  ECMA_OP_OBJECT_DEFINE_DATA = ECMA_PROPERTY_FLAG_DATA /**< data property */
        -:  344:} ecma_op_object_define_own_property_type_t;
        -:  345:
        -:  346:/**
        -:  347: * [[DefineOwnProperty]] ecma general object's operation
        -:  348: *
        -:  349: * See also:
        -:  350: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -:  351: *          ECMA-262 v5, 8.12.9
        -:  352: *
        -:  353: * @return ecma value
        -:  354: *         Returned value must be freed with ecma_free_value
        -:  355: */
        -:  356:ecma_value_t
        2:  357:ecma_op_general_object_define_own_property (ecma_object_t *object_p, /**< the object */
        -:  358:                                            ecma_string_t *property_name_p, /**< property name */
        -:  359:                                            const ecma_property_descriptor_t *property_desc_p) /**< property
        -:  360:                                                                                                *   descriptor */
        -:  361:{
        -:  362:#if JERRY_BUILTIN_PROXY
        2:  363:  if (ECMA_OBJECT_IS_PROXY (object_p))
        -:  364:  {
    #####:  365:    return ecma_proxy_object_define_own_property (object_p, property_name_p, property_desc_p);
        -:  366:  }
        -:  367:#endif /* JERRY_BUILTIN_PROXY */
        -:  368:
        2:  369:  JERRY_ASSERT (object_p != NULL && !ecma_is_lexical_environment (object_p));
        2:  370:  JERRY_ASSERT (!ecma_op_object_is_fast_array (object_p));
        2:  371:  JERRY_ASSERT (property_name_p != NULL);
        -:  372:
        2:  373:  uint8_t property_desc_type = ECMA_OP_OBJECT_DEFINE_GENERIC;
        -:  374:
        2:  375:  if (property_desc_p->flags & (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE_DEFINED))
        -:  376:  {
        -:  377:    /* A property descriptor cannot be both named data and named accessor. */
        2:  378:    JERRY_ASSERT ((property_desc_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED))
        -:  379:                  != (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED));
        2:  380:    property_desc_type = ECMA_OP_OBJECT_DEFINE_DATA;
        -:  381:  }
    #####:  382:  else if (property_desc_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED))
        -:  383:  {
    #####:  384:    JERRY_ASSERT (!(property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED));
    #####:  385:    property_desc_type = ECMA_OP_OBJECT_DEFINE_ACCESSOR;
        -:  386:  }
        -:  387:
        -:  388:  /* These three asserts ensures that a new property is created with the appropriate default flags.
        -:  389:   * E.g. if JERRY_PROP_IS_CONFIGURABLE_DEFINED is false, the newly created property must be non-configurable. */
        2:  390:  JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED)
        -:  391:                || !(property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE));
        2:  392:  JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)
        -:  393:                || !(property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE));
        2:  394:  JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED)
        -:  395:                || !(property_desc_p->flags & JERRY_PROP_IS_WRITABLE));
        -:  396:
        -:  397:  /* 1. */
        2:  398:  ecma_extended_property_ref_t ext_property_ref = { .property_ref.value_p = NULL, .property_p = NULL };
        -:  399:  ecma_property_t current_prop;
        -:  400:
        2:  401:  current_prop = ecma_op_object_get_own_property (object_p,
        -:  402:                                                  property_name_p,
        -:  403:                                                  &ext_property_ref.property_ref,
        -:  404:                                                  ECMA_PROPERTY_GET_VALUE | ECMA_PROPERTY_GET_EXT_REFERENCE);
        -:  405:
        2:  406:  if (!ECMA_PROPERTY_IS_FOUND (current_prop))
        -:  407:  {
        2:  408:    JERRY_ASSERT (current_prop == ECMA_PROPERTY_TYPE_NOT_FOUND
        -:  409:                  || current_prop == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP);
        -:  410:
        -:  411:    /* 3. */
        2:  412:    if (!ecma_op_ordinary_object_is_extensible (object_p))
        -:  413:    {
        -:  414:      /* 2. */
    #####:  415:      return ECMA_REJECT_WITH_FORMAT (property_desc_p->flags & JERRY_PROP_SHOULD_THROW,
        -:  416:                                      "Cannot define property '%', object is not extensible",
        -:  417:                                      ecma_make_prop_name_value (property_name_p));
        -:  418:    }
        -:  419:
        -:  420:    /* 4. */
        2:  421:    uint8_t prop_attributes = (uint8_t) (property_desc_p->flags & ECMA_PROPERTY_FLAGS_MASK);
        -:  422:
        2:  423:    if (property_desc_type != ECMA_OP_OBJECT_DEFINE_ACCESSOR)
        -:  424:    {
        -:  425:      /* a. */
        2:  426:      JERRY_ASSERT (property_desc_type == ECMA_OP_OBJECT_DEFINE_GENERIC
        -:  427:                    || property_desc_type == ECMA_OP_OBJECT_DEFINE_DATA);
        -:  428:
        2:  429:      ecma_property_value_t *new_prop_value_p =
        2:  430:        ecma_create_named_data_property (object_p, property_name_p, prop_attributes, NULL);
        -:  431:
        2:  432:      JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)
        -:  433:                    || ecma_is_value_undefined (property_desc_p->value));
        -:  434:
        2:  435:      new_prop_value_p->value = ecma_copy_value_if_not_object (property_desc_p->value);
        -:  436:    }
        -:  437:    else
        -:  438:    {
        -:  439:      /* b. */
    #####:  440:      ecma_create_named_accessor_property (object_p,
        -:  441:                                           property_name_p,
        -:  442:                                           property_desc_p->get_p,
        -:  443:                                           property_desc_p->set_p,
        -:  444:                                           prop_attributes,
        -:  445:                                           NULL);
        -:  446:    }
        -:  447:
        2:  448:    return ECMA_VALUE_TRUE;
        -:  449:  }
        -:  450:
        -:  451:  /* 6. */
    #####:  452:  const bool is_current_configurable = ecma_is_property_configurable (current_prop);
        -:  453:
        -:  454:  /* 7. a., b. */
    #####:  455:  bool is_enumerable = (property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE) != 0;
    #####:  456:  if (!is_current_configurable
    #####:  457:      && ((property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE)
    #####:  458:          || ((property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)
    #####:  459:              && (is_enumerable != ecma_is_property_enumerable (current_prop)))))
        -:  460:  {
    #####:  461:    if (ECMA_PROPERTY_IS_VIRTUAL (current_prop))
        -:  462:    {
    #####:  463:      ecma_free_value (ext_property_ref.property_ref.virtual_value);
        -:  464:    }
        -:  465:
    #####:  466:    return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);
        -:  467:  }
        -:  468:
    #####:  469:  if (ECMA_PROPERTY_IS_VIRTUAL (current_prop))
        -:  470:  {
    #####:  471:    bool writable_check_failed = (property_desc_p->flags & JERRY_PROP_IS_WRITABLE);
        -:  472:
        -:  473:#if JERRY_MODULE_SYSTEM
    #####:  474:    if (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_MODULE_NAMESPACE))
        -:  475:    {
    #####:  476:      if (JERRY_UNLIKELY (ext_property_ref.property_ref.virtual_value == ECMA_VALUE_UNINITIALIZED))
        -:  477:      {
    #####:  478:        return ecma_raise_reference_error (ECMA_ERR_LET_CONST_NOT_INITIALIZED);
        -:  479:      }
        -:  480:
    #####:  481:      if (property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED)
        -:  482:      {
    #####:  483:        writable_check_failed = ((property_desc_p->flags ^ current_prop) & JERRY_PROP_IS_WRITABLE) != 0;
        -:  484:      }
        -:  485:    }
        -:  486:    else
        -:  487:    {
    #####:  488:      JERRY_ASSERT (!is_current_configurable && !ecma_is_property_writable (current_prop));
        -:  489:    }
        -:  490:#else /* !JERRY_MODULE_SYSTEM */
        -:  491:    JERRY_ASSERT (!is_current_configurable && !ecma_is_property_writable (current_prop));
        -:  492:#endif /* JERRY_MODULE_SYSTEM */
        -:  493:
    #####:  494:    ecma_value_t result = ECMA_VALUE_TRUE;
        -:  495:
    #####:  496:    if (property_desc_type == ECMA_OP_OBJECT_DEFINE_ACCESSOR || writable_check_failed
    #####:  497:        || ((property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)
    #####:  498:            && !ecma_op_same_value (property_desc_p->value, ext_property_ref.property_ref.virtual_value)))
        -:  499:    {
    #####:  500:      result = ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);
        -:  501:    }
        -:  502:
    #####:  503:    ecma_free_value (ext_property_ref.property_ref.virtual_value);
    #####:  504:    return result;
        -:  505:  }
        -:  506:
        -:  507:  /* 8. */
    #####:  508:  if (property_desc_type == ECMA_OP_OBJECT_DEFINE_GENERIC)
        -:  509:  {
        -:  510:    /* No action required. */
        -:  511:  }
    #####:  512:  else if (JERRY_LIKELY (property_desc_type == (current_prop & ECMA_PROPERTY_FLAG_DATA)))
        -:  513:  {
        -:  514:    /* If property is configurable, there is no need for checks. */
    #####:  515:    if (JERRY_UNLIKELY (!is_current_configurable))
        -:  516:    {
    #####:  517:      if (property_desc_type == ECMA_OP_OBJECT_DEFINE_DATA)
        -:  518:      {
        -:  519:        /* 10. a. i. & ii. */
    #####:  520:        if (!ecma_is_property_writable (current_prop)
    #####:  521:            && ((property_desc_p->flags & JERRY_PROP_IS_WRITABLE)
    #####:  522:                || ((property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)
    #####:  523:                    && !ecma_op_same_value (property_desc_p->value, ext_property_ref.property_ref.value_p->value))))
        -:  524:        {
    #####:  525:          return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);
        -:  526:        }
        -:  527:      }
        -:  528:      else
        -:  529:      {
        -:  530:        /* 11. */
        -:  531:
        -:  532:        /* a. */
    #####:  533:        ecma_property_value_t *value_p = ext_property_ref.property_ref.value_p;
        -:  534:
    #####:  535:        ecma_getter_setter_pointers_t *get_set_pair_p = ecma_get_named_accessor_property (value_p);
        -:  536:        jmem_cpointer_t prop_desc_getter_cp, prop_desc_setter_cp;
    #####:  537:        ECMA_SET_POINTER (prop_desc_getter_cp, property_desc_p->get_p);
    #####:  538:        ECMA_SET_POINTER (prop_desc_setter_cp, property_desc_p->set_p);
        -:  539:
    #####:  540:        if (((property_desc_p->flags & JERRY_PROP_IS_GET_DEFINED) && prop_desc_getter_cp != get_set_pair_p->getter_cp)
    #####:  541:            || ((property_desc_p->flags & JERRY_PROP_IS_SET_DEFINED)
    #####:  542:                && prop_desc_setter_cp != get_set_pair_p->setter_cp))
        -:  543:        {
        -:  544:          /* i., ii. */
    #####:  545:          return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);
        -:  546:        }
        -:  547:      }
        -:  548:    }
        -:  549:  }
        -:  550:  else
        -:  551:  {
        -:  552:    /* 9. */
    #####:  553:    if (!is_current_configurable)
        -:  554:    {
        -:  555:      /* a. */
    #####:  556:      return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);
        -:  557:    }
        -:  558:
    #####:  559:    ecma_property_value_t *value_p = ext_property_ref.property_ref.value_p;
        -:  560:
    #####:  561:    if (property_desc_type == ECMA_OP_OBJECT_DEFINE_ACCESSOR)
        -:  562:    {
    #####:  563:      JERRY_ASSERT (current_prop & ECMA_PROPERTY_FLAG_DATA);
    #####:  564:      ecma_free_value_if_not_object (value_p->value);
        -:  565:
        -:  566:#if JERRY_CPOINTER_32_BIT
        -:  567:      ecma_getter_setter_pointers_t *getter_setter_pair_p;
    #####:  568:      getter_setter_pair_p = jmem_pools_alloc (sizeof (ecma_getter_setter_pointers_t));
    #####:  569:      getter_setter_pair_p->getter_cp = JMEM_CP_NULL;
    #####:  570:      getter_setter_pair_p->setter_cp = JMEM_CP_NULL;
    #####:  571:      ECMA_SET_NON_NULL_POINTER (value_p->getter_setter_pair_cp, getter_setter_pair_p);
        -:  572:#else /* !JERRY_CPOINTER_32_BIT */
    #####:  573:      value_p->getter_setter_pair.getter_cp = JMEM_CP_NULL;
    #####:  574:      value_p->getter_setter_pair.setter_cp = JMEM_CP_NULL;
        -:  575:#endif /* JERRY_CPOINTER_32_BIT */
        -:  576:    }
        -:  577:    else
        -:  578:    {
    #####:  579:      JERRY_ASSERT (!(current_prop & ECMA_PROPERTY_FLAG_DATA));
        -:  580:#if JERRY_CPOINTER_32_BIT
        -:  581:      ecma_getter_setter_pointers_t *getter_setter_pair_p;
    #####:  582:      getter_setter_pair_p = ECMA_GET_NON_NULL_POINTER (ecma_getter_setter_pointers_t, value_p->getter_setter_pair_cp);
    #####:  583:      jmem_pools_free (getter_setter_pair_p, sizeof (ecma_getter_setter_pointers_t));
        -:  584:#endif /* JERRY_CPOINTER_32_BIT */
    #####:  585:      value_p->value = ECMA_VALUE_UNDEFINED;
        -:  586:    }
        -:  587:
        -:  588:    /* Update flags */
    #####:  589:    ecma_property_t prop_flags = *(ext_property_ref.property_p);
    #####:  590:    prop_flags = (ecma_property_t) (prop_flags & ~ECMA_PROPERTY_FLAG_WRITABLE);
    #####:  591:    prop_flags ^= ECMA_PROPERTY_FLAG_DATA;
    #####:  592:    *(ext_property_ref.property_p) = prop_flags;
        -:  593:  }
        -:  594:
        -:  595:  /* 12. */
    #####:  596:  if (property_desc_type == ECMA_OP_OBJECT_DEFINE_DATA)
        -:  597:  {
    #####:  598:    JERRY_ASSERT (ECMA_PROPERTY_IS_RAW_DATA (*ext_property_ref.property_p));
        -:  599:
    #####:  600:    if (property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)
        -:  601:    {
    #####:  602:      ecma_named_data_property_assign_value (object_p, ext_property_ref.property_ref.value_p, property_desc_p->value);
        -:  603:    }
        -:  604:
    #####:  605:    if (property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED)
        -:  606:    {
    #####:  607:      ecma_set_property_writable_attr (ext_property_ref.property_p, (property_desc_p->flags & JERRY_PROP_IS_WRITABLE));
        -:  608:    }
        -:  609:  }
    #####:  610:  else if (property_desc_type == ECMA_OP_OBJECT_DEFINE_ACCESSOR)
        -:  611:  {
    #####:  612:    JERRY_ASSERT (!(*ext_property_ref.property_p & ECMA_PROPERTY_FLAG_DATA));
        -:  613:
    #####:  614:    if (property_desc_p->flags & JERRY_PROP_IS_GET_DEFINED)
        -:  615:    {
    #####:  616:      ecma_set_named_accessor_property_getter (object_p, ext_property_ref.property_ref.value_p, property_desc_p->get_p);
        -:  617:    }
        -:  618:
    #####:  619:    if (property_desc_p->flags & JERRY_PROP_IS_SET_DEFINED)
        -:  620:    {
    #####:  621:      ecma_set_named_accessor_property_setter (object_p, ext_property_ref.property_ref.value_p, property_desc_p->set_p);
        -:  622:    }
        -:  623:  }
        -:  624:
    #####:  625:  if (property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)
        -:  626:  {
    #####:  627:    ecma_set_property_enumerable_attr (ext_property_ref.property_p,
    #####:  628:                                       (property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE));
        -:  629:  }
        -:  630:
    #####:  631:  if (property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED)
        -:  632:  {
    #####:  633:    ecma_set_property_configurable_attr (ext_property_ref.property_p,
    #####:  634:                                         (property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE));
        -:  635:  }
        -:  636:
    #####:  637:  return ECMA_VALUE_TRUE;
        -:  638:} /* ecma_op_general_object_define_own_property */
        -:  639:
        -:  640:#if JERRY_ESNEXT
        -:  641:/**
        -:  642: * The IsCompatiblePropertyDescriptor method for Proxy object internal methods
        -:  643: *
        -:  644: * See also:
        -:  645: *          ECMAScript v6, 9.1.6.2
        -:  646: *
        -:  647: * @return bool
        -:  648: */
        -:  649:bool
    #####:  650:ecma_op_is_compatible_property_descriptor (const ecma_property_descriptor_t *desc_p, /**< target descriptor */
        -:  651:                                           const ecma_property_descriptor_t *current_p, /**< current descriptor */
        -:  652:                                           bool is_extensible) /**< true - if target object is extensible
        -:  653:                                                                    false - otherwise */
        -:  654:{
    #####:  655:  JERRY_ASSERT (desc_p != NULL);
        -:  656:
        -:  657:  /* 2. */
    #####:  658:  if (current_p == NULL)
        -:  659:  {
    #####:  660:    return is_extensible;
        -:  661:  }
        -:  662:
        -:  663:  /* 3. */
    #####:  664:  if (desc_p->flags == 0)
        -:  665:  {
    #####:  666:    return true;
        -:  667:  }
        -:  668:
        -:  669:  /* 4. */
    #####:  670:  if ((current_p->flags & desc_p->flags) == desc_p->flags)
        -:  671:  {
    #####:  672:    if ((current_p->flags & JERRY_PROP_IS_VALUE_DEFINED) && ecma_op_same_value (current_p->value, desc_p->value))
        -:  673:    {
    #####:  674:      return true;
        -:  675:    }
        -:  676:
    #####:  677:    if ((current_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED) && current_p->get_p == desc_p->get_p
    #####:  678:         && current_p->set_p == desc_p->set_p))
        -:  679:    {
    #####:  680:      return true;
        -:  681:    }
        -:  682:  }
        -:  683:
        -:  684:  /* 5. */
    #####:  685:  if (!(current_p->flags & JERRY_PROP_IS_CONFIGURABLE))
        -:  686:  {
    #####:  687:    if (desc_p->flags & JERRY_PROP_IS_CONFIGURABLE)
        -:  688:    {
    #####:  689:      return false;
        -:  690:    }
    #####:  691:    if ((desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)
    #####:  692:        && ((current_p->flags & JERRY_PROP_IS_ENUMERABLE) != (desc_p->flags & JERRY_PROP_IS_ENUMERABLE)))
        -:  693:    {
    #####:  694:      return false;
        -:  695:    }
        -:  696:  }
        -:  697:
    #####:  698:  const uint32_t accessor_desc_flags = (JERRY_PROP_IS_SET_DEFINED | JERRY_PROP_IS_GET_DEFINED);
    #####:  699:  const uint32_t data_desc_flags = (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE_DEFINED);
        -:  700:
    #####:  701:  bool desc_is_accessor = (desc_p->flags & accessor_desc_flags) != 0;
    #####:  702:  bool desc_is_data = (desc_p->flags & data_desc_flags) != 0;
    #####:  703:  bool current_is_data = (current_p->flags & data_desc_flags) != 0;
        -:  704:
        -:  705:  /* 6. */
    #####:  706:  if (!desc_is_accessor && !desc_is_data)
        -:  707:  {
    #####:  708:    return true;
        -:  709:  }
        -:  710:
        -:  711:  /* 7. */
    #####:  712:  if (current_is_data != desc_is_data)
        -:  713:  {
    #####:  714:    return (current_p->flags & JERRY_PROP_IS_CONFIGURABLE) != 0;
        -:  715:  }
        -:  716:
        -:  717:  /* 8. */
    #####:  718:  if (current_is_data)
        -:  719:  {
    #####:  720:    if (!(current_p->flags & JERRY_PROP_IS_CONFIGURABLE))
        -:  721:    {
    #####:  722:      if (!(current_p->flags & JERRY_PROP_IS_WRITABLE) && (desc_p->flags & JERRY_PROP_IS_WRITABLE))
        -:  723:      {
    #####:  724:        return false;
        -:  725:      }
        -:  726:
    #####:  727:      if (!(current_p->flags & JERRY_PROP_IS_WRITABLE) && (desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)
    #####:  728:          && !ecma_op_same_value (desc_p->value, current_p->value))
        -:  729:      {
    #####:  730:        return false;
        -:  731:      }
        -:  732:    }
        -:  733:
    #####:  734:    return true;
        -:  735:  }
        -:  736:
    #####:  737:  JERRY_ASSERT ((current_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED)) != 0);
    #####:  738:  JERRY_ASSERT ((desc_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED)) != 0);
        -:  739:
        -:  740:  /* 9. */
    #####:  741:  if (!(current_p->flags & JERRY_PROP_IS_CONFIGURABLE))
        -:  742:  {
    #####:  743:    if ((desc_p->flags & JERRY_PROP_IS_SET_DEFINED) && desc_p->set_p != current_p->set_p)
        -:  744:    {
    #####:  745:      return false;
        -:  746:    }
        -:  747:
    #####:  748:    if ((desc_p->flags & JERRY_PROP_IS_GET_DEFINED) && desc_p->get_p != current_p->get_p)
        -:  749:    {
    #####:  750:      return false;
        -:  751:    }
        -:  752:  }
        -:  753:
    #####:  754:  return true;
        -:  755:} /* ecma_op_is_compatible_property_descriptor */
        -:  756:
        -:  757:/**
        -:  758: * CompletePropertyDescriptor method for proxy internal method
        -:  759: *
        -:  760: * See also:
        -:  761: *          ECMA-262 v6, 6.2.4.5
        -:  762: */
        -:  763:void
    #####:  764:ecma_op_to_complete_property_descriptor (ecma_property_descriptor_t *desc_p) /**< target descriptor */
        -:  765:{
        -:  766:  /* 4. */
    #####:  767:  if (!(desc_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED)))
        -:  768:  {
        -:  769:    /* a. */
    #####:  770:    desc_p->flags |= JERRY_PROP_IS_VALUE_DEFINED;
        -:  771:  }
        -:  772:  /* 5. */
        -:  773:  else
        -:  774:  {
    #####:  775:    desc_p->flags |= (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED);
        -:  776:  }
    #####:  777:} /* ecma_op_to_complete_property_descriptor */
        -:  778:#endif /* JERRY_ESNEXT */
        -:  779:
        -:  780:/**
        -:  781: * @}
        -:  782: * @}
        -:  783: */
