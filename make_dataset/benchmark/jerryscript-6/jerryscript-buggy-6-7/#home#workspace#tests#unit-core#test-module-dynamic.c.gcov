        -:    0:Source:/home/workspace/tests/unit-core/test-module-dynamic.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-port-default.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:static int mode = 0;
        -:   23:static jerry_value_t global_user_value;
        -:   24:
        -:   25:static jerry_value_t
    #####:   26:global_assert (const jerry_call_info_t *call_info_p, /**< call information */
        -:   27:               const jerry_value_t args_p[], /**< arguments list */
        -:   28:               const jerry_length_t args_cnt) /**< arguments length */
        -:   29:{
        -:   30:  JERRY_UNUSED (call_info_p);
        -:   31:
    #####:   32:  TEST_ASSERT (args_cnt == 1 && jerry_value_is_true (args_p[0]));
    #####:   33:  return jerry_boolean (true);
        -:   34:} /* global_assert */
        -:   35:
        -:   36:static void
    #####:   37:register_assert (void)
        -:   38:{
    #####:   39:  jerry_value_t global_object_value = jerry_current_realm ();
        -:   40:
    #####:   41:  jerry_value_t function_value = jerry_function_external (global_assert);
    #####:   42:  jerry_value_t function_name_value = jerry_string_sz ("assert");
    #####:   43:  jerry_value_t result_value = jerry_object_set (global_object_value, function_name_value, function_value);
        -:   44:
    #####:   45:  jerry_value_free (function_name_value);
    #####:   46:  jerry_value_free (function_value);
    #####:   47:  jerry_value_free (global_object_value);
        -:   48:
    #####:   49:  TEST_ASSERT (jerry_value_is_true (result_value));
    #####:   50:  jerry_value_free (result_value);
    #####:   51:} /* register_assert */
        -:   52:
        -:   53:static void
    #####:   54:compare_specifier (jerry_value_t specifier, /* string value */
        -:   55:                   int id) /* module id */
        -:   56:{
    #####:   57:  jerry_char_t string[] = "XX_module.mjs";
        -:   58:
    #####:   59:  TEST_ASSERT (id >= 1 && id <= 99 && string[0] == 'X' && string[1] == 'X');
        -:   60:
    #####:   61:  string[0] = (jerry_char_t) ((id / 10) + '0');
    #####:   62:  string[1] = (jerry_char_t) ((id % 10) + '0');
        -:   63:
    #####:   64:  jerry_size_t length = (jerry_size_t) (sizeof (string) - 1);
        -:   65:  jerry_char_t buffer[sizeof (string) - 1];
        -:   66:
    #####:   67:  TEST_ASSERT (jerry_value_is_string (specifier));
    #####:   68:  TEST_ASSERT (jerry_string_size (specifier, JERRY_ENCODING_CESU8) == length);
        -:   69:
    #####:   70:  TEST_ASSERT (jerry_string_to_buffer (specifier, JERRY_ENCODING_CESU8, buffer, length) == length);
    #####:   71:  TEST_ASSERT (memcmp (buffer, string, length) == 0);
    #####:   72:} /* compare_specifier */
        -:   73:
        -:   74:static jerry_value_t
    #####:   75:module_import_callback (const jerry_value_t specifier, /* string value */
        -:   76:                        const jerry_value_t user_value, /* user value assigned to the script */
        -:   77:                        void *user_p) /* user pointer */
        -:   78:{
    #####:   79:  TEST_ASSERT (user_p == (void *) &mode);
        -:   80:
    #####:   81:  if (mode != 3)
        -:   82:  {
    #####:   83:    jerry_value_t compare_value = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, user_value, global_user_value);
        -:   84:
    #####:   85:    TEST_ASSERT (jerry_value_is_true (compare_value));
    #####:   86:    jerry_value_free (compare_value);
        -:   87:  }
        -:   88:
    #####:   89:  switch (mode)
        -:   90:  {
    #####:   91:    case 0:
        -:   92:    {
    #####:   93:      compare_specifier (specifier, 1);
    #####:   94:      return jerry_throw_sz (JERRY_ERROR_RANGE, "Err01");
        -:   95:    }
    #####:   96:    case 1:
        -:   97:    {
    #####:   98:      compare_specifier (specifier, 2);
    #####:   99:      return jerry_null ();
        -:  100:    }
    #####:  101:    case 2:
        -:  102:    {
    #####:  103:      compare_specifier (specifier, 3);
        -:  104:
    #####:  105:      jerry_value_t promise_value = jerry_promise ();
        -:  106:      /* Normally this should be a namespace object. */
    #####:  107:      jerry_value_t object_value = jerry_object ();
    #####:  108:      jerry_promise_resolve (promise_value, object_value);
    #####:  109:      jerry_value_free (object_value);
    #####:  110:      return promise_value;
        -:  111:    }
    #####:  112:    case 3:
        -:  113:    {
    #####:  114:      compare_specifier (specifier, 28);
        -:  115:
    #####:  116:      TEST_ASSERT (jerry_value_is_object (user_value));
    #####:  117:      jerry_value_t property_name = jerry_string_sz ("MyProp1");
    #####:  118:      jerry_value_t result = jerry_object_get (user_value, property_name);
    #####:  119:      TEST_ASSERT (jerry_value_is_number (result) && jerry_value_as_number (result) == 3.5);
    #####:  120:      jerry_value_free (result);
    #####:  121:      jerry_value_free (property_name);
    #####:  122:      return jerry_undefined ();
        -:  123:    }
        -:  124:  }
        -:  125:
    #####:  126:  TEST_ASSERT (mode == 4 || mode == 5);
        -:  127:
        -:  128:  jerry_parse_options_t parse_options;
    #####:  129:  parse_options.options = JERRY_PARSE_MODULE;
        -:  130:
    #####:  131:  jerry_value_t parse_result_value = jerry_parse ((const jerry_char_t *) "", 0, &parse_options);
    #####:  132:  TEST_ASSERT (!jerry_value_is_exception (parse_result_value));
        -:  133:
    #####:  134:  jerry_value_t result_value = jerry_module_link (parse_result_value, NULL, NULL);
    #####:  135:  TEST_ASSERT (!jerry_value_is_exception (result_value));
    #####:  136:  jerry_value_free (result_value);
        -:  137:
    #####:  138:  if (mode == 4)
        -:  139:  {
    #####:  140:    result_value = jerry_module_evaluate (parse_result_value);
    #####:  141:    TEST_ASSERT (!jerry_value_is_exception (result_value));
    #####:  142:    jerry_value_free (result_value);
        -:  143:  }
        -:  144:
        -:  145:  return parse_result_value;
        -:  146:} /* module_import_callback */
        -:  147:
        -:  148:static void
    #####:  149:run_script (const char *source_p, /* source code */
        -:  150:            jerry_parse_options_t *parse_options_p, /* parse options */
        -:  151:            bool release_user_value) /* release user value */
        -:  152:{
        -:  153:  jerry_value_t parse_result_value;
        -:  154:
    #####:  155:  parse_result_value = jerry_parse ((const jerry_char_t *) source_p, strlen (source_p), parse_options_p);
    #####:  156:  TEST_ASSERT (!jerry_value_is_exception (parse_result_value));
        -:  157:
    #####:  158:  if (release_user_value)
        -:  159:  {
    #####:  160:    jerry_value_free (parse_options_p->user_value);
    #####:  161:    jerry_heap_gc (JERRY_GC_PRESSURE_HIGH);
        -:  162:  }
        -:  163:
        -:  164:  jerry_value_t result_value;
    #####:  165:  if (parse_options_p->options & JERRY_PARSE_MODULE)
        -:  166:  {
    #####:  167:    result_value = jerry_module_link (parse_result_value, NULL, NULL);
    #####:  168:    TEST_ASSERT (!jerry_value_is_exception (result_value));
    #####:  169:    jerry_value_free (result_value);
        -:  170:
    #####:  171:    result_value = jerry_module_evaluate (parse_result_value);
        -:  172:  }
        -:  173:  else
        -:  174:  {
    #####:  175:    result_value = jerry_run (parse_result_value);
        -:  176:  }
        -:  177:
    #####:  178:  jerry_value_free (parse_result_value);
        -:  179:
    #####:  180:  TEST_ASSERT (!jerry_value_is_exception (result_value));
    #####:  181:  jerry_value_free (result_value);
        -:  182:
    #####:  183:  result_value = jerry_run_jobs ();
    #####:  184:  TEST_ASSERT (!jerry_value_is_exception (result_value));
    #####:  185:  jerry_value_free (result_value);
    #####:  186:} /* run_script */
        -:  187:
        -:  188:int
    #####:  189:main (void)
        -:  190:{
    #####:  191:  jerry_init (JERRY_INIT_EMPTY);
        -:  192:
    #####:  193:  if (!jerry_feature_enabled (JERRY_FEATURE_MODULE))
        -:  194:  {
    #####:  195:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Module is disabled!\n");
    #####:  196:    jerry_cleanup ();
    #####:  197:    return 0;
        -:  198:  }
        -:  199:
    #####:  200:  register_assert ();
    #####:  201:  jerry_module_on_import (module_import_callback, (void *) &mode);
        -:  202:
        -:  203:  jerry_parse_options_t parse_options;
    #####:  204:  parse_options.options = JERRY_PARSE_NO_OPTS;
        -:  205:
    #####:  206:  if (jerry_feature_enabled (JERRY_FEATURE_ERROR_MESSAGES))
        -:  207:  {
    #####:  208:    run_script ("var expected_message = 'Module cannot be instantiated'", &parse_options, false);
        -:  209:  }
        -:  210:  else
        -:  211:  {
    #####:  212:    run_script ("var expected_message = ''", &parse_options, false);
        -:  213:  }
        -:  214:
    #####:  215:  global_user_value = jerry_object ();
    #####:  216:  const char *source_p = TEST_STRING_LITERAL ("import('01_module.mjs').then(\n"
        -:  217:                                              "  function(resolve) { assert(false) },\n"
        -:  218:                                              "  function(reject) {\n"
        -:  219:                                              "    assert(reject instanceof RangeError\n"
        -:  220:                                              "           && reject.message === 'Err01')\n"
        -:  221:                                              "  }\n"
        -:  222:                                              ")");
        -:  223:
    #####:  224:  mode = 0;
    #####:  225:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  226:  parse_options.user_value = global_user_value;
    #####:  227:  run_script (source_p, &parse_options, false);
    #####:  228:  jerry_value_free (global_user_value);
        -:  229:
    #####:  230:  global_user_value = jerry_null ();
    #####:  231:  source_p = TEST_STRING_LITERAL ("var src = \"import('02_module.mjs').then(\\\n"
        -:  232:                                  "  function(resolve) { assert(false) },\\\n"
        -:  233:                                  "  function(reject) {\\\n"
        -:  234:                                  "    assert(reject instanceof RangeError\\\n"
        -:  235:                                  "           && reject.message === expected_message)\\\n"
        -:  236:                                  "  }\\\n"
        -:  237:                                  ")\"\n"
        -:  238:                                  "eval('eval(src)')");
        -:  239:
    #####:  240:  mode = 1;
    #####:  241:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  242:  parse_options.user_value = global_user_value;
    #####:  243:  run_script (source_p, &parse_options, false);
    #####:  244:  jerry_value_free (global_user_value);
        -:  245:
    #####:  246:  global_user_value = jerry_number (5.6);
    #####:  247:  source_p = TEST_STRING_LITERAL ("function f() {\n"
        -:  248:                                  "  return function () {\n"
        -:  249:                                  "    return import('03_module.mjs')\n"
        -:  250:                                  "  }\n"
        -:  251:                                  "}\n"
        -:  252:                                  "export var a = f()().then(\n"
        -:  253:                                  "  function(resolve) { assert(typeof resolve == 'object') },\n"
        -:  254:                                  "  function(reject) { assert(false) }\n"
        -:  255:                                  ")");
        -:  256:
    #####:  257:  mode = 2;
    #####:  258:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE | JERRY_PARSE_MODULE;
    #####:  259:  parse_options.user_value = global_user_value;
    #####:  260:  run_script (source_p, &parse_options, false);
    #####:  261:  jerry_value_free (global_user_value);
        -:  262:
    #####:  263:  global_user_value = jerry_string_sz ("Any string...");
    #####:  264:  source_p = TEST_STRING_LITERAL ("var src = \"import('02_module.mjs').then(\\\n"
        -:  265:                                  "  function(resolve) { assert(typeof resolve == 'object') },\\\n"
        -:  266:                                  "  function(reject) { assert(false) }\\\n"
        -:  267:                                  ")\"\n"
        -:  268:                                  "function f() {\n"
        -:  269:                                  "  eval('(function() { return eval(src) })()')\n"
        -:  270:                                  "}\n"
        -:  271:                                  "f()\n");
        -:  272:
    #####:  273:  for (int i = 0; i < 2; i++)
        -:  274:  {
    #####:  275:    mode = 3;
    #####:  276:    parse_options.options = JERRY_PARSE_HAS_USER_VALUE | (i == 1 ? JERRY_PARSE_MODULE : 0);
    #####:  277:    parse_options.user_value = jerry_object ();
    #####:  278:    jerry_value_t property_name = jerry_string_sz ("MyProp1");
    #####:  279:    jerry_value_t property_value = jerry_number (3.5);
    #####:  280:    jerry_value_t result = jerry_object_set (parse_options.user_value, property_name, property_value);
    #####:  281:    TEST_ASSERT (jerry_value_is_true (result));
    #####:  282:    jerry_value_free (result);
    #####:  283:    jerry_value_free (property_value);
    #####:  284:    jerry_value_free (property_name);
        -:  285:
    #####:  286:    source_p = TEST_STRING_LITERAL ("import('28_module.mjs')");
    #####:  287:    run_script (source_p, &parse_options, true);
        -:  288:  }
        -:  289:
    #####:  290:  mode = 4;
    #####:  291:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  292:  parse_options.user_value = global_user_value;
    #####:  293:  run_script (source_p, &parse_options, false);
    #####:  294:  jerry_value_free (global_user_value);
        -:  295:
    #####:  296:  global_user_value = jerry_function_external (global_assert);
    #####:  297:  source_p = TEST_STRING_LITERAL ("var src = \"import('02_module.mjs').then(\\\n"
        -:  298:                                  "  function(resolve) { assert(false) },\\\n"
        -:  299:                                  "  function(reject) {\\\n"
        -:  300:                                  "    assert(reject instanceof RangeError\\\n"
        -:  301:                                  "           && reject.message === expected_message)\\\n"
        -:  302:                                  "  }\\\n"
        -:  303:                                  ")\"\n"
        -:  304:                                  "export function f() {\n"
        -:  305:                                  "  eval('(function() { return eval(src) })()')\n"
        -:  306:                                  "}\n"
        -:  307:                                  "f()\n");
        -:  308:
    #####:  309:  mode = 5;
    #####:  310:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE | JERRY_PARSE_MODULE;
    #####:  311:  parse_options.user_value = global_user_value;
    #####:  312:  run_script (source_p, &parse_options, false);
    #####:  313:  jerry_value_free (global_user_value);
        -:  314:
    #####:  315:  jerry_cleanup ();
    #####:  316:  return 0;
        -:  317:} /* main */
