        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-symbol-prototype.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-conversion.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-objects.h"
        -:   24:#include "ecma-symbol-object.h"
        -:   25:
        -:   26:#include "jrt.h"
        -:   27:
        -:   28:#if JERRY_ESNEXT
        -:   29:
        -:   30:#define ECMA_BUILTINS_INTERNAL
        -:   31:#include "ecma-builtins-internal.h"
        -:   32:
        -:   33:/**
        -:   34: * This object has a custom dispatch function.
        -:   35: */
        -:   36:#define BUILTIN_CUSTOM_DISPATCH
        -:   37:
        -:   38:/**
        -:   39: * List of built-in routine identifiers.
        -:   40: */
        -:   41:enum
        -:   42:{
        -:   43:  ECMA_SYMBOL_PROTOTYPE_ROUTINE_START = 0,
        -:   44:  ECMA_SYMBOL_PROTOTYPE_VALUE_OF, /**< ECMA-262 v11, 19.4.3.4 */
        -:   45:  ECMA_SYMBOL_PROTOTYPE_TO_PRIMITIVE, /**< ECMA-262 v11, 19.4.3.5 */
        -:   46:  ECMA_SYMBOL_PROTOTYPE_TO_STRING, /**< ECMA-262 v11, 19.4.3.3 */
        -:   47:  ECMA_SYMBOL_PROTOTYPE_DESCRIPTION, /**< ECMA-262 v11, 19.4.3.2 */
        -:   48:};
        -:   49:
        -:   50:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-symbol-prototype.inc.h"
        -:   51:#define BUILTIN_UNDERSCORED_ID  symbol_prototype
        -:   52:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   53:
        -:   54:/** \addtogroup ecma ECMA
        -:   55: * @{
        -:   56: *
        -:   57: * \addtogroup ecmabuiltins
        -:   58: * @{
        -:   59: *
        -:   60: * \addtogroup symbolprototype ECMA Symbol prototype object built-in
        -:   61: * @{
        -:   62: */
        -:   63:
        -:   64:/**
        -:   65: * Dispatcher of the Symbol built-in's routines
        -:   66: *
        -:   67: * @return ecma value
        -:   68: *         Returned value must be freed with ecma_free_value.
        -:   69: */
        -:   70:ecma_value_t
    #####:   71:ecma_builtin_symbol_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:   72:                                                ecma_value_t this_arg, /**< 'this' argument value */
        -:   73:                                                const ecma_value_t arguments_list[], /**< list of arguments
        -:   74:                                                                                      *   passed to routine */
        -:   75:                                                uint32_t arguments_number) /**< length of arguments' list */
        -:   76:{
        -:   77:  JERRY_UNUSED_2 (arguments_list, arguments_number);
        -:   78:
    #####:   79:  ecma_value_t sym = ecma_symbol_this_value (this_arg);
        -:   80:
    #####:   81:  if (ECMA_IS_VALUE_ERROR (sym))
        -:   82:  {
    #####:   83:    return sym;
        -:   84:  }
        -:   85:
    #####:   86:  if (builtin_routine_id < ECMA_SYMBOL_PROTOTYPE_TO_STRING)
        -:   87:  {
    #####:   88:    return ecma_copy_value (sym);
        -:   89:  }
        -:   90:
    #####:   91:  if (builtin_routine_id == ECMA_SYMBOL_PROTOTYPE_TO_STRING)
        -:   92:  {
    #####:   93:    return ecma_get_symbol_descriptive_string (sym);
        -:   94:  }
        -:   95:
    #####:   96:  JERRY_ASSERT (builtin_routine_id == ECMA_SYMBOL_PROTOTYPE_DESCRIPTION);
    #####:   97:  ecma_string_t *symbol_p = ecma_get_symbol_from_value (sym);
    #####:   98:  ecma_value_t desc = ecma_get_symbol_description (symbol_p);
    #####:   99:  if (ecma_is_value_undefined (desc))
        -:  100:  {
    #####:  101:    return desc;
        -:  102:  }
        -:  103:
    #####:  104:  ecma_string_t *desc_p = ecma_get_string_from_value (desc);
    #####:  105:  ecma_ref_ecma_string (desc_p);
    #####:  106:  return desc;
        -:  107:} /* ecma_builtin_symbol_prototype_dispatch_routine */
        -:  108:
        -:  109:/**
        -:  110: * @}
        -:  111: * @}
        -:  112: * @}
        -:  113: */
        -:  114:
        -:  115:#endif /* JERRY_ESNEXT */
