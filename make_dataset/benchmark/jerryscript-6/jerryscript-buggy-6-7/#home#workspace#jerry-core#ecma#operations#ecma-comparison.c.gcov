        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-comparison.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-comparison.h"
        -:   17:
        -:   18:#include "ecma-bigint.h"
        -:   19:#include "ecma-conversion.h"
        -:   20:#include "ecma-globals.h"
        -:   21:#include "ecma-objects.h"
        -:   22:
        -:   23:#include "jrt.h"
        -:   24:
        -:   25:/** \addtogroup ecma ECMA
        -:   26: * @{
        -:   27: *
        -:   28: * \addtogroup ecmacomparison ECMA comparison
        -:   29: * @{
        -:   30: */
        -:   31:
        -:   32:/**
        -:   33: * ECMA abstract equality comparison routine.
        -:   34: *
        -:   35: * See also: ECMA-262 v5, 11.9.3
        -:   36: *
        -:   37: * Note:
        -:   38: *      This function might raise an exception, so the
        -:   39: *      returned value must be freed with ecma_free_value.
        -:   40: *
        -:   41: * @return true - if values are equal,
        -:   42: *         false - otherwise
        -:   43: *         error - in case of any problems
        -:   44: */
        -:   45:ecma_value_t
    #####:   46:ecma_op_abstract_equality_compare (ecma_value_t x, /**< first operand */
        -:   47:                                   ecma_value_t y) /**< second operand */
        -:   48:{
    #####:   49:  if (x == y)
        -:   50:  {
    #####:   51:    return ECMA_VALUE_TRUE;
        -:   52:  }
        -:   53:
    #####:   54:  if (ecma_are_values_integer_numbers (x, y))
        -:   55:  {
        -:   56:    /* Note: the (x == y) comparison captures the true case. */
    #####:   57:    return ECMA_VALUE_FALSE;
        -:   58:  }
        -:   59:
    #####:   60:  if (ecma_is_value_number (x))
        -:   61:  {
    #####:   62:    if (ecma_is_value_number (y))
        -:   63:    {
        -:   64:      /* 1.c */
    #####:   65:      ecma_number_t x_num = ecma_get_number_from_value (x);
    #####:   66:      ecma_number_t y_num = ecma_get_number_from_value (y);
        -:   67:
    #####:   68:      bool is_x_equal_to_y = (x_num == y_num);
        -:   69:
        -:   70:#ifndef JERRY_NDEBUG
        -:   71:      bool is_x_equal_to_y_check;
        -:   72:
    #####:   73:      if (ecma_number_is_nan (x_num) || ecma_number_is_nan (y_num))
        -:   74:      {
    #####:   75:        is_x_equal_to_y_check = false;
        -:   76:      }
    #####:   77:      else if (x_num == y_num || (ecma_number_is_zero (x_num) && ecma_number_is_zero (y_num)))
        -:   78:      {
    #####:   79:        is_x_equal_to_y_check = true;
        -:   80:      }
        -:   81:      else
        -:   82:      {
    #####:   83:        is_x_equal_to_y_check = false;
        -:   84:      }
        -:   85:
    #####:   86:      JERRY_ASSERT (is_x_equal_to_y == is_x_equal_to_y_check);
        -:   87:#endif /* !JERRY_NDEBUG */
        -:   88:
    #####:   89:      return ecma_make_boolean_value (is_x_equal_to_y);
        -:   90:    }
        -:   91:
        -:   92:    /* Swap values. */
    #####:   93:    x ^= y;
    #####:   94:    y ^= x;
    #####:   95:    x ^= y;
        -:   96:  }
        -:   97:
    #####:   98:  if (ecma_is_value_string (x))
        -:   99:  {
    #####:  100:    if (ecma_is_value_string (y))
        -:  101:    {
        -:  102:      /* 1., d. */
    #####:  103:      ecma_string_t *x_str_p = ecma_get_string_from_value (x);
    #####:  104:      ecma_string_t *y_str_p = ecma_get_string_from_value (y);
        -:  105:
    #####:  106:      bool is_equal = ecma_compare_ecma_strings (x_str_p, y_str_p);
        -:  107:
    #####:  108:      return ecma_make_boolean_value (is_equal);
        -:  109:    }
        -:  110:
    #####:  111:    if (ecma_is_value_number (y))
        -:  112:    {
        -:  113:      /* 4. */
    #####:  114:      ecma_number_t num;
    #####:  115:      ecma_value_t x_num_value = ecma_op_to_number (x, &num);
        -:  116:
    #####:  117:      if (ECMA_IS_VALUE_ERROR (x_num_value))
        -:  118:      {
    #####:  119:        return x_num_value;
        -:  120:      }
    #####:  121:      ecma_value_t num_value = ecma_make_number_value (num);
    #####:  122:      ecma_value_t compare_result = ecma_op_abstract_equality_compare (num_value, y);
        -:  123:
    #####:  124:      ecma_free_value (num_value);
    #####:  125:      return compare_result;
        -:  126:    }
        -:  127:
        -:  128:    /* Swap values. */
    #####:  129:    x ^= y;
    #####:  130:    y ^= x;
    #####:  131:    x ^= y;
        -:  132:  }
        -:  133:
    #####:  134:  if (ecma_is_value_boolean (y))
        -:  135:  {
    #####:  136:    if (ecma_is_value_boolean (x))
        -:  137:    {
        -:  138:      /* 1., e. */
        -:  139:      /* Note: the (x == y) comparison captures the true case. */
    #####:  140:      return ECMA_VALUE_FALSE;
        -:  141:    }
        -:  142:
        -:  143:    /* 7. */
    #####:  144:    return ecma_op_abstract_equality_compare (x, ecma_make_integer_value (ecma_is_value_true (y) ? 1 : 0));
        -:  145:  }
        -:  146:
    #####:  147:  if (ecma_is_value_boolean (x))
        -:  148:  {
        -:  149:    /* 6. */
    #####:  150:    return ecma_op_abstract_equality_compare (ecma_make_integer_value (ecma_is_value_true (x) ? 1 : 0), y);
        -:  151:  }
        -:  152:
        -:  153:#if JERRY_BUILTIN_BIGINT
    #####:  154:  if (JERRY_UNLIKELY (ecma_is_value_bigint (x)))
        -:  155:  {
    #####:  156:    if (ecma_is_value_bigint (y))
        -:  157:    {
    #####:  158:      return ecma_make_boolean_value (ecma_bigint_is_equal_to_bigint (x, y));
        -:  159:    }
        -:  160:
    #####:  161:    if (ecma_is_value_string (y))
        -:  162:    {
    #####:  163:      ecma_value_t bigint = ecma_bigint_parse_string_value (y, ECMA_BIGINT_PARSE_DISALLOW_SYNTAX_ERROR);
        -:  164:
    #####:  165:      if (ECMA_IS_VALUE_ERROR (bigint) || bigint == ECMA_VALUE_FALSE)
        -:  166:      {
    #####:  167:        return bigint;
        -:  168:      }
        -:  169:
    #####:  170:      JERRY_ASSERT (ecma_is_value_bigint (bigint));
        -:  171:
    #####:  172:      ecma_value_t result = ecma_make_boolean_value (ecma_bigint_is_equal_to_bigint (x, bigint));
        -:  173:
    #####:  174:      ecma_free_value (bigint);
    #####:  175:      return result;
        -:  176:    }
        -:  177:
    #####:  178:    if (ecma_is_value_number (y))
        -:  179:    {
    #####:  180:      return ecma_make_boolean_value (ecma_bigint_is_equal_to_number (x, ecma_get_number_from_value (y)));
        -:  181:    }
        -:  182:
        -:  183:    /* Swap values. */
    #####:  184:    x ^= y;
    #####:  185:    y ^= x;
    #####:  186:    x ^= y;
        -:  187:  }
        -:  188:#endif /* JERRY_BUILTIN_BIGINT */
        -:  189:
    #####:  190:  if (ecma_is_value_undefined (x) || ecma_is_value_null (x))
        -:  191:  {
        -:  192:    /* 1. a., b. */
        -:  193:    /* 2., 3. */
    #####:  194:    bool is_equal = ecma_is_value_undefined (y) || ecma_is_value_null (y);
        -:  195:
    #####:  196:    return ecma_make_boolean_value (is_equal);
        -:  197:  }
        -:  198:
        -:  199:#if JERRY_ESNEXT
    #####:  200:  if (JERRY_UNLIKELY (ecma_is_value_symbol (x)))
        -:  201:  {
    #####:  202:    if (!ecma_is_value_object (y))
        -:  203:    {
    #####:  204:      return ECMA_VALUE_FALSE;
        -:  205:    }
        -:  206:
        -:  207:    /* Swap values. */
    #####:  208:    x ^= y;
    #####:  209:    y ^= x;
    #####:  210:    x ^= y;
        -:  211:  }
        -:  212:#endif /* JERRY_ESNEXT */
        -:  213:
    #####:  214:  JERRY_ASSERT (ecma_is_value_object (x));
        -:  215:
    #####:  216:  if (ecma_is_value_string (y)
        -:  217:#if JERRY_ESNEXT
    #####:  218:      || ecma_is_value_symbol (y)
        -:  219:#endif /* JERRY_ESNEXT */
        -:  220:#if JERRY_BUILTIN_BIGINT
    #####:  221:      || ecma_is_value_bigint (y)
        -:  222:#endif /* JERRY_BUILTIN_BIGINT */
    #####:  223:      || ecma_is_value_number (y))
        -:  224:  {
        -:  225:    /* 9. */
    #####:  226:    ecma_object_t *obj_p = ecma_get_object_from_value (x);
        -:  227:
    #####:  228:    ecma_value_t def_value = ecma_op_object_default_value (obj_p, ECMA_PREFERRED_TYPE_NO);
        -:  229:
    #####:  230:    if (ECMA_IS_VALUE_ERROR (def_value))
        -:  231:    {
    #####:  232:      return def_value;
        -:  233:    }
        -:  234:
    #####:  235:    ecma_value_t compare_result = ecma_op_abstract_equality_compare (def_value, y);
        -:  236:
    #####:  237:    ecma_free_value (def_value);
        -:  238:
    #####:  239:    return compare_result;
        -:  240:  }
        -:  241:
    #####:  242:  return ECMA_VALUE_FALSE;
        -:  243:} /* ecma_op_abstract_equality_compare */
        -:  244:
        -:  245:/**
        -:  246: * ECMA strict equality comparison routine.
        -:  247: *
        -:  248: * See also: ECMA-262 v5, 11.9.6
        -:  249: *
        -:  250: * @return true - if values are strict equal,
        -:  251: *         false - otherwise
        -:  252: */
        -:  253:bool
    #####:  254:ecma_op_strict_equality_compare (ecma_value_t x, /**< first operand */
        -:  255:                                 ecma_value_t y) /**< second operand */
        -:  256:{
    #####:  257:  if (ecma_is_value_direct (x) || ecma_is_value_direct (y)
        -:  258:#if JERRY_ESNEXT
    #####:  259:      || ecma_is_value_symbol (x) || ecma_is_value_symbol (y)
        -:  260:#endif /* JERRY_ESNEXT */
    #####:  261:      || ecma_is_value_object (x) || ecma_is_value_object (y))
        -:  262:  {
    #####:  263:    JERRY_ASSERT (!ecma_is_value_direct (x) || ecma_is_value_undefined (x) || ecma_is_value_null (x)
        -:  264:                  || ecma_is_value_boolean (x) || ecma_is_value_integer_number (x));
        -:  265:
    #####:  266:    JERRY_ASSERT (!ecma_is_value_direct (y) || ecma_is_value_undefined (y) || ecma_is_value_null (y)
        -:  267:                  || ecma_is_value_boolean (y) || ecma_is_value_integer_number (y));
        -:  268:
    #####:  269:    if ((x != ecma_make_integer_value (0) || !ecma_is_value_float_number (y))
    #####:  270:        && (y != ecma_make_integer_value (0) || !ecma_is_value_float_number (x)))
        -:  271:    {
    #####:  272:      return (x == y);
        -:  273:    }
        -:  274:
        -:  275:    /* The +0 === -0 case handled below. */
        -:  276:  }
        -:  277:
    #####:  278:  JERRY_ASSERT (ecma_is_value_number (x) || ecma_is_value_string (x) || ecma_is_value_bigint (x));
    #####:  279:  JERRY_ASSERT (ecma_is_value_number (y) || ecma_is_value_string (y) || ecma_is_value_bigint (y));
        -:  280:
    #####:  281:  if (ecma_is_value_string (x))
        -:  282:  {
    #####:  283:    if (!ecma_is_value_string (y))
        -:  284:    {
    #####:  285:      return false;
        -:  286:    }
        -:  287:
    #####:  288:    ecma_string_t *x_str_p = ecma_get_string_from_value (x);
    #####:  289:    ecma_string_t *y_str_p = ecma_get_string_from_value (y);
        -:  290:
    #####:  291:    return ecma_compare_ecma_strings (x_str_p, y_str_p);
        -:  292:  }
        -:  293:
        -:  294:#if JERRY_BUILTIN_BIGINT
    #####:  295:  if (JERRY_UNLIKELY (ecma_is_value_bigint (x)))
        -:  296:  {
    #####:  297:    if (!ecma_is_value_bigint (y))
        -:  298:    {
    #####:  299:      return false;
        -:  300:    }
        -:  301:
    #####:  302:    return ecma_bigint_is_equal_to_bigint (x, y);
        -:  303:  }
        -:  304:#endif /* JERRY_BUILTIN_BIGINT */
        -:  305:
    #####:  306:  if (!ecma_is_value_number (y))
        -:  307:  {
    #####:  308:    return false;
        -:  309:  }
        -:  310:
    #####:  311:  ecma_number_t x_num = ecma_get_number_from_value (x);
    #####:  312:  ecma_number_t y_num = ecma_get_number_from_value (y);
        -:  313:
    #####:  314:  bool is_x_equal_to_y = (x_num == y_num);
        -:  315:
        -:  316:#ifndef JERRY_NDEBUG
        -:  317:  bool is_x_equal_to_y_check;
        -:  318:
    #####:  319:  if (ecma_number_is_nan (x_num) || ecma_number_is_nan (y_num))
        -:  320:  {
    #####:  321:    is_x_equal_to_y_check = false;
        -:  322:  }
    #####:  323:  else if (x_num == y_num || (ecma_number_is_zero (x_num) && ecma_number_is_zero (y_num)))
        -:  324:  {
    #####:  325:    is_x_equal_to_y_check = true;
        -:  326:  }
        -:  327:  else
        -:  328:  {
    #####:  329:    is_x_equal_to_y_check = false;
        -:  330:  }
        -:  331:
    #####:  332:  JERRY_ASSERT (is_x_equal_to_y == is_x_equal_to_y_check);
        -:  333:#endif /* !JERRY_NDEBUG */
        -:  334:
    #####:  335:  return is_x_equal_to_y;
        -:  336:} /* ecma_op_strict_equality_compare */
        -:  337:
        -:  338:/**
        -:  339: * ECMA abstract relational comparison routine.
        -:  340: *
        -:  341: * See also: ECMA-262 v5, 11.8.5
        -:  342: *
        -:  343: * @return ecma value
        -:  344: *         Returned value must be freed with ecma_free_value
        -:  345: */
        -:  346:ecma_value_t
    #####:  347:ecma_op_abstract_relational_compare (ecma_value_t x, /**< first operand */
        -:  348:                                     ecma_value_t y, /**< second operand */
        -:  349:                                     bool left_first) /**< 'LeftFirst' flag */
        -:  350:{
    #####:  351:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -:  352:
        -:  353:  /* 1., 2. */
    #####:  354:  ecma_value_t prim_first_converted_value = ecma_op_to_primitive (x, ECMA_PREFERRED_TYPE_NUMBER);
    #####:  355:  if (ECMA_IS_VALUE_ERROR (prim_first_converted_value))
        -:  356:  {
    #####:  357:    return prim_first_converted_value;
        -:  358:  }
        -:  359:
    #####:  360:  ecma_value_t prim_second_converted_value = ecma_op_to_primitive (y, ECMA_PREFERRED_TYPE_NUMBER);
    #####:  361:  if (ECMA_IS_VALUE_ERROR (prim_second_converted_value))
        -:  362:  {
    #####:  363:    ecma_free_value (prim_first_converted_value);
    #####:  364:    return prim_second_converted_value;
        -:  365:  }
        -:  366:
    #####:  367:  ecma_value_t px = left_first ? prim_first_converted_value : prim_second_converted_value;
    #####:  368:  ecma_value_t py = left_first ? prim_second_converted_value : prim_first_converted_value;
        -:  369:
    #####:  370:  const bool is_px_string = ecma_is_value_string (px);
    #####:  371:  const bool is_py_string = ecma_is_value_string (py);
        -:  372:
    #####:  373:  if (!(is_px_string && is_py_string))
        -:  374:  {
        -:  375:#if JERRY_BUILTIN_BIGINT
    #####:  376:    if (JERRY_LIKELY (!ecma_is_value_bigint (px)) && JERRY_LIKELY (!ecma_is_value_bigint (py)))
    #####:  377:    {
        -:  378:#endif /* JERRY_BUILTIN_BIGINT */
        -:  379:      /* 3. */
        -:  380:
        -:  381:      /* a. */
        -:  382:
    #####:  383:      ecma_number_t nx;
    #####:  384:      ecma_number_t ny;
        -:  385:
    #####:  386:      if (ECMA_IS_VALUE_ERROR (ecma_op_to_number (px, &nx)) || ECMA_IS_VALUE_ERROR (ecma_op_to_number (py, &ny)))
        -:  387:      {
    #####:  388:        ret_value = ECMA_VALUE_ERROR;
    #####:  389:        goto end;
        -:  390:      }
        -:  391:
        -:  392:      /* b. */
    #####:  393:      if (ecma_number_is_nan (nx) || ecma_number_is_nan (ny))
        -:  394:      {
        -:  395:        /* c., d. */
    #####:  396:        ret_value = ECMA_VALUE_UNDEFINED;
        -:  397:      }
        -:  398:      else
        -:  399:      {
    #####:  400:        bool is_x_less_than_y = (nx < ny);
        -:  401:
        -:  402:#ifndef JERRY_NDEBUG
        -:  403:        bool is_x_less_than_y_check;
        -:  404:
    #####:  405:        if (nx == ny || (ecma_number_is_zero (nx) && ecma_number_is_zero (ny)))
        -:  406:        {
        -:  407:          /* e., f., g. */
    #####:  408:          is_x_less_than_y_check = false;
        -:  409:        }
    #####:  410:        else if (ecma_number_is_infinity (nx) && !ecma_number_is_negative (nx))
        -:  411:        {
        -:  412:          /* h. */
    #####:  413:          is_x_less_than_y_check = false;
        -:  414:        }
    #####:  415:        else if (ecma_number_is_infinity (ny) && !ecma_number_is_negative (ny))
        -:  416:        {
        -:  417:          /* i. */
    #####:  418:          is_x_less_than_y_check = true;
        -:  419:        }
    #####:  420:        else if (ecma_number_is_infinity (ny) && ecma_number_is_negative (ny))
        -:  421:        {
        -:  422:          /* j. */
    #####:  423:          is_x_less_than_y_check = false;
        -:  424:        }
    #####:  425:        else if (ecma_number_is_infinity (nx) && ecma_number_is_negative (nx))
        -:  426:        {
        -:  427:          /* k. */
    #####:  428:          is_x_less_than_y_check = true;
        -:  429:        }
        -:  430:        else
        -:  431:        {
        -:  432:          /* l. */
    #####:  433:          JERRY_ASSERT (!ecma_number_is_nan (nx) && !ecma_number_is_infinity (nx));
    #####:  434:          JERRY_ASSERT (!ecma_number_is_nan (ny) && !ecma_number_is_infinity (ny));
    #####:  435:          JERRY_ASSERT (!(ecma_number_is_zero (nx) && ecma_number_is_zero (ny)));
        -:  436:
    #####:  437:          if (nx < ny)
        -:  438:          {
    #####:  439:            is_x_less_than_y_check = true;
        -:  440:          }
        -:  441:          else
        -:  442:          {
    #####:  443:            is_x_less_than_y_check = false;
        -:  444:          }
        -:  445:        }
        -:  446:
    #####:  447:        JERRY_ASSERT (is_x_less_than_y_check == is_x_less_than_y);
        -:  448:#endif /* !JERRY_NDEBUG */
        -:  449:
    #####:  450:        ret_value = ecma_make_boolean_value (is_x_less_than_y);
        -:  451:      }
        -:  452:#if JERRY_BUILTIN_BIGINT
        -:  453:    }
        -:  454:    else
        -:  455:    {
    #####:  456:      bool invert_result = false;
    #####:  457:      int compare_result = 0;
        -:  458:
    #####:  459:      if (!ecma_is_value_bigint (px))
        -:  460:      {
    #####:  461:        ecma_value_t tmp = px;
    #####:  462:        px = py;
    #####:  463:        py = tmp;
    #####:  464:        invert_result = true;
        -:  465:      }
        -:  466:
    #####:  467:      JERRY_ASSERT (ecma_is_value_bigint (px));
        -:  468:
    #####:  469:      if (ecma_is_value_bigint (py))
        -:  470:      {
    #####:  471:        compare_result = ecma_bigint_compare_to_bigint (px, py);
        -:  472:      }
    #####:  473:      else if (ecma_is_value_string (py))
        -:  474:      {
    #####:  475:        ret_value = ecma_bigint_parse_string_value (py, ECMA_BIGINT_PARSE_DISALLOW_SYNTAX_ERROR);
        -:  476:
    #####:  477:        if (!ECMA_IS_VALUE_ERROR (ret_value))
        -:  478:        {
    #####:  479:          if (ret_value == ECMA_VALUE_FALSE)
        -:  480:          {
    #####:  481:            ret_value = ECMA_VALUE_UNDEFINED;
        -:  482:          }
        -:  483:          else
        -:  484:          {
    #####:  485:            compare_result = ecma_bigint_compare_to_bigint (px, ret_value);
    #####:  486:            ecma_free_value (ret_value);
    #####:  487:            ret_value = ECMA_VALUE_EMPTY;
        -:  488:          }
        -:  489:        }
        -:  490:      }
        -:  491:      else
        -:  492:      {
    #####:  493:        ecma_number_t ny;
    #####:  494:        if (ECMA_IS_VALUE_ERROR (ecma_op_to_number (py, &ny)))
        -:  495:        {
    #####:  496:          ret_value = ECMA_VALUE_ERROR;
    #####:  497:          goto end;
        -:  498:        }
        -:  499:
    #####:  500:        if (ecma_number_is_nan (ny))
        -:  501:        {
    #####:  502:          ret_value = ECMA_VALUE_UNDEFINED;
        -:  503:        }
        -:  504:        else
        -:  505:        {
    #####:  506:          compare_result = ecma_bigint_compare_to_number (px, ny);
        -:  507:        }
        -:  508:      }
        -:  509:
    #####:  510:      if (ret_value == ECMA_VALUE_EMPTY)
        -:  511:      {
    #####:  512:        if (invert_result)
        -:  513:        {
    #####:  514:          compare_result = -compare_result;
        -:  515:        }
        -:  516:
    #####:  517:        ret_value = ecma_make_boolean_value (compare_result < 0);
        -:  518:      }
        -:  519:    }
        -:  520:#endif /* JERRY_BUILTIN_BIGINT */
        -:  521:  }
        -:  522:  else
        -:  523:  { /* 4. */
    #####:  524:    JERRY_ASSERT (is_px_string && is_py_string);
        -:  525:
    #####:  526:    ecma_string_t *str_x_p = ecma_get_string_from_value (px);
    #####:  527:    ecma_string_t *str_y_p = ecma_get_string_from_value (py);
        -:  528:
    #####:  529:    bool is_px_less = ecma_compare_ecma_strings_relational (str_x_p, str_y_p);
        -:  530:
    #####:  531:    ret_value = ecma_make_boolean_value (is_px_less);
        -:  532:  }
        -:  533:
    #####:  534:end:
    #####:  535:  ecma_free_value (prim_second_converted_value);
    #####:  536:  ecma_free_value (prim_first_converted_value);
        -:  537:
    #####:  538:  return ret_value;
        -:  539:} /* ecma_op_abstract_relational_compare */
        -:  540:
        -:  541:/**
        -:  542: * @}
        -:  543: * @}
        -:  544: */
