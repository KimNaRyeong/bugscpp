        -:    0:Source:/home/workspace/jerry-core/ecma/base/ecma-literal-storage.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-literal-storage.h"
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-big-uint.h"
        -:   20:#include "ecma-bigint.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:
        -:   23:#include "jcontext.h"
        -:   24:
        -:   25:/** \addtogroup ecma ECMA
        -:   26: * @{
        -:   27: *
        -:   28: * \addtogroup ecmalitstorage Literal storage
        -:   29: * @{
        -:   30: */
        -:   31:
        -:   32:#if JERRY_ESNEXT
        -:   33:/**
        -:   34: * Free symbol list
        -:   35: */
        -:   36:static void
        1:   37:ecma_free_symbol_list (jmem_cpointer_t symbol_list_cp) /**< symbol list */
        -:   38:{
        2:   39:  while (symbol_list_cp != JMEM_CP_NULL)
        -:   40:  {
    #####:   41:    ecma_lit_storage_item_t *symbol_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t, symbol_list_cp);
        -:   42:
    #####:   43:    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:   44:    {
    #####:   45:      if (symbol_list_p->values[i] != JMEM_CP_NULL)
        -:   46:      {
    #####:   47:        ecma_string_t *string_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_string_t, symbol_list_p->values[i]);
        -:   48:
    #####:   49:        JERRY_ASSERT (ECMA_STRING_IS_REF_EQUALS_TO_ONE (string_p));
    #####:   50:        ecma_deref_ecma_string (string_p);
        -:   51:      }
        -:   52:    }
        -:   53:
    #####:   54:    jmem_cpointer_t next_item_cp = symbol_list_p->next_cp;
    #####:   55:    jmem_pools_free (symbol_list_p, sizeof (ecma_lit_storage_item_t));
    #####:   56:    symbol_list_cp = next_item_cp;
        -:   57:  }
        1:   58:} /* ecma_free_symbol_list */
        -:   59:#endif /* JERRY_ESNEXT */
        -:   60:
        -:   61:/**
        -:   62: * Free string list
        -:   63: */
        -:   64:static void
        1:   65:ecma_free_string_list (jmem_cpointer_t string_list_cp) /**< string list */
        -:   66:{
        3:   67:  while (string_list_cp != JMEM_CP_NULL)
        -:   68:  {
        1:   69:    ecma_lit_storage_item_t *string_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t, string_list_cp);
        -:   70:
        4:   71:    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:   72:    {
        3:   73:      if (string_list_p->values[i] != JMEM_CP_NULL)
        -:   74:      {
        2:   75:        ecma_string_t *string_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_string_t, string_list_p->values[i]);
        -:   76:
        2:   77:        JERRY_ASSERT (ECMA_STRING_IS_REF_EQUALS_TO_ONE (string_p));
        2:   78:        ecma_destroy_ecma_string (string_p);
        -:   79:      }
        -:   80:    }
        -:   81:
        1:   82:    jmem_cpointer_t next_item_cp = string_list_p->next_cp;
        1:   83:    jmem_pools_free (string_list_p, sizeof (ecma_lit_storage_item_t));
        1:   84:    string_list_cp = next_item_cp;
        -:   85:  }
        1:   86:} /* ecma_free_string_list */
        -:   87:
        -:   88:/**
        -:   89: * Free number list
        -:   90: */
        -:   91:static void
        1:   92:ecma_free_number_list (jmem_cpointer_t number_list_cp) /**< number list */
        -:   93:{
        3:   94:  while (number_list_cp != JMEM_CP_NULL)
        -:   95:  {
        1:   96:    ecma_lit_storage_item_t *number_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t, number_list_cp);
        -:   97:
        4:   98:    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:   99:    {
        3:  100:      if (number_list_p->values[i] != JMEM_CP_NULL)
        -:  101:      {
        1:  102:        ecma_dealloc_number (JMEM_CP_GET_NON_NULL_POINTER (ecma_number_t, number_list_p->values[i]));
        -:  103:      }
        -:  104:    }
        -:  105:
        1:  106:    jmem_cpointer_t next_item_cp = number_list_p->next_cp;
        1:  107:    jmem_pools_free (number_list_p, sizeof (ecma_lit_storage_item_t));
        1:  108:    number_list_cp = next_item_cp;
        -:  109:  }
        1:  110:} /* ecma_free_number_list */
        -:  111:
        -:  112:#if JERRY_BUILTIN_BIGINT
        -:  113:
        -:  114:/**
        -:  115: * Free bigint list
        -:  116: */
        -:  117:static void
        1:  118:ecma_free_bigint_list (jmem_cpointer_t bigint_list_cp) /**< bigint list */
        -:  119:{
        2:  120:  while (bigint_list_cp != JMEM_CP_NULL)
        -:  121:  {
    #####:  122:    ecma_lit_storage_item_t *bigint_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t, bigint_list_cp);
        -:  123:
    #####:  124:    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:  125:    {
    #####:  126:      if (bigint_list_p->values[i] != JMEM_CP_NULL)
        -:  127:      {
    #####:  128:        ecma_extended_primitive_t *bigint_p =
    #####:  129:          JMEM_CP_GET_NON_NULL_POINTER (ecma_extended_primitive_t, bigint_list_p->values[i]);
    #####:  130:        JERRY_ASSERT (ECMA_EXTENDED_PRIMITIVE_IS_REF_EQUALS_TO_ONE (bigint_p));
    #####:  131:        ecma_deref_bigint (bigint_p);
        -:  132:      }
        -:  133:    }
        -:  134:
    #####:  135:    jmem_cpointer_t next_item_cp = bigint_list_p->next_cp;
    #####:  136:    jmem_pools_free (bigint_list_p, sizeof (ecma_lit_storage_item_t));
    #####:  137:    bigint_list_cp = next_item_cp;
        -:  138:  }
        1:  139:} /* ecma_free_bigint_list */
        -:  140:
        -:  141:#endif /* JERRY_BUILTIN_BIGINT */
        -:  142:
        -:  143:/**
        -:  144: * Finalize literal storage
        -:  145: */
        -:  146:void
        1:  147:ecma_finalize_lit_storage (void)
        -:  148:{
        -:  149:#if JERRY_ESNEXT
        1:  150:  ecma_free_symbol_list (JERRY_CONTEXT (symbol_list_first_cp));
        -:  151:#endif /* JERRY_ESNEXT */
        1:  152:  ecma_free_string_list (JERRY_CONTEXT (string_list_first_cp));
        1:  153:  ecma_free_number_list (JERRY_CONTEXT (number_list_first_cp));
        -:  154:#if JERRY_BUILTIN_BIGINT
        1:  155:  ecma_free_bigint_list (JERRY_CONTEXT (bigint_list_first_cp));
        -:  156:#endif /* JERRY_BUILTIN_BIGINT */
        1:  157:} /* ecma_finalize_lit_storage */
        -:  158:
        -:  159:/**
        -:  160: * Find or create a literal string.
        -:  161: *
        -:  162: * @return ecma_string_t compressed pointer
        -:  163: */
        -:  164:ecma_value_t
        6:  165:ecma_find_or_create_literal_string (const lit_utf8_byte_t *chars_p, /**< string to be searched */
        -:  166:                                    lit_utf8_size_t size, /**< size of the string */
        -:  167:                                    bool is_ascii) /**< encode of the string */
        -:  168:{
        6:  169:  ecma_string_t *string_p =
        6:  170:    (is_ascii ? ecma_new_ecma_string_from_ascii (chars_p, size) : ecma_new_ecma_string_from_utf8 (chars_p, size));
        -:  171:
        6:  172:  if (ECMA_IS_DIRECT_STRING (string_p))
        -:  173:  {
        4:  174:    return ecma_make_string_value (string_p);
        -:  175:  }
        -:  176:
        2:  177:  jmem_cpointer_t string_list_cp = JERRY_CONTEXT (string_list_first_cp);
        2:  178:  jmem_cpointer_t *empty_cpointer_p = NULL;
        -:  179:
        5:  180:  while (string_list_cp != JMEM_CP_NULL)
        -:  181:  {
        1:  182:    ecma_lit_storage_item_t *string_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t, string_list_cp);
        -:  183:
        4:  184:    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:  185:    {
        3:  186:      if (string_list_p->values[i] == JMEM_CP_NULL)
        -:  187:      {
        2:  188:        if (empty_cpointer_p == NULL)
        -:  189:        {
        1:  190:          empty_cpointer_p = string_list_p->values + i;
        -:  191:        }
        -:  192:      }
        -:  193:      else
        -:  194:      {
        1:  195:        ecma_string_t *value_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_string_t, string_list_p->values[i]);
        -:  196:
        1:  197:        if (ecma_compare_ecma_strings (string_p, value_p))
        -:  198:        {
        -:  199:          /* Return with string if found in the list. */
    #####:  200:          ecma_deref_ecma_string (string_p);
    #####:  201:          return ecma_make_string_value (value_p);
        -:  202:        }
        -:  203:      }
        -:  204:    }
        -:  205:
        1:  206:    string_list_cp = string_list_p->next_cp;
        -:  207:  }
        -:  208:
        2:  209:  ECMA_SET_STRING_AS_STATIC (string_p);
        -:  210:  jmem_cpointer_t result;
        2:  211:  JMEM_CP_SET_NON_NULL_POINTER (result, string_p);
        -:  212:
        2:  213:  if (empty_cpointer_p != NULL)
        -:  214:  {
        1:  215:    *empty_cpointer_p = result;
        1:  216:    return ecma_make_string_value (string_p);
        -:  217:  }
        -:  218:
        -:  219:  ecma_lit_storage_item_t *new_item_p;
        1:  220:  new_item_p = (ecma_lit_storage_item_t *) jmem_pools_alloc (sizeof (ecma_lit_storage_item_t));
        -:  221:
        1:  222:  new_item_p->values[0] = result;
        3:  223:  for (int i = 1; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:  224:  {
        2:  225:    new_item_p->values[i] = JMEM_CP_NULL;
        -:  226:  }
        -:  227:
        1:  228:  new_item_p->next_cp = JERRY_CONTEXT (string_list_first_cp);
        1:  229:  JMEM_CP_SET_NON_NULL_POINTER (JERRY_CONTEXT (string_list_first_cp), new_item_p);
        -:  230:
        1:  231:  return ecma_make_string_value (string_p);
        -:  232:} /* ecma_find_or_create_literal_string */
        -:  233:
        -:  234:/**
        -:  235: * Find or create a literal number.
        -:  236: *
        -:  237: * @return ecma value
        -:  238: */
        -:  239:ecma_value_t
        1:  240:ecma_find_or_create_literal_number (ecma_number_t number_arg) /**< number to be searched */
        -:  241:{
        1:  242:  ecma_value_t num = ecma_make_number_value (number_arg);
        -:  243:
        1:  244:  if (ecma_is_value_integer_number (num))
        -:  245:  {
    #####:  246:    return num;
        -:  247:  }
        -:  248:
        1:  249:  JERRY_ASSERT (ecma_is_value_float_number (num));
        -:  250:
        1:  251:  jmem_cpointer_t number_list_cp = JERRY_CONTEXT (number_list_first_cp);
        1:  252:  jmem_cpointer_t *empty_cpointer_p = NULL;
        -:  253:
        2:  254:  while (number_list_cp != JMEM_CP_NULL)
        -:  255:  {
    #####:  256:    ecma_lit_storage_item_t *number_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t, number_list_cp);
        -:  257:
    #####:  258:    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:  259:    {
    #####:  260:      if (number_list_p->values[i] == JMEM_CP_NULL)
        -:  261:      {
    #####:  262:        if (empty_cpointer_p == NULL)
        -:  263:        {
    #####:  264:          empty_cpointer_p = number_list_p->values + i;
        -:  265:        }
        -:  266:      }
        -:  267:      else
        -:  268:      {
    #####:  269:        ecma_number_t *number_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_number_t, number_list_p->values[i]);
        -:  270:
    #####:  271:        if (*number_p == number_arg)
        -:  272:        {
    #####:  273:          ecma_free_value (num);
    #####:  274:          return ecma_make_float_value (number_p);
        -:  275:        }
        -:  276:      }
        -:  277:    }
        -:  278:
    #####:  279:    number_list_cp = number_list_p->next_cp;
        -:  280:  }
        -:  281:
        -:  282:  jmem_cpointer_t result;
        1:  283:  JMEM_CP_SET_NON_NULL_POINTER (result, ecma_get_pointer_from_float_value (num));
        -:  284:
        1:  285:  if (empty_cpointer_p != NULL)
        -:  286:  {
    #####:  287:    *empty_cpointer_p = result;
    #####:  288:    return num;
        -:  289:  }
        -:  290:
        -:  291:  ecma_lit_storage_item_t *new_item_p;
        1:  292:  new_item_p = (ecma_lit_storage_item_t *) jmem_pools_alloc (sizeof (ecma_lit_storage_item_t));
        -:  293:
        1:  294:  new_item_p->values[0] = result;
        3:  295:  for (int i = 1; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:  296:  {
        2:  297:    new_item_p->values[i] = JMEM_CP_NULL;
        -:  298:  }
        -:  299:
        1:  300:  new_item_p->next_cp = JERRY_CONTEXT (number_list_first_cp);
        1:  301:  JMEM_CP_SET_NON_NULL_POINTER (JERRY_CONTEXT (number_list_first_cp), new_item_p);
        -:  302:
        1:  303:  return num;
        -:  304:} /* ecma_find_or_create_literal_number */
        -:  305:
        -:  306:#if JERRY_BUILTIN_BIGINT
        -:  307:
        -:  308:/**
        -:  309: * Find or create a literal BigInt.
        -:  310: *
        -:  311: * @return BigInt value
        -:  312: */
        -:  313:ecma_value_t
    #####:  314:ecma_find_or_create_literal_bigint (ecma_value_t bigint) /**< bigint to be searched */
        -:  315:{
    #####:  316:  JERRY_ASSERT (ecma_is_value_bigint (bigint));
        -:  317:
    #####:  318:  if (bigint == ECMA_BIGINT_ZERO)
        -:  319:  {
    #####:  320:    return bigint;
        -:  321:  }
        -:  322:
    #####:  323:  jmem_cpointer_t bigint_list_cp = JERRY_CONTEXT (bigint_list_first_cp);
    #####:  324:  jmem_cpointer_t *empty_cpointer_p = NULL;
        -:  325:
    #####:  326:  while (bigint_list_cp != JMEM_CP_NULL)
        -:  327:  {
    #####:  328:    ecma_lit_storage_item_t *bigint_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t, bigint_list_cp);
        -:  329:
    #####:  330:    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:  331:    {
    #####:  332:      if (bigint_list_p->values[i] == JMEM_CP_NULL)
        -:  333:      {
    #####:  334:        if (empty_cpointer_p == NULL)
        -:  335:        {
    #####:  336:          empty_cpointer_p = bigint_list_p->values + i;
        -:  337:        }
        -:  338:      }
        -:  339:      else
        -:  340:      {
    #####:  341:        ecma_extended_primitive_t *other_bigint_p =
    #####:  342:          JMEM_CP_GET_NON_NULL_POINTER (ecma_extended_primitive_t, bigint_list_p->values[i]);
    #####:  343:        ecma_value_t other_bigint = ecma_make_extended_primitive_value (other_bigint_p, ECMA_TYPE_BIGINT);
        -:  344:
    #####:  345:        if (ecma_bigint_is_equal_to_bigint (bigint, other_bigint))
        -:  346:        {
    #####:  347:          ecma_free_value (bigint);
    #####:  348:          return other_bigint;
        -:  349:        }
        -:  350:      }
        -:  351:    }
        -:  352:
    #####:  353:    bigint_list_cp = bigint_list_p->next_cp;
        -:  354:  }
        -:  355:
        -:  356:  jmem_cpointer_t result;
    #####:  357:  JMEM_CP_SET_NON_NULL_POINTER (result, ecma_get_extended_primitive_from_value (bigint));
        -:  358:
    #####:  359:  if (empty_cpointer_p != NULL)
        -:  360:  {
    #####:  361:    *empty_cpointer_p = result;
    #####:  362:    return bigint;
        -:  363:  }
        -:  364:
        -:  365:  ecma_lit_storage_item_t *new_item_p;
    #####:  366:  new_item_p = (ecma_lit_storage_item_t *) jmem_pools_alloc (sizeof (ecma_lit_storage_item_t));
        -:  367:
    #####:  368:  new_item_p->values[0] = result;
    #####:  369:  for (int i = 1; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:  370:  {
    #####:  371:    new_item_p->values[i] = JMEM_CP_NULL;
        -:  372:  }
        -:  373:
    #####:  374:  new_item_p->next_cp = JERRY_CONTEXT (bigint_list_first_cp);
    #####:  375:  JMEM_CP_SET_NON_NULL_POINTER (JERRY_CONTEXT (bigint_list_first_cp), new_item_p);
        -:  376:
    #####:  377:  return bigint;
        -:  378:} /* ecma_find_or_create_literal_bigint */
        -:  379:
        -:  380:#endif /* JERRY_BUILTIN_BIGINT */
        -:  381:
        -:  382:/**
        -:  383: * Log2 of snapshot literal alignment.
        -:  384: */
        -:  385:#define JERRY_SNAPSHOT_LITERAL_ALIGNMENT_LOG 1
        -:  386:
        -:  387:/**
        -:  388: * Snapshot literal alignment.
        -:  389: */
        -:  390:#define JERRY_SNAPSHOT_LITERAL_ALIGNMENT (1u << JERRY_SNAPSHOT_LITERAL_ALIGNMENT_LOG)
        -:  391:
        -:  392:/**
        -:  393: * Literal offset shift.
        -:  394: */
        -:  395:#define JERRY_SNAPSHOT_LITERAL_SHIFT (ECMA_VALUE_SHIFT + 2)
        -:  396:
        -:  397:/**
        -:  398: * Literal value is number.
        -:  399: */
        -:  400:#define JERRY_SNAPSHOT_LITERAL_IS_NUMBER (1u << ECMA_VALUE_SHIFT)
        -:  401:
        -:  402:#if JERRY_BUILTIN_BIGINT
        -:  403:/**
        -:  404: * Literal value is BigInt.
        -:  405: */
        -:  406:#define JERRY_SNAPSHOT_LITERAL_IS_BIGINT (2u << ECMA_VALUE_SHIFT)
        -:  407:#endif /* JERRY_BUILTIN_BIGINT */
        -:  408:
        -:  409:#if JERRY_SNAPSHOT_SAVE
        -:  410:
        -:  411:/**
        -:  412: * Append the value at the end of the appropriate list if it is not present there.
        -:  413: */
        -:  414:void
    #####:  415:ecma_save_literals_append_value (ecma_value_t value, /**< value to be appended */
        -:  416:                                 ecma_collection_t *lit_pool_p) /**< list of known values */
        -:  417:{
        -:  418:  /* Unlike direct numbers, direct strings are converted to character literals. */
    #####:  419:  if (!ecma_is_value_string (value)
        -:  420:#if JERRY_BUILTIN_BIGINT
    #####:  421:      && (!ecma_is_value_bigint (value) || value == ECMA_BIGINT_ZERO)
        -:  422:#endif /* JERRY_BUILTIN_BIGINT */
    #####:  423:      && !ecma_is_value_float_number (value))
        -:  424:  {
        -:  425:    return;
        -:  426:  }
        -:  427:
    #####:  428:  ecma_value_t *buffer_p = lit_pool_p->buffer_p;
        -:  429:
    #####:  430:  for (uint32_t i = 0; i < lit_pool_p->item_count; i++)
        -:  431:  {
        -:  432:    /* Strings / numbers are direct strings or stored in the literal storage.
        -:  433:     * Therefore direct comparison is enough to find the same strings / numbers. */
    #####:  434:    if (buffer_p[i] == value)
        -:  435:    {
        -:  436:      return;
        -:  437:    }
        -:  438:  }
        -:  439:
    #####:  440:  ecma_collection_push_back (lit_pool_p, value);
        -:  441:} /* ecma_save_literals_append_value */
        -:  442:
        -:  443:/**
        -:  444: * Add names from a byte-code data to a list.
        -:  445: */
        -:  446:void
    #####:  447:ecma_save_literals_add_compiled_code (const ecma_compiled_code_t *compiled_code_p, /**< byte-code data */
        -:  448:                                      ecma_collection_t *lit_pool_p) /**< list of known values */
        -:  449:{
        -:  450:  ecma_value_t *literal_p;
        -:  451:  uint32_t argument_end;
        -:  452:  uint32_t register_end;
        -:  453:  uint32_t const_literal_end;
        -:  454:  uint32_t literal_end;
        -:  455:
        -:  456:  JERRY_ASSERT (CBC_IS_FUNCTION (compiled_code_p->status_flags));
        -:  457:
    #####:  458:  if (compiled_code_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)
        -:  459:  {
    #####:  460:    cbc_uint16_arguments_t *args_p = (cbc_uint16_arguments_t *) compiled_code_p;
    #####:  461:    uint8_t *byte_p = (uint8_t *) compiled_code_p;
        -:  462:
    #####:  463:    literal_p = (ecma_value_t *) (byte_p + sizeof (cbc_uint16_arguments_t));
    #####:  464:    register_end = args_p->register_end;
    #####:  465:    const_literal_end = args_p->const_literal_end - register_end;
    #####:  466:    literal_end = args_p->literal_end - register_end;
    #####:  467:    argument_end = args_p->argument_end;
        -:  468:  }
        -:  469:  else
        -:  470:  {
    #####:  471:    cbc_uint8_arguments_t *args_p = (cbc_uint8_arguments_t *) compiled_code_p;
    #####:  472:    uint8_t *byte_p = (uint8_t *) compiled_code_p;
        -:  473:
    #####:  474:    literal_p = (ecma_value_t *) (byte_p + sizeof (cbc_uint8_arguments_t));
    #####:  475:    register_end = args_p->register_end;
    #####:  476:    const_literal_end = args_p->const_literal_end - register_end;
    #####:  477:    literal_end = args_p->literal_end - register_end;
    #####:  478:    argument_end = args_p->argument_end;
        -:  479:  }
        -:  480:
    #####:  481:  if (compiled_code_p->status_flags & CBC_CODE_FLAGS_MAPPED_ARGUMENTS_NEEDED)
        -:  482:  {
    #####:  483:    for (uint32_t i = 0; i < argument_end; i++)
        -:  484:    {
    #####:  485:      ecma_save_literals_append_value (literal_p[i], lit_pool_p);
        -:  486:    }
        -:  487:  }
        -:  488:
    #####:  489:  for (uint32_t i = 0; i < const_literal_end; i++)
        -:  490:  {
    #####:  491:    ecma_save_literals_append_value (literal_p[i], lit_pool_p);
        -:  492:  }
        -:  493:
    #####:  494:  for (uint32_t i = const_literal_end; i < literal_end; i++)
        -:  495:  {
    #####:  496:    ecma_compiled_code_t *bytecode_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_compiled_code_t, literal_p[i]);
        -:  497:
    #####:  498:    if (CBC_IS_FUNCTION (bytecode_p->status_flags) && bytecode_p != compiled_code_p)
        -:  499:    {
    #####:  500:      ecma_save_literals_add_compiled_code (bytecode_p, lit_pool_p);
        -:  501:    }
        -:  502:  }
        -:  503:
    #####:  504:  uint8_t *byte_p = ((uint8_t *) compiled_code_p) + (((size_t) compiled_code_p->size) << JMEM_ALIGNMENT_LOG);
    #####:  505:  literal_p = ecma_snapshot_resolve_serializable_values ((ecma_compiled_code_t *) compiled_code_p, byte_p);
        -:  506:
    #####:  507:  while (literal_p < (ecma_value_t *) byte_p)
        -:  508:  {
    #####:  509:    ecma_save_literals_append_value (*literal_p, lit_pool_p);
    #####:  510:    literal_p++;
        -:  511:  }
    #####:  512:} /* ecma_save_literals_add_compiled_code */
        -:  513:
        -:  514:/**
        -:  515: * Save literals to specified snapshot buffer.
        -:  516: *
        -:  517: * Note:
        -:  518: *      Frees 'lit_pool_p' regardless of success.
        -:  519: *
        -:  520: * @return true - if save was performed successfully (i.e. buffer size is sufficient),
        -:  521: *         false - otherwise
        -:  522: */
        -:  523:bool
    #####:  524:ecma_save_literals_for_snapshot (ecma_collection_t *lit_pool_p, /**< list of known values */
        -:  525:                                 uint32_t *buffer_p, /**< [out] output snapshot buffer */
        -:  526:                                 size_t buffer_size, /**< size of the buffer */
        -:  527:                                 size_t *in_out_buffer_offset_p, /**< [in,out] write position in the buffer */
        -:  528:                                 lit_mem_to_snapshot_id_map_entry_t **out_map_p, /**< [out] map from literal identifiers
        -:  529:                                                                                  *   to the literal offsets
        -:  530:                                                                                  *   in snapshot */
        -:  531:                                 uint32_t *out_map_len_p) /**< [out] number of literals */
        -:  532:{
    #####:  533:  if (lit_pool_p->item_count == 0)
        -:  534:  {
    #####:  535:    *out_map_p = NULL;
    #####:  536:    *out_map_len_p = 0;
        -:  537:  }
        -:  538:
    #####:  539:  uint32_t lit_table_size = 0;
    #####:  540:  size_t max_lit_table_size = buffer_size - *in_out_buffer_offset_p;
        -:  541:
    #####:  542:  if (max_lit_table_size > (UINT32_MAX >> JERRY_SNAPSHOT_LITERAL_SHIFT))
        -:  543:  {
    #####:  544:    max_lit_table_size = (UINT32_MAX >> JERRY_SNAPSHOT_LITERAL_SHIFT);
        -:  545:  }
        -:  546:
    #####:  547:  ecma_value_t *lit_buffer_p = lit_pool_p->buffer_p;
        -:  548:
        -:  549:  /* Compute the size of the literal pool. */
    #####:  550:  for (uint32_t i = 0; i < lit_pool_p->item_count; i++)
        -:  551:  {
    #####:  552:    if (ecma_is_value_float_number (lit_buffer_p[i]))
        -:  553:    {
    #####:  554:      lit_table_size += (uint32_t) sizeof (ecma_number_t);
        -:  555:    }
        -:  556:#if JERRY_BUILTIN_BIGINT
    #####:  557:    else if (ecma_is_value_bigint (lit_buffer_p[i]))
        -:  558:    {
    #####:  559:      ecma_extended_primitive_t *bigint_p = ecma_get_extended_primitive_from_value (lit_buffer_p[i]);
        -:  560:
    #####:  561:      lit_table_size += (uint32_t) JERRY_ALIGNUP (sizeof (uint32_t) + ECMA_BIGINT_GET_SIZE (bigint_p),
        -:  562:                                                  JERRY_SNAPSHOT_LITERAL_ALIGNMENT);
        -:  563:    }
        -:  564:#endif /* JERRY_BUILTIN_BIGINT */
        -:  565:    else
        -:  566:    {
    #####:  567:      ecma_string_t *string_p = ecma_get_string_from_value (lit_buffer_p[i]);
        -:  568:
    #####:  569:      lit_table_size += (uint32_t) JERRY_ALIGNUP (sizeof (uint16_t) + ecma_string_get_size (string_p),
        -:  570:                                                  JERRY_SNAPSHOT_LITERAL_ALIGNMENT);
        -:  571:    }
        -:  572:
        -:  573:    /* Check whether enough space is available and the maximum size is not reached. */
    #####:  574:    if (lit_table_size > max_lit_table_size)
        -:  575:    {
    #####:  576:      ecma_collection_destroy (lit_pool_p);
    #####:  577:      return false;
        -:  578:    }
        -:  579:  }
        -:  580:
        -:  581:  lit_mem_to_snapshot_id_map_entry_t *map_p;
    #####:  582:  uint32_t total_count = lit_pool_p->item_count;
        -:  583:
    #####:  584:  map_p = jmem_heap_alloc_block (total_count * sizeof (lit_mem_to_snapshot_id_map_entry_t));
        -:  585:
        -:  586:  /* Set return values (no error is possible from here). */
        -:  587:  JERRY_ASSERT ((*in_out_buffer_offset_p % sizeof (uint32_t)) == 0);
        -:  588:
    #####:  589:  uint8_t *destination_p = (uint8_t *) (buffer_p + (*in_out_buffer_offset_p / sizeof (uint32_t)));
    #####:  590:  uint32_t literal_offset = 0;
        -:  591:
    #####:  592:  *in_out_buffer_offset_p += lit_table_size;
    #####:  593:  *out_map_p = map_p;
    #####:  594:  *out_map_len_p = total_count;
        -:  595:
    #####:  596:  lit_buffer_p = lit_pool_p->buffer_p;
        -:  597:
        -:  598:  /* Generate literal pool data. */
    #####:  599:  for (uint32_t i = 0; i < lit_pool_p->item_count; i++)
        -:  600:  {
    #####:  601:    map_p->literal_id = lit_buffer_p[i];
    #####:  602:    map_p->literal_offset = (literal_offset << JERRY_SNAPSHOT_LITERAL_SHIFT) | ECMA_TYPE_SNAPSHOT_OFFSET;
        -:  603:
        -:  604:    lit_utf8_size_t length;
        -:  605:
    #####:  606:    if (ecma_is_value_float_number (lit_buffer_p[i]))
        -:  607:    {
    #####:  608:      map_p->literal_offset |= JERRY_SNAPSHOT_LITERAL_IS_NUMBER;
        -:  609:
    #####:  610:      ecma_number_t num = ecma_get_float_from_value (lit_buffer_p[i]);
    #####:  611:      memcpy (destination_p, &num, sizeof (ecma_number_t));
        -:  612:
    #####:  613:      length = JERRY_ALIGNUP (sizeof (ecma_number_t), JERRY_SNAPSHOT_LITERAL_ALIGNMENT);
        -:  614:    }
        -:  615:#if JERRY_BUILTIN_BIGINT
    #####:  616:    else if (ecma_is_value_bigint (lit_buffer_p[i]))
        -:  617:    {
    #####:  618:      map_p->literal_offset |= JERRY_SNAPSHOT_LITERAL_IS_BIGINT;
        -:  619:
    #####:  620:      ecma_extended_primitive_t *bigint_p = ecma_get_extended_primitive_from_value (lit_buffer_p[i]);
    #####:  621:      uint32_t size = ECMA_BIGINT_GET_SIZE (bigint_p);
        -:  622:
    #####:  623:      memcpy (destination_p, &bigint_p->u.bigint_sign_and_size, sizeof (uint32_t));
    #####:  624:      memcpy (destination_p + sizeof (uint32_t), ECMA_BIGINT_GET_DIGITS (bigint_p, 0), size);
        -:  625:
    #####:  626:      length = JERRY_ALIGNUP (sizeof (uint32_t) + size, JERRY_SNAPSHOT_LITERAL_ALIGNMENT);
        -:  627:    }
        -:  628:#endif /* JERRY_BUILTIN_BIGINT */
        -:  629:    else
        -:  630:    {
    #####:  631:      ecma_string_t *string_p = ecma_get_string_from_value (lit_buffer_p[i]);
    #####:  632:      length = ecma_string_get_size (string_p);
        -:  633:
    #####:  634:      *(uint16_t *) destination_p = (uint16_t) length;
        -:  635:
    #####:  636:      ecma_string_to_cesu8_bytes (string_p, destination_p + sizeof (uint16_t), length);
        -:  637:
    #####:  638:      length = JERRY_ALIGNUP (sizeof (uint16_t) + length, JERRY_SNAPSHOT_LITERAL_ALIGNMENT);
        -:  639:    }
        -:  640:
        -:  641:    JERRY_ASSERT ((length % sizeof (uint16_t)) == 0);
    #####:  642:    destination_p += length;
    #####:  643:    literal_offset += length;
        -:  644:
    #####:  645:    map_p++;
        -:  646:  }
        -:  647:
    #####:  648:  ecma_collection_destroy (lit_pool_p);
    #####:  649:  return true;
        -:  650:} /* ecma_save_literals_for_snapshot */
        -:  651:
        -:  652:#endif /* JERRY_SNAPSHOT_SAVE */
        -:  653:
        -:  654:#if JERRY_SNAPSHOT_EXEC || JERRY_SNAPSHOT_SAVE
        -:  655:
        -:  656:/**
        -:  657: * Get the compressed pointer of a given literal.
        -:  658: *
        -:  659: * @return literal compressed pointer
        -:  660: */
        -:  661:ecma_value_t
    #####:  662:ecma_snapshot_get_literal (const uint8_t *literal_base_p, /**< literal start */
        -:  663:                           ecma_value_t literal_value) /**< string / number offset */
        -:  664:{
        -:  665:  JERRY_ASSERT ((literal_value & ECMA_VALUE_TYPE_MASK) == ECMA_TYPE_SNAPSHOT_OFFSET);
        -:  666:
    #####:  667:  const uint8_t *literal_p = literal_base_p + (literal_value >> JERRY_SNAPSHOT_LITERAL_SHIFT);
        -:  668:
    #####:  669:  if (literal_value & JERRY_SNAPSHOT_LITERAL_IS_NUMBER)
        -:  670:  {
        -:  671:    ecma_number_t num;
    #####:  672:    memcpy (&num, literal_p, sizeof (ecma_number_t));
    #####:  673:    return ecma_find_or_create_literal_number (num);
        -:  674:  }
        -:  675:
        -:  676:#if JERRY_BUILTIN_BIGINT
    #####:  677:  if (literal_value & JERRY_SNAPSHOT_LITERAL_IS_BIGINT)
        -:  678:  {
    #####:  679:    uint32_t bigint_sign_and_size = *(uint32_t *) literal_p;
    #####:  680:    uint32_t size = bigint_sign_and_size & ~(uint32_t) (sizeof (ecma_bigint_digit_t) - 1);
        -:  681:
    #####:  682:    ecma_extended_primitive_t *bigint_p = ecma_bigint_create (size);
        -:  683:
    #####:  684:    if (bigint_p == NULL)
        -:  685:    {
    #####:  686:      jerry_fatal (ERR_OUT_OF_MEMORY);
        -:  687:    }
        -:  688:
        -:  689:    /* Only the sign bit can differ. */
        -:  690:    JERRY_ASSERT (bigint_p->u.bigint_sign_and_size == (bigint_sign_and_size & ~(uint32_t) ECMA_BIGINT_SIGN));
        -:  691:
    #####:  692:    bigint_p->u.bigint_sign_and_size = bigint_sign_and_size;
    #####:  693:    memcpy (ECMA_BIGINT_GET_DIGITS (bigint_p, 0), literal_p + sizeof (uint32_t), size);
    #####:  694:    return ecma_find_or_create_literal_bigint (ecma_make_extended_primitive_value (bigint_p, ECMA_TYPE_BIGINT));
        -:  695:  }
        -:  696:#endif /* JERRY_BUILTIN_BIGINT */
        -:  697:
    #####:  698:  uint16_t length = *(const uint16_t *) literal_p;
        -:  699:
    #####:  700:  return ecma_find_or_create_literal_string (literal_p + sizeof (uint16_t), length, false);
        -:  701:} /* ecma_snapshot_get_literal */
        -:  702:
        -:  703:/**
        -:  704: * Compute the start of the serializable ecma-values of the bytecode
        -:  705: * Related values:
        -:  706: *  - function argument names, if CBC_CODE_FLAGS_MAPPED_ARGUMENTS_NEEDED is present
        -:  707: *  - function name, if CBC_CODE_FLAGS_CLASS_CONSTRUCTOR is not present and ES.next profile is enabled
        -:  708: *
        -:  709: * @return pointer to the beginning of the serializable ecma-values
        -:  710: */
        -:  711:ecma_value_t *
    #####:  712:ecma_snapshot_resolve_serializable_values (const ecma_compiled_code_t *compiled_code_p, /**< compiled code */
        -:  713:                                           uint8_t *bytecode_end_p) /**< end of the bytecode */
        -:  714:{
    #####:  715:  ecma_value_t *base_p = (ecma_value_t *) bytecode_end_p;
        -:  716:
    #####:  717:  if (compiled_code_p->status_flags & CBC_CODE_FLAGS_MAPPED_ARGUMENTS_NEEDED)
        -:  718:  {
        -:  719:    uint32_t argument_end;
    #####:  720:    if (compiled_code_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)
        -:  721:    {
    #####:  722:      argument_end = ((cbc_uint16_arguments_t *) compiled_code_p)->argument_end;
        -:  723:    }
        -:  724:    else
        -:  725:    {
    #####:  726:      argument_end = ((cbc_uint8_arguments_t *) compiled_code_p)->argument_end;
        -:  727:    }
        -:  728:
    #####:  729:    base_p -= argument_end;
        -:  730:  }
        -:  731:
        -:  732:#if JERRY_ESNEXT
        -:  733:  /* function name */
    #####:  734:  if (CBC_FUNCTION_GET_TYPE (compiled_code_p->status_flags) != CBC_FUNCTION_CONSTRUCTOR)
        -:  735:  {
    #####:  736:    base_p--;
        -:  737:  }
        -:  738:#endif /* JERRY_ESNEXT */
        -:  739:
    #####:  740:  return base_p;
        -:  741:} /* ecma_snapshot_resolve_serializable_values */
        -:  742:#endif /* JERRY_SNAPSHOT_EXEC || JERRY_SNAPSHOT_SAVE */
        -:  743:
        -:  744:/**
        -:  745: * @}
        -:  746: * @}
        -:  747: */
