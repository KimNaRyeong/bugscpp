        -:    0:Source:/home/workspace/tests/unit-core/test-api-binary-operations-arithmetics.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:#define T(op, lhs, rhs, res) \
        -:   21:  {                          \
        -:   22:    op, lhs, rhs, res        \
        -:   23:  }
        -:   24:
        -:   25:#define T_NAN(op, lhs, rhs) \
        -:   26:  {                         \
        -:   27:    op, lhs, rhs            \
        -:   28:  }
        -:   29:
        -:   30:#define T_ERR(op, lsh, rhs) T_NAN (op, lsh, rhs)
        -:   31:
        -:   32:#define T_ARI(lhs, rhs)                                                                                       \
        -:   33:  T_NAN (JERRY_BIN_OP_SUB, lhs, rhs), T_NAN (JERRY_BIN_OP_MUL, lhs, rhs), T_NAN (JERRY_BIN_OP_DIV, lhs, rhs), \
        -:   34:    T_NAN (JERRY_BIN_OP_REM, lhs, rhs)
        -:   35:
        -:   36:typedef struct
        -:   37:{
        -:   38:  jerry_binary_op_t op;
        -:   39:  jerry_value_t lhs;
        -:   40:  jerry_value_t rhs;
        -:   41:  jerry_value_t expected;
        -:   42:} test_entry_t;
        -:   43:
        -:   44:typedef struct
        -:   45:{
        -:   46:  jerry_binary_op_t op;
        -:   47:  jerry_value_t lhs;
        -:   48:  jerry_value_t rhs;
        -:   49:} test_nan_entry_t;
        -:   50:
        -:   51:typedef test_nan_entry_t test_error_entry_t;
        -:   52:
        -:   53:int
    #####:   54:main (void)
        -:   55:{
    #####:   56:  TEST_INIT ();
        -:   57:
    #####:   58:  jerry_init (JERRY_INIT_EMPTY);
        -:   59:
    #####:   60:  jerry_value_t obj1 = jerry_eval ((jerry_char_t *) "o={x:1};o", 9, JERRY_PARSE_NO_OPTS);
    #####:   61:  jerry_value_t obj2 = jerry_eval ((jerry_char_t *) "o={x:1};o", 9, JERRY_PARSE_NO_OPTS);
    #####:   62:  jerry_value_t err1 = jerry_throw_sz (JERRY_ERROR_SYNTAX, "error");
        -:   63:
    #####:   64:  test_nan_entry_t test_nans[] = {
        -:   65:    /* Testing addition (+) */
    #####:   66:    T_NAN (JERRY_BIN_OP_ADD, jerry_number (3.1), jerry_undefined ()),
    #####:   67:    T_NAN (JERRY_BIN_OP_ADD, jerry_undefined (), jerry_undefined ()),
    #####:   68:    T_NAN (JERRY_BIN_OP_ADD, jerry_undefined (), jerry_null ()),
        -:   69:
        -:   70:    /* Testing subtraction (-), multiplication (*), division (/), remainder (%) */
    #####:   71:    T_ARI (jerry_number (3.1), jerry_undefined ()),
    #####:   72:    T_ARI (jerry_string_sz ("foo"), jerry_string_sz ("bar")),
    #####:   73:    T_ARI (jerry_string_sz ("foo"), jerry_undefined ()),
    #####:   74:    T_ARI (jerry_string_sz ("foo"), jerry_null ()),
    #####:   75:    T_ARI (jerry_string_sz ("foo"), jerry_number (5.0)),
    #####:   76:    T_ARI (jerry_undefined (), jerry_string_sz ("foo")),
    #####:   77:    T_ARI (jerry_null (), jerry_string_sz ("foo")),
    #####:   78:    T_ARI (jerry_number (5.0), jerry_string_sz ("foo")),
    #####:   79:    T_ARI (jerry_undefined (), jerry_undefined ()),
    #####:   80:    T_ARI (jerry_undefined (), jerry_null ()),
    #####:   81:    T_ARI (jerry_null (), jerry_undefined ()),
    #####:   82:    T_ARI (jerry_value_copy (obj1), jerry_value_copy (obj1)),
    #####:   83:    T_ARI (jerry_value_copy (obj1), jerry_value_copy (obj2)),
    #####:   84:    T_ARI (jerry_value_copy (obj2), jerry_value_copy (obj1)),
    #####:   85:    T_ARI (jerry_value_copy (obj2), jerry_undefined ()),
    #####:   86:    T_ARI (jerry_value_copy (obj1), jerry_string_sz ("foo")),
    #####:   87:    T_ARI (jerry_value_copy (obj1), jerry_null ()),
    #####:   88:    T_ARI (jerry_value_copy (obj1), jerry_boolean (true)),
    #####:   89:    T_ARI (jerry_value_copy (obj1), jerry_boolean (false)),
    #####:   90:    T_ARI (jerry_value_copy (obj1), jerry_number (5.0)),
        -:   91:
        -:   92:    /* Testing division (/) */
    #####:   93:    T_NAN (JERRY_BIN_OP_DIV, jerry_boolean (false), jerry_boolean (false)),
    #####:   94:    T_NAN (JERRY_BIN_OP_DIV, jerry_number (0.0), jerry_number (0.0)),
    #####:   95:    T_NAN (JERRY_BIN_OP_DIV, jerry_null (), jerry_null ()),
        -:   96:
        -:   97:    /* Testing remainder (%) */
    #####:   98:    T_NAN (JERRY_BIN_OP_REM, jerry_boolean (true), jerry_boolean (false)),
    #####:   99:    T_NAN (JERRY_BIN_OP_REM, jerry_boolean (false), jerry_boolean (false)),
    #####:  100:    T_NAN (JERRY_BIN_OP_REM, jerry_number (0.0), jerry_number (0.0)),
    #####:  101:    T_NAN (JERRY_BIN_OP_REM, jerry_null (), jerry_null ()),
        -:  102:  };
        -:  103:
    #####:  104:  for (uint32_t idx = 0; idx < sizeof (test_nans) / sizeof (test_nan_entry_t); idx++)
        -:  105:  {
    #####:  106:    jerry_value_t result = jerry_binary_op (test_nans[idx].op, test_nans[idx].lhs, test_nans[idx].rhs);
    #####:  107:    TEST_ASSERT (jerry_value_is_number (result));
        -:  108:
    #####:  109:    double num = jerry_value_as_number (result);
        -:  110:
    #####:  111:    TEST_ASSERT (num != num);
        -:  112:
    #####:  113:    jerry_value_free (test_nans[idx].lhs);
    #####:  114:    jerry_value_free (test_nans[idx].rhs);
    #####:  115:    jerry_value_free (result);
        -:  116:  }
        -:  117:
    #####:  118:  test_entry_t tests[] = {
        -:  119:    /* Testing addition (+) */
    #####:  120:    T (JERRY_BIN_OP_ADD, jerry_number (5.0), jerry_number (5.0), jerry_number (10.0)),
    #####:  121:    T (JERRY_BIN_OP_ADD, jerry_number (3.1), jerry_number (10), jerry_number (13.1)),
    #####:  122:    T (JERRY_BIN_OP_ADD, jerry_number (3.1), jerry_boolean (true), jerry_number (4.1)),
    #####:  123:    T (JERRY_BIN_OP_ADD, jerry_string_sz ("foo"), jerry_string_sz ("bar"), jerry_string_sz ("foobar")),
    #####:  124:    T (JERRY_BIN_OP_ADD, jerry_string_sz ("foo"), jerry_undefined (), jerry_string_sz ("fooundefined")),
    #####:  125:    T (JERRY_BIN_OP_ADD, jerry_string_sz ("foo"), jerry_null (), jerry_string_sz ("foonull")),
    #####:  126:    T (JERRY_BIN_OP_ADD, jerry_string_sz ("foo"), jerry_number (5.0), jerry_string_sz ("foo5")),
        -:  127:
    #####:  128:    T (JERRY_BIN_OP_ADD, jerry_null (), jerry_null (), jerry_number (0.0)),
    #####:  129:    T (JERRY_BIN_OP_ADD, jerry_boolean (true), jerry_boolean (true), jerry_number (2.0)),
    #####:  130:    T (JERRY_BIN_OP_ADD, jerry_boolean (true), jerry_boolean (false), jerry_number (1.0)),
    #####:  131:    T (JERRY_BIN_OP_ADD, jerry_boolean (false), jerry_boolean (true), jerry_number (1.0)),
    #####:  132:    T (JERRY_BIN_OP_ADD, jerry_boolean (false), jerry_boolean (false), jerry_number (0.0)),
    #####:  133:    T (JERRY_BIN_OP_ADD,
        -:  134:       jerry_value_copy (obj1),
        -:  135:       jerry_value_copy (obj1),
        -:  136:       jerry_string_sz ("[object Object][object Object]")),
    #####:  137:    T (JERRY_BIN_OP_ADD,
        -:  138:       jerry_value_copy (obj1),
        -:  139:       jerry_value_copy (obj2),
        -:  140:       jerry_string_sz ("[object Object][object Object]")),
    #####:  141:    T (JERRY_BIN_OP_ADD,
        -:  142:       jerry_value_copy (obj2),
        -:  143:       jerry_value_copy (obj1),
        -:  144:       jerry_string_sz ("[object Object][object Object]")),
    #####:  145:    T (JERRY_BIN_OP_ADD, jerry_value_copy (obj1), jerry_null (), jerry_string_sz ("[object Object]null")),
    #####:  146:    T (JERRY_BIN_OP_ADD, jerry_value_copy (obj1), jerry_undefined (), jerry_string_sz ("[object Object]undefined")),
    #####:  147:    T (JERRY_BIN_OP_ADD, jerry_value_copy (obj1), jerry_boolean (true), jerry_string_sz ("[object Object]true")),
    #####:  148:    T (JERRY_BIN_OP_ADD, jerry_value_copy (obj1), jerry_boolean (false), jerry_string_sz ("[object Object]false")),
    #####:  149:    T (JERRY_BIN_OP_ADD, jerry_value_copy (obj1), jerry_number (5.0), jerry_string_sz ("[object Object]5")),
    #####:  150:    T (JERRY_BIN_OP_ADD, jerry_value_copy (obj1), jerry_string_sz ("foo"), jerry_string_sz ("[object Object]foo")),
        -:  151:
        -:  152:    /* Testing subtraction (-) */
    #####:  153:    T (JERRY_BIN_OP_SUB, jerry_number (5.0), jerry_number (5.0), jerry_number (0.0)),
    #####:  154:    T (JERRY_BIN_OP_SUB, jerry_number (3.1), jerry_number (10), jerry_number (-6.9)),
    #####:  155:    T (JERRY_BIN_OP_SUB, jerry_number (3.1), jerry_boolean (true), jerry_number (2.1)),
    #####:  156:    T (JERRY_BIN_OP_SUB, jerry_boolean (true), jerry_boolean (true), jerry_number (0.0)),
    #####:  157:    T (JERRY_BIN_OP_SUB, jerry_boolean (true), jerry_boolean (false), jerry_number (1.0)),
    #####:  158:    T (JERRY_BIN_OP_SUB, jerry_boolean (false), jerry_boolean (true), jerry_number (-1.0)),
    #####:  159:    T (JERRY_BIN_OP_SUB, jerry_boolean (false), jerry_boolean (false), jerry_number (0.0)),
    #####:  160:    T (JERRY_BIN_OP_SUB, jerry_null (), jerry_null (), jerry_number (-0.0)),
        -:  161:
        -:  162:    /* Testing multiplication (*) */
    #####:  163:    T (JERRY_BIN_OP_MUL, jerry_number (5.0), jerry_number (5.0), jerry_number (25.0)),
    #####:  164:    T (JERRY_BIN_OP_MUL, jerry_number (3.1), jerry_number (10), jerry_number (31)),
    #####:  165:    T (JERRY_BIN_OP_MUL, jerry_number (3.1), jerry_boolean (true), jerry_number (3.1)),
    #####:  166:    T (JERRY_BIN_OP_MUL, jerry_boolean (true), jerry_boolean (true), jerry_number (1.0)),
    #####:  167:    T (JERRY_BIN_OP_MUL, jerry_boolean (true), jerry_boolean (false), jerry_number (0.0)),
    #####:  168:    T (JERRY_BIN_OP_MUL, jerry_boolean (false), jerry_boolean (true), jerry_number (0.0)),
    #####:  169:    T (JERRY_BIN_OP_MUL, jerry_boolean (false), jerry_boolean (false), jerry_number (0.0)),
    #####:  170:    T (JERRY_BIN_OP_MUL, jerry_null (), jerry_null (), jerry_number (0.0)),
        -:  171:
        -:  172:    /* Testing division (/) */
    #####:  173:    T (JERRY_BIN_OP_DIV, jerry_number (5.0), jerry_number (5.0), jerry_number (1.0)),
    #####:  174:    T (JERRY_BIN_OP_DIV, jerry_number (3.1), jerry_number (10), jerry_number (0.31)),
    #####:  175:    T (JERRY_BIN_OP_DIV, jerry_number (3.1), jerry_boolean (true), jerry_number (3.1)),
    #####:  176:    T (JERRY_BIN_OP_DIV, jerry_boolean (true), jerry_boolean (true), jerry_number (1.0)),
    #####:  177:    T (JERRY_BIN_OP_DIV, jerry_boolean (true), jerry_boolean (false), jerry_infinity (false)),
    #####:  178:    T (JERRY_BIN_OP_DIV, jerry_boolean (false), jerry_boolean (true), jerry_number (0.0)),
        -:  179:
        -:  180:    /* Testing remainder (%) */
    #####:  181:    T (JERRY_BIN_OP_REM, jerry_number (5.0), jerry_number (5.0), jerry_number (0.0)),
    #####:  182:    T (JERRY_BIN_OP_REM, jerry_number (5.0), jerry_number (2.0), jerry_number (1.0)),
    #####:  183:    T (JERRY_BIN_OP_REM, jerry_number (3.1), jerry_number (10), jerry_number (3.1)),
    #####:  184:    T (JERRY_BIN_OP_REM, jerry_number (3.1), jerry_boolean (true), jerry_number (0.10000000000000009)),
    #####:  185:    T (JERRY_BIN_OP_REM, jerry_boolean (true), jerry_boolean (true), jerry_number (0.0)),
    #####:  186:    T (JERRY_BIN_OP_REM, jerry_boolean (false), jerry_boolean (true), jerry_number (0.0)),
        -:  187:
        -:  188:  };
        -:  189:
    #####:  190:  for (uint32_t idx = 0; idx < sizeof (tests) / sizeof (test_entry_t); idx++)
        -:  191:  {
    #####:  192:    jerry_value_t result = jerry_binary_op (tests[idx].op, tests[idx].lhs, tests[idx].rhs);
    #####:  193:    TEST_ASSERT (!jerry_value_is_exception (result));
        -:  194:
    #####:  195:    jerry_value_t equals = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, result, tests[idx].expected);
    #####:  196:    TEST_ASSERT (jerry_value_is_boolean (equals) && jerry_value_is_true (equals));
    #####:  197:    jerry_value_free (equals);
        -:  198:
    #####:  199:    jerry_value_free (tests[idx].lhs);
    #####:  200:    jerry_value_free (tests[idx].rhs);
    #####:  201:    jerry_value_free (tests[idx].expected);
    #####:  202:    jerry_value_free (result);
        -:  203:  }
        -:  204:
    #####:  205:  jerry_value_t obj3 = jerry_eval ((jerry_char_t *) "o={valueOf:function(){throw 5}};o", 33, JERRY_PARSE_NO_OPTS);
        -:  206:
    #####:  207:  test_error_entry_t error_tests[] = {
        -:  208:    /* Testing addition (+) */
    #####:  209:    T_ERR (JERRY_BIN_OP_ADD, jerry_value_copy (err1), jerry_value_copy (err1)),
    #####:  210:    T_ERR (JERRY_BIN_OP_ADD, jerry_value_copy (err1), jerry_undefined ()),
    #####:  211:    T_ERR (JERRY_BIN_OP_ADD, jerry_undefined (), jerry_value_copy (err1)),
        -:  212:
        -:  213:    /* Testing subtraction (-), multiplication (*), division (/), remainder (%) */
    #####:  214:    T_ARI (jerry_value_copy (err1), jerry_value_copy (err1)),
    #####:  215:    T_ARI (jerry_value_copy (err1), jerry_undefined ()),
    #####:  216:    T_ARI (jerry_undefined (), jerry_value_copy (err1)),
        -:  217:
        -:  218:    /* Testing addition (+) */
    #####:  219:    T_ERR (JERRY_BIN_OP_ADD, jerry_value_copy (obj3), jerry_undefined ()),
    #####:  220:    T_ERR (JERRY_BIN_OP_ADD, jerry_value_copy (obj3), jerry_null ()),
    #####:  221:    T_ERR (JERRY_BIN_OP_ADD, jerry_value_copy (obj3), jerry_boolean (true)),
    #####:  222:    T_ERR (JERRY_BIN_OP_ADD, jerry_value_copy (obj3), jerry_boolean (false)),
    #####:  223:    T_ERR (JERRY_BIN_OP_ADD, jerry_value_copy (obj3), jerry_value_copy (obj2)),
    #####:  224:    T_ERR (JERRY_BIN_OP_ADD, jerry_value_copy (obj3), jerry_string_sz ("foo")),
        -:  225:
        -:  226:    /* Testing subtraction (-), multiplication (*), division (/), remainder (%) */
    #####:  227:    T_ARI (jerry_value_copy (obj3), jerry_undefined ()),
    #####:  228:    T_ARI (jerry_value_copy (obj3), jerry_null ()),
    #####:  229:    T_ARI (jerry_value_copy (obj3), jerry_boolean (true)),
    #####:  230:    T_ARI (jerry_value_copy (obj3), jerry_boolean (false)),
    #####:  231:    T_ARI (jerry_value_copy (obj3), jerry_value_copy (obj2)),
    #####:  232:    T_ARI (jerry_value_copy (obj3), jerry_string_sz ("foo")),
        -:  233:  };
        -:  234:
    #####:  235:  for (uint32_t idx = 0; idx < sizeof (error_tests) / sizeof (test_error_entry_t); idx++)
        -:  236:  {
    #####:  237:    jerry_value_t result = jerry_binary_op (tests[idx].op, error_tests[idx].lhs, error_tests[idx].rhs);
    #####:  238:    TEST_ASSERT (jerry_value_is_exception (result));
    #####:  239:    jerry_value_free (error_tests[idx].lhs);
    #####:  240:    jerry_value_free (error_tests[idx].rhs);
    #####:  241:    jerry_value_free (result);
        -:  242:  }
        -:  243:
    #####:  244:  jerry_value_free (obj1);
    #####:  245:  jerry_value_free (obj2);
    #####:  246:  jerry_value_free (obj3);
    #####:  247:  jerry_value_free (err1);
        -:  248:
    #####:  249:  jerry_cleanup ();
        -:  250:
        -:  251:  return 0;
        -:  252:} /* main */
