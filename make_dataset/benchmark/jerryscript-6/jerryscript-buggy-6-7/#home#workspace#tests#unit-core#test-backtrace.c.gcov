        -:    0:Source:/home/workspace/tests/unit-core/test-backtrace.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "config.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static jerry_value_t
    #####:   22:backtrace_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   23:                   const jerry_value_t args_p[], /**< argument list */
        -:   24:                   const jerry_length_t args_count) /**< argument count */
        -:   25:{
        -:   26:  JERRY_UNUSED (call_info_p);
        -:   27:
    #####:   28:  uint32_t max_depth = 0;
        -:   29:
    #####:   30:  if (args_count >= 1 && jerry_value_is_number (args_p[0]))
        -:   31:  {
    #####:   32:    max_depth = (uint32_t) jerry_value_as_number (args_p[0]);
        -:   33:  }
        -:   34:
    #####:   35:  return jerry_backtrace (max_depth);
        -:   36:} /* backtrace_handler */
        -:   37:
        -:   38:static void
    #####:   39:compare_string (jerry_value_t left_value, /* string value */
        -:   40:                const char *right_p) /* string to compare */
        -:   41:{
        -:   42:  jerry_char_t buffer[64];
    #####:   43:  size_t length = strlen (right_p);
        -:   44:
    #####:   45:  TEST_ASSERT (length <= sizeof (buffer));
    #####:   46:  TEST_ASSERT (jerry_value_is_string (left_value));
    #####:   47:  TEST_ASSERT (jerry_string_size (left_value, JERRY_ENCODING_CESU8) == length);
        -:   48:
    #####:   49:  TEST_ASSERT (jerry_string_to_buffer (left_value, JERRY_ENCODING_CESU8, buffer, sizeof (buffer)) == length);
    #####:   50:  TEST_ASSERT (memcmp (buffer, right_p, length) == 0);
    #####:   51:} /* compare_string */
        -:   52:
        -:   53:static const jerry_value_t *handler_args_p;
        -:   54:static int frame_index;
        -:   55:
        -:   56:static bool
    #####:   57:backtrace_callback (jerry_frame_t *frame_p, /* frame information */
        -:   58:                    void *user_p) /* user data */
        -:   59:{
    #####:   60:  TEST_ASSERT ((void *) handler_args_p == user_p);
    #####:   61:  TEST_ASSERT (jerry_frame_type (frame_p) == JERRY_BACKTRACE_FRAME_JS);
        -:   62:
    #####:   63:  const jerry_frame_location_t *location_p = jerry_frame_location (frame_p);
    #####:   64:  const jerry_value_t *function_p = jerry_frame_callee (frame_p);
    #####:   65:  const jerry_value_t *this_p = jerry_frame_this (frame_p);
        -:   66:
    #####:   67:  TEST_ASSERT (location_p != NULL);
    #####:   68:  TEST_ASSERT (function_p != NULL);
    #####:   69:  TEST_ASSERT (this_p != NULL);
        -:   70:
    #####:   71:  compare_string (location_p->source_name, "capture_test.js");
        -:   72:
    #####:   73:  ++frame_index;
        -:   74:
    #####:   75:  if (frame_index == 1)
        -:   76:  {
    #####:   77:    TEST_ASSERT (!jerry_frame_is_strict (frame_p));
    #####:   78:    TEST_ASSERT (location_p->line == 2);
    #####:   79:    TEST_ASSERT (location_p->column == 3);
    #####:   80:    TEST_ASSERT (handler_args_p[0] == *function_p);
    #####:   81:    TEST_ASSERT (handler_args_p[1] == *this_p);
        -:   82:    return true;
        -:   83:  }
        -:   84:
    #####:   85:  if (frame_index == 2)
        -:   86:  {
    #####:   87:    TEST_ASSERT (jerry_frame_is_strict (frame_p));
    #####:   88:    TEST_ASSERT (location_p->line == 7);
    #####:   89:    TEST_ASSERT (location_p->column == 6);
    #####:   90:    TEST_ASSERT (handler_args_p[2] == *function_p);
    #####:   91:    TEST_ASSERT (jerry_value_is_undefined (*this_p));
        -:   92:    return true;
        -:   93:  }
        -:   94:
    #####:   95:  jerry_value_t global = jerry_current_realm ();
        -:   96:
    #####:   97:  TEST_ASSERT (frame_index == 3);
    #####:   98:  TEST_ASSERT (!jerry_frame_is_strict (frame_p));
    #####:   99:  TEST_ASSERT (location_p->line == 11);
    #####:  100:  TEST_ASSERT (location_p->column == 3);
    #####:  101:  TEST_ASSERT (handler_args_p[3] == *function_p);
    #####:  102:  TEST_ASSERT (global == *this_p);
        -:  103:
    #####:  104:  jerry_value_free (global);
    #####:  105:  return false;
        -:  106:} /* backtrace_callback */
        -:  107:
        -:  108:static bool
    #####:  109:async_backtrace_callback (jerry_frame_t *frame_p, /* frame information */
        -:  110:                          void *user_p) /* user data */
        -:  111:{
    #####:  112:  TEST_ASSERT ((void *) handler_args_p == user_p);
    #####:  113:  TEST_ASSERT (jerry_frame_type (frame_p) == JERRY_BACKTRACE_FRAME_JS);
        -:  114:
    #####:  115:  const jerry_frame_location_t *location_p = jerry_frame_location (frame_p);
    #####:  116:  const jerry_value_t *function_p = jerry_frame_callee (frame_p);
        -:  117:
    #####:  118:  TEST_ASSERT (location_p != NULL);
    #####:  119:  TEST_ASSERT (function_p != NULL);
        -:  120:
    #####:  121:  compare_string (location_p->source_name, "async_capture_test.js");
        -:  122:
    #####:  123:  ++frame_index;
        -:  124:
    #####:  125:  if (frame_index == 1)
        -:  126:  {
    #####:  127:    TEST_ASSERT (jerry_frame_is_strict (frame_p));
    #####:  128:    TEST_ASSERT (location_p->line == 3);
    #####:  129:    TEST_ASSERT (location_p->column == 3);
    #####:  130:    TEST_ASSERT (handler_args_p[0] == *function_p);
        -:  131:    return true;
        -:  132:  }
        -:  133:
    #####:  134:  TEST_ASSERT (frame_index == 2);
    #####:  135:  TEST_ASSERT (!jerry_frame_is_strict (frame_p));
    #####:  136:  TEST_ASSERT (location_p->line == 8);
    #####:  137:  TEST_ASSERT (location_p->column == 3);
    #####:  138:  TEST_ASSERT (handler_args_p[1] == *function_p);
        -:  139:  return true;
        -:  140:} /* async_backtrace_callback */
        -:  141:
        -:  142:static bool
    #####:  143:class_backtrace_callback (jerry_frame_t *frame_p, /* frame information */
        -:  144:                          void *user_p) /* user data */
        -:  145:{
    #####:  146:  TEST_ASSERT ((void *) handler_args_p == user_p);
    #####:  147:  TEST_ASSERT (jerry_frame_type (frame_p) == JERRY_BACKTRACE_FRAME_JS);
        -:  148:
    #####:  149:  const jerry_frame_location_t *location_p = jerry_frame_location (frame_p);
    #####:  150:  const jerry_value_t *function_p = jerry_frame_callee (frame_p);
        -:  151:
    #####:  152:  TEST_ASSERT (location_p != NULL);
    #####:  153:  TEST_ASSERT (function_p != NULL);
        -:  154:
    #####:  155:  compare_string (location_p->source_name, "class_capture_test.js");
        -:  156:
    #####:  157:  ++frame_index;
        -:  158:
    #####:  159:  if (frame_index == 1)
        -:  160:  {
    #####:  161:    TEST_ASSERT (jerry_frame_is_strict (frame_p));
    #####:  162:    TEST_ASSERT (location_p->line == 3);
    #####:  163:    TEST_ASSERT (location_p->column == 14);
        -:  164:    return false;
        -:  165:  }
        -:  166:
    #####:  167:  TEST_ASSERT (frame_index == 2);
    #####:  168:  TEST_ASSERT (jerry_frame_is_strict (frame_p));
    #####:  169:  TEST_ASSERT (location_p->line == 2);
    #####:  170:  TEST_ASSERT (location_p->column == 7);
        -:  171:  return false;
        -:  172:} /* class_backtrace_callback */
        -:  173:
        -:  174:static jerry_value_t
    #####:  175:capture_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:  176:                 const jerry_value_t args_p[], /**< argument list */
        -:  177:                 const jerry_length_t args_count) /**< argument count */
        -:  178:{
        -:  179:  JERRY_UNUSED (call_info_p);
        -:  180:
    #####:  181:  TEST_ASSERT (args_count == 0 || args_count == 2 || args_count == 4);
    #####:  182:  TEST_ASSERT (args_count == 0 || frame_index == 0);
        -:  183:
    #####:  184:  jerry_backtrace_cb_t callback = backtrace_callback;
        -:  185:
    #####:  186:  if (args_count == 0)
        -:  187:  {
        -:  188:    callback = class_backtrace_callback;
        -:  189:  }
    #####:  190:  else if (args_count == 2)
        -:  191:  {
    #####:  192:    callback = async_backtrace_callback;
        -:  193:  }
        -:  194:
    #####:  195:  handler_args_p = args_p;
    #####:  196:  jerry_backtrace_capture (callback, (void *) args_p);
        -:  197:
    #####:  198:  TEST_ASSERT (args_count == 0 || frame_index == (args_count == 4 ? 3 : 2));
        -:  199:
    #####:  200:  return jerry_undefined ();
        -:  201:} /* capture_handler */
        -:  202:
        -:  203:static bool
    #####:  204:global_backtrace_callback (jerry_frame_t *frame_p, /* frame information */
        -:  205:                           void *user_p) /* user data */
        -:  206:{
    #####:  207:  TEST_ASSERT (user_p != NULL && frame_index == 0);
    #####:  208:  frame_index++;
        -:  209:
    #####:  210:  const jerry_value_t *function_p = jerry_frame_callee (frame_p);
    #####:  211:  jerry_value_t *result_p = ((jerry_value_t *) user_p);
        -:  212:
    #####:  213:  TEST_ASSERT (function_p != NULL);
    #####:  214:  jerry_value_free (*result_p);
    #####:  215:  *result_p = jerry_value_copy (*function_p);
    #####:  216:  return true;
        -:  217:} /* global_backtrace_callback */
        -:  218:
        -:  219:static jerry_value_t
    #####:  220:global_capture_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:  221:                        const jerry_value_t args_p[], /**< argument list */
        -:  222:                        const jerry_length_t args_count) /**< argument count */
        -:  223:{
        -:  224:  JERRY_UNUSED (call_info_p);
        -:  225:  JERRY_UNUSED (args_p);
        -:  226:  JERRY_UNUSED (args_count);
        -:  227:
    #####:  228:  jerry_value_t result = jerry_undefined ();
    #####:  229:  jerry_backtrace_capture (global_backtrace_callback, &result);
        -:  230:
    #####:  231:  TEST_ASSERT (jerry_value_is_object (result));
    #####:  232:  return result;
        -:  233:} /* global_capture_handler */
        -:  234:
        -:  235:static void
    #####:  236:register_callback (jerry_external_handler_t handler_p, /**< callback function */
        -:  237:                   char *name_p) /**< name of the function */
        -:  238:{
    #####:  239:  jerry_value_t global = jerry_current_realm ();
        -:  240:
    #####:  241:  jerry_value_t func = jerry_function_external (handler_p);
    #####:  242:  jerry_value_t name = jerry_string_sz (name_p);
    #####:  243:  jerry_value_t result = jerry_object_set (global, name, func);
    #####:  244:  TEST_ASSERT (!jerry_value_is_exception (result));
        -:  245:
    #####:  246:  jerry_value_free (result);
    #####:  247:  jerry_value_free (name);
    #####:  248:  jerry_value_free (func);
        -:  249:
    #####:  250:  jerry_value_free (global);
    #####:  251:} /* register_callback */
        -:  252:
        -:  253:static jerry_value_t
    #####:  254:run (const char *source_name_p, /**< source name */
        -:  255:     const char *source_p) /**< source code */
        -:  256:{
        -:  257:  jerry_parse_options_t parse_options;
    #####:  258:  parse_options.options = JERRY_PARSE_HAS_SOURCE_NAME;
    #####:  259:  parse_options.source_name = jerry_string_sz (source_name_p);
        -:  260:
    #####:  261:  jerry_value_t code = jerry_parse ((const jerry_char_t *) source_p, strlen (source_p), &parse_options);
    #####:  262:  jerry_value_free (parse_options.source_name);
    #####:  263:  TEST_ASSERT (!jerry_value_is_exception (code));
        -:  264:
    #####:  265:  jerry_value_t result = jerry_run (code);
    #####:  266:  jerry_value_free (code);
        -:  267:
    #####:  268:  return result;
        -:  269:} /* run */
        -:  270:
        -:  271:static void
    #####:  272:compare (jerry_value_t array, /**< array */
        -:  273:         uint32_t index, /**< item index */
        -:  274:         const char *str) /**< string to compare */
        -:  275:{
        -:  276:  jerry_char_t buf[64];
        -:  277:
    #####:  278:  size_t len = strlen (str);
        -:  279:
    #####:  280:  TEST_ASSERT (len < sizeof (buf));
        -:  281:
    #####:  282:  jerry_value_t value = jerry_object_get_index (array, index);
        -:  283:
    #####:  284:  TEST_ASSERT (!jerry_value_is_exception (value) && jerry_value_is_string (value));
        -:  285:
    #####:  286:  TEST_ASSERT (jerry_string_size (value, JERRY_ENCODING_CESU8) == len);
        -:  287:
    #####:  288:  jerry_size_t str_len = jerry_string_to_buffer (value, JERRY_ENCODING_CESU8, buf, (jerry_size_t) len);
    #####:  289:  TEST_ASSERT (str_len == len);
        -:  290:
    #####:  291:  jerry_value_free (value);
        -:  292:
    #####:  293:  TEST_ASSERT (memcmp (buf, str, len) == 0);
    #####:  294:} /* compare */
        -:  295:
        -:  296:static void
    #####:  297:test_get_backtrace_api_call (void)
        -:  298:{
    #####:  299:  jerry_init (JERRY_INIT_EMPTY);
        -:  300:
    #####:  301:  register_callback (backtrace_handler, "backtrace");
    #####:  302:  register_callback (capture_handler, "capture");
        -:  303:
    #####:  304:  const char *source_p = ("function f() {\n"
        -:  305:                          "  return backtrace(0);\n"
        -:  306:                          "}\n"
        -:  307:                          "\n"
        -:  308:                          "function g() {\n"
        -:  309:                          "  return f();\n"
        -:  310:                          "}\n"
        -:  311:                          "\n"
        -:  312:                          "function h() {\n"
        -:  313:                          "  return g();\n"
        -:  314:                          "}\n"
        -:  315:                          "\n"
        -:  316:                          "h();\n");
        -:  317:
    #####:  318:  jerry_value_t backtrace = run ("something.js", source_p);
        -:  319:
    #####:  320:  TEST_ASSERT (!jerry_value_is_exception (backtrace) && jerry_value_is_array (backtrace));
        -:  321:
    #####:  322:  TEST_ASSERT (jerry_array_length (backtrace) == 4);
        -:  323:
    #####:  324:  compare (backtrace, 0, "something.js:2:3");
    #####:  325:  compare (backtrace, 1, "something.js:6:3");
    #####:  326:  compare (backtrace, 2, "something.js:10:3");
    #####:  327:  compare (backtrace, 3, "something.js:13:1");
        -:  328:
    #####:  329:  jerry_value_free (backtrace);
        -:  330:
        -:  331:  /* Depth set to 2 this time. */
        -:  332:
    #####:  333:  source_p = ("function f() {\n"
        -:  334:              "  1; return backtrace(2);\n"
        -:  335:              "}\n"
        -:  336:              "\n"
        -:  337:              "function g() {\n"
        -:  338:              "  return f();\n"
        -:  339:              "}\n"
        -:  340:              "\n"
        -:  341:              "function h() {\n"
        -:  342:              "  return g();\n"
        -:  343:              "}\n"
        -:  344:              "\n"
        -:  345:              "h();\n");
        -:  346:
    #####:  347:  backtrace = run ("something_else.js", source_p);
        -:  348:
    #####:  349:  TEST_ASSERT (!jerry_value_is_exception (backtrace) && jerry_value_is_array (backtrace));
        -:  350:
    #####:  351:  TEST_ASSERT (jerry_array_length (backtrace) == 2);
        -:  352:
    #####:  353:  compare (backtrace, 0, "something_else.js:2:6");
    #####:  354:  compare (backtrace, 1, "something_else.js:6:3");
        -:  355:
    #####:  356:  jerry_value_free (backtrace);
        -:  357:
        -:  358:  /* Test frame capturing. */
        -:  359:
    #####:  360:  frame_index = 0;
    #####:  361:  source_p = ("var o = { f:function() {\n"
        -:  362:              "  return capture(o.f, o, g, h);\n"
        -:  363:              "} }\n"
        -:  364:              "\n"
        -:  365:              "function g() {\n"
        -:  366:              "  'use strict';\n"
        -:  367:              "  1; return o.f();\n"
        -:  368:              "}\n"
        -:  369:              "\n"
        -:  370:              "function h() {\n"
        -:  371:              "  return g();\n"
        -:  372:              "}\n"
        -:  373:              "\n"
        -:  374:              "h();\n");
        -:  375:
    #####:  376:  jerry_value_t result = run ("capture_test.js", source_p);
        -:  377:
    #####:  378:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  379:  jerry_value_free (result);
        -:  380:
    #####:  381:  TEST_ASSERT (frame_index == 3);
        -:  382:
        -:  383:  /* Test async frame capturing. */
    #####:  384:  source_p = "async function f() {}";
    #####:  385:  result = jerry_eval ((const jerry_char_t *) source_p, strlen (source_p), JERRY_PARSE_NO_OPTS);
        -:  386:
    #####:  387:  if (!jerry_value_is_exception (result))
        -:  388:  {
    #####:  389:    jerry_value_free (result);
        -:  390:
    #####:  391:    frame_index = 0;
    #####:  392:    source_p = ("function f() {\n"
        -:  393:                "  'use strict';\n"
        -:  394:                "  return capture(f, g);\n"
        -:  395:                "}\n"
        -:  396:                "\n"
        -:  397:                "async function g() {\n"
        -:  398:                "  await 0;\n"
        -:  399:                "  return f();\n"
        -:  400:                "}\n"
        -:  401:                "\n"
        -:  402:                "g();\n");
        -:  403:
    #####:  404:    result = run ("async_capture_test.js", source_p);
        -:  405:
    #####:  406:    TEST_ASSERT (jerry_value_is_promise (result));
    #####:  407:    jerry_value_free (result);
        -:  408:
    #####:  409:    TEST_ASSERT (frame_index == 0);
        -:  410:
    #####:  411:    result = jerry_run_jobs ();
    #####:  412:    TEST_ASSERT (!jerry_value_is_exception (result));
        -:  413:
    #####:  414:    TEST_ASSERT (frame_index == 2);
        -:  415:  }
        -:  416:  else
        -:  417:  {
    #####:  418:    TEST_ASSERT (jerry_error_type (result) == JERRY_ERROR_SYNTAX);
        -:  419:  }
        -:  420:
    #####:  421:  jerry_value_free (result);
        -:  422:
        -:  423:  /* Test class initializer frame capturing. */
    #####:  424:  source_p = "class C {}";
    #####:  425:  result = jerry_eval ((const jerry_char_t *) source_p, strlen (source_p), JERRY_PARSE_NO_OPTS);
        -:  426:
    #####:  427:  if (!jerry_value_is_exception (result))
        -:  428:  {
    #####:  429:    jerry_value_free (result);
        -:  430:
    #####:  431:    frame_index = 0;
    #####:  432:    source_p = ("class C {\n"
        -:  433:                "  a = capture();\n"
        -:  434:                "  static b = capture();\n"
        -:  435:                "}\n"
        -:  436:                "new C;\n");
        -:  437:
    #####:  438:    result = run ("class_capture_test.js", source_p);
        -:  439:
    #####:  440:    TEST_ASSERT (!jerry_value_is_exception (result));
    #####:  441:    TEST_ASSERT (frame_index == 2);
        -:  442:  }
        -:  443:  else
        -:  444:  {
    #####:  445:    TEST_ASSERT (jerry_error_type (result) == JERRY_ERROR_SYNTAX);
        -:  446:  }
        -:  447:
    #####:  448:  jerry_value_free (result);
        -:  449:
    #####:  450:  register_callback (global_capture_handler, "global_capture");
        -:  451:
    #####:  452:  frame_index = 0;
        -:  453:
    #####:  454:  source_p = "global_capture()";
        -:  455:
    #####:  456:  jerry_value_t code = jerry_parse ((const jerry_char_t *) source_p, strlen (source_p), NULL);
    #####:  457:  TEST_ASSERT (!jerry_value_is_exception (code));
        -:  458:
    #####:  459:  result = jerry_run (code);
        -:  460:
    #####:  461:  jerry_value_t compare_value = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, result, code);
    #####:  462:  TEST_ASSERT (jerry_value_is_true (compare_value));
        -:  463:
    #####:  464:  jerry_value_free (compare_value);
    #####:  465:  jerry_value_free (result);
    #####:  466:  jerry_value_free (code);
        -:  467:
    #####:  468:  jerry_cleanup ();
    #####:  469:} /* test_get_backtrace_api_call */
        -:  470:
        -:  471:static void
    #####:  472:test_exception_backtrace (void)
        -:  473:{
    #####:  474:  jerry_init (JERRY_INIT_EMPTY);
        -:  475:
    #####:  476:  const char *source = ("function f() {\n"
        -:  477:                        "  undef_reference;\n"
        -:  478:                        "}\n"
        -:  479:                        "\n"
        -:  480:                        "function g() {\n"
        -:  481:                        "  return f();\n"
        -:  482:                        "}\n"
        -:  483:                        "\n"
        -:  484:                        "g();\n");
        -:  485:
    #####:  486:  jerry_value_t error = run ("bad.js", source);
        -:  487:
    #####:  488:  TEST_ASSERT (jerry_value_is_exception (error));
        -:  489:
    #####:  490:  error = jerry_exception_value (error, true);
        -:  491:
    #####:  492:  TEST_ASSERT (jerry_value_is_object (error));
        -:  493:
    #####:  494:  jerry_value_t name = jerry_string_sz ("stack");
    #####:  495:  jerry_value_t backtrace = jerry_object_get (error, name);
        -:  496:
    #####:  497:  jerry_value_free (name);
    #####:  498:  jerry_value_free (error);
        -:  499:
    #####:  500:  TEST_ASSERT (!jerry_value_is_exception (backtrace) && jerry_value_is_array (backtrace));
        -:  501:
    #####:  502:  TEST_ASSERT (jerry_array_length (backtrace) == 3);
        -:  503:
    #####:  504:  compare (backtrace, 0, "bad.js:2:3");
    #####:  505:  compare (backtrace, 1, "bad.js:6:3");
    #####:  506:  compare (backtrace, 2, "bad.js:9:1");
        -:  507:
    #####:  508:  jerry_value_free (backtrace);
        -:  509:
    #####:  510:  jerry_cleanup ();
    #####:  511:} /* test_exception_backtrace */
        -:  512:
        -:  513:static void
    #####:  514:test_large_line_count (void)
        -:  515:{
    #####:  516:  jerry_init (JERRY_INIT_EMPTY);
        -:  517:
    #####:  518:  const char *source = ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  519:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  520:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  521:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  522:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  523:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  524:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  525:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  526:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  527:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  528:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  529:                        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
        -:  530:                        "g();\n");
        -:  531:
    #####:  532:  jerry_value_t error = run ("bad.js", source);
        -:  533:
    #####:  534:  TEST_ASSERT (jerry_value_is_exception (error));
        -:  535:
    #####:  536:  error = jerry_exception_value (error, true);
        -:  537:
    #####:  538:  TEST_ASSERT (jerry_value_is_object (error));
        -:  539:
    #####:  540:  jerry_value_t name = jerry_string_sz ("stack");
    #####:  541:  jerry_value_t backtrace = jerry_object_get (error, name);
        -:  542:
    #####:  543:  jerry_value_free (name);
    #####:  544:  jerry_value_free (error);
        -:  545:
    #####:  546:  TEST_ASSERT (!jerry_value_is_exception (backtrace) && jerry_value_is_array (backtrace));
        -:  547:
    #####:  548:  TEST_ASSERT (jerry_array_length (backtrace) == 1);
        -:  549:
    #####:  550:  compare (backtrace, 0, "bad.js:385:1");
        -:  551:
    #####:  552:  jerry_value_free (backtrace);
        -:  553:
    #####:  554:  jerry_cleanup ();
    #####:  555:} /* test_large_line_count */
        -:  556:
        -:  557:int
    #####:  558:main (void)
        -:  559:{
    #####:  560:  TEST_INIT ();
        -:  561:
    #####:  562:  TEST_ASSERT (jerry_feature_enabled (JERRY_FEATURE_LINE_INFO));
        -:  563:
    #####:  564:  test_get_backtrace_api_call ();
    #####:  565:  test_exception_backtrace ();
    #####:  566:  test_large_line_count ();
        -:  567:
        -:  568:  return 0;
        -:  569:} /* main */
