        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-async-from-sync-iterator-prototype.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-types.h"
        -:   17:
        -:   18:#include "ecma-builtin-handlers.h"
        -:   19:#include "ecma-builtins.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-function-object.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-iterator-object.h"
        -:   26:#include "ecma-objects.h"
        -:   27:#include "ecma-promise-object.h"
        -:   28:
        -:   29:#include "jcontext.h"
        -:   30:#include "jrt.h"
        -:   31:#include "lit-magic-strings.h"
        -:   32:#include "lit-strings.h"
        -:   33:#include "opcodes.h"
        -:   34:#include "vm-defines.h"
        -:   35:
        -:   36:#if JERRY_ESNEXT
        -:   37:
        -:   38:#define ECMA_BUILTINS_INTERNAL
        -:   39:#include "ecma-builtins-internal.h"
        -:   40:
        -:   41:/**
        -:   42: * This object has a custom dispatch function.
        -:   43: */
        -:   44:#define BUILTIN_CUSTOM_DISPATCH
        -:   45:
        -:   46:/**
        -:   47: * List of built-in routine identifiers.
        -:   48: */
        -:   49:enum
        -:   50:{
        -:   51:  ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_START = 0, /**< buitlin routine start id */
        -:   52:  ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_NEXT, /**< 'next' routine v11, 25.1.4.2.1  */
        -:   53:  ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_RETURN, /**< 'return' routine v11, 25.1.4.2.2  */
        -:   54:  ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_THROW /**< 'throw' routine v11, 25.1.4.2.3  */
        -:   55:} ecma_async_from_sync_iterator_operation_type_t;
        -:   56:
        -:   57:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-async-from-sync-iterator-prototype.inc.h"
        -:   58:#define BUILTIN_UNDERSCORED_ID  async_from_sync_iterator_prototype
        -:   59:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   60:
        -:   61:/** \addtogroup ecma ECMA
        -:   62: * @{
        -:   63: *
        -:   64: * \addtogroup ecmabuiltins
        -:   65: * @{
        -:   66: *
        -:   67: * \addtogroup generator ECMA %AsyncFromSyncIteratorPrototype% object built-in
        -:   68: * @{
        -:   69: */
        -:   70:
        -:   71:/**
        -:   72: * AsyncFromSyncIteratorContinuation operation
        -:   73: *
        -:   74: * See also:
        -:   75: *         ECMAScript v11, 25.1.4.4
        -:   76: *
        -:   77: * @return ecma value
        -:   78: *         Returned value must be freed with ecma_free_value.
        -:   79: */
        -:   80:static ecma_value_t
    #####:   81:ecma_op_async_from_sync_iterator_prototype_continuation (ecma_value_t result, /**< routine's 'result' argument */
        -:   82:                                                         ecma_object_t *capability_obj_p) /**< promise capability */
        -:   83:{
        -:   84:  /* 1. */
    #####:   85:  ecma_value_t done = ecma_op_iterator_complete (result);
        -:   86:
        -:   87:  /* 2. */
    #####:   88:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&done, capability_obj_p)))
        -:   89:  {
    #####:   90:    return done;
        -:   91:  }
        -:   92:
    #####:   93:  uint16_t done_flag = ecma_is_value_false (done) ? 0 : (1 << ECMA_NATIVE_HANDLER_COMMON_FLAGS_SHIFT);
    #####:   94:  ecma_free_value (done);
        -:   95:
        -:   96:  /* 3. */
    #####:   97:  ecma_value_t value = ecma_op_iterator_value (result);
        -:   98:
        -:   99:  /* 4. */
    #####:  100:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&value, capability_obj_p)))
        -:  101:  {
    #####:  102:    return value;
        -:  103:  }
        -:  104:
        -:  105:  /* 5. */
    #####:  106:  ecma_value_t builtin_promise = ecma_make_object_value (ecma_builtin_get (ECMA_BUILTIN_ID_PROMISE));
    #####:  107:  ecma_value_t value_wrapper = ecma_promise_reject_or_resolve (builtin_promise, value, true);
    #####:  108:  ecma_free_value (value);
        -:  109:
        -:  110:  /* 6. */
    #####:  111:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&value_wrapper, capability_obj_p)))
        -:  112:  {
    #####:  113:    return value_wrapper;
        -:  114:  }
        -:  115:
        -:  116:  /* 8 - 9. */
    #####:  117:  ecma_object_t *on_fullfilled = ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_ASYNC_FROM_SYNC_ITERATOR_UNWRAP,
        -:  118:                                                                sizeof (ecma_extended_object_t));
    #####:  119:  ((ecma_extended_object_t *) on_fullfilled)->u.built_in.u2.routine_flags = (uint8_t) done_flag;
        -:  120:
        -:  121:  /* 10. */
    #####:  122:  ecma_value_t then_result = ecma_promise_perform_then (value_wrapper,
        -:  123:                                                        ecma_make_object_value (on_fullfilled),
        -:  124:                                                        ECMA_VALUE_UNDEFINED,
        -:  125:                                                        capability_obj_p);
        -:  126:
    #####:  127:  JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (then_result));
    #####:  128:  ecma_deref_object (on_fullfilled);
    #####:  129:  ecma_free_value (value_wrapper);
        -:  130:
        -:  131:  /* 11. */
    #####:  132:  return then_result;
        -:  133:} /* ecma_op_async_from_sync_iterator_prototype_continuation */
        -:  134:
        -:  135:/**
        -:  136: * The %AsyncFromSyncIteratorPrototype% object's 'next' routine
        -:  137: *
        -:  138: * See also:
        -:  139: *         ECMAScript v11, 25.1.4.2.1
        -:  140: *
        -:  141: * @return ecma value
        -:  142: *         Returned value must be freed with ecma_free_value.
        -:  143: */
        -:  144:static ecma_value_t
    #####:  145:ecma_builtin_async_from_sync_iterator_prototype_next (ecma_async_from_sync_iterator_object_t *iter_p, /**< iterator
        -:  146:                                                                                                       *   record*/
        -:  147:                                                      ecma_object_t *capability_p, /**< promise capability */
        -:  148:                                                      ecma_value_t value) /**< routine's 'value' argument */
        -:  149:{
        -:  150:  /* 5. */
    #####:  151:  ecma_value_t next_result =
    #####:  152:    ecma_op_iterator_next (iter_p->header.u.cls.u3.sync_iterator, iter_p->sync_next_method, value);
        -:  153:
        -:  154:  /* 6. */
    #####:  155:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&next_result, capability_p)))
        -:  156:  {
    #####:  157:    return next_result;
        -:  158:  }
        -:  159:
        -:  160:  /* 7. */
    #####:  161:  ecma_value_t result = ecma_op_async_from_sync_iterator_prototype_continuation (next_result, capability_p);
    #####:  162:  ecma_free_value (next_result);
        -:  163:
    #####:  164:  return result;
        -:  165:} /* ecma_builtin_async_from_sync_iterator_prototype_next */
        -:  166:
        -:  167:/**
        -:  168: * The %AsyncFromSyncIteratorPrototype% object's 'return' and 'throw' routines
        -:  169: *
        -:  170: * See also:
        -:  171: *         ECMAScript v11, 25.1.4.2.2
        -:  172: *         ECMAScript v11, 25.1.4.2.3
        -:  173: *
        -:  174: * @return ecma value
        -:  175: *         Returned value must be freed with ecma_free_value.
        -:  176: */
        -:  177:static ecma_value_t
    #####:  178:ecma_builtin_async_from_sync_iterator_prototype_do (ecma_async_from_sync_iterator_object_t *iter_p, /**< iterator
        -:  179:                                                                                                     *   record*/
        -:  180:                                                    ecma_object_t *capability_obj_p, /**< promise capability */
        -:  181:                                                    ecma_value_t value, /**< routine's 'value' argument */
        -:  182:                                                    lit_magic_string_id_t method_id) /**< method id */
        -:  183:{
        -:  184:  /* 5. */
    #####:  185:  ecma_value_t sync_iterator = iter_p->header.u.cls.u3.sync_iterator;
    #####:  186:  ecma_value_t method = ecma_op_get_method_by_magic_id (sync_iterator, method_id);
        -:  187:
        -:  188:  /* 6. */
    #####:  189:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&method, capability_obj_p)))
        -:  190:  {
    #####:  191:    return method;
        -:  192:  }
        -:  193:
    #####:  194:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
        -:  195:
    #####:  196:  ecma_value_t call_arg;
        -:  197:  uint32_t arg_size;
        -:  198:
    #####:  199:  if (ecma_is_value_empty (value))
        -:  200:  {
    #####:  201:    arg_size = 0;
    #####:  202:    call_arg = ECMA_VALUE_UNDEFINED;
        -:  203:  }
        -:  204:  else
        -:  205:  {
    #####:  206:    arg_size = 1;
    #####:  207:    call_arg = value;
        -:  208:  }
        -:  209:
        -:  210:  /* 7. */
    #####:  211:  if (ecma_is_value_undefined (method))
        -:  212:  {
        -:  213:    ecma_value_t func_obj;
        -:  214:
    #####:  215:    if (method_id == LIT_MAGIC_STRING_RETURN)
        -:  216:    {
        -:  217:      /* 7.a. */
    #####:  218:      call_arg = ecma_create_iter_result_object (call_arg, ECMA_VALUE_TRUE);
    #####:  219:      arg_size = 1;
    #####:  220:      func_obj = capability_p->resolve;
        -:  221:    }
        -:  222:    else
        -:  223:    {
    #####:  224:      func_obj = capability_p->reject;
        -:  225:    }
        -:  226:
        -:  227:    /* 7.b. */
    #####:  228:    ecma_value_t resolve =
    #####:  229:      ecma_op_function_call (ecma_get_object_from_value (func_obj), ECMA_VALUE_UNDEFINED, &call_arg, arg_size);
    #####:  230:    JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (resolve));
    #####:  231:    ecma_free_value (resolve);
        -:  232:
    #####:  233:    if (method_id == LIT_MAGIC_STRING_RETURN)
        -:  234:    {
    #####:  235:      ecma_free_value (call_arg);
        -:  236:    }
        -:  237:
        -:  238:    /* 7.c. */
    #####:  239:    return ecma_copy_value (capability_p->header.u.cls.u3.promise);
        -:  240:  }
        -:  241:
        -:  242:  /* 8. */
    #####:  243:  ecma_value_t call_result = ecma_op_function_validated_call (method, sync_iterator, &call_arg, arg_size);
    #####:  244:  ecma_free_value (method);
        -:  245:
        -:  246:  /* 9. */
    #####:  247:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&call_result, capability_obj_p)))
        -:  248:  {
    #####:  249:    return call_result;
        -:  250:  }
        -:  251:
        -:  252:  /* 10. */
    #####:  253:  if (!ecma_is_value_object (call_result))
        -:  254:  {
    #####:  255:    ecma_free_value (call_result);
        -:  256:
        -:  257:#if JERRY_ERROR_MESSAGES
    #####:  258:    const lit_utf8_byte_t *msg_p = (lit_utf8_byte_t *) ecma_get_error_msg (ECMA_ERR_ARGUMENT_IS_NOT_AN_OBJECT);
    #####:  259:    lit_utf8_size_t msg_size = ecma_get_error_size (ECMA_ERR_ARGUMENT_IS_NOT_AN_OBJECT);
    #####:  260:    ecma_string_t *error_msg_p = ecma_new_ecma_string_from_ascii (msg_p, msg_size);
        -:  261:#else /* !JERRY_ERROR_MESSAGES */
        -:  262:    ecma_string_t *error_msg_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
        -:  263:#endif /* JERRY_ERROR_MESSAGES */
        -:  264:
    #####:  265:    ecma_object_t *type_error_obj_p = ecma_new_standard_error (JERRY_ERROR_TYPE, error_msg_p);
        -:  266:
        -:  267:#if JERRY_ERROR_MESSAGES
    #####:  268:    ecma_deref_ecma_string (error_msg_p);
        -:  269:#endif /* JERRY_ERROR_MESSAGES */
        -:  270:
    #####:  271:    ecma_value_t type_error = ecma_make_object_value (type_error_obj_p);
        -:  272:
        -:  273:    /* 10.a. */
    #####:  274:    ecma_value_t reject =
    #####:  275:      ecma_op_function_call (ecma_get_object_from_value (capability_p->reject), ECMA_VALUE_UNDEFINED, &type_error, 1);
    #####:  276:    JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (reject));
    #####:  277:    ecma_deref_object (type_error_obj_p);
    #####:  278:    ecma_free_value (reject);
        -:  279:
        -:  280:    /* 10.b. */
    #####:  281:    return ecma_copy_value (capability_p->header.u.cls.u3.promise);
        -:  282:  }
        -:  283:
    #####:  284:  ecma_value_t result = ecma_op_async_from_sync_iterator_prototype_continuation (call_result, capability_obj_p);
    #####:  285:  ecma_free_value (call_result);
        -:  286:
    #####:  287:  return result;
        -:  288:} /* ecma_builtin_async_from_sync_iterator_prototype_do */
        -:  289:
        -:  290:/**
        -:  291: * Dispatcher of the %AsyncFromSyncIteratorPrototype% built-in's routines
        -:  292: *
        -:  293: * @return ecma value
        -:  294: *         Returned value must be freed with ecma_free_value.
        -:  295: */
        -:  296:ecma_value_t
    #####:  297:ecma_builtin_async_from_sync_iterator_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide
        -:  298:                                                                                               *   routine
        -:  299:                                                                                               *   identifier */
        -:  300:                                                                  ecma_value_t this_arg, /**< 'this' argument value */
        -:  301:                                                                  const ecma_value_t arguments_list_p[], /**< list of
        -:  302:                                                                                                          *   arguments
        -:  303:                                                                                                          *   passed to
        -:  304:                                                                                                          *   routine */
        -:  305:                                                                  uint32_t arguments_number) /**< length of
        -:  306:                                                                                              *   arguments' list */
        -:  307:{
        -:  308:  JERRY_UNUSED (arguments_number);
    #####:  309:  JERRY_ASSERT (ecma_is_value_object (this_arg));
        -:  310:
    #####:  311:  ecma_object_t *this_obj_p = ecma_get_object_from_value (this_arg);
        -:  312:
    #####:  313:  JERRY_ASSERT (ecma_object_class_is (this_obj_p, ECMA_OBJECT_CLASS_ASYNC_FROM_SYNC_ITERATOR));
        -:  314:
    #####:  315:  ecma_async_from_sync_iterator_object_t *iter_p = (ecma_async_from_sync_iterator_object_t *) this_obj_p;
        -:  316:
    #####:  317:  ecma_value_t builtin_promise = ecma_make_object_value (ecma_builtin_get (ECMA_BUILTIN_ID_PROMISE));
    #####:  318:  ecma_object_t *capability_p = ecma_promise_new_capability (builtin_promise, ECMA_VALUE_UNDEFINED);
    #####:  319:  JERRY_ASSERT (capability_p != NULL);
        -:  320:
        -:  321:  ecma_value_t result;
    #####:  322:  ecma_value_t arg = (arguments_number == 0 ? ECMA_VALUE_EMPTY : arguments_list_p[0]);
        -:  323:
    #####:  324:  switch (builtin_routine_id)
        -:  325:  {
    #####:  326:    case ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_NEXT:
        -:  327:    {
    #####:  328:      result = ecma_builtin_async_from_sync_iterator_prototype_next (iter_p, capability_p, arg);
    #####:  329:      break;
        -:  330:    }
    #####:  331:    case ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_RETURN:
        -:  332:    {
    #####:  333:      result = ecma_builtin_async_from_sync_iterator_prototype_do (iter_p, capability_p, arg, LIT_MAGIC_STRING_RETURN);
    #####:  334:      break;
        -:  335:    }
    #####:  336:    case ECMA_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE_ROUTINE_THROW:
        -:  337:    {
    #####:  338:      result = ecma_builtin_async_from_sync_iterator_prototype_do (iter_p, capability_p, arg, LIT_MAGIC_STRING_THROW);
    #####:  339:      break;
        -:  340:    }
    #####:  341:    default:
        -:  342:    {
    #####:  343:      JERRY_UNREACHABLE ();
        -:  344:      break;
        -:  345:    }
        -:  346:  }
        -:  347:
    #####:  348:  ecma_deref_object (capability_p);
        -:  349:
    #####:  350:  return result;
        -:  351:} /* ecma_builtin_async_from_sync_iterator_prototype_dispatch_routine */
        -:  352:
        -:  353:/**
        -:  354: * @}
        -:  355: * @}
        -:  356: * @}
        -:  357: */
        -:  358:
        -:  359:#endif /* JERRY_ESNEXT */
