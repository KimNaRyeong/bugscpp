        -:    0:Source:/home/workspace/tests/unit-core/test-module-import-meta.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-port.h"
        -:   17:#include "jerryscript.h"
        -:   18:
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static int counter = 0;
        -:   22:static jerry_value_t global_module_value;
        -:   23:
        -:   24:static jerry_value_t
    #####:   25:global_assert (const jerry_call_info_t *call_info_p, /**< call information */
        -:   26:               const jerry_value_t args_p[], /**< arguments list */
        -:   27:               const jerry_length_t args_cnt) /**< arguments length */
        -:   28:{
        -:   29:  JERRY_UNUSED (call_info_p);
        -:   30:
    #####:   31:  TEST_ASSERT (args_cnt == 1 && jerry_value_is_true (args_p[0]));
    #####:   32:  return jerry_boolean (true);
        -:   33:} /* global_assert */
        -:   34:
        -:   35:static void
    #####:   36:register_assert (void)
        -:   37:{
    #####:   38:  jerry_value_t global_object_value = jerry_current_realm ();
        -:   39:
    #####:   40:  jerry_value_t function_value = jerry_function_external (global_assert);
    #####:   41:  jerry_value_t function_name_value = jerry_string_sz ("assert");
    #####:   42:  jerry_value_t result_value = jerry_object_set (global_object_value, function_name_value, function_value);
        -:   43:
    #####:   44:  jerry_value_free (function_name_value);
    #####:   45:  jerry_value_free (function_value);
    #####:   46:  jerry_value_free (global_object_value);
        -:   47:
    #####:   48:  TEST_ASSERT (jerry_value_is_true (result_value));
    #####:   49:  jerry_value_free (result_value);
    #####:   50:} /* register_assert */
        -:   51:
        -:   52:static void
    #####:   53:module_import_meta_callback (const jerry_value_t module, /**< module */
        -:   54:                             const jerry_value_t meta_object, /**< import.meta object */
        -:   55:                             void *user_p) /**< user pointer */
        -:   56:{
    #####:   57:  TEST_ASSERT (user_p == (void *) &counter);
    #####:   58:  TEST_ASSERT (module == global_module_value);
        -:   59:
    #####:   60:  jerry_value_t property_name_value = jerry_string_sz ("prop");
    #####:   61:  jerry_value_t result_value = jerry_object_set (meta_object, property_name_value, property_name_value);
    #####:   62:  jerry_value_free (result_value);
    #####:   63:  jerry_value_free (property_name_value);
        -:   64:
    #####:   65:  counter++;
    #####:   66:} /* module_import_meta_callback */
        -:   67:
        -:   68:static void
    #####:   69:test_syntax_error (const char *source_p, /**< source code */
        -:   70:                   const jerry_parse_options_t *options_p) /**< parse options */
        -:   71:{
    #####:   72:  jerry_value_t result_value = jerry_parse ((const jerry_char_t *) source_p, strlen (source_p), options_p);
    #####:   73:  TEST_ASSERT (jerry_value_is_exception (result_value) && jerry_error_type (result_value) == JERRY_ERROR_SYNTAX);
    #####:   74:  jerry_value_free (result_value);
    #####:   75:} /* test_syntax_error */
        -:   76:
        -:   77:static void
    #####:   78:run_module (const char *source_p, /* source code */
        -:   79:            jerry_parse_options_t *parse_options_p) /* parse options */
        -:   80:{
    #####:   81:  global_module_value = jerry_parse ((const jerry_char_t *) source_p, strlen (source_p), parse_options_p);
    #####:   82:  TEST_ASSERT (!jerry_value_is_exception (global_module_value));
        -:   83:
    #####:   84:  jerry_value_t result_value = jerry_module_link (global_module_value, NULL, NULL);
    #####:   85:  TEST_ASSERT (!jerry_value_is_exception (result_value));
    #####:   86:  jerry_value_free (result_value);
        -:   87:
    #####:   88:  result_value = jerry_module_evaluate (global_module_value);
        -:   89:
    #####:   90:  jerry_value_free (global_module_value);
        -:   91:
    #####:   92:  TEST_ASSERT (!jerry_value_is_exception (result_value));
    #####:   93:  jerry_value_free (result_value);
    #####:   94:} /* run_module */
        -:   95:
        -:   96:int
    #####:   97:main (void)
        -:   98:{
    #####:   99:  jerry_init (JERRY_INIT_EMPTY);
        -:  100:
    #####:  101:  if (!jerry_feature_enabled (JERRY_FEATURE_MODULE))
        -:  102:  {
    #####:  103:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Module is disabled!\n");
    #####:  104:    jerry_cleanup ();
    #####:  105:    return 0;
        -:  106:  }
        -:  107:
    #####:  108:  register_assert ();
    #####:  109:  jerry_module_on_import_meta (module_import_meta_callback, (void *) &counter);
        -:  110:
        -:  111:  /* Syntax errors. */
    #####:  112:  test_syntax_error ("import.meta", NULL);
    #####:  113:  test_syntax_error ("var a = import.meta", NULL);
        -:  114:
        -:  115:  jerry_parse_options_t parse_options;
    #####:  116:  parse_options.options = JERRY_PARSE_MODULE;
        -:  117:
    #####:  118:  test_syntax_error ("import.m\\u0065ta", &parse_options);
    #####:  119:  test_syntax_error ("import.invalid", &parse_options);
        -:  120:
    #####:  121:  counter = 0;
        -:  122:
    #####:  123:  run_module (TEST_STRING_LITERAL ("assert(typeof import.meta === 'object')\n"), &parse_options);
        -:  124:
    #####:  125:  run_module (TEST_STRING_LITERAL ("assert(Object.getPrototypeOf(import.meta) === null)\n"), &parse_options);
        -:  126:
    #####:  127:  run_module (TEST_STRING_LITERAL ("var meta = import.meta\n"
        -:  128:                                   "assert(import.meta === meta)\n"
        -:  129:                                   "assert(import.meta === meta)\n"
        -:  130:                                   "function f() {\n"
        -:  131:                                   "  assert(import.meta === meta)\n"
        -:  132:                                   "}\n"
        -:  133:                                   "f()\n"),
        -:  134:              &parse_options);
        -:  135:
    #####:  136:  run_module (TEST_STRING_LITERAL ("import.meta.x = 5.5\n"
        -:  137:                                   "assert(import.meta.x === 5.5)\n"),
        -:  138:              &parse_options);
        -:  139:
    #####:  140:  run_module (TEST_STRING_LITERAL ("assert(import.meta.prop === 'prop')\n"
        -:  141:                                   "function f() {\n"
        -:  142:                                   "  import.meta.prop = 6.25\n"
        -:  143:                                   "  import.meta.prop2 = 's'\n"
        -:  144:                                   "\n"
        -:  145:                                   "  return function() {\n"
        -:  146:                                   "    assert(import.meta.prop === 6.25)\n"
        -:  147:                                   "    assert(import.meta.prop2 === 's')\n"
        -:  148:                                   "  }\n"
        -:  149:                                   "}\n"
        -:  150:                                   "f()()\n"),
        -:  151:              &parse_options);
        -:  152:
    #####:  153:  TEST_ASSERT (counter == 5);
        -:  154:
    #####:  155:  jerry_cleanup ();
    #####:  156:  return 0;
        -:  157:} /* main */
