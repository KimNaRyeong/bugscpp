        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-intrinsic.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-array-object.h"
        -:   17:#include "ecma-arraybuffer-object.h"
        -:   18:#include "ecma-builtin-helpers.h"
        -:   19:#include "ecma-builtins.h"
        -:   20:#include "ecma-container-object.h"
        -:   21:#include "ecma-gc.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-string-object.h"
        -:   24:#include "ecma-typedarray-object.h"
        -:   25:
        -:   26:#include "lit-char-helpers.h"
        -:   27:
        -:   28:#if JERRY_ESNEXT
        -:   29:
        -:   30:#define ECMA_BUILTINS_INTERNAL
        -:   31:#include "ecma-builtins-internal.h"
        -:   32:
        -:   33:/**
        -:   34: * This object has a custom dispatch function.
        -:   35: */
        -:   36:#define BUILTIN_CUSTOM_DISPATCH
        -:   37:
        -:   38:/**
        -:   39: * List of built-in routine identifiers.
        -:   40: */
        -:   41:enum
        -:   42:{
        -:   43:  ECMA_INTRINSIC_ROUTINE_START = 0,
        -:   44:  ECMA_INTRINSIC_ARRAY_PROTOTYPE_VALUES,
        -:   45:  ECMA_INTRINSIC_TYPEDARRAY_PROTOTYPE_VALUES,
        -:   46:  ECMA_INTRINSIC_MAP_PROTOTYPE_ENTRIES,
        -:   47:  ECMA_INTRINSIC_SET_PROTOTYPE_VALUES,
        -:   48:  ECMA_INTRINSIC_ARRAY_TO_STRING,
        -:   49:  ECMA_INTRINSIC_DATE_TO_UTC_STRING,
        -:   50:  ECMA_INTRINSIC_PARSE_FLOAT,
        -:   51:  ECMA_INTRINSIC_PARSE_INT,
        -:   52:  ECMA_INTRINSIC_STRING_TRIM_START,
        -:   53:  ECMA_INTRINSIC_STRING_TRIM_END,
        -:   54:};
        -:   55:
        -:   56:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-intrinsic.inc.h"
        -:   57:#define BUILTIN_UNDERSCORED_ID  intrinsic
        -:   58:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   59:
        -:   60:/** \addtogroup ecma ECMA
        -:   61: * @{
        -:   62: *
        -:   63: * \addtogroup ecmabuiltins
        -:   64: * @{
        -:   65: *
        -:   66: * \addtogroup intrinsic ECMA Intrinsic object built-in
        -:   67: * @{
        -:   68: */
        -:   69:
        -:   70:/**
        -:   71: * The %ArrayProto_values% intrinsic routine
        -:   72: *
        -:   73: * See also:
        -:   74: *          ECMA-262 v5, 15.4.4.4
        -:   75: *
        -:   76: * @return ecma value
        -:   77: *         Returned value must be freed with ecma_free_value.
        -:   78: */
        -:   79:static ecma_value_t
    #####:   80:ecma_builtin_intrinsic_array_prototype_values (ecma_value_t this_value) /**< this argument */
        -:   81:{
    #####:   82:  ecma_value_t this_obj = ecma_op_to_object (this_value);
        -:   83:
    #####:   84:  if (ECMA_IS_VALUE_ERROR (this_obj))
        -:   85:  {
    #####:   86:    return this_obj;
        -:   87:  }
        -:   88:
    #####:   89:  ecma_object_t *this_obj_p = ecma_get_object_from_value (this_obj);
        -:   90:
    #####:   91:  ecma_value_t ret_value = ecma_op_create_array_iterator (this_obj_p, ECMA_ITERATOR_VALUES);
        -:   92:
    #####:   93:  ecma_deref_object (this_obj_p);
        -:   94:
    #####:   95:  return ret_value;
        -:   96:} /* ecma_builtin_intrinsic_array_prototype_values */
        -:   97:
        -:   98:/**
        -:   99: * The Map.prototype entries and [@@iterator] routines
        -:  100: *
        -:  101: * See also:
        -:  102: *          ECMA-262 v6, 23.1.3.4
        -:  103: *          ECMA-262 v6, 23.1.3.12
        -:  104: *
        -:  105: * @return ecma value
        -:  106: *         Returned value must be freed with ecma_free_value.
        -:  107: */
        -:  108:static ecma_value_t
    #####:  109:ecma_builtin_intrinsic_map_prototype_entries (ecma_value_t this_value)
        -:  110:{
    #####:  111:  ecma_extended_object_t *map_object_p = ecma_op_container_get_object (this_value, LIT_MAGIC_STRING_MAP_UL);
        -:  112:
    #####:  113:  if (map_object_p == NULL)
        -:  114:  {
    #####:  115:    return ECMA_VALUE_ERROR;
        -:  116:  }
        -:  117:
    #####:  118:  return ecma_op_container_create_iterator (this_value,
        -:  119:                                            ECMA_BUILTIN_ID_MAP_ITERATOR_PROTOTYPE,
        -:  120:                                            ECMA_OBJECT_CLASS_MAP_ITERATOR,
        -:  121:                                            ECMA_ITERATOR_ENTRIES);
        -:  122:} /* ecma_builtin_intrinsic_map_prototype_entries */
        -:  123:
        -:  124:/**
        -:  125: * The Set.prototype values, keys and [@@iterator] routines
        -:  126: *
        -:  127: * See also:
        -:  128: *          ECMA-262 v6, 23.2.3.8
        -:  129: *          ECMA-262 v6, 23.2.3.10
        -:  130: *
        -:  131: * @return ecma value
        -:  132: *         Returned value must be freed with ecma_free_value.
        -:  133: */
        -:  134:static ecma_value_t
    #####:  135:ecma_builtin_intrinsic_set_prototype_values (ecma_value_t this_value)
        -:  136:{
    #####:  137:  ecma_extended_object_t *map_object_p = ecma_op_container_get_object (this_value, LIT_MAGIC_STRING_SET_UL);
        -:  138:
    #####:  139:  if (map_object_p == NULL)
        -:  140:  {
    #####:  141:    return ECMA_VALUE_ERROR;
        -:  142:  }
        -:  143:
    #####:  144:  return ecma_op_container_create_iterator (this_value,
        -:  145:                                            ECMA_BUILTIN_ID_SET_ITERATOR_PROTOTYPE,
        -:  146:                                            ECMA_OBJECT_CLASS_SET_ITERATOR,
        -:  147:                                            ECMA_ITERATOR_VALUES);
        -:  148:} /* ecma_builtin_intrinsic_set_prototype_values */
        -:  149:
        -:  150:/**
        -:  151: * Dispatcher of the built-in's routines
        -:  152: *
        -:  153: * @return ecma value
        -:  154: *         Returned value must be freed with ecma_free_value.
        -:  155: */
        -:  156:ecma_value_t
    #####:  157:ecma_builtin_intrinsic_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  158:                                         ecma_value_t this_arg, /**< 'this' argument value */
        -:  159:                                         const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  160:                                                                                 *   passed to routine */
        -:  161:                                         uint32_t arguments_number) /**< length of arguments' list */
        -:  162:{
        -:  163:  JERRY_UNUSED (arguments_number);
        -:  164:
    #####:  165:  switch (builtin_routine_id)
        -:  166:  {
    #####:  167:    case ECMA_INTRINSIC_ARRAY_PROTOTYPE_VALUES:
        -:  168:    {
    #####:  169:      return ecma_builtin_intrinsic_array_prototype_values (this_arg);
        -:  170:    }
    #####:  171:    case ECMA_INTRINSIC_TYPEDARRAY_PROTOTYPE_VALUES:
        -:  172:    {
    #####:  173:      if (!ecma_is_typedarray (this_arg))
        -:  174:      {
    #####:  175:        return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_TYPED_ARRAY);
        -:  176:      }
        -:  177:
    #####:  178:      if (ecma_arraybuffer_is_detached (ecma_typedarray_get_arraybuffer (ecma_get_object_from_value (this_arg))))
        -:  179:      {
    #####:  180:        return ecma_raise_type_error (ECMA_ERR_ARRAYBUFFER_IS_DETACHED);
        -:  181:      }
        -:  182:
    #####:  183:      return ecma_typedarray_iterators_helper (this_arg, ECMA_ITERATOR_VALUES);
        -:  184:    }
    #####:  185:    case ECMA_INTRINSIC_SET_PROTOTYPE_VALUES:
        -:  186:    {
    #####:  187:      return ecma_builtin_intrinsic_set_prototype_values (this_arg);
        -:  188:    }
    #####:  189:    case ECMA_INTRINSIC_MAP_PROTOTYPE_ENTRIES:
        -:  190:    {
    #####:  191:      return ecma_builtin_intrinsic_map_prototype_entries (this_arg);
        -:  192:    }
    #####:  193:    case ECMA_INTRINSIC_ARRAY_TO_STRING:
        -:  194:    {
    #####:  195:      ecma_value_t this_obj = ecma_op_to_object (this_arg);
    #####:  196:      if (ECMA_IS_VALUE_ERROR (this_obj))
        -:  197:      {
    #####:  198:        return this_obj;
        -:  199:      }
        -:  200:
    #####:  201:      ecma_value_t result = ecma_array_object_to_string (this_obj);
    #####:  202:      ecma_deref_object (ecma_get_object_from_value (this_obj));
        -:  203:
    #####:  204:      return result;
        -:  205:    }
    #####:  206:    case ECMA_INTRINSIC_DATE_TO_UTC_STRING:
        -:  207:    {
    #####:  208:      if (!ecma_is_value_object (this_arg)
    #####:  209:          || !ecma_object_class_is (ecma_get_object_from_value (this_arg), ECMA_OBJECT_CLASS_DATE))
        -:  210:      {
    #####:  211:        return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_DATE_OBJECT);
        -:  212:      }
        -:  213:
        -:  214:#if JERRY_ESNEXT
    #####:  215:      ecma_number_t *date_value_p = &((ecma_date_object_t *) ecma_get_object_from_value (this_arg))->date_value;
        -:  216:#else /* !JERRY_ESNEXT */
        -:  217:      ecma_extended_object_t *arg_ext_object_p = (ecma_extended_object_t *) ecma_get_object_from_value (argument);
        -:  218:      ecma_number_t *date_value_p =
        -:  219:        ECMA_GET_INTERNAL_VALUE_POINTER (ecma_number_t, arg_ext_object_p->u.class_prop.u.date);
        -:  220:#endif /* JERRY_ESNEXT */
        -:  221:
    #####:  222:      if (ecma_number_is_nan (*date_value_p))
        -:  223:      {
    #####:  224:        return ecma_make_magic_string_value (LIT_MAGIC_STRING_INVALID_DATE_UL);
        -:  225:      }
        -:  226:
    #####:  227:      return ecma_date_value_to_utc_string (*date_value_p);
        -:  228:    }
    #####:  229:    case ECMA_INTRINSIC_STRING_TRIM_START:
        -:  230:    case ECMA_INTRINSIC_STRING_TRIM_END:
        -:  231:    {
    #####:  232:      if (!ecma_op_require_object_coercible (this_arg))
        -:  233:      {
    #####:  234:        return ECMA_VALUE_ERROR;
        -:  235:      }
        -:  236:
    #####:  237:      ecma_string_t *to_str_p = ecma_op_to_string (this_arg);
    #####:  238:      if (to_str_p == NULL)
        -:  239:      {
    #####:  240:        return ECMA_VALUE_ERROR;
        -:  241:      }
        -:  242:
    #####:  243:      ECMA_STRING_TO_UTF8_STRING (to_str_p, start_p, input_start_size);
        -:  244:
        -:  245:      lit_utf8_size_t size;
    #####:  246:      const lit_utf8_byte_t *input_start_p = start_p;
    #####:  247:      const lit_utf8_byte_t *input_str_end_p = start_p + input_start_size;
        -:  248:
        -:  249:      ecma_string_t *ret_str_p;
    #####:  250:      if (builtin_routine_id == ECMA_INTRINSIC_STRING_TRIM_START)
        -:  251:      {
    #####:  252:        const lit_utf8_byte_t *new_start_p = ecma_string_trim_front (input_start_p, input_str_end_p);
    #####:  253:        size = (lit_utf8_size_t) (input_str_end_p - new_start_p);
    #####:  254:        ret_str_p = ecma_new_ecma_string_from_utf8 (new_start_p, size);
        -:  255:      }
        -:  256:      else
        -:  257:      {
    #####:  258:        const lit_utf8_byte_t *new_end_p = ecma_string_trim_back (input_start_p, input_str_end_p);
    #####:  259:        size = (lit_utf8_size_t) (new_end_p - input_start_p);
    #####:  260:        ret_str_p = ecma_new_ecma_string_from_utf8 (input_start_p, size);
        -:  261:      }
        -:  262:
    #####:  263:      ECMA_FINALIZE_UTF8_STRING (start_p, input_start_size);
    #####:  264:      ecma_value_t result = ecma_make_string_value (ret_str_p);
    #####:  265:      ecma_deref_ecma_string (to_str_p);
    #####:  266:      return result;
        -:  267:    }
    #####:  268:    default:
        -:  269:    {
    #####:  270:      JERRY_ASSERT (builtin_routine_id == ECMA_INTRINSIC_PARSE_INT || builtin_routine_id == ECMA_INTRINSIC_PARSE_FLOAT);
        -:  271:
    #####:  272:      ecma_string_t *str_p = ecma_op_to_string (arguments_list_p[0]);
        -:  273:
    #####:  274:      if (JERRY_UNLIKELY (str_p == NULL))
        -:  275:      {
    #####:  276:        return ECMA_VALUE_ERROR;
        -:  277:      }
        -:  278:
        -:  279:      ecma_value_t result;
    #####:  280:      ECMA_STRING_TO_UTF8_STRING (str_p, string_buff, string_buff_size);
        -:  281:
    #####:  282:      if (builtin_routine_id == ECMA_INTRINSIC_PARSE_INT)
        -:  283:      {
    #####:  284:        result = ecma_number_parse_int (string_buff, string_buff_size, arguments_list_p[1]);
        -:  285:      }
        -:  286:      else
        -:  287:      {
    #####:  288:        JERRY_ASSERT (builtin_routine_id == ECMA_INTRINSIC_PARSE_FLOAT);
    #####:  289:        result = ecma_number_parse_float (string_buff, string_buff_size);
        -:  290:      }
        -:  291:
    #####:  292:      ECMA_FINALIZE_UTF8_STRING (string_buff, string_buff_size);
    #####:  293:      ecma_deref_ecma_string (str_p);
    #####:  294:      return result;
        -:  295:    }
        -:  296:  }
        -:  297:} /* ecma_builtin_intrinsic_dispatch_routine */
        -:  298:
        -:  299:/**
        -:  300: * @}
        -:  301: * @}
        -:  302: * @}
        -:  303: */
        -:  304:
        -:  305:#endif /* JERRY_ESNEXT */
