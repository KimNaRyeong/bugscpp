        -:    0:Source:/home/workspace/tests/unit-core/test-api-iteratortype.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-port-default.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:typedef struct
        -:   23:{
        -:   24:  jerry_iterator_type_t type_info;
        -:   25:  jerry_value_t value;
        -:   26:  bool active;
        -:   27:} test_entry_t;
        -:   28:
        -:   29:#define ENTRY(TYPE, VALUE) \
        -:   30:  {                        \
        -:   31:    TYPE, VALUE, true      \
        -:   32:  }
        -:   33:#define ENTRY_IF(TYPE, VALUE, FEATURE)           \
        -:   34:  {                                              \
        -:   35:    TYPE, VALUE, jerry_feature_enabled (FEATURE) \
        -:   36:  }
        -:   37:#define EVALUATE(BUFF) (jerry_eval ((BUFF), sizeof ((BUFF)) - 1, JERRY_PARSE_NO_OPTS))
        -:   38:
        -:   39:int
    #####:   40:main (void)
        -:   41:{
    #####:   42:  TEST_INIT ();
        -:   43:
    #####:   44:  jerry_init (JERRY_INIT_EMPTY);
        -:   45:
    #####:   46:  const jerry_char_t array_iterator_keys[] = "[1, 2, 3].keys()";
    #####:   47:  const jerry_char_t array_iterator_values[] = "[1, 2, 3].values()";
    #####:   48:  const jerry_char_t array_iterator_entries[] = "[1, 2, 3].entries()";
    #####:   49:  const jerry_char_t array_iterator_symbol_iterator[] = "([1, 2, 3])[Symbol.iterator]()";
        -:   50:
    #####:   51:  const jerry_char_t typedarray_iterator_keys[] = "new Uint8Array([1, 2, 3]).keys()";
    #####:   52:  const jerry_char_t typedarray_iterator_values[] = "new Uint8Array([1, 2, 3]).values()";
    #####:   53:  const jerry_char_t typedarray_iterator_entries[] = "new Uint8Array([1, 2, 3]).entries()";
    #####:   54:  const jerry_char_t typedarray_iterator_symbol_iterator[] = "new Uint8Array([1, 2, 3])[Symbol.iterator]()";
        -:   55:
    #####:   56:  const jerry_char_t string_symbol_iterator[] = "('foo')[Symbol.iterator]()";
        -:   57:
    #####:   58:  const jerry_char_t map_iterator_keys[] = "new Map([1, 2, 3].entries()).keys()";
    #####:   59:  const jerry_char_t map_iterator_values[] = "new Map([1, 2, 3].entries()).values()";
    #####:   60:  const jerry_char_t map_iterator_entries[] = "new Map([1, 2, 3].entries()).entries()";
    #####:   61:  const jerry_char_t map_iterator_symbol_iterator[] = "new Map([1, 2, 3].entries())[Symbol.iterator]()";
        -:   62:
    #####:   63:  const jerry_char_t set_iterator_keys[] = "new Set([1, 2, 3]).keys()";
    #####:   64:  const jerry_char_t set_iterator_values[] = "new Set([1, 2, 3]).values()";
    #####:   65:  const jerry_char_t set_iterator_entries[] = "new Set([1, 2, 3]).entries()";
    #####:   66:  const jerry_char_t set_iterator_symbol_iterator[] = "new Set([1, 2, 3])[Symbol.iterator]()";
        -:   67:
    #####:   68:  test_entry_t entries[] = {
    #####:   69:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_number (-33.0)),
    #####:   70:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_boolean (true)),
    #####:   71:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_undefined ()),
    #####:   72:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_null ()),
    #####:   73:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_string_sz ("foo")),
    #####:   74:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_throw_sz (JERRY_ERROR_TYPE, "error")),
        -:   75:
    #####:   76:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_object ()),
    #####:   77:    ENTRY (JERRY_ITERATOR_TYPE_NONE, jerry_array (10)),
        -:   78:
    #####:   79:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (array_iterator_keys), JERRY_FEATURE_SYMBOL),
    #####:   80:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (array_iterator_values), JERRY_FEATURE_SYMBOL),
    #####:   81:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (array_iterator_entries), JERRY_FEATURE_SYMBOL),
    #####:   82:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (array_iterator_symbol_iterator), JERRY_FEATURE_SYMBOL),
        -:   83:
    #####:   84:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (typedarray_iterator_keys), JERRY_FEATURE_SYMBOL),
    #####:   85:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (typedarray_iterator_values), JERRY_FEATURE_SYMBOL),
    #####:   86:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (typedarray_iterator_entries), JERRY_FEATURE_SYMBOL),
    #####:   87:    ENTRY_IF (JERRY_ITERATOR_TYPE_ARRAY, EVALUATE (typedarray_iterator_symbol_iterator), JERRY_FEATURE_SYMBOL),
        -:   88:
    #####:   89:    ENTRY_IF (JERRY_ITERATOR_TYPE_STRING, EVALUATE (string_symbol_iterator), JERRY_FEATURE_SYMBOL),
        -:   90:
    #####:   91:    ENTRY_IF (JERRY_ITERATOR_TYPE_MAP, EVALUATE (map_iterator_keys), JERRY_FEATURE_MAP),
    #####:   92:    ENTRY_IF (JERRY_ITERATOR_TYPE_MAP, EVALUATE (map_iterator_values), JERRY_FEATURE_MAP),
    #####:   93:    ENTRY_IF (JERRY_ITERATOR_TYPE_MAP, EVALUATE (map_iterator_entries), JERRY_FEATURE_MAP),
    #####:   94:    ENTRY_IF (JERRY_ITERATOR_TYPE_MAP, EVALUATE (map_iterator_symbol_iterator), JERRY_FEATURE_MAP),
        -:   95:
    #####:   96:    ENTRY_IF (JERRY_ITERATOR_TYPE_SET, EVALUATE (set_iterator_keys), JERRY_FEATURE_SET),
    #####:   97:    ENTRY_IF (JERRY_ITERATOR_TYPE_SET, EVALUATE (set_iterator_values), JERRY_FEATURE_SET),
    #####:   98:    ENTRY_IF (JERRY_ITERATOR_TYPE_SET, EVALUATE (set_iterator_entries), JERRY_FEATURE_SET),
    #####:   99:    ENTRY_IF (JERRY_ITERATOR_TYPE_SET, EVALUATE (set_iterator_symbol_iterator), JERRY_FEATURE_SET),
        -:  100:  };
        -:  101:
    #####:  102:  for (size_t idx = 0; idx < sizeof (entries) / sizeof (entries[0]); idx++)
        -:  103:  {
    #####:  104:    jerry_iterator_type_t type_info = jerry_iterator_type (entries[idx].value);
    #####:  105:    TEST_ASSERT (!entries[idx].active || type_info == entries[idx].type_info);
    #####:  106:    jerry_value_free (entries[idx].value);
        -:  107:  }
        -:  108:
    #####:  109:  jerry_cleanup ();
        -:  110:
        -:  111:  return 0;
        -:  112:} /* main */
