        -:    0:Source:/home/workspace/jerry-math/acos.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: *
        -:   15: * This file is based on work under the following copyright and permission
        -:   16: * notice:
        -:   17: *
        -:   18: *     Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:   19: *
        -:   20: *     Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:   21: *     Permission to use, copy, modify, and distribute this
        -:   22: *     software is freely granted, provided that this notice
        -:   23: *     is preserved.
        -:   24: *
        -:   25: *     @(#)e_acos.c 1.3 95/01/18
        -:   26: */
        -:   27:
        -:   28:#include "jerry-math-internal.h"
        -:   29:
        -:   30:/* acos(x)
        -:   31: *
        -:   32: * Method:
        -:   33: *      acos(x)  = pi/2 - asin(x)
        -:   34: *      acos(-x) = pi/2 + asin(x)
        -:   35: * For |x|<=0.5
        -:   36: *      acos(x) = pi/2 - (x + x*x^2*R(x^2))     (see asin.c)
        -:   37: * For x>0.5
        -:   38: *      acos(x) = pi/2 - (pi/2 - 2asin(sqrt((1-x)/2)))
        -:   39: *              = 2asin(sqrt((1-x)/2))
        -:   40: *              = 2s + 2s*z*R(z)        ...z=(1-x)/2, s=sqrt(z)
        -:   41: *              = 2f + (2c + 2s*z*R(z))
        -:   42: *     where f=hi part of s, and c = (z-f*f)/(s+f) is the correction term
        -:   43: *     for f so that f+c ~ sqrt(z).
        -:   44: * For x<-0.5
        -:   45: *      acos(x) = pi - 2asin(sqrt((1-|x|)/2))
        -:   46: *              = pi - 0.5*(s+s*z*R(z)), where z=(1-|x|)/2,s=sqrt(z)
        -:   47: *
        -:   48: * Special cases:
        -:   49: *      if x is NaN, return x itself;
        -:   50: *      if |x|>1, return NaN with invalid signal.
        -:   51: *
        -:   52: * Function needed: sqrt
        -:   53: */
        -:   54:
        -:   55:#define one     1.00000000000000000000e+00 /* 0x3FF00000, 0x00000000 */
        -:   56:#define pi      3.14159265358979311600e+00 /* 0x400921FB, 0x54442D18 */
        -:   57:#define pio2_hi 1.57079632679489655800e+00 /* 0x3FF921FB, 0x54442D18 */
        -:   58:#define pio2_lo 6.12323399573676603587e-17 /* 0x3C91A626, 0x33145C07 */
        -:   59:#define pS0     1.66666666666666657415e-01 /* 0x3FC55555, 0x55555555 */
        -:   60:#define pS1     -3.25565818622400915405e-01 /* 0xBFD4D612, 0x03EB6F7D */
        -:   61:#define pS2     2.01212532134862925881e-01 /* 0x3FC9C155, 0x0E884455 */
        -:   62:#define pS3     -4.00555345006794114027e-02 /* 0xBFA48228, 0xB5688F3B */
        -:   63:#define pS4     7.91534994289814532176e-04 /* 0x3F49EFE0, 0x7501B288 */
        -:   64:#define pS5     3.47933107596021167570e-05 /* 0x3F023DE1, 0x0DFDF709 */
        -:   65:#define qS1     -2.40339491173441421878e+00 /* 0xC0033A27, 0x1C8A2D4B */
        -:   66:#define qS2     2.02094576023350569471e+00 /* 0x40002AE5, 0x9C598AC8 */
        -:   67:#define qS3     -6.88283971605453293030e-01 /* 0xBFE6066C, 0x1B8D0159 */
        -:   68:#define qS4     7.70381505559019352791e-02 /* 0x3FB3B8C5, 0xB12E9282 */
        -:   69:
        -:   70:double
    #####:   71:acos (double x)
        -:   72:{
        -:   73:  double z, p, q, r, w, s, c;
        -:   74:  int hx, ix;
        -:   75:
    #####:   76:  hx = __HI (x);
    #####:   77:  ix = hx & 0x7fffffff;
    #####:   78:  if (ix >= 0x3ff00000) /* |x| >= 1 */
        -:   79:  {
    #####:   80:    if (((ix - 0x3ff00000) | __LO (x)) == 0) /* |x| == 1 */
        -:   81:    {
    #####:   82:      if (hx > 0) /* acos(1) = 0  */
        -:   83:      {
        -:   84:        return 0.0;
        -:   85:      }
        -:   86:      else /* acos(-1) = pi */
        -:   87:      {
    #####:   88:        return pi + 2.0 * pio2_lo;
        -:   89:      }
        -:   90:    }
    #####:   91:    return NAN; /* acos(|x|>1) is NaN */
        -:   92:  }
    #####:   93:  if (ix < 0x3fe00000) /* |x| < 0.5 */
        -:   94:  {
    #####:   95:    if (ix <= 0x3c600000) /* if |x| < 2**-57 */
        -:   96:    {
        -:   97:      return pio2_hi + pio2_lo;
        -:   98:    }
    #####:   99:    z = x * x;
    #####:  100:    p = z * (pS0 + z * (pS1 + z * (pS2 + z * (pS3 + z * (pS4 + z * pS5)))));
    #####:  101:    q = one + z * (qS1 + z * (qS2 + z * (qS3 + z * qS4)));
    #####:  102:    r = p / q;
    #####:  103:    return pio2_hi - (x - (pio2_lo - x * r));
        -:  104:  }
    #####:  105:  else if (hx < 0) /* x < -0.5 */
        -:  106:  {
    #####:  107:    z = (one + x) * 0.5;
    #####:  108:    p = z * (pS0 + z * (pS1 + z * (pS2 + z * (pS3 + z * (pS4 + z * pS5)))));
    #####:  109:    q = one + z * (qS1 + z * (qS2 + z * (qS3 + z * qS4)));
    #####:  110:    s = sqrt (z);
    #####:  111:    r = p / q;
    #####:  112:    w = r * s - pio2_lo;
    #####:  113:    return pi - 2.0 * (s + w);
        -:  114:  }
        -:  115:  else /* x > 0.5 */
        -:  116:  {
        -:  117:    double_accessor df;
    #####:  118:    z = (one - x) * 0.5;
    #####:  119:    s = sqrt (z);
    #####:  120:    df.dbl = s;
    #####:  121:    df.as_int.lo = 0;
    #####:  122:    c = (z - df.dbl * df.dbl) / (s + df.dbl);
    #####:  123:    p = z * (pS0 + z * (pS1 + z * (pS2 + z * (pS3 + z * (pS4 + z * pS5)))));
    #####:  124:    q = one + z * (qS1 + z * (qS2 + z * (qS3 + z * qS4)));
    #####:  125:    r = p / q;
    #####:  126:    w = r * s + c;
    #####:  127:    return 2.0 * (df.dbl + w);
        -:  128:  }
        -:  129:} /* acos */
        -:  130:
        -:  131:#undef one
        -:  132:#undef pi
        -:  133:#undef pio2_hi
        -:  134:#undef pio2_lo
        -:  135:#undef pS0
        -:  136:#undef pS1
        -:  137:#undef pS2
        -:  138:#undef pS3
        -:  139:#undef pS4
        -:  140:#undef pS5
        -:  141:#undef qS1
        -:  142:#undef qS2
        -:  143:#undef qS3
        -:  144:#undef qS4
