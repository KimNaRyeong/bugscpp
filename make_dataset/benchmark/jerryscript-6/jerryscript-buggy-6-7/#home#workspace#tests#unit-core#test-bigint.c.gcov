        -:    0:Source:/home/workspace/tests/unit-core/test-bigint.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:int
    #####:   21:main (void)
        -:   22:{
    #####:   23:  if (!jerry_feature_enabled (JERRY_FEATURE_BIGINT))
        -:   24:  {
    #####:   25:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Bigint support is disabled!\n");
    #####:   26:    return 0;
        -:   27:  }
        -:   28:
    #####:   29:  jerry_init (JERRY_INIT_EMPTY);
        -:   30:
    #####:   31:  jerry_value_t string = jerry_string_sz ("0xfffffff1fffffff2fffffff3");
    #####:   32:  TEST_ASSERT (!jerry_value_is_exception (string));
        -:   33:
    #####:   34:  jerry_value_t bigint = jerry_value_to_bigint (string);
    #####:   35:  jerry_value_free (string);
        -:   36:
    #####:   37:  TEST_ASSERT (!jerry_value_is_exception (bigint));
    #####:   38:  TEST_ASSERT (jerry_value_is_bigint (bigint));
        -:   39:
    #####:   40:  string = jerry_value_to_string (bigint);
    #####:   41:  TEST_ASSERT (!jerry_value_is_exception (string));
        -:   42:
        -:   43:  static jerry_char_t str_buffer[64];
    #####:   44:  const char *expected_string_p = "79228162256009920505775652851";
        -:   45:
    #####:   46:  jerry_size_t size = jerry_string_to_buffer (string, JERRY_ENCODING_CESU8, str_buffer, sizeof (str_buffer));
    #####:   47:  TEST_ASSERT (size == strlen (expected_string_p));
    #####:   48:  TEST_ASSERT (memcmp (str_buffer, expected_string_p, size) == 0);
    #####:   49:  jerry_value_free (string);
        -:   50:
    #####:   51:  TEST_ASSERT (jerry_bigint_digit_count (bigint) == 2);
        -:   52:
        -:   53:  uint64_t digits_buffer[4];
        -:   54:  bool sign;
        -:   55:
    #####:   56:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:   57:  sign = true;
    #####:   58:  jerry_bigint_to_digits (bigint, digits_buffer, 0, &sign);
    #####:   59:  TEST_ASSERT (sign == false);
    #####:   60:  TEST_ASSERT (digits_buffer[0] == ~((uint64_t) 0));
    #####:   61:  TEST_ASSERT (digits_buffer[1] == ~((uint64_t) 0));
    #####:   62:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:   63:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:   64:
    #####:   65:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:   66:  sign = true;
    #####:   67:  jerry_bigint_to_digits (bigint, digits_buffer, 1, &sign);
    #####:   68:  TEST_ASSERT (sign == false);
    #####:   69:  TEST_ASSERT (digits_buffer[0] == 0xfffffff2fffffff3ull);
    #####:   70:  TEST_ASSERT (digits_buffer[1] == ~((uint64_t) 0));
    #####:   71:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:   72:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:   73:
    #####:   74:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:   75:  sign = true;
    #####:   76:  jerry_bigint_to_digits (bigint, digits_buffer, 2, &sign);
    #####:   77:  TEST_ASSERT (sign == false);
    #####:   78:  TEST_ASSERT (digits_buffer[0] == 0xfffffff2fffffff3ull);
    #####:   79:  TEST_ASSERT (digits_buffer[1] == 0xfffffff1ull);
    #####:   80:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:   81:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:   82:
    #####:   83:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:   84:  sign = true;
    #####:   85:  jerry_bigint_to_digits (bigint, digits_buffer, 3, &sign);
    #####:   86:  TEST_ASSERT (sign == false);
    #####:   87:  TEST_ASSERT (digits_buffer[0] == 0xfffffff2fffffff3ull);
    #####:   88:  TEST_ASSERT (digits_buffer[1] == 0xfffffff1ull);
    #####:   89:  TEST_ASSERT (digits_buffer[2] == 0);
    #####:   90:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:   91:
    #####:   92:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:   93:  jerry_bigint_to_digits (bigint, digits_buffer, 4, NULL);
    #####:   94:  TEST_ASSERT (digits_buffer[0] == 0xfffffff2fffffff3ull);
    #####:   95:  TEST_ASSERT (digits_buffer[1] == 0xfffffff1ull);
    #####:   96:  TEST_ASSERT (digits_buffer[2] == 0);
    #####:   97:  TEST_ASSERT (digits_buffer[3] == 0);
        -:   98:
    #####:   99:  jerry_value_free (bigint);
        -:  100:
    #####:  101:  digits_buffer[0] = 0;
    #####:  102:  digits_buffer[1] = 0;
    #####:  103:  digits_buffer[2] = 0;
        -:  104:  /* Sign of zero value is always positive, even if we set negative. */
    #####:  105:  bigint = jerry_bigint (digits_buffer, 3, true);
    #####:  106:  TEST_ASSERT (jerry_value_is_bigint (bigint));
    #####:  107:  TEST_ASSERT (jerry_bigint_digit_count (bigint) == 0);
        -:  108:
    #####:  109:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:  110:  sign = true;
    #####:  111:  jerry_bigint_to_digits (bigint, digits_buffer, 2, &sign);
    #####:  112:  TEST_ASSERT (sign == false);
    #####:  113:  TEST_ASSERT (digits_buffer[0] == 0);
    #####:  114:  TEST_ASSERT (digits_buffer[1] == 0);
    #####:  115:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:  116:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:  117:
    #####:  118:  jerry_value_free (bigint);
        -:  119:
    #####:  120:  digits_buffer[0] = 1;
    #####:  121:  digits_buffer[1] = 0;
    #####:  122:  digits_buffer[2] = 0;
    #####:  123:  digits_buffer[3] = 0;
    #####:  124:  bigint = jerry_bigint (digits_buffer, 4, true);
    #####:  125:  TEST_ASSERT (jerry_value_is_bigint (bigint));
    #####:  126:  TEST_ASSERT (jerry_bigint_digit_count (bigint) == 1);
        -:  127:
    #####:  128:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:  129:  sign = false;
    #####:  130:  jerry_bigint_to_digits (bigint, digits_buffer, 1, &sign);
    #####:  131:  TEST_ASSERT (sign == true);
    #####:  132:  TEST_ASSERT (digits_buffer[0] == 1);
    #####:  133:  TEST_ASSERT (digits_buffer[1] == ~((uint64_t) 0));
    #####:  134:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:  135:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:  136:
    #####:  137:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:  138:  sign = false;
    #####:  139:  jerry_bigint_to_digits (bigint, digits_buffer, 2, &sign);
    #####:  140:  TEST_ASSERT (sign == true);
    #####:  141:  TEST_ASSERT (digits_buffer[0] == 1);
    #####:  142:  TEST_ASSERT (digits_buffer[1] == 0);
    #####:  143:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:  144:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:  145:
    #####:  146:  jerry_value_free (bigint);
        -:  147:
    #####:  148:  digits_buffer[0] = 0;
    #####:  149:  digits_buffer[1] = 1;
    #####:  150:  digits_buffer[2] = 0;
    #####:  151:  digits_buffer[3] = 0;
    #####:  152:  bigint = jerry_bigint (digits_buffer, 4, true);
    #####:  153:  TEST_ASSERT (jerry_value_is_bigint (bigint));
    #####:  154:  TEST_ASSERT (jerry_bigint_digit_count (bigint) == 2);
        -:  155:
    #####:  156:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:  157:  sign = false;
    #####:  158:  jerry_bigint_to_digits (bigint, digits_buffer, 1, &sign);
    #####:  159:  TEST_ASSERT (sign == true);
    #####:  160:  TEST_ASSERT (digits_buffer[0] == 0);
    #####:  161:  TEST_ASSERT (digits_buffer[1] == ~((uint64_t) 0));
    #####:  162:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:  163:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:  164:
    #####:  165:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:  166:  sign = false;
    #####:  167:  jerry_bigint_to_digits (bigint, digits_buffer, 2, &sign);
    #####:  168:  TEST_ASSERT (sign == true);
    #####:  169:  TEST_ASSERT (digits_buffer[0] == 0);
    #####:  170:  TEST_ASSERT (digits_buffer[1] == 1);
    #####:  171:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:  172:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:  173:
    #####:  174:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:  175:  sign = false;
    #####:  176:  jerry_bigint_to_digits (bigint, digits_buffer, 3, &sign);
    #####:  177:  TEST_ASSERT (sign == true);
    #####:  178:  TEST_ASSERT (digits_buffer[0] == 0);
    #####:  179:  TEST_ASSERT (digits_buffer[1] == 1);
    #####:  180:  TEST_ASSERT (digits_buffer[2] == 0);
    #####:  181:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:  182:
    #####:  183:  jerry_value_free (bigint);
        -:  184:
    #####:  185:  jerry_cleanup ();
    #####:  186:  return 0;
        -:  187:} /* main */
