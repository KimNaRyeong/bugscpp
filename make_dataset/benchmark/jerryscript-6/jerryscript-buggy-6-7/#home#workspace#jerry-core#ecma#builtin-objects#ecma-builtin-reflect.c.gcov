        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-reflect.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-array-object.h"
        -:   17:#include "ecma-builtin-function-prototype.h"
        -:   18:#include "ecma-builtin-helpers.h"
        -:   19:#include "ecma-builtin-object.h"
        -:   20:#include "ecma-builtins.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-function-object.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-iterator-object.h"
        -:   25:#include "ecma-proxy-object.h"
        -:   26:
        -:   27:#include "jcontext.h"
        -:   28:
        -:   29:#if JERRY_BUILTIN_REFLECT
        -:   30:
        -:   31:#define ECMA_BUILTINS_INTERNAL
        -:   32:#include "ecma-builtins-internal.h"
        -:   33:
        -:   34:/**
        -:   35: * This object has a custom dispatch function.
        -:   36: */
        -:   37:#define BUILTIN_CUSTOM_DISPATCH
        -:   38:
        -:   39:/**
        -:   40: * List of built-in routine identifiers.
        -:   41: */
        -:   42:enum
        -:   43:{
        -:   44:  ECMA_REFLECT_OBJECT_ROUTINE_START = 0,
        -:   45:  ECMA_REFLECT_OBJECT_GET, /* ECMA-262 v6, 26.1.6 */
        -:   46:  ECMA_REFLECT_OBJECT_SET, /* ECMA-262 v6, 26.1.13 */
        -:   47:  ECMA_REFLECT_OBJECT_HAS, /* ECMA-262 v6, 26.1.9 */
        -:   48:  ECMA_REFLECT_OBJECT_DELETE_PROPERTY, /* ECMA-262 v6, 26.1.4 */
        -:   49:  ECMA_REFLECT_OBJECT_CONSTRUCT, /* ECMA-262, 26.1.2 */
        -:   50:  ECMA_REFLECT_OBJECT_OWN_KEYS, /* ECMA-262 v6, 26.1.11 */
        -:   51:  ECMA_REFLECT_OBJECT_GET_PROTOTYPE_OF, /* ECMA-262 v6, 26.1.8 */
        -:   52:  ECMA_REFLECT_OBJECT_SET_PROTOTYPE_OF, /* ECMA-262 v6, 26.1.14 */
        -:   53:  ECMA_REFLECT_OBJECT_APPLY, /* ECMA-262 v6, 26.1.1 */
        -:   54:  ECMA_REFLECT_OBJECT_DEFINE_PROPERTY, /* ECMA-262 v6, 26.1.3 */
        -:   55:  ECMA_REFLECT_OBJECT_GET_OWN_PROPERTY_DESCRIPTOR, /* ECMA-262 v6, 26.1.7 */
        -:   56:  ECMA_REFLECT_OBJECT_IS_EXTENSIBLE, /* ECMA-262 v6, 26.1.10 */
        -:   57:  ECMA_REFLECT_OBJECT_PREVENT_EXTENSIONS, /* ECMA-262 v6, 26.1.12 */
        -:   58:};
        -:   59:
        -:   60:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-reflect.inc.h"
        -:   61:#define BUILTIN_UNDERSCORED_ID  reflect
        -:   62:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   63:
        -:   64:/** \addtogroup ecma ECMA
        -:   65: * @{
        -:   66: *
        -:   67: * \addtogroup ecmabuiltins
        -:   68: * @{
        -:   69: *
        -:   70: * \addtogroup object ECMA Reflect object built-in
        -:   71: * @{
        -:   72: */
        -:   73:
        -:   74:/**
        -:   75: * Dispatcher for the built-in's routines.
        -:   76: *
        -:   77: * @return ecma value
        -:   78: *         Returned value must be freed with ecma_free_value.
        -:   79: */
        -:   80:ecma_value_t
    #####:   81:ecma_builtin_reflect_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:   82:                                       ecma_value_t this_arg, /**< 'this' argument value */
        -:   83:                                       const ecma_value_t arguments_list[], /**< list of arguments
        -:   84:                                                                             *   passed to routine */
        -:   85:                                       uint32_t arguments_number) /**< length of arguments' list */
        -:   86:{
        -:   87:  JERRY_UNUSED (this_arg);
        -:   88:
    #####:   89:  if (builtin_routine_id < ECMA_REFLECT_OBJECT_CONSTRUCT)
        -:   90:  {
        -:   91:    /* 1. */
    #####:   92:    if (arguments_number == 0 || !ecma_is_value_object (arguments_list[0]))
        -:   93:    {
    #####:   94:      return ecma_raise_type_error (ECMA_ERR_ARGUMENT_IS_NOT_AN_OBJECT);
        -:   95:    }
        -:   96:
        -:   97:    /* 2. */
    #####:   98:    ecma_string_t *name_str_p = ecma_op_to_property_key (arguments_list[1]);
        -:   99:
        -:  100:    /* 3. */
    #####:  101:    if (name_str_p == NULL)
        -:  102:    {
    #####:  103:      return ECMA_VALUE_ERROR;
        -:  104:    }
        -:  105:
        -:  106:    ecma_value_t ret_value;
    #####:  107:    ecma_object_t *target_p = ecma_get_object_from_value (arguments_list[0]);
    #####:  108:    switch (builtin_routine_id)
        -:  109:    {
    #####:  110:      case ECMA_REFLECT_OBJECT_GET:
        -:  111:      {
    #####:  112:        ecma_value_t receiver = arguments_list[0];
        -:  113:
        -:  114:        /* 4. */
    #####:  115:        if (arguments_number > 2)
        -:  116:        {
    #####:  117:          receiver = arguments_list[2];
        -:  118:        }
        -:  119:
    #####:  120:        ret_value = ecma_op_object_get_with_receiver (target_p, name_str_p, receiver);
    #####:  121:        break;
        -:  122:      }
        -:  123:
    #####:  124:      case ECMA_REFLECT_OBJECT_HAS:
        -:  125:      {
    #####:  126:        ret_value = ecma_op_object_has_property (target_p, name_str_p);
    #####:  127:        break;
        -:  128:      }
        -:  129:
    #####:  130:      case ECMA_REFLECT_OBJECT_DELETE_PROPERTY:
        -:  131:      {
    #####:  132:        ret_value = ecma_op_object_delete (target_p, name_str_p, false);
    #####:  133:        break;
        -:  134:      }
        -:  135:
    #####:  136:      default:
        -:  137:      {
    #####:  138:        JERRY_ASSERT (builtin_routine_id == ECMA_REFLECT_OBJECT_SET);
        -:  139:
    #####:  140:        ecma_value_t receiver = arguments_list[0];
        -:  141:
    #####:  142:        if (arguments_number > 3)
        -:  143:        {
    #####:  144:          receiver = arguments_list[3];
        -:  145:        }
        -:  146:
    #####:  147:        ret_value = ecma_op_object_put_with_receiver (target_p, name_str_p, arguments_list[2], receiver, false);
    #####:  148:        break;
        -:  149:      }
        -:  150:    }
        -:  151:
    #####:  152:    ecma_deref_ecma_string (name_str_p);
    #####:  153:    return ret_value;
        -:  154:  }
        -:  155:
    #####:  156:  if (builtin_routine_id == ECMA_REFLECT_OBJECT_OWN_KEYS)
        -:  157:  {
        -:  158:    /* 1. */
    #####:  159:    if (arguments_number == 0 || !ecma_is_value_object (arguments_list[0]))
        -:  160:    {
    #####:  161:      return ecma_raise_type_error (ECMA_ERR_ARGUMENT_IS_NOT_AN_OBJECT);
        -:  162:    }
        -:  163:
    #####:  164:    ecma_object_t *target_p = ecma_get_object_from_value (arguments_list[0]);
        -:  165:
        -:  166:    /* 2. */
    #####:  167:    ecma_collection_t *prop_names = ecma_op_object_own_property_keys (target_p, JERRY_PROPERTY_FILTER_ALL);
        -:  168:
        -:  169:#if JERRY_BUILTIN_PROXY
    #####:  170:    if (prop_names == NULL)
        -:  171:    {
    #####:  172:      return ECMA_VALUE_ERROR;
        -:  173:    }
        -:  174:#endif /* JERRY_BUILTIN_PROXY */
        -:  175:
        -:  176:    /* 3. */
    #####:  177:    return ecma_op_new_array_object_from_collection (prop_names, false);
        -:  178:  }
        -:  179:
    #####:  180:  if (builtin_routine_id == ECMA_REFLECT_OBJECT_CONSTRUCT)
        -:  181:  {
        -:  182:    /* 1. */
    #####:  183:    if (arguments_number < 1 || !ecma_is_constructor (arguments_list[0]))
        -:  184:    {
    #####:  185:      return ecma_raise_type_error (ECMA_ERR_TARGET_IS_NOT_A_CONSTRUCTOR);
        -:  186:    }
        -:  187:
    #####:  188:    ecma_object_t *target_p = ecma_get_object_from_value (arguments_list[0]);
        -:  189:
        -:  190:    /* 2. */
    #####:  191:    ecma_object_t *new_target_p = target_p;
        -:  192:
    #####:  193:    if (arguments_number > 2)
        -:  194:    {
        -:  195:      /* 3. */
    #####:  196:      if (!ecma_is_constructor (arguments_list[2]))
        -:  197:      {
    #####:  198:        return ecma_raise_type_error (ECMA_ERR_TARGET_IS_NOT_A_CONSTRUCTOR);
        -:  199:      }
        -:  200:
    #####:  201:      new_target_p = ecma_get_object_from_value (arguments_list[2]);
        -:  202:    }
        -:  203:
        -:  204:    /* 4. */
    #####:  205:    if (arguments_number < 2)
        -:  206:    {
    #####:  207:      return ecma_raise_type_error (ECMA_ERR_REFLECT_EXPECTS_AN_OBJECT_AS_SECOND_ARGUMENT);
        -:  208:    }
        -:  209:
    #####:  210:    ecma_collection_t *coll_p = ecma_op_create_list_from_array_like (arguments_list[1], false);
        -:  211:
    #####:  212:    if (coll_p == NULL)
        -:  213:    {
    #####:  214:      return ECMA_VALUE_ERROR;
        -:  215:    }
        -:  216:
    #####:  217:    ecma_value_t ret_value = ecma_op_function_construct (target_p, new_target_p, coll_p->buffer_p, coll_p->item_count);
        -:  218:
    #####:  219:    ecma_collection_free (coll_p);
    #####:  220:    return ret_value;
        -:  221:  }
        -:  222:
    #####:  223:  if (!ecma_is_value_object (arguments_list[0]))
        -:  224:  {
    #####:  225:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_IS_NOT_AN_OBJECT);
        -:  226:  }
        -:  227:
    #####:  228:  switch (builtin_routine_id)
        -:  229:  {
    #####:  230:    case ECMA_REFLECT_OBJECT_GET_PROTOTYPE_OF:
        -:  231:    {
    #####:  232:      return ecma_builtin_object_object_get_prototype_of (ecma_get_object_from_value (arguments_list[0]));
        -:  233:    }
    #####:  234:    case ECMA_REFLECT_OBJECT_SET_PROTOTYPE_OF:
        -:  235:    {
    #####:  236:      if (!ecma_is_value_object (arguments_list[1]) && !ecma_is_value_null (arguments_list[1]))
        -:  237:      {
    #####:  238:        return ecma_raise_type_error (ECMA_ERR_PROTOTYPE_IS_NEITHER_OBJECT_NOR_NULL);
        -:  239:      }
        -:  240:
    #####:  241:      ecma_object_t *obj_p = ecma_get_object_from_value (arguments_list[0]);
        -:  242:      ecma_value_t status;
        -:  243:
        -:  244:#if JERRY_BUILTIN_PROXY
    #####:  245:      if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  246:      {
    #####:  247:        status = ecma_proxy_object_set_prototype_of (obj_p, arguments_list[1]);
        -:  248:      }
        -:  249:      else
        -:  250:#endif /* JERRY_BUILTIN_PROXY */
        -:  251:      {
    #####:  252:        status = ecma_op_ordinary_object_set_prototype_of (obj_p, arguments_list[1]);
        -:  253:      }
        -:  254:
    #####:  255:      return status;
        -:  256:    }
    #####:  257:    case ECMA_REFLECT_OBJECT_APPLY:
        -:  258:    {
    #####:  259:      if (!ecma_op_is_callable (arguments_list[0]))
        -:  260:      {
    #####:  261:        return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_FUNCTION);
        -:  262:      }
        -:  263:
    #####:  264:      ecma_object_t *func_obj_p = ecma_get_object_from_value (arguments_list[0]);
    #####:  265:      return ecma_builtin_function_prototype_object_apply (func_obj_p, arguments_list[1], arguments_list[2]);
        -:  266:    }
    #####:  267:    case ECMA_REFLECT_OBJECT_DEFINE_PROPERTY:
        -:  268:    {
    #####:  269:      ecma_object_t *obj_p = ecma_get_object_from_value (arguments_list[0]);
    #####:  270:      ecma_string_t *name_str_p = ecma_op_to_property_key (arguments_list[1]);
        -:  271:
    #####:  272:      if (name_str_p == NULL)
        -:  273:      {
    #####:  274:        return ECMA_VALUE_ERROR;
        -:  275:      }
        -:  276:
    #####:  277:      ecma_property_descriptor_t prop_desc;
    #####:  278:      ecma_value_t conv_result = ecma_op_to_property_descriptor (arguments_list[2], &prop_desc);
        -:  279:
    #####:  280:      if (ECMA_IS_VALUE_ERROR (conv_result))
        -:  281:      {
    #####:  282:        ecma_deref_ecma_string (name_str_p);
    #####:  283:        return conv_result;
        -:  284:      }
        -:  285:
    #####:  286:      ecma_value_t result = ecma_op_object_define_own_property (obj_p, name_str_p, &prop_desc);
        -:  287:
    #####:  288:      ecma_deref_ecma_string (name_str_p);
    #####:  289:      ecma_free_property_descriptor (&prop_desc);
        -:  290:
    #####:  291:      if (ECMA_IS_VALUE_ERROR (result))
        -:  292:      {
    #####:  293:        return result;
        -:  294:      }
        -:  295:
    #####:  296:      bool boolean_result = ecma_op_to_boolean (result);
        -:  297:
    #####:  298:      return ecma_make_boolean_value (boolean_result);
        -:  299:    }
    #####:  300:    case ECMA_REFLECT_OBJECT_GET_OWN_PROPERTY_DESCRIPTOR:
        -:  301:    {
    #####:  302:      ecma_object_t *obj_p = ecma_get_object_from_value (arguments_list[0]);
    #####:  303:      ecma_string_t *name_str_p = ecma_op_to_property_key (arguments_list[1]);
        -:  304:
    #####:  305:      if (name_str_p == NULL)
        -:  306:      {
    #####:  307:        return ECMA_VALUE_ERROR;
        -:  308:      }
        -:  309:
    #####:  310:      ecma_value_t ret_val = ecma_builtin_object_object_get_own_property_descriptor (obj_p, name_str_p);
    #####:  311:      ecma_deref_ecma_string (name_str_p);
    #####:  312:      return ret_val;
        -:  313:    }
    #####:  314:    case ECMA_REFLECT_OBJECT_IS_EXTENSIBLE:
        -:  315:    {
    #####:  316:      ecma_object_t *obj_p = ecma_get_object_from_value (arguments_list[0]);
    #####:  317:      return ecma_builtin_object_object_is_extensible (obj_p);
        -:  318:    }
    #####:  319:    default:
        -:  320:    {
    #####:  321:      JERRY_ASSERT (builtin_routine_id == ECMA_REFLECT_OBJECT_PREVENT_EXTENSIONS);
    #####:  322:      ecma_object_t *obj_p = ecma_get_object_from_value (arguments_list[0]);
        -:  323:
        -:  324:#if JERRY_BUILTIN_PROXY
    #####:  325:      if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  326:      {
    #####:  327:        return ecma_proxy_object_prevent_extensions (obj_p);
        -:  328:      }
        -:  329:#endif /* !JERRY_BUILTIN_PROXY */
        -:  330:
    #####:  331:      ecma_op_ordinary_object_prevent_extensions (obj_p);
        -:  332:
    #####:  333:      return ECMA_VALUE_TRUE;
        -:  334:    }
        -:  335:  }
        -:  336:} /* ecma_builtin_reflect_dispatch_routine */
        -:  337:
        -:  338:/**
        -:  339: * @}
        -:  340: * @}
        -:  341: * @}
        -:  342: */
        -:  343:
        -:  344:#endif /* JERRY_BUILTIN_REFLECT */
