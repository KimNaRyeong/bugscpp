        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-error-prototype.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-conversion.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-objects.h"
        -:   24:#include "ecma-string-object.h"
        -:   25:
        -:   26:#include "jrt.h"
        -:   27:#include "lit-char-helpers.h"
        -:   28:#include "lit-magic-strings.h"
        -:   29:
        -:   30:#define ECMA_BUILTINS_INTERNAL
        -:   31:#include "ecma-builtins-internal.h"
        -:   32:
        -:   33:/**
        -:   34: * This object has a custom dispatch function.
        -:   35: */
        -:   36:#define BUILTIN_CUSTOM_DISPATCH
        -:   37:
        -:   38:/**
        -:   39: * List of built-in routine identifiers.
        -:   40: */
        -:   41:enum
        -:   42:{
        -:   43:  ECMA_ERROR_PROTOTYPE_ROUTINE_START = 0,
        -:   44:  ECMA_ERROR_PROTOTYPE_ROUTINE_TO_STRING,
        -:   45:};
        -:   46:
        -:   47:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-error-prototype.inc.h"
        -:   48:#define BUILTIN_UNDERSCORED_ID  error_prototype
        -:   49:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   50:
        -:   51:/** \addtogroup ecma ECMA
        -:   52: * @{
        -:   53: *
        -:   54: * \addtogroup ecmabuiltins
        -:   55: * @{
        -:   56: *
        -:   57: * \addtogroup errorprototype ECMA Error.prototype object built-in
        -:   58: * @{
        -:   59: */
        -:   60:
        -:   61:/**
        -:   62: * Helper method to get a property value from an error object
        -:   63: *
        -:   64: * @return ecma_string_t
        -:   65: */
        -:   66:static ecma_string_t *
    #####:   67:ecma_builtin_error_prototype_object_to_string_helper (ecma_object_t *obj_p, /**< error object */
        -:   68:                                                      lit_magic_string_id_t property_id, /**< property id */
        -:   69:                                                      lit_magic_string_id_t default_value) /**< default prop value */
        -:   70:{
    #####:   71:  ecma_value_t prop_value = ecma_op_object_get_by_magic_id (obj_p, property_id);
        -:   72:
    #####:   73:  if (ECMA_IS_VALUE_ERROR (prop_value))
        -:   74:  {
    #####:   75:    return NULL;
        -:   76:  }
        -:   77:
    #####:   78:  if (ecma_is_value_undefined (prop_value))
        -:   79:  {
    #####:   80:    return ecma_get_magic_string (default_value);
        -:   81:  }
        -:   82:
    #####:   83:  ecma_string_t *ret_str_p = ecma_op_to_string (prop_value);
    #####:   84:  ecma_free_value (prop_value);
        -:   85:
    #####:   86:  return ret_str_p;
        -:   87:} /* ecma_builtin_error_prototype_object_to_string_helper */
        -:   88:
        -:   89:/**
        -:   90: * The Error.prototype object's 'toString' routine
        -:   91: *
        -:   92: * See also:
        -:   93: *          ECMA-262 v5, 15.11.4.4
        -:   94: *
        -:   95: * @return ecma value
        -:   96: *         Returned value must be freed with ecma_free_value.
        -:   97: */
        -:   98:static ecma_value_t
    #####:   99:ecma_builtin_error_prototype_object_to_string (ecma_value_t this_arg) /**< this argument */
        -:  100:{
        -:  101:  /* 2. */
    #####:  102:  if (!ecma_is_value_object (this_arg))
        -:  103:  {
    #####:  104:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_OBJECT);
        -:  105:  }
        -:  106:
    #####:  107:  ecma_object_t *obj_p = ecma_get_object_from_value (this_arg);
        -:  108:
    #####:  109:  ecma_string_t *name_string_p =
        -:  110:    ecma_builtin_error_prototype_object_to_string_helper (obj_p, LIT_MAGIC_STRING_NAME, LIT_MAGIC_STRING_ERROR_UL);
        -:  111:
    #####:  112:  if (JERRY_UNLIKELY (name_string_p == NULL))
        -:  113:  {
    #####:  114:    return ECMA_VALUE_ERROR;
        -:  115:  }
        -:  116:
    #####:  117:  ecma_string_t *msg_string_p =
        -:  118:    ecma_builtin_error_prototype_object_to_string_helper (obj_p, LIT_MAGIC_STRING_MESSAGE, LIT_MAGIC_STRING__EMPTY);
        -:  119:
    #####:  120:  if (JERRY_UNLIKELY (msg_string_p == NULL))
        -:  121:  {
    #####:  122:    ecma_deref_ecma_string (name_string_p);
    #####:  123:    return ECMA_VALUE_ERROR;
        -:  124:  }
        -:  125:
    #####:  126:  if (ecma_string_is_empty (name_string_p))
        -:  127:  {
    #####:  128:    return ecma_make_string_value (msg_string_p);
        -:  129:  }
        -:  130:
    #####:  131:  if (ecma_string_is_empty (msg_string_p))
        -:  132:  {
    #####:  133:    return ecma_make_string_value (name_string_p);
        -:  134:  }
        -:  135:
    #####:  136:  ecma_stringbuilder_t builder = ecma_stringbuilder_create_from (name_string_p);
        -:  137:
    #####:  138:  ecma_stringbuilder_append_raw (&builder, (const lit_utf8_byte_t *) ": ", 2);
    #####:  139:  ecma_stringbuilder_append (&builder, msg_string_p);
        -:  140:
    #####:  141:  ecma_deref_ecma_string (name_string_p);
    #####:  142:  ecma_deref_ecma_string (msg_string_p);
        -:  143:
    #####:  144:  return ecma_make_string_value (ecma_stringbuilder_finalize (&builder));
        -:  145:} /* ecma_builtin_error_prototype_object_to_string */
        -:  146:
        -:  147:/**
        -:  148: * Dispatcher of the built-in's routines
        -:  149: *
        -:  150: * @return ecma value
        -:  151: *         Returned value must be freed with ecma_free_value.
        -:  152: */
        -:  153:ecma_value_t
    #####:  154:ecma_builtin_error_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:  155:                                                                            *   identifier */
        -:  156:                                               ecma_value_t this_arg, /**< 'this' argument value */
        -:  157:                                               const ecma_value_t arguments_list_p[], /**< list of arguments passed to
        -:  158:                                                                                       *  routine */
        -:  159:                                               uint32_t arguments_number) /**< length of arguments' list */
        -:  160:{
        -:  161:  JERRY_UNUSED_2 (arguments_number, arguments_list_p);
        -:  162:
    #####:  163:  switch (builtin_routine_id)
        -:  164:  {
    #####:  165:    case ECMA_ERROR_PROTOTYPE_ROUTINE_TO_STRING:
        -:  166:    {
    #####:  167:      return ecma_builtin_error_prototype_object_to_string (this_arg);
        -:  168:    }
    #####:  169:    default:
        -:  170:    {
    #####:  171:      JERRY_UNREACHABLE ();
        -:  172:    }
        -:  173:  }
        -:  174:} /* ecma_builtin_error_prototype_dispatch_routine */
        -:  175:
        -:  176:/**
        -:  177: * @}
        -:  178: * @}
        -:  179: * @}
        -:  180: */
