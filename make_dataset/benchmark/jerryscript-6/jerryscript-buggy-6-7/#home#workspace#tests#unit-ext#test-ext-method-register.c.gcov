        -:    0:Source:/home/workspace/tests/unit-ext/test-ext-method-register.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:/**
        -:   17: * Unit test for jerry-ext/handler property registration
        -:   18: */
        -:   19:
        -:   20:#include <string.h>
        -:   21:
        -:   22:#include "jerryscript.h"
        -:   23:
        -:   24:#include "jerryscript-ext/handler.h"
        -:   25:#include "test-common.h"
        -:   26:
        -:   27:static jerry_value_t
    #####:   28:method_hello (const jerry_call_info_t *call_info_p, /**< call information */
        -:   29:              const jerry_value_t jargv[], /**< arguments */
        -:   30:              const jerry_length_t jargc) /**< number of arguments */
        -:   31:{
        -:   32:  (void) call_info_p;
        -:   33:  (void) jargv;
    #####:   34:  return jerry_number (jargc);
        -:   35:} /* method_hello */
        -:   36:
        -:   37:/**
        -:   38: * Helper method to create a non-configurable property on an object
        -:   39: */
        -:   40:static void
    #####:   41:freeze_property (jerry_value_t target_obj, /**< target object */
        -:   42:                 const char *target_prop) /**< target property name */
        -:   43:{
        -:   44:  // "freeze" property
    #####:   45:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor ();
    #####:   46:  prop_desc.flags |= JERRY_PROP_IS_CONFIGURABLE_DEFINED;
        -:   47:
    #####:   48:  jerry_value_t prop_name = jerry_string_sz (target_prop);
    #####:   49:  jerry_value_t return_value = jerry_object_define_own_prop (target_obj, prop_name, &prop_desc);
    #####:   50:  TEST_ASSERT (jerry_value_is_boolean (return_value));
    #####:   51:  jerry_value_free (return_value);
    #####:   52:  jerry_value_free (prop_name);
        -:   53:
    #####:   54:  jerry_property_descriptor_free (&prop_desc);
    #####:   55:} /* freeze_property */
        -:   56:
        -:   57:/**
        -:   58: * Test registration of various property values.
        -:   59: */
        -:   60:static void
    #####:   61:test_simple_registration (void)
        -:   62:{
    #####:   63:  jerry_init (JERRY_INIT_EMPTY);
        -:   64:
    #####:   65:  jerry_value_t target_object = jerry_object ();
        -:   66:
        -:   67:  // Test simple registration
    #####:   68:  jerryx_property_entry methods[] = {
    #####:   69:    JERRYX_PROPERTY_FUNCTION ("hello", method_hello),  JERRYX_PROPERTY_NUMBER ("my_number", 42.5),
    #####:   70:    JERRYX_PROPERTY_STRING_SZ ("my_str", "super_str"), JERRYX_PROPERTY_STRING ("my_str_sz", "super_str", 6),
    #####:   71:    JERRYX_PROPERTY_BOOLEAN ("my_bool", true),         JERRYX_PROPERTY_BOOLEAN ("my_bool_false", false),
    #####:   72:    JERRYX_PROPERTY_UNDEFINED ("my_non_value"),        JERRYX_PROPERTY_LIST_END (),
        -:   73:  };
        -:   74:
    #####:   75:  jerryx_register_result register_result = jerryx_set_properties (target_object, methods);
        -:   76:
    #####:   77:  TEST_ASSERT (register_result.registered == 7);
    #####:   78:  TEST_ASSERT (jerry_value_is_undefined (register_result.result));
        -:   79:
    #####:   80:  jerryx_release_property_entry (methods, register_result);
    #####:   81:  jerry_value_free (register_result.result);
        -:   82:
    #####:   83:  jerry_value_t global_obj = jerry_current_realm ();
    #####:   84:  jerryx_set_property_str (global_obj, "test", target_object);
    #####:   85:  jerry_value_free (target_object);
    #####:   86:  jerry_value_free (global_obj);
        -:   87:
        -:   88:  {
    #####:   89:    const char *test_A = "test.my_number";
    #####:   90:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:   91:    TEST_ASSERT (jerry_value_is_number (result));
    #####:   92:    TEST_ASSERT (jerry_value_as_number (result) == 42.5);
    #####:   93:    jerry_value_free (result);
        -:   94:  }
        -:   95:
        -:   96:  {
    #####:   97:    const char *test_A = "test.my_str_sz === 'super_'";
    #####:   98:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:   99:    TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  100:    TEST_ASSERT (jerry_value_is_true (result));
    #####:  101:    jerry_value_free (result);
        -:  102:  }
        -:  103:
        -:  104:  {
    #####:  105:    const char *test_A = "test.my_str === 'super_str'";
    #####:  106:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:  107:    TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  108:    TEST_ASSERT (jerry_value_is_true (result));
    #####:  109:    jerry_value_free (result);
        -:  110:  }
        -:  111:
        -:  112:  {
    #####:  113:    const char *test_A = "test.my_bool";
    #####:  114:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:  115:    TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  116:    TEST_ASSERT (jerry_value_is_true (result));
    #####:  117:    jerry_value_free (result);
        -:  118:  }
        -:  119:
        -:  120:  {
    #####:  121:    const char *test_A = "test.my_bool_false";
    #####:  122:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:  123:    TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  124:    TEST_ASSERT (jerry_value_is_true (result) == false);
    #####:  125:    jerry_value_free (result);
        -:  126:  }
        -:  127:
        -:  128:  {
    #####:  129:    const char *test_A = "test.my_non_value";
    #####:  130:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:  131:    TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  132:    jerry_value_free (result);
        -:  133:  }
        -:  134:
        -:  135:  {
    #####:  136:    const char *test_A = "test.hello(33, 42, 2);";
    #####:  137:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:  138:    TEST_ASSERT (jerry_value_is_number (result));
    #####:  139:    TEST_ASSERT ((uint32_t) jerry_value_as_number (result) == 3u);
    #####:  140:    jerry_value_free (result);
        -:  141:  }
        -:  142:
        -:  143:  {
    #####:  144:    const char *test_A = "test.hello();";
    #####:  145:    jerry_value_t result = jerry_eval ((const jerry_char_t *) test_A, strlen (test_A), 0);
    #####:  146:    TEST_ASSERT (jerry_value_is_number (result));
    #####:  147:    TEST_ASSERT ((uint32_t) jerry_value_as_number (result) == 0u);
    #####:  148:    jerry_value_free (result);
        -:  149:  }
        -:  150:
    #####:  151:  jerry_cleanup ();
    #####:  152:} /* test_simple_registration */
        -:  153:
        -:  154:/**
        -:  155: * Test registration error.
        -:  156: *
        -:  157: * Trying to register a property which is already a non-configurable property
        -:  158: * should result in an error.
        -:  159: */
        -:  160:static void
    #####:  161:test_error_setvalue (void)
        -:  162:{
    #####:  163:  jerry_init (JERRY_INIT_EMPTY);
        -:  164:
    #####:  165:  const char *target_prop = "test_err";
    #####:  166:  jerry_value_t global_obj = jerry_current_realm ();
    #####:  167:  freeze_property (global_obj, target_prop);
        -:  168:
    #####:  169:  jerry_value_t new_object = jerry_object ();
    #####:  170:  jerry_value_t set_result = jerryx_set_property_str (global_obj, target_prop, new_object);
    #####:  171:  TEST_ASSERT (jerry_value_is_exception (set_result));
        -:  172:
    #####:  173:  jerry_value_free (set_result);
    #####:  174:  jerry_value_free (new_object);
    #####:  175:  jerry_value_free (global_obj);
        -:  176:
    #####:  177:  jerry_cleanup ();
    #####:  178:} /* test_error_setvalue */
        -:  179:
        -:  180:/**
        -:  181: * Test registration error with jerryx_set_properties.
        -:  182: *
        -:  183: * Trying to register a property which is already a non-configurable property
        -:  184: * should result in an error.
        -:  185: */
        -:  186:static void
    #####:  187:test_error_single_function (void)
        -:  188:{
    #####:  189:  jerry_init (JERRY_INIT_EMPTY);
        -:  190:
    #####:  191:  const char *target_prop = "test_err";
    #####:  192:  jerry_value_t target_object = jerry_object ();
    #####:  193:  freeze_property (target_object, target_prop);
        -:  194:
    #####:  195:  jerryx_property_entry methods[] = {
    #####:  196:    JERRYX_PROPERTY_FUNCTION (target_prop, method_hello), // This registration should fail
        -:  197:    JERRYX_PROPERTY_LIST_END (),
        -:  198:  };
        -:  199:
    #####:  200:  jerryx_register_result register_result = jerryx_set_properties (target_object, methods);
        -:  201:
    #####:  202:  TEST_ASSERT (register_result.registered == 0);
    #####:  203:  TEST_ASSERT (jerry_value_is_exception (register_result.result));
    #####:  204:  jerryx_release_property_entry (methods, register_result);
    #####:  205:  jerry_value_free (register_result.result);
        -:  206:
    #####:  207:  jerry_value_free (target_object);
        -:  208:
    #####:  209:  jerry_cleanup ();
    #####:  210:} /* test_error_single_function */
        -:  211:
        -:  212:/**
        -:  213: * Test to see if jerryx_set_properties exits at the first error.
        -:  214: */
        -:  215:static void
    #####:  216:test_error_multiple_functions (void)
        -:  217:{
    #####:  218:  jerry_init (JERRY_INIT_EMPTY);
        -:  219:
    #####:  220:  const char *prop_ok = "prop_ok";
    #####:  221:  const char *prop_err = "prop_err";
    #####:  222:  const char *prop_not = "prop_not";
    #####:  223:  jerry_value_t target_object = jerry_object ();
    #####:  224:  freeze_property (target_object, prop_err);
        -:  225:
    #####:  226:  jerryx_property_entry methods[] = {
    #####:  227:    JERRYX_PROPERTY_FUNCTION (prop_ok, method_hello), // This registration is ok
    #####:  228:    JERRYX_PROPERTY_FUNCTION (prop_err, method_hello), // This registration should fail
    #####:  229:    JERRYX_PROPERTY_FUNCTION (prop_not, method_hello), // This registration is not done
        -:  230:    JERRYX_PROPERTY_LIST_END (),
        -:  231:  };
        -:  232:
    #####:  233:  jerryx_register_result register_result = jerryx_set_properties (target_object, methods);
        -:  234:
    #####:  235:  TEST_ASSERT (register_result.registered == 1);
    #####:  236:  TEST_ASSERT (jerry_value_is_exception (register_result.result));
        -:  237:
    #####:  238:  jerryx_release_property_entry (methods, register_result);
    #####:  239:  jerry_value_free (register_result.result);
        -:  240:
        -:  241:  {
        -:  242:    // Test if property "prop_ok" is correctly registered.
    #####:  243:    jerry_value_t prop_ok_val = jerry_string_sz (prop_ok);
    #####:  244:    jerry_value_t prop_ok_exists = jerry_object_has_own (target_object, prop_ok_val);
    #####:  245:    TEST_ASSERT (jerry_value_is_true (prop_ok_exists));
    #####:  246:    jerry_value_free (prop_ok_exists);
        -:  247:
        -:  248:    // Try calling the method
    #####:  249:    jerry_value_t prop_ok_func = jerry_object_get (target_object, prop_ok_val);
    #####:  250:    TEST_ASSERT (jerry_value_is_function (prop_ok_func) == true);
    #####:  251:    jerry_value_t args[2] = {
    #####:  252:      jerry_number (22),
    #####:  253:      jerry_number (-3),
        -:  254:    };
    #####:  255:    jerry_size_t args_cnt = sizeof (args) / sizeof (jerry_value_t);
    #####:  256:    jerry_value_t func_result = jerry_call (prop_ok_func, jerry_undefined (), args, args_cnt);
    #####:  257:    TEST_ASSERT (jerry_value_is_number (func_result) == true);
    #####:  258:    TEST_ASSERT ((uint32_t) jerry_value_as_number (func_result) == 2u);
    #####:  259:    jerry_value_free (func_result);
    #####:  260:    for (jerry_size_t idx = 0; idx < args_cnt; idx++)
        -:  261:    {
    #####:  262:      jerry_value_free (args[idx]);
        -:  263:    }
    #####:  264:    jerry_value_free (prop_ok_func);
    #####:  265:    jerry_value_free (prop_ok_val);
        -:  266:  }
        -:  267:
        -:  268:  {
        -:  269:    // The "prop_err" should exist - as it was "freezed" - but it should not be a function
    #####:  270:    jerry_value_t prop_err_val = jerry_string_sz (prop_err);
    #####:  271:    jerry_value_t prop_err_exists = jerry_object_has_own (target_object, prop_err_val);
    #####:  272:    TEST_ASSERT (jerry_value_is_true (prop_err_exists));
    #####:  273:    jerry_value_free (prop_err_exists);
        -:  274:
    #####:  275:    jerry_value_t prop_err_func = jerry_value_is_function (prop_err_val);
    #####:  276:    TEST_ASSERT (jerry_value_is_function (prop_err_func) == false);
    #####:  277:    jerry_value_free (prop_err_val);
        -:  278:  }
        -:  279:
        -:  280:  { // The "prop_not" is not available on the target object
    #####:  281:    jerry_value_t prop_not_val = jerry_string_sz (prop_not);
    #####:  282:    jerry_value_t prop_not_exists = jerry_object_has_own (target_object, prop_not_val);
    #####:  283:    TEST_ASSERT (jerry_value_is_true (prop_not_exists) == false);
    #####:  284:    jerry_value_free (prop_not_exists);
    #####:  285:    jerry_value_free (prop_not_val);
        -:  286:  }
        -:  287:
    #####:  288:  jerry_value_free (target_object);
        -:  289:
    #####:  290:  jerry_cleanup ();
    #####:  291:} /* test_error_multiple_functions */
        -:  292:
        -:  293:int
    #####:  294:main (void)
        -:  295:{
    #####:  296:  test_simple_registration ();
    #####:  297:  test_error_setvalue ();
    #####:  298:  test_error_single_function ();
    #####:  299:  test_error_multiple_functions ();
        -:  300:  return 0;
        -:  301:} /* main */
