        -:    0:Source:/home/workspace/tests/unit-core/test-api-strings.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:static bool
    #####:   21:strict_equals (jerry_value_t a, /**< the first string to compare */
        -:   22:               jerry_value_t b) /**< the second string to compare */
        -:   23:{
    #####:   24:  const jerry_char_t is_equal_src[] = "var isEqual = function(a, b) { return (a === b); }; isEqual";
    #####:   25:  jerry_value_t is_equal_fn_val = jerry_eval (is_equal_src, sizeof (is_equal_src) - 1, JERRY_PARSE_NO_OPTS);
    #####:   26:  TEST_ASSERT (!jerry_value_is_exception (is_equal_fn_val));
    #####:   27:  jerry_value_t args[2] = { a, b };
    #####:   28:  jerry_value_t res = jerry_call (is_equal_fn_val, jerry_undefined (), args, 2);
    #####:   29:  TEST_ASSERT (!jerry_value_is_exception (res));
    #####:   30:  TEST_ASSERT (jerry_value_is_boolean (res));
    #####:   31:  bool is_strict_equal = jerry_value_is_true (res);
    #####:   32:  jerry_value_free (res);
    #####:   33:  jerry_value_free (is_equal_fn_val);
    #####:   34:  return is_strict_equal;
        -:   35:} /* strict_equals */
        -:   36:
        -:   37:int
    #####:   38:main (void)
    #####:   39:{
        -:   40:  jerry_size_t sz, utf8_sz, cesu8_sz;
        -:   41:  jerry_value_t args[2];
        -:   42:
    #####:   43:  TEST_INIT ();
    #####:   44:  jerry_init (JERRY_INIT_EMPTY);
        -:   45:
        -:   46:  /* Test corner case for jerry_string_to_char_buffer */
    #####:   47:  args[0] = jerry_string_sz ("");
    #####:   48:  sz = jerry_string_size (args[0], JERRY_ENCODING_CESU8);
    #####:   49:  TEST_ASSERT (sz == 0);
    #####:   50:  jerry_value_free (args[0]);
        -:   51:
        -:   52:  /* Test create_jerry_string_from_utf8 with 4-byte long unicode sequences,
        -:   53:   * test string: 'str: {DESERET CAPITAL LETTER LONG I}'
        -:   54:   */
    #####:   55:  char *utf8_bytes_p = "\x73\x74\x72\x3a \xf0\x90\x90\x80";
    #####:   56:  char *cesu8_bytes_p = "\x73\x74\x72\x3a \xed\xa0\x81\xed\xb0\x80";
    #####:   57:  args[0] = jerry_string ((jerry_char_t *) utf8_bytes_p, (jerry_size_t) strlen (utf8_bytes_p), JERRY_ENCODING_UTF8);
    #####:   58:  args[1] = jerry_string ((jerry_char_t *) cesu8_bytes_p, (jerry_size_t) strlen (cesu8_bytes_p), JERRY_ENCODING_CESU8);
        -:   59:
        -:   60:  /* These sizes must be equal */
    #####:   61:  utf8_sz = jerry_string_size (args[0], JERRY_ENCODING_CESU8);
    #####:   62:  cesu8_sz = jerry_string_size (args[1], JERRY_ENCODING_CESU8);
        -:   63:
    #####:   64:  JERRY_VLA (jerry_char_t, string_from_utf8, utf8_sz);
    #####:   65:  JERRY_VLA (jerry_char_t, string_from_cesu8, cesu8_sz);
        -:   66:
    #####:   67:  jerry_string_to_buffer (args[0], JERRY_ENCODING_CESU8, string_from_utf8, utf8_sz);
    #####:   68:  jerry_string_to_buffer (args[1], JERRY_ENCODING_CESU8, string_from_cesu8, cesu8_sz);
        -:   69:
    #####:   70:  TEST_ASSERT (utf8_sz == cesu8_sz);
        -:   71:
    #####:   72:  TEST_ASSERT (!memcmp (string_from_utf8, string_from_cesu8, utf8_sz));
    #####:   73:  jerry_value_free (args[0]);
    #####:   74:  jerry_value_free (args[1]);
        -:   75:
        -:   76:  /* Test jerry_string_to_buffer, test string: 'str: {DESERET CAPITAL LETTER LONG I}' */
    #####:   77:  utf8_bytes_p = "\x73\x74\x72\x3a \xf0\x90\x90\x80";
    #####:   78:  cesu8_bytes_p = "\x73\x74\x72\x3a \xed\xa0\x81\xed\xb0\x80";
    #####:   79:  args[0] = jerry_string ((jerry_char_t *) utf8_bytes_p, (jerry_size_t) strlen (utf8_bytes_p), JERRY_ENCODING_UTF8);
    #####:   80:  args[1] = jerry_string ((jerry_char_t *) cesu8_bytes_p, (jerry_size_t) strlen (cesu8_bytes_p), JERRY_ENCODING_CESU8);
        -:   81:
        -:   82:  /* Test that the strings are equal / ensure hashes are equal */
    #####:   83:  TEST_ASSERT (strict_equals (args[0], args[1]));
        -:   84:
        -:   85:  /* These sizes must be equal */
    #####:   86:  utf8_sz = jerry_string_size (args[0], JERRY_ENCODING_UTF8);
    #####:   87:  cesu8_sz = jerry_string_size (args[1], JERRY_ENCODING_UTF8);
        -:   88:
    #####:   89:  TEST_ASSERT (utf8_sz == cesu8_sz && utf8_sz > 0);
        -:   90:
    #####:   91:  JERRY_VLA (jerry_char_t, string_from_utf8_string, utf8_sz);
    #####:   92:  JERRY_VLA (jerry_char_t, string_from_cesu8_string, cesu8_sz);
        -:   93:
    #####:   94:  jerry_string_to_buffer (args[0], JERRY_ENCODING_UTF8, string_from_utf8_string, utf8_sz);
    #####:   95:  jerry_string_to_buffer (args[1], JERRY_ENCODING_UTF8, string_from_cesu8_string, cesu8_sz);
        -:   96:
    #####:   97:  TEST_ASSERT (!memcmp (string_from_utf8_string, string_from_cesu8_string, utf8_sz));
    #####:   98:  jerry_value_free (args[0]);
    #####:   99:  jerry_value_free (args[1]);
        -:  100:
        -:  101:  /* Test string: 'str: {MATHEMATICAL FRAKTUR SMALL F}{MATHEMATICAL FRAKTUR SMALL G}' */
    #####:  102:  utf8_bytes_p = "\x73\x74\x72\x3a \xf0\x9d\x94\xa3 \xf0\x9d\x94\xa4";
    #####:  103:  args[0] = jerry_string ((jerry_char_t *) utf8_bytes_p, (jerry_size_t) strlen (utf8_bytes_p), JERRY_ENCODING_UTF8);
        -:  104:
    #####:  105:  cesu8_sz = jerry_string_size (args[0], JERRY_ENCODING_CESU8);
    #####:  106:  utf8_sz = jerry_string_size (args[0], JERRY_ENCODING_UTF8);
        -:  107:
    #####:  108:  TEST_ASSERT (jerry_string_length (args[0]) == 10);
    #####:  109:  TEST_ASSERT (cesu8_sz != utf8_sz);
    #####:  110:  TEST_ASSERT (utf8_sz == 14 && cesu8_sz == 18);
        -:  111:
    #####:  112:  JERRY_VLA (char, test_string, utf8_sz);
        -:  113:
    #####:  114:  TEST_ASSERT (jerry_string_to_buffer (args[0], JERRY_ENCODING_UTF8, (jerry_char_t *) test_string, utf8_sz) == 14);
    #####:  115:  TEST_ASSERT (!strncmp (test_string, utf8_bytes_p, utf8_sz));
        -:  116:
    #####:  117:  jerry_value_free (args[0]);
        -:  118:
        -:  119:  /* Test string: 'str: {DESERET CAPITAL LETTER LONG I}' */
    #####:  120:  cesu8_bytes_p = "\x73\x74\x72\x3a \xed\xa0\x81\xed\xb0\x80";
    #####:  121:  args[0] = jerry_string ((jerry_char_t *) cesu8_bytes_p, (jerry_size_t) strlen (cesu8_bytes_p), JERRY_ENCODING_CESU8);
        -:  122:
    #####:  123:  cesu8_sz = jerry_string_size (args[0], JERRY_ENCODING_CESU8);
    #####:  124:  utf8_sz = jerry_string_size (args[0], JERRY_ENCODING_UTF8);
        -:  125:
    #####:  126:  TEST_ASSERT (jerry_string_length (args[0]) == 7);
    #####:  127:  TEST_ASSERT (cesu8_sz != utf8_sz);
    #####:  128:  TEST_ASSERT (utf8_sz == 9 && cesu8_sz == 11);
        -:  129:
    #####:  130:  jerry_value_free (args[0]);
        -:  131:
        -:  132:  /* Test string: 'price: 10{EURO SIGN}' */
    #####:  133:  utf8_bytes_p = "\x70\x72\x69\x63\x65\x3a \x31\x30\xe2\x82\xac";
    #####:  134:  args[0] = jerry_string ((jerry_char_t *) utf8_bytes_p, (jerry_size_t) strlen (utf8_bytes_p), JERRY_ENCODING_UTF8);
        -:  135:
    #####:  136:  cesu8_sz = jerry_string_size (args[0], JERRY_ENCODING_CESU8);
    #####:  137:  utf8_sz = jerry_string_size (args[0], JERRY_ENCODING_UTF8);
        -:  138:
    #####:  139:  TEST_ASSERT (jerry_string_length (args[0]) == 10);
    #####:  140:  TEST_ASSERT (cesu8_sz == utf8_sz);
    #####:  141:  TEST_ASSERT (utf8_sz == 12);
    #####:  142:  jerry_value_free (args[0]);
        -:  143:
        -:  144:  /* Test string: '3' */
        -:  145:  {
    #####:  146:    jerry_value_t test_str = jerry_string_sz ("3");
    #####:  147:    char result_string[1] = { 'E' };
    #####:  148:    jerry_size_t copied_utf8 =
        -:  149:      jerry_string_to_buffer (test_str, JERRY_ENCODING_UTF8, (jerry_char_t *) result_string, sizeof (result_string));
    #####:  150:    TEST_ASSERT (copied_utf8 == 1);
    #####:  151:    TEST_ASSERT (result_string[0] == '3');
        -:  152:
    #####:  153:    result_string[0] = 'E';
    #####:  154:    jerry_size_t copied =
        -:  155:      jerry_string_to_buffer (test_str, JERRY_ENCODING_CESU8, (jerry_char_t *) result_string, sizeof (result_string));
    #####:  156:    TEST_ASSERT (copied == 1);
    #####:  157:    TEST_ASSERT (result_string[0] == '3');
        -:  158:
    #####:  159:    jerry_value_free (test_str);
        -:  160:  }
        -:  161:
    #####:  162:  jerry_cleanup ();
        -:  163:
        -:  164:  return 0;
        -:  165:} /* main */
