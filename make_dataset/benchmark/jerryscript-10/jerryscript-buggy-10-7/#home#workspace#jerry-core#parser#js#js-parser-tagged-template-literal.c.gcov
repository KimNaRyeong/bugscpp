        -:    0:Source:/home/workspace/jerry-core/parser/js/js-parser-tagged-template-literal.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "js-parser-tagged-template-literal.h"
        -:   17:
        -:   18:#include "ecma-array-object.h"
        -:   19:#include "ecma-builtin-helpers.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:#include "ecma-objects.h"
        -:   23:
        -:   24:#include "js-lexer.h"
        -:   25:
        -:   26:/* \addtogroup parser Parser
        -:   27: * @{
        -:   28: *
        -:   29: * \addtogroup jsparser JavaScript
        -:   30: * @{
        -:   31: *
        -:   32: * \addtogroup jsparser_tagged_template_literal Tagged template literal
        -:   33: * @{
        -:   34: */
        -:   35:
        -:   36:#if JERRY_ESNEXT
        -:   37:/**
        -:   38: * Append the cooked and raw string to the corresponding array
        -:   39: */
        -:   40:void
    #####:   41:parser_tagged_template_literal_append_strings (parser_context_t *context_p, /**< parser context */
        -:   42:                                               ecma_object_t *template_obj_p, /**< template object */
        -:   43:                                               ecma_object_t *raw_strings_p, /**< raw strings object */
        -:   44:                                               uint32_t prop_idx) /**< property index to set the values */
        -:   45:{
    #####:   46:  lexer_lit_location_t *lit_loc_p = &context_p->token.lit_location;
        -:   47:
    #####:   48:  if (lit_loc_p->length == 0 && !(lit_loc_p->status_flags & LEXER_LIT_LOCATION_HAS_ESCAPE))
        -:   49:  {
    #####:   50:    ecma_builtin_helper_def_prop_by_index (template_obj_p,
        -:   51:                                           prop_idx,
        -:   52:                                           ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY),
        -:   53:                                           ECMA_PROPERTY_FLAG_ENUMERABLE);
        -:   54:
    #####:   55:    ecma_builtin_helper_def_prop_by_index (raw_strings_p,
        -:   56:                                           prop_idx,
        -:   57:                                           ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY),
        -:   58:                                           ECMA_PROPERTY_FLAG_ENUMERABLE);
    #####:   59:    return;
        -:   60:  }
        -:   61:
    #####:   62:  uint8_t local_byte_array[LEXER_MAX_LITERAL_LOCAL_BUFFER_SIZE];
    #####:   63:  const uint8_t *source_p =
    #####:   64:    lexer_convert_literal_to_chars (context_p, &context_p->token.lit_location, local_byte_array, LEXER_STRING_NO_OPTS);
        -:   65:
        -:   66:  ecma_string_t *raw_str_p;
    #####:   67:  ecma_string_t *cooked_str_p =
    #####:   68:    ((lit_loc_p->status_flags & LEXER_FLAG_ASCII) ? ecma_new_ecma_string_from_ascii (source_p, lit_loc_p->length)
    #####:   69:                                                  : ecma_new_ecma_string_from_utf8 (source_p, lit_loc_p->length));
        -:   70:
    #####:   71:  parser_free_allocated_buffer (context_p);
        -:   72:
    #####:   73:  if (lit_loc_p->status_flags & LEXER_LIT_LOCATION_HAS_ESCAPE)
        -:   74:  {
    #####:   75:    context_p->source_p = context_p->token.lit_location.char_p - 1;
    #####:   76:    lexer_parse_string (context_p, LEXER_STRING_RAW);
    #####:   77:    source_p =
    #####:   78:      lexer_convert_literal_to_chars (context_p, &context_p->token.lit_location, local_byte_array, LEXER_STRING_RAW);
        -:   79:
    #####:   80:    raw_str_p =
    #####:   81:      ((lit_loc_p->status_flags & LEXER_FLAG_ASCII) ? ecma_new_ecma_string_from_ascii (source_p, lit_loc_p->length)
    #####:   82:                                                    : ecma_new_ecma_string_from_utf8 (source_p, lit_loc_p->length));
        -:   83:
    #####:   84:    parser_free_allocated_buffer (context_p);
        -:   85:  }
        -:   86:  else
        -:   87:  {
    #####:   88:    ecma_ref_ecma_string (cooked_str_p);
    #####:   89:    raw_str_p = cooked_str_p;
        -:   90:  }
        -:   91:
    #####:   92:  ecma_builtin_helper_def_prop_by_index (template_obj_p,
        -:   93:                                         prop_idx,
        -:   94:                                         ecma_make_string_value (cooked_str_p),
        -:   95:                                         ECMA_PROPERTY_FLAG_ENUMERABLE);
        -:   96:
    #####:   97:  ecma_builtin_helper_def_prop_by_index (raw_strings_p,
        -:   98:                                         prop_idx,
        -:   99:                                         ecma_make_string_value (raw_str_p),
        -:  100:                                         ECMA_PROPERTY_FLAG_ENUMERABLE);
        -:  101:
    #####:  102:  ecma_deref_ecma_string (cooked_str_p);
    #####:  103:  ecma_deref_ecma_string (raw_str_p);
        -:  104:} /* parser_tagged_template_literal_append_strings */
        -:  105:
        -:  106:/**
        -:  107: * Create new tagged template literal object
        -:  108: *
        -:  109: * @return pointer to the allocated object
        -:  110: */
        -:  111:ecma_object_t *
    #####:  112:parser_new_tagged_template_literal (ecma_object_t **raw_strings_p) /**< [out] raw strings object */
        -:  113:{
    #####:  114:  ecma_object_t *template_obj_p = ecma_op_new_array_object (0);
    #####:  115:  *raw_strings_p = ecma_op_new_array_object (0);
        -:  116:
    #####:  117:  ecma_extended_object_t *template_ext_obj_p = (ecma_extended_object_t *) template_obj_p;
    #####:  118:  ecma_extended_object_t *raw_ext_obj_p = (ecma_extended_object_t *) *raw_strings_p;
        -:  119:
    #####:  120:  const uint8_t flags = ECMA_PROPERTY_VIRTUAL | ECMA_PROPERTY_FLAG_WRITABLE | ECMA_FAST_ARRAY_FLAG;
    #####:  121:  JERRY_ASSERT (template_ext_obj_p->u.array.length_prop_and_hole_count == flags);
    #####:  122:  JERRY_ASSERT (raw_ext_obj_p->u.array.length_prop_and_hole_count == flags);
        -:  123:
    #####:  124:  template_ext_obj_p->u.array.length_prop_and_hole_count = flags | ECMA_ARRAY_TEMPLATE_LITERAL;
    #####:  125:  raw_ext_obj_p->u.array.length_prop_and_hole_count = flags | ECMA_ARRAY_TEMPLATE_LITERAL;
        -:  126:
    #####:  127:  ecma_builtin_helper_def_prop (template_obj_p,
        -:  128:                                ecma_get_magic_string (LIT_MAGIC_STRING_RAW),
        -:  129:                                ecma_make_object_value (*raw_strings_p),
        -:  130:                                ECMA_PROPERTY_FIXED);
        -:  131:
    #####:  132:  return template_obj_p;
        -:  133:} /* parser_new_tagged_template_literal */
        -:  134:
        -:  135:/**
        -:  136: * Set integrity level of the given template array object to "frozen"
        -:  137: */
        -:  138:static void
    #####:  139:parser_tagged_template_literal_freeze_array (ecma_object_t *obj_p)
        -:  140:{
    #####:  141:  JERRY_ASSERT (ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_ARRAY);
    #####:  142:  ecma_op_ordinary_object_prevent_extensions (obj_p);
    #####:  143:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;
    #####:  144:  ext_obj_p->u.array.length_prop_and_hole_count &= (uint32_t) ~ECMA_PROPERTY_FLAG_WRITABLE;
    #####:  145:} /* parser_tagged_template_literal_freeze_array */
        -:  146:
        -:  147:/**
        -:  148: * Finalize the tagged template object
        -:  149: */
        -:  150:void
    #####:  151:parser_tagged_template_literal_finalize (ecma_object_t *template_obj_p, /**< template object */
        -:  152:                                         ecma_object_t *raw_strings_p) /**< raw strings object */
        -:  153:{
    #####:  154:  parser_tagged_template_literal_freeze_array (template_obj_p);
    #####:  155:  parser_tagged_template_literal_freeze_array (raw_strings_p);
    #####:  156:} /* parser_tagged_template_literal_finalize */
        -:  157:#endif /* JERRY_ESNEXT */
        -:  158:
        -:  159:/**
        -:  160: * @}
        -:  161: * @}
        -:  162: * @}
        -:  163: */
