        -:    0:Source:/home/workspace/jerry-core/api/jerry-debugger.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "debugger.h"
        -:   19:#include "jcontext.h"
        -:   20:
        -:   21:/**
        -:   22: * Checks whether the debugger is connected.
        -:   23: *
        -:   24: * @return true - if the debugger is connected
        -:   25: *         false - otherwise
        -:   26: */
        -:   27:bool
    #####:   28:jerry_debugger_is_connected (void)
        -:   29:{
        -:   30:#if JERRY_DEBUGGER
        -:   31:  return JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED;
        -:   32:#else /* !JERRY_DEBUGGER */
    #####:   33:  return false;
        -:   34:#endif /* JERRY_DEBUGGER */
        -:   35:} /* jerry_debugger_is_connected */
        -:   36:
        -:   37:/**
        -:   38: * Stop execution at the next available breakpoint.
        -:   39: */
        -:   40:void
    #####:   41:jerry_debugger_stop (void)
        -:   42:{
        -:   43:#if JERRY_DEBUGGER
        -:   44:  if ((JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED)
        -:   45:      && !(JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_BREAKPOINT_MODE))
        -:   46:  {
        -:   47:    JERRY_DEBUGGER_SET_FLAGS (JERRY_DEBUGGER_VM_STOP);
        -:   48:    JERRY_CONTEXT (debugger_stop_context) = NULL;
        -:   49:  }
        -:   50:#endif /* JERRY_DEBUGGER */
    #####:   51:} /* jerry_debugger_stop */
        -:   52:
        -:   53:/**
        -:   54: * Continue execution.
        -:   55: */
        -:   56:void
    #####:   57:jerry_debugger_continue (void)
        -:   58:{
        -:   59:#if JERRY_DEBUGGER
        -:   60:  if ((JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED)
        -:   61:      && !(JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_BREAKPOINT_MODE))
        -:   62:  {
        -:   63:    JERRY_DEBUGGER_CLEAR_FLAGS (JERRY_DEBUGGER_VM_STOP);
        -:   64:    JERRY_CONTEXT (debugger_stop_context) = NULL;
        -:   65:  }
        -:   66:#endif /* JERRY_DEBUGGER */
    #####:   67:} /* jerry_debugger_continue */
        -:   68:
        -:   69:/**
        -:   70: * Sets whether the engine should stop at breakpoints.
        -:   71: */
        -:   72:void
    #####:   73:jerry_debugger_stop_at_breakpoint (bool enable_stop_at_breakpoint) /**< enable/disable stop at breakpoint */
        -:   74:{
        -:   75:#if JERRY_DEBUGGER
        -:   76:  if (JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED
        -:   77:      && !(JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_BREAKPOINT_MODE))
        -:   78:  {
        -:   79:    if (enable_stop_at_breakpoint)
        -:   80:    {
        -:   81:      JERRY_DEBUGGER_SET_FLAGS (JERRY_DEBUGGER_VM_IGNORE);
        -:   82:    }
        -:   83:    else
        -:   84:    {
        -:   85:      JERRY_DEBUGGER_CLEAR_FLAGS (JERRY_DEBUGGER_VM_IGNORE);
        -:   86:    }
        -:   87:  }
        -:   88:#else /* !JERRY_DEBUGGER */
        -:   89:  JERRY_UNUSED (enable_stop_at_breakpoint);
        -:   90:#endif /* JERRY_DEBUGGER */
    #####:   91:} /* jerry_debugger_stop_at_breakpoint */
        -:   92:
        -:   93:/**
        -:   94: * Sets whether the engine should wait and run a source.
        -:   95: *
        -:   96: * @return enum JERRY_DEBUGGER_SOURCE_RECEIVE_FAILED - if the source is not received
        -:   97: *              JERRY_DEBUGGER_SOURCE_RECEIVED - if a source code received
        -:   98: *              JERRY_DEBUGGER_SOURCE_END - the end of the source codes
        -:   99: *              JERRY_DEBUGGER_CONTEXT_RESET_RECEIVED - the end of the context
        -:  100: */
        -:  101:jerry_debugger_wait_for_source_status_t
    #####:  102:jerry_debugger_wait_for_client_source (jerry_debugger_wait_for_source_callback_t callback_p, /**< callback function */
        -:  103:                                       void *user_p, /**< user pointer passed to the callback */
        -:  104:                                       jerry_value_t *return_value) /**< [out] parse and run return value */
        -:  105:{
    #####:  106:  *return_value = jerry_undefined ();
        -:  107:
        -:  108:#if JERRY_DEBUGGER
        -:  109:  if ((JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED)
        -:  110:      && !(JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_BREAKPOINT_MODE))
        -:  111:  {
        -:  112:    JERRY_DEBUGGER_SET_FLAGS (JERRY_DEBUGGER_CLIENT_SOURCE_MODE);
        -:  113:    jerry_debugger_uint8_data_t *client_source_data_p = NULL;
        -:  114:    jerry_debugger_wait_for_source_status_t ret_type = JERRY_DEBUGGER_SOURCE_RECEIVE_FAILED;
        -:  115:
        -:  116:    /* Notify the client about that the engine is waiting for a source. */
        -:  117:    jerry_debugger_send_type (JERRY_DEBUGGER_WAIT_FOR_SOURCE);
        -:  118:
        -:  119:    while (true)
        -:  120:    {
        -:  121:      if (jerry_debugger_receive (&client_source_data_p))
        -:  122:      {
        -:  123:        if (!(JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED))
        -:  124:        {
        -:  125:          break;
        -:  126:        }
        -:  127:
        -:  128:        /* Stop executing the current context. */
        -:  129:        if ((JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONTEXT_RESET_MODE))
        -:  130:        {
        -:  131:          ret_type = JERRY_DEBUGGER_CONTEXT_RESET_RECEIVED;
        -:  132:          JERRY_DEBUGGER_CLEAR_FLAGS (JERRY_DEBUGGER_CONTEXT_RESET_MODE);
        -:  133:          break;
        -:  134:        }
        -:  135:
        -:  136:        /* Stop waiting for a new source file. */
        -:  137:        if ((JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CLIENT_NO_SOURCE))
        -:  138:        {
        -:  139:          ret_type = JERRY_DEBUGGER_SOURCE_END;
        -:  140:          JERRY_DEBUGGER_CLEAR_FLAGS (JERRY_DEBUGGER_CLIENT_SOURCE_MODE);
        -:  141:          break;
        -:  142:        }
        -:  143:
        -:  144:        /* The source arrived. */
        -:  145:        if (!(JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CLIENT_SOURCE_MODE))
        -:  146:        {
        -:  147:          JERRY_ASSERT (client_source_data_p != NULL);
        -:  148:
        -:  149:          jerry_char_t *source_name_p = (jerry_char_t *) (client_source_data_p + 1);
        -:  150:          size_t source_name_size = strlen ((const char *) source_name_p);
        -:  151:
        -:  152:          *return_value = callback_p (source_name_p,
        -:  153:                                      source_name_size,
        -:  154:                                      source_name_p + source_name_size + 1,
        -:  155:                                      client_source_data_p->uint8_size - source_name_size - 1,
        -:  156:                                      user_p);
        -:  157:
        -:  158:          ret_type = JERRY_DEBUGGER_SOURCE_RECEIVED;
        -:  159:          break;
        -:  160:        }
        -:  161:      }
        -:  162:
        -:  163:      jerry_debugger_transport_sleep ();
        -:  164:    }
        -:  165:
        -:  166:    JERRY_ASSERT (!(JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CLIENT_SOURCE_MODE)
        -:  167:                  || !(JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED));
        -:  168:
        -:  169:    if (client_source_data_p != NULL)
        -:  170:    {
        -:  171:      /* The data may partly arrived. */
        -:  172:      jmem_heap_free_block (client_source_data_p,
        -:  173:                            client_source_data_p->uint8_size + sizeof (jerry_debugger_uint8_data_t));
        -:  174:    }
        -:  175:
        -:  176:    return ret_type;
        -:  177:  }
        -:  178:
        -:  179:  return JERRY_DEBUGGER_SOURCE_RECEIVE_FAILED;
        -:  180:#else /* !JERRY_DEBUGGER */
        -:  181:  JERRY_UNUSED (callback_p);
        -:  182:  JERRY_UNUSED (user_p);
        -:  183:
    #####:  184:  return JERRY_DEBUGGER_SOURCE_RECEIVE_FAILED;
        -:  185:#endif /* JERRY_DEBUGGER */
        -:  186:} /* jerry_debugger_wait_for_client_source */
        -:  187:
        -:  188:/**
        -:  189: * Send the output of the program to the debugger client.
        -:  190: * Currently only sends print output.
        -:  191: */
        -:  192:void
    #####:  193:jerry_debugger_send_output (const jerry_char_t *buffer, /**< buffer */
        -:  194:                            jerry_size_t str_size) /**< string size */
        -:  195:{
        -:  196:#if JERRY_DEBUGGER
        -:  197:  if (JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED)
        -:  198:  {
        -:  199:    jerry_debugger_send_string (JERRY_DEBUGGER_OUTPUT_RESULT,
        -:  200:                                JERRY_DEBUGGER_OUTPUT_OK,
        -:  201:                                (const uint8_t *) buffer,
        -:  202:                                sizeof (uint8_t) * str_size);
        -:  203:  }
        -:  204:#else /* !JERRY_DEBUGGER */
        -:  205:  JERRY_UNUSED (buffer);
        -:  206:  JERRY_UNUSED (str_size);
        -:  207:#endif /* JERRY_DEBUGGER */
    #####:  208:} /* jerry_debugger_send_output */
        -:  209:
        -:  210:/**
        -:  211: * Send the log of the program to the debugger client.
        -:  212: */
        -:  213:void
    #####:  214:jerry_debugger_send_log (jerry_log_level_t level, /**< level of the diagnostics message */
        -:  215:                         const jerry_char_t *buffer, /**< buffer */
        -:  216:                         jerry_size_t str_size) /**< string size */
        -:  217:{
        -:  218:#if JERRY_DEBUGGER
        -:  219:  if (JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED)
        -:  220:  {
        -:  221:    jerry_debugger_send_string (JERRY_DEBUGGER_OUTPUT_RESULT,
        -:  222:                                (uint8_t) (level + 2),
        -:  223:                                (const uint8_t *) buffer,
        -:  224:                                sizeof (uint8_t) * str_size);
        -:  225:  }
        -:  226:#else /* !JERRY_DEBUGGER */
        -:  227:  JERRY_UNUSED (level);
        -:  228:  JERRY_UNUSED (buffer);
        -:  229:  JERRY_UNUSED (str_size);
        -:  230:#endif /* JERRY_DEBUGGER */
    #####:  231:} /* jerry_debugger_send_log */
