        -:    0:Source:/home/workspace/jerry-ext/arg/arg.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-ext/arg.h"
        -:   17:
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "arg-internal.h"
        -:   21:#include "jext-common.h"
        -:   22:
        -:   23:JERRYX_STATIC_ASSERT (sizeof (jerryx_arg_int_option_t) <= sizeof (((jerryx_arg_t *) 0)->extra_info),
        -:   24:                      jerryx_arg_number_options_t_must_fit_into_extra_info);
        -:   25:
        -:   26:/**
        -:   27: * Validate the JS arguments and assign them to the native arguments.
        -:   28: *
        -:   29: * @return jerry undefined: all validators passed,
        -:   30: *         jerry error: a validator failed.
        -:   31: */
        -:   32:jerry_value_t
    #####:   33:jerryx_arg_transform_args (const jerry_value_t *js_arg_p, /**< points to the array with JS arguments */
        -:   34:                           const jerry_length_t js_arg_cnt, /**< the count of the `js_arg_p` array */
        -:   35:                           const jerryx_arg_t *c_arg_p, /**< points to the array of validation/transformation steps */
        -:   36:                           jerry_length_t c_arg_cnt) /**< the count of the `c_arg_p` array */
        -:   37:{
    #####:   38:  jerry_value_t ret = jerry_undefined ();
        -:   39:
    #####:   40:  jerryx_arg_js_iterator_t iterator = { .js_arg_p = js_arg_p, .js_arg_cnt = js_arg_cnt, .js_arg_idx = 0 };
        -:   41:
    #####:   42:  for (; c_arg_cnt != 0 && !jerry_value_is_exception (ret); c_arg_cnt--, c_arg_p++)
        -:   43:  {
    #####:   44:    ret = c_arg_p->func (&iterator, c_arg_p);
        -:   45:  }
        -:   46:
    #####:   47:  return ret;
        -:   48:} /* jerryx_arg_transform_args */
        -:   49:
        -:   50:/**
        -:   51: * Validate the this value and the JS arguments,
        -:   52: * and assign them to the native arguments.
        -:   53: * This function is useful to perform input validation inside external
        -:   54: * function handlers (see jerry_external_handler_t).
        -:   55: * @note this_val is processed as the first value, before the array of arguments.
        -:   56: *
        -:   57: * @return jerry undefined: all validators passed,
        -:   58: *         jerry error: a validator failed.
        -:   59: */
        -:   60:jerry_value_t
    #####:   61:jerryx_arg_transform_this_and_args (const jerry_value_t this_val, /**< the this_val for the external function */
        -:   62:                                    const jerry_value_t *js_arg_p, /**< points to the array with JS arguments */
        -:   63:                                    const jerry_length_t js_arg_cnt, /**< the count of the `js_arg_p` array */
        -:   64:                                    const jerryx_arg_t *c_arg_p, /**< points to the array of transformation steps */
        -:   65:                                    jerry_length_t c_arg_cnt) /**< the count of the `c_arg_p` array */
        -:   66:{
    #####:   67:  if (c_arg_cnt == 0)
        -:   68:  {
    #####:   69:    return jerry_undefined ();
        -:   70:  }
        -:   71:
    #####:   72:  jerryx_arg_js_iterator_t iterator = { .js_arg_p = &this_val, .js_arg_cnt = 1, .js_arg_idx = 0 };
        -:   73:
    #####:   74:  jerry_value_t ret = c_arg_p->func (&iterator, c_arg_p);
        -:   75:
    #####:   76:  if (jerry_value_is_exception (ret))
        -:   77:  {
    #####:   78:    jerry_value_free (ret);
        -:   79:
    #####:   80:    return jerry_throw_sz (JERRY_ERROR_TYPE, "'this' validation failed.");
        -:   81:  }
        -:   82:
    #####:   83:  return jerryx_arg_transform_args (js_arg_p, js_arg_cnt, c_arg_p + 1, c_arg_cnt - 1);
        -:   84:} /* jerryx_arg_transform_this_and_args */
        -:   85:
        -:   86:/**
        -:   87: * Validate the `obj_val`'s properties,
        -:   88: * and assign them to the native arguments.
        -:   89: *
        -:   90: * @return jerry undefined: all validators passed,
        -:   91: *         jerry error: a validator failed.
        -:   92: */
        -:   93:jerry_value_t
    #####:   94:jerryx_arg_transform_object_properties (const jerry_value_t obj_val, /**< the JS object */
        -:   95:                                        const jerry_char_t **name_p, /**< property name list of the JS object */
        -:   96:                                        const jerry_length_t name_cnt, /**< count of the name list */
        -:   97:                                        const jerryx_arg_t *c_arg_p, /**< points to the array of transformation steps */
        -:   98:                                        jerry_length_t c_arg_cnt) /**< the count of the `c_arg_p` array */
    #####:   99:{
    #####:  100:  if (!jerry_value_is_object (obj_val))
        -:  101:  {
    #####:  102:    return jerry_throw_sz (JERRY_ERROR_TYPE, "Not an object.");
        -:  103:  }
        -:  104:
    #####:  105:  JERRY_VLA (jerry_value_t, prop, name_cnt);
        -:  106:
    #####:  107:  for (jerry_length_t i = 0; i < name_cnt; i++, name_p++)
        -:  108:  {
    #####:  109:    const jerry_value_t name_str = jerry_string_sz ((char *) (*name_p));
    #####:  110:    prop[i] = jerry_object_get (obj_val, name_str);
    #####:  111:    jerry_value_free (name_str);
        -:  112:
    #####:  113:    if (jerry_value_is_exception (prop[i]))
        -:  114:    {
    #####:  115:      for (jerry_length_t j = 0; j < i; j++)
        -:  116:      {
    #####:  117:        jerry_value_free (prop[j]);
        -:  118:      }
        -:  119:
    #####:  120:      return prop[i];
        -:  121:    }
        -:  122:  }
        -:  123:
    #####:  124:  const jerry_value_t ret = jerryx_arg_transform_args (prop, name_cnt, c_arg_p, c_arg_cnt);
        -:  125:
    #####:  126:  for (jerry_length_t i = 0; i < name_cnt; i++)
        -:  127:  {
    #####:  128:    jerry_value_free (prop[i]);
        -:  129:  }
        -:  130:
    #####:  131:  return ret;
        -:  132:} /* jerryx_arg_transform_object_properties */
        -:  133:
        -:  134:/**
        -:  135: * Validate the items in the JS array and assign them to the native arguments.
        -:  136: *
        -:  137: * @return jerry undefined: all validators passed,
        -:  138: *         jerry error: a validator failed.
        -:  139: */
        -:  140:jerry_value_t
    #####:  141:jerryx_arg_transform_array (const jerry_value_t array_val, /**< points to the JS array */
        -:  142:                            const jerryx_arg_t *c_arg_p, /**< points to the array of validation/transformation steps */
        -:  143:                            jerry_length_t c_arg_cnt) /**< the count of the `c_arg_p` array */
    #####:  144:{
    #####:  145:  if (!jerry_value_is_array (array_val))
        -:  146:  {
    #####:  147:    return jerry_throw_sz (JERRY_ERROR_TYPE, "Not an array.");
        -:  148:  }
        -:  149:
    #####:  150:  JERRY_VLA (jerry_value_t, arr, c_arg_cnt);
        -:  151:
    #####:  152:  for (jerry_length_t i = 0; i < c_arg_cnt; i++)
        -:  153:  {
    #####:  154:    arr[i] = jerry_object_get_index (array_val, i);
        -:  155:
    #####:  156:    if (jerry_value_is_exception (arr[i]))
        -:  157:    {
    #####:  158:      for (jerry_length_t j = 0; j < i; j++)
        -:  159:      {
    #####:  160:        jerry_value_free (arr[j]);
        -:  161:      }
        -:  162:
    #####:  163:      return arr[i];
        -:  164:    }
        -:  165:  }
        -:  166:
    #####:  167:  const jerry_value_t ret = jerryx_arg_transform_args (arr, c_arg_cnt, c_arg_p, c_arg_cnt);
        -:  168:
    #####:  169:  for (jerry_length_t i = 0; i < c_arg_cnt; i++)
        -:  170:  {
    #####:  171:    jerry_value_free (arr[i]);
        -:  172:  }
        -:  173:
    #####:  174:  return ret;
        -:  175:} /* jerryx_arg_transform_array */
