        -:    0:Source:/home/workspace/tests/unit-core/test-api-binary-operations-comparisons.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:#define T(op, lhs, rhs, res) \
        -:   21:  {                          \
        -:   22:    op, lhs, rhs, res        \
        -:   23:  }
        -:   24:
        -:   25:typedef struct
        -:   26:{
        -:   27:  jerry_binary_op_t op;
        -:   28:  jerry_value_t lhs;
        -:   29:  jerry_value_t rhs;
        -:   30:  bool expected;
        -:   31:} test_entry_t;
        -:   32:
        -:   33:int
    #####:   34:main (void)
        -:   35:{
    #####:   36:  TEST_INIT ();
        -:   37:
    #####:   38:  jerry_init (JERRY_INIT_EMPTY);
        -:   39:
    #####:   40:  jerry_value_t obj1 = jerry_eval ((const jerry_char_t *) "o={x:1};o", 9, JERRY_PARSE_NO_OPTS);
    #####:   41:  jerry_value_t obj2 = jerry_eval ((const jerry_char_t *) "o={x:1};o", 9, JERRY_PARSE_NO_OPTS);
    #####:   42:  jerry_value_t err1 = jerry_throw_sz (JERRY_ERROR_SYNTAX, "error");
        -:   43:
    #####:   44:  test_entry_t tests[] = {
        -:   45:    /* Testing strict equal comparison */
    #####:   46:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_number (5.0), jerry_number (5.0), true),
    #####:   47:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_number (3.1), jerry_number (10), false),
    #####:   48:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_number (3.1), jerry_undefined (), false),
    #####:   49:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_number (3.1), jerry_boolean (true), false),
    #####:   50:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_string_sz ("example string"), jerry_string_sz ("example string"), true),
    #####:   51:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_string_sz ("example string"), jerry_undefined (), false),
    #####:   52:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_string_sz ("example string"), jerry_null (), false),
    #####:   53:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_string_sz ("example string"), jerry_number (5.0), false),
    #####:   54:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_undefined (), jerry_undefined (), true),
    #####:   55:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_undefined (), jerry_null (), false),
    #####:   56:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_null (), jerry_null (), true),
    #####:   57:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_boolean (true), jerry_boolean (true), true),
    #####:   58:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_boolean (true), jerry_boolean (false), false),
    #####:   59:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_boolean (false), jerry_boolean (true), false),
    #####:   60:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_boolean (false), jerry_boolean (false), true),
    #####:   61:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_value_copy (obj1), jerry_value_copy (obj1), true),
    #####:   62:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_value_copy (obj1), jerry_value_copy (obj2), false),
    #####:   63:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_value_copy (obj2), jerry_value_copy (obj1), false),
    #####:   64:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_value_copy (obj1), jerry_null (), false),
    #####:   65:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_value_copy (obj1), jerry_undefined (), false),
    #####:   66:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_value_copy (obj1), jerry_boolean (true), false),
    #####:   67:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_value_copy (obj1), jerry_boolean (false), false),
    #####:   68:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_value_copy (obj1), jerry_number (5.0), false),
    #####:   69:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_value_copy (obj1), jerry_string_sz ("example string"), false),
        -:   70:
        -:   71:    /* Testing equal comparison */
    #####:   72:    T (JERRY_BIN_OP_EQUAL, jerry_number (5.0), jerry_number (5.0), true),
    #####:   73:    T (JERRY_BIN_OP_EQUAL, jerry_number (3.1), jerry_number (10), false),
    #####:   74:    T (JERRY_BIN_OP_EQUAL, jerry_number (3.1), jerry_undefined (), false),
    #####:   75:    T (JERRY_BIN_OP_EQUAL, jerry_number (3.1), jerry_boolean (true), false),
    #####:   76:    T (JERRY_BIN_OP_EQUAL, jerry_string_sz ("example string"), jerry_string_sz ("example string"), true),
    #####:   77:    T (JERRY_BIN_OP_EQUAL, jerry_string_sz ("example string"), jerry_undefined (), false),
    #####:   78:    T (JERRY_BIN_OP_EQUAL, jerry_string_sz ("example string"), jerry_null (), false),
    #####:   79:    T (JERRY_BIN_OP_EQUAL, jerry_string_sz ("example string"), jerry_number (5.0), false),
    #####:   80:    T (JERRY_BIN_OP_EQUAL, jerry_undefined (), jerry_undefined (), true),
    #####:   81:    T (JERRY_BIN_OP_EQUAL, jerry_undefined (), jerry_null (), true),
    #####:   82:    T (JERRY_BIN_OP_EQUAL, jerry_null (), jerry_null (), true),
    #####:   83:    T (JERRY_BIN_OP_EQUAL, jerry_boolean (true), jerry_boolean (true), true),
    #####:   84:    T (JERRY_BIN_OP_EQUAL, jerry_boolean (true), jerry_boolean (false), false),
    #####:   85:    T (JERRY_BIN_OP_EQUAL, jerry_boolean (false), jerry_boolean (true), false),
    #####:   86:    T (JERRY_BIN_OP_EQUAL, jerry_boolean (false), jerry_boolean (false), true),
    #####:   87:    T (JERRY_BIN_OP_EQUAL, jerry_value_copy (obj1), jerry_value_copy (obj1), true),
    #####:   88:    T (JERRY_BIN_OP_EQUAL, jerry_value_copy (obj1), jerry_value_copy (obj2), false),
    #####:   89:    T (JERRY_BIN_OP_EQUAL, jerry_value_copy (obj2), jerry_value_copy (obj1), false),
    #####:   90:    T (JERRY_BIN_OP_EQUAL, jerry_value_copy (obj1), jerry_null (), false),
    #####:   91:    T (JERRY_BIN_OP_EQUAL, jerry_value_copy (obj1), jerry_undefined (), false),
    #####:   92:    T (JERRY_BIN_OP_EQUAL, jerry_value_copy (obj1), jerry_boolean (true), false),
    #####:   93:    T (JERRY_BIN_OP_EQUAL, jerry_value_copy (obj1), jerry_boolean (false), false),
    #####:   94:    T (JERRY_BIN_OP_EQUAL, jerry_value_copy (obj1), jerry_number (5.0), false),
    #####:   95:    T (JERRY_BIN_OP_EQUAL, jerry_value_copy (obj1), jerry_string_sz ("example string"), false),
        -:   96:
        -:   97:    /* Testing less comparison */
    #####:   98:    T (JERRY_BIN_OP_LESS, jerry_number (5.0), jerry_number (5.0), false),
    #####:   99:    T (JERRY_BIN_OP_LESS, jerry_number (3.1), jerry_number (10), true),
    #####:  100:    T (JERRY_BIN_OP_LESS, jerry_number (3.1), jerry_undefined (), false),
    #####:  101:    T (JERRY_BIN_OP_LESS, jerry_number (3.1), jerry_boolean (true), false),
    #####:  102:    T (JERRY_BIN_OP_LESS, jerry_string_sz ("1"), jerry_string_sz ("2"), true),
    #####:  103:    T (JERRY_BIN_OP_LESS, jerry_string_sz ("1"), jerry_undefined (), false),
    #####:  104:    T (JERRY_BIN_OP_LESS, jerry_string_sz ("1"), jerry_null (), false),
    #####:  105:    T (JERRY_BIN_OP_LESS, jerry_string_sz ("1"), jerry_number (5.0), true),
    #####:  106:    T (JERRY_BIN_OP_LESS, jerry_undefined (), jerry_undefined (), false),
    #####:  107:    T (JERRY_BIN_OP_LESS, jerry_undefined (), jerry_null (), false),
    #####:  108:    T (JERRY_BIN_OP_LESS, jerry_null (), jerry_null (), false),
    #####:  109:    T (JERRY_BIN_OP_LESS, jerry_boolean (true), jerry_boolean (true), false),
    #####:  110:    T (JERRY_BIN_OP_LESS, jerry_boolean (true), jerry_boolean (false), false),
    #####:  111:    T (JERRY_BIN_OP_LESS, jerry_boolean (false), jerry_boolean (true), true),
    #####:  112:    T (JERRY_BIN_OP_LESS, jerry_boolean (false), jerry_boolean (false), false),
        -:  113:
        -:  114:    /* Testing less or equal comparison */
    #####:  115:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_number (5.0), jerry_number (5.0), true),
    #####:  116:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_number (5.1), jerry_number (5.0), false),
    #####:  117:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_number (3.1), jerry_number (10), true),
    #####:  118:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_number (3.1), jerry_undefined (), false),
    #####:  119:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_number (3.1), jerry_boolean (true), false),
    #####:  120:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_string_sz ("1"), jerry_string_sz ("2"), true),
    #####:  121:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_string_sz ("1"), jerry_string_sz ("1"), true),
    #####:  122:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_string_sz ("1"), jerry_undefined (), false),
    #####:  123:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_string_sz ("1"), jerry_null (), false),
    #####:  124:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_string_sz ("1"), jerry_number (5.0), true),
    #####:  125:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_string_sz ("5.0"), jerry_number (5.0), true),
    #####:  126:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_undefined (), jerry_undefined (), false),
    #####:  127:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_undefined (), jerry_null (), false),
    #####:  128:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_null (), jerry_null (), true),
    #####:  129:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_boolean (true), jerry_boolean (true), true),
    #####:  130:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_boolean (true), jerry_boolean (false), false),
    #####:  131:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_boolean (false), jerry_boolean (true), true),
    #####:  132:    T (JERRY_BIN_OP_LESS_EQUAL, jerry_boolean (false), jerry_boolean (false), true),
        -:  133:
        -:  134:    /* Testing greater comparison */
    #####:  135:    T (JERRY_BIN_OP_GREATER, jerry_number (5.0), jerry_number (5.0), false),
    #####:  136:    T (JERRY_BIN_OP_GREATER, jerry_number (10), jerry_number (3.1), true),
    #####:  137:    T (JERRY_BIN_OP_GREATER, jerry_number (3.1), jerry_undefined (), false),
    #####:  138:    T (JERRY_BIN_OP_GREATER, jerry_number (3.1), jerry_boolean (true), true),
    #####:  139:    T (JERRY_BIN_OP_GREATER, jerry_string_sz ("2"), jerry_string_sz ("1"), true),
    #####:  140:    T (JERRY_BIN_OP_GREATER, jerry_string_sz ("1"), jerry_string_sz ("2"), false),
    #####:  141:    T (JERRY_BIN_OP_GREATER, jerry_string_sz ("1"), jerry_undefined (), false),
    #####:  142:    T (JERRY_BIN_OP_GREATER, jerry_string_sz ("1"), jerry_null (), true),
    #####:  143:    T (JERRY_BIN_OP_GREATER, jerry_number (5.0), jerry_string_sz ("1"), true),
    #####:  144:    T (JERRY_BIN_OP_GREATER, jerry_undefined (), jerry_undefined (), false),
    #####:  145:    T (JERRY_BIN_OP_GREATER, jerry_undefined (), jerry_null (), false),
    #####:  146:    T (JERRY_BIN_OP_GREATER, jerry_null (), jerry_null (), false),
    #####:  147:    T (JERRY_BIN_OP_GREATER, jerry_boolean (true), jerry_boolean (true), false),
    #####:  148:    T (JERRY_BIN_OP_GREATER, jerry_boolean (true), jerry_boolean (false), true),
    #####:  149:    T (JERRY_BIN_OP_GREATER, jerry_boolean (false), jerry_boolean (true), false),
    #####:  150:    T (JERRY_BIN_OP_GREATER, jerry_boolean (false), jerry_boolean (false), false),
        -:  151:
        -:  152:    /* Testing greater or equal comparison */
    #####:  153:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_number (5.0), jerry_number (5.0), true),
    #####:  154:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_number (5.0), jerry_number (5.1), false),
    #####:  155:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_number (10), jerry_number (3.1), true),
    #####:  156:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_number (3.1), jerry_undefined (), false),
    #####:  157:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_number (3.1), jerry_boolean (true), true),
    #####:  158:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_string_sz ("2"), jerry_string_sz ("1"), true),
    #####:  159:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_string_sz ("1"), jerry_string_sz ("1"), true),
    #####:  160:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_string_sz ("1"), jerry_undefined (), false),
    #####:  161:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_string_sz ("1"), jerry_null (), true),
    #####:  162:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_number (5.0), jerry_string_sz ("1"), true),
    #####:  163:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_string_sz ("5.0"), jerry_number (5.0), true),
    #####:  164:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_undefined (), jerry_undefined (), false),
    #####:  165:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_undefined (), jerry_null (), false),
    #####:  166:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_null (), jerry_null (), true),
    #####:  167:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_boolean (true), jerry_boolean (true), true),
    #####:  168:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_boolean (true), jerry_boolean (false), true),
    #####:  169:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_boolean (false), jerry_boolean (true), false),
    #####:  170:    T (JERRY_BIN_OP_GREATER_EQUAL, jerry_boolean (false), jerry_boolean (false), true),
        -:  171:  };
        -:  172:
    #####:  173:  for (uint32_t idx = 0; idx < sizeof (tests) / sizeof (test_entry_t); idx++)
        -:  174:  {
    #####:  175:    jerry_value_t result = jerry_binary_op (tests[idx].op, tests[idx].lhs, tests[idx].rhs);
    #####:  176:    TEST_ASSERT (!jerry_value_is_exception (result));
    #####:  177:    TEST_ASSERT (jerry_value_is_true (result) == tests[idx].expected);
    #####:  178:    jerry_value_free (tests[idx].lhs);
    #####:  179:    jerry_value_free (tests[idx].rhs);
    #####:  180:    jerry_value_free (result);
        -:  181:  }
        -:  182:
    #####:  183:  test_entry_t error_tests[] = {
    #####:  184:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_value_copy (err1), jerry_value_copy (err1), true),
    #####:  185:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_value_copy (err1), jerry_undefined (), true),
    #####:  186:    T (JERRY_BIN_OP_STRICT_EQUAL, jerry_undefined (), jerry_value_copy (err1), true),
        -:  187:  };
        -:  188:
    #####:  189:  for (uint32_t idx = 0; idx < sizeof (error_tests) / sizeof (test_entry_t); idx++)
        -:  190:  {
    #####:  191:    jerry_value_t result = jerry_binary_op (tests[idx].op, error_tests[idx].lhs, error_tests[idx].rhs);
    #####:  192:    TEST_ASSERT (jerry_value_is_exception (result) == error_tests[idx].expected);
    #####:  193:    jerry_value_free (error_tests[idx].lhs);
    #####:  194:    jerry_value_free (error_tests[idx].rhs);
    #####:  195:    jerry_value_free (result);
        -:  196:  }
        -:  197:
    #####:  198:  jerry_value_free (obj1);
    #####:  199:  jerry_value_free (obj2);
    #####:  200:  jerry_value_free (err1);
        -:  201:
    #####:  202:  jerry_cleanup ();
        -:  203:
        -:  204:  return 0;
        -:  205:} /* main */
