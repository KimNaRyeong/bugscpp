        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-async-generator-prototype.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-async-generator-object.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-gc.h"
        -:   20:#include "ecma-globals.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:#include "ecma-iterator-object.h"
        -:   23:#include "ecma-promise-object.h"
        -:   24:
        -:   25:#include "jcontext.h"
        -:   26:#include "opcodes.h"
        -:   27:#include "vm-defines.h"
        -:   28:
        -:   29:#if JERRY_ESNEXT
        -:   30:
        -:   31:#define ECMA_BUILTINS_INTERNAL
        -:   32:#include "ecma-builtins-internal.h"
        -:   33:
        -:   34:/**
        -:   35: * This object has a custom dispatch function.
        -:   36: */
        -:   37:#define BUILTIN_CUSTOM_DISPATCH
        -:   38:
        -:   39:/**
        -:   40: * List of built-in routine identifiers.
        -:   41: */
        -:   42:enum
        -:   43:{
        -:   44:  ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_START = 0,
        -:   45:  ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_NEXT,
        -:   46:  ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_THROW,
        -:   47:  ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_RETURN
        -:   48:};
        -:   49:
        -:   50:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-async-generator-prototype.inc.h"
        -:   51:#define BUILTIN_UNDERSCORED_ID  async_generator_prototype
        -:   52:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   53:
        -:   54:/** \addtogroup ecma ECMA
        -:   55: * @{
        -:   56: *
        -:   57: * \addtogroup ecmabuiltins
        -:   58: * @{
        -:   59: *
        -:   60: * \addtogroup asyncgenerator ECMA AsyncGenerator.prototype object built-in
        -:   61: * @{
        -:   62: */
        -:   63:
        -:   64:/**
        -:   65: * Convert routine type to operation type..
        -:   66: */
        -:   67:#define ECMA_ASYNC_GENERATOR_ROUTINE_TO_OPERATION(type) \
        -:   68:  ((ecma_async_generator_operation_type_t) ((type) -ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_NEXT))
        -:   69:
        -:   70:JERRY_STATIC_ASSERT (ECMA_ASYNC_GENERATOR_ROUTINE_TO_OPERATION (ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_NEXT)
        -:   71:                       == ECMA_ASYNC_GENERATOR_DO_NEXT,
        -:   72:                     convert_ecma_async_generator_routine_next_to_ecma_async_generator_do_next_failed);
        -:   73:
        -:   74:JERRY_STATIC_ASSERT (ECMA_ASYNC_GENERATOR_ROUTINE_TO_OPERATION (ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_THROW)
        -:   75:                       == ECMA_ASYNC_GENERATOR_DO_THROW,
        -:   76:                     convert_ecma_async_generator_routine_throw_to_ecma_async_generator_do_throw_failed);
        -:   77:
        -:   78:JERRY_STATIC_ASSERT (ECMA_ASYNC_GENERATOR_ROUTINE_TO_OPERATION (ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_RETURN)
        -:   79:                       == ECMA_ASYNC_GENERATOR_DO_RETURN,
        -:   80:                     convert_ecma_async_generator_routine_return_to_ecma_async_generator_do_return_failed);
        -:   81:
        -:   82:/**
        -:   83: * Dispatcher of the Generator built-in's routines
        -:   84: *
        -:   85: * @return ecma value
        -:   86: *         Returned value must be freed with ecma_free_value.
        -:   87: */
        -:   88:ecma_value_t
    #####:   89:ecma_builtin_async_generator_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:   90:                                                                                      *   identifier */
        -:   91:                                                         ecma_value_t this_arg, /**< 'this' argument value */
        -:   92:                                                         const ecma_value_t arguments_list_p[], /**< list of arguments
        -:   93:                                                                                                 *   passed to
        -:   94:                                                                                                 *   routine */
        -:   95:                                                         uint32_t arguments_number) /**< length of arguments'
        -:   96:                                                                                     *   list */
        -:   97:{
        -:   98:  JERRY_UNUSED (arguments_number);
        -:   99:
    #####:  100:  vm_executable_object_t *executable_object_p = NULL;
        -:  101:
    #####:  102:  if (ecma_is_value_object (this_arg))
        -:  103:  {
    #####:  104:    ecma_object_t *object_p = ecma_get_object_from_value (this_arg);
        -:  105:
    #####:  106:    if (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_ASYNC_GENERATOR))
        -:  107:    {
    #####:  108:      executable_object_p = (vm_executable_object_t *) object_p;
        -:  109:    }
        -:  110:  }
        -:  111:
    #####:  112:  if (executable_object_p == NULL)
        -:  113:  {
    #####:  114:    const char *msg_p = ecma_get_error_msg (ECMA_ERR_ARGUMENT_THIS_NOT_ASYNC_GENERATOR);
    #####:  115:    lit_utf8_size_t msg_size = ecma_get_error_size (ECMA_ERR_ARGUMENT_THIS_NOT_ASYNC_GENERATOR);
    #####:  116:    ecma_string_t *error_msg_p = ecma_new_ecma_string_from_ascii ((const lit_utf8_byte_t *) msg_p, msg_size);
        -:  117:
    #####:  118:    ecma_object_t *type_error_obj_p = ecma_new_standard_error (JERRY_ERROR_TYPE, error_msg_p);
    #####:  119:    ecma_deref_ecma_string (error_msg_p);
        -:  120:
    #####:  121:    ecma_value_t promise = ecma_op_create_promise_object (ECMA_VALUE_EMPTY, ECMA_VALUE_UNDEFINED, NULL);
    #####:  122:    ecma_reject_promise (promise, ecma_make_object_value (type_error_obj_p));
    #####:  123:    ecma_deref_object (type_error_obj_p);
        -:  124:
    #####:  125:    return promise;
        -:  126:  }
        -:  127:
    #####:  128:  if (executable_object_p->extended_object.u.cls.u2.executable_obj_flags & ECMA_EXECUTABLE_OBJECT_COMPLETED)
        -:  129:  {
    #####:  130:    ecma_value_t promise = ecma_make_object_value (ecma_builtin_get (ECMA_BUILTIN_ID_PROMISE));
        -:  131:
    #####:  132:    if (JERRY_UNLIKELY (builtin_routine_id == ECMA_ASYNC_GENERATOR_PROTOTYPE_ROUTINE_THROW))
        -:  133:    {
    #####:  134:      return ecma_promise_reject_or_resolve (promise, arguments_list_p[0], false);
        -:  135:    }
        -:  136:
    #####:  137:    ecma_value_t iter_result = ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
    #####:  138:    ecma_value_t result = ecma_promise_reject_or_resolve (promise, iter_result, true);
    #####:  139:    ecma_free_value (iter_result);
    #####:  140:    return result;
        -:  141:  }
        -:  142:
    #####:  143:  return ecma_async_generator_enqueue (executable_object_p,
    #####:  144:                                       ECMA_ASYNC_GENERATOR_ROUTINE_TO_OPERATION (builtin_routine_id),
        -:  145:                                       arguments_list_p[0]);
        -:  146:} /* ecma_builtin_async_generator_prototype_dispatch_routine */
        -:  147:
        -:  148:/**
        -:  149: * @}
        -:  150: * @}
        -:  151: * @}
        -:  152: */
        -:  153:
        -:  154:#endif /* JERRY_ESNEXT */
