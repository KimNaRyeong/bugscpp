        -:    0:Source:/home/workspace/jerry-ext/arg/arg-transform-functions.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <math.h>
        -:   17:
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "jerryscript-ext/arg.h"
        -:   21:
        -:   22:/**
        -:   23: * The common function to deal with optional arguments.
        -:   24: * The core transform function is provided by argument `func`.
        -:   25: *
        -:   26: * @return jerry undefined: the transformer passes,
        -:   27: *         jerry error: the transformer fails.
        -:   28: */
        -:   29:jerry_value_t
    #####:   30:jerryx_arg_transform_optional (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:   31:                               const jerryx_arg_t *c_arg_p, /**< native arg */
        -:   32:                               jerryx_arg_transform_func_t func) /**< the core transform function */
        -:   33:{
    #####:   34:  jerry_value_t js_arg = jerryx_arg_js_iterator_peek (js_arg_iter_p);
        -:   35:
    #####:   36:  if (jerry_value_is_undefined (js_arg))
        -:   37:  {
    #####:   38:    return jerryx_arg_js_iterator_pop (js_arg_iter_p);
        -:   39:  }
        -:   40:
    #####:   41:  return func (js_arg_iter_p, c_arg_p);
        -:   42:} /* jerryx_arg_transform_optional */
        -:   43:
        -:   44:/**
        -:   45: * The common part in transforming a JS argument to a number (double or certain int) type.
        -:   46: * Type coercion is not allowed.
        -:   47: *
        -:   48: * @return jerry undefined: the transformer passes,
        -:   49: *         jerry error: the transformer fails.
        -:   50: */
        -:   51:static jerry_value_t
    #####:   52:jerryx_arg_transform_number_strict_common (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:   53:                                           double *number_p) /**< [out] the number in JS arg */
        -:   54:{
    #####:   55:  jerry_value_t js_arg = jerryx_arg_js_iterator_pop (js_arg_iter_p);
        -:   56:
    #####:   57:  if (!jerry_value_is_number (js_arg))
        -:   58:  {
    #####:   59:    return jerry_throw_sz (JERRY_ERROR_TYPE, "It is not a number.");
        -:   60:  }
        -:   61:
    #####:   62:  *number_p = jerry_value_as_number (js_arg);
        -:   63:
    #####:   64:  return jerry_undefined ();
        -:   65:} /* jerryx_arg_transform_number_strict_common */
        -:   66:
        -:   67:/**
        -:   68: * The common part in transforming a JS argument to a number (double or certain int) type.
        -:   69: * Type coercion is allowed.
        -:   70: *
        -:   71: * @return jerry undefined: the transformer passes,
        -:   72: *         jerry error: the transformer fails.
        -:   73: */
        -:   74:static jerry_value_t
    #####:   75:jerryx_arg_transform_number_common (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:   76:                                    double *number_p) /**< [out] the number in JS arg */
        -:   77:{
    #####:   78:  jerry_value_t js_arg = jerryx_arg_js_iterator_pop (js_arg_iter_p);
        -:   79:
    #####:   80:  jerry_value_t to_number = jerry_value_to_number (js_arg);
        -:   81:
    #####:   82:  if (jerry_value_is_exception (to_number))
        -:   83:  {
    #####:   84:    jerry_value_free (to_number);
        -:   85:
    #####:   86:    return jerry_throw_sz (JERRY_ERROR_TYPE, "It can not be converted to a number.");
        -:   87:  }
        -:   88:
    #####:   89:  *number_p = jerry_value_as_number (to_number);
    #####:   90:  jerry_value_free (to_number);
        -:   91:
    #####:   92:  return jerry_undefined ();
        -:   93:} /* jerryx_arg_transform_number_common */
        -:   94:
        -:   95:/**
        -:   96: * Transform a JS argument to a double. Type coercion is not allowed.
        -:   97: *
        -:   98: * @return jerry undefined: the transformer passes,
        -:   99: *         jerry error: the transformer fails.
        -:  100: */
        -:  101:jerry_value_t
    #####:  102:jerryx_arg_transform_number_strict (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  103:                                    const jerryx_arg_t *c_arg_p) /**< the native arg */
        -:  104:{
    #####:  105:  return jerryx_arg_transform_number_strict_common (js_arg_iter_p, c_arg_p->dest);
        -:  106:} /* jerryx_arg_transform_number_strict */
        -:  107:
        -:  108:/**
        -:  109: * Transform a JS argument to a double. Type coercion is allowed.
        -:  110: *
        -:  111: * @return jerry undefined: the transformer passes,
        -:  112: *         jerry error: the transformer fails.
        -:  113: */
        -:  114:jerry_value_t
    #####:  115:jerryx_arg_transform_number (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  116:                             const jerryx_arg_t *c_arg_p) /**< the native arg */
        -:  117:{
    #####:  118:  return jerryx_arg_transform_number_common (js_arg_iter_p, c_arg_p->dest);
        -:  119:} /* jerryx_arg_transform_number */
        -:  120:
        -:  121:/**
        -:  122: * Helper function to process a double number before converting it
        -:  123: * to an integer.
        -:  124: *
        -:  125: * @return jerry undefined: the transformer passes,
        -:  126: *         jerry error: the transformer fails.
        -:  127: */
        -:  128:static jerry_value_t
    #####:  129:jerryx_arg_helper_process_double (double *d, /**< [in, out] the number to be processed */
        -:  130:                                  double min, /**< the min value for clamping */
        -:  131:                                  double max, /**< the max value for clamping */
        -:  132:                                  jerryx_arg_int_option_t option) /**< the converting policies */
        -:  133:{
    #####:  134:  if (*d != *d) /* isnan (*d) triggers conversion warning on clang<9 */
        -:  135:  {
    #####:  136:    return jerry_throw_sz (JERRY_ERROR_TYPE, "The number is NaN.");
        -:  137:  }
        -:  138:
    #####:  139:  if (option.clamp == JERRYX_ARG_NO_CLAMP)
        -:  140:  {
    #####:  141:    if (*d > max || *d < min)
        -:  142:    {
    #####:  143:      return jerry_throw_sz (JERRY_ERROR_TYPE, "The number is out of range.");
        -:  144:    }
        -:  145:  }
        -:  146:  else
        -:  147:  {
    #####:  148:    *d = *d < min ? min : *d;
    #####:  149:    *d = *d > max ? max : *d;
        -:  150:  }
        -:  151:
    #####:  152:  if (option.round == JERRYX_ARG_ROUND)
        -:  153:  {
    #####:  154:    *d = (*d >= 0.0) ? floor (*d + 0.5) : ceil (*d - 0.5);
        -:  155:  }
    #####:  156:  else if (option.round == JERRYX_ARG_FLOOR)
        -:  157:  {
    #####:  158:    *d = floor (*d);
        -:  159:  }
        -:  160:  else
        -:  161:  {
    #####:  162:    *d = ceil (*d);
        -:  163:  }
        -:  164:
    #####:  165:  return jerry_undefined ();
        -:  166:} /* jerryx_arg_helper_process_double */
        -:  167:
        -:  168:/**
        -:  169: * Use the macro to define thr transform functions for int type.
        -:  170: */
        -:  171:#define JERRYX_ARG_TRANSFORM_FUNC_FOR_INT_TEMPLATE(type, suffix, min, max)                    \
        -:  172:  jerry_value_t jerryx_arg_transform_##type##suffix (jerryx_arg_js_iterator_t *js_arg_iter_p, \
        -:  173:                                                     const jerryx_arg_t *c_arg_p)             \
        -:  174:  {                                                                                           \
        -:  175:    double tmp = 0.0;                                                                         \
        -:  176:    jerry_value_t rv = jerryx_arg_transform_number##suffix##_common (js_arg_iter_p, &tmp);    \
        -:  177:    if (jerry_value_is_exception (rv))                                                        \
        -:  178:    {                                                                                         \
        -:  179:      return rv;                                                                              \
        -:  180:    }                                                                                         \
        -:  181:    jerry_value_free (rv);                                                                    \
        -:  182:    union                                                                                     \
        -:  183:    {                                                                                         \
        -:  184:      jerryx_arg_int_option_t int_option;                                                     \
        -:  185:      uintptr_t extra_info;                                                                   \
        -:  186:    } u = { .extra_info = c_arg_p->extra_info };                                              \
        -:  187:    rv = jerryx_arg_helper_process_double (&tmp, min, max, u.int_option);                     \
        -:  188:    if (jerry_value_is_exception (rv))                                                        \
        -:  189:    {                                                                                         \
        -:  190:      return rv;                                                                              \
        -:  191:    }                                                                                         \
        -:  192:    *(type##_t *) c_arg_p->dest = (type##_t) tmp;                                             \
        -:  193:    return rv;                                                                                \
        -:  194:  }
        -:  195:
        -:  196:#define JERRYX_ARG_TRANSFORM_FUNC_FOR_INT(type, min, max)              \
        -:  197:  JERRYX_ARG_TRANSFORM_FUNC_FOR_INT_TEMPLATE (type, _strict, min, max) \
        -:  198:  JERRYX_ARG_TRANSFORM_FUNC_FOR_INT_TEMPLATE (type, , min, max)
        -:  199:
    #####:  200:JERRYX_ARG_TRANSFORM_FUNC_FOR_INT (uint8, 0, UINT8_MAX)
    #####:  201:JERRYX_ARG_TRANSFORM_FUNC_FOR_INT (int8, INT8_MIN, INT8_MAX)
    #####:  202:JERRYX_ARG_TRANSFORM_FUNC_FOR_INT (uint16, 0, UINT16_MAX)
    #####:  203:JERRYX_ARG_TRANSFORM_FUNC_FOR_INT (int16, INT16_MIN, INT16_MAX)
    #####:  204:JERRYX_ARG_TRANSFORM_FUNC_FOR_INT (uint32, 0, UINT32_MAX)
    #####:  205:JERRYX_ARG_TRANSFORM_FUNC_FOR_INT (int32, INT32_MIN, INT32_MAX)
        -:  206:
        -:  207:#undef JERRYX_ARG_TRANSFORM_FUNC_FOR_INT_TEMPLATE
        -:  208:#undef JERRYX_ARG_TRANSFORM_FUNC_FOR_INT
        -:  209:/**
        -:  210: * Transform a JS argument to a boolean. Type coercion is not allowed.
        -:  211: *
        -:  212: * @return jerry undefined: the transformer passes,
        -:  213: *         jerry error: the transformer fails.
        -:  214: */
        -:  215:jerry_value_t
    #####:  216:jerryx_arg_transform_boolean_strict (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  217:                                     const jerryx_arg_t *c_arg_p) /**< the native arg */
        -:  218:{
    #####:  219:  jerry_value_t js_arg = jerryx_arg_js_iterator_pop (js_arg_iter_p);
        -:  220:
    #####:  221:  if (!jerry_value_is_boolean (js_arg))
        -:  222:  {
    #####:  223:    return jerry_throw_sz (JERRY_ERROR_TYPE, "It is not a boolean.");
        -:  224:  }
        -:  225:
    #####:  226:  bool *dest = c_arg_p->dest;
    #####:  227:  *dest = jerry_value_is_true (js_arg);
        -:  228:
    #####:  229:  return jerry_undefined ();
        -:  230:} /* jerryx_arg_transform_boolean_strict */
        -:  231:
        -:  232:/**
        -:  233: * Transform a JS argument to a boolean. Type coercion is allowed.
        -:  234: *
        -:  235: * @return jerry undefined: the transformer passes,
        -:  236: *         jerry error: the transformer fails.
        -:  237: */
        -:  238:jerry_value_t
    #####:  239:jerryx_arg_transform_boolean (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  240:                              const jerryx_arg_t *c_arg_p) /**< the native arg */
        -:  241:{
    #####:  242:  jerry_value_t js_arg = jerryx_arg_js_iterator_pop (js_arg_iter_p);
        -:  243:
    #####:  244:  bool to_boolean = jerry_value_to_boolean (js_arg);
        -:  245:
    #####:  246:  bool *dest = c_arg_p->dest;
    #####:  247:  *dest = to_boolean;
        -:  248:
    #####:  249:  return jerry_undefined ();
        -:  250:} /* jerryx_arg_transform_boolean */
        -:  251:
        -:  252:/**
        -:  253: * The common routine for string transformer.
        -:  254: * It works for both CESU-8 and UTF-8 string.
        -:  255: *
        -:  256: * @return jerry undefined: the transformer passes,
        -:  257: *         jerry error: the transformer fails.
        -:  258: */
        -:  259:static jerry_value_t
    #####:  260:jerryx_arg_string_to_buffer_common_routine (jerry_value_t js_arg, /**< JS arg */
        -:  261:                                            const jerryx_arg_t *c_arg_p, /**< native arg */
        -:  262:                                            jerry_encoding_t encoding) /**< string encoding */
        -:  263:{
    #####:  264:  jerry_char_t *target_p = (jerry_char_t *) c_arg_p->dest;
    #####:  265:  jerry_size_t target_buf_size = (jerry_size_t) c_arg_p->extra_info;
        -:  266:
    #####:  267:  jerry_size_t size = jerry_string_size (js_arg, encoding);
        -:  268:
    #####:  269:  if (size > target_buf_size - 1)
        -:  270:  {
    #####:  271:    return jerry_throw_sz (JERRY_ERROR_TYPE, "Buffer size is not large enough.");
        -:  272:  }
        -:  273:
    #####:  274:  jerry_string_to_buffer (js_arg, encoding, target_p, target_buf_size);
    #####:  275:  target_p[size] = '\0';
        -:  276:
    #####:  277:  return jerry_undefined ();
        -:  278:} /* jerryx_arg_string_to_buffer_common_routine */
        -:  279:
        -:  280:/**
        -:  281: * Transform a JS argument to a UTF-8/CESU-8 char array. Type coercion is not allowed.
        -:  282: *
        -:  283: * @return jerry undefined: the transformer passes,
        -:  284: *         jerry error: the transformer fails.
        -:  285: */
        -:  286:static jerry_value_t
    #####:  287:jerryx_arg_transform_string_strict_common (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  288:                                           const jerryx_arg_t *c_arg_p, /**< the native arg */
        -:  289:                                           jerry_encoding_t encoding) /**< string encoding */
        -:  290:{
    #####:  291:  jerry_value_t js_arg = jerryx_arg_js_iterator_pop (js_arg_iter_p);
        -:  292:
    #####:  293:  if (!jerry_value_is_string (js_arg))
        -:  294:  {
    #####:  295:    return jerry_throw_sz (JERRY_ERROR_TYPE, "It is not a string.");
        -:  296:  }
        -:  297:
    #####:  298:  return jerryx_arg_string_to_buffer_common_routine (js_arg, c_arg_p, encoding);
        -:  299:} /* jerryx_arg_transform_string_strict_common */
        -:  300:
        -:  301:/**
        -:  302: * Transform a JS argument to a UTF-8/CESU-8 char array. Type coercion is allowed.
        -:  303: *
        -:  304: * @return jerry undefined: the transformer passes,
        -:  305: *         jerry error: the transformer fails.
        -:  306: */
        -:  307:static jerry_value_t
    #####:  308:jerryx_arg_transform_string_common (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  309:                                    const jerryx_arg_t *c_arg_p, /**< the native arg */
        -:  310:                                    jerry_encoding_t encoding) /**< string encoding */
        -:  311:{
    #####:  312:  jerry_value_t js_arg = jerryx_arg_js_iterator_pop (js_arg_iter_p);
        -:  313:
    #####:  314:  jerry_value_t to_string = jerry_value_to_string (js_arg);
        -:  315:
    #####:  316:  if (jerry_value_is_exception (to_string))
        -:  317:  {
    #####:  318:    jerry_value_free (to_string);
        -:  319:
    #####:  320:    return jerry_throw_sz (JERRY_ERROR_TYPE, "It can not be converted to a string.");
        -:  321:  }
        -:  322:
    #####:  323:  jerry_value_t ret = jerryx_arg_string_to_buffer_common_routine (to_string, c_arg_p, encoding);
    #####:  324:  jerry_value_free (to_string);
        -:  325:
    #####:  326:  return ret;
        -:  327:} /* jerryx_arg_transform_string_common */
        -:  328:
        -:  329:/**
        -:  330: * Transform a JS argument to a cesu8 char array. Type coercion is not allowed.
        -:  331: *
        -:  332: * Note:
        -:  333: *      returned value must be freed with jerry_value_free, when it is no longer needed.
        -:  334: *
        -:  335: * @return jerry undefined: the transformer passes,
        -:  336: *         jerry error: the transformer fails.
        -:  337: */
        -:  338:jerry_value_t
    #####:  339:jerryx_arg_transform_string_strict (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  340:                                    const jerryx_arg_t *c_arg_p) /**< the native arg */
        -:  341:{
    #####:  342:  return jerryx_arg_transform_string_strict_common (js_arg_iter_p, c_arg_p, JERRY_ENCODING_CESU8);
        -:  343:} /* jerryx_arg_transform_string_strict */
        -:  344:
        -:  345:/**
        -:  346: * Transform a JS argument to a utf8 char array. Type coercion is not allowed.
        -:  347: *
        -:  348: * Note:
        -:  349: *      returned value must be freed with jerry_value_free, when it is no longer needed.
        -:  350: *
        -:  351: * @return jerry undefined: the transformer passes,
        -:  352: *         jerry error: the transformer fails.
        -:  353: */
        -:  354:jerry_value_t
    #####:  355:jerryx_arg_transform_utf8_string_strict (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  356:                                         const jerryx_arg_t *c_arg_p) /**< the native arg */
        -:  357:{
    #####:  358:  return jerryx_arg_transform_string_strict_common (js_arg_iter_p, c_arg_p, JERRY_ENCODING_UTF8);
        -:  359:} /* jerryx_arg_transform_utf8_string_strict */
        -:  360:
        -:  361:/**
        -:  362: * Transform a JS argument to a cesu8 char array. Type coercion is allowed.
        -:  363: *
        -:  364: * Note:
        -:  365: *      returned value must be freed with jerry_value_free, when it is no longer needed.
        -:  366: *
        -:  367: * @return jerry undefined: the transformer passes,
        -:  368: *         jerry error: the transformer fails.
        -:  369: */
        -:  370:jerry_value_t
    #####:  371:jerryx_arg_transform_string (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  372:                             const jerryx_arg_t *c_arg_p) /**< the native arg */
        -:  373:{
    #####:  374:  return jerryx_arg_transform_string_common (js_arg_iter_p, c_arg_p, JERRY_ENCODING_CESU8);
        -:  375:} /* jerryx_arg_transform_string */
        -:  376:
        -:  377:/**
        -:  378: * Transform a JS argument to a utf8 char array. Type coercion is allowed.
        -:  379: *
        -:  380: * Note:
        -:  381: *      returned value must be freed with jerry_value_free, when it is no longer needed.
        -:  382: *
        -:  383: * @return jerry undefined: the transformer passes,
        -:  384: *         jerry error: the transformer fails.
        -:  385: */
        -:  386:jerry_value_t
    #####:  387:jerryx_arg_transform_utf8_string (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  388:                                  const jerryx_arg_t *c_arg_p) /**< the native arg */
        -:  389:{
    #####:  390:  return jerryx_arg_transform_string_common (js_arg_iter_p, c_arg_p, JERRY_ENCODING_UTF8);
        -:  391:} /* jerryx_arg_transform_utf8_string */
        -:  392:
        -:  393:/**
        -:  394: * Check whether the JS argument is jerry function, if so, assign to the native argument.
        -:  395: *
        -:  396: * @return jerry undefined: the transformer passes,
        -:  397: *         jerry error: the transformer fails.
        -:  398: */
        -:  399:jerry_value_t
    #####:  400:jerryx_arg_transform_function (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  401:                               const jerryx_arg_t *c_arg_p) /**< the native arg */
        -:  402:{
    #####:  403:  jerry_value_t js_arg = jerryx_arg_js_iterator_pop (js_arg_iter_p);
        -:  404:
    #####:  405:  if (!jerry_value_is_function (js_arg))
        -:  406:  {
    #####:  407:    return jerry_throw_sz (JERRY_ERROR_TYPE, "It is not a function.");
        -:  408:  }
        -:  409:
    #####:  410:  jerry_value_t *func_p = c_arg_p->dest;
    #####:  411:  *func_p = jerry_value_copy (js_arg);
        -:  412:
    #####:  413:  return jerry_undefined ();
        -:  414:} /* jerryx_arg_transform_function */
        -:  415:
        -:  416:/**
        -:  417: * Check whether the native pointer has the expected type info.
        -:  418: * If so, assign it to the native argument.
        -:  419: *
        -:  420: * @return jerry undefined: the transformer passes,
        -:  421: *         jerry error: the transformer fails.
        -:  422: */
        -:  423:jerry_value_t
    #####:  424:jerryx_arg_transform_native_pointer (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  425:                                     const jerryx_arg_t *c_arg_p) /**< the native arg */
        -:  426:{
    #####:  427:  jerry_value_t js_arg = jerryx_arg_js_iterator_pop (js_arg_iter_p);
        -:  428:
    #####:  429:  if (!jerry_value_is_object (js_arg))
        -:  430:  {
    #####:  431:    return jerry_throw_sz (JERRY_ERROR_TYPE, "It is not an object.");
        -:  432:  }
        -:  433:
        -:  434:  const jerry_object_native_info_t *expected_info_p;
    #####:  435:  expected_info_p = (const jerry_object_native_info_t *) c_arg_p->extra_info;
    #####:  436:  void **ptr_p = (void **) c_arg_p->dest;
    #####:  437:  *ptr_p = jerry_object_get_native_ptr (js_arg, expected_info_p);
        -:  438:
    #####:  439:  if (*ptr_p == NULL)
        -:  440:  {
    #####:  441:    return jerry_throw_sz (JERRY_ERROR_TYPE, "The object has no native pointer or type does not match.");
        -:  442:  }
        -:  443:
    #####:  444:  return jerry_undefined ();
        -:  445:} /* jerryx_arg_transform_native_pointer */
        -:  446:
        -:  447:/**
        -:  448: * Check whether the JS object's properties have expected types, and transform them into native args.
        -:  449: *
        -:  450: * @return jerry undefined: the transformer passes,
        -:  451: *         jerry error: the transformer fails.
        -:  452: */
        -:  453:jerry_value_t
    #####:  454:jerryx_arg_transform_object_props (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  455:                                   const jerryx_arg_t *c_arg_p) /**< the native arg */
        -:  456:{
    #####:  457:  jerry_value_t js_arg = jerryx_arg_js_iterator_pop (js_arg_iter_p);
        -:  458:
    #####:  459:  const jerryx_arg_object_props_t *object_props = (const jerryx_arg_object_props_t *) c_arg_p->extra_info;
        -:  460:
    #####:  461:  return jerryx_arg_transform_object_properties (js_arg,
        -:  462:                                                 object_props->name_p,
        -:  463:                                                 object_props->name_cnt,
        -:  464:                                                 object_props->c_arg_p,
        -:  465:                                                 object_props->c_arg_cnt);
        -:  466:} /* jerryx_arg_transform_object_props */
        -:  467:
        -:  468:/**
        -:  469: * Check whether the JS array's items have expected types, and transform them into native args.
        -:  470: *
        -:  471: * @return jerry undefined: the transformer passes,
        -:  472: *         jerry error: the transformer fails.
        -:  473: */
        -:  474:jerry_value_t
    #####:  475:jerryx_arg_transform_array_items (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  476:                                  const jerryx_arg_t *c_arg_p) /**< the native arg */
        -:  477:{
    #####:  478:  jerry_value_t js_arg = jerryx_arg_js_iterator_pop (js_arg_iter_p);
        -:  479:
    #####:  480:  const jerryx_arg_array_items_t *array_items_p = (const jerryx_arg_array_items_t *) c_arg_p->extra_info;
        -:  481:
    #####:  482:  return jerryx_arg_transform_array (js_arg, array_items_p->c_arg_p, array_items_p->c_arg_cnt);
        -:  483:} /* jerryx_arg_transform_array_items */
        -:  484:
        -:  485:/**
        -:  486: * Define transformer for optional argument.
        -:  487: */
        -:  488:#define JERRYX_ARG_TRANSFORM_OPTIONAL(type)                                                      \
        -:  489:  jerry_value_t jerryx_arg_transform_##type##_optional (jerryx_arg_js_iterator_t *js_arg_iter_p, \
        -:  490:                                                        const jerryx_arg_t *c_arg_p)             \
        -:  491:  {                                                                                              \
        -:  492:    return jerryx_arg_transform_optional (js_arg_iter_p, c_arg_p, jerryx_arg_transform_##type);  \
        -:  493:  }
        -:  494:
    #####:  495:JERRYX_ARG_TRANSFORM_OPTIONAL (number)
    #####:  496:JERRYX_ARG_TRANSFORM_OPTIONAL (number_strict)
    #####:  497:JERRYX_ARG_TRANSFORM_OPTIONAL (boolean)
    #####:  498:JERRYX_ARG_TRANSFORM_OPTIONAL (boolean_strict)
    #####:  499:JERRYX_ARG_TRANSFORM_OPTIONAL (string)
    #####:  500:JERRYX_ARG_TRANSFORM_OPTIONAL (string_strict)
    #####:  501:JERRYX_ARG_TRANSFORM_OPTIONAL (utf8_string)
    #####:  502:JERRYX_ARG_TRANSFORM_OPTIONAL (utf8_string_strict)
    #####:  503:JERRYX_ARG_TRANSFORM_OPTIONAL (function)
    #####:  504:JERRYX_ARG_TRANSFORM_OPTIONAL (native_pointer)
    #####:  505:JERRYX_ARG_TRANSFORM_OPTIONAL (object_props)
    #####:  506:JERRYX_ARG_TRANSFORM_OPTIONAL (array_items)
        -:  507:
    #####:  508:JERRYX_ARG_TRANSFORM_OPTIONAL (uint8)
    #####:  509:JERRYX_ARG_TRANSFORM_OPTIONAL (uint16)
    #####:  510:JERRYX_ARG_TRANSFORM_OPTIONAL (uint32)
    #####:  511:JERRYX_ARG_TRANSFORM_OPTIONAL (int8)
    #####:  512:JERRYX_ARG_TRANSFORM_OPTIONAL (int16)
    #####:  513:JERRYX_ARG_TRANSFORM_OPTIONAL (int32)
    #####:  514:JERRYX_ARG_TRANSFORM_OPTIONAL (int8_strict)
    #####:  515:JERRYX_ARG_TRANSFORM_OPTIONAL (int16_strict)
    #####:  516:JERRYX_ARG_TRANSFORM_OPTIONAL (int32_strict)
    #####:  517:JERRYX_ARG_TRANSFORM_OPTIONAL (uint8_strict)
    #####:  518:JERRYX_ARG_TRANSFORM_OPTIONAL (uint16_strict)
    #####:  519:JERRYX_ARG_TRANSFORM_OPTIONAL (uint32_strict)
        -:  520:
        -:  521:#undef JERRYX_ARG_TRANSFORM_OPTIONAL
        -:  522:
        -:  523:/**
        -:  524: * Ignore the JS argument.
        -:  525: *
        -:  526: * @return jerry undefined
        -:  527: */
        -:  528:jerry_value_t
    #####:  529:jerryx_arg_transform_ignore (jerryx_arg_js_iterator_t *js_arg_iter_p, /**< available JS args */
        -:  530:                             const jerryx_arg_t *c_arg_p) /**< the native arg */
        -:  531:{
        -:  532:  (void) js_arg_iter_p; /* unused */
        -:  533:  (void) c_arg_p; /* unused */
        -:  534:
    #####:  535:  return jerry_undefined ();
        -:  536:} /* jerryx_arg_transform_ignore */
