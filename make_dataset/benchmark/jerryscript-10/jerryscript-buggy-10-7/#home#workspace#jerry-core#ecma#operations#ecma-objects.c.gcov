        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-objects.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-objects.h"
        -:   17:
        -:   18:#include "ecma-arguments-object.h"
        -:   19:#include "ecma-array-object.h"
        -:   20:#include "ecma-bigint.h"
        -:   21:#include "ecma-builtin-helpers.h"
        -:   22:#include "ecma-builtins.h"
        -:   23:#include "ecma-exceptions.h"
        -:   24:#include "ecma-function-object.h"
        -:   25:#include "ecma-gc.h"
        -:   26:#include "ecma-globals.h"
        -:   27:#include "ecma-helpers.h"
        -:   28:#include "ecma-lcache.h"
        -:   29:#include "ecma-lex-env.h"
        -:   30:#include "ecma-objects-general.h"
        -:   31:#include "ecma-proxy-object.h"
        -:   32:#include "ecma-string-object.h"
        -:   33:
        -:   34:#include "jcontext.h"
        -:   35:
        -:   36:#if JERRY_BUILTIN_TYPEDARRAY
        -:   37:#include "ecma-arraybuffer-object.h"
        -:   38:#include "ecma-typedarray-object.h"
        -:   39:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        -:   40:
        -:   41:/** \addtogroup ecma ECMA
        -:   42: * @{
        -:   43: *
        -:   44: * \addtogroup ecmaobjectsinternalops ECMA objects' operations
        -:   45: * @{
        -:   46: */
        -:   47:
        -:   48:/**
        -:   49: * Hash bitmap size for ecma objects
        -:   50: */
        -:   51:#define ECMA_OBJECT_HASH_BITMAP_SIZE 256
        -:   52:
        -:   53:/**
        -:   54: * Assert that specified object type value is valid
        -:   55: *
        -:   56: * @param type object's implementation-defined type
        -:   57: */
        -:   58:#ifndef JERRY_NDEBUG
        -:   59:#define JERRY_ASSERT_OBJECT_TYPE_IS_VALID(type) JERRY_ASSERT (type < ECMA_OBJECT_TYPE__MAX);
        -:   60:#else /* JERRY_NDEBUG */
        -:   61:#define JERRY_ASSERT_OBJECT_TYPE_IS_VALID(type)
        -:   62:#endif /* !JERRY_NDEBUG */
        -:   63:
        -:   64:/**
        -:   65: * [[GetOwnProperty]] ecma object's operation
        -:   66: *
        -:   67: * See also:
        -:   68: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -:   69: *
        -:   70: * @return pointer to a property - if it exists,
        -:   71: *         NULL (i.e. ecma-undefined) - otherwise.
        -:   72: */
        -:   73:ecma_property_t
       11:   74:ecma_op_object_get_own_property (ecma_object_t *object_p, /**< the object */
        -:   75:                                 ecma_string_t *property_name_p, /**< property name */
        -:   76:                                 ecma_property_ref_t *property_ref_p, /**< property reference */
        -:   77:                                 uint32_t options) /**< option bits */
        -:   78:{
       11:   79:  JERRY_ASSERT (object_p != NULL && !ecma_is_lexical_environment (object_p));
        -:   80:#if JERRY_BUILTIN_PROXY
       11:   81:  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (object_p));
        -:   82:#endif /* JERRY_BUILTIN_PROXY */
       11:   83:  JERRY_ASSERT (property_name_p != NULL);
       11:   84:  JERRY_ASSERT (options == ECMA_PROPERTY_GET_NO_OPTIONS || property_ref_p != NULL);
        -:   85:
       11:   86:  ecma_object_base_type_t base_type = ecma_get_object_base_type (object_p);
        -:   87:
       11:   88:  switch (base_type)
        -:   89:  {
    #####:   90:    case ECMA_OBJECT_BASE_TYPE_CLASS:
        -:   91:    {
    #####:   92:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -:   93:
    #####:   94:      switch (ext_object_p->u.cls.type)
        -:   95:      {
    #####:   96:        case ECMA_OBJECT_CLASS_STRING:
        -:   97:        {
    #####:   98:          if (ecma_string_is_length (property_name_p))
        -:   99:          {
    #####:  100:            if (options & ECMA_PROPERTY_GET_VALUE)
        -:  101:            {
    #####:  102:              ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;
    #####:  103:              ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);
        -:  104:
    #####:  105:              lit_utf8_size_t length = ecma_string_get_length (prim_value_str_p);
    #####:  106:              property_ref_p->virtual_value = ecma_make_uint32_value (length);
        -:  107:            }
        -:  108:
    #####:  109:            return ECMA_PROPERTY_VIRTUAL;
        -:  110:          }
        -:  111:
    #####:  112:          uint32_t index = ecma_string_get_array_index (property_name_p);
        -:  113:
    #####:  114:          if (index != ECMA_STRING_NOT_ARRAY_INDEX)
        -:  115:          {
    #####:  116:            ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;
    #####:  117:            ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);
        -:  118:
    #####:  119:            if (index < ecma_string_get_length (prim_value_str_p))
        -:  120:            {
    #####:  121:              if (options & ECMA_PROPERTY_GET_VALUE)
        -:  122:              {
    #####:  123:                ecma_char_t char_at_idx = ecma_string_get_char_at_pos (prim_value_str_p, index);
    #####:  124:                ecma_string_t *char_str_p = ecma_new_ecma_string_from_code_unit (char_at_idx);
    #####:  125:                property_ref_p->virtual_value = ecma_make_string_value (char_str_p);
        -:  126:              }
        -:  127:
    #####:  128:              return ECMA_PROPERTY_FLAG_ENUMERABLE | ECMA_PROPERTY_VIRTUAL;
        -:  129:            }
        -:  130:          }
    #####:  131:          break;
        -:  132:        }
        -:  133:#if JERRY_BUILTIN_TYPEDARRAY
        -:  134:        /* ES2015 9.4.5.1 */
    #####:  135:        case ECMA_OBJECT_CLASS_TYPEDARRAY:
        -:  136:        {
    #####:  137:          if (ecma_prop_name_is_symbol (property_name_p))
        -:  138:          {
    #####:  139:            break;
        -:  140:          }
        -:  141:
    #####:  142:          uint32_t index = ecma_string_get_array_index (property_name_p);
        -:  143:
    #####:  144:          if (index == ECMA_STRING_NOT_ARRAY_INDEX)
        -:  145:          {
    #####:  146:            JERRY_ASSERT (index == UINT32_MAX);
        -:  147:
    #####:  148:            if (!ecma_typedarray_is_element_index (property_name_p))
        -:  149:            {
    #####:  150:              break;
        -:  151:            }
        -:  152:          }
        -:  153:
    #####:  154:          ecma_typedarray_info_t info = ecma_typedarray_get_info (object_p);
    #####:  155:          ecma_value_t value = ecma_get_typedarray_element (&info, index);
        -:  156:
    #####:  157:          if (ECMA_IS_VALUE_ERROR (value))
        -:  158:          {
    #####:  159:            return ECMA_PROPERTY_TYPE_NOT_FOUND_AND_THROW;
        -:  160:          }
        -:  161:
    #####:  162:          if (JERRY_UNLIKELY (ecma_is_value_undefined (value)))
        -:  163:          {
    #####:  164:            return ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP;
        -:  165:          }
        -:  166:
    #####:  167:          if (options & ECMA_PROPERTY_GET_VALUE)
        -:  168:          {
    #####:  169:            property_ref_p->virtual_value = value;
        -:  170:          }
        -:  171:          else
        -:  172:          {
    #####:  173:            ecma_fast_free_value (value);
        -:  174:          }
        -:  175:
    #####:  176:          return ECMA_PROPERTY_ENUMERABLE_WRITABLE | ECMA_PROPERTY_VIRTUAL;
        -:  177:        }
        -:  178:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        -:  179:#if JERRY_MODULE_SYSTEM
    #####:  180:        case ECMA_OBJECT_CLASS_MODULE_NAMESPACE:
        -:  181:        {
    #####:  182:          if (JERRY_UNLIKELY (ecma_prop_name_is_symbol (property_name_p)))
        -:  183:          {
    #####:  184:            if (!ecma_op_compare_string_to_global_symbol (property_name_p, LIT_GLOBAL_SYMBOL_TO_STRING_TAG))
        -:  185:            {
    #####:  186:              return ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP;
        -:  187:            }
        -:  188:
        -:  189:            /* ECMA-262 v11, 26.3.1 */
    #####:  190:            if (options & ECMA_PROPERTY_GET_VALUE)
        -:  191:            {
    #####:  192:              property_ref_p->virtual_value = ecma_make_magic_string_value (LIT_MAGIC_STRING_MODULE_UL);
        -:  193:            }
        -:  194:
    #####:  195:            return ECMA_PROPERTY_VIRTUAL;
        -:  196:          }
        -:  197:
    #####:  198:          ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);
        -:  199:
    #####:  200:          if (property_p == NULL)
        -:  201:          {
    #####:  202:            return ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP;
        -:  203:          }
        -:  204:
    #####:  205:          JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));
        -:  206:
    #####:  207:          if (*property_p & ECMA_PROPERTY_FLAG_DATA)
        -:  208:          {
    #####:  209:            if (options & ECMA_PROPERTY_GET_EXT_REFERENCE)
        -:  210:            {
    #####:  211:              ((ecma_extended_property_ref_t *) property_ref_p)->property_p = property_p;
        -:  212:            }
        -:  213:
    #####:  214:            if (property_ref_p != NULL)
        -:  215:            {
    #####:  216:              property_ref_p->value_p = ECMA_PROPERTY_VALUE_PTR (property_p);
        -:  217:            }
        -:  218:
    #####:  219:            return *property_p;
        -:  220:          }
        -:  221:
    #####:  222:          if (options & ECMA_PROPERTY_GET_VALUE)
        -:  223:          {
    #####:  224:            ecma_property_value_t *prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);
    #####:  225:            prop_value_p = ecma_get_property_value_from_named_reference (prop_value_p);
    #####:  226:            property_ref_p->virtual_value = ecma_fast_copy_value (prop_value_p->value);
        -:  227:          }
        -:  228:
    #####:  229:          return ECMA_PROPERTY_ENUMERABLE_WRITABLE | ECMA_PROPERTY_VIRTUAL;
        -:  230:        }
        -:  231:#endif /* JERRY_MODULE_SYSTEM */
        -:  232:      }
    #####:  233:      break;
        -:  234:    }
    #####:  235:    case ECMA_OBJECT_BASE_TYPE_ARRAY:
        -:  236:    {
    #####:  237:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -:  238:
    #####:  239:      if (ecma_string_is_length (property_name_p))
        -:  240:      {
    #####:  241:        if (options & ECMA_PROPERTY_GET_VALUE)
        -:  242:        {
    #####:  243:          property_ref_p->virtual_value = ecma_make_uint32_value (ext_object_p->u.array.length);
        -:  244:        }
        -:  245:
    #####:  246:        uint32_t length_prop = ext_object_p->u.array.length_prop_and_hole_count;
    #####:  247:        return length_prop & (ECMA_PROPERTY_FLAG_WRITABLE | ECMA_PROPERTY_VIRTUAL);
        -:  248:      }
        -:  249:
    #####:  250:      if (ecma_op_array_is_fast_array (ext_object_p))
        -:  251:      {
    #####:  252:        uint32_t index = ecma_string_get_array_index (property_name_p);
        -:  253:
    #####:  254:        if (index != ECMA_STRING_NOT_ARRAY_INDEX)
        -:  255:        {
    #####:  256:          if (JERRY_LIKELY (index < ext_object_p->u.array.length))
        -:  257:          {
    #####:  258:            ecma_value_t *values_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, object_p->u1.property_list_cp);
        -:  259:
    #####:  260:            if (ecma_is_value_array_hole (values_p[index]))
        -:  261:            {
    #####:  262:              return ECMA_PROPERTY_TYPE_NOT_FOUND;
        -:  263:            }
        -:  264:
    #####:  265:            if (options & ECMA_PROPERTY_GET_VALUE)
        -:  266:            {
    #####:  267:              property_ref_p->virtual_value = ecma_fast_copy_value (values_p[index]);
        -:  268:            }
        -:  269:
    #####:  270:            return ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE | ECMA_PROPERTY_VIRTUAL;
        -:  271:          }
        -:  272:        }
        -:  273:
    #####:  274:        return ECMA_PROPERTY_TYPE_NOT_FOUND;
        -:  275:      }
        -:  276:
    #####:  277:      break;
        -:  278:    }
       11:  279:    default:
        -:  280:    {
       11:  281:      break;
        -:  282:    }
        -:  283:  }
        -:  284:
       11:  285:  ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);
       11:  286:  ecma_object_type_t type = ecma_get_object_type (object_p);
        -:  287:
       11:  288:  if (property_p == NULL)
        -:  289:  {
       11:  290:    switch (type)
        -:  291:    {
    #####:  292:      case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:
        -:  293:      {
    #####:  294:        if (ecma_builtin_function_is_routine (object_p))
        -:  295:        {
    #####:  296:          property_p = ecma_builtin_routine_try_to_instantiate_property (object_p, property_name_p);
    #####:  297:          break;
        -:  298:        }
        -:  299:        /* FALLTHRU */
        -:  300:      }
        -:  301:      case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:
        -:  302:      case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:
        -:  303:      case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:
        -:  304:      {
       11:  305:        property_p = ecma_builtin_try_to_instantiate_property (object_p, property_name_p);
       11:  306:        break;
        -:  307:      }
    #####:  308:      case ECMA_OBJECT_TYPE_CLASS:
        -:  309:      {
    #####:  310:        if (((ecma_extended_object_t *) object_p)->u.cls.type == ECMA_OBJECT_CLASS_ARGUMENTS)
        -:  311:        {
    #####:  312:          property_p = ecma_op_arguments_object_try_to_lazy_instantiate_property (object_p, property_name_p);
        -:  313:        }
    #####:  314:        break;
        -:  315:      }
    #####:  316:      case ECMA_OBJECT_TYPE_FUNCTION:
        -:  317:      {
        -:  318:#if !JERRY_ESNEXT
    #####:  319:        if (ecma_string_is_length (property_name_p))
        -:  320:        {
    #####:  321:          if (options & ECMA_PROPERTY_GET_VALUE)
        -:  322:          {
        -:  323:            /* Get length virtual property. */
    #####:  324:            ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
    #####:  325:            const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);
        -:  326:
        -:  327:            uint32_t len;
    #####:  328:            if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)
        -:  329:            {
    #####:  330:              cbc_uint16_arguments_t *args_p = (cbc_uint16_arguments_t *) bytecode_data_p;
    #####:  331:              len = args_p->argument_end;
        -:  332:            }
        -:  333:            else
        -:  334:            {
    #####:  335:              cbc_uint8_arguments_t *args_p = (cbc_uint8_arguments_t *) bytecode_data_p;
    #####:  336:              len = args_p->argument_end;
        -:  337:            }
        -:  338:
    #####:  339:            property_ref_p->virtual_value = ecma_make_uint32_value (len);
        -:  340:          }
        -:  341:
        -:  342:          return ECMA_PROPERTY_VIRTUAL;
        -:  343:        }
        -:  344:#endif /* !JERRY_ESNEXT */
        -:  345:
        -:  346:        /* Get prototype physical property. */
    #####:  347:        property_p = ecma_op_function_try_to_lazy_instantiate_property (object_p, property_name_p);
    #####:  348:        break;
        -:  349:      }
    #####:  350:      case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:
        -:  351:      {
    #####:  352:        property_p = ecma_op_external_function_try_to_lazy_instantiate_property (object_p, property_name_p);
    #####:  353:        break;
        -:  354:      }
    #####:  355:      case ECMA_OBJECT_TYPE_BOUND_FUNCTION:
        -:  356:      {
    #####:  357:        property_p = ecma_op_bound_function_try_to_lazy_instantiate_property (object_p, property_name_p);
    #####:  358:        break;
        -:  359:      }
    #####:  360:      default:
        -:  361:      {
    #####:  362:        break;
        -:  363:      }
        -:  364:    }
        -:  365:
       11:  366:    if (property_p == NULL)
        -:  367:    {
       11:  368:      return ECMA_PROPERTY_TYPE_NOT_FOUND;
        -:  369:    }
        -:  370:  }
    #####:  371:  else if (type == ECMA_OBJECT_TYPE_CLASS
    #####:  372:           && ((ecma_extended_object_t *) object_p)->u.cls.type == ECMA_OBJECT_CLASS_ARGUMENTS
    #####:  373:           && (((ecma_extended_object_t *) object_p)->u.cls.u1.arguments_flags & ECMA_ARGUMENTS_OBJECT_MAPPED))
        -:  374:  {
    #####:  375:    ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -:  376:
    #####:  377:    uint32_t index = ecma_string_get_array_index (property_name_p);
        -:  378:
    #####:  379:    if (index < ext_object_p->u.cls.u2.formal_params_number)
        -:  380:    {
    #####:  381:      ecma_mapped_arguments_t *mapped_arguments_p = (ecma_mapped_arguments_t *) ext_object_p;
        -:  382:
    #####:  383:      ecma_value_t *argv_p = (ecma_value_t *) (mapped_arguments_p + 1);
        -:  384:
    #####:  385:      if (!ecma_is_value_empty (argv_p[index]) && argv_p[index] != ECMA_VALUE_ARGUMENT_NO_TRACK)
        -:  386:      {
        -:  387:#if JERRY_LCACHE
        -:  388:        /* Mapped arguments initialized properties MUST not be lcached */
    #####:  389:        if (ecma_is_property_lcached (property_p))
        -:  390:        {
        -:  391:          jmem_cpointer_t prop_name_cp;
        -:  392:
    #####:  393:          if (JERRY_UNLIKELY (ECMA_IS_DIRECT_STRING (property_name_p)))
        -:  394:          {
    #####:  395:            prop_name_cp = (jmem_cpointer_t) ECMA_GET_DIRECT_STRING_VALUE (property_name_p);
        -:  396:          }
        -:  397:          else
        -:  398:          {
    #####:  399:            ECMA_SET_NON_NULL_POINTER (prop_name_cp, property_name_p);
        -:  400:          }
    #####:  401:          ecma_lcache_invalidate (object_p, prop_name_cp, property_p);
        -:  402:        }
        -:  403:#endif /* JERRY_LCACHE */
    #####:  404:        ecma_string_t *name_p = ecma_op_arguments_object_get_formal_parameter (mapped_arguments_p, index);
    #####:  405:        ecma_object_t *lex_env_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_object_t, mapped_arguments_p->lex_env);
        -:  406:
    #####:  407:        ecma_value_t binding_value = ecma_op_get_binding_value (lex_env_p, name_p, true);
        -:  408:
    #####:  409:        ecma_named_data_property_assign_value (object_p, ECMA_PROPERTY_VALUE_PTR (property_p), binding_value);
    #####:  410:        ecma_free_value (binding_value);
        -:  411:      }
        -:  412:    }
        -:  413:  }
        -:  414:
    #####:  415:  if (options & ECMA_PROPERTY_GET_EXT_REFERENCE)
        -:  416:  {
    #####:  417:    ((ecma_extended_property_ref_t *) property_ref_p)->property_p = property_p;
        -:  418:  }
        -:  419:
    #####:  420:  if (property_ref_p != NULL)
        -:  421:  {
    #####:  422:    property_ref_p->value_p = ECMA_PROPERTY_VALUE_PTR (property_p);
        -:  423:  }
        -:  424:
    #####:  425:  return *property_p;
        -:  426:} /* ecma_op_object_get_own_property */
        -:  427:
        -:  428:/**
        -:  429: * Generic [[HasProperty]] operation
        -:  430: *
        -:  431: * See also:
        -:  432: *          ECMAScript v6, 9.1.7.1
        -:  433: *
        -:  434: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  435: *         ECMA_VALUE_{TRUE_FALSE} - whether the property is found
        -:  436: */
        -:  437:extern inline ecma_value_t JERRY_ATTR_ALWAYS_INLINE
    #####:  438:ecma_op_object_has_property (ecma_object_t *object_p, /**< the object */
        -:  439:                             ecma_string_t *property_name_p) /**< property name */
        -:  440:{
        -:  441:  while (true)
    #####:  442:  {
        -:  443:#if JERRY_BUILTIN_PROXY
    #####:  444:    if (ECMA_OBJECT_IS_PROXY (object_p))
        -:  445:    {
    #####:  446:      return ecma_proxy_object_has (object_p, property_name_p);
        -:  447:    }
        -:  448:#endif /* JERRY_BUILTIN_PROXY */
        -:  449:
        -:  450:    /* 2 - 3. */
    #####:  451:    ecma_property_t property =
        -:  452:      ecma_op_object_get_own_property (object_p, property_name_p, NULL, ECMA_PROPERTY_GET_NO_OPTIONS);
        -:  453:
    #####:  454:    if (property != ECMA_PROPERTY_TYPE_NOT_FOUND)
        -:  455:    {
        -:  456:#if JERRY_BUILTIN_TYPEDARRAY
    #####:  457:      if (JERRY_UNLIKELY (property == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_THROW))
        -:  458:      {
    #####:  459:        return ECMA_VALUE_ERROR;
        -:  460:      }
        -:  461:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        -:  462:
    #####:  463:      JERRY_ASSERT (property == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP || ECMA_PROPERTY_IS_FOUND (property));
        -:  464:
    #####:  465:      return ecma_make_boolean_value (property != ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP);
        -:  466:    }
        -:  467:
    #####:  468:    jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (object_p);
        -:  469:
        -:  470:    /* 7. */
    #####:  471:    if (proto_cp == JMEM_CP_NULL)
        -:  472:    {
    #####:  473:      return ECMA_VALUE_FALSE;
        -:  474:    }
        -:  475:
    #####:  476:    object_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);
        -:  477:  }
        -:  478:} /* ecma_op_object_has_property */
        -:  479:
        -:  480:/**
        -:  481: * Search the value corresponding to a property name
        -:  482: *
        -:  483: * Note: search includes prototypes
        -:  484: *
        -:  485: * @return ecma value if property is found
        -:  486: *         ECMA_VALUE_NOT_FOUND if property is not found
        -:  487: *         Returned value must be freed with ecma_free_value
        -:  488: */
        -:  489:ecma_value_t
    87352:  490:ecma_op_object_find_own (ecma_value_t base_value, /**< base value */
        -:  491:                         ecma_object_t *object_p, /**< target object */
        -:  492:                         ecma_string_t *property_name_p) /**< property name */
        -:  493:{
    87352:  494:  JERRY_ASSERT (object_p != NULL && !ecma_is_lexical_environment (object_p));
    87352:  495:  JERRY_ASSERT (property_name_p != NULL);
    87352:  496:  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (object_p));
        -:  497:
    87352:  498:  ecma_object_base_type_t base_type = ecma_get_object_base_type (object_p);
        -:  499:
    87352:  500:  switch (base_type)
        -:  501:  {
    #####:  502:    case ECMA_OBJECT_BASE_TYPE_CLASS:
        -:  503:    {
    #####:  504:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -:  505:
    #####:  506:      switch (ext_object_p->u.cls.type)
        -:  507:      {
    #####:  508:        case ECMA_OBJECT_CLASS_STRING:
        -:  509:        {
    #####:  510:          if (ecma_string_is_length (property_name_p))
        -:  511:          {
    #####:  512:            ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;
        -:  513:
    #####:  514:            ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);
    #####:  515:            lit_utf8_size_t length = ecma_string_get_length (prim_value_str_p);
        -:  516:
    #####:  517:            return ecma_make_uint32_value (length);
        -:  518:          }
        -:  519:
    #####:  520:          uint32_t index = ecma_string_get_array_index (property_name_p);
        -:  521:
    #####:  522:          if (index != ECMA_STRING_NOT_ARRAY_INDEX)
        -:  523:          {
    #####:  524:            ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;
        -:  525:
    #####:  526:            ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);
        -:  527:
    #####:  528:            if (index < ecma_string_get_length (prim_value_str_p))
        -:  529:            {
    #####:  530:              ecma_char_t char_at_idx = ecma_string_get_char_at_pos (prim_value_str_p, index);
    #####:  531:              return ecma_make_string_value (ecma_new_ecma_string_from_code_unit (char_at_idx));
        -:  532:            }
        -:  533:          }
    #####:  534:          break;
        -:  535:        }
    #####:  536:        case ECMA_OBJECT_CLASS_ARGUMENTS:
        -:  537:        {
    #####:  538:          if (!(ext_object_p->u.cls.u1.arguments_flags & ECMA_ARGUMENTS_OBJECT_MAPPED))
        -:  539:          {
    #####:  540:            break;
        -:  541:          }
        -:  542:
    #####:  543:          uint32_t index = ecma_string_get_array_index (property_name_p);
        -:  544:
    #####:  545:          if (index < ext_object_p->u.cls.u2.formal_params_number)
        -:  546:          {
    #####:  547:            ecma_mapped_arguments_t *mapped_arguments_p = (ecma_mapped_arguments_t *) ext_object_p;
        -:  548:
    #####:  549:            ecma_value_t *argv_p = (ecma_value_t *) (mapped_arguments_p + 1);
        -:  550:
    #####:  551:            if (!ecma_is_value_empty (argv_p[index]) && argv_p[index] != ECMA_VALUE_ARGUMENT_NO_TRACK)
        -:  552:            {
    #####:  553:              ecma_string_t *name_p = ecma_op_arguments_object_get_formal_parameter (mapped_arguments_p, index);
    #####:  554:              ecma_object_t *lex_env_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_object_t, mapped_arguments_p->lex_env);
        -:  555:
    #####:  556:              return ecma_op_get_binding_value (lex_env_p, name_p, true);
        -:  557:            }
        -:  558:          }
    #####:  559:          break;
        -:  560:        }
        -:  561:#if JERRY_BUILTIN_TYPEDARRAY
        -:  562:        /* ES2015 9.4.5.4 */
    #####:  563:        case ECMA_OBJECT_CLASS_TYPEDARRAY:
        -:  564:        {
    #####:  565:          if (ecma_prop_name_is_symbol (property_name_p))
        -:  566:          {
    #####:  567:            break;
        -:  568:          }
        -:  569:
    #####:  570:          uint32_t index = ecma_string_get_array_index (property_name_p);
        -:  571:
    #####:  572:          if (index == ECMA_STRING_NOT_ARRAY_INDEX)
        -:  573:          {
    #####:  574:            JERRY_ASSERT (index == UINT32_MAX);
        -:  575:
    #####:  576:            if (!ecma_typedarray_is_element_index (property_name_p))
        -:  577:            {
    #####:  578:              break;
        -:  579:            }
        -:  580:          }
        -:  581:
    #####:  582:          ecma_typedarray_info_t info = ecma_typedarray_get_info (object_p);
    #####:  583:          return ecma_get_typedarray_element (&info, index);
        -:  584:        }
        -:  585:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        -:  586:#if JERRY_MODULE_SYSTEM
    #####:  587:        case ECMA_OBJECT_CLASS_MODULE_NAMESPACE:
        -:  588:        {
    #####:  589:          if (JERRY_UNLIKELY (ecma_prop_name_is_symbol (property_name_p)))
        -:  590:          {
        -:  591:            /* ECMA-262 v11, 26.3.1 */
    #####:  592:            if (ecma_op_compare_string_to_global_symbol (property_name_p, LIT_GLOBAL_SYMBOL_TO_STRING_TAG))
        -:  593:            {
    #####:  594:              return ecma_make_magic_string_value (LIT_MAGIC_STRING_MODULE_UL);
        -:  595:            }
        -:  596:
    #####:  597:            return ECMA_VALUE_NOT_FOUND;
        -:  598:          }
        -:  599:
    #####:  600:          ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);
        -:  601:
    #####:  602:          if (property_p == NULL)
        -:  603:          {
    #####:  604:            return ECMA_VALUE_NOT_FOUND;
        -:  605:          }
        -:  606:
    #####:  607:          JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));
        -:  608:
    #####:  609:          ecma_property_value_t *prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);
        -:  610:
    #####:  611:          if (!(*property_p & ECMA_PROPERTY_FLAG_DATA))
        -:  612:          {
    #####:  613:            prop_value_p = ecma_get_property_value_from_named_reference (prop_value_p);
        -:  614:
    #####:  615:            if (JERRY_UNLIKELY (prop_value_p->value == ECMA_VALUE_UNINITIALIZED))
        -:  616:            {
    #####:  617:              return ecma_raise_reference_error (ECMA_ERR_LET_CONST_NOT_INITIALIZED);
        -:  618:            }
        -:  619:          }
        -:  620:
    #####:  621:          return ecma_fast_copy_value (prop_value_p->value);
        -:  622:        }
        -:  623:#endif /* JERRY_MODULE_SYSTEM */
        -:  624:      }
    #####:  625:      break;
        -:  626:    }
    65511:  627:    case ECMA_OBJECT_BASE_TYPE_ARRAY:
        -:  628:    {
    65511:  629:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -:  630:
    65511:  631:      if (ecma_string_is_length (property_name_p))
        -:  632:      {
    #####:  633:        return ecma_make_uint32_value (ext_object_p->u.array.length);
        -:  634:      }
        -:  635:
    65511:  636:      if (JERRY_LIKELY (ecma_op_array_is_fast_array (ext_object_p)))
        -:  637:      {
    43672:  638:        uint32_t index = ecma_string_get_array_index (property_name_p);
        -:  639:
    43672:  640:        if (JERRY_LIKELY (index != ECMA_STRING_NOT_ARRAY_INDEX))
        -:  641:        {
    43668:  642:          if (JERRY_LIKELY (index < ext_object_p->u.array.length))
        -:  643:          {
    43668:  644:            ecma_value_t *values_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, object_p->u1.property_list_cp);
        -:  645:
    43668:  646:            return (ecma_is_value_array_hole (values_p[index]) ? ECMA_VALUE_NOT_FOUND
    43668:  647:                                                               : ecma_fast_copy_value (values_p[index]));
        -:  648:          }
        -:  649:        }
        4:  650:        return ECMA_VALUE_NOT_FOUND;
        -:  651:      }
        -:  652:
    21838:  653:      break;
        -:  654:    }
    21841:  655:    default:
        -:  656:    {
    21841:  657:      break;
        -:  658:    }
        -:  659:  }
        -:  660:
    43679:  661:  ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);
        -:  662:
    43679:  663:  if (property_p == NULL)
        -:  664:  {
    43675:  665:    switch (ecma_get_object_type (object_p))
        -:  666:    {
        2:  667:      case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:
        -:  668:      {
        2:  669:        if (ecma_builtin_function_is_routine (object_p))
        -:  670:        {
    #####:  671:          property_p = ecma_builtin_routine_try_to_instantiate_property (object_p, property_name_p);
    #####:  672:          break;
        -:  673:        }
        -:  674:        /* FALLTHRU */
        -:  675:      }
        -:  676:      case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:
        -:  677:      case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:
        -:  678:      case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:
        -:  679:      {
    43675:  680:        property_p = ecma_builtin_try_to_instantiate_property (object_p, property_name_p);
    43675:  681:        break;
        -:  682:      }
    #####:  683:      case ECMA_OBJECT_TYPE_CLASS:
        -:  684:      {
    #####:  685:        if (((ecma_extended_object_t *) object_p)->u.cls.type == ECMA_OBJECT_CLASS_ARGUMENTS)
        -:  686:        {
    #####:  687:          property_p = ecma_op_arguments_object_try_to_lazy_instantiate_property (object_p, property_name_p);
        -:  688:        }
    #####:  689:        break;
        -:  690:      }
    #####:  691:      case ECMA_OBJECT_TYPE_FUNCTION:
        -:  692:      {
        -:  693:#if !JERRY_ESNEXT
    #####:  694:        if (ecma_string_is_length (property_name_p))
        -:  695:        {
        -:  696:          /* Get length virtual property. */
    #####:  697:          ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
    #####:  698:          const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);
        -:  699:
        -:  700:          uint32_t len;
    #####:  701:          if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)
        -:  702:          {
    #####:  703:            cbc_uint16_arguments_t *args_p = (cbc_uint16_arguments_t *) bytecode_data_p;
    #####:  704:            len = args_p->argument_end;
        -:  705:          }
        -:  706:          else
        -:  707:          {
    #####:  708:            cbc_uint8_arguments_t *args_p = (cbc_uint8_arguments_t *) bytecode_data_p;
    #####:  709:            len = args_p->argument_end;
        -:  710:          }
        -:  711:
    #####:  712:          return ecma_make_uint32_value (len);
        -:  713:        }
        -:  714:#endif /* !JERRY_ESNEXT */
        -:  715:
        -:  716:        /* Get prototype physical property. */
    #####:  717:        property_p = ecma_op_function_try_to_lazy_instantiate_property (object_p, property_name_p);
    #####:  718:        break;
        -:  719:      }
    #####:  720:      case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:
        -:  721:      {
    #####:  722:        property_p = ecma_op_external_function_try_to_lazy_instantiate_property (object_p, property_name_p);
    #####:  723:        break;
        -:  724:      }
    #####:  725:      case ECMA_OBJECT_TYPE_BOUND_FUNCTION:
        -:  726:      {
    #####:  727:        property_p = ecma_op_bound_function_try_to_lazy_instantiate_property (object_p, property_name_p);
    #####:  728:        break;
        -:  729:      }
    #####:  730:      default:
        -:  731:      {
    #####:  732:        break;
        -:  733:      }
        -:  734:    }
        -:  735:
    43675:  736:    if (property_p == NULL)
        -:  737:    {
    43668:  738:      return ECMA_VALUE_NOT_FOUND;
        -:  739:    }
        -:  740:  }
        -:  741:
       11:  742:  JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));
        -:  743:
       11:  744:  ecma_property_value_t *prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);
        -:  745:
       11:  746:  if (*property_p & ECMA_PROPERTY_FLAG_DATA)
        -:  747:  {
        9:  748:    return ecma_fast_copy_value (prop_value_p->value);
        -:  749:  }
        -:  750:
        2:  751:  ecma_getter_setter_pointers_t *get_set_pair_p = ecma_get_named_accessor_property (prop_value_p);
        -:  752:
        2:  753:  if (get_set_pair_p->getter_cp == JMEM_CP_NULL)
        -:  754:  {
    #####:  755:    return ECMA_VALUE_UNDEFINED;
        -:  756:  }
        -:  757:
        2:  758:  ecma_object_t *getter_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, get_set_pair_p->getter_cp);
        -:  759:
        2:  760:  return ecma_op_function_call (getter_p, base_value, NULL, 0);
        -:  761:} /* ecma_op_object_find_own */
        -:  762:
        -:  763:/**
        -:  764: * Search the value corresponding to a property index
        -:  765: *
        -:  766: * Note: this method falls back to the general ecma_op_object_find
        -:  767: *
        -:  768: * @return ecma value if property is found
        -:  769: *         ECMA_VALUE_NOT_FOUND if property is not found
        -:  770: *         Returned value must be freed with ecma_free_value
        -:  771: */
        -:  772:ecma_value_t
    43669:  773:ecma_op_object_find_by_index (ecma_object_t *object_p, /**< the object */
        -:  774:                              ecma_length_t index) /**< property index */
        -:  775:{
    43669:  776:  if (JERRY_LIKELY (index <= ECMA_DIRECT_STRING_MAX_IMM))
        -:  777:  {
    43669:  778:    return ecma_op_object_find (object_p, ECMA_CREATE_DIRECT_UINT32_STRING (index));
        -:  779:  }
        -:  780:
    #####:  781:  ecma_string_t *index_str_p = ecma_new_ecma_string_from_length (index);
    #####:  782:  ecma_value_t ret_value = ecma_op_object_find (object_p, index_str_p);
    #####:  783:  ecma_deref_ecma_string (index_str_p);
        -:  784:
    #####:  785:  return ret_value;
        -:  786:} /* ecma_op_object_find_by_index */
        -:  787:
        -:  788:/**
        -:  789: * Search the value corresponding to a property name
        -:  790: *
        -:  791: * Note: search includes prototypes
        -:  792: *
        -:  793: * @return ecma value if property is found
        -:  794: *         ECMA_VALUE_NOT_FOUND if property is not found
        -:  795: *         Returned value must be freed with ecma_free_value
        -:  796: */
        -:  797:ecma_value_t
    43671:  798:ecma_op_object_find (ecma_object_t *object_p, /**< the object */
        -:  799:                     ecma_string_t *property_name_p) /**< property name */
        -:  800:{
    43671:  801:  ecma_value_t base_value = ecma_make_object_value (object_p);
        -:  802:
        -:  803:  while (true)
    43668:  804:  {
        -:  805:#if JERRY_BUILTIN_PROXY
    87339:  806:    if (ECMA_OBJECT_IS_PROXY (object_p))
        -:  807:    {
    #####:  808:      return ecma_proxy_object_find (object_p, property_name_p);
        -:  809:    }
        -:  810:#endif /* JERRY_BUILTIN_PROXY */
        -:  811:
    87339:  812:    ecma_value_t value = ecma_op_object_find_own (base_value, object_p, property_name_p);
        -:  813:
    87338:  814:    if (ecma_is_value_found (value))
        -:  815:    {
    21836:  816:      return value;
        -:  817:    }
        -:  818:
    65502:  819:    if (object_p->u2.prototype_cp == JMEM_CP_NULL)
        -:  820:    {
    21834:  821:      break;
        -:  822:    }
        -:  823:
    43668:  824:    object_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, object_p->u2.prototype_cp);
        -:  825:  }
        -:  826:
    21834:  827:  return ECMA_VALUE_NOT_FOUND;
        -:  828:} /* ecma_op_object_find */
        -:  829:
        -:  830:/**
        -:  831: * [[Get]] operation of ecma object
        -:  832: *
        -:  833: * This function returns the value of a named property, or undefined
        -:  834: * if the property is not found in the prototype chain. If the property
        -:  835: * is an accessor, it calls the "get" callback function and returns
        -:  836: * with its result (including error throws).
        -:  837: *
        -:  838: * See also:
        -:  839: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -:  840: *
        -:  841: * @return ecma value
        -:  842: *         Returned value must be freed with ecma_free_value
        -:  843: */
        -:  844:extern inline ecma_value_t JERRY_ATTR_ALWAYS_INLINE
        2:  845:ecma_op_object_get (ecma_object_t *object_p, /**< the object */
        -:  846:                    ecma_string_t *property_name_p) /**< property name */
        -:  847:{
        9:  848:  return ecma_op_object_get_with_receiver (object_p, property_name_p, ecma_make_object_value (object_p));
        -:  849:} /* ecma_op_object_get */
        -:  850:
        -:  851:/**
        -:  852: * [[Get]] operation of ecma object with the specified receiver
        -:  853: *
        -:  854: * This function returns the value of a named property, or undefined
        -:  855: * if the property is not found in the prototype chain. If the property
        -:  856: * is an accessor, it calls the "get" callback function and returns
        -:  857: * with its result (including error throws).
        -:  858: *
        -:  859: * See also:
        -:  860: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -:  861: *
        -:  862: * @return ecma value
        -:  863: *         Returned value must be freed with ecma_free_value
        -:  864: */
        -:  865:ecma_value_t
       13:  866:ecma_op_object_get_with_receiver (ecma_object_t *object_p, /**< the object */
        -:  867:                                  ecma_string_t *property_name_p, /**< property name */
        -:  868:                                  ecma_value_t receiver) /**< receiver to invoke getter function */
        -:  869:{
        -:  870:  while (true)
        4:  871:  {
        -:  872:#if JERRY_BUILTIN_PROXY
       13:  873:    if (ECMA_OBJECT_IS_PROXY (object_p))
        -:  874:    {
    #####:  875:      return ecma_proxy_object_get (object_p, property_name_p, receiver);
        -:  876:    }
        -:  877:#endif /* JERRY_BUILTIN_PROXY */
        -:  878:
       13:  879:    ecma_value_t value = ecma_op_object_find_own (receiver, object_p, property_name_p);
        -:  880:
       13:  881:    if (ecma_is_value_found (value))
        -:  882:    {
        9:  883:      return value;
        -:  884:    }
        -:  885:
        4:  886:    jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (object_p);
        -:  887:
        4:  888:    if (proto_cp == JMEM_CP_NULL)
        -:  889:    {
    #####:  890:      break;
        -:  891:    }
        -:  892:
        4:  893:    object_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);
        -:  894:  }
        -:  895:
    #####:  896:  return ECMA_VALUE_UNDEFINED;
        -:  897:} /* ecma_op_object_get_with_receiver */
        -:  898:
        -:  899:/**
        -:  900: * [[Get]] operation of ecma object specified for property index
        -:  901: *
        -:  902: * @return ecma value
        -:  903: *         Returned value must be freed with ecma_free_value
        -:  904: */
        -:  905:ecma_value_t
    #####:  906:ecma_op_object_get_by_index (ecma_object_t *object_p, /**< the object */
        -:  907:                             ecma_length_t index) /**< property index */
        -:  908:{
    #####:  909:  if (JERRY_LIKELY (index <= ECMA_DIRECT_STRING_MAX_IMM))
        -:  910:  {
    #####:  911:    return ecma_op_object_get (object_p, ECMA_CREATE_DIRECT_UINT32_STRING (index));
        -:  912:  }
        -:  913:
    #####:  914:  ecma_string_t *index_str_p = ecma_new_ecma_string_from_length (index);
    #####:  915:  ecma_value_t ret_value = ecma_op_object_get (object_p, index_str_p);
    #####:  916:  ecma_deref_ecma_string (index_str_p);
        -:  917:
    #####:  918:  return ret_value;
        -:  919:} /* ecma_op_object_get_by_index */
        -:  920:
        -:  921:/**
        -:  922: * Perform ToLength(O.[[Get]]("length")) operation
        -:  923: *
        -:  924: * The property is converted to uint32 during the operation
        -:  925: *
        -:  926: * @return ECMA_VALUE_ERROR - if there was any error during the operation
        -:  927: *         ECMA_VALUE_EMPTY - otherwise
        -:  928: */
        -:  929:ecma_value_t
    21836:  930:ecma_op_object_get_length (ecma_object_t *object_p, /**< the object */
        -:  931:                           ecma_length_t *length_p) /**< [out] length value converted to uint32 */
        -:  932:{
    21836:  933:  if (JERRY_LIKELY (ecma_get_object_base_type (object_p) == ECMA_OBJECT_BASE_TYPE_ARRAY))
        -:  934:  {
    21836:  935:    *length_p = (ecma_length_t) ecma_array_get_length (object_p);
    21836:  936:    return ECMA_VALUE_EMPTY;
        -:  937:  }
        -:  938:
    #####:  939:  ecma_value_t len_value = ecma_op_object_get_by_magic_id (object_p, LIT_MAGIC_STRING_LENGTH);
    #####:  940:  ecma_value_t len_number = ecma_op_to_length (len_value, length_p);
    #####:  941:  ecma_free_value (len_value);
        -:  942:
    #####:  943:  JERRY_ASSERT (ECMA_IS_VALUE_ERROR (len_number) || ecma_is_value_empty (len_number));
        -:  944:
    #####:  945:  return len_number;
        -:  946:} /* ecma_op_object_get_length */
        -:  947:
        -:  948:/**
        -:  949: * [[Get]] operation of ecma object where the property name is a magic string
        -:  950: *
        -:  951: * This function returns the value of a named property, or undefined
        -:  952: * if the property is not found in the prototype chain. If the property
        -:  953: * is an accessor, it calls the "get" callback function and returns
        -:  954: * with its result (including error throws).
        -:  955: *
        -:  956: * See also:
        -:  957: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -:  958: *
        -:  959: * @return ecma value
        -:  960: *         Returned value must be freed with ecma_free_value
        -:  961: */
        -:  962:extern inline ecma_value_t JERRY_ATTR_ALWAYS_INLINE
        5:  963:ecma_op_object_get_by_magic_id (ecma_object_t *object_p, /**< the object */
        -:  964:                                lit_magic_string_id_t property_id) /**< property magic string id */
        -:  965:{
       10:  966:  return ecma_op_object_get (object_p, ecma_get_magic_string (property_id));
        -:  967:} /* ecma_op_object_get_by_magic_id */
        -:  968:
        -:  969:#if JERRY_ESNEXT
        -:  970:
        -:  971:/**
        -:  972: * Descriptor string for each global symbol
        -:  973: */
        -:  974:static const uint16_t ecma_global_symbol_descriptions[] = {
        -:  975:  LIT_MAGIC_STRING_ASYNC_ITERATOR, LIT_MAGIC_STRING_HAS_INSTANCE,  LIT_MAGIC_STRING_IS_CONCAT_SPREADABLE,
        -:  976:  LIT_MAGIC_STRING_ITERATOR,       LIT_MAGIC_STRING_MATCH,         LIT_MAGIC_STRING_REPLACE,
        -:  977:  LIT_MAGIC_STRING_SEARCH,         LIT_MAGIC_STRING_SPECIES,       LIT_MAGIC_STRING_SPLIT,
        -:  978:  LIT_MAGIC_STRING_TO_PRIMITIVE,   LIT_MAGIC_STRING_TO_STRING_TAG, LIT_MAGIC_STRING_UNSCOPABLES,
        -:  979:  LIT_MAGIC_STRING_MATCH_ALL,
        -:  980:};
        -:  981:
        -:  982:JERRY_STATIC_ASSERT (sizeof (ecma_global_symbol_descriptions) / sizeof (uint16_t) == ECMA_BUILTIN_GLOBAL_SYMBOL_COUNT,
        -:  983:                     ecma_global_symbol_descriptions_must_have_global_symbol_count_elements);
        -:  984:
        -:  985:/**
        -:  986: * [[Get]] a well-known symbol by the given property id
        -:  987: *
        -:  988: * @return pointer to the requested well-known symbol
        -:  989: */
        -:  990:ecma_string_t *
        2:  991:ecma_op_get_global_symbol (lit_magic_string_id_t property_id) /**< property symbol id */
        -:  992:{
        2:  993:  JERRY_ASSERT (LIT_IS_GLOBAL_SYMBOL (property_id));
        -:  994:
        2:  995:  uint32_t symbol_index = (uint32_t) property_id - (uint32_t) LIT_GLOBAL_SYMBOL__FIRST;
        2:  996:  jmem_cpointer_t symbol_cp = JERRY_CONTEXT (global_symbols_cp)[symbol_index];
        -:  997:
        2:  998:  if (symbol_cp != JMEM_CP_NULL)
        -:  999:  {
        1: 1000:    ecma_string_t *symbol_p = ECMA_GET_NON_NULL_POINTER (ecma_string_t, symbol_cp);
        1: 1001:    ecma_ref_ecma_string (symbol_p);
        1: 1002:    return symbol_p;
        -: 1003:  }
        -: 1004:
        1: 1005:  ecma_string_t *symbol_dot_p = ecma_get_magic_string (LIT_MAGIC_STRING_SYMBOL_DOT_UL);
        1: 1006:  uint16_t description = ecma_global_symbol_descriptions[symbol_index];
        1: 1007:  ecma_string_t *name_p = ecma_get_magic_string ((lit_magic_string_id_t) description);
        1: 1008:  ecma_string_t *descriptor_p = ecma_concat_ecma_strings (symbol_dot_p, name_p);
        -: 1009:
        1: 1010:  ecma_string_t *symbol_p = ecma_new_symbol_from_descriptor_string (ecma_make_string_value (descriptor_p));
        1: 1011:  symbol_p->u.hash = (uint16_t) ((property_id << ECMA_SYMBOL_FLAGS_SHIFT) | ECMA_SYMBOL_FLAG_GLOBAL);
        -: 1012:
        1: 1013:  ECMA_SET_NON_NULL_POINTER (JERRY_CONTEXT (global_symbols_cp)[symbol_index], symbol_p);
        -: 1014:
        1: 1015:  ecma_ref_ecma_string (symbol_p);
        1: 1016:  return symbol_p;
        -: 1017:} /* ecma_op_get_global_symbol */
        -: 1018:
        -: 1019:/**
        -: 1020: * Checks whether the string equals to the global symbol.
        -: 1021: *
        -: 1022: * @return true - if the string equals to the global symbol
        -: 1023: *         false - otherwise
        -: 1024: */
        -: 1025:bool
    #####: 1026:ecma_op_compare_string_to_global_symbol (ecma_string_t *string_p, /**< string to compare */
        -: 1027:                                         lit_magic_string_id_t property_id) /**< property symbol id */
        -: 1028:{
    #####: 1029:  JERRY_ASSERT (LIT_IS_GLOBAL_SYMBOL (property_id));
        -: 1030:
    #####: 1031:  uint32_t symbol_index = (uint32_t) property_id - (uint32_t) LIT_GLOBAL_SYMBOL__FIRST;
    #####: 1032:  jmem_cpointer_t symbol_cp = JERRY_CONTEXT (global_symbols_cp)[symbol_index];
        -: 1033:
    #####: 1034:  return (symbol_cp != JMEM_CP_NULL && string_p == ECMA_GET_NON_NULL_POINTER (ecma_string_t, symbol_cp));
        -: 1035:} /* ecma_op_compare_string_to_global_symbol */
        -: 1036:
        -: 1037:/**
        -: 1038: * [[Get]] operation of ecma object where the property is a well-known symbol
        -: 1039: *
        -: 1040: * @return ecma value
        -: 1041: *         Returned value must be freed with ecma_free_value
        -: 1042: */
        -: 1043:ecma_value_t
        2: 1044:ecma_op_object_get_by_symbol_id (ecma_object_t *object_p, /**< the object */
        -: 1045:                                 lit_magic_string_id_t property_id) /**< property symbol id */
        -: 1046:{
        2: 1047:  ecma_string_t *symbol_p = ecma_op_get_global_symbol (property_id);
        2: 1048:  ecma_value_t ret_value = ecma_op_object_get (object_p, symbol_p);
        2: 1049:  ecma_deref_ecma_string (symbol_p);
        -: 1050:
        2: 1051:  return ret_value;
        -: 1052:} /* ecma_op_object_get_by_symbol_id */
        -: 1053:
        -: 1054:/**
        -: 1055: * GetMethod operation
        -: 1056: *
        -: 1057: * See also: ECMA-262 v6, 7.3.9
        -: 1058: *
        -: 1059: * Note:
        -: 1060: *      Returned value must be freed with ecma_free_value.
        -: 1061: *
        -: 1062: * @return iterator function object - if success
        -: 1063: *         raised error - otherwise
        -: 1064: */
        -: 1065:static ecma_value_t
    #####: 1066:ecma_op_get_method (ecma_value_t value, /**< ecma value */
        -: 1067:                    ecma_string_t *prop_name_p) /** property name */
        -: 1068:{
        -: 1069:  /* 2. */
    #####: 1070:  ecma_value_t obj_value = ecma_op_to_object (value);
        -: 1071:
    #####: 1072:  if (ECMA_IS_VALUE_ERROR (obj_value))
        -: 1073:  {
    #####: 1074:    return obj_value;
        -: 1075:  }
        -: 1076:
    #####: 1077:  ecma_object_t *obj_p = ecma_get_object_from_value (obj_value);
        -: 1078:  ecma_value_t func;
        -: 1079:
    #####: 1080:  func = ecma_op_object_get (obj_p, prop_name_p);
    #####: 1081:  ecma_deref_object (obj_p);
        -: 1082:
        -: 1083:  /* 3. */
    #####: 1084:  if (ECMA_IS_VALUE_ERROR (func))
        -: 1085:  {
    #####: 1086:    return func;
        -: 1087:  }
        -: 1088:
        -: 1089:  /* 4. */
    #####: 1090:  if (ecma_is_value_undefined (func) || ecma_is_value_null (func))
        -: 1091:  {
    #####: 1092:    return ECMA_VALUE_UNDEFINED;
        -: 1093:  }
        -: 1094:
        -: 1095:  /* 5. */
    #####: 1096:  if (!ecma_op_is_callable (func))
        -: 1097:  {
    #####: 1098:    ecma_free_value (func);
    #####: 1099:    return ecma_raise_type_error (ECMA_ERR_ITERATOR_IS_NOT_CALLABLE);
        -: 1100:  }
        -: 1101:
        -: 1102:  /* 6. */
    #####: 1103:  return func;
        -: 1104:} /* ecma_op_get_method */
        -: 1105:
        -: 1106:/**
        -: 1107: * GetMethod operation when the property is a well-known symbol
        -: 1108: *
        -: 1109: * See also: ECMA-262 v6, 7.3.9
        -: 1110: *
        -: 1111: * Note:
        -: 1112: *      Returned value must be freed with ecma_free_value.
        -: 1113: *
        -: 1114: * @return iterator function object - if success
        -: 1115: *         raised error - otherwise
        -: 1116: */
        -: 1117:ecma_value_t
    #####: 1118:ecma_op_get_method_by_symbol_id (ecma_value_t value, /**< ecma value */
        -: 1119:                                 lit_magic_string_id_t symbol_id) /**< property symbol id */
        -: 1120:{
    #####: 1121:  ecma_string_t *prop_name_p = ecma_op_get_global_symbol (symbol_id);
    #####: 1122:  ecma_value_t ret_value = ecma_op_get_method (value, prop_name_p);
    #####: 1123:  ecma_deref_ecma_string (prop_name_p);
        -: 1124:
    #####: 1125:  return ret_value;
        -: 1126:} /* ecma_op_get_method_by_symbol_id */
        -: 1127:
        -: 1128:/**
        -: 1129: * GetMethod operation when the property is a magic string
        -: 1130: *
        -: 1131: * See also: ECMA-262 v6, 7.3.9
        -: 1132: *
        -: 1133: * Note:
        -: 1134: *      Returned value must be freed with ecma_free_value.
        -: 1135: *
        -: 1136: * @return iterator function object - if success
        -: 1137: *         raised error - otherwise
        -: 1138: */
        -: 1139:ecma_value_t
    #####: 1140:ecma_op_get_method_by_magic_id (ecma_value_t value, /**< ecma value */
        -: 1141:                                lit_magic_string_id_t magic_id) /**< property magic id */
        -: 1142:{
    #####: 1143:  return ecma_op_get_method (value, ecma_get_magic_string (magic_id));
        -: 1144:} /* ecma_op_get_method_by_magic_id */
        -: 1145:#endif /* JERRY_ESNEXT */
        -: 1146:
        -: 1147:/**
        -: 1148: * [[Put]] ecma general object's operation specialized for property index
        -: 1149: *
        -: 1150: * Note: This function falls back to the general ecma_op_object_put
        -: 1151: *
        -: 1152: * @return ecma value
        -: 1153: *         The returned value must be freed with ecma_free_value.
        -: 1154: */
        -: 1155:ecma_value_t
        1: 1156:ecma_op_object_put_by_index (ecma_object_t *object_p, /**< the object */
        -: 1157:                             ecma_length_t index, /**< property index */
        -: 1158:                             ecma_value_t value, /**< ecma value */
        -: 1159:                             bool is_throw) /**< flag that controls failure handling */
        -: 1160:{
        1: 1161:  if (JERRY_LIKELY (index <= ECMA_DIRECT_STRING_MAX_IMM))
        -: 1162:  {
        2: 1163:    return ecma_op_object_put (object_p, ECMA_CREATE_DIRECT_UINT32_STRING (index), value, is_throw);
        -: 1164:  }
        -: 1165:
    #####: 1166:  ecma_string_t *index_str_p = ecma_new_ecma_string_from_length (index);
    #####: 1167:  ecma_value_t ret_value = ecma_op_object_put (object_p, index_str_p, value, is_throw);
    #####: 1168:  ecma_deref_ecma_string (index_str_p);
        -: 1169:
    #####: 1170:  return ret_value;
        -: 1171:} /* ecma_op_object_put_by_index */
        -: 1172:
        -: 1173:/**
        -: 1174: * [[Put]] ecma general object's operation
        -: 1175: *
        -: 1176: * See also:
        -: 1177: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -: 1178: *          ECMA-262 v5, 8.12.5
        -: 1179: *          Also incorporates [[CanPut]] ECMA-262 v5, 8.12.4
        -: 1180: *
        -: 1181: * @return ecma value
        -: 1182: *         The returned value must be freed with ecma_free_value.
        -: 1183: *
        -: 1184: *         Returns with ECMA_VALUE_TRUE if the operation is
        -: 1185: *         successful. Otherwise it returns with an error object
        -: 1186: *         or ECMA_VALUE_FALSE.
        -: 1187: *
        -: 1188: *         Note: even if is_throw is false, the setter can throw an
        -: 1189: *         error, and this function returns with that error.
        -: 1190: */
        -: 1191:extern inline ecma_value_t JERRY_ATTR_ALWAYS_INLINE
        7: 1192:ecma_op_object_put (ecma_object_t *object_p, /**< the object */
        -: 1193:                    ecma_string_t *property_name_p, /**< property name */
        -: 1194:                    ecma_value_t value, /**< ecma value */
        -: 1195:                    bool is_throw) /**< flag that controls failure handling */
        -: 1196:{
        8: 1197:  return ecma_op_object_put_with_receiver (object_p,
        -: 1198:                                           property_name_p,
        -: 1199:                                           value,
        -: 1200:                                           ecma_make_object_value (object_p),
        -: 1201:                                           is_throw);
        -: 1202:} /* ecma_op_object_put */
        -: 1203:
        -: 1204:#if JERRY_ESNEXT
        -: 1205:/**
        -: 1206: * [[Set]] ( P, V, Receiver) operation part for ordinary objects
        -: 1207: *
        -: 1208: * See also: ECMAScript v6, 9.19.9
        -: 1209: *
        -: 1210: * @return ecma value
        -: 1211: *         The returned value must be freed with ecma_free_value.
        -: 1212: */
        -: 1213:static ecma_value_t
        5: 1214:ecma_op_object_put_apply_receiver (ecma_value_t receiver, /**< receiver */
        -: 1215:                                   ecma_string_t *property_name_p, /**< property name */
        -: 1216:                                   ecma_value_t value, /**< value to set */
        -: 1217:                                   bool is_throw) /**< flag that controls failure handling */
        -: 1218:{
        -: 1219:  /* 5.b */
        5: 1220:  if (!ecma_is_value_object (receiver))
        -: 1221:  {
    #####: 1222:    return ECMA_REJECT (is_throw, ECMA_ERR_RECEIVER_MUST_BE_AN_OBJECT);
        -: 1223:  }
        -: 1224:
        5: 1225:  ecma_object_t *receiver_obj_p = ecma_get_object_from_value (receiver);
        -: 1226:
        5: 1227:  ecma_property_descriptor_t prop_desc;
        -: 1228:  /* 5.c */
        5: 1229:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (receiver_obj_p, property_name_p, &prop_desc);
        -: 1230:
        -: 1231:  /* 5.d */
        5: 1232:  if (ECMA_IS_VALUE_ERROR (status))
        -: 1233:  {
    #####: 1234:    return status;
        -: 1235:  }
        -: 1236:
        -: 1237:  /* 5.e */
        5: 1238:  if (ecma_is_value_true (status))
        -: 1239:  {
        -: 1240:    ecma_value_t result;
        -: 1241:
        -: 1242:    /* 5.e.i - 5.e.ii */
    #####: 1243:    if (prop_desc.flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED)
    #####: 1244:        || !(prop_desc.flags & JERRY_PROP_IS_WRITABLE))
        -: 1245:    {
    #####: 1246:      result = ecma_raise_property_redefinition (property_name_p, prop_desc.flags);
        -: 1247:    }
        -: 1248:    else
        -: 1249:    {
        -: 1250:      /* 5.e.iii */
    #####: 1251:      JERRY_ASSERT (prop_desc.flags & JERRY_PROP_IS_VALUE_DEFINED);
    #####: 1252:      ecma_free_value (prop_desc.value);
    #####: 1253:      prop_desc.value = ecma_copy_value (value);
        -: 1254:
        -: 1255:      /* 5.e.iv */
    #####: 1256:      result = ecma_op_object_define_own_property (receiver_obj_p, property_name_p, &prop_desc);
        -: 1257:
    #####: 1258:      if (JERRY_UNLIKELY (ecma_is_value_false (result)))
        -: 1259:      {
    #####: 1260:        result = ECMA_REJECT (is_throw, ECMA_ERR_PROXY_TRAP_RETURNED_FALSISH);
        -: 1261:      }
        -: 1262:    }
        -: 1263:
    #####: 1264:    ecma_free_property_descriptor (&prop_desc);
        -: 1265:
    #####: 1266:    return result;
        -: 1267:  }
        -: 1268:
        -: 1269:#if JERRY_BUILTIN_PROXY
        5: 1270:  if (ECMA_OBJECT_IS_PROXY (receiver_obj_p))
        -: 1271:  {
    #####: 1272:    ecma_property_descriptor_t desc;
        -: 1273:    /* Based on: ES6 9.1.9 [[Set]] 4.d.i. / ES11 9.1.9.2 OrdinarySetWithOwnDescriptor 2.c.i. */
    #####: 1274:    desc.flags = (JERRY_PROP_IS_CONFIGURABLE | JERRY_PROP_IS_CONFIGURABLE_DEFINED | JERRY_PROP_IS_ENUMERABLE
        -: 1275:                  | JERRY_PROP_IS_ENUMERABLE_DEFINED | JERRY_PROP_IS_WRITABLE | JERRY_PROP_IS_WRITABLE_DEFINED
        -: 1276:                  | JERRY_PROP_IS_VALUE_DEFINED);
    #####: 1277:    desc.value = value;
    #####: 1278:    ecma_value_t ret_value = ecma_proxy_object_define_own_property (receiver_obj_p, property_name_p, &desc);
        -: 1279:
    #####: 1280:    if (JERRY_UNLIKELY (ecma_is_value_false (ret_value)))
        -: 1281:    {
    #####: 1282:      ret_value = ECMA_REJECT (is_throw, ECMA_ERR_PROXY_TRAP_RETURNED_FALSISH);
        -: 1283:    }
        -: 1284:
    #####: 1285:    return ret_value;
        -: 1286:  }
        -: 1287:#endif /* JERRY_BUILTIN_PROXY */
        -: 1288:
        5: 1289:  if (JERRY_UNLIKELY (ecma_op_object_is_fast_array (receiver_obj_p)))
        -: 1290:  {
    #####: 1291:    ecma_fast_array_convert_to_normal (receiver_obj_p);
        -: 1292:  }
        -: 1293:
        -: 1294:  /* 5.f.i */
        -: 1295:  ecma_property_value_t *new_prop_value_p;
        5: 1296:  new_prop_value_p = ecma_create_named_data_property (receiver_obj_p,
        -: 1297:                                                      property_name_p,
        -: 1298:                                                      ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -: 1299:                                                      NULL);
        5: 1300:  JERRY_ASSERT (ecma_is_value_undefined (new_prop_value_p->value));
        5: 1301:  new_prop_value_p->value = ecma_copy_value_if_not_object (value);
        -: 1302:
        5: 1303:  return ECMA_VALUE_TRUE;
        -: 1304:} /* ecma_op_object_put_apply_receiver */
        -: 1305:#endif /* JERRY_ESNEXT */
        -: 1306:
        -: 1307:/**
        -: 1308: * [[Put]] ecma general object's operation with given receiver
        -: 1309: *
        -: 1310: * See also:
        -: 1311: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -: 1312: *          ECMA-262 v5, 8.12.5
        -: 1313: *          ECMA-262 v6, 9.1.9
        -: 1314: *          Also incorporates [[CanPut]] ECMA-262 v5, 8.12.4
        -: 1315: *
        -: 1316: * @return ecma value
        -: 1317: *         The returned value must be freed with ecma_free_value.
        -: 1318: *
        -: 1319: *         Returns with ECMA_VALUE_TRUE if the operation is
        -: 1320: *         successful. Otherwise it returns with an error object
        -: 1321: *         or ECMA_VALUE_FALSE.
        -: 1322: *
        -: 1323: *         Note: even if is_throw is false, the setter can throw an
        -: 1324: *         error, and this function returns with that error.
        -: 1325: */
        -: 1326:ecma_value_t
        8: 1327:ecma_op_object_put_with_receiver (ecma_object_t *object_p, /**< the object */
        -: 1328:                                  ecma_string_t *property_name_p, /**< property name */
        -: 1329:                                  ecma_value_t value, /**< ecma value */
        -: 1330:                                  ecma_value_t receiver, /**< receiver */
        -: 1331:                                  bool is_throw) /**< flag that controls failure handling */
        -: 1332:{
        8: 1333:  JERRY_ASSERT (object_p != NULL && !ecma_is_lexical_environment (object_p));
        8: 1334:  JERRY_ASSERT (property_name_p != NULL);
        -: 1335:
        -: 1336:#if JERRY_BUILTIN_PROXY
        8: 1337:  if (ECMA_OBJECT_IS_PROXY (object_p))
        -: 1338:  {
    #####: 1339:    return ecma_proxy_object_set (object_p, property_name_p, value, receiver, is_throw);
        -: 1340:  }
        -: 1341:#endif /* JERRY_BUILTIN_PROXY */
        -: 1342:
        8: 1343:  ecma_object_base_type_t base_type = ecma_get_object_base_type (object_p);
        -: 1344:
        8: 1345:  switch (base_type)
        -: 1346:  {
    #####: 1347:    case ECMA_OBJECT_BASE_TYPE_CLASS:
        -: 1348:    {
    #####: 1349:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -: 1350:
    #####: 1351:      switch (ext_object_p->u.cls.type)
        -: 1352:      {
    #####: 1353:        case ECMA_OBJECT_CLASS_ARGUMENTS:
        -: 1354:        {
    #####: 1355:          if (!(ext_object_p->u.cls.u1.arguments_flags & ECMA_ARGUMENTS_OBJECT_MAPPED))
        -: 1356:          {
    #####: 1357:            break;
        -: 1358:          }
        -: 1359:
    #####: 1360:          uint32_t index = ecma_string_get_array_index (property_name_p);
        -: 1361:
    #####: 1362:          if (index < ext_object_p->u.cls.u2.formal_params_number)
        -: 1363:          {
    #####: 1364:            ecma_mapped_arguments_t *mapped_arguments_p = (ecma_mapped_arguments_t *) ext_object_p;
        -: 1365:
    #####: 1366:            ecma_value_t *argv_p = (ecma_value_t *) (mapped_arguments_p + 1);
        -: 1367:
    #####: 1368:            if (!ecma_is_value_empty (argv_p[index]) && argv_p[index] != ECMA_VALUE_ARGUMENT_NO_TRACK)
        -: 1369:            {
    #####: 1370:              ecma_string_t *name_p = ecma_op_arguments_object_get_formal_parameter (mapped_arguments_p, index);
    #####: 1371:              ecma_object_t *lex_env_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_object_t, mapped_arguments_p->lex_env);
    #####: 1372:              ecma_op_set_mutable_binding (lex_env_p, name_p, value, true);
    #####: 1373:              return ECMA_VALUE_TRUE;
        -: 1374:            }
        -: 1375:          }
    #####: 1376:          break;
        -: 1377:        }
        -: 1378:#if JERRY_BUILTIN_TYPEDARRAY
        -: 1379:        /* ES2015 9.4.5.5 */
    #####: 1380:        case ECMA_OBJECT_CLASS_TYPEDARRAY:
        -: 1381:        {
    #####: 1382:          if (ecma_prop_name_is_symbol (property_name_p))
        -: 1383:          {
    #####: 1384:            break;
        -: 1385:          }
        -: 1386:
    #####: 1387:          uint32_t index = ecma_string_get_array_index (property_name_p);
        -: 1388:
    #####: 1389:          if (index == ECMA_STRING_NOT_ARRAY_INDEX)
        -: 1390:          {
    #####: 1391:            JERRY_ASSERT (index == UINT32_MAX);
        -: 1392:
    #####: 1393:            if (!ecma_typedarray_is_element_index (property_name_p))
        -: 1394:            {
    #####: 1395:              break;
        -: 1396:            }
        -: 1397:          }
        -: 1398:
    #####: 1399:          ecma_typedarray_info_t info = ecma_typedarray_get_info (object_p);
    #####: 1400:          return ecma_set_typedarray_element (&info, value, index);
        -: 1401:        }
        -: 1402:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        -: 1403:#if JERRY_MODULE_SYSTEM
    #####: 1404:        case ECMA_OBJECT_CLASS_MODULE_NAMESPACE:
        -: 1405:        {
    #####: 1406:          return ecma_raise_readonly_assignment (property_name_p, is_throw);
        -: 1407:        }
        -: 1408:#endif /* JERRY_MODULE_SYSTEM */
        -: 1409:      }
    #####: 1410:      break;
        -: 1411:    }
        3: 1412:    case ECMA_OBJECT_BASE_TYPE_ARRAY:
        -: 1413:    {
        3: 1414:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -: 1415:
        3: 1416:      if (ecma_string_is_length (property_name_p))
        -: 1417:      {
        2: 1418:        if (ecma_is_property_writable ((ecma_property_t) ext_object_p->u.array.length_prop_and_hole_count))
        -: 1419:        {
        2: 1420:          return ecma_op_array_object_set_length (object_p, value, 0);
        -: 1421:        }
        -: 1422:
    #####: 1423:        return ecma_raise_readonly_assignment (property_name_p, is_throw);
        -: 1424:      }
        -: 1425:
        1: 1426:      if (JERRY_LIKELY (ecma_op_array_is_fast_array (ext_object_p)))
        -: 1427:      {
        1: 1428:        uint32_t index = ecma_string_get_array_index (property_name_p);
        -: 1429:
        1: 1430:        if (JERRY_UNLIKELY (index == ECMA_STRING_NOT_ARRAY_INDEX))
        -: 1431:        {
    #####: 1432:          ecma_fast_array_convert_to_normal (object_p);
        -: 1433:        }
        1: 1434:        else if (ecma_fast_array_set_property (object_p, index, value))
        -: 1435:        {
        1: 1436:          return ECMA_VALUE_TRUE;
        -: 1437:        }
        -: 1438:      }
        -: 1439:
    #####: 1440:      JERRY_ASSERT (!ecma_op_object_is_fast_array (object_p));
    #####: 1441:      break;
        -: 1442:    }
        5: 1443:    default:
        -: 1444:    {
        5: 1445:      break;
        -: 1446:    }
        -: 1447:  }
        -: 1448:
        5: 1449:  ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);
        -: 1450:
        5: 1451:  if (property_p == NULL)
        -: 1452:  {
        5: 1453:    switch (ecma_get_object_type (object_p))
        -: 1454:    {
    #####: 1455:      case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:
        -: 1456:      {
    #####: 1457:        if (ecma_builtin_function_is_routine (object_p))
        -: 1458:        {
    #####: 1459:          property_p = ecma_builtin_routine_try_to_instantiate_property (object_p, property_name_p);
    #####: 1460:          break;
        -: 1461:        }
        -: 1462:        /* FALLTHRU */
        -: 1463:      }
        -: 1464:      case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:
        -: 1465:      case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:
        -: 1466:      case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:
        -: 1467:      {
        5: 1468:        property_p = ecma_builtin_try_to_instantiate_property (object_p, property_name_p);
        5: 1469:        break;
        -: 1470:      }
    #####: 1471:      case ECMA_OBJECT_TYPE_CLASS:
        -: 1472:      {
    #####: 1473:        ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -: 1474:
    #####: 1475:        switch (ext_object_p->u.cls.type)
        -: 1476:        {
    #####: 1477:          case ECMA_OBJECT_CLASS_STRING:
        -: 1478:          {
    #####: 1479:            uint32_t index = ecma_string_get_array_index (property_name_p);
        -: 1480:
    #####: 1481:            if (index != ECMA_STRING_NOT_ARRAY_INDEX)
        -: 1482:            {
    #####: 1483:              ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;
    #####: 1484:              ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);
        -: 1485:
    #####: 1486:              if (index < ecma_string_get_length (prim_value_str_p))
        -: 1487:              {
    #####: 1488:                return ecma_raise_readonly_assignment (property_name_p, is_throw);
        -: 1489:              }
        -: 1490:            }
    #####: 1491:            break;
        -: 1492:          }
    #####: 1493:          case ECMA_OBJECT_CLASS_ARGUMENTS:
        -: 1494:          {
    #####: 1495:            property_p = ecma_op_arguments_object_try_to_lazy_instantiate_property (object_p, property_name_p);
    #####: 1496:            break;
        -: 1497:          }
        -: 1498:        }
    #####: 1499:        break;
        -: 1500:      }
    #####: 1501:      case ECMA_OBJECT_TYPE_FUNCTION:
        -: 1502:      {
    #####: 1503:        if (ecma_string_is_length (property_name_p))
        -: 1504:        {
        -: 1505:          /* Uninitialized 'length' property is non-writable (ECMA-262 v6, 19.2.4.1) */
        -: 1506:#if JERRY_ESNEXT
    #####: 1507:          if (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (((ecma_extended_object_t *) object_p)->u.function.scope_cp))
        -: 1508:#endif /* JERRY_ESNEXT */
        -: 1509:          {
    #####: 1510:            return ecma_raise_readonly_assignment (property_name_p, is_throw);
        -: 1511:          }
        -: 1512:        }
        -: 1513:
        -: 1514:        /* Get prototype physical property. */
    #####: 1515:        property_p = ecma_op_function_try_to_lazy_instantiate_property (object_p, property_name_p);
    #####: 1516:        break;
        -: 1517:      }
    #####: 1518:      case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:
        -: 1519:      {
    #####: 1520:        property_p = ecma_op_external_function_try_to_lazy_instantiate_property (object_p, property_name_p);
    #####: 1521:        break;
        -: 1522:      }
    #####: 1523:      case ECMA_OBJECT_TYPE_BOUND_FUNCTION:
        -: 1524:      {
    #####: 1525:        property_p = ecma_op_bound_function_try_to_lazy_instantiate_property (object_p, property_name_p);
    #####: 1526:        break;
        -: 1527:      }
    #####: 1528:      default:
        -: 1529:      {
    #####: 1530:        break;
        -: 1531:      }
        -: 1532:    }
    #####: 1533:  }
        -: 1534:
        5: 1535:  jmem_cpointer_t setter_cp = JMEM_CP_NULL;
        -: 1536:
        5: 1537:  if (property_p != NULL)
        -: 1538:  {
    #####: 1539:    JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));
        -: 1540:
    #####: 1541:    if (*property_p & ECMA_PROPERTY_FLAG_DATA)
        -: 1542:    {
    #####: 1543:      if (ecma_is_property_writable (*property_p))
        -: 1544:      {
        -: 1545:#if JERRY_ESNEXT
    #####: 1546:        if (ecma_make_object_value (object_p) != receiver)
        -: 1547:        {
    #####: 1548:          return ecma_op_object_put_apply_receiver (receiver, property_name_p, value, is_throw);
        -: 1549:        }
        -: 1550:#endif /* JERRY_ESNEXT */
        -: 1551:
        -: 1552:        /* There is no need for special casing arrays here because changing the
        -: 1553:         * value of an existing property never changes the length of an array. */
    #####: 1554:        ecma_named_data_property_assign_value (object_p, ECMA_PROPERTY_VALUE_PTR (property_p), value);
    #####: 1555:        return ECMA_VALUE_TRUE;
        -: 1556:      }
        -: 1557:    }
        -: 1558:    else
        -: 1559:    {
        -: 1560:      ecma_getter_setter_pointers_t *get_set_pair_p;
    #####: 1561:      get_set_pair_p = ecma_get_named_accessor_property (ECMA_PROPERTY_VALUE_PTR (property_p));
    #####: 1562:      setter_cp = get_set_pair_p->setter_cp;
        -: 1563:    }
        -: 1564:  }
        -: 1565:  else
        -: 1566:  {
        5: 1567:    bool create_new_property = true;
        -: 1568:
        -: 1569:    jmem_cpointer_t obj_cp;
        5: 1570:    ECMA_SET_NON_NULL_POINTER (obj_cp, object_p);
        5: 1571:    ecma_object_t *proto_p = object_p;
        -: 1572:
        -: 1573:    while (true)
        5: 1574:    {
       10: 1575:      obj_cp = ecma_op_ordinary_object_get_prototype_of (proto_p);
        -: 1576:
       10: 1577:      if (obj_cp == JMEM_CP_NULL)
        -: 1578:      {
        5: 1579:        break;
        -: 1580:      }
        -: 1581:
        5: 1582:      ecma_property_ref_t property_ref = { NULL };
        5: 1583:      proto_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, obj_cp);
        -: 1584:
        -: 1585:#if JERRY_BUILTIN_PROXY
        5: 1586:      if (ECMA_OBJECT_IS_PROXY (proto_p))
        -: 1587:      {
    #####: 1588:        return ecma_op_object_put_with_receiver (proto_p, property_name_p, value, receiver, is_throw);
        -: 1589:      }
        -: 1590:#endif /* JERRY_BUILTIN_PROXY */
        -: 1591:
        5: 1592:      ecma_property_t inherited_property =
        -: 1593:        ecma_op_object_get_own_property (proto_p, property_name_p, &property_ref, ECMA_PROPERTY_GET_NO_OPTIONS);
        -: 1594:
        5: 1595:      if (ECMA_PROPERTY_IS_FOUND (inherited_property))
        -: 1596:      {
    #####: 1597:        JERRY_ASSERT (ECMA_PROPERTY_IS_NAMED_PROPERTY (inherited_property));
        -: 1598:
    #####: 1599:        if (!(inherited_property & ECMA_PROPERTY_FLAG_DATA))
        -: 1600:        {
    #####: 1601:          setter_cp = ecma_get_named_accessor_property (property_ref.value_p)->setter_cp;
    #####: 1602:          create_new_property = false;
    #####: 1603:          break;
        -: 1604:        }
        -: 1605:
    #####: 1606:        create_new_property = ecma_is_property_writable (inherited_property);
    #####: 1607:        break;
        -: 1608:      }
        -: 1609:
        5: 1610:      JERRY_ASSERT (inherited_property == ECMA_PROPERTY_TYPE_NOT_FOUND
        -: 1611:                    || inherited_property == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP);
        -: 1612:    }
        -: 1613:
        -: 1614:#if JERRY_BUILTIN_PROXY
        5: 1615:    if (create_new_property && ecma_is_value_object (receiver)
        5: 1616:        && ECMA_OBJECT_IS_PROXY (ecma_get_object_from_value (receiver)))
        -: 1617:    {
    #####: 1618:      return ecma_op_object_put_apply_receiver (receiver, property_name_p, value, is_throw);
        -: 1619:    }
        -: 1620:#endif /* JERRY_BUILTIN_PROXY */
        -: 1621:
        5: 1622:    if (create_new_property && ecma_op_ordinary_object_is_extensible (object_p))
        -: 1623:    {
        5: 1624:      const ecma_object_base_type_t obj_base_type = ecma_get_object_base_type (object_p);
        -: 1625:
        5: 1626:      if (obj_base_type == ECMA_OBJECT_BASE_TYPE_CLASS)
        -: 1627:      {
    #####: 1628:        ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -: 1629:
    #####: 1630:        if (ext_object_p->u.cls.type == ECMA_OBJECT_CLASS_ARGUMENTS
    #####: 1631:            && ext_object_p->u.cls.u1.arguments_flags & ECMA_ARGUMENTS_OBJECT_MAPPED)
        -: 1632:        {
    #####: 1633:          const uint32_t flags = ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE | JERRY_PROP_SHOULD_THROW;
    #####: 1634:          return ecma_builtin_helper_def_prop (object_p, property_name_p, value, flags);
        -: 1635:        }
        -: 1636:      }
        -: 1637:
        5: 1638:      uint32_t index = ecma_string_get_array_index (property_name_p);
        -: 1639:
        5: 1640:      if (obj_base_type == ECMA_OBJECT_BASE_TYPE_ARRAY && index != ECMA_STRING_NOT_ARRAY_INDEX)
        -: 1641:      {
    #####: 1642:        ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -: 1643:
    #####: 1644:        if (index < UINT32_MAX && index >= ext_object_p->u.array.length)
        -: 1645:        {
    #####: 1646:          if (!ecma_is_property_writable ((ecma_property_t) ext_object_p->u.array.length_prop_and_hole_count))
        -: 1647:          {
    #####: 1648:            return ecma_raise_readonly_assignment (property_name_p, is_throw);
        -: 1649:          }
        -: 1650:
    #####: 1651:          ext_object_p->u.array.length = index + 1;
        -: 1652:        }
        -: 1653:      }
        -: 1654:
        -: 1655:#if JERRY_ESNEXT
        5: 1656:      return ecma_op_object_put_apply_receiver (receiver, property_name_p, value, is_throw);
        -: 1657:#endif /* JERRY_ESNEXT */
        -: 1658:
        -: 1659:      ecma_property_value_t *new_prop_value_p;
    #####: 1660:      new_prop_value_p = ecma_create_named_data_property (object_p,
        -: 1661:                                                          property_name_p,
        -: 1662:                                                          ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -: 1663:                                                          NULL);
        -: 1664:
        -: 1665:      JERRY_ASSERT (ecma_is_value_undefined (new_prop_value_p->value));
    #####: 1666:      new_prop_value_p->value = ecma_copy_value_if_not_object (value);
    #####: 1667:      return ECMA_VALUE_TRUE;
        -: 1668:    }
        -: 1669:  }
        -: 1670:
    #####: 1671:  if (setter_cp == JMEM_CP_NULL)
        -: 1672:  {
    #####: 1673:    return ecma_raise_readonly_assignment (property_name_p, is_throw);
        -: 1674:  }
        -: 1675:
    #####: 1676:  ecma_value_t ret_value =
    #####: 1677:    ecma_op_function_call (ECMA_GET_NON_NULL_POINTER (ecma_object_t, setter_cp), receiver, &value, 1);
        -: 1678:
    #####: 1679:  if (!ECMA_IS_VALUE_ERROR (ret_value))
        -: 1680:  {
    #####: 1681:    ecma_fast_free_value (ret_value);
    #####: 1682:    ret_value = ECMA_VALUE_TRUE;
        -: 1683:  }
        -: 1684:
    #####: 1685:  return ret_value;
        -: 1686:} /* ecma_op_object_put_with_receiver */
        -: 1687:
        -: 1688:/**
        -: 1689: * [[Delete]] ecma object's operation specialized for property index
        -: 1690: *
        -: 1691: * Note:
        -: 1692: *      This method falls back to the general ecma_op_object_delete
        -: 1693: *
        -: 1694: * @return true - if deleted successfully
        -: 1695: *         false - or type error otherwise (based in 'is_throw')
        -: 1696: */
        -: 1697:ecma_value_t
    #####: 1698:ecma_op_object_delete_by_index (ecma_object_t *obj_p, /**< the object */
        -: 1699:                                ecma_length_t index, /**< property index */
        -: 1700:                                bool is_throw) /**< flag that controls failure handling */
        -: 1701:{
    #####: 1702:  if (JERRY_LIKELY (index <= ECMA_DIRECT_STRING_MAX_IMM))
        -: 1703:  {
    #####: 1704:    return ecma_op_object_delete (obj_p, ECMA_CREATE_DIRECT_UINT32_STRING (index), is_throw);
        -: 1705:    ;
        -: 1706:  }
        -: 1707:
    #####: 1708:  ecma_string_t *index_str_p = ecma_new_ecma_string_from_length (index);
    #####: 1709:  ecma_value_t ret_value = ecma_op_object_delete (obj_p, index_str_p, is_throw);
    #####: 1710:  ecma_deref_ecma_string (index_str_p);
        -: 1711:
    #####: 1712:  return ret_value;
        -: 1713:} /* ecma_op_object_delete_by_index */
        -: 1714:
        -: 1715:/**
        -: 1716: * [[Delete]] ecma object's operation
        -: 1717: *
        -: 1718: * See also:
        -: 1719: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -: 1720: *
        -: 1721: * Note:
        -: 1722: *      returned value must be freed with ecma_free_value
        -: 1723: *
        -: 1724: * @return true - if deleted successfully
        -: 1725: *         false - or type error otherwise (based in 'is_throw')
        -: 1726: */
        -: 1727:ecma_value_t
    #####: 1728:ecma_op_object_delete (ecma_object_t *obj_p, /**< the object */
        -: 1729:                       ecma_string_t *property_name_p, /**< property name */
        -: 1730:                       bool is_strict) /**< flag that controls failure handling */
        -: 1731:{
    #####: 1732:  JERRY_ASSERT (obj_p != NULL && !ecma_is_lexical_environment (obj_p));
    #####: 1733:  JERRY_ASSERT (property_name_p != NULL);
        -: 1734:
        -: 1735:#if JERRY_BUILTIN_PROXY
    #####: 1736:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -: 1737:  {
    #####: 1738:    return ecma_proxy_object_delete_property (obj_p, property_name_p, is_strict);
        -: 1739:  }
        -: 1740:#endif /* JERRY_BUILTIN_PROXY */
        -: 1741:
    #####: 1742:  JERRY_ASSERT_OBJECT_TYPE_IS_VALID (ecma_get_object_type (obj_p));
        -: 1743:
    #####: 1744:  return ecma_op_general_object_delete (obj_p, property_name_p, is_strict);
        -: 1745:} /* ecma_op_object_delete */
        -: 1746:
        -: 1747:/**
        -: 1748: * [[DefaultValue]] ecma object's operation
        -: 1749: *
        -: 1750: * See also:
        -: 1751: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -: 1752: *
        -: 1753: * @return ecma value
        -: 1754: *         Returned value must be freed with ecma_free_value
        -: 1755: */
        -: 1756:ecma_value_t
    #####: 1757:ecma_op_object_default_value (ecma_object_t *obj_p, /**< the object */
        -: 1758:                              ecma_preferred_type_hint_t hint) /**< hint on preferred result type */
        -: 1759:{
    #####: 1760:  JERRY_ASSERT (obj_p != NULL && !ecma_is_lexical_environment (obj_p));
        -: 1761:
    #####: 1762:  JERRY_ASSERT_OBJECT_TYPE_IS_VALID (ecma_get_object_type (obj_p));
        -: 1763:
        -: 1764:  /*
        -: 1765:   * typedef ecma_property_t * (*default_value_ptr_t) (ecma_object_t *, ecma_string_t *);
        -: 1766:   * static const default_value_ptr_t default_value [ECMA_OBJECT_TYPE__COUNT] =
        -: 1767:   * {
        -: 1768:   *   [ECMA_OBJECT_TYPE_GENERAL]           = &ecma_op_general_object_default_value,
        -: 1769:   *   [ECMA_OBJECT_TYPE_CLASS]             = &ecma_op_general_object_default_value,
        -: 1770:   *   [ECMA_OBJECT_TYPE_FUNCTION]          = &ecma_op_general_object_default_value,
        -: 1771:   *   [ECMA_OBJECT_TYPE_NATIVE_FUNCTION]   = &ecma_op_general_object_default_value,
        -: 1772:   *   [ECMA_OBJECT_TYPE_ARRAY]             = &ecma_op_general_object_default_value,
        -: 1773:   *   [ECMA_OBJECT_TYPE_BOUND_FUNCTION]    = &ecma_op_general_object_default_value,
        -: 1774:   *   [ECMA_OBJECT_TYPE_PSEUDO_ARRAY]      = &ecma_op_general_object_default_value
        -: 1775:   * };
        -: 1776:   *
        -: 1777:   * return default_value[type] (obj_p, property_name_p);
        -: 1778:   */
        -: 1779:
    #####: 1780:  return ecma_op_general_object_default_value (obj_p, hint);
        -: 1781:} /* ecma_op_object_default_value */
        -: 1782:
        -: 1783:/**
        -: 1784: * [[DefineOwnProperty]] ecma object's operation
        -: 1785: *
        -: 1786: * See also:
        -: 1787: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -: 1788: *
        -: 1789: * @return ecma value
        -: 1790: *         Returned value must be freed with ecma_free_value
        -: 1791: */
        -: 1792:ecma_value_t
    #####: 1793:ecma_op_object_define_own_property (ecma_object_t *obj_p, /**< the object */
        -: 1794:                                    ecma_string_t *property_name_p, /**< property name */
        -: 1795:                                    const ecma_property_descriptor_t *property_desc_p) /**< property
        -: 1796:                                                                                        *   descriptor */
        -: 1797:{
    #####: 1798:  JERRY_ASSERT (obj_p != NULL && !ecma_is_lexical_environment (obj_p));
    #####: 1799:  JERRY_ASSERT (property_name_p != NULL);
        -: 1800:
    #####: 1801:  const ecma_object_type_t type = ecma_get_object_type (obj_p);
        -: 1802:
    #####: 1803:  switch (type)
        -: 1804:  {
    #####: 1805:    case ECMA_OBJECT_TYPE_CLASS:
        -: 1806:    {
    #####: 1807:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -: 1808:
    #####: 1809:      switch (ext_object_p->u.cls.type)
        -: 1810:      {
    #####: 1811:        case ECMA_OBJECT_CLASS_ARGUMENTS:
        -: 1812:        {
    #####: 1813:          return ecma_op_arguments_object_define_own_property (obj_p, property_name_p, property_desc_p);
        -: 1814:        }
        -: 1815:#if JERRY_BUILTIN_TYPEDARRAY
        -: 1816:        /* ES2015 9.4.5.1 */
    #####: 1817:        case ECMA_OBJECT_CLASS_TYPEDARRAY:
        -: 1818:        {
    #####: 1819:          return ecma_op_typedarray_define_own_property (obj_p, property_name_p, property_desc_p);
        -: 1820:        }
        -: 1821:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        -: 1822:      }
    #####: 1823:      break;
        -: 1824:    }
    #####: 1825:    case ECMA_OBJECT_TYPE_ARRAY:
        -: 1826:    case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:
        -: 1827:    {
    #####: 1828:      return ecma_op_array_object_define_own_property (obj_p, property_name_p, property_desc_p);
        -: 1829:    }
        -: 1830:#if JERRY_BUILTIN_PROXY
    #####: 1831:    case ECMA_OBJECT_TYPE_PROXY:
        -: 1832:    {
    #####: 1833:      return ecma_proxy_object_define_own_property (obj_p, property_name_p, property_desc_p);
        -: 1834:    }
        -: 1835:#endif /* JERRY_BUILTIN_PROXY */
    #####: 1836:    default:
        -: 1837:    {
    #####: 1838:      break;
        -: 1839:    }
        -: 1840:  }
        -: 1841:
    #####: 1842:  return ecma_op_general_object_define_own_property (obj_p, property_name_p, property_desc_p);
        -: 1843:} /* ecma_op_object_define_own_property */
        -: 1844:
        -: 1845:/**
        -: 1846: * Get property descriptor from specified property
        -: 1847: *
        -: 1848: * depending on the property type the following fields are set:
        -: 1849: *   - for named data properties: { [Value], [Writable], [Enumerable], [Configurable] };
        -: 1850: *   - for named accessor properties: { [Get] - if defined,
        -: 1851: *                                      [Set] - if defined,
        -: 1852: *                                      [Enumerable], [Configurable]
        -: 1853: *                                    }.
        -: 1854: *
        -: 1855: * The output property descriptor will always be initialized to an empty descriptor.
        -: 1856: *
        -: 1857: * @return ECMA_VALUE_ERROR - if the Proxy.[[GetOwnProperty]] operation raises error
        -: 1858: *         ECMA_VALUE_{TRUE, FALSE} - if property found or not
        -: 1859: */
        -: 1860:ecma_value_t
        5: 1861:ecma_op_object_get_own_property_descriptor (ecma_object_t *object_p, /**< the object */
        -: 1862:                                            ecma_string_t *property_name_p, /**< property name */
        -: 1863:                                            ecma_property_descriptor_t *prop_desc_p) /**< property descriptor */
        -: 1864:{
        5: 1865:  *prop_desc_p = ecma_make_empty_property_descriptor ();
        -: 1866:
        -: 1867:#if JERRY_BUILTIN_PROXY
        5: 1868:  if (ECMA_OBJECT_IS_PROXY (object_p))
        -: 1869:  {
    #####: 1870:    return ecma_proxy_object_get_own_property_descriptor (object_p, property_name_p, prop_desc_p);
        -: 1871:  }
        -: 1872:#endif /* JERRY_BUILTIN_PROXY */
        -: 1873:
        5: 1874:  ecma_property_ref_t property_ref;
        5: 1875:  property_ref.virtual_value = ECMA_VALUE_EMPTY;
        5: 1876:  ecma_property_t property =
        -: 1877:    ecma_op_object_get_own_property (object_p, property_name_p, &property_ref, ECMA_PROPERTY_GET_VALUE);
        -: 1878:
        5: 1879:  if (!ECMA_PROPERTY_IS_FOUND (property))
        -: 1880:  {
        -: 1881:#if JERRY_BUILTIN_TYPEDARRAY
        5: 1882:    if (JERRY_UNLIKELY (property == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_THROW))
        -: 1883:    {
    #####: 1884:      return ECMA_VALUE_ERROR;
        -: 1885:    }
        -: 1886:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        -: 1887:
        5: 1888:    JERRY_ASSERT (property == ECMA_PROPERTY_TYPE_NOT_FOUND || property == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP);
        -: 1889:
        5: 1890:    return ECMA_VALUE_FALSE;
        -: 1891:  }
        -: 1892:
    #####: 1893:  uint32_t flags = ecma_is_property_enumerable (property) ? JERRY_PROP_IS_ENUMERABLE : JERRY_PROP_NO_OPTS;
    #####: 1894:  flags |= ecma_is_property_configurable (property) ? JERRY_PROP_IS_CONFIGURABLE : JERRY_PROP_NO_OPTS;
        -: 1895:
    #####: 1896:  prop_desc_p->flags = (uint16_t) (JERRY_PROP_IS_ENUMERABLE_DEFINED | JERRY_PROP_IS_CONFIGURABLE_DEFINED | flags);
        -: 1897:
    #####: 1898:  if (property & ECMA_PROPERTY_FLAG_DATA)
        -: 1899:  {
    #####: 1900:    if (!ECMA_PROPERTY_IS_VIRTUAL (property))
        -: 1901:    {
    #####: 1902:      prop_desc_p->value = ecma_copy_value (property_ref.value_p->value);
        -: 1903:    }
        -: 1904:    else
        -: 1905:    {
        -: 1906:#if JERRY_MODULE_SYSTEM
    #####: 1907:      if (JERRY_UNLIKELY (property_ref.virtual_value == ECMA_VALUE_UNINITIALIZED))
        -: 1908:      {
    #####: 1909:        return ecma_raise_reference_error (ECMA_ERR_LET_CONST_NOT_INITIALIZED);
        -: 1910:      }
        -: 1911:#endif /* JERRY_MODULE_SYSTEM */
    #####: 1912:      prop_desc_p->value = property_ref.virtual_value;
        -: 1913:    }
        -: 1914:
    #####: 1915:    prop_desc_p->flags |= (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE_DEFINED);
    #####: 1916:    prop_desc_p->flags = (uint16_t) (
    #####: 1917:      prop_desc_p->flags | (ecma_is_property_writable (property) ? JERRY_PROP_IS_WRITABLE : JERRY_PROP_NO_OPTS));
        -: 1918:  }
        -: 1919:  else
        -: 1920:  {
    #####: 1921:    ecma_getter_setter_pointers_t *get_set_pair_p = ecma_get_named_accessor_property (property_ref.value_p);
    #####: 1922:    prop_desc_p->flags |= (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED);
        -: 1923:
    #####: 1924:    if (get_set_pair_p->getter_cp == JMEM_CP_NULL)
        -: 1925:    {
    #####: 1926:      prop_desc_p->get_p = NULL;
        -: 1927:    }
        -: 1928:    else
        -: 1929:    {
    #####: 1930:      prop_desc_p->get_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, get_set_pair_p->getter_cp);
    #####: 1931:      ecma_ref_object (prop_desc_p->get_p);
        -: 1932:    }
        -: 1933:
    #####: 1934:    if (get_set_pair_p->setter_cp == JMEM_CP_NULL)
        -: 1935:    {
    #####: 1936:      prop_desc_p->set_p = NULL;
        -: 1937:    }
        -: 1938:    else
        -: 1939:    {
    #####: 1940:      prop_desc_p->set_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, get_set_pair_p->setter_cp);
    #####: 1941:      ecma_ref_object (prop_desc_p->set_p);
        -: 1942:    }
        -: 1943:  }
        -: 1944:
    #####: 1945:  return ECMA_VALUE_TRUE;
        -: 1946:} /* ecma_op_object_get_own_property_descriptor */
        -: 1947:
        -: 1948:#if JERRY_BUILTIN_PROXY
        -: 1949:/**
        -: 1950: * Get property descriptor from a target value for a specified property.
        -: 1951: *
        -: 1952: * For more details see ecma_op_object_get_own_property_descriptor
        -: 1953: *
        -: 1954: * @return ECMA_VALUE_ERROR - if the Proxy.[[GetOwnProperty]] operation raises error
        -: 1955: *         ECMA_VALUE_{TRUE, FALSE} - if property found or not
        -: 1956: */
        -: 1957:ecma_value_t
    #####: 1958:ecma_op_get_own_property_descriptor (ecma_value_t target, /**< target value */
        -: 1959:                                     ecma_string_t *property_name_p, /**< property name */
        -: 1960:                                     ecma_property_descriptor_t *prop_desc_p) /**< property descriptor */
        -: 1961:{
    #####: 1962:  if (!ecma_is_value_object (target))
        -: 1963:  {
    #####: 1964:    return ECMA_VALUE_FALSE;
        -: 1965:  }
        -: 1966:
    #####: 1967:  return ecma_op_object_get_own_property_descriptor (ecma_get_object_from_value (target), property_name_p, prop_desc_p);
        -: 1968:} /* ecma_op_get_own_property_descriptor */
        -: 1969:#endif /* JERRY_BUILTIN_PROXY */
        -: 1970:
        -: 1971:/**
        -: 1972: * [[HasInstance]] ecma object's operation
        -: 1973: *
        -: 1974: * See also:
        -: 1975: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 9
        -: 1976: *
        -: 1977: * @return ecma value containing a boolean value or an error
        -: 1978: *         Returned value must be freed with ecma_free_value
        -: 1979: */
        -: 1980:ecma_value_t
    #####: 1981:ecma_op_object_has_instance (ecma_object_t *obj_p, /**< the object */
        -: 1982:                             ecma_value_t value) /**< argument 'V' */
        -: 1983:{
    #####: 1984:  JERRY_ASSERT (obj_p != NULL && !ecma_is_lexical_environment (obj_p));
        -: 1985:
    #####: 1986:  JERRY_ASSERT_OBJECT_TYPE_IS_VALID (ecma_get_object_type (obj_p));
        -: 1987:
    #####: 1988:  if (ecma_op_object_is_callable (obj_p))
        -: 1989:  {
    #####: 1990:    return ecma_op_function_has_instance (obj_p, value);
        -: 1991:  }
        -: 1992:
    #####: 1993:  return ecma_raise_type_error (ECMA_ERR_EXPECTED_A_FUNCTION_OBJECT);
        -: 1994:} /* ecma_op_object_has_instance */
        -: 1995:
        -: 1996:/**
        -: 1997: * General [[GetPrototypeOf]] abstract operation
        -: 1998: *
        -: 1999: * Note: returned valid object must be freed.
        -: 2000: *
        -: 2001: * @return ecma_object_t * - prototype of the input object.
        -: 2002: *         ECMA_OBJECT_POINTER_ERROR - error reported during Proxy resolve.
        -: 2003: *         NULL - the input object does not have a prototype.
        -: 2004: */
        -: 2005:ecma_object_t *
    #####: 2006:ecma_op_object_get_prototype_of (ecma_object_t *obj_p) /**< input object */
        -: 2007:{
    #####: 2008:  JERRY_ASSERT (obj_p != NULL);
        -: 2009:
        -: 2010:#if JERRY_BUILTIN_PROXY
    #####: 2011:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -: 2012:  {
    #####: 2013:    ecma_value_t proto = ecma_proxy_object_get_prototype_of (obj_p);
        -: 2014:
    #####: 2015:    if (ECMA_IS_VALUE_ERROR (proto))
        -: 2016:    {
    #####: 2017:      return ECMA_OBJECT_POINTER_ERROR;
        -: 2018:    }
    #####: 2019:    if (ecma_is_value_null (proto))
        -: 2020:    {
    #####: 2021:      return NULL;
        -: 2022:    }
        -: 2023:
    #####: 2024:    JERRY_ASSERT (ecma_is_value_object (proto));
        -: 2025:
    #####: 2026:    return ecma_get_object_from_value (proto);
        -: 2027:  }
        -: 2028:  else
        -: 2029:#endif /* JERRY_BUILTIN_PROXY */
        -: 2030:  {
    #####: 2031:    jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (obj_p);
        -: 2032:
    #####: 2033:    if (proto_cp == JMEM_CP_NULL)
        -: 2034:    {
    #####: 2035:      return NULL;
        -: 2036:    }
        -: 2037:
    #####: 2038:    ecma_object_t *proto_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);
    #####: 2039:    ecma_ref_object (proto_p);
        -: 2040:
    #####: 2041:    return proto_p;
        -: 2042:  }
        -: 2043:} /* ecma_op_object_get_prototype_of */
        -: 2044:
        -: 2045:/**
        -: 2046: * Object's isPrototypeOf operation
        -: 2047: *
        -: 2048: * See also:
        -: 2049: *          ECMA-262 v5, 15.2.4.6; 3
        -: 2050: *
        -: 2051: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 2052: *         ECMA_VALUE_TRUE - if the target object is prototype of the base object
        -: 2053: *         ECMA_VALUE_FALSE - if the target object is not prototype of the base object
        -: 2054: */
        -: 2055:ecma_value_t
    #####: 2056:ecma_op_object_is_prototype_of (ecma_object_t *base_p, /**< base object */
        -: 2057:                                ecma_object_t *target_p) /**< target object */
        -: 2058:{
    #####: 2059:  ecma_ref_object (target_p);
        -: 2060:
        -: 2061:  do
    #####: 2062:  {
    #####: 2063:    ecma_object_t *proto_p = ecma_op_object_get_prototype_of (target_p);
    #####: 2064:    ecma_deref_object (target_p);
        -: 2065:
    #####: 2066:    if (proto_p == NULL)
        -: 2067:    {
    #####: 2068:      return ECMA_VALUE_FALSE;
        -: 2069:    }
    #####: 2070:    else if (proto_p == ECMA_OBJECT_POINTER_ERROR)
        -: 2071:    {
    #####: 2072:      return ECMA_VALUE_ERROR;
        -: 2073:    }
    #####: 2074:    else if (proto_p == base_p)
        -: 2075:    {
    #####: 2076:      ecma_deref_object (proto_p);
    #####: 2077:      return ECMA_VALUE_TRUE;
        -: 2078:    }
        -: 2079:
        -: 2080:    /* Advance up on prototype chain. */
    #####: 2081:    target_p = proto_p;
        -: 2082:  } while (true);
        -: 2083:} /* ecma_op_object_is_prototype_of */
        -: 2084:
        -: 2085:/**
        -: 2086: * Object's EnumerableOwnPropertyNames operation
        -: 2087: *
        -: 2088: * See also:
        -: 2089: *          ECMA-262 v11, 7.3.23
        -: 2090: *
        -: 2091: * @return NULL - if operation fails
        -: 2092: *         collection of property names / values / name-value pairs - otherwise
        -: 2093: */
        -: 2094:ecma_collection_t *
    #####: 2095:ecma_op_object_get_enumerable_property_names (ecma_object_t *obj_p, /**< routine's first argument */
        -: 2096:                                              ecma_enumerable_property_names_options_t option) /**< listing option */
        -: 2097:{
        -: 2098:  /* 2. */
    #####: 2099:  ecma_collection_t *prop_names_p = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_EXCLUDE_SYMBOLS);
        -: 2100:
        -: 2101:#if JERRY_BUILTIN_PROXY
    #####: 2102:  if (JERRY_UNLIKELY (prop_names_p == NULL))
        -: 2103:  {
    #####: 2104:    return prop_names_p;
        -: 2105:  }
        -: 2106:#endif /* JERRY_BUILTIN_PROXY */
        -: 2107:
    #####: 2108:  ecma_value_t *names_buffer_p = prop_names_p->buffer_p;
        -: 2109:  /* 3. */
    #####: 2110:  ecma_collection_t *properties_p = ecma_new_collection ();
        -: 2111:
        -: 2112:  /* 4. */
    #####: 2113:  for (uint32_t i = 0; i < prop_names_p->item_count; i++)
        -: 2114:  {
        -: 2115:    /* 4.a */
    #####: 2116:    if (ecma_is_value_string (names_buffer_p[i]))
        -: 2117:    {
    #####: 2118:      ecma_string_t *key_p = ecma_get_string_from_value (names_buffer_p[i]);
        -: 2119:
        -: 2120:      /* 4.a.i */
    #####: 2121:      ecma_property_descriptor_t prop_desc;
    #####: 2122:      ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, key_p, &prop_desc);
        -: 2123:
    #####: 2124:      if (ECMA_IS_VALUE_ERROR (status))
        -: 2125:      {
    #####: 2126:        ecma_collection_free (prop_names_p);
    #####: 2127:        ecma_collection_free (properties_p);
        -: 2128:
    #####: 2129:        return NULL;
        -: 2130:      }
        -: 2131:
    #####: 2132:      const bool is_enumerable = (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE) != 0;
    #####: 2133:      ecma_free_property_descriptor (&prop_desc);
        -: 2134:      /* 4.a.ii */
    #####: 2135:      if (is_enumerable)
        -: 2136:      {
        -: 2137:        /* 4.a.ii.1 */
    #####: 2138:        if (option == ECMA_ENUMERABLE_PROPERTY_KEYS)
        -: 2139:        {
    #####: 2140:          ecma_collection_push_back (properties_p, ecma_copy_value (names_buffer_p[i]));
        -: 2141:        }
        -: 2142:        else
        -: 2143:        {
        -: 2144:          /* 4.a.ii.2.a */
    #####: 2145:          ecma_value_t value = ecma_op_object_get (obj_p, key_p);
        -: 2146:
    #####: 2147:          if (ECMA_IS_VALUE_ERROR (value))
        -: 2148:          {
    #####: 2149:            ecma_collection_free (prop_names_p);
    #####: 2150:            ecma_collection_free (properties_p);
        -: 2151:
    #####: 2152:            return NULL;
        -: 2153:          }
        -: 2154:
        -: 2155:          /* 4.a.ii.2.b */
    #####: 2156:          if (option == ECMA_ENUMERABLE_PROPERTY_VALUES)
        -: 2157:          {
    #####: 2158:            ecma_collection_push_back (properties_p, value);
        -: 2159:          }
        -: 2160:          else
        -: 2161:          {
        -: 2162:            /* 4.a.ii.2.c.i */
    #####: 2163:            JERRY_ASSERT (option == ECMA_ENUMERABLE_PROPERTY_ENTRIES);
        -: 2164:
        -: 2165:            /* 4.a.ii.2.c.ii */
    #####: 2166:            ecma_object_t *entry_p = ecma_op_new_array_object (2);
        -: 2167:
    #####: 2168:            ecma_builtin_helper_def_prop_by_index (entry_p,
        -: 2169:                                                   0,
    #####: 2170:                                                   names_buffer_p[i],
        -: 2171:                                                   ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);
    #####: 2172:            ecma_builtin_helper_def_prop_by_index (entry_p, 1, value, ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);
    #####: 2173:            ecma_free_value (value);
        -: 2174:
        -: 2175:            /* 4.a.ii.2.c.iii */
    #####: 2176:            ecma_collection_push_back (properties_p, ecma_make_object_value (entry_p));
        -: 2177:          }
        -: 2178:        }
        -: 2179:      }
        -: 2180:    }
        -: 2181:  }
        -: 2182:
    #####: 2183:  ecma_collection_free (prop_names_p);
        -: 2184:
    #####: 2185:  return properties_p;
        -: 2186:} /* ecma_op_object_get_enumerable_property_names */
        -: 2187:
        -: 2188:/**
        -: 2189: * Helper method for getting lazy instantiated properties for [[OwnPropertyKeys]]
        -: 2190: */
        -: 2191:static void
    #####: 2192:ecma_object_list_lazy_property_names (ecma_object_t *obj_p, /**< object */
        -: 2193:                                      ecma_collection_t *prop_names_p, /**< prop name collection */
        -: 2194:                                      ecma_property_counter_t *prop_counter_p, /**< property counters */
        -: 2195:                                      jerry_property_filter_t filter) /**< property name filter options */
        -: 2196:{
    #####: 2197:  switch (ecma_get_object_type (obj_p))
        -: 2198:  {
    #####: 2199:    case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:
        -: 2200:    {
    #####: 2201:      if (ecma_builtin_function_is_routine (obj_p))
        -: 2202:      {
    #####: 2203:        ecma_builtin_routine_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);
    #####: 2204:        break;
        -: 2205:      }
        -: 2206:      /* FALLTHRU */
        -: 2207:    }
        -: 2208:    case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:
        -: 2209:    case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:
        -: 2210:    case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:
        -: 2211:    {
    #####: 2212:      ecma_builtin_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);
    #####: 2213:      break;
        -: 2214:    }
    #####: 2215:    case ECMA_OBJECT_TYPE_CLASS:
        -: 2216:    {
    #####: 2217:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -: 2218:
    #####: 2219:      switch (ext_object_p->u.cls.type)
        -: 2220:      {
    #####: 2221:        case ECMA_OBJECT_CLASS_STRING:
        -: 2222:        {
    #####: 2223:          ecma_op_string_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);
    #####: 2224:          break;
        -: 2225:        }
    #####: 2226:        case ECMA_OBJECT_CLASS_ARGUMENTS:
        -: 2227:        {
    #####: 2228:          ecma_op_arguments_object_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);
    #####: 2229:          break;
        -: 2230:        }
        -: 2231:#if JERRY_BUILTIN_TYPEDARRAY
        -: 2232:        /* ES2015 9.4.5.1 */
    #####: 2233:        case ECMA_OBJECT_CLASS_TYPEDARRAY:
        -: 2234:        {
    #####: 2235:          ecma_op_typedarray_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);
    #####: 2236:          break;
        -: 2237:        }
        -: 2238:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        -: 2239:      }
    #####: 2240:      break;
        -: 2241:    }
    #####: 2242:    case ECMA_OBJECT_TYPE_FUNCTION:
        -: 2243:    {
    #####: 2244:      ecma_op_function_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);
    #####: 2245:      break;
        -: 2246:    }
    #####: 2247:    case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:
        -: 2248:    {
    #####: 2249:      ecma_op_external_function_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);
    #####: 2250:      break;
        -: 2251:    }
    #####: 2252:    case ECMA_OBJECT_TYPE_BOUND_FUNCTION:
        -: 2253:    {
    #####: 2254:      ecma_op_bound_function_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);
    #####: 2255:      break;
        -: 2256:    }
    #####: 2257:    case ECMA_OBJECT_TYPE_ARRAY:
        -: 2258:    {
    #####: 2259:      if (!(filter & JERRY_PROPERTY_FILTER_EXCLUDE_STRINGS))
        -: 2260:      {
    #####: 2261:        ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
    #####: 2262:        prop_counter_p->string_named_props++;
        -: 2263:      }
    #####: 2264:      break;
        -: 2265:    }
    #####: 2266:    default:
        -: 2267:    {
    #####: 2268:      JERRY_ASSERT (ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_GENERAL
        -: 2269:                    || ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION);
    #####: 2270:      break;
        -: 2271:    }
        -: 2272:  }
    #####: 2273:} /* ecma_object_list_lazy_property_names */
        -: 2274:
        -: 2275:/**
        -: 2276: * Helper routine for heapsort algorithm.
        -: 2277: */
        -: 2278:static void
    #####: 2279:ecma_op_object_heap_sort_shift_down (ecma_value_t *buffer_p, /**< array of items */
        -: 2280:                                     uint32_t item_count, /**< number of items */
        -: 2281:                                     uint32_t item_index) /**< index of updated item */
        -: 2282:{
        -: 2283:  while (true)
    #####: 2284:  {
    #####: 2285:    uint32_t highest_index = item_index;
    #####: 2286:    uint32_t current_index = (item_index << 1) + 1;
        -: 2287:
    #####: 2288:    if (current_index >= item_count)
        -: 2289:    {
    #####: 2290:      return;
        -: 2291:    }
        -: 2292:
    #####: 2293:    uint32_t value = ecma_string_get_array_index (ecma_get_string_from_value (buffer_p[highest_index]));
    #####: 2294:    uint32_t left_value = ecma_string_get_array_index (ecma_get_string_from_value (buffer_p[current_index]));
        -: 2295:
    #####: 2296:    if (value < left_value)
        -: 2297:    {
    #####: 2298:      highest_index = current_index;
    #####: 2299:      value = left_value;
        -: 2300:    }
        -: 2301:
    #####: 2302:    current_index++;
        -: 2303:
    #####: 2304:    if (current_index < item_count
    #####: 2305:        && value < ecma_string_get_array_index (ecma_get_string_from_value (buffer_p[current_index])))
        -: 2306:    {
    #####: 2307:      highest_index = current_index;
        -: 2308:    }
        -: 2309:
    #####: 2310:    if (highest_index == item_index)
        -: 2311:    {
    #####: 2312:      return;
        -: 2313:    }
        -: 2314:
    #####: 2315:    ecma_value_t tmp = buffer_p[highest_index];
    #####: 2316:    buffer_p[highest_index] = buffer_p[item_index];
    #####: 2317:    buffer_p[item_index] = tmp;
        -: 2318:
    #####: 2319:    item_index = highest_index;
        -: 2320:  }
        -: 2321:} /* ecma_op_object_heap_sort_shift_down */
        -: 2322:
        -: 2323:/**
        -: 2324: * Object's [[OwnPropertyKeys]] internal method
        -: 2325: *
        -: 2326: * Order of names in the collection:
        -: 2327: *  - integer indices in ascending order
        -: 2328: *  - other indices in creation order (for built-ins: the order of the properties are listed in specification).
        -: 2329: *
        -: 2330: * Note:
        -: 2331: *      Implementation of the routine assumes that new properties are appended to beginning of corresponding object's
        -: 2332: *      property list, and the list is not reordered (in other words, properties are stored in order that is reversed
        -: 2333: *      to the properties' addition order).
        -: 2334: *
        -: 2335: * @return NULL - if the Proxy.[[OwnPropertyKeys]] operation raises error
        -: 2336: *         collection of property names - otherwise
        -: 2337: */
        -: 2338:ecma_collection_t *
    #####: 2339:ecma_op_object_own_property_keys (ecma_object_t *obj_p, /**< object */
        -: 2340:                                  jerry_property_filter_t filter) /**< name filters */
        -: 2341:{
        -: 2342:#if JERRY_BUILTIN_PROXY
    #####: 2343:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -: 2344:  {
    #####: 2345:    return ecma_proxy_object_own_property_keys (obj_p);
        -: 2346:  }
        -: 2347:#endif /* JERRY_BUILTIN_PROXY */
        -: 2348:
    #####: 2349:  if (ecma_op_object_is_fast_array (obj_p))
        -: 2350:  {
    #####: 2351:    return ecma_fast_array_object_own_property_keys (obj_p, filter);
        -: 2352:  }
        -: 2353:
    #####: 2354:  ecma_collection_t *prop_names_p = ecma_new_collection ();
    #####: 2355:  ecma_property_counter_t prop_counter = { 0, 0, 0 };
        -: 2356:
    #####: 2357:  ecma_object_list_lazy_property_names (obj_p, prop_names_p, &prop_counter, filter);
        -: 2358:
    #####: 2359:  jmem_cpointer_t prop_iter_cp = obj_p->u1.property_list_cp;
        -: 2360:
        -: 2361:#if JERRY_PROPERTY_HASHMAP
    #####: 2362:  if (prop_iter_cp != JMEM_CP_NULL)
        -: 2363:  {
    #####: 2364:    ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, prop_iter_cp);
        -: 2365:
    #####: 2366:    if (prop_iter_p->types[0] == ECMA_PROPERTY_TYPE_HASHMAP)
        -: 2367:    {
    #####: 2368:      prop_iter_cp = prop_iter_p->next_property_cp;
        -: 2369:    }
        -: 2370:  }
        -: 2371:#endif /* JERRY_PROPERTY_HASHMAP */
        -: 2372:
    #####: 2373:  jmem_cpointer_t counter_prop_iter_cp = prop_iter_cp;
        -: 2374:
    #####: 2375:  uint32_t array_index_named_props = 0;
    #####: 2376:  uint32_t string_named_props = 0;
        -: 2377:#if JERRY_ESNEXT
    #####: 2378:  uint32_t symbol_named_props = 0;
        -: 2379:#endif /* JERRY_ESNEXT */
        -: 2380:
    #####: 2381:  while (counter_prop_iter_cp != JMEM_CP_NULL)
        -: 2382:  {
    #####: 2383:    ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, counter_prop_iter_cp);
    #####: 2384:    JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));
        -: 2385:
    #####: 2386:    for (int i = 0; i < ECMA_PROPERTY_PAIR_ITEM_COUNT; i++)
        -: 2387:    {
    #####: 2388:      ecma_property_t *property_p = prop_iter_p->types + i;
        -: 2389:
    #####: 2390:      if (!ECMA_PROPERTY_IS_RAW (*property_p) || (*property_p & ECMA_PROPERTY_FLAG_BUILT_IN))
        -: 2391:      {
    #####: 2392:        continue;
        -: 2393:      }
        -: 2394:
    #####: 2395:      ecma_property_pair_t *prop_pair_p = (ecma_property_pair_t *) prop_iter_p;
        -: 2396:
    #####: 2397:      if (ECMA_PROPERTY_GET_NAME_TYPE (*property_p) == ECMA_DIRECT_STRING_MAGIC
    #####: 2398:          && prop_pair_p->names_cp[i] >= LIT_NON_INTERNAL_MAGIC_STRING__COUNT
    #####: 2399:          && prop_pair_p->names_cp[i] < LIT_MAGIC_STRING__COUNT)
        -: 2400:      {
    #####: 2401:        continue;
        -: 2402:      }
        -: 2403:
    #####: 2404:      ecma_string_t *name_p = ecma_string_from_property_name (*property_p, prop_pair_p->names_cp[i]);
        -: 2405:
    #####: 2406:      if (ecma_string_get_array_index (name_p) != ECMA_STRING_NOT_ARRAY_INDEX)
        -: 2407:      {
    #####: 2408:        array_index_named_props++;
        -: 2409:      }
        -: 2410:#if JERRY_ESNEXT
    #####: 2411:      else if (ecma_prop_name_is_symbol (name_p))
        -: 2412:      {
    #####: 2413:        if (!(name_p->u.hash & ECMA_SYMBOL_FLAG_PRIVATE_KEY))
        -: 2414:        {
    #####: 2415:          symbol_named_props++;
        -: 2416:        }
        -: 2417:      }
        -: 2418:#endif /* JERRY_ESNEXT */
        -: 2419:      else
        -: 2420:      {
    #####: 2421:        string_named_props++;
        -: 2422:      }
        -: 2423:
    #####: 2424:      ecma_deref_ecma_string (name_p);
        -: 2425:    }
        -: 2426:
    #####: 2427:    counter_prop_iter_cp = prop_iter_p->next_property_cp;
        -: 2428:  }
        -: 2429:
    #####: 2430:  if (filter & JERRY_PROPERTY_FILTER_EXCLUDE_INTEGER_INDICES)
        -: 2431:  {
    #####: 2432:    JERRY_ASSERT (prop_counter.array_index_named_props == 0);
    #####: 2433:    array_index_named_props = 0;
        -: 2434:  }
        -: 2435:
    #####: 2436:  if (filter & JERRY_PROPERTY_FILTER_EXCLUDE_STRINGS)
        -: 2437:  {
    #####: 2438:    JERRY_ASSERT (prop_counter.string_named_props == 0);
    #####: 2439:    string_named_props = 0;
        -: 2440:  }
        -: 2441:
        -: 2442:#if JERRY_ESNEXT
    #####: 2443:  if (filter & JERRY_PROPERTY_FILTER_EXCLUDE_SYMBOLS)
        -: 2444:  {
    #####: 2445:    JERRY_ASSERT (prop_counter.symbol_named_props == 0);
    #####: 2446:    symbol_named_props = 0;
        -: 2447:  }
        -: 2448:
    #####: 2449:  uint32_t total = array_index_named_props + string_named_props + symbol_named_props;
        -: 2450:#else /* !JERRY_ESNEXT */
    #####: 2451:  uint32_t total = array_index_named_props + string_named_props;
        -: 2452:#endif /* JERRY_ESNEXT */
        -: 2453:
    #####: 2454:  if (total == 0)
        -: 2455:  {
    #####: 2456:    return prop_names_p;
        -: 2457:  }
        -: 2458:
    #####: 2459:  ecma_collection_reserve (prop_names_p, total);
    #####: 2460:  prop_names_p->item_count += total;
        -: 2461:
    #####: 2462:  ecma_value_t *buffer_p = prop_names_p->buffer_p;
    #####: 2463:  ecma_value_t *array_index_current_p = buffer_p + array_index_named_props + prop_counter.array_index_named_props;
    #####: 2464:  ecma_value_t *string_current_p = array_index_current_p + string_named_props + prop_counter.string_named_props;
        -: 2465:
        -: 2466:#if JERRY_ESNEXT
    #####: 2467:  ecma_value_t *symbol_current_p = string_current_p + symbol_named_props + prop_counter.symbol_named_props;
        -: 2468:
    #####: 2469:  if (prop_counter.symbol_named_props > 0 && (array_index_named_props + string_named_props) > 0)
        -: 2470:  {
    #####: 2471:    memmove ((void *) string_current_p,
    #####: 2472:             (void *) (buffer_p + prop_counter.array_index_named_props + prop_counter.string_named_props),
    #####: 2473:             prop_counter.symbol_named_props * sizeof (ecma_value_t));
        -: 2474:  }
        -: 2475:#endif /* JERRY_ESNEXT */
        -: 2476:
    #####: 2477:  if (prop_counter.string_named_props > 0 && array_index_named_props > 0)
        -: 2478:  {
    #####: 2479:    memmove ((void *) array_index_current_p,
    #####: 2480:             (void *) (buffer_p + prop_counter.array_index_named_props),
    #####: 2481:             prop_counter.string_named_props * sizeof (ecma_value_t));
        -: 2482:  }
        -: 2483:
    #####: 2484:  while (prop_iter_cp != JMEM_CP_NULL)
        -: 2485:  {
    #####: 2486:    ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, prop_iter_cp);
    #####: 2487:    JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));
        -: 2488:
    #####: 2489:    for (int i = 0; i < ECMA_PROPERTY_PAIR_ITEM_COUNT; i++)
        -: 2490:    {
    #####: 2491:      ecma_property_t *property_p = prop_iter_p->types + i;
        -: 2492:
    #####: 2493:      if (!ECMA_PROPERTY_IS_RAW (*property_p) || (*property_p & ECMA_PROPERTY_FLAG_BUILT_IN))
        -: 2494:      {
    #####: 2495:        continue;
        -: 2496:      }
        -: 2497:
    #####: 2498:      ecma_property_pair_t *prop_pair_p = (ecma_property_pair_t *) prop_iter_p;
        -: 2499:
    #####: 2500:      if (ECMA_PROPERTY_GET_NAME_TYPE (*property_p) == ECMA_DIRECT_STRING_MAGIC
    #####: 2501:          && prop_pair_p->names_cp[i] >= LIT_NON_INTERNAL_MAGIC_STRING__COUNT
    #####: 2502:          && prop_pair_p->names_cp[i] < LIT_MAGIC_STRING__COUNT)
        -: 2503:      {
    #####: 2504:        continue;
        -: 2505:      }
        -: 2506:
    #####: 2507:      ecma_string_t *name_p = ecma_string_from_property_name (*property_p, prop_pair_p->names_cp[i]);
        -: 2508:
    #####: 2509:      if (ecma_string_get_array_index (name_p) != ECMA_STRING_NOT_ARRAY_INDEX)
        -: 2510:      {
    #####: 2511:        if (!(filter & JERRY_PROPERTY_FILTER_EXCLUDE_INTEGER_INDICES))
        -: 2512:        {
    #####: 2513:          *(--array_index_current_p) = ecma_make_string_value (name_p);
    #####: 2514:          continue;
        -: 2515:        }
        -: 2516:      }
        -: 2517:#if JERRY_ESNEXT
    #####: 2518:      else if (ecma_prop_name_is_symbol (name_p))
        -: 2519:      {
    #####: 2520:        if (!(filter & JERRY_PROPERTY_FILTER_EXCLUDE_SYMBOLS) && !(name_p->u.hash & ECMA_SYMBOL_FLAG_PRIVATE_KEY))
        -: 2521:        {
    #####: 2522:          *(--symbol_current_p) = ecma_make_symbol_value (name_p);
    #####: 2523:          continue;
        -: 2524:        }
        -: 2525:      }
        -: 2526:#endif /* JERRY_ESNEXT */
        -: 2527:      else
        -: 2528:      {
    #####: 2529:        if (!(filter & JERRY_PROPERTY_FILTER_EXCLUDE_STRINGS))
        -: 2530:        {
    #####: 2531:          *(--string_current_p) = ecma_make_string_value (name_p);
    #####: 2532:          continue;
        -: 2533:        }
        -: 2534:      }
        -: 2535:
    #####: 2536:      ecma_deref_ecma_string (name_p);
        -: 2537:    }
        -: 2538:
    #####: 2539:    prop_iter_cp = prop_iter_p->next_property_cp;
        -: 2540:  }
        -: 2541:
    #####: 2542:  if (array_index_named_props > 1 || (array_index_named_props == 1 && prop_counter.array_index_named_props > 0))
        -: 2543:  {
    #####: 2544:    uint32_t prev_value = 0;
    #####: 2545:    ecma_value_t *array_index_p = buffer_p + prop_counter.array_index_named_props;
    #####: 2546:    ecma_value_t *array_index_end_p = array_index_p + array_index_named_props;
        -: 2547:
    #####: 2548:    if (prop_counter.array_index_named_props > 0)
        -: 2549:    {
    #####: 2550:      prev_value = ecma_string_get_array_index (ecma_get_string_from_value (array_index_p[-1]));
        -: 2551:    }
        -: 2552:
        -: 2553:    do
        -: 2554:    {
    #####: 2555:      uint32_t value = ecma_string_get_array_index (ecma_get_string_from_value (*array_index_p++));
        -: 2556:
    #####: 2557:      if (value < prev_value)
        -: 2558:      {
    #####: 2559:        uint32_t array_props = prop_counter.array_index_named_props + array_index_named_props;
    #####: 2560:        uint32_t i = (array_props >> 1) - 1;
        -: 2561:
        -: 2562:        do
        -: 2563:        {
    #####: 2564:          ecma_op_object_heap_sort_shift_down (buffer_p, array_props, i);
    #####: 2565:        } while (i-- > 0);
        -: 2566:
    #####: 2567:        i = array_props - 1;
        -: 2568:
        -: 2569:        do
        -: 2570:        {
    #####: 2571:          ecma_value_t tmp = buffer_p[i];
    #####: 2572:          buffer_p[i] = buffer_p[0];
    #####: 2573:          buffer_p[0] = tmp;
        -: 2574:
    #####: 2575:          ecma_op_object_heap_sort_shift_down (buffer_p, i, 0);
    #####: 2576:        } while (--i > 0);
        -: 2577:
    #####: 2578:        break;
        -: 2579:      }
        -: 2580:
    #####: 2581:      prev_value = value;
    #####: 2582:    } while (array_index_p < array_index_end_p);
        -: 2583:  }
        -: 2584:
    #####: 2585:  return prop_names_p;
        -: 2586:} /* ecma_op_object_own_property_keys */
        -: 2587:
        -: 2588:/**
        -: 2589: * EnumerateObjectProperties abstract method
        -: 2590: *
        -: 2591: * See also:
        -: 2592: *          ECMA-262 v11, 13.7.5.15
        -: 2593: *
        -: 2594: * @return NULL - if the Proxy.[[OwnPropertyKeys]] operation raises error
        -: 2595: *         collection of enumerable property names - otherwise
        -: 2596: */
        -: 2597:ecma_collection_t *
    #####: 2598:ecma_op_object_enumerate (ecma_object_t *obj_p) /**< object */
        -: 2599:{
    #####: 2600:  ecma_collection_t *visited_names_p = ecma_new_collection ();
    #####: 2601:  ecma_collection_t *return_names_p = ecma_new_collection ();
        -: 2602:
    #####: 2603:  ecma_ref_object (obj_p);
        -: 2604:
        -: 2605:  while (true)
    #####: 2606:  {
    #####: 2607:    ecma_collection_t *keys = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_EXCLUDE_SYMBOLS);
        -: 2608:
        -: 2609:#if JERRY_ESNEXT
    #####: 2610:    if (JERRY_UNLIKELY (keys == NULL))
        -: 2611:    {
    #####: 2612:      ecma_collection_free (return_names_p);
    #####: 2613:      ecma_collection_free (visited_names_p);
    #####: 2614:      ecma_deref_object (obj_p);
    #####: 2615:      return keys;
        -: 2616:    }
        -: 2617:#endif /* JERRY_ESNEXT */
        -: 2618:
    #####: 2619:    for (uint32_t i = 0; i < keys->item_count; i++)
        -: 2620:    {
    #####: 2621:      ecma_value_t prop_name = keys->buffer_p[i];
    #####: 2622:      ecma_string_t *name_p = ecma_get_prop_name_from_value (prop_name);
        -: 2623:
        -: 2624:#if JERRY_ESNEXT
    #####: 2625:      if (ecma_prop_name_is_symbol (name_p))
        -: 2626:      {
    #####: 2627:        continue;
        -: 2628:      }
        -: 2629:#endif /* JERRY_ESNEXT */
        -: 2630:
    #####: 2631:      ecma_property_descriptor_t prop_desc;
    #####: 2632:      ecma_value_t get_desc = ecma_op_object_get_own_property_descriptor (obj_p, name_p, &prop_desc);
        -: 2633:
    #####: 2634:      if (ECMA_IS_VALUE_ERROR (get_desc))
        -: 2635:      {
    #####: 2636:        ecma_collection_free (keys);
    #####: 2637:        ecma_collection_free (return_names_p);
    #####: 2638:        ecma_collection_free (visited_names_p);
    #####: 2639:        ecma_deref_object (obj_p);
    #####: 2640:        return NULL;
        -: 2641:      }
        -: 2642:
    #####: 2643:      if (ecma_is_value_true (get_desc))
        -: 2644:      {
    #####: 2645:        bool is_enumerable = (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE) != 0;
    #####: 2646:        ecma_free_property_descriptor (&prop_desc);
        -: 2647:
    #####: 2648:        if (ecma_collection_has_string_value (visited_names_p, name_p)
    #####: 2649:            || ecma_collection_has_string_value (return_names_p, name_p))
        -: 2650:        {
    #####: 2651:          continue;
        -: 2652:        }
        -: 2653:
    #####: 2654:        ecma_ref_ecma_string (name_p);
        -: 2655:
    #####: 2656:        if (is_enumerable)
        -: 2657:        {
    #####: 2658:          ecma_collection_push_back (return_names_p, prop_name);
        -: 2659:        }
        -: 2660:        else
        -: 2661:        {
    #####: 2662:          ecma_collection_push_back (visited_names_p, prop_name);
        -: 2663:        }
        -: 2664:      }
        -: 2665:    }
        -: 2666:
    #####: 2667:    ecma_collection_free (keys);
        -: 2668:
        -: 2669:    /* Query the prototype. */
    #####: 2670:    ecma_object_t *proto_p = ecma_op_object_get_prototype_of (obj_p);
    #####: 2671:    ecma_deref_object (obj_p);
        -: 2672:
    #####: 2673:    if (proto_p == NULL)
        -: 2674:    {
    #####: 2675:      break;
        -: 2676:    }
    #####: 2677:    else if (JERRY_UNLIKELY (proto_p == ECMA_OBJECT_POINTER_ERROR))
        -: 2678:    {
    #####: 2679:      ecma_collection_free (return_names_p);
    #####: 2680:      ecma_collection_free (visited_names_p);
    #####: 2681:      return NULL;
        -: 2682:    }
        -: 2683:
        -: 2684:    /* Advance up on prototype chain. */
    #####: 2685:    obj_p = proto_p;
        -: 2686:  }
        -: 2687:
    #####: 2688:  ecma_collection_free (visited_names_p);
        -: 2689:
    #####: 2690:  return return_names_p;
        -: 2691:} /* ecma_op_object_enumerate */
        -: 2692:
        -: 2693:#ifndef JERRY_NDEBUG
        -: 2694:
        -: 2695:/**
        -: 2696: * Check if passed object is the instance of specified built-in.
        -: 2697: *
        -: 2698: * @return true  - if the object is instance of the specified built-in
        -: 2699: *         false - otherwise
        -: 2700: */
        -: 2701:static bool
    #####: 2702:ecma_builtin_is (ecma_object_t *object_p, /**< pointer to an object */
        -: 2703:                 ecma_builtin_id_t builtin_id) /**< id of built-in to check on */
        -: 2704:{
    #####: 2705:  JERRY_ASSERT (object_p != NULL && !ecma_is_lexical_environment (object_p));
    #####: 2706:  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);
        -: 2707:
    #####: 2708:  ecma_object_type_t type = ecma_get_object_type (object_p);
        -: 2709:
    #####: 2710:  switch (type)
        -: 2711:  {
    #####: 2712:    case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:
        -: 2713:    case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:
        -: 2714:    {
    #####: 2715:      ecma_extended_object_t *built_in_object_p = (ecma_extended_object_t *) object_p;
        -: 2716:
    #####: 2717:      return (built_in_object_p->u.built_in.id == builtin_id && built_in_object_p->u.built_in.routine_id == 0);
        -: 2718:    }
    #####: 2719:    case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:
        -: 2720:    case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:
        -: 2721:    {
    #####: 2722:      ecma_extended_built_in_object_t *extended_built_in_object_p = (ecma_extended_built_in_object_t *) object_p;
        -: 2723:
    #####: 2724:      return (extended_built_in_object_p->built_in.id == builtin_id
    #####: 2725:              && extended_built_in_object_p->built_in.routine_id == 0);
        -: 2726:    }
    #####: 2727:    default:
        -: 2728:    {
    #####: 2729:      return false;
        -: 2730:    }
        -: 2731:  }
        -: 2732:} /* ecma_builtin_is */
        -: 2733:
        -: 2734:#endif /* !JERRY_NDEBUG */
        -: 2735:
        -: 2736:/**
        -: 2737: * The function is used in the assert of ecma_object_get_class_name
        -: 2738: *
        -: 2739: * @return true  - if class name is an object
        -: 2740: *         false - otherwise
        -: 2741: */
        -: 2742:static inline bool
    #####: 2743:ecma_object_check_class_name_is_object (ecma_object_t *obj_p) /**< object */
        -: 2744:{
        -: 2745:#ifndef JERRY_NDEBUG
    #####: 2746:  return (ecma_builtin_is_global (obj_p)
        -: 2747:#if JERRY_BUILTIN_TYPEDARRAY
    #####: 2748:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_ARRAYBUFFER_PROTOTYPE)
        -: 2749:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
    #####: 2750:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_SHARED_ARRAYBUFFER_PROTOTYPE)
        -: 2751:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
    #####: 2752:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_TYPEDARRAY_PROTOTYPE)
    #####: 2753:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_INT8ARRAY_PROTOTYPE)
    #####: 2754:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_UINT8ARRAY_PROTOTYPE)
    #####: 2755:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_INT16ARRAY_PROTOTYPE)
    #####: 2756:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_UINT16ARRAY_PROTOTYPE)
    #####: 2757:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_INT32ARRAY_PROTOTYPE)
    #####: 2758:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_UINT32ARRAY_PROTOTYPE)
    #####: 2759:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_FLOAT32ARRAY_PROTOTYPE)
    #####: 2760:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_UINT8CLAMPEDARRAY_PROTOTYPE)
        -: 2761:#if JERRY_NUMBER_TYPE_FLOAT64
    #####: 2762:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_FLOAT64ARRAY_PROTOTYPE)
        -: 2763:#endif /* JERRY_NUMBER_TYPE_FLOAT64 */
        -: 2764:#if JERRY_BUILTIN_BIGINT
    #####: 2765:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_BIGINT64ARRAY_PROTOTYPE)
    #####: 2766:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_BIGUINT64ARRAY_PROTOTYPE)
        -: 2767:#endif /* JERRY_BUILTIN_BIGINT */
        -: 2768:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        -: 2769:#if JERRY_ESNEXT
    #####: 2770:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_ARRAY_PROTOTYPE_UNSCOPABLES)
    #####: 2771:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_ARRAY_ITERATOR_PROTOTYPE)
    #####: 2772:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_ITERATOR_PROTOTYPE)
    #####: 2773:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_STRING_ITERATOR_PROTOTYPE)
    #####: 2774:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_REGEXP_STRING_ITERATOR_PROTOTYPE)
    #####: 2775:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_EVAL_ERROR_PROTOTYPE)
    #####: 2776:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_RANGE_ERROR_PROTOTYPE)
    #####: 2777:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_REFERENCE_ERROR_PROTOTYPE)
    #####: 2778:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_SYNTAX_ERROR_PROTOTYPE)
    #####: 2779:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_GENERATOR_PROTOTYPE)
    #####: 2780:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_TYPE_ERROR_PROTOTYPE)
    #####: 2781:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_AGGREGATE_ERROR_PROTOTYPE)
    #####: 2782:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_URI_ERROR_PROTOTYPE)
    #####: 2783:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_ERROR_PROTOTYPE)
    #####: 2784:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_DATE_PROTOTYPE)
    #####: 2785:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_REGEXP_PROTOTYPE)
    #####: 2786:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_SYMBOL_PROTOTYPE)
    #####: 2787:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_ASYNC_FUNCTION_PROTOTYPE)
    #####: 2788:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_PROMISE_PROTOTYPE)
        -: 2789:#endif /* JERRY_ESNEXT */
        -: 2790:#if JERRY_BUILTIN_CONTAINER
    #####: 2791:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_MAP_PROTOTYPE)
    #####: 2792:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_SET_PROTOTYPE)
    #####: 2793:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_WEAKMAP_PROTOTYPE)
    #####: 2794:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_WEAKSET_PROTOTYPE)
        -: 2795:#if JERRY_ESNEXT
    #####: 2796:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_MAP_ITERATOR_PROTOTYPE)
    #####: 2797:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_SET_ITERATOR_PROTOTYPE)
        -: 2798:#endif /* JERRY_ESNEXT */
        -: 2799:#endif /* JERRY_BUILTIN_CONTAINER */
        -: 2800:#if JERRY_BUILTIN_WEAKREF
    #####: 2801:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_WEAKREF_PROTOTYPE)
        -: 2802:#endif /* JERRY_BUILTIN_WEAKREF */
        -: 2803:#if JERRY_BUILTIN_DATAVIEW
    #####: 2804:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_DATAVIEW_PROTOTYPE)
        -: 2805:#endif /* JERRY_BUILTIN_DATAVIEW */
    #####: 2806:          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_OBJECT_PROTOTYPE));
        -: 2807:#else /* JERRY_NDEBUG */
        -: 2808:  JERRY_UNUSED (obj_p);
        -: 2809:  return true;
        -: 2810:#endif /* !JERRY_NDEBUG */
        -: 2811:} /* ecma_object_check_class_name_is_object */
        -: 2812:
        -: 2813:/**
        -: 2814: * Used by ecma_object_get_class_name to get the magic string id of class objects
        -: 2815: */
        -: 2816:static const uint16_t ecma_class_object_magic_string_id[] = {
        -: 2817:  /* These objects require custom property resolving. */
        -: 2818:  LIT_MAGIC_STRING_STRING_UL, /**< magic string id of ECMA_OBJECT_CLASS_STRING */
        -: 2819:  LIT_MAGIC_STRING_ARGUMENTS_UL, /**< magic string id of ECMA_OBJECT_CLASS_ARGUMENTS */
        -: 2820:#if JERRY_BUILTIN_TYPEDARRAY
        -: 2821:  LIT_MAGIC_STRING__EMPTY, /**< ECMA_OBJECT_CLASS_TYPEDARRAY needs special resolver */
        -: 2822:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        -: 2823:#if JERRY_MODULE_SYSTEM
        -: 2824:  LIT_MAGIC_STRING_MODULE_UL, /**< magic string id of ECMA_OBJECT_CLASS_MODULE_NAMESPACE */
        -: 2825:#endif /* JERRY_MODULE_SYSTEM */
        -: 2826:
        -: 2827:/* These objects are marked by Garbage Collector. */
        -: 2828:#if JERRY_ESNEXT
        -: 2829:  LIT_MAGIC_STRING_GENERATOR_UL, /**< magic string id of ECMA_OBJECT_CLASS_GENERATOR */
        -: 2830:  LIT_MAGIC_STRING_ASYNC_GENERATOR_UL, /**< magic string id of ECMA_OBJECT_CLASS_ASYNC_GENERATOR */
        -: 2831:  LIT_MAGIC_STRING_ARRAY_ITERATOR_UL, /**< magic string id of ECMA_OBJECT_CLASS_ARRAY_ITERATOR */
        -: 2832:  LIT_MAGIC_STRING_SET_ITERATOR_UL, /**< magic string id of ECMA_OBJECT_CLASS_SET_ITERATOR */
        -: 2833:  LIT_MAGIC_STRING_MAP_ITERATOR_UL, /**< magic string id of ECMA_OBJECT_CLASS_MAP_ITERATOR */
        -: 2834:#if JERRY_BUILTIN_REGEXP
        -: 2835:  LIT_MAGIC_STRING_REGEXP_STRING_ITERATOR_UL, /**< magic string id of ECMA_OBJECT_CLASS_REGEXP_STRING_ITERATOR */
        -: 2836:#endif /* JERRY_BUILTIN_REGEXP */
        -: 2837:#endif /* JERRY_ESNEXT */
        -: 2838:#if JERRY_MODULE_SYSTEM
        -: 2839:  LIT_MAGIC_STRING_MODULE_UL, /**< magic string id of ECMA_OBJECT_CLASS_MODULE */
        -: 2840:#endif /* JERRY_MODULE_SYSTEM */
        -: 2841:#if JERRY_ESNEXT
        -: 2842:  LIT_MAGIC_STRING_PROMISE_UL, /**< magic string id of ECMA_OBJECT_CLASS_PROMISE */
        -: 2843:  LIT_MAGIC_STRING_OBJECT_UL, /**< magic string id of ECMA_OBJECT_CLASS_PROMISE_CAPABILITY */
        -: 2844:  LIT_MAGIC_STRING_OBJECT_UL, /**< magic string id of ECMA_OBJECT_CLASS_ASYNC_FROM_SYNC_ITERATOR */
        -: 2845:#endif /* JERRY_ESNEXT */
        -: 2846:#if JERRY_BUILTIN_DATAVIEW
        -: 2847:  LIT_MAGIC_STRING_DATAVIEW_UL, /**< magic string id of ECMA_OBJECT_CLASS_DATAVIEW */
        -: 2848:#endif /* JERRY_BUILTIN_DATAVIEW */
        -: 2849:#if JERRY_BUILTIN_CONTAINER
        -: 2850:  LIT_MAGIC_STRING__EMPTY, /**< magic string id of ECMA_OBJECT_CLASS_CONTAINER needs special resolver */
        -: 2851:#endif /* JERRY_BUILTIN_CONTAINER */
        -: 2852:
        -: 2853:  /* Normal objects. */
        -: 2854:  LIT_MAGIC_STRING_BOOLEAN_UL, /**< magic string id of ECMA_OBJECT_CLASS_BOOLEAN */
        -: 2855:  LIT_MAGIC_STRING_NUMBER_UL, /**< magic string id of ECMA_OBJECT_CLASS_NUMBER */
        -: 2856:  LIT_MAGIC_STRING_ERROR_UL, /**< magic string id of ECMA_OBJECT_CLASS_ERROR */
        -: 2857:  LIT_MAGIC_STRING_OBJECT_UL, /**< magic string id of ECMA_OBJECT_CLASS_INTERNAL_OBJECT */
        -: 2858:#if JERRY_PARSER
        -: 2859:  LIT_MAGIC_STRING_SCRIPT_UL, /**< magic string id of ECMA_OBJECT_CLASS_SCRIPT */
        -: 2860:#endif /* JERRY_PARSER */
        -: 2861:#if JERRY_BUILTIN_DATE
        -: 2862:  LIT_MAGIC_STRING_DATE_UL, /**< magic string id of ECMA_OBJECT_CLASS_DATE */
        -: 2863:#endif /* JERRY_BUILTIN_DATE */
        -: 2864:#if JERRY_BUILTIN_REGEXP
        -: 2865:  LIT_MAGIC_STRING_REGEXP_UL, /**< magic string id of ECMA_OBJECT_CLASS_REGEXP */
        -: 2866:#endif /* JERRY_BUILTIN_REGEXP */
        -: 2867:#if JERRY_ESNEXT
        -: 2868:  LIT_MAGIC_STRING_SYMBOL_UL, /**< magic string id of ECMA_OBJECT_CLASS_SYMBOL */
        -: 2869:  LIT_MAGIC_STRING_STRING_ITERATOR_UL, /**< magic string id of ECMA_OBJECT_CLASS_STRING_ITERATOR */
        -: 2870:#endif /* JERRY_ESNEXT */
        -: 2871:#if JERRY_BUILTIN_TYPEDARRAY
        -: 2872:  LIT_MAGIC_STRING_ARRAY_BUFFER_UL, /**< magic string id of ECMA_OBJECT_CLASS_ARRAY_BUFFER */
        -: 2873:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        -: 2874:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
        -: 2875:  LIT_MAGIC_STRING_SHARED_ARRAY_BUFFER_UL, /**< magic string id of ECMA_OBJECT_CLASS_SHAREDARRAY_BUFFER */
        -: 2876:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -: 2877:#if JERRY_BUILTIN_BIGINT
        -: 2878:  LIT_MAGIC_STRING_BIGINT_UL, /**< magic string id of ECMA_OBJECT_CLASS_BIGINT */
        -: 2879:#endif /* JERRY_BUILTIN_BIGINT */
        -: 2880:#if JERRY_BUILTIN_WEAKREF
        -: 2881:  LIT_MAGIC_STRING_WEAKREF_UL, /**< magic string id of ECMA_OBJECT_CLASS_WEAKREF */
        -: 2882:#endif /* JERRY_BUILTIN_WEAKREF */
        -: 2883:};
        -: 2884:
        -: 2885:JERRY_STATIC_ASSERT (sizeof (ecma_class_object_magic_string_id) == ECMA_OBJECT_CLASS__MAX * sizeof (uint16_t),
        -: 2886:                     ecma_class_object_magic_string_id_must_have_object_class_max_elements);
        -: 2887:
        -: 2888:/**
        -: 2889: * Get [[Class]] string of specified object
        -: 2890: *
        -: 2891: * @return class name magic string
        -: 2892: */
        -: 2893:lit_magic_string_id_t
    #####: 2894:ecma_object_get_class_name (ecma_object_t *obj_p) /**< object */
        -: 2895:{
    #####: 2896:  ecma_object_type_t type = ecma_get_object_type (obj_p);
        -: 2897:
    #####: 2898:  switch (type)
        -: 2899:  {
    #####: 2900:    case ECMA_OBJECT_TYPE_ARRAY:
        -: 2901:    case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:
        -: 2902:    {
    #####: 2903:      return LIT_MAGIC_STRING_ARRAY_UL;
        -: 2904:    }
    #####: 2905:    case ECMA_OBJECT_TYPE_CLASS:
        -: 2906:    case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:
        -: 2907:    {
    #####: 2908:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -: 2909:
    #####: 2910:      switch (ext_object_p->u.cls.type)
        -: 2911:      {
        -: 2912:#if JERRY_BUILTIN_TYPEDARRAY
    #####: 2913:        case ECMA_OBJECT_CLASS_TYPEDARRAY:
        -: 2914:        {
    #####: 2915:          return ecma_get_typedarray_magic_string_id (ext_object_p->u.cls.u1.typedarray_type);
        -: 2916:        }
        -: 2917:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        -: 2918:#if JERRY_BUILTIN_CONTAINER
    #####: 2919:        case ECMA_OBJECT_CLASS_CONTAINER:
        -: 2920:        {
    #####: 2921:          return (lit_magic_string_id_t) ext_object_p->u.cls.u2.container_id;
        -: 2922:        }
        -: 2923:#endif /* JERRY_BUILTIN_CONTAINER */
    #####: 2924:        default:
        -: 2925:        {
    #####: 2926:          break;
        -: 2927:        }
        -: 2928:      }
        -: 2929:
    #####: 2930:      JERRY_ASSERT (ext_object_p->u.cls.type < ECMA_OBJECT_CLASS__MAX);
    #####: 2931:      JERRY_ASSERT (ecma_class_object_magic_string_id[ext_object_p->u.cls.type] != LIT_MAGIC_STRING__EMPTY);
        -: 2932:
    #####: 2933:      return (lit_magic_string_id_t) ecma_class_object_magic_string_id[ext_object_p->u.cls.type];
        -: 2934:    }
    #####: 2935:    case ECMA_OBJECT_TYPE_FUNCTION:
        -: 2936:    case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:
        -: 2937:    case ECMA_OBJECT_TYPE_BOUND_FUNCTION:
        -: 2938:    case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:
        -: 2939:    {
    #####: 2940:      return LIT_MAGIC_STRING_FUNCTION_UL;
        -: 2941:    }
        -: 2942:#if JERRY_BUILTIN_PROXY
    #####: 2943:    case ECMA_OBJECT_TYPE_PROXY:
        -: 2944:    {
    #####: 2945:      ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 2946:
    #####: 2947:      if (!ecma_is_value_null (proxy_obj_p->target) && ecma_is_value_object (proxy_obj_p->target))
        -: 2948:      {
    #####: 2949:        ecma_object_t *target_obj_p = ecma_get_object_from_value (proxy_obj_p->target);
    #####: 2950:        return ecma_object_get_class_name (target_obj_p);
        -: 2951:      }
    #####: 2952:      return LIT_MAGIC_STRING_OBJECT_UL;
        -: 2953:    }
        -: 2954:#endif /* JERRY_BUILTIN_PROXY */
    #####: 2955:    case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:
        -: 2956:    {
    #####: 2957:      ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;
        -: 2958:
    #####: 2959:      switch (ext_obj_p->u.built_in.id)
        -: 2960:      {
        -: 2961:#if JERRY_BUILTIN_MATH
    #####: 2962:        case ECMA_BUILTIN_ID_MATH:
        -: 2963:        {
    #####: 2964:          return LIT_MAGIC_STRING_MATH_UL;
        -: 2965:        }
        -: 2966:#endif /* JERRY_BUILTIN_MATH */
        -: 2967:#if JERRY_BUILTIN_REFLECT
    #####: 2968:        case ECMA_BUILTIN_ID_REFLECT:
        -: 2969:        {
    #####: 2970:          return LIT_MAGIC_STRING_REFLECT_UL;
        -: 2971:        }
        -: 2972:#endif /* JERRY_BUILTIN_REFLECT */
        -: 2973:#if JERRY_ESNEXT
    #####: 2974:        case ECMA_BUILTIN_ID_GENERATOR:
        -: 2975:        {
    #####: 2976:          return LIT_MAGIC_STRING_GENERATOR_UL;
        -: 2977:        }
    #####: 2978:        case ECMA_BUILTIN_ID_ASYNC_GENERATOR:
        -: 2979:        {
    #####: 2980:          return LIT_MAGIC_STRING_ASYNC_GENERATOR_UL;
        -: 2981:        }
        -: 2982:#endif /* JERRY_ESNEXT */
        -: 2983:#if JERRY_BUILTIN_JSON
    #####: 2984:        case ECMA_BUILTIN_ID_JSON:
        -: 2985:        {
    #####: 2986:          return LIT_MAGIC_STRING_JSON_U;
        -: 2987:        }
        -: 2988:#endif /* JERRY_BUILTIN_JSON */
        -: 2989:#if !JERRY_ESNEXT
        -: 2990:#if JERRY_BUILTIN_ERRORS
        -: 2991:        case ECMA_BUILTIN_ID_EVAL_ERROR_PROTOTYPE:
        -: 2992:        case ECMA_BUILTIN_ID_RANGE_ERROR_PROTOTYPE:
        -: 2993:        case ECMA_BUILTIN_ID_REFERENCE_ERROR_PROTOTYPE:
        -: 2994:        case ECMA_BUILTIN_ID_SYNTAX_ERROR_PROTOTYPE:
        -: 2995:        case ECMA_BUILTIN_ID_TYPE_ERROR_PROTOTYPE:
        -: 2996:        case ECMA_BUILTIN_ID_URI_ERROR_PROTOTYPE:
        -: 2997:#endif /* JERRY_BUILTIN_ERRORS */
        -: 2998:        case ECMA_BUILTIN_ID_ERROR_PROTOTYPE:
        -: 2999:        {
        -: 3000:          return LIT_MAGIC_STRING_ERROR_UL;
        -: 3001:        }
        -: 3002:#endif /* !JERRY_ESNEXT */
    #####: 3003:        default:
        -: 3004:        {
    #####: 3005:          break;
        -: 3006:        }
        -: 3007:      }
        -: 3008:
    #####: 3009:      JERRY_ASSERT (ecma_object_check_class_name_is_object (obj_p));
    #####: 3010:      return LIT_MAGIC_STRING_OBJECT_UL;
        -: 3011:    }
    #####: 3012:    default:
        -: 3013:    {
    #####: 3014:      JERRY_ASSERT (type == ECMA_OBJECT_TYPE_GENERAL || type == ECMA_OBJECT_TYPE_PROXY);
        -: 3015:
    #####: 3016:      return LIT_MAGIC_STRING_OBJECT_UL;
        -: 3017:    }
        -: 3018:  }
        -: 3019:} /* ecma_object_get_class_name */
        -: 3020:
        -: 3021:#if JERRY_BUILTIN_REGEXP
        -: 3022:/**
        -: 3023: * Checks if the given argument has [[RegExpMatcher]] internal slot
        -: 3024: *
        -: 3025: * @return true - if the given argument is a regexp
        -: 3026: *         false - otherwise
        -: 3027: */
        -: 3028:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####: 3029:ecma_object_is_regexp_object (ecma_value_t arg) /**< argument */
        -: 3030:{
    #####: 3031:  return (ecma_is_value_object (arg)
    #####: 3032:          && ecma_object_class_is (ecma_get_object_from_value (arg), ECMA_OBJECT_CLASS_REGEXP));
        -: 3033:} /* ecma_object_is_regexp_object */
        -: 3034:#endif /* JERRY_BUILTIN_REGEXP */
        -: 3035:
        -: 3036:#if JERRY_ESNEXT
        -: 3037:/**
        -: 3038: * Object's IsConcatSpreadable operation, used for Array.prototype.concat
        -: 3039: * It checks the argument's [Symbol.isConcatSpreadable] property value
        -: 3040: *
        -: 3041: * See also:
        -: 3042: *          ECMA-262 v6, 22.1.3.1.1;
        -: 3043: *
        -: 3044: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 3045: *         ECMA_VALUE_TRUE - if the argument is concatSpreadable
        -: 3046: *         ECMA_VALUE_FALSE - otherwise
        -: 3047: */
        -: 3048:ecma_value_t
    #####: 3049:ecma_op_is_concat_spreadable (ecma_value_t arg) /**< argument */
        -: 3050:{
    #####: 3051:  if (!ecma_is_value_object (arg))
        -: 3052:  {
    #####: 3053:    return ECMA_VALUE_FALSE;
        -: 3054:  }
        -: 3055:
    #####: 3056:  ecma_value_t spreadable =
    #####: 3057:    ecma_op_object_get_by_symbol_id (ecma_get_object_from_value (arg), LIT_GLOBAL_SYMBOL_IS_CONCAT_SPREADABLE);
        -: 3058:
    #####: 3059:  if (ECMA_IS_VALUE_ERROR (spreadable))
        -: 3060:  {
    #####: 3061:    return spreadable;
        -: 3062:  }
        -: 3063:
    #####: 3064:  if (!ecma_is_value_undefined (spreadable))
        -: 3065:  {
    #####: 3066:    const bool to_bool = ecma_op_to_boolean (spreadable);
    #####: 3067:    ecma_free_value (spreadable);
    #####: 3068:    return ecma_make_boolean_value (to_bool);
        -: 3069:  }
        -: 3070:
    #####: 3071:  return ecma_is_value_array (arg);
        -: 3072:} /* ecma_op_is_concat_spreadable */
        -: 3073:
        -: 3074:/**
        -: 3075: * IsRegExp operation
        -: 3076: *
        -: 3077: * See also:
        -: 3078: *          ECMA-262 v6, 22.1.3.1.1;
        -: 3079: *
        -: 3080: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 3081: *         ECMA_VALUE_TRUE - if the argument is regexp
        -: 3082: *         ECMA_VALUE_FALSE - otherwise
        -: 3083: */
        -: 3084:ecma_value_t
    #####: 3085:ecma_op_is_regexp (ecma_value_t arg) /**< argument */
        -: 3086:{
    #####: 3087:  if (!ecma_is_value_object (arg))
        -: 3088:  {
    #####: 3089:    return ECMA_VALUE_FALSE;
        -: 3090:  }
        -: 3091:
    #####: 3092:  ecma_value_t is_regexp = ecma_op_object_get_by_symbol_id (ecma_get_object_from_value (arg), LIT_GLOBAL_SYMBOL_MATCH);
        -: 3093:
    #####: 3094:  if (ECMA_IS_VALUE_ERROR (is_regexp))
        -: 3095:  {
    #####: 3096:    return is_regexp;
        -: 3097:  }
        -: 3098:
    #####: 3099:  if (!ecma_is_value_undefined (is_regexp))
        -: 3100:  {
    #####: 3101:    const bool to_bool = ecma_op_to_boolean (is_regexp);
    #####: 3102:    ecma_free_value (is_regexp);
    #####: 3103:    return ecma_make_boolean_value (to_bool);
        -: 3104:  }
        -: 3105:
    #####: 3106:  return ecma_make_boolean_value (ecma_object_is_regexp_object (arg));
        -: 3107:} /* ecma_op_is_regexp */
        -: 3108:
        -: 3109:/**
        -: 3110: * SpeciesConstructor operation
        -: 3111: * See also:
        -: 3112: *          ECMA-262 v6, 7.3.20;
        -: 3113: *
        -: 3114: * @return ecma_value
        -: 3115: *         returned value must be freed with ecma_free_value
        -: 3116: */
        -: 3117:ecma_value_t
    #####: 3118:ecma_op_species_constructor (ecma_object_t *this_value, /**< This Value */
        -: 3119:                             ecma_builtin_id_t default_constructor_id) /**< Builtin ID of default constructor */
        -: 3120:{
    #####: 3121:  ecma_object_t *default_constructor_p = ecma_builtin_get (default_constructor_id);
    #####: 3122:  ecma_value_t constructor = ecma_op_object_get_by_magic_id (this_value, LIT_MAGIC_STRING_CONSTRUCTOR);
    #####: 3123:  if (ECMA_IS_VALUE_ERROR (constructor))
        -: 3124:  {
    #####: 3125:    return constructor;
        -: 3126:  }
        -: 3127:
    #####: 3128:  if (ecma_is_value_undefined (constructor))
        -: 3129:  {
    #####: 3130:    ecma_ref_object (default_constructor_p);
    #####: 3131:    return ecma_make_object_value (default_constructor_p);
        -: 3132:  }
        -: 3133:
    #####: 3134:  if (!ecma_is_value_object (constructor))
        -: 3135:  {
    #####: 3136:    ecma_free_value (constructor);
    #####: 3137:    return ecma_raise_type_error (ECMA_ERR_CONSTRUCTOR_NOT_AN_OBJECT);
        -: 3138:  }
        -: 3139:
    #####: 3140:  ecma_object_t *ctor_object_p = ecma_get_object_from_value (constructor);
    #####: 3141:  ecma_value_t species = ecma_op_object_get_by_symbol_id (ctor_object_p, LIT_GLOBAL_SYMBOL_SPECIES);
    #####: 3142:  ecma_deref_object (ctor_object_p);
        -: 3143:
    #####: 3144:  if (ECMA_IS_VALUE_ERROR (species))
        -: 3145:  {
    #####: 3146:    return species;
        -: 3147:  }
        -: 3148:
    #####: 3149:  if (ecma_is_value_undefined (species) || ecma_is_value_null (species))
        -: 3150:  {
    #####: 3151:    ecma_ref_object (default_constructor_p);
    #####: 3152:    return ecma_make_object_value (default_constructor_p);
        -: 3153:  }
        -: 3154:
    #####: 3155:  if (!ecma_is_constructor (species))
        -: 3156:  {
    #####: 3157:    ecma_free_value (species);
    #####: 3158:    return ecma_raise_type_error (ECMA_ERR_SPECIES_MUST_BE_A_CONSTRUCTOR);
        -: 3159:  }
        -: 3160:
    #####: 3161:  return species;
        -: 3162:} /* ecma_op_species_constructor */
        -: 3163:
        -: 3164:/**
        -: 3165: * 7.3.18 Abstract operation Invoke when property name is a magic string
        -: 3166: *
        -: 3167: * @return ecma_value result of the invoked function or raised error
        -: 3168: *         note: returned value must be freed with ecma_free_value
        -: 3169: */
        -: 3170:extern inline ecma_value_t JERRY_ATTR_ALWAYS_INLINE
    #####: 3171:ecma_op_invoke_by_symbol_id (ecma_value_t object, /**< Object value */
        -: 3172:                             lit_magic_string_id_t symbol_id, /**< Symbol ID */
        -: 3173:                             ecma_value_t *args_p, /**< Argument list */
        -: 3174:                             uint32_t args_len) /**< Argument list length */
        -: 3175:{
    #####: 3176:  ecma_string_t *symbol_p = ecma_op_get_global_symbol (symbol_id);
    #####: 3177:  ecma_value_t ret_value = ecma_op_invoke (object, symbol_p, args_p, args_len);
    #####: 3178:  ecma_deref_ecma_string (symbol_p);
        -: 3179:
    #####: 3180:  return ret_value;
        -: 3181:} /* ecma_op_invoke_by_symbol_id */
        -: 3182:#endif /* JERRY_ESNEXT */
        -: 3183:
        -: 3184:/**
        -: 3185: * 7.3.18 Abstract operation Invoke when property name is a magic string
        -: 3186: *
        -: 3187: * @return ecma_value result of the invoked function or raised error
        -: 3188: *         note: returned value must be freed with ecma_free_value
        -: 3189: */
        -: 3190:extern inline ecma_value_t JERRY_ATTR_ALWAYS_INLINE
    #####: 3191:ecma_op_invoke_by_magic_id (ecma_value_t object, /**< Object value */
        -: 3192:                            lit_magic_string_id_t magic_string_id, /**< Magic string ID */
        -: 3193:                            ecma_value_t *args_p, /**< Argument list */
        -: 3194:                            uint32_t args_len) /**< Argument list length */
        -: 3195:{
    #####: 3196:  return ecma_op_invoke (object, ecma_get_magic_string (magic_string_id), args_p, args_len);
        -: 3197:} /* ecma_op_invoke_by_magic_id */
        -: 3198:
        -: 3199:/**
        -: 3200: * 7.3.18 Abstract operation Invoke
        -: 3201: *
        -: 3202: * @return ecma_value result of the invoked function or raised error
        -: 3203: *         note: returned value must be freed with ecma_free_value
        -: 3204: */
        -: 3205:ecma_value_t
    #####: 3206:ecma_op_invoke (ecma_value_t object, /**< Object value */
        -: 3207:                ecma_string_t *property_name_p, /**< Property name */
        -: 3208:                ecma_value_t *args_p, /**< Argument list */
        -: 3209:                uint32_t args_len) /**< Argument list length */
        -: 3210:{
        -: 3211:  /* 3. */
    #####: 3212:  ecma_value_t object_value = ecma_op_to_object (object);
    #####: 3213:  if (ECMA_IS_VALUE_ERROR (object_value))
        -: 3214:  {
    #####: 3215:    return object_value;
        -: 3216:  }
        -: 3217:
    #####: 3218:  ecma_object_t *object_p = ecma_get_object_from_value (object_value);
        -: 3219:
        -: 3220:#if JERRY_ESNEXT
    #####: 3221:  ecma_value_t this_arg = object;
        -: 3222:#else /* !JERRY_ESNEXT */
    #####: 3223:  ecma_value_t this_arg = object_value;
        -: 3224:#endif /* JERRY_ESNEXT */
        -: 3225:
    #####: 3226:  ecma_value_t func = ecma_op_object_get_with_receiver (object_p, property_name_p, this_arg);
        -: 3227:
    #####: 3228:  if (ECMA_IS_VALUE_ERROR (func))
        -: 3229:  {
    #####: 3230:    ecma_deref_object (object_p);
    #####: 3231:    return func;
        -: 3232:  }
        -: 3233:
        -: 3234:  /* 4. */
    #####: 3235:  ecma_value_t call_result = ecma_op_function_validated_call (func, this_arg, args_p, args_len);
    #####: 3236:  ecma_free_value (func);
        -: 3237:
    #####: 3238:  ecma_deref_object (object_p);
        -: 3239:
    #####: 3240:  return call_result;
        -: 3241:} /* ecma_op_invoke */
        -: 3242:
        -: 3243:/**
        -: 3244: * Ordinary object [[GetPrototypeOf]] operation
        -: 3245: *
        -: 3246: * See also:
        -: 3247: *          ECMAScript v6, 9.1.1
        -: 3248: *
        -: 3249: * @return the value of the [[Prototype]] internal slot of the given object.
        -: 3250: */
        -: 3251:extern inline jmem_cpointer_t JERRY_ATTR_ALWAYS_INLINE
    #####: 3252:ecma_op_ordinary_object_get_prototype_of (ecma_object_t *obj_p) /**< object */
        -: 3253:{
       14: 3254:  JERRY_ASSERT (!ecma_is_lexical_environment (obj_p));
       14: 3255:  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (obj_p));
        -: 3256:
       14: 3257:  return obj_p->u2.prototype_cp;
        -: 3258:} /* ecma_op_ordinary_object_get_prototype_of */
        -: 3259:
        -: 3260:/**
        -: 3261: * Ordinary object [[SetPrototypeOf]] operation
        -: 3262: *
        -: 3263: * See also:
        -: 3264: *          ECMAScript v6, 9.1.2
        -: 3265: *
        -: 3266: * @return ECMA_VALUE_FALSE - if the operation fails
        -: 3267: *         ECMA_VALUE_TRUE - otherwise
        -: 3268: */
        -: 3269:extern inline ecma_value_t JERRY_ATTR_ALWAYS_INLINE
    #####: 3270:ecma_op_ordinary_object_set_prototype_of (ecma_object_t *obj_p, /**< base object */
        -: 3271:                                          ecma_value_t proto) /**< prototype object */
        -: 3272:{
    #####: 3273:  JERRY_ASSERT (!ecma_is_lexical_environment (obj_p));
    #####: 3274:  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (obj_p));
        -: 3275:
        -: 3276:  /* 1. */
    #####: 3277:  JERRY_ASSERT (ecma_is_value_object (proto) || ecma_is_value_null (proto));
        -: 3278:
        -: 3279:  /* 3. */
    #####: 3280:  ecma_object_t *current_proto_p = ECMA_GET_POINTER (ecma_object_t, ecma_op_ordinary_object_get_prototype_of (obj_p));
    #####: 3281:  ecma_object_t *new_proto_p = ecma_is_value_null (proto) ? NULL : ecma_get_object_from_value (proto);
        -: 3282:
        -: 3283:  /* 4. */
    #####: 3284:  if (new_proto_p == current_proto_p)
        -: 3285:  {
    #####: 3286:    return ECMA_VALUE_TRUE;
        -: 3287:  }
        -: 3288:
        -: 3289:  /* 2 - 5. */
    #####: 3290:  if (!ecma_op_ordinary_object_is_extensible (obj_p))
        -: 3291:  {
    #####: 3292:    return ECMA_VALUE_FALSE;
        -: 3293:  }
        -: 3294:
        -: 3295:  /**
        -: 3296:   * When the prototype of a fast array changes, it is required to convert the
        -: 3297:   * array to a "normal" array. This ensures that all [[Get]]/[[Set]]/etc.
        -: 3298:   * calls works as expected.
        -: 3299:   */
    #####: 3300:  if (ecma_op_object_is_fast_array (obj_p))
        -: 3301:  {
    #####: 3302:    ecma_fast_array_convert_to_normal (obj_p);
        -: 3303:  }
        -: 3304:
        -: 3305:  /* 6. */
    #####: 3306:  ecma_object_t *iter_p = new_proto_p;
        -: 3307:
        -: 3308:  /* 7 - 8. */
        -: 3309:  while (true)
        -: 3310:  {
        -: 3311:    /* 8.a */
    #####: 3312:    if (iter_p == NULL)
        -: 3313:    {
    #####: 3314:      break;
        -: 3315:    }
        -: 3316:
        -: 3317:    /* 8.b */
    #####: 3318:    if (obj_p == iter_p)
        -: 3319:    {
    #####: 3320:      return ECMA_VALUE_FALSE;
        -: 3321:    }
        -: 3322:
        -: 3323:    /* 8.c.i */
        -: 3324:#if JERRY_BUILTIN_PROXY
    #####: 3325:    if (ECMA_OBJECT_IS_PROXY (iter_p))
        -: 3326:    {
    #####: 3327:      break;
        -: 3328:    }
        -: 3329:#endif /* JERRY_BUILTIN_PROXY */
        -: 3330:
        -: 3331:    /* 8.c.ii */
    #####: 3332:    iter_p = ECMA_GET_POINTER (ecma_object_t, ecma_op_ordinary_object_get_prototype_of (iter_p));
        -: 3333:  }
        -: 3334:
        -: 3335:  /* 9. */
    #####: 3336:  ECMA_SET_POINTER (obj_p->u2.prototype_cp, new_proto_p);
        -: 3337:
        -: 3338:  /* 10. */
    #####: 3339:  return ECMA_VALUE_TRUE;
        -: 3340:} /* ecma_op_ordinary_object_set_prototype_of */
        -: 3341:
        -: 3342:/**
        -: 3343: * [[IsExtensible]] operation for Ordinary object.
        -: 3344: *
        -: 3345: * See also:
        -: 3346: *          ECMAScript v6, 9.1.2
        -: 3347: *
        -: 3348: * @return true  - if object is extensible
        -: 3349: *         false - otherwise
        -: 3350: */
        -: 3351:extern inline bool JERRY_ATTR_PURE
        5: 3352:ecma_op_ordinary_object_is_extensible (ecma_object_t *object_p) /**< object */
        -: 3353:{
        5: 3354:  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (object_p));
        -: 3355:
        5: 3356:  bool is_extensible = (object_p->type_flags_refs & ECMA_OBJECT_FLAG_EXTENSIBLE) != 0;
        -: 3357:
        5: 3358:  JERRY_ASSERT (!ecma_op_object_is_fast_array (object_p) || is_extensible);
        -: 3359:
        5: 3360:  return is_extensible;
        -: 3361:} /* ecma_op_ordinary_object_is_extensible */
        -: 3362:
        -: 3363:/**
        -: 3364: * Set value of [[Extensible]] object's internal property.
        -: 3365: */
        -: 3366:void JERRY_ATTR_NOINLINE
    #####: 3367:ecma_op_ordinary_object_prevent_extensions (ecma_object_t *object_p) /**< object */
        -: 3368:{
    #####: 3369:  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (object_p));
        -: 3370:
    #####: 3371:  if (JERRY_UNLIKELY (ecma_op_object_is_fast_array (object_p)))
        -: 3372:  {
    #####: 3373:    ecma_fast_array_convert_to_normal (object_p);
        -: 3374:  }
        -: 3375:
    #####: 3376:  object_p->type_flags_refs &= (ecma_object_descriptor_t) ~ECMA_OBJECT_FLAG_EXTENSIBLE;
    #####: 3377:} /* ecma_op_ordinary_object_prevent_extensions */
        -: 3378:
        -: 3379:/**
        -: 3380: * Checks whether an object (excluding prototypes) has a named property
        -: 3381: *
        -: 3382: * @return true - if property is found
        -: 3383: *         false - otherwise
        -: 3384: */
        -: 3385:extern inline ecma_value_t JERRY_ATTR_ALWAYS_INLINE
    #####: 3386:ecma_op_ordinary_object_has_own_property (ecma_object_t *object_p, /**< the object */
        -: 3387:                                          ecma_string_t *property_name_p) /**< property name */
        -: 3388:{
    #####: 3389:  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (object_p));
        -: 3390:
    #####: 3391:  ecma_property_t property =
        -: 3392:    ecma_op_object_get_own_property (object_p, property_name_p, NULL, ECMA_PROPERTY_GET_NO_OPTIONS);
        -: 3393:
        -: 3394:#if JERRY_BUILTIN_TYPEDARRAY
    #####: 3395:  if (JERRY_UNLIKELY (property == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_THROW))
        -: 3396:  {
    #####: 3397:    return ECMA_VALUE_ERROR;
        -: 3398:  }
        -: 3399:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        -: 3400:
    #####: 3401:  JERRY_ASSERT (ECMA_PROPERTY_IS_FOUND (property) || property == ECMA_PROPERTY_TYPE_NOT_FOUND
        -: 3402:                || property == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP);
        -: 3403:
    #####: 3404:  return ecma_make_boolean_value (ECMA_PROPERTY_IS_FOUND (property));
        -: 3405:} /* ecma_op_ordinary_object_has_own_property */
        -: 3406:
        -: 3407:#if JERRY_BUILTIN_WEAKREF || JERRY_BUILTIN_CONTAINER
        -: 3408:
        -: 3409:/**
        -: 3410: * Set a weak reference from a container or WeakRefObject to a key object
        -: 3411: */
        -: 3412:void
    #####: 3413:ecma_op_object_set_weak (ecma_object_t *object_p, /**< key object */
        -: 3414:                         ecma_object_t *target_p) /**< target object */
        -: 3415:{
    #####: 3416:  if (JERRY_UNLIKELY (ecma_op_object_is_fast_array (object_p)))
        -: 3417:  {
    #####: 3418:    ecma_fast_array_convert_to_normal (object_p);
        -: 3419:  }
        -: 3420:
    #####: 3421:  ecma_string_t *weak_refs_string_p = ecma_get_internal_string (LIT_INTERNAL_MAGIC_STRING_WEAK_REFS);
    #####: 3422:  ecma_property_t *property_p = ecma_find_named_property (object_p, weak_refs_string_p);
        -: 3423:  ecma_collection_t *refs_p;
        -: 3424:
    #####: 3425:  if (property_p == NULL)
        -: 3426:  {
    #####: 3427:    refs_p = ecma_new_collection ();
        -: 3428:
        -: 3429:    ecma_property_value_t *value_p;
    #####: 3430:    ECMA_CREATE_INTERNAL_PROPERTY (object_p, weak_refs_string_p, property_p, value_p);
    #####: 3431:    ECMA_SET_INTERNAL_VALUE_POINTER (value_p->value, refs_p);
        -: 3432:  }
        -: 3433:  else
        -: 3434:  {
    #####: 3435:    refs_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_collection_t, (ECMA_PROPERTY_VALUE_PTR (property_p)->value));
        -: 3436:  }
        -: 3437:
    #####: 3438:  const ecma_value_t target_value = ecma_make_object_value ((ecma_object_t *) target_p);
    #####: 3439:  for (uint32_t i = 0; i < refs_p->item_count; i++)
        -: 3440:  {
    #####: 3441:    if (ecma_is_value_empty (refs_p->buffer_p[i]))
        -: 3442:    {
    #####: 3443:      refs_p->buffer_p[i] = target_value;
    #####: 3444:      return;
        -: 3445:    }
        -: 3446:  }
        -: 3447:
    #####: 3448:  ecma_collection_push_back (refs_p, target_value);
        -: 3449:} /* ecma_op_object_set_weak */
        -: 3450:
        -: 3451:/**
        -: 3452: * Helper function to remove a weak reference to an object.
        -: 3453: *
        -: 3454: * @return ecma value
        -: 3455: *         Returned value must be freed with ecma_free_value.
        -: 3456: */
        -: 3457:void
    #####: 3458:ecma_op_object_unref_weak (ecma_object_t *object_p, /**< this argument */
        -: 3459:                           ecma_value_t ref_holder) /**< key argument */
        -: 3460:{
    #####: 3461:  ecma_string_t *weak_refs_string_p = ecma_get_internal_string (LIT_INTERNAL_MAGIC_STRING_WEAK_REFS);
        -: 3462:
    #####: 3463:  ecma_property_t *property_p = ecma_find_named_property (object_p, weak_refs_string_p);
    #####: 3464:  JERRY_ASSERT (property_p != NULL);
        -: 3465:
    #####: 3466:  ecma_collection_t *refs_p =
    #####: 3467:    ECMA_GET_INTERNAL_VALUE_POINTER (ecma_collection_t, ECMA_PROPERTY_VALUE_PTR (property_p)->value);
    #####: 3468:  ecma_value_t *buffer_p = refs_p->buffer_p;
        -: 3469:
        -: 3470:  while (true)
        -: 3471:  {
    #####: 3472:    if (*buffer_p == ref_holder)
        -: 3473:    {
    #####: 3474:      *buffer_p = ECMA_VALUE_EMPTY;
    #####: 3475:      return;
        -: 3476:    }
    #####: 3477:    JERRY_ASSERT (buffer_p < refs_p->buffer_p + refs_p->item_count);
    #####: 3478:    buffer_p++;
        -: 3479:  }
        -: 3480:} /* ecma_op_object_unref_weak */
        -: 3481:
        -: 3482:#endif /* JERRY_BUILTIN_WEAKREF || JERRY_BUILTIN_CONTAINER */
        -: 3483:/**
        -: 3484: * Raise property redefinition error
        -: 3485: *
        -: 3486: * @return ECMA_VALUE_FALSE - if JERRY_PROP_SHOULD_THROW is not set
        -: 3487: *         raised TypeError - otherwise
        -: 3488: */
        -: 3489:ecma_value_t
    #####: 3490:ecma_raise_property_redefinition (ecma_string_t *property_name_p, /**< property name */
        -: 3491:                                  uint16_t flags) /**< property descriptor flags */
        -: 3492:{
        -: 3493:  JERRY_UNUSED (property_name_p);
        -: 3494:
    #####: 3495:  return ECMA_REJECT_WITH_FORMAT (flags & JERRY_PROP_SHOULD_THROW,
        -: 3496:                                  "Cannot redefine property: %",
        -: 3497:                                  ecma_make_prop_name_value (property_name_p));
        -: 3498:} /* ecma_raise_property_redefinition */
        -: 3499:
        -: 3500:/**
        -: 3501: * Raise readonly assignment error
        -: 3502: *
        -: 3503: * @return ECMA_VALUE_FALSE - if is_throw is true
        -: 3504: *         raised TypeError - otherwise
        -: 3505: */
        -: 3506:ecma_value_t
    #####: 3507:ecma_raise_readonly_assignment (ecma_string_t *property_name_p, /**< property name */
        -: 3508:                                bool is_throw) /**< is throw flag */
        -: 3509:{
        -: 3510:  JERRY_UNUSED (property_name_p);
        -: 3511:
    #####: 3512:  return ECMA_REJECT_WITH_FORMAT (is_throw,
        -: 3513:                                  "Cannot assign to read only property '%'",
        -: 3514:                                  ecma_make_prop_name_value (property_name_p));
        -: 3515:} /* ecma_raise_readonly_assignment */
        -: 3516:
        -: 3517:/**
        -: 3518: * @}
        -: 3519: * @}
        -: 3520: */
