        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-object-prototype.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtin-helpers.h"
        -:   18:#include "ecma-builtin-object.h"
        -:   19:#include "ecma-builtins.h"
        -:   20:#include "ecma-conversion.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-function-object.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-globals.h"
        -:   25:#include "ecma-helpers.h"
        -:   26:#include "ecma-objects.h"
        -:   27:#include "ecma-proxy-object.h"
        -:   28:#include "ecma-string-object.h"
        -:   29:
        -:   30:#include "jrt.h"
        -:   31:
        -:   32:#define ECMA_BUILTINS_INTERNAL
        -:   33:#include "ecma-builtins-internal.h"
        -:   34:
        -:   35:/**
        -:   36: * This object has a custom dispatch function.
        -:   37: */
        -:   38:#define BUILTIN_CUSTOM_DISPATCH
        -:   39:
        -:   40:/**
        -:   41: * List of built-in routine identifiers.
        -:   42: */
        -:   43:enum
        -:   44:{
        -:   45:  /* Note: these 6 routines must be in this order */
        -:   46:  ECMA_OBJECT_PROTOTYPE_ROUTINE_START = 0,
        -:   47:  ECMA_OBJECT_PROTOTYPE_TO_STRING,
        -:   48:  ECMA_OBJECT_PROTOTYPE_VALUE_OF,
        -:   49:  ECMA_OBJECT_PROTOTYPE_TO_LOCALE_STRING,
        -:   50:  ECMA_OBJECT_PROTOTYPE_GET_PROTO,
        -:   51:  ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF,
        -:   52:  ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY,
        -:   53:  ECMA_OBJECT_PROTOTYPE_PROPERTY_IS_ENUMERABLE,
        -:   54:  ECMA_OBJECT_PROTOTYPE_SET_PROTO,
        -:   55:#if JERRY_ESNEXT && JERRY_BUILTIN_ANNEXB
        -:   56:  ECMA_OBJECT_PROTOTYPE_DEFINE_GETTER,
        -:   57:  ECMA_OBJECT_PROTOTYPE_DEFINE_SETTER,
        -:   58:  ECMA_OBJECT_PROTOTYPE_LOOKUP_GETTER,
        -:   59:  ECMA_OBJECT_PROTOTYPE_LOOKUP_SETTER,
        -:   60:#endif /* JERRY_ESNEXT && JERRY_BUILTIN_ANNEXB */
        -:   61:};
        -:   62:
        -:   63:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-object-prototype.inc.h"
        -:   64:#define BUILTIN_UNDERSCORED_ID  object_prototype
        -:   65:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   66:
        -:   67:/** \addtogroup ecma ECMA
        -:   68: * @{
        -:   69: *
        -:   70: * \addtogroup ecmabuiltins
        -:   71: * @{
        -:   72: *
        -:   73: * \addtogroup objectprototype ECMA Object.prototype object built-in
        -:   74: * @{
        -:   75: */
        -:   76:
        -:   77:/**
        -:   78: * The Object.prototype object's 'toString' routine
        -:   79: *
        -:   80: * See also:
        -:   81: *          ECMA-262 v5, 15.2.4.2
        -:   82: *
        -:   83: * @return ecma value
        -:   84: *         Returned value must be freed with ecma_free_value.
        -:   85: */
        -:   86:static ecma_value_t
    #####:   87:ecma_builtin_object_prototype_object_to_string (ecma_value_t this_arg) /**< this argument */
        -:   88:{
    #####:   89:  return ecma_builtin_helper_object_to_string (this_arg);
        -:   90:} /* ecma_builtin_object_prototype_object_to_string */
        -:   91:
        -:   92:/**
        -:   93: * The Object.prototype object's 'valueOf' routine
        -:   94: *
        -:   95: * See also:
        -:   96: *          ECMA-262 v5, 15.2.4.4
        -:   97: *
        -:   98: * @return ecma value
        -:   99: *         Returned value must be freed with ecma_free_value.
        -:  100: */
        -:  101:static ecma_value_t
    #####:  102:ecma_builtin_object_prototype_object_value_of (ecma_value_t this_arg) /**< this argument */
        -:  103:{
    #####:  104:  return ecma_op_to_object (this_arg);
        -:  105:} /* ecma_builtin_object_prototype_object_value_of */
        -:  106:
        -:  107:/**
        -:  108: * The Object.prototype object's 'toLocaleString' routine
        -:  109: *
        -:  110: * See also:
        -:  111: *          ECMA-262 v5, 15.2.4.3
        -:  112: *
        -:  113: * @return ecma value
        -:  114: *         Returned value must be freed with ecma_free_value.
        -:  115: */
        -:  116:static ecma_value_t
    #####:  117:ecma_builtin_object_prototype_object_to_locale_string (ecma_value_t this_arg) /**< this argument */
        -:  118:{
    #####:  119:  return ecma_op_invoke_by_magic_id (this_arg, LIT_MAGIC_STRING_TO_STRING_UL, &this_arg, 1);
        -:  120:} /* ecma_builtin_object_prototype_object_to_locale_string */
        -:  121:
        -:  122:/**
        -:  123: * The Object.prototype object's 'hasOwnProperty' routine
        -:  124: *
        -:  125: * See also:
        -:  126: *          ECMA-262 v5, 15.2.4.5
        -:  127: *
        -:  128: * @return ecma value
        -:  129: *         Returned value must be freed with ecma_free_value.
        -:  130: */
        -:  131:static ecma_value_t
    #####:  132:ecma_builtin_object_prototype_object_has_own_property (ecma_object_t *obj_p, /**< this argument */
        -:  133:                                                       ecma_string_t *prop_name_p) /**< first argument */
        -:  134:{
        -:  135:#if JERRY_BUILTIN_PROXY
    #####:  136:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  137:  {
    #####:  138:    ecma_property_descriptor_t prop_desc;
        -:  139:
    #####:  140:    ecma_value_t status = ecma_proxy_object_get_own_property_descriptor (obj_p, prop_name_p, &prop_desc);
        -:  141:
    #####:  142:    if (ecma_is_value_true (status))
        -:  143:    {
    #####:  144:      ecma_free_property_descriptor (&prop_desc);
        -:  145:    }
        -:  146:
    #####:  147:    return status;
        -:  148:  }
        -:  149:#endif /* JERRY_BUILTIN_PROXY */
        -:  150:
    #####:  151:  return ecma_op_ordinary_object_has_own_property (obj_p, prop_name_p);
        -:  152:} /* ecma_builtin_object_prototype_object_has_own_property */
        -:  153:
        -:  154:/**
        -:  155: * The Object.prototype object's 'isPrototypeOf' routine
        -:  156: *
        -:  157: * See also:
        -:  158: *          ECMA-262 v5, 15.2.4.6
        -:  159: *
        -:  160: * @return ecma value
        -:  161: *         Returned value must be freed with ecma_free_value.
        -:  162: */
        -:  163:static ecma_value_t
    #####:  164:ecma_builtin_object_prototype_object_is_prototype_of (ecma_object_t *obj_p, /**< this argument */
        -:  165:                                                      ecma_value_t arg) /**< routine's first argument */
        -:  166:{
        -:  167:  /* 3. Compare prototype to object */
    #####:  168:  ecma_value_t v_obj_value = ecma_op_to_object (arg);
        -:  169:
    #####:  170:  if (ECMA_IS_VALUE_ERROR (v_obj_value))
        -:  171:  {
    #####:  172:    return v_obj_value;
        -:  173:  }
        -:  174:
    #####:  175:  ecma_object_t *v_obj_p = ecma_get_object_from_value (v_obj_value);
        -:  176:
    #####:  177:  ecma_value_t ret_value = ecma_op_object_is_prototype_of (obj_p, v_obj_p);
        -:  178:
    #####:  179:  ecma_deref_object (v_obj_p);
        -:  180:
    #####:  181:  return ret_value;
        -:  182:} /* ecma_builtin_object_prototype_object_is_prototype_of */
        -:  183:
        -:  184:/**
        -:  185: * The Object.prototype object's 'propertyIsEnumerable' routine
        -:  186: *
        -:  187: * See also:
        -:  188: *          ECMA-262 v5, 15.2.4.7
        -:  189: *
        -:  190: * @return ecma value
        -:  191: *         Returned value must be freed with ecma_free_value.
        -:  192: */
        -:  193:static ecma_value_t
    #####:  194:ecma_builtin_object_prototype_object_property_is_enumerable (ecma_object_t *obj_p, /**< this argument */
        -:  195:                                                             ecma_string_t *prop_name_p) /**< first argument */
        -:  196:{
    #####:  197:  ecma_property_descriptor_t prop_desc;
    #####:  198:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, prop_name_p, &prop_desc);
        -:  199:
    #####:  200:  if (!ecma_is_value_true (status))
        -:  201:  {
    #####:  202:    return status;
        -:  203:  }
        -:  204:
    #####:  205:  bool is_enumerable = (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE);
        -:  206:
    #####:  207:  ecma_free_property_descriptor (&prop_desc);
        -:  208:
    #####:  209:  return ecma_make_boolean_value (is_enumerable);
        -:  210:} /* ecma_builtin_object_prototype_object_property_is_enumerable */
        -:  211:
        -:  212:#if JERRY_ESNEXT && JERRY_BUILTIN_ANNEXB
        -:  213:/**
        -:  214: * The Object.prototype object's '__defineGetter__' and '__defineSetter__' routine
        -:  215: *
        -:  216: * See also:
        -:  217: *          ECMA-262 v11, B.2.2.2
        -:  218: *          ECMA-262 v11, B.2.2.3
        -:  219: *
        -:  220: * @return ECMA_VALUE_ERROR - if the operation fails,
        -:  221: *         ECMA_VALUE_UNDEFINED - otherwise
        -:  222: */
        -:  223:static ecma_value_t
    #####:  224:ecma_builtin_object_prototype_define_getter_setter (ecma_value_t this_arg, /**< this argument */
        -:  225:                                                    ecma_value_t prop, /**< property */
        -:  226:                                                    ecma_value_t accessor, /**< getter/setter function */
        -:  227:                                                    bool define_getter) /**< true - defineGetter method
        -:  228:                                                                             false - defineSetter method */
        -:  229:{
        -:  230:  /* 1. */
    #####:  231:  ecma_value_t to_obj = ecma_op_to_object (this_arg);
        -:  232:
    #####:  233:  if (ECMA_IS_VALUE_ERROR (to_obj))
        -:  234:  {
    #####:  235:    return to_obj;
        -:  236:  }
        -:  237:
    #####:  238:  ecma_object_t *obj_p = ecma_get_object_from_value (to_obj);
        -:  239:
        -:  240:  /* 2. */
    #####:  241:  if (!ecma_op_is_callable (accessor))
        -:  242:  {
    #####:  243:    ecma_deref_object (obj_p);
    #####:  244:    return ecma_raise_type_error (ECMA_ERR_GETTER_IS_NOT_CALLABLE);
        -:  245:  }
        -:  246:
    #####:  247:  ecma_object_t *accessor_obj_p = ecma_get_object_from_value (accessor);
        -:  248:
        -:  249:  /* 3. */
    #####:  250:  ecma_property_descriptor_t desc = ecma_make_empty_property_descriptor ();
    #####:  251:  desc.flags |= (JERRY_PROP_IS_ENUMERABLE | JERRY_PROP_IS_CONFIGURABLE | JERRY_PROP_IS_ENUMERABLE_DEFINED
        -:  252:                 | JERRY_PROP_IS_CONFIGURABLE_DEFINED | JERRY_PROP_SHOULD_THROW);
        -:  253:
    #####:  254:  if (define_getter)
        -:  255:  {
    #####:  256:    desc.get_p = accessor_obj_p;
    #####:  257:    desc.flags |= JERRY_PROP_IS_GET_DEFINED;
        -:  258:  }
        -:  259:  else
        -:  260:  {
    #####:  261:    desc.set_p = accessor_obj_p;
    #####:  262:    desc.flags |= JERRY_PROP_IS_SET_DEFINED;
        -:  263:  }
        -:  264:
        -:  265:  /* 4. */
    #####:  266:  ecma_string_t *prop_name_p = ecma_op_to_property_key (prop);
        -:  267:
    #####:  268:  if (JERRY_UNLIKELY (prop_name_p == NULL))
        -:  269:  {
    #####:  270:    ecma_deref_object (obj_p);
    #####:  271:    return ECMA_VALUE_ERROR;
        -:  272:  }
        -:  273:
        -:  274:  /* 5. */
    #####:  275:  ecma_value_t define_prop = ecma_op_object_define_own_property (obj_p, prop_name_p, &desc);
        -:  276:
    #####:  277:  ecma_deref_object (obj_p);
    #####:  278:  ecma_deref_ecma_string (prop_name_p);
        -:  279:
    #####:  280:  if (ECMA_IS_VALUE_ERROR (define_prop))
        -:  281:  {
    #####:  282:    return define_prop;
        -:  283:  }
        -:  284:
        -:  285:  /* 6. */
    #####:  286:  return ECMA_VALUE_UNDEFINED;
        -:  287:} /* ecma_builtin_object_prototype_define_getter_setter */
        -:  288:
        -:  289:/**
        -:  290: * The Object.prototype object's '__lookupGetter__' and '__lookupSetter__' routine
        -:  291: *
        -:  292: * See also:
        -:  293: *          ECMA-262 v11, B.2.2.4
        -:  294: *          ECMA-262 v11, B.2.2.5
        -:  295: *
        -:  296: * @return ECMA_VALUE_ERROR - if the operation fails,
        -:  297: *         ECMA_VALUE_UNDEFINED - if the property was not found
        -:  298: *         Accessor property - otherwise
        -:  299: */
        -:  300:static ecma_value_t
    #####:  301:ecma_builtin_object_prototype_lookup_getter_setter (ecma_value_t this_arg, /**< this argument */
        -:  302:                                                    ecma_value_t prop, /**< property */
        -:  303:                                                    bool lookup_getter) /**< true - lookupGetter method
        -:  304:                                                                             false - lookupSetter method */
        -:  305:{
        -:  306:  /* 1. */
    #####:  307:  ecma_value_t to_obj = ecma_op_to_object (this_arg);
        -:  308:
    #####:  309:  if (ECMA_IS_VALUE_ERROR (to_obj))
        -:  310:  {
    #####:  311:    return to_obj;
        -:  312:  }
        -:  313:
    #####:  314:  ecma_object_t *obj_p = ecma_get_object_from_value (to_obj);
        -:  315:
        -:  316:  /* 2. */
    #####:  317:  ecma_string_t *prop_name_p = ecma_op_to_property_key (prop);
        -:  318:
    #####:  319:  if (JERRY_UNLIKELY (prop_name_p == NULL))
        -:  320:  {
    #####:  321:    ecma_deref_object (obj_p);
    #####:  322:    return ECMA_VALUE_ERROR;
        -:  323:  }
        -:  324:
    #####:  325:  ecma_value_t ret_value = ECMA_VALUE_UNDEFINED;
        -:  326:
    #####:  327:  ecma_ref_object (obj_p);
        -:  328:
        -:  329:  /* 3. */
        -:  330:  while (true)
    #####:  331:  {
        -:  332:    /* 3.a */
    #####:  333:    ecma_property_descriptor_t desc;
    #####:  334:    ecma_value_t get_desc = ecma_op_object_get_own_property_descriptor (obj_p, prop_name_p, &desc);
        -:  335:
    #####:  336:    if (ECMA_IS_VALUE_ERROR (get_desc))
        -:  337:    {
    #####:  338:      ret_value = get_desc;
    #####:  339:      ecma_deref_object (obj_p);
    #####:  340:      break;
        -:  341:    }
        -:  342:
        -:  343:    /* 3.b */
    #####:  344:    if (ecma_is_value_true (get_desc))
        -:  345:    {
    #####:  346:      if ((desc.flags & JERRY_PROP_IS_SET_DEFINED) || (desc.flags & JERRY_PROP_IS_GET_DEFINED))
        -:  347:      {
    #####:  348:        if (lookup_getter && desc.get_p != NULL)
        -:  349:        {
    #####:  350:          ecma_ref_object (desc.get_p);
    #####:  351:          ret_value = ecma_make_object_value (desc.get_p);
        -:  352:        }
    #####:  353:        else if (!lookup_getter && desc.set_p != NULL)
        -:  354:        {
    #####:  355:          ecma_ref_object (desc.set_p);
    #####:  356:          ret_value = ecma_make_object_value (desc.set_p);
        -:  357:        }
        -:  358:      }
        -:  359:
    #####:  360:      ecma_free_property_descriptor (&desc);
    #####:  361:      ecma_deref_object (obj_p);
    #####:  362:      break;
        -:  363:    }
        -:  364:
        -:  365:    /* 3.c */
    #####:  366:    ecma_object_t *proto_p = ecma_op_object_get_prototype_of (obj_p);
    #####:  367:    ecma_deref_object (obj_p);
        -:  368:
    #####:  369:    if (proto_p == NULL)
        -:  370:    {
    #####:  371:      break;
        -:  372:    }
    #####:  373:    else if (JERRY_UNLIKELY (proto_p == ECMA_OBJECT_POINTER_ERROR))
        -:  374:    {
    #####:  375:      ret_value = ECMA_VALUE_ERROR;
    #####:  376:      break;
        -:  377:    }
        -:  378:
        -:  379:    /* Advance up on prototype chain. */
    #####:  380:    obj_p = proto_p;
        -:  381:  }
        -:  382:
    #####:  383:  ecma_free_value (to_obj);
    #####:  384:  ecma_deref_ecma_string (prop_name_p);
        -:  385:
    #####:  386:  return ret_value;
        -:  387:} /* ecma_builtin_object_prototype_lookup_getter_setter */
        -:  388:#endif /* JERRY_ESNEXT && JERRY_BUILTIN_ANNEXB */
        -:  389:
        -:  390:/**
        -:  391: * Dispatcher of the built-in's routines
        -:  392: *
        -:  393: * @return ecma value
        -:  394: *         Returned value must be freed with ecma_free_value.
        -:  395: */
        -:  396:ecma_value_t
    #####:  397:ecma_builtin_object_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:  398:                                                                             *   identifier */
        -:  399:                                                ecma_value_t this_arg, /**< 'this' argument value */
        -:  400:                                                const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  401:                                                                                        *   passed to routine */
        -:  402:                                                uint32_t arguments_number) /**< length of arguments' list */
        -:  403:{
        -:  404:  JERRY_UNUSED (arguments_number);
        -:  405:
        -:  406:  /* no specialization */
    #####:  407:  if (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_VALUE_OF)
        -:  408:  {
    #####:  409:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_TO_STRING)
        -:  410:    {
    #####:  411:      return ecma_builtin_object_prototype_object_to_string (this_arg);
        -:  412:    }
        -:  413:
    #####:  414:    JERRY_ASSERT (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_VALUE_OF);
        -:  415:
    #####:  416:    return ecma_builtin_object_prototype_object_value_of (this_arg);
        -:  417:  }
        -:  418:
    #####:  419:  if (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF)
        -:  420:  {
    #####:  421:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF)
        -:  422:    {
        -:  423:      /* 15.2.4.6.1. */
    #####:  424:      if (!ecma_is_value_object (arguments_list_p[0]))
        -:  425:      {
    #####:  426:        return ECMA_VALUE_FALSE;
        -:  427:      }
        -:  428:    }
        -:  429:
    #####:  430:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_TO_LOCALE_STRING)
        -:  431:    {
    #####:  432:      return ecma_builtin_object_prototype_object_to_locale_string (this_arg);
        -:  433:    }
        -:  434:
    #####:  435:    ecma_value_t to_object = ecma_op_to_object (this_arg);
        -:  436:
    #####:  437:    if (ECMA_IS_VALUE_ERROR (to_object))
        -:  438:    {
    #####:  439:      return to_object;
        -:  440:    }
        -:  441:
    #####:  442:    ecma_object_t *obj_p = ecma_get_object_from_value (to_object);
        -:  443:
        -:  444:    ecma_value_t ret_value;
        -:  445:
        -:  446:#if JERRY_ESNEXT
    #####:  447:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_GET_PROTO)
        -:  448:    {
    #####:  449:      ret_value = ecma_builtin_object_object_get_prototype_of (obj_p);
        -:  450:    }
        -:  451:    else
        -:  452:#endif /* JERRY_ESNEXT */
        -:  453:    {
    #####:  454:      ret_value = ecma_builtin_object_prototype_object_is_prototype_of (obj_p, arguments_list_p[0]);
        -:  455:    }
        -:  456:
    #####:  457:    ecma_deref_object (obj_p);
        -:  458:
    #####:  459:    return ret_value;
        -:  460:  }
        -:  461:
    #####:  462:  JERRY_ASSERT (builtin_routine_id >= ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY);
        -:  463:
        -:  464:#if JERRY_ESNEXT
    #####:  465:  if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_SET_PROTO)
        -:  466:  {
    #####:  467:    return ecma_builtin_object_object_set_proto (this_arg, arguments_list_p[0]);
        -:  468:  }
        -:  469:#if JERRY_BUILTIN_ANNEXB
    #####:  470:  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_LOOKUP_GETTER)
        -:  471:  {
    #####:  472:    return ecma_builtin_object_prototype_lookup_getter_setter (this_arg, arguments_list_p[0], true);
        -:  473:  }
    #####:  474:  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_LOOKUP_SETTER)
        -:  475:  {
    #####:  476:    return ecma_builtin_object_prototype_lookup_getter_setter (this_arg, arguments_list_p[0], false);
        -:  477:  }
    #####:  478:  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_DEFINE_GETTER)
        -:  479:  {
    #####:  480:    return ecma_builtin_object_prototype_define_getter_setter (this_arg,
        -:  481:                                                               arguments_list_p[0],
    #####:  482:                                                               arguments_list_p[1],
        -:  483:                                                               true);
        -:  484:  }
    #####:  485:  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_DEFINE_SETTER)
        -:  486:  {
    #####:  487:    return ecma_builtin_object_prototype_define_getter_setter (this_arg,
        -:  488:                                                               arguments_list_p[0],
    #####:  489:                                                               arguments_list_p[1],
        -:  490:                                                               false);
        -:  491:  }
        -:  492:#endif /* JERRY_BUILTIN_ANNEXB */
        -:  493:#endif /* JERRY_ESNEXT*/
        -:  494:
    #####:  495:  ecma_string_t *prop_name_p = ecma_op_to_property_key (arguments_list_p[0]);
        -:  496:
    #####:  497:  if (prop_name_p == NULL)
        -:  498:  {
    #####:  499:    return ECMA_VALUE_ERROR;
        -:  500:  }
        -:  501:
    #####:  502:  ecma_value_t to_object = ecma_op_to_object (this_arg);
        -:  503:
    #####:  504:  if (ECMA_IS_VALUE_ERROR (to_object))
        -:  505:  {
    #####:  506:    ecma_deref_ecma_string (prop_name_p);
    #####:  507:    return to_object;
        -:  508:  }
        -:  509:
    #####:  510:  ecma_object_t *obj_p = ecma_get_object_from_value (to_object);
        -:  511:
        -:  512:  ecma_value_t ret_value;
        -:  513:
    #####:  514:  if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY)
        -:  515:  {
    #####:  516:    ret_value = ecma_builtin_object_prototype_object_has_own_property (obj_p, prop_name_p);
        -:  517:  }
        -:  518:  else
        -:  519:  {
    #####:  520:    ret_value = ecma_builtin_object_prototype_object_property_is_enumerable (obj_p, prop_name_p);
        -:  521:  }
        -:  522:
    #####:  523:  ecma_deref_ecma_string (prop_name_p);
    #####:  524:  ecma_deref_object (obj_p);
        -:  525:
    #####:  526:  return ret_value;
        -:  527:} /* ecma_builtin_object_prototype_dispatch_routine */
        -:  528:
        -:  529:/**
        -:  530: * @}
        -:  531: * @}
        -:  532: * @}
        -:  533: */
