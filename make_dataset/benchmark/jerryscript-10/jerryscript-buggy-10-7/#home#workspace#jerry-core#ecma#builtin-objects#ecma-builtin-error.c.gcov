        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-error.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtin-helpers.h"
        -:   18:#include "ecma-builtins.h"
        -:   19:#include "ecma-conversion.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-function-object.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-objects.h"
        -:   26:
        -:   27:#include "jcontext.h"
        -:   28:#include "jrt.h"
        -:   29:
        -:   30:#define ECMA_BUILTINS_INTERNAL
        -:   31:#include "ecma-builtins-internal.h"
        -:   32:
        -:   33:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-error.inc.h"
        -:   34:#define BUILTIN_UNDERSCORED_ID  error
        -:   35:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   36:
        -:   37:/** \addtogroup ecma ECMA
        -:   38: * @{
        -:   39: *
        -:   40: * \addtogroup ecmabuiltins
        -:   41: * @{
        -:   42: *
        -:   43: * \addtogroup error ECMA Error object built-in
        -:   44: * @{
        -:   45: */
        -:   46:
        -:   47:/**
        -:   48: * Handle calling [[Call]] of built-in Error object
        -:   49: *
        -:   50: * @return ecma value
        -:   51: */
        -:   52:ecma_value_t
    #####:   53:ecma_builtin_error_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   54:                                  uint32_t arguments_list_len) /**< number of arguments */
        -:   55:{
    #####:   56:  return ecma_builtin_helper_error_dispatch_call (JERRY_ERROR_COMMON, arguments_list_p, arguments_list_len);
        -:   57:} /* ecma_builtin_error_dispatch_call */
        -:   58:
        -:   59:/**
        -:   60: * Handle calling [[Construct]] of built-in Error object
        -:   61: *
        -:   62: * @return ecma value
        -:   63: */
        -:   64:ecma_value_t
    #####:   65:ecma_builtin_error_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   66:                                       uint32_t arguments_list_len) /**< number of arguments */
        -:   67:{
        -:   68:#if !JERRY_ESNEXT
    #####:   69:  return ecma_builtin_error_dispatch_call (arguments_list_p, arguments_list_len);
        -:   70:#else /* JERRY_ESNEXT */
    #####:   71:  ecma_object_t *proto_p =
    #####:   72:    ecma_op_get_prototype_from_constructor (JERRY_CONTEXT (current_new_target_p), ECMA_BUILTIN_ID_ERROR_PROTOTYPE);
        -:   73:
    #####:   74:  if (proto_p == NULL)
        -:   75:  {
    #####:   76:    return ECMA_VALUE_ERROR;
        -:   77:  }
        -:   78:
    #####:   79:  ecma_value_t result = ecma_builtin_error_dispatch_call (arguments_list_p, arguments_list_len);
        -:   80:
    #####:   81:  if (!ECMA_IS_VALUE_ERROR (result))
        -:   82:  {
    #####:   83:    ecma_object_t *object_p = ecma_get_object_from_value (result);
    #####:   84:    ECMA_SET_NON_NULL_POINTER (object_p->u2.prototype_cp, proto_p);
        -:   85:  }
        -:   86:
    #####:   87:  ecma_deref_object (proto_p);
        -:   88:
    #####:   89:  return result;
        -:   90:#endif /* JERRY_ESNEXT */
        -:   91:} /* ecma_builtin_error_dispatch_construct */
        -:   92:
        -:   93:/**
        -:   94: * @}
        -:   95: * @}
        -:   96: * @}
        -:   97: */
