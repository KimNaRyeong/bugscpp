        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-function-object.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-function-object.h"
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-builtin-handlers.h"
        -:   20:#include "ecma-builtin-helpers.h"
        -:   21:#include "ecma-errors.h"
        -:   22:#include "ecma-exceptions.h"
        -:   23:#include "ecma-extended-info.h"
        -:   24:#include "ecma-gc.h"
        -:   25:#include "ecma-helpers.h"
        -:   26:#include "ecma-lex-env.h"
        -:   27:#include "ecma-objects-general.h"
        -:   28:#include "ecma-objects.h"
        -:   29:#include "ecma-promise-object.h"
        -:   30:#include "ecma-proxy-object.h"
        -:   31:#include "ecma-symbol-object.h"
        -:   32:
        -:   33:#include "jcontext.h"
        -:   34:#include "lit-char-helpers.h"
        -:   35:#include "opcodes.h"
        -:   36:
        -:   37:/** \addtogroup ecma ECMA
        -:   38: * @{
        -:   39: *
        -:   40: * \addtogroup ecmafunctionobject ECMA Function object related routines
        -:   41: * @{
        -:   42: */
        -:   43:
        -:   44:#if JERRY_ESNEXT
        -:   45:/**
        -:   46: * SetFunctionName operation
        -:   47: *
        -:   48: * See also: ECMAScript v6, 9.2.1.1
        -:   49: *
        -:   50: * @return source name as ecma-string
        -:   51: */
        -:   52:ecma_value_t
    #####:   53:ecma_op_function_form_name (ecma_string_t *prop_name_p, /**< property name */
        -:   54:                            char *prefix_p, /**< prefix */
        -:   55:                            lit_utf8_size_t prefix_size) /**< prefix length */
        -:   56:{
        -:   57:  /* 4. */
    #####:   58:  if (ecma_prop_name_is_symbol (prop_name_p))
        -:   59:  {
        -:   60:    /* .a */
    #####:   61:    ecma_value_t string_desc = ecma_get_symbol_description (prop_name_p);
        -:   62:
        -:   63:    /* .b */
    #####:   64:    if (ecma_is_value_undefined (string_desc))
        -:   65:    {
    #####:   66:      prop_name_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
        -:   67:    }
        -:   68:    /* .c */
        -:   69:    else
        -:   70:    {
    #####:   71:      ecma_string_t *string_desc_p = ecma_get_string_from_value (string_desc);
    #####:   72:      ecma_stringbuilder_t builder = ecma_stringbuilder_create_raw ((lit_utf8_byte_t *) "[", 1);
    #####:   73:      ecma_stringbuilder_append (&builder, string_desc_p);
    #####:   74:      ecma_stringbuilder_append_byte (&builder, (lit_utf8_byte_t) LIT_CHAR_RIGHT_SQUARE);
    #####:   75:      prop_name_p = ecma_stringbuilder_finalize (&builder);
        -:   76:    }
        -:   77:  }
        -:   78:  else
        -:   79:  {
    #####:   80:    ecma_ref_ecma_string (prop_name_p);
        -:   81:  }
        -:   82:
        -:   83:  /* 5. */
    #####:   84:  if (JERRY_UNLIKELY (prefix_p != NULL))
        -:   85:  {
    #####:   86:    ecma_stringbuilder_t builder = ecma_stringbuilder_create_raw ((lit_utf8_byte_t *) prefix_p, prefix_size);
    #####:   87:    ecma_stringbuilder_append (&builder, prop_name_p);
    #####:   88:    ecma_deref_ecma_string (prop_name_p);
    #####:   89:    prop_name_p = ecma_stringbuilder_finalize (&builder);
        -:   90:  }
        -:   91:
    #####:   92:  return ecma_make_string_value (prop_name_p);
        -:   93:} /* ecma_op_function_form_name */
        -:   94:#endif /* JERRY_ESNEXT */
        -:   95:
        -:   96:#if JERRY_BUILTIN_PROXY
        -:   97:/**
        -:   98: * IsCallable operation for proxy object.
        -:   99: *
        -:  100: * @return true - if the given proxy object is callable;
        -:  101: *         false - otherwise
        -:  102: */
        -:  103:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:  104:ecma_op_proxy_object_is_callable (ecma_object_t *obj_p) /**< ecma object */
        -:  105:{
    #####:  106:  JERRY_ASSERT (!ecma_is_lexical_environment (obj_p));
    #####:  107:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
        -:  108:
    #####:  109:  return (obj_p->u2.prototype_cp & ECMA_PROXY_IS_CALLABLE) != 0;
        -:  110:} /* ecma_op_proxy_object_is_callable */
        -:  111:#endif /* JERRY_BUILTIN_PROXY */
        -:  112:
        -:  113:/**
        -:  114: * IsCallable operation.
        -:  115: *
        -:  116: * See also: ECMA-262 v5, 9.11
        -:  117: *
        -:  118: * @return true - if the given object is callable;
        -:  119: *         false - otherwise
        -:  120: */
        -:  121:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:  122:ecma_op_object_is_callable (ecma_object_t *obj_p) /**< ecma object */
        -:  123:{
        3:  124:  JERRY_ASSERT (!ecma_is_lexical_environment (obj_p));
        -:  125:
        3:  126:  const ecma_object_type_t type = ecma_get_object_type (obj_p);
        -:  127:
        -:  128:#if JERRY_BUILTIN_PROXY
        3:  129:  if (ECMA_OBJECT_TYPE_IS_PROXY (type))
        -:  130:  {
    #####:  131:    return ecma_op_proxy_object_is_callable (obj_p);
        -:  132:  }
        -:  133:#endif /* JERRY_BUILTIN_PROXY */
        -:  134:
        3:  135:  return type >= ECMA_OBJECT_TYPE_FUNCTION;
        -:  136:} /* ecma_op_object_is_callable */
        -:  137:
        -:  138:/**
        -:  139: * IsCallable operation.
        -:  140: *
        -:  141: * See also: ECMA-262 v5, 9.11
        -:  142: *
        -:  143: * @return true - if value is callable object;
        -:  144: *         false - otherwise
        -:  145: */
        -:  146:bool
    #####:  147:ecma_op_is_callable (ecma_value_t value) /**< ecma value */
        -:  148:{
    #####:  149:  return (ecma_is_value_object (value) && ecma_op_object_is_callable (ecma_get_object_from_value (value)));
        -:  150:} /* ecma_op_is_callable */
        -:  151:
        -:  152:/**
        -:  153: * Implement IsConstructor abstract operation.
        -:  154: *
        -:  155: *
        -:  156: * @return ECMA_IS_VALID_CONSTRUCTOR - if object is a valid for constructor call
        -:  157: *         ecma_error_msg_t id of error - otherwise
        -:  158: */
        -:  159:ecma_error_msg_t
        5:  160:ecma_object_check_constructor (ecma_object_t *obj_p) /**< ecma object */
        -:  161:{
        5:  162:  JERRY_ASSERT (!ecma_is_lexical_environment (obj_p));
        -:  163:
        5:  164:  ecma_object_type_t type = ecma_get_object_type (obj_p);
        -:  165:
        5:  166:  if (JERRY_UNLIKELY (type < ECMA_OBJECT_TYPE_PROXY))
        -:  167:  {
    #####:  168:    return ECMA_ERR_INVALID_TYPE_FOR_CONSTRUCTOR_CALL;
        -:  169:  }
        -:  170:
       10:  171:  while (JERRY_UNLIKELY (type == ECMA_OBJECT_TYPE_BOUND_FUNCTION))
        -:  172:  {
    #####:  173:    ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) obj_p;
        -:  174:
    #####:  175:    obj_p =
    #####:  176:      ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t, bound_func_p->header.u.bound_function.target_function);
        -:  177:
    #####:  178:    type = ecma_get_object_type (obj_p);
        -:  179:  }
        -:  180:
        5:  181:  if (JERRY_LIKELY (type == ECMA_OBJECT_TYPE_FUNCTION))
        -:  182:  {
        -:  183:#if JERRY_ESNEXT
    #####:  184:    const ecma_compiled_code_t *byte_code_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) obj_p);
        -:  185:
    #####:  186:    if (!CBC_FUNCTION_IS_CONSTRUCTABLE (byte_code_p->status_flags))
        -:  187:    {
        -:  188:#if JERRY_ERROR_MESSAGES
    #####:  189:      switch (CBC_FUNCTION_GET_TYPE (byte_code_p->status_flags))
        -:  190:      {
    #####:  191:        case CBC_FUNCTION_SCRIPT:
        -:  192:        {
    #####:  193:          return ECMA_ERR_SCRIPT_GLOBAL_FUNCTIONS_INVOKE_WITH_NEW;
        -:  194:        }
    #####:  195:        case CBC_FUNCTION_GENERATOR:
        -:  196:        {
    #####:  197:          return ECMA_ERR_GENERATOR_FUNCTIONS_INVOKE_WITH_NEW;
        -:  198:        }
    #####:  199:        case CBC_FUNCTION_ASYNC:
        -:  200:        {
    #####:  201:          return ECMA_ERR_ASYNC_FUNCTIONS_INVOKE_WITH_NEW;
        -:  202:        }
    #####:  203:        case CBC_FUNCTION_ASYNC_GENERATOR:
        -:  204:        {
    #####:  205:          return ECMA_ERR_ASYNC_GENERATOR_FUNCTIONS_INVOKE_WITH_NEW;
        -:  206:        }
    #####:  207:        case CBC_FUNCTION_ACCESSOR:
        -:  208:        {
    #####:  209:          return ECMA_ERR_ACCESSOR_FUNCTIONS_INVOKE_WITH_NEW;
        -:  210:        }
    #####:  211:        case CBC_FUNCTION_METHOD:
        -:  212:        {
    #####:  213:          return ECMA_ERR_METHODS_INVOKE_WITH_NEW;
        -:  214:        }
    #####:  215:        case CBC_FUNCTION_ARROW:
        -:  216:        {
    #####:  217:          return ECMA_ERR_ARROW_FUNCTIONS_INVOKE_WITH_NEW;
        -:  218:        }
    #####:  219:        default:
        -:  220:        {
    #####:  221:          JERRY_ASSERT (CBC_FUNCTION_GET_TYPE (byte_code_p->status_flags) == CBC_FUNCTION_ASYNC_ARROW);
    #####:  222:          return ECMA_ERR_ASYNC_ARROW_FUNCTIONS_INVOKE_WITH_NEW;
        -:  223:        }
        -:  224:      }
        -:  225:#else /* !JERRY_ERROR_MESSAGES */
        -:  226:      return ECMA_ERR_EMPTY;
        -:  227:#endif /* JERRY_ERROR_MESSAGES */
        -:  228:    }
        -:  229:#endif /* JERRY_NEXT */
        -:  230:
    #####:  231:    return ECMA_IS_VALID_CONSTRUCTOR;
        -:  232:  }
        -:  233:
        -:  234:#if JERRY_BUILTIN_PROXY
        5:  235:  if (ECMA_OBJECT_TYPE_IS_PROXY (type))
        -:  236:  {
    #####:  237:    if (!(obj_p->u2.prototype_cp & ECMA_PROXY_IS_CONSTRUCTABLE))
        -:  238:    {
    #####:  239:      return ECMA_ERR_PROXY_TARGET_IS_NOT_A_CONSTRUCTOR;
        -:  240:    }
        -:  241:
    #####:  242:    return ECMA_IS_VALID_CONSTRUCTOR;
        -:  243:  }
        -:  244:#endif /* JERRY_BUILTIN_PROXY */
        -:  245:
        5:  246:  JERRY_ASSERT (type == ECMA_OBJECT_TYPE_NATIVE_FUNCTION || type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION
        -:  247:                || type == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION);
        -:  248:
        5:  249:  if (type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION)
        -:  250:  {
        5:  251:    if (ecma_builtin_function_is_routine (obj_p))
        -:  252:    {
    #####:  253:      return ECMA_ERR_BULTIN_ROUTINES_HAVE_NO_CONSTRUCTOR;
        -:  254:    }
        -:  255:
        -:  256:#if JERRY_ESNEXT
        5:  257:    JERRY_ASSERT (((ecma_extended_object_t *) obj_p)->u.built_in.id != ECMA_BUILTIN_ID_HANDLER);
        -:  258:#endif /* !JERRY_ESNEXT */
        -:  259:  }
        -:  260:
        5:  261:  return ECMA_IS_VALID_CONSTRUCTOR;
        -:  262:} /* ecma_object_check_constructor */
        -:  263:
        -:  264:/**
        -:  265: * Implement IsConstructor abstract operation.
        -:  266: *
        -:  267: * @return ECMA_IS_VALID_CONSTRUCTOR - if the input value is a constructor.
        -:  268: *         ecma_error_msg_t id of error - otherwise
        -:  269: */
        -:  270:extern inline ecma_error_msg_t JERRY_ATTR_ALWAYS_INLINE
        1:  271:ecma_check_constructor (ecma_value_t value) /**< ecma object */
        -:  272:{
        1:  273:  if (!ecma_is_value_object (value))
        -:  274:  {
    #####:  275:    return ECMA_ERR_INVALID_TYPE_FOR_CONSTRUCTOR_CALL;
        -:  276:  }
        -:  277:
        1:  278:  return ecma_object_check_constructor (ecma_get_object_from_value (value));
        -:  279:} /* ecma_check_constructor */
        -:  280:
        -:  281:/**
        -:  282: * Checks whether the given object implements [[Construct]].
        -:  283: *
        -:  284: * @return true - if the given object is constructor;
        -:  285: *         false - otherwise
        -:  286: */
        -:  287:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:  288:ecma_object_is_constructor (ecma_object_t *obj_p) /**< ecma object */
        -:  289:{
        4:  290:  return ecma_object_check_constructor (obj_p) == ECMA_IS_VALID_CONSTRUCTOR;
        -:  291:} /* ecma_object_is_constructor */
        -:  292:
        -:  293:/**
        -:  294: * Checks whether the value is Object that implements [[Construct]].
        -:  295: *
        -:  296: * @return true - if value is constructor object;
        -:  297: *         false - otherwise
        -:  298: */
        -:  299:bool
        4:  300:ecma_is_constructor (ecma_value_t value) /**< ecma value */
        -:  301:{
        8:  302:  return (ecma_is_value_object (value) && ecma_object_is_constructor (ecma_get_object_from_value (value)));
        -:  303:} /* ecma_is_constructor */
        -:  304:
        -:  305:/**
        -:  306: * Helper method to count and convert the arguments for the Function/GeneratorFunction constructor call.
        -:  307: *
        -:  308: * See also:
        -:  309: *          ECMA 262 v5.1 15.3.2.1 steps 5.a-d
        -:  310: *          ECMA 262 v6 19.2.1.1.1 steps 8
        -:  311: *
        -:  312: * @return ecma value - concatenated arguments as a string.
        -:  313: *         Returned value must be freed with ecma_free_value.
        -:  314: */
        -:  315:static ecma_string_t *
    #####:  316:ecma_op_create_dynamic_function_arguments_helper (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  317:                                                  uint32_t arguments_list_len) /**< number of arguments */
        -:  318:{
    #####:  319:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  320:
    #####:  321:  if (arguments_list_len <= 1)
        -:  322:  {
    #####:  323:    return ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
        -:  324:  }
        -:  325:
    #####:  326:  ecma_string_t *str_p = ecma_op_to_string (arguments_list_p[0]);
        -:  327:
    #####:  328:  if (JERRY_UNLIKELY (str_p == NULL))
        -:  329:  {
    #####:  330:    return str_p;
        -:  331:  }
        -:  332:
    #####:  333:  if (arguments_list_len == 2)
        -:  334:  {
    #####:  335:    return str_p;
        -:  336:  }
        -:  337:
    #####:  338:  ecma_stringbuilder_t builder = ecma_stringbuilder_create_from (str_p);
    #####:  339:  ecma_deref_ecma_string (str_p);
        -:  340:
    #####:  341:  for (uint32_t idx = 1; idx < arguments_list_len - 1; idx++)
        -:  342:  {
    #####:  343:    str_p = ecma_op_to_string (arguments_list_p[idx]);
        -:  344:
    #####:  345:    if (JERRY_UNLIKELY (str_p == NULL))
        -:  346:    {
    #####:  347:      ecma_stringbuilder_destroy (&builder);
    #####:  348:      return str_p;
        -:  349:    }
        -:  350:
    #####:  351:    ecma_stringbuilder_append_char (&builder, LIT_CHAR_COMMA);
    #####:  352:    ecma_stringbuilder_append (&builder, str_p);
    #####:  353:    ecma_deref_ecma_string (str_p);
        -:  354:  }
        -:  355:
    #####:  356:  return ecma_stringbuilder_finalize (&builder);
        -:  357:} /* ecma_op_create_dynamic_function_arguments_helper */
        -:  358:
        -:  359:/**
        -:  360: * Function object creation operation.
        -:  361: *
        -:  362: * See also: ECMA-262 v5, 13.2
        -:  363: *
        -:  364: * @return pointer to newly created Function object
        -:  365: */
        -:  366:static ecma_object_t *
    #####:  367:ecma_op_create_function_object (ecma_object_t *scope_p, /**< function's scope */
        -:  368:                                const ecma_compiled_code_t *bytecode_data_p, /**< byte-code array */
        -:  369:                                ecma_builtin_id_t proto_id) /**< builtin id of the prototype object */
        -:  370:{
    #####:  371:  JERRY_ASSERT (ecma_is_lexical_environment (scope_p));
        -:  372:
        -:  373:  /* 1., 4., 13. */
    #####:  374:  ecma_object_t *prototype_obj_p = ecma_builtin_get (proto_id);
        -:  375:
    #####:  376:  size_t function_object_size = sizeof (ecma_extended_object_t);
        -:  377:
        -:  378:#if JERRY_SNAPSHOT_EXEC
    #####:  379:  if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)
        -:  380:  {
    #####:  381:    function_object_size = sizeof (ecma_static_function_t);
        -:  382:  }
        -:  383:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  384:
    #####:  385:  ecma_object_t *func_p = ecma_create_object (prototype_obj_p, function_object_size, ECMA_OBJECT_TYPE_FUNCTION);
        -:  386:
        -:  387:  /* 2., 6., 7., 8. */
        -:  388:  /*
        -:  389:   * We don't setup [[Get]], [[Call]], [[Construct]], [[HasInstance]] for each function object.
        -:  390:   * Instead we set the object's type to ECMA_OBJECT_TYPE_FUNCTION
        -:  391:   * that defines which version of the routine should be used on demand.
        -:  392:   */
        -:  393:
        -:  394:  /* 3. */
        -:  395:  /*
        -:  396:   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_FUNCTION type.
        -:  397:   *
        -:  398:   * See also: ecma_object_get_class_name
        -:  399:   */
        -:  400:
    #####:  401:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_p;
        -:  402:
        -:  403:  /* 9. */
    #####:  404:  ECMA_SET_NON_NULL_POINTER_TAG (ext_func_p->u.function.scope_cp, scope_p, 0);
        -:  405:
        -:  406:  /* 10., 11., 12. */
        -:  407:
        -:  408:#if JERRY_SNAPSHOT_EXEC
    #####:  409:  if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)
        -:  410:  {
    #####:  411:    ext_func_p->u.function.bytecode_cp = JMEM_CP_NULL;
    #####:  412:    ((ecma_static_function_t *) func_p)->bytecode_p = bytecode_data_p;
        -:  413:  }
        -:  414:  else
        -:  415:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  416:  {
    #####:  417:    ECMA_SET_INTERNAL_VALUE_POINTER (ext_func_p->u.function.bytecode_cp, bytecode_data_p);
    #####:  418:    ecma_bytecode_ref ((ecma_compiled_code_t *) bytecode_data_p);
        -:  419:  }
        -:  420:
        -:  421:  /* 14., 15., 16., 17., 18. */
        -:  422:  /*
        -:  423:   * 'length' and 'prototype' properties are instantiated lazily
        -:  424:   *
        -:  425:   * See also: ecma_op_function_try_to_lazy_instantiate_property
        -:  426:   */
        -:  427:
    #####:  428:  return func_p;
        -:  429:} /* ecma_op_create_function_object */
        -:  430:
        -:  431:/**
        -:  432: * CreateDynamicFunction operation
        -:  433: *
        -:  434: * See also:
        -:  435: *          ECMA-262 v5, 15.3.
        -:  436: *          ECMA-262 v6, 19.2.1.1
        -:  437: *
        -:  438: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  439: *         constructed function object - otherwise
        -:  440: */
        -:  441:ecma_value_t
    #####:  442:ecma_op_create_dynamic_function (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  443:                                 uint32_t arguments_list_len, /**< number of arguments */
        -:  444:                                 ecma_parse_opts_t parse_opts) /**< parse options */
        -:  445:{
    #####:  446:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  447:
    #####:  448:  ecma_string_t *arguments_str_p =
        -:  449:    ecma_op_create_dynamic_function_arguments_helper (arguments_list_p, arguments_list_len);
        -:  450:
    #####:  451:  if (JERRY_UNLIKELY (arguments_str_p == NULL))
        -:  452:  {
    #####:  453:    return ECMA_VALUE_ERROR;
        -:  454:  }
        -:  455:
        -:  456:  ecma_string_t *function_body_str_p;
        -:  457:
    #####:  458:  if (arguments_list_len > 0)
        -:  459:  {
    #####:  460:    function_body_str_p = ecma_op_to_string (arguments_list_p[arguments_list_len - 1]);
        -:  461:
    #####:  462:    if (JERRY_UNLIKELY (function_body_str_p == NULL))
        -:  463:    {
    #####:  464:      ecma_deref_ecma_string (arguments_str_p);
    #####:  465:      return ECMA_VALUE_ERROR;
        -:  466:    }
        -:  467:  }
        -:  468:  else
        -:  469:  {
        -:  470:    /* Very unlikely code path, not optimized. */
    #####:  471:    function_body_str_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
        -:  472:  }
        -:  473:
    #####:  474:  ecma_value_t source[2];
    #####:  475:  source[0] = ecma_make_string_value (function_body_str_p);
    #####:  476:  source[1] = ecma_make_string_value (arguments_str_p);
        -:  477:
    #####:  478:  parse_opts |= ECMA_PARSE_HAS_SOURCE_VALUE | ECMA_PARSE_HAS_ARGUMENT_LIST_VALUE;
        -:  479:
    #####:  480:  ecma_compiled_code_t *bytecode_p = parser_parse_script ((void *) source, parse_opts, NULL);
        -:  481:
    #####:  482:  ecma_deref_ecma_string (arguments_str_p);
    #####:  483:  ecma_deref_ecma_string (function_body_str_p);
        -:  484:
    #####:  485:  if (JERRY_UNLIKELY (bytecode_p == NULL))
        -:  486:  {
    #####:  487:    return ECMA_VALUE_ERROR;
        -:  488:  }
        -:  489:
        -:  490:#if JERRY_ESNEXT
        -:  491:  ecma_value_t *func_name_p;
    #####:  492:  func_name_p = ecma_compiled_code_resolve_function_name ((const ecma_compiled_code_t *) bytecode_p);
    #####:  493:  *func_name_p = ecma_make_magic_string_value (LIT_MAGIC_STRING_ANONYMOUS);
        -:  494:#endif /* JERRY_ESNEXT */
        -:  495:
    #####:  496:  ecma_object_t *global_object_p = ecma_builtin_get_global ();
        -:  497:
        -:  498:#if JERRY_BUILTIN_REALMS
    #####:  499:  JERRY_ASSERT (global_object_p == (ecma_object_t *) ecma_op_function_get_realm (bytecode_p));
        -:  500:#endif /* JERRY_BUILTIN_REALMS */
        -:  501:
    #####:  502:  ecma_object_t *global_env_p = ecma_get_global_environment (global_object_p);
    #####:  503:  ecma_builtin_id_t fallback_proto = ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE;
        -:  504:
        -:  505:#if JERRY_ESNEXT
    #####:  506:  ecma_object_t *new_target_p = JERRY_CONTEXT (current_new_target_p);
    #####:  507:  ecma_builtin_id_t fallback_ctor = ECMA_BUILTIN_ID_FUNCTION;
        -:  508:
    #####:  509:  if (JERRY_UNLIKELY (parse_opts & (ECMA_PARSE_GENERATOR_FUNCTION | ECMA_PARSE_ASYNC_FUNCTION)))
        -:  510:  {
    #####:  511:    fallback_proto = ECMA_BUILTIN_ID_ASYNC_GENERATOR;
    #####:  512:    fallback_ctor = ECMA_BUILTIN_ID_ASYNC_GENERATOR_FUNCTION;
        -:  513:
    #####:  514:    if (!(parse_opts & ECMA_PARSE_GENERATOR_FUNCTION))
        -:  515:    {
    #####:  516:      fallback_proto = ECMA_BUILTIN_ID_ASYNC_FUNCTION_PROTOTYPE;
    #####:  517:      fallback_ctor = ECMA_BUILTIN_ID_ASYNC_FUNCTION;
        -:  518:    }
    #####:  519:    else if (!(parse_opts & ECMA_PARSE_ASYNC_FUNCTION))
        -:  520:    {
    #####:  521:      fallback_proto = ECMA_BUILTIN_ID_GENERATOR;
    #####:  522:      fallback_ctor = ECMA_BUILTIN_ID_GENERATOR_FUNCTION;
        -:  523:    }
        -:  524:  }
        -:  525:
    #####:  526:  if (new_target_p == NULL)
        -:  527:  {
    #####:  528:    new_target_p = ecma_builtin_get (fallback_ctor);
        -:  529:  }
        -:  530:
    #####:  531:  ecma_object_t *proto = ecma_op_get_prototype_from_constructor (new_target_p, fallback_proto);
        -:  532:
    #####:  533:  if (JERRY_UNLIKELY (proto == NULL))
        -:  534:  {
    #####:  535:    ecma_bytecode_deref (bytecode_p);
    #####:  536:    return ECMA_VALUE_ERROR;
        -:  537:  }
        -:  538:#endif /* JERRY_ESNEXT */
        -:  539:
    #####:  540:  ecma_object_t *func_obj_p = ecma_op_create_function_object (global_env_p, bytecode_p, fallback_proto);
        -:  541:
        -:  542:#if JERRY_ESNEXT
    #####:  543:  ECMA_SET_NON_NULL_POINTER (func_obj_p->u2.prototype_cp, proto);
    #####:  544:  ecma_deref_object (proto);
        -:  545:#endif /* JERRY_ESNEXT */
        -:  546:
    #####:  547:  ecma_bytecode_deref (bytecode_p);
    #####:  548:  return ecma_make_object_value (func_obj_p);
        -:  549:} /* ecma_op_create_dynamic_function */
        -:  550:
        -:  551:/**
        -:  552: * Function object creation operation.
        -:  553: *
        -:  554: * See also: ECMA-262 v5, 13.2
        -:  555: *
        -:  556: * @return pointer to newly created Function object
        -:  557: */
        -:  558:ecma_object_t *
    #####:  559:ecma_op_create_simple_function_object (ecma_object_t *scope_p, /**< function's scope */
        -:  560:                                       const ecma_compiled_code_t *bytecode_data_p) /**< byte-code array */
        -:  561:{
    #####:  562:  return ecma_op_create_function_object (scope_p, bytecode_data_p, ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  563:} /* ecma_op_create_simple_function_object */
        -:  564:
        -:  565:#if JERRY_ESNEXT
        -:  566:
        -:  567:/**
        -:  568: * Create a function object with the appropriate prototype.
        -:  569: *
        -:  570: * @return pointer to newly created Function object
        -:  571: */
        -:  572:ecma_object_t *
    #####:  573:ecma_op_create_any_function_object (ecma_object_t *scope_p, /**< function's scope */
        -:  574:                                    const ecma_compiled_code_t *bytecode_data_p) /**< byte-code array */
        -:  575:{
        -:  576:  ecma_builtin_id_t proto_id;
        -:  577:
    #####:  578:  switch (CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags))
        -:  579:  {
    #####:  580:    case CBC_FUNCTION_GENERATOR:
        -:  581:    {
    #####:  582:      proto_id = ECMA_BUILTIN_ID_GENERATOR;
    #####:  583:      break;
        -:  584:    }
    #####:  585:    case CBC_FUNCTION_ASYNC:
        -:  586:    {
    #####:  587:      proto_id = ECMA_BUILTIN_ID_ASYNC_FUNCTION_PROTOTYPE;
    #####:  588:      break;
        -:  589:    }
    #####:  590:    case CBC_FUNCTION_ASYNC_GENERATOR:
        -:  591:    {
    #####:  592:      proto_id = ECMA_BUILTIN_ID_ASYNC_GENERATOR;
    #####:  593:      break;
        -:  594:    }
    #####:  595:    default:
        -:  596:    {
    #####:  597:      proto_id = ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE;
    #####:  598:      break;
        -:  599:    }
        -:  600:  }
        -:  601:
    #####:  602:  return ecma_op_create_function_object (scope_p, bytecode_data_p, proto_id);
        -:  603:} /* ecma_op_create_any_function_object */
        -:  604:
        -:  605:/**
        -:  606: * Arrow function object creation operation.
        -:  607: *
        -:  608: * See also: ES2015, 9.2.12
        -:  609: *
        -:  610: * @return pointer to newly created Function object
        -:  611: */
        -:  612:ecma_object_t *
    #####:  613:ecma_op_create_arrow_function_object (ecma_object_t *scope_p, /**< function's scope */
        -:  614:                                      const ecma_compiled_code_t *bytecode_data_p, /**< byte-code array */
        -:  615:                                      ecma_value_t this_binding) /**< value of 'this' binding */
        -:  616:{
        -:  617:  ecma_object_t *prototype_obj_p;
        -:  618:
    #####:  619:  if (CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags) == CBC_FUNCTION_ARROW)
        -:  620:  {
    #####:  621:    prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  622:  }
        -:  623:  else
        -:  624:  {
    #####:  625:    JERRY_ASSERT (CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags) == CBC_FUNCTION_ASYNC_ARROW);
    #####:  626:    prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_ASYNC_FUNCTION_PROTOTYPE);
        -:  627:  }
        -:  628:
    #####:  629:  size_t arrow_function_object_size = sizeof (ecma_arrow_function_t);
        -:  630:
        -:  631:#if JERRY_SNAPSHOT_EXEC
    #####:  632:  if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)
        -:  633:  {
    #####:  634:    arrow_function_object_size = sizeof (ecma_static_arrow_function_t);
        -:  635:  }
        -:  636:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  637:
    #####:  638:  ecma_object_t *func_p = ecma_create_object (prototype_obj_p, arrow_function_object_size, ECMA_OBJECT_TYPE_FUNCTION);
        -:  639:
    #####:  640:  ecma_arrow_function_t *arrow_func_p = (ecma_arrow_function_t *) func_p;
        -:  641:
    #####:  642:  ECMA_SET_NON_NULL_POINTER_TAG (arrow_func_p->header.u.function.scope_cp, scope_p, 0);
        -:  643:
        -:  644:#if JERRY_SNAPSHOT_EXEC
    #####:  645:  if ((bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION))
        -:  646:  {
    #####:  647:    arrow_func_p->header.u.function.bytecode_cp = ECMA_NULL_POINTER;
    #####:  648:    ((ecma_static_arrow_function_t *) func_p)->bytecode_p = bytecode_data_p;
        -:  649:  }
        -:  650:  else
        -:  651:  {
        -:  652:#endif /* JERRY_SNAPSHOT_EXEC */
    #####:  653:    ECMA_SET_INTERNAL_VALUE_POINTER (arrow_func_p->header.u.function.bytecode_cp, bytecode_data_p);
    #####:  654:    ecma_bytecode_ref ((ecma_compiled_code_t *) bytecode_data_p);
        -:  655:#if JERRY_SNAPSHOT_EXEC
        -:  656:  }
        -:  657:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  658:
    #####:  659:  arrow_func_p->this_binding = ecma_copy_value_if_not_object (this_binding);
    #####:  660:  arrow_func_p->new_target = ECMA_VALUE_UNDEFINED;
        -:  661:
    #####:  662:  if (JERRY_CONTEXT (current_new_target_p) != NULL)
        -:  663:  {
    #####:  664:    arrow_func_p->new_target = ecma_make_object_value (JERRY_CONTEXT (current_new_target_p));
        -:  665:  }
    #####:  666:  return func_p;
        -:  667:} /* ecma_op_create_arrow_function_object */
        -:  668:
        -:  669:#endif /* JERRY_ESNEXT */
        -:  670:
        -:  671:/**
        -:  672: * External function object creation operation.
        -:  673: *
        -:  674: * Note:
        -:  675: *      external function object is implementation-defined object type
        -:  676: *      that represent functions implemented in native code, using Embedding API
        -:  677: *
        -:  678: * @return pointer to newly created external function object
        -:  679: */
        -:  680:ecma_object_t *
        5:  681:ecma_op_create_external_function_object (ecma_native_handler_t handler_cb) /**< pointer to external native handler */
        -:  682:{
        5:  683:  ecma_object_t *prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  684:
        5:  685:  ecma_object_t *function_obj_p =
        -:  686:    ecma_create_object (prototype_obj_p, sizeof (ecma_native_function_t), ECMA_OBJECT_TYPE_NATIVE_FUNCTION);
        -:  687:
        -:  688:  /*
        -:  689:   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_NATIVE_FUNCTION type.
        -:  690:   *
        -:  691:   * See also: ecma_object_get_class_name
        -:  692:   */
        -:  693:
        5:  694:  ecma_native_function_t *native_function_p = (ecma_native_function_t *) function_obj_p;
        -:  695:#if JERRY_BUILTIN_REALMS
        5:  696:  ECMA_SET_INTERNAL_VALUE_POINTER (native_function_p->realm_value, ecma_builtin_get_global ());
        -:  697:#endif /* JERRY_BUILTIN_REALMS */
        5:  698:  native_function_p->native_handler_cb = handler_cb;
        -:  699:
        5:  700:  return function_obj_p;
        -:  701:} /* ecma_op_create_external_function_object */
        -:  702:
        -:  703:#if JERRY_ESNEXT
        -:  704:
        -:  705:/**
        -:  706: * Create built-in native handler object.
        -:  707: *
        -:  708: * @return pointer to newly created native handler object
        -:  709: */
        -:  710:ecma_object_t *
    #####:  711:ecma_op_create_native_handler (ecma_native_handler_id_t id, /**< handler id */
        -:  712:                               size_t object_size) /**< created object size */
        -:  713:{
    #####:  714:  ecma_object_t *prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);
        -:  715:
    #####:  716:  ecma_object_t *function_obj_p = ecma_create_object (prototype_obj_p, object_size, ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
        -:  717:
    #####:  718:  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) function_obj_p;
    #####:  719:  ext_func_obj_p->u.built_in.id = ECMA_BUILTIN_ID_HANDLER;
    #####:  720:  ext_func_obj_p->u.built_in.routine_id = (uint8_t) id;
    #####:  721:  ext_func_obj_p->u.built_in.u2.routine_flags = ECMA_NATIVE_HANDLER_FLAGS_NONE;
        -:  722:
        -:  723:#if JERRY_BUILTIN_REALMS
    #####:  724:  ECMA_SET_INTERNAL_VALUE_POINTER (ext_func_obj_p->u.built_in.realm_value, ecma_builtin_get_global ());
        -:  725:#endif /* JERRY_BUILTIN_REALMS */
        -:  726:
    #####:  727:  return function_obj_p;
        -:  728:} /* ecma_op_create_native_handler */
        -:  729:
        -:  730:#endif /* JERRY_ESNEXT */
        -:  731:
        -:  732:/**
        -:  733: * Get compiled code of a function object.
        -:  734: *
        -:  735: * @return compiled code
        -:  736: */
        -:  737:extern inline const ecma_compiled_code_t *JERRY_ATTR_ALWAYS_INLINE
    #####:  738:ecma_op_function_get_compiled_code (ecma_extended_object_t *function_p) /**< function pointer */
        -:  739:{
        -:  740:#if JERRY_SNAPSHOT_EXEC
    #####:  741:  if (JERRY_LIKELY (function_p->u.function.bytecode_cp != ECMA_NULL_POINTER))
        -:  742:  {
    #####:  743:    return ECMA_GET_INTERNAL_VALUE_POINTER (const ecma_compiled_code_t, function_p->u.function.bytecode_cp);
        -:  744:  }
        -:  745:
    #####:  746:  return ((ecma_static_function_t *) function_p)->bytecode_p;
        -:  747:#else /* !JERRY_SNAPSHOT_EXEC */
    #####:  748:  return ECMA_GET_INTERNAL_VALUE_POINTER (const ecma_compiled_code_t, function_p->u.function.bytecode_cp);
        -:  749:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  750:} /* ecma_op_function_get_compiled_code */
        -:  751:
        -:  752:#if JERRY_BUILTIN_REALMS
        -:  753:
        -:  754:/**
        -:  755: * Get realm from a byte code.
        -:  756: *
        -:  757: * Note:
        -:  758: *   Does not increase the reference counter.
        -:  759: *
        -:  760: * @return pointer to realm (global) object
        -:  761: */
        -:  762:extern inline ecma_global_object_t *JERRY_ATTR_ALWAYS_INLINE
        1:  763:ecma_op_function_get_realm (const ecma_compiled_code_t *bytecode_header_p) /**< byte code header */
        -:  764:{
        -:  765:#if JERRY_SNAPSHOT_EXEC
    #####:  766:  if (JERRY_UNLIKELY (bytecode_header_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION))
        -:  767:  {
    #####:  768:    return (ecma_global_object_t *) ecma_builtin_get_global ();
        -:  769:  }
        -:  770:#endif /* JERRY_SNAPSHOT_EXEC */
        -:  771:
        1:  772:  ecma_value_t script_value = ((cbc_uint8_arguments_t *) bytecode_header_p)->script_value;
        1:  773:  cbc_script_t *script_p = ECMA_GET_INTERNAL_VALUE_POINTER (cbc_script_t, script_value);
        -:  774:
        1:  775:  return (ecma_global_object_t *) script_p->realm_p;
        -:  776:} /* ecma_op_function_get_realm */
        -:  777:
        -:  778:/**
        -:  779: * Get realm from a function
        -:  780: *
        -:  781: * Note:
        -:  782: *   Does not increase the reference counter.
        -:  783: *
        -:  784: * @return realm (global) object
        -:  785: */
        -:  786:ecma_global_object_t *
        2:  787:ecma_op_function_get_function_realm (ecma_object_t *func_obj_p) /**< function object */
        -:  788:{
        -:  789:  while (true)
    #####:  790:  {
        2:  791:    ecma_object_type_t type = ecma_get_object_type (func_obj_p);
        -:  792:
        2:  793:    if (type == ECMA_OBJECT_TYPE_FUNCTION)
        -:  794:    {
    #####:  795:      ecma_extended_object_t *ext_function_obj_p = (ecma_extended_object_t *) func_obj_p;
    #####:  796:      const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_function_obj_p);
    #####:  797:      return ecma_op_function_get_realm (bytecode_data_p);
        -:  798:    }
        -:  799:
        2:  800:    if (type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION)
        -:  801:    {
        2:  802:      ecma_extended_object_t *ext_function_obj_p = (ecma_extended_object_t *) func_obj_p;
        2:  803:      return ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t, ext_function_obj_p->u.built_in.realm_value);
        -:  804:    }
        -:  805:
    #####:  806:    if (type == ECMA_OBJECT_TYPE_NATIVE_FUNCTION)
        -:  807:    {
    #####:  808:      ecma_native_function_t *native_function_p = (ecma_native_function_t *) func_obj_p;
    #####:  809:      return ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t, native_function_p->realm_value);
        -:  810:    }
        -:  811:
        -:  812:#if JERRY_ESNEXT
    #####:  813:    if (type == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION)
        -:  814:    {
    #####:  815:      ecma_value_t script_value = ((ecma_extended_object_t *) func_obj_p)->u.constructor_function.script_value;
    #####:  816:      cbc_script_t *script_p = ECMA_GET_INTERNAL_VALUE_POINTER (cbc_script_t, script_value);
        -:  817:
    #####:  818:      return (ecma_global_object_t *) script_p->realm_p;
        -:  819:    }
        -:  820:#endif /* JERRY_ESNEXT */
        -:  821:
        -:  822:#if JERRY_BUILTIN_PROXY
    #####:  823:    if (ECMA_OBJECT_IS_PROXY (func_obj_p))
        -:  824:    {
    #####:  825:      ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) func_obj_p;
    #####:  826:      if (ecma_is_value_null (proxy_obj_p->handler))
        -:  827:      {
    #####:  828:        ecma_raise_type_error (ECMA_ERR_PROTOTYPE_FROM_REVOKED_PROXY_IS_INVALID);
    #####:  829:        return NULL;
        -:  830:      }
    #####:  831:      func_obj_p = ecma_get_object_from_value (proxy_obj_p->target);
    #####:  832:      continue;
        -:  833:    }
        -:  834:#endif /* JERRY_BUILTIN_PROXY */
        -:  835:
    #####:  836:    JERRY_ASSERT (type == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
    #####:  837:    ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) func_obj_p;
    #####:  838:    func_obj_p =
    #####:  839:      ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t, bound_func_p->header.u.bound_function.target_function);
        -:  840:  }
        -:  841:} /* ecma_op_function_get_function_realm */
        -:  842:
        -:  843:#endif /* JERRY_BUILTIN_REALMS */
        -:  844:
        -:  845:/**
        -:  846: * 15.3.5.3 implementation of [[HasInstance]] for Function objects
        -:  847: *
        -:  848: * @return true/false - if arguments are valid
        -:  849: *         error - otherwise
        -:  850: *         Returned value must be freed with ecma_free_value
        -:  851: */
        -:  852:ecma_value_t
    #####:  853:ecma_op_function_has_instance (ecma_object_t *func_obj_p, /**< Function object */
        -:  854:                               ecma_value_t value) /**< argument 'V' */
        -:  855:{
    #####:  856:  JERRY_ASSERT (func_obj_p != NULL && !ecma_is_lexical_environment (func_obj_p));
        -:  857:
    #####:  858:  if (!ecma_is_value_object (value))
        -:  859:  {
    #####:  860:    return ECMA_VALUE_FALSE;
        -:  861:  }
        -:  862:
    #####:  863:  while (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION)
        -:  864:  {
    #####:  865:    JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -:  866:
        -:  867:    /* 1. 3. */
    #####:  868:    ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) func_obj_p;
        -:  869:
    #####:  870:    func_obj_p =
    #####:  871:      ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t, bound_func_p->header.u.bound_function.target_function);
        -:  872:  }
        -:  873:
    #####:  874:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION
        -:  875:                || ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION
        -:  876:                || ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION
        -:  877:                || ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_NATIVE_FUNCTION
        -:  878:                || ECMA_OBJECT_IS_PROXY (func_obj_p));
        -:  879:
    #####:  880:  ecma_object_t *v_obj_p = ecma_get_object_from_value (value);
        -:  881:
    #####:  882:  ecma_value_t prototype_obj_value = ecma_op_object_get_by_magic_id (func_obj_p, LIT_MAGIC_STRING_PROTOTYPE);
        -:  883:
    #####:  884:  if (ECMA_IS_VALUE_ERROR (prototype_obj_value))
        -:  885:  {
    #####:  886:    return prototype_obj_value;
        -:  887:  }
        -:  888:
    #####:  889:  if (!ecma_is_value_object (prototype_obj_value))
        -:  890:  {
    #####:  891:    ecma_free_value (prototype_obj_value);
    #####:  892:    return ecma_raise_type_error (ECMA_ERR_OBJECT_EXPECTED);
        -:  893:  }
        -:  894:
    #####:  895:  ecma_object_t *prototype_obj_p = ecma_get_object_from_value (prototype_obj_value);
    #####:  896:  JERRY_ASSERT (prototype_obj_p != NULL);
        -:  897:
        -:  898:#if JERRY_BUILTIN_PROXY
    #####:  899:  ecma_value_t result = ECMA_VALUE_ERROR;
        -:  900:#else /* !JERRY_BUILTIN_PROXY */
    #####:  901:  ecma_value_t result = ECMA_VALUE_FALSE;
        -:  902:#endif /* JERRY_BUILTIN_PROXY */
        -:  903:
    #####:  904:  ecma_ref_object (v_obj_p);
        -:  905:
        -:  906:  while (true)
    #####:  907:  {
    #####:  908:    ecma_object_t *current_proto_p = ecma_op_object_get_prototype_of (v_obj_p);
    #####:  909:    ecma_deref_object (v_obj_p);
        -:  910:
    #####:  911:    if (current_proto_p == NULL)
        -:  912:    {
        -:  913:#if JERRY_BUILTIN_PROXY
    #####:  914:      result = ECMA_VALUE_FALSE;
        -:  915:#endif /* JERRY_BUILTIN_PROXY */
    #####:  916:      break;
        -:  917:    }
    #####:  918:    else if (current_proto_p == ECMA_OBJECT_POINTER_ERROR)
        -:  919:    {
    #####:  920:      break;
        -:  921:    }
        -:  922:
    #####:  923:    if (current_proto_p == prototype_obj_p)
        -:  924:    {
    #####:  925:      ecma_deref_object (current_proto_p);
    #####:  926:      result = ECMA_VALUE_TRUE;
    #####:  927:      break;
        -:  928:    }
        -:  929:
        -:  930:    /* Advance up on prototype chain. */
    #####:  931:    v_obj_p = current_proto_p;
        -:  932:  }
        -:  933:
    #####:  934:  ecma_deref_object (prototype_obj_p);
    #####:  935:  return result;
        -:  936:} /* ecma_op_function_has_instance */
        -:  937:
        -:  938:#if JERRY_ESNEXT
        -:  939:
        -:  940:/**
        -:  941: * GetSuperConstructor operation for class methods
        -:  942: *
        -:  943: * See also: ECMAScript v6, 12.3.5.2
        -:  944: *
        -:  945: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  946: *         super constructor - otherwise
        -:  947: */
        -:  948:ecma_value_t
    #####:  949:ecma_op_function_get_super_constructor (ecma_object_t *func_obj_p) /**< function object */
        -:  950:{
    #####:  951:  ecma_object_t *super_ctor_p = ecma_op_object_get_prototype_of (func_obj_p);
        -:  952:
    #####:  953:  if (JERRY_UNLIKELY (super_ctor_p == ECMA_OBJECT_POINTER_ERROR))
        -:  954:  {
    #####:  955:    return ECMA_VALUE_ERROR;
        -:  956:  }
    #####:  957:  else if (super_ctor_p == NULL || !ecma_object_is_constructor (super_ctor_p))
        -:  958:  {
    #####:  959:    if (super_ctor_p != NULL)
        -:  960:    {
    #####:  961:      ecma_deref_object (super_ctor_p);
        -:  962:    }
    #####:  963:    return ecma_raise_type_error (ECMA_ERR_SUPER_BINDING_MUST_BE_A_CONSTRUCTOR);
        -:  964:  }
        -:  965:
    #####:  966:  return ecma_make_object_value (super_ctor_p);
        -:  967:} /* ecma_op_function_get_super_constructor */
        -:  968:#endif /* JERRY_ESNEXT */
        -:  969:
        -:  970:/**
        -:  971: * Ordinary internal method: GetPrototypeFromConstructor (constructor, intrinsicDefaultProto)
        -:  972: *
        -:  973: * See also:
        -:  974: *   - ECMAScript v6, 9.1.15
        -:  975: *   - ECMAScript v10, 9.1.14
        -:  976: *
        -:  977: * @return NULL - if the operation fail (exception on the global context is raised)
        -:  978: *         pointer to the prototype object - otherwise
        -:  979: */
        -:  980:ecma_object_t *
        3:  981:ecma_op_get_prototype_from_constructor (ecma_object_t *ctor_obj_p, /**< constructor to get prototype from  */
        -:  982:                                        ecma_builtin_id_t default_proto_id) /**< intrinsicDefaultProto */
        -:  983:{
        3:  984:  JERRY_ASSERT (ecma_op_object_is_callable (ctor_obj_p));
        3:  985:  JERRY_ASSERT (default_proto_id < ECMA_BUILTIN_ID__COUNT);
        -:  986:
        3:  987:  ecma_value_t proto = ecma_op_object_get_by_magic_id (ctor_obj_p, LIT_MAGIC_STRING_PROTOTYPE);
        -:  988:
        3:  989:  if (ECMA_IS_VALUE_ERROR (proto))
        -:  990:  {
    #####:  991:    return NULL;
        -:  992:  }
        -:  993:
        -:  994:  ecma_object_t *proto_obj_p;
        -:  995:
        3:  996:  if (!ecma_is_value_object (proto))
        -:  997:  {
    #####:  998:    ecma_free_value (proto);
        -:  999:
        -: 1000:#if JERRY_BUILTIN_PROXY
    #####: 1001:    if (ECMA_OBJECT_IS_PROXY (ctor_obj_p))
        -: 1002:    {
    #####: 1003:      ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) ctor_obj_p;
    #####: 1004:      if (ecma_is_value_null (proxy_obj_p->handler))
        -: 1005:      {
    #####: 1006:        ecma_raise_type_error (ECMA_ERR_PROTOTYPE_FROM_REVOKED_PROXY_IS_INVALID);
    #####: 1007:        return NULL;
        -: 1008:      }
        -: 1009:    }
        -: 1010:#endif /* JERRY_BUILTIN_PROXY */
        -: 1011:
        -: 1012:#if JERRY_BUILTIN_REALMS
    #####: 1013:    proto_obj_p = ecma_builtin_get_from_realm (ecma_op_function_get_function_realm (ctor_obj_p), default_proto_id);
        -: 1014:#else /* !JERRY_BUILTIN_REALMS */
    #####: 1015:    proto_obj_p = ecma_builtin_get (default_proto_id);
        -: 1016:#endif /* JERRY_BUILTIN_REALMS */
    #####: 1017:    ecma_ref_object (proto_obj_p);
        -: 1018:  }
        -: 1019:  else
        -: 1020:  {
        3: 1021:    proto_obj_p = ecma_get_object_from_value (proto);
        -: 1022:  }
        -: 1023:
        3: 1024:  return proto_obj_p;
        -: 1025:} /* ecma_op_get_prototype_from_constructor */
        -: 1026:
        -: 1027:#if JERRY_ESNEXT
        -: 1028:/**
        -: 1029: * Perform a JavaScript class function object method call.
        -: 1030: *
        -: 1031: * The input function object should be a JavaScript class constructor
        -: 1032: *
        -: 1033: * @return the result of the function call.
        -: 1034: */
        -: 1035:static ecma_value_t JERRY_ATTR_NOINLINE
    #####: 1036:ecma_op_function_call_constructor (vm_frame_ctx_shared_args_t *shared_args_p, /**< shared data */
        -: 1037:                                   ecma_object_t *scope_p, /**< lexical environment to use */
        -: 1038:                                   ecma_value_t this_binding) /**< value of 'ThisBinding' */
        -: 1039:{
    #####: 1040:  shared_args_p->header.status_flags |= VM_FRAME_CTX_SHARED_NON_ARROW_FUNC;
        -: 1041:
        -: 1042:  ecma_value_t ret_value;
        -: 1043:
    #####: 1044:  if (JERRY_CONTEXT (current_new_target_p) == NULL)
        -: 1045:  {
    #####: 1046:    ret_value = ecma_raise_type_error (ECMA_ERR_CLASS_CONSTRUCTOR_REQUIRES_NEW);
    #####: 1047:    goto exit;
        -: 1048:  }
        -: 1049:
    #####: 1050:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) shared_args_p->header.function_object_p;
    #####: 1051:  if (ECMA_GET_THIRD_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))
        -: 1052:  {
    #####: 1053:    this_binding = ECMA_VALUE_UNINITIALIZED;
        -: 1054:  }
        -: 1055:
    #####: 1056:  ecma_op_create_environment_record (scope_p, this_binding, shared_args_p->header.function_object_p);
        -: 1057:
        -: 1058:#if JERRY_BUILTIN_REALMS
    #####: 1059:  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);
    #####: 1060:  JERRY_CONTEXT (global_object_p) = ecma_op_function_get_realm (shared_args_p->header.bytecode_header_p);
        -: 1061:#endif /* JERRY_BUILTIN_REALMS */
        -: 1062:
    #####: 1063:  ret_value = vm_run (&shared_args_p->header, this_binding, scope_p);
        -: 1064:
        -: 1065:#if JERRY_BUILTIN_REALMS
    #####: 1066:  JERRY_CONTEXT (global_object_p) = saved_global_object_p;
        -: 1067:#endif /* JERRY_BUILTIN_REALMS */
        -: 1068:
        -: 1069:  /* ECMAScript v6, 9.2.2.13 */
    #####: 1070:  if (JERRY_UNLIKELY (this_binding == ECMA_VALUE_UNINITIALIZED))
        -: 1071:  {
    #####: 1072:    if (!ECMA_IS_VALUE_ERROR (ret_value) && !ecma_is_value_object (ret_value))
        -: 1073:    {
    #####: 1074:      if (!ecma_is_value_undefined (ret_value))
        -: 1075:      {
    #####: 1076:        ecma_free_value (ret_value);
    #####: 1077:        ret_value = ecma_raise_type_error (ECMA_ERR_DERIVED_CTOR_RETURN_NOR_OBJECT_OR_UNDEFINED);
        -: 1078:      }
        -: 1079:      else
        -: 1080:      {
    #####: 1081:        ret_value = ecma_op_get_this_binding (scope_p);
        -: 1082:      }
        -: 1083:    }
        -: 1084:  }
        -: 1085:
    #####: 1086:exit:
    #####: 1087:  if (JERRY_UNLIKELY (shared_args_p->header.status_flags & VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV))
        -: 1088:  {
    #####: 1089:    ecma_deref_object (scope_p);
        -: 1090:  }
        -: 1091:
    #####: 1092:  return ret_value;
        -: 1093:} /* ecma_op_function_call_constructor */
        -: 1094:
        -: 1095:#endif /* JERRY_ESNEXT */
        -: 1096:
        -: 1097:/**
        -: 1098: * Perform a JavaScript function object method call.
        -: 1099: *
        -: 1100: * The input function object should be a pure JavaScript method
        -: 1101: *
        -: 1102: * @return the result of the function call.
        -: 1103: */
        -: 1104:static ecma_value_t
    #####: 1105:ecma_op_function_call_simple (ecma_object_t *func_obj_p, /**< Function object */
        -: 1106:                              ecma_value_t this_binding, /**< 'this' argument's value */
        -: 1107:                              const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1108:                              uint32_t arguments_list_len) /**< length of arguments list */
        -: 1109:{
    #####: 1110:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION);
        -: 1111:
    #####: 1112:  vm_frame_ctx_shared_args_t shared_args;
    #####: 1113:  shared_args.header.status_flags = VM_FRAME_CTX_SHARED_HAS_ARG_LIST;
    #####: 1114:  shared_args.header.function_object_p = func_obj_p;
    #####: 1115:  shared_args.arg_list_p = arguments_list_p;
    #####: 1116:  shared_args.arg_list_len = arguments_list_len;
        -: 1117:
        -: 1118:  /* Entering Function Code (ECMA-262 v5, 10.4.3) */
    #####: 1119:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_obj_p;
        -: 1120:
    #####: 1121:  ecma_object_t *scope_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t, ext_func_p->u.function.scope_cp);
        -: 1122:
        -: 1123:  /* 8. */
    #####: 1124:  const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);
    #####: 1125:  uint16_t status_flags = bytecode_data_p->status_flags;
        -: 1126:
    #####: 1127:  shared_args.header.bytecode_header_p = bytecode_data_p;
        -: 1128:
        -: 1129:#if JERRY_BUILTIN_REALMS
    #####: 1130:  ecma_global_object_t *realm_p = ecma_op_function_get_realm (bytecode_data_p);
        -: 1131:#endif /* JERRY_BUILTIN_REALMS */
        -: 1132:
        -: 1133:  /* 5. */
    #####: 1134:  if (!(status_flags & CBC_CODE_FLAGS_LEXICAL_ENV_NOT_NEEDED))
        -: 1135:  {
    #####: 1136:    shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV;
    #####: 1137:    scope_p = ecma_create_decl_lex_env (scope_p);
        -: 1138:  }
        -: 1139:
        -: 1140:  /* 1. */
    #####: 1141:  switch (CBC_FUNCTION_GET_TYPE (status_flags))
        -: 1142:  {
        -: 1143:#if JERRY_ESNEXT
    #####: 1144:    case CBC_FUNCTION_CONSTRUCTOR:
        -: 1145:    {
    #####: 1146:      return ecma_op_function_call_constructor (&shared_args, scope_p, this_binding);
        -: 1147:    }
    #####: 1148:    case CBC_FUNCTION_ARROW:
        -: 1149:    {
    #####: 1150:      ecma_arrow_function_t *arrow_func_p = (ecma_arrow_function_t *) func_obj_p;
        -: 1151:
    #####: 1152:      if (ecma_is_value_undefined (arrow_func_p->new_target))
        -: 1153:      {
    #####: 1154:        JERRY_CONTEXT (current_new_target_p) = NULL;
        -: 1155:      }
        -: 1156:      else
        -: 1157:      {
    #####: 1158:        JERRY_CONTEXT (current_new_target_p) = ecma_get_object_from_value (arrow_func_p->new_target);
        -: 1159:      }
        -: 1160:
    #####: 1161:      this_binding = arrow_func_p->this_binding;
    #####: 1162:      break;
        -: 1163:    }
        -: 1164:
        -: 1165:#endif /* JERRY_ESNEXT */
    #####: 1166:    default:
        -: 1167:    {
        -: 1168:#if JERRY_ESNEXT
    #####: 1169:      shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_NON_ARROW_FUNC;
        -: 1170:#endif /* JERRY_ESNEXT */
        -: 1171:
    #####: 1172:      if (status_flags & CBC_CODE_FLAGS_STRICT_MODE)
        -: 1173:      {
    #####: 1174:        break;
        -: 1175:      }
        -: 1176:
    #####: 1177:      if (ecma_is_value_undefined (this_binding) || ecma_is_value_null (this_binding))
        -: 1178:      {
        -: 1179:        /* 2. */
        -: 1180:#if JERRY_BUILTIN_REALMS
    #####: 1181:        this_binding = realm_p->this_binding;
        -: 1182:#else /* !JERRY_BUILTIN_REALMS */
    #####: 1183:        this_binding = ecma_make_object_value (ecma_builtin_get_global ());
        -: 1184:#endif /* JERRY_BUILTIN_REALMS */
        -: 1185:      }
    #####: 1186:      else if (!ecma_is_value_object (this_binding))
        -: 1187:      {
        -: 1188:        /* 3., 4. */
    #####: 1189:        this_binding = ecma_op_to_object (this_binding);
    #####: 1190:        shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_THIS;
        -: 1191:
    #####: 1192:        JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (this_binding));
        -: 1193:      }
    #####: 1194:      break;
        -: 1195:    }
        -: 1196:  }
        -: 1197:
        -: 1198:#if JERRY_BUILTIN_REALMS
    #####: 1199:  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);
    #####: 1200:  JERRY_CONTEXT (global_object_p) = realm_p;
        -: 1201:#endif /* JERRY_BUILTIN_REALMS */
        -: 1202:
    #####: 1203:  ecma_value_t ret_value = vm_run (&shared_args.header, this_binding, scope_p);
        -: 1204:
        -: 1205:#if JERRY_BUILTIN_REALMS
    #####: 1206:  JERRY_CONTEXT (global_object_p) = saved_global_object_p;
        -: 1207:#endif /* JERRY_BUILTIN_REALMS */
        -: 1208:
    #####: 1209:  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV))
        -: 1210:  {
    #####: 1211:    ecma_deref_object (scope_p);
        -: 1212:  }
        -: 1213:
    #####: 1214:  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_THIS))
        -: 1215:  {
    #####: 1216:    ecma_free_value (this_binding);
        -: 1217:  }
        -: 1218:
    #####: 1219:  return ret_value;
        -: 1220:} /* ecma_op_function_call_simple */
        -: 1221:
        -: 1222:/**
        -: 1223: * Perform a built-in method call.
        -: 1224: *
        -: 1225: * @return the result of the function call.
        -: 1226: */
        -: 1227:static ecma_value_t JERRY_ATTR_NOINLINE
        4: 1228:ecma_op_function_call_native_built_in (ecma_object_t *func_obj_p, /**< Function object */
        -: 1229:                                       ecma_value_t this_arg_value, /**< 'this' argument's value */
        -: 1230:                                       const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1231:                                       uint32_t arguments_list_len) /**< length of arguments list */
        -: 1232:{
        4: 1233:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
        -: 1234:
        -: 1235:#if JERRY_BUILTIN_REALMS
        4: 1236:  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);
        -: 1237:
        4: 1238:  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) func_obj_p;
        4: 1239:  JERRY_CONTEXT (global_object_p) =
        4: 1240:    ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t, ext_func_obj_p->u.built_in.realm_value);
        -: 1241:#endif /* JERRY_BUILTIN_REALMS */
        -: 1242:
        4: 1243:  ecma_value_t ret_value =
        -: 1244:    ecma_builtin_dispatch_call (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
        -: 1245:
        -: 1246:#if JERRY_BUILTIN_REALMS
        3: 1247:  JERRY_CONTEXT (global_object_p) = saved_global_object_p;
        -: 1248:#endif /* JERRY_BUILTIN_REALMS */
        3: 1249:  return ret_value;
        -: 1250:} /* ecma_op_function_call_native_built_in */
        -: 1251:
        -: 1252:/**
        -: 1253: * Perform a native C method call which was registered via the API.
        -: 1254: *
        -: 1255: * @return the result of the function call.
        -: 1256: */
        -: 1257:static ecma_value_t JERRY_ATTR_NOINLINE
    #####: 1258:ecma_op_function_call_native (ecma_object_t *func_obj_p, /**< Function object */
        -: 1259:                              ecma_value_t this_arg_value, /**< 'this' argument's value */
        -: 1260:                              const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1261:                              uint32_t arguments_list_len) /**< length of arguments list */
        -: 1262:{
    #####: 1263:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_NATIVE_FUNCTION);
        -: 1264:
    #####: 1265:  ecma_native_function_t *native_function_p = (ecma_native_function_t *) func_obj_p;
        -: 1266:
        -: 1267:#if JERRY_BUILTIN_REALMS
    #####: 1268:  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);
    #####: 1269:  JERRY_CONTEXT (global_object_p) =
    #####: 1270:    ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t, native_function_p->realm_value);
        -: 1271:#endif /* JERRY_BUILTIN_REALMS */
        -: 1272:
    #####: 1273:  jerry_call_info_t call_info;
    #####: 1274:  call_info.function = ecma_make_object_value (func_obj_p);
    #####: 1275:  call_info.this_value = this_arg_value;
        -: 1276:
        -: 1277:#if JERRY_ESNEXT
    #####: 1278:  ecma_object_t *new_target_p = JERRY_CONTEXT (current_new_target_p);
    #####: 1279:  call_info.new_target = (new_target_p == NULL) ? ECMA_VALUE_UNDEFINED : ecma_make_object_value (new_target_p);
        -: 1280:#else /* JERRY_ESNEXT */
    #####: 1281:  call_info.new_target = ECMA_VALUE_UNDEFINED;
        -: 1282:#endif /* JERRY_ESNEXT */
        -: 1283:
    #####: 1284:  JERRY_ASSERT (native_function_p->native_handler_cb != NULL);
    #####: 1285:  ecma_value_t ret_value = native_function_p->native_handler_cb (&call_info, arguments_list_p, arguments_list_len);
        -: 1286:#if JERRY_BUILTIN_REALMS
    #####: 1287:  JERRY_CONTEXT (global_object_p) = saved_global_object_p;
        -: 1288:#endif /* JERRY_BUILTIN_REALMS */
        -: 1289:
    #####: 1290:  if (JERRY_UNLIKELY (ecma_is_value_exception (ret_value)))
        -: 1291:  {
    #####: 1292:    ecma_throw_exception (ret_value);
    #####: 1293:    return ECMA_VALUE_ERROR;
        -: 1294:  }
        -: 1295:
        -: 1296:#if JERRY_DEBUGGER
        -: 1297:  JERRY_DEBUGGER_CLEAR_FLAGS (JERRY_DEBUGGER_VM_EXCEPTION_THROWN);
        -: 1298:#endif /* JERRY_DEBUGGER */
    #####: 1299:  return ret_value;
        -: 1300:} /* ecma_op_function_call_native */
        -: 1301:
        -: 1302:/**
        -: 1303: * Append the bound arguments into the given collection
        -: 1304: *
        -: 1305: * Note:
        -: 1306: *       - The whole bound chain is resolved
        -: 1307: *       - The first element of the collection contains the bounded this value
        -: 1308: *
        -: 1309: * @return target function of the bound function
        -: 1310: */
        -: 1311:JERRY_ATTR_NOINLINE static ecma_object_t *
    #####: 1312:ecma_op_bound_function_get_argument_list (ecma_object_t *func_obj_p, /**< bound bunction object */
        -: 1313:                                          ecma_collection_t *list_p) /**< list of arguments */
        -: 1314:{
    #####: 1315:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -: 1316:
    #####: 1317:  ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) func_obj_p;
        -: 1318:
    #####: 1319:  func_obj_p =
    #####: 1320:    ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t, bound_func_p->header.u.bound_function.target_function);
        -: 1321:
    #####: 1322:  ecma_value_t args_len_or_this = bound_func_p->header.u.bound_function.args_len_or_this;
        -: 1323:
    #####: 1324:  uint32_t args_length = 1;
        -: 1325:
    #####: 1326:  if (ecma_is_value_integer_number (args_len_or_this))
        -: 1327:  {
    #####: 1328:    args_length = (uint32_t) ecma_get_integer_from_value (args_len_or_this);
        -: 1329:  }
        -: 1330:
        -: 1331:  /* 5. */
    #####: 1332:  if (args_length != 1)
        -: 1333:  {
    #####: 1334:    const ecma_value_t *args_p = (const ecma_value_t *) (bound_func_p + 1);
    #####: 1335:    list_p->buffer_p[0] = *args_p;
        -: 1336:
    #####: 1337:    if (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION)
        -: 1338:    {
    #####: 1339:      func_obj_p = ecma_op_bound_function_get_argument_list (func_obj_p, list_p);
        -: 1340:    }
    #####: 1341:    ecma_collection_append (list_p, args_p + 1, args_length - 1);
        -: 1342:  }
        -: 1343:  else
        -: 1344:  {
    #####: 1345:    list_p->buffer_p[0] = args_len_or_this;
        -: 1346:  }
        -: 1347:
    #####: 1348:  return func_obj_p;
        -: 1349:} /* ecma_op_bound_function_get_argument_list */
        -: 1350:
        -: 1351:/**
        -: 1352: * [[Call]] internal method for bound function objects
        -: 1353: *
        -: 1354: * @return ecma value
        -: 1355: *         Returned value must be freed with ecma_free_value
        -: 1356: */
        -: 1357:static ecma_value_t JERRY_ATTR_NOINLINE
    #####: 1358:ecma_op_function_call_bound (ecma_object_t *func_obj_p, /**< Function object */
        -: 1359:                             const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1360:                             uint32_t arguments_list_len) /**< length of arguments list */
        -: 1361:{
    #####: 1362:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -: 1363:
    #####: 1364:  JERRY_CONTEXT (status_flags) &= (uint32_t) ~ECMA_STATUS_DIRECT_EVAL;
        -: 1365:
    #####: 1366:  ecma_collection_t *bound_arg_list_p = ecma_new_collection ();
    #####: 1367:  ecma_collection_push_back (bound_arg_list_p, ECMA_VALUE_EMPTY);
        -: 1368:
    #####: 1369:  ecma_object_t *target_obj_p = ecma_op_bound_function_get_argument_list (func_obj_p, bound_arg_list_p);
        -: 1370:
    #####: 1371:  ecma_collection_append (bound_arg_list_p, arguments_list_p, arguments_list_len);
        -: 1372:
    #####: 1373:  JERRY_ASSERT (!ecma_is_value_empty (bound_arg_list_p->buffer_p[0]));
        -: 1374:
    #####: 1375:  ecma_value_t ret_value = ecma_op_function_call (target_obj_p,
    #####: 1376:                                                  bound_arg_list_p->buffer_p[0],
    #####: 1377:                                                  bound_arg_list_p->buffer_p + 1,
    #####: 1378:                                                  (uint32_t) (bound_arg_list_p->item_count - 1));
        -: 1379:
    #####: 1380:  ecma_collection_destroy (bound_arg_list_p);
        -: 1381:
    #####: 1382:  return ret_value;
        -: 1383:} /* ecma_op_function_call_bound */
        -: 1384:
        -: 1385:/**
        -: 1386: * General [[Call]] implementation
        -: 1387: *
        -: 1388: * @return ecma value
        -: 1389: *         Returned value must be freed with ecma_free_value
        -: 1390: */
        -: 1391:extern inline ecma_value_t JERRY_ATTR_ALWAYS_INLINE
        2: 1392:ecma_op_function_validated_call (ecma_value_t callee, /**< callee */
        -: 1393:                                 ecma_value_t this_arg_value, /**< 'this' argument's value */
        -: 1394:                                 const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1395:                                 uint32_t arguments_list_len) /**< length of arguments list */
        -: 1396:{
        2: 1397:  if (!ecma_is_value_object (callee))
        -: 1398:  {
    #####: 1399:    return ecma_raise_type_error (ECMA_ERR_EXPECTED_A_FUNCTION);
        -: 1400:  }
        -: 1401:
        2: 1402:  return ecma_op_function_call (ecma_get_object_from_value (callee),
        -: 1403:                                this_arg_value,
        -: 1404:                                arguments_list_p,
        -: 1405:                                arguments_list_len);
        -: 1406:} /* ecma_op_function_validated_call */
        -: 1407:
        -: 1408:/**
        -: 1409: * General [[Call]] implementation
        -: 1410: *
        -: 1411: * @return ecma value
        -: 1412: *         Returned value must be freed with ecma_free_value
        -: 1413: */
        -: 1414:ecma_value_t
        4: 1415:ecma_op_function_call (ecma_object_t *func_obj_p, /**< Function object */
        -: 1416:                       ecma_value_t this_arg_value, /**< 'this' argument's value */
        -: 1417:                       const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1418:                       uint32_t arguments_list_len) /**< length of arguments list */
        -: 1419:{
        4: 1420:  JERRY_ASSERT (func_obj_p != NULL && !ecma_is_lexical_environment (func_obj_p));
        -: 1421:
        4: 1422:  ECMA_CHECK_STACK_USAGE ();
        -: 1423:
        -: 1424:#if JERRY_ESNEXT
        4: 1425:  ecma_object_t *old_new_target_p = JERRY_CONTEXT (current_new_target_p);
        -: 1426:
        4: 1427:  if (JERRY_UNLIKELY (!(JERRY_CONTEXT (status_flags) & ECMA_STATUS_DIRECT_EVAL)))
        -: 1428:  {
        4: 1429:    JERRY_CONTEXT (current_new_target_p) = NULL;
        -: 1430:  }
        -: 1431:#endif /* JERRY_ESNEXT */
        -: 1432:
        -: 1433:  ecma_value_t result;
        -: 1434:
        4: 1435:  switch (ecma_get_object_type (func_obj_p))
        -: 1436:  {
    #####: 1437:    case ECMA_OBJECT_TYPE_FUNCTION:
        -: 1438:    {
    #####: 1439:      result = ecma_op_function_call_simple (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
    #####: 1440:      break;
        -: 1441:    }
        4: 1442:    case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:
        -: 1443:    {
        4: 1444:      result = ecma_op_function_call_native_built_in (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
        3: 1445:      break;
        -: 1446:    }
        -: 1447:#if JERRY_BUILTIN_PROXY
    #####: 1448:    case ECMA_OBJECT_TYPE_PROXY:
        -: 1449:    {
    #####: 1450:      result = ecma_proxy_object_call (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
    #####: 1451:      break;
        -: 1452:    }
        -: 1453:#endif /* JERRY_BUILTIN_PROXY */
        -: 1454:#if JERRY_ESNEXT
    #####: 1455:    case ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION:
        -: 1456:    {
    #####: 1457:      result = ecma_raise_type_error (ECMA_ERR_CLASS_CONSTRUCTOR_NEW);
    #####: 1458:      break;
        -: 1459:    }
        -: 1460:#endif /* JERRY_ESNEXT */
    #####: 1461:    case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:
        -: 1462:    {
    #####: 1463:      result = ecma_op_function_call_native (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);
    #####: 1464:      break;
        -: 1465:    }
    #####: 1466:    case ECMA_OBJECT_TYPE_BOUND_FUNCTION:
        -: 1467:    {
    #####: 1468:      result = ecma_op_function_call_bound (func_obj_p, arguments_list_p, arguments_list_len);
    #####: 1469:      break;
        -: 1470:    }
    #####: 1471:    default:
        -: 1472:    {
    #####: 1473:      result = ecma_raise_type_error (ECMA_ERR_EXPECTED_A_FUNCTION);
    #####: 1474:      break;
        -: 1475:    }
        -: 1476:  }
        -: 1477:
        -: 1478:#if JERRY_ESNEXT
        3: 1479:  JERRY_CONTEXT (current_new_target_p) = old_new_target_p;
        -: 1480:#endif /* JERRY_ESNEXT */
        -: 1481:
        3: 1482:  return result;
        -: 1483:} /* ecma_op_function_call */
        -: 1484:
        -: 1485:/**
        -: 1486: * [[Construct]] internal method for ECMAScript function objects
        -: 1487: *
        -: 1488: * @return ecma value
        -: 1489: *         Returned value must be freed with ecma_free_value
        -: 1490: */
        -: 1491:static ecma_value_t
    #####: 1492:ecma_op_function_construct_simple (ecma_object_t *func_obj_p, /**< Function object */
        -: 1493:                                   ecma_object_t *new_target_p, /**< new target */
        -: 1494:                                   const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1495:                                   uint32_t arguments_list_len) /**< length of arguments list */
        -: 1496:{
    #####: 1497:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION);
        -: 1498:
    #####: 1499:  ecma_object_t *new_this_obj_p = NULL;
        -: 1500:  ecma_value_t this_arg;
        -: 1501:
        -: 1502:#if JERRY_ESNEXT
    #####: 1503:  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) func_obj_p;
        -: 1504:
        -: 1505:  /* 5. */
    #####: 1506:  if (!ECMA_GET_THIRD_BIT_FROM_POINTER_TAG (ext_func_obj_p->u.function.scope_cp))
        -: 1507:  {
        -: 1508:#endif /* JERRY_ESNEXT */
        -: 1509:    /* 5.a */
    #####: 1510:    ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (new_target_p, ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -: 1511:
        -: 1512:    /* 5.b */
    #####: 1513:    if (JERRY_UNLIKELY (proto_p == NULL))
        -: 1514:    {
    #####: 1515:      return ECMA_VALUE_ERROR;
        -: 1516:    }
        -: 1517:
    #####: 1518:    new_this_obj_p = ecma_create_object (proto_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####: 1519:    ecma_deref_object (proto_p);
    #####: 1520:    this_arg = ecma_make_object_value (new_this_obj_p);
        -: 1521:#if JERRY_ESNEXT
        -: 1522:  }
        -: 1523:  else
        -: 1524:  {
    #####: 1525:    this_arg = ECMA_VALUE_UNDEFINED;
        -: 1526:  }
        -: 1527:
        -: 1528:  /* 6. */
    #####: 1529:  ecma_object_t *old_new_target_p = JERRY_CONTEXT (current_new_target_p);
    #####: 1530:  JERRY_CONTEXT (current_new_target_p) = new_target_p;
        -: 1531:#endif /* JERRY_ESNEXT */
        -: 1532:
    #####: 1533:  ecma_value_t ret_value = ecma_op_function_call_simple (func_obj_p, this_arg, arguments_list_p, arguments_list_len);
        -: 1534:
        -: 1535:#if JERRY_ESNEXT
    #####: 1536:  JERRY_CONTEXT (current_new_target_p) = old_new_target_p;
        -: 1537:#endif /* JERRY_ESNEXT */
        -: 1538:
        -: 1539:  /* 13.a */
    #####: 1540:  if (ECMA_IS_VALUE_ERROR (ret_value) || ecma_is_value_object (ret_value))
        -: 1541:  {
        -: 1542:#if JERRY_ESNEXT
    #####: 1543:    if (new_this_obj_p != NULL)
        -: 1544:    {
    #####: 1545:      ecma_deref_object (new_this_obj_p);
        -: 1546:    }
        -: 1547:#else /* !JERRY_ESNEXT */
    #####: 1548:    ecma_deref_object (new_this_obj_p);
        -: 1549:#endif /* JERRY_ESNEXT */
    #####: 1550:    return ret_value;
        -: 1551:  }
        -: 1552:
        -: 1553:  /* 13.b */
    #####: 1554:  ecma_free_value (ret_value);
    #####: 1555:  return this_arg;
        -: 1556:} /* ecma_op_function_construct_simple */
        -: 1557:
        -: 1558:/**
        -: 1559: * [[Construct]] internal method for built-in function objects
        -: 1560: *
        -: 1561: * @return ecma value
        -: 1562: *         Returned value must be freed with ecma_free_value
        -: 1563: */
        -: 1564:static ecma_value_t
        3: 1565:ecma_op_function_construct_built_in (ecma_object_t *func_obj_p, /**< Function object */
        -: 1566:                                     ecma_object_t *new_target_p, /**< new target */
        -: 1567:                                     const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1568:                                     uint32_t arguments_list_len) /**< length of arguments list */
        -: 1569:{
        -: 1570:  JERRY_UNUSED (new_target_p);
        -: 1571:
        3: 1572:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);
        -: 1573:
        -: 1574:#if JERRY_BUILTIN_REALMS
        3: 1575:  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);
        3: 1576:  ecma_value_t realm_value = ((ecma_extended_object_t *) func_obj_p)->u.built_in.realm_value;
        3: 1577:  JERRY_CONTEXT (global_object_p) = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t, realm_value);
        -: 1578:#endif /* JERRY_BUILTIN_REALMS */
        -: 1579:
        -: 1580:#if JERRY_ESNEXT
        3: 1581:  ecma_object_t *old_new_target = JERRY_CONTEXT (current_new_target_p);
        3: 1582:  JERRY_CONTEXT (current_new_target_p) = new_target_p;
        -: 1583:#endif /* JERRY_ESNEXT */
        -: 1584:
        3: 1585:  ecma_value_t ret_value = ecma_builtin_dispatch_construct (func_obj_p, arguments_list_p, arguments_list_len);
        -: 1586:
        -: 1587:#if JERRY_ESNEXT
        3: 1588:  JERRY_CONTEXT (current_new_target_p) = old_new_target;
        -: 1589:#endif /* JERRY_ESNEXT */
        -: 1590:
        -: 1591:#if JERRY_BUILTIN_REALMS
        3: 1592:  JERRY_CONTEXT (global_object_p) = saved_global_object_p;
        -: 1593:#endif /* JERRY_BUILTIN_REALMS */
        3: 1594:  return ret_value;
        -: 1595:} /* ecma_op_function_construct_built_in */
        -: 1596:
        -: 1597:/**
        -: 1598: * [[Construct]] internal method for bound function objects
        -: 1599: *
        -: 1600: * @return ecma value
        -: 1601: *         Returned value must be freed with ecma_free_value
        -: 1602: */
        -: 1603:static ecma_value_t JERRY_ATTR_NOINLINE
    #####: 1604:ecma_op_function_construct_bound (ecma_object_t *func_obj_p, /**< Function object */
        -: 1605:                                  ecma_object_t *new_target_p, /**< new target */
        -: 1606:                                  const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1607:                                  uint32_t arguments_list_len) /**< length of arguments list */
        -: 1608:{
    #####: 1609:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -: 1610:
    #####: 1611:  ecma_collection_t *bound_arg_list_p = ecma_new_collection ();
    #####: 1612:  ecma_collection_push_back (bound_arg_list_p, ECMA_VALUE_EMPTY);
        -: 1613:
    #####: 1614:  ecma_object_t *target_obj_p = ecma_op_bound_function_get_argument_list (func_obj_p, bound_arg_list_p);
        -: 1615:
    #####: 1616:  ecma_collection_append (bound_arg_list_p, arguments_list_p, arguments_list_len);
        -: 1617:
    #####: 1618:  if (func_obj_p == new_target_p)
        -: 1619:  {
    #####: 1620:    new_target_p = target_obj_p;
        -: 1621:  }
        -: 1622:
    #####: 1623:  ecma_value_t ret_value = ecma_op_function_construct (target_obj_p,
        -: 1624:                                                       new_target_p,
    #####: 1625:                                                       bound_arg_list_p->buffer_p + 1,
    #####: 1626:                                                       (uint32_t) (bound_arg_list_p->item_count - 1));
        -: 1627:
    #####: 1628:  ecma_collection_destroy (bound_arg_list_p);
        -: 1629:
    #####: 1630:  return ret_value;
        -: 1631:} /* ecma_op_function_construct_bound */
        -: 1632:
        -: 1633:#if JERRY_ESNEXT
        -: 1634:
        -: 1635:/**
        -: 1636: * [[Construct]] internal method for class implicit constructor objects
        -: 1637: *
        -: 1638: * @return ecma value
        -: 1639: *         Returned value must be freed with ecma_free_value
        -: 1640: */
        -: 1641:static ecma_value_t
    #####: 1642:ecma_op_function_construct_constructor (ecma_object_t *func_obj_p, /**< Function object */
        -: 1643:                                        ecma_object_t *new_target_p, /**< new target */
        -: 1644:                                        const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1645:                                        uint32_t arguments_list_len) /**< length of arguments list */
        -: 1646:{
    #####: 1647:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION);
        -: 1648:
    #####: 1649:  ecma_extended_object_t *constructor_object_p = (ecma_extended_object_t *) func_obj_p;
        -: 1650:
    #####: 1651:  if (!(constructor_object_p->u.constructor_function.flags & ECMA_CONSTRUCTOR_FUNCTION_HAS_HERITAGE))
        -: 1652:  {
    #####: 1653:    ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (new_target_p, ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -: 1654:
    #####: 1655:    if (JERRY_UNLIKELY (proto_p == NULL))
        -: 1656:    {
    #####: 1657:      return ECMA_VALUE_ERROR;
        -: 1658:    }
        -: 1659:
    #####: 1660:    ecma_object_t *new_this_object_p = ecma_create_object (proto_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####: 1661:    ecma_deref_object (proto_p);
        -: 1662:
    #####: 1663:    jerry_value_t new_this_value = ecma_make_object_value (new_this_object_p);
    #####: 1664:    jerry_value_t ret_value = opfunc_init_class_fields (func_obj_p, new_this_value);
        -: 1665:
    #####: 1666:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -: 1667:    {
    #####: 1668:      ecma_deref_object (new_this_object_p);
    #####: 1669:      return ret_value;
        -: 1670:    }
        -: 1671:
    #####: 1672:    return new_this_value;
        -: 1673:  }
        -: 1674:
    #####: 1675:  ecma_value_t super_ctor = ecma_op_function_get_super_constructor (func_obj_p);
        -: 1676:
    #####: 1677:  if (ECMA_IS_VALUE_ERROR (super_ctor))
        -: 1678:  {
    #####: 1679:    return super_ctor;
        -: 1680:  }
        -: 1681:
    #####: 1682:  ecma_object_t *super_ctor_p = ecma_get_object_from_value (super_ctor);
    #####: 1683:  ecma_value_t result = ecma_op_function_construct (super_ctor_p, new_target_p, arguments_list_p, arguments_list_len);
    #####: 1684:  ecma_deref_object (super_ctor_p);
        -: 1685:
    #####: 1686:  if (ecma_is_value_object (result))
        -: 1687:  {
    #####: 1688:    ecma_value_t fields_value = opfunc_init_class_fields (func_obj_p, result);
        -: 1689:
    #####: 1690:    if (ECMA_IS_VALUE_ERROR (fields_value))
        -: 1691:    {
    #####: 1692:      ecma_free_value (result);
    #####: 1693:      return fields_value;
        -: 1694:    }
        -: 1695:  }
        -: 1696:
    #####: 1697:  return result;
        -: 1698:} /* ecma_op_function_construct_constructor */
        -: 1699:
        -: 1700:#endif /* JERRY_ESNEXT */
        -: 1701:
        -: 1702:/**
        -: 1703: * [[Construct]] internal method for external function objects
        -: 1704: *
        -: 1705: * @return ecma value
        -: 1706: *         Returned value must be freed with ecma_free_value
        -: 1707: */
        -: 1708:static ecma_value_t
    #####: 1709:ecma_op_function_construct_native (ecma_object_t *func_obj_p, /**< Function object */
        -: 1710:                                   ecma_object_t *new_target_p, /**< new target */
        -: 1711:                                   const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1712:                                   uint32_t arguments_list_len) /**< length of arguments list */
        -: 1713:{
    #####: 1714:  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_NATIVE_FUNCTION);
        -: 1715:
    #####: 1716:  ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (new_target_p, ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -: 1717:
    #####: 1718:  if (JERRY_UNLIKELY (proto_p == NULL))
        -: 1719:  {
    #####: 1720:    return ECMA_VALUE_ERROR;
        -: 1721:  }
        -: 1722:
    #####: 1723:  ecma_object_t *new_this_obj_p = ecma_create_object (proto_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####: 1724:  ecma_value_t this_arg = ecma_make_object_value (new_this_obj_p);
    #####: 1725:  ecma_deref_object (proto_p);
        -: 1726:
        -: 1727:#if JERRY_ESNEXT
    #####: 1728:  ecma_object_t *old_new_target_p = JERRY_CONTEXT (current_new_target_p);
    #####: 1729:  JERRY_CONTEXT (current_new_target_p) = new_target_p;
        -: 1730:#endif /* JERRY_ESNEXT */
        -: 1731:
    #####: 1732:  ecma_value_t ret_value = ecma_op_function_call_native (func_obj_p, this_arg, arguments_list_p, arguments_list_len);
        -: 1733:
        -: 1734:#if JERRY_ESNEXT
    #####: 1735:  JERRY_CONTEXT (current_new_target_p) = old_new_target_p;
        -: 1736:#endif /* JERRY_ESNEXT */
        -: 1737:
    #####: 1738:  if (ECMA_IS_VALUE_ERROR (ret_value) || ecma_is_value_object (ret_value))
        -: 1739:  {
    #####: 1740:    ecma_deref_object (new_this_obj_p);
    #####: 1741:    return ret_value;
        -: 1742:  }
        -: 1743:
    #####: 1744:  ecma_free_value (ret_value);
        -: 1745:
    #####: 1746:  return this_arg;
        -: 1747:} /* ecma_op_function_construct_native */
        -: 1748:
        -: 1749:/**
        -: 1750: * General [[Construct]] implementation function objects
        -: 1751: *
        -: 1752: * See also: ECMAScript v6, 9.2.2
        -: 1753: *
        -: 1754: * @return ecma value
        -: 1755: *         Returned value must be freed with ecma_free_value
        -: 1756: */
        -: 1757:ecma_value_t
        3: 1758:ecma_op_function_construct (ecma_object_t *func_obj_p, /**< Function object */
        -: 1759:                            ecma_object_t *new_target_p, /**< new target */
        -: 1760:                            const ecma_value_t *arguments_list_p, /**< arguments list */
        -: 1761:                            uint32_t arguments_list_len) /**< length of arguments list */
        -: 1762:{
        3: 1763:  JERRY_ASSERT (func_obj_p != NULL && !ecma_is_lexical_environment (func_obj_p));
        -: 1764:
        3: 1765:  switch (ecma_get_object_type (func_obj_p))
        -: 1766:  {
    #####: 1767:    case ECMA_OBJECT_TYPE_FUNCTION:
        -: 1768:    {
    #####: 1769:      return ecma_op_function_construct_simple (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1770:    }
        3: 1771:    case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:
        -: 1772:    {
        3: 1773:      return ecma_op_function_construct_built_in (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1774:    }
        -: 1775:#if JERRY_BUILTIN_PROXY
    #####: 1776:    case ECMA_OBJECT_TYPE_PROXY:
        -: 1777:    {
    #####: 1778:      return ecma_proxy_object_construct (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1779:    }
        -: 1780:#endif /* JERRY_BUILTIN_PROXY */
        -: 1781:#if JERRY_ESNEXT
    #####: 1782:    case ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION:
        -: 1783:    {
    #####: 1784:      return ecma_op_function_construct_constructor (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1785:    }
        -: 1786:#endif /* JERRY_ESNEXT */
    #####: 1787:    case ECMA_OBJECT_TYPE_BOUND_FUNCTION:
        -: 1788:    {
    #####: 1789:      return ecma_op_function_construct_bound (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1790:    }
    #####: 1791:    case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:
        -: 1792:    {
    #####: 1793:      return ecma_op_function_construct_native (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);
        -: 1794:    }
    #####: 1795:    default:
        -: 1796:    {
    #####: 1797:      JERRY_UNREACHABLE ();
        -: 1798:    }
        -: 1799:  }
        -: 1800:
        -: 1801:  return ECMA_VALUE_UNDEFINED;
        -: 1802:} /* ecma_op_function_construct */
        -: 1803:
        -: 1804:/**
        -: 1805: * Lazy instantiation of 'prototype' property for non-builtin and external functions
        -: 1806: *
        -: 1807: * @return pointer to newly instantiated property
        -: 1808: */
        -: 1809:static ecma_property_t *
    #####: 1810:ecma_op_lazy_instantiate_prototype_object (ecma_object_t *object_p) /**< the function object */
        -: 1811:{
    #####: 1812:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION
        -: 1813:                || ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_NATIVE_FUNCTION);
        -: 1814:
        -: 1815:#if JERRY_BUILTIN_REALMS
        -: 1816:  ecma_global_object_t *global_object_p;
        -: 1817:
    #####: 1818:  if (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION)
        -: 1819:  {
        -: 1820:    const ecma_compiled_code_t *bytecode_data_p;
    #####: 1821:    bytecode_data_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) object_p);
        -: 1822:
    #####: 1823:    global_object_p = ecma_op_function_get_realm (bytecode_data_p);
        -: 1824:  }
        -: 1825:  else
        -: 1826:  {
    #####: 1827:    ecma_native_function_t *native_function_p = (ecma_native_function_t *) object_p;
        -: 1828:
    #####: 1829:    global_object_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t, native_function_p->realm_value);
        -: 1830:  }
        -: 1831:#endif /* JERRY_BUILTIN_REALMS */
        -: 1832:
        -: 1833:  /* ECMA-262 v5, 13.2, 16-18 */
        -: 1834:
    #####: 1835:  ecma_object_t *proto_object_p = NULL;
    #####: 1836:  bool init_constructor = true;
        -: 1837:
        -: 1838:#if JERRY_ESNEXT
    #####: 1839:  if (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION)
        -: 1840:  {
    #####: 1841:    const ecma_compiled_code_t *byte_code_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) object_p);
        -: 1842:
    #####: 1843:    if (!CBC_FUNCTION_HAS_PROTOTYPE (byte_code_p->status_flags))
        -: 1844:    {
    #####: 1845:      return NULL;
        -: 1846:    }
        -: 1847:
    #####: 1848:    if (CBC_FUNCTION_GET_TYPE (byte_code_p->status_flags) == CBC_FUNCTION_GENERATOR)
        -: 1849:    {
        -: 1850:      ecma_object_t *prototype_p;
        -: 1851:
        -: 1852:#if JERRY_BUILTIN_REALMS
    #####: 1853:      prototype_p = ecma_builtin_get_from_realm (global_object_p, ECMA_BUILTIN_ID_GENERATOR_PROTOTYPE);
        -: 1854:#else /* !JERRY_BUILTIN_REALMS */
        -: 1855:      prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_GENERATOR_PROTOTYPE);
        -: 1856:#endif /* JERRY_BUILTIN_REALMS */
        -: 1857:
    #####: 1858:      proto_object_p = ecma_create_object (prototype_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####: 1859:      init_constructor = false;
        -: 1860:    }
        -: 1861:
    #####: 1862:    if (CBC_FUNCTION_GET_TYPE (byte_code_p->status_flags) == CBC_FUNCTION_ASYNC_GENERATOR)
        -: 1863:    {
        -: 1864:      ecma_object_t *prototype_p;
        -: 1865:
        -: 1866:#if JERRY_BUILTIN_REALMS
    #####: 1867:      prototype_p = ecma_builtin_get_from_realm (global_object_p, ECMA_BUILTIN_ID_ASYNC_GENERATOR_PROTOTYPE);
        -: 1868:#else /* !JERRY_BUILTIN_REALMS */
        -: 1869:      prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_ASYNC_GENERATOR_PROTOTYPE);
        -: 1870:#endif /* JERRY_BUILTIN_REALMS */
        -: 1871:
    #####: 1872:      proto_object_p = ecma_create_object (prototype_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####: 1873:      init_constructor = false;
        -: 1874:    }
        -: 1875:  }
        -: 1876:#endif /* JERRY_ESNEXT */
        -: 1877:
        -: 1878:#if JERRY_ESNEXT
    #####: 1879:  if (proto_object_p == NULL)
        -: 1880:#endif /* JERRY_ESNEXT */
        -: 1881:  {
        -: 1882:    ecma_object_t *prototype_p;
        -: 1883:
        -: 1884:#if JERRY_BUILTIN_REALMS
    #####: 1885:    prototype_p = ecma_builtin_get_from_realm (global_object_p, ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -: 1886:#else /* !JERRY_BUILTIN_REALMS */
    #####: 1887:    prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -: 1888:#endif /* JERRY_BUILTIN_REALMS */
        -: 1889:
    #####: 1890:    proto_object_p = ecma_op_create_object_object_noarg_and_set_prototype (prototype_p);
        -: 1891:  }
        -: 1892:
        -: 1893:  /* 17. */
    #####: 1894:  if (init_constructor)
        -: 1895:  {
        -: 1896:    ecma_property_value_t *constructor_prop_value_p;
    #####: 1897:    constructor_prop_value_p = ecma_create_named_data_property (proto_object_p,
        -: 1898:                                                                ecma_get_magic_string (LIT_MAGIC_STRING_CONSTRUCTOR),
        -: 1899:                                                                ECMA_PROPERTY_CONFIGURABLE_WRITABLE,
        -: 1900:                                                                NULL);
        -: 1901:
    #####: 1902:    constructor_prop_value_p->value = ecma_make_object_value (object_p);
        -: 1903:  }
        -: 1904:
        -: 1905:  /* 18. */
    #####: 1906:  ecma_property_t *prototype_prop_p;
        -: 1907:  ecma_property_value_t *prototype_prop_value_p;
    #####: 1908:  prototype_prop_value_p = ecma_create_named_data_property (object_p,
        -: 1909:                                                            ecma_get_magic_string (LIT_MAGIC_STRING_PROTOTYPE),
        -: 1910:                                                            ECMA_PROPERTY_BUILT_IN_WRITABLE,
        -: 1911:                                                            &prototype_prop_p);
        -: 1912:
    #####: 1913:  prototype_prop_value_p->value = ecma_make_object_value (proto_object_p);
        -: 1914:
    #####: 1915:  ecma_deref_object (proto_object_p);
        -: 1916:
    #####: 1917:  return prototype_prop_p;
        -: 1918:} /* ecma_op_lazy_instantiate_prototype_object */
        -: 1919:
        -: 1920:/**
        -: 1921: * Lazy instantiation of non-builtin ecma function object's properties
        -: 1922: *
        -: 1923: * Warning:
        -: 1924: *         Only non-configurable properties could be instantiated lazily in this function,
        -: 1925: *         as configurable properties could be deleted and it would be incorrect
        -: 1926: *         to reinstantiate them in the function in second time.
        -: 1927: *
        -: 1928: * @return pointer to newly instantiated property, if a property was instantiated,
        -: 1929: *         NULL - otherwise
        -: 1930: */
        -: 1931:ecma_property_t *
    #####: 1932:ecma_op_function_try_to_lazy_instantiate_property (ecma_object_t *object_p, /**< the function object */
        -: 1933:                                                   ecma_string_t *property_name_p) /**< property name */
        -: 1934:{
    #####: 1935:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION);
        -: 1936:
        -: 1937:#if JERRY_ESNEXT
    #####: 1938:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_LENGTH))
        -: 1939:  {
    #####: 1940:    ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
        -: 1941:
    #####: 1942:    if (ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))
        -: 1943:    {
    #####: 1944:      return NULL;
        -: 1945:    }
        -: 1946:
        -: 1947:    /* Initialize 'length' property */
    #####: 1948:    const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);
        -: 1949:    uint32_t len;
        -: 1950:
    #####: 1951:    if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)
        -: 1952:    {
    #####: 1953:      cbc_uint16_arguments_t *args_p = (cbc_uint16_arguments_t *) bytecode_data_p;
    #####: 1954:      len = args_p->argument_end;
        -: 1955:    }
        -: 1956:    else
        -: 1957:    {
    #####: 1958:      cbc_uint8_arguments_t *args_p = (cbc_uint8_arguments_t *) bytecode_data_p;
    #####: 1959:      len = args_p->argument_end;
        -: 1960:    }
        -: 1961:
    #####: 1962:    if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_HAS_EXTENDED_INFO)
        -: 1963:    {
    #####: 1964:      uint8_t *extended_info_p = ecma_compiled_code_resolve_extended_info (bytecode_data_p);
        -: 1965:
    #####: 1966:      if (*extended_info_p & CBC_EXTENDED_CODE_FLAGS_HAS_ARGUMENT_LENGTH)
        -: 1967:      {
    #####: 1968:        len = ecma_extended_info_decode_vlq (&extended_info_p);
        -: 1969:      }
        -: 1970:    }
        -: 1971:
    #####: 1972:    ecma_property_t *value_prop_p;
    #####: 1973:    ecma_property_value_t *value_p =
        -: 1974:      ecma_create_named_data_property (object_p, property_name_p, ECMA_PROPERTY_BUILT_IN_CONFIGURABLE, &value_prop_p);
    #####: 1975:    value_p->value = ecma_make_uint32_value (len);
    #####: 1976:    return value_prop_p;
        -: 1977:  }
        -: 1978:
    #####: 1979:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_NAME))
        -: 1980:  {
    #####: 1981:    ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
        -: 1982:
    #####: 1983:    if (ECMA_GET_SECOND_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))
        -: 1984:    {
    #####: 1985:      return NULL;
        -: 1986:    }
        -: 1987:
    #####: 1988:    const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);
        -: 1989:
    #####: 1990:    if (CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags) == CBC_FUNCTION_CONSTRUCTOR)
        -: 1991:    {
    #####: 1992:      return NULL;
        -: 1993:    }
        -: 1994:
    #####: 1995:    ecma_value_t value = *ecma_compiled_code_resolve_function_name (bytecode_data_p);
    #####: 1996:    JERRY_ASSERT (ecma_is_value_string (value));
        -: 1997:
        -: 1998:    /* Initialize 'name' property */
    #####: 1999:    ecma_property_t *value_prop_p;
    #####: 2000:    ecma_property_value_t *value_p =
        -: 2001:      ecma_create_named_data_property (object_p, property_name_p, ECMA_PROPERTY_BUILT_IN_CONFIGURABLE, &value_prop_p);
    #####: 2002:    value_p->value = ecma_copy_value (value);
    #####: 2003:    return value_prop_p;
        -: 2004:  }
        -: 2005:#endif /* JERRY_ESNEXT */
        -: 2006:
    #####: 2007:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_PROTOTYPE)
    #####: 2008:      && ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_FUNCTION)
        -: 2009:  {
    #####: 2010:    return ecma_op_lazy_instantiate_prototype_object (object_p);
        -: 2011:  }
        -: 2012:
    #####: 2013:  const bool is_arguments = ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_ARGUMENTS);
        -: 2014:
    #####: 2015:  if (is_arguments || ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_CALLER))
        -: 2016:  {
        -: 2017:    const ecma_compiled_code_t *bytecode_data_p;
    #####: 2018:    bytecode_data_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) object_p);
        -: 2019:
        -: 2020:#if JERRY_ESNEXT
    #####: 2021:    if (!(bytecode_data_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE)
    #####: 2022:        && CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags) == CBC_FUNCTION_NORMAL)
        -: 2023:    {
    #####: 2024:      ecma_property_t *value_prop_p;
        -: 2025:      /* The property_name_p argument contains the name. */
    #####: 2026:      ecma_property_value_t *value_p =
        -: 2027:        ecma_create_named_data_property (object_p, property_name_p, ECMA_PROPERTY_BUILT_IN_FIXED, &value_prop_p);
    #####: 2028:      value_p->value = is_arguments ? ECMA_VALUE_NULL : ECMA_VALUE_UNDEFINED;
    #####: 2029:      return value_prop_p;
        -: 2030:    }
        -: 2031:#else /* !JERRY_ESNEXT */
    #####: 2032:    if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE)
        -: 2033:    {
    #####: 2034:      ecma_object_t *thrower_p = ecma_builtin_get (ECMA_BUILTIN_ID_TYPE_ERROR_THROWER);
        -: 2035:
        -: 2036:      ecma_property_t *caller_prop_p;
        -: 2037:      /* The property_name_p argument contains the name. */
    #####: 2038:      ecma_create_named_accessor_property (object_p,
        -: 2039:                                           property_name_p,
        -: 2040:                                           thrower_p,
        -: 2041:                                           thrower_p,
        -: 2042:                                           ECMA_PROPERTY_BUILT_IN_FIXED,
        -: 2043:                                           &caller_prop_p);
    #####: 2044:      return caller_prop_p;
        -: 2045:    }
        -: 2046:#endif /* JERRY_ESNEXT */
        -: 2047:  }
        -: 2048:
    #####: 2049:  return NULL;
        -: 2050:} /* ecma_op_function_try_to_lazy_instantiate_property */
        -: 2051:
        -: 2052:/**
        -: 2053: * Create specification defined non-configurable properties for external functions.
        -: 2054: *
        -: 2055: * See also:
        -: 2056: *          ECMA-262 v5, 15.3.4.5
        -: 2057: *
        -: 2058: * @return pointer property, if one was instantiated,
        -: 2059: *         NULL - otherwise.
        -: 2060: */
        -: 2061:ecma_property_t *
    #####: 2062:ecma_op_external_function_try_to_lazy_instantiate_property (ecma_object_t *object_p, /**< object */
        -: 2063:                                                            ecma_string_t *property_name_p) /**< property's name */
        -: 2064:{
    #####: 2065:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_NATIVE_FUNCTION);
        -: 2066:
    #####: 2067:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_PROTOTYPE))
        -: 2068:  {
    #####: 2069:    return ecma_op_lazy_instantiate_prototype_object (object_p);
        -: 2070:  }
        -: 2071:
    #####: 2072:  return NULL;
        -: 2073:} /* ecma_op_external_function_try_to_lazy_instantiate_property */
        -: 2074:
        -: 2075:/**
        -: 2076: * Create specification defined non-configurable properties for bound functions.
        -: 2077: *
        -: 2078: * See also:
        -: 2079: *          ECMA-262 v5, 15.3.4.5
        -: 2080: *
        -: 2081: * @return pointer property, if one was instantiated,
        -: 2082: *         NULL - otherwise.
        -: 2083: */
        -: 2084:ecma_property_t *
    #####: 2085:ecma_op_bound_function_try_to_lazy_instantiate_property (ecma_object_t *object_p, /**< object */
        -: 2086:                                                         ecma_string_t *property_name_p) /**< property's name */
        -: 2087:{
    #####: 2088:  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_BOUND_FUNCTION);
        -: 2089:
    #####: 2090:  if (ecma_string_is_length (property_name_p))
        -: 2091:  {
    #####: 2092:    ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) object_p;
    #####: 2093:    ecma_value_t args_len_or_this = bound_func_p->header.u.bound_function.args_len_or_this;
    #####: 2094:    ecma_number_t length = 0;
    #####: 2095:    ecma_integer_value_t args_length = 1;
        -: 2096:    uint8_t length_attributes;
        -: 2097:
    #####: 2098:    if (ecma_is_value_integer_number (args_len_or_this))
        -: 2099:    {
    #####: 2100:      args_length = ecma_get_integer_from_value (args_len_or_this);
        -: 2101:    }
        -: 2102:
        -: 2103:#if JERRY_ESNEXT
    #####: 2104:    if (ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (bound_func_p->header.u.bound_function.target_function))
        -: 2105:    {
    #####: 2106:      return NULL;
        -: 2107:    }
        -: 2108:
    #####: 2109:    length_attributes = ECMA_PROPERTY_BUILT_IN_CONFIGURABLE;
    #####: 2110:    length = ecma_get_number_from_value (bound_func_p->target_length) - (args_length - 1);
        -: 2111:#else /* !JERRY_ESNEXT */
    #####: 2112:    length_attributes = ECMA_PROPERTY_BUILT_IN_FIXED;
        -: 2113:
        -: 2114:    ecma_object_t *target_func_p;
    #####: 2115:    target_func_p =
    #####: 2116:      ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t, bound_func_p->header.u.bound_function.target_function);
        -: 2117:
    #####: 2118:    if (ecma_object_get_class_name (target_func_p) == LIT_MAGIC_STRING_FUNCTION_UL)
        -: 2119:    {
        -: 2120:      /* The property_name_p argument contains the 'length' string. */
    #####: 2121:      ecma_value_t get_len_value = ecma_op_object_get (target_func_p, property_name_p);
        -: 2122:
        -: 2123:      JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (get_len_value));
        -: 2124:      JERRY_ASSERT (ecma_is_value_integer_number (get_len_value));
        -: 2125:
    #####: 2126:      length = (ecma_number_t) (ecma_get_integer_from_value (get_len_value) - (args_length - 1));
        -: 2127:    }
        -: 2128:#endif /* JERRY_ESNEXT */
        -: 2129:
    #####: 2130:    if (length < 0)
        -: 2131:    {
    #####: 2132:      length = 0;
        -: 2133:    }
        -: 2134:
    #####: 2135:    ecma_property_t *len_prop_p;
    #####: 2136:    ecma_property_value_t *len_prop_value_p =
    #####: 2137:      ecma_create_named_data_property (object_p, property_name_p, length_attributes, &len_prop_p);
        -: 2138:
    #####: 2139:    len_prop_value_p->value = ecma_make_number_value (length);
    #####: 2140:    return len_prop_p;
        -: 2141:  }
        -: 2142:
        -: 2143:#if !JERRY_ESNEXT
    #####: 2144:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_CALLER)
    #####: 2145:      || ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_ARGUMENTS))
        -: 2146:  {
    #####: 2147:    ecma_object_t *thrower_p = ecma_builtin_get (ECMA_BUILTIN_ID_TYPE_ERROR_THROWER);
        -: 2148:
        -: 2149:    ecma_property_t *caller_prop_p;
        -: 2150:    /* The string_p argument contans the name. */
    #####: 2151:    ecma_create_named_accessor_property (object_p,
        -: 2152:                                         property_name_p,
        -: 2153:                                         thrower_p,
        -: 2154:                                         thrower_p,
        -: 2155:                                         ECMA_PROPERTY_BUILT_IN_FIXED,
        -: 2156:                                         &caller_prop_p);
    #####: 2157:    return caller_prop_p;
        -: 2158:  }
        -: 2159:#endif /* !JERRY_ESNEXT */
        -: 2160:
    #####: 2161:  return NULL;
        -: 2162:} /* ecma_op_bound_function_try_to_lazy_instantiate_property */
        -: 2163:
        -: 2164:#if JERRY_ESNEXT
        -: 2165:
        -: 2166:/**
        -: 2167: * Delete configurable properties of functions.
        -: 2168: */
        -: 2169:void
    #####: 2170:ecma_op_function_delete_built_in_property (ecma_object_t *object_p, /**< object */
        -: 2171:                                           ecma_string_t *property_name_p) /**< property name */
        -: 2172:{
    #####: 2173:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
        -: 2174:
    #####: 2175:  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_LENGTH))
        -: 2176:  {
    #####: 2177:    JERRY_ASSERT (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp));
    #####: 2178:    ECMA_SET_FIRST_BIT_TO_POINTER_TAG (ext_func_p->u.function.scope_cp);
    #####: 2179:    return;
        -: 2180:  }
        -: 2181:
    #####: 2182:  JERRY_ASSERT (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_NAME));
    #####: 2183:  JERRY_ASSERT (!ECMA_GET_SECOND_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp));
        -: 2184:
    #####: 2185:  ECMA_SET_SECOND_BIT_TO_POINTER_TAG (ext_func_p->u.function.scope_cp);
        -: 2186:} /* ecma_op_function_delete_built_in_property */
        -: 2187:
        -: 2188:/**
        -: 2189: * Delete configurable properties of bound functions.
        -: 2190: */
        -: 2191:void
    #####: 2192:ecma_op_bound_function_delete_built_in_property (ecma_object_t *object_p, /**< object */
        -: 2193:                                                 ecma_string_t *property_name_p) /**< property name */
        -: 2194:{
        -: 2195:  JERRY_UNUSED (property_name_p);
        -: 2196:
    #####: 2197:  ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) object_p;
        -: 2198:
    #####: 2199:  JERRY_ASSERT (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_LENGTH));
    #####: 2200:  JERRY_ASSERT (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (bound_func_p->header.u.bound_function.target_function));
        -: 2201:
    #####: 2202:  ECMA_SET_FIRST_BIT_TO_POINTER_TAG (bound_func_p->header.u.bound_function.target_function);
    #####: 2203:} /* ecma_op_bound_function_delete_built_in_property */
        -: 2204:
        -: 2205:#endif /* JERRY_ESNEXT */
        -: 2206:
        -: 2207:/**
        -: 2208: * List names of a Function object's lazy instantiated properties,
        -: 2209: * adding them to corresponding string collections
        -: 2210: *
        -: 2211: * See also:
        -: 2212: *          ecma_op_function_try_to_lazy_instantiate_property
        -: 2213: */
        -: 2214:void
    #####: 2215:ecma_op_function_list_lazy_property_names (ecma_object_t *object_p, /**< functionobject */
        -: 2216:                                           ecma_collection_t *prop_names_p, /**< prop name collection */
        -: 2217:                                           ecma_property_counter_t *prop_counter_p, /**< property counters */
        -: 2218:                                           jerry_property_filter_t filter) /**< property name filter options */
        -: 2219:{
    #####: 2220:  if (filter & JERRY_PROPERTY_FILTER_EXCLUDE_STRINGS)
        -: 2221:  {
    #####: 2222:    return;
        -: 2223:  }
        -: 2224:
        -: 2225:  const ecma_compiled_code_t *bytecode_data_p;
    #####: 2226:  bytecode_data_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) object_p);
        -: 2227:
        -: 2228:#if JERRY_ESNEXT
    #####: 2229:  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;
        -: 2230:
    #####: 2231:  if (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))
        -: 2232:  {
        -: 2233:    /* Unintialized 'length' property is non-enumerable (ECMA-262 v6, 19.2.4.1) */
    #####: 2234:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
    #####: 2235:    prop_counter_p->string_named_props++;
        -: 2236:  }
        -: 2237:
    #####: 2238:  if (CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags) != CBC_FUNCTION_CONSTRUCTOR
    #####: 2239:      && !ECMA_GET_SECOND_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))
        -: 2240:  {
        -: 2241:    /* Unintialized 'name' property is non-enumerable (ECMA-262 v6, 19.2.4.2) */
    #####: 2242:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_NAME));
    #####: 2243:    prop_counter_p->string_named_props++;
        -: 2244:  }
        -: 2245:#else /* !JERRY_ESNEXT */
        -: 2246:  /* 'length' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 2247:  ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
    #####: 2248:  prop_counter_p->string_named_props++;
        -: 2249:#endif /* JERRY_ESNEXT */
        -: 2250:
        -: 2251:#if JERRY_ESNEXT
    #####: 2252:  if (!CBC_FUNCTION_HAS_PROTOTYPE (bytecode_data_p->status_flags)
    #####: 2253:      || (CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags) == CBC_FUNCTION_CONSTRUCTOR))
        -: 2254:  {
    #####: 2255:    return;
        -: 2256:  }
        -: 2257:
    #####: 2258:  bool append_caller_and_arguments = !(bytecode_data_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE);
        -: 2259:#else /* !JERRY_ESNEXT */
    #####: 2260:  bool append_caller_and_arguments = (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STRICT_MODE);
        -: 2261:#endif /* JERRY_ESNEXT */
        -: 2262:
    #####: 2263:  if (append_caller_and_arguments)
        -: 2264:  {
        -: 2265:    /* 'arguments' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 2266:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_ARGUMENTS));
        -: 2267:
        -: 2268:    /* 'caller' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 2269:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_CALLER));
        -: 2270:
    #####: 2271:    prop_counter_p->string_named_props += 2;
        -: 2272:  }
        -: 2273:
        -: 2274:  /* 'prototype' property is non-enumerable (ECMA-262 v5, 13.2.18) */
    #####: 2275:  ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_PROTOTYPE));
    #####: 2276:  prop_counter_p->string_named_props++;
        -: 2277:} /* ecma_op_function_list_lazy_property_names */
        -: 2278:
        -: 2279:/**
        -: 2280: * List names of an External Function object's lazy instantiated properties,
        -: 2281: * adding them to corresponding string collections
        -: 2282: *
        -: 2283: * See also:
        -: 2284: *          ecma_op_external_function_try_to_lazy_instantiate_property
        -: 2285: */
        -: 2286:void
    #####: 2287:ecma_op_external_function_list_lazy_property_names (ecma_object_t *object_p, /**< function object */
        -: 2288:                                                    ecma_collection_t *prop_names_p, /**< prop name collection */
        -: 2289:                                                    ecma_property_counter_t *prop_counter_p, /**< property counters */
        -: 2290:                                                    jerry_property_filter_t filter) /**< property name
        -: 2291:                                                                                     *   filter options */
        -: 2292:{
        -: 2293:  JERRY_UNUSED (object_p);
        -: 2294:
    #####: 2295:  if (filter & JERRY_PROPERTY_FILTER_EXCLUDE_STRINGS)
        -: 2296:  {
    #####: 2297:    return;
        -: 2298:  }
        -: 2299:
        -: 2300:  /* 'prototype' property is non-enumerable (ECMA-262 v5, 13.2.18) */
    #####: 2301:  ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_PROTOTYPE));
    #####: 2302:  prop_counter_p->string_named_props++;
        -: 2303:} /* ecma_op_external_function_list_lazy_property_names */
        -: 2304:
        -: 2305:/**
        -: 2306: * List names of a Bound Function object's lazy instantiated properties,
        -: 2307: * adding them to corresponding string collections
        -: 2308: *
        -: 2309: * See also:
        -: 2310: *          ecma_op_bound_function_try_to_lazy_instantiate_property
        -: 2311: */
        -: 2312:void
    #####: 2313:ecma_op_bound_function_list_lazy_property_names (ecma_object_t *object_p, /**< bound function object*/
        -: 2314:                                                 ecma_collection_t *prop_names_p, /**< prop name collection */
        -: 2315:                                                 ecma_property_counter_t *prop_counter_p, /**< property counters */
        -: 2316:                                                 jerry_property_filter_t filter) /**< property name filter options */
        -: 2317:{
    #####: 2318:  if (filter & JERRY_PROPERTY_FILTER_EXCLUDE_STRINGS)
        -: 2319:  {
    #####: 2320:    return;
        -: 2321:  }
        -: 2322:
        -: 2323:#if JERRY_ESNEXT
        -: 2324:  /* Unintialized 'length' property is non-enumerable (ECMA-262 v6, 19.2.4.1) */
    #####: 2325:  ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) object_p;
    #####: 2326:  if (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (bound_func_p->header.u.bound_function.target_function))
        -: 2327:  {
    #####: 2328:    ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
    #####: 2329:    prop_counter_p->string_named_props++;
        -: 2330:  }
        -: 2331:#else /* !JERRY_ESNEXT */
        -: 2332:  JERRY_UNUSED (object_p);
        -: 2333:  /* 'length' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 2334:  ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));
    #####: 2335:  prop_counter_p->string_named_props++;
        -: 2336:#endif /* JERRY_ESNEXT */
        -: 2337:
        -: 2338:  /* 'caller' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 2339:  ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_CALLER));
        -: 2340:
        -: 2341:  /* 'arguments' property is non-enumerable (ECMA-262 v5, 13.2.5) */
    #####: 2342:  ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_ARGUMENTS));
        -: 2343:
    #####: 2344:  prop_counter_p->string_named_props += 2;
        -: 2345:} /* ecma_op_bound_function_list_lazy_property_names */
        -: 2346:
        -: 2347:/**
        -: 2348: * @}
        -: 2349: * @}
        -: 2350: */
