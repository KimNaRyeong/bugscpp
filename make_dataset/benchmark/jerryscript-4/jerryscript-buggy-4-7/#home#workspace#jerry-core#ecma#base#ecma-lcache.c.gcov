        -:    0:Source:/home/workspace/jerry-core/ecma/base/ecma-lcache.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-gc.h"
        -:   17:#include "ecma-globals.h"
        -:   18:#include "ecma-helpers.h"
        -:   19:#include "ecma-lcache.h"
        -:   20:#include "jcontext.h"
        -:   21:
        -:   22:/** \addtogroup ecma ECMA
        -:   23: * @{
        -:   24: *
        -:   25: * \addtogroup ecmalcache Property lookup cache
        -:   26: * @{
        -:   27: */
        -:   28:
        -:   29:#if JERRY_LCACHE
        -:   30:
        -:   31:/**
        -:   32: * Bitshift index for calculating hash.
        -:   33: */
        -:   34:#if JERRY_CPOINTER_32_BIT
        -:   35:#define ECMA_LCACHE_HASH_BITSHIFT_INDEX (2 * JMEM_ALIGNMENT_LOG)
        -:   36:#else /* !JERRY_CPOINTER_32_BIT */
        -:   37:#define ECMA_LCACHE_HASH_BITSHIFT_INDEX 0
        -:   38:#endif /* JERRY_CPOINTER_32_BIT */
        -:   39:
        -:   40:/**
        -:   41: * Mask for hash bits
        -:   42: */
        -:   43:#define ECMA_LCACHE_HASH_MASK ((ECMA_LCACHE_HASH_ROWS_COUNT - 1) << ECMA_LCACHE_HASH_BITSHIFT_INDEX)
        -:   44:
        -:   45:/**
        -:   46: * Bitshift index for creating property identifier
        -:   47: */
        -:   48:#define ECMA_LCACHE_HASH_ENTRY_ID_SHIFT (8 * sizeof (jmem_cpointer_t))
        -:   49:
        -:   50:/**
        -:   51: * Create property identifier
        -:   52: */
        -:   53:#define ECMA_LCACHE_CREATE_ID(object_cp, name_cp) \
        -:   54:  (((ecma_lcache_hash_entry_id_t) (object_cp) << ECMA_LCACHE_HASH_ENTRY_ID_SHIFT) | (name_cp))
        -:   55:
        -:   56:/**
        -:   57: * Invalidate specified LCache entry
        -:   58: */
        -:   59:static inline void JERRY_ATTR_ALWAYS_INLINE
        -:   60:ecma_lcache_invalidate_entry (ecma_lcache_hash_entry_t *entry_p) /**< entry to invalidate */
        -:   61:{
    #####:   62:  JERRY_ASSERT (entry_p != NULL);
    #####:   63:  JERRY_ASSERT (entry_p->id != 0);
    #####:   64:  JERRY_ASSERT (entry_p->prop_p != NULL);
        -:   65:
    #####:   66:  entry_p->id = 0;
    #####:   67:  ecma_set_property_lcached (entry_p->prop_p, false);
        -:   68:} /* ecma_lcache_invalidate_entry */
        -:   69:
        -:   70:/**
        -:   71: * Compute the row index of object / property name pair
        -:   72: *
        -:   73: * @return row index
        -:   74: */
        -:   75:static inline size_t JERRY_ATTR_ALWAYS_INLINE
        -:   76:ecma_lcache_row_index (jmem_cpointer_t object_cp, /**< compressed pointer to object */
        -:   77:                       jmem_cpointer_t name_cp) /**< compressed pointer to property name */
        -:   78:{
        -:   79:  /* Randomize the property name with the object pointer using a xor operation,
        -:   80:   * so properties of different objects with the same name can be cached effectively. */
      858:   81:  return (size_t) (((name_cp ^ object_cp) & ECMA_LCACHE_HASH_MASK) >> ECMA_LCACHE_HASH_BITSHIFT_INDEX);
        -:   82:} /* ecma_lcache_row_index */
        -:   83:
        -:   84:/**
        -:   85: * Insert an entry into LCache
        -:   86: */
        -:   87:void
        4:   88:ecma_lcache_insert (const ecma_object_t *object_p, /**< object */
        -:   89:                    const jmem_cpointer_t name_cp, /**< property name */
        -:   90:                    ecma_property_t *prop_p) /**< property */
        -:   91:{
        4:   92:  JERRY_ASSERT (object_p != NULL);
        4:   93:  JERRY_ASSERT (prop_p != NULL && !ecma_is_property_lcached (prop_p));
        4:   94:  JERRY_ASSERT (ECMA_PROPERTY_IS_NAMED_PROPERTY (*prop_p));
        -:   95:
        -:   96:  jmem_cpointer_t object_cp;
        -:   97:
        4:   98:  ECMA_SET_NON_NULL_POINTER (object_cp, object_p);
        -:   99:
        4:  100:  size_t row_index = ecma_lcache_row_index (object_cp, name_cp);
        4:  101:  ecma_lcache_hash_entry_t *entry_p = JERRY_CONTEXT (lcache) [row_index];
        4:  102:  ecma_lcache_hash_entry_t *entry_end_p = entry_p + ECMA_LCACHE_HASH_ROW_LENGTH;
        -:  103:
        -:  104:  do
        -:  105:  {
        4:  106:    if (entry_p->id == 0)
        -:  107:    {
        4:  108:      goto insert;
        -:  109:    }
        -:  110:
    #####:  111:    entry_p++;
        -:  112:  }
    #####:  113:  while (entry_p < entry_end_p);
        -:  114:
        -:  115:  /* Invalidate the last entry. */
    #####:  116:  ecma_lcache_invalidate_entry (--entry_p);
        -:  117:
        -:  118:  /* Shift other entries towards the end. */
    #####:  119:  for (uint32_t i = 0; i < ECMA_LCACHE_HASH_ROW_LENGTH - 1; i++)
        -:  120:  {
    #####:  121:    entry_p->id = entry_p[-1].id;
    #####:  122:    entry_p->prop_p = entry_p[-1].prop_p;
    #####:  123:    entry_p--;
        -:  124:  }
        -:  125:
    #####:  126:insert:
        4:  127:  entry_p->prop_p = prop_p;
        4:  128:  entry_p->id = ECMA_LCACHE_CREATE_ID (object_cp, name_cp);
        -:  129:
        4:  130:  ecma_set_property_lcached (entry_p->prop_p, true);
        4:  131:} /* ecma_lcache_insert */
        -:  132:
        -:  133:/**
        -:  134: * Lookup property in the LCache
        -:  135: *
        -:  136: * @return a pointer to an ecma_property_t if the lookup is successful
        -:  137: *         NULL otherwise
        -:  138: */
        -:  139:extern inline ecma_property_t * JERRY_ATTR_ALWAYS_INLINE
      854:  140:ecma_lcache_lookup (const ecma_object_t *object_p, /**< object */
        -:  141:                    const ecma_string_t *prop_name_p) /**< property's name */
        -:  142:{
      854:  143:  JERRY_ASSERT (object_p != NULL);
      854:  144:  JERRY_ASSERT (prop_name_p != NULL);
        -:  145:
        -:  146:  jmem_cpointer_t object_cp;
      854:  147:  ECMA_SET_NON_NULL_POINTER (object_cp, object_p);
        -:  148:
      854:  149:  ecma_property_t prop_name_type = ECMA_DIRECT_STRING_PTR;
        -:  150:  jmem_cpointer_t prop_name_cp;
        -:  151:
      854:  152:  if (JERRY_UNLIKELY (ECMA_IS_DIRECT_STRING (prop_name_p)))
        -:  153:  {
      211:  154:    prop_name_type = (ecma_property_t) ECMA_GET_DIRECT_STRING_TYPE (prop_name_p);
      211:  155:    prop_name_cp = (jmem_cpointer_t) ECMA_GET_DIRECT_STRING_VALUE (prop_name_p);
        -:  156:  }
        -:  157:  else
        -:  158:  {
      643:  159:    ECMA_SET_NON_NULL_POINTER (prop_name_cp, prop_name_p);
        -:  160:  }
        -:  161:
      854:  162:  size_t row_index = ecma_lcache_row_index (object_cp, prop_name_cp);
        -:  163:
      854:  164:  ecma_lcache_hash_entry_t *entry_p = JERRY_CONTEXT (lcache) [row_index];
      854:  165:  ecma_lcache_hash_entry_t *entry_end_p = entry_p + ECMA_LCACHE_HASH_ROW_LENGTH;
      854:  166:  ecma_lcache_hash_entry_id_t id = ECMA_LCACHE_CREATE_ID (object_cp, prop_name_cp);
        -:  167:
        -:  168:  do
        -:  169:  {
     1005:  170:    if (entry_p->id == id && JERRY_LIKELY (ECMA_PROPERTY_GET_NAME_TYPE (*entry_p->prop_p) == prop_name_type))
        -:  171:    {
      703:  172:      JERRY_ASSERT (entry_p->prop_p != NULL && ecma_is_property_lcached (entry_p->prop_p));
      703:  173:      return entry_p->prop_p;
        -:  174:    }
      302:  175:    entry_p++;
        -:  176:  }
      302:  177:  while (entry_p < entry_end_p);
        -:  178:
      151:  179:  return NULL;
        -:  180:} /* ecma_lcache_lookup */
        -:  181:
        -:  182:/**
        -:  183: * Invalidate LCache entries associated with given object and property name / property
        -:  184: */
        -:  185:void
    #####:  186:ecma_lcache_invalidate (const ecma_object_t *object_p, /**< object */
        -:  187:                        const jmem_cpointer_t name_cp, /**< property name */
        -:  188:                        ecma_property_t *prop_p) /**< property */
        -:  189:{
    #####:  190:  JERRY_ASSERT (object_p != NULL);
    #####:  191:  JERRY_ASSERT (prop_p != NULL && ecma_is_property_lcached (prop_p));
    #####:  192:  JERRY_ASSERT (ECMA_PROPERTY_IS_NAMED_PROPERTY (*prop_p));
        -:  193:
        -:  194:  jmem_cpointer_t object_cp;
    #####:  195:  ECMA_SET_NON_NULL_POINTER (object_cp, object_p);
        -:  196:
    #####:  197:  size_t row_index = ecma_lcache_row_index (object_cp, name_cp);
    #####:  198:  ecma_lcache_hash_entry_t *entry_p = JERRY_CONTEXT (lcache) [row_index];
        -:  199:
        -:  200:  while (true)
        -:  201:  {
        -:  202:    /* The property must be present. */
    #####:  203:    JERRY_ASSERT (entry_p - JERRY_CONTEXT (lcache) [row_index] < ECMA_LCACHE_HASH_ROW_LENGTH);
        -:  204:
    #####:  205:    if (entry_p->id != 0 && entry_p->prop_p == prop_p)
        -:  206:    {
    #####:  207:      JERRY_ASSERT (entry_p->id == ECMA_LCACHE_CREATE_ID (object_cp, name_cp));
        -:  208:
    #####:  209:      ecma_lcache_invalidate_entry (entry_p);
    #####:  210:      return;
        -:  211:    }
    #####:  212:    entry_p++;
        -:  213:  }
        -:  214:} /* ecma_lcache_invalidate */
        -:  215:
        -:  216:#endif /* JERRY_LCACHE */
        -:  217:
        -:  218:/**
        -:  219: * @}
        -:  220: * @}
        -:  221: */
