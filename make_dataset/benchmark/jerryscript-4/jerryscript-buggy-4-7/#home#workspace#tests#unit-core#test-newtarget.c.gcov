        -:    0:Source:/home/workspace/tests/unit-core/test-newtarget.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:/**
        -:   22: * Register a JavaScript function in the global object.
        -:   23: */
        -:   24:static jerry_value_t
    #####:   25:register_js_function (const char *name_p, /**< name of the function */
        -:   26:                      jerry_external_handler_t handler_p) /**< function callback */
        -:   27:{
    #####:   28:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -:   29:
    #####:   30:  jerry_value_t function_val = jerry_create_external_function (handler_p);
    #####:   31:  jerry_value_t function_name_val = jerry_create_string ((const jerry_char_t *) name_p);
    #####:   32:  jerry_value_t result_val = jerry_set_property (global_obj_val, function_name_val, function_val);
        -:   33:
    #####:   34:  jerry_release_value (function_name_val);
    #####:   35:  jerry_release_value (global_obj_val);
        -:   36:
    #####:   37:  jerry_release_value (result_val);
        -:   38:
    #####:   39:  return function_val;
        -:   40:} /* register_js_function */
        -:   41:
        -:   42:enum
        -:   43:{
        -:   44:  TEST_ID_SIMPLE_CONSTRUCT = 1,
        -:   45:  TEST_ID_SIMPLE_CALL = 2,
        -:   46:  TEST_ID_CONSTRUCT_AND_CALL_SUB = 3,
        -:   47:};
        -:   48:
        -:   49:static jerry_value_t
    #####:   50:construct_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   51:                   const jerry_value_t args_p[], /**< function arguments */
        -:   52:                   const jerry_length_t args_cnt) /**< number of function arguments */
        -:   53:{
        -:   54:  JERRY_UNUSED (args_p);
        -:   55:
    #####:   56:  if (args_cnt != 1 || !jerry_value_is_number (args_p[0]))
        -:   57:  {
    #####:   58:    TEST_ASSERT (0 && "Invalid arguments for demo method");
        -:   59:  }
        -:   60:
    #####:   61:  int test_id = (int) jerry_get_number_value (args_p[0]);
        -:   62:
    #####:   63:  switch (test_id)
        -:   64:  {
    #####:   65:    case TEST_ID_SIMPLE_CONSTRUCT:
        -:   66:    {
        -:   67:      /* Method was called with "new": new.target should be equal to the function object. */
    #####:   68:      jerry_value_t target = call_info_p->new_target;
    #####:   69:      TEST_ASSERT (!jerry_value_is_undefined (target));
    #####:   70:      TEST_ASSERT (target == call_info_p->function);
        -:   71:      break;
        -:   72:    }
    #####:   73:    case TEST_ID_SIMPLE_CALL:
        -:   74:    {
        -:   75:      /* Method was called directly without "new": new.target should be equal undefined. */
    #####:   76:      jerry_value_t target = call_info_p->new_target;
    #####:   77:      TEST_ASSERT (jerry_value_is_undefined (target));
    #####:   78:      TEST_ASSERT (target != call_info_p->function);
        -:   79:      break;
        -:   80:    }
    #####:   81:    case TEST_ID_CONSTRUCT_AND_CALL_SUB:
        -:   82:    {
        -:   83:      /* Method was called with "new": new.target should be equal to the function object. */
    #####:   84:      jerry_value_t target = call_info_p->new_target;
    #####:   85:      TEST_ASSERT (!jerry_value_is_undefined (target));
    #####:   86:      TEST_ASSERT (target == call_info_p->function);
        -:   87:
        -:   88:      /* Calling a function should hide the old "new.target". */
    #####:   89:      jerry_value_t sub_arg = jerry_create_number (TEST_ID_SIMPLE_CALL);
        -:   90:      jerry_value_t func_call_result;
        -:   91:
    #####:   92:      func_call_result = jerry_call_function (call_info_p->function, call_info_p->this_value, &sub_arg, 1);
    #####:   93:      TEST_ASSERT (!jerry_value_is_error (func_call_result));
    #####:   94:      TEST_ASSERT (jerry_value_is_undefined (func_call_result));
        -:   95:      break;
        -:   96:    }
        -:   97:
        -:   98:    default:
        -:   99:    {
    #####:  100:      TEST_ASSERT (0 && "Incorrect test ID");
        -:  101:      break;
        -:  102:    }
        -:  103:  }
        -:  104:
    #####:  105:  return jerry_create_undefined ();
        -:  106:} /* construct_handler */
        -:  107:
        -:  108:int
    #####:  109:main (void)
        -:  110:{
        -:  111:  /* Test JERRY_FEATURE_SYMBOL feature as it is a must-have in ES.next */
    #####:  112:  if (!jerry_is_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:  113:  {
    #####:  114:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Skipping test, ES.next support is disabled.\n");
    #####:  115:    return 0;
        -:  116:  }
        -:  117:
    #####:  118:  jerry_init (JERRY_INIT_EMPTY);
        -:  119:
    #####:  120:  jerry_value_t demo_func = register_js_function ("Demo", construct_handler);
        -:  121:
        -:  122:  {
    #####:  123:    jerry_value_t test_arg = jerry_create_number (TEST_ID_SIMPLE_CONSTRUCT);
    #####:  124:    jerry_value_t constructed = jerry_construct_object (demo_func, &test_arg, 1);
    #####:  125:    TEST_ASSERT (!jerry_value_is_error (constructed));
    #####:  126:    TEST_ASSERT (jerry_value_is_object (constructed));
    #####:  127:    jerry_release_value (test_arg);
    #####:  128:    jerry_release_value (constructed);
        -:  129:  }
        -:  130:
        -:  131:  {
    #####:  132:    jerry_value_t test_arg = jerry_create_number (TEST_ID_SIMPLE_CALL);
    #####:  133:    jerry_value_t this_arg = jerry_create_undefined ();
    #####:  134:    jerry_value_t constructed = jerry_call_function (demo_func, this_arg, &test_arg, 1);
    #####:  135:    TEST_ASSERT (jerry_value_is_undefined (constructed));
    #####:  136:    jerry_release_value (constructed);
    #####:  137:    jerry_release_value (constructed);
    #####:  138:    jerry_release_value (test_arg);
        -:  139:  }
        -:  140:
        -:  141:  {
    #####:  142:    jerry_value_t test_arg = jerry_create_number (TEST_ID_CONSTRUCT_AND_CALL_SUB);
    #####:  143:    jerry_value_t constructed = jerry_construct_object (demo_func, &test_arg, 1);
    #####:  144:    TEST_ASSERT (!jerry_value_is_error (constructed));
    #####:  145:    TEST_ASSERT (jerry_value_is_object (constructed));
    #####:  146:    jerry_release_value (test_arg);
    #####:  147:    jerry_release_value (constructed);
        -:  148:  }
        -:  149:
        -:  150:  {
        -:  151:    static const jerry_char_t test_source[] = TEST_STRING_LITERAL ("new Demo (1)");
        -:  152:
    #####:  153:    jerry_value_t parsed_code_val = jerry_parse (test_source,
        -:  154:                                                 sizeof (test_source) - 1,
        -:  155:                                                 NULL);
    #####:  156:    TEST_ASSERT (!jerry_value_is_error (parsed_code_val));
        -:  157:
    #####:  158:    jerry_value_t res = jerry_run (parsed_code_val);
    #####:  159:    TEST_ASSERT (!jerry_value_is_error (res));
        -:  160:
    #####:  161:    jerry_release_value (res);
    #####:  162:    jerry_release_value (parsed_code_val);
        -:  163:  }
        -:  164:
        -:  165:  {
        -:  166:    static const jerry_char_t test_source[] = TEST_STRING_LITERAL ("Demo (2)");
        -:  167:
    #####:  168:    jerry_value_t parsed_code_val = jerry_parse (test_source,
        -:  169:                                                 sizeof (test_source) - 1,
        -:  170:                                                 NULL);
    #####:  171:    TEST_ASSERT (!jerry_value_is_error (parsed_code_val));
        -:  172:
    #####:  173:    jerry_value_t res = jerry_run (parsed_code_val);
    #####:  174:    TEST_ASSERT (!jerry_value_is_error (res));
        -:  175:
    #####:  176:    jerry_release_value (res);
    #####:  177:    jerry_release_value (parsed_code_val);
        -:  178:  }
        -:  179:
        -:  180:  {
        -:  181:    static const jerry_char_t test_source[] = TEST_STRING_LITERAL (
        -:  182:      "function base(arg) { new Demo (arg); };"
        -:  183:      "base (1);"
        -:  184:      "new base(1);"
        -:  185:      "new base(3);"
        -:  186:    );
        -:  187:
    #####:  188:    jerry_value_t parsed_code_val = jerry_parse (test_source,
        -:  189:                                                 sizeof (test_source) - 1,
        -:  190:                                                 NULL);
    #####:  191:    TEST_ASSERT (!jerry_value_is_error (parsed_code_val));
        -:  192:
    #####:  193:    jerry_value_t res = jerry_run (parsed_code_val);
    #####:  194:    TEST_ASSERT (!jerry_value_is_error (res));
        -:  195:
    #####:  196:    jerry_release_value (res);
    #####:  197:    jerry_release_value (parsed_code_val);
        -:  198:  }
        -:  199:
    #####:  200:  jerry_release_value (demo_func);
    #####:  201:  jerry_cleanup ();
    #####:  202:  return 0;
        -:  203:} /* main */
