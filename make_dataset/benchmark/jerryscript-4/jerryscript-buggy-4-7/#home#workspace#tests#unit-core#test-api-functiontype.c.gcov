        -:    0:Source:/home/workspace/tests/unit-core/test-api-functiontype.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:typedef struct
        -:   22:{
        -:   23:  jerry_function_type_t type_info;
        -:   24:  jerry_value_t value;
        -:   25:  bool active;
        -:   26:  bool is_async;
        -:   27:} test_entry_t;
        -:   28:
        -:   29:#define ENTRY(TYPE, VALUE) { TYPE, VALUE, true, false }
        -:   30:#define ENTRY_IF(TYPE, VALUE, FEATURE, ASYNC) { TYPE, VALUE, jerry_is_feature_enabled (FEATURE), ASYNC }
        -:   31:#define EVALUATE(BUFF) (jerry_eval ((BUFF), sizeof ((BUFF)) - 1, JERRY_PARSE_NO_OPTS))
        -:   32:static jerry_value_t
    #####:   33:test_ext_function (const jerry_call_info_t *call_info_p, /**< call information */
        -:   34:                   const jerry_value_t args_p[], /**< array of arguments */
        -:   35:                   const jerry_length_t args_cnt) /**< number of arguments */
        -:   36:{
        -:   37:  (void) call_info_p;
        -:   38:  (void) args_p;
        -:   39:  (void) args_cnt;
    #####:   40:  return jerry_create_boolean (true);
        -:   41:} /* test_ext_function */
        -:   42:
        -:   43:int
    #####:   44:main (void)
        -:   45:{
    #####:   46:  TEST_INIT ();
        -:   47:
    #####:   48:  jerry_init (JERRY_INIT_EMPTY);
        -:   49:
    #####:   50:  const jerry_char_t arrow_function[] = "_ => 5";
    #####:   51:  const jerry_char_t async_arrow_function[] = "async _ => 5";
    #####:   52:  const jerry_char_t generator_function[] = "function *f() {}; f";
    #####:   53:  const jerry_char_t async_generator_function[] = "async function *f() {}; f";
    #####:   54:  const jerry_char_t getter_function[] = "Object.getOwnPropertyDescriptor({get a(){}}, 'a').get";
    #####:   55:  const jerry_char_t setter_function[] = "Object.getOwnPropertyDescriptor({set a(b){}}, 'a').set";
    #####:   56:  const jerry_char_t method_function[] = "Object.getOwnPropertyDescriptor({a(){}}, 'a').value";
        -:   57:
    #####:   58:  const jerry_char_t builtin_function[] = "Object";
    #####:   59:  const jerry_char_t simple_function[] = "function f() {}; f";
    #####:   60:  const jerry_char_t bound_function[] = "function f() {}; f.bind(1,2)";
        -:   61:
    #####:   62:  test_entry_t entries[] =
        -:   63:  {
    #####:   64:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_create_number (-33.0)),
    #####:   65:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_create_boolean (true)),
    #####:   66:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_create_undefined ()),
    #####:   67:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_create_null ()),
    #####:   68:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_create_string ((const jerry_char_t *) "foo")),
    #####:   69:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_create_error (JERRY_ERROR_TYPE, (const jerry_char_t *) "error")),
        -:   70:
    #####:   71:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_create_object ()),
    #####:   72:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_create_array (10)),
        -:   73:
    #####:   74:    ENTRY_IF (JERRY_FUNCTION_TYPE_ARROW, EVALUATE (arrow_function), JERRY_FEATURE_SYMBOL, false),
    #####:   75:    ENTRY_IF (JERRY_FUNCTION_TYPE_ARROW, EVALUATE (async_arrow_function), JERRY_FEATURE_SYMBOL, true),
    #####:   76:    ENTRY_IF (JERRY_FUNCTION_TYPE_GENERATOR, EVALUATE (generator_function), JERRY_FEATURE_SYMBOL, false),
    #####:   77:    ENTRY_IF (JERRY_FUNCTION_TYPE_GENERATOR, EVALUATE (async_generator_function), JERRY_FEATURE_SYMBOL, true),
    #####:   78:    ENTRY_IF (JERRY_FUNCTION_TYPE_GENERIC, EVALUATE (method_function), JERRY_FEATURE_SYMBOL, false),
    #####:   79:    ENTRY (JERRY_FUNCTION_TYPE_GENERIC, EVALUATE (builtin_function)),
    #####:   80:    ENTRY (JERRY_FUNCTION_TYPE_GENERIC, EVALUATE (simple_function)),
    #####:   81:    ENTRY (JERRY_FUNCTION_TYPE_BOUND, EVALUATE (bound_function)),
    #####:   82:    ENTRY (JERRY_FUNCTION_TYPE_GENERIC, jerry_create_external_function (test_ext_function)),
    #####:   83:    ENTRY (JERRY_FUNCTION_TYPE_ACCESSOR, EVALUATE (getter_function)),
    #####:   84:    ENTRY (JERRY_FUNCTION_TYPE_ACCESSOR, EVALUATE (setter_function)),
        -:   85:  };
        -:   86:
    #####:   87:  for (size_t idx = 0; idx < sizeof (entries) / sizeof (entries[0]); idx++)
        -:   88:  {
    #####:   89:    jerry_function_type_t type_info = jerry_function_get_type (entries[idx].value);
    #####:   90:    TEST_ASSERT (!entries[idx].active
        -:   91:                 || (type_info == entries[idx].type_info
        -:   92:                     && jerry_value_is_async_function (entries[idx].value) == entries[idx].is_async));
    #####:   93:    jerry_release_value (entries[idx].value);
        -:   94:  }
        -:   95:
    #####:   96:  jerry_cleanup ();
        -:   97:
        -:   98:  return 0;
        -:   99:} /* main */
