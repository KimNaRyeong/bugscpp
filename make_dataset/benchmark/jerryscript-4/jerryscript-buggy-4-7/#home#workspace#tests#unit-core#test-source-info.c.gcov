        -:    0:Source:/home/workspace/tests/unit-core/test-source-info.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "config.h"
        -:   17:#include "jerryscript.h"
        -:   18:
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static void
    #####:   22:compare_string (jerry_value_t left_string, /**< left string */
        -:   23:                const char *right_string_p) /**< right string */
        -:   24:{
    #####:   25:  size_t size = strlen (right_string_p);
        -:   26:  uint8_t buffer[64];
        -:   27:
    #####:   28:  TEST_ASSERT (size == jerry_get_string_size (left_string));
    #####:   29:  TEST_ASSERT (size < sizeof (buffer));
    #####:   30:  TEST_ASSERT (jerry_string_to_char_buffer (left_string, buffer, (jerry_size_t) size) == size);
    #####:   31:  TEST_ASSERT (memcmp (buffer, right_string_p, size) == 0);
    #####:   32:} /* compare_string */
        -:   33:
        -:   34:int
    #####:   35:main (void)
        -:   36:{
    #####:   37:  TEST_INIT ();
        -:   38:
    #####:   39:  jerry_init (JERRY_INIT_EMPTY);
        -:   40:
    #####:   41:  if (!jerry_is_feature_enabled (JERRY_FEATURE_FUNCTION_TO_STRING))
        -:   42:  {
    #####:   43:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Source code is not stored!\n");
    #####:   44:    jerry_cleanup ();
    #####:   45:    return 0;
        -:   46:  }
        -:   47:
    #####:   48:  jerry_value_t value = jerry_create_null ();
    #####:   49:  jerry_source_info_t *source_info_p = jerry_get_source_info (value);
    #####:   50:  TEST_ASSERT (source_info_p == NULL);
    #####:   51:  jerry_free_source_info (source_info_p);
    #####:   52:  jerry_release_value (value);
        -:   53:
    #####:   54:  value = jerry_create_object ();
    #####:   55:  source_info_p = jerry_get_source_info (value);
    #####:   56:  TEST_ASSERT (source_info_p == NULL);
    #####:   57:  jerry_free_source_info (source_info_p);
    #####:   58:  jerry_release_value (value);
        -:   59:
        -:   60:  jerry_parse_options_t parse_options;
    #####:   61:  const char *source_p = TEST_STRING_LITERAL ("var a = 6");
        -:   62:
    #####:   63:  value = jerry_parse ((jerry_char_t *) source_p, strlen (source_p), NULL);
    #####:   64:  source_info_p = jerry_get_source_info (value);
    #####:   65:  TEST_ASSERT (source_info_p != NULL);
    #####:   66:  TEST_ASSERT (source_info_p->enabled_fields == JERRY_SOURCE_INFO_HAS_SOURCE_CODE);
    #####:   67:  compare_string (source_info_p->source_code, source_p);
    #####:   68:  TEST_ASSERT (jerry_value_is_undefined (source_info_p->function_arguments));
    #####:   69:  TEST_ASSERT (source_info_p->source_range_start == 0);
    #####:   70:  TEST_ASSERT (source_info_p->source_range_length == 0);
    #####:   71:  jerry_free_source_info (source_info_p);
    #####:   72:  jerry_release_value (value);
        -:   73:
    #####:   74:  if (jerry_is_feature_enabled (JERRY_FEATURE_MODULE))
        -:   75:  {
    #####:   76:    parse_options.options = JERRY_PARSE_MODULE;
        -:   77:
    #####:   78:    value = jerry_parse ((jerry_char_t *) source_p, strlen (source_p), &parse_options);
        -:   79:
    #####:   80:    jerry_value_t result = jerry_module_link (value, NULL, NULL);
    #####:   81:    TEST_ASSERT (!jerry_value_is_error (result));
    #####:   82:    jerry_release_value (result);
        -:   83:
    #####:   84:    source_info_p = jerry_get_source_info (value);
    #####:   85:    TEST_ASSERT (source_info_p != NULL);
    #####:   86:    TEST_ASSERT (source_info_p->enabled_fields == JERRY_SOURCE_INFO_HAS_SOURCE_CODE);
    #####:   87:    compare_string (source_info_p->source_code, source_p);
    #####:   88:    TEST_ASSERT (jerry_value_is_undefined (source_info_p->function_arguments));
    #####:   89:    TEST_ASSERT (source_info_p->source_range_start == 0);
    #####:   90:    TEST_ASSERT (source_info_p->source_range_length == 0);
    #####:   91:    jerry_free_source_info (source_info_p);
        -:   92:
    #####:   93:    result = jerry_module_evaluate (value);
    #####:   94:    TEST_ASSERT (!jerry_value_is_error (result));
    #####:   95:    jerry_release_value (result);
        -:   96:
        -:   97:    /* Byte code is released after a successful evaluation. */
    #####:   98:    source_info_p = jerry_get_source_info (value);
    #####:   99:    TEST_ASSERT (source_info_p == NULL);
    #####:  100:    jerry_free_source_info (source_info_p);
    #####:  101:    jerry_release_value (value);
        -:  102:  }
        -:  103:
    #####:  104:  source_p = TEST_STRING_LITERAL ("( function f() {} )");
        -:  105:
    #####:  106:  value = jerry_eval ((const jerry_char_t *) source_p, strlen (source_p), 0);
    #####:  107:  source_info_p = jerry_get_source_info (value);
    #####:  108:  TEST_ASSERT (source_info_p != NULL);
    #####:  109:  TEST_ASSERT (source_info_p->enabled_fields == (JERRY_SOURCE_INFO_HAS_SOURCE_CODE
        -:  110:                                                 | JERRY_SOURCE_INFO_HAS_SOURCE_RANGE));
    #####:  111:  compare_string (source_info_p->source_code, source_p);
    #####:  112:  TEST_ASSERT (jerry_value_is_undefined (source_info_p->function_arguments));
    #####:  113:  TEST_ASSERT (source_info_p->source_range_start == 2);
    #####:  114:  TEST_ASSERT (source_info_p->source_range_length == 15);
    #####:  115:  jerry_free_source_info (source_info_p);
    #####:  116:  jerry_release_value (value);
        -:  117:
    #####:  118:  source_p = TEST_STRING_LITERAL ("new Function('a', 'b', 'return 0;')");
        -:  119:
    #####:  120:  value = jerry_eval ((const jerry_char_t *) source_p, strlen (source_p), 0);
    #####:  121:  source_info_p = jerry_get_source_info (value);
    #####:  122:  TEST_ASSERT (source_info_p != NULL);
    #####:  123:  TEST_ASSERT (source_info_p->enabled_fields == (JERRY_SOURCE_INFO_HAS_SOURCE_CODE
        -:  124:                                                 | JERRY_SOURCE_INFO_HAS_FUNCTION_ARGUMENTS));
    #####:  125:  compare_string (source_info_p->source_code, "return 0;");
    #####:  126:  compare_string (source_info_p->function_arguments, "a,b");
    #####:  127:  TEST_ASSERT (source_info_p->source_range_start == 0);
    #####:  128:  TEST_ASSERT (source_info_p->source_range_length == 0);
    #####:  129:  jerry_free_source_info (source_info_p);
    #####:  130:  jerry_release_value (value);
        -:  131:
    #####:  132:  source_p = TEST_STRING_LITERAL ("(new Function('a = ( function() { } )', 'return a;'))()");
        -:  133:
    #####:  134:  value = jerry_eval ((const jerry_char_t *) source_p, strlen (source_p), 0);
    #####:  135:  source_info_p = jerry_get_source_info (value);
    #####:  136:  TEST_ASSERT (source_info_p != NULL);
    #####:  137:  TEST_ASSERT (source_info_p->enabled_fields == (JERRY_SOURCE_INFO_HAS_SOURCE_CODE
        -:  138:                                                 | JERRY_SOURCE_INFO_HAS_SOURCE_RANGE));
    #####:  139:  compare_string (source_info_p->source_code, "a = ( function() { } )");
    #####:  140:  TEST_ASSERT (jerry_value_is_undefined (source_info_p->function_arguments));
    #####:  141:  TEST_ASSERT (source_info_p->source_range_start == 6);
    #####:  142:  TEST_ASSERT (source_info_p->source_range_length == 14);
    #####:  143:  jerry_free_source_info (source_info_p);
    #####:  144:  jerry_release_value (value);
        -:  145:
    #####:  146:  source_p = TEST_STRING_LITERAL ("(function f(a) { return 7 }).bind({})");
        -:  147:
    #####:  148:  value = jerry_eval ((const jerry_char_t *) source_p, strlen (source_p), 0);
    #####:  149:  source_info_p = jerry_get_source_info (value);
    #####:  150:  TEST_ASSERT (source_info_p != NULL);
    #####:  151:  TEST_ASSERT (source_info_p->enabled_fields == (JERRY_SOURCE_INFO_HAS_SOURCE_CODE
        -:  152:                                                 | JERRY_SOURCE_INFO_HAS_SOURCE_RANGE));
    #####:  153:  compare_string (source_info_p->source_code, source_p);
    #####:  154:  TEST_ASSERT (jerry_value_is_undefined (source_info_p->function_arguments));
    #####:  155:  TEST_ASSERT (source_info_p->source_range_start == 1);
    #####:  156:  TEST_ASSERT (source_info_p->source_range_length == 26);
    #####:  157:  jerry_free_source_info (source_info_p);
    #####:  158:  jerry_release_value (value);
        -:  159:
    #####:  160:  jerry_cleanup ();
    #####:  161:  return 0;
        -:  162:} /* main */
