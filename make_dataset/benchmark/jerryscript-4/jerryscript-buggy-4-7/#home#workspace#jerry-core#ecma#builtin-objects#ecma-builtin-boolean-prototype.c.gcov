        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-boolean-prototype.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-conversion.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-objects.h"
        -:   24:#include "ecma-string-object.h"
        -:   25:#include "jrt.h"
        -:   26:
        -:   27:#if JERRY_BUILTIN_BOOLEAN
        -:   28:
        -:   29:#define ECMA_BUILTINS_INTERNAL
        -:   30:#include "ecma-builtins-internal.h"
        -:   31:
        -:   32:/**
        -:   33: * This object has a custom dispatch function.
        -:   34: */
        -:   35:#define BUILTIN_CUSTOM_DISPATCH
        -:   36:
        -:   37:/**
        -:   38: * List of built-in routine identifiers.
        -:   39: */
        -:   40:enum
        -:   41:{
        -:   42:  ECMA_BOOLEAN_PROTOTYPE_ROUTINE_START = 0,
        -:   43:  ECMA_BOOLEAN_PROTOTYPE_ROUTINE_TO_STRING,
        -:   44:  ECMA_BOOLEAN_PROTOTYPE_ROUTINE_VALUE_OF
        -:   45:};
        -:   46:
        -:   47:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-boolean-prototype.inc.h"
        -:   48:#define BUILTIN_UNDERSCORED_ID boolean_prototype
        -:   49:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   50:
        -:   51:/** \addtogroup ecma ECMA
        -:   52: * @{
        -:   53: *
        -:   54: * \addtogroup ecmabuiltins
        -:   55: * @{
        -:   56: *
        -:   57: * \addtogroup booleanprototype ECMA Boolean.prototype object built-in
        -:   58: * @{
        -:   59: */
        -:   60:
        -:   61:/**
        -:   62: * The Boolean.prototype object's 'valueOf' routine
        -:   63: *
        -:   64: * See also:
        -:   65: *          ECMA-262 v5, 15.6.4.3
        -:   66: *
        -:   67: * @return ecma value
        -:   68: *         Returned value must be freed with ecma_free_value.
        -:   69: */
        -:   70:static ecma_value_t
    #####:   71:ecma_builtin_boolean_prototype_object_value_of (ecma_value_t this_arg) /**< this argument */
        -:   72:{
    #####:   73:  if (ecma_is_value_boolean (this_arg))
        -:   74:  {
    #####:   75:    return this_arg;
        -:   76:  }
    #####:   77:  else if (ecma_is_value_object (this_arg))
        -:   78:  {
    #####:   79:    ecma_object_t *object_p = ecma_get_object_from_value (this_arg);
        -:   80:
    #####:   81:    if (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_BOOLEAN))
        -:   82:    {
    #####:   83:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -:   84:
    #####:   85:      JERRY_ASSERT (ecma_is_value_boolean (ext_object_p->u.cls.u3.value));
        -:   86:
    #####:   87:      return ext_object_p->u.cls.u3.value;
        -:   88:    }
        -:   89:  }
        -:   90:
    #####:   91:  return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not a Boolean object"));
        -:   92:} /* ecma_builtin_boolean_prototype_object_value_of */
        -:   93:
        -:   94:/**
        -:   95: * Dispatcher of the built-in's routines
        -:   96: *
        -:   97: * @return ecma value
        -:   98: *         Returned value must be freed with ecma_free_value.
        -:   99: */
        -:  100:ecma_value_t
    #####:  101:ecma_builtin_boolean_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:  102:                                                                              *   identifier */
        -:  103:                                                 ecma_value_t this_arg, /**< 'this' argument value */
        -:  104:                                                 const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  105:                                                                                         *   passed to routine */
        -:  106:                                                 uint32_t arguments_number) /**< length of arguments' list */
        -:  107:{
        -:  108:  JERRY_UNUSED_2 (arguments_number, arguments_list_p);
        -:  109:
    #####:  110:  ecma_value_t value_of_ret = ecma_builtin_boolean_prototype_object_value_of (this_arg);
    #####:  111:  if (builtin_routine_id == ECMA_BOOLEAN_PROTOTYPE_ROUTINE_VALUE_OF)
        -:  112:  {
    #####:  113:    return value_of_ret;
        -:  114:  }
        -:  115:
    #####:  116:  JERRY_ASSERT (builtin_routine_id == ECMA_BOOLEAN_PROTOTYPE_ROUTINE_TO_STRING);
        -:  117:
    #####:  118:  if (ECMA_IS_VALUE_ERROR (value_of_ret))
        -:  119:  {
    #####:  120:    return value_of_ret;
        -:  121:  }
        -:  122:
    #####:  123:  if (ecma_is_value_true (value_of_ret))
        -:  124:  {
    #####:  125:    return ecma_make_magic_string_value (LIT_MAGIC_STRING_TRUE);
        -:  126:  }
        -:  127:
    #####:  128:  JERRY_ASSERT (ecma_is_value_false (value_of_ret));
        -:  129:
    #####:  130:  return ecma_make_magic_string_value (LIT_MAGIC_STRING_FALSE);
        -:  131:} /* ecma_builtin_boolean_prototype_dispatch_routine */
        -:  132:
        -:  133:/**
        -:  134: * @}
        -:  135: * @}
        -:  136: * @}
        -:  137: */
        -:  138:
        -:  139:#endif /* JERRY_BUILTIN_BOOLEAN */
