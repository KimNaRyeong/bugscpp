        -:    0:Source:/home/workspace/docs/02.API-REFERENCE.md
        -:    0:Programs:291
        -:    1:# JerryScript types
        -:    2:
        -:    3:## jerry_init_flag_t
        -:    4:
        -:    5:Enum that contains the following elements:
        -:    6:
        -:    7: - JERRY_INIT_EMPTY - empty flag set
        -:    8: - JERRY_INIT_SHOW_OPCODES - dump byte-code to log after parse
        -:    9: - JERRY_INIT_SHOW_REGEXP_OPCODES - dump regexp byte-code to log after compilation
        -:   10: - JERRY_INIT_MEM_STATS - dump memory statistics
        -:   11: - JERRY_INIT_MEM_STATS_SEPARATE - **deprecated**, dump memory statistics and reset peak values after parse
        -:   12: - JERRY_INIT_DEBUGGER - **deprecated**, an unused placeholder now
        -:   13:
        -:   14:*Changed in version 2.0*: `JERRY_INIT_MEM_STATS_SEPARATE` and `JERRY_INIT_DEBUGGER` are now deprecated and not used internally.
        -:   15:
        -:   16:## jerry_type_t
        -:   17:
        -:   18:Enum that contains JerryScript API value types:
        -:   19:
        -:   20: - JERRY_TYPE_NONE - no type information
        -:   21: - JERRY_TYPE_UNDEFINED - undefined type
        -:   22: - JERRY_TYPE_NULL - null type
        -:   23: - JERRY_TYPE_BOOLEAN - boolean type
        -:   24: - JERRY_TYPE_NUMBER - number type
        -:   25: - JERRY_TYPE_STRING - string type
        -:   26: - JERRY_TYPE_OBJECT - object type
        -:   27: - JERRY_TYPE_FUNCTION - function type
        -:   28: - JERRY_TYPE_ERROR - error/abort type
        -:   29: - JERRY_TYPE_SYMBOL - symbol type
        -:   30: - JERRY_TYPE_BIGINT - bigint type
        -:   31:
        -:   32:*New in version 2.0*.
        -:   33:
        -:   34:*Changed in version 2.4*: Added `JERRY_TYPE_BIGINT` value.
        -:   35:
        -:   36:## jerry_object_type_t
        -:   37:
        -:   38:Enum that contains JerryScript **object** value types:
        -:   39:
        -:   40: - JERRY_OBJECT_TYPE_NONE - Non-object type
        -:   41: - JERRY_OBJECT_TYPE_GENERIC - Generic JavaScript object without any internal property
        -:   42: - JERRY_OBJECT_TYPE_MODULE_NAMESPACE - Module namespace object
        -:   43: - JERRY_OBJECT_TYPE_ARRAY - Array object
        -:   44: - JERRY_OBJECT_TYPE_PROXY - Proxy object
        -:   45: - JERRY_OBJECT_TYPE_SCRIPT - Script object (see [jerry_parse](#jerry_parse))
        -:   46: - JERRY_OBJECT_TYPE_MODULE - Module object (see [jerry_parse](#jerry_parse))
        -:   47: - JERRY_OBJECT_TYPE_PROMISE - Promise object
        -:   48: - JERRY_OBJECT_TYPE_DATAVIEW - Dataview object
        -:   49: - JERRY_OBJECT_TYPE_FUNCTION - Function object (see [jerry_function_get_type](#jerry_function_get_type))
        -:   50: - JERRY_OBJECT_TYPE_TYPEDARRAY - %TypedArray% object (see [jerry_get_typedarray_type](#jerry_get_typedarray_type))
        -:   51: - JERRY_OBJECT_TYPE_ITERATOR - Iterator object (see [jerry_iterator_get_type](#jerry_get_typedarray_type))
        -:   52: - JERRY_OBJECT_TYPE_CONTAINER - Container object (see [jerry_get_container_type](#jerry_get_container_type))
        -:   53: - JERRY_OBJECT_TYPE_ERROR - Error object
        -:   54: - JERRY_OBJECT_TYPE_ARRAYBUFFER - Array buffer object
        -:   55: - JERRY_OBJECT_TYPE_SHARED_ARRAYBUFFER - Shared Array buffer object
        -:   56:
        -:   57: - JERRY_OBJECT_TYPE_ARGUMENTS - Arguments object
        -:   58: - JERRY_OBJECT_TYPE_BOOLEAN - Boolean object
        -:   59: - JERRY_OBJECT_TYPE_DATE - Date object
        -:   60: - JERRY_OBJECT_TYPE_NUMBER - Number object
        -:   61: - JERRY_OBJECT_TYPE_REGEXP - RegExp object
        -:   62: - JERRY_OBJECT_TYPE_STRING - String object
        -:   63: - JERRY_OBJECT_TYPE_SYMBOL - Symbol object
        -:   64: - JERRY_OBJECT_TYPE_GENERATOR - Generator object
        -:   65: - JERRY_OBJECT_TYPE_BIGINT - BigInt object
        -:   66: - JERRY_OBJECT_TYPE_WEAKREF - WeakRef object
        -:   67:
        -:   68:*New in version 2.4*.
        -:   69:
        -:   70:*Changed in version [[NEXT_RELEASE]]*: Added `JERRY_OBJECT_TYPE_MODULE_NAMESPACE`, `JERRY_OBJECT_TYPE_PROMISE`, `JERRY_OBJECT_TYPE_DATAVIEW`,
        -:   71:                                       `JERRY_OBJECT_TYPE_ERROR`, `JERRY_OBJECT_TYPE_SHARED_ARRAYBUFFER`, `JERRY_OBJECT_TYPE_WEAKREF`,
        -:   72:                                       `JERRY_OBJECT_TYPE_SCRIPT`, and `JERRY_OBJECT_TYPE_MODULE` values.
        -:   73:
        -:   74:## jerry_function_type_t
        -:   75:
        -:   76:Enum that contains JerryScript **function** value types:
        -:   77:
        -:   78: - JERRY_FUNCTION_TYPE_NONE - Non-function type
        -:   79: - JERRY_FUNCTION_TYPE_GENERIC - Generic JavaScript function
        -:   80: - JERRY_FUNCTION_TYPE_ACCESSOR - Accessor function
        -:   81: - JERRY_FUNCTION_TYPE_BOUND - Bound function
        -:   82: - JERRY_FUNCTION_TYPE_ARROW - Arrow fuction
        -:   83: - JERRY_FUNCTION_TYPE_GENERATOR - Generator function object
        -:   84:
        -:   85:*New in version 2.4*.
        -:   86:
        -:   87:## jerry_iterator_type_t
        -:   88:
        -:   89:Enum that contains JerryScript **iterator** value types:
        -:   90:
        -:   91: - JERRY_ITERATOR_TYPE_NONE - Non-iterator type
        -:   92: - JERRY_ITERATOR_TYPE_ARRAY - Array iterator
        -:   93: - JERRY_ITERATOR_TYPE_STRING - String iterator
        -:   94: - JERRY_ITERATOR_TYPE_MAP - Map iterator
        -:   95: - JERRY_ITERATOR_TYPE_SET - Set iterator
        -:   96:
        -:   97:*New in version 2.4*.
        -:   98:
        -:   99:## jerry_proxy_object_options_t
        -:  100:
        -:  101:These option bits allow specializing Proxies with non-standard behaviour.
        -:  102:These flags are recommended only for those trusted Proxies, whose handlers
        -:  103:produce correct results.
        -:  104:
        -:  105:- JERRY_PROXY_SKIP_RESULT_VALIDATION - skip result validation for [[GetPrototypeOf]], [[SetPrototypeOf]], [[IsExtensible]],
        -:  106:                                       [[PreventExtensions]], [[GetOwnProperty]], [[DefineOwnProperty]], [[HasProperty]],
        -:  107:                                       [[Get]], [[Set]], [[Delete]] and [[OwnPropertyKeys]]
        -:  108:
        -:  109:*New in version [[NEXT_RELEASE]]*.
        -:  110:
        -:  111:## jerry_property_filter_t
        -:  112:
        -:  113:Enum that contains JerryScript **property filter** options bits:
        -:  114:
        -:  115: - JERRY_PROPERTY_FILTER_ALL -  List all property keys independently from key type or property value attributes (equivalent to Reflect.ownKeys call)
        -:  116: - JERRY_PROPERTY_FILTER_TRAVERSE_PROTOTYPE_CHAIN - Include keys from the objects's  prototype chain as well
        -:  117: - JERRY_PROPERTY_FILTER_EXLCUDE_NON_CONFIGURABLE - Exclude property key if the property is non-configurable
        -:  118: - JERRY_PROPERTY_FILTER_EXLCUDE_NON_ENUMERABLE - Exclude property key if the property is non-enumerable
        -:  119: - JERRY_PROPERTY_FILTER_EXLCUDE_NON_WRITABLE - Exclude property key if the property is non-writable
        -:  120: - JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS - Exclude property key if it is a string
        -:  121: - JERRY_PROPERTY_FILTER_EXLCUDE_SYMBOLS - Exclude property key if it is a symbol
        -:  122: - JERRY_PROPERTY_FILTER_EXLCUDE_INTEGER_INDICES - Exclude property key if it is an integer index
        -:  123: - JERRY_PROPERTY_FILTER_INTEGER_INDICES_AS_NUMBER - By default integer index property keys are converted to string. Enabling this flags keeps integer index property keys as numbers
        -:  124:
        -:  125:*New in version 2.4*.
        -:  126:
        -:  127:## jerry_error_t
        -:  128:
        -:  129:Possible types of an error:
        -:  130:
        -:  131: - JERRY_ERROR_COMMON - common error
        -:  132: - JERRY_ERROR_EVAL - eval error
        -:  133: - JERRY_ERROR_RANGE - range error
        -:  134: - JERRY_ERROR_REFERENCE - reference error
        -:  135: - JERRY_ERROR_SYNTAX - syntax error
        -:  136: - JERRY_ERROR_TYPE - type error
        -:  137: - JERRY_ERROR_URI - URI error
        -:  138:
        -:  139:There is also a special value `JERRY_ERROR_NONE` which is not an error type
        -:  140:this value can only be returned by the [jerry_get_error_type](#jerry_get_error_type).
        -:  141:
        -:  142:*Changed in version 2.0*: The `JERRY_ERROR_NONE` was added to be used by the [jerry_get_error_type](#jerry_get_error_type) method.
        -:  143:
        -:  144:## jerry_feature_t
        -:  145:
        -:  146:Possible compile time enabled feature types:
        -:  147:
        -:  148: - JERRY_FEATURE_CPOINTER_32_BIT - 32 bit compressed pointers
        -:  149: - JERRY_FEATURE_ERROR_MESSAGES - error messages
        -:  150: - JERRY_FEATURE_JS_PARSER - js-parser
        -:  151: - JERRY_FEATURE_MEM_STATS - memory statistics
        -:  152: - JERRY_FEATURE_PARSER_DUMP - parser byte-code dumps
        -:  153: - JERRY_FEATURE_REGEXP_DUMP - regexp byte-code dumps
        -:  154: - JERRY_FEATURE_SNAPSHOT_SAVE - saving snapshot files
        -:  155: - JERRY_FEATURE_SNAPSHOT_EXEC - executing snapshot files
        -:  156: - JERRY_FEATURE_DEBUGGER - debugging
        -:  157: - JERRY_FEATURE_VM_EXEC_STOP - stopping ECMAScript execution
        -:  158: - JERRY_FEATURE_VM_THROW - capturing ECMAScript throws
        -:  159: - JERRY_FEATURE_JSON - JSON support
        -:  160: - JERRY_FEATURE_PROMISE - promise support
        -:  161: - JERRY_FEATURE_TYPEDARRAY - Typedarray support
        -:  162: - JERRY_FEATURE_DATE - Date support
        -:  163: - JERRY_FEATURE_REGEXP - RegExp support
        -:  164: - JERRY_FEATURE_LINE_INFO - line info available
        -:  165: - JERRY_FEATURE_LOGGING - logging
        -:  166: - JERRY_FEATURE_SYMBOL - symbol support
        -:  167: - JERRY_FEATURE_DATAVIEW - DataView support
        -:  168: - JERRY_FEATURE_PROXY - Proxy support
        -:  169: - JERRY_FEATURE_MAP - Map support
        -:  170: - JERRY_FEATURE_SET - Set support
        -:  171: - JERRY_FEATURE_WEAKMAP - WeakMap support
        -:  172: - JERRY_FEATURE_WEAKSET - WeakSet support
        -:  173: - JERRY_FEATURE_BIGINT - BigInt support
        -:  174: - JERRY_FEATURE_REALM - realm support
        -:  175: - JERRY_FEATURE_GLOBAL_THIS - GlobalThisValue support
        -:  176: - JERRY_FEATURE_PROMISE_CALLBACK - Promise callback support
        -:  177: - JERRY_FEATURE_MODULE - Module support
        -:  178: - JERRY_FEATURE_WEAKREF - WeakRef support
        -:  179: - JERRY_FEATURE_FUNCTION_TO_STRING - function toString support
        -:  180:
        -:  181:*New in version 2.0*.
        -:  182:
        -:  183:*Changed in version 2.3*: Added `JERRY_FEATURE_WEAKMAP`, `JERRY_FEATURE_WEAKSET` values.
        -:  184:
        -:  185:*Changed in version 2.4*: Added `JERRY_FEATURE_BIGINT`, `JERRY_FEATURE_REALM` values.
        -:  186:
        -:  187:*Changed in version [[NEXT_RELEASE]]*: Added `JERRY_FEATURE_VM_THROW`, `JERRY_FEATURE_GLOBAL_THIS`,
        -:  188:                                       `JERRY_FEATURE_PROMISE_CALLBACK`, and `JERRY_FEATURE_MODULE`,
        -:  189:                                       `JERRY_FEATURE_WEAKREF`, and `JERRY_FEATURE_FUNCTION_TO_STRING` values.
        -:  190:
        -:  191:## jerry_container_type_t
        -:  192:
        -:  193:Container object types:
        -:  194:
        -:  195: - JERRY_CONTAINER_TYPE_INVALID - Invalid container
        -:  196: - JERRY_CONTAINER_TYPE_MAP - Map type
        -:  197: - JERRY_CONTAINER_TYPE_SET - Set type
        -:  198: - JERRY_CONTAINER_TYPE_WEAKMAP - WeakMap type
        -:  199: - JERRY_CONTAINER_TYPE_WEAKSET - WeakSet type
        -:  200:
        -:  201: *New in version 2.3*.
        -:  202:
        -:  203:## jerry_well_known_symbol_t
        -:  204:
        -:  205:Well-known symbols:
        -:  206:
        -:  207: - JERRY_SYMBOL_ASYNC_ITERATOR - @@asyncIterator well-known symbol
        -:  208: - JERRY_SYMBOL_HAS_INSTANCE - @@hasInstance well-known symbol
        -:  209: - JERRY_SYMBOL_IS_CONCAT_SPREADABLE - @@isConcatSpreadable well-known symbol
        -:  210: - JERRY_SYMBOL_ITERATOR - @@iterator well-known symbol
        -:  211: - JERRY_SYMBOL_MATCH - @@match well-known symbol
        -:  212: - JERRY_SYMBOL_REPLACE - @@replace well-known symbol
        -:  213: - JERRY_SYMBOL_SEARCH - @@search well-known symbol
        -:  214: - JERRY_SYMBOL_SPECIES - @@species well-known symbol
        -:  215: - JERRY_SYMBOL_SPLIT - @@split well-known symbol
        -:  216: - JERRY_SYMBOL_TO_PRIMITIVE - @@toPrimitive well-known symbol
        -:  217: - JERRY_SYMBOL_TO_STRING_TAG - @@toStringTag well-known symbol
        -:  218: - JERRY_SYMBOL_UNSCOPABLES - @@unscopables well-known symbol
        -:  219: - JERRY_SYMBOL_MATCH_ALL - @@matchAll well-known symbol
        -:  220:
        -:  221: *New in version 2.4*.
        -:  222:
        -:  223:## jerry_regexp_flags_t
        -:  224:
        -:  225:RegExp object optional flags:
        -:  226:
        -:  227:  - JERRY_REGEXP_FLAG_GLOBAL - global match; find all matches rather than stopping after the first match
        -:  228:  - JERRY_REGEXP_FLAG_IGNORE_CASE - ignore case
        -:  229:  - JERRY_REGEXP_FLAG_MULTILINE - multiline; treat beginning and end characters (^ and $) as working
        -:  230:    over
        -:  231:    multiple lines (i.e., match the beginning or end of each line (delimited by \n or \r), not only the
        -:  232:    very beginning or end of the whole input string)
        -:  233:  - JERRY_REGEXP_FLAG_STICKY - The sticky flag indicates that it matches only from the index indicated
        -:  234:    by the lastIndex property
        -:  235:  - JERRY_REGEXP_FLAG_UNICODE - The unicode flag enables various Unicode-related features
        -:  236:  - JERRY_REGEXP_FLAG_DOTALL -The dotall flag indicates that the dot special character (".") should
        -:  237:    additionally match the following line terminator ("newline") characters in a string;
        -:  238:
        -:  239:
        -:  240:*New in version 2.0*.
        -:  241:
        -:  242:*Changed in version 2.4*: Added `JERRY_REGEXP_FLAG_STICKY`, `JERRY_REGEXP_FLAG_UNICODE` , `JERRY_REGEXP_FLAG_DOTALL` values.
        -:  243:
        -:  244:
        -:  245:## jerry_parse_option_enable_feature_t
        -:  246:
        -:  247:Option bits for [jerry_parse_options_t](#jerry_parse_options_t).
        -:  248:
        -:  249: - JERRY_PARSE_NO_OPTS - No options passed
        -:  250: - JERRY_PARSE_STRICT_MODE - Enable strict mode
        -:  251: - JERRY_PARSE_MODULE - Parse source as an ECMAScript module
        -:  252: - JERRY_PARSE_HAS_ARGUMENT_LIST - `argument_list` field is valid, this also means that function parsing will be done
        -:  253: - JERRY_PARSE_HAS_RESOURCE - `resource_name` field is valid
        -:  254: - JERRY_PARSE_HAS_START - `start_line` and `start_column` fields are valid
        -:  255: - JERRY_PARSE_HAS_USER_VALUE - `user_value` field is valid
        -:  256:
        -:  257:*New in version [[NEXT_RELEASE]]*.
        -:  258:
        -:  259:Using both `JERRY_PARSE_MODULE` and `JERRY_PARSE_HAS_ARGUMENT_LIST` is an invalid combination and will result in
        -:  260:an error during parsing.
        -:  261:
        -:  262:**See also**
        -:  263:
        -:  264:- [jerry_parse_options_t](#jerry_parse_options_t)
        -:  265:
        -:  266:## jerry_gc_mode_t
        -:  267:
        -:  268:Set garbage collection operational mode
        -:  269:
        -:  270: - JERRY_GC_PRESSURE_LOW - free unused objects
        -:  271: - JERRY_GC_PRESSURE_HIGH - free as much memory as possible
        -:  272:
        -:  273:The difference between `JERRY_GC_PRESSURE_LOW` and `JERRY_GC_PRESSURE_HIGH`
        -:  274:is that the former keeps memory allocated for performance improvements such
        -:  275:as property hash tables for large objects. The latter frees all possible
        -:  276:memory blocks but the performance may drop after the garbage collection.
        -:  277:
        -:  278:*New in version 2.0*.
        -:  279:
        -:  280:## jerry_backtrace_frame_types_t
        -:  281:
        -:  282:List of backtrace frame types returned by
        -:  283:[jerry_backtrace_get_frame_type](#jerry_backtrace_get_frame_type).
        -:  284:
        -:  285: - JERRY_BACKTRACE_FRAME_JS - indicates that the frame is created for a JavaScript function/method
        -:  286:
        -:  287:*New in version [[NEXT_RELEASE]]*.
        -:  288:
        -:  289:## jerry_generate_snapshot_opts_t
        -:  290:
        -:  291:Flags for [jerry_generate_snapshot](#jerry_generate_snapshot):
        -:  292:
        -:  293: - JERRY_SNAPSHOT_SAVE_STATIC - generate static snapshot (see below)
        -:  294:
        -:  295:**Generate static snapshots**
        -:  296:Snapshots contain literal pools, and these literal pools contain references
        -:  297:to constant literals (strings, numbers, etc.). When a snapshot is executed,
        -:  298:these literals are converted to jerry values and the literal pool entries
        -:  299:are changed to their corresponding jerry value. To support this conversion,
        -:  300:the literals and literal pools are copied into RAM even if the
        -:  301:`JERRY_SNAPSHOT_EXEC_COPY_DATA` option is passed to
        -:  302:[jerry_exec_snapshot](#jerry_exec_snapshot). This non-negligible memory
        -:  303:consumption can be avoided by using static snapshots. The literals of
        -:  304:these snapshots are limited to magic strings and 28 bit signed integers,
        -:  305:so their constant pools do not need to be loaded into the memory.
        -:  306:Hence these snapshots can be executed from ROM.
        -:  307:
        -:  308:***Important note:*** The [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  309:function rejects static snaphots unless the `JERRY_SNAPSHOT_EXEC_ALLOW_STATIC`
        -:  310:option bit is set. The caller must also ensure that the same magic
        -:  311:strings are set by [jerry_register_magic_strings](#jerry_register_magic_strings)
        -:  312:when the snapshot is generated and executed. Furthermore the
        -:  313:`JERRY_SNAPSHOT_EXEC_COPY_DATA` option is not allowed.
        -:  314:
        -:  315:*New in version 2.0*.
        -:  316:
        -:  317:*Changed in version [[NEXT_RELEASE]]*: The `JERRY_SNAPSHOT_SAVE_STRICT` value is removed, `JERRY_PARSE_STRICT_MODE` should be used instead.
        -:  318:
        -:  319:## jerry_exec_snapshot_opts_t
        -:  320:
        -:  321:Flags for [jerry_exec_snapshot](#jerry_exec_snapshot) functions:
        -:  322:
        -:  323: - JERRY_SNAPSHOT_EXEC_COPY_DATA - copy snapshot data into memory (see below)
        -:  324: - JERRY_SNAPSHOT_EXEC_ALLOW_STATIC - allow executing static snapshots
        -:  325: - JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION - load snapshot as function instead of executing it
        -:  326: - JERRY_SNAPSHOT_EXEC_HAS_RESOURCE - `resource_name` field is valid
        -:  327:                                      in [jerry_exec_snapshot_option_values_t](#jerry_exec_snapshot_option_values_t)
        -:  328: - JERRY_SNAPSHOT_EXEC_HAS_USER_VALUE - `user_value` field is valid
        -:  329:                                        in [jerry_exec_snapshot_option_values_t](#jerry_exec_snapshot_option_values_t)
        -:  330:
        -:  331:*Changed in version [[NEXT_RELEASE]]*: The `JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION` value is added,
        -:  332:                                       which replaces the `jerry_load_function_snapshot` function.
        -:  333:
        -:  334:**Copy snapshot data into memory**
        -:  335:
        -:  336:By default the snapshot buffer is expected to be present in memory until
        -:  337:[jerry_cleanup](#jerry_cleanup) is called. For example `static const` buffers
        -:  338:compiled into the application binary satisfy this requirement.
        -:  339:
        -:  340:If the snapshot buffer is freed after [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  341:is called the `JERRY_SNAPSHOT_EXEC_COPY_DATA` must be passed to copy the necessary
        -:  342:parts of the snapshot buffer into memory.
        -:  343:
        -:  344:The `JERRY_SNAPSHOT_EXEC_COPY_DATA` option is not allowed for static snapshots.
        -:  345:
        -:  346:*New in version 2.0*.
        -:  347:
        -:  348:## jerry_char_t
        -:  349:
        -:  350:**Summary**
        -:  351:
        -:  352:Jerry's char value
        -:  353:
        -:  354:**Prototype**
        -:  355:
        -:  356:```c
        -:  357:typedef uint8_t jerry_char_t;
        -:  358:```
        -:  359:
        -:  360:## jerry_size_t
        -:  361:
        -:  362:**Summary**
        -:  363:
        -:  364:Jerry's size
        -:  365:
        -:  366:**Prototype**
        -:  367:
        -:  368:```c
        -:  369:typedef uint32_t jerry_size_t;
        -:  370:```
        -:  371:
        -:  372:## jerry_length_t
        -:  373:
        -:  374:**Summary**
        -:  375:
        -:  376:Jerry's length
        -:  377:
        -:  378:**Prototype**
        -:  379:
        -:  380:```c
        -:  381:typedef uint32_t jerry_length_t;
        -:  382:```
        -:  383:
        -:  384:## jerry_value_t
        -:  385:
        -:  386:**Summary**
        -:  387:
        -:  388:JerryScript value can be a boolean, number, null, object, string or undefined. The value has an error flag,
        -:  389:that indicates whether is an error or not. Every type has an error flag not only objects. The error flag should
        -:  390:be cleared before the value is passed as an argument, otherwise it can lead to a type error. The error objects
        -:  391:created by API functions has the error flag set.
        -:  392:
        -:  393:Returned and created values by the API functions must be freed with
        -:  394:[jerry_release_value](#jerry_release_value) when they are no longer needed.
        -:  395:
        -:  396:**Prototype**
        -:  397:
        -:  398:```c
        -:  399:typedef uint32_t jerry_value_t;
        -:  400:```
        -:  401:
        -:  402:## jerry_context_data_manager_t
        -:  403:
        -:  404:**Summary**
        -:  405:
        -:  406:Structure that defines how a context data item will be initialized and deinitialized. JerryScript zeroes out the memory
        -:  407:for the item by default, and if the `init_cb` field is not NULL, it will be called with the pointer to the memory as
        -:  408:an additional custom initializer. The `deinit_cb` (if non-`NULL`) is called during a call to `jerry_cleanup ()` to run
        -:  409:any custom deinitialization *before* the VM has been fully cleaned up. The `finalize_cb` (if non-`NULL`) is also called
        -:  410:during a call to `jerry_cleanup ()` to run any custom deinitialization *after* the VM has been fully cleaned up.
        -:  411:If bytes_needed field is 0, no buffer is allocated for the manager, callback functions are called with NULL pointer.
        -:  412:
        -:  413:**Prototype**
        -:  414:
        -:  415:```c
        -:  416:typedef struct
        -:  417:{
        -:  418:  /**
        -:  419:   * Callback responsible for initializing a context item, or NULL to zero out the memory. This is called lazily, the
        -:  420:   * first time jerry_get_context_data () is called with this manager.
        -:  421:   *
        -:  422:   * @param [in] data The buffer that JerryScript allocated for the manager. The buffer is zeroed out. The size is
        -:  423:   * determined by the bytes_needed field. The buffer is kept alive until jerry_cleanup () is called.
        -:  424:   */
        -:  425:  void (*init_cb) (void *data);
        -:  426:
        -:  427:  /**
        -:  428:   * Callback responsible for deinitializing a context item, or NULL. This is called as part of jerry_cleanup (),
        -:  429:   * right *before* the VM has been cleaned up. This is a good place to release strong references to jerry_value_t's
        -:  430:   * that the manager may be holding.
        -:  431:   * Note: because the VM has not been fully cleaned up yet, jerry_object_native_info_t free_cb's can still get called
        -:  432:   * *after* all deinit_cb's have been run. See finalize_cb for a callback that is guaranteed to run *after* all
        -:  433:   * free_cb's have been run.
        -:  434:   *
        -:  435:   * @param [in] data The buffer that JerryScript allocated for the manager.
        -:  436:   */
        -:  437:  void (*deinit_cb) (void *data);
        -:  438:
        -:  439:  /**
        -:  440:   * Callback responsible for finalizing a context item, or NULL. This is called as part of jerry_cleanup (),
        -:  441:   * right *after* the VM has been cleaned up and destroyed and jerry_... APIs cannot be called any more. At this point,
        -:  442:   * all values in the VM have been cleaned up. This is a good place to clean up native state that can only be cleaned
        -:  443:   * up at the very end when there are no more VM values around that may need to access that state.
        -:  444:   *
        -:  445:   * @param [in] data The buffer that JerryScript allocated for the manager. After returning from this callback,
        -:  446:   * the data pointer may no longer be used.
        -:  447:   */
        -:  448:  void (*finalize_cb) (void *data);
        -:  449:
        -:  450:  /**
        -:  451:   * Number of bytes to allocate for this manager. This is the size of the buffer that JerryScript will allocate on
        -:  452:   * behalf of the manager. The pointer to this buffer is passed into init_cb, deinit_cb and finalize_cb. It is also
        -:  453:   * returned from the jerry_get_context_data () API.
        -:  454:   */
        -:  455:  size_t bytes_needed;
        -:  456:} jerry_context_data_manager_t;
        -:  457:```
        -:  458:
        -:  459:*New in version 2.0*.
        -:  460:
        -:  461:## jerry_context_alloc_t
        -:  462:
        -:  463:**Summary**
        -:  464:
        -:  465:Function type for allocating buffer for JerryScript context.
        -:  466:
        -:  467:**Prototype**
        -:  468:
        -:  469:```c
        -:  470:typedef void *(*jerry_context_alloc_t) (size_t size, void *cb_data_p);
        -:  471:```
        -:  472:
        -:  473:- `size` - allocation size
        -:  474:- `cb_data_p` - pointer to user data
        -:  475:
        -:  476:*New in version 2.0*.
        -:  477:
        -:  478:## jerry_context_t
        -:  479:
        -:  480:**Summary**
        -:  481:
        -:  482:An opaque declaration of the JerryScript context structure.
        -:  483:
        -:  484:**Prototype**
        -:  485:
        -:  486:```c
        -:  487:typedef struct jerry_context_t jerry_context_t;
        -:  488:```
        -:  489:
        -:  490:*New in version 2.0*.
        -:  491:
        -:  492:## jerry_container_operation_t
        -:  493:
        -:  494:Enum that contains the supported container operation types
        -:  495:  - JERRY_CONTAINER_OP_ADD - Set/WeakSet add operation
        -:  496:  - JERRY_CONTAINER_OP_GET - Map/WeakMap get operation
        -:  497:  - JERRY_CONTAINER_OP_SET - Map/WeakMap set operation
        -:  498:  - JERRY_CONTAINER_OP_HAS - Set/WeakSet/Map/WeakMap has operation
        -:  499:  - JERRY_CONTAINER_OP_DELETE - Set/WeakSet/Map/WeakMap delete operation
        -:  500:  - JERRY_CONTAINER_OP_SIZE - Set/WeakSet/Map/WeakMap size operation
        -:  501:  - JERRY_CONTAINER_OP_CLEAR - Set/Map clear operation
        -:  502:
        -:  503:*New in version [[NEXT_RELEASE]]*.
        -:  504:
        -:  505:## jerry_binary_operation_t
        -:  506:
        -:  507:Enum that contains the supported binary operation types
        -:  508: - JERRY_BIN_OP_EQUAL - equal comparison (==)
        -:  509: - JERRY_BIN_OP_STRICT_EQUAL - strict equal comparison (===)
        -:  510: - JERRY_BIN_OP_LESS - less relation (<)
        -:  511: - JERRY_BIN_OP_LESS_EQUAL - less or equal relation (<=)
        -:  512: - JERRY_BIN_OP_GREATER - greater relation (>)
        -:  513: - JERRY_BIN_OP_GREATER_EQUAL - greater or equal relation (>=)
        -:  514: - JERRY_BIN_OP_INSTANCEOF - instanceof operation
        -:  515: - JERRY_BIN_OP_ADD - addition operator (+)
        -:  516: - JERRY_BIN_OP_SUB - subtraction operator (-)
        -:  517: - JERRY_BIN_OP_MUL - multiplication operator (*)
        -:  518: - JERRY_BIN_OP_DIV - division operator (/)
        -:  519: - JERRY_BIN_OP_REM - remainder operator (%)
        -:  520:
        -:  521:*New in version 2.0*.
        -:  522:
        -:  523:**See also**
        -:  524:
        -:  525:- [jerry_binary_operation](#jerry_binary_operation)
        -:  526:
        -:  527:## jerry_property_descriptor_flags_t
        -:  528:
        -:  529:Enum that contains the flags of property descriptors.
        -:  530:
        -:  531: - JERRY_PROP_NO_OPTS - empty property descriptor
        -:  532: - JERRY_PROP_IS_CONFIGURABLE - [[Configurable]]
        -:  533: - JERRY_PROP_IS_ENUMERABLE - [[Enumerable]]
        -:  534: - JERRY_PROP_IS_WRITABLE - [[Writable]]
        -:  535: - JERRY_PROP_IS_CONFIGURABLE_DEFINED - Is [[Configurable]] defined?
        -:  536: - JERRY_PROP_IS_ENUMERABLE_DEFINED - Is [[Enumerable]] defined?
        -:  537: - JERRY_PROP_IS_WRITABLE_DEFINED - Is [[Writable]] defined?
        -:  538: - JERRY_PROP_IS_VALUE_DEFINED - Is [[Value]] defined?
        -:  539: - JERRY_PROP_IS_GET_DEFINED - Is [[Get]] defined?
        -:  540: - JERRY_PROP_IS_SET_DEFINED - Is [[Set]] defined?
        -:  541: - JERRY_PROP_SHOULD_THROW - Should throw on error, instead of returning with false
        -:  542:
        -:  543:*New in version [[NEXT_RELEASE]]*.
        -:  544:
        -:  545:**See also**
        -:  546:
        -:  547:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -:  548:
        -:  549:## jerry_parse_options_t
        -:  550:
        -:  551:**Summary**
        -:  552:
        -:  553:Various configuration options for parsing functions such as [jerry_parse](#jerry_parse).
        -:  554:
        -:  555:**Prototype**
        -:  556:
        -:  557:```c
        -:  558:typedef struct
        -:  559:{
        -:  560:  uint32_t options; /**< combination of jerry_parse_option_enable_feature_t values */
        -:  561:  jerry_value_t argument_list; /**< function argument list if JERRY_PARSE_HAS_ARGUMENT_LIST is set in options
        -:  562:                                *   Note: must be string value */
        -:  563:  jerry_value_t resource_name; /**< resource name string (usually a file name)
        -:  564:                                *   if JERRY_PARSE_HAS_RESOURCE is set in options
        -:  565:                                *   Note: must be string value */
        -:  566:  uint32_t start_line; /**< start line of the source code if JERRY_PARSE_HAS_START is set in options */
        -:  567:  uint32_t start_column; /**< start column of the source code if JERRY_PARSE_HAS_START is set in options */
        -:  568:  jerry_value_t user_value; /**< user value assigned to all functions created by this script including eval
        -:  569:                             *   calls executed by the script if JERRY_PARSE_HAS_USER_VALUE is set in options */
        -:  570:} jerry_parse_options_t;
        -:  571:```
        -:  572:
        -:  573:*New in version [[NEXT_RELEASE]]*.
        -:  574:
        -:  575:**See also**
        -:  576:
        -:  577:- [jerry_parse](#jerry_parse)
        -:  578:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:  579:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  580:- [jerry_parse_option_enable_feature_t](#jerry_parse_option_enable_feature_t)
        -:  581:
        -:  582:## jerry_property_descriptor_t
        -:  583:
        -:  584:**Summary**
        -:  585:
        -:  586:Description of ECMA property descriptor. This struct can be used
        -:  587:for the [jerry_define_own_property](#jerry_define_own_property) method to
        -:  588:configure how the property should be registered.
        -:  589:
        -:  590:The naming scheme is similar to the JavaScript `Object.defineProperty` method.
        -:  591:
        -:  592:Fields should be used in pairs. That is if the `is_value_defined` is set to `true`
        -:  593:the `value` field should contain the value for the property.
        -:  594:
        -:  595:**Prototype**
        -:  596:
        -:  597:```c
        -:  598:typedef struct
        -:  599:{
        -:  600:  uint16_t flags; /**< any combination of jerry_property_descriptor_flags_t bits */
        -:  601:  jerry_value_t value; /**< [[Value]] */
        -:  602:  jerry_value_t getter; /**< [[Get]] */
        -:  603:  jerry_value_t setter; /**< [[Set]] */
        -:  604:} jerry_property_descriptor_t;
        -:  605:```
        -:  606:
        -:  607:*Changed in version [[NEXT_RELEASE]]*: The `is_value_defined`, `is_get_defined`, `is_set_defined`,
        -:  608:                                       `is_writable_defined`, `is_writable`, `is_enumerable_defined`,
        -:  609:                                       `is_enumerable`, `is_configurable_defined`, and `is_configurable`
        -:  610:                                       fields are replaced by the `flags` field.
        -:  611:
        -:  612:**See also**
        -:  613:
        -:  614:- [jerry_property_descriptor_flags_t](#jerry_property_descriptor_flags_t)
        -:  615:- [jerry_define_own_property](#jerry_define_own_property)
        -:  616:
        -:  617:## jerry_backtrace_location_t
        -:  618:
        -:  619:**Summary**
        -:  620:
        -:  621:Source code location data retreived by
        -:  622:[jerry_backtrace_get_location](#jerry_backtrace_get_location).
        -:  623:
        -:  624:**Prototype**
        -:  625:
        -:  626:```c
        -:  627:typedef struct
        -:  628:{
        -:  629:  jerry_value_t resource_name; /**< resource name */
        -:  630:  jerry_size_t line; /**< line index */
        -:  631:  jerry_size_t column; /**< column index */
        -:  632:} jerry_backtrace_location_t;
        -:  633:```
        -:  634:
        -:  635:*New in version [[NEXT_RELEASE]]*.
        -:  636:
        -:  637:## jerry_backtrace_frame_t
        -:  638:
        -:  639:**Summary**
        -:  640:
        -:  641:Backtrace frame data passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t)
        -:  642:handler. This is an internal data structure which fields can be accessed by helper functions
        -:  643:such as [jerry_backtrace_get_location](#jerry_backtrace_get_location).
        -:  644:
        -:  645:**Prototype**
        -:  646:
        -:  647:```c
        -:  648:/**
        -:  649: * Internal data structure for jerry_backtrace_frame_t definition.
        -:  650: */
        -:  651:struct jerry_backtrace_frame_internal_t;
        -:  652:
        -:  653:/**
        -:  654: * Backtrace frame data passed to the jerry_backtrace_callback_t handler.
        -:  655: */
        -:  656:typedef struct jerry_backtrace_frame_internal_t jerry_backtrace_frame_t;
        -:  657:```
        -:  658:
        -:  659:*New in version [[NEXT_RELEASE]]*.
        -:  660:
        -:  661:## jerry_heap_stats_t
        -:  662:
        -:  663:**Summary**
        -:  664:
        -:  665:Description of JerryScript heap memory stats.
        -:  666:It is for memory profiling.
        -:  667:
        -:  668:**Prototype**
        -:  669:
        -:  670:```c
        -:  671:typedef struct
        -:  672:{
        -:  673:  size_t version /**< the version of the stats struct */
        -:  674:  size_t size; /**< heap total size */
        -:  675:  size_t allocated_bytes; /**< currently allocated bytes */
        -:  676:  size_t peak_allocated_bytes; /**< peak allocated bytes */
        -:  677:  size_t reserved[4]; /**< padding for future extensions */
        -:  678:} jerry_heap_stats_t;
        -:  679:```
        -:  680:
        -:  681:*New in version 2.0*.
        -:  682:
        -:  683:**See also**
        -:  684:
        -:  685:- [jerry_get_memory_stats](#jerry_get_memory_stats)
        -:  686:
        -:  687:## jerry_call_info_t
        -:  688:
        -:  689:**Summary**
        -:  690:
        -:  691:Call related information passed to [jerry_external_handler_t](#jerry_external_handler_t).
        -:  692:
        -:  693:**Prototype**
        -:  694:
        -:  695:```c
        -:  696:typedef struct jerry_call_info_t
        -:  697:{
        -:  698:  jerry_value_t function; /**< invoked function object */
        -:  699:  jerry_value_t this_value; /**< this value passed to the function  */
        -:  700:  jerry_value_t new_target; /**< current new target value, undefined for non-constructor calls */
        -:  701:} jerry_call_info_t;
        -:  702:```
        -:  703:
        -:  704:*New in version [[NEXT_RELEASE]]*. Contents of this struct replaces the `jerry_get_new_target` function.
        -:  705:
        -:  706:**See also**
        -:  707:
        -:  708:- [jerry_external_handler_t](#jerry_external_handler_t)
        -:  709:
        -:  710:## jerry_external_handler_t
        -:  711:
        -:  712:**Summary**
        -:  713:
        -:  714:Type of an external function handler
        -:  715:
        -:  716:**Prototype**
        -:  717:
        -:  718:```c
        -:  719:typedef jerry_value_t (*jerry_external_handler_t) (const jerry_call_info_t *call_info_p,
        -:  720:                                                   const jerry_value_t args_p[],
        -:  721:                                                   const jerry_length_t args_count);
        -:  722:```
        -:  723:
        -:  724:- `call_info_p` - pointer to a [jerry_call_info_t](#jerry_call_info_t)
        -:  725:                  structure which holds call related information.
        -:  726:- `args_p` - the function arguments, array of JavaScript values.
        -:  727:- `args_count` - the number of arguments.
        -:  728:- return value
        -:  729:  - The function's return value. If there is no return value, use [jerry_create_undefined()](#jerry_create_undefined).
        -:  730:
        -:  731:**See also**
        -:  732:
        -:  733:- [jerry_create_external_function](#jerry_create_external_function)
        -:  734:
        -:  735:## jerry_value_free_callback_t
        -:  736:
        -:  737:**Summary**
        -:  738:
        -:  739:Native free callback of generic value types.
        -:  740:
        -:  741:*Note*:
        -:  742: - Referred values by this method must have at least 1 reference. (Correct API usage satisfies this condition)
        -:  743:
        -:  744:**Prototype**
        -:  745:
        -:  746:```c
        -:  747:typedef void (*jerry_value_free_callback_t) (void *native_p);
        -:  748:```
        -:  749:
        -:  750:*New in version [[NEXT_RELEASE]]*.
        -:  751:
        -:  752:**See also**
        -:  753:
        -:  754:- [jerry_create_external_string](#jerry_create_external_string)
        -:  755:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -:  756:- [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external)
        -:  757:
        -:  758:## jerry_object_native_free_callback_t
        -:  759:
        -:  760:**Summary**
        -:  761:
        -:  762:Native free callback of an object. The callback receives both the memory pointer and the type
        -:  763:information passed to [jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -:  764:
        -:  765:*Note*:
        -:  766: - Referred values by this method must have at least 1 reference. (Correct API usage satisfies this condition)
        -:  767:
        -:  768:**Prototype**
        -:  769:
        -:  770:```c
        -:  771:typedef void (*jerry_object_native_free_callback_t) (void *native_p, struct jerry_object_native_info_t *info_p);
        -:  772:```
        -:  773:
        -:  774:- `native_p` - native pointer passed to [jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -:  775:- `info_p` - native type info passed to [jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -:  776:
        -:  777:*New in version 2.0*: Renamed from `jerry_object_free_callback_t`.
        -:  778:
        -:  779:*Changed in version 2.2*: API calls are once again allowed. (See note)
        -:  780:
        -:  781:*Changed in version [[NEXT_RELEASE]]*: `info_p` argument is added
        -:  782:
        -:  783:**See also**
        -:  784:
        -:  785:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:  786:
        -:  787:## jerry_external_string_free_callback_t
        -:  788:
        -:  789:**Summary**
        -:  790:
        -:  791:Free callback for external strings. See
        -:  792:[jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -:  793:for more information.
        -:  794:
        -:  795:**Prototype**
        -:  796:
        -:  797:```c
        -:  798:typedef void (*jerry_external_string_free_callback_t) (jerry_char_t *string_p,
        -:  799:                                                       jerry_size_t string_size,
        -:  800:                                                       void *user_p);
        -:  801:```
        -:  802:
        -:  803:- `string_p` - extrenal string pointer
        -:  804:- `string_size` - size of external string
        -:  805:- `user_p` - pointer passed when the external string is created
        -:  806:
        -:  807:*New in version [[NEXT_RELEASE]]*.
        -:  808:
        -:  809:**See also**
        -:  810:
        -:  811:- [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -:  812:- [jerry_create_external_string](#jerry_create_external_string)
        -:  813:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -:  814:
        -:  815:## jerry_error_object_created_callback_t
        -:  816:
        -:  817:**Summary**
        -:  818:
        -:  819:Decorator callback for Error objects. This native callback is called every time when an Error
        -:  820:object is created and the decorator can create or update any properties of the newly created
        -:  821:Error object.
        -:  822:
        -:  823:*Note*:
        -:  824: - The callback function cannot be called recursively, so the Error objects created
        -:  825:   when the callback is running are not updated.
        -:  826:
        -:  827:**Prototype**
        -:  828:
        -:  829:```c
        -:  830:typedef void (*jerry_error_object_created_callback_t) (const jerry_value_t error_object, void *user_p);
        -:  831:```
        -:  832:
        -:  833:- `error_object` - the newly created Error object.
        -:  834:- `user_p` - pointer passed to [jerry_set_error_object_created_callback](#jerry_set_error_object_created_callback).
        -:  835:
        -:  836:*New in version 2.4*.
        -:  837:
        -:  838:**See also**
        -:  839:
        -:  840:- [jerry_set_error_object_created_callback](#jerry_set_error_object_created_callback)
        -:  841:
        -:  842:## jerry_module_state_t
        -:  843:
        -:  844:An enum representing the current status of a module
        -:  845:
        -:  846: - JERRY_MODULE_STATE_INVALID - Return value for jerry_module_get_state when its argument is not a module
        -:  847: - JERRY_MODULE_STATE_UNLINKED - Module is currently unlinked
        -:  848: - JERRY_MODULE_STATE_LINKING - Module is currently being linked
        -:  849: - JERRY_MODULE_STATE_LINKED - Module has been linked (its depencencies has been resolved)
        -:  850: - JERRY_MODULE_STATE_EVALUATING - Module is currently being evaluated
        -:  851: - JERRY_MODULE_STATE_EVALUATED - Module has been evaluated (its source code has been executed)
        -:  852: - JERRY_MODULE_STATE_ERROR - An error has been encountered before the evaluated state is reached
        -:  853:
        -:  854:*New in version [[NEXT_RELEASE]]*.
        -:  855:
        -:  856:## jerry_module_resolve_callback_t
        -:  857:
        -:  858:**Summary**
        -:  859:
        -:  860:Callback which is called by [jerry_module_link](#jerry_module_link) to get the referenced module.
        -:  861:
        -:  862:*Note*:
        -:  863: - If realms are enabled, the returned module should be created in the current realm
        -:  864:   (see: [jerry_get_global_object](#jerry_get_global_object))
        -:  865:
        -:  866:**Prototype**
        -:  867:
        -:  868:```c
        -:  869:typedef jerry_value_t (*jerry_module_resolve_callback_t) (const jerry_value_t specifier,
        -:  870:                                                          const jerry_value_t referrer,
        -:  871:                                                          void *user_p);
        -:  872:```
        -:  873:
        -:  874:- `specifier` - a module specifier string (usually used as a path to the module)
        -:  875:- `referrer` - a module object which contains the `specifier` in its source code
        -:  876:- `user_p` - pointer passed to [jerry_module_link](#jerry_module_link).
        -:  877:- return value
        -:  878:  - a module object - if it can be resolved successfully
        -:  879:  - an error - otherwise
        -:  880:
        -:  881:*New in version [[NEXT_RELEASE]]*.
        -:  882:
        -:  883:**See also**
        -:  884:- [jerry_module_link](#jerry_module_link)
        -:  885:- [jerry_get_global_object](#jerry_get_global_object)
        -:  886:
        -:  887:## jerry_module_import_callback_t
        -:  888:
        -:  889:**Summary**
        -:  890:
        -:  891:Callback which is called when an import is resolved dynamically to get the referenced module.
        -:  892:
        -:  893:*Note*:
        -:  894: - If the function returns with a promise, the import call returns with this promise. The
        -:  895:   application should try to resolve the requested module later. If the module is evaluated
        -:  896:   successfully, the returned promise should be resolved with the namespace object of the
        -:  897:   module. Otherwise, the returned promise should be rejected with an error.
        -:  898: - If the function returns with a resolved module, a promise is created and resolved with the
        -:  899:   namespace object of the module. The import call returns with the resolved promise.
        -:  900: - If the function returns with an error, a promise is created and rejected with the
        -:  901:   return error. The import call returns with the rejected promise.
        -:  902: - All other return values are considered invalid. In this case the import call returns
        -:  903:   with a rejected promise. The rejected promise has a fixed error message, it does not
        -:  904:   specify the reason of the fail.
        -:  905: - If realms are enabled, the returned module should be created in the current realm
        -:  906:   (see: [jerry_get_global_object](#jerry_get_global_object))
        -:  907:
        -:  908:**Prototype**
        -:  909:
        -:  910:```c
        -:  911:typedef jerry_value_t (*jerry_module_import_callback_t) (const jerry_value_t specifier,
        -:  912:                                                         const jerry_value_t user_value,
        -:  913:                                                         void *user_p);
        -:  914:```
        -:  915:
        -:  916:- `specifier` - a module specifier string (usually used as a path to the module)
        -:  917:- `user_value` - the user value assigned to the script (see [jerry_parse_options_t](#jerry_parse_options_t))
        -:  918:- `user_p` - pointer passed to [jerry_module_set_import_callback](#jerry_module_set_import_callback).
        -:  919:- return value
        -:  920:  - promise or resolved module - if the operation is successful
        -:  921:  - an error - otherwise
        -:  922:
        -:  923:*New in version [[NEXT_RELEASE]]*.
        -:  924:
        -:  925:**See also**
        -:  926:- [jerry_module_set_import_callback](#jerry_module_set_import_callback)
        -:  927:- [jerry_get_global_object](#jerry_get_global_object)
        -:  928:
        -:  929:## jerry_module_state_changed_callback_t
        -:  930:
        -:  931:**Summary**
        -:  932:
        -:  933:Callback which is called after the module enters into linked, evaluated or error state.
        -:  934:
        -:  935:**Prototype**
        -:  936:
        -:  937:```c
        -:  938:typedef void (*jerry_module_state_changed_callback_t) (jerry_module_state_t new_state,
        -:  939:                                                       const jerry_value_t module,
        -:  940:                                                       const jerry_value_t value,
        -:  941:                                                       void *user_p);
        -:  942:```
        -:  943:
        -:  944:- `new_state` - new state of the module.
        -:  945:- `module` - a module whose state is changed
        -:  946:- `value` - depends on the state: undefined for linked, module script result for evaluated,
        -:  947:            and error value for error state.
        -:  948:- `user_p` - pointer passed to [jerry_module_set_state_changed_callback](#jerry_module_set_state_changed_callback).
        -:  949:
        -:  950:*New in version [[NEXT_RELEASE]]*.
        -:  951:
        -:  952:**See also**
        -:  953:- [jerry_module_set_state_changed_callback](#jerry_module_set_state_changed_callback)
        -:  954:
        -:  955:## jerry_module_import_meta_callback_t
        -:  956:
        -:  957:**Summary**
        -:  958:
        -:  959:Callback which is called when an import.meta expression of a module is evaluated the first time.
        -:  960:The object returned by import.meta is passed as the `meta_object` argument to the callback, and
        -:  961:the callback can set the initial status of the object (e.g. add properties or set prototype).
        -:  962:
        -:  963:**Prototype**
        -:  964:
        -:  965:```c
        -:  966:typedef void (*jerry_module_import_meta_callback_t) (const jerry_value_t module,
        -:  967:                                                     const jerry_value_t meta_object,
        -:  968:                                                     void *user_p);
        -:  969:```
        -:  970:
        -:  971:- `module` - module whose import.meta object is requested.
        -:  972:- `meta_object` - import.meta object created for the module.
        -:  973:- `user_p` - pointer passed to [jerry_module_set_import_meta_callback](#jerry_module_set_import_meta_callback).
        -:  974:
        -:  975:*New in version [[NEXT_RELEASE]]*.
        -:  976:
        -:  977:**See also**
        -:  978:- [jerry_module_set_import_meta_callback](#jerry_module_set_import_meta_callback)
        -:  979:
        -:  980:## jerry_native_module_evaluate_callback_t
        -:  981:
        -:  982:**Summary**
        -:  983:
        -:  984:Callback which is called by [jerry_module_evaluate](#jerry_module_evaluate) to evaluate the native module.
        -:  985:
        -:  986:Note:
        -:  987: - Native pointers can be used to assign private data to a native module,
        -:  988:   see [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:  989:
        -:  990:**Prototype**
        -:  991:
        -:  992:```c
        -:  993:typedef jerry_value_t (*jerry_native_module_evaluate_callback_t) (const jerry_value_t native_module);
        -:  994:```
        -:  995:
        -:  996:- `native_module` - a native module
        -:  997:- return value
        -:  998:  - any non-error value - if the module is evaluated successfully
        -:  999:  - an error - otherwise
        -: 1000:
        -: 1001:*New in version [[NEXT_RELEASE]]*.
        -: 1002:
        -: 1003:**See also**
        -: 1004:- [jerry_module_evaluate](#jerry_module_evaluate)
        -: 1005:
        -: 1006:## jerry_backtrace_callback_t
        -: 1007:
        -: 1008:**Summary**
        -: 1009:
        -: 1010:Callback function which is called by [jerry_backtrace_capture](#jerry_backtrace_capture)
        -: 1011:for each stack frame.
        -: 1012:
        -: 1013:**Prototype**
        -: 1014:
        -: 1015:```c
        -: 1016:typedef bool (*jerry_backtrace_callback_t) (jerry_backtrace_frame_t *frame_p, void *user_p);
        -: 1017:```
        -: 1018:
        -: 1019:- `frame_p` - pointer to [jerry_backtrace_frame_t](#jerry_backtrace_frame_t) data.
        -: 1020:- `user_p` - pointer passed to [jerry_backtrace_capture](#jerry_backtrace_capture).
        -: 1021:- return value
        -: 1022:  - true, to continue capturing more frames
        -: 1023:  - false, to end the stack capturing
        -: 1024:
        -: 1025:*New in version [[NEXT_RELEASE]]*.
        -: 1026:
        -: 1027:**See also**
        -: 1028:
        -: 1029:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -: 1030:- [jerry_backtrace_frame_t](#jerry_backtrace_frame_t)
        -: 1031:
        -: 1032:## jerry_object_native_info_t
        -: 1033:
        -: 1034:**Summary**
        -: 1035:
        -: 1036:Type information for native pointers. Since each native pointer has a type information,
        -: 1037:multiple native pointers can be assigned to an object, and these can be updated or
        -: 1038:deleted independently.
        -: 1039:
        -: 1040:The type information has a free callback, which is called when the object is freed
        -: 1041:by the garbage collector. If the callback is NULL, the application is not notified
        -: 1042:about the destruction of the object.
        -: 1043:
        -: 1044:The buffer pointed by the native pointer can have a fixed number of jerry values,
        -: 1045:which refer to other values as long as the object is alive. The starting byte
        -: 1046:offset and the number of these values are specified by `offset_of_references` and
        -: 1047:`number_of_references` fields respectively. Before a buffer is attached to an
        -: 1048:object by [jerry_set_object_native_pointer](#jerry_set_object_native_pointer),
        -: 1049:the values must be initialized to undefined by
        -: 1050:[jerry_native_pointer_init_references](#jerry_native_pointer_init_references).
        -: 1051:When a buffer is no longer attached to any object, the
        -: 1052:[jerry_native_pointer_release_references](#jerry_native_pointer_release_references)
        -: 1053:must be called to release the values. A single buffer can be attached to any
        -: 1054:number of living objects. When a buffer is currently attached to at least
        -: 1055:one object, the references can be updated by
        -: 1056:[jerry_native_pointer_set_reference](#jerry_native_pointer_set_reference).
        -: 1057:However, if the buffer is no longer attached to an object, the finalize function
        -: 1058:must be called even if the buffer is reattached to another object later. In this
        -: 1059:case, calling the init function after the finalization is optional, because the
        -: 1060:finalize function also initializes all values to undefined.
        -: 1061:
        -: 1062:**Prototype**
        -: 1063:
        -: 1064:```c
        -: 1065:typedef struct
        -: 1066:{
        -: 1067:  jerry_object_native_free_callback_t free_cb; /**< the free callback of the native pointer */
        -: 1068:  uint16_t number_of_references; /**< the number of value references which are marked by the garbage collector */
        -: 1069:  uint16_t offset_of_references; /**< byte offset indicating the start offset of value
        -: 1070:                                  *   references in the user allocated buffer */
        -: 1071:} jerry_object_native_info_t;
        -: 1072:```
        -: 1073:
        -: 1074:*New in version 2.0*.
        -: 1075:
        -: 1076:*Changed in version [[NEXT_RELEASE]]*: Added `number_of_references`, and `offset_of_references` fields.
        -: 1077:
        -: 1078:**See also**
        -: 1079:
        -: 1080:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -: 1081:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -: 1082:- [jerry_delete_object_native_pointer](#jerry_delete_object_native_pointer)
        -: 1083:- [jerry_native_pointer_init_references](#jerry_native_pointer_init_references)
        -: 1084:- [jerry_native_pointer_release_references](#jerry_native_pointer_release_references)
        -: 1085:- [jerry_native_pointer_set_reference](#jerry_native_pointer_set_reference)
        -: 1086:
        -: 1087:## jerry_object_property_foreach_t
        -: 1088:
        -: 1089:**Summary**
        -: 1090:
        -: 1091:Function type used as a callback for the [jerry_foreach_object_property](#jerry_foreach_object_property)
        -: 1092:method. A function with this type must return "true" to continue the iteration or "false" to finish the
        -: 1093:iteration on the object's properties.
        -: 1094:
        -: 1095:**Prototype**
        -: 1096:
        -: 1097:```c
        -: 1098:typedef bool (*jerry_object_property_foreach_t) (const jerry_value_t property_name,
        -: 1099:                                                 const jerry_value_t property_value,
        -: 1100:                                                 void *user_data_p);
        -: 1101:```
        -: 1102:
        -: 1103:- `property_name` - a property name, this is not always a string.
        -: 1104:- `property_value` - the value for the given property.
        -: 1105:- `user_data_p` - optional user data pointer supplied via the (jerry_foreach_object_property)[#jerry_foreach_object_property] method.
        -: 1106:- return value
        -: 1107:  - true, to continue the iteration
        -: 1108:  - false, to stop the iteration
        -: 1109:
        -: 1110:**See also**
        -: 1111:
        -: 1112:- [jerry_foreach_object_property](#jerry_foreach_object_property)
        -: 1113:
        -: 1114:## jerry_objects_foreach_t
        -: 1115:
        -: 1116:**Summary**
        -: 1117:
        -: 1118:Function type used as a callback for the (jerry_objects_foreach)[#jerry_objects_foreach] method.
        -: 1119:A function with this type must return "true" to continue the iteration or "false" to finish the
        -: 1120:iteration on the object's properties.
        -: 1121:
        -: 1122:**Prototype**
        -: 1123:
        -: 1124:```c
        -: 1125:typedef bool (*jerry_objects_foreach_t) (const jerry_value_t object,
        -: 1126:                                         void *user_data_p);
        -: 1127:```
        -: 1128:
        -: 1129:- `object` - the current JavaScript object in the for-each iteration.
        -: 1130:- `user_data_p` - optional user data pointer supplied via the (jerry_objects_foreach)[#jerry_objects_foreach] method.
        -: 1131:- return value
        -: 1132:  - true, to continue the iteration
        -: 1133:  - false, to stop the iteration
        -: 1134:
        -: 1135:*New in version 2.0*.
        -: 1136:
        -: 1137:**See also**
        -: 1138:
        -: 1139:- [jerry_objects_foreach](#jerry_objects_foreach)
        -: 1140:
        -: 1141:## jerry_objects_foreach_by_native_info_t
        -: 1142:
        -: 1143:**Summary**
        -: 1144:
        -: 1145:Function type used as a callback for the (jerry_objects_foreach_by_native_info)[#jerry_objects_foreach_by_native_info]
        -: 1146:method. A function with this type must return "true" to continue the iteration or "false" to finish the
        -: 1147:iteration on the object's properties.
        -: 1148:
        -: 1149:**Prototype**
        -: 1150:
        -: 1151:```c
        -: 1152:typedef bool (*jerry_objects_foreach_by_native_info_t) (const jerry_value_t object,
        -: 1153:                                                        void *object_data_p,
        -: 1154:                                                        void *user_data_p);
        -: 1155:```
        -: 1156:
        -: 1157:- `object` - the current JavaScript object in the for-each iteration.
        -: 1158:- `object_data_p` - the current object's native data pointer.
        -: 1159:- `user_data_p` - optional user data pointer supplied via the (jerry_objects_foreach_by_native_info)[#jerry_objects_foreach_by_native_info] method.
        -: 1160:- return value
        -: 1161:  - true, to continue the iteration
        -: 1162:  - false, to stop the iteration
        -: 1163:
        -: 1164:*New in version 2.0*.
        -: 1165:
        -: 1166:**See also**
        -: 1167:
        -: 1168:- [jerry_objects_foreach_by_native_info](#jerry_objects_foreach_by_native_info)
        -: 1169:
        -: 1170:## jerry_vm_exec_stop_callback_t
        -: 1171:
        -: 1172:**Summary**
        -: 1173:
        -: 1174:Callback which tells whether the ECMAScript execution should be stopped.
        -: 1175:If it returns with undefined value the ECMAScript execution continues.
        -: 1176:Otherwise the result is thrown by the engine (if the error flag is not
        -: 1177:set for the returned value the engine automatically sets it). The
        -: 1178:callback function might be called again even if it threw an error.
        -: 1179:In this case the function must throw the same error again.
        -: 1180:
        -: 1181:**Prototype**
        -: 1182:
        -: 1183:```c
        -: 1184:typedef jerry_value_t (*jerry_vm_exec_stop_callback_t) (void *user_p);
        -: 1185:```
        -: 1186:
        -: 1187:*New in version 2.0*.
        -: 1188:
        -: 1189:**See also**
        -: 1190:
        -: 1191:- [jerry_set_vm_exec_stop_callback](#jerry_set_vm_exec_stop_callback)
        -: 1192:
        -: 1193:## jerry_vm_throw_callback_t
        -: 1194:
        -: 1195:**Summary**
        -: 1196:
        -: 1197:Callback which is called when a value is thrown in an ECMAScript code. The callback
        -: 1198:should not change the `error_value`. The callback is not called again until the value
        -: 1199:is caught.
        -: 1200:
        -: 1201:Note:
        -: 1202: - The engine considers errors thrown by external functions as never caught. The
        -: 1203:   application can maintain a status flag to ignore the next call of the callback
        -: 1204:   if necessary.
        -: 1205:   See: [jerry_create_external_function](#jerry_create_external_function)
        -: 1206:
        -: 1207:**Prototype**
        -: 1208:
        -: 1209:```c
        -: 1210:typedef void (*jerry_vm_throw_callback_t) (const jerry_value_t error_value, void *user_p);
        -: 1211:```
        -: 1212:
        -: 1213:*New in [[NEXT_RELEASE]]*.
        -: 1214:
        -: 1215:**See also**
        -: 1216:
        -: 1217:- [jerry_set_vm_throw_callback](#jerry_set_vm_throw_callback)
        -: 1218:
        -: 1219:## jerry_promise_state_t
        -: 1220:
        -: 1221:Enum which describes the state of a Promise.
        -: 1222:
        -: 1223:Possible values:
        -: 1224:
        -: 1225: - JERRY_PROMISE_STATE_NONE - Invalid/Unknown state (possibly called on a non-promise object).
        -: 1226: - JERRY_PROMISE_STATE_PENDING - Promise is in "Pending" state.
        -: 1227: - JERRY_PROMISE_STATE_FULFILLED - Promise is in "Fulfilled" state.
        -: 1228: - JERRY_PROMISE_STATE_REJECTED - Promise is in "Rejected" state.
        -: 1229:
        -: 1230:*New in version 2.2*.
        -: 1231:
        -: 1232:**See also**
        -: 1233:
        -: 1234:- [jerry_get_promise_result](#jerry_get_promise_result)
        -: 1235:
        -: 1236:## jerry_promise_event_type_t
        -: 1237:
        -: 1238:Event types for [jerry_promise_callback_t](#jerry_promise_callback_t) callback function.
        -: 1239:The description of the `object` and `value` arguments are provided for each type.
        -: 1240:
        -: 1241:Possible values:
        -: 1242:
        -: 1243:- JERRY_PROMISE_EVENT_CREATE - A new Promise object is created.
        -: 1244:  - object - the new Promise object
        -: 1245:  - value - parent Promise for `then` chains, undefined otherwise.
        -: 1246:- JERRY_PROMISE_EVENT_RESOLVE - Called when a Promise is about to be resolved.
        -: 1247:  - object - the Promise object
        -: 1248:  - value - value for resolving.
        -: 1249:- JERRY_PROMISE_EVENT_REJECT - Called when a Promise is about to be rejected.
        -: 1250:  - object - the Promise object
        -: 1251:  - value - value for rejecting.
        -: 1252:- JERRY_PROMISE_EVENT_RESOLVE_FULFILLED - Called when a resolve is called on a fulfilled Promise.
        -: 1253:  - object - the Promise object
        -: 1254:  - value - value for resolving
        -: 1255:- JERRY_PROMISE_EVENT_REJECT_FULFILLED - Called when a reject is called on a fulfilled Promise.
        -: 1256:  - object - the Promise object
        -: 1257:  - value - value for rejecting
        -: 1258:- JERRY_PROMISE_EVENT_REJECT_WITHOUT_HANDLER - Called when a Promise is rejected without a handler.
        -: 1259:  - object - the Promise object
        -: 1260:  - value - value for rejecting
        -: 1261:- JERRY_PROMISE_EVENT_CATCH_HANDLER_ADDED - Called when a catch handler is added to a rejected
        -: 1262:                                            Promise which did not have a catch handler before.
        -: 1263:  - object - the Promise object
        -: 1264:  - value - undefined
        -: 1265:- JERRY_PROMISE_EVENT_BEFORE_REACTION_JOB - Called before executing a Promise reaction job.
        -: 1266:  - object - the Promise object
        -: 1267:  - value - undefined
        -: 1268:- JERRY_PROMISE_EVENT_AFTER_REACTION_JOB - Called after a Promise reaction job is completed.
        -: 1269:  - object - the Promise object
        -: 1270:  - value - undefined
        -: 1271:- JERRY_PROMISE_EVENT_ASYNC_AWAIT - Called when an async function awaits the result of a Promise object.
        -: 1272:  - object - internal object representing the execution status
        -: 1273:  - value - the Promise object
        -: 1274:- JERRY_PROMISE_EVENT_ASYNC_BEFORE_RESOLVE - Called when an async function is continued with resolve.
        -: 1275:  - object - internal object representing the execution status
        -: 1276:  - value - value for resolving
        -: 1277:- JERRY_PROMISE_EVENT_ASYNC_BEFORE_REJECT - Called when an async function is continued with reject.
        -: 1278:  - object - internal object representing the execution status
        -: 1279:  - value - value for rejecting
        -: 1280:- JERRY_PROMISE_EVENT_ASYNC_AFTER_RESOLVE - Called when an async function resolve is completed.
        -: 1281:  - object - internal object representing the execution status
        -: 1282:  - value - value for resolving
        -: 1283:- JERRY_PROMISE_EVENT_ASYNC_AFTER_REJECT - Called when an async function reject is completed.
        -: 1284:  - object - internal object representing the execution status
        -: 1285:  - value - value for rejecting
        -: 1286:
        -: 1287:*New in version [[NEXT_RELEASE]]*.
        -: 1288:
        -: 1289:**See also**
        -: 1290:
        -: 1291:- [jerry_promise_callback_t](#jerry_promise_callback_t)
        -: 1292:- [jerry_promise_set_callback](#jerry_promise_set_callback)
        -: 1293:
        -: 1294:
        -: 1295:## jerry_promise_event_filter_t
        -: 1296:
        -: 1297:Filter types for [jerry_promise_set_callback](#jerry_promise_set_callback) callback function.
        -: 1298:The callback is only called for those events which are enabled by the filters. The events are
        -: 1299:described in [jerry_promise_event_type_t](#jerry_promise_event_type_t).
        -: 1300:
        -: 1301:Possible values:
        -: 1302:
        -: 1303:- JERRY_PROMISE_EVENT_FILTER_DISABLE - Disable reporting of all events.
        -: 1304:- JERRY_PROMISE_EVENT_FILTER_CREATE - Enables the following event:
        -: 1305:  - JERRY_PROMISE_EVENT_CREATE
        -: 1306:- JERRY_PROMISE_EVENT_FILTER_RESOLVE - Enables the following event:
        -: 1307:  - JERRY_PROMISE_EVENT_RESOLVE
        -: 1308:- JERRY_PROMISE_EVENT_FILTER_REJECT - Enables the following event:
        -: 1309:  - JERRY_PROMISE_EVENT_REJECT
        -: 1310:- JERRY_PROMISE_EVENT_FILTER_ERROR - Enables the following events:
        -: 1311:  - JERRY_PROMISE_EVENT_RESOLVE_FULFILLED
        -: 1312:  - JERRY_PROMISE_EVENT_REJECT_FULFILLED
        -: 1313:  - JERRY_PROMISE_EVENT_REJECT_WITHOUT_HANDLER
        -: 1314:  - JERRY_PROMISE_EVENT_CATCH_HANDLER_ADDED
        -: 1315:- JERRY_PROMISE_EVENT_FILTER_REACTION_JOB - Enables the following events:
        -: 1316:  - JERRY_PROMISE_EVENT_BEFORE_REACTION_JOB
        -: 1317:  - JERRY_PROMISE_EVENT_AFTER_REACTION_JOB
        -: 1318:- JERRY_PROMISE_EVENT_FILTER_ASYNC_MAIN - Enables the following events:
        -: 1319:  - JERRY_PROMISE_EVENT_ASYNC_AWAIT
        -: 1320:- JERRY_PROMISE_EVENT_FILTER_ASYNC_REACTION_JOB - Enables the following events:
        -: 1321:  - JERRY_PROMISE_EVENT_ASYNC_BEFORE_RESOLVE
        -: 1322:  - JERRY_PROMISE_EVENT_ASYNC_BEFORE_REJECT
        -: 1323:  - JERRY_PROMISE_EVENT_ASYNC_AFTER_RESOLVE
        -: 1324:  - JERRY_PROMISE_EVENT_ASYNC_AFTER_REJECT
        -: 1325:
        -: 1326:*New in version [[NEXT_RELEASE]]*.
        -: 1327:
        -: 1328:**See also**
        -: 1329:
        -: 1330:- [jerry_promise_event_type_t](#jerry_promise_event_type_t)
        -: 1331:- [jerry_promise_set_callback](#jerry_promise_set_callback)
        -: 1332:
        -: 1333:
        -: 1334:## jerry_promise_callback_t
        -: 1335:
        -: 1336:**Summary**
        -: 1337:
        -: 1338:Notification callback for tracking Promise and async function operations. The arguments
        -: 1339:passed to the callback depends on the `event_type` which is detailed in the
        -: 1340:description of [jerry_promise_event_type_t](#jerry_promise_event_type_t).
        -: 1341:
        -: 1342:**Prototype**
        -: 1343:
        -: 1344:```c
        -: 1345:typedef void (*jerry_promise_callback_t) (jerry_promise_event_type_t event_type,
        -: 1346:                                          const jerry_value_t object, const jerry_value_t value,
        -: 1347:                                          void *user_p);
        -: 1348:```
        -: 1349:
        -: 1350:- `event_type` - type of the event notification.
        -: 1351:- `object` - object corresponding to the event.
        -: 1352:- `value` - optional value argument.
        -: 1353:- `user_data_p` - optional user data pointer supplied via the (jerry_promise_set_callback)[#jerry_promise_set_callback] method.
        -: 1354:
        -: 1355:*New in version [[NEXT_RELEASE]]*.
        -: 1356:
        -: 1357:**See also**
        -: 1358:
        -: 1359:- [jerry_promise_event_type_t](#jerry_promise_event_type_t)
        -: 1360:- [jerry_promise_set_callback](#jerry_promise_set_callback)
        -: 1361:
        -: 1362:## jerry_typedarray_type_t
        -: 1363:
        -: 1364:Enum which describes the TypedArray types.
        -: 1365:Possible values:
        -: 1366:
        -: 1367: - JERRY_TYPEDARRAY_UINT8 - represents the Uint8Array TypedArray
        -: 1368: - JERRY_TYPEDARRAY_UINT8CLAMPED - represents the Uint8ClampedArray TypedArray
        -: 1369: - JERRY_TYPEDARRAY_INT8 - represents the Int8Array TypedArray
        -: 1370: - JERRY_TYPEDARRAY_UINT16 - represents the Uint16Array TypedArray
        -: 1371: - JERRY_TYPEDARRAY_INT16 - represents the Int16Array TypedArray
        -: 1372: - JERRY_TYPEDARRAY_UINT32 - represents the Uint32Array TypedArray
        -: 1373: - JERRY_TYPEDARRAY_INT32 - represents the Int32Array TypedArray
        -: 1374: - JERRY_TYPEDARRAY_FLOAT32 - represents the Float32Array TypedArray
        -: 1375: - JERRY_TYPEDARRAY_FLOAT64 - represents the Float64Array TypedArray
        -: 1376: - JERRY_TYPEDARRAY_BIGINT64 - represents the BigInt64Array TypedArray
        -: 1377: - JERRY_TYPEDARRAY_BIGUINT64 - represents the BigUint64Array TypedArray
        -: 1378: - JERRY_TYPEDARRAY_INVALID - represents an invalid TypedArray
        -: 1379:
        -: 1380:API functions can return the `JERRY_TYPEDARRAY_INVALID` value if the
        -: 1381:TypedArray support is not in the engine.
        -: 1382:
        -: 1383:*New in version 2.0*.
        -: 1384:
        -: 1385:*Changed in version 2.4*: Added `JERRY_TYPEDARRAY_BIGINT64`, `JERRY_TYPEDARRAY_BIGUINT64` values.
        -: 1386:
        -: 1387:**See also**
        -: 1388:
        -: 1389:- [jerry_get_typedarray_type](#jerry_get_typedarray_type)
        -: 1390:
        -: 1391:
        -: 1392:## jerry_exec_snapshot_option_values_t
        -: 1393:
        -: 1394:**Summary**
        -: 1395:
        -: 1396:Various configuration options for [jerry_exec_snapshot](#jerry_exec_snapshot)
        -: 1397:
        -: 1398:**Prototype**
        -: 1399:
        -: 1400:```c
        -: 1401:typedef struct
        -: 1402:{
        -: 1403:  jerry_value_t resource_name; /**< resource name string (usually a file name)
        -: 1404:                                *   if JERRY_SNAPSHOT_EXEC_HAS_RESOURCE is set in exec_snapshot_opts
        -: 1405:                                *   Note: non-string values are ignored */
        -: 1406:  jerry_value_t user_value; /**< user value assigned to all functions created by this script including
        -: 1407:                             *   eval calls executed by the script if JERRY_SNAPSHOT_EXEC_HAS_USER_VALUE
        -: 1408:                             *   is set in exec_snapshot_opts */
        -: 1409:} jerry_exec_snapshot_option_values_t;
        -: 1410:```
        -: 1411:
        -: 1412:*New in version [[NEXT_RELEASE]]*.
        -: 1413:
        -: 1414:**See also**
        -: 1415:
        -: 1416:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -: 1417:
        -: 1418:## jerry_source_info_enabled_fields_t
        -: 1419:
        -: 1420:Enum which describes the enabled fields of [jerry_source_info_t](#jerry_source_info_t).
        -: 1421:Possible values:
        -: 1422:
        -: 1423: - JERRY_SOURCE_INFO_HAS_SOURCE_CODE - source_code field is valid
        -: 1424: - JERRY_SOURCE_INFO_HAS_FUNCTION_ARGUMENTS - function_arguments field is valid
        -: 1425: - JERRY_SOURCE_INFO_HAS_SOURCE_RANGE - both source_range_start and source_range_length fields are valid
        -: 1426:
        -: 1427:*New in version [[NEXT_RELEASE]]*.
        -: 1428:
        -: 1429:**See also**
        -: 1430:
        -: 1431:- [jerry_source_info_t](#jerry_source_info_t)
        -: 1432:- [jerry_get_source_info](#jerry_get_source_info)
        -: 1433:
        -: 1434:## jerry_source_info_t
        -: 1435:
        -: 1436:**Summary**
        -: 1437:
        -: 1438:Source related information of a script/module/function.
        -: 1439:
        -: 1440:**Prototype**
        -: 1441:
        -: 1442:```c
        -: 1443:typedef struct
        -: 1444:{
        -: 1445:  uint32_t enabled_fields; /**< combination of jerry_source_info_enabled_fields_t values */
        -: 1446:  jerry_value_t source_code; /**< script source code or function body */
        -: 1447:  jerry_value_t function_arguments; /**< function arguments */
        -: 1448:  uint32_t source_range_start; /**< start position of the function in the source code */
        -: 1449:  uint32_t source_range_length; /**< source length of the function in the source code */
        -: 1450:} jerry_source_info_t;
        -: 1451:```
        -: 1452:
        -: 1453:*New in version [[NEXT_RELEASE]]*.
        -: 1454:
        -: 1455:**See also**
        -: 1456:
        -: 1457:- [jerry_source_info_enabled_fields_t](#jerry_source_info_enabled_fields_t)
        -: 1458:- [jerry_get_source_info](#jerry_get_source_info)
        -: 1459:
        -: 1460:
        -: 1461:# General engine functions
        -: 1462:
        -: 1463:## jerry_init
        -: 1464:
        -: 1465:**Summary**
        -: 1466:
        -: 1467:Initializes the JerryScript engine, making it possible to run JavaScript code and perform operations
        -: 1468:on JavaScript values. This is required for almost all API functions.
        -: 1469:
        -: 1470:**Prototype**
        -: 1471:
        -: 1472:```c
        -: 1473:void
        -: 1474:jerry_init (jerry_init_flag_t flags)
        -: 1475:```
        -: 1476:
        -: 1477:`flags` - combination of various engine configuration flags [jerry_init_flag_t](#jerry_init_flag_t).
        -: 1478:
        -: 1479:**Example**
        -: 1480:
        -: 1481:[doctest]: # ()
        -: 1482:
        -: 1483:```c
        -: 1484:#include "jerryscript.h"
        -: 1485:
        -: 1486:int
    #####: 1487:main (void)
        -: 1488:{
    #####: 1489:  jerry_init (JERRY_INIT_SHOW_OPCODES | JERRY_INIT_SHOW_REGEXP_OPCODES);
        -: 1490:
        -: 1491:  // ...
        -: 1492:
    #####: 1493:  jerry_cleanup ();
        -: 1494:  return 0;
        -: 1495:}
        -: 1496:```
        -: 1497:
        -: 1498:**See also**
        -: 1499:
        -: 1500:- [jerry_init_flag_t](#jerry_init_flag_t)
        -: 1501:- [jerry_cleanup](#jerry_cleanup)
        -: 1502:
        -: 1503:
        -: 1504:## jerry_cleanup
        -: 1505:
        -: 1506:**Summary**
        -: 1507:
        -: 1508:Finish JavaScript engine execution, freeing memory and JavaScript values.
        -: 1509:
        -: 1510:*Note*: JavaScript values, received from engine, will be inaccessible after the cleanup.
        -: 1511:
        -: 1512:**Prototype**
        -: 1513:
        -: 1514:```c
        -: 1515:void
        -: 1516:jerry_cleanup (void);
        -: 1517:```
        -: 1518:
        -: 1519:**See also**
        -: 1520:
        -: 1521:- [jerry_init](#jerry_init)
        -: 1522:
        -: 1523:
        -: 1524:## jerry_get_context_data
        -: 1525:
        -: 1526:**Summary**
        -: 1527:
        -: 1528:Retrieve a pointer to the item stored within the current context by the given manager.
        -: 1529:
        -: 1530:*Note*: Since internally the pointer to a manager's context data item is linked to the next such pointer in a linked
        -: 1531:        list, it is inadvisable to invoke too many different managers, because doing so will increase the time it takes
        -: 1532:        to retrieve a manager's context data item, degrading performance. For example, try to keep the number of
        -: 1533:        managers below five.
        -: 1534:
        -: 1535:**Prototype**
        -: 1536:
        -: 1537:```c
        -: 1538:void *
        -: 1539:jerry_get_context_data (const jerry_context_data_manager *manager_p);
        -: 1540:```
        -: 1541:
        -: 1542:- `manager_p`: the manager of this context data item.
        -: 1543:- return value: the item created by `manager_p` when `jerry_get_context_data ()` was first called, or a new item created
        -: 1544:  by `manager_p`, which will be stored for future identical calls to `jerry_get_context_data ()`, and which will be
        -: 1545:  deinitialized using the `deinit_cb` callback provided by `manager_p` when the context will be destroyed.
        -: 1546:
        -: 1547:*New in version 2.0*.
        -: 1548:
        -: 1549:**Example**
        -: 1550:
        -: 1551:[doctest]: # (test="compile")
        -: 1552:
        -: 1553:```c
        -: 1554:#include "jerryscript.h"
        -: 1555:
        -: 1556:typedef struct
        -: 1557:{
        -: 1558:  int my_data1;
        -: 1559:  double my_data2;
        -: 1560:  char *my_data3;
        -: 1561:} my_context_data_t;
        -: 1562:
        -: 1563:/* Define how context items will be initialized. */
        -: 1564:static void
        -: 1565:my_context_data_new (void *user_data_p)
        -: 1566:{
        -: 1567:  my_context_data_t *my_data_p = (my_context_data_t *) user_data_p;
        -: 1568:
        -: 1569:  /*
        -: 1570:   * Initialize my_data_p. JerryScript will store it on the current context and return it whenever
        -: 1571:   * jerry_get_context_data () is called with a pointer to my_manager as defined below.
        -: 1572:   */
        -: 1573:}
        -: 1574:
        -: 1575:/* Define how context items will be deinitialized */
        -: 1576:static void
        -: 1577:my_context_data_free (void *user_data_p)
        -: 1578:{
        -: 1579:  my_context_data_t *my_data_p = ((my_context_data_t *) user_data_p);
        -: 1580:
        -: 1581:  /* Perform any necessary cleanup on my_data. JerryScript will free the pointer after this function completes. */
        -: 1582:}
        -: 1583:
        -: 1584:/* Wrap the creation and destruction functions into a manager */
        -: 1585:static const jerry_context_data_manager_t my_manager =
        -: 1586:{
        -: 1587:  .init_cb = my_context_data_new,
        -: 1588:  .deinit_cb = my_context_data_free,
        -: 1589:  .bytes_needed = sizeof (my_context_data_t)
        -: 1590:};
        -: 1591:
        -: 1592:/*
        -: 1593: * Then, in some function in your code, you can retrieve an item of type my_context_data_t from the currently active
        -: 1594: * context such that JerryScript will create and store such an item if one was not previously created
        -: 1595: */
        -: 1596:static void
        -: 1597:someplace_in_the_code (void)
        -: 1598:{
        -: 1599:  my_context_data_t *my_data = (my_context_data_t *) jerry_get_context_data (&my_manager);
        -: 1600:  /* Perform useful things using the data found in my_data */
        -: 1601:}
        -: 1602:```
        -: 1603:
        -: 1604:
        -: 1605:## jerry_register_magic_strings
        -: 1606:
        -: 1607:**Summary**
        -: 1608:
        -: 1609:Registers an external magic string array.
        -: 1610:
        -: 1611:*Notes*:
        -: 1612:  - The strings in the array must be sorted by size at first, then lexicographically.
        -: 1613:  - The maximum number of external magic strings is limited to 2147483648 (UINT32_MAX / 2).
        -: 1614:    If there are more than 2147483648 external magic strings the extra is cropped.
        -: 1615:
        -: 1616:**Prototype**
        -: 1617:
        -: 1618:```c
        -: 1619:void
        -: 1620:jerry_register_magic_strings  (const jerry_char_t * const *ex_str_items_p,
        -: 1621:                               uint32_t count,
        -: 1622:                               const jerry_length_t *str_lengths_p);
        -: 1623:```
        -: 1624:
        -: 1625:- `ex_str_items_p` - character arrays, representing external magic strings' contents
        -: 1626:- `count` - number of elements in `ext_str_items_p` array
        -: 1627:- `str_lengths_p` - array of lengths for each magic string
        -: 1628:
        -: 1629:*Changed in version 2.0*: The first function argument type was changed.
        -: 1630:
        -: 1631:**Example**
        -: 1632:
        -: 1633:[doctest]: # ()
        -: 1634:
        -: 1635:```c
        -: 1636:#include "jerryscript.h"
        -: 1637:
        -: 1638:int
    #####: 1639:main (void)
        -: 1640:{
    #####: 1641:  jerry_init (JERRY_INIT_EMPTY);
        -: 1642:
        -: 1643:  // must be static, because 'jerry_register_magic_strings' does not copy
        -: 1644:  // the items must be sorted by size at first, then lexicographically
        -: 1645:  static const jerry_char_t * const magic_string_items[] = {
        -: 1646:                                                             (const jerry_char_t *) "magicstring1",
        -: 1647:                                                             (const jerry_char_t *) "magicstring2",
        -: 1648:                                                             (const jerry_char_t *) "magicstring3"
        -: 1649:                                                           };
    #####: 1650:  uint32_t num_magic_string_items = (uint32_t) (sizeof (magic_string_items) / sizeof (jerry_char_t *));
        -: 1651:
        -: 1652:  // must be static, because 'jerry_register_magic_strings' does not copy
        -: 1653:  static const jerry_length_t magic_string_lengths[] = {
        -: 1654:                                                         12,
        -: 1655:                                                         12,
        -: 1656:                                                         12
        -: 1657:                                                       };
    #####: 1658:  jerry_register_magic_strings (magic_string_items, num_magic_string_items, magic_string_lengths);
        -: 1659:}
        -: 1660:```
        -: 1661:
        -: 1662:**See also**
        -: 1663:
        -: 1664:- [jerry_init](#jerry_init)
        -: 1665:- [jerry_cleanup](#jerry_cleanup)
        -: 1666:- [jerry_get_literals_from_snapshot](#jerry_get_literals_from_snapshot)
        -: 1667:
        -: 1668:
        -: 1669:## jerry_get_memory_stats
        -: 1670:
        -: 1671:**Summary**
        -: 1672:
        -: 1673:Get heap memory stats.
        -: 1674:
        -: 1675:**Notes**:
        -: 1676:- The engine must be initialized with the `JERRY_INIT_MEM_STATS` option to allow
        -: 1677:  heap statistic collections. See [jerry_init](#jerry_init)
        -: 1678:- This API depends on a build option (`JERRY_MEM_STATS`) and can be checked
        -: 1679:  in runtime with the `JERRY_FEATURE_MEM_STATS` feature enum value,
        -: 1680:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 1681:
        -: 1682:
        -: 1683:**Prototype**
        -: 1684:
        -: 1685:```c
        -: 1686:bool
        -: 1687:jerry_get_memory_stats (jerry_heap_stats_t *out_stats_p);
        -: 1688:```
        -: 1689:
        -: 1690:- `out_stats_p` - out parameter, that provides the heap statistics.
        -: 1691:- return value
        -: 1692:  - true, if stats were written into the `out_stats_p` pointer.
        -: 1693:  - false, otherwise. Usually it is because the `JERRY_FEATURE_MEM_STATS` feature is not enabled.
        -: 1694:
        -: 1695:*New in version 2.0*.
        -: 1696:
        -: 1697:**Example**
        -: 1698:
        -: 1699:```c
        -: 1700:jerry_init (JERRY_INIT_MEM_STATS);
        -: 1701:// ...
        -: 1702:
        -: 1703:jerry_heap_stats_t stats = {0};
        -: 1704:bool get_stats_ret = jerry_get_memory_stats (&stats);
        -: 1705:```
        -: 1706:
        -: 1707:**See also**
        -: 1708:
        -: 1709:- [jerry_init](#jerry_init)
        -: 1710:
        -: 1711:
        -: 1712:## jerry_gc
        -: 1713:
        -: 1714:**Summary**
        -: 1715:
        -: 1716:Performs garbage collection.
        -: 1717:
        -: 1718:**Prototype**
        -: 1719:
        -: 1720:```c
        -: 1721:void
        -: 1722:jerry_gc (jerry_gc_mode_t mode);
        -: 1723:```
        -: 1724:
        -: 1725:- `mode` - operational mode, see [jerry_gc_mode_t](#jerry_gc_mode_t)
        -: 1726:
        -: 1727:*Changed in version 2.0*: Added `mode` argument.
        -: 1728:
        -: 1729:**Example**
        -: 1730:
        -: 1731:[doctest]: # ()
        -: 1732:
        -: 1733:```c
        -: 1734:#include "jerryscript.h"
        -: 1735:
        -: 1736:int
    #####: 1737:main (void)
        -: 1738:{
    #####: 1739:  jerry_init (JERRY_INIT_EMPTY);
        -: 1740:
    #####: 1741:  jerry_value_t object_value = jerry_create_object ();
    #####: 1742:  jerry_release_value (object_value);
        -: 1743:
    #####: 1744:  jerry_gc (JERRY_GC_PRESSURE_LOW);
        -: 1745:
    #####: 1746:  jerry_cleanup ();
        -: 1747:}
        -: 1748:```
        -: 1749:
        -: 1750:**See also**
        -: 1751:
        -: 1752:- [jerry_gc_mode_t](#jerry_gc_mode_t)
        -: 1753:- [jerry_init](#jerry_init)
        -: 1754:- [jerry_cleanup](#jerry_cleanup)
        -: 1755:
        -: 1756:# Parser and executor functions
        -: 1757:
        -: 1758:Functions to parse and run JavaScript source code.
        -: 1759:
        -: 1760:## jerry_run_simple
        -: 1761:
        -: 1762:**Summary**
        -: 1763:
        -: 1764:The simplest way to run JavaScript.
        -: 1765:
        -: 1766:**Prototype**
        -: 1767:
        -: 1768:```c
        -: 1769:bool
        -: 1770:jerry_run_simple (const jerry_char_t *script_source_p,
        -: 1771:                  size_t script_source_size,
        -: 1772:                  jerry_init_flag_t flags);
        -: 1773:```
        -: 1774:
        -: 1775:- `script_source_p` - source code, it must be a valid utf8 string.
        -: 1776:- `script_source_size` - size of source code buffer, in bytes.
        -: 1777:- `jerry_init_flag_t` - combination of various engine configuration flags
        -: 1778:- return value
        -: 1779:  - true, if run was successful
        -: 1780:  - false, otherwise
        -: 1781:
        -: 1782:**Example**
        -: 1783:
        -: 1784:[doctest]: # ()
        -: 1785:
        -: 1786:```c
        -: 1787:#include "jerryscript.h"
        -: 1788:
        -: 1789:int
    #####: 1790:main (void)
        -: 1791:{
    #####: 1792:  const jerry_char_t script[] = "print ('Hello, World!');";
        -: 1793:
    #####: 1794:  jerry_run_simple (script, sizeof (script) - 1, JERRY_INIT_EMPTY);
        -: 1795:  return 0;
        -: 1796:}
        -: 1797:```
        -: 1798:
        -: 1799:**See also**
        -: 1800:
        -: 1801:- [jerry_init](#jerry_init)
        -: 1802:- [jerry_cleanup](#jerry_cleanup)
        -: 1803:- [jerry_parse](#jerry_parse)
        -: 1804:- [jerry_run](#jerry_run)
        -: 1805:
        -: 1806:
        -: 1807:## jerry_parse
        -: 1808:
        -: 1809:**Summary**
        -: 1810:
        -: 1811:Parse a script, module, or function and create a compiled code using a character string.
        -: 1812:
        -: 1813:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 1814:is no longer needed.
        -: 1815:
        -: 1816:**Prototype**
        -: 1817:
        -: 1818:```c
        -: 1819:jerry_value_t
        -: 1820:jerry_parse (const jerry_char_t *source_p,
        -: 1821:             size_t source_size,
        -: 1822:             const jerry_parse_options_t *options_p);
        -: 1823:```
        -: 1824:
        -: 1825:- `source_p` - string, containing source code to parse (must be a valid UTF8 string).
        -: 1826:- `source_size` - size of the string, in bytes.
        -: 1827:- `options_p` - additional parsing options, can be NULL if not used
        -: 1828:- return value
        -: 1829:  - function object value, if script was parsed successfully,
        -: 1830:  - thrown error, otherwise
        -: 1831:
        -: 1832:*Changed in version 2.0*: Added `resource_name_p`, and `resource_name_length` arguments.
        -: 1833:
        -: 1834:*Changed in version [[NEXT_RELEASE]]*: The `resource_name_p`, `resource_name_length`, and `parse_opts` arguments are replaced by `options_p`.
        -: 1835:                                       This function replaces the `jerry_parse_function` method.
        -: 1836:
        -: 1837:**Example 1**
        -: 1838:
        -: 1839:[doctest]: # (name="02.API-REFERENCE-parse-simple.c")
        -: 1840:
        -: 1841:```c
        -: 1842:#include "jerryscript.h"
        -: 1843:
        -: 1844:int
    #####: 1845:main (void)
        -: 1846:{
    #####: 1847:  jerry_init (JERRY_INIT_EMPTY);
        -: 1848:
        -: 1849:  /* Parsing a script. */
    #####: 1850:  const jerry_char_t script[] = "print ('Hello, World!');";
        -: 1851:
        -: 1852:  jerry_parse_options_t parse_options;
    #####: 1853:  parse_options.options = JERRY_PARSE_STRICT_MODE | JERRY_PARSE_HAS_RESOURCE | JERRY_PARSE_HAS_START;
    #####: 1854:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "hello.js");
        -: 1855:  /* This example script is extracted from the middle of a file. */
    #####: 1856:  parse_options.start_line = 10;
    #####: 1857:  parse_options.start_column = 1;
        -: 1858:
    #####: 1859:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 1860:  jerry_release_value (parse_options.resource_name);
        -: 1861:
        -: 1862:  /* Run the "parsed_code" script with "jerry_run". */
        -: 1863:
    #####: 1864:  jerry_release_value (jerry_run (parsed_code));
    #####: 1865:  jerry_release_value (parsed_code);
        -: 1866:
    #####: 1867:  jerry_cleanup ();
        -: 1868:  return 0;
        -: 1869:}
        -: 1870:```
        -: 1871:
        -: 1872:**Example - function parsing**
        -: 1873:
        -: 1874:[doctest]: # (name="02.API-REFERENCE-parse-function.c")
        -: 1875:
        -: 1876:```c
        -: 1877:#include "jerryscript.h"
        -: 1878:
        -: 1879:int
    #####: 1880:main (void)
        -: 1881:{
    #####: 1882:  jerry_init (JERRY_INIT_EMPTY);
        -: 1883:
        -: 1884:  /* Specifly the argument list to parse a function. */
        -: 1885:  jerry_parse_options_t parse_options;
    #####: 1886:  parse_options.options = JERRY_PARSE_HAS_ARGUMENT_LIST;
    #####: 1887:  parse_options.argument_list = jerry_create_string ((const jerry_char_t *) "a, b");
        -: 1888:
    #####: 1889:  const jerry_char_t function_code[] = "return a + b;";
    #####: 1890:  jerry_value_t parsed_function = jerry_parse (function_code, sizeof (function_code) - 1, &parse_options);
    #####: 1891:  jerry_release_value (parse_options.argument_list);
        -: 1892:
        -: 1893:  /* Use the "parsed_function" as a normal JavaScript function. */
        -: 1894:
    #####: 1895:  jerry_value_t args[] = {
    #####: 1896:    jerry_create_number (3),
    #####: 1897:    jerry_create_number (4),
        -: 1898:  };
    #####: 1899:  jerry_size_t argc = sizeof (args) / sizeof (args[0]);
    #####: 1900:  jerry_value_t call_result = jerry_call_function (parsed_function,
        -: 1901:                                                   jerry_create_undefined(),
        -: 1902:                                                   args,
        -: 1903:                                                   argc);
        -: 1904:
        -: 1905:  /* use the function result */
    #####: 1906:  jerry_release_value (call_result);
    #####: 1907:  jerry_release_value (parsed_function);
        -: 1908:
    #####: 1909:  jerry_cleanup ();
        -: 1910:  return 0;
        -: 1911:}
        -: 1912:```
        -: 1913:
        -: 1914:**See also**
        -: 1915:
        -: 1916:- [jerry_parse_value](#jerry_parse_value)
        -: 1917:- [jerry_run](#jerry_run)
        -: 1918:- [jerry_parse_options_t](#jerry_parse_options_t)
        -: 1919:
        -: 1920:## jerry_parse_value
        -: 1921:
        -: 1922:**Summary**
        -: 1923:
        -: 1924:Parse a script, module, or function and create a compiled code using a string value.
        -: 1925:
        -: 1926:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 1927:is no longer needed.
        -: 1928:
        -: 1929:**Prototype**
        -: 1930:
        -: 1931:```c
        -: 1932:jerry_value_t
        -: 1933:jerry_parse_value (const jerry_value_t source_value,
        -: 1934:                   const jerry_parse_options_t *options_p);
        -: 1935:```
        -: 1936:
        -: 1937:- `source_value` - string value, containing source code to parse (only string values are accepted).
        -: 1938:- `options_p` - additional parsing options, can be NULL if not used
        -: 1939:- return value
        -: 1940:  - function object value, if script was parsed successfully,
        -: 1941:  - thrown error, otherwise
        -: 1942:
        -: 1943:*New in version [[NEXT_RELEASE]]*.
        -: 1944:
        -: 1945:**Example**
        -: 1946:
        -: 1947:[doctest]: # ()
        -: 1948:
        -: 1949:```c
        -: 1950:#include "jerryscript.h"
        -: 1951:
        -: 1952:int
    #####: 1953:main (void)
        -: 1954:{
    #####: 1955:  jerry_init (JERRY_INIT_EMPTY);
        -: 1956:
    #####: 1957:  jerry_value_t script_value = jerry_create_string ((const jerry_char_t *) "print ('Hello, World!');");
        -: 1958:
        -: 1959:  jerry_parse_options_t parse_options;
    #####: 1960:  parse_options.options = JERRY_PARSE_STRICT_MODE | JERRY_PARSE_HAS_RESOURCE | JERRY_PARSE_HAS_START;
    #####: 1961:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "hello.js");
        -: 1962:  /* This example script is extracted from the middle of a file. */
    #####: 1963:  parse_options.start_line = 10;
    #####: 1964:  parse_options.start_column = 1;
        -: 1965:
    #####: 1966:  jerry_value_t parsed_code = jerry_parse_value (script_value, &parse_options);
    #####: 1967:  jerry_release_value (parse_options.resource_name);
    #####: 1968:  jerry_release_value (script_value);
    #####: 1969:  jerry_release_value (parsed_code);
        -: 1970:
    #####: 1971:  jerry_cleanup ();
        -: 1972:  return 0;
        -: 1973:}
        -: 1974:```
        -: 1975:
        -: 1976:**See also**
        -: 1977:
        -: 1978:- [jerry_parse](#jerry_parse)
        -: 1979:- [jerry_run](#jerry_run)
        -: 1980:- [jerry_parse_options_t](#jerry_parse_options_t)
        -: 1981:
        -: 1982:## jerry_run
        -: 1983:
        -: 1984:**Summary**
        -: 1985:
        -: 1986:Run a Script or Module created by [jerry_parse](#jerry_parse).
        -: 1987:
        -: 1988:*Notes*:
        -: 1989:  - The code should be previously parsed with `jerry_parse`.
        -: 1990:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 1991:    when it is no longer needed.
        -: 1992:
        -: 1993:**Prototype**
        -: 1994:
        -: 1995:```c
        -: 1996:jerry_value_t
        -: 1997:jerry_run (const jerry_value_t func_val);
        -: 1998:```
        -: 1999:
        -: 2000:- `func_val` - function to run
        -: 2001:- return value
        -: 2002:  - result of bytecode, if run was successful
        -: 2003:  - thrown error, otherwise
        -: 2004:
        -: 2005:**Example**
        -: 2006:
        -: 2007:[doctest]: # ()
        -: 2008:
        -: 2009:```c
        -: 2010:#include "jerryscript.h"
        -: 2011:
        -: 2012:int
    #####: 2013:main (void)
        -: 2014:{
    #####: 2015:  const jerry_char_t script[] = "print ('Hello, World!');";
        -: 2016:
        -: 2017:  /* Initialize engine */
    #####: 2018:  jerry_init (JERRY_INIT_EMPTY);
        -: 2019:
        -: 2020:  /* Setup Global scope code */
    #####: 2021:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
        -: 2022:
    #####: 2023:  if (!jerry_value_is_error (parsed_code))
        -: 2024:  {
        -: 2025:    /* Execute the parsed source code in the Global scope */
    #####: 2026:    jerry_value_t ret_value = jerry_run (parsed_code);
        -: 2027:
        -: 2028:    /* Returned value must be freed */
    #####: 2029:    jerry_release_value (ret_value);
        -: 2030:  }
        -: 2031:
        -: 2032:  /* Parsed source code must be freed */
    #####: 2033:  jerry_release_value (parsed_code);
        -: 2034:
        -: 2035:  /* Cleanup engine */
    #####: 2036:  jerry_cleanup ();
        -: 2037:}
        -: 2038:```
        -: 2039:
        -: 2040:**See also**
        -: 2041:
        -: 2042:- [jerry_parse](#jerry_parse)
        -: 2043:
        -: 2044:
        -: 2045:## jerry_eval
        -: 2046:
        -: 2047:**Summary**
        -: 2048:
        -: 2049:Perform JavaScript `eval` function call (ECMA-262 v5.1 sec-15.1.2.1).
        -: 2050:
        -: 2051:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 2052:is no longer needed.
        -: 2053:
        -: 2054:**Prototype**
        -: 2055:
        -: 2056:```c
        -: 2057:jerry_value_t
        -: 2058:jerry_eval (const jerry_char_t *source_p,
        -: 2059:            size_t source_size,
        -: 2060:            uint32_t parse_opts);
        -: 2061:```
        -: 2062:
        -: 2063:- `source_p` - source code to evaluate, it must be a valid utf8 string.
        -: 2064:- `source_size` - length of the source code
        -: 2065:- `parse_opts` - combination of [jerry_parse_option_enable_feature_t](#jerry_parse_option_enable_feature_t) flags.
        -: 2066:                 The following flags are allowed: JERRY_PARSE_STRICT_MODE
        -: 2067:- return value - result of eval, may be an error value.
        -: 2068:
        -: 2069:**Example**
        -: 2070:
        -: 2071:```c
        -: 2072:{
        -: 2073:  jerry_value_t ret_val = jerry_eval (str_to_eval,
        -: 2074:                                      strlen (str_to_eval),
        -: 2075:                                      JERRY_PARSE_NO_OPTS);
        -: 2076:}
        -: 2077:```
        -: 2078:
        -: 2079:**See also**
        -: 2080:
        -: 2081:- [jerry_create_external_function](#jerry_create_external_function)
        -: 2082:- [jerry_external_handler_t](#jerry_external_handler_t)
        -: 2083:
        -: 2084:## jerry_run_all_enqueued_jobs
        -: 2085:
        -: 2086:**Summary**
        -: 2087:
        -: 2088:Run enqueued Promise jobs until the first thrown error or until all get executed.
        -: 2089:
        -: 2090:*Important Note*: The job queue is not guaranteed to be empty, after the function call has returned a value.
        -: 2091:Therefore, this function is best used in a while loop, handling each error it returns, until the job queue is empty.
        -: 2092:
        -: 2093:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 2094:is no longer needed.
        -: 2095:
        -: 2096:**Prototype**
        -: 2097:
        -: 2098:```c
        -: 2099:jerry_value_t
        -: 2100:jerry_run_all_enqueued_jobs (void)
        -: 2101:```
        -: 2102:
        -: 2103:- return value - result of last executed job, may be error value.
        -: 2104:
        -: 2105:*New in version 2.0*.
        -: 2106:
        -: 2107:**Example**
        -: 2108:
        -: 2109:[doctest]: # ()
        -: 2110:
        -: 2111:```c
        -: 2112:#include "jerryscript.h"
        -: 2113:
        -: 2114:int
    #####: 2115:main (void)
        -: 2116:{
    #####: 2117:  jerry_init (JERRY_INIT_EMPTY);
        -: 2118:
    #####: 2119:  const jerry_char_t script[] = "new Promise(function(f,r) { f('Hello, World!'); }).then(function(x) { print(x); });";
        -: 2120:
    #####: 2121:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
    #####: 2122:  jerry_value_t script_value = jerry_run (parsed_code);
        -: 2123:
        -: 2124:  jerry_value_t job_value;
        -: 2125:  while (true)
        -: 2126:  {
    #####: 2127:    job_value = jerry_run_all_enqueued_jobs ();
        -: 2128:
    #####: 2129:    if (jerry_value_is_error (job_value))
        -: 2130:    {
    #####: 2131:      if (jerry_value_is_abort (job_value))
        -: 2132:      {
        -: 2133:        // Terminate the engine
        -: 2134:      }
        -: 2135:
        -: 2136:      // Handle the error here
        -: 2137:    }
        -: 2138:    else
        -: 2139:    {
        -: 2140:      // The queue should be empty now
        -: 2141:      break;
        -: 2142:    }
        -: 2143:  }
        -: 2144:
    #####: 2145:  jerry_release_value (job_value);
    #####: 2146:  jerry_release_value (script_value);
    #####: 2147:  jerry_release_value (parsed_code);
        -: 2148:
    #####: 2149:  jerry_cleanup ();
        -: 2150:  return 0;
        -: 2151:}
        -: 2152:```
        -: 2153:
        -: 2154:
        -: 2155:# Get the global context
        -: 2156:
        -: 2157:## jerry_get_global_object
        -: 2158:
        -: 2159:**Summary**
        -: 2160:
        -: 2161:Get the Global object.
        -: 2162:
        -: 2163:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 2164:is no longer needed.
        -: 2165:
        -: 2166:**Prototype**
        -: 2167:
        -: 2168:```c
        -: 2169:jerry_value_t
        -: 2170:jerry_get_global_object (void);
        -: 2171:```
        -: 2172:
        -: 2173:- return value - api value of global object
        -: 2174:
        -: 2175:**Example**
        -: 2176:
        -: 2177:```c
        -: 2178:{
        -: 2179:  jerry_value_t glob_obj_val = jerry_get_global_object ();
        -: 2180:
        -: 2181:  ... // Do something with global object, ex: add properties
        -: 2182:
        -: 2183:  jerry_release_value (glob_obj_val);
        -: 2184:}
        -: 2185:```
        -: 2186:
        -: 2187:**See also**
        -: 2188:
        -: 2189:- [jerry_release_value](#jerry_release_value)
        -: 2190:- [jerry_define_own_property](#jerry_define_own_property)
        -: 2191:
        -: 2192:
        -: 2193:# Checker functions
        -: 2194:
        -: 2195:Functions to check the type of an API value ([jerry_value_t](#jerry_value_t)).
        -: 2196:
        -: 2197:## jerry_value_is_abort
        -: 2198:
        -: 2199:**Summary**
        -: 2200:
        -: 2201:Returns whether the given `jerry_value_t` has the error and abort value set.
        -: 2202:
        -: 2203:**Prototype**
        -: 2204:
        -: 2205:```c
        -: 2206:bool
        -: 2207:jerry_value_is_abort (const jerry_value_t value);
        -: 2208:```
        -: 2209:
        -: 2210:- `value` - api value
        -: 2211:- return value
        -: 2212:  - true, if the given `jerry_value_t` has the error and abort value set
        -: 2213:  - false, otherwise
        -: 2214:
        -: 2215:*New in version 2.0*.
        -: 2216:
        -: 2217:**Example**
        -: 2218:
        -: 2219:```c
        -: 2220:{
        -: 2221:  jerry_value_t value;
        -: 2222:  ... // create or acquire value
        -: 2223:
        -: 2224:  if (jerry_value_is_abort (value))
        -: 2225:  {
        -: 2226:    ...
        -: 2227:  }
        -: 2228:
        -: 2229:  jerry_release_value (value);
        -: 2230:}
        -: 2231:```
        -: 2232:
        -: 2233:**See also**
        -: 2234:
        -: 2235:- [jerry_value_t](#jerry_value_t)
        -: 2236:- [jerry_value_is_error](#jerry_value_is_error)
        -: 2237:
        -: 2238:## jerry_value_is_array
        -: 2239:
        -: 2240:**Summary**
        -: 2241:
        -: 2242:Returns whether the given `jerry_value_t` is an array.
        -: 2243:
        -: 2244:**Prototype**
        -: 2245:
        -: 2246:```c
        -: 2247:bool
        -: 2248:jerry_value_is_array (const jerry_value_t value)
        -: 2249:```
        -: 2250:
        -: 2251:- `value` - api value
        -: 2252:- return value
        -: 2253:  - true, if the given `jerry_value_t` is an array
        -: 2254:  - false, otherwise
        -: 2255:
        -: 2256:**Example**
        -: 2257:
        -: 2258:```c
        -: 2259:{
        -: 2260:  jerry_value_t value;
        -: 2261:  ... // create or acquire value
        -: 2262:
        -: 2263:  if (jerry_value_is_array (value))
        -: 2264:  {
        -: 2265:    ...
        -: 2266:  }
        -: 2267:
        -: 2268:  jerry_release_value (value);
        -: 2269:}
        -: 2270:```
        -: 2271:
        -: 2272:**See also**
        -: 2273:
        -: 2274:- [jerry_release_value](#jerry_release_value)
        -: 2275:
        -: 2276:## jerry_value_is_arraybuffer
        -: 2277:
        -: 2278:**Summary**
        -: 2279:
        -: 2280:Returns whether the given `jerry_value_t` is an ArrayBuffer object.
        -: 2281:
        -: 2282:*Notes*:
        -: 2283:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 2284:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 2285:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2286:- The es.next profile enables this by default.
        -: 2287:
        -: 2288:**Prototype**
        -: 2289:
        -: 2290:```c
        -: 2291:bool
        -: 2292:jerry_value_is_arraybuffer (const jerry_value_t value)
        -: 2293:```
        -: 2294:
        -: 2295:- `value` - api value to check.
        -: 2296:- return value
        -: 2297:  - true, if the given `jerry_value_t` is an ArrayBuffer object.
        -: 2298:  - false, otherwise
        -: 2299:
        -: 2300:*New in version 2.0*.
        -: 2301:
        -: 2302:**Example**
        -: 2303:
        -: 2304:```c
        -: 2305:{
        -: 2306:  jerry_value_t value;
        -: 2307:  ... // create or acquire value
        -: 2308:
        -: 2309:  if (jerry_value_is_arraybuffer (value))
        -: 2310:  {
        -: 2311:    ...
        -: 2312:  }
        -: 2313:
        -: 2314:  jerry_release_value (value);
        -: 2315:}
        -: 2316:```
        -: 2317:
        -: 2318:**See also**
        -: 2319:
        -: 2320:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -: 2321:- [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external)
        -: 2322:
        -: 2323:## jerry_value_is_shared_arraybuffer
        -: 2324:
        -: 2325:**Summary**
        -: 2326:
        -: 2327:Returns whether the given `jerry_value_t` is a SharedArrayBuffer object.
        -: 2328:
        -: 2329:*Notes*:
        -: 2330:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 2331:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 2332:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2333:- The es.next profile enables this by default.
        -: 2334:
        -: 2335:**Prototype**
        -: 2336:
        -: 2337:```c
        -: 2338:bool
        -: 2339:jerry_value_is_shared_arraybuffer (const jerry_value_t value);
        -: 2340:```
        -: 2341:
        -: 2342:- `value` - api value to check.
        -: 2343:- return value
        -: 2344:    - true, if the given `jerry_value_t` is a SharedArrayBuffer object.
        -: 2345:    - false, otherwise
        -: 2346:
        -: 2347:*New in version [[NEXT_RELEASE]]*.
        -: 2348:
        -: 2349:**Example**
        -: 2350:
        -: 2351:```c
        -: 2352:{
        -: 2353:  jerry_value_t value;
        -: 2354:  ... // create or acquire value
        -: 2355:
        -: 2356:  if (jerry_value_is_shared_arraybuffer (value))
        -: 2357:  {
        -: 2358:    ...
        -: 2359:  }
        -: 2360:
        -: 2361:  jerry_release_value (value);
        -: 2362:}
        -: 2363:```
        -: 2364:
        -: 2365:**See also**
        -: 2366:
        -: 2367:- [jerry_create_shared_arraybuffer](#jerry_create_shared_arraybuffer)
        -: 2368:- [jerry_create_shared_arraybuffer_external](#jerry_create_shared_arraybuffer_external)
        -: 2369:
        -: 2370:
        -: 2371:## jerry_value_is_boolean
        -: 2372:
        -: 2373:**Summary**
        -: 2374:
        -: 2375:Returns whether the given `jerry_value_t` is a boolean value.
        -: 2376:
        -: 2377:**Prototype**
        -: 2378:
        -: 2379:```c
        -: 2380:bool
        -: 2381:jerry_value_is_boolean (const jerry_value_t value)
        -: 2382:```
        -: 2383:
        -: 2384:- `value` - api value
        -: 2385:- return value
        -: 2386:  - true, if the given `jerry_value_t` is a boolean value
        -: 2387:  - false, otherwise
        -: 2388:
        -: 2389:**Example**
        -: 2390:
        -: 2391:```c
        -: 2392:{
        -: 2393:  jerry_value_t value;
        -: 2394:  ... // create or acquire value
        -: 2395:
        -: 2396:  if (jerry_value_is_boolean (value))
        -: 2397:  {
        -: 2398:    ...
        -: 2399:  }
        -: 2400:
        -: 2401:  jerry_release_value (value);
        -: 2402:}
        -: 2403:```
        -: 2404:
        -: 2405:**See also**
        -: 2406:
        -: 2407:- [jerry_release_value](#jerry_release_value)
        -: 2408:
        -: 2409:## jerry_value_is_true
        -: 2410:
        -: 2411:**Summary**
        -: 2412:
        -: 2413:Returns whether the given `jerry_value_t` is a true value.
        -: 2414:
        -: 2415:**Prototype**
        -: 2416:
        -: 2417:```c
        -: 2418:bool
        -: 2419:jerry_value_is_true (const jerry_value_t value);
        -: 2420:```
        -: 2421:
        -: 2422:- `value` - api value
        -: 2423:- return value
        -: 2424:    - true, if the given `jerry_value_t` is true value
        -: 2425:    - false, otherwise
        -: 2426:
        -: 2427:*New in version [[NEXT_RELEASE]]*. Replaces the `jerry_value_is_boolean` method.
        -: 2428:
        -: 2429:**Example**
        -: 2430:
        -: 2431:```c
        -: 2432:{
        -: 2433:  jerry_value_t value;
        -: 2434:  ... // create or acquire value
        -: 2435:
        -: 2436:  if (jerry_value_is_true (value))
        -: 2437:  {
        -: 2438:    ...
        -: 2439:  }
        -: 2440:
        -: 2441:  jerry_release_value (value);
        -: 2442:}
        -: 2443:```
        -: 2444:
        -: 2445:**See also**
        -: 2446:
        -: 2447:- [jerry_release_value](#jerry_release_value)
        -: 2448:
        -: 2449:## jerry_value_is_false
        -: 2450:
        -: 2451:**Summary**
        -: 2452:
        -: 2453:Returns whether the given `jerry_value_t` is a false value.
        -: 2454:
        -: 2455:**Prototype**
        -: 2456:
        -: 2457:```c
        -: 2458:bool
        -: 2459:jerry_value_is_false (const jerry_value_t value);
        -: 2460:```
        -: 2461:
        -: 2462:- `value` - api value
        -: 2463:- return value
        -: 2464:    - true, if the given `jerry_value_t` is false value
        -: 2465:    - false, otherwise
        -: 2466:
        -: 2467:*New in version [[NEXT_RELEASE]]*. Replaces the `jerry_value_is_boolean` method.
        -: 2468:
        -: 2469:**Example**
        -: 2470:
        -: 2471:```c
        -: 2472:{
        -: 2473:  jerry_value_t value;
        -: 2474:  ... // create or acquire value
        -: 2475:
        -: 2476:  if (jerry_value_is_false (value))
        -: 2477:  {
        -: 2478:    ...
        -: 2479:  }
        -: 2480:
        -: 2481:  jerry_release_value (value);
        -: 2482:}
        -: 2483:```
        -: 2484:
        -: 2485:**See also**
        -: 2486:
        -: 2487:- [jerry_release_value](#jerry_release_value)
        -: 2488:
        -: 2489:## jerry_value_is_constructor
        -: 2490:
        -: 2491:**Summary**
        -: 2492:
        -: 2493:Returns whether the given `jerry_value_t` is a constructor function.
        -: 2494:
        -: 2495:**Prototype**
        -: 2496:
        -: 2497:```c
        -: 2498:bool
        -: 2499:jerry_value_is_constructor (const jerry_value_t value)
        -: 2500:```
        -: 2501:
        -: 2502:- `value` - api value
        -: 2503:- return value
        -: 2504:  - true, if the given `jerry_value_t` is a constructor
        -: 2505:  - false, otherwise
        -: 2506:
        -: 2507:**Example**
        -: 2508:
        -: 2509:```c
        -: 2510:{
        -: 2511:  jerry_value_t value;
        -: 2512:  ... // create or acquire value
        -: 2513:
        -: 2514:  if (jerry_value_is_constructor (value))
        -: 2515:  {
        -: 2516:    ...
        -: 2517:  }
        -: 2518:
        -: 2519:  jerry_release_value (value);
        -: 2520:}
        -: 2521:```
        -: 2522:
        -: 2523:**See also**
        -: 2524:
        -: 2525:- [jerry_release_value](#jerry_release_value)
        -: 2526:
        -: 2527:## jerry_value_is_dataview
        -: 2528:
        -: 2529:**Summary**
        -: 2530:
        -: 2531:Returns whether the given `jerry_value_t` is a DataView object value.
        -: 2532:
        -: 2533:*Notes*:
        -: 2534:- This API depends on a build option (`JERRY_BUILTIN_DATAVIEW`) and can be checked
        -: 2535:  in runtime with the `JERRY_FEATURE_DATAVIEW` feature enum value,
        -: 2536:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2537:- The es.next profile enables this by default.
        -: 2538:
        -: 2539:**Prototype**
        -: 2540:
        -: 2541:```c
        -: 2542:bool
        -: 2543:jerry_value_is_dataview (const jerry_value_t value)
        -: 2544:```
        -: 2545:
        -: 2546:- `value` - API value
        -: 2547:- return value
        -: 2548:  - true, if the given `jerry_value_t` is a DataView object
        -: 2549:  - false, otherwise
        -: 2550:
        -: 2551:*New in version 2.0*.
        -: 2552:
        -: 2553:**Example**
        -: 2554:
        -: 2555:[doctest]: # ()
        -: 2556:
        -: 2557:```c
        -: 2558:#include "jerryscript.h"
        -: 2559:
        -: 2560:int
    #####: 2561:main (void)
        -: 2562:{
    #####: 2563:  jerry_init (JERRY_INIT_EMPTY);
        -: 2564:
    #####: 2565:  jerry_value_t arraybuffer = jerry_create_arraybuffer (16);
    #####: 2566:  jerry_value_t dataview = jerry_create_dataview (arraybuffer, 0, 16);
        -: 2567:
    #####: 2568:  if (jerry_value_is_dataview (dataview))
        -: 2569:  {
        -: 2570:    // usage of dataview
        -: 2571:  }
        -: 2572:
    #####: 2573:  jerry_release_value (dataview);
    #####: 2574:  jerry_release_value (arraybuffer);
        -: 2575:
    #####: 2576:  jerry_cleanup ();
        -: 2577:  return 0;
        -: 2578:}
        -: 2579:```
        -: 2580:
        -: 2581:**See also**
        -: 2582:
        -: 2583:- [jerry_release_value](#jerry_release_value)
        -: 2584:- [jerry_create_dataview](#jerry_create_dataview)
        -: 2585:
        -: 2586:
        -: 2587:## jerry_value_is_error
        -: 2588:
        -: 2589:**Summary**
        -: 2590:
        -: 2591:Returns whether the given `jerry_value_t` is error value.
        -: 2592:
        -: 2593:**Prototype**
        -: 2594:
        -: 2595:```c
        -: 2596:bool
        -: 2597:jerry_value_is_error (const jerry_value_t value);
        -: 2598:```
        -: 2599:
        -: 2600:- `value` - api value
        -: 2601:- return value
        -: 2602:  - true, if the given `jerry_value_t` is error value.
        -: 2603:  - false, otherwise
        -: 2604:
        -: 2605:*New in version 2.0*.
        -: 2606:
        -: 2607:**Example**
        -: 2608:
        -: 2609:```c
        -: 2610:{
        -: 2611:  jerry_value_t value;
        -: 2612:  ... // create or acquire value
        -: 2613:
        -: 2614:  if (jerry_value_is_error (value))
        -: 2615:  {
        -: 2616:    ...
        -: 2617:  }
        -: 2618:
        -: 2619:  jerry_release_value (value);
        -: 2620:}
        -: 2621:```
        -: 2622:
        -: 2623:**See also**
        -: 2624:
        -: 2625:- [jerry_value_t](#jerry_value_t)
        -: 2626:- [jerry_value_is_abort](#jerry_value_is_abort)
        -: 2627:
        -: 2628:## jerry_value_is_function
        -: 2629:
        -: 2630:**Summary**
        -: 2631:
        -: 2632:Returns whether the given `jerry_value_t` is a function.
        -: 2633:
        -: 2634:**Prototype**
        -: 2635:
        -: 2636:```c
        -: 2637:bool
        -: 2638:jerry_value_is_function (const jerry_value_t value)
        -: 2639:```
        -: 2640:
        -: 2641:- `value` - api value
        -: 2642:- return value
        -: 2643:  - true, if the given `jerry_value_t` is a function
        -: 2644:  - false, otherwise
        -: 2645:
        -: 2646:**Example**
        -: 2647:
        -: 2648:```c
        -: 2649:{
        -: 2650:  jerry_value_t value;
        -: 2651:  ... // create or acquire value
        -: 2652:
        -: 2653:  if (jerry_value_is_function (value))
        -: 2654:  {
        -: 2655:    ...
        -: 2656:  }
        -: 2657:
        -: 2658:  jerry_release_value (value);
        -: 2659:}
        -: 2660:```
        -: 2661:
        -: 2662:**See also**
        -: 2663:
        -: 2664:- [jerry_release_value](#jerry_release_value)
        -: 2665:
        -: 2666:
        -: 2667:## jerry_value_is_async_function
        -: 2668:
        -: 2669:**Summary**
        -: 2670:
        -: 2671:Returns whether the given `jerry_value_t` is an async function.
        -: 2672:
        -: 2673:**Prototype**
        -: 2674:
        -: 2675:```c
        -: 2676:bool
        -: 2677:jerry_value_is_async_function (const jerry_value_t value)
        -: 2678:```
        -: 2679:
        -: 2680:- `value` - api value
        -: 2681:- return value
        -: 2682:  - true, if the given `jerry_value_t` is an async function
        -: 2683:  - false, otherwise
        -: 2684:
        -: 2685:*New in version 2.4*.
        -: 2686:
        -: 2687:**Example**
        -: 2688:
        -: 2689:```c
        -: 2690:{
        -: 2691:  jerry_value_t value;
        -: 2692:  ... // create or acquire value
        -: 2693:
        -: 2694:  if (jerry_value_is_async_function (value))
        -: 2695:  {
        -: 2696:    ...
        -: 2697:  }
        -: 2698:
        -: 2699:  jerry_release_value (value);
        -: 2700:}
        -: 2701:```
        -: 2702:
        -: 2703:**See also**
        -: 2704:
        -: 2705:- [jerry_release_value](#jerry_release_value)
        -: 2706:
        -: 2707:## jerry_value_is_number
        -: 2708:
        -: 2709:**Summary**
        -: 2710:
        -: 2711:Returns whether the given `jerry_value_t` is a number.
        -: 2712:
        -: 2713:**Prototype**
        -: 2714:
        -: 2715:```c
        -: 2716:bool
        -: 2717:jerry_value_is_number (const jerry_value_t value)
        -: 2718:```
        -: 2719:
        -: 2720:- `value` - api value
        -: 2721:- return value
        -: 2722:  - true, if the given `jerry_value_t` is a number
        -: 2723:  - false, otherwise
        -: 2724:
        -: 2725:**Example**
        -: 2726:
        -: 2727:```c
        -: 2728:{
        -: 2729:  jerry_value_t value;
        -: 2730:  ... // create or acquire value
        -: 2731:
        -: 2732:  if (jerry_value_is_number (value))
        -: 2733:  {
        -: 2734:    ...
        -: 2735:  }
        -: 2736:
        -: 2737:  jerry_release_value (value);
        -: 2738:}
        -: 2739:```
        -: 2740:
        -: 2741:**See also**
        -: 2742:
        -: 2743:- [jerry_release_value](#jerry_release_value)
        -: 2744:
        -: 2745:
        -: 2746:## jerry_value_is_null
        -: 2747:
        -: 2748:**Summary**
        -: 2749:
        -: 2750:Returns whether the given `jerry_value_t` is a null value.
        -: 2751:
        -: 2752:**Prototype**
        -: 2753:
        -: 2754:```c
        -: 2755:bool
        -: 2756:jerry_value_is_null (const jerry_value_t value)
        -: 2757:```
        -: 2758:
        -: 2759:- `value` - api value
        -: 2760:- return value
        -: 2761:  - true, if the given `jerry_value_t` is a null
        -: 2762:  - false, otherwise
        -: 2763:
        -: 2764:**Example**
        -: 2765:
        -: 2766:```c
        -: 2767:{
        -: 2768:  jerry_value_t value;
        -: 2769:  ... // create or acquire value
        -: 2770:
        -: 2771:  if (jerry_value_is_null (value))
        -: 2772:  {
        -: 2773:    ...
        -: 2774:  }
        -: 2775:
        -: 2776:  jerry_release_value (value);
        -: 2777:}
        -: 2778:```
        -: 2779:
        -: 2780:**See also**
        -: 2781:
        -: 2782:- [jerry_release_value](#jerry_release_value)
        -: 2783:
        -: 2784:
        -: 2785:## jerry_value_is_object
        -: 2786:
        -: 2787:**Summary**
        -: 2788:
        -: 2789:Returns whether the given `jerry_value_t` is an object value.
        -: 2790:
        -: 2791:**Prototype**
        -: 2792:
        -: 2793:```c
        -: 2794:bool
        -: 2795:jerry_value_is_object (const jerry_value_t value)
        -: 2796:```
        -: 2797:
        -: 2798:- `value` - api value
        -: 2799:- return value
        -: 2800:  - true, if the given `jerry_value_t` is an object
        -: 2801:  - false, otherwise
        -: 2802:
        -: 2803:**Example**
        -: 2804:
        -: 2805:```c
        -: 2806:{
        -: 2807:  jerry_value_t value;
        -: 2808:  ... // create or acquire value
        -: 2809:
        -: 2810:  if (jerry_value_is_object (value))
        -: 2811:  {
        -: 2812:    ...
        -: 2813:  }
        -: 2814:
        -: 2815:  jerry_release_value (value);
        -: 2816:}
        -: 2817:```
        -: 2818:
        -: 2819:**See also**
        -: 2820:
        -: 2821:- [jerry_release_value](#jerry_release_value)
        -: 2822:
        -: 2823:
        -: 2824:## jerry_value_is_promise
        -: 2825:
        -: 2826:**Summary**
        -: 2827:
        -: 2828:Returns whether the given `jerry_value_t` is a promise value.
        -: 2829:
        -: 2830:*Notes*:
        -: 2831:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 2832:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 2833:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2834:- The es.next profile enables this by default.
        -: 2835:
        -: 2836:
        -: 2837:**Prototype**
        -: 2838:
        -: 2839:```c
        -: 2840:bool
        -: 2841:jerry_value_is_promise (const jerry_value_t value)
        -: 2842:```
        -: 2843:
        -: 2844:- `value` - api value
        -: 2845:- return value
        -: 2846:  - true, if the given `jerry_value_t` is a promise
        -: 2847:  - false, otherwise
        -: 2848:
        -: 2849:*New in version 2.0*.
        -: 2850:
        -: 2851:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 2852:
        -: 2853:**Example**
        -: 2854:
        -: 2855:```c
        -: 2856:{
        -: 2857:  jerry_value_t value;
        -: 2858:  ... // create or acquire value
        -: 2859:
        -: 2860:  if (jerry_value_is_promise (value))
        -: 2861:  {
        -: 2862:    ...
        -: 2863:  }
        -: 2864:
        -: 2865:  jerry_release_value (value);
        -: 2866:}
        -: 2867:```
        -: 2868:
        -: 2869:**See also**
        -: 2870:
        -: 2871:- [jerry_release_value](#jerry_release_value)
        -: 2872:- [jerry_create_promise](#jerry_create_promise)
        -: 2873:
        -: 2874:
        -: 2875:## jerry_value_is_proxy
        -: 2876:
        -: 2877:**Summary**
        -: 2878:
        -: 2879:Returns whether the given `jerry_value_t` is a proxy value.
        -: 2880:
        -: 2881:*Notes*:
        -: 2882:- This API depends on a build option (`JERRY_BUILTIN_PROXY`) and can be checked
        -: 2883:  in runtime with the `JERRY_FEATURE_PROXY` feature enum value,
        -: 2884:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2885:- The es.next profile enables this by default.
        -: 2886:
        -: 2887:
        -: 2888:**Prototype**
        -: 2889:
        -: 2890:```c
        -: 2891:bool
        -: 2892:jerry_value_is_proxy (const jerry_value_t value)
        -: 2893:```
        -: 2894:
        -: 2895:- `value` - api value
        -: 2896:- return value
        -: 2897:  - true, if the given `jerry_value_t` is a proxy object
        -: 2898:  - false, otherwise
        -: 2899:
        -: 2900:*New in version 2.3*.
        -: 2901:
        -: 2902:**Example**
        -: 2903:
        -: 2904:```c
        -: 2905:{
        -: 2906:  jerry_value_t value;
        -: 2907:  ... // create or acquire value
        -: 2908:
        -: 2909:  if (jerry_value_is_proxy (value))
        -: 2910:  {
        -: 2911:    ...
        -: 2912:  }
        -: 2913:
        -: 2914:  jerry_release_value (value);
        -: 2915:}
        -: 2916:```
        -: 2917:
        -: 2918:**See also**
        -: 2919:
        -: 2920:- [jerry_release_value](#jerry_release_value)
        -: 2921:- [jerry_create_proxy](#jerry_create_proxy)
        -: 2922:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 2923:
        -: 2924:
        -: 2925:## jerry_value_is_string
        -: 2926:
        -: 2927:**Summary**
        -: 2928:
        -: 2929:Returns whether the given `jerry_value_t` is a string value.
        -: 2930:
        -: 2931:**Prototype**
        -: 2932:
        -: 2933:```c
        -: 2934:bool
        -: 2935:jerry_value_is_string (const jerry_value_t value)
        -: 2936:```
        -: 2937:
        -: 2938:- `value` - api value
        -: 2939:- return value
        -: 2940:  - true, if the given `jerry_value_t` is a string
        -: 2941:  - false, otherwise
        -: 2942:
        -: 2943:**Example**
        -: 2944:
        -: 2945:```c
        -: 2946:{
        -: 2947:  jerry_value_t value;
        -: 2948:  ... // create or acquire value
        -: 2949:
        -: 2950:  if (jerry_value_is_string (value))
        -: 2951:  {
        -: 2952:    ...
        -: 2953:  }
        -: 2954:
        -: 2955:  jerry_release_value (value);
        -: 2956:}
        -: 2957:```
        -: 2958:
        -: 2959:**See also**
        -: 2960:
        -: 2961:- [jerry_release_value](#jerry_release_value)
        -: 2962:
        -: 2963:
        -: 2964:## jerry_value_is_symbol
        -: 2965:
        -: 2966:**Summary**
        -: 2967:
        -: 2968:Returns whether the given `jerry_value_t` is a symbol value.
        -: 2969:
        -: 2970:*Notes*:
        -: 2971:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 2972:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 2973:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 2974:- The es.next profile enables this by default.
        -: 2975:
        -: 2976:**Prototype**
        -: 2977:
        -: 2978:```c
        -: 2979:bool
        -: 2980:jerry_value_is_symbol (const jerry_value_t value)
        -: 2981:```
        -: 2982:
        -: 2983:- `value` - API value
        -: 2984:- return value
        -: 2985:  - true, if the given `jerry_value_t` is a symbol
        -: 2986:  - false, otherwise
        -: 2987:
        -: 2988:*New in version 2.0*.
        -: 2989:
        -: 2990:**Example**
        -: 2991:
        -: 2992:[doctest]: # ()
        -: 2993:
        -: 2994:```c
        -: 2995:#include "jerryscript.h"
        -: 2996:
        -: 2997:int
    #####: 2998:main (void)
        -: 2999:{
    #####: 3000:  jerry_init (JERRY_INIT_EMPTY);
        -: 3001:
    #####: 3002:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "Symbol description string");
    #####: 3003:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 3004:
    #####: 3005:  jerry_release_value (string_value);
        -: 3006:
    #####: 3007:  if (jerry_value_is_symbol (symbol_value))
        -: 3008:  {
        -: 3009:    // usage of symbol_value
        -: 3010:  }
        -: 3011:
    #####: 3012:  jerry_release_value (symbol_value);
        -: 3013:
    #####: 3014:  jerry_cleanup ();
        -: 3015:  return 0;
        -: 3016:}
        -: 3017:```
        -: 3018:
        -: 3019:**See also**
        -: 3020:
        -: 3021:- [jerry_release_value](#jerry_release_value)
        -: 3022:- [jerry_create_symbol](#jerry_create_symbol)
        -: 3023:
        -: 3024:
        -: 3025:## jerry_value_is_bigint
        -: 3026:
        -: 3027:**Summary**
        -: 3028:
        -: 3029:Returns whether the given `jerry_value_t` is a bigint value.
        -: 3030:
        -: 3031:*Notes*:
        -: 3032:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 3033:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 3034:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3035:- The es.next profile enables this by default.
        -: 3036:
        -: 3037:**Prototype**
        -: 3038:
        -: 3039:```c
        -: 3040:bool
        -: 3041:jerry_value_is_bigint (const jerry_value_t value)
        -: 3042:```
        -: 3043:
        -: 3044:- `value` - API value
        -: 3045:- return value
        -: 3046:  - true, if the given `jerry_value_t` is a BigInt
        -: 3047:  - false, otherwise
        -: 3048:
        -: 3049:*New in version 2.4*.
        -: 3050:
        -: 3051:**Example**
        -: 3052:
        -: 3053:[doctest]: # ()
        -: 3054:
        -: 3055:```c
        -: 3056:#include "jerryscript.h"
        -: 3057:
        -: 3058:int
    #####: 3059:main (void)
        -: 3060:{
    #####: 3061:  jerry_init (JERRY_INIT_EMPTY);
        -: 3062:
    #####: 3063:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "12345678");
    #####: 3064:  jerry_value_t bigint_value = jerry_value_to_bigint (string_value);
        -: 3065:
    #####: 3066:  jerry_release_value (string_value);
        -: 3067:
    #####: 3068:  if (jerry_value_is_bigint (bigint_value))
        -: 3069:  {
        -: 3070:    // usage of bigint_value
        -: 3071:  }
        -: 3072:
    #####: 3073:  jerry_release_value (bigint_value);
        -: 3074:
    #####: 3075:  jerry_cleanup ();
        -: 3076:  return 0;
        -: 3077:}
        -: 3078:```
        -: 3079:
        -: 3080:**See also**
        -: 3081:
        -: 3082:- [jerry_release_value](#jerry_release_value)
        -: 3083:- [jerry_create_bigint](#jerry_create_bigint)
        -: 3084:- [jerry_value_to_bigint](#jerry_value_to_bigint)
        -: 3085:
        -: 3086:
        -: 3087:## jerry_value_is_typedarray
        -: 3088:
        -: 3089:**Summary**
        -: 3090:
        -: 3091:Checks whether the given `jerry_value_t` is a TypedArray object or not.
        -: 3092:
        -: 3093:*Notes*:
        -: 3094:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 3095:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 3096:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3097:- The es.next profile enables this by default.
        -: 3098:
        -: 3099:**Prototype**
        -: 3100:
        -: 3101:```c
        -: 3102:bool
        -: 3103:jerry_value_is_typedarray (const jerry_value_t value)
        -: 3104:```
        -: 3105:
        -: 3106:- `value` - object to check
        -: 3107:- return value
        -: 3108:  - true, if the given `jerry_value_t` is a TypedArray object.
        -: 3109:  - false, otherwise
        -: 3110:
        -: 3111:*New in version 2.0*.
        -: 3112:
        -: 3113:**Example**
        -: 3114:
        -: 3115:[doctest]: # ()
        -: 3116:
        -: 3117:```c
        -: 3118:#include "jerryscript.h"
        -: 3119:
        -: 3120:int
    #####: 3121:main (void)
        -: 3122:{
    #####: 3123:  jerry_init (JERRY_INIT_EMPTY);
        -: 3124:
    #####: 3125:  jerry_value_t value = jerry_create_typedarray (JERRY_TYPEDARRAY_UINT16, 15);
        -: 3126:
    #####: 3127:  if (jerry_value_is_typedarray (value))
        -: 3128:  {
        -: 3129:    /* "value" is a typedarray. */
        -: 3130:  }
        -: 3131:
    #####: 3132:  jerry_release_value (value);
        -: 3133:
    #####: 3134:  jerry_cleanup ();
        -: 3135:
        -: 3136:  return 0;
        -: 3137:}
        -: 3138:```
        -: 3139:
        -: 3140:**See also**
        -: 3141:
        -: 3142:- [jerry_create_typedarray](#jerry_create_typedarray)
        -: 3143:
        -: 3144:
        -: 3145:## jerry_get_container_type
        -: 3146:
        -: 3147:**Summary**
        -: 3148:
        -: 3149:Checks whether the given `jerry_value_t` is the given `jerry_container_type_t` type container object.
        -: 3150:
        -: 3151:*Notes*
        -: 3152:- This API function depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -: 3153:  runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -: 3154:  feature enum values.
        -: 3155:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3156:- The es.next profile enables this by default.
        -: 3157:
        -: 3158:**Prototype**
        -: 3159:
        -: 3160:```c
        -: 3161:jerry_container_type_t
        -: 3162:jerry_get_container_type (const jerry_value_t value)
        -: 3163:```
        -: 3164:
        -: 3165:- `value` - Container object
        -: 3166:- return value
        -: 3167:  - The corresponding enum value of `jerry_container_type_t`, or `JERRY_CONTAINER_TYPE_INVALID` if the container
        -: 3168:    was not a valid container object.
        -: 3169:
        -: 3170:*New in version 2.3*.
        -: 3171:
        -: 3172:**Example**
        -: 3173:
        -: 3174:[doctest]: # ()
        -: 3175:
        -: 3176:```c
        -: 3177:#include "jerryscript.h"
        -: 3178:int
    #####: 3179:main (void)
        -: 3180:{
    #####: 3181:  jerry_init (JERRY_INIT_EMPTY);
        -: 3182:
    #####: 3183:  jerry_value_t value = jerry_create_container (JERRY_CONTAINER_TYPE_MAP, NULL, 0);
        -: 3184:
    #####: 3185:  if (jerry_get_container_type (value) == JERRY_CONTAINER_TYPE_MAP)
        -: 3186:  {
        -: 3187:    /* "value" is a map. */
        -: 3188:  }
        -: 3189:
    #####: 3190:  jerry_release_value (value);
        -: 3191:
    #####: 3192:  jerry_cleanup ();
        -: 3193:
        -: 3194:  return 0;
        -: 3195:}
        -: 3196:```
        -: 3197:
        -: 3198:**See also**
        -: 3199:
        -: 3200:- [jerry_create_container](#jerry_create_container)
        -: 3201:- [jerry_container_type_t](#jerry_container_type_t)
        -: 3202:
        -: 3203:
        -: 3204:## jerry_value_is_undefined
        -: 3205:
        -: 3206:**Summary**
        -: 3207:
        -: 3208:Returns whether the given `jerry_value_t` is an undefined value.
        -: 3209:
        -: 3210:**Prototype**
        -: 3211:
        -: 3212:```c
        -: 3213:bool
        -: 3214:jerry_value_is_undefined (const jerry_value_t value)
        -: 3215:```
        -: 3216:
        -: 3217:- `value` - api value
        -: 3218:- return value
        -: 3219:  - true, if the given `jerry_value_t` is an undefined value
        -: 3220:  - false, otherwise
        -: 3221:
        -: 3222:**Example**
        -: 3223:
        -: 3224:```c
        -: 3225:{
        -: 3226:  jerry_value_t value;
        -: 3227:  ... // create or acquire value
        -: 3228:
        -: 3229:  if (jerry_value_is_undefined (value))
        -: 3230:  {
        -: 3231:    ...
        -: 3232:  }
        -: 3233:
        -: 3234:  jerry_release_value (value);
        -: 3235:}
        -: 3236:```
        -: 3237:
        -: 3238:**See also**
        -: 3239:
        -: 3240:- [jerry_release_value](#jerry_release_value)
        -: 3241:
        -: 3242:## jerry_value_get_type
        -: 3243:
        -: 3244:**Summary**
        -: 3245:
        -: 3246:Returns the JavaScript type
        -: 3247:for a given value as a [jerry_type_t](#jerry_type_t) enum value.
        -: 3248:
        -: 3249:This is a similar operation to the 'typeof' operator
        -: 3250:in the standard with an exception that the 'null'
        -: 3251:value has its own enum value.
        -: 3252:
        -: 3253:**Prototype**
        -: 3254:
        -: 3255:```c
        -: 3256:jerry_type_t
        -: 3257:jerry_value_get_type (const jerry_value_t value);
        -: 3258:```
        -: 3259:
        -: 3260:- `value` - JavaScript value to check.
        -: 3261:- return value
        -: 3262:  - One of the [jerry_type_t](#jerry_type_t) value.
        -: 3263:
        -: 3264:*New in version 2.0*.
        -: 3265:
        -: 3266:**Example**
        -: 3267:
        -: 3268:```c
        -: 3269:{
        -: 3270:  jerry_value_t number = jerry_create_number (3.3);
        -: 3271:
        -: 3272:  jerry_type_t type_info = jerry_value_get_type (number);
        -: 3273:
        -: 3274:  if (type_info == JERRY_TYPE_NUMBER)
        -: 3275:  {
        -: 3276:    /* ... */
        -: 3277:  }
        -: 3278:
        -: 3279:  jerry_release_value (number);
        -: 3280:}
        -: 3281:```
        -: 3282:
        -: 3283:**See also**
        -: 3284:
        -: 3285:- [jerry_type_t](#jerry_type_t)
        -: 3286:
        -: 3287:## jerry_object_get_type
        -: 3288:
        -: 3289:**Summary**
        -: 3290:
        -: 3291:Returns the **object** type
        -: 3292:for a given value as a [jerry_object_type_t](#jerry_object_type_t) enum value.
        -: 3293:
        -: 3294:Note: For non-object parameters `JERRY_OBJECT_TYPE_NONE` is returned.
        -: 3295:Note: the returned type can be checked for more detailed type information in the following cases:
        -: 3296:  - `JERRY_OBJECT_TYPE_CONTAINER`, *see also:* [jerry_container_get_type](#jerry_container_get_type)
        -: 3297:  - `JERRY_OBJECT_TYPE_FUNCTION`, *see also:* [jerry_function_get_type](#jerry_function_get_type)
        -: 3298:  - `JERRY_OBJECT_TYPE_ITERATOR`, *see also:* [jerry_iterator_get_type](#jerry_iterator_get_type)
        -: 3299:  - `JERRY_OBJECT_TYPE_TYPEDARRAY`, *see also:* [jerry_get_typedarray_type](#jerry_get_typedarray_type)
        -: 3300:
        -: 3301:**Prototype**
        -: 3302:
        -: 3303:```c
        -: 3304:jerry_object_type_t
        -: 3305:jerry_object_get_type (const jerry_value_t value);
        -: 3306:```
        -: 3307:
        -: 3308:- `value` - JavaScript value to check.
        -: 3309:- return value
        -: 3310:  - One of the [jerry_object_type_t](#jerry_object_type_t) value.
        -: 3311:
        -: 3312:*New in version 2.4*.
        -: 3313:
        -: 3314:**Example**
        -: 3315:
        -: 3316:```c
        -: 3317:{
        -: 3318:  jerry_value_t object = jerry_create_object ();
        -: 3319:
        -: 3320:  jerry_object_type_t object_type_info = jerry_object_get_type (object);
        -: 3321:
        -: 3322:  if (type_info == JERRY_OBJECT_TYPE_GENERIC)
        -: 3323:  {
        -: 3324:    /* ... */
        -: 3325:  }
        -: 3326:
        -: 3327:  jerry_release_value (object);
        -: 3328:}
        -: 3329:```
        -: 3330:
        -: 3331:**See also**
        -: 3332:
        -: 3333:- [jerry_object_type_t](#jerry_object_type_t)
        -: 3334:
        -: 3335:## jerry_function_get_type
        -: 3336:
        -: 3337:**Summary**
        -: 3338:
        -: 3339:Returns the **function** type
        -: 3340:for a given value as a [jerry_function_type_t](#jerry_function_type_t) enum value.
        -: 3341:
        -: 3342:**Prototype**
        -: 3343:
        -: 3344:```c
        -: 3345:jerry_function_type_t
        -: 3346:jerry_function_get_type (const jerry_value_t value);
        -: 3347:```
        -: 3348:
        -: 3349:- `value` - JavaScript value to check.
        -: 3350:- return value
        -: 3351:  - One of the [jerry_function_type_t](#jerry_function_type_t) value.
        -: 3352:
        -: 3353:Note: For non-function parameters `JERRY_FUNCTION_TYPE_NONE` is returned.
        -: 3354:
        -: 3355:*New in version 2.4*.
        -: 3356:
        -: 3357:**Example**
        -: 3358:
        -: 3359:```c
        -: 3360:{
        -: 3361:  const jerry_char_t script[] = "function f() {}; f";
        -: 3362:  jerry_value_t function_object = jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
        -: 3363:
        -: 3364:  jerry_function_type_t function_type_info = jerry_function_get_type (function_object);
        -: 3365:
        -: 3366:  if (type_info == JERRY_FUNCTION_TYPE_GENERIC)
        -: 3367:  {
        -: 3368:    /* ... */
        -: 3369:  }
        -: 3370:
        -: 3371:  jerry_release_value (function_object);
        -: 3372:}
        -: 3373:```
        -: 3374:
        -: 3375:**See also**
        -: 3376:
        -: 3377:- [jerry_function_type_t](#jerry_function_type_t)
        -: 3378:
        -: 3379:## jerry_iterator_get_type
        -: 3380:
        -: 3381:**Summary**
        -: 3382:
        -: 3383:Returns the **iterator** type
        -: 3384:for a given value as a [jerry_iterator_type_t](#jerry_iterator_type_t) enum value.
        -: 3385:
        -: 3386:**Prototype**
        -: 3387:
        -: 3388:```c
        -: 3389:jerry_iterator_type_t
        -: 3390:jerry_iterator_get_type (const jerry_value_t value);
        -: 3391:```
        -: 3392:
        -: 3393:- `value` - JavaScript value to check.
        -: 3394:- return value
        -: 3395:  - One of the [jerry_iterator_type_t](#jerry_iterator_type_t) value.
        -: 3396:
        -: 3397:Note: For non-iterator parameters `JERRY_ITERATOR_TYPE_NONE` is returned.
        -: 3398:
        -: 3399:*New in version 2.4*.
        -: 3400:
        -: 3401:**Example**
        -: 3402:
        -: 3403:```c
        -: 3404:{
        -: 3405:  const jerry_char_t script[] = "[1, 2, 3].values()";
        -: 3406:  jerry_value_t iterator = jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
        -: 3407:
        -: 3408:  jerry_iterator_type_t iterator_type_info = jerry_iterator_get_type (iterator);
        -: 3409:
        -: 3410:  if (type_info == JERRY_ITERATOR_TYPE_ARRAY)
        -: 3411:  {
        -: 3412:    /* ... */
        -: 3413:  }
        -: 3414:
        -: 3415:  jerry_release_value (iterator);
        -: 3416:}
        -: 3417:```
        -: 3418:
        -: 3419:**See also**
        -: 3420:
        -: 3421:- [jerry_iterator_type_t](#jerry_iterator_type_t)
        -: 3422:
        -: 3423:## jerry_is_feature_enabled
        -: 3424:
        -: 3425:**Summary**
        -: 3426:
        -: 3427:Returns whether the specified compile time feature is enabled.
        -: 3428:
        -: 3429:**Prototype**
        -: 3430:
        -: 3431:```c
        -: 3432:bool
        -: 3433:jerry_is_feature_enabled (const jerry_feature_t feature);
        -: 3434:```
        -: 3435:
        -: 3436:- `feature` - jerry feature
        -: 3437:- return value
        -: 3438:  - true, if the given `jerry_feature_t` is enabled
        -: 3439:  - false, otherwise
        -: 3440:
        -: 3441:*New in version 2.0*.
        -: 3442:
        -: 3443:**Example**
        -: 3444:
        -: 3445:```c
        -: 3446:{
        -: 3447:  /* ... */
        -: 3448:  jerry_feature_t feature = JERRY_FEATURE_SNAPSHOT_SAVE;
        -: 3449:
        -: 3450:  if (jerry_is_feature_enabled (feature))
        -: 3451:  {
        -: 3452:    /* ... */
        -: 3453:  }
        -: 3454:
        -: 3455:}
        -: 3456:```
        -: 3457:
        -: 3458:**See also**
        -: 3459:
        -: 3460:- [jerry_feature_t](#jerry_feature_t)
        -: 3461:
        -: 3462:
        -: 3463:# Binary operations
        -: 3464:
        -: 3465:## jerry_binary_operation
        -: 3466:
        -: 3467:**Summary**
        -: 3468:
        -: 3469:Perform binary operation on the given operands (==, ===, <, >, etc.).
        -: 3470:
        -: 3471:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3472:is no longer needed.
        -: 3473:
        -: 3474:**Prototype**
        -: 3475:
        -: 3476:```c
        -: 3477:jerry_value_t
        -: 3478:jerry_binary_operation (jerry_binary_operation_t op,
        -: 3479:                        const jerry_value_t lhs,
        -: 3480:                        const jerry_value_t rhs);
        -: 3481:```
        -: 3482:
        -: 3483:- `op` - binary operation
        -: 3484:- `lhs` - left-hand side operand
        -: 3485:- `rhs` - right-hand side operand
        -: 3486:- return value
        -: 3487:  - error, if argument has an error flag or operation is unsuccessful or unsupported
        -: 3488:  - true/false, the result of the binary operation on the given operands otherwise
        -: 3489:
        -: 3490:*New in version 2.0*.
        -: 3491:
        -: 3492:**Example - JERRY_BIN_OP_EQUAL**
        -: 3493:
        -: 3494:```c
        -: 3495:{
        -: 3496:  jerry_value_t value1;
        -: 3497:  jerry_value_t value2;
        -: 3498:  ... // create or acquire value
        -: 3499:  jerry_value_t result = jerry_binary_operation (JERRY_BIN_OP_EQUAL, value1, value2)
        -: 3500:
        -: 3501:  if (!jerry_value_is_error (result))
        -: 3502:  {
        -: 3503:    if (jerry_value_is_true (result))
        -: 3504:    {
        -: 3505:       // value1 and value2 are equal
        -: 3506:    }
        -: 3507:    else
        -: 3508:    {
        -: 3509:      // value1 and value2 are NOT equal
        -: 3510:    }
        -: 3511:  }
        -: 3512:  else
        -: 3513:  {
        -: 3514:    ... // handle error
        -: 3515:  }
        -: 3516:
        -: 3517:  jerry_release_value (value1);
        -: 3518:  jerry_release_value (value2);
        -: 3519:  jerry_release_value (result);
        -: 3520:}
        -: 3521:```
        -: 3522:
        -: 3523:**Example - JERRY_BIN_OP_INSTANCEOF**
        -: 3524:
        -: 3525:[doctest]: # ()
        -: 3526:
        -: 3527:```c
        -: 3528:#include "jerryscript.h"
        -: 3529:
        -: 3530:static jerry_value_t
    #####: 3531:my_constructor (const jerry_call_info_t *call_info_p,
        -: 3532:                const jerry_value_t argv[],
        -: 3533:                const jerry_length_t argc)
        -: 3534:{
    #####: 3535:  return jerry_create_undefined ();
        -: 3536:}
        -: 3537:
        -: 3538:int
    #####: 3539:main (void)
        -: 3540:{
    #####: 3541:  jerry_init (JERRY_INIT_EMPTY);
        -: 3542:
    #####: 3543:  jerry_value_t base_obj = jerry_create_object ();
    #####: 3544:  jerry_value_t constructor = jerry_create_external_function (my_constructor);
        -: 3545:
        -: 3546:  /* External functions does not have a prototype by default, so we need to create one */
    #####: 3547:  jerry_value_t prototype_str = jerry_create_string ((const jerry_char_t *) ("prototype"));
    #####: 3548:  jerry_release_value (jerry_set_property (constructor, prototype_str, base_obj));
    #####: 3549:  jerry_release_value (prototype_str);
        -: 3550:
        -: 3551:  /* Construct the instance. */
    #####: 3552:  jerry_value_t instance_val = jerry_construct_object (constructor, NULL, 0);
        -: 3553:
        -: 3554:  /* Call the API function of 'instanceof'. */
    #####: 3555:  jerry_value_t is_instance = jerry_binary_operation (JERRY_BIN_OP_INSTANCEOF,
        -: 3556:                                                      instance_val,
        -: 3557:                                                      constructor);
    #####: 3558:  if (!jerry_value_is_error (is_instance)
    #####: 3559:      && jerry_value_is_true (is_instance))
        -: 3560:  {
        -: 3561:    /* ... */
        -: 3562:  }
        -: 3563:
        -: 3564:  /* Free all of the jerry values and cleanup the engine. */
    #####: 3565:  jerry_release_value (base_obj);
    #####: 3566:  jerry_release_value (constructor);
    #####: 3567:  jerry_release_value (instance_val);
    #####: 3568:  jerry_release_value (is_instance);
        -: 3569:
    #####: 3570:  jerry_cleanup ();
        -: 3571:  return 0;
        -: 3572:}
        -: 3573:```
        -: 3574:
        -: 3575:**See also**
        -: 3576:
        -: 3577:- [jerry_binary_operation_t](#jerry_binary_operation_t)
        -: 3578:
        -: 3579:
        -: 3580:# Error manipulation functions
        -: 3581:
        -: 3582:*Changed in version 2.0*: The error handling and manipulation was modified and the old methods were replaced.
        -: 3583:
        -: 3584:## jerry_create_abort_from_value
        -: 3585:
        -: 3586:**Summary**
        -: 3587:
        -: 3588:Create (api) abort from a value.
        -: 3589:
        -: 3590:This function creates an API abort value from an API value. The second argument defines
        -: 3591:whether the input value must be released or not. If it is set to `true`,
        -: 3592:then a [`jerry_release_value`](#jerry_release_value) function will be called
        -: 3593:for the first argument, so the api value won't be available after the call of
        -: 3594:`jerry_create_abort_from_value`. The second argument should be false if both value
        -: 3595:and created abort value are needed.
        -: 3596:
        -: 3597:**Prototype**
        -: 3598:
        -: 3599:```c
        -: 3600:jerry_value_t
        -: 3601:jerry_create_abort_from_value (jerry_value_t value, bool release);
        -: 3602:```
        -: 3603:
        -: 3604:- `value` - api value
        -: 3605:- `release` - raw boolean, defines whether input value must be released
        -: 3606:- return value - abort (api) value
        -: 3607:
        -: 3608:*New in version 2.0*.
        -: 3609:
        -: 3610:**Example 1**
        -: 3611:
        -: 3612:```c
        -: 3613:{
        -: 3614:  jerry_value_t value;
        -: 3615:  ... // create or acquire value
        -: 3616:
        -: 3617:  jerry_value_t abort = jerry_create_abort_from_value (value, true);
        -: 3618:  // using the 'value' variable after release is invalid.
        -: 3619:
        -: 3620:  jerry_release_value (abort);
        -: 3621:}
        -: 3622:```
        -: 3623:
        -: 3624:**Example 2**
        -: 3625:
        -: 3626:```c
        -: 3627:{
        -: 3628:  jerry_value_t value;
        -: 3629:  ... // create or acquire value
        -: 3630:
        -: 3631:  jerry_value_t abort = jerry_create_abort_from_value (value, false);
        -: 3632:  // both 'abort' and 'value' can be used and must be released when they are no longer needed
        -: 3633:
        -: 3634:  jerry_release_value (abort);
        -: 3635:  jerry_release_value (value);
        -: 3636:}
        -: 3637:```
        -: 3638:
        -: 3639:**See also**
        -: 3640:
        -: 3641:- [jerry_value_t](#jerry_value_t)
        -: 3642:- [jerry_get_value_from_error](#jerry_get_value_from_error)
        -: 3643:- [jerry_create_error_from_value](#jerry_create_error_from_value)
        -: 3644:
        -: 3645:## jerry_create_error_from_value
        -: 3646:
        -: 3647:**Summary**
        -: 3648:
        -: 3649:Create (api) error from a value.
        -: 3650:
        -: 3651:This function creates an API error value from an API value. The second argument defines
        -: 3652:whether the input value must be released or not. If it is set to `true`,
        -: 3653:then a [`jerry_release_value`](#jerry_release_value) function will be called
        -: 3654:for the first argument, so the api value won't be available after the call of
        -: 3655:`jerry_create_error_from_value`. The second argument should be false if both value
        -: 3656:and created error value are needed.
        -: 3657:
        -: 3658:**Prototype**
        -: 3659:
        -: 3660:```c
        -: 3661:jerry_value_t
        -: 3662:jerry_create_error_from_value (jerry_value_t value, bool release);
        -: 3663:```
        -: 3664:
        -: 3665:- `value` - api value
        -: 3666:- `release` - raw boolean, defines whether input value must be released
        -: 3667:- return value - error (api) value
        -: 3668:
        -: 3669:*New in version 2.0*.
        -: 3670:
        -: 3671:**Example 1**
        -: 3672:
        -: 3673:```c
        -: 3674:{
        -: 3675:  jerry_value_t value;
        -: 3676:  ... // create or acquire value
        -: 3677:
        -: 3678:  jerry_value_t error = jerry_create_error_from_value (value, true);
        -: 3679:  // using the 'value' variable after release is invalid.
        -: 3680:
        -: 3681:
        -: 3682:  jerry_release_value (error);
        -: 3683:}
        -: 3684:```
        -: 3685:
        -: 3686:**Example 2**
        -: 3687:
        -: 3688:```c
        -: 3689:{
        -: 3690:  jerry_value_t value;
        -: 3691:  ... // create or acquire value
        -: 3692:
        -: 3693:  jerry_value_t error = jerry_create_error_from_value (value, false);
        -: 3694:  // both 'error' and 'value' can be used and must be released when they are no longer needed
        -: 3695:
        -: 3696:  jerry_release_value (error);
        -: 3697:  jerry_release_value (value);
        -: 3698:}
        -: 3699:```
        -: 3700:
        -: 3701:**See also**
        -: 3702:
        -: 3703:- [jerry_value_t](#jerry_value_t)
        -: 3704:- [jerry_get_value_from_error](#jerry_get_value_from_error)
        -: 3705:- [jerry_create_abort_from_value](#jerry_create_abort_from_value)
        -: 3706:
        -: 3707:## jerry_get_error_type
        -: 3708:
        -: 3709:**Summary**
        -: 3710:
        -: 3711:Returns the type of the Error object if possible.
        -: 3712:
        -: 3713:If a non-error object is used as the input for the function the method
        -: 3714:will return `JERRY_ERROR_NONE` indicating that the value was not
        -: 3715:an Error object. However it is still possible that the value contains
        -: 3716:error semantics. To correctly detect if a value have error use the
        -: 3717:[jerry_value_is_error](#jerry_value_is_error) method.
        -: 3718:
        -: 3719:**Prototype**
        -: 3720:
        -: 3721:```c
        -: 3722:jerry_error_t
        -: 3723:jerry_get_error_type (const jerry_value_t value);
        -: 3724:```
        -: 3725:
        -: 3726:- `value` - api value (possible error object)
        -: 3727:- return value
        -: 3728:  - JERRY_ERROR_NONE if the input is not an error object
        -: 3729:  - one of the [jerry_error_t](#jerry_error_t) value
        -: 3730:
        -: 3731:*New in version 2.0*.
        -: 3732:
        -: 3733:**Example**
        -: 3734:
        -: 3735:```c
        -: 3736:{
        -: 3737:  jerry_value_t error_obj = jerry_create_error (JERRY_ERROR_RANGE,
        -: 3738:                                                (const jerry_char_t *) "error msg");
        -: 3739:  jerry_error_t error_type = jerry_get_error_type (error_obj);
        -: 3740:
        -: 3741:  // error_type is now JERRY_ERROR_RANGE.
        -: 3742:
        -: 3743:  jerry_release_value (error_obj);
        -: 3744:}
        -: 3745:```
        -: 3746:
        -: 3747:**See also**
        -: 3748:
        -: 3749:- [jerry_create_error](#jerry_create_error)
        -: 3750:- [jerry_value_is_error](#jerry_value_is_error)
        -: 3751:
        -: 3752:## jerry_get_value_from_error
        -: 3753:
        -: 3754:**Summary**
        -: 3755:
        -: 3756:Get the value from an error.
        -: 3757:
        -: 3758:Many API functions cannot be called with an error value.
        -: 3759:This function extracts the API value from an error. The second argument defines
        -: 3760:whether the input error value must be released or not. If it is set to `true`,
        -: 3761:then a [`jerry_release_value`](#jerry_release_value) function will be called
        -: 3762:for the first argument, so the error value won't be available after the call of
        -: 3763:`jerry_get_value_from_error`. The second argument should be false if both error
        -: 3764:and its represented value are needed.
        -: 3765:
        -: 3766:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 3767:is no longer needed.
        -: 3768:
        -: 3769:**Prototype**
        -: 3770:
        -: 3771:```c
        -: 3772:jerry_value_t
        -: 3773:jerry_get_value_from_error (jerry_value_t value, bool release)
        -: 3774:```
        -: 3775:
        -: 3776:- `value` - error (api) value
        -: 3777:- `release` - raw boolean, defines whether input value must be released
        -: 3778:- return value - api value
        -: 3779:
        -: 3780:*New in version 2.0*.
        -: 3781:
        -: 3782:**Example 1**
        -: 3783:
        -: 3784:```c
        -: 3785:{
        -: 3786:  jerry_value_t value;
        -: 3787:  ... // create or acquire value
        -: 3788:
        -: 3789:  jerry_value_t error = jerry_create_error_from_value (value, true);
        -: 3790:  jerry_value_t value_from_error = jerry_get_value_from_error (error, true);
        -: 3791:  // using the 'error' variable after release is invalid.
        -: 3792:
        -: 3793:  jerry_release_value (value_from_error);
        -: 3794:}
        -: 3795:```
        -: 3796:
        -: 3797:**Example 2**
        -: 3798:
        -: 3799:```c
        -: 3800:{
        -: 3801:  jerry_value_t value;
        -: 3802:  ... // create or acquire value
        -: 3803:
        -: 3804:  jerry_value_t error = jerry_create_error_from_value (value, true);
        -: 3805:  jerry_value_t value_from_error = jerry_get_value_from_error (error, false);
        -: 3806:  // both 'error' and 'value_from_error' can be used and must be released when they are no longer needed
        -: 3807:
        -: 3808:  jerry_release_value (value_from_error);
        -: 3809:  jerry_release_value (error);
        -: 3810:}
        -: 3811:```
        -: 3812:
        -: 3813:**See also**
        -: 3814:
        -: 3815:- [jerry_value_t](#jerry_value_t)
        -: 3816:- [jerry_create_error_from_value](#jerry_create_error_from_value)
        -: 3817:- [jerry_create_abort_from_value](#jerry_create_abort_from_value)
        -: 3818:
        -: 3819:## jerry_set_error_object_created_callback
        -: 3820:
        -: 3821:**Summary**
        -: 3822:
        -: 3823:Set the decorator callback for newly created Error objects. The operation of the callback
        -: 3824:is described in [jerry_error_object_created_callback_t](#jerry_error_object_created_callback_t).
        -: 3825:
        -: 3826:**Prototype**
        -: 3827:
        -: 3828:```c
        -: 3829:void jerry_set_error_object_created_callback (jerry_error_object_created_callback_t callback, void *user_p);
        -: 3830:```
        -: 3831:
        -: 3832:- `callback` - callback function, the previously set value is overwritten, and setting NULL
        -: 3833:               disables the operation
        -: 3834:- `user_p` - pointer passed to the callback function, can be NULL
        -: 3835:
        -: 3836:*New in version 2.4*.
        -: 3837:
        -: 3838:**Example**
        -: 3839:
        -: 3840:```c
        -: 3841:static void
        -: 3842:error_object_created_callback (const jerry_value_t error_object) /**< new error object */
        -: 3843:                               void *user_p) /**< user pointer */
        -: 3844:{
        -: 3845:  (void) error_object;
        -: 3846:  (void) user_p;
        -: 3847:  printf ("Notification: a new error is created\n");
        -: 3848:} /* error_object_created_callback */
        -: 3849:
        -: 3850:void main(void)
        -: 3851:{
        -: 3852:  jerry_init (JERRY_INIT_EMPTY);
        -: 3853:
        -: 3854:  jerry_set_error_object_created_callback (error_object_created_callback, NULL);
        -: 3855:
        -: 3856:  jerry_release_value (jerry_create_error (JERRY_ERROR_COMMON,
        -: 3857:                                           (const jerry_char_t *) "Message"));
        -: 3858:
        -: 3859:  jerry_cleanup ();
        -: 3860:} /* main */
        -: 3861:```
        -: 3862:
        -: 3863:**See also**
        -: 3864:
        -: 3865:- [jerry_error_object_created_callback_t](#jerry_error_object_created_callback_t)
        -: 3866:
        -: 3867:## jerry_set_vm_throw_callback
        -: 3868:
        -: 3869:**Summary**
        -: 3870:
        -: 3871:The callback passed to this function is called when an error is thrown
        -: 3872:in ECMAScript code. The callback is not called again until the value is
        -: 3873:caught. See: [jerry_vm_throw_callback_t](#jerry_vm_throw_callback_t).
        -: 3874:
        -: 3875:*Notes*:
        -: 3876:- This API depends on a build option (`JERRY_VM_THROW`) and can be checked
        -: 3877:  in runtime with the `JERRY_FEATURE_VM_THROW` feature enum value,
        -: 3878:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3879:
        -: 3880:**Prototype**
        -: 3881:
        -: 3882:```c
        -: 3883:void
        -: 3884:jerry_set_vm_throw_callback (jerry_vm_throw_callback_t throw_cb,
        -: 3885:                             void *user_p);
        -: 3886:```
        -: 3887:
        -: 3888:- `throw_cb` - callback which is called on throws (passing NULL disables this feature)
        -: 3889:- `user_p` - user pointer passed to the `throw_cb` function
        -: 3890:
        -: 3891:*New in version [[NEXT_RELEASE]]*.
        -: 3892:
        -: 3893:**Example**
        -: 3894:
        -: 3895:[doctest]: # (test="compile")
        -: 3896:
        -: 3897:```c
        -: 3898:#include "jerryscript.h"
        -: 3899:
        -: 3900:static void
    #####: 3901:vm_throw_callback (const jerry_value_t error_value, /**< captured error */
        -: 3902:                   void *user_p) /**< user pointer */
        -: 3903:{
        -: 3904:  (void) error_value;
        -: 3905:
        -: 3906:  /* Counts the number of throws. */
    #####: 3907:  int *counter_p = (int *) user_p;
    #####: 3908:  (*counter_p)++;
    #####: 3909:}
        -: 3910:
        -: 3911:int
    #####: 3912:main (void)
        -: 3913:{
    #####: 3914:  jerry_init (JERRY_INIT_EMPTY);
        -: 3915:
    #####: 3916:  int counter = 0;
    #####: 3917:  jerry_set_vm_throw_callback (vm_throw_callback, &counter);
        -: 3918:
    #####: 3919:  const jerry_char_t script[] = "try { throw new Error('1') } catch (e) { throw new Error('2') }";
        -: 3920:
    #####: 3921:  jerry_release_value (jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS));
        -: 3922:
        -: 3923:  /* The counter contains 2. */
        -: 3924:
    #####: 3925:  jerry_cleanup ();
        -: 3926:  return 0;
        -: 3927:}
        -: 3928:```
        -: 3929:
        -: 3930:**See also**
        -: 3931:
        -: 3932:- [jerry_vm_throw_callback_t](#jerry_vm_throw_callback_t)
        -: 3933:- [jerry_error_is_throw_captured](#jerry_error_is_throw_captured)
        -: 3934:- [jerry_error_set_throw_capture](#jerry_error_set_throw_capture)
        -: 3935:
        -: 3936:## jerry_error_is_throw_captured
        -: 3937:
        -: 3938:**Summary**
        -: 3939:
        -: 3940:Checks whether the callback set by [jerry_set_vm_throw_callback](#jerry_set_vm_throw_callback)
        -: 3941:captured the error.
        -: 3942:
        -: 3943:*Notes*:
        -: 3944:- This API depends on a build option (`JERRY_VM_THROW`) and can be checked
        -: 3945:  in runtime with the `JERRY_FEATURE_VM_THROW` feature enum value,
        -: 3946:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 3947:
        -: 3948:**Prototype**
        -: 3949:
        -: 3950:```c
        -: 3951:bool jerry_error_is_throw_captured (jerry_value_t value);
        -: 3952:```
        -: 3953:
        -: 3954:- `value` - api value (should be an error reference)
        -: 3955:- return value
        -: 3956:  - true, if the vm throw callback captured the error
        -: 3957:  - false, otherwise
        -: 3958:
        -: 3959:*New in version [[NEXT_RELEASE]]*.
        -: 3960:
        -: 3961:**Example**
        -: 3962:
        -: 3963:[doctest]: # (test="compile")
        -: 3964:
        -: 3965:```c
        -: 3966:#include "jerryscript.h"
        -: 3967:
        -: 3968:static void
    #####: 3969:vm_throw_callback (const jerry_value_t error_value, /**< captured error */
        -: 3970:                   void *user_p) /**< user pointer */
        -: 3971:{
        -: 3972:  (void) error_value;
        -: 3973:  (void) user_p;
    #####: 3974:}
        -: 3975:
        -: 3976:int
    #####: 3977:main (void)
        -: 3978:{
    #####: 3979:  jerry_init (JERRY_INIT_EMPTY);
        -: 3980:
    #####: 3981:  int counter = 0;
    #####: 3982:  jerry_set_vm_throw_callback (vm_throw_callback, &counter);
        -: 3983:
    #####: 3984:  const jerry_char_t script[] = "throw new Error()";
    #####: 3985:  jerry_value_t result_value = jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
        -: 3986:
    #####: 3987:  if (jerry_error_is_throw_captured (result_value))
        -: 3988:  {
        -: 3989:    /* Code enters here, because the vm_throw_callback function is called. */
        -: 3990:  }
        -: 3991:
    #####: 3992:  jerry_release_value (result_value);
        -: 3993:
    #####: 3994:  jerry_cleanup ();
        -: 3995:  return 0;
        -: 3996:}
        -: 3997:```
        -: 3998:
        -: 3999:**See also**
        -: 4000:
        -: 4001:- [jerry_set_vm_throw_callback](#jerry_set_vm_throw_callback)
        -: 4002:- [jerry_error_set_throw_capture](#jerry_error_set_throw_capture)
        -: 4003:
        -: 4004:## jerry_error_set_throw_capture
        -: 4005:
        -: 4006:**Summary**
        -: 4007:
        -: 4008:Sets whether the callback set by [jerry_set_vm_throw_callback](#jerry_set_vm_throw_callback)
        -: 4009:should capture the error or not.
        -: 4010:
        -: 4011:*Notes*:
        -: 4012:- This API depends on a build option (`JERRY_VM_THROW`) and can be checked
        -: 4013:  in runtime with the `JERRY_FEATURE_VM_THROW` feature enum value,
        -: 4014:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 4015:
        -: 4016:**Prototype**
        -: 4017:
        -: 4018:```c
        -: 4019:void jerry_error_set_throw_capture (jerry_value_t value, bool should_capture);
        -: 4020:```
        -: 4021:
        -: 4022:- `value` - api value (should be an error reference)
        -: 4023:- `should_capture` - callback should capture this error
        -: 4024:
        -: 4025:*New in version [[NEXT_RELEASE]]*.
        -: 4026:
        -: 4027:**Example**
        -: 4028:
        -: 4029:[doctest]: # (test="compile")
        -: 4030:
        -: 4031:```c
        -: 4032:#include "jerryscript.h"
        -: 4033:
        -: 4034:static void
    #####: 4035:vm_throw_callback (const jerry_value_t error_value, /**< captured error */
        -: 4036:                   void *user_p) /**< user pointer */
        -: 4037:{
        -: 4038:  (void) error_value;
        -: 4039:  (void) user_p;
    #####: 4040:}
        -: 4041:
        -: 4042:static jerry_value_t
    #####: 4043:throw_exception (const jerry_call_info_t *call_info_p, /**< call info */
        -: 4044:                 const jerry_value_t argv[], /**< argument list */
        -: 4045:                 const jerry_length_t argc) /**< argument count */
        -: 4046:{
        -: 4047:  (void) call_info_p;
        -: 4048:  (void) argv;
        -: 4049:  (void) argc;
        -: 4050:
    #####: 4051:  jerry_value_t result_value = jerry_create_error (JERRY_ERROR_COMMON, (const jerry_char_t *) "Error!");
        -: 4052:
        -: 4053:  /* Ignore calling the vm_throw_callback function. */
    #####: 4054:  jerry_error_set_throw_capture (result_value, false);
    #####: 4055:  return result_value;
        -: 4056:}
        -: 4057:
        -: 4058:int
    #####: 4059:main (void)
        -: 4060:{
    #####: 4061:  jerry_init (JERRY_INIT_EMPTY);
        -: 4062:
    #####: 4063:  int counter = 0;
    #####: 4064:  jerry_set_vm_throw_callback (vm_throw_callback, &counter);
        -: 4065:
    #####: 4066:  jerry_value_t global_object_value = jerry_get_global_object ();
    #####: 4067:  jerry_value_t function_value = jerry_create_external_function (throw_exception);
    #####: 4068:  jerry_value_t function_name_value = jerry_create_string ((const jerry_char_t *) "throw_exception");
        -: 4069:
    #####: 4070:  jerry_release_value (jerry_set_property (global_object_value, function_name_value, function_value));
    #####: 4071:  jerry_release_value (function_name_value);
    #####: 4072:  jerry_release_value (function_value);
    #####: 4073:  jerry_release_value (global_object_value);
        -: 4074:
    #####: 4075:  const jerry_char_t script[] = "throw_exception()";
    #####: 4076:  jerry_release_value (jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS));
        -: 4077:
    #####: 4078:  jerry_cleanup ();
        -: 4079:  return 0;
        -: 4080:}
        -: 4081:```
        -: 4082:
        -: 4083:**See also**
        -: 4084:
        -: 4085:- [jerry_set_vm_throw_callback](#jerry_set_vm_throw_callback)
        -: 4086:- [jerry_error_is_throw_captured](#jerry_error_is_throw_captured)
        -: 4087:
        -: 4088:
        -: 4089:# Getter functions of 'jerry_value_t'
        -: 4090:
        -: 4091:Get raw data from API values.
        -: 4092:
        -: 4093:## jerry_get_number_value
        -: 4094:
        -: 4095:**Summary**
        -: 4096:
        -: 4097:Gets the number value of the given `jerry_value_t` parameter as a raw double.
        -: 4098:
        -: 4099:If the argument passed is not a number `0.0` will be returned.
        -: 4100:
        -: 4101:**Prototype**
        -: 4102:
        -: 4103:```c
        -: 4104:double
        -: 4105:jerry_get_number_value (const jerry_value_t value);
        -: 4106:```
        -: 4107:
        -: 4108:- `value` - api value
        -: 4109:- return value
        -: 4110:  - the number value of the given `jerry_value_t` parameter as a raw double.
        -: 4111:  - `0.0` if the api value passed is not a number.
        -: 4112:
        -: 4113:**Example**
        -: 4114:
        -: 4115:```c
        -: 4116:{
        -: 4117:  jerry_value_t value;
        -: 4118:  ... // create or acquire value
        -: 4119:
        -: 4120:  if (jerry_value_is_number (value))
        -: 4121:  {
        -: 4122:    double raw_value = jerry_get_number_value (value);
        -: 4123:
        -: 4124:    ... // usage of raw value
        -: 4125:
        -: 4126:  }
        -: 4127:
        -: 4128:  jerry_release_value (value);
        -: 4129:}
        -: 4130:```
        -: 4131:
        -: 4132:**See also**
        -: 4133:
        -: 4134:- [jerry_value_is_number](#jerry_value_is_number)
        -: 4135:- [jerry_release_value](#jerry_release_value)
        -: 4136:
        -: 4137:
        -: 4138:# Functions for string values
        -: 4139:
        -: 4140:## jerry_get_string_size
        -: 4141:
        -: 4142:**Summary**
        -: 4143:
        -: 4144:Get the size of a string. Returns zero, if the value parameter is not a string.
        -: 4145:This is effectively the number of bytes required to store the string's characters.
        -: 4146:
        -: 4147:**Prototype**
        -: 4148:
        -: 4149:```c
        -: 4150:jerry_size_t
        -: 4151:jerry_get_string_size (const jerry_value_t value);
        -: 4152:```
        -: 4153:- `value` - api value
        -: 4154:- return value - number of bytes in the buffer needed to represent the string.
        -: 4155:
        -: 4156:**Example**
        -: 4157:
        -: 4158:```c
        -: 4159:{
        -: 4160:  const jerry_char_t char_array[] = "a string";
        -: 4161:  jerry_value_t string = jerry_create_string (char_array);
        -: 4162:
        -: 4163:  jerry_size_t string_size = jerry_get_string_size (string);
        -: 4164:
        -: 4165:  ... // usage of string_size
        -: 4166:
        -: 4167:  jerry_release_value (string);
        -: 4168:}
        -: 4169:```
        -: 4170:
        -: 4171:**See also**
        -: 4172:
        -: 4173:- [jerry_create_string](#jerry_create_string)
        -: 4174:- [jerry_get_string_length](#jerry_get_string_length)
        -: 4175:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 4176:
        -: 4177:
        -: 4178:## jerry_get_utf8_string_size
        -: 4179:
        -: 4180:**Summary**
        -: 4181:
        -: 4182:Get the size of an utf8-encoded string. Returns zero, if the value parameter is not a string.
        -: 4183:This is effectively the number of bytes required to store the utf8 encoded string's characters.
        -: 4184:
        -: 4185:*Note*: The difference from [jerry_get_string_size](#jerry_get_string_size) is that it returns with utf-8 string size
        -: 4186:instead of the cesu-8 string size.
        -: 4187:
        -: 4188:**Prototype**
        -: 4189:
        -: 4190:```c
        -: 4191:jerry_size_t
        -: 4192:jerry_get_utf8_string_size (const jerry_value_t value);
        -: 4193:```
        -: 4194:- `value` - api value
        -: 4195:- return value - number of bytes in the buffer needed to represent the utf8-encoded string.
        -: 4196:
        -: 4197:*New in version 2.0*.
        -: 4198:
        -: 4199:**Example**
        -: 4200:
        -: 4201:```c
        -: 4202:{
        -: 4203:  const jerry_char_t char_array[] = "a string";
        -: 4204:  jerry_value_t string = jerry_create_string (char_array);
        -: 4205:
        -: 4206:  jerry_size_t string_size = jerry_get_utf8_string_size (string);
        -: 4207:
        -: 4208:  ... // usage of string_size
        -: 4209:
        -: 4210:  jerry_release_value (string);
        -: 4211:}
        -: 4212:```
        -: 4213:
        -: 4214:**See also**
        -: 4215:
        -: 4216:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 4217:- [jerry_get_utf8_string_length](#jerry_get_utf8_string_length)
        -: 4218:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 4219:
        -: 4220:
        -: 4221:## jerry_get_string_length
        -: 4222:
        -: 4223:**Summary**
        -: 4224:
        -: 4225:Get the length of a string. Returns zero, if the value parameter is not a string.
        -: 4226:
        -: 4227:*Notes:*
        -: 4228:- The difference from [jerry_get_string_size](#jerry_get_string_size) is that it
        -: 4229:  returns the number of bytes used for the string.
        -: 4230:- This is **not** the number of bytes required to store the string.
        -: 4231:
        -: 4232:**Prototype**
        -: 4233:
        -: 4234:```c
        -: 4235:jerry_length_t
        -: 4236:jerry_get_string_length (const jerry_value_t value);
        -: 4237:```
        -: 4238:
        -: 4239:- `value` - api value
        -: 4240:- return value - number of characters in the string
        -: 4241:
        -: 4242:**Example**
        -: 4243:
        -: 4244:```c
        -: 4245:{
        -: 4246:  const jerry_char_t char_array[] = "a string";
        -: 4247:  jerry_value_t string = jerry_create_string (char_array);
        -: 4248:
        -: 4249:  jerry_length_t string_length = jerry_get_string_length (string);
        -: 4250:
        -: 4251:  ... // usage of string_length
        -: 4252:
        -: 4253:  jerry_release_value (string);
        -: 4254:}
        -: 4255:```
        -: 4256:
        -: 4257:**See also**
        -: 4258:
        -: 4259:- [jerry_create_string](#jerry_create_string)
        -: 4260:- [jerry_get_string_size](#jerry_get_string_size)
        -: 4261:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 4262:
        -: 4263:
        -: 4264:## jerry_get_utf8_string_length
        -: 4265:
        -: 4266:**Summary**
        -: 4267:
        -: 4268:Get the length of an UTF-8 encoded string. Returns zero, if the value parameter is not a string.
        -: 4269:
        -: 4270:*Notes*:
        -: 4271:- The difference from [jerry_get_string_length](#jerry_get_string_length) is that it
        -: 4272:  returns with utf-8 string length instead of the cesu-8 string length.
        -: 4273:- This is **not** the number of bytes required to store the string.
        -: 4274:
        -: 4275:**Prototype**
        -: 4276:
        -: 4277:```c
        -: 4278:jerry_length_t
        -: 4279:jerry_get_utf8_string_length (const jerry_value_t value);
        -: 4280:```
        -: 4281:
        -: 4282:- `value` - input string value
        -: 4283:- return value - number of characters in the string
        -: 4284:
        -: 4285:*New in version 2.0*.
        -: 4286:
        -: 4287:**Example**
        -: 4288:
        -: 4289:```c
        -: 4290:{
        -: 4291:  const jerry_char_t char_array[] = "a string";
        -: 4292:  jerry_value_t string = jerry_create_string_from_utf8 (char_array);
        -: 4293:
        -: 4294:  jerry_length_t string_length = jerry_get_utf8_string_length (string);
        -: 4295:
        -: 4296:  ... // usage of string_length
        -: 4297:
        -: 4298:  jerry_release_value (string);
        -: 4299:}
        -: 4300:```
        -: 4301:
        -: 4302:**See also**
        -: 4303:
        -: 4304:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 4305:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -: 4306:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 4307:
        -: 4308:
        -: 4309:## jerry_string_to_char_buffer
        -: 4310:
        -: 4311:**Summary**
        -: 4312:
        -: 4313:Copy the characters of a string into a specified cesu-8 buffer.
        -: 4314:The '\0' character could occur in the character buffer. Returns 0,
        -: 4315:if the value parameter is not a string or the buffer is not large
        -: 4316:enough for the whole string.
        -: 4317:
        -: 4318:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 4319:the number of valid bytes in the output buffer.
        -: 4320:
        -: 4321:*Note*: If the size of the string in jerry value is larger than the size of the
        -: 4322:target buffer, the copy will fail. To copy a substring the
        -: 4323:[jerry_substring_to_char_buffer](#jerry_substring_to_char_buffer) API function
        -: 4324:is recommended instead.
        -: 4325:
        -: 4326:
        -: 4327:**Prototype**
        -: 4328:
        -: 4329:```c
        -: 4330:jerry_size_t
        -: 4331:jerry_string_to_char_buffer (const jerry_value_t value,
        -: 4332:                             jerry_char_t *buffer_p,
        -: 4333:                             jerry_size_t buffer_size);
        -: 4334:```
        -: 4335:
        -: 4336:- `value` - input string value
        -: 4337:- `buffer_p` - pointer to output buffer
        -: 4338:- `buffer_size` - size of the buffer
        -: 4339:- return value - number of bytes, actually copied to the buffer
        -: 4340:
        -: 4341:**Example**
        -: 4342:
        -: 4343:[doctest]: # ()
        -: 4344:
        -: 4345:```c
        -: 4346:#include <stdio.h>
        -: 4347:#include <stdlib.h>
        -: 4348:#include "jerryscript.h"
        -: 4349:
        -: 4350:int
    #####: 4351:main (void)
        -: 4352:{
    #####: 4353:  jerry_init (JERRY_INIT_EMPTY);
        -: 4354:
        -: 4355:  jerry_value_t value;
        -: 4356:  // create or acquire value
    #####: 4357:  value = jerry_create_string ((const jerry_char_t *) "Demo string");
        -: 4358:
        -: 4359:  // Read the string into a byte buffer.
    #####: 4360:  jerry_size_t string_size = jerry_get_string_size (value);
    #####: 4361:  jerry_char_t *string_buffer_p = (jerry_char_t *) malloc (sizeof (jerry_char_t) * (string_size + 1));
        -: 4362:
    #####: 4363:  jerry_size_t copied_bytes = jerry_string_to_char_buffer (value, string_buffer_p, string_size);
    #####: 4364:  string_buffer_p[copied_bytes] = '\0';
        -: 4365:
    #####: 4366:  jerry_release_value (value);
        -: 4367:
    #####: 4368:  jerry_cleanup ();
        -: 4369:
    #####: 4370:  printf ("Test string: %s\n", string_buffer_p);
    #####: 4371:  free (string_buffer_p);
        -: 4372:
        -: 4373:  return 0;
        -: 4374:}
        -: 4375:```
        -: 4376:
        -: 4377:**See also**
        -: 4378:
        -: 4379:- [jerry_create_string](#jerry_create_string)
        -: 4380:- [jerry_get_string_size](#jerry_get_string_size)
        -: 4381:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 4382:- [jerry_substring_to_char_buffer](#jerry_substring_to_char_buffer)
        -: 4383:
        -: 4384:
        -: 4385:## jerry_string_to_utf8_char_buffer
        -: 4386:
        -: 4387:**Summary**
        -: 4388:
        -: 4389:Copy the characters of a string into a specified utf-8 buffer.
        -: 4390:The '\0' character could occur in character buffer. Returns 0,
        -: 4391:if the value parameter is not a string or the buffer is not
        -: 4392:large enough for the whole string.
        -: 4393:
        -: 4394:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 4395:the number of valid bytes in the output buffer.
        -: 4396:
        -: 4397:*Note*: If the size of the string in jerry value is larger than the size of the
        -: 4398:target buffer, the copy will fail. To copy a substring the
        -: 4399:[jerry_substring_to_utf8_char_buffer](#jerry_substring_to_utf8_char_buffer)
        -: 4400:API function is recommended instead.
        -: 4401:
        -: 4402:**Prototype**
        -: 4403:
        -: 4404:```c
        -: 4405:jerry_size_t
        -: 4406:jerry_string_to_utf8_char_buffer (const jerry_value_t value,
        -: 4407:                                  jerry_char_t *buffer_p,
        -: 4408:                                  jerry_size_t buffer_size);
        -: 4409:```
        -: 4410:
        -: 4411:- `value` - input string value
        -: 4412:- `buffer_p` - pointer to output buffer
        -: 4413:- `buffer_size` - size of the buffer
        -: 4414:- return value - number of bytes, actually copied to the buffer
        -: 4415:
        -: 4416:*New in version 2.0*.
        -: 4417:
        -: 4418:**Example**
        -: 4419:
        -: 4420:```c
        -: 4421:{
        -: 4422:  jerry_value_t value;
        -: 4423:  ... // create or acquire value
        -: 4424:
        -: 4425:  jerry_size_t req_sz = jerry_get_utf8_string_size (value);
        -: 4426:  jerry_char_t str_buf_p[req_sz];
        -: 4427:
        -: 4428:  jerry_size_t bytes_copied = jerry_string_to_utf8_char_buffer (value, str_buf_p, req_sz);
        -: 4429:
        -: 4430:  jerry_release_value (value);
        -: 4431:}
        -: 4432:```
        -: 4433:
        -: 4434:**See also**
        -: 4435:
        -: 4436:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 4437:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -: 4438:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 4439:- [jerry_substring_to_utf8_char_buffer](#jerry_substring_to_utf8_char_buffer)
        -: 4440:
        -: 4441:
        -: 4442:## jerry_substring_to_char_buffer
        -: 4443:
        -: 4444:**Summary**
        -: 4445:
        -: 4446:Copy the characters of a cesu-8 encoded substring into a specified buffer.
        -: 4447:The '\0' character could occur in character buffer. Returns 0, if the value
        -: 4448:parameter is not a string. It will extract the substring between the
        -: 4449:specified start position and the end position (or the end of the string,
        -: 4450:whichever comes first).
        -: 4451:
        -: 4452:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 4453:the number of valid bytes in the output buffer.
        -: 4454:
        -: 4455:**Prototype**
        -: 4456:
        -: 4457:```c
        -: 4458:jerry_size_t
        -: 4459:jerry_substring_to_char_buffer (const jerry_value_t value,
        -: 4460:                                jerry_length_t start_pos,
        -: 4461:                                jerry_length_t end_pos,
        -: 4462:                                jerry_char_t *buffer_p,
        -: 4463:                                jerry_size_t buffer_size);
        -: 4464:```
        -: 4465:
        -: 4466:- `value` - input string value
        -: 4467:- `start_pos` - position of the first character
        -: 4468:- `end_pos` - position of the last character
        -: 4469:- `buffer_p` - pointer to output buffer
        -: 4470:- `buffer_size` - size of the buffer
        -: 4471:- return value - number of bytes, actually copied to the buffer
        -: 4472:
        -: 4473:*New in version 2.0*.
        -: 4474:
        -: 4475:**Example**
        -: 4476:
        -: 4477:```c
        -: 4478:{
        -: 4479:  jerry_value_t value;
        -: 4480:  ... // create or acquire value
        -: 4481:
        -: 4482:  jerry_size_t req_sz = jerry_get_string_size (value);
        -: 4483:  jerry_char_t str_buf_p[req_sz];
        -: 4484:  jerry_length_t start_pos = 0;
        -: 4485:  jerry_length_t end_pos = jerry_get_string_length (value);
        -: 4486:
        -: 4487:  jerry_substring_to_char_buffer (value, start_pos, end_pos, str_buf_p, req_sz);
        -: 4488:
        -: 4489:  jerry_release_value (value);
        -: 4490:}
        -: 4491:```
        -: 4492:
        -: 4493:**See also**
        -: 4494:
        -: 4495:- [jerry_create_string](#jerry_create_string)
        -: 4496:- [jerry_get_string_size](#jerry_get_string_size)
        -: 4497:- [jerry_get_string_length](#jerry_get_string_length)
        -: 4498:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 4499:
        -: 4500:
        -: 4501:## jerry_substring_to_utf8_char_buffer
        -: 4502:
        -: 4503:**Summary**
        -: 4504:
        -: 4505:Copy the characters of an utf-8 encoded substring into a specified buffer.
        -: 4506:The '\0' character could occur in character buffer. Returns 0, if the value
        -: 4507:parameter is not a string. It will extract the substring between the specified
        -: 4508:start position and the end position (or the end of the string, whichever
        -: 4509:comes first).
        -: 4510:
        -: 4511:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 4512:the number of valid bytes in the output buffer.
        -: 4513:
        -: 4514:**Prototype**
        -: 4515:
        -: 4516:```c
        -: 4517:jerry_size_t
        -: 4518:jerry_substring_to_utf8_char_buffer (const jerry_value_t value,
        -: 4519:                                     jerry_length_t start_pos,
        -: 4520:                                     jerry_length_t end_pos,
        -: 4521:                                     jerry_char_t *buffer_p,
        -: 4522:                                     jerry_size_t buffer_size);
        -: 4523:```
        -: 4524:
        -: 4525:- `value` - input string value
        -: 4526:- `start_pos` - position of the first character
        -: 4527:- `end_pos` - position of the last character
        -: 4528:- `buffer_p` - pointer to output buffer
        -: 4529:- `buffer_size` - size of the buffer
        -: 4530:- return value - number of bytes, actually copied to the buffer
        -: 4531:
        -: 4532:*New in version 2.0*.
        -: 4533:
        -: 4534:**Example**
        -: 4535:
        -: 4536:```c
        -: 4537:{
        -: 4538:  jerry_value_t value;
        -: 4539:  ... // create or acquire value
        -: 4540:
        -: 4541:  jerry_size_t req_sz = jerry_get_utf8_string_size (value);
        -: 4542:  jerry_char_t str_buf_p[req_sz];
        -: 4543:  jerry_length_t start_pos = 0;
        -: 4544:  jerry_length_t end_pos = jerry_get_utf8_string_length (value);
        -: 4545:
        -: 4546:  jerry_substring_to_utf8_char_buffer (value, start_pos, end_pos, str_buf_p, req_sz);
        -: 4547:
        -: 4548:  jerry_release_value (value);
        -: 4549:}
        -: 4550:```
        -: 4551:
        -: 4552:**See also**
        -: 4553:
        -: 4554:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 4555:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -: 4556:- [jerry_get_utf8_string_length](#jerry_get_utf8_string_length)
        -: 4557:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 4558:
        -: 4559:
        -: 4560:# jerry_string_set_external_free_callback
        -: 4561:
        -: 4562:**Summary**
        -: 4563:
        -: 4564:Sets the global callback which is called when the string data of an external
        -: 4565:string is no longer used. It is recommended to set this function before the
        -: 4566:first external string is created.
        -: 4567:
        -: 4568:*Note*:
        -: 4569:  - When the callback is NULL, no function is called when an external string is freed.
        -: 4570:  - In some cases (e.g. when the string is also a magic string registered by
        -: 4571:    [jerry_register_magic_strings](#jerry_register_magic_strings)), the callback
        -: 4572:    is called when the string is created, not when it is released.
        -: 4573:
        -: 4574:**Prototype**
        -: 4575:
        -: 4576:```c
        -: 4577:void jerry_string_set_external_free_callback (jerry_external_string_free_callback_t callback_p);
        -: 4578:```
        -: 4579:
        -: 4580:- `callback_p` - callback which is called when an external string is freed.
        -: 4581:
        -: 4582:*New in version [[NEXT_RELEASE]]*.
        -: 4583:
        -: 4584:**Example**
        -: 4585:
        -: 4586:[doctest]: # ()
        -: 4587:
        -: 4588:```c
        -: 4589:#include "jerryscript.h"
        -: 4590:#include <stdio.h>
        -: 4591:
        -: 4592:static void
    #####: 4593:external_string_free_callback (jerry_char_t *string_p, /**< string pointer */
        -: 4594:                               jerry_size_t string_size, /**< size of the string */
        -: 4595:                               void *user_p) /**< user pointer */
        -: 4596:{
    #####: 4597:  printf ("External string is freed!\n");
    #####: 4598:}
        -: 4599:
        -: 4600:int
    #####: 4601:main (void)
        -: 4602:{
    #####: 4603:  jerry_init (JERRY_INIT_EMPTY);
        -: 4604:
    #####: 4605:  jerry_string_set_external_free_callback (external_string_free_callback);
        -: 4606:
    #####: 4607:  const char *string_p = "This is a long external string, should not be duplicated!";
    #####: 4608:  jerry_value_t external_string = jerry_create_external_string ((jerry_char_t *) string_p, NULL);
        -: 4609:  /* The external_string_free_callback is called. */
    #####: 4610:  jerry_release_value (external_string);
        -: 4611:
    #####: 4612:  jerry_cleanup ();
        -: 4613:  return 0;
        -: 4614:}
        -: 4615:```
        -: 4616:
        -: 4617:**See also**
        -: 4618:
        -: 4619:- [jerry_external_string_free_callback_t](#jerry_external_string_free_callback_t)
        -: 4620:- [jerry_string_get_external_user_pointer](#jerry_string_get_external_user_pointer)
        -: 4621:- [jerry_create_external_string](#jerry_create_external_string)
        -: 4622:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -: 4623:
        -: 4624:
        -: 4625:# jerry_string_get_external_user_pointer
        -: 4626:
        -: 4627:**Summary**
        -: 4628:
        -: 4629:Returns the user pointer assigned to an external string.
        -: 4630:
        -: 4631:*Note*:
        -: 4632:  - In some cases (e.g. when the string is also a magic string registered by
        -: 4633:    [jerry_register_magic_strings](#jerry_register_magic_strings)), the
        -: 4634:    string is a normal string without a user pointer even if it is created
        -: 4635:    by [jerry_create_external_string](#jerry_create_external_string).
        -: 4636:
        -: 4637:**Prototype**
        -: 4638:
        -: 4639:```c
        -: 4640:void *jerry_string_get_external_user_pointer (const jerry_value_t value,
        -: 4641:                                              bool *is_external);
        -: 4642:```
        -: 4643:
        -: 4644:- `value` - string value.
        -: 4645:- `is_external` - when `is_external` is non-NULL, the referenced boolean value is set
        -: 4646:                  to true, if `value` is an external string, and set to false otherwise
        -: 4647:- return value
        -: 4648:  - user pointer - if `value` argument is an external string
        -: 4649:  - NULL - otherwise
        -: 4650:
        -: 4651:*New in version [[NEXT_RELEASE]]*.
        -: 4652:
        -: 4653:**Example**
        -: 4654:
        -: 4655:[doctest]: # ()
        -: 4656:
        -: 4657:```c
        -: 4658:#include "jerryscript.h"
        -: 4659:#include <stdio.h>
        -: 4660:
        -: 4661:static int user_value = 1;
        -: 4662:
        -: 4663:int
    #####: 4664:main (void)
        -: 4665:{
    #####: 4666:  jerry_init (JERRY_INIT_EMPTY);
        -: 4667:
    #####: 4668:  const char *string_p = "This is a long external string, should not be duplicated!";
        -: 4669:
    #####: 4670:  jerry_value_t external_string = jerry_create_external_string ((jerry_char_t *) string_p, (void *) &user_value);
        -: 4671:
        -: 4672:  bool is_external;
    #####: 4673:  void *user_p = jerry_string_get_external_user_pointer (external_string, &is_external);
        -: 4674:
    #####: 4675:  if (is_external)
        -: 4676:  {
        -: 4677:    /* Prints the address of user_value. */
        -: 4678:    printf("User pointer of an external string: %p\n", user_p);
        -: 4679:  }
        -: 4680:
    #####: 4681:  jerry_release_value (external_string);
        -: 4682:
    #####: 4683:  jerry_cleanup ();
        -: 4684:  return 0;
        -: 4685:}
        -: 4686:```
        -: 4687:
        -: 4688:**See also**
        -: 4689:
        -: 4690:- [jerry_string_set_external_string_free_callback](#jerry_string_set_external_string_free_callback)
        -: 4691:- [jerry_create_external_string](#jerry_create_external_string)
        -: 4692:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -: 4693:
        -: 4694:
        -: 4695:# Functions for array object values
        -: 4696:
        -: 4697:## jerry_get_array_length
        -: 4698:
        -: 4699:**Summary**
        -: 4700:
        -: 4701:Get length of an array object. Returns zero, if the given parameter is not an array object.
        -: 4702:
        -: 4703:**Prototype**
        -: 4704:
        -: 4705:```c
        -: 4706:uint32_t
        -: 4707:jerry_get_array_length (const jerry_value_t value);
        -: 4708:```
        -: 4709:
        -: 4710:- `value` - input array value
        -: 4711:- return value - length of the given array
        -: 4712:
        -: 4713:**Example**
        -: 4714:
        -: 4715:```c
        -: 4716:{
        -: 4717:  jerry_value_t value;
        -: 4718:  ... // create or acquire value
        -: 4719:
        -: 4720:  uint32_t len = jerry_get_array_length (value);
        -: 4721:
        -: 4722:  jerry_release_value (value);
        -: 4723:}
        -: 4724:```
        -: 4725:
        -: 4726:**See also**
        -: 4727:
        -: 4728:- [jerry_create_array](#jerry_create_array)
        -: 4729:
        -: 4730:
        -: 4731:# Converters of 'jerry_value_t'
        -: 4732:
        -: 4733:Functions for converting API values to another value type.
        -: 4734:
        -: 4735:## jerry_value_to_boolean
        -: 4736:
        -: 4737:**Summary**
        -: 4738:
        -: 4739:Call ToBoolean operation on the api value.
        -: 4740:
        -: 4741:**Prototype**
        -: 4742:
        -: 4743:```c
        -: 4744:bool
        -: 4745:jerry_value_to_boolean (const jerry_value_t value);
        -: 4746:```
        -: 4747:
        -: 4748:- `value` - api value
        -: 4749:- return value
        -: 4750:  - true, if the logical value is true
        -: 4751:  - false, otherwise
        -: 4752:
        -: 4753:**Example**
        -: 4754:
        -: 4755:```c
        -: 4756:{
        -: 4757:  jerry_value_t value;
        -: 4758:  ... // create or acquire value
        -: 4759:
        -: 4760:  bool b = jerry_value_to_boolean (value);
        -: 4761:
        -: 4762:  jerry_release_value (value);
        -: 4763:}
        -: 4764:
        -: 4765:```
        -: 4766:
        -: 4767:**See also**
        -: 4768:
        -: 4769:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4770:
        -: 4771:## jerry_value_to_number
        -: 4772:
        -: 4773:**Summary**
        -: 4774:
        -: 4775:Call ToNumber operation on the api value.
        -: 4776:
        -: 4777:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4778:is no longer needed.
        -: 4779:
        -: 4780:**Prototype**
        -: 4781:
        -: 4782:```c
        -: 4783:jerry_value_t
        -: 4784:jerry_value_to_number (const jerry_value_t value);
        -: 4785:```
        -: 4786:
        -: 4787:- `value` - api value
        -: 4788:- return value
        -: 4789:  - converted number value, if success
        -: 4790:  - thrown error, otherwise
        -: 4791:
        -: 4792:**Example**
        -: 4793:
        -: 4794:```c
        -: 4795:{
        -: 4796:  jerry_value_t value;
        -: 4797:  ... // create or acquire value
        -: 4798:
        -: 4799:  jerry_value_t number_value = jerry_value_to_number (value);
        -: 4800:
        -: 4801:  jerry_release_value (number_value);
        -: 4802:  jerry_release_value (value);
        -: 4803:}
        -: 4804:
        -: 4805:```
        -: 4806:
        -: 4807:**See also**
        -: 4808:
        -: 4809:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4810:
        -: 4811:## jerry_value_to_object
        -: 4812:
        -: 4813:**Summary**
        -: 4814:
        -: 4815:Call ToObject operation on the api value.
        -: 4816:
        -: 4817:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4818:is no longer needed.
        -: 4819:
        -: 4820:**Prototype**
        -: 4821:
        -: 4822:```c
        -: 4823:jerry_value_t
        -: 4824:jerry_value_to_object (const jerry_value_t value);
        -: 4825:```
        -: 4826:
        -: 4827:- `value` - api value
        -: 4828:- return value
        -: 4829:  - converted object value, if success
        -: 4830:  - thrown error, otherwise
        -: 4831:
        -: 4832:**Example**
        -: 4833:
        -: 4834:```c
        -: 4835:{
        -: 4836:  jerry_value_t value;
        -: 4837:  ... // create or acquire value
        -: 4838:
        -: 4839:  jerry_value_t object_value = jerry_value_to_object (value);
        -: 4840:
        -: 4841:  jerry_release_value (object_value);
        -: 4842:  jerry_release_value (value);
        -: 4843:}
        -: 4844:```
        -: 4845:
        -: 4846:**See also**
        -: 4847:
        -: 4848:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4849:
        -: 4850:## jerry_value_to_primitive
        -: 4851:
        -: 4852:**Summary**
        -: 4853:
        -: 4854:Call ToPrimitive operation on the api value.
        -: 4855:
        -: 4856:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4857:is no longer needed.
        -: 4858:
        -: 4859:**Prototype**
        -: 4860:
        -: 4861:```c
        -: 4862:jerry_value_t
        -: 4863:jerry_value_to_primitive (const jerry_value_t value);
        -: 4864:```
        -: 4865:
        -: 4866:- `value` - api value
        -: 4867:- return value
        -: 4868:  - converted primitive value, if success
        -: 4869:  - thrown error, otherwise
        -: 4870:
        -: 4871:**Example**
        -: 4872:
        -: 4873:```c
        -: 4874:{
        -: 4875:  jerry_value_t value;
        -: 4876:  ... // create or acquire value
        -: 4877:
        -: 4878:  jerry_value_t prim_value = jerry_value_to_primitive (value);
        -: 4879:
        -: 4880:  jerry_release_value (prim_value);
        -: 4881:  jerry_release_value (value);
        -: 4882:}
        -: 4883:```
        -: 4884:
        -: 4885:**See also**
        -: 4886:
        -: 4887:- [jerry_value_t](#jerry_value_t)
        -: 4888:
        -: 4889:## jerry_value_to_string
        -: 4890:
        -: 4891:**Summary**
        -: 4892:
        -: 4893:Call the ToString ecma builtin operation on the api value.
        -: 4894:
        -: 4895:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4896:is no longer needed.
        -: 4897:
        -: 4898:**Prototype**
        -: 4899:
        -: 4900:```c
        -: 4901:jerry_value_t
        -: 4902:jerry_value_to_string (const jerry_value_t value);
        -: 4903:```
        -: 4904:
        -: 4905:- `value` - api value
        -: 4906:- return value
        -: 4907:  - converted string value, if success
        -: 4908:  - thrown error, otherwise
        -: 4909:
        -: 4910:**Example**
        -: 4911:
        -: 4912:```c
        -: 4913:{
        -: 4914:  jerry_value_t value;
        -: 4915:  ... // create or acquire value
        -: 4916:
        -: 4917:  jerry_value_t string_value = jerry_value_to_string (value);
        -: 4918:
        -: 4919:  jerry_release_value (string_value);
        -: 4920:  jerry_release_value (value);
        -: 4921:}
        -: 4922:```
        -: 4923:
        -: 4924:**See also**
        -: 4925:
        -: 4926:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4927:
        -: 4928:
        -: 4929:## jerry_value_to_bigint
        -: 4930:
        -: 4931:**Summary**
        -: 4932:
        -: 4933:Call the BigInt constructor ecma builtin operation on the api value.
        -: 4934:
        -: 4935:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 4936:is no longer needed.
        -: 4937:
        -: 4938:**Prototype**
        -: 4939:
        -: 4940:```c
        -: 4941:jerry_value_t
        -: 4942:jerry_value_to_bigint (const jerry_value_t value);
        -: 4943:```
        -: 4944:
        -: 4945:- `value` - api value
        -: 4946:- return value
        -: 4947:  - converted BigInt value, if success
        -: 4948:  - thrown error, otherwise
        -: 4949:
        -: 4950:*New in version 2.4*.
        -: 4951:
        -: 4952:**Example**
        -: 4953:
        -: 4954:```c
        -: 4955:{
        -: 4956:  jerry_value_t value;
        -: 4957:  ... // create or acquire value
        -: 4958:
        -: 4959:  jerry_value_t bigint_value = jerry_value_to_bigint (value);
        -: 4960:
        -: 4961:  jerry_release_value (bigint_value);
        -: 4962:  jerry_release_value (value);
        -: 4963:}
        -: 4964:```
        -: 4965:
        -: 4966:**See also**
        -: 4967:
        -: 4968:- [jerry_release_value](#jerry_release_value)
        -: 4969:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 4970:- [jerry_get_bigint_digits](#jerry_get_bigint_digits)
        -: 4971:
        -: 4972:## jerry_value_as_integer
        -: 4973:
        -: 4974:**Summary**
        -: 4975:
        -: 4976:Convert any number to integer number. Returns 0 if value is not number.
        -: 4977:Based on ECMA 262 v11 7.1.5
        -: 4978:
        -: 4979:**Prototype**
        -: 4980:
        -: 4981:```c
        -: 4982:double
        -: 4983:jerry_value_as_integer (const jerry_value_t value);
        -: 4984:```
        -: 4985:
        -: 4986:- `value` - api value
        -: 4987:- return
        -: 4988:  - 0, if value is not a number
        -: 4989:  - integer representation of the number, otherwise
        -: 4990:
        -: 4991:*New in version 2.4*.
        -: 4992:
        -: 4993:**Example**
        -: 4994:
        -: 4995:```c
        -: 4996:{
        -: 4997:  jerry_value_t number_val = jerry_create_number (123321);
        -: 4998:  double number = jerry_value_as_integer (number_val);
        -: 4999:  jerry_release_value (number_val);
        -: 5000:}
        -: 5001:```
        -: 5002:
        -: 5003:## jerry_value_as_int32
        -: 5004:
        -: 5005:**Summary**
        -: 5006:
        -: 5007:Convert any number to int32 number. Returns 0 if value is not number.
        -: 5008:Based on ECMA 262 v11 7.1.6
        -: 5009:
        -: 5010:**Prototype**
        -: 5011:
        -: 5012:```c
        -: 5013:int32_t
        -: 5014:jerry_value_as_int32 (const jerry_value_t value);
        -: 5015:```
        -: 5016:
        -: 5017:- `value` - api value
        -: 5018:- return
        -: 5019:  - 0, if value is not a number
        -: 5020:  - int32 representation of the number, otherwise
        -: 5021:
        -: 5022:*New in version 2.4*.
        -: 5023:
        -: 5024:**Example**
        -: 5025:
        -: 5026:```c
        -: 5027:{
        -: 5028:  jerry_value_t number_val = jerry_create_number (123321);
        -: 5029:  int32_t number = jerry_value_as_int32 (number_val);
        -: 5030:  jerry_release_value (number_val);
        -: 5031:}
        -: 5032:```
        -: 5033:
        -: 5034:## jerry_value_as_uint32
        -: 5035:
        -: 5036:**Summary**
        -: 5037:
        -: 5038:Convert any number to uint32 number. Returns 0 if value is not number.
        -: 5039:Based on ECMA 262 v11 7.1.7
        -: 5040:
        -: 5041:**Prototype**
        -: 5042:
        -: 5043:```c
        -: 5044:uint32_t
        -: 5045:jerry_value_as_uint32 (const jerry_value_t value);
        -: 5046:```
        -: 5047:
        -: 5048:- `value` - api value
        -: 5049:- return
        -: 5050:  - 0, if value is not a number
        -: 5051:  - uint32 representation of the number, otherwise
        -: 5052:
        -: 5053:*New in version 2.4*.
        -: 5054:
        -: 5055:**Example**
        -: 5056:
        -: 5057:```c
        -: 5058:{
        -: 5059:  jerry_value_t number_val = jerry_create_number (123321);
        -: 5060:  uint32_t number = jerry_value_as_uint32 (number_val);
        -: 5061:  jerry_release_value (number_val);
        -: 5062:}
        -: 5063:```
        -: 5064:
        -: 5065:# Functions for module objects
        -: 5066:
        -: 5067:These APIs all depend on module support.
        -: 5068:
        -: 5069:## jerry_module_link
        -: 5070:
        -: 5071:**Summary**
        -: 5072:
        -: 5073:Link modules to their dependencies. The dependencies are resolved by a user callback.
        -: 5074:
        -: 5075:*Notes*:
        -: 5076:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5077:  is no longer needed.
        -: 5078:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5079:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5080:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5081:
        -: 5082:**Prototype**
        -: 5083:
        -: 5084:```c
        -: 5085:jerry_value_t jerry_module_link (const jerry_value_t module_val,
        -: 5086:                                 jerry_module_resolve_callback_t callback, void *user_p)
        -: 5087:```
        -: 5088:
        -: 5089:- `module_val` - module object in unlinked state
        -: 5090:- `callback` - user callback which is called to resolve dependencies,
        -: 5091:               uses `jerry_port_module_resolve` when NULL is passed
        -: 5092:- `user_p` - user pointer passed to the callback
        -: 5093:- return
        -: 5094:  - true - if linking is successful
        -: 5095:  - error - otherwise
        -: 5096:
        -: 5097:*New in version [[NEXT_RELEASE]]*.
        -: 5098:
        -: 5099:**Example**
        -: 5100:
        -: 5101:[doctest]: # (test="compile")
        -: 5102:
        -: 5103:```c
        -: 5104:#include <jerryscript.h>
        -: 5105:
        -: 5106:static jerry_value_t
    #####: 5107:module_resolve_callback (const jerry_value_t specifier,
        -: 5108:                         const jerry_value_t referrer,
        -: 5109:                         void *user_data_p)
        -: 5110:{
        -: 5111:  /* In this case, the specifier contains 'b.mjs', and the referrer is the module
        -: 5112:   * created in the main() function below. Normally the specifier string should be
        -: 5113:   * extended to a full file system path, and it should be checked whether a module
        -: 5114:   * corresponding to this path has been loaded already. For simplicity, this function
        -: 5115:   * returns with a new module. */
        -: 5116:
    #####: 5117:  const jerry_char_t script[] = "export var a = 5";
        -: 5118:
        -: 5119:  jerry_parse_options_t parse_options;
    #####: 5120:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5121:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "b.mjs");
        -: 5122:
    #####: 5123:  jerry_value_t result = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5124:  jerry_release_value (parse_options.resource_name);
    #####: 5125:  return result;
        -: 5126:} /* module_resolve_callback */
        -: 5127:
        -: 5128:int
    #####: 5129:main (void)
        -: 5130:{
    #####: 5131:  jerry_init (JERRY_INIT_EMPTY);
        -: 5132:
    #####: 5133:  const jerry_char_t script[] = "import a from 'b.mjs'";
        -: 5134:
        -: 5135:  jerry_parse_options_t parse_options;
    #####: 5136:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5137:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5138:
    #####: 5139:  jerry_value_t ret_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5140:  jerry_release_value (parse_options.resource_name);
        -: 5141:
    #####: 5142:  jerry_module_link (ret_value, module_resolve_callback, NULL);
        -: 5143:
    #####: 5144:  jerry_release_value (ret_value);
        -: 5145:
    #####: 5146:  jerry_cleanup ();
        -: 5147:  return 0;
        -: 5148:}
        -: 5149:```
        -: 5150:
        -: 5151:**See also**
        -: 5152:- [jerry_module_resolve_callback_t](#jerry_module_resolve_callback_t)
        -: 5153:
        -: 5154:## jerry_module_evaluate
        -: 5155:
        -: 5156:Evaluate a module and its dependencies. The module must be in linked state.
        -: 5157:
        -: 5158:*Notes*:
        -: 5159:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5160:  when it is no longer needed.
        -: 5161:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5162:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5163:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5164:
        -: 5165:**Prototype**
        -: 5166:
        -: 5167:```c
        -: 5168:jerry_value_t jerry_module_evaluate (const jerry_value_t module_val);
        -: 5169:```
        -: 5170:
        -: 5171:- `module_val` - module object
        -: 5172:- return
        -: 5173:  - result of module bytecode execution - if evaluation was successful
        -: 5174:  - error, otherwise
        -: 5175:
        -: 5176:*New in version [[NEXT_RELEASE]]*.
        -: 5177:
        -: 5178:**Example**
        -: 5179:
        -: 5180:[doctest]: # (test="compile")
        -: 5181:
        -: 5182:```c
        -: 5183:#include <jerryscript.h>
        -: 5184:#include <stdio.h>
        -: 5185:
        -: 5186:int
    #####: 5187:main (void)
        -: 5188:{
    #####: 5189:  jerry_init (JERRY_INIT_EMPTY);
        -: 5190:
    #####: 5191:  const jerry_char_t script[] = "export var a = 6";
        -: 5192:
        -: 5193:  jerry_parse_options_t parse_options;
    #####: 5194:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5195:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5196:
    #####: 5197:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5198:  jerry_release_value (parse_options.resource_name);
        -: 5199:
    #####: 5200:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
    #####: 5201:  jerry_release_value (jerry_module_evaluate (module_value));
        -: 5202:
    #####: 5203:  jerry_release_value (module_value);
        -: 5204:
    #####: 5205:  jerry_cleanup ();
        -: 5206:  return 0;
        -: 5207:}
        -: 5208:```
        -: 5209:
        -: 5210:**See also**
        -: 5211:
        -: 5212:- [jerry_module_link](#jerry_module_link)
        -: 5213:
        -: 5214:## jerry_module_get_state
        -: 5215:
        -: 5216:**Summary**
        -: 5217:
        -: 5218:Returns the current status of a module. The available values
        -: 5219:are listed in [jerry_module_state_t](#jerry_module_state_t)
        -: 5220:
        -: 5221:*Notes*:
        -: 5222:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5223:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5224:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5225:
        -: 5226:**Prototype**
        -: 5227:
        -: 5228:```c
        -: 5229:jerry_module_state_t jerry_module_get_state (const jerry_value_t module_val);
        -: 5230:```
        -: 5231:
        -: 5232:- `module_val` - module object
        -: 5233:- return
        -: 5234:  - current status - if module_val is a module
        -: 5235:  - JERRY_MODULE_STATE_INVALID - otherwise
        -: 5236:
        -: 5237:*New in version [[NEXT_RELEASE]]*.
        -: 5238:
        -: 5239:**Example**
        -: 5240:
        -: 5241:[doctest]: # (test="compile")
        -: 5242:
        -: 5243:```c
        -: 5244:#include <jerryscript.h>
        -: 5245:#include <stdio.h>
        -: 5246:
        -: 5247:int
    #####: 5248:main (void)
        -: 5249:{
    #####: 5250:  jerry_init (JERRY_INIT_EMPTY);
        -: 5251:
    #####: 5252:  const jerry_char_t script[] = "import a from 'b.mjs'";
        -: 5253:
        -: 5254:  jerry_parse_options_t parse_options;
    #####: 5255:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5256:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5257:
    #####: 5258:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5259:  jerry_release_value (parse_options.resource_name);
        -: 5260:
    #####: 5261:  if (jerry_module_get_state (module_value) == JERRY_MODULE_STATE_UNLINKED)
        -: 5262:  {
        -: 5263:    printf ("Module parsing has been successful\n");
        -: 5264:  }
        -: 5265:
    #####: 5266:  jerry_release_value (module_value);
        -: 5267:
    #####: 5268:  jerry_cleanup ();
        -: 5269:  return 0;
        -: 5270:}
        -: 5271:```
        -: 5272:
        -: 5273:**See also**
        -: 5274:
        -: 5275:- [jerry_module_state_t](#jerry_module_state_t)
        -: 5276:
        -: 5277:## jerry_module_set_state_changed_callback
        -: 5278:
        -: 5279:**Summary**
        -: 5280:
        -: 5281:Sets a callback which is called after a module state is changed to linked, evaluated, or error.
        -: 5282:
        -: 5283:*Notes*:
        -: 5284:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5285:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5286:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5287:
        -: 5288:**Prototype**
        -: 5289:
        -: 5290:```c
        -: 5291:void jerry_module_set_state_changed_callback (jerry_module_state_changed_callback_t callback,
        -: 5292:                                              void *user_p);
        -: 5293:```
        -: 5294:
        -: 5295:- `callback` - callback, which is called after the state change.
        -: 5296:- `user_p` - pointer passed to the callback function.
        -: 5297:
        -: 5298:*New in version [[NEXT_RELEASE]]*.
        -: 5299:
        -: 5300:**Example**
        -: 5301:
        -: 5302:[doctest]: # (test="compile")
        -: 5303:
        -: 5304:```c
        -: 5305:#include <jerryscript.h>
        -: 5306:#include <stdio.h>
        -: 5307:
        -: 5308:static void
    #####: 5309:module_state_changed (jerry_module_state_t new_state, /**< new state of the module */
        -: 5310:                      const jerry_value_t module_val, /**< a module whose state is changed */
        -: 5311:                      const jerry_value_t value, /**< value argument */
        -: 5312:                      void *user_p) /**< user pointer */
        -: 5313:{
        -: 5314:  (void) module_val;
        -: 5315:  (void) value;
        -: 5316:  (void) user_p;
        -: 5317:
    #####: 5318:  if (new_state == JERRY_MODULE_STATE_LINKED)
        -: 5319:  {
        -: 5320:    printf ("A module is entered into linked state\n");
        -: 5321:  }
    #####: 5322:} /* module_state_changed */
        -: 5323:
        -: 5324:int
    #####: 5325:main (void)
        -: 5326:{
    #####: 5327:  jerry_init (JERRY_INIT_EMPTY);
        -: 5328:
    #####: 5329:  const jerry_char_t script[] = "12";
        -: 5330:
    #####: 5331:  jerry_module_set_state_changed_callback (module_state_changed, NULL);
        -: 5332:
        -: 5333:  jerry_parse_options_t parse_options;
    #####: 5334:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5335:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5336:
    #####: 5337:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5338:  jerry_release_value (parse_options.resource_name);
        -: 5339:
    #####: 5340:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
        -: 5341:
    #####: 5342:  jerry_release_value (module_value);
        -: 5343:
    #####: 5344:  jerry_cleanup ();
        -: 5345:  return 0;
        -: 5346:}
        -: 5347:```
        -: 5348:
        -: 5349:**See also**
        -: 5350:
        -: 5351:- [jerry_module_state_t](#jerry_module_state_t)
        -: 5352:- [jerry_module_state_changed_callback_t](#jerry_module_state_changed_callback_t)
        -: 5353:
        -: 5354:## jerry_module_set_import_meta_callback
        -: 5355:
        -: 5356:**Summary**
        -: 5357:
        -: 5358:Sets a callback which is called when an import.meta expression of a module is evaluated the first time.
        -: 5359:
        -: 5360:*Notes*:
        -: 5361:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5362:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5363:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5364:
        -: 5365:**Prototype**
        -: 5366:
        -: 5367:```c
        -: 5368:void jerry_module_set_import_meta_callback (jerry_module_import_meta_callback_t callback,
        -: 5369:                                            void *user_p);
        -: 5370:```
        -: 5371:
        -: 5372:- `callback` - callback, which is called when an import.meta
        -: 5373:               expression of a module is evaluated the first time
        -: 5374:- `user_p` - pointer passed to the callback function.
        -: 5375:
        -: 5376:*New in version [[NEXT_RELEASE]]*.
        -: 5377:
        -: 5378:**Example**
        -: 5379:
        -: 5380:[doctest]: # (test="compile")
        -: 5381:
        -: 5382:```c
        -: 5383:#include <jerryscript.h>
        -: 5384:#include <stdio.h>
        -: 5385:
        -: 5386:static void
    #####: 5387:module_import_meta_callback (const jerry_value_t module, /**< module */
        -: 5388:                             const jerry_value_t meta_object, /**< import.meta object */
        -: 5389:                             void *user_p) /**< user pointer */
        -: 5390:{
        -: 5391:  (void) user_p;
        -: 5392:
        -: 5393:  /* Create a property for the meta object */
    #####: 5394:  jerry_value_t property_name_value = jerry_create_string ((const jerry_char_t *) "prop");
    #####: 5395:  jerry_value_t property_value = jerry_create_string ((const jerry_char_t *) "prop");
    #####: 5396:  jerry_value_t result_value = jerry_set_property (meta_object, property_name_value, property_value);
    #####: 5397:  jerry_release_value (result_value);
    #####: 5398:  jerry_release_value (property_value);
    #####: 5399:  jerry_release_value (property_name_value);
    #####: 5400:} /* module_import_meta_callback */
        -: 5401:
        -: 5402:int
    #####: 5403:main (void)
        -: 5404:{
    #####: 5405:  jerry_init (JERRY_INIT_EMPTY);
        -: 5406:
    #####: 5407:  const jerry_char_t script[] = "import.meta";
        -: 5408:
    #####: 5409:  jerry_module_set_import_meta_callback (module_import_meta_callback, NULL);
        -: 5410:
        -: 5411:  jerry_parse_options_t parse_options;
    #####: 5412:  parse_options.options = JERRY_PARSE_MODULE;
        -: 5413:
    #####: 5414:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
        -: 5415:
    #####: 5416:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
    #####: 5417:  jerry_release_value (jerry_module_evaluate (module_value));
        -: 5418:
    #####: 5419:  jerry_release_value (module_value);
        -: 5420:
    #####: 5421:  jerry_cleanup ();
        -: 5422:  return 0;
        -: 5423:}
        -: 5424:```
        -: 5425:
        -: 5426:**See also**
        -: 5427:
        -: 5428:- [jerry_module_import_meta_callback_t](#jerry_module_import_meta_callback_t)
        -: 5429:
        -: 5430:## jerry_module_get_number_of_requests
        -: 5431:
        -: 5432:**Summary**
        -: 5433:
        -: 5434:Returns the number of import/export requests of a module.
        -: 5435:The requests can be queried by [jerry_module_get_request](#jerry_module_get_request).
        -: 5436:
        -: 5437:
        -: 5438:*Notes*:
        -: 5439:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5440:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5441:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5442:
        -: 5443:**Prototype**
        -: 5444:
        -: 5445:```c
        -: 5446:size_t jerry_module_get_number_of_requests (const jerry_value_t module_val);
        -: 5447:```
        -: 5448:
        -: 5449:- `module_val` - module object
        -: 5450:- return
        -: 5451:  - number of import/export requests of a module, if `module_val` is module,
        -: 5452:  - 0, otherwise
        -: 5453:
        -: 5454:*New in version [[NEXT_RELEASE]]*.
        -: 5455:
        -: 5456:**Example**
        -: 5457:
        -: 5458:[doctest]: # (test="compile")
        -: 5459:
        -: 5460:```c
        -: 5461:#include <jerryscript.h>
        -: 5462:#include <stdio.h>
        -: 5463:
        -: 5464:int
    #####: 5465:main (void)
        -: 5466:{
    #####: 5467:  jerry_init (JERRY_INIT_EMPTY);
        -: 5468:
    #####: 5469:  const jerry_char_t script[] = "export * from 'b.mjs'"
        -: 5470:                                "import a from 'c.mjs'";
        -: 5471:
        -: 5472:  jerry_parse_options_t parse_options;
    #####: 5473:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5474:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5475:
    #####: 5476:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5477:  jerry_release_value (parse_options.resource_name);
        -: 5478:
        -: 5479:  /* Prints 2. */
    #####: 5480:  printf ("Number of requests: %d\n", (int) jerry_module_get_number_of_requests (module_value));
        -: 5481:
    #####: 5482:  jerry_release_value (module_value);
        -: 5483:
    #####: 5484:  jerry_cleanup ();
        -: 5485:  return 0;
        -: 5486:}
        -: 5487:```
        -: 5488:
        -: 5489:**See also**
        -: 5490:
        -: 5491:- [jerry_module_get_request](#jerry_module_get_request)
        -: 5492:- [jerry_parse](#jerry_parse)
        -: 5493:- [jerry_module_link](#jerry_module_link)
        -: 5494:
        -: 5495:## jerry_module_get_request
        -: 5496:
        -: 5497:**Summary**
        -: 5498:
        -: 5499:Returns the module request specified by the `request_index` argument. The requests
        -: 5500:are ordered in source code occurence. When parsing is completed, all returned values
        -: 5501:are strings. If [jerry_module_link](#jerry_module_link) is completed successfully
        -: 5502:all returned values are module objects instead. If linking is in progress or fails,
        -: 5503:the successfully resolved dependencies are module objects, the rest are strings.
        -: 5504:The number of requests can be queried by
        -: 5505:[jerry_module_get_number_of_requests](#jerry_module_get_number_of_requests).
        -: 5506:
        -: 5507:*Notes*:
        -: 5508:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5509:  when it is no longer needed.
        -: 5510:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5511:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5512:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5513:
        -: 5514:**Prototype**
        -: 5515:
        -: 5516:```c
        -: 5517:jerry_value_t jerry_module_get_request (const jerry_value_t module_val, size_t request_index);
        -: 5518:```
        -: 5519:
        -: 5520:- `module_val` - module object
        -: 5521:- return
        -: 5522:  - string, if the request has not been resolved yet
        -: 5523:  - module object, if the request has been resolved successfully
        -: 5524:  - error, otherwise
        -: 5525:
        -: 5526:*New in version [[NEXT_RELEASE]]*.
        -: 5527:
        -: 5528:**Example**
        -: 5529:
        -: 5530:[doctest]: # (test="compile")
        -: 5531:
        -: 5532:```c
        -: 5533:#include <jerryscript.h>
        -: 5534:
        -: 5535:int
    #####: 5536:main (void)
        -: 5537:{
    #####: 5538:  jerry_init (JERRY_INIT_EMPTY);
        -: 5539:
    #####: 5540:  const jerry_char_t script[] = "export * from 'b.mjs'"
        -: 5541:                                "import a from 'c.mjs'";
        -: 5542:  const jerry_char_t file[] = "a.mjs";
        -: 5543:
        -: 5544:  jerry_parse_options_t parse_options;
    #####: 5545:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5546:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5547:
    #####: 5548:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5549:  jerry_release_value (parse_options.resource_name);
        -: 5550:
    #####: 5551:  jerry_value_t request_value = jerry_module_get_request (module_value, 0);
        -: 5552:  /* Returns with b.mjs */
    #####: 5553:  jerry_release_value (request_value);
        -: 5554:
    #####: 5555:  request_value = jerry_module_get_request (module_value, 1);
        -: 5556:  /* Returns with c.mjs */
    #####: 5557:  jerry_release_value (request_value);
        -: 5558:
    #####: 5559:  jerry_release_value (module_value);
        -: 5560:
    #####: 5561:  jerry_cleanup ();
        -: 5562:  return 0;
        -: 5563:}
        -: 5564:```
        -: 5565:
        -: 5566:**See also**
        -: 5567:
        -: 5568:- [jerry_module_get_number_of_requests](#jerry_module_get_number_of_requests)
        -: 5569:- [jerry_parse](#jerry_parse)
        -: 5570:- [jerry_module_link](#jerry_module_link)
        -: 5571:
        -: 5572:## jerry_module_get_namespace
        -: 5573:
        -: 5574:Returns the namespace object of a module
        -: 5575:
        -: 5576:*Notes*:
        -: 5577:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5578:  when it is no longer needed.
        -: 5579:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5580:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5581:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5582:
        -: 5583:**Prototype**
        -: 5584:
        -: 5585:```c
        -: 5586:jerry_value_t jerry_module_get_namespace (const jerry_value_t module_val);
        -: 5587:```
        -: 5588:
        -: 5589:- `module_val` - module object
        -: 5590:- return
        -: 5591:  - object, if namespace object is available
        -: 5592:  - error, otherwise
        -: 5593:
        -: 5594:*New in version [[NEXT_RELEASE]]*.
        -: 5595:
        -: 5596:**Example**
        -: 5597:
        -: 5598:[doctest]: # (test="compile")
        -: 5599:
        -: 5600:```c
        -: 5601:#include <jerryscript.h>
        -: 5602:#include <stdio.h>
        -: 5603:
        -: 5604:int
    #####: 5605:main (void)
        -: 5606:{
    #####: 5607:  jerry_init (JERRY_INIT_EMPTY);
        -: 5608:
    #####: 5609:  const jerry_char_t script[] = "export var a = 6";
        -: 5610:
        -: 5611:  jerry_parse_options_t parse_options;
    #####: 5612:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE;
    #####: 5613:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "a.mjs");
        -: 5614:
    #####: 5615:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5616:  jerry_release_value (parse_options.resource_name);
        -: 5617:
    #####: 5618:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
    #####: 5619:  jerry_release_value (jerry_module_evaluate (module_value));
        -: 5620:
    #####: 5621:  jerry_value_t namespace_value = jerry_module_get_namespace (module_value);
        -: 5622:
        -: 5623:  /* Exports can be checked. */
        -: 5624:
    #####: 5625:  jerry_release_value (namespace_value);
    #####: 5626:  jerry_release_value (module_value);
        -: 5627:
    #####: 5628:  jerry_cleanup ();
        -: 5629:  return 0;
        -: 5630:}
        -: 5631:```
        -: 5632:
        -: 5633:**See also**
        -: 5634:
        -: 5635:- [jerry_module_link](#jerry_module_link)
        -: 5636:- [jerry_module_evaluate](#jerry_module_evaluate)
        -: 5637:
        -: 5638:## jerry_module_set_import_callback
        -: 5639:
        -: 5640:Sets the callback which is called when dynamic imports are resolved. The resolver
        -: 5641:receives the `user_value` assigned to the currently executed script, which should
        -: 5642:provide all the information that is necessary for the resolve.
        -: 5643:
        -: 5644:*Notes*:
        -: 5645:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5646:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5647:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5648:- The possible return values of the callback is explained
        -: 5649:  in [jerry_module_import_callback_t](#jerry_module_import_callback_t)
        -: 5650:
        -: 5651:**Prototype**
        -: 5652:
        -: 5653:```c
        -: 5654:void
        -: 5655:jerry_module_set_import_callback (jerry_module_import_callback_t callback_p,
        -: 5656:                                  void *user_p)
        -: 5657:```
        -: 5658:
        -: 5659:- `callback_p` - a [jerry_module_import_callback_t](#jerry_module_import_callback_t) callback which handles `import()` calls
        -: 5660:- `user_p` - user pointer passed to the callback
        -: 5661:
        -: 5662:*New in version [[NEXT_RELEASE]]*.
        -: 5663:
        -: 5664:**Example**
        -: 5665:
        -: 5666:[doctest]: # (test="compile")
        -: 5667:
        -: 5668:```c
        -: 5669:#include <jerryscript.h>
        -: 5670:#include <stdio.h>
        -: 5671:
        -: 5672:typedef struct {
        -: 5673:  jerry_value_t specifier;
        -: 5674:  jerry_value_t user_value;
        -: 5675:  jerry_value_t promise;
        -: 5676:} resolve_module_task_t;
        -: 5677:
        -: 5678:static jerry_value_t
    #####: 5679:resolve_dynamic (const jerry_value_t specifier, /**< module specifier */
        -: 5680:                 const jerry_value_t user_value, /**< user value assigned to the script */
        -: 5681:                 void *user_p) /**< user data */
        -: 5682:{
        -: 5683:  /* If the specified module has already been evaluated, this callback can
        -: 5684:   * return with it and the promise creation is automatically done by the engine.
        -: 5685:   * Otherwise the application usually adds a resolve task to a command queue. */
        -: 5686:
        -: 5687:  /* This very simple command queue supports only one task. */
    #####: 5688:  resolve_module_task_t *task_p = (resolve_module_task_t *) user_p;
    #####: 5689:  task_p->specifier = jerry_acquire_value (specifier);
    #####: 5690:  task_p->user_value = jerry_acquire_value (user_value);
        -: 5691:
        -: 5692:  /* This Promise should be evaluated later. */
    #####: 5693:  jerry_value_t promise = jerry_create_promise ();
    #####: 5694:  task_p->promise = jerry_acquire_value (promise);
    #####: 5695:  return promise;
        -: 5696:}
        -: 5697:
        -: 5698:int
    #####: 5699:main (void)
        -: 5700:{
    #####: 5701:  jerry_init (JERRY_INIT_EMPTY);
        -: 5702:
        -: 5703:  resolve_module_task_t task;
    #####: 5704:  jerry_module_set_import_callback (resolve_dynamic, &task);
        -: 5705:
    #####: 5706:  const jerry_char_t script[] = "import('modules/my_module.mjs').then(\n"
        -: 5707:                                "  function (namespace) { /* use namespace */},\n"
        -: 5708:                                "  function (error) { /* handle error */}\n"
        -: 5709:                                ")";
        -: 5710:
        -: 5711:  jerry_parse_options_t parse_options;
    #####: 5712:  parse_options.options = JERRY_PARSE_HAS_RESOURCE | JERRY_PARSE_HAS_USER_VALUE;
        -: 5713:
        -: 5714:  /* Resource is usually used for debugging purposes, e.g. for generating backtrace. */
    #####: 5715:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "dir/my_script.js");
        -: 5716:
        -: 5717:  /* User value should provide information for resolving dynamic imports.
        -: 5718:   * In this case it contains the full path excluding the filename. */
    #####: 5719:  parse_options.user_value = jerry_create_string ((const jerry_char_t *) "/home/user/dir");
        -: 5720:
    #####: 5721:  jerry_value_t script_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5722:  jerry_release_value (parse_options.resource_name);
    #####: 5723:  jerry_release_value (parse_options.user_value);
    #####: 5724:  jerry_release_value (jerry_run (script_value));
    #####: 5725:  jerry_release_value (script_value);
        -: 5726:
        -: 5727:  /* The application resolves both the module and the promise using the specifier
        -: 5728:   * and the user_value. In this example the specifier is modules/my_module.mjs. */
    #####: 5729:  const jerry_char_t module_script[] = "export var a = 5";
        -: 5730:
    #####: 5731:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_RESOURCE | JERRY_PARSE_HAS_USER_VALUE;
    #####: 5732:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "modules/my_module.mjs");
    #####: 5733:  parse_options.user_value = jerry_create_string ((const jerry_char_t *) "/home/user/dir/modules");
        -: 5734:
    #####: 5735:  jerry_value_t module_value = jerry_parse (module_script, sizeof (module_script) - 1, &parse_options);
    #####: 5736:  jerry_release_value (parse_options.resource_name);
    #####: 5737:  jerry_release_value (parse_options.user_value);
    #####: 5738:  jerry_release_value (jerry_module_link (module_value, NULL, NULL));
    #####: 5739:  jerry_release_value (jerry_module_evaluate (module_value));
        -: 5740:
        -: 5741:  /* The promise must be resolved with the namespace object, not the module. */
    #####: 5742:  jerry_value_t namespace_value = jerry_module_get_namespace (module_value);
    #####: 5743:  jerry_release_value (jerry_resolve_or_reject_promise (task.promise, namespace_value, true));
        -: 5744:
    #####: 5745:  jerry_release_value (namespace_value);
    #####: 5746:  jerry_release_value (module_value);
    #####: 5747:  jerry_release_value (task.specifier);
    #####: 5748:  jerry_release_value (task.user_value);
    #####: 5749:  jerry_release_value (task.promise);
        -: 5750:
        -: 5751:  /* Process promise handlers. */
    #####: 5752:  jerry_release_value (jerry_run_all_enqueued_jobs ());
        -: 5753:
    #####: 5754:  jerry_cleanup ();
        -: 5755:  return 0;
        -: 5756:}
        -: 5757:```
        -: 5758:
        -: 5759:**See also**
        -: 5760:- [jerry_module_import_callback_t](#jerry_module_import_callback_t)
        -: 5761:
        -: 5762:## jerry_native_module_create
        -: 5763:
        -: 5764:Creates a native module with a list of exports. The initial state of the module is linked.
        -: 5765:
        -: 5766:*Notes*:
        -: 5767:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5768:  when it is no longer needed.
        -: 5769:- Native pointers can be used to assign private data to a native module,
        -: 5770:  see [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -: 5771:- When `callback` is `NULL`, no function is called when the module is evaluated,
        -: 5772:  only its state is changed to evaluated.
        -: 5773:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5774:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5775:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5776:
        -: 5777:**Prototype**
        -: 5778:
        -: 5779:```c
        -: 5780:jerry_value_t
        -: 5781:jerry_native_module_create (jerry_native_module_evaluate_callback_t callback,
        -: 5782:                            const jerry_value_t * const exports_p,
        -: 5783:                            size_t number_of_exports);
        -: 5784:```
        -: 5785:
        -: 5786:- `callback` - a [jerry_native_module_evaluate_callback_t](#jerry_native_module_evaluate_callback_t) callback
        -: 5787:               which is called by [jerry_module_evaluate](#jerry_module_evaluate) to evaluate the native module.
        -: 5788:- `exports_p` - list of the exported bindings of the module, must be valid string identifiers.
        -: 5789:- `number_of_exports` - number of exports in the `exports_p` list.
        -: 5790:- return
        -: 5791:  - a native module, if the module is successfully created
        -: 5792:  - error, otherwise
        -: 5793:
        -: 5794:*New in version [[NEXT_RELEASE]]*.
        -: 5795:
        -: 5796:**Example**
        -: 5797:
        -: 5798:[doctest]: # (test="compile")
        -: 5799:
        -: 5800:```c
        -: 5801:#include <jerryscript.h>
        -: 5802:
        -: 5803:int
    #####: 5804:main (void)
        -: 5805:{
    #####: 5806:  jerry_init (JERRY_INIT_EMPTY);
        -: 5807:
    #####: 5808:  jerry_value_t exports[2] =
        -: 5809:  {
    #####: 5810:    jerry_create_string ((const jerry_char_t *) "first_export"),
    #####: 5811:    jerry_create_string ((const jerry_char_t *) "second_export")
        -: 5812:  };
        -: 5813:
    #####: 5814:  jerry_value_t native_module = jerry_native_module_create (NULL, exports, 2);
        -: 5815:
    #####: 5816:  jerry_release_value (exports[0]);
    #####: 5817:  jerry_release_value (exports[1]);
    #####: 5818:  jerry_release_value (native_module);
        -: 5819:
    #####: 5820:  jerry_cleanup ();
        -: 5821:  return 0;
        -: 5822:}
        -: 5823:```
        -: 5824:
        -: 5825:**See also**
        -: 5826:
        -: 5827:- [jerry_module_link](#jerry_module_link)
        -: 5828:- [jerry_module_evaluate](#jerry_module_evaluate)
        -: 5829:- [jerry_native_module_get_export](#jerry_native_module_get_export)
        -: 5830:- [jerry_native_module_set_export](#jerry_native_module_set_export)
        -: 5831:
        -: 5832:## jerry_native_module_get_export
        -: 5833:
        -: 5834:Gets the value of an export binding which belongs to a native module.
        -: 5835:
        -: 5836:*Notes*:
        -: 5837:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5838:  when it is no longer needed.
        -: 5839:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5840:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5841:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5842:
        -: 5843:**Prototype**
        -: 5844:
        -: 5845:```c
        -: 5846:jerry_value_t
        -: 5847:jerry_native_module_get_export (const jerry_value_t native_module_val,
        -: 5848:                                const jerry_value_t export_name_val);
        -: 5849:```
        -: 5850:
        -: 5851:- `module_val` - a native module object.
        -: 5852:- `export_name_val` - string identifier of the export.
        -: 5853:- return
        -: 5854:  - value of the export, if success
        -: 5855:  - error, otherwise
        -: 5856:
        -: 5857:*New in version [[NEXT_RELEASE]]*.
        -: 5858:
        -: 5859:**Example**
        -: 5860:
        -: 5861:[doctest]: # (test="compile")
        -: 5862:
        -: 5863:```c
        -: 5864:#include <jerryscript.h>
        -: 5865:
        -: 5866:int
    #####: 5867:main (void)
        -: 5868:{
    #####: 5869:  jerry_init (JERRY_INIT_EMPTY);
        -: 5870:
    #####: 5871:  jerry_value_t export = jerry_create_string ((const jerry_char_t *) "an_export");
        -: 5872:
    #####: 5873:  jerry_value_t native_module = jerry_native_module_create (NULL, &export, 1);
        -: 5874:
    #####: 5875:  jerry_value_t value = jerry_native_module_get_export (native_module, export);
    #####: 5876:  jerry_release_value (value);
        -: 5877:
    #####: 5878:  jerry_release_value (export);
    #####: 5879:  jerry_release_value (native_module);
        -: 5880:
    #####: 5881:  jerry_cleanup ();
        -: 5882:  return 0;
        -: 5883:}
        -: 5884:```
        -: 5885:
        -: 5886:**See also**
        -: 5887:
        -: 5888:- [jerry_native_module_create](#jerry_native_module_create)
        -: 5889:- [jerry_native_module_set_export](#jerry_native_module_set_export)
        -: 5890:
        -: 5891:## jerry_native_module_set_export
        -: 5892:
        -: 5893:Sets the value of an export binding which belongs to a native module.
        -: 5894:
        -: 5895:*Notes*:
        -: 5896:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 5897:  when it is no longer needed.
        -: 5898:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5899:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5900:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5901:
        -: 5902:**Prototype**
        -: 5903:
        -: 5904:```c
        -: 5905:jerry_value_t
        -: 5906:jerry_value_t jerry_native_module_set_export (const jerry_value_t native_mmodule_val,
        -: 5907:                                              const jerry_value_t export_name_val,
        -: 5908:                                              const jerry_value_t value_to_set)
        -: 5909:```
        -: 5910:
        -: 5911:- `module_val` - a native module object.
        -: 5912:- `export_name_val` - string identifier of the export.
        -: 5913:- `value_to_set` - new value of the export.
        -: 5914:- return
        -: 5915:  - true, if success
        -: 5916:  - error, otherwise
        -: 5917:
        -: 5918:*New in version [[NEXT_RELEASE]]*.
        -: 5919:
        -: 5920:**Example**
        -: 5921:
        -: 5922:[doctest]: # (test="compile")
        -: 5923:
        -: 5924:```c
        -: 5925:#include <jerryscript.h>
        -: 5926:
        -: 5927:int
    #####: 5928:main (void)
        -: 5929:{
    #####: 5930:  jerry_init (JERRY_INIT_EMPTY);
        -: 5931:
    #####: 5932:  jerry_value_t export = jerry_create_string ((const jerry_char_t *) "an_export");
        -: 5933:
    #####: 5934:  jerry_value_t native_module = jerry_native_module_create (NULL, &export, 1);
        -: 5935:
    #####: 5936:  jerry_value_t number = jerry_create_number (3.5);
    #####: 5937:  jerry_value_t value = jerry_native_module_set_export (native_module, export, number);
    #####: 5938:  jerry_release_value (value);
    #####: 5939:  jerry_release_value (number);
        -: 5940:
    #####: 5941:  jerry_release_value (export);
    #####: 5942:  jerry_release_value (native_module);
        -: 5943:
    #####: 5944:  jerry_cleanup ();
        -: 5945:  return 0;
        -: 5946:}
        -: 5947:```
        -: 5948:
        -: 5949:**See also**
        -: 5950:
        -: 5951:- [jerry_native_module_create](#jerry_native_module_create)
        -: 5952:- [jerry_native_module_get_export](#jerry_native_module_get_export)
        -: 5953:
        -: 5954:# Functions for promise objects
        -: 5955:
        -: 5956:These APIs all depend on the es.next profile (or on some build options).
        -: 5957:
        -: 5958:## jerry_get_promise_result
        -: 5959:
        -: 5960:**Summary**
        -: 5961:
        -: 5962:The function returns the result of a Promise object.
        -: 5963:
        -: 5964:*Notes*:
        -: 5965:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 5966:  is no longer needed.
        -: 5967:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 5968:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 5969:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 5970:- The es.next profile enables this by default.
        -: 5971:
        -: 5972:
        -: 5973:**Prototype**
        -: 5974:
        -: 5975:```c
        -: 5976:jerry_value_t
        -: 5977:jerry_get_promise_result (const jerry_value_t promise);
        -: 5978:```
        -: 5979:
        -: 5980:- `promise` - the input Promise object.
        -: 5981:- return
        -: 5982:  - The result of the Promise.
        -: 5983:  - If the Promise is not resolved yet the result is the 'undefined' value.
        -: 5984:  - A TypeError is returned if the input argument was not a Promise object or
        -: 5985:    the Promise support was not built into the library.
        -: 5986:
        -: 5987:*New in version 2.2*.
        -: 5988:
        -: 5989:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 5990:
        -: 5991:**Example**
        -: 5992:
        -: 5993:[doctest]: # (test="compile")
        -: 5994:
        -: 5995:```c
        -: 5996:#include <jerryscript.h>
        -: 5997:
        -: 5998:static void
        -: 5999:example (void)
        -: 6000:{
        -: 6001:  // acquire/create a promise object.
        -: 6002:  jerry_value_t promise = jerry_create_promise ();
        -: 6003:  {
        -: 6004:    // prepare the argumnent for the resolve or reject.
        -: 6005:    jerry_value_t argument = jerry_create_number (33);
        -: 6006:
        -: 6007:    jerry_value_t is_ok = jerry_resolve_or_reject_promise (promise,
        -: 6008:                                                           argument,
        -: 6009:                                                           true);
        -: 6010:    // 'is_ok' should be checked if it is an error or not.
        -: 6011:    // skipped in this example
        -: 6012:    jerry_release_value (is_ok);
        -: 6013:    jerry_release_value (argument);
        -: 6014:  }
        -: 6015:
        -: 6016:  jerry_value_t promise_result = jerry_get_promise_result (promise);
        -: 6017:  // 'promise_result' is now the number 33.
        -: 6018:
        -: 6019:  jerry_release_value (promise_result);
        -: 6020:  jerry_release_value (promise);
        -: 6021:}
        -: 6022:```
        -: 6023:
        -: 6024:**See also**
        -: 6025:
        -: 6026:- [jerry_create_promise](#jerry_create_promise)
        -: 6027:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 6028:
        -: 6029:## jerry_get_promise_state
        -: 6030:
        -: 6031:**Summary**
        -: 6032:
        -: 6033:*Notes*:
        -: 6034:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6035:  is no longer needed.
        -: 6036:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 6037:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 6038:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6039:- The es.next profile enables this by default.
        -: 6040:
        -: 6041:
        -: 6042:**Prototype**
        -: 6043:
        -: 6044:```c
        -: 6045:jerry_promise_state_t
        -: 6046:jerry_get_promise_state (const jerry_value_t promise);
        -: 6047:```
        -: 6048:
        -: 6049:- `promise` - the input promise object.
        -: 6050:- return
        -: 6051:  - [jerry_promise_state_t](#jerry_promise_state_t)
        -: 6052:  - `JERRY_PROMISE_STATE_NONE` is returned if the input argument was not a promise object or
        -: 6053:    the Promise support was not built into the library.
        -: 6054:
        -: 6055:*New in version 2.2*.
        -: 6056:
        -: 6057:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 6058:
        -: 6059:**Example**
        -: 6060:
        -: 6061:[doctest]: # (test="compile")
        -: 6062:
        -: 6063:```c
        -: 6064:#include <jerryscript.h>
        -: 6065:
        -: 6066:static void
        -: 6067:example (void)
        -: 6068:{
        -: 6069:  // acquire/create a promise object.
        -: 6070:  jerry_value_t promise = jerry_create_promise ();
        -: 6071:
        -: 6072:  jerry_promise_state_t start_state = jerry_get_promise_state (promise);
        -: 6073:  // a Promise have a default state of JERRY_PROMISE_STATE_PENDING
        -: 6074:
        -: 6075:  {
        -: 6076:    // prepare the argumnent for the resolve or reject.
        -: 6077:    jerry_value_t argument = jerry_create_number (33);
        -: 6078:
        -: 6079:    jerry_value_t is_ok = jerry_resolve_or_reject_promise (promise,
        -: 6080:                                                           argument,
        -: 6081:                                                           true);
        -: 6082:    // 'is_ok' should be checked if it is an error or not.
        -: 6083:    // skipped in this example
        -: 6084:    jerry_release_value (is_ok);
        -: 6085:    jerry_release_value (argument);
        -: 6086:  }
        -: 6087:
        -: 6088:  jerry_promise_state_t current_state = jerry_get_promise_state (promise);
        -: 6089:  // at this point the Promise should be in the JERRY_PROMISE_STATE_FULFILLED state.
        -: 6090:
        -: 6091:  jerry_release_value (promise);
        -: 6092:}
        -: 6093:```
        -: 6094:
        -: 6095:**See also**
        -: 6096:
        -: 6097:- [jerry_create_promise](#jerry_create_promise)
        -: 6098:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 6099:
        -: 6100:## jerry_promise_set_callback
        -: 6101:
        -: 6102:**Summary**
        -: 6103:
        -: 6104:Sets a callback for tracking Promise and async operations.
        -: 6105:
        -: 6106:*Notes*:
        -: 6107:- This API depends on a build option (`JERRY_PROMISE_CALLBACK`) and can be checked
        -: 6108:  in runtime with the `JERRY_FEATURE_PROMISE_CALLBACK` feature enum value,
        -: 6109:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6110:
        -: 6111:
        -: 6112:**Prototype**
        -: 6113:
        -: 6114:```c
        -: 6115:void jerry_promise_set_callback (jerry_promise_event_filter_t filters, jerry_promise_callback_t callback,
        -: 6116:                                 void *user_p);
        -: 6117:```
        -: 6118:
        -: 6119:- `filters` - combination of [jerry_promise_event_filter_t](#jerry_promise_event_filter_t) options
        -: 6120:- `callback` - callback function, the previously set value is overwritten,
        -: 6121:               and setting NULL disables the tracking
        -: 6122:- `user_p` - pointer passed to the callback function, can be NULL
        -: 6123:
        -: 6124:*New in version [[NEXT_RELEASE]]*.
        -: 6125:
        -: 6126:**Example**
        -: 6127:
        -: 6128:[doctest]: # ()
        -: 6129:
        -: 6130:```c
        -: 6131:#include <stdio.h>
        -: 6132:#include <string.h>
        -: 6133:#include "jerryscript.h"
        -: 6134:
        -: 6135:static void
    #####: 6136:promise_callback (jerry_promise_event_type_t event_type, /**< event type */
        -: 6137:                  const jerry_value_t object, /**< target object */
        -: 6138:                  const jerry_value_t value, /**< optional argument */
        -: 6139:                  void *user_p) /**< user pointer passed to the callback */
        -: 6140:{
    #####: 6141:  if (event_type == JERRY_PROMISE_EVENT_CREATE)
        -: 6142:  {
    #####: 6143:    printf ("A new promise is created\n");
        -: 6144:
    #####: 6145:    if (!jerry_value_is_undefined (value))
        -: 6146:    {
        -: 6147:      printf ("  The Promise is created by Promise.then() built-in.\n");
        -: 6148:    }
        -: 6149:  }
    #####: 6150:} /* promise_callback */
        -: 6151:
        -: 6152:int
    #####: 6153:main (void)
        -: 6154:{
    #####: 6155:  jerry_init (JERRY_INIT_EMPTY);
        -: 6156:
    #####: 6157:  jerry_promise_set_callback (JERRY_PROMISE_EVENT_FILTER_CREATE, promise_callback, NULL);
        -: 6158:
    #####: 6159:  const char *source_p = "var p = Promise.resolve(0)\n"
        -: 6160:                         "p.then(function (v) { return v; })";
    #####: 6161:  jerry_release_value (jerry_eval ((const jerry_char_t *) source_p,
        -: 6162:                                   strlen (source_p),
        -: 6163:                                   JERRY_PARSE_NO_OPTS));
        -: 6164:
    #####: 6165:  jerry_cleanup ();
        -: 6166:  return 0;
        -: 6167:} /* main */
        -: 6168:```
        -: 6169:
        -: 6170:**See also**
        -: 6171:
        -: 6172:- [jerry_create_promise](#jerry_create_promise)
        -: 6173:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 6174:
        -: 6175:## jerry_from_property_descriptor
        -: 6176:
        -: 6177:**Summary**
        -: 6178:
        -: 6179:This API function is equivalent to FromPropertyDescriptor operation defined in ECMA 262 v11 6.2.5.4.
        -: 6180:It returns with an ECMAScript Object which represents the property attributes.
        -: 6181:
        -: 6182:*Notes*:
        -: 6183:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6184:  is no longer needed.
        -: 6185:
        -: 6186:**Prototype**
        -: 6187:
        -: 6188:```c
        -: 6189:jerry_value_t
        -: 6190:jerry_from_property_descriptor (const jerry_property_descriptor_t *src_prop_desc_p)
        -: 6191:```
        -: 6192:
        -: 6193:- `src_prop_desc_p` - the input property descriptor.
        -: 6194:- return
        -: 6195:  - [jerry_value_t](#jerry_value_t)
        -: 6196:  - jerry value - if success
        -: 6197:  - value marked with error flag - otherwise
        -: 6198:
        -: 6199:*New in version 2.4*.
        -: 6200:
        -: 6201:**Example**
        -: 6202:
        -: 6203:[doctest]: # (test="compile")
        -: 6204:
        -: 6205:```c
        -: 6206:#include <jerryscript.h>
        -: 6207:
        -: 6208:static void
        -: 6209:example (void)
        -: 6210:{
        -: 6211:  jerry_value_t prop_name = jerry_create_string_from_utf8 ((jerry_char_t *) "value");
        -: 6212:
        -: 6213:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 6214:
        -: 6215:  prop_desc.value = prop_name;
        -: 6216:  prop_desc.flags |= JERRY_PROP_IS_VALUE_DEFINED;
        -: 6217:
        -: 6218:  jerry_value_t from_object = jerry_from_property_descriptor (&prop_desc);
        -: 6219:
        -: 6220:  jerry_release_value (prop_name);
        -: 6221:  jerry_release_value (from_object);
        -: 6222:  jerry_property_descriptor_free (&prop_desc);
        -: 6223:}
        -: 6224:```
        -: 6225:
        -: 6226:## jerry_to_property_descriptor
        -: 6227:
        -: 6228:**Summary**
        -: 6229:
        -: 6230:This API function is equivalent to ToPropertyDescriptor operation defined in ECMA 262 v11 6.2.5.5.
        -: 6231:It decodes the ECMAScript object and fills the fields of a JerryScript property descriptor.
        -: 6232:
        -: 6233:*Notes*:
        -: 6234:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6235:  is no longer needed.
        -: 6236:
        -: 6237:**Prototype**
        -: 6238:
        -: 6239:```c
        -: 6240:jerry_value_t
        -: 6241:jerry_to_property_descriptor (jerry_value_t obj_value, jerry_property_descriptor_t *out_prop_desc_p);
        -: 6242:```
        -: 6243:
        -: 6244:- `obj_value` - the input object
        -: 6245:- `src_prop_desc_p` - the output property descriptor.
        -: 6246:- return
        -: 6247:  - [jerry_value_t](#jerry_value_t)
        -: 6248:  - true, if success
        -: 6249:  - thrown error, otherwise
        -: 6250:
        -: 6251:*New in version 2.4*.
        -: 6252:
        -: 6253:**Example**
        -: 6254:
        -: 6255:[doctest]: # (test="compile")
        -: 6256:
        -: 6257:```c
        -: 6258:#include <jerryscript.h>
        -: 6259:
        -: 6260:static void
        -: 6261:example (void)
        -: 6262:{
        -: 6263:  jerry_value_t object = jerry_create_object ();
        -: 6264:  jerry_value_t prop_name = jerry_create_string_from_utf8 ((jerry_char_t *) "value");
        -: 6265:  jerry_value_t value = jerry_create_boolean (true);
        -: 6266:  jerry_property_descriptor_t prop_desc;
        -: 6267:
        -: 6268:  jerry_release_value (jerry_set_property (object, prop_name, prop_name));
        -: 6269:
        -: 6270:  jerry_release_value (jerry_to_property_descriptor (object, &prop_desc));
        -: 6271:
        -: 6272:  jerry_release_value (object);
        -: 6273:  jerry_release_value (prop_name);
        -: 6274:  jerry_release_value (value);
        -: 6275:  jerry_property_descriptor_free (&prop_desc);
        -: 6276:}
        -: 6277:```
        -: 6278:
        -: 6279:## jerry_resolve_or_reject_promise
        -: 6280:
        -: 6281:**Summary**
        -: 6282:
        -: 6283:Resolve or reject the promise with an argument.
        -: 6284:
        -: 6285:*Note*:
        -: 6286:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6287:  is no longer needed.
        -: 6288:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 6289:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 6290:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6291:- The es.next profile enables this by default.
        -: 6292:
        -: 6293:
        -: 6294:**Prototype**
        -: 6295:
        -: 6296:```c
        -: 6297:jerry_value_t
        -: 6298:jerry_resolve_or_reject_promise (jerry_value_t promise,
        -: 6299:                                 jerry_value_t argument,
        -: 6300:                                 bool is_resolve)
        -: 6301:```
        -: 6302:
        -: 6303:- `promise` - the promise value
        -: 6304:- `argument` - the argument for resolve or reject
        -: 6305:- `is_resolve` - whether the promise should be resolved or rejected
        -: 6306:- return value
        -: 6307:  - undefined jerry value - resolve or reject successed
        -: 6308:  - jerry value with error flag - otherwise
        -: 6309:
        -: 6310:*New in version 2.0*.
        -: 6311:
        -: 6312:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 6313:
        -: 6314:**Example**
        -: 6315:
        -: 6316:```c
        -: 6317:{
        -: 6318:  jerry_value_t promise = ... // acquire/create a promise object.
        -: 6319:
        -: 6320:  ...
        -: 6321:
        -: 6322:  bool is_resolve = ... // whether the promise should be resolved or rejected
        -: 6323:  jerry_value_t argument = ... // prepare the argumnent for the resolve or reject.
        -: 6324:
        -: 6325:  jerry_value_t is_ok = jerry_resolve_or_reject_promise (promise,
        -: 6326:                                                         argument,
        -: 6327:                                                         is_resolve);
        -: 6328:
        -: 6329:  if (jerry_value_is_error (is_ok))
        -: 6330:  {
        -: 6331:    // handle the error.
        -: 6332:  }
        -: 6333:
        -: 6334:  jerry_release_value (is_ok);
        -: 6335:  jerry_release_value (argument);
        -: 6336:  jerry_release_value (promise);
        -: 6337:}
        -: 6338:```
        -: 6339:
        -: 6340:**See also**
        -: 6341:
        -: 6342:- [jerry_release_value](#jerry_release_value)
        -: 6343:- [jerry_value_is_error](#jerry_value_is_error)
        -: 6344:
        -: 6345:# Functions for symbols
        -: 6346:
        -: 6347:These APIs all depend on the es.next profile (or on build options).
        -: 6348:
        -: 6349:## jerry_get_well_known_symbol
        -: 6350:
        -: 6351:**Summary**
        -: 6352:
        -: 6353:Get the well-known symbol corresponding to the given [well-known symbol id](#jerry_well_known_symbol_t).
        -: 6354:
        -: 6355:*Notes*:
        -: 6356:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6357:  is no longer needed.
        -: 6358:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 6359:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 6360:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6361:- The es.next profile enables this by default.
        -: 6362:- If the symbol support is not enabled an undefined will be returned.
        -: 6363:
        -: 6364:**Prototype**
        -: 6365:
        -: 6366:```c
        -: 6367:jerry_value_t
        -: 6368:jerry_get_well_known_symbol (jerry_well_known_symbol_t symbol);
        -: 6369:```
        -: 6370:
        -: 6371:- `symbol` - [jerry_well_known_symbol_t](#jerry_well_known_symbol_t) enum value
        -: 6372:- return value
        -: 6373:  - undefined value - if invalid well-known symbol was requested
        -: 6374:  - well-known symbol value, otherwise
        -: 6375:
        -: 6376:*New in version 2.4*.
        -: 6377:
        -: 6378:**Example**
        -: 6379:
        -: 6380:[doctest]: # ()
        -: 6381:
        -: 6382:```c
        -: 6383:#include "jerryscript.h"
        -: 6384:
        -: 6385:int
    #####: 6386:main (void)
        -: 6387:{
    #####: 6388:  jerry_init (JERRY_INIT_EMPTY);
        -: 6389:
    #####: 6390:  jerry_value_t array_value = jerry_create_array (5);
    #####: 6391:  jerry_value_t symbol_iterator = jerry_get_well_known_symbol (JERRY_SYMBOL_ITERATOR);
    #####: 6392:  jerry_value_t array_iterator = jerry_get_property (array_value, symbol_iterator);
        -: 6393:
        -: 6394:  // usage of array_iterator
        -: 6395:
    #####: 6396:  jerry_release_value (array_iterator);
    #####: 6397:  jerry_release_value (symbol_iterator);
    #####: 6398:  jerry_release_value (array_value);
        -: 6399:
    #####: 6400:  jerry_cleanup ();
        -: 6401:  return 0;
        -: 6402:}
        -: 6403:```
        -: 6404:
        -: 6405:**See also**
        -: 6406:
        -: 6407:- [jerry_well_known_symbol_t](#jerry_well_known_symbol_t)
        -: 6408:
        -: 6409:## jerry_get_symbol_description
        -: 6410:
        -: 6411:**Summary**
        -: 6412:
        -: 6413:Returns with the `[[Description]]` internal property of a symbol value.
        -: 6414:
        -: 6415:*Notes*:
        -: 6416:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6417:  is no longer needed.
        -: 6418:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 6419:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 6420:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6421:- The es.next profile enables this by default.
        -: 6422:- If the symbol support is not enabled an error will be returned.
        -: 6423:
        -: 6424:**Prototype**
        -: 6425:
        -: 6426:```c
        -: 6427:jerry_value_t
        -: 6428:jerry_get_symbol_description (const jerry_value_t value);
        -: 6429:```
        -: 6430:
        -: 6431:- `value` - symbol value
        -: 6432:- return value
        -: 6433:  - string or undefined value containing the symbol's description - if success
        -: 6434:  - thrown error, otherwise
        -: 6435:
        -: 6436:*New in version 2.4*.
        -: 6437:
        -: 6438:**Example**
        -: 6439:
        -: 6440:[doctest]: # ()
        -: 6441:
        -: 6442:```c
        -: 6443:#include "jerryscript.h"
        -: 6444:
        -: 6445:int
    #####: 6446:main (void)
        -: 6447:{
    #####: 6448:  jerry_init (JERRY_INIT_EMPTY);
        -: 6449:
    #####: 6450:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "foo");
    #####: 6451:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 6452:
    #####: 6453:  jerry_release_value (string_value);
        -: 6454:
    #####: 6455:  jerry_value_t symbol_description = jerry_get_symbol_description (symbol_value);
        -: 6456:
        -: 6457:  // usage of symbol_desc_string
        -: 6458:
    #####: 6459:  jerry_release_value (symbol_description);
    #####: 6460:  jerry_release_value (symbol_value);
        -: 6461:
    #####: 6462:  jerry_cleanup ();
        -: 6463:  return 0;
        -: 6464:}
        -: 6465:```
        -: 6466:
        -: 6467:**See also**
        -: 6468:
        -: 6469:- [jerry_get_symbol_descriptive_string](#jerry_get_symbol_descriptive_string)
        -: 6470:
        -: 6471:## jerry_get_symbol_descriptive_string
        -: 6472:
        -: 6473:**Summary**
        -: 6474:
        -: 6475:Call the SymbolDescriptiveString ecma builtin operation on the API value.
        -: 6476:Based on ECMA 262 v6 19.4.3.2.1 this is in the form of `Symbol(<description>)`.
        -: 6477:
        -: 6478:*Notes*:
        -: 6479:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6480:  is no longer needed.
        -: 6481:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 6482:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 6483:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6484:- The es.next profile enables this by default.
        -: 6485:- If the symbol support is not enabled an error will be returned.
        -: 6486:
        -: 6487:**Prototype**
        -: 6488:
        -: 6489:```c
        -: 6490:jerry_value_t
        -: 6491:jerry_get_symbol_descriptive_string (const jerry_value_t value);
        -: 6492:```
        -: 6493:
        -: 6494:- `value` - symbol value
        -: 6495:- return value
        -: 6496:  - string value containing the symbol's descriptive string - if success
        -: 6497:  - thrown error, otherwise
        -: 6498:
        -: 6499:*New in version 2.0*.
        -: 6500:
        -: 6501:**Example**
        -: 6502:
        -: 6503:[doctest]: # ()
        -: 6504:
        -: 6505:```c
        -: 6506:#include "jerryscript.h"
        -: 6507:
        -: 6508:int
    #####: 6509:main (void)
        -: 6510:{
    #####: 6511:  jerry_init (JERRY_INIT_EMPTY);
        -: 6512:
    #####: 6513:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "foo");
    #####: 6514:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 6515:
    #####: 6516:  jerry_release_value (string_value);
        -: 6517:
    #####: 6518:  jerry_value_t symbol_desc_string = jerry_get_symbol_descriptive_string (symbol_value);
        -: 6519:
        -: 6520:  // usage of symbol_desc_string
        -: 6521:
    #####: 6522:  jerry_release_value (symbol_desc_string);
    #####: 6523:  jerry_release_value (symbol_value);
        -: 6524:
    #####: 6525:  jerry_cleanup ();
        -: 6526:  return 0;
        -: 6527:}
        -: 6528:```
        -: 6529:
        -: 6530:**See also**
        -: 6531:
        -: 6532:- [jerry_get_symbol_description](#jerry_get_symbol_description)
        -: 6533:
        -: 6534:# Functions for BigInts
        -: 6535:
        -: 6536:These APIs all depend on build option (`JERRY_BUILTIN_BIGINT`).
        -: 6537:
        -: 6538:## jerry_get_bigint_size_in_digits
        -: 6539:
        -: 6540:**Summary**
        -: 6541:
        -: 6542:Returns the size of uint64 digits of a BigInt value. This value is the
        -: 6543:minimum size of the buffer which can hold all digits of a BigInt value when
        -: 6544:the digits are retreived by `[jerry_get_bigint_digits](#jerry_get_bigint_digits)`.
        -: 6545:
        -: 6546:*Notes*:
        -: 6547:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 6548:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 6549:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6550:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6551:  is no longer needed.
        -: 6552:
        -: 6553:**Prototype**
        -: 6554:
        -: 6555:```c
        -: 6556:uint32_t
        -: 6557:jerry_get_bigint_size_in_digits (jerry_value_t value)
        -: 6558:```
        -: 6559:
        -: 6560:- `value` - BigInt value
        -: 6561:- return value
        -: 6562:  - number of digits (can be zero for BigInt zero)
        -: 6563:  - if value is not a BigInt value, it returns with zero
        -: 6564:
        -: 6565:*New in version 2.4*.
        -: 6566:
        -: 6567:**Example**
        -: 6568:
        -: 6569:[doctest]: # ()
        -: 6570:
        -: 6571:```c
        -: 6572:#include "jerryscript.h"
        -: 6573:
        -: 6574:int
    #####: 6575:main (void)
        -: 6576:{
    #####: 6577:  jerry_init (JERRY_INIT_EMPTY);
        -: 6578:
    #####: 6579:  uint64_t digits[4] = { 0x1, 0x1, 0x0, 0x0 };
    #####: 6580:  jerry_value_t bigint_value = jerry_create_bigint (digits, 4, true);
        -: 6581:
        -: 6582:  /* Prints two, because the leading zeroes in digits buffer are discarded. */
    #####: 6583:  printf("size: %d\n", (int) jerry_get_bigint_size_in_digits (bigint_value));
        -: 6584:
    #####: 6585:  jerry_release_value (bigint_value);
        -: 6586:
    #####: 6587:  jerry_cleanup ();
        -: 6588:  return 0;
        -: 6589:}
        -: 6590:```
        -: 6591:
        -: 6592:**See also**
        -: 6593:
        -: 6594:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 6595:- [jerry_get_bigint_digits](#jerry_get_bigint_digits)
        -: 6596:
        -: 6597:
        -: 6598:## jerry_get_bigint_digits
        -: 6599:
        -: 6600:**Summary**
        -: 6601:
        -: 6602:Copies the uint64 digits of a BigInt value into a buffer. This function supports any
        -: 6603:buffer sizes. If the buffer size is smaller than the size returned by
        -: 6604:`[jerry_get_bigint_size_in_digits](#jerry_get_bigint_size_in_digits)`, only the
        -: 6605:least significant digits are copied into the buffer. If the buffer size is greater,
        -: 6606:the unused digits are filled with zero.
        -: 6607:
        -: 6608:*Notes*:
        -: 6609:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 6610:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 6611:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6612:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6613:  is no longer needed.
        -: 6614:
        -: 6615:**Prototype**
        -: 6616:
        -: 6617:```c
        -: 6618:void
        -: 6619:jerry_get_bigint_digits (jerry_value_t value, uint64_t *digits_p, uint32_t size, bool *sign_p)
        -: 6620:```
        -: 6621:
        -: 6622:- `value` - BigInt value
        -: 6623:- `digits_p` - output buffer for digits
        -: 6624:- `size` - size of the output buffer
        -: 6625:- `sign_p` - the boolean passed to the function is set to false when the BigInt
        -: 6626:             is positive, and set to true otherwise (this parameter can be NULL)
        -: 6627:
        -: 6628:*New in version 2.4*.
        -: 6629:
        -: 6630:**Example**
        -: 6631:
        -: 6632:[doctest]: # ()
        -: 6633:
        -: 6634:```c
        -: 6635:#include "jerryscript.h"
        -: 6636:
        -: 6637:int
    #####: 6638:main (void)
        -: 6639:{
    #####: 6640:  jerry_init (JERRY_INIT_EMPTY);
        -: 6641:
    #####: 6642:  uint64_t digits[4] = { 0x1, 0x1, 0x0, 0x0 };
    #####: 6643:  jerry_value_t bigint_value = jerry_create_bigint (digits, 4, true);
        -: 6644:
        -: 6645:  uint64_t get_digits[4];
        -: 6646:  bool sign;
    #####: 6647:  jerry_get_bigint_digits (bigint_value, get_digits, 2, &sign);
        -: 6648:
    #####: 6649:  jerry_release_value (bigint_value);
        -: 6650:
    #####: 6651:  jerry_cleanup ();
        -: 6652:  return 0;
        -: 6653:}
        -: 6654:```
        -: 6655:
        -: 6656:**See also**
        -: 6657:
        -: 6658:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 6659:- [jerry_get_bigint_size_in_digits](#jerry_get_bigint_size_in_digits)
        -: 6660:
        -: 6661:
        -: 6662:# Functions for Proxy objects
        -: 6663:
        -: 6664:These APIs all depend on build option (`JERRY_BUILTIN_PROXY`).
        -: 6665:
        -: 6666:## jerry_get_proxy_target
        -: 6667:
        -: 6668:**Summary**
        -: 6669:
        -: 6670:Gets the target object of a Proxy object.
        -: 6671:
        -: 6672:*Notes*:
        -: 6673:- This API depends on a build option (`JERRY_BUILTIN_PROXY`) and can be checked
        -: 6674:  in runtime with the `JERRY_FEATURE_PROXY` feature enum value,
        -: 6675:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6676:- The es.next profile enables this by default.
        -: 6677:
        -: 6678:
        -: 6679:**Prototype**
        -: 6680:
        -: 6681:```c
        -: 6682:jerry_value_t
        -: 6683:jerry_get_proxy_target (jerry_value_t proxy_value);
        -: 6684:```
        -: 6685:
        -: 6686:- `proxy_value` - Proxy object value
        -: 6687:- return value
        -: 6688:  - type error - if proxy_value is not a Proxy object
        -: 6689:  - target object - otherwise
        -: 6690:
        -: 6691:*New in version 2.4*.
        -: 6692:
        -: 6693:**Example**
        -: 6694:
        -: 6695:```c
        -: 6696:{
        -: 6697:  jerry_value_t target = jerry_create_object ();
        -: 6698:  jerry_value_t handler = jerry_create_object ();
        -: 6699:  jerry_value_t proxy = jerry_create_proxy (target, handler);
        -: 6700:
        -: 6701:  jerry_release_value (target);
        -: 6702:  jerry_release_value (handler);
        -: 6703:
        -: 6704:  target = jerry_get_proxy_target (proxy);
        -: 6705:
        -: 6706:  // ... usage of the target
        -: 6707:
        -: 6708:  jerry_release_value (target);
        -: 6709:  jerry_release_value (proxy);
        -: 6710:}
        -: 6711:```
        -: 6712:
        -: 6713:**See also**
        -: 6714:
        -: 6715:- [jerry_create_proxy](#jerry_create_proxy)
        -: 6716:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 6717:- [jerry_get_proxy_handler](#jerry_get_proxy_handler)
        -: 6718:
        -: 6719:## jerry_get_proxy_handler
        -: 6720:
        -: 6721:**Summary**
        -: 6722:
        -: 6723:Gets the handler object of a Proxy object.
        -: 6724:
        -: 6725:*Notes*:
        -: 6726:- This API depends on a build option (`JERRY_BUILTIN_PROXY`) and can be checked
        -: 6727:  in runtime with the `JERRY_FEATURE_PROXY` feature enum value,
        -: 6728:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 6729:- The es.next profile enables this by default.
        -: 6730:
        -: 6731:
        -: 6732:**Prototype**
        -: 6733:
        -: 6734:```c
        -: 6735:jerry_value_t
        -: 6736:jerry_get_proxy_handler (jerry_value_t proxy_value);
        -: 6737:```
        -: 6738:
        -: 6739:- `proxy_value` - Proxy object value
        -: 6740:- return value
        -: 6741:  - type error - if proxy_value is not a Proxy object
        -: 6742:  - handler object - otherwise
        -: 6743:
        -: 6744:*New in version [[NEXT_RELEASE]]*.
        -: 6745:
        -: 6746:**Example**
        -: 6747:
        -: 6748:```c
        -: 6749:{
        -: 6750:  jerry_value_t target = jerry_create_object ();
        -: 6751:  jerry_value_t handler = jerry_create_object ();
        -: 6752:  jerry_value_t proxy = jerry_create_proxy (target, handler);
        -: 6753:
        -: 6754:  jerry_release_value (target);
        -: 6755:  jerry_release_value (handler);
        -: 6756:
        -: 6757:  handler = jerry_get_proxy_handler (proxy);
        -: 6758:
        -: 6759:  // ... usage of the handler
        -: 6760:
        -: 6761:  jerry_release_value (handler);
        -: 6762:  jerry_release_value (proxy);
        -: 6763:}
        -: 6764:```
        -: 6765:
        -: 6766:**See also**
        -: 6767:
        -: 6768:- [jerry_create_proxy](#jerry_create_proxy)
        -: 6769:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 6770:- [jerry_get_proxy_target](#jerry_get_proxy_target)
        -: 6771:
        -: 6772:
        -: 6773:# Acquire and release API values
        -: 6774:
        -: 6775:## jerry_acquire_value
        -: 6776:
        -: 6777:**Summary**
        -: 6778:
        -: 6779:Acquires the specified Jerry API value.
        -: 6780:
        -: 6781:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6782:is no longer needed.
        -: 6783:
        -: 6784:**Prototype**
        -: 6785:
        -: 6786:```c
        -: 6787:jerry_value_t
        -: 6788:jerry_acquire_value (jerry_value_t value);
        -: 6789:```
        -: 6790:
        -: 6791:- `value` - api value
        -: 6792:- return value - acquired value that may be used outside of the engine
        -: 6793:
        -: 6794:**Example**
        -: 6795:
        -: 6796:```c
        -: 6797:{
        -: 6798:  jerry_value_t object_value = jerry_create_object ();
        -: 6799:
        -: 6800:  jerry_value_t acquired_object = jerry_acquire_value (object_value);
        -: 6801:
        -: 6802:  jerry_release_value (object_value);
        -: 6803:
        -: 6804:  // acquired_object refers to the created object and makes it
        -: 6805:  // available after the release of 'object_value'
        -: 6806:
        -: 6807:  jerry_release_value (acquired_object);
        -: 6808:}
        -: 6809:```
        -: 6810:
        -: 6811:**See also**
        -: 6812:
        -: 6813:- [jerry_release_value](#jerry_release_value)
        -: 6814:- [jerry_value_t](#jerry_value_t)
        -: 6815:
        -: 6816:
        -: 6817:## jerry_release_value
        -: 6818:
        -: 6819:**Summary**
        -: 6820:
        -: 6821:Release specified Jerry API value.
        -: 6822:
        -: 6823:**Prototype**
        -: 6824:
        -: 6825:```c
        -: 6826:void
        -: 6827:jerry_release_value (jerry_value_t value);
        -: 6828:```
        -: 6829:
        -: 6830:- `value` - api value
        -: 6831:
        -: 6832:**Example**
        -: 6833:
        -: 6834:```c
        -: 6835:{
        -: 6836:  jerry_value_t object_value = jerry_create_object ();
        -: 6837:
        -: 6838:  ...
        -: 6839:
        -: 6840:  jerry_release_value (object_value);
        -: 6841:}
        -: 6842:```
        -: 6843:
        -: 6844:
        -: 6845:# Create API values
        -: 6846:
        -: 6847:Function for creating [API values](#jerry_value_t).
        -: 6848:
        -: 6849:*Note*: Every created API value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6850:is no longer needed.
        -: 6851:
        -: 6852:## jerry_create_array
        -: 6853:
        -: 6854:**Summary**
        -: 6855:
        -: 6856:Create an array object value.
        -: 6857:
        -: 6858:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 6859:is no longer needed.
        -: 6860:
        -: 6861:**Prototype**
        -: 6862:
        -: 6863:```c
        -: 6864:jerry_value_t
        -: 6865:jerry_create_array (uint32_t size);
        -: 6866:```
        -: 6867:
        -: 6868: - `size` - size of array;
        -: 6869: - return value - value of the constructed array object
        -: 6870:
        -: 6871: **Example**
        -: 6872:
        -: 6873:```c
        -: 6874:{
        -: 6875:    jerry_value_t array = jerry_create_array (10);
        -: 6876:
        -: 6877:    ...
        -: 6878:
        -: 6879:    jerry_release_value (array);
        -: 6880:}
        -: 6881:```
        -: 6882:
        -: 6883:**See also**
        -: 6884:
        -: 6885:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 6886:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 6887:
        -: 6888:
        -: 6889:## jerry_create_arraybuffer
        -: 6890:
        -: 6891:**Summary**
        -: 6892:
        -: 6893:Create a jerry_value_t representing an ArrayBuffer object.
        -: 6894:
        -: 6895:*Note*:
        -: 6896:  - This API depends on the es.next profile.
        -: 6897:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 6898:    when it is no longer needed.
        -: 6899:
        -: 6900:**Prototype**
        -: 6901:
        -: 6902:```c
        -: 6903:jerry_value_t
        -: 6904:jerry_create_arraybuffer (jerry_length_t size);
        -: 6905:```
        -: 6906:
        -: 6907: - `size` - size of the ArrayBuffer to create **in bytes**
        -: 6908: - return value - the new ArrayBuffer as a `jerry_value_t`
        -: 6909:
        -: 6910:*New in version 2.0*.
        -: 6911:
        -: 6912:**Example**
        -: 6913:
        -: 6914:```c
        -: 6915:{
        -: 6916:  jerry_value_t buffer_value = jerry_create_arraybuffer (15);
        -: 6917:
        -: 6918:  ... // use the ArrayBuffer
        -: 6919:
        -: 6920:  jerry_release_value (buffer_value);
        -: 6921:}
        -: 6922:```
        -: 6923:
        -: 6924:**See also**
        -: 6925:
        -: 6926:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 6927:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 6928:- [jerry_value_is_arraybuffer](#jerry_value_is_arraybuffer)
        -: 6929:- [jerry_release_value](#jerry_release_value)
        -: 6930:
        -: 6931:
        -: 6932:## jerry_create_arraybuffer_external
        -: 6933:
        -: 6934:**Summary**
        -: 6935:
        -: 6936:Creates a jerry_value_t representing an ArrayBuffer object with
        -: 6937:user specified back-buffer.
        -: 6938:
        -: 6939:User must pass a buffer pointer which is at least `size` big.
        -: 6940:After the object is not needed the GC will call the `free_cb`
        -: 6941:so the user can release the buffer which was provided.
        -: 6942:
        -: 6943:*Note*:
        -: 6944:  - This API depends on the es.next profile.
        -: 6945:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 6946:    when it is no longer needed.
        -: 6947:
        -: 6948:**Prototype**
        -: 6949:
        -: 6950:```c
        -: 6951:jerry_value_t
        -: 6952:jerry_create_arraybuffer_external (const jerry_length_t size
        -: 6953:                                   uint8_t *buffer_p,
        -: 6954:                                   jerry_value_free_callback_t free_cb);
        -: 6955:```
        -: 6956:
        -: 6957:- `size` - size of the buffer to use **in bytes** (should not be 0)
        -: 6958:- `buffer_p` - the buffer used for the Array Buffer object (should not be a null pointer)
        -: 6959:- `free_cb` - the callback function called when the object is released
        -: 6960:- return value
        -: 6961:  - the new ArrayBuffer as a `jerry_value_t`
        -: 6962:  - if the `size` is zero or `buffer_p` is a null pointer this will return an empty ArrayBuffer.
        -: 6963:
        -: 6964:*New in version 2.0*.
        -: 6965:
        -: 6966:*Changed in version [[NEXT_RELEASE]]*: type of `free_cb` has been changed.
        -: 6967:
        -: 6968:**Example**
        -: 6969:
        -: 6970:```c
        -: 6971:{
        -: 6972:  uint8_t buffer_p[15];
        -: 6973:  jerry_value_t buffer_value = jerry_create_arraybuffer_external (15, buffer_p, NULL);
        -: 6974:
        -: 6975:  ... // use the array buffer
        -: 6976:
        -: 6977:  jerry_release_value (buffer_value);
        -: 6978:}
        -: 6979:```
        -: 6980:
        -: 6981:**See also**
        -: 6982:
        -: 6983:- [jerry_get_arraybuffer_pointer](#jerry_get_arraybuffer_pointer)
        -: 6984:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 6985:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 6986:- [jerry_value_is_arraybuffer](#jerry_value_is_arraybuffer)
        -: 6987:- [jerry_release_value](#jerry_release_value)
        -: 6988:- [jerry_object_native_free_callback_t](#jerry_object_native_free_callback_t)
        -: 6989:
        -: 6990:
        -: 6991:## jerry_create_shared_arraybuffer
        -: 6992:
        -: 6993:**Summary**
        -: 6994:
        -: 6995:Create a jerry_value_t representing a SharedArrayBuffer object.
        -: 6996:
        -: 6997:*Note*:
        -: 6998:- This API depends on the es.next profile.
        -: 6999:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7000:  when it is no longer needed.
        -: 7001:
        -: 7002:**Prototype**
        -: 7003:
        -: 7004:```c
        -: 7005:jerry_value_t
        -: 7006:jerry_create_shared_arraybuffer (jerry_length_t size);
        -: 7007:```
        -: 7008:
        -: 7009:- `size` - size of the SharedArrayBuffer to create **in bytes**
        -: 7010:- return value - the new SharedArrayBuffer as a `jerry_value_t`
        -: 7011:
        -: 7012:*New in version [[NEXT_RELEASE]]*.
        -: 7013:
        -: 7014:**Example**
        -: 7015:
        -: 7016:```c
        -: 7017:{
        -: 7018:  jerry_value_t buffer_value = jerry_create_shared_arraybuffer (15);
        -: 7019:
        -: 7020:  ... // use the SharedArrayBuffer
        -: 7021:
        -: 7022:  jerry_release_value (buffer_value);
        -: 7023:}
        -: 7024:```
        -: 7025:
        -: 7026:**See also**
        -: 7027:
        -: 7028:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 7029:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 7030:- [jerry_value_is_shared_arraybuffer](#jerry_value_is_shared_arraybuffer)
        -: 7031:- [jerry_release_value](#jerry_release_value)
        -: 7032:
        -: 7033:
        -: 7034:## jerry_create_shared_arraybuffer_external
        -: 7035:
        -: 7036:**Summary**
        -: 7037:
        -: 7038:Creates a jerry_value_t representing an SharedArrayBuffer object with
        -: 7039:user specified back-buffer.
        -: 7040:
        -: 7041:User must pass a buffer pointer which is at least `size` big.
        -: 7042:After the object is not needed the GC will call the `free_cb`
        -: 7043:so the user can release the buffer which was provided.
        -: 7044:
        -: 7045:*Note*:
        -: 7046:- This API depends on the es.next profile.
        -: 7047:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7048:  when it is no longer needed.
        -: 7049:
        -: 7050:**Prototype**
        -: 7051:
        -: 7052:```c
        -: 7053:jerry_value_t
        -: 7054:jerry_create_shared_arraybuffer_external (const jerry_length_t size
        -: 7055:                                          uint8_t *buffer_p,
        -: 7056:                                          jerry_value_free_callback_t free_cb);
        -: 7057:```
        -: 7058:
        -: 7059:- `size` - size of the buffer to use **in bytes** (should not be 0)
        -: 7060:- `buffer_p` - the buffer used for the Shared Array Buffer object (should not be a null pointer)
        -: 7061:- `free_cb` - the callback function called when the object is released
        -: 7062:- return value
        -: 7063:    - the new SharedArrayBuffer as a `jerry_value_t`
        -: 7064:    - if the `size` is zero or `buffer_p` is a null pointer this will return an empty SharedArrayBuffer.
        -: 7065:
        -: 7066:*New in version [[NEXT_RELEASE]]*.
        -: 7067:
        -: 7068:**Example**
        -: 7069:
        -: 7070:```c
        -: 7071:{
        -: 7072:  uint8_t buffer_p[15];
        -: 7073:  jerry_value_t buffer_value = jerry_create_shared_arraybuffer_external (15, buffer_p, NULL);
        -: 7074:
        -: 7075:  ... // use the shared array buffer
        -: 7076:
        -: 7077:  jerry_release_value (buffer_value);
        -: 7078:}
        -: 7079:```
        -: 7080:
        -: 7081:**See also**
        -: 7082:
        -: 7083:- [jerry_get_arraybuffer_pointer](#jerry_get_arraybuffer_pointer)
        -: 7084:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 7085:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 7086:- [jerry_value_is_shared_arraybuffer](#jerry_value_is_shared_arraybuffer)
        -: 7087:- [jerry_release_value](#jerry_release_value)
        -: 7088:- [jerry_object_native_free_callback_t](#jerry_object_native_free_callback_t)
        -: 7089:
        -: 7090:
        -: 7091:## jerry_create_boolean
        -: 7092:
        -: 7093:**Summary**
        -: 7094:
        -: 7095:Create a jerry_value_t representing a boolean value from the given boolean parameter.
        -: 7096:
        -: 7097:*Notes*:
        -: 7098:- The boolean values (true/false) are fixed constants. Their values can be copied any number of times without calling
        -: 7099: [jerry_acquire_value](#jerry_acquire_value), and freeing it with [jerry_release_value](#jerry_release_value) is optional.
        -: 7100:
        -: 7101:**Prototype**
        -: 7102:
        -: 7103:```c
        -: 7104:jerry_value_t
        -: 7105:jerry_create_boolean (bool value);
        -: 7106:```
        -: 7107:
        -: 7108:- `value` - raw boolean value.
        -: 7109:- return value - a `jerry_value_t` created from the given boolean argument.
        -: 7110:
        -: 7111:**Example**
        -: 7112:
        -: 7113:```c
        -: 7114:{
        -: 7115:  jerry_value_t boolean_value = jerry_create_boolean (true);
        -: 7116:
        -: 7117:  ... // usage of the value
        -: 7118:
        -: 7119:  jerry_release_value (boolean_value);
        -: 7120:}
        -: 7121:```
        -: 7122:
        -: 7123:**See also**
        -: 7124:
        -: 7125:- [jerry_release_value](#jerry_release_value)
        -: 7126:
        -: 7127:
        -: 7128:## jerry_create_error
        -: 7129:
        -: 7130:**Summary**
        -: 7131:
        -: 7132:Create new JavaScript error object.
        -: 7133:
        -: 7134:Important! The `error_type` argument *must not be* `JERRY_ERROR_NONE`.
        -: 7135:Creating an error with no error type is not valid.
        -: 7136:
        -: 7137:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7138:is no longer needed.
        -: 7139:
        -: 7140:**Prototype**
        -: 7141:
        -: 7142:```c
        -: 7143:jerry_value_t
        -: 7144:jerry_create_error (jerry_error_t error_type,
        -: 7145:                    const jerry_char_t *message_p);
        -: 7146:```
        -: 7147:
        -: 7148:- `error_type` - type of error
        -: 7149:- `message_p` - value of 'message' property of constructed error object
        -: 7150:- return value - value of the constructed error object
        -: 7151:
        -: 7152:**Example**
        -: 7153:
        -: 7154:```c
        -: 7155:{
        -: 7156:  jerry_value_t error_obj = jerry_create_error (JERRY_ERROR_TYPE,
        -: 7157:                                                (const jerry_char_t *) "error");
        -: 7158:
        -: 7159:  ... // usage of error_obj
        -: 7160:
        -: 7161:
        -: 7162:  jerry_release_value (error_obj);
        -: 7163:}
        -: 7164:```
        -: 7165:
        -: 7166:**See also**
        -: 7167:
        -: 7168:- [jerry_value_is_error](#jerry_value_is_error)
        -: 7169:- [jerry_get_value_from_error](#jerry_get_value_from_error)
        -: 7170:- [jerry_create_error_from_value](#jerry_create_error_from_value)
        -: 7171:
        -: 7172:
        -: 7173:## jerry_create_error_sz
        -: 7174:
        -: 7175:**Summary**
        -: 7176:
        -: 7177:Create new JavaScript error object.
        -: 7178:
        -: 7179:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7180:is no longer needed.
        -: 7181:
        -: 7182:**Prototype**
        -: 7183:
        -: 7184:```c
        -: 7185:jerry_value_t
        -: 7186:jerry_create_error_sz (jerry_error_t error_type,
        -: 7187:                       const jerry_char_t *message_p,
        -: 7188:                       jerry_size_t message_size);
        -: 7189:```
        -: 7190:
        -: 7191:- `error_type` - type of the error
        -: 7192:- `message_p` - value of 'message' property of the constructed error object
        -: 7193:- `message_size` - size of the message in bytes
        -: 7194:- return value - value of the constructed error object
        -: 7195:
        -: 7196:**Example**
        -: 7197:
        -: 7198:```c
        -: 7199:{
        -: 7200:  const jerry_char_t message[] = "error";
        -: 7201:  jerry_value_t error_obj = jerry_create_error_sz (JERRY_ERROR_COMMON,
        -: 7202:                                                   message,
        -: 7203:                                                   sizeof (message) - 1);
        -: 7204:
        -: 7205:  ... // usage of error_obj
        -: 7206:
        -: 7207:  jerry_release_value (error_obj);
        -: 7208:}
        -: 7209:```
        -: 7210:
        -: 7211:**See also**
        -: 7212:
        -: 7213:- [jerry_create_error](#jerry_create_error)
        -: 7214:
        -: 7215:
        -: 7216:## jerry_create_dataview
        -: 7217:
        -: 7218:**Summary**
        -: 7219:
        -: 7220:Create new JavaScript DataView object.
        -: 7221:
        -: 7222:*Note*:
        -: 7223:  - This API depends on the es.next profile.
        -: 7224:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7225:    when it is no longer needed.
        -: 7226:
        -: 7227:**Prototype**
        -: 7228:
        -: 7229:```c
        -: 7230:jerry_value_t
        -: 7231:jerry_create_dataview (const jerry_value_t array_buffer,
        -: 7232:                       const jerry_length_t byte_offset,
        -: 7233:                       const jerry_length_t byte_length)
        -: 7234:```
        -: 7235:
        -: 7236:- `array_buffer` - arrayBuffer to create DataView from
        -: 7237:- `byte_offset` - offset in bytes, to the first byte in the buffer
        -: 7238:- `byte_length` - number of elements in the byte array
        -: 7239:- return value
        -: 7240:  - value of the constructed DataView object - if success
        -: 7241:  - created error - otherwise
        -: 7242:
        -: 7243:*New in version 2.0*.
        -: 7244:
        -: 7245:**Example**
        -: 7246:
        -: 7247:[doctest]: # ()
        -: 7248:
        -: 7249:```c
        -: 7250:#include "jerryscript.h"
        -: 7251:
        -: 7252:int
    #####: 7253:main (void)
        -: 7254:{
    #####: 7255:  jerry_init (JERRY_INIT_EMPTY);
        -: 7256:
    #####: 7257:  jerry_value_t arraybuffer = jerry_create_arraybuffer (16);
    #####: 7258:  jerry_value_t dataview = jerry_create_dataview (arraybuffer, 0, 16);
        -: 7259:
        -: 7260:  // usage of dataview
        -: 7261:
    #####: 7262:  jerry_release_value (dataview);
    #####: 7263:  jerry_release_value (arraybuffer);
        -: 7264:
    #####: 7265:  jerry_cleanup ();
        -: 7266:  return 0;
        -: 7267:}
        -: 7268:```
        -: 7269:
        -: 7270:**See also**
        -: 7271:
        -: 7272:- [jerry_value_is_dataview](#jerry_value_is_dataview)
        -: 7273:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -: 7274:
        -: 7275:
        -: 7276:## jerry_create_external_function
        -: 7277:
        -: 7278:**Summary**
        -: 7279:
        -: 7280:Create an external function object.
        -: 7281:
        -: 7282:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7283:is no longer needed.
        -: 7284:
        -: 7285:**Prototype**
        -: 7286:
        -: 7287:```c
        -: 7288:jerry_value_t
        -: 7289:jerry_create_external_function (jerry_external_handler_t handler_p);
        -: 7290:```
        -: 7291:
        -: 7292:- `handler_p` - pointer to native handler of the function object
        -: 7293:- return value - value of the constructed function object
        -: 7294:
        -: 7295:**Example**
        -: 7296:
        -: 7297:[doctest]: # ()
        -: 7298:
        -: 7299:```c
        -: 7300:#include <stdio.h>
        -: 7301:#include <string.h>
        -: 7302:#include "jerryscript.h"
        -: 7303:
        -: 7304:static jerry_value_t
    #####: 7305:handler (const jerry_call_info_t *call_info_p,
        -: 7306:         const jerry_value_t args_p[],
        -: 7307:         const jerry_length_t args_cnt)
        -: 7308:{
    #####: 7309:  printf ("Native handler called!\n");
        -: 7310:
    #####: 7311:  return jerry_create_boolean (true);
        -: 7312:}
        -: 7313:
        -: 7314:int
    #####: 7315:main (void)
        -: 7316:{
    #####: 7317:  jerry_init (JERRY_INIT_EMPTY);
        -: 7318:
    #####: 7319:  jerry_value_t func_val = jerry_create_external_function (handler);
    #####: 7320:  jerry_value_t glob_obj = jerry_get_global_object ();
        -: 7321:
        -: 7322:  // after this, script can invoke the native handler through "handler_field (1, 2, 3);"
    #####: 7323:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "handler_field");
        -: 7324:  // set property and release the return value without any check
    #####: 7325:  jerry_release_value (jerry_set_property (glob_obj, prop_name, func_val));
    #####: 7326:  jerry_release_value (prop_name);
        -: 7327:
    #####: 7328:  jerry_release_value (func_val);
    #####: 7329:  jerry_release_value (glob_obj);
        -: 7330:
        -: 7331:  // Test the method by calling it
    #####: 7332:  const char *test_src = "handler_field ();";
    #####: 7333:  jerry_value_t ret_val = jerry_eval ((const jerry_char_t *) test_src,
        -: 7334:                                      strlen (test_src),
        -: 7335:                                      JERRY_PARSE_NO_OPTS);
        -: 7336:  // release the eval result
    #####: 7337:  jerry_release_value (ret_val);
    #####: 7338:  jerry_cleanup ();
        -: 7339:  return 0;
        -: 7340:}
        -: 7341:```
        -: 7342:
        -: 7343:**See also**
        -: 7344:
        -: 7345:- [jerry_external_handler_t](#jerry_external_handler_t)
        -: 7346:- [jerry_set_property](#jerry_set_property)
        -: 7347:- [jerry_call_function](#jerry_call_function)
        -: 7348:
        -: 7349:
        -: 7350:## jerry_create_number
        -: 7351:
        -: 7352:**Summary**
        -: 7353:
        -: 7354:Creates a `jerry_value_t` representing a number value.
        -: 7355:
        -: 7356:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7357:is no longer needed.
        -: 7358:
        -: 7359:**Prototype**
        -: 7360:
        -: 7361:```c
        -: 7362:jerry_value_t
        -: 7363:jerry_create_number (double value);
        -: 7364:```
        -: 7365:
        -: 7366:- `value` - double value from which a `jerry_value_t` will be created
        -: 7367:- return value - a `jerry_value_t` created from the given double argument
        -: 7368:
        -: 7369:**Example**
        -: 7370:
        -: 7371:```c
        -: 7372:{
        -: 7373:  jerry_value_t number_value = jerry_create_number (3.14);
        -: 7374:
        -: 7375:  ... // usage of the value
        -: 7376:
        -: 7377:  jerry_release_value (number_value);
        -: 7378:}
        -: 7379:```
        -: 7380:
        -: 7381:**See also**
        -: 7382:
        -: 7383:- [jerry_release_value](#jerry_release_value)
        -: 7384:- [jerry_create_number_infinity](#jerry_create_number_infinity)
        -: 7385:- [jerry_create_number_nan](#jerry_create_number_nan)
        -: 7386:
        -: 7387:
        -: 7388:## jerry_create_number_infinity
        -: 7389:
        -: 7390:**Summary**
        -: 7391:
        -: 7392:Creates a `jerry_value_t` representing a positive or negative infinity value.
        -: 7393:
        -: 7394:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7395:is no longer needed.
        -: 7396:
        -: 7397:**Prototype**
        -: 7398:
        -: 7399:```c
        -: 7400:jerry_value_t
        -: 7401:jerry_create_number_infinity (bool sign);
        -: 7402:```
        -: 7403:
        -: 7404:- `sign` - true for negative Infinity and false for positive Infinity
        -: 7405:- return value - a `jerry_value_t` representing the infinity value
        -: 7406:
        -: 7407:**Example**
        -: 7408:
        -: 7409:```c
        -: 7410:{
        -: 7411:  jerry_value_t positive_inf_value = jerry_create_number_infinity (false);
        -: 7412:
        -: 7413:  ... // usage of the positive_inf_value
        -: 7414:
        -: 7415:  jerry_release_value (positive_inf_value);
        -: 7416:}
        -: 7417:```
        -: 7418:
        -: 7419:**See also**
        -: 7420:
        -: 7421:- [jerry_release_value](#jerry_release_value)
        -: 7422:- [jerry_create_number](#jerry_create_number)
        -: 7423:- [jerry_create_number_nan](#jerry_create_number_nan)
        -: 7424:
        -: 7425:
        -: 7426:## jerry_create_number_nan
        -: 7427:
        -: 7428:**Summary**
        -: 7429:
        -: 7430:Creates a `jerry_value_t` representing a not-a-number value.
        -: 7431:
        -: 7432:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7433:is no longer needed.
        -: 7434:
        -: 7435:**Prototype**
        -: 7436:
        -: 7437:```c
        -: 7438:jerry_value_t
        -: 7439:jerry_create_number_nan (void);
        -: 7440:```
        -: 7441:
        -: 7442:- return value - a `jerry_value_t` representing the not-a-number value
        -: 7443:
        -: 7444:**Example**
        -: 7445:
        -: 7446:```c
        -: 7447:{
        -: 7448:  jerry_value_t nan_value = jerry_create_number_nan ();
        -: 7449:
        -: 7450:  ... // usage of the nan_value
        -: 7451:
        -: 7452:  jerry_release_value (nan_value);
        -: 7453:}
        -: 7454:```
        -: 7455:
        -: 7456:**See also**
        -: 7457:
        -: 7458:- [jerry_release_value](#jerry_release_value)
        -: 7459:- [jerry_create_number](#jerry_create_number)
        -: 7460:- [jerry_create_number_infinity](#jerry_create_number_infinity)
        -: 7461:
        -: 7462:
        -: 7463:## jerry_create_null
        -: 7464:
        -: 7465:**Summary**
        -: 7466:
        -: 7467:Creates and returns a `jerry_value_t` with type null object.
        -: 7468:
        -: 7469:*Notes*:
        -: 7470:- The null value is a fixed constant. Its value can be copied any number of times without calling
        -: 7471: [jerry_acquire_value](#jerry_acquire_value), and freeing it with [jerry_release_value](#jerry_release_value) is optional.
        -: 7472:
        -: 7473:**Prototype**
        -: 7474:
        -: 7475:```c
        -: 7476:jerry_value_t
        -: 7477:jerry_create_null (void);
        -: 7478:```
        -: 7479:
        -: 7480:- return value - a `jerry_value_t` representing null.
        -: 7481:
        -: 7482:**Example**
        -: 7483:
        -: 7484:```c
        -: 7485:{
        -: 7486:  jerry_value_t null_value = jerry_create_null ();
        -: 7487:
        -: 7488:  ... // usage of the value
        -: 7489:
        -: 7490:  jerry_release_value (null_value);
        -: 7491:}
        -: 7492:```
        -: 7493:
        -: 7494:**See also**
        -: 7495:
        -: 7496:- [jerry_release_value](#jerry_release_value)
        -: 7497:
        -: 7498:
        -: 7499:## jerry_create_object
        -: 7500:
        -: 7501:**Summary**
        -: 7502:
        -: 7503:Create new JavaScript object, like with new Object().
        -: 7504:
        -: 7505:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7506:is no longer needed.
        -: 7507:
        -: 7508:**Prototype**
        -: 7509:
        -: 7510:```c
        -: 7511:jerry_value_t
        -: 7512:jerry_create_object (void);
        -: 7513:```
        -: 7514:
        -: 7515:- return value - value of the created object
        -: 7516:
        -: 7517:**Example**
        -: 7518:
        -: 7519:```c
        -: 7520:{
        -: 7521:  jerry_value_t object_value = jerry_create_object ();
        -: 7522:
        -: 7523:  ... // usage of object_value
        -: 7524:
        -: 7525:  jerry_release_value (object_value);
        -: 7526:}
        -: 7527:```
        -: 7528:
        -: 7529:**See also**
        -: 7530:
        -: 7531:- [jerry_release_value](#jerry_release_value)
        -: 7532:
        -: 7533:
        -: 7534:## jerry_create_promise
        -: 7535:
        -: 7536:**Summary**
        -: 7537:
        -: 7538:Create an empty promise object which can be resolved or rejected later
        -: 7539:by calling jerry_resolve_or_reject_promise.
        -: 7540:
        -: 7541:*Note*:
        -: 7542:  - This API depends on the es.next profile.
        -: 7543:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7544:    when it is no longer needed.
        -: 7545:
        -: 7546:**Prototype**
        -: 7547:
        -: 7548:```c
        -: 7549:jerry_value_t
        -: 7550:jerry_create_promise (void)
        -: 7551:```
        -: 7552:
        -: 7553:- return value - value of the newly created promise
        -: 7554:
        -: 7555:*New in version 2.0*.
        -: 7556:
        -: 7557:**Example**
        -: 7558:
        -: 7559:```c
        -: 7560:{
        -: 7561:  jerry_value_t p = jerry_create_promise ();
        -: 7562:
        -: 7563:  ...// usage of the promise
        -: 7564:
        -: 7565:  jerry_release_value (p);
        -: 7566:}
        -: 7567:```
        -: 7568:
        -: 7569:**See also**
        -: 7570:
        -: 7571:- [jerry_resolve_or_reject_promise](#jerry_resolve_or_reject_promise)
        -: 7572:- [jerry_release_value](#jerry_release_value)
        -: 7573:
        -: 7574:
        -: 7575:## jerry_create_proxy
        -: 7576:
        -: 7577:**Summary**
        -: 7578:
        -: 7579:Create a new Proxy object with the given target and handler.
        -: 7580:
        -: 7581:*Note*:
        -: 7582:  - This API depends on the es.next profile.
        -: 7583:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7584:    when it is no longer needed.
        -: 7585:
        -: 7586:**Prototype**
        -: 7587:
        -: 7588:```c
        -: 7589:jerry_value_t
        -: 7590:jerry_create_proxy (const jerry_value_t target,
        -: 7591:                    const jerry_value_t handler);
        -: 7592:```
        -: 7593:
        -: 7594:- `target` - proxy target
        -: 7595:- `handler` - proxy handler
        -: 7596:- return thrown error - if the Proxy construction fails
        -: 7597:         value of the newly created proxy object - otherwise
        -: 7598:
        -: 7599:*New in version 2.3*.
        -: 7600:
        -: 7601:**Example**
        -: 7602:
        -: 7603:[doctest]: # ()
        -: 7604:
        -: 7605:```c
        -: 7606:#include "jerryscript.h"
        -: 7607:
        -: 7608:int
    #####: 7609:main (void)
        -: 7610:{
    #####: 7611:  jerry_init (JERRY_INIT_EMPTY);
        -: 7612:
    #####: 7613:  jerry_value_t target = jerry_create_object ();
    #####: 7614:  jerry_value_t handler = jerry_create_object ();
    #####: 7615:  jerry_value_t proxy = jerry_create_proxy (target, handler);
        -: 7616:
    #####: 7617:  jerry_release_value (target);
    #####: 7618:  jerry_release_value (handler);
        -: 7619:
        -: 7620:  // usage of the proxy
        -: 7621:
    #####: 7622:  jerry_release_value (proxy);
        -: 7623:
    #####: 7624:  jerry_cleanup ();
        -: 7625:}
        -: 7626:```
        -: 7627:
        -: 7628:**See also**
        -: 7629:
        -: 7630:- [jerry_value_is_proxy](#jerry_value_is_proxy)
        -: 7631:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 7632:- [jerry_release_value](#jerry_release_value)
        -: 7633:
        -: 7634:
        -: 7635:## jerry_create_special_proxy
        -: 7636:
        -: 7637:**Summary**
        -: 7638:
        -: 7639:Create a new Proxy object with the given target and handler.
        -: 7640:The behaviour of the Proxy can be specialized with an options argument.
        -: 7641:
        -: 7642:*Note*:
        -: 7643:  - This API depends on the es.next profile.
        -: 7644:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7645:    when it is no longer needed.
        -: 7646:
        -: 7647:**Prototype**
        -: 7648:
        -: 7649:```c
        -: 7650:jerry_value_t
        -: 7651:jerry_create_special_proxy (const jerry_value_t target,
        -: 7652:                            const jerry_value_t handler,
        -: 7653:                            uint32_t options);
        -: 7654:```
        -: 7655:
        -: 7656:- `target` - proxy target
        -: 7657:- `handler` - proxy handler
        -: 7658:- `options` - any combination of [jerry_proxy_object_options_t](#jerry_proxy_object_options_t) options
        -: 7659:- return thrown error - if the Proxy construction fails
        -: 7660:         value of the newly created proxy object - otherwise
        -: 7661:
        -: 7662:*New in version [[NEXT_RELEASE]]*.
        -: 7663:
        -: 7664:**Example**
        -: 7665:
        -: 7666:[doctest]: # ()
        -: 7667:
        -: 7668:```c
        -: 7669:#include "jerryscript.h"
        -: 7670:
        -: 7671:int
    #####: 7672:main (void)
        -: 7673:{
    #####: 7674:  jerry_init (JERRY_INIT_EMPTY);
        -: 7675:
    #####: 7676:  jerry_value_t target = jerry_create_object ();
    #####: 7677:  jerry_value_t handler = jerry_create_object ();
    #####: 7678:  jerry_value_t proxy = jerry_create_special_proxy (target, handler, JERRY_PROXY_SKIP_RESULT_VALIDATION);
        -: 7679:
    #####: 7680:  jerry_release_value (target);
    #####: 7681:  jerry_release_value (handler);
        -: 7682:
        -: 7683:  // usage of the proxy
        -: 7684:
    #####: 7685:  jerry_release_value (proxy);
        -: 7686:
    #####: 7687:  jerry_cleanup ();
        -: 7688:}
        -: 7689:```
        -: 7690:
        -: 7691:**See also**
        -: 7692:
        -: 7693:- [jerry_value_is_proxy](#jerry_value_is_proxy)
        -: 7694:- [jerry_create_special_proxy](#jerry_create_special_proxy)
        -: 7695:- [jerry_release_value](#jerry_release_value)
        -: 7696:
        -: 7697:
        -: 7698:## jerry_create_string
        -: 7699:
        -: 7700:**Summary**
        -: 7701:
        -: 7702:Create string from a valid CESU8 string.
        -: 7703:
        -: 7704:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7705:is no longer needed.
        -: 7706:
        -: 7707:**Prototype**
        -: 7708:
        -: 7709:```c
        -: 7710:jerry_value_t
        -: 7711:jerry_create_string (const jerry_char_t *str_p);
        -: 7712:```
        -: 7713:
        -: 7714:- `str_p` - non-null pointer to string
        -: 7715:- return value - value of the created string
        -: 7716:
        -: 7717:**Example**
        -: 7718:
        -: 7719:```c
        -: 7720:{
        -: 7721:  const jerry_char_t char_array[] = "a string";
        -: 7722:  jerry_value_t string_value  = jerry_create_string (char_array);
        -: 7723:
        -: 7724:  ... // usage of string_value
        -: 7725:
        -: 7726:  jerry_release_value (string_value);
        -: 7727:}
        -: 7728:```
        -: 7729:
        -: 7730:**See also**
        -: 7731:
        -: 7732:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 7733:- [jerry_create_string_sz](#jerry_create_string_sz)
        -: 7734:
        -: 7735:
        -: 7736:## jerry_create_string_sz
        -: 7737:
        -: 7738:**Summary**
        -: 7739:
        -: 7740:Create string from a valid CESU8 string.
        -: 7741:
        -: 7742:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7743:is no longer needed.
        -: 7744:
        -: 7745:**Prototype**
        -: 7746:
        -: 7747:```c
        -: 7748:jerry_value_t
        -: 7749:jerry_create_string_sz (const jerry_char_t *str_p,
        -: 7750:                        jerry_size_t str_size)
        -: 7751:```
        -: 7752:
        -: 7753:- `str_p` - non-null pointer to string
        -: 7754:- `str_size` - size of the string
        -: 7755:- return value - value of the created string
        -: 7756:
        -: 7757:**Example**
        -: 7758:
        -: 7759:```c
        -: 7760:{
        -: 7761:  const jerry_char_t char_array[] = "a string";
        -: 7762:  jerry_value_t string_value  = jerry_create_string_sz (char_array,
        -: 7763:                                                        sizeof (char_array) - 1);
        -: 7764:
        -: 7765:  ... // usage of string_value
        -: 7766:
        -: 7767:  jerry_release_value (string_value);
        -: 7768:}
        -: 7769:
        -: 7770:```
        -: 7771:
        -: 7772:**See also**
        -: 7773:
        -: 7774:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 7775:- [jerry_create_string](#jerry_create_string)
        -: 7776:
        -: 7777:
        -: 7778:## jerry_create_string_from_utf8
        -: 7779:
        -: 7780:**Summary**
        -: 7781:
        -: 7782:Create string from a valid UTF8 string.
        -: 7783:
        -: 7784:*Note*:
        -: 7785: - The difference from [jerry_create_string](#jerry_create_string) is that it accepts utf-8 string instead of cesu-8 string.
        -: 7786: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7787:is no longer needed.
        -: 7788:
        -: 7789:**Prototype**
        -: 7790:
        -: 7791:```c
        -: 7792:jerry_value_t
        -: 7793:jerry_create_string_from_utf8 (const jerry_char_t *str_p);
        -: 7794:```
        -: 7795:
        -: 7796:- `str_p` - non-null pointer to string
        -: 7797:- return value - value of the created string
        -: 7798:
        -: 7799:*New in version 2.0*.
        -: 7800:
        -: 7801:**Example**
        -: 7802:
        -: 7803:```c
        -: 7804:{
        -: 7805:  const jerry_char_t char_array[] = "a string";
        -: 7806:  jerry_value_t string_value  = jerry_create_string_from_utf8 (char_array);
        -: 7807:
        -: 7808:  ... // usage of string_value
        -: 7809:
        -: 7810:  jerry_release_value (string_value);
        -: 7811:}
        -: 7812:```
        -: 7813:
        -: 7814:**See also**
        -: 7815:
        -: 7816:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 7817:- [jerry_create_string_sz_from_utf8](#jerry_create_string_sz_from_utf8)
        -: 7818:
        -: 7819:
        -: 7820:## jerry_create_string_sz_from_utf8
        -: 7821:
        -: 7822:**Summary**
        -: 7823:
        -: 7824:Create string from a valid UTF8 string.
        -: 7825:
        -: 7826:*Note*:
        -: 7827: - The difference from [jerry_create_string_sz](#jerry_create_string_sz) is that it accepts utf-8 string instead of cesu-8 string.
        -: 7828: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 7829:is no longer needed.
        -: 7830:
        -: 7831:**Prototype**
        -: 7832:
        -: 7833:```c
        -: 7834:jerry_value_t
        -: 7835:jerry_create_string_sz_from_utf8 (const jerry_char_t *str_p,
        -: 7836:                                  jerry_size_t str_size)
        -: 7837:```
        -: 7838:
        -: 7839:- `str_p` - non-null pointer to string
        -: 7840:- `str_size` - size of the string
        -: 7841:- return value - value of the created string
        -: 7842:
        -: 7843:*New in version 2.0*.
        -: 7844:
        -: 7845:**Example**
        -: 7846:
        -: 7847:```c
        -: 7848:{
        -: 7849:  const jerry_char_t char_array[] = "a string";
        -: 7850:  jerry_value_t string_value  = jerry_create_string_sz_from_utf8 (char_array,
        -: 7851:                                                                  sizeof (char_array) - 1);
        -: 7852:
        -: 7853:  ... // usage of string_value
        -: 7854:
        -: 7855:  jerry_release_value (string_value);
        -: 7856:}
        -: 7857:
        -: 7858:```
        -: 7859:
        -: 7860:**See also**
        -: 7861:
        -: 7862:- [jerry_is_valid_utf8_string](#jerry_is_valid_utf8_string)
        -: 7863:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -: 7864:
        -: 7865:
        -: 7866:## jerry_create_external_string
        -: 7867:
        -: 7868:**Summary**
        -: 7869:
        -: 7870:Create an external string from a valid CESU8 string. The string buffer passed to the function
        -: 7871:should not be modified until the free callback is called. This function can be used to avoid
        -: 7872:the duplication of large strings.
        -: 7873:
        -: 7874:*Note*:
        -: 7875: - The free callback can be set by [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -: 7876: - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7877:   when it is no longer needed.
        -: 7878:
        -: 7879:**Prototype**
        -: 7880:
        -: 7881:```c
        -: 7882:jerry_value_t
        -: 7883:jerry_create_external_string (const jerry_char_t *str_p, void *user_p);
        -: 7884:```
        -: 7885:
        -: 7886:- `str_p` - non-null pointer to string
        -: 7887:- `user_p` - user pointer passed to the callback when the string is freed
        -: 7888:- return value - value of the created string
        -: 7889:
        -: 7890:*New in version 2.4*.
        -: 7891:
        -: 7892:*Changed in version [[NEXT_RELEASE]]*: `free_cb` is replaced by `user_p`.
        -: 7893:
        -: 7894:**Example**
        -: 7895:
        -: 7896:```c
        -: 7897:{
        -: 7898:  const char* string_p = "a large and immutable string: this is a story about ....";
        -: 7899:  jerry_value_t string_value  = jerry_create_external_string ((const jerry_char_t *) string_p,
        -: 7900:                                                              NULL);
        -: 7901:
        -: 7902:  ... // usage of string_value
        -: 7903:
        -: 7904:  jerry_release_value (string_value);
        -: 7905:}
        -: 7906:```
        -: 7907:
        -: 7908:**See also**
        -: 7909:
        -: 7910:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 7911:- [jerry_create_external_string_sz](#jerry_create_external_string_sz)
        -: 7912:- [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -: 7913:
        -: 7914:
        -: 7915:## jerry_create_external_string_sz
        -: 7916:
        -: 7917:**Summary**
        -: 7918:
        -: 7919:Create an external string from a valid CESU8 string. The string buffer passed to the function
        -: 7920:should not be modified until the free callback is called. This function can be used to avoid
        -: 7921:the duplication of large strings.
        -: 7922:
        -: 7923:*Note*:
        -: 7924: - The free callback can be set by [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -: 7925: - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7926:   when it is no longer needed.
        -: 7927:
        -: 7928:**Prototype**
        -: 7929:
        -: 7930:```c
        -: 7931:jerry_value_t
        -: 7932:jerry_create_external_string_sz (const jerry_char_t *str_p,
        -: 7933:                                 jerry_size_t str_size,
        -: 7934:                                 void *user_p);
        -: 7935:```
        -: 7936:
        -: 7937:- `str_p` - non-null pointer to string
        -: 7938:- `str_size` - size of the string
        -: 7939:- `user_p` - user pointer passed to the callback when the string is freed
        -: 7940:- return value - value of the created string
        -: 7941:
        -: 7942:*New in version 2.4*.
        -: 7943:
        -: 7944:*Changed in version [[NEXT_RELEASE]]*: `free_cb` is replaced by `user_p`.
        -: 7945:
        -: 7946:**Example**
        -: 7947:
        -: 7948:```c
        -: 7949:{
        -: 7950:  const char* string_p = "a large and immutable string: this is a story about ....";
        -: 7951:  jerry_value_t string_value  = jerry_create_external_string_sz ((const jerry_char_t *) string_p,
        -: 7952:                                                                 strlen (string_p),
        -: 7953:                                                                 NULL);
        -: 7954:
        -: 7955:  ... // usage of string_value
        -: 7956:
        -: 7957:  jerry_release_value (string_value);
        -: 7958:}
        -: 7959:
        -: 7960:```
        -: 7961:
        -: 7962:**See also**
        -: 7963:
        -: 7964:- [jerry_is_valid_cesu8_string](#jerry_is_valid_cesu8_string)
        -: 7965:- [jerry_create_external_string](#jerry_create_external_string)
        -: 7966:- [jerry_string_set_external_free_callback](#jerry_string_set_external_free_callback)
        -: 7967:
        -: 7968:
        -: 7969:## jerry_create_symbol
        -: 7970:
        -: 7971:**Summary**
        -: 7972:
        -: 7973:Create symbol from an API value.
        -: 7974:
        -: 7975:*Note*:
        -: 7976:  - The given argument is converted to string. This operation can throw an error.
        -: 7977:  - This API depends on the es.next profile.
        -: 7978:  - Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 7979:    when it is no longer needed.
        -: 7980:
        -: 7981:**Prototype**
        -: 7982:
        -: 7983:```c
        -: 7984:jerry_value_t
        -: 7985:jerry_create_symbol (const jerry_value_t value)
        -: 7986:```
        -: 7987:
        -: 7988:- `value` - API value
        -: 7989:- return value
        -: 7990:  - value of the created symbol, if success
        -: 7991:  - thrown error, otherwise
        -: 7992:
        -: 7993:*New in version 2.0*.
        -: 7994:
        -: 7995:**Example**
        -: 7996:
        -: 7997:[doctest]: # ()
        -: 7998:
        -: 7999:```c
        -: 8000:#include "jerryscript.h"
        -: 8001:
        -: 8002:int
    #####: 8003:main (void)
        -: 8004:{
    #####: 8005:  jerry_init (JERRY_INIT_EMPTY);
        -: 8006:
    #####: 8007:  jerry_value_t string_value = jerry_create_string ((const jerry_char_t *) "Symbol description string");
    #####: 8008:  jerry_value_t symbol_value = jerry_create_symbol (string_value);
        -: 8009:
        -: 8010:  // The description value is no longer needed
    #####: 8011:  jerry_release_value (string_value);
        -: 8012:
        -: 8013:  // usage of symbol_value
        -: 8014:
    #####: 8015:  jerry_release_value (symbol_value);
        -: 8016:
    #####: 8017:  jerry_cleanup ();
        -: 8018:}
        -: 8019:```
        -: 8020:
        -: 8021:**See also**
        -: 8022:
        -: 8023:- [jerry_value_is_symbol](#jerry_value_is_symbol)
        -: 8024:- [jerry_release_value](#jerry_release_value)
        -: 8025:
        -: 8026:
        -: 8027:## jerry_create_bigint
        -: 8028:
        -: 8029:**Summary**
        -: 8030:
        -: 8031:Create BigInt value from uint64 digits
        -: 8032:
        -: 8033:*Note*:
        -: 8034:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 8035:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 8036:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8037:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8038:  when it is no longer needed.
        -: 8039:
        -: 8040:**Prototype**
        -: 8041:
        -: 8042:```c
        -: 8043:jerry_value_t
        -: 8044:jerry_create_bigint (const uint64_t *digits_p, uint32_t size, bool sign)
        -: 8045:```
        -: 8046:
        -: 8047:- `digits_p` - array of uint64 digits, least significant digit first
        -: 8048:- `size` - size of the `digits_p` array
        -: 8049:- `sign` - false if the created value should be positive, and true if the created value should be negative
        -: 8050:- return value
        -: 8051:  - value of the created bigint, if success
        -: 8052:  - thrown error, otherwise
        -: 8053:
        -: 8054:*New in version 2.4*.
        -: 8055:
        -: 8056:**Example**
        -: 8057:
        -: 8058:[doctest]: # ()
        -: 8059:
        -: 8060:```c
        -: 8061:#include "jerryscript.h"
        -: 8062:
        -: 8063:int
    #####: 8064:main (void)
        -: 8065:{
    #####: 8066:  jerry_init (JERRY_INIT_EMPTY);
        -: 8067:
    #####: 8068:  uint64_t digits[2] = { 0x1, 0x1 };
    #####: 8069:  jerry_value_t bigint_value = jerry_create_bigint (digits, 2, true);
        -: 8070:
        -: 8071:  // usage of bigint_value
        -: 8072:
    #####: 8073:  jerry_release_value (bigint_value);
        -: 8074:
    #####: 8075:  jerry_cleanup ();
        -: 8076:}
        -: 8077:```
        -: 8078:
        -: 8079:**See also**
        -: 8080:
        -: 8081:- [jerry_release_value](#jerry_release_value)
        -: 8082:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 8083:- [jerry_get_bigint_digits](#jerry_get_bigint_digits)
        -: 8084:
        -: 8085:
        -: 8086:## jerry_create_regexp
        -: 8087:
        -: 8088:**Summary**
        -: 8089:
        -: 8090:Returns a `jerry_value_t` RegExp object or an error, if the construction of the object fails.
        -: 8091:Optional flags can be set using [jerry_regexp_flags_t](#jerry_regexp_flags_t).
        -: 8092:These flags can be combined together with the binary OR operator or used on their own as enum values.
        -: 8093:
        -: 8094:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8095:is no longer needed.
        -: 8096:
        -: 8097:**Prototype**
        -: 8098:```c
        -: 8099:jerry_value_t
        -: 8100:jerry_create_regexp (const jerry_char_t *pattern_p, uint16_t flags);
        -: 8101:```
        -: 8102:
        -: 8103:- `pattern_p` - the RegExp pattern as a zero-terminated UTF-8 string
        -: 8104:- `flags` - optional flags for the RegExp object, see [jerry_regexp_flags_t](#jerry_regexp_flags_t)
        -: 8105:- return value - the RegExp object as a `jerry_value_t`
        -: 8106:
        -: 8107:*New in version 2.0*.
        -: 8108:
        -: 8109:**Example**
        -: 8110:
        -: 8111:```c
        -: 8112:{
        -: 8113:  jerry_char_t pattern_p = "[cgt]gggtaaa|tttaccc[acg]";
        -: 8114:  uint16_t pattern_flags = JERRY_REGEXP_FLAG_IGNORE_CASE;
        -: 8115:
        -: 8116:  jerry_value_t regexp = jerry_create_regexp (pattern_p, pattern_flags);
        -: 8117:
        -: 8118:  ...
        -: 8119:
        -: 8120:  jerry_release_value (regexp);
        -: 8121:}
        -: 8122:```
        -: 8123:
        -: 8124:
        -: 8125:## jerry_create_regexp_sz
        -: 8126:
        -: 8127:**Summary**
        -: 8128:
        -: 8129:Returns a `jerry_value_t` RegExp object or an error, if the construction of the object fails.
        -: 8130:Optional flags can be set using [jerry_regexp_flags_t](#jerry_regexp_flags_t).
        -: 8131:These flags can be combined together with the binary OR operator or used on their own as enum values.
        -: 8132:
        -: 8133:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8134:is no longer needed.
        -: 8135:
        -: 8136:**Prototype**
        -: 8137:```c
        -: 8138:jerry_value_t
        -: 8139:jerry_create_regexp_sz (const jerry_char_t *pattern_p, jerry_size_t pattern_size, uint16_t flags);
        -: 8140:```
        -: 8141:
        -: 8142:- `pattern_p` - the RegExp pattern as a zero-terminated UTF-8 string
        -: 8143:- `pattern_size` - size of the `pattern`
        -: 8144:- `flags` - optional flags for the RegExp object, see [jerry_regexp_flags_t](#jerry_regexp_flags_t)
        -: 8145:- return value - the RegExp object as a `jerry_value_t`
        -: 8146:
        -: 8147:*New in version 2.0*.
        -: 8148:
        -: 8149:**Example**
        -: 8150:
        -: 8151:```c
        -: 8152:{
        -: 8153:  jerry_char_t pattern_p = "[cgt]gggtaaa|tttaccc[acg]";
        -: 8154:  jerry_size_t pattern_size = sizeof (pattern_p) - 1;
        -: 8155:  uint16_t pattern_flags = JERRY_REGEXP_FLAG_IGNORE_CASE;
        -: 8156:
        -: 8157:  jerry_value_t regexp = jerry_create_regexp_sz (pattern_p, pattern_size, pattern_flags);
        -: 8158:
        -: 8159:  ...
        -: 8160:
        -: 8161:  jerry_release_value (regexp);
        -: 8162:}
        -: 8163:```
        -: 8164:
        -: 8165:
        -: 8166:## jerry_create_typedarray
        -: 8167:
        -: 8168:**Summary**
        -: 8169:
        -: 8170:Create a jerry_value_t representing an TypedArray object.
        -: 8171:
        -: 8172:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 8173:and element count can be specified.
        -: 8174:
        -: 8175:*Notes*:
        -: 8176:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8177:  when it is no longer needed.
        -: 8178:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 8179:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 8180:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8181:- The es.next profile enables this by default.
        -: 8182:
        -: 8183:**Prototype**
        -: 8184:
        -: 8185:```c
        -: 8186:jerry_value_t
        -: 8187:jerry_create_typedarray (jerry_typedarray_type_t type_name, jerry_length_t item_count);
        -: 8188:```
        -: 8189:
        -: 8190:- `type_name` - type of TypedArray to create
        -: 8191:- `item_count` - number of items in the new TypedArray
        -: 8192:- return value - the new TypedArray as a `jerry_value_t`
        -: 8193:
        -: 8194:*New in version 2.0*.
        -: 8195:
        -: 8196:**Example**
        -: 8197:
        -: 8198:```c
        -: 8199:{
        -: 8200:  jerry_value_t array = jerry_create_typedarray (JERRY_TYPEDARRAY_UINT16, 15);
        -: 8201:
        -: 8202:  ... // use the TypedArray
        -: 8203:
        -: 8204:  jerry_release_value (array);
        -: 8205:}
        -: 8206:```
        -: 8207:
        -: 8208:**See also**
        -: 8209:
        -: 8210:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 8211:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 8212:- [jerry_release_value](#jerry_release_value)
        -: 8213:
        -: 8214:
        -: 8215:## jerry_create_typedarray_for_arraybuffer
        -: 8216:
        -: 8217:**Summary**
        -: 8218:
        -: 8219:Create a jerry_value_t representing an TypedArray object using
        -: 8220:an already existing ArrayBuffer object.
        -: 8221:
        -: 8222:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 8223:and element count can be specified.
        -: 8224:
        -: 8225:The developer must ensure that the ArrayBuffer has the correct length for the given
        -: 8226:type of TypedArray otherwise an error is generated.
        -: 8227:
        -: 8228:The JavaScript equivalent of this function is: `new %TypedArray%(arraybuffer)` where `%TypedArray%` is
        -: 8229:one of the allowed TypedArray functions.
        -: 8230:
        -: 8231:*Notes*:
        -: 8232:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8233:  when it is no longer needed.
        -: 8234:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 8235:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 8236:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8237:- The es.next profile enables this by default.
        -: 8238:
        -: 8239:**Prototype**
        -: 8240:
        -: 8241:```c
        -: 8242:jerry_value_t
        -: 8243:jerry_create_typedarray_for_arraybuffer (jerry_typedarray_type_t type_name,
        -: 8244:                                         const jerry_value_t arraybuffer);
        -: 8245:```
        -: 8246:
        -: 8247:- `type_name` - type of TypedArray to create
        -: 8248:- `arraybuffer` - the ArrayBuffer to use for the new TypedArray
        -: 8249:- return value
        -: 8250:  - the new TypedArray as a `jerry_value_t`
        -: 8251:  - Error if the ArrayBuffer does not have enough space for the given type of TypedArray
        -: 8252:
        -: 8253:*New in version 2.0*.
        -: 8254:
        -: 8255:**Example**
        -: 8256:
        -: 8257:```c
        -: 8258:{
        -: 8259:  jerry_value_t buffer = jerry_create_array_buffer (12 * 2);
        -: 8260:  jerry_value_t array = jerry_create_typedarray_for_arraybuffer (JERRY_TYPEDARRAY_UINT16, buffer);
        -: 8261:  jerry_release_value (buffer);
        -: 8262:
        -: 8263:  ... // use the TypedArray
        -: 8264:
        -: 8265:  jerry_release_value (array);
        -: 8266:}
        -: 8267:```
        -: 8268:
        -: 8269:**See also**
        -: 8270:
        -: 8271:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 8272:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 8273:- [jerry_release_value](#jerry_release_value)
        -: 8274:
        -: 8275:
        -: 8276:## jerry_create_typedarray_for_arraybuffer_sz
        -: 8277:
        -: 8278:**Summary**
        -: 8279:
        -: 8280:Create a jerry_value_t representing an TypedArray object using
        -: 8281:an already existing ArrayBuffer object and by specifying the byteOffset, and length properties.
        -: 8282:
        -: 8283:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 8284:and element count can be specified.
        -: 8285:
        -: 8286:The developer must ensure that the ArrayBuffer has the correct length for the given
        -: 8287:type of TypedArray otherwise an error is generated.
        -: 8288:
        -: 8289:The JavaScript equivalent of this function is: `new %TypedArray%(arraybuffer, byteOffset, length)` where `%TypedArray%` is
        -: 8290:one of the allowed TypedArray functions.
        -: 8291:
        -: 8292:*Notes*:
        -: 8293:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8294:  when it is no longer needed.
        -: 8295:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 8296:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 8297:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8298:- The es.next profile enables this by default.
        -: 8299:
        -: 8300:**Prototype**
        -: 8301:
        -: 8302:```c
        -: 8303:jerry_value_t
        -: 8304:jerry_create_typedarray_for_arraybuffer_sz (jerry_typedarray_type_t type_name,
        -: 8305:                                            const jerry_value_t arraybuffer,
        -: 8306:                                            jerry_length_t byte_offset,
        -: 8307:                                            jerry_length_t length);
        -: 8308:```
        -: 8309:
        -: 8310:- `type_name` - type of TypedArray to create
        -: 8311:- `arraybuffer` - the ArrayBuffer to use for the new TypedArray
        -: 8312:- `byte_offset` - start offset to use for the ArrayBuffer
        -: 8313:- `length` - number of elements to used from the ArrayBuffer (this is not the same as the byteLength)
        -: 8314:- return value
        -: 8315:  - the new TypedArray as a `jerry_value_t`
        -: 8316:  - Error if the ArrayBuffer does not have enough space for the given type of TypedArray
        -: 8317:
        -: 8318:*New in version 2.0*.
        -: 8319:
        -: 8320:**Example**
        -: 8321:
        -: 8322:```c
        -: 8323:{
        -: 8324:  jerry_value_t buffer = jerry_create_array_buffer (12 * 2);
        -: 8325:  jerry_value_t array = jerry_create_typedarray_for_arraybuffer_sz (JERRY_TYPEDARRAY_UINT16, buffer, 4, 10);
        -: 8326:  jerry_release_value (buffer);
        -: 8327:
        -: 8328:  ... // use the TypedArray
        -: 8329:
        -: 8330:  jerry_release_value (array);
        -: 8331:}
        -: 8332:```
        -: 8333:
        -: 8334:**See also**
        -: 8335:
        -: 8336:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 8337:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 8338:- [jerry_release_value](#jerry_release_value)
        -: 8339:
        -: 8340:
        -: 8341:## jerry_create_container
        -: 8342:
        -: 8343:**Summary**
        -: 8344:
        -: 8345:Create a jerry_value_t representing a given type container object.
        -: 8346:
        -: 8347:*Notes*:
        -: 8348:- This method is expected to work the same way as the JavaScript Map constructor.
        -: 8349:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8350:  when it is no longer needed.
        -: 8351:- This API depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -: 8352:  in runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -: 8353:  feature enum values.
        -: 8354:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8355:- The es.next profile enables this by default.
        -: 8356:
        -: 8357:**Prototype**
        -: 8358:
        -: 8359:```c
        -: 8360:jerry_value_t
        -: 8361:jerry_create_container (jerry_container_type_t container_type,
        -: 8362:                        const jerry_value_t *arguments_list_p,
        -: 8363:                        jerry_length_t arguments_list_len);
        -: 8364:```
        -: 8365:
        -: 8366:- `container_type` - Type of the container to be created, see `jerry_container_type_t`.
        -: 8367:- `arguments_list_p` - The arguments passed to the container constructor to be inserted to the container.
        -: 8368:- `arguments_list_len` - The length of the above arguments.
        -: 8369:- return value - the new container object as a `jerry_value_t`
        -: 8370:
        -: 8371:*New in version 2.3*.
        -: 8372:
        -: 8373:**Example**
        -: 8374:
        -: 8375:[doctest]: # ()
        -: 8376:
        -: 8377:```c
        -: 8378:#include "jerryscript.h"
        -: 8379:
        -: 8380:int
    #####: 8381:main (void)
        -: 8382:{
    #####: 8383:  jerry_init (JERRY_INIT_EMPTY);
    #####: 8384:  jerry_char_t src[] = "[1,2,3,4].entries()";
    #####: 8385:  jerry_value_t iterable = jerry_eval (src, sizeof (src) - 1, JERRY_PARSE_NO_OPTS);
        -: 8386:
    #####: 8387:  jerry_value_t map = jerry_create_container (JERRY_CONTAINER_TYPE_MAP, &iterable, 1);
    #####: 8388:  jerry_release_value (iterable);
        -: 8389:
        -: 8390:  // use the Map
        -: 8391:
    #####: 8392:  jerry_release_value (map);
        -: 8393:
    #####: 8394:  jerry_cleanup ();
        -: 8395:  return 0;
        -: 8396:}
        -: 8397:```
        -: 8398:
        -: 8399:**See also**
        -: 8400:
        -: 8401:- [jerry_container_type_t](#jerry_container_type_t)
        -: 8402:- [jerry_get_container_type](#jerry_get_container_type)
        -: 8403:
        -: 8404:
        -: 8405:## jerry_create_undefined
        -: 8406:
        -: 8407:**Summary**
        -: 8408:
        -: 8409:Creates a `jerry_value_t` representing an undefined value.
        -: 8410:
        -: 8411:*Notes*:
        -: 8412:- The undefined value is a fixed constant. Its value can be copied any number of times without calling [jerry_acquire_value](#jerry_acquire_value), and freeing it with [jerry_release_value](#jerry_release_value) is optional.
        -: 8413:
        -: 8414:
        -: 8415:**Prototype**
        -: 8416:
        -: 8417:```c
        -: 8418:jerry_value_t
        -: 8419:jerry_create_undefined (void);
        -: 8420:```
        -: 8421:
        -: 8422:- return value - value of undefined
        -: 8423:
        -: 8424:**Example**
        -: 8425:
        -: 8426:```c
        -: 8427:{
        -: 8428:  jerry_value_t undefined_value = jerry_create_undefined ();
        -: 8429:
        -: 8430:  ... // usage of the value
        -: 8431:
        -: 8432:  jerry_release_value (undefined_value);
        -: 8433:}
        -: 8434:```
        -: 8435:
        -: 8436:**See also**
        -: 8437:
        -: 8438:- [jerry_release_value](#jerry_release_value)
        -: 8439:
        -: 8440:
        -: 8441:## jerry_create_realm
        -: 8442:
        -: 8443:**Summary**
        -: 8444:
        -: 8445:Creates a `jerry_value_t` representing a new global object.
        -: 8446:
        -: 8447:*Notes*:
        -: 8448:- Returned value must be freed with [jerry_release_value](#jerry_release_value)
        -: 8449:  when it is no longer needed.
        -: 8450:- This API depends on a build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -: 8451:  in runtime with the `JERRY_FEATURE_REALM` feature enum value.
        -: 8452:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -: 8453:- The es.next profile enables this by default.
        -: 8454:
        -: 8455:**Prototype**
        -: 8456:
        -: 8457:```c
        -: 8458:jerry_value_t
        -: 8459:jerry_create_realm (void);
        -: 8460:```
        -: 8461:
        -: 8462:- return value - realm object value
        -: 8463:
        -: 8464:*New in version 2.4*.
        -: 8465:
        -: 8466:**Example**
        -: 8467:
        -: 8468:[doctest]: # ()
        -: 8469:
        -: 8470:```c
        -: 8471:#include "jerryscript.h"
        -: 8472:
        -: 8473:int
    #####: 8474:main (void)
        -: 8475:{
    #####: 8476:  jerry_init (JERRY_INIT_EMPTY);
        -: 8477:
    #####: 8478:  jerry_value_t realm_value = jerry_create_realm ();
        -: 8479:
        -: 8480:  // usage of the value
        -: 8481:
    #####: 8482:  jerry_release_value (realm_value);
    #####: 8483:  jerry_cleanup ();
        -: 8484:
        -: 8485:  return 0;
        -: 8486:}
        -: 8487:```
        -: 8488:
        -: 8489:**See also**
        -: 8490:
        -: 8491:- [jerry_release_value](#jerry_release_value)
        -: 8492:
        -: 8493:
        -: 8494:# General API functions of JS objects
        -: 8495:
        -: 8496:## jerry_has_property
        -: 8497:
        -: 8498:**Summary**
        -: 8499:
        -: 8500:Checks whether the object or its prototype objects have the given property.
        -: 8501:
        -: 8502:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8503:is no longer needed.
        -: 8504:
        -: 8505:**Prototype**
        -: 8506:
        -: 8507:```c
        -: 8508:jerry_value_t
        -: 8509:jerry_has_property (const jerry_value_t obj_val,
        -: 8510:                    const jerry_value_t prop_name_val);
        -: 8511:```
        -: 8512:
        -: 8513:- `obj_val` - object value
        -: 8514:- `prop_name_val` - property name
        -: 8515:- return value - JavaScript value that evaluates to
        -: 8516:  -  raised error - if the operation fail
        -: 8517:  -  true/false API value  - depend on whether the property exists
        -: 8518:
        -: 8519:*Changed in version 2.0*: The return value type is now a JavaScript value and not a primitive boolean value.
        -: 8520:
        -: 8521:*Changed in version 2.3*: The return value can be an error value.
        -: 8522:
        -: 8523:**Example**
        -: 8524:
        -: 8525:[doctest]: # ()
        -: 8526:
        -: 8527:```c
        -: 8528:#include "jerryscript.h"
        -: 8529:
        -: 8530:int
    #####: 8531:main (void)
        -: 8532:{
    #####: 8533:  jerry_init (JERRY_INIT_EMPTY);
        -: 8534:
    #####: 8535:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8536:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "handler_field");
        -: 8537:
    #####: 8538:  jerry_value_t has_prop_js = jerry_has_property (global_object, prop_name);
    #####: 8539:  bool has_prop = jerry_value_is_true (has_prop_js);
        -: 8540:
    #####: 8541:  jerry_release_value (has_prop_js);
    #####: 8542:  jerry_release_value (prop_name);
    #####: 8543:  jerry_release_value (global_object);
        -: 8544:
    #####: 8545:  jerry_cleanup ();
        -: 8546:
        -: 8547:  return 0;
        -: 8548:}
        -: 8549:```
        -: 8550:
        -: 8551:**See also**
        -: 8552:
        -: 8553:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8554:- [jerry_delete_property](#jerry_delete_property)
        -: 8555:
        -: 8556:
        -: 8557:## jerry_has_own_property
        -: 8558:
        -: 8559:**Summary**
        -: 8560:
        -: 8561:Checks whether the object has the given property.
        -: 8562:
        -: 8563:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8564:is no longer needed.
        -: 8565:
        -: 8566:**Prototype**
        -: 8567:
        -: 8568:```c
        -: 8569:jerry_value_t
        -: 8570:jerry_has_own_property (const jerry_value_t obj_val,
        -: 8571:                        const jerry_value_t prop_name_val);
        -: 8572:```
        -: 8573:
        -: 8574:- `obj_val` - object value
        -: 8575:- `prop_name_val` - property name
        -: 8576:- return value - JavaScript value that evaluates to
        -: 8577:  -  raised error - if the operation fails
        -: 8578:  -  true/false API value - depend on whether the property exists
        -: 8579:
        -: 8580:*Changed in version 2.0*: The return value type is now a JavaScript value and not a primitive boolean value.
        -: 8581:
        -: 8582:*Changed in version 2.3*: The return value can be an error value.
        -: 8583:
        -: 8584:**Example**
        -: 8585:
        -: 8586:[doctest]: # ()
        -: 8587:
        -: 8588:```c
        -: 8589:#include "jerryscript.h"
        -: 8590:
        -: 8591:int
    #####: 8592:main (void)
        -: 8593:{
    #####: 8594:  jerry_init (JERRY_INIT_EMPTY);
        -: 8595:
    #####: 8596:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8597:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "handler_field");
        -: 8598:
    #####: 8599:  jerry_value_t has_prop_js = jerry_has_own_property (global_object, prop_name);
    #####: 8600:  bool has_prop = jerry_value_is_true (has_prop_js);
        -: 8601:
    #####: 8602:  jerry_release_value (has_prop_js);
    #####: 8603:  jerry_release_value (prop_name);
    #####: 8604:  jerry_release_value (global_object);
        -: 8605:
    #####: 8606:  jerry_cleanup ();
        -: 8607:
        -: 8608:  return 0;
        -: 8609:}
        -: 8610:```
        -: 8611:
        -: 8612:**See also**
        -: 8613:
        -: 8614:- [jerry_has_property](#jerry_has_property)
        -: 8615:- [jerry_delete_property](#jerry_delete_property)
        -: 8616:
        -: 8617:
        -: 8618:## jerry_has_internal_property
        -: 8619:
        -: 8620:**Summary**
        -: 8621:
        -: 8622:Checks whether the object has the given internal property.
        -: 8623:
        -: 8624:*Note*:
        -: 8625: - Properties which were not created with [jerry_set_internal_property](#jerry_set_internal_property) are excluded
        -: 8626:   during the operation.
        -: 8627: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8628:is no longer needed.
        -: 8629:
        -: 8630:**Prototype**
        -: 8631:
        -: 8632:```c
        -: 8633:bool
        -: 8634:jerry_has_internal_property (const jerry_value_t obj_val,
        -: 8635:                             const jerry_value_t prop_name_val);
        -: 8636:```
        -: 8637:
        -: 8638:- `obj_val` - object value
        -: 8639:- `prop_name_val` - property name
        -: 8640:- return value
        -: 8641:  - true, if the property exists
        -: 8642:  - false, otherwise
        -: 8643:
        -: 8644:*New in version 2.2*.
        -: 8645:
        -: 8646:**Example**
        -: 8647:
        -: 8648:[doctest]: # ()
        -: 8649:
        -: 8650:```c
        -: 8651:#include "jerryscript.h"
        -: 8652:
        -: 8653:int
    #####: 8654:main (void)
        -: 8655:{
    #####: 8656:  jerry_init (JERRY_INIT_EMPTY);
        -: 8657:
    #####: 8658:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8659:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
        -: 8660:
    #####: 8661:  bool has_internal_js_prop = jerry_has_internal_property (global_object, prop_name);
        -: 8662:
    #####: 8663:  jerry_release_value (prop_name);
    #####: 8664:  jerry_release_value (global_object);
        -: 8665:
        -: 8666:  return 0;
        -: 8667:}
        -: 8668:```
        -: 8669:
        -: 8670:**See also**
        -: 8671:
        -: 8672:- [jerry_delete_internal_property](#jerry_delete_internal_property)
        -: 8673:- [jerry_get_internal_property](#jerry_get_internal_property)
        -: 8674:- [jerry_set_internal_property](#jerry_set_internal_property)
        -: 8675:
        -: 8676:
        -: 8677:## jerry_delete_property
        -: 8678:
        -: 8679:**Summary**
        -: 8680:
        -: 8681:Delete a property from an object.
        -: 8682:
        -: 8683:**Prototype**
        -: 8684:
        -: 8685:```c
        -: 8686:bool
        -: 8687:jerry_delete_property (const jerry_value_t obj_val,
        -: 8688:                       const jerry_value_t prop_name_val);
        -: 8689:```
        -: 8690:
        -: 8691:- `obj_val` - object value
        -: 8692:- `prop_name_val` - property name
        -: 8693:- return value
        -: 8694:  - true, if property was deleted successfully
        -: 8695:  - false, otherwise
        -: 8696:
        -: 8697:**Example**
        -: 8698:
        -: 8699:```c
        -: 8700:{
        -: 8701:  jerry_value_t global_object = jerry_get_global_object ();
        -: 8702:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
        -: 8703:
        -: 8704:  bool delete_result = jerry_delete_property (global_object, prop_name);
        -: 8705:  /* use "delete_result" */
        -: 8706:
        -: 8707:  jerry_release_value (prop_name);
        -: 8708:  jerry_release_value (global_object);
        -: 8709:}
        -: 8710:```
        -: 8711:
        -: 8712:**See also**
        -: 8713:
        -: 8714:- [jerry_has_property](#jerry_has_property)
        -: 8715:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8716:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 8717:- [jerry_get_property](#jerry_get_property)
        -: 8718:
        -: 8719:
        -: 8720:## jerry_delete_property_by_index
        -: 8721:
        -: 8722:**Summary**
        -: 8723:
        -: 8724:Delete indexed property from the specified object.
        -: 8725:
        -: 8726:**Prototype**
        -: 8727:
        -: 8728:```c
        -: 8729:bool
        -: 8730:jerry_delete_property_by_index (const jerry_value_t obj_val,
        -: 8731:                                uint32_t index);
        -: 8732:```
        -: 8733:
        -: 8734:- `obj_val` - object value
        -: 8735:- `index` - index number
        -: 8736:- return value
        -: 8737:  - true, if property was deleted successfully
        -: 8738:  - false, otherwise
        -: 8739:
        -: 8740:*New in version 2.0*.
        -: 8741:
        -: 8742:**Example**
        -: 8743:
        -: 8744:```c
        -: 8745:{
        -: 8746:  jerry_value_t object;
        -: 8747:
        -: 8748:  ... // create or acquire object
        -: 8749:
        -: 8750:  bool delete_result = jerry_delete_property_by_index (object, 5);
        -: 8751:
        -: 8752:  jerry_release_value (object);
        -: 8753:}
        -: 8754:```
        -: 8755:
        -: 8756:**See also**
        -: 8757:
        -: 8758:- [jerry_has_property](#jerry_has_property)
        -: 8759:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8760:- [jerry_delete_property](#jerry_delete_property)
        -: 8761:- [jerry_get_property](#jerry_get_property)
        -: 8762:- [jerry_set_property](#jerry_set_property)
        -: 8763:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 8764:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 8765:
        -: 8766:## jerry_delete_internal_property
        -: 8767:
        -: 8768:**Summary**
        -: 8769:
        -: 8770:Delete an internal property from an object.
        -: 8771:
        -: 8772:*Note*: Properties which were not created with [jerry_set_internal_property](#jerry_set_internal_property) are excluded
        -: 8773:        during the operation.
        -: 8774:
        -: 8775:**Prototype**
        -: 8776:
        -: 8777:```c
        -: 8778:bool
        -: 8779:jerry_delete_internal_property (const jerry_value_t obj_val,
        -: 8780:                                const jerry_value_t prop_name_val);
        -: 8781:```
        -: 8782:
        -: 8783:- `obj_val` - object value
        -: 8784:- `prop_name_val` - property name
        -: 8785:- return value
        -: 8786:  - true, if property was deleted successfully
        -: 8787:  - false, otherwise
        -: 8788:
        -: 8789:*New in version 2.2*.
        -: 8790:
        -: 8791:**Example**
        -: 8792:
        -: 8793:```c
        -: 8794:{
        -: 8795:  jerry_value_t global_object = jerry_get_global_object ();
        -: 8796:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
        -: 8797:
        -: 8798:  bool delete_result = jerry_delete_internal_property (global_object, prop_name);
        -: 8799:  /* use "delete_result" */
        -: 8800:
        -: 8801:  jerry_release_value (prop_name);
        -: 8802:  jerry_release_value (global_object);
        -: 8803:}
        -: 8804:```
        -: 8805:
        -: 8806:**See also**
        -: 8807:
        -: 8808:- [jerry_has_internal_property](#jerry_has_internal_property)
        -: 8809:- [jerry_get_internal_property](#jerry_get_internal_property)
        -: 8810:- [jerry_set_internal_property](#jerry_set_internal_property)
        -: 8811:
        -: 8812:
        -: 8813:## jerry_get_property
        -: 8814:
        -: 8815:**Summary**
        -: 8816:
        -: 8817:Get value of a property to the specified object with the given name.
        -: 8818:
        -: 8819:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8820:is no longer needed.
        -: 8821:
        -: 8822:**Prototype**
        -: 8823:
        -: 8824:```c
        -: 8825:jerry_value_t
        -: 8826:jerry_get_property (const jerry_value_t obj_val,
        -: 8827:                    const jerry_value_t prop_name_val);
        -: 8828:```
        -: 8829:
        -: 8830:- `obj_val` - object value
        -: 8831:- `prop_name_val` - property name
        -: 8832:- return value
        -: 8833:  - value of property, if success
        -: 8834:  - thrown error, otherwise
        -: 8835:
        -: 8836:**Example**
        -: 8837:
        -: 8838:[doctest]: # ()
        -: 8839:
        -: 8840:```c
        -: 8841:#include "jerryscript.h"
        -: 8842:
        -: 8843:int
    #####: 8844:main (void)
        -: 8845:{
    #####: 8846:  jerry_init (JERRY_INIT_EMPTY);
        -: 8847:
    #####: 8848:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8849:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "Object");
        -: 8850:
    #####: 8851:  jerry_value_t prop_value = jerry_get_property (global_object, prop_name);
        -: 8852:
        -: 8853:  /* use "prop_value" then release it. */
        -: 8854:
    #####: 8855:  jerry_release_value (prop_value);
    #####: 8856:  jerry_release_value (prop_name);
    #####: 8857:  jerry_release_value (global_object);
        -: 8858:
        -: 8859:  return 0;
        -: 8860:}
        -: 8861:```
        -: 8862:
        -: 8863:**See also**
        -: 8864:
        -: 8865:- [jerry_has_property](#jerry_has_property)
        -: 8866:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8867:- [jerry_delete_property](#jerry_delete_property)
        -: 8868:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 8869:- [jerry_set_property](#jerry_set_property)
        -: 8870:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 8871:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 8872:
        -: 8873:
        -: 8874:## jerry_get_property_by_index
        -: 8875:
        -: 8876:**Summary**
        -: 8877:
        -: 8878:Get value by an index from the specified object.
        -: 8879:
        -: 8880:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 8881:is no longer needed.
        -: 8882:
        -: 8883:**Prototype**
        -: 8884:
        -: 8885:```c
        -: 8886:jerry_value_t
        -: 8887:jerry_get_property_by_index (const jerry_value_t obj_val,
        -: 8888:                             uint32_t index);
        -: 8889:```
        -: 8890:
        -: 8891:- `obj_val` - object value
        -: 8892:- `index` - index number
        -: 8893:- return value
        -: 8894:  - stored value on the specified index, if success
        -: 8895:  - thrown exception, otherwise.
        -: 8896:
        -: 8897:**Example**
        -: 8898:
        -: 8899:```c
        -: 8900:{
        -: 8901:  jerry_value_t object;
        -: 8902:
        -: 8903:  ... // create or acquire object
        -: 8904:
        -: 8905:  jerry_value_t value = jerry_get_property_by_index (object, 5);
        -: 8906:
        -: 8907:  ...
        -: 8908:
        -: 8909:  jerry_release_value (value);
        -: 8910:  jerry_release_value (object);
        -: 8911:}
        -: 8912:```
        -: 8913:
        -: 8914:**See also**
        -: 8915:
        -: 8916:- [jerry_has_property](#jerry_has_property)
        -: 8917:- [jerry_has_own_property](#jerry_has_own_property)
        -: 8918:- [jerry_delete_property](#jerry_delete_property)
        -: 8919:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 8920:- [jerry_get_property](#jerry_get_property)
        -: 8921:- [jerry_set_property](#jerry_set_property)
        -: 8922:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 8923:
        -: 8924:## jerry_get_own_property
        -: 8925:
        -: 8926:**Summary**
        -: 8927:
        -: 8928:Get the own property value of an object with the given name. The function tells
        -: 8929:whether the property is found, and the receiver object can be specified as well.
        -: 8930:The receiver is passed as the `this` argument for getters, and the receiver
        -: 8931:argument for Proxy `get` traps.
        -: 8932:
        -: 8933:*Notes*:
        -: 8934:  - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it is no longer needed.
        -: 8935:  - The `found_p` argument is ignored if its value is NULL.
        -: 8936:  - The target value of `found_p` argument is set to false when the arguments are invalid, e.g. `obj_val` is not an object.
        -: 8937:
        -: 8938:**Prototype**
        -: 8939:
        -: 8940:```c
        -: 8941:jerry_value_t
        -: 8942:jerry_get_own_property (const jerry_value_t obj_val,
        -: 8943:                        const jerry_value_t prop_name_val,
        -: 8944:                        const jerry_value_t receiver_val,
        -: 8945:                        bool *found_p);
        -: 8946:```
        -: 8947:
        -: 8948:- `obj_val` - object value
        -: 8949:- `prop_name_val` - property name
        -: 8950:- `receiver_val` - receiver object
        -: 8951:- `found_p` - [out] true, if the property is found or obj_val is a Proxy object, false otherwise
        -: 8952:- return value
        -: 8953:  - value of property, if success
        -: 8954:  - thrown error, otherwise
        -: 8955:
        -: 8956:**Example**
        -: 8957:
        -: 8958:[doctest]: # ()
        -: 8959:
        -: 8960:```c
        -: 8961:#include "jerryscript.h"
        -: 8962:#include "stdio.h"
        -: 8963:
        -: 8964:int
    #####: 8965:main (void)
        -: 8966:{
    #####: 8967:  jerry_init (JERRY_INIT_EMPTY);
        -: 8968:
    #####: 8969:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 8970:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "Object");
        -: 8971:
        -: 8972:  bool found;
    #####: 8973:  jerry_value_t prop_value = jerry_get_own_property (global_object, prop_name, global_object, &found);
        -: 8974:
    #####: 8975:  if (found)
        -: 8976:  {
        -: 8977:    printf ("Property is found!\n");
        -: 8978:  }
        -: 8979:
        -: 8980:  /* use "prop_value" then release it. */
        -: 8981:
    #####: 8982:  jerry_release_value (prop_value);
    #####: 8983:  jerry_release_value (prop_name);
    #####: 8984:  jerry_release_value (global_object);
        -: 8985:
        -: 8986:  return 0;
        -: 8987:}
        -: 8988:```
        -: 8989:
        -: 8990:**See also**
        -: 8991:
        -: 8992:- [jerry_get_property](#jerry_get_property)
        -: 8993:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 8994:
        -: 8995:## jerry_get_internal_property
        -: 8996:
        -: 8997:**Summary**
        -: 8998:
        -: 8999:Get value of an internal property to the specified object with the given name.
        -: 9000:
        -: 9001:*Note*:
        -: 9002: - Properties which were not created with [jerry_set_internal_property](#jerry_set_internal_property) are excluded
        -: 9003:   during the operation.
        -: 9004: - Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9005:   is no longer needed.
        -: 9006:
        -: 9007:**Prototype**
        -: 9008:
        -: 9009:```c
        -: 9010:jerry_value_t
        -: 9011:jerry_get_internal_property (const jerry_value_t obj_val,
        -: 9012:                             const jerry_value_t prop_name_val);
        -: 9013:```
        -: 9014:
        -: 9015:- `obj_val` - object value
        -: 9016:- `prop_name_val` - property name
        -: 9017:- return value
        -: 9018:  - value of property, if the internal property exists
        -: 9019:  - undefined value, if the, if the internal does not property exists
        -: 9020:  - thrown error, otherwise
        -: 9021:
        -: 9022:*New in version 2.2*.
        -: 9023:
        -: 9024:**Example**
        -: 9025:
        -: 9026:[doctest]: # ()
        -: 9027:
        -: 9028:```c
        -: 9029:#include "jerryscript.h"
        -: 9030:
        -: 9031:int
    #####: 9032:main (void)
        -: 9033:{
    #####: 9034:  jerry_init (JERRY_INIT_EMPTY);
        -: 9035:
    #####: 9036:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 9037:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
        -: 9038:
    #####: 9039:  jerry_value_t prop_value = jerry_get_internal_property (global_object, prop_name);
        -: 9040:
        -: 9041:  /* use "prop_value" then release it. */
        -: 9042:
    #####: 9043:  jerry_release_value (prop_value);
    #####: 9044:  jerry_release_value (prop_name);
    #####: 9045:  jerry_release_value (global_object);
        -: 9046:
        -: 9047:  return 0;
        -: 9048:}
        -: 9049:```
        -: 9050:
        -: 9051:**See also**
        -: 9052:
        -: 9053:- [jerry_has_internal_property](#jerry_has_internal_property)
        -: 9054:- [jerry_delete_internal_property](#jerry_delete_internal_property)
        -: 9055:- [jerry_set_internal_property](#jerry_set_internal_property)
        -: 9056:
        -: 9057:
        -: 9058:## jerry_set_property
        -: 9059:
        -: 9060:**Summary**
        -: 9061:
        -: 9062:Set a property to the specified object with the given name.
        -: 9063:
        -: 9064:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9065:is no longer needed.
        -: 9066:
        -: 9067:**Prototype**
        -: 9068:
        -: 9069:```c
        -: 9070:jerry_value_t
        -: 9071:jerry_set_property (const jerry_value_t obj_val,
        -: 9072:                    const jerry_value_t prop_name_val,
        -: 9073:                    const jerry_value_t value_to_set)
        -: 9074:```
        -: 9075:
        -: 9076:- `obj_val` - object value
        -: 9077:- `prop_name_val` - property name
        -: 9078:- `value_to_set` - value to set
        -: 9079:- return value
        -: 9080:  - true, if success
        -: 9081:  - thrown error, otherwise
        -: 9082:
        -: 9083:**Example**
        -: 9084:
        -: 9085:```c
        -: 9086:{
        -: 9087:  jerry_value_t value_to_set;
        -: 9088:
        -: 9089:  ... // create or acquire value to set
        -: 9090:
        -: 9091:  jerry_value_t glob_obj = jerry_get_global_object ();
        -: 9092:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
        -: 9093:
        -: 9094:  jerry_value_t set_result = jerry_set_property (glob_obj, prop_name, value_to_set);
        -: 9095:
        -: 9096:  ... // check result of property set call
        -: 9097:
        -: 9098:  jerry_release_value (set_result);
        -: 9099:  jerry_release_value (prop_name);
        -: 9100:
        -: 9101:  ...
        -: 9102:
        -: 9103:  jerry_release_value (value_to_set);
        -: 9104:  jerry_release_value (glob_obj);
        -: 9105:}
        -: 9106:```
        -: 9107:
        -: 9108:**See also**
        -: 9109:
        -: 9110:- [jerry_has_property](#jerry_has_property)
        -: 9111:- [jerry_has_own_property](#jerry_has_own_property)
        -: 9112:- [jerry_delete_property](#jerry_delete_property)
        -: 9113:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 9114:- [jerry_get_property](#jerry_get_property)
        -: 9115:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 9116:- [jerry_set_property_by_index](#jerry_set_property_by_index)
        -: 9117:
        -: 9118:
        -: 9119:## jerry_set_property_by_index
        -: 9120:
        -: 9121:**Summary**
        -: 9122:
        -: 9123:Set indexed value in the specified object
        -: 9124:
        -: 9125:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9126:is no longer needed.
        -: 9127:
        -: 9128:**Prototype**
        -: 9129:
        -: 9130:```c
        -: 9131:jerry_value_t
        -: 9132:jerry_set_property_by_index (const jerry_value_t obj_val,
        -: 9133:                             uint32_t index,
        -: 9134:                             const jerry_value_t value_to_set);
        -: 9135:```
        -: 9136:
        -: 9137:- `obj_val` - object value
        -: 9138:- `index` - index number
        -: 9139:- `value_to_set` - value to set
        -: 9140:- return value
        -: 9141:  - true, if field value was set successfully
        -: 9142:  - thrown exception, otherwise
        -: 9143:
        -: 9144:**Example**
        -: 9145:
        -: 9146:```c
        -: 9147:{
        -: 9148:  jerry_value_t object;
        -: 9149:  jerry_value_t value_to_set;
        -: 9150:
        -: 9151:  ... // create or acquire object and value to set
        -: 9152:
        -: 9153:  jerry_value_t ret_val = jerry_set_property_by_index (object, 5, value_to_set);
        -: 9154:
        -: 9155:  ...
        -: 9156:
        -: 9157:  jerry_release_value (value_to_set);
        -: 9158:  jerry_release_value (ret_val);
        -: 9159:  jerry_release_value (object);
        -: 9160:}
        -: 9161:```
        -: 9162:
        -: 9163:**See also**
        -: 9164:
        -: 9165:- [jerry_has_property](#jerry_has_property)
        -: 9166:- [jerry_has_own_property](#jerry_has_own_property)
        -: 9167:- [jerry_delete_property](#jerry_delete_property)
        -: 9168:- [jerry_delete_property_by_index](#jerry_delete_property_by_index)
        -: 9169:- [jerry_get_property](#jerry_get_property)
        -: 9170:- [jerry_set_property](#jerry_set_property)
        -: 9171:- [jerry_get_property_by_index](#jerry_get_property_by_index)
        -: 9172:
        -: 9173:
        -: 9174:## jerry_set_internal_property
        -: 9175:
        -: 9176:**Summary**
        -: 9177:
        -: 9178:Set an internal property to the specified object with the given name.
        -: 9179:
        -: 9180:*Note*:
        -: 9181: - The property cannot be accessed from the JavaScript context, only from the public API.
        -: 9182: - It is different from [jerry_set_object_native_pointer](#jerry_set_object_native_pointer) in that any jerry API value
        -: 9183:   can be hidden from the JavaScript context, not only native pointers.
        -: 9184:
        -: 9185:**Prototype**
        -: 9186:
        -: 9187:```c
        -: 9188:bool
        -: 9189:jerry_set_internal_property (const jerry_value_t obj_val,
        -: 9190:                             const jerry_value_t prop_name_val,
        -: 9191:                             const jerry_value_t value_to_set)
        -: 9192:```
        -: 9193:
        -: 9194:- `obj_val` - object value
        -: 9195:- `prop_name_val` - property name
        -: 9196:- `value_to_set` - value to set
        -: 9197:- return value
        -: 9198:  - true, if success
        -: 9199:  - thrown error, otherwise
        -: 9200:
        -: 9201:*New in version 2.2*.
        -: 9202:
        -: 9203:**Example**
        -: 9204:
        -: 9205:[doctest]: # ()
        -: 9206:
        -: 9207:```c
        -: 9208:#include "jerryscript.h"
        -: 9209:
        -: 9210:int
    #####: 9211:main (void)
        -: 9212:{
    #####: 9213:  jerry_init (JERRY_INIT_EMPTY);
        -: 9214:
    #####: 9215:  jerry_value_t global_object = jerry_get_global_object ();
    #####: 9216:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "hidden_property");
    #####: 9217:  jerry_value_t value_to_set = jerry_create_number (5);
        -: 9218:
    #####: 9219:  bool set_result = jerry_set_internal_property (global_object, prop_name, value_to_set);
        -: 9220:
        -: 9221:  /* check the result of internal property set call */
        -: 9222:
    #####: 9223:  jerry_release_value (value_to_set);
    #####: 9224:  jerry_release_value (prop_name);
    #####: 9225:  jerry_release_value (global_object);
        -: 9226:
        -: 9227:  return 0;
        -: 9228:}
        -: 9229:```
        -: 9230:
        -: 9231:**See also**
        -: 9232:
        -: 9233:- [jerry_has_internal_property](#jerry_has_internal_property)
        -: 9234:- [jerry_delete_internal_property](#jerry_delete_internal_property)
        -: 9235:- [jerry_get_internal_property](#jerry_get_internal_property)
        -: 9236:
        -: 9237:
        -: 9238:## jerry_property_descriptor_create
        -: 9239:
        -: 9240:**Summary**
        -: 9241:
        -: 9242:Create a property descriptor and initialize it with default values. This means that all fields in
        -: 9243:the `jerry_property_descriptor_t` struct will be set to zero or false depending on the field's type.
        -: 9244:
        -: 9245:**Prototype**
        -: 9246:
        -: 9247:```c
        -: 9248:jerry_property_descriptor_t
        -: 9249:jerry_property_descriptor_create (void);
        -: 9250:```
        -: 9251:
        -: 9252:*New in version [[NEXT_RELEASE]]*: Replaces `jerry_init_property_descriptor_fields`.
        -: 9253:
        -: 9254:**Example**
        -: 9255:
        -: 9256:```c
        -: 9257:{
        -: 9258:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9259:
        -: 9260:  ... // usage of prop_desc
        -: 9261:
        -: 9262:  jerry_property_descriptor_free (&prop_desc);
        -: 9263:}
        -: 9264:```
        -: 9265:
        -: 9266:For a more complete example see [jerry_define_own_property](#jerry_define_own_property).
        -: 9267:
        -: 9268:**See also**
        -: 9269:
        -: 9270:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 9271:- [jerry_define_own_property](#jerry_define_own_property)
        -: 9272:- [jerry_get_own_property_descriptor](#jerry_get_own_property_descriptor)
        -: 9273:- [jerry_property_descriptor_free](#jerry_property_descriptor_free)
        -: 9274:
        -: 9275:
        -: 9276:## jerry_define_own_property
        -: 9277:
        -: 9278:**Summary**
        -: 9279:
        -: 9280:Define a property to the specified object with the given name.
        -: 9281:
        -: 9282:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9283:is no longer needed.
        -: 9284:
        -: 9285:**Prototype**
        -: 9286:
        -: 9287:```c
        -: 9288:jerry_value_t
        -: 9289:jerry_define_own_property (const jerry_value_t obj_val,
        -: 9290:                           const jerry_value_t prop_name_val,
        -: 9291:                           const jerry_property_descriptor_t *prop_desc_p);
        -: 9292:```
        -: 9293:
        -: 9294:- `obj_val` - target object where the property should be registered
        -: 9295:- `prop_name_val` - property name
        -: 9296:- `prop_desc_p` - pointer to property descriptor
        -: 9297:- return value
        -: 9298:  - true, if success
        -: 9299:  - thrown error, otherwise
        -: 9300:
        -: 9301:**Example**
        -: 9302:
        -: 9303:Registering a simple value property via the `jerry_define_own_property` method:
        -: 9304:
        -: 9305:[doctest]: # (name="02.API-REFERENCE-define-property.c")
        -: 9306:
        -: 9307:```c
        -: 9308:#include "jerryscript.h"
        -: 9309:
        -: 9310:int
    #####: 9311:main (void)
        -: 9312:{
    #####: 9313:  jerry_init (JERRY_INIT_EMPTY);
        -: 9314:
    #####: 9315:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -: 9316:
        -: 9317:  // configure the property
    #####: 9318:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9319:
        -: 9320:  // create or acquire value to set
        -: 9321:  // For example:
    #####: 9322:  jerry_value_t value_to_set = jerry_create_number (33);
        -: 9323:
        -: 9324:  // set the property descriptor fields:
        -: 9325:  // set the "JERRY_PROP_IS_VALUE_DEFINED" flag to indicate the "value"
        -: 9326:  //  field should be used during the property registration.
        -: 9327:  // set the writable, configurable, enumerable flags to true
    #####: 9328:  prop_desc.flags |= (JERRY_PROP_IS_WRITABLE_DEFINED
        -: 9329:                      | JERRY_PROP_IS_WRITABLE
        -: 9330:                      | JERRY_PROP_IS_CONFIGURABLE_DEFINED
        -: 9331:                      | JERRY_PROP_IS_CONFIGURABLE
        -: 9332:                      | JERRY_PROP_IS_ENUMERABLE_DEFINED
        -: 9333:                      | JERRY_PROP_IS_ENUMERABLE
        -: 9334:                      | JERRY_PROP_IS_VALUE_DEFINED);
        -: 9335:
        -: 9336:  // set the "value" field to the number 33
    #####: 9337:  prop_desc.value = value_to_set;
        -: 9338:
        -: 9339:  // add the property as "my_prop" for the global object
    #####: 9340:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
    #####: 9341:  jerry_value_t return_value = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####: 9342:  if (jerry_value_is_error (return_value))
        -: 9343:  {
        -: 9344:    // there was an error
        -: 9345:  }
        -: 9346:
        -: 9347:  // re-define the property with the enumerable flag set to false
    #####: 9348:  prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_ENUMERABLE;
    #####: 9349:  return_value = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####: 9350:  if (jerry_value_is_error (return_value))
        -: 9351:  {
        -: 9352:    // there was an error
        -: 9353:  }
        -: 9354:
        -: 9355:  // if there was no error at this point the global object should have a "my_prop" property
        -: 9356:
    #####: 9357:  jerry_release_value (return_value);
    #####: 9358:  jerry_release_value (prop_name);
        -: 9359:
    #####: 9360:  jerry_property_descriptor_free (&prop_desc);
    #####: 9361:  jerry_release_value (global_obj_val);
        -: 9362:
    #####: 9363:  jerry_cleanup ();
        -: 9364:  return 0;
        -: 9365:}
        -: 9366:```
        -: 9367:
        -: 9368:
        -: 9369:Registering a getter/setter property via the `jerry_define_own_property` method:
        -: 9370:
        -: 9371:[doctest]: # (name="02.API-REFERENCE-define-property-getset.c")
        -: 9372:
        -: 9373:```c
        -: 9374:#include <stdio.h>
        -: 9375:#include <string.h>
        -: 9376:#include "jerryscript.h"
        -: 9377:
        -: 9378:static int counter = 0;
        -: 9379:
        -: 9380:static jerry_value_t
    #####: 9381:method_getter (const jerry_call_info_t *call_info_p,
        -: 9382:               const jerry_value_t args[],
        -: 9383:               const jerry_length_t argc)
        -: 9384:{
    #####: 9385:  counter++;
    #####: 9386:  printf("Getter called, returning: %d\n", counter);
        -: 9387:
    #####: 9388:  return jerry_create_number (counter);
        -: 9389:}
        -: 9390:
        -: 9391:static jerry_value_t
    #####: 9392:method_setter (const jerry_call_info_t *call_info_p,
        -: 9393:               const jerry_value_t args[],
        -: 9394:               const jerry_length_t argc)
        -: 9395:{
        -: 9396:  // Note: the arguments count and type should be checked
        -: 9397:  // in this example it is ommitted!
        -: 9398:
    #####: 9399:  double new_value = jerry_get_number_value (args[0]);
    #####: 9400:  counter = (int) new_value;
        -: 9401:
    #####: 9402:  printf("Setter called, setting: %d\n", counter);
        -: 9403:
    #####: 9404:  return jerry_create_undefined ();
        -: 9405:}
        -: 9406:
        -: 9407:int
    #####: 9408:main (void)
        -: 9409:{
    #####: 9410:  jerry_init (JERRY_INIT_EMPTY);
        -: 9411:
    #####: 9412:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -: 9413:
        -: 9414:  // configure the property
    #####: 9415:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9416:
        -: 9417:  // set the property descriptor fields:
        -: 9418:
    #####: 9419:  prop_desc.flags |= JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED;
    #####: 9420:  prop_desc.getter = jerry_create_external_function (method_getter);
    #####: 9421:  prop_desc.setter = jerry_create_external_function (method_setter);
        -: 9422:
        -: 9423:  // add the property as "my_prop" for the global object
    #####: 9424:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
    #####: 9425:  jerry_value_t return_value = jerry_define_own_property (global_obj_val, prop_name, &prop_desc);
    #####: 9426:  if (jerry_value_is_error (return_value))
        -: 9427:  {
        -: 9428:    // there was an error
        -: 9429:  }
        -: 9430:
        -: 9431:  // if there was no error at this point the global object should have a "my_prop" property
        -: 9432:
    #####: 9433:  jerry_release_value (return_value);
    #####: 9434:  jerry_release_value (prop_name);
        -: 9435:
    #####: 9436:  jerry_property_descriptor_free (&prop_desc);
    #####: 9437:  jerry_release_value (global_obj_val);
        -: 9438:
        -: 9439:  // run an example js code to use the getter/setters
        -: 9440:
    #####: 9441:  const char *src_p = "this.my_prop; this.my_prop; this.my_prop = 4; this.my_prop";
    #####: 9442:  jerry_value_t eval_result = jerry_eval ((const jerry_char_t *) src_p, strlen (src_p), JERRY_PARSE_NO_OPTS);
        -: 9443:
        -: 9444:  // "eval_result" is the last result of "this.my_prop" that is "5" currently.
    #####: 9445:  double result_number = jerry_get_number_value (eval_result);
    #####: 9446:  printf("output: %lf\n", result_number);
        -: 9447:
    #####: 9448:  jerry_cleanup ();
        -: 9449:
    #####: 9450:  return result_number != 5.0;
        -: 9451:}
        -: 9452:```
        -: 9453:
        -: 9454:**See also**
        -: 9455:
        -: 9456:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 9457:- [jerry_property_descriptor_create](#jerry_property_descriptor_create)
        -: 9458:- [jerry_get_own_property_descriptor](#jerry_get_own_property_descriptor)
        -: 9459:- [jerry_property_descriptor_free](#jerry_property_descriptor_free)
        -: 9460:
        -: 9461:
        -: 9462:## jerry_get_own_property_descriptor
        -: 9463:
        -: 9464:**Summary**
        -: 9465:
        -: 9466:Construct property descriptor from specified property.
        -: 9467:
        -: 9468:**Prototype**
        -: 9469:
        -: 9470:```c
        -: 9471:jerry_value_t
        -: 9472:jerry_get_own_property_descriptor (const jerry_value_t  obj_val,
        -: 9473:                                   const jerry_value_t prop_name_val,
        -: 9474:                                   jerry_property_descriptor_t *prop_desc_p);
        -: 9475:```
        -: 9476:
        -: 9477:- `obj_val` - object value
        -: 9478:- `prop_name_val` - property name
        -: 9479:- `prop_desc_p` - pointer to property descriptor
        -: 9480:- return value
        -: 9481:
        -: 9482:*Changed in version [[NEXT_RELEASE]]*: Return value type is changed to `jerry_value_t`.
        -: 9483:
        -: 9484:**Example**
        -: 9485:
        -: 9486:```c
        -: 9487:{
        -: 9488:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -: 9489:
        -: 9490:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9491:
        -: 9492:  jerry_value_t prop_name = jerry_create_string ((const jerry_char_t *) "my_prop");
        -: 9493:  jerry_get_own_property_descriptor (global_obj_val, prop_name, &prop_desc);
        -: 9494:  jerry_release_value (prop_name);
        -: 9495:
        -: 9496:  ... // usage of property descriptor
        -: 9497:
        -: 9498:  jerry_property_descriptor_free (&prop_desc);
        -: 9499:  jerry_release_value (global_obj_val);
        -: 9500:}
        -: 9501:```
        -: 9502:
        -: 9503:**See also**
        -: 9504:
        -: 9505:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 9506:- [jerry_property_descriptor_create](#jerry_property_descriptor_create)
        -: 9507:- [jerry_define_own_property](#jerry_define_own_property)
        -: 9508:- [jerry_property_descriptor_free](#jerry_property_descriptor_free)
        -: 9509:
        -: 9510:
        -: 9511:## jerry_property_descriptor_free
        -: 9512:
        -: 9513:**Summary**
        -: 9514:
        -: 9515:Free fields of property descriptor (setter, getter and value).
        -: 9516:
        -: 9517:**Prototype**
        -: 9518:
        -: 9519:```c
        -: 9520:void
        -: 9521:jerry_property_descriptor_free (const jerry_property_descriptor_t *prop_desc_p);
        -: 9522:```
        -: 9523:
        -: 9524:- `prop_desc_p` - pointer to property descriptor
        -: 9525:
        -: 9526:*New in version [[NEXT_RELEASE]]*: Replaces `jerry_free_property_descriptor_fields`.
        -: 9527:
        -: 9528:**Example**
        -: 9529:
        -: 9530:```c
        -: 9531:{
        -: 9532:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor_create ();
        -: 9533:
        -: 9534:  ... // usage of property descriptor
        -: 9535:
        -: 9536:  jerry_property_descriptor_free (&prop_desc);
        -: 9537:}
        -: 9538:```
        -: 9539:
        -: 9540:**See also**
        -: 9541:
        -: 9542:- [jerry_property_descriptor_create](#jerry_property_descriptor_create)
        -: 9543:- [jerry_define_own_property](#jerry_define_own_property)
        -: 9544:- [jerry_get_own_property_descriptor](#jerry_get_own_property_descriptor)
        -: 9545:
        -: 9546:
        -: 9547:## jerry_call_function
        -: 9548:
        -: 9549:**Summary**
        -: 9550:
        -: 9551:Call function specified by a function value. Error flag must
        -: 9552:not be set for any arguments of this function. Value of `this`
        -: 9553:parameter should be set to `undefined` for non-method calls.
        -: 9554:
        -: 9555:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9556:is no longer needed.
        -: 9557:
        -: 9558:**Prototype**
        -: 9559:
        -: 9560:```c
        -: 9561:jerry_value_t
        -: 9562:jerry_call_function (const jerry_value_t func_obj_val,
        -: 9563:                     const jerry_value_t this_val,
        -: 9564:                     const jerry_value_t args_p[],
        -: 9565:                     jerry_size_t args_count);
        -: 9566:```
        -: 9567:
        -: 9568:- `func_obj_val` - the function object to call
        -: 9569:- `this_val` - object for 'this' binding
        -: 9570:- `args_p` - function's call arguments
        -: 9571:- `args_count` - number of arguments
        -: 9572:- return value - returned jerry value of the called function
        -: 9573:
        -: 9574:**Example**
        -: 9575:
        -: 9576:```c
        -: 9577:{
        -: 9578:  jerry_value_t target_function;
        -: 9579:
        -: 9580:  ... // create or get "target_function"
        -: 9581:
        -: 9582:  if (jerry_value_is_function (target_function))
        -: 9583:  {
        -: 9584:    jerry_value_t this_val = jerry_create_undefined ();
        -: 9585:    jerry_value_t ret_val = jerry_call_function (target_function, this_val, NULL, 0);
        -: 9586:
        -: 9587:    if (!jerry_value_is_error (ret_val))
        -: 9588:    {
        -: 9589:      ... // handle return value
        -: 9590:    }
        -: 9591:
        -: 9592:    jerry_release_value (ret_val);
        -: 9593:    jerry_release_value (this_val);
        -: 9594:  }
        -: 9595:
        -: 9596:  jerry_release_value (target_function);
        -: 9597:}
        -: 9598:```
        -: 9599:
        -: 9600:**See also**
        -: 9601:
        -: 9602:- [jerry_is_function](#jerry_is_function)
        -: 9603:- [jerry_create_external_function](#jerry_create_external_function)
        -: 9604:
        -: 9605:
        -: 9606:## jerry_construct_object
        -: 9607:
        -: 9608:**Summary**
        -: 9609:
        -: 9610:Construct object, invoking specified function object as constructor.
        -: 9611:Error flag must not be set for any arguments of this function.
        -: 9612:
        -: 9613:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9614:is no longer needed.
        -: 9615:
        -: 9616:**Prototype**
        -: 9617:
        -: 9618:```c
        -: 9619:jerry_value_t
        -: 9620:jerry_construct_object (const jerry_value_t func_obj_val,
        -: 9621:                        const jerry_value_t args_p[],
        -: 9622:                        jerry_size_t args_count);
        -: 9623:```
        -: 9624:
        -: 9625:- `func_obj_val` - function object to call
        -: 9626:- `args_p` - function's call arguments
        -: 9627:- `args_count` - number of arguments
        -: 9628:- return value - returned value of the invoked constructor
        -: 9629:
        -: 9630:**Example**
        -: 9631:
        -: 9632:```c
        -: 9633:{
        -: 9634:  jerry_value_t val;
        -: 9635:
        -: 9636:  ... // receiving val
        -: 9637:
        -: 9638:  if (jerry_is_constructor (val))
        -: 9639:  {
        -: 9640:    jerry_value_t ret_val = jerry_construct_object (val, NULL, 0);
        -: 9641:
        -: 9642:    if (!jerry_value_is_error (ret_val))
        -: 9643:    {
        -: 9644:      ... // handle return value
        -: 9645:    }
        -: 9646:
        -: 9647:    jerry_release_value (ret_val);
        -: 9648:  }
        -: 9649:}
        -: 9650:```
        -: 9651:
        -: 9652:**See also**
        -: 9653:
        -: 9654: - [jerry_is_constructor](#jerry_is_constructor)
        -: 9655:
        -: 9656:
        -: 9657:## jerry_get_object_keys
        -: 9658:
        -: 9659:**Summary**
        -: 9660:
        -: 9661:Get keys of the specified object value.
        -: 9662:
        -: 9663:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9664:is no longer needed.
        -: 9665:
        -: 9666:**Prototype**
        -: 9667:
        -: 9668:```c
        -: 9669:jerry_value_t
        -: 9670:jerry_get_object_keys (const jerry_value_t obj_val);
        -: 9671:```
        -: 9672:
        -: 9673:- `obj_val` - object value
        -: 9674:- return value
        -: 9675:  - array object value, if success
        -: 9676:  - thrown error, otherwise
        -: 9677:
        -: 9678:**Example**
        -: 9679:
        -: 9680:```c
        -: 9681:{
        -: 9682:  jerry_value_t object;
        -: 9683:  ... // create or acquire object
        -: 9684:
        -: 9685:  jerry_value_t keys_array = jerry_get_object_keys (object);
        -: 9686:
        -: 9687:  ... // usage of keys_array
        -: 9688:
        -: 9689:  jerry_release_value (keys_array);
        -: 9690:}
        -: 9691:```
        -: 9692:
        -: 9693:**See also**
        -: 9694:
        -: 9695:- [jerry_get_property](#jerry_get_property)
        -: 9696:- [jerry_set_property](#jerry_set_property)
        -: 9697:
        -: 9698:
        -: 9699:## jerry_get_prototype
        -: 9700:
        -: 9701:**Summary**
        -: 9702:
        -: 9703:Get the prototype of the specified object.
        -: 9704:
        -: 9705:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9706:is no longer needed.
        -: 9707:
        -: 9708:**Prototype**
        -: 9709:
        -: 9710:```c
        -: 9711:jerry_value_t
        -: 9712:jerry_get_prototype (const jerry_value_t obj_val);
        -: 9713:```
        -: 9714:
        -: 9715:- `obj_val` - object value
        -: 9716:- return value
        -: 9717:  - object value, if success
        -: 9718:  - null or thrown error, otherwise
        -: 9719:
        -: 9720:**Example**
        -: 9721:
        -: 9722:```c
        -: 9723:{
        -: 9724:  jerry_value_t object;
        -: 9725:  ... // create or acquire object
        -: 9726:
        -: 9727:  jerry_value_t prototype = jerry_get_prototype (object);
        -: 9728:
        -: 9729:  ... // usage of prototype object
        -: 9730:
        -: 9731:  jerry_release_value (prototype);
        -: 9732:  jerry_release_value (object);
        -: 9733:}
        -: 9734:```
        -: 9735:
        -: 9736:**See also**
        -: 9737:
        -: 9738:- [jerry_set_prototype](#jerry_set_prototype)
        -: 9739:
        -: 9740:
        -: 9741:## jerry_set_prototype
        -: 9742:
        -: 9743:**Summary**
        -: 9744:
        -: 9745:Set the prototype of the specified object.
        -: 9746:
        -: 9747:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -: 9748:is no longer needed.
        -: 9749:
        -: 9750:**Prototype**
        -: 9751:
        -: 9752:```c
        -: 9753:jerry_value_t
        -: 9754:jerry_set_prototype (const jerry_value_t obj_val,
        -: 9755:                     const jerry_value_t proto_obj_val);
        -: 9756:```
        -: 9757:
        -: 9758:- `obj_val` - object value
        -: 9759:- `proto_obj_val` - prototype object value
        -: 9760:- return value
        -: 9761:  - true, if success
        -: 9762:  - thrown error, otherwise
        -: 9763:
        -: 9764:**Example**
        -: 9765:
        -: 9766:```c
        -: 9767:{
        -: 9768:  jerry_value_t object;
        -: 9769:  jerry_value_t prototype;
        -: 9770:
        -: 9771:  ... // create or acquire object and prototype
        -: 9772:
        -: 9773:  jerry_value_t ret_val = jerry_set_prototype (object, prototype);
        -: 9774:
        -: 9775:  jerry_release_value (ret_val);
        -: 9776:  jerry_release_value (prototype);
        -: 9777:  jerry_release_value (object);
        -: 9778:}
        -: 9779:```
        -: 9780:
        -: 9781:**See also**
        -: 9782:
        -: 9783:- [jerry_get_prototype](#jerry_get_prototype)
        -: 9784:
        -: 9785:
        -: 9786:## jerry_get_object_native_pointer
        -: 9787:
        -: 9788:**Summary**
        -: 9789:
        -: 9790:Get native pointer by the given type information.
        -: 9791:The pointer and the type information are previously associated with the object by
        -: 9792:[jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -: 9793:
        -: 9794:*Note*: `out_native_pointer_p` can be NULL, and it means the
        -: 9795:        caller doesn't want to get the native_pointer.
        -: 9796:
        -: 9797:**Prototype**
        -: 9798:
        -: 9799:```c
        -: 9800:bool
        -: 9801:jerry_get_object_native_pointer (const jerry_value_t obj_val,
        -: 9802:                                 void **out_native_pointer_p,
        -: 9803:                                 const jerry_object_native_info_t *native_info_p)
        -: 9804:```
        -: 9805:
        -: 9806:- `obj_val` - object value to get native pointer from.
        -: 9807:- `out_native_pointer_p` - native pointer (output parameter).
        -: 9808:- `native_info_p` - native pointer's type information.
        -: 9809:- return value
        -: 9810:  - true, if there is native pointer associated of the specified object with the given native type info
        -: 9811:  - false, otherwise
        -: 9812:
        -: 9813:*New in version 2.0*: Changed from `jerry_get_object_native_handle`.
        -: 9814:
        -: 9815:**Example**
        -: 9816:
        -: 9817:[doctest]: # ()
        -: 9818:
        -: 9819:```c
        -: 9820:#include <stdio.h>
        -: 9821:#include <stdlib.h>
        -: 9822:#include <string.h>
        -: 9823:#include "jerryscript.h"
        -: 9824:
        -: 9825:typedef struct
        -: 9826:{
        -: 9827:  char *data_p;
        -: 9828:  unsigned int length;
        -: 9829:} buffer_native_object_t;
        -: 9830:
        -: 9831:typedef struct
        -: 9832:{
        -: 9833:  int area;
        -: 9834:  int perimeter;
        -: 9835:} shape_native_object_t;
        -: 9836:
        -: 9837:#define SECRET_INFO ((void *) 42)
        -: 9838:
        -: 9839:static void
    #####: 9840:buffer_native_freecb (void *native_p,
        -: 9841:                      jerry_object_native_info_t *info_p)
        -: 9842:{
        -: 9843:  (void) info_p;
        -: 9844:
    #####: 9845:  char *data_p = ((buffer_native_object_t*)native_p)->data_p;
        -: 9846:
    #####: 9847:  if (data_p != NULL)
        -: 9848:  {
    #####: 9849:    free (data_p);
        -: 9850:  }
        -: 9851:
    #####: 9852:  free (native_p);
    #####: 9853:}
        -: 9854:
        -: 9855:static void
    #####: 9856:shape_native_freecb (void *native_p,
        -: 9857:                     jerry_object_native_info_t *info_p)
        -: 9858:{
        -: 9859:  (void) info_p;
        -: 9860:
    #####: 9861:  free (native_p);
    #####: 9862:}
        -: 9863:
        -: 9864:static void
    #####: 9865:destructor_freecb (void *native_p,
        -: 9866:                   jerry_object_native_info_t *info_p)
        -: 9867:{
        -: 9868:  (void) native_p;
        -: 9869:  (void) info_p;
        -: 9870:
    #####: 9871:   printf("Note: the object has been freed\n");
    #####: 9872:}
        -: 9873:
        -: 9874:// NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -: 9875:// C type `buffer_native_object_t *`.
        -: 9876:static const jerry_object_native_info_t buffer_obj_type_info =
        -: 9877:{
        -: 9878:  .free_cb = buffer_native_freecb
        -: 9879:};
        -: 9880:
        -: 9881:// NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -: 9882:// C type `shape_native_object_t *`.
        -: 9883:static const jerry_object_native_info_t shape_obj_type_info =
        -: 9884:{
        -: 9885:  .free_cb = shape_native_freecb
        -: 9886:};
        -: 9887:
        -: 9888:// NOTE: The address (!) of type_info is the unique "identifier"
        -: 9889:static const jerry_object_native_info_t destructor_obj_type_info =
        -: 9890:{
        -: 9891:  .free_cb = destructor_freecb
        -: 9892:};
        -: 9893:
        -: 9894:static void
    #####: 9895:print_buffer (char *data_p,
        -: 9896:              unsigned int length)
        -: 9897:{
    #####: 9898:  for (unsigned int i = 0; i < length; ++i)
        -: 9899:  {
    #####: 9900:    printf("%c", data_p[i]);
        -: 9901:  }
        -: 9902:
    #####: 9903:  printf("\n");
    #####: 9904:}
        -: 9905:
        -: 9906:static void
    #####: 9907:do_stuff (jerry_value_t object)
        -: 9908:{
        -: 9909:  void *native_p;
    #####: 9910:  bool has_p = jerry_get_object_native_pointer (object, &native_p, &buffer_obj_type_info);
        -: 9911:
    #####: 9912:  if (!has_p)
        -: 9913:  {
        -: 9914:    // Process the error
    #####: 9915:    return;
        -: 9916:  }
        -: 9917:
        -: 9918:  // It is safe to cast to buffer_native_object_t * and dereference the pointer:
    #####: 9919:  buffer_native_object_t *buffer_p = (buffer_native_object_t *) native_p;
    #####: 9920:  print_buffer (buffer_p->data_p, buffer_p->length); // Usage of buffer_p
        -: 9921:
    #####: 9922:  bool need_shape_info = true; // implementation dependent
        -: 9923:
        -: 9924:  if (need_shape_info)
        -: 9925:  {
    #####: 9926:    has_p = jerry_get_object_native_pointer (object, &native_p, &shape_obj_type_info);
        -: 9927:
    #####: 9928:    if (!has_p)
        -: 9929:    {
        -: 9930:      // Process the error
        -: 9931:      return;
        -: 9932:    }
        -: 9933:
        -: 9934:    // It is safe to cast to shape_native_object_t * and dereference the pointer:
    #####: 9935:    shape_native_object_t *shape_p = (shape_native_object_t *) native_p;
        -: 9936:
    #####: 9937:    printf("Area: %d\tPerimeter: %d\n", shape_p->area, shape_p->perimeter); // Usage of shape_p
        -: 9938:  }
        -: 9939:
    #####: 9940:  bool need_secret_info = true; // implementation dependent
        -: 9941:
        -: 9942:  if (need_secret_info)
        -: 9943:  {
    #####: 9944:    has_p = jerry_get_object_native_pointer (object, &native_p, NULL);
        -: 9945:
    #####: 9946:    if (!has_p)
        -: 9947:    {
        -: 9948:      // Process the error
        -: 9949:      return;
        -: 9950:    }
        -: 9951:
    #####: 9952:    printf("Secret: %d\n", (int)((uintptr_t) native_p)); // Usage of native_p
        -: 9953:
    #####: 9954:    bool deleted = jerry_delete_object_native_pointer (object, NULL);
        -: 9955:
    #####: 9956:    if (deleted)
        -: 9957:    {
        -: 9958:      printf("The secret is no longer available\n");
        -: 9959:    }
        -: 9960:  }
        -: 9961:}
        -: 9962:
        -: 9963:int
    #####: 9964:main (void)
        -: 9965:{
    #####: 9966:  jerry_init (JERRY_INIT_EMPTY);
        -: 9967:
    #####: 9968:  jerry_value_t object = jerry_create_object ();
    #####: 9969:  buffer_native_object_t *buffer_p = (buffer_native_object_t *) malloc (sizeof (buffer_native_object_t));
    #####: 9970:  buffer_p->length = 14;
    #####: 9971:  buffer_p->data_p = (char *) malloc (buffer_p->length * sizeof (char));
    #####: 9972:  memcpy (buffer_p->data_p, "My buffer data", buffer_p->length);
    #####: 9973:  jerry_set_object_native_pointer (object, buffer_p, &buffer_obj_type_info);
        -: 9974:
    #####: 9975:  shape_native_object_t *shape_p = (shape_native_object_t *) malloc (sizeof (shape_native_object_t));
    #####: 9976:  shape_p->area = 6;
    #####: 9977:  shape_p->perimeter = 12;
    #####: 9978:  jerry_set_object_native_pointer (object, shape_p, &shape_obj_type_info);
        -: 9979:
        -: 9980:  // The native pointer can be NULL. This gives possibily to get notified via the native type info's
        -: 9981:  // free callback when the object has been freed by the GC.
    #####: 9982:  jerry_set_object_native_pointer (object, NULL, &destructor_obj_type_info);
        -: 9983:
        -: 9984:  // The native type info can be NULL as well. In this case the registered property is simply freed
        -: 9985:  // when the object is freed by te GC.
    #####: 9986:  jerry_set_object_native_pointer (object, SECRET_INFO, NULL);
        -: 9987:
    #####: 9988:  do_stuff (object);
        -: 9989:
    #####: 9990:  jerry_release_value (object);
    #####: 9991:  jerry_cleanup ();
        -: 9992:
        -: 9993:  return 0;
        -: 9994:}
        -: 9995:```
        -: 9996:
        -: 9997:**See also**
        -: 9998:
        -: 9999:- [jerry_create_object](#jerry_create_object)
        -:10000:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:10001:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10002:
        -:10003:
        -:10004:## jerry_set_object_native_pointer
        -:10005:
        -:10006:**Summary**
        -:10007:
        -:10008:Set native pointer and an optional type information for the specified object.
        -:10009:You can get them by calling [jerry_get_object_native_pointer](#jerry_get_object_native_pointer) later.
        -:10010:
        -:10011:*Notes*:
        -:10012: - If a native pointer was already set for the object with the same type information, its value is updated.
        -:10013: - If a non-NULL free callback is specified in the native type information,
        -:10014:   it will be called by the garbage collector when the object is freed.
        -:10015: - If the object is only referenced via the "global" object (or one of it's "child"),
        -:10016:   the free callback will be invoked during the execution of `jerry_cleanup`.
        -:10017: - The free callback can invoke API functions.
        -:10018:
        -:10019:*Note*: If possible do not store API values in native pointers, rather check
        -:10020:        [jerry_set_internal_property](#jerry_set_internal_property).
        -:10021:
        -:10022:**Prototype**
        -:10023:
        -:10024:```c
        -:10025:void
        -:10026:jerry_set_object_native_pointer (const jerry_value_t obj_val,
        -:10027:                                 void *native_p,
        -:10028:                                 const jerry_object_native_info_t *info_p)
        -:10029:```
        -:10030:
        -:10031:- `obj_val` - object to set native pointer in.
        -:10032:- `native_p` - native pointer.
        -:10033:- `info_p` - native pointer's type information or NULL. When used, this should
        -:10034:             be a long-lived pointer, usually a pointer to a
        -:10035:             `static const jerry_object_native_info_t` makes most sense.
        -:10036:
        -:10037:*New in version 2.0*: Changed from `jerry_set_object_native_handle`.
        -:10038:
        -:10039:**Example**
        -:10040:
        -:10041:See [jerry_get_object_native_pointer](#jerry_get_object_native_pointer) for a
        -:10042:best-practice example.
        -:10043:
        -:10044:**See also**
        -:10045:
        -:10046:- [jerry_create_object](#jerry_create_object)
        -:10047:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -:10048:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10049:
        -:10050:## jerry_delete_object_native_pointer
        -:10051:
        -:10052:**Summary**
        -:10053:
        -:10054:Delete the native pointer of the specified object associated with the given native type info.
        -:10055:
        -:10056:*Notes*:
        -:10057: - If the specified object has no matching native pointer for the given native type info the operation has no effect.
        -:10058: - The method does not invoke the free callback specified in the type info.
        -:10059:   If the native pointer should be freed then one must get the native pointer first and invoke the free callback manually
        -:10060:   before calling this method.
        -:10061: - This operation cannot throw an exception.
        -:10062:
        -:10063:**Prototype**
        -:10064:
        -:10065:```c
        -:10066:bool
        -:10067:jerry_delete_object_native_pointer (const jerry_value_t obj_val,
        -:10068:                                    const jerry_object_native_info_t *info_p)
        -:10069:```
        -:10070:
        -:10071:- `obj_val` - object to delete native pointer from.
        -:10072:- `info_p` - native pointer's type information.
        -:10073:
        -:10074:*New in version 2.0*.
        -:10075:
        -:10076:**Example**
        -:10077:
        -:10078:See [jerry_get_object_native_pointer](#jerry_get_object_native_pointer) for a
        -:10079:best-practice example.
        -:10080:
        -:10081:**See also**
        -:10082:
        -:10083:- [jerry_create_object](#jerry_create_object)
        -:10084:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -:10085:- [jerry_get_object_native_pointer](#jerry_set_object_native_pointer)
        -:10086:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10087:
        -:10088:
        -:10089:## jerry_native_pointer_init_references
        -:10090:
        -:10091:**Summary**
        -:10092:
        -:10093:Initialize the references stored in a buffer pointed by a native pointer.
        -:10094:The references are initialized to undefined. This function must be called
        -:10095:before the buffer is attached to an object by
        -:10096:[jerry_set_object_native_pointer](#jerry_set_object_native_pointer).
        -:10097:
        -:10098:*Note*:
        -:10099:  - The description of [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10100:    provides detailed information about these references.
        -:10101:
        -:10102:**Prototype**
        -:10103:
        -:10104:```c
        -:10105:void
        -:10106:jerry_native_pointer_init_references (void *native_pointer_p,
        -:10107:                                      const jerry_object_native_info_t *native_info_p);
        -:10108:```
        -:10109:
        -:10110:- `native_pointer_p` - a valid non-NULL pointer to a native buffer.
        -:10111:- `native_info_p` - native pointer's type information.
        -:10112:
        -:10113:*New in version [[NEXT_RELEASE]]*.
        -:10114:
        -:10115:**Example**
        -:10116:
        -:10117:[doctest]: # ()
        -:10118:
        -:10119:```c
        -:10120:#include <stdlib.h>
        -:10121:#include "jerryscript.h"
        -:10122:
        -:10123:typedef struct
        -:10124:{
        -:10125:  uint32_t user_data;
        -:10126:  jerry_value_t a;
        -:10127:  jerry_value_t b;
        -:10128:  uint32_t user_other_data;
        -:10129:} user_buffer_t;
        -:10130:
        -:10131:static void
    #####:10132:native_references_free_callback (void *native_p, /**< native pointer */
        -:10133:                                 jerry_object_native_info_t *info_p) /**< native info */
        -:10134:{
        -:10135:  /* References must be finalized when a buffer is no longer attached. */
    #####:10136:  jerry_native_pointer_release_references (native_p, info_p);
    #####:10137:  free (native_p);
    #####:10138:} /* native_references_free_callback */
        -:10139:
        -:10140:static const jerry_object_native_info_t native_info =
        -:10141:{
        -:10142:  .free_cb = native_references_free_callback,
        -:10143:  .number_of_references = 2,
        -:10144:  .offset_of_references = offsetof(user_buffer_t, a),
        -:10145:};
        -:10146:
        -:10147:int
    #####:10148:main (void)
        -:10149:{
    #####:10150:  jerry_init (JERRY_INIT_EMPTY);
        -:10151:
    #####:10152:  jerry_value_t object_value = jerry_create_object ();
        -:10153:
    #####:10154:  user_buffer_t *buffer_p = (user_buffer_t *) malloc (sizeof (user_buffer_t));
        -:10155:
        -:10156:  /* References must be initialized before a buffer is attached. */
    #####:10157:  jerry_native_pointer_init_references ((void *) buffer_p, &native_info);
        -:10158:
    #####:10159:  jerry_set_object_native_pointer (object_value, (void *) buffer_p, &native_info);
        -:10160:
        -:10161:  /* References can be modified after the buffer is attached.
        -:10162:   * This example sets a self reference. */
    #####:10163:  jerry_native_pointer_set_reference (&buffer_p->a, object_value);
        -:10164:
    #####:10165:  jerry_release_value (object_value);
        -:10166:
    #####:10167:  jerry_cleanup ();
        -:10168:  return 0;
        -:10169:}
        -:10170:```
        -:10171:
        -:10172:**See also**
        -:10173:
        -:10174:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:10175:- [jerry_native_pointer_release_references](#jerry_native_pointer_release_references)
        -:10176:- [jerry_native_pointer_set_reference](#jerry_native_pointer_set_reference)
        -:10177:
        -:10178:## jerry_native_pointer_release_references
        -:10179:
        -:10180:**Summary**
        -:10181:
        -:10182:Release the value references stored in a buffer pointed by a native pointer.
        -:10183:This function must be called after a buffer is no longer attached to any
        -:10184:object, even if the buffer is attached to another object again. This
        -:10185:function also initializes the values to undefined, so calling
        -:10186:[jerry_native_pointer_init_references](#jerry_native_pointer_init_references)
        -:10187:is optional before the buffer is attached again.
        -:10188:
        -:10189:*Note*:
        -:10190:  - The description of [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10191:    provides detailed information about these references.
        -:10192:
        -:10193:**Prototype**
        -:10194:
        -:10195:```c
        -:10196:void
        -:10197:jerry_native_pointer_release_references (void *native_pointer_p,
        -:10198:                                         const jerry_object_native_info_t *native_info_p);
        -:10199:```
        -:10200:
        -:10201:- `native_pointer_p` - a valid non-NULL pointer to a native buffer.
        -:10202:- `native_info_p` - native pointer's type information.
        -:10203:
        -:10204:*New in version [[NEXT_RELEASE]]*.
        -:10205:
        -:10206:**Example**
        -:10207:
        -:10208:See the example of [jerry_native_pointer_init_references](#jerry_native_pointer_init_references).
        -:10209:
        -:10210:**See also**
        -:10211:
        -:10212:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:10213:- [jerry_native_pointer_init_references](#jerry_native_pointer_init_references)
        -:10214:- [jerry_native_pointer_set_reference](#jerry_native_pointer_set_reference)
        -:10215:
        -:10216:
        -:10217:## jerry_native_pointer_set_reference
        -:10218:
        -:10219:**Summary**
        -:10220:
        -:10221:Updates a value reference inside the area specified by the `number_of_references` and
        -:10222:`offset_of_references` fields in its corresponding
        -:10223:[jerry_object_native_info_t](#jerry_object_native_info_t) data. The area must be
        -:10224:part of a buffer which is currently assigned to an object.
        -:10225:
        -:10226:*Note*:
        -:10227:  - The description of [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10228:    provides detailed information about these references.
        -:10229:
        -:10230:**Prototype**
        -:10231:
        -:10232:```c
        -:10233:void
        -:10234:jerry_native_pointer_set_reference (jerry_value_t *reference_p,
        -:10235:                                    jerry_value_t value)
        -:10236:```
        -:10237:
        -:10238:- `reference_p` - a valid non-NULL pointer to a reference in a native buffer.
        -:10239:- `value` - new value of the reference.
        -:10240:
        -:10241:*New in version [[NEXT_RELEASE]]*.
        -:10242:
        -:10243:**Example**
        -:10244:
        -:10245:See the example of [jerry_native_pointer_init_references](#jerry_native_pointer_init_references).
        -:10246:
        -:10247:**See also**
        -:10248:
        -:10249:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:10250:- [jerry_native_pointer_init_references](#jerry_native_pointer_init_references)
        -:10251:- [jerry_native_pointer_release_references](#jerry_native_pointer_release_references)
        -:10252:
        -:10253:
        -:10254:## jerry_object_get_property_names
        -:10255:
        -:10256:**Summary**
        -:10257:
        -:10258:Gets the property keys for the given object using the selected filters.
        -:10259:
        -:10260:**Prototype**
        -:10261:
        -:10262:```c
        -:10263:jerry_value_t
        -:10264:jerry_object_get_property_names (jerry_value_t obj_val,
        -:10265:                                 jerry_property_filter_t filter);
        -:10266:```
        -:10267:
        -:10268:- `obj_val` - object value
        -:10269:- `filter` - any combination of [jerry_property_filter_t](#jerry_property_filter_t) options
        -:10270:- return value
        -:10271:  - array containing the filtered property keys in successful operation
        -:10272:  - error marked with error flag, otherwise
        -:10273:
        -:10274:*New in version 2.4*.
        -:10275:
        -:10276:**Example**
        -:10277:
        -:10278:```c
        -:10279:{
        -:10280:  jerry_value_t global_object = jerry_get_global_object ();
        -:10281:  jerry_value_t keys = jerry_object_get_property_names (object, JERRY_PROPERTY_FILTER_ALL);
        -:10282:
        -:10283:  ... // usage of keys
        -:10284:
        -:10285:  jerry_release_value (keys);
        -:10286:  jerry_release_value (global_object);
        -:10287:}
        -:10288:```
        -:10289:
        -:10290:**See also**
        -:10291:
        -:10292:- [jerry_property_filter_t](#jerry_property_filter_t)
        -:10293:
        -:10294:## jerry_foreach_object_property
        -:10295:
        -:10296:**Summary**
        -:10297:
        -:10298:Applies the given function to every enumerable(!) property in the given object.
        -:10299:
        -:10300:The "iterator" `foreach_p` method should return `true` value to continue the iteration.
        -:10301:If the method returns `false` the iteration will end.
        -:10302:
        -:10303:**Prototype**
        -:10304:
        -:10305:```c
        -:10306:bool
        -:10307:jerry_foreach_object_property (jerry_value_t obj_val,
        -:10308:                               jerry_object_property_foreach_t foreach_p,
        -:10309:                               void *user_data_p);
        -:10310:```
        -:10311:
        -:10312:- `obj_val` - object value
        -:10313:- `foreach_p` - foreach function, that will be applied for each property
        -:10314:- `user_data_p` - user data for foreach function
        -:10315:- return value
        -:10316:  - true, if object fields traversal was performed successfully, i.e.:
        -:10317:    - no unhandled exceptions were thrown in object fields traversal
        -:10318:    - object fields traversal was stopped on callback that returned false
        -:10319:  - false, otherwise
        -:10320:
        -:10321:**Example**
        -:10322:
        -:10323:
        -:10324:[doctest]: # (name="02.API-REFERENCE-foreach-property.c")
        -:10325:
        -:10326:```c
        -:10327:#include <stdio.h>
        -:10328:#include "jerryscript.h"
        -:10329:
        -:10330:/* Example structure used as user data for the property iteration. */
        -:10331:struct iteration_data {
        -:10332:  int string_property_count;
        -:10333:};
        -:10334:
        -:10335:/*
        -:10336: * Example foreach function to print out property names.
        -:10337: */
        -:10338:static bool
    #####:10339:foreach_function (const jerry_value_t prop_name,
        -:10340:                  const jerry_value_t prop_value,
        -:10341:                  void *user_data_p)
        -:10342:{
    #####:10343:  if (jerry_value_is_string (prop_name)) {
        -:10344:    jerry_char_t string_buffer[128];
    #####:10345:    jerry_size_t copied_bytes = jerry_substring_to_char_buffer (prop_name,
        -:10346:                                                                0,
        -:10347:                                                                127,
        -:10348:                                                                string_buffer,
        -:10349:                                                                127);
    #####:10350:    string_buffer[copied_bytes] = '\0';
        -:10351:
    #####:10352:    printf ("Property: %s\n", string_buffer);
        -:10353:
    #####:10354:    struct iteration_data *data = (struct iteration_data *) user_data_p;
    #####:10355:    data->string_property_count++;
        -:10356:  }
        -:10357:
        -:10358:  /* return true to continue iteration */
    #####:10359:  return true;
        -:10360:}
        -:10361:
        -:10362:int
    #####:10363:main (void)
        -:10364:{
    #####:10365:  jerry_init (JERRY_INIT_EMPTY);
        -:10366:
        -:10367:  /* Construct an example object with a single property. */
    #####:10368:  jerry_value_t object = jerry_create_object ();
        -:10369:  {
    #####:10370:    jerry_value_t test_property = jerry_create_string ((const jerry_char_t *) "DemoProp");
    #####:10371:    jerry_value_t test_value = jerry_create_number (3);
        -:10372:    /* By default all properties added to an object are enumerable. */
    #####:10373:    jerry_value_t set_result = jerry_set_property (object, test_property, test_value);
        -:10374:    /* The `set_result` should be checked if it is an error or not. */
    #####:10375:    jerry_release_value (set_result);
    #####:10376:    jerry_release_value (test_value);
    #####:10377:    jerry_release_value (test_property);
        -:10378:  }
        -:10379:
        -:10380:  /* Iterate on the object's properties with the given user data. */
    #####:10381:  struct iteration_data user_data = { 0 };
        -:10382:
    #####:10383:  bool iteration_result = jerry_foreach_object_property (object, foreach_function, &user_data);
        -:10384:  /* Check and process the `iteration_result` if required. */
        -:10385:
    #####:10386:  jerry_release_value (object);
        -:10387:
    #####:10388:  jerry_cleanup ();
        -:10389:
    #####:10390:  return user_data.string_property_count == 0;
        -:10391:}
        -:10392:```
        -:10393:
        -:10394:**See also**
        -:10395:
        -:10396:- [jerry_object_property_foreach_t](#jerry_object_property_foreach_t)
        -:10397:
        -:10398:## jerry_objects_foreach
        -:10399:
        -:10400:**Summary**
        -:10401:
        -:10402:Iterate over all objects available in the engine.
        -:10403:
        -:10404:The "iterator" `foreach_p` method should return `true` value to continue the search.
        -:10405:If the method returns `false` the search for the object is finished.
        -:10406:
        -:10407:*Note*: Values obtained in `foreach_p` must be retained using [jerry_acquire_value](#jerry_acquire_value).
        -:10408:
        -:10409:**Prototype**
        -:10410:
        -:10411:```c
        -:10412:bool
        -:10413:jerry_objects_foreach (jerry_objects_foreach_t foreach_p,
        -:10414:                       void *user_data_p);
        -:10415:```
        -:10416:
        -:10417:- `foreach_p` - function that will be invoked for each object.
        -:10418:- `user_data_p` - User data to pass to the function.
        -:10419:- return value
        -:10420:  - `true`, if the search function terminated the traversal by returning `false`
        -:10421:  - `false`, if the end of the list of objects was reached
        -:10422:
        -:10423:*New in version 2.0*.
        -:10424:
        -:10425:**Example**
        -:10426:
        -:10427:[doctest]: # (name="02.API-REFERENCE-objects-foreach.c")
        -:10428:
        -:10429:```c
        -:10430:#include <stdio.h>
        -:10431:#include "jerryscript.h"
        -:10432:
        -:10433:/* Create a custom structure to guide the search and store the result. */
        -:10434:typedef struct
        -:10435:{
        -:10436:  jerry_value_t property_name;
        -:10437:  jerry_value_t result;
        -:10438:} find_my_object_info_t;
        -:10439:
        -:10440:/*
        -:10441: * Find the first object with the given property.
        -:10442: */
        -:10443:static bool
    #####:10444:find_my_object (const jerry_value_t candidate,
        -:10445:                void *user_data_p)
        -:10446:{
    #####:10447:  find_my_object_info_t *info_p = (find_my_object_info_t *) user_data_p;
        -:10448:
        -:10449:  /* Check if the given object has the required property. */
    #####:10450:  jerry_value_t has_property = jerry_has_property (candidate, info_p->property_name);
    #####:10451:  bool object_found = jerry_value_is_true (has_property);
        -:10452:
    #####:10453:  if (object_found)
        -:10454:  {
        -:10455:    /* We found it, so we acquire the value and record it. */
    #####:10456:    info_p->result = jerry_acquire_value (candidate);
        -:10457:  }
        -:10458:
    #####:10459:  jerry_release_value (has_property);
        -:10460:
        -:10461:  /* If the object was not found continue the search. */
    #####:10462:  return !object_found;
        -:10463:} /* find_my_object */
        -:10464:
        -:10465:int
    #####:10466:main (void)
        -:10467:{
    #####:10468:  int return_value = 0;
        -:10469:
        -:10470:  /* Initialize JerryScript engine. */
    #####:10471:  jerry_init (JERRY_INIT_EMPTY);
        -:10472:
        -:10473:  /* Create the test object. */
        -:10474:  {
    #####:10475:    jerry_value_t test_object = jerry_create_object ();
        -:10476:
        -:10477:    {
    #####:10478:      jerry_value_t test_property = jerry_create_string ((const jerry_char_t *) "DemoProp");
    #####:10479:      jerry_value_t test_value = jerry_create_number (3);
    #####:10480:      jerry_value_t set_result = jerry_set_property (test_object, test_property, test_value);
        -:10481:      /* The `set_result` should be checked if it is an error or not. */
    #####:10482:      jerry_release_value (set_result);
    #####:10483:      jerry_release_value (test_value);
    #####:10484:      jerry_release_value (test_property);
        -:10485:    }
        -:10486:
        -:10487:    {
        -:10488:      /* Register the test object into the global object. */
    #####:10489:      jerry_value_t global_object = jerry_get_global_object ();
    #####:10490:      jerry_value_t demo_property = jerry_create_string ((const jerry_char_t *) "DemoObject");
    #####:10491:      jerry_value_t set_result = jerry_set_property (global_object, demo_property, test_object);
        -:10492:      /* The `set_result` should be checked if it is an error or not. */
    #####:10493:      jerry_release_value (set_result);
    #####:10494:      jerry_release_value (demo_property);
    #####:10495:      jerry_release_value (global_object);
        -:10496:    }
        -:10497:
    #####:10498:    jerry_release_value (test_object);
        -:10499:  }
        -:10500:
        -:10501:  /* Look up the test object base on a property name. */
    #####:10502:  find_my_object_info_t search_info =
        -:10503:  {
    #####:10504:    .property_name = jerry_create_string ((const jerry_char_t *) "DemoProp")
        -:10505:  };
        -:10506:
    #####:10507:  if (jerry_objects_foreach (find_my_object, &search_info))
        -:10508:  {
        -:10509:    /* The search was successful. Do something useful with search_info.result. */
        -:10510:    // ...
    #####:10511:    printf ("Object found\n");
        -:10512:
        -:10513:    /* Release the found object after we're done using it. */
    #####:10514:    jerry_release_value (search_info.result);
        -:10515:  }
        -:10516:  else
        -:10517:  {
        -:10518:    /* The search has failed. */
    #####:10519:    printf ("Object not found\n");
        -:10520:
    #####:10521:    return_value = 1;
        -:10522:  }
        -:10523:
    #####:10524:  jerry_release_value (search_info.property_name);
        -:10525:
        -:10526:  /* Engine cleanup */
    #####:10527:  jerry_cleanup ();
        -:10528:  return return_value;
        -:10529:}
        -:10530:```
        -:10531:
        -:10532:**See also**
        -:10533:
        -:10534:- [jerry_objects_foreach_t](#jerry_objects_foreach_t)
        -:10535:
        -:10536:## jerry_objects_foreach_by_native_info
        -:10537:
        -:10538:**Summary**
        -:10539:
        -:10540:Iterate over all objects in the engine matching a certain native data type.
        -:10541:
        -:10542:The "iterator" `foreach_p` method should return `true` value to continue the search.
        -:10543:If the method returns `false` the search for the object is finished.
        -:10544:
        -:10545:*Note*: Values obtained in `foreach_p` must be retained using [jerry_acquire_value](#jerry_acquire_value).
        -:10546:
        -:10547:**Prototype**
        -:10548:
        -:10549:```c
        -:10550:bool
        -:10551:jerry_objects_foreach_by_native_info (const jerry_object_native_info_t *native_info_p,
        -:10552:                                      jerry_objects_foreach_by_native_info_t foreach_p,
        -:10553:                                      void *user_data_p);
        -:10554:```
        -:10555:
        -:10556:- `native_info_p` - native pointer's type information.
        -:10557:- `foreach_p` - function that will be invoked for each object.
        -:10558:- return value
        -:10559:  - `true`, if the search function terminated the traversal by returning `false`
        -:10560:  - `false`, if the end of the list of objects was reached
        -:10561:
        -:10562:*New in version 2.0*.
        -:10563:
        -:10564:**Example**
        -:10565:
        -:10566:[doctest]: # (name="02.API-REFERENCE-objects-foreach-nativeptr.c")
        -:10567:
        -:10568:```c
        -:10569:#include <stdio.h>
        -:10570:#include <stdlib.h>
        -:10571:#include "jerryscript.h"
        -:10572:
        -:10573:typedef struct
        -:10574:{
        -:10575:  int foo;
        -:10576:  bool bar;
        -:10577:} native_obj_t;
        -:10578:
        -:10579:typedef struct
        -:10580:{
        -:10581:  jerry_value_t found_object;
        -:10582:  native_obj_t *found_native_data_p;
        -:10583:
        -:10584:  int match_foo_value;
        -:10585:} find_object_data_t;
        -:10586:
    #####:10587:static void native_freecb (void *native_p,
        -:10588:                           jerry_object_native_info_t *info_p)
        -:10589:{
        -:10590:  (void) info_p;
        -:10591:
        -:10592:  /* `native_p` was allocated via malloc. */
    #####:10593:  free (native_p);
    #####:10594:} /* native_freecb */
        -:10595:
        -:10596:/*
        -:10597: * NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -:10598: * C type `native_obj_t *`.
        -:10599: */
        -:10600:static const jerry_object_native_info_t native_obj_type_info =
        -:10601:{
        -:10602:  .free_cb = native_freecb
        -:10603:};
        -:10604:
        -:10605:/*
        -:10606: * Function creating JS object that is "backed" by a `native_obj_t`.
        -:10607: */
        -:10608:static void
    #####:10609:add_object_with_nativeptr (int foo_value)
        -:10610:{
        -:10611:  // construct object and native_set value:
    #####:10612:  jerry_value_t test_object = jerry_create_object ();
    #####:10613:  native_obj_t *native_obj_p = malloc (sizeof (*native_obj_p));
    #####:10614:  native_obj_p->foo = foo_value;
    #####:10615:  native_obj_p->bar = true;
        -:10616:
    #####:10617:  jerry_set_object_native_pointer (test_object, native_obj_p, &native_obj_type_info);
        -:10618:
        -:10619:  /* Register the test object into the global object. */
    #####:10620:  jerry_value_t global_object = jerry_get_global_object ();
    #####:10621:  jerry_value_t demo_property = jerry_create_string ((const jerry_char_t *) "DemoObject");
    #####:10622:  jerry_value_t set_result = jerry_set_property (global_object, demo_property, test_object);
        -:10623:  /* The `set_result` should be checked if it is an error or not. */
    #####:10624:  jerry_release_value (set_result);
    #####:10625:  jerry_release_value (demo_property);
    #####:10626:  jerry_release_value (global_object);
        -:10627:
    #####:10628:  jerry_release_value (test_object);
    #####:10629:} /* create_object_with_nativeptr */
        -:10630:
        -:10631:/*
        -:10632: * Example native method that searches for a JavaScript object
        -:10633: * with a `native_obj_type_info` has the correct value.
        -:10634: */
        -:10635:static bool
    #####:10636:find_object (const jerry_value_t candidate, void *data_p, void *user_data_p)
        -:10637:{
    #####:10638:  find_object_data_t *find_data_p = (find_object_data_t *) user_data_p;
    #####:10639:  native_obj_t *native_obj_p = (native_obj_t *) data_p;
        -:10640:
    #####:10641:  if (find_data_p->match_foo_value == native_obj_p->foo)
        -:10642:  {
        -:10643:    /* If the object was found, acquire it and store it in the user data. */
    #####:10644:    find_data_p->found_object = jerry_acquire_value (candidate);
    #####:10645:    find_data_p->found_native_data_p = native_obj_p;
        -:10646:
        -:10647:    /* Stop traversing over the objects. */
    #####:10648:    return false;
        -:10649:  }
        -:10650:
        -:10651:  /* Indicate that the object was not found, so traversal must continue. */
        -:10652:  return true;
        -:10653:} /* find_object */
        -:10654:
        -:10655:int
    #####:10656:main (void)
        -:10657:{
    #####:10658:  jerry_init (JERRY_INIT_EMPTY);
        -:10659:
    #####:10660:  add_object_with_nativeptr (4);
    #####:10661:  add_object_with_nativeptr (3);
    #####:10662:  add_object_with_nativeptr (2);
        -:10663:
    #####:10664:  find_object_data_t find_data =
        -:10665:  {
        -:10666:    .match_foo_value = 3,
        -:10667:  };
        -:10668:
    #####:10669:  if (jerry_objects_foreach_by_native_info (&native_obj_type_info, find_object, &find_data))
        -:10670:  {
        -:10671:    /* The object was found and is now stored in `find_data.found_object`. After using it, it must be released. */
    #####:10672:    printf ("Object found, native foo value: %d\n", find_data.found_native_data_p->foo);
        -:10673:
    #####:10674:    jerry_release_value (find_data.found_object);
        -:10675:  }
        -:10676:  else
        -:10677:  {
        -:10678:    printf ("Object not found\n");
        -:10679:  }
        -:10680:
    #####:10681:  jerry_cleanup ();
        -:10682:
        -:10683:  return 0;
        -:10684:}
        -:10685:```
        -:10686:
        -:10687:**See also**
        -:10688:
        -:10689:- [jerry_create_object](#jerry_create_object)
        -:10690:- [jerry_set_object_native_pointer](#jerry_set_object_native_pointer)
        -:10691:- [jerry_get_object_native_pointer](#jerry_get_object_native_pointer)
        -:10692:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10693:- [jerry_objects_foreach](#jerry_objects_foreach)
        -:10694:
        -:10695:
        -:10696:# Input validator functions
        -:10697:
        -:10698:## jerry_is_valid_utf8_string
        -:10699:
        -:10700:**Summary**
        -:10701:
        -:10702:Check if a given character buffer is a valid UTF-8 string.
        -:10703:
        -:10704:**Notes**: Calling this method is safe in any time. It can be called
        -:10705:even before engine initialization.
        -:10706:
        -:10707:**Prototype**
        -:10708:
        -:10709:```c
        -:10710:bool
        -:10711:jerry_is_valid_utf8_string (const jerry_char_t *utf8_buf_p, /**< UTF-8 string */
        -:10712:                            jerry_size_t buf_size) /**< string size */
        -:10713:```
        -:10714:
        -:10715:- `utf8_buf_p` - UTF-8 input string buffer.
        -:10716:- `buf_size` - input string buffer size in bytes.
        -:10717:- return value
        -:10718:  - true, if the provided string was a valid UTF-8 string.
        -:10719:  - false, if the string is not valid as an UTF-8 string.
        -:10720:
        -:10721:*New in version 2.0*.
        -:10722:
        -:10723:**Example**
        -:10724:
        -:10725:[doctest]: # ()
        -:10726:
        -:10727:```c
        -:10728:#include "jerryscript.h"
        -:10729:
        -:10730:int
    #####:10731:main (void)
        -:10732:{
    #####:10733:  const jerry_char_t script[] = "print ('Hello, World!');";
    #####:10734:  const jerry_size_t script_size = sizeof (script) - 1;
        -:10735:
    #####:10736:  if (jerry_is_valid_utf8_string (script, script_size))
        -:10737:  {
    #####:10738:    jerry_run_simple (script, script_size, JERRY_INIT_EMPTY);
        -:10739:  }
        -:10740:
        -:10741:  return 0;
        -:10742:}
        -:10743:```
        -:10744:
        -:10745:**See also**
        -:10746:
        -:10747:- [jerry_run_simple](#jerry_run_simple)
        -:10748:- [jerry_create_string_from_utf8](#jerry_create_string_from_utf8)
        -:10749:- [jerry_create_string_sz_from_utf8](#jerry_create_string_sz_from_utf8)
        -:10750:- [jerry_get_utf8_string_size](#jerry_get_utf8_string_size)
        -:10751:- [jerry_get_utf8_string_length](#jerry_get_utf8_string_length)
        -:10752:- [jerry_string_to_utf8_char_buffer](#jerry_string_to_utf8_char_buffer)
        -:10753:- [jerry_substring_to_utf8_char_buffer](#jerry_substring_to_utf8_char_buffer)
        -:10754:
        -:10755:## jerry_is_valid_cesu8_string
        -:10756:
        -:10757:**Summary**
        -:10758:
        -:10759:Check if a given character buffer is a valid CESU-8 string.
        -:10760:
        -:10761:**Notes**: Calling this method is safe in any time. It can be called
        -:10762:even before engine initialization.
        -:10763:
        -:10764:**Prototype**
        -:10765:
        -:10766:```c
        -:10767:bool
        -:10768:jerry_is_valid_cesu8_string (const jerry_char_t *cesu8_buf_p, /**< CESU-8 string */
        -:10769:                             jerry_size_t buf_size) /**< string size */
        -:10770:```
        -:10771:
        -:10772:- `cesu8_buf_p` - CESU-8 input string buffer.
        -:10773:- `buf_size` - input string buffer size in bytes.
        -:10774:- return value
        -:10775:  - true, if the provided string was a valid CESU-8 string.
        -:10776:  - false, if the string is not valid as a CESU-8 string.
        -:10777:
        -:10778:*New in version 2.0*.
        -:10779:
        -:10780:**Example**
        -:10781:
        -:10782:[doctest]: # ()
        -:10783:
        -:10784:```c
        -:10785:#include "jerryscript.h"
        -:10786:
        -:10787:int
    #####:10788:main (void)
        -:10789:{
    #####:10790:  jerry_init (JERRY_INIT_EMPTY);
        -:10791:
    #####:10792:  const jerry_char_t script[] = "Hello, World!";
    #####:10793:  const jerry_size_t script_size = sizeof (script) - 1;
        -:10794:
    #####:10795:  if (jerry_is_valid_cesu8_string (script, script_size))
        -:10796:  {
    #####:10797:    jerry_value_t string_value = jerry_create_string_sz (script,
        -:10798:                                                         script_size);
        -:10799:
        -:10800:    // usage of string_value
        -:10801:
    #####:10802:    jerry_release_value (string_value);
        -:10803:  }
        -:10804:
    #####:10805:  jerry_cleanup ();
        -:10806:  return 0;
        -:10807:}
        -:10808:```
        -:10809:
        -:10810:**See also**
        -:10811:
        -:10812:- [jerry_create_string](#jerry_create_string)
        -:10813:- [jerry_create_string_sz](#jerry_create_string_sz)
        -:10814:- [jerry_get_string_size](#jerry_get_string_size)
        -:10815:- [jerry_get_string_length](#jerry_get_string_length)
        -:10816:- [jerry_string_to_char_buffer](#jerry_string_to_char_buffer)
        -:10817:- [jerry_substring_to_char_buffer](#jerry_substring_to_char_buffer)
        -:10818:
        -:10819:
        -:10820:# Dynamic memory management functions
        -:10821:
        -:10822:## jerry_heap_alloc
        -:10823:
        -:10824:**Summary**
        -:10825:
        -:10826:Allocate memory on the engine's heap.
        -:10827:
        -:10828:*Note*: This function may take away memory from the executed JavaScript code.
        -:10829:If any other dynamic memory allocation API is available (e.g., libc malloc), it
        -:10830:should be used instead.
        -:10831:
        -:10832:**Prototype**
        -:10833:
        -:10834:```c
        -:10835:void *jerry_heap_alloc (size_t size);
        -:10836:```
        -:10837:
        -:10838:- `size`: size of the memory block.
        -:10839:- return value: non-NULL pointer, if the memory is successfully allocated,
        -:10840:                NULL otherwise.
        -:10841:
        -:10842:*New in version 2.0*.
        -:10843:
        -:10844:**See also**
        -:10845:
        -:10846:- [jerry_heap_free](#jerry_heap_free)
        -:10847:
        -:10848:## jerry_heap_free
        -:10849:
        -:10850:**Summary**
        -:10851:
        -:10852:Free memory allocated on the engine's heap.
        -:10853:
        -:10854:**Prototype**
        -:10855:
        -:10856:```c
        -:10857:void jerry_heap_free (void *mem_p, size_t size);
        -:10858:```
        -:10859:
        -:10860:- `mem_p`: value returned by `jerry_heap_alloc`.
        -:10861:- `size`: same size as passed to `jerry_heap_alloc`.
        -:10862:
        -:10863:*New in version 2.0*.
        -:10864:
        -:10865:**See also**
        -:10866:
        -:10867:- [jerry_heap_alloc](#jerry_heap_alloc)
        -:10868:
        -:10869:
        -:10870:# External context functions
        -:10871:
        -:10872:## jerry_create_context
        -:10873:
        -:10874:**Summary**
        -:10875:
        -:10876:Create an external JerryScript engine context.
        -:10877:
        -:10878:**Prototype**
        -:10879:
        -:10880:```c
        -:10881:jerry_context_t *
        -:10882:jerry_create_context (uint32_t heap_size,
        -:10883:                      jerry_context_alloc_t alloc,
        -:10884:                      void *cb_data_p);
        -:10885:```
        -:10886:
        -:10887:- `heap_size` - requested heap size of the JerryScript context
        -:10888:- `alloc` - function for allocation
        -:10889:- `cb_data_p` - user data
        -:10890:- return value
        -:10891:  - pointer to the newly created JerryScript context if success
        -:10892:  - NULL otherwise.
        -:10893:
        -:10894:*New in version 2.0*.
        -:10895:
        -:10896:**Example**
        -:10897:
        -:10898:[doctest]: # (test="compile", name="02.API-REFERENCE-create-context.c")
        -:10899:
        -:10900:```c
        -:10901:#include <stdlib.h>
        -:10902:#include <pthread.h>
        -:10903:
        -:10904:#include "jerryscript.h"
        -:10905:#include "jerryscript-port.h"
        -:10906:
        -:10907:/* A different Thread Local Storage variable for each jerry context. */
        -:10908:__thread jerry_context_t *tls_context;
        -:10909:
        -:10910:jerry_context_t *
    #####:10911:jerry_port_get_current_context (void)
        -:10912:{
        -:10913:  /* Returns the context assigned to the thread. */
    #####:10914:  return tls_context;
        -:10915:}
        -:10916:
        -:10917:/* Allocate JerryScript heap for each thread. */
        -:10918:static void *
    #####:10919:context_alloc_fn (size_t size, void *cb_data)
        -:10920:{
        -:10921:  (void) cb_data;
    #####:10922:  return malloc (size);
        -:10923:}
        -:10924:
        -:10925:static void *
    #####:10926:thread_function (void *param)
        -:10927:{
    #####:10928:  tls_context = jerry_create_context (512 * 1024,
        -:10929:                                      context_alloc_fn,
        -:10930:                                      NULL);
    #####:10931:  jerry_init (JERRY_INIT_EMPTY);
        -:10932:  /* Run JerryScript in the context (e.g.: jerry_parse & jerry_run) */
    #####:10933:  jerry_cleanup ();
        -:10934:
        -:10935:  /* Deallocate JerryScript context */
    #####:10936:  free (tls_context);
        -:10937:
    #####:10938:  return NULL;
        -:10939:}
        -:10940:
        -:10941:#define NUM_OF_THREADS 8
        -:10942:
        -:10943:int
    #####:10944:main (void)
        -:10945:{
        -:10946:  pthread_t threads[NUM_OF_THREADS];
        -:10947:
        -:10948:  /* Create the threads. */
    #####:10949:  for (int i = 0; i < NUM_OF_THREADS; i++)
        -:10950:  {
    #####:10951:    pthread_create (&threads[i], NULL, thread_function, (void *) (intptr_t) i);
        -:10952:  }
        -:10953:
        -:10954:  /* Wait for the threads to complete, and release their resources. */
    #####:10955:  for (int i = 0; i < NUM_OF_THREADS; i++)
        -:10956:  {
    #####:10957:    pthread_join (threads[i], NULL);
        -:10958:  }
        -:10959:
        -:10960:  return 0;
        -:10961:}
        -:10962:```
        -:10963:
        -:10964:**See also**
        -:10965:
        -:10966:- [jerry_context_t](#jerry_context_t)
        -:10967:- [jerry_context_alloc_t](#jerry_context_alloc_t)
        -:10968:- [jerry_port_get_current_context](05.PORT-API.md#jerry_port_get_current_context)
        -:10969:
        -:10970:
        -:10971:# Snapshot functions
        -:10972:
        -:10973:## jerry_generate_snapshot
        -:10974:
        -:10975:**Summary**
        -:10976:
        -:10977:Generate snapshot from the specified source code.
        -:10978:
        -:10979:*Notes*:
        -:10980:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:10981:  is no longer needed.
        -:10982:- This API depends on a build option (`JERRY_SNAPSHOT_SAVE`) and can be checked in runtime with
        -:10983:  the `JERRY_FEATURE_SNAPSHOT_SAVE` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:10984:  If the feature is not enabled the function will return an error.
        -:10985:
        -:10986:**Prototype**
        -:10987:
        -:10988:```c
        -:10989:jerry_value_t
        -:10990:jerry_generate_snapshot (jerry_value_t compiled_code,
        -:10991:                         uint32_t generate_snapshot_opts,
        -:10992:                         uint32_t *buffer_p,
        -:10993:                         size_t buffer_size);
        -:10994:```
        -:10995:
        -:10996:- `compiled_code` - compiled script or function (see: [jerry_parse](#jerry_parse)).
        -:10997:- `generate_snapshot_opts` - any combination of [jerry_generate_snapshot_opts_t](#jerry_generate_snapshot_opts_t) flags.
        -:10998:- `buffer_p` - output buffer (aligned to 4 bytes) to save snapshot to.
        -:10999:- `buffer_size` - the output buffer's size in bytes.
        -:11000:- return value
        -:11001:  - the size of the generated snapshot in bytes as number value, if it was generated succesfully (i.e. there
        -:11002:    are no syntax errors in source code, buffer size is sufficient, and snapshot support is enabled in
        -:11003:    current configuration through JERRY_SNAPSHOT_SAVE)
        -:11004:  - thrown error, otherwise.
        -:11005:
        -:11006:*New in version 2.0*.
        -:11007:
        -:11008:*Changed in version [[NEXT_RELEASE]]*: The `source_p`, `source_size`, `resource_name_p`,
        -:11009:                                       and `resource_name_length` arguments are replaced by `compiled_code`
        -:11010:                                       which should contain a compiled ECMAScript script / function.
        -:11011:                                       The `jerry_generate_function_snapshot` is now removed and can be reproduced
        -:11012:                                       by calling `jerry_parse` with function arguments and using this method
        -:11013:                                       (see [jerry_exec_snapshot](#jerry_exec_snapshot)).
        -:11014:**Example**
        -:11015:
        -:11016:[doctest]: # ()
        -:11017:
        -:11018:```c
        -:11019:#include "jerryscript.h"
        -:11020:
        -:11021:int
    #####:11022:main (void)
        -:11023:{
    #####:11024:  jerry_init (JERRY_INIT_EMPTY);
        -:11025:
        -:11026:  static uint32_t global_mode_snapshot_buffer[256];
    #####:11027:  const jerry_char_t script_to_snapshot[] = "(function () { return 'string from snapshot'; }) ();";
        -:11028:
    #####:11029:  jerry_value_t parse_result = jerry_parse (script_to_snapshot,
        -:11030:                                            sizeof (script_to_snapshot) - 1,
        -:11031:                                            NULL);
        -:11032:
    #####:11033:  size_t buffer_size = sizeof (global_mode_snapshot_buffer) / sizeof (uint32_t);
    #####:11034:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:11035:                                                           0,
        -:11036:                                                           global_mode_snapshot_buffer,
        -:11037:                                                           buffer_size);
    #####:11038:  jerry_release_value (parse_result);
        -:11039:
    #####:11040:  if (!jerry_value_is_error (generate_result))
        -:11041:  {
    #####:11042:    size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
        -:11043:  }
        -:11044:
    #####:11045:  jerry_release_value (generate_result);
        -:11046:
    #####:11047:  jerry_cleanup ();
        -:11048:  return 0;
        -:11049:}
        -:11050:```
        -:11051:
        -:11052:**See also**
        -:11053:
        -:11054:- [jerry_parse](#jerry_parse)
        -:11055:- [jerry_parse_value](#jerry_parse_value)
        -:11056:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:11057:- [jerry_parse_options_t](#jerry_parse_options_t)
        -:11058:
        -:11059:
        -:11060:## jerry_exec_snapshot
        -:11061:
        -:11062:**Summary**
        -:11063:
        -:11064:Execute/load snapshot from the specified buffer.
        -:11065:
        -:11066:*Notes*:
        -:11067:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:11068:  is no longer needed.
        -:11069:- This API depends on a build option (`JERRY_SNAPSHOT_EXEC`) and can be checked in runtime with
        -:11070:  the `JERRY_FEATURE_SNAPSHOT_EXEC` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11071:  If the feature is not enabled the function will return an error.
        -:11072:
        -:11073:**Prototype**
        -:11074:
        -:11075:```c
        -:11076:jerry_value_t
        -:11077:jerry_exec_snapshot (const uint32_t *snapshot_p,
        -:11078:                     size_t snapshot_size,
        -:11079:                     size_t func_index,
        -:11080:                     uint32_t exec_snapshot_opts,
        -:11081:                     const jerry_exec_snapshot_option_values_t *options_values_p);
        -:11082:```
        -:11083:
        -:11084:- `snapshot_p` - pointer to snapshot.
        -:11085:- `snapshot_size` - size of snapshot in bytes.
        -:11086:- `func_index` - index of executed function.
        -:11087:- `exec_snapshot_opts` - any combination of [jerry_exec_snapshot_opts_t](#jerry_exec_snapshot_opts_t) flags.
        -:11088:- `options_values_p` - additional loadig options, can be NULL if not used. The fields are described in
        -:11089:                       [jerry_exec_snapshot_option_values_t](#jerry_exec_snapshot_option_values_t).
        -:11090:- return value
        -:11091:  - result of bytecode, if run was successful.
        -:11092:  - thrown error, otherwise (an error is reported if the snapshot execution feature is not enabled).
        -:11093:
        -:11094:*Changed in version 2.0*: Added `func_index` and `exec_snapshot_opts` arguments. Removed the `copy_bytecode` last argument.
        -:11095:
        -:11096:*Changed in version [[NEXT_RELEASE]]*: Added `options_p` argument.
        -:11097:
        -:11098:**Example 1**
        -:11099:
        -:11100:[doctest]: # ()
        -:11101:
        -:11102:```c
        -:11103:#include "jerryscript.h"
        -:11104:
        -:11105:int
    #####:11106:main (void)
        -:11107:{
        -:11108:  static uint32_t snapshot_buffer[256];
        -:11109:
        -:11110:  /* 1st example: global mode snapshot. */
    #####:11111:  jerry_init (JERRY_INIT_EMPTY);
        -:11112:
    #####:11113:  const jerry_char_t script_to_snapshot[] = "(function () { return 'string from snapshot'; }) ();";
        -:11114:
    #####:11115:  jerry_value_t parse_result = jerry_parse (script_to_snapshot,
        -:11116:                                            sizeof (script_to_snapshot) - 1,
        -:11117:                                            NULL);
        -:11118:
    #####:11119:  size_t buffer_size = sizeof (snapshot_buffer) / sizeof (uint32_t);
    #####:11120:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:11121:                                                           0,
        -:11122:                                                           snapshot_buffer,
        -:11123:                                                           buffer_size);
    #####:11124:  jerry_release_value (parse_result);
        -:11125:
        -:11126:  /* 'generate_result' variable should be checked whether it contains an error. */
        -:11127:
    #####:11128:  size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:11129:  jerry_release_value (generate_result);
        -:11130:
    #####:11131:  jerry_cleanup ();
    #####:11132:  jerry_init (JERRY_INIT_EMPTY);
        -:11133:
    #####:11134:  jerry_value_t res = jerry_exec_snapshot (snapshot_buffer,
        -:11135:                                           snapshot_size,
        -:11136:                                           0,
        -:11137:                                           0,
        -:11138:                                           NULL);
        -:11139:
        -:11140:  /* 'res' now contains 'string from snapshot' */
    #####:11141:  jerry_release_value (res);
        -:11142:
    #####:11143:  jerry_cleanup ();
        -:11144:  return 0;
        -:11145:}
        -:11146:```
        -:11147:
        -:11148:**Example 2**
        -:11149:
        -:11150:[doctest]: # ()
        -:11151:
        -:11152:```c
        -:11153:#include "jerryscript.h"
        -:11154:
        -:11155:int
    #####:11156:main (void)
        -:11157:{
        -:11158:  static uint32_t snapshot_buffer[256];
        -:11159:
        -:11160:  /* 2nd example: function snapshot. */
    #####:11161:  jerry_init (JERRY_INIT_EMPTY);
        -:11162:
    #####:11163:  const jerry_char_t function_to_snapshot[] = "return a + b;";
        -:11164:
        -:11165:  jerry_parse_options_t parse_options;
    #####:11166:  parse_options.options = JERRY_PARSE_HAS_ARGUMENT_LIST;
    #####:11167:  parse_options.argument_list = jerry_create_string ((const jerry_char_t *) "a, b");
        -:11168:
    #####:11169:  jerry_value_t parse_result = jerry_parse (function_to_snapshot,
        -:11170:                                            sizeof (function_to_snapshot) - 1,
        -:11171:                                            &parse_options);
        -:11172:
    #####:11173:  size_t buffer_size = sizeof (snapshot_buffer) / sizeof (uint32_t);
    #####:11174:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:11175:                                                           0,
        -:11176:                                                           snapshot_buffer,
        -:11177:                                                           buffer_size);
    #####:11178:  jerry_release_value (parse_result);
    #####:11179:  jerry_release_value (parse_options.argument_list);
        -:11180:
        -:11181:  /* 'generate_result' variable should be checked whether it contains an error. */
        -:11182:
    #####:11183:  size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:11184:  jerry_release_value (generate_result);
        -:11185:
    #####:11186:  jerry_cleanup ();
    #####:11187:  jerry_init (JERRY_INIT_EMPTY);
        -:11188:
    #####:11189:  jerry_value_t func = jerry_exec_snapshot (snapshot_buffer,
        -:11190:                                            snapshot_size,
        -:11191:                                            0,
        -:11192:                                            JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION,
        -:11193:                                            NULL);
        -:11194:  /* 'func' can be used now as a function object. */
        -:11195:
    #####:11196:  jerry_value_t this_value = jerry_create_undefined ();
        -:11197:  jerry_value_t args[2];
    #####:11198:  args[0] = jerry_create_number (1.0);
    #####:11199:  args[1] = jerry_create_number (2.0);
        -:11200:
    #####:11201:  jerry_value_t res = jerry_call_function (func, this_value, args, 2);
        -:11202:
        -:11203:  /* 'res' now contains the value 3 as a jerry_value_t. */
    #####:11204:  jerry_release_value (res);
    #####:11205:  jerry_release_value (args[0]);
    #####:11206:  jerry_release_value (args[1]);
    #####:11207:  jerry_release_value (this_value);
    #####:11208:  jerry_release_value (func);
        -:11209:
    #####:11210:  jerry_cleanup ();
        -:11211:  return 0;
        -:11212:}
        -:11213:```
        -:11214:
        -:11215:**See also**
        -:11216:
        -:11217:- [jerry_init](#jerry_init)
        -:11218:- [jerry_cleanup](#jerry_cleanup)
        -:11219:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:11220:
        -:11221:
        -:11222:## jerry_get_literals_from_snapshot
        -:11223:
        -:11224:**Summary**
        -:11225:
        -:11226:Collect the used literals from the given snapshot and save them into a buffer in list or C format.
        -:11227:None of these literals are magic strings. In C format only valid identifiers are collected.
        -:11228:
        -:11229:*Note*:
        -:11230:- This API depends on a build option (`JERRY_SNAPSHOT_SAVE`) and can be checked in runtime with
        -:11231:  the `JERRY_FEATURE_SNAPSHOT_SAVE` feature enum value, see [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11232:  If the feature is not enabled the function will return zero.
        -:11233:
        -:11234:**Prototype**
        -:11235:
        -:11236:```c
        -:11237:size_t
        -:11238:jerry_get_literals_from_snapshot (const uint32_t *snapshot_p,
        -:11239:                                  size_t snapshot_size,
        -:11240:                                  jerry_char_t *lit_buf_p,
        -:11241:                                  size_t lit_buf_size,
        -:11242:                                  bool is_c_format);
        -:11243:```
        -:11244:
        -:11245:- `snapshot_p` - input snapshot buffer.
        -:11246:- `snapshot_size` - size of snapshot in bytes.
        -:11247:- `lit_buf_p` - buffer to save literals to.
        -:11248:- `lit_buf_size` - the buffer's size.
        -:11249:- `is_c_format` - the output format would be C-style (true) or a simple list (false).
        -:11250:- return value
        -:11251:  - the size of the literal-list, if it was generated succesfully (i.e. the list of literals isn't empty,
        -:11252:    and literal-save support is enabled in current configuration through JERRY_SNAPSHOT_SAVE)
        -:11253:  - 0 otherwise.
        -:11254:
        -:11255:*New in version 2.0*.
        -:11256:
        -:11257:**Example**
        -:11258:
        -:11259:[doctest]: # (test="link")
        -:11260:
        -:11261:```c
        -:11262:#include <stdio.h>
        -:11263:#include "jerryscript.h"
        -:11264:
        -:11265:int
    #####:11266:main (void)
        -:11267:{
    #####:11268:  jerry_init (JERRY_INIT_EMPTY);
        -:11269:
        -:11270:  static jerry_char_t literal_buffer[256];
        -:11271:  static uint32_t snapshot_buffer[256];
    #####:11272:  const jerry_char_t script_for_literal_save[] = "var obj = { a:'aa', bb:'Bb' }";
        -:11273:
    #####:11274:  jerry_value_t parse_result = jerry_parse (script_for_literal_save,
        -:11275:                                            sizeof (script_for_literal_save) - 1,
        -:11276:                                            NULL);
        -:11277:
    #####:11278:  size_t buffer_size = sizeof (snapshot_buffer) / sizeof (uint32_t);
    #####:11279:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:11280:                                                           0,
        -:11281:                                                           snapshot_buffer,
        -:11282:                                                           buffer_size);
    #####:11283:  jerry_release_value (parse_result);
        -:11284:
    #####:11285:  size_t snapshot_size = (size_t) jerry_get_number_value (generate_result);
    #####:11286:  jerry_release_value (generate_result);
        -:11287:
    #####:11288:  const size_t literal_size = jerry_get_literals_from_snapshot (snapshot_buffer,
        -:11289:                                                                snapshot_size,
        -:11290:                                                                literal_buffer,
        -:11291:                                                                256,
        -:11292:                                                                true);
        -:11293:
    #####:11294:  if (literal_size != 0)
        -:11295:  {
    #####:11296:    FILE *literal_file_p = fopen ("literals.h", "wb");
    #####:11297:    fwrite (literal_buffer, sizeof (uint8_t), literal_size, literal_file_p);
    #####:11298:    fclose (literal_file_p);
        -:11299:  }
        -:11300:
    #####:11301:  jerry_cleanup ();
        -:11302:  return 0;
        -:11303:}
        -:11304:```
        -:11305:
        -:11306:**See also**
        -:11307:
        -:11308:- [jerry_init](#jerry_init)
        -:11309:- [jerry_cleanup](#jerry_cleanup)
        -:11310:- [jerry_register_magic_strings](#jerry_register_magic_strings)
        -:11311:
        -:11312:
        -:11313:# Backtrace functions
        -:11314:
        -:11315:## jerry_get_backtrace
        -:11316:
        -:11317:**Summary**
        -:11318:
        -:11319:Get backtrace. The backtrace is an array of strings where
        -:11320:each string contains the position of the corresponding frame.
        -:11321:The array length is zero if the backtrace is not available.
        -:11322:
        -:11323:This function is typically called from native callbacks.
        -:11324:
        -:11325:*Notes*:
        -:11326:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:11327:is no longer needed.
        -:11328:- This feature depends on build option (`JERRY_LINE_INFO`) and can be checked
        -:11329:  in runtime with the `JERRY_FEATURE_LINE_INFO` feature enum value,
        -:11330:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11331:
        -:11332:**Prototype**
        -:11333:
        -:11334:```c
        -:11335:jerry_value_t
        -:11336:jerry_get_backtrace (uint32_t max_depth);
        -:11337:```
        -:11338:
        -:11339:- `max_depth` - backtrace collection stops after reaching this value, 0 = unlimited
        -:11340:- return value
        -:11341:  - a newly constructed JS array
        -:11342:
        -:11343:*New in version 2.0*.
        -:11344:
        -:11345:**Example**
        -:11346:
        -:11347:[doctest]: # (name="02.API-REFERENCE-jsbacktrace.c")
        -:11348:
        -:11349:```c
        -:11350:#include <stdio.h>
        -:11351:#include <string.h>
        -:11352:#include "jerryscript.h"
        -:11353:
        -:11354:static jerry_value_t
    #####:11355:backtrace_handler (const jerry_call_info_t *call_info_p,
        -:11356:                   const jerry_value_t args_p[],
        -:11357:                   const jerry_length_t args_count)
        -:11358:{
    #####:11359:  if (!jerry_is_feature_enabled (JERRY_FEATURE_LINE_INFO))
        -:11360:  {
    #####:11361:    printf ("Line info disabled, no backtrace will be printed\n");
    #####:11362:    return jerry_create_undefined ();
        -:11363:  }
        -:11364:
        -:11365:  /* If the line info feature is disabled an empty array will be returned. */
    #####:11366:  jerry_value_t backtrace_array = jerry_get_backtrace (5);
    #####:11367:  uint32_t array_length = jerry_get_array_length (backtrace_array);
        -:11368:
    #####:11369:  for (uint32_t idx = 0; idx < array_length; idx++)
        -:11370:  {
    #####:11371:    jerry_value_t property = jerry_get_property_by_index (backtrace_array, idx);
        -:11372:
        -:11373:    jerry_char_t string_buffer[64];
    #####:11374:    jerry_size_t copied_bytes = jerry_substring_to_char_buffer (property,
        -:11375:                                                                0,
        -:11376:                                                                63,
        -:11377:                                                                string_buffer,
        -:11378:                                                                63);
    #####:11379:    string_buffer[copied_bytes] = '\0';
    #####:11380:    printf(" %d: %s\n", idx, string_buffer);
        -:11381:
    #####:11382:    jerry_release_value (property);
        -:11383:  }
        -:11384:
    #####:11385:  jerry_release_value (backtrace_array);
        -:11386:
    #####:11387:  return jerry_create_undefined ();
        -:11388:} /* backtrace_handler */
        -:11389:
        -:11390:int
    #####:11391:main (void)
        -:11392:{
    #####:11393:  jerry_init (JERRY_INIT_EMPTY);
        -:11394:
    #####:11395:  jerry_value_t global = jerry_get_global_object ();
        -:11396:
        -:11397:  /* Register the "capture_backtrace" method. */
        -:11398:  {
    #####:11399:    jerry_value_t func = jerry_create_external_function (backtrace_handler);
    #####:11400:    jerry_value_t name = jerry_create_string ((const jerry_char_t *) "backtrace");
    #####:11401:    jerry_value_t result = jerry_set_property (global, name, func);
    #####:11402:    jerry_release_value (result);
    #####:11403:    jerry_release_value (name);
    #####:11404:    jerry_release_value (func);
        -:11405:  }
        -:11406:
    #####:11407:  jerry_release_value (global);
        -:11408:
    #####:11409:  const char *source = ("function f() { g (); }\n"
        -:11410:                        "function g() { h (); }\n"
        -:11411:                        "function h() { backtrace (); }\n"
        -:11412:                        "f ();\n");
        -:11413:
        -:11414:  jerry_parse_options_t parse_options;
    #####:11415:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
    #####:11416:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "demo_memory.js");
        -:11417:
    #####:11418:  jerry_value_t program = jerry_parse ((const jerry_char_t *) source,
        -:11419:                                       strlen (source),
        -:11420:                                       &parse_options);
    #####:11421:  jerry_release_value (parse_options.resource_name);
        -:11422:
    #####:11423:  if (!jerry_value_is_error (program))
        -:11424:  {
    #####:11425:    jerry_value_t run_result = jerry_run (program);
    #####:11426:    jerry_release_value (run_result);
        -:11427:  }
        -:11428:
    #####:11429:  jerry_release_value (program);
    #####:11430:  jerry_cleanup ();
        -:11431:
        -:11432:  return 0;
        -:11433:}
        -:11434:```
        -:11435:
        -:11436:**See also**
        -:11437:
        -:11438:- [jerry_get_backtrace_from](#jerry_get_backtrace_from)
        -:11439:- [jerry_create_external_function](#jerry_create_external_function)
        -:11440:
        -:11441:
        -:11442:## jerry_backtrace_capture
        -:11443:
        -:11444:**Summary**
        -:11445:
        -:11446:Low-level function to capture each backtrace frame. The captured frame data
        -:11447:is passed to a callback function. To improve performance, the majority of
        -:11448:the frame data is not initialized when the callback function is called. The
        -:11449:initialization of these fields can be done later by helper functions such
        -:11450:as [jerry_backtrace_get_location](#jerry_backtrace_get_location).
        -:11451:
        -:11452:**Prototype**
        -:11453:
        -:11454:```c
        -:11455:void
        -:11456:jerry_backtrace_capture (jerry_backtrace_callback_t callback, void *user_p);
        -:11457:```
        -:11458:
        -:11459:- `callback` - a [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11460:               which is called for each captured frame
        -:11461:- `user_p` - pointer passed to the `callback` function, can be NULL
        -:11462:
        -:11463:*New in version [[NEXT_RELEASE]]*.
        -:11464:
        -:11465:**Example**
        -:11466:
        -:11467:[doctest]: # (name="02.API-REFERENCE-jscapturebacktrace.c")
        -:11468:
        -:11469:```c
        -:11470:#include <stdio.h>
        -:11471:#include <string.h>
        -:11472:#include "jerryscript.h"
        -:11473:
        -:11474:static bool
    #####:11475:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11476:                    void *user_p)
        -:11477:{
    #####:11478:  printf (" A stack frame is captured\n");
    #####:11479:  return true;
        -:11480:}
        -:11481:
        -:11482:static jerry_value_t
    #####:11483:backtrace_handler (const jerry_call_info_t *call_info_p,
        -:11484:                   const jerry_value_t args_p[],
        -:11485:                   const jerry_length_t args_count)
        -:11486:{
        -:11487:  (void) call_info_p;
        -:11488:  (void) args_p;
        -:11489:  (void) args_count;
        -:11490:
    #####:11491:  jerry_backtrace_capture (&backtrace_callback, NULL);
        -:11492:
    #####:11493:  return jerry_create_undefined ();
        -:11494:} /* backtrace_handler */
        -:11495:
        -:11496:int
    #####:11497:main (void)
        -:11498:{
    #####:11499:  jerry_init (JERRY_INIT_EMPTY);
        -:11500:
    #####:11501:  jerry_value_t global = jerry_get_global_object ();
        -:11502:
        -:11503:  /* Register the "dump_backtrace" method. */
        -:11504:  {
    #####:11505:    jerry_value_t func = jerry_create_external_function (backtrace_handler);
    #####:11506:    jerry_value_t name = jerry_create_string ((const jerry_char_t *) "backtrace");
    #####:11507:    jerry_value_t result = jerry_set_property (global, name, func);
    #####:11508:    jerry_release_value (result);
    #####:11509:    jerry_release_value (name);
    #####:11510:    jerry_release_value (func);
        -:11511:  }
        -:11512:
    #####:11513:  jerry_release_value (global);
        -:11514:
    #####:11515:  const char *source = ("function f() { g (); }\n"
        -:11516:                        "function g() { h (); }\n"
        -:11517:                        "function h() { backtrace (g); }\n"
        -:11518:                        "f ();\n");
        -:11519:
        -:11520:  jerry_parse_options_t parse_options;
    #####:11521:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
    #####:11522:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "demo_backtrace.js");
        -:11523:
    #####:11524:  jerry_value_t program = jerry_parse ((const jerry_char_t *) source,
        -:11525:                                       strlen (source),
        -:11526:                                       &parse_options);
    #####:11527:  jerry_release_value (parse_options.resource_name);
        -:11528:
    #####:11529:  if (!jerry_value_is_error (program))
        -:11530:  {
    #####:11531:    jerry_value_t run_result = jerry_run (program);
    #####:11532:    jerry_release_value (run_result);
        -:11533:  }
        -:11534:
    #####:11535:  jerry_release_value (program);
    #####:11536:  jerry_cleanup ();
        -:11537:
        -:11538:  return 0;
        -:11539:}
        -:11540:```
        -:11541:
        -:11542:**See also**
        -:11543:
        -:11544:- [jerry_get_backtrace](#jerry_get_backtrace)
        -:11545:- [jerry_backtrace_get_frame_type](#jerry_backtrace_get_frame_type)
        -:11546:- [jerry_backtrace_get_location](#jerry_backtrace_get_location)
        -:11547:- [jerry_backtrace_get_function](#jerry_backtrace_get_function)
        -:11548:- [jerry_backtrace_get_this](#jerry_backtrace_get_this)
        -:11549:- [jerry_backtrace_is_strict](#jerry_backtrace_is_strict)
        -:11550:
        -:11551:
        -:11552:## jerry_backtrace_get_frame_type
        -:11553:
        -:11554:**Summary**
        -:11555:
        -:11556:Returns with the type of the backtrace frame. This function can only be called
        -:11557:from the callback function of [jerry_backtrace_capture](#jerry_backtrace_capture),
        -:11558:and the value becomes invalid after the callback returns.
        -:11559:
        -:11560:**Prototype**
        -:11561:
        -:11562:```c
        -:11563:jerry_backtrace_frame_types_t
        -:11564:jerry_backtrace_get_frame_type (jerry_backtrace_frame_t *frame_p);
        -:11565:```
        -:11566:
        -:11567:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11568:- return value
        -:11569:  - frame type listed in [jerry_backtrace_frame_types_t](#jerry_backtrace_frame_types_t)
        -:11570:
        -:11571:*New in version [[NEXT_RELEASE]]*.
        -:11572:
        -:11573:**Example**
        -:11574:
        -:11575:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11576:with the following callback function:
        -:11577:
        -:11578:```c
        -:11579:static bool
        -:11580:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11581:                    void *user_p)
        -:11582:{
        -:11583:  switch (jerry_backtrace_get_frame_type (frame_p))
        -:11584:  {
        -:11585:    case JERRY_BACKTRACE_FRAME_JS:
        -:11586:    {
        -:11587:      printf (" ECMAScript frame\n");
        -:11588:      break;
        -:11589:    }
        -:11590:    default:
        -:11591:    {
        -:11592:      printf (" Other frame\n");
        -:11593:      break;
        -:11594:    }
        -:11595:  }
        -:11596:
        -:11597:  return true;
        -:11598:}
        -:11599:```
        -:11600:
        -:11601:**See also**
        -:11602:
        -:11603:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11604:
        -:11605:
        -:11606:## jerry_backtrace_get_location
        -:11607:
        -:11608:**Summary**
        -:11609:
        -:11610:Initialize and return with the location private field of a backtrace
        -:11611:frame. If the location is not available, the returned value is NULL.
        -:11612:This function can only be called from the callback function of
        -:11613:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value
        -:11614:becomes invalid after the callback returns.
        -:11615:
        -:11616:*Notes*:
        -:11617:- Location information can only be retrieved if JERRY_FEATURE_LINE_INFO feature is
        -:11618:  enabled. Otherwise the function always returns with NULL.
        -:11619:- The returned data must not be modified, and does not need to be freed.
        -:11620:  Any cleanup is done automatically after the callback is returned.
        -:11621:
        -:11622:**Prototype**
        -:11623:
        -:11624:```c
        -:11625:const jerry_backtrace_location_t *
        -:11626:jerry_backtrace_get_location (jerry_backtrace_frame_t *frame_p);
        -:11627:```
        -:11628:
        -:11629:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11630:- return value
        -:11631:  - pointer to the location private field if the location is available,
        -:11632:  - NULL otherwise
        -:11633:
        -:11634:*New in version [[NEXT_RELEASE]]*.
        -:11635:
        -:11636:**Example**
        -:11637:
        -:11638:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11639:with the following callback function:
        -:11640:
        -:11641:```c
        -:11642:static bool
        -:11643:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11644:                    void *user_p)
        -:11645:{
        -:11646:  const jerry_backtrace_location_t *location_p;
        -:11647:  location_p = jerry_backtrace_get_location (frame_p);
        -:11648:
        -:11649:  if (location_p == NULL)
        -:11650:  {
        -:11651:    printf ("No location info is available\n");
        -:11652:    return true;
        -:11653:  }
        -:11654:
        -:11655:  jerry_char_t string_buffer[64];
        -:11656:  jerry_size_t copied_bytes = jerry_substring_to_char_buffer (location_p->resource_name,
        -:11657:                                                              0,
        -:11658:                                                              63,
        -:11659:                                                              string_buffer,
        -:11660:                                                              63);
        -:11661:  string_buffer[copied_bytes] = '\0';
        -:11662:  printf(" %s:%d:%d\n", string_buffer, (int) location_p->line, (int) location_p->column);
        -:11663:  return true;
        -:11664:}
        -:11665:```
        -:11666:
        -:11667:**See also**
        -:11668:
        -:11669:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11670:
        -:11671:
        -:11672:## jerry_backtrace_get_function
        -:11673:
        -:11674:**Summary**
        -:11675:
        -:11676:Initialize and return with the called function private field of a backtrace frame.
        -:11677:The backtrace frame is created for running the code bound to this function. This
        -:11678:function can only be called from the callback function of
        -:11679:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value becomes invalid
        -:11680:after the callback returns.
        -:11681:
        -:11682:*Notes*:
        -:11683:- The returned data must not be modified, and does not need to be freed.
        -:11684:  Any cleanup is done automatically after the callback is returned.
        -:11685:
        -:11686:**Prototype**
        -:11687:
        -:11688:```c
        -:11689:const jerry_value_t *
        -:11690:jerry_backtrace_get_function (jerry_backtrace_frame_t *frame_p);
        -:11691:```
        -:11692:
        -:11693:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11694:- return value
        -:11695:  - pointer to the called function if the function is available,
        -:11696:  - NULL otherwise
        -:11697:
        -:11698:*New in version [[NEXT_RELEASE]]*.
        -:11699:
        -:11700:**Example**
        -:11701:
        -:11702:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11703:with the following callback function:
        -:11704:
        -:11705:```c
        -:11706:static bool
        -:11707:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11708:                    void *user_p)
        -:11709:{
        -:11710:  jerry_value_t *function_p = jerry_backtrace_get_function (frame_p);
        -:11711:
        -:11712:  if (function_p != NULL)
        -:11713:  {
        -:11714:    printf ("Called function is available");
        -:11715:    return true;
        -:11716:  }
        -:11717:
        -:11718:  printf ("Called function is NOT available");
        -:11719:  return true;
        -:11720:}
        -:11721:```
        -:11722:
        -:11723:**See also**
        -:11724:
        -:11725:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11726:
        -:11727:
        -:11728:## jerry_backtrace_get_this
        -:11729:
        -:11730:**Summary**
        -:11731:
        -:11732:Initialize and return with the 'this' binding private field of a backtrace frame.
        -:11733:The 'this' binding is a hidden value passed to the called function. As for arrow
        -:11734:functions, the 'this' binding is assigned at function creation. This getter
        -:11735:function can only be called from the callback function of
        -:11736:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value becomes invalid
        -:11737:after the callback returns.
        -:11738:
        -:11739:*Notes*:
        -:11740:- The returned data must not be modified, and does not need to be freed.
        -:11741:  Any cleanup is done automatically after the callback is returned.
        -:11742:
        -:11743:**Prototype**
        -:11744:
        -:11745:```c
        -:11746:const jerry_value_t *
        -:11747:jerry_backtrace_get_this (jerry_backtrace_frame_t *frame_p);
        -:11748:```
        -:11749:
        -:11750:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11751:- return value
        -:11752:  - pointer to the 'this' binding if the binding is available,
        -:11753:  - NULL otherwise
        -:11754:
        -:11755:*New in version [[NEXT_RELEASE]]*.
        -:11756:
        -:11757:**Example**
        -:11758:
        -:11759:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11760:with the following callback function:
        -:11761:
        -:11762:```c
        -:11763:static bool
        -:11764:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11765:                    void *user_p)
        -:11766:{
        -:11767:  jerry_value_t *this_p = jerry_backtrace_get_this (frame_p);
        -:11768:
        -:11769:  if (this_p != NULL)
        -:11770:  {
        -:11771:    printf ("The 'this' binding is available");
        -:11772:    return true;
        -:11773:  }
        -:11774:
        -:11775:  printf ("The 'this' binding is NOT available");
        -:11776:  return true;
        -:11777:}
        -:11778:```
        -:11779:
        -:11780:**See also**
        -:11781:
        -:11782:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11783:
        -:11784:
        -:11785:## jerry_backtrace_is_strict
        -:11786:
        -:11787:**Summary**
        -:11788:
        -:11789:Returns true, if the code bound to the backtrace frame is strict mode
        -:11790:code. This function can only be called from the callback function of
        -:11791:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value
        -:11792:becomes invalid after the callback returns.
        -:11793:
        -:11794:**Prototype**
        -:11795:
        -:11796:```c
        -:11797:bool
        -:11798:jerry_backtrace_is_strict (jerry_backtrace_frame_t *frame_p);
        -:11799:```
        -:11800:
        -:11801:- `frame_p` - a frame passed to the [jerry_backtrace_callback_t](#jerry_backtrace_callback_t) callback
        -:11802:- return value
        -:11803:  - true, if strict mode code is bound to the frame
        -:11804:  - false, otherwise
        -:11805:
        -:11806:*New in version [[NEXT_RELEASE]]*.
        -:11807:
        -:11808:**Example**
        -:11809:
        -:11810:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11811:with the following callback function:
        -:11812:
        -:11813:```c
        -:11814:static bool
        -:11815:backtrace_callback (jerry_backtrace_frame_t *frame_p,
        -:11816:                    void *user_p)
        -:11817:{
        -:11818:  if (jerry_backtrace_is_strict (frame_p))
        -:11819:  {
        -:11820:    printf ("Strict mode code is running");
        -:11821:    return truel
        -:11822:  }
        -:11823:
        -:11824:  printf ("Non-strict mode code is running");
        -:11825:  return true;
        -:11826:}
        -:11827:```
        -:11828:
        -:11829:**See also**
        -:11830:
        -:11831:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11832:
        -:11833:
        -:11834:# Miscellaneous functions
        -:11835:
        -:11836:## jerry_set_vm_exec_stop_callback
        -:11837:
        -:11838:**Summary**
        -:11839:
        -:11840:The callback passed to this function is periodically called when
        -:11841:JerryScript executes an ECMAScript program.
        -:11842:
        -:11843:If the callback returns with undefined value the ECMAScript execution
        -:11844:continues. Otherwise the result is thrown by the engine (if the error
        -:11845:flag is not set for the returned value the engine automatically sets
        -:11846:it). The callback function might be called again even if it threw
        -:11847:an error. In this case the function must throw the same error again.
        -:11848:
        -:11849:To reduce the CPU overhead of constantly checking the termination
        -:11850:condition the callback is called when a backward jump is executed
        -:11851:or an exception is caught. Setting the `frequency` to a greater
        -:11852:than `1` value reduces this overhead further. If its value is N
        -:11853:only every Nth event (backward jump, etc.) trigger the next check.
        -:11854:
        -:11855:*Notes*:
        -:11856:- This API depends on a build option (`JERRY_VM_EXEC_STOP`) and can be checked
        -:11857:  in runtime with the `JERRY_FEATURE_VM_EXEC_STOP` feature enum value,
        -:11858:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11859:
        -:11860:**Prototype**
        -:11861:
        -:11862:```c
        -:11863:void
        -:11864:jerry_set_vm_exec_stop_callback (jerry_vm_exec_stop_callback_t stop_cb,
        -:11865:                                 void *user_p,
        -:11866:                                 uint32_t frequency);
        -:11867:```
        -:11868:
        -:11869:- `stop_cb` - periodically called callback (passing NULL disables this feature)
        -:11870:- `user_p` - user pointer passed to the `stop_cb` function
        -:11871:- `frequency` - frequency of calling the `stop_cb` function
        -:11872:
        -:11873:*New in version 2.0*.
        -:11874:
        -:11875:**Example**
        -:11876:
        -:11877:[doctest]: # (test="link")
        -:11878:
        -:11879:```c
        -:11880:#include "jerryscript.h"
        -:11881:
        -:11882:static jerry_value_t
    #####:11883:vm_exec_stop_callback (void *user_p)
        -:11884:{
    #####:11885:  int *countdown_p = (int *) user_p;
        -:11886:
    #####:11887:  while (*countdown_p > 0)
        -:11888:  {
    #####:11889:    (*countdown_p)--;
    #####:11890:    return jerry_create_undefined ();
        -:11891:  }
        -:11892:
        -:11893:  // The error flag is added automatically.
    #####:11894:  return jerry_create_string ((const jerry_char_t *) "Abort script");
        -:11895:}
        -:11896:
        -:11897:int
    #####:11898:main (void)
        -:11899:{
    #####:11900:  jerry_init (JERRY_INIT_EMPTY);
        -:11901:
    #####:11902:  int countdown = 10;
    #####:11903:  jerry_set_vm_exec_stop_callback (vm_exec_stop_callback, &countdown, 16);
        -:11904:
        -:11905:  // Infinite loop.
    #####:11906:  const jerry_char_t script[] = "while(true) {}";
        -:11907:
    #####:11908:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
    #####:11909:  jerry_release_value (jerry_run (parsed_code));
    #####:11910:  jerry_release_value (parsed_code);
    #####:11911:  jerry_cleanup ();
        -:11912:}
        -:11913:```
        -:11914:
        -:11915:**See also**
        -:11916:
        -:11917:- [jerry_vm_exec_stop_callback_t](#jerry_vm_exec_stop_callback_t)
        -:11918:
        -:11919:## jerry_get_resource_name
        -:11920:
        -:11921:**Summary**
        -:11922:
        -:11923:Get the resource name (usually a file name) of the currently executed script or the given function object.
        -:11924:
        -:11925:This function is typically called from native callbacks.
        -:11926:
        -:11927:*Notes*:
        -:11928:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:11929:is no longer needed.
        -:11930:- This feature depends on build option (`JERRY_LINE_INFO`) and can be checked
        -:11931:  in runtime with the `JERRY_FEATURE_LINE_INFO` feature enum value,
        -:11932:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:11933:
        -:11934:**Prototype**
        -:11935:
        -:11936:```c
        -:11937:jerry_value_t
        -:11938:jerry_get_resource_name (jerry_value_t value);
        -:11939:```
        -:11940:- `value` - api value to obtain the resource name from
        -:11941:- return string value constructed from
        -:11942:  - the currently executed function object's resource name, if the given value is undefined
        -:11943:  - resource name of the function object, if the given value is a function object
        -:11944:  - "<anonymous>", otherwise
        -:11945:
        -:11946:*New in version 2.2*.
        -:11947:
        -:11948:**Example**
        -:11949:
        -:11950:[doctest]: # (name="02.API-REFERENCE-jsresourcename.c")
        -:11951:
        -:11952:```c
        -:11953:#include <stdio.h>
        -:11954:#include <string.h>
        -:11955:#include "jerryscript.h"
        -:11956:
        -:11957:static jerry_value_t
    #####:11958:resource_name_handler (const jerry_call_info_t *call_info_p,
        -:11959:                       const jerry_value_t args_p[],
        -:11960:                       const jerry_length_t args_count)
        -:11961:{
    #####:11962:  jerry_value_t undefined_value = jerry_create_undefined ();
    #####:11963:  jerry_value_t resource_name = jerry_get_resource_name (args_count > 0 ? args_p[0] : undefined_value);
    #####:11964:  jerry_release_value (undefined_value);
        -:11965:
    #####:11966:  return resource_name;
        -:11967:} /* resource_name_handler */
        -:11968:
        -:11969:int
    #####:11970:main (void)
        -:11971:{
    #####:11972:  jerry_init (JERRY_INIT_EMPTY);
        -:11973:
    #####:11974:  jerry_value_t global = jerry_get_global_object ();
        -:11975:
        -:11976:  /* Register the "resourceName" method. */
        -:11977:  {
    #####:11978:    jerry_value_t func = jerry_create_external_function (resource_name_handler);
    #####:11979:    jerry_value_t name = jerry_create_string ((const jerry_char_t *) "resourceName");
    #####:11980:    jerry_value_t result = jerry_set_property (global, name, func);
    #####:11981:    jerry_release_value (result);
    #####:11982:    jerry_release_value (name);
    #####:11983:    jerry_release_value (func);
        -:11984:  }
        -:11985:
    #####:11986:  jerry_release_value (global);
        -:11987:
    #####:11988:  const jerry_char_t source[] = "function myFunction() { return resourceName() }; myFunction()";
        -:11989:
        -:11990:  jerry_parse_options_t parse_options;
    #####:11991:  parse_options.options = JERRY_PARSE_HAS_RESOURCE;
    #####:11992:  parse_options.resource_name = jerry_create_string ((const jerry_char_t *) "demo.js");
        -:11993:
    #####:11994:  jerry_value_t program = jerry_parse (source,
        -:11995:                                       sizeof (source) - 1,
        -:11996:                                       &parse_options);
    #####:11997:  jerry_release_value (parse_options.resource_name);
        -:11998:
    #####:11999:  if (!jerry_value_is_error (program))
        -:12000:  {
        -:12001:    /* `run_result` contains "demo.js" */
    #####:12002:    jerry_value_t run_result = jerry_run (program);
        -:12003:
        -:12004:    /* usage of `run_result` */
        -:12005:
    #####:12006:    jerry_release_value (run_result);
        -:12007:  }
        -:12008:
    #####:12009:  jerry_release_value (program);
    #####:12010:  jerry_cleanup ();
        -:12011:
        -:12012:  return 0;
        -:12013:}
        -:12014:```
        -:12015:
        -:12016:**See also**
        -:12017:
        -:12018:- [jerry_create_external_function](#jerry_create_external_function)
        -:12019:
        -:12020:## jerry_get_user_value
        -:12021:
        -:12022:**Summary**
        -:12023:
        -:12024:Returns the user value assigned to a script / module / function. This value is
        -:12025:set by the parser when the JERRY_PARSE_HAS_USER_VALUE flag is set in the `options`
        -:12026:member of the [jerry_parse_options_t](#jerry_parse_options_t) structure.
        -:12027:
        -:12028:*Notes*:
        -:12029:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:12030:is no longer needed.
        -:12031:
        -:12032:**Prototype**
        -:12033:
        -:12034:```c
        -:12035:jerry_value_t
        -:12036:jerry_get_user_value (const jerry_value_t value);
        -:12037:```
        -:12038:- `value` - script / module / function value which executes ECMAScript
        -:12039:            code (native modules / functions do not have user value).
        -:12040:- return
        -:12041:  - user value - if available,
        -:12042:  - undefined - otherwise
        -:12043:
        -:12044:*New in version [[NEXT_RELEASE]]*.
        -:12045:
        -:12046:**Example**
        -:12047:
        -:12048:[doctest]: # ()
        -:12049:
        -:12050:```c
        -:12051:#include "jerryscript.h"
        -:12052:
        -:12053:int
    #####:12054:main (void)
        -:12055:{
    #####:12056:  jerry_init (JERRY_INIT_EMPTY);
        -:12057:
    #####:12058:  const jerry_char_t script[] = "function abc() {} abc";
        -:12059:
    #####:12060:  jerry_value_t user_value = jerry_create_object ();
        -:12061:
        -:12062:  jerry_parse_options_t parse_options;
    #####:12063:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:12064:  parse_options.user_value = user_value;
        -:12065:
    #####:12066:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####:12067:  jerry_release_value (user_value);
        -:12068:
        -:12069:  /* The jerry_get_user_value returns the object which
        -:12070:   * was created by jerry_create_object before. */
        -:12071:
    #####:12072:  user_value = jerry_get_user_value (parsed_code);
    #####:12073:  jerry_release_value (parsed_code);
        -:12074:
    #####:12075:  jerry_release_value (user_value);
    #####:12076:  jerry_cleanup ();
        -:12077:  return 0;
        -:12078:}
        -:12079:```
        -:12080:
        -:12081:**See also**
        -:12082:
        -:12083:- [jerry_parse](#jerry_parse)
        -:12084:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:12085:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:12086:
        -:12087:## jerry_is_eval_code
        -:12088:
        -:12089:**Summary**
        -:12090:
        -:12091:Checks whether an ECMAScript code is compiled by eval like (eval, new Function,
        -:12092:[jerry_eval](#jerry_eval), etc.) command.
        -:12093:
        -:12094:**Prototype**
        -:12095:
        -:12096:```c
        -:12097:bool jerry_is_eval_code (const jerry_value_t value);
        -:12098:```
        -:12099:- `value` - script / module / function value which executes ECMAScript code
        -:12100:- return
        -:12101:  - true - if code is compiled by eval like command
        -:12102:  - false - otherwise
        -:12103:
        -:12104:*New in version [[NEXT_RELEASE]]*.
        -:12105:
        -:12106:**Example**
        -:12107:
        -:12108:[doctest]: # ()
        -:12109:
        -:12110:```c
        -:12111:#include "jerryscript.h"
        -:12112:
        -:12113:int
    #####:12114:main (void)
        -:12115:{
    #####:12116:  jerry_init (JERRY_INIT_EMPTY);
        -:12117:
    #####:12118:  const jerry_char_t script[] = "eval('(function (a) { return a; })')";
        -:12119:
    #####:12120:  jerry_value_t script_value = jerry_parse (script, sizeof (script) - 1, NULL);
    #####:12121:  jerry_value_t function_value = jerry_run (script_value);
    #####:12122:  jerry_release_value (script_value);
        -:12123:
    #####:12124:  if (jerry_is_eval_code (function_value))
        -:12125:  {
        -:12126:    /* Code enters here. */
        -:12127:  }
        -:12128:
    #####:12129:  jerry_release_value (function_value);
    #####:12130:  jerry_cleanup ();
        -:12131:  return 0;
        -:12132:}
        -:12133:```
        -:12134:
        -:12135:**See also**
        -:12136:
        -:12137:- [jerry_parse](#jerry_parse)
        -:12138:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:12139:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:12140:
        -:12141:## jerry_get_source_info
        -:12142:
        -:12143:**Summary**
        -:12144:
        -:12145:Returns a newly created source info structure corresponding to the passed script/module/function.
        -:12146:The function is lower level than `toString()` operation, but provides more contextual information.
        -:12147:
        -:12148:*Notes*:
        -:12149:- Returned value must be freed with [jerry_free_source_info](#jerry_free_source_info) when it
        -:12150:is no longer needed.
        -:12151:- This API depends on a build option (`JERRY_FUNCTION_TO_STRING`) and can be checked
        -:12152:  in runtime with the `JERRY_FEATURE_FUNCTION_TO_STRING` feature enum value,
        -:12153:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12154:
        -:12155:**Prototype**
        -:12156:
        -:12157:```c
        -:12158:jerry_source_info_t *jerry_get_source_info (const jerry_value_t value);
        -:12159:```
        -:12160:- `value` - script / module / function value which executes JavaScript
        -:12161:            code (native modules / functions do not have source info).
        -:12162:- return
        -:12163:  - source info - a newly created source info, if at least one field is available,
        -:12164:  - NULL - otherwise
        -:12165:
        -:12166:*New in version [[NEXT_RELEASE]]*.
        -:12167:
        -:12168:**Example**
        -:12169:
        -:12170:[doctest]: # ()
        -:12171:
        -:12172:```c
        -:12173:#include "jerryscript.h"
        -:12174:
        -:12175:int
    #####:12176:main (void)
        -:12177:{
    #####:12178:  jerry_init (JERRY_INIT_EMPTY);
        -:12179:
    #####:12180:  const jerry_char_t script[] = "function abc() {} abc";
        -:12181:
    #####:12182:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
        -:12183:
    #####:12184:  jerry_source_info_t *source_info_p = jerry_get_source_info (parsed_code);
    #####:12185:  jerry_release_value (parsed_code);
        -:12186:
        -:12187:  if (source_info_p != NULL)
        -:12188:  {
        -:12189:    /* Check the information provided by jerry_get_source_info. */
        -:12190:  }
        -:12191:
    #####:12192:  jerry_free_source_info (source_info_p);
        -:12193:
    #####:12194:  jerry_cleanup ();
        -:12195:  return 0;
        -:12196:}
        -:12197:```
        -:12198:
        -:12199:**See also**
        -:12200:
        -:12201:- [jerry_free_source_info](#jerry_free_source_info)
        -:12202:- [jerry_source_info_t](#jerry_source_info_t)
        -:12203:
        -:12204:## jerry_free_source_info
        -:12205:
        -:12206:**Summary**
        -:12207:
        -:12208:Frees the the source info structure returned by [jerry_get_source_info](#jerry_get_source_info).
        -:12209:
        -:12210:*Notes*:
        -:12211:- This API depends on a build option (`JERRY_FUNCTION_TO_STRING`) and can be checked
        -:12212:  in runtime with the `JERRY_FEATURE_FUNCTION_TO_STRING` feature enum value,
        -:12213:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12214:
        -:12215:**Prototype**
        -:12216:
        -:12217:```c
        -:12218:void jerry_free_source_info (jerry_source_info_t *source_info_p)
        -:12219:```
        -:12220:- `source_info_p` - source info structure returned by [jerry_get_source_info](#jerry_get_source_info)
        -:12221:
        -:12222:*New in version [[NEXT_RELEASE]]*.
        -:12223:
        -:12224:**Example**
        -:12225:
        -:12226:See [jerry_get_source_info](#jerry_get_source_info)
        -:12227:
        -:12228:**See also**
        -:12229:
        -:12230:- [jerry_get_source_info](#jerry_get_source_info)
        -:12231:- [jerry_source_info_t](#jerry_source_info_t)
        -:12232:
        -:12233:
        -:12234:# Functions for realm objects
        -:12235:
        -:12236:These APIs all depend on build option (`JERRY_BUILTIN_REALMS`).
        -:12237:
        -:12238:## jerry_set_realm
        -:12239:
        -:12240:**Summary**
        -:12241:
        -:12242:Replaces the currently active realm (including the global object) with another realm.
        -:12243:The replacement should be temporary, and the original realm must be restored after
        -:12244:the tasks are completed. During the replacement, the realm must be referenced
        -:12245:by the application (i.e. the gc must not reclaim it). This is also true to
        -:12246:the returned previously active realm, so there is no need to free the value
        -:12247:after the restoration. The function can only fail if realms are not supported
        -:12248:or the passed argument is not a realm. In this case the returned exception must
        -:12249:be freed by [jerry_release_value](#jerry_release_value).
        -:12250:
        -:12251:This function is useful to parse a script, create a native function, load a snapshot
        -:12252:or create an exception in another realm. Each ECMAScript code runs in the realm
        -:12253:which was active when the code was parsed or loaded regardless of the current realm.
        -:12254:
        -:12255:*Notes*:
        -:12256:- This feature depends on build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -:12257:  in runtime with the `JERRY_FEATURE_REALM` feature enum value,
        -:12258:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12259:- The es.next profile enables this by default.
        -:12260:
        -:12261:**Prototype**
        -:12262:
        -:12263:```c
        -:12264:jerry_value_t
        -:12265:jerry_set_realm (jerry_value_t realm_value);
        -:12266:```
        -:12267:- `realm_value` - the new realm value
        -:12268:- return
        -:12269:  - previous realm value - if the passed value is a realm
        -:12270:  - exception - otherwise
        -:12271:
        -:12272:*New in version 2.4*.
        -:12273:
        -:12274:**Example**
        -:12275:
        -:12276:```c
        -:12277:{
        -:12278:  jerry_value_t realm_value = jerry_create_realm ();
        -:12279:
        -:12280:  jerry_value_t old_realm = jerry_set_realm (realm_value);
        -:12281:
        -:12282:  ... // usage of the realm
        -:12283:
        -:12284:  jerry_set_realm (old_realm);
        -:12285:}
        -:12286:```
        -:12287:
        -:12288:**See also**
        -:12289:
        -:12290:- [jerry_create_realm](#jerry_create_realm)
        -:12291:
        -:12292:## jerry_realm_get_this
        -:12293:
        -:12294:**Summary**
        -:12295:
        -:12296:Gets the 'this' binding of a realm. The 'this' binding is always an object.
        -:12297:By default the 'this' binding is the same as the realm object and can be
        -:12298:changed by [jerry_realm_set_this](#jerry_realm_set_this).
        -:12299:
        -:12300:*Notes*:
        -:12301:- This feature depends on build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -:12302:  in runtime with the `JERRY_FEATURE_REALM` feature enum value,
        -:12303:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12304:- The es.next profile enables this by default.
        -:12305:
        -:12306:**Prototype**
        -:12307:
        -:12308:```c
        -:12309:jerry_value_t
        -:12310:jerry_realm_get_this (jerry_value_t realm_value)
        -:12311:```
        -:12312:- `realm_value` - realm value
        -:12313:- return
        -:12314:  - type error - if realm_value is not a realm
        -:12315:  - 'this' binding object - otherwise
        -:12316:
        -:12317:*New in version 2.4*.
        -:12318:
        -:12319:**Example**
        -:12320:
        -:12321:```c
        -:12322:{
        -:12323:  jerry_value_t realm_value = jerry_create_realm ();
        -:12324:
        -:12325:  jerry_value_t this_value = jerry_realm_get_this (realm_value);
        -:12326:
        -:12327:  ... // usage of the this_value
        -:12328:
        -:12329:  jerry_release_value (this_value);
        -:12330:  jerry_release_value (realm_value);
        -:12331:}
        -:12332:```
        -:12333:
        -:12334:**See also**
        -:12335:
        -:12336:- [jerry_create_realm](#jerry_create_realm)
        -:12337:- [jerry_realm_set_this](#jerry_realm_set_this)
        -:12338:
        -:12339:## jerry_realm_set_this
        -:12340:
        -:12341:**Summary**
        -:12342:
        -:12343:Sets the 'this' binding of a realm. This function must be called before executing
        -:12344:any script on the realm. Otherwise the operation is undefined.
        -:12345:
        -:12346:*Notes*:
        -:12347:- This feature depends on build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -:12348:  in runtime with the `JERRY_FEATURE_REALM` feature enum value,
        -:12349:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:12350:- The es.next profile enables this by default.
        -:12351:
        -:12352:**Prototype**
        -:12353:
        -:12354:```c
        -:12355:jerry_value_t
        -:12356:jerry_realm_set_this (jerry_value_t realm_value, jerry_value_t this_value)
        -:12357:```
        -:12358:- `realm_value` - realm value
        -:12359:- `this_value` - new this value
        -:12360:- return
        -:12361:  - type error - if realm_value is not a realm or this_value is not object
        -:12362:  - true - otherwise
        -:12363:
        -:12364:*New in version 2.4*.
        -:12365:
        -:12366:**Example**
        -:12367:
        -:12368:```c
        -:12369:{
        -:12370:  jerry_value_t realm_value = jerry_create_realm ();
        -:12371:
        -:12372:  jerry_value_t old_realm = jerry_set_realm (realm_value);
        -:12373:  /* The prototype of the object comes from the new realm. */
        -:12374:  jerry_value_t this_value = jerry_create_object ();
        -:12375:  jerry_set_realm (old_realm);
        -:12376:
        -:12377:  jerry_value_t result = jerry_realm_set_this (realm_value, this_value);
        -:12378:
        -:12379:  ... // usage of the realm
        -:12380:}
        -:12381:```
        -:12382:
        -:12383:**See also**
        -:12384:
        -:12385:- [jerry_create_realm](#jerry_create_realm)
        -:12386:- [jerry_set_realm](#jerry_set_realm)
        -:12387:- [jerry_realm_get_this](#jerry_realm_get_this)
        -:12388:
        -:12389:# ArrayBuffer and TypedArray functions
        -:12390:
        -:12391:These APIs all depend on the es.next profile.
        -:12392:
        -:12393:## jerry_get_arraybuffer_byte_length
        -:12394:
        -:12395:**Summary**
        -:12396:
        -:12397:Get the byte length property of the ArrayBuffer or SharedArrayBuffer. This is the
        -:12398:same value which was passed to the ArrayBuffer constructor call.
        -:12399:
        -:12400:**Prototype**
        -:12401:
        -:12402:```c
        -:12403:jerry_length_t
        -:12404:jerry_get_arraybuffer_byte_length (const jerry_value_t value);
        -:12405:```
        -:12406:
        -:12407:- `value` - ArrayBuffer object
        -:12408:- return value
        -:12409:  - size of the ArrayBuffer in bytes
        -:12410:  - 0 if the `value` parameter is not an ArrayBuffer
        -:12411:
        -:12412:*New in version 2.0*.
        -:12413:
        -:12414:**Example**
        -:12415:
        -:12416:```c
        -:12417:{
        -:12418:  jerry_value_t buffer = jerry_create_arraybuffer (15);
        -:12419:  jerry_length_t length = jerry_get_arraybuffer_byte_length (buffer);
        -:12420:  // length should be 15
        -:12421:
        -:12422:  jerry_release_value (buffer);
        -:12423:}
        -:12424:```
        -:12425:
        -:12426:**See also**
        -:12427:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -:12428:
        -:12429:
        -:12430:## jerry_arraybuffer_read
        -:12431:
        -:12432:**Summary**
        -:12433:
        -:12434:Copy the portion of the ArrayBuffer or SharedArrayBuffer into a user provided buffer.
        -:12435:The start offset of the read operation can be specified.
        -:12436:
        -:12437:The number bytes to be read can be specified via the `buf_size`
        -:12438:parameter. It is not possible to read more than the length of
        -:12439:the ArrayBuffer.
        -:12440:
        -:12441:Function returns the number of bytes read from the ArrayBuffer
        -:12442:(and written to the buffer parameter). This value is
        -:12443:calculated in the following way: `min(array buffer length - offset, buf_size)`.
        -:12444:
        -:12445:**Prototype**
        -:12446:
        -:12447:```c
        -:12448:jerry_length_t
        -:12449:jerry_arraybuffer_read (const jerry_value_t value,
        -:12450:                        jerry_length_t offset,
        -:12451:                        uint8_t *buf_p,
        -:12452:                        jerry_length_t buf_size);
        -:12453:```
        -:12454:
        -:12455:- `value` - ArrayBuffer to read from
        -:12456:- `offset` - start offset of the read operation
        -:12457:- `buf_p` - buffer to read the data to
        -:12458:- `buf_size` - maximum number of bytes to read into the buffer
        -:12459:- return value
        -:12460:  - number of bytes written into the buffer (read from the ArrayBuffer)
        -:12461:  - 0 if the `value` is not an ArrayBuffer object
        -:12462:  - 0 if the `buf_size` is zero or there is nothing to read
        -:12463:
        -:12464:*New in version 2.0*.
        -:12465:
        -:12466:**Example**
        -:12467:
        -:12468:```c
        -:12469:{
        -:12470:  uint8_t data[20];
        -:12471:  jerry_value_t buffer;
        -:12472:  // ... create the ArrayBuffer or acuiqre it from somewhere.
        -:12473:
        -:12474:  jerry_value_t bytes_read;
        -:12475:
        -:12476:  // read 10 bytes from the start of the ArrayBuffer.
        -:12477:  bytes_read = jerry_arraybuffer_read (buffer, 0, data, 10);
        -:12478:  // read the next 10 bytes
        -:12479:  bytes_read += jerry_arraybuffer_read (buffer, bytes_read, data + bytes_read, 10);
        -:12480:
        -:12481:  // process the data variable
        -:12482:
        -:12483:  jerry_release_value (buffer);
        -:12484:}
        -:12485:```
        -:12486:
        -:12487:**See also**
        -:12488:
        -:12489:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -:12490:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -:12491:- [jerry_get_arraybuffer_byte_length](#jerry_get_arraybuffer_byte_length)
        -:12492:
        -:12493:
        -:12494:## jerry_arraybuffer_write
        -:12495:
        -:12496:**Summary**
        -:12497:
        -:12498:Copy the contents of a buffer into the ArrayBuffer or SharedArrayBuffer.
        -:12499:The start offset of the write operation can be specified.
        -:12500:
        -:12501:The number bytes to be written can be specified via the `buf_size`
        -:12502:parameter. It is not possible to write more than the length of
        -:12503:the ArrayBuffer.
        -:12504:
        -:12505:Function returns the number of bytes written into the ArrayBuffer
        -:12506:(and read from the buffer parameter). This value is
        -:12507:calculated in the following way: `min(array buffer length - offset, buf_size)`.
        -:12508:
        -:12509:**Prototype**
        -:12510:
        -:12511:```c
        -:12512:jerry_length_t
        -:12513:jerry_arraybuffer_write (const jerry_value_t value,
        -:12514:                         jerry_length_t offset,
        -:12515:                         const uint8_t *buf_p,
        -:12516:                         jerry_length_t buf_size);
        -:12517:```
        -:12518:
        -:12519:- `value` - ArrayBuffer to write to
        -:12520:- `offset` - start offset of the write operation
        -:12521:- `buf_p` - buffer to read the data from
        -:12522:- `buf_size` - maximum number of bytes to write into the ArrayBuffer
        -:12523:- return value
        -:12524:  - number of bytes written into the ArrayBuffer (read from the buffer parameter)
        -:12525:  - 0 if the `value` is not an ArrayBuffer object
        -:12526:  - 0 if the `buf_size` is zero or there is nothing to write
        -:12527:
        -:12528:*New in version 2.0*.
        -:12529:
        -:12530:**Example**
        -:12531:
        -:12532:```c
        -:12533:{
        -:12534:  uint8_t data[20];
        -:12535:
        -:12536:  // fill the data with values
        -:12537:  for (int i = 0; i < 20; i++)
        -:12538:  {
        -:12539:    data[i] = (uint8_t) (i * 2);
        -:12540:  }
        -:12541:
        -:12542:  jerry_value_t buffer;
        -:12543:  // ... create the ArrayBuffer or acquire it from somewhere.
        -:12544:
        -:12545:  jerry_value_t bytes_written;
        -:12546:
        -:12547:  // write 10 bytes from to the start of the ArrayBuffer.
        -:12548:  bytes_written = jerry_arraybuffer_write (buffer, 0, data, 10);
        -:12549:  // read the next 10 bytes
        -:12550:  bytes_written += jerry_arraybuffer_write (buffer, bytes_written, data + bytes_written, 10);
        -:12551:
        -:12552:  // use the ArrayBuffer
        -:12553:
        -:12554:  jerry_release_value (buffer);
        -:12555:}
        -:12556:```
        -:12557:
        -:12558:**See also**
        -:12559:
        -:12560:- [jerry_create_arraybuffer](#jerry_create_arraybuffer)
        -:12561:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -:12562:- [jerry_get_arraybuffer_byte_length](#jerry_get_arraybuffer_byte_length)
        -:12563:
        -:12564:
        -:12565:## jerry_get_arraybuffer_pointer
        -:12566:
        -:12567:**Summary**
        -:12568:
        -:12569:The function allows access to the contents of the Array Buffer directly.
        -:12570:
        -:12571:**WARNING!** This operation is for expert use only! The programmer must
        -:12572:ensure that the returned memory area is used correctly. That is
        -:12573:there is no out of bounds reads or writes. The lifetime of the underlying
        -:12574:data buffer is managed by the ArrayBuffer value. Make sure to acquire the
        -:12575:value with [`jerry_acquire_value`](#jerry_acquire_value) if the data
        -:12576:buffer is needed later.
        -:12577:
        -:12578:**Prototype**
        -:12579:
        -:12580:```c
        -:12581:uint8_t *
        -:12582:jerry_get_arraybuffer_pointer (const jerry_value_t value);
        -:12583:```
        -:12584:
        -:12585:- `value` - Array Buffer object.
        -:12586:- return value
        -:12587:  - pointer to the Array Buffer's data area.
        -:12588:  - NULL if the `value` is:
        -:12589:    - not an ArrayBuffer object
        -:12590:    - an external ArrayBuffer has been detached
        -:12591:
        -:12592:*New in version 2.0*.
        -:12593:
        -:12594:**Example**
        -:12595:
        -:12596:```c
        -:12597:{
        -:12598:  // create the ArrayBuffer
        -:12599:  jerry_value_t buffer = jerry_create_arraybuffer (16);
        -:12600:
        -:12601:  uint8_t *const data = jerry_get_arraybuffer_pointer (buffer);
        -:12602:
        -:12603:  for (int i = 0; i < 16; i++)
        -:12604:  {
        -:12605:    data[i] = (uint8_t) (i + 4);
        -:12606:  }
        -:12607:
        -:12608:  // use the Array Buffer
        -:12609:
        -:12610:  // release buffer as it is not needed after this point
        -:12611:  jerry_release_value (buffer);
        -:12612:}
        -:12613:```
        -:12614:
        -:12615:**See also**
        -:12616:
        -:12617:- [jerry_create_arraybuffer_external](#jerry_create_arraybuffer_external)
        -:12618:
        -:12619:## jerry_is_arraybuffer_detachable
        -:12620:
        -:12621:**Summary**
        -:12622:
        -:12623:Get if the ArrayBuffer is detachable.
        -:12624:
        -:12625:**Prototype**
        -:12626:
        -:12627:```c
        -:12628:jerry_value_t
        -:12629:jerry_is_arraybuffer_detachable (const jerry_value_t value);
        -:12630:```
        -:12631:
        -:12632:- `value` - ArrayBuffer to be detached
        -:12633:- return
        -:12634:  - boolean value if success
        -:12635:  - Error otherwise
        -:12636:
        -:12637:*New in version 2.2*.
        -:12638:
        -:12639:**Example**
        -:12640:
        -:12641:```c
        -:12642:{
        -:12643:  // create the ArrayBuffer
        -:12644:  jerry_value_t buffer = jerry_create_arraybuffer (16);
        -:12645:
        -:12646:  jerry_value_t res = jerry_is_arraybuffer_detachable (buffer);
        -:12647:  bool is_detachable = jerry_value_is_true (res);
        -:12648:
        -:12649:  // release buffer as it is not needed after this point
        -:12650:  jerry_release_value (res);
        -:12651:  jerry_release_value (buffer);
        -:12652:}
        -:12653:```
        -:12654:
        -:12655:**See also**
        -:12656:
        -:12657:- [jerry_detach_arraybuffer](#jerry_detach_arraybuffer)
        -:12658:
        -:12659:## jerry_detach_arraybuffer
        -:12660:
        -:12661:**Summary**
        -:12662:
        -:12663:Detach the underlying data block from ArrayBuffer and set its bytelength to 0.
        -:12664:
        -:12665:This operation requires the ArrayBuffer to be external that created by
        -:12666:`jerry_create_arraybuffer_external`.
        -:12667:
        -:12668:**Prototype**
        -:12669:
        -:12670:```c
        -:12671:jerry_value_t
        -:12672:jerry_detach_arraybuffer (const jerry_value_t value);
        -:12673:```
        -:12674:
        -:12675:*Note*: If the ArrayBuffer has been created with `jerry_create_arraybuffer_external` the optional free callback is called on a successful detach operation
        -:12676:
        -:12677:- `value` - ArrayBuffer to be detached
        -:12678:- return
        -:12679:  - null value if success
        -:12680:  - Error otherwise
        -:12681:
        -:12682:*New in version 2.2*.
        -:12683:
        -:12684:**Example**
        -:12685:
        -:12686:```c
        -:12687:{
        -:12688:  uint8_t buf[1];
        -:12689:  jerry_size_t length = 1;
        -:12690:  // create the ArrayBuffer
        -:12691:  jerry_value_t buffer = jerry_create_arraybuffer (length, buf, NULL);
        -:12692:
        -:12693:  jerry_value_t res = jerry_detach_arraybuffer (buffer);
        -:12694:
        -:12695:  // release buffer as it is not needed after this point
        -:12696:  jerry_release_value (res);
        -:12697:  jerry_release_value (buffer);
        -:12698:}
        -:12699:```
        -:12700:
        -:12701:**See also**
        -:12702:
        -:12703:- [jerry_is_arraybuffer_detachable](#jerry_is_arraybuffer_detachable)
        -:12704:
        -:12705:## jerry_get_dataview_buffer
        -:12706:
        -:12707:**Summary**
        -:12708:
        -:12709:Get the ArrayBuffer object used by a DataView object.
        -:12710:Additionally returns the byteLength and byteOffset properties
        -:12711:of the DataView object.
        -:12712:
        -:12713:For the returned ArrayBuffer the [jerry_release_value](#jerry_release_value)
        -:12714:must be called when it is no longer needed.
        -:12715:
        -:12716:**Prototype**
        -:12717:
        -:12718:```c
        -:12719:jerry_value_t
        -:12720:jerry_get_dataview_buffer (const jerry_value_t value,
        -:12721:                           jerry_length_t *byteOffset,
        -:12722:                           jerry_length_t *byteLength);
        -:12723:```
        -:12724:
        -:12725:- `value` - DataView to get the ArrayBuffer from
        -:12726:- `byteOffset` - (Optional) returns the start offset of the ArrayBuffer for the DataView
        -:12727:- `byteLength` - (Optional) returns the number of bytes used from the ArrayBuffer for the DataView
        -:12728:- return
        -:12729:  - DataView object's underlying ArrayBuffer object
        -:12730:  - TypeError if the `value` is not a DataView object
        -:12731:
        -:12732:*New in version 2.0*.
        -:12733:
        -:12734:**Example**
        -:12735:
        -:12736:[doctest]: # ()
        -:12737:
        -:12738:```c
        -:12739:#include "jerryscript.h"
        -:12740:
        -:12741:int
    #####:12742:main (void)
        -:12743:{
    #####:12744:  jerry_init (JERRY_INIT_EMPTY);
        -:12745:
    #####:12746:  jerry_value_t arraybuffer = jerry_create_arraybuffer (16);
    #####:12747:  jerry_value_t dataview = jerry_create_dataview (arraybuffer, 0, 16);
    #####:12748:  jerry_length_t byteOffset = 0;
    #####:12749:  jerry_length_t byteLength = 0;
    #####:12750:  jerry_value_t buffer = jerry_get_dataview_buffer (dataview, &byteOffset, &byteLength);
        -:12751:
        -:12752:  // buffer is an ArrayBuffer object and ArrayBuffer operations can be performed on it
        -:12753:  // byteOffset is 0
        -:12754:  // byteLength is 16
        -:12755:
        -:12756:  // usage of buffer
        -:12757:
    #####:12758:  jerry_release_value (buffer);
    #####:12759:  jerry_release_value (dataview);
    #####:12760:  jerry_release_value (arraybuffer);
        -:12761:
    #####:12762:  jerry_cleanup ();
        -:12763:}
        -:12764:```
        -:12765:
        -:12766:**See also**
        -:12767:
        -:12768:- [jerry_create_dataview](#jerry_create_dataview)
        -:12769:
        -:12770:
        -:12771:## jerry_get_typedarray_type
        -:12772:
        -:12773:**Summary**
        -:12774:
        -:12775:Get the type of the TypedArray.
        -:12776:
        -:12777:The returned type is one of the [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -:12778:enum value.
        -:12779:
        -:12780:**Prototype**
        -:12781:
        -:12782:```c
        -:12783:jerry_typedarray_type_t
        -:12784:jerry_get_typedarray_type (jerry_value_t value);
        -:12785:```
        -:12786:
        -:12787:- `value` - TypedArray object to query for type.
        -:12788:- return
        -:12789:  - the type of the TypedArray
        -:12790:  - JERRY_TYPEDARRAY_INVALID if the object was not a TypedArray
        -:12791:
        -:12792:*New in version 2.0*.
        -:12793:
        -:12794:**Example**
        -:12795:
        -:12796:```c
        -:12797:{
        -:12798:  jerry_typedarray_type_t expected_type = JERRY_TYPEDARRAY_UINT32;
        -:12799:  jerry_value_t typedarray = jerry_create_typedarray (expected_klass, 25);
        -:12800:
        -:12801:  jerry_typedarray_type_t type = jerry_get_typedarray_type (typedarray);
        -:12802:
        -:12803:  // 'type' is now JERRY_TYPEDARRAY_UINT32
        -:12804:
        -:12805:  jerry_release_value (typedarray);
        -:12806:}
        -:12807:```
        -:12808:
        -:12809:**See also**
        -:12810:
        -:12811:- [jerry_create_typedarray](#jerry_create_typedarray)
        -:12812:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -:12813:
        -:12814:
        -:12815:## jerry_get_typedarray_length
        -:12816:
        -:12817:**Summary**
        -:12818:
        -:12819:Get the element count of the TypedArray as specified during creation.
        -:12820:
        -:12821:This is not the same as the byteLength property of a TypedArray object.
        -:12822:
        -:12823:**Prototype**
        -:12824:
        -:12825:```
        -:12826:jerry_length_t
        -:12827:jerry_get_typedarray_length (jerry_value_t value);
        -:12828:```
        -:12829:
        -:12830:- `value` - TypedArray object to query
        -:12831:- return
        -:12832:  - length (element count) of the TypedArray object
        -:12833:  - 0 if the object is not a TypedArray
        -:12834:
        -:12835:*New in version 2.0*.
        -:12836:
        -:12837:**Example**
        -:12838:
        -:12839:```c
        -:12840:{
        -:12841:  jerry_value_t array = jerry_create_typedarray (JERRY_TYPEDARRAY_INT32, 21);
        -:12842:
        -:12843:  jerry_length_t element_count = jerry_get_typedarray_length (array);
        -:12844:
        -:12845:  // element_count is now 21.
        -:12846:
        -:12847:  jerry_release_value (array);
        -:12848:}
        -:12849:```
        -:12850:
        -:12851:**See also**
        -:12852:
        -:12853:- [jerry_create_typedarray](#jerry_create_typedarray)
        -:12854:
        -:12855:
        -:12856:## jerry_get_typedarray_buffer
        -:12857:
        -:12858:**Summary**
        -:12859:
        -:12860:Get the ArrayBuffer object used by a TypedArray object.
        -:12861:Additionally returns the byteLength and byteOffset properties
        -:12862:of the TypedArray object.
        -:12863:
        -:12864:For the returned ArrayBuffer the [jerry_release_value](#jerry_release_value)
        -:12865:must be called.
        -:12866:
        -:12867:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:12868:is no longer needed.
        -:12869:
        -:12870:**Prototype**
        -:12871:
        -:12872:```c
        -:12873:jerry_value_t
        -:12874:jerry_get_typedarray_buffer (jerry_value_t value,
        -:12875:                             jerry_length_t *byteOffset,
        -:12876:                             jerry_length_t *byteLength);
        -:12877:```
        -:12878:
        -:12879:- `value` - TypedArray to get the ArrayBuffer from
        -:12880:- `byteOffset` - (Optional) returns the start offset of the ArrayBuffer for the TypedArray
        -:12881:- `byteLength` - (Optional) returns the number of bytes used from the ArrayBuffer for the TypedArray
        -:12882:- return
        -:12883:  - TypedArray object's underlying ArrayBuffer object
        -:12884:  - TypeError if the `value` is not a TypedArray object
        -:12885:
        -:12886:*New in version 2.0*.
        -:12887:
        -:12888:**Example**
        -:12889:
        -:12890:```c
        -:12891:{
        -:12892:  jerry_value_t array = jerry_create_typedarray (JERRY_TYPEDARRAY_INT16, 11);
        -:12893:
        -:12894:  jerry_length_t byteLength = 0;
        -:12895:  jerry_length_t byteOffset = 0;
        -:12896:  jerry_value_t buffer = jerry_get_typedarray_buffer (array, &byteOffset, &byteLength);
        -:12897:
        -:12898:  // buffer is an ArrayBuffer object and ArrayBuffer operations can be performed on it
        -:12899:  // byteLength is 11 * 2  (2 as the TypedArray stores Int16 that is 2 byte elements)
        -:12900:  // byteOffset is 0
        -:12901:
        -:12902:  jerry_release_value (buffer);
        -:12903:  jerry_release_value (array);
        -:12904:}
        -:12905:```
        -:12906:
        -:12907:**See also**
        -:12908:
        -:12909:- [jerry_create_typedarray](#jerry_create_typedarray)
        -:12910:
        -:12911:# JSON functions
        -:12912:
        -:12913:## jerry_json_parse
        -:12914:
        -:12915:**Summary**
        -:12916:
        -:12917:Parses a JSON string creating a JavaScript value. The behaviour is equivalent with
        -:12918:the "JSON.parse(string)" JS call.
        -:12919:
        -:12920:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:12921:is no longer needed.
        -:12922:
        -:12923:**Prototype**
        -:12924:
        -:12925:```c
        -:12926:jerry_value_t
        -:12927:jerry_json_parse (const jerry_char_t *string_p,
        -:12928:                  jerry_size_t string_size);
        -:12929:```
        -:12930:
        -:12931:- `string_p` - pointer to a JSON string.
        -:12932:- `string_size` - size of the string.
        -:12933:- return
        -:12934:  - `jerry_value_t` containing a JavaScript value.
        -:12935:  - Error value in case of any parse error.
        -:12936:
        -:12937:*New in version 2.0*.
        -:12938:
        -:12939:**Example**
        -:12940:
        -:12941:[doctest]: # ()
        -:12942:
        -:12943:```c
        -:12944:#include "jerryscript.h"
        -:12945:
        -:12946:int
    #####:12947:main (void)
        -:12948:{
        -:12949:  /* Initialize engine */
    #####:12950:  jerry_init (JERRY_INIT_EMPTY);
        -:12951:
    #####:12952:  const jerry_char_t data[] = "{\"name\": \"John\", \"age\": 5}";
    #####:12953:  jerry_value_t obj = jerry_json_parse (data, sizeof (data) - 1);
        -:12954:
        -:12955:  /* "obj" now conatins and object created from the "data" JSON string. */
        -:12956:
    #####:12957:  jerry_release_value (obj);
        -:12958:
        -:12959:  /* Cleanup engine */
    #####:12960:  jerry_cleanup ();
        -:12961:
        -:12962:  return 0;
        -:12963:}
        -:12964:```
        -:12965:
        -:12966:## jerry_json_stringify
        -:12967:
        -:12968:**Summary**
        -:12969:
        -:12970:Create a JSON string value from a JavaScript value. The behaviour is equivalent with
        -:12971:the "JSON.stringify(input_value)" JS call.
        -:12972:
        -:12973:*Note*: Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:12974:is no longer needed.
        -:12975:
        -:12976:**Prototype**
        -:12977:
        -:12978:```c
        -:12979:jerry_value_t
        -:12980:jerry_json_stringify (const jerry_value_t input_value);
        -:12981:```
        -:12982:
        -:12983:- `input_value` - a `jerry_value_t` to stringify.
        -:12984:- return
        -:12985:  - `jerry_value_t` containing a JSON string.
        -:12986:  - Error value in case of any stringification error.
        -:12987:
        -:12988:*New in version 2.0*.
        -:12989:
        -:12990:**Example**
        -:12991:
        -:12992:[doctest]: # ()
        -:12993:
        -:12994:```c
        -:12995:#include "jerryscript.h"
        -:12996:
        -:12997:int
    #####:12998:main (void)
        -:12999:{
        -:13000:  /* Initialize engine */
    #####:13001:  jerry_init (JERRY_INIT_EMPTY);
        -:13002:
    #####:13003:  jerry_value_t obj = jerry_create_object ();
        -:13004:  {
    #####:13005:    jerry_value_t key = jerry_create_string ((const jerry_char_t *) "name");
    #####:13006:    jerry_value_t value = jerry_create_string ((const jerry_char_t *) "John");
    #####:13007:    jerry_release_value (jerry_set_property (obj, key, value));
    #####:13008:    jerry_release_value (key);
    #####:13009:    jerry_release_value (value);
        -:13010:  }
        -:13011:
    #####:13012:  jerry_value_t stringified = jerry_json_stringify (obj);
        -:13013:
        -:13014:  /* "stringified" now contains a JSON string */
        -:13015:
    #####:13016:  jerry_release_value (stringified);
    #####:13017:  jerry_release_value (obj);
        -:13018:
        -:13019:  /* Cleanup engine */
    #####:13020:  jerry_cleanup ();
        -:13021:
        -:13022:  return 0;
        -:13023:}
        -:13024:```
        -:13025:
        -:13026:# Container Functions
        -:13027:
        -:13028:## jerry_get_array_from_container
        -:13029:
        -:13030:**Summary**
        -:13031:
        -:13032:Return a new array containing elements from a Container, or a Container Iterator. Sets the is_key_value_p to true.
        -:13033:if the container object contains key-value structure and false if not.
        -:13034:
        -:13035:*Notes*
        -:13036:- The return value will be an empty array if the Map/Set or Iterator object was empty or finished.
        -:13037:- This API function depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -:13038:  runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -:13039:  feature enum values.
        -:13040:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:13041:- The es.next profile enables this by default.
        -:13042:
        -:13043:*New in version [[NEXT_RELEASE]]*.
        -:13044:
        -:13045:**Prototype**
        -:13046:
        -:13047:```c
        -:13048:jerry_value_t
        -:13049:jerry_get_array_from_container(jerry_value_t value,
        -:13050:                               bool *is_key_value_p);
        -:13051:```
        -:13052:
        -:13053:- `value` - Map/Set or iterator object
        -:13054:- `is_key_value` - Will be set to `true` if the given container has key-value pairs, `false` otherwise.
        -:13055:- return value
        -:13056:  - jerry_value_t containing an array of values from the Map/Set or iterator object
        -:13057:  - Error if the `value` is nor a Container or a Container Iterator.
        -:13058:  - `undefined` if the `value` is undefined/null.
        -:13059:**Example**
        -:13060:
        -:13061:[doctest]: # ()
        -:13062:
        -:13063:```c
        -:13064:#include "jerryscript.h"
        -:13065:int
    #####:13066:main (void)
        -:13067:{
    #####:13068:  jerry_init (JERRY_INIT_EMPTY);
        -:13069:
    #####:13070:  jerry_char_t src[] = "var map = new Map(); map.set(1,2); map.entries()";
    #####:13071:  jerry_value_t iterable = jerry_eval (src, sizeof (src) - 1, JERRY_PARSE_NO_OPTS);
        -:13072:
    #####:13073:  bool is_key_value_container = false;
    #####:13074:  jerry_value_t buffer_from_map = jerry_get_array_from_container (iterable, &is_key_value_container);
        -:13075:
        -:13076:  /*
        -:13077:    The buffer_from_map contains two elements: 1 and 2, which is the key/value pair of the only item in the set.
        -:13078:    is_key_value set to true, as the original is a key-value structure (a Map Iterator)
        -:13079:  */
        -:13080:
    #####:13081:  jerry_release_value (iterable);
    #####:13082:  jerry_release_value (buffer_from_map);
        -:13083:
    #####:13084:  jerry_cleanup ();
        -:13085:
        -:13086:  return 0;
        -:13087:}
        -:13088:```
        -:13089:
        -:13090:**See also**
        -:13091:
        -:13092:- [jerry_create_container](#jerry_create_container)
        -:13093:- [jerry_container_type_t](#jerry_container_type_t)
        -:13094:
        -:13095:
        -:13096:## jerry_container_operation
        -:13097:
        -:13098:**Summary**
        -:13099:
        -:13100:Perform container operation on the given operands (add, delete, set, etc.).
        -:13101:
        -:13102:*Note*:
        -:13103:- Returned value must be freed with [jerry_release_value](#jerry_release_value) when it
        -:13104:  is no longer needed.
        -:13105:- This API function depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -:13106:  runtime with the `JERRY_FEATURE_MAP` , `JERRY_FEATURE_SET` , `JERRY_FEATURE_WEAKMAP` , `JERRY_FEATURE_WEAKSET`
        -:13107:  feature enum values.
        -:13108:  see: [jerry_is_feature_enabled](#jerry_is_feature_enabled).
        -:13109:- The es.next profile enables this by default.
        -:13110:
        -:13111:**Prototype**
        -:13112:
        -:13113:```c
        -:13114:jerry_value_t
        -:13115:jerry_container_operation (jerry_container_operation_t operation,
        -:13116:                           jerry_value_t container,
        -:13117:                           jerry_value_t *arguments,
        -:13118:                           uint32_t arguments_number)
        -:13119:```
        -:13120:
        -:13121: - `operation` - container operation
        -:13122: - `container` - this value
        -:13123: - `arguments` - array of arguments
        -:13124: - `arguments_number` - number of arguments
        -:13125: - result if the operation is successful
        -:13126: - error, otherwise
        -:13127:
        -:13128:*New in version [[NEXT_RELEASE]]*.
        -:13129:
        -:13130:**Example**
        -:13131:
        -:13132:[doctest]: # ()
        -:13133:
        -:13134:```c
        -:13135:#include "jerryscript.h"
        -:13136:
        -:13137:int
    #####:13138:main (void)
        -:13139:{
    #####:13140:  jerry_init (JERRY_INIT_EMPTY);
        -:13141:
    #####:13142:  jerry_value_t map = jerry_create_container (JERRY_CONTAINER_TYPE_MAP, NULL, 0);
    #####:13143:  jerry_value_t key_str = jerry_create_string ((jerry_char_t *) "number");
    #####:13144:  jerry_value_t number = jerry_create_number (10);
    #####:13145:  jerry_value_t args[2] = {key_str, number};
        -:13146:
    #####:13147:  jerry_value_t result = jerry_container_operation (JERRY_CONTAINER_OP_SET, map, args, 2);
    #####:13148:  jerry_release_value (result);
        -:13149:
    #####:13150:  result = jerry_container_operation (JERRY_CONTAINER_OP_SIZE, map, NULL, 0);
    #####:13151:  jerry_release_value (result);
        -:13152:
    #####:13153:  result = jerry_container_operation (JERRY_CONTAINER_OP_CLEAR, map, NULL, 0);
    #####:13154:  jerry_release_value (result);
        -:13155:
    #####:13156:  jerry_release_value (map);
    #####:13157:  jerry_release_value (key_str);
    #####:13158:  jerry_release_value (number);
        -:13159:
    #####:13160:  jerry_cleanup ();
        -:13161:  return 0;
        -:13162:}
        -:13163:```
        -:13164:
        -:13165:**See also**
        -:13166:
        -:13167:- [jerry_create_container](#jerry_create_container)
        -:13168:- [jerry_container_type_t](#jerry_container_type_t)
