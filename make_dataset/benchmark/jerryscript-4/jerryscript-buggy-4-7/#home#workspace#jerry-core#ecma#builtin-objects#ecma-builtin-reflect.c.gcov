        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-reflect.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-array-object.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-builtin-function-prototype.h"
        -:   19:#include "ecma-iterator-object.h"
        -:   20:#include "ecma-builtin-helpers.h"
        -:   21:#include "ecma-builtin-object.h"
        -:   22:#include "ecma-exceptions.h"
        -:   23:#include "ecma-function-object.h"
        -:   24:#include "ecma-gc.h"
        -:   25:#include "ecma-proxy-object.h"
        -:   26:#include "jcontext.h"
        -:   27:
        -:   28:#if JERRY_BUILTIN_REFLECT
        -:   29:
        -:   30:#define ECMA_BUILTINS_INTERNAL
        -:   31:#include "ecma-builtins-internal.h"
        -:   32:
        -:   33:/**
        -:   34: * This object has a custom dispatch function.
        -:   35: */
        -:   36:#define BUILTIN_CUSTOM_DISPATCH
        -:   37:
        -:   38:/**
        -:   39: * List of built-in routine identifiers.
        -:   40: */
        -:   41:enum
        -:   42:{
        -:   43:  ECMA_REFLECT_OBJECT_ROUTINE_START = 0,
        -:   44:  ECMA_REFLECT_OBJECT_GET, /* ECMA-262 v6, 26.1.6 */
        -:   45:  ECMA_REFLECT_OBJECT_SET, /* ECMA-262 v6, 26.1.13 */
        -:   46:  ECMA_REFLECT_OBJECT_HAS, /* ECMA-262 v6, 26.1.9 */
        -:   47:  ECMA_REFLECT_OBJECT_DELETE_PROPERTY, /* ECMA-262 v6, 26.1.4 */
        -:   48:  ECMA_REFLECT_OBJECT_CONSTRUCT, /* ECMA-262, 26.1.2 */
        -:   49:  ECMA_REFLECT_OBJECT_OWN_KEYS, /* ECMA-262 v6, 26.1.11 */
        -:   50:  ECMA_REFLECT_OBJECT_GET_PROTOTYPE_OF, /* ECMA-262 v6, 26.1.8 */
        -:   51:  ECMA_REFLECT_OBJECT_SET_PROTOTYPE_OF, /* ECMA-262 v6, 26.1.14 */
        -:   52:  ECMA_REFLECT_OBJECT_APPLY, /* ECMA-262 v6, 26.1.1 */
        -:   53:  ECMA_REFLECT_OBJECT_DEFINE_PROPERTY, /* ECMA-262 v6, 26.1.3 */
        -:   54:  ECMA_REFLECT_OBJECT_GET_OWN_PROPERTY_DESCRIPTOR, /* ECMA-262 v6, 26.1.7 */
        -:   55:  ECMA_REFLECT_OBJECT_IS_EXTENSIBLE, /* ECMA-262 v6, 26.1.10 */
        -:   56:  ECMA_REFLECT_OBJECT_PREVENT_EXTENSIONS, /* ECMA-262 v6, 26.1.12 */
        -:   57:};
        -:   58:
        -:   59:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-reflect.inc.h"
        -:   60:#define BUILTIN_UNDERSCORED_ID reflect
        -:   61:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   62:
        -:   63:/** \addtogroup ecma ECMA
        -:   64: * @{
        -:   65: *
        -:   66: * \addtogroup ecmabuiltins
        -:   67: * @{
        -:   68: *
        -:   69: * \addtogroup object ECMA Reflect object built-in
        -:   70: * @{
        -:   71: */
        -:   72:
        -:   73:/**
        -:   74: * Dispatcher for the built-in's routines.
        -:   75: *
        -:   76: * @return ecma value
        -:   77: *         Returned value must be freed with ecma_free_value.
        -:   78: */
        -:   79:ecma_value_t
    #####:   80:ecma_builtin_reflect_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:   81:                                       ecma_value_t this_arg, /**< 'this' argument value */
        -:   82:                                       const ecma_value_t arguments_list[], /**< list of arguments
        -:   83:                                                                             *   passed to routine */
        -:   84:                                       uint32_t arguments_number) /**< length of arguments' list */
        -:   85:{
        -:   86:  JERRY_UNUSED (this_arg);
        -:   87:
    #####:   88:  if (builtin_routine_id < ECMA_REFLECT_OBJECT_CONSTRUCT)
        -:   89:  {
        -:   90:    /* 1. */
    #####:   91:    if (arguments_number == 0 || !ecma_is_value_object (arguments_list[0]))
        -:   92:    {
    #####:   93:      return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_argument_is_not_an_object));
        -:   94:    }
        -:   95:
        -:   96:    /* 2. */
    #####:   97:    ecma_string_t *name_str_p = ecma_op_to_property_key (arguments_list[1]);
        -:   98:
        -:   99:    /* 3. */
    #####:  100:    if (name_str_p == NULL)
        -:  101:    {
    #####:  102:      return ECMA_VALUE_ERROR;
        -:  103:    }
        -:  104:
        -:  105:    ecma_value_t ret_value;
    #####:  106:    ecma_object_t *target_p = ecma_get_object_from_value (arguments_list[0]);
    #####:  107:    switch (builtin_routine_id)
        -:  108:    {
    #####:  109:      case ECMA_REFLECT_OBJECT_GET:
        -:  110:      {
    #####:  111:        ecma_value_t receiver = arguments_list[0];
        -:  112:
        -:  113:        /* 4. */
    #####:  114:        if (arguments_number > 2)
        -:  115:        {
    #####:  116:          receiver = arguments_list[2];
        -:  117:        }
        -:  118:
    #####:  119:        ret_value = ecma_op_object_get_with_receiver (target_p, name_str_p, receiver);
    #####:  120:        break;
        -:  121:      }
        -:  122:
    #####:  123:      case ECMA_REFLECT_OBJECT_HAS:
        -:  124:      {
    #####:  125:        ret_value = ecma_op_object_has_property (target_p, name_str_p);
    #####:  126:        break;
        -:  127:      }
        -:  128:
    #####:  129:      case ECMA_REFLECT_OBJECT_DELETE_PROPERTY:
        -:  130:      {
    #####:  131:        ret_value = ecma_op_object_delete (target_p, name_str_p, false);
    #####:  132:        break;
        -:  133:      }
        -:  134:
    #####:  135:      default:
        -:  136:      {
    #####:  137:        JERRY_ASSERT (builtin_routine_id == ECMA_REFLECT_OBJECT_SET);
        -:  138:
    #####:  139:        ecma_value_t receiver = arguments_list[0];
        -:  140:
    #####:  141:        if (arguments_number > 3)
        -:  142:        {
    #####:  143:          receiver = arguments_list[3];
        -:  144:        }
        -:  145:
    #####:  146:        ret_value = ecma_op_object_put_with_receiver (target_p, name_str_p, arguments_list[2], receiver, false);
    #####:  147:        break;
        -:  148:      }
        -:  149:    }
        -:  150:
    #####:  151:    ecma_deref_ecma_string (name_str_p);
    #####:  152:    return ret_value;
        -:  153:  }
        -:  154:
    #####:  155:  if (builtin_routine_id == ECMA_REFLECT_OBJECT_OWN_KEYS)
        -:  156:  {
        -:  157:    /* 1. */
    #####:  158:    if (arguments_number == 0 || !ecma_is_value_object (arguments_list[0]))
        -:  159:    {
    #####:  160:      return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_argument_is_not_an_object));
        -:  161:    }
        -:  162:
    #####:  163:    ecma_object_t *target_p = ecma_get_object_from_value (arguments_list[0]);
        -:  164:
        -:  165:    /* 2. */
    #####:  166:    ecma_collection_t *prop_names = ecma_op_object_own_property_keys (target_p, JERRY_PROPERTY_FILTER_ALL);
        -:  167:
        -:  168:#if JERRY_BUILTIN_PROXY
    #####:  169:    if (prop_names == NULL)
        -:  170:    {
    #####:  171:      return ECMA_VALUE_ERROR;
        -:  172:    }
        -:  173:#endif /* JERRY_BUILTIN_PROXY */
        -:  174:
        -:  175:    /* 3. */
    #####:  176:    return ecma_op_new_array_object_from_collection (prop_names, false);
        -:  177:  }
        -:  178:
    #####:  179:  if (builtin_routine_id == ECMA_REFLECT_OBJECT_CONSTRUCT)
        -:  180:  {
        -:  181:    /* 1. */
    #####:  182:    if (arguments_number < 1 || !ecma_is_constructor (arguments_list[0]))
        -:  183:    {
    #####:  184:      return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_target_is_not_a_constructor));
        -:  185:    }
        -:  186:
    #####:  187:    ecma_object_t *target_p = ecma_get_object_from_value (arguments_list[0]);
        -:  188:
        -:  189:    /* 2. */
    #####:  190:    ecma_object_t *new_target_p = target_p;
        -:  191:
    #####:  192:    if (arguments_number > 2)
        -:  193:    {
        -:  194:      /* 3. */
    #####:  195:      if (!ecma_is_constructor (arguments_list[2]))
        -:  196:      {
    #####:  197:        return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_target_is_not_a_constructor));
        -:  198:      }
        -:  199:
    #####:  200:      new_target_p = ecma_get_object_from_value (arguments_list[2]);
        -:  201:    }
        -:  202:
        -:  203:    /* 4. */
    #####:  204:    if (arguments_number < 2)
        -:  205:    {
    #####:  206:      return ecma_raise_type_error (ECMA_ERR_MSG ("Reflect.construct expects an object as second argument"));
        -:  207:    }
        -:  208:
    #####:  209:    ecma_collection_t *coll_p = ecma_op_create_list_from_array_like (arguments_list[1], false);
        -:  210:
    #####:  211:    if (coll_p == NULL)
        -:  212:    {
    #####:  213:      return ECMA_VALUE_ERROR;
        -:  214:    }
        -:  215:
    #####:  216:    ecma_value_t ret_value = ecma_op_function_construct (target_p,
        -:  217:                                                         new_target_p,
    #####:  218:                                                         coll_p->buffer_p,
        -:  219:                                                         coll_p->item_count);
        -:  220:
    #####:  221:    ecma_collection_free (coll_p);
    #####:  222:    return ret_value;
        -:  223:  }
        -:  224:
    #####:  225:  if (!ecma_is_value_object (arguments_list[0]))
        -:  226:  {
    #####:  227:    return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_argument_is_not_an_object));
        -:  228:  }
        -:  229:
    #####:  230:  switch (builtin_routine_id)
        -:  231:  {
    #####:  232:    case ECMA_REFLECT_OBJECT_GET_PROTOTYPE_OF:
        -:  233:    {
    #####:  234:      return ecma_builtin_object_object_get_prototype_of (ecma_get_object_from_value (arguments_list[0]));
        -:  235:    }
    #####:  236:    case ECMA_REFLECT_OBJECT_SET_PROTOTYPE_OF:
        -:  237:    {
    #####:  238:      if (!ecma_is_value_object (arguments_list[1]) && !ecma_is_value_null (arguments_list[1]))
        -:  239:      {
    #####:  240:        return ecma_raise_type_error (ECMA_ERR_MSG ("Prototype is neither object nor null"));
        -:  241:      }
        -:  242:
    #####:  243:      ecma_object_t *obj_p = ecma_get_object_from_value (arguments_list[0]);
        -:  244:      ecma_value_t status;
        -:  245:
        -:  246:#if JERRY_BUILTIN_PROXY
    #####:  247:      if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  248:      {
    #####:  249:        status = ecma_proxy_object_set_prototype_of (obj_p, arguments_list[1]);
        -:  250:      }
        -:  251:      else
        -:  252:#endif /* JERRY_BUILTIN_PROXY */
        -:  253:      {
    #####:  254:        status = ecma_op_ordinary_object_set_prototype_of (obj_p, arguments_list[1]);
        -:  255:      }
        -:  256:
    #####:  257:      return status;
        -:  258:    }
    #####:  259:    case ECMA_REFLECT_OBJECT_APPLY:
        -:  260:    {
    #####:  261:      if (!ecma_op_is_callable (arguments_list[0]))
        -:  262:      {
    #####:  263:        return ecma_raise_type_error (ECMA_ERR_MSG ("Argument 'this' is not a function"));
        -:  264:      }
        -:  265:
    #####:  266:      ecma_object_t *func_obj_p = ecma_get_object_from_value (arguments_list[0]);
    #####:  267:      return ecma_builtin_function_prototype_object_apply (func_obj_p, arguments_list[1], arguments_list[2]);
        -:  268:    }
    #####:  269:    case ECMA_REFLECT_OBJECT_DEFINE_PROPERTY:
        -:  270:    {
    #####:  271:      ecma_object_t *obj_p = ecma_get_object_from_value (arguments_list[0]);
    #####:  272:      ecma_string_t *name_str_p = ecma_op_to_property_key (arguments_list[1]);
        -:  273:
    #####:  274:      if (name_str_p == NULL)
        -:  275:      {
    #####:  276:        return ECMA_VALUE_ERROR;
        -:  277:      }
        -:  278:
    #####:  279:      ecma_property_descriptor_t prop_desc;
    #####:  280:      ecma_value_t conv_result = ecma_op_to_property_descriptor (arguments_list[2], &prop_desc);
        -:  281:
    #####:  282:      if (ECMA_IS_VALUE_ERROR (conv_result))
        -:  283:      {
    #####:  284:        ecma_deref_ecma_string (name_str_p);
    #####:  285:        return conv_result;
        -:  286:      }
        -:  287:
    #####:  288:      ecma_value_t result = ecma_op_object_define_own_property (obj_p,
        -:  289:                                                                name_str_p,
        -:  290:                                                                &prop_desc);
        -:  291:
    #####:  292:      ecma_deref_ecma_string (name_str_p);
    #####:  293:      ecma_free_property_descriptor (&prop_desc);
        -:  294:
    #####:  295:      if (ECMA_IS_VALUE_ERROR (result))
        -:  296:      {
    #####:  297:        return result;
        -:  298:      }
        -:  299:
    #####:  300:      bool boolean_result = ecma_op_to_boolean (result);
        -:  301:
    #####:  302:      return ecma_make_boolean_value (boolean_result);
        -:  303:    }
    #####:  304:    case ECMA_REFLECT_OBJECT_GET_OWN_PROPERTY_DESCRIPTOR:
        -:  305:    {
    #####:  306:      ecma_object_t *obj_p = ecma_get_object_from_value (arguments_list[0]);
    #####:  307:      ecma_string_t *name_str_p = ecma_op_to_property_key (arguments_list[1]);
        -:  308:
    #####:  309:      if (name_str_p == NULL)
        -:  310:      {
    #####:  311:        return ECMA_VALUE_ERROR;
        -:  312:      }
        -:  313:
    #####:  314:      ecma_value_t ret_val = ecma_builtin_object_object_get_own_property_descriptor (obj_p, name_str_p);
    #####:  315:      ecma_deref_ecma_string (name_str_p);
    #####:  316:      return ret_val;
        -:  317:    }
    #####:  318:    case ECMA_REFLECT_OBJECT_IS_EXTENSIBLE:
        -:  319:    {
    #####:  320:      ecma_object_t *obj_p = ecma_get_object_from_value (arguments_list[0]);
    #####:  321:      return ecma_builtin_object_object_is_extensible (obj_p);
        -:  322:    }
    #####:  323:    default:
        -:  324:    {
    #####:  325:      JERRY_ASSERT (builtin_routine_id == ECMA_REFLECT_OBJECT_PREVENT_EXTENSIONS);
    #####:  326:      ecma_object_t *obj_p = ecma_get_object_from_value (arguments_list[0]);
        -:  327:
        -:  328:#if JERRY_BUILTIN_PROXY
    #####:  329:      if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  330:      {
    #####:  331:        return ecma_proxy_object_prevent_extensions (obj_p);
        -:  332:      }
        -:  333:#endif /* !JERRY_BUILTIN_PROXY */
        -:  334:
    #####:  335:      ecma_op_ordinary_object_prevent_extensions (obj_p);
        -:  336:
    #####:  337:      return ECMA_VALUE_TRUE;
        -:  338:    }
        -:  339:  }
        -:  340:} /* ecma_builtin_reflect_dispatch_routine */
        -:  341:
        -:  342:/**
        -:  343: * @}
        -:  344: * @}
        -:  345: * @}
        -:  346: */
        -:  347:
        -:  348:#endif /* JERRY_BUILTIN_REFLECT */
