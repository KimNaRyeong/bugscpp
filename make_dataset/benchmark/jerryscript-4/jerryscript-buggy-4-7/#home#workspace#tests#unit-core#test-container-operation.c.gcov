        -:    0:Source:/home/workspace/tests/unit-core/test-container-operation.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "test-common.h"
        -:   18:
        -:   19:int
    #####:   20:main (void)
        -:   21:{
    #####:   22:  jerry_init (JERRY_INIT_EMPTY);
        -:   23:
    #####:   24:  if (!jerry_is_feature_enabled (JERRY_FEATURE_MAP)
    #####:   25:      || !jerry_is_feature_enabled (JERRY_FEATURE_SET)
    #####:   26:      || !jerry_is_feature_enabled (JERRY_FEATURE_WEAKMAP)
    #####:   27:      || !jerry_is_feature_enabled (JERRY_FEATURE_WEAKSET))
        -:   28:  {
    #####:   29:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Containers are disabled!\n");
    #####:   30:    jerry_cleanup ();
    #####:   31:    return 0;
        -:   32:  }
        -:   33:
        -:   34:  // Map container tests
    #####:   35:  jerry_value_t map = jerry_create_container (JERRY_CONTAINER_TYPE_MAP, NULL, 0);
    #####:   36:  TEST_ASSERT (jerry_get_container_type (map) == JERRY_CONTAINER_TYPE_MAP);
        -:   37:
    #####:   38:  jerry_value_t key_str = jerry_create_string ((jerry_char_t *) "number");
    #####:   39:  jerry_value_t number = jerry_create_number (10);
    #####:   40:  jerry_value_t args[2] = {key_str, number};
    #####:   41:  jerry_value_t result = jerry_container_operation (JERRY_CONTAINER_OP_SET, map, args, 2);
    #####:   42:  TEST_ASSERT (!jerry_value_is_error (result));
    #####:   43:  jerry_release_value (result);
        -:   44:
    #####:   45:  result = jerry_container_operation (JERRY_CONTAINER_OP_GET, map, &key_str, 1);
    #####:   46:  TEST_ASSERT (jerry_get_number_value (result) == 10);
    #####:   47:  jerry_release_value (result);
        -:   48:
    #####:   49:  result = jerry_container_operation (JERRY_CONTAINER_OP_HAS, map, &key_str, 1);
    #####:   50:  TEST_ASSERT (jerry_value_is_true (result));
    #####:   51:  jerry_release_value (result);
        -:   52:
    #####:   53:  result = jerry_container_operation (JERRY_CONTAINER_OP_SIZE, map, NULL, 0);
    #####:   54:  TEST_ASSERT (jerry_get_number_value (result) == 1);
    #####:   55:  jerry_release_value (result);
        -:   56:
    #####:   57:  key_str = jerry_create_string ((jerry_char_t *) "number2");
    #####:   58:  number = jerry_create_number (11);
    #####:   59:  jerry_value_t args2[2] = {key_str, number};
    #####:   60:  result = jerry_container_operation (JERRY_CONTAINER_OP_SET, map, args2, 2);
    #####:   61:  jerry_release_value (result);
        -:   62:
    #####:   63:  result = jerry_container_operation (JERRY_CONTAINER_OP_SIZE, map, NULL, 0);
    #####:   64:  TEST_ASSERT (jerry_get_number_value (result) == 2);
    #####:   65:  jerry_release_value (result);
        -:   66:
    #####:   67:  result = jerry_container_operation (JERRY_CONTAINER_OP_DELETE, map, &key_str, 1);
    #####:   68:  TEST_ASSERT (jerry_value_is_true (result));
    #####:   69:  jerry_release_value (result);
        -:   70:
    #####:   71:  result = jerry_container_operation (JERRY_CONTAINER_OP_SIZE, map, NULL, 0);
    #####:   72:  TEST_ASSERT (jerry_get_number_value (result) == 1);
    #####:   73:  jerry_release_value (result);
        -:   74:
    #####:   75:  result = jerry_container_operation (JERRY_CONTAINER_OP_CLEAR, map, NULL, 0);
    #####:   76:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:   77:  jerry_release_value (result);
        -:   78:
    #####:   79:  result = jerry_container_operation (JERRY_CONTAINER_OP_SIZE, map, NULL, 0);
    #####:   80:  TEST_ASSERT (jerry_get_number_value (result) == 0);
    #####:   81:  jerry_release_value (result);
        -:   82:
        -:   83:  // Set container tests
    #####:   84:  number = jerry_create_number (10);
    #####:   85:  jerry_value_t set = jerry_create_container (JERRY_CONTAINER_TYPE_SET, NULL, 0);
    #####:   86:  TEST_ASSERT (jerry_get_container_type (set) == JERRY_CONTAINER_TYPE_SET);
    #####:   87:  result = jerry_container_operation (JERRY_CONTAINER_OP_ADD, set, &number, 1);
    #####:   88:  TEST_ASSERT (!jerry_value_is_error (result));
    #####:   89:  jerry_release_value (result);
        -:   90:
    #####:   91:  result = jerry_container_operation (JERRY_CONTAINER_OP_HAS, set, &number, 1);
    #####:   92:  TEST_ASSERT (jerry_value_is_true (result));
    #####:   93:  jerry_release_value (result);
        -:   94:
    #####:   95:  result = jerry_container_operation (JERRY_CONTAINER_OP_SIZE, set, NULL, 0);
    #####:   96:  TEST_ASSERT (jerry_get_number_value (result) == 1);
    #####:   97:  jerry_release_value (result);
        -:   98:
    #####:   99:  number = jerry_create_number (11);
    #####:  100:  result = jerry_container_operation (JERRY_CONTAINER_OP_ADD, set, &number, 1);
    #####:  101:  jerry_release_value (result);
        -:  102:
    #####:  103:  result = jerry_container_operation (JERRY_CONTAINER_OP_SIZE, set, NULL, 0);
    #####:  104:  TEST_ASSERT (jerry_get_number_value (result) == 2);
    #####:  105:  jerry_release_value (result);
        -:  106:
    #####:  107:  result = jerry_container_operation (JERRY_CONTAINER_OP_DELETE, set, &number, 1);
    #####:  108:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  109:  jerry_release_value (result);
        -:  110:
    #####:  111:  result = jerry_container_operation (JERRY_CONTAINER_OP_SIZE, set, NULL, 0);
    #####:  112:  TEST_ASSERT (jerry_get_number_value (result) == 1);
    #####:  113:  jerry_release_value (result);
        -:  114:
    #####:  115:  result = jerry_container_operation (JERRY_CONTAINER_OP_CLEAR, set, NULL, 0);
    #####:  116:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  117:  jerry_release_value (result);
        -:  118:
    #####:  119:  result = jerry_container_operation (JERRY_CONTAINER_OP_SIZE, set, NULL, 0);
    #####:  120:  TEST_ASSERT (jerry_get_number_value (result) == 0);
    #####:  121:  jerry_release_value (result);
    #####:  122:  jerry_release_value (set);
        -:  123:
        -:  124:  // WeakMap contanier tests
    #####:  125:  number = jerry_create_number (10);
    #####:  126:  jerry_value_t weak_map = jerry_create_container (JERRY_CONTAINER_TYPE_WEAKMAP, NULL, 0);
    #####:  127:  TEST_ASSERT (jerry_get_container_type (weak_map) == JERRY_CONTAINER_TYPE_WEAKMAP);
        -:  128:
    #####:  129:  jerry_value_t obj = jerry_create_object ();
    #####:  130:  number = jerry_create_number (10);
    #####:  131:  jerry_value_t args4[2] = {obj, number};
    #####:  132:  result = jerry_container_operation (JERRY_CONTAINER_OP_SET, weak_map, args4, 2);
    #####:  133:  TEST_ASSERT (!jerry_value_is_error (result));
    #####:  134:  jerry_release_value (result);
        -:  135:
    #####:  136:  result = jerry_container_operation (JERRY_CONTAINER_OP_HAS, weak_map, &obj, 1);
    #####:  137:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  138:  jerry_release_value (result);
        -:  139:
    #####:  140:  result = jerry_container_operation (JERRY_CONTAINER_OP_DELETE, weak_map, &obj, 1);
    #####:  141:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  142:  jerry_release_value (result);
    #####:  143:  jerry_release_value (weak_map);
        -:  144:
        -:  145:  // WeakSet contanier tests,
    #####:  146:  jerry_value_t weak_set = jerry_create_container (JERRY_CONTAINER_TYPE_WEAKSET, NULL, 0);
    #####:  147:  TEST_ASSERT (jerry_get_container_type (weak_set) == JERRY_CONTAINER_TYPE_WEAKSET);
        -:  148:
    #####:  149:  result = jerry_container_operation (JERRY_CONTAINER_OP_ADD, weak_set, &obj, 1);
    #####:  150:  jerry_release_value (result);
        -:  151:
    #####:  152:  result = jerry_container_operation (JERRY_CONTAINER_OP_HAS, weak_set, &obj, 1);
    #####:  153:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  154:  jerry_release_value (result);
        -:  155:
    #####:  156:  result = jerry_container_operation (JERRY_CONTAINER_OP_DELETE, weak_set, &obj, 1);
    #####:  157:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  158:  jerry_release_value (result);
    #####:  159:  jerry_release_value (weak_set);
        -:  160:
        -:  161:  // container is not a object
    #####:  162:  jerry_value_t empty_val = jerry_create_undefined ();
    #####:  163:  result = jerry_container_operation (JERRY_CONTAINER_OP_SET, empty_val, args, 2);
    #####:  164:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  165:  jerry_release_value (result);
        -:  166:
        -:  167:  // arguments is a error
    #####:  168:  const char * const error_message_p = "Random error.";
    #####:  169:  jerry_value_t error_val = jerry_create_error (JERRY_ERROR_RANGE, (const jerry_char_t *) error_message_p);
    #####:  170:  jerry_value_t args3[2] = { error_val, error_val };
    #####:  171:  result = jerry_container_operation (JERRY_CONTAINER_OP_SET, map, args3, 2);
    #####:  172:  TEST_ASSERT (jerry_value_is_error (result));
    #####:  173:  jerry_release_value (result);
    #####:  174:  jerry_release_value (error_val);
    #####:  175:  jerry_release_value (map);
        -:  176:
    #####:  177:  jerry_release_value (key_str);
    #####:  178:  jerry_release_value (number);
    #####:  179:  jerry_release_value (obj);
    #####:  180:  jerry_cleanup ();
    #####:  181:  return 0;
        -:  182:
        -:  183:} /* main */
