        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-shared-arraybuffer-object.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-shared-arraybuffer-object.h"
        -:   17:#include "ecma-typedarray-object.h"
        -:   18:#include "ecma-objects.h"
        -:   19:#include "ecma-builtins.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-gc.h"
        -:   22:#include "ecma-globals.h"
        -:   23:#include "ecma-helpers.h"
        -:   24:#include "jmem.h"
        -:   25:#include "jcontext.h"
        -:   26:#include "ecma-function-object.h"
        -:   27:
        -:   28:/** \addtogroup ecma ECMA
        -:   29: * @{
        -:   30: *
        -:   31: * \addtogroup ecmasharedarraybufferobject ECMA SharedArrayBuffer object related routines
        -:   32: * @{
        -:   33: */
        -:   34:
        -:   35:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
        -:   36:
        -:   37:/**
        -:   38: * Helper function: create SharedArrayBuffer object based on the array length
        -:   39: *
        -:   40: * The struct of arraybuffer object:
        -:   41: *   ecma_object_t
        -:   42: *   extend_part
        -:   43: *   data buffer
        -:   44: *
        -:   45: * @return ecma_object_t *
        -:   46: */
        -:   47:ecma_object_t *
    #####:   48:ecma_shared_arraybuffer_new_object (uint32_t length) /**< length of the SharedArrayBuffer */
        -:   49:{
    #####:   50:  ecma_object_t *prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_SHARED_ARRAYBUFFER_PROTOTYPE);
    #####:   51:  ecma_object_t *object_p = ecma_create_object (prototype_obj_p,
        -:   52:                                                sizeof (ecma_extended_object_t) + length,
        -:   53:                                                ECMA_OBJECT_TYPE_CLASS);
        -:   54:
    #####:   55:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
    #####:   56:  ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER;
    #####:   57:  ext_object_p->u.cls.u1.array_buffer_flags = ECMA_ARRAYBUFFER_INTERNAL_MEMORY;
    #####:   58:  ext_object_p->u.cls.u3.length = length;
        -:   59:
    #####:   60:  lit_utf8_byte_t *buf = (lit_utf8_byte_t *) (ext_object_p + 1);
    #####:   61:  memset (buf, 0, length);
        -:   62:
    #####:   63:  return object_p;
        -:   64:} /* ecma_shared_arraybuffer_new_object */
        -:   65:
        -:   66:/**
        -:   67: * Helper function: create SharedArrayBuffer object with external buffer backing.
        -:   68: *
        -:   69: * The struct of external arraybuffer object:
        -:   70: *   ecma_object_t
        -:   71: *   extend_part
        -:   72: *   SharedArrayBuffer external info part
        -:   73: *
        -:   74: * @return ecma_object_t *, pointer to the created SharedArrayBuffer object
        -:   75: */
        -:   76:ecma_object_t *
    #####:   77:ecma_shared_arraybuffer_new_object_external (uint32_t length, /**< length of the buffer_p to use */
        -:   78:                                             void *buffer_p, /**< pointer for SharedArrayBuffer's buffer backing */
        -:   79:                                             jerry_value_free_callback_t free_cb) /**< buffer free callback */
        -:   80:{
    #####:   81:  ecma_object_t *prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_SHARED_ARRAYBUFFER_PROTOTYPE);
    #####:   82:  ecma_object_t *object_p = ecma_create_object (prototype_obj_p,
        -:   83:                                                sizeof (ecma_arraybuffer_external_info),
        -:   84:                                                ECMA_OBJECT_TYPE_CLASS);
        -:   85:
    #####:   86:  ecma_arraybuffer_external_info *array_object_p = (ecma_arraybuffer_external_info *) object_p;
    #####:   87:  array_object_p->extended_object.u.cls.type = ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER;
    #####:   88:  array_object_p->extended_object.u.cls.u1.array_buffer_flags = ECMA_ARRAYBUFFER_EXTERNAL_MEMORY;
    #####:   89:  array_object_p->extended_object.u.cls.u3.length = length;
        -:   90:
    #####:   91:  array_object_p->buffer_p = buffer_p;
    #####:   92:  array_object_p->free_cb = free_cb;
        -:   93:
    #####:   94:  return object_p;
        -:   95:} /* ecma_shared_arraybuffer_new_object_external */
        -:   96:
        -:   97:/**
        -:   98: * SharedArrayBuffer object creation operation.
        -:   99: *
        -:  100: * See also: ES11 24.1.1.1
        -:  101: *
        -:  102: * @return ecma value
        -:  103: *         Returned value must be freed with ecma_free_value
        -:  104: */
        -:  105:ecma_value_t
    #####:  106:ecma_op_create_shared_arraybuffer_object (const ecma_value_t *arguments_list_p, /**< list of arguments that
        -:  107:                                                                          *   are passed to String constructor */
        -:  108:                                          uint32_t arguments_list_len) /**< length of the arguments' list */
        -:  109:{
    #####:  110:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  111:
    #####:  112:  ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (JERRY_CONTEXT (current_new_target_p),
        -:  113:                                                                   ECMA_BUILTIN_ID_SHARED_ARRAYBUFFER_PROTOTYPE);
        -:  114:
    #####:  115:  if (proto_p == NULL)
        -:  116:  {
    #####:  117:    return ECMA_VALUE_ERROR;
        -:  118:  }
        -:  119:
    #####:  120:  ecma_number_t length_num = 0;
        -:  121:
    #####:  122:  if (arguments_list_len > 0)
        -:  123:  {
    #####:  124:    if (ecma_is_value_number (arguments_list_p[0]))
        -:  125:    {
    #####:  126:      length_num = ecma_get_number_from_value (arguments_list_p[0]);
        -:  127:    }
        -:  128:    else
        -:  129:    {
    #####:  130:      ecma_value_t to_number_value = ecma_op_to_number (arguments_list_p[0], &length_num);
        -:  131:
    #####:  132:      if (ECMA_IS_VALUE_ERROR (to_number_value))
        -:  133:      {
    #####:  134:        ecma_deref_object (proto_p);
    #####:  135:        return to_number_value;
        -:  136:      }
        -:  137:    }
        -:  138:
    #####:  139:    if (ecma_number_is_nan (length_num))
        -:  140:    {
    #####:  141:      length_num = 0;
        -:  142:    }
        -:  143:
    #####:  144:    const uint32_t maximum_size_in_byte = UINT32_MAX - sizeof (ecma_extended_object_t) - JMEM_ALIGNMENT + 1;
        -:  145:
    #####:  146:    if (length_num <= -1.0 || length_num > (ecma_number_t) maximum_size_in_byte + 0.5)
        -:  147:    {
    #####:  148:      ecma_deref_object (proto_p);
    #####:  149:      return ecma_raise_range_error (ECMA_ERR_MSG ("Invalid Shared ArrayBuffer length"));
        -:  150:    }
        -:  151:  }
        -:  152:
    #####:  153:  uint32_t length_uint32 = ecma_number_to_uint32 (length_num);
    #####:  154:  ecma_object_t *shared_array_buffer = ecma_shared_arraybuffer_new_object (length_uint32);
    #####:  155:  ECMA_SET_NON_NULL_POINTER (shared_array_buffer->u2.prototype_cp, proto_p);
    #####:  156:  ecma_deref_object (proto_p);
        -:  157:
    #####:  158:  return ecma_make_object_value (shared_array_buffer);
        -:  159:} /* ecma_op_create_shared_arraybuffer_object */
        -:  160:
        -:  161:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  162:
        -:  163:/**
        -:  164: * Helper function: check if the target is SharedArrayBuffer
        -:  165: *
        -:  166: * See also: ES11 24.1.1.4
        -:  167: *
        -:  168: * @return true - if value is a SharedArrayBuffer object
        -:  169: *         false - otherwise
        -:  170: */
        -:  171:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:  172:ecma_is_shared_arraybuffer (ecma_value_t target) /**< the target value */
        -:  173:{
        -:  174:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
    #####:  175:  return (ecma_is_value_object (target)
    #####:  176:          && ecma_object_class_is (ecma_get_object_from_value (target), ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER));
        -:  177:#else /* !JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  178:  JERRY_UNUSED (target);
    #####:  179:  return false;
        -:  180:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  181:} /* ecma_is_shared_arraybuffer */
        -:  182:
        -:  183:/**
        -:  184: * Helper function: check if the target is SharedArrayBuffer Object
        -:  185: *
        -:  186: * @return true - if value is a SharedArrayBuffer object
        -:  187: *         false - otherwise
        -:  188: */
        -:  189:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:  190:ecma_object_is_shared_arraybuffer (ecma_object_t *object_p) /**< the target object */
        -:  191:{
        -:  192:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
    #####:  193:  return ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER);
        -:  194:#else /* !JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  195:  JERRY_UNUSED (object_p);
    #####:  196:  return false;
        -:  197:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  198:} /* ecma_object_is_shared_arraybuffer */
        -:  199:
        -:  200:/**
        -:  201: * @}
        -:  202: * @}
        -:  203: */
