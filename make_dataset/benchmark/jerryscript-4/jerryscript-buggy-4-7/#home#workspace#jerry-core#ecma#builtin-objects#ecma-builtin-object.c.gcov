        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-object.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-array-object.h"
        -:   18:#include "ecma-builtin-helpers.h"
        -:   19:#include "ecma-builtins.h"
        -:   20:#include "ecma-conversion.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-objects.h"
        -:   26:#include "ecma-proxy-object.h"
        -:   27:#include "ecma-objects-general.h"
        -:   28:#include "jrt.h"
        -:   29:#include "ecma-builtin-object.h"
        -:   30:#if JERRY_ESNEXT
        -:   31:#include "ecma-iterator-object.h"
        -:   32:#include "ecma-function-object.h"
        -:   33:#include "jcontext.h"
        -:   34:#endif /* JERRY_ESNEXT */
        -:   35:
        -:   36:#define ECMA_BUILTINS_INTERNAL
        -:   37:#include "ecma-builtins-internal.h"
        -:   38:
        -:   39:/**
        -:   40: * This object has a custom dispatch function.
        -:   41: */
        -:   42:#define BUILTIN_CUSTOM_DISPATCH
        -:   43:
        -:   44:/**
        -:   45: * List of built-in routine identifiers.
        -:   46: */
        -:   47:enum
        -:   48:{
        -:   49:  ECMA_OBJECT_ROUTINE_START = 0,
        -:   50:
        -:   51:  ECMA_OBJECT_ROUTINE_CREATE,
        -:   52:  ECMA_OBJECT_ROUTINE_IS,
        -:   53:  ECMA_OBJECT_ROUTINE_SET_PROTOTYPE_OF,
        -:   54:
        -:   55:  /* These should be in this order. */
        -:   56:  ECMA_OBJECT_ROUTINE_DEFINE_PROPERTY,
        -:   57:  ECMA_OBJECT_ROUTINE_DEFINE_PROPERTIES,
        -:   58:
        -:   59:  /* These should be in this order. */
        -:   60:  ECMA_OBJECT_ROUTINE_ASSIGN,
        -:   61:  ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_DESCRIPTOR,
        -:   62:  ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_DESCRIPTORS,
        -:   63:  ECMA_OBJECT_ROUTINE_GET_PROTOTYPE_OF,
        -:   64:  ECMA_OBJECT_ROUTINE_FROM_ENTRIES,
        -:   65:  ECMA_OBJECT_ROUTINE_KEYS,
        -:   66:  ECMA_OBJECT_ROUTINE_VALUES,
        -:   67:  ECMA_OBJECT_ROUTINE_ENTRIES,
        -:   68:
        -:   69:  /* These should be in this order. */
        -:   70:  ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_NAMES,
        -:   71:  ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_SYMBOLS,
        -:   72:
        -:   73:  /* These should be in this order. */
        -:   74:  ECMA_OBJECT_ROUTINE_FREEZE,
        -:   75:  ECMA_OBJECT_ROUTINE_PREVENT_EXTENSIONS,
        -:   76:  ECMA_OBJECT_ROUTINE_SEAL,
        -:   77:
        -:   78:  /* These should be in this order. */
        -:   79:  ECMA_OBJECT_ROUTINE_IS_EXTENSIBLE,
        -:   80:  ECMA_OBJECT_ROUTINE_IS_FROZEN,
        -:   81:  ECMA_OBJECT_ROUTINE_IS_SEALED,
        -:   82:};
        -:   83:
        -:   84:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-object.inc.h"
        -:   85:#define BUILTIN_UNDERSCORED_ID object
        -:   86:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   87:
        -:   88:/** \addtogroup ecma ECMA
        -:   89: * @{
        -:   90: *
        -:   91: * \addtogroup ecmabuiltins
        -:   92: * @{
        -:   93: *
        -:   94: * \addtogroup object ECMA Object object built-in
        -:   95: * @{
        -:   96: */
        -:   97:
        -:   98:/**
        -:   99: * Handle calling [[Call]] of built-in Object object
        -:  100: *
        -:  101: * @return ecma value
        -:  102: */
        -:  103:ecma_value_t
    #####:  104:ecma_builtin_object_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  105:                                   uint32_t arguments_list_len) /**< number of arguments */
        -:  106:{
    #####:  107:  if (arguments_list_len == 0
    #####:  108:      || ecma_is_value_undefined (arguments_list_p[0])
    #####:  109:      || ecma_is_value_null (arguments_list_p[0]))
        -:  110:  {
    #####:  111:    return ecma_make_object_value (ecma_op_create_object_object_noarg ());
        -:  112:  }
        -:  113:
    #####:  114:  return ecma_op_to_object (arguments_list_p[0]);
        -:  115:} /* ecma_builtin_object_dispatch_call */
        -:  116:
        -:  117:/**
        -:  118: * Handle calling [[Construct]] of built-in Object object
        -:  119: *
        -:  120: * @return ecma value
        -:  121: */
        -:  122:ecma_value_t
    #####:  123:ecma_builtin_object_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  124:                                        uint32_t arguments_list_len) /**< number of arguments */
        -:  125:{
        -:  126:#if JERRY_ESNEXT
    #####:  127:  if (JERRY_CONTEXT (current_new_target_p) != ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT))
        -:  128:  {
    #####:  129:    ecma_object_t *prototype_obj_p = ecma_op_get_prototype_from_constructor (JERRY_CONTEXT (current_new_target_p),
        -:  130:                                                                             ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
    #####:  131:    if (JERRY_UNLIKELY (prototype_obj_p == NULL))
        -:  132:    {
    #####:  133:      return ECMA_VALUE_ERROR;
        -:  134:    }
        -:  135:
    #####:  136:    ecma_object_t *object_p = ecma_create_object (prototype_obj_p,
        -:  137:                                                  0,
        -:  138:                                                  ECMA_OBJECT_TYPE_GENERAL);
    #####:  139:    ecma_deref_object (prototype_obj_p);
        -:  140:
    #####:  141:    return ecma_make_object_value (object_p);
        -:  142:  }
        -:  143:#endif /* JERRY_ESNEXT */
    #####:  144:  return ecma_builtin_object_dispatch_call (arguments_list_p, arguments_list_len);
        -:  145:} /* ecma_builtin_object_dispatch_construct */
        -:  146:
        -:  147:/**
        -:  148: * The Object object's 'getPrototypeOf' routine
        -:  149: *
        -:  150: * See also:
        -:  151: *          ECMA-262 v5, 15.2.3.2
        -:  152: *
        -:  153: * @return ecma value
        -:  154: *         Returned value must be freed with ecma_free_value.
        -:  155: */
        -:  156:ecma_value_t
    #####:  157:ecma_builtin_object_object_get_prototype_of (ecma_object_t *obj_p) /**< routine's argument */
        -:  158:{
        -:  159:#if JERRY_BUILTIN_PROXY
    #####:  160:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  161:  {
    #####:  162:    return ecma_proxy_object_get_prototype_of (obj_p);
        -:  163:  }
        -:  164:#endif /* JERRY_BUILTIN_PROXY */
        -:  165:
    #####:  166:  jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (obj_p);
        -:  167:
    #####:  168:  if (proto_cp != JMEM_CP_NULL)
        -:  169:  {
    #####:  170:    ecma_object_t *prototype_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);
    #####:  171:    ecma_ref_object (prototype_p);
    #####:  172:    return ecma_make_object_value (prototype_p);
        -:  173:  }
        -:  174:
    #####:  175:  return ECMA_VALUE_NULL;
        -:  176:} /* ecma_builtin_object_object_get_prototype_of */
        -:  177:
        -:  178:#if JERRY_ESNEXT
        -:  179:/**
        -:  180: * The Object object's 'setPrototypeOf' routine
        -:  181: *
        -:  182: * See also:
        -:  183: *          ES2015 19.1.2.18
        -:  184: *
        -:  185: * @return ecma value
        -:  186: *         Returned value must be freed with ecma_free_value.
        -:  187: */
        -:  188:ecma_value_t
    #####:  189:ecma_builtin_object_object_set_prototype_of (ecma_value_t arg1, /**< routine's first argument */
        -:  190:                                             ecma_value_t arg2) /**< routine's second argument */
        -:  191:{
        -:  192:  /* 1., 2. */
    #####:  193:  if (!ecma_op_require_object_coercible (arg1))
        -:  194:  {
    #####:  195:    return ECMA_VALUE_ERROR;
        -:  196:  }
        -:  197:
        -:  198:  /* 3. */
    #####:  199:  if (!ecma_is_value_object (arg2) && !ecma_is_value_null (arg2))
        -:  200:  {
    #####:  201:    return ecma_raise_type_error (ECMA_ERR_MSG ("Prototype is neither object nor null"));
        -:  202:  }
        -:  203:
        -:  204:  /* 4. */
    #####:  205:  if (!ecma_is_value_object (arg1))
        -:  206:  {
    #####:  207:    return ecma_copy_value (arg1);
        -:  208:  }
        -:  209:
    #####:  210:  ecma_object_t *obj_p = ecma_get_object_from_value (arg1);
        -:  211:  ecma_value_t status;
        -:  212:
        -:  213:  /* 5. */
        -:  214:#if JERRY_BUILTIN_PROXY
    #####:  215:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  216:  {
    #####:  217:    status = ecma_proxy_object_set_prototype_of (obj_p, arg2);
        -:  218:
    #####:  219:    if (ECMA_IS_VALUE_ERROR (status))
        -:  220:    {
    #####:  221:      return status;
        -:  222:    }
        -:  223:  }
        -:  224:  else
        -:  225:  {
        -:  226:#endif /* JERRY_BUILTIN_PROXY */
    #####:  227:    status = ecma_op_ordinary_object_set_prototype_of (obj_p, arg2);
        -:  228:#if JERRY_BUILTIN_PROXY
        -:  229:  }
        -:  230:#endif /* JERRY_BUILTIN_PROXY */
        -:  231:
    #####:  232:  if (ecma_is_value_false (status))
        -:  233:  {
    #####:  234:    return ecma_raise_type_error (ECMA_ERR_MSG ("Cannot set [[Prototype]]"));
        -:  235:  }
        -:  236:
    #####:  237:  JERRY_ASSERT (ecma_is_value_true (status));
    #####:  238:  ecma_ref_object (obj_p);
        -:  239:
    #####:  240:  return arg1;
        -:  241:} /* ecma_builtin_object_object_set_prototype_of */
        -:  242:
        -:  243:/**
        -:  244: * The Object object's set __proto__ routine
        -:  245: *
        -:  246: * See also:
        -:  247: *          ECMA-262 v6, B.2.2.1.2
        -:  248: *
        -:  249: * @return ecma value
        -:  250: *         Returned value must be freed with ecma_free_value.
        -:  251: */
        -:  252:ecma_value_t
    #####:  253:ecma_builtin_object_object_set_proto (ecma_value_t arg1, /**< routine's first argument */
        -:  254:                                      ecma_value_t arg2) /**< routine's second argument */
        -:  255:{
        -:  256:  /* 1., 2. */
    #####:  257:  if (!ecma_op_require_object_coercible (arg1))
        -:  258:  {
    #####:  259:    return ECMA_VALUE_ERROR;
        -:  260:  }
        -:  261:
        -:  262:  /* 3. */
    #####:  263:  if (!ecma_is_value_object (arg2) && !ecma_is_value_null (arg2))
        -:  264:  {
    #####:  265:    return ECMA_VALUE_UNDEFINED;
        -:  266:  }
        -:  267:
        -:  268:  /* 4. */
    #####:  269:  if (!ecma_is_value_object (arg1))
        -:  270:  {
    #####:  271:    return ECMA_VALUE_UNDEFINED;
        -:  272:  }
        -:  273:
    #####:  274:  ecma_object_t *obj_p = ecma_get_object_from_value (arg1);
        -:  275:  ecma_value_t status;
        -:  276:
        -:  277:  /* 5. */
        -:  278:#if JERRY_BUILTIN_PROXY
    #####:  279:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  280:  {
    #####:  281:    status = ecma_proxy_object_set_prototype_of (obj_p, arg2);
        -:  282:
    #####:  283:    if (ECMA_IS_VALUE_ERROR (status))
        -:  284:    {
    #####:  285:      return status;
        -:  286:    }
        -:  287:  }
        -:  288:  else
        -:  289:  {
        -:  290:#endif /* JERRY_BUILTIN_PROXY */
    #####:  291:    status = ecma_op_ordinary_object_set_prototype_of (obj_p, arg2);
        -:  292:#if JERRY_BUILTIN_PROXY
        -:  293:  }
        -:  294:#endif /* JERRY_BUILTIN_PROXY */
        -:  295:
    #####:  296:  if (ecma_is_value_false (status))
        -:  297:  {
    #####:  298:    return ecma_raise_type_error (ECMA_ERR_MSG ("Cannot set [[Prototype]]"));
        -:  299:  }
        -:  300:
    #####:  301:  JERRY_ASSERT (ecma_is_value_true (status));
        -:  302:
    #####:  303:  return ECMA_VALUE_UNDEFINED;
        -:  304:} /* ecma_builtin_object_object_set_proto */
        -:  305:#endif /* JERRY_ESNEXT */
        -:  306:
        -:  307:/**
        -:  308: * SetIntegrityLevel operation
        -:  309: *
        -:  310: * See also:
        -:  311: *          ECMA-262 v6, 7.3.14
        -:  312: *
        -:  313: * @return ECMA_VALUE_ERROR - if the operation raised an error
        -:  314: *         ECMA_VALUE_{TRUE/FALSE} - depends on whether the integrity level has been set sucessfully
        -:  315: */
        -:  316:static ecma_value_t
    #####:  317:ecma_builtin_object_set_integrity_level (ecma_object_t *obj_p, /**< object */
        -:  318:                                         bool is_seal) /**< true - set "sealed"
        -:  319:                                                        *   false - set "frozen" */
        -:  320:{
        -:  321:  /* 3. */
        -:  322:#if JERRY_BUILTIN_PROXY
    #####:  323:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  324:  {
    #####:  325:    ecma_value_t status = ecma_proxy_object_prevent_extensions (obj_p);
        -:  326:
    #####:  327:    if (!ecma_is_value_true (status))
        -:  328:    {
    #####:  329:      return status;
        -:  330:    }
        -:  331:  }
        -:  332:  else
        -:  333:#endif /* JERRY_BUILTIN_PROXY */
        -:  334:  {
    #####:  335:    ecma_op_ordinary_object_prevent_extensions (obj_p);
        -:  336:  }
        -:  337:
        -:  338:  /* 6. */
    #####:  339:  ecma_collection_t *props_p = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_ALL);
        -:  340:
        -:  341:#if JERRY_BUILTIN_PROXY
    #####:  342:  if (props_p == NULL)
        -:  343:  {
    #####:  344:    return ECMA_VALUE_ERROR;
        -:  345:  }
        -:  346:#endif /* JERRY_BUILTIN_PROXY */
        -:  347:
    #####:  348:  ecma_value_t *buffer_p = props_p->buffer_p;
        -:  349:
    #####:  350:  if (is_seal)
        -:  351:  {
        -:  352:    /* 8.a */
    #####:  353:    for (uint32_t i = 0; i < props_p->item_count; i++)
        -:  354:    {
    #####:  355:      ecma_string_t *property_name_p = ecma_get_prop_name_from_value (buffer_p[i]);
        -:  356:
    #####:  357:      ecma_property_descriptor_t prop_desc;
    #####:  358:      ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, property_name_p, &prop_desc);
        -:  359:
        -:  360:#if JERRY_BUILTIN_PROXY
    #####:  361:      if (ECMA_IS_VALUE_ERROR (status))
        -:  362:      {
    #####:  363:        ecma_collection_free (props_p);
    #####:  364:        return ECMA_VALUE_ERROR;
        -:  365:      }
        -:  366:#endif /* JERRY_BUILTIN_PROXY */
        -:  367:
    #####:  368:      if (ecma_is_value_false (status))
        -:  369:      {
    #####:  370:        continue;
        -:  371:      }
        -:  372:
    #####:  373:      prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_CONFIGURABLE;
    #####:  374:      prop_desc.flags |= JERRY_PROP_SHOULD_THROW;
        -:  375:
        -:  376:      /* 8.a.i */
    #####:  377:      ecma_value_t define_own_prop_ret = ecma_op_object_define_own_property (obj_p,
        -:  378:                                                                             property_name_p,
        -:  379:                                                                             &prop_desc);
        -:  380:
    #####:  381:      ecma_free_property_descriptor (&prop_desc);
        -:  382:
        -:  383:      /* 8.a.ii */
    #####:  384:      if (ECMA_IS_VALUE_ERROR (define_own_prop_ret))
        -:  385:      {
    #####:  386:        ecma_collection_free (props_p);
    #####:  387:        return define_own_prop_ret;
        -:  388:      }
        -:  389:
    #####:  390:      ecma_free_value (define_own_prop_ret);
        -:  391:    }
        -:  392:  }
        -:  393:  else
        -:  394:  {
        -:  395:    /* 9.a */
    #####:  396:    for (uint32_t i = 0; i < props_p->item_count; i++)
        -:  397:    {
    #####:  398:      ecma_string_t *property_name_p = ecma_get_prop_name_from_value (buffer_p[i]);
        -:  399:
        -:  400:      /* 9.1 */
    #####:  401:      ecma_property_descriptor_t prop_desc;
    #####:  402:      ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, property_name_p, &prop_desc);
        -:  403:
        -:  404:#if JERRY_BUILTIN_PROXY
    #####:  405:      if (ECMA_IS_VALUE_ERROR (status))
        -:  406:      {
    #####:  407:        ecma_collection_free (props_p);
    #####:  408:        return ECMA_VALUE_ERROR;
        -:  409:      }
        -:  410:#endif /* JERRY_BUILTIN_PROXY */
        -:  411:
    #####:  412:      if (ecma_is_value_false (status))
        -:  413:      {
    #####:  414:        continue;
        -:  415:      }
        -:  416:
        -:  417:      /* 9.2 */
    #####:  418:      if ((prop_desc.flags & (JERRY_PROP_IS_WRITABLE_DEFINED | JERRY_PROP_IS_WRITABLE))
        -:  419:          == (JERRY_PROP_IS_WRITABLE_DEFINED | JERRY_PROP_IS_WRITABLE))
        -:  420:      {
    #####:  421:        prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_WRITABLE;
        -:  422:      }
        -:  423:
    #####:  424:      prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_CONFIGURABLE;
    #####:  425:      prop_desc.flags |= JERRY_PROP_SHOULD_THROW;
        -:  426:
        -:  427:      /* 9.3 */
    #####:  428:      ecma_value_t define_own_prop_ret = ecma_op_object_define_own_property (obj_p,
        -:  429:                                                                             property_name_p,
        -:  430:                                                                             &prop_desc);
        -:  431:
    #####:  432:      ecma_free_property_descriptor (&prop_desc);
        -:  433:
        -:  434:      /* 9.4 */
    #####:  435:      if (ECMA_IS_VALUE_ERROR (define_own_prop_ret))
        -:  436:      {
    #####:  437:        ecma_collection_free (props_p);
    #####:  438:        return define_own_prop_ret;
        -:  439:      }
        -:  440:
    #####:  441:      ecma_free_value (define_own_prop_ret);
        -:  442:    }
        -:  443:
        -:  444:  }
        -:  445:
    #####:  446:  ecma_collection_free (props_p);
        -:  447:
    #####:  448:  return ECMA_VALUE_TRUE;
        -:  449:} /* ecma_builtin_object_set_integrity_level */
        -:  450:
        -:  451:/**
        -:  452: * The Object object's 'seal' routine
        -:  453: *
        -:  454: * See also:
        -:  455: *          ECMA-262 v5, 15.2.3.8
        -:  456: *
        -:  457: * @return ecma value
        -:  458: *         Returned value must be freed with ecma_free_value.
        -:  459: */
        -:  460:static ecma_value_t
    #####:  461:ecma_builtin_object_object_seal (ecma_object_t *obj_p) /**< routine's argument */
        -:  462:{
    #####:  463:  ecma_value_t status = ecma_builtin_object_set_integrity_level (obj_p, true);
        -:  464:
    #####:  465:  if (ECMA_IS_VALUE_ERROR (status))
        -:  466:  {
    #####:  467:    return status;
        -:  468:  }
        -:  469:
        -:  470:#if JERRY_BUILTIN_PROXY
    #####:  471:  if (ecma_is_value_false (status))
        -:  472:  {
    #####:  473:    return ecma_raise_type_error (ECMA_ERR_MSG ("Object cannot be sealed"));
        -:  474:  }
        -:  475:#endif /* JERRY_BUILTIN_PROXY */
        -:  476:
        -:  477:  /* 4. */
    #####:  478:  ecma_ref_object (obj_p);
    #####:  479:  return ecma_make_object_value (obj_p);
        -:  480:} /* ecma_builtin_object_object_seal */
        -:  481:
        -:  482:/**
        -:  483: * The Object object's 'freeze' routine
        -:  484: *
        -:  485: * See also:
        -:  486: *          ECMA-262 v5, 15.2.3.9
        -:  487: *
        -:  488: * @return ecma value
        -:  489: *         Returned value must be freed with ecma_free_value.
        -:  490: */
        -:  491:static ecma_value_t
    #####:  492:ecma_builtin_object_object_freeze (ecma_object_t *obj_p) /**< routine's argument */
        -:  493:{
    #####:  494:  ecma_value_t status = ecma_builtin_object_set_integrity_level (obj_p, false);
        -:  495:
    #####:  496:  if (ECMA_IS_VALUE_ERROR (status))
        -:  497:  {
    #####:  498:    return status;
        -:  499:  }
        -:  500:
        -:  501:#if JERRY_BUILTIN_PROXY
    #####:  502:  if (ecma_is_value_false (status))
        -:  503:  {
    #####:  504:    return ecma_raise_type_error (ECMA_ERR_MSG ("Object cannot be frozen"));
        -:  505:  }
        -:  506:#endif /* JERRY_BUILTIN_PROXY */
        -:  507:
        -:  508:  /* 4. */
    #####:  509:  ecma_ref_object (obj_p);
    #####:  510:  return ecma_make_object_value (obj_p);
        -:  511:} /* ecma_builtin_object_object_freeze */
        -:  512:
        -:  513:/**
        -:  514: * The Object object's 'preventExtensions' routine
        -:  515: *
        -:  516: * See also:
        -:  517: *          ECMA-262 v5, 15.2.3.10
        -:  518: *
        -:  519: * @return ecma value
        -:  520: *         Returned value must be freed with ecma_free_value.
        -:  521: */
        -:  522:ecma_value_t
    #####:  523:ecma_builtin_object_object_prevent_extensions (ecma_object_t *obj_p) /**< routine's argument */
        -:  524:{
        -:  525:#if JERRY_BUILTIN_PROXY
    #####:  526:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  527:  {
    #####:  528:    ecma_value_t status = ecma_proxy_object_prevent_extensions (obj_p);
        -:  529:
    #####:  530:    if (ECMA_IS_VALUE_ERROR (status))
        -:  531:    {
    #####:  532:      return status;
        -:  533:    }
        -:  534:
    #####:  535:    if (ecma_is_value_false (status))
        -:  536:    {
    #####:  537:      return ecma_raise_type_error (ECMA_ERR_MSG ("Cannot set [[Extensible]] property of object"));
        -:  538:    }
        -:  539:
    #####:  540:    JERRY_ASSERT (ecma_is_value_true (status));
        -:  541:  }
        -:  542:  else
        -:  543:  {
        -:  544:#endif /* JERRY_BUILTIN_PROXY */
    #####:  545:    ecma_op_ordinary_object_prevent_extensions (obj_p);
        -:  546:#if JERRY_BUILTIN_PROXY
        -:  547:  }
        -:  548:#endif /* JERRY_BUILTIN_PROXY */
    #####:  549:  ecma_ref_object (obj_p);
        -:  550:
    #####:  551:  return ecma_make_object_value (obj_p);
        -:  552:} /* ecma_builtin_object_object_prevent_extensions */
        -:  553:
        -:  554:/**
        -:  555: * The Object object's 'isSealed' and 'isFrozen' routines
        -:  556: *
        -:  557: * See also:
        -:  558: *         ECMA-262 v5, 15.2.3.11
        -:  559: *         ECMA-262 v5, 15.2.3.12
        -:  560: *
        -:  561: * @return ecma value
        -:  562: *         Returned value must be freed with ecma_free_value.
        -:  563: */
        -:  564:static ecma_value_t
    #####:  565:ecma_builtin_object_test_integrity_level (ecma_object_t *obj_p, /**< routine's argument */
        -:  566:                                          int mode) /**< routine mode */
        -:  567:{
    #####:  568:  JERRY_ASSERT (mode == ECMA_OBJECT_ROUTINE_IS_FROZEN || mode == ECMA_OBJECT_ROUTINE_IS_SEALED);
        -:  569:
        -:  570:  /* 3. */
        -:  571:  bool is_extensible;
        -:  572:#if JERRY_BUILTIN_PROXY
    #####:  573:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  574:  {
    #####:  575:    ecma_value_t status = ecma_proxy_object_is_extensible (obj_p);
        -:  576:
    #####:  577:    if (ECMA_IS_VALUE_ERROR (status))
        -:  578:    {
    #####:  579:      return status;
        -:  580:    }
        -:  581:
    #####:  582:    is_extensible = ecma_is_value_true (status);
        -:  583:  }
        -:  584:  else
        -:  585:#endif /* JERRY_BUILTIN_PROXY */
        -:  586:  {
    #####:  587:    is_extensible = ecma_op_ordinary_object_is_extensible (obj_p);
        -:  588:  }
        -:  589:
    #####:  590:  if (is_extensible)
        -:  591:  {
    #####:  592:    return ECMA_VALUE_FALSE;
        -:  593:  }
        -:  594:
        -:  595:  /* the value can be updated in the loop below */
    #####:  596:  ecma_value_t ret_value = ECMA_VALUE_TRUE;
        -:  597:
        -:  598:  /* 2. */
    #####:  599:  ecma_collection_t *props_p = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_ALL);
        -:  600:
        -:  601:#if JERRY_BUILTIN_PROXY
    #####:  602:  if (props_p == NULL)
        -:  603:  {
    #####:  604:    return ECMA_VALUE_ERROR;
        -:  605:  }
        -:  606:#endif /* JERRY_BUILTIN_PROXY */
        -:  607:
    #####:  608:  ecma_value_t *buffer_p = props_p->buffer_p;
        -:  609:
    #####:  610:  for (uint32_t i = 0; i < props_p->item_count; i++)
        -:  611:  {
    #####:  612:    ecma_string_t *property_name_p = ecma_get_prop_name_from_value (buffer_p[i]);
        -:  613:
        -:  614:    /* 2.a */
    #####:  615:    ecma_property_descriptor_t prop_desc;
    #####:  616:    ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, property_name_p, &prop_desc);
        -:  617:
        -:  618:#if JERRY_BUILTIN_PROXY
    #####:  619:    if (ECMA_IS_VALUE_ERROR (status))
        -:  620:    {
    #####:  621:      ret_value = status;
    #####:  622:      break;
        -:  623:    }
        -:  624:#endif /* JERRY_BUILTIN_PROXY */
        -:  625:
    #####:  626:    if (ecma_is_value_false (status))
        -:  627:    {
    #####:  628:      continue;
        -:  629:    }
        -:  630:
    #####:  631:    bool is_writable_data = ((prop_desc.flags & (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE))
        -:  632:                             == (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE));
    #####:  633:    bool is_configurable = (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE);
        -:  634:
    #####:  635:    ecma_free_property_descriptor (&prop_desc);
        -:  636:
        -:  637:    /* 2.b for isFrozen */
        -:  638:    /* 2.b for isSealed, 2.c for isFrozen */
    #####:  639:    if ((mode == ECMA_OBJECT_ROUTINE_IS_FROZEN && is_writable_data)
    #####:  640:        || is_configurable)
        -:  641:    {
    #####:  642:      ret_value = ECMA_VALUE_FALSE;
    #####:  643:      break;
        -:  644:    }
        -:  645:  }
        -:  646:
    #####:  647:  ecma_collection_free (props_p);
        -:  648:
    #####:  649:  return ret_value;
        -:  650:} /* ecma_builtin_object_test_integrity_level */
        -:  651:
        -:  652:/**
        -:  653: * The Object object's 'isExtensible' routine
        -:  654: *
        -:  655: * See also:
        -:  656: *          ECMA-262 v5, 15.2.3.13
        -:  657: *
        -:  658: * @return ecma value
        -:  659: *         Returned value must be freed with ecma_free_value.
        -:  660: */
        -:  661:ecma_value_t
    #####:  662:ecma_builtin_object_object_is_extensible (ecma_object_t *obj_p) /**< routine's argument */
        -:  663:{
        -:  664:#if JERRY_BUILTIN_PROXY
    #####:  665:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  666:  {
    #####:  667:    return ecma_proxy_object_is_extensible (obj_p);
        -:  668:  }
        -:  669:#endif /* JERRY_BUILTIN_PROXY */
        -:  670:
    #####:  671:  return ecma_make_boolean_value (ecma_op_ordinary_object_is_extensible (obj_p));
        -:  672:} /* ecma_builtin_object_object_is_extensible */
        -:  673:
        -:  674:/**
        -:  675: * Common implementation of the Object object's 'keys', 'values', 'entries' routines
        -:  676: *
        -:  677: * See also:
        -:  678: *          ECMA-262 v11, 19.1.2.17
        -:  679: *          ECMA-262 v11, 19.1.2.22
        -:  680: *          ECMA-262 v11, 19.1.2.5
        -:  681: *
        -:  682: * @return ecma value
        -:  683: *         Returned value must be freed with ecma_free_value.
        -:  684: */
        -:  685:static ecma_value_t
    #####:  686:ecma_builtin_object_object_keys_values_helper (ecma_object_t *obj_p, /**< routine's first argument */
        -:  687:                                               ecma_enumerable_property_names_options_t option) /**< listing option */
        -:  688:{
        -:  689:  /* 2. */
    #####:  690:  ecma_collection_t *props_p = ecma_op_object_get_enumerable_property_names (obj_p, option);
        -:  691:
    #####:  692:  if (props_p == NULL)
        -:  693:  {
    #####:  694:    return ECMA_VALUE_ERROR;
        -:  695:  }
        -:  696:
        -:  697:  /* 3. */
    #####:  698:  return ecma_op_new_array_object_from_collection (props_p, option != ECMA_ENUMERABLE_PROPERTY_KEYS);
        -:  699:} /* ecma_builtin_object_object_keys_values_helper */
        -:  700:
        -:  701:/**
        -:  702: * The Object object's 'getOwnPropertyDescriptor' routine
        -:  703: *
        -:  704: * See also:
        -:  705: *          ECMA-262 v5, 15.2.3.3
        -:  706: *
        -:  707: * @return ecma value
        -:  708: *         Returned value must be freed with ecma_free_value.
        -:  709: */
        -:  710:ecma_value_t
    #####:  711:ecma_builtin_object_object_get_own_property_descriptor (ecma_object_t *obj_p, /**< routine's first argument */
        -:  712:                                                        ecma_string_t *name_str_p) /**< routine's second argument */
        -:  713:{
        -:  714:  /* 3. */
    #####:  715:  ecma_property_descriptor_t prop_desc;
        -:  716:
    #####:  717:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, name_str_p, &prop_desc);
        -:  718:
        -:  719:#if JERRY_BUILTIN_PROXY
    #####:  720:  if (ECMA_IS_VALUE_ERROR (status))
        -:  721:  {
    #####:  722:    return status;
        -:  723:  }
        -:  724:#endif /* JERRY_BUILTIN_PROXY */
        -:  725:
    #####:  726:  if (ecma_is_value_true (status))
        -:  727:  {
        -:  728:    /* 4. */
    #####:  729:    ecma_object_t *desc_obj_p = ecma_op_from_property_descriptor (&prop_desc);
        -:  730:
    #####:  731:    ecma_free_property_descriptor (&prop_desc);
        -:  732:
    #####:  733:    return ecma_make_object_value (desc_obj_p);
        -:  734:  }
        -:  735:
    #####:  736:  return ECMA_VALUE_UNDEFINED;
        -:  737:} /* ecma_builtin_object_object_get_own_property_descriptor */
        -:  738:
        -:  739:#if JERRY_ESNEXT
        -:  740:/**
        -:  741: * The Object object's 'getOwnPropertyDescriptors' routine
        -:  742: *
        -:  743: * See also:
        -:  744: *          ECMA-262 v11, 19.1.2.9
        -:  745: *
        -:  746: * @return ecma value
        -:  747: *         Returned value must be freed with ecma_free_value.
        -:  748: */
        -:  749:static ecma_value_t
    #####:  750:ecma_builtin_object_object_get_own_property_descriptors (ecma_object_t *obj_p) /**< routine's first argument */
        -:  751:{
        -:  752:  /* 2 */
    #####:  753:  ecma_collection_t *prop_names_p = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_ALL);
        -:  754:
        -:  755:#if JERRY_BUILTIN_PROXY
    #####:  756:  if (prop_names_p == NULL)
        -:  757:  {
    #####:  758:    return ECMA_VALUE_ERROR;
        -:  759:  }
        -:  760:#endif /* JERRY_BUILTIN_PROXY */
        -:  761:
    #####:  762:  ecma_value_t *names_buffer_p = prop_names_p->buffer_p;
        -:  763:
        -:  764:  /* 3 */
    #####:  765:  ecma_object_t *object_prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
    #####:  766:  ecma_object_t *descriptors_p = ecma_create_object (object_prototype_p, 0, ECMA_OBJECT_TYPE_GENERAL);
        -:  767:
        -:  768:  /* 4 */
    #####:  769:  for (uint32_t i = 0; i < prop_names_p->item_count; i++)
        -:  770:  {
    #####:  771:    ecma_string_t *property_name_p = ecma_get_prop_name_from_value (names_buffer_p[i]);
        -:  772:
        -:  773:    /* 4.a */
    #####:  774:    ecma_property_descriptor_t prop_desc;
    #####:  775:    ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, property_name_p, &prop_desc);
        -:  776:
        -:  777:#if JERRY_BUILTIN_PROXY
    #####:  778:    if (ECMA_IS_VALUE_ERROR (status))
        -:  779:    {
    #####:  780:      ecma_deref_object (descriptors_p);
    #####:  781:      ecma_collection_free (prop_names_p);
        -:  782:
    #####:  783:      return status;
        -:  784:    }
        -:  785:#endif /* JERRY_BUILTIN_PROXY */
        -:  786:
    #####:  787:    if (ecma_is_value_true (status))
        -:  788:    {
        -:  789:      /* 4.b */
    #####:  790:      ecma_object_t *desc_obj_p = ecma_op_from_property_descriptor (&prop_desc);
        -:  791:      /* 4.c */
    #####:  792:      ecma_property_value_t *value_p = ecma_create_named_data_property (descriptors_p,
        -:  793:                                                                        property_name_p,
        -:  794:                                                                        ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  795:                                                                        NULL);
    #####:  796:      value_p->value = ecma_make_object_value (desc_obj_p);
        -:  797:
    #####:  798:      ecma_deref_object (desc_obj_p);
    #####:  799:      ecma_free_property_descriptor (&prop_desc);
        -:  800:    }
        -:  801:  }
        -:  802:
    #####:  803:  ecma_collection_free (prop_names_p);
        -:  804:
    #####:  805:  return ecma_make_object_value (descriptors_p);
        -:  806:} /* ecma_builtin_object_object_get_own_property_descriptors */
        -:  807:#endif /* JERRY_ESNEXT */
        -:  808:
        -:  809:/**
        -:  810: * The Object object's 'defineProperties' routine
        -:  811: *
        -:  812: * See also:
        -:  813: *          ECMA-262 v5, 15.2.3.7
        -:  814: *          ECMA-262 v11, 19.1.2.3.1
        -:  815: *
        -:  816: * @return ecma value
        -:  817: *         Returned value must be freed with ecma_free_value.
        -:  818: */
        -:  819:static ecma_value_t
    #####:  820:ecma_builtin_object_object_define_properties (ecma_object_t *obj_p, /**< routine's first argument */
        -:  821:                                              ecma_value_t arg2) /**< routine's second argument */
        -:  822:{
        -:  823:  /* 2. */
    #####:  824:  ecma_value_t props = ecma_op_to_object (arg2);
        -:  825:
    #####:  826:  if (ECMA_IS_VALUE_ERROR (props))
        -:  827:  {
    #####:  828:    return props;
        -:  829:  }
        -:  830:
    #####:  831:  ecma_object_t *props_p = ecma_get_object_from_value (props);
        -:  832:
        -:  833:  /* 3. */
    #####:  834:  ecma_collection_t *prop_names_p = ecma_op_object_own_property_keys (props_p, JERRY_PROPERTY_FILTER_ALL);
    #####:  835:  ecma_value_t ret_value = ECMA_VALUE_ERROR;
        -:  836:
        -:  837:#if JERRY_BUILTIN_PROXY
    #####:  838:  if (prop_names_p == NULL)
        -:  839:  {
    #####:  840:    ecma_deref_object (props_p);
    #####:  841:    return ret_value;
        -:  842:  }
        -:  843:#endif /* JERRY_BUILTIN_PROXY */
        -:  844:
    #####:  845:  ecma_value_t *buffer_p = prop_names_p->buffer_p;
        -:  846:
        -:  847:  /* 4. */
    #####:  848:  JMEM_DEFINE_LOCAL_ARRAY (property_descriptors, prop_names_p->item_count, ecma_property_descriptor_t);
    #####:  849:  uint32_t property_descriptor_number = 0;
    #####:  850:  ecma_collection_t *enum_prop_names = ecma_new_collection ();
        -:  851:
        -:  852:  /* 5. */
    #####:  853:  for (uint32_t i = 0; i < prop_names_p->item_count; i++)
        -:  854:  {
    #####:  855:    ecma_string_t *prop_name_p = ecma_get_prop_name_from_value (buffer_p[i]);
        -:  856:
    #####:  857:    ecma_property_descriptor_t prop_desc;
    #####:  858:    ecma_value_t get_desc = ecma_op_object_get_own_property_descriptor (props_p,
        -:  859:                                                                        prop_name_p,
        -:  860:                                                                        &prop_desc);
        -:  861:
        -:  862:#if JERRY_ESNEXT
    #####:  863:    if (ECMA_IS_VALUE_ERROR (get_desc))
        -:  864:    {
    #####:  865:      goto cleanup;
        -:  866:    }
        -:  867:#endif /* JERRY_ESNEXT */
        -:  868:
    #####:  869:    if (ecma_is_value_true (get_desc))
        -:  870:    {
    #####:  871:      if (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE)
        -:  872:      {
    #####:  873:        ecma_value_t desc_obj = ecma_op_object_get (props_p, prop_name_p);
        -:  874:
    #####:  875:        if (ECMA_IS_VALUE_ERROR (desc_obj))
        -:  876:        {
    #####:  877:          ecma_free_property_descriptor (&prop_desc);
    #####:  878:          goto cleanup;
        -:  879:        }
        -:  880:
    #####:  881:        ecma_value_t conv_result = ecma_op_to_property_descriptor (desc_obj,
    #####:  882:                                                                   &property_descriptors[property_descriptor_number]);
        -:  883:
    #####:  884:        property_descriptors[property_descriptor_number].flags |= JERRY_PROP_SHOULD_THROW;
        -:  885:
    #####:  886:        ecma_free_value (desc_obj);
        -:  887:
    #####:  888:        if (ECMA_IS_VALUE_ERROR (conv_result))
        -:  889:        {
    #####:  890:          ecma_free_property_descriptor (&prop_desc);
    #####:  891:          goto cleanup;
        -:  892:        }
        -:  893:
    #####:  894:        property_descriptor_number++;
    #####:  895:        ecma_free_value (conv_result);
    #####:  896:        ecma_ref_ecma_string (prop_name_p);
    #####:  897:        ecma_collection_push_back (enum_prop_names, buffer_p[i]);
        -:  898:      }
        -:  899:
    #####:  900:      ecma_free_property_descriptor (&prop_desc);
        -:  901:    }
        -:  902:  }
        -:  903:
        -:  904:  /* 6. */
    #####:  905:  for (uint32_t i = 0; i < enum_prop_names->item_count; i++)
        -:  906:  {
    #####:  907:    ecma_string_t *prop_name_p = ecma_get_prop_name_from_value (enum_prop_names->buffer_p[i]);
        -:  908:
    #####:  909:    ecma_value_t define_own_prop_ret = ecma_op_object_define_own_property (obj_p,
        -:  910:                                                                           prop_name_p,
    #####:  911:                                                                           &property_descriptors[i]);
    #####:  912:    if (ECMA_IS_VALUE_ERROR (define_own_prop_ret))
        -:  913:    {
    #####:  914:      goto cleanup;
        -:  915:    }
        -:  916:
    #####:  917:    ecma_free_value (define_own_prop_ret);
        -:  918:  }
        -:  919:
    #####:  920:  ecma_ref_object (obj_p);
    #####:  921:  ret_value = ecma_make_object_value (obj_p);
        -:  922:
    #####:  923:cleanup:
        -:  924:  /* Clean up. */
    #####:  925:  for (uint32_t index = 0;
        -:  926:       index < property_descriptor_number;
    #####:  927:       index++)
        -:  928:  {
    #####:  929:    ecma_free_property_descriptor (&property_descriptors[index]);
        -:  930:  }
        -:  931:
    #####:  932:  ecma_collection_free (enum_prop_names);
        -:  933:
    #####:  934:  JMEM_FINALIZE_LOCAL_ARRAY (property_descriptors);
        -:  935:
    #####:  936:  ecma_collection_free (prop_names_p);
        -:  937:
    #####:  938:  ecma_deref_object (props_p);
        -:  939:
    #####:  940:  return ret_value;
        -:  941:} /* ecma_builtin_object_object_define_properties */
        -:  942:
        -:  943:/**
        -:  944: * The Object object's 'create' routine
        -:  945: *
        -:  946: * See also:
        -:  947: *          ECMA-262 v5, 15.2.3.5
        -:  948: *
        -:  949: * @return ecma value
        -:  950: *         Returned value must be freed with ecma_free_value.
        -:  951: */
        -:  952:static ecma_value_t
    #####:  953:ecma_builtin_object_object_create (ecma_value_t arg1, /**< routine's first argument */
        -:  954:                                   ecma_value_t arg2) /**< routine's second argument */
        -:  955:{
        -:  956:  /* 1. */
    #####:  957:  if (!ecma_is_value_object (arg1) && !ecma_is_value_null (arg1))
        -:  958:  {
    #####:  959:    return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_argument_is_not_an_object));
        -:  960:  }
        -:  961:
    #####:  962:  ecma_object_t *obj_p = NULL;
        -:  963:
    #####:  964:  if (!ecma_is_value_null (arg1))
        -:  965:  {
    #####:  966:    obj_p = ecma_get_object_from_value (arg1);
        -:  967:  }
        -:  968:  /* 2-3. */
    #####:  969:  ecma_object_t *result_obj_p = ecma_op_create_object_object_noarg_and_set_prototype (obj_p);
        -:  970:
        -:  971:  /* 4. */
    #####:  972:  if (!ecma_is_value_undefined (arg2))
        -:  973:  {
    #####:  974:    ecma_value_t obj = ecma_builtin_object_object_define_properties (result_obj_p, arg2);
        -:  975:
    #####:  976:    if (ECMA_IS_VALUE_ERROR (obj))
        -:  977:    {
    #####:  978:      ecma_deref_object (result_obj_p);
    #####:  979:      return obj;
        -:  980:    }
        -:  981:
    #####:  982:    ecma_free_value (obj);
        -:  983:  }
        -:  984:
        -:  985:  /* 5. */
    #####:  986:  return ecma_make_object_value (result_obj_p);
        -:  987:} /* ecma_builtin_object_object_create */
        -:  988:
        -:  989:/**
        -:  990: * The Object object's 'defineProperty' routine
        -:  991: *
        -:  992: * See also:
        -:  993: *          ECMA-262 v5, 15.2.3.6
        -:  994: *
        -:  995: * @return ecma value
        -:  996: *         Returned value must be freed with ecma_free_value.
        -:  997: */
        -:  998:ecma_value_t
    #####:  999:ecma_builtin_object_object_define_property (ecma_object_t *obj_p, /**< routine's first argument */
        -: 1000:                                            ecma_string_t *name_str_p, /**< routine's second argument */
        -: 1001:                                            ecma_value_t arg3) /**< routine's third argument */
        -: 1002:{
    #####: 1003:  ecma_property_descriptor_t prop_desc;
        -: 1004:
    #####: 1005:  ecma_value_t conv_result = ecma_op_to_property_descriptor (arg3, &prop_desc);
        -: 1006:
    #####: 1007:  if (ECMA_IS_VALUE_ERROR (conv_result))
        -: 1008:  {
    #####: 1009:    return conv_result;
        -: 1010:  }
        -: 1011:
    #####: 1012:  prop_desc.flags |= JERRY_PROP_SHOULD_THROW;
        -: 1013:
    #####: 1014:  ecma_value_t define_own_prop_ret = ecma_op_object_define_own_property (obj_p,
        -: 1015:                                                                         name_str_p,
        -: 1016:                                                                         &prop_desc);
        -: 1017:
    #####: 1018:  ecma_free_property_descriptor (&prop_desc);
    #####: 1019:  ecma_free_value (conv_result);
        -: 1020:
    #####: 1021:  if (ECMA_IS_VALUE_ERROR (define_own_prop_ret))
        -: 1022:  {
    #####: 1023:    return define_own_prop_ret;
        -: 1024:  }
        -: 1025:
    #####: 1026:  if (ecma_is_value_false (define_own_prop_ret))
        -: 1027:  {
    #####: 1028:    return ecma_raise_type_error (ECMA_ERR_MSG ("The requested property update cannot be performed"));
        -: 1029:  }
        -: 1030:
    #####: 1031:  JERRY_ASSERT (ecma_is_value_true (define_own_prop_ret));
        -: 1032:
    #####: 1033:  ecma_ref_object (obj_p);
    #####: 1034:  ecma_free_value (define_own_prop_ret);
        -: 1035:
    #####: 1036:  return ecma_make_object_value (obj_p);
        -: 1037:} /* ecma_builtin_object_object_define_property */
        -: 1038:
        -: 1039:#if JERRY_ESNEXT
        -: 1040:
        -: 1041:/**
        -: 1042: * The Object object's 'assign' routine
        -: 1043: *
        -: 1044: * See also:
        -: 1045: *          ECMA-262 v6, 19.1.2.1
        -: 1046: *
        -: 1047: * @return ecma value
        -: 1048: *         Returned value must be freed with ecma_free_value.
        -: 1049: */
        -: 1050:static ecma_value_t
    #####: 1051:ecma_builtin_object_object_assign (ecma_object_t *target_p, /**< target object */
        -: 1052:                                   const ecma_value_t arguments_list_p[], /**< arguments list */
        -: 1053:                                   uint32_t arguments_list_len) /**< number of arguments */
        -: 1054:{
    #####: 1055:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -: 1056:
        -: 1057:  /* 4-5. */
    #####: 1058:  for (uint32_t i = 0; i < arguments_list_len && ecma_is_value_empty (ret_value); i++)
        -: 1059:  {
    #####: 1060:    ecma_value_t next_source = arguments_list_p[i];
        -: 1061:
        -: 1062:    /* 5.a */
    #####: 1063:    if (ecma_is_value_undefined (next_source) || ecma_is_value_null (next_source))
        -: 1064:    {
    #####: 1065:      continue;
        -: 1066:    }
        -: 1067:
        -: 1068:    /* 5.b.i */
    #####: 1069:    ecma_value_t from_value = ecma_op_to_object (next_source);
        -: 1070:    /* null and undefied cases are handled above, so this must be a valid object */
    #####: 1071:    JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (from_value));
        -: 1072:
    #####: 1073:    ecma_object_t *from_obj_p = ecma_get_object_from_value (from_value);
        -: 1074:
        -: 1075:    /* 5.b.iii */
    #####: 1076:    ecma_collection_t *props_p = ecma_op_object_own_property_keys (from_obj_p, JERRY_PROPERTY_FILTER_ALL);
        -: 1077:
        -: 1078:#if JERRY_BUILTIN_PROXY
    #####: 1079:    if (props_p == NULL)
        -: 1080:    {
    #####: 1081:      ecma_deref_object (from_obj_p);
    #####: 1082:      return ECMA_VALUE_ERROR;
        -: 1083:    }
        -: 1084:#endif /* JERRY_BUILTIN_PROXY */
        -: 1085:
    #####: 1086:    ecma_value_t *buffer_p = props_p->buffer_p;
        -: 1087:
    #####: 1088:    for (uint32_t j = 0; (j < props_p->item_count) && ecma_is_value_empty (ret_value); j++)
        -: 1089:    {
    #####: 1090:      ecma_string_t *property_name_p = ecma_get_prop_name_from_value (buffer_p[j]);
        -: 1091:
        -: 1092:      /* 5.c.i-ii */
    #####: 1093:      ecma_property_descriptor_t prop_desc;
    #####: 1094:      ecma_value_t desc_status = ecma_op_object_get_own_property_descriptor (from_obj_p, property_name_p, &prop_desc);
        -: 1095:
        -: 1096:#if JERRY_BUILTIN_PROXY
    #####: 1097:      if (ECMA_IS_VALUE_ERROR (desc_status))
        -: 1098:      {
    #####: 1099:        ret_value = desc_status;
    #####: 1100:        break;
        -: 1101:      }
        -: 1102:#endif /* JERRY_BUILTIN_PROXY */
        -: 1103:
    #####: 1104:      if (ecma_is_value_false (desc_status))
        -: 1105:      {
    #####: 1106:        continue;
        -: 1107:      }
        -: 1108:
        -: 1109:      /* 5.c.iii */
    #####: 1110:      if (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE)
        -: 1111:      {
        -: 1112:        /* 5.c.iii.1 */
    #####: 1113:        ecma_value_t prop_value = ecma_op_object_get (from_obj_p, property_name_p);
        -: 1114:
        -: 1115:        /* 5.c.iii.2 */
    #####: 1116:        if (ECMA_IS_VALUE_ERROR (prop_value))
        -: 1117:        {
    #####: 1118:          ret_value = prop_value;
        -: 1119:        }
        -: 1120:        else
        -: 1121:        {
        -: 1122:          /* 5.c.iii.3 */
    #####: 1123:          ecma_value_t status = ecma_op_object_put (target_p, property_name_p, prop_value, true);
        -: 1124:
        -: 1125:          /* 5.c.iii.4 */
    #####: 1126:          if (ECMA_IS_VALUE_ERROR (status))
        -: 1127:          {
    #####: 1128:            ret_value = status;
        -: 1129:          }
        -: 1130:        }
        -: 1131:
    #####: 1132:        ecma_free_value (prop_value);
        -: 1133:      }
        -: 1134:
    #####: 1135:      ecma_free_property_descriptor (&prop_desc);
        -: 1136:    }
        -: 1137:
    #####: 1138:    ecma_deref_object (from_obj_p);
    #####: 1139:    ecma_collection_free (props_p);
        -: 1140:  }
        -: 1141:
        -: 1142:  /* 6. */
    #####: 1143:  if (ecma_is_value_empty (ret_value))
        -: 1144:  {
    #####: 1145:    ecma_ref_object (target_p);
    #####: 1146:    return ecma_make_object_value (target_p);
        -: 1147:  }
        -: 1148:
    #####: 1149:  return ret_value;
        -: 1150:} /* ecma_builtin_object_object_assign */
        -: 1151:
        -: 1152:/**
        -: 1153: * The Object object's 'is' routine
        -: 1154: *
        -: 1155: * See also:
        -: 1156: *          ECMA-262 v6, 19.1.2.10
        -: 1157: *
        -: 1158: * @return ecma value
        -: 1159: *         Returned value must be freed with ecma_free_value.
        -: 1160: */
        -: 1161:static ecma_value_t
    #####: 1162:ecma_builtin_object_object_is (ecma_value_t arg1, /**< routine's first argument */
        -: 1163:                               ecma_value_t arg2) /**< routine's second argument */
        -: 1164:{
    #####: 1165:  return ecma_op_same_value (arg1, arg2) ? ECMA_VALUE_TRUE : ECMA_VALUE_FALSE;
        -: 1166:} /* ecma_builtin_object_object_is */
        -: 1167:
        -: 1168:/**
        -: 1169: * The Object object's 'fromEntries' routine
        -: 1170: *
        -: 1171: * See also:
        -: 1172: *          ECMA-262 v10, 19.1.2.7
        -: 1173: * @return ecma value
        -: 1174: *         Returned value must be freed with ecma_free_value.
        -: 1175: */
        -: 1176:static ecma_value_t
    #####: 1177:ecma_builtin_object_from_entries (ecma_value_t iterator) /**< object's iterator */
        -: 1178:{
    #####: 1179:  JERRY_ASSERT (ecma_op_require_object_coercible (iterator));
        -: 1180:  /* 2 */
    #####: 1181:  ecma_object_t *object_prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
    #####: 1182:  ecma_object_t *obj_p = ecma_create_object (object_prototype_p, 0, ECMA_OBJECT_TYPE_GENERAL);
        -: 1183:
        -: 1184:  /* 6.a */
    #####: 1185:  ecma_value_t next_method;
    #####: 1186:  ecma_value_t result = ecma_op_get_iterator (iterator, ECMA_VALUE_SYNC_ITERATOR, &next_method);
        -: 1187:
    #####: 1188:  if (ECMA_IS_VALUE_ERROR (result))
        -: 1189:  {
    #####: 1190:    ecma_deref_object (obj_p);
    #####: 1191:    return result;
        -: 1192:  }
        -: 1193:
    #####: 1194:  const ecma_value_t original_iterator = result;
        -: 1195:
        -: 1196:  /* 6.b */
        -: 1197:  while (true)
    #####: 1198:  {
        -: 1199:    /* 6.a.i */
    #####: 1200:    result = ecma_op_iterator_step (original_iterator, next_method);
        -: 1201:
    #####: 1202:    if (ECMA_IS_VALUE_ERROR (result))
        -: 1203:    {
    #####: 1204:      goto cleanup_iterator;
        -: 1205:    }
        -: 1206:
        -: 1207:    /* 6.a.ii */
    #####: 1208:    if (ecma_is_value_false (result))
        -: 1209:    {
    #####: 1210:      break;
        -: 1211:    }
        -: 1212:
        -: 1213:    /* 6.a.iii */
    #####: 1214:    const ecma_value_t next = result;
    #####: 1215:    result = ecma_op_iterator_value (next);
    #####: 1216:    ecma_free_value (next);
        -: 1217:
    #####: 1218:    if (ECMA_IS_VALUE_ERROR (result))
        -: 1219:    {
    #####: 1220:      goto cleanup_iterator;
        -: 1221:    }
        -: 1222:
        -: 1223:    /* 6.a.iv */
    #####: 1224:    if (!ecma_is_value_object (result))
        -: 1225:    {
    #####: 1226:      ecma_free_value (result);
    #####: 1227:      ecma_raise_type_error (ECMA_ERR_MSG ("Iterator value is not an object"));
    #####: 1228:      result = ecma_op_iterator_close (original_iterator);
    #####: 1229:      JERRY_ASSERT (ECMA_IS_VALUE_ERROR (result));
    #####: 1230:      goto cleanup_iterator;
        -: 1231:    }
        -: 1232:
        -: 1233:    /* 6.a.v-vi */
    #####: 1234:    ecma_object_t *next_object_p = ecma_get_object_from_value (result);
        -: 1235:
    #####: 1236:    result = ecma_op_object_get_by_index (next_object_p, 0);
        -: 1237:
    #####: 1238:    if (ECMA_IS_VALUE_ERROR (result))
        -: 1239:    {
    #####: 1240:      ecma_deref_object (next_object_p);
    #####: 1241:      ecma_op_iterator_close (original_iterator);
    #####: 1242:      goto cleanup_iterator;
        -: 1243:    }
        -: 1244:
    #####: 1245:    const ecma_value_t key = result;
        -: 1246:
    #####: 1247:    result = ecma_op_object_get_by_index (next_object_p, 1);
        -: 1248:
    #####: 1249:    if (ECMA_IS_VALUE_ERROR (result))
        -: 1250:    {
    #####: 1251:      ecma_deref_object (next_object_p);
    #####: 1252:      ecma_free_value (key);
    #####: 1253:      ecma_op_iterator_close (original_iterator);
    #####: 1254:      goto cleanup_iterator;
        -: 1255:    }
        -: 1256:
        -: 1257:    /* 6.a.vii */
    #####: 1258:    const ecma_value_t value = result;
    #####: 1259:    ecma_string_t *property_key = ecma_op_to_property_key (key);
        -: 1260:
    #####: 1261:    if (property_key == NULL)
        -: 1262:    {
    #####: 1263:      ecma_deref_object (next_object_p);
    #####: 1264:      ecma_free_value (key);
    #####: 1265:      ecma_op_iterator_close (original_iterator);
    #####: 1266:      result = ECMA_VALUE_ERROR;
    #####: 1267:      goto cleanup_iterator;
        -: 1268:    }
        -: 1269:
    #####: 1270:    ecma_property_t *property_p = ecma_find_named_property (obj_p, property_key);
        -: 1271:
    #####: 1272:    if (property_p == NULL)
        -: 1273:    {
        -: 1274:      ecma_property_value_t *prop;
    #####: 1275:      prop = ecma_create_named_data_property (obj_p,
        -: 1276:                                              property_key,
        -: 1277:                                              ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -: 1278:                                              NULL);
    #####: 1279:      prop->value = ecma_copy_value_if_not_object (value);
        -: 1280:    }
        -: 1281:    else
        -: 1282:    {
    #####: 1283:      ecma_named_data_property_assign_value (obj_p, ECMA_PROPERTY_VALUE_PTR (property_p), value);
        -: 1284:    }
        -: 1285:
    #####: 1286:    ecma_deref_ecma_string (property_key);
    #####: 1287:    ecma_free_value (key);
    #####: 1288:    ecma_free_value (value);
    #####: 1289:    ecma_deref_object (next_object_p);
        -: 1290:  }
        -: 1291:
    #####: 1292:  ecma_ref_object (obj_p);
    #####: 1293:  result = ecma_make_object_value (obj_p);
        -: 1294:
    #####: 1295:cleanup_iterator:
    #####: 1296:  ecma_free_value (original_iterator);
    #####: 1297:  ecma_free_value (next_method);
    #####: 1298:  ecma_deref_object (obj_p);
        -: 1299:
    #####: 1300:  return result;
        -: 1301:} /* ecma_builtin_object_from_entries */
        -: 1302:
        -: 1303:#endif /* JERRY_ESNEXT */
        -: 1304:
        -: 1305:/**
        -: 1306: * GetOwnPropertyKeys abstract method
        -: 1307: *
        -: 1308: * See also:
        -: 1309: *          ECMA-262 v11, 19.1.2.11.1
        -: 1310: *
        -: 1311: * @return ecma value
        -: 1312: *         Returned value must be freed with ecma_free_value.
        -: 1313: */
        -: 1314:static ecma_value_t
    #####: 1315:ecma_op_object_get_own_property_keys (ecma_value_t this_arg, /**< this argument */
        -: 1316:                                      uint16_t type) /**< routine type */
        -: 1317:{
        -: 1318:#if JERRY_ESNEXT
        -: 1319:  /* 1. */
    #####: 1320:  ecma_value_t object = ecma_op_to_object (this_arg);
        -: 1321:
    #####: 1322:  if (ECMA_IS_VALUE_ERROR (object))
        -: 1323:  {
    #####: 1324:    return object;
        -: 1325:  }
        -: 1326:
    #####: 1327:  ecma_object_t *obj_p = ecma_get_object_from_value (object);
        -: 1328:
        -: 1329:  /* 2. */
    #####: 1330:  jerry_property_filter_t filter = JERRY_PROPERTY_FILTER_EXLCUDE_SYMBOLS;
        -: 1331:
    #####: 1332:  if (type == ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_SYMBOLS)
        -: 1333:  {
    #####: 1334:    filter = (JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS
        -: 1335:              | JERRY_PROPERTY_FILTER_EXLCUDE_INTEGER_INDICES);
        -: 1336:  }
        -: 1337:
    #####: 1338:  ecma_collection_t *props_p = ecma_op_object_own_property_keys (obj_p, filter);
        -: 1339:
    #####: 1340:  if (props_p == NULL)
        -: 1341:  {
    #####: 1342:    ecma_deref_object (obj_p);
    #####: 1343:    return ECMA_VALUE_ERROR;
        -: 1344:  }
        -: 1345:
        -: 1346:  /* 3. */
    #####: 1347:  ecma_collection_t *name_list_p = ecma_new_collection ();
        -: 1348:
        -: 1349:  /* 4. */
    #####: 1350:  for (uint32_t i = 0; i < props_p->item_count; i++)
        -: 1351:  {
    #####: 1352:    ecma_value_t prop_name = props_p->buffer_p[i];
    #####: 1353:    ecma_string_t *name_p = ecma_get_prop_name_from_value (prop_name);
        -: 1354:
    #####: 1355:    if ((ecma_prop_name_is_symbol (name_p) && type == ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_SYMBOLS)
    #####: 1356:        || (ecma_is_value_string (prop_name) && type == ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_NAMES))
        -: 1357:    {
    #####: 1358:      ecma_ref_ecma_string (name_p);
    #####: 1359:      ecma_collection_push_back (name_list_p, prop_name);
        -: 1360:    }
        -: 1361:  }
        -: 1362:
    #####: 1363:  ecma_value_t result_array = ecma_op_new_array_object_from_collection (name_list_p, false);
        -: 1364:
    #####: 1365:  ecma_deref_object (obj_p);
    #####: 1366:  ecma_collection_free (props_p);
        -: 1367:
    #####: 1368:  return result_array;
        -: 1369:#else /* !JERRY_ESNEXT */
        -: 1370:  JERRY_UNUSED (type);
    #####: 1371:  ecma_object_t *obj_p = ecma_get_object_from_value (this_arg);
    #####: 1372:  ecma_collection_t *props_p = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_ALL);
    #####: 1373:  return ecma_op_new_array_object_from_collection (props_p, false);
        -: 1374:#endif /* JERRY_ESNEXT */
        -: 1375:} /* ecma_op_object_get_own_property_keys */
        -: 1376:
        -: 1377:/**
        -: 1378: * Dispatcher of the built-in's routines
        -: 1379: *
        -: 1380: * @return ecma value
        -: 1381: *         Returned value must be freed with ecma_free_value.
        -: 1382: */
        -: 1383:ecma_value_t
    #####: 1384:ecma_builtin_object_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -: 1385:                                      ecma_value_t this_arg, /**< 'this' argument value */
        -: 1386:                                      const ecma_value_t arguments_list_p[], /**< list of arguments
        -: 1387:                                                                              *   passed to routine */
        -: 1388:                                      uint32_t arguments_number) /**< length of arguments' list */
        -: 1389:{
        -: 1390:  JERRY_UNUSED_2 (this_arg, arguments_number);
        -: 1391:
    #####: 1392:  ecma_value_t arg1 = arguments_list_p[0];
    #####: 1393:  ecma_value_t arg2 = arguments_list_p[1];
        -: 1394:
        -: 1395:  /* No specialization for the arguments */
    #####: 1396:  switch (builtin_routine_id)
        -: 1397:  {
    #####: 1398:    case ECMA_OBJECT_ROUTINE_CREATE:
        -: 1399:    {
    #####: 1400:      return ecma_builtin_object_object_create (arg1, arg2);
        -: 1401:    }
        -: 1402:#if JERRY_ESNEXT
    #####: 1403:    case ECMA_OBJECT_ROUTINE_SET_PROTOTYPE_OF:
        -: 1404:    {
    #####: 1405:      return ecma_builtin_object_object_set_prototype_of (arg1, arg2);
        -: 1406:    }
    #####: 1407:    case ECMA_OBJECT_ROUTINE_IS:
        -: 1408:    {
    #####: 1409:      return ecma_builtin_object_object_is (arg1, arg2);
        -: 1410:    }
        -: 1411:#endif /* JERRY_ESNEXT */
    #####: 1412:    default:
        -: 1413:    {
    #####: 1414:      break;
        -: 1415:    }
        -: 1416:  }
        -: 1417:
        -: 1418:  ecma_object_t *obj_p;
        -: 1419:#if !JERRY_ESNEXT
    #####: 1420:  if (!ecma_is_value_object (arg1))
        -: 1421:  {
    #####: 1422:    return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_argument_is_not_an_object));
        -: 1423:  }
        -: 1424:#endif /* !JERRY_ESNEXT */
        -: 1425:
    #####: 1426:  if (builtin_routine_id <= ECMA_OBJECT_ROUTINE_DEFINE_PROPERTIES)
        -: 1427:  {
        -: 1428:#if JERRY_ESNEXT
    #####: 1429:    if (!ecma_is_value_object (arg1))
        -: 1430:    {
    #####: 1431:      return ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_argument_is_not_an_object));
        -: 1432:    }
        -: 1433:#endif /* JERRY_ESNEXT */
        -: 1434:
    #####: 1435:    obj_p = ecma_get_object_from_value (arg1);
        -: 1436:
    #####: 1437:    if (builtin_routine_id == ECMA_OBJECT_ROUTINE_DEFINE_PROPERTY)
        -: 1438:    {
    #####: 1439:      ecma_string_t *prop_name_p = ecma_op_to_property_key (arg2);
        -: 1440:
    #####: 1441:      if (prop_name_p == NULL)
        -: 1442:      {
    #####: 1443:        return ECMA_VALUE_ERROR;
        -: 1444:      }
        -: 1445:
    #####: 1446:      ecma_value_t result = ecma_builtin_object_object_define_property (obj_p, prop_name_p, arguments_list_p[2]);
        -: 1447:
    #####: 1448:      ecma_deref_ecma_string (prop_name_p);
    #####: 1449:      return result;
        -: 1450:    }
        -: 1451:
    #####: 1452:    JERRY_ASSERT (builtin_routine_id == ECMA_OBJECT_ROUTINE_DEFINE_PROPERTIES);
    #####: 1453:    return ecma_builtin_object_object_define_properties (obj_p, arg2);
        -: 1454:  }
    #####: 1455:  else if (builtin_routine_id <= ECMA_OBJECT_ROUTINE_ENTRIES)
        -: 1456:  {
        -: 1457:#if JERRY_ESNEXT
    #####: 1458:    ecma_value_t object = ecma_op_to_object (arg1);
    #####: 1459:    if (ECMA_IS_VALUE_ERROR (object))
        -: 1460:    {
    #####: 1461:      return object;
        -: 1462:    }
        -: 1463:
    #####: 1464:    obj_p = ecma_get_object_from_value (object);
        -: 1465:#else /* !JERRY_ESNEXT */
    #####: 1466:    obj_p = ecma_get_object_from_value (arg1);
        -: 1467:#endif /* JERRY_ESNEXT */
        -: 1468:
        -: 1469:    ecma_value_t result;
    #####: 1470:    switch (builtin_routine_id)
        -: 1471:    {
    #####: 1472:      case ECMA_OBJECT_ROUTINE_GET_PROTOTYPE_OF:
        -: 1473:      {
    #####: 1474:        result = ecma_builtin_object_object_get_prototype_of (obj_p);
    #####: 1475:        break;
        -: 1476:      }
        -: 1477:#if JERRY_ESNEXT
    #####: 1478:      case ECMA_OBJECT_ROUTINE_ASSIGN:
        -: 1479:      {
    #####: 1480:        result = ecma_builtin_object_object_assign (obj_p, arguments_list_p + 1, arguments_number - 1);
    #####: 1481:        break;
        -: 1482:      }
    #####: 1483:      case ECMA_OBJECT_ROUTINE_ENTRIES:
        -: 1484:      case ECMA_OBJECT_ROUTINE_VALUES:
        -: 1485:#endif /* JERRY_ESNEXT */
        -: 1486:      case ECMA_OBJECT_ROUTINE_KEYS:
        -: 1487:      {
    #####: 1488:        JERRY_ASSERT (builtin_routine_id - ECMA_OBJECT_ROUTINE_KEYS < ECMA_ENUMERABLE_PROPERTY__COUNT);
        -: 1489:
    #####: 1490:        const int option = builtin_routine_id - ECMA_OBJECT_ROUTINE_KEYS;
    #####: 1491:        result = ecma_builtin_object_object_keys_values_helper (obj_p,
        -: 1492:                                                                (ecma_enumerable_property_names_options_t) option);
    #####: 1493:        break;
        -: 1494:      }
    #####: 1495:      case ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_DESCRIPTOR:
        -: 1496:      {
    #####: 1497:        ecma_string_t *prop_name_p = ecma_op_to_property_key (arg2);
        -: 1498:
    #####: 1499:        if (prop_name_p == NULL)
        -: 1500:        {
    #####: 1501:          result = ECMA_VALUE_ERROR;
    #####: 1502:          break;
        -: 1503:        }
        -: 1504:
    #####: 1505:        result = ecma_builtin_object_object_get_own_property_descriptor (obj_p, prop_name_p);
    #####: 1506:        ecma_deref_ecma_string (prop_name_p);
    #####: 1507:        break;
        -: 1508:      }
        -: 1509:#if JERRY_ESNEXT
    #####: 1510:      case ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_DESCRIPTORS:
        -: 1511:      {
    #####: 1512:        result = ecma_builtin_object_object_get_own_property_descriptors (obj_p);
    #####: 1513:        break;
        -: 1514:      }
    #####: 1515:      case ECMA_OBJECT_ROUTINE_FROM_ENTRIES:
        -: 1516:      {
    #####: 1517:        result = ecma_builtin_object_from_entries (arg1);
    #####: 1518:        break;
        -: 1519:      }
        -: 1520:#endif /* JERRY_ESNEXT */
    #####: 1521:      default:
        -: 1522:      {
    #####: 1523:        JERRY_UNREACHABLE ();
        -: 1524:      }
        -: 1525:    }
        -: 1526:
        -: 1527:#if JERRY_ESNEXT
    #####: 1528:    ecma_deref_object (obj_p);
        -: 1529:#endif /* JERRY_ESNEXT */
    #####: 1530:    return result;
        -: 1531:  }
    #####: 1532:  else if (builtin_routine_id <= ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_SYMBOLS)
        -: 1533:  {
    #####: 1534:    return ecma_op_object_get_own_property_keys (arg1, builtin_routine_id);
        -: 1535:  }
    #####: 1536:  else if (builtin_routine_id <= ECMA_OBJECT_ROUTINE_SEAL)
        -: 1537:  {
        -: 1538:#if JERRY_ESNEXT
    #####: 1539:    if (!ecma_is_value_object (arg1))
        -: 1540:    {
    #####: 1541:      return ecma_copy_value (arg1);
        -: 1542:    }
        -: 1543:#endif /* JERRY_ESNEXT */
        -: 1544:
    #####: 1545:    obj_p = ecma_get_object_from_value (arg1);
    #####: 1546:    switch (builtin_routine_id)
        -: 1547:    {
    #####: 1548:      case ECMA_OBJECT_ROUTINE_SEAL:
        -: 1549:      {
    #####: 1550:        return ecma_builtin_object_object_seal (obj_p);
        -: 1551:      }
    #####: 1552:      case ECMA_OBJECT_ROUTINE_FREEZE:
        -: 1553:      {
    #####: 1554:        return ecma_builtin_object_object_freeze (obj_p);
        -: 1555:      }
    #####: 1556:      case ECMA_OBJECT_ROUTINE_PREVENT_EXTENSIONS:
        -: 1557:      {
    #####: 1558:        return ecma_builtin_object_object_prevent_extensions (obj_p);
        -: 1559:      }
    #####: 1560:      default:
        -: 1561:      {
    #####: 1562:        JERRY_UNREACHABLE ();
        -: 1563:      }
        -: 1564:    }
        -: 1565:  }
        -: 1566:  else
        -: 1567:  {
    #####: 1568:    JERRY_ASSERT (builtin_routine_id <= ECMA_OBJECT_ROUTINE_IS_SEALED);
        -: 1569:#if JERRY_ESNEXT
    #####: 1570:    if (!ecma_is_value_object (arg1))
        -: 1571:    {
    #####: 1572:      return ecma_make_boolean_value (builtin_routine_id != ECMA_OBJECT_ROUTINE_IS_EXTENSIBLE);
        -: 1573:    }
        -: 1574:#endif /* JERRY_ESNEXT */
        -: 1575:
    #####: 1576:    obj_p = ecma_get_object_from_value (arg1);
    #####: 1577:    switch (builtin_routine_id)
        -: 1578:    {
    #####: 1579:      case ECMA_OBJECT_ROUTINE_IS_SEALED:
        -: 1580:      case ECMA_OBJECT_ROUTINE_IS_FROZEN:
        -: 1581:      {
    #####: 1582:        return ecma_builtin_object_test_integrity_level (obj_p, builtin_routine_id);
        -: 1583:      }
    #####: 1584:      case ECMA_OBJECT_ROUTINE_IS_EXTENSIBLE:
        -: 1585:      {
    #####: 1586:        return ecma_builtin_object_object_is_extensible (obj_p);
        -: 1587:      }
    #####: 1588:      default:
        -: 1589:      {
    #####: 1590:        JERRY_UNREACHABLE ();
        -: 1591:      }
        -: 1592:    }
        -: 1593:  }
        -: 1594:} /* ecma_builtin_object_dispatch_routine */
        -: 1595:
        -: 1596:/**
        -: 1597: * @}
        -: 1598: * @}
        -: 1599: * @}
        -: 1600: */
