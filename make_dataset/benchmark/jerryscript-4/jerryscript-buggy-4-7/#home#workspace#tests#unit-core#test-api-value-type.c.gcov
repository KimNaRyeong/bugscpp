        -:    0:Source:/home/workspace/tests/unit-core/test-api-value-type.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:typedef struct
        -:   22:{
        -:   23:  jerry_type_t type_info;
        -:   24:  jerry_value_t value;
        -:   25:} test_entry_t;
        -:   26:
        -:   27:#define ENTRY(TYPE, VALUE) { TYPE, VALUE }
        -:   28:
        -:   29:static jerry_value_t
    #####:   30:test_ext_function (const jerry_call_info_t *call_info_p, /**< call information */
        -:   31:                   const jerry_value_t args_p[], /**< array of arguments */
        -:   32:                   const jerry_length_t args_cnt) /**< number of arguments */
        -:   33:{
        -:   34:  (void) call_info_p;
        -:   35:  (void) args_p;
        -:   36:  (void) args_cnt;
    #####:   37:  return jerry_create_boolean (true);
        -:   38:} /* test_ext_function */
        -:   39:
        -:   40:int
    #####:   41:main (void)
        -:   42:{
    #####:   43:  TEST_INIT ();
        -:   44:
    #####:   45:  jerry_init (JERRY_INIT_EMPTY);
        -:   46:
    #####:   47:  const jerry_char_t test_eval_function[] = "function demo(a) { return a + 1; }; demo";
        -:   48:
    #####:   49:  test_entry_t entries[] =
        -:   50:  {
    #####:   51:    ENTRY (JERRY_TYPE_NUMBER, jerry_create_number (-33.0)),
    #####:   52:    ENTRY (JERRY_TYPE_NUMBER, jerry_create_number (3)),
    #####:   53:    ENTRY (JERRY_TYPE_NUMBER, jerry_create_number_nan ()),
    #####:   54:    ENTRY (JERRY_TYPE_NUMBER, jerry_create_number_infinity (false)),
    #####:   55:    ENTRY (JERRY_TYPE_NUMBER, jerry_create_number_infinity (true)),
        -:   56:
    #####:   57:    ENTRY (JERRY_TYPE_BOOLEAN, jerry_create_boolean (true)),
    #####:   58:    ENTRY (JERRY_TYPE_BOOLEAN, jerry_create_boolean (false)),
        -:   59:
    #####:   60:    ENTRY (JERRY_TYPE_UNDEFINED, jerry_create_undefined ()),
        -:   61:
    #####:   62:    ENTRY (JERRY_TYPE_OBJECT, jerry_create_object ()),
    #####:   63:    ENTRY (JERRY_TYPE_OBJECT, jerry_create_array (10)),
    #####:   64:    ENTRY (JERRY_TYPE_ERROR, jerry_create_error (JERRY_ERROR_TYPE, (const jerry_char_t *) "error")),
        -:   65:
    #####:   66:    ENTRY (JERRY_TYPE_NULL, jerry_create_null ()),
        -:   67:
    #####:   68:    ENTRY (JERRY_TYPE_FUNCTION, jerry_eval (test_eval_function,
        -:   69:                                            sizeof (test_eval_function) - 1,
        -:   70:                                            JERRY_PARSE_NO_OPTS)),
    #####:   71:    ENTRY (JERRY_TYPE_FUNCTION, jerry_create_external_function (test_ext_function)),
        -:   72:
    #####:   73:    ENTRY (JERRY_TYPE_STRING, jerry_create_string (test_eval_function)),
    #####:   74:    ENTRY (JERRY_TYPE_STRING, jerry_create_string ((jerry_char_t *) "")),
        -:   75:  };
        -:   76:
    #####:   77:  for (size_t idx = 0; idx < sizeof (entries) / sizeof (entries[0]); idx++)
        -:   78:  {
    #####:   79:    jerry_type_t type_info = jerry_value_get_type (entries[idx].value);
        -:   80:
    #####:   81:    TEST_ASSERT (type_info != JERRY_TYPE_NONE);
    #####:   82:    TEST_ASSERT (type_info == entries[idx].type_info);
        -:   83:
    #####:   84:    jerry_release_value (entries[idx].value);
        -:   85:  }
        -:   86:
    #####:   87:  if (jerry_is_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:   88:  {
    #####:   89:    jerry_value_t symbol_desc_value = jerry_create_string ((jerry_char_t *) "foo");
    #####:   90:    jerry_value_t symbol_value = jerry_create_symbol (symbol_desc_value);
    #####:   91:    jerry_type_t type_info = jerry_value_get_type (symbol_value);
        -:   92:
    #####:   93:    TEST_ASSERT (type_info != JERRY_TYPE_NONE);
    #####:   94:    TEST_ASSERT (type_info == JERRY_TYPE_SYMBOL);
        -:   95:
    #####:   96:    jerry_release_value (symbol_value);
    #####:   97:    jerry_release_value (symbol_desc_value);
        -:   98:  }
        -:   99:
    #####:  100:  if (jerry_is_feature_enabled (JERRY_FEATURE_BIGINT))
        -:  101:  {
        -:  102:    /* Check simple bigint value type */
    #####:  103:    uint64_t digits_buffer[2] = { 1, 0 };
    #####:  104:    jerry_value_t value_bigint = jerry_create_bigint (digits_buffer, 2, false);
    #####:  105:    jerry_type_t value_type_info = jerry_value_get_type (value_bigint);
        -:  106:
    #####:  107:    TEST_ASSERT (value_type_info != JERRY_TYPE_NONE);
    #####:  108:    TEST_ASSERT (value_type_info == JERRY_TYPE_BIGINT);
        -:  109:
    #####:  110:    jerry_release_value (value_bigint);
        -:  111:
        -:  112:    /* Check bigint wrapped in object type */
    #####:  113:    jerry_char_t object_bigint_src[] = "Object(5n)";
    #####:  114:    jerry_value_t object_bigint = jerry_eval (object_bigint_src, sizeof (object_bigint_src) - 1, JERRY_PARSE_NO_OPTS);
    #####:  115:    TEST_ASSERT (!jerry_value_is_error (object_bigint));
        -:  116:
    #####:  117:    jerry_type_t object_type_info = jerry_value_get_type (object_bigint);
        -:  118:
    #####:  119:    TEST_ASSERT (object_type_info != JERRY_TYPE_NONE);
    #####:  120:    TEST_ASSERT (object_type_info == JERRY_TYPE_OBJECT);
        -:  121:
    #####:  122:    jerry_release_value (object_bigint);
        -:  123:  }
        -:  124:
    #####:  125:  if (jerry_is_feature_enabled (JERRY_FEATURE_REALM))
        -:  126:  {
    #####:  127:    jerry_value_t new_realm = jerry_create_realm ();
    #####:  128:    jerry_value_t old_realm = jerry_set_realm (new_realm);
        -:  129:
    #####:  130:    jerry_type_t new_realm_type = jerry_value_get_type (new_realm);
    #####:  131:    TEST_ASSERT (new_realm_type == JERRY_TYPE_OBJECT);
        -:  132:
    #####:  133:    jerry_value_t new_realm_this = jerry_realm_get_this (new_realm);
    #####:  134:    jerry_type_t new_realm_this_type = jerry_value_get_type (new_realm_this);
    #####:  135:    TEST_ASSERT (new_realm_this_type == JERRY_TYPE_OBJECT);
    #####:  136:    jerry_release_value (new_realm_this);
        -:  137:
    #####:  138:    jerry_type_t old_realm_type = jerry_value_get_type (old_realm);
    #####:  139:    TEST_ASSERT (old_realm_type == JERRY_TYPE_OBJECT);
        -:  140:
    #####:  141:    jerry_release_value (new_realm);
        -:  142:
    #####:  143:    jerry_value_t old_realm_this = jerry_realm_get_this (old_realm);
    #####:  144:    jerry_type_t old_realm_this_type = jerry_value_get_type (old_realm_this);
    #####:  145:    TEST_ASSERT (old_realm_this_type == JERRY_TYPE_OBJECT);
    #####:  146:    jerry_release_value (old_realm_this);
        -:  147:
        -:  148:    /* Restore the old realm as per docs */
    #####:  149:    jerry_set_realm (old_realm);
        -:  150:  }
        -:  151:
    #####:  152:  jerry_cleanup ();
        -:  153:
        -:  154:  return 0;
        -:  155:} /* main */
