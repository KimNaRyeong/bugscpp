        -:    0:Source:/home/workspace/tests/unit-ext/test-ext-handle-scope-handle-prelist.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:/**
        -:   17: * Unit test for jerry-ext/handle-scope-handle-prelist.
        -:   18: *
        -:   19: * Tests escaping jerry value that holds on scope's handle heap.
        -:   20: */
        -:   21:
        -:   22:#include "jerryscript.h"
        -:   23:#include "jerryscript-ext/handle-scope.h"
        -:   24:#include "test-common.h"
        -:   25:
        -:   26:static size_t native_free_cb_call_count;
        -:   27:static const size_t handle_count = JERRYX_HANDLE_PRELIST_SIZE * 2;
        -:   28:
        -:   29:static void
    #####:   30:native_free_cb (void *native_p, /**< native pointer */
        -:   31:                jerry_object_native_info_t *info_p) /**< native info */
        -:   32:{
        -:   33:  (void) native_p;
        -:   34:  (void) info_p;
    #####:   35:  ++native_free_cb_call_count;
    #####:   36:} /* native_free_cb */
        -:   37:
        -:   38:static const jerry_object_native_info_t native_info =
        -:   39:{
        -:   40:  .free_cb = native_free_cb,
        -:   41:  .number_of_references = 0,
        -:   42:  .offset_of_references = 0,
        -:   43:};
        -:   44:
        -:   45:static jerry_value_t
    #####:   46:create_object (void)
        -:   47:{
        -:   48:  jerryx_escapable_handle_scope scope;
    #####:   49:  jerryx_open_escapable_handle_scope (&scope);
        -:   50:
        -:   51:  jerry_value_t obj;
    #####:   52:  for (size_t idx = 0; idx < handle_count; idx ++)
        -:   53:  {
    #####:   54:    obj = jerryx_create_handle (jerry_create_object ());
    #####:   55:    jerry_set_object_native_pointer (obj, NULL, &native_info);
        -:   56:  }
        -:   57:
        -:   58:  // If leaves `escaped` uninitialized, there will be a style error on linux thrown by compiler
    #####:   59:  jerry_value_t escaped = 0;
    #####:   60:  jerryx_escape_handle (scope, obj, &escaped);
    #####:   61:  TEST_ASSERT (scope->prelist_handle_count == JERRYX_HANDLE_PRELIST_SIZE);
        -:   62:
    #####:   63:  jerryx_close_handle_scope (scope);
    #####:   64:  return escaped;
        -:   65:} /* create_object */
        -:   66:
        -:   67:static void
    #####:   68:test_handle_scope_val (void)
        -:   69:{
        -:   70:  jerryx_handle_scope scope;
    #####:   71:  jerryx_open_handle_scope (&scope);
    #####:   72:  jerry_value_t obj = create_object ();
        -:   73:  (void) obj;
        -:   74:
    #####:   75:  jerry_gc (JERRY_GC_PRESSURE_LOW);
    #####:   76:  TEST_ASSERT (native_free_cb_call_count == (handle_count -1));
        -:   77:
    #####:   78:  jerryx_close_handle_scope (scope);
    #####:   79:} /* test_handle_scope_val */
        -:   80:
        -:   81:int
    #####:   82:main (void)
        -:   83:{
    #####:   84:  jerry_init (JERRY_INIT_EMPTY);
        -:   85:
    #####:   86:  native_free_cb_call_count = 0;
    #####:   87:  test_handle_scope_val ();
        -:   88:
    #####:   89:  jerry_gc (JERRY_GC_PRESSURE_LOW);
    #####:   90:  TEST_ASSERT (native_free_cb_call_count == handle_count);
        -:   91:
    #####:   92:  jerry_cleanup ();
        -:   93:} /* main */
