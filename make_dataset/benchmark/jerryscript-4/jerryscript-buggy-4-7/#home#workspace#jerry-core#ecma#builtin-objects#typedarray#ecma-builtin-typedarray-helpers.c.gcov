        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/typedarray/ecma-builtin-typedarray-helpers.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtin-typedarray-helpers.h"
        -:   17:
        -:   18:#if JERRY_BUILTIN_TYPEDARRAY
        -:   19:
        -:   20:#include "ecma-builtins.h"
        -:   21:#include "ecma-gc.h"
        -:   22:#include "ecma-objects.h"
        -:   23:#include "ecma-typedarray-object.h"
        -:   24:#include "ecma-function-object.h"
        -:   25:#include "jcontext.h"
        -:   26:
        -:   27:#define ECMA_BUILTINS_INTERNAL
        -:   28:#include "ecma-builtins-internal.h"
        -:   29:
        -:   30:/**
        -:   31: * Common implementation of the [[Construct]] call of TypedArrays.
        -:   32: *
        -:   33: * @return ecma value of the new TypedArray object
        -:   34: *         Returned value must be freed with ecma_free_value
        -:   35: */
        -:   36:ecma_value_t
    #####:   37:ecma_typedarray_helper_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   38:                                           uint32_t arguments_list_len, /**< number of arguments */
        -:   39:                                           ecma_typedarray_type_t typedarray_id) /**< id of the typedarray */
        -:   40:{
    #####:   41:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
    #####:   42:  ecma_builtin_id_t proto_id = ecma_typedarray_helper_get_prototype_id (typedarray_id);
    #####:   43:  ecma_object_t *prototype_obj_p = NULL;
    #####:   44:  ecma_object_t *current_new_target_p = JERRY_CONTEXT (current_new_target_p);
        -:   45:
    #####:   46:  if (current_new_target_p != NULL)
        -:   47:  {
    #####:   48:    prototype_obj_p = ecma_op_get_prototype_from_constructor (current_new_target_p, proto_id);
    #####:   49:    if (prototype_obj_p == NULL)
        -:   50:    {
    #####:   51:      return ECMA_VALUE_ERROR;
        -:   52:    }
        -:   53:  }
        -:   54:  else
        -:   55:  {
    #####:   56:    prototype_obj_p = ecma_builtin_get (proto_id);
        -:   57:  }
        -:   58:
    #####:   59:  ecma_value_t val = ecma_op_create_typedarray (arguments_list_p,
        -:   60:                                                arguments_list_len,
        -:   61:                                                prototype_obj_p,
    #####:   62:                                                ecma_typedarray_helper_get_shift_size (typedarray_id),
        -:   63:                                                typedarray_id);
        -:   64:
    #####:   65:  if (current_new_target_p != NULL)
        -:   66:  {
    #####:   67:    ecma_deref_object (prototype_obj_p);
        -:   68:  }
        -:   69:
    #####:   70:  return val;
        -:   71:} /* ecma_typedarray_helper_dispatch_construct */
        -:   72:
        -:   73:#endif /* JERRY_BUILTIN_TYPEDARRAY */
