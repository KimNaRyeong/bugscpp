        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-number.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <math.h>
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-bigint.h"
        -:   20:#include "ecma-builtins.h"
        -:   21:#include "ecma-conversion.h"
        -:   22:#include "ecma-exceptions.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-globals.h"
        -:   25:#include "ecma-helpers.h"
        -:   26:#include "ecma-number-object.h"
        -:   27:#include "ecma-objects.h"
        -:   28:#include "jrt.h"
        -:   29:
        -:   30:#if JERRY_BUILTIN_NUMBER
        -:   31:
        -:   32:#define ECMA_BUILTINS_INTERNAL
        -:   33:#include "ecma-builtins-internal.h"
        -:   34:
        -:   35:#if JERRY_ESNEXT
        -:   36:/**
        -:   37: * This object has a custom dispatch function.
        -:   38: */
        -:   39:#define BUILTIN_CUSTOM_DISPATCH
        -:   40:
        -:   41:/**
        -:   42: * List of built-in routine identifiers.
        -:   43: */
        -:   44:enum
        -:   45:{
        -:   46:  ECMA_NUMBER_OBJECT_ROUTINE_START = 0,
        -:   47:  ECMA_NUMBER_OBJECT_ROUTINE_IS_FINITE,
        -:   48:  ECMA_NUMBER_OBJECT_ROUTINE_IS_NAN,
        -:   49:  ECMA_NUMBER_OBJECT_ROUTINE_IS_INTEGER,
        -:   50:  ECMA_NUMBER_OBJECT_ROUTINE_IS_SAFE_INTEGER
        -:   51:};
        -:   52:#endif /* JERRY_ESNEXT */
        -:   53:
        -:   54:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-number.inc.h"
        -:   55:#define BUILTIN_UNDERSCORED_ID number
        -:   56:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   57:
        -:   58:/** \addtogroup ecma ECMA
        -:   59: * @{
        -:   60: *
        -:   61: * \addtogroup ecmabuiltins
        -:   62: * @{
        -:   63: *
        -:   64: * \addtogroup number ECMA Number object built-in
        -:   65: * @{
        -:   66: */
        -:   67:
        -:   68:/**
        -:   69: * Handle calling [[Call]] of built-in Number object
        -:   70: *
        -:   71: * @return ecma value
        -:   72: */
        -:   73:ecma_value_t
    #####:   74:ecma_builtin_number_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   75:                                   uint32_t arguments_list_len) /**< number of arguments */
        -:   76:{
    #####:   77:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   78:
    #####:   79:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -:   80:
    #####:   81:  if (arguments_list_len == 0)
        -:   82:  {
    #####:   83:    ret_value = ecma_make_integer_value (0);
        -:   84:  }
        -:   85:  else
        -:   86:  {
    #####:   87:    ecma_number_t num;
    #####:   88:    ret_value = ecma_op_to_numeric (arguments_list_p[0], &num, ECMA_TO_NUMERIC_ALLOW_BIGINT);
        -:   89:
    #####:   90:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -:   91:    {
    #####:   92:      return ret_value;
        -:   93:    }
        -:   94:
        -:   95:#if JERRY_BUILTIN_BIGINT
    #####:   96:    if (ecma_is_value_bigint (ret_value))
        -:   97:    {
    #####:   98:      ecma_value_t bigint = ret_value;
    #####:   99:      ret_value = ecma_bigint_to_number (bigint);
    #####:  100:      ecma_free_value (bigint);
        -:  101:    }
        -:  102:    else
        -:  103:#endif /* JERRY_BUILTIN_BIGINT */
        -:  104:    {
    #####:  105:      ret_value = ecma_make_number_value (num);
        -:  106:    }
        -:  107:  }
        -:  108:
    #####:  109:  return ret_value;
        -:  110:} /* ecma_builtin_number_dispatch_call */
        -:  111:
        -:  112:/**
        -:  113: * Handle calling [[Construct]] of built-in Number object
        -:  114: *
        -:  115: * @return ecma value
        -:  116: */
        -:  117:ecma_value_t
    #####:  118:ecma_builtin_number_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  119:                                        uint32_t arguments_list_len) /**< number of arguments */
        -:  120:{
    #####:  121:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  122:
    #####:  123:  if (arguments_list_len == 0)
        -:  124:  {
    #####:  125:    return ecma_op_create_number_object (ecma_make_integer_value (0));
        -:  126:  }
        -:  127:
        -:  128:#if JERRY_BUILTIN_BIGINT
    #####:  129:  ecma_number_t num;
    #####:  130:  ecma_value_t value = ecma_op_to_numeric (arguments_list_p[0], &num, ECMA_TO_NUMERIC_ALLOW_BIGINT);
        -:  131:
    #####:  132:  if (ECMA_IS_VALUE_ERROR (value))
        -:  133:  {
    #####:  134:    return value;
        -:  135:  }
        -:  136:
    #####:  137:  if (ecma_is_value_bigint (value))
        -:  138:  {
    #####:  139:    ecma_value_t bigint = value;
    #####:  140:    value = ecma_bigint_to_number (bigint);
    #####:  141:    ecma_free_value (bigint);
        -:  142:  }
        -:  143:  else
        -:  144:  {
    #####:  145:    value = ecma_make_number_value (num);
        -:  146:  }
        -:  147:
    #####:  148:  ecma_value_t result = ecma_op_create_number_object (value);
    #####:  149:  ecma_free_value (value);
    #####:  150:  return result;
        -:  151:#else /* !JERRY_BUILTIN_BIGINT */
    #####:  152:  return ecma_op_create_number_object (arguments_list_p[0]);
        -:  153:#endif /* JERRY_BUILTIN_BIGINT */
        -:  154:} /* ecma_builtin_number_dispatch_construct */
        -:  155:
        -:  156:#if JERRY_ESNEXT
        -:  157:/**
        -:  158: * The Number object 'isInteger' and 'isSafeInteger' routine
        -:  159: *
        -:  160: * See also:
        -:  161: *          ECMA-262 v6, 20.1.2.3
        -:  162: *          ECMA-262 v6, 20.1.2.3
        -:  163: *
        -:  164: * @return ecma value
        -:  165: *         Returned value must be freed with ecma_free_value.
        -:  166: */
        -:  167:static ecma_value_t
    #####:  168:ecma_builtin_number_object_is_integer_helper (ecma_value_t arg, /**< routine's argument */
        -:  169:                                              ecma_number_t num, /**< this number */
        -:  170:                                              bool is_safe) /**< is the number safe */
        -:  171:{
    #####:  172:  if (ecma_number_is_nan (num) || ecma_number_is_infinity (num))
        -:  173:  {
    #####:  174:    return ECMA_VALUE_FALSE;
        -:  175:  }
        -:  176:
    #####:  177:  ecma_number_t int_num;
        -:  178:
    #####:  179:  if (is_safe)
        -:  180:  {
    #####:  181:    int_num = ecma_number_trunc (num);
        -:  182:
    #####:  183:    if (fabs (int_num) > ECMA_NUMBER_MAX_SAFE_INTEGER)
        -:  184:    {
    #####:  185:      return ECMA_VALUE_FALSE;
        -:  186:    }
        -:  187:  }
        -:  188:  else
        -:  189:  {
    #####:  190:    ecma_op_to_integer (arg, &int_num);
        -:  191:  }
        -:  192:
    #####:  193:  return (int_num == num) ? ECMA_VALUE_TRUE : ECMA_VALUE_FALSE;
        -:  194:} /* ecma_builtin_number_object_is_integer_helper */
        -:  195:
        -:  196:/**
        -:  197: * Dispatcher of the built-in's routines
        -:  198: *
        -:  199: * @return ecma value
        -:  200: *         Returned value must be freed with ecma_free_value.
        -:  201: */
        -:  202:ecma_value_t
    #####:  203:ecma_builtin_number_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  204:                                      ecma_value_t this_arg, /**< 'this' argument value */
        -:  205:                                      const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  206:                                                                              *   passed to routine */
        -:  207:                                      uint32_t arguments_number) /**< length of arguments' list */
        -:  208:{
        -:  209:  JERRY_UNUSED_2 (this_arg, arguments_number);
        -:  210:
    #####:  211:  if (!ecma_is_value_number (arguments_list_p[0]))
        -:  212:  {
    #####:  213:    return ECMA_VALUE_FALSE;
        -:  214:  }
        -:  215:
    #####:  216:  ecma_number_t num = ecma_get_number_from_value (arguments_list_p[0]);
        -:  217:
    #####:  218:  switch (builtin_routine_id)
        -:  219:  {
    #####:  220:    case ECMA_NUMBER_OBJECT_ROUTINE_IS_FINITE:
        -:  221:    {
    #####:  222:      return ecma_make_boolean_value (!(ecma_number_is_nan (num) || ecma_number_is_infinity (num)));
        -:  223:    }
    #####:  224:    case ECMA_NUMBER_OBJECT_ROUTINE_IS_NAN:
        -:  225:    {
    #####:  226:      return ecma_make_boolean_value (ecma_number_is_nan (num));
        -:  227:    }
    #####:  228:    case ECMA_NUMBER_OBJECT_ROUTINE_IS_INTEGER:
        -:  229:    case ECMA_NUMBER_OBJECT_ROUTINE_IS_SAFE_INTEGER:
        -:  230:    {
    #####:  231:      bool is_safe = (builtin_routine_id == ECMA_NUMBER_OBJECT_ROUTINE_IS_SAFE_INTEGER);
    #####:  232:      return ecma_builtin_number_object_is_integer_helper (arguments_list_p[0], num, is_safe);
        -:  233:    }
    #####:  234:    default:
        -:  235:    {
    #####:  236:      JERRY_UNREACHABLE ();
        -:  237:    }
        -:  238:  }
        -:  239:} /* ecma_builtin_number_dispatch_routine */
        -:  240:
        -:  241:#endif /* JERRY_ESNEXT */
        -:  242:
        -:  243:/**
        -:  244: * @}
        -:  245: * @}
        -:  246: * @}
        -:  247: */
        -:  248:
        -:  249:#endif /* JERRY_BUILTIN_NUMBER */
