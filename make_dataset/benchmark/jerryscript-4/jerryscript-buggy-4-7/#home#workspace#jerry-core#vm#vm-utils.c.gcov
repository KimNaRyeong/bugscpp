        -:    0:Source:/home/workspace/jerry-core/vm/vm-utils.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-array-object.h"
        -:   17:#include "ecma-helpers.h"
        -:   18:#include "ecma-line-info.h"
        -:   19:#include "jcontext.h"
        -:   20:#include "lit-char-helpers.h"
        -:   21:#include "vm.h"
        -:   22:
        -:   23:/**
        -:   24: * Check whether currently executed code is strict mode code
        -:   25: *
        -:   26: * @return true - current code is executed in strict mode,
        -:   27: *         false - otherwise
        -:   28: */
        -:   29:bool
    #####:   30:vm_is_strict_mode (void)
        -:   31:{
    #####:   32:  JERRY_ASSERT (JERRY_CONTEXT (vm_top_context_p) != NULL);
        -:   33:
    #####:   34:  return JERRY_CONTEXT (vm_top_context_p)->status_flags & VM_FRAME_CTX_IS_STRICT;
        -:   35:} /* vm_is_strict_mode */
        -:   36:
        -:   37:/**
        -:   38: * Check whether currently performed call (on top of call-stack) is performed in form,
        -:   39: * meeting conditions of 'Direct Call to Eval' (see also: ECMA-262 v5, 15.1.2.1.1)
        -:   40: *
        -:   41: * Warning:
        -:   42: *         the function should only be called from implementation
        -:   43: *         of built-in 'eval' routine of Global object
        -:   44: *
        -:   45: * @return true - currently performed call is performed through 'eval' identifier,
        -:   46: *                without 'this' argument,
        -:   47: *         false - otherwise
        -:   48: */
        -:   49:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:   50:vm_is_direct_eval_form_call (void)
        -:   51:{
    #####:   52:  return (JERRY_CONTEXT (status_flags) & ECMA_STATUS_DIRECT_EVAL) != 0;
        -:   53:} /* vm_is_direct_eval_form_call */
        -:   54:
        -:   55:/**
        -:   56: * Get backtrace. The backtrace is an array of strings where
        -:   57: * each string contains the position of the corresponding frame.
        -:   58: * The array length is zero if the backtrace is not available.
        -:   59: *
        -:   60: * @return array ecma value
        -:   61: */
        -:   62:ecma_value_t
    #####:   63:vm_get_backtrace (uint32_t max_depth) /**< maximum backtrace depth, 0 = unlimited */
        -:   64:{
        -:   65:#if JERRY_LINE_INFO
    #####:   66:  vm_frame_ctx_t *context_p = JERRY_CONTEXT (vm_top_context_p);
        -:   67:
    #####:   68:  if (max_depth == 0)
        -:   69:  {
    #####:   70:    max_depth = UINT32_MAX;
        -:   71:  }
        -:   72:
    #####:   73:  ecma_object_t *array_p = ecma_op_new_array_object (0);
        -:   74:  JERRY_ASSERT (ecma_op_object_is_fast_array (array_p));
    #####:   75:  uint32_t index = 0;
        -:   76:
    #####:   77:  while (context_p != NULL)
        -:   78:  {
    #####:   79:    const ecma_compiled_code_t *bytecode_header_p = context_p->shared_p->bytecode_header_p;
    #####:   80:    ecma_value_t resource_name = ecma_get_resource_name (bytecode_header_p);
    #####:   81:    ecma_string_t *str_p = ecma_get_string_from_value (resource_name);
    #####:   82:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
        -:   83:
    #####:   84:    if (ecma_string_is_empty (str_p))
        -:   85:    {
    #####:   86:      ecma_stringbuilder_append_raw (&builder, (const lit_utf8_byte_t *)"<unknown>:", 10);
        -:   87:    }
        -:   88:    else
        -:   89:    {
    #####:   90:      ecma_stringbuilder_append (&builder, str_p);
    #####:   91:      ecma_stringbuilder_append_byte (&builder, LIT_CHAR_COLON);
        -:   92:    }
        -:   93:
    #####:   94:    if (bytecode_header_p->status_flags & CBC_CODE_FLAGS_HAS_LINE_INFO)
        -:   95:    {
        -:   96:      jerry_backtrace_location_t location;
    #####:   97:      ecma_line_info_get (ecma_compiled_code_get_line_info (bytecode_header_p),
    #####:   98:                          (uint32_t) (context_p->byte_code_p - context_p->byte_code_start_p),
        -:   99:                          &location);
        -:  100:
    #####:  101:      ecma_string_t *line_str_p = ecma_new_ecma_string_from_uint32 (location.line);
    #####:  102:      ecma_stringbuilder_append (&builder, line_str_p);
    #####:  103:      ecma_deref_ecma_string (line_str_p);
        -:  104:
    #####:  105:      ecma_stringbuilder_append_byte (&builder, LIT_CHAR_COLON);
        -:  106:
    #####:  107:      line_str_p = ecma_new_ecma_string_from_uint32 (location.column);
    #####:  108:      ecma_stringbuilder_append (&builder, line_str_p);
    #####:  109:      ecma_deref_ecma_string (line_str_p);
        -:  110:    }
        -:  111:    else
        -:  112:    {
    #####:  113:      ecma_stringbuilder_append_raw (&builder, (const lit_utf8_byte_t *)"1:1", 3);
        -:  114:    }
        -:  115:
    #####:  116:    ecma_string_t *builder_str_p = ecma_stringbuilder_finalize (&builder);
    #####:  117:    ecma_fast_array_set_property (array_p, index, ecma_make_string_value (builder_str_p));
    #####:  118:    ecma_deref_ecma_string (builder_str_p);
        -:  119:
    #####:  120:    context_p = context_p->prev_context_p;
    #####:  121:    index++;
        -:  122:
    #####:  123:    if (index >= max_depth)
        -:  124:    {
        -:  125:      break;
        -:  126:    }
        -:  127:  }
        -:  128:
    #####:  129:  return ecma_make_object_value (array_p);
        -:  130:#else /* !JERRY_LINE_INFO */
        -:  131:  JERRY_UNUSED (max_depth);
        -:  132:
    #####:  133:  return ecma_make_object_value (ecma_op_new_array_object (0));
        -:  134:#endif /* JERRY_LINE_INFO */
        -:  135:} /* vm_get_backtrace */
