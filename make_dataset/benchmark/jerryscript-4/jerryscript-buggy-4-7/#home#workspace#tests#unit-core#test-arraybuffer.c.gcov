        -:    0:Source:/home/workspace/tests/unit-core/test-arraybuffer.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript-port-default.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:/**
        -:   22: * Register a JavaScript value in the global object.
        -:   23: */
        -:   24:static void
    #####:   25:register_js_value (const char *name_p, /**< name of the function */
        -:   26:                   jerry_value_t value) /**< JS value */
        -:   27:{
    #####:   28:  jerry_value_t global_obj_val = jerry_get_global_object ();
        -:   29:
    #####:   30:  jerry_value_t name_val = jerry_create_string ((const jerry_char_t *) name_p);
    #####:   31:  jerry_value_t result_val = jerry_set_property (global_obj_val, name_val, value);
    #####:   32:  TEST_ASSERT (jerry_value_is_boolean (result_val));
        -:   33:
    #####:   34:  jerry_release_value (name_val);
    #####:   35:  jerry_release_value (global_obj_val);
        -:   36:
    #####:   37:  jerry_release_value (result_val);
    #####:   38:} /* register_js_value */
        -:   39:
        -:   40:static jerry_value_t
    #####:   41:assert_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   42:                const jerry_value_t args_p[], /**< function arguments */
        -:   43:                const jerry_length_t args_cnt) /**< number of function arguments */
        -:   44:{
        -:   45:  JERRY_UNUSED (call_info_p);
        -:   46:
    #####:   47:  if (args_cnt > 0
    #####:   48:      && jerry_value_is_true (args_p[0]))
        -:   49:  {
    #####:   50:    return jerry_create_boolean (true);
        -:   51:  }
        -:   52:
    #####:   53:  if (args_cnt > 1
    #####:   54:      && jerry_value_is_string (args_p[1]))
    #####:   55:  {
    #####:   56:    jerry_length_t utf8_sz = jerry_get_string_size (args_p[1]);
    #####:   57:    TEST_ASSERT (utf8_sz <= 127); /* 127 is the expected max assert fail message size. */
    #####:   58:    JERRY_VLA (char, string_from_utf8, utf8_sz + 1);
    #####:   59:    string_from_utf8[utf8_sz] = 0;
        -:   60:
    #####:   61:    jerry_string_to_char_buffer (args_p[1], (jerry_char_t *) string_from_utf8, utf8_sz);
        -:   62:
    #####:   63:    printf ("JS assert: %s\n", string_from_utf8);
        -:   64:  }
        -:   65:
    #####:   66:  TEST_ASSERT (false);
        -:   67:} /* assert_handler */
        -:   68:
        -:   69:/**
        -:   70: * Test ArrayBuffer 'read' api call with various offset values.
        -:   71: */
        -:   72:static void
    #####:   73:test_read_with_offset (uint8_t offset) /**< offset for buffer read. */
        -:   74:{
    #####:   75:  const jerry_char_t eval_arraybuffer_src[] = TEST_STRING_LITERAL (
        -:   76:    "var array = new Uint8Array (15);"
        -:   77:    "for (var i = 0; i < array.length; i++) { array[i] = i * 2; };"
        -:   78:    "array.buffer"
        -:   79:  );
    #####:   80:  jerry_value_t arraybuffer = jerry_eval (eval_arraybuffer_src,
        -:   81:                                          sizeof (eval_arraybuffer_src) - 1,
        -:   82:                                          JERRY_PARSE_STRICT_MODE);
        -:   83:
    #####:   84:  TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:   85:  TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:   86:  TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == 15);
        -:   87:
        -:   88:  uint8_t buffer[20];
    #####:   89:  memset (buffer, 120, 20);
        -:   90:
        -:   91:  /* Try to copy more than the target buffer size. */
    #####:   92:  jerry_length_t copied = jerry_arraybuffer_read (arraybuffer, offset, buffer, 20);
    #####:   93:  TEST_ASSERT (copied == (jerry_length_t) (15 - offset));
        -:   94:
    #####:   95:  for (uint8_t i = 0; i < copied; i++)
        -:   96:  {
    #####:   97:    TEST_ASSERT (buffer[i] == (i + offset) * 2);
        -:   98:  }
    #####:   99:  TEST_ASSERT (buffer[15 - offset] == 120);
        -:  100:
    #####:  101:  jerry_release_value (arraybuffer);
    #####:  102:} /* test_read_with_offset */
        -:  103:
        -:  104:/**
        -:  105: * Test ArrayBuffer 'write' api call with various offset values.
        -:  106: */
    #####:  107:static void test_write_with_offset (uint8_t offset) /**< offset for buffer write. */
        -:  108:{
        -:  109:  {
    #####:  110:    jerry_value_t offset_val = jerry_create_number (offset);
    #####:  111:    register_js_value ("offset", offset_val);
    #####:  112:    jerry_release_value (offset_val);
        -:  113:  }
        -:  114:
    #####:  115:  const jerry_char_t eval_arraybuffer_src[] = "var array = new Uint8Array (15); array.buffer";
    #####:  116:  jerry_value_t arraybuffer = jerry_eval (eval_arraybuffer_src,
        -:  117:                                          sizeof (eval_arraybuffer_src) - 1,
        -:  118:                                          JERRY_PARSE_STRICT_MODE);
        -:  119:
    #####:  120:  TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  121:  TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  122:  TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == 15);
        -:  123:
        -:  124:  uint8_t buffer[20];
        -:  125:
    #####:  126:  for (uint8_t i = 0; i < 20; i++)
        -:  127:  {
    #####:  128:    buffer[i] = (uint8_t) (i * 3);
        -:  129:  }
        -:  130:
        -:  131:  /* Intentionally copy more than the allowed space. */
    #####:  132:  jerry_length_t copied = jerry_arraybuffer_write (arraybuffer, offset, buffer, 20);
    #####:  133:  TEST_ASSERT (copied == (jerry_length_t) (15 - offset));
        -:  134:
    #####:  135:  const jerry_char_t eval_test_arraybuffer[] = TEST_STRING_LITERAL (
        -:  136:    "for (var i = 0; i < offset; i++)"
        -:  137:    "{"
        -:  138:    "  assert (array[i] == 0, 'offset check for: ' + i + ' was: ' + array[i] + ' should be: 0');"
        -:  139:    "};"
        -:  140:    "for (var i = offset; i < array.length; i++)"
        -:  141:    "{"
        -:  142:    "  var expected = (i - offset) * 3;"
        -:  143:    "  assert (array[i] == expected, 'calc check for: ' + i + ' was: ' + array[i] + ' should be: ' + expected);"
        -:  144:    "};"
        -:  145:    "assert (array[15] === undefined, 'ArrayBuffer out of bounds index should return undefined value');"
        -:  146:  );
    #####:  147:  jerry_value_t res = jerry_eval (eval_test_arraybuffer,
        -:  148:                                  sizeof (eval_test_arraybuffer) - 1,
        -:  149:                                  JERRY_PARSE_STRICT_MODE);
    #####:  150:  jerry_release_value (res);
    #####:  151:  jerry_release_value (arraybuffer);
    #####:  152:} /* test_write_with_offset */
        -:  153:
        -:  154:static bool callback_called = false;
        -:  155:static bool detach_free_callback_called = false;
        -:  156:
    #####:  157:static void test_free_cb (void *buffer) /**< buffer to free (if needed) */
        -:  158:{
        -:  159:  (void) buffer;
    #####:  160:  callback_called = true;
    #####:  161:} /* test_free_cb */
        -:  162:
    #####:  163:static void test_detach_free_cb (void *buffer) /**< buffer to free */
        -:  164:{
    #####:  165:  free (buffer);
    #####:  166:  detach_free_callback_called = true;
    #####:  167:} /* test_detach_free_cb */
        -:  168:
        -:  169:int
    #####:  170:main (void)
        -:  171:{
    #####:  172:  jerry_init (JERRY_INIT_EMPTY);
        -:  173:
    #####:  174:  if (!jerry_is_feature_enabled (JERRY_FEATURE_TYPEDARRAY))
        -:  175:  {
    #####:  176:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "ArrayBuffer is disabled!\n");
    #####:  177:    jerry_cleanup ();
    #####:  178:    return 0;
        -:  179:  }
        -:  180:
    #####:  181:  jerry_value_t function_val = jerry_create_external_function (assert_handler);
    #####:  182:  register_js_value ("assert", function_val);
    #####:  183:  jerry_release_value (function_val);
        -:  184:
        -:  185:  /* Test array buffer queries */
        -:  186:  {
    #####:  187:    const jerry_char_t eval_arraybuffer_src[] = "new ArrayBuffer (10)";
    #####:  188:    jerry_value_t eval_arraybuffer = jerry_eval (eval_arraybuffer_src,
        -:  189:                                                 sizeof (eval_arraybuffer_src) - 1,
        -:  190:                                                 JERRY_PARSE_STRICT_MODE);
    #####:  191:    TEST_ASSERT (!jerry_value_is_error (eval_arraybuffer));
    #####:  192:    TEST_ASSERT (jerry_value_is_arraybuffer (eval_arraybuffer));
    #####:  193:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (eval_arraybuffer) == 10);
    #####:  194:    jerry_release_value (eval_arraybuffer);
        -:  195:  }
        -:  196:
        -:  197:  /* Test array buffer creation */
        -:  198:  {
    #####:  199:    const uint32_t length = 15;
    #####:  200:    jerry_value_t arraybuffer = jerry_create_arraybuffer (length);
    #####:  201:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  202:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  203:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
    #####:  204:    jerry_release_value (arraybuffer);
        -:  205:  }
        -:  206:
        -:  207:  /* Test array buffer read operations */
    #####:  208:  for (uint8_t i = 0; i < 15; i++)
        -:  209:  {
    #####:  210:    test_read_with_offset (i);
        -:  211:  }
        -:  212:
        -:  213:  /* Test zero length ArrayBuffer read */
        -:  214:  {
    #####:  215:    const uint32_t length = 0;
    #####:  216:    jerry_value_t arraybuffer = jerry_create_arraybuffer (length);
    #####:  217:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  218:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  219:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
        -:  220:
        -:  221:    uint8_t data[20];
    #####:  222:    memset (data, 11, 20);
        -:  223:
    #####:  224:    jerry_length_t bytes_read = jerry_arraybuffer_read (arraybuffer, 0, data, 20);
    #####:  225:    TEST_ASSERT (bytes_read == 0);
        -:  226:
    #####:  227:    for (int i = 0; i < 20; i++)
        -:  228:    {
    #####:  229:      TEST_ASSERT (data[i] == 11);
        -:  230:    }
        -:  231:
    #####:  232:    jerry_release_value (arraybuffer);
        -:  233:  }
        -:  234:
        -:  235:  /* Test array buffer write operations */
    #####:  236:  for (uint8_t i = 0; i < 15; i++)
        -:  237:  {
    #####:  238:    test_write_with_offset (i);
        -:  239:  }
        -:  240:
        -:  241:  /* Test zero length ArrayBuffer write */
        -:  242:  {
    #####:  243:    const uint32_t length = 0;
    #####:  244:    jerry_value_t arraybuffer = jerry_create_arraybuffer (length);
    #####:  245:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  246:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  247:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
        -:  248:
        -:  249:    uint8_t data[20];
    #####:  250:    memset (data, 11, 20);
        -:  251:
    #####:  252:    jerry_length_t bytes_written = jerry_arraybuffer_write (arraybuffer, 0, data, 20);
    #####:  253:    TEST_ASSERT (bytes_written == 0);
        -:  254:
    #####:  255:    jerry_release_value (arraybuffer);
        -:  256:  }
        -:  257:
        -:  258:  /* Test zero length external ArrayBuffer */
        -:  259:  {
    #####:  260:    const uint32_t length = 0;
    #####:  261:    jerry_value_t arraybuffer = jerry_create_arraybuffer_external (length, NULL, NULL);
    #####:  262:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  263:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  264:    TEST_ASSERT (jerry_is_arraybuffer_detachable (arraybuffer));
    #####:  265:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
        -:  266:
        -:  267:    uint8_t data[20];
    #####:  268:    memset (data, 11, 20);
        -:  269:
    #####:  270:    jerry_length_t bytes_written = jerry_arraybuffer_write (arraybuffer, 0, data, 20);
    #####:  271:    TEST_ASSERT (bytes_written == 0);
        -:  272:
    #####:  273:    jerry_release_value (arraybuffer);
        -:  274:  }
        -:  275:
        -:  276:  /* Test ArrayBuffer with buffer allocated externally */
    #####:  277:  {
    #####:  278:    const uint32_t buffer_size = 15;
    #####:  279:    const uint8_t base_value = 51;
        -:  280:
    #####:  281:    JERRY_VLA (uint8_t, buffer_p, buffer_size);
    #####:  282:    memset (buffer_p, base_value, buffer_size);
        -:  283:
    #####:  284:    jerry_value_t arrayb = jerry_create_arraybuffer_external (buffer_size, buffer_p, test_free_cb);
    #####:  285:    uint8_t new_value = 123;
    #####:  286:    jerry_length_t copied = jerry_arraybuffer_write (arrayb, 0, &new_value, 1);
    #####:  287:    TEST_ASSERT (copied == 1);
    #####:  288:    TEST_ASSERT (buffer_p[0] == new_value);
    #####:  289:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arrayb) == buffer_size);
        -:  290:
    #####:  291:    for (uint32_t i = 1; i < buffer_size; i++)
        -:  292:    {
    #####:  293:      TEST_ASSERT (buffer_p[i] == base_value);
        -:  294:    }
        -:  295:
    #####:  296:    JERRY_VLA (uint8_t, test_buffer, buffer_size);
    #####:  297:    jerry_length_t read = jerry_arraybuffer_read (arrayb, 0, test_buffer, buffer_size);
    #####:  298:    TEST_ASSERT (read == buffer_size);
    #####:  299:    TEST_ASSERT (test_buffer[0] == new_value);
        -:  300:
    #####:  301:    for (uint32_t i = 1; i < buffer_size; i++)
        -:  302:    {
    #####:  303:      TEST_ASSERT (test_buffer[i] == base_value);
        -:  304:    }
        -:  305:
    #####:  306:    TEST_ASSERT (jerry_value_is_arraybuffer (arrayb));
    #####:  307:    jerry_release_value (arrayb);
        -:  308:  }
        -:  309:
        -:  310:  /* Test ArrayBuffer external memory map/unmap */
    #####:  311:  {
    #####:  312:    const uint32_t buffer_size = 20;
    #####:  313:    JERRY_VLA (uint8_t, buffer_p, buffer_size);
        -:  314:
    #####:  315:    jerry_value_t input_buffer = jerry_create_arraybuffer_external (buffer_size, buffer_p, NULL);
    #####:  316:    register_js_value ("input_buffer", input_buffer);
    #####:  317:    jerry_release_value (input_buffer);
        -:  318:
    #####:  319:    const jerry_char_t eval_arraybuffer_src[] = TEST_STRING_LITERAL (
        -:  320:      "var array = new Uint8Array(input_buffer);"
        -:  321:      "for (var i = 0; i < array.length; i++)"
        -:  322:      "{"
        -:  323:      "  array[i] = i * 2;"
        -:  324:      "};"
        -:  325:      "array.buffer"
        -:  326:    );
    #####:  327:    jerry_value_t buffer = jerry_eval (eval_arraybuffer_src,
        -:  328:                                       sizeof (eval_arraybuffer_src) - 1,
        -:  329:                                       JERRY_PARSE_STRICT_MODE);
        -:  330:
    #####:  331:    TEST_ASSERT (!jerry_value_is_error (buffer));
    #####:  332:    TEST_ASSERT (jerry_value_is_arraybuffer (buffer));
    #####:  333:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (buffer) == 20);
        -:  334:
    #####:  335:    uint8_t *const data = jerry_get_arraybuffer_pointer (buffer);
        -:  336:
        -:  337:    /* test memory read */
    #####:  338:    for (int i = 0; i < 20; i++)
        -:  339:    {
    #####:  340:      TEST_ASSERT (data[i] == (uint8_t) (i * 2));
        -:  341:    }
        -:  342:
        -:  343:    /* "upload" new data */
        -:  344:    double sum = 0;
    #####:  345:    for (int i = 0; i < 20; i++)
        -:  346:    {
    #####:  347:      data[i] = (uint8_t) (i * 3);
    #####:  348:      sum += data[i];
        -:  349:    }
        -:  350:
    #####:  351:    const jerry_char_t eval_test_arraybuffer[] = TEST_STRING_LITERAL (
        -:  352:      "var sum = 0;"
        -:  353:      "for (var i = 0; i < array.length; i++)"
        -:  354:      "{"
        -:  355:      "  var expected = i * 3;"
        -:  356:      "  assert(array[i] == expected, 'Array at index ' + i + ' was: ' + array[i] + ' should be: ' + expected);"
        -:  357:      "  sum += array[i]"
        -:  358:      "};"
        -:  359:      "sum"
        -:  360:    );
    #####:  361:    jerry_value_t res = jerry_eval (eval_test_arraybuffer,
        -:  362:                                    sizeof (eval_test_arraybuffer) - 1,
        -:  363:                                    JERRY_PARSE_STRICT_MODE);
    #####:  364:    TEST_ASSERT (jerry_value_is_number (res));
    #####:  365:    TEST_ASSERT (jerry_get_number_value (res) == sum);
    #####:  366:    jerry_release_value (res);
        -:  367:
    #####:  368:    jerry_release_value (buffer);
        -:  369:  }
        -:  370:
        -:  371:  /* Test internal ArrayBuffer detach */
        -:  372:  {
    #####:  373:    const uint32_t length = 1;
    #####:  374:    jerry_value_t arraybuffer = jerry_create_arraybuffer (length);
    #####:  375:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  376:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  377:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
        -:  378:
    #####:  379:    jerry_value_t is_detachable = jerry_is_arraybuffer_detachable (arraybuffer);
    #####:  380:    TEST_ASSERT (!jerry_value_is_error (is_detachable));
    #####:  381:    TEST_ASSERT (jerry_value_is_true (is_detachable));
    #####:  382:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
    #####:  383:    jerry_release_value (is_detachable);
        -:  384:
    #####:  385:    jerry_value_t res = jerry_detach_arraybuffer (arraybuffer);
    #####:  386:    TEST_ASSERT (!jerry_value_is_error (res));
    #####:  387:    TEST_ASSERT (jerry_get_arraybuffer_pointer (arraybuffer) == NULL);
    #####:  388:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == 0);
        -:  389:
    #####:  390:    jerry_release_value (res);
    #####:  391:    jerry_release_value (arraybuffer);
        -:  392:  }
        -:  393:
        -:  394:  /* Test external ArrayBuffer detach */
        -:  395:  {
        -:  396:    uint8_t buf[1];
    #####:  397:    const uint32_t length = 1;
    #####:  398:    jerry_value_t arraybuffer = jerry_create_arraybuffer_external (length, buf, NULL);
    #####:  399:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  400:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  401:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
        -:  402:
    #####:  403:    jerry_value_t is_detachable = jerry_is_arraybuffer_detachable (arraybuffer);
    #####:  404:    TEST_ASSERT (!jerry_value_is_error (is_detachable));
    #####:  405:    TEST_ASSERT (jerry_value_is_true (is_detachable));
    #####:  406:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
    #####:  407:    jerry_release_value (is_detachable);
        -:  408:
    #####:  409:    jerry_value_t res = jerry_detach_arraybuffer (arraybuffer);
    #####:  410:    TEST_ASSERT (!jerry_value_is_error (res));
    #####:  411:    TEST_ASSERT (jerry_get_arraybuffer_pointer (arraybuffer) == NULL);
    #####:  412:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == 0);
        -:  413:
    #####:  414:    is_detachable = jerry_is_arraybuffer_detachable (arraybuffer);
    #####:  415:    TEST_ASSERT (!jerry_value_is_error (is_detachable));
    #####:  416:    TEST_ASSERT (!jerry_value_is_true (is_detachable));
    #####:  417:    jerry_release_value (is_detachable);
        -:  418:
    #####:  419:    jerry_release_value (res);
    #####:  420:    jerry_release_value (arraybuffer);
        -:  421:  }
        -:  422:
        -:  423:  /* Test external ArrayBuffer with callback detach */
        -:  424:  {
    #####:  425:    const uint32_t length = 8;
    #####:  426:    uint8_t *buf = (uint8_t *) malloc (length);
    #####:  427:    jerry_value_t arraybuffer = jerry_create_arraybuffer_external (length, buf, test_detach_free_cb);
    #####:  428:    TEST_ASSERT (!jerry_value_is_error (arraybuffer));
    #####:  429:    TEST_ASSERT (jerry_value_is_arraybuffer (arraybuffer));
    #####:  430:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
        -:  431:
    #####:  432:    jerry_value_t is_detachable = jerry_is_arraybuffer_detachable (arraybuffer);
    #####:  433:    TEST_ASSERT (!jerry_value_is_error (is_detachable));
    #####:  434:    TEST_ASSERT (jerry_value_is_true (is_detachable));
    #####:  435:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == length);
    #####:  436:    jerry_release_value (is_detachable);
        -:  437:
    #####:  438:    jerry_value_t res = jerry_detach_arraybuffer (arraybuffer);
    #####:  439:    TEST_ASSERT (!jerry_value_is_error (res));
    #####:  440:    TEST_ASSERT (jerry_get_arraybuffer_pointer (arraybuffer) == NULL);
    #####:  441:    TEST_ASSERT (jerry_get_arraybuffer_byte_length (arraybuffer) == 0);
    #####:  442:    TEST_ASSERT (detach_free_callback_called);
        -:  443:
    #####:  444:    is_detachable = jerry_is_arraybuffer_detachable (arraybuffer);
    #####:  445:    TEST_ASSERT (!jerry_value_is_error (is_detachable));
    #####:  446:    TEST_ASSERT (!jerry_value_is_true (is_detachable));
    #####:  447:    jerry_release_value (is_detachable);
        -:  448:
    #####:  449:    jerry_release_value (res);
    #####:  450:    jerry_release_value (arraybuffer);
        -:  451:  }
        -:  452:
    #####:  453:  jerry_cleanup ();
        -:  454:
    #####:  455:  TEST_ASSERT (callback_called == true);
        -:  456:
        -:  457:  return 0;
        -:  458:} /* main */
