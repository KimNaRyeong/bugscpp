        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-bigint-prototype.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-bigint.h"
        -:   17:#include "ecma-exceptions.h"
        -:   18:
        -:   19:#if JERRY_BUILTIN_BIGINT
        -:   20:
        -:   21:#define ECMA_BUILTINS_INTERNAL
        -:   22:#include "ecma-builtins-internal.h"
        -:   23:
        -:   24:/**
        -:   25: * This object has a custom dispatch function.
        -:   26: */
        -:   27:#define BUILTIN_CUSTOM_DISPATCH
        -:   28:
        -:   29:/**
        -:   30: * List of built-in routine identifiers.
        -:   31: */
        -:   32:enum
        -:   33:{
        -:   34:  ECMA_BIGINT_PROTOTYPE_ROUTINE_START = 0,
        -:   35:  ECMA_BIGINT_PROTOTYPE_VALUE_OF,
        -:   36:  ECMA_BIGINT_PROTOTYPE_TO_STRING,
        -:   37:  ECMA_BIGINT_PROTOTYPE_TO_LOCALE_STRING,
        -:   38:};
        -:   39:
        -:   40:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-bigint-prototype.inc.h"
        -:   41:#define BUILTIN_UNDERSCORED_ID bigint_prototype
        -:   42:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   43:
        -:   44:/** \addtogroup ecma ECMA
        -:   45: * @{
        -:   46: *
        -:   47: * \addtogroup ecmabuiltins
        -:   48: * @{
        -:   49: *
        -:   50: * \addtogroup bigint ECMA BigInt object built-in
        -:   51: * @{
        -:   52: */
        -:   53:
        -:   54:/**
        -:   55: * The BigInt.prototype object's 'valueOf' routine
        -:   56: *
        -:   57: * See also:
        -:   58: *          ECMA-262 v11, 20.2.3.4
        -:   59: *
        -:   60: * @return ecma value
        -:   61: *         Returned value must be freed with ecma_free_value.
        -:   62: */
        -:   63:static ecma_value_t
    #####:   64:ecma_builtin_bigint_prototype_object_value_of (ecma_value_t this_arg) /**< this argument */
        -:   65:{
    #####:   66:  if (ecma_is_value_bigint (this_arg))
        -:   67:  {
    #####:   68:    return ecma_copy_value (this_arg);
        -:   69:  }
        -:   70:
    #####:   71:  if (ecma_is_value_object (this_arg))
        -:   72:  {
    #####:   73:    ecma_object_t *object_p = ecma_get_object_from_value (this_arg);
        -:   74:
    #####:   75:    if (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_BIGINT))
        -:   76:    {
    #####:   77:      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
        -:   78:
    #####:   79:      JERRY_ASSERT (ecma_is_value_bigint (ext_object_p->u.cls.u3.value));
        -:   80:
    #####:   81:      return ecma_copy_value (ext_object_p->u.cls.u3.value);
        -:   82:    }
        -:   83:  }
        -:   84:
    #####:   85:  return ecma_raise_type_error (ECMA_ERR_MSG ("BigInt value expected"));
        -:   86:} /* ecma_builtin_bigint_prototype_object_value_of */
        -:   87:
        -:   88:/**
        -:   89: * The BigInt.prototype object's 'toString' routine
        -:   90: *
        -:   91: * See also:
        -:   92: *          ECMA-262 v11, 20.2.3.3
        -:   93: *
        -:   94: * @return ecma value
        -:   95: *         Returned value must be freed with ecma_free_value.
        -:   96: */
        -:   97:static ecma_value_t
    #####:   98:ecma_builtin_bigint_prototype_object_to_string (ecma_value_t this_arg, /**< this argument */
        -:   99:                                                const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  100:                                                uint32_t arguments_list_len) /**< number of arguments */
        -:  101:{
    #####:  102:  uint32_t radix = 10;
        -:  103:
    #####:  104:  if (arguments_list_len > 0 && !ecma_is_value_undefined (arguments_list_p[0]))
        -:  105:  {
    #####:  106:    ecma_number_t arg_num;
        -:  107:
    #####:  108:    if (ECMA_IS_VALUE_ERROR (ecma_op_to_integer (arguments_list_p[0], &arg_num)))
        -:  109:    {
    #####:  110:      return ECMA_VALUE_ERROR;
        -:  111:    }
        -:  112:
    #####:  113:    if (arg_num < 2 || arg_num > 36)
        -:  114:    {
    #####:  115:      return ecma_raise_range_error (ECMA_ERR_MSG ("Radix must be between 2 and 36"));
        -:  116:    }
        -:  117:
    #####:  118:    radix = (uint32_t) arg_num;
        -:  119:  }
        -:  120:
    #####:  121:  ecma_string_t *string_p = ecma_bigint_to_string (this_arg, radix);
        -:  122:
    #####:  123:  if (string_p == NULL)
        -:  124:  {
    #####:  125:    return ECMA_VALUE_ERROR;
        -:  126:  }
        -:  127:
    #####:  128:  return ecma_make_string_value (string_p);
        -:  129:} /* ecma_builtin_bigint_prototype_object_to_string */
        -:  130:
        -:  131:/**
        -:  132: * Dispatcher of the built-in's routines
        -:  133: *
        -:  134: * @return ecma value
        -:  135: *         Returned value must be freed with ecma_free_value.
        -:  136: */
        -:  137:ecma_value_t
    #####:  138:ecma_builtin_bigint_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:  139:                                                                             *   identifier */
        -:  140:                                                ecma_value_t this_arg, /**< 'this' argument value */
        -:  141:                                                const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  142:                                                                                        *   passed to routine */
        -:  143:                                                uint32_t arguments_number) /**< length of arguments' list */
        -:  144:{
    #####:  145:  ecma_value_t this_value = ecma_builtin_bigint_prototype_object_value_of (this_arg);
        -:  146:  ecma_value_t ret_val;
        -:  147:
    #####:  148:  if (ECMA_IS_VALUE_ERROR (this_value))
        -:  149:  {
    #####:  150:    return this_value;
        -:  151:  }
        -:  152:
    #####:  153:  switch (builtin_routine_id)
        -:  154:  {
    #####:  155:    case ECMA_BIGINT_PROTOTYPE_VALUE_OF:
        -:  156:    {
    #####:  157:      ret_val = this_value;
    #####:  158:      break;
        -:  159:    }
    #####:  160:    case ECMA_BIGINT_PROTOTYPE_TO_STRING:
        -:  161:    {
    #####:  162:      ret_val = ecma_builtin_bigint_prototype_object_to_string (this_value, arguments_list_p, arguments_number);
    #####:  163:      ecma_free_value (this_value);
    #####:  164:      break;
        -:  165:    }
    #####:  166:    case ECMA_BIGINT_PROTOTYPE_TO_LOCALE_STRING:
        -:  167:    {
    #####:  168:      ret_val = ecma_builtin_bigint_prototype_object_to_string (this_value, 0, 0);
    #####:  169:      ecma_free_value (this_value);
    #####:  170:      break;
        -:  171:    }
    #####:  172:    default:
        -:  173:    {
    #####:  174:      JERRY_UNREACHABLE ();
        -:  175:    }
        -:  176:  }
    #####:  177:  return ret_val;
        -:  178:} /* ecma_builtin_bigint_prototype_dispatch_routine */
        -:  179:
        -:  180:/**
        -:  181: * @}
        -:  182: * @}
        -:  183: * @}
        -:  184: */
        -:  185:
        -:  186:#endif /* JERRY_BUILTIN_BIGINT */
