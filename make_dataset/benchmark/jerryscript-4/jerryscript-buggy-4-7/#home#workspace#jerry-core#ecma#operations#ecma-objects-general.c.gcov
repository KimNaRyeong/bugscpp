        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-objects-general.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-arguments-object.h"
        -:   17:#include "ecma-array-object.h"
        -:   18:#include "ecma-builtins.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-function-object.h"
        -:   21:#include "ecma-gc.h"
        -:   22:#include "ecma-globals.h"
        -:   23:#include "ecma-helpers.h"
        -:   24:#include "ecma-objects.h"
        -:   25:#include "ecma-objects-general.h"
        -:   26:#include "ecma-proxy-object.h"
        -:   27:
        -:   28:/** \addtogroup ecma ECMA
        -:   29: * @{
        -:   30: *
        -:   31: * \addtogroup ecmaobjectsinternalops ECMA objects' operations
        -:   32: * @{
        -:   33: */
        -:   34:
        -:   35:/**
        -:   36: * 'Object' object creation operation with no arguments.
        -:   37: *
        -:   38: * See also: ECMA-262 v5, 15.2.2.1
        -:   39: *
        -:   40: * @return pointer to newly created 'Object' object
        -:   41: */
        -:   42:ecma_object_t *
    #####:   43:ecma_op_create_object_object_noarg (void)
        -:   44:{
    #####:   45:  ecma_object_t *object_prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
        -:   46:
        -:   47:  /* 3., 4., 6., 7. */
    #####:   48:  return ecma_op_create_object_object_noarg_and_set_prototype (object_prototype_p);
        -:   49:} /* ecma_op_create_object_object_noarg */
        -:   50:
        -:   51:/**
        -:   52: * Object creation operation with no arguments.
        -:   53: * It sets the given prototype to the newly created object.
        -:   54: *
        -:   55: * See also: ECMA-262 v5, 15.2.2.1, 15.2.3.5
        -:   56: *
        -:   57: * @return pointer to newly created object
        -:   58: */
        -:   59:ecma_object_t *
    #####:   60:ecma_op_create_object_object_noarg_and_set_prototype (ecma_object_t *object_prototype_p) /**< pointer to prototype of
        -:   61:                                                                                              the object
        -:   62:                                                                                              (can be NULL) */
        -:   63:{
    #####:   64:  ecma_object_t *obj_p = ecma_create_object (object_prototype_p, 0, ECMA_OBJECT_TYPE_GENERAL);
        -:   65:
        -:   66:  /*
        -:   67:   * [[Class]] property of ECMA_OBJECT_TYPE_GENERAL type objects
        -:   68:   * without ECMA_INTERNAL_PROPERTY_CLASS internal property
        -:   69:   * is "Object".
        -:   70:   *
        -:   71:   * See also: ecma_object_get_class_name
        -:   72:   */
        -:   73:
    #####:   74:  return obj_p;
        -:   75:} /* ecma_op_create_object_object_noarg_and_set_prototype */
        -:   76:
        -:   77:/**
        -:   78: * [[Delete]] ecma general object's operation
        -:   79: *
        -:   80: * See also:
        -:   81: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -:   82: *          ECMA-262 v5, 8.12.7
        -:   83: *
        -:   84: * @return ecma value
        -:   85: *         Returned value must be freed with ecma_free_value
        -:   86: */
        -:   87:ecma_value_t
    #####:   88:ecma_op_general_object_delete (ecma_object_t *obj_p, /**< the object */
        -:   89:                               ecma_string_t *property_name_p, /**< property name */
        -:   90:                               bool is_throw) /**< flag that controls failure handling */
        -:   91:{
    #####:   92:  JERRY_ASSERT (obj_p != NULL
        -:   93:                && !ecma_is_lexical_environment (obj_p));
    #####:   94:  JERRY_ASSERT (property_name_p != NULL);
        -:   95:
        -:   96:  /* 1. */
    #####:   97:  ecma_property_ref_t property_ref;
        -:   98:
    #####:   99:  ecma_property_t property = ecma_op_object_get_own_property (obj_p,
        -:  100:                                                              property_name_p,
        -:  101:                                                              &property_ref,
        -:  102:                                                              ECMA_PROPERTY_GET_NO_OPTIONS);
        -:  103:
        -:  104:  /* 2. */
    #####:  105:  if (property == ECMA_PROPERTY_TYPE_NOT_FOUND || property == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP)
        -:  106:  {
    #####:  107:    return ECMA_VALUE_TRUE;
        -:  108:  }
        -:  109:
        -:  110:  /* 3. */
    #####:  111:  if (!ecma_is_property_configurable (property))
        -:  112:  {
        -:  113:    /* 4. */
    #####:  114:    if (is_throw)
        -:  115:    {
    #####:  116:      return ecma_raise_type_error (ECMA_ERR_MSG ("Expected a configurable property"));
        -:  117:    }
        -:  118:
        -:  119:    /* 5. */
    #####:  120:    return ECMA_VALUE_FALSE;
        -:  121:  }
        -:  122:
    #####:  123:  ecma_object_type_t type = ecma_get_object_type (obj_p);
        -:  124:
    #####:  125:  if (type == ECMA_OBJECT_TYPE_ARRAY
    #####:  126:      && ecma_array_object_delete_property (obj_p, property_name_p))
        -:  127:  {
    #####:  128:    return ECMA_VALUE_TRUE;
        -:  129:  }
        -:  130:
        -:  131:  /* a. */
    #####:  132:  ecma_delete_property (obj_p, property_ref.value_p);
        -:  133:
    #####:  134:  if (property & ECMA_PROPERTY_FLAG_BUILT_IN)
        -:  135:  {
        -:  136:#if JERRY_ESNEXT
    #####:  137:    switch (type)
        -:  138:    {
    #####:  139:      case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:
        -:  140:      {
    #####:  141:        if (ecma_builtin_function_is_routine (obj_p))
        -:  142:        {
    #####:  143:          ecma_builtin_routine_delete_built_in_property (obj_p, property_name_p);
    #####:  144:          break;
        -:  145:        }
        -:  146:        /* FALLTHRU */
        -:  147:      }
        -:  148:      case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:
        -:  149:      case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:
        -:  150:      case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:
        -:  151:      {
    #####:  152:        ecma_builtin_delete_built_in_property (obj_p, property_name_p);
    #####:  153:        break;
        -:  154:      }
    #####:  155:      case ECMA_OBJECT_TYPE_CLASS:
        -:  156:      {
    #####:  157:        JERRY_ASSERT (ecma_object_class_is (obj_p, ECMA_OBJECT_CLASS_ARGUMENTS));
    #####:  158:        ecma_op_arguments_delete_built_in_property (obj_p, property_name_p);
    #####:  159:        break;
        -:  160:      }
    #####:  161:      case ECMA_OBJECT_TYPE_FUNCTION:
        -:  162:      {
    #####:  163:        ecma_op_function_delete_built_in_property (obj_p, property_name_p);
    #####:  164:        break;
        -:  165:      }
    #####:  166:      case ECMA_OBJECT_TYPE_BOUND_FUNCTION:
        -:  167:      {
    #####:  168:        ecma_op_bound_function_delete_built_in_property (obj_p, property_name_p);
    #####:  169:        break;
        -:  170:      }
    #####:  171:      default:
        -:  172:      {
    #####:  173:        JERRY_UNREACHABLE ();
        -:  174:        break;
        -:  175:      }
        -:  176:    }
        -:  177:#else /* !JERRY_ESNEXT */
    #####:  178:    if (type == ECMA_OBJECT_TYPE_CLASS)
        -:  179:    {
        -:  180:      JERRY_ASSERT (ecma_object_class_is (obj_p, ECMA_OBJECT_CLASS_ARGUMENTS));
    #####:  181:      ecma_op_arguments_delete_built_in_property (obj_p, property_name_p);
        -:  182:    }
        -:  183:    else
        -:  184:    {
    #####:  185:      ecma_builtin_delete_built_in_property (obj_p, property_name_p);
        -:  186:    }
        -:  187:#endif /* JERRY_ESNEXT */
    #####:  188:  }
        -:  189:
        -:  190:  /* b. */
    #####:  191:  return ECMA_VALUE_TRUE;
        -:  192:} /* ecma_op_general_object_delete */
        -:  193:
        -:  194:/**
        -:  195: * Property invocation order during [[DefaultValue]] operation with string hint
        -:  196: */
        -:  197:static const lit_magic_string_id_t to_primitive_string_hint_method_names[2] =
        -:  198:{
        -:  199:  LIT_MAGIC_STRING_TO_STRING_UL, /**< toString operation */
        -:  200:  LIT_MAGIC_STRING_VALUE_OF_UL, /**< valueOf operation */
        -:  201:};
        -:  202:
        -:  203:/**
        -:  204: * Property invocation order during [[DefaultValue]] operation with non string hint
        -:  205: */
        -:  206:static const lit_magic_string_id_t to_primitive_non_string_hint_method_names[2] =
        -:  207:{
        -:  208:  LIT_MAGIC_STRING_VALUE_OF_UL, /**< valueOf operation */
        -:  209:  LIT_MAGIC_STRING_TO_STRING_UL, /**< toString operation */
        -:  210:};
        -:  211:
        -:  212:#if JERRY_ESNEXT
        -:  213:/**
        -:  214: * Hints for the ecma general object's toPrimitve operation
        -:  215: */
        -:  216:static const lit_magic_string_id_t hints[3] =
        -:  217:{
        -:  218:  LIT_MAGIC_STRING_DEFAULT, /**< "default" hint */
        -:  219:  LIT_MAGIC_STRING_NUMBER, /**< "number" hint */
        -:  220:  LIT_MAGIC_STRING_STRING, /**< "string" hint */
        -:  221:};
        -:  222:#endif /* JERRY_ESNEXT */
        -:  223:
        -:  224:/**
        -:  225: * [[DefaultValue]] ecma general object's operation
        -:  226: *
        -:  227: * See also:
        -:  228: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -:  229: *          ECMA-262 v5, 8.12.8
        -:  230: *
        -:  231: * @return ecma value
        -:  232: *         Returned value must be freed with ecma_free_value
        -:  233: */
        -:  234:ecma_value_t
        1:  235:ecma_op_general_object_default_value (ecma_object_t *obj_p, /**< the object */
        -:  236:                                      ecma_preferred_type_hint_t hint) /**< hint on preferred result type */
        -:  237:{
        1:  238:  JERRY_ASSERT (obj_p != NULL
        -:  239:                && !ecma_is_lexical_environment (obj_p));
        -:  240:
        -:  241:#if JERRY_ESNEXT
        1:  242:  ecma_value_t obj_value = ecma_make_object_value (obj_p);
        -:  243:
        1:  244:  ecma_value_t exotic_to_prim = ecma_op_get_method_by_symbol_id (obj_value,
        -:  245:                                                                 LIT_GLOBAL_SYMBOL_TO_PRIMITIVE);
        -:  246:
        1:  247:  if (ECMA_IS_VALUE_ERROR (exotic_to_prim))
        -:  248:  {
    #####:  249:    return exotic_to_prim;
        -:  250:  }
        -:  251:
        1:  252:  if (!ecma_is_value_undefined (exotic_to_prim))
        -:  253:  {
    #####:  254:    ecma_object_t *call_func_p = ecma_get_object_from_value (exotic_to_prim);
    #####:  255:    ecma_value_t argument = ecma_make_magic_string_value (hints[hint]);
        -:  256:
    #####:  257:    ecma_value_t result = ecma_op_function_call (call_func_p,
        -:  258:                                                 obj_value,
        -:  259:                                                 &argument,
        -:  260:                                                 1);
        -:  261:
    #####:  262:    ecma_free_value (exotic_to_prim);
        -:  263:
    #####:  264:    if (ECMA_IS_VALUE_ERROR (result)
    #####:  265:        || !ecma_is_value_object (result))
        -:  266:    {
    #####:  267:      return result;
        -:  268:    }
        -:  269:
    #####:  270:    ecma_free_value (result);
        -:  271:
    #####:  272:    return ecma_raise_type_error (ECMA_ERR_MSG ("Result of [[DefaultValue]] is invalid"));
        -:  273:  }
        -:  274:
        1:  275:  ecma_free_value (exotic_to_prim);
        -:  276:
        1:  277:  if (hint == ECMA_PREFERRED_TYPE_NO)
        -:  278:  {
    #####:  279:    hint = ECMA_PREFERRED_TYPE_NUMBER;
        -:  280:  }
        -:  281:#else /* !JERRY_ESNEXT */
    #####:  282:  if (hint == ECMA_PREFERRED_TYPE_NO)
        -:  283:  {
    #####:  284:    hint = ECMA_PREFERRED_TYPE_NUMBER;
        -:  285:
        -:  286:#if JERRY_BUILTIN_DATE
    #####:  287:    if (ecma_object_class_is (obj_p, ECMA_OBJECT_CLASS_DATE))
        -:  288:    {
    #####:  289:      hint = ECMA_PREFERRED_TYPE_STRING;
        -:  290:    }
        -:  291:#endif /* JERRY_BUILTIN_DATE */
        -:  292:  }
        -:  293:#endif /* JERRY_ESNEXT */
        -:  294:
        1:  295:  return ecma_op_general_object_ordinary_value (obj_p, hint);
        -:  296:} /* ecma_op_general_object_default_value */
        -:  297:
        -:  298:/**
        -:  299: * Ecma general object's OrdinaryToPrimitive operation
        -:  300: *
        -:  301: * See also:
        -:  302: *          ECMA-262 v6 7.1.1
        -:  303: *
        -:  304: * @return ecma value
        -:  305: *         Returned value must be freed with ecma_free_value
        -:  306: */
        -:  307:ecma_value_t
        1:  308:ecma_op_general_object_ordinary_value (ecma_object_t *obj_p, /**< the object */
        -:  309:                                       ecma_preferred_type_hint_t hint) /**< hint on preferred result type */
        -:  310:{
        1:  311:  const lit_magic_string_id_t *function_name_ids_p = (hint == ECMA_PREFERRED_TYPE_STRING
        -:  312:                                                      ? to_primitive_string_hint_method_names
        1:  313:                                                      : to_primitive_non_string_hint_method_names);
        -:  314:
        1:  315:  for (uint32_t i = 0; i < 2; i++)
        -:  316:  {
        1:  317:    ecma_value_t function_value = ecma_op_object_get_by_magic_id (obj_p, function_name_ids_p[i]);
        -:  318:
        1:  319:    if (ECMA_IS_VALUE_ERROR (function_value))
        -:  320:    {
    #####:  321:      return function_value;
        -:  322:    }
        -:  323:
        1:  324:    ecma_value_t call_completion = ECMA_VALUE_EMPTY;
        -:  325:
        1:  326:    if (ecma_op_is_callable (function_value))
        -:  327:    {
        1:  328:      ecma_object_t *func_obj_p = ecma_get_object_from_value (function_value);
        -:  329:
        1:  330:      call_completion = ecma_op_function_call (func_obj_p,
        -:  331:                                               ecma_make_object_value (obj_p),
        -:  332:                                               NULL,
        -:  333:                                               0);
        -:  334:    }
        -:  335:
        1:  336:    ecma_free_value (function_value);
        -:  337:
        1:  338:    if (ECMA_IS_VALUE_ERROR (call_completion)
        1:  339:        || (!ecma_is_value_empty (call_completion)
        1:  340:           && !ecma_is_value_object (call_completion)))
        -:  341:    {
        1:  342:      return call_completion;
        -:  343:    }
        -:  344:
    #####:  345:    ecma_free_value (call_completion);
        -:  346:  }
        -:  347:
    #####:  348:  return ecma_raise_type_error (ECMA_ERR_MSG ("Result of [[DefaultValue]] is invalid"));
        -:  349:} /* ecma_op_general_object_ordinary_value */
        -:  350:
        -:  351:/**
        -:  352: * Special types for ecma_op_general_object_define_own_property.
        -:  353: */
        -:  354:typedef enum
        -:  355:{
        -:  356:  ECMA_OP_OBJECT_DEFINE_GENERIC = 1, /**< generic property */
        -:  357:  ECMA_OP_OBJECT_DEFINE_ACCESSOR = 0, /**< accessor property */
        -:  358:  ECMA_OP_OBJECT_DEFINE_DATA = ECMA_PROPERTY_FLAG_DATA /**< data property */
        -:  359:} ecma_op_object_define_own_property_type_t;
        -:  360:
        -:  361:/**
        -:  362: * [[DefineOwnProperty]] ecma general object's operation
        -:  363: *
        -:  364: * See also:
        -:  365: *          ECMA-262 v5, 8.6.2; ECMA-262 v5, Table 8
        -:  366: *          ECMA-262 v5, 8.12.9
        -:  367: *
        -:  368: * @return ecma value
        -:  369: *         Returned value must be freed with ecma_free_value
        -:  370: */
        -:  371:ecma_value_t
        3:  372:ecma_op_general_object_define_own_property (ecma_object_t *object_p, /**< the object */
        -:  373:                                            ecma_string_t *property_name_p, /**< property name */
        -:  374:                                            const ecma_property_descriptor_t *property_desc_p) /**< property
        -:  375:                                                                                                *   descriptor */
        -:  376:{
        -:  377:#if JERRY_BUILTIN_PROXY
        3:  378:  if (ECMA_OBJECT_IS_PROXY (object_p))
        -:  379:  {
    #####:  380:    return ecma_proxy_object_define_own_property (object_p, property_name_p, property_desc_p);
        -:  381:  }
        -:  382:#endif /* JERRY_BUILTIN_PROXY */
        -:  383:
        3:  384:  JERRY_ASSERT (object_p != NULL
        -:  385:                && !ecma_is_lexical_environment (object_p));
        3:  386:  JERRY_ASSERT (!ecma_op_object_is_fast_array (object_p));
        3:  387:  JERRY_ASSERT (property_name_p != NULL);
        -:  388:
        3:  389:  uint8_t property_desc_type = ECMA_OP_OBJECT_DEFINE_GENERIC;
        -:  390:
        3:  391:  if (property_desc_p->flags & (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE_DEFINED))
        -:  392:  {
        -:  393:    /* A property descriptor cannot be both named data and named accessor. */
        3:  394:    JERRY_ASSERT ((property_desc_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED))
        -:  395:                   != (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED));
        3:  396:    property_desc_type = ECMA_OP_OBJECT_DEFINE_DATA;
        -:  397:  }
    #####:  398:  else if (property_desc_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED))
        -:  399:  {
    #####:  400:    JERRY_ASSERT (!(property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED));
    #####:  401:    property_desc_type = ECMA_OP_OBJECT_DEFINE_ACCESSOR;
        -:  402:  }
        -:  403:
        -:  404:  /* These three asserts ensures that a new property is created with the appropriate default flags.
        -:  405:   * E.g. if JERRY_PROP_IS_CONFIGURABLE_DEFINED is false, the newly created property must be non-configurable. */
        3:  406:  JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED)
        -:  407:                || !(property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE));
        3:  408:  JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)
        -:  409:                || !(property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE));
        3:  410:  JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED)
        -:  411:                || !(property_desc_p->flags & JERRY_PROP_IS_WRITABLE));
        -:  412:
        -:  413:  /* 1. */
        3:  414:  ecma_extended_property_ref_t ext_property_ref = { .property_ref.value_p = NULL, .property_p = NULL };
        -:  415:  ecma_property_t current_prop;
        -:  416:
        3:  417:  current_prop = ecma_op_object_get_own_property (object_p,
        -:  418:                                                  property_name_p,
        -:  419:                                                  &ext_property_ref.property_ref,
        -:  420:                                                  ECMA_PROPERTY_GET_VALUE | ECMA_PROPERTY_GET_EXT_REFERENCE);
        -:  421:
        3:  422:  if (current_prop == ECMA_PROPERTY_TYPE_NOT_FOUND || current_prop == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP)
        -:  423:  {
        -:  424:    /* 3. */
        3:  425:    if (!ecma_op_ordinary_object_is_extensible (object_p))
        -:  426:    {
        -:  427:      /* 2. */
    #####:  428:      return ECMA_REJECT_WITH_FORMAT (property_desc_p->flags & JERRY_PROP_SHOULD_THROW,
        -:  429:                                      "Cannot define property '%', object is not extensible",
        -:  430:                                      ecma_make_prop_name_value (property_name_p));
        -:  431:    }
        -:  432:
        -:  433:    /* 4. */
        3:  434:    uint8_t prop_attributes = (uint8_t) (property_desc_p->flags & ECMA_PROPERTY_FLAGS_MASK);
        -:  435:
        3:  436:    if (property_desc_type != ECMA_OP_OBJECT_DEFINE_ACCESSOR)
        -:  437:    {
        -:  438:      /* a. */
        3:  439:      JERRY_ASSERT (property_desc_type == ECMA_OP_OBJECT_DEFINE_GENERIC
        -:  440:                    || property_desc_type == ECMA_OP_OBJECT_DEFINE_DATA);
        -:  441:
        3:  442:      ecma_property_value_t *new_prop_value_p = ecma_create_named_data_property (object_p,
        -:  443:                                                                                 property_name_p,
        -:  444:                                                                                 prop_attributes,
        -:  445:                                                                                 NULL);
        -:  446:
        3:  447:      JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)
        -:  448:                    || ecma_is_value_undefined (property_desc_p->value));
        -:  449:
        3:  450:      new_prop_value_p->value = ecma_copy_value_if_not_object (property_desc_p->value);
        -:  451:    }
        -:  452:    else
        -:  453:    {
        -:  454:      /* b. */
    #####:  455:      ecma_create_named_accessor_property (object_p,
        -:  456:                                           property_name_p,
        -:  457:                                           property_desc_p->get_p,
        -:  458:                                           property_desc_p->set_p,
        -:  459:                                           prop_attributes,
        -:  460:                                           NULL);
        -:  461:    }
        -:  462:
        3:  463:    return ECMA_VALUE_TRUE;
        -:  464:  }
        -:  465:
        -:  466:  /* 6. */
    #####:  467:  const bool is_current_configurable = ecma_is_property_configurable (current_prop);
        -:  468:
        -:  469:  /* 7. a., b. */
    #####:  470:  bool is_enumerable = (property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE) != 0;
    #####:  471:  if (!is_current_configurable
    #####:  472:      && ((property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE)
    #####:  473:          || ((property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)
    #####:  474:              && (is_enumerable != ecma_is_property_enumerable (current_prop)))))
        -:  475:  {
    #####:  476:    if (ECMA_PROPERTY_IS_VIRTUAL (current_prop))
        -:  477:    {
    #####:  478:      ecma_free_value (ext_property_ref.property_ref.virtual_value);
        -:  479:    }
        -:  480:
    #####:  481:    return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);
        -:  482:  }
        -:  483:
    #####:  484:  if (ECMA_PROPERTY_IS_VIRTUAL (current_prop))
        -:  485:  {
    #####:  486:    bool writable_check_failed = (property_desc_p->flags & JERRY_PROP_IS_WRITABLE);
        -:  487:
        -:  488:#if JERRY_MODULE_SYSTEM
    #####:  489:    if (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_MODULE_NAMESPACE))
        -:  490:    {
    #####:  491:      if (JERRY_UNLIKELY (ext_property_ref.property_ref.virtual_value == ECMA_VALUE_UNINITIALIZED))
        -:  492:      {
    #####:  493:        return ecma_raise_reference_error (ECMA_ERR_MSG (ecma_error_let_const_not_initialized));
        -:  494:      }
        -:  495:
    #####:  496:      if (property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED)
        -:  497:      {
    #####:  498:        writable_check_failed = ((property_desc_p->flags ^ current_prop) & JERRY_PROP_IS_WRITABLE) != 0;
        -:  499:      }
        -:  500:    }
        -:  501:    else
        -:  502:    {
    #####:  503:      JERRY_ASSERT (!is_current_configurable && !ecma_is_property_writable (current_prop));
        -:  504:    }
        -:  505:#else /* !JERRY_MODULE_SYSTEM */
        -:  506:    JERRY_ASSERT (!is_current_configurable && !ecma_is_property_writable (current_prop));
        -:  507:#endif /* JERRY_MODULE_SYSTEM */
        -:  508:
    #####:  509:    ecma_value_t result = ECMA_VALUE_TRUE;
        -:  510:
    #####:  511:    if (property_desc_type == ECMA_OP_OBJECT_DEFINE_ACCESSOR
    #####:  512:        || writable_check_failed
    #####:  513:        || ((property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)
    #####:  514:            && !ecma_op_same_value (property_desc_p->value,
        -:  515:                                    ext_property_ref.property_ref.virtual_value)))
        -:  516:    {
    #####:  517:      result = ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);
        -:  518:    }
        -:  519:
    #####:  520:    ecma_free_value (ext_property_ref.property_ref.virtual_value);
    #####:  521:    return result;
        -:  522:  }
        -:  523:
        -:  524:  /* 8. */
    #####:  525:  if (property_desc_type == ECMA_OP_OBJECT_DEFINE_GENERIC)
        -:  526:  {
        -:  527:    /* No action required. */
        -:  528:  }
    #####:  529:  else if (JERRY_LIKELY (property_desc_type == (current_prop & ECMA_PROPERTY_FLAG_DATA)))
        -:  530:  {
        -:  531:    /* If property is configurable, there is no need for checks. */
    #####:  532:    if (JERRY_UNLIKELY (!is_current_configurable))
        -:  533:    {
    #####:  534:      if (property_desc_type == ECMA_OP_OBJECT_DEFINE_DATA)
        -:  535:      {
        -:  536:        /* 10. a. i. & ii. */
    #####:  537:        if (!ecma_is_property_writable (current_prop)
    #####:  538:            && ((property_desc_p->flags & JERRY_PROP_IS_WRITABLE)
    #####:  539:                || ((property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)
    #####:  540:                    && !ecma_op_same_value (property_desc_p->value,
    #####:  541:                                            ext_property_ref.property_ref.value_p->value))))
        -:  542:        {
    #####:  543:          return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);
        -:  544:        }
        -:  545:      }
        -:  546:      else
        -:  547:      {
        -:  548:        /* 11. */
        -:  549:
        -:  550:        /* a. */
    #####:  551:        ecma_property_value_t *value_p = ext_property_ref.property_ref.value_p;
        -:  552:
    #####:  553:        ecma_getter_setter_pointers_t *get_set_pair_p = ecma_get_named_accessor_property (value_p);
        -:  554:        jmem_cpointer_t prop_desc_getter_cp, prop_desc_setter_cp;
    #####:  555:        ECMA_SET_POINTER (prop_desc_getter_cp, property_desc_p->get_p);
    #####:  556:        ECMA_SET_POINTER (prop_desc_setter_cp, property_desc_p->set_p);
        -:  557:
    #####:  558:        if (((property_desc_p->flags & JERRY_PROP_IS_GET_DEFINED)
    #####:  559:             && prop_desc_getter_cp != get_set_pair_p->getter_cp)
    #####:  560:            || ((property_desc_p->flags & JERRY_PROP_IS_SET_DEFINED)
    #####:  561:                && prop_desc_setter_cp != get_set_pair_p->setter_cp))
        -:  562:        {
        -:  563:          /* i., ii. */
    #####:  564:          return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);
        -:  565:        }
        -:  566:      }
        -:  567:    }
        -:  568:  }
        -:  569:  else
        -:  570:  {
        -:  571:    /* 9. */
    #####:  572:    if (!is_current_configurable)
        -:  573:    {
        -:  574:      /* a. */
    #####:  575:      return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);
        -:  576:    }
        -:  577:
    #####:  578:    ecma_property_value_t *value_p = ext_property_ref.property_ref.value_p;
        -:  579:
    #####:  580:    if (property_desc_type == ECMA_OP_OBJECT_DEFINE_ACCESSOR)
        -:  581:    {
    #####:  582:      JERRY_ASSERT (current_prop & ECMA_PROPERTY_FLAG_DATA);
    #####:  583:      ecma_free_value_if_not_object (value_p->value);
        -:  584:
        -:  585:#if JERRY_CPOINTER_32_BIT
        -:  586:      ecma_getter_setter_pointers_t *getter_setter_pair_p;
    #####:  587:      getter_setter_pair_p = jmem_pools_alloc (sizeof (ecma_getter_setter_pointers_t));
    #####:  588:      getter_setter_pair_p->getter_cp = JMEM_CP_NULL;
    #####:  589:      getter_setter_pair_p->setter_cp = JMEM_CP_NULL;
    #####:  590:      ECMA_SET_NON_NULL_POINTER (value_p->getter_setter_pair_cp, getter_setter_pair_p);
        -:  591:#else /* !JERRY_CPOINTER_32_BIT */
    #####:  592:      value_p->getter_setter_pair.getter_cp = JMEM_CP_NULL;
    #####:  593:      value_p->getter_setter_pair.setter_cp = JMEM_CP_NULL;
        -:  594:#endif /* JERRY_CPOINTER_32_BIT */
        -:  595:    }
        -:  596:    else
        -:  597:    {
    #####:  598:      JERRY_ASSERT (!(current_prop & ECMA_PROPERTY_FLAG_DATA));
        -:  599:#if JERRY_CPOINTER_32_BIT
        -:  600:      ecma_getter_setter_pointers_t *getter_setter_pair_p;
    #####:  601:      getter_setter_pair_p = ECMA_GET_NON_NULL_POINTER (ecma_getter_setter_pointers_t,
        -:  602:                                                        value_p->getter_setter_pair_cp);
    #####:  603:      jmem_pools_free (getter_setter_pair_p, sizeof (ecma_getter_setter_pointers_t));
        -:  604:#endif /* JERRY_CPOINTER_32_BIT */
    #####:  605:      value_p->value = ECMA_VALUE_UNDEFINED;
        -:  606:    }
        -:  607:
        -:  608:    /* Update flags */
    #####:  609:    ecma_property_t prop_flags = *(ext_property_ref.property_p);
    #####:  610:    prop_flags = (ecma_property_t) (prop_flags & ~ECMA_PROPERTY_FLAG_WRITABLE);
    #####:  611:    prop_flags ^= ECMA_PROPERTY_FLAG_DATA;
    #####:  612:    *(ext_property_ref.property_p) = prop_flags;
        -:  613:  }
        -:  614:
        -:  615:  /* 12. */
    #####:  616:  if (property_desc_type == ECMA_OP_OBJECT_DEFINE_DATA)
        -:  617:  {
    #####:  618:    JERRY_ASSERT (ECMA_PROPERTY_IS_RAW_DATA (*ext_property_ref.property_p));
        -:  619:
    #####:  620:    if (property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)
        -:  621:    {
    #####:  622:      ecma_named_data_property_assign_value (object_p,
        -:  623:                                             ext_property_ref.property_ref.value_p,
        -:  624:                                             property_desc_p->value);
        -:  625:    }
        -:  626:
    #####:  627:    if (property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED)
        -:  628:    {
    #####:  629:      ecma_set_property_writable_attr (ext_property_ref.property_p, (property_desc_p->flags & JERRY_PROP_IS_WRITABLE));
        -:  630:    }
        -:  631:  }
    #####:  632:  else if (property_desc_type == ECMA_OP_OBJECT_DEFINE_ACCESSOR)
        -:  633:  {
    #####:  634:    JERRY_ASSERT (!(*ext_property_ref.property_p & ECMA_PROPERTY_FLAG_DATA));
        -:  635:
    #####:  636:    if (property_desc_p->flags & JERRY_PROP_IS_GET_DEFINED)
        -:  637:    {
    #####:  638:      ecma_set_named_accessor_property_getter (object_p,
        -:  639:                                               ext_property_ref.property_ref.value_p,
        -:  640:                                               property_desc_p->get_p);
        -:  641:    }
        -:  642:
    #####:  643:    if (property_desc_p->flags & JERRY_PROP_IS_SET_DEFINED)
        -:  644:    {
    #####:  645:      ecma_set_named_accessor_property_setter (object_p,
        -:  646:                                               ext_property_ref.property_ref.value_p,
        -:  647:                                               property_desc_p->set_p);
        -:  648:    }
        -:  649:  }
        -:  650:
    #####:  651:  if (property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)
        -:  652:  {
    #####:  653:    ecma_set_property_enumerable_attr (ext_property_ref.property_p,
    #####:  654:                                       (property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE));
        -:  655:  }
        -:  656:
    #####:  657:  if (property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED)
        -:  658:  {
    #####:  659:    ecma_set_property_configurable_attr (ext_property_ref.property_p,
    #####:  660:                                         (property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE));
        -:  661:  }
        -:  662:
    #####:  663:  return ECMA_VALUE_TRUE;
        -:  664:} /* ecma_op_general_object_define_own_property */
        -:  665:
        -:  666:#if JERRY_ESNEXT
        -:  667:/**
        -:  668: * The IsCompatiblePropertyDescriptor method for Proxy object internal methods
        -:  669: *
        -:  670: * See also:
        -:  671: *          ECMAScript v6, 9.1.6.2
        -:  672: *
        -:  673: * @return bool
        -:  674: */
        -:  675:bool
    #####:  676:ecma_op_is_compatible_property_descriptor (const ecma_property_descriptor_t *desc_p, /**< target descriptor */
        -:  677:                                           const ecma_property_descriptor_t *current_p, /**< current descriptor */
        -:  678:                                           bool is_extensible) /**< true - if target object is extensible
        -:  679:                                                                    false - otherwise */
        -:  680:{
    #####:  681:  JERRY_ASSERT (desc_p != NULL);
        -:  682:
        -:  683:  /* 2. */
    #####:  684:  if (current_p == NULL)
        -:  685:  {
    #####:  686:    return is_extensible;
        -:  687:  }
        -:  688:
        -:  689:  /* 3. */
    #####:  690:  if (desc_p->flags == 0)
        -:  691:  {
    #####:  692:    return true;
        -:  693:  }
        -:  694:
        -:  695:  /* 4. */
    #####:  696:  if ((current_p->flags & desc_p->flags) == desc_p->flags)
        -:  697:  {
    #####:  698:    if ((current_p->flags & JERRY_PROP_IS_VALUE_DEFINED)
    #####:  699:         && ecma_op_same_value (current_p->value, desc_p->value))
        -:  700:    {
    #####:  701:      return true;
        -:  702:    }
        -:  703:
    #####:  704:    if ((current_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED)
    #####:  705:         && current_p->get_p == desc_p->get_p
    #####:  706:         && current_p->set_p == desc_p->set_p))
        -:  707:    {
    #####:  708:      return true;
        -:  709:    }
        -:  710:  }
        -:  711:
        -:  712:  /* 5. */
    #####:  713:  if (!(current_p->flags & JERRY_PROP_IS_CONFIGURABLE))
        -:  714:  {
    #####:  715:    if (desc_p->flags & JERRY_PROP_IS_CONFIGURABLE)
        -:  716:    {
    #####:  717:      return false;
        -:  718:    }
    #####:  719:    if ((desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)
    #####:  720:        && ((current_p->flags & JERRY_PROP_IS_ENUMERABLE) != (desc_p->flags & JERRY_PROP_IS_ENUMERABLE)))
        -:  721:    {
    #####:  722:      return false;
        -:  723:    }
        -:  724:  }
        -:  725:
    #####:  726:  const uint32_t accessor_desc_flags = (JERRY_PROP_IS_SET_DEFINED | JERRY_PROP_IS_GET_DEFINED);
    #####:  727:  const uint32_t data_desc_flags = (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE_DEFINED);
        -:  728:
    #####:  729:  bool desc_is_accessor = (desc_p->flags & accessor_desc_flags) != 0;
    #####:  730:  bool desc_is_data = (desc_p->flags & data_desc_flags) != 0;
    #####:  731:  bool current_is_data = (current_p->flags & data_desc_flags) != 0;
        -:  732:
        -:  733:  /* 6. */
    #####:  734:  if (!desc_is_accessor && !desc_is_data)
        -:  735:  {
    #####:  736:    return true;
        -:  737:  }
        -:  738:
        -:  739:  /* 7. */
    #####:  740:  if (current_is_data != desc_is_data)
        -:  741:  {
    #####:  742:    return (current_p->flags & JERRY_PROP_IS_CONFIGURABLE) != 0;
        -:  743:  }
        -:  744:
        -:  745:  /* 8. */
    #####:  746:  if (current_is_data)
        -:  747:  {
    #####:  748:    if (!(current_p->flags & JERRY_PROP_IS_CONFIGURABLE))
        -:  749:    {
    #####:  750:      if (!(current_p->flags & JERRY_PROP_IS_WRITABLE)
    #####:  751:           && (desc_p->flags & JERRY_PROP_IS_WRITABLE))
        -:  752:      {
    #####:  753:        return false;
        -:  754:      }
        -:  755:
    #####:  756:      if (!(current_p->flags & JERRY_PROP_IS_WRITABLE)
    #####:  757:           && (desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)
    #####:  758:           && !ecma_op_same_value (desc_p->value, current_p->value))
        -:  759:      {
    #####:  760:        return false;
        -:  761:      }
        -:  762:    }
        -:  763:
    #####:  764:    return true;
        -:  765:  }
        -:  766:
    #####:  767:  JERRY_ASSERT ((current_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED)) != 0);
    #####:  768:  JERRY_ASSERT ((desc_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED)) != 0);
        -:  769:
        -:  770:  /* 9. */
    #####:  771:  if (!(current_p->flags & JERRY_PROP_IS_CONFIGURABLE))
        -:  772:  {
    #####:  773:    if ((desc_p->flags & JERRY_PROP_IS_SET_DEFINED)
    #####:  774:         && desc_p->set_p != current_p->set_p)
        -:  775:    {
    #####:  776:      return false;
        -:  777:    }
        -:  778:
    #####:  779:    if ((desc_p->flags & JERRY_PROP_IS_GET_DEFINED)
    #####:  780:         && desc_p->get_p != current_p->get_p)
        -:  781:    {
    #####:  782:      return false;
        -:  783:    }
        -:  784:  }
        -:  785:
    #####:  786:  return true;
        -:  787:} /* ecma_op_is_compatible_property_descriptor */
        -:  788:
        -:  789:/**
        -:  790: * CompletePropertyDescriptor method for proxy internal method
        -:  791: *
        -:  792: * See also:
        -:  793: *          ECMA-262 v6, 6.2.4.5
        -:  794: */
        -:  795:void
    #####:  796:ecma_op_to_complete_property_descriptor (ecma_property_descriptor_t *desc_p) /**< target descriptor */
        -:  797:{
        -:  798:  /* 4. */
    #####:  799:  if (!(desc_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED)))
        -:  800:  {
        -:  801:    /* a. */
    #####:  802:    desc_p->flags |= JERRY_PROP_IS_VALUE_DEFINED;
        -:  803:  }
        -:  804:  /* 5. */
        -:  805:  else
        -:  806:  {
    #####:  807:    desc_p->flags |= (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED);
        -:  808:  }
    #####:  809:} /* ecma_op_to_complete_property_descriptor */
        -:  810:#endif /* JERRY_ESNEXT */
        -:  811:
        -:  812:/**
        -:  813: * @}
        -:  814: * @}
        -:  815: */
