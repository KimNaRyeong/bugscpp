        -:    0:Source:/home/workspace/jerry-port/default/default-date.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <time.h>
        -:   17:
        -:   18:#ifdef _WIN32
        -:   19:#include <windows.h>
        -:   20:#include <winbase.h>
        -:   21:#include <winnt.h>
        -:   22:#endif /* _WIN32 */
        -:   23:
        -:   24:#if defined (__GNUC__) || defined (__clang__)
        -:   25:#include <sys/time.h>
        -:   26:#endif /* __GNUC__ || __clang__ */
        -:   27:
        -:   28:#include "jerryscript-port.h"
        -:   29:#include "jerryscript-port-default.h"
        -:   30:
        -:   31:#ifdef _WIN32
        -:   32:static const LONGLONG UnixEpochInTicks = 116444736000000000; /* difference between 1970 and 1601 */
        -:   33:static const LONGLONG TicksPerMs = 10000; /* 1 tick is 100 nanoseconds */
        -:   34:
        -:   35:/* https://support.microsoft.com/en-us/help/167296/how-to-convert-a-unix-time-t-to-a-win32-filetime-or-systemtime */
        -:   36:static void UnixTimeMsToFileTime (double t, LPFILETIME pft)
        -:   37:{
        -:   38:  LONGLONG ll = (LONGLONG) t * TicksPerMs + UnixEpochInTicks;
        -:   39:  pft->dwLowDateTime = (DWORD) ll;
        -:   40:  pft->dwHighDateTime = (DWORD) (ll >> 32);
        -:   41:} /* UnixTimeMsToFileTime */
        -:   42:
        -:   43:static double FileTimeToUnixTimeMs (FILETIME ft)
        -:   44:{
        -:   45:  ULARGE_INTEGER date;
        -:   46:  date.HighPart = ft.dwHighDateTime;
        -:   47:  date.LowPart = ft.dwLowDateTime;
        -:   48:  return (double) (((LONGLONG) date.QuadPart - UnixEpochInTicks) / TicksPerMs);
        -:   49:} /* FileTimeToUnixTimeMs */
        -:   50:
        -:   51:#endif /* _WIN32 */
        -:   52:
        -:   53:/**
        -:   54: * Default implementation of jerry_port_get_local_time_zone_adjustment.
        -:   55: *
        -:   56: * @return offset between UTC and local time at the given unix timestamp, if
        -:   57: *         available. Otherwise, returns 0, assuming UTC time.
        -:   58: */
    #####:   59:double jerry_port_get_local_time_zone_adjustment (double unix_ms,  /**< ms since unix epoch */
        -:   60:                                                  bool is_utc)  /**< is the time above in UTC? */
        -:   61:{
        -:   62:#if defined (HAVE_TM_GMTOFF)
    #####:   63:  struct tm tm;
    #####:   64:  time_t now = (time_t) (unix_ms / 1000);
    #####:   65:  localtime_r (&now, &tm);
        -:   66:
    #####:   67:  if (!is_utc)
        -:   68:  {
    #####:   69:    now -= tm.tm_gmtoff;
    #####:   70:    localtime_r (&now, &tm);
        -:   71:  }
        -:   72:
    #####:   73:  return ((double) tm.tm_gmtoff) * 1000;
        -:   74:#elif defined (_WIN32)
        -:   75:  FILETIME fileTime, localFileTime;
        -:   76:  SYSTEMTIME systemTime, localSystemTime;
        -:   77:  ULARGE_INTEGER time, localTime;
        -:   78:
        -:   79:  UnixTimeMsToFileTime (unix_ms, &fileTime);
        -:   80:  /* If time is earlier than year 1601, then always using year 1601 to query time zone adjustment */
        -:   81:  if (fileTime.dwHighDateTime >= 0x80000000)
        -:   82:  {
        -:   83:    fileTime.dwHighDateTime = 0;
        -:   84:    fileTime.dwLowDateTime = 0;
        -:   85:  }
        -:   86:
        -:   87:  if (FileTimeToSystemTime (&fileTime, &systemTime)
        -:   88:      && SystemTimeToTzSpecificLocalTime (0, &systemTime, &localSystemTime)
        -:   89:      && SystemTimeToFileTime (&localSystemTime, &localFileTime))
        -:   90:  {
        -:   91:    time.LowPart = fileTime.dwLowDateTime;
        -:   92:    time.HighPart = fileTime.dwHighDateTime;
        -:   93:    localTime.LowPart = localFileTime.dwLowDateTime;
        -:   94:    localTime.HighPart = localFileTime.dwHighDateTime;
        -:   95:    return (double) (((LONGLONG) localTime.QuadPart - (LONGLONG) time.QuadPart) / TicksPerMs);
        -:   96:  }
        -:   97:  return 0.0;
        -:   98:#elif defined (__GNUC__) || defined (__clang__)
        -:   99:  time_t now_time = (time_t) (unix_ms / 1000);
        -:  100:  double tza_s = 0.0;
        -:  101:
        -:  102:  while (true)
        -:  103:  {
        -:  104:    struct tm now_tm;
        -:  105:    if (!gmtime_r (&now_time, &now_tm))
        -:  106:    {
        -:  107:      break;
        -:  108:    }
        -:  109:    now_tm.tm_isdst = -1; /* if not overridden, DST will not be taken into account */
        -:  110:    time_t local_time = mktime (&now_tm);
        -:  111:    if (local_time == (time_t) -1)
        -:  112:    {
        -:  113:      break;
        -:  114:    }
        -:  115:    tza_s = difftime (now_time, local_time);
        -:  116:
        -:  117:    if (is_utc)
        -:  118:    {
        -:  119:      break;
        -:  120:    }
        -:  121:    now_time -= (time_t) tza_s;
        -:  122:    is_utc = true;
        -:  123:  }
        -:  124:
        -:  125:  return tza_s * 1000;
        -:  126:#else /* !HAVE_TM_GMTOFF && !_WIN32 && !__GNUC__ && !__clang__ */
        -:  127:  (void) unix_ms; /* unused */
        -:  128:  (void) is_utc; /* unused */
        -:  129:  return 0.0;
        -:  130:#endif /* HAVE_TM_GMTOFF */
        -:  131:} /* jerry_port_get_local_time_zone_adjustment */
        -:  132:
        -:  133:/**
        -:  134: * Default implementation of jerry_port_get_current_time. Uses 'gettimeofday' if
        -:  135: * available on the system, does nothing otherwise.
        -:  136: *
        -:  137: * @return milliseconds since Unix epoch - if 'gettimeofday' is available and
        -:  138: *                                         executed successfully,
        -:  139: *         0 - otherwise.
        -:  140: */
        1:  141:double jerry_port_get_current_time (void)
        -:  142:{
        -:  143:#ifdef _WIN32
        -:  144:  FILETIME ft;
        -:  145:  GetSystemTimeAsFileTime (&ft);
        -:  146:  return FileTimeToUnixTimeMs (ft);
        -:  147:#elif defined (__GNUC__) || defined (__clang__)
        1:  148:  struct timeval tv;
        -:  149:
        1:  150:  if (gettimeofday (&tv, NULL) == 0)
        -:  151:  {
        1:  152:    return ((double) tv.tv_sec) * 1000.0 + ((double) tv.tv_usec) / 1000.0;
        -:  153:  }
    #####:  154:  return 0.0;
        -:  155:#else /* !_WIN32 && !__GNUC__ && !__clang__ */
        -:  156:  return 0.0;
        -:  157:#endif /* _WIN32 */
        -:  158:} /* jerry_port_get_current_time */
