        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-promise.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-array-object.h"
        -:   18:#include "ecma-builtin-helpers.h"
        -:   19:#include "ecma-builtin-handlers.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-function-object.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-iterator-object.h"
        -:   25:#include "ecma-number-object.h"
        -:   26:#include "ecma-promise-object.h"
        -:   27:#include "jcontext.h"
        -:   28:
        -:   29:#if JERRY_ESNEXT
        -:   30:
        -:   31:#define ECMA_BUILTINS_INTERNAL
        -:   32:#include "ecma-builtins-internal.h"
        -:   33:
        -:   34:/**
        -:   35: * This object has a custom dispatch function.
        -:   36: */
        -:   37:#define BUILTIN_CUSTOM_DISPATCH
        -:   38:
        -:   39:/**
        -:   40: * List of built-in routine identifiers.
        -:   41: */
        -:   42:enum
        -:   43:{
        -:   44:  ECMA_PROMISE_ROUTINE_START = 0,
        -:   45:  ECMA_PROMISE_ROUTINE_REJECT,
        -:   46:  ECMA_PROMISE_ROUTINE_RESOLVE,
        -:   47:  ECMA_PROMISE_ROUTINE_RACE,
        -:   48:  ECMA_PROMISE_ROUTINE_ALL,
        -:   49:  ECMA_PROMISE_ROUTINE_ALLSETTLED,
        -:   50:  ECMA_PROMISE_ROUTINE_ANY,
        -:   51:  ECMA_PROMISE_ROUTINE_SPECIES_GET
        -:   52:};
        -:   53:
        -:   54:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-promise.inc.h"
        -:   55:#define BUILTIN_UNDERSCORED_ID promise
        -:   56:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   57:
        -:   58:/** \addtogroup ecma ECMA
        -:   59: * @{
        -:   60: *
        -:   61: * \addtogroup ecmabuiltins
        -:   62: * @{
        -:   63: *
        -:   64: * \addtogroup promise ECMA Promise object built-in
        -:   65: * @{
        -:   66: */
        -:   67:
        -:   68:/**
        -:   69: * Reject the promise if the value is error.
        -:   70: *
        -:   71: * See also:
        -:   72: *         ES2015 25.4.1.1.1
        -:   73: *
        -:   74: * @return ecma value of the new promise.
        -:   75: *         Returned value must be freed with ecma_free_value.
        -:   76: */
        -:   77:static inline ecma_value_t
    #####:   78:ecma_builtin_promise_reject_abrupt (ecma_value_t value, /**< value */
        -:   79:                                    ecma_object_t *capability_obj_p) /**< capability */
        -:   80:{
    #####:   81:  JERRY_ASSERT (ecma_object_class_is (capability_obj_p, ECMA_OBJECT_CLASS_PROMISE_CAPABILITY));
        -:   82:
    #####:   83:  if (!ECMA_IS_VALUE_ERROR (value))
        -:   84:  {
    #####:   85:    return value;
        -:   86:  }
        -:   87:
    #####:   88:  ecma_value_t reason = jcontext_take_exception ();
        -:   89:
    #####:   90:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
    #####:   91:  ecma_value_t call_ret = ecma_op_function_call (ecma_get_object_from_value (capability_p->reject),
        -:   92:                                                 ECMA_VALUE_UNDEFINED,
        -:   93:                                                 &reason,
        -:   94:                                                 1);
    #####:   95:  ecma_free_value (reason);
        -:   96:
    #####:   97:  if (ECMA_IS_VALUE_ERROR (call_ret))
        -:   98:  {
    #####:   99:    return call_ret;
        -:  100:  }
        -:  101:
    #####:  102:  ecma_free_value (call_ret);
        -:  103:
    #####:  104:  return ecma_copy_value (capability_p->header.u.cls.u3.promise);
        -:  105:} /* ecma_builtin_promise_reject_abrupt */
        -:  106:
        -:  107:/**
        -:  108: * Runtime Semantics: PerformPromiseRace.
        -:  109: *
        -:  110: * See also:
        -:  111: *         ES2020 25.6.4.4.1
        -:  112: *
        -:  113: * @return ecma value of the new promise.
        -:  114: *         Returned value must be freed with ecma_free_value.
        -:  115: */
        -:  116:static inline ecma_value_t
    #####:  117:ecma_builtin_promise_perform_race (ecma_value_t iterator, /**< the iterator for race */
        -:  118:                                   ecma_value_t next_method, /**< next method */
        -:  119:                                   ecma_object_t *capability_obj_p, /**< PromiseCapability record */
        -:  120:                                   ecma_value_t ctor, /**< Constructor value */
        -:  121:                                   ecma_value_t resolve, /** the resolve of Promise.all */
        -:  122:                                   bool *done_p) /**< [out] iteratorRecord[[done]] */
        -:  123:{
    #####:  124:  JERRY_ASSERT (ecma_is_value_object (iterator));
    #####:  125:  JERRY_ASSERT (ecma_object_class_is (capability_obj_p, ECMA_OBJECT_CLASS_PROMISE_CAPABILITY));
    #####:  126:  JERRY_ASSERT (ecma_is_constructor (ctor));
        -:  127:
    #####:  128:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
        -:  129:
    #####:  130:  ecma_object_t *resolve_func_p = ecma_get_object_from_value (resolve);
    #####:  131:  ecma_value_t ret_value = ECMA_VALUE_ERROR;
        -:  132:
        -:  133:  /* 5. */
        -:  134:  while (true)
    #####:  135:  {
        -:  136:    /* a. */
    #####:  137:    ecma_value_t next = ecma_op_iterator_step (iterator, next_method);
        -:  138:    /* b, c. */
    #####:  139:    if (ECMA_IS_VALUE_ERROR (next))
        -:  140:    {
    #####:  141:      goto done;
        -:  142:    }
        -:  143:
        -:  144:    /* d. */
    #####:  145:    if (ecma_is_value_false (next))
        -:  146:    {
        -:  147:      /* ii. */
    #####:  148:      ret_value = ecma_copy_value (capability_p->header.u.cls.u3.promise);
    #####:  149:      goto done;
        -:  150:    }
        -:  151:
        -:  152:    /* e. */
    #####:  153:    ecma_value_t next_val = ecma_op_iterator_value (next);
    #####:  154:    ecma_free_value (next);
        -:  155:
        -:  156:    /* f, g. */
    #####:  157:    if (ECMA_IS_VALUE_ERROR (next_val))
        -:  158:    {
    #####:  159:      goto done;
        -:  160:    }
        -:  161:
        -:  162:    /* h. */
    #####:  163:    ecma_value_t next_promise = ecma_op_function_call (resolve_func_p, ctor, &next_val, 1);
    #####:  164:    ecma_free_value (next_val);
        -:  165:
    #####:  166:    if (ECMA_IS_VALUE_ERROR (next_promise))
        -:  167:    {
    #####:  168:      goto exit;
        -:  169:    }
        -:  170:
        -:  171:    /* i. */
    #####:  172:    ecma_value_t args[2] = {capability_p->resolve, capability_p->reject};
    #####:  173:    ecma_value_t result = ecma_op_invoke_by_magic_id (next_promise, LIT_MAGIC_STRING_THEN, args, 2);
    #####:  174:    ecma_free_value (next_promise);
        -:  175:
    #####:  176:    if (ECMA_IS_VALUE_ERROR (result))
        -:  177:    {
    #####:  178:      goto exit;
        -:  179:    }
        -:  180:
    #####:  181:    ecma_free_value (result);
        -:  182:  }
        -:  183:
    #####:  184:done:
    #####:  185:  *done_p = true;
    #####:  186:exit:
    #####:  187:  return ret_value;
        -:  188:} /* ecma_builtin_promise_perform_race */
        -:  189:
        -:  190:/**
        -:  191: * Runtime Semantics: Perform Promise all, allSettled or any.
        -:  192: *
        -:  193: * See also:
        -:  194: *         ES2020 25.6.4.1.1
        -:  195: *
        -:  196: * @return ecma value of the new promise.
        -:  197: *         Returned value must be freed with ecma_free_value.
        -:  198: */
        -:  199:static inline ecma_value_t
    #####:  200:ecma_builtin_promise_perform (ecma_value_t iterator, /**< iteratorRecord */
        -:  201:                              ecma_value_t next_method, /**< next method */
        -:  202:                              ecma_object_t *capability_obj_p,  /**< PromiseCapability record */
        -:  203:                              ecma_value_t ctor, /**< the caller of Promise.all */
        -:  204:                              ecma_value_t resolve, /** the resolve of Promise.all */
        -:  205:                              uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  206:                              bool *done_p) /**< [out] iteratorRecord[[done]] */
        -:  207:{
        -:  208:  /* 1. - 2. */
    #####:  209:  JERRY_ASSERT (ecma_object_class_is (capability_obj_p, ECMA_OBJECT_CLASS_PROMISE_CAPABILITY));
    #####:  210:  JERRY_ASSERT (ecma_is_constructor (ctor));
        -:  211:
    #####:  212:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
        -:  213:
    #####:  214:  ecma_object_t *resolve_func_p = ecma_get_object_from_value (resolve);
        -:  215:
        -:  216:  /* 3. */
    #####:  217:  ecma_object_t *values_array_obj_p = ecma_op_new_array_object (0);
    #####:  218:  ecma_value_t values_array = ecma_make_object_value (values_array_obj_p);
        -:  219:  /* 4. */
    #####:  220:  ecma_value_t remaining = ecma_op_create_number_object (ecma_make_integer_value (1));
        -:  221:  /* 5. */
    #####:  222:  uint32_t idx = 0;
        -:  223:
    #####:  224:  ecma_value_t ret_value = ECMA_VALUE_ERROR;
        -:  225:
        -:  226:  /* 6. */
        -:  227:  while (true)
    #####:  228:  {
        -:  229:    /* a. */
    #####:  230:    ecma_value_t next = ecma_op_iterator_step (iterator, next_method);
        -:  231:    /* b. - c. */
    #####:  232:    if (ECMA_IS_VALUE_ERROR (next))
        -:  233:    {
    #####:  234:      goto done;
        -:  235:    }
        -:  236:
        -:  237:    /* d. */
    #####:  238:    if (ecma_is_value_false (next))
        -:  239:    {
        -:  240:      /* ii. - iii. */
    #####:  241:      if (ecma_promise_remaining_inc_or_dec (remaining, false) == 0)
        -:  242:      {
    #####:  243:        if (builtin_routine_id == ECMA_PROMISE_ROUTINE_ANY)
        -:  244:        {
    #####:  245:          ret_value = ecma_raise_aggregate_error (values_array, ECMA_VALUE_UNDEFINED);
    #####:  246:          goto done;
        -:  247:        }
        -:  248:
        -:  249:        /* 2. */
    #####:  250:        ecma_value_t resolve_result = ecma_op_function_call (ecma_get_object_from_value (capability_p->resolve),
        -:  251:                                                             ECMA_VALUE_UNDEFINED,
        -:  252:                                                             &values_array,
        -:  253:                                                             1);
        -:  254:        /* 3. */
    #####:  255:        if (ECMA_IS_VALUE_ERROR (resolve_result))
        -:  256:        {
    #####:  257:          goto done;
        -:  258:        }
        -:  259:
    #####:  260:        ecma_free_value (resolve_result);
        -:  261:      }
        -:  262:
        -:  263:      /* iv. */
    #####:  264:      ret_value = ecma_copy_value (capability_p->header.u.cls.u3.promise);
    #####:  265:      goto done;
        -:  266:    }
        -:  267:
        -:  268:    /* e. */
    #####:  269:    ecma_value_t next_value = ecma_op_iterator_value (next);
    #####:  270:    ecma_free_value (next);
        -:  271:
        -:  272:    /* f. - g. */
    #####:  273:    if (ECMA_IS_VALUE_ERROR (next_value))
        -:  274:    {
    #####:  275:      goto done;
        -:  276:    }
        -:  277:
        -:  278:    /* h. */
    #####:  279:    ecma_builtin_helper_def_prop_by_index (values_array_obj_p,
        -:  280:                                           idx,
        -:  281:                                           ECMA_VALUE_UNDEFINED,
        -:  282:                                           ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);
        -:  283:
        -:  284:    /* i. */
    #####:  285:    ecma_value_t next_promise = ecma_op_function_call (resolve_func_p, ctor, &next_value, 1);
    #####:  286:    ecma_free_value (next_value);
        -:  287:
        -:  288:    /* j. */
    #####:  289:    if (ECMA_IS_VALUE_ERROR (next_promise))
        -:  290:    {
    #####:  291:      goto exit;
        -:  292:    }
        -:  293:
    #####:  294:    if (JERRY_UNLIKELY (idx == UINT32_MAX - 1))
        -:  295:    {
    #####:  296:      ecma_raise_range_error (ECMA_ERR_MSG ("Promise.all remaining elements limit reached"));
    #####:  297:      goto exit;
        -:  298:    }
        -:  299:
    #####:  300:    idx++;
    #####:  301:    ecma_value_t args[2];
    #####:  302:    ecma_object_t *executor_func_p = NULL;
        -:  303:
    #####:  304:    if (builtin_routine_id != ECMA_PROMISE_ROUTINE_ANY)
        -:  305:    {
        -:  306:      /* k. */
    #####:  307:      executor_func_p = ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROMISE_ALL_HELPER,
        -:  308:                                                       sizeof (ecma_promise_all_executor_t));
        -:  309:
    #####:  310:      ecma_promise_all_executor_t *executor_p = (ecma_promise_all_executor_t *) executor_func_p;
        -:  311:
        -:  312:      /* m. + t. */
    #####:  313:      executor_p->index = idx;
        -:  314:
        -:  315:      /* n. */
    #####:  316:      executor_p->values = values_array;
        -:  317:
        -:  318:      /* o. */
    #####:  319:      executor_p->capability = ecma_make_object_value (capability_obj_p);
        -:  320:
        -:  321:      /* p. */
    #####:  322:      executor_p->remaining_elements = remaining;
        -:  323:
    #####:  324:      uint8_t executor_type = ECMA_PROMISE_ALL_RESOLVE << ECMA_NATIVE_HANDLER_FLAGS_PROMISE_HELPER_SHIFT;
        -:  325:
    #####:  326:      if (builtin_routine_id == ECMA_PROMISE_ROUTINE_ALLSETTLED)
        -:  327:      {
    #####:  328:        executor_type = ECMA_PROMISE_ALLSETTLED_RESOLVE << ECMA_NATIVE_HANDLER_FLAGS_PROMISE_HELPER_SHIFT;
        -:  329:      }
        -:  330:
    #####:  331:      executor_p->header.u.built_in.u2.routine_flags |= executor_type;
        -:  332:
    #####:  333:      args[0] = ecma_make_object_value (executor_func_p);
        -:  334:    }
        -:  335:    else
        -:  336:    {
    #####:  337:      args[0] = capability_p->resolve;
        -:  338:    }
        -:  339:
        -:  340:    /* q. */
    #####:  341:    ecma_promise_remaining_inc_or_dec (remaining, true);
        -:  342:    ecma_value_t result;
        -:  343:
    #####:  344:    if (builtin_routine_id != ECMA_PROMISE_ROUTINE_ALL)
        -:  345:    {
    #####:  346:      uint8_t executor_type = ECMA_PROMISE_ALLSETTLED_REJECT << ECMA_NATIVE_HANDLER_FLAGS_PROMISE_HELPER_SHIFT;
        -:  347:
    #####:  348:      if (builtin_routine_id == ECMA_PROMISE_ROUTINE_ANY)
        -:  349:      {
    #####:  350:        executor_type = ECMA_PROMISE_ANY_REJECT << ECMA_NATIVE_HANDLER_FLAGS_PROMISE_HELPER_SHIFT;
        -:  351:      }
        -:  352:
    #####:  353:      ecma_object_t *reject_func_p = ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROMISE_ALL_HELPER,
        -:  354:                                                                    sizeof (ecma_promise_all_executor_t));
        -:  355:
    #####:  356:      ecma_promise_all_executor_t *reject_p = (ecma_promise_all_executor_t *) reject_func_p;
    #####:  357:      reject_p->index = idx;
    #####:  358:      reject_p->values = values_array;
    #####:  359:      reject_p->capability = ecma_make_object_value (capability_obj_p);
    #####:  360:      reject_p->remaining_elements = remaining;
    #####:  361:      reject_p->header.u.built_in.u2.routine_flags |= executor_type;
    #####:  362:      args[1] = ecma_make_object_value (reject_func_p);
    #####:  363:      result = ecma_op_invoke_by_magic_id (next_promise, LIT_MAGIC_STRING_THEN, args, 2);
    #####:  364:      ecma_deref_object (reject_func_p);
        -:  365:    }
        -:  366:    else
        -:  367:    {
    #####:  368:      args[1] = capability_p->reject;
    #####:  369:      result = ecma_op_invoke_by_magic_id (next_promise, LIT_MAGIC_STRING_THEN, args, 2);
        -:  370:    }
        -:  371:
    #####:  372:    ecma_free_value (next_promise);
        -:  373:
    #####:  374:    if (builtin_routine_id != ECMA_PROMISE_ROUTINE_ANY)
        -:  375:    {
    #####:  376:      ecma_deref_object (executor_func_p);
        -:  377:    }
        -:  378:
        -:  379:    /* s. */
    #####:  380:    if (ECMA_IS_VALUE_ERROR (result))
        -:  381:    {
    #####:  382:      goto exit;
        -:  383:    }
        -:  384:
    #####:  385:    ecma_free_value (result);
        -:  386:  }
        -:  387:
    #####:  388:done:
    #####:  389:  *done_p = true;
    #####:  390:exit:
    #####:  391:  ecma_free_value (remaining);
    #####:  392:  ecma_deref_object (values_array_obj_p);
    #####:  393:  return ret_value;
        -:  394:} /* ecma_builtin_promise_perform */
        -:  395:
        -:  396:/**
        -:  397: * The common function for Promise.race, Promise.all, Promise.any and Promise.allSettled.
        -:  398: *
        -:  399: * @return ecma value of the new promise.
        -:  400: *         Returned value must be freed with ecma_free_value.
        -:  401: */
        -:  402:static ecma_value_t
    #####:  403:ecma_builtin_promise_helper (ecma_value_t this_arg, /**< 'this' argument */
        -:  404:                             ecma_value_t iterable, /**< the items to be resolved */
        -:  405:                             uint8_t builtin_routine_id) /**< built-in wide routine identifier */
        -:  406:{
    #####:  407:  ecma_object_t *capability_obj_p = ecma_promise_new_capability (this_arg, ECMA_VALUE_UNDEFINED);
        -:  408:
    #####:  409:  if (JERRY_UNLIKELY (capability_obj_p == NULL))
        -:  410:  {
    #####:  411:    return ECMA_VALUE_ERROR;
        -:  412:  }
        -:  413:
    #####:  414:  ecma_value_t resolve = ecma_op_object_get_by_magic_id (ecma_get_object_from_value (this_arg),
        -:  415:                                                         LIT_MAGIC_STRING_RESOLVE);
        -:  416:
    #####:  417:  if (ECMA_IS_VALUE_ERROR (resolve))
        -:  418:  {
    #####:  419:    resolve = ecma_builtin_promise_reject_abrupt (resolve, capability_obj_p);
    #####:  420:    ecma_deref_object (capability_obj_p);
    #####:  421:    return resolve;
        -:  422:  }
        -:  423:
    #####:  424:  if (!ecma_op_is_callable (resolve))
        -:  425:  {
    #####:  426:    ecma_free_value (resolve);
    #####:  427:    ecma_raise_type_error (ECMA_ERR_MSG ("Resolve method must be callable"));
    #####:  428:    resolve = ecma_builtin_promise_reject_abrupt (ECMA_VALUE_ERROR, capability_obj_p);
    #####:  429:    ecma_deref_object (capability_obj_p);
    #####:  430:    return resolve;
        -:  431:  }
        -:  432:
    #####:  433:  ecma_value_t next_method;
    #####:  434:  ecma_value_t iterator = ecma_op_get_iterator (iterable, ECMA_VALUE_SYNC_ITERATOR, &next_method);
    #####:  435:  iterator = ecma_builtin_promise_reject_abrupt (iterator, capability_obj_p);
        -:  436:
    #####:  437:  if (ECMA_IS_VALUE_ERROR (iterator))
        -:  438:  {
    #####:  439:    ecma_deref_object (capability_obj_p);
    #####:  440:    return iterator;
        -:  441:  }
        -:  442:
    #####:  443:  ecma_value_t ret = ECMA_VALUE_EMPTY;
    #####:  444:  bool is_done = false;
        -:  445:
    #####:  446:  if (builtin_routine_id == ECMA_PROMISE_ROUTINE_RACE)
        -:  447:  {
    #####:  448:    ret = ecma_builtin_promise_perform_race (iterator, next_method, capability_obj_p, this_arg, resolve, &is_done);
        -:  449:  }
        -:  450:  else
        -:  451:  {
    #####:  452:    ret = ecma_builtin_promise_perform (iterator,
        -:  453:                                        next_method,
        -:  454:                                        capability_obj_p,
        -:  455:                                        this_arg,
        -:  456:                                        resolve,
        -:  457:                                        builtin_routine_id,
        -:  458:                                        &is_done);
        -:  459:  }
        -:  460:
    #####:  461:  if (ECMA_IS_VALUE_ERROR (ret))
        -:  462:  {
    #####:  463:    if (!is_done)
        -:  464:    {
    #####:  465:      ret = ecma_op_iterator_close (iterator);
        -:  466:    }
        -:  467:
    #####:  468:    ret = ecma_builtin_promise_reject_abrupt (ret, capability_obj_p);
        -:  469:  }
        -:  470:
    #####:  471:  ecma_free_value (iterator);
    #####:  472:  ecma_free_value (next_method);
    #####:  473:  ecma_free_value (resolve);
    #####:  474:  ecma_deref_object (capability_obj_p);
        -:  475:
    #####:  476:  return ret;
        -:  477:} /* ecma_builtin_promise_helper */
        -:  478:
        -:  479:/**
        -:  480: * Handle calling [[Call]] of built-in Promise object.
        -:  481: *
        -:  482: * ES2015 25.4.3 Promise is not intended to be called
        -:  483: * as a function and will throw an exception when called
        -:  484: * in that manner.
        -:  485: *
        -:  486: * @return ecma value
        -:  487: */
        -:  488:ecma_value_t
    #####:  489:ecma_builtin_promise_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  490:                                    uint32_t arguments_list_len) /**< number of arguments */
        -:  491:{
    #####:  492:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  493:
    #####:  494:  return ecma_raise_type_error (ECMA_ERR_MSG ("Constructor Promise requires 'new'"));
        -:  495:} /* ecma_builtin_promise_dispatch_call */
        -:  496:
        -:  497:/**
        -:  498: * Handle calling [[Construct]] of built-in Promise object.
        -:  499: *
        -:  500: * @return ecma value
        -:  501: */
        -:  502:ecma_value_t
    #####:  503:ecma_builtin_promise_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  504:                                         uint32_t arguments_list_len) /**< number of arguments */
        -:  505:{
    #####:  506:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  507:
    #####:  508:  if (arguments_list_len == 0 || !ecma_op_is_callable (arguments_list_p[0]))
        -:  509:  {
    #####:  510:    return ecma_raise_type_error (ECMA_ERR_MSG ("First parameter must be callable"));
        -:  511:  }
        -:  512:
    #####:  513:  return ecma_op_create_promise_object (arguments_list_p[0],
        -:  514:                                        ECMA_VALUE_UNDEFINED,
        -:  515:                                        JERRY_CONTEXT (current_new_target_p));
        -:  516:} /* ecma_builtin_promise_dispatch_construct */
        -:  517:
        -:  518:/**
        -:  519: * Dispatcher of the built-in's routines
        -:  520: *
        -:  521: * @return ecma value
        -:  522: *         Returned value must be freed with ecma_free_value.
        -:  523: */
        -:  524:ecma_value_t
    #####:  525:ecma_builtin_promise_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:  526:                                                                    *   identifier */
        -:  527:                                       ecma_value_t this_arg, /**< 'this' argument value */
        -:  528:                                       const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  529:                                                                               *   passed to routine */
        -:  530:                                       uint32_t arguments_number) /**< length of arguments' list */
        -:  531:{
        -:  532:  JERRY_UNUSED (arguments_number);
        -:  533:
    #####:  534:  switch (builtin_routine_id)
        -:  535:  {
    #####:  536:    case ECMA_PROMISE_ROUTINE_REJECT:
        -:  537:    case ECMA_PROMISE_ROUTINE_RESOLVE:
        -:  538:    {
    #####:  539:      bool is_resolve = (builtin_routine_id == ECMA_PROMISE_ROUTINE_RESOLVE);
    #####:  540:      return ecma_promise_reject_or_resolve (this_arg, arguments_list_p[0], is_resolve);
        -:  541:    }
    #####:  542:    case ECMA_PROMISE_ROUTINE_RACE:
        -:  543:    case ECMA_PROMISE_ROUTINE_ALL:
        -:  544:    case ECMA_PROMISE_ROUTINE_ALLSETTLED:
        -:  545:    case ECMA_PROMISE_ROUTINE_ANY:
        -:  546:    {
    #####:  547:      return ecma_builtin_promise_helper (this_arg, arguments_list_p[0], builtin_routine_id);
        -:  548:    }
    #####:  549:    case ECMA_PROMISE_ROUTINE_SPECIES_GET:
        -:  550:    {
    #####:  551:      return ecma_copy_value (this_arg);
        -:  552:    }
    #####:  553:    default:
        -:  554:    {
    #####:  555:      JERRY_UNREACHABLE ();
        -:  556:    }
        -:  557:  }
        -:  558:} /* ecma_builtin_promise_dispatch_routine */
        -:  559:
        -:  560:/**
        -:  561: * @}
        -:  562: * @}
        -:  563: * @}
        -:  564: */
        -:  565:
        -:  566:#endif /* JERRY_ESNEXT */
