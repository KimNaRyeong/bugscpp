        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-exceptions.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <stdarg.h>
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-conversion.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-objects.h"
        -:   24:#include "ecma-symbol-object.h"
        -:   25:#include "ecma-iterator-object.h"
        -:   26:#include "ecma-array-object.h"
        -:   27:#include "jcontext.h"
        -:   28:#include "jrt.h"
        -:   29:
        -:   30:#if JERRY_LINE_INFO
        -:   31:#include "vm.h"
        -:   32:#endif /* JERRY_LINE_INFO */
        -:   33:
        -:   34:/** \addtogroup ecma ECMA
        -:   35: * @{
        -:   36: *
        -:   37: * \addtogroup exceptions Exceptions
        -:   38: * @{
        -:   39: */
        -:   40:
        -:   41:/**
        -:   42: * Standard ecma-error object constructor.
        -:   43: *
        -:   44: * Note:
        -:   45: *    message_string_p can be NULL.
        -:   46: *
        -:   47: * Note:
        -:   48: *    calling with JERRY_ERROR_NONE does not make sense thus it will
        -:   49: *    cause a fault in the system.
        -:   50: *
        -:   51: * @return pointer to ecma-object representing specified error
        -:   52: *         with reference counter set to one.
        -:   53: */
        -:   54:ecma_object_t *
    #####:   55:ecma_new_standard_error (jerry_error_t error_type, /**< native error type */
        -:   56:                         ecma_string_t *message_string_p) /**< message string */
        -:   57:{
        -:   58:#if JERRY_BUILTIN_ERRORS
    #####:   59:  ecma_builtin_id_t prototype_id = ECMA_BUILTIN_ID__COUNT;
        -:   60:
    #####:   61:  switch (error_type)
        -:   62:  {
    #####:   63:    case JERRY_ERROR_EVAL:
        -:   64:    {
    #####:   65:      prototype_id = ECMA_BUILTIN_ID_EVAL_ERROR_PROTOTYPE;
    #####:   66:      break;
        -:   67:    }
        -:   68:
    #####:   69:    case JERRY_ERROR_RANGE:
        -:   70:    {
    #####:   71:      prototype_id = ECMA_BUILTIN_ID_RANGE_ERROR_PROTOTYPE;
    #####:   72:      break;
        -:   73:    }
        -:   74:
    #####:   75:    case JERRY_ERROR_REFERENCE:
        -:   76:    {
    #####:   77:      prototype_id = ECMA_BUILTIN_ID_REFERENCE_ERROR_PROTOTYPE;
    #####:   78:      break;
        -:   79:    }
        -:   80:
    #####:   81:    case JERRY_ERROR_TYPE:
        -:   82:    {
    #####:   83:      prototype_id = ECMA_BUILTIN_ID_TYPE_ERROR_PROTOTYPE;
    #####:   84:      break;
        -:   85:    }
        -:   86:
        -:   87:#if JERRY_ESNEXT
    #####:   88:    case JERRY_ERROR_AGGREGATE:
        -:   89:    {
    #####:   90:      prototype_id = ECMA_BUILTIN_ID_AGGREGATE_ERROR_PROTOTYPE;
    #####:   91:      break;
        -:   92:    }
        -:   93:#endif /* JERRY_ESNEXT */
    #####:   94:    case JERRY_ERROR_URI:
        -:   95:    {
    #####:   96:      prototype_id = ECMA_BUILTIN_ID_URI_ERROR_PROTOTYPE;
    #####:   97:      break;
        -:   98:    }
        -:   99:
    #####:  100:    case JERRY_ERROR_SYNTAX:
        -:  101:    {
    #####:  102:      prototype_id = ECMA_BUILTIN_ID_SYNTAX_ERROR_PROTOTYPE;
    #####:  103:      break;
        -:  104:    }
        -:  105:
    #####:  106:    default:
        -:  107:    {
    #####:  108:      JERRY_ASSERT (error_type == JERRY_ERROR_COMMON);
        -:  109:
    #####:  110:      prototype_id = ECMA_BUILTIN_ID_ERROR_PROTOTYPE;
    #####:  111:      break;
        -:  112:    }
        -:  113:  }
        -:  114:#else
        -:  115:  JERRY_UNUSED (error_type);
        -:  116:  ecma_builtin_id_t prototype_id = ECMA_BUILTIN_ID_ERROR_PROTOTYPE;
        -:  117:#endif /* JERRY_BUILTIN_ERRORS */
        -:  118:
    #####:  119:  ecma_object_t *prototype_obj_p = ecma_builtin_get (prototype_id);
        -:  120:
    #####:  121:  ecma_object_t *error_object_p = ecma_create_object (prototype_obj_p,
        -:  122:                                                      sizeof (ecma_extended_object_t),
        -:  123:                                                      ECMA_OBJECT_TYPE_CLASS);
        -:  124:
    #####:  125:  ecma_extended_object_t *extended_object_p = (ecma_extended_object_t *) error_object_p;
    #####:  126:  extended_object_p->u.cls.type = ECMA_OBJECT_CLASS_ERROR;
    #####:  127:  extended_object_p->u.cls.u1.error_type = (uint8_t) error_type;
        -:  128:
    #####:  129:  if (message_string_p != NULL)
        -:  130:  {
        -:  131:    ecma_property_value_t *prop_value_p;
    #####:  132:    prop_value_p = ecma_create_named_data_property (error_object_p,
        -:  133:                                                    ecma_get_magic_string (LIT_MAGIC_STRING_MESSAGE),
        -:  134:                                                    ECMA_PROPERTY_CONFIGURABLE_WRITABLE,
        -:  135:                                                    NULL);
        -:  136:
    #####:  137:    ecma_ref_ecma_string (message_string_p);
    #####:  138:    prop_value_p->value = ecma_make_string_value (message_string_p);
        -:  139:  }
        -:  140:
        -:  141:  /* Avoid calling the decorator function recursively. */
    #####:  142:  if (JERRY_CONTEXT (error_object_created_callback_p) != NULL
    #####:  143:      && !(JERRY_CONTEXT (status_flags) & ECMA_STATUS_ERROR_UPDATE))
        -:  144:  {
    #####:  145:    JERRY_CONTEXT (status_flags) |= ECMA_STATUS_ERROR_UPDATE;
    #####:  146:    JERRY_CONTEXT (error_object_created_callback_p) (ecma_make_object_value (error_object_p),
        -:  147:                                                     JERRY_CONTEXT (error_object_created_callback_user_p));
    #####:  148:    JERRY_CONTEXT (status_flags) &= (uint32_t) ~ECMA_STATUS_ERROR_UPDATE;
        -:  149:  }
        -:  150:  else
        -:  151:  {
        -:  152:#if JERRY_LINE_INFO
        -:  153:    /* Default decorator when line info is enabled. */
    #####:  154:    ecma_string_t *stack_str_p = ecma_get_magic_string (LIT_MAGIC_STRING_STACK);
        -:  155:
    #####:  156:    ecma_property_value_t *prop_value_p = ecma_create_named_data_property (error_object_p,
        -:  157:                                                                           stack_str_p,
        -:  158:                                                                           ECMA_PROPERTY_CONFIGURABLE_WRITABLE,
        -:  159:                                                                           NULL);
    #####:  160:    ecma_deref_ecma_string (stack_str_p);
        -:  161:
    #####:  162:    ecma_value_t backtrace_value = vm_get_backtrace (0);
        -:  163:
    #####:  164:    prop_value_p->value = backtrace_value;
    #####:  165:    ecma_deref_object (ecma_get_object_from_value (backtrace_value));
        -:  166:#endif /* JERRY_LINE_INFO */
        -:  167:  }
        -:  168:
    #####:  169:  return error_object_p;
        -:  170:} /* ecma_new_standard_error */
        -:  171:
        -:  172:#if JERRY_ESNEXT
        -:  173:/**
        -:  174: * aggregate-error object constructor.
        -:  175: *
        -:  176: * @return newly constructed aggregate errors
        -:  177: */
        -:  178:ecma_value_t
    #####:  179:ecma_new_aggregate_error (ecma_value_t error_list_val, /**< errors list */
        -:  180:                          ecma_value_t message_val) /**< message string */
        -:  181:{
        -:  182:  ecma_object_t *new_error_object_p;
        -:  183:
    #####:  184:  if (!ecma_is_value_undefined (message_val))
        -:  185:  {
    #####:  186:    ecma_string_t *message_string_p = ecma_op_to_string (message_val);
        -:  187:
    #####:  188:    if (JERRY_UNLIKELY (message_string_p == NULL))
        -:  189:    {
    #####:  190:      return ECMA_VALUE_ERROR;
        -:  191:    }
        -:  192:
    #####:  193:    new_error_object_p = ecma_new_standard_error (JERRY_ERROR_AGGREGATE, message_string_p);
    #####:  194:    ecma_deref_ecma_string (message_string_p);
        -:  195:  }
        -:  196:  else
        -:  197:  {
    #####:  198:    new_error_object_p = ecma_new_standard_error (JERRY_ERROR_AGGREGATE, NULL);
        -:  199:  }
        -:  200:
    #####:  201:  ecma_value_t using_iterator = ecma_op_get_method_by_symbol_id (error_list_val, LIT_GLOBAL_SYMBOL_ITERATOR);
        -:  202:
    #####:  203:  if (ECMA_IS_VALUE_ERROR (using_iterator))
        -:  204:  {
    #####:  205:    ecma_deref_object (new_error_object_p);
    #####:  206:    return using_iterator;
        -:  207:  }
        -:  208:
    #####:  209:  if (!ecma_is_value_undefined (using_iterator))
        -:  210:  {
    #####:  211:    ecma_value_t next_method;
    #####:  212:    ecma_value_t iterator = ecma_op_get_iterator (error_list_val, using_iterator, &next_method);
    #####:  213:    ecma_free_value (using_iterator);
        -:  214:
    #####:  215:    if (ECMA_IS_VALUE_ERROR (iterator))
        -:  216:    {
    #####:  217:      ecma_deref_object (new_error_object_p);
    #####:  218:      return iterator;
        -:  219:    }
        -:  220:
    #####:  221:    ecma_collection_t *error_list_p = ecma_new_collection ();
    #####:  222:    ecma_value_t result = ECMA_VALUE_ERROR;
        -:  223:
        -:  224:    while (true)
    #####:  225:    {
    #####:  226:      ecma_value_t next = ecma_op_iterator_step (iterator, next_method);
        -:  227:
    #####:  228:      if (ECMA_IS_VALUE_ERROR (next))
        -:  229:      {
    #####:  230:        break;
        -:  231:      }
        -:  232:
    #####:  233:      if (next == ECMA_VALUE_FALSE)
        -:  234:      {
    #####:  235:        result = ECMA_VALUE_UNDEFINED;
    #####:  236:        break;
        -:  237:      }
        -:  238:
        -:  239:      /* 8.e.iii */
    #####:  240:      ecma_value_t next_error = ecma_op_iterator_value (next);
    #####:  241:      ecma_free_value (next);
        -:  242:
    #####:  243:      if (ECMA_IS_VALUE_ERROR (next_error))
        -:  244:      {
    #####:  245:        break;
        -:  246:      }
        -:  247:
    #####:  248:      ecma_collection_push_back (error_list_p, next_error);
        -:  249:    }
        -:  250:
    #####:  251:    ecma_free_value (iterator);
    #####:  252:    ecma_free_value (next_method);
        -:  253:
    #####:  254:    if (ECMA_IS_VALUE_ERROR (result))
        -:  255:    {
    #####:  256:      ecma_collection_free (error_list_p);
    #####:  257:      ecma_deref_object (new_error_object_p);
    #####:  258:      return result;
        -:  259:    }
        -:  260:
    #####:  261:    JERRY_ASSERT (ecma_is_value_undefined (result));
        -:  262:
    #####:  263:    ecma_value_t error_list_arr = ecma_op_new_array_object_from_collection (error_list_p, true);
        -:  264:    ecma_property_value_t *prop_value_p;
    #####:  265:    prop_value_p = ecma_create_named_data_property (new_error_object_p,
        -:  266:                                                    ecma_get_magic_string (LIT_MAGIC_STRING_ERRORS_UL),
        -:  267:                                                    ECMA_PROPERTY_CONFIGURABLE_WRITABLE,
        -:  268:                                                    NULL);
    #####:  269:    prop_value_p->value = error_list_arr;
    #####:  270:    ecma_free_value (error_list_arr);
        -:  271:  }
        -:  272:
    #####:  273:  return ecma_make_object_value (new_error_object_p);
        -:  274:} /* ecma_new_aggregate_error */
        -:  275:
        -:  276:#endif /* JERRY_ESNEXT */
        -:  277:
        -:  278:/**
        -:  279: * Return the error type for an Error object.
        -:  280: *
        -:  281: * @return one of the jerry_error_t value
        -:  282: *         if it is not an Error object then JERRY_ERROR_NONE will be returned
        -:  283: */
        -:  284:jerry_error_t
    #####:  285:ecma_get_error_type (ecma_object_t *error_object_p) /**< possible error object */
        -:  286:{
    #####:  287:  if (!ecma_object_class_is (error_object_p, ECMA_OBJECT_CLASS_ERROR))
        -:  288:  {
    #####:  289:    return JERRY_ERROR_NONE;
        -:  290:  }
        -:  291:
    #####:  292:  return (jerry_error_t) ((ecma_extended_object_t *) error_object_p)->u.cls.u1.error_type;
        -:  293:} /* ecma_get_error_type */
        -:  294:
        -:  295:/**
        -:  296: * Raise a standard ecma-error with the given type and message.
        -:  297: *
        -:  298: * @return ecma value
        -:  299: *         Returned value must be freed with ecma_free_value
        -:  300: */
        -:  301:static ecma_value_t
    #####:  302:ecma_raise_standard_error (jerry_error_t error_type, /**< error type */
        -:  303:                           const lit_utf8_byte_t *msg_p) /**< error message */
        -:  304:{
        -:  305:  ecma_object_t *error_obj_p;
        -:  306:
    #####:  307:  if (msg_p != NULL)
        -:  308:  {
    #####:  309:    ecma_string_t *error_msg_p = ecma_new_ecma_string_from_utf8 (msg_p,
        -:  310:                                                                 lit_zt_utf8_string_size (msg_p));
    #####:  311:    error_obj_p = ecma_new_standard_error (error_type, error_msg_p);
    #####:  312:    ecma_deref_ecma_string (error_msg_p);
        -:  313:  }
        -:  314:  else
        -:  315:  {
    #####:  316:    error_obj_p = ecma_new_standard_error (error_type, NULL);
        -:  317:  }
        -:  318:
    #####:  319:  jcontext_raise_exception (ecma_make_object_value (error_obj_p));
    #####:  320:  return ECMA_VALUE_ERROR;
        -:  321:} /* ecma_raise_standard_error */
        -:  322:
        -:  323:#if JERRY_ERROR_MESSAGES
        -:  324:
        -:  325:/**
        -:  326: * Raise a standard ecma-error with the given format string and arguments.
        -:  327: *
        -:  328: * @return ecma value
        -:  329: *         Returned value must be freed with ecma_free_value
        -:  330: */
        -:  331:ecma_value_t
    #####:  332:ecma_raise_standard_error_with_format (jerry_error_t error_type, /**< error type */
        -:  333:                                       const char *format, /**< format string */
        -:  334:                                       ...) /**< ecma-values */
        -:  335:{
    #####:  336:  JERRY_ASSERT (format != NULL);
        -:  337:
    #####:  338:  ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
        -:  339:
    #####:  340:  const char *start_p = format;
    #####:  341:  const char *end_p = format;
        -:  342:
    #####:  343:  va_list args;
        -:  344:
    #####:  345:  va_start (args, format);
        -:  346:
    #####:  347:  while (*end_p)
        -:  348:  {
    #####:  349:    if (*end_p == '%')
        -:  350:    {
        -:  351:      /* Concat template string. */
    #####:  352:      if (end_p > start_p)
        -:  353:      {
    #####:  354:        ecma_stringbuilder_append_raw (&builder, (lit_utf8_byte_t *) start_p, (lit_utf8_size_t) (end_p - start_p));
        -:  355:      }
        -:  356:
        -:  357:      /* Convert an argument to string without side effects. */
        -:  358:      ecma_string_t *arg_string_p;
    #####:  359:      const ecma_value_t arg_val = va_arg (args, ecma_value_t);
        -:  360:
    #####:  361:      if (JERRY_UNLIKELY (ecma_is_value_object (arg_val)))
        -:  362:      {
    #####:  363:        ecma_object_t *arg_object_p = ecma_get_object_from_value (arg_val);
    #####:  364:        lit_magic_string_id_t class_name = ecma_object_get_class_name (arg_object_p);
    #####:  365:        arg_string_p = ecma_get_magic_string (class_name);
        -:  366:      }
        -:  367:#if JERRY_ESNEXT
    #####:  368:      else if (ecma_is_value_symbol (arg_val))
        -:  369:      {
    #####:  370:        ecma_value_t symbol_desc_value = ecma_get_symbol_descriptive_string (arg_val);
    #####:  371:        arg_string_p = ecma_get_string_from_value (symbol_desc_value);
        -:  372:      }
        -:  373:#endif /* JERRY_ESNEXT */
        -:  374:      else
        -:  375:      {
    #####:  376:        arg_string_p = ecma_op_to_string (arg_val);
    #####:  377:        JERRY_ASSERT (arg_string_p != NULL);
        -:  378:      }
        -:  379:
        -:  380:      /* Concat argument. */
    #####:  381:      ecma_stringbuilder_append (&builder, arg_string_p);
        -:  382:
    #####:  383:      ecma_deref_ecma_string (arg_string_p);
        -:  384:
    #####:  385:      start_p = end_p + 1;
        -:  386:    }
        -:  387:
    #####:  388:    end_p++;
        -:  389:  }
        -:  390:
    #####:  391:  va_end (args);
        -:  392:
        -:  393:  /* Concat reset of template string. */
    #####:  394:  if (start_p < end_p)
        -:  395:  {
    #####:  396:    ecma_stringbuilder_append_raw (&builder, (lit_utf8_byte_t *) start_p, (lit_utf8_size_t) (end_p - start_p));
        -:  397:  }
        -:  398:
    #####:  399:  ecma_string_t *builder_str_p = ecma_stringbuilder_finalize (&builder);
        -:  400:
    #####:  401:  ecma_object_t *error_obj_p = ecma_new_standard_error (error_type, builder_str_p);
        -:  402:
    #####:  403:  ecma_deref_ecma_string (builder_str_p);
        -:  404:
    #####:  405:  jcontext_raise_exception (ecma_make_object_value (error_obj_p));
    #####:  406:  return ECMA_VALUE_ERROR;
        -:  407:} /* ecma_raise_standard_error_with_format */
        -:  408:
        -:  409:#endif /* JERRY_ERROR_MESSAGES */
        -:  410:
        -:  411:/**
        -:  412: * Raise a common error with the given message.
        -:  413: *
        -:  414: * @return ecma value
        -:  415: *         Returned value must be freed with ecma_free_value
        -:  416: */
        -:  417:ecma_value_t
    #####:  418:ecma_raise_common_error (const char *msg_p) /**< error message */
        -:  419:{
    #####:  420:  return ecma_raise_standard_error (JERRY_ERROR_COMMON, (const lit_utf8_byte_t *) msg_p);
        -:  421:} /* ecma_raise_common_error */
        -:  422:
        -:  423:/**
        -:  424: * Raise a RangeError with the given message.
        -:  425: *
        -:  426: * See also: ECMA-262 v5, 15.11.6.2
        -:  427: *
        -:  428: * @return ecma value
        -:  429: *         Returned value must be freed with ecma_free_value
        -:  430: */
        -:  431:ecma_value_t
    #####:  432:ecma_raise_range_error (const char *msg_p) /**< error message */
        -:  433:{
    #####:  434:  return ecma_raise_standard_error (JERRY_ERROR_RANGE, (const lit_utf8_byte_t *) msg_p);
        -:  435:} /* ecma_raise_range_error */
        -:  436:
        -:  437:/**
        -:  438: * Raise a ReferenceError with the given message.
        -:  439: *
        -:  440: * See also: ECMA-262 v5, 15.11.6.3
        -:  441: *
        -:  442: * @return ecma value
        -:  443: *         Returned value must be freed with ecma_free_value
        -:  444: */
        -:  445:ecma_value_t
    #####:  446:ecma_raise_reference_error (const char *msg_p) /**< error message */
        -:  447:{
    #####:  448:  return ecma_raise_standard_error (JERRY_ERROR_REFERENCE, (const lit_utf8_byte_t *) msg_p);
        -:  449:} /* ecma_raise_reference_error */
        -:  450:
        -:  451:/**
        -:  452: * Raise a SyntaxError with the given message.
        -:  453: *
        -:  454: * See also: ECMA-262 v5, 15.11.6.4
        -:  455: *
        -:  456: * @return ecma value
        -:  457: *         Returned value must be freed with ecma_free_value
        -:  458: */
        -:  459:ecma_value_t
    #####:  460:ecma_raise_syntax_error (const char *msg_p) /**< error message */
        -:  461:{
    #####:  462:  return ecma_raise_standard_error (JERRY_ERROR_SYNTAX, (const lit_utf8_byte_t *) msg_p);
        -:  463:} /* ecma_raise_syntax_error */
        -:  464:
        -:  465:/**
        -:  466: * Raise a TypeError with the given message.
        -:  467: *
        -:  468:* See also: ECMA-262 v5, 15.11.6.5
        -:  469: *
        -:  470: * @return ecma value
        -:  471: *         Returned value must be freed with ecma_free_value
        -:  472: */
        -:  473:ecma_value_t
    #####:  474:ecma_raise_type_error (const char *msg_p) /**< error message */
        -:  475:{
    #####:  476:  return ecma_raise_standard_error (JERRY_ERROR_TYPE, (const lit_utf8_byte_t *) msg_p);
        -:  477:} /* ecma_raise_type_error */
        -:  478:
        -:  479:/**
        -:  480: * Raise a URIError with the given message.
        -:  481: *
        -:  482:* See also: ECMA-262 v5, 15.11.6.6
        -:  483: *
        -:  484: * @return ecma value
        -:  485: *         Returned value must be freed with ecma_free_value
        -:  486: */
        -:  487:ecma_value_t
    #####:  488:ecma_raise_uri_error (const char *msg_p) /**< error message */
        -:  489:{
    #####:  490:  return ecma_raise_standard_error (JERRY_ERROR_URI, (const lit_utf8_byte_t *) msg_p);
        -:  491:} /* ecma_raise_uri_error */
        -:  492:
        -:  493:#if JERRY_ESNEXT
        -:  494:
        -:  495:/**
        -:  496: * Raise a AggregateError with the given errors and message.
        -:  497: *
        -:  498: * @return ecma value
        -:  499: *         Returned value must be freed with ecma_free_value
        -:  500: */
        -:  501:ecma_value_t
    #####:  502:ecma_raise_aggregate_error (ecma_value_t error_list_val, /**< errors list */
        -:  503:                            ecma_value_t message_val) /**< error message */
        -:  504:{
    #####:  505:  ecma_value_t aggre_val = ecma_new_aggregate_error (error_list_val, message_val);
    #####:  506:  jcontext_raise_exception (aggre_val);
        -:  507:
    #####:  508:  return ECMA_VALUE_ERROR;
        -:  509:} /* ecma_raise_aggregate_error */
        -:  510:
        -:  511:#endif /* JERRY_ESNEXT */
        -:  512:
        -:  513:/**
        -:  514: * @}
        -:  515: * @}
        -:  516: */
