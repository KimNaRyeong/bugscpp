        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-regexp.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-conversion.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:#include "jcontext.h"
        -:   23:#include "ecma-objects.h"
        -:   24:#include "ecma-regexp-object.h"
        -:   25:
        -:   26:#if JERRY_BUILTIN_REGEXP
        -:   27:
        -:   28:#define ECMA_BUILTINS_INTERNAL
        -:   29:#include "ecma-builtins-internal.h"
        -:   30:
        -:   31:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-regexp.inc.h"
        -:   32:#define BUILTIN_UNDERSCORED_ID regexp
        -:   33:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   34:
        -:   35:/** \addtogroup ecma ECMA
        -:   36: * @{
        -:   37: *
        -:   38: * \addtogroup ecmabuiltins
        -:   39: * @{
        -:   40: *
        -:   41: * \addtogroup regexp ECMA RegExp object built-in
        -:   42: * @{
        -:   43: */
        -:   44:
        -:   45:static ecma_value_t
    #####:   46:ecma_builtin_regexp_dispatch_helper (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   47:                                     uint32_t arguments_list_len) /**< number of arguments */
        -:   48:{
    #####:   49:  ecma_value_t pattern_value = ECMA_VALUE_UNDEFINED;
    #####:   50:  ecma_value_t flags_value = ECMA_VALUE_UNDEFINED;
        -:   51:#if JERRY_ESNEXT
    #####:   52:  bool create_regexp_from_bc = false;
    #####:   53:  bool free_arguments = false;
    #####:   54:  ecma_object_t *new_target_p = JERRY_CONTEXT (current_new_target_p);
        -:   55:#else /* !JERRY_ESNEXT */
    #####:   56:  ecma_object_t *new_target_p = NULL;
        -:   57:#endif /* JERRY_ESNEXT */
        -:   58:
    #####:   59:  if (arguments_list_len > 0)
        -:   60:  {
        -:   61:    /* pattern string or RegExp object */
    #####:   62:    pattern_value = arguments_list_p[0];
        -:   63:
    #####:   64:    if (arguments_list_len > 1)
        -:   65:    {
    #####:   66:      flags_value = arguments_list_p[1];
        -:   67:    }
        -:   68:  }
        -:   69:
        -:   70:#if JERRY_ESNEXT
    #####:   71:  ecma_value_t regexp_value = ecma_op_is_regexp (pattern_value);
        -:   72:
    #####:   73:  if (ECMA_IS_VALUE_ERROR (regexp_value))
        -:   74:  {
    #####:   75:    return regexp_value;
        -:   76:  }
        -:   77:
    #####:   78:  bool pattern_is_regexp = regexp_value == ECMA_VALUE_TRUE;
    #####:   79:  re_compiled_code_t *bc_p = NULL;
        -:   80:
    #####:   81:  if (new_target_p == NULL)
        -:   82:  {
    #####:   83:    new_target_p = ecma_builtin_get (ECMA_BUILTIN_ID_REGEXP);
        -:   84:
    #####:   85:    if (pattern_is_regexp && ecma_is_value_undefined (flags_value))
        -:   86:    {
    #####:   87:      ecma_object_t *pattern_obj_p = ecma_get_object_from_value (pattern_value);
        -:   88:
    #####:   89:      ecma_value_t pattern_constructor = ecma_op_object_get_by_magic_id (pattern_obj_p, LIT_MAGIC_STRING_CONSTRUCTOR);
        -:   90:
    #####:   91:      if (ECMA_IS_VALUE_ERROR (pattern_constructor))
        -:   92:      {
    #####:   93:        return pattern_constructor;
        -:   94:      }
        -:   95:
    #####:   96:      bool is_same = ecma_op_same_value (ecma_make_object_value (new_target_p), pattern_constructor);
    #####:   97:      ecma_free_value (pattern_constructor);
        -:   98:
    #####:   99:      if (is_same)
        -:  100:      {
    #####:  101:        return ecma_copy_value (pattern_value);
        -:  102:      }
        -:  103:    }
        -:  104:  }
        -:  105:
    #####:  106:  if (ecma_object_is_regexp_object (pattern_value))
        -:  107:  {
    #####:  108:    ecma_extended_object_t *pattern_obj_p = (ecma_extended_object_t *) ecma_get_object_from_value (pattern_value);
    #####:  109:    bc_p = ECMA_GET_INTERNAL_VALUE_POINTER (re_compiled_code_t, pattern_obj_p->u.cls.u3.value);
        -:  110:
    #####:  111:    create_regexp_from_bc = ecma_is_value_undefined (flags_value);
        -:  112:
    #####:  113:    if (!create_regexp_from_bc)
        -:  114:    {
    #####:  115:      pattern_value = bc_p->source;
        -:  116:    }
        -:  117:  }
    #####:  118:  else if (pattern_is_regexp)
        -:  119:  {
    #####:  120:    ecma_object_t *pattern_obj_p = ecma_get_object_from_value (pattern_value);
        -:  121:
    #####:  122:    pattern_value = ecma_op_object_get_by_magic_id (pattern_obj_p, LIT_MAGIC_STRING_SOURCE);
        -:  123:
    #####:  124:    if (ECMA_IS_VALUE_ERROR (pattern_value))
        -:  125:    {
    #####:  126:      return pattern_value;
        -:  127:    }
        -:  128:
    #####:  129:    if (ecma_is_value_undefined (flags_value))
        -:  130:    {
    #####:  131:      flags_value = ecma_op_object_get_by_magic_id (pattern_obj_p, LIT_MAGIC_STRING_FLAGS);
        -:  132:
    #####:  133:      if (ECMA_IS_VALUE_ERROR (flags_value))
        -:  134:      {
    #####:  135:        ecma_free_value (pattern_value);
    #####:  136:        return flags_value;
        -:  137:      }
        -:  138:    }
        -:  139:    else
        -:  140:    {
    #####:  141:      flags_value = ecma_copy_value (flags_value);
        -:  142:    }
        -:  143:
    #####:  144:    free_arguments = true;
        -:  145:  }
        -:  146:#else /* !JERRY_ESNEXT */
    #####:  147:  if (ecma_object_is_regexp_object (pattern_value))
        -:  148:  {
    #####:  149:    if (ecma_is_value_undefined (flags_value))
        -:  150:    {
    #####:  151:      return ecma_copy_value (pattern_value);
        -:  152:    }
        -:  153:
    #####:  154:    return ecma_raise_type_error (ECMA_ERR_MSG ("Invalid argument is passed to RegExp function"));
        -:  155:  }
        -:  156:#endif /* JERRY_ESNEXT */
        -:  157:
    #####:  158:  ecma_value_t ret_value = ECMA_VALUE_ERROR;
    #####:  159:  ecma_object_t *new_target_obj_p = ecma_op_regexp_alloc (new_target_p);
        -:  160:
    #####:  161:  if (JERRY_LIKELY (new_target_obj_p != NULL))
        -:  162:  {
        -:  163:#if JERRY_ESNEXT
    #####:  164:    if (create_regexp_from_bc)
        -:  165:    {
    #####:  166:      ret_value = ecma_op_create_regexp_from_bytecode (new_target_obj_p, bc_p);
    #####:  167:      JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (ret_value));
        -:  168:    }
        -:  169:    else
        -:  170:#endif /* JERRY_ESNEXT */
        -:  171:    {
    #####:  172:      ret_value = ecma_op_create_regexp_from_pattern (new_target_obj_p, pattern_value, flags_value);
        -:  173:
    #####:  174:      if (ECMA_IS_VALUE_ERROR (ret_value))
        -:  175:      {
    #####:  176:        ecma_deref_object (new_target_obj_p);
        -:  177:      }
        -:  178:    }
        -:  179:  }
        -:  180:
        -:  181:#if JERRY_ESNEXT
    #####:  182:  if (free_arguments)
        -:  183:  {
    #####:  184:    ecma_free_value (pattern_value);
    #####:  185:    ecma_free_value (flags_value);
        -:  186:  }
        -:  187:#endif /* JERRY_ESNEXT */
        -:  188:
    #####:  189:  return ret_value;
        -:  190:} /* ecma_builtin_regexp_dispatch_helper */
        -:  191:
        -:  192:/**
        -:  193: * Handle calling [[Call]] of built-in RegExp object
        -:  194: *
        -:  195: * @return ecma value
        -:  196: *         Returned value must be freed with ecma_free_value.
        -:  197: */
        -:  198:ecma_value_t
    #####:  199:ecma_builtin_regexp_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  200:                                   uint32_t arguments_list_len) /**< number of arguments */
        -:  201:{
    #####:  202:  return ecma_builtin_regexp_dispatch_helper (arguments_list_p,
        -:  203:                                              arguments_list_len);
        -:  204:} /* ecma_builtin_regexp_dispatch_call */
        -:  205:
        -:  206:/**
        -:  207: * Handle calling [[Construct]] of built-in RegExp object
        -:  208: *
        -:  209: * @return ecma value
        -:  210: *         Returned value must be freed with ecma_free_value.
        -:  211: */
        -:  212:ecma_value_t
    #####:  213:ecma_builtin_regexp_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  214:                                        uint32_t arguments_list_len) /**< number of arguments */
        -:  215:{
    #####:  216:  return ecma_builtin_regexp_dispatch_helper (arguments_list_p,
        -:  217:                                              arguments_list_len);
        -:  218:} /* ecma_builtin_regexp_dispatch_construct */
        -:  219:
        -:  220:#if JERRY_ESNEXT
        -:  221:/**
        -:  222: * 21.2.4.2 get RegExp [ @@species ] accessor
        -:  223: *
        -:  224: * @return ecma_value
        -:  225: *         returned value must be freed with ecma_free_value
        -:  226: */
        -:  227:ecma_value_t
    #####:  228:ecma_builtin_regexp_species_get (ecma_value_t this_value) /**< This Value */
        -:  229:{
    #####:  230:  return ecma_copy_value (this_value);
        -:  231:} /* ecma_builtin_regexp_species_get */
        -:  232:#endif /* JERRY_ESNEXT */
        -:  233:
        -:  234:/**
        -:  235: * @}
        -:  236: * @}
        -:  237: * @}
        -:  238: */
        -:  239:
        -:  240:#endif /* JERRY_BUILTIN_REGEXP */
