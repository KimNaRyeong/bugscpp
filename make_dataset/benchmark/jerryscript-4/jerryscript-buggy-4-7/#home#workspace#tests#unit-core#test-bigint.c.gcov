        -:    0:Source:/home/workspace/tests/unit-core/test-bigint.c
        -:    0:Programs:291
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:#include "test-common.h"
        -:   18:
        -:   19:int
    #####:   20:main (void)
        -:   21:{
    #####:   22:  if (!jerry_is_feature_enabled (JERRY_FEATURE_BIGINT))
        -:   23:  {
    #####:   24:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Bigint support is disabled!\n");
    #####:   25:    return 0;
        -:   26:  }
        -:   27:
    #####:   28:  jerry_init (JERRY_INIT_EMPTY);
        -:   29:
    #####:   30:  jerry_value_t string = jerry_create_string ((const jerry_char_t *) "0xfffffff1fffffff2fffffff3");
    #####:   31:  TEST_ASSERT (!jerry_value_is_error (string));
        -:   32:
    #####:   33:  jerry_value_t bigint = jerry_value_to_bigint (string);
    #####:   34:  jerry_release_value (string);
        -:   35:
    #####:   36:  TEST_ASSERT (!jerry_value_is_error (bigint));
    #####:   37:  TEST_ASSERT (jerry_value_is_bigint (bigint));
        -:   38:
    #####:   39:  string = jerry_value_to_string (bigint);
    #####:   40:  TEST_ASSERT (!jerry_value_is_error (string));
        -:   41:
        -:   42:  static jerry_char_t str_buffer[64];
    #####:   43:  const char *expected_string_p = "79228162256009920505775652851";
        -:   44:
    #####:   45:  jerry_size_t size = jerry_string_to_char_buffer (string, str_buffer, sizeof (str_buffer));
    #####:   46:  TEST_ASSERT (size == strlen (expected_string_p));
    #####:   47:  TEST_ASSERT (memcmp (str_buffer, expected_string_p, size) == 0);
    #####:   48:  jerry_release_value (string);
        -:   49:
    #####:   50:  TEST_ASSERT (jerry_get_bigint_size_in_digits (bigint) == 2);
        -:   51:
        -:   52:  uint64_t digits_buffer[4];
        -:   53:  bool sign;
        -:   54:
    #####:   55:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:   56:  sign = true;
    #####:   57:  jerry_get_bigint_digits (bigint, digits_buffer, 0, &sign);
    #####:   58:  TEST_ASSERT (sign == false);
    #####:   59:  TEST_ASSERT (digits_buffer[0] == ~((uint64_t) 0));
    #####:   60:  TEST_ASSERT (digits_buffer[1] == ~((uint64_t) 0));
    #####:   61:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:   62:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:   63:
    #####:   64:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:   65:  sign = true;
    #####:   66:  jerry_get_bigint_digits (bigint, digits_buffer, 1, &sign);
    #####:   67:  TEST_ASSERT (sign == false);
    #####:   68:  TEST_ASSERT (digits_buffer[0] == 0xfffffff2fffffff3ull);
    #####:   69:  TEST_ASSERT (digits_buffer[1] == ~((uint64_t) 0));
    #####:   70:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:   71:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:   72:
    #####:   73:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:   74:  sign = true;
    #####:   75:  jerry_get_bigint_digits (bigint, digits_buffer, 2, &sign);
    #####:   76:  TEST_ASSERT (sign == false);
    #####:   77:  TEST_ASSERT (digits_buffer[0] == 0xfffffff2fffffff3ull);
    #####:   78:  TEST_ASSERT (digits_buffer[1] == 0xfffffff1ull);
    #####:   79:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:   80:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:   81:
    #####:   82:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:   83:  sign = true;
    #####:   84:  jerry_get_bigint_digits (bigint, digits_buffer, 3, &sign);
    #####:   85:  TEST_ASSERT (sign == false);
    #####:   86:  TEST_ASSERT (digits_buffer[0] == 0xfffffff2fffffff3ull);
    #####:   87:  TEST_ASSERT (digits_buffer[1] == 0xfffffff1ull);
    #####:   88:  TEST_ASSERT (digits_buffer[2] == 0);
    #####:   89:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:   90:
    #####:   91:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:   92:  jerry_get_bigint_digits (bigint, digits_buffer, 4, NULL);
    #####:   93:  TEST_ASSERT (digits_buffer[0] == 0xfffffff2fffffff3ull);
    #####:   94:  TEST_ASSERT (digits_buffer[1] == 0xfffffff1ull);
    #####:   95:  TEST_ASSERT (digits_buffer[2] == 0);
    #####:   96:  TEST_ASSERT (digits_buffer[3] == 0);
        -:   97:
    #####:   98:  jerry_release_value (bigint);
        -:   99:
    #####:  100:  digits_buffer[0] = 0;
    #####:  101:  digits_buffer[1] = 0;
    #####:  102:  digits_buffer[2] = 0;
        -:  103:  /* Sign of zero value is always positive, even if we set negative. */
    #####:  104:  bigint = jerry_create_bigint (digits_buffer, 3, true);
    #####:  105:  TEST_ASSERT (jerry_value_is_bigint (bigint));
    #####:  106:  TEST_ASSERT (jerry_get_bigint_size_in_digits (bigint) == 0);
        -:  107:
    #####:  108:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:  109:  sign = true;
    #####:  110:  jerry_get_bigint_digits (bigint, digits_buffer, 2, &sign);
    #####:  111:  TEST_ASSERT (sign == false);
    #####:  112:  TEST_ASSERT (digits_buffer[0] == 0);
    #####:  113:  TEST_ASSERT (digits_buffer[1] == 0);
    #####:  114:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:  115:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:  116:
    #####:  117:  jerry_release_value (bigint);
        -:  118:
    #####:  119:  digits_buffer[0] = 1;
    #####:  120:  digits_buffer[1] = 0;
    #####:  121:  digits_buffer[2] = 0;
    #####:  122:  digits_buffer[3] = 0;
    #####:  123:  bigint = jerry_create_bigint (digits_buffer, 4, true);
    #####:  124:  TEST_ASSERT (jerry_value_is_bigint (bigint));
    #####:  125:  TEST_ASSERT (jerry_get_bigint_size_in_digits (bigint) == 1);
        -:  126:
    #####:  127:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:  128:  sign = false;
    #####:  129:  jerry_get_bigint_digits (bigint, digits_buffer, 1, &sign);
    #####:  130:  TEST_ASSERT (sign == true);
    #####:  131:  TEST_ASSERT (digits_buffer[0] == 1);
    #####:  132:  TEST_ASSERT (digits_buffer[1] == ~((uint64_t) 0));
    #####:  133:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:  134:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:  135:
    #####:  136:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:  137:  sign = false;
    #####:  138:  jerry_get_bigint_digits (bigint, digits_buffer, 2, &sign);
    #####:  139:  TEST_ASSERT (sign == true);
    #####:  140:  TEST_ASSERT (digits_buffer[0] == 1);
    #####:  141:  TEST_ASSERT (digits_buffer[1] == 0);
    #####:  142:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:  143:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:  144:
    #####:  145:  jerry_release_value (bigint);
        -:  146:
    #####:  147:  digits_buffer[0] = 0;
    #####:  148:  digits_buffer[1] = 1;
    #####:  149:  digits_buffer[2] = 0;
    #####:  150:  digits_buffer[3] = 0;
    #####:  151:  bigint = jerry_create_bigint (digits_buffer, 4, true);
    #####:  152:  TEST_ASSERT (jerry_value_is_bigint (bigint));
    #####:  153:  TEST_ASSERT (jerry_get_bigint_size_in_digits (bigint) == 2);
        -:  154:
    #####:  155:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:  156:  sign = false;
    #####:  157:  jerry_get_bigint_digits (bigint, digits_buffer, 1, &sign);
    #####:  158:  TEST_ASSERT (sign == true);
    #####:  159:  TEST_ASSERT (digits_buffer[0] == 0);
    #####:  160:  TEST_ASSERT (digits_buffer[1] == ~((uint64_t) 0));
    #####:  161:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:  162:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:  163:
    #####:  164:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:  165:  sign = false;
    #####:  166:  jerry_get_bigint_digits (bigint, digits_buffer, 2, &sign);
    #####:  167:  TEST_ASSERT (sign == true);
    #####:  168:  TEST_ASSERT (digits_buffer[0] == 0);
    #####:  169:  TEST_ASSERT (digits_buffer[1] == 1);
    #####:  170:  TEST_ASSERT (digits_buffer[2] == ~((uint64_t) 0));
    #####:  171:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:  172:
    #####:  173:  memset (digits_buffer, 0xff, sizeof (digits_buffer));
    #####:  174:  sign = false;
    #####:  175:  jerry_get_bigint_digits (bigint, digits_buffer, 3, &sign);
    #####:  176:  TEST_ASSERT (sign == true);
    #####:  177:  TEST_ASSERT (digits_buffer[0] == 0);
    #####:  178:  TEST_ASSERT (digits_buffer[1] == 1);
    #####:  179:  TEST_ASSERT (digits_buffer[2] == 0);
    #####:  180:  TEST_ASSERT (digits_buffer[3] == ~((uint64_t) 0));
        -:  181:
    #####:  182:  jerry_release_value (bigint);
        -:  183:
    #####:  184:  jerry_cleanup ();
    #####:  185:  return 0;
        -:  186:} /* main */
