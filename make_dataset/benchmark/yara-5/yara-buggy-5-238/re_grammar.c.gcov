        -:    0:Source:re_grammar.c
        -:    0:Graph:/home/workspace/libyara/re_grammar.gcno
        -:    0:Data:/home/workspace/libyara/re_grammar.gcda
        -:    0:Runs:10
        -:    1:/* A Bison parser, made by GNU Bison 3.5.1.  */
        -:    2:
        -:    3:/* Bison implementation for Yacc-like parsers in C
        -:    4:
        -:    5:   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
        -:    6:   Inc.
        -:    7:
        -:    8:   This program is free software: you can redistribute it and/or modify
        -:    9:   it under the terms of the GNU General Public License as published by
        -:   10:   the Free Software Foundation, either version 3 of the License, or
        -:   11:   (at your option) any later version.
        -:   12:
        -:   13:   This program is distributed in the hope that it will be useful,
        -:   14:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   15:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   16:   GNU General Public License for more details.
        -:   17:
        -:   18:   You should have received a copy of the GNU General Public License
        -:   19:   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
        -:   20:
        -:   21:/* As a special exception, you may create a larger work that contains
        -:   22:   part or all of the Bison parser skeleton and distribute that work
        -:   23:   under terms of your choice, so long as that work isn't itself a
        -:   24:   parser generator using the skeleton or a modified version thereof
        -:   25:   as a parser skeleton.  Alternatively, if you modify or redistribute
        -:   26:   the parser skeleton itself, you may (at your option) remove this
        -:   27:   special exception, which will cause the skeleton and the resulting
        -:   28:   Bison output files to be licensed under the GNU General Public
        -:   29:   License without this special exception.
        -:   30:
        -:   31:   This special exception was added by the Free Software Foundation in
        -:   32:   version 2.2 of Bison.  */
        -:   33:
        -:   34:/* C LALR(1) parser skeleton written by Richard Stallman, by
        -:   35:   simplifying the original so-called "semantic" parser.  */
        -:   36:
        -:   37:/* All symbols defined below should begin with yy or YY, to avoid
        -:   38:   infringing on user name space.  This should be done even for local
        -:   39:   variables, as they might otherwise be expanded by user macros.
        -:   40:   There are some unavoidable exceptions within include files to
        -:   41:   define necessary library symbols; they are noted "INFRINGES ON
        -:   42:   USER NAME SPACE" below.  */
        -:   43:
        -:   44:/* Undocumented macros, especially those whose name start with YY_,
        -:   45:   are private implementation details.  Do not rely on them.  */
        -:   46:
        -:   47:/* Identify Bison output.  */
        -:   48:#define YYBISON 1
        -:   49:
        -:   50:/* Bison version.  */
        -:   51:#define YYBISON_VERSION "3.5.1"
        -:   52:
        -:   53:/* Skeleton name.  */
        -:   54:#define YYSKELETON_NAME "yacc.c"
        -:   55:
        -:   56:/* Pure parsers.  */
        -:   57:#define YYPURE 1
        -:   58:
        -:   59:/* Push parsers.  */
        -:   60:#define YYPUSH 0
        -:   61:
        -:   62:/* Pull parsers.  */
        -:   63:#define YYPULL 1
        -:   64:
        -:   65:
        -:   66:/* Substitute the variable and function names.  */
        -:   67:#define yyparse         re_yyparse
        -:   68:#define yylex           re_yylex
        -:   69:#define yyerror         re_yyerror
        -:   70:#define yydebug         re_yydebug
        -:   71:#define yynerrs         re_yynerrs
        -:   72:
        -:   73:/* First part of user prologue.  */
        -:   74:#line 30 "re_grammar.y"
        -:   75:
        -:   76:
        -:   77:#include <yara/integers.h>
        -:   78:#include <yara/utils.h>
        -:   79:#include <yara/error.h>
        -:   80:#include <yara/limits.h>
        -:   81:#include <yara/mem.h>
        -:   82:#include <yara/re.h>
        -:   83:#include <yara/re_lexer.h>
        -:   84:
        -:   85:
        -:   86:#define YYERROR_VERBOSE
        -:   87:
        -:   88:#define YYMALLOC yr_malloc
        -:   89:#define YYFREE yr_free
        -:   90:
        -:   91:#define mark_as_not_fast_regexp() \
        -:   92:    ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP
        -:   93:
        -:   94:#define fail_if(x, error) \
        -:   95:    if (x) \
        -:   96:    { \
        -:   97:      lex_env->last_error = error; \
        -:   98:      YYABORT; \
        -:   99:    } \
        -:  100:
        -:  101:#define destroy_node_if(x, node) \
        -:  102:    if (x) \
        -:  103:    { \
        -:  104:      yr_re_node_destroy(node); \
        -:  105:    } \
        -:  106:
        -:  107:
        -:  108:#line 109 "re_grammar.c"
        -:  109:
        -:  110:# ifndef YY_CAST
        -:  111:#  ifdef __cplusplus
        -:  112:#   define YY_CAST(Type, Val) static_cast<Type> (Val)
        -:  113:#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
        -:  114:#  else
        -:  115:#   define YY_CAST(Type, Val) ((Type) (Val))
        -:  116:#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
        -:  117:#  endif
        -:  118:# endif
        -:  119:# ifndef YY_NULLPTR
        -:  120:#  if defined __cplusplus
        -:  121:#   if 201103L <= __cplusplus
        -:  122:#    define YY_NULLPTR nullptr
        -:  123:#   else
        -:  124:#    define YY_NULLPTR 0
        -:  125:#   endif
        -:  126:#  else
        -:  127:#   define YY_NULLPTR ((void*)0)
        -:  128:#  endif
        -:  129:# endif
        -:  130:
        -:  131:/* Enabling verbose error messages.  */
        -:  132:#ifdef YYERROR_VERBOSE
        -:  133:# undef YYERROR_VERBOSE
        -:  134:# define YYERROR_VERBOSE 1
        -:  135:#else
        -:  136:# define YYERROR_VERBOSE 0
        -:  137:#endif
        -:  138:
        -:  139:/* Use api.header.include to #include this header
        -:  140:   instead of duplicating it here.  */
        -:  141:#ifndef YY_RE_YY_RE_GRAMMAR_H_INCLUDED
        -:  142:# define YY_RE_YY_RE_GRAMMAR_H_INCLUDED
        -:  143:/* Debug traces.  */
        -:  144:#ifndef YYDEBUG
        -:  145:# define YYDEBUG 0
        -:  146:#endif
        -:  147:#if YYDEBUG
        -:  148:extern int re_yydebug;
        -:  149:#endif
        -:  150:
        -:  151:/* Token type.  */
        -:  152:#ifndef YYTOKENTYPE
        -:  153:# define YYTOKENTYPE
        -:  154:  enum yytokentype
        -:  155:  {
        -:  156:    _CHAR_ = 258,
        -:  157:    _ANY_ = 259,
        -:  158:    _RANGE_ = 260,
        -:  159:    _CLASS_ = 261,
        -:  160:    _WORD_CHAR_ = 262,
        -:  161:    _NON_WORD_CHAR_ = 263,
        -:  162:    _SPACE_ = 264,
        -:  163:    _NON_SPACE_ = 265,
        -:  164:    _DIGIT_ = 266,
        -:  165:    _NON_DIGIT_ = 267,
        -:  166:    _WORD_BOUNDARY_ = 268,
        -:  167:    _NON_WORD_BOUNDARY_ = 269
        -:  168:  };
        -:  169:#endif
        -:  170:/* Tokens.  */
        -:  171:#define _CHAR_ 258
        -:  172:#define _ANY_ 259
        -:  173:#define _RANGE_ 260
        -:  174:#define _CLASS_ 261
        -:  175:#define _WORD_CHAR_ 262
        -:  176:#define _NON_WORD_CHAR_ 263
        -:  177:#define _SPACE_ 264
        -:  178:#define _NON_SPACE_ 265
        -:  179:#define _DIGIT_ 266
        -:  180:#define _NON_DIGIT_ 267
        -:  181:#define _WORD_BOUNDARY_ 268
        -:  182:#define _NON_WORD_BOUNDARY_ 269
        -:  183:
        -:  184:/* Value type.  */
        -:  185:#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
        -:  186:union YYSTYPE
        -:  187:{
        -:  188:#line 73 "re_grammar.y"
        -:  189:
        -:  190:  int integer;
        -:  191:  uint32_t range;
        -:  192:  RE_NODE* re_node;
        -:  193:  RE_CLASS* re_class;
        -:  194:
        -:  195:#line 196 "re_grammar.c"
        -:  196:
        -:  197:};
        -:  198:typedef union YYSTYPE YYSTYPE;
        -:  199:# define YYSTYPE_IS_TRIVIAL 1
        -:  200:# define YYSTYPE_IS_DECLARED 1
        -:  201:#endif
        -:  202:
        -:  203:
        -:  204:
        -:  205:int re_yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env);
        -:  206:
        -:  207:#endif /* !YY_RE_YY_RE_GRAMMAR_H_INCLUDED  */
        -:  208:
        -:  209:
        -:  210:
        -:  211:#ifdef short
        -:  212:# undef short
        -:  213:#endif
        -:  214:
        -:  215:/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
        -:  216:   <limits.h> and (if available) <stdint.h> are included
        -:  217:   so that the code can choose integer types of a good width.  */
        -:  218:
        -:  219:#ifndef __PTRDIFF_MAX__
        -:  220:# include <limits.h> /* INFRINGES ON USER NAME SPACE */
        -:  221:# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
        -:  222:#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
        -:  223:#  define YY_STDINT_H
        -:  224:# endif
        -:  225:#endif
        -:  226:
        -:  227:/* Narrow types that promote to a signed type and that can represent a
        -:  228:   signed or unsigned integer of at least N bits.  In tables they can
        -:  229:   save space and decrease cache pressure.  Promoting to a signed type
        -:  230:   helps avoid bugs in integer arithmetic.  */
        -:  231:
        -:  232:#ifdef __INT_LEAST8_MAX__
        -:  233:typedef __INT_LEAST8_TYPE__ yytype_int8;
        -:  234:#elif defined YY_STDINT_H
        -:  235:typedef int_least8_t yytype_int8;
        -:  236:#else
        -:  237:typedef signed char yytype_int8;
        -:  238:#endif
        -:  239:
        -:  240:#ifdef __INT_LEAST16_MAX__
        -:  241:typedef __INT_LEAST16_TYPE__ yytype_int16;
        -:  242:#elif defined YY_STDINT_H
        -:  243:typedef int_least16_t yytype_int16;
        -:  244:#else
        -:  245:typedef short yytype_int16;
        -:  246:#endif
        -:  247:
        -:  248:#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
        -:  249:typedef __UINT_LEAST8_TYPE__ yytype_uint8;
        -:  250:#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
        -:  251:       && UINT_LEAST8_MAX <= INT_MAX)
        -:  252:typedef uint_least8_t yytype_uint8;
        -:  253:#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
        -:  254:typedef unsigned char yytype_uint8;
        -:  255:#else
        -:  256:typedef short yytype_uint8;
        -:  257:#endif
        -:  258:
        -:  259:#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
        -:  260:typedef __UINT_LEAST16_TYPE__ yytype_uint16;
        -:  261:#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
        -:  262:       && UINT_LEAST16_MAX <= INT_MAX)
        -:  263:typedef uint_least16_t yytype_uint16;
        -:  264:#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
        -:  265:typedef unsigned short yytype_uint16;
        -:  266:#else
        -:  267:typedef int yytype_uint16;
        -:  268:#endif
        -:  269:
        -:  270:#ifndef YYPTRDIFF_T
        -:  271:# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
        -:  272:#  define YYPTRDIFF_T __PTRDIFF_TYPE__
        -:  273:#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
        -:  274:# elif defined PTRDIFF_MAX
        -:  275:#  ifndef ptrdiff_t
        -:  276:#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
        -:  277:#  endif
        -:  278:#  define YYPTRDIFF_T ptrdiff_t
        -:  279:#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
        -:  280:# else
        -:  281:#  define YYPTRDIFF_T long
        -:  282:#  define YYPTRDIFF_MAXIMUM LONG_MAX
        -:  283:# endif
        -:  284:#endif
        -:  285:
        -:  286:#ifndef YYSIZE_T
        -:  287:# ifdef __SIZE_TYPE__
        -:  288:#  define YYSIZE_T __SIZE_TYPE__
        -:  289:# elif defined size_t
        -:  290:#  define YYSIZE_T size_t
        -:  291:# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
        -:  292:#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
        -:  293:#  define YYSIZE_T size_t
        -:  294:# else
        -:  295:#  define YYSIZE_T unsigned
        -:  296:# endif
        -:  297:#endif
        -:  298:
        -:  299:#define YYSIZE_MAXIMUM                                  \
        -:  300:  YY_CAST (YYPTRDIFF_T,                                 \
        -:  301:           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
        -:  302:            ? YYPTRDIFF_MAXIMUM                         \
        -:  303:            : YY_CAST (YYSIZE_T, -1)))
        -:  304:
        -:  305:#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))
        -:  306:
        -:  307:/* Stored state numbers (used for stacks). */
        -:  308:typedef yytype_int8 yy_state_t;
        -:  309:
        -:  310:/* State numbers in computations.  */
        -:  311:typedef int yy_state_fast_t;
        -:  312:
        -:  313:#ifndef YY_
        -:  314:# if defined YYENABLE_NLS && YYENABLE_NLS
        -:  315:#  if ENABLE_NLS
        -:  316:#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
        -:  317:#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
        -:  318:#  endif
        -:  319:# endif
        -:  320:# ifndef YY_
        -:  321:#  define YY_(Msgid) Msgid
        -:  322:# endif
        -:  323:#endif
        -:  324:
        -:  325:#ifndef YY_ATTRIBUTE_PURE
        -:  326:# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
        -:  327:#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
        -:  328:# else
        -:  329:#  define YY_ATTRIBUTE_PURE
        -:  330:# endif
        -:  331:#endif
        -:  332:
        -:  333:#ifndef YY_ATTRIBUTE_UNUSED
        -:  334:# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
        -:  335:#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
        -:  336:# else
        -:  337:#  define YY_ATTRIBUTE_UNUSED
        -:  338:# endif
        -:  339:#endif
        -:  340:
        -:  341:/* Suppress unused-variable warnings by "using" E.  */
        -:  342:#if ! defined lint || defined __GNUC__
        -:  343:# define YYUSE(E) ((void) (E))
        -:  344:#else
        -:  345:# define YYUSE(E) /* empty */
        -:  346:#endif
        -:  347:
        -:  348:#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
        -:  349:/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
        -:  350:# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
        -:  351:    _Pragma ("GCC diagnostic push")                                     \
        -:  352:    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
        -:  353:    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
        -:  354:# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
        -:  355:    _Pragma ("GCC diagnostic pop")
        -:  356:#else
        -:  357:# define YY_INITIAL_VALUE(Value) Value
        -:  358:#endif
        -:  359:#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
        -:  360:# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
        -:  361:# define YY_IGNORE_MAYBE_UNINITIALIZED_END
        -:  362:#endif
        -:  363:#ifndef YY_INITIAL_VALUE
        -:  364:# define YY_INITIAL_VALUE(Value) /* Nothing. */
        -:  365:#endif
        -:  366:
        -:  367:#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
        -:  368:# define YY_IGNORE_USELESS_CAST_BEGIN                          \
        -:  369:    _Pragma ("GCC diagnostic push")                            \
        -:  370:    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
        -:  371:# define YY_IGNORE_USELESS_CAST_END            \
        -:  372:    _Pragma ("GCC diagnostic pop")
        -:  373:#endif
        -:  374:#ifndef YY_IGNORE_USELESS_CAST_BEGIN
        -:  375:# define YY_IGNORE_USELESS_CAST_BEGIN
        -:  376:# define YY_IGNORE_USELESS_CAST_END
        -:  377:#endif
        -:  378:
        -:  379:
        -:  380:#define YY_ASSERT(E) ((void) (0 && (E)))
        -:  381:
        -:  382:#if ! defined yyoverflow || YYERROR_VERBOSE
        -:  383:
        -:  384:/* The parser invokes alloca or malloc; define the necessary symbols.  */
        -:  385:
        -:  386:# ifdef YYSTACK_USE_ALLOCA
        -:  387:#  if YYSTACK_USE_ALLOCA
        -:  388:#   ifdef __GNUC__
        -:  389:#    define YYSTACK_ALLOC __builtin_alloca
        -:  390:#   elif defined __BUILTIN_VA_ARG_INCR
        -:  391:#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
        -:  392:#   elif defined _AIX
        -:  393:#    define YYSTACK_ALLOC __alloca
        -:  394:#   elif defined _MSC_VER
        -:  395:#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
        -:  396:#    define alloca _alloca
        -:  397:#   else
        -:  398:#    define YYSTACK_ALLOC alloca
        -:  399:#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
        -:  400:#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
        -:  401:      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
        -:  402:#     ifndef EXIT_SUCCESS
        -:  403:#      define EXIT_SUCCESS 0
        -:  404:#     endif
        -:  405:#    endif
        -:  406:#   endif
        -:  407:#  endif
        -:  408:# endif
        -:  409:
        -:  410:# ifdef YYSTACK_ALLOC
        -:  411:   /* Pacify GCC's 'empty if-body' warning.  */
        -:  412:#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
        -:  413:#  ifndef YYSTACK_ALLOC_MAXIMUM
        -:  414:    /* The OS might guarantee only one guard page at the bottom of the stack,
        -:  415:       and a page size can be as small as 4096 bytes.  So we cannot safely
        -:  416:       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
        -:  417:       to allow for a few compiler-allocated temporary stack slots.  */
        -:  418:#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
        -:  419:#  endif
        -:  420:# else
        -:  421:#  define YYSTACK_ALLOC YYMALLOC
        -:  422:#  define YYSTACK_FREE YYFREE
        -:  423:#  ifndef YYSTACK_ALLOC_MAXIMUM
        -:  424:#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
        -:  425:#  endif
        -:  426:#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
        -:  427:       && ! ((defined YYMALLOC || defined malloc) \
        -:  428:             && (defined YYFREE || defined free)))
        -:  429:#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
        -:  430:#   ifndef EXIT_SUCCESS
        -:  431:#    define EXIT_SUCCESS 0
        -:  432:#   endif
        -:  433:#  endif
        -:  434:#  ifndef YYMALLOC
        -:  435:#   define YYMALLOC malloc
        -:  436:#   if ! defined malloc && ! defined EXIT_SUCCESS
        -:  437:void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
        -:  438:#   endif
        -:  439:#  endif
        -:  440:#  ifndef YYFREE
        -:  441:#   define YYFREE free
        -:  442:#   if ! defined free && ! defined EXIT_SUCCESS
        -:  443:void free (void *); /* INFRINGES ON USER NAME SPACE */
        -:  444:#   endif
        -:  445:#  endif
        -:  446:# endif
        -:  447:#endif /* ! defined yyoverflow || YYERROR_VERBOSE */
        -:  448:
        -:  449:
        -:  450:#if (! defined yyoverflow \
        -:  451:     && (! defined __cplusplus \
        -:  452:         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
        -:  453:
        -:  454:/* A type that is properly aligned for any stack member.  */
        -:  455:union yyalloc
        -:  456:{
        -:  457:  yy_state_t yyss_alloc;
        -:  458:  YYSTYPE yyvs_alloc;
        -:  459:};
        -:  460:
        -:  461:/* The size of the maximum gap between one aligned stack and the next.  */
        -:  462:# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)
        -:  463:
        -:  464:/* The size of an array large to enough to hold all stacks, each with
        -:  465:   N elements.  */
        -:  466:# define YYSTACK_BYTES(N) \
        -:  467:     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE)) \
        -:  468:      + YYSTACK_GAP_MAXIMUM)
        -:  469:
        -:  470:# define YYCOPY_NEEDED 1
        -:  471:
        -:  472:/* Relocate STACK from its old location to the new one.  The
        -:  473:   local variables YYSIZE and YYSTACKSIZE give the old and new number of
        -:  474:   elements in the stack, and YYPTR gives the new location of the
        -:  475:   stack.  Advance YYPTR to a properly aligned location for the next
        -:  476:   stack.  */
        -:  477:# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
        -:  478:    do                                                                  \
        -:  479:      {                                                                 \
        -:  480:        YYPTRDIFF_T yynewbytes;                                         \
        -:  481:        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        -:  482:        Stack = &yyptr->Stack_alloc;                                    \
        -:  483:        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        -:  484:        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
        -:  485:      }                                                                 \
        -:  486:    while (0)
        -:  487:
        -:  488:#endif
        -:  489:
        -:  490:#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
        -:  491:/* Copy COUNT objects from SRC to DST.  The source and destination do
        -:  492:   not overlap.  */
        -:  493:# ifndef YYCOPY
        -:  494:#  if defined __GNUC__ && 1 < __GNUC__
        -:  495:#   define YYCOPY(Dst, Src, Count) \
        -:  496:      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
        -:  497:#  else
        -:  498:#   define YYCOPY(Dst, Src, Count)              \
        -:  499:      do                                        \
        -:  500:        {                                       \
        -:  501:          YYPTRDIFF_T yyi;                      \
        -:  502:          for (yyi = 0; yyi < (Count); yyi++)   \
        -:  503:            (Dst)[yyi] = (Src)[yyi];            \
        -:  504:        }                                       \
        -:  505:      while (0)
        -:  506:#  endif
        -:  507:# endif
        -:  508:#endif /* !YYCOPY_NEEDED */
        -:  509:
        -:  510:/* YYFINAL -- State number of the termination state.  */
        -:  511:#define YYFINAL  22
        -:  512:/* YYLAST -- Last index in YYTABLE.  */
        -:  513:#define YYLAST   45
        -:  514:
        -:  515:/* YYNTOKENS -- Number of terminals.  */
        -:  516:#define YYNTOKENS  24
        -:  517:/* YYNNTS -- Number of nonterminals.  */
        -:  518:#define YYNNTS  6
        -:  519:/* YYNRULES -- Number of rules.  */
        -:  520:#define YYNRULES  31
        -:  521:/* YYNSTATES -- Number of states.  */
        -:  522:#define YYNSTATES  35
        -:  523:
        -:  524:#define YYUNDEFTOK  2
        -:  525:#define YYMAXUTOK   269
        -:  526:
        -:  527:
        -:  528:/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
        -:  529:   as returned by yylex, with out-of-bounds checking.  */
        -:  530:#define YYTRANSLATE(YYX)                                                \
        -:  531:  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
        -:  532:
        -:  533:/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
        -:  534:   as returned by yylex.  */
        -:  535:static const yytype_int8 yytranslate[] =
        -:  536:{
        -:  537:       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  538:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  539:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  540:       2,     2,     2,     2,     2,     2,    20,     2,     2,     2,
        -:  541:      21,    22,    16,    18,     2,     2,    23,     2,     2,     2,
        -:  542:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  543:       2,     2,     2,    17,     2,     2,     2,     2,     2,     2,
        -:  544:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  545:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  546:       2,     2,     2,     2,    19,     2,     2,     2,     2,     2,
        -:  547:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  548:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  549:       2,     2,     2,     2,    15,     2,     2,     2,     2,     2,
        -:  550:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  551:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  552:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  553:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  554:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  555:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  556:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  557:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  558:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  559:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  560:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  561:       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        -:  562:       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
        -:  563:       5,     6,     7,     8,     9,    10,    11,    12,    13,    14
        -:  564:};
        -:  565:
        -:  566:#if YYDEBUG
        -:  567:  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
        -:  568:static const yytype_int16 yyrline[] =
        -:  569:{
        -:  570:       0,   104,   104,   109,   113,   117,   131,   155,   164,   172,
        -:  571:     188,   206,   222,   239,   262,   286,   309,   333,   337,   343,
        -:  572:     349,   355,   364,   368,   377,   386,   392,   398,   404,   410,
        -:  573:     416,   422
        -:  574:};
        -:  575:#endif
        -:  576:
        -:  577:#if YYDEBUG || YYERROR_VERBOSE || 0
        -:  578:/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
        -:  579:   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
        -:  580:static const char *const yytname[] =
        -:  581:{
        -:  582:  "$end", "error", "$undefined", "_CHAR_", "_ANY_", "_RANGE_", "_CLASS_",
        -:  583:  "_WORD_CHAR_", "_NON_WORD_CHAR_", "_SPACE_", "_NON_SPACE_", "_DIGIT_",
        -:  584:  "_NON_DIGIT_", "_WORD_BOUNDARY_", "_NON_WORD_BOUNDARY_", "'|'", "'*'",
        -:  585:  "'?'", "'+'", "'^'", "'$'", "'('", "')'", "'.'", "$accept", "re",
        -:  586:  "alternative", "concatenation", "repeat", "single", YY_NULLPTR
        -:  587:};
        -:  588:#endif
        -:  589:
        -:  590:# ifdef YYPRINT
        -:  591:/* YYTOKNUM[NUM] -- (External) token number corresponding to the
        -:  592:   (internal) symbol number NUM (which must be that of a token).  */
        -:  593:static const yytype_int16 yytoknum[] =
        -:  594:{
        -:  595:       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
        -:  596:     265,   266,   267,   268,   269,   124,    42,    63,    43,    94,
        -:  597:      36,    40,    41,    46
        -:  598:};
        -:  599:# endif
        -:  600:
        -:  601:#define YYPACT_NINF (-12)
        -:  602:
        -:  603:#define yypact_value_is_default(Yyn) \
        -:  604:  ((Yyn) == YYPACT_NINF)
        -:  605:
        -:  606:#define YYTABLE_NINF (-1)
        -:  607:
        -:  608:#define yytable_value_is_error(Yyn) \
        -:  609:  0
        -:  610:
        -:  611:  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
        -:  612:     STATE-NUM.  */
        -:  613:static const yytype_int8 yypact[] =
        -:  614:{
        -:  615:      -1,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,   -12,
        -:  616:     -12,   -12,   -12,   -12,    18,   -12,     1,   -11,    18,   -12,
        -:  617:      -2,    21,   -12,    18,   -12,     0,    16,    17,    23,   -12,
        -:  618:      18,   -12,   -12,   -12,   -12
        -:  619:};
        -:  620:
        -:  621:  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
        -:  622:     Performed when YYTABLE does not specify something else to do.  Zero
        -:  623:     means the default is an error.  */
        -:  624:static const yytype_int8 yydefact[] =
        -:  625:{
        -:  626:       0,     3,    24,    31,    25,    26,    27,    28,    29,    30,
        -:  627:      18,    19,    20,    21,     0,    23,     0,     2,     4,     7,
        -:  628:      17,     0,     1,     6,     8,    15,     9,    13,    11,    22,
        -:  629:       5,    16,    10,    14,    12
        -:  630:};
        -:  631:
        -:  632:  /* YYPGOTO[NTERM-NUM].  */
        -:  633:static const yytype_int8 yypgoto[] =
        -:  634:{
        -:  635:     -12,   -12,    28,    22,     5,   -12
        -:  636:};
        -:  637:
        -:  638:  /* YYDEFGOTO[NTERM-NUM].  */
        -:  639:static const yytype_int8 yydefgoto[] =
        -:  640:{
        -:  641:      -1,    16,    17,    18,    19,    20
        -:  642:};
        -:  643:
        -:  644:  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
        -:  645:     positive, shift that token.  If negative, reduce the rule whose
        -:  646:     number is the opposite.  If YYTABLE_NINF, syntax error.  */
        -:  647:static const yytype_int8 yytable[] =
        -:  648:{
        -:  649:       1,    22,     2,    25,    23,     3,     4,     5,     6,     7,
        -:  650:       8,     9,    10,    11,    26,    27,    28,    31,    12,    13,
        -:  651:      14,     2,    15,    24,     3,     4,     5,     6,     7,     8,
        -:  652:       9,    10,    11,    32,    33,    24,    23,    12,    13,    14,
        -:  653:      34,    15,    21,    29,     0,    30
        -:  654:};
        -:  655:
        -:  656:static const yytype_int8 yycheck[] =
        -:  657:{
        -:  658:       1,     0,     3,     5,    15,     6,     7,     8,     9,    10,
        -:  659:      11,    12,    13,    14,    16,    17,    18,    17,    19,    20,
        -:  660:      21,     3,    23,    18,     6,     7,     8,     9,    10,    11,
        -:  661:      12,    13,    14,    17,    17,    30,    15,    19,    20,    21,
        -:  662:      17,    23,    14,    22,    -1,    23
        -:  663:};
        -:  664:
        -:  665:  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
        -:  666:     symbol of state STATE-NUM.  */
        -:  667:static const yytype_int8 yystos[] =
        -:  668:{
        -:  669:       0,     1,     3,     6,     7,     8,     9,    10,    11,    12,
        -:  670:      13,    14,    19,    20,    21,    23,    25,    26,    27,    28,
        -:  671:      29,    26,     0,    15,    28,     5,    16,    17,    18,    22,
        -:  672:      27,    17,    17,    17,    17
        -:  673:};
        -:  674:
        -:  675:  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
        -:  676:static const yytype_int8 yyr1[] =
        -:  677:{
        -:  678:       0,    24,    25,    25,    26,    26,    26,    27,    27,    28,
        -:  679:      28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
        -:  680:      28,    28,    29,    29,    29,    29,    29,    29,    29,    29,
        -:  681:      29,    29
        -:  682:};
        -:  683:
        -:  684:  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
        -:  685:static const yytype_int8 yyr2[] =
        -:  686:{
        -:  687:       0,     2,     1,     1,     1,     3,     2,     1,     2,     2,
        -:  688:       3,     2,     3,     2,     3,     2,     3,     1,     1,     1,
        -:  689:       1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
        -:  690:       1,     1
        -:  691:};
        -:  692:
        -:  693:
        -:  694:#define yyerrok         (yyerrstatus = 0)
        -:  695:#define yyclearin       (yychar = YYEMPTY)
        -:  696:#define YYEMPTY         (-2)
        -:  697:#define YYEOF           0
        -:  698:
        -:  699:#define YYACCEPT        goto yyacceptlab
        -:  700:#define YYABORT         goto yyabortlab
        -:  701:#define YYERROR         goto yyerrorlab
        -:  702:
        -:  703:
        -:  704:#define YYRECOVERING()  (!!yyerrstatus)
        -:  705:
        -:  706:#define YYBACKUP(Token, Value)                                    \
        -:  707:  do                                                              \
        -:  708:    if (yychar == YYEMPTY)                                        \
        -:  709:      {                                                           \
        -:  710:        yychar = (Token);                                         \
        -:  711:        yylval = (Value);                                         \
        -:  712:        YYPOPSTACK (yylen);                                       \
        -:  713:        yystate = *yyssp;                                         \
        -:  714:        goto yybackup;                                            \
        -:  715:      }                                                           \
        -:  716:    else                                                          \
        -:  717:      {                                                           \
        -:  718:        yyerror (yyscanner, lex_env, YY_("syntax error: cannot back up")); \
        -:  719:        YYERROR;                                                  \
        -:  720:      }                                                           \
        -:  721:  while (0)
        -:  722:
        -:  723:/* Error token number */
        -:  724:#define YYTERROR        1
        -:  725:#define YYERRCODE       256
        -:  726:
        -:  727:
        -:  728:
        -:  729:/* Enable debugging if requested.  */
        -:  730:#if YYDEBUG
        -:  731:
        -:  732:# ifndef YYFPRINTF
        -:  733:#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
        -:  734:#  define YYFPRINTF fprintf
        -:  735:# endif
        -:  736:
        -:  737:# define YYDPRINTF(Args)                        \
        -:  738:do {                                            \
        -:  739:  if (yydebug)                                  \
        -:  740:    YYFPRINTF Args;                             \
        -:  741:} while (0)
        -:  742:
        -:  743:/* This macro is provided for backward compatibility. */
        -:  744:#ifndef YY_LOCATION_PRINT
        -:  745:# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
        -:  746:#endif
        -:  747:
        -:  748:
        -:  749:# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
        -:  750:do {                                                                      \
        -:  751:  if (yydebug)                                                            \
        -:  752:    {                                                                     \
        -:  753:      YYFPRINTF (stderr, "%s ", Title);                                   \
        -:  754:      yy_symbol_print (stderr,                                            \
        -:  755:                  Type, Value, yyscanner, lex_env); \
        -:  756:      YYFPRINTF (stderr, "\n");                                           \
        -:  757:    }                                                                     \
        -:  758:} while (0)
        -:  759:
        -:  760:
        -:  761:/*-----------------------------------.
        -:  762:| Print this symbol's value on YYO.  |
        -:  763:`-----------------------------------*/
        -:  764:
        -:  765:static void
        -:  766:yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)
        -:  767:{
        -:  768:  FILE *yyoutput = yyo;
        -:  769:  YYUSE (yyoutput);
        -:  770:  YYUSE (yyscanner);
        -:  771:  YYUSE (lex_env);
        -:  772:  if (!yyvaluep)
        -:  773:    return;
        -:  774:# ifdef YYPRINT
        -:  775:  if (yytype < YYNTOKENS)
        -:  776:    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
        -:  777:# endif
        -:  778:  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
        -:  779:  YYUSE (yytype);
        -:  780:  YY_IGNORE_MAYBE_UNINITIALIZED_END
        -:  781:}
        -:  782:
        -:  783:
        -:  784:/*---------------------------.
        -:  785:| Print this symbol on YYO.  |
        -:  786:`---------------------------*/
        -:  787:
        -:  788:static void
        -:  789:yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)
        -:  790:{
        -:  791:  YYFPRINTF (yyo, "%s %s (",
        -:  792:             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);
        -:  793:
        -:  794:  yy_symbol_value_print (yyo, yytype, yyvaluep, yyscanner, lex_env);
        -:  795:  YYFPRINTF (yyo, ")");
        -:  796:}
        -:  797:
        -:  798:/*------------------------------------------------------------------.
        -:  799:| yy_stack_print -- Print the state stack from its BOTTOM up to its |
        -:  800:| TOP (included).                                                   |
        -:  801:`------------------------------------------------------------------*/
        -:  802:
        -:  803:static void
        -:  804:yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
        -:  805:{
        -:  806:  YYFPRINTF (stderr, "Stack now");
        -:  807:  for (; yybottom <= yytop; yybottom++)
        -:  808:    {
        -:  809:      int yybot = *yybottom;
        -:  810:      YYFPRINTF (stderr, " %d", yybot);
        -:  811:    }
        -:  812:  YYFPRINTF (stderr, "\n");
        -:  813:}
        -:  814:
        -:  815:# define YY_STACK_PRINT(Bottom, Top)                            \
        -:  816:do {                                                            \
        -:  817:  if (yydebug)                                                  \
        -:  818:    yy_stack_print ((Bottom), (Top));                           \
        -:  819:} while (0)
        -:  820:
        -:  821:
        -:  822:/*------------------------------------------------.
        -:  823:| Report that the YYRULE is going to be reduced.  |
        -:  824:`------------------------------------------------*/
        -:  825:
        -:  826:static void
        -:  827:yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, int yyrule, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)
        -:  828:{
        -:  829:  int yylno = yyrline[yyrule];
        -:  830:  int yynrhs = yyr2[yyrule];
        -:  831:  int yyi;
        -:  832:  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
        -:  833:             yyrule - 1, yylno);
        -:  834:  /* The symbols being reduced.  */
        -:  835:  for (yyi = 0; yyi < yynrhs; yyi++)
        -:  836:    {
        -:  837:      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
        -:  838:      yy_symbol_print (stderr,
        -:  839:                       yystos[+yyssp[yyi + 1 - yynrhs]],
        -:  840:                       &yyvsp[(yyi + 1) - (yynrhs)]
        -:  841:                                              , yyscanner, lex_env);
        -:  842:      YYFPRINTF (stderr, "\n");
        -:  843:    }
        -:  844:}
        -:  845:
        -:  846:# define YY_REDUCE_PRINT(Rule)          \
        -:  847:do {                                    \
        -:  848:  if (yydebug)                          \
        -:  849:    yy_reduce_print (yyssp, yyvsp, Rule, yyscanner, lex_env); \
        -:  850:} while (0)
        -:  851:
        -:  852:/* Nonzero means print parse trace.  It is left uninitialized so that
        -:  853:   multiple parsers can coexist.  */
        -:  854:int yydebug;
        -:  855:#else /* !YYDEBUG */
        -:  856:# define YYDPRINTF(Args)
        -:  857:# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
        -:  858:# define YY_STACK_PRINT(Bottom, Top)
        -:  859:# define YY_REDUCE_PRINT(Rule)
        -:  860:#endif /* !YYDEBUG */
        -:  861:
        -:  862:
        -:  863:/* YYINITDEPTH -- initial size of the parser's stacks.  */
        -:  864:#ifndef YYINITDEPTH
        -:  865:# define YYINITDEPTH 200
        -:  866:#endif
        -:  867:
        -:  868:/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
        -:  869:   if the built-in stack extension method is used).
        -:  870:
        -:  871:   Do not make this value too large; the results are undefined if
        -:  872:   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
        -:  873:   evaluated with infinite-precision integer arithmetic.  */
        -:  874:
        -:  875:#ifndef YYMAXDEPTH
        -:  876:# define YYMAXDEPTH 10000
        -:  877:#endif
        -:  878:
        -:  879:
        -:  880:#if YYERROR_VERBOSE
        -:  881:
        -:  882:# ifndef yystrlen
        -:  883:#  if defined __GLIBC__ && defined _STRING_H
        -:  884:#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
        -:  885:#  else
        -:  886:/* Return the length of YYSTR.  */
        -:  887:static YYPTRDIFF_T
        -:  888:yystrlen (const char *yystr)
        -:  889:{
        -:  890:  YYPTRDIFF_T yylen;
        -:  891:  for (yylen = 0; yystr[yylen]; yylen++)
        -:  892:    continue;
        -:  893:  return yylen;
        -:  894:}
        -:  895:#  endif
        -:  896:# endif
        -:  897:
        -:  898:# ifndef yystpcpy
        -:  899:#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
        -:  900:#   define yystpcpy stpcpy
        -:  901:#  else
        -:  902:/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
        -:  903:   YYDEST.  */
        -:  904:static char *
        -:  905:yystpcpy (char *yydest, const char *yysrc)
        -:  906:{
        -:  907:  char *yyd = yydest;
        -:  908:  const char *yys = yysrc;
        -:  909:
        -:  910:  while ((*yyd++ = *yys++) != '\0')
        -:  911:    continue;
        -:  912:
        -:  913:  return yyd - 1;
        -:  914:}
        -:  915:#  endif
        -:  916:# endif
        -:  917:
        -:  918:# ifndef yytnamerr
        -:  919:/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
        -:  920:   quotes and backslashes, so that it's suitable for yyerror.  The
        -:  921:   heuristic is that double-quoting is unnecessary unless the string
        -:  922:   contains an apostrophe, a comma, or backslash (other than
        -:  923:   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
        -:  924:   null, do not copy; instead, return the length of what the result
        -:  925:   would have been.  */
        -:  926:static YYPTRDIFF_T
    #####:  927:yytnamerr (char *yyres, const char *yystr)
        -:  928:{
    #####:  929:  if (*yystr == '"')
        -:  930:    {
    #####:  931:      YYPTRDIFF_T yyn = 0;
    #####:  932:      char const *yyp = yystr;
        -:  933:
        -:  934:      for (;;)
    #####:  935:        switch (*++yyp)
        -:  936:          {
    #####:  937:          case '\'':
        -:  938:          case ',':
    #####:  939:            goto do_not_strip_quotes;
        -:  940:
    #####:  941:          case '\\':
    #####:  942:            if (*++yyp != '\\')
    #####:  943:              goto do_not_strip_quotes;
        -:  944:            else
    #####:  945:              goto append;
        -:  946:
    #####:  947:          append:
        -:  948:          default:
    #####:  949:            if (yyres)
    #####:  950:              yyres[yyn] = *yyp;
    #####:  951:            yyn++;
    #####:  952:            break;
        -:  953:
    #####:  954:          case '"':
    #####:  955:            if (yyres)
    #####:  956:              yyres[yyn] = '\0';
    #####:  957:            return yyn;
        -:  958:          }
    #####:  959:    do_not_strip_quotes: ;
        -:  960:    }
        -:  961:
    #####:  962:  if (yyres)
    #####:  963:    return yystpcpy (yyres, yystr) - yyres;
        -:  964:  else
    #####:  965:    return yystrlen (yystr);
        -:  966:}
        -:  967:# endif
        -:  968:
        -:  969:/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
        -:  970:   about the unexpected token YYTOKEN for the state stack whose top is
        -:  971:   YYSSP.
        -:  972:
        -:  973:   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
        -:  974:   not large enough to hold the message.  In that case, also set
        -:  975:   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
        -:  976:   required number of bytes is too large to store.  */
        -:  977:static int
    #####:  978:yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
        -:  979:                yy_state_t *yyssp, int yytoken)
        -:  980:{
        -:  981:  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
        -:  982:  /* Internationalized format string. */
    #####:  983:  const char *yyformat = YY_NULLPTR;
        -:  984:  /* Arguments of yyformat: reported tokens (one for the "unexpected",
        -:  985:     one per "expected"). */
        -:  986:  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
        -:  987:  /* Actual size of YYARG. */
    #####:  988:  int yycount = 0;
        -:  989:  /* Cumulated lengths of YYARG.  */
    #####:  990:  YYPTRDIFF_T yysize = 0;
        -:  991:
        -:  992:  /* There are many possibilities here to consider:
        -:  993:     - If this state is a consistent state with a default action, then
        -:  994:       the only way this function was invoked is if the default action
        -:  995:       is an error action.  In that case, don't check for expected
        -:  996:       tokens because there are none.
        -:  997:     - The only way there can be no lookahead present (in yychar) is if
        -:  998:       this state is a consistent state with a default action.  Thus,
        -:  999:       detecting the absence of a lookahead is sufficient to determine
        -: 1000:       that there is no unexpected or expected token to report.  In that
        -: 1001:       case, just report a simple "syntax error".
        -: 1002:     - Don't assume there isn't a lookahead just because this state is a
        -: 1003:       consistent state with a default action.  There might have been a
        -: 1004:       previous inconsistent state, consistent state with a non-default
        -: 1005:       action, or user semantic action that manipulated yychar.
        -: 1006:     - Of course, the expected token list depends on states to have
        -: 1007:       correct lookahead information, and it depends on the parser not
        -: 1008:       to perform extra reductions after fetching a lookahead from the
        -: 1009:       scanner and before detecting a syntax error.  Thus, state merging
        -: 1010:       (from LALR or IELR) and default reductions corrupt the expected
        -: 1011:       token list.  However, the list is correct for canonical LR with
        -: 1012:       one exception: it will still contain any token that will not be
        -: 1013:       accepted due to an error action in a later state.
        -: 1014:  */
    #####: 1015:  if (yytoken != YYEMPTY)
        -: 1016:    {
    #####: 1017:      int yyn = yypact[+*yyssp];
    #####: 1018:      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
    #####: 1019:      yysize = yysize0;
    #####: 1020:      yyarg[yycount++] = yytname[yytoken];
    #####: 1021:      if (!yypact_value_is_default (yyn))
        -: 1022:        {
        -: 1023:          /* Start YYX at -YYN if negative to avoid negative indexes in
        -: 1024:             YYCHECK.  In other words, skip the first -YYN actions for
        -: 1025:             this state because they are default actions.  */
    #####: 1026:          int yyxbegin = yyn < 0 ? -yyn : 0;
        -: 1027:          /* Stay within bounds of both yycheck and yytname.  */
    #####: 1028:          int yychecklim = YYLAST - yyn + 1;
    #####: 1029:          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
        -: 1030:          int yyx;
        -: 1031:
    #####: 1032:          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
    #####: 1033:            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
    #####: 1034:                && !yytable_value_is_error (yytable[yyx + yyn]))
        -: 1035:              {
    #####: 1036:                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
        -: 1037:                  {
    #####: 1038:                    yycount = 1;
    #####: 1039:                    yysize = yysize0;
    #####: 1040:                    break;
        -: 1041:                  }
    #####: 1042:                yyarg[yycount++] = yytname[yyx];
        -: 1043:                {
    #####: 1044:                  YYPTRDIFF_T yysize1
    #####: 1045:                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
    #####: 1046:                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
    #####: 1047:                    yysize = yysize1;
        -: 1048:                  else
    #####: 1049:                    return 2;
        -: 1050:                }
        -: 1051:              }
        -: 1052:        }
        -: 1053:    }
        -: 1054:
    #####: 1055:  switch (yycount)
        -: 1056:    {
        -: 1057:# define YYCASE_(N, S)                      \
        -: 1058:      case N:                               \
        -: 1059:        yyformat = S;                       \
        -: 1060:      break
    #####: 1061:    default: /* Avoid compiler warnings. */
    #####: 1062:      YYCASE_(0, YY_("syntax error"));
    #####: 1063:      YYCASE_(1, YY_("syntax error, unexpected %s"));
    #####: 1064:      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
    #####: 1065:      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
    #####: 1066:      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
    #####: 1067:      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
        -: 1068:# undef YYCASE_
        -: 1069:    }
        -: 1070:
        -: 1071:  {
        -: 1072:    /* Don't count the "%s"s in the final size, but reserve room for
        -: 1073:       the terminator.  */
    #####: 1074:    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
    #####: 1075:    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
    #####: 1076:      yysize = yysize1;
        -: 1077:    else
    #####: 1078:      return 2;
        -: 1079:  }
        -: 1080:
    #####: 1081:  if (*yymsg_alloc < yysize)
        -: 1082:    {
    #####: 1083:      *yymsg_alloc = 2 * yysize;
    #####: 1084:      if (! (yysize <= *yymsg_alloc
        -: 1085:             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
    #####: 1086:        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
    #####: 1087:      return 1;
        -: 1088:    }
        -: 1089:
        -: 1090:  /* Avoid sprintf, as that infringes on the user's name space.
        -: 1091:     Don't have undefined behavior even if the translation
        -: 1092:     produced a string with the wrong number of "%s"s.  */
        -: 1093:  {
    #####: 1094:    char *yyp = *yymsg;
    #####: 1095:    int yyi = 0;
    #####: 1096:    while ((*yyp = *yyformat) != '\0')
    #####: 1097:      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        -: 1098:        {
    #####: 1099:          yyp += yytnamerr (yyp, yyarg[yyi++]);
    #####: 1100:          yyformat += 2;
        -: 1101:        }
        -: 1102:      else
        -: 1103:        {
    #####: 1104:          ++yyp;
    #####: 1105:          ++yyformat;
        -: 1106:        }
        -: 1107:  }
    #####: 1108:  return 0;
        -: 1109:}
        -: 1110:#endif /* YYERROR_VERBOSE */
        -: 1111:
        -: 1112:/*-----------------------------------------------.
        -: 1113:| Release the memory associated to this symbol.  |
        -: 1114:`-----------------------------------------------*/
        -: 1115:
        -: 1116:static void
        4: 1117:yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)
        -: 1118:{
        -: 1119:  YYUSE (yyvaluep);
        -: 1120:  YYUSE (yyscanner);
        -: 1121:  YYUSE (lex_env);
        4: 1122:  if (!yymsg)
    #####: 1123:    yymsg = "Deleting";
        -: 1124:  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
        -: 1125:
        -: 1126:  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
        4: 1127:  switch (yytype)
        -: 1128:    {
    #####: 1129:    case 6: /* _CLASS_  */
        -: 1130:#line 96 "re_grammar.y"
        -: 1131:            { yr_free(((*yyvaluep).re_class)); ((*yyvaluep).re_class) = NULL; }
        -: 1132:#line 1133 "re_grammar.c"
    #####: 1133:        break;
        -: 1134:
    #####: 1135:    case 26: /* alternative  */
        -: 1136:#line 97 "re_grammar.y"
        -: 1137:            { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
        -: 1138:#line 1139 "re_grammar.c"
    #####: 1139:        break;
        -: 1140:
    #####: 1141:    case 27: /* concatenation  */
        -: 1142:#line 98 "re_grammar.y"
        -: 1143:            { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
        -: 1144:#line 1145 "re_grammar.c"
    #####: 1145:        break;
        -: 1146:
    #####: 1147:    case 28: /* repeat  */
        -: 1148:#line 99 "re_grammar.y"
        -: 1149:            { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
        -: 1150:#line 1151 "re_grammar.c"
    #####: 1151:        break;
        -: 1152:
    #####: 1153:    case 29: /* single  */
        -: 1154:#line 100 "re_grammar.y"
        -: 1155:            { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
        -: 1156:#line 1157 "re_grammar.c"
    #####: 1157:        break;
        -: 1158:
        4: 1159:      default:
        4: 1160:        break;
        -: 1161:    }
        -: 1162:  YY_IGNORE_MAYBE_UNINITIALIZED_END
        4: 1163:}
        -: 1164:
        -: 1165:
        -: 1166:
        -: 1167:
        -: 1168:/*----------.
        -: 1169:| yyparse.  |
        -: 1170:`----------*/
        -: 1171:
        -: 1172:int
        2: 1173:yyparse (void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)
        -: 1174:{
        -: 1175:/* The lookahead symbol.  */
        -: 1176:int yychar;
        -: 1177:
        -: 1178:
        -: 1179:/* The semantic value of the lookahead symbol.  */
        -: 1180:/* Default value used for initialization, for pacifying older GCCs
        -: 1181:   or non-GCC compilers.  */
        -: 1182:YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
        -: 1183:YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
        -: 1184:
        -: 1185:    /* Number of syntax errors so far.  */
        -: 1186:    int yynerrs;
        -: 1187:
        -: 1188:    yy_state_fast_t yystate;
        -: 1189:    /* Number of tokens to shift before error messages enabled.  */
        -: 1190:    int yyerrstatus;
        -: 1191:
        -: 1192:    /* The stacks and their tools:
        -: 1193:       'yyss': related to states.
        -: 1194:       'yyvs': related to semantic values.
        -: 1195:
        -: 1196:       Refer to the stacks through separate pointers, to allow yyoverflow
        -: 1197:       to reallocate them elsewhere.  */
        -: 1198:
        -: 1199:    /* The state stack.  */
        -: 1200:    yy_state_t yyssa[YYINITDEPTH];
        -: 1201:    yy_state_t *yyss;
        -: 1202:    yy_state_t *yyssp;
        -: 1203:
        -: 1204:    /* The semantic value stack.  */
        -: 1205:    YYSTYPE yyvsa[YYINITDEPTH];
        -: 1206:    YYSTYPE *yyvs;
        -: 1207:    YYSTYPE *yyvsp;
        -: 1208:
        -: 1209:    YYPTRDIFF_T yystacksize;
        -: 1210:
        -: 1211:  int yyn;
        -: 1212:  int yyresult;
        -: 1213:  /* Lookahead token as an internal (translated) token number.  */
        2: 1214:  int yytoken = 0;
        -: 1215:  /* The variables used to return semantic value and location from the
        -: 1216:     action routines.  */
        -: 1217:  YYSTYPE yyval;
        -: 1218:
        -: 1219:#if YYERROR_VERBOSE
        -: 1220:  /* Buffer for error messages, and its allocated size.  */
        -: 1221:  char yymsgbuf[128];
        2: 1222:  char *yymsg = yymsgbuf;
        2: 1223:  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
        -: 1224:#endif
        -: 1225:
        -: 1226:#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
        -: 1227:
        -: 1228:  /* The number of symbols on the RHS of the reduced rule.
        -: 1229:     Keep to zero when no symbol should be popped.  */
        2: 1230:  int yylen = 0;
        -: 1231:
        2: 1232:  yyssp = yyss = yyssa;
        2: 1233:  yyvsp = yyvs = yyvsa;
        2: 1234:  yystacksize = YYINITDEPTH;
        -: 1235:
        -: 1236:  YYDPRINTF ((stderr, "Starting parse\n"));
        -: 1237:
        2: 1238:  yystate = 0;
        2: 1239:  yyerrstatus = 0;
        2: 1240:  yynerrs = 0;
        2: 1241:  yychar = YYEMPTY; /* Cause a token to be read.  */
        2: 1242:  goto yysetstate;
        -: 1243:
        -: 1244:
        -: 1245:/*------------------------------------------------------------.
        -: 1246:| yynewstate -- push a new state, which is found in yystate.  |
        -: 1247:`------------------------------------------------------------*/
       30: 1248:yynewstate:
        -: 1249:  /* In all cases, when you get here, the value and location stacks
        -: 1250:     have just been pushed.  So pushing a state here evens the stacks.  */
       30: 1251:  yyssp++;
        -: 1252:
        -: 1253:
        -: 1254:/*--------------------------------------------------------------------.
        -: 1255:| yysetstate -- set current state (the top of the stack) to yystate.  |
        -: 1256:`--------------------------------------------------------------------*/
       32: 1257:yysetstate:
        -: 1258:  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
        -: 1259:  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
        -: 1260:  YY_IGNORE_USELESS_CAST_BEGIN
       32: 1261:  *yyssp = YY_CAST (yy_state_t, yystate);
        -: 1262:  YY_IGNORE_USELESS_CAST_END
        -: 1263:
       32: 1264:  if (yyss + yystacksize - 1 <= yyssp)
        -: 1265:#if !defined yyoverflow && !defined YYSTACK_RELOCATE
        -: 1266:    goto yyexhaustedlab;
        -: 1267:#else
        -: 1268:    {
        -: 1269:      /* Get the current used size of the three stacks, in elements.  */
    #####: 1270:      YYPTRDIFF_T yysize = yyssp - yyss + 1;
        -: 1271:
        -: 1272:# if defined yyoverflow
        -: 1273:      {
        -: 1274:        /* Give user a chance to reallocate the stack.  Use copies of
        -: 1275:           these so that the &'s don't force the real ones into
        -: 1276:           memory.  */
        -: 1277:        yy_state_t *yyss1 = yyss;
        -: 1278:        YYSTYPE *yyvs1 = yyvs;
        -: 1279:
        -: 1280:        /* Each stack pointer address is followed by the size of the
        -: 1281:           data in use in that stack, in bytes.  This used to be a
        -: 1282:           conditional around just the two extra args, but that might
        -: 1283:           be undefined if yyoverflow is a macro.  */
        -: 1284:        yyoverflow (YY_("memory exhausted"),
        -: 1285:                    &yyss1, yysize * YYSIZEOF (*yyssp),
        -: 1286:                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
        -: 1287:                    &yystacksize);
        -: 1288:        yyss = yyss1;
        -: 1289:        yyvs = yyvs1;
        -: 1290:      }
        -: 1291:# else /* defined YYSTACK_RELOCATE */
        -: 1292:      /* Extend the stack our own way.  */
    #####: 1293:      if (YYMAXDEPTH <= yystacksize)
    #####: 1294:        goto yyexhaustedlab;
    #####: 1295:      yystacksize *= 2;
    #####: 1296:      if (YYMAXDEPTH < yystacksize)
    #####: 1297:        yystacksize = YYMAXDEPTH;
        -: 1298:
        -: 1299:      {
    #####: 1300:        yy_state_t *yyss1 = yyss;
        -: 1301:        union yyalloc *yyptr =
    #####: 1302:          YY_CAST (union yyalloc *,
        -: 1303:                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
    #####: 1304:        if (! yyptr)
    #####: 1305:          goto yyexhaustedlab;
    #####: 1306:        YYSTACK_RELOCATE (yyss_alloc, yyss);
    #####: 1307:        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        -: 1308:# undef YYSTACK_RELOCATE
    #####: 1309:        if (yyss1 != yyssa)
    #####: 1310:          YYSTACK_FREE (yyss1);
        -: 1311:      }
        -: 1312:# endif
        -: 1313:
    #####: 1314:      yyssp = yyss + yysize - 1;
    #####: 1315:      yyvsp = yyvs + yysize - 1;
        -: 1316:
        -: 1317:      YY_IGNORE_USELESS_CAST_BEGIN
        -: 1318:      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
        -: 1319:                  YY_CAST (long, yystacksize)));
        -: 1320:      YY_IGNORE_USELESS_CAST_END
        -: 1321:
    #####: 1322:      if (yyss + yystacksize - 1 <= yyssp)
    #####: 1323:        YYABORT;
        -: 1324:    }
        -: 1325:#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */
        -: 1326:
       32: 1327:  if (yystate == YYFINAL)
        2: 1328:    YYACCEPT;
        -: 1329:
       30: 1330:  goto yybackup;
        -: 1331:
        -: 1332:
        -: 1333:/*-----------.
        -: 1334:| yybackup.  |
        -: 1335:`-----------*/
       30: 1336:yybackup:
        -: 1337:  /* Do appropriate processing given the current state.  Read a
        -: 1338:     lookahead token if we need one and don't already have one.  */
        -: 1339:
        -: 1340:  /* First try to decide what to do without reference to lookahead token.  */
       30: 1341:  yyn = yypact[yystate];
       30: 1342:  if (yypact_value_is_default (yyn))
       12: 1343:    goto yydefault;
        -: 1344:
        -: 1345:  /* Not known => get a lookahead token if don't already have one.  */
        -: 1346:
        -: 1347:  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
       18: 1348:  if (yychar == YYEMPTY)
        -: 1349:    {
        -: 1350:      YYDPRINTF ((stderr, "Reading a token: "));
        8: 1351:      yychar = yylex (&yylval, yyscanner, lex_env);
        -: 1352:    }
        -: 1353:
       18: 1354:  if (yychar <= YYEOF)
        -: 1355:    {
        8: 1356:      yychar = yytoken = YYEOF;
        -: 1357:      YYDPRINTF ((stderr, "Now at end of input.\n"));
        -: 1358:    }
        -: 1359:  else
        -: 1360:    {
      10*: 1361:      yytoken = YYTRANSLATE (yychar);
        -: 1362:      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
        -: 1363:    }
        -: 1364:
        -: 1365:  /* If the proper action on seeing token YYTOKEN is to reduce or to
        -: 1366:     detect an error, take that action.  */
       18: 1367:  yyn += yytoken;
       18: 1368:  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
       10: 1369:    goto yydefault;
        8: 1370:  yyn = yytable[yyn];
        8: 1371:  if (yyn <= 0)
        -: 1372:    {
        -: 1373:      if (yytable_value_is_error (yyn))
        -: 1374:        goto yyerrlab;
    #####: 1375:      yyn = -yyn;
    #####: 1376:      goto yyreduce;
        -: 1377:    }
        -: 1378:
        -: 1379:  /* Count tokens shifted since error; after three, turn off error
        -: 1380:     status.  */
        8: 1381:  if (yyerrstatus)
    #####: 1382:    yyerrstatus--;
        -: 1383:
        -: 1384:  /* Shift the lookahead token.  */
        -: 1385:  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
        8: 1386:  yystate = yyn;
        -: 1387:  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
        8: 1388:  *++yyvsp = yylval;
        -: 1389:  YY_IGNORE_MAYBE_UNINITIALIZED_END
        -: 1390:
        -: 1391:  /* Discard the shifted token.  */
        8: 1392:  yychar = YYEMPTY;
        8: 1393:  goto yynewstate;
        -: 1394:
        -: 1395:
        -: 1396:/*-----------------------------------------------------------.
        -: 1397:| yydefault -- do the default action for the current state.  |
        -: 1398:`-----------------------------------------------------------*/
       22: 1399:yydefault:
       22: 1400:  yyn = yydefact[yystate];
       22: 1401:  if (yyn == 0)
    #####: 1402:    goto yyerrlab;
       22: 1403:  goto yyreduce;
        -: 1404:
        -: 1405:
        -: 1406:/*-----------------------------.
        -: 1407:| yyreduce -- do a reduction.  |
        -: 1408:`-----------------------------*/
       22: 1409:yyreduce:
        -: 1410:  /* yyn is the number of a rule to reduce with.  */
       22: 1411:  yylen = yyr2[yyn];
        -: 1412:
        -: 1413:  /* If YYLEN is nonzero, implement the default value of the action:
        -: 1414:     '$$ = $1'.
        -: 1415:
        -: 1416:     Otherwise, the following line sets YYVAL to garbage.
        -: 1417:     This behavior is undocumented and Bison
        -: 1418:     users should not rely upon it.  Assigning to YYVAL
        -: 1419:     unconditionally makes the parser a bit smaller, and it avoids a
        -: 1420:     GCC warning that YYVAL may be used uninitialized.  */
       22: 1421:  yyval = yyvsp[1-yylen];
        -: 1422:
        -: 1423:
        -: 1424:  YY_REDUCE_PRINT (yyn);
       22: 1425:  switch (yyn)
        -: 1426:    {
        2: 1427:  case 2:
        -: 1428:#line 105 "re_grammar.y"
        -: 1429:      {
        -: 1430:        RE_AST* re_ast = yyget_extra(yyscanner);
        -: 1431:        re_ast->root_node = (yyvsp[0].re_node);
        -: 1432:      }
        -: 1433:#line 1434 "re_grammar.c"
        2: 1434:    break;
        -: 1435:
        2: 1436:  case 4:
        -: 1437:#line 114 "re_grammar.y"
        -: 1438:      {
        -: 1439:        (yyval.re_node) = (yyvsp[0].re_node);
        -: 1440:      }
        -: 1441:#line 1442 "re_grammar.c"
        2: 1442:    break;
        -: 1443:
    #####: 1444:  case 5:
        -: 1445:#line 118 "re_grammar.y"
        -: 1446:      {
        -: 1447:        mark_as_not_fast_regexp();
        -: 1448:
        -: 1449:        (yyval.re_node) = yr_re_node_create(RE_NODE_ALT);
        -: 1450:
        -: 1451:        destroy_node_if((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        -: 1452:        destroy_node_if((yyval.re_node) == NULL, (yyvsp[0].re_node));
        -: 1453:
        -: 1454:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1455:
        -: 1456:        yr_re_node_append_child((yyval.re_node), (yyvsp[-2].re_node));
        -: 1457:        yr_re_node_append_child((yyval.re_node), (yyvsp[0].re_node));
        -: 1458:      }
        -: 1459:#line 1460 "re_grammar.c"
    #####: 1460:    break;
        -: 1461:
    #####: 1462:  case 6:
        -: 1463:#line 132 "re_grammar.y"
        -: 1464:      {
        -: 1465:        RE_NODE* node;
        -: 1466:
        -: 1467:        mark_as_not_fast_regexp();
        -: 1468:
        -: 1469:        node = yr_re_node_create(RE_NODE_EMPTY);
        -: 1470:
        -: 1471:        destroy_node_if(node == NULL, (yyvsp[-1].re_node));
        -: 1472:        fail_if(node == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1473:
        -: 1474:        (yyval.re_node) = yr_re_node_create(RE_NODE_ALT);
        -: 1475:
        -: 1476:        destroy_node_if((yyval.re_node) == NULL, node);
        -: 1477:        destroy_node_if((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        -: 1478:
        -: 1479:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1480:
        -: 1481:        yr_re_node_append_child((yyval.re_node), (yyvsp[-1].re_node));
        -: 1482:        yr_re_node_append_child((yyval.re_node), node);
        -: 1483:      }
        -: 1484:#line 1485 "re_grammar.c"
    #####: 1485:    break;
        -: 1486:
        2: 1487:  case 7:
        -: 1488:#line 156 "re_grammar.y"
        -: 1489:      {
        -: 1490:        (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT);
        -: 1491:
        -: 1492:        destroy_node_if((yyval.re_node) == NULL, (yyvsp[0].re_node));
        -: 1493:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1494:
        -: 1495:        yr_re_node_append_child((yyval.re_node), (yyvsp[0].re_node));
        -: 1496:      }
        -: 1497:#line 1498 "re_grammar.c"
        2: 1498:    break;
        -: 1499:
        4: 1500:  case 8:
        -: 1501:#line 165 "re_grammar.y"
        -: 1502:      {
        -: 1503:        yr_re_node_append_child((yyvsp[-1].re_node), (yyvsp[0].re_node));
        -: 1504:        (yyval.re_node) = (yyvsp[-1].re_node);
        -: 1505:      }
        -: 1506:#line 1507 "re_grammar.c"
        4: 1507:    break;
        -: 1508:
    #####: 1509:  case 9:
        -: 1510:#line 173 "re_grammar.y"
        -: 1511:      {
        -: 1512:        RE_AST* re_ast;
        -: 1513:
        -: 1514:        mark_as_not_fast_regexp();
        -: 1515:
        -: 1516:        re_ast = yyget_extra(yyscanner);
        -: 1517:        re_ast->flags |= RE_FLAGS_GREEDY;
        -: 1518:
        -: 1519:        (yyval.re_node) = yr_re_node_create(RE_NODE_STAR);
        -: 1520:
        -: 1521:        destroy_node_if((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        -: 1522:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1523:
        -: 1524:        yr_re_node_append_child((yyval.re_node), (yyvsp[-1].re_node));
        -: 1525:      }
        -: 1526:#line 1527 "re_grammar.c"
    #####: 1527:    break;
        -: 1528:
    #####: 1529:  case 10:
        -: 1530:#line 189 "re_grammar.y"
        -: 1531:      {
        -: 1532:        RE_AST* re_ast;
        -: 1533:
        -: 1534:        mark_as_not_fast_regexp();
        -: 1535:
        -: 1536:        re_ast = yyget_extra(yyscanner);
        -: 1537:        re_ast->flags |= RE_FLAGS_UNGREEDY;
        -: 1538:
        -: 1539:        (yyval.re_node) = yr_re_node_create(RE_NODE_STAR);
        -: 1540:
        -: 1541:        destroy_node_if((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        -: 1542:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1543:
        -: 1544:        yr_re_node_append_child((yyval.re_node), (yyvsp[-2].re_node));
        -: 1545:
        -: 1546:        (yyval.re_node)->greedy = false;
        -: 1547:      }
        -: 1548:#line 1549 "re_grammar.c"
    #####: 1549:    break;
        -: 1550:
    #####: 1551:  case 11:
        -: 1552:#line 207 "re_grammar.y"
        -: 1553:      {
        -: 1554:        RE_AST* re_ast;
        -: 1555:
        -: 1556:        mark_as_not_fast_regexp();
        -: 1557:
        -: 1558:        re_ast = yyget_extra(yyscanner);
        -: 1559:        re_ast->flags |= RE_FLAGS_GREEDY;
        -: 1560:
        -: 1561:        (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS);
        -: 1562:
        -: 1563:        destroy_node_if((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        -: 1564:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1565:
        -: 1566:        yr_re_node_append_child((yyval.re_node), (yyvsp[-1].re_node));
        -: 1567:      }
        -: 1568:#line 1569 "re_grammar.c"
    #####: 1569:    break;
        -: 1570:
    #####: 1571:  case 12:
        -: 1572:#line 223 "re_grammar.y"
        -: 1573:      {
        -: 1574:        RE_AST* re_ast;
        -: 1575:
        -: 1576:        mark_as_not_fast_regexp();
        -: 1577:
        -: 1578:        re_ast = yyget_extra(yyscanner);
        -: 1579:        re_ast->flags |= RE_FLAGS_UNGREEDY;
        -: 1580:
        -: 1581:        (yyval.re_node) = yr_re_node_create(RE_NODE_PLUS);
        -: 1582:
        -: 1583:        destroy_node_if((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        -: 1584:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1585:
        -: 1586:        yr_re_node_append_child((yyval.re_node), (yyvsp[-2].re_node));
        -: 1587:        (yyval.re_node)->greedy = false;
        -: 1588:      }
        -: 1589:#line 1590 "re_grammar.c"
    #####: 1590:    break;
        -: 1591:
    #####: 1592:  case 13:
        -: 1593:#line 240 "re_grammar.y"
        -: 1594:      {
        -: 1595:        RE_AST* re_ast = yyget_extra(yyscanner);
        -: 1596:        re_ast->flags |= RE_FLAGS_GREEDY;
        -: 1597:
        -: 1598:        if ((yyvsp[-1].re_node)->type == RE_NODE_ANY)
        -: 1599:        {
        -: 1600:          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY);
        -: 1601:          destroy_node_if(true, (yyvsp[-1].re_node));
        -: 1602:          fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1603:        }
        -: 1604:        else
        -: 1605:        {
        -: 1606:          mark_as_not_fast_regexp();
        -: 1607:          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE);
        -: 1608:          destroy_node_if((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        -: 1609:          fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1610:          yr_re_node_append_child((yyval.re_node), (yyvsp[-1].re_node));
        -: 1611:        }
        -: 1612:
        -: 1613:        (yyval.re_node)->start = 0;
        -: 1614:        (yyval.re_node)->end = 1;
        -: 1615:      }
        -: 1616:#line 1617 "re_grammar.c"
    #####: 1617:    break;
        -: 1618:
    #####: 1619:  case 14:
        -: 1620:#line 263 "re_grammar.y"
        -: 1621:      {
        -: 1622:        RE_AST* re_ast = yyget_extra(yyscanner);
        -: 1623:        re_ast->flags |= RE_FLAGS_UNGREEDY;
        -: 1624:
        -: 1625:        if ((yyvsp[-2].re_node)->type == RE_NODE_ANY)
        -: 1626:        {
        -: 1627:          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY);
        -: 1628:          destroy_node_if(true, (yyvsp[-2].re_node));
        -: 1629:          fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1630:        }
        -: 1631:        else
        -: 1632:        {
        -: 1633:          mark_as_not_fast_regexp();
        -: 1634:          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE);
        -: 1635:          destroy_node_if((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        -: 1636:          fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1637:          yr_re_node_append_child((yyval.re_node), (yyvsp[-2].re_node));
        -: 1638:        }
        -: 1639:
        -: 1640:        (yyval.re_node)->start = 0;
        -: 1641:        (yyval.re_node)->end = 1;
        -: 1642:        (yyval.re_node)->greedy = false;
        -: 1643:      }
        -: 1644:#line 1645 "re_grammar.c"
    #####: 1645:    break;
        -: 1646:
    #####: 1647:  case 15:
        -: 1648:#line 287 "re_grammar.y"
        -: 1649:      {
        -: 1650:        RE_AST* re_ast = yyget_extra(yyscanner);
        -: 1651:        re_ast->flags |= RE_FLAGS_GREEDY;
        -: 1652:
        -: 1653:        if ((yyvsp[-1].re_node)->type == RE_NODE_ANY)
        -: 1654:        {
        -: 1655:          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY);
        -: 1656:          destroy_node_if(true, (yyvsp[-1].re_node));
        -: 1657:          fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1658:        }
        -: 1659:        else
        -: 1660:        {
        -: 1661:          mark_as_not_fast_regexp();
        -: 1662:          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE);
        -: 1663:          destroy_node_if((yyval.re_node) == NULL, (yyvsp[-1].re_node));
        -: 1664:          fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1665:          yr_re_node_append_child((yyval.re_node), (yyvsp[-1].re_node));
        -: 1666:        }
        -: 1667:
        -: 1668:        (yyval.re_node)->start = (yyvsp[0].range) & 0xFFFF;;
        -: 1669:        (yyval.re_node)->end = (yyvsp[0].range) >> 16;;
        -: 1670:      }
        -: 1671:#line 1672 "re_grammar.c"
    #####: 1672:    break;
        -: 1673:
    #####: 1674:  case 16:
        -: 1675:#line 310 "re_grammar.y"
        -: 1676:      {
        -: 1677:        RE_AST* re_ast = yyget_extra(yyscanner);
        -: 1678:        re_ast->flags |= RE_FLAGS_UNGREEDY;
        -: 1679:
        -: 1680:        if ((yyvsp[-2].re_node)->type == RE_NODE_ANY)
        -: 1681:        {
        -: 1682:          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY);
        -: 1683:          destroy_node_if(true, (yyvsp[-2].re_node));
        -: 1684:          fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1685:        }
        -: 1686:        else
        -: 1687:        {
        -: 1688:          mark_as_not_fast_regexp();
        -: 1689:          (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE);
        -: 1690:          destroy_node_if((yyval.re_node) == NULL, (yyvsp[-2].re_node));
        -: 1691:          fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1692:          yr_re_node_append_child((yyval.re_node), (yyvsp[-2].re_node));
        -: 1693:        }
        -: 1694:
        -: 1695:        (yyval.re_node)->start = (yyvsp[-1].range) & 0xFFFF;;
        -: 1696:        (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;
        -: 1697:        (yyval.re_node)->greedy = false;
        -: 1698:      }
        -: 1699:#line 1700 "re_grammar.c"
    #####: 1700:    break;
        -: 1701:
        6: 1702:  case 17:
        -: 1703:#line 334 "re_grammar.y"
        -: 1704:      {
        -: 1705:        (yyval.re_node) = (yyvsp[0].re_node);
        -: 1706:      }
        -: 1707:#line 1708 "re_grammar.c"
        6: 1708:    break;
        -: 1709:
    #####: 1710:  case 18:
        -: 1711:#line 338 "re_grammar.y"
        -: 1712:      {
        -: 1713:        (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY);
        -: 1714:
        -: 1715:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1716:      }
        -: 1717:#line 1718 "re_grammar.c"
    #####: 1718:    break;
        -: 1719:
    #####: 1720:  case 19:
        -: 1721:#line 344 "re_grammar.y"
        -: 1722:      {
        -: 1723:        (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY);
        -: 1724:
        -: 1725:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1726:      }
        -: 1727:#line 1728 "re_grammar.c"
    #####: 1728:    break;
        -: 1729:
    #####: 1730:  case 20:
        -: 1731:#line 350 "re_grammar.y"
        -: 1732:      {
        -: 1733:        (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START);
        -: 1734:
        -: 1735:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1736:      }
        -: 1737:#line 1738 "re_grammar.c"
    #####: 1738:    break;
        -: 1739:
    #####: 1740:  case 21:
        -: 1741:#line 356 "re_grammar.y"
        -: 1742:      {
        -: 1743:        (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END);
        -: 1744:
        -: 1745:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1746:      }
        -: 1747:#line 1748 "re_grammar.c"
    #####: 1748:    break;
        -: 1749:
    #####: 1750:  case 22:
        -: 1751:#line 365 "re_grammar.y"
        -: 1752:      {
        -: 1753:        (yyval.re_node) = (yyvsp[-1].re_node);
        -: 1754:      }
        -: 1755:#line 1756 "re_grammar.c"
    #####: 1756:    break;
        -: 1757:
        1: 1758:  case 23:
        -: 1759:#line 369 "re_grammar.y"
        -: 1760:      {
        -: 1761:        (yyval.re_node) = yr_re_node_create(RE_NODE_ANY);
        -: 1762:
        -: 1763:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1764:
        -: 1765:        (yyval.re_node)->value = 0x00;
        -: 1766:        (yyval.re_node)->mask = 0x00;
        -: 1767:      }
        -: 1768:#line 1769 "re_grammar.c"
        1: 1769:    break;
        -: 1770:
        5: 1771:  case 24:
        -: 1772:#line 378 "re_grammar.y"
        -: 1773:      {
        -: 1774:        (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL);
        -: 1775:
        -: 1776:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1777:
        -: 1778:        (yyval.re_node)->value = (yyvsp[0].integer);
        -: 1779:        (yyval.re_node)->mask = 0xFF;
        -: 1780:      }
        -: 1781:#line 1782 "re_grammar.c"
        5: 1782:    break;
        -: 1783:
    #####: 1784:  case 25:
        -: 1785:#line 387 "re_grammar.y"
        -: 1786:      {
        -: 1787:        (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_CHAR);
        -: 1788:
        -: 1789:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1790:      }
        -: 1791:#line 1792 "re_grammar.c"
    #####: 1792:    break;
        -: 1793:
    #####: 1794:  case 26:
        -: 1795:#line 393 "re_grammar.y"
        -: 1796:      {
        -: 1797:        (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_CHAR);
        -: 1798:
        -: 1799:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1800:      }
        -: 1801:#line 1802 "re_grammar.c"
    #####: 1802:    break;
        -: 1803:
    #####: 1804:  case 27:
        -: 1805:#line 399 "re_grammar.y"
        -: 1806:      {
        -: 1807:        (yyval.re_node) = yr_re_node_create(RE_NODE_SPACE);
        -: 1808:
        -: 1809:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1810:      }
        -: 1811:#line 1812 "re_grammar.c"
    #####: 1812:    break;
        -: 1813:
    #####: 1814:  case 28:
        -: 1815:#line 405 "re_grammar.y"
        -: 1816:      {
        -: 1817:         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_SPACE);
        -: 1818:
        -: 1819:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1820:      }
        -: 1821:#line 1822 "re_grammar.c"
    #####: 1822:    break;
        -: 1823:
    #####: 1824:  case 29:
        -: 1825:#line 411 "re_grammar.y"
        -: 1826:      {
        -: 1827:        (yyval.re_node) = yr_re_node_create(RE_NODE_DIGIT);
        -: 1828:
        -: 1829:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1830:      }
        -: 1831:#line 1832 "re_grammar.c"
    #####: 1832:    break;
        -: 1833:
    #####: 1834:  case 30:
        -: 1835:#line 417 "re_grammar.y"
        -: 1836:      {
        -: 1837:        (yyval.re_node) = yr_re_node_create(RE_NODE_NON_DIGIT);
        -: 1838:
        -: 1839:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1840:      }
        -: 1841:#line 1842 "re_grammar.c"
    #####: 1842:    break;
        -: 1843:
    #####: 1844:  case 31:
        -: 1845:#line 423 "re_grammar.y"
        -: 1846:      {
        -: 1847:        (yyval.re_node) = yr_re_node_create(RE_NODE_CLASS);
        -: 1848:
        -: 1849:        fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);
        -: 1850:
        -: 1851:        (yyval.re_node)->re_class = (yyvsp[0].re_class);
        -: 1852:      }
        -: 1853:#line 1854 "re_grammar.c"
    #####: 1854:    break;
        -: 1855:
        -: 1856:
        -: 1857:#line 1858 "re_grammar.c"
        -: 1858:
    #####: 1859:      default: break;
        -: 1860:    }
        -: 1861:  /* User semantic actions sometimes alter yychar, and that requires
        -: 1862:     that yytoken be updated with the new translation.  We take the
        -: 1863:     approach of translating immediately before every use of yytoken.
        -: 1864:     One alternative is translating here after every semantic action,
        -: 1865:     but that translation would be missed if the semantic action invokes
        -: 1866:     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
        -: 1867:     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
        -: 1868:     incorrect destructor might then be invoked immediately.  In the
        -: 1869:     case of YYERROR or YYBACKUP, subsequent parser actions might lead
        -: 1870:     to an incorrect destructor call or verbose syntax error message
        -: 1871:     before the lookahead is translated.  */
        -: 1872:  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
        -: 1873:
       22: 1874:  YYPOPSTACK (yylen);
       22: 1875:  yylen = 0;
        -: 1876:  YY_STACK_PRINT (yyss, yyssp);
        -: 1877:
       22: 1878:  *++yyvsp = yyval;
        -: 1879:
        -: 1880:  /* Now 'shift' the result of the reduction.  Determine what state
        -: 1881:     that goes to, based on the state we popped back to and the rule
        -: 1882:     number reduced by.  */
        -: 1883:  {
       22: 1884:    const int yylhs = yyr1[yyn] - YYNTOKENS;
       22: 1885:    const int yyi = yypgoto[yylhs] + *yyssp;
       18: 1886:    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
        4: 1887:               ? yytable[yyi]
       40: 1888:               : yydefgoto[yylhs]);
        -: 1889:  }
        -: 1890:
       22: 1891:  goto yynewstate;
        -: 1892:
        -: 1893:
        -: 1894:/*--------------------------------------.
        -: 1895:| yyerrlab -- here on detecting error.  |
        -: 1896:`--------------------------------------*/
    #####: 1897:yyerrlab:
        -: 1898:  /* Make sure we have latest lookahead translation.  See comments at
        -: 1899:     user semantic actions for why this is necessary.  */
    #####: 1900:  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
        -: 1901:
        -: 1902:  /* If not already recovering from an error, report this error.  */
    #####: 1903:  if (!yyerrstatus)
        -: 1904:    {
    #####: 1905:      ++yynerrs;
        -: 1906:#if ! YYERROR_VERBOSE
        -: 1907:      yyerror (yyscanner, lex_env, YY_("syntax error"));
        -: 1908:#else
        -: 1909:# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
        -: 1910:                                        yyssp, yytoken)
        -: 1911:      {
    #####: 1912:        char const *yymsgp = YY_("syntax error");
        -: 1913:        int yysyntax_error_status;
    #####: 1914:        yysyntax_error_status = YYSYNTAX_ERROR;
    #####: 1915:        if (yysyntax_error_status == 0)
    #####: 1916:          yymsgp = yymsg;
    #####: 1917:        else if (yysyntax_error_status == 1)
        -: 1918:          {
    #####: 1919:            if (yymsg != yymsgbuf)
    #####: 1920:              YYSTACK_FREE (yymsg);
    #####: 1921:            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
    #####: 1922:            if (!yymsg)
        -: 1923:              {
    #####: 1924:                yymsg = yymsgbuf;
    #####: 1925:                yymsg_alloc = sizeof yymsgbuf;
    #####: 1926:                yysyntax_error_status = 2;
        -: 1927:              }
        -: 1928:            else
        -: 1929:              {
    #####: 1930:                yysyntax_error_status = YYSYNTAX_ERROR;
    #####: 1931:                yymsgp = yymsg;
        -: 1932:              }
        -: 1933:          }
    #####: 1934:        yyerror (yyscanner, lex_env, yymsgp);
    #####: 1935:        if (yysyntax_error_status == 2)
    #####: 1936:          goto yyexhaustedlab;
        -: 1937:      }
        -: 1938:# undef YYSYNTAX_ERROR
        -: 1939:#endif
        -: 1940:    }
        -: 1941:
        -: 1942:
        -: 1943:
    #####: 1944:  if (yyerrstatus == 3)
        -: 1945:    {
        -: 1946:      /* If just tried and failed to reuse lookahead token after an
        -: 1947:         error, discard it.  */
        -: 1948:
    #####: 1949:      if (yychar <= YYEOF)
        -: 1950:        {
        -: 1951:          /* Return failure if at end of input.  */
    #####: 1952:          if (yychar == YYEOF)
    #####: 1953:            YYABORT;
        -: 1954:        }
        -: 1955:      else
        -: 1956:        {
    #####: 1957:          yydestruct ("Error: discarding",
        -: 1958:                      yytoken, &yylval, yyscanner, lex_env);
    #####: 1959:          yychar = YYEMPTY;
        -: 1960:        }
        -: 1961:    }
        -: 1962:
        -: 1963:  /* Else will try to reuse lookahead token after shifting the error
        -: 1964:     token.  */
    #####: 1965:  goto yyerrlab1;
        -: 1966:
        -: 1967:
        -: 1968:/*---------------------------------------------------.
        -: 1969:| yyerrorlab -- error raised explicitly by YYERROR.  |
        -: 1970:`---------------------------------------------------*/
        -: 1971:yyerrorlab:
        -: 1972:  /* Pacify compilers when the user code never invokes YYERROR and the
        -: 1973:     label yyerrorlab therefore never appears in user code.  */
        -: 1974:  if (0)
        -: 1975:    YYERROR;
        -: 1976:
        -: 1977:  /* Do not reclaim the symbols of the rule whose action triggered
        -: 1978:     this YYERROR.  */
        -: 1979:  YYPOPSTACK (yylen);
        -: 1980:  yylen = 0;
        -: 1981:  YY_STACK_PRINT (yyss, yyssp);
        -: 1982:  yystate = *yyssp;
        -: 1983:  goto yyerrlab1;
        -: 1984:
        -: 1985:
        -: 1986:/*-------------------------------------------------------------.
        -: 1987:| yyerrlab1 -- common code for both syntax error and YYERROR.  |
        -: 1988:`-------------------------------------------------------------*/
    #####: 1989:yyerrlab1:
    #####: 1990:  yyerrstatus = 3;      /* Each real token shifted decrements this.  */
        -: 1991:
        -: 1992:  for (;;)
        -: 1993:    {
    #####: 1994:      yyn = yypact[yystate];
    #####: 1995:      if (!yypact_value_is_default (yyn))
        -: 1996:        {
    #####: 1997:          yyn += YYTERROR;
    #####: 1998:          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
        -: 1999:            {
    #####: 2000:              yyn = yytable[yyn];
    #####: 2001:              if (0 < yyn)
    #####: 2002:                break;
        -: 2003:            }
        -: 2004:        }
        -: 2005:
        -: 2006:      /* Pop the current state because it cannot handle the error token.  */
    #####: 2007:      if (yyssp == yyss)
    #####: 2008:        YYABORT;
        -: 2009:
        -: 2010:
    #####: 2011:      yydestruct ("Error: popping",
    #####: 2012:                  yystos[yystate], yyvsp, yyscanner, lex_env);
    #####: 2013:      YYPOPSTACK (1);
    #####: 2014:      yystate = *yyssp;
        -: 2015:      YY_STACK_PRINT (yyss, yyssp);
        -: 2016:    }
        -: 2017:
        -: 2018:  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
    #####: 2019:  *++yyvsp = yylval;
        -: 2020:  YY_IGNORE_MAYBE_UNINITIALIZED_END
        -: 2021:
        -: 2022:
        -: 2023:  /* Shift the error token.  */
        -: 2024:  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
        -: 2025:
    #####: 2026:  yystate = yyn;
    #####: 2027:  goto yynewstate;
        -: 2028:
        -: 2029:
        -: 2030:/*-------------------------------------.
        -: 2031:| yyacceptlab -- YYACCEPT comes here.  |
        -: 2032:`-------------------------------------*/
        2: 2033:yyacceptlab:
        2: 2034:  yyresult = 0;
        2: 2035:  goto yyreturn;
        -: 2036:
        -: 2037:
        -: 2038:/*-----------------------------------.
        -: 2039:| yyabortlab -- YYABORT comes here.  |
        -: 2040:`-----------------------------------*/
    #####: 2041:yyabortlab:
    #####: 2042:  yyresult = 1;
    #####: 2043:  goto yyreturn;
        -: 2044:
        -: 2045:
        -: 2046:#if !defined yyoverflow || YYERROR_VERBOSE
        -: 2047:/*-------------------------------------------------.
        -: 2048:| yyexhaustedlab -- memory exhaustion comes here.  |
        -: 2049:`-------------------------------------------------*/
    #####: 2050:yyexhaustedlab:
    #####: 2051:  yyerror (yyscanner, lex_env, YY_("memory exhausted"));
    #####: 2052:  yyresult = 2;
        -: 2053:  /* Fall through.  */
        -: 2054:#endif
        -: 2055:
        -: 2056:
        -: 2057:/*-----------------------------------------------------.
        -: 2058:| yyreturn -- parsing is finished, return the result.  |
        -: 2059:`-----------------------------------------------------*/
        2: 2060:yyreturn:
        2: 2061:  if (yychar != YYEMPTY)
        -: 2062:    {
        -: 2063:      /* Make sure we have latest lookahead translation.  See comments at
        -: 2064:         user semantic actions for why this is necessary.  */
    #####: 2065:      yytoken = YYTRANSLATE (yychar);
    #####: 2066:      yydestruct ("Cleanup: discarding lookahead",
        -: 2067:                  yytoken, &yylval, yyscanner, lex_env);
        -: 2068:    }
        -: 2069:  /* Do not reclaim the symbols of the rule whose action triggered
        -: 2070:     this YYABORT or YYACCEPT.  */
        2: 2071:  YYPOPSTACK (yylen);
        -: 2072:  YY_STACK_PRINT (yyss, yyssp);
        6: 2073:  while (yyssp != yyss)
        -: 2074:    {
        4: 2075:      yydestruct ("Cleanup: popping",
        4: 2076:                  yystos[+*yyssp], yyvsp, yyscanner, lex_env);
        4: 2077:      YYPOPSTACK (1);
        -: 2078:    }
        -: 2079:#ifndef yyoverflow
        2: 2080:  if (yyss != yyssa)
    #####: 2081:    YYSTACK_FREE (yyss);
        -: 2082:#endif
        -: 2083:#if YYERROR_VERBOSE
        2: 2084:  if (yymsg != yymsgbuf)
    #####: 2085:    YYSTACK_FREE (yymsg);
        -: 2086:#endif
        2: 2087:  return yyresult;
        -: 2088:}
        -: 2089:#line 431 "re_grammar.y"
        -: 2090:
