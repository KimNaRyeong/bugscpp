        -:    0:Source:modules/hash/hash.c
        -:    0:Graph:/home/workspace/libyara/modules/hash/hash.gcno
        -:    0:Data:/home/workspace/libyara/modules/hash/hash.gcda
        -:    0:Runs:10
        -:    1:/*
        -:    2:Copyright (c) 2014. The YARA Authors. All Rights Reserved.
        -:    3:
        -:    4:Redistribution and use in source and binary forms, with or without modification,
        -:    5:are permitted provided that the following conditions are met:
        -:    6:
        -:    7:1. Redistributions of source code must retain the above copyright notice, this
        -:    8:list of conditions and the following disclaimer.
        -:    9:
        -:   10:2. Redistributions in binary form must reproduce the above copyright notice,
        -:   11:this list of conditions and the following disclaimer in the documentation and/or
        -:   12:other materials provided with the distribution.
        -:   13:
        -:   14:3. Neither the name of the copyright holder nor the names of its contributors
        -:   15:may be used to endorse or promote products derived from this software without
        -:   16:specific prior written permission.
        -:   17:
        -:   18:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:   19:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   20:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   21:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:   22:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   23:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   24:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:   25:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   26:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   27:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   28:*/
        -:   29:
        -:   30:#include "../crypto.h"
        -:   31:
        -:   32:#include <yara/mem.h>
        -:   33:#include <yara/modules.h>
        -:   34:
        -:   35:#define MODULE_NAME hash
        -:   36:
        -:   37:
        -:   38:typedef struct _CACHE_KEY
        -:   39:{
        -:   40:  int64_t offset;
        -:   41:  int64_t length;
        -:   42:
        -:   43:} CACHE_KEY;
        -:   44:
        -:   45:
        -:   46:const uint32_t crc32_tab[] = {
        -:   47:	0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,
        -:   48:	0xe963a535, 0x9e6495a3,	0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
        -:   49:	0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,
        -:   50:	0xf3b97148, 0x84be41de,	0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
        -:   51:	0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec,	0x14015c4f, 0x63066cd9,
        -:   52:	0xfa0f3d63, 0x8d080df5,	0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
        -:   53:	0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,	0x35b5a8fa, 0x42b2986c,
        -:   54:	0xdbbbc9d6, 0xacbcf940,	0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
        -:   55:	0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,
        -:   56:	0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
        -:   57:	0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,	0x76dc4190, 0x01db7106,
        -:   58:	0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
        -:   59:	0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,
        -:   60:	0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
        -:   61:	0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
        -:   62:	0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
        -:   63:	0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,
        -:   64:	0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
        -:   65:	0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,
        -:   66:	0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
        -:   67:	0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,
        -:   68:	0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
        -:   69:	0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,
        -:   70:	0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
        -:   71:	0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
        -:   72:	0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
        -:   73:	0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,
        -:   74:	0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
        -:   75:	0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,
        -:   76:	0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
        -:   77:	0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,
        -:   78:	0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
        -:   79:	0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,
        -:   80:	0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
        -:   81:	0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
        -:   82:	0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
        -:   83:	0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,
        -:   84:	0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
        -:   85:	0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,
        -:   86:	0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
        -:   87:	0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
        -:   88:	0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
        -:   89:	0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
        -:   90:};
        -:   91:
        -:   92:
    #####:   93:static void digest_to_ascii(
        -:   94:    unsigned char* digest,
        -:   95:    char* digest_ascii,
        -:   96:    size_t digest_length)
        -:   97:{
        -:   98:  size_t i;
        -:   99:
    #####:  100:  for (i = 0; i < digest_length; i++)
    #####:  101:    sprintf(digest_ascii + (i * 2), "%02x", digest[i]);
        -:  102:
    #####:  103:  digest_ascii[digest_length * 2] = '\0';
    #####:  104:}
        -:  105:
        -:  106:
    #####:  107:static char* get_from_cache(
        -:  108:    YR_OBJECT* module_object,
        -:  109:    const char* ns,
        -:  110:    int64_t offset,
        -:  111:    int64_t length)
        -:  112:{
        -:  113:  CACHE_KEY key;
    #####:  114:  YR_HASH_TABLE* hash_table = (YR_HASH_TABLE*) module_object->data;
        -:  115:
    #####:  116:  key.offset = offset;
    #####:  117:  key.length = length;
        -:  118:
    #####:  119:  return (char*) yr_hash_table_lookup_raw_key(
        -:  120:      hash_table,
        -:  121:      &key,
        -:  122:      sizeof(key),
        -:  123:      ns);
        -:  124:}
        -:  125:
        -:  126:
    #####:  127:static int add_to_cache(
        -:  128:    YR_OBJECT* module_object,
        -:  129:    const char* ns,
        -:  130:    int64_t offset,
        -:  131:    int64_t length,
        -:  132:    const char* digest)
        -:  133:{
        -:  134:  CACHE_KEY key;
    #####:  135:  YR_HASH_TABLE* hash_table = (YR_HASH_TABLE*) module_object->data;
        -:  136:
    #####:  137:  char* copy = yr_strdup(digest);
        -:  138:
    #####:  139:  key.offset = offset;
    #####:  140:  key.length = length;
        -:  141:
    #####:  142:  if (copy == NULL)
    #####:  143:    return ERROR_INSUFFICIENT_MEMORY;
        -:  144:
    #####:  145:  return yr_hash_table_add_raw_key(
        -:  146:      hash_table,
        -:  147:      &key,
        -:  148:      sizeof(key),
        -:  149:      ns,
        -:  150:      (void*) copy);
        -:  151:}
        -:  152:
        -:  153:
    #####:  154:define_function(string_md5)
        -:  155:{
        -:  156:  unsigned char digest[YR_MD5_LEN];
        -:  157:  char digest_ascii[YR_MD5_LEN * 2 + 1];
        -:  158:
        -:  159:  yr_md5_ctx md5_context;
    #####:  160:  SIZED_STRING* s = sized_string_argument(1);
        -:  161:
    #####:  162:  yr_md5_init(&md5_context);
    #####:  163:  yr_md5_update(&md5_context, s->c_string, s->length);
    #####:  164:  yr_md5_final(digest, &md5_context);
        -:  165:
    #####:  166:  digest_to_ascii(digest, digest_ascii, YR_MD5_LEN);
        -:  167:
    #####:  168:  return_string(digest_ascii);
        -:  169:}
        -:  170:
        -:  171:
    #####:  172:define_function(string_sha256)
        -:  173:{
        -:  174:  unsigned char digest[YR_SHA256_LEN];
        -:  175:  char digest_ascii[YR_SHA256_LEN * 2 + 1];
        -:  176:
        -:  177:  yr_sha256_ctx sha256_context;
    #####:  178:  SIZED_STRING* s = sized_string_argument(1);
        -:  179:
    #####:  180:  yr_sha256_init(&sha256_context);
    #####:  181:  yr_sha256_update(&sha256_context, s->c_string, s->length);
    #####:  182:  yr_sha256_final(digest, &sha256_context);
        -:  183:
    #####:  184:  digest_to_ascii(digest, digest_ascii, YR_SHA256_LEN);
        -:  185:
    #####:  186:  return_string(digest_ascii);
        -:  187:}
        -:  188:
        -:  189:
    #####:  190:define_function(string_sha1)
        -:  191:{
        -:  192:  unsigned char digest[YR_SHA1_LEN];
        -:  193:  char digest_ascii[YR_SHA1_LEN * 2 + 1];
        -:  194:
        -:  195:  yr_sha1_ctx sha_context;
    #####:  196:  SIZED_STRING* s = sized_string_argument(1);
        -:  197:
    #####:  198:  yr_sha1_init(&sha_context);
    #####:  199:  yr_sha1_update(&sha_context, s->c_string, s->length);
    #####:  200:  yr_sha1_final(digest, &sha_context);
        -:  201:
    #####:  202:  digest_to_ascii(digest, digest_ascii, YR_SHA1_LEN);
        -:  203:
    #####:  204:  return_string(digest_ascii);
        -:  205:}
        -:  206:
        -:  207:
    #####:  208:define_function(string_checksum32)
        -:  209:{
        -:  210:  size_t i;
        -:  211:
    #####:  212:  SIZED_STRING* s = sized_string_argument(1);
    #####:  213:  uint32_t checksum = 0;
        -:  214:
    #####:  215:  for (i = 0; i < s->length; i++)
    #####:  216:    checksum += (uint8_t)(s->c_string[i]);
        -:  217:
    #####:  218:  return_integer(checksum);
        -:  219:}
        -:  220:
        -:  221:
    #####:  222:define_function(data_md5)
        -:  223:{
        -:  224:  yr_md5_ctx md5_context;
        -:  225:
        -:  226:  unsigned char digest[YR_MD5_LEN];
        -:  227:  char digest_ascii[YR_MD5_LEN * 2 + 1];
        -:  228:  char* cached_ascii_digest;
        -:  229:
    #####:  230:  bool past_first_block = false;
        -:  231:
    #####:  232:  YR_SCAN_CONTEXT* context = scan_context();
    #####:  233:  YR_MEMORY_BLOCK* block = first_memory_block(context);
    #####:  234:  YR_MEMORY_BLOCK_ITERATOR* iterator = context->iterator;
        -:  235:
    #####:  236:  int64_t arg_offset = integer_argument(1);   // offset where to start
    #####:  237:  int64_t arg_length = integer_argument(2);   // length of bytes we want hash on
        -:  238:
    #####:  239:  int64_t offset = arg_offset;
    #####:  240:  int64_t length = arg_length;
        -:  241:
    #####:  242:  yr_md5_init(&md5_context);
        -:  243:
    #####:  244:  if (offset < 0 || length < 0 || offset < block->base)
    #####:  245:    return_string(YR_UNDEFINED);
        -:  246:
    #####:  247:  cached_ascii_digest = get_from_cache(
        -:  248:      module(), "md5", arg_offset, arg_length);
        -:  249:
    #####:  250:  if (cached_ascii_digest != NULL)
    #####:  251:    return_string(cached_ascii_digest);
        -:  252:
    #####:  253:  foreach_memory_block(iterator, block)
        -:  254:  {
        -:  255:    // if desired block within current block
        -:  256:
    #####:  257:    if (offset >= block->base &&
    #####:  258:        offset < block->base + block->size)
    #####:  259:    {
    #####:  260:      const uint8_t* block_data = block->fetch_data(block);
        -:  261:
    #####:  262:      if (block_data != NULL)
        -:  263:      {
    #####:  264:        size_t data_offset = (size_t) (offset - block->base);
    #####:  265:        size_t data_len = (size_t) yr_min(
        -:  266:          length, (size_t) (block->size - data_offset));
        -:  267:
    #####:  268:        offset += data_len;
    #####:  269:        length -= data_len;
        -:  270:
    #####:  271:        yr_md5_update(&md5_context, block_data + data_offset, data_len);
        -:  272:      }
        -:  273:
    #####:  274:      past_first_block = true;
        -:  275:    }
    #####:  276:    else if (past_first_block)
        -:  277:    {
        -:  278:      // If offset is not within current block and we already
        -:  279:      // past the first block then the we are trying to compute
        -:  280:      // the checksum over a range of non contiguous blocks. As
        -:  281:      // range contains gaps of undefined data the checksum is
        -:  282:      // undefined.
        -:  283:
    #####:  284:      return_string(YR_UNDEFINED);
        -:  285:    }
        -:  286:
    #####:  287:    if (block->base + block->size > offset + length)
    #####:  288:      break;
        -:  289:  }
        -:  290:
    #####:  291:  if (!past_first_block)
    #####:  292:    return_string(YR_UNDEFINED);
        -:  293:
    #####:  294:  yr_md5_final(digest, &md5_context);
        -:  295:
    #####:  296:  digest_to_ascii(digest, digest_ascii, YR_MD5_LEN);
        -:  297:
    #####:  298:  FAIL_ON_ERROR(
        -:  299:      add_to_cache(module(), "md5", arg_offset, arg_length, digest_ascii));
        -:  300:
    #####:  301:  return_string(digest_ascii);
        -:  302:}
        -:  303:
        -:  304:
    #####:  305:define_function(data_sha1)
        -:  306:{
        -:  307:  yr_sha1_ctx sha_context;
        -:  308:
        -:  309:  unsigned char digest[YR_SHA1_LEN];
        -:  310:  char digest_ascii[YR_SHA1_LEN * 2 + 1];
        -:  311:  char* cached_ascii_digest;
        -:  312:
    #####:  313:  int past_first_block = false;
        -:  314:
    #####:  315:  int64_t arg_offset = integer_argument(1);   // offset where to start
    #####:  316:  int64_t arg_length = integer_argument(2);   // length of bytes we want hash on
        -:  317:
    #####:  318:  int64_t offset = arg_offset;
    #####:  319:  int64_t length = arg_length;
        -:  320:
    #####:  321:  YR_SCAN_CONTEXT* context = scan_context();
    #####:  322:  YR_MEMORY_BLOCK* block = first_memory_block(context);
    #####:  323:  YR_MEMORY_BLOCK_ITERATOR* iterator = context->iterator;
        -:  324:
    #####:  325:  yr_sha1_init(&sha_context);
        -:  326:
    #####:  327:  if (offset < 0 || length < 0 || offset < block->base)
    #####:  328:    return_string(YR_UNDEFINED);
        -:  329:
    #####:  330:  cached_ascii_digest = get_from_cache(
        -:  331:      module(), "sha1", arg_offset, arg_length);
        -:  332:
    #####:  333:  if (cached_ascii_digest != NULL)
    #####:  334:    return_string(cached_ascii_digest);
        -:  335:
    #####:  336:  foreach_memory_block(iterator, block)
        -:  337:  {
        -:  338:    // if desired block within current block
    #####:  339:    if (offset >= block->base &&
    #####:  340:        offset < block->base + block->size)
    #####:  341:    {
    #####:  342:      const uint8_t* block_data = block->fetch_data(block);
        -:  343:
    #####:  344:      if (block_data != NULL)
        -:  345:      {
    #####:  346:        size_t data_offset = (size_t) (offset - block->base);
    #####:  347:        size_t data_len = (size_t) yr_min(
        -:  348:          length, (size_t) block->size - data_offset);
        -:  349:
    #####:  350:        offset += data_len;
    #####:  351:        length -= data_len;
        -:  352:
    #####:  353:        yr_sha1_update(&sha_context, block_data + data_offset, data_len);
        -:  354:      }
        -:  355:
    #####:  356:      past_first_block = true;
        -:  357:    }
    #####:  358:    else if (past_first_block)
        -:  359:    {
        -:  360:      // If offset is not within current block and we already
        -:  361:      // past the first block then the we are trying to compute
        -:  362:      // the checksum over a range of non contiguous blocks. As
        -:  363:      // range contains gaps of undefined data the checksum is
        -:  364:      // undefined.
        -:  365:
    #####:  366:      return_string(YR_UNDEFINED);
        -:  367:    }
        -:  368:
    #####:  369:    if (block->base + block->size > offset + length)
    #####:  370:      break;
        -:  371:  }
        -:  372:
    #####:  373:  if (!past_first_block)
    #####:  374:    return_string(YR_UNDEFINED);
        -:  375:
    #####:  376:  yr_sha1_final(digest, &sha_context);
        -:  377:
    #####:  378:  digest_to_ascii(digest, digest_ascii, YR_SHA1_LEN);
        -:  379:
    #####:  380:  FAIL_ON_ERROR(
        -:  381:      add_to_cache(module(), "sha1", arg_offset, arg_length, digest_ascii));
        -:  382:
    #####:  383:  return_string(digest_ascii);
        -:  384:}
        -:  385:
        -:  386:
    #####:  387:define_function(data_sha256)
        -:  388:{
        -:  389:  yr_sha256_ctx sha256_context;
        -:  390:
        -:  391:  unsigned char digest[YR_SHA256_LEN];
        -:  392:  char digest_ascii[YR_SHA256_LEN * 2 + 1];
        -:  393:  char* cached_ascii_digest;
        -:  394:
    #####:  395:  int past_first_block = false;
        -:  396:
    #####:  397:  int64_t arg_offset = integer_argument(1);   // offset where to start
    #####:  398:  int64_t arg_length = integer_argument(2);   // length of bytes we want hash on
        -:  399:
    #####:  400:  int64_t offset = arg_offset;
    #####:  401:  int64_t length = arg_length;
        -:  402:
    #####:  403:  YR_SCAN_CONTEXT* context = scan_context();
    #####:  404:  YR_MEMORY_BLOCK* block = first_memory_block(context);
    #####:  405:  YR_MEMORY_BLOCK_ITERATOR* iterator = context->iterator;
        -:  406:
    #####:  407:  yr_sha256_init(&sha256_context);
        -:  408:
    #####:  409:  if (offset < 0 || length < 0 || offset < block->base)
    #####:  410:    return_string(YR_UNDEFINED);
        -:  411:
    #####:  412:  cached_ascii_digest = get_from_cache(
        -:  413:      module(), "sha256", arg_offset, arg_length);
        -:  414:
    #####:  415:  if (cached_ascii_digest != NULL)
    #####:  416:    return_string(cached_ascii_digest);
        -:  417:
    #####:  418:  foreach_memory_block(iterator, block)
        -:  419:  {
        -:  420:    // if desired block within current block
    #####:  421:    if (offset >= block->base &&
    #####:  422:        offset < block->base + block->size)
    #####:  423:    {
    #####:  424:      const uint8_t* block_data = block->fetch_data(block);
        -:  425:
    #####:  426:      if (block_data != NULL)
        -:  427:      {
    #####:  428:        size_t data_offset = (size_t) (offset - block->base);
    #####:  429:        size_t data_len = (size_t) yr_min(length, block->size - data_offset);
        -:  430:
    #####:  431:        offset += data_len;
    #####:  432:        length -= data_len;
        -:  433:
    #####:  434:        yr_sha256_update(&sha256_context, block_data + data_offset, data_len);
        -:  435:      }
        -:  436:
    #####:  437:      past_first_block = true;
        -:  438:    }
    #####:  439:    else if (past_first_block)
        -:  440:    {
        -:  441:      // If offset is not within current block and we already
        -:  442:      // past the first block then the we are trying to compute
        -:  443:      // the checksum over a range of non contiguous blocks. As
        -:  444:      // range contains gaps of undefined data the checksum is
        -:  445:      // undefined.
        -:  446:
    #####:  447:      return_string(YR_UNDEFINED);
        -:  448:    }
        -:  449:
    #####:  450:    if (block->base + block->size > offset + length)
    #####:  451:      break;
        -:  452:  }
        -:  453:
    #####:  454:  if (!past_first_block)
    #####:  455:    return_string(YR_UNDEFINED);
        -:  456:
    #####:  457:  yr_sha256_final(digest, &sha256_context);
        -:  458:
    #####:  459:  digest_to_ascii(digest, digest_ascii, YR_SHA256_LEN);
        -:  460:
    #####:  461:  FAIL_ON_ERROR(
        -:  462:      add_to_cache(module(), "sha256", arg_offset, arg_length, digest_ascii));
        -:  463:
    #####:  464:  return_string(digest_ascii);
        -:  465:}
        -:  466:
        -:  467:
    #####:  468:define_function(data_checksum32)
        -:  469:{
    #####:  470:  int64_t offset = integer_argument(1);   // offset where to start
    #####:  471:  int64_t length = integer_argument(2);   // length of bytes we want hash on
        -:  472:
    #####:  473:  YR_SCAN_CONTEXT* context = scan_context();
    #####:  474:  YR_MEMORY_BLOCK* block = first_memory_block(context);
    #####:  475:  YR_MEMORY_BLOCK_ITERATOR* iterator = context->iterator;
        -:  476:
    #####:  477:  uint32_t checksum = 0;
    #####:  478:  int past_first_block = false;
        -:  479:
    #####:  480:  if (offset < 0 || length < 0 || offset < block->base)
    #####:  481:    return_integer(YR_UNDEFINED);
        -:  482:
    #####:  483:  foreach_memory_block(iterator, block)
        -:  484:  {
    #####:  485:    if (offset >= block->base &&
    #####:  486:        offset < block->base + block->size)
    #####:  487:    {
    #####:  488:      const uint8_t* block_data = block->fetch_data(block);
        -:  489:
    #####:  490:      if (block_data != NULL)
        -:  491:      {
        -:  492:        size_t i;
        -:  493:
    #####:  494:        size_t data_offset = (size_t) (offset - block->base);
    #####:  495:        size_t data_len = (size_t) yr_min(length, block->size - data_offset);
        -:  496:
    #####:  497:        offset += data_len;
    #####:  498:        length -= data_len;
        -:  499:
    #####:  500:        for (i = 0; i < data_len; i++)
    #####:  501:          checksum += *(block_data + data_offset + i);
        -:  502:      }
        -:  503:
    #####:  504:      past_first_block = true;
        -:  505:    }
    #####:  506:    else if (past_first_block)
        -:  507:    {
        -:  508:      // If offset is not within current block and we already
        -:  509:      // past the first block then the we are trying to compute
        -:  510:      // the checksum over a range of non contiguous blocks. As
        -:  511:      // range contains gaps of undefined data the checksum is
        -:  512:      // undefined.
        -:  513:
    #####:  514:      return_integer(YR_UNDEFINED);
        -:  515:    }
        -:  516:
    #####:  517:    if (block->base + block->size > offset + length)
    #####:  518:      break;
        -:  519:  }
        -:  520:
    #####:  521:  if (!past_first_block)
    #####:  522:    return_integer(YR_UNDEFINED);
        -:  523:
    #####:  524:  return_integer(checksum);
        -:  525:}
        -:  526:
        -:  527:
    #####:  528:define_function(string_crc32)
        -:  529:{
        -:  530:  size_t i;
    #####:  531:  SIZED_STRING* s = sized_string_argument(1);
    #####:  532:  uint32_t checksum = 0xFFFFFFFF;
        -:  533:
    #####:  534:  for (i = 0; i < s->length; i++)
    #####:  535:    checksum = crc32_tab[(checksum ^ (uint8_t)s->c_string[i]) & 0xFF] ^ (checksum >> 8);
        -:  536:
    #####:  537:  return_integer(checksum ^ 0xFFFFFFFF);
        -:  538:}
        -:  539:
        -:  540:
    #####:  541:define_function(data_crc32)
        -:  542:{
    #####:  543:  int64_t offset = integer_argument(1);   // offset where to start
    #####:  544:  int64_t length = integer_argument(2);   // length of bytes we want hash on
    #####:  545:  uint32_t checksum = 0xFFFFFFFF;
        -:  546:
    #####:  547:  YR_SCAN_CONTEXT* context = scan_context();
    #####:  548:  YR_MEMORY_BLOCK* block = first_memory_block(context);
    #####:  549:  YR_MEMORY_BLOCK_ITERATOR* iterator = context->iterator;
        -:  550:
    #####:  551:  int past_first_block = false;
        -:  552:
    #####:  553:  if (offset < 0 || length < 0 || offset < block->base)
    #####:  554:    return_integer(YR_UNDEFINED);
        -:  555:
    #####:  556:  foreach_memory_block(iterator, block)
        -:  557:  {
    #####:  558:    if (offset >= block->base &&
    #####:  559:        offset < block->base + block->size)
    #####:  560:    {
    #####:  561:      const uint8_t* block_data = block->fetch_data(block);
        -:  562:
    #####:  563:      if (block_data != NULL)
        -:  564:      {
        -:  565:        size_t i;
        -:  566:
    #####:  567:        size_t data_offset = (size_t) (offset - block->base);
    #####:  568:        size_t data_len = (size_t) yr_min(length, block->size - data_offset);
        -:  569:
    #####:  570:        offset += data_len;
    #####:  571:        length -= data_len;
        -:  572:
    #####:  573:        for (i = 0; i < data_len; i++)
    #####:  574:          checksum = crc32_tab[(checksum ^ *(block_data + data_offset + i)) & 0xFF] ^ (checksum >> 8);
        -:  575:      }
        -:  576:
    #####:  577:      past_first_block = true;
        -:  578:    }
    #####:  579:    else if (past_first_block)
        -:  580:    {
        -:  581:      // If offset is not within current block and we already
        -:  582:      // past the first block then the we are trying to compute
        -:  583:      // the checksum over a range of non contiguous blocks. As
        -:  584:      // range contains gaps of undefined data the checksum is
        -:  585:      // undefined.
        -:  586:
    #####:  587:      return_integer(YR_UNDEFINED);
        -:  588:    }
        -:  589:
    #####:  590:    if (block->base + block->size > offset + length)
    #####:  591:      break;
        -:  592:  }
        -:  593:
    #####:  594:  if (!past_first_block)
    #####:  595:    return_integer(YR_UNDEFINED);
        -:  596:
    #####:  597:  return_integer(checksum ^ 0xFFFFFFFF);
        -:  598:}
        -:  599:
        -:  600:
        -:  601:
    #####:  602:begin_declarations;
        -:  603:
    #####:  604:  declare_function("md5", "ii", "s", data_md5);
    #####:  605:  declare_function("md5", "s", "s", string_md5);
        -:  606:
    #####:  607:  declare_function("sha1", "ii", "s", data_sha1);
    #####:  608:  declare_function("sha1", "s", "s", string_sha1);
        -:  609:
    #####:  610:  declare_function("sha256", "ii", "s", data_sha256);
    #####:  611:  declare_function("sha256", "s", "s", string_sha256);
        -:  612:
    #####:  613:  declare_function("checksum32", "ii", "i", data_checksum32);
    #####:  614:  declare_function("checksum32", "s", "i", string_checksum32);
        -:  615:
    #####:  616:  declare_function("crc32", "ii", "i", data_crc32);
    #####:  617:  declare_function("crc32", "s", "i", string_crc32);
        -:  618:
    #####:  619:end_declarations;
        -:  620:
        -:  621:
        6:  622:int module_initialize(
        -:  623:    YR_MODULE* module)
        -:  624:{
        6:  625:  return ERROR_SUCCESS;
        -:  626:}
        -:  627:
        -:  628:
        5:  629:int module_finalize(
        -:  630:    YR_MODULE* module)
        -:  631:{
        5:  632:  return ERROR_SUCCESS;
        -:  633:}
        -:  634:
        -:  635:
    #####:  636:int module_load(
        -:  637:    YR_SCAN_CONTEXT* context,
        -:  638:    YR_OBJECT* module_object,
        -:  639:    void* module_data,
        -:  640:    size_t module_data_size)
        -:  641:{
        -:  642:  YR_HASH_TABLE* hash_table;
        -:  643:
    #####:  644:  FAIL_ON_ERROR(yr_hash_table_create(17, &hash_table));
        -:  645:
    #####:  646:  module_object->data = hash_table;
        -:  647:
    #####:  648:  return ERROR_SUCCESS;
        -:  649:}
        -:  650:
        -:  651:
    #####:  652:int module_unload(
        -:  653:    YR_OBJECT* module_object)
        -:  654:{
    #####:  655:  YR_HASH_TABLE* hash_table = (YR_HASH_TABLE*) module_object->data;
        -:  656:
    #####:  657:  if (hash_table != NULL)
    #####:  658:    yr_hash_table_destroy(
        -:  659:        hash_table,
        -:  660:        (YR_HASH_TABLE_FREE_VALUE_FUNC) yr_free);
        -:  661:
    #####:  662:  return ERROR_SUCCESS;
        -:  663:}
