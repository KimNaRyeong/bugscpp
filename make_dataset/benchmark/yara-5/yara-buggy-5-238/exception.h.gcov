        -:    0:Source:exception.h
        -:    0:Graph:/home/workspace/libyara/scanner.gcno
        -:    0:Data:/home/workspace/libyara/scanner.gcda
        -:    0:Runs:7
        -:    1:/*
        -:    2:Copyright (c) 2015. The YARA Authors. All Rights Reserved.
        -:    3:
        -:    4:Redistribution and use in source and binary forms, with or without modification,
        -:    5:are permitted provided that the following conditions are met:
        -:    6:
        -:    7:1. Redistributions of source code must retain the above copyright notice, this
        -:    8:list of conditions and the following disclaimer.
        -:    9:
        -:   10:2. Redistributions in binary form must reproduce the above copyright notice,
        -:   11:this list of conditions and the following disclaimer in the documentation and/or
        -:   12:other materials provided with the distribution.
        -:   13:
        -:   14:3. Neither the name of the copyright holder nor the names of its contributors
        -:   15:may be used to endorse or promote products derived from this software without
        -:   16:specific prior written permission.
        -:   17:
        -:   18:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:   19:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   20:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   21:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:   22:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   23:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   24:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:   25:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   26:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   27:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   28:*/
        -:   29:
        -:   30:#ifndef YR_EXCEPTION_H
        -:   31:#define YR_EXCEPTION_H
        -:   32:
        -:   33:#include <assert.h>
        -:   34:#include <yara/globals.h>
        -:   35:
        -:   36:#if _WIN32 || __CYGWIN__
        -:   37:
        -:   38:#include <windows.h>
        -:   39:
        -:   40:// If compiling with Microsoft's compiler use structered exception handling.
        -:   41:
        -:   42:#ifdef _MSC_VER
        -:   43:
        -:   44:#include <excpt.h>
        -:   45:
        -:   46:static LONG CALLBACK exception_handler(
        -:   47:    PEXCEPTION_POINTERS ExceptionInfo)
        -:   48:{
        -:   49:  switch(ExceptionInfo->ExceptionRecord->ExceptionCode)
        -:   50:  {
        -:   51:    case EXCEPTION_IN_PAGE_ERROR:
        -:   52:    case EXCEPTION_ACCESS_VIOLATION:
        -:   53:      return EXCEPTION_EXECUTE_HANDLER;
        -:   54:  }
        -:   55:
        -:   56:  return EXCEPTION_CONTINUE_SEARCH;
        -:   57:}
        -:   58:
        -:   59:#define YR_TRYCATCH(_do_,_try_clause_,_catch_clause_)           \
        -:   60:  do                                                            \
        -:   61:  {                                                             \
        -:   62:    if (_do_)                                                   \
        -:   63:    {                                                           \
        -:   64:      __try                                                     \
        -:   65:      { _try_clause_ }                                          \
        -:   66:      __except(exception_handler(GetExceptionInformation()))    \
        -:   67:      { _catch_clause_ }                                        \
        -:   68:    }                                                           \
        -:   69:    else                                                        \
        -:   70:    { _try_clause_ }                                            \
        -:   71:  } while(0)
        -:   72:
        -:   73:#else
        -:   74:
        -:   75:// If not compiling with Microsoft's compiler use vectored exception handling.
        -:   76:
        -:   77:#include <setjmp.h>
        -:   78:
        -:   79:static LONG CALLBACK exception_handler(
        -:   80:    PEXCEPTION_POINTERS ExceptionInfo)
        -:   81:{
        -:   82:  jmp_buf* jb_ptr;
        -:   83:
        -:   84:  switch(ExceptionInfo->ExceptionRecord->ExceptionCode)
        -:   85:  {
        -:   86:    case EXCEPTION_IN_PAGE_ERROR:
        -:   87:    case EXCEPTION_ACCESS_VIOLATION:
        -:   88:      jb_ptr = (jmp_buf*) yr_thread_storage_get_value(
        -:   89:          &yr_trycatch_trampoline_tls);
        -:   90:
        -:   91:      if (jb_ptr != NULL)
        -:   92:        longjmp(*jb_ptr, 1);
        -:   93:  }
        -:   94:
        -:   95:  return EXCEPTION_CONTINUE_SEARCH;
        -:   96:}
        -:   97:
        -:   98:#define YR_TRYCATCH(_do_,_try_clause_,_catch_clause_)                   \
        -:   99:  do                                                                    \
        -:  100:  {                                                                     \
        -:  101:    if (_do_)                                                           \
        -:  102:    {                                                                   \
        -:  103:      jmp_buf jb;                                                       \
        -:  104:      /* Store pointer to sigjmp_buf in TLS */                          \
        -:  105:      yr_thread_storage_set_value(                                      \
        -:  106:          &yr_trycatch_trampoline_tls, &jb);                            \
        -:  107:      HANDLE exh = AddVectoredExceptionHandler(1, exception_handler);   \
        -:  108:      if (setjmp(jb) == 0)                                              \
        -:  109:        { _try_clause_ }                                                \
        -:  110:      else                                                              \
        -:  111:        { _catch_clause_ }                                              \
        -:  112:      RemoveVectoredExceptionHandler(exh);                              \
        -:  113:      yr_thread_storage_set_value(                                      \
        -:  114:          &yr_trycatch_trampoline_tls, NULL);                           \
        -:  115:    }                                                                   \
        -:  116:    else                                                                \
        -:  117:    {                                                                   \
        -:  118:      _try_clause_                                                      \
        -:  119:    }                                                                   \
        -:  120:  } while(0)
        -:  121:
        -:  122:#endif
        -:  123:
        -:  124:#else
        -:  125:
        -:  126:#include <setjmp.h>
        -:  127:#include <signal.h>
        -:  128:#include <yara/globals.h>
        -:  129:
    #####:  130:static void exception_handler(int sig) {
    #####:  131:  if (sig == SIGBUS || sig == SIGSEGV)
        -:  132:  {
    #####:  133:    jmp_buf* jb_ptr = (jmp_buf*) yr_thread_storage_get_value(
        -:  134:        &yr_trycatch_trampoline_tls);
        -:  135:
    #####:  136:    if (jb_ptr != NULL)
    #####:  137:      siglongjmp(*jb_ptr, 1);
        -:  138:  }
    #####:  139:}
        -:  140:
        -:  141:typedef struct sigaction sa;
        -:  142:
        -:  143:#define YR_TRYCATCH(_do_,_try_clause_, _catch_clause_)          \
        -:  144:  do                                                            \
        -:  145:  {                                                             \
        -:  146:    if (_do_)                                                   \
        -:  147:    {                                                           \
        -:  148:      struct sigaction old_sigbus_act;                          \
        -:  149:      struct sigaction old_sigsegv_act;                         \
        -:  150:      struct sigaction act;                                     \
        -:  151:      sigjmp_buf jb;                                            \
        -:  152:      /* Store pointer to sigjmp_buf in TLS */                  \
        -:  153:      yr_thread_storage_set_value(                              \
        -:  154:          &yr_trycatch_trampoline_tls, &jb);                    \
        -:  155:      /* Set exception handler for SIGBUS and SIGSEGV*/         \
        -:  156:      act.sa_handler = exception_handler;                       \
        -:  157:      act.sa_flags = 0; /* SA_ONSTACK? */                       \
        -:  158:      sigfillset(&act.sa_mask);                                 \
        -:  159:      sigaction(SIGBUS, &act, &old_sigbus_act);                 \
        -:  160:      sigaction(SIGSEGV, &act, &old_sigsegv_act);               \
        -:  161:      if (sigsetjmp(jb, 1) == 0)                                \
        -:  162:        { _try_clause_ }                                        \
        -:  163:      else                                                      \
        -:  164:        { _catch_clause_ }                                      \
        -:  165:      /* Stop capturing SIGBUS and SIGSEGV */                   \
        -:  166:      sigaction(SIGBUS, &old_sigbus_act, NULL);                 \
        -:  167:      sigaction(SIGSEGV, &old_sigsegv_act, NULL);               \
        -:  168:      yr_thread_storage_set_value(                              \
        -:  169:          &yr_trycatch_trampoline_tls, NULL);                   \
        -:  170:    }                                                           \
        -:  171:    else                                                        \
        -:  172:    {                                                           \
        -:  173:      _try_clause_                                              \
        -:  174:    }                                                           \
        -:  175:  } while (0)
        -:  176:
        -:  177:#endif
        -:  178:
        -:  179:#endif
