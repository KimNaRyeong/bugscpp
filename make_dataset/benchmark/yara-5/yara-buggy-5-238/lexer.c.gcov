        -:    0:Source:lexer.c
        -:    0:Graph:/home/workspace/libyara/lexer.gcno
        -:    0:Data:/home/workspace/libyara/lexer.gcda
        -:    0:Runs:7
        -:    1:#line 2 "lexer.c"
        -:    2:
        -:    3:#line 4 "lexer.c"
        -:    4:
        -:    5:#define  YY_INT_ALIGNED short int
        -:    6:
        -:    7:/* A lexical scanner generated by flex */
        -:    8:
        -:    9:#define FLEX_SCANNER
        -:   10:#define YY_FLEX_MAJOR_VERSION 2
        -:   11:#define YY_FLEX_MINOR_VERSION 6
        -:   12:#define YY_FLEX_SUBMINOR_VERSION 4
        -:   13:#if YY_FLEX_SUBMINOR_VERSION > 0
        -:   14:#define FLEX_BETA
        -:   15:#endif
        -:   16:
        -:   17:#ifdef yy_create_buffer
        -:   18:#define yara_yy_create_buffer_ALREADY_DEFINED
        -:   19:#else
        -:   20:#define yy_create_buffer yara_yy_create_buffer
        -:   21:#endif
        -:   22:
        -:   23:#ifdef yy_delete_buffer
        -:   24:#define yara_yy_delete_buffer_ALREADY_DEFINED
        -:   25:#else
        -:   26:#define yy_delete_buffer yara_yy_delete_buffer
        -:   27:#endif
        -:   28:
        -:   29:#ifdef yy_scan_buffer
        -:   30:#define yara_yy_scan_buffer_ALREADY_DEFINED
        -:   31:#else
        -:   32:#define yy_scan_buffer yara_yy_scan_buffer
        -:   33:#endif
        -:   34:
        -:   35:#ifdef yy_scan_string
        -:   36:#define yara_yy_scan_string_ALREADY_DEFINED
        -:   37:#else
        -:   38:#define yy_scan_string yara_yy_scan_string
        -:   39:#endif
        -:   40:
        -:   41:#ifdef yy_scan_bytes
        -:   42:#define yara_yy_scan_bytes_ALREADY_DEFINED
        -:   43:#else
        -:   44:#define yy_scan_bytes yara_yy_scan_bytes
        -:   45:#endif
        -:   46:
        -:   47:#ifdef yy_init_buffer
        -:   48:#define yara_yy_init_buffer_ALREADY_DEFINED
        -:   49:#else
        -:   50:#define yy_init_buffer yara_yy_init_buffer
        -:   51:#endif
        -:   52:
        -:   53:#ifdef yy_flush_buffer
        -:   54:#define yara_yy_flush_buffer_ALREADY_DEFINED
        -:   55:#else
        -:   56:#define yy_flush_buffer yara_yy_flush_buffer
        -:   57:#endif
        -:   58:
        -:   59:#ifdef yy_load_buffer_state
        -:   60:#define yara_yy_load_buffer_state_ALREADY_DEFINED
        -:   61:#else
        -:   62:#define yy_load_buffer_state yara_yy_load_buffer_state
        -:   63:#endif
        -:   64:
        -:   65:#ifdef yy_switch_to_buffer
        -:   66:#define yara_yy_switch_to_buffer_ALREADY_DEFINED
        -:   67:#else
        -:   68:#define yy_switch_to_buffer yara_yy_switch_to_buffer
        -:   69:#endif
        -:   70:
        -:   71:#ifdef yypush_buffer_state
        -:   72:#define yara_yypush_buffer_state_ALREADY_DEFINED
        -:   73:#else
        -:   74:#define yypush_buffer_state yara_yypush_buffer_state
        -:   75:#endif
        -:   76:
        -:   77:#ifdef yypop_buffer_state
        -:   78:#define yara_yypop_buffer_state_ALREADY_DEFINED
        -:   79:#else
        -:   80:#define yypop_buffer_state yara_yypop_buffer_state
        -:   81:#endif
        -:   82:
        -:   83:#ifdef yyensure_buffer_stack
        -:   84:#define yara_yyensure_buffer_stack_ALREADY_DEFINED
        -:   85:#else
        -:   86:#define yyensure_buffer_stack yara_yyensure_buffer_stack
        -:   87:#endif
        -:   88:
        -:   89:#ifdef yylex
        -:   90:#define yara_yylex_ALREADY_DEFINED
        -:   91:#else
        -:   92:#define yylex yara_yylex
        -:   93:#endif
        -:   94:
        -:   95:#ifdef yyrestart
        -:   96:#define yara_yyrestart_ALREADY_DEFINED
        -:   97:#else
        -:   98:#define yyrestart yara_yyrestart
        -:   99:#endif
        -:  100:
        -:  101:#ifdef yylex_init
        -:  102:#define yara_yylex_init_ALREADY_DEFINED
        -:  103:#else
        -:  104:#define yylex_init yara_yylex_init
        -:  105:#endif
        -:  106:
        -:  107:#ifdef yylex_init_extra
        -:  108:#define yara_yylex_init_extra_ALREADY_DEFINED
        -:  109:#else
        -:  110:#define yylex_init_extra yara_yylex_init_extra
        -:  111:#endif
        -:  112:
        -:  113:#ifdef yylex_destroy
        -:  114:#define yara_yylex_destroy_ALREADY_DEFINED
        -:  115:#else
        -:  116:#define yylex_destroy yara_yylex_destroy
        -:  117:#endif
        -:  118:
        -:  119:#ifdef yyget_debug
        -:  120:#define yara_yyget_debug_ALREADY_DEFINED
        -:  121:#else
        -:  122:#define yyget_debug yara_yyget_debug
        -:  123:#endif
        -:  124:
        -:  125:#ifdef yyset_debug
        -:  126:#define yara_yyset_debug_ALREADY_DEFINED
        -:  127:#else
        -:  128:#define yyset_debug yara_yyset_debug
        -:  129:#endif
        -:  130:
        -:  131:#ifdef yyget_extra
        -:  132:#define yara_yyget_extra_ALREADY_DEFINED
        -:  133:#else
        -:  134:#define yyget_extra yara_yyget_extra
        -:  135:#endif
        -:  136:
        -:  137:#ifdef yyset_extra
        -:  138:#define yara_yyset_extra_ALREADY_DEFINED
        -:  139:#else
        -:  140:#define yyset_extra yara_yyset_extra
        -:  141:#endif
        -:  142:
        -:  143:#ifdef yyget_in
        -:  144:#define yara_yyget_in_ALREADY_DEFINED
        -:  145:#else
        -:  146:#define yyget_in yara_yyget_in
        -:  147:#endif
        -:  148:
        -:  149:#ifdef yyset_in
        -:  150:#define yara_yyset_in_ALREADY_DEFINED
        -:  151:#else
        -:  152:#define yyset_in yara_yyset_in
        -:  153:#endif
        -:  154:
        -:  155:#ifdef yyget_out
        -:  156:#define yara_yyget_out_ALREADY_DEFINED
        -:  157:#else
        -:  158:#define yyget_out yara_yyget_out
        -:  159:#endif
        -:  160:
        -:  161:#ifdef yyset_out
        -:  162:#define yara_yyset_out_ALREADY_DEFINED
        -:  163:#else
        -:  164:#define yyset_out yara_yyset_out
        -:  165:#endif
        -:  166:
        -:  167:#ifdef yyget_leng
        -:  168:#define yara_yyget_leng_ALREADY_DEFINED
        -:  169:#else
        -:  170:#define yyget_leng yara_yyget_leng
        -:  171:#endif
        -:  172:
        -:  173:#ifdef yyget_text
        -:  174:#define yara_yyget_text_ALREADY_DEFINED
        -:  175:#else
        -:  176:#define yyget_text yara_yyget_text
        -:  177:#endif
        -:  178:
        -:  179:#ifdef yyget_lineno
        -:  180:#define yara_yyget_lineno_ALREADY_DEFINED
        -:  181:#else
        -:  182:#define yyget_lineno yara_yyget_lineno
        -:  183:#endif
        -:  184:
        -:  185:#ifdef yyset_lineno
        -:  186:#define yara_yyset_lineno_ALREADY_DEFINED
        -:  187:#else
        -:  188:#define yyset_lineno yara_yyset_lineno
        -:  189:#endif
        -:  190:
        -:  191:#ifdef yyget_column
        -:  192:#define yara_yyget_column_ALREADY_DEFINED
        -:  193:#else
        -:  194:#define yyget_column yara_yyget_column
        -:  195:#endif
        -:  196:
        -:  197:#ifdef yyset_column
        -:  198:#define yara_yyset_column_ALREADY_DEFINED
        -:  199:#else
        -:  200:#define yyset_column yara_yyset_column
        -:  201:#endif
        -:  202:
        -:  203:#ifdef yywrap
        -:  204:#define yara_yywrap_ALREADY_DEFINED
        -:  205:#else
        -:  206:#define yywrap yara_yywrap
        -:  207:#endif
        -:  208:
        -:  209:#ifdef yyget_lval
        -:  210:#define yara_yyget_lval_ALREADY_DEFINED
        -:  211:#else
        -:  212:#define yyget_lval yara_yyget_lval
        -:  213:#endif
        -:  214:
        -:  215:#ifdef yyset_lval
        -:  216:#define yara_yyset_lval_ALREADY_DEFINED
        -:  217:#else
        -:  218:#define yyset_lval yara_yyset_lval
        -:  219:#endif
        -:  220:
        -:  221:#ifdef yyalloc
        -:  222:#define yara_yyalloc_ALREADY_DEFINED
        -:  223:#else
        -:  224:#define yyalloc yara_yyalloc
        -:  225:#endif
        -:  226:
        -:  227:#ifdef yyrealloc
        -:  228:#define yara_yyrealloc_ALREADY_DEFINED
        -:  229:#else
        -:  230:#define yyrealloc yara_yyrealloc
        -:  231:#endif
        -:  232:
        -:  233:#ifdef yyfree
        -:  234:#define yara_yyfree_ALREADY_DEFINED
        -:  235:#else
        -:  236:#define yyfree yara_yyfree
        -:  237:#endif
        -:  238:
        -:  239:/* First, we deal with  platform-specific or compiler-specific issues. */
        -:  240:
        -:  241:/* begin standard C headers. */
        -:  242:#include <stdio.h>
        -:  243:#include <string.h>
        -:  244:#include <errno.h>
        -:  245:#include <stdlib.h>
        -:  246:
        -:  247:/* end standard C headers. */
        -:  248:
        -:  249:/* flex integer type definitions */
        -:  250:
        -:  251:#ifndef FLEXINT_H
        -:  252:#define FLEXINT_H
        -:  253:
        -:  254:/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
        -:  255:
        -:  256:#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
        -:  257:
        -:  258:/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
        -:  259: * if you want the limit (max/min) macros for int types. 
        -:  260: */
        -:  261:#ifndef __STDC_LIMIT_MACROS
        -:  262:#define __STDC_LIMIT_MACROS 1
        -:  263:#endif
        -:  264:
        -:  265:#include <inttypes.h>
        -:  266:typedef int8_t flex_int8_t;
        -:  267:typedef uint8_t flex_uint8_t;
        -:  268:typedef int16_t flex_int16_t;
        -:  269:typedef uint16_t flex_uint16_t;
        -:  270:typedef int32_t flex_int32_t;
        -:  271:typedef uint32_t flex_uint32_t;
        -:  272:#else
        -:  273:typedef signed char flex_int8_t;
        -:  274:typedef short int flex_int16_t;
        -:  275:typedef int flex_int32_t;
        -:  276:typedef unsigned char flex_uint8_t; 
        -:  277:typedef unsigned short int flex_uint16_t;
        -:  278:typedef unsigned int flex_uint32_t;
        -:  279:
        -:  280:/* Limits of integral types. */
        -:  281:#ifndef INT8_MIN
        -:  282:#define INT8_MIN               (-128)
        -:  283:#endif
        -:  284:#ifndef INT16_MIN
        -:  285:#define INT16_MIN              (-32767-1)
        -:  286:#endif
        -:  287:#ifndef INT32_MIN
        -:  288:#define INT32_MIN              (-2147483647-1)
        -:  289:#endif
        -:  290:#ifndef INT8_MAX
        -:  291:#define INT8_MAX               (127)
        -:  292:#endif
        -:  293:#ifndef INT16_MAX
        -:  294:#define INT16_MAX              (32767)
        -:  295:#endif
        -:  296:#ifndef INT32_MAX
        -:  297:#define INT32_MAX              (2147483647)
        -:  298:#endif
        -:  299:#ifndef UINT8_MAX
        -:  300:#define UINT8_MAX              (255U)
        -:  301:#endif
        -:  302:#ifndef UINT16_MAX
        -:  303:#define UINT16_MAX             (65535U)
        -:  304:#endif
        -:  305:#ifndef UINT32_MAX
        -:  306:#define UINT32_MAX             (4294967295U)
        -:  307:#endif
        -:  308:
        -:  309:#ifndef SIZE_MAX
        -:  310:#define SIZE_MAX               (~(size_t)0)
        -:  311:#endif
        -:  312:
        -:  313:#endif /* ! C99 */
        -:  314:
        -:  315:#endif /* ! FLEXINT_H */
        -:  316:
        -:  317:/* begin standard C++ headers. */
        -:  318:
        -:  319:/* TODO: this is always defined, so inline it */
        -:  320:#define yyconst const
        -:  321:
        -:  322:#if defined(__GNUC__) && __GNUC__ >= 3
        -:  323:#define yynoreturn __attribute__((__noreturn__))
        -:  324:#else
        -:  325:#define yynoreturn
        -:  326:#endif
        -:  327:
        -:  328:/* Returned upon end-of-file. */
        -:  329:#define YY_NULL 0
        -:  330:
        -:  331:/* Promotes a possibly negative, possibly signed char to an
        -:  332: *   integer in range [0..255] for use as an array index.
        -:  333: */
        -:  334:#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
        -:  335:
        -:  336:/* An opaque pointer. */
        -:  337:#ifndef YY_TYPEDEF_YY_SCANNER_T
        -:  338:#define YY_TYPEDEF_YY_SCANNER_T
        -:  339:typedef void* yyscan_t;
        -:  340:#endif
        -:  341:
        -:  342:/* For convenience, these vars (plus the bison vars far below)
        -:  343:   are macros in the reentrant scanner. */
        -:  344:#define yyin yyg->yyin_r
        -:  345:#define yyout yyg->yyout_r
        -:  346:#define yyextra yyg->yyextra_r
        -:  347:#define yyleng yyg->yyleng_r
        -:  348:#define yytext yyg->yytext_r
        -:  349:#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
        -:  350:#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
        -:  351:#define yy_flex_debug yyg->yy_flex_debug_r
        -:  352:
        -:  353:/* Enter a start condition.  This macro really ought to take a parameter,
        -:  354: * but we do it the disgusting crufty way forced on us by the ()-less
        -:  355: * definition of BEGIN.
        -:  356: */
        -:  357:#define BEGIN yyg->yy_start = 1 + 2 *
        -:  358:/* Translate the current start state into a value that can be later handed
        -:  359: * to BEGIN to return to the state.  The YYSTATE alias is for lex
        -:  360: * compatibility.
        -:  361: */
        -:  362:#define YY_START ((yyg->yy_start - 1) / 2)
        -:  363:#define YYSTATE YY_START
        -:  364:/* Action number for EOF rule of a given start state. */
        -:  365:#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
        -:  366:/* Special action meaning "start processing a new file". */
        -:  367:#define YY_NEW_FILE yyrestart( yyin , yyscanner )
        -:  368:#define YY_END_OF_BUFFER_CHAR 0
        -:  369:
        -:  370:/* Size of default input buffer. */
        -:  371:#ifndef YY_BUF_SIZE
        -:  372:#ifdef __ia64__
        -:  373:/* On IA-64, the buffer size is 16k, not 8k.
        -:  374: * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
        -:  375: * Ditto for the __ia64__ case accordingly.
        -:  376: */
        -:  377:#define YY_BUF_SIZE 32768
        -:  378:#else
        -:  379:#define YY_BUF_SIZE 16384
        -:  380:#endif /* __ia64__ */
        -:  381:#endif
        -:  382:
        -:  383:/* The state buf must be large enough to hold one state per character in the main buffer.
        -:  384: */
        -:  385:#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
        -:  386:
        -:  387:#ifndef YY_TYPEDEF_YY_BUFFER_STATE
        -:  388:#define YY_TYPEDEF_YY_BUFFER_STATE
        -:  389:typedef struct yy_buffer_state *YY_BUFFER_STATE;
        -:  390:#endif
        -:  391:
        -:  392:#ifndef YY_TYPEDEF_YY_SIZE_T
        -:  393:#define YY_TYPEDEF_YY_SIZE_T
        -:  394:typedef size_t yy_size_t;
        -:  395:#endif
        -:  396:
        -:  397:#define EOB_ACT_CONTINUE_SCAN 0
        -:  398:#define EOB_ACT_END_OF_FILE 1
        -:  399:#define EOB_ACT_LAST_MATCH 2
        -:  400:    
        -:  401:    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
        -:  402:     *       access to the local variable yy_act. Since yyless() is a macro, it would break
        -:  403:     *       existing scanners that call yyless() from OUTSIDE yylex.
        -:  404:     *       One obvious solution it to make yy_act a global. I tried that, and saw
        -:  405:     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
        -:  406:     *       normally declared as a register variable-- so it is not worth it.
        -:  407:     */
        -:  408:    #define  YY_LESS_LINENO(n) \
        -:  409:            do { \
        -:  410:                int yyl;\
        -:  411:                for ( yyl = n; yyl < yyleng; ++yyl )\
        -:  412:                    if ( yytext[yyl] == '\n' )\
        -:  413:                        --yylineno;\
        -:  414:            }while(0)
        -:  415:    #define YY_LINENO_REWIND_TO(dst) \
        -:  416:            do {\
        -:  417:                const char *p;\
        -:  418:                for ( p = yy_cp-1; p >= (dst); --p)\
        -:  419:                    if ( *p == '\n' )\
        -:  420:                        --yylineno;\
        -:  421:            }while(0)
        -:  422:    
        -:  423:/* Return all but the first "n" matched characters back to the input stream. */
        -:  424:#define yyless(n) \
        -:  425:	do \
        -:  426:		{ \
        -:  427:		/* Undo effects of setting up yytext. */ \
        -:  428:        int yyless_macro_arg = (n); \
        -:  429:        YY_LESS_LINENO(yyless_macro_arg);\
        -:  430:		*yy_cp = yyg->yy_hold_char; \
        -:  431:		YY_RESTORE_YY_MORE_OFFSET \
        -:  432:		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
        -:  433:		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        -:  434:		} \
        -:  435:	while ( 0 )
        -:  436:#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )
        -:  437:
        -:  438:#ifndef YY_STRUCT_YY_BUFFER_STATE
        -:  439:#define YY_STRUCT_YY_BUFFER_STATE
        -:  440:struct yy_buffer_state
        -:  441:	{
        -:  442:	FILE *yy_input_file;
        -:  443:
        -:  444:	char *yy_ch_buf;		/* input buffer */
        -:  445:	char *yy_buf_pos;		/* current position in input buffer */
        -:  446:
        -:  447:	/* Size of input buffer in bytes, not including room for EOB
        -:  448:	 * characters.
        -:  449:	 */
        -:  450:	int yy_buf_size;
        -:  451:
        -:  452:	/* Number of characters read into yy_ch_buf, not including EOB
        -:  453:	 * characters.
        -:  454:	 */
        -:  455:	int yy_n_chars;
        -:  456:
        -:  457:	/* Whether we "own" the buffer - i.e., we know we created it,
        -:  458:	 * and can realloc() it to grow it, and should free() it to
        -:  459:	 * delete it.
        -:  460:	 */
        -:  461:	int yy_is_our_buffer;
        -:  462:
        -:  463:	/* Whether this is an "interactive" input source; if so, and
        -:  464:	 * if we're using stdio for input, then we want to use getc()
        -:  465:	 * instead of fread(), to make sure we stop fetching input after
        -:  466:	 * each newline.
        -:  467:	 */
        -:  468:	int yy_is_interactive;
        -:  469:
        -:  470:	/* Whether we're considered to be at the beginning of a line.
        -:  471:	 * If so, '^' rules will be active on the next match, otherwise
        -:  472:	 * not.
        -:  473:	 */
        -:  474:	int yy_at_bol;
        -:  475:
        -:  476:    int yy_bs_lineno; /**< The line count. */
        -:  477:    int yy_bs_column; /**< The column count. */
        -:  478:
        -:  479:	/* Whether to try to fill the input buffer when we reach the
        -:  480:	 * end of it.
        -:  481:	 */
        -:  482:	int yy_fill_buffer;
        -:  483:
        -:  484:	int yy_buffer_status;
        -:  485:
        -:  486:#define YY_BUFFER_NEW 0
        -:  487:#define YY_BUFFER_NORMAL 1
        -:  488:	/* When an EOF's been seen but there's still some text to process
        -:  489:	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
        -:  490:	 * shouldn't try reading from the input source any more.  We might
        -:  491:	 * still have a bunch of tokens to match, though, because of
        -:  492:	 * possible backing-up.
        -:  493:	 *
        -:  494:	 * When we actually see the EOF, we change the status to "new"
        -:  495:	 * (via yyrestart()), so that the user can continue scanning by
        -:  496:	 * just pointing yyin at a new input file.
        -:  497:	 */
        -:  498:#define YY_BUFFER_EOF_PENDING 2
        -:  499:
        -:  500:	};
        -:  501:#endif /* !YY_STRUCT_YY_BUFFER_STATE */
        -:  502:
        -:  503:/* We provide macros for accessing buffer states in case in the
        -:  504: * future we want to put the buffer states in a more general
        -:  505: * "scanner state".
        -:  506: *
        -:  507: * Returns the top of the stack, or NULL.
        -:  508: */
        -:  509:#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
        -:  510:                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
        -:  511:                          : NULL)
        -:  512:/* Same as previous macro, but useful when we know that the buffer stack is not
        -:  513: * NULL or when we need an lvalue. For internal use only.
        -:  514: */
        -:  515:#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]
        -:  516:
        -:  517:void yyrestart ( FILE *input_file , yyscan_t yyscanner );
        -:  518:void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
        -:  519:YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
        -:  520:void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
        -:  521:void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
        -:  522:void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
        -:  523:void yypop_buffer_state ( yyscan_t yyscanner );
        -:  524:
        -:  525:static void yyensure_buffer_stack ( yyscan_t yyscanner );
        -:  526:static void yy_load_buffer_state ( yyscan_t yyscanner );
        -:  527:static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
        -:  528:#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)
        -:  529:
        -:  530:YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
        -:  531:YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
        -:  532:YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );
        -:  533:
        -:  534:void *yyalloc ( yy_size_t , yyscan_t yyscanner );
        -:  535:void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
        -:  536:void yyfree ( void * , yyscan_t yyscanner );
        -:  537:
        -:  538:#define yy_new_buffer yy_create_buffer
        -:  539:#define yy_set_interactive(is_interactive) \
        -:  540:	{ \
        -:  541:	if ( ! YY_CURRENT_BUFFER ){ \
        -:  542:        yyensure_buffer_stack (yyscanner); \
        -:  543:		YY_CURRENT_BUFFER_LVALUE =    \
        -:  544:            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
        -:  545:	} \
        -:  546:	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
        -:  547:	}
        -:  548:#define yy_set_bol(at_bol) \
        -:  549:	{ \
        -:  550:	if ( ! YY_CURRENT_BUFFER ){\
        -:  551:        yyensure_buffer_stack (yyscanner); \
        -:  552:		YY_CURRENT_BUFFER_LVALUE =    \
        -:  553:            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
        -:  554:	} \
        -:  555:	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
        -:  556:	}
        -:  557:#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
        -:  558:
        -:  559:/* Begin user sect3 */
        -:  560:
        -:  561:#define yara_yywrap(yyscanner) (/*CONSTCOND*/1)
        -:  562:#define YY_SKIP_YYWRAP
        -:  563:typedef flex_uint8_t YY_CHAR;
        -:  564:
        -:  565:typedef int yy_state_type;
        -:  566:
        -:  567:#define yytext_ptr yytext_r
        -:  568:
        -:  569:static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
        -:  570:static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
        -:  571:static int yy_get_next_buffer ( yyscan_t yyscanner );
        -:  572:static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );
        -:  573:
        -:  574:/* Done after the current pattern has been matched and before the
        -:  575: * corresponding action - sets up yytext.
        -:  576: */
        -:  577:#define YY_DO_BEFORE_ACTION \
        -:  578:	yyg->yytext_ptr = yy_bp; \
        -:  579:	yyleng = (int) (yy_cp - yy_bp); \
        -:  580:	yyg->yy_hold_char = *yy_cp; \
        -:  581:	*yy_cp = '\0'; \
        -:  582:	yyg->yy_c_buf_p = yy_cp;
        -:  583:#define YY_NUM_RULES 77
        -:  584:#define YY_END_OF_BUFFER 78
        -:  585:/* This struct is not used in this scanner,
        -:  586:   but its presence is necessary. */
        -:  587:struct yy_trans_info
        -:  588:	{
        -:  589:	flex_int32_t yy_verify;
        -:  590:	flex_int32_t yy_nxt;
        -:  591:	};
        -:  592:static const flex_int16_t yy_accept[258] =
        -:  593:    {   0,
        -:  594:        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        -:  595:       78,   76,   75,   75,   51,   72,   49,   48,   76,   73,
        -:  596:       54,   54,    2,   76,    3,   50,   53,   53,   53,   53,
        -:  597:       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
        -:  598:       53,   53,   53,   53,   76,   64,   65,   58,   77,   70,
        -:  599:       71,   67,   77,   45,   46,   42,   42,   51,    7,   49,
        -:  600:       47,   48,    1,   40,   43,    0,   54,    0,    0,    0,
        -:  601:        0,    8,    4,    6,    5,    9,   50,   53,   53,   53,
        -:  602:       53,   28,   53,   53,   53,   53,   53,   53,   53,   53,
        -:  603:       53,   29,   53,   53,   53,   30,   27,   53,   53,   53,
        -:  604:
        -:  605:       53,   53,   53,   53,   53,    0,    0,   64,   66,   61,
        -:  606:       62,   60,   59,   66,   70,   67,   67,   69,   68,   45,
        -:  607:       41,   43,   55,   54,   57,   56,   33,   26,   34,   53,
        -:  608:       53,   53,   53,   53,   53,   32,   53,   53,   53,   53,
        -:  609:       53,   53,   53,   53,   25,   53,   53,   53,   53,   53,
        -:  610:       53,   53,   17,   74,    0,    0,    0,   53,   53,   53,
        -:  611:       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
        -:  612:       52,   53,   13,   53,   53,   12,   53,   31,   23,   16,
        -:  613:        0,    0,    0,    0,    0,   74,   63,   15,   53,   53,
        -:  614:       53,   53,   24,   53,   53,   53,   53,   53,   53,   53,
        -:  615:
        -:  616:       53,   53,   53,    0,    0,   18,   53,   53,   53,   53,
        -:  617:       53,   11,   39,   53,   52,   53,   21,   53,   53,    0,
        -:  618:        0,    0,    0,    0,   74,   53,   53,   53,   53,   53,
        -:  619:       53,   53,   37,   10,   14,    0,   74,    0,    0,    0,
        -:  620:       53,   53,   38,   53,   36,   20,    0,    0,    0,    0,
        -:  621:       53,   22,   53,   44,   19,   35,    0
        -:  622:    } ;
        -:  623:
        -:  624:static const YY_CHAR yy_ec[256] =
        -:  625:    {   0,
        -:  626:        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        -:  627:        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        -:  628:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  629:        1,    2,    5,    6,    7,    8,    1,    1,    1,    9,
        -:  630:        9,   10,    1,    1,    9,   11,   12,   13,   14,   15,
        -:  631:       16,   17,   18,   19,   18,   20,   21,    1,    1,   22,
        -:  632:       23,   24,    9,   25,   26,   27,   26,   26,   26,   26,
        -:  633:       28,   28,   28,   28,   29,   28,   30,   28,   28,   28,
        -:  634:       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
        -:  635:        9,   31,    9,    1,   32,    1,   33,   34,   35,   36,
        -:  636:
        -:  637:       37,   38,   39,   40,   41,   28,   28,   42,   43,   44,
        -:  638:       45,   46,   28,   47,   48,   49,   50,   51,   52,   53,
        -:  639:       54,   55,   56,    9,   57,    1,    1,    1,    1,    1,
        -:  640:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  641:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  642:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  643:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  644:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  645:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  646:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  647:
        -:  648:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  649:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  650:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  651:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  652:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  653:        1,    1,    1,    1,    1
        -:  654:    } ;
        -:  655:
        -:  656:static const YY_CHAR yy_meta[58] =
        -:  657:    {   0,
        -:  658:        1,    2,    3,    2,    1,    4,    1,    1,    2,    5,
        -:  659:        6,    7,    8,    8,    8,    8,    8,    8,    8,    8,
        -:  660:        8,    1,    9,    1,    1,   10,   10,   11,   12,   12,
        -:  661:       13,   11,   10,   10,   10,   10,   10,   10,   11,   11,
        -:  662:       11,   11,   11,   11,   12,   11,   11,   11,   11,   11,
        -:  663:       11,   11,   12,   11,   11,    1,    1
        -:  664:    } ;
        -:  665:
        -:  666:static const flex_int16_t yy_base[280] =
        -:  667:    {   0,
        -:  668:        0,    0,   55,   56,   57,   60,  587,  586,  581,  580,
        -:  669:      589,  594,  594,  594,  565,  594,    0,  577,  575,   54,
        -:  670:       54,   60,   45,  562,   50,    0,    0,   33,  551,  538,
        -:  671:      538,   52,  539,   35,   43,  535,   54,  532,  528,  528,
        -:  672:       56,  535,  534,  529,  561,    0,  594,  594,   88,    0,
        -:  673:      594,   63,  560,    0,  594,  594,  559,  547,  594,    0,
        -:  674:      594,  559,  594,  594,    0,    0,    0,  541,  540,  107,
        -:  675:        0,  594,  594,  594,  594,  594,    0,    0,  524,   62,
        -:  676:      530,    0,  516,  519,  513,  519,  518,  512,  516,  512,
        -:  677:      510,   60,  506,  505,   65,    0,    0,  512,  510,  504,
        -:  678:
        -:  679:      513,  499,  504,  511,  499,   58,   96,    0,  594,  594,
        -:  680:      594,  594,  594,    0,    0,  497,  594,  594,  594,    0,
        -:  681:      594,    0,    0,  594,  129,    0,    0,    0,    0,  503,
        -:  682:      506,   81,  495,  493,  503,    0,  497,  504,  492,  494,
        -:  683:      113,  500,  501,  500,    0,  481,  494,  489,  486,  491,
        -:  684:      478,  489,    0,  594,  515,  148,    0,  483,  504,  481,
        -:  685:      488,  466,  482,  470,  465,  483,  468,  464,  494,  496,
        -:  686:      461,  452,    0,  432,  435,    0,  410,    0,    0,    0,
        -:  687:      436,  100,    0,    0,  124,    0,  594,    0,  425,  369,
        -:  688:      376,  367,    0,  369,  364,  366,  353,  361,  357,  356,
        -:  689:
        -:  690:      355,  341,  346,  205,  128,  331,  341,  333,  272,  261,
        -:  691:      268,    0,    0,  277,    0,  265,    0,  275,  263,    0,
        -:  692:        0,  261,  298,  256,    0,  268,  263,  259,  265,  268,
        -:  693:      268,  301,    0,    0,    0,  257,  292,  273,  289,  274,
        -:  694:      264,  249,    0,  228,    0,    0,  129,  279,    0,  280,
        -:  695:      102,    0,   79,  594,    0,    0,  594,  318,  331,  344,
        -:  696:      357,  363,  368,  376,  383,  388,  393,  404,  414,  426,
        -:  697:      439,  451,  464,  477,  110,  483,  486,  496,  502
        -:  698:    } ;
        -:  699:
        -:  700:static const flex_int16_t yy_def[280] =
        -:  701:    {   0,
        -:  702:      257,    1,  258,  258,  259,  259,  260,  260,  261,  261,
        -:  703:      257,  257,  257,  257,  262,  257,  263,  264,  257,  257,
        -:  704:      265,  265,  257,  257,  257,  266,  267,  267,  267,  267,
        -:  705:      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
        -:  706:      267,  267,  267,  267,  268,  269,  257,  257,  270,  271,
        -:  707:      257,  257,  272,  273,  257,  257,  257,  262,  257,  263,
        -:  708:      257,  264,  257,  257,  274,  275,   22,  257,  257,  257,
        -:  709:      276,  257,  257,  257,  257,  257,  266,  267,  267,  267,
        -:  710:      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
        -:  711:      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
        -:  712:
        -:  713:      267,  267,  267,  267,  267,  268,  257,  269,  257,  257,
        -:  714:      257,  257,  257,  277,  271,  257,  257,  257,  257,  273,
        -:  715:      257,  274,  275,  257,  257,  276,  267,  267,  267,  267,
        -:  716:      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
        -:  717:      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
        -:  718:      267,  267,  267,  257,  278,  257,  279,  267,  267,  267,
        -:  719:      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
        -:  720:      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
        -:  721:      278,  278,  156,  156,  156,  156,  257,  267,  267,  267,
        -:  722:      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
        -:  723:
        -:  724:      267,  267,  267,  257,  156,  267,  267,  267,  267,  267,
        -:  725:      267,  267,  267,  267,  267,  267,  267,  267,  267,  204,
        -:  726:      204,  278,  204,  204,  204,  267,  267,  267,  267,  267,
        -:  727:      267,  267,  267,  267,  267,  278,  278,  156,  204,  204,
        -:  728:      267,  267,  267,  267,  267,  267,  257,  278,  204,  204,
        -:  729:      267,  267,  267,  257,  267,  267,    0,  257,  257,  257,
        -:  730:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  731:      257,  257,  257,  257,  257,  257,  257,  257,  257
        -:  732:    } ;
        -:  733:
        -:  734:static const flex_int16_t yy_nxt[652] =
        -:  735:    {   0,
        -:  736:       12,   13,   14,   13,   15,   16,   17,   18,   12,   12,
        -:  737:       19,   20,   21,   22,   22,   22,   22,   22,   22,   22,
        -:  738:       22,   23,   24,   25,   26,   27,   27,   27,   27,   27,
        -:  739:       12,   27,   28,   29,   30,   27,   31,   32,   33,   27,
        -:  740:       34,   27,   35,   36,   37,   38,   39,   40,   41,   42,
        -:  741:       27,   43,   44,   27,   27,   45,   12,   47,   47,   51,
        -:  742:       48,   48,   51,   64,   66,   65,   72,   73,   52,  107,
        -:  743:       66,   52,   75,   76,   79,   93,   80,   91,   92,   94,
        -:  744:       81,   82,   68,   69,   86,   49,   49,   53,   68,   69,
        -:  745:       53,   96,   87,  110,  140,  101,   88,  128,   70,  144,
        -:  746:
        -:  747:       97,   89,  102,  116,  257,  155,   71,  156,  141,  182,
        -:  748:      117,  106,  257,  145,  154,  129,  160,  123,  111,  125,
        -:  749:      125,  125,  125,  125,  125,  125,  169,  256,  170,  161,
        -:  750:      247,  112,  171,  204,  254,  205,  113,  204,  255,  205,
        -:  751:      114,  125,  125,  125,  125,  125,  125,  125,  183,  184,
        -:  752:      106,  184,  183,  183,  183,  183,  184,  183,  183,  185,
        -:  753:      184,  184,  184,  184,  184,  184,  184,  184,  184,  183,
        -:  754:      183,  183,  183,  184,  184,  183,  183,  183,  183,  183,
        -:  755:      184,  184,  184,  184,  184,  184,  183,  183,  183,  183,
        -:  756:      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
        -:  757:
        -:  758:      183,  183,  183,  183,  186,  220,  221,  222,  221,  220,
        -:  759:      220,  220,  220,  221,  223,  220,  224,  221,  221,  221,
        -:  760:      221,  221,  221,  221,  221,  221,  220,  220,  220,  220,
        -:  761:      221,  221,  220,  220,  220,  220,  220,  221,  221,  221,
        -:  762:      221,  221,  221,  220,  220,  220,  220,  220,  220,  220,
        -:  763:      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
        -:  764:      220,  225,  222,  222,  222,  239,  248,  240,  249,  222,
        -:  765:      182,  253,  236,  222,  222,  222,  222,  222,  222,  222,
        -:  766:      222,  222,  204,  239,  205,  240,  222,  222,  182,  239,
        -:  767:      222,  240,  252,  222,  222,  222,  222,  222,  222,  251,
        -:  768:
        -:  769:      250,  182,  247,  246,  245,  244,  243,  242,  241,  238,
        -:  770:      235,  234,  233,  232,  231,  230,  229,  237,   46,   46,
        -:  771:       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
        -:  772:       46,   50,   50,   50,   50,   50,   50,   50,   50,   50,
        -:  773:       50,   50,   50,   50,   54,   54,   54,   54,   54,   54,
        -:  774:       54,   54,   54,   54,   54,   54,   54,   56,   56,   56,
        -:  775:       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
        -:  776:       58,   58,   58,   58,   58,   60,  228,   60,   60,   60,
        -:  777:       62,  227,  226,   62,  219,   62,   62,   62,   67,  218,
        -:  778:       67,  217,  216,  215,   67,   77,  214,   77,   77,   77,
        -:  779:
        -:  780:       78,  213,   78,   78,   78,  106,  106,  212,  211,  210,
        -:  781:      106,  106,  209,  106,  108,  108,  208,  207,  108,  108,
        -:  782:      108,  108,  108,  108,  108,  108,  109,  109,  109,  109,
        -:  783:      109,  109,  109,  109,  109,  109,  109,  109,  109,  115,
        -:  784:      115,  206,  115,  115,  115,  182,  115,  115,  115,  115,
        -:  785:      115,  118,  118,  203,  118,  118,  118,  118,  118,  118,
        -:  786:      118,  118,  118,  118,  120,  120,  120,  202,  120,  120,
        -:  787:      120,  120,  120,  120,  120,  120,  120,  122,  122,  201,
        -:  788:      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
        -:  789:      126,  200,  126,  157,  199,  157,  181,  181,  181,  181,
        -:  790:
        -:  791:      181,  181,  181,  181,  181,  181,  181,  181,  181,  187,
        -:  792:      171,  187,  171,  198,  197,  196,  195,  194,  193,  192,
        -:  793:      191,  190,  189,  188,  182,  180,  141,  179,  178,  177,
        -:  794:      176,  175,  174,  173,  172,  168,  167,  166,  165,  164,
        -:  795:      163,  162,  159,  158,  117,  153,  152,  151,  150,  149,
        -:  796:      148,  147,  146,  143,  142,  139,  138,  137,  136,  135,
        -:  797:      134,  133,  132,  131,  130,  127,  124,  124,   61,  257,
        -:  798:      121,  119,  107,  105,  104,  103,  100,   99,   98,   95,
        -:  799:       90,   85,   84,   83,   74,   63,   61,   59,  257,   57,
        -:  800:       57,   55,   55,   11,  257,  257,  257,  257,  257,  257,
        -:  801:
        -:  802:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  803:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  804:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  805:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  806:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  807:      257
        -:  808:    } ;
        -:  809:
        -:  810:static const flex_int16_t yy_chk[652] =
        -:  811:    {   0,
        -:  812:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  813:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  814:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  815:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  816:        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        -:  817:        1,    1,    1,    1,    1,    1,    1,    3,    4,    5,
        -:  818:        3,    4,    6,   20,   21,   20,   23,   23,    5,  106,
        -:  819:       22,    6,   25,   25,   28,   35,   28,   34,   34,   35,
        -:  820:       28,   28,   21,   21,   32,    3,    4,    5,   22,   22,
        -:  821:        6,   37,   32,   49,   92,   41,   32,   80,   21,   95,
        -:  822:
        -:  823:       37,   32,   41,   52,   22,  107,   21,  107,   92,  182,
        -:  824:       52,  182,   22,   95,  106,   80,  132,  275,   49,   70,
        -:  825:       70,   70,   70,   70,   70,   70,  141,  253,  141,  132,
        -:  826:      247,   49,  141,  185,  247,  185,   49,  205,  251,  205,
        -:  827:       49,  125,  125,  125,  125,  125,  125,  125,  156,  156,
        -:  828:      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
        -:  829:      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
        -:  830:      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
        -:  831:      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
        -:  832:      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
        -:  833:
        -:  834:      156,  156,  156,  156,  156,  204,  204,  204,  204,  204,
        -:  835:      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
        -:  836:      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
        -:  837:      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
        -:  838:      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
        -:  839:      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
        -:  840:      204,  204,  222,  222,  222,  224,  236,  224,  236,  222,
        -:  841:      222,  244,  222,  222,  222,  222,  222,  222,  222,  222,
        -:  842:      222,  222,  238,  240,  238,  240,  222,  222,  248,  250,
        -:  843:      248,  250,  242,  222,  222,  222,  222,  222,  222,  241,
        -:  844:
        -:  845:      239,  237,  232,  231,  230,  229,  228,  227,  226,  223,
        -:  846:      219,  218,  216,  214,  211,  210,  209,  222,  258,  258,
        -:  847:      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
        -:  848:      258,  259,  259,  259,  259,  259,  259,  259,  259,  259,
        -:  849:      259,  259,  259,  259,  260,  260,  260,  260,  260,  260,
        -:  850:      260,  260,  260,  260,  260,  260,  260,  261,  261,  261,
        -:  851:      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
        -:  852:      262,  262,  262,  262,  262,  263,  208,  263,  263,  263,
        -:  853:      264,  207,  206,  264,  203,  264,  264,  264,  265,  202,
        -:  854:      265,  201,  200,  199,  265,  266,  198,  266,  266,  266,
        -:  855:
        -:  856:      267,  197,  267,  267,  267,  268,  268,  196,  195,  194,
        -:  857:      268,  268,  192,  268,  269,  269,  191,  190,  269,  269,
        -:  858:      269,  269,  269,  269,  269,  269,  270,  270,  270,  270,
        -:  859:      270,  270,  270,  270,  270,  270,  270,  270,  270,  271,
        -:  860:      271,  189,  271,  271,  271,  181,  271,  271,  271,  271,
        -:  861:      271,  272,  272,  177,  272,  272,  272,  272,  272,  272,
        -:  862:      272,  272,  272,  272,  273,  273,  273,  175,  273,  273,
        -:  863:      273,  273,  273,  273,  273,  273,  273,  274,  274,  174,
        -:  864:      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
        -:  865:      276,  172,  276,  277,  171,  277,  278,  278,  278,  278,
        -:  866:
        -:  867:      278,  278,  278,  278,  278,  278,  278,  278,  278,  279,
        -:  868:      170,  279,  169,  168,  167,  166,  165,  164,  163,  162,
        -:  869:      161,  160,  159,  158,  155,  152,  151,  150,  149,  148,
        -:  870:      147,  146,  144,  143,  142,  140,  139,  138,  137,  135,
        -:  871:      134,  133,  131,  130,  116,  105,  104,  103,  102,  101,
        -:  872:      100,   99,   98,   94,   93,   91,   90,   89,   88,   87,
        -:  873:       86,   85,   84,   83,   81,   79,   69,   68,   62,   58,
        -:  874:       57,   53,   45,   44,   43,   42,   40,   39,   38,   36,
        -:  875:       33,   31,   30,   29,   24,   19,   18,   15,   11,   10,
        -:  876:        9,    8,    7,  257,  257,  257,  257,  257,  257,  257,
        -:  877:
        -:  878:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  879:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  880:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  881:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  882:      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
        -:  883:      257
        -:  884:    } ;
        -:  885:
        -:  886:/* Table of booleans, true if rule could match eol. */
        -:  887:static const flex_int32_t yy_rule_can_match_eol[78] =
        -:  888:    {   0,
        -:  889:0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        -:  890:    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        -:  891:    0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        -:  892:    0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,     };
        -:  893:
        -:  894:/* The intent behind this definition is that it'll catch
        -:  895: * any uses of REJECT which flex missed.
        -:  896: */
        -:  897:#define REJECT reject_used_but_not_detected
        -:  898:#define yymore() yymore_used_but_not_detected
        -:  899:#define YY_MORE_ADJ 0
        -:  900:#define YY_RESTORE_YY_MORE_OFFSET
        -:  901:#line 1 "lexer.l"
        -:  902:/*
        -:  903:Copyright (c) 2007-2013. The YARA Authors. All Rights Reserved.
        -:  904:
        -:  905:Redistribution and use in source and binary forms, with or without modification,
        -:  906:are permitted provided that the following conditions are met:
        -:  907:
        -:  908:1. Redistributions of source code must retain the above copyright notice, this
        -:  909:list of conditions and the following disclaimer.
        -:  910:
        -:  911:2. Redistributions in binary form must reproduce the above copyright notice,
        -:  912:this list of conditions and the following disclaimer in the documentation and/or
        -:  913:other materials provided with the distribution.
        -:  914:
        -:  915:3. Neither the name of the copyright holder nor the names of its contributors
        -:  916:may be used to endorse or promote products derived from this software without
        -:  917:specific prior written permission.
        -:  918:
        -:  919:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:  920:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:  921:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:  922:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:  923:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:  924:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:  925:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:  926:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:  927:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:  928:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:  929:*/
        -:  930:/* Lexical analyzer for YARA */
        -:  931:#line 33 "lexer.l"
        -:  932:
        -:  933:/* Disable warnings for unused functions in this file.
        -:  934:
        -:  935:As we redefine YY_FATAL_ERROR macro to use our own function yara_yyfatal, the
        -:  936:yy_fatal_error function generated by Flex is not actually used, causing a
        -:  937:compiler warning. Flex doesn't offer any options to remove the yy_fatal_error
        -:  938:function. When they include something like %option noyy_fatal_error as they do
        -:  939:with noyywrap then we can remove this pragma.
        -:  940:*/
        -:  941:
        -:  942:#ifdef __GNUC__
        -:  943:#pragma GCC diagnostic ignored "-Wunused-function"
        -:  944:#endif
        -:  945:
        -:  946:#include <math.h>
        -:  947:#include <stdarg.h>
        -:  948:#include <stdio.h>
        -:  949:#include <stdlib.h>
        -:  950:#include <string.h>
        -:  951:#include <setjmp.h>
        -:  952:
        -:  953:#if defined(_WIN32) || defined(__CYGWIN__)
        -:  954:#include <windows.h>
        -:  955:#else
        -:  956:#include <sys/stat.h>
        -:  957:#include <unistd.h>
        -:  958:#endif
        -:  959:
        -:  960:#if defined(_WIN32)
        -:  961:#define strtoll _strtoi64
        -:  962:#endif
        -:  963:
        -:  964:#include <yara/integers.h>
        -:  965:#include <yara/lexer.h>
        -:  966:#include <yara/sizedstr.h>
        -:  967:#include <yara/error.h>
        -:  968:#include <yara/mem.h>
        -:  969:#include <yara/utils.h>
        -:  970:#include <yara/strutils.h>
        -:  971:
        -:  972:#include "grammar.h"
        -:  973:
        -:  974:#define error(error_code) \
        -:  975:    { \
        -:  976:      compiler->last_error = error_code; \
        -:  977:      yyerror(yyscanner, compiler, NULL); \
        -:  978:      yyterminate(); \
        -:  979:    }
        -:  980:
        -:  981:#define syntax_error(error_msg) \
        -:  982:    { \
        -:  983:      yr_compiler_set_error_extra_info(compiler, error_msg); \
        -:  984:      error(ERROR_SYNTAX_ERROR); \
        -:  985:    }
        -:  986:
        -:  987:#define lex_check_space_ok(data, current_size, max_length) \
        -:  988:    if (strlen(data) + current_size >= max_length - 1) \
        -:  989:    { \
        -:  990:      yyerror(yyscanner, compiler, "out of space in lex_buf"); \
        -:  991:      yyterminate(); \
        -:  992:    }
        -:  993:
        -:  994:#define yytext_to_buffer \
        -:  995:    { \
        -:  996:      char *yptr = yytext; \
        -:  997:      lex_check_space_ok(yptr, yyextra->lex_buf_len, YR_LEX_BUF_SIZE); \
        -:  998:      while(*yptr) \
        -:  999:      { \
        -: 1000:        *yyextra->lex_buf_ptr++ = *yptr++; \
        -: 1001:        yyextra->lex_buf_len++; \
        -: 1002:      } \
        -: 1003:    }
        -: 1004:
        -: 1005:#define alloc_sized_string(str, str_len) \
        -: 1006:  SIZED_STRING* str = (SIZED_STRING*) yr_malloc( \
        -: 1007:      str_len + sizeof(SIZED_STRING)); \
        -: 1008:  if (str == NULL) \
        -: 1009:  { \
        -: 1010:    yyerror(yyscanner, compiler, "not enough memory"); \
        -: 1011:    yyterminate(); \
        -: 1012:  } \
        -: 1013:  else \
        -: 1014:  { \
        -: 1015:    str->length = (uint32_t) (str_len); \
        -: 1016:    str->flags = 0; \
        -: 1017:  } \
        -: 1018:
        -: 1019:#ifdef _WIN32
        -: 1020:#define snprintf _snprintf
        -: 1021:#endif
        -: 1022:
        -: 1023:static bool is_absolute_path(
        -: 1024:    char* path)
        -: 1025:{
        -: 1026:  if (path == NULL)
        -: 1027:    return false;
        -: 1028:
        -: 1029:  #if defined(_WIN32) || defined(__CYGWIN__)
        -: 1030:  return strlen(path) > 2 &&
        -: 1031:      path[1] == ':' && (path[2] == '/' || path[2] == '\\');
        -: 1032:  #else
        -: 1033:  return strlen(path) > 0 && path[0] == '/';
        -: 1034:  #endif
        -: 1035:}
        -: 1036:
        -: 1037:#line 1038 "lexer.c"
        -: 1038:#define YY_NO_UNISTD_H 1
        -: 1039:#define YY_NO_INPUT 1
        -: 1040:
        -: 1041:#line 1042 "lexer.c"
        -: 1042:
        -: 1043:#define INITIAL 0
        -: 1044:#define str 1
        -: 1045:#define regexp 2
        -: 1046:#define include 3
        -: 1047:#define comment 4
        -: 1048:
        -: 1049:#ifndef YY_NO_UNISTD_H
        -: 1050:/* Special case for "unistd.h", since it is non-ANSI. We include it way
        -: 1051: * down here because we want the user's section 1 to have been scanned first.
        -: 1052: * The user has a chance to override it with an option.
        -: 1053: */
        -: 1054:#include <unistd.h>
        -: 1055:#endif
        -: 1056:
        -: 1057:#ifndef YY_EXTRA_TYPE
        -: 1058:#define YY_EXTRA_TYPE void *
        -: 1059:#endif
        -: 1060:
        -: 1061:/* Holds the entire state of the reentrant scanner. */
        -: 1062:struct yyguts_t
        -: 1063:    {
        -: 1064:
        -: 1065:    /* User-defined. Not touched by flex. */
        -: 1066:    YY_EXTRA_TYPE yyextra_r;
        -: 1067:
        -: 1068:    /* The rest are the same as the globals declared in the non-reentrant scanner. */
        -: 1069:    FILE *yyin_r, *yyout_r;
        -: 1070:    size_t yy_buffer_stack_top; /**< index of top of stack. */
        -: 1071:    size_t yy_buffer_stack_max; /**< capacity of stack. */
        -: 1072:    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
        -: 1073:    char yy_hold_char;
        -: 1074:    int yy_n_chars;
        -: 1075:    int yyleng_r;
        -: 1076:    char *yy_c_buf_p;
        -: 1077:    int yy_init;
        -: 1078:    int yy_start;
        -: 1079:    int yy_did_buffer_switch_on_eof;
        -: 1080:    int yy_start_stack_ptr;
        -: 1081:    int yy_start_stack_depth;
        -: 1082:    int *yy_start_stack;
        -: 1083:    yy_state_type yy_last_accepting_state;
        -: 1084:    char* yy_last_accepting_cpos;
        -: 1085:
        -: 1086:    int yylineno_r;
        -: 1087:    int yy_flex_debug_r;
        -: 1088:
        -: 1089:    char *yytext_r;
        -: 1090:    int yy_more_flag;
        -: 1091:    int yy_more_len;
        -: 1092:
        -: 1093:    YYSTYPE * yylval_r;
        -: 1094:
        -: 1095:    }; /* end struct yyguts_t */
        -: 1096:
        -: 1097:static int yy_init_globals ( yyscan_t yyscanner );
        -: 1098:
        -: 1099:    /* This must go here because YYSTYPE and YYLTYPE are included
        -: 1100:     * from bison output in section 1.*/
        -: 1101:    #    define yylval yyg->yylval_r
        -: 1102:    
        -: 1103:int yylex_init (yyscan_t* scanner);
        -: 1104:
        -: 1105:int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);
        -: 1106:
        -: 1107:/* Accessor methods to globals.
        -: 1108:   These are made visible to non-reentrant scanners for convenience. */
        -: 1109:
        -: 1110:int yylex_destroy ( yyscan_t yyscanner );
        -: 1111:
        -: 1112:int yyget_debug ( yyscan_t yyscanner );
        -: 1113:
        -: 1114:void yyset_debug ( int debug_flag , yyscan_t yyscanner );
        -: 1115:
        -: 1116:YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );
        -: 1117:
        -: 1118:void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );
        -: 1119:
        -: 1120:FILE *yyget_in ( yyscan_t yyscanner );
        -: 1121:
        -: 1122:void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );
        -: 1123:
        -: 1124:FILE *yyget_out ( yyscan_t yyscanner );
        -: 1125:
        -: 1126:void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );
        -: 1127:
        -: 1128:			int yyget_leng ( yyscan_t yyscanner );
        -: 1129:
        -: 1130:char *yyget_text ( yyscan_t yyscanner );
        -: 1131:
        -: 1132:int yyget_lineno ( yyscan_t yyscanner );
        -: 1133:
        -: 1134:void yyset_lineno ( int _line_number , yyscan_t yyscanner );
        -: 1135:
        -: 1136:int yyget_column  ( yyscan_t yyscanner );
        -: 1137:
        -: 1138:void yyset_column ( int _column_no , yyscan_t yyscanner );
        -: 1139:
        -: 1140:YYSTYPE * yyget_lval ( yyscan_t yyscanner );
        -: 1141:
        -: 1142:void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );
        -: 1143:
        -: 1144:/* Macros after this point can all be overridden by user definitions in
        -: 1145: * section 1.
        -: 1146: */
        -: 1147:
        -: 1148:#ifndef YY_SKIP_YYWRAP
        -: 1149:#ifdef __cplusplus
        -: 1150:extern "C" int yywrap ( yyscan_t yyscanner );
        -: 1151:#else
        -: 1152:extern int yywrap ( yyscan_t yyscanner );
        -: 1153:#endif
        -: 1154:#endif
        -: 1155:
        -: 1156:#ifndef YY_NO_UNPUT
        -: 1157:    
        -: 1158:#endif
        -: 1159:
        -: 1160:#ifndef yytext_ptr
        -: 1161:static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
        -: 1162:#endif
        -: 1163:
        -: 1164:#ifdef YY_NEED_STRLEN
        -: 1165:static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
        -: 1166:#endif
        -: 1167:
        -: 1168:#ifndef YY_NO_INPUT
        -: 1169:#ifdef __cplusplus
        -: 1170:static int yyinput ( yyscan_t yyscanner );
        -: 1171:#else
        -: 1172:static int input ( yyscan_t yyscanner );
        -: 1173:#endif
        -: 1174:
        -: 1175:#endif
        -: 1176:
        -: 1177:/* Amount of stuff to slurp up with each read. */
        -: 1178:#ifndef YY_READ_BUF_SIZE
        -: 1179:#ifdef __ia64__
        -: 1180:/* On IA-64, the buffer size is 16k, not 8k */
        -: 1181:#define YY_READ_BUF_SIZE 16384
        -: 1182:#else
        -: 1183:#define YY_READ_BUF_SIZE 8192
        -: 1184:#endif /* __ia64__ */
        -: 1185:#endif
        -: 1186:
        -: 1187:/* Copy whatever the last rule matched to the standard output. */
        -: 1188:#ifndef ECHO
        -: 1189:/* This used to be an fputs(), but since the string might contain NUL's,
        -: 1190: * we now use fwrite().
        -: 1191: */
        -: 1192:#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
        -: 1193:#endif
        -: 1194:
        -: 1195:/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
        -: 1196: * is returned in "result".
        -: 1197: */
        -: 1198:#ifndef YY_INPUT
        -: 1199:#define YY_INPUT(buf,result,max_size) \
        -: 1200:	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
        -: 1201:		{ \
        -: 1202:		int c = '*'; \
        -: 1203:		int n; \
        -: 1204:		for ( n = 0; n < max_size && \
        -: 1205:			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
        -: 1206:			buf[n] = (char) c; \
        -: 1207:		if ( c == '\n' ) \
        -: 1208:			buf[n++] = (char) c; \
        -: 1209:		if ( c == EOF && ferror( yyin ) ) \
        -: 1210:			YY_FATAL_ERROR( "input in flex scanner failed" ); \
        -: 1211:		result = n; \
        -: 1212:		} \
        -: 1213:	else \
        -: 1214:		{ \
        -: 1215:		errno=0; \
        -: 1216:		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
        -: 1217:			{ \
        -: 1218:			if( errno != EINTR) \
        -: 1219:				{ \
        -: 1220:				YY_FATAL_ERROR( "input in flex scanner failed" ); \
        -: 1221:				break; \
        -: 1222:				} \
        -: 1223:			errno=0; \
        -: 1224:			clearerr(yyin); \
        -: 1225:			} \
        -: 1226:		}\
        -: 1227:\
        -: 1228:
        -: 1229:#endif
        -: 1230:
        -: 1231:/* No semi-colon after return; correct usage is to write "yyterminate();" -
        -: 1232: * we don't want an extra ';' after the "return" because that will cause
        -: 1233: * some compilers to complain about unreachable statements.
        -: 1234: */
        -: 1235:#ifndef yyterminate
        -: 1236:#define yyterminate() return YY_NULL
        -: 1237:#endif
        -: 1238:
        -: 1239:/* Number of entries by which start-condition stack grows. */
        -: 1240:#ifndef YY_START_STACK_INCR
        -: 1241:#define YY_START_STACK_INCR 25
        -: 1242:#endif
        -: 1243:
        -: 1244:/* Report a fatal error. */
        -: 1245:#ifndef YY_FATAL_ERROR
        -: 1246:#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
        -: 1247:#endif
        -: 1248:
        -: 1249:/* end tables serialization structures and prototypes */
        -: 1250:
        -: 1251:/* Default declaration of generated scanner - a define so the user can
        -: 1252: * easily add parameters.
        -: 1253: */
        -: 1254:#ifndef YY_DECL
        -: 1255:#define YY_DECL_IS_OURS 1
        -: 1256:
        -: 1257:extern int yylex \
        -: 1258:               (YYSTYPE * yylval_param , yyscan_t yyscanner);
        -: 1259:
        -: 1260:#define YY_DECL int yylex \
        -: 1261:               (YYSTYPE * yylval_param , yyscan_t yyscanner)
        -: 1262:#endif /* !YY_DECL */
        -: 1263:
        -: 1264:/* Code executed at the beginning of each rule, after yytext and yyleng
        -: 1265: * have been set up.
        -: 1266: */
        -: 1267:#ifndef YY_USER_ACTION
        -: 1268:#define YY_USER_ACTION
        -: 1269:#endif
        -: 1270:
        -: 1271:/* Code executed at the end of each rule. */
        -: 1272:#ifndef YY_BREAK
        -: 1273:#define YY_BREAK /*LINTED*/break;
        -: 1274:#endif
        -: 1275:
        -: 1276:#define YY_RULE_SETUP \
        -: 1277:	YY_USER_ACTION
        -: 1278:
        -: 1279:/** The main scanner function which does all the work.
        -: 1280: */
       92: 1281:YY_DECL
        -: 1282:{
        -: 1283:	yy_state_type yy_current_state;
        -: 1284:	char *yy_cp, *yy_bp;
        -: 1285:	int yy_act;
       92: 1286:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 1287:
       92: 1288:    yylval = yylval_param;
        -: 1289:
       92: 1290:	if ( !yyg->yy_init )
        -: 1291:		{
        7: 1292:		yyg->yy_init = 1;
        -: 1293:
        -: 1294:#ifdef YY_USER_INIT
        -: 1295:		YY_USER_INIT;
        -: 1296:#endif
        -: 1297:
        7: 1298:		if ( ! yyg->yy_start )
        7: 1299:			yyg->yy_start = 1;	/* first start state */
        -: 1300:
        7: 1301:		if ( ! yyin )
        7: 1302:			yyin = stdin;
        -: 1303:
        7: 1304:		if ( ! yyout )
        7: 1305:			yyout = stdout;
        -: 1306:
        7: 1307:		if ( ! YY_CURRENT_BUFFER ) {
    #####: 1308:			yyensure_buffer_stack (yyscanner);
    #####: 1309:			YY_CURRENT_BUFFER_LVALUE =
    #####: 1310:				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
        -: 1311:		}
        -: 1312:
        7: 1313:		yy_load_buffer_state( yyscanner );
        -: 1314:		}
        -: 1315:
        -: 1316:	{
        -: 1317:#line 163 "lexer.l"
        -: 1318:
        -: 1319:
        -: 1320:#line 1321 "lexer.c"
        -: 1321:
        -: 1322:	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
        -: 1323:		{
      167: 1324:		yy_cp = yyg->yy_c_buf_p;
        -: 1325:
        -: 1326:		/* Support of yytext. */
      167: 1327:		*yy_cp = yyg->yy_hold_char;
        -: 1328:
        -: 1329:		/* yy_bp points to the position in yy_ch_buf of the start of
        -: 1330:		 * the current run.
        -: 1331:		 */
      167: 1332:		yy_bp = yy_cp;
        -: 1333:
      167: 1334:		yy_current_state = yyg->yy_start;
      553: 1335:yy_match:
        -: 1336:		do
        -: 1337:			{
      553: 1338:			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
      553: 1339:			if ( yy_accept[yy_current_state] )
        -: 1340:				{
      341: 1341:				yyg->yy_last_accepting_state = yy_current_state;
      341: 1342:				yyg->yy_last_accepting_cpos = yy_cp;
        -: 1343:				}
      867: 1344:			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        -: 1345:				{
      314: 1346:				yy_current_state = (int) yy_def[yy_current_state];
      314: 1347:				if ( yy_current_state >= 258 )
      147: 1348:					yy_c = yy_meta[yy_c];
        -: 1349:				}
      553: 1350:			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
      553: 1351:			++yy_cp;
        -: 1352:			}
      553: 1353:		while ( yy_current_state != 257 );
      167: 1354:		yy_cp = yyg->yy_last_accepting_cpos;
      167: 1355:		yy_current_state = yyg->yy_last_accepting_state;
        -: 1356:
      174: 1357:yy_find_action:
      174: 1358:		yy_act = yy_accept[yy_current_state];
        -: 1359:
      174: 1360:		YY_DO_BEFORE_ACTION;
        -: 1361:
      174: 1362:		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
        -: 1363:			{
        -: 1364:			int yyl;
      182: 1365:			for ( yyl = 0; yyl < yyleng; ++yyl )
      112: 1366:				if ( yytext[yyl] == '\n' )
        -: 1367:					
    #####: 1368:    do{ yylineno++;
    #####: 1369:        yycolumn=0;
        -: 1370:    }while(0)
        -: 1371:;
        -: 1372:			}
        -: 1373:
      174: 1374:do_action:	/* This label is used only to access EOF actions. */
        -: 1375:
      180: 1376:		switch ( yy_act )
        -: 1377:	{ /* beginning of action switch */
    #####: 1378:			case 0: /* must back up */
        -: 1379:			/* undo the effects of YY_DO_BEFORE_ACTION */
    #####: 1380:			*yy_cp = yyg->yy_hold_char;
    #####: 1381:			yy_cp = yyg->yy_last_accepting_cpos;
    #####: 1382:			yy_current_state = yyg->yy_last_accepting_state;
    #####: 1383:			goto yy_find_action;
        -: 1384:
    #####: 1385:case 1:
        -: 1386:YY_RULE_SETUP
        -: 1387:#line 165 "lexer.l"
        -: 1388:{ return _DOT_DOT_;     }
        -: 1389:	YY_BREAK
        -: 1390:case 2:
        -: 1391:YY_RULE_SETUP
        -: 1392:#line 166 "lexer.l"
        -: 1393:{ return _LT_;          }
        -: 1394:	YY_BREAK
        -: 1395:case 3:
        -: 1396:YY_RULE_SETUP
        -: 1397:#line 167 "lexer.l"
        -: 1398:{ return _GT_;          }
        -: 1399:	YY_BREAK
        -: 1400:case 4:
        -: 1401:YY_RULE_SETUP
        -: 1402:#line 168 "lexer.l"
        -: 1403:{ return _LE_;          }
        -: 1404:	YY_BREAK
        -: 1405:case 5:
        -: 1406:YY_RULE_SETUP
        -: 1407:#line 169 "lexer.l"
        -: 1408:{ return _GE_;          }
        -: 1409:	YY_BREAK
        -: 1410:case 6:
        -: 1411:YY_RULE_SETUP
        -: 1412:#line 170 "lexer.l"
        -: 1413:{ return _EQ_;          }
        -: 1414:	YY_BREAK
        -: 1415:case 7:
        -: 1416:YY_RULE_SETUP
        -: 1417:#line 171 "lexer.l"
        -: 1418:{ return _NEQ_;         }
        -: 1419:	YY_BREAK
        -: 1420:case 8:
        -: 1421:YY_RULE_SETUP
        -: 1422:#line 172 "lexer.l"
        -: 1423:{ return _SHIFT_LEFT_;  }
        -: 1424:	YY_BREAK
        -: 1425:case 9:
        -: 1426:YY_RULE_SETUP
        -: 1427:#line 173 "lexer.l"
        -: 1428:{ return _SHIFT_RIGHT_; }
        -: 1429:	YY_BREAK
        -: 1430:case 10:
        -: 1431:YY_RULE_SETUP
        -: 1432:#line 174 "lexer.l"
        -: 1433:{ return _PRIVATE_;     }
        -: 1434:	YY_BREAK
        -: 1435:case 11:
        -: 1436:YY_RULE_SETUP
        -: 1437:#line 175 "lexer.l"
        -: 1438:{ return _GLOBAL_;      }
        -: 1439:	YY_BREAK
        -: 1440:case 12:
        -: 1441:YY_RULE_SETUP
        -: 1442:#line 176 "lexer.l"
        -: 1443:{ return _RULE_;        }
        -: 1444:	YY_BREAK
        -: 1445:case 13:
        -: 1446:YY_RULE_SETUP
        -: 1447:#line 177 "lexer.l"
        -: 1448:{ return _META_;        }
        -: 1449:	YY_BREAK
        -: 1450:case 14:
        -: 1451:YY_RULE_SETUP
        -: 1452:#line 178 "lexer.l"
        -: 1453:{ return _STRINGS_;     }
        -: 1454:	YY_BREAK
        -: 1455:case 15:
        -: 1456:YY_RULE_SETUP
        -: 1457:#line 179 "lexer.l"
        -: 1458:{ return _ASCII_;       }
        -: 1459:	YY_BREAK
        -: 1460:case 16:
        -: 1461:YY_RULE_SETUP
        -: 1462:#line 180 "lexer.l"
        -: 1463:{ return _WIDE_;        }
        -: 1464:	YY_BREAK
        -: 1465:case 17:
        -: 1466:YY_RULE_SETUP
        -: 1467:#line 181 "lexer.l"
        -: 1468:{ return _XOR_;         }
        -: 1469:	YY_BREAK
        -: 1470:case 18:
        -: 1471:YY_RULE_SETUP
        -: 1472:#line 182 "lexer.l"
        -: 1473:{ return _BASE64_;      }
        -: 1474:	YY_BREAK
        -: 1475:case 19:
        -: 1476:YY_RULE_SETUP
        -: 1477:#line 183 "lexer.l"
        -: 1478:{ return _BASE64_WIDE_; }
        -: 1479:	YY_BREAK
        -: 1480:case 20:
        -: 1481:YY_RULE_SETUP
        -: 1482:#line 184 "lexer.l"
        -: 1483:{ return _FULLWORD_;    }
        -: 1484:	YY_BREAK
        -: 1485:case 21:
        -: 1486:YY_RULE_SETUP
        -: 1487:#line 185 "lexer.l"
        -: 1488:{ return _NOCASE_;      }
        -: 1489:	YY_BREAK
        -: 1490:case 22:
        -: 1491:YY_RULE_SETUP
        -: 1492:#line 186 "lexer.l"
        -: 1493:{ return _CONDITION_;   }
        -: 1494:	YY_BREAK
        -: 1495:case 23:
        -: 1496:YY_RULE_SETUP
        -: 1497:#line 187 "lexer.l"
        -: 1498:{ return _TRUE_;        }
        -: 1499:	YY_BREAK
        -: 1500:case 24:
        -: 1501:YY_RULE_SETUP
        -: 1502:#line 188 "lexer.l"
        -: 1503:{ return _FALSE_;       }
        -: 1504:	YY_BREAK
        -: 1505:case 25:
        -: 1506:YY_RULE_SETUP
        -: 1507:#line 189 "lexer.l"
        -: 1508:{ return _NOT_;         }
        -: 1509:	YY_BREAK
        -: 1510:case 26:
        -: 1511:YY_RULE_SETUP
        -: 1512:#line 190 "lexer.l"
        -: 1513:{ return _AND_;         }
        -: 1514:	YY_BREAK
        -: 1515:case 27:
        -: 1516:YY_RULE_SETUP
        -: 1517:#line 191 "lexer.l"
        -: 1518:{ return _OR_;          }
        -: 1519:	YY_BREAK
        -: 1520:case 28:
        -: 1521:YY_RULE_SETUP
        -: 1522:#line 192 "lexer.l"
        -: 1523:{ return _AT_;          }
        -: 1524:	YY_BREAK
        -: 1525:case 29:
        -: 1526:YY_RULE_SETUP
        -: 1527:#line 193 "lexer.l"
        -: 1528:{ return _IN_;          }
        -: 1529:	YY_BREAK
        -: 1530:case 30:
        -: 1531:YY_RULE_SETUP
        -: 1532:#line 194 "lexer.l"
        -: 1533:{ return _OF_;          }
        -: 1534:	YY_BREAK
        -: 1535:case 31:
        -: 1536:YY_RULE_SETUP
        -: 1537:#line 195 "lexer.l"
        -: 1538:{ return _THEM_;        }
        -: 1539:	YY_BREAK
        -: 1540:case 32:
        -: 1541:YY_RULE_SETUP
        -: 1542:#line 196 "lexer.l"
        -: 1543:{ return _FOR_;         }
        -: 1544:	YY_BREAK
        -: 1545:case 33:
        -: 1546:YY_RULE_SETUP
        -: 1547:#line 197 "lexer.l"
        -: 1548:{ return _ALL_;         }
        -: 1549:	YY_BREAK
        -: 1550:case 34:
        -: 1551:YY_RULE_SETUP
        -: 1552:#line 198 "lexer.l"
        -: 1553:{ return _ANY_;         }
        -: 1554:	YY_BREAK
        -: 1555:case 35:
        -: 1556:YY_RULE_SETUP
        -: 1557:#line 199 "lexer.l"
        -: 1558:{ return _ENTRYPOINT_;  }
        -: 1559:	YY_BREAK
        -: 1560:case 36:
        -: 1561:YY_RULE_SETUP
        -: 1562:#line 200 "lexer.l"
        -: 1563:{ return _FILESIZE_;    }
        -: 1564:	YY_BREAK
        -: 1565:case 37:
        -: 1566:YY_RULE_SETUP
        -: 1567:#line 201 "lexer.l"
        -: 1568:{ return _MATCHES_;     }
        -: 1569:	YY_BREAK
        -: 1570:case 38:
        -: 1571:YY_RULE_SETUP
        -: 1572:#line 202 "lexer.l"
        -: 1573:{ return _CONTAINS_;    }
        -: 1574:	YY_BREAK
        -: 1575:case 39:
        -: 1576:YY_RULE_SETUP
        -: 1577:#line 203 "lexer.l"
        -: 1578:{ return _IMPORT_;      }
        -: 1579:	YY_BREAK
        -: 1580:case 40:
        -: 1581:YY_RULE_SETUP
        -: 1582:#line 206 "lexer.l"
        -: 1583:{ BEGIN(comment);       }
        -: 1584:	YY_BREAK
        -: 1585:case 41:
        -: 1586:YY_RULE_SETUP
        -: 1587:#line 207 "lexer.l"
        -: 1588:{ BEGIN(INITIAL);       }
        -: 1589:	YY_BREAK
        -: 1590:case 42:
        -: 1591:/* rule 42 can match eol */
        -: 1592:YY_RULE_SETUP
        -: 1593:#line 208 "lexer.l"
        -: 1594:{ /* skip comments */   }
        -: 1595:	YY_BREAK
        -: 1596:case 43:
        -: 1597:YY_RULE_SETUP
        -: 1598:#line 211 "lexer.l"
        -: 1599:{ /* skip single-line comments */ }
        -: 1600:	YY_BREAK
        -: 1601:case 44:
        -: 1602:YY_RULE_SETUP
        -: 1603:#line 214 "lexer.l"
        -: 1604:{
        -: 1605:                          yyextra->lex_buf_ptr = yyextra->lex_buf;
        -: 1606:                          yyextra->lex_buf_len = 0;
        -: 1607:                          BEGIN(include);
        -: 1608:                        }
        -: 1609:	YY_BREAK
        -: 1610:case 45:
        -: 1611:/* rule 45 can match eol */
        -: 1612:YY_RULE_SETUP
        -: 1613:#line 221 "lexer.l"
        -: 1614:{ yytext_to_buffer; }
        -: 1615:	YY_BREAK
        -: 1616:case 46:
        -: 1617:YY_RULE_SETUP
        -: 1618:#line 224 "lexer.l"
        -: 1619:{
        -: 1620:
        -: 1621:  if (compiler->include_callback != NULL)
        -: 1622:  {
        -: 1623:    #ifdef _MSC_VER
        -: 1624:    char* b = NULL;
        -: 1625:    #endif
        -: 1626:    char* s = NULL;
        -: 1627:    char* f;
        -: 1628:
        -: 1629:    char buffer[1024];
        -: 1630:    const char* included_rules;
        -: 1631:    char* current_file_name;
        -: 1632:    char* include_path;
        -: 1633:
        -: 1634:    *yyextra->lex_buf_ptr = '\0'; // null-terminate included file path
        -: 1635:
        -: 1636:    current_file_name = yr_compiler_get_current_file_name(compiler);
        -: 1637:
        -: 1638:    if (current_file_name == NULL ||
        -: 1639:        compiler->include_callback != _yr_compiler_default_include_callback ||
        -: 1640:        is_absolute_path(yyextra->lex_buf))
        -: 1641:    {
        -: 1642:      include_path = yyextra->lex_buf;
        -: 1643:    }
        -: 1644:    else
        -: 1645:    {
        -: 1646:      strlcpy(buffer, current_file_name, sizeof(buffer));
        -: 1647:      s = strrchr(buffer, '/');
        -: 1648:
        -: 1649:      #ifdef _MSC_VER
        -: 1650:      b = strrchr(buffer, '\\'); // in Windows both path delimiters are accepted
        -: 1651:      #endif
        -: 1652:
        -: 1653:      #ifdef _MSC_VER
        -: 1654:      if (s != NULL || b != NULL)
        -: 1655:      #else
        -: 1656:      if (s != NULL)
        -: 1657:      #endif
        -: 1658:      {
        -: 1659:        #ifdef _MSC_VER
        -: 1660:        f = (b > s) ? (b + 1) : (s + 1);
        -: 1661:        #else
        -: 1662:        f = s + 1;
        -: 1663:        #endif
        -: 1664:
        -: 1665:        strlcpy(f, yyextra->lex_buf, sizeof(buffer) - (f - buffer));
        -: 1666:        include_path = buffer;
        -: 1667:      }
        -: 1668:      else
        -: 1669:      {
        -: 1670:        include_path = yyextra->lex_buf;
        -: 1671:      }
        -: 1672:    }
        -: 1673:
        -: 1674:    YR_NAMESPACE* ns = (YR_NAMESPACE*) yr_arena_get_ptr(
        -: 1675:        compiler->arena,
        -: 1676:        YR_NAMESPACES_TABLE,
        -: 1677:        compiler->current_namespace_idx * sizeof(struct YR_NAMESPACE));
        -: 1678:
        -: 1679:    included_rules = compiler->include_callback(
        -: 1680:        include_path,
        -: 1681:        current_file_name,
        -: 1682:        ns->name,
        -: 1683:        compiler->incl_clbk_user_data);
        -: 1684:
        -: 1685:    if (included_rules != NULL)
        -: 1686:    {
        -: 1687:      int error_code = _yr_compiler_push_file_name(compiler, include_path);
        -: 1688:
        -: 1689:      if (error_code != ERROR_SUCCESS)
        -: 1690:      {
        -: 1691:        if (error_code == ERROR_INCLUDES_CIRCULAR_REFERENCE)
        -: 1692:        {
        -: 1693:          yyerror(yyscanner, compiler, "includes circular reference");
        -: 1694:        }
        -: 1695:        else if (error_code == ERROR_INCLUDE_DEPTH_EXCEEDED)
        -: 1696:        {
        -: 1697:          yyerror(yyscanner, compiler, "includes depth exceeded");
        -: 1698:        }
        -: 1699:
        -: 1700:        if (compiler->include_free != NULL)
        -: 1701:        {
        -: 1702:          compiler->include_free(included_rules, compiler->incl_clbk_user_data);
        -: 1703:        }
        -: 1704:
        -: 1705:        yyterminate();
        -: 1706:      }
        -: 1707:
        -: 1708:      // Workaround for flex issue: https://github.com/westes/flex/issues/58
        -: 1709:      yypush_buffer_state(YY_CURRENT_BUFFER, yyscanner);
        -: 1710:      yy_scan_string(included_rules, yyscanner);
        -: 1711:      yyset_lineno(1, yyscanner);
        -: 1712:
        -: 1713:      if (compiler->include_free != NULL)
        -: 1714:      {
        -: 1715:        compiler->include_free(included_rules, compiler->incl_clbk_user_data);
        -: 1716:      }
        -: 1717:    }
        -: 1718:    else
        -: 1719:    {
        -: 1720:      char* err_msg_fmt;
        -: 1721:      char err_msg[512];
        -: 1722:
        -: 1723:      if (compiler->include_callback == _yr_compiler_default_include_callback)
        -: 1724:      {
        -: 1725:        err_msg_fmt = "can't open include file: %s";
        -: 1726:      }
        -: 1727:      else
        -: 1728:      {
        -: 1729:        err_msg_fmt = "callback failed to provide include resource: %s";
        -: 1730:      }
        -: 1731:
        -: 1732:      snprintf(
        -: 1733:          err_msg,
        -: 1734:          sizeof(err_msg),
        -: 1735:          err_msg_fmt,
        -: 1736:          yyextra->lex_buf);
        -: 1737:
        -: 1738:      yyerror(yyscanner, compiler, err_msg);
        -: 1739:    }
        -: 1740:
        -: 1741:  }
        -: 1742:  else // not allowing includes
        -: 1743:  {
        -: 1744:    yyerror(yyscanner, compiler, "includes are disabled");
        -: 1745:  }
        -: 1746:
        -: 1747:  BEGIN(INITIAL);
        -: 1748:}
        -: 1749:	YY_BREAK
        -: 1750:case YY_STATE_EOF(INITIAL):
        -: 1751:case YY_STATE_EOF(str):
        -: 1752:case YY_STATE_EOF(regexp):
        -: 1753:case YY_STATE_EOF(include):
        -: 1754:case YY_STATE_EOF(comment):
        -: 1755:#line 356 "lexer.l"
        -: 1756:{
        -: 1757:
        -: 1758:  yypop_buffer_state(yyscanner);
        -: 1759:
        -: 1760:  if (!YY_CURRENT_BUFFER)
        -: 1761:    yyterminate();
        -: 1762:
        -: 1763:  return _END_OF_INCLUDED_FILE_;
        -: 1764:}
        -: 1765:	YY_BREAK
        -: 1766:case 47:
        -: 1767:YY_RULE_SETUP
        -: 1768:#line 367 "lexer.l"
        -: 1769:{
        -: 1770:
        -: 1771:  yylval->c_string = yr_strdup(yytext);
        -: 1772:
        -: 1773:  if (yylval->c_string == NULL)
        -: 1774:    error(ERROR_INSUFFICIENT_MEMORY);
        -: 1775:
        -: 1776:  return _STRING_IDENTIFIER_WITH_WILDCARD_;
        -: 1777:}
        -: 1778:	YY_BREAK
        -: 1779:case 48:
        -: 1780:YY_RULE_SETUP
        -: 1781:#line 378 "lexer.l"
        -: 1782:{
        -: 1783:
        -: 1784:  yylval->c_string = yr_strdup(yytext);
        -: 1785:
        -: 1786:  if (yylval->c_string == NULL)
        -: 1787:    error(ERROR_INSUFFICIENT_MEMORY);
        -: 1788:
        -: 1789:  return _STRING_IDENTIFIER_;
        -: 1790:}
        -: 1791:	YY_BREAK
        -: 1792:case 49:
        -: 1793:YY_RULE_SETUP
        -: 1794:#line 389 "lexer.l"
        -: 1795:{
        -: 1796:
        -: 1797:  yylval->c_string = yr_strdup(yytext);
        -: 1798:
        -: 1799:  if (yylval->c_string == NULL)
        -: 1800:  {
        -: 1801:    error(ERROR_INSUFFICIENT_MEMORY);
        -: 1802:  }
        -: 1803:  else
        -: 1804:  {
        -: 1805:    yylval->c_string[0] = '$'; /* replace # by $*/
        -: 1806:  }
        -: 1807:
        -: 1808:  return _STRING_COUNT_;
        -: 1809:}
        -: 1810:	YY_BREAK
        -: 1811:case 50:
        -: 1812:YY_RULE_SETUP
        -: 1813:#line 406 "lexer.l"
        -: 1814:{
        -: 1815:
        -: 1816:  yylval->c_string = yr_strdup(yytext);
        -: 1817:
        -: 1818:  if (yylval->c_string == NULL)
        -: 1819:  {
        -: 1820:    error(ERROR_INSUFFICIENT_MEMORY);
        -: 1821:  }
        -: 1822:  else
        -: 1823:  {
        -: 1824:    yylval->c_string[0] = '$'; /* replace @ by $*/
        -: 1825:  }
        -: 1826:
        -: 1827:  return _STRING_OFFSET_;
        -: 1828:}
        -: 1829:	YY_BREAK
        -: 1830:case 51:
        -: 1831:YY_RULE_SETUP
        -: 1832:#line 423 "lexer.l"
        -: 1833:{
        -: 1834:
        -: 1835:  yylval->c_string = yr_strdup(yytext);
        -: 1836:
        -: 1837:  if (yylval->c_string == NULL)
        -: 1838:  {
        -: 1839:    error(ERROR_INSUFFICIENT_MEMORY);
        -: 1840:  }
        -: 1841:  else
        -: 1842:  {
        -: 1843:    yylval->c_string[0] = '$'; /* replace ! by $*/
        -: 1844:  }
        -: 1845:
        -: 1846:  return _STRING_LENGTH_;
        -: 1847:}
        -: 1848:	YY_BREAK
        -: 1849:case 52:
        -: 1850:YY_RULE_SETUP
        -: 1851:#line 440 "lexer.l"
        -: 1852:{
        -: 1853:
        -: 1854:  char* text = yytext;
        -: 1855:
        -: 1856:  if (*text == 'u')
        -: 1857:  {
        -: 1858:    yylval->integer = 3;
        -: 1859:    text++;
        -: 1860:  }
        -: 1861:  else
        -: 1862:  {
        -: 1863:    yylval->integer = 0;
        -: 1864:  }
        -: 1865:
        -: 1866:  if (strstr(text, "int8") == text)
        -: 1867:  {
        -: 1868:    yylval->integer += 0;
        -: 1869:    text += 4;
        -: 1870:  }
        -: 1871:  else if (strstr(text, "int16") == text)
        -: 1872:  {
        -: 1873:    yylval->integer += 1;
        -: 1874:    text += 5;
        -: 1875:  }
        -: 1876:  else if (strstr(text, "int32") == text)
        -: 1877:  {
        -: 1878:    yylval->integer += 2;
        -: 1879:    text += 5;
        -: 1880:  }
        -: 1881:
        -: 1882:  if (strcmp(text, "be") == 0)
        -: 1883:  {
        -: 1884:    yylval->integer += 6;
        -: 1885:  }
        -: 1886:
        -: 1887:  return _INTEGER_FUNCTION_;
        -: 1888:}
        -: 1889:	YY_BREAK
        -: 1890:case 53:
        -: 1891:YY_RULE_SETUP
        -: 1892:#line 479 "lexer.l"
        -: 1893:{
        -: 1894:
        -: 1895:  if (strlen(yytext) > 128)
        -: 1896:    syntax_error("identifier too long");
        -: 1897:
        -: 1898:  yylval->c_string = yr_strdup(yytext);
        -: 1899:
        -: 1900:  if (yylval->c_string == NULL)
        -: 1901:    error(ERROR_INSUFFICIENT_MEMORY);
        -: 1902:
        -: 1903:  return _IDENTIFIER_;
        -: 1904:}
        -: 1905:	YY_BREAK
        -: 1906:case 54:
        -: 1907:YY_RULE_SETUP
        -: 1908:#line 493 "lexer.l"
        -: 1909:{
        -: 1910:
        -: 1911:  char *endptr;
        -: 1912:
        -: 1913:  errno = 0;
        -: 1914:  yylval->integer = strtoll(yytext, &endptr, 10);
        -: 1915:
        -: 1916:  if (yylval->integer == LLONG_MAX && errno == ERANGE)
        -: 1917:  {
        -: 1918:    yr_compiler_set_error_extra_info(compiler, yytext);
        -: 1919:    error(ERROR_INTEGER_OVERFLOW);
        -: 1920:  }
        -: 1921:  else if (strstr(yytext, "KB") != NULL)
        -: 1922:  {
        -: 1923:    if (yylval->integer > LLONG_MAX / 1024)
        -: 1924:    {
        -: 1925:      yr_compiler_set_error_extra_info(compiler, yytext);
        -: 1926:      error(ERROR_INTEGER_OVERFLOW);
        -: 1927:    }
        -: 1928:    else
        -: 1929:    {
        -: 1930:      yylval->integer *= 1024;
        -: 1931:    }
        -: 1932:  }
        -: 1933:  else if (strstr(yytext, "MB") != NULL)
        -: 1934:  {
        -: 1935:    if (yylval->integer > LLONG_MAX / 1048576)
        -: 1936:    {
        -: 1937:      yr_compiler_set_error_extra_info(compiler, yytext);
        -: 1938:      error(ERROR_INTEGER_OVERFLOW);
        -: 1939:    }
        -: 1940:    else
        -: 1941:    {
        -: 1942:      yylval->integer *= 1048576;
        -: 1943:    }
        -: 1944:  }
        -: 1945:
        -: 1946:  return _NUMBER_;
        -: 1947:}
        -: 1948:	YY_BREAK
        -: 1949:case 55:
        -: 1950:YY_RULE_SETUP
        -: 1951:#line 533 "lexer.l"
        -: 1952:{
        -: 1953:  yylval->double_ = atof(yytext);
        -: 1954:  return _DOUBLE_;
        -: 1955:}
        -: 1956:	YY_BREAK
        -: 1957:case 56:
        -: 1958:YY_RULE_SETUP
        -: 1959:#line 538 "lexer.l"
        -: 1960:{
        -: 1961:
        -: 1962:  char *endptr;
        -: 1963:
        -: 1964:  errno = 0;
        -: 1965:  yylval->integer = strtoll(yytext, &endptr, 16);
        -: 1966:
        -: 1967:  if (yylval->integer == LLONG_MAX && errno == ERANGE)
        -: 1968:  {
        -: 1969:    yr_compiler_set_error_extra_info(compiler, yytext);
        -: 1970:    error(ERROR_INTEGER_OVERFLOW);
        -: 1971:  }
        -: 1972:
        -: 1973:  return _NUMBER_;
        -: 1974:}
        -: 1975:	YY_BREAK
        -: 1976:case 57:
        -: 1977:YY_RULE_SETUP
        -: 1978:#line 554 "lexer.l"
        -: 1979:{
        -: 1980:
        -: 1981:  char *endptr;
        -: 1982:
        -: 1983:  errno = 0;
        -: 1984:  yylval->integer = strtoll(yytext + 2, &endptr, 8);
        -: 1985:
        -: 1986:  if (yylval->integer == LLONG_MAX && errno == ERANGE)
        -: 1987:  {
        -: 1988:    yr_compiler_set_error_extra_info(compiler, yytext);
        -: 1989:    error(ERROR_INTEGER_OVERFLOW);
        -: 1990:  }
        -: 1991:
        -: 1992:  return _NUMBER_;
        -: 1993:}
        -: 1994:	YY_BREAK
        -: 1995:case 58:
        -: 1996:YY_RULE_SETUP
        -: 1997:#line 571 "lexer.l"
        -: 1998:{     /* saw closing quote - all done */
        -: 1999:
        -: 2000:  alloc_sized_string(s, yyextra->lex_buf_len);
        -: 2001:
        -: 2002:  *yyextra->lex_buf_ptr = '\0';
        -: 2003:  memcpy(s->c_string, yyextra->lex_buf, yyextra->lex_buf_len + 1);
        -: 2004:  yylval->sized_string = s;
        -: 2005:
        -: 2006:  BEGIN(INITIAL);
        -: 2007:
        -: 2008:  return _TEXT_STRING_;
        -: 2009:}
        -: 2010:	YY_BREAK
        -: 2011:case 59:
        -: 2012:YY_RULE_SETUP
        -: 2013:#line 585 "lexer.l"
        -: 2014:{
        -: 2015:
        -: 2016:  lex_check_space_ok("\t", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 2017:  *yyextra->lex_buf_ptr++ = '\t';
        -: 2018:  yyextra->lex_buf_len++;
        -: 2019:}
        -: 2020:	YY_BREAK
        -: 2021:case 60:
        -: 2022:YY_RULE_SETUP
        -: 2023:#line 593 "lexer.l"
        -: 2024:{
        -: 2025:
        -: 2026:  lex_check_space_ok("\n", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 2027:  *yyextra->lex_buf_ptr++ = '\n';
        -: 2028:  yyextra->lex_buf_len++;
        -: 2029:}
        -: 2030:	YY_BREAK
        -: 2031:case 61:
        -: 2032:YY_RULE_SETUP
        -: 2033:#line 601 "lexer.l"
        -: 2034:{
        -: 2035:
        -: 2036:  lex_check_space_ok("\"", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 2037:  *yyextra->lex_buf_ptr++ = '\"';
        -: 2038:  yyextra->lex_buf_len++;
        -: 2039:}
        -: 2040:	YY_BREAK
        -: 2041:case 62:
        -: 2042:YY_RULE_SETUP
        -: 2043:#line 609 "lexer.l"
        -: 2044:{
        -: 2045:
        -: 2046:  lex_check_space_ok("\\", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 2047:  *yyextra->lex_buf_ptr++ = '\\';
        -: 2048:  yyextra->lex_buf_len++;
        -: 2049:}
        -: 2050:	YY_BREAK
        -: 2051:case 63:
        -: 2052:YY_RULE_SETUP
        -: 2053:#line 617 "lexer.l"
        -: 2054:{
        -: 2055:
        -: 2056:   int result;
        -: 2057:
        -: 2058:   sscanf( yytext + 2, "%x", &result );
        -: 2059:   lex_check_space_ok("X", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 2060:   *yyextra->lex_buf_ptr++ = result;
        -: 2061:   yyextra->lex_buf_len++;
        -: 2062:}
        -: 2063:	YY_BREAK
        -: 2064:case 64:
        -: 2065:YY_RULE_SETUP
        -: 2066:#line 628 "lexer.l"
        -: 2067:{ yytext_to_buffer; }
        -: 2068:	YY_BREAK
        -: 2069:case 65:
        -: 2070:/* rule 65 can match eol */
        -: 2071:YY_RULE_SETUP
        -: 2072:#line 631 "lexer.l"
        -: 2073:{
        -: 2074:  syntax_error("unterminated string");
        -: 2075:}
        -: 2076:	YY_BREAK
        -: 2077:case 66:
        -: 2078:/* rule 66 can match eol */
        -: 2079:YY_RULE_SETUP
        -: 2080:#line 636 "lexer.l"
        -: 2081:{
        -: 2082:  syntax_error("illegal escape sequence");
        -: 2083:}
        -: 2084:	YY_BREAK
        -: 2085:case 67:
        -: 2086:YY_RULE_SETUP
        -: 2087:#line 641 "lexer.l"
        -: 2088:{
        -: 2089:
        -: 2090:  if (yyextra->lex_buf_len > 0)
        -: 2091:  {
        -: 2092:    alloc_sized_string(s, yyextra->lex_buf_len);
        -: 2093:
        -: 2094:    if (yytext[1] == 'i')
        -: 2095:      s->flags |= SIZED_STRING_FLAGS_NO_CASE;
        -: 2096:
        -: 2097:    if (yytext[1] == 's' || yytext[2] == 's')
        -: 2098:      s->flags |= SIZED_STRING_FLAGS_DOT_ALL;
        -: 2099:
        -: 2100:    *yyextra->lex_buf_ptr = '\0';
        -: 2101:    strlcpy(s->c_string, yyextra->lex_buf, s->length + 1);
        -: 2102:    yylval->sized_string = s;
        -: 2103:  }
        -: 2104:  else
        -: 2105:  {
        -: 2106:    syntax_error("empty regular expression");
        -: 2107:  }
        -: 2108:
        -: 2109:  BEGIN(INITIAL);
        -: 2110:  return _REGEXP_;
        -: 2111:}
        -: 2112:	YY_BREAK
        -: 2113:case 68:
        -: 2114:YY_RULE_SETUP
        -: 2115:#line 667 "lexer.l"
        -: 2116:{
        -: 2117:
        -: 2118:  lex_check_space_ok("/", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 2119:  *yyextra->lex_buf_ptr++ = '/';
        -: 2120:  yyextra->lex_buf_len++ ;
        -: 2121:}
        -: 2122:	YY_BREAK
        -: 2123:case 69:
        -: 2124:YY_RULE_SETUP
        -: 2125:#line 675 "lexer.l"
        -: 2126:{
        -: 2127:
        -: 2128:  lex_check_space_ok("\\.", yyextra->lex_buf_len, YR_LEX_BUF_SIZE);
        -: 2129:
        -: 2130:  if (yytext[1] == 0)
        -: 2131:    syntax_error("malformed regular expression");
        -: 2132:
        -: 2133:  *yyextra->lex_buf_ptr++ = yytext[0];
        -: 2134:  *yyextra->lex_buf_ptr++ = yytext[1];
        -: 2135:  yyextra->lex_buf_len += 2;
        -: 2136:}
        -: 2137:	YY_BREAK
        -: 2138:case 70:
        -: 2139:YY_RULE_SETUP
        -: 2140:#line 688 "lexer.l"
        -: 2141:{ yytext_to_buffer; }
        -: 2142:	YY_BREAK
        -: 2143:case 71:
        -: 2144:/* rule 71 can match eol */
        -: 2145:YY_RULE_SETUP
        -: 2146:#line 691 "lexer.l"
        -: 2147:{
        -: 2148:  syntax_error("unterminated regular expression");
        -: 2149:}
        -: 2150:	YY_BREAK
        -: 2151:case 72:
        -: 2152:YY_RULE_SETUP
        -: 2153:#line 696 "lexer.l"
        -: 2154:{
        -: 2155:
        -: 2156:  yylval->sized_string = NULL;
        -: 2157:  yyextra->lex_buf_ptr = yyextra->lex_buf;
        -: 2158:  yyextra->lex_buf_len = 0;
        -: 2159:  BEGIN(str);
        -: 2160:}
        -: 2161:	YY_BREAK
        -: 2162:case 73:
        -: 2163:YY_RULE_SETUP
        -: 2164:#line 705 "lexer.l"
        -: 2165:{
        -: 2166:
        -: 2167:  yylval->sized_string = NULL;
        -: 2168:  yyextra->lex_buf_ptr = yyextra->lex_buf;
        -: 2169:  yyextra->lex_buf_len = 0;
        -: 2170:  BEGIN(regexp);
        -: 2171:}
        -: 2172:	YY_BREAK
        -: 2173:case 74:
        -: 2174:/* rule 74 can match eol */
        -: 2175:YY_RULE_SETUP
        -: 2176:#line 714 "lexer.l"
        -: 2177:{
        -: 2178:  // Match hex-digits with whitespace or comments. The latter are stripped
        -: 2179:  // out by hex_lexer.l
        -: 2180:  // TODO(vmalvarez): Integrate the hex string lexer and parser into this one,
        -: 2181:  // by having a single lexer/parser instead of two different ones we can avoid
        -: 2182:  // complex regular expressions like the one above, which is actually trying to
        -: 2183:  // do some parsing in the lexer.
        -: 2184:
        -: 2185:  alloc_sized_string(s, strlen(yytext));
        -: 2186:
        -: 2187:  strlcpy(s->c_string, yytext, s->length + 1);
        -: 2188:  yylval->sized_string = s;
        -: 2189:
        -: 2190:  return _HEX_STRING_;
        -: 2191:}
        -: 2192:	YY_BREAK
        -: 2193:case 75:
        -: 2194:/* rule 75 can match eol */
        -: 2195:YY_RULE_SETUP
        -: 2196:#line 731 "lexer.l"
        -: 2197:/* skip whitespace */
        -: 2198:	YY_BREAK
        -: 2199:case 76:
        -: 2200:YY_RULE_SETUP
        -: 2201:#line 733 "lexer.l"
        -: 2202:{
        -: 2203:
        -: 2204:  if (yytext[0] >= 32 && yytext[0] < 127)
        -: 2205:  {
        -: 2206:    return yytext[0];
        -: 2207:  }
        -: 2208:  else
        -: 2209:  {
        -: 2210:    syntax_error("non-ascii character");
        -: 2211:  }
        -: 2212:}
        -: 2213:	YY_BREAK
        -: 2214:case 77:
        -: 2215:YY_RULE_SETUP
        -: 2216:#line 745 "lexer.l"
        -: 2217:ECHO;
        -: 2218:	YY_BREAK
        -: 2219:#line 2220 "lexer.c"
        -: 2220:
       13: 2221:	case YY_END_OF_BUFFER:
        -: 2222:		{
        -: 2223:		/* Amount of text matched not including the EOB char. */
       13: 2224:		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;
        -: 2225:
        -: 2226:		/* Undo the effects of YY_DO_BEFORE_ACTION. */
       13: 2227:		*yy_cp = yyg->yy_hold_char;
        -: 2228:		YY_RESTORE_YY_MORE_OFFSET
        -: 2229:
       13: 2230:		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
        -: 2231:			{
        -: 2232:			/* We're scanning a new file or input source.  It's
        -: 2233:			 * possible that this happened because the user
        -: 2234:			 * just pointed yyin at a new source and called
        -: 2235:			 * yylex().  If so, then we have to assure
        -: 2236:			 * consistency between YY_CURRENT_BUFFER and our
        -: 2237:			 * globals.  Here is the right place to do so, because
        -: 2238:			 * this is the first action (other than possibly a
        -: 2239:			 * back-up) that will match for the new input source.
        -: 2240:			 */
        7: 2241:			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
        7: 2242:			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
        7: 2243:			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
        -: 2244:			}
        -: 2245:
        -: 2246:		/* Note that here we test for yy_c_buf_p "<=" to the position
        -: 2247:		 * of the first EOB in the buffer, since yy_c_buf_p will
        -: 2248:		 * already have been incremented past the NUL character
        -: 2249:		 * (since all states make transitions on EOB to the
        -: 2250:		 * end-of-buffer state).  Contrast this with the test
        -: 2251:		 * in input().
        -: 2252:		 */
       13: 2253:		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
        -: 2254:			{ /* This was really a NUL. */
        -: 2255:			yy_state_type yy_next_state;
        -: 2256:
    #####: 2257:			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;
        -: 2258:
    #####: 2259:			yy_current_state = yy_get_previous_state( yyscanner );
        -: 2260:
        -: 2261:			/* Okay, we're now positioned to make the NUL
        -: 2262:			 * transition.  We couldn't have
        -: 2263:			 * yy_get_previous_state() go ahead and do it
        -: 2264:			 * for us because it doesn't know how to deal
        -: 2265:			 * with the possibility of jamming (and we don't
        -: 2266:			 * want to build jamming into it because then it
        -: 2267:			 * will run more slowly).
        -: 2268:			 */
        -: 2269:
    #####: 2270:			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);
        -: 2271:
    #####: 2272:			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
        -: 2273:
    #####: 2274:			if ( yy_next_state )
        -: 2275:				{
        -: 2276:				/* Consume the NUL. */
    #####: 2277:				yy_cp = ++yyg->yy_c_buf_p;
    #####: 2278:				yy_current_state = yy_next_state;
    #####: 2279:				goto yy_match;
        -: 2280:				}
        -: 2281:
        -: 2282:			else
        -: 2283:				{
    #####: 2284:				yy_cp = yyg->yy_last_accepting_cpos;
    #####: 2285:				yy_current_state = yyg->yy_last_accepting_state;
    #####: 2286:				goto yy_find_action;
        -: 2287:				}
        -: 2288:			}
        -: 2289:
       13: 2290:		else switch ( yy_get_next_buffer( yyscanner ) )
        -: 2291:			{
        6: 2292:			case EOB_ACT_END_OF_FILE:
        -: 2293:				{
        6: 2294:				yyg->yy_did_buffer_switch_on_eof = 0;
        -: 2295:
        -: 2296:				if ( yywrap( yyscanner ) )
        -: 2297:					{
        -: 2298:					/* Note: because we've taken care in
        -: 2299:					 * yy_get_next_buffer() to have set up
        -: 2300:					 * yytext, we can now set up
        -: 2301:					 * yy_c_buf_p so that if some total
        -: 2302:					 * hoser (like flex itself) wants to
        -: 2303:					 * call the scanner after we return the
        -: 2304:					 * YY_NULL, it'll still work - another
        -: 2305:					 * YY_NULL will get returned.
        -: 2306:					 */
        6: 2307:					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;
        -: 2308:
        6: 2309:					yy_act = YY_STATE_EOF(YY_START);
        6: 2310:					goto do_action;
        -: 2311:					}
        -: 2312:
        -: 2313:				else
        -: 2314:					{
        -: 2315:					if ( ! yyg->yy_did_buffer_switch_on_eof )
        -: 2316:						YY_NEW_FILE;
        -: 2317:					}
        -: 2318:				break;
        -: 2319:				}
        -: 2320:
    #####: 2321:			case EOB_ACT_CONTINUE_SCAN:
    #####: 2322:				yyg->yy_c_buf_p =
    #####: 2323:					yyg->yytext_ptr + yy_amount_of_matched_text;
        -: 2324:
    #####: 2325:				yy_current_state = yy_get_previous_state( yyscanner );
        -: 2326:
    #####: 2327:				yy_cp = yyg->yy_c_buf_p;
    #####: 2328:				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
    #####: 2329:				goto yy_match;
        -: 2330:
        7: 2331:			case EOB_ACT_LAST_MATCH:
        7: 2332:				yyg->yy_c_buf_p =
        7: 2333:				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];
        -: 2334:
        7: 2335:				yy_current_state = yy_get_previous_state( yyscanner );
        -: 2336:
        7: 2337:				yy_cp = yyg->yy_c_buf_p;
        7: 2338:				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
        7: 2339:				goto yy_find_action;
        -: 2340:			}
    #####: 2341:		break;
        -: 2342:		}
        -: 2343:
    #####: 2344:	default:
    #####: 2345:		YY_FATAL_ERROR(
        -: 2346:			"fatal flex scanner internal error--no action found" );
        -: 2347:	} /* end of action switch */
        -: 2348:		} /* end of scanning one token */
        -: 2349:	} /* end of user's declarations */
        -: 2350:} /* end of yylex */
        -: 2351:
        -: 2352:/* yy_get_next_buffer - try to read in a new buffer
        -: 2353: *
        -: 2354: * Returns a code representing an action:
        -: 2355: *	EOB_ACT_LAST_MATCH -
        -: 2356: *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
        -: 2357: *	EOB_ACT_END_OF_FILE - end of file
        -: 2358: */
       13: 2359:static int yy_get_next_buffer (yyscan_t yyscanner)
        -: 2360:{
       13: 2361:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
       13: 2362:	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
       13: 2363:	char *source = yyg->yytext_ptr;
        -: 2364:	int number_to_move, i;
        -: 2365:	int ret_val;
        -: 2366:
       13: 2367:	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
    #####: 2368:		YY_FATAL_ERROR(
        -: 2369:		"fatal flex scanner internal error--end of buffer missed" );
        -: 2370:
       13: 2371:	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
        -: 2372:		{ /* Don't try to fill the buffer, so this is an EOF. */
       13: 2373:		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
        -: 2374:			{
        -: 2375:			/* We matched a single character, the EOB, so
        -: 2376:			 * treat this as a final EOF.
        -: 2377:			 */
        6: 2378:			return EOB_ACT_END_OF_FILE;
        -: 2379:			}
        -: 2380:
        -: 2381:		else
        -: 2382:			{
        -: 2383:			/* We matched some text prior to the EOB, first
        -: 2384:			 * process it.
        -: 2385:			 */
        7: 2386:			return EOB_ACT_LAST_MATCH;
        -: 2387:			}
        -: 2388:		}
        -: 2389:
        -: 2390:	/* Try to read more data. */
        -: 2391:
        -: 2392:	/* First move last chars to start of buffer. */
    #####: 2393:	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);
        -: 2394:
    #####: 2395:	for ( i = 0; i < number_to_move; ++i )
    #####: 2396:		*(dest++) = *(source++);
        -: 2397:
    #####: 2398:	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        -: 2399:		/* don't do the read, it's not guaranteed to return an EOF,
        -: 2400:		 * just force an EOF
        -: 2401:		 */
    #####: 2402:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;
        -: 2403:
        -: 2404:	else
        -: 2405:		{
    #####: 2406:			int num_to_read =
    #####: 2407:			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
        -: 2408:
    #####: 2409:		while ( num_to_read <= 0 )
        -: 2410:			{ /* Not enough room in the buffer - grow it. */
        -: 2411:
        -: 2412:			/* just a shorter name for the current buffer */
    #####: 2413:			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;
        -: 2414:
    #####: 2415:			int yy_c_buf_p_offset =
    #####: 2416:				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);
        -: 2417:
    #####: 2418:			if ( b->yy_is_our_buffer )
        -: 2419:				{
    #####: 2420:				int new_size = b->yy_buf_size * 2;
        -: 2421:
    #####: 2422:				if ( new_size <= 0 )
    #####: 2423:					b->yy_buf_size += b->yy_buf_size / 8;
        -: 2424:				else
    #####: 2425:					b->yy_buf_size *= 2;
        -: 2426:
    #####: 2427:				b->yy_ch_buf = (char *)
        -: 2428:					/* Include room in for 2 EOB chars. */
    #####: 2429:					yyrealloc( (void *) b->yy_ch_buf,
    #####: 2430:							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
        -: 2431:				}
        -: 2432:			else
        -: 2433:				/* Can't grow it, we don't own it. */
    #####: 2434:				b->yy_ch_buf = NULL;
        -: 2435:
    #####: 2436:			if ( ! b->yy_ch_buf )
    #####: 2437:				YY_FATAL_ERROR(
        -: 2438:				"fatal error - scanner input buffer overflow" );
        -: 2439:
    #####: 2440:			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
        -: 2441:
    #####: 2442:			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
        -: 2443:						number_to_move - 1;
        -: 2444:
        -: 2445:			}
        -: 2446:
    #####: 2447:		if ( num_to_read > YY_READ_BUF_SIZE )
    #####: 2448:			num_to_read = YY_READ_BUF_SIZE;
        -: 2449:
        -: 2450:		/* Read in more data. */
    #####: 2451:		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
        -: 2452:			yyg->yy_n_chars, num_to_read );
        -: 2453:
    #####: 2454:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        -: 2455:		}
        -: 2456:
    #####: 2457:	if ( yyg->yy_n_chars == 0 )
        -: 2458:		{
    #####: 2459:		if ( number_to_move == YY_MORE_ADJ )
        -: 2460:			{
    #####: 2461:			ret_val = EOB_ACT_END_OF_FILE;
    #####: 2462:			yyrestart( yyin  , yyscanner);
        -: 2463:			}
        -: 2464:
        -: 2465:		else
        -: 2466:			{
    #####: 2467:			ret_val = EOB_ACT_LAST_MATCH;
    #####: 2468:			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
        -: 2469:				YY_BUFFER_EOF_PENDING;
        -: 2470:			}
        -: 2471:		}
        -: 2472:
        -: 2473:	else
    #####: 2474:		ret_val = EOB_ACT_CONTINUE_SCAN;
        -: 2475:
    #####: 2476:	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
        -: 2477:		/* Extend the array by 50%, plus the number we really need. */
    #####: 2478:		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
    #####: 2479:		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
    #####: 2480:			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
    #####: 2481:		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    #####: 2482:			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
        -: 2483:		/* "- 2" to take care of EOB's */
    #####: 2484:		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
        -: 2485:	}
        -: 2486:
    #####: 2487:	yyg->yy_n_chars += number_to_move;
    #####: 2488:	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    #####: 2489:	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
        -: 2490:
    #####: 2491:	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
        -: 2492:
    #####: 2493:	return ret_val;
        -: 2494:}
        -: 2495:
        -: 2496:/* yy_get_previous_state - get the state just before the EOB char was reached */
        -: 2497:
        7: 2498:    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
        -: 2499:{
        -: 2500:	yy_state_type yy_current_state;
        -: 2501:	char *yy_cp;
        7: 2502:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2503:
        7: 2504:	yy_current_state = yyg->yy_start;
        -: 2505:
       17: 2506:	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
        -: 2507:		{
      10*: 2508:		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
       10: 2509:		if ( yy_accept[yy_current_state] )
        -: 2510:			{
        3: 2511:			yyg->yy_last_accepting_state = yy_current_state;
        3: 2512:			yyg->yy_last_accepting_cpos = yy_cp;
        -: 2513:			}
       13: 2514:		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        -: 2515:			{
        3: 2516:			yy_current_state = (int) yy_def[yy_current_state];
        3: 2517:			if ( yy_current_state >= 258 )
        3: 2518:				yy_c = yy_meta[yy_c];
        -: 2519:			}
       10: 2520:		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
        -: 2521:		}
        -: 2522:
        7: 2523:	return yy_current_state;
        -: 2524:}
        -: 2525:
        -: 2526:/* yy_try_NUL_trans - try to make a transition on the NUL character
        -: 2527: *
        -: 2528: * synopsis
        -: 2529: *	next_state = yy_try_NUL_trans( current_state );
        -: 2530: */
    #####: 2531:    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
        -: 2532:{
        -: 2533:	int yy_is_jam;
    #####: 2534:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
    #####: 2535:	char *yy_cp = yyg->yy_c_buf_p;
        -: 2536:
    #####: 2537:	YY_CHAR yy_c = 1;
    #####: 2538:	if ( yy_accept[yy_current_state] )
        -: 2539:		{
    #####: 2540:		yyg->yy_last_accepting_state = yy_current_state;
    #####: 2541:		yyg->yy_last_accepting_cpos = yy_cp;
        -: 2542:		}
    #####: 2543:	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        -: 2544:		{
    #####: 2545:		yy_current_state = (int) yy_def[yy_current_state];
    #####: 2546:		if ( yy_current_state >= 258 )
    #####: 2547:			yy_c = yy_meta[yy_c];
        -: 2548:		}
    #####: 2549:	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    #####: 2550:	yy_is_jam = (yy_current_state == 257);
        -: 2551:
        -: 2552:	(void)yyg;
    #####: 2553:	return yy_is_jam ? 0 : yy_current_state;
        -: 2554:}
        -: 2555:
        -: 2556:#ifndef YY_NO_UNPUT
        -: 2557:
        -: 2558:#endif
        -: 2559:
        -: 2560:#ifndef YY_NO_INPUT
        -: 2561:#ifdef __cplusplus
        -: 2562:    static int yyinput (yyscan_t yyscanner)
        -: 2563:#else
        -: 2564:    static int input  (yyscan_t yyscanner)
        -: 2565:#endif
        -: 2566:
        -: 2567:{
        -: 2568:	int c;
        -: 2569:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2570:
        -: 2571:	*yyg->yy_c_buf_p = yyg->yy_hold_char;
        -: 2572:
        -: 2573:	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        -: 2574:		{
        -: 2575:		/* yy_c_buf_p now points to the character we want to return.
        -: 2576:		 * If this occurs *before* the EOB characters, then it's a
        -: 2577:		 * valid NUL; if not, then we've hit the end of the buffer.
        -: 2578:		 */
        -: 2579:		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
        -: 2580:			/* This was really a NUL. */
        -: 2581:			*yyg->yy_c_buf_p = '\0';
        -: 2582:
        -: 2583:		else
        -: 2584:			{ /* need more input */
        -: 2585:			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
        -: 2586:			++yyg->yy_c_buf_p;
        -: 2587:
        -: 2588:			switch ( yy_get_next_buffer( yyscanner ) )
        -: 2589:				{
        -: 2590:				case EOB_ACT_LAST_MATCH:
        -: 2591:					/* This happens because yy_g_n_b()
        -: 2592:					 * sees that we've accumulated a
        -: 2593:					 * token and flags that we need to
        -: 2594:					 * try matching the token before
        -: 2595:					 * proceeding.  But for input(),
        -: 2596:					 * there's no matching to consider.
        -: 2597:					 * So convert the EOB_ACT_LAST_MATCH
        -: 2598:					 * to EOB_ACT_END_OF_FILE.
        -: 2599:					 */
        -: 2600:
        -: 2601:					/* Reset buffer status. */
        -: 2602:					yyrestart( yyin , yyscanner);
        -: 2603:
        -: 2604:					/*FALLTHROUGH*/
        -: 2605:
        -: 2606:				case EOB_ACT_END_OF_FILE:
        -: 2607:					{
        -: 2608:					if ( yywrap( yyscanner ) )
        -: 2609:						return 0;
        -: 2610:
        -: 2611:					if ( ! yyg->yy_did_buffer_switch_on_eof )
        -: 2612:						YY_NEW_FILE;
        -: 2613:#ifdef __cplusplus
        -: 2614:					return yyinput(yyscanner);
        -: 2615:#else
        -: 2616:					return input(yyscanner);
        -: 2617:#endif
        -: 2618:					}
        -: 2619:
        -: 2620:				case EOB_ACT_CONTINUE_SCAN:
        -: 2621:					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
        -: 2622:					break;
        -: 2623:				}
        -: 2624:			}
        -: 2625:		}
        -: 2626:
        -: 2627:	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
        -: 2628:	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
        -: 2629:	yyg->yy_hold_char = *++yyg->yy_c_buf_p;
        -: 2630:
        -: 2631:	if ( c == '\n' )
        -: 2632:		
        -: 2633:    do{ yylineno++;
        -: 2634:        yycolumn=0;
        -: 2635:    }while(0)
        -: 2636:;
        -: 2637:
        -: 2638:	return c;
        -: 2639:}
        -: 2640:#endif	/* ifndef YY_NO_INPUT */
        -: 2641:
        -: 2642:/** Immediately switch to a different input stream.
        -: 2643: * @param input_file A readable stream.
        -: 2644: * @param yyscanner The scanner object.
        -: 2645: * @note This function does not reset the start condition to @c INITIAL .
        -: 2646: */
    #####: 2647:    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
        -: 2648:{
    #####: 2649:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2650:
    #####: 2651:	if ( ! YY_CURRENT_BUFFER ){
    #####: 2652:        yyensure_buffer_stack (yyscanner);
    #####: 2653:		YY_CURRENT_BUFFER_LVALUE =
    #####: 2654:            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
        -: 2655:	}
        -: 2656:
    #####: 2657:	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
    #####: 2658:	yy_load_buffer_state( yyscanner );
    #####: 2659:}
        -: 2660:
        -: 2661:/** Switch to a different input buffer.
        -: 2662: * @param new_buffer The new input buffer.
        -: 2663: * @param yyscanner The scanner object.
        -: 2664: */
        7: 2665:    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
        -: 2666:{
        7: 2667:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2668:
        -: 2669:	/* TODO. We should be able to replace this entire function body
        -: 2670:	 * with
        -: 2671:	 *		yypop_buffer_state();
        -: 2672:	 *		yypush_buffer_state(new_buffer);
        -: 2673:     */
        7: 2674:	yyensure_buffer_stack (yyscanner);
       7*: 2675:	if ( YY_CURRENT_BUFFER == new_buffer )
    #####: 2676:		return;
        -: 2677:
        7: 2678:	if ( YY_CURRENT_BUFFER )
        -: 2679:		{
        -: 2680:		/* Flush out information for old buffer. */
    #####: 2681:		*yyg->yy_c_buf_p = yyg->yy_hold_char;
    #####: 2682:		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    #####: 2683:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        -: 2684:		}
        -: 2685:
        7: 2686:	YY_CURRENT_BUFFER_LVALUE = new_buffer;
        7: 2687:	yy_load_buffer_state( yyscanner );
        -: 2688:
        -: 2689:	/* We don't actually know whether we did this switch during
        -: 2690:	 * EOF (yywrap()) processing, but the only time this flag
        -: 2691:	 * is looked at is after yywrap() is called, so it's safe
        -: 2692:	 * to go ahead and always set it.
        -: 2693:	 */
        7: 2694:	yyg->yy_did_buffer_switch_on_eof = 1;
        -: 2695:}
        -: 2696:
       14: 2697:static void yy_load_buffer_state  (yyscan_t yyscanner)
        -: 2698:{
       14: 2699:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
       14: 2700:	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
       14: 2701:	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
       14: 2702:	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
       14: 2703:	yyg->yy_hold_char = *yyg->yy_c_buf_p;
       14: 2704:}
        -: 2705:
        -: 2706:/** Allocate and initialize an input buffer state.
        -: 2707: * @param file A readable stream.
        -: 2708: * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
        -: 2709: * @param yyscanner The scanner object.
        -: 2710: * @return the allocated buffer state.
        -: 2711: */
    #####: 2712:    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
        -: 2713:{
        -: 2714:	YY_BUFFER_STATE b;
        -: 2715:    
    #####: 2716:	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
    #####: 2717:	if ( ! b )
    #####: 2718:		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
        -: 2719:
    #####: 2720:	b->yy_buf_size = size;
        -: 2721:
        -: 2722:	/* yy_ch_buf has to be 2 characters longer than the size given because
        -: 2723:	 * we need to put in 2 end-of-buffer characters.
        -: 2724:	 */
    #####: 2725:	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
    #####: 2726:	if ( ! b->yy_ch_buf )
    #####: 2727:		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
        -: 2728:
    #####: 2729:	b->yy_is_our_buffer = 1;
        -: 2730:
    #####: 2731:	yy_init_buffer( b, file , yyscanner);
        -: 2732:
    #####: 2733:	return b;
        -: 2734:}
        -: 2735:
        -: 2736:/** Destroy the buffer.
        -: 2737: * @param b a buffer created with yy_create_buffer()
        -: 2738: * @param yyscanner The scanner object.
        -: 2739: */
        6: 2740:    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
        -: 2741:{
        6: 2742:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2743:
        6: 2744:	if ( ! b )
    #####: 2745:		return;
        -: 2746:
       6*: 2747:	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
        6: 2748:		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
        -: 2749:
        6: 2750:	if ( b->yy_is_our_buffer )
        6: 2751:		yyfree( (void *) b->yy_ch_buf , yyscanner );
        -: 2752:
        6: 2753:	yyfree( (void *) b , yyscanner );
        -: 2754:}
        -: 2755:
        -: 2756:/* Initializes or reinitializes a buffer.
        -: 2757: * This function is sometimes called more than once on the same buffer,
        -: 2758: * such as during a yyrestart() or at EOF.
        -: 2759: */
    #####: 2760:    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
        -: 2761:
        -: 2762:{
    #####: 2763:	int oerrno = errno;
    #####: 2764:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2765:
    #####: 2766:	yy_flush_buffer( b , yyscanner);
        -: 2767:
    #####: 2768:	b->yy_input_file = file;
    #####: 2769:	b->yy_fill_buffer = 1;
        -: 2770:
        -: 2771:    /* If b is the current buffer, then yy_init_buffer was _probably_
        -: 2772:     * called from yyrestart() or through yy_get_next_buffer.
        -: 2773:     * In that case, we don't want to reset the lineno or column.
        -: 2774:     */
    #####: 2775:    if (b != YY_CURRENT_BUFFER){
    #####: 2776:        b->yy_bs_lineno = 1;
    #####: 2777:        b->yy_bs_column = 0;
        -: 2778:    }
        -: 2779:
    #####: 2780:        b->yy_is_interactive = 0;
        -: 2781:    
    #####: 2782:	errno = oerrno;
    #####: 2783:}
        -: 2784:
        -: 2785:/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
        -: 2786: * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
        -: 2787: * @param yyscanner The scanner object.
        -: 2788: */
    #####: 2789:    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
        -: 2790:{
    #####: 2791:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2792:	if ( ! b )
    #####: 2793:		return;
        -: 2794:
    #####: 2795:	b->yy_n_chars = 0;
        -: 2796:
        -: 2797:	/* We always need two end-of-buffer characters.  The first causes
        -: 2798:	 * a transition to the end-of-buffer state.  The second causes
        -: 2799:	 * a jam in that state.
        -: 2800:	 */
    #####: 2801:	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    #####: 2802:	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
        -: 2803:
    #####: 2804:	b->yy_buf_pos = &b->yy_ch_buf[0];
        -: 2805:
    #####: 2806:	b->yy_at_bol = 1;
    #####: 2807:	b->yy_buffer_status = YY_BUFFER_NEW;
        -: 2808:
    #####: 2809:	if ( b == YY_CURRENT_BUFFER )
    #####: 2810:		yy_load_buffer_state( yyscanner );
        -: 2811:}
        -: 2812:
        -: 2813:/** Pushes the new state onto the stack. The new state becomes
        -: 2814: *  the current state. This function will allocate the stack
        -: 2815: *  if necessary.
        -: 2816: *  @param new_buffer The new state.
        -: 2817: *  @param yyscanner The scanner object.
        -: 2818: */
    #####: 2819:void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
        -: 2820:{
    #####: 2821:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 2822:	if (new_buffer == NULL)
    #####: 2823:		return;
        -: 2824:
    #####: 2825:	yyensure_buffer_stack(yyscanner);
        -: 2826:
        -: 2827:	/* This block is copied from yy_switch_to_buffer. */
    #####: 2828:	if ( YY_CURRENT_BUFFER )
        -: 2829:		{
        -: 2830:		/* Flush out information for old buffer. */
    #####: 2831:		*yyg->yy_c_buf_p = yyg->yy_hold_char;
    #####: 2832:		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    #####: 2833:		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
        -: 2834:		}
        -: 2835:
        -: 2836:	/* Only push if top exists. Otherwise, replace top. */
    #####: 2837:	if (YY_CURRENT_BUFFER)
    #####: 2838:		yyg->yy_buffer_stack_top++;
    #####: 2839:	YY_CURRENT_BUFFER_LVALUE = new_buffer;
        -: 2840:
        -: 2841:	/* copied from yy_switch_to_buffer. */
    #####: 2842:	yy_load_buffer_state( yyscanner );
    #####: 2843:	yyg->yy_did_buffer_switch_on_eof = 1;
        -: 2844:}
        -: 2845:
        -: 2846:/** Removes and deletes the top of the stack, if present.
        -: 2847: *  The next element becomes the new top.
        -: 2848: *  @param yyscanner The scanner object.
        -: 2849: */
        6: 2850:void yypop_buffer_state (yyscan_t yyscanner)
        -: 2851:{
        6: 2852:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        6: 2853:	if (!YY_CURRENT_BUFFER)
    #####: 2854:		return;
        -: 2855:
       6*: 2856:	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
        6: 2857:	YY_CURRENT_BUFFER_LVALUE = NULL;
        6: 2858:	if (yyg->yy_buffer_stack_top > 0)
    #####: 2859:		--yyg->yy_buffer_stack_top;
        -: 2860:
        6: 2861:	if (YY_CURRENT_BUFFER) {
    #####: 2862:		yy_load_buffer_state( yyscanner );
    #####: 2863:		yyg->yy_did_buffer_switch_on_eof = 1;
        -: 2864:	}
        -: 2865:}
        -: 2866:
        -: 2867:/* Allocates the stack if it does not exist.
        -: 2868: *  Guarantees space for at least one push.
        -: 2869: */
        7: 2870:static void yyensure_buffer_stack (yyscan_t yyscanner)
        -: 2871:{
        -: 2872:	yy_size_t num_to_alloc;
        7: 2873:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 2874:
        7: 2875:	if (!yyg->yy_buffer_stack) {
        -: 2876:
        -: 2877:		/* First allocation is just for 2 elements, since we don't know if this
        -: 2878:		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
        -: 2879:		 * immediate realloc on the next call.
        -: 2880:         */
        7: 2881:      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
        7: 2882:		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
        -: 2883:								(num_to_alloc * sizeof(struct yy_buffer_state*)
        -: 2884:								, yyscanner);
        7: 2885:		if ( ! yyg->yy_buffer_stack )
    #####: 2886:			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        -: 2887:
        7: 2888:		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
        -: 2889:
        7: 2890:		yyg->yy_buffer_stack_max = num_to_alloc;
        7: 2891:		yyg->yy_buffer_stack_top = 0;
        7: 2892:		return;
        -: 2893:	}
        -: 2894:
    #####: 2895:	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){
        -: 2896:
        -: 2897:		/* Increase the buffer to prepare for a possible push. */
    #####: 2898:		yy_size_t grow_size = 8 /* arbitrary grow size */;
        -: 2899:
    #####: 2900:		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
    #####: 2901:		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
    #####: 2902:								(yyg->yy_buffer_stack,
        -: 2903:								num_to_alloc * sizeof(struct yy_buffer_state*)
        -: 2904:								, yyscanner);
    #####: 2905:		if ( ! yyg->yy_buffer_stack )
    #####: 2906:			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        -: 2907:
        -: 2908:		/* zero only the new slots.*/
    #####: 2909:		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
    #####: 2910:		yyg->yy_buffer_stack_max = num_to_alloc;
        -: 2911:	}
        -: 2912:}
        -: 2913:
        -: 2914:/** Setup the input buffer state to scan directly from a user-specified character buffer.
        -: 2915: * @param base the character buffer
        -: 2916: * @param size the size in bytes of the character buffer
        -: 2917: * @param yyscanner The scanner object.
        -: 2918: * @return the newly allocated buffer state object.
        -: 2919: */
        7: 2920:YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
        -: 2921:{
        -: 2922:	YY_BUFFER_STATE b;
        -: 2923:    
        7: 2924:	if ( size < 2 ||
        7: 2925:	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
        7: 2926:	     base[size-1] != YY_END_OF_BUFFER_CHAR )
        -: 2927:		/* They forgot to leave room for the EOB's. */
    #####: 2928:		return NULL;
        -: 2929:
        7: 2930:	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
        7: 2931:	if ( ! b )
    #####: 2932:		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
        -: 2933:
        7: 2934:	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
        7: 2935:	b->yy_buf_pos = b->yy_ch_buf = base;
        7: 2936:	b->yy_is_our_buffer = 0;
        7: 2937:	b->yy_input_file = NULL;
        7: 2938:	b->yy_n_chars = b->yy_buf_size;
        7: 2939:	b->yy_is_interactive = 0;
        7: 2940:	b->yy_at_bol = 1;
        7: 2941:	b->yy_fill_buffer = 0;
        7: 2942:	b->yy_buffer_status = YY_BUFFER_NEW;
        -: 2943:
        7: 2944:	yy_switch_to_buffer( b , yyscanner );
        -: 2945:
        7: 2946:	return b;
        -: 2947:}
        -: 2948:
        -: 2949:/** Setup the input buffer state to scan a string. The next call to yylex() will
        -: 2950: * scan from a @e copy of @a str.
        -: 2951: * @param yystr a NUL-terminated string to scan
        -: 2952: * @param yyscanner The scanner object.
        -: 2953: * @return the newly allocated buffer state object.
        -: 2954: * @note If you want to scan bytes that may contain NUL values, then use
        -: 2955: *       yy_scan_bytes() instead.
        -: 2956: */
        7: 2957:YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
        -: 2958:{
        -: 2959:    
        7: 2960:	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
        -: 2961:}
        -: 2962:
        -: 2963:/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
        -: 2964: * scan from a @e copy of @a bytes.
        -: 2965: * @param yybytes the byte buffer to scan
        -: 2966: * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
        -: 2967: * @param yyscanner The scanner object.
        -: 2968: * @return the newly allocated buffer state object.
        -: 2969: */
        7: 2970:YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
        -: 2971:{
        -: 2972:	YY_BUFFER_STATE b;
        -: 2973:	char *buf;
        -: 2974:	yy_size_t n;
        -: 2975:	int i;
        -: 2976:    
        -: 2977:	/* Get memory for full buffer, including space for trailing EOB's. */
        7: 2978:	n = (yy_size_t) (_yybytes_len + 2);
        7: 2979:	buf = (char *) yyalloc( n , yyscanner );
        7: 2980:	if ( ! buf )
    #####: 2981:		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
        -: 2982:
      374: 2983:	for ( i = 0; i < _yybytes_len; ++i )
      367: 2984:		buf[i] = yybytes[i];
        -: 2985:
        7: 2986:	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
        -: 2987:
        7: 2988:	b = yy_scan_buffer( buf, n , yyscanner);
        7: 2989:	if ( ! b )
    #####: 2990:		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
        -: 2991:
        -: 2992:	/* It's okay to grow etc. this buffer, and we should throw it
        -: 2993:	 * away when we're done.
        -: 2994:	 */
        7: 2995:	b->yy_is_our_buffer = 1;
        -: 2996:
        7: 2997:	return b;
        -: 2998:}
        -: 2999:
        -: 3000:#ifndef YY_EXIT_FAILURE
        -: 3001:#define YY_EXIT_FAILURE 2
        -: 3002:#endif
        -: 3003:
    #####: 3004:static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
        -: 3005:{
    #####: 3006:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3007:	(void)yyg;
    #####: 3008:	fprintf( stderr, "%s\n", msg );
    #####: 3009:	exit( YY_EXIT_FAILURE );
        -: 3010:}
        -: 3011:
        -: 3012:/* Redefine yyless() so it works in section 3 code. */
        -: 3013:
        -: 3014:#undef yyless
        -: 3015:#define yyless(n) \
        -: 3016:	do \
        -: 3017:		{ \
        -: 3018:		/* Undo effects of setting up yytext. */ \
        -: 3019:        int yyless_macro_arg = (n); \
        -: 3020:        YY_LESS_LINENO(yyless_macro_arg);\
        -: 3021:		yytext[yyleng] = yyg->yy_hold_char; \
        -: 3022:		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
        -: 3023:		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
        -: 3024:		*yyg->yy_c_buf_p = '\0'; \
        -: 3025:		yyleng = yyless_macro_arg; \
        -: 3026:		} \
        -: 3027:	while ( 0 )
        -: 3028:
        -: 3029:/* Accessor  methods (get/set functions) to struct members. */
        -: 3030:
        -: 3031:/** Get the user-defined data for this scanner.
        -: 3032: * @param yyscanner The scanner object.
        -: 3033: */
       32: 3034:YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
        -: 3035:{
       32: 3036:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
       32: 3037:    return yyextra;
        -: 3038:}
        -: 3039:
        -: 3040:/** Get the current line number.
        -: 3041: * @param yyscanner The scanner object.
        -: 3042: */
       14: 3043:int yyget_lineno  (yyscan_t yyscanner)
        -: 3044:{
       14: 3045:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3046:
       14: 3047:        if (! YY_CURRENT_BUFFER)
    #####: 3048:            return 0;
        -: 3049:    
       14: 3050:    return yylineno;
        -: 3051:}
        -: 3052:
        -: 3053:/** Get the current column number.
        -: 3054: * @param yyscanner The scanner object.
        -: 3055: */
    #####: 3056:int yyget_column  (yyscan_t yyscanner)
        -: 3057:{
    #####: 3058:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3059:
    #####: 3060:        if (! YY_CURRENT_BUFFER)
    #####: 3061:            return 0;
        -: 3062:    
    #####: 3063:    return yycolumn;
        -: 3064:}
        -: 3065:
        -: 3066:/** Get the input stream.
        -: 3067: * @param yyscanner The scanner object.
        -: 3068: */
    #####: 3069:FILE *yyget_in  (yyscan_t yyscanner)
        -: 3070:{
    #####: 3071:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3072:    return yyin;
        -: 3073:}
        -: 3074:
        -: 3075:/** Get the output stream.
        -: 3076: * @param yyscanner The scanner object.
        -: 3077: */
    #####: 3078:FILE *yyget_out  (yyscan_t yyscanner)
        -: 3079:{
    #####: 3080:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3081:    return yyout;
        -: 3082:}
        -: 3083:
        -: 3084:/** Get the length of the current token.
        -: 3085: * @param yyscanner The scanner object.
        -: 3086: */
    #####: 3087:int yyget_leng  (yyscan_t yyscanner)
        -: 3088:{
    #####: 3089:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3090:    return yyleng;
        -: 3091:}
        -: 3092:
        -: 3093:/** Get the current token.
        -: 3094: * @param yyscanner The scanner object.
        -: 3095: */
        -: 3096:
    #####: 3097:char *yyget_text  (yyscan_t yyscanner)
        -: 3098:{
    #####: 3099:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3100:    return yytext;
        -: 3101:}
        -: 3102:
        -: 3103:/** Set the user-defined data. This data is never touched by the scanner.
        -: 3104: * @param user_defined The data to be associated with this scanner.
        -: 3105: * @param yyscanner The scanner object.
        -: 3106: */
        7: 3107:void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
        -: 3108:{
        7: 3109:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        7: 3110:    yyextra = user_defined ;
        7: 3111:}
        -: 3112:
        -: 3113:/** Set the current line number.
        -: 3114: * @param _line_number line number
        -: 3115: * @param yyscanner The scanner object.
        -: 3116: */
        7: 3117:void yyset_lineno (int  _line_number , yyscan_t yyscanner)
        -: 3118:{
        7: 3119:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3120:
        -: 3121:        /* lineno is only valid if an input buffer exists. */
        7: 3122:        if (! YY_CURRENT_BUFFER )
    #####: 3123:           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
        -: 3124:    
        7: 3125:    yylineno = _line_number;
        7: 3126:}
        -: 3127:
        -: 3128:/** Set the current column.
        -: 3129: * @param _column_no column number
        -: 3130: * @param yyscanner The scanner object.
        -: 3131: */
    #####: 3132:void yyset_column (int  _column_no , yyscan_t yyscanner)
        -: 3133:{
    #####: 3134:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3135:
        -: 3136:        /* column is only valid if an input buffer exists. */
    #####: 3137:        if (! YY_CURRENT_BUFFER )
    #####: 3138:           YY_FATAL_ERROR( "yyset_column called with no buffer" );
        -: 3139:    
    #####: 3140:    yycolumn = _column_no;
    #####: 3141:}
        -: 3142:
        -: 3143:/** Set the input stream. This does not discard the current
        -: 3144: * input buffer.
        -: 3145: * @param _in_str A readable stream.
        -: 3146: * @param yyscanner The scanner object.
        -: 3147: * @see yy_switch_to_buffer
        -: 3148: */
    #####: 3149:void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
        -: 3150:{
    #####: 3151:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3152:    yyin = _in_str ;
    #####: 3153:}
        -: 3154:
    #####: 3155:void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
        -: 3156:{
    #####: 3157:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3158:    yyout = _out_str ;
    #####: 3159:}
        -: 3160:
    #####: 3161:int yyget_debug  (yyscan_t yyscanner)
        -: 3162:{
    #####: 3163:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3164:    return yy_flex_debug;
        -: 3165:}
        -: 3166:
    #####: 3167:void yyset_debug (int  _bdebug , yyscan_t yyscanner)
        -: 3168:{
    #####: 3169:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3170:    yy_flex_debug = _bdebug ;
    #####: 3171:}
        -: 3172:
        -: 3173:/* Accessor methods for yylval and yylloc */
        -: 3174:
    #####: 3175:YYSTYPE * yyget_lval  (yyscan_t yyscanner)
        -: 3176:{
    #####: 3177:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3178:    return yylval;
        -: 3179:}
        -: 3180:
    #####: 3181:void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
        -: 3182:{
    #####: 3183:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    #####: 3184:    yylval = yylval_param;
    #####: 3185:}
        -: 3186:
        -: 3187:/* User-visible API */
        -: 3188:
        -: 3189:/* yylex_init is special because it creates the scanner itself, so it is
        -: 3190: * the ONLY reentrant function that doesn't take the scanner as the last argument.
        -: 3191: * That's why we explicitly handle the declaration, instead of using our macros.
        -: 3192: */
        7: 3193:int yylex_init(yyscan_t* ptr_yy_globals)
        -: 3194:{
        7: 3195:    if (ptr_yy_globals == NULL){
    #####: 3196:        errno = EINVAL;
    #####: 3197:        return 1;
        -: 3198:    }
        -: 3199:
        7: 3200:    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );
        -: 3201:
        7: 3202:    if (*ptr_yy_globals == NULL){
    #####: 3203:        errno = ENOMEM;
    #####: 3204:        return 1;
        -: 3205:    }
        -: 3206:
        -: 3207:    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
        7: 3208:    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
        -: 3209:
        7: 3210:    return yy_init_globals ( *ptr_yy_globals );
        -: 3211:}
        -: 3212:
        -: 3213:/* yylex_init_extra has the same functionality as yylex_init, but follows the
        -: 3214: * convention of taking the scanner as the last argument. Note however, that
        -: 3215: * this is a *pointer* to a scanner, as it will be allocated by this call (and
        -: 3216: * is the reason, too, why this function also must handle its own declaration).
        -: 3217: * The user defined value in the first argument will be available to yyalloc in
        -: 3218: * the yyextra field.
        -: 3219: */
    #####: 3220:int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
        -: 3221:{
        -: 3222:    struct yyguts_t dummy_yyguts;
        -: 3223:
    #####: 3224:    yyset_extra (yy_user_defined, &dummy_yyguts);
        -: 3225:
    #####: 3226:    if (ptr_yy_globals == NULL){
    #####: 3227:        errno = EINVAL;
    #####: 3228:        return 1;
        -: 3229:    }
        -: 3230:
    #####: 3231:    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
        -: 3232:
    #####: 3233:    if (*ptr_yy_globals == NULL){
    #####: 3234:        errno = ENOMEM;
    #####: 3235:        return 1;
        -: 3236:    }
        -: 3237:
        -: 3238:    /* By setting to 0xAA, we expose bugs in
        -: 3239:    yy_init_globals. Leave at 0x00 for releases. */
    #####: 3240:    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
        -: 3241:
    #####: 3242:    yyset_extra (yy_user_defined, *ptr_yy_globals);
        -: 3243:
    #####: 3244:    return yy_init_globals ( *ptr_yy_globals );
        -: 3245:}
        -: 3246:
       13: 3247:static int yy_init_globals (yyscan_t yyscanner)
        -: 3248:{
       13: 3249:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3250:    /* Initialization is the same as for the non-reentrant scanner.
        -: 3251:     * This function is called from yylex_destroy(), so don't allocate here.
        -: 3252:     */
        -: 3253:
       13: 3254:    yyg->yy_buffer_stack = NULL;
       13: 3255:    yyg->yy_buffer_stack_top = 0;
       13: 3256:    yyg->yy_buffer_stack_max = 0;
       13: 3257:    yyg->yy_c_buf_p = NULL;
       13: 3258:    yyg->yy_init = 0;
       13: 3259:    yyg->yy_start = 0;
        -: 3260:
       13: 3261:    yyg->yy_start_stack_ptr = 0;
       13: 3262:    yyg->yy_start_stack_depth = 0;
       13: 3263:    yyg->yy_start_stack =  NULL;
        -: 3264:
        -: 3265:/* Defined in main.c */
        -: 3266:#ifdef YY_STDINIT
        -: 3267:    yyin = stdin;
        -: 3268:    yyout = stdout;
        -: 3269:#else
       13: 3270:    yyin = NULL;
       13: 3271:    yyout = NULL;
        -: 3272:#endif
        -: 3273:
        -: 3274:    /* For future reference: Set errno on error, since we are called by
        -: 3275:     * yylex_init()
        -: 3276:     */
       13: 3277:    return 0;
        -: 3278:}
        -: 3279:
        -: 3280:/* yylex_destroy is for both reentrant and non-reentrant scanners. */
        6: 3281:int yylex_destroy  (yyscan_t yyscanner)
        -: 3282:{
        6: 3283:    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3284:
        -: 3285:    /* Pop the buffer stack, destroying each element. */
        6: 3286:	while(YY_CURRENT_BUFFER){
    #####: 3287:		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
    #####: 3288:		YY_CURRENT_BUFFER_LVALUE = NULL;
    #####: 3289:		yypop_buffer_state(yyscanner);
        -: 3290:	}
        -: 3291:
        -: 3292:	/* Destroy the stack itself. */
        6: 3293:	yyfree(yyg->yy_buffer_stack , yyscanner);
        6: 3294:	yyg->yy_buffer_stack = NULL;
        -: 3295:
        -: 3296:    /* Destroy the start condition stack. */
        6: 3297:        yyfree( yyg->yy_start_stack , yyscanner );
        6: 3298:        yyg->yy_start_stack = NULL;
        -: 3299:
        -: 3300:    /* Reset the globals. This is important in a non-reentrant scanner so the next time
        -: 3301:     * yylex() is called, initialization will occur. */
        6: 3302:    yy_init_globals( yyscanner);
        -: 3303:
        -: 3304:    /* Destroy the main struct (reentrant only). */
        6: 3305:    yyfree ( yyscanner , yyscanner );
        6: 3306:    yyscanner = NULL;
        6: 3307:    return 0;
        -: 3308:}
        -: 3309:
        -: 3310:/*
        -: 3311: * Internal utility routines.
        -: 3312: */
        -: 3313:
        -: 3314:#ifndef yytext_ptr
        -: 3315:static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
        -: 3316:{
        -: 3317:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3318:	(void)yyg;
        -: 3319:
        -: 3320:	int i;
        -: 3321:	for ( i = 0; i < n; ++i )
        -: 3322:		s1[i] = s2[i];
        -: 3323:}
        -: 3324:#endif
        -: 3325:
        -: 3326:#ifdef YY_NEED_STRLEN
        -: 3327:static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
        -: 3328:{
        -: 3329:	int n;
        -: 3330:	for ( n = 0; s[n]; ++n )
        -: 3331:		;
        -: 3332:
        -: 3333:	return n;
        -: 3334:}
        -: 3335:#endif
        -: 3336:
       28: 3337:void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
        -: 3338:{
       28: 3339:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3340:	(void)yyg;
       28: 3341:	return malloc(size);
        -: 3342:}
        -: 3343:
    #####: 3344:void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
        -: 3345:{
    #####: 3346:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3347:	(void)yyg;
        -: 3348:
        -: 3349:	/* The cast to (char *) in the following accommodates both
        -: 3350:	 * implementations that use char* generic pointers, and those
        -: 3351:	 * that use void* generic pointers.  It works with the latter
        -: 3352:	 * because both ANSI C and C++ allow castless assignment from
        -: 3353:	 * any pointer type to void*, and deal with argument conversions
        -: 3354:	 * as though doing an assignment.
        -: 3355:	 */
    #####: 3356:	return realloc(ptr, size);
        -: 3357:}
        -: 3358:
       30: 3359:void yyfree (void * ptr , yyscan_t yyscanner)
        -: 3360:{
       30: 3361:	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
        -: 3362:	(void)yyg;
       30: 3363:	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
       30: 3364:}
        -: 3365:
        -: 3366:#define YYTABLES_NAME "yytables"
        -: 3367:
        -: 3368:#line 745 "lexer.l"
        -: 3369:
        -: 3370:
        -: 3371:
        -: 3372:void yywarning(
        -: 3373:    yyscan_t yyscanner,
        -: 3374:    const char *message_fmt,
        -: 3375:    ...)
        -: 3376:{
        -: 3377:  YR_COMPILER* compiler = yyget_extra(yyscanner);
        -: 3378:
        -: 3379:  char* file_name;
        -: 3380:  char message[512];
        -: 3381:  va_list message_args;
        -: 3382:
        -: 3383:  if (compiler->callback == NULL)
        -: 3384:    return;
        -: 3385:
        -: 3386:  va_start(message_args, message_fmt);
        -: 3387:
        -: 3388:  if (compiler->file_name_stack_ptr > 0)
        -: 3389:    file_name = compiler->file_name_stack[compiler->file_name_stack_ptr - 1];
        -: 3390:  else
        -: 3391:    file_name = NULL;
        -: 3392:
        -: 3393:  vsnprintf(message, sizeof(message), message_fmt, message_args);
        -: 3394:
        -: 3395:  YR_RULE* current_rule = NULL;
        -: 3396:
        -: 3397:  if (compiler->current_rule_idx != UINT32_MAX)
        -: 3398:    current_rule = yr_arena_get_ptr(
        -: 3399:        compiler->arena,
        -: 3400:        YR_RULES_TABLE,
        -: 3401:        compiler->current_rule_idx * sizeof(YR_RULE));
        -: 3402:
        -: 3403:  compiler->callback(
        -: 3404:      YARA_ERROR_LEVEL_WARNING,
        -: 3405:      file_name,
        -: 3406:      compiler->current_line ? compiler->current_line : yyget_lineno(yyscanner),
        -: 3407:      current_rule,
        -: 3408:      message,
        -: 3409:      compiler->user_data);
        -: 3410:
        -: 3411:  va_end(message_args);
        -: 3412:}
        -: 3413:
        -: 3414:
        -: 3415:void yyfatal(
        -: 3416:    yyscan_t yyscanner,
        -: 3417:    const char *error_message)
        -: 3418:{
        -: 3419:  YR_COMPILER* compiler = yyget_extra(yyscanner);
        -: 3420:
        -: 3421:  yyerror(yyscanner, compiler, error_message);
        -: 3422:  longjmp(compiler->error_recovery, 1);
        -: 3423:}
        -: 3424:
        -: 3425:
        -: 3426:void yyerror(
        -: 3427:    yyscan_t yyscanner,
        -: 3428:    YR_COMPILER* compiler,
        -: 3429:    const char *error_message)
        -: 3430:{
        -: 3431:  char message[512] = {'\0'};
        -: 3432:  char* file_name = NULL;
        -: 3433:
        -: 3434:  /*
        -: 3435:    if error_message != NULL the error comes from yyparse internal code
        -: 3436:    else the error comes from my code and the error code is set in
        -: 3437:    compiler->last_error
        -: 3438:  */
        -: 3439:
        -: 3440:  compiler->errors++;
        -: 3441:
        -: 3442:  if (compiler->current_line != 0)
        -: 3443:    compiler->last_error_line = compiler->current_line;
        -: 3444:  else
        -: 3445:    compiler->last_error_line = yyget_lineno(yyscanner);
        -: 3446:
        -: 3447:  compiler->current_line = 0;
        -: 3448:
        -: 3449:  if (compiler->file_name_stack_ptr > 0)
        -: 3450:  {
        -: 3451:    file_name = compiler->file_name_stack[compiler->file_name_stack_ptr - 1];
        -: 3452:  }
        -: 3453:  else
        -: 3454:  {
        -: 3455:    file_name = NULL;
        -: 3456:  }
        -: 3457:
        -: 3458:  YR_RULE* current_rule = NULL;
        -: 3459:
        -: 3460:  if (compiler->current_rule_idx != UINT32_MAX)
        -: 3461:    current_rule = yr_arena_get_ptr(
        -: 3462:        compiler->arena,
        -: 3463:        YR_RULES_TABLE,
        -: 3464:        compiler->current_rule_idx * sizeof(YR_RULE));
        -: 3465:
        -: 3466:  if (error_message != NULL)
        -: 3467:  {
        -: 3468:    yr_compiler_set_error_extra_info(compiler, error_message);
        -: 3469:    compiler->last_error = ERROR_SYNTAX_ERROR;
        -: 3470:
        -: 3471:    if (compiler->callback != NULL)
        -: 3472:    {
        -: 3473:      compiler->callback(
        -: 3474:          YARA_ERROR_LEVEL_ERROR,
        -: 3475:          file_name,
        -: 3476:          compiler->last_error_line,
        -: 3477:          current_rule,
        -: 3478:          error_message,
        -: 3479:          compiler->user_data);
        -: 3480:    }
        -: 3481:  }
        -: 3482:  else if (compiler->callback != NULL)
        -: 3483:  {
        -: 3484:    yr_compiler_get_error_message(compiler, message, sizeof(message));
        -: 3485:
        -: 3486:    compiler->callback(
        -: 3487:        YARA_ERROR_LEVEL_ERROR,
        -: 3488:        file_name,
        -: 3489:        compiler->last_error_line,
        -: 3490:        current_rule,
        -: 3491:        message,
        -: 3492:        compiler->user_data);
        -: 3493:  }
        -: 3494:}
        -: 3495:
        -: 3496:
        -: 3497:int yr_lex_parse_rules_string(
        -: 3498:    const char* rules_string,
        -: 3499:    YR_COMPILER* compiler)
        -: 3500:{
        -: 3501:  yyscan_t yyscanner;
        -: 3502:
        -: 3503:  compiler->errors = 0;
        -: 3504:
        -: 3505:  if (setjmp(compiler->error_recovery) != 0)
        -: 3506:    return compiler->errors;
        -: 3507:
        -: 3508:  yylex_init(&yyscanner);
        -: 3509:
        -: 3510:  #if YYDEBUG
        -: 3511:  yydebug = 1;
        -: 3512:  #endif
        -: 3513:
        -: 3514:  yyset_extra(compiler, yyscanner);
        -: 3515:  yy_scan_string(rules_string, yyscanner);
        -: 3516:  yyset_lineno(1, yyscanner);
        -: 3517:  yyparse(yyscanner, compiler);
        -: 3518:  yylex_destroy(yyscanner);
        -: 3519:
        -: 3520:  return compiler->errors;
        -: 3521:}
        -: 3522:
        -: 3523:
        -: 3524:int yr_lex_parse_rules_file(
        -: 3525:    FILE* rules_file,
        -: 3526:    YR_COMPILER* compiler)
        -: 3527:{
        -: 3528:  yyscan_t yyscanner;
        -: 3529:
        -: 3530:  compiler->errors = 0;
        -: 3531:
        -: 3532:  if (setjmp(compiler->error_recovery) != 0)
        -: 3533:    return compiler->errors;
        -: 3534:
        -: 3535:  yylex_init(&yyscanner);
        -: 3536:
        -: 3537:  #if YYDEBUG
        -: 3538:  yydebug = 1;
        -: 3539:  #endif
        -: 3540:
        -: 3541:  yyset_in(rules_file, yyscanner);
        -: 3542:  yyset_extra(compiler, yyscanner);
        -: 3543:  yyparse(yyscanner, compiler);
        -: 3544:  yylex_destroy(yyscanner);
        -: 3545:
        -: 3546:  return compiler->errors;
        -: 3547:}
        -: 3548:
        -: 3549:
        -: 3550:int yr_lex_parse_rules_fd(
        -: 3551:    YR_FILE_DESCRIPTOR rules_fd,
        -: 3552:    YR_COMPILER* compiler)
        -: 3553:{
        -: 3554:  yyscan_t yyscanner;
        -: 3555:  size_t file_size;
        -: 3556:  void* buffer;
        -: 3557:
        -: 3558:  #if defined(_WIN32) || defined(__CYGWIN__)
        -: 3559:  DWORD bytes_read;
        -: 3560:  #endif
        -: 3561:
        -: 3562:  compiler->errors = 0;
        -: 3563:
        -: 3564:  if (setjmp(compiler->error_recovery) != 0)
        -: 3565:    return compiler->errors;
        -: 3566:
        -: 3567:  #if defined(_WIN32) || defined(__CYGWIN__)
        -: 3568:  file_size = (size_t) GetFileSize(rules_fd, NULL);
        -: 3569:  #else
        -: 3570:  struct stat fs;
        -: 3571:  if (fstat(rules_fd, &fs) != 0)
        -: 3572:  {
        -: 3573:    compiler->errors = 1;
        -: 3574:    compiler->last_error = ERROR_COULD_NOT_READ_FILE;
        -: 3575:    return compiler->errors;
        -: 3576:  }
        -: 3577:  file_size = (size_t) fs.st_size;
        -: 3578:  #endif
        -: 3579:
        -: 3580:  buffer = yr_malloc(file_size);
        -: 3581:
        -: 3582:  if (buffer == NULL)
        -: 3583:  {
        -: 3584:    compiler->errors = 1;
        -: 3585:    compiler->last_error = ERROR_INSUFFICIENT_MEMORY;
        -: 3586:    return compiler->errors;
        -: 3587:  }
        -: 3588:
        -: 3589:  #if defined(_WIN32) || defined(__CYGWIN__)
        -: 3590:  if (!ReadFile(rules_fd, buffer, file_size, &bytes_read, NULL))
        -: 3591:  #else
        -: 3592:  if (read(rules_fd, buffer, file_size) != file_size)
        -: 3593:  #endif
        -: 3594:  {
        -: 3595:    yr_free(buffer);
        -: 3596:    compiler->errors = 1;
        -: 3597:    compiler->last_error = ERROR_COULD_NOT_READ_FILE;
        -: 3598:    return compiler->errors;
        -: 3599:  }
        -: 3600:
        -: 3601:  yylex_init(&yyscanner);
        -: 3602:
        -: 3603:  #if YYDEBUG
        -: 3604:  yydebug = 1;
        -: 3605:  #endif
        -: 3606:
        -: 3607:  yyset_extra(compiler, yyscanner);
        -: 3608:  yy_scan_bytes((const char*) buffer, (int) file_size, yyscanner);
        -: 3609:  yyset_lineno(1, yyscanner);
        -: 3610:  yyparse(yyscanner, compiler);
        -: 3611:  yylex_destroy(yyscanner);
        -: 3612:
        -: 3613:  yr_free(buffer);
        -: 3614:
        -: 3615:  return compiler->errors;
        -: 3616:}
        -: 3617:
