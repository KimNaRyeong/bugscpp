        -:    0:Source:stopwatch.c
        -:    0:Graph:/home/workspace/libyara/stopwatch.gcno
        -:    0:Data:/home/workspace/libyara/stopwatch.gcda
        -:    0:Runs:7
        -:    1:/*
        -:    2:Copyright (c) 2017. The YARA Authors. All Rights Reserved.
        -:    3:
        -:    4:Redistribution and use in source and binary forms, with or without modification,
        -:    5:are permitted provided that the following conditions are met:
        -:    6:
        -:    7:1. Redistributions of source code must retain the above copyright notice, this
        -:    8:list of conditions and the following disclaimer.
        -:    9:
        -:   10:2. Redistributions in binary form must reproduce the above copyright notice,
        -:   11:this list of conditions and the following disclaimer in the documentation and/or
        -:   12:other materials provided with the distribution.
        -:   13:
        -:   14:3. Neither the name of the copyright holder nor the names of its contributors
        -:   15:may be used to endorse or promote products derived from this software without
        -:   16:specific prior written permission.
        -:   17:
        -:   18:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:   19:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   20:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   21:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:   22:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   23:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   24:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:   25:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   26:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   27:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   28:*/
        -:   29:
        -:   30:#include <yara/stopwatch.h>
        -:   31:
        -:   32:#if defined(_WIN32)
        -:   33:
        -:   34:void yr_stopwatch_start(
        -:   35:    YR_STOPWATCH* sw)
        -:   36:{
        -:   37:  QueryPerformanceFrequency(&sw->frequency);
        -:   38:  QueryPerformanceCounter(&sw->start);
        -:   39:}
        -:   40:
        -:   41:
        -:   42:uint64_t yr_stopwatch_elapsed_ns(
        -:   43:    YR_STOPWATCH* sw)
        -:   44:{
        -:   45:  LARGE_INTEGER li;
        -:   46:
        -:   47:  QueryPerformanceCounter(&li);
        -:   48:
        -:   49:  return (li.QuadPart - sw->start.QuadPart) * 1000000000L / sw->frequency.QuadPart;
        -:   50:}
        -:   51:
        -:   52:
        -:   53:#elif defined(__APPLE__) && defined(__MACH__)
        -:   54:
        -:   55:void yr_stopwatch_start(
        -:   56:    YR_STOPWATCH* sw)
        -:   57:{
        -:   58:  mach_timebase_info(&sw->timebase);
        -:   59:  sw->start = mach_absolute_time();
        -:   60:}
        -:   61:
        -:   62:
        -:   63:uint64_t yr_stopwatch_elapsed_ns(
        -:   64:    YR_STOPWATCH* sw)
        -:   65:{
        -:   66:  uint64_t now = mach_absolute_time();
        -:   67:  return ((now - sw->start) * sw->timebase.numer) / sw->timebase.denom;
        -:   68:}
        -:   69:
        -:   70:
        -:   71:#elif defined(HAVE_CLOCK_GETTIME)
        -:   72:
        -:   73:#define timespecsub(tsp, usp, vsp)                      \
        -:   74:do {                                                    \
        -:   75:  (vsp)->tv_sec = (tsp)->tv_sec - (usp)->tv_sec;        \
        -:   76:  (vsp)->tv_nsec = (tsp)->tv_nsec - (usp)->tv_nsec;     \
        -:   77:  if ((vsp)->tv_nsec < 0) {                             \
        -:   78:    (vsp)->tv_sec--;                                    \
        -:   79:    (vsp)->tv_nsec += 1000000000L;                      \
        -:   80:  }                                                     \
        -:   81:} while (0)
        -:   82:
        -:   83:
    #####:   84:void yr_stopwatch_start(
        -:   85:    YR_STOPWATCH* stopwatch)
        -:   86:{
    #####:   87:  clock_gettime(CLOCK_MONOTONIC, &stopwatch->ts_start);
    #####:   88:}
        -:   89:
        -:   90:
    #####:   91:uint64_t yr_stopwatch_elapsed_ns(
        -:   92:    YR_STOPWATCH* stopwatch)
        -:   93:{
        -:   94:  struct timespec ts_stop;
        -:   95:  struct timespec ts_elapsed;
        -:   96:
    #####:   97:  clock_gettime(CLOCK_MONOTONIC, &ts_stop);
    #####:   98:  timespecsub(&ts_stop, &stopwatch->ts_start, &ts_elapsed);
    #####:   99:  return ts_elapsed.tv_sec * 1000000000L + ts_elapsed.tv_nsec;
        -:  100:}
        -:  101:
        -:  102:
        -:  103:#else
        -:  104:
        -:  105:#include <sys/time.h>
        -:  106:
        -:  107:#define timevalsub(tvp, uvp, vvp)                       \
        -:  108:do {                                                    \
        -:  109:  (vvp)->tv_sec = (tvp)->tv_sec - (uvp)->tv_sec;        \
        -:  110:  (vvp)->tv_usec = (tvp)->tv_usec - (uvp)->tv_usec;     \
        -:  111:  if ((vvp)->tv_usec < 0) {                             \
        -:  112:    (vvp)->tv_sec--;                                    \
        -:  113:    (vvp)->tv_usec += 1000000L;                         \
        -:  114:  }                                                     \
        -:  115:} while (0)
        -:  116:
        -:  117:
        -:  118:void yr_stopwatch_start(
        -:  119:    YR_STOPWATCH* stopwatch)
        -:  120:{
        -:  121:  gettimeofday(&stopwatch->tv_start, NULL);
        -:  122:}
        -:  123:
        -:  124:
        -:  125:uint64_t yr_stopwatch_elapsed_ns(
        -:  126:    YR_STOPWATCH* stopwatch)
        -:  127:{
        -:  128:  struct timeval tv_stop;
        -:  129:  struct timeval tv_elapsed;
        -:  130:
        -:  131:  gettimeofday(&tv_stop, NULL);
        -:  132:  timevalsub(&tv_stop, &stopwatch->tv_start, &tv_elapsed);
        -:  133:  return tv_elapsed.tv_sec * 1000000000L + tv_elapsed.tv_usec * 1000L;
        -:  134:}
        -:  135:
        -:  136:#endif
