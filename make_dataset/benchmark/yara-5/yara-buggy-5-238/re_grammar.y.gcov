        -:    0:Source:re_grammar.y
        -:    0:Graph:/home/workspace/libyara/re_grammar.gcno
        -:    0:Data:/home/workspace/libyara/re_grammar.gcda
        -:    0:Runs:10
        -:    1:/*
        -:    2:Copyright (c) 2013. The YARA Authors. All Rights Reserved.
        -:    3:
        -:    4:Redistribution and use in source and binary forms, with or without modification,
        -:    5:are permitted provided that the following conditions are met:
        -:    6:
        -:    7:1. Redistributions of source code must retain the above copyright notice, this
        -:    8:list of conditions and the following disclaimer.
        -:    9:
        -:   10:2. Redistributions in binary form must reproduce the above copyright notice,
        -:   11:this list of conditions and the following disclaimer in the documentation and/or
        -:   12:other materials provided with the distribution.
        -:   13:
        -:   14:3. Neither the name of the copyright holder nor the names of its contributors
        -:   15:may be used to endorse or promote products derived from this software without
        -:   16:specific prior written permission.
        -:   17:
        -:   18:THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        -:   19:ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   20:WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        -:   21:DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        -:   22:ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   23:(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   24:LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        -:   25:ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   26:(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        -:   27:SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   28:*/
        -:   29:
        -:   30:%{
        -:   31:
        -:   32:#include <yara/integers.h>
        -:   33:#include <yara/utils.h>
        -:   34:#include <yara/error.h>
        -:   35:#include <yara/limits.h>
        -:   36:#include <yara/mem.h>
        -:   37:#include <yara/re.h>
        -:   38:#include <yara/re_lexer.h>
        -:   39:
        -:   40:
        -:   41:#define YYERROR_VERBOSE
        -:   42:
        -:   43:#define YYMALLOC yr_malloc
        -:   44:#define YYFREE yr_free
        -:   45:
        -:   46:#define mark_as_not_fast_regexp() \
        -:   47:    ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP
        -:   48:
        -:   49:#define fail_if(x, error) \
        -:   50:    if (x) \
        -:   51:    { \
        -:   52:      lex_env->last_error = error; \
        -:   53:      YYABORT; \
        -:   54:    } \
        -:   55:
        -:   56:#define destroy_node_if(x, node) \
        -:   57:    if (x) \
        -:   58:    { \
        -:   59:      yr_re_node_destroy(node); \
        -:   60:    } \
        -:   61:
        -:   62:%}
        -:   63:
        -:   64:%name-prefix "re_yy"
        -:   65:%pure-parser
        -:   66:
        -:   67:%parse-param {void *yyscanner}
        -:   68:%parse-param {RE_LEX_ENVIRONMENT *lex_env}
        -:   69:
        -:   70:%lex-param {yyscan_t yyscanner}
        -:   71:%lex-param {RE_LEX_ENVIRONMENT *lex_env}
        -:   72:
        -:   73:%union {
        -:   74:  int integer;
        -:   75:  uint32_t range;
        -:   76:  RE_NODE* re_node;
        -:   77:  RE_CLASS* re_class;
        -:   78:}
        -:   79:
        -:   80:
        -:   81:%token <integer> _CHAR_ _ANY_
        -:   82:%token <range> _RANGE_
        -:   83:%token <re_class> _CLASS_
        -:   84:
        -:   85:%token _WORD_CHAR_
        -:   86:%token _NON_WORD_CHAR_
        -:   87:%token _SPACE_
        -:   88:%token _NON_SPACE_
        -:   89:%token _DIGIT_
        -:   90:%token _NON_DIGIT_
        -:   91:%token _WORD_BOUNDARY_
        -:   92:%token _NON_WORD_BOUNDARY_
        -:   93:
        -:   94:%type <re_node>  alternative concatenation repeat single
        -:   95:
    #####:   96:%destructor { yr_free($$); $$ = NULL; } _CLASS_
    #####:   97:%destructor { yr_re_node_destroy($$); $$ = NULL; } alternative
    #####:   98:%destructor { yr_re_node_destroy($$); $$ = NULL; } concatenation
    #####:   99:%destructor { yr_re_node_destroy($$); $$ = NULL; } repeat
    #####:  100:%destructor { yr_re_node_destroy($$); $$ = NULL; } single
        -:  101:
        -:  102:%%
        -:  103:
        -:  104:re  : alternative
        -:  105:      {
        2:  106:        RE_AST* re_ast = yyget_extra(yyscanner);
        2:  107:        re_ast->root_node = $1;
        -:  108:      }
        -:  109:    | error
        -:  110:    ;
        -:  111:
        -:  112:alternative
        -:  113:    : concatenation
        -:  114:      {
        2:  115:        $$ = $1;
        -:  116:      }
        -:  117:    | alternative '|' concatenation
        -:  118:      {
    #####:  119:        mark_as_not_fast_regexp();
        -:  120:
    #####:  121:        $$ = yr_re_node_create(RE_NODE_ALT);
        -:  122:
    #####:  123:        destroy_node_if($$ == NULL, $1);
    #####:  124:        destroy_node_if($$ == NULL, $3);
        -:  125:
    #####:  126:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  127:
    #####:  128:        yr_re_node_append_child($$, $1);
    #####:  129:        yr_re_node_append_child($$, $3);
        -:  130:      }
        -:  131:    | alternative '|'
        -:  132:      {
        -:  133:        RE_NODE* node;
        -:  134:
    #####:  135:        mark_as_not_fast_regexp();
        -:  136:
    #####:  137:        node = yr_re_node_create(RE_NODE_EMPTY);
        -:  138:
    #####:  139:        destroy_node_if(node == NULL, $1);
    #####:  140:        fail_if(node == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  141:
    #####:  142:        $$ = yr_re_node_create(RE_NODE_ALT);
        -:  143:
    #####:  144:        destroy_node_if($$ == NULL, node);
    #####:  145:        destroy_node_if($$ == NULL, $1);
        -:  146:
    #####:  147:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  148:
    #####:  149:        yr_re_node_append_child($$, $1);
    #####:  150:        yr_re_node_append_child($$, node);
        -:  151:      }
        -:  152:    ;
        -:  153:
        -:  154:concatenation
        -:  155:    : repeat
        -:  156:      {
        2:  157:        $$ = yr_re_node_create(RE_NODE_CONCAT);
        -:  158:
       2*:  159:        destroy_node_if($$ == NULL, $1);
       2*:  160:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  161:
        2:  162:        yr_re_node_append_child($$, $1);
        -:  163:      }
        -:  164:    | concatenation repeat
        -:  165:      {
        4:  166:        yr_re_node_append_child($1, $2);
        4:  167:        $$ = $1;
        -:  168:      }
        -:  169:    ;
        -:  170:
        -:  171:repeat
        -:  172:    : single '*'
        -:  173:      {
        -:  174:        RE_AST* re_ast;
        -:  175:
    #####:  176:        mark_as_not_fast_regexp();
        -:  177:
    #####:  178:        re_ast = yyget_extra(yyscanner);
    #####:  179:        re_ast->flags |= RE_FLAGS_GREEDY;
        -:  180:
    #####:  181:        $$ = yr_re_node_create(RE_NODE_STAR);
        -:  182:
    #####:  183:        destroy_node_if($$ == NULL, $1);
    #####:  184:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  185:
    #####:  186:        yr_re_node_append_child($$, $1);
        -:  187:      }
        -:  188:    | single '*' '?'
        -:  189:      {
        -:  190:        RE_AST* re_ast;
        -:  191:
    #####:  192:        mark_as_not_fast_regexp();
        -:  193:
    #####:  194:        re_ast = yyget_extra(yyscanner);
    #####:  195:        re_ast->flags |= RE_FLAGS_UNGREEDY;
        -:  196:
    #####:  197:        $$ = yr_re_node_create(RE_NODE_STAR);
        -:  198:
    #####:  199:        destroy_node_if($$ == NULL, $1);
    #####:  200:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  201:
    #####:  202:        yr_re_node_append_child($$, $1);
        -:  203:
    #####:  204:        $$->greedy = false;
        -:  205:      }
        -:  206:    | single '+'
        -:  207:      {
        -:  208:        RE_AST* re_ast;
        -:  209:
    #####:  210:        mark_as_not_fast_regexp();
        -:  211:
    #####:  212:        re_ast = yyget_extra(yyscanner);
    #####:  213:        re_ast->flags |= RE_FLAGS_GREEDY;
        -:  214:
    #####:  215:        $$ = yr_re_node_create(RE_NODE_PLUS);
        -:  216:
    #####:  217:        destroy_node_if($$ == NULL, $1);
    #####:  218:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  219:
    #####:  220:        yr_re_node_append_child($$, $1);
        -:  221:      }
        -:  222:    | single '+' '?'
        -:  223:      {
        -:  224:        RE_AST* re_ast;
        -:  225:
    #####:  226:        mark_as_not_fast_regexp();
        -:  227:
    #####:  228:        re_ast = yyget_extra(yyscanner);
    #####:  229:        re_ast->flags |= RE_FLAGS_UNGREEDY;
        -:  230:
    #####:  231:        $$ = yr_re_node_create(RE_NODE_PLUS);
        -:  232:
    #####:  233:        destroy_node_if($$ == NULL, $1);
    #####:  234:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  235:
    #####:  236:        yr_re_node_append_child($$, $1);
    #####:  237:        $$->greedy = false;
        -:  238:      }
        -:  239:    | single '?'
        -:  240:      {
    #####:  241:        RE_AST* re_ast = yyget_extra(yyscanner);
    #####:  242:        re_ast->flags |= RE_FLAGS_GREEDY;
        -:  243:
    #####:  244:        if ($1->type == RE_NODE_ANY)
        -:  245:        {
    #####:  246:          $$ = yr_re_node_create(RE_NODE_RANGE_ANY);
    #####:  247:          destroy_node_if(true, $1);
    #####:  248:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  249:        }
        -:  250:        else
        -:  251:        {
    #####:  252:          mark_as_not_fast_regexp();
    #####:  253:          $$ = yr_re_node_create(RE_NODE_RANGE);
    #####:  254:          destroy_node_if($$ == NULL, $1);
    #####:  255:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
    #####:  256:          yr_re_node_append_child($$, $1);
        -:  257:        }
        -:  258:
    #####:  259:        $$->start = 0;
    #####:  260:        $$->end = 1;
        -:  261:      }
        -:  262:    | single '?' '?'
        -:  263:      {
    #####:  264:        RE_AST* re_ast = yyget_extra(yyscanner);
    #####:  265:        re_ast->flags |= RE_FLAGS_UNGREEDY;
        -:  266:
    #####:  267:        if ($1->type == RE_NODE_ANY)
        -:  268:        {
    #####:  269:          $$ = yr_re_node_create(RE_NODE_RANGE_ANY);
    #####:  270:          destroy_node_if(true, $1);
    #####:  271:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  272:        }
        -:  273:        else
        -:  274:        {
    #####:  275:          mark_as_not_fast_regexp();
    #####:  276:          $$ = yr_re_node_create(RE_NODE_RANGE);
    #####:  277:          destroy_node_if($$ == NULL, $1);
    #####:  278:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
    #####:  279:          yr_re_node_append_child($$, $1);
        -:  280:        }
        -:  281:
    #####:  282:        $$->start = 0;
    #####:  283:        $$->end = 1;
    #####:  284:        $$->greedy = false;
        -:  285:      }
        -:  286:    | single _RANGE_
        -:  287:      {
    #####:  288:        RE_AST* re_ast = yyget_extra(yyscanner);
    #####:  289:        re_ast->flags |= RE_FLAGS_GREEDY;
        -:  290:
    #####:  291:        if ($1->type == RE_NODE_ANY)
        -:  292:        {
    #####:  293:          $$ = yr_re_node_create(RE_NODE_RANGE_ANY);
    #####:  294:          destroy_node_if(true, $1);
    #####:  295:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  296:        }
        -:  297:        else
        -:  298:        {
    #####:  299:          mark_as_not_fast_regexp();
    #####:  300:          $$ = yr_re_node_create(RE_NODE_RANGE);
    #####:  301:          destroy_node_if($$ == NULL, $1);
    #####:  302:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
    #####:  303:          yr_re_node_append_child($$, $1);
        -:  304:        }
        -:  305:
    #####:  306:        $$->start = $2 & 0xFFFF;;
    #####:  307:        $$->end = $2 >> 16;;
        -:  308:      }
        -:  309:    | single _RANGE_ '?'
        -:  310:      {
    #####:  311:        RE_AST* re_ast = yyget_extra(yyscanner);
    #####:  312:        re_ast->flags |= RE_FLAGS_UNGREEDY;
        -:  313:
    #####:  314:        if ($1->type == RE_NODE_ANY)
        -:  315:        {
    #####:  316:          $$ = yr_re_node_create(RE_NODE_RANGE_ANY);
    #####:  317:          destroy_node_if(true, $1);
    #####:  318:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  319:        }
        -:  320:        else
        -:  321:        {
    #####:  322:          mark_as_not_fast_regexp();
    #####:  323:          $$ = yr_re_node_create(RE_NODE_RANGE);
    #####:  324:          destroy_node_if($$ == NULL, $1);
    #####:  325:          fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
    #####:  326:          yr_re_node_append_child($$, $1);
        -:  327:        }
        -:  328:
    #####:  329:        $$->start = $2 & 0xFFFF;;
    #####:  330:        $$->end = $2 >> 16;;
    #####:  331:        $$->greedy = false;
        -:  332:      }
        -:  333:    | single
        -:  334:      {
        6:  335:        $$ = $1;
        -:  336:      }
        -:  337:    | _WORD_BOUNDARY_
        -:  338:      {
    #####:  339:        $$ = yr_re_node_create(RE_NODE_WORD_BOUNDARY);
        -:  340:
    #####:  341:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  342:      }
        -:  343:    | _NON_WORD_BOUNDARY_
        -:  344:      {
    #####:  345:        $$ = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY);
        -:  346:
    #####:  347:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  348:      }
        -:  349:    | '^'
        -:  350:      {
    #####:  351:        $$ = yr_re_node_create(RE_NODE_ANCHOR_START);
        -:  352:
    #####:  353:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  354:      }
        -:  355:    | '$'
        -:  356:      {
    #####:  357:        $$ = yr_re_node_create(RE_NODE_ANCHOR_END);
        -:  358:
    #####:  359:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  360:      }
        -:  361:    ;
        -:  362:
        -:  363:single
        -:  364:    : '(' alternative ')'
        -:  365:      {
    #####:  366:        $$ = $2;
        -:  367:      }
        -:  368:    | '.'
        -:  369:      {
        1:  370:        $$ = yr_re_node_create(RE_NODE_ANY);
        -:  371:
       1*:  372:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  373:
        1:  374:        $$->value = 0x00;
        1:  375:        $$->mask = 0x00;
        -:  376:      }
        -:  377:    | _CHAR_
        -:  378:      {
        5:  379:        $$ = yr_re_node_create(RE_NODE_LITERAL);
        -:  380:
       5*:  381:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  382:
        5:  383:        $$->value = $1;
        5:  384:        $$->mask = 0xFF;
        -:  385:      }
        -:  386:    | _WORD_CHAR_
        -:  387:      {
    #####:  388:        $$ = yr_re_node_create(RE_NODE_WORD_CHAR);
        -:  389:
    #####:  390:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  391:      }
        -:  392:    | _NON_WORD_CHAR_
        -:  393:      {
    #####:  394:        $$ = yr_re_node_create(RE_NODE_NON_WORD_CHAR);
        -:  395:
    #####:  396:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  397:      }
        -:  398:    | _SPACE_
        -:  399:      {
    #####:  400:        $$ = yr_re_node_create(RE_NODE_SPACE);
        -:  401:
    #####:  402:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  403:      }
        -:  404:    | _NON_SPACE_
        -:  405:      {
    #####:  406:         $$ = yr_re_node_create(RE_NODE_NON_SPACE);
        -:  407:
    #####:  408:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  409:      }
        -:  410:    | _DIGIT_
        -:  411:      {
    #####:  412:        $$ = yr_re_node_create(RE_NODE_DIGIT);
        -:  413:
    #####:  414:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  415:      }
        -:  416:    | _NON_DIGIT_
        -:  417:      {
    #####:  418:        $$ = yr_re_node_create(RE_NODE_NON_DIGIT);
        -:  419:
    #####:  420:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  421:      }
        -:  422:    | _CLASS_
        -:  423:      {
    #####:  424:        $$ = yr_re_node_create(RE_NODE_CLASS);
        -:  425:
    #####:  426:        fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);
        -:  427:
    #####:  428:        $$->re_class = $1;
        -:  429:      }
        -:  430:    ;
        -:  431:%%
