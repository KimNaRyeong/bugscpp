        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-math.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <math.h>
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-builtins.h"
        -:   20:#include "ecma-conversion.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-objects-general.h"
        -:   26:#include "ecma-objects.h"
        -:   27:
        -:   28:#include "jrt-libc-includes.h"
        -:   29:#include "jrt.h"
        -:   30:
        -:   31:#if defined(_WIN32)
        -:   32:#include <intrin.h>
        -:   33:#endif /* defined(_WIN32) */
        -:   34:
        -:   35:#if JERRY_BUILTIN_MATH
        -:   36:
        -:   37:#define ECMA_BUILTINS_INTERNAL
        -:   38:#include "ecma-builtins-internal.h"
        -:   39:
        -:   40:/**
        -:   41: * This object has a custom dispatch function.
        -:   42: */
        -:   43:#define BUILTIN_CUSTOM_DISPATCH
        -:   44:
        -:   45:/**
        -:   46: * List of built-in routine identifiers.
        -:   47: */
        -:   48:enum
        -:   49:{
        -:   50:  ECMA_MATH_OBJECT_ROUTINE_START = 0,
        -:   51:
        -:   52:  ECMA_MATH_OBJECT_ABS, /* ECMA-262 v5, 15.8.2.1 */
        -:   53:  ECMA_MATH_OBJECT_ACOS, /* ECMA-262 v5, 15.8.2.2 */
        -:   54:  ECMA_MATH_OBJECT_ASIN, /* ECMA-262 v5, 15.8.2.3 */
        -:   55:  ECMA_MATH_OBJECT_ATAN, /* ECMA-262 v5, 15.8.2.4 */
        -:   56:  ECMA_MATH_OBJECT_CEIL, /* ECMA-262 v5, 15.8.2.6 */
        -:   57:  ECMA_MATH_OBJECT_COS, /* ECMA-262 v5, 15.8.2.7 */
        -:   58:  ECMA_MATH_OBJECT_EXP, /* ECMA-262 v5, 15.8.2.8 */
        -:   59:  ECMA_MATH_OBJECT_FLOOR, /* ECMA-262 v5, 15.8.2.9 */
        -:   60:  ECMA_MATH_OBJECT_LOG, /* ECMA-262 v5, 15.8.2.10 */
        -:   61:  ECMA_MATH_OBJECT_ROUND, /* ECMA-262 v5, 15.8.2.15 */
        -:   62:  ECMA_MATH_OBJECT_SIN, /* ECMA-262 v5, 15.8.2.16 */
        -:   63:  ECMA_MATH_OBJECT_SQRT, /* ECMA-262 v5, 15.8.2.17 */
        -:   64:  ECMA_MATH_OBJECT_TAN, /* ECMA-262 v5, 15.8.2.18 */
        -:   65:#if JERRY_ESNEXT
        -:   66:  ECMA_MATH_OBJECT_ACOSH, /* ECMA-262 v6, 20.2.2.3  */
        -:   67:  ECMA_MATH_OBJECT_ASINH, /* ECMA-262 v6, 20.2.2.5  */
        -:   68:  ECMA_MATH_OBJECT_ATANH, /* ECMA-262 v6, 20.2.2.7  */
        -:   69:  ECMA_MATH_OBJECT_CBRT, /* ECMA-262 v6, 20.2.2.9  */
        -:   70:  ECMA_MATH_OBJECT_CLZ32, /* ECMA-262 v6, 20.2.2.11  */
        -:   71:  ECMA_MATH_OBJECT_COSH, /* ECMA-262 v6, 20.2.2.13  */
        -:   72:  ECMA_MATH_OBJECT_EXPM1, /* ECMA-262 v6, 20.2.2.15  */
        -:   73:  ECMA_MATH_OBJECT_FROUND, /* ECMA-262 v6, 20.2.2.17  */
        -:   74:  ECMA_MATH_OBJECT_LOG1P, /* ECMA-262 v6, 20.2.2.21  */
        -:   75:  ECMA_MATH_OBJECT_LOG10, /* ECMA-262 v6, 20.2.2.22  */
        -:   76:  ECMA_MATH_OBJECT_LOG2, /* ECMA-262 v6, 20.2.2.23  */
        -:   77:  ECMA_MATH_OBJECT_SIGN, /* ECMA-262 v6, 20.2.2.29 */
        -:   78:  ECMA_MATH_OBJECT_SINH, /* ECMA-262 v6, 20.2.2.31  */
        -:   79:  ECMA_MATH_OBJECT_TANH, /* ECMA-262 v6, 20.2.2.34  */
        -:   80:  ECMA_MATH_OBJECT_TRUNC, /* ECMA-262 v6, 20.2.2.35  */
        -:   81:#endif /* JERRY_ESNEXT */
        -:   82:  ECMA_MATH_OBJECT_ATAN2,
        -:   83:/* ECMA-262 v5, 15.8.2.5 */ /* first routine with 2 arguments */
        -:   84:#if JERRY_ESNEXT
        -:   85:  ECMA_MATH_OBJECT_IMUL, /* ECMA-262 v6, 20.2.2.19  */
        -:   86:#endif /* JERRY_ESNEXT */
        -:   87:  ECMA_MATH_OBJECT_POW,
        -:   88:  /* ECMA-262 v5, 15.8.2.13 */ /* last routine with 1 or 2 arguments*/
        -:   89:  ECMA_MATH_OBJECT_MAX, /* ECMA-262 v5, 15.8.2.11 */
        -:   90:  ECMA_MATH_OBJECT_MIN, /* ECMA-262 v5, 15.8.2.12 */
        -:   91:#if JERRY_ESNEXT
        -:   92:  ECMA_MATH_OBJECT_HYPOT, /* ECMA-262 v6, 20.2.2.18  */
        -:   93:#endif /* JERRY_ESNEXT */
        -:   94:  ECMA_MATH_OBJECT_RANDOM, /* ECMA-262 v5, 15.8.2.14 */
        -:   95:};
        -:   96:
        -:   97:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-math.inc.h"
        -:   98:#define BUILTIN_UNDERSCORED_ID  math
        -:   99:#include "ecma-builtin-internal-routines-template.inc.h"
        -:  100:
        -:  101:/** \addtogroup ecma ECMA
        -:  102: * @{
        -:  103: *
        -:  104: * \addtogroup ecmabuiltins
        -:  105: * @{
        -:  106: *
        -:  107: * \addtogroup object ECMA Object object built-in
        -:  108: * @{
        -:  109: */
        -:  110:
        -:  111:/**
        -:  112: * The Math object's 'max' 'min' routines.
        -:  113: *
        -:  114: * See also:
        -:  115: *          ECMA-262 v5, 15.8.2.11
        -:  116: *          ECMA-262 v5, 15.8.2.12
        -:  117: *
        -:  118: * @return ecma value
        -:  119: *         Returned value must be freed with ecma_free_value.
        -:  120: */
        -:  121:static ecma_value_t
    #####:  122:ecma_builtin_math_object_max_min (bool is_max, /**< 'max' or 'min' operation */
        -:  123:                                  const ecma_value_t *arg, /**< arguments list */
        -:  124:                                  uint32_t args_number) /**< number of arguments */
        -:  125:{
    #####:  126:  ecma_number_t result_num = ecma_number_make_infinity (is_max);
    #####:  127:  bool nan_found = false;
        -:  128:
    #####:  129:  while (args_number > 0)
        -:  130:  {
    #####:  131:    ecma_number_t arg_num;
        -:  132:
    #####:  133:    if (ecma_is_value_number (*arg))
        -:  134:    {
    #####:  135:      arg_num = ecma_get_number_from_value (*arg);
        -:  136:    }
        -:  137:    else
        -:  138:    {
    #####:  139:      ecma_value_t value = ecma_op_to_number (*arg, &arg_num);
        -:  140:
    #####:  141:      if (ECMA_IS_VALUE_ERROR (value))
        -:  142:      {
    #####:  143:        return value;
        -:  144:      }
        -:  145:    }
        -:  146:
    #####:  147:    arg++;
    #####:  148:    args_number--;
        -:  149:
    #####:  150:    if (JERRY_UNLIKELY (nan_found || ecma_number_is_nan (arg_num)))
        -:  151:    {
    #####:  152:      nan_found = true;
    #####:  153:      continue;
        -:  154:    }
        -:  155:
    #####:  156:    if (ecma_number_is_zero (arg_num) && ecma_number_is_zero (result_num))
    #####:  157:    {
    #####:  158:      bool is_negative = ecma_number_is_negative (arg_num);
        -:  159:
    #####:  160:      if (is_max ? !is_negative : is_negative)
        -:  161:      {
    #####:  162:        result_num = arg_num;
        -:  163:      }
        -:  164:    }
        -:  165:    else
        -:  166:    {
    #####:  167:      if (is_max ? (arg_num > result_num) : (arg_num < result_num))
        -:  168:      {
    #####:  169:        result_num = arg_num;
        -:  170:      }
        -:  171:    }
        -:  172:  }
        -:  173:
    #####:  174:  if (JERRY_UNLIKELY (nan_found))
        -:  175:  {
    #####:  176:    result_num = ecma_number_make_nan ();
        -:  177:  }
        -:  178:
    #####:  179:  return ecma_make_number_value (result_num);
        -:  180:} /* ecma_builtin_math_object_max_min */
        -:  181:
        -:  182:#if JERRY_ESNEXT
        -:  183:/**
        -:  184: * The Math object's 'hypot' routine
        -:  185: *
        -:  186: * See also:
        -:  187: *          ECMA-262 v6, 20.2.2.18
        -:  188: *
        -:  189: * @return ecma value
        -:  190: *         Returned value must be freed with ecma_free_value.
        -:  191: */
        -:  192:static ecma_value_t
    #####:  193:ecma_builtin_math_object_hypot (const ecma_value_t *arg, /**< arguments list */
        -:  194:                                uint32_t args_number) /**< number of arguments */
        -:  195:{
    #####:  196:  if (args_number == 0)
        -:  197:  {
    #####:  198:    return ecma_make_number_value (0.0);
        -:  199:  }
        -:  200:
    #####:  201:  bool nan_found = false;
    #####:  202:  bool inf_found = false;
    #####:  203:  ecma_number_t result_num = 0;
        -:  204:
    #####:  205:  while (args_number > 0)
        -:  206:  {
    #####:  207:    ecma_number_t arg_num;
    #####:  208:    if (ecma_is_value_number (*arg))
        -:  209:    {
    #####:  210:      arg_num = ecma_get_number_from_value (*arg);
        -:  211:    }
        -:  212:    else
        -:  213:    {
    #####:  214:      ecma_value_t value = ecma_op_to_number (*arg, &arg_num);
    #####:  215:      if (ECMA_IS_VALUE_ERROR (value))
        -:  216:      {
    #####:  217:        return value;
        -:  218:      }
        -:  219:    }
        -:  220:
    #####:  221:    arg++;
    #####:  222:    args_number--;
        -:  223:
    #####:  224:    if (JERRY_UNLIKELY (inf_found || ecma_number_is_infinity (arg_num)))
        -:  225:    {
    #####:  226:      inf_found = true;
    #####:  227:      continue;
        -:  228:    }
        -:  229:
    #####:  230:    if (JERRY_UNLIKELY (nan_found || ecma_number_is_nan (arg_num)))
        -:  231:    {
    #####:  232:      nan_found = true;
    #####:  233:      continue;
        -:  234:    }
        -:  235:
    #####:  236:    result_num += arg_num * arg_num;
        -:  237:  }
        -:  238:
    #####:  239:  if (JERRY_UNLIKELY (inf_found))
        -:  240:  {
    #####:  241:    return ecma_make_number_value (ecma_number_make_infinity (false));
        -:  242:  }
        -:  243:
    #####:  244:  if (JERRY_UNLIKELY (nan_found))
        -:  245:  {
    #####:  246:    return ecma_make_nan_value ();
        -:  247:  }
        -:  248:
    #####:  249:  return ecma_make_number_value (sqrt (result_num));
        -:  250:} /* ecma_builtin_math_object_hypot */
        -:  251:
        -:  252:/**
        -:  253: * The Math object's 'trunc' routine
        -:  254: *
        -:  255: * See also:
        -:  256: *          ECMA-262 v6, 20.2.2.35
        -:  257: *
        -:  258: * @return ecma number
        -:  259: */
        -:  260:static ecma_number_t
    #####:  261:ecma_builtin_math_object_trunc (ecma_number_t arg)
        -:  262:{
    #####:  263:  if (ecma_number_is_nan (arg) || ecma_number_is_infinity (arg) || ecma_number_is_zero (arg))
        -:  264:  {
    #####:  265:    return arg;
        -:  266:  }
        -:  267:
    #####:  268:  if ((arg > 0) && (arg < 1))
        -:  269:  {
    #####:  270:    return (ecma_number_t) 0.0;
        -:  271:  }
        -:  272:
    #####:  273:  if ((arg < 0) && (arg > -1))
        -:  274:  {
    #####:  275:    return (ecma_number_t) -0.0;
        -:  276:  }
        -:  277:
    #####:  278:  return (ecma_number_t) arg - fmod (arg, 1);
        -:  279:} /* ecma_builtin_math_object_trunc */
        -:  280:
        -:  281:/**
        -:  282: * The Math object's 'sign' routine
        -:  283: *
        -:  284: * See also:
        -:  285: *          ECMA-262 v6, 20.2.2.29
        -:  286: *
        -:  287: * @return ecma number
        -:  288: */
        -:  289:static ecma_number_t
    #####:  290:ecma_builtin_math_object_sign (ecma_number_t arg)
        -:  291:{
    #####:  292:  if (ecma_number_is_nan (arg) || ecma_number_is_zero (arg))
        -:  293:  {
    #####:  294:    return arg;
        -:  295:  }
        -:  296:
    #####:  297:  if (ecma_number_is_negative (arg))
        -:  298:  {
    #####:  299:    return (ecma_number_t) -1.0;
        -:  300:  }
        -:  301:
    #####:  302:  return (ecma_number_t) 1.0;
        -:  303:} /* ecma_builtin_math_object_sign */
        -:  304:
        -:  305:#endif /* JERRY_ESNEXT */
        -:  306:
        -:  307:/**
        -:  308: * The Math object's 'random' routine.
        -:  309: *
        -:  310: * See also:
        -:  311: *          ECMA-262 v5, 15.8.2.14
        -:  312: *
        -:  313: * @return ecma value
        -:  314: *         Returned value must be freed with ecma_free_value.
        -:  315: */
        -:  316:static ecma_value_t
    #####:  317:ecma_builtin_math_object_random (void)
        -:  318:{
    #####:  319:  const ecma_number_t rand_max = (ecma_number_t) RAND_MAX;
    #####:  320:  const ecma_number_t rand_max_min_1 = (ecma_number_t) (RAND_MAX - 1);
        -:  321:
    #####:  322:  return ecma_make_number_value (((ecma_number_t) rand ()) / rand_max * rand_max_min_1 / rand_max);
        -:  323:} /* ecma_builtin_math_object_random */
        -:  324:
        -:  325:/**
        -:  326: * Dispatcher for the built-in's routines.
        -:  327: *
        -:  328: * @return ecma value
        -:  329: *         Returned value must be freed with ecma_free_value.
        -:  330: */
        -:  331:ecma_value_t
    #####:  332:ecma_builtin_math_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  333:                                    ecma_value_t this_arg, /**< 'this' argument value */
        -:  334:                                    const ecma_value_t arguments_list[], /**< list of arguments
        -:  335:                                                                          *   passed to routine */
        -:  336:                                    uint32_t arguments_number) /**< length of arguments' list */
        -:  337:{
        -:  338:  JERRY_UNUSED (this_arg);
        -:  339:
    #####:  340:  if (builtin_routine_id <= ECMA_MATH_OBJECT_POW)
        -:  341:  {
    #####:  342:    ecma_number_t x = ecma_number_make_nan ();
    #####:  343:    ecma_number_t y = ecma_number_make_nan ();
        -:  344:
    #####:  345:    if (arguments_number >= 1)
        -:  346:    {
    #####:  347:      if (ecma_is_value_number (arguments_list[0]))
        -:  348:      {
    #####:  349:        x = ecma_get_number_from_value (arguments_list[0]);
        -:  350:      }
        -:  351:      else
        -:  352:      {
    #####:  353:        ecma_value_t value = ecma_op_to_number (arguments_list[0], &x);
        -:  354:
    #####:  355:        if (ECMA_IS_VALUE_ERROR (value))
        -:  356:        {
    #####:  357:          return value;
        -:  358:        }
        -:  359:      }
        -:  360:    }
        -:  361:
    #####:  362:    if (builtin_routine_id >= ECMA_MATH_OBJECT_ATAN2 && arguments_number >= 2)
        -:  363:    {
    #####:  364:      if (ecma_is_value_number (arguments_list[1]))
        -:  365:      {
    #####:  366:        y = ecma_get_number_from_value (arguments_list[1]);
        -:  367:      }
        -:  368:      else
        -:  369:      {
    #####:  370:        ecma_value_t value = ecma_op_to_number (arguments_list[1], &y);
        -:  371:
    #####:  372:        if (ECMA_IS_VALUE_ERROR (value))
        -:  373:        {
    #####:  374:          return value;
        -:  375:        }
        -:  376:      }
        -:  377:    }
        -:  378:
    #####:  379:    switch (builtin_routine_id)
        -:  380:    {
    #####:  381:      case ECMA_MATH_OBJECT_ABS:
        -:  382:      {
    #####:  383:        x = DOUBLE_TO_ECMA_NUMBER_T (fabs (x));
    #####:  384:        break;
        -:  385:      }
    #####:  386:      case ECMA_MATH_OBJECT_ACOS:
        -:  387:      {
    #####:  388:        x = DOUBLE_TO_ECMA_NUMBER_T (acos (x));
    #####:  389:        break;
        -:  390:      }
    #####:  391:      case ECMA_MATH_OBJECT_ASIN:
        -:  392:      {
    #####:  393:        x = DOUBLE_TO_ECMA_NUMBER_T (asin (x));
    #####:  394:        break;
        -:  395:      }
    #####:  396:      case ECMA_MATH_OBJECT_ATAN:
        -:  397:      {
    #####:  398:        x = DOUBLE_TO_ECMA_NUMBER_T (atan (x));
    #####:  399:        break;
        -:  400:      }
    #####:  401:      case ECMA_MATH_OBJECT_CEIL:
        -:  402:      {
    #####:  403:        x = DOUBLE_TO_ECMA_NUMBER_T (ceil (x));
    #####:  404:        break;
        -:  405:      }
    #####:  406:      case ECMA_MATH_OBJECT_COS:
        -:  407:      {
    #####:  408:        x = DOUBLE_TO_ECMA_NUMBER_T (cos (x));
    #####:  409:        break;
        -:  410:      }
    #####:  411:      case ECMA_MATH_OBJECT_EXP:
        -:  412:      {
    #####:  413:        x = DOUBLE_TO_ECMA_NUMBER_T (exp (x));
    #####:  414:        break;
        -:  415:      }
    #####:  416:      case ECMA_MATH_OBJECT_FLOOR:
        -:  417:      {
    #####:  418:        x = DOUBLE_TO_ECMA_NUMBER_T (floor (x));
    #####:  419:        break;
        -:  420:      }
    #####:  421:      case ECMA_MATH_OBJECT_LOG:
        -:  422:      {
    #####:  423:        x = DOUBLE_TO_ECMA_NUMBER_T (log (x));
    #####:  424:        break;
        -:  425:      }
        -:  426:#if JERRY_ESNEXT
    #####:  427:      case ECMA_MATH_OBJECT_TRUNC:
        -:  428:      {
    #####:  429:        x = ecma_builtin_math_object_trunc (x);
    #####:  430:        break;
        -:  431:      }
    #####:  432:      case ECMA_MATH_OBJECT_SIGN:
        -:  433:      {
    #####:  434:        x = ecma_builtin_math_object_sign (x);
    #####:  435:        break;
        -:  436:      }
        -:  437:#endif /* JERRY_ESNEXT */
    #####:  438:      case ECMA_MATH_OBJECT_ROUND:
        -:  439:      {
    #####:  440:        if (ecma_number_is_nan (x) || ecma_number_is_zero (x) || ecma_number_is_infinity (x))
        -:  441:        {
        -:  442:          break;
        -:  443:        }
        -:  444:
    #####:  445:        ecma_number_t fraction = fmod (x, ECMA_NUMBER_ONE);
        -:  446:
    #####:  447:        if (ecma_number_is_zero (fraction))
        -:  448:        {
    #####:  449:          break;
        -:  450:        }
        -:  451:
    #####:  452:        if (ecma_number_is_negative (x))
        -:  453:        {
    #####:  454:          if (x >= -ECMA_NUMBER_HALF)
        -:  455:          {
    #####:  456:            x = -ECMA_NUMBER_ZERO;
    #####:  457:            break;
        -:  458:          }
        -:  459:
    #####:  460:          if (fraction < -ECMA_NUMBER_HALF)
        -:  461:          {
    #####:  462:            x -= ECMA_NUMBER_HALF;
        -:  463:          }
        -:  464:        }
    #####:  465:        else if (fraction >= ECMA_NUMBER_HALF)
        -:  466:        {
    #####:  467:          x += ECMA_NUMBER_HALF;
        -:  468:        }
        -:  469:
    #####:  470:        x = ecma_number_trunc (x);
    #####:  471:        break;
        -:  472:      }
    #####:  473:      case ECMA_MATH_OBJECT_SIN:
        -:  474:      {
    #####:  475:        x = DOUBLE_TO_ECMA_NUMBER_T (sin (x));
    #####:  476:        break;
        -:  477:      }
    #####:  478:      case ECMA_MATH_OBJECT_SQRT:
        -:  479:      {
    #####:  480:        x = DOUBLE_TO_ECMA_NUMBER_T (sqrt (x));
    #####:  481:        break;
        -:  482:      }
    #####:  483:      case ECMA_MATH_OBJECT_TAN:
        -:  484:      {
    #####:  485:        x = DOUBLE_TO_ECMA_NUMBER_T (tan (x));
    #####:  486:        break;
        -:  487:      }
    #####:  488:      case ECMA_MATH_OBJECT_ATAN2:
        -:  489:      {
    #####:  490:        x = DOUBLE_TO_ECMA_NUMBER_T (atan2 (x, y));
    #####:  491:        break;
        -:  492:      }
    #####:  493:      case ECMA_MATH_OBJECT_POW:
        -:  494:      {
    #####:  495:        x = ecma_number_pow (x, y);
    #####:  496:        break;
        -:  497:      }
        -:  498:#if JERRY_ESNEXT
    #####:  499:      case ECMA_MATH_OBJECT_ACOSH:
        -:  500:      {
    #####:  501:        x = DOUBLE_TO_ECMA_NUMBER_T (acosh (x));
    #####:  502:        break;
        -:  503:      }
    #####:  504:      case ECMA_MATH_OBJECT_ASINH:
        -:  505:      {
    #####:  506:        x = DOUBLE_TO_ECMA_NUMBER_T (asinh (x));
    #####:  507:        break;
        -:  508:      }
    #####:  509:      case ECMA_MATH_OBJECT_ATANH:
        -:  510:      {
    #####:  511:        x = DOUBLE_TO_ECMA_NUMBER_T (atanh (x));
    #####:  512:        break;
        -:  513:      }
    #####:  514:      case ECMA_MATH_OBJECT_CBRT:
        -:  515:      {
    #####:  516:        x = DOUBLE_TO_ECMA_NUMBER_T (cbrt (x));
    #####:  517:        break;
        -:  518:      }
    #####:  519:      case ECMA_MATH_OBJECT_COSH:
        -:  520:      {
    #####:  521:        x = DOUBLE_TO_ECMA_NUMBER_T (cosh (x));
    #####:  522:        break;
        -:  523:      }
    #####:  524:      case ECMA_MATH_OBJECT_EXPM1:
        -:  525:      {
    #####:  526:        x = DOUBLE_TO_ECMA_NUMBER_T (expm1 (x));
    #####:  527:        break;
        -:  528:      }
    #####:  529:      case ECMA_MATH_OBJECT_LOG1P:
        -:  530:      {
    #####:  531:        x = DOUBLE_TO_ECMA_NUMBER_T (log1p (x));
    #####:  532:        break;
        -:  533:      }
    #####:  534:      case ECMA_MATH_OBJECT_LOG10:
        -:  535:      {
    #####:  536:        x = DOUBLE_TO_ECMA_NUMBER_T (log10 (x));
    #####:  537:        break;
        -:  538:      }
    #####:  539:      case ECMA_MATH_OBJECT_LOG2:
        -:  540:      {
    #####:  541:        x = DOUBLE_TO_ECMA_NUMBER_T (log2 (x));
    #####:  542:        break;
        -:  543:      }
    #####:  544:      case ECMA_MATH_OBJECT_SINH:
        -:  545:      {
    #####:  546:        x = DOUBLE_TO_ECMA_NUMBER_T (sinh (x));
    #####:  547:        break;
        -:  548:      }
    #####:  549:      case ECMA_MATH_OBJECT_TANH:
        -:  550:      {
    #####:  551:        x = DOUBLE_TO_ECMA_NUMBER_T (tanh (x));
    #####:  552:        break;
        -:  553:      }
    #####:  554:      case ECMA_MATH_OBJECT_CLZ32:
        -:  555:      {
    #####:  556:        uint32_t n = ecma_number_to_uint32 (x);
        -:  557:#if defined(__GNUC__) || defined(__clang__)
    #####:  558:        x = n ? __builtin_clz (n) : 32;
        -:  559:#elif defined(_WIN32)
        -:  560:        unsigned long ret;
        -:  561:        x = _BitScanReverse (&ret, n) ? 31 - ret : 32;
        -:  562:#else /* !(defined(__GNUC__) || defined(__clang__) || defined(_WIN32)) */
        -:  563:        x = 32;
        -:  564:        for (int i = 31; i >= 0; i--)
        -:  565:        {
        -:  566:          if (n >> i)
        -:  567:          {
        -:  568:            x = 31 - i;
        -:  569:            break;
        -:  570:          }
        -:  571:        }
        -:  572:#endif /* defined (__GNUC__) || defined (__clang__) */
    #####:  573:        break;
        -:  574:      }
    #####:  575:      case ECMA_MATH_OBJECT_FROUND:
        -:  576:      {
    #####:  577:        x = (float) x;
    #####:  578:        break;
        -:  579:      }
    #####:  580:      case ECMA_MATH_OBJECT_IMUL:
        -:  581:      {
    #####:  582:        x = (int32_t) (ecma_number_to_uint32 (x) * ecma_number_to_uint32 (y));
    #####:  583:        break;
        -:  584:      }
        -:  585:#endif /* JERRY_ESNEXT */
        -:  586:    }
    #####:  587:    return ecma_make_number_value (x);
        -:  588:  } /* if (builtin_routine_id <= ECMA_MATH_OBJECT_POW) */
        -:  589:
    #####:  590:  if (builtin_routine_id <= ECMA_MATH_OBJECT_MIN)
        -:  591:  {
    #####:  592:    return ecma_builtin_math_object_max_min (builtin_routine_id == ECMA_MATH_OBJECT_MAX,
        -:  593:                                             arguments_list,
        -:  594:                                             arguments_number);
        -:  595:  }
        -:  596:
        -:  597:#if JERRY_ESNEXT
    #####:  598:  if (builtin_routine_id == ECMA_MATH_OBJECT_HYPOT)
        -:  599:  {
    #####:  600:    return ecma_builtin_math_object_hypot (arguments_list, arguments_number);
        -:  601:  }
        -:  602:#endif /* JERRY_ESNEXT */
        -:  603:
    #####:  604:  JERRY_ASSERT (builtin_routine_id == ECMA_MATH_OBJECT_RANDOM);
        -:  605:
    #####:  606:  return ecma_builtin_math_object_random ();
        -:  607:} /* ecma_builtin_math_dispatch_routine */
        -:  608:
        -:  609:/**
        -:  610: * @}
        -:  611: * @}
        -:  612: * @}
        -:  613: */
        -:  614:
        -:  615:#endif /* JERRY_BUILTIN_MATH */
