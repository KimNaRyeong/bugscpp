        -:    0:Source:/home/workspace/jerry-ext/handler/handler-print.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-debugger.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:
        -:   19:#include "jerryscript-ext/handler.h"
        -:   20:
        -:   21:/**
        -:   22: * Provide a 'print' implementation for scripts.
        -:   23: *
        -:   24: * The routine converts all of its arguments to strings and outputs them
        -:   25: * char-by-char using jerry_port_print_char.
        -:   26: *
        -:   27: * The NUL character is output as "\u0000", other characters are output
        -:   28: * bytewise.
        -:   29: *
        -:   30: * Note:
        -:   31: *      This implementation does not use standard C `printf` to print its
        -:   32: *      output. This allows more flexibility but also extends the core
        -:   33: *      JerryScript engine port API. Applications that want to use
        -:   34: *      `jerryx_handler_print` must ensure that their port implementation also
        -:   35: *      provides `jerry_port_print_char`.
        -:   36: *
        -:   37: * @return undefined - if all arguments could be converted to strings,
        -:   38: *         error - otherwise.
        -:   39: */
        -:   40:jerry_value_t
    #####:   41:jerryx_handler_print (const jerry_call_info_t *call_info_p, /**< call information */
        -:   42:                      const jerry_value_t args_p[], /**< function arguments */
        -:   43:                      const jerry_length_t args_cnt) /**< number of function arguments */
        -:   44:{
        -:   45:  (void) call_info_p; /* unused */
        -:   46:
    #####:   47:  jerry_value_t ret_val = jerry_undefined ();
        -:   48:
    #####:   49:  for (jerry_length_t arg_index = 0; arg_index < args_cnt; arg_index++)
        -:   50:  {
        -:   51:    jerry_value_t str_val;
        -:   52:
    #####:   53:    if (jerry_value_is_symbol (args_p[arg_index]))
        -:   54:    {
    #####:   55:      str_val = jerry_symbol_descriptive_string (args_p[arg_index]);
        -:   56:    }
        -:   57:    else
        -:   58:    {
    #####:   59:      str_val = jerry_value_to_string (args_p[arg_index]);
        -:   60:    }
        -:   61:
    #####:   62:    if (jerry_value_is_exception (str_val))
        -:   63:    {
        -:   64:      /* There is no need to free the undefined value. */
    #####:   65:      ret_val = str_val;
    #####:   66:      break;
        -:   67:    }
        -:   68:
    #####:   69:    if (arg_index > 0)
        -:   70:    {
    #####:   71:      jerry_port_print_char (' ');
        -:   72:    }
        -:   73:
    #####:   74:    jerry_string_print (str_val);
    #####:   75:    jerry_value_free (str_val);
        -:   76:  }
        -:   77:
    #####:   78:  jerry_port_print_char ('\n');
    #####:   79:  return ret_val;
        -:   80:} /* jerryx_handler_print */
