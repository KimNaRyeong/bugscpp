        -:    0:Source:/home/workspace/tests/unit-core/test-external-string.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:static int free_count = 0;
        -:   21:
        -:   22:static const char *external_1 = "External string! External string! External string! External string!";
        -:   23:static const char *external_2 = "Object";
        -:   24:static const char *external_3 = "x!?:s";
        -:   25:static const char *external_4 = "Object property external string! Object property external string!";
        -:   26:
        -:   27:static void
    #####:   28:external_string_free_callback_1 (jerry_char_t *string_p, /**< string pointer */
        -:   29:                                 jerry_size_t string_size, /**< size of the string */
        -:   30:                                 void *user_p) /**< user pointer */
        -:   31:{
    #####:   32:  TEST_ASSERT ((const char *) string_p == external_1);
    #####:   33:  TEST_ASSERT (string_size == strlen (external_1));
    #####:   34:  TEST_ASSERT (user_p == NULL);
    #####:   35:  free_count++;
    #####:   36:} /* external_string_free_callback_1 */
        -:   37:
        -:   38:static void
    #####:   39:external_string_free_callback_2 (jerry_char_t *string_p, /**< string pointer */
        -:   40:                                 jerry_size_t string_size, /**< size of the string */
        -:   41:                                 void *user_p) /**< user pointer */
        -:   42:{
    #####:   43:  TEST_ASSERT ((const char *) string_p == external_2);
    #####:   44:  TEST_ASSERT (string_size == strlen (external_2));
    #####:   45:  TEST_ASSERT (user_p == (void *) &free_count);
    #####:   46:  free_count++;
    #####:   47:} /* external_string_free_callback_2 */
        -:   48:
        -:   49:static void
    #####:   50:external_string_free_callback_3 (jerry_char_t *string_p, /**< string pointer */
        -:   51:                                 jerry_size_t string_size, /**< size of the string */
        -:   52:                                 void *user_p) /**< user pointer */
        -:   53:{
    #####:   54:  TEST_ASSERT ((const char *) string_p == external_3);
    #####:   55:  TEST_ASSERT (string_size == strlen (external_3));
    #####:   56:  TEST_ASSERT (user_p == (void *) string_p);
    #####:   57:  free_count++;
    #####:   58:} /* external_string_free_callback_3 */
        -:   59:
        -:   60:int
    #####:   61:main (void)
        -:   62:{
    #####:   63:  TEST_INIT ();
        -:   64:
    #####:   65:  jerry_init (JERRY_INIT_EMPTY);
        -:   66:
        -:   67:  bool is_external;
        -:   68:
        -:   69:  /* Test external callback calls. */
    #####:   70:  jerry_string_external_on_free (external_string_free_callback_1);
    #####:   71:  jerry_value_t external_string = jerry_string_external_sz (external_1, NULL);
    #####:   72:  TEST_ASSERT (free_count == 0);
    #####:   73:  TEST_ASSERT (jerry_string_user_ptr (external_string, &is_external) == NULL);
    #####:   74:  TEST_ASSERT (is_external);
    #####:   75:  TEST_ASSERT (jerry_string_user_ptr (external_string, NULL) == NULL);
    #####:   76:  jerry_value_free (external_string);
    #####:   77:  TEST_ASSERT (free_count == 1);
        -:   78:
    #####:   79:  jerry_string_external_on_free (NULL);
    #####:   80:  external_string = jerry_string_external_sz (external_1, (void *) &free_count);
    #####:   81:  TEST_ASSERT (free_count == 1);
    #####:   82:  TEST_ASSERT (jerry_string_user_ptr (external_string, &is_external) == (void *) &free_count);
    #####:   83:  TEST_ASSERT (is_external);
    #####:   84:  TEST_ASSERT (jerry_string_user_ptr (external_string, NULL) == (void *) &free_count);
    #####:   85:  jerry_value_free (external_string);
    #####:   86:  TEST_ASSERT (free_count == 1);
        -:   87:
    #####:   88:  jerry_string_external_on_free (external_string_free_callback_2);
    #####:   89:  external_string = jerry_string_external_sz (external_2, (void *) &free_count);
    #####:   90:  TEST_ASSERT (free_count == 2);
    #####:   91:  TEST_ASSERT (jerry_string_user_ptr (external_string, &is_external) == NULL);
    #####:   92:  TEST_ASSERT (!is_external);
    #####:   93:  jerry_value_free (external_string);
    #####:   94:  TEST_ASSERT (free_count == 2);
        -:   95:
    #####:   96:  jerry_string_external_on_free (NULL);
    #####:   97:  external_string = jerry_string_external_sz (external_2, (void *) &free_count);
    #####:   98:  TEST_ASSERT (free_count == 2);
    #####:   99:  TEST_ASSERT (jerry_string_user_ptr (external_string, &is_external) == NULL);
    #####:  100:  TEST_ASSERT (!is_external);
    #####:  101:  jerry_value_free (external_string);
    #####:  102:  TEST_ASSERT (free_count == 2);
        -:  103:
    #####:  104:  jerry_string_external_on_free (external_string_free_callback_3);
    #####:  105:  external_string = jerry_string_external_sz (external_3, (void *) external_3);
    #####:  106:  TEST_ASSERT (free_count == 3);
    #####:  107:  TEST_ASSERT (jerry_string_user_ptr (external_string, &is_external) == NULL);
    #####:  108:  TEST_ASSERT (!is_external);
    #####:  109:  jerry_value_free (external_string);
    #####:  110:  TEST_ASSERT (free_count == 3);
        -:  111:
    #####:  112:  jerry_string_external_on_free (NULL);
    #####:  113:  external_string = jerry_string_external_sz (external_3, (void *) external_3);
    #####:  114:  TEST_ASSERT (free_count == 3);
    #####:  115:  TEST_ASSERT (jerry_string_user_ptr (external_string, &is_external) == NULL);
    #####:  116:  TEST_ASSERT (!is_external);
    #####:  117:  jerry_value_free (external_string);
    #####:  118:  TEST_ASSERT (free_count == 3);
        -:  119:
        -:  120:  /* Test string comparison. */
    #####:  121:  jerry_string_external_on_free (external_string_free_callback_1);
    #####:  122:  external_string = jerry_string_external_sz (external_1, NULL);
    #####:  123:  jerry_value_t other_string = jerry_string_sz (external_1);
        -:  124:
    #####:  125:  jerry_value_t result = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, external_string, other_string);
    #####:  126:  TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  127:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  128:  jerry_value_free (result);
        -:  129:
    #####:  130:  result = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, external_string, external_string);
    #####:  131:  TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  132:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  133:  jerry_value_free (result);
        -:  134:
    #####:  135:  TEST_ASSERT (free_count == 3);
    #####:  136:  jerry_value_free (external_string);
    #####:  137:  TEST_ASSERT (free_count == 4);
    #####:  138:  jerry_value_free (other_string);
        -:  139:
        -:  140:  /* Test getting string. */
    #####:  141:  jerry_string_external_on_free (external_string_free_callback_1);
    #####:  142:  external_string = jerry_string_external_sz (external_1, NULL);
    #####:  143:  size_t length = strlen (external_1);
        -:  144:
    #####:  145:  TEST_ASSERT (jerry_value_is_string (external_string));
    #####:  146:  TEST_ASSERT (jerry_string_size (external_string, JERRY_ENCODING_CESU8) == length);
    #####:  147:  TEST_ASSERT (jerry_string_length (external_string) == length);
        -:  148:
        -:  149:  jerry_char_t buf[128];
    #####:  150:  jerry_string_to_buffer (external_string, JERRY_ENCODING_CESU8, buf, sizeof (buf));
    #####:  151:  TEST_ASSERT (memcmp (buf, external_1, length) == 0);
        -:  152:
    #####:  153:  TEST_ASSERT (free_count == 4);
    #####:  154:  jerry_value_free (external_string);
    #####:  155:  TEST_ASSERT (free_count == 5);
        -:  156:
        -:  157:  /* Test property access. */
    #####:  158:  jerry_string_external_on_free (NULL);
    #####:  159:  external_string = jerry_string_external_sz (external_4, NULL);
    #####:  160:  other_string = jerry_string_sz (external_4);
        -:  161:
    #####:  162:  jerry_value_t obj = jerry_object ();
    #####:  163:  result = jerry_object_set (obj, external_string, other_string);
    #####:  164:  TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  165:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  166:  jerry_value_free (result);
        -:  167:
    #####:  168:  jerry_value_t get_result = jerry_object_get (obj, other_string);
    #####:  169:  TEST_ASSERT (jerry_value_is_string (get_result));
        -:  170:
    #####:  171:  result = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, get_result, external_string);
    #####:  172:  jerry_value_free (get_result);
    #####:  173:  TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  174:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  175:  jerry_value_free (result);
        -:  176:
    #####:  177:  result = jerry_object_set (obj, other_string, external_string);
    #####:  178:  TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  179:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  180:  jerry_value_free (result);
        -:  181:
    #####:  182:  get_result = jerry_object_get (obj, external_string);
    #####:  183:  TEST_ASSERT (jerry_value_is_string (get_result));
        -:  184:
    #####:  185:  result = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, get_result, other_string);
    #####:  186:  jerry_value_free (get_result);
    #####:  187:  TEST_ASSERT (jerry_value_is_boolean (result));
    #####:  188:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  189:  jerry_value_free (result);
        -:  190:
    #####:  191:  jerry_value_free (obj);
    #####:  192:  jerry_value_free (external_string);
    #####:  193:  jerry_value_free (other_string);
        -:  194:
    #####:  195:  external_string = jerry_boolean (true);
    #####:  196:  TEST_ASSERT (jerry_string_user_ptr (external_string, &is_external) == NULL);
    #####:  197:  TEST_ASSERT (!is_external);
    #####:  198:  jerry_value_free (external_string);
        -:  199:
    #####:  200:  external_string = jerry_object ();
    #####:  201:  TEST_ASSERT (jerry_string_user_ptr (external_string, &is_external) == NULL);
    #####:  202:  TEST_ASSERT (!is_external);
    #####:  203:  jerry_value_free (external_string);
        -:  204:
    #####:  205:  jerry_cleanup ();
        -:  206:  return 0;
        -:  207:} /* main */
