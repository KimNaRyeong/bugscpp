        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-weakref.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtins.h"
        -:   17:#include "ecma-exceptions.h"
        -:   18:#include "ecma-function-object.h"
        -:   19:#include "ecma-gc.h"
        -:   20:
        -:   21:#include "jcontext.h"
        -:   22:
        -:   23:#if JERRY_BUILTIN_WEAKREF
        -:   24:
        -:   25:#define ECMA_BUILTINS_INTERNAL
        -:   26:#include "ecma-builtins-internal.h"
        -:   27:
        -:   28:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-weakref.inc.h"
        -:   29:#define BUILTIN_UNDERSCORED_ID  weakref
        -:   30:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   31:
        -:   32:/** \addtogroup ecma ECMA
        -:   33: * @{
        -:   34: *
        -:   35: * \addtogroup ecmabuiltins
        -:   36: * @{
        -:   37: *
        -:   38: * \addtogroup weakref ECMA WeakRef object built-in
        -:   39: * @{
        -:   40: */
        -:   41:
        -:   42:/**
        -:   43: * Handle calling [[Call]] of built-in WeakRef object
        -:   44: *
        -:   45: * @return ecma value
        -:   46: */
        -:   47:ecma_value_t
    #####:   48:ecma_builtin_weakref_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   49:                                    uint32_t arguments_list_len) /**< number of arguments */
        -:   50:{
    #####:   51:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   52:
    #####:   53:  return ecma_raise_type_error (ECMA_ERR_CONSTRUCTOR_WEAKREF_REQUIRES_NEW);
        -:   54:} /* ecma_builtin_weakref_dispatch_call */
        -:   55:
        -:   56:/**
        -:   57: * Handle calling [[Construct]] of built-in WeakRef object
        -:   58: *
        -:   59: * @return ecma value
        -:   60: */
        -:   61:ecma_value_t
    #####:   62:ecma_builtin_weakref_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   63:                                         uint32_t arguments_list_len) /**< number of arguments */
        -:   64:{
    #####:   65:  if (arguments_list_len == 0 || !ecma_is_value_object (arguments_list_p[0]))
        -:   66:  {
    #####:   67:    return ecma_raise_type_error (ECMA_ERR_WEAKREF_TARGET_MUST_BE_AN_OBJECT);
        -:   68:  }
        -:   69:
    #####:   70:  JERRY_ASSERT (JERRY_CONTEXT (current_new_target_p) != NULL);
        -:   71:
    #####:   72:  ecma_object_t *proto_p =
    #####:   73:    ecma_op_get_prototype_from_constructor (JERRY_CONTEXT (current_new_target_p), ECMA_BUILTIN_ID_WEAKREF_PROTOTYPE);
        -:   74:
    #####:   75:  if (JERRY_UNLIKELY (proto_p == NULL))
        -:   76:  {
    #####:   77:    return ECMA_VALUE_ERROR;
        -:   78:  }
        -:   79:
    #####:   80:  ecma_object_t *object_p = ecma_create_object (proto_p, sizeof (ecma_extended_object_t), ECMA_OBJECT_TYPE_CLASS);
    #####:   81:  ecma_deref_object (proto_p);
    #####:   82:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) object_p;
    #####:   83:  ext_obj_p->u.cls.type = ECMA_OBJECT_CLASS_WEAKREF;
    #####:   84:  ext_obj_p->u.cls.u3.target = arguments_list_p[0];
    #####:   85:  ecma_op_object_set_weak (ecma_get_object_from_value (arguments_list_p[0]), object_p);
        -:   86:
    #####:   87:  return ecma_make_object_value (object_p);
        -:   88:} /* ecma_builtin_weakref_dispatch_construct */
        -:   89:
        -:   90:/**
        -:   91: * @}
        -:   92: * @}
        -:   93: * @}
        -:   94: */
        -:   95:
        -:   96:#endif /* JERRY_BUILTIN_WEAKREF */
