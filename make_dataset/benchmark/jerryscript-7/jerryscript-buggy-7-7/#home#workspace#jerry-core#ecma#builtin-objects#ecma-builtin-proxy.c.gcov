        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-proxy.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtins.h"
        -:   17:#include "ecma-exceptions.h"
        -:   18:#include "ecma-gc.h"
        -:   19:#include "ecma-globals.h"
        -:   20:#include "ecma-helpers.h"
        -:   21:#include "ecma-proxy-object.h"
        -:   22:
        -:   23:#include "jrt.h"
        -:   24:
        -:   25:#if JERRY_BUILTIN_PROXY
        -:   26:
        -:   27:#define ECMA_BUILTINS_INTERNAL
        -:   28:#include "ecma-builtins-internal.h"
        -:   29:
        -:   30:/**
        -:   31: * This object has a custom dispatch function.
        -:   32: */
        -:   33:#define BUILTIN_CUSTOM_DISPATCH
        -:   34:
        -:   35:/**
        -:   36: * List of built-in routine identifiers.
        -:   37: */
        -:   38:enum
        -:   39:{
        -:   40:  ECMA_BUILTIN_PROXY_OBJECT_ROUTINE_START = 0,
        -:   41:  ECMA_BUILTIN_PROXY_OBJECT_REVOCABLE,
        -:   42:};
        -:   43:
        -:   44:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-proxy.inc.h"
        -:   45:#define BUILTIN_UNDERSCORED_ID  proxy
        -:   46:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   47:
        -:   48:/** \addtogroup ecma ECMA
        -:   49: * @{
        -:   50: *
        -:   51: * \addtogroup ecmabuiltins
        -:   52: * @{
        -:   53: *
        -:   54: * \addtogroup proxy ECMA Proxy object built-in
        -:   55: * @{
        -:   56: */
        -:   57:
        -:   58:/**
        -:   59: * The Proxy object's 'revocable' routine
        -:   60: *
        -:   61: * See also:
        -:   62: *         ES2015 26.2.2.1
        -:   63: *
        -:   64: * @return ecma value
        -:   65: *         Returned value must be freed with ecma_free_value.
        -:   66: */
        -:   67:static ecma_value_t
    #####:   68:ecma_builtin_proxy_object_revocable (ecma_value_t target, /**< target argument */
        -:   69:                                     ecma_value_t handler) /**< handler argument */
        -:   70:{
    #####:   71:  ecma_object_t *rev_proxy_p = ecma_proxy_create_revocable (target, handler);
        -:   72:
    #####:   73:  if (JERRY_UNLIKELY (rev_proxy_p == NULL))
        -:   74:  {
    #####:   75:    return ECMA_VALUE_ERROR;
        -:   76:  }
        -:   77:
    #####:   78:  return ecma_make_object_value (rev_proxy_p);
        -:   79:} /* ecma_builtin_proxy_object_revocable */
        -:   80:
        -:   81:/**
        -:   82: * Handle calling [[Call]] of built-in Proxy object
        -:   83: *
        -:   84: * See also:
        -:   85: *          ES2015 26.2.2
        -:   86: *
        -:   87: * @return raised error
        -:   88: */
        -:   89:ecma_value_t
    #####:   90:ecma_builtin_proxy_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   91:                                  uint32_t arguments_list_len) /**< number of arguments */
        -:   92:{
    #####:   93:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   94:
        -:   95:  /* 1. */
    #####:   96:  return ecma_raise_type_error (ECMA_ERR_CONSTRUCTOR_PROXY_REQUIRES_NEW);
        -:   97:} /* ecma_builtin_proxy_dispatch_call */
        -:   98:
        -:   99:/**
        -:  100: * Handle calling [[Construct]] of built-in proxy object
        -:  101: *
        -:  102: * See also:
        -:  103: *          ES2015 26.2.2
        -:  104: *
        -:  105: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  106: *         new proxy object - otherwise
        -:  107: */
        -:  108:ecma_value_t
    #####:  109:ecma_builtin_proxy_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  110:                                       uint32_t arguments_list_len) /**< number of arguments */
        -:  111:{
    #####:  112:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  113:
        -:  114:  /* 2. */
    #####:  115:  ecma_object_t *proxy_p = ecma_proxy_create (arguments_list_len > 0 ? arguments_list_p[0] : ECMA_VALUE_UNDEFINED,
    #####:  116:                                              arguments_list_len > 1 ? arguments_list_p[1] : ECMA_VALUE_UNDEFINED,
        -:  117:                                              0);
        -:  118:
    #####:  119:  if (JERRY_UNLIKELY (proxy_p == NULL))
        -:  120:  {
    #####:  121:    return ECMA_VALUE_ERROR;
        -:  122:  }
        -:  123:
    #####:  124:  return ecma_make_object_value (proxy_p);
        -:  125:} /* ecma_builtin_proxy_dispatch_construct */
        -:  126:
        -:  127:/**
        -:  128: * Dispatcher of the built-in's routines
        -:  129: *
        -:  130: * @return ecma value
        -:  131: *         Returned value must be freed with ecma_free_value.
        -:  132: */
        -:  133:ecma_value_t
    #####:  134:ecma_builtin_proxy_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  135:                                     ecma_value_t this_arg, /**< 'this' argument value */
        -:  136:                                     const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  137:                                                                             *   passed to routine */
        -:  138:                                     uint32_t arguments_number) /**< length of arguments' list */
        -:  139:{
        -:  140:  JERRY_UNUSED_2 (this_arg, arguments_number);
        -:  141:
    #####:  142:  switch (builtin_routine_id)
        -:  143:  {
    #####:  144:    case ECMA_BUILTIN_PROXY_OBJECT_REVOCABLE:
        -:  145:    {
    #####:  146:      return ecma_builtin_proxy_object_revocable (arguments_list_p[0], arguments_list_p[1]);
        -:  147:    }
    #####:  148:    default:
        -:  149:    {
    #####:  150:      JERRY_UNREACHABLE ();
        -:  151:    }
        -:  152:  }
        -:  153:} /* ecma_builtin_proxy_dispatch_routine */
        -:  154:/**
        -:  155: * @}
        -:  156: * @}
        -:  157: * @}
        -:  158: */
        -:  159:
        -:  160:#endif /* JERRY_BUILTIN_PROXY */
