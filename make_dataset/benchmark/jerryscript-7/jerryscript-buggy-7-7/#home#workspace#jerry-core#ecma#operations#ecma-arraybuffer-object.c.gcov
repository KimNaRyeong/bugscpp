        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-arraybuffer-object.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-arraybuffer-object.h"
        -:   17:
        -:   18:#include "ecma-builtin-helpers.h"
        -:   19:#include "ecma-builtins.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-function-object.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-objects.h"
        -:   26:#include "ecma-shared-arraybuffer-object.h"
        -:   27:#include "ecma-typedarray-object.h"
        -:   28:
        -:   29:#include "jcontext.h"
        -:   30:
        -:   31:#if JERRY_BUILTIN_TYPEDARRAY
        -:   32:
        -:   33:/** \addtogroup ecma ECMA
        -:   34: * @{
        -:   35: *
        -:   36: * \addtogroup ecmaarraybufferobject ECMA ArrayBuffer object related routines
        -:   37: * @{
        -:   38: */
        -:   39:
        -:   40:/**
        -:   41: * Creating ArrayBuffer objects with a buffer after the arraybuffer header
        -:   42: *
        -:   43: * @return new ArrayBuffer object
        -:   44: */
        -:   45:ecma_object_t *
    #####:   46:ecma_arraybuffer_create_object (uint8_t type, /**< type of the arraybuffer */
        -:   47:                                uint32_t length) /**< length of the arraybuffer */
        -:   48:{
        -:   49:  ecma_builtin_id_t prototype_id;
        -:   50:
        -:   51:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
    #####:   52:  JERRY_ASSERT (type == ECMA_OBJECT_CLASS_ARRAY_BUFFER || type == ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER);
        -:   53:
    #####:   54:  prototype_id = (type == ECMA_OBJECT_CLASS_ARRAY_BUFFER ? ECMA_BUILTIN_ID_ARRAYBUFFER_PROTOTYPE
    #####:   55:                                                         : ECMA_BUILTIN_ID_SHARED_ARRAYBUFFER_PROTOTYPE);
        -:   56:#else /* !JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:   57:  JERRY_ASSERT (type == ECMA_OBJECT_CLASS_ARRAY_BUFFER);
        -:   58:
        -:   59:  prototype_id = ECMA_BUILTIN_ID_ARRAYBUFFER_PROTOTYPE;
        -:   60:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:   61:
    #####:   62:  ecma_object_t *object_p = ecma_create_object (ecma_builtin_get (prototype_id),
        -:   63:                                                sizeof (ecma_extended_object_t) + length,
        -:   64:                                                ECMA_OBJECT_TYPE_CLASS);
        -:   65:
    #####:   66:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
    #####:   67:  ext_object_p->u.cls.type = type;
    #####:   68:  ext_object_p->u.cls.u1.array_buffer_flags = ECMA_ARRAYBUFFER_ALLOCATED;
    #####:   69:  ext_object_p->u.cls.u3.length = length;
        -:   70:
    #####:   71:  memset ((uint8_t *) (ext_object_p + 1), 0, length);
    #####:   72:  return object_p;
        -:   73:} /* ecma_arraybuffer_create_object */
        -:   74:
        -:   75:/**
        -:   76: * Creating ArrayBuffer objects with a pointer to its buffer
        -:   77: *
        -:   78: * @return new ArrayBuffer object
        -:   79: */
        -:   80:ecma_object_t *
    #####:   81:ecma_arraybuffer_create_object_with_buffer (uint8_t type, /**< type of the arraybuffer */
        -:   82:                                            uint32_t length)
        -:   83:{
        -:   84:  ecma_builtin_id_t prototype_id;
        -:   85:
        -:   86:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
    #####:   87:  JERRY_ASSERT (type == ECMA_OBJECT_CLASS_ARRAY_BUFFER || type == ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER);
        -:   88:
    #####:   89:  prototype_id = (type == ECMA_OBJECT_CLASS_ARRAY_BUFFER ? ECMA_BUILTIN_ID_ARRAYBUFFER_PROTOTYPE
    #####:   90:                                                         : ECMA_BUILTIN_ID_SHARED_ARRAYBUFFER_PROTOTYPE);
        -:   91:#else /* !JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:   92:  JERRY_ASSERT (type == ECMA_OBJECT_CLASS_ARRAY_BUFFER);
        -:   93:
        -:   94:  prototype_id = ECMA_BUILTIN_ID_ARRAYBUFFER_PROTOTYPE;
        -:   95:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:   96:
    #####:   97:  ecma_object_t *object_p =
    #####:   98:    ecma_create_object (ecma_builtin_get (prototype_id), sizeof (ecma_arraybuffer_pointer_t), ECMA_OBJECT_TYPE_CLASS);
        -:   99:
    #####:  100:  ecma_arraybuffer_pointer_t *arraybuffer_pointer_p = (ecma_arraybuffer_pointer_t *) object_p;
    #####:  101:  arraybuffer_pointer_p->extended_object.u.cls.type = type;
    #####:  102:  arraybuffer_pointer_p->extended_object.u.cls.u1.array_buffer_flags = ECMA_ARRAYBUFFER_HAS_POINTER;
    #####:  103:  arraybuffer_pointer_p->extended_object.u.cls.u3.length = length;
        -:  104:
    #####:  105:  arraybuffer_pointer_p->buffer_p = NULL;
    #####:  106:  arraybuffer_pointer_p->arraybuffer_user_p = NULL;
        -:  107:
    #####:  108:  return object_p;
        -:  109:} /* ecma_arraybuffer_create_object_with_buffer */
        -:  110:
        -:  111:/**
        -:  112: * Creating ArrayBuffer objects based on the array length
        -:  113: *
        -:  114: * @return new ArrayBuffer object
        -:  115: */
        -:  116:ecma_object_t *
    #####:  117:ecma_arraybuffer_new_object (uint32_t length) /**< length of the arraybuffer */
        -:  118:{
    #####:  119:  if (length > JERRY_CONTEXT (arraybuffer_compact_allocation_limit))
        -:  120:  {
    #####:  121:    return ecma_arraybuffer_create_object_with_buffer (ECMA_OBJECT_CLASS_ARRAY_BUFFER, length);
        -:  122:  }
        -:  123:
    #####:  124:  return ecma_arraybuffer_create_object (ECMA_OBJECT_CLASS_ARRAY_BUFFER, length);
        -:  125:} /* ecma_arraybuffer_new_object */
        -:  126:
        -:  127:/**
        -:  128: * Allocate a backing store for an array buffer.
        -:  129: *
        -:  130: * @return buffer pointer on success,
        -:  131: *         NULL otherwise
        -:  132: */
        -:  133:ecma_value_t
    #####:  134:ecma_arraybuffer_allocate_buffer (ecma_object_t *arraybuffer_p) /**< ArrayBuffer object */
        -:  135:{
    #####:  136:  JERRY_ASSERT (!(ECMA_ARRAYBUFFER_GET_FLAGS (arraybuffer_p) & ECMA_ARRAYBUFFER_ALLOCATED));
        -:  137:
    #####:  138:  ecma_extended_object_t *extended_object_p = (ecma_extended_object_t *) arraybuffer_p;
        -:  139:
    #####:  140:  if (ECMA_ARRAYBUFFER_GET_FLAGS (arraybuffer_p) & ECMA_ARRAYBUFFER_DETACHED)
        -:  141:  {
    #####:  142:    extended_object_p->u.cls.u1.array_buffer_flags |= ECMA_ARRAYBUFFER_ALLOCATED;
    #####:  143:    return ECMA_VALUE_UNDEFINED;
        -:  144:  }
        -:  145:
    #####:  146:  uint32_t arraybuffer_length = extended_object_p->u.cls.u3.length;
    #####:  147:  ecma_arraybuffer_pointer_t *arraybuffer_pointer_p = (ecma_arraybuffer_pointer_t *) arraybuffer_p;
    #####:  148:  jerry_arraybuffer_allocate_cb_t arraybuffer_allocate_callback = JERRY_CONTEXT (arraybuffer_allocate_callback);
        -:  149:  uint8_t *buffer_p;
        -:  150:
    #####:  151:  if (arraybuffer_allocate_callback != NULL)
        -:  152:  {
    #####:  153:    jerry_arraybuffer_type_t type = JERRY_ARRAYBUFFER_TYPE_ARRAYBUFFER;
        -:  154:
        -:  155:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
    #####:  156:    if (extended_object_p->u.cls.type == ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER)
        -:  157:    {
    #####:  158:      type = JERRY_ARRAYBUFFER_TYPE_SHARED_ARRAYBUFFER;
        -:  159:    }
        -:  160:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  161:
    #####:  162:    buffer_p = arraybuffer_allocate_callback (type,
        -:  163:                                              arraybuffer_length,
        -:  164:                                              &arraybuffer_pointer_p->arraybuffer_user_p,
        -:  165:                                              JERRY_CONTEXT (arraybuffer_allocate_callback_user_p));
        -:  166:  }
        -:  167:  else
        -:  168:  {
    #####:  169:    buffer_p = (uint8_t *) jmem_heap_alloc_block_null_on_error (arraybuffer_length);
        -:  170:  }
        -:  171:
    #####:  172:  if (buffer_p == NULL)
        -:  173:  {
    #####:  174:    return ecma_raise_range_error (ECMA_ERR_ALLOCATE_ARRAY_BUFFER);
        -:  175:  }
        -:  176:
    #####:  177:  arraybuffer_pointer_p->buffer_p = buffer_p;
    #####:  178:  extended_object_p->u.cls.u1.array_buffer_flags |= ECMA_ARRAYBUFFER_ALLOCATED;
        -:  179:
    #####:  180:  memset (buffer_p, 0, arraybuffer_length);
    #####:  181:  return ECMA_VALUE_UNDEFINED;
        -:  182:} /* ecma_arraybuffer_allocate_buffer */
        -:  183:
        -:  184:/**
        -:  185: * Allocate a backing store for an array buffer, throws an error if the allocation fails.
        -:  186: *
        -:  187: * @return ECMA_VALUE_UNDEFINED on success,
        -:  188: *         ECMA_VALUE_ERROR otherwise
        -:  189: */
        -:  190:extern inline ecma_value_t
    #####:  191:ecma_arraybuffer_allocate_buffer_throw (ecma_object_t *arraybuffer_p)
        -:  192:{
    #####:  193:  JERRY_ASSERT (!(ECMA_ARRAYBUFFER_GET_FLAGS (arraybuffer_p) & ECMA_ARRAYBUFFER_ALLOCATED));
        -:  194:
    #####:  195:  return ecma_arraybuffer_allocate_buffer (arraybuffer_p);
        -:  196:} /* ecma_arraybuffer_allocate_buffer_throw */
        -:  197:
        -:  198:/**
        -:  199: * Release the backing store allocated by an array buffer.
        -:  200: */
        -:  201:void
    #####:  202:ecma_arraybuffer_release_buffer (ecma_object_t *arraybuffer_p) /**< ArrayBuffer object */
        -:  203:{
    #####:  204:  JERRY_ASSERT (ecma_object_class_is (arraybuffer_p, ECMA_OBJECT_CLASS_ARRAY_BUFFER)
        -:  205:                || ecma_object_is_shared_arraybuffer (arraybuffer_p));
        -:  206:
    #####:  207:  jerry_arraybuffer_free_cb_t free_callback = JERRY_CONTEXT (arraybuffer_free_callback);
    #####:  208:  ecma_arraybuffer_pointer_t *arraybuffer_pointer_p = (ecma_arraybuffer_pointer_t *) arraybuffer_p;
        -:  209:
    #####:  210:  if (arraybuffer_pointer_p->buffer_p == NULL)
        -:  211:  {
    #####:  212:    return;
        -:  213:  }
        -:  214:
    #####:  215:  uint32_t arraybuffer_length = arraybuffer_pointer_p->extended_object.u.cls.u3.length;
        -:  216:
    #####:  217:  if (free_callback == NULL)
        -:  218:  {
    #####:  219:    jmem_heap_free_block (arraybuffer_pointer_p->buffer_p, arraybuffer_length);
    #####:  220:    return;
        -:  221:  }
        -:  222:
    #####:  223:  jerry_arraybuffer_type_t type = JERRY_ARRAYBUFFER_TYPE_ARRAYBUFFER;
        -:  224:
        -:  225:#if JERRY_BUILTIN_SHAREDARRAYBUFFER
    #####:  226:  if (arraybuffer_pointer_p->extended_object.u.cls.type == ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER)
        -:  227:  {
    #####:  228:    type = JERRY_ARRAYBUFFER_TYPE_SHARED_ARRAYBUFFER;
        -:  229:  }
        -:  230:#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */
        -:  231:
    #####:  232:  free_callback (type,
    #####:  233:                 arraybuffer_pointer_p->buffer_p,
        -:  234:                 arraybuffer_length,
        -:  235:                 arraybuffer_pointer_p->arraybuffer_user_p,
        -:  236:                 JERRY_CONTEXT (arraybuffer_allocate_callback_user_p));
        -:  237:} /* ecma_arraybuffer_release_buffer */
        -:  238:
        -:  239:/**
        -:  240: * ArrayBuffer object creation operation.
        -:  241: *
        -:  242: * See also: ES2015 24.1.1.1
        -:  243: *
        -:  244: * @return ecma value
        -:  245: *         Returned value must be freed with ecma_free_value
        -:  246: */
        -:  247:ecma_value_t
    #####:  248:ecma_op_create_arraybuffer_object (const ecma_value_t *arguments_list_p, /**< list of arguments that
        -:  249:                                                                          *   are passed to String constructor */
        -:  250:                                   uint32_t arguments_list_len) /**< length of the arguments' list */
        -:  251:{
    #####:  252:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  253:
    #####:  254:  ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (JERRY_CONTEXT (current_new_target_p),
        -:  255:                                                                   ECMA_BUILTIN_ID_ARRAYBUFFER_PROTOTYPE);
        -:  256:
    #####:  257:  if (proto_p == NULL)
        -:  258:  {
    #####:  259:    return ECMA_VALUE_ERROR;
        -:  260:  }
        -:  261:
    #####:  262:  ecma_number_t length_num = 0;
        -:  263:
    #####:  264:  if (arguments_list_len > 0)
        -:  265:  {
    #####:  266:    if (ecma_is_value_number (arguments_list_p[0]))
        -:  267:    {
    #####:  268:      length_num = ecma_get_number_from_value (arguments_list_p[0]);
        -:  269:    }
        -:  270:    else
        -:  271:    {
    #####:  272:      ecma_value_t to_number_value = ecma_op_to_number (arguments_list_p[0], &length_num);
        -:  273:
    #####:  274:      if (ECMA_IS_VALUE_ERROR (to_number_value))
        -:  275:      {
    #####:  276:        ecma_deref_object (proto_p);
    #####:  277:        return to_number_value;
        -:  278:      }
        -:  279:    }
        -:  280:
    #####:  281:    if (ecma_number_is_nan (length_num))
        -:  282:    {
    #####:  283:      length_num = 0;
        -:  284:    }
        -:  285:
    #####:  286:    const uint32_t maximum_size_in_byte = UINT32_MAX - sizeof (ecma_extended_object_t) - JMEM_ALIGNMENT + 1;
        -:  287:
    #####:  288:    if (length_num <= -1.0 || length_num > (ecma_number_t) maximum_size_in_byte + 0.5)
        -:  289:    {
    #####:  290:      ecma_deref_object (proto_p);
    #####:  291:      return ecma_raise_range_error (ECMA_ERR_INVALID_ARRAYBUFFER_LENGTH);
        -:  292:    }
        -:  293:  }
        -:  294:
    #####:  295:  uint32_t length_uint32 = ecma_number_to_uint32 (length_num);
        -:  296:
    #####:  297:  ecma_object_t *array_buffer = ecma_arraybuffer_new_object (length_uint32);
    #####:  298:  ECMA_SET_NON_NULL_POINTER (array_buffer->u2.prototype_cp, proto_p);
    #####:  299:  ecma_deref_object (proto_p);
        -:  300:
    #####:  301:  return ecma_make_object_value (array_buffer);
        -:  302:} /* ecma_op_create_arraybuffer_object */
        -:  303:
        -:  304:/**
        -:  305: * Helper function: check if the target is ArrayBuffer
        -:  306: *
        -:  307: *
        -:  308: * See also: ES2015 24.1.1.4
        -:  309: *
        -:  310: * @return true - if value is an ArrayBuffer object
        -:  311: *         false - otherwise
        -:  312: */
        -:  313:bool
    #####:  314:ecma_is_arraybuffer (ecma_value_t target) /**< the target value */
        -:  315:{
    #####:  316:  return (ecma_is_value_object (target)
    #####:  317:          && ecma_object_class_is (ecma_get_object_from_value (target), ECMA_OBJECT_CLASS_ARRAY_BUFFER));
        -:  318:} /* ecma_is_arraybuffer */
        -:  319:
        -:  320:/**
        -:  321: * Helper function: return the length of the buffer inside the arraybuffer object
        -:  322: *
        -:  323: * @return uint32_t, the length of the arraybuffer
        -:  324: */
        -:  325:uint32_t JERRY_ATTR_PURE
    #####:  326:ecma_arraybuffer_get_length (ecma_object_t *object_p) /**< pointer to the ArrayBuffer object */
        -:  327:{
    #####:  328:  JERRY_ASSERT (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_ARRAY_BUFFER)
        -:  329:                || ecma_object_is_shared_arraybuffer (object_p));
        -:  330:
    #####:  331:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
    #####:  332:  return ecma_arraybuffer_is_detached (object_p) ? 0 : ext_object_p->u.cls.u3.length;
        -:  333:} /* ecma_arraybuffer_get_length */
        -:  334:
        -:  335:/**
        -:  336: * Helper function: return the pointer to the data buffer inside the arraybuffer object
        -:  337: *
        -:  338: * @return pointer to the data buffer
        -:  339: */
        -:  340:extern inline uint8_t *JERRY_ATTR_PURE JERRY_ATTR_ALWAYS_INLINE
    #####:  341:ecma_arraybuffer_get_buffer (ecma_object_t *object_p) /**< pointer to the ArrayBuffer object */
        -:  342:{
    #####:  343:  JERRY_ASSERT (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_ARRAY_BUFFER)
        -:  344:                || ecma_object_is_shared_arraybuffer (object_p));
        -:  345:
    #####:  346:  if (!(ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_HAS_POINTER))
        -:  347:  {
    #####:  348:    return (uint8_t *) object_p + sizeof (ecma_extended_object_t);
        -:  349:  }
        -:  350:
    #####:  351:  ecma_arraybuffer_pointer_t *arraybuffer_pointer_p = (ecma_arraybuffer_pointer_t *) object_p;
    #####:  352:  return (uint8_t *) arraybuffer_pointer_p->buffer_p;
        -:  353:} /* ecma_arraybuffer_get_buffer */
        -:  354:
        -:  355:/**
        -:  356: * Helper function: check if the target ArrayBuffer is detached
        -:  357: *
        -:  358: * @return true - if value is an detached ArrayBuffer object
        -:  359: *         false - otherwise
        -:  360: */
        -:  361:extern inline bool JERRY_ATTR_PURE JERRY_ATTR_ALWAYS_INLINE
    #####:  362:ecma_arraybuffer_is_detached (ecma_object_t *object_p) /**< pointer to the ArrayBuffer object */
        -:  363:{
    #####:  364:  JERRY_ASSERT (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_ARRAY_BUFFER)
        -:  365:                || ecma_object_is_shared_arraybuffer (object_p));
        -:  366:
    #####:  367:  return (ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_DETACHED) != 0;
        -:  368:} /* ecma_arraybuffer_is_detached */
        -:  369:
        -:  370:/**
        -:  371: * ArrayBuffer object detaching operation
        -:  372: *
        -:  373: * See also: ES2015 24.1.1.3
        -:  374: *
        -:  375: * @return true - if detach operation is succeeded
        -:  376: *         false - otherwise
        -:  377: */
        -:  378:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:  379:ecma_arraybuffer_detach (ecma_object_t *object_p) /**< pointer to the ArrayBuffer object */
        -:  380:{
    #####:  381:  JERRY_ASSERT (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_ARRAY_BUFFER));
        -:  382:
    #####:  383:  if (ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_DETACHED)
        -:  384:  {
    #####:  385:    return false;
        -:  386:  }
        -:  387:
    #####:  388:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
    #####:  389:  ext_object_p->u.cls.u1.array_buffer_flags |= ECMA_ARRAYBUFFER_DETACHED;
        -:  390:
    #####:  391:  if (!(ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_ALLOCATED))
        -:  392:  {
    #####:  393:    return true;
        -:  394:  }
        -:  395:
    #####:  396:  ext_object_p->u.cls.u1.array_buffer_flags &= (uint8_t) ~ECMA_ARRAYBUFFER_ALLOCATED;
        -:  397:
    #####:  398:  if (!(ECMA_ARRAYBUFFER_GET_FLAGS (object_p) & ECMA_ARRAYBUFFER_HAS_POINTER))
        -:  399:  {
    #####:  400:    return true;
        -:  401:  }
        -:  402:
    #####:  403:  ecma_arraybuffer_release_buffer (object_p);
    #####:  404:  return true;
        -:  405:} /* ecma_arraybuffer_detach */
        -:  406:
        -:  407:/**
        -:  408: * ArrayBuffer slice operation
        -:  409: *
        -:  410: * See also:
        -:  411: *          ECMA-262 v11, 24.1.4.3
        -:  412: *
        -:  413: * @return ecma value
        -:  414: *         Returned value must be freed with ecma_free_value.
        -:  415: */
        -:  416:ecma_value_t
    #####:  417:ecma_builtin_arraybuffer_slice (ecma_value_t this_arg, const ecma_value_t *argument_list_p, uint32_t arguments_number)
        -:  418:{
    #####:  419:  ecma_object_t *object_p = ecma_get_object_from_value (this_arg);
        -:  420:
        -:  421:  /* 3-4. */
    #####:  422:  if (ECMA_ARRAYBUFFER_LAZY_ALLOC (object_p))
        -:  423:  {
    #####:  424:    return ECMA_VALUE_ERROR;
        -:  425:  }
        -:  426:
    #####:  427:  if (ecma_arraybuffer_is_detached (object_p))
        -:  428:  {
    #####:  429:    return ecma_raise_type_error (ECMA_ERR_ARRAYBUFFER_IS_DETACHED);
        -:  430:  }
        -:  431:
        -:  432:  /* 5. */
    #####:  433:  uint32_t len = ecma_arraybuffer_get_length (object_p);
        -:  434:
    #####:  435:  uint32_t start = 0;
    #####:  436:  uint32_t end = len;
        -:  437:
    #####:  438:  if (arguments_number > 0)
        -:  439:  {
        -:  440:    /* 6-7. */
    #####:  441:    if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_uint32_index_normalize (argument_list_p[0], len, &start)))
        -:  442:    {
    #####:  443:      return ECMA_VALUE_ERROR;
        -:  444:    }
        -:  445:
    #####:  446:    if (arguments_number > 1 && !ecma_is_value_undefined (argument_list_p[1]))
        -:  447:    {
        -:  448:      /* 8-9. */
    #####:  449:      if (ECMA_IS_VALUE_ERROR (ecma_builtin_helper_uint32_index_normalize (argument_list_p[1], len, &end)))
        -:  450:      {
    #####:  451:        return ECMA_VALUE_ERROR;
        -:  452:      }
        -:  453:    }
        -:  454:  }
        -:  455:
        -:  456:  /* 10. */
    #####:  457:  uint32_t new_len = (end >= start) ? (end - start) : 0;
        -:  458:
        -:  459:  /* 11. */
    #####:  460:  ecma_builtin_id_t buffer_builtin_id = ECMA_BUILTIN_ID_ARRAYBUFFER;
        -:  461:
    #####:  462:  if (ecma_is_shared_arraybuffer (this_arg))
        -:  463:  {
    #####:  464:    buffer_builtin_id = ECMA_BUILTIN_ID_SHARED_ARRAYBUFFER;
        -:  465:  }
        -:  466:
    #####:  467:  ecma_value_t ctor = ecma_op_species_constructor (object_p, buffer_builtin_id);
        -:  468:
    #####:  469:  if (ECMA_IS_VALUE_ERROR (ctor))
        -:  470:  {
    #####:  471:    return ctor;
        -:  472:  }
        -:  473:
        -:  474:  /* 12. */
    #####:  475:  ecma_object_t *ctor_obj_p = ecma_get_object_from_value (ctor);
    #####:  476:  ecma_value_t new_len_value = ecma_make_uint32_value (new_len);
        -:  477:
    #####:  478:  ecma_value_t new_arraybuffer = ecma_op_function_construct (ctor_obj_p, ctor_obj_p, &new_len_value, 1);
        -:  479:
    #####:  480:  ecma_deref_object (ctor_obj_p);
    #####:  481:  ecma_free_value (new_len_value);
        -:  482:
    #####:  483:  if (ECMA_IS_VALUE_ERROR (new_arraybuffer))
        -:  484:  {
    #####:  485:    return new_arraybuffer;
        -:  486:  }
        -:  487:
    #####:  488:  ecma_object_t *new_arraybuffer_p = ecma_get_object_from_value (new_arraybuffer);
    #####:  489:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -:  490:
        -:  491:  /* 13. */
    #####:  492:  if (!(ecma_object_class_is (new_arraybuffer_p, ECMA_OBJECT_CLASS_ARRAY_BUFFER)
    #####:  493:        || ecma_object_is_shared_arraybuffer (new_arraybuffer_p)))
        -:  494:  {
    #####:  495:    ret_value = ecma_raise_type_error (ECMA_ERR_RETURN_VALUE_IS_NOT_AN_ARRAYBUFFER_OBJECT);
    #####:  496:    goto free_new_arraybuffer;
        -:  497:  }
        -:  498:
        -:  499:  /* 14-15. */
    #####:  500:  if (ECMA_ARRAYBUFFER_LAZY_ALLOC (new_arraybuffer_p))
        -:  501:  {
    #####:  502:    ret_value = ECMA_VALUE_ERROR;
    #####:  503:    goto free_new_arraybuffer;
        -:  504:  }
        -:  505:
    #####:  506:  if (ecma_arraybuffer_is_detached (new_arraybuffer_p))
        -:  507:  {
    #####:  508:    ret_value = ecma_raise_type_error (ECMA_ERR_ARRAYBUFFER_IS_DETACHED);
    #####:  509:    goto free_new_arraybuffer;
        -:  510:  }
        -:  511:
        -:  512:  /* 16. */
    #####:  513:  if (new_arraybuffer == this_arg)
        -:  514:  {
    #####:  515:    ret_value = ecma_raise_type_error (ECMA_ERR_ARRAY_BUFFER_RETURNED_THIS_FROM_CONSTRUCTOR);
    #####:  516:    goto free_new_arraybuffer;
        -:  517:  }
        -:  518:
        -:  519:  /* 17. */
    #####:  520:  if (ecma_arraybuffer_get_length (new_arraybuffer_p) < new_len)
        -:  521:  {
    #####:  522:    ret_value = ecma_raise_type_error (ECMA_ERR_DERIVED_ARRAY_BUFFER_CTOR_BUFFER_TOO_SMALL);
    #####:  523:    goto free_new_arraybuffer;
        -:  524:  }
        -:  525:
        -:  526:  /* 19. */
    #####:  527:  if (ecma_arraybuffer_is_detached (object_p))
        -:  528:  {
    #####:  529:    ret_value = ECMA_VALUE_ERROR;
    #####:  530:    goto free_new_arraybuffer;
        -:  531:  }
        -:  532:
        -:  533:  /* 20. */
    #####:  534:  lit_utf8_byte_t *old_buf = ecma_arraybuffer_get_buffer (object_p);
        -:  535:
        -:  536:  /* 21. */
    #####:  537:  lit_utf8_byte_t *new_buf = ecma_arraybuffer_get_buffer (new_arraybuffer_p);
        -:  538:
        -:  539:  /* 22. */
    #####:  540:  memcpy (new_buf, old_buf + start, new_len);
        -:  541:
    #####:  542:free_new_arraybuffer:
    #####:  543:  if (ret_value != ECMA_VALUE_EMPTY)
        -:  544:  {
    #####:  545:    ecma_deref_object (new_arraybuffer_p);
        -:  546:  }
        -:  547:  else
        -:  548:  {
        -:  549:    /* 23. */
    #####:  550:    ret_value = ecma_make_object_value (new_arraybuffer_p);
        -:  551:  }
        -:  552:
    #####:  553:  return ret_value;
        -:  554:} /* ecma_builtin_arraybuffer_slice */
        -:  555:
        -:  556:/**
        -:  557: * @}
        -:  558: * @}
        -:  559: */
        -:  560:#endif /* JERRY_BUILTIN_TYPEDARRAY */
