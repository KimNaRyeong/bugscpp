        -:    0:Source:/home/workspace/jerry-port/default/default-io.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <stdarg.h>
        -:   17:#include <stdlib.h>
        -:   18:#include <string.h>
        -:   19:
        -:   20:#include "jerryscript-debugger.h"
        -:   21:#include "jerryscript-port-default.h"
        -:   22:#include "jerryscript-port.h"
        -:   23:
        -:   24:/**
        -:   25: * Actual log level
        -:   26: */
        -:   27:static jerry_log_level_t jerry_port_default_log_level = JERRY_LOG_LEVEL_ERROR;
        -:   28:
        -:   29:/**
        -:   30: * Get the log level
        -:   31: *
        -:   32: * @return current log level
        -:   33: */
        -:   34:jerry_log_level_t
    #####:   35:jerry_port_default_get_log_level (void)
        -:   36:{
    #####:   37:  return jerry_port_default_log_level;
        -:   38:} /* jerry_port_default_get_log_level */
        -:   39:
        -:   40:/**
        -:   41: * Set the log level
        -:   42: */
        -:   43:void
    #####:   44:jerry_port_default_set_log_level (jerry_log_level_t level) /**< log level */
        -:   45:{
    #####:   46:  jerry_port_default_log_level = level;
    #####:   47:} /* jerry_port_default_set_log_level */
        -:   48:
        -:   49:/**
        -:   50: * Default implementation of jerry_port_log. Prints log message to the standard
        -:   51: * error with 'vfprintf' if message log level is less than or equal to the
        -:   52: * current log level.
        -:   53: *
        -:   54: * If debugger support is enabled, printing happens first to an in-memory buffer,
        -:   55: * which is then sent both to the standard error and to the debugger client.
        -:   56: */
        -:   57:void
        2:   58:jerry_port_log (jerry_log_level_t level, /**< message log level */
        -:   59:                const char *format, /**< format string */
        -:   60:                ...) /**< parameters */
        -:   61:{
        2:   62:  if (level <= jerry_port_default_log_level)
        -:   63:  {
        2:   64:    va_list args;
        2:   65:    va_start (args, format);
        -:   66:#if defined(JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1)
        -:   67:    int length = vsnprintf (NULL, 0, format, args);
        -:   68:    va_end (args);
        -:   69:    va_start (args, format);
        -:   70:
        -:   71:    JERRY_VLA (char, buffer, length + 1);
        -:   72:    vsnprintf (buffer, (size_t) length + 1, format, args);
        -:   73:
        -:   74:    fprintf (stderr, "%s", buffer);
        -:   75:    jerry_debugger_send_log (level, (jerry_char_t *) buffer, (jerry_size_t) length);
        -:   76:#else /* If jerry-debugger isn't defined, libc is turned on */
        2:   77:    vfprintf (stderr, format, args);
        -:   78:#endif /* defined (JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1) */
        2:   79:    va_end (args);
        -:   80:  }
        2:   81:} /* jerry_port_log */
        -:   82:
        -:   83:#if defined(JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1)
        -:   84:
        -:   85:#define DEBUG_BUFFER_SIZE (256)
        -:   86:static char debug_buffer[DEBUG_BUFFER_SIZE];
        -:   87:static int debug_buffer_index = 0;
        -:   88:
        -:   89:#endif /* defined (JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1) */
        -:   90:
        -:   91:/**
        -:   92: * Default implementation of jerry_port_print_char. Uses 'putchar' to
        -:   93: * print a single character to standard output.
        -:   94: */
        -:   95:void
    #####:   96:jerry_port_print_char (char c) /**< the character to print */
        -:   97:{
    #####:   98:  putchar (c);
        -:   99:
        -:  100:#if defined(JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1)
        -:  101:  debug_buffer[debug_buffer_index++] = c;
        -:  102:
        -:  103:  if ((debug_buffer_index == DEBUG_BUFFER_SIZE) || (c == '\n'))
        -:  104:  {
        -:  105:    jerry_debugger_send_output ((jerry_char_t *) debug_buffer, (jerry_size_t) debug_buffer_index);
        -:  106:    debug_buffer_index = 0;
        -:  107:  }
        -:  108:#endif /* defined (JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1) */
    #####:  109:} /* jerry_port_print_char */
