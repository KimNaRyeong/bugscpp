        -:    0:Source:/home/workspace/jerry-core/ecma/base/ecma-init-finalize.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-init-finalize.h"
        -:   17:
        -:   18:#include "ecma-builtins.h"
        -:   19:#include "ecma-gc.h"
        -:   20:#include "ecma-helpers.h"
        -:   21:#include "ecma-lex-env.h"
        -:   22:#include "ecma-literal-storage.h"
        -:   23:
        -:   24:#include "jcontext.h"
        -:   25:#include "jmem.h"
        -:   26:
        -:   27:/** \addtogroup ecma ECMA
        -:   28: * @{
        -:   29: *
        -:   30: * \addtogroup ecmainitfinalize Initialization and finalization of ECMA components
        -:   31: * @{
        -:   32: */
        -:   33:
        -:   34:/**
        -:   35: * Maximum number of GC loops on cleanup.
        -:   36: */
        -:   37:#define JERRY_GC_LOOP_LIMIT 100
        -:   38:
        -:   39:/**
        -:   40: * Initialize ECMA components
        -:   41: */
        -:   42:void
        1:   43:ecma_init (void)
        -:   44:{
        -:   45:#if (JERRY_GC_MARK_LIMIT != 0)
        1:   46:  JERRY_CONTEXT (ecma_gc_mark_recursion_limit) = JERRY_GC_MARK_LIMIT;
        -:   47:#endif /* (JERRY_GC_MARK_LIMIT != 0) */
        -:   48:
        1:   49:  ecma_init_global_environment ();
        -:   50:
        -:   51:#if JERRY_PROPERTY_HASHMAP
        1:   52:  JERRY_CONTEXT (ecma_prop_hashmap_alloc_state) = ECMA_PROP_HASHMAP_ALLOC_ON;
        1:   53:  JERRY_CONTEXT (status_flags) &= (uint32_t) ~ECMA_STATUS_HIGH_PRESSURE_GC;
        -:   54:#endif /* JERRY_PROPERTY_HASHMAP */
        -:   55:
        -:   56:#if (JERRY_STACK_LIMIT != 0)
        1:   57:  volatile int sp;
        1:   58:  JERRY_CONTEXT (stack_base) = (uintptr_t) &sp;
        -:   59:#endif /* (JERRY_STACK_LIMIT != 0) */
        -:   60:
        -:   61:#if JERRY_ESNEXT
        1:   62:  ecma_job_queue_init ();
        -:   63:#endif /* JERRY_ESNEXT */
        -:   64:
        -:   65:#if JERRY_ESNEXT
        1:   66:  JERRY_CONTEXT (current_new_target_p) = NULL;
        -:   67:#endif /* JERRY_ESNEXT */
        -:   68:
        -:   69:#if JERRY_BUILTIN_TYPEDARRAY
        1:   70:  JERRY_CONTEXT (arraybuffer_compact_allocation_limit) = 256;
        -:   71:#endif /* JERRY_BUILTIN_TYPEDARRAY */
        1:   72:} /* ecma_init */
        -:   73:
        -:   74:/**
        -:   75: * Finalize ECMA components
        -:   76: */
        -:   77:void
    #####:   78:ecma_finalize (void)
        -:   79:{
        -:   80:#if JERRY_ESNEXT
    #####:   81:  JERRY_ASSERT (JERRY_CONTEXT (current_new_target_p) == NULL);
        -:   82:#endif /* JERRY_ESNEXT */
        -:   83:
    #####:   84:  ecma_finalize_global_environment ();
    #####:   85:  uint8_t runs = 0;
        -:   86:
        -:   87:  do
        -:   88:  {
    #####:   89:    ecma_gc_run ();
    #####:   90:    if (++runs >= JERRY_GC_LOOP_LIMIT)
        -:   91:    {
    #####:   92:      jerry_fatal (ERR_UNTERMINATED_GC_LOOPS);
        -:   93:    }
    #####:   94:  } while (JERRY_CONTEXT (ecma_gc_new_objects) != 0);
        -:   95:
        -:   96:#if JERRY_ESNEXT
    #####:   97:  jmem_cpointer_t *global_symbols_cp = JERRY_CONTEXT (global_symbols_cp);
        -:   98:
    #####:   99:  for (uint32_t i = 0; i < ECMA_BUILTIN_GLOBAL_SYMBOL_COUNT; i++)
        -:  100:  {
    #####:  101:    if (global_symbols_cp[i] != JMEM_CP_NULL)
        -:  102:    {
    #####:  103:      ecma_deref_ecma_string (ECMA_GET_NON_NULL_POINTER (ecma_string_t, global_symbols_cp[i]));
        -:  104:    }
        -:  105:  }
        -:  106:#endif /* JERRY_ESNEXT */
        -:  107:
    #####:  108:  ecma_finalize_lit_storage ();
    #####:  109:} /* ecma_finalize */
        -:  110:
        -:  111:/**
        -:  112: * @}
        -:  113: * @}
        -:  114: */
