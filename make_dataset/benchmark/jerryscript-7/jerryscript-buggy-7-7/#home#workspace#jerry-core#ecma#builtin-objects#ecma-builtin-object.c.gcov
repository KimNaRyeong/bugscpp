        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-object.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtin-object.h"
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-array-object.h"
        -:   20:#include "ecma-builtin-helpers.h"
        -:   21:#include "ecma-builtins.h"
        -:   22:#include "ecma-conversion.h"
        -:   23:#include "ecma-exceptions.h"
        -:   24:#include "ecma-gc.h"
        -:   25:#include "ecma-globals.h"
        -:   26:#include "ecma-helpers.h"
        -:   27:#include "ecma-objects-general.h"
        -:   28:#include "ecma-objects.h"
        -:   29:#include "ecma-proxy-object.h"
        -:   30:
        -:   31:#include "jrt.h"
        -:   32:#if JERRY_ESNEXT
        -:   33:#include "ecma-function-object.h"
        -:   34:#include "ecma-iterator-object.h"
        -:   35:
        -:   36:#include "jcontext.h"
        -:   37:#endif /* JERRY_ESNEXT */
        -:   38:
        -:   39:#define ECMA_BUILTINS_INTERNAL
        -:   40:#include "ecma-builtins-internal.h"
        -:   41:
        -:   42:/**
        -:   43: * This object has a custom dispatch function.
        -:   44: */
        -:   45:#define BUILTIN_CUSTOM_DISPATCH
        -:   46:
        -:   47:/**
        -:   48: * List of built-in routine identifiers.
        -:   49: */
        -:   50:enum
        -:   51:{
        -:   52:  ECMA_OBJECT_ROUTINE_START = 0,
        -:   53:
        -:   54:  ECMA_OBJECT_ROUTINE_CREATE,
        -:   55:  ECMA_OBJECT_ROUTINE_IS,
        -:   56:  ECMA_OBJECT_ROUTINE_SET_PROTOTYPE_OF,
        -:   57:
        -:   58:  /* These should be in this order. */
        -:   59:  ECMA_OBJECT_ROUTINE_DEFINE_PROPERTY,
        -:   60:  ECMA_OBJECT_ROUTINE_DEFINE_PROPERTIES,
        -:   61:
        -:   62:  /* These should be in this order. */
        -:   63:  ECMA_OBJECT_ROUTINE_ASSIGN,
        -:   64:  ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_DESCRIPTOR,
        -:   65:  ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_DESCRIPTORS,
        -:   66:  ECMA_OBJECT_ROUTINE_GET_PROTOTYPE_OF,
        -:   67:  ECMA_OBJECT_ROUTINE_FROM_ENTRIES,
        -:   68:  ECMA_OBJECT_ROUTINE_KEYS,
        -:   69:  ECMA_OBJECT_ROUTINE_VALUES,
        -:   70:  ECMA_OBJECT_ROUTINE_ENTRIES,
        -:   71:
        -:   72:  /* These should be in this order. */
        -:   73:  ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_NAMES,
        -:   74:  ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_SYMBOLS,
        -:   75:
        -:   76:  /* These should be in this order. */
        -:   77:  ECMA_OBJECT_ROUTINE_FREEZE,
        -:   78:  ECMA_OBJECT_ROUTINE_PREVENT_EXTENSIONS,
        -:   79:  ECMA_OBJECT_ROUTINE_SEAL,
        -:   80:
        -:   81:  /* These should be in this order. */
        -:   82:  ECMA_OBJECT_ROUTINE_IS_EXTENSIBLE,
        -:   83:  ECMA_OBJECT_ROUTINE_IS_FROZEN,
        -:   84:  ECMA_OBJECT_ROUTINE_IS_SEALED,
        -:   85:};
        -:   86:
        -:   87:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-object.inc.h"
        -:   88:#define BUILTIN_UNDERSCORED_ID  object
        -:   89:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   90:
        -:   91:/** \addtogroup ecma ECMA
        -:   92: * @{
        -:   93: *
        -:   94: * \addtogroup ecmabuiltins
        -:   95: * @{
        -:   96: *
        -:   97: * \addtogroup object ECMA Object object built-in
        -:   98: * @{
        -:   99: */
        -:  100:
        -:  101:/**
        -:  102: * Handle calling [[Call]] of built-in Object object
        -:  103: *
        -:  104: * @return ecma value
        -:  105: */
        -:  106:ecma_value_t
    #####:  107:ecma_builtin_object_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  108:                                   uint32_t arguments_list_len) /**< number of arguments */
        -:  109:{
    #####:  110:  if (arguments_list_len == 0 || ecma_is_value_undefined (arguments_list_p[0])
    #####:  111:      || ecma_is_value_null (arguments_list_p[0]))
        -:  112:  {
    #####:  113:    return ecma_make_object_value (ecma_op_create_object_object_noarg ());
        -:  114:  }
        -:  115:
    #####:  116:  return ecma_op_to_object (arguments_list_p[0]);
        -:  117:} /* ecma_builtin_object_dispatch_call */
        -:  118:
        -:  119:/**
        -:  120: * Handle calling [[Construct]] of built-in Object object
        -:  121: *
        -:  122: * @return ecma value
        -:  123: */
        -:  124:ecma_value_t
    #####:  125:ecma_builtin_object_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  126:                                        uint32_t arguments_list_len) /**< number of arguments */
        -:  127:{
        -:  128:#if JERRY_ESNEXT
    #####:  129:  if (JERRY_CONTEXT (current_new_target_p) != ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT))
        -:  130:  {
    #####:  131:    ecma_object_t *prototype_obj_p =
    #####:  132:      ecma_op_get_prototype_from_constructor (JERRY_CONTEXT (current_new_target_p), ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
    #####:  133:    if (JERRY_UNLIKELY (prototype_obj_p == NULL))
        -:  134:    {
    #####:  135:      return ECMA_VALUE_ERROR;
        -:  136:    }
        -:  137:
    #####:  138:    ecma_object_t *object_p = ecma_create_object (prototype_obj_p, 0, ECMA_OBJECT_TYPE_GENERAL);
    #####:  139:    ecma_deref_object (prototype_obj_p);
        -:  140:
    #####:  141:    return ecma_make_object_value (object_p);
        -:  142:  }
        -:  143:#endif /* JERRY_ESNEXT */
    #####:  144:  return ecma_builtin_object_dispatch_call (arguments_list_p, arguments_list_len);
        -:  145:} /* ecma_builtin_object_dispatch_construct */
        -:  146:
        -:  147:/**
        -:  148: * The Object object's 'getPrototypeOf' routine
        -:  149: *
        -:  150: * See also:
        -:  151: *          ECMA-262 v5, 15.2.3.2
        -:  152: *
        -:  153: * @return ecma value
        -:  154: *         Returned value must be freed with ecma_free_value.
        -:  155: */
        -:  156:ecma_value_t
    #####:  157:ecma_builtin_object_object_get_prototype_of (ecma_object_t *obj_p) /**< routine's argument */
        -:  158:{
        -:  159:#if JERRY_BUILTIN_PROXY
    #####:  160:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  161:  {
    #####:  162:    return ecma_proxy_object_get_prototype_of (obj_p);
        -:  163:  }
        -:  164:#endif /* JERRY_BUILTIN_PROXY */
        -:  165:
    #####:  166:  jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (obj_p);
        -:  167:
    #####:  168:  if (proto_cp != JMEM_CP_NULL)
        -:  169:  {
    #####:  170:    ecma_object_t *prototype_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);
    #####:  171:    ecma_ref_object (prototype_p);
    #####:  172:    return ecma_make_object_value (prototype_p);
        -:  173:  }
        -:  174:
    #####:  175:  return ECMA_VALUE_NULL;
        -:  176:} /* ecma_builtin_object_object_get_prototype_of */
        -:  177:
        -:  178:#if JERRY_ESNEXT
        -:  179:/**
        -:  180: * The Object object's 'setPrototypeOf' routine
        -:  181: *
        -:  182: * See also:
        -:  183: *          ES2015 19.1.2.18
        -:  184: *
        -:  185: * @return ecma value
        -:  186: *         Returned value must be freed with ecma_free_value.
        -:  187: */
        -:  188:ecma_value_t
    #####:  189:ecma_builtin_object_object_set_prototype_of (ecma_value_t arg1, /**< routine's first argument */
        -:  190:                                             ecma_value_t arg2) /**< routine's second argument */
        -:  191:{
        -:  192:  /* 1., 2. */
    #####:  193:  if (!ecma_op_require_object_coercible (arg1))
        -:  194:  {
    #####:  195:    return ECMA_VALUE_ERROR;
        -:  196:  }
        -:  197:
        -:  198:  /* 3. */
    #####:  199:  if (!ecma_is_value_object (arg2) && !ecma_is_value_null (arg2))
        -:  200:  {
    #####:  201:    return ecma_raise_type_error (ECMA_ERR_PROTOTYPE_IS_NEITHER_OBJECT_NOR_NULL);
        -:  202:  }
        -:  203:
        -:  204:  /* 4. */
    #####:  205:  if (!ecma_is_value_object (arg1))
        -:  206:  {
    #####:  207:    return ecma_copy_value (arg1);
        -:  208:  }
        -:  209:
    #####:  210:  ecma_object_t *obj_p = ecma_get_object_from_value (arg1);
        -:  211:  ecma_value_t status;
        -:  212:
        -:  213:  /* 5. */
        -:  214:#if JERRY_BUILTIN_PROXY
    #####:  215:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  216:  {
    #####:  217:    status = ecma_proxy_object_set_prototype_of (obj_p, arg2);
        -:  218:
    #####:  219:    if (ECMA_IS_VALUE_ERROR (status))
        -:  220:    {
    #####:  221:      return status;
        -:  222:    }
        -:  223:  }
        -:  224:  else
        -:  225:  {
        -:  226:#endif /* JERRY_BUILTIN_PROXY */
    #####:  227:    status = ecma_op_ordinary_object_set_prototype_of (obj_p, arg2);
        -:  228:#if JERRY_BUILTIN_PROXY
        -:  229:  }
        -:  230:#endif /* JERRY_BUILTIN_PROXY */
        -:  231:
    #####:  232:  if (ecma_is_value_false (status))
        -:  233:  {
    #####:  234:    return ecma_raise_type_error (ECMA_ERR_SET_PROTOTYPE);
        -:  235:  }
        -:  236:
    #####:  237:  JERRY_ASSERT (ecma_is_value_true (status));
    #####:  238:  ecma_ref_object (obj_p);
        -:  239:
    #####:  240:  return arg1;
        -:  241:} /* ecma_builtin_object_object_set_prototype_of */
        -:  242:
        -:  243:/**
        -:  244: * The Object object's set __proto__ routine
        -:  245: *
        -:  246: * See also:
        -:  247: *          ECMA-262 v6, B.2.2.1.2
        -:  248: *
        -:  249: * @return ecma value
        -:  250: *         Returned value must be freed with ecma_free_value.
        -:  251: */
        -:  252:ecma_value_t
    #####:  253:ecma_builtin_object_object_set_proto (ecma_value_t arg1, /**< routine's first argument */
        -:  254:                                      ecma_value_t arg2) /**< routine's second argument */
        -:  255:{
        -:  256:  /* 1., 2. */
    #####:  257:  if (!ecma_op_require_object_coercible (arg1))
        -:  258:  {
    #####:  259:    return ECMA_VALUE_ERROR;
        -:  260:  }
        -:  261:
        -:  262:  /* 3. */
    #####:  263:  if (!ecma_is_value_object (arg2) && !ecma_is_value_null (arg2))
        -:  264:  {
    #####:  265:    return ECMA_VALUE_UNDEFINED;
        -:  266:  }
        -:  267:
        -:  268:  /* 4. */
    #####:  269:  if (!ecma_is_value_object (arg1))
        -:  270:  {
    #####:  271:    return ECMA_VALUE_UNDEFINED;
        -:  272:  }
        -:  273:
    #####:  274:  ecma_object_t *obj_p = ecma_get_object_from_value (arg1);
        -:  275:  ecma_value_t status;
        -:  276:
        -:  277:  /* 5. */
        -:  278:#if JERRY_BUILTIN_PROXY
    #####:  279:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  280:  {
    #####:  281:    status = ecma_proxy_object_set_prototype_of (obj_p, arg2);
        -:  282:
    #####:  283:    if (ECMA_IS_VALUE_ERROR (status))
        -:  284:    {
    #####:  285:      return status;
        -:  286:    }
        -:  287:  }
        -:  288:  else
        -:  289:  {
        -:  290:#endif /* JERRY_BUILTIN_PROXY */
    #####:  291:    status = ecma_op_ordinary_object_set_prototype_of (obj_p, arg2);
        -:  292:#if JERRY_BUILTIN_PROXY
        -:  293:  }
        -:  294:#endif /* JERRY_BUILTIN_PROXY */
        -:  295:
    #####:  296:  if (ecma_is_value_false (status))
        -:  297:  {
    #####:  298:    return ecma_raise_type_error (ECMA_ERR_SET_PROTOTYPE);
        -:  299:  }
        -:  300:
    #####:  301:  JERRY_ASSERT (ecma_is_value_true (status));
        -:  302:
    #####:  303:  return ECMA_VALUE_UNDEFINED;
        -:  304:} /* ecma_builtin_object_object_set_proto */
        -:  305:#endif /* JERRY_ESNEXT */
        -:  306:
        -:  307:/**
        -:  308: * SetIntegrityLevel operation
        -:  309: *
        -:  310: * See also:
        -:  311: *          ECMA-262 v6, 7.3.14
        -:  312: *
        -:  313: * @return ECMA_VALUE_ERROR - if the operation raised an error
        -:  314: *         ECMA_VALUE_{TRUE/FALSE} - depends on whether the integrity level has been set successfully
        -:  315: */
        -:  316:static ecma_value_t
    #####:  317:ecma_builtin_object_set_integrity_level (ecma_object_t *obj_p, /**< object */
        -:  318:                                         bool is_seal) /**< true - set "sealed"
        -:  319:                                                        *   false - set "frozen" */
        -:  320:{
        -:  321:  /* 3. */
        -:  322:#if JERRY_BUILTIN_PROXY
    #####:  323:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  324:  {
    #####:  325:    ecma_value_t status = ecma_proxy_object_prevent_extensions (obj_p);
        -:  326:
    #####:  327:    if (!ecma_is_value_true (status))
        -:  328:    {
    #####:  329:      return status;
        -:  330:    }
        -:  331:  }
        -:  332:  else
        -:  333:#endif /* JERRY_BUILTIN_PROXY */
        -:  334:  {
    #####:  335:    ecma_op_ordinary_object_prevent_extensions (obj_p);
        -:  336:  }
        -:  337:
        -:  338:  /* 6. */
    #####:  339:  ecma_collection_t *props_p = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_ALL);
        -:  340:
        -:  341:#if JERRY_BUILTIN_PROXY
    #####:  342:  if (props_p == NULL)
        -:  343:  {
    #####:  344:    return ECMA_VALUE_ERROR;
        -:  345:  }
        -:  346:#endif /* JERRY_BUILTIN_PROXY */
        -:  347:
    #####:  348:  ecma_value_t *buffer_p = props_p->buffer_p;
        -:  349:
    #####:  350:  if (is_seal)
        -:  351:  {
        -:  352:    /* 8.a */
    #####:  353:    for (uint32_t i = 0; i < props_p->item_count; i++)
        -:  354:    {
    #####:  355:      ecma_string_t *property_name_p = ecma_get_prop_name_from_value (buffer_p[i]);
        -:  356:
    #####:  357:      ecma_property_descriptor_t prop_desc;
    #####:  358:      ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, property_name_p, &prop_desc);
        -:  359:
        -:  360:#if JERRY_BUILTIN_PROXY
    #####:  361:      if (ECMA_IS_VALUE_ERROR (status))
        -:  362:      {
    #####:  363:        ecma_collection_free (props_p);
    #####:  364:        return ECMA_VALUE_ERROR;
        -:  365:      }
        -:  366:#endif /* JERRY_BUILTIN_PROXY */
        -:  367:
    #####:  368:      if (ecma_is_value_false (status))
        -:  369:      {
    #####:  370:        continue;
        -:  371:      }
        -:  372:
    #####:  373:      prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_CONFIGURABLE;
    #####:  374:      prop_desc.flags |= JERRY_PROP_SHOULD_THROW;
        -:  375:
        -:  376:      /* 8.a.i */
    #####:  377:      ecma_value_t define_own_prop_ret = ecma_op_object_define_own_property (obj_p, property_name_p, &prop_desc);
        -:  378:
    #####:  379:      ecma_free_property_descriptor (&prop_desc);
        -:  380:
        -:  381:      /* 8.a.ii */
    #####:  382:      if (ECMA_IS_VALUE_ERROR (define_own_prop_ret))
        -:  383:      {
    #####:  384:        ecma_collection_free (props_p);
    #####:  385:        return define_own_prop_ret;
        -:  386:      }
        -:  387:
    #####:  388:      ecma_free_value (define_own_prop_ret);
        -:  389:    }
        -:  390:  }
        -:  391:  else
        -:  392:  {
        -:  393:    /* 9.a */
    #####:  394:    for (uint32_t i = 0; i < props_p->item_count; i++)
        -:  395:    {
    #####:  396:      ecma_string_t *property_name_p = ecma_get_prop_name_from_value (buffer_p[i]);
        -:  397:
        -:  398:      /* 9.1 */
    #####:  399:      ecma_property_descriptor_t prop_desc;
    #####:  400:      ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, property_name_p, &prop_desc);
        -:  401:
        -:  402:#if JERRY_BUILTIN_PROXY
    #####:  403:      if (ECMA_IS_VALUE_ERROR (status))
        -:  404:      {
    #####:  405:        ecma_collection_free (props_p);
    #####:  406:        return ECMA_VALUE_ERROR;
        -:  407:      }
        -:  408:#endif /* JERRY_BUILTIN_PROXY */
        -:  409:
    #####:  410:      if (ecma_is_value_false (status))
        -:  411:      {
    #####:  412:        continue;
        -:  413:      }
        -:  414:
        -:  415:      /* 9.2 */
    #####:  416:      if ((prop_desc.flags & (JERRY_PROP_IS_WRITABLE_DEFINED | JERRY_PROP_IS_WRITABLE))
        -:  417:          == (JERRY_PROP_IS_WRITABLE_DEFINED | JERRY_PROP_IS_WRITABLE))
        -:  418:      {
    #####:  419:        prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_WRITABLE;
        -:  420:      }
        -:  421:
    #####:  422:      prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_CONFIGURABLE;
    #####:  423:      prop_desc.flags |= JERRY_PROP_SHOULD_THROW;
        -:  424:
        -:  425:      /* 9.3 */
    #####:  426:      ecma_value_t define_own_prop_ret = ecma_op_object_define_own_property (obj_p, property_name_p, &prop_desc);
        -:  427:
    #####:  428:      ecma_free_property_descriptor (&prop_desc);
        -:  429:
        -:  430:      /* 9.4 */
    #####:  431:      if (ECMA_IS_VALUE_ERROR (define_own_prop_ret))
        -:  432:      {
    #####:  433:        ecma_collection_free (props_p);
    #####:  434:        return define_own_prop_ret;
        -:  435:      }
        -:  436:
    #####:  437:      ecma_free_value (define_own_prop_ret);
        -:  438:    }
        -:  439:  }
        -:  440:
    #####:  441:  ecma_collection_free (props_p);
        -:  442:
    #####:  443:  return ECMA_VALUE_TRUE;
        -:  444:} /* ecma_builtin_object_set_integrity_level */
        -:  445:
        -:  446:/**
        -:  447: * The Object object's 'seal' routine
        -:  448: *
        -:  449: * See also:
        -:  450: *          ECMA-262 v5, 15.2.3.8
        -:  451: *
        -:  452: * @return ecma value
        -:  453: *         Returned value must be freed with ecma_free_value.
        -:  454: */
        -:  455:static ecma_value_t
    #####:  456:ecma_builtin_object_object_seal (ecma_object_t *obj_p) /**< routine's argument */
        -:  457:{
    #####:  458:  ecma_value_t status = ecma_builtin_object_set_integrity_level (obj_p, true);
        -:  459:
    #####:  460:  if (ECMA_IS_VALUE_ERROR (status))
        -:  461:  {
    #####:  462:    return status;
        -:  463:  }
        -:  464:
        -:  465:#if JERRY_BUILTIN_PROXY
    #####:  466:  if (ecma_is_value_false (status))
        -:  467:  {
    #####:  468:    return ecma_raise_type_error (ECMA_ERR_OBJECT_CANNOT_BE_SEALED);
        -:  469:  }
        -:  470:#endif /* JERRY_BUILTIN_PROXY */
        -:  471:
        -:  472:  /* 4. */
    #####:  473:  ecma_ref_object (obj_p);
    #####:  474:  return ecma_make_object_value (obj_p);
        -:  475:} /* ecma_builtin_object_object_seal */
        -:  476:
        -:  477:/**
        -:  478: * The Object object's 'freeze' routine
        -:  479: *
        -:  480: * See also:
        -:  481: *          ECMA-262 v5, 15.2.3.9
        -:  482: *
        -:  483: * @return ecma value
        -:  484: *         Returned value must be freed with ecma_free_value.
        -:  485: */
        -:  486:static ecma_value_t
    #####:  487:ecma_builtin_object_object_freeze (ecma_object_t *obj_p) /**< routine's argument */
        -:  488:{
    #####:  489:  ecma_value_t status = ecma_builtin_object_set_integrity_level (obj_p, false);
        -:  490:
    #####:  491:  if (ECMA_IS_VALUE_ERROR (status))
        -:  492:  {
    #####:  493:    return status;
        -:  494:  }
        -:  495:
        -:  496:#if JERRY_BUILTIN_PROXY
    #####:  497:  if (ecma_is_value_false (status))
        -:  498:  {
    #####:  499:    return ecma_raise_type_error (ECMA_ERR_OBJECT_CANNOT_BE_FROZEN);
        -:  500:  }
        -:  501:#endif /* JERRY_BUILTIN_PROXY */
        -:  502:
        -:  503:  /* 4. */
    #####:  504:  ecma_ref_object (obj_p);
    #####:  505:  return ecma_make_object_value (obj_p);
        -:  506:} /* ecma_builtin_object_object_freeze */
        -:  507:
        -:  508:/**
        -:  509: * The Object object's 'preventExtensions' routine
        -:  510: *
        -:  511: * See also:
        -:  512: *          ECMA-262 v5, 15.2.3.10
        -:  513: *
        -:  514: * @return ecma value
        -:  515: *         Returned value must be freed with ecma_free_value.
        -:  516: */
        -:  517:ecma_value_t
    #####:  518:ecma_builtin_object_object_prevent_extensions (ecma_object_t *obj_p) /**< routine's argument */
        -:  519:{
        -:  520:#if JERRY_BUILTIN_PROXY
    #####:  521:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  522:  {
    #####:  523:    ecma_value_t status = ecma_proxy_object_prevent_extensions (obj_p);
        -:  524:
    #####:  525:    if (ECMA_IS_VALUE_ERROR (status))
        -:  526:    {
    #####:  527:      return status;
        -:  528:    }
        -:  529:
    #####:  530:    if (ecma_is_value_false (status))
        -:  531:    {
    #####:  532:      return ecma_raise_type_error (ECMA_ERR_SET_EXTENSIBLE_PROPERTY);
        -:  533:    }
        -:  534:
    #####:  535:    JERRY_ASSERT (ecma_is_value_true (status));
        -:  536:  }
        -:  537:  else
        -:  538:  {
        -:  539:#endif /* JERRY_BUILTIN_PROXY */
    #####:  540:    ecma_op_ordinary_object_prevent_extensions (obj_p);
        -:  541:#if JERRY_BUILTIN_PROXY
        -:  542:  }
        -:  543:#endif /* JERRY_BUILTIN_PROXY */
    #####:  544:  ecma_ref_object (obj_p);
        -:  545:
    #####:  546:  return ecma_make_object_value (obj_p);
        -:  547:} /* ecma_builtin_object_object_prevent_extensions */
        -:  548:
        -:  549:/**
        -:  550: * The Object object's 'isSealed' and 'isFrozen' routines
        -:  551: *
        -:  552: * See also:
        -:  553: *         ECMA-262 v5, 15.2.3.11
        -:  554: *         ECMA-262 v5, 15.2.3.12
        -:  555: *
        -:  556: * @return ecma value
        -:  557: *         Returned value must be freed with ecma_free_value.
        -:  558: */
        -:  559:static ecma_value_t
    #####:  560:ecma_builtin_object_test_integrity_level (ecma_object_t *obj_p, /**< routine's argument */
        -:  561:                                          int mode) /**< routine mode */
        -:  562:{
    #####:  563:  JERRY_ASSERT (mode == ECMA_OBJECT_ROUTINE_IS_FROZEN || mode == ECMA_OBJECT_ROUTINE_IS_SEALED);
        -:  564:
        -:  565:  /* 3. */
        -:  566:  bool is_extensible;
        -:  567:#if JERRY_BUILTIN_PROXY
    #####:  568:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  569:  {
    #####:  570:    ecma_value_t status = ecma_proxy_object_is_extensible (obj_p);
        -:  571:
    #####:  572:    if (ECMA_IS_VALUE_ERROR (status))
        -:  573:    {
    #####:  574:      return status;
        -:  575:    }
        -:  576:
    #####:  577:    is_extensible = ecma_is_value_true (status);
        -:  578:  }
        -:  579:  else
        -:  580:#endif /* JERRY_BUILTIN_PROXY */
        -:  581:  {
    #####:  582:    is_extensible = ecma_op_ordinary_object_is_extensible (obj_p);
        -:  583:  }
        -:  584:
    #####:  585:  if (is_extensible)
        -:  586:  {
    #####:  587:    return ECMA_VALUE_FALSE;
        -:  588:  }
        -:  589:
        -:  590:  /* the value can be updated in the loop below */
    #####:  591:  ecma_value_t ret_value = ECMA_VALUE_TRUE;
        -:  592:
        -:  593:  /* 2. */
    #####:  594:  ecma_collection_t *props_p = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_ALL);
        -:  595:
        -:  596:#if JERRY_BUILTIN_PROXY
    #####:  597:  if (props_p == NULL)
        -:  598:  {
    #####:  599:    return ECMA_VALUE_ERROR;
        -:  600:  }
        -:  601:#endif /* JERRY_BUILTIN_PROXY */
        -:  602:
    #####:  603:  ecma_value_t *buffer_p = props_p->buffer_p;
        -:  604:
    #####:  605:  for (uint32_t i = 0; i < props_p->item_count; i++)
        -:  606:  {
    #####:  607:    ecma_string_t *property_name_p = ecma_get_prop_name_from_value (buffer_p[i]);
        -:  608:
        -:  609:    /* 2.a */
    #####:  610:    ecma_property_descriptor_t prop_desc;
    #####:  611:    ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, property_name_p, &prop_desc);
        -:  612:
        -:  613:#if JERRY_BUILTIN_PROXY
    #####:  614:    if (ECMA_IS_VALUE_ERROR (status))
        -:  615:    {
    #####:  616:      ret_value = status;
    #####:  617:      break;
        -:  618:    }
        -:  619:#endif /* JERRY_BUILTIN_PROXY */
        -:  620:
    #####:  621:    if (ecma_is_value_false (status))
        -:  622:    {
    #####:  623:      continue;
        -:  624:    }
        -:  625:
    #####:  626:    bool is_writable_data = ((prop_desc.flags & (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE))
        -:  627:                             == (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE));
    #####:  628:    bool is_configurable = (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE);
        -:  629:
    #####:  630:    ecma_free_property_descriptor (&prop_desc);
        -:  631:
        -:  632:    /* 2.b for isFrozen */
        -:  633:    /* 2.b for isSealed, 2.c for isFrozen */
    #####:  634:    if ((mode == ECMA_OBJECT_ROUTINE_IS_FROZEN && is_writable_data) || is_configurable)
        -:  635:    {
    #####:  636:      ret_value = ECMA_VALUE_FALSE;
    #####:  637:      break;
        -:  638:    }
        -:  639:  }
        -:  640:
    #####:  641:  ecma_collection_free (props_p);
        -:  642:
    #####:  643:  return ret_value;
        -:  644:} /* ecma_builtin_object_test_integrity_level */
        -:  645:
        -:  646:/**
        -:  647: * The Object object's 'isExtensible' routine
        -:  648: *
        -:  649: * See also:
        -:  650: *          ECMA-262 v5, 15.2.3.13
        -:  651: *
        -:  652: * @return ecma value
        -:  653: *         Returned value must be freed with ecma_free_value.
        -:  654: */
        -:  655:ecma_value_t
    #####:  656:ecma_builtin_object_object_is_extensible (ecma_object_t *obj_p) /**< routine's argument */
        -:  657:{
        -:  658:#if JERRY_BUILTIN_PROXY
    #####:  659:  if (ECMA_OBJECT_IS_PROXY (obj_p))
        -:  660:  {
    #####:  661:    return ecma_proxy_object_is_extensible (obj_p);
        -:  662:  }
        -:  663:#endif /* JERRY_BUILTIN_PROXY */
        -:  664:
    #####:  665:  return ecma_make_boolean_value (ecma_op_ordinary_object_is_extensible (obj_p));
        -:  666:} /* ecma_builtin_object_object_is_extensible */
        -:  667:
        -:  668:/**
        -:  669: * Common implementation of the Object object's 'keys', 'values', 'entries' routines
        -:  670: *
        -:  671: * See also:
        -:  672: *          ECMA-262 v11, 19.1.2.17
        -:  673: *          ECMA-262 v11, 19.1.2.22
        -:  674: *          ECMA-262 v11, 19.1.2.5
        -:  675: *
        -:  676: * @return ecma value
        -:  677: *         Returned value must be freed with ecma_free_value.
        -:  678: */
        -:  679:static ecma_value_t
    #####:  680:ecma_builtin_object_object_keys_values_helper (ecma_object_t *obj_p, /**< routine's first argument */
        -:  681:                                               ecma_enumerable_property_names_options_t option) /**< listing option */
        -:  682:{
        -:  683:  /* 2. */
    #####:  684:  ecma_collection_t *props_p = ecma_op_object_get_enumerable_property_names (obj_p, option);
        -:  685:
    #####:  686:  if (props_p == NULL)
        -:  687:  {
    #####:  688:    return ECMA_VALUE_ERROR;
        -:  689:  }
        -:  690:
        -:  691:  /* 3. */
    #####:  692:  return ecma_op_new_array_object_from_collection (props_p, option != ECMA_ENUMERABLE_PROPERTY_KEYS);
        -:  693:} /* ecma_builtin_object_object_keys_values_helper */
        -:  694:
        -:  695:/**
        -:  696: * The Object object's 'getOwnPropertyDescriptor' routine
        -:  697: *
        -:  698: * See also:
        -:  699: *          ECMA-262 v5, 15.2.3.3
        -:  700: *
        -:  701: * @return ecma value
        -:  702: *         Returned value must be freed with ecma_free_value.
        -:  703: */
        -:  704:ecma_value_t
    #####:  705:ecma_builtin_object_object_get_own_property_descriptor (ecma_object_t *obj_p, /**< routine's first argument */
        -:  706:                                                        ecma_string_t *name_str_p) /**< routine's second argument */
        -:  707:{
        -:  708:  /* 3. */
    #####:  709:  ecma_property_descriptor_t prop_desc;
        -:  710:
    #####:  711:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, name_str_p, &prop_desc);
        -:  712:
        -:  713:#if JERRY_BUILTIN_PROXY
    #####:  714:  if (ECMA_IS_VALUE_ERROR (status))
        -:  715:  {
    #####:  716:    return status;
        -:  717:  }
        -:  718:#endif /* JERRY_BUILTIN_PROXY */
        -:  719:
    #####:  720:  if (ecma_is_value_true (status))
        -:  721:  {
        -:  722:    /* 4. */
    #####:  723:    ecma_object_t *desc_obj_p = ecma_op_from_property_descriptor (&prop_desc);
        -:  724:
    #####:  725:    ecma_free_property_descriptor (&prop_desc);
        -:  726:
    #####:  727:    return ecma_make_object_value (desc_obj_p);
        -:  728:  }
        -:  729:
    #####:  730:  return ECMA_VALUE_UNDEFINED;
        -:  731:} /* ecma_builtin_object_object_get_own_property_descriptor */
        -:  732:
        -:  733:#if JERRY_ESNEXT
        -:  734:/**
        -:  735: * The Object object's 'getOwnPropertyDescriptors' routine
        -:  736: *
        -:  737: * See also:
        -:  738: *          ECMA-262 v11, 19.1.2.9
        -:  739: *
        -:  740: * @return ecma value
        -:  741: *         Returned value must be freed with ecma_free_value.
        -:  742: */
        -:  743:static ecma_value_t
    #####:  744:ecma_builtin_object_object_get_own_property_descriptors (ecma_object_t *obj_p) /**< routine's first argument */
        -:  745:{
        -:  746:  /* 2 */
    #####:  747:  ecma_collection_t *prop_names_p = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_ALL);
        -:  748:
        -:  749:#if JERRY_BUILTIN_PROXY
    #####:  750:  if (prop_names_p == NULL)
        -:  751:  {
    #####:  752:    return ECMA_VALUE_ERROR;
        -:  753:  }
        -:  754:#endif /* JERRY_BUILTIN_PROXY */
        -:  755:
    #####:  756:  ecma_value_t *names_buffer_p = prop_names_p->buffer_p;
        -:  757:
        -:  758:  /* 3 */
    #####:  759:  ecma_object_t *object_prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
    #####:  760:  ecma_object_t *descriptors_p = ecma_create_object (object_prototype_p, 0, ECMA_OBJECT_TYPE_GENERAL);
        -:  761:
        -:  762:  /* 4 */
    #####:  763:  for (uint32_t i = 0; i < prop_names_p->item_count; i++)
        -:  764:  {
    #####:  765:    ecma_string_t *property_name_p = ecma_get_prop_name_from_value (names_buffer_p[i]);
        -:  766:
        -:  767:    /* 4.a */
    #####:  768:    ecma_property_descriptor_t prop_desc;
    #####:  769:    ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, property_name_p, &prop_desc);
        -:  770:
        -:  771:#if JERRY_BUILTIN_PROXY
    #####:  772:    if (ECMA_IS_VALUE_ERROR (status))
        -:  773:    {
    #####:  774:      ecma_deref_object (descriptors_p);
    #####:  775:      ecma_collection_free (prop_names_p);
        -:  776:
    #####:  777:      return status;
        -:  778:    }
        -:  779:#endif /* JERRY_BUILTIN_PROXY */
        -:  780:
    #####:  781:    if (ecma_is_value_true (status))
        -:  782:    {
        -:  783:      /* 4.b */
    #####:  784:      ecma_object_t *desc_obj_p = ecma_op_from_property_descriptor (&prop_desc);
        -:  785:      /* 4.c */
    #####:  786:      ecma_property_value_t *value_p = ecma_create_named_data_property (descriptors_p,
        -:  787:                                                                        property_name_p,
        -:  788:                                                                        ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  789:                                                                        NULL);
    #####:  790:      value_p->value = ecma_make_object_value (desc_obj_p);
        -:  791:
    #####:  792:      ecma_deref_object (desc_obj_p);
    #####:  793:      ecma_free_property_descriptor (&prop_desc);
        -:  794:    }
        -:  795:  }
        -:  796:
    #####:  797:  ecma_collection_free (prop_names_p);
        -:  798:
    #####:  799:  return ecma_make_object_value (descriptors_p);
        -:  800:} /* ecma_builtin_object_object_get_own_property_descriptors */
        -:  801:#endif /* JERRY_ESNEXT */
        -:  802:
        -:  803:/**
        -:  804: * The Object object's 'defineProperties' routine
        -:  805: *
        -:  806: * See also:
        -:  807: *          ECMA-262 v5, 15.2.3.7
        -:  808: *          ECMA-262 v11, 19.1.2.3.1
        -:  809: *
        -:  810: * @return ecma value
        -:  811: *         Returned value must be freed with ecma_free_value.
        -:  812: */
        -:  813:static ecma_value_t
    #####:  814:ecma_builtin_object_object_define_properties (ecma_object_t *obj_p, /**< routine's first argument */
        -:  815:                                              ecma_value_t arg2) /**< routine's second argument */
        -:  816:{
        -:  817:  /* 2. */
    #####:  818:  ecma_value_t props = ecma_op_to_object (arg2);
        -:  819:
    #####:  820:  if (ECMA_IS_VALUE_ERROR (props))
        -:  821:  {
    #####:  822:    return props;
        -:  823:  }
        -:  824:
    #####:  825:  ecma_object_t *props_p = ecma_get_object_from_value (props);
        -:  826:
        -:  827:  /* 3. */
    #####:  828:  ecma_collection_t *prop_names_p = ecma_op_object_own_property_keys (props_p, JERRY_PROPERTY_FILTER_ALL);
    #####:  829:  ecma_value_t ret_value = ECMA_VALUE_ERROR;
        -:  830:
        -:  831:#if JERRY_BUILTIN_PROXY
    #####:  832:  if (prop_names_p == NULL)
        -:  833:  {
    #####:  834:    ecma_deref_object (props_p);
    #####:  835:    return ret_value;
        -:  836:  }
        -:  837:#endif /* JERRY_BUILTIN_PROXY */
        -:  838:
    #####:  839:  ecma_value_t *buffer_p = prop_names_p->buffer_p;
        -:  840:
        -:  841:  /* 4. */
    #####:  842:  JMEM_DEFINE_LOCAL_ARRAY (property_descriptors, prop_names_p->item_count, ecma_property_descriptor_t);
    #####:  843:  uint32_t property_descriptor_number = 0;
    #####:  844:  ecma_collection_t *enum_prop_names = ecma_new_collection ();
        -:  845:
        -:  846:  /* 5. */
    #####:  847:  for (uint32_t i = 0; i < prop_names_p->item_count; i++)
        -:  848:  {
    #####:  849:    ecma_string_t *prop_name_p = ecma_get_prop_name_from_value (buffer_p[i]);
        -:  850:
    #####:  851:    ecma_property_descriptor_t prop_desc;
    #####:  852:    ecma_value_t get_desc = ecma_op_object_get_own_property_descriptor (props_p, prop_name_p, &prop_desc);
        -:  853:
        -:  854:#if JERRY_ESNEXT
    #####:  855:    if (ECMA_IS_VALUE_ERROR (get_desc))
        -:  856:    {
    #####:  857:      goto cleanup;
        -:  858:    }
        -:  859:#endif /* JERRY_ESNEXT */
        -:  860:
    #####:  861:    if (ecma_is_value_true (get_desc))
        -:  862:    {
    #####:  863:      if (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE)
        -:  864:      {
    #####:  865:        ecma_value_t desc_obj = ecma_op_object_get (props_p, prop_name_p);
        -:  866:
    #####:  867:        if (ECMA_IS_VALUE_ERROR (desc_obj))
        -:  868:        {
    #####:  869:          ecma_free_property_descriptor (&prop_desc);
    #####:  870:          goto cleanup;
        -:  871:        }
        -:  872:
    #####:  873:        ecma_value_t conv_result =
    #####:  874:          ecma_op_to_property_descriptor (desc_obj, &property_descriptors[property_descriptor_number]);
        -:  875:
    #####:  876:        property_descriptors[property_descriptor_number].flags |= JERRY_PROP_SHOULD_THROW;
        -:  877:
    #####:  878:        ecma_free_value (desc_obj);
        -:  879:
    #####:  880:        if (ECMA_IS_VALUE_ERROR (conv_result))
        -:  881:        {
    #####:  882:          ecma_free_property_descriptor (&prop_desc);
    #####:  883:          goto cleanup;
        -:  884:        }
        -:  885:
    #####:  886:        property_descriptor_number++;
    #####:  887:        ecma_free_value (conv_result);
    #####:  888:        ecma_ref_ecma_string (prop_name_p);
    #####:  889:        ecma_collection_push_back (enum_prop_names, buffer_p[i]);
        -:  890:      }
        -:  891:
    #####:  892:      ecma_free_property_descriptor (&prop_desc);
        -:  893:    }
        -:  894:  }
        -:  895:
        -:  896:  /* 6. */
    #####:  897:  for (uint32_t i = 0; i < enum_prop_names->item_count; i++)
        -:  898:  {
    #####:  899:    ecma_string_t *prop_name_p = ecma_get_prop_name_from_value (enum_prop_names->buffer_p[i]);
        -:  900:
    #####:  901:    ecma_value_t define_own_prop_ret =
    #####:  902:      ecma_op_object_define_own_property (obj_p, prop_name_p, &property_descriptors[i]);
    #####:  903:    if (ECMA_IS_VALUE_ERROR (define_own_prop_ret))
        -:  904:    {
    #####:  905:      goto cleanup;
        -:  906:    }
        -:  907:
    #####:  908:    ecma_free_value (define_own_prop_ret);
        -:  909:  }
        -:  910:
    #####:  911:  ecma_ref_object (obj_p);
    #####:  912:  ret_value = ecma_make_object_value (obj_p);
        -:  913:
    #####:  914:cleanup:
        -:  915:  /* Clean up. */
    #####:  916:  for (uint32_t index = 0; index < property_descriptor_number; index++)
        -:  917:  {
    #####:  918:    ecma_free_property_descriptor (&property_descriptors[index]);
        -:  919:  }
        -:  920:
    #####:  921:  ecma_collection_free (enum_prop_names);
        -:  922:
    #####:  923:  JMEM_FINALIZE_LOCAL_ARRAY (property_descriptors);
        -:  924:
    #####:  925:  ecma_collection_free (prop_names_p);
        -:  926:
    #####:  927:  ecma_deref_object (props_p);
        -:  928:
    #####:  929:  return ret_value;
        -:  930:} /* ecma_builtin_object_object_define_properties */
        -:  931:
        -:  932:/**
        -:  933: * The Object object's 'create' routine
        -:  934: *
        -:  935: * See also:
        -:  936: *          ECMA-262 v5, 15.2.3.5
        -:  937: *
        -:  938: * @return ecma value
        -:  939: *         Returned value must be freed with ecma_free_value.
        -:  940: */
        -:  941:static ecma_value_t
    #####:  942:ecma_builtin_object_object_create (ecma_value_t arg1, /**< routine's first argument */
        -:  943:                                   ecma_value_t arg2) /**< routine's second argument */
        -:  944:{
        -:  945:  /* 1. */
    #####:  946:  if (!ecma_is_value_object (arg1) && !ecma_is_value_null (arg1))
        -:  947:  {
    #####:  948:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_IS_NOT_AN_OBJECT);
        -:  949:  }
        -:  950:
    #####:  951:  ecma_object_t *obj_p = NULL;
        -:  952:
    #####:  953:  if (!ecma_is_value_null (arg1))
        -:  954:  {
    #####:  955:    obj_p = ecma_get_object_from_value (arg1);
        -:  956:  }
        -:  957:  /* 2-3. */
    #####:  958:  ecma_object_t *result_obj_p = ecma_op_create_object_object_noarg_and_set_prototype (obj_p);
        -:  959:
        -:  960:  /* 4. */
    #####:  961:  if (!ecma_is_value_undefined (arg2))
        -:  962:  {
    #####:  963:    ecma_value_t obj = ecma_builtin_object_object_define_properties (result_obj_p, arg2);
        -:  964:
    #####:  965:    if (ECMA_IS_VALUE_ERROR (obj))
        -:  966:    {
    #####:  967:      ecma_deref_object (result_obj_p);
    #####:  968:      return obj;
        -:  969:    }
        -:  970:
    #####:  971:    ecma_free_value (obj);
        -:  972:  }
        -:  973:
        -:  974:  /* 5. */
    #####:  975:  return ecma_make_object_value (result_obj_p);
        -:  976:} /* ecma_builtin_object_object_create */
        -:  977:
        -:  978:/**
        -:  979: * The Object object's 'defineProperty' routine
        -:  980: *
        -:  981: * See also:
        -:  982: *          ECMA-262 v5, 15.2.3.6
        -:  983: *
        -:  984: * @return ecma value
        -:  985: *         Returned value must be freed with ecma_free_value.
        -:  986: */
        -:  987:ecma_value_t
    #####:  988:ecma_builtin_object_object_define_property (ecma_object_t *obj_p, /**< routine's first argument */
        -:  989:                                            ecma_string_t *name_str_p, /**< routine's second argument */
        -:  990:                                            ecma_value_t arg3) /**< routine's third argument */
        -:  991:{
    #####:  992:  ecma_property_descriptor_t prop_desc;
        -:  993:
    #####:  994:  ecma_value_t conv_result = ecma_op_to_property_descriptor (arg3, &prop_desc);
        -:  995:
    #####:  996:  if (ECMA_IS_VALUE_ERROR (conv_result))
        -:  997:  {
    #####:  998:    return conv_result;
        -:  999:  }
        -: 1000:
    #####: 1001:  prop_desc.flags |= JERRY_PROP_SHOULD_THROW;
        -: 1002:
    #####: 1003:  ecma_value_t define_own_prop_ret = ecma_op_object_define_own_property (obj_p, name_str_p, &prop_desc);
        -: 1004:
    #####: 1005:  ecma_free_property_descriptor (&prop_desc);
    #####: 1006:  ecma_free_value (conv_result);
        -: 1007:
    #####: 1008:  if (ECMA_IS_VALUE_ERROR (define_own_prop_ret))
        -: 1009:  {
    #####: 1010:    return define_own_prop_ret;
        -: 1011:  }
        -: 1012:
    #####: 1013:  if (ecma_is_value_false (define_own_prop_ret))
        -: 1014:  {
    #####: 1015:    return ecma_raise_type_error (ECMA_ERR_THE_REQUESTED_PROPERTY_UPDATE_CANNOT_BE_PERFORMED);
        -: 1016:  }
        -: 1017:
    #####: 1018:  JERRY_ASSERT (ecma_is_value_true (define_own_prop_ret));
        -: 1019:
    #####: 1020:  ecma_ref_object (obj_p);
    #####: 1021:  ecma_free_value (define_own_prop_ret);
        -: 1022:
    #####: 1023:  return ecma_make_object_value (obj_p);
        -: 1024:} /* ecma_builtin_object_object_define_property */
        -: 1025:
        -: 1026:#if JERRY_ESNEXT
        -: 1027:
        -: 1028:/**
        -: 1029: * The Object object's 'assign' routine
        -: 1030: *
        -: 1031: * See also:
        -: 1032: *          ECMA-262 v6, 19.1.2.1
        -: 1033: *
        -: 1034: * @return ecma value
        -: 1035: *         Returned value must be freed with ecma_free_value.
        -: 1036: */
        -: 1037:static ecma_value_t
    #####: 1038:ecma_builtin_object_object_assign (ecma_object_t *target_p, /**< target object */
        -: 1039:                                   const ecma_value_t arguments_list_p[], /**< arguments list */
        -: 1040:                                   uint32_t arguments_list_len) /**< number of arguments */
        -: 1041:{
    #####: 1042:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -: 1043:
        -: 1044:  /* 4-5. */
    #####: 1045:  for (uint32_t i = 0; i < arguments_list_len && ecma_is_value_empty (ret_value); i++)
        -: 1046:  {
    #####: 1047:    ecma_value_t next_source = arguments_list_p[i];
        -: 1048:
        -: 1049:    /* 5.a */
    #####: 1050:    if (ecma_is_value_undefined (next_source) || ecma_is_value_null (next_source))
        -: 1051:    {
    #####: 1052:      continue;
        -: 1053:    }
        -: 1054:
        -: 1055:    /* 5.b.i */
    #####: 1056:    ecma_value_t from_value = ecma_op_to_object (next_source);
        -: 1057:    /* null and undefied cases are handled above, so this must be a valid object */
    #####: 1058:    JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (from_value));
        -: 1059:
    #####: 1060:    ecma_object_t *from_obj_p = ecma_get_object_from_value (from_value);
        -: 1061:
        -: 1062:    /* 5.b.iii */
    #####: 1063:    ecma_collection_t *props_p = ecma_op_object_own_property_keys (from_obj_p, JERRY_PROPERTY_FILTER_ALL);
        -: 1064:
        -: 1065:#if JERRY_BUILTIN_PROXY
    #####: 1066:    if (props_p == NULL)
        -: 1067:    {
    #####: 1068:      ecma_deref_object (from_obj_p);
    #####: 1069:      return ECMA_VALUE_ERROR;
        -: 1070:    }
        -: 1071:#endif /* JERRY_BUILTIN_PROXY */
        -: 1072:
    #####: 1073:    ecma_value_t *buffer_p = props_p->buffer_p;
        -: 1074:
    #####: 1075:    for (uint32_t j = 0; (j < props_p->item_count) && ecma_is_value_empty (ret_value); j++)
        -: 1076:    {
    #####: 1077:      ecma_string_t *property_name_p = ecma_get_prop_name_from_value (buffer_p[j]);
        -: 1078:
        -: 1079:      /* 5.c.i-ii */
    #####: 1080:      ecma_property_descriptor_t prop_desc;
    #####: 1081:      ecma_value_t desc_status = ecma_op_object_get_own_property_descriptor (from_obj_p, property_name_p, &prop_desc);
        -: 1082:
        -: 1083:#if JERRY_BUILTIN_PROXY
    #####: 1084:      if (ECMA_IS_VALUE_ERROR (desc_status))
        -: 1085:      {
    #####: 1086:        ret_value = desc_status;
    #####: 1087:        break;
        -: 1088:      }
        -: 1089:#endif /* JERRY_BUILTIN_PROXY */
        -: 1090:
    #####: 1091:      if (ecma_is_value_false (desc_status))
        -: 1092:      {
    #####: 1093:        continue;
        -: 1094:      }
        -: 1095:
        -: 1096:      /* 5.c.iii */
    #####: 1097:      if (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE)
        -: 1098:      {
        -: 1099:        /* 5.c.iii.1 */
    #####: 1100:        ecma_value_t prop_value = ecma_op_object_get (from_obj_p, property_name_p);
        -: 1101:
        -: 1102:        /* 5.c.iii.2 */
    #####: 1103:        if (ECMA_IS_VALUE_ERROR (prop_value))
        -: 1104:        {
    #####: 1105:          ret_value = prop_value;
        -: 1106:        }
        -: 1107:        else
        -: 1108:        {
        -: 1109:          /* 5.c.iii.3 */
    #####: 1110:          ecma_value_t status = ecma_op_object_put (target_p, property_name_p, prop_value, true);
        -: 1111:
        -: 1112:          /* 5.c.iii.4 */
    #####: 1113:          if (ECMA_IS_VALUE_ERROR (status))
        -: 1114:          {
    #####: 1115:            ret_value = status;
        -: 1116:          }
        -: 1117:        }
        -: 1118:
    #####: 1119:        ecma_free_value (prop_value);
        -: 1120:      }
        -: 1121:
    #####: 1122:      ecma_free_property_descriptor (&prop_desc);
        -: 1123:    }
        -: 1124:
    #####: 1125:    ecma_deref_object (from_obj_p);
    #####: 1126:    ecma_collection_free (props_p);
        -: 1127:  }
        -: 1128:
        -: 1129:  /* 6. */
    #####: 1130:  if (ecma_is_value_empty (ret_value))
        -: 1131:  {
    #####: 1132:    ecma_ref_object (target_p);
    #####: 1133:    return ecma_make_object_value (target_p);
        -: 1134:  }
        -: 1135:
    #####: 1136:  return ret_value;
        -: 1137:} /* ecma_builtin_object_object_assign */
        -: 1138:
        -: 1139:/**
        -: 1140: * The Object object's 'is' routine
        -: 1141: *
        -: 1142: * See also:
        -: 1143: *          ECMA-262 v6, 19.1.2.10
        -: 1144: *
        -: 1145: * @return ecma value
        -: 1146: *         Returned value must be freed with ecma_free_value.
        -: 1147: */
        -: 1148:static ecma_value_t
    #####: 1149:ecma_builtin_object_object_is (ecma_value_t arg1, /**< routine's first argument */
        -: 1150:                               ecma_value_t arg2) /**< routine's second argument */
        -: 1151:{
    #####: 1152:  return ecma_op_same_value (arg1, arg2) ? ECMA_VALUE_TRUE : ECMA_VALUE_FALSE;
        -: 1153:} /* ecma_builtin_object_object_is */
        -: 1154:
        -: 1155:/**
        -: 1156: * The Object object's 'fromEntries' routine
        -: 1157: *
        -: 1158: * See also:
        -: 1159: *          ECMA-262 v10, 19.1.2.7
        -: 1160: * @return ecma value
        -: 1161: *         Returned value must be freed with ecma_free_value.
        -: 1162: */
        -: 1163:static ecma_value_t
    #####: 1164:ecma_builtin_object_from_entries (ecma_value_t iterator) /**< object's iterator */
        -: 1165:{
    #####: 1166:  JERRY_ASSERT (ecma_op_require_object_coercible (iterator));
        -: 1167:  /* 2 */
    #####: 1168:  ecma_object_t *object_prototype_p = ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);
    #####: 1169:  ecma_object_t *obj_p = ecma_create_object (object_prototype_p, 0, ECMA_OBJECT_TYPE_GENERAL);
        -: 1170:
        -: 1171:  /* 6.a */
    #####: 1172:  ecma_value_t next_method;
    #####: 1173:  ecma_value_t result = ecma_op_get_iterator (iterator, ECMA_VALUE_SYNC_ITERATOR, &next_method);
        -: 1174:
    #####: 1175:  if (ECMA_IS_VALUE_ERROR (result))
        -: 1176:  {
    #####: 1177:    ecma_deref_object (obj_p);
    #####: 1178:    return result;
        -: 1179:  }
        -: 1180:
    #####: 1181:  const ecma_value_t original_iterator = result;
        -: 1182:
        -: 1183:  /* 6.b */
        -: 1184:  while (true)
    #####: 1185:  {
        -: 1186:    /* 6.a.i */
    #####: 1187:    result = ecma_op_iterator_step (original_iterator, next_method);
        -: 1188:
    #####: 1189:    if (ECMA_IS_VALUE_ERROR (result))
        -: 1190:    {
    #####: 1191:      goto cleanup_iterator;
        -: 1192:    }
        -: 1193:
        -: 1194:    /* 6.a.ii */
    #####: 1195:    if (ecma_is_value_false (result))
        -: 1196:    {
    #####: 1197:      break;
        -: 1198:    }
        -: 1199:
        -: 1200:    /* 6.a.iii */
    #####: 1201:    const ecma_value_t next = result;
    #####: 1202:    result = ecma_op_iterator_value (next);
    #####: 1203:    ecma_free_value (next);
        -: 1204:
    #####: 1205:    if (ECMA_IS_VALUE_ERROR (result))
        -: 1206:    {
    #####: 1207:      goto cleanup_iterator;
        -: 1208:    }
        -: 1209:
        -: 1210:    /* 6.a.iv */
    #####: 1211:    if (!ecma_is_value_object (result))
        -: 1212:    {
    #####: 1213:      ecma_free_value (result);
    #####: 1214:      ecma_raise_type_error (ECMA_ERR_ITERATOR_VALUE_IS_NOT_AN_OBJECT);
    #####: 1215:      result = ecma_op_iterator_close (original_iterator);
    #####: 1216:      JERRY_ASSERT (ECMA_IS_VALUE_ERROR (result));
    #####: 1217:      goto cleanup_iterator;
        -: 1218:    }
        -: 1219:
        -: 1220:    /* 6.a.v-vi */
    #####: 1221:    ecma_object_t *next_object_p = ecma_get_object_from_value (result);
        -: 1222:
    #####: 1223:    result = ecma_op_object_get_by_index (next_object_p, 0);
        -: 1224:
    #####: 1225:    if (ECMA_IS_VALUE_ERROR (result))
        -: 1226:    {
    #####: 1227:      ecma_deref_object (next_object_p);
    #####: 1228:      ecma_op_iterator_close (original_iterator);
    #####: 1229:      goto cleanup_iterator;
        -: 1230:    }
        -: 1231:
    #####: 1232:    const ecma_value_t key = result;
        -: 1233:
    #####: 1234:    result = ecma_op_object_get_by_index (next_object_p, 1);
        -: 1235:
    #####: 1236:    if (ECMA_IS_VALUE_ERROR (result))
        -: 1237:    {
    #####: 1238:      ecma_deref_object (next_object_p);
    #####: 1239:      ecma_free_value (key);
    #####: 1240:      ecma_op_iterator_close (original_iterator);
    #####: 1241:      goto cleanup_iterator;
        -: 1242:    }
        -: 1243:
        -: 1244:    /* 6.a.vii */
    #####: 1245:    const ecma_value_t value = result;
    #####: 1246:    ecma_string_t *property_key = ecma_op_to_property_key (key);
        -: 1247:
    #####: 1248:    if (property_key == NULL)
        -: 1249:    {
    #####: 1250:      ecma_deref_object (next_object_p);
    #####: 1251:      ecma_free_value (key);
    #####: 1252:      ecma_op_iterator_close (original_iterator);
    #####: 1253:      result = ECMA_VALUE_ERROR;
    #####: 1254:      goto cleanup_iterator;
        -: 1255:    }
        -: 1256:
    #####: 1257:    ecma_property_t *property_p = ecma_find_named_property (obj_p, property_key);
        -: 1258:
    #####: 1259:    if (property_p == NULL)
        -: 1260:    {
        -: 1261:      ecma_property_value_t *prop;
    #####: 1262:      prop =
        -: 1263:        ecma_create_named_data_property (obj_p, property_key, ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE, NULL);
    #####: 1264:      prop->value = ecma_copy_value_if_not_object (value);
        -: 1265:    }
        -: 1266:    else
        -: 1267:    {
    #####: 1268:      ecma_named_data_property_assign_value (obj_p, ECMA_PROPERTY_VALUE_PTR (property_p), value);
        -: 1269:    }
        -: 1270:
    #####: 1271:    ecma_deref_ecma_string (property_key);
    #####: 1272:    ecma_free_value (key);
    #####: 1273:    ecma_free_value (value);
    #####: 1274:    ecma_deref_object (next_object_p);
        -: 1275:  }
        -: 1276:
    #####: 1277:  ecma_ref_object (obj_p);
    #####: 1278:  result = ecma_make_object_value (obj_p);
        -: 1279:
    #####: 1280:cleanup_iterator:
    #####: 1281:  ecma_free_value (original_iterator);
    #####: 1282:  ecma_free_value (next_method);
    #####: 1283:  ecma_deref_object (obj_p);
        -: 1284:
    #####: 1285:  return result;
        -: 1286:} /* ecma_builtin_object_from_entries */
        -: 1287:
        -: 1288:#endif /* JERRY_ESNEXT */
        -: 1289:
        -: 1290:/**
        -: 1291: * GetOwnPropertyKeys abstract method
        -: 1292: *
        -: 1293: * See also:
        -: 1294: *          ECMA-262 v11, 19.1.2.11.1
        -: 1295: *
        -: 1296: * @return ecma value
        -: 1297: *         Returned value must be freed with ecma_free_value.
        -: 1298: */
        -: 1299:static ecma_value_t
    #####: 1300:ecma_op_object_get_own_property_keys (ecma_value_t this_arg, /**< this argument */
        -: 1301:                                      uint16_t type) /**< routine type */
        -: 1302:{
        -: 1303:#if JERRY_ESNEXT
        -: 1304:  /* 1. */
    #####: 1305:  ecma_value_t object = ecma_op_to_object (this_arg);
        -: 1306:
    #####: 1307:  if (ECMA_IS_VALUE_ERROR (object))
        -: 1308:  {
    #####: 1309:    return object;
        -: 1310:  }
        -: 1311:
    #####: 1312:  ecma_object_t *obj_p = ecma_get_object_from_value (object);
        -: 1313:
        -: 1314:  /* 2. */
    #####: 1315:  jerry_property_filter_t filter = JERRY_PROPERTY_FILTER_EXCLUDE_SYMBOLS;
        -: 1316:
    #####: 1317:  if (type == ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_SYMBOLS)
        -: 1318:  {
    #####: 1319:    filter = (JERRY_PROPERTY_FILTER_EXCLUDE_STRINGS | JERRY_PROPERTY_FILTER_EXCLUDE_INTEGER_INDICES);
        -: 1320:  }
        -: 1321:
    #####: 1322:  ecma_collection_t *props_p = ecma_op_object_own_property_keys (obj_p, filter);
        -: 1323:
    #####: 1324:  if (props_p == NULL)
        -: 1325:  {
    #####: 1326:    ecma_deref_object (obj_p);
    #####: 1327:    return ECMA_VALUE_ERROR;
        -: 1328:  }
        -: 1329:
        -: 1330:  /* 3. */
    #####: 1331:  ecma_collection_t *name_list_p = ecma_new_collection ();
        -: 1332:
        -: 1333:  /* 4. */
    #####: 1334:  for (uint32_t i = 0; i < props_p->item_count; i++)
        -: 1335:  {
    #####: 1336:    ecma_value_t prop_name = props_p->buffer_p[i];
    #####: 1337:    ecma_string_t *name_p = ecma_get_prop_name_from_value (prop_name);
        -: 1338:
    #####: 1339:    if ((ecma_prop_name_is_symbol (name_p) && type == ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_SYMBOLS)
    #####: 1340:        || (ecma_is_value_string (prop_name) && type == ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_NAMES))
        -: 1341:    {
    #####: 1342:      ecma_ref_ecma_string (name_p);
    #####: 1343:      ecma_collection_push_back (name_list_p, prop_name);
        -: 1344:    }
        -: 1345:  }
        -: 1346:
    #####: 1347:  ecma_value_t result_array = ecma_op_new_array_object_from_collection (name_list_p, false);
        -: 1348:
    #####: 1349:  ecma_deref_object (obj_p);
    #####: 1350:  ecma_collection_free (props_p);
        -: 1351:
    #####: 1352:  return result_array;
        -: 1353:#else /* !JERRY_ESNEXT */
        -: 1354:  JERRY_UNUSED (type);
    #####: 1355:  ecma_object_t *obj_p = ecma_get_object_from_value (this_arg);
    #####: 1356:  ecma_collection_t *props_p = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_ALL);
    #####: 1357:  return ecma_op_new_array_object_from_collection (props_p, false);
        -: 1358:#endif /* JERRY_ESNEXT */
        -: 1359:} /* ecma_op_object_get_own_property_keys */
        -: 1360:
        -: 1361:/**
        -: 1362: * Dispatcher of the built-in's routines
        -: 1363: *
        -: 1364: * @return ecma value
        -: 1365: *         Returned value must be freed with ecma_free_value.
        -: 1366: */
        -: 1367:ecma_value_t
    #####: 1368:ecma_builtin_object_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -: 1369:                                      ecma_value_t this_arg, /**< 'this' argument value */
        -: 1370:                                      const ecma_value_t arguments_list_p[], /**< list of arguments
        -: 1371:                                                                              *   passed to routine */
        -: 1372:                                      uint32_t arguments_number) /**< length of arguments' list */
        -: 1373:{
        -: 1374:  JERRY_UNUSED_2 (this_arg, arguments_number);
        -: 1375:
    #####: 1376:  ecma_value_t arg1 = arguments_list_p[0];
    #####: 1377:  ecma_value_t arg2 = arguments_list_p[1];
        -: 1378:
        -: 1379:  /* No specialization for the arguments */
    #####: 1380:  switch (builtin_routine_id)
        -: 1381:  {
    #####: 1382:    case ECMA_OBJECT_ROUTINE_CREATE:
        -: 1383:    {
    #####: 1384:      return ecma_builtin_object_object_create (arg1, arg2);
        -: 1385:    }
        -: 1386:#if JERRY_ESNEXT
    #####: 1387:    case ECMA_OBJECT_ROUTINE_SET_PROTOTYPE_OF:
        -: 1388:    {
    #####: 1389:      return ecma_builtin_object_object_set_prototype_of (arg1, arg2);
        -: 1390:    }
    #####: 1391:    case ECMA_OBJECT_ROUTINE_IS:
        -: 1392:    {
    #####: 1393:      return ecma_builtin_object_object_is (arg1, arg2);
        -: 1394:    }
        -: 1395:#endif /* JERRY_ESNEXT */
    #####: 1396:    default:
        -: 1397:    {
    #####: 1398:      break;
        -: 1399:    }
        -: 1400:  }
        -: 1401:
        -: 1402:  ecma_object_t *obj_p;
        -: 1403:#if !JERRY_ESNEXT
    #####: 1404:  if (!ecma_is_value_object (arg1))
        -: 1405:  {
    #####: 1406:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_IS_NOT_AN_OBJECT);
        -: 1407:  }
        -: 1408:#endif /* !JERRY_ESNEXT */
        -: 1409:
    #####: 1410:  if (builtin_routine_id <= ECMA_OBJECT_ROUTINE_DEFINE_PROPERTIES)
        -: 1411:  {
        -: 1412:#if JERRY_ESNEXT
    #####: 1413:    if (!ecma_is_value_object (arg1))
        -: 1414:    {
    #####: 1415:      return ecma_raise_type_error (ECMA_ERR_ARGUMENT_IS_NOT_AN_OBJECT);
        -: 1416:    }
        -: 1417:#endif /* JERRY_ESNEXT */
        -: 1418:
    #####: 1419:    obj_p = ecma_get_object_from_value (arg1);
        -: 1420:
    #####: 1421:    if (builtin_routine_id == ECMA_OBJECT_ROUTINE_DEFINE_PROPERTY)
        -: 1422:    {
    #####: 1423:      ecma_string_t *prop_name_p = ecma_op_to_property_key (arg2);
        -: 1424:
    #####: 1425:      if (prop_name_p == NULL)
        -: 1426:      {
    #####: 1427:        return ECMA_VALUE_ERROR;
        -: 1428:      }
        -: 1429:
    #####: 1430:      ecma_value_t result = ecma_builtin_object_object_define_property (obj_p, prop_name_p, arguments_list_p[2]);
        -: 1431:
    #####: 1432:      ecma_deref_ecma_string (prop_name_p);
    #####: 1433:      return result;
        -: 1434:    }
        -: 1435:
    #####: 1436:    JERRY_ASSERT (builtin_routine_id == ECMA_OBJECT_ROUTINE_DEFINE_PROPERTIES);
    #####: 1437:    return ecma_builtin_object_object_define_properties (obj_p, arg2);
        -: 1438:  }
    #####: 1439:  else if (builtin_routine_id <= ECMA_OBJECT_ROUTINE_ENTRIES)
        -: 1440:  {
        -: 1441:#if JERRY_ESNEXT
    #####: 1442:    ecma_value_t object = ecma_op_to_object (arg1);
    #####: 1443:    if (ECMA_IS_VALUE_ERROR (object))
        -: 1444:    {
    #####: 1445:      return object;
        -: 1446:    }
        -: 1447:
    #####: 1448:    obj_p = ecma_get_object_from_value (object);
        -: 1449:#else /* !JERRY_ESNEXT */
    #####: 1450:    obj_p = ecma_get_object_from_value (arg1);
        -: 1451:#endif /* JERRY_ESNEXT */
        -: 1452:
        -: 1453:    ecma_value_t result;
    #####: 1454:    switch (builtin_routine_id)
        -: 1455:    {
    #####: 1456:      case ECMA_OBJECT_ROUTINE_GET_PROTOTYPE_OF:
        -: 1457:      {
    #####: 1458:        result = ecma_builtin_object_object_get_prototype_of (obj_p);
    #####: 1459:        break;
        -: 1460:      }
        -: 1461:#if JERRY_ESNEXT
    #####: 1462:      case ECMA_OBJECT_ROUTINE_ASSIGN:
        -: 1463:      {
    #####: 1464:        result = ecma_builtin_object_object_assign (obj_p, arguments_list_p + 1, arguments_number - 1);
    #####: 1465:        break;
        -: 1466:      }
    #####: 1467:      case ECMA_OBJECT_ROUTINE_ENTRIES:
        -: 1468:      case ECMA_OBJECT_ROUTINE_VALUES:
        -: 1469:#endif /* JERRY_ESNEXT */
        -: 1470:      case ECMA_OBJECT_ROUTINE_KEYS:
        -: 1471:      {
    #####: 1472:        JERRY_ASSERT (builtin_routine_id - ECMA_OBJECT_ROUTINE_KEYS < ECMA_ENUMERABLE_PROPERTY__COUNT);
        -: 1473:
    #####: 1474:        const int option = builtin_routine_id - ECMA_OBJECT_ROUTINE_KEYS;
    #####: 1475:        result =
    #####: 1476:          ecma_builtin_object_object_keys_values_helper (obj_p, (ecma_enumerable_property_names_options_t) option);
    #####: 1477:        break;
        -: 1478:      }
    #####: 1479:      case ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_DESCRIPTOR:
        -: 1480:      {
    #####: 1481:        ecma_string_t *prop_name_p = ecma_op_to_property_key (arg2);
        -: 1482:
    #####: 1483:        if (prop_name_p == NULL)
        -: 1484:        {
    #####: 1485:          result = ECMA_VALUE_ERROR;
    #####: 1486:          break;
        -: 1487:        }
        -: 1488:
    #####: 1489:        result = ecma_builtin_object_object_get_own_property_descriptor (obj_p, prop_name_p);
    #####: 1490:        ecma_deref_ecma_string (prop_name_p);
    #####: 1491:        break;
        -: 1492:      }
        -: 1493:#if JERRY_ESNEXT
    #####: 1494:      case ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_DESCRIPTORS:
        -: 1495:      {
    #####: 1496:        result = ecma_builtin_object_object_get_own_property_descriptors (obj_p);
    #####: 1497:        break;
        -: 1498:      }
    #####: 1499:      case ECMA_OBJECT_ROUTINE_FROM_ENTRIES:
        -: 1500:      {
    #####: 1501:        result = ecma_builtin_object_from_entries (arg1);
    #####: 1502:        break;
        -: 1503:      }
        -: 1504:#endif /* JERRY_ESNEXT */
    #####: 1505:      default:
        -: 1506:      {
    #####: 1507:        JERRY_UNREACHABLE ();
        -: 1508:      }
        -: 1509:    }
        -: 1510:
        -: 1511:#if JERRY_ESNEXT
    #####: 1512:    ecma_deref_object (obj_p);
        -: 1513:#endif /* JERRY_ESNEXT */
    #####: 1514:    return result;
        -: 1515:  }
    #####: 1516:  else if (builtin_routine_id <= ECMA_OBJECT_ROUTINE_GET_OWN_PROPERTY_SYMBOLS)
        -: 1517:  {
    #####: 1518:    return ecma_op_object_get_own_property_keys (arg1, builtin_routine_id);
        -: 1519:  }
    #####: 1520:  else if (builtin_routine_id <= ECMA_OBJECT_ROUTINE_SEAL)
        -: 1521:  {
        -: 1522:#if JERRY_ESNEXT
    #####: 1523:    if (!ecma_is_value_object (arg1))
        -: 1524:    {
    #####: 1525:      return ecma_copy_value (arg1);
        -: 1526:    }
        -: 1527:#endif /* JERRY_ESNEXT */
        -: 1528:
    #####: 1529:    obj_p = ecma_get_object_from_value (arg1);
    #####: 1530:    switch (builtin_routine_id)
        -: 1531:    {
    #####: 1532:      case ECMA_OBJECT_ROUTINE_SEAL:
        -: 1533:      {
    #####: 1534:        return ecma_builtin_object_object_seal (obj_p);
        -: 1535:      }
    #####: 1536:      case ECMA_OBJECT_ROUTINE_FREEZE:
        -: 1537:      {
    #####: 1538:        return ecma_builtin_object_object_freeze (obj_p);
        -: 1539:      }
    #####: 1540:      case ECMA_OBJECT_ROUTINE_PREVENT_EXTENSIONS:
        -: 1541:      {
    #####: 1542:        return ecma_builtin_object_object_prevent_extensions (obj_p);
        -: 1543:      }
    #####: 1544:      default:
        -: 1545:      {
    #####: 1546:        JERRY_UNREACHABLE ();
        -: 1547:      }
        -: 1548:    }
        -: 1549:  }
        -: 1550:  else
        -: 1551:  {
    #####: 1552:    JERRY_ASSERT (builtin_routine_id <= ECMA_OBJECT_ROUTINE_IS_SEALED);
        -: 1553:#if JERRY_ESNEXT
    #####: 1554:    if (!ecma_is_value_object (arg1))
        -: 1555:    {
    #####: 1556:      return ecma_make_boolean_value (builtin_routine_id != ECMA_OBJECT_ROUTINE_IS_EXTENSIBLE);
        -: 1557:    }
        -: 1558:#endif /* JERRY_ESNEXT */
        -: 1559:
    #####: 1560:    obj_p = ecma_get_object_from_value (arg1);
    #####: 1561:    switch (builtin_routine_id)
        -: 1562:    {
    #####: 1563:      case ECMA_OBJECT_ROUTINE_IS_SEALED:
        -: 1564:      case ECMA_OBJECT_ROUTINE_IS_FROZEN:
        -: 1565:      {
    #####: 1566:        return ecma_builtin_object_test_integrity_level (obj_p, builtin_routine_id);
        -: 1567:      }
    #####: 1568:      case ECMA_OBJECT_ROUTINE_IS_EXTENSIBLE:
        -: 1569:      {
    #####: 1570:        return ecma_builtin_object_object_is_extensible (obj_p);
        -: 1571:      }
    #####: 1572:      default:
        -: 1573:      {
    #####: 1574:        JERRY_UNREACHABLE ();
        -: 1575:      }
        -: 1576:    }
        -: 1577:  }
        -: 1578:} /* ecma_builtin_object_dispatch_routine */
        -: 1579:
        -: 1580:/**
        -: 1581: * @}
        -: 1582: * @}
        -: 1583: * @}
        -: 1584: */
