        -:    0:Source:/home/workspace/tests/unit-core/test-dataview.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-port-default.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:int
    #####:   23:main (void)
        -:   24:{
    #####:   25:  if (!jerry_feature_enabled (JERRY_FEATURE_DATAVIEW))
        -:   26:  {
    #####:   27:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "DataView support is disabled!\n");
    #####:   28:    return 0;
        -:   29:  }
        -:   30:
        -:   31:  /* DataView builtin requires the TypedArray builtin */
    #####:   32:  TEST_ASSERT (jerry_feature_enabled (JERRY_FEATURE_TYPEDARRAY));
        -:   33:
    #####:   34:  jerry_init (JERRY_INIT_EMPTY);
        -:   35:
        -:   36:  /* Test accessors */
    #####:   37:  jerry_value_t arraybuffer = jerry_arraybuffer (16);
    #####:   38:  jerry_value_t view1 = jerry_dataview (arraybuffer, 0, 16);
    #####:   39:  TEST_ASSERT (!jerry_value_is_exception (view1));
    #####:   40:  TEST_ASSERT (jerry_value_is_dataview (view1));
        -:   41:
    #####:   42:  jerry_length_t byteOffset = 0;
    #####:   43:  jerry_length_t byteLength = 0;
        -:   44:  ;
    #####:   45:  jerry_value_t internal_buffer = jerry_dataview_buffer (view1, &byteOffset, &byteLength);
    #####:   46:  TEST_ASSERT (jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, internal_buffer, arraybuffer));
    #####:   47:  TEST_ASSERT (byteOffset == 0);
    #####:   48:  TEST_ASSERT (byteLength == 16);
    #####:   49:  jerry_value_free (internal_buffer);
        -:   50:
    #####:   51:  jerry_value_t view2 = jerry_dataview (arraybuffer, 12, 4);
    #####:   52:  TEST_ASSERT (!jerry_value_is_exception (view1));
    #####:   53:  TEST_ASSERT (jerry_value_is_dataview (view2));
    #####:   54:  internal_buffer = jerry_dataview_buffer (view2, &byteOffset, &byteLength);
    #####:   55:  TEST_ASSERT (jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, internal_buffer, arraybuffer));
    #####:   56:  TEST_ASSERT (byteOffset == 12);
    #####:   57:  TEST_ASSERT (byteLength == 4);
    #####:   58:  jerry_value_free (internal_buffer);
        -:   59:
        -:   60:  /* Test invalid construction */
    #####:   61:  jerry_value_t empty_object = jerry_object ();
    #####:   62:  jerry_value_t view3 = jerry_dataview (empty_object, 20, 10);
    #####:   63:  TEST_ASSERT (jerry_value_is_exception (view3));
    #####:   64:  jerry_value_t error_obj = jerry_exception_value (view3, true);
    #####:   65:  TEST_ASSERT (jerry_error_type (error_obj) == JERRY_ERROR_TYPE);
    #####:   66:  jerry_value_free (error_obj);
    #####:   67:  jerry_value_free (empty_object);
        -:   68:
    #####:   69:  jerry_value_t view4 = jerry_dataview (arraybuffer, 20, 10);
    #####:   70:  TEST_ASSERT (jerry_value_is_exception (view3));
    #####:   71:  error_obj = jerry_exception_value (view4, true);
    #####:   72:  TEST_ASSERT (jerry_error_type (error_obj) == JERRY_ERROR_RANGE);
    #####:   73:  jerry_value_free (error_obj);
        -:   74:
        -:   75:  /* Test getting/setting values */
    #####:   76:  jerry_value_t global_obj = jerry_current_realm ();
    #####:   77:  jerry_value_t view1_str = jerry_string_sz ("view1");
    #####:   78:  jerry_value_t view2_str = jerry_string_sz ("view2");
    #####:   79:  TEST_ASSERT (jerry_object_set (global_obj, view1_str, view1));
    #####:   80:  TEST_ASSERT (jerry_object_set (global_obj, view2_str, view2));
        -:   81:
    #####:   82:  jerry_value_free (view1_str);
    #####:   83:  jerry_value_free (view2_str);
    #####:   84:  jerry_value_free (global_obj);
        -:   85:
    #####:   86:  const jerry_char_t set_src[] = "view1.setInt16 (12, 255)";
    #####:   87:  TEST_ASSERT (jerry_value_is_undefined (jerry_eval (set_src, sizeof (set_src) - 1, JERRY_PARSE_NO_OPTS)));
        -:   88:
    #####:   89:  const jerry_char_t get_src[] = "view2.getInt16 (0)";
    #####:   90:  TEST_ASSERT (jerry_value_as_number (jerry_eval (get_src, sizeof (get_src) - 1, JERRY_PARSE_NO_OPTS)) == 255);
        -:   91:
    #####:   92:  const jerry_char_t get_src_little_endian[] = "view2.getInt16 (0, true)";
    #####:   93:  TEST_ASSERT (
        -:   94:    jerry_value_as_number (jerry_eval (get_src_little_endian, sizeof (get_src_little_endian) - 1, JERRY_PARSE_NO_OPTS))
        -:   95:    == -256);
        -:   96:
        -:   97:  /* Cleanup */
    #####:   98:  jerry_value_free (view2);
    #####:   99:  jerry_value_free (view1);
    #####:  100:  jerry_value_free (arraybuffer);
        -:  101:
    #####:  102:  jerry_cleanup ();
        -:  103:
    #####:  104:  return 0;
        -:  105:} /* main */
