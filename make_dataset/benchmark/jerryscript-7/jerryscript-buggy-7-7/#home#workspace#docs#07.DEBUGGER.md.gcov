        -:    0:Source:/home/workspace/docs/07.DEBUGGER.md
        -:    0:Programs:299
        -:    1:## JerryScript debugger interface
        -:    2:
        -:    3:JerryScript provides a remote debugger which allows debugging
        -:    4:JavaScript programs. The debugger has two main components:
        -:    5:a server which is part of the JerryScript binary and a
        -:    6:separate client application. Currently a Python-based debugger
        -:    7:client is available in the /jerry-debugger subdirectory.
        -:    8:This simple application demonstrates the communication protocol
        -:    9:between the client and server, and can be reused by integrated
        -:   10:development environments.
        -:   11:
        -:   12:## Setting up the debugger server
        -:   13:
        -:   14:The following arguments must be passed to `tools/build.py`:
        -:   15:
        -:   16:`--jerry-debugger=on`
        -:   17:
        -:   18:The transport layer of the communication protocol is pluggable.
        -:   19:At the moment, a WebSocket-based implementation is provided as a
        -:   20:JerryScript extension, which transmits messages over TCP/IP networks.
        -:   21:If necessary/implemented, any reliable stream or datagram based
        -:   22:protocol can be used for transmitting debugger messages.
        -:   23:
        -:   24:## Debugging JavaScript applications
        -:   25:
        -:   26:The debugger client must be connected to the server before the
        -:   27:JavaScript application runs. On-the-fly attachment is supported
        -:   28:for more than one file, right after the engine initialization
        -:   29:(this feature is available with the python client). The debugging
        -:   30:information (e.g. line index of each possible breakpoint location)
        -:   31:is not preserved by JerryScript. The client is expected to be run
        -:   32:on a system with much more resources and it should be capable of
        -:   33:storing this information. JerryScript frees all debug information
        -:   34:after it is transmitted to the client to save memory.
        -:   35:
        -:   36:The following argument makes JerryScript wait for a client
        -:   37:connection:
        -:   38:
        -:   39:`--start-debug-server`
        -:   40:
        -:   41:The following argument makes JerryScript wait for a client
        -:   42:source code:
        -:   43:
        -:   44:`--debugger-wait-source`
        -:   45:
        -:   46:It is also recommended to increase the log level to see
        -:   47:the *Waiting for client connection* message:
        -:   48:
        -:   49:`--log-level 2`
        -:   50:
        -:   51:The Python client can connect to the server by specifying its
        -:   52:IP address on the command line. The address can be localhost
        -:   53:if the server and the client are running on the same machine.
        -:   54:
        -:   55:After the connection is established the execution can be
        -:   56:controlled by the debugger. The debugger always stops at
        -:   57:the first possible breakpoint location. The effect is the
        -:   58:same as using the `stop` command. This allows inserting
        -:   59:breakpoints right before the meaningful part of the execution
        -:   60:starts.
        -:   61:
        -:   62:All available commands of the client can be queried by the
        -:   63:`help` command.
        -:   64:
        -:   65:## Integrating debugger support into applications using JerryScript
        -:   66:
        -:   67:When using the extension-provided WebSocket transport layer, the
        -:   68:debugger can be enabled by calling `jerryx_debugger_after_connect
        -:   69:(jerryx_debugger_tcp_create (debug_port) && jerryx_debugger_ws_create ())`
        -:   70:after the `jerry_init ()` function. It initializes the debugger and
        -:   71:blocks until a client connects.
        -:   72:(Custom transport layers may be implemented and initialized similarly.
        -:   73:Currently, `jerryx_debugger_rp_create ()` for raw packet transport layer and
        -:   74:`jerryx_debugger_serial_create (const char* config)` for serial protocol
        -:   75:are also available.)
        -:   76:
        -:   77:The source name provided to `jerry_parse ()` is used by the client
        -:   78:to identify the source name of the source code. This source name
        -:   79:is usually a file name.
        -:   80:
        -:   81:## JerryScript debugger C-API interface
        -:   82:
        -:   83:The following section describes the debugger functions
        -:   84:available to the host application.
        -:   85:
        -:   86:## JerryScript debugger types
        -:   87:
        -:   88:## jerry_debugger_wait_for_source_callback_t
        -:   89:
        -:   90:**Summary**
        -:   91:
        -:   92:This callback function is called by
        -:   93:[jerry_debugger_wait_for_client_source](#jerry_debugger_wait_for_client_source)
        -:   94:when a source code is received successfully.
        -:   95:
        -:   96:**Prototype**
        -:   97:
        -:   98:```c
        -:   99:typedef jerry_value_t
        -:  100:(*jerry_debugger_wait_for_source_callback_t) (const jerry_char_t *source_name_p,
        -:  101:                                              size_t source_name_size,
        -:  102:                                              const jerry_char_t *source_p,
        -:  103:                                              size_t source_size, void *user_p);
        -:  104:```
        -:  105:
        -:  106:- `source_name_p` - source (usually a file) name of the source code
        -:  107:- `source_name_size` - size of source name
        -:  108:- `source_p` - source code character data
        -:  109:- `source_size` - size of source code
        -:  110:- `user_p` - custom pointer passed to [jerry_debugger_wait_for_client_source](#jerry_debugger_wait_for_client_source)
        -:  111:
        -:  112:
        -:  113:## JerryScript debugger functions
        -:  114:
        -:  115:### jerry_debugger_is_connected
        -:  116:
        -:  117:**Summary**
        -:  118:
        -:  119:Returns true if a remote debugger client is connected.
        -:  120:
        -:  121:**Prototype**
        -:  122:
        -:  123:```c
        -:  124:bool
        -:  125:jerry_debugger_is_connected (void);
        -:  126:```
        -:  127:
        -:  128:**Example**
        -:  129:
        -:  130:[doctest]: # (test="link")
        -:  131:
        -:  132:```c
        -:  133:#include "jerryscript.h"
        -:  134:#include "jerryscript-ext/debugger.h"
        -:  135:
        -:  136:int
    #####:  137:main (void)
        -:  138:{
    #####:  139:  jerry_init (JERRY_INIT_EMPTY);
    #####:  140:  jerryx_debugger_after_connect (jerryx_debugger_tcp_create (5001)
    #####:  141:                                 && jerryx_debugger_ws_create ());
        -:  142:
    #####:  143:  if (jerry_debugger_is_connected ())
        -:  144:  {
        -:  145:    printf ("A remote debugger client is connected.");
        -:  146:  }
        -:  147:
    #####:  148:  jerry_cleanup ();
        -:  149:}
        -:  150:```
        -:  151:
        -:  152:### jerry_debugger_stop
        -:  153:
        -:  154:**Summary**
        -:  155:
        -:  156:Stops execution at the next available breakpoint if a remote
        -:  157:debugger client is connected and the engine is not waiting at
        -:  158:a breakpoint. The engine will stop regardless the breakpoint
        -:  159:is enabled or not.
        -:  160:
        -:  161:**Prototype**
        -:  162:
        -:  163:```c
        -:  164:void
        -:  165:jerry_debugger_stop (void)
        -:  166:```
        -:  167:
        -:  168:**Example**
        -:  169:
        -:  170:[doctest]: # (test="link")
        -:  171:
        -:  172:```c
        -:  173:#include "jerryscript.h"
        -:  174:#include "jerryscript-ext/debugger.h"
        -:  175:
        -:  176:int
    #####:  177:main (void)
        -:  178:{
    #####:  179:  jerry_init (JERRY_INIT_EMPTY);
    #####:  180:  jerryx_debugger_after_connect (jerryx_debugger_tcp_create (5001)
    #####:  181:                                 && jerryx_debugger_ws_create ());
        -:  182:
    #####:  183:  jerry_debugger_stop ();
        -:  184:
    #####:  185:  jerry_cleanup ();
        -:  186:}
        -:  187:```
        -:  188:
        -:  189:**See also**
        -:  190:
        -:  191:- [jerry_debugger_continue](#jerry_debugger_continue)
        -:  192:
        -:  193:### jerry_debugger_continue
        -:  194:
        -:  195:**Summary**
        -:  196:
        -:  197:If the engine would stop at the next available breakpoint it
        -:  198:cancels this effect. The engine will still stop at enabled
        -:  199:breakpoints. This function effectively negates the effect of
        -:  200:[jerry_debugger_stop ()](#jerry_debugger_stop) calls or stop
        -:  201:requests issued by the debugger client.
        -:  202:
        -:  203:**Prototype**
        -:  204:
        -:  205:```c
        -:  206:void
        -:  207:jerry_debugger_continue (void)
        -:  208:```
        -:  209:
        -:  210:**Example**
        -:  211:
        -:  212:[doctest]: # (test="link")
        -:  213:
        -:  214:```c
        -:  215:#include "jerryscript.h"
        -:  216:#include "jerryscript-ext/debugger.h"
        -:  217:
        -:  218:int
    #####:  219:main (void)
        -:  220:{
    #####:  221:  jerry_init (JERRY_INIT_EMPTY);
    #####:  222:  jerryx_debugger_after_connect (jerryx_debugger_tcp_create (5001)
    #####:  223:                                 && jerryx_debugger_ws_create ());
        -:  224:
    #####:  225:  jerry_debugger_continue ();
        -:  226:
    #####:  227:  jerry_cleanup ();
        -:  228:}
        -:  229:```
        -:  230:
        -:  231:**See also**
        -:  232:
        -:  233:- [jerry_debugger_stop](#jerry_debugger_stop)
        -:  234:
        -:  235:### jerry_debugger_stop_at_breakpoint
        -:  236:
        -:  237:**Summary**
        -:  238:
        -:  239:Enables or disables stopping at breakpoints. When stopping is
        -:  240:disabled all breakpoints are ignored including user enabled
        -:  241:breakpoints. This allows hidden execution of ECMAScript code.
        -:  242:
        -:  243:**Prototype**
        -:  244:
        -:  245:```c
        -:  246:void
        -:  247:jerry_debugger_stop_at_breakpoint (bool enable_stop_at_breakpoint)
        -:  248:```
        -:  249:
        -:  250:- `enable_stop_at_breakpoint` - enable (=`true`) or disable (=`false`) stopping at breakpoints
        -:  251:
        -:  252:**Example**
        -:  253:
        -:  254:[doctest]: # (test="link")
        -:  255:
        -:  256:```c
        -:  257:#include "jerryscript.h"
        -:  258:#include "jerryscript-ext/debugger.h"
        -:  259:
        -:  260:int
    #####:  261:main (void)
        -:  262:{
    #####:  263:  jerry_init (JERRY_INIT_EMPTY);
    #####:  264:  jerryx_debugger_after_connect (jerryx_debugger_tcp_create (5001)
    #####:  265:                                 && jerryx_debugger_ws_create ());
        -:  266:
    #####:  267:  jerry_debugger_stop_at_breakpoint (true);
        -:  268:
        -:  269:  // Protected execution of JavaScript code.
    #####:  270:  const jerry_char_t script[] = "42";
    #####:  271:  jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
        -:  272:
    #####:  273:  jerry_debugger_stop_at_breakpoint (false);
        -:  274:
    #####:  275:  jerry_cleanup ();
        -:  276:}
        -:  277:```
        -:  278:
        -:  279:### jerry_debugger_wait_for_client_source
        -:  280:
        -:  281:**Summary**
        -:  282:
        -:  283:Asks the client to provide the next source code. The function
        -:  284:waits until the whole source code is received. As a reply the
        -:  285:the client may request a context reset or notify that no more
        -:  286:source is available. These notifications are passed back as the
        -:  287:return value of the function.
        -:  288:
        -:  289:**Prototype**
        -:  290:
        -:  291:```c
        -:  292:jerry_debugger_wait_for_source_status_t
        -:  293:jerry_debugger_wait_for_client_source (jerry_debugger_wait_for_source_callback_t callback_p,
        -:  294:                                       void *user_p, jerry_value_t *return_value)
        -:  295:```
        -:  296:
        -:  297:**Example**
        -:  298:
        -:  299:[doctest]: # (test="link")
        -:  300:
        -:  301:```c
        -:  302:#include "jerryscript.h"
        -:  303:#include "jerryscript-ext/debugger.h"
        -:  304:
        -:  305:/**
        -:  306: * Runs the source code received by jerry_debugger_wait_for_client_source.
        -:  307: */
        -:  308:static jerry_value_t
    #####:  309:wait_for_source_callback (const jerry_char_t *source_name_p, /**< source name */
        -:  310:                          size_t source_name_size, /**< size of source name */
        -:  311:                          const jerry_char_t *source_p, /**< source code */
        -:  312:                          size_t source_size, /**< source code size */
        -:  313:                          void *user_p /**< user pointer */)
        -:  314:{
        -:  315:  (void) user_p;
        -:  316:
        -:  317:  jerry_parse_options_t parse_options;
    #####:  318:  parse_options.options = JERRY_PARSE_HAS_SOURCE_NAME;
    #####:  319:  parse_options.source_name = jerry_string ((const jerry_char_t *) source_name_p,
        -:  320:                                              (jerry_size_t) source_name_size,
        -:  321:                                              JERRY_ENCODING_UTF8);
        -:  322:
    #####:  323:  jerry_value_t ret_val = jerry_parse (source_p,
        -:  324:                                       source_size,
        -:  325:                                       &parse_options);
    #####:  326:  jerry_value_free (parse_options.source_name);
        -:  327:
    #####:  328:  if (!jerry_value_is_exception (ret_val))
        -:  329:  {
    #####:  330:    jerry_value_t func_val = ret_val;
    #####:  331:    ret_val = jerry_run (func_val);
    #####:  332:    jerry_value_free (func_val);
        -:  333:  }
        -:  334:
    #####:  335:  return ret_val;
        -:  336:} /* wait_for_source_callback */
        -:  337:
        -:  338:int
    #####:  339:main (void)
        -:  340:{
        -:  341:  jerry_debugger_wait_for_source_status_t receive_status;
        -:  342:
        -:  343:  do
        -:  344:  {
        -:  345:    /* Create a new JerryScript instance when a context reset is
        -:  346:     * received. Applications usually registers their core bindings
        -:  347:     * here as well (e.g. print, setTimeout). */
    #####:  348:    jerry_init (JERRY_INIT_EMPTY);
    #####:  349:    jerryx_debugger_after_connect (jerryx_debugger_tcp_create (5001)
    #####:  350:                                   && jerryx_debugger_ws_create ());
        -:  351:
        -:  352:    do
        -:  353:    {
        -:  354:      jerry_value_t run_result;
        -:  355:
    #####:  356:      receive_status = jerry_debugger_wait_for_client_source (wait_for_source_callback,
        -:  357:                                                              NULL,
        -:  358:                                                              &run_result);
        -:  359:
    #####:  360:      jerry_value_free (run_result);
        -:  361:    }
    #####:  362:    while (receive_status == JERRY_DEBUGGER_SOURCE_RECEIVED);
        -:  363:
    #####:  364:    jerry_cleanup ();
        -:  365:  }
    #####:  366:  while (receive_status == JERRY_DEBUGGER_CONTEXT_RESET_RECEIVED);
        -:  367:
        -:  368:  if (receive_status == JERRY_DEBUGGER_SOURCE_RECEIVE_FAILED)
        -:  369:  {
        -:  370:    // Handle the failure (e.g. display an error).
        -:  371:  }
        -:  372:  return 0;
        -:  373:}
        -:  374:```
        -:  375:
        -:  376:### jerry_debugger_send_output
        -:  377:
        -:  378:**Summary**
        -:  379:
        -:  380:Sends the program's output to the debugger client.
        -:  381:
        -:  382:**Prototype**
        -:  383:
        -:  384:```c
        -:  385:void
        -:  386:jerry_debugger_send_output (const jerry_char_t *buffer, jerry_size_t string_size)
        -:  387:```
        -:  388:
        -:  389:**Example**
        -:  390:
        -:  391:[doctest]: # (test="link")
        -:  392:
        -:  393:```c
        -:  394:#include "jerryscript.h"
        -:  395:#include "jerryscript-ext/debugger.h"
        -:  396:
        -:  397:int
    #####:  398:main (void)
        -:  399:{
    #####:  400:  jerry_init (JERRY_INIT_EMPTY);
    #####:  401:  jerryx_debugger_after_connect (jerryx_debugger_tcp_create (5001)
    #####:  402:                                 && jerryx_debugger_ws_create ());
        -:  403:
    #####:  404:  jerry_char_t my_output[] = "Hey, this should be sent too!";
    #####:  405:  jerry_size_t my_output_size = sizeof (my_output);
        -:  406:
    #####:  407:  jerry_debugger_send_output (my_output, my_output_size);
        -:  408:
    #####:  409:  jerry_cleanup ();
        -:  410:}
        -:  411:```
        -:  412:
        -:  413:### jerry_debugger_send_log
        -:  414:
        -:  415:**Summary**
        -:  416:
        -:  417:Sends the program's log to the debugger client.
        -:  418:
        -:  419:**Prototype**
        -:  420:
        -:  421:```c
        -:  422:void
        -:  423:jerry_debugger_send_log (jerry_log_level_t level, const jerry_char_t *buffer, jerry_size_t string_size)
        -:  424:```
        -:  425:
        -:  426:**Example**
        -:  427:
        -:  428:[doctest]: # (test="link")
        -:  429:
        -:  430:```c
        -:  431:#include "jerryscript.h"
        -:  432:#include "jerryscript-ext/debugger.h"
        -:  433:
        -:  434:int
    #####:  435:main (void)
        -:  436:{
    #####:  437:  jerry_init (JERRY_INIT_EMPTY);
    #####:  438:  jerryx_debugger_after_connect (jerryx_debugger_tcp_create (5001)
    #####:  439:                                 && jerryx_debugger_ws_create ());
        -:  440:
    #####:  441:  jerry_char_t my_log[] = "Custom diagnostics";
    #####:  442:  jerry_size_t my_log_size = sizeof (my_log);
        -:  443:
    #####:  444:  jerry_debugger_send_log (JERRY_LOG_LEVEL_DEBUG, my_log, my_log_size);
        -:  445:
    #####:  446:  jerry_cleanup ();
        -:  447:}
        -:  448:```
