        -:    0:Source:/home/workspace/tests/unit-core/test-api-binary-operations-instanceof.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:#define T(lhs, rhs, res) \
        -:   21:  {                      \
        -:   22:    lhs, rhs, res        \
        -:   23:  }
        -:   24:
        -:   25:typedef struct
        -:   26:{
        -:   27:  jerry_value_t lhs;
        -:   28:  jerry_value_t rhs;
        -:   29:  bool expected;
        -:   30:} test_entry_t;
        -:   31:
        -:   32:static jerry_value_t
    #####:   33:my_constructor (const jerry_call_info_t *call_info_p, /**< call information */
        -:   34:                const jerry_value_t argv[], /**< arguments */
        -:   35:                const jerry_length_t argc) /**< number of arguments */
        -:   36:{
        -:   37:  (void) call_info_p;
        -:   38:  (void) argv;
        -:   39:  (void) argc;
    #####:   40:  return jerry_undefined ();
        -:   41:} /* my_constructor */
        -:   42:
        -:   43:int
    #####:   44:main (void)
        -:   45:{
    #####:   46:  TEST_INIT ();
        -:   47:
    #####:   48:  jerry_init (JERRY_INIT_EMPTY);
        -:   49:
    #####:   50:  jerry_value_t base_obj = jerry_object ();
    #####:   51:  jerry_value_t constructor = jerry_function_external (my_constructor);
        -:   52:
    #####:   53:  jerry_value_t no_proto_instance_val = jerry_construct (constructor, NULL, 0);
        -:   54:
    #####:   55:  jerry_value_t prototype_str = jerry_string_sz ("prototype");
    #####:   56:  jerry_value_t res = jerry_object_set (constructor, prototype_str, base_obj);
    #####:   57:  jerry_value_free (prototype_str);
    #####:   58:  TEST_ASSERT (!jerry_value_is_exception (res));
    #####:   59:  jerry_value_free (res);
        -:   60:
    #####:   61:  jerry_value_t instance_val = jerry_construct (constructor, NULL, 0);
        -:   62:
    #####:   63:  jerry_value_t error = jerry_throw_value (base_obj, false);
        -:   64:
    #####:   65:  test_entry_t bool_tests[] = { T (jerry_value_copy (instance_val), jerry_value_copy (constructor), true),
    #####:   66:                                T (jerry_value_copy (no_proto_instance_val), jerry_value_copy (constructor), false),
    #####:   67:                                T (jerry_value_copy (base_obj), jerry_value_copy (constructor), false) };
        -:   68:
    #####:   69:  for (uint32_t idx = 0; idx < sizeof (bool_tests) / sizeof (test_entry_t); idx++)
        -:   70:  {
    #####:   71:    jerry_value_t result = jerry_binary_op (JERRY_BIN_OP_INSTANCEOF, bool_tests[idx].lhs, bool_tests[idx].rhs);
    #####:   72:    TEST_ASSERT (!jerry_value_is_exception (result));
    #####:   73:    TEST_ASSERT (jerry_value_is_true (result) == bool_tests[idx].expected);
    #####:   74:    jerry_value_free (bool_tests[idx].lhs);
    #####:   75:    jerry_value_free (bool_tests[idx].rhs);
    #####:   76:    jerry_value_free (result);
        -:   77:  }
        -:   78:
    #####:   79:  test_entry_t error_tests[] = { T (jerry_value_copy (constructor), jerry_value_copy (instance_val), true),
    #####:   80:                                 T (jerry_undefined (), jerry_value_copy (constructor), true),
    #####:   81:                                 T (jerry_value_copy (instance_val), jerry_undefined (), true),
    #####:   82:                                 T (jerry_value_copy (instance_val), jerry_value_copy (base_obj), true),
    #####:   83:                                 T (jerry_value_copy (error), jerry_value_copy (constructor), true),
    #####:   84:                                 T (jerry_value_copy (instance_val), jerry_value_copy (error), true),
    #####:   85:                                 T (jerry_string_sz (""), jerry_string_sz (""), true),
    #####:   86:                                 T (jerry_string_sz (""), jerry_number (5.0), true),
    #####:   87:                                 T (jerry_number (5.0), jerry_string_sz (""), true),
    #####:   88:                                 T (jerry_array (1), jerry_array (1), true),
    #####:   89:                                 T (jerry_array (1), jerry_object (), true),
    #####:   90:                                 T (jerry_object (), jerry_array (1), true),
    #####:   91:                                 T (jerry_null (), jerry_object (), true),
    #####:   92:                                 T (jerry_object (), jerry_string_sz (""), true) };
        -:   93:
    #####:   94:  for (uint32_t idx = 0; idx < sizeof (error_tests) / sizeof (test_entry_t); idx++)
        -:   95:  {
    #####:   96:    jerry_value_t result = jerry_binary_op (JERRY_BIN_OP_INSTANCEOF, error_tests[idx].lhs, error_tests[idx].rhs);
    #####:   97:    TEST_ASSERT (jerry_value_is_exception (result) == error_tests[idx].expected);
    #####:   98:    jerry_value_free (error_tests[idx].lhs);
    #####:   99:    jerry_value_free (error_tests[idx].rhs);
    #####:  100:    jerry_value_free (result);
        -:  101:  }
        -:  102:
    #####:  103:  jerry_value_free (base_obj);
    #####:  104:  jerry_value_free (constructor);
    #####:  105:  jerry_value_free (error);
    #####:  106:  jerry_value_free (instance_val);
    #####:  107:  jerry_value_free (no_proto_instance_val);
        -:  108:
    #####:  109:  jerry_cleanup ();
        -:  110:
        -:  111:  return 0;
        -:  112:} /* main */
