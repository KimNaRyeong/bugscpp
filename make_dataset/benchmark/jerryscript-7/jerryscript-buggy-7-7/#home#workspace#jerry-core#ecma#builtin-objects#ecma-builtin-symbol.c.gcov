        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-symbol.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-conversion.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-literal-storage.h"
        -:   24:#include "ecma-objects.h"
        -:   25:#include "ecma-symbol-object.h"
        -:   26:
        -:   27:#include "jcontext.h"
        -:   28:#include "jrt.h"
        -:   29:
        -:   30:#if JERRY_ESNEXT
        -:   31:
        -:   32:#define ECMA_BUILTINS_INTERNAL
        -:   33:#include "ecma-builtins-internal.h"
        -:   34:
        -:   35:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-symbol.inc.h"
        -:   36:#define BUILTIN_UNDERSCORED_ID  symbol
        -:   37:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   38:
        -:   39:/** \addtogroup ecma ECMA
        -:   40: * @{
        -:   41: *
        -:   42: * \addtogroup ecmabuiltins
        -:   43: * @{
        -:   44: *
        -:   45: * \addtogroup symbol ECMA Symbol object built-in
        -:   46: * @{
        -:   47: */
        -:   48:
        -:   49:/**
        -:   50: * Handle calling [[Call]] of built-in Symbol object.
        -:   51: *
        -:   52: * @return ecma value
        -:   53: */
        -:   54:ecma_value_t
    #####:   55:ecma_builtin_symbol_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   56:                                   uint32_t arguments_list_len) /**< number of arguments */
        -:   57:{
    #####:   58:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   59:
    #####:   60:  return ecma_op_create_symbol (arguments_list_p, arguments_list_len);
        -:   61:} /* ecma_builtin_symbol_dispatch_call */
        -:   62:
        -:   63:/**
        -:   64: * Handle calling [[Construct]] of built-in Symbol object.
        -:   65: *
        -:   66: * Symbol constructor is not intended to be used
        -:   67: * with the new operator or to be subclassed.
        -:   68: *
        -:   69: * See also:
        -:   70: *          ECMA-262 v6, 19.4.1
        -:   71: * @return ecma value
        -:   72: */
        -:   73:ecma_value_t
    #####:   74:ecma_builtin_symbol_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   75:                                        uint32_t arguments_list_len) /**< number of arguments */
        -:   76:{
    #####:   77:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   78:
    #####:   79:  return ecma_raise_type_error (ECMA_ERR_SYMBOL_IS_NOT_A_CONSTRUCTOR);
        -:   80:} /* ecma_builtin_symbol_dispatch_construct */
        -:   81:
        -:   82:/**
        -:   83: * Helper function for Symbol object's 'for' and `keyFor`
        -:   84: * routines common parts
        -:   85: *
        -:   86: * @return ecma value
        -:   87: *         Returned value must be freed with ecma_free_value.
        -:   88: */
        -:   89:static ecma_value_t
    #####:   90:ecma_builtin_symbol_for_helper (ecma_value_t value_to_find) /**< symbol or ecma-string */
        -:   91:{
        -:   92:  ecma_string_t *string_p;
        -:   93:
    #####:   94:  bool is_for = ecma_is_value_string (value_to_find);
        -:   95:
    #####:   96:  if (is_for)
        -:   97:  {
    #####:   98:    string_p = ecma_get_string_from_value (value_to_find);
        -:   99:  }
        -:  100:  else
        -:  101:  {
    #####:  102:    string_p = ecma_get_symbol_from_value (value_to_find);
        -:  103:  }
        -:  104:
    #####:  105:  jmem_cpointer_t symbol_list_cp = JERRY_CONTEXT (symbol_list_first_cp);
    #####:  106:  jmem_cpointer_t *empty_cpointer_p = NULL;
        -:  107:
    #####:  108:  while (symbol_list_cp != JMEM_CP_NULL)
        -:  109:  {
    #####:  110:    ecma_lit_storage_item_t *symbol_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t, symbol_list_cp);
        -:  111:
    #####:  112:    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:  113:    {
    #####:  114:      if (symbol_list_p->values[i] != JMEM_CP_NULL)
        -:  115:      {
    #####:  116:        ecma_string_t *value_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_string_t, symbol_list_p->values[i]);
        -:  117:
    #####:  118:        if (is_for)
        -:  119:        {
    #####:  120:          ecma_value_t symbol_desc = ecma_get_symbol_description (value_p);
        -:  121:
    #####:  122:          if (ecma_is_value_undefined (symbol_desc))
        -:  123:          {
    #####:  124:            ecma_ref_ecma_string (value_p);
    #####:  125:            return ecma_make_symbol_value (value_p);
        -:  126:          }
        -:  127:
    #####:  128:          ecma_string_t *symbol_desc_p = ecma_get_string_from_value (symbol_desc);
        -:  129:
    #####:  130:          if (ecma_compare_ecma_strings (symbol_desc_p, string_p))
        -:  131:          {
        -:  132:            /* The current symbol's descriptor matches with the value_to_find,
        -:  133:               so the value is no longer needed. */
    #####:  134:            ecma_deref_ecma_string (string_p);
    #####:  135:            return ecma_copy_value (ecma_make_symbol_value (value_p));
        -:  136:          }
        -:  137:        }
        -:  138:        else
        -:  139:        {
    #####:  140:          if (string_p == value_p)
        -:  141:          {
    #####:  142:            ecma_value_t symbol_desc = ecma_get_symbol_description (string_p);
        -:  143:
    #####:  144:            if (ecma_is_value_undefined (symbol_desc))
        -:  145:            {
    #####:  146:              return symbol_desc;
        -:  147:            }
        -:  148:
    #####:  149:            ecma_string_t *symbol_desc_p = ecma_get_string_from_value (symbol_desc);
    #####:  150:            ecma_ref_ecma_string (symbol_desc_p);
    #####:  151:            return symbol_desc;
        -:  152:          }
        -:  153:        }
        -:  154:      }
        -:  155:      else
        -:  156:      {
    #####:  157:        if (empty_cpointer_p == NULL)
        -:  158:        {
    #####:  159:          empty_cpointer_p = symbol_list_p->values + i;
        -:  160:        }
        -:  161:      }
        -:  162:    }
        -:  163:
    #####:  164:    symbol_list_cp = symbol_list_p->next_cp;
        -:  165:  }
        -:  166:
    #####:  167:  if (!is_for)
        -:  168:  {
    #####:  169:    return ECMA_VALUE_UNDEFINED;
        -:  170:  }
        -:  171:
        -:  172:  /* There was no matching, sp a new symbol should be added the the global symbol list. The symbol creation requires
        -:  173:     an extra reference to the descriptor string, but this reference has already been added. */
    #####:  174:  ecma_string_t *new_symbol_p = ecma_new_symbol_from_descriptor_string (value_to_find);
        -:  175:
        -:  176:  jmem_cpointer_t result;
    #####:  177:  JMEM_CP_SET_NON_NULL_POINTER (result, new_symbol_p);
        -:  178:
    #####:  179:  if (empty_cpointer_p != NULL)
        -:  180:  {
    #####:  181:    *empty_cpointer_p = result;
    #####:  182:    return ecma_copy_value (ecma_make_symbol_value (new_symbol_p));
        -:  183:  }
        -:  184:
        -:  185:  ecma_lit_storage_item_t *new_item_p;
    #####:  186:  new_item_p = (ecma_lit_storage_item_t *) jmem_pools_alloc (sizeof (ecma_lit_storage_item_t));
        -:  187:
    #####:  188:  new_item_p->values[0] = result;
    #####:  189:  for (int i = 1; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)
        -:  190:  {
    #####:  191:    new_item_p->values[i] = JMEM_CP_NULL;
        -:  192:  }
        -:  193:
    #####:  194:  new_item_p->next_cp = JERRY_CONTEXT (symbol_list_first_cp);
    #####:  195:  JMEM_CP_SET_NON_NULL_POINTER (JERRY_CONTEXT (symbol_list_first_cp), new_item_p);
        -:  196:
    #####:  197:  return ecma_copy_value (ecma_make_symbol_value (new_symbol_p));
        -:  198:} /* ecma_builtin_symbol_for_helper */
        -:  199:
        -:  200:/**
        -:  201: * The Symbol object's 'for' routine
        -:  202: *
        -:  203: * See also:
        -:  204: *          ECMA-262 v6, 19.4.2.1
        -:  205: *
        -:  206: * @return ecma value
        -:  207: *         Returned value must be freed with ecma_free_value.
        -:  208: */
        -:  209:static ecma_value_t
    #####:  210:ecma_builtin_symbol_for (ecma_value_t this_arg, /**< this argument */
        -:  211:                         ecma_value_t key) /**< key string */
        -:  212:{
        -:  213:  JERRY_UNUSED (this_arg);
    #####:  214:  ecma_string_t *string_desc_p = ecma_op_to_string (key);
        -:  215:
        -:  216:  /* 1. */
    #####:  217:  if (JERRY_UNLIKELY (string_desc_p == NULL))
        -:  218:  {
        -:  219:    /* 2. */
    #####:  220:    return ECMA_VALUE_ERROR;
        -:  221:  }
        -:  222:
    #####:  223:  return ecma_builtin_symbol_for_helper (ecma_make_string_value (string_desc_p));
        -:  224:} /* ecma_builtin_symbol_for */
        -:  225:
        -:  226:/**
        -:  227: * The Symbol object's 'keyFor' routine
        -:  228: *
        -:  229: * See also:
        -:  230: *          ECMA-262 v6, 19.4.2.
        -:  231: *
        -:  232: * @return ecma value
        -:  233: *         Returned value must be freed with ecma_free_value.
        -:  234: */
        -:  235:static ecma_value_t
    #####:  236:ecma_builtin_symbol_key_for (ecma_value_t this_arg, /**< this argument */
        -:  237:                             ecma_value_t symbol) /**< symbol */
        -:  238:{
        -:  239:  JERRY_UNUSED (this_arg);
        -:  240:
        -:  241:  /* 1. */
    #####:  242:  if (!ecma_is_value_symbol (symbol))
        -:  243:  {
    #####:  244:    return ecma_raise_type_error (ECMA_ERR_THE_GIVEN_ARGUMENT_IS_NOT_A_SYMBOL);
        -:  245:  }
        -:  246:
        -:  247:  /* 2-4. */
    #####:  248:  return ecma_builtin_symbol_for_helper (symbol);
        -:  249:} /* ecma_builtin_symbol_key_for */
        -:  250:
        -:  251:/**
        -:  252: * @}
        -:  253: * @}
        -:  254: * @}
        -:  255: */
        -:  256:
        -:  257:#endif /* JERRY_ESNEXT */
