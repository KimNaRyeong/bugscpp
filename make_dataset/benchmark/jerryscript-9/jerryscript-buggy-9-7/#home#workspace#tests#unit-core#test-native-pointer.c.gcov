        -:    0:Source:/home/workspace/tests/unit-core/test-native-pointer.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:static int global_int = 4;
        -:   21:static void *global_p = (void *) &global_int;
        -:   22:static int global_counter = 0;
        -:   23:
        -:   24:static void
    #####:   25:native_free_callback (void *native_p, /**< native pointer */
        -:   26:                      jerry_object_native_info_t *info_p) /**< native info */
        -:   27:{
        -:   28:  (void) native_p;
    #####:   29:  TEST_ASSERT (info_p->free_cb == native_free_callback);
    #####:   30:  global_counter++;
    #####:   31:} /* native_free_callback */
        -:   32:
        -:   33:static const jerry_object_native_info_t native_info_1 = {
        -:   34:  .free_cb = native_free_callback,
        -:   35:  .number_of_references = 0,
        -:   36:  .offset_of_references = 0,
        -:   37:};
        -:   38:
        -:   39:static const jerry_object_native_info_t native_info_2 = {
        -:   40:  .free_cb = NULL,
        -:   41:  .number_of_references = 0,
        -:   42:  .offset_of_references = 0,
        -:   43:};
        -:   44:
        -:   45:static const jerry_object_native_info_t native_info_3 = {
        -:   46:  .free_cb = NULL,
        -:   47:  .number_of_references = 0,
        -:   48:  .offset_of_references = 0,
        -:   49:};
        -:   50:
        -:   51:typedef struct
        -:   52:{
        -:   53:  uint32_t check_before;
        -:   54:  jerry_value_t a;
        -:   55:  jerry_value_t b;
        -:   56:  jerry_value_t c;
        -:   57:  uint32_t check_after;
        -:   58:} test_references_t;
        -:   59:
        -:   60:static test_references_t test_references1;
        -:   61:static test_references_t test_references2;
        -:   62:static test_references_t test_references3;
        -:   63:static test_references_t test_references4;
        -:   64:static int call_count = 0;
        -:   65:
        -:   66:static void
    #####:   67:native_references_free_callback (void *native_p, /**< native pointer */
        -:   68:                                 jerry_object_native_info_t *info_p) /**< native info */
        -:   69:{
    #####:   70:  test_references_t *refs_p = (test_references_t *) native_p;
        -:   71:
    #####:   72:  TEST_ASSERT ((refs_p == &test_references1 && test_references1.check_before == 0x12345678)
        -:   73:               || (refs_p == &test_references2 && test_references2.check_before == 0x87654321)
        -:   74:               || (refs_p == &test_references3 && test_references3.check_before == 0x12344321));
    #####:   75:  TEST_ASSERT (refs_p->check_before == refs_p->check_after);
        -:   76:
    #####:   77:  uint32_t check = refs_p->check_before;
        -:   78:
    #####:   79:  jerry_native_ptr_free (native_p, info_p);
        -:   80:
    #####:   81:  TEST_ASSERT (jerry_value_is_undefined (refs_p->a));
    #####:   82:  TEST_ASSERT (jerry_value_is_undefined (refs_p->b));
    #####:   83:  TEST_ASSERT (jerry_value_is_undefined (refs_p->c));
    #####:   84:  TEST_ASSERT (refs_p->check_before == check);
    #####:   85:  TEST_ASSERT (refs_p->check_after == check);
        -:   86:
    #####:   87:  call_count++;
    #####:   88:} /* native_references_free_callback */
        -:   89:
        -:   90:static const jerry_object_native_info_t native_info_4 = {
        -:   91:  .free_cb = native_references_free_callback,
        -:   92:  .number_of_references = 3,
        -:   93:  .offset_of_references = (uint16_t) offsetof (test_references_t, a),
        -:   94:};
        -:   95:
        -:   96:static void
    #####:   97:init_references (test_references_t *refs_p, /**< native pointer */
        -:   98:                 uint32_t check) /**< value for memory check */
        -:   99:{
        -:  100:  /* Memory garbage */
    #####:  101:  refs_p->check_before = check;
    #####:  102:  refs_p->a = 1;
    #####:  103:  refs_p->b = 2;
    #####:  104:  refs_p->c = 3;
    #####:  105:  refs_p->check_after = check;
        -:  106:
    #####:  107:  jerry_native_ptr_init ((void *) refs_p, &native_info_4);
        -:  108:
    #####:  109:  TEST_ASSERT (jerry_value_is_undefined (refs_p->a));
    #####:  110:  TEST_ASSERT (jerry_value_is_undefined (refs_p->b));
    #####:  111:  TEST_ASSERT (jerry_value_is_undefined (refs_p->c));
    #####:  112:  TEST_ASSERT (refs_p->check_before == check);
    #####:  113:  TEST_ASSERT (refs_p->check_after == check);
    #####:  114:} /* init_references */
        -:  115:
        -:  116:static void
    #####:  117:set_references (test_references_t *refs_p, /**< native pointer */
        -:  118:                jerry_value_t value1, /**< first value to be set */
        -:  119:                jerry_value_t value2, /**< second value to be set */
        -:  120:                jerry_value_t value3) /**< third value to be set */
        -:  121:{
    #####:  122:  jerry_native_ptr_set (&refs_p->a, value1);
    #####:  123:  jerry_native_ptr_set (&refs_p->b, value2);
    #####:  124:  jerry_native_ptr_set (&refs_p->c, value3);
        -:  125:
    #####:  126:  TEST_ASSERT (jerry_value_is_object (value1) ? jerry_value_is_object (refs_p->a) : jerry_value_is_string (refs_p->a));
    #####:  127:  TEST_ASSERT (jerry_value_is_object (value2) ? jerry_value_is_object (refs_p->b) : jerry_value_is_string (refs_p->b));
    #####:  128:  TEST_ASSERT (jerry_value_is_object (value3) ? jerry_value_is_object (refs_p->c) : jerry_value_is_string (refs_p->c));
    #####:  129:} /* set_references */
        -:  130:
        -:  131:static void
    #####:  132:check_native_info (jerry_value_t object_value, /**< object value */
        -:  133:                   const jerry_object_native_info_t *native_info_p, /**< native info */
        -:  134:                   void *expected_pointer_p) /**< expected pointer */
        -:  135:{
    #####:  136:  TEST_ASSERT (jerry_object_has_native_ptr (object_value, native_info_p));
    #####:  137:  void *native_pointer_p = jerry_object_get_native_ptr (object_value, native_info_p);
    #####:  138:  TEST_ASSERT (native_pointer_p == expected_pointer_p);
    #####:  139:} /* check_native_info */
        -:  140:
        -:  141:int
    #####:  142:main (void)
        -:  143:{
    #####:  144:  TEST_INIT ();
    #####:  145:  jerry_init (JERRY_INIT_EMPTY);
        -:  146:
    #####:  147:  jerry_value_t object_value = jerry_object ();
        -:  148:
    #####:  149:  jerry_object_set_native_ptr (object_value, &native_info_1, global_p);
    #####:  150:  jerry_object_set_native_ptr (object_value, &native_info_2, NULL);
        -:  151:
    #####:  152:  check_native_info (object_value, &native_info_1, global_p);
    #####:  153:  check_native_info (object_value, &native_info_2, NULL);
        -:  154:
    #####:  155:  jerry_value_free (object_value);
        -:  156:
    #####:  157:  jerry_heap_gc (JERRY_GC_PRESSURE_HIGH);
    #####:  158:  TEST_ASSERT (global_counter == 1);
    #####:  159:  global_counter = 0;
        -:  160:
    #####:  161:  object_value = jerry_object ();
        -:  162:
    #####:  163:  jerry_object_set_native_ptr (object_value, &native_info_1, global_p);
    #####:  164:  jerry_object_set_native_ptr (object_value, &native_info_2, NULL);
        -:  165:
    #####:  166:  TEST_ASSERT (jerry_object_delete_native_ptr (object_value, &native_info_1));
        -:  167:
    #####:  168:  TEST_ASSERT (!jerry_object_has_native_ptr (object_value, &native_info_1));
    #####:  169:  check_native_info (object_value, &native_info_2, NULL);
        -:  170:
    #####:  171:  TEST_ASSERT (!jerry_object_delete_native_ptr (object_value, &native_info_1));
        -:  172:
    #####:  173:  TEST_ASSERT (!jerry_object_has_native_ptr (object_value, &native_info_1));
    #####:  174:  check_native_info (object_value, &native_info_2, NULL);
        -:  175:
    #####:  176:  TEST_ASSERT (jerry_object_delete_native_ptr (object_value, &native_info_2));
        -:  177:
    #####:  178:  TEST_ASSERT (!jerry_object_has_native_ptr (object_value, &native_info_1));
    #####:  179:  TEST_ASSERT (!jerry_object_has_native_ptr (object_value, &native_info_2));
        -:  180:
    #####:  181:  jerry_object_set_native_ptr (object_value, &native_info_1, NULL);
        -:  182:
    #####:  183:  check_native_info (object_value, &native_info_1, NULL);
    #####:  184:  TEST_ASSERT (!jerry_object_has_native_ptr (object_value, &native_info_2));
        -:  185:
    #####:  186:  jerry_object_set_native_ptr (object_value, &native_info_2, global_p);
        -:  187:
    #####:  188:  check_native_info (object_value, &native_info_1, NULL);
    #####:  189:  check_native_info (object_value, &native_info_2, global_p);
        -:  190:
    #####:  191:  jerry_object_set_native_ptr (object_value, &native_info_1, global_p);
        -:  192:
    #####:  193:  check_native_info (object_value, &native_info_1, global_p);
    #####:  194:  check_native_info (object_value, &native_info_2, global_p);
        -:  195:
    #####:  196:  TEST_ASSERT (jerry_object_delete_native_ptr (object_value, &native_info_1));
    #####:  197:  TEST_ASSERT (jerry_object_delete_native_ptr (object_value, &native_info_2));
        -:  198:
    #####:  199:  TEST_ASSERT (!jerry_object_has_native_ptr (object_value, &native_info_1));
    #####:  200:  TEST_ASSERT (!jerry_object_has_native_ptr (object_value, &native_info_2));
        -:  201:
    #####:  202:  jerry_object_set_native_ptr (object_value, &native_info_1, global_p);
    #####:  203:  jerry_object_set_native_ptr (object_value, &native_info_2, NULL);
    #####:  204:  jerry_object_set_native_ptr (object_value, &native_info_3, global_p);
        -:  205:
    #####:  206:  check_native_info (object_value, &native_info_1, global_p);
    #####:  207:  check_native_info (object_value, &native_info_2, NULL);
    #####:  208:  check_native_info (object_value, &native_info_3, global_p);
        -:  209:
    #####:  210:  TEST_ASSERT (jerry_object_delete_native_ptr (object_value, &native_info_1));
    #####:  211:  TEST_ASSERT (jerry_object_delete_native_ptr (object_value, &native_info_2));
    #####:  212:  TEST_ASSERT (jerry_object_delete_native_ptr (object_value, &native_info_3));
        -:  213:
    #####:  214:  TEST_ASSERT (!jerry_object_has_native_ptr (object_value, &native_info_1));
    #####:  215:  TEST_ASSERT (!jerry_object_has_native_ptr (object_value, &native_info_2));
    #####:  216:  TEST_ASSERT (!jerry_object_has_native_ptr (object_value, &native_info_3));
        -:  217:
    #####:  218:  jerry_object_set_native_ptr (object_value, &native_info_1, NULL);
    #####:  219:  jerry_object_set_native_ptr (object_value, &native_info_2, global_p);
    #####:  220:  jerry_object_set_native_ptr (object_value, &native_info_3, NULL);
        -:  221:
    #####:  222:  check_native_info (object_value, &native_info_1, NULL);
    #####:  223:  check_native_info (object_value, &native_info_2, global_p);
    #####:  224:  check_native_info (object_value, &native_info_3, NULL);
        -:  225:
        -:  226:  /* Reversed delete order. */
    #####:  227:  TEST_ASSERT (jerry_object_delete_native_ptr (object_value, &native_info_3));
    #####:  228:  TEST_ASSERT (jerry_object_delete_native_ptr (object_value, &native_info_2));
    #####:  229:  TEST_ASSERT (jerry_object_delete_native_ptr (object_value, &native_info_1));
        -:  230:
    #####:  231:  TEST_ASSERT (!jerry_object_has_native_ptr (object_value, &native_info_1));
    #####:  232:  TEST_ASSERT (!jerry_object_has_native_ptr (object_value, &native_info_2));
    #####:  233:  TEST_ASSERT (!jerry_object_has_native_ptr (object_value, &native_info_3));
        -:  234:
        -:  235:  /* Test value references */
    #####:  236:  jerry_value_t string1_value = jerry_string_sz ("String1");
    #####:  237:  jerry_value_t string2_value = jerry_string_sz ("String2");
        -:  238:
    #####:  239:  jerry_value_t object1_value = jerry_object ();
    #####:  240:  jerry_value_t object2_value = jerry_object ();
        -:  241:
    #####:  242:  init_references (&test_references1, 0x12345678);
    #####:  243:  init_references (&test_references2, 0x87654321);
        -:  244:
    #####:  245:  jerry_object_set_native_ptr (object1_value, &native_info_4, (void *) &test_references1);
    #####:  246:  jerry_object_set_native_ptr (object2_value, &native_info_4, (void *) &test_references2);
        -:  247:
        -:  248:  /* Assign values (cross reference between object1 and object2). */
    #####:  249:  set_references (&test_references1, string1_value, object2_value, string2_value);
    #####:  250:  set_references (&test_references2, string2_value, object1_value, string1_value);
        -:  251:
    #####:  252:  jerry_heap_gc (JERRY_GC_PRESSURE_HIGH);
        -:  253:
        -:  254:  /* Reassign values. */
    #####:  255:  set_references (&test_references1, object2_value, string2_value, string1_value);
    #####:  256:  set_references (&test_references2, object1_value, string1_value, string2_value);
        -:  257:
    #####:  258:  jerry_heap_gc (JERRY_GC_PRESSURE_HIGH);
        -:  259:
    #####:  260:  jerry_value_free (object1_value);
    #####:  261:  jerry_value_free (object2_value);
        -:  262:
    #####:  263:  object1_value = jerry_object ();
    #####:  264:  object2_value = jerry_object ();
        -:  265:
    #####:  266:  init_references (&test_references3, 0x12344321);
        -:  267:
        -:  268:  /* Assign the same native pointer to multiple objects. */
    #####:  269:  jerry_object_set_native_ptr (object1_value, &native_info_4, (void *) &test_references3);
    #####:  270:  jerry_object_set_native_ptr (object2_value, &native_info_4, (void *) &test_references3);
        -:  271:
    #####:  272:  set_references (&test_references3, object1_value, object2_value, string1_value);
        -:  273:
    #####:  274:  jerry_heap_gc (JERRY_GC_PRESSURE_HIGH);
        -:  275:
    #####:  276:  init_references (&test_references4, 0x87655678);
        -:  277:
        -:  278:  /* Re-assign reference */
    #####:  279:  jerry_object_set_native_ptr (object1_value, &native_info_4, (void *) &test_references4);
        -:  280:
    #####:  281:  set_references (&test_references4, string1_value, string2_value, string1_value);
        -:  282:
    #####:  283:  jerry_object_set_native_ptr (object1_value, &native_info_4, NULL);
        -:  284:
    #####:  285:  jerry_native_ptr_free ((void *) &test_references4, &native_info_4);
        -:  286:
        -:  287:  /* Calling jerry_native_ptr_init with test_references4 is optional here. */
        -:  288:
    #####:  289:  jerry_object_set_native_ptr (object1_value, &native_info_4, (void *) &test_references4);
        -:  290:
    #####:  291:  set_references (&test_references4, string2_value, string1_value, string2_value);
        -:  292:
    #####:  293:  TEST_ASSERT (jerry_object_delete_native_ptr (object1_value, &native_info_4));
        -:  294:
    #####:  295:  jerry_native_ptr_free ((void *) &test_references4, &native_info_4);
        -:  296:
    #####:  297:  jerry_value_free (object1_value);
    #####:  298:  jerry_value_free (object2_value);
        -:  299:
        -:  300:  /* Delete references */
    #####:  301:  for (int i = 0; i < 3; i++)
        -:  302:  {
    #####:  303:    object1_value = jerry_object ();
        -:  304:
    #####:  305:    jerry_object_set_native_ptr (object1_value, NULL, global_p);
    #####:  306:    jerry_object_set_native_ptr (object1_value, &native_info_4, (void *) &test_references4);
    #####:  307:    jerry_object_set_native_ptr (object1_value, &native_info_2, global_p);
    #####:  308:    set_references (&test_references4, string1_value, string2_value, object1_value);
        -:  309:
    #####:  310:    jerry_heap_gc (JERRY_GC_PRESSURE_HIGH);
        -:  311:
    #####:  312:    if (i == 1)
        -:  313:    {
    #####:  314:      TEST_ASSERT (jerry_object_delete_native_ptr (object1_value, NULL));
        -:  315:    }
    #####:  316:    else if (i == 2)
        -:  317:    {
    #####:  318:      TEST_ASSERT (jerry_object_delete_native_ptr (object1_value, &native_info_2));
        -:  319:    }
        -:  320:
    #####:  321:    TEST_ASSERT (jerry_object_delete_native_ptr (object1_value, &native_info_4));
    #####:  322:    jerry_native_ptr_free ((void *) &test_references4, &native_info_4);
    #####:  323:    jerry_value_free (object1_value);
        -:  324:  }
        -:  325:
    #####:  326:  jerry_value_free (string1_value);
    #####:  327:  jerry_value_free (string2_value);
        -:  328:
    #####:  329:  jerry_value_free (object_value);
        -:  330:
    #####:  331:  jerry_cleanup ();
        -:  332:
    #####:  333:  TEST_ASSERT (global_counter == 0);
    #####:  334:  TEST_ASSERT (call_count == 3);
        -:  335:  return 0;
        -:  336:} /* main */
