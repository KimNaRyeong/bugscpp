        -:    0:Source:/home/workspace/tests/unit-ext/module/jerry-module-test.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <string.h>
        -:   17:
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "jerryscript-ext/module.h"
        -:   21:#include "test-common.h"
        -:   22:
        -:   23:/* Load a module. */
        -:   24:const char eval_string1[] = "require ('my_custom_module');";
        -:   25:
        -:   26:/* Load a module using a different resolver. */
        -:   27:const char eval_string2[] = "require ('differently-handled-module');";
        -:   28:
        -:   29:/* Load a broken module using the built-in resolver. */
        -:   30:const char eval_string3[] = "(function() {"
        -:   31:                            "  var theError;"
        -:   32:                            "  try {"
        -:   33:                            "    require ('my_broken_module');"
        -:   34:                            "  } catch (anError) {"
        -:   35:                            "    theError = anError;"
        -:   36:                            "  }"
        -:   37:                            "  return (((theError.message === 'Module on_resolve () must not be NULL') &&"
        -:   38:                            "    (theError.moduleName === 'my_broken_module') &&"
        -:   39:                            "    (theError instanceof TypeError)) ? 1 : 0);"
        -:   40:                            "}) ();";
        -:   41:
        -:   42:/* Load a non-existent module. */
        -:   43:const char eval_string4[] = "(function() {"
        -:   44:                            "  var theError;"
        -:   45:                            "  try {"
        -:   46:                            "    require ('some_missing_module_xyzzy');"
        -:   47:                            "  } catch (anError) {"
        -:   48:                            "    theError = anError;"
        -:   49:                            "  }"
        -:   50:                            "  return (((theError.message === 'Module not found') &&"
        -:   51:                            "    (theError.moduleName === 'some_missing_module_xyzzy')) ? 1 : 0);"
        -:   52:                            "}) ();";
        -:   53:
        -:   54:/* Make sure the result of a module load is cached. */
        -:   55:const char eval_string5[] = "(function() {"
        -:   56:                            "  var x = require('cache-check');"
        -:   57:                            "  var y = require('cache-check');"
        -:   58:                            "  return x === y ? 1 : 0;"
        -:   59:                            "}) ();";
        -:   60:
        -:   61:/* Make sure the result of a module load is removed from the cache. */
        -:   62:const char eval_string6[] = "(function() {"
        -:   63:                            "  var x = require('cache-check');"
        -:   64:                            "  clear_require_cache('cache-check');"
        -:   65:                            "  var y = require('cache-check');"
        -:   66:                            "  return x !== y ? 1 : 0;"
        -:   67:                            "}) ();";
        -:   68:
        -:   69:/* Make sure the entire cache is cleared. */
        -:   70:const char eval_string7[] = "(function() {"
        -:   71:                            "  var x = require('cache-check');"
        -:   72:                            "  clear_require_cache(undefined);"
        -:   73:                            "  var y = require('cache-check');"
        -:   74:                            "  return x !== y ? 1 : 0;"
        -:   75:                            "}) ();";
        -:   76:
        -:   77:/*
        -:   78: * Define a resolver for a module named "differently-handled-module" to check that custom resolvers work.
        -:   79: */
        -:   80:static bool
    #####:   81:resolve_differently_handled_module (const jerry_value_t name, jerry_value_t *result)
    #####:   82:{
    #####:   83:  jerry_size_t name_size = jerry_string_size (name, JERRY_ENCODING_UTF8);
    #####:   84:  JERRY_VLA (jerry_char_t, name_string, name_size);
    #####:   85:  jerry_string_to_buffer (name, JERRY_ENCODING_UTF8, name_string, name_size);
        -:   86:
    #####:   87:  if (!strncmp ((char *) name_string, "differently-handled-module", name_size))
        -:   88:  {
    #####:   89:    (*result) = jerry_number (29);
    #####:   90:    return true;
        -:   91:  }
        -:   92:  return false;
        -:   93:} /* resolve_differently_handled_module */
        -:   94:
        -:   95:static jerryx_module_resolver_t differently_handled_module_resolver = { NULL, resolve_differently_handled_module };
        -:   96:
        -:   97:/*
        -:   98: * Define module "cache-check" via its own resolver as an empty object. Since objects are accessible only via references
        -:   99: * we can strictly compare the object returned on subsequent attempts at loading "cache-check" with the object returned
        -:  100: * on the first attempt and establish that the two are in fact the same object - which in turn shows that caching works.
        -:  101: */
        -:  102:static bool
    #####:  103:cache_check (const jerry_value_t name, jerry_value_t *result)
    #####:  104:{
    #####:  105:  jerry_size_t name_size = jerry_string_size (name, JERRY_ENCODING_UTF8);
    #####:  106:  JERRY_VLA (jerry_char_t, name_string, name_size);
    #####:  107:  jerry_string_to_buffer (name, JERRY_ENCODING_UTF8, name_string, name_size);
        -:  108:
    #####:  109:  if (!strncmp ((char *) name_string, "cache-check", name_size))
        -:  110:  {
    #####:  111:    (*result) = jerry_object ();
    #####:  112:    return true;
        -:  113:  }
        -:  114:  return false;
        -:  115:} /* cache_check */
        -:  116:
        -:  117:static jerryx_module_resolver_t cache_check_resolver = { NULL, cache_check };
        -:  118:
        -:  119:static const jerryx_module_resolver_t *resolvers[3] = { &jerryx_module_native_resolver,
        -:  120:                                                        &differently_handled_module_resolver,
        -:  121:                                                        &cache_check_resolver };
        -:  122:
        -:  123:static jerry_value_t
    #####:  124:handle_clear_require_cache (const jerry_call_info_t *call_info_p,
        -:  125:                            const jerry_value_t args_p[],
        -:  126:                            const jerry_length_t args_count)
        -:  127:{
        -:  128:  (void) call_info_p;
        -:  129:  (void) args_count;
        -:  130:
    #####:  131:  TEST_ASSERT (args_count == 1);
    #####:  132:  jerryx_module_clear_cache (args_p[0], resolvers, 3);
        -:  133:
    #####:  134:  return 0;
        -:  135:} /* handle_clear_require_cache */
        -:  136:
        -:  137:static jerry_value_t
    #####:  138:handle_require (const jerry_call_info_t *call_info_p, const jerry_value_t args_p[], const jerry_length_t args_count)
        -:  139:{
        -:  140:  (void) call_info_p;
        -:  141:  (void) args_count;
        -:  142:
    #####:  143:  jerry_value_t return_value = 0;
        -:  144:
    #####:  145:  TEST_ASSERT (args_count == 1);
    #####:  146:  return_value = jerryx_module_resolve (args_p[0], resolvers, 3);
        -:  147:
    #####:  148:  return return_value;
        -:  149:} /* handle_require */
        -:  150:
        -:  151:static void
    #####:  152:assert_number (jerry_value_t js_value, double expected_result)
        -:  153:{
    #####:  154:  TEST_ASSERT (!jerry_value_is_exception (js_value));
    #####:  155:  TEST_ASSERT (jerry_value_as_number (js_value) == expected_result);
    #####:  156:} /* assert_number */
        -:  157:
        -:  158:static void
    #####:  159:eval_one (const char *the_string, double expected_result)
        -:  160:{
    #####:  161:  jerry_value_t js_eval_result =
    #####:  162:    jerry_eval ((const jerry_char_t *) the_string, strlen (the_string), JERRY_PARSE_STRICT_MODE);
    #####:  163:  assert_number (js_eval_result, expected_result);
    #####:  164:  jerry_value_free (js_eval_result);
    #####:  165:} /* eval_one */
        -:  166:
        -:  167:#ifndef ENABLE_INIT_FINI
        -:  168:extern void my_broken_module_register (void);
        -:  169:extern void my_custom_module_register (void);
        -:  170:#endif /* !ENABLE_INIT_FINI */
        -:  171:
        -:  172:int
    #####:  173:main (int argc, char **argv)
        -:  174:{
        -:  175:  (void) argc;
        -:  176:  (void) argv;
    #####:  177:  jerry_value_t js_global = 0, js_function = 0, js_property_name = 0;
        -:  178:  jerry_value_t res;
        -:  179:
        -:  180:#ifndef ENABLE_INIT_FINI
    #####:  181:  my_broken_module_register ();
    #####:  182:  my_custom_module_register ();
        -:  183:#endif /* !ENABLE_INIT_FINI */
        -:  184:
    #####:  185:  jerry_init (JERRY_INIT_EMPTY);
        -:  186:
    #####:  187:  js_global = jerry_current_realm ();
        -:  188:
    #####:  189:  js_function = jerry_function_external (handle_require);
    #####:  190:  js_property_name = jerry_string_sz ("require");
    #####:  191:  res = jerry_object_set (js_global, js_property_name, js_function);
    #####:  192:  TEST_ASSERT (!jerry_value_is_exception (res));
    #####:  193:  TEST_ASSERT (jerry_value_is_boolean (res) && jerry_value_is_true (res));
    #####:  194:  jerry_value_free (res);
    #####:  195:  jerry_value_free (js_property_name);
    #####:  196:  jerry_value_free (js_function);
        -:  197:
    #####:  198:  js_function = jerry_function_external (handle_clear_require_cache);
    #####:  199:  js_property_name = jerry_string_sz ("clear_require_cache");
    #####:  200:  res = jerry_object_set (js_global, js_property_name, js_function);
    #####:  201:  TEST_ASSERT (!jerry_value_is_exception (res));
    #####:  202:  TEST_ASSERT (jerry_value_is_boolean (res) && jerry_value_is_true (res));
    #####:  203:  jerry_value_free (res);
    #####:  204:  jerry_value_free (js_property_name);
    #####:  205:  jerry_value_free (js_function);
        -:  206:
    #####:  207:  jerry_value_free (js_global);
        -:  208:
    #####:  209:  eval_one (eval_string1, 42);
    #####:  210:  eval_one (eval_string2, 29);
    #####:  211:  eval_one (eval_string3, 1);
    #####:  212:  eval_one (eval_string4, 1);
    #####:  213:  eval_one (eval_string5, 1);
    #####:  214:  eval_one (eval_string6, 1);
    #####:  215:  eval_one (eval_string7, 1);
        -:  216:
    #####:  217:  jerry_cleanup ();
        -:  218:} /* main */
