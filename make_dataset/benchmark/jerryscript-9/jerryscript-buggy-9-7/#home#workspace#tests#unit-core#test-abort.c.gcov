        -:    0:Source:/home/workspace/tests/unit-core/test-abort.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "config.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static jerry_value_t
    #####:   22:callback_func (const jerry_call_info_t *call_info_p, const jerry_value_t args_p[], const jerry_length_t args_count)
        -:   23:{
        -:   24:  JERRY_UNUSED (call_info_p);
        -:   25:  JERRY_UNUSED (args_p);
        -:   26:  JERRY_UNUSED (args_count);
        -:   27:
    #####:   28:  jerry_value_t value = jerry_string_sz ("Abort run!");
    #####:   29:  value = jerry_throw_abort (value, true);
    #####:   30:  return value;
        -:   31:} /* callback_func */
        -:   32:
        -:   33:int
    #####:   34:main (void)
        -:   35:{
    #####:   36:  TEST_INIT ();
        -:   37:
    #####:   38:  jerry_init (JERRY_INIT_EMPTY);
        -:   39:
    #####:   40:  jerry_value_t global = jerry_current_realm ();
    #####:   41:  jerry_value_t callback_name = jerry_string_sz ("callback");
    #####:   42:  jerry_value_t func = jerry_function_external (callback_func);
    #####:   43:  jerry_value_t res = jerry_object_set (global, callback_name, func);
    #####:   44:  TEST_ASSERT (!jerry_value_is_exception (res));
        -:   45:
    #####:   46:  jerry_value_free (res);
    #####:   47:  jerry_value_free (func);
    #####:   48:  jerry_value_free (callback_name);
    #####:   49:  jerry_value_free (global);
        -:   50:
    #####:   51:  const jerry_char_t inf_loop_code_src1[] = TEST_STRING_LITERAL ("while(true) {\n"
        -:   52:                                                                 "  with ({}) {\n"
        -:   53:                                                                 "    try {\n"
        -:   54:                                                                 "      callback();\n"
        -:   55:                                                                 "    } catch (e) {\n"
        -:   56:                                                                 "    } finally {\n"
        -:   57:                                                                 "    }\n"
        -:   58:                                                                 "  }\n"
        -:   59:                                                                 "}");
        -:   60:
    #####:   61:  jerry_value_t parsed_code_val = jerry_parse (inf_loop_code_src1, sizeof (inf_loop_code_src1) - 1, NULL);
        -:   62:
    #####:   63:  TEST_ASSERT (!jerry_value_is_exception (parsed_code_val));
    #####:   64:  res = jerry_run (parsed_code_val);
        -:   65:
    #####:   66:  TEST_ASSERT (jerry_value_is_abort (res));
        -:   67:
    #####:   68:  jerry_value_free (res);
    #####:   69:  jerry_value_free (parsed_code_val);
        -:   70:
    #####:   71:  const jerry_char_t inf_loop_code_src2[] = TEST_STRING_LITERAL ("function f() {"
        -:   72:                                                                 "  while(true) {\n"
        -:   73:                                                                 "    with ({}) {\n"
        -:   74:                                                                 "      try {\n"
        -:   75:                                                                 "        callback();\n"
        -:   76:                                                                 "      } catch (e) {\n"
        -:   77:                                                                 "      } finally {\n"
        -:   78:                                                                 "      }\n"
        -:   79:                                                                 "    }\n"
        -:   80:                                                                 "  }"
        -:   81:                                                                 "}\n"
        -:   82:                                                                 "function g() {\n"
        -:   83:                                                                 "  for (a in { x:5 })\n"
        -:   84:                                                                 "    f();\n"
        -:   85:                                                                 "}\n"
        -:   86:                                                                 "\n"
        -:   87:                                                                 "with({})\n"
        -:   88:                                                                 " f();\n");
        -:   89:
    #####:   90:  parsed_code_val = jerry_parse (inf_loop_code_src2, sizeof (inf_loop_code_src2) - 1, NULL);
        -:   91:
    #####:   92:  TEST_ASSERT (!jerry_value_is_exception (parsed_code_val));
    #####:   93:  res = jerry_run (parsed_code_val);
        -:   94:
    #####:   95:  TEST_ASSERT (jerry_value_is_abort (res));
        -:   96:
    #####:   97:  jerry_value_free (res);
    #####:   98:  jerry_value_free (parsed_code_val);
        -:   99:
        -:  100:  /* Test flag overwrites. */
    #####:  101:  jerry_value_t value = jerry_string_sz ("Error description");
    #####:  102:  TEST_ASSERT (!jerry_value_is_abort (value));
    #####:  103:  TEST_ASSERT (!jerry_value_is_exception (value));
        -:  104:
    #####:  105:  value = jerry_throw_abort (value, true);
    #####:  106:  TEST_ASSERT (jerry_value_is_abort (value));
    #####:  107:  TEST_ASSERT (jerry_value_is_exception (value));
        -:  108:
    #####:  109:  value = jerry_throw_value (value, true);
    #####:  110:  TEST_ASSERT (!jerry_value_is_abort (value));
    #####:  111:  TEST_ASSERT (jerry_value_is_exception (value));
        -:  112:
    #####:  113:  value = jerry_throw_abort (value, true);
    #####:  114:  TEST_ASSERT (jerry_value_is_abort (value));
    #####:  115:  TEST_ASSERT (jerry_value_is_exception (value));
        -:  116:
    #####:  117:  jerry_value_free (value);
        -:  118:
    #####:  119:  jerry_cleanup ();
        -:  120:  return 0;
        -:  121:} /* main */
