        -:    0:Source:/home/workspace/tests/unit-core/test-source-name.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "config.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static jerry_value_t
    #####:   22:source_name_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   23:                     const jerry_value_t args_p[], /**< argument list */
        -:   24:                     const jerry_length_t args_count) /**< argument count */
        -:   25:{
        -:   26:  (void) call_info_p;
        -:   27:
    #####:   28:  jerry_value_t undefined_value = jerry_undefined ();
    #####:   29:  jerry_value_t source_name = jerry_source_name (args_count > 0 ? args_p[0] : undefined_value);
    #####:   30:  jerry_value_free (undefined_value);
        -:   31:
    #####:   32:  return source_name;
        -:   33:} /* source_name_handler */
        -:   34:
        -:   35:int
    #####:   36:main (void)
        -:   37:{
    #####:   38:  TEST_INIT ();
        -:   39:
    #####:   40:  if (!jerry_feature_enabled (JERRY_FEATURE_LINE_INFO))
        -:   41:  {
    #####:   42:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Line info support is disabled!\n");
    #####:   43:    return 0;
        -:   44:  }
        -:   45:
    #####:   46:  jerry_init (JERRY_INIT_EMPTY);
        -:   47:
    #####:   48:  jerry_value_t global = jerry_current_realm ();
        -:   49:
        -:   50:  /* Register the "sourceName" method. */
        -:   51:  {
    #####:   52:    jerry_value_t func = jerry_function_external (source_name_handler);
    #####:   53:    jerry_value_t name = jerry_string_sz ("sourceName");
    #####:   54:    jerry_value_t result = jerry_object_set (global, name, func);
    #####:   55:    jerry_value_free (result);
    #####:   56:    jerry_value_free (name);
    #####:   57:    jerry_value_free (func);
        -:   58:  }
        -:   59:
    #####:   60:  jerry_value_free (global);
        -:   61:
        -:   62:  jerry_parse_options_t parse_options;
    #####:   63:  parse_options.options = JERRY_PARSE_HAS_SOURCE_NAME;
        -:   64:
    #####:   65:  const char *source_1 = ("function f1 () {\n"
        -:   66:                          "  if (sourceName() !== 'demo1.js') return false; \n"
        -:   67:                          "  if (sourceName(f1) !== 'demo1.js') return false; \n"
        -:   68:                          "  if (sourceName(5) !== '<anonymous>') return false; \n"
        -:   69:                          "  return f1; \n"
        -:   70:                          "} \n"
        -:   71:                          "f1();");
        -:   72:
    #####:   73:  parse_options.source_name = jerry_string_sz ("demo1.js");
        -:   74:
    #####:   75:  jerry_value_t program = jerry_parse ((const jerry_char_t *) source_1, strlen (source_1), &parse_options);
    #####:   76:  TEST_ASSERT (!jerry_value_is_exception (program));
        -:   77:
    #####:   78:  jerry_value_t run_result = jerry_run (program);
    #####:   79:  TEST_ASSERT (!jerry_value_is_exception (run_result));
    #####:   80:  TEST_ASSERT (jerry_value_is_object (run_result));
        -:   81:
    #####:   82:  jerry_value_t source_name_value = jerry_source_name (run_result);
    #####:   83:  jerry_value_t compare_result =
    #####:   84:    jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, source_name_value, parse_options.source_name);
    #####:   85:  TEST_ASSERT (jerry_value_is_true (compare_result));
        -:   86:
    #####:   87:  jerry_value_free (compare_result);
    #####:   88:  jerry_value_free (source_name_value);
    #####:   89:  jerry_value_free (parse_options.source_name);
        -:   90:
    #####:   91:  jerry_value_free (run_result);
    #####:   92:  jerry_value_free (program);
        -:   93:
    #####:   94:  const char *source_2 = ("function f2 () { \n"
        -:   95:                          "  if (sourceName() !== 'demo2.js') return false; \n"
        -:   96:                          "  if (sourceName(f2) !== 'demo2.js') return false; \n"
        -:   97:                          "  if (sourceName(f1) !== 'demo1.js') return false; \n"
        -:   98:                          "  if (sourceName(Object.prototype) !== '<anonymous>') return false; \n"
        -:   99:                          "  if (sourceName(Function) !== '<anonymous>') return false; \n"
        -:  100:                          "  return f2; \n"
        -:  101:                          "} \n"
        -:  102:                          "f2(); \n");
        -:  103:
    #####:  104:  parse_options.source_name = jerry_string_sz ("demo2.js");
        -:  105:
    #####:  106:  program = jerry_parse ((const jerry_char_t *) source_2, strlen (source_2), &parse_options);
    #####:  107:  TEST_ASSERT (!jerry_value_is_exception (program));
        -:  108:
    #####:  109:  run_result = jerry_run (program);
    #####:  110:  TEST_ASSERT (!jerry_value_is_exception (run_result));
    #####:  111:  TEST_ASSERT (jerry_value_is_object (run_result));
        -:  112:
    #####:  113:  source_name_value = jerry_source_name (run_result);
    #####:  114:  compare_result = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, source_name_value, parse_options.source_name);
    #####:  115:  TEST_ASSERT (jerry_value_is_true (compare_result));
        -:  116:
    #####:  117:  jerry_value_free (compare_result);
    #####:  118:  jerry_value_free (source_name_value);
    #####:  119:  jerry_value_free (parse_options.source_name);
        -:  120:
    #####:  121:  jerry_value_free (run_result);
    #####:  122:  jerry_value_free (program);
    #####:  123:  if (jerry_feature_enabled (JERRY_FEATURE_MODULE))
        -:  124:  {
    #####:  125:    jerry_value_t anon = jerry_string_sz ("<anonymous>");
    #####:  126:    const char *source_3 = "";
        -:  127:
    #####:  128:    parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_SOURCE_NAME;
    #####:  129:    parse_options.source_name = jerry_string_sz ("demo3.js");
        -:  130:
    #####:  131:    program = jerry_parse ((const jerry_char_t *) source_3, strlen (source_3), &parse_options);
    #####:  132:    TEST_ASSERT (!jerry_value_is_exception (program));
        -:  133:
    #####:  134:    source_name_value = jerry_source_name (program);
    #####:  135:    compare_result = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, source_name_value, parse_options.source_name);
    #####:  136:    TEST_ASSERT (jerry_value_is_true (compare_result));
        -:  137:
    #####:  138:    jerry_value_free (compare_result);
    #####:  139:    jerry_value_free (source_name_value);
        -:  140:
    #####:  141:    run_result = jerry_module_link (program, NULL, NULL);
    #####:  142:    TEST_ASSERT (!jerry_value_is_exception (run_result));
        -:  143:
    #####:  144:    source_name_value = jerry_source_name (run_result);
    #####:  145:    compare_result = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, source_name_value, anon);
    #####:  146:    TEST_ASSERT (jerry_value_is_true (compare_result));
        -:  147:
    #####:  148:    jerry_value_free (compare_result);
    #####:  149:    jerry_value_free (source_name_value);
    #####:  150:    jerry_value_free (run_result);
        -:  151:
    #####:  152:    run_result = jerry_module_evaluate (program);
    #####:  153:    TEST_ASSERT (!jerry_value_is_exception (run_result));
        -:  154:
    #####:  155:    source_name_value = jerry_source_name (run_result);
    #####:  156:    compare_result = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, source_name_value, anon);
    #####:  157:    TEST_ASSERT (jerry_value_is_true (compare_result));
        -:  158:
    #####:  159:    jerry_value_free (compare_result);
    #####:  160:    jerry_value_free (source_name_value);
    #####:  161:    jerry_value_free (run_result);
    #####:  162:    jerry_value_free (program);
    #####:  163:    jerry_value_free (parse_options.source_name);
        -:  164:  }
    #####:  165:  const char *source_4 = ("function f(){} \n"
        -:  166:                          "f.bind().bind();");
        -:  167:
    #####:  168:  parse_options.options = JERRY_PARSE_HAS_SOURCE_NAME;
    #####:  169:  parse_options.source_name = jerry_string_sz ("demo4.js");
        -:  170:
    #####:  171:  program = jerry_parse ((const jerry_char_t *) source_4, strlen (source_4), &parse_options);
    #####:  172:  TEST_ASSERT (!jerry_value_is_exception (program));
        -:  173:
    #####:  174:  run_result = jerry_run (program);
    #####:  175:  TEST_ASSERT (!jerry_value_is_exception (run_result));
    #####:  176:  TEST_ASSERT (jerry_value_is_object (run_result));
        -:  177:
    #####:  178:  source_name_value = jerry_source_name (run_result);
    #####:  179:  compare_result = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, source_name_value, parse_options.source_name);
    #####:  180:  TEST_ASSERT (jerry_value_is_true (compare_result));
    #####:  181:  jerry_value_free (compare_result);
        -:  182:
    #####:  183:  jerry_value_free (source_name_value);
    #####:  184:  jerry_value_free (parse_options.source_name);
    #####:  185:  jerry_value_free (run_result);
    #####:  186:  jerry_value_free (program);
        -:  187:
    #####:  188:  const char *source_5 = "";
        -:  189:
    #####:  190:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE | JERRY_PARSE_HAS_SOURCE_NAME;
    #####:  191:  parse_options.user_value = jerry_object ();
    #####:  192:  parse_options.source_name = jerry_string_sz ("demo5.js");
        -:  193:
    #####:  194:  program = jerry_parse ((const jerry_char_t *) source_5, strlen (source_5), &parse_options);
    #####:  195:  TEST_ASSERT (!jerry_value_is_exception (program));
        -:  196:
    #####:  197:  source_name_value = jerry_source_name (program);
    #####:  198:  compare_result = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, source_name_value, parse_options.source_name);
    #####:  199:  TEST_ASSERT (jerry_value_is_true (compare_result));
        -:  200:
    #####:  201:  jerry_value_free (source_name_value);
    #####:  202:  jerry_value_free (compare_result);
    #####:  203:  jerry_value_free (parse_options.user_value);
    #####:  204:  jerry_value_free (parse_options.source_name);
    #####:  205:  jerry_value_free (program);
        -:  206:
    #####:  207:  const char *source_6 = "(class {})";
        -:  208:
    #####:  209:  parse_options.options = JERRY_PARSE_HAS_SOURCE_NAME;
    #####:  210:  parse_options.source_name = jerry_string_sz ("demo6.js");
        -:  211:
    #####:  212:  program = jerry_parse ((const jerry_char_t *) source_6, strlen (source_6), &parse_options);
    #####:  213:  if (!jerry_value_is_exception (program))
        -:  214:  {
    #####:  215:    source_name_value = jerry_source_name (program);
    #####:  216:    compare_result = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, source_name_value, parse_options.source_name);
    #####:  217:    TEST_ASSERT (jerry_value_is_true (compare_result));
        -:  218:
    #####:  219:    jerry_value_free (source_name_value);
    #####:  220:    jerry_value_free (compare_result);
        -:  221:  }
        -:  222:
    #####:  223:  jerry_value_free (parse_options.source_name);
    #####:  224:  jerry_value_free (program);
        -:  225:
    #####:  226:  jerry_cleanup ();
        -:  227:
    #####:  228:  return 0;
        -:  229:} /* main */
