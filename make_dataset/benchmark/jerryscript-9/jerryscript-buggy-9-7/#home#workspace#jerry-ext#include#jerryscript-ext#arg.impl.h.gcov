        -:    0:Source:/home/workspace/jerry-ext/include/jerryscript-ext/arg.impl.h
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#ifndef JERRYX_ARG_IMPL_H
        -:   17:#define JERRYX_ARG_IMPL_H
        -:   18:
        -:   19:/* transform functions for each type. */
        -:   20:
        -:   21:#define JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL(type)                                                               \
        -:   22:  jerry_value_t jerryx_arg_transform_##type (jerryx_arg_js_iterator_t *js_arg_iter_p, const jerryx_arg_t *c_arg_p); \
        -:   23:  jerry_value_t jerryx_arg_transform_##type##_optional (jerryx_arg_js_iterator_t *js_arg_iter_p,                    \
        -:   24:                                                        const jerryx_arg_t *c_arg_p);
        -:   25:
        -:   26:#define JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL_AND_STRICT(type) \
        -:   27:  JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL (type)                 \
        -:   28:  JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL (type##_strict)
        -:   29:
        -:   30:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL_AND_STRICT (uint8)
        -:   31:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL_AND_STRICT (int8)
        -:   32:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL_AND_STRICT (uint16)
        -:   33:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL_AND_STRICT (int16)
        -:   34:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL_AND_STRICT (uint32)
        -:   35:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL_AND_STRICT (int32)
        -:   36:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL_AND_STRICT (number)
        -:   37:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL_AND_STRICT (string)
        -:   38:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL_AND_STRICT (utf8_string)
        -:   39:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL_AND_STRICT (boolean)
        -:   40:
        -:   41:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL (function)
        -:   42:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL (native_pointer)
        -:   43:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL (object_props)
        -:   44:JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL (array_items)
        -:   45:
        -:   46:jerry_value_t jerryx_arg_transform_ignore (jerryx_arg_js_iterator_t *js_arg_iter_p, const jerryx_arg_t *c_arg_p);
        -:   47:
        -:   48:#undef JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL
        -:   49:#undef JERRYX_ARG_TRANSFORM_FUNC_WITH_OPTIONAL_AND_STRICT
        -:   50:
        -:   51:/**
        -:   52: * The structure indicates the options used to transform integer argument.
        -:   53: * It will be passed into jerryx_arg_t's  extra_info field.
        -:   54: */
        -:   55:typedef struct
        -:   56:{
        -:   57:  uint8_t round; /**< rounding policy */
        -:   58:  uint8_t clamp; /**< clamping policy */
        -:   59:} jerryx_arg_int_option_t;
        -:   60:
        -:   61:/**
        -:   62: * The macro used to generate jerryx_arg_xxx for int type.
        -:   63: */
        -:   64:#define JERRYX_ARG_INT(type)                                                                  \
        -:   65:  static inline jerryx_arg_t jerryx_arg_##type (type##_t *dest,                               \
        -:   66:                                                jerryx_arg_round_t round_flag,                \
        -:   67:                                                jerryx_arg_clamp_t clamp_flag,                \
        -:   68:                                                jerryx_arg_coerce_t coerce_flag,              \
        -:   69:                                                jerryx_arg_optional_t opt_flag)               \
        -:   70:  {                                                                                           \
        -:   71:    jerryx_arg_transform_func_t func;                                                         \
        -:   72:    if (coerce_flag == JERRYX_ARG_NO_COERCE)                                                  \
        -:   73:    {                                                                                         \
        -:   74:      if (opt_flag == JERRYX_ARG_OPTIONAL)                                                    \
        -:   75:      {                                                                                       \
        -:   76:        func = jerryx_arg_transform_##type##_strict_optional;                                 \
        -:   77:      }                                                                                       \
        -:   78:      else                                                                                    \
        -:   79:      {                                                                                       \
        -:   80:        func = jerryx_arg_transform_##type##_strict;                                          \
        -:   81:      }                                                                                       \
        -:   82:    }                                                                                         \
        -:   83:    else                                                                                      \
        -:   84:    {                                                                                         \
        -:   85:      if (opt_flag == JERRYX_ARG_OPTIONAL)                                                    \
        -:   86:      {                                                                                       \
        -:   87:        func = jerryx_arg_transform_##type##_optional;                                        \
        -:   88:      }                                                                                       \
        -:   89:      else                                                                                    \
        -:   90:      {                                                                                       \
        -:   91:        func = jerryx_arg_transform_##type;                                                   \
        -:   92:      }                                                                                       \
        -:   93:    }                                                                                         \
        -:   94:    union                                                                                     \
        -:   95:    {                                                                                         \
        -:   96:      jerryx_arg_int_option_t int_option;                                                     \
        -:   97:      uintptr_t extra_info;                                                                   \
        -:   98:    } u = { .int_option = { .round = (uint8_t) round_flag, .clamp = (uint8_t) clamp_flag } }; \
        -:   99:    return (jerryx_arg_t){ .func = func, .dest = (void *) dest, .extra_info = u.extra_info }; \
        -:  100:  }
        -:  101:
    #####:  102:JERRYX_ARG_INT (uint8)
    #####:  103:JERRYX_ARG_INT (int8)
        -:  104:JERRYX_ARG_INT (uint16)
        -:  105:JERRYX_ARG_INT (int16)
    #####:  106:JERRYX_ARG_INT (uint32)
    #####:  107:JERRYX_ARG_INT (int32)
        -:  108:
        -:  109:#undef JERRYX_ARG_INT
        -:  110:
        -:  111:/**
        -:  112: * Create a validation/transformation step (`jerryx_arg_t`) that expects to
        -:  113: * consume one `number` JS argument and stores it into a C `double`.
        -:  114: *
        -:  115: * @return a jerryx_arg_t instance.
        -:  116: */
        -:  117:static inline jerryx_arg_t
        -:  118:jerryx_arg_number (double *dest, /**< pointer to the double where the result should be stored */
        -:  119:                   jerryx_arg_coerce_t coerce_flag, /**< whether type coercion is allowed */
        -:  120:                   jerryx_arg_optional_t opt_flag) /**< whether the argument is optional */
        -:  121:{
        -:  122:  jerryx_arg_transform_func_t func;
        -:  123:
    #####:  124:  if (coerce_flag == JERRYX_ARG_NO_COERCE)
        -:  125:  {
        -:  126:    if (opt_flag == JERRYX_ARG_OPTIONAL)
        -:  127:    {
        -:  128:      func = jerryx_arg_transform_number_strict_optional;
        -:  129:    }
        -:  130:    else
        -:  131:    {
    #####:  132:      func = jerryx_arg_transform_number_strict;
        -:  133:    }
        -:  134:  }
        -:  135:  else
        -:  136:  {
        -:  137:    if (opt_flag == JERRYX_ARG_OPTIONAL)
        -:  138:    {
        -:  139:      func = jerryx_arg_transform_number_optional;
        -:  140:    }
        -:  141:    else
        -:  142:    {
    #####:  143:      func = jerryx_arg_transform_number;
        -:  144:    }
        -:  145:  }
        -:  146:
    #####:  147:  return (jerryx_arg_t){ .func = func, .dest = (void *) dest };
        -:  148:} /* jerryx_arg_number */
        -:  149:
        -:  150:/**
        -:  151: * Create a validation/transformation step (`jerryx_arg_t`) that expects to
        -:  152: * consume one `boolean` JS argument and stores it into a C `bool`.
        -:  153: *
        -:  154: * @return a jerryx_arg_t instance.
        -:  155: */
        -:  156:static inline jerryx_arg_t
    #####:  157:jerryx_arg_boolean (bool *dest, /**< points to the native bool */
        -:  158:                    jerryx_arg_coerce_t coerce_flag, /**< whether type coercion is allowed */
        -:  159:                    jerryx_arg_optional_t opt_flag) /**< whether the argument is optional */
        -:  160:{
        -:  161:  jerryx_arg_transform_func_t func;
        -:  162:
    #####:  163:  if (coerce_flag == JERRYX_ARG_NO_COERCE)
        -:  164:  {
    #####:  165:    if (opt_flag == JERRYX_ARG_OPTIONAL)
        -:  166:    {
        -:  167:      func = jerryx_arg_transform_boolean_strict_optional;
        -:  168:    }
        -:  169:    else
        -:  170:    {
    #####:  171:      func = jerryx_arg_transform_boolean_strict;
        -:  172:    }
        -:  173:  }
        -:  174:  else
        -:  175:  {
    #####:  176:    if (opt_flag == JERRYX_ARG_OPTIONAL)
        -:  177:    {
        -:  178:      func = jerryx_arg_transform_boolean_optional;
        -:  179:    }
        -:  180:    else
        -:  181:    {
    #####:  182:      func = jerryx_arg_transform_boolean;
        -:  183:    }
        -:  184:  }
        -:  185:
    #####:  186:  return (jerryx_arg_t){ .func = func, .dest = (void *) dest };
        -:  187:} /* jerryx_arg_boolean */
        -:  188:
        -:  189:/**
        -:  190: * Create a validation/transformation step (`jerryx_arg_t`) that expects to
        -:  191: * consume one `string` JS argument and stores it into a C `char` array.
        -:  192: *
        -:  193: * @return a jerryx_arg_t instance.
        -:  194: */
        -:  195:static inline jerryx_arg_t
        -:  196:jerryx_arg_string (char *dest, /**< pointer to the native char array where the result should be stored */
        -:  197:                   uint32_t size, /**< the size of native char array */
        -:  198:                   jerryx_arg_coerce_t coerce_flag, /**< whether type coercion is allowed */
        -:  199:                   jerryx_arg_optional_t opt_flag) /**< whether the argument is optional */
        -:  200:{
        -:  201:  jerryx_arg_transform_func_t func;
        -:  202:
        -:  203:  if (coerce_flag == JERRYX_ARG_NO_COERCE)
        -:  204:  {
        -:  205:    if (opt_flag == JERRYX_ARG_OPTIONAL)
        -:  206:    {
        -:  207:      func = jerryx_arg_transform_string_strict_optional;
        -:  208:    }
        -:  209:    else
        -:  210:    {
        -:  211:      func = jerryx_arg_transform_string_strict;
        -:  212:    }
        -:  213:  }
        -:  214:  else
        -:  215:  {
        -:  216:    if (opt_flag == JERRYX_ARG_OPTIONAL)
        -:  217:    {
        -:  218:      func = jerryx_arg_transform_string_optional;
        -:  219:    }
        -:  220:    else
        -:  221:    {
    #####:  222:      func = jerryx_arg_transform_string;
        -:  223:    }
        -:  224:  }
        -:  225:
    #####:  226:  return (jerryx_arg_t){ .func = func, .dest = (void *) dest, .extra_info = (uintptr_t) size };
        -:  227:} /* jerryx_arg_string */
        -:  228:
        -:  229:/**
        -:  230: * Create a validation/transformation step (`jerryx_arg_t`) that expects to
        -:  231: * consume one `string` JS argument and stores it into a C utf8 `char` array.
        -:  232: *
        -:  233: * @return a jerryx_arg_t instance.
        -:  234: */
        -:  235:static inline jerryx_arg_t
        -:  236:jerryx_arg_utf8_string (char *dest, /**< [out] pointer to the native char array where the result should be stored */
        -:  237:                        uint32_t size, /**< the size of native char array */
        -:  238:                        jerryx_arg_coerce_t coerce_flag, /**< whether type coercion is allowed */
        -:  239:                        jerryx_arg_optional_t opt_flag) /**< whether the argument is optional */
        -:  240:{
        -:  241:  jerryx_arg_transform_func_t func;
        -:  242:
        -:  243:  if (coerce_flag == JERRYX_ARG_NO_COERCE)
        -:  244:  {
        -:  245:    if (opt_flag == JERRYX_ARG_OPTIONAL)
        -:  246:    {
        -:  247:      func = jerryx_arg_transform_utf8_string_strict_optional;
        -:  248:    }
        -:  249:    else
        -:  250:    {
        -:  251:      func = jerryx_arg_transform_utf8_string_strict;
        -:  252:    }
        -:  253:  }
        -:  254:  else
        -:  255:  {
        -:  256:    if (opt_flag == JERRYX_ARG_OPTIONAL)
        -:  257:    {
        -:  258:      func = jerryx_arg_transform_utf8_string_optional;
        -:  259:    }
        -:  260:    else
        -:  261:    {
    #####:  262:      func = jerryx_arg_transform_utf8_string;
        -:  263:    }
        -:  264:  }
        -:  265:
    #####:  266:  return (jerryx_arg_t){ .func = func, .dest = (void *) dest, .extra_info = (uintptr_t) size };
        -:  267:} /* jerryx_arg_utf8_string */
        -:  268:
        -:  269:/**
        -:  270: * Create a validation/transformation step (`jerryx_arg_t`) that expects to
        -:  271: * consume one `function` JS argument and stores it into a C `jerry_value_t`.
        -:  272: *
        -:  273: * @return a jerryx_arg_t instance.
        -:  274: */
        -:  275:static inline jerryx_arg_t
        -:  276:jerryx_arg_function (jerry_value_t *dest, /**< pointer to the jerry_value_t where the result should be stored */
        -:  277:                     jerryx_arg_optional_t opt_flag) /**< whether the argument is optional */
        -:  278:{
        -:  279:  jerryx_arg_transform_func_t func;
        -:  280:
        -:  281:  if (opt_flag == JERRYX_ARG_OPTIONAL)
        -:  282:  {
        -:  283:    func = jerryx_arg_transform_function_optional;
        -:  284:  }
        -:  285:  else
        -:  286:  {
        -:  287:    func = jerryx_arg_transform_function;
        -:  288:  }
        -:  289:
    #####:  290:  return (jerryx_arg_t){ .func = func, .dest = (void *) dest };
        -:  291:} /* jerryx_arg_function */
        -:  292:
        -:  293:/**
        -:  294: * Create a validation/transformation step (`jerryx_arg_t`) that expects to
        -:  295: * consume one `object` JS argument that is 'backed' with a native pointer with
        -:  296: * a given type info. In case the native pointer info matches, the transform
        -:  297: * will succeed and the object's native pointer will be assigned to *dest.
        -:  298: *
        -:  299: * @return a jerryx_arg_t instance.
        -:  300: */
        -:  301:static inline jerryx_arg_t
        -:  302:jerryx_arg_native_pointer (void **dest, /**< pointer to where the resulting native pointer should be stored */
        -:  303:                           const jerry_object_native_info_t *info_p, /**< expected the type info */
        -:  304:                           jerryx_arg_optional_t opt_flag) /**< whether the argument is optional */
        -:  305:{
        -:  306:  jerryx_arg_transform_func_t func;
        -:  307:
        -:  308:  if (opt_flag == JERRYX_ARG_OPTIONAL)
        -:  309:  {
        -:  310:    func = jerryx_arg_transform_native_pointer_optional;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    func = jerryx_arg_transform_native_pointer;
        -:  315:  }
        -:  316:
    #####:  317:  return (jerryx_arg_t){ .func = func, .dest = (void *) dest, .extra_info = (uintptr_t) info_p };
        -:  318:} /* jerryx_arg_native_pointer */
        -:  319:
        -:  320:/**
        -:  321: * Create a jerryx_arg_t instance for ignored argument.
        -:  322: *
        -:  323: * @return a jerryx_arg_t instance.
        -:  324: */
        -:  325:static inline jerryx_arg_t
        -:  326:jerryx_arg_ignore (void)
        -:  327:{
    #####:  328:  return (jerryx_arg_t){ .func = jerryx_arg_transform_ignore };
        -:  329:} /* jerryx_arg_ignore */
        -:  330:
        -:  331:/**
        -:  332: * Create a jerryx_arg_t instance with custom transform.
        -:  333: *
        -:  334: * @return a jerryx_arg_t instance.
        -:  335: */
        -:  336:static inline jerryx_arg_t
        -:  337:jerryx_arg_custom (void *dest, /**< pointer to the native argument where the result should be stored */
        -:  338:                   uintptr_t extra_info, /**< the extra parameter, specific to the transform function */
        -:  339:                   jerryx_arg_transform_func_t func) /**< the custom transform function */
        -:  340:{
    #####:  341:  return (jerryx_arg_t){ .func = func, .dest = dest, .extra_info = extra_info };
        -:  342:} /* jerryx_arg_custom */
        -:  343:
        -:  344:/**
        -:  345: * Create a jerryx_arg_t instance for object properties.
        -:  346: *
        -:  347: * @return a jerryx_arg_t instance.
        -:  348: */
        -:  349:static inline jerryx_arg_t
        -:  350:jerryx_arg_object_properties (const jerryx_arg_object_props_t *object_props, /**< pointer to object property mapping */
        -:  351:                              jerryx_arg_optional_t opt_flag) /**< whether the argument is optional */
        -:  352:{
        -:  353:  jerryx_arg_transform_func_t func;
        -:  354:
        -:  355:  if (opt_flag == JERRYX_ARG_OPTIONAL)
        -:  356:  {
        -:  357:    func = jerryx_arg_transform_object_props_optional;
        -:  358:  }
        -:  359:  else
        -:  360:  {
        -:  361:    func = jerryx_arg_transform_object_props;
        -:  362:  }
        -:  363:
    #####:  364:  return (jerryx_arg_t){ .func = func, .dest = NULL, .extra_info = (uintptr_t) object_props };
        -:  365:} /* jerryx_arg_object_properties */
        -:  366:
        -:  367:/**
        -:  368: * Create a jerryx_arg_t instance for array.
        -:  369: *
        -:  370: * @return a jerryx_arg_t instance.
        -:  371: */
        -:  372:static inline jerryx_arg_t
        -:  373:jerryx_arg_array (const jerryx_arg_array_items_t *array_items_p, /**< pointer to array items mapping */
        -:  374:                  jerryx_arg_optional_t opt_flag) /**< whether the argument is optional */
        -:  375:{
        -:  376:  jerryx_arg_transform_func_t func;
        -:  377:
        -:  378:  if (opt_flag == JERRYX_ARG_OPTIONAL)
        -:  379:  {
        -:  380:    func = jerryx_arg_transform_array_items_optional;
        -:  381:  }
        -:  382:  else
        -:  383:  {
        -:  384:    func = jerryx_arg_transform_array_items;
        -:  385:  }
        -:  386:
    #####:  387:  return (jerryx_arg_t){ .func = func, .dest = NULL, .extra_info = (uintptr_t) array_items_p };
        -:  388:} /* jerryx_arg_array */
        -:  389:
        -:  390:#endif /* !JERRYX_ARG_IMPL_H */
