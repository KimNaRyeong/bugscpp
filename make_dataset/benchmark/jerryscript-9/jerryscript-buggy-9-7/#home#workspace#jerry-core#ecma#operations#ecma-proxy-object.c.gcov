        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-proxy-object.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-proxy-object.h"
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-array-object.h"
        -:   20:#include "ecma-builtin-handlers.h"
        -:   21:#include "ecma-builtin-object.h"
        -:   22:#include "ecma-builtins.h"
        -:   23:#include "ecma-exceptions.h"
        -:   24:#include "ecma-function-object.h"
        -:   25:#include "ecma-gc.h"
        -:   26:#include "ecma-globals.h"
        -:   27:#include "ecma-helpers.h"
        -:   28:#include "ecma-objects-general.h"
        -:   29:#include "ecma-objects.h"
        -:   30:
        -:   31:#include "jcontext.h"
        -:   32:
        -:   33:/** \addtogroup ecma ECMA
        -:   34: * @{
        -:   35: *
        -:   36: * \addtogroup ecmaproxyobject ECMA Proxy object related routines
        -:   37: * @{
        -:   38: */
        -:   39:
        -:   40:#if JERRY_BUILTIN_PROXY
        -:   41:/**
        -:   42: * ProxyCreate operation for create a new proxy object
        -:   43: *
        -:   44: * See also:
        -:   45: *         ES2015 9.5.15
        -:   46: *         ES11+: 9.5.14 ProxyCreate
        -:   47: *
        -:   48: * @return created Proxy object as an ecma-value - if success
        -:   49: *         raised error - otherwise
        -:   50: */
        -:   51:ecma_object_t *
    #####:   52:ecma_proxy_create (ecma_value_t target, /**< proxy target */
        -:   53:                   ecma_value_t handler, /**< proxy handler */
        -:   54:                   uint32_t options) /**< ecma_proxy_flag_types_t option bits */
        -:   55:{
        -:   56:  /* ES2015: 1, 3. */
        -:   57:  /* ES11+: 1 - 2. */
    #####:   58:  if (!ecma_is_value_object (target) || !ecma_is_value_object (handler))
        -:   59:  {
    #####:   60:    ecma_raise_type_error (ECMA_ERR_CANNOT_CREATE_PROXY);
    #####:   61:    return NULL;
        -:   62:  }
        -:   63:
        -:   64:  /* ES2015: 5 - 6. */
        -:   65:  /* ES11+: 3 - 4. */
        -:   66:  /* A Proxy does not have [[Prototype]] value as per standard */
    #####:   67:  ecma_object_t *obj_p = ecma_create_object (NULL, sizeof (ecma_proxy_object_t), ECMA_OBJECT_TYPE_PROXY);
        -:   68:
    #####:   69:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:   70:
    #####:   71:  obj_p->u2.prototype_cp = (jmem_cpointer_t) options;
        -:   72:
        -:   73:  /* ES2015: 7. */
        -:   74:  /* ES11+: 5. */
    #####:   75:  if (ecma_op_is_callable (target))
        -:   76:  {
    #####:   77:    obj_p->u2.prototype_cp |= ECMA_PROXY_IS_CALLABLE;
        -:   78:
        -:   79:    /* ES2015: 7.b. */
        -:   80:    /* ES11+: 5.b. */
    #####:   81:    if (ecma_is_constructor (target))
        -:   82:    {
    #####:   83:      obj_p->u2.prototype_cp |= ECMA_PROXY_IS_CONSTRUCTABLE;
        -:   84:    }
        -:   85:  }
        -:   86:
        -:   87:  /* ES2015: 8. */
        -:   88:  /* ES11+: 6. */
    #####:   89:  proxy_obj_p->target = target;
        -:   90:
        -:   91:  /* ES2015: 9. */
        -:   92:  /* ES11+: 7. */
    #####:   93:  proxy_obj_p->handler = handler;
        -:   94:
        -:   95:  /* ES2015: 10. */
        -:   96:  /* ES11+: 8 */
    #####:   97:  return obj_p;
        -:   98:} /* ecma_proxy_create */
        -:   99:
        -:  100:/**
        -:  101: * Definition of Proxy Revocation Function
        -:  102: *
        -:  103: * See also:
        -:  104: *         ES2015 26.2.2.1.1
        -:  105: *
        -:  106: * @return ECMA_VALUE_UNDEFINED
        -:  107: */
        -:  108:ecma_value_t
    #####:  109:ecma_proxy_revoke_cb (ecma_object_t *function_obj_p, /**< function object */
        -:  110:                      const ecma_value_t args_p[], /**< argument list */
        -:  111:                      const uint32_t args_count) /**< argument number */
        -:  112:{
        -:  113:  JERRY_UNUSED_2 (args_p, args_count);
        -:  114:
        -:  115:  /* 1. */
    #####:  116:  ecma_revocable_proxy_object_t *rev_proxy_p = (ecma_revocable_proxy_object_t *) function_obj_p;
        -:  117:
        -:  118:  /* 2. */
    #####:  119:  if (ecma_is_value_null (rev_proxy_p->proxy))
        -:  120:  {
    #####:  121:    return ECMA_VALUE_UNDEFINED;
        -:  122:  }
        -:  123:
        -:  124:  /* 4. */
    #####:  125:  ecma_proxy_object_t *proxy_p = (ecma_proxy_object_t *) ecma_get_object_from_value (rev_proxy_p->proxy);
    #####:  126:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY ((ecma_object_t *) proxy_p));
        -:  127:
        -:  128:  /* 3. */
    #####:  129:  rev_proxy_p->proxy = ECMA_VALUE_NULL;
        -:  130:
        -:  131:  /* 5. */
    #####:  132:  proxy_p->target = ECMA_VALUE_NULL;
        -:  133:
        -:  134:  /* 6. */
    #####:  135:  proxy_p->handler = ECMA_VALUE_NULL;
        -:  136:
        -:  137:  /* 7. */
    #####:  138:  return ECMA_VALUE_UNDEFINED;
        -:  139:} /* ecma_proxy_revoke_cb */
        -:  140:
        -:  141:/**
        -:  142: * Proxy.revocable operation for create a new revocable proxy object
        -:  143: *
        -:  144: * See also:
        -:  145: *         ES2015 26.2.2.1
        -:  146: *
        -:  147: * @return NULL - if the operation fails
        -:  148: *         pointer to the newly created revocable proxy object - otherwise
        -:  149: */
        -:  150:ecma_object_t *
    #####:  151:ecma_proxy_create_revocable (ecma_value_t target, /**< target argument */
        -:  152:                             ecma_value_t handler) /**< handler argument */
        -:  153:{
        -:  154:  /* 1. */
    #####:  155:  ecma_object_t *proxy_p = ecma_proxy_create (target, handler, 0);
        -:  156:
        -:  157:  /* 2. */
    #####:  158:  if (proxy_p == NULL)
        -:  159:  {
    #####:  160:    return proxy_p;
        -:  161:  }
        -:  162:
    #####:  163:  ecma_value_t proxy_value = ecma_make_object_value (proxy_p);
        -:  164:
        -:  165:  /* 3. */
        -:  166:  ecma_object_t *func_obj_p;
    #####:  167:  func_obj_p = ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROXY_REVOKE, sizeof (ecma_revocable_proxy_object_t));
        -:  168:
        -:  169:  /* 4. */
    #####:  170:  ecma_revocable_proxy_object_t *rev_proxy_p = (ecma_revocable_proxy_object_t *) func_obj_p;
    #####:  171:  rev_proxy_p->proxy = proxy_value;
        -:  172:
        -:  173:  ecma_property_value_t *prop_value_p;
    #####:  174:  ecma_value_t revoker = ecma_make_object_value (func_obj_p);
        -:  175:
        -:  176:  /* 5. */
    #####:  177:  ecma_object_t *obj_p =
    #####:  178:    ecma_create_object (ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE), 0, ECMA_OBJECT_TYPE_GENERAL);
        -:  179:
        -:  180:  /* 6. */
    #####:  181:  prop_value_p = ecma_create_named_data_property (obj_p,
        -:  182:                                                  ecma_get_magic_string (LIT_MAGIC_STRING_PROXY),
        -:  183:                                                  ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  184:                                                  NULL);
    #####:  185:  prop_value_p->value = proxy_value;
        -:  186:
        -:  187:  /* 7. */
    #####:  188:  prop_value_p = ecma_create_named_data_property (obj_p,
        -:  189:                                                  ecma_get_magic_string (LIT_MAGIC_STRING_REVOKE),
        -:  190:                                                  ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  191:                                                  NULL);
    #####:  192:  prop_value_p->value = revoker;
        -:  193:
    #####:  194:  ecma_deref_object (proxy_p);
    #####:  195:  ecma_deref_object (func_obj_p);
        -:  196:
        -:  197:  /* 8. */
    #####:  198:  return obj_p;
        -:  199:} /* ecma_proxy_create_revocable */
        -:  200:
        -:  201:/**
        -:  202: * Internal find property operation for Proxy object
        -:  203: *
        -:  204: * Note: Returned value must be freed with ecma_free_value.
        -:  205: *
        -:  206: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  207: *         ECMA_VALUE_NOT_FOUND - if the property is not found
        -:  208: *         value of the property - otherwise
        -:  209: */
        -:  210:ecma_value_t
    #####:  211:ecma_proxy_object_find (ecma_object_t *obj_p, /**< proxy object */
        -:  212:                        ecma_string_t *prop_name_p) /**< property name */
        -:  213:{
    #####:  214:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
        -:  215:
    #####:  216:  ecma_value_t has_result = ecma_proxy_object_has (obj_p, prop_name_p);
        -:  217:
    #####:  218:  if (ECMA_IS_VALUE_ERROR (has_result))
        -:  219:  {
    #####:  220:    return has_result;
        -:  221:  }
        -:  222:
    #####:  223:  if (ecma_is_value_false (has_result))
        -:  224:  {
    #####:  225:    return ECMA_VALUE_NOT_FOUND;
        -:  226:  }
        -:  227:
    #####:  228:  return ecma_proxy_object_get (obj_p, prop_name_p, ecma_make_object_value (obj_p));
        -:  229:} /* ecma_proxy_object_find */
        -:  230:
        -:  231:/**
        -:  232: * Helper method for validate the proxy object
        -:  233: *
        -:  234: * @return proxy trap - if the validation is successful
        -:  235: *         ECMA_VALUE_ERROR - otherwise
        -:  236: */
        -:  237:static ecma_value_t
    #####:  238:ecma_validate_proxy_object (ecma_value_t handler, /**< proxy handler */
        -:  239:                            lit_magic_string_id_t magic_id) /**< routine magic id */
        -:  240:{
    #####:  241:  if (ecma_is_value_null (handler))
        -:  242:  {
    #####:  243:    return ecma_raise_type_error (ECMA_ERR_HANDLER_CANNOT_BE_NULL);
        -:  244:  }
        -:  245:
    #####:  246:  JERRY_ASSERT (ecma_is_value_object (handler));
        -:  247:
    #####:  248:  return ecma_op_get_method_by_magic_id (handler, magic_id);
        -:  249:} /* ecma_validate_proxy_object */
        -:  250:
        -:  251:/* Interal operations */
        -:  252:
        -:  253:/**
        -:  254: * The Proxy object [[GetPrototypeOf]] internal routine
        -:  255: *
        -:  256: * See also:
        -:  257: *          ECMAScript v6, 9.5.1
        -:  258: *
        -:  259: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  260: *         ECMA_VALUE_NULL or valid object (prototype) otherwise
        -:  261: */
        -:  262:ecma_value_t
    #####:  263:ecma_proxy_object_get_prototype_of (ecma_object_t *obj_p) /**< proxy object */
        -:  264:{
    #####:  265:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####:  266:  ECMA_CHECK_STACK_USAGE ();
        -:  267:
    #####:  268:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:  269:
        -:  270:  /* 1. */
    #####:  271:  ecma_value_t handler = proxy_obj_p->handler;
        -:  272:
        -:  273:  /* 2-5. */
    #####:  274:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_GET_PROTOTYPE_OF_UL);
        -:  275:
        -:  276:  /* 6. */
    #####:  277:  if (ECMA_IS_VALUE_ERROR (trap))
        -:  278:  {
    #####:  279:    return trap;
        -:  280:  }
        -:  281:
    #####:  282:  ecma_value_t target = proxy_obj_p->target;
    #####:  283:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -:  284:
        -:  285:  /* 7. */
    #####:  286:  if (ecma_is_value_undefined (trap))
        -:  287:  {
    #####:  288:    ecma_value_t result = ecma_builtin_object_object_get_prototype_of (target_obj_p);
    #####:  289:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####:  290:    return result;
        -:  291:  }
        -:  292:
    #####:  293:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
        -:  294:
        -:  295:  /* 8. */
    #####:  296:  ecma_value_t handler_proto = ecma_op_function_call (func_obj_p, handler, &target, 1);
        -:  297:
    #####:  298:  ecma_deref_object (func_obj_p);
        -:  299:
        -:  300:  /* 9. */
    #####:  301:  if (ECMA_IS_VALUE_ERROR (handler_proto))
        -:  302:  {
    #####:  303:    return handler_proto;
        -:  304:  }
        -:  305:
        -:  306:  /* 10. */
    #####:  307:  if (!ecma_is_value_object (handler_proto) && !ecma_is_value_null (handler_proto))
        -:  308:  {
    #####:  309:    ecma_free_value (handler_proto);
        -:  310:
    #####:  311:    return ecma_raise_type_error (ECMA_ERR_TRAP_RETURNED_NEITHER_OBJECT_NOR_NULL);
        -:  312:  }
        -:  313:
    #####:  314:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -:  315:  {
    #####:  316:    return handler_proto;
        -:  317:  }
        -:  318:
        -:  319:  /* 11. */
    #####:  320:  ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -:  321:
        -:  322:  /* 12. */
    #####:  323:  if (ECMA_IS_VALUE_ERROR (extensible_target))
        -:  324:  {
    #####:  325:    ecma_free_value (handler_proto);
        -:  326:
    #####:  327:    return extensible_target;
        -:  328:  }
        -:  329:
        -:  330:  /* 13. */
    #####:  331:  if (ecma_is_value_true (extensible_target))
        -:  332:  {
    #####:  333:    return handler_proto;
        -:  334:  }
        -:  335:
        -:  336:  /* 14. */
    #####:  337:  ecma_value_t target_proto = ecma_builtin_object_object_get_prototype_of (target_obj_p);
        -:  338:
        -:  339:  /* 15. */
    #####:  340:  if (ECMA_IS_VALUE_ERROR (target_proto))
        -:  341:  {
    #####:  342:    return target_proto;
        -:  343:  }
        -:  344:
    #####:  345:  ecma_value_t ret_value = handler_proto;
        -:  346:
        -:  347:  /* 16. */
    #####:  348:  if (handler_proto != target_proto)
        -:  349:  {
    #####:  350:    ecma_free_value (handler_proto);
        -:  351:
    #####:  352:    ret_value = ecma_raise_type_error (ECMA_ERR_TARGET_NOT_EXTENSIBLE_NOT_RETURNED_ITS_PROTOTYPE);
        -:  353:  }
        -:  354:
    #####:  355:  ecma_free_value (target_proto);
        -:  356:
        -:  357:  /* 17. */
    #####:  358:  return ret_value;
        -:  359:} /* ecma_proxy_object_get_prototype_of */
        -:  360:
        -:  361:/**
        -:  362: * The Proxy object [[SetPrototypeOf]] internal routine
        -:  363: *
        -:  364: * See also:
        -:  365: *          ECMAScript v6, 9.5.2
        -:  366: *          ECMAScript v11: 9.5.2
        -:  367: *
        -:  368: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -:  369: *
        -:  370: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  371: *         ECMA_VALUE_{TRUE/FALSE} - depends on whether the new prototype can be set for the given object
        -:  372: */
        -:  373:ecma_value_t
    #####:  374:ecma_proxy_object_set_prototype_of (ecma_object_t *obj_p, /**< proxy object */
        -:  375:                                    ecma_value_t proto) /**< new prototype object */
        -:  376:{
    #####:  377:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####:  378:  ECMA_CHECK_STACK_USAGE ();
        -:  379:
        -:  380:  /* 1. */
    #####:  381:  JERRY_ASSERT (ecma_is_value_object (proto) || ecma_is_value_null (proto));
        -:  382:
    #####:  383:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:  384:
        -:  385:  /* 2. */
    #####:  386:  ecma_value_t handler = proxy_obj_p->handler;
        -:  387:
        -:  388:  /* 3-6. */
    #####:  389:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_SET_PROTOTYPE_OF_UL);
        -:  390:
        -:  391:  /* 7.*/
    #####:  392:  if (ECMA_IS_VALUE_ERROR (trap))
        -:  393:  {
    #####:  394:    return trap;
        -:  395:  }
        -:  396:
    #####:  397:  ecma_value_t target = proxy_obj_p->target;
    #####:  398:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -:  399:
        -:  400:  /* 8. */
    #####:  401:  if (ecma_is_value_undefined (trap))
        -:  402:  {
    #####:  403:    if (ECMA_OBJECT_IS_PROXY (target_obj_p))
        -:  404:    {
    #####:  405:      ecma_value_t result = ecma_proxy_object_set_prototype_of (target_obj_p, proto);
    #####:  406:      JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####:  407:      return result;
        -:  408:    }
        -:  409:
    #####:  410:    ecma_value_t result = ecma_op_ordinary_object_set_prototype_of (target_obj_p, proto);
    #####:  411:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####:  412:    return result;
        -:  413:  }
        -:  414:
    #####:  415:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####:  416:  ecma_value_t args[] = { target, proto };
        -:  417:
        -:  418:  /* 9. */
    #####:  419:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 2);
        -:  420:
    #####:  421:  ecma_deref_object (func_obj_p);
        -:  422:
        -:  423:  /* 10. */
    #####:  424:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -:  425:  {
    #####:  426:    return trap_result;
        -:  427:  }
        -:  428:
    #####:  429:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -:  430:
    #####:  431:  ecma_free_value (trap_result);
        -:  432:
        -:  433:  /* ES11: 9 */
    #####:  434:  if (!boolean_trap_result)
        -:  435:  {
    #####:  436:    return ecma_make_boolean_value (false);
        -:  437:  }
        -:  438:
    #####:  439:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -:  440:  {
    #####:  441:    return ecma_make_boolean_value (boolean_trap_result);
        -:  442:  }
        -:  443:
        -:  444:  /* 11. */
    #####:  445:  ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -:  446:
        -:  447:  /* 12. */
    #####:  448:  if (ECMA_IS_VALUE_ERROR (extensible_target))
        -:  449:  {
    #####:  450:    return extensible_target;
        -:  451:  }
        -:  452:
        -:  453:  /* 13. */
    #####:  454:  if (ecma_is_value_true (extensible_target))
        -:  455:  {
    #####:  456:    return ecma_make_boolean_value (boolean_trap_result);
        -:  457:  }
        -:  458:
        -:  459:  /* 14. */
    #####:  460:  ecma_value_t target_proto = ecma_builtin_object_object_get_prototype_of (target_obj_p);
        -:  461:
        -:  462:  /* 15. */
    #####:  463:  if (ECMA_IS_VALUE_ERROR (target_proto))
        -:  464:  {
    #####:  465:    return target_proto;
        -:  466:  }
        -:  467:
    #####:  468:  ecma_value_t ret_value = ecma_make_boolean_value (boolean_trap_result);
        -:  469:
        -:  470:  /* 16. */
    #####:  471:  if (boolean_trap_result && (target_proto != proto))
        -:  472:  {
    #####:  473:    ret_value = ecma_raise_type_error (ECMA_ERR_TARGET_NOT_EXTENSIBLE_DIFFERENT_PROTOTYPE_RETURNED);
        -:  474:  }
        -:  475:
    #####:  476:  ecma_free_value (target_proto);
        -:  477:
        -:  478:  /* 17. */
    #####:  479:  return ret_value;
        -:  480:} /* ecma_proxy_object_set_prototype_of */
        -:  481:
        -:  482:/**
        -:  483: * The Proxy object [[isExtensible]] internal routine
        -:  484: *
        -:  485: * See also:
        -:  486: *          ECMAScript v6, 9.5.3
        -:  487: *
        -:  488: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -:  489: *
        -:  490: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  491: *         ECMA_VALUE_{TRUE/FALSE} - depends on whether the object is extensible
        -:  492: */
        -:  493:ecma_value_t
    #####:  494:ecma_proxy_object_is_extensible (ecma_object_t *obj_p) /**< proxy object */
        -:  495:{
    #####:  496:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####:  497:  ECMA_CHECK_STACK_USAGE ();
        -:  498:
    #####:  499:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:  500:
        -:  501:  /* 1. */
    #####:  502:  ecma_value_t handler = proxy_obj_p->handler;
        -:  503:
        -:  504:  /* 2-5. */
    #####:  505:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_IS_EXTENSIBLE);
        -:  506:
        -:  507:  /* 6. */
    #####:  508:  if (ECMA_IS_VALUE_ERROR (trap))
        -:  509:  {
    #####:  510:    return trap;
        -:  511:  }
        -:  512:
    #####:  513:  ecma_value_t target = proxy_obj_p->target;
    #####:  514:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -:  515:
        -:  516:  /* 7. */
    #####:  517:  if (ecma_is_value_undefined (trap))
        -:  518:  {
    #####:  519:    ecma_value_t result = ecma_builtin_object_object_is_extensible (target_obj_p);
    #####:  520:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####:  521:    return result;
        -:  522:  }
        -:  523:
    #####:  524:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
        -:  525:
        -:  526:  /* 8. */
    #####:  527:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, &target, 1);
        -:  528:
    #####:  529:  ecma_deref_object (func_obj_p);
        -:  530:
        -:  531:  /* 9. */
    #####:  532:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -:  533:  {
    #####:  534:    return trap_result;
        -:  535:  }
        -:  536:
    #####:  537:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -:  538:
    #####:  539:  ecma_free_value (trap_result);
        -:  540:
    #####:  541:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -:  542:  {
    #####:  543:    return ecma_make_boolean_value (boolean_trap_result);
        -:  544:  }
        -:  545:
        -:  546:  bool target_result;
        -:  547:
        -:  548:  /* 10. */
    #####:  549:  if (ECMA_OBJECT_IS_PROXY (target_obj_p))
        -:  550:  {
    #####:  551:    ecma_value_t proxy_is_ext = ecma_proxy_object_is_extensible (target_obj_p);
        -:  552:
    #####:  553:    if (ECMA_IS_VALUE_ERROR (proxy_is_ext))
        -:  554:    {
    #####:  555:      return proxy_is_ext;
        -:  556:    }
        -:  557:
    #####:  558:    target_result = ecma_is_value_true (proxy_is_ext);
        -:  559:  }
        -:  560:  else
        -:  561:  {
    #####:  562:    target_result = ecma_op_ordinary_object_is_extensible (target_obj_p);
        -:  563:  }
        -:  564:
        -:  565:  /* 12. */
    #####:  566:  if (boolean_trap_result != target_result)
        -:  567:  {
    #####:  568:    return ecma_raise_type_error (ECMA_ERR_TRAP_RESULT_NOT_REFLECT_TARGET_EXTENSIBILITY);
        -:  569:  }
        -:  570:
    #####:  571:  return ecma_make_boolean_value (boolean_trap_result);
        -:  572:} /* ecma_proxy_object_is_extensible */
        -:  573:
        -:  574:/**
        -:  575: * The Proxy object [[PreventExtensions]] internal routine
        -:  576: *
        -:  577: * See also:
        -:  578: *          ECMAScript v6, 9.5.4
        -:  579: *
        -:  580: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -:  581: *
        -:  582: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  583: *         ECMA_VALUE_{TRUE/FALSE} - depends on whether the object can be set as inextensible
        -:  584: */
        -:  585:ecma_value_t
    #####:  586:ecma_proxy_object_prevent_extensions (ecma_object_t *obj_p) /**< proxy object */
        -:  587:{
    #####:  588:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####:  589:  ECMA_CHECK_STACK_USAGE ();
        -:  590:
    #####:  591:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:  592:
        -:  593:  /* 1. */
    #####:  594:  ecma_value_t handler = proxy_obj_p->handler;
        -:  595:
        -:  596:  /* 2-5. */
    #####:  597:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_PREVENT_EXTENSIONS_UL);
        -:  598:
        -:  599:  /* 6. */
    #####:  600:  if (ECMA_IS_VALUE_ERROR (trap))
        -:  601:  {
    #####:  602:    return trap;
        -:  603:  }
        -:  604:
    #####:  605:  ecma_value_t target = proxy_obj_p->target;
    #####:  606:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -:  607:
        -:  608:  /* 7. */
    #####:  609:  if (ecma_is_value_undefined (trap))
        -:  610:  {
    #####:  611:    ecma_value_t ret_value = ecma_builtin_object_object_prevent_extensions (target_obj_p);
        -:  612:
    #####:  613:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -:  614:    {
    #####:  615:      return ret_value;
        -:  616:    }
        -:  617:
    #####:  618:    ecma_deref_object (target_obj_p);
        -:  619:
    #####:  620:    return ECMA_VALUE_TRUE;
        -:  621:  }
        -:  622:
    #####:  623:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
        -:  624:
        -:  625:  /* 8. */
    #####:  626:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, &target, 1);
        -:  627:
    #####:  628:  ecma_deref_object (func_obj_p);
        -:  629:
        -:  630:  /* 9. */
    #####:  631:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -:  632:  {
    #####:  633:    return trap_result;
        -:  634:  }
        -:  635:
    #####:  636:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -:  637:
    #####:  638:  ecma_free_value (trap_result);
        -:  639:
        -:  640:  /* 10. */
    #####:  641:  if (boolean_trap_result && !(obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION))
        -:  642:  {
    #####:  643:    ecma_value_t target_is_ext = ecma_builtin_object_object_is_extensible (target_obj_p);
        -:  644:
    #####:  645:    if (ECMA_IS_VALUE_ERROR (target_is_ext))
        -:  646:    {
    #####:  647:      return target_is_ext;
        -:  648:    }
        -:  649:
    #####:  650:    if (ecma_is_value_true (target_is_ext))
        -:  651:    {
    #####:  652:      return ecma_raise_type_error (ECMA_ERR_TRAP_RESULT_NOT_REFLECT_TARGET_INEXTENSIBILITY);
        -:  653:    }
        -:  654:  }
        -:  655:
        -:  656:  /* 11. */
    #####:  657:  return ecma_make_boolean_value (boolean_trap_result);
        -:  658:} /* ecma_proxy_object_prevent_extensions */
        -:  659:
        -:  660:/**
        -:  661: * The Proxy object [[GetOwnProperty]] internal routine
        -:  662: *
        -:  663: * See also:
        -:  664: *          ECMAScript v6, 9.5.5
        -:  665: *
        -:  666: * Note: - Returned value is always a simple value so freeing it is unnecessary.
        -:  667: *       - If the operation does not fail, freeing the filled property descriptor is the caller's responsibility
        -:  668: *
        -:  669: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  670: *         ECMA_VALUE_{TRUE_FALSE} - depends on whether object has property with the given name
        -:  671: */
        -:  672:ecma_value_t
    #####:  673:ecma_proxy_object_get_own_property_descriptor (ecma_object_t *obj_p, /**< proxy object */
        -:  674:                                               ecma_string_t *prop_name_p, /**< property name */
        -:  675:                                               ecma_property_descriptor_t *prop_desc_p) /**< [out] property
        -:  676:                                                                                         *   descriptor */
        -:  677:{
    #####:  678:  ECMA_CHECK_STACK_USAGE ();
        -:  679:
    #####:  680:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:  681:
        -:  682:  /* 2. */
    #####:  683:  ecma_value_t handler = proxy_obj_p->handler;
        -:  684:
        -:  685:  /* 3-6. */
    #####:  686:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_GET_OWN_PROPERTY_DESCRIPTOR_UL);
        -:  687:
    #####:  688:  ecma_value_t target = proxy_obj_p->target;
        -:  689:
        -:  690:  /* 7. */
    #####:  691:  if (ECMA_IS_VALUE_ERROR (trap))
        -:  692:  {
    #####:  693:    return trap;
        -:  694:  }
        -:  695:
    #####:  696:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -:  697:
        -:  698:  /* 8. */
    #####:  699:  if (ecma_is_value_undefined (trap))
        -:  700:  {
    #####:  701:    ecma_value_t result = ecma_op_object_get_own_property_descriptor (target_obj_p, prop_name_p, prop_desc_p);
    #####:  702:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####:  703:    return result;
        -:  704:  }
        -:  705:
    #####:  706:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####:  707:  ecma_value_t prop_value = ecma_make_prop_name_value (prop_name_p);
    #####:  708:  ecma_value_t args[] = { target, prop_value };
        -:  709:
        -:  710:  /* 9. */
    #####:  711:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 2);
    #####:  712:  ecma_deref_object (func_obj_p);
        -:  713:
        -:  714:  /* 10. */
    #####:  715:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -:  716:  {
    #####:  717:    return trap_result;
        -:  718:  }
        -:  719:
        -:  720:  /* 11. */
    #####:  721:  if (!ecma_is_value_object (trap_result) && !ecma_is_value_undefined (trap_result))
        -:  722:  {
    #####:  723:    ecma_free_value (trap_result);
    #####:  724:    return ecma_raise_type_error (ECMA_ERR_TRAP_IS_NEITHER_AN_OBJECT_NOR_UNDEFINED);
        -:  725:  }
        -:  726:
    #####:  727:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -:  728:  {
    #####:  729:    if (ecma_is_value_undefined (trap_result))
        -:  730:    {
    #####:  731:      return ECMA_VALUE_FALSE;
        -:  732:    }
        -:  733:
    #####:  734:    ecma_value_t result_val = ecma_op_to_property_descriptor (trap_result, prop_desc_p);
    #####:  735:    ecma_free_value (trap_result);
        -:  736:
    #####:  737:    if (ECMA_IS_VALUE_ERROR (result_val))
        -:  738:    {
    #####:  739:      return result_val;
        -:  740:    }
        -:  741:
    #####:  742:    ecma_op_to_complete_property_descriptor (prop_desc_p);
    #####:  743:    return ECMA_VALUE_TRUE;
        -:  744:  }
        -:  745:
        -:  746:  /* 12. */
    #####:  747:  ecma_property_descriptor_t target_desc;
    #####:  748:  ecma_value_t target_status = ecma_op_object_get_own_property_descriptor (target_obj_p, prop_name_p, &target_desc);
        -:  749:
        -:  750:  /* 13. */
    #####:  751:  if (ECMA_IS_VALUE_ERROR (target_status))
        -:  752:  {
    #####:  753:    ecma_free_value (trap_result);
    #####:  754:    return target_status;
        -:  755:  }
        -:  756:
        -:  757:  /* 14. */
    #####:  758:  if (ecma_is_value_undefined (trap_result))
        -:  759:  {
        -:  760:    /* .a */
    #####:  761:    if (ecma_is_value_false (target_status))
        -:  762:    {
    #####:  763:      return ECMA_VALUE_FALSE;
        -:  764:    }
        -:  765:    /* .b */
    #####:  766:    if (!(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE))
        -:  767:    {
    #####:  768:      ecma_free_property_descriptor (&target_desc);
    #####:  769:      return ecma_raise_type_error (ECMA_ERR_GIVEN_PROPERTY_IS_A_NON_CONFIGURABLE);
        -:  770:    }
        -:  771:
        -:  772:    /* .c */
    #####:  773:    ecma_free_property_descriptor (&target_desc);
    #####:  774:    ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -:  775:
        -:  776:    /* .d */
    #####:  777:    if (ECMA_IS_VALUE_ERROR (extensible_target))
        -:  778:    {
    #####:  779:      return extensible_target;
        -:  780:    }
        -:  781:
        -:  782:    /* .e */
    #####:  783:    JERRY_ASSERT (ecma_is_value_boolean (extensible_target));
        -:  784:
        -:  785:    /* .f */
    #####:  786:    if (ecma_is_value_false (extensible_target))
        -:  787:    {
    #####:  788:      return ecma_raise_type_error (ECMA_ERR_TARGET_NOT_EXTENSIBLE);
        -:  789:    }
        -:  790:
        -:  791:    /* .g */
    #####:  792:    return ECMA_VALUE_FALSE;
        -:  793:  }
        -:  794:
        -:  795:  /* 15. */
    #####:  796:  ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -:  797:
        -:  798:  /* 16. */
    #####:  799:  if (ECMA_IS_VALUE_ERROR (extensible_target))
        -:  800:  {
    #####:  801:    if (ecma_is_value_true (target_status))
        -:  802:    {
    #####:  803:      ecma_free_property_descriptor (&target_desc);
        -:  804:    }
    #####:  805:    ecma_free_value (trap_result);
    #####:  806:    return extensible_target;
        -:  807:  }
        -:  808:
        -:  809:  /* 17, 19 */
    #####:  810:  ecma_value_t result_val = ecma_op_to_property_descriptor (trap_result, prop_desc_p);
        -:  811:
    #####:  812:  ecma_op_to_complete_property_descriptor (prop_desc_p);
    #####:  813:  ecma_free_value (trap_result);
        -:  814:
        -:  815:  /* 18. */
    #####:  816:  if (ECMA_IS_VALUE_ERROR (result_val))
        -:  817:  {
    #####:  818:    if (ecma_is_value_true (target_status))
        -:  819:    {
    #####:  820:      ecma_free_property_descriptor (&target_desc);
        -:  821:    }
    #####:  822:    return result_val;
        -:  823:  }
        -:  824:
        -:  825:  /* 20. */
    #####:  826:  bool is_extensible = ecma_is_value_true (extensible_target);
        -:  827:
    #####:  828:  bool is_valid = ecma_op_is_compatible_property_descriptor (prop_desc_p,
    #####:  829:                                                             (ecma_is_value_true (target_status) ? &target_desc : NULL),
        -:  830:                                                             is_extensible);
        -:  831:
    #####:  832:  bool target_has_desc = ecma_is_value_true (target_status);
    #####:  833:  bool target_is_writable = (target_desc.flags & JERRY_PROP_IS_WRITABLE);
    #####:  834:  bool target_is_configurable = false;
        -:  835:
    #####:  836:  if (target_has_desc)
        -:  837:  {
    #####:  838:    target_is_configurable = ((target_desc.flags & JERRY_PROP_IS_CONFIGURABLE) != 0);
    #####:  839:    ecma_free_property_descriptor (&target_desc);
        -:  840:  }
        -:  841:
        -:  842:  /* 21. */
    #####:  843:  if (!is_valid)
        -:  844:  {
    #####:  845:    ecma_free_property_descriptor (prop_desc_p);
    #####:  846:    return ecma_raise_type_error (ECMA_ERR_THE_TWO_DESCRIPTORS_ARE_INCOMPATIBLE);
        -:  847:  }
        -:  848:
        -:  849:  /* 22. */
    #####:  850:  else if (!(prop_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE))
        -:  851:  {
    #####:  852:    const uint16_t mask = (JERRY_PROP_IS_WRITABLE_DEFINED | JERRY_PROP_IS_WRITABLE);
        -:  853:
    #####:  854:    if (!target_has_desc || target_is_configurable
    #####:  855:        || ((prop_desc_p->flags & mask) == JERRY_PROP_IS_WRITABLE_DEFINED && target_is_writable))
        -:  856:    {
    #####:  857:      ecma_free_property_descriptor (prop_desc_p);
    #####:  858:      return ecma_raise_type_error (ECMA_ERR_THE_TWO_DESCRIPTORS_ARE_INCOMPATIBLE);
        -:  859:    }
        -:  860:  }
    #####:  861:  return ECMA_VALUE_TRUE;
        -:  862:} /* ecma_proxy_object_get_own_property_descriptor */
        -:  863:
        -:  864:/**
        -:  865: * The Proxy object [[DefineOwnProperty]] internal routine
        -:  866: *
        -:  867: * See also:
        -:  868: *          ECMAScript v6, 9.5.6
        -:  869: *
        -:  870: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -:  871: *
        -:  872: * @return ECMA_VALUE_ERROR - if the operation fails
        -:  873: *         ECMA_VALUE_{TRUE_FALSE} - depends on whether the property can be defined for the given object
        -:  874: */
        -:  875:ecma_value_t
    #####:  876:ecma_proxy_object_define_own_property (ecma_object_t *obj_p, /**< proxy object */
        -:  877:                                       ecma_string_t *prop_name_p, /**< property name */
        -:  878:                                       const ecma_property_descriptor_t *prop_desc_p) /**< property descriptor */
        -:  879:{
    #####:  880:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####:  881:  ECMA_CHECK_STACK_USAGE ();
        -:  882:
    #####:  883:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -:  884:
        -:  885:  /* 2. */
    #####:  886:  ecma_value_t handler = proxy_obj_p->handler;
        -:  887:
        -:  888:  /* 3-6. */
    #####:  889:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_DEFINE_PROPERTY_UL);
        -:  890:
        -:  891:  /* 7. */
    #####:  892:  if (ECMA_IS_VALUE_ERROR (trap))
        -:  893:  {
    #####:  894:    return trap;
        -:  895:  }
        -:  896:
    #####:  897:  ecma_value_t target = proxy_obj_p->target;
    #####:  898:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -:  899:
        -:  900:  /* 8. */
    #####:  901:  if (ecma_is_value_undefined (trap))
        -:  902:  {
    #####:  903:    ecma_value_t result = ecma_op_object_define_own_property (target_obj_p, prop_name_p, prop_desc_p);
    #####:  904:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####:  905:    return result;
        -:  906:  }
        -:  907:
        -:  908:  /* 9. */
    #####:  909:  ecma_object_t *desc_obj = ecma_op_from_property_descriptor (prop_desc_p);
        -:  910:
    #####:  911:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####:  912:  ecma_value_t prop_value = ecma_make_prop_name_value (prop_name_p);
    #####:  913:  ecma_value_t desc_obj_value = ecma_make_object_value (desc_obj);
    #####:  914:  ecma_value_t args[] = { target, prop_value, desc_obj_value };
        -:  915:
        -:  916:  /* 10. */
    #####:  917:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 3);
        -:  918:
    #####:  919:  ecma_deref_object (func_obj_p);
    #####:  920:  ecma_deref_object (desc_obj);
        -:  921:
        -:  922:  /* 11. */
    #####:  923:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -:  924:  {
    #####:  925:    return trap_result;
        -:  926:  }
        -:  927:
    #####:  928:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -:  929:
    #####:  930:  ecma_free_value (trap_result);
        -:  931:
        -:  932:  /* 12. */
    #####:  933:  if (!boolean_trap_result)
        -:  934:  {
    #####:  935:    return ECMA_VALUE_FALSE;
        -:  936:  }
        -:  937:
    #####:  938:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -:  939:  {
    #####:  940:    return ECMA_VALUE_TRUE;
        -:  941:  }
        -:  942:
        -:  943:  /* 13. */
    #####:  944:  ecma_property_descriptor_t target_desc;
        -:  945:
    #####:  946:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (target_obj_p, prop_name_p, &target_desc);
        -:  947:
        -:  948:  /* 14. */
    #####:  949:  if (ECMA_IS_VALUE_ERROR (status))
        -:  950:  {
    #####:  951:    return status;
        -:  952:  }
        -:  953:
    #####:  954:  bool target_prop_found = ecma_is_value_true (status);
        -:  955:
        -:  956:  /* 15. */
    #####:  957:  ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -:  958:
    #####:  959:  bool is_target_ext = ecma_is_value_true (extensible_target);
        -:  960:
        -:  961:  /* 16. */
    #####:  962:  if (ECMA_IS_VALUE_ERROR (extensible_target))
        -:  963:  {
    #####:  964:    if (target_prop_found)
        -:  965:    {
    #####:  966:      ecma_free_property_descriptor (&target_desc);
        -:  967:    }
        -:  968:
    #####:  969:    return extensible_target;
        -:  970:  }
        -:  971:
        -:  972:  /* 17. */
    #####:  973:  bool setting_config_false =
    #####:  974:    ((prop_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED) && !(prop_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE));
        -:  975:
        -:  976:  /* 19. */
    #####:  977:  if (!target_prop_found)
        -:  978:  {
    #####:  979:    if (!is_target_ext)
        -:  980:    {
    #####:  981:      return ecma_raise_type_error (ECMA_ERR_TRAP_TRUISH_ADDING_PROPERTY_NON_EXTENSIBLE_TARGET);
        -:  982:    }
        -:  983:
    #####:  984:    if (setting_config_false)
        -:  985:    {
    #####:  986:      return ecma_raise_type_error (ECMA_ERR_TRAP_TRUISH_DEFINING_NON_EXISTENT_PROPERTY);
        -:  987:    }
        -:  988:  }
        -:  989:  /* 20. */
        -:  990:  else
        -:  991:  {
    #####:  992:    ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -:  993:
    #####:  994:    if (!ecma_op_is_compatible_property_descriptor (prop_desc_p, &target_desc, is_target_ext))
        -:  995:    {
    #####:  996:      ret_value = ecma_raise_type_error (ECMA_ERR_TRAP_TRUISH_ADD_PROPERTY_INCOMPATIBLE_OTHER_PROP);
        -:  997:    }
    #####:  998:    else if (setting_config_false && (target_desc.flags & JERRY_PROP_IS_CONFIGURABLE))
        -:  999:    {
    #####: 1000:      ret_value = ecma_raise_type_error (ECMA_ERR_TRAP_TRUISH_DEFINING_NON_EXISTENT_PROPERTY);
        -: 1001:    }
        -: 1002:    /* ES11: 16.c */
    #####: 1003:    else if ((target_desc.flags & (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE_DEFINED)) != 0
    #####: 1004:             && (prop_desc_p->flags & (JERRY_PROP_IS_WRITABLE_DEFINED | JERRY_PROP_IS_WRITABLE))
        -: 1005:                  == JERRY_PROP_IS_WRITABLE_DEFINED
    #####: 1006:             && (target_desc.flags & (JERRY_PROP_IS_WRITABLE | JERRY_PROP_IS_CONFIGURABLE)) == JERRY_PROP_IS_WRITABLE)
        -: 1007:
        -: 1008:    {
    #####: 1009:      ret_value = ecma_raise_type_error (ECMA_ERR_TRAP_TRUISH_DEFINING_NON_EXISTENT_PROPERTY);
        -: 1010:    }
        -: 1011:
    #####: 1012:    ecma_free_property_descriptor (&target_desc);
        -: 1013:
    #####: 1014:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -: 1015:    {
    #####: 1016:      return ret_value;
        -: 1017:    }
        -: 1018:  }
        -: 1019:
    #####: 1020:  return ECMA_VALUE_TRUE;
        -: 1021:} /* ecma_proxy_object_define_own_property */
        -: 1022:
        -: 1023:/**
        -: 1024: * The Proxy object [[HasProperty]] internal routine
        -: 1025: *
        -: 1026: * See also:
        -: 1027: *          ECMAScript v6, 9.5.7
        -: 1028: *
        -: 1029: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -: 1030: *
        -: 1031: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 1032: *         ECMA_VALUE_{TRUE_FALSE} - depends on whether the property is found
        -: 1033: */
        -: 1034:ecma_value_t
    #####: 1035:ecma_proxy_object_has (ecma_object_t *obj_p, /**< proxy object */
        -: 1036:                       ecma_string_t *prop_name_p) /**< property name */
        -: 1037:{
    #####: 1038:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####: 1039:  ECMA_CHECK_STACK_USAGE ();
        -: 1040:
    #####: 1041:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1042:
        -: 1043:  /* 2. */
    #####: 1044:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1045:
        -: 1046:  /* 3-6. */
    #####: 1047:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_HAS);
        -: 1048:
        -: 1049:  /* 7. */
    #####: 1050:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1051:  {
    #####: 1052:    return trap;
        -: 1053:  }
        -: 1054:
    #####: 1055:  ecma_value_t target = proxy_obj_p->target;
    #####: 1056:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -: 1057:
        -: 1058:  /* 8. */
    #####: 1059:  if (ecma_is_value_undefined (trap))
        -: 1060:  {
    #####: 1061:    ecma_value_t result = ecma_op_object_has_property (target_obj_p, prop_name_p);
    #####: 1062:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1063:    return result;
        -: 1064:  }
        -: 1065:
    #####: 1066:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####: 1067:  ecma_value_t prop_value = ecma_make_prop_name_value (prop_name_p);
    #####: 1068:  ecma_value_t args[] = { target, prop_value };
        -: 1069:
        -: 1070:  /* 9. */
    #####: 1071:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 2);
        -: 1072:
    #####: 1073:  ecma_deref_object (func_obj_p);
        -: 1074:
        -: 1075:  /* 10. */
    #####: 1076:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -: 1077:  {
    #####: 1078:    return trap_result;
        -: 1079:  }
        -: 1080:
    #####: 1081:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -: 1082:
    #####: 1083:  ecma_free_value (trap_result);
        -: 1084:
        -: 1085:  /* 11. */
    #####: 1086:  if (!boolean_trap_result && !(obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION))
        -: 1087:  {
    #####: 1088:    ecma_property_descriptor_t target_desc;
        -: 1089:
    #####: 1090:    ecma_value_t status = ecma_op_object_get_own_property_descriptor (target_obj_p, prop_name_p, &target_desc);
        -: 1091:
    #####: 1092:    if (ECMA_IS_VALUE_ERROR (status))
        -: 1093:    {
    #####: 1094:      return status;
        -: 1095:    }
        -: 1096:
    #####: 1097:    if (ecma_is_value_true (status))
        -: 1098:    {
    #####: 1099:      bool prop_is_configurable = target_desc.flags & JERRY_PROP_IS_CONFIGURABLE;
        -: 1100:
    #####: 1101:      ecma_free_property_descriptor (&target_desc);
        -: 1102:
    #####: 1103:      if (!prop_is_configurable)
        -: 1104:      {
    #####: 1105:        return ecma_raise_type_error (ECMA_ERR_TRAP_FALSISH_PROPERTY_NON_CONFIGURABLE);
        -: 1106:      }
        -: 1107:
    #####: 1108:      ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -: 1109:
    #####: 1110:      if (ECMA_IS_VALUE_ERROR (extensible_target))
        -: 1111:      {
    #####: 1112:        return extensible_target;
        -: 1113:      }
        -: 1114:
    #####: 1115:      if (ecma_is_value_false (extensible_target))
        -: 1116:      {
    #####: 1117:        return ecma_raise_type_error (ECMA_ERR_TRAP_FALSISH_PROPERTY_TARGET_NOT_EXTENSIBLE);
        -: 1118:      }
        -: 1119:    }
        -: 1120:  }
        -: 1121:
        -: 1122:  /* 12. */
    #####: 1123:  return ecma_make_boolean_value (boolean_trap_result);
        -: 1124:} /* ecma_proxy_object_has */
        -: 1125:
        -: 1126:/**
        -: 1127: * The Proxy object [[Get]] internal routine
        -: 1128: *
        -: 1129: * See also:
        -: 1130: *          ECMAScript v6, 9.5.8
        -: 1131: *
        -: 1132: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -: 1133: *
        -: 1134: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 1135: *         value of the given nameddata property or the result of the getter function call - otherwise
        -: 1136: */
        -: 1137:ecma_value_t
    #####: 1138:ecma_proxy_object_get (ecma_object_t *obj_p, /**< proxy object */
        -: 1139:                       ecma_string_t *prop_name_p, /**< property name */
        -: 1140:                       ecma_value_t receiver) /**< receiver to invoke getter function */
        -: 1141:{
    #####: 1142:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####: 1143:  ECMA_CHECK_STACK_USAGE ();
        -: 1144:
    #####: 1145:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1146:
        -: 1147:  /* 2. */
    #####: 1148:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1149:
        -: 1150:  /* 3-6. */
    #####: 1151:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_GET);
        -: 1152:
        -: 1153:  /* 7. */
    #####: 1154:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1155:  {
    #####: 1156:    return trap;
        -: 1157:  }
        -: 1158:
        -: 1159:  /* 8. */
    #####: 1160:  if (ecma_is_value_undefined (trap))
        -: 1161:  {
    #####: 1162:    ecma_object_t *target_obj_p = ecma_get_object_from_value (proxy_obj_p->target);
    #####: 1163:    ecma_value_t result = ecma_op_object_get_with_receiver (target_obj_p, prop_name_p, receiver);
    #####: 1164:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1165:    return result;
        -: 1166:  }
        -: 1167:
    #####: 1168:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####: 1169:  ecma_value_t prop_value = ecma_make_prop_name_value (prop_name_p);
    #####: 1170:  ecma_value_t args[] = { proxy_obj_p->target, prop_value, receiver };
        -: 1171:
        -: 1172:  /* 9. */
    #####: 1173:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 3);
        -: 1174:
    #####: 1175:  ecma_deref_object (func_obj_p);
        -: 1176:
        -: 1177:  /* 10. */
    #####: 1178:  if (ECMA_IS_VALUE_ERROR (trap_result) || (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION))
        -: 1179:  {
    #####: 1180:    return trap_result;
        -: 1181:  }
        -: 1182:
        -: 1183:  /* 11. */
    #####: 1184:  ecma_property_descriptor_t target_desc;
    #####: 1185:  ecma_value_t status = ecma_op_get_own_property_descriptor (proxy_obj_p->target, prop_name_p, &target_desc);
        -: 1186:
        -: 1187:  /* 12. */
    #####: 1188:  if (ECMA_IS_VALUE_ERROR (status))
        -: 1189:  {
    #####: 1190:    ecma_free_value (trap_result);
    #####: 1191:    return status;
        -: 1192:  }
        -: 1193:
        -: 1194:  /* 13. */
    #####: 1195:  if (ecma_is_value_true (status))
        -: 1196:  {
    #####: 1197:    ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -: 1198:
    #####: 1199:    if ((target_desc.flags & JERRY_PROP_IS_VALUE_DEFINED) && !(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE)
    #####: 1200:        && !(target_desc.flags & JERRY_PROP_IS_WRITABLE) && !ecma_op_same_value (trap_result, target_desc.value))
        -: 1201:    {
    #####: 1202:      ret_value = ecma_raise_type_error (ECMA_ERR_INCORRECT_RETURN_PROXY_GET_TRAP);
        -: 1203:    }
    #####: 1204:    else if (!(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE)
    #####: 1205:             && (target_desc.flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED))
    #####: 1206:             && target_desc.get_p == NULL && !ecma_is_value_undefined (trap_result))
        -: 1207:    {
    #####: 1208:      ret_value = ecma_raise_type_error (ECMA_ERR_PROXY_PROPERTY_NOT_CONFIGURABLE_NOT_HAVE_GETTER);
        -: 1209:    }
        -: 1210:
    #####: 1211:    ecma_free_property_descriptor (&target_desc);
        -: 1212:
    #####: 1213:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -: 1214:    {
    #####: 1215:      ecma_free_value (trap_result);
        -: 1216:
    #####: 1217:      return ret_value;
        -: 1218:    }
        -: 1219:  }
        -: 1220:
        -: 1221:  /* 14. */
    #####: 1222:  return trap_result;
        -: 1223:} /* ecma_proxy_object_get */
        -: 1224:
        -: 1225:/**
        -: 1226: * The Proxy object [[Set]] internal routine
        -: 1227: *
        -: 1228: * See also:
        -: 1229: *          ECMAScript v6, 9.5.9
        -: 1230: *
        -: 1231: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -: 1232: *
        -: 1233: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 1234: *         ECMA_VALUE_{TRUE/FALSE} - depends on whether the propety can be set to the given object
        -: 1235: */
        -: 1236:ecma_value_t
    #####: 1237:ecma_proxy_object_set (ecma_object_t *obj_p, /**< proxy object */
        -: 1238:                       ecma_string_t *prop_name_p, /**< property name */
        -: 1239:                       ecma_value_t value, /**< value to set */
        -: 1240:                       ecma_value_t receiver, /**< receiver to invoke setter function */
        -: 1241:                       bool is_strict) /**< indicate strict mode */
        -: 1242:{
    #####: 1243:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####: 1244:  ECMA_CHECK_STACK_USAGE ();
        -: 1245:
    #####: 1246:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1247:
        -: 1248:  /* 2. */
    #####: 1249:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1250:
        -: 1251:  /* 3-6. */
    #####: 1252:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_SET);
        -: 1253:
        -: 1254:  /* 7. */
    #####: 1255:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1256:  {
    #####: 1257:    return trap;
        -: 1258:  }
        -: 1259:
    #####: 1260:  ecma_value_t target = proxy_obj_p->target;
    #####: 1261:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -: 1262:
        -: 1263:  /* 8. */
    #####: 1264:  if (ecma_is_value_undefined (trap))
        -: 1265:  {
    #####: 1266:    ecma_value_t result = ecma_op_object_put_with_receiver (target_obj_p, prop_name_p, value, receiver, is_strict);
    #####: 1267:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1268:    return result;
        -: 1269:  }
        -: 1270:
    #####: 1271:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####: 1272:  ecma_value_t prop_name_value = ecma_make_prop_name_value (prop_name_p);
    #####: 1273:  ecma_value_t args[] = { target, prop_name_value, value, receiver };
        -: 1274:
        -: 1275:  /* 9. */
    #####: 1276:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 4);
        -: 1277:
    #####: 1278:  ecma_deref_object (func_obj_p);
        -: 1279:
        -: 1280:  /* 10. */
    #####: 1281:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -: 1282:  {
    #####: 1283:    return trap_result;
        -: 1284:  }
        -: 1285:
    #####: 1286:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -: 1287:
    #####: 1288:  ecma_free_value (trap_result);
        -: 1289:
        -: 1290:  /* 11. */
    #####: 1291:  if (!boolean_trap_result)
        -: 1292:  {
    #####: 1293:    if (is_strict)
        -: 1294:    {
    #####: 1295:      return ecma_raise_type_error (ECMA_ERR_PROXY_TRAP_RETURNED_FALSISH);
        -: 1296:    }
        -: 1297:
    #####: 1298:    return ECMA_VALUE_FALSE;
        -: 1299:  }
        -: 1300:
    #####: 1301:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -: 1302:  {
    #####: 1303:    return ECMA_VALUE_TRUE;
        -: 1304:  }
        -: 1305:
        -: 1306:  /* 12. */
    #####: 1307:  ecma_property_descriptor_t target_desc;
        -: 1308:
    #####: 1309:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (target_obj_p, prop_name_p, &target_desc);
        -: 1310:
        -: 1311:  /* 13. */
    #####: 1312:  if (ECMA_IS_VALUE_ERROR (status))
        -: 1313:  {
    #####: 1314:    return status;
        -: 1315:  }
        -: 1316:
        -: 1317:  /* 14. */
    #####: 1318:  if (ecma_is_value_true (status))
        -: 1319:  {
    #####: 1320:    ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -: 1321:
    #####: 1322:    if ((target_desc.flags & JERRY_PROP_IS_VALUE_DEFINED) && !(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE)
    #####: 1323:        && !(target_desc.flags & JERRY_PROP_IS_WRITABLE) && !ecma_op_same_value (value, target_desc.value))
        -: 1324:    {
    #####: 1325:      ret_value = ecma_raise_type_error (ECMA_ERR_INCORRECT_RETURN_PROXY_SET_TRAP);
        -: 1326:    }
    #####: 1327:    else if (!(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE)
    #####: 1328:             && (target_desc.flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED))
    #####: 1329:             && target_desc.set_p == NULL)
        -: 1330:    {
    #####: 1331:      ret_value = ecma_raise_type_error (ECMA_ERR_TARGET_PROPERTY_CONFIGURE_ACCESSOR_WITHOUT_SETTER);
        -: 1332:    }
        -: 1333:
    #####: 1334:    ecma_free_property_descriptor (&target_desc);
        -: 1335:
    #####: 1336:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -: 1337:    {
    #####: 1338:      return ret_value;
        -: 1339:    }
        -: 1340:  }
        -: 1341:
        -: 1342:  /* 15. */
    #####: 1343:  return ECMA_VALUE_TRUE;
        -: 1344:} /* ecma_proxy_object_set */
        -: 1345:
        -: 1346:/**
        -: 1347: * The Proxy object [[Delete]] internal routine
        -: 1348: *
        -: 1349: * See also:
        -: 1350: *          ECMAScript v6, 9.5.10
        -: 1351: *
        -: 1352: * Note: Returned value is always a simple value so freeing it is unnecessary.
        -: 1353: *
        -: 1354: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 1355: *         ECMA_VALUE_{TRUE/FALSE} - depends on whether the propety can be deleted
        -: 1356: */
        -: 1357:ecma_value_t
    #####: 1358:ecma_proxy_object_delete_property (ecma_object_t *obj_p, /**< proxy object */
        -: 1359:                                   ecma_string_t *prop_name_p, /**< property name */
        -: 1360:                                   bool is_strict) /**< delete in strict mode? */
        -: 1361:{
    #####: 1362:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####: 1363:  ECMA_CHECK_STACK_USAGE ();
        -: 1364:
    #####: 1365:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1366:
        -: 1367:  /* 2. */
    #####: 1368:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1369:
        -: 1370:  /* 3-6.*/
    #####: 1371:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_DELETE_PROPERTY_UL);
        -: 1372:
        -: 1373:  /* 7. */
    #####: 1374:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1375:  {
    #####: 1376:    return trap;
        -: 1377:  }
        -: 1378:
    #####: 1379:  ecma_value_t target = proxy_obj_p->target;
    #####: 1380:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -: 1381:
        -: 1382:  /* 8. */
    #####: 1383:  if (ecma_is_value_undefined (trap))
        -: 1384:  {
    #####: 1385:    ecma_value_t result = ecma_op_object_delete (target_obj_p, prop_name_p, is_strict);
    #####: 1386:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1387:    return result;
        -: 1388:  }
        -: 1389:
    #####: 1390:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####: 1391:  ecma_value_t prop_name_value = ecma_make_prop_name_value (prop_name_p);
    #####: 1392:  ecma_value_t args[] = { target, prop_name_value };
        -: 1393:
        -: 1394:  /* 9. */
    #####: 1395:  ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 2);
        -: 1396:
    #####: 1397:  ecma_deref_object (func_obj_p);
        -: 1398:
        -: 1399:  /* 10. */
    #####: 1400:  if (ECMA_IS_VALUE_ERROR (trap_result))
        -: 1401:  {
    #####: 1402:    return trap_result;
        -: 1403:  }
        -: 1404:
    #####: 1405:  bool boolean_trap_result = ecma_op_to_boolean (trap_result);
        -: 1406:
    #####: 1407:  ecma_free_value (trap_result);
        -: 1408:
        -: 1409:  /* 11. */
    #####: 1410:  if (!boolean_trap_result)
        -: 1411:  {
    #####: 1412:    return ECMA_VALUE_FALSE;
        -: 1413:  }
        -: 1414:
    #####: 1415:  if (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION)
        -: 1416:  {
    #####: 1417:    return ECMA_VALUE_TRUE;
        -: 1418:  }
        -: 1419:
        -: 1420:  /* 12. */
    #####: 1421:  ecma_property_descriptor_t target_desc;
        -: 1422:
    #####: 1423:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (target_obj_p, prop_name_p, &target_desc);
        -: 1424:
        -: 1425:  /* 13. */
    #####: 1426:  if (ECMA_IS_VALUE_ERROR (status))
        -: 1427:  {
    #####: 1428:    return status;
        -: 1429:  }
        -: 1430:
        -: 1431:  /* 14. */
    #####: 1432:  if (ecma_is_value_false (status))
        -: 1433:  {
    #####: 1434:    return ECMA_VALUE_TRUE;
        -: 1435:  }
        -: 1436:
    #####: 1437:  ecma_value_t ret_value = ECMA_VALUE_TRUE;
        -: 1438:
        -: 1439:  /* 15. */
    #####: 1440:  if (!(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE))
        -: 1441:  {
    #####: 1442:    ret_value = ecma_raise_type_error (ECMA_ERR_TRAP_TRUISH_PROPERTY_NON_CONFIGURABLE);
        -: 1443:  }
        -: 1444:  /* ES11: 13-14 */
    #####: 1445:  ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -: 1446:
    #####: 1447:  if (!ecma_is_value_true (extensible_target))
        -: 1448:  {
    #####: 1449:    ret_value = ecma_raise_type_error (ECMA_ERR_TRAP_TRUISH_TARGET_NOT_EXTENSIBLE);
        -: 1450:  }
        -: 1451:
    #####: 1452:  ecma_free_property_descriptor (&target_desc);
        -: 1453:
        -: 1454:  /* 16. */
    #####: 1455:  return ret_value;
        -: 1456:} /* ecma_proxy_object_delete_property */
        -: 1457:
        -: 1458:/**
        -: 1459: * Helper method for the Proxy object [[OwnPropertyKeys]] operation
        -: 1460: *
        -: 1461: * See also:
        -: 1462: *          ECMAScript v6, 9.5.12 steps 21. 23.
        -: 1463: *
        -: 1464: * @return ECMA_VALUE_ERROR - if a target key is not in the unchecked_result_keys collection
        -: 1465: *         ECMA_VALUE_EMPTY - otherwise
        -: 1466: */
        -: 1467:static ecma_value_t
    #####: 1468:ecma_proxy_object_own_property_keys_helper (ecma_collection_t *target_collection, /**< target keys */
        -: 1469:                                            ecma_collection_t *unchecked_result_keys, /**< unchecked keys */
        -: 1470:                                            uint32_t *counter) /**< unchecked property counter */
        -: 1471:{
    #####: 1472:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -: 1473:
    #####: 1474:  for (uint32_t i = 0; i < target_collection->item_count; i++)
        -: 1475:  {
    #####: 1476:    ecma_string_t *current_prop_name = ecma_get_prop_name_from_value (target_collection->buffer_p[i]);
        -: 1477:
    #####: 1478:    ret_value = ECMA_VALUE_ERROR;
        -: 1479:
    #####: 1480:    for (uint32_t j = 0; j < unchecked_result_keys->item_count; j++)
        -: 1481:    {
    #####: 1482:      if (ecma_is_value_empty (unchecked_result_keys->buffer_p[j]))
        -: 1483:      {
    #####: 1484:        continue;
        -: 1485:      }
        -: 1486:
    #####: 1487:      ecma_string_t *unchecked_prop_name = ecma_get_prop_name_from_value (unchecked_result_keys->buffer_p[j]);
        -: 1488:
    #####: 1489:      if (ecma_compare_ecma_strings (current_prop_name, unchecked_prop_name))
        -: 1490:      {
    #####: 1491:        ecma_deref_ecma_string (unchecked_prop_name);
    #####: 1492:        ret_value = ECMA_VALUE_EMPTY;
    #####: 1493:        unchecked_result_keys->buffer_p[j] = ECMA_VALUE_EMPTY;
    #####: 1494:        (*counter)++;
        -: 1495:      }
        -: 1496:    }
        -: 1497:
    #####: 1498:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -: 1499:    {
    #####: 1500:      break;
        -: 1501:    }
        -: 1502:  }
        -: 1503:
    #####: 1504:  return ret_value;
        -: 1505:} /* ecma_proxy_object_own_property_keys_helper */
        -: 1506:
        -: 1507:/**
        -: 1508: * Helper method for checking the invariants in the Proxy object [[OwnPropertyKeys]] operation
        -: 1509: *
        -: 1510: * See also:
        -: 1511: *          ECMAScript v6, 9.5.12 steps 20-25.
        -: 1512: *
        -: 1513: * @return true - if none of the invariants got violated
        -: 1514: *         false - otherwise
        -: 1515: */
        -: 1516:static bool
    #####: 1517:ecma_proxy_check_invariants_for_own_prop_keys (ecma_collection_t *trap_result,
        -: 1518:                                               ecma_collection_t *target_non_configurable_keys,
        -: 1519:                                               ecma_collection_t *target_configurable_keys,
        -: 1520:                                               ecma_value_t extensible_target)
        -: 1521:{
        -: 1522:  /* 20. */
    #####: 1523:  ecma_collection_t *unchecked_result_keys = ecma_new_collection ();
        -: 1524:
    #####: 1525:  ecma_collection_append (unchecked_result_keys, trap_result->buffer_p, trap_result->item_count);
        -: 1526:
    #####: 1527:  for (uint32_t i = 0; i < unchecked_result_keys->item_count; i++)
        -: 1528:  {
    #####: 1529:    ecma_string_t *unchecked_prop_name = ecma_get_prop_name_from_value (unchecked_result_keys->buffer_p[i]);
    #####: 1530:    ecma_ref_ecma_string (unchecked_prop_name);
        -: 1531:  }
        -: 1532:
    #####: 1533:  bool check_ok = false;
    #####: 1534:  uint32_t unchecked_prop_name_counter = 0;
        -: 1535:
        -: 1536:  /* 21. */
    #####: 1537:  if (ECMA_IS_VALUE_ERROR (ecma_proxy_object_own_property_keys_helper (target_non_configurable_keys,
        -: 1538:                                                                       unchecked_result_keys,
        -: 1539:                                                                       &unchecked_prop_name_counter)))
        -: 1540:  {
    #####: 1541:    ecma_raise_type_error (ECMA_ERR_TRAP_RESULT_NOT_INCLUDE_ALL_NON_CONFIGURABLE_KEYS);
        -: 1542:  }
        -: 1543:  /* 22. */
    #####: 1544:  else if (ecma_is_value_true (extensible_target))
        -: 1545:  {
    #####: 1546:    check_ok = true;
        -: 1547:  }
        -: 1548:  /* 23. */
    #####: 1549:  else if (ECMA_IS_VALUE_ERROR (ecma_proxy_object_own_property_keys_helper (target_configurable_keys,
        -: 1550:                                                                            unchecked_result_keys,
        -: 1551:                                                                            &unchecked_prop_name_counter)))
        -: 1552:  {
    #####: 1553:    ecma_raise_type_error (ECMA_ERR_TRAP_RESULT_NOT_INCLUDE_ALL_CONFIGURABLE_KEYS);
        -: 1554:  }
        -: 1555:  /* 24. */
    #####: 1556:  else if (unchecked_result_keys->item_count != unchecked_prop_name_counter)
        -: 1557:  {
    #####: 1558:    ecma_raise_type_error (ECMA_ERR_TRAP_EXTRA_KEYS_FOR_A_NON_EXTENSIBLE_TARGET);
        -: 1559:  }
        -: 1560:  /* 25. */
        -: 1561:  else
        -: 1562:  {
    #####: 1563:    check_ok = true;
        -: 1564:  }
        -: 1565:
    #####: 1566:  ecma_collection_free (unchecked_result_keys);
        -: 1567:
    #####: 1568:  return check_ok;
        -: 1569:} /* ecma_proxy_check_invariants_for_own_prop_keys */
        -: 1570:
        -: 1571:/**
        -: 1572: * The Proxy object [[OwnPropertyKeys]] internal routine
        -: 1573: *
        -: 1574: * See also:
        -: 1575: *          ECMAScript v11, 9.5.11
        -: 1576: *
        -: 1577: * Note: If the returned collection is not NULL, it must be freed with
        -: 1578: *       ecma_collection_free if it is no longer needed
        -: 1579: *
        -: 1580: * @return NULL - if the operation fails
        -: 1581: *         pointer to a newly allocated list of property names - otherwise
        -: 1582: */
        -: 1583:ecma_collection_t *
    #####: 1584:ecma_proxy_object_own_property_keys (ecma_object_t *obj_p) /**< proxy object */
        -: 1585:{
    #####: 1586:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####: 1587:  ECMA_CHECK_STACK_USAGE_RETURN (NULL);
        -: 1588:
    #####: 1589:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1590:
        -: 1591:  /* 1. */
    #####: 1592:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1593:
        -: 1594:  /* 2-5. */
    #####: 1595:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_OWN_KEYS_UL);
        -: 1596:
    #####: 1597:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1598:  {
    #####: 1599:    return NULL;
        -: 1600:  }
        -: 1601:
    #####: 1602:  ecma_value_t target = proxy_obj_p->target;
    #####: 1603:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -: 1604:
        -: 1605:  /* 6. */
    #####: 1606:  if (ecma_is_value_undefined (trap))
        -: 1607:  {
    #####: 1608:    ecma_collection_t *result = ecma_op_object_own_property_keys (target_obj_p, JERRY_PROPERTY_FILTER_ALL);
    #####: 1609:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1610:    return result;
        -: 1611:  }
        -: 1612:
    #####: 1613:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
        -: 1614:
        -: 1615:  /* 7. */
    #####: 1616:  ecma_value_t trap_result_array = ecma_op_function_call (func_obj_p, handler, &target, 1);
        -: 1617:
    #####: 1618:  ecma_deref_object (func_obj_p);
        -: 1619:
    #####: 1620:  if (ECMA_IS_VALUE_ERROR (trap_result_array))
        -: 1621:  {
    #####: 1622:    return NULL;
        -: 1623:  }
        -: 1624:
        -: 1625:  /* 8. */
    #####: 1626:  ecma_collection_t *trap_result = ecma_op_create_list_from_array_like (trap_result_array, true);
        -: 1627:
    #####: 1628:  ecma_free_value (trap_result_array);
        -: 1629:
    #####: 1630:  if (trap_result == NULL || (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION))
        -: 1631:  {
    #####: 1632:    return trap_result;
        -: 1633:  }
        -: 1634:
        -: 1635:  /* 9. */
    #####: 1636:  if (ecma_collection_check_duplicated_entries (trap_result))
        -: 1637:  {
    #####: 1638:    ecma_collection_free (trap_result);
    #####: 1639:    ecma_raise_type_error (ECMA_ERR_TRAP_WITH_DUPLICATED_ENTRIES);
    #####: 1640:    return NULL;
        -: 1641:  }
        -: 1642:
        -: 1643:  /* 10. */
    #####: 1644:  ecma_value_t extensible_target = ecma_builtin_object_object_is_extensible (target_obj_p);
        -: 1645:
    #####: 1646:  if (ECMA_IS_VALUE_ERROR (extensible_target))
        -: 1647:  {
    #####: 1648:    ecma_collection_free (trap_result);
    #####: 1649:    return NULL;
        -: 1650:  }
        -: 1651:
        -: 1652:  /* 11. */
    #####: 1653:  ecma_collection_t *target_keys = ecma_op_object_own_property_keys (target_obj_p, JERRY_PROPERTY_FILTER_ALL);
        -: 1654:
    #####: 1655:  if (target_keys == NULL)
        -: 1656:  {
    #####: 1657:    ecma_collection_free (trap_result);
    #####: 1658:    return target_keys;
        -: 1659:  }
        -: 1660:
        -: 1661:  /* 14. */
    #####: 1662:  ecma_collection_t *target_configurable_keys = ecma_new_collection ();
        -: 1663:
        -: 1664:  /* 15. */
    #####: 1665:  ecma_collection_t *target_non_configurable_keys = ecma_new_collection ();
        -: 1666:
    #####: 1667:  ecma_collection_t *ret_value = NULL;
        -: 1668:
        -: 1669:  /* 16. */
    #####: 1670:  for (uint32_t i = 0; i < target_keys->item_count; i++)
        -: 1671:  {
    #####: 1672:    ecma_property_descriptor_t target_desc;
        -: 1673:
    #####: 1674:    ecma_string_t *prop_name_p = ecma_get_prop_name_from_value (target_keys->buffer_p[i]);
        -: 1675:
    #####: 1676:    ecma_value_t status = ecma_op_object_get_own_property_descriptor (target_obj_p, prop_name_p, &target_desc);
        -: 1677:
    #####: 1678:    if (ECMA_IS_VALUE_ERROR (status))
        -: 1679:    {
    #####: 1680:      ecma_collection_free (trap_result);
    #####: 1681:      goto free_target_collections;
        -: 1682:    }
        -: 1683:
    #####: 1684:    ecma_value_t prop_value = ecma_make_prop_name_value (prop_name_p);
        -: 1685:
    #####: 1686:    if (ecma_is_value_true (status) && !(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE))
        -: 1687:    {
    #####: 1688:      ecma_collection_push_back (target_non_configurable_keys, prop_value);
        -: 1689:    }
        -: 1690:    else
        -: 1691:    {
    #####: 1692:      ecma_collection_push_back (target_configurable_keys, prop_value);
        -: 1693:    }
        -: 1694:
    #####: 1695:    if (ecma_is_value_true (status))
        -: 1696:    {
    #####: 1697:      ecma_free_property_descriptor (&target_desc);
        -: 1698:    }
        -: 1699:  }
        -: 1700:
        -: 1701:  /* 17. */
    #####: 1702:  if (ecma_is_value_true (extensible_target) && target_non_configurable_keys->item_count == 0)
        -: 1703:  {
    #####: 1704:    ret_value = trap_result;
        -: 1705:  }
        -: 1706:  /* 18-22. */
    #####: 1707:  else if (ecma_proxy_check_invariants_for_own_prop_keys (trap_result,
        -: 1708:                                                          target_non_configurable_keys,
        -: 1709:                                                          target_configurable_keys,
        -: 1710:                                                          extensible_target))
        -: 1711:  {
    #####: 1712:    ret_value = trap_result;
        -: 1713:  }
        -: 1714:  else
        -: 1715:  {
    #####: 1716:    JERRY_ASSERT (ret_value == NULL);
    #####: 1717:    ecma_collection_free (trap_result);
        -: 1718:  }
        -: 1719:
    #####: 1720:free_target_collections:
    #####: 1721:  ecma_collection_destroy (target_keys);
    #####: 1722:  ecma_collection_free (target_configurable_keys);
    #####: 1723:  ecma_collection_free (target_non_configurable_keys);
        -: 1724:
        -: 1725:  /* 23. */
    #####: 1726:  return ret_value;
        -: 1727:} /* ecma_proxy_object_own_property_keys */
        -: 1728:
        -: 1729:/**
        -: 1730: * The Proxy object [[Call]] internal routine
        -: 1731: *
        -: 1732: * See also:
        -: 1733: *          ECMAScript v6, 9.5.13
        -: 1734: *
        -: 1735: * Note: Returned value must be freed with ecma_free_value.
        -: 1736: *
        -: 1737: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 1738: *         result of the function call - otherwise
        -: 1739: */
        -: 1740:ecma_value_t
    #####: 1741:ecma_proxy_object_call (ecma_object_t *obj_p, /**< proxy object */
        -: 1742:                        ecma_value_t this_argument, /**< this argument to invoke the function */
        -: 1743:                        const ecma_value_t *args_p, /**< argument list */
        -: 1744:                        uint32_t argc) /**< number of arguments */
        -: 1745:{
    #####: 1746:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
        -: 1747:
    #####: 1748:  if (!ecma_op_proxy_object_is_callable (obj_p))
        -: 1749:  {
    #####: 1750:    return ecma_raise_type_error (ECMA_ERR_EXPECTED_A_FUNCTION);
        -: 1751:  }
        -: 1752:
    #####: 1753:  ECMA_CHECK_STACK_USAGE ();
        -: 1754:
    #####: 1755:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1756:
        -: 1757:  /* 1. */
    #####: 1758:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1759:
        -: 1760:  /* 2-5.*/
    #####: 1761:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_APPLY);
        -: 1762:
        -: 1763:  /* 6. */
    #####: 1764:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1765:  {
    #####: 1766:    return trap;
        -: 1767:  }
        -: 1768:
    #####: 1769:  ecma_value_t target = proxy_obj_p->target;
        -: 1770:
        -: 1771:  /* 7. */
    #####: 1772:  if (ecma_is_value_undefined (trap))
        -: 1773:  {
    #####: 1774:    ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
    #####: 1775:    ecma_value_t result = ecma_op_function_call (target_obj_p, this_argument, args_p, argc);
    #####: 1776:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1777:    return result;
        -: 1778:  }
        -: 1779:
        -: 1780:  /* 8. */
    #####: 1781:  ecma_value_t args_array = ecma_op_new_array_object_from_buffer (args_p, argc);
    #####: 1782:  ecma_value_t value_array[] = { target, this_argument, args_array };
    #####: 1783:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
        -: 1784:  /* 9. */
    #####: 1785:  ecma_value_t ret_value = ecma_op_function_call (func_obj_p, handler, value_array, 3);
    #####: 1786:  ecma_deref_object (func_obj_p);
    #####: 1787:  ecma_free_object (args_array);
        -: 1788:
    #####: 1789:  return ret_value;
        -: 1790:} /* ecma_proxy_object_call */
        -: 1791:
        -: 1792:/**
        -: 1793: * The Proxy object [[Construct]] internal routine
        -: 1794: *
        -: 1795: * See also:
        -: 1796: *          ECMAScript v6, 9.5.14
        -: 1797: *
        -: 1798: * Note: Returned value must be freed with ecma_free_value.
        -: 1799: *
        -: 1800: * @return ECMA_VALUE_ERROR - if the operation fails
        -: 1801: *         result of the construct call - otherwise
        -: 1802: */
        -: 1803:ecma_value_t
    #####: 1804:ecma_proxy_object_construct (ecma_object_t *obj_p, /**< proxy object */
        -: 1805:                             ecma_object_t *new_target_p, /**< new target */
        -: 1806:                             const ecma_value_t *args_p, /**< argument list */
        -: 1807:                             uint32_t argc) /**< number of arguments */
        -: 1808:{
    #####: 1809:  JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));
    #####: 1810:  ECMA_CHECK_STACK_USAGE ();
        -: 1811:
    #####: 1812:  ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;
        -: 1813:
        -: 1814:  /* 1. */
    #####: 1815:  ecma_value_t handler = proxy_obj_p->handler;
        -: 1816:
        -: 1817:  /* 2-5. */
    #####: 1818:  ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_CONSTRUCT);
        -: 1819:
        -: 1820:  /* 6. */
    #####: 1821:  if (ECMA_IS_VALUE_ERROR (trap))
        -: 1822:  {
    #####: 1823:    return trap;
        -: 1824:  }
        -: 1825:
    #####: 1826:  ecma_value_t target = proxy_obj_p->target;
    #####: 1827:  ecma_object_t *target_obj_p = ecma_get_object_from_value (target);
        -: 1828:
        -: 1829:  /* 7. */
    #####: 1830:  if (ecma_is_value_undefined (trap))
        -: 1831:  {
    #####: 1832:    JERRY_ASSERT (ecma_object_is_constructor (target_obj_p));
        -: 1833:
    #####: 1834:    ecma_value_t result = ecma_op_function_construct (target_obj_p, new_target_p, args_p, argc);
    #####: 1835:    JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();
    #####: 1836:    return result;
        -: 1837:  }
        -: 1838:
        -: 1839:  /* 8. */
    #####: 1840:  ecma_value_t args_array = ecma_op_new_array_object_from_buffer (args_p, argc);
        -: 1841:
    #####: 1842:  ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);
    #####: 1843:  ecma_value_t new_target_value = ecma_make_object_value (new_target_p);
    #####: 1844:  ecma_value_t function_call_args[] = { target, args_array, new_target_value };
        -: 1845:
        -: 1846:  /* 9. */
    #####: 1847:  ecma_value_t new_obj = ecma_op_function_call (func_obj_p, handler, function_call_args, 3);
        -: 1848:
    #####: 1849:  ecma_free_object (args_array);
    #####: 1850:  ecma_deref_object (func_obj_p);
        -: 1851:
        -: 1852:  /* 10 .*/
    #####: 1853:  if (ECMA_IS_VALUE_ERROR (new_obj))
        -: 1854:  {
    #####: 1855:    return new_obj;
        -: 1856:  }
        -: 1857:
        -: 1858:  /* 11. */
    #####: 1859:  if (!ecma_is_value_object (new_obj))
        -: 1860:  {
    #####: 1861:    ecma_free_value (new_obj);
        -: 1862:
    #####: 1863:    return ecma_raise_type_error (ECMA_ERR_TRAP_MUST_RETURN_WITH_AN_OBJECT);
        -: 1864:  }
        -: 1865:
        -: 1866:  /* 12. */
    #####: 1867:  return new_obj;
        -: 1868:} /* ecma_proxy_object_construct */
        -: 1869:
        -: 1870:#endif /* JERRY_BUILTIN_PROXY */
        -: 1871:
        -: 1872:/**
        -: 1873: * @}
        -: 1874: * @}
        -: 1875: */
