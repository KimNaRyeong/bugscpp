        -:    0:Source:/home/workspace/tests/unit-core/test-to-length.c
        -:    0:Programs:297
        -:    1:/*
        -:    2: * Copyright JS Foundation and other contributors, http://js.foundation
        -:    3: *
        -:    4: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    5: * you may not use this file except in compliance with the License.
        -:    6: * You may obtain a copy of the License at
        -:    7: *
        -:    8: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    9: *
        -:   10: * Unless required by applicable law or agreed to in writing, software
        -:   11: * distributed under the License is distributed on an "AS IS" BASIS
        -:   12: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   13: * See the License for the specific language governing permissions and
        -:   14: * limitations under the License.
        -:   15: */
        -:   16:
        -:   17:#include "jerryscript-types.h"
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "ecma-conversion.h"
        -:   21:#include "ecma-errors.h"
        -:   22:#include "ecma-exceptions.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers-number.h"
        -:   25:#include "ecma-helpers.h"
        -:   26:#include "ecma-init-finalize.h"
        -:   27:
        -:   28:#include "jcontext.h"
        -:   29:#include "lit-globals.h"
        -:   30:#include "test-common.h"
        -:   31:
        -:   32:/**
        -:   33: * Unit test's main function.
        -:   34: */
        -:   35:int
    #####:   36:main (void)
        -:   37:{
    #####:   38:  TEST_INIT ();
        -:   39:
    #####:   40:  jmem_init ();
    #####:   41:  ecma_init ();
        -:   42:
        -:   43:  ecma_length_t num;
        -:   44:
    #####:   45:  ecma_value_t int_num = ecma_make_int32_value (123);
        -:   46:
    #####:   47:  ecma_value_t result = ecma_op_to_length (int_num, &num);
        -:   48:
    #####:   49:  ecma_free_value (int_num);
        -:   50:
    #####:   51:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
    #####:   52:  TEST_ASSERT (num == 123);
        -:   53:
        -:   54:  /* 1, 3 */
    #####:   55:  ecma_value_t error_throw = ecma_raise_standard_error (JERRY_ERROR_TYPE, ECMA_ERR_INVALID_ARRAY_LENGTH);
        -:   56:
    #####:   57:  result = ecma_op_to_length (error_throw, &num);
        -:   58:
    #####:   59:  jcontext_release_exception ();
        -:   60:
    #####:   61:  TEST_ASSERT (ECMA_IS_VALUE_ERROR (result));
        -:   62:
        -:   63:  /* zero */
    #####:   64:  ecma_value_t zero = ecma_make_int32_value (0);
        -:   65:
    #####:   66:  result = ecma_op_to_length (zero, &num);
        -:   67:
    #####:   68:  ecma_free_value (zero);
        -:   69:
    #####:   70:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
    #####:   71:  TEST_ASSERT (num == 0);
        -:   72:
        -:   73:  /* negative */
    #####:   74:  ecma_value_t negative = ecma_make_number_value (-26.5973f);
        -:   75:
    #####:   76:  result = ecma_op_to_length (negative, &num);
        -:   77:
    #####:   78:  ecma_free_value (negative);
        -:   79:
    #####:   80:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
        -:   81:#if JERRY_ESNEXT
    #####:   82:  TEST_ASSERT (num == 0);
        -:   83:#else /* !JERRY_ESNEXT */
    #####:   84:  TEST_ASSERT (num == 4294967270);
        -:   85:#endif /* JERRY_ESNEXT */
        -:   86:
        -:   87:  /* +infinity */
    #####:   88:  ecma_value_t positive_infinity = ecma_make_number_value (ecma_number_make_infinity (false));
        -:   89:
    #####:   90:  result = ecma_op_to_length (positive_infinity, &num);
        -:   91:
    #####:   92:  ecma_free_value (positive_infinity);
        -:   93:
    #####:   94:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
        -:   95:#if JERRY_ESNEXT
    #####:   96:  TEST_ASSERT ((ecma_number_t) num == ECMA_NUMBER_MAX_SAFE_INTEGER);
        -:   97:#else /* !JERRY_ESNEXT */
    #####:   98:  TEST_ASSERT (num == 0);
        -:   99:#endif /* JERRY_ESNEXT */
        -:  100:
        -:  101:  /* -infinity */
    #####:  102:  ecma_value_t negative_infinity = ecma_make_number_value (ecma_number_make_infinity (true));
        -:  103:
    #####:  104:  result = ecma_op_to_length (negative_infinity, &num);
        -:  105:
    #####:  106:  ecma_free_value (negative_infinity);
        -:  107:
    #####:  108:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
    #####:  109:  TEST_ASSERT (num == 0);
        -:  110:
        -:  111:  /* NaN */
    #####:  112:  ecma_value_t nan = ecma_make_nan_value ();
        -:  113:
    #####:  114:  result = ecma_op_to_length (nan, &num);
        -:  115:
    #####:  116:  ecma_free_value (nan);
        -:  117:
    #####:  118:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
    #####:  119:  TEST_ASSERT (num == 0);
        -:  120:
    #####:  121:  ecma_finalize ();
    #####:  122:  jmem_finalize ();
        -:  123:
        -:  124:  return 0;
        -:  125:} /* main */
