        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-date-prototype.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <math.h>
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-builtin-helpers.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-function-object.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-objects-general.h"
        -:   26:#include "ecma-objects.h"
        -:   27:
        -:   28:#if JERRY_BUILTIN_DATE
        -:   29:
        -:   30:#define ECMA_BUILTINS_INTERNAL
        -:   31:#include "ecma-builtins-internal.h"
        -:   32:
        -:   33:/**
        -:   34: * This object has a custom dispatch function.
        -:   35: */
        -:   36:#define BUILTIN_CUSTOM_DISPATCH
        -:   37:
        -:   38:/**
        -:   39: * Checks whether the function uses UTC time zone.
        -:   40: */
        -:   41:#define BUILTIN_DATE_FUNCTION_IS_UTC(builtin_routine_id) \
        -:   42:  (((builtin_routine_id) -ECMA_DATE_PROTOTYPE_GET_FULL_YEAR) & 0x1)
        -:   43:
        -:   44:/**
        -:   45: * List of built-in routine identifiers.
        -:   46: */
        -:   47:enum
        -:   48:{
        -:   49:  ECMA_DATE_PROTOTYPE_ROUTINE_START = 0,
        -:   50:
        -:   51:  ECMA_DATE_PROTOTYPE_GET_FULL_YEAR, /* ECMA-262 v5 15.9.5.10 */
        -:   52:  ECMA_DATE_PROTOTYPE_GET_UTC_FULL_YEAR, /* ECMA-262 v5 15.9.5.11 */
        -:   53:#if JERRY_BUILTIN_ANNEXB
        -:   54:  ECMA_DATE_PROTOTYPE_GET_YEAR, /* ECMA-262 v5, AnnexB.B.2.4 */
        -:   55:  ECMA_DATE_PROTOTYPE_GET_UTC_YEAR, /* has no UTC variant */
        -:   56:#endif /* JERRY_BUILTIN_ANNEXB */
        -:   57:  ECMA_DATE_PROTOTYPE_GET_MONTH, /* ECMA-262 v5 15.9.5.12 */
        -:   58:  ECMA_DATE_PROTOTYPE_GET_UTC_MONTH, /* ECMA-262 v5 15.9.5.13 */
        -:   59:  ECMA_DATE_PROTOTYPE_GET_DATE, /* ECMA-262 v5 15.9.5.14 */
        -:   60:  ECMA_DATE_PROTOTYPE_GET_UTC_DATE, /* ECMA-262 v5 15.9.5.15 */
        -:   61:  ECMA_DATE_PROTOTYPE_GET_DAY, /* ECMA-262 v5 15.9.5.16 */
        -:   62:  ECMA_DATE_PROTOTYPE_GET_UTC_DAY, /* ECMA-262 v5 15.9.5.17 */
        -:   63:  ECMA_DATE_PROTOTYPE_GET_HOURS, /* ECMA-262 v5 15.9.5.18 */
        -:   64:  ECMA_DATE_PROTOTYPE_GET_UTC_HOURS, /* ECMA-262 v5 15.9.5.19 */
        -:   65:  ECMA_DATE_PROTOTYPE_GET_MINUTES, /* ECMA-262 v5 15.9.5.20 */
        -:   66:  ECMA_DATE_PROTOTYPE_GET_UTC_MINUTES, /* ECMA-262 v5 15.9.5.21 */
        -:   67:  ECMA_DATE_PROTOTYPE_GET_SECONDS, /* ECMA-262 v5 15.9.5.22 */
        -:   68:  ECMA_DATE_PROTOTYPE_GET_UTC_SECONDS, /* ECMA-262 v5 15.9.5.23 */
        -:   69:  ECMA_DATE_PROTOTYPE_GET_MILLISECONDS, /* ECMA-262 v5 15.9.5.24 */
        -:   70:  ECMA_DATE_PROTOTYPE_GET_UTC_MILLISECONDS, /* ECMA-262 v5 15.9.5.25 */
        -:   71:  ECMA_DATE_PROTOTYPE_GET_TIMEZONE_OFFSET, /* has no local time zone variant */
        -:   72:  ECMA_DATE_PROTOTYPE_GET_UTC_TIMEZONE_OFFSET, /* ECMA-262 v5 15.9.5.26 */
        -:   73:
        -:   74:  ECMA_DATE_PROTOTYPE_SET_FULL_YEAR, /* ECMA-262 v5, 15.9.5.40 */
        -:   75:  ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR, /* ECMA-262 v5, 15.9.5.41 */
        -:   76:#if JERRY_BUILTIN_ANNEXB
        -:   77:  ECMA_DATE_PROTOTYPE_SET_YEAR, /* ECMA-262 v5, ECMA-262 v5, AnnexB.B.2.5 */
        -:   78:  ECMA_DATE_PROTOTYPE_SET_UTC_YEAR, /* has no UTC variant */
        -:   79:#endif /* JERRY_BUILTIN_ANNEXB */
        -:   80:  ECMA_DATE_PROTOTYPE_SET_MONTH, /* ECMA-262 v5, 15.9.5.38 */
        -:   81:  ECMA_DATE_PROTOTYPE_SET_UTC_MONTH, /* ECMA-262 v5, 15.9.5.39 */
        -:   82:  ECMA_DATE_PROTOTYPE_SET_DATE, /* ECMA-262 v5, 15.9.5.36 */
        -:   83:  ECMA_DATE_PROTOTYPE_SET_UTC_DATE, /* ECMA-262 v5, 15.9.5.37 */
        -:   84:  ECMA_DATE_PROTOTYPE_SET_HOURS, /* ECMA-262 v5, 15.9.5.34 */
        -:   85:  ECMA_DATE_PROTOTYPE_SET_UTC_HOURS, /* ECMA-262 v5, 15.9.5.35 */
        -:   86:  ECMA_DATE_PROTOTYPE_SET_MINUTES, /* ECMA-262 v5, 15.9.5.32 */
        -:   87:  ECMA_DATE_PROTOTYPE_SET_UTC_MINUTES, /* ECMA-262 v5, 15.9.5.33 */
        -:   88:  ECMA_DATE_PROTOTYPE_SET_SECONDS, /* ECMA-262 v5, 15.9.5.30 */
        -:   89:  ECMA_DATE_PROTOTYPE_SET_UTC_SECONDS, /* ECMA-262 v5, 15.9.5.31 */
        -:   90:  ECMA_DATE_PROTOTYPE_SET_MILLISECONDS, /* ECMA-262 v5, 15.9.5.28 */
        -:   91:  ECMA_DATE_PROTOTYPE_SET_UTC_MILLISECONDS, /* ECMA-262 v5, 15.9.5.29 */
        -:   92:
        -:   93:  ECMA_DATE_PROTOTYPE_TO_STRING, /* ECMA-262 v5, 15.9.5.2 */
        -:   94:  ECMA_DATE_PROTOTYPE_TO_DATE_STRING, /* ECMA-262 v5, 15.9.5.3 */
        -:   95:#if !JERRY_ESNEXT
        -:   96:  ECMA_DATE_PROTOTYPE_TO_UTC_STRING, /* ECMA-262 v5, 15.9.5.42 */
        -:   97:#endif /* JERRY_ESNEXT */
        -:   98:  ECMA_DATE_PROTOTYPE_TO_TIME_STRING, /* ECMA-262 v5, 15.9.5.4 */
        -:   99:  ECMA_DATE_PROTOTYPE_TO_ISO_STRING, /* ECMA-262 v5, 15.9.5.43 */
        -:  100:
        -:  101:  ECMA_DATE_PROTOTYPE_GET_TIME, /* ECMA-262 v5, 15.9.5.9 */
        -:  102:  ECMA_DATE_PROTOTYPE_SET_TIME, /* ECMA-262 v5, 15.9.5.27 */
        -:  103:  ECMA_DATE_PROTOTYPE_TO_JSON, /* ECMA-262 v5, 15.9.5.44 */
        -:  104:
        -:  105:#if JERRY_ESNEXT
        -:  106:  ECMA_DATE_PROTOTYPE_TO_PRIMITIVE, /*  ECMA-262 v6 20.3.4.45 */
        -:  107:#endif /* JERRY_ESNEXT */
        -:  108:};
        -:  109:
        -:  110:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-date-prototype.inc.h"
        -:  111:#define BUILTIN_UNDERSCORED_ID  date_prototype
        -:  112:#include "ecma-builtin-internal-routines-template.inc.h"
        -:  113:
        -:  114:/** \addtogroup ecma ECMA
        -:  115: * @{
        -:  116: *
        -:  117: * \addtogroup ecmabuiltins
        -:  118: * @{
        -:  119: *
        -:  120: * \addtogroup dateprototype ECMA Date.prototype object built-in
        -:  121: * @{
        -:  122: */
        -:  123:
        -:  124:/**
        -:  125: * The Date.prototype object's 'toJSON' routine
        -:  126: *
        -:  127: * See also:
        -:  128: *          ECMA-262 v5, 15.9.5.44
        -:  129: *
        -:  130: * @return ecma value
        -:  131: *         Returned value must be freed with ecma_free_value.
        -:  132: */
        -:  133:static ecma_value_t
    #####:  134:ecma_builtin_date_prototype_to_json (ecma_value_t this_arg) /**< this argument */
        -:  135:{
        -:  136:  /* 1. */
    #####:  137:  ecma_value_t obj = ecma_op_to_object (this_arg);
        -:  138:
    #####:  139:  if (ECMA_IS_VALUE_ERROR (obj))
        -:  140:  {
    #####:  141:    return obj;
        -:  142:  }
        -:  143:
        -:  144:  /* 2. */
    #####:  145:  ecma_value_t tv = ecma_op_to_primitive (obj, ECMA_PREFERRED_TYPE_NUMBER);
        -:  146:
    #####:  147:  if (ECMA_IS_VALUE_ERROR (tv))
        -:  148:  {
    #####:  149:    ecma_free_value (obj);
    #####:  150:    return tv;
        -:  151:  }
        -:  152:
        -:  153:  /* 3. */
    #####:  154:  if (ecma_is_value_number (tv))
        -:  155:  {
    #####:  156:    ecma_number_t num_value = ecma_get_number_from_value (tv);
        -:  157:
    #####:  158:    ecma_free_value (tv);
        -:  159:
    #####:  160:    if (ecma_number_is_nan (num_value) || ecma_number_is_infinity (num_value))
        -:  161:    {
    #####:  162:      ecma_free_value (obj);
    #####:  163:      return ECMA_VALUE_NULL;
        -:  164:    }
        -:  165:  }
        -:  166:  else
        -:  167:  {
    #####:  168:    ecma_free_value (tv);
        -:  169:  }
        -:  170:
    #####:  171:  ecma_object_t *value_obj_p = ecma_get_object_from_value (obj);
        -:  172:
        -:  173:  /* 4. */
    #####:  174:  ecma_value_t ret_value = ecma_op_invoke_by_magic_id (obj, LIT_MAGIC_STRING_TO_ISO_STRING_UL, NULL, 0);
        -:  175:
    #####:  176:  ecma_deref_object (value_obj_p);
        -:  177:
    #####:  178:  return ret_value;
        -:  179:} /* ecma_builtin_date_prototype_to_json */
        -:  180:
        -:  181:#if JERRY_ESNEXT
        -:  182:/**
        -:  183: * The Date.prototype object's toPrimitive routine
        -:  184: *
        -:  185: * See also:
        -:  186: *          ECMA-262 v6, 20.3.4.45
        -:  187: *
        -:  188: * @return ecma value
        -:  189: *         Returned value must be freed with ecma_free_value.
        -:  190: */
        -:  191:static ecma_value_t
    #####:  192:ecma_builtin_date_prototype_to_primitive (ecma_value_t this_arg, /**< this argument */
        -:  193:                                          ecma_value_t hint_arg) /**< {"default", "number", "string"} */
        -:  194:{
    #####:  195:  if (ecma_is_value_object (this_arg) && ecma_is_value_string (hint_arg))
        -:  196:  {
    #####:  197:    ecma_string_t *hint_str_p = ecma_get_string_from_value (hint_arg);
        -:  198:
    #####:  199:    ecma_preferred_type_hint_t hint = ECMA_PREFERRED_TYPE_NO;
        -:  200:
    #####:  201:    if (hint_str_p == ecma_get_magic_string (LIT_MAGIC_STRING_STRING)
    #####:  202:        || hint_str_p == ecma_get_magic_string (LIT_MAGIC_STRING_DEFAULT))
        -:  203:    {
    #####:  204:      hint = ECMA_PREFERRED_TYPE_STRING;
        -:  205:    }
    #####:  206:    else if (hint_str_p == ecma_get_magic_string (LIT_MAGIC_STRING_NUMBER))
        -:  207:    {
    #####:  208:      hint = ECMA_PREFERRED_TYPE_NUMBER;
        -:  209:    }
        -:  210:
    #####:  211:    if (hint != ECMA_PREFERRED_TYPE_NO)
        -:  212:    {
    #####:  213:      return ecma_op_general_object_ordinary_value (ecma_get_object_from_value (this_arg), hint);
        -:  214:    }
        -:  215:  }
        -:  216:
    #####:  217:  return ecma_raise_type_error (ECMA_ERR_INVALID_ARGUMENT_TYPE_IN_TOPRIMITIVE);
        -:  218:} /* ecma_builtin_date_prototype_to_primitive */
        -:  219:#endif /* JERRY_ESNEXT */
        -:  220:
        -:  221:/**
        -:  222: * Dispatch get date functions
        -:  223: *
        -:  224: * @return ecma value
        -:  225: *         Returned value must be freed with ecma_free_value.
        -:  226: */
        -:  227:static ecma_value_t
    #####:  228:ecma_builtin_date_prototype_dispatch_get (uint16_t builtin_routine_id, /**< built-in wide routine
        -:  229:                                                                        *   identifier */
        -:  230:                                          ecma_number_t date_value) /**< date converted to number */
        -:  231:{
    #####:  232:  if (ecma_number_is_nan (date_value))
        -:  233:  {
    #####:  234:    return ecma_make_nan_value ();
        -:  235:  }
        -:  236:
        -:  237:  int32_t result;
        -:  238:
    #####:  239:  switch (builtin_routine_id)
        -:  240:  {
    #####:  241:    case ECMA_DATE_PROTOTYPE_GET_FULL_YEAR:
        -:  242:    case ECMA_DATE_PROTOTYPE_GET_UTC_FULL_YEAR:
        -:  243:    {
    #####:  244:      result = ecma_date_year_from_time (date_value);
    #####:  245:      break;
        -:  246:    }
        -:  247:#if JERRY_BUILTIN_ANNEXB
    #####:  248:    case ECMA_DATE_PROTOTYPE_GET_YEAR:
        -:  249:    {
    #####:  250:      result = (ecma_date_year_from_time (date_value) - 1900);
    #####:  251:      break;
        -:  252:    }
        -:  253:#endif /* JERRY_BUILTIN_ANNEXB */
    #####:  254:    case ECMA_DATE_PROTOTYPE_GET_MONTH:
        -:  255:    case ECMA_DATE_PROTOTYPE_GET_UTC_MONTH:
        -:  256:    {
    #####:  257:      result = ecma_date_month_from_time (date_value);
    #####:  258:      break;
        -:  259:    }
    #####:  260:    case ECMA_DATE_PROTOTYPE_GET_DATE:
        -:  261:    case ECMA_DATE_PROTOTYPE_GET_UTC_DATE:
        -:  262:    {
    #####:  263:      result = ecma_date_date_from_time (date_value);
    #####:  264:      break;
        -:  265:    }
    #####:  266:    case ECMA_DATE_PROTOTYPE_GET_DAY:
        -:  267:    case ECMA_DATE_PROTOTYPE_GET_UTC_DAY:
        -:  268:    {
    #####:  269:      result = ecma_date_week_day (date_value);
    #####:  270:      break;
        -:  271:    }
    #####:  272:    case ECMA_DATE_PROTOTYPE_GET_HOURS:
        -:  273:    case ECMA_DATE_PROTOTYPE_GET_UTC_HOURS:
        -:  274:    {
    #####:  275:      result = ecma_date_hour_from_time (date_value);
    #####:  276:      break;
        -:  277:    }
    #####:  278:    case ECMA_DATE_PROTOTYPE_GET_MINUTES:
        -:  279:    case ECMA_DATE_PROTOTYPE_GET_UTC_MINUTES:
        -:  280:    {
    #####:  281:      result = ecma_date_min_from_time (date_value);
    #####:  282:      break;
        -:  283:    }
    #####:  284:    case ECMA_DATE_PROTOTYPE_GET_SECONDS:
        -:  285:    case ECMA_DATE_PROTOTYPE_GET_UTC_SECONDS:
        -:  286:    {
    #####:  287:      result = ecma_date_sec_from_time (date_value);
    #####:  288:      break;
        -:  289:    }
    #####:  290:    case ECMA_DATE_PROTOTYPE_GET_MILLISECONDS:
        -:  291:    case ECMA_DATE_PROTOTYPE_GET_UTC_MILLISECONDS:
        -:  292:    {
    #####:  293:      result = ecma_date_ms_from_time (date_value);
    #####:  294:      break;
        -:  295:    }
    #####:  296:    default:
        -:  297:    {
    #####:  298:      JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_GET_UTC_TIMEZONE_OFFSET);
        -:  299:
    #####:  300:      result = (int32_t) ((-ecma_date_local_time_zone_adjustment (date_value)) / ECMA_DATE_MS_PER_MINUTE);
    #####:  301:      break;
        -:  302:    }
        -:  303:  }
        -:  304:
    #####:  305:  return ecma_make_int32_value (result);
        -:  306:} /* ecma_builtin_date_prototype_dispatch_get */
        -:  307:
        -:  308:#if JERRY_BUILTIN_ANNEXB
        -:  309:
        -:  310:/**
        -:  311: * Returns true, if the built-in id sets a year.
        -:  312: */
        -:  313:#define ECMA_DATE_PROTOTYPE_IS_SET_YEAR_ROUTINE(builtin_routine_id) \
        -:  314:  ((builtin_routine_id) == ECMA_DATE_PROTOTYPE_SET_FULL_YEAR        \
        -:  315:   || (builtin_routine_id) == ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR \
        -:  316:   || (builtin_routine_id) == ECMA_DATE_PROTOTYPE_SET_YEAR)
        -:  317:
        -:  318:#else /* !JERRY_BUILTIN_ANNEXB */
        -:  319:
        -:  320:/**
        -:  321: * Returns true, if the built-in id sets a year.
        -:  322: */
        -:  323:#define ECMA_DATE_PROTOTYPE_IS_SET_YEAR_ROUTINE(builtin_routine_id) \
        -:  324:  ((builtin_routine_id) == ECMA_DATE_PROTOTYPE_SET_FULL_YEAR        \
        -:  325:   || (builtin_routine_id) == ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR)
        -:  326:
        -:  327:#endif /* JERRY_BUILTIN_ANNEXB */
        -:  328:
        -:  329:/**
        -:  330: * Dispatch set date functions
        -:  331: *
        -:  332: * @return ecma value
        -:  333: *         Returned value must be freed with ecma_free_value.
        -:  334: */
        -:  335:static ecma_value_t
    #####:  336:ecma_builtin_date_prototype_dispatch_set (uint16_t builtin_routine_id, /**< built-in wide routine
        -:  337:                                                                        *   identifier */
        -:  338:                                          ecma_object_t *object_p, /**< date object */
        -:  339:                                          const ecma_value_t arguments_list[], /**< list of arguments
        -:  340:                                                                                *   passed to routine */
        -:  341:                                          uint32_t arguments_number) /**< length of arguments' list */
        -:  342:{
    #####:  343:  ecma_number_t converted_number[4];
    #####:  344:  uint32_t conversions = 0;
        -:  345:
        -:  346:  /* If the first argument is not specified, it is always converted to NaN. */
    #####:  347:  converted_number[0] = ecma_number_make_nan ();
        -:  348:
    #####:  349:  switch (builtin_routine_id)
        -:  350:  {
        -:  351:#if JERRY_BUILTIN_ANNEXB
    #####:  352:    case ECMA_DATE_PROTOTYPE_SET_YEAR:
        -:  353:#endif /* JERRY_BUILTIN_ANNEXB */
        -:  354:    case ECMA_DATE_PROTOTYPE_SET_DATE:
        -:  355:    case ECMA_DATE_PROTOTYPE_SET_UTC_DATE:
        -:  356:    case ECMA_DATE_PROTOTYPE_SET_UTC_MILLISECONDS:
        -:  357:    case ECMA_DATE_PROTOTYPE_SET_MILLISECONDS:
        -:  358:    {
    #####:  359:      conversions = 1;
    #####:  360:      break;
        -:  361:    }
    #####:  362:    case ECMA_DATE_PROTOTYPE_SET_MONTH:
        -:  363:    case ECMA_DATE_PROTOTYPE_SET_UTC_MONTH:
        -:  364:    case ECMA_DATE_PROTOTYPE_SET_UTC_SECONDS:
        -:  365:    case ECMA_DATE_PROTOTYPE_SET_SECONDS:
        -:  366:    {
    #####:  367:      conversions = 2;
    #####:  368:      break;
        -:  369:    }
    #####:  370:    case ECMA_DATE_PROTOTYPE_SET_FULL_YEAR:
        -:  371:    case ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR:
        -:  372:    case ECMA_DATE_PROTOTYPE_SET_MINUTES:
        -:  373:    case ECMA_DATE_PROTOTYPE_SET_UTC_MINUTES:
        -:  374:    {
    #####:  375:      conversions = 3;
    #####:  376:      break;
        -:  377:    }
    #####:  378:    default:
        -:  379:    {
    #####:  380:      JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_HOURS
        -:  381:                    || builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_UTC_HOURS);
        -:  382:
    #####:  383:      conversions = 4;
    #####:  384:      break;
        -:  385:    }
        -:  386:  }
        -:  387:
    #####:  388:  if (conversions > arguments_number)
        -:  389:  {
    #####:  390:    conversions = arguments_number;
        -:  391:  }
        -:  392:
    #####:  393:  for (uint32_t i = 0; i < conversions; i++)
        -:  394:  {
    #####:  395:    ecma_value_t value = ecma_op_to_number (arguments_list[i], &converted_number[i]);
        -:  396:
    #####:  397:    if (ECMA_IS_VALUE_ERROR (value))
        -:  398:    {
    #####:  399:      return value;
        -:  400:    }
        -:  401:  }
        -:  402:
        -:  403:#if JERRY_ESNEXT
    #####:  404:  ecma_date_object_t *date_object_p = (ecma_date_object_t *) object_p;
    #####:  405:  ecma_number_t *date_value_p = &date_object_p->date_value;
        -:  406:#else /* !JERRY_ESNEXT */
    #####:  407:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
    #####:  408:  ecma_number_t *date_value_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_number_t, ext_object_p->u.cls.u3.date);
        -:  409:#endif /* JERRY_ESNEXT */
        -:  410:
    #####:  411:  ecma_number_t date_value = *date_value_p;
        -:  412:
    #####:  413:  if (!BUILTIN_DATE_FUNCTION_IS_UTC (builtin_routine_id))
        -:  414:  {
        -:  415:    ecma_number_t local_tza;
        -:  416:
        -:  417:#if JERRY_ESNEXT
    #####:  418:    if (date_object_p->header.u.cls.u1.date_flags & ECMA_DATE_TZA_SET)
        -:  419:    {
    #####:  420:      local_tza = date_object_p->header.u.cls.u3.tza;
    #####:  421:      JERRY_ASSERT (local_tza == ecma_date_local_time_zone_adjustment (date_value));
        -:  422:    }
        -:  423:    else
        -:  424:#endif /* JERRY_ESNEXT */
        -:  425:    {
    #####:  426:      local_tza = ecma_date_local_time_zone_adjustment (date_value);
        -:  427:    }
        -:  428:
    #####:  429:    date_value += local_tza;
        -:  430:  }
        -:  431:
        -:  432:  ecma_number_t day_part;
        -:  433:  ecma_number_t time_part;
        -:  434:
    #####:  435:  if (builtin_routine_id <= ECMA_DATE_PROTOTYPE_SET_UTC_DATE)
        -:  436:  {
    #####:  437:    if (ecma_number_is_nan (date_value))
        -:  438:    {
    #####:  439:      if (!ECMA_DATE_PROTOTYPE_IS_SET_YEAR_ROUTINE (builtin_routine_id))
        -:  440:      {
    #####:  441:        return ecma_make_number_value (date_value);
        -:  442:      }
        -:  443:
    #####:  444:      date_value = ECMA_NUMBER_ZERO;
        -:  445:    }
        -:  446:
    #####:  447:    time_part = ecma_date_time_in_day_from_time (date_value);
        -:  448:
    #####:  449:    ecma_number_t year = ecma_date_year_from_time (date_value);
    #####:  450:    ecma_number_t month = ecma_date_month_from_time (date_value);
    #####:  451:    ecma_number_t day = ecma_date_date_from_time (date_value);
        -:  452:
    #####:  453:    switch (builtin_routine_id)
        -:  454:    {
    #####:  455:      case ECMA_DATE_PROTOTYPE_SET_FULL_YEAR:
        -:  456:      case ECMA_DATE_PROTOTYPE_SET_UTC_FULL_YEAR:
        -:  457:      {
    #####:  458:        year = converted_number[0];
    #####:  459:        if (conversions >= 2)
        -:  460:        {
    #####:  461:          month = converted_number[1];
        -:  462:        }
    #####:  463:        if (conversions >= 3)
        -:  464:        {
    #####:  465:          day = converted_number[2];
        -:  466:        }
    #####:  467:        break;
        -:  468:      }
        -:  469:#if JERRY_BUILTIN_ANNEXB
    #####:  470:      case ECMA_DATE_PROTOTYPE_SET_YEAR:
        -:  471:      {
    #####:  472:        if (ecma_number_is_nan (converted_number[0]))
        -:  473:        {
    #####:  474:          *date_value_p = converted_number[0];
    #####:  475:          return ecma_make_number_value (converted_number[0]);
        -:  476:        }
        -:  477:
    #####:  478:        year = ecma_number_trunc (converted_number[0]);
    #####:  479:        if (year >= 0 && year <= 99)
        -:  480:        {
    #####:  481:          year += 1900;
        -:  482:        }
    #####:  483:        break;
        -:  484:      }
        -:  485:#endif /* JERRY_BUILTIN_ANNEXB */
    #####:  486:      case ECMA_DATE_PROTOTYPE_SET_MONTH:
        -:  487:      case ECMA_DATE_PROTOTYPE_SET_UTC_MONTH:
        -:  488:      {
    #####:  489:        month = converted_number[0];
    #####:  490:        if (conversions >= 2)
        -:  491:        {
    #####:  492:          day = converted_number[1];
        -:  493:        }
    #####:  494:        break;
        -:  495:      }
    #####:  496:      default:
        -:  497:      {
    #####:  498:        JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_DATE
        -:  499:                      || builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_UTC_DATE);
        -:  500:
    #####:  501:        day = converted_number[0];
    #####:  502:        break;
        -:  503:      }
        -:  504:    }
        -:  505:
    #####:  506:    day_part = ecma_date_make_day (year, month, day);
        -:  507:
        -:  508:#if JERRY_BUILTIN_ANNEXB
    #####:  509:    if (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_YEAR)
        -:  510:    {
    #####:  511:      if (ecma_number_is_nan (converted_number[0]))
        -:  512:      {
    #####:  513:        day_part = 0;
    #####:  514:        time_part = converted_number[0];
        -:  515:      }
        -:  516:    }
        -:  517:#endif /* JERRY_BUILTIN_ANNEXB */
        -:  518:  }
        -:  519:  else
        -:  520:  {
    #####:  521:    if (ecma_number_is_nan (date_value))
        -:  522:    {
    #####:  523:      return ecma_make_number_value (date_value);
        -:  524:    }
        -:  525:
    #####:  526:    day_part = ecma_date_day_from_time (date_value) * (ecma_number_t) ECMA_DATE_MS_PER_DAY;
        -:  527:
    #####:  528:    ecma_number_t hour = ecma_date_hour_from_time (date_value);
    #####:  529:    ecma_number_t min = ecma_date_min_from_time (date_value);
    #####:  530:    ecma_number_t sec = ecma_date_sec_from_time (date_value);
    #####:  531:    ecma_number_t ms = ecma_date_ms_from_time (date_value);
        -:  532:
    #####:  533:    switch (builtin_routine_id)
        -:  534:    {
    #####:  535:      case ECMA_DATE_PROTOTYPE_SET_HOURS:
        -:  536:      case ECMA_DATE_PROTOTYPE_SET_UTC_HOURS:
        -:  537:      {
    #####:  538:        hour = converted_number[0];
    #####:  539:        if (conversions >= 2)
        -:  540:        {
    #####:  541:          min = converted_number[1];
        -:  542:        }
    #####:  543:        if (conversions >= 3)
        -:  544:        {
    #####:  545:          sec = converted_number[2];
        -:  546:        }
    #####:  547:        if (conversions >= 4)
        -:  548:        {
    #####:  549:          ms = converted_number[3];
        -:  550:        }
    #####:  551:        break;
        -:  552:      }
    #####:  553:      case ECMA_DATE_PROTOTYPE_SET_MINUTES:
        -:  554:      case ECMA_DATE_PROTOTYPE_SET_UTC_MINUTES:
        -:  555:      {
    #####:  556:        min = converted_number[0];
    #####:  557:        if (conversions >= 2)
        -:  558:        {
    #####:  559:          sec = converted_number[1];
        -:  560:        }
    #####:  561:        if (conversions >= 3)
        -:  562:        {
    #####:  563:          ms = converted_number[2];
        -:  564:        }
    #####:  565:        break;
        -:  566:      }
    #####:  567:      case ECMA_DATE_PROTOTYPE_SET_UTC_SECONDS:
        -:  568:      case ECMA_DATE_PROTOTYPE_SET_SECONDS:
        -:  569:      {
    #####:  570:        sec = converted_number[0];
    #####:  571:        if (conversions >= 2)
        -:  572:        {
    #####:  573:          ms = converted_number[1];
        -:  574:        }
    #####:  575:        break;
        -:  576:      }
    #####:  577:      default:
        -:  578:      {
    #####:  579:        JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_UTC_MILLISECONDS
        -:  580:                      || builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_MILLISECONDS);
        -:  581:
    #####:  582:        ms = converted_number[0];
    #####:  583:        break;
        -:  584:      }
        -:  585:    }
        -:  586:
    #####:  587:    time_part = ecma_date_make_time (hour, min, sec, ms);
        -:  588:  }
        -:  589:
    #####:  590:  bool is_utc = BUILTIN_DATE_FUNCTION_IS_UTC (builtin_routine_id);
        -:  591:
    #####:  592:  ecma_number_t full_date = ecma_date_make_date (day_part, time_part);
        -:  593:
    #####:  594:  if (!is_utc)
        -:  595:  {
    #####:  596:    full_date = ecma_date_utc (full_date);
        -:  597:  }
        -:  598:
    #####:  599:  full_date = ecma_date_time_clip (full_date);
        -:  600:
    #####:  601:  *date_value_p = full_date;
        -:  602:
        -:  603:#if JERRY_ESNEXT
    #####:  604:  date_object_p->header.u.cls.u1.date_flags &= (uint8_t) ~ECMA_DATE_TZA_SET;
        -:  605:#endif /* JERRY_ESNEXT */
        -:  606:
    #####:  607:  return ecma_make_number_value (full_date);
        -:  608:} /* ecma_builtin_date_prototype_dispatch_set */
        -:  609:
        -:  610:#undef ECMA_DATE_PROTOTYPE_IS_SET_YEAR_ROUTINE
        -:  611:
        -:  612:/**
        -:  613: * Dispatcher of the built-in's routines
        -:  614: *
        -:  615: * @return ecma value
        -:  616: *         Returned value must be freed with ecma_free_value.
        -:  617: */
        -:  618:ecma_value_t
    #####:  619:ecma_builtin_date_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:  620:                                                                           *   identifier */
        -:  621:                                              ecma_value_t this_arg, /**< 'this' argument value */
        -:  622:                                              const ecma_value_t arguments_list[], /**< list of arguments
        -:  623:                                                                                    *   passed to routine */
        -:  624:                                              uint32_t arguments_number) /**< length of arguments' list */
        -:  625:{
    #####:  626:  if (JERRY_UNLIKELY (builtin_routine_id == ECMA_DATE_PROTOTYPE_TO_JSON))
        -:  627:  {
    #####:  628:    return ecma_builtin_date_prototype_to_json (this_arg);
        -:  629:  }
        -:  630:
        -:  631:#if JERRY_ESNEXT
    #####:  632:  if (JERRY_UNLIKELY (builtin_routine_id == ECMA_DATE_PROTOTYPE_TO_PRIMITIVE))
        -:  633:  {
    #####:  634:    return ecma_builtin_date_prototype_to_primitive (this_arg, arguments_list[0]);
        -:  635:  }
        -:  636:#endif /* JERRY_ESNEXT */
        -:  637:
    #####:  638:  if (!ecma_is_value_object (this_arg)
    #####:  639:      || !ecma_object_class_is (ecma_get_object_from_value (this_arg), ECMA_OBJECT_CLASS_DATE))
        -:  640:  {
    #####:  641:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_DATE_OBJECT);
        -:  642:  }
        -:  643:
    #####:  644:  ecma_object_t *this_obj_p = ecma_get_object_from_value (this_arg);
        -:  645:
        -:  646:#if JERRY_ESNEXT
    #####:  647:  ecma_date_object_t *date_object_p = (ecma_date_object_t *) this_obj_p;
    #####:  648:  ecma_number_t *date_value_p = &date_object_p->date_value;
        -:  649:#else /* JERRY_ESNEXT */
    #####:  650:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) this_obj_p;
    #####:  651:  ecma_number_t *date_value_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_number_t, ext_object_p->u.cls.u3.date);
        -:  652:#endif /* JERRY_ESNEXT */
        -:  653:
    #####:  654:  ecma_number_t date_value = *date_value_p;
        -:  655:
    #####:  656:  if (builtin_routine_id == ECMA_DATE_PROTOTYPE_GET_TIME)
        -:  657:  {
    #####:  658:    return ecma_make_number_value (date_value);
        -:  659:  }
        -:  660:
    #####:  661:  if (builtin_routine_id == ECMA_DATE_PROTOTYPE_SET_TIME)
        -:  662:  {
    #####:  663:    ecma_number_t time_num;
        -:  664:
    #####:  665:    if (ECMA_IS_VALUE_ERROR (ecma_op_to_number (arguments_list[0], &time_num)))
        -:  666:    {
    #####:  667:      return ECMA_VALUE_ERROR;
        -:  668:    }
        -:  669:
    #####:  670:    *date_value_p = ecma_date_time_clip (time_num);
        -:  671:#if JERRY_ESNEXT
    #####:  672:    date_object_p->header.u.cls.u1.date_flags &= (uint8_t) ~ECMA_DATE_TZA_SET;
        -:  673:#endif /* JERRY_ESNEXT */
        -:  674:
    #####:  675:    return ecma_make_number_value (*date_value_p);
        -:  676:  }
        -:  677:
    #####:  678:  if (builtin_routine_id <= ECMA_DATE_PROTOTYPE_SET_UTC_MILLISECONDS)
        -:  679:  {
    #####:  680:    if (builtin_routine_id <= ECMA_DATE_PROTOTYPE_GET_UTC_TIMEZONE_OFFSET)
        -:  681:    {
    #####:  682:      if (!BUILTIN_DATE_FUNCTION_IS_UTC (builtin_routine_id))
        -:  683:      {
        -:  684:        ecma_number_t local_tza;
        -:  685:#if JERRY_ESNEXT
    #####:  686:        if (date_object_p->header.u.cls.u1.date_flags & ECMA_DATE_TZA_SET)
        -:  687:        {
    #####:  688:          local_tza = date_object_p->header.u.cls.u3.tza;
    #####:  689:          JERRY_ASSERT (local_tza == ecma_date_local_time_zone_adjustment (date_value));
        -:  690:        }
        -:  691:        else
        -:  692:        {
        -:  693:#endif /* JERRY_ESNEXT */
    #####:  694:          local_tza = ecma_date_local_time_zone_adjustment (date_value);
        -:  695:#if JERRY_ESNEXT
    #####:  696:          JERRY_ASSERT (local_tza <= INT32_MAX && local_tza >= INT32_MIN);
    #####:  697:          date_object_p->header.u.cls.u3.tza = (int32_t) local_tza;
    #####:  698:          date_object_p->header.u.cls.u1.date_flags |= ECMA_DATE_TZA_SET;
        -:  699:        }
        -:  700:#endif /* JERRY_ESNEXT */
        -:  701:
    #####:  702:        date_value += local_tza;
        -:  703:      }
        -:  704:
    #####:  705:      return ecma_builtin_date_prototype_dispatch_get (builtin_routine_id, date_value);
        -:  706:    }
        -:  707:
    #####:  708:    return ecma_builtin_date_prototype_dispatch_set (builtin_routine_id, this_obj_p, arguments_list, arguments_number);
        -:  709:  }
        -:  710:
    #####:  711:  if (builtin_routine_id == ECMA_DATE_PROTOTYPE_TO_ISO_STRING)
        -:  712:  {
    #####:  713:    if (ecma_number_is_nan (date_value))
        -:  714:    {
    #####:  715:      return ecma_raise_range_error (ECMA_ERR_DATE_MUST_BE_A_FINITE_NUMBER);
        -:  716:    }
        -:  717:
    #####:  718:    return ecma_date_value_to_iso_string (date_value);
        -:  719:  }
        -:  720:
    #####:  721:  if (ecma_number_is_nan (date_value))
        -:  722:  {
    #####:  723:    return ecma_make_magic_string_value (LIT_MAGIC_STRING_INVALID_DATE_UL);
        -:  724:  }
        -:  725:
    #####:  726:  switch (builtin_routine_id)
        -:  727:  {
    #####:  728:    case ECMA_DATE_PROTOTYPE_TO_STRING:
        -:  729:    {
    #####:  730:      return ecma_date_value_to_string (date_value);
        -:  731:    }
    #####:  732:    case ECMA_DATE_PROTOTYPE_TO_DATE_STRING:
        -:  733:    {
    #####:  734:      return ecma_date_value_to_date_string (date_value);
        -:  735:    }
        -:  736:#if !JERRY_ESNEXT
    #####:  737:    case ECMA_DATE_PROTOTYPE_TO_UTC_STRING:
        -:  738:    {
    #####:  739:      return ecma_date_value_to_utc_string (date_value);
        -:  740:    }
        -:  741:#endif /* JERRY_ESNEXT */
    #####:  742:    default:
        -:  743:    {
    #####:  744:      JERRY_ASSERT (builtin_routine_id == ECMA_DATE_PROTOTYPE_TO_TIME_STRING);
        -:  745:
    #####:  746:      return ecma_date_value_to_time_string (date_value);
        -:  747:    }
        -:  748:  }
        -:  749:} /* ecma_builtin_date_prototype_dispatch_routine */
        -:  750:
        -:  751:/**
        -:  752: * @}
        -:  753: * @}
        -:  754: * @}
        -:  755: */
        -:  756:
        -:  757:#endif /* JERRY_BUILTIN_DATE */
