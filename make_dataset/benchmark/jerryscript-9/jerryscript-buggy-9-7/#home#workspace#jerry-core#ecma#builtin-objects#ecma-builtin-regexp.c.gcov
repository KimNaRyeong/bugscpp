        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-regexp.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-conversion.h"
        -:   19:#include "ecma-exceptions.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-helpers.h"
        -:   22:#include "ecma-objects.h"
        -:   23:#include "ecma-regexp-object.h"
        -:   24:
        -:   25:#include "jcontext.h"
        -:   26:
        -:   27:#if JERRY_BUILTIN_REGEXP
        -:   28:
        -:   29:#define ECMA_BUILTINS_INTERNAL
        -:   30:#include "ecma-builtins-internal.h"
        -:   31:
        -:   32:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-regexp.inc.h"
        -:   33:#define BUILTIN_UNDERSCORED_ID  regexp
        -:   34:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   35:
        -:   36:/** \addtogroup ecma ECMA
        -:   37: * @{
        -:   38: *
        -:   39: * \addtogroup ecmabuiltins
        -:   40: * @{
        -:   41: *
        -:   42: * \addtogroup regexp ECMA RegExp object built-in
        -:   43: * @{
        -:   44: */
        -:   45:
        -:   46:static ecma_value_t
    #####:   47:ecma_builtin_regexp_dispatch_helper (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   48:                                     uint32_t arguments_list_len) /**< number of arguments */
        -:   49:{
    #####:   50:  ecma_value_t pattern_value = ECMA_VALUE_UNDEFINED;
    #####:   51:  ecma_value_t flags_value = ECMA_VALUE_UNDEFINED;
        -:   52:#if JERRY_ESNEXT
    #####:   53:  bool create_regexp_from_bc = false;
    #####:   54:  bool free_arguments = false;
    #####:   55:  ecma_object_t *new_target_p = JERRY_CONTEXT (current_new_target_p);
        -:   56:#else /* !JERRY_ESNEXT */
    #####:   57:  ecma_object_t *new_target_p = NULL;
        -:   58:#endif /* JERRY_ESNEXT */
        -:   59:
    #####:   60:  if (arguments_list_len > 0)
        -:   61:  {
        -:   62:    /* pattern string or RegExp object */
    #####:   63:    pattern_value = arguments_list_p[0];
        -:   64:
    #####:   65:    if (arguments_list_len > 1)
        -:   66:    {
    #####:   67:      flags_value = arguments_list_p[1];
        -:   68:    }
        -:   69:  }
        -:   70:
        -:   71:#if JERRY_ESNEXT
    #####:   72:  ecma_value_t regexp_value = ecma_op_is_regexp (pattern_value);
        -:   73:
    #####:   74:  if (ECMA_IS_VALUE_ERROR (regexp_value))
        -:   75:  {
    #####:   76:    return regexp_value;
        -:   77:  }
        -:   78:
    #####:   79:  bool pattern_is_regexp = regexp_value == ECMA_VALUE_TRUE;
    #####:   80:  re_compiled_code_t *bc_p = NULL;
        -:   81:
    #####:   82:  if (new_target_p == NULL)
        -:   83:  {
    #####:   84:    new_target_p = ecma_builtin_get (ECMA_BUILTIN_ID_REGEXP);
        -:   85:
    #####:   86:    if (pattern_is_regexp && ecma_is_value_undefined (flags_value))
        -:   87:    {
    #####:   88:      ecma_object_t *pattern_obj_p = ecma_get_object_from_value (pattern_value);
        -:   89:
    #####:   90:      ecma_value_t pattern_constructor = ecma_op_object_get_by_magic_id (pattern_obj_p, LIT_MAGIC_STRING_CONSTRUCTOR);
        -:   91:
    #####:   92:      if (ECMA_IS_VALUE_ERROR (pattern_constructor))
        -:   93:      {
    #####:   94:        return pattern_constructor;
        -:   95:      }
        -:   96:
    #####:   97:      bool is_same = ecma_op_same_value (ecma_make_object_value (new_target_p), pattern_constructor);
    #####:   98:      ecma_free_value (pattern_constructor);
        -:   99:
    #####:  100:      if (is_same)
        -:  101:      {
    #####:  102:        return ecma_copy_value (pattern_value);
        -:  103:      }
        -:  104:    }
        -:  105:  }
        -:  106:
    #####:  107:  if (ecma_object_is_regexp_object (pattern_value))
        -:  108:  {
    #####:  109:    ecma_extended_object_t *pattern_obj_p = (ecma_extended_object_t *) ecma_get_object_from_value (pattern_value);
    #####:  110:    bc_p = ECMA_GET_INTERNAL_VALUE_POINTER (re_compiled_code_t, pattern_obj_p->u.cls.u3.value);
        -:  111:
    #####:  112:    create_regexp_from_bc = ecma_is_value_undefined (flags_value);
        -:  113:
    #####:  114:    if (!create_regexp_from_bc)
        -:  115:    {
    #####:  116:      pattern_value = bc_p->source;
        -:  117:    }
        -:  118:  }
    #####:  119:  else if (pattern_is_regexp)
        -:  120:  {
    #####:  121:    ecma_object_t *pattern_obj_p = ecma_get_object_from_value (pattern_value);
        -:  122:
    #####:  123:    pattern_value = ecma_op_object_get_by_magic_id (pattern_obj_p, LIT_MAGIC_STRING_SOURCE);
        -:  124:
    #####:  125:    if (ECMA_IS_VALUE_ERROR (pattern_value))
        -:  126:    {
    #####:  127:      return pattern_value;
        -:  128:    }
        -:  129:
    #####:  130:    if (ecma_is_value_undefined (flags_value))
        -:  131:    {
    #####:  132:      flags_value = ecma_op_object_get_by_magic_id (pattern_obj_p, LIT_MAGIC_STRING_FLAGS);
        -:  133:
    #####:  134:      if (ECMA_IS_VALUE_ERROR (flags_value))
        -:  135:      {
    #####:  136:        ecma_free_value (pattern_value);
    #####:  137:        return flags_value;
        -:  138:      }
        -:  139:    }
        -:  140:    else
        -:  141:    {
    #####:  142:      flags_value = ecma_copy_value (flags_value);
        -:  143:    }
        -:  144:
    #####:  145:    free_arguments = true;
        -:  146:  }
        -:  147:#else /* !JERRY_ESNEXT */
    #####:  148:  if (ecma_object_is_regexp_object (pattern_value))
        -:  149:  {
    #####:  150:    if (ecma_is_value_undefined (flags_value))
        -:  151:    {
    #####:  152:      return ecma_copy_value (pattern_value);
        -:  153:    }
        -:  154:
    #####:  155:    return ecma_raise_type_error (ECMA_ERR_INVALID_ARGUMENT_IS_PASSED_TO_REGEXP_FUNCTION);
        -:  156:  }
        -:  157:#endif /* JERRY_ESNEXT */
        -:  158:
    #####:  159:  ecma_value_t ret_value = ECMA_VALUE_ERROR;
    #####:  160:  ecma_object_t *new_target_obj_p = ecma_op_regexp_alloc (new_target_p);
        -:  161:
    #####:  162:  if (JERRY_LIKELY (new_target_obj_p != NULL))
        -:  163:  {
        -:  164:#if JERRY_ESNEXT
    #####:  165:    if (create_regexp_from_bc)
        -:  166:    {
    #####:  167:      ret_value = ecma_op_create_regexp_from_bytecode (new_target_obj_p, bc_p);
    #####:  168:      JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (ret_value));
        -:  169:    }
        -:  170:    else
        -:  171:#endif /* JERRY_ESNEXT */
        -:  172:    {
    #####:  173:      ret_value = ecma_op_create_regexp_from_pattern (new_target_obj_p, pattern_value, flags_value);
        -:  174:
    #####:  175:      if (ECMA_IS_VALUE_ERROR (ret_value))
        -:  176:      {
    #####:  177:        ecma_deref_object (new_target_obj_p);
        -:  178:      }
        -:  179:    }
        -:  180:  }
        -:  181:
        -:  182:#if JERRY_ESNEXT
    #####:  183:  if (free_arguments)
        -:  184:  {
    #####:  185:    ecma_free_value (pattern_value);
    #####:  186:    ecma_free_value (flags_value);
        -:  187:  }
        -:  188:#endif /* JERRY_ESNEXT */
        -:  189:
    #####:  190:  return ret_value;
        -:  191:} /* ecma_builtin_regexp_dispatch_helper */
        -:  192:
        -:  193:/**
        -:  194: * Handle calling [[Call]] of built-in RegExp object
        -:  195: *
        -:  196: * @return ecma value
        -:  197: *         Returned value must be freed with ecma_free_value.
        -:  198: */
        -:  199:ecma_value_t
    #####:  200:ecma_builtin_regexp_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  201:                                   uint32_t arguments_list_len) /**< number of arguments */
        -:  202:{
    #####:  203:  return ecma_builtin_regexp_dispatch_helper (arguments_list_p, arguments_list_len);
        -:  204:} /* ecma_builtin_regexp_dispatch_call */
        -:  205:
        -:  206:/**
        -:  207: * Handle calling [[Construct]] of built-in RegExp object
        -:  208: *
        -:  209: * @return ecma value
        -:  210: *         Returned value must be freed with ecma_free_value.
        -:  211: */
        -:  212:ecma_value_t
    #####:  213:ecma_builtin_regexp_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  214:                                        uint32_t arguments_list_len) /**< number of arguments */
        -:  215:{
    #####:  216:  return ecma_builtin_regexp_dispatch_helper (arguments_list_p, arguments_list_len);
        -:  217:} /* ecma_builtin_regexp_dispatch_construct */
        -:  218:
        -:  219:#if JERRY_ESNEXT
        -:  220:/**
        -:  221: * 21.2.4.2 get RegExp [ @@species ] accessor
        -:  222: *
        -:  223: * @return ecma_value
        -:  224: *         returned value must be freed with ecma_free_value
        -:  225: */
        -:  226:ecma_value_t
    #####:  227:ecma_builtin_regexp_species_get (ecma_value_t this_value) /**< This Value */
        -:  228:{
    #####:  229:  return ecma_copy_value (this_value);
        -:  230:} /* ecma_builtin_regexp_species_get */
        -:  231:#endif /* JERRY_ESNEXT */
        -:  232:
        -:  233:/**
        -:  234: * @}
        -:  235: * @}
        -:  236: * @}
        -:  237: */
        -:  238:
        -:  239:#endif /* JERRY_BUILTIN_REGEXP */
