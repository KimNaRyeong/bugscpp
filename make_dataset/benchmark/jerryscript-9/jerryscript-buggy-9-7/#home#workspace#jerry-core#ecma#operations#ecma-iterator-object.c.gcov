        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-iterator-object.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-iterator-object.h"
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-array-object.h"
        -:   20:#include "ecma-builtin-helpers.h"
        -:   21:#include "ecma-builtins.h"
        -:   22:#include "ecma-exceptions.h"
        -:   23:#include "ecma-function-object.h"
        -:   24:#include "ecma-gc.h"
        -:   25:#include "ecma-globals.h"
        -:   26:#include "ecma-helpers.h"
        -:   27:#include "ecma-objects-general.h"
        -:   28:#include "ecma-objects.h"
        -:   29:
        -:   30:#include "jcontext.h"
        -:   31:
        -:   32:/** \addtogroup ecma ECMA
        -:   33: * @{
        -:   34: *
        -:   35: * \addtogroup ecmaiteratorobject ECMA iterator object related routines
        -:   36: * @{
        -:   37: */
        -:   38:
        -:   39:#if JERRY_ESNEXT
        -:   40:
        -:   41:/**
        -:   42: * Implementation of 'CreateArrayFromList' specialized for iterators
        -:   43: *
        -:   44: * See also:
        -:   45: *          ECMA-262 v6, 7.3.16.
        -:   46: *
        -:   47: * Note:
        -:   48: *      Returned value must be freed with ecma_free_value.
        -:   49: *
        -:   50: * @return new array object
        -:   51: */
        -:   52:ecma_value_t
    #####:   53:ecma_create_array_from_iter_element (ecma_value_t value, /**< value */
        -:   54:                                     ecma_value_t index_value) /**< iterator index */
        -:   55:{
        -:   56:  /* 2. */
    #####:   57:  ecma_object_t *new_array_p = ecma_op_new_array_object (0);
        -:   58:
        -:   59:  /* 3-4. */
        -:   60:  ecma_value_t completion;
    #####:   61:  completion =
        -:   62:    ecma_builtin_helper_def_prop_by_index (new_array_p, 0, index_value, ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);
        -:   63:
        -:   64:  /* 4.b */
    #####:   65:  JERRY_ASSERT (ecma_is_value_true (completion));
        -:   66:
    #####:   67:  completion =
        -:   68:    ecma_builtin_helper_def_prop_by_index (new_array_p, 1, value, ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);
    #####:   69:  JERRY_ASSERT (ecma_is_value_true (completion));
        -:   70:
        -:   71:  /* 5. */
    #####:   72:  return ecma_make_object_value (new_array_p);
        -:   73:} /* ecma_create_array_from_iter_element */
        -:   74:
        -:   75:/**
        -:   76: * CreateIterResultObject operation
        -:   77: *
        -:   78: * See also:
        -:   79: *          ECMA-262 v6, 7.4.7.
        -:   80: *
        -:   81: * Note:
        -:   82: *      Returned value must be freed with ecma_free_value.
        -:   83: *
        -:   84: * @return iterator result object
        -:   85: */
        -:   86:ecma_value_t
    #####:   87:ecma_create_iter_result_object (ecma_value_t value, /**< value */
        -:   88:                                ecma_value_t done) /**< ECMA_VALUE_{TRUE,FALSE} based
        -:   89:                                                    *   on the iterator index */
        -:   90:{
        -:   91:  /* 1. */
    #####:   92:  JERRY_ASSERT (ecma_is_value_boolean (done));
        -:   93:
        -:   94:  /* 2. */
    #####:   95:  ecma_object_t *object_p =
    #####:   96:    ecma_create_object (ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE), 0, ECMA_OBJECT_TYPE_GENERAL);
        -:   97:
        -:   98:  /* 3. */
        -:   99:  ecma_property_value_t *prop_value_p;
    #####:  100:  prop_value_p = ecma_create_named_data_property (object_p,
        -:  101:                                                  ecma_get_magic_string (LIT_MAGIC_STRING_VALUE),
        -:  102:                                                  ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  103:                                                  NULL);
        -:  104:
    #####:  105:  prop_value_p->value = ecma_copy_value_if_not_object (value);
        -:  106:
        -:  107:  /* 4. */
    #####:  108:  prop_value_p = ecma_create_named_data_property (object_p,
        -:  109:                                                  ecma_get_magic_string (LIT_MAGIC_STRING_DONE),
        -:  110:                                                  ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  111:                                                  NULL);
    #####:  112:  prop_value_p->value = done;
        -:  113:
        -:  114:  /* 5. */
    #####:  115:  return ecma_make_object_value (object_p);
        -:  116:} /* ecma_create_iter_result_object */
        -:  117:
        -:  118:/**
        -:  119: * General iterator object creation operation.
        -:  120: *
        -:  121: * See also: ECMA-262 v6, 21.1.5.1, 22.1.5.1, 23.1.5.1
        -:  122: *
        -:  123: * Note:
        -:  124: *      Returned value must be freed with ecma_free_value.
        -:  125: *
        -:  126: * @return iterator object
        -:  127: */
        -:  128:ecma_value_t
    #####:  129:ecma_op_create_iterator_object (ecma_value_t iterated_value, /**< value from create iterator */
        -:  130:                                ecma_object_t *prototype_obj_p, /**< prototype object */
        -:  131:                                ecma_object_class_type_t iterator_type, /**< iterator type */
        -:  132:                                ecma_iterator_kind_t kind) /**< iterator kind*/
        -:  133:{
        -:  134:  /* 1. */
    #####:  135:  JERRY_ASSERT (iterator_type == ECMA_OBJECT_CLASS_ARRAY_ITERATOR || iterator_type == ECMA_OBJECT_CLASS_SET_ITERATOR
        -:  136:                || iterator_type == ECMA_OBJECT_CLASS_MAP_ITERATOR
        -:  137:                || iterator_type == ECMA_OBJECT_CLASS_REGEXP_STRING_ITERATOR
        -:  138:                || iterator_type == ECMA_OBJECT_CLASS_STRING_ITERATOR);
    #####:  139:  JERRY_ASSERT (kind < ECMA_ITERATOR__COUNT);
        -:  140:
        -:  141:  /* 2. */
    #####:  142:  ecma_object_t *object_p =
        -:  143:    ecma_create_object (prototype_obj_p, sizeof (ecma_extended_object_t), ECMA_OBJECT_TYPE_CLASS);
        -:  144:
    #####:  145:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) object_p;
    #####:  146:  ext_obj_p->u.cls.type = (uint8_t) iterator_type;
        -:  147:
        -:  148:  /* 3. */
    #####:  149:  ext_obj_p->u.cls.u3.iterated_value = iterated_value;
        -:  150:  /* 4. */
    #####:  151:  ext_obj_p->u.cls.u2.iterator_index = 0;
        -:  152:  /* 5. */
    #####:  153:  ext_obj_p->u.cls.u1.iterator_kind = (uint8_t) kind;
        -:  154:
        -:  155:  /* 6. */
    #####:  156:  return ecma_make_object_value (object_p);
        -:  157:} /* ecma_op_create_iterator_object */
        -:  158:
        -:  159:/**
        -:  160: * GetIterator operation
        -:  161: *
        -:  162: * See also: ECMA-262 v10, 7.4.1
        -:  163: *
        -:  164: * Note:
        -:  165: *      Returned value must be freed with ecma_free_value.
        -:  166: *
        -:  167: * @return iterator object - if success
        -:  168: *         raised error - otherwise
        -:  169: */
        -:  170:ecma_value_t
    #####:  171:ecma_op_get_iterator (ecma_value_t value, /**< value to get iterator from */
        -:  172:                      ecma_value_t method, /**< provided method argument */
        -:  173:                      ecma_value_t *next_method_p) /**< [out] next method */
        -:  174:{
    #####:  175:  JERRY_ASSERT (next_method_p != NULL);
    #####:  176:  *next_method_p = ECMA_VALUE_UNDEFINED;
        -:  177:
        -:  178:  /* 1. */
    #####:  179:  if (ECMA_IS_VALUE_ERROR (value))
        -:  180:  {
    #####:  181:    return value;
        -:  182:  }
        -:  183:
    #####:  184:  bool use_default_method = false;
        -:  185:
        -:  186:  /* 2. */
    #####:  187:  if (method == ECMA_VALUE_SYNC_ITERATOR)
        -:  188:  {
        -:  189:    /* 2.a */
    #####:  190:    use_default_method = true;
    #####:  191:    method = ecma_op_get_method_by_symbol_id (value, LIT_GLOBAL_SYMBOL_ITERATOR);
        -:  192:
        -:  193:    /* 2.b */
    #####:  194:    if (ECMA_IS_VALUE_ERROR (method))
        -:  195:    {
    #####:  196:      return method;
        -:  197:    }
        -:  198:  }
        -:  199:  /* 3.a */
    #####:  200:  else if (method == ECMA_VALUE_ASYNC_ITERATOR)
        -:  201:  {
    #####:  202:    use_default_method = true;
        -:  203:
        -:  204:    /* 3.a.i */
    #####:  205:    method = ecma_op_get_method_by_symbol_id (value, LIT_GLOBAL_SYMBOL_ASYNC_ITERATOR);
        -:  206:
    #####:  207:    if (ECMA_IS_VALUE_ERROR (method))
        -:  208:    {
    #####:  209:      return method;
        -:  210:    }
        -:  211:
        -:  212:    /* 3.a.ii */
        -:  213:
    #####:  214:    if (ecma_is_value_undefined (method))
        -:  215:    {
    #####:  216:      method = ecma_op_get_method_by_symbol_id (value, LIT_GLOBAL_SYMBOL_ITERATOR);
        -:  217:
    #####:  218:      if (ECMA_IS_VALUE_ERROR (method))
        -:  219:      {
    #####:  220:        return method;
        -:  221:      }
        -:  222:
    #####:  223:      ecma_value_t sync_next_method;
    #####:  224:      ecma_value_t sync_iterator = ecma_op_get_iterator (value, method, &sync_next_method);
        -:  225:
    #####:  226:      if (ECMA_IS_VALUE_ERROR (sync_iterator))
        -:  227:      {
    #####:  228:        ecma_free_value (method);
    #####:  229:        return sync_iterator;
        -:  230:      }
        -:  231:
    #####:  232:      ecma_value_t async_iterator =
    #####:  233:        ecma_op_create_async_from_sync_iterator (sync_iterator, sync_next_method, next_method_p);
        -:  234:
    #####:  235:      ecma_free_value (method);
    #####:  236:      ecma_free_value (sync_iterator);
    #####:  237:      ecma_free_value (sync_next_method);
        -:  238:
    #####:  239:      return async_iterator;
        -:  240:    }
        -:  241:  }
        -:  242:
        -:  243:  /* 3. */
    #####:  244:  ecma_value_t iterator = ecma_op_function_validated_call (method, value, NULL, 0);
        -:  245:
    #####:  246:  if (use_default_method)
        -:  247:  {
    #####:  248:    ecma_free_value (method);
        -:  249:  }
        -:  250:
        -:  251:  /* 4. */
    #####:  252:  if (ECMA_IS_VALUE_ERROR (iterator))
        -:  253:  {
    #####:  254:    return iterator;
        -:  255:  }
        -:  256:
        -:  257:  /* 5. */
    #####:  258:  if (!ecma_is_value_object (iterator))
        -:  259:  {
    #####:  260:    ecma_free_value (iterator);
    #####:  261:    return ecma_raise_type_error (ECMA_ERR_ITERATOR_IS_NOT_AN_OBJECT);
        -:  262:  }
        -:  263:
    #####:  264:  ecma_object_t *obj_p = ecma_get_object_from_value (iterator);
    #####:  265:  ecma_value_t next_method = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_NEXT);
        -:  266:
    #####:  267:  if (ECMA_IS_VALUE_ERROR (next_method))
        -:  268:  {
    #####:  269:    ecma_free_value (iterator);
    #####:  270:    return next_method;
        -:  271:  }
        -:  272:
    #####:  273:  if (ecma_op_is_callable (next_method))
        -:  274:  {
    #####:  275:    *next_method_p = next_method;
        -:  276:  }
        -:  277:  else
        -:  278:  {
    #####:  279:    ecma_free_value (next_method);
        -:  280:  }
        -:  281:
        -:  282:  /* 6. */
    #####:  283:  return iterator;
        -:  284:} /* ecma_op_get_iterator */
        -:  285:
        -:  286:/**
        -:  287: * IteratorNext operation
        -:  288: *
        -:  289: * See also: ECMA-262 v10, 7.4.2
        -:  290: *
        -:  291: * Note:
        -:  292: *      Returned value must be freed with ecma_free_value.
        -:  293: *
        -:  294: * @return iterator result object - if success
        -:  295: *         raised error - otherwise
        -:  296: */
        -:  297:ecma_value_t
    #####:  298:ecma_op_iterator_next (ecma_value_t iterator, /**< iterator value */
        -:  299:                       ecma_value_t next_method, /**< next method */
        -:  300:                       ecma_value_t value) /**< the routines's value argument */
        -:  301:{
    #####:  302:  JERRY_ASSERT (ecma_is_value_object (iterator));
        -:  303:
        -:  304:  /* 1 - 2. */
    #####:  305:  if (next_method == ECMA_VALUE_UNDEFINED)
        -:  306:  {
    #####:  307:    return ecma_raise_type_error (ECMA_ERR_ITERATOR_NEXT_IS_NOT_CALLABLE);
        -:  308:  }
        -:  309:
    #####:  310:  ecma_object_t *next_method_obj_p = ecma_get_object_from_value (next_method);
        -:  311:
    #####:  312:  bool has_value = !ecma_is_value_empty (value);
        -:  313:
    #####:  314:  if (has_value)
        -:  315:  {
    #####:  316:    return ecma_op_function_call (next_method_obj_p, iterator, &value, 1);
        -:  317:  }
        -:  318:
    #####:  319:  return ecma_op_function_call (next_method_obj_p, iterator, NULL, 0);
        -:  320:} /* ecma_op_iterator_next */
        -:  321:
        -:  322:/**
        -:  323: * IteratorReturn operation
        -:  324: *
        -:  325: * See also: ECMA-262 v6, 14.4.14 (last part)
        -:  326: *
        -:  327: * Note:
        -:  328: *      Returned value must be freed with ecma_free_value.
        -:  329: *
        -:  330: * @return iterator result object - if success
        -:  331: *         raised error - otherwise
        -:  332: */
        -:  333:static ecma_value_t
    #####:  334:ecma_op_iterator_return (ecma_value_t iterator, /**< iterator value */
        -:  335:                         ecma_value_t value) /**< the routines's value argument */
        -:  336:{
    #####:  337:  JERRY_ASSERT (ecma_is_value_object (iterator));
        -:  338:
    #####:  339:  ecma_object_t *obj_p = ecma_get_object_from_value (iterator);
    #####:  340:  ecma_value_t func_return = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_RETURN);
        -:  341:
    #####:  342:  if (ECMA_IS_VALUE_ERROR (func_return))
        -:  343:  {
    #####:  344:    return func_return;
        -:  345:  }
        -:  346:
    #####:  347:  if (func_return == ECMA_VALUE_UNDEFINED)
        -:  348:  {
    #####:  349:    return ecma_create_iter_result_object (value, ECMA_VALUE_TRUE);
        -:  350:  }
        -:  351:
    #####:  352:  ecma_value_t result = ecma_op_function_validated_call (func_return, iterator, &value, 1);
    #####:  353:  ecma_free_value (func_return);
        -:  354:
    #####:  355:  return result;
        -:  356:} /* ecma_op_iterator_return */
        -:  357:
        -:  358:/**
        -:  359: * IteratorThrow operation
        -:  360: *
        -:  361: * See also: ECMA-262 v6, 14.4.14 (last part)
        -:  362: *
        -:  363: * Note:
        -:  364: *      Returned value must be freed with ecma_free_value.
        -:  365: *
        -:  366: * @return iterator result object - if success
        -:  367: *         raised error - otherwise
        -:  368: */
        -:  369:static ecma_value_t
    #####:  370:ecma_op_iterator_throw (ecma_value_t iterator, /**< iterator value */
        -:  371:                        ecma_value_t value) /**< the routines's value argument */
        -:  372:{
    #####:  373:  JERRY_ASSERT (ecma_is_value_object (iterator));
        -:  374:
    #####:  375:  ecma_object_t *obj_p = ecma_get_object_from_value (iterator);
    #####:  376:  ecma_value_t func_throw = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_THROW);
        -:  377:
    #####:  378:  if (ECMA_IS_VALUE_ERROR (func_throw))
        -:  379:  {
    #####:  380:    return func_throw;
        -:  381:  }
        -:  382:
    #####:  383:  if (func_throw == ECMA_VALUE_UNDEFINED)
        -:  384:  {
    #####:  385:    ecma_value_t result = ecma_op_iterator_close (iterator);
        -:  386:
    #####:  387:    if (ECMA_IS_VALUE_ERROR (result))
        -:  388:    {
    #####:  389:      return result;
        -:  390:    }
        -:  391:
    #####:  392:    ecma_free_value (result);
    #####:  393:    return ecma_raise_type_error (ECMA_ERR_ITERATOR_THROW_IS_NOT_AVAILABLE);
        -:  394:  }
        -:  395:
    #####:  396:  ecma_value_t result = ecma_op_function_validated_call (func_throw, iterator, &value, 1);
    #####:  397:  ecma_free_value (func_throw);
        -:  398:
    #####:  399:  return result;
        -:  400:} /* ecma_op_iterator_throw */
        -:  401:
        -:  402:/**
        -:  403: * IteratorComplete operation
        -:  404: *
        -:  405: * See also: ECMA-262 v10, 7.4.3
        -:  406: *
        -:  407: * @return true/false - whether the iteration ended
        -:  408: */
        -:  409:ecma_value_t
    #####:  410:ecma_op_iterator_complete (ecma_value_t iter_result) /**< iterator value */
        -:  411:{
        -:  412:  /* 1. */
    #####:  413:  JERRY_ASSERT (ecma_is_value_object (iter_result));
        -:  414:
        -:  415:  /* 2. */
    #####:  416:  ecma_object_t *obj_p = ecma_get_object_from_value (iter_result);
        -:  417:
    #####:  418:  ecma_value_t done = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_DONE);
        -:  419:
    #####:  420:  if (ECMA_IS_VALUE_ERROR (done))
        -:  421:  {
    #####:  422:    return done;
        -:  423:  }
        -:  424:
    #####:  425:  ecma_value_t res = ecma_make_boolean_value (ecma_op_to_boolean (done));
    #####:  426:  ecma_free_value (done);
        -:  427:
    #####:  428:  return res;
        -:  429:} /* ecma_op_iterator_complete */
        -:  430:
        -:  431:/**
        -:  432: * IteratorValue operation
        -:  433: *
        -:  434: * See also: ECMA-262 v6, 7.4.4
        -:  435: *
        -:  436: * Note:
        -:  437: *      Returned value must be freed with ecma_free_value.
        -:  438: *
        -:  439: * @return value of the iterator result object
        -:  440: */
        -:  441:ecma_value_t
    #####:  442:ecma_op_iterator_value (ecma_value_t iter_result) /**< iterator value */
        -:  443:{
        -:  444:  /* 1. */
    #####:  445:  JERRY_ASSERT (ecma_is_value_object (iter_result));
        -:  446:
        -:  447:  /* 2. */
    #####:  448:  ecma_object_t *obj_p = ecma_get_object_from_value (iter_result);
    #####:  449:  return ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_VALUE);
        -:  450:} /* ecma_op_iterator_value */
        -:  451:
        -:  452:/**
        -:  453: * IteratorClose operation
        -:  454: *
        -:  455: * See also: ECMA-262 v6, 7.4.6
        -:  456: *
        -:  457: * @return ECMA_VALUE_EMPTY - if "return" is succesfully invoked,
        -:  458: *                            and the operation is called with normal completion
        -:  459: *         ECMA_VALUE_ERROR - otherwise
        -:  460: */
        -:  461:ecma_value_t
    #####:  462:ecma_op_iterator_close (ecma_value_t iterator) /**< iterator value */
        -:  463:{
        -:  464:  /* 1. */
    #####:  465:  JERRY_ASSERT (ecma_is_value_object (iterator));
        -:  466:
        -:  467:  /* 2. */
    #####:  468:  ecma_value_t completion = ECMA_VALUE_EMPTY;
        -:  469:
    #####:  470:  if (jcontext_has_pending_exception ())
        -:  471:  {
    #####:  472:    completion = jcontext_take_exception ();
        -:  473:  }
        -:  474:
        -:  475:  /* 3. */
    #####:  476:  ecma_value_t return_method = ecma_op_get_method_by_magic_id (iterator, LIT_MAGIC_STRING_RETURN);
        -:  477:
        -:  478:  /* 4. */
    #####:  479:  if (ECMA_IS_VALUE_ERROR (return_method))
        -:  480:  {
    #####:  481:    ecma_free_value (completion);
    #####:  482:    return return_method;
        -:  483:  }
        -:  484:
        -:  485:  /* 5. */
    #####:  486:  if (ecma_is_value_undefined (return_method))
        -:  487:  {
    #####:  488:    if (ecma_is_value_empty (completion))
        -:  489:    {
    #####:  490:      return ECMA_VALUE_UNDEFINED;
        -:  491:    }
        -:  492:
    #####:  493:    jcontext_raise_exception (completion);
    #####:  494:    return ECMA_VALUE_ERROR;
        -:  495:  }
        -:  496:
        -:  497:  /* 6. */
    #####:  498:  ecma_object_t *return_obj_p = ecma_get_object_from_value (return_method);
    #####:  499:  ecma_value_t inner_result = ecma_op_function_call (return_obj_p, iterator, NULL, 0);
    #####:  500:  ecma_deref_object (return_obj_p);
        -:  501:
        -:  502:  /* 7. */
    #####:  503:  if (!ecma_is_value_empty (completion))
        -:  504:  {
    #####:  505:    if (ECMA_IS_VALUE_ERROR (inner_result))
        -:  506:    {
    #####:  507:      jcontext_release_exception ();
        -:  508:    }
        -:  509:    else
        -:  510:    {
    #####:  511:      ecma_free_value (inner_result);
        -:  512:    }
        -:  513:
    #####:  514:    jcontext_raise_exception (completion);
    #####:  515:    return ECMA_VALUE_ERROR;
        -:  516:  }
        -:  517:
        -:  518:  /* 8. */
    #####:  519:  if (ECMA_IS_VALUE_ERROR (inner_result))
        -:  520:  {
    #####:  521:    ecma_free_value (completion);
    #####:  522:    return inner_result;
        -:  523:  }
        -:  524:
        -:  525:  /* 9. */
    #####:  526:  bool is_object = ecma_is_value_object (inner_result);
    #####:  527:  ecma_free_value (inner_result);
        -:  528:
    #####:  529:  if (!is_object)
        -:  530:  {
    #####:  531:    ecma_free_value (completion);
    #####:  532:    return ecma_raise_type_error (ECMA_ERR_METHOD_RETURN_IS_NOT_CALLABLE);
        -:  533:  }
        -:  534:
        -:  535:  /* 10. */
    #####:  536:  if (ecma_is_value_empty (completion))
        -:  537:  {
    #####:  538:    return ECMA_VALUE_UNDEFINED;
        -:  539:  }
        -:  540:
    #####:  541:  jcontext_raise_exception (completion);
    #####:  542:  return ECMA_VALUE_ERROR;
        -:  543:} /* ecma_op_iterator_close */
        -:  544:
        -:  545:/**
        -:  546: * IteratorStep operation
        -:  547: *
        -:  548: * See also: ECMA-262 v6, 7.4.5
        -:  549: *
        -:  550: * Note:
        -:  551: *      Returned value must be freed with ecma_free_value.
        -:  552: *
        -:  553: * @return iterator object or ECMA_VALUE_FALSE - if success
        -:  554: *         raised error - otherwise
        -:  555: */
        -:  556:ecma_value_t
    #####:  557:ecma_op_iterator_step (ecma_value_t iterator, /**< iterator value */
        -:  558:                       ecma_value_t next_method) /**< next method */
        -:  559:{
        -:  560:  /* 1. */
    #####:  561:  ecma_value_t result = ecma_op_iterator_next (iterator, next_method, ECMA_VALUE_EMPTY);
        -:  562:
        -:  563:  /* 2. */
    #####:  564:  if (ECMA_IS_VALUE_ERROR (result))
        -:  565:  {
    #####:  566:    return result;
        -:  567:  }
        -:  568:
    #####:  569:  if (!ecma_is_value_object (result))
        -:  570:  {
    #####:  571:    ecma_free_value (result);
    #####:  572:    return ecma_raise_type_error (ECMA_ERR_ITERATOR_RESULT_IS_NOT_AN_OBJECT);
        -:  573:  }
        -:  574:
        -:  575:  /* 3. */
    #####:  576:  ecma_object_t *obj_p = ecma_get_object_from_value (result);
    #####:  577:  ecma_value_t done = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_DONE);
        -:  578:
        -:  579:  /* 4. */
    #####:  580:  if (ECMA_IS_VALUE_ERROR (done))
        -:  581:  {
    #####:  582:    ecma_free_value (result);
    #####:  583:    return done;
        -:  584:  }
        -:  585:
    #####:  586:  bool is_done = ecma_op_to_boolean (done);
    #####:  587:  ecma_free_value (done);
        -:  588:
        -:  589:  /* 5. */
    #####:  590:  if (is_done)
        -:  591:  {
    #####:  592:    ecma_free_value (result);
    #####:  593:    return ECMA_VALUE_FALSE;
        -:  594:  }
        -:  595:
        -:  596:  /* 6. */
    #####:  597:  return result;
        -:  598:} /* ecma_op_iterator_step */
        -:  599:
        -:  600:/**
        -:  601: * Perform a command specified by the command argument
        -:  602: *
        -:  603: * Note:
        -:  604: *      Returned value must be freed with ecma_free_value.
        -:  605: *
        -:  606: * @return iterator object - if success
        -:  607: *         raised error - otherwise
        -:  608: */
        -:  609:ecma_value_t
    #####:  610:ecma_op_iterator_do (ecma_iterator_command_type_t command, /**< command to be executed */
        -:  611:                     ecma_value_t iterator, /**< iterator object */
        -:  612:                     ecma_value_t next_method, /**< next method */
        -:  613:                     ecma_value_t value, /**< the routines's value argument */
        -:  614:                     bool *done_p) /**< it contains the logical value of the done property */
        -:  615:{
        -:  616:  ecma_value_t result;
        -:  617:
    #####:  618:  if (command == ECMA_ITERATOR_NEXT)
        -:  619:  {
    #####:  620:    result = ecma_op_iterator_next (iterator, next_method, value);
        -:  621:  }
    #####:  622:  else if (command == ECMA_ITERATOR_THROW)
        -:  623:  {
    #####:  624:    result = ecma_op_iterator_throw (iterator, value);
        -:  625:  }
        -:  626:  else
        -:  627:  {
    #####:  628:    JERRY_ASSERT (command == ECMA_ITERATOR_RETURN);
    #####:  629:    result = ecma_op_iterator_return (iterator, value);
        -:  630:  }
        -:  631:
    #####:  632:  if (ECMA_IS_VALUE_ERROR (result))
        -:  633:  {
    #####:  634:    return result;
        -:  635:  }
        -:  636:
    #####:  637:  if (!ecma_is_value_object (result))
        -:  638:  {
    #####:  639:    ecma_free_value (result);
    #####:  640:    return ecma_raise_type_error (ECMA_ERR_ITERATOR_RESULT_IS_NOT_AN_OBJECT);
        -:  641:  }
        -:  642:
    #####:  643:  ecma_object_t *obj_p = ecma_get_object_from_value (result);
    #####:  644:  ecma_value_t done = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_DONE);
        -:  645:
    #####:  646:  if (ECMA_IS_VALUE_ERROR (done))
        -:  647:  {
    #####:  648:    ecma_free_value (result);
    #####:  649:    return done;
        -:  650:  }
        -:  651:
    #####:  652:  *done_p = ecma_op_to_boolean (done);
    #####:  653:  ecma_free_value (done);
        -:  654:
    #####:  655:  return result;
        -:  656:} /* ecma_op_iterator_do */
        -:  657:
        -:  658:/**
        -:  659: * CreateAsyncFromSyncIterator operation
        -:  660: *
        -:  661: * See also: ECMA-262 v10, 25.1.4.1
        -:  662: *
        -:  663: * Note:
        -:  664: *      Returned value must be freed with ecma_free_value.
        -:  665: *
        -:  666: * @return async from sync iterator object
        -:  667: */
        -:  668:ecma_value_t
    #####:  669:ecma_op_create_async_from_sync_iterator (ecma_value_t sync_iterator, /**< sync iterator */
        -:  670:                                         ecma_value_t sync_next_method, /**< sync iterator next method */
        -:  671:                                         ecma_value_t *async_next_method_p) /**< [out] async next method */
        -:  672:{
    #####:  673:  JERRY_ASSERT (ecma_is_value_object (sync_iterator));
    #####:  674:  JERRY_ASSERT (ecma_is_value_object (sync_next_method) || ecma_is_value_undefined (sync_next_method));
        -:  675:
        -:  676:  /* 1. */
    #####:  677:  ecma_object_t *obj_p = ecma_create_object (ecma_builtin_get (ECMA_BUILTIN_ID_ASYNC_FROM_SYNC_ITERATOR_PROTOTYPE),
        -:  678:                                             sizeof (ecma_async_from_sync_iterator_object_t),
        -:  679:                                             ECMA_OBJECT_TYPE_CLASS);
        -:  680:
    #####:  681:  ecma_async_from_sync_iterator_object_t *ext_obj_p = (ecma_async_from_sync_iterator_object_t *) obj_p;
        -:  682:
        -:  683:  /* 2. */
    #####:  684:  ext_obj_p->sync_next_method = sync_next_method;
    #####:  685:  ext_obj_p->header.u.cls.u3.sync_iterator = sync_iterator;
    #####:  686:  ext_obj_p->header.u.cls.type = ECMA_OBJECT_CLASS_ASYNC_FROM_SYNC_ITERATOR;
        -:  687:
        -:  688:  /* 3. */
    #####:  689:  *async_next_method_p = ecma_op_object_get_by_magic_id (obj_p, LIT_MAGIC_STRING_NEXT);
    #####:  690:  JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (*async_next_method_p));
        -:  691:
        -:  692:  /* 4. */
    #####:  693:  return ecma_make_object_value (obj_p);
        -:  694:} /* ecma_op_create_async_from_sync_iterator */
        -:  695:
        -:  696:/**
        -:  697: * Async-from-Sync Iterator Value Unwrap Functions
        -:  698: *
        -:  699: * See also: ES11 25.1.4.2.4
        -:  700: *
        -:  701: * @return iterator result object
        -:  702: */
        -:  703:ecma_value_t
    #####:  704:ecma_async_from_sync_iterator_unwrap_cb (ecma_object_t *function_obj_p, /**< function object */
        -:  705:                                         const ecma_value_t args_p[], /**< argument list */
        -:  706:                                         const uint32_t args_count) /**< argument number */
        -:  707:{
    #####:  708:  ecma_extended_object_t *unwrap_p = (ecma_extended_object_t *) function_obj_p;
        -:  709:
        -:  710:  /* 2. */
    #####:  711:  ecma_value_t arg = args_count > 0 ? args_p[0] : ECMA_VALUE_UNDEFINED;
    #####:  712:  ecma_value_t done =
    #####:  713:    ecma_make_boolean_value (unwrap_p->u.built_in.u2.routine_flags >> ECMA_NATIVE_HANDLER_COMMON_FLAGS_SHIFT);
        -:  714:
    #####:  715:  return ecma_create_iter_result_object (arg, done);
        -:  716:} /* ecma_async_from_sync_iterator_unwrap_cb */
        -:  717:
        -:  718:#endif /* JERRY_ESNEXT */
        -:  719:
        -:  720:/**
        -:  721: * @}
        -:  722: * @}
        -:  723: */
