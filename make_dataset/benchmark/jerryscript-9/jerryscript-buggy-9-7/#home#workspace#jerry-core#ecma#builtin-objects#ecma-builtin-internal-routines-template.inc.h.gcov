        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-internal-routines-template.inc.h
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#ifndef BUILTIN_UNDERSCORED_ID
        -:   17:#error "Please, define BUILTIN_UNDERSCORED_ID"
        -:   18:#endif /* !BUILTIN_UNDERSCORED_ID */
        -:   19:
        -:   20:#ifndef BUILTIN_INC_HEADER_NAME
        -:   21:#error "Please, define BUILTIN_INC_HEADER_NAME"
        -:   22:#endif /* !BUILTIN_INC_HEADER_NAME */
        -:   23:
        -:   24:#include "ecma-objects.h"
        -:   25:
        -:   26:#define PASTE__(x, y) x##y
        -:   27:#define PASTE_(x, y)  PASTE__ (x, y)
        -:   28:#define PASTE(x, y)   PASTE_ (x, y)
        -:   29:
        -:   30:#define PROPERTY_DESCRIPTOR_LIST_NAME PASTE (PASTE (ecma_builtin_, BUILTIN_UNDERSCORED_ID), _property_descriptor_list)
        -:   31:#define DISPATCH_ROUTINE_ROUTINE_NAME PASTE (PASTE (ecma_builtin_, BUILTIN_UNDERSCORED_ID), _dispatch_routine)
        -:   32:
        -:   33:#ifndef BUILTIN_CUSTOM_DISPATCH
        -:   34:
        -:   35:#define ROUTINE_ARG(n)             , ecma_value_t arg##n
        -:   36:#define ROUTINE_ARG_LIST_0         ecma_value_t this_arg
        -:   37:#define ROUTINE_ARG_LIST_1         ROUTINE_ARG_LIST_0 ROUTINE_ARG (1)
        -:   38:#define ROUTINE_ARG_LIST_2         ROUTINE_ARG_LIST_1 ROUTINE_ARG (2)
        -:   39:#define ROUTINE_ARG_LIST_3         ROUTINE_ARG_LIST_2 ROUTINE_ARG (3)
        -:   40:#define ROUTINE_ARG_LIST_NON_FIXED ROUTINE_ARG_LIST_0, const ecma_value_t *arguments_list_p, uint32_t arguments_list_len
        -:   41:#define ROUTINE(name, c_function_name, args_number, length_prop_value) \
        -:   42:  static ecma_value_t c_function_name (ROUTINE_ARG_LIST_##args_number);
        -:   43:#define ROUTINE_CONFIGURABLE_ONLY(name, c_function_name, args_number, length_prop_value) \
        -:   44:  static ecma_value_t c_function_name (ROUTINE_ARG_LIST_##args_number);
        -:   45:#define ROUTINE_WITH_FLAGS(name, c_function_name, args_number, length_prop_value, flags) \
        -:   46:  static ecma_value_t c_function_name (ROUTINE_ARG_LIST_##args_number);
        -:   47:#define ACCESSOR_READ_WRITE(name, c_getter_func_name, c_setter_func_name, prop_attributes) \
        -:   48:  static ecma_value_t c_getter_func_name (ROUTINE_ARG_LIST_0);                             \
        -:   49:  static ecma_value_t c_setter_func_name (ROUTINE_ARG_LIST_1);
        -:   50:#define ACCESSOR_READ_ONLY(name, c_getter_func_name, prop_attributes) \
        -:   51:  static ecma_value_t c_getter_func_name (ROUTINE_ARG_LIST_0);
        -:   52:#include BUILTIN_INC_HEADER_NAME
        -:   53:#undef ROUTINE_ARG_LIST_NON_FIXED
        -:   54:#undef ROUTINE_ARG_LIST_3
        -:   55:#undef ROUTINE_ARG_LIST_2
        -:   56:#undef ROUTINE_ARG_LIST_1
        -:   57:#undef ROUTINE_ARG_LIST_0
        -:   58:#undef ROUTINE_ARG
        -:   59:
        -:   60:/**
        -:   61: * List of built-in routine identifiers.
        -:   62: */
        -:   63:enum
        -:   64:{
        -:   65:  PASTE (ECMA_ROUTINE_START_, BUILTIN_UNDERSCORED_ID) = 0,
        -:   66:#define ROUTINE(name, c_function_name, args_number, length_prop_value) ECMA_ROUTINE_##name##c_function_name,
        -:   67:#define ROUTINE_CONFIGURABLE_ONLY(name, c_function_name, args_number, length_prop_value) \
        -:   68:  ECMA_ROUTINE_##name##c_function_name,
        -:   69:#define ROUTINE_WITH_FLAGS(name, c_function_name, args_number, length_prop_value, flags) \
        -:   70:  ECMA_ROUTINE_##name##c_function_name,
        -:   71:#define ACCESSOR_READ_WRITE(name, c_getter_func_name, c_setter_func_name, prop_attributes) \
        -:   72:  ECMA_ACCESSOR_##name##c_getter_func_name, ECMA_ACCESSOR_##name##c_setter_func_name,
        -:   73:#define ACCESSOR_READ_ONLY(name, c_getter_func_name, prop_attributes) ECMA_ACCESSOR_##name##c_getter_func_name,
        -:   74:#include BUILTIN_INC_HEADER_NAME
        -:   75:};
        -:   76:
        -:   77:#endif /* !BUILTIN_CUSTOM_DISPATCH */
        -:   78:
        -:   79:/**
        -:   80: * Built-in property list of the built-in object.
        -:   81: */
        -:   82:const ecma_builtin_property_descriptor_t PROPERTY_DESCRIPTOR_LIST_NAME[] = {
        -:   83:#ifndef BUILTIN_CUSTOM_DISPATCH
        -:   84:#define ROUTINE(name, c_function_name, args_number, length_prop_value) \
        -:   85:  { name,                                                              \
        -:   86:    ECMA_BUILTIN_PROPERTY_ROUTINE,                                     \
        -:   87:    ECMA_PROPERTY_BUILT_IN_CONFIGURABLE_WRITABLE,                      \
        -:   88:    ECMA_ROUTINE_VALUE (ECMA_ROUTINE_##name##c_function_name, length_prop_value) },
        -:   89:#define ROUTINE_CONFIGURABLE_ONLY(name, c_function_name, args_number, length_prop_value) \
        -:   90:  { name,                                                                                \
        -:   91:    ECMA_BUILTIN_PROPERTY_ROUTINE,                                                       \
        -:   92:    ECMA_PROPERTY_BUILT_IN_CONFIGURABLE,                                                 \
        -:   93:    ECMA_ROUTINE_VALUE (ECMA_ROUTINE_##name##c_function_name, length_prop_value) },
        -:   94:#define ROUTINE_WITH_FLAGS(name, c_function_name, args_number, length_prop_value, prop_attributes) \
        -:   95:  { name,                                                                                          \
        -:   96:    ECMA_BUILTIN_PROPERTY_ROUTINE,                                                                 \
        -:   97:    (prop_attributes) | ECMA_PROPERTY_FLAG_BUILT_IN,                                               \
        -:   98:    ECMA_ROUTINE_VALUE (ECMA_ROUTINE_##name##c_function_name, length_prop_value) },
        -:   99:#define ACCESSOR_READ_ONLY(name, c_getter_func_name, prop_attributes) \
        -:  100:  { name,                                                             \
        -:  101:    ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_ONLY,                         \
        -:  102:    (prop_attributes) | ECMA_PROPERTY_FLAG_BUILT_IN,                  \
        -:  103:    ECMA_ACCESSOR_##name##c_getter_func_name },
        -:  104:#define ACCESSOR_READ_WRITE(name, c_getter_func_name, c_setter_func_name, prop_attributes) \
        -:  105:  { name,                                                                                  \
        -:  106:    ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_WRITE,                                             \
        -:  107:    (prop_attributes) | ECMA_PROPERTY_FLAG_BUILT_IN,                                       \
        -:  108:    ECMA_ACCESSOR_READ_WRITE (ECMA_ACCESSOR_##name##c_getter_func_name, ECMA_ACCESSOR_##name##c_setter_func_name) },
        -:  109:#else /* BUILTIN_CUSTOM_DISPATCH */
        -:  110:#define ROUTINE(name, c_function_name, args_number, length_prop_value) \
        -:  111:  { name,                                                              \
        -:  112:    ECMA_BUILTIN_PROPERTY_ROUTINE,                                     \
        -:  113:    ECMA_PROPERTY_BUILT_IN_CONFIGURABLE_WRITABLE,                      \
        -:  114:    ECMA_ROUTINE_VALUE (c_function_name, length_prop_value) },
        -:  115:#define ROUTINE_CONFIGURABLE_ONLY(name, c_function_name, args_number, length_prop_value) \
        -:  116:  { name,                                                                                \
        -:  117:    ECMA_BUILTIN_PROPERTY_ROUTINE,                                                       \
        -:  118:    ECMA_PROPERTY_BUILT_IN_CONFIGURABLE,                                                 \
        -:  119:    ECMA_ROUTINE_VALUE (c_function_name, length_prop_value) },
        -:  120:#define ROUTINE_WITH_FLAGS(name, c_function_name, args_number, length_prop_value, prop_attributes) \
        -:  121:  { name,                                                                                          \
        -:  122:    ECMA_BUILTIN_PROPERTY_ROUTINE,                                                                 \
        -:  123:    (prop_attributes) | ECMA_PROPERTY_FLAG_BUILT_IN,                                               \
        -:  124:    ECMA_ROUTINE_VALUE (c_function_name, length_prop_value) },
        -:  125:#define ACCESSOR_READ_ONLY(name, c_getter_func_name, prop_attributes) \
        -:  126:  { name,                                                             \
        -:  127:    ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_ONLY,                         \
        -:  128:    (prop_attributes) | ECMA_PROPERTY_FLAG_BUILT_IN,                  \
        -:  129:    c_getter_func_name },
        -:  130:#define ACCESSOR_READ_WRITE(name, c_getter_func_name, c_setter_func_name, prop_attributes) \
        -:  131:  { name,                                                                                  \
        -:  132:    ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_WRITE,                                             \
        -:  133:    (prop_attributes) | ECMA_PROPERTY_FLAG_BUILT_IN,                                       \
        -:  134:    ECMA_ACCESSOR_READ_WRITE (c_getter_func_name, c_setter_func_name) },
        -:  135:#endif /* !BUILTIN_CUSTOM_DISPATCH */
        -:  136:#define OBJECT_VALUE(name, obj_builtin_id, prop_attributes) \
        -:  137:  { name, ECMA_BUILTIN_PROPERTY_OBJECT, (prop_attributes) | ECMA_PROPERTY_FLAG_BUILT_IN, obj_builtin_id },
        -:  138:#define SIMPLE_VALUE(name, simple_value, prop_attributes) \
        -:  139:  { name, ECMA_BUILTIN_PROPERTY_SIMPLE, (prop_attributes) | ECMA_PROPERTY_FLAG_BUILT_IN, simple_value },
        -:  140:#define NUMBER_VALUE(name, number_value, prop_attributes) \
        -:  141:  { name, ECMA_BUILTIN_PROPERTY_NUMBER, (prop_attributes) | ECMA_PROPERTY_FLAG_BUILT_IN, number_value },
        -:  142:#define STRING_VALUE(name, magic_string_id, prop_attributes) \
        -:  143:  { name, ECMA_BUILTIN_PROPERTY_STRING, (prop_attributes) | ECMA_PROPERTY_FLAG_BUILT_IN, magic_string_id },
        -:  144:#if JERRY_ESNEXT
        -:  145:#define SYMBOL_VALUE(name, symbol) { name, ECMA_BUILTIN_PROPERTY_SYMBOL, ECMA_PROPERTY_BUILT_IN_FIXED, symbol },
        -:  146:#define INTRINSIC_PROPERTY(name, magic_string_id, prop_attributes) \
        -:  147:  { name, ECMA_BUILTIN_PROPERTY_INTRINSIC_PROPERTY, (prop_attributes) | ECMA_PROPERTY_FLAG_BUILT_IN, magic_string_id },
        -:  148:#define ACCESSOR_BUILTIN_FUNCTION(name, getter_builtin_id, setter_builtin_id, prop_attributes) \
        -:  149:  { name,                                                                                      \
        -:  150:    ECMA_BUILTIN_PROPERTY_ACCESSOR_BUILTIN_FUNCTION,                                           \
        -:  151:    (prop_attributes) | ECMA_PROPERTY_FLAG_BUILT_IN,                                           \
        -:  152:    ECMA_ACCESSOR_READ_WRITE (getter_builtin_id, setter_builtin_id) },
        -:  153:#endif /* JERRY_ESNEXT */
        -:  154:#include BUILTIN_INC_HEADER_NAME
        -:  155:  { LIT_MAGIC_STRING__COUNT, ECMA_BUILTIN_PROPERTY_END, 0, 0 }
        -:  156:};
        -:  157:
        -:  158:#ifndef BUILTIN_CUSTOM_DISPATCH
        -:  159:
        -:  160:/**
        -:  161: * Dispatcher of the built-in's routines
        -:  162: *
        -:  163: * @return ecma value
        -:  164: *         Returned value must be freed with ecma_free_value.
        -:  165: */
        -:  166:ecma_value_t
    #####:  167:DISPATCH_ROUTINE_ROUTINE_NAME (uint8_t builtin_routine_id, /**< built-in wide routine
        -:  168:                                                                identifier */
        -:  169:                               ecma_value_t this_arg_value, /**< 'this' argument
        -:  170:                                                                 value */
        -:  171:                               const ecma_value_t arguments_list[], /**< list of arguments
        -:  172:                                                                         passed to routine */
        -:  173:                               uint32_t arguments_number) /**< length of
        -:  174:                                                           *   arguments' list */
        -:  175:{
        -:  176:  /* the arguments may be unused for some built-ins */
        -:  177:  JERRY_UNUSED (this_arg_value);
        -:  178:  JERRY_UNUSED (arguments_list);
        -:  179:  JERRY_UNUSED (arguments_number);
        -:  180:
    #####:  181:  switch (builtin_routine_id)
        -:  182:  {
        -:  183:#define ROUTINE_ARG(n) (arguments_list[n - 1])
        -:  184:#define ROUTINE_ARG_LIST_0
        -:  185:#define ROUTINE_ARG_LIST_1         , ROUTINE_ARG (1)
        -:  186:#define ROUTINE_ARG_LIST_2         ROUTINE_ARG_LIST_1, ROUTINE_ARG (2)
        -:  187:#define ROUTINE_ARG_LIST_3         ROUTINE_ARG_LIST_2, ROUTINE_ARG (3)
        -:  188:#define ROUTINE_ARG_LIST_NON_FIXED , arguments_list, arguments_number
        -:  189:#define ROUTINE(name, c_function_name, args_number, length_prop_value)      \
        -:  190:  case ECMA_ROUTINE_##name##c_function_name:                                \
        -:  191:  {                                                                         \
        -:  192:    return c_function_name (this_arg_value ROUTINE_ARG_LIST_##args_number); \
        -:  193:  }
        -:  194:#define ROUTINE_CONFIGURABLE_ONLY(name, c_function_name, args_number, length_prop_value) \
        -:  195:  case ECMA_ROUTINE_##name##c_function_name:                                             \
        -:  196:  {                                                                                      \
        -:  197:    return c_function_name (this_arg_value ROUTINE_ARG_LIST_##args_number);              \
        -:  198:  }
        -:  199:#define ROUTINE_WITH_FLAGS(name, c_function_name, args_number, length_prop_value, flags) \
        -:  200:  case ECMA_ROUTINE_##name##c_function_name:                                             \
        -:  201:  {                                                                                      \
        -:  202:    return c_function_name (this_arg_value ROUTINE_ARG_LIST_##args_number);              \
        -:  203:  }
        -:  204:#define ACCESSOR_READ_WRITE(name, c_getter_func_name, c_setter_func_name, prop_attributes) \
        -:  205:  case ECMA_ACCESSOR_##name##c_getter_func_name:                                           \
        -:  206:  {                                                                                        \
        -:  207:    return c_getter_func_name (this_arg_value);                                            \
        -:  208:  }                                                                                        \
        -:  209:  case ECMA_ACCESSOR_##name##c_setter_func_name:                                           \
        -:  210:  {                                                                                        \
        -:  211:    return c_setter_func_name (this_arg_value ROUTINE_ARG_LIST_1);                         \
        -:  212:  }
        -:  213:#define ACCESSOR_READ_ONLY(name, c_getter_func_name, prop_attributes) \
        -:  214:  case ECMA_ACCESSOR_##name##c_getter_func_name:                      \
        -:  215:  {                                                                   \
        -:  216:    return c_getter_func_name (this_arg_value);                       \
        -:  217:  }
        -:  218:#include BUILTIN_INC_HEADER_NAME
        -:  219:#undef ROUTINE_ARG
        -:  220:#undef ROUTINE_ARG_LIST_0
        -:  221:#undef ROUTINE_ARG_LIST_1
        -:  222:#undef ROUTINE_ARG_LIST_2
        -:  223:#undef ROUTINE_ARG_LIST_3
        -:  224:#undef ROUTINE_ARG_LIST_NON_FIXED
        -:  225:
    #####:  226:    default:
        -:  227:    {
    #####:  228:      JERRY_UNREACHABLE ();
        -:  229:    }
        -:  230:  }
        -:  231:} /* DISPATCH_ROUTINE_ROUTINE_NAME */
        -:  232:
        -:  233:#endif /* !BUILTIN_CUSTOM_DISPATCH */
        -:  234:
        -:  235:#undef BUILTIN_INC_HEADER_NAME
        -:  236:#undef BUILTIN_CUSTOM_DISPATCH
        -:  237:#undef BUILTIN_UNDERSCORED_ID
        -:  238:#undef DISPATCH_ROUTINE_ROUTINE_NAME
        -:  239:#undef ECMA_BUILTIN_PROPERTY_NAME_INDEX
        -:  240:#undef PASTE__
        -:  241:#undef PASTE_
        -:  242:#undef PASTE
        -:  243:#undef PROPERTY_DESCRIPTOR_LIST_NAME
