        -:    0:Source:/home/workspace/jerry-main/main-jerry.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <assert.h>
        -:   17:#include <stdio.h>
        -:   18:#include <stdlib.h>
        -:   19:#include <string.h>
        -:   20:
        -:   21:#include "jerryscript-port-default.h"
        -:   22:#include "jerryscript-port.h"
        -:   23:#include "jerryscript.h"
        -:   24:
        -:   25:#include "jerryscript-ext/debugger.h"
        -:   26:#include "jerryscript-ext/handler.h"
        -:   27:#include "main-options.h"
        -:   28:#include "main-utils.h"
        -:   29:
        -:   30:/**
        -:   31: * Temporal buffer size.
        -:   32: */
        -:   33:#define JERRY_BUFFER_SIZE 256u
        -:   34:
        -:   35:#if defined(JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1)
        -:   36:/**
        -:   37: * The alloc function passed to jerry_context_create
        -:   38: */
        -:   39:static void *
        -:   40:context_alloc (size_t size, void *cb_data_p)
        -:   41:{
        -:   42:  (void) cb_data_p; /* unused */
        -:   43:  return malloc (size);
        -:   44:} /* context_alloc */
        -:   45:#endif /* defined (JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1) */
        -:   46:
        -:   47:#ifdef DPP_ENABLE_GCOV
        -:   48:#include <gcov.h>
        -:   49:void __asan_on_error(void);
        1:   50:void __asan_on_error(void) {
        1:   51:  __gcov_flush();
    #####:   52:}
        -:   53:#endif
        -:   54:
        -:   55:int
        1:   56:main (int argc, char **argv)
        1:   57:{
        -:   58:  union
        -:   59:  {
        -:   60:    double d;
        -:   61:    unsigned u;
        1:   62:  } now = { .d = jerry_port_get_current_time () };
        1:   63:  srand (now.u);
        -:   64:
        1:   65:  JERRY_VLA (main_source_t, sources_p, argc);
        -:   66:
        1:   67:  main_args_t arguments;
        1:   68:  arguments.sources_p = sources_p;
        -:   69:
        1:   70:  main_parse_args (argc, argv, &arguments);
        -:   71:
        -:   72:#if defined(JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1)
        -:   73:  jerry_context_t *context_p = jerry_context_alloc (JERRY_GLOBAL_HEAP_SIZE * 1024, context_alloc, NULL);
        -:   74:  jerry_port_default_set_current_context (context_p);
        -:   75:#endif /* defined (JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1) */
        -:   76:
        1:   77:restart:
        1:   78:  main_init_engine (&arguments);
        1:   79:  int return_code = JERRY_STANDALONE_EXIT_CODE_FAIL;
        1:   80:  jerry_value_t ret_value;
        -:   81:
        1:   82:  for (uint32_t source_index = 0; source_index < arguments.source_count; source_index++)
        -:   83:  {
        1:   84:    main_source_t *source_file_p = sources_p + source_index;
        1:   85:    const char *file_path_p = argv[source_file_p->path_index];
        -:   86:
        1:   87:    if (source_file_p->type == SOURCE_MODULE)
        -:   88:    {
    #####:   89:      jerry_value_t specifier =
    #####:   90:        jerry_string ((const jerry_char_t *) file_path_p, (jerry_size_t) strlen (file_path_p), JERRY_ENCODING_UTF8);
    #####:   91:      jerry_value_t referrer = jerry_undefined ();
    #####:   92:      ret_value = jerry_port_module_resolve (specifier, referrer, NULL);
    #####:   93:      jerry_value_free (referrer);
    #####:   94:      jerry_value_free (specifier);
        -:   95:
    #####:   96:      if (!jerry_value_is_exception (ret_value))
        -:   97:      {
    #####:   98:        if (jerry_module_state (ret_value) != JERRY_MODULE_STATE_UNLINKED)
        -:   99:        {
        -:  100:          /* A module can be evaluated only once. */
    #####:  101:          jerry_value_free (ret_value);
    #####:  102:          continue;
        -:  103:        }
        -:  104:
    #####:  105:        jerry_value_t link_val = jerry_module_link (ret_value, NULL, NULL);
        -:  106:
    #####:  107:        if (jerry_value_is_exception (link_val))
        -:  108:        {
    #####:  109:          jerry_value_free (ret_value);
    #####:  110:          ret_value = link_val;
        -:  111:        }
        -:  112:        else
        -:  113:        {
    #####:  114:          jerry_value_free (link_val);
        -:  115:
    #####:  116:          jerry_value_t module_val = ret_value;
    #####:  117:          ret_value = jerry_module_evaluate (module_val);
    #####:  118:          jerry_value_free (module_val);
        -:  119:        }
        -:  120:      }
        -:  121:
    #####:  122:      if (jerry_value_is_exception (ret_value))
        -:  123:      {
    #####:  124:        main_print_unhandled_exception (ret_value);
    #####:  125:        goto exit;
        -:  126:      }
        -:  127:
    #####:  128:      jerry_value_free (ret_value);
    #####:  129:      continue;
        -:  130:    }
        -:  131:
        1:  132:    size_t source_size;
        1:  133:    uint8_t *source_p = jerry_port_read_source (file_path_p, &source_size);
        -:  134:
        1:  135:    if (source_p == NULL)
        -:  136:    {
    #####:  137:      goto exit;
        -:  138:    }
        -:  139:
        1:  140:    switch (source_file_p->type)
        -:  141:    {
    #####:  142:      case SOURCE_SNAPSHOT:
        -:  143:      {
    #####:  144:        ret_value = jerry_exec_snapshot ((uint32_t *) source_p,
        -:  145:                                         source_size,
    #####:  146:                                         source_file_p->snapshot_index,
        -:  147:                                         JERRY_SNAPSHOT_EXEC_COPY_DATA,
        -:  148:                                         NULL);
        -:  149:
    #####:  150:        jerry_port_release_source (source_p);
    #####:  151:        break;
        -:  152:      }
        1:  153:      default:
        -:  154:      {
        1:  155:        assert (source_file_p->type == SOURCE_SCRIPT || source_file_p->type == SOURCE_MODULE);
        -:  156:
        1:  157:        if (!jerry_validate_string ((jerry_char_t *) source_p, (jerry_size_t) source_size, JERRY_ENCODING_UTF8))
        -:  158:        {
    #####:  159:          jerry_port_release_source (source_p);
    #####:  160:          jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Error: Input must be a valid UTF-8 string.");
    #####:  161:          goto exit;
        -:  162:        }
        -:  163:
        1:  164:        jerry_parse_options_t parse_options;
        1:  165:        parse_options.options = JERRY_PARSE_HAS_SOURCE_NAME;
        1:  166:        parse_options.source_name =
        1:  167:          jerry_string ((const jerry_char_t *) file_path_p, (jerry_size_t) strlen (file_path_p), JERRY_ENCODING_UTF8);
        -:  168:
        1:  169:        ret_value = jerry_parse (source_p, source_size, &parse_options);
        -:  170:
        1:  171:        jerry_value_free (parse_options.source_name);
        1:  172:        jerry_port_release_source (source_p);
        -:  173:
        1:  174:        if (!jerry_value_is_exception (ret_value) && !(arguments.option_flags & OPT_FLAG_PARSE_ONLY))
        -:  175:        {
        1:  176:          jerry_value_t func_val = ret_value;
        1:  177:          ret_value = jerry_run (func_val);
    #####:  178:          jerry_value_free (func_val);
        -:  179:        }
        -:  180:
    #####:  181:        break;
        -:  182:      }
        -:  183:    }
        -:  184:
    #####:  185:    if (jerry_value_is_exception (ret_value))
        -:  186:    {
    #####:  187:      if (main_is_value_reset (ret_value))
        -:  188:      {
    #####:  189:        jerry_cleanup ();
        -:  190:
    #####:  191:        goto restart;
        -:  192:      }
        -:  193:
    #####:  194:      main_print_unhandled_exception (ret_value);
    #####:  195:      goto exit;
        -:  196:    }
        -:  197:
    #####:  198:    jerry_value_free (ret_value);
        -:  199:  }
        -:  200:
    #####:  201:  if (arguments.option_flags & OPT_FLAG_WAIT_SOURCE)
        -:  202:  {
        -:  203:    while (true)
    #####:  204:    {
        -:  205:      jerry_debugger_wait_for_source_status_t receive_status;
    #####:  206:      receive_status = jerry_debugger_wait_for_client_source (main_wait_for_source_callback, NULL, &ret_value);
        -:  207:
    #####:  208:      if (receive_status == JERRY_DEBUGGER_SOURCE_RECEIVE_FAILED)
        -:  209:      {
    #####:  210:        jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Connection aborted before source arrived.");
    #####:  211:        goto exit;
        -:  212:      }
        -:  213:
    #####:  214:      if (receive_status == JERRY_DEBUGGER_SOURCE_END)
        -:  215:      {
    #####:  216:        jerry_port_log (JERRY_LOG_LEVEL_DEBUG, "No more client source.\n");
    #####:  217:        break;
        -:  218:      }
        -:  219:
    #####:  220:      assert (receive_status == JERRY_DEBUGGER_CONTEXT_RESET_RECEIVED
        -:  221:              || receive_status == JERRY_DEBUGGER_SOURCE_RECEIVED);
        -:  222:
    #####:  223:      if (receive_status == JERRY_DEBUGGER_CONTEXT_RESET_RECEIVED || main_is_value_reset (ret_value))
        -:  224:      {
    #####:  225:        jerry_cleanup ();
    #####:  226:        goto restart;
        -:  227:      }
        -:  228:
    #####:  229:      assert (receive_status == JERRY_DEBUGGER_SOURCE_RECEIVED);
    #####:  230:      jerry_value_free (ret_value);
        -:  231:    }
        -:  232:  }
    #####:  233:  else if (arguments.option_flags & OPT_FLAG_USE_STDIN)
        -:  234:  {
    #####:  235:    char buffer[JERRY_BUFFER_SIZE];
    #####:  236:    char *source_p = NULL;
    #####:  237:    size_t source_size = 0;
        -:  238:
    #####:  239:    while (!feof (stdin))
        -:  240:    {
    #####:  241:      size_t read_bytes = fread (buffer, 1u, JERRY_BUFFER_SIZE, stdin);
        -:  242:
    #####:  243:      size_t new_size = source_size + read_bytes;
    #####:  244:      source_p = realloc (source_p, new_size);
        -:  245:
    #####:  246:      memcpy (source_p + source_size, buffer, read_bytes);
    #####:  247:      source_size = new_size;
        -:  248:    }
        -:  249:
    #####:  250:    ret_value = jerry_parse ((jerry_char_t *) source_p, source_size, NULL);
    #####:  251:    free (source_p);
        -:  252:
    #####:  253:    if (jerry_value_is_exception (ret_value))
        -:  254:    {
    #####:  255:      main_print_unhandled_exception (ret_value);
    #####:  256:      goto exit;
        -:  257:    }
        -:  258:
    #####:  259:    jerry_value_t func_val = ret_value;
    #####:  260:    ret_value = jerry_run (func_val);
    #####:  261:    jerry_value_free (func_val);
        -:  262:
    #####:  263:    if (jerry_value_is_exception (ret_value))
        -:  264:    {
    #####:  265:      main_print_unhandled_exception (ret_value);
    #####:  266:      goto exit;
        -:  267:    }
        -:  268:
    #####:  269:    jerry_value_free (ret_value);
        -:  270:  }
    #####:  271:  else if (arguments.source_count == 0)
        -:  272:  {
    #####:  273:    const char *prompt = (arguments.option_flags & OPT_FLAG_NO_PROMPT) ? "" : "jerry> ";
    #####:  274:    char buffer[JERRY_BUFFER_SIZE];
        -:  275:
        -:  276:    while (true)
    #####:  277:    {
    #####:  278:      printf ("%s", prompt);
    #####:  279:      char *str_p = fgets (buffer, JERRY_BUFFER_SIZE, stdin);
        -:  280:
    #####:  281:      if (str_p == NULL)
        -:  282:      {
    #####:  283:        printf ("\n");
    #####:  284:        break;
        -:  285:      }
        -:  286:
    #####:  287:      size_t len = strlen (str_p);
        -:  288:
    #####:  289:      if (len == 0)
        -:  290:      {
    #####:  291:        continue;
        -:  292:      }
        -:  293:
    #####:  294:      if (!jerry_validate_string ((jerry_char_t *) str_p, (jerry_size_t) len, JERRY_ENCODING_UTF8))
        -:  295:      {
    #####:  296:        jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Error: Input must be a valid UTF-8 string.\n");
    #####:  297:        continue;
        -:  298:      }
        -:  299:
    #####:  300:      ret_value = jerry_parse ((jerry_char_t *) str_p, len, NULL);
        -:  301:
    #####:  302:      if (jerry_value_is_exception (ret_value))
        -:  303:      {
    #####:  304:        main_print_unhandled_exception (ret_value);
    #####:  305:        continue;
        -:  306:      }
        -:  307:
    #####:  308:      jerry_value_t func_val = ret_value;
    #####:  309:      ret_value = jerry_run (func_val);
    #####:  310:      jerry_value_free (func_val);
        -:  311:
    #####:  312:      if (jerry_value_is_exception (ret_value))
        -:  313:      {
    #####:  314:        main_print_unhandled_exception (ret_value);
    #####:  315:        continue;
        -:  316:      }
        -:  317:
    #####:  318:      const jerry_value_t args[] = { ret_value };
    #####:  319:      jerry_value_t ret_val_print = jerryx_handler_print (NULL, args, 1);
    #####:  320:      jerry_value_free (ret_val_print);
    #####:  321:      jerry_value_free (ret_value);
    #####:  322:      ret_value = jerry_run_jobs ();
        -:  323:
    #####:  324:      if (jerry_value_is_exception (ret_value))
        -:  325:      {
    #####:  326:        main_print_unhandled_exception (ret_value);
    #####:  327:        continue;
        -:  328:      }
        -:  329:
    #####:  330:      jerry_value_free (ret_value);
        -:  331:    }
        -:  332:  }
        -:  333:
    #####:  334:  ret_value = jerry_run_jobs ();
        -:  335:
    #####:  336:  if (jerry_value_is_exception (ret_value))
        -:  337:  {
    #####:  338:    main_print_unhandled_exception (ret_value);
    #####:  339:    goto exit;
        -:  340:  }
        -:  341:
    #####:  342:  jerry_value_free (ret_value);
        -:  343:
    #####:  344:  if (arguments.exit_cb_name_p != NULL)
        -:  345:  {
    #####:  346:    jerry_value_t global = jerry_current_realm ();
    #####:  347:    jerry_value_t name_str = jerry_string_sz (arguments.exit_cb_name_p);
    #####:  348:    jerry_value_t callback_fn = jerry_object_get (global, name_str);
        -:  349:
    #####:  350:    jerry_value_free (global);
    #####:  351:    jerry_value_free (name_str);
        -:  352:
    #####:  353:    if (jerry_value_is_function (callback_fn))
        -:  354:    {
    #####:  355:      ret_value = jerry_call (callback_fn, jerry_undefined (), NULL, 0);
        -:  356:
    #####:  357:      if (jerry_value_is_exception (ret_value))
        -:  358:      {
    #####:  359:        main_print_unhandled_exception (ret_value);
    #####:  360:        goto exit;
        -:  361:      }
        -:  362:
    #####:  363:      jerry_value_free (ret_value);
        -:  364:    }
        -:  365:
    #####:  366:    jerry_value_free (callback_fn);
        -:  367:  }
        -:  368:
    #####:  369:  return_code = JERRY_STANDALONE_EXIT_CODE_OK;
        -:  370:
    #####:  371:exit:
    #####:  372:  jerry_cleanup ();
        -:  373:
        -:  374:#if defined(JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1)
        -:  375:  free (context_p);
        -:  376:#endif /* defined (JERRY_EXTERNAL_CONTEXT) && (JERRY_EXTERNAL_CONTEXT == 1) */
        -:  377:
    #####:  378:  return return_code;
        -:  379:} /* main */
