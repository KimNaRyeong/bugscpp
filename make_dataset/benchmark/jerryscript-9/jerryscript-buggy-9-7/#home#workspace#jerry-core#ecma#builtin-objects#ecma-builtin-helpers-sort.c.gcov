        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-helpers-sort.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtin-helpers.h"
        -:   17:#include "ecma-globals.h"
        -:   18:#include "ecma-helpers-number.h"
        -:   19:
        -:   20:/**
        -:   21: * Function used to merge two arrays for merge sort.
        -:   22: * Arrays are stored as below:
        -:   23: * First  -> source_array_p [left_idx : right_idx - 1]
        -:   24: * Second -> source_array_p [right_idx : end_idx - 1]
        -:   25: * Output -> output_array_p
        -:   26: *
        -:   27: * @return ecma value
        -:   28: *         Returned value must be freed with ecma_free_value.
        -:   29: */
        -:   30:static ecma_value_t
    #####:   31:ecma_builtin_helper_array_merge_sort_bottom_up (ecma_value_t *source_array_p, /**< arrays to merge */
        -:   32:                                                uint32_t left_idx, /**< first array begin */
        -:   33:                                                uint32_t right_idx, /**< first array end */
        -:   34:                                                uint32_t end_idx, /**< second array end */
        -:   35:                                                ecma_value_t *output_array_p, /**< output array */
        -:   36:                                                ecma_value_t compare_func, /**< compare function */
        -:   37:                                                const ecma_builtin_helper_sort_compare_fn_t sort_cb, /**< sorting cb */
        -:   38:                                                ecma_object_t *array_buffer_p) /* array_buffer_p */
        -:   39:{
    #####:   40:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
    #####:   41:  uint32_t i = left_idx, j = right_idx;
        -:   42:
    #####:   43:  for (uint32_t k = left_idx; k < end_idx; k++)
        -:   44:  {
    #####:   45:    ecma_value_t compare_value = ecma_make_number_value (ECMA_NUMBER_ZERO);
        -:   46:
    #####:   47:    if (i < right_idx && j < end_idx)
        -:   48:    {
    #####:   49:      compare_value = sort_cb (source_array_p[i], source_array_p[j], compare_func, array_buffer_p);
    #####:   50:      if (ECMA_IS_VALUE_ERROR (compare_value))
        -:   51:      {
    #####:   52:        ret_value = ECMA_VALUE_ERROR;
    #####:   53:        break;
        -:   54:      }
        -:   55:    }
        -:   56:
    #####:   57:    if (i < right_idx && ecma_get_number_from_value (compare_value) <= ECMA_NUMBER_ZERO)
        -:   58:    {
    #####:   59:      output_array_p[k] = source_array_p[i];
    #####:   60:      i++;
        -:   61:    }
        -:   62:    else
        -:   63:    {
    #####:   64:      output_array_p[k] = source_array_p[j];
    #####:   65:      j++;
        -:   66:    }
    #####:   67:    ecma_free_value (compare_value);
        -:   68:  }
        -:   69:
    #####:   70:  return ret_value;
        -:   71:} /* ecma_builtin_helper_array_merge_sort_bottom_up */
        -:   72:
        -:   73:/**
        -:   74: * Mergesort function
        -:   75: *
        -:   76: * @return ecma value
        -:   77: *         Returned value must be freed with ecma_free_value.
        -:   78: */
        -:   79:ecma_value_t
    #####:   80:ecma_builtin_helper_array_merge_sort_helper (ecma_value_t *array_p, /**< array to sort */
        -:   81:                                             uint32_t length, /**< length */
        -:   82:                                             ecma_value_t compare_func, /**< compare function */
        -:   83:                                             const ecma_builtin_helper_sort_compare_fn_t sort_cb, /**< sorting cb */
        -:   84:                                             ecma_object_t *array_buffer_p) /**< arrayBuffer */
        -:   85:{
    #####:   86:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
    #####:   87:  JMEM_DEFINE_LOCAL_ARRAY (dest_array_p, length, ecma_value_t);
        -:   88:
        -:   89:  ecma_value_t *temp_p;
    #####:   90:  ecma_value_t *base_array_p = array_p;
        -:   91:  uint32_t r, e;
        -:   92:
    #####:   93:  for (uint32_t w = 1; w < length; w = 2 * w)
        -:   94:  {
    #####:   95:    for (uint32_t i = 0; i < length; i = i + 2 * w)
        -:   96:    {
        -:   97:      // End of first array
    #####:   98:      r = i + w;
    #####:   99:      if (r > length)
        -:  100:      {
    #####:  101:        r = length;
        -:  102:      }
        -:  103:
        -:  104:      // End of second array
    #####:  105:      e = i + 2 * w;
    #####:  106:      if (e > length)
        -:  107:      {
    #####:  108:        e = length;
        -:  109:      }
        -:  110:
        -:  111:      // Merge two arrays
    #####:  112:      ret_value = ecma_builtin_helper_array_merge_sort_bottom_up (array_p,
        -:  113:                                                                  i,
        -:  114:                                                                  r,
        -:  115:                                                                  e,
        -:  116:                                                                  dest_array_p,
        -:  117:                                                                  compare_func,
        -:  118:                                                                  sort_cb,
        -:  119:                                                                  array_buffer_p);
    #####:  120:      if (ECMA_IS_VALUE_ERROR (ret_value))
        -:  121:      {
    #####:  122:        break;
        -:  123:      }
        -:  124:    }
        -:  125:
    #####:  126:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -:  127:    {
    #####:  128:      break;
        -:  129:    }
        -:  130:
        -:  131:    // Swap arrays
    #####:  132:    temp_p = dest_array_p;
    #####:  133:    dest_array_p = array_p;
    #####:  134:    array_p = temp_p;
        -:  135:  }
        -:  136:
        -:  137:  // Sorted array is in dest_array_p - there was uneven number of arrays swaps
    #####:  138:  if (dest_array_p == base_array_p)
        -:  139:  {
    #####:  140:    uint32_t index = 0;
    #####:  141:    temp_p = dest_array_p;
    #####:  142:    dest_array_p = array_p;
    #####:  143:    array_p = temp_p;
        -:  144:
    #####:  145:    while (index < length)
        -:  146:    {
    #####:  147:      array_p[index] = dest_array_p[index];
    #####:  148:      index++;
        -:  149:    }
    #####:  150:    JERRY_ASSERT (index == length);
        -:  151:  }
        -:  152:
    #####:  153:  JMEM_FINALIZE_LOCAL_ARRAY (dest_array_p);
        -:  154:
    #####:  155:  return ret_value;
        -:  156:} /* ecma_builtin_helper_array_merge_sort_helper */
