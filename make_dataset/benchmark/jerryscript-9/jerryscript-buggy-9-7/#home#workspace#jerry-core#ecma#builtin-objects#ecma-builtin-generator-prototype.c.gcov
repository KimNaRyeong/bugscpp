        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-generator-prototype.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-builtins.h"
        -:   17:#include "ecma-exceptions.h"
        -:   18:#include "ecma-gc.h"
        -:   19:#include "ecma-globals.h"
        -:   20:#include "ecma-helpers.h"
        -:   21:#include "ecma-iterator-object.h"
        -:   22:
        -:   23:#include "jcontext.h"
        -:   24:#include "opcodes.h"
        -:   25:#include "vm-defines.h"
        -:   26:
        -:   27:#if JERRY_ESNEXT
        -:   28:
        -:   29:#define ECMA_BUILTINS_INTERNAL
        -:   30:#include "ecma-builtins-internal.h"
        -:   31:
        -:   32:/**
        -:   33: * This object has a custom dispatch function.
        -:   34: */
        -:   35:#define BUILTIN_CUSTOM_DISPATCH
        -:   36:
        -:   37:/**
        -:   38: * List of built-in routine identifiers.
        -:   39: */
        -:   40:enum
        -:   41:{
        -:   42:  ECMA_GENERATOR_PROTOTYPE_ROUTINE_START = 0,
        -:   43:  ECMA_GENERATOR_PROTOTYPE_ROUTINE_NEXT,
        -:   44:  ECMA_GENERATOR_PROTOTYPE_ROUTINE_THROW,
        -:   45:  ECMA_GENERATOR_PROTOTYPE_ROUTINE_RETURN
        -:   46:} ecma_generator_operation_type_t;
        -:   47:
        -:   48:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-generator-prototype.inc.h"
        -:   49:#define BUILTIN_UNDERSCORED_ID  generator_prototype
        -:   50:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   51:
        -:   52:/** \addtogroup ecma ECMA
        -:   53: * @{
        -:   54: *
        -:   55: * \addtogroup ecmabuiltins
        -:   56: * @{
        -:   57: *
        -:   58: * \addtogroup generator ECMA Generator.prototype object built-in
        -:   59: * @{
        -:   60: */
        -:   61:
        -:   62:/**
        -:   63: * Convert routine type to operation type..
        -:   64: */
        -:   65:#define ECMA_GENERATOR_ROUTINE_TO_OPERATION(type) \
        -:   66:  ((ecma_iterator_command_type_t) ((type) -ECMA_GENERATOR_PROTOTYPE_ROUTINE_NEXT))
        -:   67:
        -:   68:JERRY_STATIC_ASSERT (ECMA_GENERATOR_ROUTINE_TO_OPERATION (ECMA_GENERATOR_PROTOTYPE_ROUTINE_NEXT) == ECMA_ITERATOR_NEXT,
        -:   69:                     convert_ecma_generator_routine_next_to_ecma_iterator_next_failed);
        -:   70:
        -:   71:JERRY_STATIC_ASSERT (ECMA_GENERATOR_ROUTINE_TO_OPERATION (ECMA_GENERATOR_PROTOTYPE_ROUTINE_THROW)
        -:   72:                       == ECMA_ITERATOR_THROW,
        -:   73:                     convert_ecma_generator_routine_throw_to_ecma_iterator_throw_failed);
        -:   74:
        -:   75:JERRY_STATIC_ASSERT (ECMA_GENERATOR_ROUTINE_TO_OPERATION (ECMA_GENERATOR_PROTOTYPE_ROUTINE_RETURN)
        -:   76:                       == ECMA_ITERATOR_RETURN,
        -:   77:                     convert_ecma_generator_routine_return_to_ecma_iterator_return_failed);
        -:   78:
        -:   79:/**
        -:   80: * Helper function for next / return / throw
        -:   81: *
        -:   82: * @return ecma value
        -:   83: *         Returned value must be freed with ecma_free_value.
        -:   84: */
        -:   85:static ecma_value_t
    #####:   86:ecma_builtin_generator_prototype_object_do (vm_executable_object_t *generator_object_p, /**< generator object */
        -:   87:                                            ecma_value_t arg, /**< argument */
        -:   88:                                            ecma_iterator_command_type_t resume_mode) /**< resume mode */
        -:   89:{
    #####:   90:  arg = ecma_copy_value (arg);
        -:   91:
        -:   92:  while (true)
    #####:   93:  {
    #####:   94:    if (generator_object_p->extended_object.u.cls.u2.executable_obj_flags & ECMA_EXECUTABLE_OBJECT_DO_AWAIT_OR_YIELD)
        -:   95:    {
    #####:   96:      ecma_value_t iterator = generator_object_p->iterator;
    #####:   97:      ecma_value_t next_method = generator_object_p->frame_ctx.stack_top_p[-1];
        -:   98:
    #####:   99:      bool done = false;
    #####:  100:      ecma_value_t result = ecma_op_iterator_do (resume_mode, iterator, next_method, arg, &done);
    #####:  101:      ecma_free_value (arg);
        -:  102:
    #####:  103:      if (ECMA_IS_VALUE_ERROR (result))
        -:  104:      {
    #####:  105:        arg = result;
        -:  106:      }
    #####:  107:      else if (done)
        -:  108:      {
    #####:  109:        arg = ecma_op_iterator_value (result);
    #####:  110:        ecma_free_value (result);
        -:  111:
    #####:  112:        if (resume_mode == ECMA_ITERATOR_THROW)
        -:  113:        {
    #####:  114:          resume_mode = ECMA_ITERATOR_NEXT;
        -:  115:        }
        -:  116:      }
        -:  117:      else
        -:  118:      {
    #####:  119:        return result;
        -:  120:      }
        -:  121:
    #####:  122:      ECMA_EXECUTABLE_OBJECT_RESUME_EXEC (generator_object_p);
    #####:  123:      generator_object_p->iterator = ECMA_VALUE_UNDEFINED;
        -:  124:
    #####:  125:      JERRY_ASSERT (generator_object_p->frame_ctx.stack_top_p[-1] == ECMA_VALUE_UNDEFINED
        -:  126:                    || ecma_is_value_object (generator_object_p->frame_ctx.stack_top_p[-1]));
    #####:  127:      generator_object_p->frame_ctx.stack_top_p--;
        -:  128:
    #####:  129:      if (ECMA_IS_VALUE_ERROR (arg))
        -:  130:      {
    #####:  131:        arg = jcontext_take_exception ();
    #####:  132:        resume_mode = ECMA_ITERATOR_THROW;
        -:  133:      }
        -:  134:    }
        -:  135:
    #####:  136:    if (resume_mode == ECMA_ITERATOR_RETURN)
        -:  137:    {
    #####:  138:      generator_object_p->frame_ctx.byte_code_p = opfunc_resume_executable_object_with_return;
        -:  139:    }
    #####:  140:    else if (resume_mode == ECMA_ITERATOR_THROW)
        -:  141:    {
    #####:  142:      generator_object_p->frame_ctx.byte_code_p = opfunc_resume_executable_object_with_throw;
        -:  143:    }
        -:  144:
    #####:  145:    ecma_value_t value = opfunc_resume_executable_object (generator_object_p, arg);
        -:  146:
    #####:  147:    if (ECMA_IS_VALUE_ERROR (value))
        -:  148:    {
    #####:  149:      return value;
        -:  150:    }
        -:  151:
        -:  152:    bool done;
    #####:  153:    done = (generator_object_p->extended_object.u.cls.u2.executable_obj_flags & ECMA_EXECUTABLE_OBJECT_COMPLETED);
        -:  154:
    #####:  155:    if (!done)
        -:  156:    {
    #####:  157:      const uint8_t *byte_code_p = generator_object_p->frame_ctx.byte_code_p;
        -:  158:
    #####:  159:      JERRY_ASSERT (byte_code_p[-2] == CBC_EXT_OPCODE
        -:  160:                    && (byte_code_p[-1] == CBC_EXT_YIELD || byte_code_p[-1] == CBC_EXT_YIELD_ITERATOR));
        -:  161:
    #####:  162:      if (byte_code_p[-1] == CBC_EXT_YIELD_ITERATOR)
        -:  163:      {
    #####:  164:        ecma_value_t iterator =
    #####:  165:          ecma_op_get_iterator (value, ECMA_VALUE_SYNC_ITERATOR, generator_object_p->frame_ctx.stack_top_p);
    #####:  166:        ecma_free_value (value);
        -:  167:
    #####:  168:        if (ECMA_IS_VALUE_ERROR (iterator))
        -:  169:        {
    #####:  170:          resume_mode = ECMA_ITERATOR_THROW;
    #####:  171:          arg = jcontext_take_exception ();
    #####:  172:          continue;
        -:  173:        }
        -:  174:
    #####:  175:        ecma_deref_object (ecma_get_object_from_value (iterator));
    #####:  176:        generator_object_p->extended_object.u.cls.u2.executable_obj_flags |= ECMA_EXECUTABLE_OBJECT_DO_AWAIT_OR_YIELD;
    #####:  177:        generator_object_p->iterator = iterator;
        -:  178:
    #####:  179:        if (generator_object_p->frame_ctx.stack_top_p[0] != ECMA_VALUE_UNDEFINED)
        -:  180:        {
    #####:  181:          ecma_deref_object (ecma_get_object_from_value (generator_object_p->frame_ctx.stack_top_p[0]));
        -:  182:        }
        -:  183:
    #####:  184:        generator_object_p->frame_ctx.stack_top_p++;
    #####:  185:        arg = ECMA_VALUE_UNDEFINED;
    #####:  186:        continue;
        -:  187:      }
        -:  188:    }
        -:  189:
    #####:  190:    ecma_value_t result = ecma_create_iter_result_object (value, ecma_make_boolean_value (done));
    #####:  191:    ecma_fast_free_value (value);
    #####:  192:    return result;
        -:  193:  }
        -:  194:} /* ecma_builtin_generator_prototype_object_do */
        -:  195:
        -:  196:/**
        -:  197: * Dispatcher of the Generator built-in's routines
        -:  198: *
        -:  199: * @return ecma value
        -:  200: *         Returned value must be freed with ecma_free_value.
        -:  201: */
        -:  202:ecma_value_t
    #####:  203:ecma_builtin_generator_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:  204:                                                                                *   identifier */
        -:  205:                                                   ecma_value_t this_arg, /**< 'this' argument value */
        -:  206:                                                   const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  207:                                                                                           *   passed to routine */
        -:  208:                                                   uint32_t arguments_number) /**< length of arguments' list */
        -:  209:{
        -:  210:  JERRY_UNUSED (arguments_number);
        -:  211:
    #####:  212:  vm_executable_object_t *executable_object_p = NULL;
        -:  213:
    #####:  214:  if (ecma_is_value_object (this_arg))
        -:  215:  {
    #####:  216:    ecma_object_t *object_p = ecma_get_object_from_value (this_arg);
        -:  217:
    #####:  218:    if (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_GENERATOR))
        -:  219:    {
    #####:  220:      executable_object_p = (vm_executable_object_t *) object_p;
        -:  221:    }
        -:  222:  }
        -:  223:
    #####:  224:  if (executable_object_p == NULL)
        -:  225:  {
    #####:  226:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_GENERATOR_OBJECT);
        -:  227:  }
        -:  228:
    #####:  229:  if (executable_object_p->extended_object.u.cls.u2.executable_obj_flags & ECMA_EXECUTABLE_OBJECT_RUNNING)
        -:  230:  {
    #####:  231:    return ecma_raise_type_error (ECMA_ERR_GENERATOR_IS_CURRENTLY_UNDER_EXECUTION);
        -:  232:  }
        -:  233:
    #####:  234:  if (executable_object_p->extended_object.u.cls.u2.executable_obj_flags & ECMA_EXECUTABLE_OBJECT_COMPLETED)
        -:  235:  {
    #####:  236:    if (builtin_routine_id != ECMA_GENERATOR_PROTOTYPE_ROUTINE_THROW)
        -:  237:    {
    #####:  238:      return ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
        -:  239:    }
        -:  240:
    #####:  241:    jcontext_raise_exception (ecma_copy_value (arguments_list_p[0]));
    #####:  242:    return ECMA_VALUE_ERROR;
        -:  243:  }
        -:  244:
    #####:  245:  return ecma_builtin_generator_prototype_object_do (executable_object_p,
        -:  246:                                                     arguments_list_p[0],
    #####:  247:                                                     ECMA_GENERATOR_ROUTINE_TO_OPERATION (builtin_routine_id));
        -:  248:} /* ecma_builtin_generator_prototype_dispatch_routine */
        -:  249:
        -:  250:/**
        -:  251: * @}
        -:  252: * @}
        -:  253: * @}
        -:  254: */
        -:  255:
        -:  256:#endif /* JERRY_ESNEXT */
