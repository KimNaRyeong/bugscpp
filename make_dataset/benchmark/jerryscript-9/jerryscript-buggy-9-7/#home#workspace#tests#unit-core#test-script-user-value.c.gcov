        -:    0:Source:/home/workspace/tests/unit-core/test-script-user-value.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "config.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static jerry_value_t user_values[4];
        -:   22:
        -:   23:#define USER_VALUES_SIZE (sizeof (user_values) / sizeof (jerry_value_t))
        -:   24:
        -:   25:static void
    #####:   26:test_parse (const char *source_p, /**< source code */
        -:   27:            jerry_parse_options_t *options_p, /**< options passed to jerry_parse */
        -:   28:            bool run_code) /**< run the code after parsing */
        -:   29:{
    #####:   30:  for (size_t i = 0; i < USER_VALUES_SIZE; i++)
        -:   31:  {
    #####:   32:    options_p->user_value = user_values[i];
        -:   33:
    #####:   34:    jerry_value_t result = jerry_parse ((const jerry_char_t *) source_p, strlen (source_p), options_p);
    #####:   35:    TEST_ASSERT (!jerry_value_is_exception (result));
        -:   36:
    #####:   37:    if (run_code)
        -:   38:    {
    #####:   39:      jerry_value_t parse_result = result;
    #####:   40:      result = jerry_run (result);
    #####:   41:      jerry_value_free (parse_result);
    #####:   42:      TEST_ASSERT (!jerry_value_is_exception (result));
        -:   43:    }
        -:   44:
    #####:   45:    jerry_value_t user_value = jerry_source_user_value (result);
    #####:   46:    jerry_value_t compare_value = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, user_value, user_values[i]);
        -:   47:
    #####:   48:    TEST_ASSERT (jerry_value_is_true (compare_value));
        -:   49:
    #####:   50:    jerry_value_free (compare_value);
    #####:   51:    jerry_value_free (user_value);
    #####:   52:    jerry_value_free (result);
        -:   53:  }
    #####:   54:} /* test_parse */
        -:   55:
        -:   56:static void
    #####:   57:test_parse_function (const char *source_p, /**< source code */
        -:   58:                     jerry_parse_options_t *options_p, /**< options passed to jerry_parse */
        -:   59:                     bool run_code) /**< run the code after parsing */
        -:   60:{
    #####:   61:  options_p->options |= JERRY_PARSE_HAS_ARGUMENT_LIST;
    #####:   62:  options_p->argument_list = jerry_string_sz ("");
        -:   63:
    #####:   64:  for (size_t i = 0; i < USER_VALUES_SIZE; i++)
        -:   65:  {
    #####:   66:    options_p->user_value = user_values[i];
        -:   67:
    #####:   68:    jerry_value_t result = jerry_parse ((const jerry_char_t *) source_p, strlen (source_p), options_p);
    #####:   69:    TEST_ASSERT (!jerry_value_is_exception (result));
        -:   70:
    #####:   71:    if (run_code)
        -:   72:    {
    #####:   73:      jerry_value_t parse_result = result;
    #####:   74:      jerry_value_t this_value = jerry_undefined ();
    #####:   75:      result = jerry_call (result, this_value, NULL, 0);
    #####:   76:      jerry_value_free (parse_result);
    #####:   77:      jerry_value_free (this_value);
    #####:   78:      TEST_ASSERT (!jerry_value_is_exception (result));
        -:   79:    }
        -:   80:
    #####:   81:    jerry_value_t user_value = jerry_source_user_value (result);
    #####:   82:    jerry_value_t compare_value = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, user_value, user_values[i]);
        -:   83:
    #####:   84:    TEST_ASSERT (jerry_value_is_true (compare_value));
        -:   85:
    #####:   86:    jerry_value_free (compare_value);
    #####:   87:    jerry_value_free (user_value);
    #####:   88:    jerry_value_free (result);
        -:   89:  }
        -:   90:
    #####:   91:  jerry_value_free (options_p->argument_list);
    #####:   92:} /* test_parse_function */
        -:   93:
        -:   94:int
    #####:   95:main (void)
        -:   96:{
    #####:   97:  TEST_INIT ();
        -:   98:
    #####:   99:  jerry_init (JERRY_INIT_EMPTY);
        -:  100:
    #####:  101:  user_values[0] = jerry_object ();
    #####:  102:  user_values[1] = jerry_null ();
    #####:  103:  user_values[2] = jerry_number (5.5);
    #####:  104:  user_values[3] = jerry_string_sz ("AnyString...");
        -:  105:
        -:  106:  jerry_parse_options_t parse_options;
    #####:  107:  const char *source_p = TEST_STRING_LITERAL ("");
        -:  108:
    #####:  109:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  110:  test_parse (source_p, &parse_options, false);
    #####:  111:  test_parse_function (source_p, &parse_options, false);
        -:  112:
    #####:  113:  if (jerry_feature_enabled (JERRY_FEATURE_MODULE))
        -:  114:  {
    #####:  115:    parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_USER_VALUE;
    #####:  116:    test_parse (source_p, &parse_options, false);
        -:  117:  }
        -:  118:
    #####:  119:  source_p = TEST_STRING_LITERAL ("function f() { }\n"
        -:  120:                                  "f");
    #####:  121:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  122:  test_parse (source_p, &parse_options, true);
        -:  123:
    #####:  124:  source_p = TEST_STRING_LITERAL ("function f() { return function() {} }\n"
        -:  125:                                  "f()");
    #####:  126:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  127:  test_parse (source_p, &parse_options, true);
        -:  128:
    #####:  129:  source_p = TEST_STRING_LITERAL ("return function() {}");
    #####:  130:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  131:  test_parse_function (source_p, &parse_options, true);
        -:  132:
        -:  133:  /* There is no test for ESNEXT, using SYMBOL instead. */
    #####:  134:  if (jerry_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:  135:  {
    #####:  136:    source_p = TEST_STRING_LITERAL ("(class {})");
    #####:  137:    parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  138:    test_parse (source_p, &parse_options, true);
        -:  139:  }
        -:  140:
    #####:  141:  source_p = TEST_STRING_LITERAL ("eval('function f() {}')\n"
        -:  142:                                  "f");
    #####:  143:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  144:  test_parse (source_p, &parse_options, true);
        -:  145:
    #####:  146:  source_p = TEST_STRING_LITERAL ("eval('function f() { return eval(\\'(function () {})\\') }')\n"
        -:  147:                                  "f()");
    #####:  148:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  149:  test_parse (source_p, &parse_options, true);
        -:  150:
    #####:  151:  source_p = TEST_STRING_LITERAL ("eval('function f() {}')\n"
        -:  152:                                  "return f");
    #####:  153:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  154:  test_parse_function (source_p, &parse_options, true);
        -:  155:
    #####:  156:  source_p = TEST_STRING_LITERAL ("eval('function f() { return eval(\\'(function () {})\\') }')\n"
        -:  157:                                  "return f()");
    #####:  158:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  159:  test_parse_function (source_p, &parse_options, true);
        -:  160:
    #####:  161:  source_p = TEST_STRING_LITERAL ("function f() {}\n"
        -:  162:                                  "f.bind(1)");
    #####:  163:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  164:  test_parse (source_p, &parse_options, true);
        -:  165:
    #####:  166:  source_p = TEST_STRING_LITERAL ("function f() {}\n"
        -:  167:                                  "f.bind(1).bind(2, 3)");
    #####:  168:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  169:  test_parse (source_p, &parse_options, true);
        -:  170:
    #####:  171:  source_p = TEST_STRING_LITERAL ("function f() {}\n"
        -:  172:                                  "return f.bind(1)");
    #####:  173:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  174:  test_parse_function (source_p, &parse_options, true);
        -:  175:
    #####:  176:  source_p = TEST_STRING_LITERAL ("function f() {}\n"
        -:  177:                                  "return f.bind(1).bind(2, 3)");
    #####:  178:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:  179:  test_parse_function (source_p, &parse_options, true);
        -:  180:
    #####:  181:  for (size_t i = 0; i < USER_VALUES_SIZE; i++)
        -:  182:  {
    #####:  183:    jerry_value_t result = jerry_source_user_value (user_values[i]);
    #####:  184:    TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  185:    jerry_value_free (result);
        -:  186:  }
        -:  187:
    #####:  188:  for (size_t i = 0; i < USER_VALUES_SIZE; i++)
        -:  189:  {
    #####:  190:    jerry_value_free (user_values[i]);
        -:  191:  }
        -:  192:
    #####:  193:  jerry_cleanup ();
        -:  194:  return 0;
        -:  195:} /* main */
