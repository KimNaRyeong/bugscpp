        -:    0:Source:/home/workspace/tests/unit-core/test-to-integer.c
        -:    0:Programs:297
        -:    1:/*
        -:    2: * Copyright JS Foundation and other contributors, http://js.foundation
        -:    3: *
        -:    4: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    5: * you may not use this file except in compliance with the License.
        -:    6: * You may obtain a copy of the License at
        -:    7: *
        -:    8: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    9: *
        -:   10: * Unless required by applicable law or agreed to in writing, software
        -:   11: * distributed under the License is distributed on an "AS IS" BASIS
        -:   12: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   13: * See the License for the specific language governing permissions and
        -:   14: * limitations under the License.
        -:   15: */
        -:   16:
        -:   17:#include "jerryscript.h"
        -:   18:
        -:   19:#include "ecma-conversion.h"
        -:   20:#include "ecma-errors.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-globals.h"
        -:   23:#include "ecma-helpers.h"
        -:   24:#include "ecma-init-finalize.h"
        -:   25:
        -:   26:#include "jcontext.h"
        -:   27:#include "lit-globals.h"
        -:   28:#include "test-common.h"
        -:   29:
        -:   30:/**
        -:   31: * Unit test's main function.
        -:   32: */
        -:   33:int
    #####:   34:main (void)
        -:   35:{
    #####:   36:  TEST_INIT ();
        -:   37:
    #####:   38:  jmem_init ();
    #####:   39:  ecma_init ();
        -:   40:
        -:   41:  ecma_number_t num;
        -:   42:
    #####:   43:  ecma_value_t int_num = ecma_make_int32_value (123);
        -:   44:
    #####:   45:  ecma_number_t result = ecma_op_to_integer (int_num, &num);
        -:   46:
    #####:   47:  ecma_free_value (int_num);
        -:   48:
    #####:   49:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
    #####:   50:  TEST_ASSERT (num == 123);
        -:   51:
        -:   52:  /* 2 */
    #####:   53:  ecma_value_t error = ecma_raise_standard_error (JERRY_ERROR_TYPE, ECMA_ERR_INVALID_ARRAY_LENGTH);
        -:   54:
    #####:   55:  result = ecma_op_to_integer (error, &num);
        -:   56:
    #####:   57:  jcontext_release_exception ();
        -:   58:
    #####:   59:  TEST_ASSERT (ECMA_IS_VALUE_ERROR (result));
        -:   60:
        -:   61:  /* 3 */
    #####:   62:  ecma_value_t nan = ecma_make_nan_value ();
        -:   63:
    #####:   64:  result = ecma_op_to_integer (nan, &num);
        -:   65:
    #####:   66:  ecma_free_value (nan);
        -:   67:
    #####:   68:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
    #####:   69:  TEST_ASSERT (num == 0);
        -:   70:
        -:   71:  /* 4 */
        -:   72:  /* -0 */
    #####:   73:  ecma_value_t negative_zero = ecma_make_number_value (-0.0f);
        -:   74:
    #####:   75:  result = ecma_op_to_integer (negative_zero, &num);
        -:   76:
    #####:   77:  ecma_free_value (negative_zero);
        -:   78:
    #####:   79:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
    #####:   80:  TEST_ASSERT (1.0f / num == ecma_number_make_infinity (true));
        -:   81:
        -:   82:  /* +0 */
    #####:   83:  ecma_value_t positive_zero = ecma_make_number_value (+0.0f);
        -:   84:
    #####:   85:  result = ecma_op_to_integer (positive_zero, &num);
        -:   86:
    #####:   87:  ecma_free_value (positive_zero);
        -:   88:
    #####:   89:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
    #####:   90:  TEST_ASSERT (1.0f / num == ecma_number_make_infinity (false));
        -:   91:
        -:   92:  /* -infinity */
    #####:   93:  ecma_value_t negative_infinity = ecma_make_number_value (ecma_number_make_infinity (true));
        -:   94:
    #####:   95:  result = ecma_op_to_integer (negative_infinity, &num);
        -:   96:
    #####:   97:  ecma_free_value (negative_infinity);
        -:   98:
    #####:   99:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
    #####:  100:  TEST_ASSERT (num == ecma_number_make_infinity (true));
        -:  101:
        -:  102:  /* +infinity */
    #####:  103:  ecma_value_t positive_infinity = ecma_make_number_value (ecma_number_make_infinity (false));
        -:  104:
    #####:  105:  result = ecma_op_to_integer (positive_infinity, &num);
        -:  106:
    #####:  107:  ecma_free_value (positive_infinity);
        -:  108:
    #####:  109:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
    #####:  110:  TEST_ASSERT (num == ecma_number_make_infinity (false));
        -:  111:
        -:  112:  /* 5 */
    #####:  113:  ecma_value_t floor = ecma_make_number_value (3.001f);
        -:  114:
    #####:  115:  result = ecma_op_to_integer (floor, &num);
        -:  116:
    #####:  117:  ecma_free_value (floor);
        -:  118:
    #####:  119:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
    #####:  120:  TEST_ASSERT (num == 3);
        -:  121:
    #####:  122:  ecma_value_t floor2 = ecma_make_number_value (-26.5973);
        -:  123:
    #####:  124:  result = ecma_op_to_integer (floor2, &num);
        -:  125:
    #####:  126:  ecma_free_value (floor2);
        -:  127:
    #####:  128:  TEST_ASSERT (!ECMA_IS_VALUE_ERROR (result));
    #####:  129:  TEST_ASSERT (num == -26);
        -:  130:
    #####:  131:  ecma_finalize ();
    #####:  132:  jmem_finalize ();
        -:  133:
        -:  134:  return 0;
        -:  135:} /* main */
