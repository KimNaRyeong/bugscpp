        -:    0:Source:/home/workspace/jerry-math/nextafter.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: *
        -:   15: * This file is based on work under the following copyright and permission
        -:   16: * notice:
        -:   17: *
        -:   18: *     Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:   19: *
        -:   20: *     Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:   21: *     Permission to use, copy, modify, and distribute this
        -:   22: *     software is freely granted, provided that this notice
        -:   23: *     is preserved.
        -:   24: *
        -:   25: *     @(#)s_nextafter.c 1.3 95/01/18
        -:   26: */
        -:   27:
        -:   28:#include "jerry-math-internal.h"
        -:   29:
        -:   30:double
    #####:   31:nextafter (double x, double y)
        -:   32:{
        -:   33:  int hx, hy, ix, iy;
        -:   34:  unsigned lx, ly;
        -:   35:  double_accessor ret;
        -:   36:
    #####:   37:  hx = __HI (x); /* high word of x */
    #####:   38:  lx = __LO (x); /* low  word of x */
    #####:   39:  hy = __HI (y); /* high word of y */
    #####:   40:  ly = __LO (y); /* low  word of y */
    #####:   41:  ix = hx & 0x7fffffff; /* |x| */
    #####:   42:  iy = hy & 0x7fffffff; /* |y| */
        -:   43:
    #####:   44:  if (((ix >= 0x7ff00000) && ((ix - 0x7ff00000) | lx) != 0) /* x is nan */
    #####:   45:      || ((iy >= 0x7ff00000) && ((iy - 0x7ff00000) | ly) != 0)) /* y is nan */
        -:   46:  {
    #####:   47:    return x + y;
        -:   48:  }
        -:   49:
    #####:   50:  if (x == y)
        -:   51:  {
        -:   52:    return x; /* x=y, return x */
        -:   53:  }
        -:   54:
    #####:   55:  if ((ix | lx) == 0)
        -:   56:  { /* x == 0 */
    #####:   57:    ret.as_int.hi = hy & 0x80000000; /* return +-minsubnormal */
    #####:   58:    ret.as_int.lo = 1;
    #####:   59:    y = ret.dbl * ret.dbl;
    #####:   60:    if (y == ret.dbl)
        -:   61:    {
        -:   62:      return y;
        -:   63:    }
        -:   64:    else
        -:   65:    {
    #####:   66:      return ret.dbl; /* raise underflow flag */
        -:   67:    }
        -:   68:  }
        -:   69:
    #####:   70:  if (hx >= 0)
        -:   71:  { /* x > 0 */
    #####:   72:    if (hx > hy || ((hx == hy) && (lx > ly)))
        -:   73:    { /* x > y, x -= ulp */
    #####:   74:      if (lx == 0)
        -:   75:      {
    #####:   76:        hx -= 1;
        -:   77:      }
        -:   78:
    #####:   79:      lx -= 1;
        -:   80:    }
        -:   81:    else
        -:   82:    { /* x < y, x += ulp */
    #####:   83:      lx += 1;
        -:   84:
    #####:   85:      if (lx == 0)
        -:   86:      {
    #####:   87:        hx += 1;
        -:   88:      }
        -:   89:    }
        -:   90:  }
        -:   91:  else
        -:   92:  { /* x < 0 */
    #####:   93:    if (hy >= 0 || hx > hy || ((hx == hy) && (lx > ly)))
        -:   94:    { /* x < y, x -= ulp */
    #####:   95:      if (lx == 0)
        -:   96:      {
    #####:   97:        hx -= 1;
        -:   98:      }
        -:   99:
    #####:  100:      lx -= 1;
        -:  101:    }
        -:  102:    else
        -:  103:    { /* x > y, x += ulp */
    #####:  104:      lx += 1;
        -:  105:
    #####:  106:      if (lx == 0)
        -:  107:      {
    #####:  108:        hx += 1;
        -:  109:      }
        -:  110:    }
        -:  111:  }
        -:  112:
    #####:  113:  hy = hx & 0x7ff00000;
        -:  114:
    #####:  115:  if (hy >= 0x7ff00000)
        -:  116:  {
    #####:  117:    return x + x; /* overflow */
        -:  118:  }
        -:  119:
    #####:  120:  if (hy < 0x00100000)
        -:  121:  { /* underflow */
    #####:  122:    y = x * x;
    #####:  123:    if (y != x)
        -:  124:    { /* raise underflow flag */
    #####:  125:      ret.as_int.hi = hx;
    #####:  126:      ret.as_int.lo = lx;
    #####:  127:      return ret.dbl;
        -:  128:    }
        -:  129:  }
        -:  130:
    #####:  131:  ret.as_int.hi = hx;
    #####:  132:  ret.as_int.lo = lx;
    #####:  133:  return ret.dbl;
        -:  134:} /* nextafter */
