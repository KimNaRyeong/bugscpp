        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-object-prototype.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-builtin-helpers.h"
        -:   18:#include "ecma-builtin-object.h"
        -:   19:#include "ecma-builtins.h"
        -:   20:#include "ecma-conversion.h"
        -:   21:#include "ecma-exceptions.h"
        -:   22:#include "ecma-function-object.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-globals.h"
        -:   25:#include "ecma-helpers.h"
        -:   26:#include "ecma-objects.h"
        -:   27:#include "ecma-proxy-object.h"
        -:   28:#include "ecma-string-object.h"
        -:   29:
        -:   30:#include "jrt.h"
        -:   31:
        -:   32:#define ECMA_BUILTINS_INTERNAL
        -:   33:#include "ecma-builtins-internal.h"
        -:   34:
        -:   35:/**
        -:   36: * This object has a custom dispatch function.
        -:   37: */
        -:   38:#define BUILTIN_CUSTOM_DISPATCH
        -:   39:
        -:   40:/**
        -:   41: * List of built-in routine identifiers.
        -:   42: */
        -:   43:enum
        -:   44:{
        -:   45:  /* Note: these 6 routines must be in this order */
        -:   46:  ECMA_OBJECT_PROTOTYPE_ROUTINE_START = 0,
        -:   47:  ECMA_OBJECT_PROTOTYPE_TO_STRING,
        -:   48:  ECMA_OBJECT_PROTOTYPE_VALUE_OF,
        -:   49:  ECMA_OBJECT_PROTOTYPE_TO_LOCALE_STRING,
        -:   50:  ECMA_OBJECT_PROTOTYPE_GET_PROTO,
        -:   51:  ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF,
        -:   52:  ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY,
        -:   53:  ECMA_OBJECT_PROTOTYPE_PROPERTY_IS_ENUMERABLE,
        -:   54:  ECMA_OBJECT_PROTOTYPE_SET_PROTO,
        -:   55:#if JERRY_ESNEXT && JERRY_BUILTIN_ANNEXB
        -:   56:  ECMA_OBJECT_PROTOTYPE_DEFINE_GETTER,
        -:   57:  ECMA_OBJECT_PROTOTYPE_DEFINE_SETTER,
        -:   58:  ECMA_OBJECT_PROTOTYPE_LOOKUP_GETTER,
        -:   59:  ECMA_OBJECT_PROTOTYPE_LOOKUP_SETTER,
        -:   60:#endif /* JERRY_ESNEXT && JERRY_BUILTIN_ANNEXB */
        -:   61:};
        -:   62:
        -:   63:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-object-prototype.inc.h"
        -:   64:#define BUILTIN_UNDERSCORED_ID  object_prototype
        -:   65:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   66:
        -:   67:/** \addtogroup ecma ECMA
        -:   68: * @{
        -:   69: *
        -:   70: * \addtogroup ecmabuiltins
        -:   71: * @{
        -:   72: *
        -:   73: * \addtogroup objectprototype ECMA Object.prototype object built-in
        -:   74: * @{
        -:   75: */
        -:   76:
        -:   77:/**
        -:   78: * The Object.prototype object's 'toString' routine
        -:   79: *
        -:   80: * See also:
        -:   81: *          ECMA-262 v5, 15.2.4.2
        -:   82: *
        -:   83: * @return ecma value
        -:   84: *         Returned value must be freed with ecma_free_value.
        -:   85: */
        -:   86:static ecma_value_t
    #####:   87:ecma_builtin_object_prototype_object_to_string (ecma_value_t this_arg) /**< this argument */
        -:   88:{
    #####:   89:  return ecma_builtin_helper_object_to_string (this_arg);
        -:   90:} /* ecma_builtin_object_prototype_object_to_string */
        -:   91:
        -:   92:/**
        -:   93: * The Object.prototype object's 'valueOf' routine
        -:   94: *
        -:   95: * See also:
        -:   96: *          ECMA-262 v5, 15.2.4.4
        -:   97: *
        -:   98: * @return ecma value
        -:   99: *         Returned value must be freed with ecma_free_value.
        -:  100: */
        -:  101:static ecma_value_t
    #####:  102:ecma_builtin_object_prototype_object_value_of (ecma_value_t this_arg) /**< this argument */
        -:  103:{
    #####:  104:  return ecma_op_to_object (this_arg);
        -:  105:} /* ecma_builtin_object_prototype_object_value_of */
        -:  106:
        -:  107:/**
        -:  108: * The Object.prototype object's 'toLocaleString' routine
        -:  109: *
        -:  110: * See also:
        -:  111: *          ECMA-262 v5, 15.2.4.3
        -:  112: *
        -:  113: * @return ecma value
        -:  114: *         Returned value must be freed with ecma_free_value.
        -:  115: */
        -:  116:static ecma_value_t
    #####:  117:ecma_builtin_object_prototype_object_to_locale_string (ecma_value_t this_arg) /**< this argument */
        -:  118:{
    #####:  119:  return ecma_op_invoke_by_magic_id (this_arg, LIT_MAGIC_STRING_TO_STRING_UL, &this_arg, 1);
        -:  120:} /* ecma_builtin_object_prototype_object_to_locale_string */
        -:  121:
        -:  122:/**
        -:  123: * The Object.prototype object's 'hasOwnProperty' routine
        -:  124: *
        -:  125: * See also:
        -:  126: *          ECMA-262 v5, 15.2.4.5
        -:  127: *
        -:  128: * @return ecma value
        -:  129: *         Returned value must be freed with ecma_free_value.
        -:  130: */
        -:  131:static ecma_value_t
    #####:  132:ecma_builtin_object_prototype_object_has_own_property (ecma_object_t *obj_p, /**< this argument */
        -:  133:                                                       ecma_string_t *prop_name_p) /**< first argument */
        -:  134:{
    #####:  135:  return ecma_op_object_has_own_property (obj_p, prop_name_p);
        -:  136:} /* ecma_builtin_object_prototype_object_has_own_property */
        -:  137:
        -:  138:/**
        -:  139: * The Object.prototype object's 'isPrototypeOf' routine
        -:  140: *
        -:  141: * See also:
        -:  142: *          ECMA-262 v5, 15.2.4.6
        -:  143: *
        -:  144: * @return ecma value
        -:  145: *         Returned value must be freed with ecma_free_value.
        -:  146: */
        -:  147:static ecma_value_t
    #####:  148:ecma_builtin_object_prototype_object_is_prototype_of (ecma_object_t *obj_p, /**< this argument */
        -:  149:                                                      ecma_value_t arg) /**< routine's first argument */
        -:  150:{
        -:  151:  /* 3. Compare prototype to object */
    #####:  152:  ecma_value_t v_obj_value = ecma_op_to_object (arg);
        -:  153:
    #####:  154:  if (ECMA_IS_VALUE_ERROR (v_obj_value))
        -:  155:  {
    #####:  156:    return v_obj_value;
        -:  157:  }
        -:  158:
    #####:  159:  ecma_object_t *v_obj_p = ecma_get_object_from_value (v_obj_value);
        -:  160:
    #####:  161:  ecma_value_t ret_value = ecma_op_object_is_prototype_of (obj_p, v_obj_p);
        -:  162:
    #####:  163:  ecma_deref_object (v_obj_p);
        -:  164:
    #####:  165:  return ret_value;
        -:  166:} /* ecma_builtin_object_prototype_object_is_prototype_of */
        -:  167:
        -:  168:/**
        -:  169: * The Object.prototype object's 'propertyIsEnumerable' routine
        -:  170: *
        -:  171: * See also:
        -:  172: *          ECMA-262 v5, 15.2.4.7
        -:  173: *
        -:  174: * @return ecma value
        -:  175: *         Returned value must be freed with ecma_free_value.
        -:  176: */
        -:  177:static ecma_value_t
    #####:  178:ecma_builtin_object_prototype_object_property_is_enumerable (ecma_object_t *obj_p, /**< this argument */
        -:  179:                                                             ecma_string_t *prop_name_p) /**< first argument */
        -:  180:{
    #####:  181:  ecma_property_descriptor_t prop_desc;
    #####:  182:  ecma_value_t status = ecma_op_object_get_own_property_descriptor (obj_p, prop_name_p, &prop_desc);
        -:  183:
    #####:  184:  if (!ecma_is_value_true (status))
        -:  185:  {
    #####:  186:    return status;
        -:  187:  }
        -:  188:
    #####:  189:  bool is_enumerable = (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE);
        -:  190:
    #####:  191:  ecma_free_property_descriptor (&prop_desc);
        -:  192:
    #####:  193:  return ecma_make_boolean_value (is_enumerable);
        -:  194:} /* ecma_builtin_object_prototype_object_property_is_enumerable */
        -:  195:
        -:  196:#if JERRY_ESNEXT && JERRY_BUILTIN_ANNEXB
        -:  197:/**
        -:  198: * The Object.prototype object's '__defineGetter__' and '__defineSetter__' routine
        -:  199: *
        -:  200: * See also:
        -:  201: *          ECMA-262 v11, B.2.2.2
        -:  202: *          ECMA-262 v11, B.2.2.3
        -:  203: *
        -:  204: * @return ECMA_VALUE_ERROR - if the operation fails,
        -:  205: *         ECMA_VALUE_UNDEFINED - otherwise
        -:  206: */
        -:  207:static ecma_value_t
    #####:  208:ecma_builtin_object_prototype_define_getter_setter (ecma_value_t this_arg, /**< this argument */
        -:  209:                                                    ecma_value_t prop, /**< property */
        -:  210:                                                    ecma_value_t accessor, /**< getter/setter function */
        -:  211:                                                    bool define_getter) /**< true - defineGetter method
        -:  212:                                                                             false - defineSetter method */
        -:  213:{
        -:  214:  /* 1. */
    #####:  215:  ecma_value_t to_obj = ecma_op_to_object (this_arg);
        -:  216:
    #####:  217:  if (ECMA_IS_VALUE_ERROR (to_obj))
        -:  218:  {
    #####:  219:    return to_obj;
        -:  220:  }
        -:  221:
    #####:  222:  ecma_object_t *obj_p = ecma_get_object_from_value (to_obj);
        -:  223:
        -:  224:  /* 2. */
    #####:  225:  if (!ecma_op_is_callable (accessor))
        -:  226:  {
    #####:  227:    ecma_deref_object (obj_p);
    #####:  228:    return ecma_raise_type_error (ECMA_ERR_GETTER_IS_NOT_CALLABLE);
        -:  229:  }
        -:  230:
    #####:  231:  ecma_object_t *accessor_obj_p = ecma_get_object_from_value (accessor);
        -:  232:
        -:  233:  /* 3. */
    #####:  234:  ecma_property_descriptor_t desc = ecma_make_empty_property_descriptor ();
    #####:  235:  desc.flags |= (JERRY_PROP_IS_ENUMERABLE | JERRY_PROP_IS_CONFIGURABLE | JERRY_PROP_IS_ENUMERABLE_DEFINED
        -:  236:                 | JERRY_PROP_IS_CONFIGURABLE_DEFINED | JERRY_PROP_SHOULD_THROW);
        -:  237:
    #####:  238:  if (define_getter)
        -:  239:  {
    #####:  240:    desc.get_p = accessor_obj_p;
    #####:  241:    desc.flags |= JERRY_PROP_IS_GET_DEFINED;
        -:  242:  }
        -:  243:  else
        -:  244:  {
    #####:  245:    desc.set_p = accessor_obj_p;
    #####:  246:    desc.flags |= JERRY_PROP_IS_SET_DEFINED;
        -:  247:  }
        -:  248:
        -:  249:  /* 4. */
    #####:  250:  ecma_string_t *prop_name_p = ecma_op_to_property_key (prop);
        -:  251:
    #####:  252:  if (JERRY_UNLIKELY (prop_name_p == NULL))
        -:  253:  {
    #####:  254:    ecma_deref_object (obj_p);
    #####:  255:    return ECMA_VALUE_ERROR;
        -:  256:  }
        -:  257:
        -:  258:  /* 5. */
    #####:  259:  ecma_value_t define_prop = ecma_op_object_define_own_property (obj_p, prop_name_p, &desc);
        -:  260:
    #####:  261:  ecma_deref_object (obj_p);
    #####:  262:  ecma_deref_ecma_string (prop_name_p);
        -:  263:
    #####:  264:  if (ECMA_IS_VALUE_ERROR (define_prop))
        -:  265:  {
    #####:  266:    return define_prop;
        -:  267:  }
        -:  268:
        -:  269:  /* 6. */
    #####:  270:  return ECMA_VALUE_UNDEFINED;
        -:  271:} /* ecma_builtin_object_prototype_define_getter_setter */
        -:  272:
        -:  273:/**
        -:  274: * The Object.prototype object's '__lookupGetter__' and '__lookupSetter__' routine
        -:  275: *
        -:  276: * See also:
        -:  277: *          ECMA-262 v11, B.2.2.4
        -:  278: *          ECMA-262 v11, B.2.2.5
        -:  279: *
        -:  280: * @return ECMA_VALUE_ERROR - if the operation fails,
        -:  281: *         ECMA_VALUE_UNDEFINED - if the property was not found
        -:  282: *         Accessor property - otherwise
        -:  283: */
        -:  284:static ecma_value_t
    #####:  285:ecma_builtin_object_prototype_lookup_getter_setter (ecma_value_t this_arg, /**< this argument */
        -:  286:                                                    ecma_value_t prop, /**< property */
        -:  287:                                                    bool lookup_getter) /**< true - lookupGetter method
        -:  288:                                                                             false - lookupSetter method */
        -:  289:{
        -:  290:  /* 1. */
    #####:  291:  ecma_value_t to_obj = ecma_op_to_object (this_arg);
        -:  292:
    #####:  293:  if (ECMA_IS_VALUE_ERROR (to_obj))
        -:  294:  {
    #####:  295:    return to_obj;
        -:  296:  }
        -:  297:
    #####:  298:  ecma_object_t *obj_p = ecma_get_object_from_value (to_obj);
        -:  299:
        -:  300:  /* 2. */
    #####:  301:  ecma_string_t *prop_name_p = ecma_op_to_property_key (prop);
        -:  302:
    #####:  303:  if (JERRY_UNLIKELY (prop_name_p == NULL))
        -:  304:  {
    #####:  305:    ecma_deref_object (obj_p);
    #####:  306:    return ECMA_VALUE_ERROR;
        -:  307:  }
        -:  308:
    #####:  309:  ecma_value_t ret_value = ECMA_VALUE_UNDEFINED;
        -:  310:
    #####:  311:  ecma_ref_object (obj_p);
        -:  312:
        -:  313:  /* 3. */
        -:  314:  while (true)
    #####:  315:  {
        -:  316:    /* 3.a */
    #####:  317:    ecma_property_descriptor_t desc;
    #####:  318:    ecma_value_t get_desc = ecma_op_object_get_own_property_descriptor (obj_p, prop_name_p, &desc);
        -:  319:
    #####:  320:    if (ECMA_IS_VALUE_ERROR (get_desc))
        -:  321:    {
    #####:  322:      ret_value = get_desc;
    #####:  323:      ecma_deref_object (obj_p);
    #####:  324:      break;
        -:  325:    }
        -:  326:
        -:  327:    /* 3.b */
    #####:  328:    if (ecma_is_value_true (get_desc))
        -:  329:    {
    #####:  330:      if ((desc.flags & JERRY_PROP_IS_SET_DEFINED) || (desc.flags & JERRY_PROP_IS_GET_DEFINED))
        -:  331:      {
    #####:  332:        if (lookup_getter && desc.get_p != NULL)
        -:  333:        {
    #####:  334:          ecma_ref_object (desc.get_p);
    #####:  335:          ret_value = ecma_make_object_value (desc.get_p);
        -:  336:        }
    #####:  337:        else if (!lookup_getter && desc.set_p != NULL)
        -:  338:        {
    #####:  339:          ecma_ref_object (desc.set_p);
    #####:  340:          ret_value = ecma_make_object_value (desc.set_p);
        -:  341:        }
        -:  342:      }
        -:  343:
    #####:  344:      ecma_free_property_descriptor (&desc);
    #####:  345:      ecma_deref_object (obj_p);
    #####:  346:      break;
        -:  347:    }
        -:  348:
        -:  349:    /* 3.c */
    #####:  350:    ecma_object_t *proto_p = ecma_op_object_get_prototype_of (obj_p);
    #####:  351:    ecma_deref_object (obj_p);
        -:  352:
    #####:  353:    if (proto_p == NULL)
        -:  354:    {
    #####:  355:      break;
        -:  356:    }
    #####:  357:    else if (JERRY_UNLIKELY (proto_p == ECMA_OBJECT_POINTER_ERROR))
        -:  358:    {
    #####:  359:      ret_value = ECMA_VALUE_ERROR;
    #####:  360:      break;
        -:  361:    }
        -:  362:
        -:  363:    /* Advance up on prototype chain. */
    #####:  364:    obj_p = proto_p;
        -:  365:  }
        -:  366:
    #####:  367:  ecma_free_value (to_obj);
    #####:  368:  ecma_deref_ecma_string (prop_name_p);
        -:  369:
    #####:  370:  return ret_value;
        -:  371:} /* ecma_builtin_object_prototype_lookup_getter_setter */
        -:  372:#endif /* JERRY_ESNEXT && JERRY_BUILTIN_ANNEXB */
        -:  373:
        -:  374:/**
        -:  375: * Dispatcher of the built-in's routines
        -:  376: *
        -:  377: * @return ecma value
        -:  378: *         Returned value must be freed with ecma_free_value.
        -:  379: */
        -:  380:ecma_value_t
    #####:  381:ecma_builtin_object_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:  382:                                                                             *   identifier */
        -:  383:                                                ecma_value_t this_arg, /**< 'this' argument value */
        -:  384:                                                const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  385:                                                                                        *   passed to routine */
        -:  386:                                                uint32_t arguments_number) /**< length of arguments' list */
        -:  387:{
        -:  388:  JERRY_UNUSED (arguments_number);
        -:  389:
        -:  390:  /* no specialization */
    #####:  391:  if (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_VALUE_OF)
        -:  392:  {
    #####:  393:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_TO_STRING)
        -:  394:    {
    #####:  395:      return ecma_builtin_object_prototype_object_to_string (this_arg);
        -:  396:    }
        -:  397:
    #####:  398:    JERRY_ASSERT (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_VALUE_OF);
        -:  399:
    #####:  400:    return ecma_builtin_object_prototype_object_value_of (this_arg);
        -:  401:  }
        -:  402:
    #####:  403:  if (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF)
        -:  404:  {
    #####:  405:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF)
        -:  406:    {
        -:  407:      /* 15.2.4.6.1. */
    #####:  408:      if (!ecma_is_value_object (arguments_list_p[0]))
        -:  409:      {
    #####:  410:        return ECMA_VALUE_FALSE;
        -:  411:      }
        -:  412:    }
        -:  413:
    #####:  414:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_TO_LOCALE_STRING)
        -:  415:    {
    #####:  416:      return ecma_builtin_object_prototype_object_to_locale_string (this_arg);
        -:  417:    }
        -:  418:
    #####:  419:    ecma_value_t to_object = ecma_op_to_object (this_arg);
        -:  420:
    #####:  421:    if (ECMA_IS_VALUE_ERROR (to_object))
        -:  422:    {
    #####:  423:      return to_object;
        -:  424:    }
        -:  425:
    #####:  426:    ecma_object_t *obj_p = ecma_get_object_from_value (to_object);
        -:  427:
        -:  428:    ecma_value_t ret_value;
        -:  429:
        -:  430:#if JERRY_ESNEXT
    #####:  431:    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_GET_PROTO)
        -:  432:    {
    #####:  433:      ret_value = ecma_builtin_object_object_get_prototype_of (obj_p);
        -:  434:    }
        -:  435:    else
        -:  436:#endif /* JERRY_ESNEXT */
        -:  437:    {
    #####:  438:      ret_value = ecma_builtin_object_prototype_object_is_prototype_of (obj_p, arguments_list_p[0]);
        -:  439:    }
        -:  440:
    #####:  441:    ecma_deref_object (obj_p);
        -:  442:
    #####:  443:    return ret_value;
        -:  444:  }
        -:  445:
    #####:  446:  JERRY_ASSERT (builtin_routine_id >= ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY);
        -:  447:
        -:  448:#if JERRY_ESNEXT
    #####:  449:  if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_SET_PROTO)
        -:  450:  {
    #####:  451:    return ecma_builtin_object_object_set_proto (this_arg, arguments_list_p[0]);
        -:  452:  }
        -:  453:#if JERRY_BUILTIN_ANNEXB
    #####:  454:  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_LOOKUP_GETTER)
        -:  455:  {
    #####:  456:    return ecma_builtin_object_prototype_lookup_getter_setter (this_arg, arguments_list_p[0], true);
        -:  457:  }
    #####:  458:  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_LOOKUP_SETTER)
        -:  459:  {
    #####:  460:    return ecma_builtin_object_prototype_lookup_getter_setter (this_arg, arguments_list_p[0], false);
        -:  461:  }
    #####:  462:  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_DEFINE_GETTER)
        -:  463:  {
    #####:  464:    return ecma_builtin_object_prototype_define_getter_setter (this_arg,
        -:  465:                                                               arguments_list_p[0],
    #####:  466:                                                               arguments_list_p[1],
        -:  467:                                                               true);
        -:  468:  }
    #####:  469:  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_DEFINE_SETTER)
        -:  470:  {
    #####:  471:    return ecma_builtin_object_prototype_define_getter_setter (this_arg,
        -:  472:                                                               arguments_list_p[0],
    #####:  473:                                                               arguments_list_p[1],
        -:  474:                                                               false);
        -:  475:  }
        -:  476:#endif /* JERRY_BUILTIN_ANNEXB */
        -:  477:#endif /* JERRY_ESNEXT*/
        -:  478:
    #####:  479:  ecma_string_t *prop_name_p = ecma_op_to_property_key (arguments_list_p[0]);
        -:  480:
    #####:  481:  if (prop_name_p == NULL)
        -:  482:  {
    #####:  483:    return ECMA_VALUE_ERROR;
        -:  484:  }
        -:  485:
    #####:  486:  ecma_value_t to_object = ecma_op_to_object (this_arg);
        -:  487:
    #####:  488:  if (ECMA_IS_VALUE_ERROR (to_object))
        -:  489:  {
    #####:  490:    ecma_deref_ecma_string (prop_name_p);
    #####:  491:    return to_object;
        -:  492:  }
        -:  493:
    #####:  494:  ecma_object_t *obj_p = ecma_get_object_from_value (to_object);
        -:  495:
        -:  496:  ecma_value_t ret_value;
        -:  497:
    #####:  498:  if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY)
        -:  499:  {
    #####:  500:    ret_value = ecma_builtin_object_prototype_object_has_own_property (obj_p, prop_name_p);
        -:  501:  }
        -:  502:  else
        -:  503:  {
    #####:  504:    ret_value = ecma_builtin_object_prototype_object_property_is_enumerable (obj_p, prop_name_p);
        -:  505:  }
        -:  506:
    #####:  507:  ecma_deref_ecma_string (prop_name_p);
    #####:  508:  ecma_deref_object (obj_p);
        -:  509:
    #####:  510:  return ret_value;
        -:  511:} /* ecma_builtin_object_prototype_dispatch_routine */
        -:  512:
        -:  513:/**
        -:  514: * @}
        -:  515: * @}
        -:  516: * @}
        -:  517: */
