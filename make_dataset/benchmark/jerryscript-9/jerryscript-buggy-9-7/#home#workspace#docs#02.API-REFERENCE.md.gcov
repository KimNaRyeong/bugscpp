        -:    0:Source:/home/workspace/docs/02.API-REFERENCE.md
        -:    0:Programs:297
        -:    1:# JerryScript types
        -:    2:
        -:    3:## jerry_init_flag_t
        -:    4:
        -:    5:Enum that contains the following elements:
        -:    6:
        -:    7: - JERRY_INIT_EMPTY - empty flag set
        -:    8: - JERRY_INIT_SHOW_OPCODES - dump byte-code to log after parse
        -:    9: - JERRY_INIT_SHOW_REGEXP_OPCODES - dump regexp byte-code to log after compilation
        -:   10: - JERRY_INIT_MEM_STATS - dump memory statistics
        -:   11:
        -:   12:## jerry_type_t
        -:   13:
        -:   14:Enum that contains JerryScript API value types:
        -:   15:
        -:   16: - JERRY_TYPE_NONE - no type information
        -:   17: - JERRY_TYPE_UNDEFINED - undefined type
        -:   18: - JERRY_TYPE_NULL - null type
        -:   19: - JERRY_TYPE_BOOLEAN - boolean type
        -:   20: - JERRY_TYPE_NUMBER - number type
        -:   21: - JERRY_TYPE_STRING - string type
        -:   22: - JERRY_TYPE_OBJECT - object type
        -:   23: - JERRY_TYPE_FUNCTION - function type
        -:   24: - JERRY_TYPE_EXCEPTION - exception/abort type
        -:   25: - JERRY_TYPE_SYMBOL - symbol type
        -:   26: - JERRY_TYPE_BIGINT - bigint type
        -:   27:
        -:   28:*New in version 2.0*.
        -:   29:
        -:   30:*Changed in version 2.4*: Added `JERRY_TYPE_BIGINT` value.
        -:   31:
        -:   32:## jerry_object_type_t
        -:   33:
        -:   34:Enum that contains JerryScript **object** value types:
        -:   35:
        -:   36: - JERRY_OBJECT_TYPE_NONE - Non-object type
        -:   37: - JERRY_OBJECT_TYPE_GENERIC - Generic JavaScript object without any internal property
        -:   38: - JERRY_OBJECT_TYPE_MODULE_NAMESPACE - Module namespace object
        -:   39: - JERRY_OBJECT_TYPE_ARRAY - Array object
        -:   40: - JERRY_OBJECT_TYPE_PROXY - Proxy object
        -:   41: - JERRY_OBJECT_TYPE_SCRIPT - Script object (see [jerry_parse](#jerry_parse))
        -:   42: - JERRY_OBJECT_TYPE_MODULE - Module object (see [jerry_parse](#jerry_parse))
        -:   43: - JERRY_OBJECT_TYPE_PROMISE - Promise object
        -:   44: - JERRY_OBJECT_TYPE_DATAVIEW - Dataview object
        -:   45: - JERRY_OBJECT_TYPE_FUNCTION - Function object (see [jerry_function_type](#jerry_function_type))
        -:   46: - JERRY_OBJECT_TYPE_TYPEDARRAY - %TypedArray% object (see [jerry_typedarray_type](#jerry_typedarray_type))
        -:   47: - JERRY_OBJECT_TYPE_ITERATOR - Iterator object (see [jerry_iterator_type](#jerry_typedarray_type))
        -:   48: - JERRY_OBJECT_TYPE_CONTAINER - Container object (see [jerry_container_type](#jerry_container_type))
        -:   49: - JERRY_OBJECT_TYPE_ERROR - Error object (see [jerry_error_type](#jerry_error_type))
        -:   50: - JERRY_OBJECT_TYPE_ARRAYBUFFER - ArrayBuffer object
        -:   51: - JERRY_OBJECT_TYPE_SHARED_ARRAYBUFFER - SharedArrayBuffer object
        -:   52:
        -:   53: - JERRY_OBJECT_TYPE_ARGUMENTS - Arguments object
        -:   54: - JERRY_OBJECT_TYPE_BOOLEAN - Boolean object
        -:   55: - JERRY_OBJECT_TYPE_DATE - Date object
        -:   56: - JERRY_OBJECT_TYPE_NUMBER - Number object
        -:   57: - JERRY_OBJECT_TYPE_REGEXP - RegExp object
        -:   58: - JERRY_OBJECT_TYPE_STRING - String object
        -:   59: - JERRY_OBJECT_TYPE_SYMBOL - Symbol object
        -:   60: - JERRY_OBJECT_TYPE_GENERATOR - Generator object
        -:   61: - JERRY_OBJECT_TYPE_BIGINT - BigInt object
        -:   62: - JERRY_OBJECT_TYPE_WEAKREF - WeakRef object
        -:   63:
        -:   64:*New in version 2.4*.
        -:   65:
        -:   66:*Changed in version [[NEXT_RELEASE]]*: Added `JERRY_OBJECT_TYPE_MODULE_NAMESPACE`, `JERRY_OBJECT_TYPE_PROMISE`, `JERRY_OBJECT_TYPE_DATAVIEW`,
        -:   67:                                       `JERRY_OBJECT_TYPE_ERROR`, `JERRY_OBJECT_TYPE_SHARED_ARRAYBUFFER`, `JERRY_OBJECT_TYPE_WEAKREF`,
        -:   68:                                       `JERRY_OBJECT_TYPE_SCRIPT`, and `JERRY_OBJECT_TYPE_MODULE` values.
        -:   69:
        -:   70:## jerry_function_type_t
        -:   71:
        -:   72:Enum that contains JerryScript **function** value types:
        -:   73:
        -:   74: - JERRY_FUNCTION_TYPE_NONE - Non-function type
        -:   75: - JERRY_FUNCTION_TYPE_GENERIC - Generic JavaScript function
        -:   76: - JERRY_FUNCTION_TYPE_ACCESSOR - Accessor function
        -:   77: - JERRY_FUNCTION_TYPE_BOUND - Bound function
        -:   78: - JERRY_FUNCTION_TYPE_ARROW - Arrow function
        -:   79: - JERRY_FUNCTION_TYPE_GENERATOR - Generator function object
        -:   80:
        -:   81:*New in version 2.4*.
        -:   82:
        -:   83:## jerry_iterator_type_t
        -:   84:
        -:   85:Enum that contains JerryScript **iterator** value types:
        -:   86:
        -:   87: - JERRY_ITERATOR_TYPE_NONE - Non-iterator type
        -:   88: - JERRY_ITERATOR_TYPE_ARRAY - Array iterator
        -:   89: - JERRY_ITERATOR_TYPE_STRING - String iterator
        -:   90: - JERRY_ITERATOR_TYPE_MAP - Map iterator
        -:   91: - JERRY_ITERATOR_TYPE_SET - Set iterator
        -:   92:
        -:   93:*New in version 2.4*.
        -:   94:
        -:   95:## jerry_proxy_custom_behavior_t
        -:   96:
        -:   97:These option bits allow specializing Proxies with non-standard behaviour.
        -:   98:These flags are recommended only for those trusted Proxies, whose handlers
        -:   99:produce correct results.
        -:  100:
        -:  101:- JERRY_PROXY_SKIP_RESULT_VALIDATION - skip result validation for [[GetPrototypeOf]], [[SetPrototypeOf]], [[IsExtensible]],
        -:  102:                                       [[PreventExtensions]], [[GetOwnProperty]], [[DefineOwnProperty]], [[HasProperty]],
        -:  103:                                       [[Get]], [[Set]], [[Delete]] and [[OwnPropertyKeys]]
        -:  104:
        -:  105:*New in version [[NEXT_RELEASE]]*.
        -:  106:
        -:  107:## jerry_property_filter_t
        -:  108:
        -:  109:Enum that contains JerryScript **property filter** options bits:
        -:  110:
        -:  111: - JERRY_PROPERTY_FILTER_ALL - List all property keys independently from key type or property value attributes (equivalent to Reflect.ownKeys call)
        -:  112: - JERRY_PROPERTY_FILTER_TRAVERSE_PROTOTYPE_CHAIN - Include keys from the objects' prototype chain as well
        -:  113: - JERRY_PROPERTY_FILTER_EXCLUDE_NON_CONFIGURABLE - Exclude property key if the property is non-configurable
        -:  114: - JERRY_PROPERTY_FILTER_EXCLUDE_NON_ENUMERABLE - Exclude property key if the property is non-enumerable
        -:  115: - JERRY_PROPERTY_FILTER_EXCLUDE_NON_WRITABLE - Exclude property key if the property is non-writable
        -:  116: - JERRY_PROPERTY_FILTER_EXCLUDE_STRINGS - Exclude property key if it is a string
        -:  117: - JERRY_PROPERTY_FILTER_EXCLUDE_SYMBOLS - Exclude property key if it is a symbol
        -:  118: - JERRY_PROPERTY_FILTER_EXCLUDE_INTEGER_INDICES - Exclude property key if it is an integer index
        -:  119: - JERRY_PROPERTY_FILTER_INTEGER_INDICES_AS_NUMBER - By default integer index property keys are converted to string. Enabling this flags keeps integer index property keys as numbers
        -:  120:
        -:  121:*New in version 2.4*.
        -:  122:
        -:  123:*Changed in version [[NEXT_RELEASE]]*: The following values are modified due to a typo in their names (exlcude/exclude):
        -:  124:                                       `JERRY_PROPERTY_FILTER_EXLCUDE_NON_CONFIGURABLE`, `JERRY_PROPERTY_FILTER_EXLCUDE_NON_ENUMERABLE`,
        -:  125:                                       `JERRY_PROPERTY_FILTER_EXLCUDE_NON_WRITABLE`, `JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS`,
        -:  126:                                       `JERRY_PROPERTY_FILTER_EXLCUDE_SYMBOLS`, `JERRY_PROPERTY_FILTER_EXLCUDE_INTEGER_INDICES`.
        -:  127:
        -:  128:## jerry_error_t
        -:  129:
        -:  130:Possible types of an Error object:
        -:  131:
        -:  132: - JERRY_ERROR_COMMON - common error
        -:  133: - JERRY_ERROR_EVAL - eval error
        -:  134: - JERRY_ERROR_RANGE - range error
        -:  135: - JERRY_ERROR_REFERENCE - reference error
        -:  136: - JERRY_ERROR_SYNTAX - syntax error
        -:  137: - JERRY_ERROR_TYPE - type error
        -:  138: - JERRY_ERROR_URI - URI error
        -:  139:
        -:  140:There is also a special value `JERRY_ERROR_NONE` which is not an error type
        -:  141:this value can only be returned by the [jerry_error_type](#jerry_error_type).
        -:  142:
        -:  143:*Changed in version 2.0*: The `JERRY_ERROR_NONE` was added to be used by the [jerry_error_type](#jerry_error_type) method.
        -:  144:
        -:  145:## jerry_feature_t
        -:  146:
        -:  147:Possible compile time enabled feature types:
        -:  148:
        -:  149: - JERRY_FEATURE_CPOINTER_32_BIT - 32 bit compressed pointers
        -:  150: - JERRY_FEATURE_ERROR_MESSAGES - error messages
        -:  151: - JERRY_FEATURE_JS_PARSER - js-parser
        -:  152: - JERRY_FEATURE_HEAP_STATS - memory statistics
        -:  153: - JERRY_FEATURE_PARSER_DUMP - parser byte-code dumps
        -:  154: - JERRY_FEATURE_REGEXP_DUMP - regexp byte-code dumps
        -:  155: - JERRY_FEATURE_SNAPSHOT_SAVE - saving snapshot files
        -:  156: - JERRY_FEATURE_SNAPSHOT_EXEC - executing snapshot files
        -:  157: - JERRY_FEATURE_DEBUGGER - debugging
        -:  158: - JERRY_FEATURE_VM_EXEC_STOP - stopping ECMAScript execution
        -:  159: - JERRY_FEATURE_VM_THROW - capturing ECMAScript throws
        -:  160: - JERRY_FEATURE_JSON - JSON support
        -:  161: - JERRY_FEATURE_PROMISE - promise support
        -:  162: - JERRY_FEATURE_TYPEDARRAY - Typedarray support
        -:  163: - JERRY_FEATURE_DATE - Date support
        -:  164: - JERRY_FEATURE_REGEXP - RegExp support
        -:  165: - JERRY_FEATURE_LINE_INFO - line info available
        -:  166: - JERRY_FEATURE_LOGGING - logging
        -:  167: - JERRY_FEATURE_SYMBOL - symbol support
        -:  168: - JERRY_FEATURE_DATAVIEW - DataView support
        -:  169: - JERRY_FEATURE_PROXY - Proxy support
        -:  170: - JERRY_FEATURE_MAP - Map support
        -:  171: - JERRY_FEATURE_SET - Set support
        -:  172: - JERRY_FEATURE_WEAKMAP - WeakMap support
        -:  173: - JERRY_FEATURE_WEAKSET - WeakSet support
        -:  174: - JERRY_FEATURE_BIGINT - BigInt support
        -:  175: - JERRY_FEATURE_REALM - realm support
        -:  176: - JERRY_FEATURE_GLOBAL_THIS - GlobalThisValue support
        -:  177: - JERRY_FEATURE_PROMISE_CALLBACK - Promise callback support
        -:  178: - JERRY_FEATURE_MODULE - Module support
        -:  179: - JERRY_FEATURE_WEAKREF - WeakRef support
        -:  180: - JERRY_FEATURE_FUNCTION_TO_STRING - function toString support
        -:  181:
        -:  182:*New in version 2.0*.
        -:  183:
        -:  184:*Changed in version 2.3*: Added `JERRY_FEATURE_WEAKMAP`, `JERRY_FEATURE_WEAKSET` values.
        -:  185:
        -:  186:*Changed in version 2.4*: Added `JERRY_FEATURE_BIGINT`, `JERRY_FEATURE_REALM` values.
        -:  187:
        -:  188:*Changed in version [[NEXT_RELEASE]]*: Added `JERRY_FEATURE_VM_THROW`, `JERRY_FEATURE_GLOBAL_THIS`,
        -:  189:                                       `JERRY_FEATURE_PROMISE_CALLBACK`, and `JERRY_FEATURE_MODULE`,
        -:  190:                                       `JERRY_FEATURE_WEAKREF`, and `JERRY_FEATURE_FUNCTION_TO_STRING` values.
        -:  191:
        -:  192:## jerry_container_type_t
        -:  193:
        -:  194:Container object types:
        -:  195:
        -:  196: - JERRY_CONTAINER_TYPE_INVALID - Invalid container
        -:  197: - JERRY_CONTAINER_TYPE_MAP - Map type
        -:  198: - JERRY_CONTAINER_TYPE_SET - Set type
        -:  199: - JERRY_CONTAINER_TYPE_WEAKMAP - WeakMap type
        -:  200: - JERRY_CONTAINER_TYPE_WEAKSET - WeakSet type
        -:  201:
        -:  202: *New in version 2.3*.
        -:  203:
        -:  204:## jerry_well_known_symbol_t
        -:  205:
        -:  206:Well-known symbols:
        -:  207:
        -:  208: - JERRY_SYMBOL_ASYNC_ITERATOR - @@asyncIterator well-known symbol
        -:  209: - JERRY_SYMBOL_HAS_INSTANCE - @@hasInstance well-known symbol
        -:  210: - JERRY_SYMBOL_IS_CONCAT_SPREADABLE - @@isConcatSpreadable well-known symbol
        -:  211: - JERRY_SYMBOL_ITERATOR - @@iterator well-known symbol
        -:  212: - JERRY_SYMBOL_MATCH - @@match well-known symbol
        -:  213: - JERRY_SYMBOL_REPLACE - @@replace well-known symbol
        -:  214: - JERRY_SYMBOL_SEARCH - @@search well-known symbol
        -:  215: - JERRY_SYMBOL_SPECIES - @@species well-known symbol
        -:  216: - JERRY_SYMBOL_SPLIT - @@split well-known symbol
        -:  217: - JERRY_SYMBOL_TO_PRIMITIVE - @@toPrimitive well-known symbol
        -:  218: - JERRY_SYMBOL_TO_STRING_TAG - @@toStringTag well-known symbol
        -:  219: - JERRY_SYMBOL_UNSCOPABLES - @@unscopables well-known symbol
        -:  220: - JERRY_SYMBOL_MATCH_ALL - @@matchAll well-known symbol
        -:  221:
        -:  222: *New in version 2.4*.
        -:  223:
        -:  224:## jerry_regexp_flags_t
        -:  225:
        -:  226:RegExp object optional flags:
        -:  227:
        -:  228:  - JERRY_REGEXP_FLAG_GLOBAL - global match; find all matches rather than stopping after the first match
        -:  229:  - JERRY_REGEXP_FLAG_IGNORE_CASE - ignore case
        -:  230:  - JERRY_REGEXP_FLAG_MULTILINE - multiline; treat beginning and end characters (^ and $) as working
        -:  231:    over
        -:  232:    multiple lines (i.e., match the beginning or end of each line (delimited by \n or \r), not only the
        -:  233:    very beginning or end of the whole input string)
        -:  234:  - JERRY_REGEXP_FLAG_STICKY - The sticky flag indicates that it matches only from the index indicated
        -:  235:    by the lastIndex property
        -:  236:  - JERRY_REGEXP_FLAG_UNICODE - The unicode flag enables various Unicode-related features
        -:  237:  - JERRY_REGEXP_FLAG_DOTALL -The dotall flag indicates that the dot special character (".") should
        -:  238:    additionally match the following line terminator ("newline") characters in a string;
        -:  239:
        -:  240:
        -:  241:*New in version 2.0*.
        -:  242:
        -:  243:*Changed in version 2.4*: Added `JERRY_REGEXP_FLAG_STICKY`, `JERRY_REGEXP_FLAG_UNICODE` , `JERRY_REGEXP_FLAG_DOTALL` values.
        -:  244:
        -:  245:
        -:  246:## jerry_parse_option_enable_feature_t
        -:  247:
        -:  248:Option bits for [jerry_parse_options_t](#jerry_parse_options_t).
        -:  249:
        -:  250: - JERRY_PARSE_NO_OPTS - No options passed
        -:  251: - JERRY_PARSE_STRICT_MODE - Enable strict mode
        -:  252: - JERRY_PARSE_MODULE - Parse source as an ECMAScript module
        -:  253: - JERRY_PARSE_HAS_ARGUMENT_LIST - `argument_list` field is valid, this also means that function parsing will be done
        -:  254: - JERRY_PARSE_HAS_SOURCE_NAME - `source_name` field is valid
        -:  255: - JERRY_PARSE_HAS_START - `start_line` and `start_column` fields are valid
        -:  256: - JERRY_PARSE_HAS_USER_VALUE - `user_value` field is valid
        -:  257:
        -:  258:*New in version [[NEXT_RELEASE]]*.
        -:  259:
        -:  260:Using both `JERRY_PARSE_MODULE` and `JERRY_PARSE_HAS_ARGUMENT_LIST` is an invalid combination and will result in
        -:  261:an exception during parsing.
        -:  262:
        -:  263:**See also**
        -:  264:
        -:  265:- [jerry_parse_options_t](#jerry_parse_options_t)
        -:  266:
        -:  267:## jerry_gc_mode_t
        -:  268:
        -:  269:Set garbage collection operational mode
        -:  270:
        -:  271: - JERRY_GC_PRESSURE_LOW - free unused objects
        -:  272: - JERRY_GC_PRESSURE_HIGH - free as much memory as possible
        -:  273:
        -:  274:The difference between `JERRY_GC_PRESSURE_LOW` and `JERRY_GC_PRESSURE_HIGH`
        -:  275:is that the former keeps memory allocated for performance improvements such
        -:  276:as property hash tables for large objects. The latter frees all possible
        -:  277:memory blocks but the performance may drop after the garbage collection.
        -:  278:
        -:  279:*New in version 2.0*.
        -:  280:
        -:  281:## jerry_frame_type_t
        -:  282:
        -:  283:List of backtrace frame types returned by
        -:  284:[jerry_frame_type](#jerry_frame_type).
        -:  285:
        -:  286: - JERRY_BACKTRACE_FRAME_JS - indicates that the frame is created for a JavaScript function/method
        -:  287:
        -:  288:*New in version [[NEXT_RELEASE]]*.
        -:  289:
        -:  290:## jerry_generate_snapshot_opts_t
        -:  291:
        -:  292:Flags for [jerry_generate_snapshot](#jerry_generate_snapshot):
        -:  293:
        -:  294: - JERRY_SNAPSHOT_SAVE_STATIC - generate static snapshot (see below)
        -:  295:
        -:  296:**Generate static snapshots**
        -:  297:Snapshots contain literal pools, and these literal pools contain references
        -:  298:to constant literals (strings, numbers, etc.). When a snapshot is executed,
        -:  299:these literals are converted to jerry values and the literal pool entries
        -:  300:are changed to their corresponding jerry value. To support this conversion,
        -:  301:the literals and literal pools are copied into RAM even if the
        -:  302:`JERRY_SNAPSHOT_EXEC_COPY_DATA` option is passed to
        -:  303:[jerry_exec_snapshot](#jerry_exec_snapshot). This non-negligible memory
        -:  304:consumption can be avoided by using static snapshots. The literals of
        -:  305:these snapshots are limited to magic strings and 28 bit signed integers,
        -:  306:so their constant pools do not need to be loaded into the memory.
        -:  307:Hence these snapshots can be executed from ROM.
        -:  308:
        -:  309:***Important note:*** The [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  310:function rejects static snapshots unless the `JERRY_SNAPSHOT_EXEC_ALLOW_STATIC`
        -:  311:option bit is set. The caller must also ensure that the same magic
        -:  312:strings are set by [jerry_register_magic_strings](#jerry_register_magic_strings)
        -:  313:when the snapshot is generated and executed. Furthermore the
        -:  314:`JERRY_SNAPSHOT_EXEC_COPY_DATA` option is not allowed.
        -:  315:
        -:  316:*New in version 2.0*.
        -:  317:
        -:  318:*Changed in version [[NEXT_RELEASE]]*: The `JERRY_SNAPSHOT_SAVE_STRICT` value is removed, `JERRY_PARSE_STRICT_MODE` should be used instead.
        -:  319:
        -:  320:## jerry_exec_snapshot_opts_t
        -:  321:
        -:  322:Flags for [jerry_exec_snapshot](#jerry_exec_snapshot) functions:
        -:  323:
        -:  324: - JERRY_SNAPSHOT_EXEC_COPY_DATA - copy snapshot data into memory (see below)
        -:  325: - JERRY_SNAPSHOT_EXEC_ALLOW_STATIC - allow executing static snapshots
        -:  326: - JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION - load snapshot as function instead of executing it
        -:  327: - JERRY_SNAPSHOT_EXEC_HAS_SOURCE_NAME - `source_name` field is valid
        -:  328:                                      in [jerry_exec_snapshot_option_values_t](#jerry_exec_snapshot_option_values_t)
        -:  329: - JERRY_SNAPSHOT_EXEC_HAS_USER_VALUE - `user_value` field is valid
        -:  330:                                        in [jerry_exec_snapshot_option_values_t](#jerry_exec_snapshot_option_values_t)
        -:  331:
        -:  332:*Changed in version [[NEXT_RELEASE]]*: The `JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION` value is added,
        -:  333:                                       which replaces the `jerry_load_function_snapshot` function.
        -:  334:
        -:  335:**Copy snapshot data into memory**
        -:  336:
        -:  337:By default the snapshot buffer is expected to be present in memory until
        -:  338:[jerry_cleanup](#jerry_cleanup) is called. For example `static const` buffers
        -:  339:compiled into the application binary satisfy this requirement.
        -:  340:
        -:  341:If the snapshot buffer is freed after [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  342:is called the `JERRY_SNAPSHOT_EXEC_COPY_DATA` must be passed to copy the necessary
        -:  343:parts of the snapshot buffer into memory.
        -:  344:
        -:  345:The `JERRY_SNAPSHOT_EXEC_COPY_DATA` option is not allowed for static snapshots.
        -:  346:
        -:  347:*New in version 2.0*.
        -:  348:
        -:  349:## jerry_char_t
        -:  350:
        -:  351:**Summary**
        -:  352:
        -:  353:Jerry's char value
        -:  354:
        -:  355:**Prototype**
        -:  356:
        -:  357:```c
        -:  358:typedef uint8_t jerry_char_t;
        -:  359:```
        -:  360:
        -:  361:## jerry_size_t
        -:  362:
        -:  363:**Summary**
        -:  364:
        -:  365:Jerry's size
        -:  366:
        -:  367:**Prototype**
        -:  368:
        -:  369:```c
        -:  370:typedef uint32_t jerry_size_t;
        -:  371:```
        -:  372:
        -:  373:## jerry_length_t
        -:  374:
        -:  375:**Summary**
        -:  376:
        -:  377:Jerry's length
        -:  378:
        -:  379:**Prototype**
        -:  380:
        -:  381:```c
        -:  382:typedef uint32_t jerry_length_t;
        -:  383:```
        -:  384:
        -:  385:## jerry_value_t
        -:  386:
        -:  387:**Summary**
        -:  388:
        -:  389:A JerryScript value can be undefined, null, boolean, number, string, object, or an exception value. Exception values
        -:  390:represent thrown exceptions during execution. Exception values cannot be passed as an argument to regular API function,
        -:  391:only to those that work with exception values specifically.
        -:  392:
        -:  393:Returned and created values by the API functions must be freed with
        -:  394:[jerry_value_free](#jerry_value_free) when they are no longer needed.
        -:  395:
        -:  396:**Prototype**
        -:  397:
        -:  398:```c
        -:  399:typedef uint32_t jerry_value_t;
        -:  400:```
        -:  401:
        -:  402:## jerry_context_data_manager_t
        -:  403:
        -:  404:**Summary**
        -:  405:
        -:  406:Structure that defines how a context data item will be initialized and deinitialized. JerryScript zeroes out the memory
        -:  407:for the item by default, and if the `init_cb` field is not NULL, it will be called with the pointer to the memory as
        -:  408:an additional custom initializer. The `deinit_cb` (if non-`NULL`) is called during a call to `jerry_cleanup ()` to run
        -:  409:any custom deinitialization *before* the VM has been fully cleaned up. The `finalize_cb` (if non-`NULL`) is also called
        -:  410:during a call to `jerry_cleanup ()` to run any custom deinitialization *after* the VM has been fully cleaned up.
        -:  411:If bytes_needed field is 0, no buffer is allocated for the manager, callback functions are called with NULL pointer.
        -:  412:
        -:  413:**Prototype**
        -:  414:
        -:  415:```c
        -:  416:typedef struct
        -:  417:{
        -:  418:  /**
        -:  419:   * Callback responsible for initializing a context item, or NULL to zero out the memory. This is called lazily, the
        -:  420:   * first time jerry_context_data () is called with this manager.
        -:  421:   *
        -:  422:   * @param [in] data The buffer that JerryScript allocated for the manager. The buffer is zeroed out. The size is
        -:  423:   * determined by the bytes_needed field. The buffer is kept alive until jerry_cleanup () is called.
        -:  424:   */
        -:  425:  void (*init_cb) (void *data);
        -:  426:
        -:  427:  /**
        -:  428:   * Callback responsible for deinitializing a context item, or NULL. This is called as part of jerry_cleanup (),
        -:  429:   * right *before* the VM has been cleaned up. This is a good place to release strong references to jerry_value_t's
        -:  430:   * that the manager may be holding.
        -:  431:   * Note: because the VM has not been fully cleaned up yet, jerry_object_native_info_t free_cb's can still get called
        -:  432:   * *after* all deinit_cb's have been run. See finalize_cb for a callback that is guaranteed to run *after* all
        -:  433:   * free_cb's have been run.
        -:  434:   *
        -:  435:   * @param [in] data The buffer that JerryScript allocated for the manager.
        -:  436:   */
        -:  437:  void (*deinit_cb) (void *data);
        -:  438:
        -:  439:  /**
        -:  440:   * Callback responsible for finalizing a context item, or NULL. This is called as part of jerry_cleanup (),
        -:  441:   * right *after* the VM has been cleaned up and destroyed and jerry_... APIs cannot be called any more. At this point,
        -:  442:   * all values in the VM have been cleaned up. This is a good place to clean up native state that can only be cleaned
        -:  443:   * up at the very end when there are no more VM values around that may need to access that state.
        -:  444:   *
        -:  445:   * @param [in] data The buffer that JerryScript allocated for the manager. After returning from this callback,
        -:  446:   * the data pointer may no longer be used.
        -:  447:   */
        -:  448:  void (*finalize_cb) (void *data);
        -:  449:
        -:  450:  /**
        -:  451:   * Number of bytes to allocate for this manager. This is the size of the buffer that JerryScript will allocate on
        -:  452:   * behalf of the manager. The pointer to this buffer is passed into init_cb, deinit_cb and finalize_cb. It is also
        -:  453:   * returned from the jerry_context_data () API.
        -:  454:   */
        -:  455:  size_t bytes_needed;
        -:  456:} jerry_context_data_manager_t;
        -:  457:```
        -:  458:
        -:  459:*New in version 2.0*.
        -:  460:
        -:  461:## jerry_context_alloc_t
        -:  462:
        -:  463:**Summary**
        -:  464:
        -:  465:Function type for allocating buffer for JerryScript context.
        -:  466:
        -:  467:**Prototype**
        -:  468:
        -:  469:```c
        -:  470:typedef void *(*jerry_context_alloc_t) (size_t size, void *cb_data_p);
        -:  471:```
        -:  472:
        -:  473:- `size` - allocation size
        -:  474:- `cb_data_p` - pointer to user data
        -:  475:
        -:  476:*New in version 2.0*.
        -:  477:
        -:  478:## jerry_context_t
        -:  479:
        -:  480:**Summary**
        -:  481:
        -:  482:An opaque declaration of the JerryScript context structure.
        -:  483:
        -:  484:**Prototype**
        -:  485:
        -:  486:```c
        -:  487:typedef struct jerry_context_t jerry_context_t;
        -:  488:```
        -:  489:
        -:  490:*New in version 2.0*.
        -:  491:
        -:  492:## jerry_container_op_t
        -:  493:
        -:  494:Enum that contains the supported container operation types
        -:  495:  - JERRY_CONTAINER_OP_ADD - Set/WeakSet add operation
        -:  496:  - JERRY_CONTAINER_OP_GET - Map/WeakMap get operation
        -:  497:  - JERRY_CONTAINER_OP_SET - Map/WeakMap set operation
        -:  498:  - JERRY_CONTAINER_OP_HAS - Set/WeakSet/Map/WeakMap has operation
        -:  499:  - JERRY_CONTAINER_OP_DELETE - Set/WeakSet/Map/WeakMap delete operation
        -:  500:  - JERRY_CONTAINER_OP_SIZE - Set/WeakSet/Map/WeakMap size operation
        -:  501:  - JERRY_CONTAINER_OP_CLEAR - Set/Map clear operation
        -:  502:
        -:  503:*New in version [[NEXT_RELEASE]]*.
        -:  504:
        -:  505:## jerry_binary_op_t
        -:  506:
        -:  507:Enum that contains the supported binary operation types
        -:  508: - JERRY_BIN_OP_EQUAL - equal comparison (==)
        -:  509: - JERRY_BIN_OP_STRICT_EQUAL - strict equal comparison (===)
        -:  510: - JERRY_BIN_OP_LESS - less relation (<)
        -:  511: - JERRY_BIN_OP_LESS_EQUAL - less or equal relation (<=)
        -:  512: - JERRY_BIN_OP_GREATER - greater relation (>)
        -:  513: - JERRY_BIN_OP_GREATER_EQUAL - greater or equal relation (>=)
        -:  514: - JERRY_BIN_OP_INSTANCEOF - instanceof operation
        -:  515: - JERRY_BIN_OP_ADD - addition operator (+)
        -:  516: - JERRY_BIN_OP_SUB - subtraction operator (-)
        -:  517: - JERRY_BIN_OP_MUL - multiplication operator (*)
        -:  518: - JERRY_BIN_OP_DIV - division operator (/)
        -:  519: - JERRY_BIN_OP_REM - remainder operator (%)
        -:  520:
        -:  521:*New in version 2.0*.
        -:  522:
        -:  523:**See also**
        -:  524:
        -:  525:- [jerry_binary_op](#jerry_binary_op)
        -:  526:
        -:  527:## jerry_property_descriptor_flags_t
        -:  528:
        -:  529:Enum that contains the flags of property descriptors.
        -:  530:
        -:  531: - JERRY_PROP_NO_OPTS - empty property descriptor
        -:  532: - JERRY_PROP_IS_CONFIGURABLE - [[Configurable]]
        -:  533: - JERRY_PROP_IS_ENUMERABLE - [[Enumerable]]
        -:  534: - JERRY_PROP_IS_WRITABLE - [[Writable]]
        -:  535: - JERRY_PROP_IS_CONFIGURABLE_DEFINED - Is [[Configurable]] defined?
        -:  536: - JERRY_PROP_IS_ENUMERABLE_DEFINED - Is [[Enumerable]] defined?
        -:  537: - JERRY_PROP_IS_WRITABLE_DEFINED - Is [[Writable]] defined?
        -:  538: - JERRY_PROP_IS_VALUE_DEFINED - Is [[Value]] defined?
        -:  539: - JERRY_PROP_IS_GET_DEFINED - Is [[Get]] defined?
        -:  540: - JERRY_PROP_IS_SET_DEFINED - Is [[Set]] defined?
        -:  541: - JERRY_PROP_SHOULD_THROW - Should throw in case of an exception, instead of returning with false
        -:  542:
        -:  543:*New in version [[NEXT_RELEASE]]*.
        -:  544:
        -:  545:**See also**
        -:  546:
        -:  547:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -:  548:
        -:  549:## jerry_parse_options_t
        -:  550:
        -:  551:**Summary**
        -:  552:
        -:  553:Various configuration options for parsing functions such as [jerry_parse](#jerry_parse).
        -:  554:
        -:  555:**Prototype**
        -:  556:
        -:  557:```c
        -:  558:typedef struct
        -:  559:{
        -:  560:  uint32_t options; /**< combination of jerry_parse_option_enable_feature_t values */
        -:  561:  jerry_value_t argument_list; /**< function argument list if JERRY_PARSE_HAS_ARGUMENT_LIST is set in options
        -:  562:                                *   Note: must be string value */
        -:  563:  jerry_value_t source_name; /**< source name string (usually a file name)
        -:  564:                              *   if JERRY_PARSE_HAS_SOURCE_NAME is set in options
        -:  565:                              *   Note: must be string value */
        -:  566:  uint32_t start_line; /**< start line of the source code if JERRY_PARSE_HAS_START is set in options */
        -:  567:  uint32_t start_column; /**< start column of the source code if JERRY_PARSE_HAS_START is set in options */
        -:  568:  jerry_value_t user_value; /**< user value assigned to all functions created by this script including eval
        -:  569:                             *   calls executed by the script if JERRY_PARSE_HAS_USER_VALUE is set in options */
        -:  570:} jerry_parse_options_t;
        -:  571:```
        -:  572:
        -:  573:*New in version [[NEXT_RELEASE]]*.
        -:  574:
        -:  575:**See also**
        -:  576:
        -:  577:- [jerry_parse](#jerry_parse)
        -:  578:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:  579:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:  580:- [jerry_parse_option_enable_feature_t](#jerry_parse_option_enable_feature_t)
        -:  581:
        -:  582:## jerry_property_descriptor_t
        -:  583:
        -:  584:**Summary**
        -:  585:
        -:  586:Description of ECMA property descriptor. This struct can be used
        -:  587:for the [jerry_object_define_own_prop](#jerry_object_define_own_prop) method to
        -:  588:configure how the property should be registered.
        -:  589:
        -:  590:The naming scheme is similar to the JavaScript `Object.defineProperty` method.
        -:  591:
        -:  592:Fields should be used in pairs. That is if the `is_value_defined` is set to `true`
        -:  593:the `value` field should contain the value for the property.
        -:  594:
        -:  595:**Prototype**
        -:  596:
        -:  597:```c
        -:  598:typedef struct
        -:  599:{
        -:  600:  uint16_t flags; /**< any combination of jerry_property_descriptor_flags_t bits */
        -:  601:  jerry_value_t value; /**< [[Value]] */
        -:  602:  jerry_value_t getter; /**< [[Get]] */
        -:  603:  jerry_value_t setter; /**< [[Set]] */
        -:  604:} jerry_property_descriptor_t;
        -:  605:```
        -:  606:
        -:  607:*Changed in version [[NEXT_RELEASE]]*: The `is_value_defined`, `is_get_defined`, `is_set_defined`,
        -:  608:                                       `is_writable_defined`, `is_writable`, `is_enumerable_defined`,
        -:  609:                                       `is_enumerable`, `is_configurable_defined`, and `is_configurable`
        -:  610:                                       fields are replaced by the `flags` field.
        -:  611:
        -:  612:**See also**
        -:  613:
        -:  614:- [jerry_property_descriptor_flags_t](#jerry_property_descriptor_flags_t)
        -:  615:- [jerry_object_define_own_prop](#jerry_object_define_own_prop)
        -:  616:
        -:  617:## jerry_frame_location_t
        -:  618:
        -:  619:**Summary**
        -:  620:
        -:  621:Source code location data retrieved by
        -:  622:[jerry_frame_location](#jerry_frame_location).
        -:  623:
        -:  624:**Prototype**
        -:  625:
        -:  626:```c
        -:  627:typedef struct
        -:  628:{
        -:  629:  jerry_value_t source_name; /**< source name */
        -:  630:  jerry_size_t line; /**< line index */
        -:  631:  jerry_size_t column; /**< column index */
        -:  632:} jerry_frame_location_t;
        -:  633:```
        -:  634:
        -:  635:*New in version [[NEXT_RELEASE]]*.
        -:  636:
        -:  637:## jerry_frame_t
        -:  638:
        -:  639:**Summary**
        -:  640:
        -:  641:Backtrace frame data passed to the [jerry_backtrace_cb_t](#jerry_backtrace_cb_t)
        -:  642:handler. This is an internal data structure which fields can be accessed by helper functions
        -:  643:such as [jerry_frame_location](#jerry_frame_location).
        -:  644:
        -:  645:**Prototype**
        -:  646:
        -:  647:```c
        -:  648:/**
        -:  649: * Internal data structure for jerry_frame_t definition.
        -:  650: */
        -:  651:struct jerry_frame_internal_t;
        -:  652:
        -:  653:/**
        -:  654: * Backtrace frame data passed to the jerry_backtrace_cb_t handler.
        -:  655: */
        -:  656:typedef struct jerry_frame_internal_t jerry_frame_t;
        -:  657:```
        -:  658:
        -:  659:*New in version [[NEXT_RELEASE]]*.
        -:  660:
        -:  661:## jerry_heap_stats_t
        -:  662:
        -:  663:**Summary**
        -:  664:
        -:  665:Description of JerryScript heap memory stats.
        -:  666:It is for memory profiling.
        -:  667:
        -:  668:**Prototype**
        -:  669:
        -:  670:```c
        -:  671:typedef struct
        -:  672:{
        -:  673:  size_t version /**< the version of the stats struct */
        -:  674:  size_t size; /**< heap total size */
        -:  675:  size_t allocated_bytes; /**< currently allocated bytes */
        -:  676:  size_t peak_allocated_bytes; /**< peak allocated bytes */
        -:  677:  size_t reserved[4]; /**< padding for future extensions */
        -:  678:} jerry_heap_stats_t;
        -:  679:```
        -:  680:
        -:  681:*New in version 2.0*.
        -:  682:
        -:  683:**See also**
        -:  684:
        -:  685:- [jerry_heap_stats](#jerry_heap_stats)
        -:  686:
        -:  687:## jerry_call_info_t
        -:  688:
        -:  689:**Summary**
        -:  690:
        -:  691:Call related information passed to [jerry_external_handler_t](#jerry_external_handler_t).
        -:  692:
        -:  693:**Prototype**
        -:  694:
        -:  695:```c
        -:  696:typedef struct jerry_call_info_t
        -:  697:{
        -:  698:  jerry_value_t function; /**< invoked function object */
        -:  699:  jerry_value_t this_value; /**< this value passed to the function */
        -:  700:  jerry_value_t new_target; /**< current new target value, undefined for non-constructor calls */
        -:  701:} jerry_call_info_t;
        -:  702:```
        -:  703:
        -:  704:*New in version [[NEXT_RELEASE]]*. Contents of this struct replaces the `jerry_get_new_target` function.
        -:  705:
        -:  706:**See also**
        -:  707:
        -:  708:- [jerry_external_handler_t](#jerry_external_handler_t)
        -:  709:
        -:  710:## jerry_external_handler_t
        -:  711:
        -:  712:**Summary**
        -:  713:
        -:  714:Type of an external function handler
        -:  715:
        -:  716:**Prototype**
        -:  717:
        -:  718:```c
        -:  719:typedef jerry_value_t (*jerry_external_handler_t) (const jerry_call_info_t *call_info_p,
        -:  720:                                                   const jerry_value_t args_p[],
        -:  721:                                                   const jerry_length_t args_count);
        -:  722:```
        -:  723:
        -:  724:- `call_info_p` - pointer to a [jerry_call_info_t](#jerry_call_info_t)
        -:  725:                  structure which holds call related information.
        -:  726:- `args_p` - the function arguments, array of JavaScript values.
        -:  727:- `args_count` - the number of arguments.
        -:  728:- return value
        -:  729:  - The function's return value. If there is no return value, use [jerry_undefined()](#jerry_undefined).
        -:  730:
        -:  731:**See also**
        -:  732:
        -:  733:- [jerry_function_external](#jerry_function_external)
        -:  734:
        -:  735:## jerry_value_free_callback_t
        -:  736:
        -:  737:**Summary**
        -:  738:
        -:  739:Native free callback of generic value types.
        -:  740:
        -:  741:*Note*:
        -:  742: - Referred values by this method must have at least 1 reference. (Correct API usage satisfies this condition)
        -:  743:
        -:  744:**Prototype**
        -:  745:
        -:  746:```c
        -:  747:typedef void (*jerry_value_free_callback_t) (void *native_p);
        -:  748:```
        -:  749:
        -:  750:*New in version [[NEXT_RELEASE]]*.
        -:  751:
        -:  752:**See also**
        -:  753:
        -:  754:- [jerry_string_external_sz](#jerry_string_external_sz)
        -:  755:- [jerry_string_external](#jerry_string_external)
        -:  756:- [jerry_arraybuffer_external](#jerry_arraybuffer_external)
        -:  757:
        -:  758:## jerry_object_native_free_cb_t
        -:  759:
        -:  760:**Summary**
        -:  761:
        -:  762:Native free callback of an object. The callback receives both the memory pointer and the type
        -:  763:information passed to [jerry_object_set_native_ptr](#jerry_object_set_native_ptr).
        -:  764:
        -:  765:*Note*:
        -:  766: - Referred values by this method must have at least 1 reference. (Correct API usage satisfies this condition)
        -:  767:
        -:  768:**Prototype**
        -:  769:
        -:  770:```c
        -:  771:typedef void (*jerry_object_native_free_cb_t) (void *native_p, struct jerry_object_native_info_t *info_p);
        -:  772:```
        -:  773:
        -:  774:- `native_p` - native pointer passed to [jerry_object_set_native_ptr](#jerry_object_set_native_ptr).
        -:  775:- `info_p` - native type info passed to [jerry_object_set_native_ptr](#jerry_object_set_native_ptr).
        -:  776:
        -:  777:*New in version 2.0*: Renamed from `jerry_object_free_callback_t`.
        -:  778:
        -:  779:*Changed in version 2.2*: API calls are once again allowed. (See note)
        -:  780:
        -:  781:*Changed in version [[NEXT_RELEASE]]*: `info_p` argument is added
        -:  782:
        -:  783:**See also**
        -:  784:
        -:  785:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:  786:
        -:  787:## jerry_external_string_free_cb_t
        -:  788:
        -:  789:**Summary**
        -:  790:
        -:  791:Free callback for external strings. See
        -:  792:[jerry_string_external_on_free](#jerry_string_external_on_free)
        -:  793:for more information.
        -:  794:
        -:  795:**Prototype**
        -:  796:
        -:  797:```c
        -:  798:typedef void (*jerry_external_string_free_cb_t) (jerry_char_t *string_p,
        -:  799:                                                 jerry_size_t string_size,
        -:  800:                                                 void *user_p);
        -:  801:```
        -:  802:
        -:  803:- `string_p` - external string pointer
        -:  804:- `string_size` - size of external string
        -:  805:- `user_p` - pointer passed when the external string is created
        -:  806:
        -:  807:*New in version [[NEXT_RELEASE]]*.
        -:  808:
        -:  809:**See also**
        -:  810:
        -:  811:- [jerry_string_external_on_free](#jerry_string_external_on_free)
        -:  812:- [jerry_string_external_sz](#jerry_string_external_sz)
        -:  813:- [jerry_string_external](#jerry_string_external)
        -:  814:
        -:  815:## jerry_error_object_created_cb_t
        -:  816:
        -:  817:**Summary**
        -:  818:
        -:  819:Decorator callback for Error objects. This native callback is called every time when an Error
        -:  820:object is created and the decorator can create or update any properties of the newly created
        -:  821:Error object.
        -:  822:
        -:  823:*Note*:
        -:  824: - The callback function cannot be called recursively, so the Error objects created
        -:  825:   when the callback is running are not updated.
        -:  826:
        -:  827:**Prototype**
        -:  828:
        -:  829:```c
        -:  830:typedef void (*jerry_error_object_created_cb_t) (const jerry_value_t error_object, void *user_p);
        -:  831:```
        -:  832:
        -:  833:- `error_object` - the newly created Error object.
        -:  834:- `user_p` - pointer passed to [jerry_error_on_created](#jerry_error_on_created).
        -:  835:
        -:  836:*New in version 2.4*.
        -:  837:
        -:  838:**See also**
        -:  839:
        -:  840:- [jerry_error_on_created](#jerry_error_on_created)
        -:  841:
        -:  842:## jerry_module_state_t
        -:  843:
        -:  844:An enum representing the current status of a module
        -:  845:
        -:  846: - JERRY_MODULE_STATE_INVALID - Return value for jerry_module_state when its argument is not a module
        -:  847: - JERRY_MODULE_STATE_UNLINKED - Module is currently unlinked
        -:  848: - JERRY_MODULE_STATE_LINKING - Module is currently being linked
        -:  849: - JERRY_MODULE_STATE_LINKED - Module has been linked (its dependencies has been resolved)
        -:  850: - JERRY_MODULE_STATE_EVALUATING - Module is currently being evaluated
        -:  851: - JERRY_MODULE_STATE_EVALUATED - Module has been evaluated (its source code has been executed)
        -:  852: - JERRY_MODULE_STATE_ERROR - An exception has been encountered before the evaluated state is reached
        -:  853:
        -:  854:*New in version [[NEXT_RELEASE]]*.
        -:  855:
        -:  856:## jerry_module_resolve_cb_t
        -:  857:
        -:  858:**Summary**
        -:  859:
        -:  860:Callback which is called by [jerry_module_link](#jerry_module_link) to get the referenced module.
        -:  861:
        -:  862:*Note*:
        -:  863: - If realms are enabled, the returned module should be created in the current realm
        -:  864:   (see: [jerry_current_realm](#jerry_current_realm))
        -:  865:
        -:  866:**Prototype**
        -:  867:
        -:  868:```c
        -:  869:typedef jerry_value_t (*jerry_module_resolve_cb_t) (const jerry_value_t specifier,
        -:  870:                                                    const jerry_value_t referrer,
        -:  871:                                                    void *user_p);
        -:  872:```
        -:  873:
        -:  874:- `specifier` - a module specifier string (usually used as a path to the module)
        -:  875:- `referrer` - a module object which contains the `specifier` in its source code
        -:  876:- `user_p` - pointer passed to [jerry_module_link](#jerry_module_link).
        -:  877:- return value
        -:  878:  - a module object - if it can be resolved successfully
        -:  879:  - an exception - otherwise
        -:  880:
        -:  881:*New in version [[NEXT_RELEASE]]*.
        -:  882:
        -:  883:**See also**
        -:  884:- [jerry_module_link](#jerry_module_link)
        -:  885:- [jerry_current_realm](#jerry_current_realm)
        -:  886:
        -:  887:## jerry_module_import_cb_t
        -:  888:
        -:  889:**Summary**
        -:  890:
        -:  891:Callback which is called when an import is resolved dynamically to get the referenced module.
        -:  892:
        -:  893:*Note*:
        -:  894: - If the function returns with a promise, the import call returns with this promise. The
        -:  895:   application should try to resolve the requested module later. If the module is evaluated
        -:  896:   successfully, the returned promise should be resolved with the namespace object of the
        -:  897:   module. Otherwise, the returned promise should be rejected with an exception.
        -:  898: - If the function returns with a resolved module, a promise is created and resolved with the
        -:  899:   namespace object of the module. The import call returns with the resolved promise.
        -:  900: - If the function returns with an exception, a promise is created and rejected with the
        -:  901:   returned exception. The import call returns with the rejected promise.
        -:  902: - All other return values are considered invalid. In this case the import call returns
        -:  903:   with a rejected promise. The rejected promise has a fixed error message, it does not
        -:  904:   specify the reason of the fail.
        -:  905: - If realms are enabled, the returned module should be created in the current realm
        -:  906:   (see: [jerry_current_realm](#jerry_current_realm))
        -:  907:
        -:  908:**Prototype**
        -:  909:
        -:  910:```c
        -:  911:typedef jerry_value_t (*jerry_module_import_cb_t) (const jerry_value_t specifier,
        -:  912:                                                   const jerry_value_t user_value,
        -:  913:                                                   void *user_p);
        -:  914:```
        -:  915:
        -:  916:- `specifier` - a module specifier string (usually used as a path to the module)
        -:  917:- `user_value` - the user value assigned to the script (see [jerry_parse_options_t](#jerry_parse_options_t))
        -:  918:- `user_p` - pointer passed to [jerry_module_on_import](#jerry_module_on_import).
        -:  919:- return value
        -:  920:  - promise or resolved module - if the operation is successful
        -:  921:  - an exception - otherwise
        -:  922:
        -:  923:*New in version [[NEXT_RELEASE]]*.
        -:  924:
        -:  925:**See also**
        -:  926:- [jerry_module_on_import](#jerry_module_on_import)
        -:  927:- [jerry_current_realm](#jerry_current_realm)
        -:  928:
        -:  929:## jerry_module_state_changed_cb_t
        -:  930:
        -:  931:**Summary**
        -:  932:
        -:  933:Callback which is called after the module enters into linked, evaluated or error state.
        -:  934:
        -:  935:**Prototype**
        -:  936:
        -:  937:```c
        -:  938:typedef void (*jerry_module_state_changed_cb_t) (jerry_module_state_t new_state,
        -:  939:                                                 const jerry_value_t module,
        -:  940:                                                 const jerry_value_t value,
        -:  941:                                                 void *user_p);
        -:  942:```
        -:  943:
        -:  944:- `new_state` - new state of the module.
        -:  945:- `module` - a module whose state is changed
        -:  946:- `value` - depends on the state: undefined for linked, module script result for evaluated,
        -:  947:            and exception value for error state.
        -:  948:- `user_p` - pointer passed to [jerry_module_on_state_changed](#jerry_module_on_state_changed).
        -:  949:
        -:  950:*New in version [[NEXT_RELEASE]]*.
        -:  951:
        -:  952:**See also**
        -:  953:- [jerry_module_on_state_changed](#jerry_module_on_state_changed)
        -:  954:
        -:  955:## jerry_module_import_meta_cb_t
        -:  956:
        -:  957:**Summary**
        -:  958:
        -:  959:Callback which is called when an import.meta expression of a module is evaluated the first time.
        -:  960:The object returned by import.meta is passed as the `meta_object` argument to the callback, and
        -:  961:the callback can set the initial status of the object (e.g. add properties or set prototype).
        -:  962:
        -:  963:**Prototype**
        -:  964:
        -:  965:```c
        -:  966:typedef void (*jerry_module_import_meta_cb_t) (const jerry_value_t module,
        -:  967:                                               const jerry_value_t meta_object,
        -:  968:                                               void *user_p);
        -:  969:```
        -:  970:
        -:  971:- `module` - module whose import.meta object is requested.
        -:  972:- `meta_object` - import.meta object created for the module.
        -:  973:- `user_p` - pointer passed to [jerry_module_on_import_meta](#jerry_module_on_import_meta).
        -:  974:
        -:  975:*New in version [[NEXT_RELEASE]]*.
        -:  976:
        -:  977:**See also**
        -:  978:- [jerry_module_on_import_meta](#jerry_module_on_import_meta)
        -:  979:
        -:  980:## jerry_native_module_evaluate_cb_t
        -:  981:
        -:  982:**Summary**
        -:  983:
        -:  984:Callback which is called by [jerry_module_evaluate](#jerry_module_evaluate) to evaluate the native module.
        -:  985:
        -:  986:Note:
        -:  987: - Native pointers can be used to assign private data to a native module,
        -:  988:   see [jerry_object_set_native_ptr](#jerry_object_set_native_ptr)
        -:  989:
        -:  990:**Prototype**
        -:  991:
        -:  992:```c
        -:  993:typedef jerry_value_t (*jerry_native_module_evaluate_cb_t) (const jerry_value_t native_module);
        -:  994:```
        -:  995:
        -:  996:- `native_module` - a native module
        -:  997:- return value
        -:  998:  - any non-exception value - if the module is evaluated successfully
        -:  999:  - an exception - otherwise
        -: 1000:
        -: 1001:*New in version [[NEXT_RELEASE]]*.
        -: 1002:
        -: 1003:**See also**
        -: 1004:- [jerry_module_evaluate](#jerry_module_evaluate)
        -: 1005:
        -: 1006:## jerry_backtrace_cb_t
        -: 1007:
        -: 1008:**Summary**
        -: 1009:
        -: 1010:Callback function which is called by [jerry_backtrace_capture](#jerry_backtrace_capture)
        -: 1011:for each stack frame.
        -: 1012:
        -: 1013:**Prototype**
        -: 1014:
        -: 1015:```c
        -: 1016:typedef bool (*jerry_backtrace_cb_t) (jerry_frame_t *frame_p, void *user_p);
        -: 1017:```
        -: 1018:
        -: 1019:- `frame_p` - pointer to [jerry_frame_t](#jerry_frame_t) data.
        -: 1020:- `user_p` - pointer passed to [jerry_backtrace_capture](#jerry_backtrace_capture).
        -: 1021:- return value
        -: 1022:  - true, to continue capturing more frames
        -: 1023:  - false, to end the stack capturing
        -: 1024:
        -: 1025:*New in version [[NEXT_RELEASE]]*.
        -: 1026:
        -: 1027:**See also**
        -: 1028:
        -: 1029:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -: 1030:- [jerry_frame_t](#jerry_frame_t)
        -: 1031:
        -: 1032:## jerry_object_native_info_t
        -: 1033:
        -: 1034:**Summary**
        -: 1035:
        -: 1036:Type information for native pointers. Since each native pointer has a type information,
        -: 1037:multiple native pointers can be assigned to an object, and these can be updated or
        -: 1038:deleted independently.
        -: 1039:
        -: 1040:The type information has a free callback, which is called when the object is freed
        -: 1041:by the garbage collector. If the callback is NULL, the application is not notified
        -: 1042:about the destruction of the object.
        -: 1043:
        -: 1044:The buffer pointed by the native pointer can have a fixed number of jerry values,
        -: 1045:which refer to other values as long as the object is alive. The starting byte
        -: 1046:offset and the number of these values are specified by `offset_of_references` and
        -: 1047:`number_of_references` fields respectively. Before a buffer is attached to an
        -: 1048:object by [jerry_object_set_native_ptr](#jerry_object_set_native_ptr),
        -: 1049:the values must be initialized to undefined by
        -: 1050:[jerry_native_ptr_init](#jerry_native_ptr_init).
        -: 1051:When a buffer is no longer attached to any object, the
        -: 1052:[jerry_native_ptr_free](#jerry_native_ptr_free)
        -: 1053:must be called to release the values. A single buffer can be attached to any
        -: 1054:number of living objects. When a buffer is currently attached to at least
        -: 1055:one object, the references can be updated by
        -: 1056:[jerry_native_ptr_set](#jerry_native_ptr_set).
        -: 1057:However, if the buffer is no longer attached to an object, the finalize function
        -: 1058:must be called even if the buffer is reattached to another object later. In this
        -: 1059:case, calling the init function after the finalization is optional, because the
        -: 1060:finalize function also initializes all values to undefined.
        -: 1061:
        -: 1062:**Prototype**
        -: 1063:
        -: 1064:```c
        -: 1065:typedef struct
        -: 1066:{
        -: 1067:  jerry_object_native_free_cb_t free_cb; /**< the free callback of the native pointer */
        -: 1068:  uint16_t number_of_references; /**< the number of value references which are marked by the garbage collector */
        -: 1069:  uint16_t offset_of_references; /**< byte offset indicating the start offset of value
        -: 1070:                                  *   references in the user allocated buffer */
        -: 1071:} jerry_object_native_info_t;
        -: 1072:```
        -: 1073:
        -: 1074:*New in version 2.0*.
        -: 1075:
        -: 1076:*Changed in version [[NEXT_RELEASE]]*: Added `number_of_references`, and `offset_of_references` fields.
        -: 1077:
        -: 1078:**See also**
        -: 1079:
        -: 1080:- [jerry_object_set_native_ptr](#jerry_object_set_native_ptr)
        -: 1081:- [jerry_object_get_native_ptr](#jerry_object_get_native_ptr)
        -: 1082:- [jerry_object_delete_native_ptr](#jerry_object_delete_native_ptr)
        -: 1083:- [jerry_native_ptr_init](#jerry_native_ptr_init)
        -: 1084:- [jerry_native_ptr_free](#jerry_native_ptr_free)
        -: 1085:- [jerry_native_ptr_set](#jerry_native_ptr_set)
        -: 1086:
        -: 1087:## jerry_object_property_foreach_cb_t
        -: 1088:
        -: 1089:**Summary**
        -: 1090:
        -: 1091:Function type used as a callback for the [jerry_object_foreach](#jerry_object_foreach)
        -: 1092:method. A function with this type must return "true" to continue the iteration or "false" to finish the
        -: 1093:iteration on the object's properties.
        -: 1094:
        -: 1095:**Prototype**
        -: 1096:
        -: 1097:```c
        -: 1098:typedef bool (*jerry_object_property_foreach_cb_t) (const jerry_value_t property_name,
        -: 1099:                                                    const jerry_value_t property_value,
        -: 1100:                                                    void *user_data_p);
        -: 1101:```
        -: 1102:
        -: 1103:- `property_name` - a property name, this is not always a string.
        -: 1104:- `property_value` - the value for the given property.
        -: 1105:- `user_data_p` - optional user data pointer supplied via the (jerry_object_foreach)[#jerry_object_foreach] method.
        -: 1106:- return value
        -: 1107:  - true, to continue the iteration
        -: 1108:  - false, to stop the iteration
        -: 1109:
        -: 1110:**See also**
        -: 1111:
        -: 1112:- [jerry_object_foreach](#jerry_object_foreach)
        -: 1113:
        -: 1114:## jerry_foreach_live_object_cb_t
        -: 1115:
        -: 1116:**Summary**
        -: 1117:
        -: 1118:Function type used as a callback for the (jerry_foreach_live_object)[#jerry_foreach_live_object] method.
        -: 1119:A function with this type must return "true" to continue the iteration or "false" to finish the
        -: 1120:iteration on the object's properties.
        -: 1121:
        -: 1122:**Prototype**
        -: 1123:
        -: 1124:```c
        -: 1125:typedef bool (*jerry_foreach_live_object_cb_t) (const jerry_value_t object,
        -: 1126:                                                void *user_data_p);
        -: 1127:```
        -: 1128:
        -: 1129:- `object` - the current JavaScript object in the for-each iteration.
        -: 1130:- `user_data_p` - optional user data pointer supplied via the (jerry_foreach_live_object)[#jerry_foreach_live_object] method.
        -: 1131:- return value
        -: 1132:  - true, to continue the iteration
        -: 1133:  - false, to stop the iteration
        -: 1134:
        -: 1135:*New in version 2.0*.
        -: 1136:
        -: 1137:**See also**
        -: 1138:
        -: 1139:- [jerry_foreach_live_object](#jerry_foreach_live_object)
        -: 1140:
        -: 1141:## jerry_foreach_live_object_with_info_cb_t
        -: 1142:
        -: 1143:**Summary**
        -: 1144:
        -: 1145:Function type used as a callback for the (jerry_foreach_live_object_with_info)[#jerry_foreach_live_object_with_info]
        -: 1146:method. A function with this type must return "true" to continue the iteration or "false" to finish the
        -: 1147:iteration on the object's properties.
        -: 1148:
        -: 1149:**Prototype**
        -: 1150:
        -: 1151:```c
        -: 1152:typedef bool (*jerry_foreach_live_object_with_info_cb_t) (const jerry_value_t object,
        -: 1153:                                                          void *object_data_p,
        -: 1154:                                                          void *user_data_p);
        -: 1155:```
        -: 1156:
        -: 1157:- `object` - the current JavaScript object in the for-each iteration.
        -: 1158:- `object_data_p` - the current object's native data pointer.
        -: 1159:- `user_data_p` - optional user data pointer supplied via the (jerry_foreach_live_object_with_info)[#jerry_foreach_live_object_with_info] method.
        -: 1160:- return value
        -: 1161:  - true, to continue the iteration
        -: 1162:  - false, to stop the iteration
        -: 1163:
        -: 1164:*New in version 2.0*.
        -: 1165:
        -: 1166:**See also**
        -: 1167:
        -: 1168:- [jerry_foreach_live_object_with_info](#jerry_foreach_live_object_with_info)
        -: 1169:
        -: 1170:## jerry_halt_cb_t
        -: 1171:
        -: 1172:**Summary**
        -: 1173:
        -: 1174:Callback which is called periodically by the engine, and polls whether the ECMAScript execution should be stopped. If
        -: 1175:the callback returns with an undefined value the ECMAScript execution continues. Otherwise the result is thrown by the
        -: 1176:engine as an exception, and execution returns to the caller. The callback function might be called again even if it
        -: 1177:threw an exception. In this case the function must throw the same exception again.
        -: 1178:
        -: 1179:**Prototype**
        -: 1180:
        -: 1181:```c
        -: 1182:typedef jerry_value_t (*jerry_halt_cb_t) (void *user_p);
        -: 1183:```
        -: 1184:
        -: 1185:*New in version 2.0*.
        -: 1186:
        -: 1187:**See also**
        -: 1188:
        -: 1189:- [jerry_halt_handler](#jerry_halt_handler)
        -: 1190:
        -: 1191:## jerry_throw_cb_t
        -: 1192:
        -: 1193:**Summary**
        -: 1194:
        -: 1195:Callback which is called when a value is thrown in an ECMAScript code. The callback
        -: 1196:should not change the `exception_value`. The callback is not called again until the value
        -: 1197:is caught.
        -: 1198:
        -: 1199:Note:
        -: 1200: - The engine considers exceptions thrown by external functions as never caught. The
        -: 1201:   application can maintain a status flag to ignore the next call of the callback
        -: 1202:   if necessary.
        -: 1203:   See: [jerry_function_external](#jerry_function_external)
        -: 1204:
        -: 1205:**Prototype**
        -: 1206:
        -: 1207:```c
        -: 1208:typedef void (*jerry_throw_cb_t) (const jerry_value_t error_value, void *user_p);
        -: 1209:```
        -: 1210:
        -: 1211:*New in [[NEXT_RELEASE]]*.
        -: 1212:
        -: 1213:**See also**
        -: 1214:
        -: 1215:- [jerry_on_throw](#jerry_on_throw)
        -: 1216:
        -: 1217:## jerry_promise_state_t
        -: 1218:
        -: 1219:Enum which describes the state of a Promise.
        -: 1220:
        -: 1221:Possible values:
        -: 1222:
        -: 1223: - JERRY_PROMISE_STATE_NONE - Invalid/Unknown state (possibly called on a non-promise object).
        -: 1224: - JERRY_PROMISE_STATE_PENDING - Promise is in "Pending" state.
        -: 1225: - JERRY_PROMISE_STATE_FULFILLED - Promise is in "Fulfilled" state.
        -: 1226: - JERRY_PROMISE_STATE_REJECTED - Promise is in "Rejected" state.
        -: 1227:
        -: 1228:*New in version 2.2*.
        -: 1229:
        -: 1230:**See also**
        -: 1231:
        -: 1232:- [jerry_promise_result](#jerry_promise_result)
        -: 1233:
        -: 1234:## jerry_promise_event_type_t
        -: 1235:
        -: 1236:Event types for [jerry_promise_event_cb_t](#jerry_promise_event_cb_t) callback function.
        -: 1237:The description of the `object` and `value` arguments are provided for each type.
        -: 1238:
        -: 1239:Possible values:
        -: 1240:
        -: 1241:- JERRY_PROMISE_EVENT_CREATE - A new Promise object is created.
        -: 1242:  - object - the new Promise object
        -: 1243:  - value - parent Promise for `then` chains, undefined otherwise.
        -: 1244:- JERRY_PROMISE_EVENT_RESOLVE - Called when a Promise is about to be resolved.
        -: 1245:  - object - the Promise object
        -: 1246:  - value - value for resolving.
        -: 1247:- JERRY_PROMISE_EVENT_REJECT - Called when a Promise is about to be rejected.
        -: 1248:  - object - the Promise object
        -: 1249:  - value - value for rejecting.
        -: 1250:- JERRY_PROMISE_EVENT_RESOLVE_FULFILLED - Called when a resolve is called on a fulfilled Promise.
        -: 1251:  - object - the Promise object
        -: 1252:  - value - value for resolving
        -: 1253:- JERRY_PROMISE_EVENT_REJECT_FULFILLED - Called when a reject is called on a fulfilled Promise.
        -: 1254:  - object - the Promise object
        -: 1255:  - value - value for rejecting
        -: 1256:- JERRY_PROMISE_EVENT_REJECT_WITHOUT_HANDLER - Called when a Promise is rejected without a handler.
        -: 1257:  - object - the Promise object
        -: 1258:  - value - value for rejecting
        -: 1259:- JERRY_PROMISE_EVENT_CATCH_HANDLER_ADDED - Called when a catch handler is added to a rejected
        -: 1260:                                            Promise which did not have a catch handler before.
        -: 1261:  - object - the Promise object
        -: 1262:  - value - undefined
        -: 1263:- JERRY_PROMISE_EVENT_BEFORE_REACTION_JOB - Called before executing a Promise reaction job.
        -: 1264:  - object - the Promise object
        -: 1265:  - value - undefined
        -: 1266:- JERRY_PROMISE_EVENT_AFTER_REACTION_JOB - Called after a Promise reaction job is completed.
        -: 1267:  - object - the Promise object
        -: 1268:  - value - undefined
        -: 1269:- JERRY_PROMISE_EVENT_ASYNC_AWAIT - Called when an async function awaits the result of a Promise object.
        -: 1270:  - object - internal object representing the execution status
        -: 1271:  - value - the Promise object
        -: 1272:- JERRY_PROMISE_EVENT_ASYNC_BEFORE_RESOLVE - Called when an async function is continued with resolve.
        -: 1273:  - object - internal object representing the execution status
        -: 1274:  - value - value for resolving
        -: 1275:- JERRY_PROMISE_EVENT_ASYNC_BEFORE_REJECT - Called when an async function is continued with reject.
        -: 1276:  - object - internal object representing the execution status
        -: 1277:  - value - value for rejecting
        -: 1278:- JERRY_PROMISE_EVENT_ASYNC_AFTER_RESOLVE - Called when an async function resolve is completed.
        -: 1279:  - object - internal object representing the execution status
        -: 1280:  - value - value for resolving
        -: 1281:- JERRY_PROMISE_EVENT_ASYNC_AFTER_REJECT - Called when an async function reject is completed.
        -: 1282:  - object - internal object representing the execution status
        -: 1283:  - value - value for rejecting
        -: 1284:
        -: 1285:*New in version [[NEXT_RELEASE]]*.
        -: 1286:
        -: 1287:**See also**
        -: 1288:
        -: 1289:- [jerry_promise_event_cb_t](#jerry_promise_event_cb_t)
        -: 1290:- [jerry_promise_on_event](#jerry_promise_on_event)
        -: 1291:
        -: 1292:
        -: 1293:## jerry_promise_event_filter_t
        -: 1294:
        -: 1295:Filter types for [jerry_promise_on_event](#jerry_promise_on_event) callback function.
        -: 1296:The callback is only called for those events which are enabled by the filters. The events are
        -: 1297:described in [jerry_promise_event_type_t](#jerry_promise_event_type_t).
        -: 1298:
        -: 1299:Possible values:
        -: 1300:
        -: 1301:- JERRY_PROMISE_EVENT_FILTER_DISABLE - Disable reporting of all events.
        -: 1302:- JERRY_PROMISE_EVENT_FILTER_CREATE - Enables the following event:
        -: 1303:  - JERRY_PROMISE_EVENT_CREATE
        -: 1304:- JERRY_PROMISE_EVENT_FILTER_RESOLVE - Enables the following event:
        -: 1305:  - JERRY_PROMISE_EVENT_RESOLVE
        -: 1306:- JERRY_PROMISE_EVENT_FILTER_REJECT - Enables the following event:
        -: 1307:  - JERRY_PROMISE_EVENT_REJECT
        -: 1308:- JERRY_PROMISE_EVENT_FILTER_ERROR - Enables the following events:
        -: 1309:  - JERRY_PROMISE_EVENT_RESOLVE_FULFILLED
        -: 1310:  - JERRY_PROMISE_EVENT_REJECT_FULFILLED
        -: 1311:  - JERRY_PROMISE_EVENT_REJECT_WITHOUT_HANDLER
        -: 1312:  - JERRY_PROMISE_EVENT_CATCH_HANDLER_ADDED
        -: 1313:- JERRY_PROMISE_EVENT_FILTER_REACTION_JOB - Enables the following events:
        -: 1314:  - JERRY_PROMISE_EVENT_BEFORE_REACTION_JOB
        -: 1315:  - JERRY_PROMISE_EVENT_AFTER_REACTION_JOB
        -: 1316:- JERRY_PROMISE_EVENT_FILTER_ASYNC_MAIN - Enables the following events:
        -: 1317:  - JERRY_PROMISE_EVENT_ASYNC_AWAIT
        -: 1318:- JERRY_PROMISE_EVENT_FILTER_ASYNC_REACTION_JOB - Enables the following events:
        -: 1319:  - JERRY_PROMISE_EVENT_ASYNC_BEFORE_RESOLVE
        -: 1320:  - JERRY_PROMISE_EVENT_ASYNC_BEFORE_REJECT
        -: 1321:  - JERRY_PROMISE_EVENT_ASYNC_AFTER_RESOLVE
        -: 1322:  - JERRY_PROMISE_EVENT_ASYNC_AFTER_REJECT
        -: 1323:
        -: 1324:*New in version [[NEXT_RELEASE]]*.
        -: 1325:
        -: 1326:**See also**
        -: 1327:
        -: 1328:- [jerry_promise_event_type_t](#jerry_promise_event_type_t)
        -: 1329:- [jerry_promise_on_event](#jerry_promise_on_event)
        -: 1330:
        -: 1331:
        -: 1332:## jerry_promise_event_cb_t
        -: 1333:
        -: 1334:**Summary**
        -: 1335:
        -: 1336:Notification callback for tracking Promise and async function operations. The arguments
        -: 1337:passed to the callback depends on the `event_type` which is detailed in the
        -: 1338:description of [jerry_promise_event_type_t](#jerry_promise_event_type_t).
        -: 1339:
        -: 1340:**Prototype**
        -: 1341:
        -: 1342:```c
        -: 1343:typedef void (*jerry_promise_event_cb_t) (jerry_promise_event_type_t event_type,
        -: 1344:                                          const jerry_value_t object, const jerry_value_t value,
        -: 1345:                                          void *user_p);
        -: 1346:```
        -: 1347:
        -: 1348:- `event_type` - type of the event notification.
        -: 1349:- `object` - object corresponding to the event.
        -: 1350:- `value` - optional value argument.
        -: 1351:- `user_data_p` - optional user data pointer supplied via the (jerry_promise_on_event)[#jerry_promise_on_event] method.
        -: 1352:
        -: 1353:*New in version [[NEXT_RELEASE]]*.
        -: 1354:
        -: 1355:**See also**
        -: 1356:
        -: 1357:- [jerry_promise_event_type_t](#jerry_promise_event_type_t)
        -: 1358:- [jerry_promise_on_event](#jerry_promise_on_event)
        -: 1359:
        -: 1360:## jerry_typedarray_type_t
        -: 1361:
        -: 1362:Enum which describes the TypedArray types.
        -: 1363:Possible values:
        -: 1364:
        -: 1365: - JERRY_TYPEDARRAY_UINT8 - represents the Uint8Array TypedArray
        -: 1366: - JERRY_TYPEDARRAY_UINT8CLAMPED - represents the Uint8ClampedArray TypedArray
        -: 1367: - JERRY_TYPEDARRAY_INT8 - represents the Int8Array TypedArray
        -: 1368: - JERRY_TYPEDARRAY_UINT16 - represents the Uint16Array TypedArray
        -: 1369: - JERRY_TYPEDARRAY_INT16 - represents the Int16Array TypedArray
        -: 1370: - JERRY_TYPEDARRAY_UINT32 - represents the Uint32Array TypedArray
        -: 1371: - JERRY_TYPEDARRAY_INT32 - represents the Int32Array TypedArray
        -: 1372: - JERRY_TYPEDARRAY_FLOAT32 - represents the Float32Array TypedArray
        -: 1373: - JERRY_TYPEDARRAY_FLOAT64 - represents the Float64Array TypedArray
        -: 1374: - JERRY_TYPEDARRAY_BIGINT64 - represents the BigInt64Array TypedArray
        -: 1375: - JERRY_TYPEDARRAY_BIGUINT64 - represents the BigUint64Array TypedArray
        -: 1376: - JERRY_TYPEDARRAY_INVALID - represents an invalid TypedArray
        -: 1377:
        -: 1378:API functions can return the `JERRY_TYPEDARRAY_INVALID` value if the
        -: 1379:TypedArray support is not in the engine.
        -: 1380:
        -: 1381:*New in version 2.0*.
        -: 1382:
        -: 1383:*Changed in version 2.4*: Added `JERRY_TYPEDARRAY_BIGINT64`, `JERRY_TYPEDARRAY_BIGUINT64` values.
        -: 1384:
        -: 1385:**See also**
        -: 1386:
        -: 1387:- [jerry_typedarray_type](#jerry_typedarray_type)
        -: 1388:
        -: 1389:
        -: 1390:## jerry_exec_snapshot_option_values_t
        -: 1391:
        -: 1392:**Summary**
        -: 1393:
        -: 1394:Various configuration options for [jerry_exec_snapshot](#jerry_exec_snapshot)
        -: 1395:
        -: 1396:**Prototype**
        -: 1397:
        -: 1398:```c
        -: 1399:typedef struct
        -: 1400:{
        -: 1401:  jerry_value_t source_name; /**< source name string (usually a file name)
        -: 1402:                              *   if JERRY_SNAPSHOT_EXEC_HAS_SOURCE_NAME is set in exec_snapshot_opts
        -: 1403:                              *   Note: non-string values are ignored */
        -: 1404:  jerry_value_t user_value; /**< user value assigned to all functions created by this script including
        -: 1405:                             *   eval calls executed by the script if JERRY_SNAPSHOT_EXEC_HAS_USER_VALUE
        -: 1406:                             *   is set in exec_snapshot_opts */
        -: 1407:} jerry_exec_snapshot_option_values_t;
        -: 1408:```
        -: 1409:
        -: 1410:*New in version [[NEXT_RELEASE]]*.
        -: 1411:
        -: 1412:**See also**
        -: 1413:
        -: 1414:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -: 1415:
        -: 1416:## jerry_source_info_enabled_fields_t
        -: 1417:
        -: 1418:Enum which describes the enabled fields of [jerry_source_info_t](#jerry_source_info_t).
        -: 1419:Possible values:
        -: 1420:
        -: 1421: - JERRY_SOURCE_INFO_HAS_SOURCE_CODE - source_code field is valid
        -: 1422: - JERRY_SOURCE_INFO_HAS_FUNCTION_ARGUMENTS - function_arguments field is valid
        -: 1423: - JERRY_SOURCE_INFO_HAS_SOURCE_RANGE - both source_range_start and source_range_length fields are valid
        -: 1424:
        -: 1425:*New in version [[NEXT_RELEASE]]*.
        -: 1426:
        -: 1427:**See also**
        -: 1428:
        -: 1429:- [jerry_source_info_t](#jerry_source_info_t)
        -: 1430:- [jerry_source_info](#jerry_source_info)
        -: 1431:
        -: 1432:## jerry_source_info_t
        -: 1433:
        -: 1434:**Summary**
        -: 1435:
        -: 1436:Source related information of a script/module/function.
        -: 1437:
        -: 1438:**Prototype**
        -: 1439:
        -: 1440:```c
        -: 1441:typedef struct
        -: 1442:{
        -: 1443:  uint32_t enabled_fields; /**< combination of jerry_source_info_enabled_fields_t values */
        -: 1444:  jerry_value_t source_code; /**< script source code or function body */
        -: 1445:  jerry_value_t function_arguments; /**< function arguments */
        -: 1446:  uint32_t source_range_start; /**< start position of the function in the source code */
        -: 1447:  uint32_t source_range_length; /**< source length of the function in the source code */
        -: 1448:} jerry_source_info_t;
        -: 1449:```
        -: 1450:
        -: 1451:*New in version [[NEXT_RELEASE]]*.
        -: 1452:
        -: 1453:**See also**
        -: 1454:
        -: 1455:- [jerry_source_info_enabled_fields_t](#jerry_source_info_enabled_fields_t)
        -: 1456:- [jerry_source_info](#jerry_source_info)
        -: 1457:
        -: 1458:## jerry_arraybuffer_type_t
        -: 1459:
        -: 1460:**Summary**
        -: 1461:
        -: 1462:Enum that contains the JerryScript type of an array buffer:
        -: 1463:
        -: 1464: - JERRY_ARRAYBUFFER_TYPE_ARRAYBUFFER - the object is an array buffer object
        -: 1465: - JERRY_ARRAYBUFFER_TYPE_SHARED_ARRAYBUFFER - the object is a shared array buffer object
        -: 1466:
        -: 1467:*New in version [[NEXT_RELEASE]]*.
        -: 1468:
        -: 1469:**See also**
        -: 1470:
        -: 1471:- [jerry_arraybuffer_allocate_cb_t](#jerry_arraybuffer_allocate_cb_t)
        -: 1472:- [jerry_arraybuffer_free_cb_t](#jerry_arraybuffer_free_cb_t)
        -: 1473:
        -: 1474:## jerry_arraybuffer_allocate_cb_t
        -: 1475:
        -: 1476:**Summary**
        -: 1477:
        -: 1478:Callback for allocating the backing store of array buffer or shared array buffer objects.
        -: 1479:
        -: 1480:*Note*:
        -: 1481:- The value referenced by `arraybuffer_user_p` is always NULL unless the buffer is created by
        -: 1482:  [jerry_arraybuffer_external](#jerry_arraybuffer_external) or
        -: 1483:  [jerry_shared_arraybuffer_external](#jerry_shared_arraybuffer_external).
        -: 1484:  The value referenced by `arraybuffer_user_p` can be changed, and the new value is passed to
        -: 1485:  [jerry_arraybuffer_free_cb_t](#jerry_arraybuffer_free_cb_t).
        -: 1486:
        -: 1487:**Prototype**
        -: 1488:
        -: 1489:```c
        -: 1490:typedef uint8_t *(*jerry_arraybuffer_allocate_cb_t) (jerry_arraybuffer_type_t buffer_type,
        -: 1491:                                                     uint32_t buffer_size,
        -: 1492:                                                     void **arraybuffer_user_p,
        -: 1493:                                                     void *user_p);
        -: 1494:```
        -: 1495:
        -: 1496:- `buffer_type` - type of the array buffer object, see: [jerry_arraybuffer_type_t](#jerry_arraybuffer_type_t).
        -: 1497:- `buffer_size` - size of the requested buffer.
        -: 1498:- `arraybuffer_user_p` - [in/out] user pointer assigned to the array buffer or shared array buffer object.
        -: 1499:- `user_p` - user pointer passed to [jerry_arraybuffer_allocator](#jerry_arraybuffer_allocator)
        -: 1500:- return value
        -: 1501:  - Pointer to the buffer, if the allocation is successful, NULL otherwise.
        -: 1502:
        -: 1503:*New in version [[NEXT_RELEASE]]*.
        -: 1504:
        -: 1505:**See also**
        -: 1506:
        -: 1507:- [jerry_arraybuffer_allocator](#jerry_arraybuffer_allocator)
        -: 1508:
        -: 1509:## jerry_arraybuffer_free_cb_t
        -: 1510:
        -: 1511:**Summary**
        -: 1512:
        -: 1513:Callback for freeing the backing store of array buffer or shared array buffer objects.
        -: 1514:
        -: 1515:*Note*:
        -: 1516:- The value passed to `arraybuffer_user_p` is always NULL unless the buffer is created by
        -: 1517:  [jerry_arraybuffer_external](#jerry_arraybuffer_external) or
        -: 1518:  [jerry_shared_arraybuffer_external](#jerry_shared_arraybuffer_external),
        -: 1519:  or the value is modified by [jerry_arraybuffer_allocate_cb_t](#jerry_arraybuffer_allocate_cb_t).
        -: 1520:
        -: 1521:**Prototype**
        -: 1522:
        -: 1523:```c
        -: 1524:typedef void (*jerry_arraybuffer_free_cb_t) (jerry_arraybuffer_type_t buffer_type,
        -: 1525:                                             uint8_t *buffer_p,
        -: 1526:                                             uint32_t buffer_size,
        -: 1527:                                             void *arraybuffer_user_p,
        -: 1528:                                             void *user_p);
        -: 1529:```
        -: 1530:
        -: 1531:- `buffer_type` - type of the array buffer object, see: [jerry_arraybuffer_type_t](#jerry_arraybuffer_type_t).
        -: 1532:- `buffer_p` - pointer to the allocated buffer.
        -: 1533:- `buffer_size` - size of the allocated buffer.
        -: 1534:- `arraybuffer_user_p` - [in/out] user pointer assigned to the array buffer or shared array buffer object.
        -: 1535:- `user_p` - user pointer passed to [jerry_arraybuffer_allocator](#jerry_arraybuffer_allocator)
        -: 1536:
        -: 1537:*New in version [[NEXT_RELEASE]]*.
        -: 1538:
        -: 1539:**See also**
        -: 1540:
        -: 1541:- [jerry_arraybuffer_allocator](#jerry_arraybuffer_allocator)
        -: 1542:
        -: 1543:
        -: 1544:# General engine functions
        -: 1545:
        -: 1546:## jerry_init
        -: 1547:
        -: 1548:**Summary**
        -: 1549:
        -: 1550:Initializes the JerryScript engine, making it possible to run JavaScript code and perform operations
        -: 1551:on JavaScript values. This is required for almost all API functions.
        -: 1552:
        -: 1553:**Prototype**
        -: 1554:
        -: 1555:```c
        -: 1556:void
        -: 1557:jerry_init (jerry_init_flag_t flags)
        -: 1558:```
        -: 1559:
        -: 1560:`flags` - combination of various engine configuration flags [jerry_init_flag_t](#jerry_init_flag_t).
        -: 1561:
        -: 1562:**Example**
        -: 1563:
        -: 1564:[doctest]: # ()
        -: 1565:
        -: 1566:```c
        -: 1567:#include "jerryscript.h"
        -: 1568:
        -: 1569:int
    #####: 1570:main (void)
        -: 1571:{
    #####: 1572:  jerry_init (JERRY_INIT_SHOW_OPCODES | JERRY_INIT_SHOW_REGEXP_OPCODES);
        -: 1573:
        -: 1574:  // ...
        -: 1575:
    #####: 1576:  jerry_cleanup ();
        -: 1577:  return 0;
        -: 1578:}
        -: 1579:```
        -: 1580:
        -: 1581:**See also**
        -: 1582:
        -: 1583:- [jerry_init_flag_t](#jerry_init_flag_t)
        -: 1584:- [jerry_cleanup](#jerry_cleanup)
        -: 1585:
        -: 1586:
        -: 1587:## jerry_cleanup
        -: 1588:
        -: 1589:**Summary**
        -: 1590:
        -: 1591:Finish JavaScript engine execution, freeing memory and JavaScript values.
        -: 1592:
        -: 1593:*Note*: JavaScript values, received from engine, will be inaccessible after the cleanup.
        -: 1594:
        -: 1595:**Prototype**
        -: 1596:
        -: 1597:```c
        -: 1598:void
        -: 1599:jerry_cleanup (void);
        -: 1600:```
        -: 1601:
        -: 1602:**See also**
        -: 1603:
        -: 1604:- [jerry_init](#jerry_init)
        -: 1605:
        -: 1606:
        -: 1607:## jerry_context_data
        -: 1608:
        -: 1609:**Summary**
        -: 1610:
        -: 1611:Retrieve a pointer to the item stored within the current context by the given manager.
        -: 1612:
        -: 1613:*Note*: Since internally the pointer to a manager's context data item is linked to the next such pointer in a linked
        -: 1614:        list, it is inadvisable to invoke too many different managers, because doing so will increase the time it takes
        -: 1615:        to retrieve a manager's context data item, degrading performance. For example, try to keep the number of
        -: 1616:        managers below five.
        -: 1617:
        -: 1618:**Prototype**
        -: 1619:
        -: 1620:```c
        -: 1621:void *
        -: 1622:jerry_context_data (const jerry_context_data_manager *manager_p);
        -: 1623:```
        -: 1624:
        -: 1625:- `manager_p`: the manager of this context data item.
        -: 1626:- return value: the item created by `manager_p` when `jerry_context_data ()` was first called, or a new item created
        -: 1627:  by `manager_p`, which will be stored for future identical calls to `jerry_context_data ()`, and which will be
        -: 1628:  deinitialized using the `deinit_cb` callback provided by `manager_p` when the context will be destroyed.
        -: 1629:
        -: 1630:*New in version 2.0*.
        -: 1631:
        -: 1632:**Example**
        -: 1633:
        -: 1634:[doctest]: # (test="compile")
        -: 1635:
        -: 1636:```c
        -: 1637:#include "jerryscript.h"
        -: 1638:
        -: 1639:typedef struct
        -: 1640:{
        -: 1641:  int my_data1;
        -: 1642:  double my_data2;
        -: 1643:  char *my_data3;
        -: 1644:} my_context_data_t;
        -: 1645:
        -: 1646:/* Define how context items will be initialized. */
        -: 1647:static void
        -: 1648:my_context_data_new (void *user_data_p)
        -: 1649:{
        -: 1650:  my_context_data_t *my_data_p = (my_context_data_t *) user_data_p;
        -: 1651:
        -: 1652:  /*
        -: 1653:   * Initialize my_data_p. JerryScript will store it on the current context and return it whenever
        -: 1654:   * jerry_context_data () is called with a pointer to my_manager as defined below.
        -: 1655:   */
        -: 1656:}
        -: 1657:
        -: 1658:/* Define how context items will be deinitialized */
        -: 1659:static void
        -: 1660:my_context_data_free (void *user_data_p)
        -: 1661:{
        -: 1662:  my_context_data_t *my_data_p = ((my_context_data_t *) user_data_p);
        -: 1663:
        -: 1664:  /* Perform any necessary cleanup on my_data. JerryScript will free the pointer after this function completes. */
        -: 1665:}
        -: 1666:
        -: 1667:/* Wrap the creation and destruction functions into a manager */
        -: 1668:static const jerry_context_data_manager_t my_manager =
        -: 1669:{
        -: 1670:  .init_cb = my_context_data_new,
        -: 1671:  .deinit_cb = my_context_data_free,
        -: 1672:  .bytes_needed = sizeof (my_context_data_t)
        -: 1673:};
        -: 1674:
        -: 1675:/*
        -: 1676: * Then, in some function in your code, you can retrieve an item of type my_context_data_t from the currently active
        -: 1677: * context such that JerryScript will create and store such an item if one was not previously created
        -: 1678: */
        -: 1679:static void
        -: 1680:someplace_in_the_code (void)
        -: 1681:{
        -: 1682:  my_context_data_t *my_data = (my_context_data_t *) jerry_context_data (&my_manager);
        -: 1683:  /* Perform useful things using the data found in my_data */
        -: 1684:}
        -: 1685:```
        -: 1686:
        -: 1687:
        -: 1688:## jerry_register_magic_strings
        -: 1689:
        -: 1690:**Summary**
        -: 1691:
        -: 1692:Registers an external magic string array.
        -: 1693:
        -: 1694:*Notes*:
        -: 1695:  - The strings in the array must be sorted by size at first, then lexicographically.
        -: 1696:  - The maximum number of external magic strings is limited to 2147483648 (UINT32_MAX / 2).
        -: 1697:    If there are more than 2147483648 external magic strings the extra is cropped.
        -: 1698:
        -: 1699:**Prototype**
        -: 1700:
        -: 1701:```c
        -: 1702:void
        -: 1703:jerry_register_magic_strings (const jerry_char_t * const *ex_str_items_p,
        -: 1704:                              uint32_t count,
        -: 1705:                              const jerry_length_t *str_lengths_p);
        -: 1706:```
        -: 1707:
        -: 1708:- `ex_str_items_p` - character arrays, representing external magic strings' contents
        -: 1709:- `count` - number of elements in `ext_str_items_p` array
        -: 1710:- `str_lengths_p` - array of lengths for each magic string
        -: 1711:
        -: 1712:*Changed in version 2.0*: The first function argument type was changed.
        -: 1713:
        -: 1714:**Example**
        -: 1715:
        -: 1716:[doctest]: # ()
        -: 1717:
        -: 1718:```c
        -: 1719:#include "jerryscript.h"
        -: 1720:
        -: 1721:int
    #####: 1722:main (void)
        -: 1723:{
    #####: 1724:  jerry_init (JERRY_INIT_EMPTY);
        -: 1725:
        -: 1726:  // must be static, because 'jerry_register_magic_strings' does not copy
        -: 1727:  // the items must be sorted by size at first, then lexicographically
        -: 1728:  static const jerry_char_t * const magic_string_items[] = {
        -: 1729:                                                             (const jerry_char_t *) "magicstring1",
        -: 1730:                                                             (const jerry_char_t *) "magicstring2",
        -: 1731:                                                             (const jerry_char_t *) "magicstring3"
        -: 1732:                                                           };
    #####: 1733:  uint32_t num_magic_string_items = (uint32_t) (sizeof (magic_string_items) / sizeof (jerry_char_t *));
        -: 1734:
        -: 1735:  // must be static, because 'jerry_register_magic_strings' does not copy
        -: 1736:  static const jerry_length_t magic_string_lengths[] = {
        -: 1737:                                                         12,
        -: 1738:                                                         12,
        -: 1739:                                                         12
        -: 1740:                                                       };
    #####: 1741:  jerry_register_magic_strings (magic_string_items, num_magic_string_items, magic_string_lengths);
        -: 1742:}
        -: 1743:```
        -: 1744:
        -: 1745:**See also**
        -: 1746:
        -: 1747:- [jerry_init](#jerry_init)
        -: 1748:- [jerry_cleanup](#jerry_cleanup)
        -: 1749:- [jerry_get_literals_from_snapshot](#jerry_get_literals_from_snapshot)
        -: 1750:
        -: 1751:
        -: 1752:## jerry_heap_stats
        -: 1753:
        -: 1754:**Summary**
        -: 1755:
        -: 1756:Get heap memory stats.
        -: 1757:
        -: 1758:**Notes**:
        -: 1759:- The engine must be initialized with the `JERRY_INIT_MEM_STATS` option to allow
        -: 1760:  heap statistic collections. See [jerry_init](#jerry_init)
        -: 1761:- This API depends on a build option (`JERRY_MEM_STATS`) and can be checked
        -: 1762:  in runtime with the `JERRY_FEATURE_HEAP_STATS` feature enum value,
        -: 1763:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 1764:
        -: 1765:
        -: 1766:**Prototype**
        -: 1767:
        -: 1768:```c
        -: 1769:bool
        -: 1770:jerry_heap_stats (jerry_heap_stats_t *out_stats_p);
        -: 1771:```
        -: 1772:
        -: 1773:- `out_stats_p` - out parameter, that provides the heap statistics.
        -: 1774:- return value
        -: 1775:  - true, if stats were written into the `out_stats_p` pointer.
        -: 1776:  - false, otherwise. Usually it is because the `JERRY_FEATURE_HEAP_STATS` feature is not enabled.
        -: 1777:
        -: 1778:*New in version 2.0*.
        -: 1779:
        -: 1780:**Example**
        -: 1781:
        -: 1782:```c
        -: 1783:jerry_init (JERRY_INIT_MEM_STATS);
        -: 1784:// ...
        -: 1785:
        -: 1786:jerry_heap_stats_t stats = {0};
        -: 1787:bool get_stats_ret = jerry_heap_stats (&stats);
        -: 1788:```
        -: 1789:
        -: 1790:**See also**
        -: 1791:
        -: 1792:- [jerry_init](#jerry_init)
        -: 1793:
        -: 1794:
        -: 1795:## jerry_heap_gc
        -: 1796:
        -: 1797:**Summary**
        -: 1798:
        -: 1799:Performs garbage collection.
        -: 1800:
        -: 1801:**Prototype**
        -: 1802:
        -: 1803:```c
        -: 1804:void
        -: 1805:jerry_heap_gc (jerry_gc_mode_t mode);
        -: 1806:```
        -: 1807:
        -: 1808:- `mode` - operational mode, see [jerry_gc_mode_t](#jerry_gc_mode_t)
        -: 1809:
        -: 1810:*Changed in version 2.0*: Added `mode` argument.
        -: 1811:
        -: 1812:**Example**
        -: 1813:
        -: 1814:[doctest]: # ()
        -: 1815:
        -: 1816:```c
        -: 1817:#include "jerryscript.h"
        -: 1818:
        -: 1819:int
    #####: 1820:main (void)
        -: 1821:{
    #####: 1822:  jerry_init (JERRY_INIT_EMPTY);
        -: 1823:
    #####: 1824:  jerry_value_t object_value = jerry_object ();
    #####: 1825:  jerry_value_free (object_value);
        -: 1826:
    #####: 1827:  jerry_heap_gc (JERRY_GC_PRESSURE_LOW);
        -: 1828:
    #####: 1829:  jerry_cleanup ();
        -: 1830:}
        -: 1831:```
        -: 1832:
        -: 1833:**See also**
        -: 1834:
        -: 1835:- [jerry_gc_mode_t](#jerry_gc_mode_t)
        -: 1836:- [jerry_init](#jerry_init)
        -: 1837:- [jerry_cleanup](#jerry_cleanup)
        -: 1838:
        -: 1839:# Parser and executor functions
        -: 1840:
        -: 1841:Functions to parse and run JavaScript source code.
        -: 1842:
        -: 1843:## jerry_parse
        -: 1844:
        -: 1845:**Summary**
        -: 1846:
        -: 1847:Parse a script, module, or function and create a compiled code using a character string.
        -: 1848:
        -: 1849:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 1850:is no longer needed.
        -: 1851:
        -: 1852:**Prototype**
        -: 1853:
        -: 1854:```c
        -: 1855:jerry_value_t
        -: 1856:jerry_parse (const jerry_char_t *source_p,
        -: 1857:             size_t source_size,
        -: 1858:             const jerry_parse_options_t *options_p);
        -: 1859:```
        -: 1860:
        -: 1861:- `source_p` - string, containing source code to parse (must be a valid UTF8 string).
        -: 1862:- `source_size` - size of the string, in bytes.
        -: 1863:- `options_p` - additional parsing options, can be NULL if not used
        -: 1864:- return value
        -: 1865:  - function object value, if script was parsed successfully,
        -: 1866:  - thrown exception, otherwise
        -: 1867:
        -: 1868:*Changed in version 2.0*: Added `source_name_p`, and `source_name_length` arguments.
        -: 1869:
        -: 1870:*Changed in version [[NEXT_RELEASE]]*: The `source_name_p`, `source_name_length`, and `parse_opts` arguments are replaced by `options_p`.
        -: 1871:                                       This function replaces the `jerry_parse_function` method.
        -: 1872:
        -: 1873:**Example 1**
        -: 1874:
        -: 1875:[doctest]: # (name="02.API-REFERENCE-parse-simple.c")
        -: 1876:
        -: 1877:```c
        -: 1878:#include "jerryscript.h"
        -: 1879:
        -: 1880:int
    #####: 1881:main (void)
        -: 1882:{
    #####: 1883:  jerry_init (JERRY_INIT_EMPTY);
        -: 1884:
        -: 1885:  /* Parsing a script. */
    #####: 1886:  const jerry_char_t script[] = "print ('Hello, World!');";
        -: 1887:
        -: 1888:  jerry_parse_options_t parse_options;
    #####: 1889:  parse_options.options = JERRY_PARSE_STRICT_MODE | JERRY_PARSE_HAS_SOURCE_NAME | JERRY_PARSE_HAS_START;
    #####: 1890:  parse_options.source_name = jerry_string_sz ("hello.js");
        -: 1891:  /* This example script is extracted from the middle of a file. */
    #####: 1892:  parse_options.start_line = 10;
    #####: 1893:  parse_options.start_column = 1;
        -: 1894:
    #####: 1895:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 1896:  jerry_value_free (parse_options.source_name);
        -: 1897:
        -: 1898:  /* Run the "parsed_code" script with "jerry_run". */
        -: 1899:
    #####: 1900:  jerry_value_free (jerry_run (parsed_code));
    #####: 1901:  jerry_value_free (parsed_code);
        -: 1902:
    #####: 1903:  jerry_cleanup ();
        -: 1904:  return 0;
        -: 1905:}
        -: 1906:```
        -: 1907:
        -: 1908:**Example - function parsing**
        -: 1909:
        -: 1910:[doctest]: # (name="02.API-REFERENCE-parse-function.c")
        -: 1911:
        -: 1912:```c
        -: 1913:#include "jerryscript.h"
        -: 1914:
        -: 1915:int
    #####: 1916:main (void)
        -: 1917:{
    #####: 1918:  jerry_init (JERRY_INIT_EMPTY);
        -: 1919:
        -: 1920:  /* Specify the argument list to parse a function. */
        -: 1921:  jerry_parse_options_t parse_options;
    #####: 1922:  parse_options.options = JERRY_PARSE_HAS_ARGUMENT_LIST;
    #####: 1923:  parse_options.argument_list = jerry_string_sz ("a, b");
        -: 1924:
    #####: 1925:  const jerry_char_t function_code[] = "return a + b;";
    #####: 1926:  jerry_value_t parsed_function = jerry_parse (function_code, sizeof (function_code) - 1, &parse_options);
    #####: 1927:  jerry_value_free (parse_options.argument_list);
        -: 1928:
        -: 1929:  /* Use the "parsed_function" as a normal JavaScript function. */
        -: 1930:
    #####: 1931:  jerry_value_t args[] = {
    #####: 1932:    jerry_number (3),
    #####: 1933:    jerry_number (4),
        -: 1934:  };
    #####: 1935:  jerry_size_t argc = sizeof (args) / sizeof (args[0]);
    #####: 1936:  jerry_value_t call_result = jerry_call (parsed_function,
        -: 1937:                                          jerry_undefined(),
        -: 1938:                                          args,
        -: 1939:                                          argc);
        -: 1940:
        -: 1941:  /* use the function result */
    #####: 1942:  jerry_value_free (call_result);
    #####: 1943:  jerry_value_free (parsed_function);
        -: 1944:
    #####: 1945:  jerry_cleanup ();
        -: 1946:  return 0;
        -: 1947:}
        -: 1948:```
        -: 1949:
        -: 1950:**See also**
        -: 1951:
        -: 1952:- [jerry_parse_value](#jerry_parse_value)
        -: 1953:- [jerry_run](#jerry_run)
        -: 1954:- [jerry_parse_options_t](#jerry_parse_options_t)
        -: 1955:
        -: 1956:## jerry_parse_value
        -: 1957:
        -: 1958:**Summary**
        -: 1959:
        -: 1960:Parse a script, module, or function and create a compiled code using a string value.
        -: 1961:
        -: 1962:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 1963:is no longer needed.
        -: 1964:
        -: 1965:**Prototype**
        -: 1966:
        -: 1967:```c
        -: 1968:jerry_value_t
        -: 1969:jerry_parse_value (const jerry_value_t source_value,
        -: 1970:                   const jerry_parse_options_t *options_p);
        -: 1971:```
        -: 1972:
        -: 1973:- `source_value` - string value, containing source code to parse (only string values are accepted).
        -: 1974:- `options_p` - additional parsing options, can be NULL if not used
        -: 1975:- return value
        -: 1976:  - function object value, if script was parsed successfully,
        -: 1977:  - thrown exception, otherwise
        -: 1978:
        -: 1979:*New in version [[NEXT_RELEASE]]*.
        -: 1980:
        -: 1981:**Example**
        -: 1982:
        -: 1983:[doctest]: # ()
        -: 1984:
        -: 1985:```c
        -: 1986:#include "jerryscript.h"
        -: 1987:
        -: 1988:int
    #####: 1989:main (void)
        -: 1990:{
    #####: 1991:  jerry_init (JERRY_INIT_EMPTY);
        -: 1992:
    #####: 1993:  jerry_value_t script_value = jerry_string_sz ("print ('Hello, World!');");
        -: 1994:
        -: 1995:  jerry_parse_options_t parse_options;
    #####: 1996:  parse_options.options = JERRY_PARSE_STRICT_MODE | JERRY_PARSE_HAS_SOURCE_NAME | JERRY_PARSE_HAS_START;
    #####: 1997:  parse_options.source_name = jerry_string_sz ("hello.js");
        -: 1998:  /* This example script is extracted from the middle of a file. */
    #####: 1999:  parse_options.start_line = 10;
    #####: 2000:  parse_options.start_column = 1;
        -: 2001:
    #####: 2002:  jerry_value_t parsed_code = jerry_parse_value (script_value, &parse_options);
    #####: 2003:  jerry_value_free (parse_options.source_name);
    #####: 2004:  jerry_value_free (script_value);
    #####: 2005:  jerry_value_free (parsed_code);
        -: 2006:
    #####: 2007:  jerry_cleanup ();
        -: 2008:  return 0;
        -: 2009:}
        -: 2010:```
        -: 2011:
        -: 2012:**See also**
        -: 2013:
        -: 2014:- [jerry_parse](#jerry_parse)
        -: 2015:- [jerry_run](#jerry_run)
        -: 2016:- [jerry_parse_options_t](#jerry_parse_options_t)
        -: 2017:
        -: 2018:## jerry_run
        -: 2019:
        -: 2020:**Summary**
        -: 2021:
        -: 2022:Run a Script or Module created by [jerry_parse](#jerry_parse).
        -: 2023:
        -: 2024:*Notes*:
        -: 2025:  - The code should be previously parsed with `jerry_parse`.
        -: 2026:  - Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 2027:    when it is no longer needed.
        -: 2028:
        -: 2029:**Prototype**
        -: 2030:
        -: 2031:```c
        -: 2032:jerry_value_t
        -: 2033:jerry_run (const jerry_value_t func_val);
        -: 2034:```
        -: 2035:
        -: 2036:- `func_val` - function to run
        -: 2037:- return value
        -: 2038:  - result of bytecode, if run was successful
        -: 2039:  - thrown exception, otherwise
        -: 2040:
        -: 2041:**Example**
        -: 2042:
        -: 2043:[doctest]: # ()
        -: 2044:
        -: 2045:```c
        -: 2046:#include "jerryscript.h"
        -: 2047:
        -: 2048:int
    #####: 2049:main (void)
        -: 2050:{
    #####: 2051:  const jerry_char_t script[] = "print ('Hello, World!');";
        -: 2052:
        -: 2053:  /* Initialize engine */
    #####: 2054:  jerry_init (JERRY_INIT_EMPTY);
        -: 2055:
        -: 2056:  /* Setup Global scope code */
    #####: 2057:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
        -: 2058:
    #####: 2059:  if (!jerry_value_is_exception (parsed_code))
        -: 2060:  {
        -: 2061:    /* Execute the parsed source code in the Global scope */
    #####: 2062:    jerry_value_t ret_value = jerry_run (parsed_code);
        -: 2063:
        -: 2064:    /* Returned value must be freed */
    #####: 2065:    jerry_value_free (ret_value);
        -: 2066:  }
        -: 2067:
        -: 2068:  /* Parsed source code must be freed */
    #####: 2069:  jerry_value_free (parsed_code);
        -: 2070:
        -: 2071:  /* Cleanup engine */
    #####: 2072:  jerry_cleanup ();
        -: 2073:}
        -: 2074:```
        -: 2075:
        -: 2076:**See also**
        -: 2077:
        -: 2078:- [jerry_parse](#jerry_parse)
        -: 2079:
        -: 2080:
        -: 2081:## jerry_eval
        -: 2082:
        -: 2083:**Summary**
        -: 2084:
        -: 2085:Perform JavaScript `eval` function call (ECMA-262 v5.1 sec-15.1.2.1).
        -: 2086:
        -: 2087:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 2088:is no longer needed.
        -: 2089:
        -: 2090:**Prototype**
        -: 2091:
        -: 2092:```c
        -: 2093:jerry_value_t
        -: 2094:jerry_eval (const jerry_char_t *source_p,
        -: 2095:            size_t source_size,
        -: 2096:            uint32_t parse_opts);
        -: 2097:```
        -: 2098:
        -: 2099:- `source_p` - source code to evaluate, it must be a valid utf8 string.
        -: 2100:- `source_size` - length of the source code
        -: 2101:- `parse_opts` - combination of [jerry_parse_option_enable_feature_t](#jerry_parse_option_enable_feature_t) flags.
        -: 2102:                 The following flags are allowed: JERRY_PARSE_STRICT_MODE
        -: 2103:- return value - result of eval, may be an exception value.
        -: 2104:
        -: 2105:**Example**
        -: 2106:
        -: 2107:```c
        -: 2108:{
        -: 2109:  jerry_value_t ret_val = jerry_eval (str_to_eval,
        -: 2110:                                      strlen (str_to_eval),
        -: 2111:                                      JERRY_PARSE_NO_OPTS);
        -: 2112:}
        -: 2113:```
        -: 2114:
        -: 2115:**See also**
        -: 2116:
        -: 2117:- [jerry_function_external](#jerry_function_external)
        -: 2118:- [jerry_external_handler_t](#jerry_external_handler_t)
        -: 2119:
        -: 2120:## jerry_run_jobs
        -: 2121:
        -: 2122:**Summary**
        -: 2123:
        -: 2124:Run enqueued Promise tasks until the first thrown exception or until all tasks get executed.
        -: 2125:
        -: 2126:*Important Note*: The task queue is not guaranteed to be empty after the function call has returned a value.
        -: 2127:Therefore, this function is best used in a while loop, handling each exception it returns, until the queue is empty.
        -: 2128:
        -: 2129:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 2130:is no longer needed.
        -: 2131:
        -: 2132:**Prototype**
        -: 2133:
        -: 2134:```c
        -: 2135:jerry_value_t
        -: 2136:jerry_run_jobs (void)
        -: 2137:```
        -: 2138:
        -: 2139:- return value - result of last executed job, may be an exception value.
        -: 2140:
        -: 2141:*New in version 2.0*.
        -: 2142:
        -: 2143:**Example**
        -: 2144:
        -: 2145:[doctest]: # ()
        -: 2146:
        -: 2147:```c
        -: 2148:#include "jerryscript.h"
        -: 2149:
        -: 2150:int
    #####: 2151:main (void)
        -: 2152:{
    #####: 2153:  jerry_init (JERRY_INIT_EMPTY);
        -: 2154:
    #####: 2155:  const jerry_char_t script[] = "new Promise(function(f,r) { f('Hello, World!'); }).then(function(x) { print(x); });";
        -: 2156:
    #####: 2157:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
    #####: 2158:  jerry_value_t script_value = jerry_run (parsed_code);
        -: 2159:
        -: 2160:  jerry_value_t job_value;
        -: 2161:  while (true)
        -: 2162:  {
    #####: 2163:    job_value = jerry_run_jobs ();
        -: 2164:
    #####: 2165:    if (jerry_value_is_exception (job_value))
        -: 2166:    {
    #####: 2167:      if (jerry_value_is_abort (job_value))
        -: 2168:      {
        -: 2169:        // Terminate the engine
        -: 2170:      }
        -: 2171:
        -: 2172:      // Handle the exception here
        -: 2173:    }
        -: 2174:    else
        -: 2175:    {
        -: 2176:      // The queue should be empty now
        -: 2177:      break;
        -: 2178:    }
        -: 2179:  }
        -: 2180:
    #####: 2181:  jerry_value_free (job_value);
    #####: 2182:  jerry_value_free (script_value);
    #####: 2183:  jerry_value_free (parsed_code);
        -: 2184:
    #####: 2185:  jerry_cleanup ();
        -: 2186:  return 0;
        -: 2187:}
        -: 2188:```
        -: 2189:
        -: 2190:
        -: 2191:# Get the global context
        -: 2192:
        -: 2193:## jerry_current_realm
        -: 2194:
        -: 2195:**Summary**
        -: 2196:
        -: 2197:Get the Global object.
        -: 2198:
        -: 2199:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 2200:is no longer needed.
        -: 2201:
        -: 2202:**Prototype**
        -: 2203:
        -: 2204:```c
        -: 2205:jerry_value_t
        -: 2206:jerry_current_realm (void);
        -: 2207:```
        -: 2208:
        -: 2209:- return value - api value of global object
        -: 2210:
        -: 2211:**Example**
        -: 2212:
        -: 2213:```c
        -: 2214:{
        -: 2215:  jerry_value_t glob_obj_val = jerry_current_realm ();
        -: 2216:
        -: 2217:  ... // Do something with global object, ex: add properties
        -: 2218:
        -: 2219:  jerry_value_free (glob_obj_val);
        -: 2220:}
        -: 2221:```
        -: 2222:
        -: 2223:**See also**
        -: 2224:
        -: 2225:- [jerry_value_free](#jerry_value_free)
        -: 2226:- [jerry_object_define_own_prop](#jerry_object_define_own_prop)
        -: 2227:
        -: 2228:
        -: 2229:# Checker functions
        -: 2230:
        -: 2231:Functions to check the type of an API value ([jerry_value_t](#jerry_value_t)).
        -: 2232:
        -: 2233:## jerry_value_is_abort
        -: 2234:
        -: 2235:**Summary**
        -: 2236:
        -: 2237:Returns whether the given `jerry_value_t` is an abort exception value.
        -: 2238:
        -: 2239:**Prototype**
        -: 2240:
        -: 2241:```c
        -: 2242:bool
        -: 2243:jerry_value_is_abort (const jerry_value_t value);
        -: 2244:```
        -: 2245:
        -: 2246:- `value` - api value
        -: 2247:- return value
        -: 2248:  - true, if the given `jerry_value_t` is an abort exception
        -: 2249:  - false, otherwise
        -: 2250:
        -: 2251:*New in version 2.0*.
        -: 2252:
        -: 2253:**Example**
        -: 2254:
        -: 2255:```c
        -: 2256:{
        -: 2257:  jerry_value_t value;
        -: 2258:  ... // create or copy value
        -: 2259:
        -: 2260:  if (jerry_value_is_abort (value))
        -: 2261:  {
        -: 2262:    ...
        -: 2263:  }
        -: 2264:
        -: 2265:  jerry_value_free (value);
        -: 2266:}
        -: 2267:```
        -: 2268:
        -: 2269:**See also**
        -: 2270:
        -: 2271:- [jerry_value_t](#jerry_value_t)
        -: 2272:- [jerry_value_is_exception](#jerry_value_is_exception)
        -: 2273:
        -: 2274:## jerry_value_is_array
        -: 2275:
        -: 2276:**Summary**
        -: 2277:
        -: 2278:Returns whether the given `jerry_value_t` is an array.
        -: 2279:
        -: 2280:**Prototype**
        -: 2281:
        -: 2282:```c
        -: 2283:bool
        -: 2284:jerry_value_is_array (const jerry_value_t value)
        -: 2285:```
        -: 2286:
        -: 2287:- `value` - api value
        -: 2288:- return value
        -: 2289:  - true, if the given `jerry_value_t` is an array
        -: 2290:  - false, otherwise
        -: 2291:
        -: 2292:**Example**
        -: 2293:
        -: 2294:```c
        -: 2295:{
        -: 2296:  jerry_value_t value;
        -: 2297:  ... // create or copy value
        -: 2298:
        -: 2299:  if (jerry_value_is_array (value))
        -: 2300:  {
        -: 2301:    ...
        -: 2302:  }
        -: 2303:
        -: 2304:  jerry_value_free (value);
        -: 2305:}
        -: 2306:```
        -: 2307:
        -: 2308:**See also**
        -: 2309:
        -: 2310:- [jerry_value_free](#jerry_value_free)
        -: 2311:
        -: 2312:## jerry_value_is_arraybuffer
        -: 2313:
        -: 2314:**Summary**
        -: 2315:
        -: 2316:Returns whether the given `jerry_value_t` is an ArrayBuffer object.
        -: 2317:
        -: 2318:*Notes*:
        -: 2319:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 2320:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 2321:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 2322:- The es.next profile enables this by default.
        -: 2323:
        -: 2324:**Prototype**
        -: 2325:
        -: 2326:```c
        -: 2327:bool
        -: 2328:jerry_value_is_arraybuffer (const jerry_value_t value)
        -: 2329:```
        -: 2330:
        -: 2331:- `value` - api value to check.
        -: 2332:- return value
        -: 2333:  - true, if the given `jerry_value_t` is an ArrayBuffer object.
        -: 2334:  - false, otherwise
        -: 2335:
        -: 2336:*New in version 2.0*.
        -: 2337:
        -: 2338:**Example**
        -: 2339:
        -: 2340:```c
        -: 2341:{
        -: 2342:  jerry_value_t value;
        -: 2343:  ... // create or copy value
        -: 2344:
        -: 2345:  if (jerry_value_is_arraybuffer (value))
        -: 2346:  {
        -: 2347:    ...
        -: 2348:  }
        -: 2349:
        -: 2350:  jerry_value_free (value);
        -: 2351:}
        -: 2352:```
        -: 2353:
        -: 2354:**See also**
        -: 2355:
        -: 2356:- [jerry_arraybuffer](#jerry_arraybuffer)
        -: 2357:- [jerry_arraybuffer_external](#jerry_arraybuffer_external)
        -: 2358:
        -: 2359:## jerry_value_is_shared_arraybuffer
        -: 2360:
        -: 2361:**Summary**
        -: 2362:
        -: 2363:Returns whether the given `jerry_value_t` is a SharedArrayBuffer object.
        -: 2364:
        -: 2365:*Notes*:
        -: 2366:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 2367:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 2368:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 2369:- The es.next profile enables this by default.
        -: 2370:
        -: 2371:**Prototype**
        -: 2372:
        -: 2373:```c
        -: 2374:bool
        -: 2375:jerry_value_is_shared_arraybuffer (const jerry_value_t value);
        -: 2376:```
        -: 2377:
        -: 2378:- `value` - api value to check.
        -: 2379:- return value
        -: 2380:    - true, if the given `jerry_value_t` is a SharedArrayBuffer object.
        -: 2381:    - false, otherwise
        -: 2382:
        -: 2383:*New in version [[NEXT_RELEASE]]*.
        -: 2384:
        -: 2385:**Example**
        -: 2386:
        -: 2387:```c
        -: 2388:{
        -: 2389:  jerry_value_t value;
        -: 2390:  ... // create or copy value
        -: 2391:
        -: 2392:  if (jerry_value_is_shared_arraybuffer (value))
        -: 2393:  {
        -: 2394:    ...
        -: 2395:  }
        -: 2396:
        -: 2397:  jerry_value_free (value);
        -: 2398:}
        -: 2399:```
        -: 2400:
        -: 2401:**See also**
        -: 2402:
        -: 2403:- [jerry_shared_arraybuffer](#jerry_shared_arraybuffer)
        -: 2404:- [jerry_shared_arraybuffer_external](#jerry_shared_arraybuffer_external)
        -: 2405:
        -: 2406:
        -: 2407:## jerry_value_is_boolean
        -: 2408:
        -: 2409:**Summary**
        -: 2410:
        -: 2411:Returns whether the given `jerry_value_t` is a boolean value.
        -: 2412:
        -: 2413:**Prototype**
        -: 2414:
        -: 2415:```c
        -: 2416:bool
        -: 2417:jerry_value_is_boolean (const jerry_value_t value)
        -: 2418:```
        -: 2419:
        -: 2420:- `value` - api value
        -: 2421:- return value
        -: 2422:  - true, if the given `jerry_value_t` is a boolean value
        -: 2423:  - false, otherwise
        -: 2424:
        -: 2425:**Example**
        -: 2426:
        -: 2427:```c
        -: 2428:{
        -: 2429:  jerry_value_t value;
        -: 2430:  ... // create or copy value
        -: 2431:
        -: 2432:  if (jerry_value_is_boolean (value))
        -: 2433:  {
        -: 2434:    ...
        -: 2435:  }
        -: 2436:
        -: 2437:  jerry_value_free (value);
        -: 2438:}
        -: 2439:```
        -: 2440:
        -: 2441:**See also**
        -: 2442:
        -: 2443:- [jerry_value_free](#jerry_value_free)
        -: 2444:
        -: 2445:## jerry_value_is_true
        -: 2446:
        -: 2447:**Summary**
        -: 2448:
        -: 2449:Returns whether the given `jerry_value_t` is a true value.
        -: 2450:
        -: 2451:**Prototype**
        -: 2452:
        -: 2453:```c
        -: 2454:bool
        -: 2455:jerry_value_is_true (const jerry_value_t value);
        -: 2456:```
        -: 2457:
        -: 2458:- `value` - api value
        -: 2459:- return value
        -: 2460:    - true, if the given `jerry_value_t` is true value
        -: 2461:    - false, otherwise
        -: 2462:
        -: 2463:*New in version [[NEXT_RELEASE]]*. Replaces the `jerry_get_boolean_value` method.
        -: 2464:
        -: 2465:**Example**
        -: 2466:
        -: 2467:```c
        -: 2468:{
        -: 2469:  jerry_value_t value;
        -: 2470:  ... // create or copy value
        -: 2471:
        -: 2472:  if (jerry_value_is_true (value))
        -: 2473:  {
        -: 2474:    ...
        -: 2475:  }
        -: 2476:
        -: 2477:  jerry_value_free (value);
        -: 2478:}
        -: 2479:```
        -: 2480:
        -: 2481:**See also**
        -: 2482:
        -: 2483:- [jerry_value_free](#jerry_value_free)
        -: 2484:
        -: 2485:## jerry_value_is_false
        -: 2486:
        -: 2487:**Summary**
        -: 2488:
        -: 2489:Returns whether the given `jerry_value_t` is a false value.
        -: 2490:
        -: 2491:**Prototype**
        -: 2492:
        -: 2493:```c
        -: 2494:bool
        -: 2495:jerry_value_is_false (const jerry_value_t value);
        -: 2496:```
        -: 2497:
        -: 2498:- `value` - api value
        -: 2499:- return value
        -: 2500:    - true, if the given `jerry_value_t` is false value
        -: 2501:    - false, otherwise
        -: 2502:
        -: 2503:*New in version [[NEXT_RELEASE]]*.
        -: 2504:
        -: 2505:**Example**
        -: 2506:
        -: 2507:```c
        -: 2508:{
        -: 2509:  jerry_value_t value;
        -: 2510:  ... // create or copy value
        -: 2511:
        -: 2512:  if (jerry_value_is_false (value))
        -: 2513:  {
        -: 2514:    ...
        -: 2515:  }
        -: 2516:
        -: 2517:  jerry_value_free (value);
        -: 2518:}
        -: 2519:```
        -: 2520:
        -: 2521:**See also**
        -: 2522:
        -: 2523:- [jerry_value_free](#jerry_value_free)
        -: 2524:
        -: 2525:## jerry_value_is_constructor
        -: 2526:
        -: 2527:**Summary**
        -: 2528:
        -: 2529:Returns whether the given `jerry_value_t` is a constructor function.
        -: 2530:
        -: 2531:**Prototype**
        -: 2532:
        -: 2533:```c
        -: 2534:bool
        -: 2535:jerry_value_is_constructor (const jerry_value_t value)
        -: 2536:```
        -: 2537:
        -: 2538:- `value` - api value
        -: 2539:- return value
        -: 2540:  - true, if the given `jerry_value_t` is a constructor
        -: 2541:  - false, otherwise
        -: 2542:
        -: 2543:**Example**
        -: 2544:
        -: 2545:```c
        -: 2546:{
        -: 2547:  jerry_value_t value;
        -: 2548:  ... // create or copy value
        -: 2549:
        -: 2550:  if (jerry_value_is_constructor (value))
        -: 2551:  {
        -: 2552:    ...
        -: 2553:  }
        -: 2554:
        -: 2555:  jerry_value_free (value);
        -: 2556:}
        -: 2557:```
        -: 2558:
        -: 2559:**See also**
        -: 2560:
        -: 2561:- [jerry_value_free](#jerry_value_free)
        -: 2562:
        -: 2563:## jerry_value_is_dataview
        -: 2564:
        -: 2565:**Summary**
        -: 2566:
        -: 2567:Returns whether the given `jerry_value_t` is a DataView object value.
        -: 2568:
        -: 2569:*Notes*:
        -: 2570:- This API depends on a build option (`JERRY_BUILTIN_DATAVIEW`) and can be checked
        -: 2571:  in runtime with the `JERRY_FEATURE_DATAVIEW` feature enum value,
        -: 2572:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 2573:- The es.next profile enables this by default.
        -: 2574:
        -: 2575:**Prototype**
        -: 2576:
        -: 2577:```c
        -: 2578:bool
        -: 2579:jerry_value_is_dataview (const jerry_value_t value)
        -: 2580:```
        -: 2581:
        -: 2582:- `value` - API value
        -: 2583:- return value
        -: 2584:  - true, if the given `jerry_value_t` is a DataView object
        -: 2585:  - false, otherwise
        -: 2586:
        -: 2587:*New in version 2.0*.
        -: 2588:
        -: 2589:**Example**
        -: 2590:
        -: 2591:[doctest]: # ()
        -: 2592:
        -: 2593:```c
        -: 2594:#include "jerryscript.h"
        -: 2595:
        -: 2596:int
    #####: 2597:main (void)
        -: 2598:{
    #####: 2599:  jerry_init (JERRY_INIT_EMPTY);
        -: 2600:
    #####: 2601:  jerry_value_t arraybuffer = jerry_arraybuffer (16);
    #####: 2602:  jerry_value_t dataview = jerry_dataview (arraybuffer, 0, 16);
        -: 2603:
    #####: 2604:  if (jerry_value_is_dataview (dataview))
        -: 2605:  {
        -: 2606:    // usage of dataview
        -: 2607:  }
        -: 2608:
    #####: 2609:  jerry_value_free (dataview);
    #####: 2610:  jerry_value_free (arraybuffer);
        -: 2611:
    #####: 2612:  jerry_cleanup ();
        -: 2613:  return 0;
        -: 2614:}
        -: 2615:```
        -: 2616:
        -: 2617:**See also**
        -: 2618:
        -: 2619:- [jerry_value_free](#jerry_value_free)
        -: 2620:- [jerry_dataview](#jerry_dataview)
        -: 2621:
        -: 2622:
        -: 2623:## jerry_value_is_exception
        -: 2624:
        -: 2625:**Summary**
        -: 2626:
        -: 2627:Returns whether the given `jerry_value_t` is an exception value.
        -: 2628:
        -: 2629:**Prototype**
        -: 2630:
        -: 2631:```c
        -: 2632:bool
        -: 2633:jerry_value_is_exception (const jerry_value_t value);
        -: 2634:```
        -: 2635:
        -: 2636:- `value` - api value
        -: 2637:- return value
        -: 2638:  - true, if the given `jerry_value_t` is an exception value.
        -: 2639:  - false, otherwise
        -: 2640:
        -: 2641:*New in version 2.0*.
        -: 2642:
        -: 2643:**Example**
        -: 2644:
        -: 2645:```c
        -: 2646:{
        -: 2647:  jerry_value_t value;
        -: 2648:  ... // create or copy value
        -: 2649:
        -: 2650:  if (jerry_value_is_exception (value))
        -: 2651:  {
        -: 2652:    ...
        -: 2653:  }
        -: 2654:
        -: 2655:  jerry_value_free (value);
        -: 2656:}
        -: 2657:```
        -: 2658:
        -: 2659:**See also**
        -: 2660:
        -: 2661:- [jerry_value_t](#jerry_value_t)
        -: 2662:- [jerry_value_is_abort](#jerry_value_is_abort)
        -: 2663:
        -: 2664:## jerry_value_is_function
        -: 2665:
        -: 2666:**Summary**
        -: 2667:
        -: 2668:Returns whether the given `jerry_value_t` is a function.
        -: 2669:
        -: 2670:**Prototype**
        -: 2671:
        -: 2672:```c
        -: 2673:bool
        -: 2674:jerry_value_is_function (const jerry_value_t value)
        -: 2675:```
        -: 2676:
        -: 2677:- `value` - api value
        -: 2678:- return value
        -: 2679:  - true, if the given `jerry_value_t` is a function
        -: 2680:  - false, otherwise
        -: 2681:
        -: 2682:**Example**
        -: 2683:
        -: 2684:```c
        -: 2685:{
        -: 2686:  jerry_value_t value;
        -: 2687:  ... // create or copy value
        -: 2688:
        -: 2689:  if (jerry_value_is_function (value))
        -: 2690:  {
        -: 2691:    ...
        -: 2692:  }
        -: 2693:
        -: 2694:  jerry_value_free (value);
        -: 2695:}
        -: 2696:```
        -: 2697:
        -: 2698:**See also**
        -: 2699:
        -: 2700:- [jerry_value_free](#jerry_value_free)
        -: 2701:
        -: 2702:
        -: 2703:## jerry_value_is_async_function
        -: 2704:
        -: 2705:**Summary**
        -: 2706:
        -: 2707:Returns whether the given `jerry_value_t` is an async function.
        -: 2708:
        -: 2709:**Prototype**
        -: 2710:
        -: 2711:```c
        -: 2712:bool
        -: 2713:jerry_value_is_async_function (const jerry_value_t value)
        -: 2714:```
        -: 2715:
        -: 2716:- `value` - api value
        -: 2717:- return value
        -: 2718:  - true, if the given `jerry_value_t` is an async function
        -: 2719:  - false, otherwise
        -: 2720:
        -: 2721:*New in version 2.4*.
        -: 2722:
        -: 2723:**Example**
        -: 2724:
        -: 2725:```c
        -: 2726:{
        -: 2727:  jerry_value_t value;
        -: 2728:  ... // create or copy value
        -: 2729:
        -: 2730:  if (jerry_value_is_async_function (value))
        -: 2731:  {
        -: 2732:    ...
        -: 2733:  }
        -: 2734:
        -: 2735:  jerry_value_free (value);
        -: 2736:}
        -: 2737:```
        -: 2738:
        -: 2739:**See also**
        -: 2740:
        -: 2741:- [jerry_value_free](#jerry_value_free)
        -: 2742:
        -: 2743:## jerry_value_is_number
        -: 2744:
        -: 2745:**Summary**
        -: 2746:
        -: 2747:Returns whether the given `jerry_value_t` is a number.
        -: 2748:
        -: 2749:**Prototype**
        -: 2750:
        -: 2751:```c
        -: 2752:bool
        -: 2753:jerry_value_is_number (const jerry_value_t value)
        -: 2754:```
        -: 2755:
        -: 2756:- `value` - api value
        -: 2757:- return value
        -: 2758:  - true, if the given `jerry_value_t` is a number
        -: 2759:  - false, otherwise
        -: 2760:
        -: 2761:**Example**
        -: 2762:
        -: 2763:```c
        -: 2764:{
        -: 2765:  jerry_value_t value;
        -: 2766:  ... // create or copy value
        -: 2767:
        -: 2768:  if (jerry_value_is_number (value))
        -: 2769:  {
        -: 2770:    ...
        -: 2771:  }
        -: 2772:
        -: 2773:  jerry_value_free (value);
        -: 2774:}
        -: 2775:```
        -: 2776:
        -: 2777:**See also**
        -: 2778:
        -: 2779:- [jerry_value_free](#jerry_value_free)
        -: 2780:
        -: 2781:
        -: 2782:## jerry_value_is_null
        -: 2783:
        -: 2784:**Summary**
        -: 2785:
        -: 2786:Returns whether the given `jerry_value_t` is a null value.
        -: 2787:
        -: 2788:**Prototype**
        -: 2789:
        -: 2790:```c
        -: 2791:bool
        -: 2792:jerry_value_is_null (const jerry_value_t value)
        -: 2793:```
        -: 2794:
        -: 2795:- `value` - api value
        -: 2796:- return value
        -: 2797:  - true, if the given `jerry_value_t` is a null
        -: 2798:  - false, otherwise
        -: 2799:
        -: 2800:**Example**
        -: 2801:
        -: 2802:```c
        -: 2803:{
        -: 2804:  jerry_value_t value;
        -: 2805:  ... // create or copy value
        -: 2806:
        -: 2807:  if (jerry_value_is_null (value))
        -: 2808:  {
        -: 2809:    ...
        -: 2810:  }
        -: 2811:
        -: 2812:  jerry_value_free (value);
        -: 2813:}
        -: 2814:```
        -: 2815:
        -: 2816:**See also**
        -: 2817:
        -: 2818:- [jerry_value_free](#jerry_value_free)
        -: 2819:
        -: 2820:
        -: 2821:## jerry_value_is_object
        -: 2822:
        -: 2823:**Summary**
        -: 2824:
        -: 2825:Returns whether the given `jerry_value_t` is an object value.
        -: 2826:
        -: 2827:**Prototype**
        -: 2828:
        -: 2829:```c
        -: 2830:bool
        -: 2831:jerry_value_is_object (const jerry_value_t value)
        -: 2832:```
        -: 2833:
        -: 2834:- `value` - api value
        -: 2835:- return value
        -: 2836:  - true, if the given `jerry_value_t` is an object
        -: 2837:  - false, otherwise
        -: 2838:
        -: 2839:**Example**
        -: 2840:
        -: 2841:```c
        -: 2842:{
        -: 2843:  jerry_value_t value;
        -: 2844:  ... // create or copy value
        -: 2845:
        -: 2846:  if (jerry_value_is_object (value))
        -: 2847:  {
        -: 2848:    ...
        -: 2849:  }
        -: 2850:
        -: 2851:  jerry_value_free (value);
        -: 2852:}
        -: 2853:```
        -: 2854:
        -: 2855:**See also**
        -: 2856:
        -: 2857:- [jerry_value_free](#jerry_value_free)
        -: 2858:
        -: 2859:
        -: 2860:## jerry_value_is_promise
        -: 2861:
        -: 2862:**Summary**
        -: 2863:
        -: 2864:Returns whether the given `jerry_value_t` is a promise value.
        -: 2865:
        -: 2866:*Notes*:
        -: 2867:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 2868:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 2869:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 2870:- The es.next profile enables this by default.
        -: 2871:
        -: 2872:
        -: 2873:**Prototype**
        -: 2874:
        -: 2875:```c
        -: 2876:bool
        -: 2877:jerry_value_is_promise (const jerry_value_t value)
        -: 2878:```
        -: 2879:
        -: 2880:- `value` - api value
        -: 2881:- return value
        -: 2882:  - true, if the given `jerry_value_t` is a promise
        -: 2883:  - false, otherwise
        -: 2884:
        -: 2885:*New in version 2.0*.
        -: 2886:
        -: 2887:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 2888:
        -: 2889:**Example**
        -: 2890:
        -: 2891:```c
        -: 2892:{
        -: 2893:  jerry_value_t value;
        -: 2894:  ... // create or copy value
        -: 2895:
        -: 2896:  if (jerry_value_is_promise (value))
        -: 2897:  {
        -: 2898:    ...
        -: 2899:  }
        -: 2900:
        -: 2901:  jerry_value_free (value);
        -: 2902:}
        -: 2903:```
        -: 2904:
        -: 2905:**See also**
        -: 2906:
        -: 2907:- [jerry_value_free](#jerry_value_free)
        -: 2908:- [jerry_promise](#jerry_promise)
        -: 2909:
        -: 2910:
        -: 2911:## jerry_value_is_proxy
        -: 2912:
        -: 2913:**Summary**
        -: 2914:
        -: 2915:Returns whether the given `jerry_value_t` is a proxy value.
        -: 2916:
        -: 2917:*Notes*:
        -: 2918:- This API depends on a build option (`JERRY_BUILTIN_PROXY`) and can be checked
        -: 2919:  in runtime with the `JERRY_FEATURE_PROXY` feature enum value,
        -: 2920:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 2921:- The es.next profile enables this by default.
        -: 2922:
        -: 2923:
        -: 2924:**Prototype**
        -: 2925:
        -: 2926:```c
        -: 2927:bool
        -: 2928:jerry_value_is_proxy (const jerry_value_t value)
        -: 2929:```
        -: 2930:
        -: 2931:- `value` - api value
        -: 2932:- return value
        -: 2933:  - true, if the given `jerry_value_t` is a proxy object
        -: 2934:  - false, otherwise
        -: 2935:
        -: 2936:*New in version 2.3*.
        -: 2937:
        -: 2938:**Example**
        -: 2939:
        -: 2940:```c
        -: 2941:{
        -: 2942:  jerry_value_t value;
        -: 2943:  ... // create or copy value
        -: 2944:
        -: 2945:  if (jerry_value_is_proxy (value))
        -: 2946:  {
        -: 2947:    ...
        -: 2948:  }
        -: 2949:
        -: 2950:  jerry_value_free (value);
        -: 2951:}
        -: 2952:```
        -: 2953:
        -: 2954:**See also**
        -: 2955:
        -: 2956:- [jerry_value_free](#jerry_value_free)
        -: 2957:- [jerry_proxy](#jerry_proxy)
        -: 2958:- [jerry_proxy_custom](#jerry_proxy_custom)
        -: 2959:
        -: 2960:
        -: 2961:## jerry_value_is_string
        -: 2962:
        -: 2963:**Summary**
        -: 2964:
        -: 2965:Returns whether the given `jerry_value_t` is a string value.
        -: 2966:
        -: 2967:**Prototype**
        -: 2968:
        -: 2969:```c
        -: 2970:bool
        -: 2971:jerry_value_is_string (const jerry_value_t value)
        -: 2972:```
        -: 2973:
        -: 2974:- `value` - api value
        -: 2975:- return value
        -: 2976:  - true, if the given `jerry_value_t` is a string
        -: 2977:  - false, otherwise
        -: 2978:
        -: 2979:**Example**
        -: 2980:
        -: 2981:```c
        -: 2982:{
        -: 2983:  jerry_value_t value;
        -: 2984:  ... // create or copy value
        -: 2985:
        -: 2986:  if (jerry_value_is_string (value))
        -: 2987:  {
        -: 2988:    ...
        -: 2989:  }
        -: 2990:
        -: 2991:  jerry_value_free (value);
        -: 2992:}
        -: 2993:```
        -: 2994:
        -: 2995:**See also**
        -: 2996:
        -: 2997:- [jerry_value_free](#jerry_value_free)
        -: 2998:
        -: 2999:
        -: 3000:## jerry_value_is_symbol
        -: 3001:
        -: 3002:**Summary**
        -: 3003:
        -: 3004:Returns whether the given `jerry_value_t` is a symbol value.
        -: 3005:
        -: 3006:*Notes*:
        -: 3007:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 3008:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 3009:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 3010:- The es.next profile enables this by default.
        -: 3011:
        -: 3012:**Prototype**
        -: 3013:
        -: 3014:```c
        -: 3015:bool
        -: 3016:jerry_value_is_symbol (const jerry_value_t value)
        -: 3017:```
        -: 3018:
        -: 3019:- `value` - API value
        -: 3020:- return value
        -: 3021:  - true, if the given `jerry_value_t` is a symbol
        -: 3022:  - false, otherwise
        -: 3023:
        -: 3024:*New in version 2.0*.
        -: 3025:
        -: 3026:**Example**
        -: 3027:
        -: 3028:[doctest]: # ()
        -: 3029:
        -: 3030:```c
        -: 3031:#include "jerryscript.h"
        -: 3032:
        -: 3033:int
    #####: 3034:main (void)
        -: 3035:{
    #####: 3036:  jerry_init (JERRY_INIT_EMPTY);
        -: 3037:
    #####: 3038:  jerry_value_t string_value = jerry_string_sz ("Symbol description string");
    #####: 3039:  jerry_value_t symbol_value = jerry_symbol_with_description (string_value);
        -: 3040:
    #####: 3041:  jerry_value_free (string_value);
        -: 3042:
    #####: 3043:  if (jerry_value_is_symbol (symbol_value))
        -: 3044:  {
        -: 3045:    // usage of symbol_value
        -: 3046:  }
        -: 3047:
    #####: 3048:  jerry_value_free (symbol_value);
        -: 3049:
    #####: 3050:  jerry_cleanup ();
        -: 3051:  return 0;
        -: 3052:}
        -: 3053:```
        -: 3054:
        -: 3055:**See also**
        -: 3056:
        -: 3057:- [jerry_value_free](#jerry_value_free)
        -: 3058:- [jerry_symbol](#jerry_symbol)
        -: 3059:
        -: 3060:
        -: 3061:## jerry_value_is_bigint
        -: 3062:
        -: 3063:**Summary**
        -: 3064:
        -: 3065:Returns whether the given `jerry_value_t` is a bigint value.
        -: 3066:
        -: 3067:*Notes*:
        -: 3068:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 3069:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 3070:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 3071:- The es.next profile enables this by default.
        -: 3072:
        -: 3073:**Prototype**
        -: 3074:
        -: 3075:```c
        -: 3076:bool
        -: 3077:jerry_value_is_bigint (const jerry_value_t value)
        -: 3078:```
        -: 3079:
        -: 3080:- `value` - API value
        -: 3081:- return value
        -: 3082:  - true, if the given `jerry_value_t` is a BigInt
        -: 3083:  - false, otherwise
        -: 3084:
        -: 3085:*New in version 2.4*.
        -: 3086:
        -: 3087:**Example**
        -: 3088:
        -: 3089:[doctest]: # ()
        -: 3090:
        -: 3091:```c
        -: 3092:#include "jerryscript.h"
        -: 3093:
        -: 3094:int
    #####: 3095:main (void)
        -: 3096:{
    #####: 3097:  jerry_init (JERRY_INIT_EMPTY);
        -: 3098:
    #####: 3099:  jerry_value_t string_value = jerry_string_sz ("12345678");
    #####: 3100:  jerry_value_t bigint_value = jerry_value_to_bigint (string_value);
        -: 3101:
    #####: 3102:  jerry_value_free (string_value);
        -: 3103:
    #####: 3104:  if (jerry_value_is_bigint (bigint_value))
        -: 3105:  {
        -: 3106:    // usage of bigint_value
        -: 3107:  }
        -: 3108:
    #####: 3109:  jerry_value_free (bigint_value);
        -: 3110:
    #####: 3111:  jerry_cleanup ();
        -: 3112:  return 0;
        -: 3113:}
        -: 3114:```
        -: 3115:
        -: 3116:**See also**
        -: 3117:
        -: 3118:- [jerry_value_free](#jerry_value_free)
        -: 3119:- [jerry_bigint](#jerry_bigint)
        -: 3120:- [jerry_value_to_bigint](#jerry_value_to_bigint)
        -: 3121:
        -: 3122:
        -: 3123:## jerry_value_is_typedarray
        -: 3124:
        -: 3125:**Summary**
        -: 3126:
        -: 3127:Checks whether the given `jerry_value_t` is a TypedArray object or not.
        -: 3128:
        -: 3129:*Notes*:
        -: 3130:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 3131:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 3132:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 3133:- The es.next profile enables this by default.
        -: 3134:
        -: 3135:**Prototype**
        -: 3136:
        -: 3137:```c
        -: 3138:bool
        -: 3139:jerry_value_is_typedarray (const jerry_value_t value)
        -: 3140:```
        -: 3141:
        -: 3142:- `value` - object to check
        -: 3143:- return value
        -: 3144:  - true, if the given `jerry_value_t` is a TypedArray object.
        -: 3145:  - false, otherwise
        -: 3146:
        -: 3147:*New in version 2.0*.
        -: 3148:
        -: 3149:**Example**
        -: 3150:
        -: 3151:[doctest]: # ()
        -: 3152:
        -: 3153:```c
        -: 3154:#include "jerryscript.h"
        -: 3155:
        -: 3156:int
    #####: 3157:main (void)
        -: 3158:{
    #####: 3159:  jerry_init (JERRY_INIT_EMPTY);
        -: 3160:
    #####: 3161:  jerry_value_t value = jerry_typedarray (JERRY_TYPEDARRAY_UINT16, 15);
        -: 3162:
    #####: 3163:  if (jerry_value_is_typedarray (value))
        -: 3164:  {
        -: 3165:    /* "value" is a typedarray. */
        -: 3166:  }
        -: 3167:
    #####: 3168:  jerry_value_free (value);
        -: 3169:
    #####: 3170:  jerry_cleanup ();
        -: 3171:
        -: 3172:  return 0;
        -: 3173:}
        -: 3174:```
        -: 3175:
        -: 3176:**See also**
        -: 3177:
        -: 3178:- [jerry_typedarray](#jerry_typedarray)
        -: 3179:
        -: 3180:
        -: 3181:## jerry_container_type
        -: 3182:
        -: 3183:**Summary**
        -: 3184:
        -: 3185:Checks whether the given `jerry_value_t` is the given `jerry_container_type_t` type container object.
        -: 3186:
        -: 3187:*Notes*
        -: 3188:- This API function depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -: 3189:  runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -: 3190:  feature enum values.
        -: 3191:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 3192:- The es.next profile enables this by default.
        -: 3193:
        -: 3194:**Prototype**
        -: 3195:
        -: 3196:```c
        -: 3197:jerry_container_type_t
        -: 3198:jerry_container_type (const jerry_value_t value)
        -: 3199:```
        -: 3200:
        -: 3201:- `value` - Container object
        -: 3202:- return value
        -: 3203:  - The corresponding enum value of `jerry_container_type_t`, or `JERRY_CONTAINER_TYPE_INVALID` if the container
        -: 3204:    was not a valid container object.
        -: 3205:
        -: 3206:*New in version 2.3*.
        -: 3207:
        -: 3208:**Example**
        -: 3209:
        -: 3210:[doctest]: # ()
        -: 3211:
        -: 3212:```c
        -: 3213:#include "jerryscript.h"
        -: 3214:int
    #####: 3215:main (void)
        -: 3216:{
    #####: 3217:  jerry_init (JERRY_INIT_EMPTY);
        -: 3218:
    #####: 3219:  jerry_value_t value = jerry_container (JERRY_CONTAINER_TYPE_MAP, NULL, 0);
        -: 3220:
    #####: 3221:  if (jerry_container_type (value) == JERRY_CONTAINER_TYPE_MAP)
        -: 3222:  {
        -: 3223:    /* "value" is a map. */
        -: 3224:  }
        -: 3225:
    #####: 3226:  jerry_value_free (value);
        -: 3227:
    #####: 3228:  jerry_cleanup ();
        -: 3229:
        -: 3230:  return 0;
        -: 3231:}
        -: 3232:```
        -: 3233:
        -: 3234:**See also**
        -: 3235:
        -: 3236:- [jerry_container](#jerry_container)
        -: 3237:- [jerry_container_type_t](#jerry_container_type_t)
        -: 3238:
        -: 3239:
        -: 3240:## jerry_value_is_undefined
        -: 3241:
        -: 3242:**Summary**
        -: 3243:
        -: 3244:Returns whether the given `jerry_value_t` is an undefined value.
        -: 3245:
        -: 3246:**Prototype**
        -: 3247:
        -: 3248:```c
        -: 3249:bool
        -: 3250:jerry_value_is_undefined (const jerry_value_t value)
        -: 3251:```
        -: 3252:
        -: 3253:- `value` - api value
        -: 3254:- return value
        -: 3255:  - true, if the given `jerry_value_t` is an undefined value
        -: 3256:  - false, otherwise
        -: 3257:
        -: 3258:**Example**
        -: 3259:
        -: 3260:```c
        -: 3261:{
        -: 3262:  jerry_value_t value;
        -: 3263:  ... // create or copy value
        -: 3264:
        -: 3265:  if (jerry_value_is_undefined (value))
        -: 3266:  {
        -: 3267:    ...
        -: 3268:  }
        -: 3269:
        -: 3270:  jerry_value_free (value);
        -: 3271:}
        -: 3272:```
        -: 3273:
        -: 3274:**See also**
        -: 3275:
        -: 3276:- [jerry_value_free](#jerry_value_free)
        -: 3277:
        -: 3278:## jerry_value_type
        -: 3279:
        -: 3280:**Summary**
        -: 3281:
        -: 3282:Returns the JavaScript type
        -: 3283:for a given value as a [jerry_type_t](#jerry_type_t) enum value.
        -: 3284:
        -: 3285:This is a similar operation to the 'typeof' operator
        -: 3286:in the standard with an exception that the 'null'
        -: 3287:value has its own enum value.
        -: 3288:
        -: 3289:**Prototype**
        -: 3290:
        -: 3291:```c
        -: 3292:jerry_type_t
        -: 3293:jerry_value_type (const jerry_value_t value);
        -: 3294:```
        -: 3295:
        -: 3296:- `value` - JavaScript value to check.
        -: 3297:- return value
        -: 3298:  - One of the [jerry_type_t](#jerry_type_t) value.
        -: 3299:
        -: 3300:*New in version 2.0*.
        -: 3301:
        -: 3302:**Example**
        -: 3303:
        -: 3304:```c
        -: 3305:{
        -: 3306:  jerry_value_t number = jerry_number (3.3);
        -: 3307:
        -: 3308:  jerry_type_t type_info = jerry_value_type (number);
        -: 3309:
        -: 3310:  if (type_info == JERRY_TYPE_NUMBER)
        -: 3311:  {
        -: 3312:    /* ... */
        -: 3313:  }
        -: 3314:
        -: 3315:  jerry_value_free (number);
        -: 3316:}
        -: 3317:```
        -: 3318:
        -: 3319:**See also**
        -: 3320:
        -: 3321:- [jerry_type_t](#jerry_type_t)
        -: 3322:
        -: 3323:## jerry_object_type
        -: 3324:
        -: 3325:**Summary**
        -: 3326:
        -: 3327:Returns the **object** type
        -: 3328:for a given value as a [jerry_object_type_t](#jerry_object_type_t) enum value.
        -: 3329:
        -: 3330:Note: For non-object parameters `JERRY_OBJECT_TYPE_NONE` is returned.
        -: 3331:Note: the returned type can be checked for more detailed type information in the following cases:
        -: 3332:  - `JERRY_OBJECT_TYPE_CONTAINER`, *see also:* [jerry_container_get_type](#jerry_container_get_type)
        -: 3333:  - `JERRY_OBJECT_TYPE_FUNCTION`, *see also:* [jerry_function_type](#jerry_function_type)
        -: 3334:  - `JERRY_OBJECT_TYPE_ITERATOR`, *see also:* [jerry_iterator_type](#jerry_iterator_type)
        -: 3335:  - `JERRY_OBJECT_TYPE_TYPEDARRAY`, *see also:* [jerry_typedarray_type](#jerry_typedarray_type)
        -: 3336:
        -: 3337:**Prototype**
        -: 3338:
        -: 3339:```c
        -: 3340:jerry_object_type_t
        -: 3341:jerry_object_type (const jerry_value_t value);
        -: 3342:```
        -: 3343:
        -: 3344:- `value` - JavaScript value to check.
        -: 3345:- return value
        -: 3346:  - One of the [jerry_object_type_t](#jerry_object_type_t) value.
        -: 3347:
        -: 3348:*New in version 2.4*.
        -: 3349:
        -: 3350:**Example**
        -: 3351:
        -: 3352:```c
        -: 3353:{
        -: 3354:  jerry_value_t object = jerry_object ();
        -: 3355:
        -: 3356:  jerry_object_type_t object_type_info = jerry_object_type (object);
        -: 3357:
        -: 3358:  if (type_info == JERRY_OBJECT_TYPE_GENERIC)
        -: 3359:  {
        -: 3360:    /* ... */
        -: 3361:  }
        -: 3362:
        -: 3363:  jerry_value_free (object);
        -: 3364:}
        -: 3365:```
        -: 3366:
        -: 3367:**See also**
        -: 3368:
        -: 3369:- [jerry_object_type_t](#jerry_object_type_t)
        -: 3370:
        -: 3371:## jerry_function_type
        -: 3372:
        -: 3373:**Summary**
        -: 3374:
        -: 3375:Returns the **function** type
        -: 3376:for a given value as a [jerry_function_type_t](#jerry_function_type_t) enum value.
        -: 3377:
        -: 3378:**Prototype**
        -: 3379:
        -: 3380:```c
        -: 3381:jerry_function_type_t
        -: 3382:jerry_function_type (const jerry_value_t value);
        -: 3383:```
        -: 3384:
        -: 3385:- `value` - JavaScript value to check.
        -: 3386:- return value
        -: 3387:  - One of the [jerry_function_type_t](#jerry_function_type_t) value.
        -: 3388:
        -: 3389:Note: For non-function parameters `JERRY_FUNCTION_TYPE_NONE` is returned.
        -: 3390:
        -: 3391:*New in version 2.4*.
        -: 3392:
        -: 3393:**Example**
        -: 3394:
        -: 3395:```c
        -: 3396:{
        -: 3397:  const jerry_char_t script[] = "function f() {}; f";
        -: 3398:  jerry_value_t function_object = jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
        -: 3399:
        -: 3400:  jerry_function_type_t function_type_info = jerry_function_type (function_object);
        -: 3401:
        -: 3402:  if (type_info == JERRY_FUNCTION_TYPE_GENERIC)
        -: 3403:  {
        -: 3404:    /* ... */
        -: 3405:  }
        -: 3406:
        -: 3407:  jerry_value_free (function_object);
        -: 3408:}
        -: 3409:```
        -: 3410:
        -: 3411:**See also**
        -: 3412:
        -: 3413:- [jerry_function_type_t](#jerry_function_type_t)
        -: 3414:
        -: 3415:## jerry_iterator_type
        -: 3416:
        -: 3417:**Summary**
        -: 3418:
        -: 3419:Returns the **iterator** type
        -: 3420:for a given value as a [jerry_iterator_type_t](#jerry_iterator_type_t) enum value.
        -: 3421:
        -: 3422:**Prototype**
        -: 3423:
        -: 3424:```c
        -: 3425:jerry_iterator_type_t
        -: 3426:jerry_iterator_type (const jerry_value_t value);
        -: 3427:```
        -: 3428:
        -: 3429:- `value` - JavaScript value to check.
        -: 3430:- return value
        -: 3431:  - One of the [jerry_iterator_type_t](#jerry_iterator_type_t) value.
        -: 3432:
        -: 3433:Note: For non-iterator parameters `JERRY_ITERATOR_TYPE_NONE` is returned.
        -: 3434:
        -: 3435:*New in version 2.4*.
        -: 3436:
        -: 3437:**Example**
        -: 3438:
        -: 3439:```c
        -: 3440:{
        -: 3441:  const jerry_char_t script[] = "[1, 2, 3].values()";
        -: 3442:  jerry_value_t iterator = jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
        -: 3443:
        -: 3444:  jerry_iterator_type_t iterator_type_info = jerry_iterator_type (iterator);
        -: 3445:
        -: 3446:  if (type_info == JERRY_ITERATOR_TYPE_ARRAY)
        -: 3447:  {
        -: 3448:    /* ... */
        -: 3449:  }
        -: 3450:
        -: 3451:  jerry_value_free (iterator);
        -: 3452:}
        -: 3453:```
        -: 3454:
        -: 3455:**See also**
        -: 3456:
        -: 3457:- [jerry_iterator_type_t](#jerry_iterator_type_t)
        -: 3458:
        -: 3459:## jerry_feature_enabled
        -: 3460:
        -: 3461:**Summary**
        -: 3462:
        -: 3463:Returns whether the specified compile time feature is enabled.
        -: 3464:
        -: 3465:**Prototype**
        -: 3466:
        -: 3467:```c
        -: 3468:bool
        -: 3469:jerry_feature_enabled (const jerry_feature_t feature);
        -: 3470:```
        -: 3471:
        -: 3472:- `feature` - jerry feature
        -: 3473:- return value
        -: 3474:  - true, if the given `jerry_feature_t` is enabled
        -: 3475:  - false, otherwise
        -: 3476:
        -: 3477:*New in version 2.0*.
        -: 3478:
        -: 3479:**Example**
        -: 3480:
        -: 3481:```c
        -: 3482:{
        -: 3483:  /* ... */
        -: 3484:  jerry_feature_t feature = JERRY_FEATURE_SNAPSHOT_SAVE;
        -: 3485:
        -: 3486:  if (jerry_feature_enabled (feature))
        -: 3487:  {
        -: 3488:    /* ... */
        -: 3489:  }
        -: 3490:
        -: 3491:}
        -: 3492:```
        -: 3493:
        -: 3494:**See also**
        -: 3495:
        -: 3496:- [jerry_feature_t](#jerry_feature_t)
        -: 3497:
        -: 3498:
        -: 3499:# Binary operations
        -: 3500:
        -: 3501:## jerry_binary_op
        -: 3502:
        -: 3503:**Summary**
        -: 3504:
        -: 3505:Perform binary operation on the given operands (==, ===, <, >, etc.).
        -: 3506:
        -: 3507:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 3508:is no longer needed.
        -: 3509:
        -: 3510:**Prototype**
        -: 3511:
        -: 3512:```c
        -: 3513:jerry_value_t
        -: 3514:jerry_binary_op (jerry_binary_op_t op,
        -: 3515:                 const jerry_value_t lhs,
        -: 3516:                 const jerry_value_t rhs);
        -: 3517:```
        -: 3518:
        -: 3519:- `op` - binary operation
        -: 3520:- `lhs` - left-hand side operand
        -: 3521:- `rhs` - right-hand side operand
        -: 3522:- return value
        -: 3523:  - exception, if operation is unsuccessful or unsupported
        -: 3524:  - the result of the binary operation on the given operands otherwise
        -: 3525:
        -: 3526:*New in version 2.0*.
        -: 3527:
        -: 3528:**Example - JERRY_BIN_OP_EQUAL**
        -: 3529:
        -: 3530:```c
        -: 3531:{
        -: 3532:  jerry_value_t value1;
        -: 3533:  jerry_value_t value2;
        -: 3534:  ... // create or copy value
        -: 3535:  jerry_value_t result = jerry_binary_op (JERRY_BIN_OP_EQUAL, value1, value2)
        -: 3536:
        -: 3537:  if (!jerry_value_is_exception (result))
        -: 3538:  {
        -: 3539:    if (jerry_value_is_true (result))
        -: 3540:    {
        -: 3541:       // value1 and value2 are equal
        -: 3542:    }
        -: 3543:    else
        -: 3544:    {
        -: 3545:      // value1 and value2 are NOT equal
        -: 3546:    }
        -: 3547:  }
        -: 3548:  else
        -: 3549:  {
        -: 3550:    ... // handle error
        -: 3551:  }
        -: 3552:
        -: 3553:  jerry_value_free (value1);
        -: 3554:  jerry_value_free (value2);
        -: 3555:  jerry_value_free (result);
        -: 3556:}
        -: 3557:```
        -: 3558:
        -: 3559:**Example - JERRY_BIN_OP_INSTANCEOF**
        -: 3560:
        -: 3561:[doctest]: # ()
        -: 3562:
        -: 3563:```c
        -: 3564:#include "jerryscript.h"
        -: 3565:
        -: 3566:static jerry_value_t
    #####: 3567:my_constructor (const jerry_call_info_t *call_info_p,
        -: 3568:                const jerry_value_t argv[],
        -: 3569:                const jerry_length_t argc)
        -: 3570:{
    #####: 3571:  return jerry_undefined ();
        -: 3572:}
        -: 3573:
        -: 3574:int
    #####: 3575:main (void)
        -: 3576:{
    #####: 3577:  jerry_init (JERRY_INIT_EMPTY);
        -: 3578:
    #####: 3579:  jerry_value_t base_obj = jerry_object ();
    #####: 3580:  jerry_value_t constructor = jerry_function_external (my_constructor);
        -: 3581:
        -: 3582:  /* External functions does not have a prototype by default, so we need to create one */
    #####: 3583:  jerry_value_t prototype_str = jerry_string_sz ("prototype");
    #####: 3584:  jerry_value_free (jerry_object_set (constructor, prototype_str, base_obj));
    #####: 3585:  jerry_value_free (prototype_str);
        -: 3586:
        -: 3587:  /* Construct the instance. */
    #####: 3588:  jerry_value_t instance_val = jerry_construct (constructor, NULL, 0);
        -: 3589:
        -: 3590:  /* Call the API function of 'instanceof'. */
    #####: 3591:  jerry_value_t is_instance = jerry_binary_op (JERRY_BIN_OP_INSTANCEOF,
        -: 3592:                                               instance_val,
        -: 3593:                                               constructor);
    #####: 3594:  if (!jerry_value_is_exception (is_instance)
    #####: 3595:      && jerry_value_is_true (is_instance))
        -: 3596:  {
        -: 3597:    /* ... */
        -: 3598:  }
        -: 3599:
        -: 3600:  /* Free all of the jerry values and cleanup the engine. */
    #####: 3601:  jerry_value_free (base_obj);
    #####: 3602:  jerry_value_free (constructor);
    #####: 3603:  jerry_value_free (instance_val);
    #####: 3604:  jerry_value_free (is_instance);
        -: 3605:
    #####: 3606:  jerry_cleanup ();
        -: 3607:  return 0;
        -: 3608:}
        -: 3609:```
        -: 3610:
        -: 3611:**See also**
        -: 3612:
        -: 3613:- [jerry_binary_op_t](#jerry_binary_op_t)
        -: 3614:
        -: 3615:
        -: 3616:# Exception manipulation functions
        -: 3617:
        -: 3618:*Changed in version 2.0*: The exception handling and manipulation was modified and the old methods were replaced.
        -: 3619:
        -: 3620:## jerry_throw_abort
        -: 3621:
        -: 3622:**Summary**
        -: 3623:
        -: 3624:Create (api) abort from a value.
        -: 3625:
        -: 3626:This function creates an API abort value from an API value. The second argument defines
        -: 3627:whether the input value must be released or not. If it is set to `true`,
        -: 3628:then a [`jerry_value_free`](#jerry_value_free) function will be called
        -: 3629:for the first argument, so the api value won't be available after the call of
        -: 3630:`jerry_throw_abort`. The second argument should be false if both value
        -: 3631:and created abort value are needed.
        -: 3632:
        -: 3633:**Prototype**
        -: 3634:
        -: 3635:```c
        -: 3636:jerry_value_t
        -: 3637:jerry_throw_abort (jerry_value_t value, bool take_ownersip);
        -: 3638:```
        -: 3639:
        -: 3640:- `value` - api value
        -: 3641:- `take_ownership` - raw boolean, defines whether input value should be copied
        -: 3642:- return value - abort exception value
        -: 3643:
        -: 3644:*New in version 2.0*.
        -: 3645:
        -: 3646:**Example 1**
        -: 3647:
        -: 3648:```c
        -: 3649:{
        -: 3650:  jerry_value_t value;
        -: 3651:  ... // create or copy value
        -: 3652:
        -: 3653:  jerry_value_t abort = jerry_throw_abort (value, true);
        -: 3654:  // using the 'value' variable after release is invalid.
        -: 3655:
        -: 3656:  jerry_value_free (abort);
        -: 3657:}
        -: 3658:```
        -: 3659:
        -: 3660:**Example 2**
        -: 3661:
        -: 3662:```c
        -: 3663:{
        -: 3664:  jerry_value_t value;
        -: 3665:  ... // create or copy value
        -: 3666:
        -: 3667:  jerry_value_t abort = jerry_throw_abort (value, false);
        -: 3668:  // both 'abort' and 'value' can be used and must be released when they are no longer needed
        -: 3669:
        -: 3670:  jerry_value_free (abort);
        -: 3671:  jerry_value_free (value);
        -: 3672:}
        -: 3673:```
        -: 3674:
        -: 3675:**See also**
        -: 3676:
        -: 3677:- [jerry_value_t](#jerry_value_t)
        -: 3678:- [jerry_exception_value](#jerry_exception_value)
        -: 3679:- [jerry_throw](#jerry_throw)
        -: 3680:
        -: 3681:## jerry_throw
        -: 3682:
        -: 3683:**Summary**
        -: 3684:
        -: 3685:Create exception from a value.
        -: 3686:
        -: 3687:This function creates an API exception value from an API value. The second argument defines
        -: 3688:whether the input value should be taken by the exception or copied. If it is set to `true`,
        -: 3689:then then the ownership of the argument value is taken, so it won't be available after the call to
        -: 3690:`jerry_throw`. The second argument should be false if both the original value and created exception are needed.
        -: 3691:
        -: 3692:**Prototype**
        -: 3693:
        -: 3694:```c
        -: 3695:jerry_value_t
        -: 3696:jerry_throw (jerry_value_t value, bool take_ownership);
        -: 3697:```
        -: 3698:
        -: 3699:- `value` - api value
        -: 3700:- `take_ownership` - raw boolean, defines whether input value should be copied
        -: 3701:- return value - exception value
        -: 3702:
        -: 3703:*New in version 2.0*.
        -: 3704:
        -: 3705:**Example 1**
        -: 3706:
        -: 3707:```c
        -: 3708:{
        -: 3709:  jerry_value_t value;
        -: 3710:  ... // create or copy value
        -: 3711:
        -: 3712:  jerry_value_t exception = jerry_throw (value, true);
        -: 3713:  // using the 'value' variable after release is invalid.
        -: 3714:
        -: 3715:
        -: 3716:  jerry_value_free (exception);
        -: 3717:}
        -: 3718:```
        -: 3719:
        -: 3720:**Example 2**
        -: 3721:
        -: 3722:```c
        -: 3723:{
        -: 3724:  jerry_value_t value;
        -: 3725:  ... // create or copy value
        -: 3726:
        -: 3727:  jerry_value_t exception = jerry_throw_value (value, false);
        -: 3728:  // both 'exception' and 'value' can be used and must be released when they are no longer needed
        -: 3729:
        -: 3730:  jerry_value_free (exception);
        -: 3731:  jerry_value_free (value);
        -: 3732:}
        -: 3733:```
        -: 3734:
        -: 3735:**See also**
        -: 3736:
        -: 3737:- [jerry_value_t](#jerry_value_t)
        -: 3738:- [jerry_exception_value](#jerry_exception_value)
        -: 3739:- [jerry_throw_abort](#jerry_throw_abort)
        -: 3740:
        -: 3741:## jerry_error_type
        -: 3742:
        -: 3743:**Summary**
        -: 3744:
        -: 3745:Returns the type of the Error object if possible. If a non-error object is used as the input for the function the
        -: 3746:method will return `JERRY_ERROR_NONE` indicating that the value was not an Error object.
        -: 3747:
        -: 3748:Note: If an exception value is passed as an argument, the function will inspect the contained value instead.
        -: 3749:
        -: 3750:**Prototype**
        -: 3751:
        -: 3752:```c
        -: 3753:jerry_error_t
        -: 3754:jerry_error_type (const jerry_value_t value);
        -: 3755:```
        -: 3756:
        -: 3757:- `value` - api value (possible exception object)
        -: 3758:- return value
        -: 3759:  - JERRY_ERROR_NONE if the input is not an error object
        -: 3760:  - one of the [jerry_error_t](#jerry_error_t) value
        -: 3761:
        -: 3762:*New in version 2.0*.
        -: 3763:
        -: 3764:**Example**
        -: 3765:
        -: 3766:```c
        -: 3767:{
        -: 3768:  jerry_value_t error_obj = jerry_error_sz (JERRY_ERROR_RANGE, "error msg");
        -: 3769:  jerry_error_t error_type = jerry_error_type (error_obj);
        -: 3770:
        -: 3771:  // error_type is now JERRY_ERROR_RANGE.
        -: 3772:
        -: 3773:  jerry_value_free (error_obj);
        -: 3774:}
        -: 3775:```
        -: 3776:
        -: 3777:**See also**
        -: 3778:
        -: 3779:- [jerry_error](#jerry_error)
        -: 3780:- [jerry_value_is_exception](#jerry_value_is_exception)
        -: 3781:
        -: 3782:## jerry_exception_value
        -: 3783:
        -: 3784:**Summary**
        -: 3785:
        -: 3786:Get the value contained in an exception.
        -: 3787:
        -: 3788:Many API functions cannot be called with an exception value.
        -: 3789:This function extracts the API value from an exception. The second argument defines
        -: 3790:whether the input exception value should be released or not. If it is set to `true`,
        -: 3791:then a [`jerry_value_free`](#jerry_value_free) function will be called
        -: 3792:for the first argument, so the exception value won't be available after the call of
        -: 3793:`jerry_exception_value`. The second argument should be false if both the exception
        -: 3794:and its contained value are needed.
        -: 3795:
        -: 3796:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 3797:is no longer needed.
        -: 3798:
        -: 3799:**Prototype**
        -: 3800:
        -: 3801:```c
        -: 3802:jerry_value_t
        -: 3803:jerry_exception_value (jerry_value_t value, bool release)
        -: 3804:```
        -: 3805:
        -: 3806:- `value` - exception value
        -: 3807:- `release` - raw boolean, defines whether input value must be released
        -: 3808:- return value - api value
        -: 3809:
        -: 3810:*New in version 2.0*.
        -: 3811:
        -: 3812:**Example 1**
        -: 3813:
        -: 3814:```c
        -: 3815:{
        -: 3816:  jerry_value_t value;
        -: 3817:  ... // create or copy value
        -: 3818:
        -: 3819:  jerry_value_t exception = jerry_throw_value (value, true);
        -: 3820:  jerry_value_t value_from_error = jerry_exception_value (exception, true);
        -: 3821:  // using the 'exception' variable after release is invalid.
        -: 3822:
        -: 3823:  jerry_value_free (value_from_error);
        -: 3824:}
        -: 3825:```
        -: 3826:
        -: 3827:**Example 2**
        -: 3828:
        -: 3829:```c
        -: 3830:{
        -: 3831:  jerry_value_t value;
        -: 3832:  ... // create or copy value
        -: 3833:
        -: 3834:  jerry_value_t exception = jerry_throw_value (value, true);
        -: 3835:  jerry_value_t value_from_error = jerry_exception_value (exception, false);
        -: 3836:  // both 'exception' and 'value_from_error' can be used and must be released when they are no longer needed
        -: 3837:
        -: 3838:  jerry_value_free (value_from_error);
        -: 3839:  jerry_value_free (exception);
        -: 3840:}
        -: 3841:```
        -: 3842:
        -: 3843:**See also**
        -: 3844:
        -: 3845:- [jerry_value_t](#jerry_value_t)
        -: 3846:- [jerry_throw](#jerry_throw)
        -: 3847:- [jerry_throw_abort](#jerry_throw_abort)
        -: 3848:
        -: 3849:## jerry_error_on_created
        -: 3850:
        -: 3851:**Summary**
        -: 3852:
        -: 3853:Set the decorator callback for newly created Error objects. The operation of the callback
        -: 3854:is described in [jerry_error_object_created_cb_t](#jerry_error_object_created_cb_t).
        -: 3855:
        -: 3856:**Prototype**
        -: 3857:
        -: 3858:```c
        -: 3859:void jerry_error_on_created (jerry_error_object_created_cb_t callback, void *user_p);
        -: 3860:```
        -: 3861:
        -: 3862:- `callback` - callback function, the previously set value is overwritten, and setting NULL
        -: 3863:               disables the operation
        -: 3864:- `user_p` - pointer passed to the callback function, can be NULL
        -: 3865:
        -: 3866:*New in version 2.4*.
        -: 3867:
        -: 3868:**Example**
        -: 3869:
        -: 3870:```c
        -: 3871:static void
        -: 3872:error_object_created_callback (const jerry_value_t error_object) /**< new error object */
        -: 3873:                               void *user_p) /**< user pointer */
        -: 3874:{
        -: 3875:  (void) error_object;
        -: 3876:  (void) user_p;
        -: 3877:  printf ("Notification: a new error is created\n");
        -: 3878:} /* error_object_created_callback */
        -: 3879:
        -: 3880:void main(void)
        -: 3881:{
        -: 3882:  jerry_init (JERRY_INIT_EMPTY);
        -: 3883:
        -: 3884:  jerry_error_on_created (error_object_created_callback, NULL);
        -: 3885:
        -: 3886:  jerry_value_free (jerry_error_sz (JERRY_ERROR_COMMON, "Message"));
        -: 3887:
        -: 3888:  jerry_cleanup ();
        -: 3889:} /* main */
        -: 3890:```
        -: 3891:
        -: 3892:**See also**
        -: 3893:
        -: 3894:- [jerry_error_object_created_cb_t](#jerry_error_object_created_cb_t)
        -: 3895:
        -: 3896:## jerry_on_throw
        -: 3897:
        -: 3898:**Summary**
        -: 3899:
        -: 3900:The callback passed to this function is called when an exception is thrown
        -: 3901:in ECMAScript code. The callback is not called again until the value is
        -: 3902:caught. See: [jerry_throw_cb_t](#jerry_throw_cb_t).
        -: 3903:
        -: 3904:*Notes*:
        -: 3905:- This API depends on a build option (`JERRY_VM_THROW`) and can be checked
        -: 3906:  in runtime with the `JERRY_FEATURE_VM_THROW` feature enum value,
        -: 3907:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 3908:
        -: 3909:**Prototype**
        -: 3910:
        -: 3911:```c
        -: 3912:void
        -: 3913:jerry_on_throw (jerry_throw_cb_t throw_cb,
        -: 3914:                void *user_p);
        -: 3915:```
        -: 3916:
        -: 3917:- `throw_cb` - callback which is called on throws (passing NULL disables this feature)
        -: 3918:- `user_p` - user pointer passed to the `throw_cb` function
        -: 3919:
        -: 3920:*New in version [[NEXT_RELEASE]]*.
        -: 3921:
        -: 3922:**Example**
        -: 3923:
        -: 3924:[doctest]: # (test="compile")
        -: 3925:
        -: 3926:```c
        -: 3927:#include "jerryscript.h"
        -: 3928:
        -: 3929:static void
    #####: 3930:vm_throw_callback (const jerry_value_t error_value, /**< captured exception */
        -: 3931:                   void *user_p) /**< user pointer */
        -: 3932:{
        -: 3933:  (void) error_value;
        -: 3934:
        -: 3935:  /* Counts the number of throws. */
    #####: 3936:  int *counter_p = (int *) user_p;
    #####: 3937:  (*counter_p)++;
    #####: 3938:}
        -: 3939:
        -: 3940:int
    #####: 3941:main (void)
        -: 3942:{
    #####: 3943:  jerry_init (JERRY_INIT_EMPTY);
        -: 3944:
    #####: 3945:  int counter = 0;
    #####: 3946:  jerry_on_throw (vm_throw_callback, &counter);
        -: 3947:
    #####: 3948:  const jerry_char_t script[] = "try { throw new Error('1') } catch (e) { throw new Error('2') }";
        -: 3949:
    #####: 3950:  jerry_value_free (jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS));
        -: 3951:
        -: 3952:  /* The counter contains 2. */
        -: 3953:
    #####: 3954:  jerry_cleanup ();
        -: 3955:  return 0;
        -: 3956:}
        -: 3957:```
        -: 3958:
        -: 3959:**See also**
        -: 3960:
        -: 3961:- [jerry_throw_cb_t](#jerry_throw_cb_t)
        -: 3962:- [jerry_exception_is_captured](#jerry_exception_is_captured)
        -: 3963:- [jerry_exception_allow_capture](#jerry_exception_allow_capture)
        -: 3964:
        -: 3965:## jerry_exception_is_captured
        -: 3966:
        -: 3967:**Summary**
        -: 3968:
        -: 3969:Checks whether the callback set by [jerry_on_throw](#jerry_on_throw)
        -: 3970:captured the exception.
        -: 3971:
        -: 3972:*Notes*:
        -: 3973:- This API depends on a build option (`JERRY_VM_THROW`) and can be checked
        -: 3974:  in runtime with the `JERRY_FEATURE_VM_THROW` feature enum value,
        -: 3975:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 3976:
        -: 3977:**Prototype**
        -: 3978:
        -: 3979:```c
        -: 3980:bool jerry_exception_is_captured (jerry_value_t value);
        -: 3981:```
        -: 3982:
        -: 3983:- `value` - api value (should be an exception)
        -: 3984:- return value
        -: 3985:  - true, if the vm throw callback captured the exception
        -: 3986:  - false, otherwise
        -: 3987:
        -: 3988:*New in version [[NEXT_RELEASE]]*.
        -: 3989:
        -: 3990:**Example**
        -: 3991:
        -: 3992:[doctest]: # (test="compile")
        -: 3993:
        -: 3994:```c
        -: 3995:#include "jerryscript.h"
        -: 3996:
        -: 3997:static void
    #####: 3998:vm_throw_callback (const jerry_value_t error_value, /**< captured exception */
        -: 3999:                   void *user_p) /**< user pointer */
        -: 4000:{
        -: 4001:  (void) error_value;
        -: 4002:  (void) user_p;
    #####: 4003:}
        -: 4004:
        -: 4005:int
    #####: 4006:main (void)
        -: 4007:{
    #####: 4008:  jerry_init (JERRY_INIT_EMPTY);
        -: 4009:
    #####: 4010:  int counter = 0;
    #####: 4011:  jerry_on_throw (vm_throw_callback, &counter);
        -: 4012:
    #####: 4013:  const jerry_char_t script[] = "throw new Error()";
    #####: 4014:  jerry_value_t result_value = jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
        -: 4015:
    #####: 4016:  if (jerry_exception_is_captured (result_value))
        -: 4017:  {
        -: 4018:    /* Code enters here, because the vm_throw_callback function is called. */
        -: 4019:  }
        -: 4020:
    #####: 4021:  jerry_value_free (result_value);
        -: 4022:
    #####: 4023:  jerry_cleanup ();
        -: 4024:  return 0;
        -: 4025:}
        -: 4026:```
        -: 4027:
        -: 4028:**See also**
        -: 4029:
        -: 4030:- [jerry_on_throw](#jerry_on_throw)
        -: 4031:- [jerry_exception_allow_capture](#jerry_exception_allow_capture)
        -: 4032:
        -: 4033:## jerry_exception_allow_capture
        -: 4034:
        -: 4035:**Summary**
        -: 4036:
        -: 4037:Sets whether the callback set by [jerry_on_throw](#jerry_on_throw)
        -: 4038:should capture the exception or not.
        -: 4039:
        -: 4040:*Notes*:
        -: 4041:- This API depends on a build option (`JERRY_VM_THROW`) and can be checked
        -: 4042:  in runtime with the `JERRY_FEATURE_VM_THROW` feature enum value,
        -: 4043:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 4044:
        -: 4045:**Prototype**
        -: 4046:
        -: 4047:```c
        -: 4048:void jerry_exception_allow_capture (jerry_value_t value, bool should_capture);
        -: 4049:```
        -: 4050:
        -: 4051:- `value` - api value (should be an exception)
        -: 4052:- `should_capture` - callback should capture this error
        -: 4053:
        -: 4054:*New in version [[NEXT_RELEASE]]*.
        -: 4055:
        -: 4056:**Example**
        -: 4057:
        -: 4058:[doctest]: # (test="compile")
        -: 4059:
        -: 4060:```c
        -: 4061:#include "jerryscript.h"
        -: 4062:
        -: 4063:static void
    #####: 4064:vm_throw_callback (const jerry_value_t error_value, /**< captured exception */
        -: 4065:                   void *user_p) /**< user pointer */
        -: 4066:{
        -: 4067:  (void) error_value;
        -: 4068:  (void) user_p;
    #####: 4069:}
        -: 4070:
        -: 4071:static jerry_value_t
    #####: 4072:throw_exception (const jerry_call_info_t *call_info_p, /**< call info */
        -: 4073:                 const jerry_value_t argv[], /**< argument list */
        -: 4074:                 const jerry_length_t argc) /**< argument count */
        -: 4075:{
        -: 4076:  (void) call_info_p;
        -: 4077:  (void) argv;
        -: 4078:  (void) argc;
        -: 4079:
    #####: 4080:  jerry_value_t result_value = jerry_throw_sz (JERRY_ERROR_COMMON, "Error!");
        -: 4081:
        -: 4082:  /* Ignore calling the vm_throw_callback function. */
    #####: 4083:  jerry_exception_allow_capture (result_value, false);
    #####: 4084:  return result_value;
        -: 4085:}
        -: 4086:
        -: 4087:int
    #####: 4088:main (void)
        -: 4089:{
    #####: 4090:  jerry_init (JERRY_INIT_EMPTY);
        -: 4091:
    #####: 4092:  int counter = 0;
    #####: 4093:  jerry_on_throw (vm_throw_callback, &counter);
        -: 4094:
    #####: 4095:  jerry_value_t global_object_value = jerry_current_realm ();
    #####: 4096:  jerry_value_t function_value = jerry_function_external (throw_exception);
    #####: 4097:  jerry_value_t function_name_value = jerry_string_sz ("throw_exception");
        -: 4098:
    #####: 4099:  jerry_value_free (jerry_object_set (global_object_value, function_name_value, function_value));
    #####: 4100:  jerry_value_free (function_name_value);
    #####: 4101:  jerry_value_free (function_value);
    #####: 4102:  jerry_value_free (global_object_value);
        -: 4103:
    #####: 4104:  const jerry_char_t script[] = "throw_exception()";
    #####: 4105:  jerry_value_free (jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS));
        -: 4106:
    #####: 4107:  jerry_cleanup ();
        -: 4108:  return 0;
        -: 4109:}
        -: 4110:```
        -: 4111:
        -: 4112:**See also**
        -: 4113:
        -: 4114:- [jerry_on_throw](#jerry_on_throw)
        -: 4115:- [jerry_exception_is_captured](#jerry_exception_is_captured)
        -: 4116:
        -: 4117:
        -: 4118:# Getter functions of 'jerry_value_t'
        -: 4119:
        -: 4120:Get raw data from API values.
        -: 4121:
        -: 4122:## jerry_value_as_number
        -: 4123:
        -: 4124:**Summary**
        -: 4125:
        -: 4126:Gets the number value of the given `jerry_value_t` parameter as a raw double.
        -: 4127:
        -: 4128:If the argument passed is not a number `0.0` will be returned.
        -: 4129:
        -: 4130:**Prototype**
        -: 4131:
        -: 4132:```c
        -: 4133:double
        -: 4134:jerry_value_as_number (const jerry_value_t value);
        -: 4135:```
        -: 4136:
        -: 4137:- `value` - api value
        -: 4138:- return value
        -: 4139:  - the number value of the given `jerry_value_t` parameter as a raw double.
        -: 4140:  - `0.0` if the api value passed is not a number.
        -: 4141:
        -: 4142:**Example**
        -: 4143:
        -: 4144:```c
        -: 4145:{
        -: 4146:  jerry_value_t value;
        -: 4147:  ... // create or copy value
        -: 4148:
        -: 4149:  if (jerry_value_is_number (value))
        -: 4150:  {
        -: 4151:    double raw_value = jerry_value_as_number (value);
        -: 4152:
        -: 4153:    ... // usage of raw value
        -: 4154:
        -: 4155:  }
        -: 4156:
        -: 4157:  jerry_value_free (value);
        -: 4158:}
        -: 4159:```
        -: 4160:
        -: 4161:**See also**
        -: 4162:
        -: 4163:- [jerry_value_is_number](#jerry_value_is_number)
        -: 4164:- [jerry_value_free](#jerry_value_free)
        -: 4165:
        -: 4166:
        -: 4167:# Functions for string values
        -: 4168:
        -: 4169:## jerry_string_size
        -: 4170:
        -: 4171:**Summary**
        -: 4172:
        -: 4173:Get the size of a string. Returns zero, if the value parameter is not a string.
        -: 4174:This is effectively the number of bytes required to store the string's characters.
        -: 4175:
        -: 4176:**Prototype**
        -: 4177:
        -: 4178:```c
        -: 4179:jerry_size_t
        -: 4180:jerry_string_size (const jerry_value_t value, JERRY_ENCODING_CESU8);
        -: 4181:```
        -: 4182:- `value` - api value
        -: 4183:- return value - number of bytes in the buffer needed to represent the string.
        -: 4184:
        -: 4185:**Example**
        -: 4186:
        -: 4187:```c
        -: 4188:{
        -: 4189:  const char char_array[] = "a string";
        -: 4190:  jerry_value_t string = jerry_string_sz (char_array);
        -: 4191:
        -: 4192:  jerry_size_t string_size = jerry_string_size (string, JERRY_ENCODING_CESU8);
        -: 4193:
        -: 4194:  ... // usage of string_size
        -: 4195:
        -: 4196:  jerry_value_free (string);
        -: 4197:}
        -: 4198:```
        -: 4199:
        -: 4200:**See also**
        -: 4201:
        -: 4202:- [jerry_string_sz](#jerry_string_sz)
        -: 4203:- [jerry_string_length](#jerry_string_length)
        -: 4204:- [jerry_validate_string](#jerry_validate_string)
        -: 4205:
        -: 4206:
        -: 4207:## jerry_string_length
        -: 4208:
        -: 4209:**Summary**
        -: 4210:
        -: 4211:Get the length of a string. Returns zero, if the value parameter is not a string.
        -: 4212:
        -: 4213:*Notes:*
        -: 4214:- The difference from [jerry_string_size](#jerry_string_size) is that it
        -: 4215:  returns the number of bytes used for the string.
        -: 4216:- This is **not** the number of bytes required to store the string.
        -: 4217:
        -: 4218:**Prototype**
        -: 4219:
        -: 4220:```c
        -: 4221:jerry_length_t
        -: 4222:jerry_string_length (const jerry_value_t value);
        -: 4223:```
        -: 4224:
        -: 4225:- `value` - api value
        -: 4226:- return value - number of characters in the string
        -: 4227:
        -: 4228:**Example**
        -: 4229:
        -: 4230:```c
        -: 4231:{
        -: 4232:  const char char_array[] = "a string";
        -: 4233:  jerry_value_t string = jerry_string_sz (char_array);
        -: 4234:
        -: 4235:  jerry_length_t string_length = jerry_string_length (string);
        -: 4236:
        -: 4237:  ... // usage of string_length
        -: 4238:
        -: 4239:  jerry_value_free (string);
        -: 4240:}
        -: 4241:```
        -: 4242:
        -: 4243:**See also**
        -: 4244:
        -: 4245:- [jerry_string_sz](#jerry_string_sz)
        -: 4246:- [jerry_string_size](#jerry_string_size)
        -: 4247:- [jerry_validate_string](#jerry_validate_string)
        -: 4248:
        -: 4249:
        -: 4250:## jerry_string_to_buffer
        -: 4251:
        -: 4252:**Summary**
        -: 4253:
        -: 4254:Copy the characters of a string into a specified cesu-8 buffer.
        -: 4255:The '\0' character could occur in the character buffer. Returns 0,
        -: 4256:if the input value is not a string.
        -: 4257:
        -: 4258:*Note*: Does not put '\0' to the end of string, the return value identifies
        -: 4259:the number of valid bytes in the output buffer.
        -: 4260:
        -: 4261:*Note*: If the size of the string is larger than the size of the
        -: 4262:target buffer, the string will be cropped.
        -: 4263:
        -: 4264:
        -: 4265:**Prototype**
        -: 4266:
        -: 4267:```c
        -: 4268:jerry_size_t
        -: 4269:jerry_string_to_buffer (const jerry_value_t value,
        -: 4270:                        jerry_encoding_t encoding,
        -: 4271:                        jerry_char_t *buffer_p,
        -: 4272:                        jerry_size_t buffer_size);
        -: 4273:```
        -: 4274:
        -: 4275:- `value` - input string value
        -: 4276:- `encoding` - encoding oh the string data
        -: 4277:- `buffer_p` - pointer to output buffer
        -: 4278:- `buffer_size` - size of the buffer
        -: 4279:- return value - number of bytes copied to the buffer
        -: 4280:
        -: 4281:**Example**
        -: 4282:
        -: 4283:[doctest]: # ()
        -: 4284:
        -: 4285:```c
        -: 4286:#include <stdio.h>
        -: 4287:#include <stdlib.h>
        -: 4288:#include "jerryscript.h"
        -: 4289:
        -: 4290:int
    #####: 4291:main (void)
        -: 4292:{
    #####: 4293:  jerry_init (JERRY_INIT_EMPTY);
        -: 4294:
        -: 4295:  jerry_value_t value;
        -: 4296:  // create or copy value
    #####: 4297:  value = jerry_string_sz ("Demo string");
        -: 4298:
        -: 4299:  // Read the string into a byte buffer.
    #####: 4300:  jerry_size_t string_size = jerry_string_size (value, JERRY_ENCODING_CESU8);
    #####: 4301:  jerry_char_t *string_buffer_p = (jerry_char_t *) malloc (sizeof (jerry_char_t) * (string_size + 1));
        -: 4302:
    #####: 4303:  jerry_size_t copied_bytes = jerry_string_to_buffer (value, JERRY_ENCODING_CESU8, string_buffer_p, string_size);
    #####: 4304:  string_buffer_p[copied_bytes] = '\0';
        -: 4305:
    #####: 4306:  jerry_value_free (value);
        -: 4307:
    #####: 4308:  jerry_cleanup ();
        -: 4309:
    #####: 4310:  printf ("Test string: %s\n", string_buffer_p);
    #####: 4311:  free (string_buffer_p);
        -: 4312:
        -: 4313:  return 0;
        -: 4314:}
        -: 4315:```
        -: 4316:
        -: 4317:**See also**
        -: 4318:
        -: 4319:- [jerry_string_sz](#jerry_string_sz)
        -: 4320:- [jerry_string_size](#jerry_string_size)
        -: 4321:- [jerry_strig_to_buffer](#jerry_strig_to_buffer)
        -: 4322:
        -: 4323:
        -: 4324:# jerry_string_external_on_free
        -: 4325:
        -: 4326:**Summary**
        -: 4327:
        -: 4328:Sets the global callback which is called when the string data of an external
        -: 4329:string is no longer used. It is recommended to set this function before the
        -: 4330:first external string is created.
        -: 4331:
        -: 4332:*Note*:
        -: 4333:  - When the callback is NULL, no function is called when an external string is freed.
        -: 4334:  - In some cases (e.g. when the string is also a magic string registered by
        -: 4335:    [jerry_register_magic_strings](#jerry_register_magic_strings)), the callback
        -: 4336:    is called when the string is created, not when it is released.
        -: 4337:
        -: 4338:**Prototype**
        -: 4339:
        -: 4340:```c
        -: 4341:void jerry_string_external_on_free (jerry_external_string_free_cb_t callback_p);
        -: 4342:```
        -: 4343:
        -: 4344:- `callback_p` - callback which is called when an external string is freed.
        -: 4345:
        -: 4346:*New in version [[NEXT_RELEASE]]*.
        -: 4347:
        -: 4348:**Example**
        -: 4349:
        -: 4350:[doctest]: # ()
        -: 4351:
        -: 4352:```c
        -: 4353:#include "jerryscript.h"
        -: 4354:#include <stdio.h>
        -: 4355:
        -: 4356:static void
    #####: 4357:external_string_free_callback (jerry_char_t *string_p, /**< string pointer */
        -: 4358:                               jerry_size_t string_size, /**< size of the string */
        -: 4359:                               void *user_p) /**< user pointer */
        -: 4360:{
    #####: 4361:  printf ("External string is freed!\n");
    #####: 4362:}
        -: 4363:
        -: 4364:int
    #####: 4365:main (void)
        -: 4366:{
    #####: 4367:  jerry_init (JERRY_INIT_EMPTY);
        -: 4368:
    #####: 4369:  jerry_string_external_on_free (external_string_free_callback);
        -: 4370:
    #####: 4371:  const char *string_p = "This is a long external string, should not be duplicated!";
    #####: 4372:  jerry_value_t external_string = jerry_string_external_sz (string_p, NULL);
        -: 4373:  /* The external_string_free_callback is called. */
    #####: 4374:  jerry_value_free (external_string);
        -: 4375:
    #####: 4376:  jerry_cleanup ();
        -: 4377:  return 0;
        -: 4378:}
        -: 4379:```
        -: 4380:
        -: 4381:**See also**
        -: 4382:
        -: 4383:- [jerry_external_string_free_cb_t](#jerry_external_string_free_cb_t)
        -: 4384:- [jerry_string_user_ptr](#jerry_string_user_ptr)
        -: 4385:- [jerry_string_external_sz](#jerry_string_external_sz)
        -: 4386:- [jerry_string_external](#jerry_string_external)
        -: 4387:
        -: 4388:
        -: 4389:# jerry_string_user_ptr
        -: 4390:
        -: 4391:**Summary**
        -: 4392:
        -: 4393:Returns the user pointer assigned to an external string.
        -: 4394:
        -: 4395:*Note*:
        -: 4396:  - In some cases (e.g. when the string is also a magic string registered by
        -: 4397:    [jerry_register_magic_strings](#jerry_register_magic_strings)), the
        -: 4398:    string is a normal string without a user pointer even if it is created
        -: 4399:    by [jerry_string_external_sz](#jerry_string_external_sz).
        -: 4400:
        -: 4401:**Prototype**
        -: 4402:
        -: 4403:```c
        -: 4404:void *jerry_string_user_ptr (const jerry_value_t value,
        -: 4405:                             bool *is_external);
        -: 4406:```
        -: 4407:
        -: 4408:- `value` - string value.
        -: 4409:- `is_external` - when `is_external` is non-NULL, the referenced boolean value is set
        -: 4410:                  to true, if `value` is an external string, and set to false otherwise
        -: 4411:- return value
        -: 4412:  - user pointer - if `value` argument is an external string
        -: 4413:  - NULL - otherwise
        -: 4414:
        -: 4415:*New in version [[NEXT_RELEASE]]*.
        -: 4416:
        -: 4417:**Example**
        -: 4418:
        -: 4419:[doctest]: # ()
        -: 4420:
        -: 4421:```c
        -: 4422:#include "jerryscript.h"
        -: 4423:#include <stdio.h>
        -: 4424:
        -: 4425:static int user_value = 1;
        -: 4426:
        -: 4427:int
    #####: 4428:main (void)
        -: 4429:{
    #####: 4430:  jerry_init (JERRY_INIT_EMPTY);
        -: 4431:
    #####: 4432:  const char *string_p = "This is a long external string, should not be duplicated!";
        -: 4433:
    #####: 4434:  jerry_value_t external_string = jerry_string_external_sz (string_p, (void *) &user_value);
        -: 4435:
        -: 4436:  bool is_external;
    #####: 4437:  void *user_p = jerry_string_user_ptr (external_string, &is_external);
        -: 4438:
    #####: 4439:  if (is_external)
        -: 4440:  {
        -: 4441:    /* Prints the address of user_value. */
        -: 4442:    printf("User pointer of an external string: %p\n", user_p);
        -: 4443:  }
        -: 4444:
    #####: 4445:  jerry_value_free (external_string);
        -: 4446:
    #####: 4447:  jerry_cleanup ();
        -: 4448:  return 0;
        -: 4449:}
        -: 4450:```
        -: 4451:
        -: 4452:**See also**
        -: 4453:
        -: 4454:- [jerry_string_set_external_string_free_callback](#jerry_string_set_external_string_free_callback)
        -: 4455:- [jerry_string_external_sz](#jerry_string_external_sz)
        -: 4456:- [jerry_string_external](#jerry_string_external)
        -: 4457:
        -: 4458:
        -: 4459:# Functions for array object values
        -: 4460:
        -: 4461:## jerry_array_length
        -: 4462:
        -: 4463:**Summary**
        -: 4464:
        -: 4465:Get length of an array object. Returns zero, if the given parameter is not an array object.
        -: 4466:
        -: 4467:**Prototype**
        -: 4468:
        -: 4469:```c
        -: 4470:uint32_t
        -: 4471:jerry_array_length (const jerry_value_t value);
        -: 4472:```
        -: 4473:
        -: 4474:- `value` - input array value
        -: 4475:- return value - length of the given array
        -: 4476:
        -: 4477:**Example**
        -: 4478:
        -: 4479:```c
        -: 4480:{
        -: 4481:  jerry_value_t value;
        -: 4482:  ... // create or copy value
        -: 4483:
        -: 4484:  uint32_t len = jerry_array_length (value);
        -: 4485:
        -: 4486:  jerry_value_free (value);
        -: 4487:}
        -: 4488:```
        -: 4489:
        -: 4490:**See also**
        -: 4491:
        -: 4492:- [jerry_array](#jerry_array)
        -: 4493:
        -: 4494:
        -: 4495:# Converters of 'jerry_value_t'
        -: 4496:
        -: 4497:Functions for converting API values to another value type.
        -: 4498:
        -: 4499:## jerry_value_to_boolean
        -: 4500:
        -: 4501:**Summary**
        -: 4502:
        -: 4503:Call ToBoolean operation on the api value.
        -: 4504:
        -: 4505:**Prototype**
        -: 4506:
        -: 4507:```c
        -: 4508:bool
        -: 4509:jerry_value_to_boolean (const jerry_value_t value);
        -: 4510:```
        -: 4511:
        -: 4512:- `value` - api value
        -: 4513:- return value
        -: 4514:  - true, if the logical value is true
        -: 4515:  - false, otherwise
        -: 4516:
        -: 4517:**Example**
        -: 4518:
        -: 4519:```c
        -: 4520:{
        -: 4521:  jerry_value_t value;
        -: 4522:  ... // create or copy value
        -: 4523:
        -: 4524:  bool b = jerry_value_to_boolean (value);
        -: 4525:
        -: 4526:  jerry_value_free (value);
        -: 4527:}
        -: 4528:
        -: 4529:```
        -: 4530:
        -: 4531:**See also**
        -: 4532:
        -: 4533:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4534:
        -: 4535:## jerry_value_to_number
        -: 4536:
        -: 4537:**Summary**
        -: 4538:
        -: 4539:Call ToNumber operation on the api value.
        -: 4540:
        -: 4541:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 4542:is no longer needed.
        -: 4543:
        -: 4544:**Prototype**
        -: 4545:
        -: 4546:```c
        -: 4547:jerry_value_t
        -: 4548:jerry_value_to_number (const jerry_value_t value);
        -: 4549:```
        -: 4550:
        -: 4551:- `value` - api value
        -: 4552:- return value
        -: 4553:  - converted number value, if success
        -: 4554:  - thrown exception, otherwise
        -: 4555:
        -: 4556:**Example**
        -: 4557:
        -: 4558:```c
        -: 4559:{
        -: 4560:  jerry_value_t value;
        -: 4561:  ... // create or copy value
        -: 4562:
        -: 4563:  jerry_value_t number_value = jerry_value_to_number (value);
        -: 4564:
        -: 4565:  jerry_value_free (number_value);
        -: 4566:  jerry_value_free (value);
        -: 4567:}
        -: 4568:
        -: 4569:```
        -: 4570:
        -: 4571:**See also**
        -: 4572:
        -: 4573:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4574:
        -: 4575:## jerry_value_to_object
        -: 4576:
        -: 4577:**Summary**
        -: 4578:
        -: 4579:Call ToObject operation on the api value.
        -: 4580:
        -: 4581:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 4582:is no longer needed.
        -: 4583:
        -: 4584:**Prototype**
        -: 4585:
        -: 4586:```c
        -: 4587:jerry_value_t
        -: 4588:jerry_value_to_object (const jerry_value_t value);
        -: 4589:```
        -: 4590:
        -: 4591:- `value` - api value
        -: 4592:- return value
        -: 4593:  - converted object value, if success
        -: 4594:  - thrown exception, otherwise
        -: 4595:
        -: 4596:**Example**
        -: 4597:
        -: 4598:```c
        -: 4599:{
        -: 4600:  jerry_value_t value;
        -: 4601:  ... // create or copy value
        -: 4602:
        -: 4603:  jerry_value_t object_value = jerry_value_to_object (value);
        -: 4604:
        -: 4605:  jerry_value_free (object_value);
        -: 4606:  jerry_value_free (value);
        -: 4607:}
        -: 4608:```
        -: 4609:
        -: 4610:**See also**
        -: 4611:
        -: 4612:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4613:
        -: 4614:## jerry_value_to_primitive
        -: 4615:
        -: 4616:**Summary**
        -: 4617:
        -: 4618:Call ToPrimitive operation on the api value.
        -: 4619:
        -: 4620:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 4621:is no longer needed.
        -: 4622:
        -: 4623:**Prototype**
        -: 4624:
        -: 4625:```c
        -: 4626:jerry_value_t
        -: 4627:jerry_value_to_primitive (const jerry_value_t value);
        -: 4628:```
        -: 4629:
        -: 4630:- `value` - api value
        -: 4631:- return value
        -: 4632:  - converted primitive value, if success
        -: 4633:  - thrown exception, otherwise
        -: 4634:
        -: 4635:**Example**
        -: 4636:
        -: 4637:```c
        -: 4638:{
        -: 4639:  jerry_value_t value;
        -: 4640:  ... // create or copy value
        -: 4641:
        -: 4642:  jerry_value_t prim_value = jerry_value_to_primitive (value);
        -: 4643:
        -: 4644:  jerry_value_free (prim_value);
        -: 4645:  jerry_value_free (value);
        -: 4646:}
        -: 4647:```
        -: 4648:
        -: 4649:**See also**
        -: 4650:
        -: 4651:- [jerry_value_t](#jerry_value_t)
        -: 4652:
        -: 4653:## jerry_value_to_string
        -: 4654:
        -: 4655:**Summary**
        -: 4656:
        -: 4657:Call the ToString ecma builtin operation on the api value.
        -: 4658:
        -: 4659:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 4660:is no longer needed.
        -: 4661:
        -: 4662:**Prototype**
        -: 4663:
        -: 4664:```c
        -: 4665:jerry_value_t
        -: 4666:jerry_value_to_string (const jerry_value_t value);
        -: 4667:```
        -: 4668:
        -: 4669:- `value` - api value
        -: 4670:- return value
        -: 4671:  - converted string value, if success
        -: 4672:  - thrown exception, otherwise
        -: 4673:
        -: 4674:**Example**
        -: 4675:
        -: 4676:```c
        -: 4677:{
        -: 4678:  jerry_value_t value;
        -: 4679:  ... // create or copy value
        -: 4680:
        -: 4681:  jerry_value_t string_value = jerry_value_to_string (value);
        -: 4682:
        -: 4683:  jerry_value_free (string_value);
        -: 4684:  jerry_value_free (value);
        -: 4685:}
        -: 4686:```
        -: 4687:
        -: 4688:**See also**
        -: 4689:
        -: 4690:- [jerry_value_to_primitive](#jerry_value_to_primitive)
        -: 4691:
        -: 4692:
        -: 4693:## jerry_value_to_bigint
        -: 4694:
        -: 4695:**Summary**
        -: 4696:
        -: 4697:Call the BigInt constructor ecma builtin operation on the api value.
        -: 4698:
        -: 4699:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 4700:is no longer needed.
        -: 4701:
        -: 4702:**Prototype**
        -: 4703:
        -: 4704:```c
        -: 4705:jerry_value_t
        -: 4706:jerry_value_to_bigint (const jerry_value_t value);
        -: 4707:```
        -: 4708:
        -: 4709:- `value` - api value
        -: 4710:- return value
        -: 4711:  - converted BigInt value, if success
        -: 4712:  - thrown exception, otherwise
        -: 4713:
        -: 4714:*New in version 2.4*.
        -: 4715:
        -: 4716:**Example**
        -: 4717:
        -: 4718:```c
        -: 4719:{
        -: 4720:  jerry_value_t value;
        -: 4721:  ... // create or copy value
        -: 4722:
        -: 4723:  jerry_value_t bigint_value = jerry_value_to_bigint (value);
        -: 4724:
        -: 4725:  jerry_value_free (bigint_value);
        -: 4726:  jerry_value_free (value);
        -: 4727:}
        -: 4728:```
        -: 4729:
        -: 4730:**See also**
        -: 4731:
        -: 4732:- [jerry_value_free](#jerry_value_free)
        -: 4733:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 4734:- [jerry_bigint_to_digits](#jerry_bigint_to_digits)
        -: 4735:
        -: 4736:## jerry_value_as_integer
        -: 4737:
        -: 4738:**Summary**
        -: 4739:
        -: 4740:Convert any number to integer number. Returns 0 if value is not number.
        -: 4741:Based on ECMA 262 v11 7.1.5
        -: 4742:
        -: 4743:**Prototype**
        -: 4744:
        -: 4745:```c
        -: 4746:double
        -: 4747:jerry_value_as_integer (const jerry_value_t value);
        -: 4748:```
        -: 4749:
        -: 4750:- `value` - api value
        -: 4751:- return
        -: 4752:  - 0, if value is not a number
        -: 4753:  - integer representation of the number, otherwise
        -: 4754:
        -: 4755:*New in version 2.4*.
        -: 4756:
        -: 4757:**Example**
        -: 4758:
        -: 4759:```c
        -: 4760:{
        -: 4761:  jerry_value_t number_val = jerry_number (123321);
        -: 4762:  double number = jerry_value_as_integer (number_val);
        -: 4763:  jerry_value_free (number_val);
        -: 4764:}
        -: 4765:```
        -: 4766:
        -: 4767:## jerry_value_as_int32
        -: 4768:
        -: 4769:**Summary**
        -: 4770:
        -: 4771:Convert any number to int32 number. Returns 0 if value is not number.
        -: 4772:Based on ECMA 262 v11 7.1.6
        -: 4773:
        -: 4774:**Prototype**
        -: 4775:
        -: 4776:```c
        -: 4777:int32_t
        -: 4778:jerry_value_as_int32 (const jerry_value_t value);
        -: 4779:```
        -: 4780:
        -: 4781:- `value` - api value
        -: 4782:- return
        -: 4783:  - 0, if value is not a number
        -: 4784:  - int32 representation of the number, otherwise
        -: 4785:
        -: 4786:*New in version 2.4*.
        -: 4787:
        -: 4788:**Example**
        -: 4789:
        -: 4790:```c
        -: 4791:{
        -: 4792:  jerry_value_t number_val = jerry_number (123321);
        -: 4793:  int32_t number = jerry_value_as_int32 (number_val);
        -: 4794:  jerry_value_free (number_val);
        -: 4795:}
        -: 4796:```
        -: 4797:
        -: 4798:## jerry_value_as_uint32
        -: 4799:
        -: 4800:**Summary**
        -: 4801:
        -: 4802:Convert any number to uint32 number. Returns 0 if value is not number.
        -: 4803:Based on ECMA 262 v11 7.1.7
        -: 4804:
        -: 4805:**Prototype**
        -: 4806:
        -: 4807:```c
        -: 4808:uint32_t
        -: 4809:jerry_value_as_uint32 (const jerry_value_t value);
        -: 4810:```
        -: 4811:
        -: 4812:- `value` - api value
        -: 4813:- return
        -: 4814:  - 0, if value is not a number
        -: 4815:  - uint32 representation of the number, otherwise
        -: 4816:
        -: 4817:*New in version 2.4*.
        -: 4818:
        -: 4819:**Example**
        -: 4820:
        -: 4821:```c
        -: 4822:{
        -: 4823:  jerry_value_t number_val = jerry_number (123321);
        -: 4824:  uint32_t number = jerry_value_as_uint32 (number_val);
        -: 4825:  jerry_value_free (number_val);
        -: 4826:}
        -: 4827:```
        -: 4828:
        -: 4829:# Functions for module objects
        -: 4830:
        -: 4831:These APIs all depend on module support.
        -: 4832:
        -: 4833:## jerry_module_link
        -: 4834:
        -: 4835:**Summary**
        -: 4836:
        -: 4837:Link modules to their dependencies. The dependencies are resolved by a user callback.
        -: 4838:
        -: 4839:*Notes*:
        -: 4840:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 4841:  is no longer needed.
        -: 4842:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 4843:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 4844:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 4845:
        -: 4846:**Prototype**
        -: 4847:
        -: 4848:```c
        -: 4849:jerry_value_t jerry_module_link (const jerry_value_t module_val,
        -: 4850:                                 jerry_module_resolve_cb_t callback, void *user_p)
        -: 4851:```
        -: 4852:
        -: 4853:- `module_val` - module object in unlinked state
        -: 4854:- `callback` - user callback which is called to resolve dependencies,
        -: 4855:               uses `jerry_port_module_resolve` when NULL is passed
        -: 4856:- `user_p` - user pointer passed to the callback
        -: 4857:- return
        -: 4858:  - true - if linking is successful
        -: 4859:  - exception - otherwise
        -: 4860:
        -: 4861:*New in version [[NEXT_RELEASE]]*.
        -: 4862:
        -: 4863:**Example**
        -: 4864:
        -: 4865:[doctest]: # (test="compile")
        -: 4866:
        -: 4867:```c
        -: 4868:#include <jerryscript.h>
        -: 4869:
        -: 4870:static jerry_value_t
    #####: 4871:module_resolve_callback (const jerry_value_t specifier,
        -: 4872:                         const jerry_value_t referrer,
        -: 4873:                         void *user_data_p)
        -: 4874:{
        -: 4875:  /* In this case, the specifier contains 'b.mjs', and the referrer is the module
        -: 4876:   * created in the main() function below. Normally the specifier string should be
        -: 4877:   * extended to a full file system path, and it should be checked whether a module
        -: 4878:   * corresponding to this path has been loaded already. For simplicity, this function
        -: 4879:   * returns with a new module. */
        -: 4880:
    #####: 4881:  const jerry_char_t script[] = "export var a = 5";
        -: 4882:
        -: 4883:  jerry_parse_options_t parse_options;
    #####: 4884:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_SOURCE_NAME;
    #####: 4885:  parse_options.source_name = jerry_string_sz ("b.mjs");
        -: 4886:
    #####: 4887:  jerry_value_t result = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 4888:  jerry_value_free (parse_options.source_name);
    #####: 4889:  return result;
        -: 4890:} /* module_resolve_callback */
        -: 4891:
        -: 4892:int
    #####: 4893:main (void)
        -: 4894:{
    #####: 4895:  jerry_init (JERRY_INIT_EMPTY);
        -: 4896:
    #####: 4897:  const jerry_char_t script[] = "import a from 'b.mjs'";
        -: 4898:
        -: 4899:  jerry_parse_options_t parse_options;
    #####: 4900:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_SOURCE_NAME;
    #####: 4901:  parse_options.source_name = jerry_string_sz ("a.mjs");
        -: 4902:
    #####: 4903:  jerry_value_t ret_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 4904:  jerry_value_free (parse_options.source_name);
        -: 4905:
    #####: 4906:  jerry_module_link (ret_value, module_resolve_callback, NULL);
        -: 4907:
    #####: 4908:  jerry_value_free (ret_value);
        -: 4909:
    #####: 4910:  jerry_cleanup ();
        -: 4911:  return 0;
        -: 4912:}
        -: 4913:```
        -: 4914:
        -: 4915:**See also**
        -: 4916:- [jerry_module_resolve_cb_t](#jerry_module_resolve_cb_t)
        -: 4917:
        -: 4918:## jerry_module_evaluate
        -: 4919:
        -: 4920:Evaluate a module and its dependencies. The module must be in linked state.
        -: 4921:
        -: 4922:*Notes*:
        -: 4923:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 4924:  when it is no longer needed.
        -: 4925:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 4926:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 4927:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 4928:
        -: 4929:**Prototype**
        -: 4930:
        -: 4931:```c
        -: 4932:jerry_value_t jerry_module_evaluate (const jerry_value_t module_val);
        -: 4933:```
        -: 4934:
        -: 4935:- `module_val` - module object
        -: 4936:- return
        -: 4937:  - result of module bytecode execution - if evaluation was successful
        -: 4938:  - exception, otherwise
        -: 4939:
        -: 4940:*New in version [[NEXT_RELEASE]]*.
        -: 4941:
        -: 4942:**Example**
        -: 4943:
        -: 4944:[doctest]: # (test="compile")
        -: 4945:
        -: 4946:```c
        -: 4947:#include <jerryscript.h>
        -: 4948:#include <stdio.h>
        -: 4949:
        -: 4950:int
    #####: 4951:main (void)
        -: 4952:{
    #####: 4953:  jerry_init (JERRY_INIT_EMPTY);
        -: 4954:
    #####: 4955:  const jerry_char_t script[] = "export var a = 6";
        -: 4956:
        -: 4957:  jerry_parse_options_t parse_options;
    #####: 4958:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_SOURCE_NAME;
    #####: 4959:  parse_options.source_name = jerry_string_sz ("a.mjs");
        -: 4960:
    #####: 4961:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 4962:  jerry_value_free (parse_options.source_name);
        -: 4963:
    #####: 4964:  jerry_value_free (jerry_module_link (module_value, NULL, NULL));
    #####: 4965:  jerry_value_free (jerry_module_evaluate (module_value));
        -: 4966:
    #####: 4967:  jerry_value_free (module_value);
        -: 4968:
    #####: 4969:  jerry_cleanup ();
        -: 4970:  return 0;
        -: 4971:}
        -: 4972:```
        -: 4973:
        -: 4974:**See also**
        -: 4975:
        -: 4976:- [jerry_module_link](#jerry_module_link)
        -: 4977:
        -: 4978:## jerry_module_state
        -: 4979:
        -: 4980:**Summary**
        -: 4981:
        -: 4982:Returns the current status of a module. The available values
        -: 4983:are listed in [jerry_module_state_t](#jerry_module_state_t)
        -: 4984:
        -: 4985:*Notes*:
        -: 4986:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 4987:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 4988:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 4989:
        -: 4990:**Prototype**
        -: 4991:
        -: 4992:```c
        -: 4993:jerry_module_state_t jerry_module_state (const jerry_value_t module_val);
        -: 4994:```
        -: 4995:
        -: 4996:- `module_val` - module object
        -: 4997:- return
        -: 4998:  - current status - if module_val is a module
        -: 4999:  - JERRY_MODULE_STATE_INVALID - otherwise
        -: 5000:
        -: 5001:*New in version [[NEXT_RELEASE]]*.
        -: 5002:
        -: 5003:**Example**
        -: 5004:
        -: 5005:[doctest]: # (test="compile")
        -: 5006:
        -: 5007:```c
        -: 5008:#include <jerryscript.h>
        -: 5009:#include <stdio.h>
        -: 5010:
        -: 5011:int
    #####: 5012:main (void)
        -: 5013:{
    #####: 5014:  jerry_init (JERRY_INIT_EMPTY);
        -: 5015:
    #####: 5016:  const jerry_char_t script[] = "import a from 'b.mjs'";
        -: 5017:
        -: 5018:  jerry_parse_options_t parse_options;
    #####: 5019:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_SOURCE_NAME;
    #####: 5020:  parse_options.source_name = jerry_string_sz ("a.mjs");
        -: 5021:
    #####: 5022:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5023:  jerry_value_free (parse_options.source_name);
        -: 5024:
    #####: 5025:  if (jerry_module_state (module_value) == JERRY_MODULE_STATE_UNLINKED)
        -: 5026:  {
        -: 5027:    printf ("Module parsing has been successful\n");
        -: 5028:  }
        -: 5029:
    #####: 5030:  jerry_value_free (module_value);
        -: 5031:
    #####: 5032:  jerry_cleanup ();
        -: 5033:  return 0;
        -: 5034:}
        -: 5035:```
        -: 5036:
        -: 5037:**See also**
        -: 5038:
        -: 5039:- [jerry_module_state_t](#jerry_module_state_t)
        -: 5040:
        -: 5041:## jerry_module_on_state_changed
        -: 5042:
        -: 5043:**Summary**
        -: 5044:
        -: 5045:Sets a callback which is called after a module state is changed to linked, evaluated, or error.
        -: 5046:
        -: 5047:*Notes*:
        -: 5048:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5049:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5050:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 5051:
        -: 5052:**Prototype**
        -: 5053:
        -: 5054:```c
        -: 5055:void jerry_module_on_state_changed (jerry_module_state_changed_cb_t callback,
        -: 5056:                                    void *user_p);
        -: 5057:```
        -: 5058:
        -: 5059:- `callback` - callback, which is called after the state change.
        -: 5060:- `user_p` - pointer passed to the callback function.
        -: 5061:
        -: 5062:*New in version [[NEXT_RELEASE]]*.
        -: 5063:
        -: 5064:**Example**
        -: 5065:
        -: 5066:[doctest]: # (test="compile")
        -: 5067:
        -: 5068:```c
        -: 5069:#include <jerryscript.h>
        -: 5070:#include <stdio.h>
        -: 5071:
        -: 5072:static void
    #####: 5073:module_state_changed (jerry_module_state_t new_state, /**< new state of the module */
        -: 5074:                      const jerry_value_t module_val, /**< a module whose state is changed */
        -: 5075:                      const jerry_value_t value, /**< value argument */
        -: 5076:                      void *user_p) /**< user pointer */
        -: 5077:{
        -: 5078:  (void) module_val;
        -: 5079:  (void) value;
        -: 5080:  (void) user_p;
        -: 5081:
    #####: 5082:  if (new_state == JERRY_MODULE_STATE_LINKED)
        -: 5083:  {
        -: 5084:    printf ("A module is entered into linked state\n");
        -: 5085:  }
    #####: 5086:} /* module_state_changed */
        -: 5087:
        -: 5088:int
    #####: 5089:main (void)
        -: 5090:{
    #####: 5091:  jerry_init (JERRY_INIT_EMPTY);
        -: 5092:
    #####: 5093:  const jerry_char_t script[] = "12";
        -: 5094:
    #####: 5095:  jerry_module_on_state_changed (module_state_changed, NULL);
        -: 5096:
        -: 5097:  jerry_parse_options_t parse_options;
    #####: 5098:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_SOURCE_NAME;
    #####: 5099:  parse_options.source_name = jerry_string_sz ("a.mjs");
        -: 5100:
    #####: 5101:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5102:  jerry_value_free (parse_options.source_name);
        -: 5103:
    #####: 5104:  jerry_value_free (jerry_module_link (module_value, NULL, NULL));
        -: 5105:
    #####: 5106:  jerry_value_free (module_value);
        -: 5107:
    #####: 5108:  jerry_cleanup ();
        -: 5109:  return 0;
        -: 5110:}
        -: 5111:```
        -: 5112:
        -: 5113:**See also**
        -: 5114:
        -: 5115:- [jerry_module_state_t](#jerry_module_state_t)
        -: 5116:- [jerry_module_state_changed_cb_t](#jerry_module_state_changed_cb_t)
        -: 5117:
        -: 5118:## jerry_module_on_import_meta
        -: 5119:
        -: 5120:**Summary**
        -: 5121:
        -: 5122:Sets a callback which is called when an import.meta expression of a module is evaluated the first time.
        -: 5123:
        -: 5124:*Notes*:
        -: 5125:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5126:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5127:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 5128:
        -: 5129:**Prototype**
        -: 5130:
        -: 5131:```c
        -: 5132:void jerry_module_on_import_meta (jerry_module_import_meta_cb_t callback,
        -: 5133:                                  void *user_p);
        -: 5134:```
        -: 5135:
        -: 5136:- `callback` - callback, which is called when an import.meta
        -: 5137:               expression of a module is evaluated the first time
        -: 5138:- `user_p` - pointer passed to the callback function.
        -: 5139:
        -: 5140:*New in version [[NEXT_RELEASE]]*.
        -: 5141:
        -: 5142:**Example**
        -: 5143:
        -: 5144:[doctest]: # (test="compile")
        -: 5145:
        -: 5146:```c
        -: 5147:#include <jerryscript.h>
        -: 5148:#include <stdio.h>
        -: 5149:
        -: 5150:static void
    #####: 5151:module_import_meta_callback (const jerry_value_t module, /**< module */
        -: 5152:                             const jerry_value_t meta_object, /**< import.meta object */
        -: 5153:                             void *user_p) /**< user pointer */
        -: 5154:{
        -: 5155:  (void) user_p;
        -: 5156:
        -: 5157:  /* Create a property for the meta object */
    #####: 5158:  jerry_value_t property_name_value = jerry_string_sz ("prop");
    #####: 5159:  jerry_value_t property_value = jerry_string_sz ("prop");
    #####: 5160:  jerry_value_t result_value = jerry_object_set (meta_object, property_name_value, property_value);
    #####: 5161:  jerry_value_free (result_value);
    #####: 5162:  jerry_value_free (property_value);
    #####: 5163:  jerry_value_free (property_name_value);
    #####: 5164:} /* module_import_meta_callback */
        -: 5165:
        -: 5166:int
    #####: 5167:main (void)
        -: 5168:{
    #####: 5169:  jerry_init (JERRY_INIT_EMPTY);
        -: 5170:
    #####: 5171:  const jerry_char_t script[] = "import.meta";
        -: 5172:
    #####: 5173:  jerry_module_on_import_meta (module_import_meta_callback, NULL);
        -: 5174:
        -: 5175:  jerry_parse_options_t parse_options;
    #####: 5176:  parse_options.options = JERRY_PARSE_MODULE;
        -: 5177:
    #####: 5178:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
        -: 5179:
    #####: 5180:  jerry_value_free (jerry_module_link (module_value, NULL, NULL));
    #####: 5181:  jerry_value_free (jerry_module_evaluate (module_value));
        -: 5182:
    #####: 5183:  jerry_value_free (module_value);
        -: 5184:
    #####: 5185:  jerry_cleanup ();
        -: 5186:  return 0;
        -: 5187:}
        -: 5188:```
        -: 5189:
        -: 5190:**See also**
        -: 5191:
        -: 5192:- [jerry_module_import_meta_cb_t](#jerry_module_import_meta_cb_t)
        -: 5193:
        -: 5194:## jerry_module_request_count
        -: 5195:
        -: 5196:**Summary**
        -: 5197:
        -: 5198:Returns the number of import/export requests of a module.
        -: 5199:The requests can be queried by [jerry_module_request](#jerry_module_request).
        -: 5200:
        -: 5201:
        -: 5202:*Notes*:
        -: 5203:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5204:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5205:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 5206:
        -: 5207:**Prototype**
        -: 5208:
        -: 5209:```c
        -: 5210:size_t jerry_module_request_count (const jerry_value_t module_val);
        -: 5211:```
        -: 5212:
        -: 5213:- `module_val` - module object
        -: 5214:- return
        -: 5215:  - number of import/export requests of a module, if `module_val` is module,
        -: 5216:  - 0, otherwise
        -: 5217:
        -: 5218:*New in version [[NEXT_RELEASE]]*.
        -: 5219:
        -: 5220:**Example**
        -: 5221:
        -: 5222:[doctest]: # (test="compile")
        -: 5223:
        -: 5224:```c
        -: 5225:#include <jerryscript.h>
        -: 5226:#include <stdio.h>
        -: 5227:
        -: 5228:int
    #####: 5229:main (void)
        -: 5230:{
    #####: 5231:  jerry_init (JERRY_INIT_EMPTY);
        -: 5232:
    #####: 5233:  const jerry_char_t script[] = "export * from 'b.mjs'"
        -: 5234:                                "import a from 'c.mjs'";
        -: 5235:
        -: 5236:  jerry_parse_options_t parse_options;
    #####: 5237:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_SOURCE_NAME;
    #####: 5238:  parse_options.source_name = jerry_string_sz ("a.mjs");
        -: 5239:
    #####: 5240:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5241:  jerry_value_free (parse_options.source_name);
        -: 5242:
        -: 5243:  /* Prints 2. */
    #####: 5244:  printf ("Number of requests: %d\n", (int) jerry_module_request_count (module_value));
        -: 5245:
    #####: 5246:  jerry_value_free (module_value);
        -: 5247:
    #####: 5248:  jerry_cleanup ();
        -: 5249:  return 0;
        -: 5250:}
        -: 5251:```
        -: 5252:
        -: 5253:**See also**
        -: 5254:
        -: 5255:- [jerry_module_request](#jerry_module_request)
        -: 5256:- [jerry_parse](#jerry_parse)
        -: 5257:- [jerry_module_link](#jerry_module_link)
        -: 5258:
        -: 5259:## jerry_module_request
        -: 5260:
        -: 5261:**Summary**
        -: 5262:
        -: 5263:Returns the module request specified by the `request_index` argument. The requests
        -: 5264:are ordered in source code occurrence. When parsing is completed, all returned values
        -: 5265:are strings. If [jerry_module_link](#jerry_module_link) is completed successfully
        -: 5266:all returned values are module objects instead. If linking is in progress or fails,
        -: 5267:the successfully resolved dependencies are module objects, the rest are strings.
        -: 5268:The number of requests can be queried by
        -: 5269:[jerry_module_request_count](#jerry_module_request_count).
        -: 5270:
        -: 5271:*Notes*:
        -: 5272:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 5273:  when it is no longer needed.
        -: 5274:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5275:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5276:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 5277:
        -: 5278:**Prototype**
        -: 5279:
        -: 5280:```c
        -: 5281:jerry_value_t jerry_module_request (const jerry_value_t module_val, size_t request_index);
        -: 5282:```
        -: 5283:
        -: 5284:- `module_val` - module object
        -: 5285:- return
        -: 5286:  - string, if the request has not been resolved yet
        -: 5287:  - module object, if the request has been resolved successfully
        -: 5288:  - exception, otherwise
        -: 5289:
        -: 5290:*New in version [[NEXT_RELEASE]]*.
        -: 5291:
        -: 5292:**Example**
        -: 5293:
        -: 5294:[doctest]: # (test="compile")
        -: 5295:
        -: 5296:```c
        -: 5297:#include <jerryscript.h>
        -: 5298:
        -: 5299:int
    #####: 5300:main (void)
        -: 5301:{
    #####: 5302:  jerry_init (JERRY_INIT_EMPTY);
        -: 5303:
    #####: 5304:  const jerry_char_t script[] = "export * from 'b.mjs'"
        -: 5305:                                "import a from 'c.mjs'";
        -: 5306:  const jerry_char_t file[] = "a.mjs";
        -: 5307:
        -: 5308:  jerry_parse_options_t parse_options;
    #####: 5309:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_SOURCE_NAME;
    #####: 5310:  parse_options.source_name = jerry_string_sz ("a.mjs");
        -: 5311:
    #####: 5312:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5313:  jerry_value_free (parse_options.source_name);
        -: 5314:
    #####: 5315:  jerry_value_t request_value = jerry_module_request (module_value, 0);
        -: 5316:  /* Returns with b.mjs */
    #####: 5317:  jerry_value_free (request_value);
        -: 5318:
    #####: 5319:  request_value = jerry_module_request (module_value, 1);
        -: 5320:  /* Returns with c.mjs */
    #####: 5321:  jerry_value_free (request_value);
        -: 5322:
    #####: 5323:  jerry_value_free (module_value);
        -: 5324:
    #####: 5325:  jerry_cleanup ();
        -: 5326:  return 0;
        -: 5327:}
        -: 5328:```
        -: 5329:
        -: 5330:**See also**
        -: 5331:
        -: 5332:- [jerry_module_request_count](#jerry_module_request_count)
        -: 5333:- [jerry_parse](#jerry_parse)
        -: 5334:- [jerry_module_link](#jerry_module_link)
        -: 5335:
        -: 5336:## jerry_module_namespace
        -: 5337:
        -: 5338:Returns the namespace object of a module
        -: 5339:
        -: 5340:*Notes*:
        -: 5341:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 5342:  when it is no longer needed.
        -: 5343:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5344:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5345:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 5346:
        -: 5347:**Prototype**
        -: 5348:
        -: 5349:```c
        -: 5350:jerry_value_t jerry_module_namespace (const jerry_value_t module_val);
        -: 5351:```
        -: 5352:
        -: 5353:- `module_val` - module object
        -: 5354:- return
        -: 5355:  - object, if namespace object is available
        -: 5356:  - exception, otherwise
        -: 5357:
        -: 5358:*New in version [[NEXT_RELEASE]]*.
        -: 5359:
        -: 5360:**Example**
        -: 5361:
        -: 5362:[doctest]: # (test="compile")
        -: 5363:
        -: 5364:```c
        -: 5365:#include <jerryscript.h>
        -: 5366:#include <stdio.h>
        -: 5367:
        -: 5368:int
    #####: 5369:main (void)
        -: 5370:{
    #####: 5371:  jerry_init (JERRY_INIT_EMPTY);
        -: 5372:
    #####: 5373:  const jerry_char_t script[] = "export var a = 6";
        -: 5374:
        -: 5375:  jerry_parse_options_t parse_options;
    #####: 5376:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_SOURCE_NAME;
    #####: 5377:  parse_options.source_name = jerry_string_sz ("a.mjs");
        -: 5378:
    #####: 5379:  jerry_value_t module_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5380:  jerry_value_free (parse_options.source_name);
        -: 5381:
    #####: 5382:  jerry_value_free (jerry_module_link (module_value, NULL, NULL));
    #####: 5383:  jerry_value_free (jerry_module_evaluate (module_value));
        -: 5384:
    #####: 5385:  jerry_value_t namespace_value = jerry_module_namespace (module_value);
        -: 5386:
        -: 5387:  /* Exports can be checked. */
        -: 5388:
    #####: 5389:  jerry_value_free (namespace_value);
    #####: 5390:  jerry_value_free (module_value);
        -: 5391:
    #####: 5392:  jerry_cleanup ();
        -: 5393:  return 0;
        -: 5394:}
        -: 5395:```
        -: 5396:
        -: 5397:**See also**
        -: 5398:
        -: 5399:- [jerry_module_link](#jerry_module_link)
        -: 5400:- [jerry_module_evaluate](#jerry_module_evaluate)
        -: 5401:
        -: 5402:## jerry_module_on_import
        -: 5403:
        -: 5404:Sets the callback which is called when dynamic imports are resolved. The resolver
        -: 5405:receives the `user_value` assigned to the currently executed script, which should
        -: 5406:provide all the information that is necessary for the resolve.
        -: 5407:
        -: 5408:*Notes*:
        -: 5409:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5410:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5411:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 5412:- The possible return values of the callback is explained
        -: 5413:  in [jerry_module_import_cb_t](#jerry_module_import_cb_t)
        -: 5414:
        -: 5415:**Prototype**
        -: 5416:
        -: 5417:```c
        -: 5418:void
        -: 5419:jerry_module_on_import (jerry_module_import_cb_t callback_p,
        -: 5420:                        void *user_p)
        -: 5421:```
        -: 5422:
        -: 5423:- `callback_p` - a [jerry_module_import_cb_t](#jerry_module_import_cb_t) callback which handles `import()` calls
        -: 5424:- `user_p` - user pointer passed to the callback
        -: 5425:
        -: 5426:*New in version [[NEXT_RELEASE]]*.
        -: 5427:
        -: 5428:**Example**
        -: 5429:
        -: 5430:[doctest]: # (test="compile")
        -: 5431:
        -: 5432:```c
        -: 5433:#include <jerryscript.h>
        -: 5434:#include <stdio.h>
        -: 5435:
        -: 5436:typedef struct {
        -: 5437:  jerry_value_t specifier;
        -: 5438:  jerry_value_t user_value;
        -: 5439:  jerry_value_t promise;
        -: 5440:} resolve_module_task_t;
        -: 5441:
        -: 5442:static jerry_value_t
    #####: 5443:resolve_dynamic (const jerry_value_t specifier, /**< module specifier */
        -: 5444:                 const jerry_value_t user_value, /**< user value assigned to the script */
        -: 5445:                 void *user_p) /**< user data */
        -: 5446:{
        -: 5447:  /* If the specified module has already been evaluated, this callback can
        -: 5448:   * return with it and the promise creation is automatically done by the engine.
        -: 5449:   * Otherwise the application usually adds a resolve task to a command queue. */
        -: 5450:
        -: 5451:  /* This very simple command queue supports only one task. */
    #####: 5452:  resolve_module_task_t *task_p = (resolve_module_task_t *) user_p;
    #####: 5453:  task_p->specifier = jerry_value_copy (specifier);
    #####: 5454:  task_p->user_value = jerry_value_copy (user_value);
        -: 5455:
        -: 5456:  /* This Promise should be evaluated later. */
    #####: 5457:  jerry_value_t promise = jerry_promise ();
    #####: 5458:  task_p->promise = jerry_value_copy (promise);
    #####: 5459:  return promise;
        -: 5460:}
        -: 5461:
        -: 5462:int
    #####: 5463:main (void)
        -: 5464:{
    #####: 5465:  jerry_init (JERRY_INIT_EMPTY);
        -: 5466:
        -: 5467:  resolve_module_task_t task;
    #####: 5468:  jerry_module_on_import (resolve_dynamic, &task);
        -: 5469:
    #####: 5470:  const jerry_char_t script[] = "import('modules/my_module.mjs').then(\n"
        -: 5471:                                "  function (namespace) { /* use namespace */},\n"
        -: 5472:                                "  function (error) { /* handle error */}\n"
        -: 5473:                                ")";
        -: 5474:
        -: 5475:  jerry_parse_options_t parse_options;
    #####: 5476:  parse_options.options = JERRY_PARSE_HAS_SOURCE_NAME | JERRY_PARSE_HAS_USER_VALUE;
        -: 5477:
        -: 5478:  /* Resource is usually used for debugging purposes, e.g. for generating backtrace. */
    #####: 5479:  parse_options.source_name = jerry_string_sz ("dir/my_script.js");
        -: 5480:
        -: 5481:  /* User value should provide information for resolving dynamic imports.
        -: 5482:   * In this case it contains the full path excluding the filename. */
    #####: 5483:  parse_options.user_value = jerry_string_sz ("/home/user/dir");
        -: 5484:
    #####: 5485:  jerry_value_t script_value = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####: 5486:  jerry_value_free (parse_options.source_name);
    #####: 5487:  jerry_value_free (parse_options.user_value);
    #####: 5488:  jerry_value_free (jerry_run (script_value));
    #####: 5489:  jerry_value_free (script_value);
        -: 5490:
        -: 5491:  /* The application resolves both the module and the promise using the specifier
        -: 5492:   * and the user_value. In this example the specifier is modules/my_module.mjs. */
    #####: 5493:  const jerry_char_t module_script[] = "export var a = 5";
        -: 5494:
    #####: 5495:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_SOURCE_NAME | JERRY_PARSE_HAS_USER_VALUE;
    #####: 5496:  parse_options.source_name = jerry_string_sz ("modules/my_module.mjs");
    #####: 5497:  parse_options.user_value = jerry_string_sz ("/home/user/dir/modules");
        -: 5498:
    #####: 5499:  jerry_value_t module_value = jerry_parse (module_script, sizeof (module_script) - 1, &parse_options);
    #####: 5500:  jerry_value_free (parse_options.source_name);
    #####: 5501:  jerry_value_free (parse_options.user_value);
    #####: 5502:  jerry_value_free (jerry_module_link (module_value, NULL, NULL));
    #####: 5503:  jerry_value_free (jerry_module_evaluate (module_value));
        -: 5504:
        -: 5505:  /* The promise must be resolved with the namespace object, not the module. */
    #####: 5506:  jerry_value_t namespace_value = jerry_module_namespace (module_value);
    #####: 5507:  jerry_value_free (jerry_promise_resolve (task.promise, namespace_value));
        -: 5508:
    #####: 5509:  jerry_value_free (namespace_value);
    #####: 5510:  jerry_value_free (module_value);
    #####: 5511:  jerry_value_free (task.specifier);
    #####: 5512:  jerry_value_free (task.user_value);
    #####: 5513:  jerry_value_free (task.promise);
        -: 5514:
        -: 5515:  /* Process promise handlers. */
    #####: 5516:  jerry_value_free (jerry_run_jobs ());
        -: 5517:
    #####: 5518:  jerry_cleanup ();
        -: 5519:  return 0;
        -: 5520:}
        -: 5521:```
        -: 5522:
        -: 5523:**See also**
        -: 5524:- [jerry_module_import_cb_t](#jerry_module_import_cb_t)
        -: 5525:
        -: 5526:## jerry_native_module
        -: 5527:
        -: 5528:Creates a native module with a list of exports. The initial state of the module is linked.
        -: 5529:
        -: 5530:*Notes*:
        -: 5531:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 5532:  when it is no longer needed.
        -: 5533:- Native pointers can be used to assign private data to a native module,
        -: 5534:  see [jerry_object_set_native_ptr](#jerry_object_set_native_ptr)
        -: 5535:- When `callback` is `NULL`, no function is called when the module is evaluated,
        -: 5536:  only its state is changed to evaluated.
        -: 5537:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5538:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5539:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 5540:
        -: 5541:**Prototype**
        -: 5542:
        -: 5543:```c
        -: 5544:jerry_value_t
        -: 5545:jerry_native_module (jerry_native_module_evaluate_cb_t callback,
        -: 5546:                     const jerry_value_t * const exports_p,
        -: 5547:                     size_t number_of_exports);
        -: 5548:```
        -: 5549:
        -: 5550:- `callback` - a [jerry_native_module_evaluate_cb_t](#jerry_native_module_evaluate_cb_t) callback
        -: 5551:               which is called by [jerry_module_evaluate](#jerry_module_evaluate) to evaluate the native module.
        -: 5552:- `exports_p` - list of the exported bindings of the module, must be valid string identifiers.
        -: 5553:- `number_of_exports` - number of exports in the `exports_p` list.
        -: 5554:- return
        -: 5555:  - a native module, if the module is successfully created
        -: 5556:  - exception, otherwise
        -: 5557:
        -: 5558:*New in version [[NEXT_RELEASE]]*.
        -: 5559:
        -: 5560:**Example**
        -: 5561:
        -: 5562:[doctest]: # (test="compile")
        -: 5563:
        -: 5564:```c
        -: 5565:#include <jerryscript.h>
        -: 5566:
        -: 5567:int
    #####: 5568:main (void)
        -: 5569:{
    #####: 5570:  jerry_init (JERRY_INIT_EMPTY);
        -: 5571:
    #####: 5572:  jerry_value_t exports[2] =
        -: 5573:  {
    #####: 5574:    jerry_string_sz ("first_export"),
    #####: 5575:    jerry_string_sz ("second_export")
        -: 5576:  };
        -: 5577:
    #####: 5578:  jerry_value_t native_module = jerry_native_module (NULL, exports, 2);
        -: 5579:
    #####: 5580:  jerry_value_free (exports[0]);
    #####: 5581:  jerry_value_free (exports[1]);
    #####: 5582:  jerry_value_free (native_module);
        -: 5583:
    #####: 5584:  jerry_cleanup ();
        -: 5585:  return 0;
        -: 5586:}
        -: 5587:```
        -: 5588:
        -: 5589:**See also**
        -: 5590:
        -: 5591:- [jerry_module_link](#jerry_module_link)
        -: 5592:- [jerry_module_evaluate](#jerry_module_evaluate)
        -: 5593:- [jerry_native_module_get](#jerry_native_module_get)
        -: 5594:- [jerry_native_module_set](#jerry_native_module_set)
        -: 5595:
        -: 5596:## jerry_native_module_get
        -: 5597:
        -: 5598:Gets the value of an export binding which belongs to a native module.
        -: 5599:
        -: 5600:*Notes*:
        -: 5601:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 5602:  when it is no longer needed.
        -: 5603:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5604:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5605:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 5606:
        -: 5607:**Prototype**
        -: 5608:
        -: 5609:```c
        -: 5610:jerry_value_t
        -: 5611:jerry_native_module_get (const jerry_value_t native_module_val,
        -: 5612:                         const jerry_value_t export_name_val);
        -: 5613:```
        -: 5614:
        -: 5615:- `native_module_val` - a native module object.
        -: 5616:- `export_name_val` - string identifier of the export.
        -: 5617:- return
        -: 5618:  - value of the export, if success
        -: 5619:  - exception, otherwise
        -: 5620:
        -: 5621:*New in version [[NEXT_RELEASE]]*.
        -: 5622:
        -: 5623:**Example**
        -: 5624:
        -: 5625:[doctest]: # (test="compile")
        -: 5626:
        -: 5627:```c
        -: 5628:#include <jerryscript.h>
        -: 5629:
        -: 5630:int
    #####: 5631:main (void)
        -: 5632:{
    #####: 5633:  jerry_init (JERRY_INIT_EMPTY);
        -: 5634:
    #####: 5635:  jerry_value_t export = jerry_string_sz ("an_export");
        -: 5636:
    #####: 5637:  jerry_value_t native_module = jerry_native_module (NULL, &export, 1);
        -: 5638:
    #####: 5639:  jerry_value_t value = jerry_native_module_get (native_module, export);
    #####: 5640:  jerry_value_free (value);
        -: 5641:
    #####: 5642:  jerry_value_free (export);
    #####: 5643:  jerry_value_free (native_module);
        -: 5644:
    #####: 5645:  jerry_cleanup ();
        -: 5646:  return 0;
        -: 5647:}
        -: 5648:```
        -: 5649:
        -: 5650:**See also**
        -: 5651:
        -: 5652:- [jerry_native_module](#jerry_native_module)
        -: 5653:- [jerry_native_module_set](#jerry_native_module_set)
        -: 5654:
        -: 5655:## jerry_native_module_set
        -: 5656:
        -: 5657:Sets the value of an export binding which belongs to a native module.
        -: 5658:
        -: 5659:*Notes*:
        -: 5660:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 5661:  when it is no longer needed.
        -: 5662:- This API depends on a build option (`JERRY_MODULE_SYSTEM`) and can be checked
        -: 5663:  in runtime with the `JERRY_FEATURE_MODULE` feature enum value,
        -: 5664:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 5665:
        -: 5666:**Prototype**
        -: 5667:
        -: 5668:```c
        -: 5669:jerry_value_t
        -: 5670:jerry_value_t jerry_native_module_set (const jerry_value_t native_module_val,
        -: 5671:                                       const jerry_value_t export_name_val,
        -: 5672:                                       const jerry_value_t value_to_set)
        -: 5673:```
        -: 5674:
        -: 5675:- `native_module_val` - a native module object.
        -: 5676:- `export_name_val` - string identifier of the export.
        -: 5677:- `value_to_set` - new value of the export.
        -: 5678:- return
        -: 5679:  - true, if success
        -: 5680:  - exception, otherwise
        -: 5681:
        -: 5682:*New in version [[NEXT_RELEASE]]*.
        -: 5683:
        -: 5684:**Example**
        -: 5685:
        -: 5686:[doctest]: # (test="compile")
        -: 5687:
        -: 5688:```c
        -: 5689:#include <jerryscript.h>
        -: 5690:
        -: 5691:int
    #####: 5692:main (void)
        -: 5693:{
    #####: 5694:  jerry_init (JERRY_INIT_EMPTY);
        -: 5695:
    #####: 5696:  jerry_value_t export = jerry_string_sz ("an_export");
        -: 5697:
    #####: 5698:  jerry_value_t native_module = jerry_native_module (NULL, &export, 1);
        -: 5699:
    #####: 5700:  jerry_value_t number = jerry_number (3.5);
    #####: 5701:  jerry_value_t value = jerry_native_module_set (native_module, export, number);
    #####: 5702:  jerry_value_free (value);
    #####: 5703:  jerry_value_free (number);
        -: 5704:
    #####: 5705:  jerry_value_free (export);
    #####: 5706:  jerry_value_free (native_module);
        -: 5707:
    #####: 5708:  jerry_cleanup ();
        -: 5709:  return 0;
        -: 5710:}
        -: 5711:```
        -: 5712:
        -: 5713:**See also**
        -: 5714:
        -: 5715:- [jerry_native_module](#jerry_native_module)
        -: 5716:- [jerry_native_module_get](#jerry_native_module_get)
        -: 5717:
        -: 5718:# Functions for promise objects
        -: 5719:
        -: 5720:These APIs all depend on the es.next profile (or on some build options).
        -: 5721:
        -: 5722:## jerry_promise_result
        -: 5723:
        -: 5724:**Summary**
        -: 5725:
        -: 5726:The function returns the result of a Promise object.
        -: 5727:
        -: 5728:*Notes*:
        -: 5729:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 5730:  is no longer needed.
        -: 5731:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 5732:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 5733:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 5734:- The es.next profile enables this by default.
        -: 5735:
        -: 5736:
        -: 5737:**Prototype**
        -: 5738:
        -: 5739:```c
        -: 5740:jerry_value_t
        -: 5741:jerry_promise_result (const jerry_value_t promise);
        -: 5742:```
        -: 5743:
        -: 5744:- `promise` - the input Promise object.
        -: 5745:- return
        -: 5746:  - The result of the Promise.
        -: 5747:  - If the Promise is not resolved yet the result is the 'undefined' value.
        -: 5748:  - A TypeError is returned if the input argument was not a Promise object or
        -: 5749:    the Promise support was not built into the library.
        -: 5750:
        -: 5751:*New in version 2.2*.
        -: 5752:
        -: 5753:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 5754:
        -: 5755:**Example**
        -: 5756:
        -: 5757:[doctest]: # (test="compile")
        -: 5758:
        -: 5759:```c
        -: 5760:#include <jerryscript.h>
        -: 5761:
        -: 5762:static void
        -: 5763:example (void)
        -: 5764:{
        -: 5765:  // create a promise object.
        -: 5766:  jerry_value_t promise = jerry_promise ();
        -: 5767:  {
        -: 5768:    // prepare the argument for the resolve or reject.
        -: 5769:    jerry_value_t argument = jerry_number (33);
        -: 5770:
        -: 5771:    jerry_value_t is_ok = jerry_promise_resolve (promise, argument);
        -: 5772:
        -: 5773:    // 'is_ok' should be checked if it is an exception or not.
        -: 5774:    // skipped in this example
        -: 5775:    jerry_value_free (is_ok);
        -: 5776:    jerry_value_free (argument);
        -: 5777:  }
        -: 5778:
        -: 5779:  jerry_value_t promise_result = jerry_promise_result (promise);
        -: 5780:  // 'promise_result' is now the number 33.
        -: 5781:
        -: 5782:  jerry_value_free (promise_result);
        -: 5783:  jerry_value_free (promise);
        -: 5784:}
        -: 5785:```
        -: 5786:
        -: 5787:**See also**
        -: 5788:
        -: 5789:- [jerry_promise](#jerry_promise)
        -: 5790:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 5791:
        -: 5792:## jerry_promise_state
        -: 5793:
        -: 5794:**Summary**
        -: 5795:
        -: 5796:*Notes*:
        -: 5797:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 5798:  is no longer needed.
        -: 5799:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 5800:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 5801:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 5802:- The es.next profile enables this by default.
        -: 5803:
        -: 5804:
        -: 5805:**Prototype**
        -: 5806:
        -: 5807:```c
        -: 5808:jerry_promise_state_t
        -: 5809:jerry_promise_state (const jerry_value_t promise);
        -: 5810:```
        -: 5811:
        -: 5812:- `promise` - the input promise object.
        -: 5813:- return
        -: 5814:  - [jerry_promise_state_t](#jerry_promise_state_t)
        -: 5815:  - `JERRY_PROMISE_STATE_NONE` is returned if the input argument was not a promise object or
        -: 5816:    the Promise support was not built into the library.
        -: 5817:
        -: 5818:*New in version 2.2*.
        -: 5819:
        -: 5820:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 5821:
        -: 5822:**Example**
        -: 5823:
        -: 5824:[doctest]: # (test="compile")
        -: 5825:
        -: 5826:```c
        -: 5827:#include <jerryscript.h>
        -: 5828:
        -: 5829:static void
        -: 5830:example (void)
        -: 5831:{
        -: 5832:  // create a promise object.
        -: 5833:  jerry_value_t promise = jerry_promise ();
        -: 5834:
        -: 5835:  jerry_promise_state_t start_state = jerry_promise_state (promise);
        -: 5836:  // a Promise have a default state of JERRY_PROMISE_STATE_PENDING
        -: 5837:
        -: 5838:  {
        -: 5839:    // prepare the argument for the resolve or reject.
        -: 5840:    jerry_value_t argument = jerry_number (33);
        -: 5841:
        -: 5842:    jerry_value_t is_ok = jerry_promise_resolve (promise, argument);
        -: 5843:
        -: 5844:    // 'is_ok' should be checked if it is an exception or not.
        -: 5845:    // skipped in this example
        -: 5846:    jerry_value_free (is_ok);
        -: 5847:    jerry_value_free (argument);
        -: 5848:  }
        -: 5849:
        -: 5850:  jerry_promise_state_t current_state = jerry_promise_state (promise);
        -: 5851:  // at this point the Promise should be in the JERRY_PROMISE_STATE_FULFILLED state.
        -: 5852:
        -: 5853:  jerry_value_free (promise);
        -: 5854:}
        -: 5855:```
        -: 5856:
        -: 5857:**See also**
        -: 5858:
        -: 5859:- [jerry_promise](#jerry_promise)
        -: 5860:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 5861:
        -: 5862:## jerry_promise_on_event
        -: 5863:
        -: 5864:**Summary**
        -: 5865:
        -: 5866:Sets a callback for tracking Promise and async operations.
        -: 5867:
        -: 5868:*Notes*:
        -: 5869:- This API depends on a build option (`JERRY_PROMISE_CALLBACK`) and can be checked
        -: 5870:  in runtime with the `JERRY_FEATURE_PROMISE_CALLBACK` feature enum value,
        -: 5871:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 5872:
        -: 5873:
        -: 5874:**Prototype**
        -: 5875:
        -: 5876:```c
        -: 5877:void jerry_promise_on_event (jerry_promise_event_filter_t filters, jerry_promise_event_cb_t callback,
        -: 5878:                             void *user_p);
        -: 5879:```
        -: 5880:
        -: 5881:- `filters` - combination of [jerry_promise_event_filter_t](#jerry_promise_event_filter_t) options
        -: 5882:- `callback` - callback function, the previously set value is overwritten,
        -: 5883:               and setting NULL disables the tracking
        -: 5884:- `user_p` - pointer passed to the callback function, can be NULL
        -: 5885:
        -: 5886:*New in version [[NEXT_RELEASE]]*.
        -: 5887:
        -: 5888:**Example**
        -: 5889:
        -: 5890:[doctest]: # ()
        -: 5891:
        -: 5892:```c
        -: 5893:#include <stdio.h>
        -: 5894:#include <string.h>
        -: 5895:#include "jerryscript.h"
        -: 5896:
        -: 5897:static void
    #####: 5898:promise_callback (jerry_promise_event_type_t event_type, /**< event type */
        -: 5899:                  const jerry_value_t object, /**< target object */
        -: 5900:                  const jerry_value_t value, /**< optional argument */
        -: 5901:                  void *user_p) /**< user pointer passed to the callback */
        -: 5902:{
    #####: 5903:  if (event_type == JERRY_PROMISE_EVENT_CREATE)
        -: 5904:  {
    #####: 5905:    printf ("A new promise is created\n");
        -: 5906:
    #####: 5907:    if (!jerry_value_is_undefined (value))
        -: 5908:    {
        -: 5909:      printf ("  The Promise is created by Promise.then() built-in.\n");
        -: 5910:    }
        -: 5911:  }
    #####: 5912:} /* promise_callback */
        -: 5913:
        -: 5914:int
    #####: 5915:main (void)
        -: 5916:{
    #####: 5917:  jerry_init (JERRY_INIT_EMPTY);
        -: 5918:
    #####: 5919:  jerry_promise_on_event (JERRY_PROMISE_EVENT_FILTER_CREATE, promise_callback, NULL);
        -: 5920:
    #####: 5921:  const char *source_p = "var p = Promise.resolve(0)\n"
        -: 5922:                         "p.then(function (v) { return v; })";
    #####: 5923:  jerry_value_free (jerry_eval ((const jerry_char_t *) source_p,
        -: 5924:                                strlen (source_p),
        -: 5925:                                JERRY_PARSE_NO_OPTS));
        -: 5926:
    #####: 5927:  jerry_cleanup ();
        -: 5928:  return 0;
        -: 5929:} /* main */
        -: 5930:```
        -: 5931:
        -: 5932:**See also**
        -: 5933:
        -: 5934:- [jerry_promise](#jerry_promise)
        -: 5935:- [jerry_promise_state_t](#jerry_promise_state_t)
        -: 5936:
        -: 5937:## jerry_property_descriptor_to_object
        -: 5938:
        -: 5939:**Summary**
        -: 5940:
        -: 5941:This API function is equivalent to FromPropertyDescriptor operation defined in ECMA 262 v11 6.2.5.4.
        -: 5942:It returns with an ECMAScript Object which represents the property attributes.
        -: 5943:
        -: 5944:*Notes*:
        -: 5945:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 5946:  is no longer needed.
        -: 5947:
        -: 5948:**Prototype**
        -: 5949:
        -: 5950:```c
        -: 5951:jerry_value_t
        -: 5952:jerry_property_descriptor_to_object (const jerry_property_descriptor_t *src_prop_desc_p)
        -: 5953:```
        -: 5954:
        -: 5955:- `src_prop_desc_p` - the input property descriptor.
        -: 5956:- return
        -: 5957:  - [jerry_value_t](#jerry_value_t)
        -: 5958:  - object value - if success
        -: 5959:  - exception - otherwise
        -: 5960:
        -: 5961:*New in version 2.4*.
        -: 5962:
        -: 5963:**Example**
        -: 5964:
        -: 5965:[doctest]: # (test="compile")
        -: 5966:
        -: 5967:```c
        -: 5968:#include <jerryscript.h>
        -: 5969:
        -: 5970:static void
        -: 5971:example (void)
        -: 5972:{
        -: 5973:  jerry_value_t prop_name = jerry_string_sz ("value");
        -: 5974:
        -: 5975:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor ();
        -: 5976:
        -: 5977:  prop_desc.value = prop_name;
        -: 5978:  prop_desc.flags |= JERRY_PROP_IS_VALUE_DEFINED;
        -: 5979:
        -: 5980:  jerry_value_t from_object = jerry_property_descriptor_to_object (&prop_desc);
        -: 5981:
        -: 5982:  jerry_value_free (prop_name);
        -: 5983:  jerry_value_free (from_object);
        -: 5984:  jerry_property_descriptor_free (&prop_desc);
        -: 5985:}
        -: 5986:```
        -: 5987:
        -: 5988:## jerry_property_descriptor_from_object
        -: 5989:
        -: 5990:**Summary**
        -: 5991:
        -: 5992:This API function is equivalent to ToPropertyDescriptor operation defined in ECMA 262 v11 6.2.5.5.
        -: 5993:It decodes the ECMAScript object and fills the fields of a JerryScript property descriptor.
        -: 5994:
        -: 5995:*Notes*:
        -: 5996:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 5997:  is no longer needed.
        -: 5998:
        -: 5999:**Prototype**
        -: 6000:
        -: 6001:```c
        -: 6002:jerry_value_t
        -: 6003:jerry_property_descriptor_from_object (jerry_value_t obj_value, jerry_property_descriptor_t *out_prop_desc_p);
        -: 6004:```
        -: 6005:
        -: 6006:- `obj_value` - the input object
        -: 6007:- `src_prop_desc_p` - the output property descriptor.
        -: 6008:- return
        -: 6009:  - [jerry_value_t](#jerry_value_t)
        -: 6010:  - true, if success
        -: 6011:  - thrown exception, otherwise
        -: 6012:
        -: 6013:*New in version 2.4*.
        -: 6014:
        -: 6015:**Example**
        -: 6016:
        -: 6017:[doctest]: # (test="compile")
        -: 6018:
        -: 6019:```c
        -: 6020:#include <jerryscript.h>
        -: 6021:
        -: 6022:static void
        -: 6023:example (void)
        -: 6024:{
        -: 6025:  jerry_value_t object = jerry_object ();
        -: 6026:  jerry_value_t prop_name = jerry_string_sz ("value");
        -: 6027:  jerry_value_t value = jerry_boolean (true);
        -: 6028:  jerry_property_descriptor_t prop_desc;
        -: 6029:
        -: 6030:  jerry_value_free (jerry_object_set (object, prop_name, prop_name));
        -: 6031:
        -: 6032:  jerry_value_free (jerry_property_descriptor_from_object (object, &prop_desc));
        -: 6033:
        -: 6034:  jerry_value_free (object);
        -: 6035:  jerry_value_free (prop_name);
        -: 6036:  jerry_value_free (value);
        -: 6037:  jerry_property_descriptor_free (&prop_desc);
        -: 6038:}
        -: 6039:```
        -: 6040:
        -: 6041:## jerry_promise_resolve
        -: 6042:
        -: 6043:**Summary**
        -: 6044:
        -: 6045:Resolve the promise with an argument.
        -: 6046:
        -: 6047:*Note*:
        -: 6048:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 6049:  is no longer needed.
        -: 6050:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 6051:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 6052:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 6053:- The es.next profile enables this by default.
        -: 6054:
        -: 6055:
        -: 6056:**Prototype**
        -: 6057:
        -: 6058:```c
        -: 6059:jerry_value_t
        -: 6060:jerry_promise_resolve (jerry_value_t promise, jerry_value_t argument);
        -: 6061:```
        -: 6062:
        -: 6063:- `promise` - the promise value
        -: 6064:- `argument` - the argument value
        -: 6065:- return value
        -: 6066:  - undefined - if resolve call was successful
        -: 6067:  - exception - otherwise
        -: 6068:
        -: 6069:*New in version 2.0*.
        -: 6070:
        -: 6071:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 6072:
        -: 6073:**Example**
        -: 6074:
        -: 6075:```c
        -: 6076:{
        -: 6077:  jerry_value_t promise = ... // create/copy a promise object.
        -: 6078:
        -: 6079:  ...
        -: 6080:
        -: 6081:  jerry_value_t argument = ... // prepare the argument for resolve.
        -: 6082:
        -: 6083:  jerry_value_t is_ok = jerry_promise_resolve (promise, argument);
        -: 6084:
        -: 6085:  if (jerry_value_is_exception (is_ok))
        -: 6086:  {
        -: 6087:    // handle the exception.
        -: 6088:  }
        -: 6089:
        -: 6090:  jerry_value_free (is_ok);
        -: 6091:  jerry_value_free (argument);
        -: 6092:  jerry_value_free (promise);
        -: 6093:}
        -: 6094:```
        -: 6095:
        -: 6096:**See also**
        -: 6097:
        -: 6098:- [jerry_value_free](#jerry_value_free)
        -: 6099:- [jerry_value_is_exception](#jerry_value_is_exception)
        -: 6100:
        -: 6101:## jerry_promise_reject
        -: 6102:
        -: 6103:**Summary**
        -: 6104:
        -: 6105:Reject the promise with an argument.
        -: 6106:
        -: 6107:*Note*:
        -: 6108:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 6109:  is no longer needed.
        -: 6110:- This API depends on a build option (`JERRY_ESNEXT`) and can be checked
        -: 6111:  in runtime with the `JERRY_FEATURE_PROMISE` feature enum value,
        -: 6112:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 6113:- The es.next profile enables this by default.
        -: 6114:
        -: 6115:
        -: 6116:**Prototype**
        -: 6117:
        -: 6118:```c
        -: 6119:jerry_value_t
        -: 6120:jerry_promise_reject (jerry_value_t promise, jerry_value_t argument);
        -: 6121:```
        -: 6122:
        -: 6123:- `promise` - the promise value
        -: 6124:- `argument` - the argument value
        -: 6125:- return value
        -: 6126:  - undefined - if reject call was successful
        -: 6127:  - exception - otherwise
        -: 6128:
        -: 6129:*New in version 2.0*.
        -: 6130:
        -: 6131:*Changed in version [[NEXT_RELEASE]]*: Build option dependency changed from `JERRY_BUILTIN_PROMISE` to `JERRY_ESNEXT`.
        -: 6132:
        -: 6133:**Example**
        -: 6134:
        -: 6135:```c
        -: 6136:{
        -: 6137:  jerry_value_t promise = ... // create/copy a promise object.
        -: 6138:
        -: 6139:  ...
        -: 6140:
        -: 6141:  jerry_value_t argument = ... // prepare the argument for reject.
        -: 6142:
        -: 6143:  jerry_value_t is_ok = jerry_promise_reject (promise, argument);
        -: 6144:
        -: 6145:  if (jerry_value_is_exception (is_ok))
        -: 6146:  {
        -: 6147:    // handle the exception.
        -: 6148:  }
        -: 6149:
        -: 6150:  jerry_value_free (is_ok);
        -: 6151:  jerry_value_free (argument);
        -: 6152:  jerry_value_free (promise);
        -: 6153:}
        -: 6154:```
        -: 6155:
        -: 6156:**See also**
        -: 6157:
        -: 6158:- [jerry_value_free](#jerry_value_free)
        -: 6159:- [jerry_value_is_exception](#jerry_value_is_exception)
        -: 6160:
        -: 6161:# Functions for symbols
        -: 6162:
        -: 6163:These APIs all depend on the es.next profile (or on build options).
        -: 6164:
        -: 6165:## jerry_symbol
        -: 6166:
        -: 6167:**Summary**
        -: 6168:
        -: 6169:Get the well-known symbol corresponding to the given [well-known symbol id](#jerry_well_known_symbol_t).
        -: 6170:
        -: 6171:*Notes*:
        -: 6172:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 6173:  is no longer needed.
        -: 6174:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 6175:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 6176:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 6177:- The es.next profile enables this by default.
        -: 6178:- If the symbol support is not enabled an undefined will be returned.
        -: 6179:
        -: 6180:**Prototype**
        -: 6181:
        -: 6182:```c
        -: 6183:jerry_value_t
        -: 6184:jerry_symbol (jerry_well_known_symbol_t symbol);
        -: 6185:```
        -: 6186:
        -: 6187:- `symbol` - [jerry_well_known_symbol_t](#jerry_well_known_symbol_t) enum value
        -: 6188:- return value
        -: 6189:  - undefined value - if invalid well-known symbol was requested
        -: 6190:  - well-known symbol value, otherwise
        -: 6191:
        -: 6192:*New in version 2.4*.
        -: 6193:
        -: 6194:**Example**
        -: 6195:
        -: 6196:[doctest]: # ()
        -: 6197:
        -: 6198:```c
        -: 6199:#include "jerryscript.h"
        -: 6200:
        -: 6201:int
    #####: 6202:main (void)
        -: 6203:{
    #####: 6204:  jerry_init (JERRY_INIT_EMPTY);
        -: 6205:
    #####: 6206:  jerry_value_t array_value = jerry_array (5);
    #####: 6207:  jerry_value_t symbol_iterator = jerry_symbol (JERRY_SYMBOL_ITERATOR);
    #####: 6208:  jerry_value_t array_iterator = jerry_object_get (array_value, symbol_iterator);
        -: 6209:
        -: 6210:  // usage of array_iterator
        -: 6211:
    #####: 6212:  jerry_value_free (array_iterator);
    #####: 6213:  jerry_value_free (symbol_iterator);
    #####: 6214:  jerry_value_free (array_value);
        -: 6215:
    #####: 6216:  jerry_cleanup ();
        -: 6217:  return 0;
        -: 6218:}
        -: 6219:```
        -: 6220:
        -: 6221:**See also**
        -: 6222:
        -: 6223:- [jerry_well_known_symbol_t](#jerry_well_known_symbol_t)
        -: 6224:
        -: 6225:## jerry_symbol_description
        -: 6226:
        -: 6227:**Summary**
        -: 6228:
        -: 6229:Returns with the `[[Description]]` internal property of a symbol value.
        -: 6230:
        -: 6231:*Notes*:
        -: 6232:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 6233:  is no longer needed.
        -: 6234:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 6235:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 6236:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 6237:- The es.next profile enables this by default.
        -: 6238:- If symbol support is not enabled an exception will be returned.
        -: 6239:
        -: 6240:**Prototype**
        -: 6241:
        -: 6242:```c
        -: 6243:jerry_value_t
        -: 6244:jerry_symbol_description (const jerry_value_t value);
        -: 6245:```
        -: 6246:
        -: 6247:- `value` - symbol value
        -: 6248:- return value
        -: 6249:  - string or undefined value containing the symbol's description - if success
        -: 6250:  - thrown exception, otherwise
        -: 6251:
        -: 6252:*New in version 2.4*.
        -: 6253:
        -: 6254:**Example**
        -: 6255:
        -: 6256:[doctest]: # ()
        -: 6257:
        -: 6258:```c
        -: 6259:#include "jerryscript.h"
        -: 6260:
        -: 6261:int
    #####: 6262:main (void)
        -: 6263:{
    #####: 6264:  jerry_init (JERRY_INIT_EMPTY);
        -: 6265:
    #####: 6266:  jerry_value_t string_value = jerry_string_sz ("foo");
    #####: 6267:  jerry_value_t symbol_value = jerry_symbol_with_description (string_value);
        -: 6268:
    #####: 6269:  jerry_value_free (string_value);
        -: 6270:
    #####: 6271:  jerry_value_t symbol_description = jerry_symbol_description (symbol_value);
        -: 6272:
        -: 6273:  // usage of symbol_desc_string
        -: 6274:
    #####: 6275:  jerry_value_free (symbol_description);
    #####: 6276:  jerry_value_free (symbol_value);
        -: 6277:
    #####: 6278:  jerry_cleanup ();
        -: 6279:  return 0;
        -: 6280:}
        -: 6281:```
        -: 6282:
        -: 6283:**See also**
        -: 6284:
        -: 6285:- [jerry_symbol_descriptive_string](#jerry_symbol_descriptive_string)
        -: 6286:
        -: 6287:## jerry_symbol_descriptive_string
        -: 6288:
        -: 6289:**Summary**
        -: 6290:
        -: 6291:Call the SymbolDescriptiveString ecma builtin operation on the API value.
        -: 6292:Based on ECMA 262 v6 19.4.3.2.1 this is in the form of `Symbol(<description>)`.
        -: 6293:
        -: 6294:*Notes*:
        -: 6295:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 6296:  is no longer needed.
        -: 6297:- This API depends on a build option (`JERRY_BUILTIN_SYMBOL`) and can be checked
        -: 6298:  in runtime with the `JERRY_FEATURE_SYMBOL` feature enum value,
        -: 6299:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 6300:- The es.next profile enables this by default.
        -: 6301:- If symbol support is not enabled an exception will be returned.
        -: 6302:
        -: 6303:**Prototype**
        -: 6304:
        -: 6305:```c
        -: 6306:jerry_value_t
        -: 6307:jerry_symbol_descriptive_string (const jerry_value_t value);
        -: 6308:```
        -: 6309:
        -: 6310:- `value` - symbol value
        -: 6311:- return value
        -: 6312:  - string value containing the symbol's descriptive string - if success
        -: 6313:  - thrown exception, otherwise
        -: 6314:
        -: 6315:*New in version 2.0*.
        -: 6316:
        -: 6317:**Example**
        -: 6318:
        -: 6319:[doctest]: # ()
        -: 6320:
        -: 6321:```c
        -: 6322:#include "jerryscript.h"
        -: 6323:
        -: 6324:int
    #####: 6325:main (void)
        -: 6326:{
    #####: 6327:  jerry_init (JERRY_INIT_EMPTY);
        -: 6328:
    #####: 6329:  jerry_value_t string_value = jerry_string_sz ("foo");
    #####: 6330:  jerry_value_t symbol_value = jerry_symbol_with_description (string_value);
        -: 6331:
    #####: 6332:  jerry_value_free (string_value);
        -: 6333:
    #####: 6334:  jerry_value_t symbol_desc_string = jerry_symbol_descriptive_string (symbol_value);
        -: 6335:
        -: 6336:  // usage of symbol_desc_string
        -: 6337:
    #####: 6338:  jerry_value_free (symbol_desc_string);
    #####: 6339:  jerry_value_free (symbol_value);
        -: 6340:
    #####: 6341:  jerry_cleanup ();
        -: 6342:  return 0;
        -: 6343:}
        -: 6344:```
        -: 6345:
        -: 6346:**See also**
        -: 6347:
        -: 6348:- [jerry_symbol_description](#jerry_symbol_description)
        -: 6349:
        -: 6350:# Functions for BigInts
        -: 6351:
        -: 6352:These APIs all depend on build option (`JERRY_BUILTIN_BIGINT`).
        -: 6353:
        -: 6354:## jerry_bigint_digit_count
        -: 6355:
        -: 6356:**Summary**
        -: 6357:
        -: 6358:Returns the size of uint64 digits of a BigInt value. This value is the
        -: 6359:minimum size of the buffer which can hold all digits of a BigInt value when
        -: 6360:the digits are retrieved by `[jerry_bigint_to_digits](#jerry_bigint_to_digits)`.
        -: 6361:
        -: 6362:*Notes*:
        -: 6363:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 6364:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 6365:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 6366:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 6367:  is no longer needed.
        -: 6368:
        -: 6369:**Prototype**
        -: 6370:
        -: 6371:```c
        -: 6372:uint32_t
        -: 6373:jerry_bigint_digit_count (jerry_value_t value)
        -: 6374:```
        -: 6375:
        -: 6376:- `value` - BigInt value
        -: 6377:- return value
        -: 6378:  - number of digits (can be zero for BigInt zero)
        -: 6379:  - if value is not a BigInt value, it returns with zero
        -: 6380:
        -: 6381:*New in version 2.4*.
        -: 6382:
        -: 6383:**Example**
        -: 6384:
        -: 6385:[doctest]: # ()
        -: 6386:
        -: 6387:```c
        -: 6388:#include "jerryscript.h"
        -: 6389:
        -: 6390:int
    #####: 6391:main (void)
        -: 6392:{
    #####: 6393:  jerry_init (JERRY_INIT_EMPTY);
        -: 6394:
    #####: 6395:  uint64_t digits[4] = { 0x1, 0x1, 0x0, 0x0 };
    #####: 6396:  jerry_value_t bigint_value = jerry_bigint (digits, 4, true);
        -: 6397:
        -: 6398:  /* Prints two, because the leading zeroes in digits buffer are discarded. */
    #####: 6399:  printf("size: %d\n", (int) jerry_bigint_digit_count (bigint_value));
        -: 6400:
    #####: 6401:  jerry_value_free (bigint_value);
        -: 6402:
    #####: 6403:  jerry_cleanup ();
        -: 6404:  return 0;
        -: 6405:}
        -: 6406:```
        -: 6407:
        -: 6408:**See also**
        -: 6409:
        -: 6410:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 6411:- [jerry_bigint_to_digits](#jerry_bigint_to_digits)
        -: 6412:
        -: 6413:
        -: 6414:## jerry_bigint_to_digits
        -: 6415:
        -: 6416:**Summary**
        -: 6417:
        -: 6418:Copies the uint64 digits of a BigInt value into a buffer. This function supports any
        -: 6419:buffer sizes. If the buffer size is smaller than the size returned by
        -: 6420:`[jerry_bigint_digit_count](#jerry_bigint_digit_count)`, only the
        -: 6421:least significant digits are copied into the buffer. If the buffer size is greater,
        -: 6422:the unused digits are filled with zero.
        -: 6423:
        -: 6424:*Notes*:
        -: 6425:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 6426:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 6427:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 6428:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 6429:  is no longer needed.
        -: 6430:
        -: 6431:**Prototype**
        -: 6432:
        -: 6433:```c
        -: 6434:void
        -: 6435:jerry_bigint_to_digits (jerry_value_t value, uint64_t *digits_p, uint32_t size, bool *sign_p)
        -: 6436:```
        -: 6437:
        -: 6438:- `value` - BigInt value
        -: 6439:- `digits_p` - output buffer for digits
        -: 6440:- `size` - size of the output buffer
        -: 6441:- `sign_p` - the boolean passed to the function is set to false when the BigInt
        -: 6442:             is positive, and set to true otherwise (this parameter can be NULL)
        -: 6443:
        -: 6444:*New in version 2.4*.
        -: 6445:
        -: 6446:**Example**
        -: 6447:
        -: 6448:[doctest]: # ()
        -: 6449:
        -: 6450:```c
        -: 6451:#include "jerryscript.h"
        -: 6452:
        -: 6453:int
    #####: 6454:main (void)
        -: 6455:{
    #####: 6456:  jerry_init (JERRY_INIT_EMPTY);
        -: 6457:
    #####: 6458:  uint64_t digits[4] = { 0x1, 0x1, 0x0, 0x0 };
    #####: 6459:  jerry_value_t bigint_value = jerry_bigint (digits, 4, true);
        -: 6460:
        -: 6461:  uint64_t get_digits[4];
        -: 6462:  bool sign;
    #####: 6463:  jerry_bigint_to_digits (bigint_value, get_digits, 2, &sign);
        -: 6464:
    #####: 6465:  jerry_value_free (bigint_value);
        -: 6466:
    #####: 6467:  jerry_cleanup ();
        -: 6468:  return 0;
        -: 6469:}
        -: 6470:```
        -: 6471:
        -: 6472:**See also**
        -: 6473:
        -: 6474:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 6475:- [jerry_bigint_digit_count](#jerry_bigint_digit_count)
        -: 6476:
        -: 6477:
        -: 6478:# Functions for Proxy objects
        -: 6479:
        -: 6480:These APIs all depend on build option (`JERRY_BUILTIN_PROXY`).
        -: 6481:
        -: 6482:## jerry_proxy_target
        -: 6483:
        -: 6484:**Summary**
        -: 6485:
        -: 6486:Gets the target object of a Proxy object.
        -: 6487:
        -: 6488:*Notes*:
        -: 6489:- This API depends on a build option (`JERRY_BUILTIN_PROXY`) and can be checked
        -: 6490:  in runtime with the `JERRY_FEATURE_PROXY` feature enum value,
        -: 6491:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 6492:- The es.next profile enables this by default.
        -: 6493:
        -: 6494:
        -: 6495:**Prototype**
        -: 6496:
        -: 6497:```c
        -: 6498:jerry_value_t
        -: 6499:jerry_proxy_target (jerry_value_t proxy_value);
        -: 6500:```
        -: 6501:
        -: 6502:- `proxy_value` - Proxy object value
        -: 6503:- return value
        -: 6504:  - type error exception - if proxy_value is not a Proxy object
        -: 6505:  - target object - otherwise
        -: 6506:
        -: 6507:*New in version 2.4*.
        -: 6508:
        -: 6509:**Example**
        -: 6510:
        -: 6511:```c
        -: 6512:{
        -: 6513:  jerry_value_t target = jerry_object ();
        -: 6514:  jerry_value_t handler = jerry_object ();
        -: 6515:  jerry_value_t proxy = jerry_proxy (target, handler);
        -: 6516:
        -: 6517:  jerry_value_free (target);
        -: 6518:  jerry_value_free (handler);
        -: 6519:
        -: 6520:  target = jerry_proxy_target (proxy);
        -: 6521:
        -: 6522:  // ... usage of the target
        -: 6523:
        -: 6524:  jerry_value_free (target);
        -: 6525:  jerry_value_free (proxy);
        -: 6526:}
        -: 6527:```
        -: 6528:
        -: 6529:**See also**
        -: 6530:
        -: 6531:- [jerry_proxy](#jerry_proxy)
        -: 6532:- [jerry_proxy_custom](#jerry_proxy_custom)
        -: 6533:- [jerry_proxy_handler](#jerry_proxy_handler)
        -: 6534:
        -: 6535:## jerry_proxy_handler
        -: 6536:
        -: 6537:**Summary**
        -: 6538:
        -: 6539:Gets the handler object of a Proxy object.
        -: 6540:
        -: 6541:*Notes*:
        -: 6542:- This API depends on a build option (`JERRY_BUILTIN_PROXY`) and can be checked
        -: 6543:  in runtime with the `JERRY_FEATURE_PROXY` feature enum value,
        -: 6544:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 6545:- The es.next profile enables this by default.
        -: 6546:
        -: 6547:
        -: 6548:**Prototype**
        -: 6549:
        -: 6550:```c
        -: 6551:jerry_value_t
        -: 6552:jerry_proxy_handler (jerry_value_t proxy_value);
        -: 6553:```
        -: 6554:
        -: 6555:- `proxy_value` - Proxy object value
        -: 6556:- return value
        -: 6557:  - type error exception - if proxy_value is not a Proxy object
        -: 6558:  - handler object - otherwise
        -: 6559:
        -: 6560:*New in version [[NEXT_RELEASE]]*.
        -: 6561:
        -: 6562:**Example**
        -: 6563:
        -: 6564:```c
        -: 6565:{
        -: 6566:  jerry_value_t target = jerry_object ();
        -: 6567:  jerry_value_t handler = jerry_object ();
        -: 6568:  jerry_value_t proxy = jerry_proxy (target, handler);
        -: 6569:
        -: 6570:  jerry_value_free (target);
        -: 6571:  jerry_value_free (handler);
        -: 6572:
        -: 6573:  handler = jerry_proxy_handler (proxy);
        -: 6574:
        -: 6575:  // ... usage of the handler
        -: 6576:
        -: 6577:  jerry_value_free (handler);
        -: 6578:  jerry_value_free (proxy);
        -: 6579:}
        -: 6580:```
        -: 6581:
        -: 6582:**See also**
        -: 6583:
        -: 6584:- [jerry_proxy](#jerry_proxy)
        -: 6585:- [jerry_proxy_custom](#jerry_proxy_custom)
        -: 6586:- [jerry_proxy_target](#jerry_proxy_target)
        -: 6587:
        -: 6588:
        -: 6589:# Copy and free API values
        -: 6590:
        -: 6591:## jerry_value_copy
        -: 6592:
        -: 6593:**Summary**
        -: 6594:
        -: 6595:Copies the specified Jerry API value.
        -: 6596:
        -: 6597:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 6598:is no longer needed.
        -: 6599:
        -: 6600:**Prototype**
        -: 6601:
        -: 6602:```c
        -: 6603:jerry_value_t
        -: 6604:jerry_value_copy (jerry_value_t value);
        -: 6605:```
        -: 6606:
        -: 6607:- `value` - api value
        -: 6608:- return value - copied value
        -: 6609:
        -: 6610:**Example**
        -: 6611:
        -: 6612:```c
        -: 6613:{
        -: 6614:  jerry_value_t object_value = jerry_object ();
        -: 6615:
        -: 6616:  jerry_value_t copied_object = jerry_value_copy (object_value);
        -: 6617:
        -: 6618:  jerry_value_free (object_value);
        -: 6619:
        -: 6620:  // copied_object refers to the created object and makes it
        -: 6621:  // available after the release of 'object_value'
        -: 6622:
        -: 6623:  jerry_value_free (copied_object);
        -: 6624:}
        -: 6625:```
        -: 6626:
        -: 6627:**See also**
        -: 6628:
        -: 6629:- [jerry_value_free](#jerry_value_free)
        -: 6630:- [jerry_value_t](#jerry_value_t)
        -: 6631:
        -: 6632:
        -: 6633:## jerry_value_free
        -: 6634:
        -: 6635:**Summary**
        -: 6636:
        -: 6637:Release specified Jerry API value.
        -: 6638:
        -: 6639:**Prototype**
        -: 6640:
        -: 6641:```c
        -: 6642:void
        -: 6643:jerry_value_free (jerry_value_t value);
        -: 6644:```
        -: 6645:
        -: 6646:- `value` - api value
        -: 6647:
        -: 6648:**Example**
        -: 6649:
        -: 6650:```c
        -: 6651:{
        -: 6652:  jerry_value_t object_value = jerry_object ();
        -: 6653:
        -: 6654:  ...
        -: 6655:
        -: 6656:  jerry_value_free (object_value);
        -: 6657:}
        -: 6658:```
        -: 6659:
        -: 6660:
        -: 6661:# Create API values
        -: 6662:
        -: 6663:Function for creating [API values](#jerry_value_t).
        -: 6664:
        -: 6665:*Note*: Every created API value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 6666:is no longer needed.
        -: 6667:
        -: 6668:## jerry_array
        -: 6669:
        -: 6670:**Summary**
        -: 6671:
        -: 6672:Create an array object value.
        -: 6673:
        -: 6674:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 6675:is no longer needed.
        -: 6676:
        -: 6677:**Prototype**
        -: 6678:
        -: 6679:```c
        -: 6680:jerry_value_t
        -: 6681:jerry_array (uint32_t size);
        -: 6682:```
        -: 6683:
        -: 6684: - `size` - size of array;
        -: 6685: - return value - value of the constructed array object
        -: 6686:
        -: 6687: **Example**
        -: 6688:
        -: 6689:```c
        -: 6690:{
        -: 6691:    jerry_value_t array = jerry_array (10);
        -: 6692:
        -: 6693:    ...
        -: 6694:
        -: 6695:    jerry_value_free (array);
        -: 6696:}
        -: 6697:```
        -: 6698:
        -: 6699:**See also**
        -: 6700:
        -: 6701:- [jerry_object_set_index](#jerry_object_set_index)
        -: 6702:- [jerry_object_get_index](#jerry_object_get_index)
        -: 6703:
        -: 6704:
        -: 6705:## jerry_arraybuffer
        -: 6706:
        -: 6707:**Summary**
        -: 6708:
        -: 6709:Create a jerry_value_t representing an ArrayBuffer object.
        -: 6710:
        -: 6711:*Note*:
        -: 6712:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 6713:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 6714:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 6715:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 6716:  when it is no longer needed.
        -: 6717:
        -: 6718:**Prototype**
        -: 6719:
        -: 6720:```c
        -: 6721:jerry_value_t
        -: 6722:jerry_arraybuffer (jerry_length_t size);
        -: 6723:```
        -: 6724:
        -: 6725: - `size` - size of the backing store allocated for the array buffer **in bytes**.
        -: 6726: - return value - the new ArrayBuffer as a `jerry_value_t`
        -: 6727:
        -: 6728:*New in version 2.0*.
        -: 6729:
        -: 6730:**Example**
        -: 6731:
        -: 6732:```c
        -: 6733:{
        -: 6734:  jerry_value_t buffer_value = jerry_arraybuffer (15);
        -: 6735:
        -: 6736:  ... // use the ArrayBuffer
        -: 6737:
        -: 6738:  jerry_value_free (buffer_value);
        -: 6739:}
        -: 6740:```
        -: 6741:
        -: 6742:**See also**
        -: 6743:
        -: 6744:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 6745:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 6746:- [jerry_value_is_arraybuffer](#jerry_value_is_arraybuffer)
        -: 6747:- [jerry_value_free](#jerry_value_free)
        -: 6748:
        -: 6749:
        -: 6750:## jerry_arraybuffer_external
        -: 6751:
        -: 6752:**Summary**
        -: 6753:
        -: 6754:Creates a jerry_value_t representing an ArrayBuffer object with
        -: 6755:user specified back-buffer.
        -: 6756:
        -: 6757:User must pass a buffer pointer which is at least `size` big.
        -: 6758:After the object is not needed the GC will call the `free_cb`
        -: 6759:so the user can release the buffer which was provided.
        -: 6760:
        -: 6761:*Note*:
        -: 6762:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 6763:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 6764:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 6765:- If `buffer_p` is NULL, the buffer is allocated by the allocator callback passed to
        -: 6766:  [jerry_arraybuffer_allocator](#jerry_arraybuffer_allocator)
        -: 6767:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 6768:  when it is no longer needed.
        -: 6769:
        -: 6770:**Prototype**
        -: 6771:
        -: 6772:```c
        -: 6773:jerry_value_t
        -: 6774:jerry_arraybuffer_external (uint8_t *buffer_p,
        -: 6775:                            const jerry_length_t size
        -: 6776:                            void *arraybuffer_user_p);
        -: 6777:```
        -: 6778:
        -: 6779:- `size` - size of the buffer **in bytes**.
        -: 6780:- `buffer_p` - the backing store used by the array buffer object.
        -: 6781:- `arraybuffer_user_p` - user pointer assigned to the array buffer object.
        -: 6782:- return value
        -: 6783:  - value of the newly constructed array buffer object.
        -: 6784:
        -: 6785:*New in version 2.0*.
        -: 6786:
        -: 6787:*Changed in version [[NEXT_RELEASE]]*: `free_cb` has been replaced by `arraybuffer_user_p`.
        -: 6788:
        -: 6789:**Example**
        -: 6790:
        -: 6791:```c
        -: 6792:{
        -: 6793:  uint8_t buffer_p[15];
        -: 6794:  jerry_value_t buffer_value = jerry_arraybuffer_external (buffer_p, 15, NULL);
        -: 6795:
        -: 6796:  ... // use the array buffer
        -: 6797:
        -: 6798:  jerry_value_free (buffer_value);
        -: 6799:}
        -: 6800:```
        -: 6801:
        -: 6802:**See also**
        -: 6803:
        -: 6804:- [jerry_arraybuffer_data](#jerry_arraybuffer_data)
        -: 6805:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 6806:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 6807:- [jerry_value_is_arraybuffer](#jerry_value_is_arraybuffer)
        -: 6808:- [jerry_value_free](#jerry_value_free)
        -: 6809:- [jerry_object_native_free_cb_t](#jerry_object_native_free_cb_t)
        -: 6810:
        -: 6811:
        -: 6812:## jerry_shared_arraybuffer
        -: 6813:
        -: 6814:**Summary**
        -: 6815:
        -: 6816:Create a jerry_value_t representing a SharedArrayBuffer object.
        -: 6817:
        -: 6818:*Note*:
        -: 6819:- This API depends on a build option (`JERRY_BUILTIN_SHAREDARRAYBUFFER`).
        -: 6820:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 6821:  when it is no longer needed.
        -: 6822:
        -: 6823:**Prototype**
        -: 6824:
        -: 6825:```c
        -: 6826:jerry_value_t
        -: 6827:jerry_shared_arraybuffer (jerry_length_t size);
        -: 6828:```
        -: 6829:
        -: 6830:- `size` - size of the backing store allocated for the shared array buffer **in bytes**.
        -: 6831:- return value - the new SharedArrayBuffer as a `jerry_value_t`
        -: 6832:
        -: 6833:*New in version [[NEXT_RELEASE]]*.
        -: 6834:
        -: 6835:**Example**
        -: 6836:
        -: 6837:```c
        -: 6838:{
        -: 6839:  jerry_value_t buffer_value = jerry_shared_arraybuffer (15);
        -: 6840:
        -: 6841:  ... // use the SharedArrayBuffer
        -: 6842:
        -: 6843:  jerry_value_free (buffer_value);
        -: 6844:}
        -: 6845:```
        -: 6846:
        -: 6847:**See also**
        -: 6848:
        -: 6849:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 6850:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 6851:- [jerry_value_is_shared_arraybuffer](#jerry_value_is_shared_arraybuffer)
        -: 6852:- [jerry_value_free](#jerry_value_free)
        -: 6853:
        -: 6854:
        -: 6855:## jerry_shared_arraybuffer_external
        -: 6856:
        -: 6857:**Summary**
        -: 6858:
        -: 6859:Creates a jerry_value_t representing an SharedArrayBuffer object with
        -: 6860:user specified back-buffer.
        -: 6861:
        -: 6862:User must pass a buffer pointer which is at least `size` big.
        -: 6863:After the object is not needed the GC will call the `free_cb`
        -: 6864:so the user can release the buffer which was provided.
        -: 6865:
        -: 6866:*Note*:
        -: 6867:- This API depends on a build option (`JERRY_BUILTIN_SHAREDARRAYBUFFER`).
        -: 6868:- If `buffer_p` is NULL, the buffer is allocated by the allocator callback passed to
        -: 6869:  [jerry_arraybuffer_allocator](#jerry_arraybuffer_allocator)
        -: 6870:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 6871:  when it is no longer needed.
        -: 6872:
        -: 6873:**Prototype**
        -: 6874:
        -: 6875:```c
        -: 6876:jerry_value_t
        -: 6877:jerry_shared_arraybuffer_external (uint8_t *buffer_p,
        -: 6878:                                   const jerry_length_t size,
        -: 6879:                                   jerry_value_free_callback_t free_cb);
        -: 6880:```
        -: 6881:
        -: 6882:- `buffer_p` - the backing store used by the shared array buffer object.
        -: 6883:- `size` - size of the buffer **in bytes**.
        -: 6884:- `arraybuffer_user_p` - user pointer assigned to the shared array buffer object.
        -: 6885:- return value
        -: 6886:    - value of the newly constructed shared array buffer object.
        -: 6887:
        -: 6888:*New in version [[NEXT_RELEASE]]*.
        -: 6889:
        -: 6890:**Example**
        -: 6891:
        -: 6892:```c
        -: 6893:{
        -: 6894:  uint8_t buffer_p[15];
        -: 6895:  jerry_value_t buffer_value = jerry_shared_arraybuffer_external (buffer_p, 15, NULL);
        -: 6896:
        -: 6897:  ... // use the shared array buffer
        -: 6898:
        -: 6899:  jerry_value_free (buffer_value);
        -: 6900:}
        -: 6901:```
        -: 6902:
        -: 6903:**See also**
        -: 6904:
        -: 6905:- [jerry_arraybuffer_data](#jerry_arraybuffer_data)
        -: 6906:- [jerry_arraybuffer_read](#jerry_arraybuffer_read)
        -: 6907:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -: 6908:- [jerry_value_is_shared_arraybuffer](#jerry_value_is_shared_arraybuffer)
        -: 6909:- [jerry_value_free](#jerry_value_free)
        -: 6910:- [jerry_object_native_free_cb_t](#jerry_object_native_free_cb_t)
        -: 6911:
        -: 6912:
        -: 6913:## jerry_boolean
        -: 6914:
        -: 6915:**Summary**
        -: 6916:
        -: 6917:Create a jerry_value_t representing a boolean value from the given boolean parameter.
        -: 6918:
        -: 6919:*Notes*:
        -: 6920:- The boolean values (true/false) are fixed constants. Their values can be copied any number of times without calling
        -: 6921: [jerry_value_copy](#jerry_value_copy), and freeing it with [jerry_value_free](#jerry_value_free) is optional.
        -: 6922:
        -: 6923:**Prototype**
        -: 6924:
        -: 6925:```c
        -: 6926:jerry_value_t
        -: 6927:jerry_boolean (bool value);
        -: 6928:```
        -: 6929:
        -: 6930:- `value` - raw boolean value.
        -: 6931:- return value - a `jerry_value_t` created from the given boolean argument.
        -: 6932:
        -: 6933:**Example**
        -: 6934:
        -: 6935:```c
        -: 6936:{
        -: 6937:  jerry_value_t boolean_value = jerry_boolean (true);
        -: 6938:
        -: 6939:  ... // usage of the value
        -: 6940:
        -: 6941:  jerry_value_free (boolean_value);
        -: 6942:}
        -: 6943:```
        -: 6944:
        -: 6945:**See also**
        -: 6946:
        -: 6947:- [jerry_value_free](#jerry_value_free)
        -: 6948:
        -: 6949:
        -: 6950:## jerry_error
        -: 6951:
        -: 6952:**Summary**
        -: 6953:
        -: 6954:Create new JavaScript Error object with the specified error message.
        -: 6955:
        -: 6956:Important! The `error_type` argument *must not be* `JERRY_ERROR_NONE`.
        -: 6957:Creating an Error object with no error type is not valid.
        -: 6958:
        -: 6959:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 6960:is no longer needed.
        -: 6961:
        -: 6962:**Prototype**
        -: 6963:
        -: 6964:```c
        -: 6965:jerry_value_t
        -: 6966:jerry_error (jerry_error_t error_type, jerry_value_t message);
        -: 6967:```
        -: 6968:
        -: 6969:- `error_type` - type of error
        -: 6970:- `message` - error message string
        -: 6971:- return value - constructed error object
        -: 6972:
        -: 6973:**Example**
        -: 6974:
        -: 6975:```c
        -: 6976:{
        -: 6977:  jerry_value_t message = jerry_string_sz ("error");
        -: 6978:  jerry_value_t error_obj = jerry_error (JERRY_ERROR_COMMON, message);
        -: 6979:
        -: 6980:  ... // usage of error_obj
        -: 6981:
        -: 6982:
        -: 6983:  jerry_value_free (error_obj);
        -: 6984:  jerry_value_free (message);
        -: 6985:}
        -: 6986:```
        -: 6987:
        -: 6988:**See also**
        -: 6989:
        -: 6990:- [jerry_value_is_exception](#jerry_value_is_exception)
        -: 6991:- [jerry_exception_value](#jerry_exception_value)
        -: 6992:- [jerry_throw](#jerry_throw)
        -: 6993:
        -: 6994:
        -: 6995:## jerry_error_sz
        -: 6996:
        -: 6997:**Summary**
        -: 6998:
        -: 6999:Create new JavaScript Error object, using the a zero-terminated string as the error message.
        -: 7000:
        -: 7001:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 7002:is no longer needed.
        -: 7003:
        -: 7004:**Prototype**
        -: 7005:
        -: 7006:```c
        -: 7007:jerry_value_t
        -: 7008:jerry_error_sz (jerry_error_t error_type, const char *message_p);
        -: 7009:```
        -: 7010:
        -: 7011:- `error_type` - type of the error
        -: 7012:- `message_p` - value of 'message' property of the constructed error object
        -: 7013:- return value - constructed error object
        -: 7014:
        -: 7015:**Example**
        -: 7016:
        -: 7017:```c
        -: 7018:{
        -: 7019:  jerry_value_t error_obj = jerry_error_sz (JERRY_ERROR_TYPE, "error");
        -: 7020:
        -: 7021:  ... // usage of error_obj
        -: 7022:
        -: 7023:  jerry_value_free (error_obj);
        -: 7024:}
        -: 7025:```
        -: 7026:
        -: 7027:**See also**
        -: 7028:
        -: 7029:- [jerry_error](#jerry_error)
        -: 7030:
        -: 7031:
        -: 7032:## jerry_dataview
        -: 7033:
        -: 7034:**Summary**
        -: 7035:
        -: 7036:Create new JavaScript DataView object.
        -: 7037:
        -: 7038:*Note*:
        -: 7039:  - This API depends on the es.next profile.
        -: 7040:  - Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 7041:    when it is no longer needed.
        -: 7042:
        -: 7043:**Prototype**
        -: 7044:
        -: 7045:```c
        -: 7046:jerry_value_t
        -: 7047:jerry_dataview (const jerry_value_t array_buffer,
        -: 7048:                const jerry_length_t byte_offset,
        -: 7049:                const jerry_length_t byte_length)
        -: 7050:```
        -: 7051:
        -: 7052:- `array_buffer` - arrayBuffer to create DataView from
        -: 7053:- `byte_offset` - offset in bytes, to the first byte in the buffer
        -: 7054:- `byte_length` - number of elements in the byte array
        -: 7055:- return value
        -: 7056:  - value of the constructed DataView object - if success
        -: 7057:  - exception - otherwise
        -: 7058:
        -: 7059:*New in version 2.0*.
        -: 7060:
        -: 7061:**Example**
        -: 7062:
        -: 7063:[doctest]: # ()
        -: 7064:
        -: 7065:```c
        -: 7066:#include "jerryscript.h"
        -: 7067:
        -: 7068:int
    #####: 7069:main (void)
        -: 7070:{
    #####: 7071:  jerry_init (JERRY_INIT_EMPTY);
        -: 7072:
    #####: 7073:  jerry_value_t arraybuffer = jerry_arraybuffer (16);
    #####: 7074:  jerry_value_t dataview = jerry_dataview (arraybuffer, 0, 16);
        -: 7075:
        -: 7076:  // usage of dataview
        -: 7077:
    #####: 7078:  jerry_value_free (dataview);
    #####: 7079:  jerry_value_free (arraybuffer);
        -: 7080:
    #####: 7081:  jerry_cleanup ();
        -: 7082:  return 0;
        -: 7083:}
        -: 7084:```
        -: 7085:
        -: 7086:**See also**
        -: 7087:
        -: 7088:- [jerry_value_is_dataview](#jerry_value_is_dataview)
        -: 7089:- [jerry_arraybuffer](#jerry_arraybuffer)
        -: 7090:
        -: 7091:
        -: 7092:## jerry_function_external
        -: 7093:
        -: 7094:**Summary**
        -: 7095:
        -: 7096:Create an external function object.
        -: 7097:
        -: 7098:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 7099:is no longer needed.
        -: 7100:
        -: 7101:**Prototype**
        -: 7102:
        -: 7103:```c
        -: 7104:jerry_value_t
        -: 7105:jerry_function_external (jerry_external_handler_t handler_p);
        -: 7106:```
        -: 7107:
        -: 7108:- `handler_p` - pointer to native handler of the function object
        -: 7109:- return value - value of the constructed function object
        -: 7110:
        -: 7111:**Example**
        -: 7112:
        -: 7113:[doctest]: # ()
        -: 7114:
        -: 7115:```c
        -: 7116:#include <stdio.h>
        -: 7117:#include <string.h>
        -: 7118:#include "jerryscript.h"
        -: 7119:
        -: 7120:static jerry_value_t
    #####: 7121:handler (const jerry_call_info_t *call_info_p,
        -: 7122:         const jerry_value_t args_p[],
        -: 7123:         const jerry_length_t args_cnt)
        -: 7124:{
    #####: 7125:  printf ("Native handler called!\n");
        -: 7126:
    #####: 7127:  return jerry_boolean (true);
        -: 7128:}
        -: 7129:
        -: 7130:int
    #####: 7131:main (void)
        -: 7132:{
    #####: 7133:  jerry_init (JERRY_INIT_EMPTY);
        -: 7134:
    #####: 7135:  jerry_value_t func_val = jerry_function_external (handler);
    #####: 7136:  jerry_value_t glob_obj = jerry_current_realm ();
        -: 7137:
        -: 7138:  // after this, script can invoke the native handler through "handler_field (1, 2, 3);"
    #####: 7139:  jerry_value_t prop_name = jerry_string_sz ("handler_field");
        -: 7140:  // set property and release the return value without any check
    #####: 7141:  jerry_value_free (jerry_object_set (glob_obj, prop_name, func_val));
    #####: 7142:  jerry_value_free (prop_name);
        -: 7143:
    #####: 7144:  jerry_value_free (func_val);
    #####: 7145:  jerry_value_free (glob_obj);
        -: 7146:
        -: 7147:  // Test the method by calling it
    #####: 7148:  const char *test_src = "handler_field ();";
    #####: 7149:  jerry_value_t ret_val = jerry_eval ((const jerry_char_t *) test_src,
        -: 7150:                                      strlen (test_src),
        -: 7151:                                      JERRY_PARSE_NO_OPTS);
        -: 7152:  // release the eval result
    #####: 7153:  jerry_value_free (ret_val);
    #####: 7154:  jerry_cleanup ();
        -: 7155:  return 0;
        -: 7156:}
        -: 7157:```
        -: 7158:
        -: 7159:**See also**
        -: 7160:
        -: 7161:- [jerry_external_handler_t](#jerry_external_handler_t)
        -: 7162:- [jerry_object_set](#jerry_object_set)
        -: 7163:- [jerry_call](#jerry_call)
        -: 7164:
        -: 7165:
        -: 7166:## jerry_number
        -: 7167:
        -: 7168:**Summary**
        -: 7169:
        -: 7170:Creates a `jerry_value_t` representing a number value.
        -: 7171:
        -: 7172:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 7173:is no longer needed.
        -: 7174:
        -: 7175:**Prototype**
        -: 7176:
        -: 7177:```c
        -: 7178:jerry_value_t
        -: 7179:jerry_number (double value);
        -: 7180:```
        -: 7181:
        -: 7182:- `value` - double value from which a `jerry_value_t` will be created
        -: 7183:- return value - a `jerry_value_t` created from the given double argument
        -: 7184:
        -: 7185:**Example**
        -: 7186:
        -: 7187:```c
        -: 7188:{
        -: 7189:  jerry_value_t number_value = jerry_number (3.14);
        -: 7190:
        -: 7191:  ... // usage of the value
        -: 7192:
        -: 7193:  jerry_value_free (number_value);
        -: 7194:}
        -: 7195:```
        -: 7196:
        -: 7197:**See also**
        -: 7198:
        -: 7199:- [jerry_value_free](#jerry_value_free)
        -: 7200:- [jerry_infinity](#jerry_infinity)
        -: 7201:- [jerry_nan](#jerry_nan)
        -: 7202:
        -: 7203:
        -: 7204:## jerry_infinity
        -: 7205:
        -: 7206:**Summary**
        -: 7207:
        -: 7208:Creates a `jerry_value_t` representing a positive or negative infinity value.
        -: 7209:
        -: 7210:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 7211:is no longer needed.
        -: 7212:
        -: 7213:**Prototype**
        -: 7214:
        -: 7215:```c
        -: 7216:jerry_value_t
        -: 7217:jerry_infinity (bool sign);
        -: 7218:```
        -: 7219:
        -: 7220:- `sign` - true for negative Infinity and false for positive Infinity
        -: 7221:- return value - a `jerry_value_t` representing the infinity value
        -: 7222:
        -: 7223:**Example**
        -: 7224:
        -: 7225:```c
        -: 7226:{
        -: 7227:  jerry_value_t positive_inf_value = jerry_infinity (false);
        -: 7228:
        -: 7229:  ... // usage of the positive_inf_value
        -: 7230:
        -: 7231:  jerry_value_free (positive_inf_value);
        -: 7232:}
        -: 7233:```
        -: 7234:
        -: 7235:**See also**
        -: 7236:
        -: 7237:- [jerry_value_free](#jerry_value_free)
        -: 7238:- [jerry_number](#jerry_number)
        -: 7239:- [jerry_nan](#jerry_nan)
        -: 7240:
        -: 7241:
        -: 7242:## jerry_nan
        -: 7243:
        -: 7244:**Summary**
        -: 7245:
        -: 7246:Creates a `jerry_value_t` representing a not-a-number value.
        -: 7247:
        -: 7248:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 7249:is no longer needed.
        -: 7250:
        -: 7251:**Prototype**
        -: 7252:
        -: 7253:```c
        -: 7254:jerry_value_t
        -: 7255:jerry_nan (void);
        -: 7256:```
        -: 7257:
        -: 7258:- return value - a `jerry_value_t` representing the not-a-number value
        -: 7259:
        -: 7260:**Example**
        -: 7261:
        -: 7262:```c
        -: 7263:{
        -: 7264:  jerry_value_t nan_value = jerry_nan ();
        -: 7265:
        -: 7266:  ... // usage of the nan_value
        -: 7267:
        -: 7268:  jerry_value_free (nan_value);
        -: 7269:}
        -: 7270:```
        -: 7271:
        -: 7272:**See also**
        -: 7273:
        -: 7274:- [jerry_value_free](#jerry_value_free)
        -: 7275:- [jerry_number](#jerry_number)
        -: 7276:- [jerry_infinity](#jerry_infinity)
        -: 7277:
        -: 7278:
        -: 7279:## jerry_null
        -: 7280:
        -: 7281:**Summary**
        -: 7282:
        -: 7283:Creates and returns a `jerry_value_t` with type null object.
        -: 7284:
        -: 7285:*Notes*:
        -: 7286:- The null value is a fixed constant. Its value can be copied any number of times without calling
        -: 7287: [jerry_value_copy](#jerry_value_copy), and freeing it with [jerry_value_free](#jerry_value_free) is optional.
        -: 7288:
        -: 7289:**Prototype**
        -: 7290:
        -: 7291:```c
        -: 7292:jerry_value_t
        -: 7293:jerry_null (void);
        -: 7294:```
        -: 7295:
        -: 7296:- return value - a `jerry_value_t` representing null.
        -: 7297:
        -: 7298:**Example**
        -: 7299:
        -: 7300:```c
        -: 7301:{
        -: 7302:  jerry_value_t null_value = jerry_null ();
        -: 7303:
        -: 7304:  ... // usage of the value
        -: 7305:
        -: 7306:  jerry_value_free (null_value);
        -: 7307:}
        -: 7308:```
        -: 7309:
        -: 7310:**See also**
        -: 7311:
        -: 7312:- [jerry_value_free](#jerry_value_free)
        -: 7313:
        -: 7314:
        -: 7315:## jerry_object
        -: 7316:
        -: 7317:**Summary**
        -: 7318:
        -: 7319:Create new JavaScript object, like with new Object().
        -: 7320:
        -: 7321:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 7322:is no longer needed.
        -: 7323:
        -: 7324:**Prototype**
        -: 7325:
        -: 7326:```c
        -: 7327:jerry_value_t
        -: 7328:jerry_object (void);
        -: 7329:```
        -: 7330:
        -: 7331:- return value - value of the created object
        -: 7332:
        -: 7333:**Example**
        -: 7334:
        -: 7335:```c
        -: 7336:{
        -: 7337:  jerry_value_t object_value = jerry_object ();
        -: 7338:
        -: 7339:  ... // usage of object_value
        -: 7340:
        -: 7341:  jerry_value_free (object_value);
        -: 7342:}
        -: 7343:```
        -: 7344:
        -: 7345:**See also**
        -: 7346:
        -: 7347:- [jerry_value_free](#jerry_value_free)
        -: 7348:
        -: 7349:
        -: 7350:## jerry_promise
        -: 7351:
        -: 7352:**Summary**
        -: 7353:
        -: 7354:Create an empty promise object which can be resolved or rejected later
        -: 7355:by calling jerry_promise_resolve or jerry_promise_reject.
        -: 7356:
        -: 7357:*Note*:
        -: 7358:  - This API depends on the es.next profile.
        -: 7359:  - Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 7360:    when it is no longer needed.
        -: 7361:
        -: 7362:**Prototype**
        -: 7363:
        -: 7364:```c
        -: 7365:jerry_value_t
        -: 7366:jerry_promise (void)
        -: 7367:```
        -: 7368:
        -: 7369:- return value - value of the newly created promise
        -: 7370:
        -: 7371:*New in version 2.0*.
        -: 7372:
        -: 7373:**Example**
        -: 7374:
        -: 7375:```c
        -: 7376:{
        -: 7377:  jerry_value_t p = jerry_promise ();
        -: 7378:
        -: 7379:  ...// usage of the promise
        -: 7380:
        -: 7381:  jerry_value_free (p);
        -: 7382:}
        -: 7383:```
        -: 7384:
        -: 7385:**See also**
        -: 7386:
        -: 7387:- [jerry_promise_resolve](#jerry_promise_resolve)
        -: 7388:- [jerry_promise_reject](#jerry_promise_reject)
        -: 7389:- [jerry_value_free](#jerry_value_free)
        -: 7390:
        -: 7391:
        -: 7392:## jerry_proxy
        -: 7393:
        -: 7394:**Summary**
        -: 7395:
        -: 7396:Create a new Proxy object with the given target and handler.
        -: 7397:
        -: 7398:*Note*:
        -: 7399:  - This API depends on the es.next profile.
        -: 7400:  - Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 7401:    when it is no longer needed.
        -: 7402:
        -: 7403:**Prototype**
        -: 7404:
        -: 7405:```c
        -: 7406:jerry_value_t
        -: 7407:jerry_proxy (const jerry_value_t target, const jerry_value_t handler);
        -: 7408:```
        -: 7409:
        -: 7410:- `target` - proxy target
        -: 7411:- `handler` - proxy handler
        -: 7412:- return exception - if the Proxy construction fails
        -: 7413:         value of the newly created proxy object - otherwise
        -: 7414:
        -: 7415:*New in version 2.3*.
        -: 7416:
        -: 7417:**Example**
        -: 7418:
        -: 7419:[doctest]: # ()
        -: 7420:
        -: 7421:```c
        -: 7422:#include "jerryscript.h"
        -: 7423:
        -: 7424:int
    #####: 7425:main (void)
        -: 7426:{
    #####: 7427:  jerry_init (JERRY_INIT_EMPTY);
        -: 7428:
    #####: 7429:  jerry_value_t target = jerry_object ();
    #####: 7430:  jerry_value_t handler = jerry_object ();
    #####: 7431:  jerry_value_t proxy = jerry_proxy (target, handler);
        -: 7432:
    #####: 7433:  jerry_value_free (target);
    #####: 7434:  jerry_value_free (handler);
        -: 7435:
        -: 7436:  // usage of the proxy
        -: 7437:
    #####: 7438:  jerry_value_free (proxy);
        -: 7439:
    #####: 7440:  jerry_cleanup ();
        -: 7441:}
        -: 7442:```
        -: 7443:
        -: 7444:**See also**
        -: 7445:
        -: 7446:- [jerry_value_is_proxy](#jerry_value_is_proxy)
        -: 7447:- [jerry_proxy_custom](#jerry_proxy_custom)
        -: 7448:- [jerry_value_free](#jerry_value_free)
        -: 7449:
        -: 7450:
        -: 7451:## jerry_proxy_custom
        -: 7452:
        -: 7453:**Summary**
        -: 7454:
        -: 7455:Create a new Proxy object with the given target and handler.
        -: 7456:The behaviour of the Proxy can be specialized with an options argument.
        -: 7457:
        -: 7458:*Note*:
        -: 7459:  - This API depends on the es.next profile.
        -: 7460:  - Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 7461:    when it is no longer needed.
        -: 7462:
        -: 7463:**Prototype**
        -: 7464:
        -: 7465:```c
        -: 7466:jerry_value_t
        -: 7467:jerry_proxy_custom (const jerry_value_t target,
        -: 7468:                    const jerry_value_t handler,
        -: 7469:                    uint32_t options);
        -: 7470:```
        -: 7471:
        -: 7472:- `target` - proxy target
        -: 7473:- `handler` - proxy handler
        -: 7474:- `options` - any combination of [jerry_proxy_custom_behavior_t](#jerry_proxy_custom_behavior_t) options
        -: 7475:- return thrown exception - if the Proxy construction fails
        -: 7476:         value of the newly created proxy object - otherwise
        -: 7477:
        -: 7478:*New in version [[NEXT_RELEASE]]*.
        -: 7479:
        -: 7480:**Example**
        -: 7481:
        -: 7482:[doctest]: # ()
        -: 7483:
        -: 7484:```c
        -: 7485:#include "jerryscript.h"
        -: 7486:
        -: 7487:int
    #####: 7488:main (void)
        -: 7489:{
    #####: 7490:  jerry_init (JERRY_INIT_EMPTY);
        -: 7491:
    #####: 7492:  jerry_value_t target = jerry_object ();
    #####: 7493:  jerry_value_t handler = jerry_object ();
    #####: 7494:  jerry_value_t proxy = jerry_proxy_custom (target, handler, JERRY_PROXY_SKIP_RESULT_VALIDATION);
        -: 7495:
    #####: 7496:  jerry_value_free (target);
    #####: 7497:  jerry_value_free (handler);
        -: 7498:
        -: 7499:  // usage of the proxy
        -: 7500:
    #####: 7501:  jerry_value_free (proxy);
        -: 7502:
    #####: 7503:  jerry_cleanup ();
        -: 7504:}
        -: 7505:```
        -: 7506:
        -: 7507:**See also**
        -: 7508:
        -: 7509:- [jerry_value_is_proxy](#jerry_value_is_proxy)
        -: 7510:- [jerry_proxy_custom](#jerry_proxy_custom)
        -: 7511:- [jerry_value_free](#jerry_value_free)
        -: 7512:
        -: 7513:
        -: 7514:## jerry_string_sz
        -: 7515:
        -: 7516:**Summary**
        -: 7517:
        -: 7518:Create string from a zero-terminated ASCII string.
        -: 7519:
        -: 7520:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 7521:is no longer needed.
        -: 7522:
        -: 7523:**Prototype**
        -: 7524:
        -: 7525:```c
        -: 7526:jerry_value_t
        -: 7527:jerry_string_sz (const char *str_p);
        -: 7528:```
        -: 7529:
        -: 7530:- `str_p` - non-null pointer to string
        -: 7531:- return value - created string
        -: 7532:
        -: 7533:**Example**
        -: 7534:
        -: 7535:```c
        -: 7536:{
        -: 7537:  const char char_array[] = "a string";
        -: 7538:  jerry_value_t string_value = jerry_string_sz (char_array);
        -: 7539:
        -: 7540:  ... // usage of string_value
        -: 7541:
        -: 7542:  jerry_value_free (string_value);
        -: 7543:}
        -: 7544:```
        -: 7545:
        -: 7546:**See also**
        -: 7547:
        -: 7548:- [jerry_string](#jerry_string)
        -: 7549:
        -: 7550:
        -: 7551:## jerry_string
        -: 7552:
        -: 7553:**Summary**
        -: 7554:
        -: 7555:Create a string from a buffer using the specified encoding. The data in the buffer must be valid for the encoding.
        -: 7556:
        -: 7557:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 7558:is no longer needed.
        -: 7559:
        -: 7560:**Prototype**
        -: 7561:
        -: 7562:```c
        -: 7563:jerry_value_t
        -: 7564:jerry_string (const jerry_char_t *buffer_p,
        -: 7565:              jerry_size_t buf_size,
        -: 7566:              jerry_encoding_t encoding)
        -: 7567:```
        -: 7568:
        -: 7569:- `buffer_p` - non-null pointer to buffer
        -: 7570:- `buf_size` - size of the buffer
        -: 7571:- `encoding` - encoding of the string data
        -: 7572:- return value - value of the created string
        -: 7573:
        -: 7574:**Example**
        -: 7575:
        -: 7576:```c
        -: 7577:{
        -: 7578:  const jerry_char_t char_array[] = "a string";
        -: 7579:  jerry_value_t string_value = jerry_string (char_array,
        -: 7580:                                             sizeof (char_array) - 1,
        -: 7581:                                             JERRY_ENCODING_CESU8);
        -: 7582:
        -: 7583:  ... // usage of string_value
        -: 7584:
        -: 7585:  jerry_value_free (string_value);
        -: 7586:}
        -: 7587:
        -: 7588:```
        -: 7589:
        -: 7590:**See also**
        -: 7591:
        -: 7592:- [jerry_validate_string](#jerry_validate_string)
        -: 7593:- [jerry_string_sz](#jerry_string_sz)
        -: 7594:
        -: 7595:
        -: 7596:## jerry_string_external_sz
        -: 7597:
        -: 7598:**Summary**
        -: 7599:
        -: 7600:Create an external string from a zero-terminated ASCII string. The string buffer passed to the function
        -: 7601:should not be modified until the free callback is called. This function can be used to avoid
        -: 7602:the duplication of large strings.
        -: 7603:
        -: 7604:*Note*:
        -: 7605: - The free callback can be set by [jerry_string_external_on_free](#jerry_string_external_on_free)
        -: 7606: - Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 7607:   when it is no longer needed.
        -: 7608:
        -: 7609:**Prototype**
        -: 7610:
        -: 7611:```c
        -: 7612:jerry_value_t
        -: 7613:jerry_string_external_sz (const char *str_p, void *user_p);
        -: 7614:```
        -: 7615:
        -: 7616:- `str_p` - non-null pointer to string
        -: 7617:- `user_p` - user pointer passed to the callback when the string is freed
        -: 7618:- return value - value of the created string
        -: 7619:
        -: 7620:*New in version 2.4*.
        -: 7621:
        -: 7622:*Changed in version [[NEXT_RELEASE]]*: `free_cb` is replaced by `user_p`.
        -: 7623:
        -: 7624:**Example**
        -: 7625:
        -: 7626:```c
        -: 7627:{
        -: 7628:  const char* string_p = "a large and immutable string: this is a story about ....";
        -: 7629:  jerry_value_t string_value = jerry_string_external_sz (string_p, NULL);
        -: 7630:
        -: 7631:  ... // usage of string_value
        -: 7632:
        -: 7633:  jerry_value_free (string_value);
        -: 7634:}
        -: 7635:```
        -: 7636:
        -: 7637:**See also**
        -: 7638:
        -: 7639:- [jerry_string_external](#jerry_string_external)
        -: 7640:- [jerry_string_external_on_free](#jerry_string_external_on_free)
        -: 7641:
        -: 7642:
        -: 7643:## jerry_string_external
        -: 7644:
        -: 7645:**Summary**
        -: 7646:
        -: 7647:Create an external string from a valid CESU8 string. The string buffer passed to the function
        -: 7648:should not be modified until the free callback is called. This function can be used to avoid
        -: 7649:the duplication of large strings.
        -: 7650:
        -: 7651:*Note*:
        -: 7652: - The free callback can be set by [jerry_string_external_on_free](#jerry_string_external_on_free)
        -: 7653: - Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 7654:   when it is no longer needed.
        -: 7655:
        -: 7656:**Prototype**
        -: 7657:
        -: 7658:```c
        -: 7659:jerry_value_t
        -: 7660:jerry_string_external (const jerry_char_t *str_p,
        -: 7661:                       jerry_size_t str_size,
        -: 7662:                       void *user_p);
        -: 7663:```
        -: 7664:
        -: 7665:- `str_p` - non-null pointer to string
        -: 7666:- `str_size` - size of the string
        -: 7667:- `user_p` - user pointer passed to the callback when the string is freed
        -: 7668:- return value - value of the created string
        -: 7669:
        -: 7670:*New in version 2.4*.
        -: 7671:
        -: 7672:*Changed in version [[NEXT_RELEASE]]*: `free_cb` is replaced by `user_p`.
        -: 7673:
        -: 7674:**Example**
        -: 7675:
        -: 7676:```c
        -: 7677:{
        -: 7678:  const char* string_p = "a large and immutable string: this is a story about ....";
        -: 7679:  jerry_value_t string_value = jerry_string_external ((const jerry_char_t *) string_p,
        -: 7680:                                                      strlen (string_p),
        -: 7681:                                                      NULL);
        -: 7682:
        -: 7683:  ... // usage of string_value
        -: 7684:
        -: 7685:  jerry_value_free (string_value);
        -: 7686:}
        -: 7687:
        -: 7688:```
        -: 7689:
        -: 7690:**See also**
        -: 7691:
        -: 7692:- [jerry_validate_string](#jerry_validate_string)
        -: 7693:- [jerry_string_external_sz](#jerry_string_external_sz)
        -: 7694:- [jerry_string_external_on_free](#jerry_string_external_on_free)
        -: 7695:
        -: 7696:
        -: 7697:## jerry_symbol
        -: 7698:
        -: 7699:**Summary**
        -: 7700:
        -: 7701:Create symbol from an API value.
        -: 7702:
        -: 7703:*Note*:
        -: 7704:  - The given argument is converted to string. This operation can throw an exception.
        -: 7705:  - This API depends on the es.next profile.
        -: 7706:  - Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 7707:    when it is no longer needed.
        -: 7708:
        -: 7709:**Prototype**
        -: 7710:
        -: 7711:```c
        -: 7712:jerry_value_t
        -: 7713:jerry_symbol_with_description (const jerry_value_t value)
        -: 7714:```
        -: 7715:
        -: 7716:- `value` - API value
        -: 7717:- return value
        -: 7718:  - value of the created symbol, if success
        -: 7719:  - thrown exception, otherwise
        -: 7720:
        -: 7721:*New in version 2.0*.
        -: 7722:
        -: 7723:**Example**
        -: 7724:
        -: 7725:[doctest]: # ()
        -: 7726:
        -: 7727:```c
        -: 7728:#include "jerryscript.h"
        -: 7729:
        -: 7730:int
    #####: 7731:main (void)
        -: 7732:{
    #####: 7733:  jerry_init (JERRY_INIT_EMPTY);
        -: 7734:
    #####: 7735:  jerry_value_t string_value = jerry_string_sz ("Symbol description string");
    #####: 7736:  jerry_value_t symbol_value = jerry_symbol_with_description (string_value);
        -: 7737:
        -: 7738:  // The description value is no longer needed
    #####: 7739:  jerry_value_free (string_value);
        -: 7740:
        -: 7741:  // usage of symbol_value
        -: 7742:
    #####: 7743:  jerry_value_free (symbol_value);
        -: 7744:
    #####: 7745:  jerry_cleanup ();
        -: 7746:}
        -: 7747:```
        -: 7748:
        -: 7749:**See also**
        -: 7750:
        -: 7751:- [jerry_value_is_symbol](#jerry_value_is_symbol)
        -: 7752:- [jerry_value_free](#jerry_value_free)
        -: 7753:
        -: 7754:
        -: 7755:## jerry_bigint
        -: 7756:
        -: 7757:**Summary**
        -: 7758:
        -: 7759:Create BigInt value from uint64 digits
        -: 7760:
        -: 7761:*Note*:
        -: 7762:- This API depends on a build option (`JERRY_BUILTIN_BIGINT`) and can be checked
        -: 7763:  in runtime with the `JERRY_FEATURE_BIGINT` feature enum value,
        -: 7764:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 7765:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 7766:  when it is no longer needed.
        -: 7767:
        -: 7768:**Prototype**
        -: 7769:
        -: 7770:```c
        -: 7771:jerry_value_t
        -: 7772:jerry_bigint (const uint64_t *digits_p, uint32_t size, bool sign)
        -: 7773:```
        -: 7774:
        -: 7775:- `digits_p` - array of uint64 digits, least significant digit first
        -: 7776:- `size` - size of the `digits_p` array
        -: 7777:- `sign` - false if the created value should be positive, and true if the created value should be negative
        -: 7778:- return value
        -: 7779:  - value of the created bigint, if success
        -: 7780:  - thrown exception, otherwise
        -: 7781:
        -: 7782:*New in version 2.4*.
        -: 7783:
        -: 7784:**Example**
        -: 7785:
        -: 7786:[doctest]: # ()
        -: 7787:
        -: 7788:```c
        -: 7789:#include "jerryscript.h"
        -: 7790:
        -: 7791:int
    #####: 7792:main (void)
        -: 7793:{
    #####: 7794:  jerry_init (JERRY_INIT_EMPTY);
        -: 7795:
    #####: 7796:  uint64_t digits[2] = { 0x1, 0x1 };
    #####: 7797:  jerry_value_t bigint_value = jerry_bigint (digits, 2, true);
        -: 7798:
        -: 7799:  // usage of bigint_value
        -: 7800:
    #####: 7801:  jerry_value_free (bigint_value);
        -: 7802:
    #####: 7803:  jerry_cleanup ();
        -: 7804:}
        -: 7805:```
        -: 7806:
        -: 7807:**See also**
        -: 7808:
        -: 7809:- [jerry_value_free](#jerry_value_free)
        -: 7810:- [jerry_value_is_bigint](#jerry_value_is_bigint)
        -: 7811:- [jerry_bigint_to_digits](#jerry_bigint_to_digits)
        -: 7812:
        -: 7813:
        -: 7814:## jerry_regexp_sz
        -: 7815:
        -: 7816:**Summary**
        -: 7817:
        -: 7818:Returns a RegExp object created from the argument ASCII string pattern, or an exception if the construction of the
        -: 7819:object fails. Optional flags can be set using [jerry_regexp_flags_t](#jerry_regexp_flags_t). These flags can be
        -: 7820:combined together with the binary OR operator or used on their own as enum values.
        -: 7821:
        -: 7822:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 7823:is no longer needed.
        -: 7824:
        -: 7825:**Prototype**
        -: 7826:```c
        -: 7827:jerry_value_t
        -: 7828:jerry_regexp_sz (const jerry_char_t *pattern_p, uint16_t flags);
        -: 7829:```
        -: 7830:
        -: 7831:- `pattern_p` - the RegExp pattern as a zero-terminated UTF-8 string
        -: 7832:- `flags` - optional flags for the RegExp object, see [jerry_regexp_flags_t](#jerry_regexp_flags_t)
        -: 7833:- return value - the RegExp object as a `jerry_value_t`
        -: 7834:
        -: 7835:*New in version 2.0*.
        -: 7836:
        -: 7837:**Example**
        -: 7838:
        -: 7839:```c
        -: 7840:{
        -: 7841:  jerry_char_t pattern_p = "[cgt]gggtaaa|tttaccc[acg]";
        -: 7842:  uint16_t pattern_flags = JERRY_REGEXP_FLAG_IGNORE_CASE;
        -: 7843:
        -: 7844:  jerry_value_t regexp = jerry_regexp_sz (pattern_p, pattern_flags);
        -: 7845:
        -: 7846:  ...
        -: 7847:
        -: 7848:  jerry_value_free (regexp);
        -: 7849:}
        -: 7850:```
        -: 7851:
        -: 7852:
        -: 7853:## jerry_regexp
        -: 7854:
        -: 7855:**Summary**
        -: 7856:
        -: 7857:Returns a RegExp object from the argument pattern, or an exception if the construction of the object fails. Optional
        -: 7858:flags can be set using [jerry_regexp_flags_t](#jerry_regexp_flags_t). These flags can be combined together with the
        -: 7859:binary OR operator or used on their own as enum values.
        -: 7860:
        -: 7861:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 7862:is no longer needed.
        -: 7863:
        -: 7864:**Prototype**
        -: 7865:```c
        -: 7866:jerry_value_t
        -: 7867:jerry_regexp (const jerry_value_t pattern, uint16_t flags);
        -: 7868:```
        -: 7869:
        -: 7870:- `pattern_p` - the RegExp pattern as a zero-terminated UTF-8 string
        -: 7871:- `pattern_size` - size of the `pattern`
        -: 7872:- `flags` - optional flags for the RegExp object, see [jerry_regexp_flags_t](#jerry_regexp_flags_t)
        -: 7873:- return value - the RegExp object as a `jerry_value_t`
        -: 7874:
        -: 7875:*New in version 2.0*.
        -: 7876:
        -: 7877:**Example**
        -: 7878:
        -: 7879:```c
        -: 7880:{
        -: 7881:  jerry_char_t pattern_p = "[cgt]gggtaaa|tttaccc[acg]";
        -: 7882:  jerry_size_t pattern_size = sizeof (pattern_p) - 1;
        -: 7883:  jerry_value_t pattern_str = jerry_string (pattern_p, pattern_size, JERRY_ENCODING_UTF8);
        -: 7884:
        -: 7885:  uint16_t pattern_flags = JERRY_REGEXP_FLAG_IGNORE_CASE;
        -: 7886:
        -: 7887:  jerry_value_t regexp = jerry_regexp (pattern_str, pattern_flags);
        -: 7888:  jerry_value_free (pattern_str);
        -: 7889:
        -: 7890:  ...
        -: 7891:
        -: 7892:  jerry_value_free (regexp);
        -: 7893:}
        -: 7894:```
        -: 7895:
        -: 7896:
        -: 7897:## jerry_typedarray
        -: 7898:
        -: 7899:**Summary**
        -: 7900:
        -: 7901:Create a jerry_value_t representing an TypedArray object.
        -: 7902:
        -: 7903:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 7904:and element count can be specified.
        -: 7905:
        -: 7906:*Notes*:
        -: 7907:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 7908:  when it is no longer needed.
        -: 7909:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 7910:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 7911:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 7912:- The es.next profile enables this by default.
        -: 7913:
        -: 7914:**Prototype**
        -: 7915:
        -: 7916:```c
        -: 7917:jerry_value_t
        -: 7918:jerry_typedarray (jerry_typedarray_type_t type_name, jerry_length_t item_count);
        -: 7919:```
        -: 7920:
        -: 7921:- `type_name` - type of TypedArray to create
        -: 7922:- `item_count` - number of items in the new TypedArray
        -: 7923:- return value - the new TypedArray as a `jerry_value_t`
        -: 7924:
        -: 7925:*New in version 2.0*.
        -: 7926:
        -: 7927:**Example**
        -: 7928:
        -: 7929:```c
        -: 7930:{
        -: 7931:  jerry_value_t array = jerry_typedarray (JERRY_TYPEDARRAY_UINT16, 15);
        -: 7932:
        -: 7933:  ... // use the TypedArray
        -: 7934:
        -: 7935:  jerry_value_free (array);
        -: 7936:}
        -: 7937:```
        -: 7938:
        -: 7939:**See also**
        -: 7940:
        -: 7941:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 7942:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 7943:- [jerry_value_free](#jerry_value_free)
        -: 7944:
        -: 7945:
        -: 7946:## jerry_typedarray_with_buffer
        -: 7947:
        -: 7948:**Summary**
        -: 7949:
        -: 7950:Create a jerry_value_t representing an TypedArray object using
        -: 7951:an already existing ArrayBuffer object.
        -: 7952:
        -: 7953:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 7954:and element count can be specified.
        -: 7955:
        -: 7956:The developer must ensure that the ArrayBuffer has the correct length for the given
        -: 7957:type of TypedArray otherwise an exception is generated.
        -: 7958:
        -: 7959:The JavaScript equivalent of this function is: `new %TypedArray%(arraybuffer)` where `%TypedArray%` is
        -: 7960:one of the allowed TypedArray functions.
        -: 7961:
        -: 7962:*Notes*:
        -: 7963:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 7964:  when it is no longer needed.
        -: 7965:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 7966:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 7967:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 7968:- The es.next profile enables this by default.
        -: 7969:
        -: 7970:**Prototype**
        -: 7971:
        -: 7972:```c
        -: 7973:jerry_value_t
        -: 7974:jerry_typedarray_with_buffer (jerry_typedarray_type_t type_name,
        -: 7975:                              const jerry_value_t arraybuffer);
        -: 7976:```
        -: 7977:
        -: 7978:- `type_name` - type of TypedArray to create
        -: 7979:- `arraybuffer` - the ArrayBuffer to use for the new TypedArray
        -: 7980:- return value
        -: 7981:  - the new TypedArray as a `jerry_value_t`
        -: 7982:  - exception if the ArrayBuffer does not have enough space for the given type of TypedArray
        -: 7983:
        -: 7984:*New in version 2.0*.
        -: 7985:
        -: 7986:**Example**
        -: 7987:
        -: 7988:```c
        -: 7989:{
        -: 7990:  jerry_value_t buffer = jerry_array_buffer (12 * 2);
        -: 7991:  jerry_value_t array = jerry_typedarray_with_buffer (JERRY_TYPEDARRAY_UINT16, buffer);
        -: 7992:  jerry_value_free (buffer);
        -: 7993:
        -: 7994:  ... // use the TypedArray
        -: 7995:
        -: 7996:  jerry_value_free (array);
        -: 7997:}
        -: 7998:```
        -: 7999:
        -: 8000:**See also**
        -: 8001:
        -: 8002:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 8003:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 8004:- [jerry_value_free](#jerry_value_free)
        -: 8005:
        -: 8006:
        -: 8007:## jerry_typedarray_with_buffer_span
        -: 8008:
        -: 8009:**Summary**
        -: 8010:
        -: 8011:Create a jerry_value_t representing an TypedArray object using
        -: 8012:an already existing ArrayBuffer object and by specifying the byteOffset, and length properties.
        -: 8013:
        -: 8014:For the new object the type of the TypedArray (see: [jerry_typedarray_type_t](#jerry_typedarray_type_t))
        -: 8015:and element count can be specified.
        -: 8016:
        -: 8017:The developer must ensure that the ArrayBuffer has the correct length for the given
        -: 8018:type of TypedArray otherwise an exception is generated.
        -: 8019:
        -: 8020:The JavaScript equivalent of this function is: `new %TypedArray%(arraybuffer, byteOffset, length)` where `%TypedArray%` is
        -: 8021:one of the allowed TypedArray functions.
        -: 8022:
        -: 8023:*Notes*:
        -: 8024:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 8025:  when it is no longer needed.
        -: 8026:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -: 8027:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -: 8028:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 8029:- The es.next profile enables this by default.
        -: 8030:
        -: 8031:**Prototype**
        -: 8032:
        -: 8033:```c
        -: 8034:jerry_value_t
        -: 8035:jerry_typedarray_with_buffer_span (jerry_typedarray_type_t type_name,
        -: 8036:                                   const jerry_value_t arraybuffer,
        -: 8037:                                   jerry_length_t byte_offset,
        -: 8038:                                   jerry_length_t length);
        -: 8039:```
        -: 8040:
        -: 8041:- `type_name` - type of TypedArray to create
        -: 8042:- `arraybuffer` - the ArrayBuffer to use for the new TypedArray
        -: 8043:- `byte_offset` - start offset to use for the ArrayBuffer
        -: 8044:- `length` - number of elements to used from the ArrayBuffer (this is not the same as the byteLength)
        -: 8045:- return value
        -: 8046:  - the new TypedArray as a `jerry_value_t`
        -: 8047:  - exception if the ArrayBuffer does not have enough space for the given type of TypedArray
        -: 8048:
        -: 8049:*New in version 2.0*.
        -: 8050:
        -: 8051:**Example**
        -: 8052:
        -: 8053:```c
        -: 8054:{
        -: 8055:  jerry_value_t buffer = jerry_array_buffer (12 * 2);
        -: 8056:  jerry_value_t array = jerry_typedarray_with_buffer_span (JERRY_TYPEDARRAY_UINT16, buffer, 4, 10);
        -: 8057:  jerry_value_free (buffer);
        -: 8058:
        -: 8059:  ... // use the TypedArray
        -: 8060:
        -: 8061:  jerry_value_free (array);
        -: 8062:}
        -: 8063:```
        -: 8064:
        -: 8065:**See also**
        -: 8066:
        -: 8067:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -: 8068:- [jerry_value_is_typedarray](#jerry_value_is_typedarray)
        -: 8069:- [jerry_value_free](#jerry_value_free)
        -: 8070:
        -: 8071:
        -: 8072:## jerry_container
        -: 8073:
        -: 8074:**Summary**
        -: 8075:
        -: 8076:Create a jerry_value_t representing a given type container object.
        -: 8077:
        -: 8078:*Notes*:
        -: 8079:- This method is expected to work the same way as the JavaScript Map constructor.
        -: 8080:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 8081:  when it is no longer needed.
        -: 8082:- This API depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -: 8083:  in runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -: 8084:  feature enum values.
        -: 8085:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 8086:- The es.next profile enables this by default.
        -: 8087:
        -: 8088:**Prototype**
        -: 8089:
        -: 8090:```c
        -: 8091:jerry_value_t
        -: 8092:jerry_container (jerry_container_type_t container_type,
        -: 8093:                 const jerry_value_t *arguments_list_p,
        -: 8094:                 jerry_length_t arguments_list_len);
        -: 8095:```
        -: 8096:
        -: 8097:- `container_type` - Type of the container to be created, see `jerry_container_type_t`.
        -: 8098:- `arguments_list_p` - The arguments passed to the container constructor to be inserted to the container.
        -: 8099:- `arguments_list_len` - The length of the above arguments.
        -: 8100:- return value - the new container object as a `jerry_value_t`
        -: 8101:
        -: 8102:*New in version 2.3*.
        -: 8103:
        -: 8104:**Example**
        -: 8105:
        -: 8106:[doctest]: # ()
        -: 8107:
        -: 8108:```c
        -: 8109:#include "jerryscript.h"
        -: 8110:
        -: 8111:int
    #####: 8112:main (void)
        -: 8113:{
    #####: 8114:  jerry_init (JERRY_INIT_EMPTY);
    #####: 8115:  jerry_char_t src[] = "[1,2,3,4].entries()";
    #####: 8116:  jerry_value_t iterable = jerry_eval (src, sizeof (src) - 1, JERRY_PARSE_NO_OPTS);
        -: 8117:
    #####: 8118:  jerry_value_t map = jerry_container (JERRY_CONTAINER_TYPE_MAP, &iterable, 1);
    #####: 8119:  jerry_value_free (iterable);
        -: 8120:
        -: 8121:  // use the Map
        -: 8122:
    #####: 8123:  jerry_value_free (map);
        -: 8124:
    #####: 8125:  jerry_cleanup ();
        -: 8126:  return 0;
        -: 8127:}
        -: 8128:```
        -: 8129:
        -: 8130:**See also**
        -: 8131:
        -: 8132:- [jerry_container_type_t](#jerry_container_type_t)
        -: 8133:- [jerry_container_type](#jerry_container_type)
        -: 8134:
        -: 8135:
        -: 8136:## jerry_undefined
        -: 8137:
        -: 8138:**Summary**
        -: 8139:
        -: 8140:Creates a `jerry_value_t` representing an undefined value.
        -: 8141:
        -: 8142:*Notes*:
        -: 8143:- The undefined value is a fixed constant. Its value can be copied any number of times without calling [jerry_value_copy](#jerry_value_copy), and freeing it with [jerry_value_free](#jerry_value_free) is optional.
        -: 8144:
        -: 8145:
        -: 8146:**Prototype**
        -: 8147:
        -: 8148:```c
        -: 8149:jerry_value_t
        -: 8150:jerry_undefined (void);
        -: 8151:```
        -: 8152:
        -: 8153:- return value - value of undefined
        -: 8154:
        -: 8155:**Example**
        -: 8156:
        -: 8157:```c
        -: 8158:{
        -: 8159:  jerry_value_t undefined_value = jerry_undefined ();
        -: 8160:
        -: 8161:  ... // usage of the value
        -: 8162:
        -: 8163:  jerry_value_free (undefined_value);
        -: 8164:}
        -: 8165:```
        -: 8166:
        -: 8167:**See also**
        -: 8168:
        -: 8169:- [jerry_value_free](#jerry_value_free)
        -: 8170:
        -: 8171:
        -: 8172:## jerry_realm
        -: 8173:
        -: 8174:**Summary**
        -: 8175:
        -: 8176:Creates a `jerry_value_t` representing a new global object.
        -: 8177:
        -: 8178:*Notes*:
        -: 8179:- Returned value must be freed with [jerry_value_free](#jerry_value_free)
        -: 8180:  when it is no longer needed.
        -: 8181:- This API depends on a build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -: 8182:  in runtime with the `JERRY_FEATURE_REALM` feature enum value.
        -: 8183:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -: 8184:- The es.next profile enables this by default.
        -: 8185:
        -: 8186:**Prototype**
        -: 8187:
        -: 8188:```c
        -: 8189:jerry_value_t
        -: 8190:jerry_realm (void);
        -: 8191:```
        -: 8192:
        -: 8193:- return value - realm object value
        -: 8194:
        -: 8195:*New in version 2.4*.
        -: 8196:
        -: 8197:**Example**
        -: 8198:
        -: 8199:[doctest]: # ()
        -: 8200:
        -: 8201:```c
        -: 8202:#include "jerryscript.h"
        -: 8203:
        -: 8204:int
    #####: 8205:main (void)
        -: 8206:{
    #####: 8207:  jerry_init (JERRY_INIT_EMPTY);
        -: 8208:
    #####: 8209:  jerry_value_t realm_value = jerry_realm ();
        -: 8210:
        -: 8211:  // usage of the value
        -: 8212:
    #####: 8213:  jerry_value_free (realm_value);
    #####: 8214:  jerry_cleanup ();
        -: 8215:
        -: 8216:  return 0;
        -: 8217:}
        -: 8218:```
        -: 8219:
        -: 8220:**See also**
        -: 8221:
        -: 8222:- [jerry_value_free](#jerry_value_free)
        -: 8223:
        -: 8224:
        -: 8225:# General API functions of JS objects
        -: 8226:
        -: 8227:## jerry_object_has
        -: 8228:
        -: 8229:**Summary**
        -: 8230:
        -: 8231:Checks whether the object or its prototype objects have the given property.
        -: 8232:
        -: 8233:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 8234:is no longer needed.
        -: 8235:
        -: 8236:**Prototype**
        -: 8237:
        -: 8238:```c
        -: 8239:jerry_value_t
        -: 8240:jerry_object_has (const jerry_value_t obj_val,
        -: 8241:                  const jerry_value_t prop_name_val);
        -: 8242:```
        -: 8243:
        -: 8244:- `obj_val` - object value
        -: 8245:- `prop_name_val` - property name
        -: 8246:- return value - JavaScript value that evaluates to
        -: 8247:  -  exception - if the operation fail
        -: 8248:  -  true/false API value - depend on whether the property exists
        -: 8249:
        -: 8250:*Changed in version 2.0*: The return value type is now a JavaScript value and not a primitive boolean value.
        -: 8251:
        -: 8252:*Changed in version 2.3*: The return value can be an exception value.
        -: 8253:
        -: 8254:**Example**
        -: 8255:
        -: 8256:[doctest]: # ()
        -: 8257:
        -: 8258:```c
        -: 8259:#include "jerryscript.h"
        -: 8260:
        -: 8261:int
    #####: 8262:main (void)
        -: 8263:{
    #####: 8264:  jerry_init (JERRY_INIT_EMPTY);
        -: 8265:
    #####: 8266:  jerry_value_t global_object = jerry_current_realm ();
    #####: 8267:  jerry_value_t prop_name = jerry_string_sz ("handler_field");
        -: 8268:
    #####: 8269:  jerry_value_t has_prop_js = jerry_object_has (global_object, prop_name);
    #####: 8270:  bool has_prop = jerry_value_is_true (has_prop_js);
        -: 8271:
    #####: 8272:  jerry_value_free (has_prop_js);
    #####: 8273:  jerry_value_free (prop_name);
    #####: 8274:  jerry_value_free (global_object);
        -: 8275:
    #####: 8276:  jerry_cleanup ();
        -: 8277:
        -: 8278:  return 0;
        -: 8279:}
        -: 8280:```
        -: 8281:
        -: 8282:**See also**
        -: 8283:
        -: 8284:- [jerry_object_has_own](#jerry_object_has_own)
        -: 8285:- [jerry_object_delete](#jerry_object_delete)
        -: 8286:
        -: 8287:
        -: 8288:## jerry_object_has_own
        -: 8289:
        -: 8290:**Summary**
        -: 8291:
        -: 8292:Checks whether the object has the given property.
        -: 8293:
        -: 8294:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 8295:is no longer needed.
        -: 8296:
        -: 8297:**Prototype**
        -: 8298:
        -: 8299:```c
        -: 8300:jerry_value_t
        -: 8301:jerry_object_has_own (const jerry_value_t obj_val,
        -: 8302:                      const jerry_value_t prop_name_val);
        -: 8303:```
        -: 8304:
        -: 8305:- `obj_val` - object value
        -: 8306:- `prop_name_val` - property name
        -: 8307:- return value - JavaScript value that evaluates to
        -: 8308:  -  exception - if the operation fails
        -: 8309:  -  true/false API value - depend on whether the property exists
        -: 8310:
        -: 8311:*Changed in version 2.0*: The return value type is now a JavaScript value and not a primitive boolean value.
        -: 8312:
        -: 8313:*Changed in version 2.3*: The return value can be an exception value.
        -: 8314:
        -: 8315:**Example**
        -: 8316:
        -: 8317:[doctest]: # ()
        -: 8318:
        -: 8319:```c
        -: 8320:#include "jerryscript.h"
        -: 8321:
        -: 8322:int
    #####: 8323:main (void)
        -: 8324:{
    #####: 8325:  jerry_init (JERRY_INIT_EMPTY);
        -: 8326:
    #####: 8327:  jerry_value_t global_object = jerry_current_realm ();
    #####: 8328:  jerry_value_t prop_name = jerry_string_sz ("handler_field");
        -: 8329:
    #####: 8330:  jerry_value_t has_prop_js = jerry_object_has_own (global_object, prop_name);
    #####: 8331:  bool has_prop = jerry_value_is_true (has_prop_js);
        -: 8332:
    #####: 8333:  jerry_value_free (has_prop_js);
    #####: 8334:  jerry_value_free (prop_name);
    #####: 8335:  jerry_value_free (global_object);
        -: 8336:
    #####: 8337:  jerry_cleanup ();
        -: 8338:
        -: 8339:  return 0;
        -: 8340:}
        -: 8341:```
        -: 8342:
        -: 8343:**See also**
        -: 8344:
        -: 8345:- [jerry_object_has](#jerry_object_has)
        -: 8346:- [jerry_object_delete](#jerry_object_delete)
        -: 8347:
        -: 8348:
        -: 8349:## jerry_object_has_internal
        -: 8350:
        -: 8351:**Summary**
        -: 8352:
        -: 8353:Checks whether the object has the given internal property.
        -: 8354:
        -: 8355:*Note*:
        -: 8356: - Properties which were not created with [jerry_object_set_internal](#jerry_object_set_internal) are excluded
        -: 8357:   during the operation.
        -: 8358: - Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 8359:is no longer needed.
        -: 8360:
        -: 8361:**Prototype**
        -: 8362:
        -: 8363:```c
        -: 8364:bool
        -: 8365:jerry_object_has_internal (const jerry_value_t obj_val,
        -: 8366:                           const jerry_value_t prop_name_val);
        -: 8367:```
        -: 8368:
        -: 8369:- `obj_val` - object value
        -: 8370:- `prop_name_val` - property name
        -: 8371:- return value
        -: 8372:  - true, if the property exists
        -: 8373:  - false, otherwise
        -: 8374:
        -: 8375:*New in version 2.2*.
        -: 8376:
        -: 8377:**Example**
        -: 8378:
        -: 8379:[doctest]: # ()
        -: 8380:
        -: 8381:```c
        -: 8382:#include "jerryscript.h"
        -: 8383:
        -: 8384:int
    #####: 8385:main (void)
        -: 8386:{
    #####: 8387:  jerry_init (JERRY_INIT_EMPTY);
        -: 8388:
    #####: 8389:  jerry_value_t global_object = jerry_current_realm ();
    #####: 8390:  jerry_value_t prop_name = jerry_string_sz ("hidden_property");
        -: 8391:
    #####: 8392:  bool has_internal_js_prop = jerry_object_has_internal (global_object, prop_name);
        -: 8393:
    #####: 8394:  jerry_value_free (prop_name);
    #####: 8395:  jerry_value_free (global_object);
        -: 8396:
        -: 8397:  return 0;
        -: 8398:}
        -: 8399:```
        -: 8400:
        -: 8401:**See also**
        -: 8402:
        -: 8403:- [jerry_object_delete_internal](#jerry_object_delete_internal)
        -: 8404:- [jerry_object_get_internal](#jerry_object_get_internal)
        -: 8405:- [jerry_object_set_internal](#jerry_object_set_internal)
        -: 8406:
        -: 8407:
        -: 8408:## jerry_object_delete
        -: 8409:
        -: 8410:**Summary**
        -: 8411:
        -: 8412:Delete a property from an object.
        -: 8413:
        -: 8414:**Prototype**
        -: 8415:
        -: 8416:```c
        -: 8417:jerry_value_t
        -: 8418:jerry_object_delete (const jerry_value_t obj_val,
        -: 8419:                     const jerry_value_t prop_name_val);
        -: 8420:```
        -: 8421:
        -: 8422:- `obj_val` - object value
        -: 8423:- `prop_name_val` - property name
        -: 8424:- return value
        -: 8425:  - true, if property was deleted successfully
        -: 8426:  - exception, otherwise
        -: 8427:
        -: 8428:**Example**
        -: 8429:
        -: 8430:```c
        -: 8431:{
        -: 8432:  jerry_value_t global_object = jerry_current_realm ();
        -: 8433:  jerry_value_t prop_name = jerry_string_sz ("my_prop");
        -: 8434:
        -: 8435:  jerry_value_t delete_result = jerry_object_delete (global_object, prop_name);
        -: 8436:  /* use "delete_result" */
        -: 8437:
        -: 8438:  jerry_value_free (delete_result);
        -: 8439:  jerry_value_free (prop_name);
        -: 8440:  jerry_value_free (global_object);
        -: 8441:}
        -: 8442:```
        -: 8443:
        -: 8444:**See also**
        -: 8445:
        -: 8446:- [jerry_object_has](#jerry_object_has)
        -: 8447:- [jerry_object_has_own](#jerry_object_has_own)
        -: 8448:- [jerry_object_delete_index](#jerry_object_delete_index)
        -: 8449:- [jerry_object_get](#jerry_object_get)
        -: 8450:
        -: 8451:
        -: 8452:## jerry_object_delete_index
        -: 8453:
        -: 8454:**Summary**
        -: 8455:
        -: 8456:Delete indexed property from the specified object.
        -: 8457:
        -: 8458:**Prototype**
        -: 8459:
        -: 8460:```c
        -: 8461:jerry_value_t
        -: 8462:jerry_object_delete_index (const jerry_value_t obj_val,
        -: 8463:                           uint32_t index);
        -: 8464:```
        -: 8465:
        -: 8466:- `obj_val` - object value
        -: 8467:- `index` - index number
        -: 8468:- return value
        -: 8469:  - true value, if property was deleted successfully
        -: 8470:  - exception, otherwise
        -: 8471:
        -: 8472:*New in version 2.0*.
        -: 8473:
        -: 8474:**Example**
        -: 8475:
        -: 8476:```c
        -: 8477:{
        -: 8478:  jerry_value_t object;
        -: 8479:
        -: 8480:  ... // create or copy object
        -: 8481:
        -: 8482:  jerry_value_t delete_result = jerry_object_delete_index (object, 5);
        -: 8483:
        -: 8484:  jerry_value_free (delete_result);
        -: 8485:  jerry_value_free (object);
        -: 8486:}
        -: 8487:```
        -: 8488:
        -: 8489:**See also**
        -: 8490:
        -: 8491:- [jerry_object_has](#jerry_object_has)
        -: 8492:- [jerry_object_has_own](#jerry_object_has_own)
        -: 8493:- [jerry_object_delete](#jerry_object_delete)
        -: 8494:- [jerry_object_get](#jerry_object_get)
        -: 8495:- [jerry_object_set](#jerry_object_set)
        -: 8496:- [jerry_object_get_index](#jerry_object_get_index)
        -: 8497:- [jerry_object_set_index](#jerry_object_set_index)
        -: 8498:
        -: 8499:## jerry_object_delete_internal
        -: 8500:
        -: 8501:**Summary**
        -: 8502:
        -: 8503:Delete an internal property from an object.
        -: 8504:
        -: 8505:*Note*: Properties which were not created with [jerry_object_set_internal](#jerry_object_set_internal) are excluded
        -: 8506:        during the operation.
        -: 8507:
        -: 8508:**Prototype**
        -: 8509:
        -: 8510:```c
        -: 8511:bool
        -: 8512:jerry_object_delete_internal (const jerry_value_t obj_val,
        -: 8513:                              const jerry_value_t prop_name_val);
        -: 8514:```
        -: 8515:
        -: 8516:- `obj_val` - object value
        -: 8517:- `prop_name_val` - property name
        -: 8518:- return value
        -: 8519:  - true, if property was deleted successfully
        -: 8520:  - false, otherwise
        -: 8521:
        -: 8522:*New in version 2.2*.
        -: 8523:
        -: 8524:**Example**
        -: 8525:
        -: 8526:```c
        -: 8527:{
        -: 8528:  jerry_value_t global_object = jerry_current_realm ();
        -: 8529:  jerry_value_t prop_name = jerry_string_sz ("hidden_property");
        -: 8530:
        -: 8531:  bool delete_result = jerry_object_delete_internal (global_object, prop_name);
        -: 8532:  /* use "delete_result" */
        -: 8533:
        -: 8534:  jerry_value_free (prop_name);
        -: 8535:  jerry_value_free (global_object);
        -: 8536:}
        -: 8537:```
        -: 8538:
        -: 8539:**See also**
        -: 8540:
        -: 8541:- [jerry_object_has_internal](#jerry_object_has_internal)
        -: 8542:- [jerry_object_get_internal](#jerry_object_get_internal)
        -: 8543:- [jerry_object_set_internal](#jerry_object_set_internal)
        -: 8544:
        -: 8545:
        -: 8546:## jerry_object_get
        -: 8547:
        -: 8548:**Summary**
        -: 8549:
        -: 8550:Get value of a property to the specified object with the given name.
        -: 8551:
        -: 8552:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 8553:is no longer needed.
        -: 8554:
        -: 8555:**Prototype**
        -: 8556:
        -: 8557:```c
        -: 8558:jerry_value_t
        -: 8559:jerry_object_get (const jerry_value_t obj_val,
        -: 8560:                  const jerry_value_t prop_name_val);
        -: 8561:```
        -: 8562:
        -: 8563:- `obj_val` - object value
        -: 8564:- `prop_name_val` - property name
        -: 8565:- return value
        -: 8566:  - value of property, if success
        -: 8567:  - thrown exception, otherwise
        -: 8568:
        -: 8569:**Example**
        -: 8570:
        -: 8571:[doctest]: # ()
        -: 8572:
        -: 8573:```c
        -: 8574:#include "jerryscript.h"
        -: 8575:
        -: 8576:int
    #####: 8577:main (void)
        -: 8578:{
    #####: 8579:  jerry_init (JERRY_INIT_EMPTY);
        -: 8580:
    #####: 8581:  jerry_value_t global_object = jerry_current_realm ();
    #####: 8582:  jerry_value_t prop_name = jerry_string_sz ("Object");
        -: 8583:
    #####: 8584:  jerry_value_t prop_value = jerry_object_get (global_object, prop_name);
        -: 8585:
        -: 8586:  /* use "prop_value" then release it. */
        -: 8587:
    #####: 8588:  jerry_value_free (prop_value);
    #####: 8589:  jerry_value_free (prop_name);
    #####: 8590:  jerry_value_free (global_object);
        -: 8591:
        -: 8592:  return 0;
        -: 8593:}
        -: 8594:```
        -: 8595:
        -: 8596:**See also**
        -: 8597:
        -: 8598:- [jerry_object_has](#jerry_object_has)
        -: 8599:- [jerry_object_has_own](#jerry_object_has_own)
        -: 8600:- [jerry_object_delete](#jerry_object_delete)
        -: 8601:- [jerry_object_delete_index](#jerry_object_delete_index)
        -: 8602:- [jerry_object_set](#jerry_object_set)
        -: 8603:- [jerry_object_get_index](#jerry_object_get_index)
        -: 8604:- [jerry_object_set_index](#jerry_object_set_index)
        -: 8605:
        -: 8606:
        -: 8607:## jerry_object_get_index
        -: 8608:
        -: 8609:**Summary**
        -: 8610:
        -: 8611:Get value by an index from the specified object.
        -: 8612:
        -: 8613:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 8614:is no longer needed.
        -: 8615:
        -: 8616:**Prototype**
        -: 8617:
        -: 8618:```c
        -: 8619:jerry_value_t
        -: 8620:jerry_object_get_index (const jerry_value_t obj_val,
        -: 8621:                        uint32_t index);
        -: 8622:```
        -: 8623:
        -: 8624:- `obj_val` - object value
        -: 8625:- `index` - index number
        -: 8626:- return value
        -: 8627:  - stored value on the specified index, if success
        -: 8628:  - thrown exception, otherwise.
        -: 8629:
        -: 8630:**Example**
        -: 8631:
        -: 8632:```c
        -: 8633:{
        -: 8634:  jerry_value_t object;
        -: 8635:
        -: 8636:  ... // create or copy object
        -: 8637:
        -: 8638:  jerry_value_t value = jerry_object_get_index (object, 5);
        -: 8639:
        -: 8640:  ...
        -: 8641:
        -: 8642:  jerry_value_free (value);
        -: 8643:  jerry_value_free (object);
        -: 8644:}
        -: 8645:```
        -: 8646:
        -: 8647:**See also**
        -: 8648:
        -: 8649:- [jerry_object_has](#jerry_object_has)
        -: 8650:- [jerry_object_has_own](#jerry_object_has_own)
        -: 8651:- [jerry_object_delete](#jerry_object_delete)
        -: 8652:- [jerry_object_delete_index](#jerry_object_delete_index)
        -: 8653:- [jerry_object_get](#jerry_object_get)
        -: 8654:- [jerry_object_set](#jerry_object_set)
        -: 8655:- [jerry_object_set_index](#jerry_object_set_index)
        -: 8656:
        -: 8657:## jerry_object_find_own
        -: 8658:
        -: 8659:**Summary**
        -: 8660:
        -: 8661:Get the own property value of an object with the given name. The function tells
        -: 8662:whether the property is found, and the receiver object can be specified as well.
        -: 8663:The receiver is passed as the `this` argument for getters, and the receiver
        -: 8664:argument for Proxy `get` traps.
        -: 8665:
        -: 8666:*Notes*:
        -: 8667:  - Returned value must be freed with [jerry_value_free](#jerry_value_free) when it is no longer needed.
        -: 8668:  - The `found_p` argument is ignored if its value is NULL.
        -: 8669:  - The target value of `found_p` argument is set to false when the arguments are invalid, e.g. `obj_val` is not an object.
        -: 8670:
        -: 8671:**Prototype**
        -: 8672:
        -: 8673:```c
        -: 8674:jerry_value_t
        -: 8675:jerry_object_find_own (const jerry_value_t obj_val,
        -: 8676:                       const jerry_value_t prop_name_val,
        -: 8677:                       const jerry_value_t receiver_val,
        -: 8678:                       bool *found_p);
        -: 8679:```
        -: 8680:
        -: 8681:- `obj_val` - object value
        -: 8682:- `prop_name_val` - property name
        -: 8683:- `receiver_val` - receiver object
        -: 8684:- `found_p` - [out] true, if the property is found or obj_val is a Proxy object, false otherwise
        -: 8685:- return value
        -: 8686:  - value of property, if success
        -: 8687:  - thrown exception, otherwise
        -: 8688:
        -: 8689:**Example**
        -: 8690:
        -: 8691:[doctest]: # ()
        -: 8692:
        -: 8693:```c
        -: 8694:#include "jerryscript.h"
        -: 8695:#include "stdio.h"
        -: 8696:
        -: 8697:int
    #####: 8698:main (void)
        -: 8699:{
    #####: 8700:  jerry_init (JERRY_INIT_EMPTY);
        -: 8701:
    #####: 8702:  jerry_value_t global_object = jerry_current_realm ();
    #####: 8703:  jerry_value_t prop_name = jerry_string_sz ("Object");
        -: 8704:
        -: 8705:  bool found;
    #####: 8706:  jerry_value_t prop_value = jerry_object_find_own (global_object, prop_name, global_object, &found);
        -: 8707:
    #####: 8708:  if (found)
        -: 8709:  {
        -: 8710:    printf ("Property is found!\n");
        -: 8711:  }
        -: 8712:
        -: 8713:  /* use "prop_value" then release it. */
        -: 8714:
    #####: 8715:  jerry_value_free (prop_value);
    #####: 8716:  jerry_value_free (prop_name);
    #####: 8717:  jerry_value_free (global_object);
        -: 8718:
        -: 8719:  return 0;
        -: 8720:}
        -: 8721:```
        -: 8722:
        -: 8723:**See also**
        -: 8724:
        -: 8725:- [jerry_object_get](#jerry_object_get)
        -: 8726:- [jerry_object_get_index](#jerry_object_get_index)
        -: 8727:
        -: 8728:## jerry_object_get_internal
        -: 8729:
        -: 8730:**Summary**
        -: 8731:
        -: 8732:Get value of an internal property to the specified object with the given name.
        -: 8733:
        -: 8734:*Note*:
        -: 8735: - Properties which were not created with [jerry_object_set_internal](#jerry_object_set_internal) are excluded
        -: 8736:   during the operation.
        -: 8737: - Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 8738:   is no longer needed.
        -: 8739:
        -: 8740:**Prototype**
        -: 8741:
        -: 8742:```c
        -: 8743:jerry_value_t
        -: 8744:jerry_object_get_internal (const jerry_value_t obj_val,
        -: 8745:                           const jerry_value_t prop_name_val);
        -: 8746:```
        -: 8747:
        -: 8748:- `obj_val` - object value
        -: 8749:- `prop_name_val` - property name
        -: 8750:- return value
        -: 8751:  - value of property, if the internal property exists
        -: 8752:  - undefined value, if the, if the internal does not property exists
        -: 8753:  - thrown exception, otherwise
        -: 8754:
        -: 8755:*New in version 2.2*.
        -: 8756:
        -: 8757:**Example**
        -: 8758:
        -: 8759:[doctest]: # ()
        -: 8760:
        -: 8761:```c
        -: 8762:#include "jerryscript.h"
        -: 8763:
        -: 8764:int
    #####: 8765:main (void)
        -: 8766:{
    #####: 8767:  jerry_init (JERRY_INIT_EMPTY);
        -: 8768:
    #####: 8769:  jerry_value_t global_object = jerry_current_realm ();
    #####: 8770:  jerry_value_t prop_name = jerry_string_sz ("hidden_property");
        -: 8771:
    #####: 8772:  jerry_value_t prop_value = jerry_object_get_internal (global_object, prop_name);
        -: 8773:
        -: 8774:  /* use "prop_value" then release it. */
        -: 8775:
    #####: 8776:  jerry_value_free (prop_value);
    #####: 8777:  jerry_value_free (prop_name);
    #####: 8778:  jerry_value_free (global_object);
        -: 8779:
        -: 8780:  return 0;
        -: 8781:}
        -: 8782:```
        -: 8783:
        -: 8784:**See also**
        -: 8785:
        -: 8786:- [jerry_object_has_internal](#jerry_object_has_internal)
        -: 8787:- [jerry_object_delete_internal](#jerry_object_delete_internal)
        -: 8788:- [jerry_object_set_internal](#jerry_object_set_internal)
        -: 8789:
        -: 8790:
        -: 8791:## jerry_object_set
        -: 8792:
        -: 8793:**Summary**
        -: 8794:
        -: 8795:Set a property to the specified object with the given name.
        -: 8796:
        -: 8797:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 8798:is no longer needed.
        -: 8799:
        -: 8800:**Prototype**
        -: 8801:
        -: 8802:```c
        -: 8803:jerry_value_t
        -: 8804:jerry_object_set (const jerry_value_t obj_val,
        -: 8805:                  const jerry_value_t prop_name_val,
        -: 8806:                  const jerry_value_t value_to_set)
        -: 8807:```
        -: 8808:
        -: 8809:- `obj_val` - object value
        -: 8810:- `prop_name_val` - property name
        -: 8811:- `value_to_set` - value to set
        -: 8812:- return value
        -: 8813:  - true, if success
        -: 8814:  - thrown exception, otherwise
        -: 8815:
        -: 8816:**Example**
        -: 8817:
        -: 8818:```c
        -: 8819:{
        -: 8820:  jerry_value_t value_to_set;
        -: 8821:
        -: 8822:  ... // create or copy value to set
        -: 8823:
        -: 8824:  jerry_value_t glob_obj = jerry_current_realm ();
        -: 8825:  jerry_value_t prop_name = jerry_string_sz ("my_prop");
        -: 8826:
        -: 8827:  jerry_value_t set_result = jerry_object_set (glob_obj, prop_name, value_to_set);
        -: 8828:
        -: 8829:  ... // check result of property set call
        -: 8830:
        -: 8831:  jerry_value_free (set_result);
        -: 8832:  jerry_value_free (prop_name);
        -: 8833:
        -: 8834:  ...
        -: 8835:
        -: 8836:  jerry_value_free (value_to_set);
        -: 8837:  jerry_value_free (glob_obj);
        -: 8838:}
        -: 8839:```
        -: 8840:
        -: 8841:**See also**
        -: 8842:
        -: 8843:- [jerry_object_has](#jerry_object_has)
        -: 8844:- [jerry_object_has_own](#jerry_object_has_own)
        -: 8845:- [jerry_object_delete](#jerry_object_delete)
        -: 8846:- [jerry_object_delete_index](#jerry_object_delete_index)
        -: 8847:- [jerry_object_get](#jerry_object_get)
        -: 8848:- [jerry_object_get_index](#jerry_object_get_index)
        -: 8849:- [jerry_object_set_index](#jerry_object_set_index)
        -: 8850:
        -: 8851:
        -: 8852:## jerry_object_set_index
        -: 8853:
        -: 8854:**Summary**
        -: 8855:
        -: 8856:Set indexed value in the specified object
        -: 8857:
        -: 8858:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 8859:is no longer needed.
        -: 8860:
        -: 8861:**Prototype**
        -: 8862:
        -: 8863:```c
        -: 8864:jerry_value_t
        -: 8865:jerry_object_set_index (const jerry_value_t obj_val,
        -: 8866:                        uint32_t index,
        -: 8867:                        const jerry_value_t value_to_set);
        -: 8868:```
        -: 8869:
        -: 8870:- `obj_val` - object value
        -: 8871:- `index` - index number
        -: 8872:- `value_to_set` - value to set
        -: 8873:- return value
        -: 8874:  - true, if field value was set successfully
        -: 8875:  - thrown exception, otherwise
        -: 8876:
        -: 8877:**Example**
        -: 8878:
        -: 8879:```c
        -: 8880:{
        -: 8881:  jerry_value_t object;
        -: 8882:  jerry_value_t value_to_set;
        -: 8883:
        -: 8884:  ... // create or copy object and value to set
        -: 8885:
        -: 8886:  jerry_value_t ret_val = jerry_object_set_index (object, 5, value_to_set);
        -: 8887:
        -: 8888:  ...
        -: 8889:
        -: 8890:  jerry_value_free (value_to_set);
        -: 8891:  jerry_value_free (ret_val);
        -: 8892:  jerry_value_free (object);
        -: 8893:}
        -: 8894:```
        -: 8895:
        -: 8896:**See also**
        -: 8897:
        -: 8898:- [jerry_object_has](#jerry_object_has)
        -: 8899:- [jerry_object_has_own](#jerry_object_has_own)
        -: 8900:- [jerry_object_delete](#jerry_object_delete)
        -: 8901:- [jerry_object_delete_index](#jerry_object_delete_index)
        -: 8902:- [jerry_object_get](#jerry_object_get)
        -: 8903:- [jerry_object_set](#jerry_object_set)
        -: 8904:- [jerry_object_get_index](#jerry_object_get_index)
        -: 8905:
        -: 8906:
        -: 8907:## jerry_object_set_internal
        -: 8908:
        -: 8909:**Summary**
        -: 8910:
        -: 8911:Set an internal property to the specified object with the given name.
        -: 8912:
        -: 8913:*Note*:
        -: 8914: - The property cannot be accessed from the JavaScript context, only from the public API.
        -: 8915: - It is different from [jerry_object_set_native_ptr](#jerry_object_set_native_ptr) in that any jerry API value
        -: 8916:   can be hidden from the JavaScript context, not only native pointers.
        -: 8917:
        -: 8918:**Prototype**
        -: 8919:
        -: 8920:```c
        -: 8921:bool
        -: 8922:jerry_object_set_internal (const jerry_value_t obj_val,
        -: 8923:                           const jerry_value_t prop_name_val,
        -: 8924:                           const jerry_value_t value_to_set)
        -: 8925:```
        -: 8926:
        -: 8927:- `obj_val` - object value
        -: 8928:- `prop_name_val` - property name
        -: 8929:- `value_to_set` - value to set
        -: 8930:- return value
        -: 8931:  - true, if success
        -: 8932:  - thrown exception, otherwise
        -: 8933:
        -: 8934:*New in version 2.2*.
        -: 8935:
        -: 8936:**Example**
        -: 8937:
        -: 8938:[doctest]: # ()
        -: 8939:
        -: 8940:```c
        -: 8941:#include "jerryscript.h"
        -: 8942:
        -: 8943:int
    #####: 8944:main (void)
        -: 8945:{
    #####: 8946:  jerry_init (JERRY_INIT_EMPTY);
        -: 8947:
    #####: 8948:  jerry_value_t global_object = jerry_current_realm ();
    #####: 8949:  jerry_value_t prop_name = jerry_string_sz ("hidden_property");
    #####: 8950:  jerry_value_t value_to_set = jerry_number (5);
        -: 8951:
    #####: 8952:  bool set_result = jerry_object_set_internal (global_object, prop_name, value_to_set);
        -: 8953:
        -: 8954:  /* check the result of internal property set call */
        -: 8955:
    #####: 8956:  jerry_value_free (value_to_set);
    #####: 8957:  jerry_value_free (prop_name);
    #####: 8958:  jerry_value_free (global_object);
        -: 8959:
        -: 8960:  return 0;
        -: 8961:}
        -: 8962:```
        -: 8963:
        -: 8964:**See also**
        -: 8965:
        -: 8966:- [jerry_object_has_internal](#jerry_object_has_internal)
        -: 8967:- [jerry_object_delete_internal](#jerry_object_delete_internal)
        -: 8968:- [jerry_object_get_internal](#jerry_object_get_internal)
        -: 8969:
        -: 8970:
        -: 8971:## jerry_property_descriptor
        -: 8972:
        -: 8973:**Summary**
        -: 8974:
        -: 8975:Create a property descriptor and initialize it with default values. This means that all fields in
        -: 8976:the `jerry_property_descriptor_t` struct will be set to zero or false depending on the field's type.
        -: 8977:
        -: 8978:**Prototype**
        -: 8979:
        -: 8980:```c
        -: 8981:jerry_property_descriptor_t
        -: 8982:jerry_property_descriptor (void);
        -: 8983:```
        -: 8984:
        -: 8985:*New in version [[NEXT_RELEASE]]*: Replaces `jerry_init_property_descriptor_fields`.
        -: 8986:
        -: 8987:**Example**
        -: 8988:
        -: 8989:```c
        -: 8990:{
        -: 8991:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor ();
        -: 8992:
        -: 8993:  ... // usage of prop_desc
        -: 8994:
        -: 8995:  jerry_property_descriptor_free (&prop_desc);
        -: 8996:}
        -: 8997:```
        -: 8998:
        -: 8999:For a more complete example see [jerry_object_define_own_prop](#jerry_object_define_own_prop).
        -: 9000:
        -: 9001:**See also**
        -: 9002:
        -: 9003:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 9004:- [jerry_object_define_own_prop](#jerry_object_define_own_prop)
        -: 9005:- [jerry_object_get_own_prop](#jerry_object_get_own_prop)
        -: 9006:- [jerry_property_descriptor_free](#jerry_property_descriptor_free)
        -: 9007:
        -: 9008:
        -: 9009:## jerry_object_define_own_prop
        -: 9010:
        -: 9011:**Summary**
        -: 9012:
        -: 9013:Define a property to the specified object with the given name.
        -: 9014:
        -: 9015:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 9016:is no longer needed.
        -: 9017:
        -: 9018:**Prototype**
        -: 9019:
        -: 9020:```c
        -: 9021:jerry_value_t
        -: 9022:jerry_object_define_own_prop (const jerry_value_t obj_val,
        -: 9023:                              const jerry_value_t prop_name_val,
        -: 9024:                              const jerry_property_descriptor_t *prop_desc_p);
        -: 9025:```
        -: 9026:
        -: 9027:- `obj_val` - target object where the property should be registered
        -: 9028:- `prop_name_val` - property name
        -: 9029:- `prop_desc_p` - pointer to property descriptor
        -: 9030:- return value
        -: 9031:  - true, if success
        -: 9032:  - thrown exception, otherwise
        -: 9033:
        -: 9034:**Example**
        -: 9035:
        -: 9036:Registering a simple value property via the `jerry_object_define_own_prop` method:
        -: 9037:
        -: 9038:[doctest]: # (name="02.API-REFERENCE-define-property.c")
        -: 9039:
        -: 9040:```c
        -: 9041:#include "jerryscript.h"
        -: 9042:
        -: 9043:int
    #####: 9044:main (void)
        -: 9045:{
    #####: 9046:  jerry_init (JERRY_INIT_EMPTY);
        -: 9047:
    #####: 9048:  jerry_value_t global_obj_val = jerry_current_realm ();
        -: 9049:
        -: 9050:  // configure the property
    #####: 9051:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor ();
        -: 9052:
        -: 9053:  // create or copy value to set
        -: 9054:  // For example:
    #####: 9055:  jerry_value_t value_to_set = jerry_number (33);
        -: 9056:
        -: 9057:  // set the property descriptor fields:
        -: 9058:  // set the "JERRY_PROP_IS_VALUE_DEFINED" flag to indicate the "value"
        -: 9059:  //  field should be used during the property registration.
        -: 9060:  // set the writable, configurable, enumerable flags to true
    #####: 9061:  prop_desc.flags |= (JERRY_PROP_IS_WRITABLE_DEFINED
        -: 9062:                      | JERRY_PROP_IS_WRITABLE
        -: 9063:                      | JERRY_PROP_IS_CONFIGURABLE_DEFINED
        -: 9064:                      | JERRY_PROP_IS_CONFIGURABLE
        -: 9065:                      | JERRY_PROP_IS_ENUMERABLE_DEFINED
        -: 9066:                      | JERRY_PROP_IS_ENUMERABLE
        -: 9067:                      | JERRY_PROP_IS_VALUE_DEFINED);
        -: 9068:
        -: 9069:  // set the "value" field to the number 33
    #####: 9070:  prop_desc.value = value_to_set;
        -: 9071:
        -: 9072:  // add the property as "my_prop" for the global object
    #####: 9073:  jerry_value_t prop_name = jerry_string_sz ("my_prop");
    #####: 9074:  jerry_value_t return_value = jerry_object_define_own_prop (global_obj_val, prop_name, &prop_desc);
    #####: 9075:  if (jerry_value_is_exception (return_value))
        -: 9076:  {
        -: 9077:    // there was an error
        -: 9078:  }
        -: 9079:
        -: 9080:  // re-define the property with the enumerable flag set to false
    #####: 9081:  prop_desc.flags &= (uint16_t) ~JERRY_PROP_IS_ENUMERABLE;
    #####: 9082:  return_value = jerry_object_define_own_prop (global_obj_val, prop_name, &prop_desc);
    #####: 9083:  if (jerry_value_is_exception (return_value))
        -: 9084:  {
        -: 9085:    // there was an error
        -: 9086:  }
        -: 9087:
        -: 9088:  // if there was no exception at this point the global object should have a "my_prop" property
        -: 9089:
    #####: 9090:  jerry_value_free (return_value);
    #####: 9091:  jerry_value_free (prop_name);
        -: 9092:
    #####: 9093:  jerry_property_descriptor_free (&prop_desc);
    #####: 9094:  jerry_value_free (global_obj_val);
        -: 9095:
    #####: 9096:  jerry_cleanup ();
        -: 9097:  return 0;
        -: 9098:}
        -: 9099:```
        -: 9100:
        -: 9101:
        -: 9102:Registering a getter/setter property via the `jerry_object_define_own_prop` method:
        -: 9103:
        -: 9104:[doctest]: # (name="02.API-REFERENCE-define-property-getset.c")
        -: 9105:
        -: 9106:```c
        -: 9107:#include <stdio.h>
        -: 9108:#include <string.h>
        -: 9109:#include "jerryscript.h"
        -: 9110:
        -: 9111:static int counter = 0;
        -: 9112:
        -: 9113:static jerry_value_t
    #####: 9114:method_getter (const jerry_call_info_t *call_info_p,
        -: 9115:               const jerry_value_t args[],
        -: 9116:               const jerry_length_t argc)
        -: 9117:{
    #####: 9118:  counter++;
    #####: 9119:  printf("Getter called, returning: %d\n", counter);
        -: 9120:
    #####: 9121:  return jerry_number (counter);
        -: 9122:}
        -: 9123:
        -: 9124:static jerry_value_t
    #####: 9125:method_setter (const jerry_call_info_t *call_info_p,
        -: 9126:               const jerry_value_t args[],
        -: 9127:               const jerry_length_t argc)
        -: 9128:{
        -: 9129:  // Note: the arguments count and type should be checked
        -: 9130:  // in this example it is omitted!
        -: 9131:
    #####: 9132:  double new_value = jerry_value_as_number (args[0]);
    #####: 9133:  counter = (int) new_value;
        -: 9134:
    #####: 9135:  printf("Setter called, setting: %d\n", counter);
        -: 9136:
    #####: 9137:  return jerry_undefined ();
        -: 9138:}
        -: 9139:
        -: 9140:int
    #####: 9141:main (void)
        -: 9142:{
    #####: 9143:  jerry_init (JERRY_INIT_EMPTY);
        -: 9144:
    #####: 9145:  jerry_value_t global_obj_val = jerry_current_realm ();
        -: 9146:
        -: 9147:  // configure the property
    #####: 9148:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor ();
        -: 9149:
        -: 9150:  // set the property descriptor fields:
        -: 9151:
    #####: 9152:  prop_desc.flags |= JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED;
    #####: 9153:  prop_desc.getter = jerry_function_external (method_getter);
    #####: 9154:  prop_desc.setter = jerry_function_external (method_setter);
        -: 9155:
        -: 9156:  // add the property as "my_prop" for the global object
    #####: 9157:  jerry_value_t prop_name = jerry_string_sz ("my_prop");
    #####: 9158:  jerry_value_t return_value = jerry_object_define_own_prop (global_obj_val, prop_name, &prop_desc);
    #####: 9159:  if (jerry_value_is_exception (return_value))
        -: 9160:  {
        -: 9161:    // there was an error
        -: 9162:  }
        -: 9163:
        -: 9164:  // if there was no exception at this point the global object should have a "my_prop" property
        -: 9165:
    #####: 9166:  jerry_value_free (return_value);
    #####: 9167:  jerry_value_free (prop_name);
        -: 9168:
    #####: 9169:  jerry_property_descriptor_free (&prop_desc);
    #####: 9170:  jerry_value_free (global_obj_val);
        -: 9171:
        -: 9172:  // run an example js code to use the getter/setters
        -: 9173:
    #####: 9174:  const char *src_p = "this.my_prop; this.my_prop; this.my_prop = 4; this.my_prop";
    #####: 9175:  jerry_value_t eval_result = jerry_eval ((const jerry_char_t *) src_p, strlen (src_p), JERRY_PARSE_NO_OPTS);
        -: 9176:
        -: 9177:  // "eval_result" is the last result of "this.my_prop" that is "5" currently.
    #####: 9178:  double result_number = jerry_value_as_number (eval_result);
    #####: 9179:  printf("output: %lf\n", result_number);
        -: 9180:
    #####: 9181:  jerry_cleanup ();
        -: 9182:
    #####: 9183:  return result_number != 5.0;
        -: 9184:}
        -: 9185:```
        -: 9186:
        -: 9187:**See also**
        -: 9188:
        -: 9189:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 9190:- [jerry_property_descriptor](#jerry_property_descriptor)
        -: 9191:- [jerry_object_get_own_prop](#jerry_object_get_own_prop)
        -: 9192:- [jerry_property_descriptor_free](#jerry_property_descriptor_free)
        -: 9193:
        -: 9194:
        -: 9195:## jerry_object_get_own_prop
        -: 9196:
        -: 9197:**Summary**
        -: 9198:
        -: 9199:Construct property descriptor from specified property.
        -: 9200:
        -: 9201:**Prototype**
        -: 9202:
        -: 9203:```c
        -: 9204:jerry_value_t
        -: 9205:jerry_object_get_own_prop (const jerry_value_t obj_val,
        -: 9206:                           const jerry_value_t prop_name_val,
        -: 9207:                           jerry_property_descriptor_t *prop_desc_p);
        -: 9208:```
        -: 9209:
        -: 9210:- `obj_val` - object value
        -: 9211:- `prop_name_val` - property name
        -: 9212:- `prop_desc_p` - pointer to property descriptor
        -: 9213:- return value
        -: 9214:
        -: 9215:*Changed in version [[NEXT_RELEASE]]*: Return value type is changed to `jerry_value_t`.
        -: 9216:
        -: 9217:**Example**
        -: 9218:
        -: 9219:```c
        -: 9220:{
        -: 9221:  jerry_value_t global_obj_val = jerry_current_realm ();
        -: 9222:
        -: 9223:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor ();
        -: 9224:
        -: 9225:  jerry_value_t prop_name = jerry_string_sz ("my_prop");
        -: 9226:  jerry_object_get_own_prop (global_obj_val, prop_name, &prop_desc);
        -: 9227:  jerry_value_free (prop_name);
        -: 9228:
        -: 9229:  ... // usage of property descriptor
        -: 9230:
        -: 9231:  jerry_property_descriptor_free (&prop_desc);
        -: 9232:  jerry_value_free (global_obj_val);
        -: 9233:}
        -: 9234:```
        -: 9235:
        -: 9236:**See also**
        -: 9237:
        -: 9238:- [jerry_property_descriptor_t](#jerry_property_descriptor_t)
        -: 9239:- [jerry_property_descriptor](#jerry_property_descriptor)
        -: 9240:- [jerry_object_define_own_prop](#jerry_object_define_own_prop)
        -: 9241:- [jerry_property_descriptor_free](#jerry_property_descriptor_free)
        -: 9242:
        -: 9243:
        -: 9244:## jerry_property_descriptor_free
        -: 9245:
        -: 9246:**Summary**
        -: 9247:
        -: 9248:Free fields of property descriptor (setter, getter and value).
        -: 9249:
        -: 9250:**Prototype**
        -: 9251:
        -: 9252:```c
        -: 9253:void
        -: 9254:jerry_property_descriptor_free (const jerry_property_descriptor_t *prop_desc_p);
        -: 9255:```
        -: 9256:
        -: 9257:- `prop_desc_p` - pointer to property descriptor
        -: 9258:
        -: 9259:*New in version [[NEXT_RELEASE]]*: Replaces `jerry_free_property_descriptor_fields`.
        -: 9260:
        -: 9261:**Example**
        -: 9262:
        -: 9263:```c
        -: 9264:{
        -: 9265:  jerry_property_descriptor_t prop_desc = jerry_property_descriptor ();
        -: 9266:
        -: 9267:  ... // usage of property descriptor
        -: 9268:
        -: 9269:  jerry_property_descriptor_free (&prop_desc);
        -: 9270:}
        -: 9271:```
        -: 9272:
        -: 9273:**See also**
        -: 9274:
        -: 9275:- [jerry_property_descriptor](#jerry_property_descriptor)
        -: 9276:- [jerry_object_define_own_prop](#jerry_object_define_own_prop)
        -: 9277:- [jerry_object_get_own_prop](#jerry_object_get_own_prop)
        -: 9278:
        -: 9279:
        -: 9280:## jerry_call
        -: 9281:
        -: 9282:**Summary**
        -: 9283:
        -: 9284:Call function specified by a function value. The argument values must not be exceptions.
        -: 9285:Value of `this` parameter should be set to `undefined` for non-method calls.
        -: 9286:
        -: 9287:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 9288:is no longer needed.
        -: 9289:
        -: 9290:**Prototype**
        -: 9291:
        -: 9292:```c
        -: 9293:jerry_value_t
        -: 9294:jerry_call (const jerry_value_t func_obj_val,
        -: 9295:            const jerry_value_t this_val,
        -: 9296:            const jerry_value_t args_p[],
        -: 9297:            jerry_size_t args_count);
        -: 9298:```
        -: 9299:
        -: 9300:- `func_obj_val` - the function object to call
        -: 9301:- `this_val` - object for 'this' binding
        -: 9302:- `args_p` - function's call arguments
        -: 9303:- `args_count` - number of arguments
        -: 9304:- return value - returned jerry value of the called function
        -: 9305:
        -: 9306:**Example**
        -: 9307:
        -: 9308:```c
        -: 9309:{
        -: 9310:  jerry_value_t target_function;
        -: 9311:
        -: 9312:  ... // create or get "target_function"
        -: 9313:
        -: 9314:  if (jerry_value_is_function (target_function))
        -: 9315:  {
        -: 9316:    jerry_value_t this_val = jerry_undefined ();
        -: 9317:    jerry_value_t ret_val = jerry_call (target_function, this_val, NULL, 0);
        -: 9318:
        -: 9319:    if (!jerry_value_is_exception (ret_val))
        -: 9320:    {
        -: 9321:      ... // handle return value
        -: 9322:    }
        -: 9323:
        -: 9324:    jerry_value_free (ret_val);
        -: 9325:    jerry_value_free (this_val);
        -: 9326:  }
        -: 9327:
        -: 9328:  jerry_value_free (target_function);
        -: 9329:}
        -: 9330:```
        -: 9331:
        -: 9332:**See also**
        -: 9333:
        -: 9334:- [jerry_is_function](#jerry_is_function)
        -: 9335:- [jerry_function_external](#jerry_function_external)
        -: 9336:
        -: 9337:
        -: 9338:## jerry_construct
        -: 9339:
        -: 9340:**Summary**
        -: 9341:
        -: 9342:Construct object, invoking specified function object as constructor.
        -: 9343:Error flag must not be set for any arguments of this function.
        -: 9344:
        -: 9345:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 9346:is no longer needed.
        -: 9347:
        -: 9348:**Prototype**
        -: 9349:
        -: 9350:```c
        -: 9351:jerry_value_t
        -: 9352:jerry_construct (const jerry_value_t func_obj_val,
        -: 9353:                 const jerry_value_t args_p[],
        -: 9354:                 jerry_size_t args_count);
        -: 9355:```
        -: 9356:
        -: 9357:- `func_obj_val` - function object to call
        -: 9358:- `args_p` - function's call arguments
        -: 9359:- `args_count` - number of arguments
        -: 9360:- return value - returned value of the invoked constructor
        -: 9361:
        -: 9362:**Example**
        -: 9363:
        -: 9364:```c
        -: 9365:{
        -: 9366:  jerry_value_t val;
        -: 9367:
        -: 9368:  ... // receiving val
        -: 9369:
        -: 9370:  if (jerry_is_constructor (val))
        -: 9371:  {
        -: 9372:    jerry_value_t ret_val = jerry_construct (val, NULL, 0);
        -: 9373:
        -: 9374:    if (!jerry_value_is_exception (ret_val))
        -: 9375:    {
        -: 9376:      ... // handle return value
        -: 9377:    }
        -: 9378:
        -: 9379:    jerry_value_free (ret_val);
        -: 9380:  }
        -: 9381:}
        -: 9382:```
        -: 9383:
        -: 9384:**See also**
        -: 9385:
        -: 9386: - [jerry_is_constructor](#jerry_is_constructor)
        -: 9387:
        -: 9388:
        -: 9389:## jerry_object_keys
        -: 9390:
        -: 9391:**Summary**
        -: 9392:
        -: 9393:Get keys of the specified object value.
        -: 9394:
        -: 9395:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 9396:is no longer needed.
        -: 9397:
        -: 9398:**Prototype**
        -: 9399:
        -: 9400:```c
        -: 9401:jerry_value_t
        -: 9402:jerry_object_keys (const jerry_value_t obj_val);
        -: 9403:```
        -: 9404:
        -: 9405:- `obj_val` - object value
        -: 9406:- return value
        -: 9407:  - array object value, if success
        -: 9408:  - thrown exception, otherwise
        -: 9409:
        -: 9410:**Example**
        -: 9411:
        -: 9412:```c
        -: 9413:{
        -: 9414:  jerry_value_t object;
        -: 9415:  ... // create or copy object
        -: 9416:
        -: 9417:  jerry_value_t keys_array = jerry_object_keys (object);
        -: 9418:
        -: 9419:  ... // usage of keys_array
        -: 9420:
        -: 9421:  jerry_value_free (keys_array);
        -: 9422:}
        -: 9423:```
        -: 9424:
        -: 9425:**See also**
        -: 9426:
        -: 9427:- [jerry_object_get](#jerry_object_get)
        -: 9428:- [jerry_object_set](#jerry_object_set)
        -: 9429:
        -: 9430:
        -: 9431:## jerry_object_proto
        -: 9432:
        -: 9433:**Summary**
        -: 9434:
        -: 9435:Get the prototype of the specified object.
        -: 9436:
        -: 9437:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 9438:is no longer needed.
        -: 9439:
        -: 9440:**Prototype**
        -: 9441:
        -: 9442:```c
        -: 9443:jerry_value_t
        -: 9444:jerry_object_proto (const jerry_value_t obj_val);
        -: 9445:```
        -: 9446:
        -: 9447:- `obj_val` - object value
        -: 9448:- return value
        -: 9449:  - object value, if success
        -: 9450:  - null or thrown exception, otherwise
        -: 9451:
        -: 9452:**Example**
        -: 9453:
        -: 9454:```c
        -: 9455:{
        -: 9456:  jerry_value_t object;
        -: 9457:  ... // create or copy object
        -: 9458:
        -: 9459:  jerry_value_t prototype = jerry_object_proto (object);
        -: 9460:
        -: 9461:  ... // usage of prototype object
        -: 9462:
        -: 9463:  jerry_value_free (prototype);
        -: 9464:  jerry_value_free (object);
        -: 9465:}
        -: 9466:```
        -: 9467:
        -: 9468:**See also**
        -: 9469:
        -: 9470:- [jerry_object_set_proto](#jerry_object_set_proto)
        -: 9471:
        -: 9472:
        -: 9473:## jerry_object_set_proto
        -: 9474:
        -: 9475:**Summary**
        -: 9476:
        -: 9477:Set the prototype of the specified object.
        -: 9478:
        -: 9479:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -: 9480:is no longer needed.
        -: 9481:
        -: 9482:**Prototype**
        -: 9483:
        -: 9484:```c
        -: 9485:jerry_value_t
        -: 9486:jerry_object_set_proto (const jerry_value_t obj_val,
        -: 9487:                        const jerry_value_t proto_obj_val);
        -: 9488:```
        -: 9489:
        -: 9490:- `obj_val` - object value
        -: 9491:- `proto_obj_val` - prototype object value
        -: 9492:- return value
        -: 9493:  - true, if success
        -: 9494:  - thrown exception, otherwise
        -: 9495:
        -: 9496:**Example**
        -: 9497:
        -: 9498:```c
        -: 9499:{
        -: 9500:  jerry_value_t object;
        -: 9501:  jerry_value_t prototype;
        -: 9502:
        -: 9503:  ... // create or copy object and prototype
        -: 9504:
        -: 9505:  jerry_value_t ret_val = jerry_object_set_proto (object, prototype);
        -: 9506:
        -: 9507:  jerry_value_free (ret_val);
        -: 9508:  jerry_value_free (prototype);
        -: 9509:  jerry_value_free (object);
        -: 9510:}
        -: 9511:```
        -: 9512:
        -: 9513:**See also**
        -: 9514:
        -: 9515:- [jerry_object_proto](#jerry_object_proto)
        -: 9516:
        -: 9517:
        -: 9518:## jerry_object_get_native_ptr
        -: 9519:
        -: 9520:**Summary**
        -: 9521:
        -: 9522:Get native pointer by the given type information.
        -: 9523:The pointer and the type information are previously associated with the object by
        -: 9524:[jerry_object_set_native_ptr](#jerry_object_set_native_ptr).
        -: 9525:
        -: 9526:*Note*: `native_info_p` can be NULL
        -: 9527:
        -: 9528:**Prototype**
        -: 9529:
        -: 9530:```c
        -: 9531:void *
        -: 9532:jerry_object_get_native_ptr (const jerry_value_t object,
        -: 9533:                             const jerry_object_native_info_t *native_info_p)
        -: 9534:```
        -: 9535:
        -: 9536:- `object` - object value to get native pointer from.
        -: 9537:- `native_info_p` - native pointer's type information.
        -: 9538:- return value
        -: 9539:  - native pointer associated with the argument object for the given native type info
        -: 9540:
        -: 9541:*New in version 2.0*: Changed from `jerry_get_object_native_handle`.
        -: 9542:
        -: 9543:**Example**
        -: 9544:
        -: 9545:[doctest]: # ()
        -: 9546:
        -: 9547:```c
        -: 9548:#include <stdio.h>
        -: 9549:#include <stdlib.h>
        -: 9550:#include <string.h>
        -: 9551:#include "jerryscript.h"
        -: 9552:
        -: 9553:typedef struct
        -: 9554:{
        -: 9555:  char *data_p;
        -: 9556:  unsigned int length;
        -: 9557:} buffer_native_object_t;
        -: 9558:
        -: 9559:typedef struct
        -: 9560:{
        -: 9561:  int area;
        -: 9562:  int perimeter;
        -: 9563:} shape_native_object_t;
        -: 9564:
        -: 9565:#define SECRET_INFO ((void *) 42)
        -: 9566:
        -: 9567:static void
    #####: 9568:buffer_native_freecb (void *native_p,
        -: 9569:                      jerry_object_native_info_t *info_p)
        -: 9570:{
        -: 9571:  (void) info_p;
        -: 9572:
    #####: 9573:  char *data_p = ((buffer_native_object_t*)native_p)->data_p;
        -: 9574:
    #####: 9575:  if (data_p != NULL)
        -: 9576:  {
    #####: 9577:    free (data_p);
        -: 9578:  }
        -: 9579:
    #####: 9580:  free (native_p);
    #####: 9581:}
        -: 9582:
        -: 9583:static void
    #####: 9584:shape_native_freecb (void *native_p,
        -: 9585:                     jerry_object_native_info_t *info_p)
        -: 9586:{
        -: 9587:  (void) info_p;
        -: 9588:
    #####: 9589:  free (native_p);
    #####: 9590:}
        -: 9591:
        -: 9592:static void
    #####: 9593:destructor_freecb (void *native_p,
        -: 9594:                   jerry_object_native_info_t *info_p)
        -: 9595:{
        -: 9596:  (void) native_p;
        -: 9597:  (void) info_p;
        -: 9598:
    #####: 9599:   printf("Note: the object has been freed\n");
    #####: 9600:}
        -: 9601:
        -: 9602:// NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -: 9603:// C type `buffer_native_object_t *`.
        -: 9604:static const jerry_object_native_info_t buffer_obj_type_info =
        -: 9605:{
        -: 9606:  .free_cb = buffer_native_freecb
        -: 9607:};
        -: 9608:
        -: 9609:// NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -: 9610:// C type `shape_native_object_t *`.
        -: 9611:static const jerry_object_native_info_t shape_obj_type_info =
        -: 9612:{
        -: 9613:  .free_cb = shape_native_freecb
        -: 9614:};
        -: 9615:
        -: 9616:// NOTE: The address (!) of type_info is the unique "identifier"
        -: 9617:static const jerry_object_native_info_t destructor_obj_type_info =
        -: 9618:{
        -: 9619:  .free_cb = destructor_freecb
        -: 9620:};
        -: 9621:
        -: 9622:static void
    #####: 9623:print_buffer (char *data_p,
        -: 9624:              unsigned int length)
        -: 9625:{
    #####: 9626:  for (unsigned int i = 0; i < length; ++i)
        -: 9627:  {
    #####: 9628:    printf("%c", data_p[i]);
        -: 9629:  }
        -: 9630:
    #####: 9631:  printf("\n");
    #####: 9632:}
        -: 9633:
        -: 9634:static void
    #####: 9635:do_stuff (jerry_value_t object)
        -: 9636:{
    #####: 9637:  void *native_p = jerry_object_get_native_ptr (object, &buffer_obj_type_info);
        -: 9638:
    #####: 9639:  if (native_p == NULL)
        -: 9640:  {
        -: 9641:    // Process the error
        -: 9642:    return;
        -: 9643:  }
        -: 9644:
        -: 9645:  // It is safe to cast to buffer_native_object_t * and dereference the pointer:
    #####: 9646:  buffer_native_object_t *buffer_p = (buffer_native_object_t *) native_p;
    #####: 9647:  print_buffer (buffer_p->data_p, buffer_p->length); // Usage of buffer_p
        -: 9648:
    #####: 9649:  bool need_shape_info = true; // implementation dependent
        -: 9650:
        -: 9651:  if (need_shape_info)
        -: 9652:  {
    #####: 9653:    native_p = jerry_object_get_native_ptr (object, &shape_obj_type_info);
        -: 9654:
    #####: 9655:    if (native_p == NULL)
        -: 9656:    {
        -: 9657:      // Process the error
        -: 9658:      return;
        -: 9659:    }
        -: 9660:
        -: 9661:    // It is safe to cast to shape_native_object_t * and dereference the pointer:
    #####: 9662:    shape_native_object_t *shape_p = (shape_native_object_t *) native_p;
        -: 9663:
    #####: 9664:    printf("Area: %d\tPerimeter: %d\n", shape_p->area, shape_p->perimeter); // Usage of shape_p
        -: 9665:  }
        -: 9666:
    #####: 9667:  bool need_secret_info = true; // implementation dependent
        -: 9668:
        -: 9669:  if (need_secret_info)
        -: 9670:  {
    #####: 9671:    native_p = jerry_object_get_native_ptr (object, NULL);
        -: 9672:
    #####: 9673:    if (native_p == NULL)
        -: 9674:    {
        -: 9675:      // Process the error
        -: 9676:      return;
        -: 9677:    }
        -: 9678:
    #####: 9679:    printf("Secret: %d\n", (int)((uintptr_t) native_p)); // Usage of native_p
        -: 9680:
    #####: 9681:    bool deleted = jerry_object_delete_native_ptr (object, NULL);
        -: 9682:
    #####: 9683:    if (deleted)
        -: 9684:    {
        -: 9685:      printf("The secret is no longer available\n");
        -: 9686:    }
        -: 9687:  }
        -: 9688:}
        -: 9689:
        -: 9690:int
    #####: 9691:main (void)
        -: 9692:{
    #####: 9693:  jerry_init (JERRY_INIT_EMPTY);
        -: 9694:
    #####: 9695:  jerry_value_t object = jerry_object ();
    #####: 9696:  buffer_native_object_t *buffer_p = (buffer_native_object_t *) malloc (sizeof (buffer_native_object_t));
    #####: 9697:  buffer_p->length = 14;
    #####: 9698:  buffer_p->data_p = (char *) malloc (buffer_p->length * sizeof (char));
    #####: 9699:  memcpy (buffer_p->data_p, "My buffer data", buffer_p->length);
    #####: 9700:  jerry_object_set_native_ptr (object, &buffer_obj_type_info, buffer_p);
        -: 9701:
    #####: 9702:  shape_native_object_t *shape_p = (shape_native_object_t *) malloc (sizeof (shape_native_object_t));
    #####: 9703:  shape_p->area = 6;
    #####: 9704:  shape_p->perimeter = 12;
    #####: 9705:  jerry_object_set_native_ptr (object, &shape_obj_type_info, shape_p);
        -: 9706:
        -: 9707:  // The native pointer can be NULL. This gives possibly to get notified via the native type info's
        -: 9708:  // free callback when the object has been freed by the GC.
    #####: 9709:  jerry_object_set_native_ptr (object, &destructor_obj_type_info, NULL);
        -: 9710:
        -: 9711:  // The native type info can be NULL as well. In this case the registered property is simply freed
        -: 9712:  // when the object is freed by the GC.
    #####: 9713:  jerry_object_set_native_ptr (object, NULL, SECRET_INFO);
        -: 9714:
    #####: 9715:  do_stuff (object);
        -: 9716:
    #####: 9717:  jerry_value_free (object);
    #####: 9718:  jerry_cleanup ();
        -: 9719:
        -: 9720:  return 0;
        -: 9721:}
        -: 9722:```
        -: 9723:
        -: 9724:**See also**
        -: 9725:
        -: 9726:- [jerry_object](#jerry_object)
        -: 9727:- [jerry_object_set_native_ptr](#jerry_object_set_native_ptr)
        -: 9728:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 9729:
        -: 9730:
        -: 9731:## jerry_object_set_native_ptr
        -: 9732:
        -: 9733:**Summary**
        -: 9734:
        -: 9735:Set native pointer and an optional type information for the specified object.
        -: 9736:You can get them by calling [jerry_object_get_native_ptr](#jerry_object_get_native_ptr) later.
        -: 9737:
        -: 9738:*Notes*:
        -: 9739: - If a native pointer was already set for the object with the same type information, its value is updated.
        -: 9740: - If a non-NULL free callback is specified in the native type information,
        -: 9741:   it will be called by the garbage collector when the object is freed.
        -: 9742: - If the object is only referenced via the "global" object (or one of it's "child"),
        -: 9743:   the free callback will be invoked during the execution of `jerry_cleanup`.
        -: 9744: - The free callback can invoke API functions.
        -: 9745:
        -: 9746:*Note*: If possible do not store API values in native pointers, rather check
        -: 9747:        [jerry_object_set_internal](#jerry_object_set_internal).
        -: 9748:
        -: 9749:**Prototype**
        -: 9750:
        -: 9751:```c
        -: 9752:void
        -: 9753:jerry_object_set_native_ptr (const jerry_value_t obj_val,
        -: 9754:                             const jerry_object_native_info_t *info_p,
        -: 9755:                             void *native_p);
        -: 9756:```
        -: 9757:
        -: 9758:- `obj_val` - object to set native pointer in.
        -: 9759:- `info_p` - native pointer's type information or NULL. When used, this should
        -: 9760:             be a long-lived pointer, usually a pointer to a
        -: 9761:             `static const jerry_object_native_info_t` makes most sense.
        -: 9762:- `native_p` - native pointer.
        -: 9763:
        -: 9764:*New in version 2.0*: Changed from `jerry_set_object_native_handle`.
        -: 9765:
        -: 9766:**Example**
        -: 9767:
        -: 9768:See [jerry_object_get_native_ptr](#jerry_object_get_native_ptr) for a
        -: 9769:best-practice example.
        -: 9770:
        -: 9771:**See also**
        -: 9772:
        -: 9773:- [jerry_object](#jerry_object)
        -: 9774:- [jerry_object_get_native_ptr](#jerry_object_get_native_ptr)
        -: 9775:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 9776:
        -: 9777:## jerry_object_delete_native_ptr
        -: 9778:
        -: 9779:**Summary**
        -: 9780:
        -: 9781:Delete the native pointer of the specified object associated with the given native type info.
        -: 9782:
        -: 9783:*Notes*:
        -: 9784: - If the specified object has no matching native pointer for the given native type info the operation has no effect.
        -: 9785: - The method does not invoke the free callback specified in the type info.
        -: 9786:   If the native pointer should be freed then one must get the native pointer first and invoke the free callback manually
        -: 9787:   before calling this method.
        -: 9788: - This operation cannot throw an exception.
        -: 9789:
        -: 9790:**Prototype**
        -: 9791:
        -: 9792:```c
        -: 9793:bool
        -: 9794:jerry_object_delete_native_ptr (const jerry_value_t obj_val,
        -: 9795:                                const jerry_object_native_info_t *info_p)
        -: 9796:```
        -: 9797:
        -: 9798:- `obj_val` - object to delete native pointer from.
        -: 9799:- `info_p` - native pointer's type information.
        -: 9800:
        -: 9801:*New in version 2.0*.
        -: 9802:
        -: 9803:**Example**
        -: 9804:
        -: 9805:See [jerry_object_get_native_ptr](#jerry_object_get_native_ptr) for a
        -: 9806:best-practice example.
        -: 9807:
        -: 9808:**See also**
        -: 9809:
        -: 9810:- [jerry_object](#jerry_object)
        -: 9811:- [jerry_object_get_native_ptr](#jerry_object_get_native_ptr)
        -: 9812:- [jerry_object_get_native_ptr](#jerry_object_set_native_ptr)
        -: 9813:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 9814:
        -: 9815:
        -: 9816:## jerry_native_ptr_init
        -: 9817:
        -: 9818:**Summary**
        -: 9819:
        -: 9820:Initialize the references stored in a buffer pointed by a native pointer.
        -: 9821:The references are initialized to undefined. This function must be called
        -: 9822:before the buffer is attached to an object by
        -: 9823:[jerry_object_set_native_ptr](#jerry_object_set_native_ptr).
        -: 9824:
        -: 9825:*Note*:
        -: 9826:  - The description of [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 9827:    provides detailed information about these references.
        -: 9828:
        -: 9829:**Prototype**
        -: 9830:
        -: 9831:```c
        -: 9832:void
        -: 9833:jerry_native_ptr_init (void *native_pointer_p,
        -: 9834:                       const jerry_object_native_info_t *native_info_p);
        -: 9835:```
        -: 9836:
        -: 9837:- `native_pointer_p` - a valid non-NULL pointer to a native buffer.
        -: 9838:- `native_info_p` - native pointer's type information.
        -: 9839:
        -: 9840:*New in version [[NEXT_RELEASE]]*.
        -: 9841:
        -: 9842:**Example**
        -: 9843:
        -: 9844:[doctest]: # ()
        -: 9845:
        -: 9846:```c
        -: 9847:#include <stdlib.h>
        -: 9848:#include "jerryscript.h"
        -: 9849:
        -: 9850:typedef struct
        -: 9851:{
        -: 9852:  uint32_t user_data;
        -: 9853:  jerry_value_t a;
        -: 9854:  jerry_value_t b;
        -: 9855:  uint32_t user_other_data;
        -: 9856:} user_buffer_t;
        -: 9857:
        -: 9858:static void
    #####: 9859:native_references_free_callback (void *native_p, /**< native pointer */
        -: 9860:                                 jerry_object_native_info_t *info_p) /**< native info */
        -: 9861:{
        -: 9862:  /* References must be finalized when a buffer is no longer attached. */
    #####: 9863:  jerry_native_ptr_free (native_p, info_p);
    #####: 9864:  free (native_p);
    #####: 9865:} /* native_references_free_callback */
        -: 9866:
        -: 9867:static const jerry_object_native_info_t native_info =
        -: 9868:{
        -: 9869:  .free_cb = native_references_free_callback,
        -: 9870:  .number_of_references = 2,
        -: 9871:  .offset_of_references = offsetof(user_buffer_t, a),
        -: 9872:};
        -: 9873:
        -: 9874:int
    #####: 9875:main (void)
        -: 9876:{
    #####: 9877:  jerry_init (JERRY_INIT_EMPTY);
        -: 9878:
    #####: 9879:  jerry_value_t object_value = jerry_object ();
        -: 9880:
    #####: 9881:  user_buffer_t *buffer_p = (user_buffer_t *) malloc (sizeof (user_buffer_t));
        -: 9882:
        -: 9883:  /* References must be initialized before a buffer is attached. */
    #####: 9884:  jerry_native_ptr_init ((void *) buffer_p, &native_info);
        -: 9885:
    #####: 9886:  jerry_object_set_native_ptr (object_value, &native_info, (void *) buffer_p);
        -: 9887:
        -: 9888:  /* References can be modified after the buffer is attached.
        -: 9889:   * This example sets a self reference. */
    #####: 9890:  jerry_native_ptr_set (&buffer_p->a, object_value);
        -: 9891:
    #####: 9892:  jerry_value_free (object_value);
        -: 9893:
    #####: 9894:  jerry_cleanup ();
        -: 9895:  return 0;
        -: 9896:}
        -: 9897:```
        -: 9898:
        -: 9899:**See also**
        -: 9900:
        -: 9901:- [jerry_object_set_native_ptr](#jerry_object_set_native_ptr)
        -: 9902:- [jerry_native_ptr_free](#jerry_native_ptr_free)
        -: 9903:- [jerry_native_ptr_set](#jerry_native_ptr_set)
        -: 9904:
        -: 9905:## jerry_native_ptr_free
        -: 9906:
        -: 9907:**Summary**
        -: 9908:
        -: 9909:Release the value references stored in a buffer pointed by a native pointer.
        -: 9910:This function must be called after a buffer is no longer attached to any
        -: 9911:object, even if the buffer is attached to another object again. This
        -: 9912:function also initializes the values to undefined, so calling
        -: 9913:[jerry_native_ptr_init](#jerry_native_ptr_init)
        -: 9914:is optional before the buffer is attached again.
        -: 9915:
        -: 9916:*Note*:
        -: 9917:  - The description of [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 9918:    provides detailed information about these references.
        -: 9919:
        -: 9920:**Prototype**
        -: 9921:
        -: 9922:```c
        -: 9923:void
        -: 9924:jerry_native_ptr_free (void *native_pointer_p,
        -: 9925:                       const jerry_object_native_info_t *native_info_p);
        -: 9926:```
        -: 9927:
        -: 9928:- `native_pointer_p` - a valid non-NULL pointer to a native buffer.
        -: 9929:- `native_info_p` - native pointer's type information.
        -: 9930:
        -: 9931:*New in version [[NEXT_RELEASE]]*.
        -: 9932:
        -: 9933:**Example**
        -: 9934:
        -: 9935:See the example of [jerry_native_ptr_init](#jerry_native_ptr_init).
        -: 9936:
        -: 9937:**See also**
        -: 9938:
        -: 9939:- [jerry_object_set_native_ptr](#jerry_object_set_native_ptr)
        -: 9940:- [jerry_native_ptr_init](#jerry_native_ptr_init)
        -: 9941:- [jerry_native_ptr_set](#jerry_native_ptr_set)
        -: 9942:
        -: 9943:
        -: 9944:## jerry_native_ptr_set
        -: 9945:
        -: 9946:**Summary**
        -: 9947:
        -: 9948:Updates a value reference inside the area specified by the `number_of_references` and
        -: 9949:`offset_of_references` fields in its corresponding
        -: 9950:[jerry_object_native_info_t](#jerry_object_native_info_t) data. The area must be
        -: 9951:part of a buffer which is currently assigned to an object.
        -: 9952:
        -: 9953:*Note*:
        -: 9954:  - The description of [jerry_object_native_info_t](#jerry_object_native_info_t)
        -: 9955:    provides detailed information about these references.
        -: 9956:
        -: 9957:**Prototype**
        -: 9958:
        -: 9959:```c
        -: 9960:void
        -: 9961:jerry_native_ptr_set (jerry_value_t *reference_p,
        -: 9962:                      jerry_value_t value)
        -: 9963:```
        -: 9964:
        -: 9965:- `reference_p` - a valid non-NULL pointer to a reference in a native buffer.
        -: 9966:- `value` - new value of the reference.
        -: 9967:
        -: 9968:*New in version [[NEXT_RELEASE]]*.
        -: 9969:
        -: 9970:**Example**
        -: 9971:
        -: 9972:See the example of [jerry_native_ptr_init](#jerry_native_ptr_init).
        -: 9973:
        -: 9974:**See also**
        -: 9975:
        -: 9976:- [jerry_object_set_native_ptr](#jerry_object_set_native_ptr)
        -: 9977:- [jerry_native_ptr_init](#jerry_native_ptr_init)
        -: 9978:- [jerry_native_ptr_free](#jerry_native_ptr_free)
        -: 9979:
        -: 9980:
        -: 9981:## jerry_object_property_names
        -: 9982:
        -: 9983:**Summary**
        -: 9984:
        -: 9985:Gets the property keys for the given object using the selected filters.
        -: 9986:
        -: 9987:**Prototype**
        -: 9988:
        -: 9989:```c
        -: 9990:jerry_value_t
        -: 9991:jerry_object_property_names (jerry_value_t obj_val,
        -: 9992:                             jerry_property_filter_t filter);
        -: 9993:```
        -: 9994:
        -: 9995:- `obj_val` - object value
        -: 9996:- `filter` - any combination of [jerry_property_filter_t](#jerry_property_filter_t) options
        -: 9997:- return value
        -: 9998:  - array containing the filtered property keys in successful operation
        -: 9999:  - exception, otherwise
        -:10000:
        -:10001:*New in version 2.4*.
        -:10002:
        -:10003:**Example**
        -:10004:
        -:10005:```c
        -:10006:{
        -:10007:  jerry_value_t global_object = jerry_current_realm ();
        -:10008:  jerry_value_t keys = jerry_object_property_names (object, JERRY_PROPERTY_FILTER_ALL);
        -:10009:
        -:10010:  ... // usage of keys
        -:10011:
        -:10012:  jerry_value_free (keys);
        -:10013:  jerry_value_free (global_object);
        -:10014:}
        -:10015:```
        -:10016:
        -:10017:**See also**
        -:10018:
        -:10019:- [jerry_property_filter_t](#jerry_property_filter_t)
        -:10020:
        -:10021:## jerry_object_foreach
        -:10022:
        -:10023:**Summary**
        -:10024:
        -:10025:Applies the given function to every enumerable(!) property in the given object.
        -:10026:
        -:10027:The "iterator" `foreach_p` method should return `true` value to continue the iteration.
        -:10028:If the method returns `false` the iteration will end.
        -:10029:
        -:10030:**Prototype**
        -:10031:
        -:10032:```c
        -:10033:bool
        -:10034:jerry_object_foreach (jerry_value_t obj_val,
        -:10035:                      jerry_object_property_foreach_cb_t foreach_p,
        -:10036:                      void *user_data_p);
        -:10037:```
        -:10038:
        -:10039:- `obj_val` - object value
        -:10040:- `foreach_p` - foreach function, that will be applied for each property
        -:10041:- `user_data_p` - user data for foreach function
        -:10042:- return value
        -:10043:  - true, if object fields traversal was performed successfully, i.e.:
        -:10044:    - no unhandled exceptions were thrown in object fields traversal
        -:10045:    - object fields traversal was stopped on callback that returned false
        -:10046:  - false, otherwise
        -:10047:
        -:10048:**Example**
        -:10049:
        -:10050:
        -:10051:[doctest]: # (name="02.API-REFERENCE-foreach-property.c")
        -:10052:
        -:10053:```c
        -:10054:#include <stdio.h>
        -:10055:#include "jerryscript.h"
        -:10056:
        -:10057:/* Example structure used as user data for the property iteration. */
        -:10058:struct iteration_data {
        -:10059:  int string_property_count;
        -:10060:};
        -:10061:
        -:10062:/*
        -:10063: * Example foreach function to print out property names.
        -:10064: */
        -:10065:static bool
    #####:10066:foreach_function (const jerry_value_t prop_name,
        -:10067:                  const jerry_value_t prop_value,
        -:10068:                  void *user_data_p)
        -:10069:{
    #####:10070:  if (jerry_value_is_string (prop_name)) {
        -:10071:    jerry_char_t string_buffer[128];
    #####:10072:    jerry_size_t copied_bytes = jerry_string_to_buffer (prop_name,
        -:10073:                                                        JERRY_ENCODING_UTF8,
        -:10074:                                                        string_buffer,
        -:10075:                                                        sizeof (string_buffer) - 1);
    #####:10076:    string_buffer[copied_bytes] = '\0';
        -:10077:
    #####:10078:    printf ("Property: %s\n", string_buffer);
        -:10079:
    #####:10080:    struct iteration_data *data = (struct iteration_data *) user_data_p;
    #####:10081:    data->string_property_count++;
        -:10082:  }
        -:10083:
        -:10084:  /* return true to continue iteration */
    #####:10085:  return true;
        -:10086:}
        -:10087:
        -:10088:int
    #####:10089:main (void)
        -:10090:{
    #####:10091:  jerry_init (JERRY_INIT_EMPTY);
        -:10092:
        -:10093:  /* Construct an example object with a single property. */
    #####:10094:  jerry_value_t object = jerry_object ();
        -:10095:  {
    #####:10096:    jerry_value_t test_property = jerry_string_sz ("DemoProp");
    #####:10097:    jerry_value_t test_value = jerry_number (3);
        -:10098:    /* By default all properties added to an object are enumerable. */
    #####:10099:    jerry_value_t set_result = jerry_object_set (object, test_property, test_value);
        -:10100:    /* The `set_result` should be checked if it is an exception or not. */
    #####:10101:    jerry_value_free (set_result);
    #####:10102:    jerry_value_free (test_value);
    #####:10103:    jerry_value_free (test_property);
        -:10104:  }
        -:10105:
        -:10106:  /* Iterate on the object's properties with the given user data. */
    #####:10107:  struct iteration_data user_data = { 0 };
        -:10108:
    #####:10109:  bool iteration_result = jerry_object_foreach (object, foreach_function, &user_data);
        -:10110:  /* Check and process the `iteration_result` if required. */
        -:10111:
    #####:10112:  jerry_value_free (object);
        -:10113:
    #####:10114:  jerry_cleanup ();
        -:10115:
    #####:10116:  return user_data.string_property_count == 0;
        -:10117:}
        -:10118:```
        -:10119:
        -:10120:**See also**
        -:10121:
        -:10122:- [jerry_object_property_foreach_cb_t](#jerry_object_property_foreach_cb_t)
        -:10123:
        -:10124:## jerry_foreach_live_object
        -:10125:
        -:10126:**Summary**
        -:10127:
        -:10128:Iterate over all objects available in the engine.
        -:10129:
        -:10130:The "iterator" `foreach_p` method should return `true` value to continue the search.
        -:10131:If the method returns `false` the search for the object is finished.
        -:10132:
        -:10133:*Note*: Values obtained in `foreach_p` must be retained using [jerry_value_copy](#jerry_value_copy).
        -:10134:
        -:10135:**Prototype**
        -:10136:
        -:10137:```c
        -:10138:bool
        -:10139:jerry_foreach_live_object (jerry_foreach_live_object_cb_t foreach_p,
        -:10140:                           void *user_data_p);
        -:10141:```
        -:10142:
        -:10143:- `foreach_p` - function that will be invoked for each object.
        -:10144:- `user_data_p` - User data to pass to the function.
        -:10145:- return value
        -:10146:  - `true`, if the search function terminated the traversal by returning `false`
        -:10147:  - `false`, if the end of the list of objects was reached
        -:10148:
        -:10149:*New in version 2.0*.
        -:10150:
        -:10151:**Example**
        -:10152:
        -:10153:[doctest]: # (name="02.API-REFERENCE-objects-foreach.c")
        -:10154:
        -:10155:```c
        -:10156:#include <stdio.h>
        -:10157:#include "jerryscript.h"
        -:10158:
        -:10159:/* Create a custom structure to guide the search and store the result. */
        -:10160:typedef struct
        -:10161:{
        -:10162:  jerry_value_t property_name;
        -:10163:  jerry_value_t result;
        -:10164:} find_my_object_info_t;
        -:10165:
        -:10166:/*
        -:10167: * Find the first object with the given property.
        -:10168: */
        -:10169:static bool
    #####:10170:find_my_object (const jerry_value_t candidate,
        -:10171:                void *user_data_p)
        -:10172:{
    #####:10173:  find_my_object_info_t *info_p = (find_my_object_info_t *) user_data_p;
        -:10174:
        -:10175:  /* Check if the given object has the required property. */
    #####:10176:  jerry_value_t has_property = jerry_object_has (candidate, info_p->property_name);
    #####:10177:  bool object_found = jerry_value_is_true (has_property);
        -:10178:
    #####:10179:  if (object_found)
        -:10180:  {
        -:10181:    /* We found it, so we copy the value and record it. */
    #####:10182:    info_p->result = jerry_value_copy (candidate);
        -:10183:  }
        -:10184:
    #####:10185:  jerry_value_free (has_property);
        -:10186:
        -:10187:  /* If the object was not found continue the search. */
    #####:10188:  return !object_found;
        -:10189:} /* find_my_object */
        -:10190:
        -:10191:int
    #####:10192:main (void)
        -:10193:{
    #####:10194:  int return_value = 0;
        -:10195:
        -:10196:  /* Initialize JerryScript engine. */
    #####:10197:  jerry_init (JERRY_INIT_EMPTY);
        -:10198:
        -:10199:  /* Create the test object. */
        -:10200:  {
    #####:10201:    jerry_value_t test_object = jerry_object ();
        -:10202:
        -:10203:    {
    #####:10204:      jerry_value_t test_property = jerry_string_sz ("DemoProp");
    #####:10205:      jerry_value_t test_value = jerry_number (3);
    #####:10206:      jerry_value_t set_result = jerry_object_set (test_object, test_property, test_value);
        -:10207:      /* The `set_result` should be checked if it is an exception or not. */
    #####:10208:      jerry_value_free (set_result);
    #####:10209:      jerry_value_free (test_value);
    #####:10210:      jerry_value_free (test_property);
        -:10211:    }
        -:10212:
        -:10213:    {
        -:10214:      /* Register the test object into the global object. */
    #####:10215:      jerry_value_t global_object = jerry_current_realm ();
    #####:10216:      jerry_value_t demo_property = jerry_string_sz ("DemoObject");
    #####:10217:      jerry_value_t set_result = jerry_object_set (global_object, demo_property, test_object);
        -:10218:      /* The `set_result` should be checked if it is an exception or not. */
    #####:10219:      jerry_value_free (set_result);
    #####:10220:      jerry_value_free (demo_property);
    #####:10221:      jerry_value_free (global_object);
        -:10222:    }
        -:10223:
    #####:10224:    jerry_value_free (test_object);
        -:10225:  }
        -:10226:
        -:10227:  /* Look up the test object base on a property name. */
    #####:10228:  find_my_object_info_t search_info =
        -:10229:  {
    #####:10230:    .property_name = jerry_string_sz ("DemoProp")
        -:10231:  };
        -:10232:
    #####:10233:  if (jerry_foreach_live_object (find_my_object, &search_info))
        -:10234:  {
        -:10235:    /* The search was successful. Do something useful with search_info.result. */
        -:10236:    // ...
    #####:10237:    printf ("Object found\n");
        -:10238:
        -:10239:    /* Release the found object after we're done using it. */
    #####:10240:    jerry_value_free (search_info.result);
        -:10241:  }
        -:10242:  else
        -:10243:  {
        -:10244:    /* The search has failed. */
    #####:10245:    printf ("Object not found\n");
        -:10246:
    #####:10247:    return_value = 1;
        -:10248:  }
        -:10249:
    #####:10250:  jerry_value_free (search_info.property_name);
        -:10251:
        -:10252:  /* Engine cleanup */
    #####:10253:  jerry_cleanup ();
        -:10254:  return return_value;
        -:10255:}
        -:10256:```
        -:10257:
        -:10258:**See also**
        -:10259:
        -:10260:- [jerry_foreach_live_object_cb_t](#jerry_foreach_live_object_cb_t)
        -:10261:
        -:10262:## jerry_foreach_live_object_with_info
        -:10263:
        -:10264:**Summary**
        -:10265:
        -:10266:Iterate over all objects in the engine matching a certain native data type.
        -:10267:
        -:10268:The "iterator" `foreach_p` method should return `true` value to continue the search.
        -:10269:If the method returns `false` the search for the object is finished.
        -:10270:
        -:10271:*Note*: Values obtained in `foreach_p` must be retained using [jerry_value_copy](#jerry_value_copy).
        -:10272:
        -:10273:**Prototype**
        -:10274:
        -:10275:```c
        -:10276:bool
        -:10277:jerry_foreach_live_object_with_info (const jerry_object_native_info_t *native_info_p,
        -:10278:                                     jerry_foreach_live_object_with_info_cb_t foreach_p,
        -:10279:                                     void *user_data_p);
        -:10280:```
        -:10281:
        -:10282:- `native_info_p` - native pointer's type information.
        -:10283:- `foreach_p` - function that will be invoked for each object.
        -:10284:- return value
        -:10285:  - `true`, if the search function terminated the traversal by returning `false`
        -:10286:  - `false`, if the end of the list of objects was reached
        -:10287:
        -:10288:*New in version 2.0*.
        -:10289:
        -:10290:**Example**
        -:10291:
        -:10292:[doctest]: # (name="02.API-REFERENCE-objects-foreach-nativeptr.c")
        -:10293:
        -:10294:```c
        -:10295:#include <stdio.h>
        -:10296:#include <stdlib.h>
        -:10297:#include "jerryscript.h"
        -:10298:
        -:10299:typedef struct
        -:10300:{
        -:10301:  int foo;
        -:10302:  bool bar;
        -:10303:} native_obj_t;
        -:10304:
        -:10305:typedef struct
        -:10306:{
        -:10307:  jerry_value_t found_object;
        -:10308:  native_obj_t *found_native_data_p;
        -:10309:
        -:10310:  int match_foo_value;
        -:10311:} find_object_data_t;
        -:10312:
    #####:10313:static void native_freecb (void *native_p,
        -:10314:                           jerry_object_native_info_t *info_p)
        -:10315:{
        -:10316:  (void) info_p;
        -:10317:
        -:10318:  /* `native_p` was allocated via malloc. */
    #####:10319:  free (native_p);
    #####:10320:} /* native_freecb */
        -:10321:
        -:10322:/*
        -:10323: * NOTE: The address (!) of type_info acts as a way to uniquely "identify" the
        -:10324: * C type `native_obj_t *`.
        -:10325: */
        -:10326:static const jerry_object_native_info_t native_obj_type_info =
        -:10327:{
        -:10328:  .free_cb = native_freecb
        -:10329:};
        -:10330:
        -:10331:/*
        -:10332: * Function creating JS object that is "backed" by a `native_obj_t`.
        -:10333: */
        -:10334:static void
    #####:10335:add_object_with_nativeptr (int foo_value)
        -:10336:{
        -:10337:  // construct object and native_set value:
    #####:10338:  jerry_value_t test_object = jerry_object ();
    #####:10339:  native_obj_t *native_obj_p = malloc (sizeof (*native_obj_p));
    #####:10340:  native_obj_p->foo = foo_value;
    #####:10341:  native_obj_p->bar = true;
        -:10342:
    #####:10343:  jerry_object_set_native_ptr (test_object, &native_obj_type_info, native_obj_p);
        -:10344:
        -:10345:  /* Register the test object into the global object. */
    #####:10346:  jerry_value_t global_object = jerry_current_realm ();
    #####:10347:  jerry_value_t demo_property = jerry_string_sz ("DemoObject");
    #####:10348:  jerry_value_t set_result = jerry_object_set (global_object, demo_property, test_object);
        -:10349:  /* The `set_result` should be checked if it is an exception or not. */
    #####:10350:  jerry_value_free (set_result);
    #####:10351:  jerry_value_free (demo_property);
    #####:10352:  jerry_value_free (global_object);
        -:10353:
    #####:10354:  jerry_value_free (test_object);
    #####:10355:} /* create_object_with_nativeptr */
        -:10356:
        -:10357:/*
        -:10358: * Example native method that searches for a JavaScript object
        -:10359: * with a `native_obj_type_info` has the correct value.
        -:10360: */
        -:10361:static bool
    #####:10362:find_object (const jerry_value_t candidate, void *data_p, void *user_data_p)
        -:10363:{
    #####:10364:  find_object_data_t *find_data_p = (find_object_data_t *) user_data_p;
    #####:10365:  native_obj_t *native_obj_p = (native_obj_t *) data_p;
        -:10366:
    #####:10367:  if (find_data_p->match_foo_value == native_obj_p->foo)
        -:10368:  {
        -:10369:    /* If the object was found, copy it and store it in the user data. */
    #####:10370:    find_data_p->found_object = jerry_value_copy (candidate);
    #####:10371:    find_data_p->found_native_data_p = native_obj_p;
        -:10372:
        -:10373:    /* Stop traversing over the objects. */
    #####:10374:    return false;
        -:10375:  }
        -:10376:
        -:10377:  /* Indicate that the object was not found, so traversal must continue. */
        -:10378:  return true;
        -:10379:} /* find_object */
        -:10380:
        -:10381:int
    #####:10382:main (void)
        -:10383:{
    #####:10384:  jerry_init (JERRY_INIT_EMPTY);
        -:10385:
    #####:10386:  add_object_with_nativeptr (4);
    #####:10387:  add_object_with_nativeptr (3);
    #####:10388:  add_object_with_nativeptr (2);
        -:10389:
    #####:10390:  find_object_data_t find_data =
        -:10391:  {
        -:10392:    .match_foo_value = 3,
        -:10393:  };
        -:10394:
    #####:10395:  if (jerry_foreach_live_object_with_info (&native_obj_type_info, find_object, &find_data))
        -:10396:  {
        -:10397:    /* The object was found and is now stored in `find_data.found_object`. After using it, it must be released. */
    #####:10398:    printf ("Object found, native foo value: %d\n", find_data.found_native_data_p->foo);
        -:10399:
    #####:10400:    jerry_value_free (find_data.found_object);
        -:10401:  }
        -:10402:  else
        -:10403:  {
        -:10404:    printf ("Object not found\n");
        -:10405:  }
        -:10406:
    #####:10407:  jerry_cleanup ();
        -:10408:
        -:10409:  return 0;
        -:10410:}
        -:10411:```
        -:10412:
        -:10413:**See also**
        -:10414:
        -:10415:- [jerry_object](#jerry_object)
        -:10416:- [jerry_object_set_native_ptr](#jerry_object_set_native_ptr)
        -:10417:- [jerry_object_get_native_ptr](#jerry_object_get_native_ptr)
        -:10418:- [jerry_object_native_info_t](#jerry_object_native_info_t)
        -:10419:- [jerry_foreach_live_object](#jerry_foreach_live_object)
        -:10420:
        -:10421:
        -:10422:# Input validator functions
        -:10423:
        -:10424:## jerry_validate_string
        -:10425:
        -:10426:**Summary**
        -:10427:
        -:10428:Check if a given character buffer is a valid in the specified encoding string.
        -:10429:
        -:10430:**Notes**: Calling this method is safe in any time. It can be called
        -:10431:even before engine initialization.
        -:10432:
        -:10433:**Prototype**
        -:10434:
        -:10435:```c
        -:10436:bool
        -:10437:jerry_validate_string (const jerry_char_t *buffer_p, /**< string data */
        -:10438:                       jerry_size_t buf_size, /**< string size */
        -:10439:                       jerry_encoding_t encoding); /**< encoding */
        -:10440:```
        -:10441:
        -:10442:- `buffer_p` - input string buffer.
        -:10443:- `buf_size` - input string buffer size in bytes.
        -:10444:- `encoding` - string encoding
        -:10445:- return value
        -:10446:  - true, if the provided string was a valid UTF-8 string.
        -:10447:  - false, if the string is not valid as an UTF-8 string.
        -:10448:
        -:10449:*New in version 2.0*.
        -:10450:
        -:10451:**Example**
        -:10452:
        -:10453:[doctest]: # ()
        -:10454:
        -:10455:```c
        -:10456:#include "jerryscript.h"
        -:10457:
        -:10458:int
    #####:10459:main (void)
        -:10460:{
    #####:10461:  const jerry_char_t script[] = "print ('Hello, World!');";
    #####:10462:  const jerry_size_t script_size = sizeof (script) - 1;
        -:10463:
    #####:10464:  if (!jerry_validate_string (script, script_size, JERRY_ENCODING_CESU8))
        -:10465:  {
        -:10466:    return 1;
        -:10467:  }
        -:10468:
    #####:10469:  return 0;
        -:10470:}
        -:10471:```
        -:10472:
        -:10473:**See also**
        -:10474:
        -:10475:- [jerry_string](#jerry_string)
        -:10476:- [jerry_string_size](#jerry_string_size)
        -:10477:- [jerry_string_length](#jerry_string_length)
        -:10478:- [jerry_string_to_buffer](#jerry_string_to_buffer)
        -:10479:
        -:10480:# Dynamic memory management functions
        -:10481:
        -:10482:## jerry_heap_alloc
        -:10483:
        -:10484:**Summary**
        -:10485:
        -:10486:Allocate memory on the engine's heap.
        -:10487:
        -:10488:*Note*: This function may take away memory from the executed JavaScript code.
        -:10489:If any other dynamic memory allocation API is available (e.g., libc malloc), it
        -:10490:should be used instead.
        -:10491:
        -:10492:**Prototype**
        -:10493:
        -:10494:```c
        -:10495:void *jerry_heap_alloc (size_t size);
        -:10496:```
        -:10497:
        -:10498:- `size`: size of the memory block.
        -:10499:- return value: non-NULL pointer, if the memory is successfully allocated,
        -:10500:                NULL otherwise.
        -:10501:
        -:10502:*New in version 2.0*.
        -:10503:
        -:10504:**See also**
        -:10505:
        -:10506:- [jerry_heap_free](#jerry_heap_free)
        -:10507:
        -:10508:## jerry_heap_free
        -:10509:
        -:10510:**Summary**
        -:10511:
        -:10512:Free memory allocated on the engine's heap.
        -:10513:
        -:10514:**Prototype**
        -:10515:
        -:10516:```c
        -:10517:void jerry_heap_free (void *mem_p, size_t size);
        -:10518:```
        -:10519:
        -:10520:- `mem_p`: value returned by `jerry_heap_alloc`.
        -:10521:- `size`: same size as passed to `jerry_heap_alloc`.
        -:10522:
        -:10523:*New in version 2.0*.
        -:10524:
        -:10525:**See also**
        -:10526:
        -:10527:- [jerry_heap_alloc](#jerry_heap_alloc)
        -:10528:
        -:10529:
        -:10530:# External context functions
        -:10531:
        -:10532:## jerry_context_alloc
        -:10533:
        -:10534:**Summary**
        -:10535:
        -:10536:Create an external JerryScript engine context.
        -:10537:
        -:10538:**Prototype**
        -:10539:
        -:10540:```c
        -:10541:jerry_context_t *
        -:10542:jerry_context_alloc (uint32_t heap_size,
        -:10543:                     jerry_context_alloc_t alloc,
        -:10544:                     void *cb_data_p);
        -:10545:```
        -:10546:
        -:10547:- `heap_size` - requested heap size of the JerryScript context
        -:10548:- `alloc` - function for allocation
        -:10549:- `cb_data_p` - user data
        -:10550:- return value
        -:10551:  - pointer to the newly created JerryScript context if success
        -:10552:  - NULL otherwise.
        -:10553:
        -:10554:*New in version 2.0*.
        -:10555:
        -:10556:**Example**
        -:10557:
        -:10558:[doctest]: # (test="compile", name="02.API-REFERENCE-create-context.c")
        -:10559:
        -:10560:```c
        -:10561:#include <stdlib.h>
        -:10562:#include <pthread.h>
        -:10563:
        -:10564:#include "jerryscript.h"
        -:10565:#include "jerryscript-port.h"
        -:10566:
        -:10567:/* A different Thread Local Storage variable for each jerry context. */
        -:10568:__thread jerry_context_t *tls_context;
        -:10569:
        -:10570:jerry_context_t *
    #####:10571:jerry_port_get_current_context (void)
        -:10572:{
        -:10573:  /* Returns the context assigned to the thread. */
    #####:10574:  return tls_context;
        -:10575:}
        -:10576:
        -:10577:/* Allocate JerryScript heap for each thread. */
        -:10578:static void *
    #####:10579:context_alloc_fn (size_t size, void *cb_data)
        -:10580:{
        -:10581:  (void) cb_data;
    #####:10582:  return malloc (size);
        -:10583:}
        -:10584:
        -:10585:static void *
    #####:10586:thread_function (void *param)
        -:10587:{
    #####:10588:  tls_context = jerry_context_alloc (512 * 1024, context_alloc_fn, NULL);
        -:10589:
    #####:10590:  jerry_init (JERRY_INIT_EMPTY);
        -:10591:  /* Run JerryScript in the context (e.g.: jerry_parse & jerry_run) */
    #####:10592:  jerry_cleanup ();
        -:10593:
        -:10594:  /* Deallocate JerryScript context */
    #####:10595:  free (tls_context);
        -:10596:
    #####:10597:  return NULL;
        -:10598:}
        -:10599:
        -:10600:#define NUM_OF_THREADS 8
        -:10601:
        -:10602:int
    #####:10603:main (void)
        -:10604:{
        -:10605:  pthread_t threads[NUM_OF_THREADS];
        -:10606:
        -:10607:  /* Create the threads. */
    #####:10608:  for (int i = 0; i < NUM_OF_THREADS; i++)
        -:10609:  {
    #####:10610:    pthread_create (&threads[i], NULL, thread_function, (void *) (intptr_t) i);
        -:10611:  }
        -:10612:
        -:10613:  /* Wait for the threads to complete, and release their resources. */
    #####:10614:  for (int i = 0; i < NUM_OF_THREADS; i++)
        -:10615:  {
    #####:10616:    pthread_join (threads[i], NULL);
        -:10617:  }
        -:10618:
        -:10619:  return 0;
        -:10620:}
        -:10621:```
        -:10622:
        -:10623:**See also**
        -:10624:
        -:10625:- [jerry_context_t](#jerry_context_t)
        -:10626:- [jerry_context_alloc_t](#jerry_context_alloc_t)
        -:10627:- [jerry_port_get_current_context](05.PORT-API.md#jerry_port_get_current_context)
        -:10628:
        -:10629:
        -:10630:# Snapshot functions
        -:10631:
        -:10632:## jerry_generate_snapshot
        -:10633:
        -:10634:**Summary**
        -:10635:
        -:10636:Generate snapshot from the specified source code.
        -:10637:
        -:10638:*Notes*:
        -:10639:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -:10640:  is no longer needed.
        -:10641:- This API depends on a build option (`JERRY_SNAPSHOT_SAVE`) and can be checked in runtime with
        -:10642:  the `JERRY_FEATURE_SNAPSHOT_SAVE` feature enum value, see [jerry_feature_enabled](#jerry_feature_enabled).
        -:10643:  If the feature is not enabled the function will return an exception.
        -:10644:
        -:10645:**Prototype**
        -:10646:
        -:10647:```c
        -:10648:jerry_value_t
        -:10649:jerry_generate_snapshot (jerry_value_t compiled_code,
        -:10650:                         uint32_t generate_snapshot_opts,
        -:10651:                         uint32_t *buffer_p,
        -:10652:                         size_t buffer_size);
        -:10653:```
        -:10654:
        -:10655:- `compiled_code` - compiled script or function (see: [jerry_parse](#jerry_parse)).
        -:10656:- `generate_snapshot_opts` - any combination of [jerry_generate_snapshot_opts_t](#jerry_generate_snapshot_opts_t) flags.
        -:10657:- `buffer_p` - output buffer (aligned to 4 bytes) to save snapshot to.
        -:10658:- `buffer_size` - the output buffer's size in bytes.
        -:10659:- return value
        -:10660:  - the size of the generated snapshot in bytes as number value, if it was generated successfully (i.e. there
        -:10661:    are no syntax errors in source code, buffer size is sufficient, and snapshot support is enabled in
        -:10662:    current configuration through JERRY_SNAPSHOT_SAVE)
        -:10663:  - thrown exception, otherwise.
        -:10664:
        -:10665:*New in version 2.0*.
        -:10666:
        -:10667:*Changed in version [[NEXT_RELEASE]]*: The `source_p`, `source_size`, `source_name_p`,
        -:10668:                                       and `source_name_length` arguments are replaced by `compiled_code`
        -:10669:                                       which should contain a compiled ECMAScript script / function.
        -:10670:                                       The `jerry_generate_function_snapshot` is now removed and can be reproduced
        -:10671:                                       by calling `jerry_parse` with function arguments and using this method
        -:10672:                                       (see [jerry_exec_snapshot](#jerry_exec_snapshot)).
        -:10673:**Example**
        -:10674:
        -:10675:[doctest]: # ()
        -:10676:
        -:10677:```c
        -:10678:#include "jerryscript.h"
        -:10679:
        -:10680:int
    #####:10681:main (void)
        -:10682:{
    #####:10683:  jerry_init (JERRY_INIT_EMPTY);
        -:10684:
        -:10685:  static uint32_t global_mode_snapshot_buffer[256];
    #####:10686:  const jerry_char_t script_to_snapshot[] = "(function () { return 'string from snapshot'; }) ();";
        -:10687:
    #####:10688:  jerry_value_t parse_result = jerry_parse (script_to_snapshot,
        -:10689:                                            sizeof (script_to_snapshot) - 1,
        -:10690:                                            NULL);
        -:10691:
    #####:10692:  size_t buffer_size = sizeof (global_mode_snapshot_buffer) / sizeof (uint32_t);
    #####:10693:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:10694:                                                           0,
        -:10695:                                                           global_mode_snapshot_buffer,
        -:10696:                                                           buffer_size);
    #####:10697:  jerry_value_free (parse_result);
        -:10698:
    #####:10699:  if (!jerry_value_is_exception (generate_result))
        -:10700:  {
    #####:10701:    size_t snapshot_size = (size_t) jerry_value_as_number (generate_result);
        -:10702:  }
        -:10703:
    #####:10704:  jerry_value_free (generate_result);
        -:10705:
    #####:10706:  jerry_cleanup ();
        -:10707:  return 0;
        -:10708:}
        -:10709:```
        -:10710:
        -:10711:**See also**
        -:10712:
        -:10713:- [jerry_parse](#jerry_parse)
        -:10714:- [jerry_parse_value](#jerry_parse_value)
        -:10715:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:10716:- [jerry_parse_options_t](#jerry_parse_options_t)
        -:10717:
        -:10718:
        -:10719:## jerry_exec_snapshot
        -:10720:
        -:10721:**Summary**
        -:10722:
        -:10723:Execute/load snapshot from the specified buffer.
        -:10724:
        -:10725:*Notes*:
        -:10726:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -:10727:  is no longer needed.
        -:10728:- This API depends on a build option (`JERRY_SNAPSHOT_EXEC`) and can be checked in runtime with
        -:10729:  the `JERRY_FEATURE_SNAPSHOT_EXEC` feature enum value, see [jerry_feature_enabled](#jerry_feature_enabled).
        -:10730:  If the feature is not enabled the function will return an exception.
        -:10731:
        -:10732:**Prototype**
        -:10733:
        -:10734:```c
        -:10735:jerry_value_t
        -:10736:jerry_exec_snapshot (const uint32_t *snapshot_p,
        -:10737:                     size_t snapshot_size,
        -:10738:                     size_t func_index,
        -:10739:                     uint32_t exec_snapshot_opts,
        -:10740:                     const jerry_exec_snapshot_option_values_t *options_values_p);
        -:10741:```
        -:10742:
        -:10743:- `snapshot_p` - pointer to snapshot.
        -:10744:- `snapshot_size` - size of snapshot in bytes.
        -:10745:- `func_index` - index of executed function.
        -:10746:- `exec_snapshot_opts` - any combination of [jerry_exec_snapshot_opts_t](#jerry_exec_snapshot_opts_t) flags.
        -:10747:- `options_values_p` - additional loading options, can be NULL if not used. The fields are described in
        -:10748:                       [jerry_exec_snapshot_option_values_t](#jerry_exec_snapshot_option_values_t).
        -:10749:- return value
        -:10750:  - result of bytecode, if run was successful.
        -:10751:  - thrown exception, otherwise (an exception is reported if the snapshot execution feature is not enabled).
        -:10752:
        -:10753:*Changed in version 2.0*: Added `func_index` and `exec_snapshot_opts` arguments. Removed the `copy_bytecode` last argument.
        -:10754:
        -:10755:*Changed in version [[NEXT_RELEASE]]*: Added `options_p` argument.
        -:10756:
        -:10757:**Example 1**
        -:10758:
        -:10759:[doctest]: # ()
        -:10760:
        -:10761:```c
        -:10762:#include "jerryscript.h"
        -:10763:
        -:10764:int
    #####:10765:main (void)
        -:10766:{
        -:10767:  static uint32_t snapshot_buffer[256];
        -:10768:
        -:10769:  /* 1st example: global mode snapshot. */
    #####:10770:  jerry_init (JERRY_INIT_EMPTY);
        -:10771:
    #####:10772:  const jerry_char_t script_to_snapshot[] = "(function () { return 'string from snapshot'; }) ();";
        -:10773:
    #####:10774:  jerry_value_t parse_result = jerry_parse (script_to_snapshot,
        -:10775:                                            sizeof (script_to_snapshot) - 1,
        -:10776:                                            NULL);
        -:10777:
    #####:10778:  size_t buffer_size = sizeof (snapshot_buffer) / sizeof (uint32_t);
    #####:10779:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:10780:                                                           0,
        -:10781:                                                           snapshot_buffer,
        -:10782:                                                           buffer_size);
    #####:10783:  jerry_value_free (parse_result);
        -:10784:
        -:10785:  /* 'generate_result' variable should be checked whether it contains an exception. */
        -:10786:
    #####:10787:  size_t snapshot_size = (size_t) jerry_value_as_number (generate_result);
    #####:10788:  jerry_value_free (generate_result);
        -:10789:
    #####:10790:  jerry_cleanup ();
    #####:10791:  jerry_init (JERRY_INIT_EMPTY);
        -:10792:
    #####:10793:  jerry_value_t res = jerry_exec_snapshot (snapshot_buffer,
        -:10794:                                           snapshot_size,
        -:10795:                                           0,
        -:10796:                                           0,
        -:10797:                                           NULL);
        -:10798:
        -:10799:  /* 'res' now contains 'string from snapshot' */
    #####:10800:  jerry_value_free (res);
        -:10801:
    #####:10802:  jerry_cleanup ();
        -:10803:  return 0;
        -:10804:}
        -:10805:```
        -:10806:
        -:10807:**Example 2**
        -:10808:
        -:10809:[doctest]: # ()
        -:10810:
        -:10811:```c
        -:10812:#include "jerryscript.h"
        -:10813:
        -:10814:int
    #####:10815:main (void)
        -:10816:{
        -:10817:  static uint32_t snapshot_buffer[256];
        -:10818:
        -:10819:  /* 2nd example: function snapshot. */
    #####:10820:  jerry_init (JERRY_INIT_EMPTY);
        -:10821:
    #####:10822:  const jerry_char_t function_to_snapshot[] = "return a + b;";
        -:10823:
        -:10824:  jerry_parse_options_t parse_options;
    #####:10825:  parse_options.options = JERRY_PARSE_HAS_ARGUMENT_LIST;
    #####:10826:  parse_options.argument_list = jerry_string_sz ("a, b");
        -:10827:
    #####:10828:  jerry_value_t parse_result = jerry_parse (function_to_snapshot,
        -:10829:                                            sizeof (function_to_snapshot) - 1,
        -:10830:                                            &parse_options);
        -:10831:
    #####:10832:  size_t buffer_size = sizeof (snapshot_buffer) / sizeof (uint32_t);
    #####:10833:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:10834:                                                           0,
        -:10835:                                                           snapshot_buffer,
        -:10836:                                                           buffer_size);
    #####:10837:  jerry_value_free (parse_result);
    #####:10838:  jerry_value_free (parse_options.argument_list);
        -:10839:
        -:10840:  /* 'generate_result' variable should be checked whether it contains an exception. */
        -:10841:
    #####:10842:  size_t snapshot_size = (size_t) jerry_value_as_number (generate_result);
    #####:10843:  jerry_value_free (generate_result);
        -:10844:
    #####:10845:  jerry_cleanup ();
    #####:10846:  jerry_init (JERRY_INIT_EMPTY);
        -:10847:
    #####:10848:  jerry_value_t func = jerry_exec_snapshot (snapshot_buffer,
        -:10849:                                            snapshot_size,
        -:10850:                                            0,
        -:10851:                                            JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION,
        -:10852:                                            NULL);
        -:10853:  /* 'func' can be used now as a function object. */
        -:10854:
    #####:10855:  jerry_value_t this_value = jerry_undefined ();
        -:10856:  jerry_value_t args[2];
    #####:10857:  args[0] = jerry_number (1.0);
    #####:10858:  args[1] = jerry_number (2.0);
        -:10859:
    #####:10860:  jerry_value_t res = jerry_call (func, this_value, args, 2);
        -:10861:
        -:10862:  /* 'res' now contains the value 3 as a jerry_value_t. */
    #####:10863:  jerry_value_free (res);
    #####:10864:  jerry_value_free (args[0]);
    #####:10865:  jerry_value_free (args[1]);
    #####:10866:  jerry_value_free (this_value);
    #####:10867:  jerry_value_free (func);
        -:10868:
    #####:10869:  jerry_cleanup ();
        -:10870:  return 0;
        -:10871:}
        -:10872:```
        -:10873:
        -:10874:**See also**
        -:10875:
        -:10876:- [jerry_init](#jerry_init)
        -:10877:- [jerry_cleanup](#jerry_cleanup)
        -:10878:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:10879:
        -:10880:
        -:10881:## jerry_get_literals_from_snapshot
        -:10882:
        -:10883:**Summary**
        -:10884:
        -:10885:Collect the used literals from the given snapshot and save them into a buffer in list or C format.
        -:10886:None of these literals are magic strings. In C format only valid identifiers are collected.
        -:10887:
        -:10888:*Note*:
        -:10889:- This API depends on a build option (`JERRY_SNAPSHOT_SAVE`) and can be checked in runtime with
        -:10890:  the `JERRY_FEATURE_SNAPSHOT_SAVE` feature enum value, see [jerry_feature_enabled](#jerry_feature_enabled).
        -:10891:  If the feature is not enabled the function will return zero.
        -:10892:
        -:10893:**Prototype**
        -:10894:
        -:10895:```c
        -:10896:size_t
        -:10897:jerry_get_literals_from_snapshot (const uint32_t *snapshot_p,
        -:10898:                                  size_t snapshot_size,
        -:10899:                                  jerry_char_t *lit_buf_p,
        -:10900:                                  size_t lit_buf_size,
        -:10901:                                  bool is_c_format);
        -:10902:```
        -:10903:
        -:10904:- `snapshot_p` - input snapshot buffer.
        -:10905:- `snapshot_size` - size of snapshot in bytes.
        -:10906:- `lit_buf_p` - buffer to save literals to.
        -:10907:- `lit_buf_size` - the buffer's size.
        -:10908:- `is_c_format` - the output format would be C-style (true) or a simple list (false).
        -:10909:- return value
        -:10910:  - the size of the literal-list, if it was generated successfully (i.e. the list of literals isn't empty,
        -:10911:    and literal-save support is enabled in current configuration through JERRY_SNAPSHOT_SAVE)
        -:10912:  - 0 otherwise.
        -:10913:
        -:10914:*New in version 2.0*.
        -:10915:
        -:10916:**Example**
        -:10917:
        -:10918:[doctest]: # (test="link")
        -:10919:
        -:10920:```c
        -:10921:#include <stdio.h>
        -:10922:#include "jerryscript.h"
        -:10923:
        -:10924:int
    #####:10925:main (void)
        -:10926:{
    #####:10927:  jerry_init (JERRY_INIT_EMPTY);
        -:10928:
        -:10929:  static jerry_char_t literal_buffer[256];
        -:10930:  static uint32_t snapshot_buffer[256];
    #####:10931:  const jerry_char_t script_for_literal_save[] = "var obj = { a:'aa', bb:'Bb' }";
        -:10932:
    #####:10933:  jerry_value_t parse_result = jerry_parse (script_for_literal_save,
        -:10934:                                            sizeof (script_for_literal_save) - 1,
        -:10935:                                            NULL);
        -:10936:
    #####:10937:  size_t buffer_size = sizeof (snapshot_buffer) / sizeof (uint32_t);
    #####:10938:  jerry_value_t generate_result = jerry_generate_snapshot (parse_result,
        -:10939:                                                           0,
        -:10940:                                                           snapshot_buffer,
        -:10941:                                                           buffer_size);
    #####:10942:  jerry_value_free (parse_result);
        -:10943:
    #####:10944:  size_t snapshot_size = (size_t) jerry_value_as_number (generate_result);
    #####:10945:  jerry_value_free (generate_result);
        -:10946:
    #####:10947:  const size_t literal_size = jerry_get_literals_from_snapshot (snapshot_buffer,
        -:10948:                                                                snapshot_size,
        -:10949:                                                                literal_buffer,
        -:10950:                                                                256,
        -:10951:                                                                true);
        -:10952:
    #####:10953:  if (literal_size != 0)
        -:10954:  {
    #####:10955:    FILE *literal_file_p = fopen ("literals.h", "wb");
    #####:10956:    fwrite (literal_buffer, sizeof (uint8_t), literal_size, literal_file_p);
    #####:10957:    fclose (literal_file_p);
        -:10958:  }
        -:10959:
    #####:10960:  jerry_cleanup ();
        -:10961:  return 0;
        -:10962:}
        -:10963:```
        -:10964:
        -:10965:**See also**
        -:10966:
        -:10967:- [jerry_init](#jerry_init)
        -:10968:- [jerry_cleanup](#jerry_cleanup)
        -:10969:- [jerry_register_magic_strings](#jerry_register_magic_strings)
        -:10970:
        -:10971:
        -:10972:# Backtrace functions
        -:10973:
        -:10974:## jerry_backtrace
        -:10975:
        -:10976:**Summary**
        -:10977:
        -:10978:Get backtrace. The backtrace is an array of strings where
        -:10979:each string contains the position of the corresponding frame.
        -:10980:The array length is zero if the backtrace is not available.
        -:10981:
        -:10982:This function is typically called from native callbacks.
        -:10983:
        -:10984:*Notes*:
        -:10985:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -:10986:is no longer needed.
        -:10987:- This feature depends on build option (`JERRY_LINE_INFO`) and can be checked
        -:10988:  in runtime with the `JERRY_FEATURE_LINE_INFO` feature enum value,
        -:10989:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -:10990:
        -:10991:**Prototype**
        -:10992:
        -:10993:```c
        -:10994:jerry_value_t
        -:10995:jerry_backtrace (uint32_t max_depth);
        -:10996:```
        -:10997:
        -:10998:- `max_depth` - backtrace collection stops after reaching this value, 0 = unlimited
        -:10999:- return value
        -:11000:  - a newly constructed JS array
        -:11001:
        -:11002:*New in version 2.0*.
        -:11003:
        -:11004:**Example**
        -:11005:
        -:11006:[doctest]: # (name="02.API-REFERENCE-jsbacktrace.c")
        -:11007:
        -:11008:```c
        -:11009:#include <stdio.h>
        -:11010:#include <string.h>
        -:11011:#include "jerryscript.h"
        -:11012:
        -:11013:static jerry_value_t
    #####:11014:backtrace_handler (const jerry_call_info_t *call_info_p,
        -:11015:                   const jerry_value_t args_p[],
        -:11016:                   const jerry_length_t args_count)
        -:11017:{
    #####:11018:  if (!jerry_feature_enabled (JERRY_FEATURE_LINE_INFO))
        -:11019:  {
    #####:11020:    printf ("Line info disabled, no backtrace will be printed\n");
    #####:11021:    return jerry_undefined ();
        -:11022:  }
        -:11023:
        -:11024:  /* If the line info feature is disabled an empty array will be returned. */
    #####:11025:  jerry_value_t backtrace_array = jerry_backtrace (5);
    #####:11026:  uint32_t array_length = jerry_array_length (backtrace_array);
        -:11027:
    #####:11028:  for (uint32_t idx = 0; idx < array_length; idx++)
        -:11029:  {
    #####:11030:    jerry_value_t property = jerry_object_get_index (backtrace_array, idx);
        -:11031:
        -:11032:    jerry_char_t string_buffer[64];
    #####:11033:    jerry_size_t copied_bytes = jerry_string_to_buffer (property,
        -:11034:                                                        JERRY_ENCODING_UTF8,
        -:11035:                                                        string_buffer,
        -:11036:                                                        sizeof (string_buffer) - 1);
    #####:11037:    string_buffer[copied_bytes] = '\0';
    #####:11038:    printf(" %d: %s\n", idx, string_buffer);
        -:11039:
    #####:11040:    jerry_value_free (property);
        -:11041:  }
        -:11042:
    #####:11043:  jerry_value_free (backtrace_array);
        -:11044:
    #####:11045:  return jerry_undefined ();
        -:11046:} /* backtrace_handler */
        -:11047:
        -:11048:int
    #####:11049:main (void)
        -:11050:{
    #####:11051:  jerry_init (JERRY_INIT_EMPTY);
        -:11052:
    #####:11053:  jerry_value_t global = jerry_current_realm ();
        -:11054:
        -:11055:  /* Register the "capture_backtrace" method. */
        -:11056:  {
    #####:11057:    jerry_value_t func = jerry_function_external (backtrace_handler);
    #####:11058:    jerry_value_t name = jerry_string_sz ("backtrace");
    #####:11059:    jerry_value_t result = jerry_object_set (global, name, func);
    #####:11060:    jerry_value_free (result);
    #####:11061:    jerry_value_free (name);
    #####:11062:    jerry_value_free (func);
        -:11063:  }
        -:11064:
    #####:11065:  jerry_value_free (global);
        -:11066:
    #####:11067:  const char *source = ("function f() { g (); }\n"
        -:11068:                        "function g() { h (); }\n"
        -:11069:                        "function h() { backtrace (); }\n"
        -:11070:                        "f ();\n");
        -:11071:
        -:11072:  jerry_parse_options_t parse_options;
    #####:11073:  parse_options.options = JERRY_PARSE_HAS_SOURCE_NAME;
    #####:11074:  parse_options.source_name = jerry_string_sz ("demo_memory.js");
        -:11075:
    #####:11076:  jerry_value_t program = jerry_parse ((const jerry_char_t *) source,
        -:11077:                                       strlen (source),
        -:11078:                                       &parse_options);
    #####:11079:  jerry_value_free (parse_options.source_name);
        -:11080:
    #####:11081:  if (!jerry_value_is_exception (program))
        -:11082:  {
    #####:11083:    jerry_value_t run_result = jerry_run (program);
    #####:11084:    jerry_value_free (run_result);
        -:11085:  }
        -:11086:
    #####:11087:  jerry_value_free (program);
    #####:11088:  jerry_cleanup ();
        -:11089:
        -:11090:  return 0;
        -:11091:}
        -:11092:```
        -:11093:
        -:11094:**See also**
        -:11095:
        -:11096:- [jerry_function_external](#jerry_function_external)
        -:11097:
        -:11098:
        -:11099:## jerry_backtrace_capture
        -:11100:
        -:11101:**Summary**
        -:11102:
        -:11103:Low-level function to capture each backtrace frame. The captured frame data
        -:11104:is passed to a callback function. To improve performance, the majority of
        -:11105:the frame data is not initialized when the callback function is called. The
        -:11106:initialization of these fields can be done later by helper functions such
        -:11107:as [jerry_frame_location](#jerry_frame_location).
        -:11108:
        -:11109:**Prototype**
        -:11110:
        -:11111:```c
        -:11112:void
        -:11113:jerry_backtrace_capture (jerry_backtrace_cb_t callback, void *user_p);
        -:11114:```
        -:11115:
        -:11116:- `callback` - a [jerry_backtrace_cb_t](#jerry_backtrace_cb_t) callback
        -:11117:               which is called for each captured frame
        -:11118:- `user_p` - pointer passed to the `callback` function, can be NULL
        -:11119:
        -:11120:*New in version [[NEXT_RELEASE]]*.
        -:11121:
        -:11122:**Example**
        -:11123:
        -:11124:[doctest]: # (name="02.API-REFERENCE-jscapturebacktrace.c")
        -:11125:
        -:11126:```c
        -:11127:#include <stdio.h>
        -:11128:#include <string.h>
        -:11129:#include "jerryscript.h"
        -:11130:
        -:11131:static bool
    #####:11132:backtrace_callback (jerry_frame_t *frame_p,
        -:11133:                    void *user_p)
        -:11134:{
    #####:11135:  printf (" A stack frame is captured\n");
    #####:11136:  return true;
        -:11137:}
        -:11138:
        -:11139:static jerry_value_t
    #####:11140:backtrace_handler (const jerry_call_info_t *call_info_p,
        -:11141:                   const jerry_value_t args_p[],
        -:11142:                   const jerry_length_t args_count)
        -:11143:{
        -:11144:  (void) call_info_p;
        -:11145:  (void) args_p;
        -:11146:  (void) args_count;
        -:11147:
    #####:11148:  jerry_backtrace_capture (&backtrace_callback, NULL);
        -:11149:
    #####:11150:  return jerry_undefined ();
        -:11151:} /* backtrace_handler */
        -:11152:
        -:11153:int
    #####:11154:main (void)
        -:11155:{
    #####:11156:  jerry_init (JERRY_INIT_EMPTY);
        -:11157:
    #####:11158:  jerry_value_t global = jerry_current_realm ();
        -:11159:
        -:11160:  /* Register the "dump_backtrace" method. */
        -:11161:  {
    #####:11162:    jerry_value_t func = jerry_function_external (backtrace_handler);
    #####:11163:    jerry_value_t name = jerry_string_sz ("backtrace");
    #####:11164:    jerry_value_t result = jerry_object_set (global, name, func);
    #####:11165:    jerry_value_free (result);
    #####:11166:    jerry_value_free (name);
    #####:11167:    jerry_value_free (func);
        -:11168:  }
        -:11169:
    #####:11170:  jerry_value_free (global);
        -:11171:
    #####:11172:  const char *source = ("function f() { g (); }\n"
        -:11173:                        "function g() { h (); }\n"
        -:11174:                        "function h() { backtrace (g); }\n"
        -:11175:                        "f ();\n");
        -:11176:
        -:11177:  jerry_parse_options_t parse_options;
    #####:11178:  parse_options.options = JERRY_PARSE_HAS_SOURCE_NAME;
    #####:11179:  parse_options.source_name = jerry_string_sz ("demo_backtrace.js");
        -:11180:
    #####:11181:  jerry_value_t program = jerry_parse ((const jerry_char_t *) source,
        -:11182:                                       strlen (source),
        -:11183:                                       &parse_options);
    #####:11184:  jerry_value_free (parse_options.source_name);
        -:11185:
    #####:11186:  if (!jerry_value_is_exception (program))
        -:11187:  {
    #####:11188:    jerry_value_t run_result = jerry_run (program);
    #####:11189:    jerry_value_free (run_result);
        -:11190:  }
        -:11191:
    #####:11192:  jerry_value_free (program);
    #####:11193:  jerry_cleanup ();
        -:11194:
        -:11195:  return 0;
        -:11196:}
        -:11197:```
        -:11198:
        -:11199:**See also**
        -:11200:
        -:11201:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11202:- [jerry_frame_type](#jerry_frame_type)
        -:11203:- [jerry_frame_location](#jerry_frame_location)
        -:11204:- [jerry_frame_callee](#jerry_frame_callee)
        -:11205:- [jerry_frame_this](#jerry_frame_this)
        -:11206:- [jerry_frame_is_strict](#jerry_frame_is_strict)
        -:11207:
        -:11208:
        -:11209:## jerry_frame_type
        -:11210:
        -:11211:**Summary**
        -:11212:
        -:11213:Returns with the type of the backtrace frame. This function can only be called
        -:11214:from the callback function of [jerry_backtrace_capture](#jerry_backtrace_capture),
        -:11215:and the value becomes invalid after the callback returns.
        -:11216:
        -:11217:**Prototype**
        -:11218:
        -:11219:```c
        -:11220:jerry_frame_type_t
        -:11221:jerry_frame_type (jerry_frame_t *frame_p);
        -:11222:```
        -:11223:
        -:11224:- `frame_p` - a frame passed to the [jerry_backtrace_cb_t](#jerry_backtrace_cb_t) callback
        -:11225:- return value
        -:11226:  - frame type listed in [jerry_frame_type_t](#jerry_frame_type_t)
        -:11227:
        -:11228:*New in version [[NEXT_RELEASE]]*.
        -:11229:
        -:11230:**Example**
        -:11231:
        -:11232:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11233:with the following callback function:
        -:11234:
        -:11235:```c
        -:11236:static bool
        -:11237:backtrace_callback (jerry_frame_t *frame_p,
        -:11238:                    void *user_p)
        -:11239:{
        -:11240:  switch (jerry_frame_type (frame_p))
        -:11241:  {
        -:11242:    case JERRY_BACKTRACE_FRAME_JS:
        -:11243:    {
        -:11244:      printf (" ECMAScript frame\n");
        -:11245:      break;
        -:11246:    }
        -:11247:    default:
        -:11248:    {
        -:11249:      printf (" Other frame\n");
        -:11250:      break;
        -:11251:    }
        -:11252:  }
        -:11253:
        -:11254:  return true;
        -:11255:}
        -:11256:```
        -:11257:
        -:11258:**See also**
        -:11259:
        -:11260:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11261:
        -:11262:
        -:11263:## jerry_frame_location
        -:11264:
        -:11265:**Summary**
        -:11266:
        -:11267:Initialize and return with the location private field of a backtrace
        -:11268:frame. If the location is not available, the returned value is NULL.
        -:11269:This function can only be called from the callback function of
        -:11270:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value
        -:11271:becomes invalid after the callback returns.
        -:11272:
        -:11273:*Notes*:
        -:11274:- Location information can only be retrieved if JERRY_FEATURE_LINE_INFO feature is
        -:11275:  enabled. Otherwise the function always returns with NULL.
        -:11276:- The returned data must not be modified, and does not need to be freed.
        -:11277:  Any cleanup is done automatically after the callback is returned.
        -:11278:
        -:11279:**Prototype**
        -:11280:
        -:11281:```c
        -:11282:const jerry_frame_location_t *
        -:11283:jerry_frame_location (jerry_frame_t *frame_p);
        -:11284:```
        -:11285:
        -:11286:- `frame_p` - a frame passed to the [jerry_backtrace_cb_t](#jerry_backtrace_cb_t) callback
        -:11287:- return value
        -:11288:  - pointer to the location private field if the location is available,
        -:11289:  - NULL otherwise
        -:11290:
        -:11291:*New in version [[NEXT_RELEASE]]*.
        -:11292:
        -:11293:**Example**
        -:11294:
        -:11295:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11296:with the following callback function:
        -:11297:
        -:11298:```c
        -:11299:static bool
        -:11300:backtrace_callback (jerry_frame_t *frame_p,
        -:11301:                    void *user_p)
        -:11302:{
        -:11303:  const jerry_frame_location_t *location_p;
        -:11304:  location_p = jerry_frame_location (frame_p);
        -:11305:
        -:11306:  if (location_p == NULL)
        -:11307:  {
        -:11308:    printf ("No location info is available\n");
        -:11309:    return true;
        -:11310:  }
        -:11311:
        -:11312:  jerry_char_t string_buffer[64];
        -:11313:  jerry_size_t copied_bytes = jerry_string_to_buffer (location_p->source_name,
        -:11314:                                                      JERRY_ENCODING_UTF8
        -:11315:                                                      string_buffer,
        -:11316:                                                      sizeof (string_buffer) - 1);
        -:11317:  string_buffer[copied_bytes] = '\0';
        -:11318:  printf(" %s:%d:%d\n", string_buffer, (int) location_p->line, (int) location_p->column);
        -:11319:  return true;
        -:11320:}
        -:11321:```
        -:11322:
        -:11323:**See also**
        -:11324:
        -:11325:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11326:
        -:11327:
        -:11328:## jerry_frame_callee
        -:11329:
        -:11330:**Summary**
        -:11331:
        -:11332:Initialize and return with the called function private field of a backtrace frame.
        -:11333:The backtrace frame is created for running the code bound to this function. This
        -:11334:function can only be called from the callback function of
        -:11335:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value becomes invalid
        -:11336:after the callback returns.
        -:11337:
        -:11338:*Notes*:
        -:11339:- The returned data must not be modified, and does not need to be freed.
        -:11340:  Any cleanup is done automatically after the callback is returned.
        -:11341:
        -:11342:**Prototype**
        -:11343:
        -:11344:```c
        -:11345:const jerry_value_t *
        -:11346:jerry_frame_callee (jerry_frame_t *frame_p);
        -:11347:```
        -:11348:
        -:11349:- `frame_p` - a frame passed to the [jerry_backtrace_cb_t](#jerry_backtrace_cb_t) callback
        -:11350:- return value
        -:11351:  - pointer to the called function if the function is available,
        -:11352:  - NULL otherwise
        -:11353:
        -:11354:*New in version [[NEXT_RELEASE]]*.
        -:11355:
        -:11356:**Example**
        -:11357:
        -:11358:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11359:with the following callback function:
        -:11360:
        -:11361:```c
        -:11362:static bool
        -:11363:backtrace_callback (jerry_frame_t *frame_p,
        -:11364:                    void *user_p)
        -:11365:{
        -:11366:  jerry_value_t *function_p = jerry_frame_callee (frame_p);
        -:11367:
        -:11368:  if (function_p != NULL)
        -:11369:  {
        -:11370:    printf ("Called function is available");
        -:11371:    return true;
        -:11372:  }
        -:11373:
        -:11374:  printf ("Called function is NOT available");
        -:11375:  return true;
        -:11376:}
        -:11377:```
        -:11378:
        -:11379:**See also**
        -:11380:
        -:11381:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11382:
        -:11383:
        -:11384:## jerry_frame_this
        -:11385:
        -:11386:**Summary**
        -:11387:
        -:11388:Initialize and return with the 'this' binding private field of a backtrace frame.
        -:11389:The 'this' binding is a hidden value passed to the called function. As for arrow
        -:11390:functions, the 'this' binding is assigned at function creation. This getter
        -:11391:function can only be called from the callback function of
        -:11392:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value becomes invalid
        -:11393:after the callback returns.
        -:11394:
        -:11395:*Notes*:
        -:11396:- The returned data must not be modified, and does not need to be freed.
        -:11397:  Any cleanup is done automatically after the callback is returned.
        -:11398:
        -:11399:**Prototype**
        -:11400:
        -:11401:```c
        -:11402:const jerry_value_t *
        -:11403:jerry_frame_this (jerry_frame_t *frame_p);
        -:11404:```
        -:11405:
        -:11406:- `frame_p` - a frame passed to the [jerry_backtrace_cb_t](#jerry_backtrace_cb_t) callback
        -:11407:- return value
        -:11408:  - pointer to the 'this' binding if the binding is available,
        -:11409:  - NULL otherwise
        -:11410:
        -:11411:*New in version [[NEXT_RELEASE]]*.
        -:11412:
        -:11413:**Example**
        -:11414:
        -:11415:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11416:with the following callback function:
        -:11417:
        -:11418:```c
        -:11419:static bool
        -:11420:backtrace_callback (jerry_frame_t *frame_p,
        -:11421:                    void *user_p)
        -:11422:{
        -:11423:  jerry_value_t *this_p = jerry_frame_this (frame_p);
        -:11424:
        -:11425:  if (this_p != NULL)
        -:11426:  {
        -:11427:    printf ("The 'this' binding is available");
        -:11428:    return true;
        -:11429:  }
        -:11430:
        -:11431:  printf ("The 'this' binding is NOT available");
        -:11432:  return true;
        -:11433:}
        -:11434:```
        -:11435:
        -:11436:**See also**
        -:11437:
        -:11438:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11439:
        -:11440:
        -:11441:## jerry_frame_is_strict
        -:11442:
        -:11443:**Summary**
        -:11444:
        -:11445:Returns true, if the code bound to the backtrace frame is strict mode
        -:11446:code. This function can only be called from the callback function of
        -:11447:[jerry_backtrace_capture](#jerry_backtrace_capture), and the value
        -:11448:becomes invalid after the callback returns.
        -:11449:
        -:11450:**Prototype**
        -:11451:
        -:11452:```c
        -:11453:bool
        -:11454:jerry_frame_is_strict (jerry_frame_t *frame_p);
        -:11455:```
        -:11456:
        -:11457:- `frame_p` - a frame passed to the [jerry_backtrace_cb_t](#jerry_backtrace_cb_t) callback
        -:11458:- return value
        -:11459:  - true, if strict mode code is bound to the frame
        -:11460:  - false, otherwise
        -:11461:
        -:11462:*New in version [[NEXT_RELEASE]]*.
        -:11463:
        -:11464:**Example**
        -:11465:
        -:11466:See the example of [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11467:with the following callback function:
        -:11468:
        -:11469:```c
        -:11470:static bool
        -:11471:backtrace_callback (jerry_frame_t *frame_p,
        -:11472:                    void *user_p)
        -:11473:{
        -:11474:  if (jerry_frame_is_strict (frame_p))
        -:11475:  {
        -:11476:    printf ("Strict mode code is running");
        -:11477:    return true;
        -:11478:  }
        -:11479:
        -:11480:  printf ("Non-strict mode code is running");
        -:11481:  return true;
        -:11482:}
        -:11483:```
        -:11484:
        -:11485:**See also**
        -:11486:
        -:11487:- [jerry_backtrace_capture](#jerry_backtrace_capture)
        -:11488:
        -:11489:
        -:11490:# Miscellaneous functions
        -:11491:
        -:11492:## jerry_halt_handler
        -:11493:
        -:11494:**Summary**
        -:11495:
        -:11496:The callback passed to this function is periodically called when
        -:11497:JerryScript executes an ECMAScript program.
        -:11498:
        -:11499:If the callback returns with undefined value the ECMAScript execution continues.
        -:11500:Otherwise the result is thrown by the engine. The callback function might be
        -:11501:called again even if it threw an exception. In this case the function must throw the
        -:11502:same exception again.
        -:11503:
        -:11504:To reduce the CPU overhead of constantly checking the termination
        -:11505:condition the callback is called when a backward jump is executed
        -:11506:or an exception is caught. Setting the `interval` to a greater
        -:11507:than `1` value reduces this overhead further. If its value is N
        -:11508:only every Nth event (backward jump, etc.) trigger the next check.
        -:11509:
        -:11510:*Notes*:
        -:11511:- This API depends on a build option (`JERRY_VM_HALT`) and can be checked
        -:11512:  in runtime with the `JERRY_FEATURE_VM_EXEC_STOP` feature enum value,
        -:11513:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -:11514:
        -:11515:**Prototype**
        -:11516:
        -:11517:```c
        -:11518:void
        -:11519:jerry_halt_handler (uint32_t interval,
        -:11520:                    jerry_halt_cb_t callback
        -:11521:                    void *user_p);
        -:11522:```
        -:11523:
        -:11524:- `interval` - interval of calling the `callback` function
        -:11525:- `callback` - periodically called callback (passing NULL disables this feature)
        -:11526:- `user_p` - user pointer passed to the `callback` function
        -:11527:
        -:11528:*New in version 2.0*.
        -:11529:
        -:11530:**Example**
        -:11531:
        -:11532:[doctest]: # (test="link")
        -:11533:
        -:11534:```c
        -:11535:#include "jerryscript.h"
        -:11536:
        -:11537:static jerry_value_t
    #####:11538:vm_exec_stop_callback (void *user_p)
        -:11539:{
    #####:11540:  int *countdown_p = (int *) user_p;
        -:11541:
    #####:11542:  while (*countdown_p > 0)
        -:11543:  {
    #####:11544:    (*countdown_p)--;
    #####:11545:    return jerry_undefined ();
        -:11546:  }
        -:11547:
        -:11548:  // The value will be automatically wrapped into an exception.
    #####:11549:  return jerry_string_sz ("Abort script");
        -:11550:}
        -:11551:
        -:11552:int
    #####:11553:main (void)
        -:11554:{
    #####:11555:  jerry_init (JERRY_INIT_EMPTY);
        -:11556:
    #####:11557:  int countdown = 10;
    #####:11558:  jerry_halt_handler (16, vm_exec_stop_callback, &countdown);
        -:11559:
        -:11560:  // Infinite loop.
    #####:11561:  const jerry_char_t script[] = "while(true) {}";
        -:11562:
    #####:11563:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
    #####:11564:  jerry_value_free (jerry_run (parsed_code));
    #####:11565:  jerry_value_free (parsed_code);
    #####:11566:  jerry_cleanup ();
        -:11567:}
        -:11568:```
        -:11569:
        -:11570:**See also**
        -:11571:
        -:11572:- [jerry_halt_cb_t](#jerry_halt_cb_t)
        -:11573:
        -:11574:## jerry_source_name
        -:11575:
        -:11576:**Summary**
        -:11577:
        -:11578:Get the source name (usually a file name) of the currently executed script or the given function object.
        -:11579:
        -:11580:This function is typically called from native callbacks.
        -:11581:
        -:11582:*Notes*:
        -:11583:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -:11584:is no longer needed.
        -:11585:- This feature depends on build option (`JERRY_LINE_INFO`) and can be checked
        -:11586:  in runtime with the `JERRY_FEATURE_LINE_INFO` feature enum value,
        -:11587:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -:11588:
        -:11589:**Prototype**
        -:11590:
        -:11591:```c
        -:11592:jerry_value_t
        -:11593:jerry_source_name (jerry_value_t value);
        -:11594:```
        -:11595:- `value` - api value to obtain the source name from
        -:11596:- return string value constructed from
        -:11597:  - the currently executed function object's source name, if the given value is undefined
        -:11598:  - source name of the function object, if the given value is a function object
        -:11599:  - "<anonymous>", otherwise
        -:11600:
        -:11601:*New in version 2.2*.
        -:11602:
        -:11603:**Example**
        -:11604:
        -:11605:[doctest]: # (name="02.API-REFERENCE-jssourcename.c")
        -:11606:
        -:11607:```c
        -:11608:#include <stdio.h>
        -:11609:#include <string.h>
        -:11610:#include "jerryscript.h"
        -:11611:
        -:11612:static jerry_value_t
    #####:11613:source_name_handler (const jerry_call_info_t *call_info_p,
        -:11614:                     const jerry_value_t args_p[],
        -:11615:                     const jerry_length_t args_count)
        -:11616:{
    #####:11617:  jerry_value_t undefined_value = jerry_undefined ();
    #####:11618:  jerry_value_t source_name = jerry_source_name (args_count > 0 ? args_p[0] : undefined_value);
    #####:11619:  jerry_value_free (undefined_value);
        -:11620:
    #####:11621:  return source_name;
        -:11622:} /* source_name_handler */
        -:11623:
        -:11624:int
    #####:11625:main (void)
        -:11626:{
    #####:11627:  jerry_init (JERRY_INIT_EMPTY);
        -:11628:
    #####:11629:  jerry_value_t global = jerry_current_realm ();
        -:11630:
        -:11631:  /* Register the sourceName" method. */
        -:11632:  {
    #####:11633:    jerry_value_t func = jerry_function_external (source_name_handler);
    #####:11634:    jerry_value_t name = jerry_string_sz ("sourceName");
    #####:11635:    jerry_value_t result = jerry_object_set (global, name, func);
    #####:11636:    jerry_value_free (result);
    #####:11637:    jerry_value_free (name);
    #####:11638:    jerry_value_free (func);
        -:11639:  }
        -:11640:
    #####:11641:  jerry_value_free (global);
        -:11642:
    #####:11643:  const jerry_char_t source[] = "function myFunction() { return sourceName() }; myFunction()";
        -:11644:
        -:11645:  jerry_parse_options_t parse_options;
    #####:11646:  parse_options.options = JERRY_PARSE_HAS_SOURCE_NAME;
    #####:11647:  parse_options.source_name = jerry_string_sz ("demo.js");
        -:11648:
    #####:11649:  jerry_value_t program = jerry_parse (source,
        -:11650:                                       sizeof (source) - 1,
        -:11651:                                       &parse_options);
    #####:11652:  jerry_value_free (parse_options.source_name);
        -:11653:
    #####:11654:  if (!jerry_value_is_exception (program))
        -:11655:  {
        -:11656:    /* `run_result` contains "demo.js" */
    #####:11657:    jerry_value_t run_result = jerry_run (program);
        -:11658:
        -:11659:    /* usage of `run_result` */
        -:11660:
    #####:11661:    jerry_value_free (run_result);
        -:11662:  }
        -:11663:
    #####:11664:  jerry_value_free (program);
    #####:11665:  jerry_cleanup ();
        -:11666:
        -:11667:  return 0;
        -:11668:}
        -:11669:```
        -:11670:
        -:11671:**See also**
        -:11672:
        -:11673:- [jerry_function_external](#jerry_function_external)
        -:11674:
        -:11675:## jerry_source_user_value
        -:11676:
        -:11677:**Summary**
        -:11678:
        -:11679:Returns the user value assigned to a script / module / function. This value is
        -:11680:set by the parser when the JERRY_PARSE_HAS_USER_VALUE flag is set in the `options`
        -:11681:member of the [jerry_parse_options_t](#jerry_parse_options_t) structure.
        -:11682:
        -:11683:*Notes*:
        -:11684:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -:11685:is no longer needed.
        -:11686:
        -:11687:**Prototype**
        -:11688:
        -:11689:```c
        -:11690:jerry_value_t
        -:11691:jerry_source_user_value (const jerry_value_t value);
        -:11692:```
        -:11693:- `value` - script / module / function value which executes ECMAScript
        -:11694:            code (native modules / functions do not have user value).
        -:11695:- return
        -:11696:  - user value - if available,
        -:11697:  - undefined - otherwise
        -:11698:
        -:11699:*New in version [[NEXT_RELEASE]]*.
        -:11700:
        -:11701:**Example**
        -:11702:
        -:11703:[doctest]: # ()
        -:11704:
        -:11705:```c
        -:11706:#include "jerryscript.h"
        -:11707:
        -:11708:int
    #####:11709:main (void)
        -:11710:{
    #####:11711:  jerry_init (JERRY_INIT_EMPTY);
        -:11712:
    #####:11713:  const jerry_char_t script[] = "function abc() {} abc";
        -:11714:
    #####:11715:  jerry_value_t user_value = jerry_object ();
        -:11716:
        -:11717:  jerry_parse_options_t parse_options;
    #####:11718:  parse_options.options = JERRY_PARSE_HAS_USER_VALUE;
    #####:11719:  parse_options.user_value = user_value;
        -:11720:
    #####:11721:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, &parse_options);
    #####:11722:  jerry_value_free (user_value);
        -:11723:
        -:11724:  /* The jerry_source_user_value returns the object which
        -:11725:   * was created by jerry_object before. */
        -:11726:
    #####:11727:  user_value = jerry_source_user_value (parsed_code);
    #####:11728:  jerry_value_free (parsed_code);
        -:11729:
    #####:11730:  jerry_value_free (user_value);
    #####:11731:  jerry_cleanup ();
        -:11732:  return 0;
        -:11733:}
        -:11734:```
        -:11735:
        -:11736:**See also**
        -:11737:
        -:11738:- [jerry_parse](#jerry_parse)
        -:11739:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:11740:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:11741:
        -:11742:## jerry_function_is_dynamic
        -:11743:
        -:11744:**Summary**
        -:11745:
        -:11746:Checks whether an ECMAScript code is compiled by eval like (eval, new Function,
        -:11747:[jerry_eval](#jerry_eval), etc.) command.
        -:11748:
        -:11749:**Prototype**
        -:11750:
        -:11751:```c
        -:11752:bool jerry_function_is_dynamic (const jerry_value_t value);
        -:11753:```
        -:11754:- `value` - script / module / function value which executes ECMAScript code
        -:11755:- return
        -:11756:  - true - if code is compiled by eval like command
        -:11757:  - false - otherwise
        -:11758:
        -:11759:*New in version [[NEXT_RELEASE]]*.
        -:11760:
        -:11761:**Example**
        -:11762:
        -:11763:[doctest]: # ()
        -:11764:
        -:11765:```c
        -:11766:#include "jerryscript.h"
        -:11767:
        -:11768:int
    #####:11769:main (void)
        -:11770:{
    #####:11771:  jerry_init (JERRY_INIT_EMPTY);
        -:11772:
    #####:11773:  const jerry_char_t script[] = "eval('(function (a) { return a; })')";
        -:11774:
    #####:11775:  jerry_value_t script_value = jerry_parse (script, sizeof (script) - 1, NULL);
    #####:11776:  jerry_value_t function_value = jerry_run (script_value);
    #####:11777:  jerry_value_free (script_value);
        -:11778:
    #####:11779:  if (jerry_function_is_dynamic (function_value))
        -:11780:  {
        -:11781:    /* Code enters here. */
        -:11782:  }
        -:11783:
    #####:11784:  jerry_value_free (function_value);
    #####:11785:  jerry_cleanup ();
        -:11786:  return 0;
        -:11787:}
        -:11788:```
        -:11789:
        -:11790:**See also**
        -:11791:
        -:11792:- [jerry_parse](#jerry_parse)
        -:11793:- [jerry_generate_snapshot](#jerry_generate_snapshot)
        -:11794:- [jerry_exec_snapshot](#jerry_exec_snapshot)
        -:11795:
        -:11796:## jerry_source_info
        -:11797:
        -:11798:**Summary**
        -:11799:
        -:11800:Returns a newly created source info structure corresponding to the passed script/module/function.
        -:11801:The function is lower level than `toString()` operation, but provides more contextual information.
        -:11802:
        -:11803:*Notes*:
        -:11804:- Returned value must be freed with [jerry_source_info_free](#jerry_source_info_free) when it
        -:11805:is no longer needed.
        -:11806:- This API depends on a build option (`JERRY_FUNCTION_TO_STRING`) and can be checked
        -:11807:  in runtime with the `JERRY_FEATURE_FUNCTION_TO_STRING` feature enum value,
        -:11808:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -:11809:
        -:11810:**Prototype**
        -:11811:
        -:11812:```c
        -:11813:jerry_source_info_t *jerry_source_info (const jerry_value_t value);
        -:11814:```
        -:11815:- `value` - script / module / function value which executes JavaScript
        -:11816:            code (native modules / functions do not have source info).
        -:11817:- return
        -:11818:  - source info - a newly created source info, if at least one field is available,
        -:11819:  - NULL - otherwise
        -:11820:
        -:11821:*New in version [[NEXT_RELEASE]]*.
        -:11822:
        -:11823:**Example**
        -:11824:
        -:11825:[doctest]: # ()
        -:11826:
        -:11827:```c
        -:11828:#include "jerryscript.h"
        -:11829:
        -:11830:int
    #####:11831:main (void)
        -:11832:{
    #####:11833:  jerry_init (JERRY_INIT_EMPTY);
        -:11834:
    #####:11835:  const jerry_char_t script[] = "function abc() {} abc";
        -:11836:
    #####:11837:  jerry_value_t parsed_code = jerry_parse (script, sizeof (script) - 1, NULL);
        -:11838:
    #####:11839:  jerry_source_info_t *source_info_p = jerry_source_info (parsed_code);
    #####:11840:  jerry_value_free (parsed_code);
        -:11841:
        -:11842:  if (source_info_p != NULL)
        -:11843:  {
        -:11844:    /* Check the information provided by jerry_source_info. */
        -:11845:  }
        -:11846:
    #####:11847:  jerry_source_info_free (source_info_p);
        -:11848:
    #####:11849:  jerry_cleanup ();
        -:11850:  return 0;
        -:11851:}
        -:11852:```
        -:11853:
        -:11854:**See also**
        -:11855:
        -:11856:- [jerry_source_info_free](#jerry_source_info_free)
        -:11857:- [jerry_source_info_t](#jerry_source_info_t)
        -:11858:
        -:11859:## jerry_source_info_free
        -:11860:
        -:11861:**Summary**
        -:11862:
        -:11863:Frees the the source info structure returned by [jerry_source_info](#jerry_source_info).
        -:11864:
        -:11865:*Notes*:
        -:11866:- This API depends on a build option (`JERRY_FUNCTION_TO_STRING`) and can be checked
        -:11867:  in runtime with the `JERRY_FEATURE_FUNCTION_TO_STRING` feature enum value,
        -:11868:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -:11869:
        -:11870:**Prototype**
        -:11871:
        -:11872:```c
        -:11873:void jerry_source_info_free (jerry_source_info_t *source_info_p)
        -:11874:```
        -:11875:- `source_info_p` - source info structure returned by [jerry_source_info](#jerry_source_info)
        -:11876:
        -:11877:*New in version [[NEXT_RELEASE]]*.
        -:11878:
        -:11879:**Example**
        -:11880:
        -:11881:See [jerry_source_info](#jerry_source_info)
        -:11882:
        -:11883:**See also**
        -:11884:
        -:11885:- [jerry_source_info](#jerry_source_info)
        -:11886:- [jerry_source_info_t](#jerry_source_info_t)
        -:11887:
        -:11888:
        -:11889:# Functions for realm objects
        -:11890:
        -:11891:These APIs all depend on build option (`JERRY_BUILTIN_REALMS`).
        -:11892:
        -:11893:## jerry_set_realm
        -:11894:
        -:11895:**Summary**
        -:11896:
        -:11897:Replaces the currently active realm (including the global object) with another realm.
        -:11898:The replacement should be temporary, and the original realm must be restored after
        -:11899:the tasks are completed. During the replacement, the realm must be referenced
        -:11900:by the application (i.e. the gc must not reclaim it). This is also true to
        -:11901:the returned previously active realm, so there is no need to free the value
        -:11902:after the restoration. The function can only fail if realms are not supported
        -:11903:or the passed argument is not a realm. In this case the returned exception must
        -:11904:be freed by [jerry_value_free](#jerry_value_free).
        -:11905:
        -:11906:This function is useful to parse a script, create a native function, load a snapshot
        -:11907:or create an exception in another realm. Each ECMAScript code runs in the realm
        -:11908:which was active when the code was parsed or loaded regardless of the current realm.
        -:11909:
        -:11910:*Notes*:
        -:11911:- This feature depends on build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -:11912:  in runtime with the `JERRY_FEATURE_REALM` feature enum value,
        -:11913:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -:11914:- The es.next profile enables this by default.
        -:11915:
        -:11916:**Prototype**
        -:11917:
        -:11918:```c
        -:11919:jerry_value_t
        -:11920:jerry_set_realm (jerry_value_t realm_value);
        -:11921:```
        -:11922:- `realm_value` - the new realm value
        -:11923:- return
        -:11924:  - previous realm value - if the passed value is a realm
        -:11925:  - exception - otherwise
        -:11926:
        -:11927:*New in version 2.4*.
        -:11928:
        -:11929:**Example**
        -:11930:
        -:11931:```c
        -:11932:{
        -:11933:  jerry_value_t realm_value = jerry_realm ();
        -:11934:
        -:11935:  jerry_value_t old_realm = jerry_set_realm (realm_value);
        -:11936:
        -:11937:  ... // usage of the realm
        -:11938:
        -:11939:  jerry_set_realm (old_realm);
        -:11940:}
        -:11941:```
        -:11942:
        -:11943:**See also**
        -:11944:
        -:11945:- [jerry_realm](#jerry_realm)
        -:11946:
        -:11947:## jerry_realm_this
        -:11948:
        -:11949:**Summary**
        -:11950:
        -:11951:Gets the 'this' binding of a realm. The 'this' binding is always an object.
        -:11952:By default the 'this' binding is the same as the realm object and can be
        -:11953:changed by [jerry_realm_set_this](#jerry_realm_set_this).
        -:11954:
        -:11955:*Notes*:
        -:11956:- This feature depends on build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -:11957:  in runtime with the `JERRY_FEATURE_REALM` feature enum value,
        -:11958:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -:11959:- The es.next profile enables this by default.
        -:11960:
        -:11961:**Prototype**
        -:11962:
        -:11963:```c
        -:11964:jerry_value_t
        -:11965:jerry_realm_this (jerry_value_t realm_value)
        -:11966:```
        -:11967:- `realm_value` - realm value
        -:11968:- return
        -:11969:  - type error exception- if realm_value is not a realm
        -:11970:  - 'this' binding object - otherwise
        -:11971:
        -:11972:*New in version 2.4*.
        -:11973:
        -:11974:**Example**
        -:11975:
        -:11976:```c
        -:11977:{
        -:11978:  jerry_value_t realm_value = jerry_realm ();
        -:11979:
        -:11980:  jerry_value_t this_value = jerry_realm_this (realm_value);
        -:11981:
        -:11982:  ... // usage of the this_value
        -:11983:
        -:11984:  jerry_value_free (this_value);
        -:11985:  jerry_value_free (realm_value);
        -:11986:}
        -:11987:```
        -:11988:
        -:11989:**See also**
        -:11990:
        -:11991:- [jerry_realm](#jerry_realm)
        -:11992:- [jerry_realm_set_this](#jerry_realm_set_this)
        -:11993:
        -:11994:## jerry_realm_set_this
        -:11995:
        -:11996:**Summary**
        -:11997:
        -:11998:Sets the 'this' binding of a realm. This function must be called before executing
        -:11999:any script on the realm. Otherwise the operation is undefined.
        -:12000:
        -:12001:*Notes*:
        -:12002:- This feature depends on build option (`JERRY_BUILTIN_REALMS`) and can be checked
        -:12003:  in runtime with the `JERRY_FEATURE_REALM` feature enum value,
        -:12004:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -:12005:- The es.next profile enables this by default.
        -:12006:
        -:12007:**Prototype**
        -:12008:
        -:12009:```c
        -:12010:jerry_value_t
        -:12011:jerry_realm_set_this (jerry_value_t realm_value, jerry_value_t this_value)
        -:12012:```
        -:12013:- `realm_value` - realm value
        -:12014:- `this_value` - new this value
        -:12015:- return
        -:12016:  - type error exception- if realm_value is not a realm or this_value is not object
        -:12017:  - true - otherwise
        -:12018:
        -:12019:*New in version 2.4*.
        -:12020:
        -:12021:**Example**
        -:12022:
        -:12023:```c
        -:12024:{
        -:12025:  jerry_value_t realm_value = jerry_realm ();
        -:12026:
        -:12027:  jerry_value_t old_realm = jerry_set_realm (realm_value);
        -:12028:  /* The prototype of the object comes from the new realm. */
        -:12029:  jerry_value_t this_value = jerry_object ();
        -:12030:  jerry_set_realm (old_realm);
        -:12031:
        -:12032:  jerry_value_t result = jerry_realm_set_this (realm_value, this_value);
        -:12033:
        -:12034:  ... // usage of the realm
        -:12035:}
        -:12036:```
        -:12037:
        -:12038:**See also**
        -:12039:
        -:12040:- [jerry_realm](#jerry_realm)
        -:12041:- [jerry_set_realm](#jerry_set_realm)
        -:12042:- [jerry_realm_this](#jerry_realm_this)
        -:12043:
        -:12044:# ArrayBuffer and TypedArray functions
        -:12045:
        -:12046:These APIs all depend on the es.next profile.
        -:12047:
        -:12048:## jerry_arraybuffer_size
        -:12049:
        -:12050:**Summary**
        -:12051:
        -:12052:Get the byte length property of the ArrayBuffer or SharedArrayBuffer. This is the
        -:12053:same value which was passed to the ArrayBuffer constructor call.
        -:12054:
        -:12055:**Prototype**
        -:12056:
        -:12057:```c
        -:12058:jerry_length_t
        -:12059:jerry_arraybuffer_size (const jerry_value_t value);
        -:12060:```
        -:12061:
        -:12062:- `value` - ArrayBuffer object
        -:12063:- return value
        -:12064:  - size of the ArrayBuffer in bytes
        -:12065:  - 0 if the `value` parameter is not an ArrayBuffer
        -:12066:
        -:12067:*New in version 2.0*.
        -:12068:
        -:12069:**Example**
        -:12070:
        -:12071:```c
        -:12072:{
        -:12073:  jerry_value_t buffer = jerry_arraybuffer (15);
        -:12074:  jerry_length_t length = jerry_arraybuffer_size (buffer);
        -:12075:  // length should be 15
        -:12076:
        -:12077:  jerry_value_free (buffer);
        -:12078:}
        -:12079:```
        -:12080:
        -:12081:**See also**
        -:12082:- [jerry_arraybuffer](#jerry_arraybuffer)
        -:12083:
        -:12084:
        -:12085:## jerry_arraybuffer_read
        -:12086:
        -:12087:**Summary**
        -:12088:
        -:12089:Copy the portion of the ArrayBuffer or SharedArrayBuffer into a user provided buffer.
        -:12090:The start offset of the read operation can be specified.
        -:12091:
        -:12092:The number bytes to be read can be specified via the `buf_size`
        -:12093:parameter. It is not possible to read more than the length of
        -:12094:the ArrayBuffer.
        -:12095:
        -:12096:Function returns the number of bytes read from the ArrayBuffer
        -:12097:(and written to the buffer parameter). This value is
        -:12098:calculated in the following way: `min(array buffer length - offset, buf_size)`.
        -:12099:
        -:12100:**Prototype**
        -:12101:
        -:12102:```c
        -:12103:jerry_length_t
        -:12104:jerry_arraybuffer_read (const jerry_value_t value,
        -:12105:                        jerry_length_t offset,
        -:12106:                        uint8_t *buf_p,
        -:12107:                        jerry_length_t buf_size);
        -:12108:```
        -:12109:
        -:12110:- `value` - ArrayBuffer to read from
        -:12111:- `offset` - start offset of the read operation
        -:12112:- `buf_p` - buffer to read the data to
        -:12113:- `buf_size` - maximum number of bytes to read into the buffer
        -:12114:- return value
        -:12115:  - number of bytes written into the buffer (read from the ArrayBuffer)
        -:12116:  - 0 if the `value` is not an ArrayBuffer object
        -:12117:  - 0 if the `buf_size` is zero or there is nothing to read
        -:12118:
        -:12119:*New in version 2.0*.
        -:12120:
        -:12121:**Example**
        -:12122:
        -:12123:```c
        -:12124:{
        -:12125:  uint8_t data[20];
        -:12126:  jerry_value_t buffer;
        -:12127:  // ... create the ArrayBuffer or copy it from somewhere.
        -:12128:
        -:12129:  jerry_value_t bytes_read;
        -:12130:
        -:12131:  // read 10 bytes from the start of the ArrayBuffer.
        -:12132:  bytes_read = jerry_arraybuffer_read (buffer, 0, data, 10);
        -:12133:  // read the next 10 bytes
        -:12134:  bytes_read += jerry_arraybuffer_read (buffer, bytes_read, data + bytes_read, 10);
        -:12135:
        -:12136:  // process the data variable
        -:12137:
        -:12138:  jerry_value_free (buffer);
        -:12139:}
        -:12140:```
        -:12141:
        -:12142:**See also**
        -:12143:
        -:12144:- [jerry_arraybuffer](#jerry_arraybuffer)
        -:12145:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -:12146:- [jerry_arraybuffer_size](#jerry_arraybuffer_size)
        -:12147:
        -:12148:
        -:12149:## jerry_arraybuffer_write
        -:12150:
        -:12151:**Summary**
        -:12152:
        -:12153:Copy the contents of a buffer into the ArrayBuffer or SharedArrayBuffer.
        -:12154:The start offset of the write operation can be specified.
        -:12155:
        -:12156:The number bytes to be written can be specified via the `buf_size`
        -:12157:parameter. It is not possible to write more than the length of
        -:12158:the ArrayBuffer.
        -:12159:
        -:12160:Function returns the number of bytes written into the ArrayBuffer
        -:12161:(and read from the buffer parameter). This value is
        -:12162:calculated in the following way: `min(array buffer length - offset, buf_size)`.
        -:12163:
        -:12164:**Prototype**
        -:12165:
        -:12166:```c
        -:12167:jerry_length_t
        -:12168:jerry_arraybuffer_write (const jerry_value_t value,
        -:12169:                         jerry_length_t offset,
        -:12170:                         const uint8_t *buf_p,
        -:12171:                         jerry_length_t buf_size);
        -:12172:```
        -:12173:
        -:12174:- `value` - ArrayBuffer to write to
        -:12175:- `offset` - start offset of the write operation
        -:12176:- `buf_p` - buffer to read the data from
        -:12177:- `buf_size` - maximum number of bytes to write into the ArrayBuffer
        -:12178:- return value
        -:12179:  - number of bytes written into the ArrayBuffer (read from the buffer parameter)
        -:12180:  - 0 if the `value` is not an ArrayBuffer object
        -:12181:  - 0 if the `buf_size` is zero or there is nothing to write
        -:12182:
        -:12183:*New in version 2.0*.
        -:12184:
        -:12185:**Example**
        -:12186:
        -:12187:```c
        -:12188:{
        -:12189:  uint8_t data[20];
        -:12190:
        -:12191:  // fill the data with values
        -:12192:  for (int i = 0; i < 20; i++)
        -:12193:  {
        -:12194:    data[i] = (uint8_t) (i * 2);
        -:12195:  }
        -:12196:
        -:12197:  jerry_value_t buffer;
        -:12198:  // ... create the ArrayBuffer or copy it from somewhere.
        -:12199:
        -:12200:  jerry_value_t bytes_written;
        -:12201:
        -:12202:  // write 10 bytes from to the start of the ArrayBuffer.
        -:12203:  bytes_written = jerry_arraybuffer_write (buffer, 0, data, 10);
        -:12204:  // read the next 10 bytes
        -:12205:  bytes_written += jerry_arraybuffer_write (buffer, bytes_written, data + bytes_written, 10);
        -:12206:
        -:12207:  // use the ArrayBuffer
        -:12208:
        -:12209:  jerry_value_free (buffer);
        -:12210:}
        -:12211:```
        -:12212:
        -:12213:**See also**
        -:12214:
        -:12215:- [jerry_arraybuffer](#jerry_arraybuffer)
        -:12216:- [jerry_arraybuffer_write](#jerry_arraybuffer_write)
        -:12217:- [jerry_arraybuffer_size](#jerry_arraybuffer_size)
        -:12218:
        -:12219:
        -:12220:## jerry_arraybuffer_data
        -:12221:
        -:12222:**Summary**
        -:12223:
        -:12224:The function allows access to the contents of the Array Buffer directly.
        -:12225:
        -:12226:**WARNING!** This operation is for expert use only! The programmer must
        -:12227:ensure that the returned memory area is used correctly. That is
        -:12228:there is no out of bounds reads or writes. The lifetime of the underlying
        -:12229:data buffer is managed by the ArrayBuffer value. Make sure to copy the
        -:12230:value with [`jerry_value_copy`](#jerry_value_copy) if the data
        -:12231:buffer is needed later.
        -:12232:
        -:12233:**Prototype**
        -:12234:
        -:12235:```c
        -:12236:uint8_t *
        -:12237:jerry_arraybuffer_data (const jerry_value_t value);
        -:12238:```
        -:12239:
        -:12240:- `value` - Array Buffer object.
        -:12241:- return value
        -:12242:  - pointer to the Array Buffer's data area.
        -:12243:  - NULL if the `value` is:
        -:12244:    - not an ArrayBuffer object
        -:12245:    - an external ArrayBuffer has been detached
        -:12246:
        -:12247:*New in version 2.0*.
        -:12248:
        -:12249:**Example**
        -:12250:
        -:12251:```c
        -:12252:{
        -:12253:  // create the ArrayBuffer
        -:12254:  jerry_value_t buffer = jerry_arraybuffer (16);
        -:12255:
        -:12256:  uint8_t *const data = jerry_arraybuffer_data (buffer);
        -:12257:
        -:12258:  for (int i = 0; i < 16; i++)
        -:12259:  {
        -:12260:    data[i] = (uint8_t) (i + 4);
        -:12261:  }
        -:12262:
        -:12263:  // use the Array Buffer
        -:12264:
        -:12265:  // release buffer as it is not needed after this point
        -:12266:  jerry_value_free (buffer);
        -:12267:}
        -:12268:```
        -:12269:
        -:12270:**See also**
        -:12271:
        -:12272:- [jerry_arraybuffer_external](#jerry_arraybuffer_external)
        -:12273:
        -:12274:## jerry_arraybuffer_is_detachable
        -:12275:
        -:12276:**Summary**
        -:12277:
        -:12278:Get if the ArrayBuffer is detachable.
        -:12279:
        -:12280:**Prototype**
        -:12281:
        -:12282:```c
        -:12283:bool
        -:12284:jerry_arraybuffer_is_detachable (const jerry_value_t value);
        -:12285:```
        -:12286:
        -:12287:- `value` - ArrayBuffer to be detached
        -:12288:- return
        -:12289:  - true if the arraybuffer is detachable
        -:12290:  - false otherwise
        -:12291:
        -:12292:*New in version 2.2*.
        -:12293:
        -:12294:**Example**
        -:12295:
        -:12296:```c
        -:12297:{
        -:12298:  // create the ArrayBuffer
        -:12299:  jerry_value_t buffer = jerry_arraybuffer (16);
        -:12300:
        -:12301:  bool is_detachable = jerry_arraybuffer_is_detachable (buffer);
        -:12302:
        -:12303:  // release buffer as it is not needed after this point
        -:12304:  jerry_value_free (buffer);
        -:12305:}
        -:12306:```
        -:12307:
        -:12308:**See also**
        -:12309:
        -:12310:- [jerry_arraybuffer_detach](#jerry_arraybuffer_detach)
        -:12311:
        -:12312:## jerry_arraybuffer_detach
        -:12313:
        -:12314:**Summary**
        -:12315:
        -:12316:Detach the underlying data block from ArrayBuffer and set its bytelength to 0.
        -:12317:
        -:12318:This operation requires the ArrayBuffer to be an external buffer created by
        -:12319:`jerry_arraybuffer_external`.
        -:12320:
        -:12321:**Prototype**
        -:12322:
        -:12323:```c
        -:12324:jerry_value_t
        -:12325:jerry_arraybuffer_detach (const jerry_value_t value);
        -:12326:```
        -:12327:
        -:12328:*Note*: If the ArrayBuffer has been created with `jerry_arraybuffer_external` the optional free callback is called on a successful detach operation
        -:12329:
        -:12330:- `value` - ArrayBuffer to be detached
        -:12331:- return
        -:12332:  - null value if success
        -:12333:  - exception otherwise
        -:12334:
        -:12335:*New in version 2.2*.
        -:12336:
        -:12337:**Example**
        -:12338:
        -:12339:```c
        -:12340:{
        -:12341:  uint8_t buf[1];
        -:12342:  jerry_size_t length = 1;
        -:12343:  // create the ArrayBuffer
        -:12344:  jerry_value_t buffer = jerry_arraybuffer (length, buf, NULL);
        -:12345:
        -:12346:  jerry_value_t res = jerry_arraybuffer_detach (buffer);
        -:12347:
        -:12348:  // release buffer as it is not needed after this point
        -:12349:  jerry_value_free (res);
        -:12350:  jerry_value_free (buffer);
        -:12351:}
        -:12352:```
        -:12353:
        -:12354:**See also**
        -:12355:
        -:12356:- [jerry_arraybuffer_is_detachable](#jerry_arraybuffer_is_detachable)
        -:12357:
        -:12358:## jerry_arraybuffer_has_buffer
        -:12359:
        -:12360:**Summary**
        -:12361:
        -:12362:Checks whether a buffer is currently allocated for an array buffer or typed array.
        -:12363:
        -:12364:*Notes*:
        -:12365:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -:12366:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -:12367:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -:12368:
        -:12369:**Prototype**
        -:12370:
        -:12371:```c
        -:12372:bool
        -:12373:jerry_arraybuffer_has_buffer (const jerry_value_t value);
        -:12374:```
        -:12375:
        -:12376:- `value` - array buffer or typed array value.
        -:12377:- return
        -:12378:  - true, if a buffer is allocated for an array buffer or typed array
        -:12379:  - false, otherwise
        -:12380:
        -:12381:*New in version [[NEXT_RELEASE]]*.
        -:12382:
        -:12383:**Example**
        -:12384:
        -:12385:[doctest]: # (test="compile")
        -:12386:
        -:12387:```c
        -:12388:#include "jerryscript.h"
        -:12389:
        -:12390:int
    #####:12391:main (void)
        -:12392:{
    #####:12393:  jerry_init (JERRY_INIT_EMPTY);
        -:12394:
    #####:12395:  jerry_value_t array_buffer_value = jerry_arraybuffer (1024 * 1024);
        -:12396:
        -:12397:  /* By default, the backing store of large array buffers
        -:12398:   * is allocated when it is used the first time. */
        -:12399:
    #####:12400:  if (!jerry_arraybuffer_has_buffer (array_buffer_value))
        -:12401:  {
        -:12402:    /* Code enters here in this case. */
        -:12403:  }
        -:12404:
    #####:12405:  jerry_value_free (array_buffer_value);
        -:12406:
    #####:12407:  jerry_cleanup ();
        -:12408:  return 0;
        -:12409:}
        -:12410:```
        -:12411:
        -:12412:**See also**
        -:12413:
        -:12414:- [jerry_arraybuffer_external](#jerry_arraybuffer_external)
        -:12415:- [jerry_shared_arraybuffer_external](#jerry_shared_arraybuffer_external)
        -:12416:- [jerry_arraybuffer_heap_allocation_limit](#jerry_arraybuffer_heap_allocation_limit)
        -:12417:- [jerry_arraybuffer_allocator](#jerry_arraybuffer_allocator)
        -:12418:
        -:12419:## jerry_arraybuffer_heap_allocation_limit
        -:12420:
        -:12421:**Summary**
        -:12422:
        -:12423:Array buffers which size is less or equal than the limit passed to this
        -:12424:function are allocated in a single memory block. The allocator callbacks set by
        -:12425:[jerry_arraybuffer_set_allocation_callbacks](#jerry_arraybuffer_set_allocation_callbacks)
        -:12426:are not called for these array buffers.
        -:12427:
        -:12428:*Notes*:
        -:12429:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -:12430:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -:12431:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -:12432:- The default limit is 256 bytes.
        -:12433:- When an array buffer is allocated in a single memory block, its
        -:12434:  backing store is not freed when the array buffer is detached.
        -:12435:- This limit does not affect shared array buffers, their backing store is always
        -:12436:  allocated by the allocator callback.
        -:12437:
        -:12438:**Prototype**
        -:12439:
        -:12440:```c
        -:12441:void
        -:12442:jerry_arraybuffer_heap_allocation_limit (const jerry_length_t allocation_limit);
        -:12443:```
        -:12444:
        -:12445:- `allocation_limit` - maximum size of compact allocation.
        -:12446:
        -:12447:*New in version [[NEXT_RELEASE]]*.
        -:12448:
        -:12449:**Example**
        -:12450:
        -:12451:[doctest]: # (test="compile")
        -:12452:
        -:12453:```c
        -:12454:#include "jerryscript.h"
        -:12455:
        -:12456:int
    #####:12457:main (void)
        -:12458:{
    #####:12459:  jerry_init (JERRY_INIT_EMPTY);
        -:12460:
    #####:12461:  jerry_arraybuffer_heap_allocation_limit (1);
        -:12462:
    #####:12463:  jerry_value_t array_buffer_value = jerry_arraybuffer (1);
        -:12464:
    #####:12465:  if (jerry_arraybuffer_has_buffer (array_buffer_value))
        -:12466:  {
        -:12467:    /* Code enters here because the backing store
        -:12468:     * is allocated during buffer creation. */
        -:12469:  }
        -:12470:
    #####:12471:  jerry_value_free (array_buffer_value);
        -:12472:
    #####:12473:  array_buffer_value = jerry_arraybuffer (2);
        -:12474:
    #####:12475:  if (jerry_arraybuffer_has_buffer (array_buffer_value))
        -:12476:  {
        -:12477:    /* Code does not enter here because the backing store
        -:12478:     * is allocated when it is used the first time. */
        -:12479:  }
        -:12480:
    #####:12481:  jerry_value_free (array_buffer_value);
        -:12482:
    #####:12483:  jerry_cleanup ();
        -:12484:  return 0;
        -:12485:}
        -:12486:```
        -:12487:
        -:12488:**See also**
        -:12489:
        -:12490:- [jerry_arraybuffer_has_buffer](#jerry_arraybuffer_has_buffer)
        -:12491:- [jerry_arraybuffer_allocator](#jerry_arraybuffer_allocator)
        -:12492:
        -:12493:## jerry_arraybuffer_allocator
        -:12494:
        -:12495:**Summary**
        -:12496:
        -:12497:Set callbacks for allocating and freeing backing stores for array buffer objects.
        -:12498:
        -:12499:*Notes*:
        -:12500:- This API depends on a build option (`JERRY_BUILTIN_TYPEDARRAY`) and can be checked
        -:12501:  in runtime with the `JERRY_FEATURE_TYPEDARRAY` feature enum value,
        -:12502:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -:12503:- This function is recommended to be called after [jerry_init](#jerry_init) before
        -:12504:  any array buffer is allocated.
        -:12505:- The callbacks can be NULL to use the default callbacks. The default `allocate_callback`
        -:12506:  allocates memory using [jerry_heap_alloc](#jerry_heap_alloc) and the default
        -:12507:  `free_callback` frees memory using [jerry_heap_free](#jerry_heap_free).
        -:12508:
        -:12509:
        -:12510:**Prototype**
        -:12511:
        -:12512:```c
        -:12513:void
        -:12514:jerry_arraybuffer_allocator (jerry_arraybuffer_allocate_cb_t allocate_callback,
        -:12515:                             jerry_arraybuffer_free_cb_t free_callback,
        -:12516:                             void *user_p)
        -:12517:```
        -:12518:
        -:12519:- `allocate_callback` - callback for allocating array buffer memory.
        -:12520:- `free_callback` - callback for freeing array buffer memory.
        -:12521:- `user_p` - user pointer passed to the callbacks.
        -:12522:
        -:12523:*New in version [[NEXT_RELEASE]]*.
        -:12524:
        -:12525:**Example**
        -:12526:
        -:12527:[doctest]: # (test="compile")
        -:12528:
        -:12529:```c
        -:12530:#include "jerryscript.h"
        -:12531:
        -:12532:static uint8_t global_buffer[64];
        -:12533:
        -:12534:static void
    #####:12535:array_buffer_free_cb (jerry_arraybuffer_type_t buffer_type, /**< type of the array buffer object */
        -:12536:                      uint8_t *buffer_p, /**< pointer to the allocated buffer */
        -:12537:                      uint32_t buffer_size, /**< size of the allocated buffer */
        -:12538:                      void *arraybuffer_user_p, /**< user pointer assigned to the array buffer object */
        -:12539:                      void *user_p) /**< user pointer passed to jerry_arraybuffer_set_allocation_callbacks */
        -:12540:{
        -:12541:  (void) buffer_type;
        -:12542:  (void) user_p;
        -:12543:
        -:12544:  /* As for this example, only the free callback is redirected. This callback
        -:12545:   * function does not free the memory if the arraybuffer_user_p is non-NULL. */
        -:12546:
    #####:12547:  if (arraybuffer_user_p == NULL)
        -:12548:  {
    #####:12549:    jerry_heap_free (buffer_p, buffer_size);
        -:12550:  }
    #####:12551:} /* array_buffer_free_cb */
        -:12552:
        -:12553:int
    #####:12554:main (void)
        -:12555:{
    #####:12556:  jerry_init (JERRY_INIT_EMPTY);
        -:12557:
    #####:12558:  jerry_arraybuffer_allocator (NULL, array_buffer_free_cb, NULL);
        -:12559:
        -:12560:  /* The buffer of the array buffer object is allocated by the default
        -:12561:   * allocator using jerry_heap_alloc and freed by array_buffer_free_cb. */
        -:12562:
    #####:12563:  const jerry_char_t script[] = "var result = new uint32Array(1024); result[0] = 1; result";
    #####:12564:  jerry_value_t array_buffer_value = jerry_eval (script, sizeof (script) - 1, JERRY_PARSE_NO_OPTS);
    #####:12565:  jerry_value_free (array_buffer_value);
        -:12566:
        -:12567:  /* The buffer of the array buffer object has a non-NULL
        -:12568:   * arraybuffer_user_p value, so it is not freed by array_buffer_free_cb. */
        -:12569:
    #####:12570:  array_buffer_value = jerry_arraybuffer_external (global_buffer, sizeof (global_buffer), global_buffer);
    #####:12571:  jerry_value_free (array_buffer_value);
        -:12572:
    #####:12573:  jerry_cleanup ();
        -:12574:  return 0;
        -:12575:}
        -:12576:```
        -:12577:
        -:12578:**See also**
        -:12579:
        -:12580:- [jerry_arraybuffer_has_buffer](#jerry_arraybuffer_has_buffer)
        -:12581:- [jerry_arraybuffer_allocator](#jerry_arraybuffer_allocator)
        -:12582:
        -:12583:## jerry_dataview_buffer
        -:12584:
        -:12585:**Summary**
        -:12586:
        -:12587:Get the ArrayBuffer object used by a DataView object.
        -:12588:Additionally returns the byteLength and byteOffset properties
        -:12589:of the DataView object.
        -:12590:
        -:12591:For the returned ArrayBuffer the [jerry_value_free](#jerry_value_free)
        -:12592:must be called when it is no longer needed.
        -:12593:
        -:12594:**Prototype**
        -:12595:
        -:12596:```c
        -:12597:jerry_value_t
        -:12598:jerry_dataview_buffer (const jerry_value_t value,
        -:12599:                       jerry_length_t *byteOffset,
        -:12600:                       jerry_length_t *byteLength);
        -:12601:```
        -:12602:
        -:12603:- `value` - DataView to get the ArrayBuffer from
        -:12604:- `byteOffset` - (Optional) returns the start offset of the ArrayBuffer for the DataView
        -:12605:- `byteLength` - (Optional) returns the number of bytes used from the ArrayBuffer for the DataView
        -:12606:- return
        -:12607:  - DataView object's underlying ArrayBuffer object
        -:12608:  - TypeError if the `value` is not a DataView object
        -:12609:
        -:12610:*New in version 2.0*.
        -:12611:
        -:12612:**Example**
        -:12613:
        -:12614:[doctest]: # ()
        -:12615:
        -:12616:```c
        -:12617:#include "jerryscript.h"
        -:12618:
        -:12619:int
    #####:12620:main (void)
        -:12621:{
    #####:12622:  jerry_init (JERRY_INIT_EMPTY);
        -:12623:
    #####:12624:  jerry_value_t arraybuffer = jerry_arraybuffer (16);
    #####:12625:  jerry_value_t dataview = jerry_dataview (arraybuffer, 0, 16);
    #####:12626:  jerry_length_t byteOffset = 0;
    #####:12627:  jerry_length_t byteLength = 0;
    #####:12628:  jerry_value_t buffer = jerry_dataview_buffer (dataview, &byteOffset, &byteLength);
        -:12629:
        -:12630:  // buffer is an ArrayBuffer object and ArrayBuffer operations can be performed on it
        -:12631:  // byteOffset is 0
        -:12632:  // byteLength is 16
        -:12633:
        -:12634:  // usage of buffer
        -:12635:
    #####:12636:  jerry_value_free (buffer);
    #####:12637:  jerry_value_free (dataview);
    #####:12638:  jerry_value_free (arraybuffer);
        -:12639:
    #####:12640:  jerry_cleanup ();
        -:12641:}
        -:12642:```
        -:12643:
        -:12644:**See also**
        -:12645:
        -:12646:- [jerry_dataview](#jerry_dataview)
        -:12647:
        -:12648:
        -:12649:## jerry_typedarray_type
        -:12650:
        -:12651:**Summary**
        -:12652:
        -:12653:Get the type of the TypedArray.
        -:12654:
        -:12655:The returned type is one of the [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -:12656:enum value.
        -:12657:
        -:12658:**Prototype**
        -:12659:
        -:12660:```c
        -:12661:jerry_typedarray_type_t
        -:12662:jerry_typedarray_type (jerry_value_t value);
        -:12663:```
        -:12664:
        -:12665:- `value` - TypedArray object to query for type.
        -:12666:- return
        -:12667:  - the type of the TypedArray
        -:12668:  - JERRY_TYPEDARRAY_INVALID if the object was not a TypedArray
        -:12669:
        -:12670:*New in version 2.0*.
        -:12671:
        -:12672:**Example**
        -:12673:
        -:12674:```c
        -:12675:{
        -:12676:  jerry_typedarray_type_t expected_type = JERRY_TYPEDARRAY_UINT32;
        -:12677:  jerry_value_t typedarray = jerry_typedarray (expected_class, 25);
        -:12678:
        -:12679:  jerry_typedarray_type_t type = jerry_typedarray_type (typedarray);
        -:12680:
        -:12681:  // 'type' is now JERRY_TYPEDARRAY_UINT32
        -:12682:
        -:12683:  jerry_value_free (typedarray);
        -:12684:}
        -:12685:```
        -:12686:
        -:12687:**See also**
        -:12688:
        -:12689:- [jerry_typedarray](#jerry_typedarray)
        -:12690:- [jerry_typedarray_type_t](#jerry_typedarray_type_t)
        -:12691:
        -:12692:
        -:12693:## jerry_typedarray_length
        -:12694:
        -:12695:**Summary**
        -:12696:
        -:12697:Get the element count of the TypedArray as specified during creation.
        -:12698:
        -:12699:This is not the same as the byteLength property of a TypedArray object.
        -:12700:
        -:12701:**Prototype**
        -:12702:
        -:12703:```
        -:12704:jerry_length_t
        -:12705:jerry_typedarray_length (jerry_value_t value);
        -:12706:```
        -:12707:
        -:12708:- `value` - TypedArray object to query
        -:12709:- return
        -:12710:  - length (element count) of the TypedArray object
        -:12711:  - 0 if the object is not a TypedArray
        -:12712:
        -:12713:*New in version 2.0*.
        -:12714:
        -:12715:**Example**
        -:12716:
        -:12717:```c
        -:12718:{
        -:12719:  jerry_value_t array = jerry_typedarray (JERRY_TYPEDARRAY_INT32, 21);
        -:12720:
        -:12721:  jerry_length_t element_count = jerry_typedarray_length (array);
        -:12722:
        -:12723:  // element_count is now 21.
        -:12724:
        -:12725:  jerry_value_free (array);
        -:12726:}
        -:12727:```
        -:12728:
        -:12729:**See also**
        -:12730:
        -:12731:- [jerry_typedarray](#jerry_typedarray)
        -:12732:
        -:12733:
        -:12734:## jerry_typedarray_buffer
        -:12735:
        -:12736:**Summary**
        -:12737:
        -:12738:Get the ArrayBuffer object used by a TypedArray object.
        -:12739:Additionally returns the byteLength and byteOffset properties
        -:12740:of the TypedArray object.
        -:12741:
        -:12742:For the returned ArrayBuffer the [jerry_value_free](#jerry_value_free)
        -:12743:must be called.
        -:12744:
        -:12745:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -:12746:is no longer needed.
        -:12747:
        -:12748:**Prototype**
        -:12749:
        -:12750:```c
        -:12751:jerry_value_t
        -:12752:jerry_typedarray_buffer (jerry_value_t value,
        -:12753:                         jerry_length_t *byteOffset,
        -:12754:                         jerry_length_t *byteLength);
        -:12755:```
        -:12756:
        -:12757:- `value` - TypedArray to get the ArrayBuffer from
        -:12758:- `byteOffset` - (Optional) returns the start offset of the ArrayBuffer for the TypedArray
        -:12759:- `byteLength` - (Optional) returns the number of bytes used from the ArrayBuffer for the TypedArray
        -:12760:- return
        -:12761:  - TypedArray object's underlying ArrayBuffer object
        -:12762:  - TypeError if the `value` is not a TypedArray object
        -:12763:
        -:12764:*New in version 2.0*.
        -:12765:
        -:12766:**Example**
        -:12767:
        -:12768:```c
        -:12769:{
        -:12770:  jerry_value_t array = jerry_typedarray (JERRY_TYPEDARRAY_INT16, 11);
        -:12771:
        -:12772:  jerry_length_t byteLength = 0;
        -:12773:  jerry_length_t byteOffset = 0;
        -:12774:  jerry_value_t buffer = jerry_typedarray_buffer (array, &byteOffset, &byteLength);
        -:12775:
        -:12776:  // buffer is an ArrayBuffer object and ArrayBuffer operations can be performed on it
        -:12777:  // byteLength is 11 * 2 (2 as the TypedArray stores Int16 that is 2 byte elements)
        -:12778:  // byteOffset is 0
        -:12779:
        -:12780:  jerry_value_free (buffer);
        -:12781:  jerry_value_free (array);
        -:12782:}
        -:12783:```
        -:12784:
        -:12785:**See also**
        -:12786:
        -:12787:- [jerry_typedarray](#jerry_typedarray)
        -:12788:
        -:12789:# JSON functions
        -:12790:
        -:12791:## jerry_json_parse
        -:12792:
        -:12793:**Summary**
        -:12794:
        -:12795:Parses a CESU-8 or UTF-8 encoded string as a JSON string, creating a JavaScript value. The behaviour is equivalent with
        -:12796:the "JSON.parse(string)" JS call.
        -:12797:
        -:12798:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -:12799:is no longer needed.
        -:12800:
        -:12801:**Prototype**
        -:12802:
        -:12803:```c
        -:12804:jerry_value_t
        -:12805:jerry_json_parse (const jerry_char_t *string_p,
        -:12806:                  jerry_size_t string_size);
        -:12807:```
        -:12808:
        -:12809:- `string_p` - pointer to a JSON string.
        -:12810:- `string_size` - size of the string.
        -:12811:- return
        -:12812:  - `jerry_value_t` containing a JavaScript value.
        -:12813:  - exception value in case of any parse error.
        -:12814:
        -:12815:*New in version 2.0*.
        -:12816:
        -:12817:**Example**
        -:12818:
        -:12819:[doctest]: # ()
        -:12820:
        -:12821:```c
        -:12822:#include "jerryscript.h"
        -:12823:
        -:12824:int
    #####:12825:main (void)
        -:12826:{
        -:12827:  /* Initialize engine */
    #####:12828:  jerry_init (JERRY_INIT_EMPTY);
        -:12829:
    #####:12830:  const jerry_char_t data[] = "{\"name\": \"John\", \"age\": 5}";
    #####:12831:  jerry_value_t obj = jerry_json_parse (data, sizeof (data) - 1);
        -:12832:
        -:12833:  /* "obj" now contains and object created from the "data" JSON string. */
        -:12834:
    #####:12835:  jerry_value_free (obj);
        -:12836:
        -:12837:  /* Cleanup engine */
    #####:12838:  jerry_cleanup ();
        -:12839:
        -:12840:  return 0;
        -:12841:}
        -:12842:```
        -:12843:
        -:12844:## jerry_json_stringify
        -:12845:
        -:12846:**Summary**
        -:12847:
        -:12848:Create a JSON string value from a JavaScript value. The behaviour is equivalent with
        -:12849:the "JSON.stringify(input_value)" JS call.
        -:12850:
        -:12851:*Note*: Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -:12852:is no longer needed.
        -:12853:
        -:12854:**Prototype**
        -:12855:
        -:12856:```c
        -:12857:jerry_value_t
        -:12858:jerry_json_stringify (const jerry_value_t input_value);
        -:12859:```
        -:12860:
        -:12861:- `input_value` - a `jerry_value_t` to stringify.
        -:12862:- return
        -:12863:  - `jerry_value_t` containing a JSON string.
        -:12864:  - exception value in case of any stringification error.
        -:12865:
        -:12866:*New in version 2.0*.
        -:12867:
        -:12868:**Example**
        -:12869:
        -:12870:[doctest]: # ()
        -:12871:
        -:12872:```c
        -:12873:#include "jerryscript.h"
        -:12874:
        -:12875:int
    #####:12876:main (void)
        -:12877:{
        -:12878:  /* Initialize engine */
    #####:12879:  jerry_init (JERRY_INIT_EMPTY);
        -:12880:
    #####:12881:  jerry_value_t obj = jerry_object ();
        -:12882:  {
    #####:12883:    jerry_value_t key = jerry_string_sz ("name");
    #####:12884:    jerry_value_t value = jerry_string_sz ("John");
    #####:12885:    jerry_value_free (jerry_object_set (obj, key, value));
    #####:12886:    jerry_value_free (key);
    #####:12887:    jerry_value_free (value);
        -:12888:  }
        -:12889:
    #####:12890:  jerry_value_t stringified = jerry_json_stringify (obj);
        -:12891:
        -:12892:  /* "stringified" now contains a JSON string */
        -:12893:
    #####:12894:  jerry_value_free (stringified);
    #####:12895:  jerry_value_free (obj);
        -:12896:
        -:12897:  /* Cleanup engine */
    #####:12898:  jerry_cleanup ();
        -:12899:
        -:12900:  return 0;
        -:12901:}
        -:12902:```
        -:12903:
        -:12904:# Container Functions
        -:12905:
        -:12906:## jerry_container_to_array
        -:12907:
        -:12908:**Summary**
        -:12909:
        -:12910:Return a new array containing elements from a Container, or a Container Iterator. Sets the is_key_value_p to true.
        -:12911:if the container object contains key-value structure and false if not.
        -:12912:
        -:12913:*Notes*
        -:12914:- The return value will be an empty array if the Map/Set or Iterator object was empty or finished.
        -:12915:- This API function depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -:12916:  runtime with the `JERRY_FEATURE_MAP, JERRY_FEATURE_SET, JERRY_FEATURE_WEAKMAP, JERRY_FEATURE_WEAKSET`
        -:12917:  feature enum values.
        -:12918:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -:12919:- The es.next profile enables this by default.
        -:12920:
        -:12921:*New in version [[NEXT_RELEASE]]*.
        -:12922:
        -:12923:**Prototype**
        -:12924:
        -:12925:```c
        -:12926:jerry_value_t
        -:12927:jerry_container_to_array(jerry_value_t value,
        -:12928:                         bool *is_key_value_p);
        -:12929:```
        -:12930:
        -:12931:- `value` - Map/Set or iterator object
        -:12932:- `is_key_value` - Will be set to `true` if the given container has key-value pairs, `false` otherwise.
        -:12933:- return value
        -:12934:  - jerry_value_t containing an array of values from the Map/Set or iterator object
        -:12935:  - exception if the `value` is nor a Container or a Container Iterator.
        -:12936:  - `undefined` if the `value` is undefined/null.
        -:12937:**Example**
        -:12938:
        -:12939:[doctest]: # ()
        -:12940:
        -:12941:```c
        -:12942:#include "jerryscript.h"
        -:12943:int
    #####:12944:main (void)
        -:12945:{
    #####:12946:  jerry_init (JERRY_INIT_EMPTY);
        -:12947:
    #####:12948:  jerry_char_t src[] = "var map = new Map(); map.set(1,2); map.entries()";
    #####:12949:  jerry_value_t iterable = jerry_eval (src, sizeof (src) - 1, JERRY_PARSE_NO_OPTS);
        -:12950:
    #####:12951:  bool is_key_value_container = false;
    #####:12952:  jerry_value_t buffer_from_map = jerry_container_to_array (iterable, &is_key_value_container);
        -:12953:
        -:12954:  /*
        -:12955:    The buffer_from_map contains two elements: 1 and 2, which is the key/value pair of the only item in the set.
        -:12956:    is_key_value set to true, as the original is a key-value structure (a Map Iterator)
        -:12957:  */
        -:12958:
    #####:12959:  jerry_value_free (iterable);
    #####:12960:  jerry_value_free (buffer_from_map);
        -:12961:
    #####:12962:  jerry_cleanup ();
        -:12963:
        -:12964:  return 0;
        -:12965:}
        -:12966:```
        -:12967:
        -:12968:**See also**
        -:12969:
        -:12970:- [jerry_container](#jerry_container)
        -:12971:- [jerry_container_type_t](#jerry_container_type_t)
        -:12972:
        -:12973:
        -:12974:## jerry_container_op
        -:12975:
        -:12976:**Summary**
        -:12977:
        -:12978:Perform container operation on the given operands (add, delete, set, etc.).
        -:12979:
        -:12980:*Note*:
        -:12981:- Returned value must be freed with [jerry_value_free](#jerry_value_free) when it
        -:12982:  is no longer needed.
        -:12983:- This API function depends on a build option (`JERRY_BUILTIN_CONTAINER`) and can be checked
        -:12984:  runtime with the `JERRY_FEATURE_MAP` , `JERRY_FEATURE_SET` , `JERRY_FEATURE_WEAKMAP` , `JERRY_FEATURE_WEAKSET`
        -:12985:  feature enum values.
        -:12986:  see: [jerry_feature_enabled](#jerry_feature_enabled).
        -:12987:- The es.next profile enables this by default.
        -:12988:
        -:12989:**Prototype**
        -:12990:
        -:12991:```c
        -:12992:jerry_value_t
        -:12993:jerry_container_op (jerry_container_op_t operation,
        -:12994:                    jerry_value_t container,
        -:12995:                    jerry_value_t *arguments,
        -:12996:                    uint32_t arguments_number)
        -:12997:```
        -:12998:
        -:12999: - `operation` - container operation
        -:13000: - `container` - this value
        -:13001: - `arguments` - array of arguments
        -:13002: - `arguments_number` - number of arguments
        -:13003: - result if the operation is successful
        -:13004: - exception, otherwise
        -:13005:
        -:13006:*New in version [[NEXT_RELEASE]]*.
        -:13007:
        -:13008:**Example**
        -:13009:
        -:13010:[doctest]: # ()
        -:13011:
        -:13012:```c
        -:13013:#include "jerryscript.h"
        -:13014:
        -:13015:int
    #####:13016:main (void)
        -:13017:{
    #####:13018:  jerry_init (JERRY_INIT_EMPTY);
        -:13019:
    #####:13020:  jerry_value_t map = jerry_container (JERRY_CONTAINER_TYPE_MAP, NULL, 0);
    #####:13021:  jerry_value_t key_str = jerry_string_sz ("number");
    #####:13022:  jerry_value_t number = jerry_number (10);
    #####:13023:  jerry_value_t args[2] = {key_str, number};
        -:13024:
    #####:13025:  jerry_value_t result = jerry_container_op (JERRY_CONTAINER_OP_SET, map, args, 2);
    #####:13026:  jerry_value_free (result);
        -:13027:
    #####:13028:  result = jerry_container_op (JERRY_CONTAINER_OP_SIZE, map, NULL, 0);
    #####:13029:  jerry_value_free (result);
        -:13030:
    #####:13031:  result = jerry_container_op (JERRY_CONTAINER_OP_CLEAR, map, NULL, 0);
    #####:13032:  jerry_value_free (result);
        -:13033:
    #####:13034:  jerry_value_free (map);
    #####:13035:  jerry_value_free (key_str);
    #####:13036:  jerry_value_free (number);
        -:13037:
    #####:13038:  jerry_cleanup ();
        -:13039:  return 0;
        -:13040:}
        -:13041:```
        -:13042:
        -:13043:**See also**
        -:13044:
        -:13045:- [jerry_container](#jerry_container)
        -:13046:- [jerry_container_type_t](#jerry_container_type_t)
