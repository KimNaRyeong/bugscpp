        -:    0:Source:/home/workspace/tests/unit-core/test-number-converter.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:// basic toUint32 tester method
        -:   21:static void
    #####:   22:test_to_uint32 (double input, uint32_t test_number)
        -:   23:{
    #####:   24:  jerry_value_t number_val = jerry_number (input);
    #####:   25:  uint32_t uint_number = jerry_value_as_uint32 (number_val);
    #####:   26:  TEST_ASSERT (uint_number == test_number);
    #####:   27:  jerry_value_free (number_val);
    #####:   28:} /* test_to_uint32 */
        -:   29:
        -:   30:// basic toInt32 tester method
        -:   31:static void
    #####:   32:test_to_int32 (double input, int32_t test_number)
        -:   33:{
    #####:   34:  jerry_value_t number_val = jerry_number (input);
    #####:   35:  int32_t int_number = jerry_value_as_int32 (number_val);
    #####:   36:  TEST_ASSERT (int_number == test_number);
    #####:   37:  jerry_value_free (number_val);
    #####:   38:} /* test_to_int32 */
        -:   39:
        -:   40:// basic toInteger tester method
        -:   41:static void
    #####:   42:test_to_interger (double input, double test_number)
        -:   43:{
    #####:   44:  jerry_value_t number_val = jerry_number (input);
    #####:   45:  double double_number = jerry_value_as_integer (number_val);
    #####:   46:  TEST_ASSERT (double_number == test_number);
    #####:   47:  jerry_value_free (number_val);
    #####:   48:} /* test_to_interger */
        -:   49:
        -:   50:int
    #####:   51:main (void)
        -:   52:{
    #####:   53:  TEST_INIT ();
        -:   54:
    #####:   55:  jerry_init (JERRY_INIT_EMPTY);
        -:   56:
        -:   57:  // few toUint32 test-cases
    #####:   58:  test_to_uint32 (1.0, 1);
    #####:   59:  test_to_uint32 (0.0, 0);
    #####:   60:  test_to_uint32 (NAN, 0);
    #####:   61:  test_to_uint32 (-NAN, 0);
    #####:   62:  test_to_uint32 (INFINITY, 0);
    #####:   63:  test_to_uint32 (-INFINITY, 0);
    #####:   64:  test_to_uint32 (0.1, 0);
    #####:   65:  test_to_uint32 (-0.1, 0);
    #####:   66:  test_to_uint32 (1.1, 1);
    #####:   67:  test_to_uint32 (-1.1, 4294967295);
    #####:   68:  test_to_uint32 (4294967295, 4294967295);
    #####:   69:  test_to_uint32 (-4294967295, 1);
    #####:   70:  test_to_uint32 (4294967296, 0);
    #####:   71:  test_to_uint32 (-4294967296, 0);
    #####:   72:  test_to_uint32 (4294967297, 1);
    #####:   73:  test_to_uint32 (-4294967297, 4294967295);
        -:   74:
        -:   75:  // few toint32 test-cases
    #####:   76:  test_to_int32 (1.0, 1);
    #####:   77:  test_to_int32 (0.0, 0);
    #####:   78:  test_to_int32 (NAN, 0);
    #####:   79:  test_to_int32 (-NAN, 0);
    #####:   80:  test_to_int32 (INFINITY, 0);
    #####:   81:  test_to_int32 (-INFINITY, 0);
    #####:   82:  test_to_int32 (0.1, 0);
    #####:   83:  test_to_int32 (-0.1, 0);
    #####:   84:  test_to_int32 (1.1, 1);
    #####:   85:  test_to_int32 (-1.1, -1);
    #####:   86:  test_to_int32 (4294967295, -1);
    #####:   87:  test_to_int32 (-4294967295, 1);
    #####:   88:  test_to_int32 (4294967296, 0);
    #####:   89:  test_to_int32 (-4294967296, 0);
    #####:   90:  test_to_int32 (4294967297, 1);
    #####:   91:  test_to_int32 (-4294967297, -1);
    #####:   92:  test_to_int32 (2147483648, -2147483648);
    #####:   93:  test_to_int32 (-2147483648, -2147483648);
    #####:   94:  test_to_int32 (2147483647, 2147483647);
    #####:   95:  test_to_int32 (-2147483647, -2147483647);
    #####:   96:  test_to_int32 (-2147483649, 2147483647);
    #####:   97:  test_to_int32 (2147483649, -2147483647);
        -:   98:
        -:   99:  // few toInteger test-cases
    #####:  100:  test_to_interger (1.0, 1.0);
    #####:  101:  test_to_interger (0.0, 0.0);
    #####:  102:  test_to_interger (NAN, 0);
    #####:  103:  test_to_interger (-NAN, 0);
    #####:  104:  test_to_interger (INFINITY, INFINITY);
    #####:  105:  test_to_interger (-INFINITY, -INFINITY);
    #####:  106:  test_to_interger (0.1, 0);
    #####:  107:  test_to_interger (-0.1, -0);
    #####:  108:  test_to_interger (1.1, 1);
    #####:  109:  test_to_interger (-1.1, -1);
    #####:  110:  test_to_interger (4294967295, 4294967295);
    #####:  111:  test_to_interger (-4294967295, -4294967295);
    #####:  112:  test_to_interger (4294967295, 4294967295);
    #####:  113:  test_to_interger (-4294967296, -4294967296);
    #####:  114:  test_to_interger (4294967297, 4294967297);
    #####:  115:  test_to_interger (-4294967297, -4294967297);
        -:  116:
        -:  117:  // few test-cases which return with error
    #####:  118:  jerry_value_t error_val = jerry_throw_sz (JERRY_ERROR_TYPE, "error");
    #####:  119:  double number = jerry_value_as_integer (error_val);
    #####:  120:  jerry_value_free (error_val);
    #####:  121:  TEST_ASSERT (number == 0);
        -:  122:
    #####:  123:  error_val = jerry_symbol_with_description (error_val);
    #####:  124:  number = jerry_value_as_integer (error_val);
    #####:  125:  TEST_ASSERT (number == 0);
    #####:  126:  jerry_value_free (error_val);
        -:  127:
    #####:  128:  error_val =
        -:  129:    jerry_eval ((const jerry_char_t *) "({ valueOf() { throw new TypeError('foo')}})", 44, JERRY_PARSE_NO_OPTS);
    #####:  130:  number = jerry_value_as_integer (error_val);
    #####:  131:  TEST_ASSERT (number == 0);
    #####:  132:  jerry_value_free (error_val);
        -:  133:
    #####:  134:  jerry_cleanup ();
        -:  135:  return 0;
        -:  136:} /* main */
