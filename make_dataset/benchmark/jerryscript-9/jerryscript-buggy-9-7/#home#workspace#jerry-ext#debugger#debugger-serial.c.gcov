        -:    0:Source:/home/workspace/jerry-ext/debugger/debugger-serial.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-debugger-transport.h"
        -:   17:
        -:   18:#include "jerryscript-ext/debugger.h"
        -:   19:#include "jext-common.h"
        -:   20:
        -:   21:#if (defined(JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1)) && !defined _WIN32
        -:   22:
        -:   23:#include <errno.h>
        -:   24:#include <fcntl.h>
        -:   25:#include <stdlib.h>
        -:   26:#include <termios.h>
        -:   27:#include <unistd.h>
        -:   28:
        -:   29:/* Max size of configuration string */
        -:   30:#define CONFIG_SIZE (255)
        -:   31:
        -:   32:/**
        -:   33: * Implementation of transport over serial connection.
        -:   34: */
        -:   35:typedef struct
        -:   36:{
        -:   37:  jerry_debugger_transport_header_t header; /**< transport header */
        -:   38:  int fd; /**< file descriptor */
        -:   39:} jerryx_debugger_transport_serial_t;
        -:   40:
        -:   41:/**
        -:   42: * Configure parameters for a serial port.
        -:   43: */
        -:   44:typedef struct
        -:   45:{
        -:   46:  char *device_id;
        -:   47:  uint32_t baud_rate; /**< specify the rate at which bits are transmitted for the serial interface */
        -:   48:  uint32_t data_bits; /**< specify the number of data bits to transmit over the serial interface */
        -:   49:  char parity; /**< specify how you want to check parity bits in the data bits transmitted via the serial port */
        -:   50:  uint32_t stop_bits; /**< specify the number of bits used to indicate the end of a byte. */
        -:   51:} jerryx_debugger_transport_serial_config_t;
        -:   52:
        -:   53:/**
        -:   54: * Correctly close a file descriptor.
        -:   55: */
        -:   56:static inline void
        -:   57:jerryx_debugger_serial_close_fd (int fd) /**< file descriptor to close */
        -:   58:{
        -:   59:  if (close (fd) != 0)
        -:   60:  {
        -:   61:    JERRYX_ERROR_MSG ("Error while closing the file descriptor: %d\n", errno);
        -:   62:  }
        -:   63:} /* jerryx_debugger_serial_close_fd */
        -:   64:
        -:   65:/**
        -:   66: * Set a file descriptor to blocking or non-blocking mode.
        -:   67: *
        -:   68: * @return true if everything is ok
        -:   69: *         false if there was an error
        -:   70: **/
        -:   71:static bool
        -:   72:jerryx_debugger_serial_set_blocking (int fd, bool blocking)
        -:   73:{
        -:   74:  /* Save the current flags */
        -:   75:  int flags = fcntl (fd, F_GETFL, 0);
        -:   76:  if (flags == -1)
        -:   77:  {
        -:   78:    JERRYX_ERROR_MSG ("Error %d during get flags from file descriptor\n", errno);
        -:   79:    return false;
        -:   80:  }
        -:   81:
        -:   82:  if (blocking)
        -:   83:  {
        -:   84:    flags &= ~O_NONBLOCK;
        -:   85:  }
        -:   86:  else
        -:   87:  {
        -:   88:    flags |= O_NONBLOCK;
        -:   89:  }
        -:   90:
        -:   91:  if (fcntl (fd, F_SETFL, flags) == -1)
        -:   92:  {
        -:   93:    JERRYX_ERROR_MSG ("Error %d during set flags from file descriptor\n", errno);
        -:   94:    return false;
        -:   95:  }
        -:   96:
        -:   97:  return true;
        -:   98:} /* jerryx_debugger_serial_set_blocking */
        -:   99:
        -:  100:/**
        -:  101: * Configure the file descriptor used by the serial communcation.
        -:  102: *
        -:  103: * @return true if everything is ok
        -:  104: *         false if there was an error
        -:  105: */
        -:  106:static inline bool
        -:  107:jerryx_debugger_serial_configure_attributes (int fd, jerryx_debugger_transport_serial_config_t serial_config)
        -:  108:{
        -:  109:  struct termios options;
        -:  110:  memset (&options, 0, sizeof (options));
        -:  111:
        -:  112:  /* Get the parameters associated with the file descriptor */
        -:  113:  if (tcgetattr (fd, &options) != 0)
        -:  114:  {
        -:  115:    JERRYX_ERROR_MSG ("Error %d from tggetattr\n", errno);
        -:  116:    return false;
        -:  117:  }
        -:  118:
        -:  119:  /* Set the input and output baud rates */
        -:  120:  cfsetispeed (&options, serial_config.baud_rate);
        -:  121:  cfsetospeed (&options, serial_config.baud_rate);
        -:  122:
        -:  123:  /* Set the control modes */
        -:  124:  options.c_cflag &= (uint32_t) ~CSIZE; // character size mask
        -:  125:  options.c_cflag |= (CLOCAL | CREAD); // ignore modem control lines and enable the receiver
        -:  126:
        -:  127:  switch (serial_config.data_bits)
        -:  128:  {
        -:  129:    case 5:
        -:  130:    {
        -:  131:      options.c_cflag |= CS5; // set character size mask to 5-bit chars
        -:  132:      break;
        -:  133:    }
        -:  134:    case 6:
        -:  135:    {
        -:  136:      options.c_cflag |= CS6; // set character size mask to 6-bit chars
        -:  137:      break;
        -:  138:    }
        -:  139:    case 7:
        -:  140:    {
        -:  141:      options.c_cflag |= CS7; // set character size mask to 7-bit chars
        -:  142:      break;
        -:  143:    }
        -:  144:    case 8:
        -:  145:    {
        -:  146:      options.c_cflag |= CS8; // set character size mask to 8-bit chars
        -:  147:      break;
        -:  148:    }
        -:  149:    default:
        -:  150:    {
        -:  151:      JERRYX_ERROR_MSG ("Unsupported data bits: %d\n", serial_config.data_bits);
        -:  152:      return false;
        -:  153:    }
        -:  154:  }
        -:  155:
        -:  156:  switch (serial_config.parity)
        -:  157:  {
        -:  158:    case 'N':
        -:  159:    {
        -:  160:      options.c_cflag &= (unsigned int) ~(PARENB | PARODD);
        -:  161:      break;
        -:  162:    }
        -:  163:    case 'O':
        -:  164:    {
        -:  165:      options.c_cflag |= PARENB;
        -:  166:      options.c_cflag |= PARODD;
        -:  167:      break;
        -:  168:    }
        -:  169:    case 'E':
        -:  170:    {
        -:  171:      options.c_cflag |= PARENB;
        -:  172:      options.c_cflag |= PARODD;
        -:  173:      break;
        -:  174:    }
        -:  175:    default:
        -:  176:    {
        -:  177:      JERRYX_ERROR_MSG ("Unsupported parity: %c\n", serial_config.parity);
        -:  178:      return false;
        -:  179:    }
        -:  180:  }
        -:  181:
        -:  182:  switch (serial_config.stop_bits)
        -:  183:  {
        -:  184:    case 1:
        -:  185:    {
        -:  186:      options.c_cflag &= (uint32_t) ~CSTOPB; // set 1 stop bits
        -:  187:      break;
        -:  188:    }
        -:  189:    case 2:
        -:  190:    {
        -:  191:      options.c_cflag |= CSTOPB; // set 2 stop bits
        -:  192:      break;
        -:  193:    }
        -:  194:    default:
        -:  195:    {
        -:  196:      JERRYX_ERROR_MSG ("Unsupported stop bits: %d\n", serial_config.stop_bits);
        -:  197:      return false;
        -:  198:    }
        -:  199:  }
        -:  200:
        -:  201:  /* Set the input modes */
        -:  202:  options.c_iflag &= (uint32_t) ~IGNBRK; // disable break processing
        -:  203:  options.c_iflag &= (uint32_t) ~(IXON | IXOFF | IXANY); // disable xon/xoff ctrl
        -:  204:
        -:  205:  /* Set the output modes: no remapping, no delays */
        -:  206:  options.c_oflag = 0;
        -:  207:
        -:  208:  /* Set the local modes: no signaling chars, no echo, no canoncial processing */
        -:  209:  options.c_lflag = 0;
        -:  210:
        -:  211:  /* Read returns when at least one byte of data is available. */
        -:  212:  options.c_cc[VMIN] = 1; // read block
        -:  213:  options.c_cc[VTIME] = 5; // 0.5 seconds read timeout
        -:  214:
        -:  215:  /* Set the parameters associated with the file descriptor */
        -:  216:  if (tcsetattr (fd, TCSANOW, &options) != 0)
        -:  217:  {
        -:  218:    JERRYX_ERROR_MSG ("Error %d from tcsetattr", errno);
        -:  219:    return false;
        -:  220:  }
        -:  221:
        -:  222:  /* Flushes both data received but not read, and data written but not transmitted */
        -:  223:  if (tcflush (fd, TCIOFLUSH) != 0)
        -:  224:  {
        -:  225:    JERRYX_ERROR_MSG ("Error %d in tcflush() :%s\n", errno, strerror (errno));
        -:  226:    jerryx_debugger_serial_close_fd (fd);
        -:  227:    return false;
        -:  228:  }
        -:  229:
        -:  230:  return true;
        -:  231:} /* jerryx_debugger_serial_configure_attributes */
        -:  232:
        -:  233:/**
        -:  234: * Close a serial connection.
        -:  235: */
        -:  236:static void
        -:  237:jerryx_debugger_serial_close (jerry_debugger_transport_header_t *header_p) /**< serial implementation */
        -:  238:{
        -:  239:  JERRYX_ASSERT (!jerry_debugger_transport_is_connected ());
        -:  240:
        -:  241:  jerryx_debugger_transport_serial_t *serial_p = (jerryx_debugger_transport_serial_t *) header_p;
        -:  242:
        -:  243:  JERRYX_DEBUG_MSG ("Serial connection closed.\n");
        -:  244:
        -:  245:  jerryx_debugger_serial_close_fd (serial_p->fd);
        -:  246:
        -:  247:  jerry_heap_free ((void *) header_p, sizeof (jerryx_debugger_transport_serial_t));
        -:  248:} /* jerryx_debugger_serial_close */
        -:  249:
        -:  250:/**
        -:  251: * Send data over a serial connection.
        -:  252: *
        -:  253: * @return true - if the data has been sent successfully
        -:  254: *         false - otherwise
        -:  255: */
        -:  256:static bool
        -:  257:jerryx_debugger_serial_send (jerry_debugger_transport_header_t *header_p, /**< serial implementation */
        -:  258:                             uint8_t *message_p, /**< message to be sent */
        -:  259:                             size_t message_length) /**< message length in bytes */
        -:  260:{
        -:  261:  JERRYX_ASSERT (jerry_debugger_transport_is_connected ());
        -:  262:
        -:  263:  jerryx_debugger_transport_serial_t *serial_p = (jerryx_debugger_transport_serial_t *) header_p;
        -:  264:
        -:  265:  do
        -:  266:  {
        -:  267:    ssize_t sent_bytes = write (serial_p->fd, message_p, message_length);
        -:  268:
        -:  269:    if (sent_bytes < 0)
        -:  270:    {
        -:  271:      if (errno == EWOULDBLOCK)
        -:  272:      {
        -:  273:        continue;
        -:  274:      }
        -:  275:
        -:  276:      JERRYX_ERROR_MSG ("Error: write to file descriptor: %d\n", errno);
        -:  277:      jerry_debugger_transport_close ();
        -:  278:      return false;
        -:  279:    }
        -:  280:
        -:  281:    message_p += sent_bytes;
        -:  282:    message_length -= (size_t) sent_bytes;
        -:  283:  } while (message_length > 0);
        -:  284:
        -:  285:  return true;
        -:  286:} /* jerryx_debugger_serial_send */
        -:  287:
        -:  288:/**
        -:  289: * Receive data from a serial connection.
        -:  290: */
        -:  291:static bool
        -:  292:jerryx_debugger_serial_receive (jerry_debugger_transport_header_t *header_p, /**< serial implementation */
        -:  293:                                jerry_debugger_transport_receive_context_t *receive_context_p) /**< receive context */
        -:  294:{
        -:  295:  jerryx_debugger_transport_serial_t *serial_p = (jerryx_debugger_transport_serial_t *) header_p;
        -:  296:
        -:  297:  uint8_t *buffer_p = receive_context_p->buffer_p + receive_context_p->received_length;
        -:  298:  size_t buffer_size = JERRY_DEBUGGER_TRANSPORT_MAX_BUFFER_SIZE - receive_context_p->received_length;
        -:  299:
        -:  300:  ssize_t length = read (serial_p->fd, buffer_p, buffer_size);
        -:  301:
        -:  302:  if (length <= 0)
        -:  303:  {
        -:  304:    if (errno != EWOULDBLOCK || length == 0)
        -:  305:    {
        -:  306:      jerry_debugger_transport_close ();
        -:  307:      return false;
        -:  308:    }
        -:  309:    length = 0;
        -:  310:  }
        -:  311:
        -:  312:  receive_context_p->received_length += (size_t) length;
        -:  313:
        -:  314:  if (receive_context_p->received_length > 0)
        -:  315:  {
        -:  316:    receive_context_p->message_p = receive_context_p->buffer_p;
        -:  317:    receive_context_p->message_length = receive_context_p->received_length;
        -:  318:  }
        -:  319:
        -:  320:  return true;
        -:  321:} /* jerryx_debugger_serial_receive */
        -:  322:
        -:  323:/**
        -:  324: * Create a serial connection.
        -:  325: *
        -:  326: * @return true if successful,
        -:  327: *         false otherwise
        -:  328: */
        -:  329:bool
        -:  330:jerryx_debugger_serial_create (const char *config) /**< specify the configuration */
        -:  331:{
        -:  332:  /* Parse the configuration string */
        -:  333:  char tmp_config[CONFIG_SIZE];
        -:  334:  strncpy (tmp_config, config, CONFIG_SIZE);
        -:  335:  jerryx_debugger_transport_serial_config_t serial_config;
        -:  336:
        -:  337:  char *token = strtok (tmp_config, ",");
        -:  338:  serial_config.device_id = token ? token : "/dev/ttyS0";
        -:  339:  serial_config.baud_rate = (token = strtok (NULL, ",")) ? (uint32_t) strtoul (token, NULL, 10) : 115200;
        -:  340:  serial_config.data_bits = (token = strtok (NULL, ",")) ? (uint32_t) strtoul (token, NULL, 10) : 8;
        -:  341:  serial_config.parity = (token = strtok (NULL, ",")) ? token[0] : 'N';
        -:  342:  serial_config.stop_bits = (token = strtok (NULL, ",")) ? (uint32_t) strtoul (token, NULL, 10) : 1;
        -:  343:
        -:  344:  int fd = open (serial_config.device_id, O_RDWR);
        -:  345:
        -:  346:  if (fd < 0)
        -:  347:  {
        -:  348:    JERRYX_ERROR_MSG ("Error %d opening %s: %s", errno, serial_config.device_id, strerror (errno));
        -:  349:    return false;
        -:  350:  }
        -:  351:
        -:  352:  if (!jerryx_debugger_serial_configure_attributes (fd, serial_config))
        -:  353:  {
        -:  354:    jerryx_debugger_serial_close_fd (fd);
        -:  355:    return false;
        -:  356:  }
        -:  357:
        -:  358:  JERRYX_DEBUG_MSG ("Waiting for client connection\n");
        -:  359:
        -:  360:  /* Client will sent a 'c' char to initiate the connection. */
        -:  361:  uint8_t conn_char;
        -:  362:  ssize_t t = read (fd, &conn_char, 1);
        -:  363:  if (t != 1 || conn_char != 'c' || !jerryx_debugger_serial_set_blocking (fd, false))
        -:  364:  {
        -:  365:    return false;
        -:  366:  }
        -:  367:
        -:  368:  JERRYX_DEBUG_MSG ("Client connected\n");
        -:  369:
        -:  370:  jerry_size_t size = sizeof (jerryx_debugger_transport_serial_t);
        -:  371:
        -:  372:  jerry_debugger_transport_header_t *header_p;
        -:  373:  header_p = (jerry_debugger_transport_header_t *) jerry_heap_alloc (size);
        -:  374:
        -:  375:  if (!header_p)
        -:  376:  {
        -:  377:    jerryx_debugger_serial_close_fd (fd);
        -:  378:    return false;
        -:  379:  }
        -:  380:
        -:  381:  header_p->close = jerryx_debugger_serial_close;
        -:  382:  header_p->send = jerryx_debugger_serial_send;
        -:  383:  header_p->receive = jerryx_debugger_serial_receive;
        -:  384:
        -:  385:  ((jerryx_debugger_transport_serial_t *) header_p)->fd = fd;
        -:  386:
        -:  387:  jerry_debugger_transport_add (header_p,
        -:  388:                                0,
        -:  389:                                JERRY_DEBUGGER_TRANSPORT_MAX_BUFFER_SIZE,
        -:  390:                                0,
        -:  391:                                JERRY_DEBUGGER_TRANSPORT_MAX_BUFFER_SIZE);
        -:  392:
        -:  393:  return true;
        -:  394:} /* jerryx_debugger_serial_create */
        -:  395:
        -:  396:#else /* !(defined (JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1)) || _WIN32 */
        -:  397:/**
        -:  398: * Dummy function when debugger is disabled.
        -:  399: *
        -:  400: * @return false
        -:  401: */
        -:  402:bool
    #####:  403:jerryx_debugger_serial_create (const char *config)
        -:  404:{
        -:  405:  JERRYX_UNUSED (config);
    #####:  406:  return false;
        -:  407:} /* jerryx_debugger_serial_create */
        -:  408:
        -:  409:#endif /* (defined (JERRY_DEBUGGER) && (JERRY_DEBUGGER == 1)) && !defined _WIN32 */
