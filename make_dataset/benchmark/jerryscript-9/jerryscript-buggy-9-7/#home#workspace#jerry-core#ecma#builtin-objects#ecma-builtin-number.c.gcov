        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-number.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <math.h>
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-bigint.h"
        -:   20:#include "ecma-builtins.h"
        -:   21:#include "ecma-conversion.h"
        -:   22:#include "ecma-exceptions.h"
        -:   23:#include "ecma-gc.h"
        -:   24:#include "ecma-globals.h"
        -:   25:#include "ecma-helpers-number.h"
        -:   26:#include "ecma-helpers.h"
        -:   27:#include "ecma-number-object.h"
        -:   28:#include "ecma-objects.h"
        -:   29:
        -:   30:#include "jrt.h"
        -:   31:
        -:   32:#if JERRY_BUILTIN_NUMBER
        -:   33:
        -:   34:#define ECMA_BUILTINS_INTERNAL
        -:   35:#include "ecma-builtins-internal.h"
        -:   36:
        -:   37:#if JERRY_ESNEXT
        -:   38:/**
        -:   39: * This object has a custom dispatch function.
        -:   40: */
        -:   41:#define BUILTIN_CUSTOM_DISPATCH
        -:   42:
        -:   43:/**
        -:   44: * List of built-in routine identifiers.
        -:   45: */
        -:   46:enum
        -:   47:{
        -:   48:  ECMA_NUMBER_OBJECT_ROUTINE_START = 0,
        -:   49:  ECMA_NUMBER_OBJECT_ROUTINE_IS_FINITE,
        -:   50:  ECMA_NUMBER_OBJECT_ROUTINE_IS_NAN,
        -:   51:  ECMA_NUMBER_OBJECT_ROUTINE_IS_INTEGER,
        -:   52:  ECMA_NUMBER_OBJECT_ROUTINE_IS_SAFE_INTEGER
        -:   53:};
        -:   54:#endif /* JERRY_ESNEXT */
        -:   55:
        -:   56:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-number.inc.h"
        -:   57:#define BUILTIN_UNDERSCORED_ID  number
        -:   58:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   59:
        -:   60:/** \addtogroup ecma ECMA
        -:   61: * @{
        -:   62: *
        -:   63: * \addtogroup ecmabuiltins
        -:   64: * @{
        -:   65: *
        -:   66: * \addtogroup number ECMA Number object built-in
        -:   67: * @{
        -:   68: */
        -:   69:
        -:   70:/**
        -:   71: * Handle calling [[Call]] of built-in Number object
        -:   72: *
        -:   73: * @return ecma value
        -:   74: */
        -:   75:ecma_value_t
    #####:   76:ecma_builtin_number_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   77:                                   uint32_t arguments_list_len) /**< number of arguments */
        -:   78:{
    #####:   79:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   80:
    #####:   81:  ecma_value_t ret_value = ECMA_VALUE_EMPTY;
        -:   82:
    #####:   83:  if (arguments_list_len == 0)
        -:   84:  {
    #####:   85:    ret_value = ecma_make_integer_value (0);
        -:   86:  }
        -:   87:  else
        -:   88:  {
    #####:   89:    ecma_number_t num;
    #####:   90:    ret_value = ecma_op_to_numeric (arguments_list_p[0], &num, ECMA_TO_NUMERIC_ALLOW_BIGINT);
        -:   91:
    #####:   92:    if (ECMA_IS_VALUE_ERROR (ret_value))
        -:   93:    {
    #####:   94:      return ret_value;
        -:   95:    }
        -:   96:
        -:   97:#if JERRY_BUILTIN_BIGINT
    #####:   98:    if (ecma_is_value_bigint (ret_value))
        -:   99:    {
    #####:  100:      ecma_value_t bigint = ret_value;
    #####:  101:      ret_value = ecma_bigint_to_number (bigint);
    #####:  102:      ecma_free_value (bigint);
        -:  103:    }
        -:  104:    else
        -:  105:#endif /* JERRY_BUILTIN_BIGINT */
        -:  106:    {
    #####:  107:      ret_value = ecma_make_number_value (num);
        -:  108:    }
        -:  109:  }
        -:  110:
    #####:  111:  return ret_value;
        -:  112:} /* ecma_builtin_number_dispatch_call */
        -:  113:
        -:  114:/**
        -:  115: * Handle calling [[Construct]] of built-in Number object
        -:  116: *
        -:  117: * @return ecma value
        -:  118: */
        -:  119:ecma_value_t
    #####:  120:ecma_builtin_number_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  121:                                        uint32_t arguments_list_len) /**< number of arguments */
        -:  122:{
    #####:  123:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  124:
    #####:  125:  if (arguments_list_len == 0)
        -:  126:  {
    #####:  127:    return ecma_op_create_number_object (ecma_make_integer_value (0));
        -:  128:  }
        -:  129:
        -:  130:#if JERRY_BUILTIN_BIGINT
    #####:  131:  ecma_number_t num;
    #####:  132:  ecma_value_t value = ecma_op_to_numeric (arguments_list_p[0], &num, ECMA_TO_NUMERIC_ALLOW_BIGINT);
        -:  133:
    #####:  134:  if (ECMA_IS_VALUE_ERROR (value))
        -:  135:  {
    #####:  136:    return value;
        -:  137:  }
        -:  138:
    #####:  139:  if (ecma_is_value_bigint (value))
        -:  140:  {
    #####:  141:    ecma_value_t bigint = value;
    #####:  142:    value = ecma_bigint_to_number (bigint);
    #####:  143:    ecma_free_value (bigint);
        -:  144:  }
        -:  145:  else
        -:  146:  {
    #####:  147:    value = ecma_make_number_value (num);
        -:  148:  }
        -:  149:
    #####:  150:  ecma_value_t result = ecma_op_create_number_object (value);
    #####:  151:  ecma_free_value (value);
    #####:  152:  return result;
        -:  153:#else /* !JERRY_BUILTIN_BIGINT */
    #####:  154:  return ecma_op_create_number_object (arguments_list_p[0]);
        -:  155:#endif /* JERRY_BUILTIN_BIGINT */
        -:  156:} /* ecma_builtin_number_dispatch_construct */
        -:  157:
        -:  158:#if JERRY_ESNEXT
        -:  159:/**
        -:  160: * The Number object 'isInteger' and 'isSafeInteger' routine
        -:  161: *
        -:  162: * See also:
        -:  163: *          ECMA-262 v6, 20.1.2.3
        -:  164: *          ECMA-262 v6, 20.1.2.3
        -:  165: *
        -:  166: * @return ecma value
        -:  167: *         Returned value must be freed with ecma_free_value.
        -:  168: */
        -:  169:static ecma_value_t
    #####:  170:ecma_builtin_number_object_is_integer_helper (ecma_value_t arg, /**< routine's argument */
        -:  171:                                              ecma_number_t num, /**< this number */
        -:  172:                                              bool is_safe) /**< is the number safe */
        -:  173:{
    #####:  174:  if (ecma_number_is_nan (num) || ecma_number_is_infinity (num))
        -:  175:  {
    #####:  176:    return ECMA_VALUE_FALSE;
        -:  177:  }
        -:  178:
    #####:  179:  ecma_number_t int_num;
        -:  180:
    #####:  181:  if (is_safe)
        -:  182:  {
    #####:  183:    int_num = ecma_number_trunc (num);
        -:  184:
    #####:  185:    if (fabs (int_num) > ECMA_NUMBER_MAX_SAFE_INTEGER)
        -:  186:    {
    #####:  187:      return ECMA_VALUE_FALSE;
        -:  188:    }
        -:  189:  }
        -:  190:  else
        -:  191:  {
    #####:  192:    ecma_op_to_integer (arg, &int_num);
        -:  193:  }
        -:  194:
    #####:  195:  return (int_num == num) ? ECMA_VALUE_TRUE : ECMA_VALUE_FALSE;
        -:  196:} /* ecma_builtin_number_object_is_integer_helper */
        -:  197:
        -:  198:/**
        -:  199: * Dispatcher of the built-in's routines
        -:  200: *
        -:  201: * @return ecma value
        -:  202: *         Returned value must be freed with ecma_free_value.
        -:  203: */
        -:  204:ecma_value_t
    #####:  205:ecma_builtin_number_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  206:                                      ecma_value_t this_arg, /**< 'this' argument value */
        -:  207:                                      const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  208:                                                                              *   passed to routine */
        -:  209:                                      uint32_t arguments_number) /**< length of arguments' list */
        -:  210:{
        -:  211:  JERRY_UNUSED_2 (this_arg, arguments_number);
        -:  212:
    #####:  213:  if (!ecma_is_value_number (arguments_list_p[0]))
        -:  214:  {
    #####:  215:    return ECMA_VALUE_FALSE;
        -:  216:  }
        -:  217:
    #####:  218:  ecma_number_t num = ecma_get_number_from_value (arguments_list_p[0]);
        -:  219:
    #####:  220:  switch (builtin_routine_id)
        -:  221:  {
    #####:  222:    case ECMA_NUMBER_OBJECT_ROUTINE_IS_FINITE:
        -:  223:    {
    #####:  224:      return ecma_make_boolean_value (!(ecma_number_is_nan (num) || ecma_number_is_infinity (num)));
        -:  225:    }
    #####:  226:    case ECMA_NUMBER_OBJECT_ROUTINE_IS_NAN:
        -:  227:    {
    #####:  228:      return ecma_make_boolean_value (ecma_number_is_nan (num));
        -:  229:    }
    #####:  230:    case ECMA_NUMBER_OBJECT_ROUTINE_IS_INTEGER:
        -:  231:    case ECMA_NUMBER_OBJECT_ROUTINE_IS_SAFE_INTEGER:
        -:  232:    {
    #####:  233:      bool is_safe = (builtin_routine_id == ECMA_NUMBER_OBJECT_ROUTINE_IS_SAFE_INTEGER);
    #####:  234:      return ecma_builtin_number_object_is_integer_helper (arguments_list_p[0], num, is_safe);
        -:  235:    }
    #####:  236:    default:
        -:  237:    {
    #####:  238:      JERRY_UNREACHABLE ();
        -:  239:    }
        -:  240:  }
        -:  241:} /* ecma_builtin_number_dispatch_routine */
        -:  242:
        -:  243:#endif /* JERRY_ESNEXT */
        -:  244:
        -:  245:/**
        -:  246: * @}
        -:  247: * @}
        -:  248: * @}
        -:  249: */
        -:  250:
        -:  251:#endif /* JERRY_BUILTIN_NUMBER */
