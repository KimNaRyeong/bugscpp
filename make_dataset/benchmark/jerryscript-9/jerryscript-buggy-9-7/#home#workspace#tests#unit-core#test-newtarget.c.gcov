        -:    0:Source:/home/workspace/tests/unit-core/test-newtarget.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-port-default.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:/**
        -:   23: * Register a JavaScript function in the global object.
        -:   24: */
        -:   25:static jerry_value_t
    #####:   26:register_js_function (const char *name_p, /**< name of the function */
        -:   27:                      jerry_external_handler_t handler_p) /**< function callback */
        -:   28:{
    #####:   29:  jerry_value_t global_obj_val = jerry_current_realm ();
        -:   30:
    #####:   31:  jerry_value_t function_val = jerry_function_external (handler_p);
    #####:   32:  jerry_value_t function_name_val = jerry_string_sz (name_p);
    #####:   33:  jerry_value_t result_val = jerry_object_set (global_obj_val, function_name_val, function_val);
        -:   34:
    #####:   35:  jerry_value_free (function_name_val);
    #####:   36:  jerry_value_free (global_obj_val);
        -:   37:
    #####:   38:  jerry_value_free (result_val);
        -:   39:
    #####:   40:  return function_val;
        -:   41:} /* register_js_function */
        -:   42:
        -:   43:enum
        -:   44:{
        -:   45:  TEST_ID_SIMPLE_CONSTRUCT = 1,
        -:   46:  TEST_ID_SIMPLE_CALL = 2,
        -:   47:  TEST_ID_CONSTRUCT_AND_CALL_SUB = 3,
        -:   48:};
        -:   49:
        -:   50:static jerry_value_t
    #####:   51:construct_handler (const jerry_call_info_t *call_info_p, /**< call information */
        -:   52:                   const jerry_value_t args_p[], /**< function arguments */
        -:   53:                   const jerry_length_t args_cnt) /**< number of function arguments */
        -:   54:{
        -:   55:  JERRY_UNUSED (args_p);
        -:   56:
    #####:   57:  if (args_cnt != 1 || !jerry_value_is_number (args_p[0]))
        -:   58:  {
    #####:   59:    TEST_ASSERT (0 && "Invalid arguments for demo method");
        -:   60:  }
        -:   61:
    #####:   62:  int test_id = (int) jerry_value_as_number (args_p[0]);
        -:   63:
    #####:   64:  switch (test_id)
        -:   65:  {
    #####:   66:    case TEST_ID_SIMPLE_CONSTRUCT:
        -:   67:    {
        -:   68:      /* Method was called with "new": new.target should be equal to the function object. */
    #####:   69:      jerry_value_t target = call_info_p->new_target;
    #####:   70:      TEST_ASSERT (!jerry_value_is_undefined (target));
    #####:   71:      TEST_ASSERT (target == call_info_p->function);
        -:   72:      break;
        -:   73:    }
    #####:   74:    case TEST_ID_SIMPLE_CALL:
        -:   75:    {
        -:   76:      /* Method was called directly without "new": new.target should be equal undefined. */
    #####:   77:      jerry_value_t target = call_info_p->new_target;
    #####:   78:      TEST_ASSERT (jerry_value_is_undefined (target));
    #####:   79:      TEST_ASSERT (target != call_info_p->function);
        -:   80:      break;
        -:   81:    }
    #####:   82:    case TEST_ID_CONSTRUCT_AND_CALL_SUB:
        -:   83:    {
        -:   84:      /* Method was called with "new": new.target should be equal to the function object. */
    #####:   85:      jerry_value_t target = call_info_p->new_target;
    #####:   86:      TEST_ASSERT (!jerry_value_is_undefined (target));
    #####:   87:      TEST_ASSERT (target == call_info_p->function);
        -:   88:
        -:   89:      /* Calling a function should hide the old "new.target". */
    #####:   90:      jerry_value_t sub_arg = jerry_number (TEST_ID_SIMPLE_CALL);
        -:   91:      jerry_value_t func_call_result;
        -:   92:
    #####:   93:      func_call_result = jerry_call (call_info_p->function, call_info_p->this_value, &sub_arg, 1);
    #####:   94:      TEST_ASSERT (!jerry_value_is_exception (func_call_result));
    #####:   95:      TEST_ASSERT (jerry_value_is_undefined (func_call_result));
        -:   96:      break;
        -:   97:    }
        -:   98:
        -:   99:    default:
        -:  100:    {
    #####:  101:      TEST_ASSERT (0 && "Incorrect test ID");
        -:  102:      break;
        -:  103:    }
        -:  104:  }
        -:  105:
    #####:  106:  return jerry_undefined ();
        -:  107:} /* construct_handler */
        -:  108:
        -:  109:int
    #####:  110:main (void)
        -:  111:{
        -:  112:  /* Test JERRY_FEATURE_SYMBOL feature as it is a must-have in ES.next */
    #####:  113:  if (!jerry_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:  114:  {
    #####:  115:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Skipping test, ES.next support is disabled.\n");
    #####:  116:    return 0;
        -:  117:  }
        -:  118:
    #####:  119:  jerry_init (JERRY_INIT_EMPTY);
        -:  120:
    #####:  121:  jerry_value_t demo_func = register_js_function ("Demo", construct_handler);
        -:  122:
        -:  123:  {
    #####:  124:    jerry_value_t test_arg = jerry_number (TEST_ID_SIMPLE_CONSTRUCT);
    #####:  125:    jerry_value_t constructed = jerry_construct (demo_func, &test_arg, 1);
    #####:  126:    TEST_ASSERT (!jerry_value_is_exception (constructed));
    #####:  127:    TEST_ASSERT (jerry_value_is_object (constructed));
    #####:  128:    jerry_value_free (test_arg);
    #####:  129:    jerry_value_free (constructed);
        -:  130:  }
        -:  131:
        -:  132:  {
    #####:  133:    jerry_value_t test_arg = jerry_number (TEST_ID_SIMPLE_CALL);
    #####:  134:    jerry_value_t this_arg = jerry_undefined ();
    #####:  135:    jerry_value_t constructed = jerry_call (demo_func, this_arg, &test_arg, 1);
    #####:  136:    TEST_ASSERT (jerry_value_is_undefined (constructed));
    #####:  137:    jerry_value_free (constructed);
    #####:  138:    jerry_value_free (constructed);
    #####:  139:    jerry_value_free (test_arg);
        -:  140:  }
        -:  141:
        -:  142:  {
    #####:  143:    jerry_value_t test_arg = jerry_number (TEST_ID_CONSTRUCT_AND_CALL_SUB);
    #####:  144:    jerry_value_t constructed = jerry_construct (demo_func, &test_arg, 1);
    #####:  145:    TEST_ASSERT (!jerry_value_is_exception (constructed));
    #####:  146:    TEST_ASSERT (jerry_value_is_object (constructed));
    #####:  147:    jerry_value_free (test_arg);
    #####:  148:    jerry_value_free (constructed);
        -:  149:  }
        -:  150:
        -:  151:  {
        -:  152:    static const jerry_char_t test_source[] = TEST_STRING_LITERAL ("new Demo (1)");
        -:  153:
    #####:  154:    jerry_value_t parsed_code_val = jerry_parse (test_source, sizeof (test_source) - 1, NULL);
    #####:  155:    TEST_ASSERT (!jerry_value_is_exception (parsed_code_val));
        -:  156:
    #####:  157:    jerry_value_t res = jerry_run (parsed_code_val);
    #####:  158:    TEST_ASSERT (!jerry_value_is_exception (res));
        -:  159:
    #####:  160:    jerry_value_free (res);
    #####:  161:    jerry_value_free (parsed_code_val);
        -:  162:  }
        -:  163:
        -:  164:  {
        -:  165:    static const jerry_char_t test_source[] = TEST_STRING_LITERAL ("Demo (2)");
        -:  166:
    #####:  167:    jerry_value_t parsed_code_val = jerry_parse (test_source, sizeof (test_source) - 1, NULL);
    #####:  168:    TEST_ASSERT (!jerry_value_is_exception (parsed_code_val));
        -:  169:
    #####:  170:    jerry_value_t res = jerry_run (parsed_code_val);
    #####:  171:    TEST_ASSERT (!jerry_value_is_exception (res));
        -:  172:
    #####:  173:    jerry_value_free (res);
    #####:  174:    jerry_value_free (parsed_code_val);
        -:  175:  }
        -:  176:
        -:  177:  {
        -:  178:    static const jerry_char_t test_source[] = TEST_STRING_LITERAL ("function base(arg) { new Demo (arg); };"
        -:  179:                                                                   "base (1);"
        -:  180:                                                                   "new base(1);"
        -:  181:                                                                   "new base(3);");
        -:  182:
    #####:  183:    jerry_value_t parsed_code_val = jerry_parse (test_source, sizeof (test_source) - 1, NULL);
    #####:  184:    TEST_ASSERT (!jerry_value_is_exception (parsed_code_val));
        -:  185:
    #####:  186:    jerry_value_t res = jerry_run (parsed_code_val);
    #####:  187:    TEST_ASSERT (!jerry_value_is_exception (res));
        -:  188:
    #####:  189:    jerry_value_free (res);
    #####:  190:    jerry_value_free (parsed_code_val);
        -:  191:  }
        -:  192:
    #####:  193:  jerry_value_free (demo_func);
    #####:  194:  jerry_cleanup ();
    #####:  195:  return 0;
        -:  196:} /* main */
