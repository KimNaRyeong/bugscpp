        -:    0:Source:/home/workspace/tests/unit-core/test-api-value-type.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-port-default.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:typedef struct
        -:   23:{
        -:   24:  jerry_type_t type_info;
        -:   25:  jerry_value_t value;
        -:   26:} test_entry_t;
        -:   27:
        -:   28:#define ENTRY(TYPE, VALUE) \
        -:   29:  {                        \
        -:   30:    TYPE, VALUE            \
        -:   31:  }
        -:   32:
        -:   33:static jerry_value_t
    #####:   34:test_ext_function (const jerry_call_info_t *call_info_p, /**< call information */
        -:   35:                   const jerry_value_t args_p[], /**< array of arguments */
        -:   36:                   const jerry_length_t args_cnt) /**< number of arguments */
        -:   37:{
        -:   38:  (void) call_info_p;
        -:   39:  (void) args_p;
        -:   40:  (void) args_cnt;
    #####:   41:  return jerry_boolean (true);
        -:   42:} /* test_ext_function */
        -:   43:
        -:   44:int
    #####:   45:main (void)
        -:   46:{
    #####:   47:  TEST_INIT ();
        -:   48:
    #####:   49:  jerry_init (JERRY_INIT_EMPTY);
        -:   50:
    #####:   51:  const char test_eval_function[] = "function demo(a) { return a + 1; }; demo";
        -:   52:
    #####:   53:  test_entry_t entries[] = {
    #####:   54:    ENTRY (JERRY_TYPE_NUMBER, jerry_number (-33.0)),
    #####:   55:    ENTRY (JERRY_TYPE_NUMBER, jerry_number (3)),
    #####:   56:    ENTRY (JERRY_TYPE_NUMBER, jerry_nan ()),
    #####:   57:    ENTRY (JERRY_TYPE_NUMBER, jerry_infinity (false)),
    #####:   58:    ENTRY (JERRY_TYPE_NUMBER, jerry_infinity (true)),
        -:   59:
    #####:   60:    ENTRY (JERRY_TYPE_BOOLEAN, jerry_boolean (true)),
    #####:   61:    ENTRY (JERRY_TYPE_BOOLEAN, jerry_boolean (false)),
        -:   62:
    #####:   63:    ENTRY (JERRY_TYPE_UNDEFINED, jerry_undefined ()),
        -:   64:
    #####:   65:    ENTRY (JERRY_TYPE_OBJECT, jerry_object ()),
    #####:   66:    ENTRY (JERRY_TYPE_OBJECT, jerry_array (10)),
    #####:   67:    ENTRY (JERRY_TYPE_EXCEPTION, jerry_throw_sz (JERRY_ERROR_TYPE, "error")),
        -:   68:
    #####:   69:    ENTRY (JERRY_TYPE_NULL, jerry_null ()),
        -:   70:
    #####:   71:    ENTRY (JERRY_TYPE_FUNCTION,
        -:   72:           jerry_eval ((jerry_char_t *) test_eval_function, sizeof (test_eval_function) - 1, JERRY_PARSE_NO_OPTS)),
    #####:   73:    ENTRY (JERRY_TYPE_FUNCTION, jerry_function_external (test_ext_function)),
        -:   74:
    #####:   75:    ENTRY (JERRY_TYPE_STRING, jerry_string_sz (test_eval_function)),
    #####:   76:    ENTRY (JERRY_TYPE_STRING, jerry_string_sz ("")),
        -:   77:  };
        -:   78:
    #####:   79:  for (size_t idx = 0; idx < sizeof (entries) / sizeof (entries[0]); idx++)
        -:   80:  {
    #####:   81:    jerry_type_t type_info = jerry_value_type (entries[idx].value);
        -:   82:
    #####:   83:    TEST_ASSERT (type_info != JERRY_TYPE_NONE);
    #####:   84:    TEST_ASSERT (type_info == entries[idx].type_info);
        -:   85:
    #####:   86:    jerry_value_free (entries[idx].value);
        -:   87:  }
        -:   88:
    #####:   89:  if (jerry_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:   90:  {
    #####:   91:    jerry_value_t symbol_desc_value = jerry_string_sz ("foo");
    #####:   92:    jerry_value_t symbol_value = jerry_symbol_with_description (symbol_desc_value);
    #####:   93:    jerry_type_t type_info = jerry_value_type (symbol_value);
        -:   94:
    #####:   95:    TEST_ASSERT (type_info != JERRY_TYPE_NONE);
    #####:   96:    TEST_ASSERT (type_info == JERRY_TYPE_SYMBOL);
        -:   97:
    #####:   98:    jerry_value_free (symbol_value);
    #####:   99:    jerry_value_free (symbol_desc_value);
        -:  100:  }
        -:  101:
    #####:  102:  if (jerry_feature_enabled (JERRY_FEATURE_BIGINT))
        -:  103:  {
        -:  104:    /* Check simple bigint value type */
    #####:  105:    uint64_t digits_buffer[2] = { 1, 0 };
    #####:  106:    jerry_value_t value_bigint = jerry_bigint (digits_buffer, 2, false);
    #####:  107:    jerry_type_t value_type_info = jerry_value_type (value_bigint);
        -:  108:
    #####:  109:    TEST_ASSERT (value_type_info != JERRY_TYPE_NONE);
    #####:  110:    TEST_ASSERT (value_type_info == JERRY_TYPE_BIGINT);
        -:  111:
    #####:  112:    jerry_value_free (value_bigint);
        -:  113:
        -:  114:    /* Check bigint wrapped in object type */
    #####:  115:    jerry_char_t object_bigint_src[] = "Object(5n)";
    #####:  116:    jerry_value_t object_bigint = jerry_eval (object_bigint_src, sizeof (object_bigint_src) - 1, JERRY_PARSE_NO_OPTS);
    #####:  117:    TEST_ASSERT (!jerry_value_is_exception (object_bigint));
        -:  118:
    #####:  119:    jerry_type_t object_type_info = jerry_value_type (object_bigint);
        -:  120:
    #####:  121:    TEST_ASSERT (object_type_info != JERRY_TYPE_NONE);
    #####:  122:    TEST_ASSERT (object_type_info == JERRY_TYPE_OBJECT);
        -:  123:
    #####:  124:    jerry_value_free (object_bigint);
        -:  125:  }
        -:  126:
    #####:  127:  if (jerry_feature_enabled (JERRY_FEATURE_REALM))
        -:  128:  {
    #####:  129:    jerry_value_t new_realm = jerry_realm ();
    #####:  130:    jerry_value_t old_realm = jerry_set_realm (new_realm);
        -:  131:
    #####:  132:    jerry_type_t new_realm_type = jerry_value_type (new_realm);
    #####:  133:    TEST_ASSERT (new_realm_type == JERRY_TYPE_OBJECT);
        -:  134:
    #####:  135:    jerry_value_t new_realm_this = jerry_realm_this (new_realm);
    #####:  136:    jerry_type_t new_realm_this_type = jerry_value_type (new_realm_this);
    #####:  137:    TEST_ASSERT (new_realm_this_type == JERRY_TYPE_OBJECT);
    #####:  138:    jerry_value_free (new_realm_this);
        -:  139:
    #####:  140:    jerry_type_t old_realm_type = jerry_value_type (old_realm);
    #####:  141:    TEST_ASSERT (old_realm_type == JERRY_TYPE_OBJECT);
        -:  142:
    #####:  143:    jerry_value_free (new_realm);
        -:  144:
    #####:  145:    jerry_value_t old_realm_this = jerry_realm_this (old_realm);
    #####:  146:    jerry_type_t old_realm_this_type = jerry_value_type (old_realm_this);
    #####:  147:    TEST_ASSERT (old_realm_this_type == JERRY_TYPE_OBJECT);
    #####:  148:    jerry_value_free (old_realm_this);
        -:  149:
        -:  150:    /* Restore the old realm as per docs */
    #####:  151:    jerry_set_realm (old_realm);
        -:  152:  }
        -:  153:
    #####:  154:  jerry_cleanup ();
        -:  155:
        -:  156:  return 0;
        -:  157:} /* main */
