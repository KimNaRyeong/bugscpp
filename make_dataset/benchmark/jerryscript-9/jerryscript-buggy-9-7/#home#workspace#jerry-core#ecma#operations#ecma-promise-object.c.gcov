        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-promise-object.c
        -:    0:Programs:297
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-promise-object.h"
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-array-object.h"
        -:   20:#include "ecma-boolean-object.h"
        -:   21:#include "ecma-builtin-handlers.h"
        -:   22:#include "ecma-builtins.h"
        -:   23:#include "ecma-exceptions.h"
        -:   24:#include "ecma-function-object.h"
        -:   25:#include "ecma-gc.h"
        -:   26:#include "ecma-globals.h"
        -:   27:#include "ecma-helpers.h"
        -:   28:#include "ecma-jobqueue.h"
        -:   29:#include "ecma-objects-general.h"
        -:   30:#include "ecma-objects.h"
        -:   31:
        -:   32:#include "jcontext.h"
        -:   33:
        -:   34:#if JERRY_ESNEXT
        -:   35:
        -:   36:/** \addtogroup ecma ECMA
        -:   37: * @{
        -:   38: *
        -:   39: * \addtogroup ecmapromiseobject ECMA Promise object related routines
        -:   40: * @{
        -:   41: */
        -:   42:
        -:   43:/**
        -:   44: * Check if an object is promise.
        -:   45: *
        -:   46: * @return true - if the object is a promise.
        -:   47: *         false - otherwise.
        -:   48: */
        -:   49:extern inline bool JERRY_ATTR_ALWAYS_INLINE
    #####:   50:ecma_is_promise (ecma_object_t *obj_p) /**< points to object */
        -:   51:{
    #####:   52:  return ecma_object_class_is (obj_p, ECMA_OBJECT_CLASS_PROMISE);
        -:   53:} /* ecma_is_promise */
        -:   54:
        -:   55:/**
        -:   56: * Get the result of the promise.
        -:   57: *
        -:   58: * @return ecma value of the promise result.
        -:   59: *         Returned value must be freed with ecma_free_value
        -:   60: */
        -:   61:ecma_value_t
    #####:   62:ecma_promise_get_result (ecma_object_t *obj_p) /**< points to promise object */
        -:   63:{
    #####:   64:  JERRY_ASSERT (ecma_is_promise (obj_p));
        -:   65:
    #####:   66:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:   67:
    #####:   68:  return ecma_copy_value (ext_object_p->u.cls.u3.value);
        -:   69:} /* ecma_promise_get_result */
        -:   70:
        -:   71:/**
        -:   72: * Set the PromiseResult of promise.
        -:   73: */
        -:   74:static inline void JERRY_ATTR_ALWAYS_INLINE
        -:   75:ecma_promise_set_result (ecma_object_t *obj_p, /**< points to promise object */
        -:   76:                         ecma_value_t result) /**< the result value */
        -:   77:{
    #####:   78:  JERRY_ASSERT (ecma_is_promise (obj_p));
        -:   79:
    #####:   80:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;
        -:   81:
    #####:   82:  JERRY_ASSERT (ext_object_p->u.cls.u3.value == ECMA_VALUE_UNDEFINED);
        -:   83:
    #####:   84:  ext_object_p->u.cls.u3.value = result;
        -:   85:} /* ecma_promise_set_result */
        -:   86:
        -:   87:/**
        -:   88: * Get the PromiseState of promise.
        -:   89: *
        -:   90: * @return the state's enum value
        -:   91: */
        -:   92:uint8_t
    #####:   93:ecma_promise_get_flags (ecma_object_t *obj_p) /**< points to promise object */
        -:   94:{
    #####:   95:  JERRY_ASSERT (ecma_is_promise (obj_p));
        -:   96:
    #####:   97:  return ((ecma_extended_object_t *) obj_p)->u.cls.u1.promise_flags;
        -:   98:} /* ecma_promise_get_flags */
        -:   99:
        -:  100:/**
        -:  101: * Set the PromiseState of promise.
        -:  102: */
        -:  103:static inline void JERRY_ATTR_ALWAYS_INLINE
        -:  104:ecma_promise_set_state (ecma_object_t *obj_p, /**< points to promise object */
        -:  105:                        bool is_fulfilled) /**< new flags */
        -:  106:{
    #####:  107:  JERRY_ASSERT (ecma_is_promise (obj_p));
    #####:  108:  JERRY_ASSERT (ecma_promise_get_flags (obj_p) & ECMA_PROMISE_IS_PENDING);
        -:  109:
    #####:  110:  uint8_t flags_to_invert =
        -:  111:    (is_fulfilled ? (ECMA_PROMISE_IS_PENDING | ECMA_PROMISE_IS_FULFILLED) : ECMA_PROMISE_IS_PENDING);
        -:  112:
    #####:  113:  ((ecma_extended_object_t *) obj_p)->u.cls.u1.promise_flags ^= flags_to_invert;
        -:  114:} /* ecma_promise_set_state */
        -:  115:
        -:  116:/**
        -:  117: * Take a collection of Reactions and enqueue a new PromiseReactionJob for each Reaction.
        -:  118: *
        -:  119: * See also: ES2015 25.4.1.8
        -:  120: */
        -:  121:static void
    #####:  122:ecma_promise_trigger_reactions (ecma_collection_t *reactions, /**< lists of reactions */
        -:  123:                                ecma_value_t value, /**< value for resolve or reject */
        -:  124:                                bool is_reject) /**< true if promise is rejected, false otherwise */
        -:  125:{
    #####:  126:  ecma_value_t *buffer_p = reactions->buffer_p;
    #####:  127:  ecma_value_t *buffer_end_p = buffer_p + reactions->item_count;
        -:  128:
    #####:  129:  while (buffer_p < buffer_end_p)
        -:  130:  {
    #####:  131:    ecma_value_t object_with_tag = *buffer_p++;
    #####:  132:    ecma_object_t *object_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t, object_with_tag);
    #####:  133:    ecma_value_t object = ecma_make_object_value (object_p);
        -:  134:
    #####:  135:    if (JMEM_CP_GET_THIRD_BIT_FROM_POINTER_TAG (object_with_tag))
        -:  136:    {
    #####:  137:      ecma_enqueue_promise_async_reaction_job (object, value, is_reject);
    #####:  138:      continue;
        -:  139:    }
        -:  140:
    #####:  141:    if (!is_reject)
        -:  142:    {
    #####:  143:      ecma_value_t handler = ECMA_VALUE_TRUE;
        -:  144:
    #####:  145:      if (JMEM_CP_GET_FIRST_BIT_FROM_POINTER_TAG (object_with_tag))
        -:  146:      {
    #####:  147:        handler = *buffer_p++;
        -:  148:      }
        -:  149:
    #####:  150:      ecma_enqueue_promise_reaction_job (object, handler, value);
        -:  151:    }
    #####:  152:    else if (JMEM_CP_GET_FIRST_BIT_FROM_POINTER_TAG (object_with_tag))
        -:  153:    {
    #####:  154:      buffer_p++;
        -:  155:    }
        -:  156:
    #####:  157:    if (is_reject)
        -:  158:    {
    #####:  159:      ecma_value_t handler = ECMA_VALUE_FALSE;
        -:  160:
    #####:  161:      if (JMEM_CP_GET_SECOND_BIT_FROM_POINTER_TAG (object_with_tag))
        -:  162:      {
    #####:  163:        handler = *buffer_p++;
        -:  164:      }
        -:  165:
    #####:  166:      ecma_enqueue_promise_reaction_job (object, handler, value);
        -:  167:    }
    #####:  168:    else if (JMEM_CP_GET_SECOND_BIT_FROM_POINTER_TAG (object_with_tag))
        -:  169:    {
    #####:  170:      buffer_p++;
        -:  171:    }
        -:  172:  }
    #####:  173:} /* ecma_promise_trigger_reactions */
        -:  174:
        -:  175:/**
        -:  176: * Checks whether a resolver is called before.
        -:  177: *
        -:  178: * @return true if it was called before, false otherwise
        -:  179: */
        -:  180:static inline bool JERRY_ATTR_ALWAYS_INLINE
        -:  181:ecma_is_resolver_already_called (ecma_object_t *promise_obj_p) /**< promise */
        -:  182:{
    #####:  183:  return (ecma_promise_get_flags (promise_obj_p) & ECMA_PROMISE_ALREADY_RESOLVED) != 0;
        -:  184:} /* ecma_is_resolver_already_called */
        -:  185:
        -:  186:/**
        -:  187: * Reject a Promise with a reason.
        -:  188: *
        -:  189: * See also: ES2015 25.4.1.7
        -:  190: */
        -:  191:void
    #####:  192:ecma_reject_promise (ecma_value_t promise, /**< promise */
        -:  193:                     ecma_value_t reason) /**< reason for reject */
        -:  194:{
    #####:  195:  ecma_object_t *obj_p = ecma_get_object_from_value (promise);
        -:  196:
    #####:  197:  JERRY_ASSERT (ecma_promise_get_flags (obj_p) & ECMA_PROMISE_IS_PENDING);
        -:  198:
        -:  199:#if JERRY_PROMISE_CALLBACK
    #####:  200:  if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_REJECT))
        -:  201:  {
        -:  202:    JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####:  203:    JERRY_CONTEXT (promise_callback)
        -:  204:    (JERRY_PROMISE_EVENT_REJECT, promise, reason, JERRY_CONTEXT (promise_callback_user_p));
        -:  205:  }
        -:  206:#endif /* JERRY_PROMISE_CALLBACK */
        -:  207:
    #####:  208:  ecma_promise_set_state (obj_p, false);
    #####:  209:  ecma_promise_set_result (obj_p, ecma_copy_value_if_not_object (reason));
    #####:  210:  ecma_promise_object_t *promise_p = (ecma_promise_object_t *) obj_p;
        -:  211:
        -:  212:  /* GC can be triggered by ecma_new_collection so freeing the collection
        -:  213:     first and creating a new one might cause a heap after use event. */
    #####:  214:  ecma_collection_t *reactions = promise_p->reactions;
        -:  215:
        -:  216:  /* Fulfill reactions will never be triggered. */
    #####:  217:  ecma_promise_trigger_reactions (reactions, reason, true);
        -:  218:
        -:  219:#if JERRY_PROMISE_CALLBACK
    #####:  220:  if (reactions->item_count == 0)
        -:  221:  {
    #####:  222:    ((ecma_extended_object_t *) obj_p)->u.cls.u1.promise_flags |= ECMA_PROMISE_UNHANDLED_REJECT;
        -:  223:
    #####:  224:    if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_ERROR))
        -:  225:    {
        -:  226:      JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####:  227:      JERRY_CONTEXT (promise_callback)
        -:  228:      (JERRY_PROMISE_EVENT_REJECT_WITHOUT_HANDLER, promise, reason, JERRY_CONTEXT (promise_callback_user_p));
        -:  229:    }
        -:  230:  }
        -:  231:#endif /* JERRY_PROMISE_CALLBACK */
        -:  232:
    #####:  233:  promise_p->reactions = ecma_new_collection ();
        -:  234:
    #####:  235:  ecma_collection_destroy (reactions);
    #####:  236:} /* ecma_reject_promise */
        -:  237:
        -:  238:/**
        -:  239: * Fulfill a Promise with a value.
        -:  240: *
        -:  241: * See also: ES2015 25.4.1.4
        -:  242: */
        -:  243:void
    #####:  244:ecma_fulfill_promise (ecma_value_t promise, /**< promise */
        -:  245:                      ecma_value_t value) /**< fulfilled value */
        -:  246:{
    #####:  247:  ecma_object_t *obj_p = ecma_get_object_from_value (promise);
        -:  248:
    #####:  249:  JERRY_ASSERT (ecma_promise_get_flags (obj_p) & ECMA_PROMISE_IS_PENDING);
        -:  250:
    #####:  251:  if (promise == value)
        -:  252:  {
    #####:  253:    ecma_raise_type_error (ECMA_ERR_PROMISE_RESOLVE_ITSELF);
    #####:  254:    ecma_value_t exception = jcontext_take_exception ();
    #####:  255:    ecma_reject_promise (promise, exception);
    #####:  256:    ecma_free_value (exception);
    #####:  257:    return;
        -:  258:  }
        -:  259:
    #####:  260:  if (ecma_is_value_object (value))
        -:  261:  {
    #####:  262:    ecma_value_t then = ecma_op_object_get_by_magic_id (ecma_get_object_from_value (value), LIT_MAGIC_STRING_THEN);
        -:  263:
    #####:  264:    if (ECMA_IS_VALUE_ERROR (then))
        -:  265:    {
    #####:  266:      then = jcontext_take_exception ();
    #####:  267:      ecma_reject_promise (promise, then);
    #####:  268:      ecma_free_value (then);
    #####:  269:      return;
        -:  270:    }
        -:  271:
    #####:  272:    if (ecma_op_is_callable (then))
        -:  273:    {
    #####:  274:      ecma_enqueue_promise_resolve_thenable_job (promise, value, then);
    #####:  275:      ecma_free_value (then);
    #####:  276:      return;
        -:  277:    }
        -:  278:
    #####:  279:    ecma_free_value (then);
        -:  280:  }
        -:  281:
        -:  282:#if JERRY_PROMISE_CALLBACK
    #####:  283:  if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_RESOLVE))
        -:  284:  {
        -:  285:    JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####:  286:    JERRY_CONTEXT (promise_callback)
        -:  287:    (JERRY_PROMISE_EVENT_RESOLVE, promise, value, JERRY_CONTEXT (promise_callback_user_p));
        -:  288:  }
        -:  289:#endif /* JERRY_PROMISE_CALLBACK */
        -:  290:
    #####:  291:  ecma_promise_set_state (obj_p, true);
    #####:  292:  ecma_promise_set_result (obj_p, ecma_copy_value_if_not_object (value));
    #####:  293:  ecma_promise_object_t *promise_p = (ecma_promise_object_t *) obj_p;
        -:  294:
        -:  295:  /* GC can be triggered by ecma_new_collection so freeing the collection
        -:  296:     first and creating a new one might cause a heap after use event. */
    #####:  297:  ecma_collection_t *reactions = promise_p->reactions;
        -:  298:
        -:  299:  /* Reject reactions will never be triggered. */
    #####:  300:  ecma_promise_trigger_reactions (reactions, value, false);
        -:  301:
    #####:  302:  promise_p->reactions = ecma_new_collection ();
        -:  303:
    #####:  304:  ecma_collection_destroy (reactions);
        -:  305:} /* ecma_fulfill_promise */
        -:  306:
        -:  307:/**
        -:  308: * Reject a Promise with a reason. Sanity checks are performed before the reject.
        -:  309: *
        -:  310: * See also: ES2015 25.4.1.3.1
        -:  311: *
        -:  312: * @return ecma value of undefined.
        -:  313: */
        -:  314:ecma_value_t
    #####:  315:ecma_reject_promise_with_checks (ecma_value_t promise, /**< promise */
        -:  316:                                 ecma_value_t reason) /**< reason for reject */
        -:  317:{
        -:  318:  /* 1. */
    #####:  319:  ecma_object_t *promise_obj_p = ecma_get_object_from_value (promise);
    #####:  320:  JERRY_ASSERT (ecma_is_promise (promise_obj_p));
        -:  321:
        -:  322:  /* 3., 4. */
    #####:  323:  if (JERRY_UNLIKELY (ecma_is_resolver_already_called (promise_obj_p)))
        -:  324:  {
        -:  325:#if JERRY_PROMISE_CALLBACK
    #####:  326:    if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_ERROR))
        -:  327:    {
        -:  328:      JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####:  329:      JERRY_CONTEXT (promise_callback)
        -:  330:      (JERRY_PROMISE_EVENT_REJECT_FULFILLED, promise, reason, JERRY_CONTEXT (promise_callback_user_p));
        -:  331:    }
        -:  332:#endif /* JERRY_PROMISE_CALLBACK */
        -:  333:
    #####:  334:    return ECMA_VALUE_UNDEFINED;
        -:  335:  }
        -:  336:
        -:  337:  /* 5. */
    #####:  338:  ((ecma_extended_object_t *) promise_obj_p)->u.cls.u1.promise_flags |= ECMA_PROMISE_ALREADY_RESOLVED;
        -:  339:
        -:  340:  /* 6. */
    #####:  341:  ecma_reject_promise (promise, reason);
    #####:  342:  return ECMA_VALUE_UNDEFINED;
        -:  343:} /* ecma_reject_promise_with_checks */
        -:  344:
        -:  345:/**
        -:  346: * Fulfill a Promise with a value. Sanity checks are performed before the resolve.
        -:  347: *
        -:  348: * See also: ES2015 25.4.1.3.2
        -:  349: *
        -:  350: * @return ecma value of undefined.
        -:  351: */
        -:  352:ecma_value_t
    #####:  353:ecma_fulfill_promise_with_checks (ecma_value_t promise, /**< promise */
        -:  354:                                  ecma_value_t value) /**< fulfilled value */
        -:  355:{
        -:  356:  /* 1. */
    #####:  357:  ecma_object_t *promise_obj_p = ecma_get_object_from_value (promise);
    #####:  358:  JERRY_ASSERT (ecma_is_promise (promise_obj_p));
        -:  359:
        -:  360:  /* 3., 4. */
    #####:  361:  if (JERRY_UNLIKELY (ecma_is_resolver_already_called (promise_obj_p)))
        -:  362:  {
        -:  363:#if JERRY_PROMISE_CALLBACK
    #####:  364:    if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_ERROR))
        -:  365:    {
        -:  366:      JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####:  367:      JERRY_CONTEXT (promise_callback)
        -:  368:      (JERRY_PROMISE_EVENT_RESOLVE_FULFILLED, promise, value, JERRY_CONTEXT (promise_callback_user_p));
        -:  369:    }
        -:  370:#endif /* JERRY_PROMISE_CALLBACK */
        -:  371:
    #####:  372:    return ECMA_VALUE_UNDEFINED;
        -:  373:  }
        -:  374:
        -:  375:  /* 5. */
    #####:  376:  ((ecma_extended_object_t *) promise_obj_p)->u.cls.u1.promise_flags |= ECMA_PROMISE_ALREADY_RESOLVED;
        -:  377:
    #####:  378:  ecma_fulfill_promise (promise, value);
    #####:  379:  return ECMA_VALUE_UNDEFINED;
        -:  380:} /* ecma_fulfill_promise_with_checks */
        -:  381:
        -:  382:/**
        -:  383: * Native handler for Promise Reject Function.
        -:  384: *
        -:  385: * @return ecma value of undefined.
        -:  386: */
        -:  387:ecma_value_t
    #####:  388:ecma_promise_reject_handler (ecma_object_t *function_obj_p, /**< function object */
        -:  389:                             const ecma_value_t args_p[], /**< argument list */
        -:  390:                             const uint32_t args_count) /**< argument number */
        -:  391:{
    #####:  392:  ecma_promise_resolver_t *function_p = (ecma_promise_resolver_t *) function_obj_p;
        -:  393:
    #####:  394:  ecma_value_t reject_value = (args_count == 0) ? ECMA_VALUE_UNDEFINED : args_p[0];
    #####:  395:  return ecma_reject_promise_with_checks (function_p->promise, reject_value);
        -:  396:} /* ecma_promise_reject_handler */
        -:  397:
        -:  398:/**
        -:  399: * Native handler for Promise Resolve Function.
        -:  400: *
        -:  401: * @return ecma value of undefined.
        -:  402: */
        -:  403:ecma_value_t
    #####:  404:ecma_promise_resolve_handler (ecma_object_t *function_obj_p, /**< function object */
        -:  405:                              const ecma_value_t args_p[], /**< argument list */
        -:  406:                              const uint32_t args_count) /**< argument number */
        -:  407:{
    #####:  408:  ecma_promise_resolver_t *function_p = (ecma_promise_resolver_t *) function_obj_p;
        -:  409:
    #####:  410:  ecma_value_t fulfilled_value = (args_count == 0) ? ECMA_VALUE_UNDEFINED : args_p[0];
    #####:  411:  return ecma_fulfill_promise_with_checks (function_p->promise, fulfilled_value);
        -:  412:} /* ecma_promise_resolve_handler */
        -:  413:
        -:  414:/**
        -:  415: * Helper function for PromiseCreateResolvingFunctions.
        -:  416: *
        -:  417: * See also: ES2015 25.4.1.3 2. - 7.
        -:  418: *
        -:  419: * @return pointer to the resolving function
        -:  420: */
        -:  421:static ecma_object_t *
    #####:  422:ecma_promise_create_resolving_function (ecma_object_t *promise_p, /**< Promise Object */
        -:  423:                                        ecma_native_handler_id_t id) /**< Callback handler */
        -:  424:{
    #####:  425:  ecma_object_t *func_obj_p = ecma_op_create_native_handler (id, sizeof (ecma_promise_resolver_t));
        -:  426:
    #####:  427:  ecma_promise_resolver_t *resolver_p = (ecma_promise_resolver_t *) func_obj_p;
    #####:  428:  resolver_p->promise = ecma_make_object_value (promise_p);
        -:  429:
    #####:  430:  return func_obj_p;
        -:  431:} /* ecma_promise_create_resolving_function */
        -:  432:
        -:  433:/**
        -:  434: * Helper function for running an executor.
        -:  435: *
        -:  436: * @return ecma value of the executor callable
        -:  437: *         Returned value must be freed with ecma_free_value
        -:  438: */
        -:  439:ecma_value_t
    #####:  440:ecma_promise_run_executor (ecma_object_t *promise_p, /**< Promise Object */
        -:  441:                           ecma_value_t executor, /**< executor function */
        -:  442:                           ecma_value_t this_value) /**< this value */
        -:  443:{
        -:  444:  ecma_object_t *resolve_func_p, *reject_func_p;
    #####:  445:  resolve_func_p = ecma_promise_create_resolving_function (promise_p, ECMA_NATIVE_HANDLER_PROMISE_RESOLVE);
    #####:  446:  reject_func_p = ecma_promise_create_resolving_function (promise_p, ECMA_NATIVE_HANDLER_PROMISE_REJECT);
        -:  447:
    #####:  448:  ecma_value_t argv[] = { ecma_make_object_value (resolve_func_p), ecma_make_object_value (reject_func_p) };
    #####:  449:  ecma_value_t result = ecma_op_function_call (ecma_get_object_from_value (executor), this_value, argv, 2);
    #####:  450:  ecma_deref_object (resolve_func_p);
    #####:  451:  ecma_deref_object (reject_func_p);
        -:  452:
    #####:  453:  return result;
        -:  454:} /* ecma_promise_run_executor */
        -:  455:
        -:  456:/**
        -:  457: * Create a promise object.
        -:  458: *
        -:  459: * See also: ES2015 25.4.3.1
        -:  460: *
        -:  461: * @return ecma value of the new promise object
        -:  462: *         Returned value must be freed with ecma_free_value
        -:  463: */
        -:  464:ecma_value_t
    #####:  465:ecma_op_create_promise_object (ecma_value_t executor, /**< the executor function or ECMA_VALUE_EMPTY */
        -:  466:                               ecma_value_t parent, /**< parent promise if available */
        -:  467:                               ecma_object_t *new_target_p) /**< new.target value */
        -:  468:{
        -:  469:  JERRY_UNUSED (parent);
        -:  470:
    #####:  471:  if (new_target_p == NULL)
        -:  472:  {
    #####:  473:    new_target_p = ecma_builtin_get (ECMA_BUILTIN_ID_PROMISE);
        -:  474:  }
        -:  475:
        -:  476:  /* 3. */
    #####:  477:  ecma_object_t *proto_p = ecma_op_get_prototype_from_constructor (new_target_p, ECMA_BUILTIN_ID_PROMISE_PROTOTYPE);
        -:  478:
    #####:  479:  if (JERRY_UNLIKELY (proto_p == NULL))
        -:  480:  {
    #####:  481:    return ECMA_VALUE_ERROR;
        -:  482:  }
        -:  483:
        -:  484:  /* Calling ecma_new_collection might trigger a GC call, so this
        -:  485:   * allocation is performed before the object is constructed. */
    #####:  486:  ecma_collection_t *reactions = ecma_new_collection ();
        -:  487:
    #####:  488:  ecma_object_t *object_p = ecma_create_object (proto_p, sizeof (ecma_promise_object_t), ECMA_OBJECT_TYPE_CLASS);
    #####:  489:  ecma_deref_object (proto_p);
    #####:  490:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
    #####:  491:  ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_PROMISE;
        -:  492:  /* 5 */
    #####:  493:  ext_object_p->u.cls.u1.promise_flags = ECMA_PROMISE_IS_PENDING;
    #####:  494:  ext_object_p->u.cls.u3.value = ECMA_VALUE_UNDEFINED;
        -:  495:
        -:  496:  /* 6-8. */
    #####:  497:  ecma_promise_object_t *promise_object_p = (ecma_promise_object_t *) object_p;
    #####:  498:  promise_object_p->reactions = reactions;
        -:  499:
        -:  500:#if JERRY_PROMISE_CALLBACK
    #####:  501:  if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_CREATE))
        -:  502:  {
        -:  503:    JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####:  504:    JERRY_CONTEXT (promise_callback)
        -:  505:    (JERRY_PROMISE_EVENT_CREATE, ecma_make_object_value (object_p), parent, JERRY_CONTEXT (promise_callback_user_p));
        -:  506:  }
        -:  507:#endif /* JERRY_PROMISE_CALLBACK */
        -:  508:
        -:  509:  /* 9. */
    #####:  510:  ecma_value_t completion = ECMA_VALUE_UNDEFINED;
        -:  511:
    #####:  512:  if (executor != ECMA_VALUE_EMPTY)
        -:  513:  {
    #####:  514:    JERRY_ASSERT (ecma_op_is_callable (executor));
        -:  515:
    #####:  516:    completion = ecma_promise_run_executor (object_p, executor, ECMA_VALUE_UNDEFINED);
        -:  517:  }
        -:  518:
    #####:  519:  ecma_value_t status = ECMA_VALUE_EMPTY;
        -:  520:
    #####:  521:  if (ECMA_IS_VALUE_ERROR (completion))
        -:  522:  {
        -:  523:    /* 10.a. */
    #####:  524:    completion = jcontext_take_exception ();
    #####:  525:    ecma_reject_promise_with_checks (ecma_make_object_value (object_p), completion);
        -:  526:  }
        -:  527:
    #####:  528:  ecma_free_value (completion);
        -:  529:
        -:  530:  /* 10.b. */
    #####:  531:  if (ECMA_IS_VALUE_ERROR (status))
        -:  532:  {
    #####:  533:    ecma_deref_object (object_p);
    #####:  534:    return status;
        -:  535:  }
        -:  536:
        -:  537:  /* 11. */
    #####:  538:  ecma_free_value (status);
    #####:  539:  return ecma_make_object_value (object_p);
        -:  540:} /* ecma_op_create_promise_object */
        -:  541:
        -:  542:/**
        -:  543: * Helper function for increase or decrease the remaining count.
        -:  544: *
        -:  545: * @return the current remaining count after increase or decrease.
        -:  546: */
        -:  547:uint32_t
    #####:  548:ecma_promise_remaining_inc_or_dec (ecma_value_t remaining, /**< the remaining count */
        -:  549:                                   bool is_inc) /**< whether to increase the count */
        -:  550:{
    #####:  551:  JERRY_ASSERT (ecma_is_value_object (remaining));
        -:  552:
    #####:  553:  ecma_object_t *remaining_p = ecma_get_object_from_value (remaining);
    #####:  554:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) remaining_p;
        -:  555:
    #####:  556:  JERRY_ASSERT (ext_object_p->u.cls.type == ECMA_OBJECT_CLASS_NUMBER);
        -:  557:
    #####:  558:  JERRY_ASSERT (ecma_is_value_integer_number (ext_object_p->u.cls.u3.value));
        -:  559:
    #####:  560:  uint32_t current = (uint32_t) ecma_get_integer_from_value (ext_object_p->u.cls.u3.value);
        -:  561:
    #####:  562:  if (is_inc)
        -:  563:  {
    #####:  564:    current++;
        -:  565:  }
        -:  566:  else
        -:  567:  {
    #####:  568:    current--;
        -:  569:  }
    #####:  570:  ext_object_p->u.cls.u3.value = ecma_make_uint32_value (current);
        -:  571:
    #####:  572:  return current;
        -:  573:} /* ecma_promise_remaining_inc_or_dec */
        -:  574:
        -:  575:/**
        -:  576: * Native handler for Promise.all and Promise.allSettled Resolve Element Function.
        -:  577: *
        -:  578: * See also:
        -:  579: *         ES2015 25.4.4.1.2
        -:  580: *
        -:  581: * @return ecma value of undefined.
        -:  582: */
        -:  583:ecma_value_t
    #####:  584:ecma_promise_all_or_all_settled_handler_cb (ecma_object_t *function_obj_p, /**< function object */
        -:  585:                                            const ecma_value_t args_p[], /**< argument list */
        -:  586:                                            const uint32_t args_count) /**< argument number */
        -:  587:{
    #####:  588:  ecma_value_t arg = args_count > 0 ? args_p[0] : ECMA_VALUE_UNDEFINED;
        -:  589:
    #####:  590:  ecma_promise_all_executor_t *executor_p = (ecma_promise_all_executor_t *) function_obj_p;
    #####:  591:  uint8_t promise_type = executor_p->header.u.built_in.u2.routine_flags;
        -:  592:
    #####:  593:  promise_type = (uint8_t) (promise_type >> ECMA_NATIVE_HANDLER_COMMON_FLAGS_SHIFT);
        -:  594:
        -:  595:  /* 1 - 2. */
    #####:  596:  if (executor_p->index == 0)
        -:  597:  {
    #####:  598:    return ECMA_VALUE_UNDEFINED;
        -:  599:  }
        -:  600:
    #####:  601:  if (promise_type == ECMA_PROMISE_ALL_RESOLVE || promise_type == ECMA_PROMISE_ANY_REJECT)
        -:  602:  {
        -:  603:    /* 8. */
    #####:  604:    ecma_op_object_put_by_index (ecma_get_object_from_value (executor_p->values),
    #####:  605:                                 (uint32_t) (executor_p->index - 1),
        -:  606:                                 arg,
        -:  607:                                 false);
        -:  608:  }
        -:  609:  else
        -:  610:  {
    #####:  611:    lit_magic_string_id_t status_property_val = LIT_MAGIC_STRING_REJECTED;
    #####:  612:    lit_magic_string_id_t data_propery_name = LIT_MAGIC_STRING_REASON;
        -:  613:
    #####:  614:    if (promise_type == ECMA_PROMISE_ALLSETTLED_RESOLVE)
        -:  615:    {
    #####:  616:      status_property_val = LIT_MAGIC_STRING_FULFILLED;
    #####:  617:      data_propery_name = LIT_MAGIC_STRING_VALUE;
        -:  618:    }
        -:  619:
    #####:  620:    ecma_object_t *obj_p =
    #####:  621:      ecma_create_object (ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE), 0, ECMA_OBJECT_TYPE_GENERAL);
        -:  622:    ecma_property_value_t *prop_value_p;
    #####:  623:    prop_value_p = ecma_create_named_data_property (obj_p,
        -:  624:                                                    ecma_get_magic_string (LIT_MAGIC_STRING_STATUS),
        -:  625:                                                    ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  626:                                                    NULL);
        -:  627:
    #####:  628:    prop_value_p->value = ecma_make_magic_string_value (status_property_val);
        -:  629:
    #####:  630:    prop_value_p = ecma_create_named_data_property (obj_p,
        -:  631:                                                    ecma_get_magic_string (data_propery_name),
        -:  632:                                                    ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,
        -:  633:                                                    NULL);
    #####:  634:    prop_value_p->value = ecma_copy_value_if_not_object (arg);
        -:  635:
    #####:  636:    ecma_value_t obj_val = ecma_make_object_value (obj_p);
        -:  637:    /* 12. */
    #####:  638:    ecma_op_object_put_by_index (ecma_get_object_from_value (executor_p->values),
    #####:  639:                                 (uint32_t) (executor_p->index - 1),
        -:  640:                                 obj_val,
        -:  641:                                 false);
    #####:  642:    ecma_deref_object (obj_p);
        -:  643:  }
        -:  644:  /* 3. */
    #####:  645:  executor_p->index = 0;
        -:  646:
        -:  647:  /* 9-10. */
    #####:  648:  ecma_value_t ret = ECMA_VALUE_UNDEFINED;
    #####:  649:  if (ecma_promise_remaining_inc_or_dec (executor_p->remaining_elements, false) == 0)
        -:  650:  {
    #####:  651:    ecma_value_t capability = executor_p->capability;
    #####:  652:    ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) ecma_get_object_from_value (capability);
    #####:  653:    if (promise_type == ECMA_PROMISE_ANY_REJECT)
        -:  654:    {
    #####:  655:      ecma_value_t error_val = ecma_new_aggregate_error (executor_p->values, ECMA_VALUE_UNDEFINED);
    #####:  656:      ret =
    #####:  657:        ecma_op_function_call (ecma_get_object_from_value (capability_p->reject), ECMA_VALUE_UNDEFINED, &error_val, 1);
    #####:  658:      ecma_free_value (error_val);
        -:  659:    }
        -:  660:    else
        -:  661:    {
    #####:  662:      ret = ecma_op_function_call (ecma_get_object_from_value (capability_p->resolve),
        -:  663:                                   ECMA_VALUE_UNDEFINED,
    #####:  664:                                   &executor_p->values,
        -:  665:                                   1);
        -:  666:    }
        -:  667:  }
        -:  668:
    #####:  669:  return ret;
        -:  670:} /* ecma_promise_all_or_all_settled_handler_cb */
        -:  671:
        -:  672:/**
        -:  673: * GetCapabilitiesExecutor Functions
        -:  674: *
        -:  675: * Checks and sets a promiseCapability's resolve and reject properties.
        -:  676: *
        -:  677: * See also: ES11 25.6.1.5.1
        -:  678: *
        -:  679: * @return ECMA_VALUE_UNDEFINED or TypeError
        -:  680: *         returned value must be freed with ecma_free_value
        -:  681: */
        -:  682:ecma_value_t
    #####:  683:ecma_op_get_capabilities_executor_cb (ecma_object_t *function_obj_p, /**< function object */
        -:  684:                                      const ecma_value_t args_p[], /**< argument list */
        -:  685:                                      const uint32_t args_count) /**< argument number */
        -:  686:{
        -:  687:  /* 1. */
    #####:  688:  ecma_promise_capability_executor_t *executor_p = (ecma_promise_capability_executor_t *) function_obj_p;
        -:  689:
        -:  690:  /* 2-3. */
    #####:  691:  ecma_object_t *capability_obj_p = ecma_get_object_from_value (executor_p->capability);
    #####:  692:  JERRY_ASSERT (ecma_object_class_is (capability_obj_p, ECMA_OBJECT_CLASS_PROMISE_CAPABILITY));
    #####:  693:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
        -:  694:
        -:  695:  /* 4. */
    #####:  696:  if (!ecma_is_value_undefined (capability_p->resolve))
        -:  697:  {
    #####:  698:    return ecma_raise_type_error (ECMA_ERR_RESOLVE_MUST_BE_UNDEFINED);
        -:  699:  }
        -:  700:
        -:  701:  /* 5. */
    #####:  702:  if (!ecma_is_value_undefined (capability_p->reject))
        -:  703:  {
    #####:  704:    return ecma_raise_type_error (ECMA_ERR_REJECT_MUST_BE_UNDEFINED);
        -:  705:  }
        -:  706:
        -:  707:  /* 6. */
    #####:  708:  capability_p->resolve = (args_count > 0) ? args_p[0] : ECMA_VALUE_UNDEFINED;
        -:  709:  /* 7. */
    #####:  710:  capability_p->reject = (args_count > 1) ? args_p[1] : ECMA_VALUE_UNDEFINED;
        -:  711:
        -:  712:  /* 8. */
    #####:  713:  return ECMA_VALUE_UNDEFINED;
        -:  714:} /* ecma_op_get_capabilities_executor_cb */
        -:  715:
        -:  716:/**
        -:  717: * Create a new PromiseCapability.
        -:  718: *
        -:  719: * See also: ES11 25.6.1.5
        -:  720: *
        -:  721: * @return NULL - if the operation raises error
        -:  722: *         new PromiseCapability object - otherwise
        -:  723: */
        -:  724:ecma_object_t *
    #####:  725:ecma_promise_new_capability (ecma_value_t constructor, /**< constructor function */
        -:  726:                             ecma_value_t parent) /**< parent promise if available */
        -:  727:{
        -:  728:  /* 1. */
    #####:  729:  if (!ecma_is_constructor (constructor))
        -:  730:  {
    #####:  731:    ecma_raise_type_error (ECMA_ERR_INVALID_CAPABILITY);
    #####:  732:    return NULL;
        -:  733:  }
        -:  734:
    #####:  735:  ecma_object_t *constructor_obj_p = ecma_get_object_from_value (constructor);
        -:  736:
        -:  737:  /* 3. */
    #####:  738:  ecma_object_t *capability_obj_p = ecma_create_object (ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE),
        -:  739:                                                        sizeof (ecma_promise_capabality_t),
        -:  740:                                                        ECMA_OBJECT_TYPE_CLASS);
        -:  741:
    #####:  742:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
    #####:  743:  capability_p->header.u.cls.type = ECMA_OBJECT_CLASS_PROMISE_CAPABILITY;
    #####:  744:  capability_p->header.u.cls.u3.promise = ECMA_VALUE_UNDEFINED;
    #####:  745:  capability_p->resolve = ECMA_VALUE_UNDEFINED;
    #####:  746:  capability_p->reject = ECMA_VALUE_UNDEFINED;
        -:  747:
        -:  748:  /* 4-5. */
    #####:  749:  ecma_object_t *executor_p = ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROMISE_CAPABILITY_EXECUTOR,
        -:  750:                                                             sizeof (ecma_promise_capability_executor_t));
        -:  751:
        -:  752:  /* 6. */
    #####:  753:  ecma_promise_capability_executor_t *executor_func_p = (ecma_promise_capability_executor_t *) executor_p;
    #####:  754:  executor_func_p->capability = ecma_make_object_value (capability_obj_p);
        -:  755:
        -:  756:  /* 7. */
    #####:  757:  ecma_value_t executor = ecma_make_object_value (executor_p);
        -:  758:  ecma_value_t promise;
        -:  759:
    #####:  760:  if (constructor_obj_p == ecma_builtin_get (ECMA_BUILTIN_ID_PROMISE))
        -:  761:  {
    #####:  762:    promise = ecma_op_create_promise_object (executor, parent, constructor_obj_p);
        -:  763:  }
        -:  764:  else
        -:  765:  {
    #####:  766:    promise = ecma_op_function_construct (constructor_obj_p, constructor_obj_p, &executor, 1);
        -:  767:  }
        -:  768:
    #####:  769:  ecma_deref_object (executor_p);
        -:  770:
    #####:  771:  if (ECMA_IS_VALUE_ERROR (promise))
        -:  772:  {
    #####:  773:    ecma_deref_object (capability_obj_p);
    #####:  774:    return NULL;
        -:  775:  }
        -:  776:
        -:  777:  /* 8. */
    #####:  778:  if (!ecma_op_is_callable (capability_p->resolve))
        -:  779:  {
    #####:  780:    ecma_free_value (promise);
    #####:  781:    ecma_deref_object (capability_obj_p);
    #####:  782:    ecma_raise_type_error (ECMA_ERR_PARAMETER_RESOLVE_MUST_BE_CALLABLE);
    #####:  783:    return NULL;
        -:  784:  }
        -:  785:
        -:  786:  /* 9. */
    #####:  787:  if (!ecma_op_is_callable (capability_p->reject))
        -:  788:  {
    #####:  789:    ecma_free_value (promise);
    #####:  790:    ecma_deref_object (capability_obj_p);
    #####:  791:    ecma_raise_type_error (ECMA_ERR_PARAMETER_REJECT_MUST_BE_CALLABLE);
    #####:  792:    return NULL;
        -:  793:  }
        -:  794:
        -:  795:  /* 10. */
    #####:  796:  capability_p->header.u.cls.u3.promise = promise;
        -:  797:
    #####:  798:  ecma_free_value (promise);
        -:  799:
        -:  800:  /* 11. */
    #####:  801:  return capability_obj_p;
        -:  802:} /* ecma_promise_new_capability */
        -:  803:
        -:  804:/**
        -:  805: * The common function for 'reject' and 'resolve'.
        -:  806: *
        -:  807: * @return ecma value
        -:  808: *         Returned value must be freed with ecma_free_value.
        -:  809: */
        -:  810:ecma_value_t
    #####:  811:ecma_promise_reject_or_resolve (ecma_value_t this_arg, /**< "this" argument */
        -:  812:                                ecma_value_t value, /**< rejected or resolved value */
        -:  813:                                bool is_resolve) /**< the operation is resolve */
        -:  814:{
    #####:  815:  if (!ecma_is_value_object (this_arg))
        -:  816:  {
    #####:  817:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_OBJECT);
        -:  818:  }
        -:  819:
    #####:  820:  if (is_resolve && ecma_is_value_object (value) && ecma_is_promise (ecma_get_object_from_value (value)))
        -:  821:  {
    #####:  822:    ecma_object_t *object_p = ecma_get_object_from_value (value);
    #####:  823:    ecma_value_t constructor = ecma_op_object_get_by_magic_id (object_p, LIT_MAGIC_STRING_CONSTRUCTOR);
        -:  824:
    #####:  825:    if (ECMA_IS_VALUE_ERROR (constructor))
        -:  826:    {
    #####:  827:      return constructor;
        -:  828:    }
        -:  829:
        -:  830:    /* The this_arg must be an object. */
    #####:  831:    bool is_same_value = (constructor == this_arg);
    #####:  832:    ecma_free_value (constructor);
        -:  833:
    #####:  834:    if (is_same_value)
        -:  835:    {
    #####:  836:      return ecma_copy_value (value);
        -:  837:    }
        -:  838:  }
        -:  839:
    #####:  840:  ecma_object_t *capability_obj_p = ecma_promise_new_capability (this_arg, ECMA_VALUE_UNDEFINED);
        -:  841:
    #####:  842:  if (JERRY_UNLIKELY (capability_obj_p == NULL))
        -:  843:  {
    #####:  844:    return ECMA_VALUE_ERROR;
        -:  845:  }
        -:  846:
    #####:  847:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
        -:  848:
    #####:  849:  ecma_value_t func = is_resolve ? capability_p->resolve : capability_p->reject;
        -:  850:
    #####:  851:  ecma_value_t call_ret = ecma_op_function_call (ecma_get_object_from_value (func), ECMA_VALUE_UNDEFINED, &value, 1);
        -:  852:
    #####:  853:  if (ECMA_IS_VALUE_ERROR (call_ret))
        -:  854:  {
    #####:  855:    ecma_deref_object (capability_obj_p);
    #####:  856:    return call_ret;
        -:  857:  }
        -:  858:
    #####:  859:  ecma_free_value (call_ret);
        -:  860:
    #####:  861:  ecma_value_t promise = ecma_copy_value (capability_p->header.u.cls.u3.promise);
    #####:  862:  ecma_deref_object (capability_obj_p);
        -:  863:
    #####:  864:  return promise;
        -:  865:} /* ecma_promise_reject_or_resolve */
        -:  866:
        -:  867:/**
        -:  868: * The common function for ecma_builtin_promise_prototype_then
        -:  869: * and ecma_builtin_promise_prototype_catch.
        -:  870: *
        -:  871: * @return ecma value of a new promise object.
        -:  872: *         Returned value must be freed with ecma_free_value.
        -:  873: */
        -:  874:ecma_value_t
    #####:  875:ecma_promise_then (ecma_value_t promise, /**< the promise which call 'then' */
        -:  876:                   ecma_value_t on_fulfilled, /**< on_fulfilled function */
        -:  877:                   ecma_value_t on_rejected) /**< on_rejected function */
        -:  878:{
    #####:  879:  if (!ecma_is_value_object (promise))
        -:  880:  {
    #####:  881:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_OBJECT);
        -:  882:  }
        -:  883:
    #####:  884:  ecma_object_t *obj = ecma_get_object_from_value (promise);
        -:  885:
    #####:  886:  if (!ecma_is_promise (obj))
        -:  887:  {
    #####:  888:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_PROMISE);
        -:  889:  }
        -:  890:
    #####:  891:  ecma_value_t species = ecma_op_species_constructor (obj, ECMA_BUILTIN_ID_PROMISE);
    #####:  892:  if (ECMA_IS_VALUE_ERROR (species))
        -:  893:  {
    #####:  894:    return species;
        -:  895:  }
        -:  896:
    #####:  897:  ecma_object_t *result_capability_obj_p = ecma_promise_new_capability (species, promise);
    #####:  898:  ecma_free_value (species);
        -:  899:
    #####:  900:  if (JERRY_UNLIKELY (result_capability_obj_p == NULL))
        -:  901:  {
    #####:  902:    return ECMA_VALUE_ERROR;
        -:  903:  }
        -:  904:
    #####:  905:  ecma_value_t ret = ecma_promise_perform_then (promise, on_fulfilled, on_rejected, result_capability_obj_p);
    #####:  906:  ecma_deref_object (result_capability_obj_p);
        -:  907:
    #####:  908:  return ret;
        -:  909:} /* ecma_promise_then */
        -:  910:
        -:  911:/**
        -:  912: * Definition of valueThunk function
        -:  913: *
        -:  914: * See also:
        -:  915: *         ES2020 25.6.5.3.1 step 8.
        -:  916: *
        -:  917: * @return ecma value
        -:  918: */
        -:  919:ecma_value_t
    #####:  920:ecma_value_thunk_helper_cb (ecma_object_t *function_obj_p, /**< function object */
        -:  921:                            const ecma_value_t args_p[], /**< argument list */
        -:  922:                            const uint32_t args_count) /**< argument number */
        -:  923:{
        -:  924:  JERRY_UNUSED_2 (args_p, args_count);
        -:  925:
    #####:  926:  ecma_promise_value_thunk_t *value_thunk_obj_p = (ecma_promise_value_thunk_t *) function_obj_p;
        -:  927:
    #####:  928:  return ecma_copy_value (value_thunk_obj_p->value);
        -:  929:} /* ecma_value_thunk_helper_cb */
        -:  930:
        -:  931:/**
        -:  932: * Definition of thrower function
        -:  933: *
        -:  934: * See also:
        -:  935: *         ES2020 25.6.5.3.2 step 8.
        -:  936: *
        -:  937: * @return ecma value
        -:  938: */
        -:  939:ecma_value_t
    #####:  940:ecma_value_thunk_thrower_cb (ecma_object_t *function_obj_p, /**< function object */
        -:  941:                             const ecma_value_t args_p[], /**< argument list */
        -:  942:                             const uint32_t args_count) /**< argument number */
        -:  943:{
        -:  944:  JERRY_UNUSED_2 (args_p, args_count);
        -:  945:
    #####:  946:  ecma_promise_value_thunk_t *value_thunk_obj_p = (ecma_promise_value_thunk_t *) function_obj_p;
        -:  947:
    #####:  948:  jcontext_raise_exception (ecma_copy_value (value_thunk_obj_p->value));
        -:  949:
    #####:  950:  return ECMA_VALUE_ERROR;
        -:  951:} /* ecma_value_thunk_thrower_cb */
        -:  952:
        -:  953:/**
        -:  954: * Helper function for Then Finally and Catch Finally common parts
        -:  955: *
        -:  956: * See also:
        -:  957: *         ES2020 25.6.5.3.1
        -:  958: *         ES2020 25.6.5.3.2
        -:  959: *
        -:  960: * @return ecma value
        -:  961: */
        -:  962:static ecma_value_t
    #####:  963:ecma_promise_then_catch_finally_helper (ecma_object_t *function_obj_p, /**< function object */
        -:  964:                                        ecma_native_handler_id_t id, /**< handler id */
        -:  965:                                        ecma_value_t arg) /**< callback function argument */
        -:  966:{
        -:  967:  /* 2. */
    #####:  968:  ecma_promise_finally_function_t *finally_func_obj = (ecma_promise_finally_function_t *) function_obj_p;
        -:  969:
        -:  970:  /* 3. */
    #####:  971:  JERRY_ASSERT (ecma_op_is_callable (finally_func_obj->on_finally));
        -:  972:
        -:  973:  /* 4. */
    #####:  974:  ecma_value_t result =
    #####:  975:    ecma_op_function_call (ecma_get_object_from_value (finally_func_obj->on_finally), ECMA_VALUE_UNDEFINED, NULL, 0);
        -:  976:
    #####:  977:  if (ECMA_IS_VALUE_ERROR (result))
        -:  978:  {
    #####:  979:    return result;
        -:  980:  }
        -:  981:
        -:  982:  /* 6. */
    #####:  983:  JERRY_ASSERT (ecma_is_constructor (finally_func_obj->constructor));
        -:  984:
        -:  985:  /* 7. */
    #####:  986:  ecma_value_t promise = ecma_promise_reject_or_resolve (finally_func_obj->constructor, result, true);
        -:  987:
    #####:  988:  ecma_free_value (result);
        -:  989:
    #####:  990:  if (ECMA_IS_VALUE_ERROR (promise))
        -:  991:  {
    #####:  992:    return promise;
        -:  993:  }
        -:  994:
        -:  995:  /* 8. */
        -:  996:  ecma_object_t *value_thunk_func_p;
    #####:  997:  value_thunk_func_p = ecma_op_create_native_handler (id, sizeof (ecma_promise_value_thunk_t));
        -:  998:
    #####:  999:  ecma_promise_value_thunk_t *value_thunk_func_obj = (ecma_promise_value_thunk_t *) value_thunk_func_p;
    #####: 1000:  value_thunk_func_obj->value = ecma_copy_value_if_not_object (arg);
        -: 1001:
        -: 1002:  /* 9. */
    #####: 1003:  ecma_value_t value_thunk = ecma_make_object_value (value_thunk_func_p);
    #####: 1004:  ecma_value_t ret_value = ecma_op_invoke_by_magic_id (promise, LIT_MAGIC_STRING_THEN, &value_thunk, 1);
        -: 1005:
    #####: 1006:  ecma_free_value (promise);
    #####: 1007:  ecma_deref_object (value_thunk_func_p);
        -: 1008:
    #####: 1009:  return ret_value;
        -: 1010:} /* ecma_promise_then_catch_finally_helper */
        -: 1011:
        -: 1012:/**
        -: 1013: * Definition of Then Finally Function
        -: 1014: *
        -: 1015: * See also:
        -: 1016: *         ES2020 25.6.5.3.1
        -: 1017: *
        -: 1018: * @return ecma value
        -: 1019: */
        -: 1020:ecma_value_t
    #####: 1021:ecma_promise_then_finally_cb (ecma_object_t *function_obj_p, /**< function object */
        -: 1022:                              const ecma_value_t args_p[], /**< argument list */
        -: 1023:                              const uint32_t args_count) /**< argument number */
        -: 1024:{
        -: 1025:  JERRY_UNUSED (args_count);
    #####: 1026:  JERRY_ASSERT (args_count > 0);
        -: 1027:
    #####: 1028:  return ecma_promise_then_catch_finally_helper (function_obj_p, ECMA_NATIVE_HANDLER_VALUE_THUNK, args_p[0]);
        -: 1029:} /* ecma_promise_then_finally_cb */
        -: 1030:
        -: 1031:/**
        -: 1032: * Definition of Catch Finally Function
        -: 1033: *
        -: 1034: * See also:
        -: 1035: *         ES2020 25.6.5.3.2
        -: 1036: *
        -: 1037: * @return ecma value
        -: 1038: */
        -: 1039:ecma_value_t
    #####: 1040:ecma_promise_catch_finally_cb (ecma_object_t *function_obj_p, /**< function object */
        -: 1041:                               const ecma_value_t args_p[], /**< argument list */
        -: 1042:                               const uint32_t args_count) /**< argument number */
        -: 1043:{
        -: 1044:  JERRY_UNUSED (args_count);
    #####: 1045:  JERRY_ASSERT (args_count > 0);
        -: 1046:
    #####: 1047:  return ecma_promise_then_catch_finally_helper (function_obj_p, ECMA_NATIVE_HANDLER_VALUE_THROWER, args_p[0]);
        -: 1048:} /* ecma_promise_catch_finally_cb */
        -: 1049:
        -: 1050:/**
        -: 1051: * The common function for ecma_builtin_promise_prototype_finally
        -: 1052: *
        -: 1053: * @return ecma value of a new promise object.
        -: 1054: *         Returned value must be freed with ecma_free_value.
        -: 1055: */
        -: 1056:ecma_value_t
    #####: 1057:ecma_promise_finally (ecma_value_t promise, /**< the promise which call 'finally' */
        -: 1058:                      ecma_value_t on_finally) /**< on_finally function */
        -: 1059:{
        -: 1060:  /* 2. */
    #####: 1061:  if (!ecma_is_value_object (promise))
        -: 1062:  {
    #####: 1063:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_OBJECT);
        -: 1064:  }
        -: 1065:
    #####: 1066:  ecma_object_t *obj = ecma_get_object_from_value (promise);
        -: 1067:
        -: 1068:  /* 3. */
    #####: 1069:  ecma_value_t species = ecma_op_species_constructor (obj, ECMA_BUILTIN_ID_PROMISE);
        -: 1070:
    #####: 1071:  if (ECMA_IS_VALUE_ERROR (species))
        -: 1072:  {
    #####: 1073:    return species;
        -: 1074:  }
        -: 1075:
        -: 1076:  /* 4. */
    #####: 1077:  JERRY_ASSERT (ecma_is_constructor (species));
        -: 1078:
        -: 1079:  /* 5. */
    #####: 1080:  if (!ecma_op_is_callable (on_finally))
        -: 1081:  {
    #####: 1082:    ecma_free_value (species);
    #####: 1083:    ecma_value_t invoke_args[2] = { on_finally, on_finally };
    #####: 1084:    return ecma_op_invoke_by_magic_id (promise, LIT_MAGIC_STRING_THEN, invoke_args, 2);
        -: 1085:  }
        -: 1086:
        -: 1087:  /* 6.a-b */
        -: 1088:  ecma_object_t *then_finally_obj_p;
    #####: 1089:  then_finally_obj_p =
        -: 1090:    ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROMISE_THEN_FINALLY, sizeof (ecma_promise_finally_function_t));
        -: 1091:
        -: 1092:  /* 6.c-d */
    #####: 1093:  ecma_promise_finally_function_t *then_finally_func_obj_p = (ecma_promise_finally_function_t *) then_finally_obj_p;
    #####: 1094:  then_finally_func_obj_p->constructor = species;
    #####: 1095:  then_finally_func_obj_p->on_finally = on_finally;
        -: 1096:
        -: 1097:  /* 6.e-f */
        -: 1098:  ecma_object_t *catch_finally_obj_p;
    #####: 1099:  catch_finally_obj_p =
        -: 1100:    ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROMISE_CATCH_FINALLY, sizeof (ecma_promise_finally_function_t));
        -: 1101:
        -: 1102:  /* 6.g-h */
    #####: 1103:  ecma_promise_finally_function_t *catch_finally_func_obj = (ecma_promise_finally_function_t *) catch_finally_obj_p;
    #####: 1104:  catch_finally_func_obj->constructor = species;
    #####: 1105:  catch_finally_func_obj->on_finally = on_finally;
        -: 1106:
    #####: 1107:  ecma_deref_object (ecma_get_object_from_value (species));
        -: 1108:
        -: 1109:  /* 7. */
    #####: 1110:  ecma_value_t invoke_args[2] = { ecma_make_object_value (then_finally_obj_p),
    #####: 1111:                                  ecma_make_object_value (catch_finally_obj_p) };
        -: 1112:
    #####: 1113:  ecma_value_t ret_value = ecma_op_invoke_by_magic_id (promise, LIT_MAGIC_STRING_THEN, invoke_args, 2);
        -: 1114:
    #####: 1115:  ecma_deref_object (then_finally_obj_p);
    #####: 1116:  ecma_deref_object (catch_finally_obj_p);
        -: 1117:
    #####: 1118:  return ret_value;
        -: 1119:} /* ecma_promise_finally */
        -: 1120:
        -: 1121:/**
        -: 1122: * Resume the execution of an async function after the promise is resolved
        -: 1123: */
        -: 1124:void
    #####: 1125:ecma_promise_async_then (ecma_value_t promise, /**< promise object */
        -: 1126:                         ecma_value_t executable_object) /**< executable object of the async function */
        -: 1127:{
        -: 1128:#if JERRY_PROMISE_CALLBACK
    #####: 1129:  if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_ASYNC_MAIN))
        -: 1130:  {
        -: 1131:    JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####: 1132:    JERRY_CONTEXT (promise_callback)
        -: 1133:    (JERRY_PROMISE_EVENT_ASYNC_AWAIT, executable_object, promise, JERRY_CONTEXT (promise_callback_user_p));
        -: 1134:  }
        -: 1135:#endif /* JERRY_PROMISE_CALLBACK */
        -: 1136:
    #####: 1137:  ecma_object_t *promise_obj_p = ecma_get_object_from_value (promise);
    #####: 1138:  uint16_t flags = ecma_promise_get_flags (promise_obj_p);
        -: 1139:
    #####: 1140:  if (flags & ECMA_PROMISE_IS_PENDING)
        -: 1141:  {
        -: 1142:    ecma_value_t executable_object_with_tag;
    #####: 1143:    ECMA_SET_NON_NULL_POINTER_TAG (executable_object_with_tag, ecma_get_object_from_value (executable_object), 0);
    #####: 1144:    ECMA_SET_THIRD_BIT_TO_POINTER_TAG (executable_object_with_tag);
        -: 1145:
    #####: 1146:    ecma_collection_push_back (((ecma_promise_object_t *) promise_obj_p)->reactions, executable_object_with_tag);
    #####: 1147:    return;
        -: 1148:  }
        -: 1149:
    #####: 1150:  ecma_value_t value = ecma_promise_get_result (promise_obj_p);
    #####: 1151:  ecma_enqueue_promise_async_reaction_job (executable_object, value, !(flags & ECMA_PROMISE_IS_FULFILLED));
    #####: 1152:  ecma_free_value (value);
        -: 1153:
        -: 1154:#if JERRY_PROMISE_CALLBACK
    #####: 1155:  if (ecma_promise_get_flags (promise_obj_p) & ECMA_PROMISE_UNHANDLED_REJECT)
        -: 1156:  {
    #####: 1157:    ((ecma_extended_object_t *) promise_obj_p)->u.cls.u1.promise_flags &= (uint8_t) ~ECMA_PROMISE_UNHANDLED_REJECT;
        -: 1158:
    #####: 1159:    if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_ERROR))
        -: 1160:    {
        -: 1161:      JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####: 1162:      JERRY_CONTEXT (promise_callback)
        -: 1163:      (JERRY_PROMISE_EVENT_CATCH_HANDLER_ADDED, promise, ECMA_VALUE_UNDEFINED, JERRY_CONTEXT (promise_callback_user_p));
        -: 1164:    }
        -: 1165:  }
        -: 1166:#endif /* JERRY_PROMISE_CALLBACK */
        -: 1167:} /* ecma_promise_async_then */
        -: 1168:
        -: 1169:/**
        -: 1170: * Resolves the value and resume the execution of an async function after the resolve is completed
        -: 1171: *
        -: 1172: * @return ECMA_VALUE_UNDEFINED if not error is occurred, an error otherwise
        -: 1173: */
        -: 1174:ecma_value_t
    #####: 1175:ecma_promise_async_await (ecma_extended_object_t *async_generator_object_p, /**< async generator function */
        -: 1176:                          ecma_value_t value) /**< value to be resolved (takes the reference) */
        -: 1177:{
    #####: 1178:  ecma_value_t promise = ecma_make_object_value (ecma_builtin_get (ECMA_BUILTIN_ID_PROMISE));
    #####: 1179:  ecma_value_t result = ecma_promise_reject_or_resolve (promise, value, true);
        -: 1180:
    #####: 1181:  ecma_free_value (value);
        -: 1182:
    #####: 1183:  if (ECMA_IS_VALUE_ERROR (result))
        -: 1184:  {
    #####: 1185:    return result;
        -: 1186:  }
        -: 1187:
    #####: 1188:  ecma_promise_async_then (result, ecma_make_object_value ((ecma_object_t *) async_generator_object_p));
    #####: 1189:  ecma_free_value (result);
    #####: 1190:  return ECMA_VALUE_UNDEFINED;
        -: 1191:} /* ecma_promise_async_await */
        -: 1192:
        -: 1193:/**
        -: 1194: * Reject the promise if the value is error.
        -: 1195: *
        -: 1196: * See also:
        -: 1197: *         ES2015 25.4.1.1.1
        -: 1198: *
        -: 1199: * @return ecma value of the new promise.
        -: 1200: *         Returned value must be freed with ecma_free_value.
        -: 1201: */
        -: 1202:ecma_value_t
    #####: 1203:ecma_op_if_abrupt_reject_promise (ecma_value_t *value_p, /**< [in - out] completion value */
        -: 1204:                                  ecma_object_t *capability_obj_p) /**< capability */
        -: 1205:{
    #####: 1206:  JERRY_ASSERT (ecma_object_class_is (capability_obj_p, ECMA_OBJECT_CLASS_PROMISE_CAPABILITY));
        -: 1207:
    #####: 1208:  if (!ECMA_IS_VALUE_ERROR (*value_p))
        -: 1209:  {
    #####: 1210:    return ECMA_VALUE_EMPTY;
        -: 1211:  }
        -: 1212:
    #####: 1213:  ecma_value_t reason = jcontext_take_exception ();
        -: 1214:
    #####: 1215:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
    #####: 1216:  ecma_value_t call_ret =
    #####: 1217:    ecma_op_function_call (ecma_get_object_from_value (capability_p->reject), ECMA_VALUE_UNDEFINED, &reason, 1);
    #####: 1218:  ecma_free_value (reason);
        -: 1219:
    #####: 1220:  if (ECMA_IS_VALUE_ERROR (call_ret))
        -: 1221:  {
    #####: 1222:    *value_p = call_ret;
    #####: 1223:    return call_ret;
        -: 1224:  }
        -: 1225:
    #####: 1226:  ecma_free_value (call_ret);
    #####: 1227:  *value_p = ecma_copy_value (capability_p->header.u.cls.u3.promise);
        -: 1228:
    #####: 1229:  return ECMA_VALUE_EMPTY;
        -: 1230:} /* ecma_op_if_abrupt_reject_promise */
        -: 1231:
        -: 1232:/**
        -: 1233: * It performs the "then" operation on promiFulfilled
        -: 1234: * and onRejected as its settlement actions.
        -: 1235: *
        -: 1236: * See also: 25.4.5.3.1
        -: 1237: *
        -: 1238: * @return ecma value of the new promise object
        -: 1239: *         Returned value must be freed with ecma_free_value
        -: 1240: */
        -: 1241:ecma_value_t
    #####: 1242:ecma_promise_perform_then (ecma_value_t promise, /**< the promise which call 'then' */
        -: 1243:                           ecma_value_t on_fulfilled, /**< on_fulfilled function */
        -: 1244:                           ecma_value_t on_rejected, /**< on_rejected function */
        -: 1245:                           ecma_object_t *result_capability_obj_p) /**< promise capability */
        -: 1246:{
    #####: 1247:  JERRY_ASSERT (ecma_object_class_is (result_capability_obj_p, ECMA_OBJECT_CLASS_PROMISE_CAPABILITY));
        -: 1248:
    #####: 1249:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) result_capability_obj_p;
        -: 1250:
        -: 1251:  /* 3. boolean true indicates "indentity" */
    #####: 1252:  if (!ecma_op_is_callable (on_fulfilled))
        -: 1253:  {
    #####: 1254:    on_fulfilled = ECMA_VALUE_TRUE;
        -: 1255:  }
        -: 1256:
        -: 1257:  /* 4. boolean false indicates "thrower" */
    #####: 1258:  if (!ecma_op_is_callable (on_rejected))
        -: 1259:  {
    #####: 1260:    on_rejected = ECMA_VALUE_FALSE;
        -: 1261:  }
        -: 1262:
    #####: 1263:  ecma_object_t *promise_obj_p = ecma_get_object_from_value (promise);
    #####: 1264:  ecma_promise_object_t *promise_p = (ecma_promise_object_t *) promise_obj_p;
        -: 1265:
    #####: 1266:  uint16_t flags = ecma_promise_get_flags (promise_obj_p);
        -: 1267:
    #####: 1268:  if (flags & ECMA_PROMISE_IS_PENDING)
        -: 1269:  {
        -: 1270:    /* 7. */
        -: 1271:    /* [ capability, (on_fulfilled), (on_rejected) ] */
    #####: 1272:    ecma_value_t reaction_values[3];
    #####: 1273:    ecma_value_t *reactions_p = reaction_values + 1;
        -: 1274:
    #####: 1275:    uint8_t tag = 0;
        -: 1276:
    #####: 1277:    if (on_fulfilled != ECMA_VALUE_TRUE)
        -: 1278:    {
    #####: 1279:      tag |= JMEM_FIRST_TAG_BIT_MASK;
    #####: 1280:      *reactions_p++ = on_fulfilled;
        -: 1281:    }
        -: 1282:
    #####: 1283:    if (on_rejected != ECMA_VALUE_FALSE)
        -: 1284:    {
    #####: 1285:      tag |= JMEM_SECOND_TAG_BIT_MASK;
    #####: 1286:      *reactions_p++ = on_rejected;
        -: 1287:    }
        -: 1288:
    #####: 1289:    ECMA_SET_NON_NULL_POINTER_TAG (reaction_values[0], result_capability_obj_p, tag);
        -: 1290:
    #####: 1291:    uint32_t value_count = (uint32_t) (reactions_p - reaction_values);
    #####: 1292:    ecma_collection_append (promise_p->reactions, reaction_values, value_count);
        -: 1293:  }
    #####: 1294:  else if (flags & ECMA_PROMISE_IS_FULFILLED)
        -: 1295:  {
        -: 1296:    /* 8. */
    #####: 1297:    ecma_value_t value = ecma_promise_get_result (promise_obj_p);
    #####: 1298:    ecma_enqueue_promise_reaction_job (ecma_make_object_value (result_capability_obj_p), on_fulfilled, value);
    #####: 1299:    ecma_free_value (value);
        -: 1300:  }
        -: 1301:  else
        -: 1302:  {
        -: 1303:    /* 9. */
    #####: 1304:    ecma_value_t reason = ecma_promise_get_result (promise_obj_p);
    #####: 1305:    ecma_enqueue_promise_reaction_job (ecma_make_object_value (result_capability_obj_p), on_rejected, reason);
    #####: 1306:    ecma_free_value (reason);
        -: 1307:
        -: 1308:#if JERRY_PROMISE_CALLBACK
    #####: 1309:    if (ecma_promise_get_flags (promise_obj_p) & ECMA_PROMISE_UNHANDLED_REJECT)
        -: 1310:    {
    #####: 1311:      promise_p->header.u.cls.u1.promise_flags &= (uint8_t) ~ECMA_PROMISE_UNHANDLED_REJECT;
        -: 1312:
    #####: 1313:      if (JERRY_UNLIKELY (JERRY_CONTEXT (promise_callback_filters) & JERRY_PROMISE_EVENT_FILTER_ERROR))
        -: 1314:      {
        -: 1315:        JERRY_ASSERT (JERRY_CONTEXT (promise_callback) != NULL);
    #####: 1316:        JERRY_CONTEXT (promise_callback)
        -: 1317:        (JERRY_PROMISE_EVENT_CATCH_HANDLER_ADDED,
        -: 1318:         promise,
        -: 1319:         ECMA_VALUE_UNDEFINED,
        -: 1320:         JERRY_CONTEXT (promise_callback_user_p));
        -: 1321:      }
        -: 1322:    }
        -: 1323:#endif /* JERRY_PROMISE_CALLBACK */
        -: 1324:  }
        -: 1325:
        -: 1326:  /* 10. */
    #####: 1327:  return ecma_copy_value (capability_p->header.u.cls.u3.promise);
        -: 1328:} /* ecma_promise_perform_then */
        -: 1329:
        -: 1330:/**
        -: 1331: * @}
        -: 1332: * @}
        -: 1333: */
        -: 1334:#endif /* JERRY_ESNEXT */
