        -:    0:Source:/home/workspace/include/internal/chewing-private.h
        -:    0:Graph:/home/workspace/build/CMakeFiles/chewing.dir/src/tree.gcno
        -:    0:Data:/home/workspace/build/CMakeFiles/chewing.dir/src/tree.gcda
        -:    0:Runs:1
        -:    1:/**
        -:    2: * chewing-private.h
        -:    3: *
        -:    4: * Copyright (c) 2008, 2010
        -:    5: *	libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:#ifndef _CHEWING_CORE_PRIVATE_H
        -:   12:#define _CHEWING_CORE_PRIVATE_H
        -:   13:
        -:   14:#ifdef HAVE_CONFIG_H
        -:   15:#  include <config.h>
        -:   16:#endif
        -:   17:
        -:   18:#ifdef HAVE_INTTYPES_H
        -:   19:#  include <inttypes.h>
        -:   20:#elif defined HAVE_STDINT_H
        -:   21:#  include <stdint.h>
        -:   22:#endif
        -:   23:
        -:   24:#ifndef USE_BINARY_DATA
        -:   25:#include <stdio.h>
        -:   26:#endif
        -:   27:
        -:   28:#include "global.h"
        -:   29:#include "plat_mmap.h"
        -:   30:
        -:   31:#define MAX_KBTYPE 13
        -:   32:#define MAX_UTF8_SIZE 4
        -:   33:#define ZUIN_SIZE 4
        -:   34:#define PINYIN_SIZE 10
        -:   35:#define MAX_PHRASE_LEN 11
        -:   36:#define MAX_PHONE_SEQ_LEN 50
        -:   37:#define MIN_CHI_SYMBOL_LEN 0
        -:   38:#define MAX_CHI_SYMBOL_LEN (MAX_PHONE_SEQ_LEN - MAX_PHRASE_LEN)
        -:   39:#define MAX_INTERVAL ( ( MAX_PHONE_SEQ_LEN + 1 ) * MAX_PHONE_SEQ_LEN / 2 )
        -:   40:#define MAX_CHOICE (567)
        -:   41:#define MAX_CHOICE_BUF (50)                   /* max length of the choise buffer */
        -:   42:#define N_HASH_BIT (14)
        -:   43:#define HASH_TABLE_SIZE (1<<N_HASH_BIT)
        -:   44:#define EASY_SYMBOL_KEY_TAB_LEN (36)
        -:   45:
        -:   46:/* For isSymbol */
        -:   47:#define WORD_CHOICE            (0)
        -:   48:#define SYMBOL_CATEGORY_CHOICE (1)
        -:   49:#define SYMBOL_CHOICE_INSERT   (2)
        -:   50:#define SYMBOL_CHOICE_UPDATE   (3)
        -:   51:
        -:   52:#ifndef _MSC_VER
        -:   53:#undef max
      240:   54:static inline int max( int a, int b )
        -:   55:{
      240:   56:	return a > b ? a : b;
        -:   57:}
        -:   58:
        -:   59:#undef min
      240:   60:static inline int min( int a, int b )
        -:   61:{
      240:   62:	return a < b ? a : b;
        -:   63:}
        -:   64:#endif
        -:   65:
        -:   66:typedef union {
        -:   67:	unsigned char s[ MAX_UTF8_SIZE + 1];
        -:   68:	uint16_t wch;
        -:   69:} wch_t;
        -:   70:
        -:   71:typedef struct {
        -:   72:	uint16_t phone_id;
        -:   73:	int phrase_id;
        -:   74:	int child_begin, child_end;
        -:   75:} TreeType;
        -:   76:
        -:   77:typedef struct {
        -:   78:	char chiBuf[ MAX_PHONE_SEQ_LEN * MAX_UTF8_SIZE + 1 ];
        -:   79:	IntervalType dispInterval[ MAX_INTERVAL ];
        -:   80:	int nDispInterval;
        -:   81:	int nNumCut;
        -:   82:} PhrasingOutput;
        -:   83:
        -:   84:typedef struct {
        -:   85:    int type;
        -:   86:    char keySeq[ PINYIN_SIZE ];
        -:   87:} PinYinData;
        -:   88:
        -:   89:typedef struct {
        -:   90:	int kbtype;
        -:   91:	int pho_inx[ ZUIN_SIZE ];
        -:   92:	int pho_inx_alt[ ZUIN_SIZE ];
        -:   93:	uint16_t phone;
        -:   94:	uint16_t phoneAlt;
        -:   95:	PinYinData pinYinData;
        -:   96:} ZuinData;
        -:   97:
        -:   98:typedef struct {
        -:   99:	/** @brief all kinds of lengths of available phrases. */
        -:  100:	struct {
        -:  101:		int len;
        -:  102:		/** @brief phone id. */
        -:  103:		int id;
        -:  104:	} avail[ MAX_PHRASE_LEN ];
        -:  105:	/** @brief total number of availble lengths. */
        -:  106:	int nAvail;
        -:  107:	/** @brief the current choosing available length. */
        -:  108:	int currentAvail;
        -:  109:} AvailInfo;
        -:  110:/**
        -:  111: *	@struct AvailInfo
        -:  112: *	@brief information of available phrases or characters choices.
        -:  113: */
        -:  114:
        -:  115:typedef struct {
        -:  116:	/** @brief total page number. */
        -:  117:	int nPage;
        -:  118:	/** @brief current page number. */
        -:  119:	int pageNo;
        -:  120:	/** @brief number of choices per page. */
        -:  121:	int nChoicePerPage;
        -:  122:	/** @brief store possible phrases for being chosen. */
        -:  123:	char totalChoiceStr[ MAX_CHOICE ][ MAX_PHRASE_LEN * MAX_UTF8_SIZE + 1 ];
        -:  124:	/** @brief number of phrases to choose. */
        -:  125:	int nTotalChoice;
        -:  126:	int oldChiSymbolCursor;
        -:  127:	int isSymbol;
        -:  128:} ChoiceInfo;
        -:  129:
        -:  130:/** @brief entry of symbol table */
        -:  131:typedef struct _SymbolEntry {
        -:  132:	/** @brief  nSymnols is total number of symbols in this category.
        -:  133:	 * If nSymbols = 0, category is treat as a symbol,
        -:  134:	 * which is a zero-terminated utf-8 string.
        -:  135:	 * In that case, symbols[] is unused and isn't allocated at all.
        -:  136:	 */
        -:  137:	int nSymbols;
        -:  138:
        -:  139:	/** @brief  Category name of these symbols */
        -:  140:	char category[ MAX_PHRASE_LEN * MAX_UTF8_SIZE + 1 ];
        -:  141:
        -:  142:	/** @brief  Symbols in this category.
        -:  143:	 * This is an char[] array of variable length.
        -:  144:	 * When nSymbols = 0, this array is not allocated.
        -:  145:	 */
        -:  146:	char symbols[][ MAX_UTF8_SIZE + 1 ];
        -:  147:} SymbolEntry;
        -:  148:
        -:  149:typedef struct {
        -:  150:	TreeType *tree;
        -:  151:	size_t tree_size;
        -:  152:#ifdef USE_BINARY_DATA
        -:  153:	plat_mmap tree_mmap;
        -:  154:#endif
        -:  155:
        -:  156:	uint16_t *arrPhone;
        -:  157:	int *char_begin;
        -:  158:	size_t phone_num;
        -:  159:	void *char_;
        -:  160:	void *char_cur_pos;
        -:  161:	int char_end_pos;
        -:  162:#ifdef USE_BINARY_DATA
        -:  163:	plat_mmap char_mmap;
        -:  164:	plat_mmap char_begin_mmap;
        -:  165:	plat_mmap char_phone_mmap;
        -:  166:#else
        -:  167:	FILE *charfile;
        -:  168:#endif
        -:  169:
        -:  170:	int *dict_begin;
        -:  171:	void *dict_cur_pos;
        -:  172:	int dict_end_pos;
        -:  173:
        -:  174:	void *dict;
        -:  175:
        -:  176:#ifdef USE_BINARY_DATA
        -:  177:	plat_mmap dict_mmap;
        -:  178:	plat_mmap index_mmap;
        -:  179:#else
        -:  180:	FILE *dictfile;
        -:  181:#endif
        -:  182:
        -:  183:
        -:  184:	int chewing_lifetime;
        -:  185:
        -:  186:	char hashfilename[ 200 ];
        -:  187:	struct tag_HASH_ITEM *hashtable[ HASH_TABLE_SIZE ];
        -:  188:
        -:  189:	unsigned int n_symbol_entry;
        -:  190:	SymbolEntry ** symbol_table;
        -:  191:
        -:  192:	char *g_easy_symbol_value[ EASY_SYMBOL_KEY_TAB_LEN ];
        -:  193:	int g_easy_symbol_num[ EASY_SYMBOL_KEY_TAB_LEN ];
        -:  194:
        -:  195:	struct keymap *hanyuInitialsMap;
        -:  196:	struct keymap *hanyuFinalsMap;
        -:  197:	int HANYU_INITIALS;
        -:  198:	int HANYU_FINALS;
        -:  199:} ChewingStaticData;
        -:  200:
        -:  201:struct tag_HASH_ITEM;
        -:  202:
        -:  203:typedef struct tag_ChewingData {
        -:  204:	AvailInfo availInfo;
        -:  205:	ChoiceInfo choiceInfo;
        -:  206:	PhrasingOutput phrOut;
        -:  207:	ZuinData zuinData;
        -:  208:	ChewingConfigData config;
        -:  209:    /** @brief current input buffer, content==0 means Chinese code */
        -:  210:	wch_t chiSymbolBuf[ MAX_PHONE_SEQ_LEN ];
        -:  211:	int chiSymbolCursor;
        -:  212:	int chiSymbolBufLen;
        -:  213:	int PointStart;
        -:  214:	int PointEnd;
        -:  215:	wch_t showMsg[ MAX_PHONE_SEQ_LEN ];
        -:  216:	int showMsgLen;
        -:  217:
        -:  218:	uint16_t phoneSeq[ MAX_PHONE_SEQ_LEN ];
        -:  219:	uint16_t phoneSeqAlt[ MAX_PHONE_SEQ_LEN ];
        -:  220:	int nPhoneSeq;
        -:  221:	char selectStr[ MAX_PHONE_SEQ_LEN ][ MAX_PHONE_SEQ_LEN * MAX_UTF8_SIZE + 1 ];
        -:  222:	IntervalType selectInterval[ MAX_PHONE_SEQ_LEN ];
        -:  223:	int nSelect;
        -:  224:	IntervalType preferInterval[ MAX_INTERVAL ]; /* add connect points */
        -:  225:	int nPrefer;
        -:  226:	int bUserArrCnnct[ MAX_PHONE_SEQ_LEN + 1 ];
        -:  227:	int bUserArrBrkpt[ MAX_PHONE_SEQ_LEN + 1 ];
        -:  228:	int bArrBrkpt[ MAX_PHONE_SEQ_LEN + 1 ];
        -:  229:	int bSymbolArrBrkpt[ MAX_PHONE_SEQ_LEN + 1 ];
        -:  230:	/* "bArrBrkpt[10]=True" means "it breaks between 9 and 10" */
        -:  231:	int bChiSym, bSelect, bFirstKey, bFullShape;
        -:  232:	/* Symbol Key buffer */
        -:  233:	char symbolKeyBuf[ MAX_PHONE_SEQ_LEN ];
        -:  234:
        -:  235:	struct tag_HASH_ITEM *prev_userphrase;
        -:  236:	ChewingStaticData static_data;
        -:  237:	void (*logger)( void *data, int level, const char *fmt, ... );
        -:  238:	void *loggerData;
        -:  239:} ChewingData;
        -:  240:
        -:  241:typedef struct {
        -:  242:	/** @brief the content of Edit buffer. */
        -:  243:	wch_t chiSymbolBuf[ MAX_PHONE_SEQ_LEN ];
        -:  244:	/** @brief the length of Edit buffer. */
        -:  245:	int chiSymbolBufLen;
        -:  246:	/** @brief current position of the cursor. */
        -:  247:	long chiSymbolCursor;
        -:  248:	long PointStart;
        -:  249:	long PointEnd;
        -:  250:	/** @brief the zuin-yin symbols have already entered. */
        -:  251:	wch_t zuinBuf[ ZUIN_SIZE ];
        -:  252:	/** @brief indicate the method of showing sentence break. */
        -:  253:	IntervalType dispInterval[ MAX_INTERVAL ]; /* from prefer, considering symbol */
        -:  254:	int nDispInterval;
        -:  255:	/** @brief indicate the break points going to display.*/
        -:  256:	int dispBrkpt[ MAX_PHONE_SEQ_LEN + 1 ];
        -:  257:	/** @brief the string going to commit. */
        -:  258:	wch_t commitStr[ MAX_PHONE_SEQ_LEN ];
        -:  259:	int nCommitStr;
        -:  260:	/** @brief information of character selections. */
        -:  261:	ChoiceInfo* pci;
        -:  262:	/** @brief indicate English mode or Chinese mode. */
        -:  263:	int bChiSym;
        -:  264:	int selKey[ MAX_SELKEY ];
        -:  265:	/** @brief return value. */
        -:  266:	int keystrokeRtn;
        -:  267:	int bShowMsg;
        -:  268:	/** @brief user message. */
        -:  269:	wch_t showMsg[ MAX_PHONE_SEQ_LEN ];
        -:  270:	int showMsgLen;
        -:  271:} ChewingOutput;
        -:  272:/**
        -:  273: *   @struct ChewingOutput
        -:  274: *   @brief  information for Chewing output.
        -:  275: */
        -:  276:
        -:  277:struct _ChewingContext {
        -:  278:	ChewingData *data;
        -:  279:	ChewingOutput *output;
        -:  280:	int cand_no;
        -:  281:	int it_no;
        -:  282:	int kb_no;
        -:  283:};
        -:  284:/**
        -:  285: * @struct ChewingContext
        -:  286: * @brief context of Chewing IM
        -:  287: */
        -:  288:
        -:  289:typedef struct {
        -:  290:	char phrase[ MAX_PHRASE_LEN * MAX_UTF8_SIZE + 1 ];
        -:  291:	int freq;
        -:  292:} Phrase;
        -:  293:
        -:  294:#endif
