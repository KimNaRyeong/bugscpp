        -:    0:Source:/home/workspace/include/internal/memory-private.h
        -:    0:Graph:/home/workspace/build/CMakeFiles/chewing.dir/src/hash.gcno
        -:    0:Data:/home/workspace/build/CMakeFiles/chewing.dir/src/hash.gcda
        -:    0:Runs:1
        -:    1:/**
        -:    2: * memory-private.h
        -:    3: *
        -:    4: * Copyright (c) 2013
        -:    5: *	libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:#ifdef HAVE_CONFIG_H
        -:   12:#  include <config.h>
        -:   13:#endif
        -:   14:
        -:   15:#ifdef HAVE_INTTYPES_H
        -:   16:#  include <inttypes.h>
        -:   17:#elif defined HAVE_STDINT_H
        -:   18:#  include <stdint.h>
        -:   19:#endif
        -:   20:
        -:   21:#ifdef _MSC_VER
        -:   22:#define inline __inline
        -:   23:#endif
        -:   24:
       62:   25:static inline uint16_t GetUint16( const char *ptr )
        -:   26:{
        -:   27:	uint16_t val;
        -:   28:#if WORDS_BIGENDIAN
        -:   29:	val =
        -:   30:		( ptr[0] << 8 ) |
        -:   31:		( ptr[1] << 0 );
        -:   32:#else
       62:   33:	val =
       62:   34:		( ptr[0] << 0 ) |
       62:   35:		( ptr[1] << 8 );
        -:   36:#endif
       62:   37:	return val;
        -:   38:}
        -:   39:
       20:   40:static inline void PutUint16( uint16_t val, char *ptr )
        -:   41:{
        -:   42:#if WORDS_BIGENDIAN
        -:   43:	ptr[0] = ( val >> 8 ) & 0xff;
        -:   44:	ptr[1] = ( val >> 0 ) & 0xff;
        -:   45:#else
       20:   46:	ptr[0] = ( val >> 0 ) & 0xff;
       20:   47:	ptr[1] = ( val >> 8 ) & 0xff;
        -:   48:#endif
       20:   49:}
        -:   50:
      176:   51:static inline int GetInt32( const char *ptr )
        -:   52:{
        -:   53:	int val;
        -:   54:#if WORDS_BIGENDIAN
        -:   55:	val =
        -:   56:		( ptr[0] << 24 ) |
        -:   57:		( ptr[1] << 16 ) |
        -:   58:		( ptr[2] <<  8 ) |
        -:   59:		( ptr[3] <<  0 );
        -:   60:#else
      176:   61:	val =
      176:   62:		( ptr[0] <<  0 ) |
      176:   63:		( ptr[1] <<  8 ) |
      176:   64:		( ptr[2] << 16 ) |
      176:   65:		( ptr[3] << 24 );
        -:   66:#endif
      176:   67:	return val;
        -:   68:}
        -:   69:
       40:   70:static inline void PutInt32( int val, char *ptr )
        -:   71:{
        -:   72:#if WORDS_BIGENDIAN
        -:   73:	ptr[0] = ( val >> 24 ) & 0xff;
        -:   74:	ptr[1] = ( val >> 16 ) & 0xff;
        -:   75:	ptr[2] = ( val >>  8 ) & 0xff;
        -:   76:	ptr[3] = ( val >>  0 ) & 0xff;
        -:   77:#else
       40:   78:	ptr[0] = ( val >>  0 ) & 0xff;
       40:   79:	ptr[1] = ( val >>  8 ) & 0xff;
       40:   80:	ptr[2] = ( val >> 16 ) & 0xff;
       40:   81:	ptr[3] = ( val >> 24 ) & 0xff;
        -:   82:#endif
       40:   83:}
