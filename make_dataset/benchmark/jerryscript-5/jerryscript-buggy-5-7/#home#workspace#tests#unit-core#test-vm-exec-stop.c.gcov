        -:    0:Source:/home/workspace/tests/unit-core/test-vm-exec-stop.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "config.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static jerry_value_t
    #####:   22:vm_exec_stop_callback (void *user_p)
        -:   23:{
    #####:   24:  int *int_p = (int *) user_p;
        -:   25:
    #####:   26:  if (*int_p > 0)
        -:   27:  {
    #####:   28:    (*int_p)--;
        -:   29:
    #####:   30:    return jerry_undefined ();
        -:   31:  }
        -:   32:
    #####:   33:  return jerry_string_sz ("Abort script");
        -:   34:} /* vm_exec_stop_callback */
        -:   35:
        -:   36:int
    #####:   37:main (void)
        -:   38:{
    #####:   39:  TEST_INIT ();
        -:   40:
        -:   41:  /* Test stopping an infinite loop. */
    #####:   42:  if (!jerry_feature_enabled (JERRY_FEATURE_VM_EXEC_STOP))
        -:   43:  {
        -:   44:    return 0;
        -:   45:  }
        -:   46:
    #####:   47:  jerry_init (JERRY_INIT_EMPTY);
        -:   48:
    #####:   49:  int countdown = 6;
    #####:   50:  jerry_halt_handler (16, vm_exec_stop_callback, &countdown);
        -:   51:
    #####:   52:  const jerry_char_t inf_loop_code_src1[] = "while(true) {}";
    #####:   53:  jerry_value_t parsed_code_val = jerry_parse (inf_loop_code_src1, sizeof (inf_loop_code_src1) - 1, NULL);
        -:   54:
    #####:   55:  TEST_ASSERT (!jerry_value_is_exception (parsed_code_val));
    #####:   56:  jerry_value_t res = jerry_run (parsed_code_val);
    #####:   57:  TEST_ASSERT (countdown == 0);
        -:   58:
    #####:   59:  TEST_ASSERT (jerry_value_is_exception (res));
        -:   60:
    #####:   61:  jerry_value_free (res);
    #####:   62:  jerry_value_free (parsed_code_val);
        -:   63:
        -:   64:  /* A more complex example. Although the callback error is captured
        -:   65:   * by the catch block, it is automatically thrown again. */
        -:   66:
        -:   67:  /* We keep the callback function, only the countdown is reset. */
    #####:   68:  countdown = 6;
        -:   69:
    #####:   70:  const jerry_char_t inf_loop_code_src2[] = TEST_STRING_LITERAL ("function f() { while (true) ; }\n"
        -:   71:                                                                 "try { f(); } catch(e) {}");
        -:   72:
    #####:   73:  parsed_code_val = jerry_parse (inf_loop_code_src2, sizeof (inf_loop_code_src2) - 1, NULL);
        -:   74:
    #####:   75:  TEST_ASSERT (!jerry_value_is_exception (parsed_code_val));
    #####:   76:  res = jerry_run (parsed_code_val);
    #####:   77:  TEST_ASSERT (countdown == 0);
        -:   78:
        -:   79:  /* The result must have an error flag which proves that
        -:   80:   * the error is thrown again inside the catch block. */
    #####:   81:  TEST_ASSERT (jerry_value_is_exception (res));
        -:   82:
    #####:   83:  jerry_value_free (res);
    #####:   84:  jerry_value_free (parsed_code_val);
        -:   85:
    #####:   86:  jerry_cleanup ();
    #####:   87:  return 0;
        -:   88:} /* main */
