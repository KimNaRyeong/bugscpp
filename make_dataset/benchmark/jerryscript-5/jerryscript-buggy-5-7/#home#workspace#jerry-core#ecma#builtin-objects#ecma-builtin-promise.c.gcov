        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-promise.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-alloc.h"
        -:   17:#include "ecma-array-object.h"
        -:   18:#include "ecma-builtin-handlers.h"
        -:   19:#include "ecma-builtin-helpers.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-function-object.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-iterator-object.h"
        -:   25:#include "ecma-number-object.h"
        -:   26:#include "ecma-promise-object.h"
        -:   27:
        -:   28:#include "jcontext.h"
        -:   29:
        -:   30:#if JERRY_ESNEXT
        -:   31:
        -:   32:#define ECMA_BUILTINS_INTERNAL
        -:   33:#include "ecma-builtins-internal.h"
        -:   34:
        -:   35:/**
        -:   36: * This object has a custom dispatch function.
        -:   37: */
        -:   38:#define BUILTIN_CUSTOM_DISPATCH
        -:   39:
        -:   40:/**
        -:   41: * List of built-in routine identifiers.
        -:   42: */
        -:   43:enum
        -:   44:{
        -:   45:  ECMA_PROMISE_ROUTINE_START = 0,
        -:   46:  ECMA_PROMISE_ROUTINE_REJECT,
        -:   47:  ECMA_PROMISE_ROUTINE_RESOLVE,
        -:   48:  ECMA_PROMISE_ROUTINE_RACE,
        -:   49:  ECMA_PROMISE_ROUTINE_ALL,
        -:   50:  ECMA_PROMISE_ROUTINE_ALLSETTLED,
        -:   51:  ECMA_PROMISE_ROUTINE_ANY,
        -:   52:  ECMA_PROMISE_ROUTINE_SPECIES_GET
        -:   53:};
        -:   54:
        -:   55:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-promise.inc.h"
        -:   56:#define BUILTIN_UNDERSCORED_ID  promise
        -:   57:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   58:
        -:   59:/** \addtogroup ecma ECMA
        -:   60: * @{
        -:   61: *
        -:   62: * \addtogroup ecmabuiltins
        -:   63: * @{
        -:   64: *
        -:   65: * \addtogroup promise ECMA Promise object built-in
        -:   66: * @{
        -:   67: */
        -:   68:
        -:   69:/**
        -:   70: * Runtime Semantics: PerformPromiseRace.
        -:   71: *
        -:   72: * See also:
        -:   73: *         ES2020 25.6.4.4.1
        -:   74: *
        -:   75: * @return ecma value of the new promise.
        -:   76: *         Returned value must be freed with ecma_free_value.
        -:   77: */
        -:   78:static inline ecma_value_t
    #####:   79:ecma_builtin_promise_perform_race (ecma_value_t iterator, /**< the iterator for race */
        -:   80:                                   ecma_value_t next_method, /**< next method */
        -:   81:                                   ecma_object_t *capability_obj_p, /**< PromiseCapability record */
        -:   82:                                   ecma_value_t ctor, /**< Constructor value */
        -:   83:                                   bool *done_p) /**< [out] iteratorRecord[[done]] */
        -:   84:{
    #####:   85:  JERRY_ASSERT (ecma_is_value_object (iterator));
    #####:   86:  JERRY_ASSERT (ecma_object_class_is (capability_obj_p, ECMA_OBJECT_CLASS_PROMISE_CAPABILITY));
    #####:   87:  JERRY_ASSERT (ecma_is_constructor (ctor));
        -:   88:
    #####:   89:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
        -:   90:
    #####:   91:  ecma_value_t resolve = ecma_op_object_get_by_magic_id (ecma_get_object_from_value (ctor), LIT_MAGIC_STRING_RESOLVE);
        -:   92:
    #####:   93:  if (ECMA_IS_VALUE_ERROR (resolve))
        -:   94:  {
    #####:   95:    return resolve;
        -:   96:  }
        -:   97:
    #####:   98:  if (!ecma_op_is_callable (resolve))
        -:   99:  {
    #####:  100:    ecma_free_value (resolve);
    #####:  101:    return ecma_raise_type_error (ECMA_ERR_RESOLVE_METHOD_MUST_BE_CALLABLE);
        -:  102:  }
        -:  103:
    #####:  104:  ecma_object_t *resolve_func_p = ecma_get_object_from_value (resolve);
    #####:  105:  ecma_value_t ret_value = ECMA_VALUE_ERROR;
        -:  106:
        -:  107:  /* 5. */
        -:  108:  while (true)
    #####:  109:  {
        -:  110:    /* a. */
    #####:  111:    ecma_value_t next = ecma_op_iterator_step (iterator, next_method);
        -:  112:    /* b, c. */
    #####:  113:    if (ECMA_IS_VALUE_ERROR (next))
        -:  114:    {
    #####:  115:      goto done;
        -:  116:    }
        -:  117:
        -:  118:    /* d. */
    #####:  119:    if (ecma_is_value_false (next))
        -:  120:    {
        -:  121:      /* ii. */
    #####:  122:      ret_value = ecma_copy_value (capability_p->header.u.cls.u3.promise);
    #####:  123:      goto done;
        -:  124:    }
        -:  125:
        -:  126:    /* e. */
    #####:  127:    ecma_value_t next_val = ecma_op_iterator_value (next);
    #####:  128:    ecma_free_value (next);
        -:  129:
        -:  130:    /* f, g. */
    #####:  131:    if (ECMA_IS_VALUE_ERROR (next_val))
        -:  132:    {
    #####:  133:      goto done;
        -:  134:    }
        -:  135:
        -:  136:    /* h. */
    #####:  137:    ecma_value_t next_promise = ecma_op_function_call (resolve_func_p, ctor, &next_val, 1);
    #####:  138:    ecma_free_value (next_val);
        -:  139:
    #####:  140:    if (ECMA_IS_VALUE_ERROR (next_promise))
        -:  141:    {
    #####:  142:      goto exit;
        -:  143:    }
        -:  144:
        -:  145:    /* i. */
    #####:  146:    ecma_value_t args[2] = { capability_p->resolve, capability_p->reject };
    #####:  147:    ecma_value_t result = ecma_op_invoke_by_magic_id (next_promise, LIT_MAGIC_STRING_THEN, args, 2);
    #####:  148:    ecma_free_value (next_promise);
        -:  149:
    #####:  150:    if (ECMA_IS_VALUE_ERROR (result))
        -:  151:    {
    #####:  152:      goto exit;
        -:  153:    }
        -:  154:
    #####:  155:    ecma_free_value (result);
        -:  156:  }
        -:  157:
    #####:  158:done:
    #####:  159:  *done_p = true;
    #####:  160:exit:
    #####:  161:  ecma_deref_object (resolve_func_p);
        -:  162:
    #####:  163:  return ret_value;
        -:  164:} /* ecma_builtin_promise_perform_race */
        -:  165:
        -:  166:/**
        -:  167: * Runtime Semantics: Perform Promise all, allSettled or any.
        -:  168: *
        -:  169: * See also:
        -:  170: *         ES2020 25.6.4.1.1
        -:  171: *
        -:  172: * @return ecma value of the new promise.
        -:  173: *         Returned value must be freed with ecma_free_value.
        -:  174: */
        -:  175:static inline ecma_value_t
    #####:  176:ecma_builtin_promise_perform (ecma_value_t iterator, /**< iteratorRecord */
        -:  177:                              ecma_value_t next_method, /**< next method */
        -:  178:                              ecma_object_t *capability_obj_p, /**< PromiseCapability record */
        -:  179:                              ecma_value_t ctor, /**< the caller of Promise.all */
        -:  180:                              uint8_t builtin_routine_id, /**< built-in wide routine identifier */
        -:  181:                              bool *done_p) /**< [out] iteratorRecord[[done]] */
        -:  182:{
        -:  183:  /* 1. - 2. */
    #####:  184:  JERRY_ASSERT (ecma_object_class_is (capability_obj_p, ECMA_OBJECT_CLASS_PROMISE_CAPABILITY));
    #####:  185:  JERRY_ASSERT (ecma_is_constructor (ctor));
        -:  186:
    #####:  187:  ecma_promise_capabality_t *capability_p = (ecma_promise_capabality_t *) capability_obj_p;
        -:  188:
    #####:  189:  ecma_value_t resolve = ecma_op_object_get_by_magic_id (ecma_get_object_from_value (ctor), LIT_MAGIC_STRING_RESOLVE);
        -:  190:
    #####:  191:  if (ECMA_IS_VALUE_ERROR (resolve))
        -:  192:  {
    #####:  193:    return resolve;
        -:  194:  }
        -:  195:
    #####:  196:  if (!ecma_op_is_callable (resolve))
        -:  197:  {
    #####:  198:    ecma_free_value (resolve);
    #####:  199:    return ecma_raise_type_error (ECMA_ERR_RESOLVE_METHOD_MUST_BE_CALLABLE);
        -:  200:  }
        -:  201:
    #####:  202:  ecma_object_t *resolve_func_p = ecma_get_object_from_value (resolve);
        -:  203:
        -:  204:  /* 3. */
    #####:  205:  ecma_object_t *values_array_obj_p = ecma_op_new_array_object (0);
    #####:  206:  ecma_value_t values_array = ecma_make_object_value (values_array_obj_p);
        -:  207:  /* 4. */
    #####:  208:  ecma_value_t remaining = ecma_op_create_number_object (ecma_make_integer_value (1));
        -:  209:  /* 5. */
    #####:  210:  uint32_t idx = 0;
        -:  211:
    #####:  212:  ecma_value_t ret_value = ECMA_VALUE_ERROR;
        -:  213:
        -:  214:  /* 6. */
        -:  215:  while (true)
    #####:  216:  {
        -:  217:    /* a. */
    #####:  218:    ecma_value_t next = ecma_op_iterator_step (iterator, next_method);
        -:  219:    /* b. - c. */
    #####:  220:    if (ECMA_IS_VALUE_ERROR (next))
        -:  221:    {
    #####:  222:      goto done;
        -:  223:    }
        -:  224:
        -:  225:    /* d. */
    #####:  226:    if (ecma_is_value_false (next))
        -:  227:    {
        -:  228:      /* ii. - iii. */
    #####:  229:      if (ecma_promise_remaining_inc_or_dec (remaining, false) == 0)
        -:  230:      {
    #####:  231:        if (builtin_routine_id == ECMA_PROMISE_ROUTINE_ANY)
        -:  232:        {
    #####:  233:          ret_value = ecma_raise_aggregate_error (values_array, ECMA_VALUE_UNDEFINED);
    #####:  234:          goto done;
        -:  235:        }
        -:  236:
        -:  237:        /* 2. */
    #####:  238:        ecma_value_t resolve_result = ecma_op_function_call (ecma_get_object_from_value (capability_p->resolve),
        -:  239:                                                             ECMA_VALUE_UNDEFINED,
        -:  240:                                                             &values_array,
        -:  241:                                                             1);
        -:  242:        /* 3. */
    #####:  243:        if (ECMA_IS_VALUE_ERROR (resolve_result))
        -:  244:        {
    #####:  245:          goto done;
        -:  246:        }
        -:  247:
    #####:  248:        ecma_free_value (resolve_result);
        -:  249:      }
        -:  250:
        -:  251:      /* iv. */
    #####:  252:      ret_value = ecma_copy_value (capability_p->header.u.cls.u3.promise);
    #####:  253:      goto done;
        -:  254:    }
        -:  255:
        -:  256:    /* e. */
    #####:  257:    ecma_value_t next_value = ecma_op_iterator_value (next);
    #####:  258:    ecma_free_value (next);
        -:  259:
        -:  260:    /* f. - g. */
    #####:  261:    if (ECMA_IS_VALUE_ERROR (next_value))
        -:  262:    {
    #####:  263:      goto done;
        -:  264:    }
        -:  265:
        -:  266:    /* h. */
    #####:  267:    ecma_builtin_helper_def_prop_by_index (values_array_obj_p,
        -:  268:                                           idx,
        -:  269:                                           ECMA_VALUE_UNDEFINED,
        -:  270:                                           ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE);
        -:  271:
        -:  272:    /* i. */
    #####:  273:    ecma_value_t next_promise = ecma_op_function_call (resolve_func_p, ctor, &next_value, 1);
    #####:  274:    ecma_free_value (next_value);
        -:  275:
        -:  276:    /* j. */
    #####:  277:    if (ECMA_IS_VALUE_ERROR (next_promise))
        -:  278:    {
    #####:  279:      goto exit;
        -:  280:    }
        -:  281:
    #####:  282:    if (JERRY_UNLIKELY (idx == UINT32_MAX - 1))
        -:  283:    {
    #####:  284:      ecma_raise_range_error (ECMA_ERR_PROMISE_ALL_REMAINING_ELEMENTS_LIMIT_REACHED);
    #####:  285:      goto exit;
        -:  286:    }
        -:  287:
    #####:  288:    idx++;
    #####:  289:    ecma_value_t args[2];
    #####:  290:    ecma_object_t *executor_func_p = NULL;
        -:  291:
    #####:  292:    if (builtin_routine_id != ECMA_PROMISE_ROUTINE_ANY)
        -:  293:    {
        -:  294:      /* k. */
    #####:  295:      executor_func_p =
        -:  296:        ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROMISE_ALL_HELPER, sizeof (ecma_promise_all_executor_t));
        -:  297:
    #####:  298:      ecma_promise_all_executor_t *executor_p = (ecma_promise_all_executor_t *) executor_func_p;
        -:  299:
        -:  300:      /* m. + t. */
    #####:  301:      executor_p->index = idx;
        -:  302:
        -:  303:      /* n. */
    #####:  304:      executor_p->values = values_array;
        -:  305:
        -:  306:      /* o. */
    #####:  307:      executor_p->capability = ecma_make_object_value (capability_obj_p);
        -:  308:
        -:  309:      /* p. */
    #####:  310:      executor_p->remaining_elements = remaining;
        -:  311:
    #####:  312:      uint8_t executor_type = ECMA_PROMISE_ALL_RESOLVE << ECMA_NATIVE_HANDLER_COMMON_FLAGS_SHIFT;
        -:  313:
    #####:  314:      if (builtin_routine_id == ECMA_PROMISE_ROUTINE_ALLSETTLED)
        -:  315:      {
    #####:  316:        executor_type = ECMA_PROMISE_ALLSETTLED_RESOLVE << ECMA_NATIVE_HANDLER_COMMON_FLAGS_SHIFT;
        -:  317:      }
        -:  318:
    #####:  319:      executor_p->header.u.built_in.u2.routine_flags |= executor_type;
        -:  320:
    #####:  321:      args[0] = ecma_make_object_value (executor_func_p);
        -:  322:    }
        -:  323:    else
        -:  324:    {
    #####:  325:      args[0] = capability_p->resolve;
        -:  326:    }
        -:  327:
        -:  328:    /* q. */
    #####:  329:    ecma_promise_remaining_inc_or_dec (remaining, true);
        -:  330:    ecma_value_t result;
        -:  331:
    #####:  332:    if (builtin_routine_id != ECMA_PROMISE_ROUTINE_ALL)
        -:  333:    {
    #####:  334:      uint8_t executor_type = ECMA_PROMISE_ALLSETTLED_REJECT << ECMA_NATIVE_HANDLER_COMMON_FLAGS_SHIFT;
        -:  335:
    #####:  336:      if (builtin_routine_id == ECMA_PROMISE_ROUTINE_ANY)
        -:  337:      {
    #####:  338:        executor_type = ECMA_PROMISE_ANY_REJECT << ECMA_NATIVE_HANDLER_COMMON_FLAGS_SHIFT;
        -:  339:      }
        -:  340:
    #####:  341:      ecma_object_t *reject_func_p =
        -:  342:        ecma_op_create_native_handler (ECMA_NATIVE_HANDLER_PROMISE_ALL_HELPER, sizeof (ecma_promise_all_executor_t));
        -:  343:
    #####:  344:      ecma_promise_all_executor_t *reject_p = (ecma_promise_all_executor_t *) reject_func_p;
    #####:  345:      reject_p->index = idx;
    #####:  346:      reject_p->values = values_array;
    #####:  347:      reject_p->capability = ecma_make_object_value (capability_obj_p);
    #####:  348:      reject_p->remaining_elements = remaining;
    #####:  349:      reject_p->header.u.built_in.u2.routine_flags |= executor_type;
    #####:  350:      args[1] = ecma_make_object_value (reject_func_p);
    #####:  351:      result = ecma_op_invoke_by_magic_id (next_promise, LIT_MAGIC_STRING_THEN, args, 2);
    #####:  352:      ecma_deref_object (reject_func_p);
        -:  353:    }
        -:  354:    else
        -:  355:    {
    #####:  356:      args[1] = capability_p->reject;
    #####:  357:      result = ecma_op_invoke_by_magic_id (next_promise, LIT_MAGIC_STRING_THEN, args, 2);
        -:  358:    }
        -:  359:
    #####:  360:    ecma_free_value (next_promise);
        -:  361:
    #####:  362:    if (builtin_routine_id != ECMA_PROMISE_ROUTINE_ANY)
        -:  363:    {
    #####:  364:      ecma_deref_object (executor_func_p);
        -:  365:    }
        -:  366:
        -:  367:    /* s. */
    #####:  368:    if (ECMA_IS_VALUE_ERROR (result))
        -:  369:    {
    #####:  370:      goto exit;
        -:  371:    }
        -:  372:
    #####:  373:    ecma_free_value (result);
        -:  374:  }
        -:  375:
    #####:  376:done:
    #####:  377:  *done_p = true;
    #####:  378:exit:
    #####:  379:  ecma_free_value (remaining);
    #####:  380:  ecma_deref_object (values_array_obj_p);
    #####:  381:  ecma_deref_object (resolve_func_p);
        -:  382:
    #####:  383:  return ret_value;
        -:  384:} /* ecma_builtin_promise_perform */
        -:  385:
        -:  386:/**
        -:  387: * The common function for Promise.race, Promise.all, Promise.any and Promise.allSettled.
        -:  388: *
        -:  389: * @return ecma value of the new promise.
        -:  390: *         Returned value must be freed with ecma_free_value.
        -:  391: */
        -:  392:static ecma_value_t
    #####:  393:ecma_builtin_promise_helper (ecma_value_t this_arg, /**< 'this' argument */
        -:  394:                             ecma_value_t iterable, /**< the items to be resolved */
        -:  395:                             uint8_t builtin_routine_id) /**< built-in wide routine identifier */
        -:  396:{
    #####:  397:  ecma_object_t *capability_obj_p = ecma_promise_new_capability (this_arg, ECMA_VALUE_UNDEFINED);
        -:  398:
    #####:  399:  if (JERRY_UNLIKELY (capability_obj_p == NULL))
        -:  400:  {
    #####:  401:    return ECMA_VALUE_ERROR;
        -:  402:  }
        -:  403:
    #####:  404:  ecma_value_t next_method;
    #####:  405:  ecma_value_t iterator = ecma_op_get_iterator (iterable, ECMA_VALUE_SYNC_ITERATOR, &next_method);
    #####:  406:  ecma_value_t ret = ECMA_VALUE_ERROR;
        -:  407:
    #####:  408:  if (ECMA_IS_VALUE_ERROR (ecma_op_if_abrupt_reject_promise (&iterator, capability_obj_p)))
        -:  409:  {
    #####:  410:    ecma_free_value (next_method);
    #####:  411:    ecma_deref_object (capability_obj_p);
    #####:  412:    return iterator;
        -:  413:  }
        -:  414:
    #####:  415:  bool is_done = false;
        -:  416:
    #####:  417:  if (builtin_routine_id == ECMA_PROMISE_ROUTINE_RACE)
        -:  418:  {
    #####:  419:    ret = ecma_builtin_promise_perform_race (iterator, next_method, capability_obj_p, this_arg, &is_done);
        -:  420:  }
        -:  421:  else
        -:  422:  {
    #####:  423:    ret =
    #####:  424:      ecma_builtin_promise_perform (iterator, next_method, capability_obj_p, this_arg, builtin_routine_id, &is_done);
        -:  425:  }
        -:  426:
    #####:  427:  if (ECMA_IS_VALUE_ERROR (ret))
        -:  428:  {
    #####:  429:    if (!is_done)
        -:  430:    {
    #####:  431:      ret = ecma_op_iterator_close (iterator);
        -:  432:    }
        -:  433:
    #####:  434:    ecma_op_if_abrupt_reject_promise (&ret, capability_obj_p);
        -:  435:  }
        -:  436:
    #####:  437:  ecma_free_value (iterator);
    #####:  438:  ecma_free_value (next_method);
    #####:  439:  ecma_deref_object (capability_obj_p);
        -:  440:
    #####:  441:  return ret;
        -:  442:} /* ecma_builtin_promise_helper */
        -:  443:
        -:  444:/**
        -:  445: * Handle calling [[Call]] of built-in Promise object.
        -:  446: *
        -:  447: * ES2015 25.4.3 Promise is not intended to be called
        -:  448: * as a function and will throw an exception when called
        -:  449: * in that manner.
        -:  450: *
        -:  451: * @return ecma value
        -:  452: */
        -:  453:ecma_value_t
    #####:  454:ecma_builtin_promise_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  455:                                    uint32_t arguments_list_len) /**< number of arguments */
        -:  456:{
    #####:  457:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  458:
    #####:  459:  return ecma_raise_type_error (ECMA_ERR_CONSTRUCTOR_PROMISE_REQUIRES_NEW);
        -:  460:} /* ecma_builtin_promise_dispatch_call */
        -:  461:
        -:  462:/**
        -:  463: * Handle calling [[Construct]] of built-in Promise object.
        -:  464: *
        -:  465: * @return ecma value
        -:  466: */
        -:  467:ecma_value_t
    #####:  468:ecma_builtin_promise_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  469:                                         uint32_t arguments_list_len) /**< number of arguments */
        -:  470:{
    #####:  471:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  472:
    #####:  473:  if (arguments_list_len == 0 || !ecma_op_is_callable (arguments_list_p[0]))
        -:  474:  {
    #####:  475:    return ecma_raise_type_error (ECMA_ERR_FIRST_PARAMETER_MUST_BE_CALLABLE);
        -:  476:  }
        -:  477:
    #####:  478:  return ecma_op_create_promise_object (arguments_list_p[0],
        -:  479:                                        ECMA_VALUE_UNDEFINED,
        -:  480:                                        JERRY_CONTEXT (current_new_target_p));
        -:  481:} /* ecma_builtin_promise_dispatch_construct */
        -:  482:
        -:  483:/**
        -:  484: * Dispatcher of the built-in's routines
        -:  485: *
        -:  486: * @return ecma value
        -:  487: *         Returned value must be freed with ecma_free_value.
        -:  488: */
        -:  489:ecma_value_t
    #####:  490:ecma_builtin_promise_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine
        -:  491:                                                                    *   identifier */
        -:  492:                                       ecma_value_t this_arg, /**< 'this' argument value */
        -:  493:                                       const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  494:                                                                               *   passed to routine */
        -:  495:                                       uint32_t arguments_number) /**< length of arguments' list */
        -:  496:{
        -:  497:  JERRY_UNUSED (arguments_number);
        -:  498:
    #####:  499:  switch (builtin_routine_id)
        -:  500:  {
    #####:  501:    case ECMA_PROMISE_ROUTINE_REJECT:
        -:  502:    case ECMA_PROMISE_ROUTINE_RESOLVE:
        -:  503:    {
    #####:  504:      bool is_resolve = (builtin_routine_id == ECMA_PROMISE_ROUTINE_RESOLVE);
    #####:  505:      return ecma_promise_reject_or_resolve (this_arg, arguments_list_p[0], is_resolve);
        -:  506:    }
    #####:  507:    case ECMA_PROMISE_ROUTINE_RACE:
        -:  508:    case ECMA_PROMISE_ROUTINE_ALL:
        -:  509:    case ECMA_PROMISE_ROUTINE_ALLSETTLED:
        -:  510:    case ECMA_PROMISE_ROUTINE_ANY:
        -:  511:    {
    #####:  512:      return ecma_builtin_promise_helper (this_arg, arguments_list_p[0], builtin_routine_id);
        -:  513:    }
    #####:  514:    case ECMA_PROMISE_ROUTINE_SPECIES_GET:
        -:  515:    {
    #####:  516:      return ecma_copy_value (this_arg);
        -:  517:    }
    #####:  518:    default:
        -:  519:    {
    #####:  520:      JERRY_UNREACHABLE ();
        -:  521:    }
        -:  522:  }
        -:  523:} /* ecma_builtin_promise_dispatch_routine */
        -:  524:
        -:  525:/**
        -:  526: * @}
        -:  527: * @}
        -:  528: * @}
        -:  529: */
        -:  530:
        -:  531:#endif /* JERRY_ESNEXT */
