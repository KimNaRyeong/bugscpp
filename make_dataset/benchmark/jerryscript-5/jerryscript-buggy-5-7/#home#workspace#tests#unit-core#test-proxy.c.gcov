        -:    0:Source:/home/workspace/tests/unit-core/test-proxy.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "config.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:/** Test in Proxy on C side. Equivalent test code in JS:
        -:   22:
        -:   23:var demo = 0.0;
        -:   24:
        -:   25:var target = {};
        -:   26:var handler = {
        -:   27:    get: function (target, name, recv) {
        -:   28:        assert (typeof (target) === 'object');
        -:   29:        assert (name === 'value');
        -:   30:        assert (typeof (recv) === 'object');
        -:   31:        return demo++;
        -:   32:    }
        -:   33:
        -:   34:    set: function (target, name, value, recv) {
        -:   35:        assert (typeof (target) === 'object');
        -:   36:        assert (name === 'value');
        -:   37:        assert (typeof (recv) === 'object');
        -:   38:        demo = 55;
        -:   39:        return demo;
        -:   40:    }
        -:   41:};
        -:   42:
        -:   43:var pdemo = new Proxy(target, handler);
        -:   44:
        -:   45:assert (pdemo.value === 1.0);
        -:   46:assert (pdemo.value === 1.0);
        -:   47:assert (pdemo.value === 2.0);
        -:   48:
        -:   49:pdemo.value = 55;
        -:   50:
        -:   51:assert (pdemo.value === 56);
        -:   52:
        -:   53:pdemo.value = 12;
        -:   54:
        -:   55:assert (pdemo.value === 13);
        -:   56: */
        -:   57:
        -:   58:static int demo_value = 0;
        -:   59:
        -:   60:static jerry_value_t
    #####:   61:handler_get (const jerry_call_info_t *call_info_p, /**< call information */
        -:   62:             const jerry_value_t args_p[], /**< function arguments */
        -:   63:             const jerry_length_t args_count) /**< number of function arguments */
        -:   64:{
        -:   65:  JERRY_UNUSED (call_info_p);
        -:   66:
    #####:   67:  TEST_ASSERT (args_count == 3);
    #####:   68:  TEST_ASSERT (jerry_value_is_object (args_p[0])); /* target */
    #####:   69:  TEST_ASSERT (jerry_value_is_string (args_p[1])); /* P */
    #####:   70:  TEST_ASSERT (jerry_value_is_object (args_p[2])); /* receiver */
        -:   71:
    #####:   72:  const char expected[] = "value";
        -:   73:  char buffer[10];
    #####:   74:  jerry_size_t copied = jerry_string_to_buffer (args_p[1], JERRY_ENCODING_CESU8, (jerry_char_t *) buffer, 10);
        -:   75:
    #####:   76:  TEST_ASSERT (copied == 5);
    #####:   77:  TEST_ASSERT (strncmp (expected, buffer, 5) == 0);
        -:   78:
    #####:   79:  demo_value++;
        -:   80:
    #####:   81:  return jerry_number (demo_value);
        -:   82:} /* handler_get */
        -:   83:
        -:   84:static jerry_value_t
    #####:   85:handler_set (const jerry_call_info_t *call_info_p, /**< call information */
        -:   86:             const jerry_value_t args_p[], /**< function arguments */
        -:   87:             const jerry_length_t args_count) /**< number of function arguments */
        -:   88:{
        -:   89:  JERRY_UNUSED (call_info_p);
        -:   90:  JERRY_UNUSED (args_p);
        -:   91:  JERRY_UNUSED (args_count);
        -:   92:
    #####:   93:  TEST_ASSERT (args_count == 4);
    #####:   94:  TEST_ASSERT (jerry_value_is_object (args_p[0])); /* target */
    #####:   95:  TEST_ASSERT (jerry_value_is_string (args_p[1])); /* P */
    #####:   96:  TEST_ASSERT (jerry_value_is_number (args_p[2])); /* V */
    #####:   97:  TEST_ASSERT (jerry_value_is_object (args_p[3])); /* receiver */
        -:   98:
    #####:   99:  const char expected[] = "value";
        -:  100:  char buffer[10];
    #####:  101:  jerry_size_t copied = jerry_string_to_buffer (args_p[1], JERRY_ENCODING_CESU8, (jerry_char_t *) buffer, 10);
        -:  102:
    #####:  103:  TEST_ASSERT (copied == 5);
    #####:  104:  TEST_ASSERT (strncmp (expected, buffer, 5) == 0);
        -:  105:
    #####:  106:  TEST_ASSERT (jerry_value_is_number (args_p[2]));
    #####:  107:  demo_value = (int) jerry_value_as_number (args_p[2]);
        -:  108:
    #####:  109:  return jerry_number (demo_value);
        -:  110:} /* handler_set */
        -:  111:
        -:  112:static void
    #####:  113:set_property (jerry_value_t target, /**< target object */
        -:  114:              const char *name_p, /**< name of the property */
        -:  115:              jerry_value_t value) /**< value of the property */
        -:  116:{
    #####:  117:  jerry_value_t name_val = jerry_string_sz (name_p);
    #####:  118:  jerry_value_t result_val = jerry_object_set (target, name_val, value);
        -:  119:
    #####:  120:  TEST_ASSERT (jerry_value_is_boolean (result_val));
    #####:  121:  TEST_ASSERT (jerry_value_is_true (result_val));
    #####:  122:  jerry_value_free (name_val);
    #####:  123:} /* set_property */
        -:  124:
        -:  125:static jerry_value_t
    #####:  126:get_property (jerry_value_t target, /**< target object */
        -:  127:              const char *name_p) /**< name of the property */
        -:  128:{
    #####:  129:  jerry_value_t name_val = jerry_string_sz (name_p);
    #####:  130:  jerry_value_t result_val = jerry_object_get (target, name_val);
        -:  131:
    #####:  132:  TEST_ASSERT (!jerry_value_is_exception (result_val));
    #####:  133:  jerry_value_free (name_val);
    #####:  134:  return result_val;
        -:  135:} /* get_property */
        -:  136:
        -:  137:static void
    #####:  138:set_function (jerry_value_t target, /**< target object */
        -:  139:              const char *name_p, /**< name of the function */
        -:  140:              jerry_external_handler_t handler_p) /**< function callback */
        -:  141:{
    #####:  142:  jerry_value_t function_val = jerry_function_external (handler_p);
    #####:  143:  set_property (target, name_p, function_val);
    #####:  144:  jerry_value_free (function_val);
    #####:  145:} /* set_function */
        -:  146:
        -:  147:struct test_data
        -:  148:{
        -:  149:  int value;
        -:  150:};
        -:  151:
        -:  152:static void
    #####:  153:proxy_native_freecb (void *native_p, /**< native pointer */
        -:  154:                     jerry_object_native_info_t *info_p) /**< native info */
        -:  155:{
    #####:  156:  TEST_ASSERT (native_p != NULL);
    #####:  157:  TEST_ASSERT (info_p->free_cb == proxy_native_freecb);
    #####:  158:  struct test_data *data_p = (struct test_data *) native_p;
    #####:  159:  data_p->value = -1;
    #####:  160:} /* proxy_native_freecb */
        -:  161:
        -:  162:static const jerry_object_native_info_t proxy_native_info = {
        -:  163:  .free_cb = proxy_native_freecb,
        -:  164:  .number_of_references = 0,
        -:  165:  .offset_of_references = 0,
        -:  166:};
        -:  167:
        -:  168:static jerry_value_t
    #####:  169:proxy_native_handler_get (const jerry_call_info_t *call_info_p, /**< call information */
        -:  170:                          const jerry_value_t args_p[], /**< function arguments */
        -:  171:                          const jerry_length_t args_count) /**< number of function arguments */
        -:  172:{
        -:  173:  JERRY_UNUSED (call_info_p);
    #####:  174:  TEST_ASSERT (args_count == 3);
        -:  175:
        -:  176:  /* 3rd argument (Receiver) should be the Proxy here. */
    #####:  177:  jerry_value_t receiver = args_p[2];
    #####:  178:  TEST_ASSERT (jerry_value_is_proxy (receiver));
        -:  179:
        -:  180:  /* Check if proxy has the native ptr. */
    #####:  181:  TEST_ASSERT (jerry_object_has_native_ptr (receiver, &proxy_native_info));
    #####:  182:  struct test_data *native_p = jerry_object_get_native_ptr (receiver, &proxy_native_info);
    #####:  183:  TEST_ASSERT (native_p != NULL);
        -:  184:
    #####:  185:  native_p->value <<= 1;
    #####:  186:  return jerry_number (native_p->value);
        -:  187:} /* proxy_native_handler_get */
        -:  188:
        -:  189:/**
        -:  190: * Test Proxy with added native object.
        -:  191: */
        -:  192:static void
    #####:  193:test_proxy_native (void)
        -:  194:{
    #####:  195:  jerry_value_t handler = jerry_object ();
    #####:  196:  set_function (handler, "get", proxy_native_handler_get);
        -:  197:
    #####:  198:  jerry_value_t target = jerry_object ();
    #####:  199:  jerry_value_t proxy = jerry_proxy (target, handler);
        -:  200:
    #####:  201:  struct test_data *data = (struct test_data *) malloc (sizeof (struct test_data));
    #####:  202:  data->value = 2;
    #####:  203:  jerry_object_set_native_ptr (proxy, &proxy_native_info, data);
        -:  204:
        -:  205:  /* Call: proxy[10] */
    #####:  206:  jerry_value_t result_for_10 = jerry_object_get_index (proxy, 10);
    #####:  207:  TEST_ASSERT (jerry_value_is_number (result_for_10));
    #####:  208:  TEST_ASSERT (jerry_value_as_number (result_for_10) == 4.0);
        -:  209:
        -:  210:  /* Call: proxy[5] */
    #####:  211:  data->value = 8;
    #####:  212:  jerry_value_t result_for_5 = jerry_object_get_index (proxy, 5);
    #####:  213:  TEST_ASSERT (jerry_value_is_number (result_for_5));
    #####:  214:  TEST_ASSERT (jerry_value_as_number (result_for_5) == 16.0);
        -:  215:
    #####:  216:  jerry_value_free (handler);
    #####:  217:  jerry_value_free (target);
    #####:  218:  jerry_value_free (proxy);
    #####:  219:} /* test_proxy_native */
        -:  220:
        -:  221:int
    #####:  222:main (void)
        -:  223:{
    #####:  224:  TEST_INIT ();
        -:  225:
    #####:  226:  if (!jerry_feature_enabled (JERRY_FEATURE_PROXY))
        -:  227:  {
    #####:  228:    printf ("Skipping test, Proxy not enabled\n");
    #####:  229:    return 0;
        -:  230:  }
        -:  231:
    #####:  232:  jerry_init (JERRY_INIT_EMPTY);
        -:  233:
    #####:  234:  jerry_value_t handler = jerry_object ();
        -:  235:  {
    #####:  236:    set_function (handler, "get", handler_get);
    #####:  237:    set_function (handler, "set", handler_set);
        -:  238:  }
        -:  239:
    #####:  240:  jerry_value_t target = jerry_object ();
    #####:  241:  jerry_value_t proxy = jerry_proxy (target, handler);
        -:  242:  {
    #####:  243:    jerry_value_t global = jerry_current_realm ();
    #####:  244:    set_property (global, "pdemo", proxy);
    #####:  245:    jerry_value_free (global);
        -:  246:  }
        -:  247:
    #####:  248:  const jerry_char_t get_value_src[] = TEST_STRING_LITERAL ("pdemo.value");
    #####:  249:  jerry_value_t parsed_get_code_val = jerry_parse (get_value_src, sizeof (get_value_src) - 1, NULL);
    #####:  250:  TEST_ASSERT (!jerry_value_is_exception (parsed_get_code_val));
        -:  251:
        -:  252:  {
    #####:  253:    jerry_value_t res = jerry_run (parsed_get_code_val);
    #####:  254:    TEST_ASSERT (jerry_value_is_number (res));
    #####:  255:    TEST_ASSERT (jerry_value_as_number (res) == 1.0);
    #####:  256:    jerry_value_free (res);
        -:  257:  }
        -:  258:
        -:  259:  {
    #####:  260:    jerry_value_t res = get_property (proxy, "value");
    #####:  261:    TEST_ASSERT (jerry_value_is_number (res));
    #####:  262:    TEST_ASSERT (jerry_value_as_number (res) == 2.0);
    #####:  263:    jerry_value_free (res);
        -:  264:  }
        -:  265:
        -:  266:  {
    #####:  267:    jerry_value_t res = jerry_run (parsed_get_code_val);
    #####:  268:    TEST_ASSERT (jerry_value_is_number (res));
    #####:  269:    TEST_ASSERT (jerry_value_as_number (res) == 3.0);
    #####:  270:    jerry_value_free (res);
        -:  271:  }
        -:  272:
    #####:  273:  const jerry_char_t set_value_src[] = TEST_STRING_LITERAL ("pdemo.value = 55");
    #####:  274:  jerry_value_t parsed_set_code_val = jerry_parse (set_value_src, sizeof (set_value_src) - 1, NULL);
    #####:  275:  TEST_ASSERT (!jerry_value_is_exception (parsed_set_code_val));
        -:  276:
        -:  277:  {
    #####:  278:    jerry_value_t res = jerry_run (parsed_set_code_val);
    #####:  279:    TEST_ASSERT (jerry_value_is_number (res));
    #####:  280:    TEST_ASSERT (jerry_value_as_number (res) == 55);
    #####:  281:    jerry_value_free (res);
        -:  282:  }
        -:  283:
        -:  284:  {
    #####:  285:    jerry_value_t res = jerry_run (parsed_get_code_val);
    #####:  286:    TEST_ASSERT (jerry_value_is_number (res));
    #####:  287:    TEST_ASSERT (jerry_value_as_number (res) == 56);
    #####:  288:    jerry_value_free (res);
        -:  289:  }
        -:  290:
        -:  291:  {
    #####:  292:    jerry_value_t new_value = jerry_number (12);
    #####:  293:    set_property (proxy, "value", new_value);
    #####:  294:    jerry_value_free (new_value);
        -:  295:  }
        -:  296:
        -:  297:  {
    #####:  298:    jerry_value_t res = get_property (proxy, "value");
    #####:  299:    TEST_ASSERT (jerry_value_is_number (res));
    #####:  300:    TEST_ASSERT (jerry_value_as_number (res) == 13.0);
    #####:  301:    jerry_value_free (res);
        -:  302:  }
        -:  303:
    #####:  304:  jerry_value_free (parsed_set_code_val);
    #####:  305:  jerry_value_free (parsed_get_code_val);
    #####:  306:  jerry_value_free (proxy);
    #####:  307:  jerry_value_free (target);
    #####:  308:  jerry_value_free (handler);
        -:  309:
        -:  310:  {
    #####:  311:    const jerry_char_t has_value_src[] = TEST_STRING_LITERAL ("new Proxy({}, {\n"
        -:  312:                                                              "  has: function(target, key) { throw 33 }\n"
        -:  313:                                                              "})");
    #####:  314:    jerry_value_t parsed_has_code_val = jerry_parse (has_value_src, sizeof (has_value_src) - 1, NULL);
    #####:  315:    TEST_ASSERT (!jerry_value_is_exception (parsed_has_code_val));
        -:  316:
    #####:  317:    jerry_value_t res = jerry_run (parsed_has_code_val);
    #####:  318:    jerry_value_free (parsed_has_code_val);
    #####:  319:    TEST_ASSERT (jerry_value_is_proxy (res));
        -:  320:
    #####:  321:    jerry_value_t name = jerry_string_sz ("key");
    #####:  322:    TEST_ASSERT (jerry_value_is_string (name));
    #####:  323:    jerry_value_t property = jerry_object_has (res, name);
    #####:  324:    jerry_value_free (name);
    #####:  325:    jerry_value_free (res);
        -:  326:
    #####:  327:    TEST_ASSERT (jerry_value_is_exception (property));
    #####:  328:    property = jerry_exception_value (property, true);
    #####:  329:    TEST_ASSERT (jerry_value_as_number (property) == 33);
    #####:  330:    jerry_value_free (property);
        -:  331:  }
        -:  332:
    #####:  333:  target = jerry_object ();
    #####:  334:  handler = jerry_object ();
    #####:  335:  proxy = jerry_proxy (target, handler);
        -:  336:
        -:  337:  {
    #####:  338:    jerry_value_t res = jerry_proxy_target (proxy);
    #####:  339:    TEST_ASSERT (res == target);
    #####:  340:    jerry_value_free (res);
        -:  341:
    #####:  342:    res = jerry_proxy_handler (proxy);
    #####:  343:    TEST_ASSERT (res == handler);
    #####:  344:    jerry_value_free (res);
        -:  345:
    #####:  346:    res = jerry_proxy_target (target);
    #####:  347:    TEST_ASSERT (jerry_value_is_exception (res));
    #####:  348:    res = jerry_exception_value (res, true);
    #####:  349:    TEST_ASSERT (jerry_error_type (res) == JERRY_ERROR_TYPE);
    #####:  350:    jerry_value_free (res);
        -:  351:
    #####:  352:    res = jerry_proxy_handler (handler);
    #####:  353:    TEST_ASSERT (jerry_value_is_exception (res));
    #####:  354:    res = jerry_exception_value (res, true);
    #####:  355:    TEST_ASSERT (jerry_error_type (res) == JERRY_ERROR_TYPE);
    #####:  356:    jerry_value_free (res);
        -:  357:  }
        -:  358:
    #####:  359:  jerry_value_free (proxy);
    #####:  360:  jerry_value_free (handler);
    #####:  361:  jerry_value_free (target);
        -:  362:
    #####:  363:  test_proxy_native ();
        -:  364:
    #####:  365:  jerry_cleanup ();
    #####:  366:  return 0;
        -:  367:} /* main */
