        -:    0:Source:/home/workspace/jerry-ext/handler/handler-assert.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <inttypes.h>
        -:   17:
        -:   18:#include "jerryscript-port.h"
        -:   19:
        -:   20:#include "jerryscript-ext/handler.h"
        -:   21:
        -:   22:/**
        -:   23: * Hard assert for scripts. The routine calls jerry_port_fatal on assertion failure.
        -:   24: *
        -:   25: * Notes:
        -:   26: *  * If the `JERRY_FEATURE_LINE_INFO` runtime feature is enabled (build option: `JERRY_LINE_INFO`)
        -:   27: *    a backtrace is also printed out.
        -:   28: *
        -:   29: * @return true - if only one argument was passed and that argument was a boolean true.
        -:   30: *         Note that the function does not return otherwise.
        -:   31: */
        -:   32:jerry_value_t
    #####:   33:jerryx_handler_assert_fatal (const jerry_call_info_t *call_info_p, /**< call information */
        -:   34:                             const jerry_value_t args_p[], /**< function arguments */
        -:   35:                             const jerry_length_t args_cnt) /**< number of function arguments */
        -:   36:{
        -:   37:  (void) call_info_p; /* unused */
        -:   38:
    #####:   39:  if (args_cnt == 1 && jerry_value_is_true (args_p[0]))
        -:   40:  {
    #####:   41:    return jerry_boolean (true);
        -:   42:  }
        -:   43:
        -:   44:  /* Assert failed, print a bit of JS backtrace */
    #####:   45:  jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Script Error: assertion failed\n");
        -:   46:
    #####:   47:  if (jerry_feature_enabled (JERRY_FEATURE_LINE_INFO))
        -:   48:  {
    #####:   49:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Script backtrace (top 5):\n");
        -:   50:
        -:   51:    /* If the line info feature is disabled an empty array will be returned. */
    #####:   52:    jerry_value_t backtrace_array = jerry_backtrace (5);
    #####:   53:    uint32_t array_length = jerry_array_length (backtrace_array);
        -:   54:
    #####:   55:    for (uint32_t idx = 0; idx < array_length; idx++)
        -:   56:    {
    #####:   57:      jerry_value_t property = jerry_object_get_index (backtrace_array, idx);
        -:   58:
        -:   59:      /* On some systems the uint32_t values can't be printed with "%u" and
        -:   60:       * on some systems it can be printed. To avoid differences in the uint32_t typdef
        -:   61:       * The "PRIu32" macro is used to correctly add the formatter.
        -:   62:       */
    #####:   63:      jerry_port_log (JERRY_LOG_LEVEL_ERROR, " %" PRIu32 ": ", idx);
        -:   64:
    #####:   65:      jerry_char_t string_buffer[256];
    #####:   66:      const jerry_length_t buffer_size = (jerry_length_t) (sizeof (string_buffer) - 1);
        -:   67:
    #####:   68:      jerry_size_t copied_bytes = jerry_string_to_buffer (property, JERRY_ENCODING_UTF8, string_buffer, buffer_size);
    #####:   69:      string_buffer[copied_bytes] = '\0';
        -:   70:
    #####:   71:      jerry_port_log (JERRY_LOG_LEVEL_ERROR, "%s\n", string_buffer);
    #####:   72:      jerry_value_free (property);
        -:   73:    }
        -:   74:
    #####:   75:    jerry_value_free (backtrace_array);
        -:   76:  }
        -:   77:
    #####:   78:  jerry_port_fatal (ERR_FAILED_INTERNAL_ASSERTION);
        -:   79:} /* jerryx_handler_assert_fatal */
        -:   80:
        -:   81:/**
        -:   82: * Soft assert for scripts. The routine throws an error on assertion failure.
        -:   83: *
        -:   84: * @return true - if only one argument was passed and that argument was a boolean true.
        -:   85: *         error - otherwise.
        -:   86: */
        -:   87:jerry_value_t
    #####:   88:jerryx_handler_assert_throw (const jerry_call_info_t *call_info_p, /**< call information */
        -:   89:                             const jerry_value_t args_p[], /**< function arguments */
        -:   90:                             const jerry_length_t args_cnt) /**< number of function arguments */
        -:   91:{
        -:   92:  (void) call_info_p; /* unused */
        -:   93:
    #####:   94:  if (args_cnt == 1 && jerry_value_is_true (args_p[0]))
        -:   95:  {
    #####:   96:    return jerry_boolean (true);
        -:   97:  }
        -:   98:
    #####:   99:  return jerry_throw_sz (JERRY_ERROR_COMMON, "assertion failed");
        -:  100:} /* jerryx_handler_assert_throw */
        -:  101:
        -:  102:/**
        -:  103: * An alias to `jerryx_handler_assert_fatal`.
        -:  104: *
        -:  105: * @return true - if only one argument was passed and that argument was a boolean true.
        -:  106: *         Note that the function does not return otherwise.
        -:  107: */
        -:  108:jerry_value_t
    #####:  109:jerryx_handler_assert (const jerry_call_info_t *call_info_p, /**< call information */
        -:  110:                       const jerry_value_t args_p[], /**< function arguments */
        -:  111:                       const jerry_length_t args_cnt) /**< number of function arguments */
        -:  112:{
    #####:  113:  return jerryx_handler_assert_fatal (call_info_p, args_p, args_cnt);
        -:  114:} /* jerryx_handler_assert */
