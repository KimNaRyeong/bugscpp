        -:    0:Source:/home/workspace/tests/unit-core/test-api-functiontype.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-port-default.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:typedef struct
        -:   23:{
        -:   24:  jerry_function_type_t type_info;
        -:   25:  jerry_value_t value;
        -:   26:  bool active;
        -:   27:  bool is_async;
        -:   28:} test_entry_t;
        -:   29:
        -:   30:#define ENTRY(TYPE, VALUE)   \
        -:   31:  {                          \
        -:   32:    TYPE, VALUE, true, false \
        -:   33:  }
        -:   34:#define ENTRY_IF(TYPE, VALUE, FEATURE, ASYNC)           \
        -:   35:  {                                                     \
        -:   36:    TYPE, VALUE, jerry_feature_enabled (FEATURE), ASYNC \
        -:   37:  }
        -:   38:#define EVALUATE(BUFF) (jerry_eval ((BUFF), sizeof ((BUFF)) - 1, JERRY_PARSE_NO_OPTS))
        -:   39:static jerry_value_t
    #####:   40:test_ext_function (const jerry_call_info_t *call_info_p, /**< call information */
        -:   41:                   const jerry_value_t args_p[], /**< array of arguments */
        -:   42:                   const jerry_length_t args_cnt) /**< number of arguments */
        -:   43:{
        -:   44:  (void) call_info_p;
        -:   45:  (void) args_p;
        -:   46:  (void) args_cnt;
    #####:   47:  return jerry_boolean (true);
        -:   48:} /* test_ext_function */
        -:   49:
        -:   50:int
    #####:   51:main (void)
        -:   52:{
    #####:   53:  TEST_INIT ();
        -:   54:
    #####:   55:  jerry_init (JERRY_INIT_EMPTY);
        -:   56:
    #####:   57:  const jerry_char_t arrow_function[] = "_ => 5";
    #####:   58:  const jerry_char_t async_arrow_function[] = "async _ => 5";
    #####:   59:  const jerry_char_t generator_function[] = "function *f() {}; f";
    #####:   60:  const jerry_char_t async_generator_function[] = "async function *f() {}; f";
    #####:   61:  const jerry_char_t getter_function[] = "Object.getOwnPropertyDescriptor({get a(){}}, 'a').get";
    #####:   62:  const jerry_char_t setter_function[] = "Object.getOwnPropertyDescriptor({set a(b){}}, 'a').set";
    #####:   63:  const jerry_char_t method_function[] = "Object.getOwnPropertyDescriptor({a(){}}, 'a').value";
        -:   64:
    #####:   65:  const jerry_char_t builtin_function[] = "Object";
    #####:   66:  const jerry_char_t simple_function[] = "function f() {}; f";
    #####:   67:  const jerry_char_t bound_function[] = "function f() {}; f.bind(1,2)";
        -:   68:
    #####:   69:  test_entry_t entries[] = {
    #####:   70:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_number (-33.0)),
    #####:   71:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_boolean (true)),
    #####:   72:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_undefined ()),
    #####:   73:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_null ()),
    #####:   74:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_string_sz ("foo")),
    #####:   75:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_throw_sz (JERRY_ERROR_TYPE, "error")),
        -:   76:
    #####:   77:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_object ()),
    #####:   78:    ENTRY (JERRY_FUNCTION_TYPE_NONE, jerry_array (10)),
        -:   79:
    #####:   80:    ENTRY_IF (JERRY_FUNCTION_TYPE_ARROW, EVALUATE (arrow_function), JERRY_FEATURE_SYMBOL, false),
    #####:   81:    ENTRY_IF (JERRY_FUNCTION_TYPE_ARROW, EVALUATE (async_arrow_function), JERRY_FEATURE_SYMBOL, true),
    #####:   82:    ENTRY_IF (JERRY_FUNCTION_TYPE_GENERATOR, EVALUATE (generator_function), JERRY_FEATURE_SYMBOL, false),
    #####:   83:    ENTRY_IF (JERRY_FUNCTION_TYPE_GENERATOR, EVALUATE (async_generator_function), JERRY_FEATURE_SYMBOL, true),
    #####:   84:    ENTRY_IF (JERRY_FUNCTION_TYPE_GENERIC, EVALUATE (method_function), JERRY_FEATURE_SYMBOL, false),
    #####:   85:    ENTRY (JERRY_FUNCTION_TYPE_GENERIC, EVALUATE (builtin_function)),
    #####:   86:    ENTRY (JERRY_FUNCTION_TYPE_GENERIC, EVALUATE (simple_function)),
    #####:   87:    ENTRY (JERRY_FUNCTION_TYPE_BOUND, EVALUATE (bound_function)),
    #####:   88:    ENTRY (JERRY_FUNCTION_TYPE_GENERIC, jerry_function_external (test_ext_function)),
    #####:   89:    ENTRY (JERRY_FUNCTION_TYPE_ACCESSOR, EVALUATE (getter_function)),
    #####:   90:    ENTRY (JERRY_FUNCTION_TYPE_ACCESSOR, EVALUATE (setter_function)),
        -:   91:  };
        -:   92:
    #####:   93:  for (size_t idx = 0; idx < sizeof (entries) / sizeof (entries[0]); idx++)
        -:   94:  {
    #####:   95:    jerry_function_type_t type_info = jerry_function_type (entries[idx].value);
    #####:   96:    TEST_ASSERT (!entries[idx].active
        -:   97:                 || (type_info == entries[idx].type_info
        -:   98:                     && jerry_value_is_async_function (entries[idx].value) == entries[idx].is_async));
    #####:   99:    jerry_value_free (entries[idx].value);
        -:  100:  }
        -:  101:
    #####:  102:  jerry_cleanup ();
        -:  103:
        -:  104:  return 0;
        -:  105:} /* main */
