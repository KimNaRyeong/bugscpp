        -:    0:Source:/home/workspace/tests/unit-core/test-json.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "config.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:static jerry_value_t
    #####:   22:custom_to_json (const jerry_call_info_t *call_info_p, /**< call information */
        -:   23:                const jerry_value_t args_p[], /**< arguments list */
        -:   24:                const jerry_length_t args_cnt) /**< arguments length */
        -:   25:{
        -:   26:  JERRY_UNUSED (call_info_p);
        -:   27:  JERRY_UNUSED (args_p);
        -:   28:  JERRY_UNUSED (args_cnt);
        -:   29:
    #####:   30:  return jerry_throw_sz (JERRY_ERROR_URI, "Error");
        -:   31:} /* custom_to_json */
        -:   32:
        -:   33:int
    #####:   34:main (void)
        -:   35:{
    #####:   36:  TEST_INIT ();
        -:   37:
    #####:   38:  jerry_init (JERRY_INIT_EMPTY);
        -:   39:
    #####:   40:  {
        -:   41:    /* JSON.parse check */
    #####:   42:    const jerry_char_t data[] = "{\"name\": \"John\", \"age\": 5}";
    #####:   43:    jerry_value_t parsed_json = jerry_json_parse (data, sizeof (data) - 1);
        -:   44:
        -:   45:    /* Check "name" property values */
    #####:   46:    jerry_value_t name_key = jerry_string_sz ("name");
        -:   47:
    #####:   48:    jerry_value_t has_name = jerry_object_has (parsed_json, name_key);
    #####:   49:    TEST_ASSERT (jerry_value_is_true (has_name));
    #####:   50:    jerry_value_free (has_name);
        -:   51:
    #####:   52:    jerry_value_t name_value = jerry_object_get (parsed_json, name_key);
    #####:   53:    TEST_ASSERT (jerry_value_is_string (name_value) == true);
        -:   54:
    #####:   55:    jerry_size_t name_size = jerry_string_size (name_value, JERRY_ENCODING_CESU8);
    #####:   56:    TEST_ASSERT (name_size == 4);
    #####:   57:    JERRY_VLA (jerry_char_t, name_data, name_size + 1);
    #####:   58:    jerry_size_t copied = jerry_string_to_buffer (name_value, JERRY_ENCODING_CESU8, name_data, name_size);
    #####:   59:    name_data[name_size] = '\0';
        -:   60:
    #####:   61:    jerry_value_free (name_value);
        -:   62:
    #####:   63:    TEST_ASSERT (copied == name_size);
    #####:   64:    TEST_ASSERT_STR ("John", name_data);
    #####:   65:    jerry_value_free (name_key);
        -:   66:
        -:   67:    /* Check "age" property values */
    #####:   68:    jerry_value_t age_key = jerry_string_sz ("age");
        -:   69:
    #####:   70:    jerry_value_t has_age = jerry_object_has (parsed_json, age_key);
    #####:   71:    TEST_ASSERT (jerry_value_is_true (has_age));
    #####:   72:    jerry_value_free (has_age);
        -:   73:
    #####:   74:    jerry_value_t age_value = jerry_object_get (parsed_json, age_key);
    #####:   75:    TEST_ASSERT (jerry_value_is_number (age_value) == true);
    #####:   76:    TEST_ASSERT (jerry_value_as_number (age_value) == 5.0);
        -:   77:
    #####:   78:    jerry_value_free (age_value);
    #####:   79:    jerry_value_free (age_key);
        -:   80:
    #####:   81:    jerry_value_free (parsed_json);
        -:   82:  }
        -:   83:
        -:   84:  /* JSON.parse cesu-8 / utf-8 encoded string */
        -:   85:  {
    #####:   86:    jerry_char_t cesu8[] = "{\"ch\": \"\xED\xA0\x83\xED\xB2\x9F\"}";
    #####:   87:    jerry_char_t utf8[] = "{\"ch\": \"\xF0\x90\xB2\x9F\"}";
        -:   88:
    #####:   89:    jerry_value_t parsed_cesu8 = jerry_json_parse (cesu8, sizeof (cesu8) - 1);
    #####:   90:    jerry_value_t parsed_utf8 = jerry_json_parse (utf8, sizeof (utf8) - 1);
        -:   91:
    #####:   92:    jerry_value_t key = jerry_string_sz ("ch");
    #####:   93:    jerry_value_t char_cesu8 = jerry_object_get (parsed_cesu8, key);
    #####:   94:    jerry_value_t char_utf8 = jerry_object_get (parsed_utf8, key);
    #####:   95:    jerry_value_free (key);
        -:   96:
    #####:   97:    TEST_ASSERT (jerry_value_to_boolean (jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, char_cesu8, char_utf8)));
    #####:   98:    jerry_value_free (char_cesu8);
    #####:   99:    jerry_value_free (char_utf8);
    #####:  100:    jerry_value_free (parsed_cesu8);
    #####:  101:    jerry_value_free (parsed_utf8);
        -:  102:  }
        -:  103:
        -:  104:  /* JSON.parse error checks */
        -:  105:  {
    #####:  106:    jerry_value_t parsed_json = jerry_json_parse ((const jerry_char_t *) "", 0);
    #####:  107:    TEST_ASSERT (jerry_value_is_exception (parsed_json));
    #####:  108:    TEST_ASSERT (jerry_error_type (parsed_json) == JERRY_ERROR_SYNTAX);
    #####:  109:    jerry_value_free (parsed_json);
        -:  110:  }
        -:  111:
        -:  112:  {
    #####:  113:    jerry_value_t parsed_json = jerry_json_parse ((const jerry_char_t *) "-", 1);
    #####:  114:    TEST_ASSERT (jerry_value_is_exception (parsed_json));
    #####:  115:    TEST_ASSERT (jerry_error_type (parsed_json) == JERRY_ERROR_SYNTAX);
    #####:  116:    jerry_value_free (parsed_json);
        -:  117:  }
        -:  118:
        -:  119:  /* JSON.stringify check */
    #####:  120:  {
    #####:  121:    jerry_value_t obj = jerry_object ();
        -:  122:    /* Fill "obj" with data */
        -:  123:    {
    #####:  124:      jerry_value_t name_key = jerry_string_sz ("name");
    #####:  125:      jerry_value_t name_value = jerry_string_sz ("John");
    #####:  126:      jerry_value_t name_set = jerry_object_set (obj, name_key, name_value);
    #####:  127:      TEST_ASSERT (!jerry_value_is_exception (name_set));
    #####:  128:      TEST_ASSERT (jerry_value_is_boolean (name_set));
    #####:  129:      TEST_ASSERT (jerry_value_is_true (name_set));
    #####:  130:      jerry_value_free (name_key);
    #####:  131:      jerry_value_free (name_value);
    #####:  132:      jerry_value_free (name_set);
        -:  133:    }
        -:  134:    {
    #####:  135:      jerry_value_t age_key = jerry_string_sz ("age");
    #####:  136:      jerry_value_t age_value = jerry_number (32);
    #####:  137:      jerry_value_t age_set = jerry_object_set (obj, age_key, age_value);
    #####:  138:      TEST_ASSERT (!jerry_value_is_exception (age_set));
    #####:  139:      TEST_ASSERT (jerry_value_is_boolean (age_set));
    #####:  140:      TEST_ASSERT (jerry_value_is_true (age_set));
    #####:  141:      jerry_value_free (age_key);
    #####:  142:      jerry_value_free (age_value);
    #####:  143:      jerry_value_free (age_set);
        -:  144:    }
        -:  145:
    #####:  146:    jerry_value_t json_string = jerry_json_stringify (obj);
    #####:  147:    TEST_ASSERT (jerry_value_is_string (json_string));
        -:  148:
    #####:  149:    jerry_value_free (obj);
        -:  150:
    #####:  151:    const char check_value[] = "{\"name\":\"John\",\"age\":32}";
    #####:  152:    jerry_size_t json_size = jerry_string_size (json_string, JERRY_ENCODING_CESU8);
    #####:  153:    TEST_ASSERT (json_size == strlen (check_value));
    #####:  154:    JERRY_VLA (jerry_char_t, json_data, json_size + 1);
    #####:  155:    jerry_string_to_buffer (json_string, JERRY_ENCODING_CESU8, json_data, json_size);
    #####:  156:    json_data[json_size] = '\0';
        -:  157:
    #####:  158:    TEST_ASSERT_STR (check_value, json_data);
        -:  159:
    #####:  160:    jerry_value_free (json_string);
        -:  161:  }
        -:  162:
        -:  163:  /* Custom "toJSON" invocation test */
        -:  164:  {
    #####:  165:    jerry_value_t obj = jerry_object ();
        -:  166:    /* Fill "obj" with data */
        -:  167:    {
    #####:  168:      jerry_value_t name_key = jerry_string_sz ("toJSON");
    #####:  169:      jerry_value_t name_value = jerry_function_external (custom_to_json);
    #####:  170:      jerry_value_t name_set = jerry_object_set (obj, name_key, name_value);
    #####:  171:      TEST_ASSERT (!jerry_value_is_exception (name_set));
    #####:  172:      TEST_ASSERT (jerry_value_is_boolean (name_set));
    #####:  173:      TEST_ASSERT (jerry_value_is_true (name_set));
    #####:  174:      jerry_value_free (name_key);
    #####:  175:      jerry_value_free (name_value);
    #####:  176:      jerry_value_free (name_set);
        -:  177:    }
        -:  178:
    #####:  179:    jerry_value_t json_string = jerry_json_stringify (obj);
    #####:  180:    TEST_ASSERT (jerry_value_is_exception (json_string));
    #####:  181:    TEST_ASSERT (jerry_error_type (json_string) == JERRY_ERROR_URI);
        -:  182:
    #####:  183:    jerry_value_free (json_string);
    #####:  184:    jerry_value_free (obj);
        -:  185:  }
        -:  186:
    #####:  187:  jerry_cleanup ();
        -:  188:
        -:  189:  return 0;
        -:  190:} /* main */
