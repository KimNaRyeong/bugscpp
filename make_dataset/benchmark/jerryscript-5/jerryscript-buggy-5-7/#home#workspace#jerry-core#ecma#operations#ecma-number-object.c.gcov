        -:    0:Source:/home/workspace/jerry-core/ecma/operations/ecma-number-object.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-number-object.h"
        -:   17:
        -:   18:#include "ecma-alloc.h"
        -:   19:#include "ecma-builtins.h"
        -:   20:#include "ecma-exceptions.h"
        -:   21:#include "ecma-function-object.h"
        -:   22:#include "ecma-gc.h"
        -:   23:#include "ecma-globals.h"
        -:   24:#include "ecma-helpers.h"
        -:   25:#include "ecma-objects-general.h"
        -:   26:#include "ecma-objects.h"
        -:   27:
        -:   28:#include "jcontext.h"
        -:   29:
        -:   30:/** \addtogroup ecma ECMA
        -:   31: * @{
        -:   32: *
        -:   33: * \addtogroup ecmanumberobject ECMA Number object related routines
        -:   34: * @{
        -:   35: */
        -:   36:
        -:   37:/**
        -:   38: * Number object creation operation.
        -:   39: *
        -:   40: * See also: ECMA-262 v5, 15.7.2.1
        -:   41: *
        -:   42: * @return ecma value
        -:   43: *         Returned value must be freed with ecma_free_value
        -:   44: */
        -:   45:ecma_value_t
    #####:   46:ecma_op_create_number_object (ecma_value_t arg) /**< argument passed to the Number constructor */
        -:   47:{
    #####:   48:  ecma_number_t num;
    #####:   49:  ecma_value_t conv_to_num_completion = ecma_op_to_number (arg, &num);
        -:   50:
    #####:   51:  if (ECMA_IS_VALUE_ERROR (conv_to_num_completion))
        -:   52:  {
    #####:   53:    return conv_to_num_completion;
        -:   54:  }
        -:   55:
    #####:   56:  conv_to_num_completion = ecma_make_number_value (num);
        -:   57:  ecma_builtin_id_t proto_id;
        -:   58:#if JERRY_BUILTIN_NUMBER
    #####:   59:  proto_id = ECMA_BUILTIN_ID_NUMBER_PROTOTYPE;
        -:   60:#else /* JERRY_BUILTIN_NUMBER */
        -:   61:  proto_id = ECMA_BUILTIN_ID_OBJECT_PROTOTYPE;
        -:   62:#endif /* JERRY_BUILTIN_NUMBER */
    #####:   63:  ecma_object_t *prototype_obj_p = ecma_builtin_get (proto_id);
        -:   64:#if JERRY_ESNEXT
    #####:   65:  ecma_object_t *new_target = JERRY_CONTEXT (current_new_target_p);
    #####:   66:  if (new_target)
        -:   67:  {
    #####:   68:    prototype_obj_p = ecma_op_get_prototype_from_constructor (new_target, proto_id);
    #####:   69:    if (JERRY_UNLIKELY (prototype_obj_p == NULL))
        -:   70:    {
    #####:   71:      return ECMA_VALUE_ERROR;
        -:   72:    }
        -:   73:  }
        -:   74:#endif /* JERRY_ESNEXT */
    #####:   75:  ecma_object_t *object_p =
        -:   76:    ecma_create_object (prototype_obj_p, sizeof (ecma_extended_object_t), ECMA_OBJECT_TYPE_CLASS);
        -:   77:
    #####:   78:  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;
    #####:   79:  ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_NUMBER;
        -:   80:
        -:   81:  /* Pass reference (no need to free conv_to_num_completion). */
    #####:   82:  ext_object_p->u.cls.u3.value = conv_to_num_completion;
        -:   83:#if JERRY_ESNEXT
    #####:   84:  if (new_target)
        -:   85:  {
    #####:   86:    ecma_deref_object (prototype_obj_p);
        -:   87:  }
        -:   88:#endif /* JERRY_ESNEXT */
    #####:   89:  return ecma_make_object_value (object_p);
        -:   90:} /* ecma_op_create_number_object */
        -:   91:
        -:   92:/**
        -:   93: * @}
        -:   94: * @}
        -:   95: */
