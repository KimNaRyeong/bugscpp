        -:    0:Source:/home/workspace/tests/unit-core/test-container-operation.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "test-common.h"
        -:   19:
        -:   20:int
    #####:   21:main (void)
        -:   22:{
    #####:   23:  jerry_init (JERRY_INIT_EMPTY);
        -:   24:
    #####:   25:  if (!jerry_feature_enabled (JERRY_FEATURE_MAP) || !jerry_feature_enabled (JERRY_FEATURE_SET)
    #####:   26:      || !jerry_feature_enabled (JERRY_FEATURE_WEAKMAP) || !jerry_feature_enabled (JERRY_FEATURE_WEAKSET))
        -:   27:  {
    #####:   28:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Containers are disabled!\n");
    #####:   29:    jerry_cleanup ();
    #####:   30:    return 0;
        -:   31:  }
        -:   32:
        -:   33:  // Map container tests
    #####:   34:  jerry_value_t map = jerry_container (JERRY_CONTAINER_TYPE_MAP, NULL, 0);
    #####:   35:  TEST_ASSERT (jerry_container_type (map) == JERRY_CONTAINER_TYPE_MAP);
        -:   36:
    #####:   37:  jerry_value_t key_str = jerry_string_sz ("number");
    #####:   38:  jerry_value_t number = jerry_number (10);
    #####:   39:  jerry_value_t args[2] = { key_str, number };
    #####:   40:  jerry_value_t result = jerry_container_op (JERRY_CONTAINER_OP_SET, map, args, 2);
    #####:   41:  TEST_ASSERT (!jerry_value_is_exception (result));
    #####:   42:  jerry_value_free (result);
        -:   43:
    #####:   44:  result = jerry_container_op (JERRY_CONTAINER_OP_GET, map, &key_str, 1);
    #####:   45:  TEST_ASSERT (jerry_value_as_number (result) == 10);
    #####:   46:  jerry_value_free (result);
        -:   47:
    #####:   48:  result = jerry_container_op (JERRY_CONTAINER_OP_HAS, map, &key_str, 1);
    #####:   49:  TEST_ASSERT (jerry_value_is_true (result));
    #####:   50:  jerry_value_free (result);
        -:   51:
    #####:   52:  result = jerry_container_op (JERRY_CONTAINER_OP_SIZE, map, NULL, 0);
    #####:   53:  TEST_ASSERT (jerry_value_as_number (result) == 1);
    #####:   54:  jerry_value_free (result);
        -:   55:
    #####:   56:  key_str = jerry_string_sz ("number2");
    #####:   57:  number = jerry_number (11);
    #####:   58:  jerry_value_t args2[2] = { key_str, number };
    #####:   59:  result = jerry_container_op (JERRY_CONTAINER_OP_SET, map, args2, 2);
    #####:   60:  jerry_value_free (result);
        -:   61:
    #####:   62:  result = jerry_container_op (JERRY_CONTAINER_OP_SIZE, map, NULL, 0);
    #####:   63:  TEST_ASSERT (jerry_value_as_number (result) == 2);
    #####:   64:  jerry_value_free (result);
        -:   65:
    #####:   66:  result = jerry_container_op (JERRY_CONTAINER_OP_DELETE, map, &key_str, 1);
    #####:   67:  TEST_ASSERT (jerry_value_is_true (result));
    #####:   68:  jerry_value_free (result);
        -:   69:
    #####:   70:  result = jerry_container_op (JERRY_CONTAINER_OP_SIZE, map, NULL, 0);
    #####:   71:  TEST_ASSERT (jerry_value_as_number (result) == 1);
    #####:   72:  jerry_value_free (result);
        -:   73:
    #####:   74:  result = jerry_container_op (JERRY_CONTAINER_OP_CLEAR, map, NULL, 0);
    #####:   75:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:   76:  jerry_value_free (result);
        -:   77:
    #####:   78:  result = jerry_container_op (JERRY_CONTAINER_OP_SIZE, map, NULL, 0);
    #####:   79:  TEST_ASSERT (jerry_value_as_number (result) == 0);
    #####:   80:  jerry_value_free (result);
        -:   81:
        -:   82:  // Set container tests
    #####:   83:  number = jerry_number (10);
    #####:   84:  jerry_value_t set = jerry_container (JERRY_CONTAINER_TYPE_SET, NULL, 0);
    #####:   85:  TEST_ASSERT (jerry_container_type (set) == JERRY_CONTAINER_TYPE_SET);
    #####:   86:  result = jerry_container_op (JERRY_CONTAINER_OP_ADD, set, &number, 1);
    #####:   87:  TEST_ASSERT (!jerry_value_is_exception (result));
    #####:   88:  jerry_value_free (result);
        -:   89:
    #####:   90:  result = jerry_container_op (JERRY_CONTAINER_OP_HAS, set, &number, 1);
    #####:   91:  TEST_ASSERT (jerry_value_is_true (result));
    #####:   92:  jerry_value_free (result);
        -:   93:
    #####:   94:  result = jerry_container_op (JERRY_CONTAINER_OP_SIZE, set, NULL, 0);
    #####:   95:  TEST_ASSERT (jerry_value_as_number (result) == 1);
    #####:   96:  jerry_value_free (result);
        -:   97:
    #####:   98:  number = jerry_number (11);
    #####:   99:  result = jerry_container_op (JERRY_CONTAINER_OP_ADD, set, &number, 1);
    #####:  100:  jerry_value_free (result);
        -:  101:
    #####:  102:  result = jerry_container_op (JERRY_CONTAINER_OP_SIZE, set, NULL, 0);
    #####:  103:  TEST_ASSERT (jerry_value_as_number (result) == 2);
    #####:  104:  jerry_value_free (result);
        -:  105:
    #####:  106:  result = jerry_container_op (JERRY_CONTAINER_OP_DELETE, set, &number, 1);
    #####:  107:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  108:  jerry_value_free (result);
        -:  109:
    #####:  110:  result = jerry_container_op (JERRY_CONTAINER_OP_SIZE, set, NULL, 0);
    #####:  111:  TEST_ASSERT (jerry_value_as_number (result) == 1);
    #####:  112:  jerry_value_free (result);
        -:  113:
    #####:  114:  result = jerry_container_op (JERRY_CONTAINER_OP_CLEAR, set, NULL, 0);
    #####:  115:  TEST_ASSERT (jerry_value_is_undefined (result));
    #####:  116:  jerry_value_free (result);
        -:  117:
    #####:  118:  result = jerry_container_op (JERRY_CONTAINER_OP_SIZE, set, NULL, 0);
    #####:  119:  TEST_ASSERT (jerry_value_as_number (result) == 0);
    #####:  120:  jerry_value_free (result);
    #####:  121:  jerry_value_free (set);
        -:  122:
        -:  123:  // WeakMap contanier tests
    #####:  124:  number = jerry_number (10);
    #####:  125:  jerry_value_t weak_map = jerry_container (JERRY_CONTAINER_TYPE_WEAKMAP, NULL, 0);
    #####:  126:  TEST_ASSERT (jerry_container_type (weak_map) == JERRY_CONTAINER_TYPE_WEAKMAP);
        -:  127:
    #####:  128:  jerry_value_t obj = jerry_object ();
    #####:  129:  number = jerry_number (10);
    #####:  130:  jerry_value_t args4[2] = { obj, number };
    #####:  131:  result = jerry_container_op (JERRY_CONTAINER_OP_SET, weak_map, args4, 2);
    #####:  132:  TEST_ASSERT (!jerry_value_is_exception (result));
    #####:  133:  jerry_value_free (result);
        -:  134:
    #####:  135:  result = jerry_container_op (JERRY_CONTAINER_OP_HAS, weak_map, &obj, 1);
    #####:  136:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  137:  jerry_value_free (result);
        -:  138:
    #####:  139:  result = jerry_container_op (JERRY_CONTAINER_OP_DELETE, weak_map, &obj, 1);
    #####:  140:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  141:  jerry_value_free (result);
    #####:  142:  jerry_value_free (weak_map);
        -:  143:
        -:  144:  // WeakSet contanier tests,
    #####:  145:  jerry_value_t weak_set = jerry_container (JERRY_CONTAINER_TYPE_WEAKSET, NULL, 0);
    #####:  146:  TEST_ASSERT (jerry_container_type (weak_set) == JERRY_CONTAINER_TYPE_WEAKSET);
        -:  147:
    #####:  148:  result = jerry_container_op (JERRY_CONTAINER_OP_ADD, weak_set, &obj, 1);
    #####:  149:  jerry_value_free (result);
        -:  150:
    #####:  151:  result = jerry_container_op (JERRY_CONTAINER_OP_HAS, weak_set, &obj, 1);
    #####:  152:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  153:  jerry_value_free (result);
        -:  154:
    #####:  155:  result = jerry_container_op (JERRY_CONTAINER_OP_DELETE, weak_set, &obj, 1);
    #####:  156:  TEST_ASSERT (jerry_value_is_true (result));
    #####:  157:  jerry_value_free (result);
    #####:  158:  jerry_value_free (weak_set);
        -:  159:
        -:  160:  // container is not a object
    #####:  161:  jerry_value_t empty_val = jerry_undefined ();
    #####:  162:  result = jerry_container_op (JERRY_CONTAINER_OP_SET, empty_val, args, 2);
    #####:  163:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  164:  jerry_value_free (result);
        -:  165:
        -:  166:  // arguments is a error
    #####:  167:  const char *const error_message_p = "Random error.";
    #####:  168:  jerry_value_t error_val = jerry_throw_sz (JERRY_ERROR_RANGE, error_message_p);
    #####:  169:  jerry_value_t args3[2] = { error_val, error_val };
    #####:  170:  result = jerry_container_op (JERRY_CONTAINER_OP_SET, map, args3, 2);
    #####:  171:  TEST_ASSERT (jerry_value_is_exception (result));
    #####:  172:  jerry_value_free (result);
    #####:  173:  jerry_value_free (error_val);
    #####:  174:  jerry_value_free (map);
        -:  175:
    #####:  176:  jerry_value_free (key_str);
    #####:  177:  jerry_value_free (number);
    #####:  178:  jerry_value_free (obj);
    #####:  179:  jerry_cleanup ();
    #####:  180:  return 0;
        -:  181:
        -:  182:} /* main */
