        -:    0:Source:/home/workspace/tests/unit-core/test-poolman.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:/**
        -:   17: * Unit test for pool manager.
        -:   18: */
        -:   19:
        -:   20:#include <stdbool.h>
        -:   21:#include <stdint.h>
        -:   22:#include <string.h>
        -:   23:
        -:   24:#include "jmem.h"
        -:   25:
        -:   26:#define JMEM_ALLOCATOR_INTERNAL
        -:   27:#include "jmem-allocator-internal.h"
        -:   28:#include "test-common.h"
        -:   29:
        -:   30:/* Iterations count. */
        -:   31:const uint32_t test_iters = 1024;
        -:   32:
        -:   33:/* Subiterations count. */
        -:   34:#define TEST_MAX_SUB_ITERS 1024
        -:   35:#define TEST_CHUNK_SIZE    8
        -:   36:
        -:   37:uint8_t *ptrs[TEST_MAX_SUB_ITERS];
        -:   38:uint8_t data[TEST_MAX_SUB_ITERS][TEST_CHUNK_SIZE];
        -:   39:
        -:   40:int
    #####:   41:main (void)
        -:   42:{
    #####:   43:  TEST_INIT ();
        -:   44:
    #####:   45:  jmem_init ();
        -:   46:
    #####:   47:  for (uint32_t i = 0; i < test_iters; i++)
        -:   48:  {
    #####:   49:    const size_t subiters = ((size_t) rand () % TEST_MAX_SUB_ITERS) + 1;
        -:   50:
    #####:   51:    for (size_t j = 0; j < subiters; j++)
        -:   52:    {
    #####:   53:      ptrs[j] = (uint8_t *) jmem_pools_alloc (TEST_CHUNK_SIZE);
        -:   54:
    #####:   55:      if (ptrs[j] != NULL)
        -:   56:      {
    #####:   57:        for (size_t k = 0; k < TEST_CHUNK_SIZE; k++)
        -:   58:        {
    #####:   59:          ptrs[j][k] = (uint8_t) (rand () % 256);
        -:   60:        }
        -:   61:
    #####:   62:        memcpy (data[j], ptrs[j], TEST_CHUNK_SIZE);
        -:   63:      }
        -:   64:    }
        -:   65:
        -:   66:    /* jmem_heap_print (false); */
        -:   67:
    #####:   68:    for (size_t j = 0; j < subiters; j++)
        -:   69:    {
    #####:   70:      if (rand () % 256 == 0)
        -:   71:      {
    #####:   72:        jmem_pools_collect_empty ();
        -:   73:      }
        -:   74:
    #####:   75:      if (ptrs[j] != NULL)
        -:   76:      {
    #####:   77:        TEST_ASSERT (!memcmp (data[j], ptrs[j], TEST_CHUNK_SIZE));
        -:   78:
    #####:   79:        jmem_pools_free (ptrs[j], TEST_CHUNK_SIZE);
        -:   80:      }
        -:   81:    }
        -:   82:  }
        -:   83:
        -:   84:#ifdef JMEM_STATS
        -:   85:  jmem_heap_stats_print ();
        -:   86:#endif /* JMEM_STATS */
        -:   87:
    #####:   88:  jmem_finalize ();
        -:   89:
        -:   90:  return 0;
        -:   91:} /* main */
