        -:    0:Source:/home/workspace/jerry-port/default/default-module.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include <limits.h>
        -:   17:#include <stdarg.h>
        -:   18:#include <stdlib.h>
        -:   19:#include <string.h>
        -:   20:
        -:   21:#include "jerryscript-port-default.h"
        -:   22:#include "jerryscript-port.h"
        -:   23:
        -:   24:#include <sys/stat.h>
        -:   25:
        -:   26:#ifndef S_ISDIR
        -:   27:#define S_ISDIR(mode) (((mode) &S_IFMT) == S_IFDIR)
        -:   28:#endif /* !defined(S_ISDIR) */
        -:   29:
        -:   30:/**
        -:   31: * Determines the size of the given file.
        -:   32: * @return size of the file
        -:   33: */
        -:   34:static size_t
        1:   35:jerry_port_get_file_size (FILE *file_p) /**< opened file */
        -:   36:{
        1:   37:  fseek (file_p, 0, SEEK_END);
        1:   38:  long size = ftell (file_p);
        1:   39:  fseek (file_p, 0, SEEK_SET);
        -:   40:
        1:   41:  return (size_t) size;
        -:   42:} /* jerry_port_get_file_size */
        -:   43:
        -:   44:/**
        -:   45: * Opens file with the given path and reads its source.
        -:   46: * @return the source of the file
        -:   47: */
        -:   48:uint8_t *
        1:   49:jerry_port_read_source (const char *file_name_p, /**< file name */
        -:   50:                        size_t *out_size_p) /**< [out] read bytes */
        -:   51:{
        1:   52:  struct stat stat_buffer;
        1:   53:  if (stat (file_name_p, &stat_buffer) == -1 || S_ISDIR (stat_buffer.st_mode))
        -:   54:  {
    #####:   55:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Error: Failed to open file: %s\n", file_name_p);
    #####:   56:    return NULL;
        -:   57:  }
        -:   58:
        1:   59:  FILE *file_p = fopen (file_name_p, "rb");
        -:   60:
        1:   61:  if (file_p == NULL)
        -:   62:  {
    #####:   63:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Error: Failed to open file: %s\n", file_name_p);
    #####:   64:    return NULL;
        -:   65:  }
        -:   66:
        1:   67:  size_t file_size = jerry_port_get_file_size (file_p);
        1:   68:  uint8_t *buffer_p = (uint8_t *) malloc (file_size);
        -:   69:
        1:   70:  if (buffer_p == NULL)
        -:   71:  {
    #####:   72:    fclose (file_p);
        -:   73:
    #####:   74:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Error: Failed to allocate memory for file: %s\n", file_name_p);
    #####:   75:    return NULL;
        -:   76:  }
        -:   77:
        1:   78:  size_t bytes_read = fread (buffer_p, 1u, file_size, file_p);
        -:   79:
        1:   80:  if (bytes_read != file_size)
        -:   81:  {
    #####:   82:    fclose (file_p);
    #####:   83:    free (buffer_p);
        -:   84:
    #####:   85:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Error: Failed to read file: %s\n", file_name_p);
    #####:   86:    return NULL;
        -:   87:  }
        -:   88:
        1:   89:  fclose (file_p);
        1:   90:  *out_size_p = bytes_read;
        -:   91:
        1:   92:  return buffer_p;
        -:   93:} /* jerry_port_read_source */
        -:   94:
        -:   95:/**
        -:   96: * Release the previously opened file's content.
        -:   97: */
        -:   98:void
    #####:   99:jerry_port_release_source (uint8_t *buffer_p) /**< buffer to free */
        -:  100:{
    #####:  101:  free (buffer_p);
    #####:  102:} /* jerry_port_release_source */
        -:  103:
        -:  104:/**
        -:  105: * Computes the end of the directory part of a path.
        -:  106: *
        -:  107: * @return end of the directory part of a path.
        -:  108: */
        -:  109:static size_t
    #####:  110:jerry_port_get_directory_end (const jerry_char_t *path_p) /**< path */
        -:  111:{
    #####:  112:  const jerry_char_t *end_p = path_p + strlen ((const char *) path_p);
        -:  113:
    #####:  114:  while (end_p > path_p)
        -:  115:  {
        -:  116:#if defined(_WIN32)
        -:  117:    if (end_p[-1] == '/' || end_p[-1] == '\\')
        -:  118:    {
        -:  119:      return (size_t) (end_p - path_p);
        -:  120:    }
        -:  121:#else /* !_WIN32 */
    #####:  122:    if (end_p[-1] == '/')
        -:  123:    {
    #####:  124:      return (size_t) (end_p - path_p);
        -:  125:    }
        -:  126:#endif /* _WIN32 */
        -:  127:
    #####:  128:    end_p--;
        -:  129:  }
        -:  130:
    #####:  131:  return 0;
        -:  132:} /* jerry_port_get_directory_end */
        -:  133:
        -:  134:/**
        -:  135: * Normalize a file path.
        -:  136: *
        -:  137: * @return a newly allocated buffer with the normalized path if the operation is successful,
        -:  138: *         NULL otherwise
        -:  139: */
        -:  140:static jerry_char_t *
    #####:  141:jerry_port_normalize_path (const jerry_char_t *in_path_p, /**< path to the referenced module */
        -:  142:                           size_t in_path_length, /**< length of the path */
        -:  143:                           const jerry_char_t *base_path_p, /**< base path */
        -:  144:                           size_t base_path_length) /**< length of the base path */
        -:  145:{
        -:  146:  char *path_p;
        -:  147:
    #####:  148:  if (base_path_length > 0)
        -:  149:  {
    #####:  150:    path_p = (char *) malloc (base_path_length + in_path_length + 1);
        -:  151:
    #####:  152:    if (path_p == NULL)
        -:  153:    {
    #####:  154:      return NULL;
        -:  155:    }
        -:  156:
    #####:  157:    memcpy (path_p, base_path_p, base_path_length);
    #####:  158:    memcpy (path_p + base_path_length, in_path_p, in_path_length);
    #####:  159:    path_p[base_path_length + in_path_length] = '\0';
        -:  160:  }
        -:  161:  else
        -:  162:  {
    #####:  163:    path_p = (char *) malloc (in_path_length + 1);
        -:  164:
    #####:  165:    if (path_p == NULL)
        -:  166:    {
    #####:  167:      return NULL;
        -:  168:    }
        -:  169:
    #####:  170:    memcpy (path_p, in_path_p, in_path_length);
    #####:  171:    path_p[in_path_length] = '\0';
        -:  172:  }
        -:  173:
        -:  174:#if defined(_WIN32)
        -:  175:  char full_path[_MAX_PATH];
        -:  176:
        -:  177:  if (_fullpath (full_path, path_p, _MAX_PATH) != NULL)
        -:  178:  {
        -:  179:    free (path_p);
        -:  180:
        -:  181:    size_t full_path_len = strlen (full_path);
        -:  182:
        -:  183:    path_p = (char *) malloc (full_path_len + 1);
        -:  184:
        -:  185:    if (path_p == NULL)
        -:  186:    {
        -:  187:      return NULL;
        -:  188:    }
        -:  189:
        -:  190:    memcpy (path_p, full_path, full_path_len + 1);
        -:  191:  }
        -:  192:#elif defined(__unix__) || defined(__APPLE__)
    #####:  193:  char *norm_p = realpath (path_p, NULL);
        -:  194:
    #####:  195:  if (norm_p != NULL)
        -:  196:  {
    #####:  197:    free (path_p);
    #####:  198:    path_p = norm_p;
        -:  199:  }
        -:  200:#endif /* _WIN32 */
        -:  201:
    #####:  202:  return (jerry_char_t *) path_p;
        -:  203:} /* jerry_port_normalize_path */
        -:  204:
        -:  205:/**
        -:  206: * A module descriptor.
        -:  207: */
        -:  208:typedef struct jerry_port_module_t
        -:  209:{
        -:  210:  struct jerry_port_module_t *next_p; /**< next_module */
        -:  211:  jerry_char_t *path_p; /**< path to the module */
        -:  212:  size_t base_path_length; /**< base path length for relative difference */
        -:  213:  jerry_value_t realm; /**< the realm of the module */
        -:  214:  jerry_value_t module; /**< the module itself */
        -:  215:} jerry_port_module_t;
        -:  216:
        -:  217:/**
        -:  218: * Native info descriptor for modules.
        -:  219: */
        -:  220:static const jerry_object_native_info_t jerry_port_module_native_info = {
        -:  221:  .free_cb = NULL,
        -:  222:};
        -:  223:
        -:  224:/**
        -:  225: * Default module manager.
        -:  226: */
        -:  227:typedef struct
        -:  228:{
        -:  229:  jerry_port_module_t *module_head_p; /**< first module */
        -:  230:} jerry_port_module_manager_t;
        -:  231:
        -:  232:/**
        -:  233: * Release known modules.
        -:  234: */
        -:  235:static void
    #####:  236:jerry_port_module_free (jerry_port_module_manager_t *manager_p, /**< module manager */
        -:  237:                        const jerry_value_t realm) /**< if this argument is object, release only those modules,
        -:  238:                                                    *   which realm value is equal to this argument. */
        -:  239:{
    #####:  240:  jerry_port_module_t *module_p = manager_p->module_head_p;
        -:  241:
    #####:  242:  bool release_all = !jerry_value_is_object (realm);
        -:  243:
    #####:  244:  jerry_port_module_t *prev_p = NULL;
        -:  245:
    #####:  246:  while (module_p != NULL)
        -:  247:  {
    #####:  248:    jerry_port_module_t *next_p = module_p->next_p;
        -:  249:
    #####:  250:    if (release_all || module_p->realm == realm)
        -:  251:    {
    #####:  252:      free (module_p->path_p);
    #####:  253:      jerry_value_free (module_p->realm);
    #####:  254:      jerry_value_free (module_p->module);
        -:  255:
    #####:  256:      free (module_p);
        -:  257:
    #####:  258:      if (prev_p == NULL)
        -:  259:      {
    #####:  260:        manager_p->module_head_p = next_p;
        -:  261:      }
        -:  262:      else
        -:  263:      {
    #####:  264:        prev_p->next_p = next_p;
        -:  265:      }
        -:  266:    }
        -:  267:    else
        -:  268:    {
    #####:  269:      prev_p = module_p;
        -:  270:    }
        -:  271:
    #####:  272:    module_p = next_p;
        -:  273:  }
    #####:  274:} /* jerry_port_module_free */
        -:  275:
        -:  276:/**
        -:  277: * Initialize the default module manager.
        -:  278: */
        -:  279:static void
    #####:  280:jerry_port_module_manager_init (void *user_data_p)
        -:  281:{
    #####:  282:  ((jerry_port_module_manager_t *) user_data_p)->module_head_p = NULL;
    #####:  283:} /* jerry_port_module_manager_init */
        -:  284:
        -:  285:/**
        -:  286: * Deinitialize the default module manager.
        -:  287: */
        -:  288:static void
    #####:  289:jerry_port_module_manager_deinit (void *user_data_p) /**< context pointer to deinitialize */
        -:  290:{
    #####:  291:  jerry_value_t undef = jerry_undefined ();
    #####:  292:  jerry_port_module_free ((jerry_port_module_manager_t *) user_data_p, undef);
    #####:  293:  jerry_value_free (undef);
    #####:  294:} /* jerry_port_module_manager_deinit */
        -:  295:
        -:  296:/**
        -:  297: * Declare the context data manager for modules.
        -:  298: */
        -:  299:static const jerry_context_data_manager_t jerry_port_module_manager = { .init_cb = jerry_port_module_manager_init,
        -:  300:                                                                        .deinit_cb = jerry_port_module_manager_deinit,
        -:  301:                                                                        .bytes_needed =
        -:  302:                                                                          sizeof (jerry_port_module_manager_t) };
        -:  303:
        -:  304:/**
        -:  305: * Default module resolver.
        -:  306: *
        -:  307: * @return a module object if resolving is successful, an error otherwise
        -:  308: */
        -:  309:jerry_value_t
    #####:  310:jerry_port_module_resolve (const jerry_value_t specifier, /**< module specifier string */
        -:  311:                           const jerry_value_t referrer, /**< parent module */
        -:  312:                           void *user_p) /**< user data */
        -:  313:{
        -:  314:  (void) user_p;
        -:  315:
    #####:  316:  const jerry_char_t *base_path_p = NULL;
    #####:  317:  size_t base_path_length = 0;
    #####:  318:  jerry_port_module_t *module_p = jerry_object_get_native_ptr (referrer, &jerry_port_module_native_info);
        -:  319:
    #####:  320:  if (module_p != NULL)
        -:  321:  {
    #####:  322:    base_path_p = module_p->path_p;
    #####:  323:    base_path_length = module_p->base_path_length;
        -:  324:  }
        -:  325:
    #####:  326:  jerry_size_t in_path_length = jerry_string_size (specifier, JERRY_ENCODING_UTF8);
    #####:  327:  jerry_char_t *in_path_p = (jerry_char_t *) malloc (in_path_length + 1);
    #####:  328:  jerry_string_to_buffer (specifier, JERRY_ENCODING_UTF8, in_path_p, in_path_length);
    #####:  329:  in_path_p[in_path_length] = '\0';
        -:  330:
    #####:  331:  jerry_char_t *path_p = jerry_port_normalize_path (in_path_p, in_path_length, base_path_p, base_path_length);
        -:  332:
    #####:  333:  if (path_p == NULL)
        -:  334:  {
    #####:  335:    return jerry_throw_sz (JERRY_ERROR_COMMON, "Out of memory");
        -:  336:  }
        -:  337:
    #####:  338:  jerry_value_t realm = jerry_current_realm ();
        -:  339:
        -:  340:  jerry_port_module_manager_t *manager_p;
    #####:  341:  manager_p = (jerry_port_module_manager_t *) jerry_context_data (&jerry_port_module_manager);
        -:  342:
    #####:  343:  module_p = manager_p->module_head_p;
        -:  344:
    #####:  345:  while (module_p != NULL)
        -:  346:  {
    #####:  347:    if (module_p->realm == realm && strcmp ((const char *) module_p->path_p, (const char *) path_p) == 0)
        -:  348:    {
    #####:  349:      free (path_p);
    #####:  350:      free (in_path_p);
    #####:  351:      jerry_value_free (realm);
    #####:  352:      return jerry_value_copy (module_p->module);
        -:  353:    }
        -:  354:
    #####:  355:    module_p = module_p->next_p;
        -:  356:  }
        -:  357:
    #####:  358:  size_t source_size;
    #####:  359:  uint8_t *source_p = jerry_port_read_source ((const char *) path_p, &source_size);
        -:  360:
    #####:  361:  if (source_p == NULL)
        -:  362:  {
    #####:  363:    free (path_p);
    #####:  364:    free (in_path_p);
    #####:  365:    jerry_value_free (realm);
        -:  366:    /* TODO: This is incorrect, but makes test262 module tests pass
        -:  367:     * (they should throw SyntaxError, but not because the module cannot be found). */
    #####:  368:    return jerry_throw_sz (JERRY_ERROR_SYNTAX, "Module file not found");
        -:  369:  }
        -:  370:
    #####:  371:  jerry_parse_options_t parse_options;
    #####:  372:  parse_options.options = JERRY_PARSE_MODULE | JERRY_PARSE_HAS_SOURCE_NAME;
    #####:  373:  parse_options.source_name = jerry_string (in_path_p, in_path_length, JERRY_ENCODING_UTF8);
        -:  374:
    #####:  375:  jerry_value_t ret_value = jerry_parse (source_p, source_size, &parse_options);
    #####:  376:  jerry_value_free (parse_options.source_name);
        -:  377:
    #####:  378:  jerry_port_release_source (source_p);
    #####:  379:  free (in_path_p);
        -:  380:
    #####:  381:  if (jerry_value_is_exception (ret_value))
        -:  382:  {
    #####:  383:    free (path_p);
    #####:  384:    jerry_value_free (realm);
    #####:  385:    return ret_value;
        -:  386:  }
        -:  387:
    #####:  388:  module_p = (jerry_port_module_t *) malloc (sizeof (jerry_port_module_t));
        -:  389:
    #####:  390:  module_p->next_p = manager_p->module_head_p;
    #####:  391:  module_p->path_p = path_p;
    #####:  392:  module_p->base_path_length = jerry_port_get_directory_end (module_p->path_p);
    #####:  393:  module_p->realm = realm;
    #####:  394:  module_p->module = jerry_value_copy (ret_value);
        -:  395:
    #####:  396:  jerry_object_set_native_ptr (ret_value, &jerry_port_module_native_info, module_p);
    #####:  397:  manager_p->module_head_p = module_p;
        -:  398:
    #####:  399:  return ret_value;
        -:  400:} /* jerry_port_module_resolve */
        -:  401:
        -:  402:/**
        -:  403: * Release known modules.
        -:  404: */
        -:  405:void
    #####:  406:jerry_port_module_release (const jerry_value_t realm) /**< if this argument is object, release only those modules,
        -:  407:                                                       *   which realm value is equal to this argument. */
        -:  408:{
    #####:  409:  jerry_port_module_free ((jerry_port_module_manager_t *) jerry_context_data (&jerry_port_module_manager), realm);
    #####:  410:} /* jerry_port_module_release */
