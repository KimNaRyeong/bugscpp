        -:    0:Source:/home/workspace/tests/unit-core/test-snapshot.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript.h"
        -:   17:
        -:   18:#include "config.h"
        -:   19:#include "test-common.h"
        -:   20:
        -:   21:/**
        -:   22: * Maximum size of snapshots buffer
        -:   23: */
        -:   24:#define SNAPSHOT_BUFFER_SIZE (256)
        -:   25:
        -:   26:/**
        -:   27: * Maximum size of literal buffer
        -:   28: */
        -:   29:#define LITERAL_BUFFER_SIZE (256)
        -:   30:
        -:   31:/**
        -:   32: * Magic strings
        -:   33: */
        -:   34:static const jerry_char_t *magic_strings[] = { (const jerry_char_t *) " ",      (const jerry_char_t *) "a",
        -:   35:                                               (const jerry_char_t *) "b",      (const jerry_char_t *) "c",
        -:   36:                                               (const jerry_char_t *) "from",   (const jerry_char_t *) "func",
        -:   37:                                               (const jerry_char_t *) "string", (const jerry_char_t *) "snapshot" };
        -:   38:
        -:   39:/**
        -:   40: * Magic string lengths
        -:   41: */
        -:   42:static const jerry_length_t magic_string_lengths[] = { 1, 1, 1, 1, 4, 4, 6, 8 };
        -:   43:
        -:   44:static void
    #####:   45:test_function_snapshot (void)
        -:   46:{
        -:   47:  /* function to snapshot */
    #####:   48:  if (!jerry_feature_enabled (JERRY_FEATURE_SNAPSHOT_SAVE) || !jerry_feature_enabled (JERRY_FEATURE_SNAPSHOT_EXEC))
        -:   49:  {
    #####:   50:    return;
        -:   51:  }
        -:   52:
    #####:   53:  const jerry_init_flag_t flags = JERRY_INIT_EMPTY;
        -:   54:  static uint32_t function_snapshot_buffer[SNAPSHOT_BUFFER_SIZE];
        -:   55:
    #####:   56:  const jerry_char_t code_to_snapshot[] = "return a + b";
        -:   57:
    #####:   58:  jerry_init (flags);
        -:   59:
        -:   60:  jerry_parse_options_t parse_options;
    #####:   61:  parse_options.options = JERRY_PARSE_HAS_ARGUMENT_LIST;
    #####:   62:  parse_options.argument_list = jerry_string_sz ("a, b");
        -:   63:
    #####:   64:  jerry_value_t parse_result = jerry_parse (code_to_snapshot, sizeof (code_to_snapshot) - 1, &parse_options);
    #####:   65:  TEST_ASSERT (!jerry_value_is_exception (parse_result));
        -:   66:
    #####:   67:  jerry_value_t generate_result =
        -:   68:    jerry_generate_snapshot (parse_result, 0, function_snapshot_buffer, SNAPSHOT_BUFFER_SIZE);
    #####:   69:  jerry_value_free (parse_result);
    #####:   70:  jerry_value_free (parse_options.argument_list);
        -:   71:
    #####:   72:  TEST_ASSERT (!jerry_value_is_exception (generate_result) && jerry_value_is_number (generate_result));
        -:   73:
    #####:   74:  size_t function_snapshot_size = (size_t) jerry_value_as_number (generate_result);
    #####:   75:  jerry_value_free (generate_result);
        -:   76:
    #####:   77:  jerry_cleanup ();
        -:   78:
    #####:   79:  jerry_init (flags);
        -:   80:
    #####:   81:  jerry_value_t function_obj = jerry_exec_snapshot (function_snapshot_buffer,
        -:   82:                                                    function_snapshot_size,
        -:   83:                                                    0,
        -:   84:                                                    JERRY_SNAPSHOT_EXEC_LOAD_AS_FUNCTION,
        -:   85:                                                    NULL);
        -:   86:
    #####:   87:  TEST_ASSERT (!jerry_value_is_exception (function_obj));
    #####:   88:  TEST_ASSERT (jerry_value_is_function (function_obj));
        -:   89:
    #####:   90:  jerry_value_t this_val = jerry_undefined ();
        -:   91:  jerry_value_t args[2];
    #####:   92:  args[0] = jerry_number (1.0);
    #####:   93:  args[1] = jerry_number (2.0);
        -:   94:
    #####:   95:  jerry_value_t res = jerry_call (function_obj, this_val, args, 2);
        -:   96:
    #####:   97:  TEST_ASSERT (!jerry_value_is_exception (res));
    #####:   98:  TEST_ASSERT (jerry_value_is_number (res));
    #####:   99:  double num = jerry_value_as_number (res);
    #####:  100:  TEST_ASSERT (num == 3);
        -:  101:
    #####:  102:  jerry_value_free (args[0]);
    #####:  103:  jerry_value_free (args[1]);
    #####:  104:  jerry_value_free (res);
    #####:  105:  jerry_value_free (function_obj);
        -:  106:
    #####:  107:  jerry_cleanup ();
        -:  108:} /* test_function_snapshot */
        -:  109:
        -:  110:static void
    #####:  111:arguments_test_exec_snapshot (uint32_t *snapshot_p, size_t snapshot_size, uint32_t exec_snapshot_flags)
        -:  112:{
    #####:  113:  jerry_init (JERRY_INIT_EMPTY);
    #####:  114:  jerry_value_t res = jerry_exec_snapshot (snapshot_p, snapshot_size, 0, exec_snapshot_flags, NULL);
    #####:  115:  TEST_ASSERT (!jerry_value_is_exception (res));
    #####:  116:  TEST_ASSERT (jerry_value_is_number (res));
    #####:  117:  double raw_value = jerry_value_as_number (res);
    #####:  118:  TEST_ASSERT (raw_value == 15);
    #####:  119:  jerry_value_free (res);
        -:  120:
    #####:  121:  jerry_cleanup ();
    #####:  122:} /* arguments_test_exec_snapshot */
        -:  123:
        -:  124:static void
    #####:  125:test_function_arguments_snapshot (void)
        -:  126:{
    #####:  127:  if (jerry_feature_enabled (JERRY_FEATURE_SNAPSHOT_SAVE) && jerry_feature_enabled (JERRY_FEATURE_SNAPSHOT_EXEC))
        -:  128:  {
        -:  129:    static uint32_t arguments_snapshot_buffer[SNAPSHOT_BUFFER_SIZE];
        -:  130:
    #####:  131:    const jerry_char_t code_to_snapshot[] = TEST_STRING_LITERAL ("function f(a,b,c) {"
        -:  132:                                                                 "  arguments[0]++;"
        -:  133:                                                                 "  arguments[1]++;"
        -:  134:                                                                 "  arguments[2]++;"
        -:  135:                                                                 "  return a + b + c;"
        -:  136:                                                                 "}"
        -:  137:                                                                 "f(3,4,5);");
    #####:  138:    jerry_init (JERRY_INIT_EMPTY);
        -:  139:
    #####:  140:    jerry_value_t parse_result = jerry_parse (code_to_snapshot, sizeof (code_to_snapshot) - 1, NULL);
    #####:  141:    TEST_ASSERT (!jerry_value_is_exception (parse_result));
        -:  142:
    #####:  143:    jerry_value_t generate_result =
        -:  144:      jerry_generate_snapshot (parse_result, 0, arguments_snapshot_buffer, SNAPSHOT_BUFFER_SIZE);
    #####:  145:    jerry_value_free (parse_result);
        -:  146:
    #####:  147:    TEST_ASSERT (!jerry_value_is_exception (generate_result) && jerry_value_is_number (generate_result));
        -:  148:
    #####:  149:    size_t snapshot_size = (size_t) jerry_value_as_number (generate_result);
    #####:  150:    jerry_value_free (generate_result);
        -:  151:
    #####:  152:    jerry_cleanup ();
        -:  153:
    #####:  154:    arguments_test_exec_snapshot (arguments_snapshot_buffer, snapshot_size, 0);
    #####:  155:    arguments_test_exec_snapshot (arguments_snapshot_buffer, snapshot_size, JERRY_SNAPSHOT_EXEC_COPY_DATA);
        -:  156:  }
    #####:  157:} /* test_function_arguments_snapshot */
        -:  158:
        -:  159:static void
    #####:  160:test_exec_snapshot (uint32_t *snapshot_p, size_t snapshot_size, uint32_t exec_snapshot_flags)
        -:  161:{
        -:  162:  char string_data[32];
        -:  163:
    #####:  164:  jerry_init (JERRY_INIT_EMPTY);
        -:  165:
    #####:  166:  jerry_register_magic_strings (magic_strings,
        -:  167:                                sizeof (magic_string_lengths) / sizeof (jerry_length_t),
        -:  168:                                magic_string_lengths);
        -:  169:
    #####:  170:  jerry_value_t res = jerry_exec_snapshot (snapshot_p, snapshot_size, 0, exec_snapshot_flags, NULL);
        -:  171:
    #####:  172:  TEST_ASSERT (!jerry_value_is_exception (res));
    #####:  173:  TEST_ASSERT (jerry_value_is_string (res));
    #####:  174:  jerry_size_t sz = jerry_string_size (res, JERRY_ENCODING_CESU8);
    #####:  175:  TEST_ASSERT (sz == 20);
    #####:  176:  sz = jerry_string_to_buffer (res, JERRY_ENCODING_CESU8, (jerry_char_t *) string_data, sz);
    #####:  177:  TEST_ASSERT (sz == 20);
    #####:  178:  jerry_value_free (res);
    #####:  179:  TEST_ASSERT (!strncmp (string_data, "string from snapshot", (size_t) sz));
        -:  180:
    #####:  181:  jerry_cleanup ();
    #####:  182:} /* test_exec_snapshot */
        -:  183:
        -:  184:static void
    #####:  185:test_snapshot_with_user (void)
        -:  186:{
    #####:  187:  if (jerry_feature_enabled (JERRY_FEATURE_SNAPSHOT_SAVE) && jerry_feature_enabled (JERRY_FEATURE_SNAPSHOT_EXEC))
        -:  188:  {
        -:  189:    static uint32_t snapshot_buffer[SNAPSHOT_BUFFER_SIZE];
        -:  190:
    #####:  191:    const jerry_char_t code_to_snapshot[] = TEST_STRING_LITERAL ("function f() {}\n"
        -:  192:                                                                 "f");
    #####:  193:    jerry_init (JERRY_INIT_EMPTY);
        -:  194:
    #####:  195:    jerry_value_t parse_result = jerry_parse (code_to_snapshot, sizeof (code_to_snapshot) - 1, NULL);
    #####:  196:    TEST_ASSERT (!jerry_value_is_exception (parse_result));
        -:  197:
    #####:  198:    jerry_value_t generate_result = jerry_generate_snapshot (parse_result, 0, snapshot_buffer, SNAPSHOT_BUFFER_SIZE);
    #####:  199:    jerry_value_free (parse_result);
        -:  200:
    #####:  201:    TEST_ASSERT (!jerry_value_is_exception (generate_result) && jerry_value_is_number (generate_result));
        -:  202:
    #####:  203:    size_t snapshot_size = (size_t) jerry_value_as_number (generate_result);
    #####:  204:    jerry_value_free (generate_result);
        -:  205:
    #####:  206:    for (int i = 0; i < 3; i++)
        -:  207:    {
        -:  208:      jerry_exec_snapshot_option_values_t snapshot_exec_options;
        -:  209:
    #####:  210:      if (i == 0)
        -:  211:      {
    #####:  212:        snapshot_exec_options.user_value = jerry_object ();
        -:  213:      }
    #####:  214:      else if (i == 1)
        -:  215:      {
    #####:  216:        snapshot_exec_options.user_value = jerry_number (-3.5);
        -:  217:      }
        -:  218:      else
        -:  219:      {
    #####:  220:        snapshot_exec_options.user_value = jerry_string_sz ("AnyString...");
        -:  221:      }
        -:  222:
    #####:  223:      jerry_value_t result = jerry_exec_snapshot (snapshot_buffer,
        -:  224:                                                  snapshot_size,
        -:  225:                                                  0,
        -:  226:                                                  JERRY_SNAPSHOT_EXEC_HAS_USER_VALUE,
        -:  227:                                                  &snapshot_exec_options);
        -:  228:
    #####:  229:      TEST_ASSERT (!jerry_value_is_exception (result) && jerry_value_is_function (result));
        -:  230:
    #####:  231:      jerry_value_t user_value = jerry_source_user_value (result);
    #####:  232:      jerry_value_free (result);
        -:  233:
    #####:  234:      result = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, user_value, snapshot_exec_options.user_value);
        -:  235:
    #####:  236:      TEST_ASSERT (jerry_value_is_true (result));
        -:  237:
    #####:  238:      jerry_value_free (result);
    #####:  239:      jerry_value_free (user_value);
    #####:  240:      jerry_value_free (snapshot_exec_options.user_value);
        -:  241:    }
        -:  242:
    #####:  243:    jerry_cleanup ();
        -:  244:  }
    #####:  245:} /* test_snapshot_with_user */
        -:  246:
        -:  247:int
    #####:  248:main (void)
        -:  249:{
    #####:  250:  TEST_INIT ();
        -:  251:
        -:  252:  /* Static snapshot */
    #####:  253:  if (jerry_feature_enabled (JERRY_FEATURE_SNAPSHOT_SAVE) && jerry_feature_enabled (JERRY_FEATURE_SNAPSHOT_EXEC))
        -:  254:  {
        -:  255:    static uint32_t snapshot_buffer[SNAPSHOT_BUFFER_SIZE];
    #####:  256:    const jerry_char_t code_to_snapshot[] = TEST_STRING_LITERAL ("function func(a, b, c) {"
        -:  257:                                                                 "  c = 'snapshot';"
        -:  258:                                                                 "  return arguments[0] + ' ' + b + ' ' + arguments[2];"
        -:  259:                                                                 "};"
        -:  260:                                                                 "func('string', 'from');");
        -:  261:
    #####:  262:    jerry_init (JERRY_INIT_EMPTY);
    #####:  263:    jerry_register_magic_strings (magic_strings,
        -:  264:                                  sizeof (magic_string_lengths) / sizeof (jerry_length_t),
        -:  265:                                  magic_string_lengths);
        -:  266:
    #####:  267:    jerry_value_t parse_result = jerry_parse (code_to_snapshot, sizeof (code_to_snapshot) - 1, NULL);
    #####:  268:    TEST_ASSERT (!jerry_value_is_exception (parse_result));
        -:  269:
    #####:  270:    jerry_value_t generate_result =
        -:  271:      jerry_generate_snapshot (parse_result, JERRY_SNAPSHOT_SAVE_STATIC, snapshot_buffer, SNAPSHOT_BUFFER_SIZE);
    #####:  272:    jerry_value_free (parse_result);
        -:  273:
    #####:  274:    TEST_ASSERT (!jerry_value_is_exception (generate_result) && jerry_value_is_number (generate_result));
        -:  275:
    #####:  276:    size_t snapshot_size = (size_t) jerry_value_as_number (generate_result);
    #####:  277:    jerry_value_free (generate_result);
        -:  278:
        -:  279:    /* Static snapshots are not supported by default. */
    #####:  280:    jerry_value_t exec_result = jerry_exec_snapshot (snapshot_buffer, snapshot_size, 0, 0, NULL);
    #####:  281:    TEST_ASSERT (jerry_value_is_exception (exec_result));
    #####:  282:    jerry_value_free (exec_result);
        -:  283:
    #####:  284:    jerry_cleanup ();
        -:  285:
    #####:  286:    test_exec_snapshot (snapshot_buffer, snapshot_size, JERRY_SNAPSHOT_EXEC_ALLOW_STATIC);
        -:  287:  }
        -:  288:
        -:  289:  /* Merge snapshot */
    #####:  290:  if (jerry_feature_enabled (JERRY_FEATURE_SNAPSHOT_SAVE) && jerry_feature_enabled (JERRY_FEATURE_SNAPSHOT_EXEC))
        -:  291:  {
        -:  292:    static uint32_t snapshot_buffer_0[SNAPSHOT_BUFFER_SIZE];
        -:  293:    static uint32_t snapshot_buffer_1[SNAPSHOT_BUFFER_SIZE];
        -:  294:    size_t snapshot_sizes[2];
        -:  295:    static uint32_t merged_snapshot_buffer[SNAPSHOT_BUFFER_SIZE];
        -:  296:
    #####:  297:    const jerry_char_t code_to_snapshot1[] = "var a = 'hello'; 123";
        -:  298:
    #####:  299:    jerry_init (JERRY_INIT_EMPTY);
        -:  300:
    #####:  301:    jerry_value_t parse_result = jerry_parse (code_to_snapshot1, sizeof (code_to_snapshot1) - 1, NULL);
    #####:  302:    TEST_ASSERT (!jerry_value_is_exception (parse_result));
        -:  303:
    #####:  304:    jerry_value_t generate_result = jerry_generate_snapshot (parse_result, 0, snapshot_buffer_0, SNAPSHOT_BUFFER_SIZE);
    #####:  305:    jerry_value_free (parse_result);
        -:  306:
    #####:  307:    TEST_ASSERT (!jerry_value_is_exception (generate_result) && jerry_value_is_number (generate_result));
        -:  308:
    #####:  309:    snapshot_sizes[0] = (size_t) jerry_value_as_number (generate_result);
    #####:  310:    jerry_value_free (generate_result);
        -:  311:
    #####:  312:    jerry_cleanup ();
        -:  313:
    #####:  314:    const jerry_char_t code_to_snapshot2[] = "var b = 'hello'; 456";
        -:  315:
    #####:  316:    jerry_init (JERRY_INIT_EMPTY);
        -:  317:
    #####:  318:    parse_result = jerry_parse (code_to_snapshot2, sizeof (code_to_snapshot2) - 1, NULL);
    #####:  319:    TEST_ASSERT (!jerry_value_is_exception (parse_result));
        -:  320:
    #####:  321:    generate_result = jerry_generate_snapshot (parse_result, 0, snapshot_buffer_1, SNAPSHOT_BUFFER_SIZE);
    #####:  322:    jerry_value_free (parse_result);
        -:  323:
    #####:  324:    TEST_ASSERT (!jerry_value_is_exception (generate_result) && jerry_value_is_number (generate_result));
        -:  325:
    #####:  326:    snapshot_sizes[1] = (size_t) jerry_value_as_number (generate_result);
    #####:  327:    jerry_value_free (generate_result);
        -:  328:
    #####:  329:    jerry_cleanup ();
        -:  330:
    #####:  331:    jerry_init (JERRY_INIT_EMPTY);
        -:  332:
        -:  333:    const char *error_p;
        -:  334:    const uint32_t *snapshot_buffers[2];
        -:  335:
    #####:  336:    snapshot_buffers[0] = snapshot_buffer_0;
    #####:  337:    snapshot_buffers[1] = snapshot_buffer_1;
        -:  338:
        -:  339:    static uint32_t snapshot_buffer_0_bck[SNAPSHOT_BUFFER_SIZE];
        -:  340:    static uint32_t snapshot_buffer_1_bck[SNAPSHOT_BUFFER_SIZE];
        -:  341:
    #####:  342:    memcpy (snapshot_buffer_0_bck, snapshot_buffer_0, SNAPSHOT_BUFFER_SIZE);
    #####:  343:    memcpy (snapshot_buffer_1_bck, snapshot_buffer_1, SNAPSHOT_BUFFER_SIZE);
        -:  344:
    #####:  345:    size_t merged_size = jerry_merge_snapshots (snapshot_buffers,
        -:  346:                                                snapshot_sizes,
        -:  347:                                                2,
        -:  348:                                                merged_snapshot_buffer,
        -:  349:                                                SNAPSHOT_BUFFER_SIZE,
        -:  350:                                                &error_p);
        -:  351:
    #####:  352:    jerry_cleanup ();
        -:  353:
    #####:  354:    TEST_ASSERT (0 == memcmp (snapshot_buffer_0_bck, snapshot_buffer_0, SNAPSHOT_BUFFER_SIZE));
    #####:  355:    TEST_ASSERT (0 == memcmp (snapshot_buffer_1_bck, snapshot_buffer_1, SNAPSHOT_BUFFER_SIZE));
        -:  356:
    #####:  357:    jerry_init (JERRY_INIT_EMPTY);
        -:  358:
    #####:  359:    jerry_value_t res = jerry_exec_snapshot (merged_snapshot_buffer, merged_size, 0, 0, NULL);
    #####:  360:    TEST_ASSERT (!jerry_value_is_exception (res));
    #####:  361:    TEST_ASSERT (jerry_value_as_number (res) == 123);
    #####:  362:    jerry_value_free (res);
        -:  363:
    #####:  364:    res = jerry_exec_snapshot (merged_snapshot_buffer, merged_size, 1, 0, NULL);
    #####:  365:    TEST_ASSERT (!jerry_value_is_exception (res));
    #####:  366:    TEST_ASSERT (jerry_value_as_number (res) == 456);
    #####:  367:    jerry_value_free (res);
        -:  368:
    #####:  369:    jerry_cleanup ();
        -:  370:  }
        -:  371:
        -:  372:  /* Save literals */
    #####:  373:  if (jerry_feature_enabled (JERRY_FEATURE_SNAPSHOT_SAVE))
        -:  374:  {
        -:  375:    /* C format generation */
    #####:  376:    jerry_init (JERRY_INIT_EMPTY);
        -:  377:
        -:  378:    static jerry_char_t literal_buffer_c[LITERAL_BUFFER_SIZE];
        -:  379:    static uint32_t literal_snapshot_buffer[SNAPSHOT_BUFFER_SIZE];
        -:  380:    static const jerry_char_t code_for_c_format[] = "var object = { aa:'fo\" o\\n \\\\', Bb:'max', aaa:'xzy0' };";
        -:  381:
    #####:  382:    jerry_value_t parse_result = jerry_parse (code_for_c_format, sizeof (code_for_c_format) - 1, NULL);
    #####:  383:    TEST_ASSERT (!jerry_value_is_exception (parse_result));
        -:  384:
    #####:  385:    jerry_value_t generate_result =
        -:  386:      jerry_generate_snapshot (parse_result, 0, literal_snapshot_buffer, SNAPSHOT_BUFFER_SIZE);
    #####:  387:    jerry_value_free (parse_result);
        -:  388:
    #####:  389:    TEST_ASSERT (!jerry_value_is_exception (generate_result));
    #####:  390:    TEST_ASSERT (jerry_value_is_number (generate_result));
        -:  391:
    #####:  392:    size_t snapshot_size = (size_t) jerry_value_as_number (generate_result);
    #####:  393:    jerry_value_free (generate_result);
        -:  394:
    #####:  395:    const size_t lit_c_buf_sz = jerry_get_literals_from_snapshot (literal_snapshot_buffer,
        -:  396:                                                                  snapshot_size,
        -:  397:                                                                  literal_buffer_c,
        -:  398:                                                                  LITERAL_BUFFER_SIZE,
        -:  399:                                                                  true);
    #####:  400:    TEST_ASSERT (lit_c_buf_sz == 239);
        -:  401:
        -:  402:    static const char *expected_c_format = ("jerry_length_t literal_count = 5;\n\n"
        -:  403:                                            "jerry_char_t *literals[5] =\n"
        -:  404:                                            "{\n"
        -:  405:                                            "  \"Bb\",\n"
        -:  406:                                            "  \"aa\",\n"
        -:  407:                                            "  \"aaa\",\n"
        -:  408:                                            "  \"xzy0\",\n"
        -:  409:                                            "  \"fo\\\" o\\x0A \\\\\"\n"
        -:  410:                                            "};\n\n"
        -:  411:                                            "jerry_length_t literal_sizes[5] =\n"
        -:  412:                                            "{\n"
        -:  413:                                            "  2 /* Bb */,\n"
        -:  414:                                            "  2 /* aa */,\n"
        -:  415:                                            "  3 /* aaa */,\n"
        -:  416:                                            "  4 /* xzy0 */,\n"
        -:  417:                                            "  8 /* fo\" o\n \\ */\n"
        -:  418:                                            "};\n");
        -:  419:
    #####:  420:    TEST_ASSERT (!strncmp ((char *) literal_buffer_c, expected_c_format, lit_c_buf_sz));
        -:  421:
        -:  422:    /* List format generation */
        -:  423:    static jerry_char_t literal_buffer_list[LITERAL_BUFFER_SIZE];
    #####:  424:    const size_t lit_list_buf_sz = jerry_get_literals_from_snapshot (literal_snapshot_buffer,
        -:  425:                                                                     snapshot_size,
        -:  426:                                                                     literal_buffer_list,
        -:  427:                                                                     LITERAL_BUFFER_SIZE,
        -:  428:                                                                     false);
    #####:  429:    TEST_ASSERT (lit_list_buf_sz == 34);
    #####:  430:    TEST_ASSERT (
        -:  431:      !strncmp ((char *) literal_buffer_list, "2 Bb\n2 aa\n3 aaa\n4 xzy0\n8 fo\" o\n \\\n", lit_list_buf_sz));
        -:  432:
    #####:  433:    jerry_cleanup ();
        -:  434:  }
        -:  435:
    #####:  436:  test_function_snapshot ();
        -:  437:
    #####:  438:  test_function_arguments_snapshot ();
        -:  439:
    #####:  440:  test_snapshot_with_user ();
        -:  441:
        -:  442:  return 0;
        -:  443:} /* main */
