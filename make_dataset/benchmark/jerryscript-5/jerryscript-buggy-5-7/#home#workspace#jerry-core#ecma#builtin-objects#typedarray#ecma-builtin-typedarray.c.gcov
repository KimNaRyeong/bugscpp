        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/typedarray/ecma-builtin-typedarray.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-arraybuffer-object.h"
        -:   17:#include "ecma-builtins.h"
        -:   18:#include "ecma-exceptions.h"
        -:   19:#include "ecma-function-object.h"
        -:   20:#include "ecma-gc.h"
        -:   21:#include "ecma-globals.h"
        -:   22:#include "ecma-helpers.h"
        -:   23:#include "ecma-typedarray-object.h"
        -:   24:
        -:   25:#include "jrt.h"
        -:   26:
        -:   27:#if JERRY_BUILTIN_TYPEDARRAY
        -:   28:
        -:   29:#define ECMA_BUILTINS_INTERNAL
        -:   30:#include "ecma-builtins-internal.h"
        -:   31:
        -:   32:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-typedarray.inc.h"
        -:   33:#define BUILTIN_UNDERSCORED_ID  typedarray
        -:   34:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   35:#include "ecma-builtin-typedarray-helpers.h"
        -:   36:
        -:   37:/** \addtogroup ecma ECMA
        -:   38: * @{
        -:   39: *
        -:   40: * \addtogroup ecmabuiltins
        -:   41: * @{
        -:   42: *
        -:   43: * \addtogroup typedarray ECMA %TypedArray% object built-in
        -:   44: * @{
        -:   45: */
        -:   46:
        -:   47:/**
        -:   48: * The %TypedArray%.from routine
        -:   49: *
        -:   50: * See also:
        -:   51: *         ES2015 22.2.2.1
        -:   52: *
        -:   53: * @return ecma value
        -:   54: *         Returned value must be freed with ecma_free_value.
        -:   55: */
        -:   56:static ecma_value_t
    #####:   57:ecma_builtin_typedarray_from (ecma_value_t this_arg, /**< 'this' argument */
        -:   58:                              const ecma_value_t *arguments_list_p, /**< arguments list */
        -:   59:                              uint32_t arguments_list_len) /**< number of arguments */
        -:   60:{
    #####:   61:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:   62:
    #####:   63:  if (!ecma_is_constructor (this_arg))
        -:   64:  {
    #####:   65:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_CONSTRUCTOR);
        -:   66:  }
        -:   67:
        -:   68:  ecma_value_t source;
    #####:   69:  ecma_value_t map_fn = ECMA_VALUE_UNDEFINED;
    #####:   70:  ecma_value_t this_in_fn = ECMA_VALUE_UNDEFINED;
        -:   71:
    #####:   72:  if (arguments_list_len == 0)
        -:   73:  {
    #####:   74:    return ecma_raise_type_error (ECMA_ERR_NO_SOURCE_ARGUMENT);
        -:   75:  }
        -:   76:
    #####:   77:  source = arguments_list_p[0];
        -:   78:
    #####:   79:  if (arguments_list_len > 1)
        -:   80:  {
    #####:   81:    map_fn = arguments_list_p[1];
        -:   82:
    #####:   83:    if (!ecma_op_is_callable (map_fn))
        -:   84:    {
    #####:   85:      return ecma_raise_type_error (ECMA_ERR_THE_MAPFN_ARGUMENT_IS_NOT_CALLABLE);
        -:   86:    }
        -:   87:
    #####:   88:    if (arguments_list_len > 2)
        -:   89:    {
    #####:   90:      this_in_fn = arguments_list_p[2];
        -:   91:    }
        -:   92:  }
        -:   93:
    #####:   94:  return ecma_op_typedarray_from (this_arg, source, map_fn, this_in_fn);
        -:   95:
        -:   96:} /* ecma_builtin_typedarray_from */
        -:   97:
        -:   98:/**
        -:   99: * The %TypedArray%.of routine
        -:  100: *
        -:  101: * See also:
        -:  102: *         ES2015 22.2.2.2
        -:  103: *
        -:  104: * @return ecma value
        -:  105: *         Returned value must be freed with ecma_free_value.
        -:  106: */
        -:  107:static ecma_value_t
    #####:  108:ecma_builtin_typedarray_of (ecma_value_t this_arg, /**< 'this' argument */
        -:  109:                            const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  110:                            uint32_t arguments_list_len) /**< number of arguments */
        -:  111:{
    #####:  112:  if (!ecma_is_constructor (this_arg))
        -:  113:  {
    #####:  114:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_CONSTRUCTOR);
        -:  115:  }
        -:  116:
    #####:  117:  ecma_object_t *constructor_obj_p = ecma_get_object_from_value (this_arg);
    #####:  118:  ecma_value_t len_val = ecma_make_uint32_value (arguments_list_len);
    #####:  119:  ecma_value_t ret_val = ecma_typedarray_create (constructor_obj_p, &len_val, 1);
    #####:  120:  ecma_free_value (len_val);
        -:  121:
    #####:  122:  if (ECMA_IS_VALUE_ERROR (ret_val))
        -:  123:  {
    #####:  124:    return ret_val;
        -:  125:  }
        -:  126:
    #####:  127:  uint32_t k = 0;
    #####:  128:  ecma_object_t *ret_obj_p = ecma_get_object_from_value (ret_val);
    #####:  129:  ecma_typedarray_info_t info = ecma_typedarray_get_info (ret_obj_p);
    #####:  130:  ecma_typedarray_setter_fn_t setter_cb = ecma_get_typedarray_setter_fn (info.id);
        -:  131:
    #####:  132:  if (ECMA_ARRAYBUFFER_LAZY_ALLOC (info.array_buffer_p))
        -:  133:  {
    #####:  134:    ecma_deref_object (ret_obj_p);
    #####:  135:    return ECMA_VALUE_ERROR;
        -:  136:  }
        -:  137:
    #####:  138:  if (ecma_arraybuffer_is_detached (info.array_buffer_p))
        -:  139:  {
    #####:  140:    ecma_deref_object (ret_obj_p);
    #####:  141:    return ecma_raise_type_error (ECMA_ERR_ARRAYBUFFER_IS_DETACHED);
        -:  142:  }
        -:  143:
    #####:  144:  lit_utf8_byte_t *buffer_p = ecma_typedarray_get_buffer (&info);
        -:  145:
    #####:  146:  while (k < arguments_list_len)
        -:  147:  {
    #####:  148:    ecma_value_t set_element = setter_cb (buffer_p, arguments_list_p[k]);
        -:  149:
    #####:  150:    if (ECMA_IS_VALUE_ERROR (set_element))
        -:  151:    {
    #####:  152:      ecma_deref_object (ret_obj_p);
    #####:  153:      return set_element;
        -:  154:    }
        -:  155:
    #####:  156:    k++;
    #####:  157:    buffer_p += info.element_size;
        -:  158:  }
        -:  159:
    #####:  160:  return ret_val;
        -:  161:} /* ecma_builtin_typedarray_of */
        -:  162:
        -:  163:/**
        -:  164: * Handle calling [[Call]] of built-in %TypedArray% object
        -:  165: *
        -:  166: * ES2015 22.2.1 If %TypedArray% is directly called or
        -:  167: * called as part of a new expression an exception is thrown
        -:  168: *
        -:  169: * @return ecma value
        -:  170: */
        -:  171:ecma_value_t
    #####:  172:ecma_builtin_typedarray_dispatch_call (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  173:                                       uint32_t arguments_list_len) /**< number of arguments */
        -:  174:{
    #####:  175:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  176:
    #####:  177:  return ecma_raise_type_error (ECMA_ERR_TYPEDARRAY_INTRINSTIC_DIRECTLY_CALLED);
        -:  178:} /* ecma_builtin_typedarray_dispatch_call */
        -:  179:
        -:  180:/**
        -:  181: * Handle calling [[Construct]] of built-in %TypedArray% object
        -:  182: *
        -:  183: * ES2015 22.2.1 If %TypedArray% is directly called or
        -:  184: * called as part of a new expression an exception is thrown
        -:  185: *
        -:  186: * @return ecma value
        -:  187: */
        -:  188:ecma_value_t
    #####:  189:ecma_builtin_typedarray_dispatch_construct (const ecma_value_t *arguments_list_p, /**< arguments list */
        -:  190:                                            uint32_t arguments_list_len) /**< number of arguments */
        -:  191:{
    #####:  192:  JERRY_ASSERT (arguments_list_len == 0 || arguments_list_p != NULL);
        -:  193:
    #####:  194:  return ecma_raise_type_error (ECMA_ERR_TYPEDARRAY_INTRINSTIC_CALLED_BY_NEW_EXPRESSION);
        -:  195:} /* ecma_builtin_typedarray_dispatch_construct */
        -:  196:
        -:  197:/**
        -:  198: * 22.2.2.4 get %TypedArray% [ @@species ] accessor
        -:  199: *
        -:  200: * @return ecma_value
        -:  201: *         returned value must be freed with ecma_free_value
        -:  202: */
        -:  203:ecma_value_t
    #####:  204:ecma_builtin_typedarray_species_get (ecma_value_t this_value) /**< This Value */
        -:  205:{
    #####:  206:  return ecma_copy_value (this_value);
        -:  207:} /* ecma_builtin_typedarray_species_get */
        -:  208:
        -:  209:/**
        -:  210: * @}
        -:  211: * @}
        -:  212: * @}
        -:  213: */
        -:  214:
        -:  215:#endif /* JERRY_BUILTIN_TYPEDARRAY */
