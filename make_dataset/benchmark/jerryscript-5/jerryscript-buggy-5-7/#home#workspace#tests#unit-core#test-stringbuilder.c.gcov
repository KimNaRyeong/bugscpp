        -:    0:Source:/home/workspace/tests/unit-core/test-stringbuilder.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-helpers.h"
        -:   17:#include "ecma-init-finalize.h"
        -:   18:
        -:   19:#include "lit-char-helpers.h"
        -:   20:#include "lit-strings.h"
        -:   21:#include "test-common.h"
        -:   22:
        -:   23:int
    #####:   24:main (void)
        -:   25:{
    #####:   26:  TEST_INIT ();
        -:   27:
    #####:   28:  jmem_init ();
    #####:   29:  ecma_init ();
        -:   30:
        -:   31:  {
        -:   32:    static const lit_utf8_byte_t string_data[] = "A simple string";
        -:   33:
    #####:   34:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
    #####:   35:    ecma_stringbuilder_append_raw (&builder, string_data, sizeof (string_data) - 1);
    #####:   36:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:   37:
    #####:   38:    ecma_string_t *str_p = ecma_new_ecma_string_from_ascii (string_data, sizeof (string_data) - 1);
    #####:   39:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, str_p));
    #####:   40:    ecma_deref_ecma_string (result_p);
    #####:   41:    ecma_deref_ecma_string (str_p);
        -:   42:  }
        -:   43:
        -:   44:  {
    #####:   45:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
    #####:   46:    ecma_stringbuilder_append_magic (&builder, LIT_MAGIC_STRING_STRING);
    #####:   47:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:   48:
    #####:   49:    ecma_string_t *str_p = ecma_get_magic_string (LIT_MAGIC_STRING_STRING);
    #####:   50:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, str_p));
        -:   51:  }
        -:   52:
        -:   53:  {
        -:   54:    static const lit_utf8_byte_t string_data[] = "a";
        -:   55:
    #####:   56:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
    #####:   57:    ecma_stringbuilder_append_char (&builder, LIT_CHAR_LOWERCASE_A);
    #####:   58:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:   59:
    #####:   60:    ecma_string_t *str_p = ecma_new_ecma_string_from_ascii (string_data, sizeof (string_data) - 1);
    #####:   61:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, str_p));
    #####:   62:    ecma_deref_ecma_string (result_p);
    #####:   63:    ecma_deref_ecma_string (str_p);
        -:   64:  }
        -:   65:
        -:   66:  {
        -:   67:    static const lit_utf8_byte_t string_data[] = "A simple string";
    #####:   68:    ecma_string_t *str_p = ecma_new_ecma_string_from_ascii (string_data, sizeof (string_data) - 1);
        -:   69:
    #####:   70:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
    #####:   71:    ecma_stringbuilder_append (&builder, str_p);
    #####:   72:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:   73:
    #####:   74:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, str_p));
    #####:   75:    ecma_deref_ecma_string (result_p);
    #####:   76:    ecma_deref_ecma_string (str_p);
        -:   77:  }
        -:   78:
        -:   79:  {
    #####:   80:    ecma_string_t *str_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
        -:   81:
    #####:   82:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
    #####:   83:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:   84:
    #####:   85:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, str_p));
        -:   86:  }
        -:   87:
        -:   88:  {
        -:   89:    static const lit_utf8_byte_t string_data[] = "abc";
        -:   90:
    #####:   91:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
    #####:   92:    ecma_stringbuilder_append_char (&builder, LIT_CHAR_LOWERCASE_A);
    #####:   93:    ecma_stringbuilder_append_char (&builder, LIT_CHAR_LOWERCASE_B);
    #####:   94:    ecma_stringbuilder_append_char (&builder, LIT_CHAR_LOWERCASE_C);
    #####:   95:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:   96:
    #####:   97:    ecma_string_t *str_p = ecma_new_ecma_string_from_ascii (string_data, sizeof (string_data) - 1);
    #####:   98:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, str_p));
    #####:   99:    ecma_deref_ecma_string (result_p);
    #####:  100:    ecma_deref_ecma_string (str_p);
        -:  101:  }
        -:  102:
        -:  103:  {
    #####:  104:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
    #####:  105:    ecma_stringbuilder_append_char (&builder, LIT_CHAR_1);
    #####:  106:    ecma_stringbuilder_append_char (&builder, LIT_CHAR_2);
    #####:  107:    ecma_stringbuilder_append_char (&builder, LIT_CHAR_3);
    #####:  108:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:  109:
    #####:  110:    ecma_string_t *str_p = ecma_new_ecma_string_from_uint32 (123);
    #####:  111:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, str_p));
    #####:  112:    ecma_deref_ecma_string (result_p);
    #####:  113:    ecma_deref_ecma_string (str_p);
        -:  114:  }
        -:  115:
        -:  116:  {
        -:  117:    static const lit_utf8_byte_t string_data[] = "abc";
    #####:  118:    ecma_string_t *uint_str_p = ecma_new_ecma_string_from_uint32 (234);
        -:  119:
    #####:  120:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
    #####:  121:    ecma_stringbuilder_append_char (&builder, LIT_CHAR_1);
    #####:  122:    ecma_stringbuilder_append_raw (&builder, string_data, sizeof (string_data) - 1);
    #####:  123:    ecma_stringbuilder_append (&builder, uint_str_p);
    #####:  124:    ecma_stringbuilder_append_magic (&builder, LIT_MAGIC_STRING_STRING);
    #####:  125:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:  126:
        -:  127:    static const lit_utf8_byte_t expected_data[] = "1abc234string";
    #####:  128:    ecma_string_t *str_p = ecma_new_ecma_string_from_ascii (expected_data, sizeof (expected_data) - 1);
    #####:  129:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, str_p));
    #####:  130:    ecma_deref_ecma_string (result_p);
    #####:  131:    ecma_deref_ecma_string (str_p);
        -:  132:  }
        -:  133:
        -:  134:  {
        -:  135:    static const lit_utf8_byte_t string_data[] = "abc";
    #####:  136:    ecma_string_t *uint_str_p = ecma_new_ecma_string_from_uint32 (234);
        -:  137:
    #####:  138:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
    #####:  139:    ecma_stringbuilder_append_char (&builder, LIT_CHAR_1);
    #####:  140:    ecma_stringbuilder_append_raw (&builder, string_data, sizeof (string_data) - 1);
    #####:  141:    ecma_stringbuilder_append (&builder, uint_str_p);
    #####:  142:    ecma_stringbuilder_append_magic (&builder, LIT_MAGIC_STRING_STRING);
        -:  143:    /* Test that we do not leak. */
    #####:  144:    ecma_stringbuilder_destroy (&builder);
        -:  145:  }
        -:  146:
        -:  147:  {
        -:  148:    static const lit_utf8_byte_t string_data[] = "abcdefghijklmnop";
    #####:  149:    const size_t count = UINT16_MAX / (sizeof (string_data) - 1) + 1;
        -:  150:
    #####:  151:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
    #####:  152:    for (size_t i = 0; i < count; i++)
        -:  153:    {
    #####:  154:      ecma_stringbuilder_append_raw (&builder, string_data, sizeof (string_data) - 1);
        -:  155:    }
    #####:  156:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:  157:
    #####:  158:    ecma_string_t *expected_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
    #####:  159:    for (size_t i = 0; i < count; i++)
        -:  160:    {
    #####:  161:      expected_p =
        -:  162:        ecma_append_chars_to_string (expected_p, string_data, sizeof (string_data) - 1, sizeof (string_data) - 1);
        -:  163:    }
        -:  164:
    #####:  165:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, expected_p));
    #####:  166:    ecma_deref_ecma_string (result_p);
    #####:  167:    ecma_deref_ecma_string (expected_p);
        -:  168:  }
        -:  169:
        -:  170:  {
        -:  171:    static const lit_utf8_byte_t string_data[] = "abc";
    #####:  172:    ecma_string_t *uint_str_p = ecma_new_ecma_string_from_uint32 (234);
        -:  173:
    #####:  174:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
    #####:  175:    ecma_stringbuilder_append_char (&builder, LIT_CHAR_1);
    #####:  176:    ecma_stringbuilder_append_raw (&builder, string_data, sizeof (string_data) - 1);
        -:  177:
    #####:  178:    ecma_string_t *another_string = ecma_new_ecma_string_from_ascii (string_data, sizeof (string_data) - 1);
        -:  179:
    #####:  180:    ecma_stringbuilder_append (&builder, uint_str_p);
    #####:  181:    ecma_stringbuilder_append_magic (&builder, LIT_MAGIC_STRING_STRING);
    #####:  182:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:  183:
        -:  184:    static const lit_utf8_byte_t expected_data[] = "1abc234string";
    #####:  185:    ecma_string_t *str_p = ecma_new_ecma_string_from_ascii (expected_data, sizeof (expected_data) - 1);
    #####:  186:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, str_p));
    #####:  187:    ecma_deref_ecma_string (result_p);
    #####:  188:    ecma_deref_ecma_string (str_p);
    #####:  189:    ecma_deref_ecma_string (another_string);
        -:  190:  }
        -:  191:
        -:  192:  {
        -:  193:    static const lit_utf8_byte_t string_data[] = "abc";
    #####:  194:    ecma_string_t *uint_str_p = ecma_new_ecma_string_from_uint32 (234);
        -:  195:
    #####:  196:    ecma_stringbuilder_t builder = ecma_stringbuilder_create_from (uint_str_p);
    #####:  197:    ecma_stringbuilder_append_raw (&builder, string_data, sizeof (string_data) - 1);
    #####:  198:    ecma_stringbuilder_append_magic (&builder, LIT_MAGIC_STRING_STRING);
    #####:  199:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:  200:
        -:  201:    static const lit_utf8_byte_t expected_data[] = "234abcstring";
    #####:  202:    ecma_string_t *str_p = ecma_new_ecma_string_from_ascii (expected_data, sizeof (expected_data) - 1);
    #####:  203:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, str_p));
    #####:  204:    ecma_deref_ecma_string (result_p);
    #####:  205:    ecma_deref_ecma_string (str_p);
        -:  206:  }
        -:  207:
        -:  208:  {
    #####:  209:    ecma_stringbuilder_t builder = ecma_stringbuilder_create ();
    #####:  210:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:  211:
    #####:  212:    ecma_string_t *str_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
    #####:  213:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, str_p));
    #####:  214:    ecma_deref_ecma_string (result_p);
    #####:  215:    ecma_deref_ecma_string (str_p);
        -:  216:  }
        -:  217:
        -:  218:  {
    #####:  219:    ecma_string_t *str_p = ecma_get_magic_string (LIT_MAGIC_STRING__EMPTY);
    #####:  220:    ecma_stringbuilder_t builder = ecma_stringbuilder_create_from (str_p);
    #####:  221:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:  222:
    #####:  223:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, str_p));
    #####:  224:    ecma_deref_ecma_string (result_p);
    #####:  225:    ecma_deref_ecma_string (str_p);
        -:  226:  }
        -:  227:
        -:  228:  {
    #####:  229:    ecma_string_t *str_p = ecma_get_magic_string (LIT_MAGIC_STRING_STRING);
    #####:  230:    ecma_stringbuilder_t builder = ecma_stringbuilder_create_from (str_p);
    #####:  231:    ecma_string_t *result_p = ecma_stringbuilder_finalize (&builder);
        -:  232:
    #####:  233:    TEST_ASSERT (ecma_compare_ecma_strings (result_p, str_p));
    #####:  234:    ecma_deref_ecma_string (result_p);
    #####:  235:    ecma_deref_ecma_string (str_p);
        -:  236:  }
        -:  237:
    #####:  238:  ecma_finalize ();
    #####:  239:  jmem_finalize ();
        -:  240:
        -:  241:  return 0;
        -:  242:} /* main */
