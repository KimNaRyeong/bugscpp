        -:    0:Source:/home/workspace/tests/unit-core/test-symbol.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "jerryscript-port-default.h"
        -:   17:#include "jerryscript-port.h"
        -:   18:#include "jerryscript.h"
        -:   19:
        -:   20:#include "test-common.h"
        -:   21:
        -:   22:/* foo string */
        -:   23:#define STRING_FOO ("foo")
        -:   24:
        -:   25:/* bar string */
        -:   26:#define STRING_BAR ("bar")
        -:   27:
        -:   28:/* Symbol(bar) desciptive string */
        -:   29:#define SYMBOL_DESCIPTIVE_STRING_BAR "Symbol(bar)"
        -:   30:
        -:   31:/* bar string desciption */
        -:   32:#define SYMBOL_DESCIPTION_BAR "bar"
        -:   33:
        -:   34:int
    #####:   35:main (void)
    #####:   36:{
    #####:   37:  if (!jerry_feature_enabled (JERRY_FEATURE_SYMBOL))
        -:   38:  {
    #####:   39:    jerry_port_log (JERRY_LOG_LEVEL_ERROR, "Symbol support is disabled!\n");
    #####:   40:    return 0;
        -:   41:  }
        -:   42:
    #####:   43:  jerry_init (JERRY_INIT_EMPTY);
        -:   44:
    #####:   45:  jerry_value_t object = jerry_object ();
        -:   46:
        -:   47:  /* Test for that each symbol is unique independently from their descriptor strings */
    #####:   48:  jerry_value_t symbol_desc_1 = jerry_string_sz (STRING_FOO);
    #####:   49:  jerry_value_t symbol_desc_2 = jerry_string_sz (STRING_FOO);
        -:   50:
    #####:   51:  jerry_value_t symbol_1 = jerry_symbol_with_description (symbol_desc_1);
    #####:   52:  TEST_ASSERT (!jerry_value_is_exception (symbol_1));
    #####:   53:  TEST_ASSERT (jerry_value_is_symbol (symbol_1));
        -:   54:
    #####:   55:  jerry_value_t symbol_2 = jerry_symbol_with_description (symbol_desc_2);
    #####:   56:  TEST_ASSERT (!jerry_value_is_exception (symbol_2));
    #####:   57:  TEST_ASSERT (jerry_value_is_symbol (symbol_2));
        -:   58:
        -:   59:  /* The descriptor strings are no longer needed */
    #####:   60:  jerry_value_free (symbol_desc_1);
    #####:   61:  jerry_value_free (symbol_desc_2);
        -:   62:
    #####:   63:  jerry_value_t value_1 = jerry_number (1);
    #####:   64:  jerry_value_t value_2 = jerry_number (2);
        -:   65:
    #####:   66:  jerry_value_t result_val = jerry_object_set (object, symbol_1, value_1);
    #####:   67:  TEST_ASSERT (jerry_value_is_boolean (result_val));
    #####:   68:  TEST_ASSERT (jerry_value_is_true (jerry_object_has (object, symbol_1)));
    #####:   69:  TEST_ASSERT (jerry_value_is_true (jerry_object_has_own (object, symbol_1)));
        -:   70:
    #####:   71:  result_val = jerry_object_set (object, symbol_2, value_2);
    #####:   72:  TEST_ASSERT (jerry_value_is_boolean (result_val));
    #####:   73:  TEST_ASSERT (jerry_value_is_true (jerry_object_has (object, symbol_2)));
    #####:   74:  TEST_ASSERT (jerry_value_is_true (jerry_object_has_own (object, symbol_2)));
        -:   75:
    #####:   76:  jerry_value_t get_value_1 = jerry_object_get (object, symbol_1);
    #####:   77:  TEST_ASSERT (jerry_value_as_number (get_value_1) == jerry_value_as_number (value_1));
    #####:   78:  jerry_value_free (get_value_1);
        -:   79:
    #####:   80:  jerry_value_t get_value_2 = jerry_object_get (object, symbol_2);
    #####:   81:  TEST_ASSERT (jerry_value_as_number (get_value_2) == jerry_value_as_number (value_2));
    #####:   82:  jerry_value_free (get_value_2);
        -:   83:
        -:   84:  /* Test delete / has_{own}_property */
    #####:   85:  TEST_ASSERT (jerry_value_is_true (jerry_object_delete (object, symbol_1)));
    #####:   86:  TEST_ASSERT (!jerry_value_is_true (jerry_object_has (object, symbol_1)));
    #####:   87:  TEST_ASSERT (!jerry_value_is_true (jerry_object_has_own (object, symbol_1)));
        -:   88:
    #####:   89:  jerry_value_free (value_1);
    #####:   90:  jerry_value_free (symbol_1);
        -:   91:
        -:   92:  /* Test {get, define}_own_property_descriptor */
        -:   93:  jerry_property_descriptor_t prop_desc;
    #####:   94:  TEST_ASSERT (jerry_object_get_own_prop (object, symbol_2, &prop_desc));
    #####:   95:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_VALUE_DEFINED);
    #####:   96:  TEST_ASSERT (value_2 == prop_desc.value);
    #####:   97:  TEST_ASSERT (jerry_value_as_number (value_2) == jerry_value_as_number (prop_desc.value));
    #####:   98:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_WRITABLE);
    #####:   99:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE);
    #####:  100:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE);
    #####:  101:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_GET_DEFINED));
    #####:  102:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.getter));
    #####:  103:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_SET_DEFINED));
    #####:  104:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.setter));
    #####:  105:  jerry_property_descriptor_free (&prop_desc);
        -:  106:
        -:  107:  /* Modify the descriptor fields */
    #####:  108:  prop_desc = jerry_property_descriptor ();
    #####:  109:  jerry_value_t value_3 = jerry_string_sz (STRING_BAR);
        -:  110:
    #####:  111:  prop_desc.flags |= JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE_DEFINED | JERRY_PROP_IS_ENUMERABLE_DEFINED
        -:  112:                     | JERRY_PROP_IS_CONFIGURABLE_DEFINED;
    #####:  113:  prop_desc.value = jerry_value_copy (value_3);
    #####:  114:  TEST_ASSERT (jerry_value_is_true (jerry_object_define_own_prop (object, symbol_2, &prop_desc)));
    #####:  115:  jerry_property_descriptor_free (&prop_desc);
        -:  116:
        -:  117:  /* Check the modified fields */
    #####:  118:  TEST_ASSERT (jerry_object_get_own_prop (object, symbol_2, &prop_desc));
    #####:  119:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_VALUE_DEFINED);
    #####:  120:  TEST_ASSERT (value_3 == prop_desc.value);
    #####:  121:  TEST_ASSERT (jerry_value_is_string (prop_desc.value));
    #####:  122:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_WRITABLE_DEFINED);
    #####:  123:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_WRITABLE));
    #####:  124:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE_DEFINED);
    #####:  125:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_ENUMERABLE));
    #####:  126:  TEST_ASSERT (prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED);
    #####:  127:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_CONFIGURABLE));
    #####:  128:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_GET_DEFINED));
    #####:  129:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.getter));
    #####:  130:  TEST_ASSERT (!(prop_desc.flags & JERRY_PROP_IS_SET_DEFINED));
    #####:  131:  TEST_ASSERT (jerry_value_is_undefined (prop_desc.setter));
    #####:  132:  jerry_property_descriptor_free (&prop_desc);
        -:  133:
    #####:  134:  jerry_value_free (value_3);
    #####:  135:  jerry_value_free (value_2);
    #####:  136:  jerry_value_free (symbol_2);
    #####:  137:  jerry_value_free (object);
        -:  138:
        -:  139:  /* Test creating symbol with a symbol description */
    #####:  140:  jerry_value_t empty_symbol_desc = jerry_string_sz ("");
        -:  141:
    #####:  142:  jerry_value_t empty_symbol = jerry_symbol_with_description (empty_symbol_desc);
    #####:  143:  TEST_ASSERT (!jerry_value_is_exception (empty_symbol));
    #####:  144:  TEST_ASSERT (jerry_value_is_symbol (empty_symbol));
        -:  145:
    #####:  146:  jerry_value_free (empty_symbol_desc);
        -:  147:
    #####:  148:  jerry_value_t symbol_symbol = jerry_symbol_with_description (empty_symbol);
    #####:  149:  TEST_ASSERT (!jerry_value_is_symbol (symbol_symbol));
    #####:  150:  TEST_ASSERT (jerry_value_is_exception (symbol_symbol));
        -:  151:
    #####:  152:  jerry_value_t error_obj = jerry_exception_value (symbol_symbol, true);
        -:  153:
    #####:  154:  TEST_ASSERT (jerry_error_type (error_obj) == JERRY_ERROR_TYPE);
        -:  155:
    #####:  156:  jerry_value_free (error_obj);
    #####:  157:  jerry_value_free (empty_symbol);
        -:  158:
        -:  159:  /* Test symbol to string operation with symbol argument */
    #####:  160:  jerry_value_t bar_symbol_desc = jerry_string_sz (STRING_BAR);
        -:  161:
    #####:  162:  jerry_value_t bar_symbol = jerry_symbol_with_description (bar_symbol_desc);
    #####:  163:  TEST_ASSERT (!jerry_value_is_exception (bar_symbol));
    #####:  164:  TEST_ASSERT (jerry_value_is_symbol (bar_symbol));
        -:  165:
    #####:  166:  jerry_value_free (bar_symbol_desc);
        -:  167:
    #####:  168:  jerry_value_t bar_symbol_string = jerry_symbol_descriptive_string (bar_symbol);
    #####:  169:  TEST_ASSERT (jerry_value_is_string (bar_symbol_string));
        -:  170:
    #####:  171:  jerry_size_t bar_symbol_string_size = jerry_string_size (bar_symbol_string, JERRY_ENCODING_CESU8);
    #####:  172:  TEST_ASSERT (bar_symbol_string_size == (sizeof (SYMBOL_DESCIPTIVE_STRING_BAR) - 1));
    #####:  173:  JERRY_VLA (jerry_char_t, str_buff, bar_symbol_string_size);
        -:  174:
    #####:  175:  jerry_string_to_buffer (bar_symbol_string, JERRY_ENCODING_CESU8, str_buff, bar_symbol_string_size);
    #####:  176:  TEST_ASSERT (memcmp (str_buff, SYMBOL_DESCIPTIVE_STRING_BAR, sizeof (SYMBOL_DESCIPTIVE_STRING_BAR) - 1) == 0);
        -:  177:
    #####:  178:  jerry_value_free (bar_symbol_string);
        -:  179:
        -:  180:  /* Test symbol get description operation with string description */
    #####:  181:  bar_symbol_string = jerry_symbol_description (bar_symbol);
    #####:  182:  TEST_ASSERT (jerry_value_is_string (bar_symbol_string));
        -:  183:
    #####:  184:  bar_symbol_string_size = jerry_string_size (bar_symbol_string, JERRY_ENCODING_CESU8);
    #####:  185:  TEST_ASSERT (bar_symbol_string_size == (sizeof (SYMBOL_DESCIPTION_BAR) - 1));
        -:  186:
    #####:  187:  jerry_string_to_buffer (bar_symbol_string, JERRY_ENCODING_CESU8, str_buff, bar_symbol_string_size);
    #####:  188:  TEST_ASSERT (memcmp (str_buff, STRING_BAR, sizeof (SYMBOL_DESCIPTION_BAR) - 1) == 0);
        -:  189:
    #####:  190:  jerry_value_free (bar_symbol_string);
    #####:  191:  jerry_value_free (bar_symbol);
        -:  192:
        -:  193:  /* Test symbol get description operation with undefined description */
    #####:  194:  jerry_value_t undefined_value = jerry_undefined ();
    #####:  195:  jerry_value_t undefined_symbol = jerry_symbol_with_description (undefined_value);
    #####:  196:  jerry_value_free (undefined_value);
    #####:  197:  TEST_ASSERT (!jerry_value_is_exception (bar_symbol));
    #####:  198:  TEST_ASSERT (jerry_value_is_symbol (bar_symbol));
        -:  199:
    #####:  200:  undefined_value = jerry_symbol_description (undefined_symbol);
    #####:  201:  TEST_ASSERT (jerry_value_is_undefined (undefined_value));
    #####:  202:  jerry_value_free (undefined_value);
    #####:  203:  jerry_value_free (undefined_symbol);
        -:  204:
        -:  205:  /* Test symbol to string operation with non-symbol argument */
    #####:  206:  jerry_value_t null_value = jerry_null ();
    #####:  207:  jerry_value_t to_string_value = jerry_symbol_descriptive_string (null_value);
    #####:  208:  TEST_ASSERT (jerry_value_is_exception (to_string_value));
        -:  209:
    #####:  210:  error_obj = jerry_exception_value (to_string_value, true);
        -:  211:
    #####:  212:  TEST_ASSERT (jerry_error_type (error_obj) == JERRY_ERROR_TYPE);
        -:  213:
    #####:  214:  jerry_value_free (error_obj);
    #####:  215:  jerry_value_free (null_value);
        -:  216:
    #####:  217:  const jerry_char_t obj_src[] = ""
        -:  218:                                 "({"
        -:  219:                                 "  [Symbol.asyncIterator]: 1,"
        -:  220:                                 "  [Symbol.hasInstance]: 2,"
        -:  221:                                 "  [Symbol.isConcatSpreadable]: 3,"
        -:  222:                                 "  [Symbol.iterator]: 4,"
        -:  223:                                 "  [Symbol.match]: 5,"
        -:  224:                                 "  [Symbol.replace]: 6,"
        -:  225:                                 "  [Symbol.search]: 7,"
        -:  226:                                 "  [Symbol.species]: 8,"
        -:  227:                                 "  [Symbol.split]: 9,"
        -:  228:                                 "  [Symbol.toPrimitive]: 10,"
        -:  229:                                 "  [Symbol.toStringTag]: 11,"
        -:  230:                                 "  [Symbol.unscopables]: 12,"
        -:  231:                                 "  [Symbol.matchAll]: 13,"
        -:  232:                                 "})";
        -:  233:
    #####:  234:  const char *symbols[] = {
        -:  235:    "asyncIterator", "hasInstance", "isConcatSpreadable", "iterator",    "match",       "replace",  "search",
        -:  236:    "species",       "split",       "toPrimitive",        "toStringTag", "unscopables", "matchAll",
        -:  237:  };
        -:  238:
    #####:  239:  jerry_value_t obj = jerry_eval (obj_src, sizeof (obj_src) - 1, JERRY_PARSE_NO_OPTS);
    #####:  240:  TEST_ASSERT (jerry_value_is_object (obj));
        -:  241:
    #####:  242:  jerry_value_t global_obj = jerry_current_realm ();
    #####:  243:  jerry_value_t symbol_str = jerry_string_sz ("Symbol");
    #####:  244:  jerry_value_t builtin_symbol = jerry_object_get (global_obj, symbol_str);
    #####:  245:  TEST_ASSERT (jerry_value_is_object (builtin_symbol));
        -:  246:
        -:  247:  double expected = 1.0;
        -:  248:  uint32_t prop_index = 0;
        -:  249:
    #####:  250:  for (jerry_well_known_symbol_t id = JERRY_SYMBOL_ASYNC_ITERATOR; id <= JERRY_SYMBOL_MATCH_ALL;
    #####:  251:       id++, expected++, prop_index++)
        -:  252:  {
    #####:  253:    jerry_value_t well_known_symbol = jerry_symbol (id);
        -:  254:
    #####:  255:    jerry_value_t prop_str = jerry_string_sz (symbols[prop_index]);
    #####:  256:    jerry_value_t current_global_symbol = jerry_object_get (builtin_symbol, prop_str);
    #####:  257:    jerry_value_free (prop_str);
        -:  258:
    #####:  259:    jerry_value_t relation = jerry_binary_op (JERRY_BIN_OP_STRICT_EQUAL, well_known_symbol, current_global_symbol);
        -:  260:
    #####:  261:    TEST_ASSERT (jerry_value_is_boolean (relation) && jerry_value_is_true (relation));
        -:  262:
    #####:  263:    jerry_value_free (relation);
        -:  264:
    #####:  265:    jerry_value_t prop_result_wn = jerry_object_get (obj, well_known_symbol);
    #####:  266:    jerry_value_t prop_result_global = jerry_object_get (obj, current_global_symbol);
        -:  267:
    #####:  268:    TEST_ASSERT (jerry_value_is_number (prop_result_wn));
    #####:  269:    double number_wn = jerry_value_as_number (prop_result_wn);
    #####:  270:    TEST_ASSERT (number_wn == expected);
        -:  271:
    #####:  272:    TEST_ASSERT (jerry_value_is_number (prop_result_global));
    #####:  273:    double number_global = jerry_value_as_number (prop_result_global);
    #####:  274:    TEST_ASSERT (number_global == expected);
        -:  275:
    #####:  276:    jerry_value_free (prop_result_global);
    #####:  277:    jerry_value_free (prop_result_wn);
    #####:  278:    jerry_value_free (current_global_symbol);
    #####:  279:    jerry_value_free (well_known_symbol);
        -:  280:  }
        -:  281:
    #####:  282:  jerry_value_free (builtin_symbol);
        -:  283:
        -:  284:  /* Deletion of the 'Symbol' builtin makes the well-known symbols unaccessible from JS context
        -:  285:     but the symbols still can be obtained via 'jerry_symbol' */
    #####:  286:  const jerry_char_t deleter_src[] = "delete Symbol";
        -:  287:
    #####:  288:  jerry_value_t deleter = jerry_eval (deleter_src, sizeof (deleter_src) - 1, JERRY_PARSE_NO_OPTS);
    #####:  289:  TEST_ASSERT (jerry_value_is_boolean (deleter) && jerry_value_is_true (deleter));
    #####:  290:  jerry_value_free (deleter);
        -:  291:
    #####:  292:  builtin_symbol = jerry_object_get (global_obj, symbol_str);
    #####:  293:  TEST_ASSERT (jerry_value_is_undefined (builtin_symbol));
    #####:  294:  jerry_value_free (builtin_symbol);
        -:  295:
    #####:  296:  expected = 1.0;
    #####:  297:  prop_index = 0;
        -:  298:
    #####:  299:  for (jerry_well_known_symbol_t id = JERRY_SYMBOL_ASYNC_ITERATOR; id <= JERRY_SYMBOL_MATCH_ALL;
    #####:  300:       id++, expected++, prop_index++)
        -:  301:  {
    #####:  302:    jerry_value_t well_known_symbol = jerry_symbol (id);
    #####:  303:    jerry_value_t prop_result_wn = jerry_object_get (obj, well_known_symbol);
        -:  304:
    #####:  305:    TEST_ASSERT (jerry_value_is_number (prop_result_wn));
    #####:  306:    double number_wn = jerry_value_as_number (prop_result_wn);
    #####:  307:    TEST_ASSERT (number_wn == expected);
        -:  308:
    #####:  309:    jerry_value_free (prop_result_wn);
    #####:  310:    jerry_value_free (well_known_symbol);
        -:  311:  }
        -:  312:
    #####:  313:  jerry_well_known_symbol_t invalid_symbol = (jerry_well_known_symbol_t) (JERRY_SYMBOL_MATCH_ALL + 1);
    #####:  314:  jerry_value_t invalid_well_known_symbol = jerry_symbol (invalid_symbol);
    #####:  315:  TEST_ASSERT (jerry_value_is_undefined (invalid_well_known_symbol));
    #####:  316:  jerry_value_free (invalid_well_known_symbol);
        -:  317:
    #####:  318:  invalid_symbol = (jerry_well_known_symbol_t) (JERRY_SYMBOL_ASYNC_ITERATOR - 1);
    #####:  319:  invalid_well_known_symbol = jerry_symbol (invalid_symbol);
    #####:  320:  TEST_ASSERT (jerry_value_is_undefined (invalid_well_known_symbol));
    #####:  321:  jerry_value_free (invalid_well_known_symbol);
        -:  322:
    #####:  323:  jerry_value_free (symbol_str);
    #####:  324:  jerry_value_free (global_obj);
    #####:  325:  jerry_value_free (obj);
        -:  326:
    #####:  327:  jerry_cleanup ();
        -:  328:
    #####:  329:  return 0;
        -:  330:} /* main */
