        -:    0:Source:/home/workspace/jerry-core/ecma/builtin-objects/ecma-builtin-array-iterator-prototype.c
        -:    0:Programs:299
        -:    1:/* Copyright JS Foundation and other contributors, http://js.foundation
        -:    2: *
        -:    3: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    4: * you may not use this file except in compliance with the License.
        -:    5: * You may obtain a copy of the License at
        -:    6: *
        -:    7: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    8: *
        -:    9: * Unless required by applicable law or agreed to in writing, software
        -:   10: * distributed under the License is distributed on an "AS IS" BASIS
        -:   11: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12: * See the License for the specific language governing permissions and
        -:   13: * limitations under the License.
        -:   14: */
        -:   15:
        -:   16:#include "ecma-arraybuffer-object.h"
        -:   17:#include "ecma-builtin-helpers.h"
        -:   18:#include "ecma-builtins.h"
        -:   19:#include "ecma-iterator-object.h"
        -:   20:#include "ecma-typedarray-object.h"
        -:   21:
        -:   22:#if JERRY_ESNEXT
        -:   23:
        -:   24:#define ECMA_BUILTINS_INTERNAL
        -:   25:#include "ecma-builtins-internal.h"
        -:   26:
        -:   27:/**
        -:   28: * This object has a custom dispatch function.
        -:   29: */
        -:   30:#define BUILTIN_CUSTOM_DISPATCH
        -:   31:
        -:   32:/**
        -:   33: * List of built-in routine identifiers.
        -:   34: */
        -:   35:enum
        -:   36:{
        -:   37:  ECMA_ARRAY_ITERATOR_PROTOTYPE_ROUTINE_START = 0,
        -:   38:  ECMA_ARRAY_ITERATOR_PROTOTYPE_OBJECT_NEXT,
        -:   39:};
        -:   40:
        -:   41:#define BUILTIN_INC_HEADER_NAME "ecma-builtin-array-iterator-prototype.inc.h"
        -:   42:#define BUILTIN_UNDERSCORED_ID  array_iterator_prototype
        -:   43:#include "ecma-builtin-internal-routines-template.inc.h"
        -:   44:
        -:   45:/** \addtogroup ecma ECMA
        -:   46: * @{
        -:   47: *
        -:   48: * \addtogroup ecmabuiltins
        -:   49: * @{
        -:   50: *
        -:   51: * \addtogroup %arrayiteratorprototype% ECMA %ArrayIteratorPrototype% object built-in
        -:   52: * @{
        -:   53: */
        -:   54:
        -:   55:/**
        -:   56: * The %ArrayIteratorPrototype% object's 'next' routine
        -:   57: *
        -:   58: * See also:
        -:   59: *          ECMA-262 v6, 22.1.5.2.1
        -:   60: *
        -:   61: * Note:
        -:   62: *     Returned value must be freed with ecma_free_value.
        -:   63: *
        -:   64: * @return iterator result object, if success
        -:   65: *         error - otherwise
        -:   66: */
        -:   67:static ecma_value_t
    #####:   68:ecma_builtin_array_iterator_prototype_object_next (ecma_value_t this_val) /**< this argument */
        -:   69:{
        -:   70:  /* 1 - 2. */
    #####:   71:  if (!ecma_is_value_object (this_val))
        -:   72:  {
    #####:   73:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_OBJECT);
        -:   74:  }
        -:   75:
    #####:   76:  ecma_object_t *obj_p = ecma_get_object_from_value (this_val);
    #####:   77:  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;
        -:   78:
        -:   79:  /* 3. */
    #####:   80:  if (!ecma_object_class_is (obj_p, ECMA_OBJECT_CLASS_ARRAY_ITERATOR))
        -:   81:  {
    #####:   82:    return ecma_raise_type_error (ECMA_ERR_ARGUMENT_THIS_NOT_ITERATOR);
        -:   83:  }
        -:   84:
    #####:   85:  ecma_value_t iterated_value = ext_obj_p->u.cls.u3.iterated_value;
        -:   86:
        -:   87:  /* 4 - 5 */
    #####:   88:  if (ecma_is_value_empty (iterated_value))
        -:   89:  {
    #####:   90:    return ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
        -:   91:  }
        -:   92:
    #####:   93:  ecma_object_t *array_object_p = ecma_get_object_from_value (iterated_value);
        -:   94:
        -:   95:  /* 8. */
    #####:   96:  ecma_length_t length;
    #####:   97:  if (ecma_object_is_typedarray (array_object_p))
        -:   98:  {
        -:   99:    /* a. */
    #####:  100:    ecma_object_t *arraybuffer_p = ecma_typedarray_get_arraybuffer (array_object_p);
    #####:  101:    if (ecma_arraybuffer_is_detached (arraybuffer_p))
        -:  102:    {
    #####:  103:      return ecma_raise_type_error (ECMA_ERR_ARRAYBUFFER_IS_DETACHED);
        -:  104:    }
        -:  105:
        -:  106:    /* b. */
    #####:  107:    length = ecma_typedarray_get_length (array_object_p);
        -:  108:  }
        -:  109:  else
        -:  110:  {
    #####:  111:    ecma_value_t len_value = ecma_op_object_get_length (array_object_p, &length);
        -:  112:
    #####:  113:    if (ECMA_IS_VALUE_ERROR (len_value))
        -:  114:    {
    #####:  115:      return len_value;
        -:  116:    }
        -:  117:  }
        -:  118:
    #####:  119:  ecma_length_t index = ext_obj_p->u.cls.u2.iterator_index;
        -:  120:
    #####:  121:  if (JERRY_UNLIKELY (index == ECMA_ITERATOR_INDEX_LIMIT))
        -:  122:  {
        -:  123:    /* After the ECMA_ITERATOR_INDEX_LIMIT limit is reached the [[%Iterator%NextIndex]]
        -:  124:       property is stored as an internal property */
    #####:  125:    ecma_string_t *prop_name_p = ecma_get_magic_string (LIT_INTERNAL_MAGIC_STRING_ITERATOR_NEXT_INDEX);
    #####:  126:    ecma_value_t index_value = ecma_op_object_get (obj_p, prop_name_p);
        -:  127:
    #####:  128:    if (!ecma_is_value_undefined (index_value))
        -:  129:    {
    #####:  130:      index = (ecma_length_t) (ecma_get_number_from_value (index_value) + 1);
        -:  131:    }
        -:  132:
    #####:  133:    ecma_value_t put_result = ecma_op_object_put (obj_p, prop_name_p, ecma_make_length_value (index), true);
        -:  134:
    #####:  135:    JERRY_ASSERT (ecma_is_value_true (put_result));
        -:  136:
    #####:  137:    ecma_free_value (index_value);
        -:  138:  }
        -:  139:  else
        -:  140:  {
        -:  141:    /* 11. */
    #####:  142:    ext_obj_p->u.cls.u2.iterator_index++;
        -:  143:  }
        -:  144:
    #####:  145:  if (index >= length)
        -:  146:  {
    #####:  147:    ext_obj_p->u.cls.u3.iterated_value = ECMA_VALUE_EMPTY;
    #####:  148:    return ecma_create_iter_result_object (ECMA_VALUE_UNDEFINED, ECMA_VALUE_TRUE);
        -:  149:  }
        -:  150:
        -:  151:  /* 7. */
    #####:  152:  uint8_t iterator_kind = ext_obj_p->u.cls.u1.iterator_kind;
        -:  153:
    #####:  154:  if (iterator_kind == ECMA_ITERATOR_KEYS)
        -:  155:  {
        -:  156:    /* 12. */
    #####:  157:    return ecma_create_iter_result_object (ecma_make_length_value (index), ECMA_VALUE_FALSE);
        -:  158:  }
        -:  159:
        -:  160:  /* 14. */
    #####:  161:  ecma_value_t get_value = ecma_op_object_get_by_index (array_object_p, index);
        -:  162:
        -:  163:  /* 15. */
    #####:  164:  if (ECMA_IS_VALUE_ERROR (get_value))
        -:  165:  {
    #####:  166:    return get_value;
        -:  167:  }
        -:  168:
        -:  169:  ecma_value_t result;
        -:  170:
        -:  171:  /* 16. */
    #####:  172:  if (iterator_kind == ECMA_ITERATOR_VALUES)
        -:  173:  {
    #####:  174:    result = ecma_create_iter_result_object (get_value, ECMA_VALUE_FALSE);
        -:  175:  }
        -:  176:  else
        -:  177:  {
        -:  178:    /* 17.a */
    #####:  179:    JERRY_ASSERT (iterator_kind == ECMA_ITERATOR_ENTRIES);
        -:  180:
        -:  181:    /* 17.b */
        -:  182:    ecma_value_t entry_array_value;
    #####:  183:    entry_array_value = ecma_create_array_from_iter_element (get_value, ecma_make_length_value (index));
        -:  184:
    #####:  185:    result = ecma_create_iter_result_object (entry_array_value, ECMA_VALUE_FALSE);
    #####:  186:    ecma_free_value (entry_array_value);
        -:  187:  }
        -:  188:
    #####:  189:  ecma_free_value (get_value);
        -:  190:
    #####:  191:  return result;
        -:  192:} /* ecma_builtin_array_iterator_prototype_object_next */
        -:  193:
        -:  194:/**
        -:  195: * Dispatcher of the built-in's routines
        -:  196: *
        -:  197: * @return ecma value
        -:  198: *         Returned value must be freed with ecma_free_value.
        -:  199: */
        -:  200:ecma_value_t
    #####:  201:ecma_builtin_array_iterator_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in routine identifier */
        -:  202:                                                        ecma_value_t this_arg, /**< 'this' argument value */
        -:  203:                                                        const ecma_value_t arguments_list_p[], /**< list of arguments
        -:  204:                                                                                                *   passed to routine */
        -:  205:                                                        uint32_t arguments_number) /**< length of arguments' list */
        -:  206:{
        -:  207:  JERRY_UNUSED_2 (arguments_list_p, arguments_number);
        -:  208:
    #####:  209:  switch (builtin_routine_id)
        -:  210:  {
    #####:  211:    case ECMA_ARRAY_ITERATOR_PROTOTYPE_OBJECT_NEXT:
        -:  212:    {
    #####:  213:      return ecma_builtin_array_iterator_prototype_object_next (this_arg);
        -:  214:    }
    #####:  215:    default:
        -:  216:    {
    #####:  217:      JERRY_UNREACHABLE ();
        -:  218:    }
        -:  219:  }
        -:  220:} /* ecma_builtin_array_iterator_prototype_dispatch_routine */
        -:  221:
        -:  222:/**
        -:  223: * @}
        -:  224: * @}
        -:  225: * @}
        -:  226: */
        -:  227:
        -:  228:#endif /* JERRY_ESNEXT */
