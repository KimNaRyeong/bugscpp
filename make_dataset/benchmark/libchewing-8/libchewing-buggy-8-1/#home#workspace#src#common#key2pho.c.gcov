        -:    0:Source:/home/workspace/src/common/key2pho.c
        -:    0:Graph:/home/workspace/build/CMakeFiles/common.dir/src/common/key2pho.gcno
        -:    0:Data:/home/workspace/build/CMakeFiles/common.dir/src/common/key2pho.gcda
        -:    0:Runs:2
        -:    1:/**
        -:    2: * key2pho.c
        -:    3: *
        -:    4: * Copyright (c) 1999, 2000, 2001
        -:    5: *	Lu-chuan Kung and Kang-pen Chen.
        -:    6: *	All rights reserved.
        -:    7: *
        -:    8: * Copyright (c) 2004-2006, 2008, 2010, 2012
        -:    9: *	libchewing Core Team. See ChangeLog for details.
        -:   10: *
        -:   11: * See the file "COPYING" for information on usage and redistribution
        -:   12: * of this file.
        -:   13: */
        -:   14:
        -:   15:/**
        -:   16: * @file key2pho.c
        -:   17: * @brief map zuins to uint16_t type according to different kb_type
        -:   18: */
        -:   19:
        -:   20:/* This file is encoded in UTF-8 */
        -:   21:
        -:   22:#include <stdio.h>
        -:   23:#include <string.h>
        -:   24:#include "chewing-utf8-util.h"
        -:   25:#include "chewing-private.h"
        -:   26:
        -:   27:/* NOTE:
        -:   28: * The reason why we convert string literal to hex representation is for the
        -:   29: * sake of portability, that avoid some buggy or faulty environment like
        -:   30: * Microsoft VC9 to misinterpret the string.
        -:   31: */
        -:   32:const char *const zhuin_tab[] = {				/* number of bits */
        -:   33:	  "  \xE3\x84\x85\xE3\x84\x86\xE3\x84\x87\xE3\x84\x88\xE3\x84\x89"
        -:   34:	  "\xE3\x84\x8A\xE3\x84\x8B\xE3\x84\x8C\xE3\x84\x8D\xE3\x84\x8E"
        -:   35:	  "\xE3\x84\x8F\xE3\x84\x90\xE3\x84\x91\xE3\x84\x92\xE3\x84\x93"
        -:   36:	  "\xE3\x84\x94\xE3\x84\x95\xE3\x84\x96\xE3\x84\x97\xE3\x84\x98"
        -:   37:	  "\xE3\x84\x99",						/* 5 */
        -:   38:	  	/* ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙ */
        -:   39:	  "  \xE3\x84\xA7\xE3\x84\xA8\xE3\x84\xA9",			/* 2 */
        -:   40:	  	/* ㄧㄨㄩ */
        -:   41:	  "  \xE3\x84\x9A\xE3\x84\x9B\xE3\x84\x9C\xE3\x84\x9D\xE3\x84\x9E"
        -:   42:	  "\xE3\x84\x9F\xE3\x84\xA0\xE3\x84\xA1\xE3\x84\xA2\xE3\x84\xA3"
        -:   43:	  "\xE3\x84\xA4\xE3\x84\xA5\xE3\x84\xA6",			/* 4 */
        -:   44:	  	/* ㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦ */
        -:   45:	  "  \xCB\x99\xCB\x8A\xCB\x87\xCB\x8B"				/* 3 */
        -:   46:		/* ˙ˊˇˋ */
        -:   47:};
        -:   48:
        -:   49:static const int zhuin_tab_num[] = { 22, 4, 14, 5 };
        -:   50:static const int shift[] = { 9, 7, 3, 0 };
        -:   51:static const int sb[] = { 31, 3, 15, 7 };
        -:   52:
        -:   53:static const char * const ph_str =
        -:   54:	"\xE3\x84\x85\xE3\x84\x86\xE3\x84\x87\xE3\x84\x88"
        -:   55:		/* ㄅㄆㄇㄈ */
        -:   56:	"\xE3\x84\x89\xE3\x84\x8A\xE3\x84\x8B\xE3\x84\x8C"
        -:   57:		/* ㄉㄊㄋㄌ */
        -:   58:	"\xE3\x84\x8D\xE3\x84\x8E\xE3\x84\x8F\xE3\x84\x90"
        -:   59:		/* ㄍㄎㄏㄐ */
        -:   60:	"\xE3\x84\x91\xE3\x84\x92\xE3\x84\x93\xE3\x84\x94"
        -:   61:		/* ㄑㄒㄓㄔ */
        -:   62:	"\xE3\x84\x95\xE3\x84\x96\xE3\x84\x97\xE3\x84\x98"
        -:   63:		/* ㄕㄖㄗㄘ */
        -:   64:	"\xE3\x84\x99\xE3\x84\xA7\xE3\x84\xA8\xE3\x84\xA9"
        -:   65:		/* ㄙㄧㄨㄩ */
        -:   66:	"\xE3\x84\x9A\xE3\x84\x9B\xE3\x84\x9C\xE3\x84\x9D"
        -:   67:		/* ㄚㄛㄜㄝ */
        -:   68:	"\xE3\x84\x9E\xE3\x84\x9F\xE3\x84\xA0\xE3\x84\xA1"
        -:   69:		/* ㄞㄟㄠㄡ */
        -:   70:	"\xE3\x84\xA2\xE3\x84\xA3\xE3\x84\xA4\xE3\x84\xA5\xE3\x84\xA6"
        -:   71:		/* ㄢㄣㄤㄥㄦ */
        -:   72:	"\xCB\x99\xCB\x8A\xCB\x87\xCB\x8B" ;
        -:   73:		/* ˙ˊˇˋ */
        -:   74:static const char * const key_str[ MAX_KBTYPE ] = {
        -:   75:	 "1qaz2wsxedcrfv5tgbyhnujm8ik,9ol.0p;/-7634",		/* standard kb */
        -:   76:	 "bpmfdtnlgkhjvcjvcrzasexuyhgeiawomnkllsdfj",		/* hsu */
        -:   77:	 "1234567890-qwertyuiopasdfghjkl;zxcvbn/m,.",		/* IBM */
        -:   78:	 "2wsx3edcrfvtgb6yhnujm8ik,9ol.0p;/-['=1qaz",		/* Gin-yieh */
        -:   79:	 "bpmfdtnlvkhg7c,./j;'sexuaorwiqzy890-=1234",		/* ET  */
        -:   80:	 "bpmfdtnlvkhgvcgycjqwsexuaorwiqzpmntlhdfjk",		/* ET26 */
        -:   81:	 "1'a;2,oq.ejpuk5yixfdbghm8ctw9rnv0lsz[7634",		/* Dvorak */
        -:   82:	 "bpmfdtnlgkhjvcjvcrzasexuyhgeiawomnkllsdfj",		/* Dvorak Hsu */
        -:   83:	 "qqazwwsxedcrfvttgbyhnujmuikbiolmoplnpyerd",		/* DACHEN-CP26 */
        -:   84:	 "1qaz2wsxedcrfv5tgbyhnujm8ik,9ol.0p;/-7634",           /* Hanyu Pinyin */
        -:   85:	 "1qaz2wsxedcrfv5tgbyhnujm8ik,9ol.0p;/-7634",           /* Luoma Pinyin */
        -:   86:	 "1qaz2wsxedcrfv5tgbyhnujm8ik,9ol.0p;/-7634",           /* secondary Bopomofo Pinyin */
        -:   87:
        -:   88:} ;
        -:   89:
        -:   90:/*
        -:   91: * Read one zhuin string,
        -:   92: *
        -:   93: * return the number it means. 0 means error.
        -:   94: */
   399785:   95:uint16_t UintFromPhone( const char *zhuin )
        -:   96:{
        -:   97:	const char *iter;
        -:   98:	char *pos;
        -:   99:	char buf[ MAX_UTF8_SIZE + 1 ];
   399785:  100:	int len, result = 0;
   399785:  101:	int zhuin_index = 0;
        -:  102:
   399785:  103:	iter = zhuin;
        -:  104:
  1595106:  105:	while ( *iter ) {
  1195321:  106:		len = ueStrNCpy( buf, iter, 1, STRNCPY_CLOSE );
        -:  107:
  1483225:  108:		for (; zhuin_index < ZUIN_SIZE; ++zhuin_index ) {
  1483225:  109:			pos = strstr( zhuin_tab[ zhuin_index ], buf );
  1483225:  110:			if ( pos ) {
  1195321:  111:				break;
        -:  112:			}
        -:  113:		}
        -:  114:
  1195321:  115:		if ( zhuin_index >= ZUIN_SIZE ) {
    #####:  116:			return 0;
        -:  117:		}
        -:  118:
  1195321:  119:		result |= (zhuin_tab_num[ zhuin_index ] - ueStrLen( pos )) << shift[ zhuin_index ];
  1195321:  120:		++zhuin_index;
  1195321:  121:		iter += len;
        -:  122:	}
   399785:  123:	return result;
        -:  124:}
        -:  125:
    26612:  126:int PhoneFromKey( char *pho, const char *inputkey, int kbtype, int searchTimes )
        -:  127:{
    26612:  128:	int len = strlen( inputkey ), i, s;
        -:  129:	const char *pTarget;
        -:  130:
    26612:  131:	pho[ 0 ] = '\0';
   106044:  132:	for ( i = 0; i < len; i++ ) {
    79452:  133:		char *findptr = NULL;
        -:  134:		int _index;
        -:  135:
   158884:  136:		for (
    79452:  137:				s = 0, pTarget = key_str[ kbtype ];
        -:  138:				s < searchTimes;
    79432:  139:				s++, pTarget = findptr + 1 ) {
    79452:  140:			findptr = strchr( pTarget, inputkey[ i ] );
    79452:  141:			if ( ! findptr ) {
       20:  142:				return 0;
        -:  143:			}
        -:  144:		}
    79432:  145:		_index = findptr - key_str[ kbtype ];
    79432:  146:		ueStrNCpy( ueStrSeek( pho, i ),
        -:  147:		           ueConstStrSeek( ph_str, _index ),
        -:  148:			   1, 0);
        -:  149:	}
    26592:  150:	pho = ueStrSeek( pho, len );
    26592:  151:	pho[0] = '\0';
    26592:  152:	return 1;
        -:  153:}
        -:  154:
    #####:  155:int PhoneFromUint( char *phone, size_t phone_len, uint16_t phone_num )
        -:  156:{
        -:  157:	int i;
        -:  158:	int index;
        -:  159:	const char *pos;
        -:  160:	char tmp[ MAX_UTF8_SIZE + 1 ];
    #####:  161:	char buffer[ MAX_UTF8_SIZE * ZUIN_SIZE + 1 ] = { 0 };
        -:  162:
    #####:  163:	for ( i = 0; i < ZUIN_SIZE; ++i ) {
        -:  164:		// The first two characters in zhuin_tab are space, so we need
        -:  165:		// to add 1 here.
    #####:  166:		index = ((phone_num >> shift[ i ]) & sb[ i ]) + 1;
    #####:  167:		if ( index >= 2 ) {
    #####:  168:			pos = ueConstStrSeek( zhuin_tab[ i ], index );
    #####:  169:			ueStrNCpy( tmp, pos, 1, 1 );
    #####:  170:			strcat( buffer, tmp );
        -:  171:		}
        -:  172:	}
    #####:  173:	strncpy( phone, buffer, phone_len );
    #####:  174:	return 0;
        -:  175:}
        -:  176:
      523:  177:int PhoneInxFromKey( int key, int type, int kbtype, int searchTimes )
        -:  178:{
        -:  179:	char keyStr[ 2 ], rtStr[ 10 ], *p;
        -:  180:
      523:  181:	keyStr[ 0 ] = key;
      523:  182:	keyStr[ 1 ] = '\0';
      523:  183:	if ( ! PhoneFromKey( rtStr, keyStr, kbtype, searchTimes ) )
       20:  184:		return 0;
      503:  185:	p = strstr( zhuin_tab[ type ], rtStr );
      503:  186:	if ( ! p )
      246:  187:		return 0;
      257:  188:	return zhuin_tab_num[type] - ueStrLen(p);
        -:  189:}
        -:  190:
       73:  191:uint16_t UintFromPhoneInx( const int ph_inx[] )
        -:  192:{
        -:  193:	int i;
       73:  194:	uint16_t result = 0;
        -:  195:
      365:  196:	for ( i = 0; i < ZUIN_SIZE; i++ )
      292:  197:		result |= ph_inx[ i ] << shift[ i ];
       73:  198:	return result;
        -:  199:}
        -:  200:
