        -:    0:Source:/home/workspace/include/internal/chewing-private.h
        -:    0:Graph:/home/workspace/build/CMakeFiles/chewing.dir/src/tree.gcno
        -:    0:Data:/home/workspace/build/CMakeFiles/chewing.dir/src/tree.gcda
        -:    0:Runs:1
        -:    1:/**
        -:    2: * chewing-private.h
        -:    3: *
        -:    4: * Copyright (c) 2008, 2010
        -:    5: *	libchewing Core Team. See ChangeLog for details.
        -:    6: *
        -:    7: * See the file "COPYING" for information on usage and redistribution
        -:    8: * of this file.
        -:    9: */
        -:   10:
        -:   11:#ifndef _CHEWING_CORE_PRIVATE_H
        -:   12:#define _CHEWING_CORE_PRIVATE_H
        -:   13:
        -:   14:#ifdef HAVE_CONFIG_H
        -:   15:#  include <config.h>
        -:   16:#endif
        -:   17:
        -:   18:#ifdef HAVE_INTTYPES_H
        -:   19:#  include <inttypes.h>
        -:   20:#elif defined HAVE_STDINT_H
        -:   21:#  include <stdint.h>
        -:   22:#endif
        -:   23:
        -:   24:#include "global.h"
        -:   25:#include "plat_mmap.h"
        -:   26:
        -:   27:#define MAX_KBTYPE 13
        -:   28:#define MAX_UTF8_SIZE 4
        -:   29:#define ZUIN_SIZE 4
        -:   30:#define PINYIN_SIZE 10
        -:   31:#define MAX_PHRASE_LEN 11
        -:   32:#define MAX_PHONE_SEQ_LEN 50
        -:   33:#define MIN_CHI_SYMBOL_LEN 0
        -:   34:#define MAX_CHI_SYMBOL_LEN (MAX_PHONE_SEQ_LEN - MAX_PHRASE_LEN)
        -:   35:#define MAX_INTERVAL ( ( MAX_PHONE_SEQ_LEN + 1 ) * MAX_PHONE_SEQ_LEN / 2 )
        -:   36:#define MAX_CHOICE (567)
        -:   37:#define MAX_CHOICE_BUF (50)                   /* max length of the choise buffer */
        -:   38:#define N_HASH_BIT (14)
        -:   39:#define HASH_TABLE_SIZE (1<<N_HASH_BIT)
        -:   40:#define EASY_SYMBOL_KEY_TAB_LEN (36)
        -:   41:
        -:   42:/* For isSymbol */
        -:   43:#define WORD_CHOICE            (0)
        -:   44:#define SYMBOL_CATEGORY_CHOICE (1)
        -:   45:#define SYMBOL_CHOICE_INSERT   (2)
        -:   46:#define SYMBOL_CHOICE_UPDATE   (3)
        -:   47:
        -:   48:#ifndef _MSC_VER
        -:   49:#undef max
      105:   50:static inline int max( int a, int b )
        -:   51:{
      105:   52:	return a > b ? a : b;
        -:   53:}
        -:   54:
        -:   55:#undef min
     2983:   56:static inline int min( int a, int b )
        -:   57:{
     2983:   58:	return a < b ? a : b;
        -:   59:}
        -:   60:#endif
        -:   61:
        -:   62:typedef union {
        -:   63:	unsigned char s[ MAX_UTF8_SIZE + 1];
        -:   64:	uint16_t wch;
        -:   65:} wch_t;
        -:   66:
        -:   67:/*
        -:   68: * This structure may represent both internal nodes and leaf nodes of a phrase
        -:   69: * tree. Two kinds are distinguished by whether key is 0. For an internal node,
        -:   70: * child.begin and child.end give a list of children in the position
        -:   71: * [child.begin, child.end). For a leaf node, phrase.pos offers the position
        -:   72: * of the phrase in system dictionary, and phrase.freq offers frequency of this
        -:   73: * phrase using a specific input method (may be bopomofo or non-phone). Note
        -:   74: * that key in root represents the number of total elements(nodes) in the tree.
        -:   75: */
        -:   76:typedef struct {
        -:   77:	unsigned char key[2];
        -:   78:	union {
        -:   79:		struct {
        -:   80:			unsigned char begin[3];
        -:   81:			unsigned char end[3];
        -:   82:		} child;
        -:   83:		struct {
        -:   84:			unsigned char pos[3];
        -:   85:			unsigned char freq[3];
        -:   86:		} phrase;
        -:   87:	};
        -:   88:} TreeType;
        -:   89:
        -:   90:typedef struct {
        -:   91:	char chiBuf[ MAX_PHONE_SEQ_LEN * MAX_UTF8_SIZE + 1 ];
        -:   92:	IntervalType dispInterval[ MAX_INTERVAL ];
        -:   93:	int nDispInterval;
        -:   94:	int nNumCut;
        -:   95:} PhrasingOutput;
        -:   96:
        -:   97:typedef struct {
        -:   98:    int type;
        -:   99:    char keySeq[ PINYIN_SIZE ];
        -:  100:} PinYinData;
        -:  101:
        -:  102:typedef struct {
        -:  103:	int kbtype;
        -:  104:	int pho_inx[ ZUIN_SIZE ];
        -:  105:	int pho_inx_alt[ ZUIN_SIZE ];
        -:  106:	uint16_t phone;
        -:  107:	uint16_t phoneAlt;
        -:  108:	PinYinData pinYinData;
        -:  109:} ZuinData;
        -:  110:
        -:  111:typedef struct {
        -:  112:	/** @brief all kinds of lengths of available phrases. */
        -:  113:	struct {
        -:  114:		int len;
        -:  115:		/** @brief phone id. */
        -:  116:		const TreeType *id;
        -:  117:	} avail[ MAX_PHRASE_LEN ];
        -:  118:	/** @brief total number of availble lengths. */
        -:  119:	int nAvail;
        -:  120:	/** @brief the current choosing available length. */
        -:  121:	int currentAvail;
        -:  122:} AvailInfo;
        -:  123:/**
        -:  124: *	@struct AvailInfo
        -:  125: *	@brief information of available phrases or characters choices.
        -:  126: */
        -:  127:
        -:  128:typedef struct {
        -:  129:	/** @brief total page number. */
        -:  130:	int nPage;
        -:  131:	/** @brief current page number. */
        -:  132:	int pageNo;
        -:  133:	/** @brief number of choices per page. */
        -:  134:	int nChoicePerPage;
        -:  135:	/** @brief store possible phrases for being chosen. */
        -:  136:	char totalChoiceStr[ MAX_CHOICE ][ MAX_PHRASE_LEN * MAX_UTF8_SIZE + 1 ];
        -:  137:	/** @brief number of phrases to choose. */
        -:  138:	int nTotalChoice;
        -:  139:	int oldChiSymbolCursor;
        -:  140:	int isSymbol;
        -:  141:} ChoiceInfo;
        -:  142:
        -:  143:/** @brief entry of symbol table */
        -:  144:typedef struct _SymbolEntry {
        -:  145:	/** @brief  nSymnols is total number of symbols in this category.
        -:  146:	 * If nSymbols = 0, category is treat as a symbol,
        -:  147:	 * which is a zero-terminated utf-8 string.
        -:  148:	 * In that case, symbols[] is unused and isn't allocated at all.
        -:  149:	 */
        -:  150:	int nSymbols;
        -:  151:
        -:  152:	/** @brief  Category name of these symbols */
        -:  153:	char category[ MAX_PHRASE_LEN * MAX_UTF8_SIZE + 1 ];
        -:  154:
        -:  155:	/** @brief  Symbols in this category.
        -:  156:	 * This is an char[] array of variable length.
        -:  157:	 * When nSymbols = 0, this array is not allocated.
        -:  158:	 */
        -:  159:	char symbols[][ MAX_UTF8_SIZE + 1 ];
        -:  160:} SymbolEntry;
        -:  161:
        -:  162:typedef struct {
        -:  163:	const TreeType *tree;
        -:  164:	size_t tree_size;
        -:  165:	plat_mmap tree_mmap;
        -:  166:	const TreeType *tree_cur_pos, *tree_end_pos;
        -:  167:
        -:  168:	const char *dict;
        -:  169:	plat_mmap dict_mmap;
        -:  170:
        -:  171:	int chewing_lifetime;
        -:  172:
        -:  173:	char hashfilename[ 200 ];
        -:  174:	struct tag_HASH_ITEM *hashtable[ HASH_TABLE_SIZE ];
        -:  175:
        -:  176:	unsigned int n_symbol_entry;
        -:  177:	SymbolEntry ** symbol_table;
        -:  178:
        -:  179:	char *g_easy_symbol_value[ EASY_SYMBOL_KEY_TAB_LEN ];
        -:  180:	int g_easy_symbol_num[ EASY_SYMBOL_KEY_TAB_LEN ];
        -:  181:
        -:  182:	struct keymap *hanyuInitialsMap;
        -:  183:	struct keymap *hanyuFinalsMap;
        -:  184:	int HANYU_INITIALS;
        -:  185:	int HANYU_FINALS;
        -:  186:} ChewingStaticData;
        -:  187:
        -:  188:struct tag_HASH_ITEM;
        -:  189:
        -:  190:typedef struct tag_ChewingData {
        -:  191:	AvailInfo availInfo;
        -:  192:	ChoiceInfo choiceInfo;
        -:  193:	PhrasingOutput phrOut;
        -:  194:	ZuinData zuinData;
        -:  195:	ChewingConfigData config;
        -:  196:    /** @brief current input buffer, content==0 means Chinese code */
        -:  197:	wch_t chiSymbolBuf[ MAX_PHONE_SEQ_LEN ];
        -:  198:	int chiSymbolCursor;
        -:  199:	int chiSymbolBufLen;
        -:  200:	int PointStart;
        -:  201:	int PointEnd;
        -:  202:	wch_t showMsg[ MAX_PHONE_SEQ_LEN ];
        -:  203:	int showMsgLen;
        -:  204:
        -:  205:	uint16_t phoneSeq[ MAX_PHONE_SEQ_LEN ];
        -:  206:	uint16_t phoneSeqAlt[ MAX_PHONE_SEQ_LEN ];
        -:  207:	int nPhoneSeq;
        -:  208:	char selectStr[ MAX_PHONE_SEQ_LEN ][ MAX_PHONE_SEQ_LEN * MAX_UTF8_SIZE + 1 ];
        -:  209:	IntervalType selectInterval[ MAX_PHONE_SEQ_LEN ];
        -:  210:	int nSelect;
        -:  211:	IntervalType preferInterval[ MAX_INTERVAL ]; /* add connect points */
        -:  212:	int nPrefer;
        -:  213:	int bUserArrCnnct[ MAX_PHONE_SEQ_LEN + 1 ];
        -:  214:	int bUserArrBrkpt[ MAX_PHONE_SEQ_LEN + 1 ];
        -:  215:	int bArrBrkpt[ MAX_PHONE_SEQ_LEN + 1 ];
        -:  216:	int bSymbolArrBrkpt[ MAX_PHONE_SEQ_LEN + 1 ];
        -:  217:	/* "bArrBrkpt[10]=True" means "it breaks between 9 and 10" */
        -:  218:	int bChiSym, bSelect, bFirstKey, bFullShape;
        -:  219:	/* Symbol Key buffer */
        -:  220:	char symbolKeyBuf[ MAX_PHONE_SEQ_LEN ];
        -:  221:
        -:  222:	struct tag_HASH_ITEM *prev_userphrase;
        -:  223:	ChewingStaticData static_data;
        -:  224:	void (*logger)( void *data, int level, const char *fmt, ... );
        -:  225:	void *loggerData;
        -:  226:} ChewingData;
        -:  227:
        -:  228:typedef struct {
        -:  229:	/** @brief the content of Edit buffer. */
        -:  230:	wch_t chiSymbolBuf[ MAX_PHONE_SEQ_LEN ];
        -:  231:	/** @brief the length of Edit buffer. */
        -:  232:	int chiSymbolBufLen;
        -:  233:	/** @brief current position of the cursor. */
        -:  234:	long chiSymbolCursor;
        -:  235:	long PointStart;
        -:  236:	long PointEnd;
        -:  237:	/** @brief the zuin-yin symbols have already entered. */
        -:  238:	wch_t zuinBuf[ ZUIN_SIZE ];
        -:  239:	/** @brief indicate the method of showing sentence break. */
        -:  240:	IntervalType dispInterval[ MAX_INTERVAL ]; /* from prefer, considering symbol */
        -:  241:	int nDispInterval;
        -:  242:	/** @brief indicate the break points going to display.*/
        -:  243:	int dispBrkpt[ MAX_PHONE_SEQ_LEN + 1 ];
        -:  244:	/** @brief the string going to commit. */
        -:  245:	wch_t commitStr[ MAX_PHONE_SEQ_LEN ];
        -:  246:	int nCommitStr;
        -:  247:	/** @brief information of character selections. */
        -:  248:	ChoiceInfo* pci;
        -:  249:	/** @brief indicate English mode or Chinese mode. */
        -:  250:	int bChiSym;
        -:  251:	int selKey[ MAX_SELKEY ];
        -:  252:	/** @brief return value. */
        -:  253:	int keystrokeRtn;
        -:  254:	int bShowMsg;
        -:  255:	/** @brief user message. */
        -:  256:	wch_t showMsg[ MAX_PHONE_SEQ_LEN ];
        -:  257:	int showMsgLen;
        -:  258:} ChewingOutput;
        -:  259:/**
        -:  260: *   @struct ChewingOutput
        -:  261: *   @brief  information for Chewing output.
        -:  262: */
        -:  263:
        -:  264:struct _ChewingContext {
        -:  265:	ChewingData *data;
        -:  266:	ChewingOutput *output;
        -:  267:	int cand_no;
        -:  268:	int it_no;
        -:  269:	int kb_no;
        -:  270:};
        -:  271:/**
        -:  272: * @struct ChewingContext
        -:  273: * @brief context of Chewing IM
        -:  274: */
        -:  275:
        -:  276:typedef struct {
        -:  277:	char phrase[ MAX_PHRASE_LEN * MAX_UTF8_SIZE + 1 ];
        -:  278:	int freq;
        -:  279:} Phrase;
        -:  280:
        -:  281:#endif
