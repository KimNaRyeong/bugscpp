[
    {
        "name": "jerry-core.api.jerry.jerry_cleanup#189",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_cleanup (void)",
        "snippet": "void\njerry_cleanup (void)\n{\n  jerry_assert_api_available ();\n\n#if JERRY_DEBUGGER\n  if (JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED)\n  {\n    jerry_debugger_send_type (JERRY_DEBUGGER_CLOSE_CONNECTION);\n\n    jerry_debugger_transport_close ();\n  }\n#endif /* JERRY_DEBUGGER */\n\n  for (jerry_context_data_header_t *this_p = JERRY_CONTEXT (context_data_p);\n       this_p != NULL;\n       this_p = this_p->next_p)\n  {\n    if (this_p->manager_p->deinit_cb)\n    {\n      void *data = (this_p->manager_p->bytes_needed > 0) ? JERRY_CONTEXT_DATA_HEADER_USER_DATA (this_p) : NULL;\n      this_p->manager_p->deinit_cb (data);\n    }\n  }\n\n#if JERRY_ESNEXT\n  ecma_free_all_enqueued_jobs ();\n#endif /* JERRY_ESNEXT */\n  ecma_finalize ();\n  jerry_make_api_unavailable ();\n\n  for (jerry_context_data_header_t *this_p = JERRY_CONTEXT (context_data_p), *next_p = NULL;\n       this_p != NULL;\n       this_p = next_p)\n  {\n    next_p = this_p->next_p;\n    if (this_p->manager_p->finalize_cb)\n    {\n      void *data = (this_p->manager_p->bytes_needed > 0) ? JERRY_CONTEXT_DATA_HEADER_USER_DATA (this_p) : NULL;\n      this_p->manager_p->finalize_cb (data);\n    }\n    jmem_heap_free_block (this_p, sizeof (jerry_context_data_header_t) + this_p->manager_p->bytes_needed);\n  }\n\n  jmem_finalize ();\n}",
        "begin_line": 189,
        "end_line": 234,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_create_external_function#2457",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_create_external_function (jerry_external_handler_t handler_p) /**< pointer to native handler                                                                      *   for the function */",
        "snippet": "jerry_value_t\njerry_create_external_function (jerry_external_handler_t handler_p) /**< pointer to native handler\n                                                                     *   for the function */\n{\n  jerry_assert_api_available ();\n\n  ecma_object_t *func_obj_p = ecma_op_create_external_function_object (handler_p);\n  return ecma_make_object_value (func_obj_p);\n}",
        "begin_line": 2457,
        "end_line": 2465,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_create_string#2690",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_create_string (const jerry_char_t *str_p) /**< pointer to string */",
        "snippet": "jerry_value_t\njerry_create_string (const jerry_char_t *str_p) /**< pointer to string */\n{\n  return jerry_create_string_sz (str_p, lit_zt_utf8_string_size ((lit_utf8_byte_t *) str_p));\n}",
        "begin_line": 2690,
        "end_line": 2694,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_create_string_sz#2704",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_create_string_sz (const jerry_char_t *str_p, /**< pointer to string */                         jerry_size_t str_size) /**< string size */",
        "snippet": "jerry_value_t\njerry_create_string_sz (const jerry_char_t *str_p, /**< pointer to string */\n                        jerry_size_t str_size) /**< string size */\n{\n  jerry_assert_api_available ();\n\n  ecma_string_t *ecma_str_p = ecma_new_ecma_string_from_utf8 ((lit_utf8_byte_t *) str_p,\n                                                              (lit_utf8_size_t) str_size);\n  return ecma_make_string_value (ecma_str_p);\n}",
        "begin_line": 2704,
        "end_line": 2713,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_get_global_object#1144",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_get_global_object (void)",
        "snippet": "jerry_value_t\njerry_get_global_object (void)\n{\n  jerry_assert_api_available ();\n  ecma_object_t *global_obj_p = ecma_builtin_get_global ();\n  ecma_ref_object (global_obj_p);\n  return ecma_make_object_value (global_obj_p);\n}",
        "begin_line": 1144,
        "end_line": 1151,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_init#168",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_init (jerry_init_flag_t flags) /**< combination of Jerry flags */",
        "snippet": "void\njerry_init (jerry_init_flag_t flags) /**< combination of Jerry flags */\n{\n  /* This function cannot be called twice unless jerry_cleanup is called. */\n  JERRY_ASSERT (!(JERRY_CONTEXT (status_flags) & ECMA_STATUS_API_AVAILABLE));\n\n  /* Zero out all non-external members. */\n  memset ((char *) &JERRY_CONTEXT_STRUCT + offsetof (jerry_context_t, JERRY_CONTEXT_FIRST_MEMBER), 0,\n          sizeof (jerry_context_t) - offsetof (jerry_context_t, JERRY_CONTEXT_FIRST_MEMBER));\n\n  JERRY_CONTEXT (jerry_init_flags) = flags;\n\n  jerry_make_api_available ();\n\n  jmem_init ();\n  ecma_init ();\n}",
        "begin_line": 168,
        "end_line": 184,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_is_valid_utf8_string#5150",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_is_valid_utf8_string (const jerry_char_t *utf8_buf_p, /**< UTF-8 string */                             jerry_size_t buf_size) /**< string size */",
        "snippet": "bool\njerry_is_valid_utf8_string (const jerry_char_t *utf8_buf_p, /**< UTF-8 string */\n                            jerry_size_t buf_size) /**< string size */\n{\n  return lit_is_valid_utf8_string ((lit_utf8_byte_t *) utf8_buf_p,\n                                   (lit_utf8_size_t) buf_size,\n                                   true);\n}",
        "begin_line": 5150,
        "end_line": 5157,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_parse#507",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_parse (const jerry_char_t *source_p, /**< script source */              size_t source_size, /**< script source size */              const jerry_parse_options_t *options_p) /**< parsing options, can be NULL if not used */",
        "snippet": "jerry_value_t\njerry_parse (const jerry_char_t *source_p, /**< script source */\n             size_t source_size, /**< script source size */\n             const jerry_parse_options_t *options_p) /**< parsing options, can be NULL if not used */\n{\n#if JERRY_PARSER\n  parser_source_char_t source_char;\n  source_char.source_p = source_p;\n  source_char.source_size = source_size;\n\n  return jerry_parse_common ((void *) &source_char, options_p, JERRY_PARSE_NO_OPTS);\n#else /* !JERRY_PARSER */\n  JERRY_UNUSED (source_p);\n  JERRY_UNUSED (source_size);\n  JERRY_UNUSED (options_p);\n\n  return jerry_throw (ecma_raise_syntax_error (ECMA_ERR_MSG (ecma_error_parser_not_supported_p)));\n#endif /* JERRY_PARSER */\n}",
        "begin_line": 507,
        "end_line": 525,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_promise_set_callback#4911",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_promise_set_callback (jerry_promise_event_filter_t filters, /**< combination of event filters */                                  jerry_promise_callback_t callback, /**< notification callback */                                  void *user_p) /**< user pointer passed to the callback */",
        "snippet": "void jerry_promise_set_callback (jerry_promise_event_filter_t filters, /**< combination of event filters */\n                                 jerry_promise_callback_t callback, /**< notification callback */\n                                 void *user_p) /**< user pointer passed to the callback */\n{\n  jerry_assert_api_available ();\n\n#if JERRY_ESNEXT && JERRY_PROMISE_CALLBACK\n  if (filters == JERRY_PROMISE_EVENT_FILTER_DISABLE || callback == NULL)\n  {\n    JERRY_CONTEXT (promise_callback_filters) = JERRY_PROMISE_EVENT_FILTER_DISABLE;\n    return;\n  }\n\n  JERRY_CONTEXT (promise_callback_filters) = (uint32_t) filters;\n  JERRY_CONTEXT (promise_callback) = callback;\n  JERRY_CONTEXT (promise_callback_user_p) = user_p;\n#else /* !JERRY_ESNEXT && !JERRY_PROMISE_CALLBACK */\n  JERRY_UNUSED (filters);\n  JERRY_UNUSED (callback);\n  JERRY_UNUSED (user_p);\n#endif /* JERRY_ESNEXT && JERRY_PROMISE_CALLBACK */\n}",
        "begin_line": 4911,
        "end_line": 4932,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_release_value#2351",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_release_value (jerry_value_t value) /**< API value */",
        "snippet": "void\njerry_release_value (jerry_value_t value) /**< API value */\n{\n  jerry_assert_api_available ();\n\n  if (JERRY_UNLIKELY (ecma_is_value_error_reference (value)))\n  {\n    ecma_deref_error_reference (ecma_get_extended_primitive_from_value (value));\n    return;\n  }\n\n  ecma_free_value (value);\n}",
        "begin_line": 2351,
        "end_line": 2363,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_return#142",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_return (jerry_value_t value) /**< return value */",
        "snippet": "static jerry_value_t\njerry_return (jerry_value_t value) /**< return value */\n{\n  if (ECMA_IS_VALUE_ERROR (value))\n  {\n    value = ecma_create_error_reference_from_context ();\n  }\n\n  return value;\n}",
        "begin_line": 142,
        "end_line": 151,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_run#564",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_run (const jerry_value_t func_val) /**< function to run */",
        "snippet": "jerry_value_t\njerry_run (const jerry_value_t func_val) /**< function to run */\n{\n  jerry_assert_api_available ();\n\n  if (!ecma_is_value_object (func_val))\n  {\n    return jerry_throw (ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_wrong_args_msg_p)));\n  }\n\n  ecma_object_t *object_p = ecma_get_object_from_value (func_val);\n\n  if (ecma_get_object_type (object_p) != ECMA_OBJECT_TYPE_CLASS)\n  {\n    return jerry_throw (ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_wrong_args_msg_p)));\n  }\n\n  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n  if (ext_object_p->u.cls.type != ECMA_OBJECT_CLASS_SCRIPT)\n  {\n    return jerry_throw (ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_wrong_args_msg_p)));\n  }\n\n  const ecma_compiled_code_t *bytecode_data_p;\n  bytecode_data_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_compiled_code_t, ext_object_p->u.cls.u3.value);\n\n  JERRY_ASSERT (CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags) == CBC_FUNCTION_SCRIPT);\n\n  return jerry_return (vm_run_global (bytecode_data_p));\n}",
        "begin_line": 564,
        "end_line": 594,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_run_all_enqueued_jobs#1124",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_run_all_enqueued_jobs (void)",
        "snippet": "jerry_value_t\njerry_run_all_enqueued_jobs (void)\n{\n  jerry_assert_api_available ();\n\n#if JERRY_ESNEXT\n  return ecma_process_all_enqueued_jobs ();\n#else /* !JERRY_ESNEXT */\n  return ECMA_VALUE_UNDEFINED;\n#endif /* JERRY_ESNEXT */\n}",
        "begin_line": 1124,
        "end_line": 1134,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_set_property#3570",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_set_property (const jerry_value_t obj_val, /**< object value */                     const jerry_value_t prop_name_val, /**< property name (string value) */                     const jerry_value_t value_to_set) /**< value to set */",
        "snippet": "jerry_value_t\njerry_set_property (const jerry_value_t obj_val, /**< object value */\n                    const jerry_value_t prop_name_val, /**< property name (string value) */\n                    const jerry_value_t value_to_set) /**< value to set */\n{\n  jerry_assert_api_available ();\n\n  if (ecma_is_value_error_reference (value_to_set)\n      || !ecma_is_value_object (obj_val)\n      || !ecma_is_value_prop_name (prop_name_val))\n  {\n    return jerry_throw (ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_wrong_args_msg_p)));\n  }\n\n  return jerry_return (ecma_op_object_put (ecma_get_object_from_value (obj_val),\n                                           ecma_get_prop_name_from_value (prop_name_val),\n                                           value_to_set,\n                                           true));\n}",
        "begin_line": 3570,
        "end_line": 3588,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_value_is_error#1251",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_value_is_error (const jerry_value_t value) /**< api value */",
        "snippet": "bool\njerry_value_is_error (const jerry_value_t value) /**< api value */\n{\n  jerry_assert_api_available ();\n\n  return ecma_is_value_error_reference (value);\n}",
        "begin_line": 1251,
        "end_line": 1257,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-gc.ecma_free_fast_access_array#1357",
        "src_path": "jerry-core/ecma/base/ecma-gc.c",
        "class_name": "jerry-core.ecma.base.ecma-gc",
        "signature": "jerry-core.ecma.base.ecma-gc.ecma_free_fast_access_array (ecma_object_t *object_p) /**< fast access mode array object to free */",
        "snippet": "static void\necma_free_fast_access_array (ecma_object_t *object_p) /**< fast access mode array object to free */\n{\n  JERRY_ASSERT (ecma_op_object_is_fast_array (object_p));\n\n  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n  const uint32_t aligned_length = ECMA_FAST_ARRAY_ALIGN_LENGTH (ext_object_p->u.array.length);\n\n  if (object_p->u1.property_list_cp != JMEM_CP_NULL)\n  {\n    ecma_value_t *values_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, object_p->u1.property_list_cp);\n\n    for (uint32_t i = 0; i < aligned_length; i++)\n    {\n      ecma_free_value_if_not_object (values_p[i]);\n    }\n\n    jmem_heap_free_block (values_p, aligned_length * sizeof (ecma_value_t));\n  }\n\n  ecma_dealloc_extended_object (object_p, sizeof (ecma_extended_object_t));\n}",
        "begin_line": 1357,
        "end_line": 1378,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-gc.ecma_gc_free_object#1671",
        "src_path": "jerry-core/ecma/base/ecma-gc.c",
        "class_name": "jerry-core.ecma.base.ecma-gc",
        "signature": "jerry-core.ecma.base.ecma-gc.ecma_gc_free_object (ecma_object_t *object_p) /**< object to free */",
        "snippet": "static void\necma_gc_free_object (ecma_object_t *object_p) /**< object to free */\n{\n  JERRY_ASSERT (object_p != NULL && !ecma_gc_is_object_visited (object_p));\n\n  JERRY_ASSERT (JERRY_CONTEXT (ecma_gc_objects_number) > 0);\n  JERRY_CONTEXT (ecma_gc_objects_number)--;\n\n  if (ecma_is_lexical_environment (object_p))\n  {\n#if JERRY_MODULE_SYSTEM\n    if (ecma_get_lex_env_type (object_p) == ECMA_LEXICAL_ENVIRONMENT_CLASS\n        && (object_p->type_flags_refs & ECMA_OBJECT_FLAG_LEXICAL_ENV_HAS_DATA))\n    {\n      ecma_gc_free_properties (object_p, ECMA_GC_FREE_REFERENCES);\n      ecma_dealloc_extended_object (object_p, sizeof (ecma_lexical_environment_class_t));\n      return;\n    }\n#endif /* JERRY_MODULE_SYSTEM */\n\n    if (ecma_get_lex_env_type (object_p) == ECMA_LEXICAL_ENVIRONMENT_DECLARATIVE)\n    {\n      ecma_gc_free_properties (object_p, ECMA_GC_FREE_NO_OPTIONS);\n    }\n\n    ecma_dealloc_object (object_p);\n    return;\n  }\n\n  ecma_object_type_t object_type = ecma_get_object_type (object_p);\n\n  size_t ext_object_size = sizeof (ecma_extended_object_t);\n\n  switch (object_type)\n  {\n    case ECMA_OBJECT_TYPE_GENERAL:\n    {\n      ecma_gc_free_properties (object_p, ECMA_GC_FREE_NO_OPTIONS);\n      ecma_dealloc_object (object_p);\n      return;\n    }\n    case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:\n    {\n      if (((ecma_extended_object_t *) object_p)->u.built_in.id == ECMA_BUILTIN_ID_GLOBAL)\n      {\n        ext_object_size = sizeof (ecma_global_object_t);\n        break;\n      }\n\n      uint8_t bitset_size = ((ecma_extended_object_t *) object_p)->u.built_in.u.length_and_bitset_size;\n      ext_object_size += sizeof (uint64_t) * (bitset_size >> ECMA_BUILT_IN_BITSET_SHIFT);\n      break;\n    }\n    case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:\n    {\n      ext_object_size = sizeof (ecma_extended_built_in_object_t);\n      uint8_t bitset_size = ((ecma_extended_built_in_object_t *) object_p)->built_in.u.length_and_bitset_size;\n      ext_object_size += sizeof (uint64_t) * (bitset_size >> ECMA_BUILT_IN_BITSET_SHIFT);\n      /* FALLTHRU */\n    }\n    case ECMA_OBJECT_TYPE_CLASS:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n      switch (ext_object_p->u.cls.type)\n      {\n        case ECMA_OBJECT_CLASS_STRING:\n        case ECMA_OBJECT_CLASS_NUMBER:\n#if JERRY_ESNEXT\n        case ECMA_OBJECT_CLASS_SYMBOL:\n#endif /* JERRY_ESNEXT */\n#if JERRY_BUILTIN_BIGINT\n        case ECMA_OBJECT_CLASS_BIGINT:\n#endif /* JERRY_BUILTIN_BIGINT */\n        {\n          ecma_free_value (ext_object_p->u.cls.u3.value);\n          break;\n        }\n        case ECMA_OBJECT_CLASS_ARGUMENTS:\n        {\n          ext_object_size = ecma_free_arguments_object (ext_object_p);\n          break;\n        }\n#if JERRY_BUILTIN_TYPEDARRAY\n        case ECMA_OBJECT_CLASS_TYPEDARRAY:\n        {\n          if (ext_object_p->u.cls.u2.typedarray_flags & ECMA_TYPEDARRAY_IS_EXTENDED)\n          {\n            ext_object_size = sizeof (ecma_extended_typedarray_object_t);\n          }\n          break;\n        }\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n#if JERRY_MODULE_SYSTEM\n        case ECMA_OBJECT_CLASS_MODULE_NAMESPACE:\n        {\n          ecma_gc_free_properties (object_p, ECMA_GC_FREE_REFERENCES);\n          ecma_dealloc_extended_object (object_p, sizeof (ecma_extended_object_t));\n          return;\n        }\n#endif /* JERRY_MODULE_SYSTEM */\n#if JERRY_PARSER\n        case ECMA_OBJECT_CLASS_SCRIPT:\n        {\n          ecma_compiled_code_t *compiled_code_p;\n          compiled_code_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_compiled_code_t,\n                                                             ext_object_p->u.cls.u3.value);\n\n          ecma_bytecode_deref (compiled_code_p);\n          break;\n        }\n#endif /* JERRY_PARSER */\n#if JERRY_BUILTIN_DATE\n        case ECMA_OBJECT_CLASS_DATE:\n        {\n#if JERRY_ESNEXT\n          ext_object_size = sizeof (ecma_date_object_t);\n#else /* !JERRY_ESNEXT */\n          ecma_number_t *num_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_number_t, ext_object_p->u.cls.u3.date);\n          ecma_dealloc_number (num_p);\n#endif /* JERRY_ESNEXT */\n          break;\n        }\n#endif /* JERRY_BUILTIN_DATE */\n#if JERRY_BUILTIN_REGEXP\n        case ECMA_OBJECT_CLASS_REGEXP:\n        {\n          ecma_compiled_code_t *bytecode_p = ECMA_GET_INTERNAL_VALUE_ANY_POINTER (ecma_compiled_code_t,\n                                                                                  ext_object_p->u.cls.u3.value);\n\n          ecma_bytecode_deref (bytecode_p);\n\n          break;\n        }\n#endif /* JERRY_BUILTIN_REGEXP */\n#if JERRY_ESNEXT\n        case ECMA_OBJECT_CLASS_STRING_ITERATOR:\n        {\n          ecma_value_t iterated_value = ext_object_p->u.cls.u3.iterated_value;\n\n          if (!ecma_is_value_empty (iterated_value))\n          {\n            ecma_deref_ecma_string (ecma_get_string_from_value (iterated_value));\n          }\n\n          break;\n        }\n#if JERRY_BUILTIN_REGEXP\n        case ECMA_OBJECT_CLASS_REGEXP_STRING_ITERATOR:\n        {\n          ecma_regexp_string_iterator_t *regexp_string_iterator_obj = (ecma_regexp_string_iterator_t *) object_p;\n          ecma_value_t iterated_string = regexp_string_iterator_obj->iterated_string;\n\n          if (!ecma_is_value_empty (iterated_string))\n          {\n            ecma_deref_ecma_string (ecma_get_string_from_value (iterated_string));\n          }\n\n          ext_object_size = sizeof (ecma_regexp_string_iterator_t);\n          break;\n        }\n#endif /* JERRY_BUILTIN_REGEXP */\n#endif /* JERRY_ESNEXT */\n#if JERRY_BUILTIN_TYPEDARRAY\n        case ECMA_OBJECT_CLASS_ARRAY_BUFFER:\n#if JERRY_BUILTIN_SHAREDARRAYBUFFER\n        case ECMA_OBJECT_CLASS_SHARED_ARRAY_BUFFER:\n#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */\n        {\n          uint32_t arraybuffer_length = ext_object_p->u.cls.u3.length;\n\n          if (ECMA_ARRAYBUFFER_HAS_EXTERNAL_MEMORY (ext_object_p))\n          {\n            ext_object_size = sizeof (ecma_arraybuffer_external_info);\n\n            /* Call external free callback if any. */\n            ecma_arraybuffer_external_info *array_p = (ecma_arraybuffer_external_info *) ext_object_p;\n\n            if (array_p->free_cb != NULL)\n            {\n              array_p->free_cb (array_p->buffer_p);\n            }\n          }\n          else\n          {\n            ext_object_size += arraybuffer_length;\n          }\n\n          break;\n        }\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n#if JERRY_BUILTIN_WEAKREF\n        case ECMA_OBJECT_CLASS_WEAKREF:\n        {\n          ecma_value_t target = ext_object_p->u.cls.u3.target;\n\n          if (!ecma_is_value_undefined (target))\n          {\n            ecma_op_object_unref_weak (ecma_get_object_from_value (target), ecma_make_object_value (object_p));\n          }\n          break;\n        }\n#endif /* JERRY_BUILTIN_WEAKREF */\n#if JERRY_BUILTIN_CONTAINER\n        case ECMA_OBJECT_CLASS_CONTAINER:\n        {\n          ecma_extended_object_t *map_object_p = (ecma_extended_object_t *) object_p;\n          ecma_collection_t *container_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_collection_t,\n                                                                            map_object_p->u.cls.u3.value);\n          ecma_op_container_free_entries (object_p);\n          ecma_collection_destroy (container_p);\n          break;\n        }\n#endif /* JERRY_BUILTIN_CONTAINER */\n#if JERRY_BUILTIN_DATAVIEW\n        case ECMA_OBJECT_CLASS_DATAVIEW:\n        {\n          ext_object_size = sizeof (ecma_dataview_object_t);\n          break;\n        }\n#endif /* JERRY_BUILTIN_DATAVIEW */\n#if JERRY_ESNEXT\n        case ECMA_OBJECT_CLASS_GENERATOR:\n        case ECMA_OBJECT_CLASS_ASYNC_GENERATOR:\n        {\n          ext_object_size = ecma_gc_free_executable_object (object_p);\n          break;\n        }\n        case ECMA_OBJECT_CLASS_PROMISE:\n        {\n          ecma_free_value_if_not_object (ext_object_p->u.cls.u3.value);\n\n          /* Reactions only contains objects. */\n          ecma_collection_destroy (((ecma_promise_object_t *) object_p)->reactions);\n\n          ext_object_size = sizeof (ecma_promise_object_t);\n          break;\n        }\n        case ECMA_OBJECT_CLASS_PROMISE_CAPABILITY:\n        {\n          ext_object_size = sizeof (ecma_promise_capabality_t);\n          break;\n        }\n#endif /* JERRY_ESNEXT */\n#if JERRY_MODULE_SYSTEM\n        case ECMA_OBJECT_CLASS_MODULE:\n        {\n          ecma_module_release_module ((ecma_module_t *) ext_object_p);\n          ext_object_size = sizeof (ecma_module_t);\n          break;\n        }\n#endif /* JERRY_MODULE_SYSTEM */\n        default:\n        {\n          /* The ECMA_OBJECT_CLASS__MAX type represents an uninitialized class. */\n          JERRY_ASSERT (ext_object_p->u.cls.type <= ECMA_OBJECT_CLASS__MAX);\n          break;\n        }\n      }\n\n      break;\n    }\n    case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:\n    {\n      ext_object_size = sizeof (ecma_extended_built_in_object_t);\n      uint8_t bitset_size = ((ecma_extended_built_in_object_t *) object_p)->built_in.u.length_and_bitset_size;\n      ext_object_size += sizeof (uint64_t) * (bitset_size >> ECMA_BUILT_IN_BITSET_SHIFT);\n      /* FALLTHRU */\n    }\n    case ECMA_OBJECT_TYPE_ARRAY:\n    {\n      if (ecma_op_array_is_fast_array ((ecma_extended_object_t *) object_p))\n      {\n        ecma_free_fast_access_array (object_p);\n        return;\n      }\n      break;\n    }\n#if JERRY_BUILTIN_PROXY\n    case ECMA_OBJECT_TYPE_PROXY:\n    {\n      ext_object_size = sizeof (ecma_proxy_object_t);\n      break;\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n    case ECMA_OBJECT_TYPE_FUNCTION:\n    {\n      /* Function with byte-code (not a built-in function). */\n      ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;\n\n#if JERRY_SNAPSHOT_EXEC\n      if (ext_func_p->u.function.bytecode_cp != ECMA_NULL_POINTER)\n      {\n#endif /* JERRY_SNAPSHOT_EXEC */\n        ecma_compiled_code_t *byte_code_p = (ECMA_GET_INTERNAL_VALUE_POINTER (ecma_compiled_code_t,\n                                                                              ext_func_p->u.function.bytecode_cp));\n\n#if JERRY_ESNEXT\n        if (CBC_FUNCTION_IS_ARROW (byte_code_p->status_flags))\n        {\n          ecma_free_value_if_not_object (((ecma_arrow_function_t *) object_p)->this_binding);\n          ecma_free_value_if_not_object (((ecma_arrow_function_t *) object_p)->new_target);\n          ext_object_size = sizeof (ecma_arrow_function_t);\n        }\n#endif /* JERRY_ESNEXT */\n\n        ecma_bytecode_deref (byte_code_p);\n#if JERRY_SNAPSHOT_EXEC\n      }\n      else\n      {\n        ext_object_size = sizeof (ecma_static_function_t);\n      }\n#endif /* JERRY_SNAPSHOT_EXEC */\n      break;\n    }\n    case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:\n    {\n      ecma_extended_object_t *extended_func_p = (ecma_extended_object_t *) object_p;\n\n      if (!ecma_builtin_function_is_routine (object_p))\n      {\n        uint8_t bitset_size = extended_func_p->u.built_in.u.length_and_bitset_size;\n        ext_object_size += sizeof (uint64_t) * (bitset_size >> ECMA_BUILT_IN_BITSET_SHIFT);\n        break;\n      }\n\n#if JERRY_ESNEXT\n      if (extended_func_p->u.built_in.id != ECMA_BUILTIN_ID_HANDLER)\n      {\n        break;\n      }\n\n      switch (extended_func_p->u.built_in.routine_id)\n      {\n        case ECMA_NATIVE_HANDLER_PROMISE_RESOLVE:\n        case ECMA_NATIVE_HANDLER_PROMISE_REJECT:\n        {\n          ext_object_size = sizeof (ecma_promise_resolver_t);\n          break;\n        }\n        case ECMA_NATIVE_HANDLER_PROMISE_THEN_FINALLY:\n        case ECMA_NATIVE_HANDLER_PROMISE_CATCH_FINALLY:\n        {\n          ext_object_size = sizeof (ecma_promise_finally_function_t);\n          break;\n        }\n        case ECMA_NATIVE_HANDLER_PROMISE_CAPABILITY_EXECUTOR:\n        {\n          ext_object_size = sizeof (ecma_promise_capability_executor_t);\n          break;\n        }\n        case ECMA_NATIVE_HANDLER_PROMISE_ALL_HELPER:\n        {\n          ext_object_size = sizeof (ecma_promise_all_executor_t);\n          break;\n        }\n#if JERRY_BUILTIN_PROXY\n        case ECMA_NATIVE_HANDLER_PROXY_REVOKE:\n        {\n          ext_object_size = sizeof (ecma_revocable_proxy_object_t);\n          break;\n        }\n#endif /* JERRY_BUILTIN_PROXY */\n        case ECMA_NATIVE_HANDLER_VALUE_THUNK:\n        case ECMA_NATIVE_HANDLER_VALUE_THROWER:\n        {\n          ecma_free_value_if_not_object (((ecma_promise_value_thunk_t *) object_p)->value);\n          ext_object_size = sizeof (ecma_promise_value_thunk_t);\n          break;\n        }\n        default:\n        {\n          JERRY_UNREACHABLE ();\n        }\n      }\n#endif /* JERRY_ESNEXT */\n      break;\n    }\n    case ECMA_OBJECT_TYPE_BOUND_FUNCTION:\n    {\n      ext_object_size = sizeof (ecma_bound_function_t);\n      ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) object_p;\n\n      ecma_value_t args_len_or_this = bound_func_p->header.u.bound_function.args_len_or_this;\n\n#if JERRY_ESNEXT\n      ecma_free_value (bound_func_p->target_length);\n#endif /* JERRY_ESNEXT */\n\n      if (!ecma_is_value_integer_number (args_len_or_this))\n      {\n        ecma_free_value_if_not_object (args_len_or_this);\n        break;\n      }\n\n      ecma_integer_value_t args_length = ecma_get_integer_from_value (args_len_or_this);\n      ecma_value_t *args_p = (ecma_value_t *) (bound_func_p + 1);\n\n      for (ecma_integer_value_t i = 0; i < args_length; i++)\n      {\n        ecma_free_value_if_not_object (args_p[i]);\n      }\n\n      size_t args_size = ((size_t) args_length) * sizeof (ecma_value_t);\n      ext_object_size += args_size;\n      break;\n    }\n#if JERRY_ESNEXT\n    case ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION:\n    {\n      ecma_script_deref (((ecma_extended_object_t *) object_p)->u.constructor_function.script_value);\n      break;\n    }\n#endif /* JERRY_ESNEXT */\n    case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:\n    {\n      ext_object_size = sizeof (ecma_native_function_t);\n      break;\n    }\n    default:\n    {\n      JERRY_UNREACHABLE ();\n    }\n  }\n\n  ecma_gc_free_properties (object_p, ECMA_GC_FREE_NO_OPTIONS);\n  ecma_dealloc_extended_object (object_p, ext_object_size);\n}",
        "begin_line": 1671,
        "end_line": 2099,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-gc.ecma_gc_free_properties#1631",
        "src_path": "jerry-core/ecma/base/ecma-gc.c",
        "class_name": "jerry-core.ecma.base.ecma-gc",
        "signature": "jerry-core.ecma.base.ecma-gc.ecma_gc_free_properties (ecma_object_t *object_p, /**< object */                          uint32_t options) /**< option bits */",
        "snippet": "void\necma_gc_free_properties (ecma_object_t *object_p, /**< object */\n                         uint32_t options) /**< option bits */\n{\n  jmem_cpointer_t prop_iter_cp = object_p->u1.property_list_cp;\n\n#if JERRY_PROPERTY_HASHMAP\n  if (prop_iter_cp != JMEM_CP_NULL)\n  {\n    ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t,\n                                                                     prop_iter_cp);\n    if (prop_iter_p->types[0] == ECMA_PROPERTY_TYPE_HASHMAP)\n    {\n      ecma_property_hashmap_free (object_p);\n      prop_iter_cp = object_p->u1.property_list_cp;\n    }\n  }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n  while (prop_iter_cp != JMEM_CP_NULL)\n  {\n    ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, prop_iter_cp);\n    JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));\n\n    ecma_property_pair_t *prop_pair_p = (ecma_property_pair_t *) prop_iter_p;\n\n    for (uint32_t i = 0; i < ECMA_PROPERTY_PAIR_ITEM_COUNT; i++)\n    {\n      ecma_gc_free_property (object_p, prop_pair_p, i | options);\n    }\n\n    prop_iter_cp = prop_iter_p->next_property_cp;\n\n    ecma_dealloc_property_pair (prop_pair_p);\n  }\n}",
        "begin_line": 1631,
        "end_line": 1666,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-gc.ecma_gc_free_property#1517",
        "src_path": "jerry-core/ecma/base/ecma-gc.c",
        "class_name": "jerry-core.ecma.base.ecma-gc",
        "signature": "jerry-core.ecma.base.ecma-gc.ecma_gc_free_property (ecma_object_t *object_p, /**< object */                        ecma_property_pair_t *prop_pair_p, /**< property pair */                        uint32_t options) /**< option bits including property index */",
        "snippet": "void\necma_gc_free_property (ecma_object_t *object_p, /**< object */\n                       ecma_property_pair_t *prop_pair_p, /**< property pair */\n                       uint32_t options) /**< option bits including property index */\n{\n  /* Both cannot be deleted. */\n  JERRY_ASSERT (prop_pair_p->header.types[0] != ECMA_PROPERTY_TYPE_DELETED\n                || prop_pair_p->header.types[1] != ECMA_PROPERTY_TYPE_DELETED);\n  JERRY_ASSERT (prop_pair_p->header.types[0] != ECMA_PROPERTY_TYPE_HASHMAP);\n\n  uint32_t index = (options & ECMA_GC_FREE_SECOND_PROPERTY);\n  jmem_cpointer_t name_cp = prop_pair_p->names_cp[index];\n  ecma_property_t *property_p = prop_pair_p->header.types + index;\n  ecma_property_t property = *property_p;\n\n#if JERRY_LCACHE\n  if ((property & ECMA_PROPERTY_FLAG_LCACHED) != 0)\n  {\n    ecma_lcache_invalidate (object_p, name_cp, property_p);\n  }\n#endif /* JERRY_LCACHE */\n\n  if (ECMA_PROPERTY_IS_RAW (property))\n  {\n    if (ECMA_PROPERTY_GET_NAME_TYPE (property) == ECMA_DIRECT_STRING_PTR)\n    {\n      ecma_string_t *prop_name_p = ECMA_GET_NON_NULL_POINTER (ecma_string_t, name_cp);\n      ecma_deref_ecma_string (prop_name_p);\n    }\n\n    if (property & ECMA_PROPERTY_FLAG_DATA)\n    {\n      ecma_free_value_if_not_object (prop_pair_p->values[index].value);\n      return;\n    }\n\n    if (JERRY_UNLIKELY (options & ECMA_GC_FREE_REFERENCES))\n    {\n      return;\n    }\n\n#if JERRY_CPOINTER_32_BIT\n    ecma_getter_setter_pointers_t *getter_setter_pair_p;\n    getter_setter_pair_p = ECMA_GET_NON_NULL_POINTER (ecma_getter_setter_pointers_t,\n                                                      prop_pair_p->values[index].getter_setter_pair_cp);\n    jmem_pools_free (getter_setter_pair_p, sizeof (ecma_getter_setter_pointers_t));\n#endif /* JERRY_CPOINTER_32_BIT */\n    return;\n  }\n\n  if (property == ECMA_PROPERTY_TYPE_DELETED)\n  {\n    return;\n  }\n\n  ecma_value_t value = prop_pair_p->values[index].value;\n\n  switch (name_cp)\n  {\n#if JERRY_ESNEXT\n    case LIT_INTERNAL_MAGIC_STRING_ENVIRONMENT_RECORD:\n    {\n      ecma_environment_record_t *environment_record_p;\n      environment_record_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_environment_record_t, value);\n      jmem_heap_free_block (environment_record_p, sizeof (ecma_environment_record_t));\n      break;\n    }\n    case LIT_INTERNAL_MAGIC_STRING_CLASS_FIELD_COMPUTED:\n    {\n      ecma_value_t *compact_collection_p;\n      compact_collection_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_value_t, value);\n      ecma_compact_collection_free (compact_collection_p);\n      break;\n    }\n#endif /* JERRY_ESNEXT */\n#if JERRY_BUILTIN_WEAKREF || JERRY_BUILTIN_CONTAINER\n    case LIT_INTERNAL_MAGIC_STRING_WEAK_REFS:\n    {\n      ecma_collection_t *refs_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_collection_t, value);\n      for (uint32_t j = 0; j < refs_p->item_count; j++)\n      {\n        const ecma_value_t reference_value = refs_p->buffer_p[j];\n\n        if (!ecma_is_value_empty (reference_value))\n        {\n          ecma_object_t *obj_p = ecma_get_object_from_value (reference_value);\n\n          if (ecma_object_class_is (obj_p, ECMA_OBJECT_CLASS_WEAKREF))\n          {\n            ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;\n            ext_obj_p->u.cls.u3.target = ECMA_VALUE_UNDEFINED;\n            continue;\n          }\n          ecma_op_container_remove_weak_entry (obj_p, ecma_make_object_value (object_p));\n        }\n      }\n\n      ecma_collection_destroy (refs_p);\n      break;\n    }\n#endif /* JERRY_BUILTIN_CONTAINER */\n    default:\n    {\n      JERRY_ASSERT (name_cp == LIT_INTERNAL_MAGIC_STRING_NATIVE_POINTER\n                    || name_cp == LIT_INTERNAL_MAGIC_STRING_NATIVE_POINTER_WITH_REFERENCES);\n      ecma_gc_free_native_pointer (property, value);\n      break;\n    }\n  }\n}",
        "begin_line": 1517,
        "end_line": 1626,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-gc.ecma_gc_run#2104",
        "src_path": "jerry-core/ecma/base/ecma-gc.c",
        "class_name": "jerry-core.ecma.base.ecma-gc",
        "signature": "jerry-core.ecma.base.ecma-gc.ecma_gc_run (void)",
        "snippet": "void\necma_gc_run (void)\n{\n#if (JERRY_GC_MARK_LIMIT != 0)\n  JERRY_ASSERT (JERRY_CONTEXT (ecma_gc_mark_recursion_limit) == JERRY_GC_MARK_LIMIT);\n#endif /* (JERRY_GC_MARK_LIMIT != 0) */\n\n  JERRY_CONTEXT (ecma_gc_new_objects) = 0;\n\n  ecma_object_t black_list_head;\n  black_list_head.gc_next_cp = JMEM_CP_NULL;\n  ecma_object_t *black_end_p = &black_list_head;\n\n  ecma_object_t white_gray_list_head;\n  white_gray_list_head.gc_next_cp = JERRY_CONTEXT (ecma_gc_objects_cp);\n\n  ecma_object_t *obj_prev_p = &white_gray_list_head;\n  jmem_cpointer_t obj_iter_cp = obj_prev_p->gc_next_cp;\n  ecma_object_t *obj_iter_p;\n\n  /* Move root objects (i.e. they have global or stack references) to the black list. */\n  while (obj_iter_cp != JMEM_CP_NULL)\n  {\n    obj_iter_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_object_t, obj_iter_cp);\n    const jmem_cpointer_t obj_next_cp = obj_iter_p->gc_next_cp;\n\n    JERRY_ASSERT (obj_prev_p == NULL\n                  || ECMA_GET_NON_NULL_POINTER (ecma_object_t, obj_prev_p->gc_next_cp) == obj_iter_p);\n\n    if (obj_iter_p->type_flags_refs >= ECMA_OBJECT_REF_ONE)\n    {\n      /* Moving the object to list of marked objects. */\n      obj_prev_p->gc_next_cp = obj_next_cp;\n\n      black_end_p->gc_next_cp = obj_iter_cp;\n      black_end_p = obj_iter_p;\n    }\n    else\n    {\n      obj_iter_p->type_flags_refs |= ECMA_OBJECT_NON_VISITED;\n      obj_prev_p = obj_iter_p;\n    }\n\n    obj_iter_cp = obj_next_cp;\n  }\n\n  black_end_p->gc_next_cp = JMEM_CP_NULL;\n\n  /* Mark root objects. */\n  obj_iter_cp = black_list_head.gc_next_cp;\n  while (obj_iter_cp != JMEM_CP_NULL)\n  {\n    obj_iter_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_object_t, obj_iter_cp);\n    ecma_gc_mark (obj_iter_p);\n    obj_iter_cp = obj_iter_p->gc_next_cp;\n  }\n\n  /* Mark non-root objects. */\n  bool marked_anything_during_current_iteration;\n\n  do\n  {\n#if (JERRY_GC_MARK_LIMIT != 0)\n    JERRY_ASSERT (JERRY_CONTEXT (ecma_gc_mark_recursion_limit) == JERRY_GC_MARK_LIMIT);\n#endif /* (JERRY_GC_MARK_LIMIT != 0) */\n\n    marked_anything_during_current_iteration = false;\n\n    obj_prev_p = &white_gray_list_head;\n    obj_iter_cp = obj_prev_p->gc_next_cp;\n\n    while (obj_iter_cp != JMEM_CP_NULL)\n    {\n      obj_iter_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_object_t, obj_iter_cp);\n      const jmem_cpointer_t obj_next_cp = obj_iter_p->gc_next_cp;\n\n      JERRY_ASSERT (obj_prev_p == NULL\n                    || ECMA_GET_NON_NULL_POINTER (ecma_object_t, obj_prev_p->gc_next_cp) == obj_iter_p);\n\n      if (ecma_gc_is_object_visited (obj_iter_p))\n      {\n        /* Moving the object to list of marked objects */\n        obj_prev_p->gc_next_cp = obj_next_cp;\n\n        black_end_p->gc_next_cp = obj_iter_cp;\n        black_end_p = obj_iter_p;\n\n#if (JERRY_GC_MARK_LIMIT != 0)\n        if (obj_iter_p->type_flags_refs >= ECMA_OBJECT_REF_ONE)\n        {\n          /* Set the reference count of non-marked gray object to 0 */\n          obj_iter_p->type_flags_refs &= (ecma_object_descriptor_t) (ECMA_OBJECT_REF_ONE - 1);\n          ecma_gc_mark (obj_iter_p);\n          marked_anything_during_current_iteration = true;\n        }\n#else /* (JERRY_GC_MARK_LIMIT == 0) */\n        marked_anything_during_current_iteration = true;\n#endif /* (JERRY_GC_MARK_LIMIT != 0) */\n      }\n      else\n      {\n        obj_prev_p = obj_iter_p;\n      }\n\n      obj_iter_cp = obj_next_cp;\n    }\n  }\n  while (marked_anything_during_current_iteration);\n\n  black_end_p->gc_next_cp = JMEM_CP_NULL;\n  JERRY_CONTEXT (ecma_gc_objects_cp) = black_list_head.gc_next_cp;\n\n  /* Sweep objects that are currently unmarked. */\n  obj_iter_cp = white_gray_list_head.gc_next_cp;\n\n  while (obj_iter_cp != JMEM_CP_NULL)\n  {\n    obj_iter_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_object_t, obj_iter_cp);\n    const jmem_cpointer_t obj_next_cp = obj_iter_p->gc_next_cp;\n\n    JERRY_ASSERT (!ecma_gc_is_object_visited (obj_iter_p));\n\n    ecma_gc_free_object (obj_iter_p);\n    obj_iter_cp = obj_next_cp;\n  }\n\n#if JERRY_BUILTIN_REGEXP\n  /* Free RegExp bytecodes stored in cache */\n  re_cache_gc ();\n#endif /* JERRY_BUILTIN_REGEXP */\n}",
        "begin_line": 2104,
        "end_line": 2234,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-gc.ecma_init_gc_info#114",
        "src_path": "jerry-core/ecma/base/ecma-gc.c",
        "class_name": "jerry-core.ecma.base.ecma-gc",
        "signature": "jerry-core.ecma.base.ecma-gc.ecma_init_gc_info (ecma_object_t *object_p) /**< object */",
        "snippet": "extern inline void\necma_init_gc_info (ecma_object_t *object_p) /**< object */\n{\n  JERRY_CONTEXT (ecma_gc_objects_number)++;\n  JERRY_CONTEXT (ecma_gc_new_objects)++;\n\n  JERRY_ASSERT (object_p->type_flags_refs < ECMA_OBJECT_REF_ONE);\n  object_p->type_flags_refs |= ECMA_OBJECT_REF_ONE;\n\n  object_p->gc_next_cp = JERRY_CONTEXT (ecma_gc_objects_cp);\n  ECMA_SET_NON_NULL_POINTER (JERRY_CONTEXT (ecma_gc_objects_cp), object_p);\n}",
        "begin_line": 114,
        "end_line": 125,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-gc.ecma_ref_object#146",
        "src_path": "jerry-core/ecma/base/ecma-gc.c",
        "class_name": "jerry-core.ecma.base.ecma-gc",
        "signature": "jerry-core.ecma.base.ecma-gc.ecma_ref_object (ecma_object_t *object_p) /**< object */",
        "snippet": "void\necma_ref_object (ecma_object_t *object_p) /**< object */\n{\n  ecma_ref_object_inline (object_p);\n}",
        "begin_line": 146,
        "end_line": 150,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-conversion.ecma_utf8_string_to_number#376",
        "src_path": "jerry-core/ecma/base/ecma-helpers-conversion.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-conversion",
        "signature": "jerry-core.ecma.base.ecma-helpers-conversion.ecma_utf8_string_to_number (const lit_utf8_byte_t *str_p, /**< utf-8 string */                             lit_utf8_size_t str_size, /**< string size */                             uint32_t options) /**< allowing underscore option bit */",
        "snippet": "ecma_number_t\necma_utf8_string_to_number (const lit_utf8_byte_t *str_p, /**< utf-8 string */\n                            lit_utf8_size_t str_size, /**< string size */\n                            uint32_t options) /**< allowing underscore option bit */\n{\n  /* TODO: Check license issues */\n\n  if (str_size == 0)\n  {\n    return ECMA_NUMBER_ZERO;\n  }\n\n  ecma_string_trim_helper (&str_p, &str_size);\n  const lit_utf8_byte_t *end_p = str_p + (str_size - 1);\n\n  if (str_size < 1)\n  {\n    return ECMA_NUMBER_ZERO;\n  }\n\n  if (end_p >= str_p + 2\n      && str_p[0] == LIT_CHAR_0)\n  {\n    switch (LEXER_TO_ASCII_LOWERCASE (str_p[1]))\n    {\n      case LIT_CHAR_LOWERCASE_X :\n      {\n        return ecma_utf8_string_to_number_by_radix (str_p + 2, end_p, 16 | options);\n      }\n      case LIT_CHAR_LOWERCASE_O :\n      {\n        return ecma_utf8_string_to_number_by_radix (str_p + 2, end_p, 8 | options);\n      }\n      case LIT_CHAR_LOWERCASE_B :\n      {\n        return ecma_utf8_string_to_number_by_radix (str_p + 2, end_p, 2 | options);\n      }\n      default:\n      {\n        break;\n      }\n    }\n  }\n\n  bool sign = false; /* positive */\n\n  if (*str_p == LIT_CHAR_PLUS)\n  {\n    str_p++;\n  }\n  else if (*str_p == LIT_CHAR_MINUS)\n  {\n    sign = true; /* negative */\n\n    str_p++;\n  }\n\n  if (str_p > end_p)\n  {\n    return ecma_number_make_nan ();\n  }\n\n  /* Checking if significant part of parse string is equal to \"Infinity\" */\n  const lit_utf8_byte_t *infinity_zt_str_p = lit_get_magic_string_utf8 (LIT_MAGIC_STRING_INFINITY_UL);\n\n  JERRY_ASSERT (strlen ((const char *) infinity_zt_str_p) == 8);\n\n  if ((end_p - str_p) == (8 - 1) && memcmp (infinity_zt_str_p, str_p, 8) == 0)\n  {\n    return ecma_number_make_infinity (sign);\n  }\n\n  uint64_t fraction_uint64 = 0;\n  uint32_t digits = 0;\n  int32_t e = 0;\n  bool digit_seen = false;\n\n  /* Parsing digits before dot (or before end of digits part if there is no dot in number) */\n  while (str_p <= end_p)\n  {\n    int32_t digit_value;\n\n    if (*str_p >= LIT_CHAR_0\n        && *str_p <= LIT_CHAR_9)\n    {\n      digit_seen = true;\n      digit_value = (*str_p - LIT_CHAR_0);\n    }\n#if JERRY_ESNEXT\n    else if (*str_p == LIT_CHAR_UNDERSCORE && (options & ECMA_CONVERSION_ALLOW_UNDERSCORE))\n    {\n      str_p++;\n      continue;\n    }\n#endif /* JERRY_ESNEXT */\n    else\n    {\n      break;\n    }\n\n    if (digits != 0 || digit_value != 0)\n    {\n      if (digits < ECMA_NUMBER_MAX_DIGITS)\n      {\n        fraction_uint64 = fraction_uint64 * 10 + (uint32_t) digit_value;\n        digits++;\n      }\n      else\n      {\n        e++;\n      }\n    }\n\n    str_p++;\n  }\n\n  if (str_p <= end_p\n      && *str_p == LIT_CHAR_DOT)\n  {\n    str_p++;\n\n    if (!digit_seen && str_p > end_p)\n    {\n      return ecma_number_make_nan ();\n    }\n\n    /* Parsing number's part that is placed after dot */\n    while (str_p <= end_p)\n    {\n      int32_t digit_value;\n\n      if (*str_p >= LIT_CHAR_0\n          && *str_p <= LIT_CHAR_9)\n      {\n        digit_seen = true;\n        digit_value = (*str_p - LIT_CHAR_0);\n      }\n      else if (*str_p == LIT_CHAR_UNDERSCORE && (options & ECMA_CONVERSION_ALLOW_UNDERSCORE))\n      {\n        str_p++;\n        continue;\n      }\n      else\n      {\n        break;\n      }\n\n      if (digits < ECMA_NUMBER_MAX_DIGITS)\n      {\n        if (digits != 0 || digit_value != 0)\n        {\n          fraction_uint64 = fraction_uint64 * 10 + (uint32_t) digit_value;\n          digits++;\n        }\n\n        e--;\n      }\n\n      str_p++;\n    }\n  }\n\n  /* Parsing exponent literal */\n  int32_t e_in_lit = 0;\n  bool e_in_lit_sign = false;\n\n  if (str_p <= end_p\n      && (*str_p == LIT_CHAR_LOWERCASE_E\n          || *str_p == LIT_CHAR_UPPERCASE_E))\n  {\n    str_p++;\n\n    if (!digit_seen || str_p > end_p)\n    {\n      return ecma_number_make_nan ();\n    }\n\n    if (*str_p == LIT_CHAR_PLUS)\n    {\n      str_p++;\n    }\n    else if (*str_p == LIT_CHAR_MINUS)\n    {\n      e_in_lit_sign = true;\n      str_p++;\n    }\n\n    if (str_p > end_p)\n    {\n      return ecma_number_make_nan ();\n    }\n\n    while (str_p <= end_p)\n    {\n      int32_t digit_value;\n\n      if (*str_p >= LIT_CHAR_0\n          && *str_p <= LIT_CHAR_9)\n      {\n        digit_value = (*str_p - LIT_CHAR_0);\n      }\n#if JERRY_ESNEXT\n      else if (*str_p == LIT_CHAR_UNDERSCORE && (options & ECMA_CONVERSION_ALLOW_UNDERSCORE))\n      {\n        str_p++;\n        continue;\n      }\n#endif /* JERRY_ESNEXT */\n      else\n      {\n        return ecma_number_make_nan ();\n      }\n\n      e_in_lit = e_in_lit * 10 + digit_value;\n      int32_t e_check = e + (int32_t) digits - 1  + (e_in_lit_sign ? -e_in_lit : e_in_lit);\n\n      if (e_check > NUMBER_MAX_DECIMAL_EXPONENT)\n      {\n        return ecma_number_make_infinity (sign);\n      }\n      else if (e_check < NUMBER_MIN_DECIMAL_EXPONENT)\n      {\n        return sign ? -ECMA_NUMBER_ZERO : ECMA_NUMBER_ZERO;\n      }\n\n      str_p++;\n    }\n  }\n\n  /* Adding value of exponent literal to exponent value */\n  if (e_in_lit_sign)\n  {\n    e -= e_in_lit;\n  }\n  else\n  {\n    e += e_in_lit;\n  }\n\n  bool e_sign;\n\n  if (e < 0)\n  {\n    e_sign = true;\n    e = -e;\n  }\n  else\n  {\n    e_sign = false;\n  }\n\n  if (str_p <= end_p)\n  {\n    return ecma_number_make_nan ();\n  }\n\n  JERRY_ASSERT (str_p == end_p + 1);\n\n  if (fraction_uint64 == 0)\n  {\n    return sign ? -ECMA_NUMBER_ZERO : ECMA_NUMBER_ZERO;\n  }\n\n#if JERRY_NUMBER_TYPE_FLOAT64\n  /*\n   * 128-bit mantissa storage\n   *\n   * Normalized: |4 bits zero|124-bit mantissa with highest bit set to 1|\n   */\n  ecma_uint128_t fraction_uint128 = { 0, fraction_uint64 };\n\n  /* Normalizing mantissa */\n  int shift = 4 - ECMA_UINT128_CLZ_MAX63 (fraction_uint128);\n  if (shift < 0)\n  {\n    ECMA_UINT128_LEFT_SHIFT_MAX63 (fraction_uint128, -shift);\n  }\n  else\n  {\n    ECMA_UINT128_RIGHT_SHIFT_MAX63 (fraction_uint128, shift);\n  }\n  int32_t binary_exponent = 1 + shift;\n\n  if (!e_sign)\n  {\n    /* positive or zero decimal exponent */\n    JERRY_ASSERT (e >= 0);\n\n    while (e > 0)\n    {\n      JERRY_ASSERT (ECMA_UINT128_CLZ_MAX63 (fraction_uint128) == 4);\n\n      ECMA_UINT128_MUL10 (fraction_uint128);\n\n      e--;\n\n      /* Normalizing mantissa */\n      shift = 4 - ECMA_UINT128_CLZ_MAX4 (fraction_uint128);\n      JERRY_ASSERT (shift >= 0);\n      ECMA_UINT128_RIGHT_SHIFT_MAX63 (fraction_uint128, shift);\n      binary_exponent += shift;\n    }\n  }\n  else\n  {\n    /* negative decimal exponent */\n    JERRY_ASSERT (e != 0);\n\n    while (e > 0)\n    {\n      /* Denormalizing mantissa, moving highest 1 to bit 127 */\n      shift = ECMA_UINT128_CLZ_MAX4 (fraction_uint128);\n      JERRY_ASSERT (shift <= 4);\n      ECMA_UINT128_LEFT_SHIFT_MAX63 (fraction_uint128, shift);\n      binary_exponent -= shift;\n\n      JERRY_ASSERT (!ECMA_UINT128_IS_ZERO (fraction_uint128));\n\n      ECMA_UINT128_DIV10 (fraction_uint128);\n\n      e--;\n    }\n\n    /* Normalizing mantissa */\n    shift = 4 - ECMA_UINT128_CLZ_MAX4 (fraction_uint128);\n    JERRY_ASSERT (shift >= 0);\n    ECMA_UINT128_RIGHT_SHIFT_MAX63 (fraction_uint128, shift);\n    binary_exponent += shift;\n\n    JERRY_ASSERT (ECMA_UINT128_CLZ_MAX63 (fraction_uint128) == 4);\n  }\n\n  JERRY_ASSERT (!ECMA_UINT128_IS_ZERO (fraction_uint128));\n  JERRY_ASSERT (ECMA_UINT128_CLZ_MAX63 (fraction_uint128) == 4);\n\n  /*\n   * Preparing mantissa for conversion to 52-bit representation, converting it to:\n   *\n   * |11 zero bits|1|116 mantissa bits|\n   */\n  ECMA_UINT128_RIGHT_SHIFT_MAX63 (fraction_uint128, 7u);\n  binary_exponent += 7;\n\n  JERRY_ASSERT (ECMA_UINT128_CLZ_MAX63 (fraction_uint128) == 11);\n\n  fraction_uint64 = ecma_round_high_to_uint64 (&fraction_uint128);\n\n  return ecma_number_make_from_sign_mantissa_and_exponent (sign, fraction_uint64, binary_exponent);\n#elif !JERRY_NUMBER_TYPE_FLOAT64\n  /* Less precise conversion */\n  ecma_number_t num = (ecma_number_t) (uint32_t) fraction_uint64;\n\n  ecma_number_t m = e_sign ? (ecma_number_t) 0.1 : (ecma_number_t) 10.0;\n\n  while (e)\n  {\n    if (e % 2)\n    {\n      num *= m;\n    }\n\n    m *= m;\n    e /= 2;\n  }\n\n  return num;\n#endif /* JERRY_NUMBER_TYPE_FLOAT64 */\n}",
        "begin_line": 376,
        "end_line": 743,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-conversion.ecma_utf8_string_to_number_by_radix#293",
        "src_path": "jerry-core/ecma/base/ecma-helpers-conversion.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-conversion",
        "signature": "jerry-core.ecma.base.ecma-helpers-conversion.ecma_utf8_string_to_number_by_radix (const lit_utf8_byte_t *str_p, /**< utf-8 string */                                      const lit_utf8_byte_t *end_p, /**< end of utf-8 string  */                                      uint32_t radix) /**< radix */",
        "snippet": "static ecma_number_t\necma_utf8_string_to_number_by_radix (const lit_utf8_byte_t *str_p, /**< utf-8 string */\n                                     const lit_utf8_byte_t *end_p, /**< end of utf-8 string  */\n                                     uint32_t radix) /**< radix */\n{\n#if JERRY_ESNEXT\n  bool allow_underscore = (radix & ECMA_CONVERSION_ALLOW_UNDERSCORE);\n  radix &= (uint32_t) ~ECMA_CONVERSION_ALLOW_UNDERSCORE;\n#endif /* JERRY_ESNEXT */\n  JERRY_ASSERT (radix == 2 || radix == 8 || radix == 16);\n\n  ecma_number_t num = ECMA_NUMBER_ZERO;\n\n#if JERRY_ESNEXT\n  if (radix <= 8)\n  {\n    lit_code_point_t upper_limit = LIT_CHAR_0 + radix;\n\n    for (const lit_utf8_byte_t * iter_p = str_p;  iter_p <= end_p; iter_p++)\n    {\n      int32_t digit_value;\n\n      if (*iter_p >= LIT_CHAR_0 && *iter_p < upper_limit)\n      {\n        digit_value = (*iter_p - LIT_CHAR_0);\n      }\n      else\n      {\n        return ecma_number_make_nan ();\n      }\n\n      num = num * radix + (ecma_number_t) digit_value;\n    }\n\n    return num;\n  }\n#endif /* JERRY_ESNEXT */\n\n  for (const lit_utf8_byte_t * iter_p = str_p; iter_p <= end_p; iter_p++)\n  {\n    int32_t digit_value;\n\n    if (*iter_p >= LIT_CHAR_0\n        && *iter_p <= LIT_CHAR_9)\n    {\n      digit_value = (*iter_p - LIT_CHAR_0);\n    }\n    else if (*iter_p >= LIT_CHAR_LOWERCASE_A\n            && *iter_p <= LIT_CHAR_LOWERCASE_F)\n    {\n      digit_value = 10 + (*iter_p - LIT_CHAR_LOWERCASE_A);\n    }\n    else if (*iter_p >= LIT_CHAR_UPPERCASE_A\n            && *iter_p <= LIT_CHAR_UPPERCASE_F)\n    {\n      digit_value = 10 + (*iter_p - LIT_CHAR_UPPERCASE_A);\n    }\n#if JERRY_ESNEXT\n    else if (*iter_p == LIT_CHAR_UNDERSCORE && allow_underscore)\n    {\n      continue;\n    }\n#endif /* JERRY_ESNEXT */\n    else\n    {\n      return ecma_number_make_nan ();\n    }\n\n    num = num * (ecma_number_t) radix + (ecma_number_t) digit_value;\n  }\n\n  return num;\n}",
        "begin_line": 293,
        "end_line": 365,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_get_biased_exponent_field#190",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_get_biased_exponent_field (ecma_number_t num) /**< ecma-number */",
        "snippet": "static uint32_t\necma_number_get_biased_exponent_field (ecma_number_t num) /**< ecma-number */\n{\n  uint32_t biased_exp;\n\n  ecma_number_unpack (num, NULL, &biased_exp, NULL);\n\n  return biased_exp;\n}",
        "begin_line": 190,
        "end_line": 198,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_get_fraction_field#175",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_get_fraction_field (ecma_number_t num) /**< ecma-number */",
        "snippet": "static uint64_t\necma_number_get_fraction_field (ecma_number_t num) /**< ecma-number */\n{\n  uint64_t fraction;\n\n  ecma_number_unpack (num, NULL, NULL, &fraction);\n\n  return fraction;\n}",
        "begin_line": 175,
        "end_line": 183,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_get_sign_field#205",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_get_sign_field (ecma_number_t num) /**< ecma-number */",
        "snippet": "static uint32_t\necma_number_get_sign_field (ecma_number_t num) /**< ecma-number */\n{\n  bool sign;\n\n  ecma_number_unpack (num, &sign, NULL, NULL);\n\n  return sign;\n}",
        "begin_line": 205,
        "end_line": 213,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_is_infinity#323",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_is_infinity (ecma_number_t num) /**< ecma-number */",
        "snippet": "bool\necma_number_is_infinity (ecma_number_t num) /**< ecma-number */\n{\n  uint32_t biased_exp = ecma_number_get_biased_exponent_field (num);\n  uint64_t fraction = ecma_number_get_fraction_field (num);\n\n  /* IEEE-754 2008, 3.4, b */\n  return ((biased_exp  == (1u << ECMA_NUMBER_BIASED_EXP_WIDTH) - 1)\n          && (fraction == 0));\n}",
        "begin_line": 323,
        "end_line": 332,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_is_zero#300",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_is_zero (ecma_number_t num) /**< ecma-number */",
        "snippet": "bool\necma_number_is_zero (ecma_number_t num) /**< ecma-number */\n{\n  bool is_zero = (num == ECMA_NUMBER_ZERO);\n\n#ifndef JERRY_NDEBUG\n  /* IEEE-754 2008, 3.4, e */\n  bool is_zero_ieee754 = (ecma_number_get_fraction_field (num) == 0\n                          && ecma_number_get_biased_exponent_field (num) == 0);\n\n  JERRY_ASSERT (is_zero == is_zero_ieee754);\n#endif /* !JERRY_NDEBUG */\n\n  return is_zero;\n}",
        "begin_line": 300,
        "end_line": 314,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_make_from_sign_mantissa_and_exponent#435",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_make_from_sign_mantissa_and_exponent (bool sign, /**< true - for negative sign, false - for positive sign */                                                   uint64_t mantissa, /**< mantissa */                                                   int32_t exponent) /**< binary exponent */",
        "snippet": "ecma_number_t\necma_number_make_from_sign_mantissa_and_exponent (bool sign, /**< true - for negative sign,\n                                                                  false - for positive sign */\n                                                  uint64_t mantissa, /**< mantissa */\n                                                  int32_t exponent) /**< binary exponent */\n{\n  /* Rounding mantissa to fit into fraction field width */\n  if (mantissa & ~((1ull << (ECMA_NUMBER_FRACTION_WIDTH + 1)) - 1))\n  {\n    /* Rounded mantissa looks like the following: |00...0|1|fraction_width mantissa bits| */\n    while ((mantissa & ~((1ull << (ECMA_NUMBER_FRACTION_WIDTH + 1)) - 1)) != 0)\n    {\n      uint64_t rightmost_bit = (mantissa & 1);\n\n      exponent++;\n      mantissa >>= 1;\n\n      if ((mantissa & ~((1ull << (ECMA_NUMBER_FRACTION_WIDTH + 1)) - 1)) == 0)\n      {\n        /* Rounding to nearest value */\n        mantissa += rightmost_bit;\n\n        /* In the first case loop is finished,\n           and in the second - just one shift follows and then loop finishes */\n        JERRY_ASSERT (((mantissa & ~((1ull << (ECMA_NUMBER_FRACTION_WIDTH + 1)) - 1)) == 0)\n                      || (mantissa == (1ull << (ECMA_NUMBER_FRACTION_WIDTH + 1))));\n      }\n    }\n  }\n\n  /* Normalizing mantissa */\n  while (mantissa != 0\n         && ((mantissa & (1ull << ECMA_NUMBER_FRACTION_WIDTH)) == 0))\n  {\n    exponent--;\n    mantissa <<= 1;\n  }\n\n  /* Moving floating point */\n  exponent += ECMA_NUMBER_FRACTION_WIDTH - 1;\n\n  int32_t biased_exp_signed = exponent + ecma_number_exponent_bias;\n\n  if (biased_exp_signed < 1)\n  {\n    /* Denormalizing mantissa if biased_exponent is less than zero */\n    while (biased_exp_signed < 0)\n    {\n      biased_exp_signed++;\n      mantissa >>= 1;\n    }\n\n    /* Rounding to nearest value */\n    mantissa += 1;\n    mantissa >>= 1;\n\n    /* Encoding denormalized exponent */\n    biased_exp_signed = 0;\n  }\n  else\n  {\n    /* Clearing highest mantissa bit that should have been non-zero if mantissa is non-zero */\n    mantissa &= ~(1ull << ECMA_NUMBER_FRACTION_WIDTH);\n  }\n\n  uint32_t biased_exp = (uint32_t) biased_exp_signed;\n\n  if (biased_exp >= ((1u << ECMA_NUMBER_BIASED_EXP_WIDTH) - 1))\n  {\n    return ecma_number_make_infinity (sign);\n  }\n\n  JERRY_ASSERT (biased_exp < (1u << ECMA_NUMBER_BIASED_EXP_WIDTH) - 1);\n  JERRY_ASSERT ((mantissa & ~((1ull << ECMA_NUMBER_FRACTION_WIDTH) - 1)) == 0);\n\n  return ecma_number_pack (sign,\n                           biased_exp,\n                           mantissa);\n}",
        "begin_line": 435,
        "end_line": 513,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_append_chars_to_string#728",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_append_chars_to_string (ecma_string_t *string1_p, /**< base ecma-string */                              const lit_utf8_byte_t *cesu8_string2_p, /**< characters to be appended */                              lit_utf8_size_t cesu8_string2_size, /**< byte size of cesu8_string2_p */                              lit_utf8_size_t cesu8_string2_length) /**< character length of cesu8_string2_p */",
        "snippet": "ecma_string_t *\necma_append_chars_to_string (ecma_string_t *string1_p, /**< base ecma-string */\n                             const lit_utf8_byte_t *cesu8_string2_p, /**< characters to be appended */\n                             lit_utf8_size_t cesu8_string2_size, /**< byte size of cesu8_string2_p */\n                             lit_utf8_size_t cesu8_string2_length) /**< character length of cesu8_string2_p */\n{\n  JERRY_ASSERT (string1_p != NULL && cesu8_string2_size > 0 && cesu8_string2_length > 0);\n\n  if (JERRY_UNLIKELY (ecma_string_is_empty (string1_p)))\n  {\n    return ecma_new_ecma_string_from_utf8 (cesu8_string2_p, cesu8_string2_size);\n  }\n\n  lit_utf8_size_t cesu8_string1_size;\n  lit_utf8_size_t cesu8_string1_length;\n  uint8_t flags = ECMA_STRING_FLAG_IS_ASCII;\n  lit_utf8_byte_t uint32_to_string_buffer[ECMA_MAX_CHARS_IN_STRINGIFIED_UINT32];\n\n  const lit_utf8_byte_t *cesu8_string1_p = ecma_string_get_chars (string1_p,\n                                                                  &cesu8_string1_size,\n                                                                  &cesu8_string1_length,\n                                                                  uint32_to_string_buffer,\n                                                                  &flags);\n\n  JERRY_ASSERT (!(flags & ECMA_STRING_FLAG_MUST_BE_FREED));\n  JERRY_ASSERT (cesu8_string1_length > 0);\n  JERRY_ASSERT (cesu8_string1_length <= cesu8_string1_size);\n\n  lit_utf8_size_t new_size = cesu8_string1_size + cesu8_string2_size;\n\n  /* Poor man's carry flag check: it is impossible to allocate this large string. */\n  if (new_size < (cesu8_string1_size | cesu8_string2_size))\n  {\n    jerry_fatal (ERR_OUT_OF_MEMORY);\n  }\n\n  lit_magic_string_id_t magic_string_id;\n  magic_string_id = lit_is_utf8_string_pair_magic (cesu8_string1_p,\n                                                   cesu8_string1_size,\n                                                   cesu8_string2_p,\n                                                   cesu8_string2_size);\n\n  if (magic_string_id != LIT_MAGIC_STRING__COUNT)\n  {\n    ecma_deref_ecma_string (string1_p);\n    return ecma_get_magic_string (magic_string_id);\n  }\n\n  if ((flags & ECMA_STRING_FLAG_IS_UINT32) && new_size <= ECMA_MAX_CHARS_IN_STRINGIFIED_UINT32)\n  {\n    memcpy (uint32_to_string_buffer + cesu8_string1_size, cesu8_string2_p, cesu8_string2_size);\n\n    uint32_t array_index;\n\n    if (ecma_string_to_array_index (uint32_to_string_buffer, new_size, &array_index))\n    {\n      ecma_deref_ecma_string (string1_p);\n      return ecma_new_ecma_string_from_uint32 (array_index);\n    }\n  }\n\n  if (lit_get_magic_string_ex_count () > 0)\n  {\n    lit_magic_string_ex_id_t magic_string_ex_id;\n    magic_string_ex_id = lit_is_ex_utf8_string_pair_magic (cesu8_string1_p,\n                                                           cesu8_string1_size,\n                                                           cesu8_string2_p,\n                                                           cesu8_string2_size);\n\n    if (magic_string_ex_id < lit_get_magic_string_ex_count ())\n    {\n      ecma_deref_ecma_string (string1_p);\n      return ecma_new_ecma_string_from_magic_string_ex_id (magic_string_ex_id);\n    }\n  }\n\n  lit_utf8_byte_t *data_p;\n  ecma_string_t *string_desc_p = ecma_new_ecma_string_from_utf8_buffer (cesu8_string1_length + cesu8_string2_length,\n                                                                        new_size,\n                                                                        &data_p);\n\n  lit_string_hash_t hash_start;\n\n  if (JERRY_UNLIKELY (flags & ECMA_STRING_FLAG_REHASH_NEEDED))\n  {\n    hash_start = lit_utf8_string_calc_hash (cesu8_string1_p, cesu8_string1_size);\n  }\n  else\n  {\n    JERRY_ASSERT (!ECMA_IS_DIRECT_STRING (string1_p));\n    hash_start = string1_p->u.hash;\n  }\n\n  string_desc_p->u.hash = lit_utf8_string_hash_combine (hash_start, cesu8_string2_p, cesu8_string2_size);\n\n  memcpy (data_p, cesu8_string1_p, cesu8_string1_size);\n  memcpy (data_p + cesu8_string1_size, cesu8_string2_p, cesu8_string2_size);\n\n  ecma_deref_ecma_string (string1_p);\n  return (ecma_string_t *) string_desc_p;\n}",
        "begin_line": 728,
        "end_line": 828,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_compare_get_string_chars#1817",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_compare_get_string_chars (const ecma_string_t *string_p, /**< ecma-string */                                lit_utf8_size_t *size_and_length_p) /**< [out] size and length */",
        "snippet": "static const lit_utf8_byte_t *\necma_compare_get_string_chars (const ecma_string_t *string_p, /**< ecma-string */\n                               lit_utf8_size_t *size_and_length_p) /**< [out] size and length */\n{\n  switch (ECMA_STRING_GET_CONTAINER (string_p))\n  {\n    case ECMA_STRING_CONTAINER_HEAP_UTF8_STRING:\n    {\n      ecma_short_string_t *short_string_p = (ecma_short_string_t *) string_p;\n      size_and_length_p[0] = short_string_p->size;\n      size_and_length_p[1] = short_string_p->length;\n      return ECMA_SHORT_STRING_GET_BUFFER (string_p);\n    }\n    case ECMA_STRING_CONTAINER_LONG_OR_EXTERNAL_STRING:\n    {\n      ecma_long_string_t *long_string_p = (ecma_long_string_t *) string_p;\n      size_and_length_p[0] = long_string_p->size;\n      size_and_length_p[1] = long_string_p->length;\n      return long_string_p->string_p;\n    }\n    case ECMA_STRING_CONTAINER_HEAP_ASCII_STRING:\n    {\n      size_and_length_p[0] = ECMA_ASCII_STRING_GET_SIZE (string_p);\n      size_and_length_p[1] = size_and_length_p[0];\n      return ECMA_ASCII_STRING_GET_BUFFER (string_p);\n    }\n    default:\n    {\n      return NULL;\n    }\n  }\n}",
        "begin_line": 1817,
        "end_line": 1848,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_concat_ecma_strings#839",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_concat_ecma_strings (ecma_string_t *string1_p, /**< first ecma-string */                           ecma_string_t *string2_p) /**< second ecma-string */",
        "snippet": "ecma_string_t *\necma_concat_ecma_strings (ecma_string_t *string1_p, /**< first ecma-string */\n                          ecma_string_t *string2_p) /**< second ecma-string */\n{\n  JERRY_ASSERT (string1_p != NULL && string2_p != NULL);\n\n  if (JERRY_UNLIKELY (ecma_string_is_empty (string1_p)))\n  {\n    ecma_ref_ecma_string (string2_p);\n    return string2_p;\n  }\n  else if (JERRY_UNLIKELY (ecma_string_is_empty (string2_p)))\n  {\n    return string1_p;\n  }\n\n  lit_utf8_size_t cesu8_string2_size;\n  lit_utf8_size_t cesu8_string2_length;\n  lit_utf8_byte_t uint32_to_string_buffer[ECMA_MAX_CHARS_IN_STRINGIFIED_UINT32];\n  uint8_t flags = ECMA_STRING_FLAG_IS_ASCII;\n\n  const lit_utf8_byte_t *cesu8_string2_p = ecma_string_get_chars (string2_p,\n                                                                  &cesu8_string2_size,\n                                                                  &cesu8_string2_length,\n                                                                  uint32_to_string_buffer,\n                                                                  &flags);\n\n  JERRY_ASSERT (cesu8_string2_p != NULL);\n\n  ecma_string_t *result_p = ecma_append_chars_to_string (string1_p,\n                                                         cesu8_string2_p,\n                                                         cesu8_string2_size,\n                                                         cesu8_string2_length);\n\n  JERRY_ASSERT (!(flags & ECMA_STRING_FLAG_MUST_BE_FREED));\n\n  return result_p;\n}",
        "begin_line": 839,
        "end_line": 876,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_deref_ecma_string#956",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_deref_ecma_string (ecma_string_t *string_p) /**< ecma-string */",
        "snippet": "void\necma_deref_ecma_string (ecma_string_t *string_p) /**< ecma-string */\n{\n  JERRY_ASSERT (string_p != NULL);\n\n  if (ECMA_IS_DIRECT_STRING (string_p))\n  {\n    return;\n  }\n\n  ecma_deref_ecma_string_non_direct (string_p);\n}",
        "begin_line": 956,
        "end_line": 967,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_destroy_ecma_string#972",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_destroy_ecma_string (ecma_string_t *string_p) /**< ecma-string */",
        "snippet": "void\necma_destroy_ecma_string (ecma_string_t *string_p) /**< ecma-string */\n{\n  JERRY_ASSERT (string_p != NULL);\n  JERRY_ASSERT (!ECMA_IS_DIRECT_STRING (string_p));\n  JERRY_ASSERT ((string_p->refs_and_container < ECMA_STRING_REF_ONE) || ECMA_STRING_IS_STATIC (string_p));\n\n  switch (ECMA_STRING_GET_CONTAINER (string_p))\n  {\n    case ECMA_STRING_CONTAINER_HEAP_UTF8_STRING:\n    {\n      ecma_dealloc_string_buffer (string_p, ((ecma_short_string_t *) string_p)->size + sizeof (ecma_short_string_t));\n      return;\n    }\n    case ECMA_STRING_CONTAINER_LONG_OR_EXTERNAL_STRING:\n    {\n      ecma_long_string_t *long_string_p = (ecma_long_string_t *) string_p;\n\n      if (long_string_p->string_p == ECMA_LONG_STRING_BUFFER_START (long_string_p))\n      {\n        ecma_dealloc_string_buffer (string_p, long_string_p->size + sizeof (ecma_long_string_t));\n        return;\n      }\n\n      ecma_external_string_t *external_string_p = (ecma_external_string_t *) string_p;\n      jerry_external_string_free_callback_t free_cb = JERRY_CONTEXT (external_string_free_callback_p);\n\n      if (free_cb != NULL)\n      {\n        free_cb ((lit_utf8_byte_t *) external_string_p->header.string_p,\n                 external_string_p->header.size,\n                 external_string_p->user_p);\n      }\n\n      ecma_dealloc_external_string (external_string_p);\n      return;\n    }\n    case ECMA_STRING_CONTAINER_HEAP_ASCII_STRING:\n    {\n      ecma_dealloc_string_buffer (string_p, ECMA_ASCII_STRING_GET_SIZE (string_p) + ECMA_ASCII_STRING_HEADER_SIZE);\n      return;\n    }\n#if JERRY_ESNEXT\n    case ECMA_STRING_CONTAINER_SYMBOL:\n    {\n      ecma_extended_string_t *symbol_p = (ecma_extended_string_t *) string_p;\n      ecma_free_value (symbol_p->u.symbol_descriptor);\n      ecma_dealloc_extended_string (symbol_p);\n      return;\n    }\n#endif /* JERRY_ESNEXT */\n    default:\n    {\n      JERRY_ASSERT (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_UINT32_IN_DESC\n                    || ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_MAGIC_STRING_EX);\n\n      /* only the string descriptor itself should be freed */\n      ecma_dealloc_string (string_p);\n    }\n  }\n}",
        "begin_line": 972,
        "end_line": 1032,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_find_special_string#301",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_find_special_string (const lit_utf8_byte_t *string_p, /**< utf8 string */                           lit_utf8_size_t string_size) /**< string size */",
        "snippet": "static ecma_string_t *\necma_find_special_string (const lit_utf8_byte_t *string_p, /**< utf8 string */\n                          lit_utf8_size_t string_size) /**< string size */\n{\n  JERRY_ASSERT (string_p != NULL || string_size == 0);\n  lit_magic_string_id_t magic_string_id = lit_is_utf8_string_magic (string_p, string_size);\n\n  if (magic_string_id != LIT_MAGIC_STRING__COUNT)\n  {\n    return ecma_get_magic_string (magic_string_id);\n  }\n\n  JERRY_ASSERT (string_size > 0);\n\n  if (*string_p >= LIT_CHAR_0 && *string_p <= LIT_CHAR_9)\n  {\n    uint32_t array_index;\n\n    if (ecma_string_to_array_index (string_p, string_size, &array_index))\n    {\n      return ecma_new_ecma_string_from_uint32 (array_index);\n    }\n  }\n\n  if (lit_get_magic_string_ex_count () > 0)\n  {\n    lit_magic_string_ex_id_t magic_string_ex_id = lit_is_ex_utf8_string_magic (string_p, string_size);\n\n    if (magic_string_ex_id < lit_get_magic_string_ex_count ())\n    {\n      return ecma_new_ecma_string_from_magic_string_ex_id (magic_string_ex_id);\n    }\n  }\n\n  return NULL;\n}",
        "begin_line": 301,
        "end_line": 336,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_get_string_magic#2421",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_get_string_magic (const ecma_string_t *string_p) /**< ecma-string */",
        "snippet": "lit_magic_string_id_t\necma_get_string_magic (const ecma_string_t *string_p) /**< ecma-string */\n{\n  if (ECMA_IS_DIRECT_STRING_WITH_TYPE (string_p, ECMA_DIRECT_STRING_MAGIC))\n  {\n    uint32_t id = (uint32_t) ECMA_GET_DIRECT_STRING_VALUE (string_p);\n\n    if (id < LIT_MAGIC_STRING__COUNT)\n    {\n      return (lit_magic_string_id_t) id;\n    }\n  }\n\n  return LIT_MAGIC_STRING__COUNT;\n}",
        "begin_line": 2421,
        "end_line": 2435,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_new_ecma_string_from_ascii#343",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_new_ecma_string_from_ascii (const lit_utf8_byte_t *string_p, /**< ascii string */                                  lit_utf8_size_t string_size) /**< string size */",
        "snippet": "ecma_string_t *\necma_new_ecma_string_from_ascii (const lit_utf8_byte_t *string_p, /**< ascii string */\n                                 lit_utf8_size_t string_size) /**< string size */\n{\n  JERRY_ASSERT (string_p != NULL || string_size == 0);\n\n  ecma_string_t *string_desc_p = ecma_find_special_string (string_p, string_size);\n\n  if (string_desc_p != NULL)\n  {\n    return string_desc_p;\n  }\n\n  lit_utf8_byte_t *data_p;\n  string_desc_p = ecma_new_ecma_string_from_utf8_buffer (string_size, string_size, &data_p);\n\n  string_desc_p->u.hash = lit_utf8_string_calc_hash (string_p, string_size);\n  memcpy (data_p, string_p, string_size);\n\n  return string_desc_p;\n}",
        "begin_line": 343,
        "end_line": 363,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_new_ecma_string_from_utf8#370",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_new_ecma_string_from_utf8 (const lit_utf8_byte_t *string_p, /**< utf-8 string */                                 lit_utf8_size_t string_size) /**< string size */",
        "snippet": "ecma_string_t *\necma_new_ecma_string_from_utf8 (const lit_utf8_byte_t *string_p, /**< utf-8 string */\n                                lit_utf8_size_t string_size) /**< string size */\n{\n  JERRY_ASSERT (string_p != NULL || string_size == 0);\n  JERRY_ASSERT (lit_is_valid_cesu8_string (string_p, string_size));\n\n  ecma_string_t *string_desc_p = ecma_find_special_string (string_p, string_size);\n\n  if (string_desc_p != NULL)\n  {\n    return string_desc_p;\n  }\n\n  lit_utf8_byte_t *data_p;\n  string_desc_p = ecma_new_ecma_string_from_utf8_buffer (lit_utf8_string_length (string_p, string_size),\n                                                         string_size,\n                                                         &data_p);\n\n  string_desc_p->u.hash = lit_utf8_string_calc_hash (string_p, string_size);\n  memcpy (data_p, string_p, string_size);\n\n  return string_desc_p;\n}",
        "begin_line": 370,
        "end_line": 393,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_ref_ecma_string#910",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_ref_ecma_string (ecma_string_t *string_p) /**< string descriptor */",
        "snippet": "void\necma_ref_ecma_string (ecma_string_t *string_p) /**< string descriptor */\n{\n  JERRY_ASSERT (string_p != NULL);\n\n  if (ECMA_IS_DIRECT_STRING (string_p))\n  {\n    return;\n  }\n\n  ecma_ref_ecma_string_non_direct (string_p);\n}",
        "begin_line": 910,
        "end_line": 921,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_get_chars#1489",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_get_chars (const ecma_string_t *string_p, /**< ecma-string */                        lit_utf8_size_t *size_p, /**< [out] size of the ecma string */                        lit_utf8_size_t *length_p, /**< [out] optional argument. If the pointer is not NULL the pointed                                                    *    memory area is filled with the length of the ecma string */                        lit_utf8_byte_t *uint32_buff_p, /**< [out] optional argument. If the pointer is not NULL the                                                         *    pointed memory area is filled with the string converted                                                         *    uint32 string descriptor */                        uint8_t *flags_p) /**< [in, out] any combination of ecma_string_flag_t bits */",
        "snippet": "const lit_utf8_byte_t *\necma_string_get_chars (const ecma_string_t *string_p, /**< ecma-string */\n                       lit_utf8_size_t *size_p, /**< [out] size of the ecma string */\n                       lit_utf8_size_t *length_p, /**< [out] optional argument. If the pointer is not NULL the pointed\n                                                   *    memory area is filled with the length of the ecma string */\n                       lit_utf8_byte_t *uint32_buff_p, /**< [out] optional argument. If the pointer is not NULL the\n                                                        *    pointed memory area is filled with the string converted\n                                                        *    uint32 string descriptor */\n                       uint8_t *flags_p) /**< [in,out] any combination of ecma_string_flag_t bits */\n{\n  lit_utf8_size_t length;\n  lit_utf8_size_t size;\n  const lit_utf8_byte_t *result_p;\n\n  if (ECMA_IS_DIRECT_STRING (string_p))\n  {\n    *flags_p |= ECMA_STRING_FLAG_REHASH_NEEDED;\n\n    switch (ECMA_GET_DIRECT_STRING_TYPE (string_p))\n    {\n      case ECMA_DIRECT_STRING_MAGIC:\n      {\n        uint32_t id = (uint32_t) ECMA_GET_DIRECT_STRING_VALUE (string_p);\n\n        if (id >= LIT_MAGIC_STRING__COUNT)\n        {\n          id -= LIT_MAGIC_STRING__COUNT;\n          size = lit_get_magic_string_ex_size (id);\n          result_p = lit_get_magic_string_ex_utf8 (id);\n          length = 0;\n\n          if (JERRY_UNLIKELY (*flags_p & ECMA_STRING_FLAG_IS_ASCII))\n          {\n            length = lit_utf8_string_length (result_p, size);\n          }\n        }\n        else\n        {\n          size = lit_get_magic_string_size (id);\n          length = size;\n\n          result_p = lit_get_magic_string_utf8 (id);\n\n          /* All magic strings must be ascii strings. */\n          JERRY_ASSERT (ECMA_STRING_IS_ASCII (result_p, size));\n        }\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (ECMA_GET_DIRECT_STRING_TYPE (string_p) == ECMA_DIRECT_STRING_UINT);\n        uint32_t uint32_number = (uint32_t) ECMA_GET_DIRECT_STRING_VALUE (string_p);\n        size = (lit_utf8_size_t) ecma_string_get_uint32_size (uint32_number);\n\n        if (uint32_buff_p != NULL)\n        {\n          result_p = uint32_buff_p;\n        }\n        else\n        {\n          result_p = (const lit_utf8_byte_t *) jmem_heap_alloc_block (size);\n          *flags_p |= ECMA_STRING_FLAG_MUST_BE_FREED;\n        }\n\n        length = ecma_uint32_to_utf8_string (uint32_number, (lit_utf8_byte_t *) result_p, size);\n\n        JERRY_ASSERT (length == size);\n        *flags_p |= ECMA_STRING_FLAG_IS_UINT32;\n        break;\n      }\n    }\n  }\n  else\n  {\n    JERRY_ASSERT (string_p->refs_and_container >= ECMA_STRING_REF_ONE);\n\n    switch (ECMA_STRING_GET_CONTAINER (string_p))\n    {\n      case ECMA_STRING_CONTAINER_HEAP_UTF8_STRING:\n      {\n        ecma_short_string_t *short_string_p = (ecma_short_string_t *) string_p;\n        size = short_string_p->size;\n        length = short_string_p->length;\n        result_p = ECMA_SHORT_STRING_GET_BUFFER (short_string_p);\n        break;\n      }\n      case ECMA_STRING_CONTAINER_LONG_OR_EXTERNAL_STRING:\n      {\n        ecma_long_string_t *long_string_desc_p = (ecma_long_string_t *) string_p;\n        size = long_string_desc_p->size;\n        length = long_string_desc_p->length;\n        result_p = long_string_desc_p->string_p;\n        break;\n      }\n      case ECMA_STRING_CONTAINER_HEAP_ASCII_STRING:\n      {\n        size = ECMA_ASCII_STRING_GET_SIZE (string_p);\n        length = size;\n        result_p = ECMA_ASCII_STRING_GET_BUFFER (string_p);\n        break;\n      }\n      case ECMA_STRING_CONTAINER_UINT32_IN_DESC:\n      {\n        size = (lit_utf8_size_t) ecma_string_get_uint32_size (string_p->u.uint32_number);\n\n        if (uint32_buff_p != NULL)\n        {\n          result_p = uint32_buff_p;\n        }\n        else\n        {\n          result_p = (const lit_utf8_byte_t *) jmem_heap_alloc_block (size);\n          *flags_p |= ECMA_STRING_FLAG_MUST_BE_FREED;\n        }\n\n        length = ecma_uint32_to_utf8_string (string_p->u.uint32_number, (lit_utf8_byte_t *) result_p, size);\n\n        JERRY_ASSERT (length == size);\n        *flags_p |= ECMA_STRING_FLAG_IS_UINT32 | ECMA_STRING_FLAG_REHASH_NEEDED;\n        break;\n\n      }\n      default:\n      {\n        JERRY_ASSERT (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_MAGIC_STRING_EX);\n\n        lit_magic_string_ex_id_t id = LIT_MAGIC_STRING__COUNT - string_p->u.magic_string_ex_id;\n        size = lit_get_magic_string_ex_size (id);\n        length = 0;\n\n        if (JERRY_UNLIKELY (*flags_p & ECMA_STRING_FLAG_IS_ASCII))\n        {\n          length = lit_utf8_string_length (lit_get_magic_string_ex_utf8 (id), size);\n        }\n\n        result_p = lit_get_magic_string_ex_utf8 (id);\n        *flags_p |= ECMA_STRING_FLAG_REHASH_NEEDED;\n        break;\n      }\n    }\n  }\n\n  *size_p = size;\n  if (length_p != NULL)\n  {\n    *length_p = length;\n  }\n\n  if ((*flags_p & ECMA_STRING_FLAG_IS_ASCII)\n      && length != size)\n  {\n    *flags_p = (uint8_t) (*flags_p & (uint8_t) ~ECMA_STRING_FLAG_IS_ASCII);\n  }\n\n  return result_p;\n}",
        "begin_line": 1489,
        "end_line": 1644,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_trim_back#2541",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_trim_back (const lit_utf8_byte_t *start_p, /**< current string's start position */                        const lit_utf8_byte_t *end_p)  /**< current string's end position */",
        "snippet": "const lit_utf8_byte_t *\necma_string_trim_back (const lit_utf8_byte_t *start_p, /**< current string's start position */\n                       const lit_utf8_byte_t *end_p)  /**< current string's end position */\n{\n  ecma_char_t ch;\n\n  while (end_p > start_p)\n  {\n    lit_utf8_size_t read_size = lit_read_prev_code_unit_from_utf8 (end_p, &ch);\n\n    if (!lit_char_is_white_space (ch))\n    {\n      break;\n    }\n\n    end_p -= read_size;\n  }\n\n  return end_p;\n}",
        "begin_line": 2541,
        "end_line": 2560,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_trim_front#2512",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_trim_front (const lit_utf8_byte_t *start_p, /**< current string's start position */                         const lit_utf8_byte_t *end_p)  /**< current string's end position */",
        "snippet": "const lit_utf8_byte_t *\necma_string_trim_front (const lit_utf8_byte_t *start_p, /**< current string's start position */\n                        const lit_utf8_byte_t *end_p)  /**< current string's end position */\n{\n  ecma_char_t ch;\n\n  while (start_p < end_p)\n  {\n    lit_utf8_size_t read_size = lit_read_code_unit_from_cesu8 (start_p, &ch);\n\n    if (!lit_char_is_white_space (ch))\n    {\n      break;\n    }\n\n    start_p += read_size;\n  }\n\n  return start_p;\n}",
        "begin_line": 2512,
        "end_line": 2531,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_check_value_type_is_spec_defined#441",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_check_value_type_is_spec_defined (ecma_value_t value) /**< ecma value */",
        "snippet": "void\necma_check_value_type_is_spec_defined (ecma_value_t value) /**< ecma value */\n{\n  JERRY_ASSERT (ecma_is_value_undefined (value)\n                || ecma_is_value_null (value)\n                || ecma_is_value_boolean (value)\n                || ecma_is_value_number (value)\n                || ecma_is_value_string (value)\n                || ecma_is_value_bigint (value)\n                || ecma_is_value_symbol (value)\n                || ecma_is_value_object (value));\n}",
        "begin_line": 441,
        "end_line": 452,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_copy_value#894",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_copy_value (ecma_value_t value)  /**< value description */",
        "snippet": "ecma_value_t\necma_copy_value (ecma_value_t value)  /**< value description */\n{\n  switch (ecma_get_value_type_field (value))\n  {\n    case ECMA_TYPE_FLOAT:\n    {\n      ecma_number_t *num_p = (ecma_number_t *) ecma_get_pointer_from_ecma_value (value);\n      ecma_number_t *new_num_p = ecma_alloc_number ();\n\n      *new_num_p = *num_p;\n\n      return ecma_make_float_value (new_num_p);\n    }\n#if JERRY_ESNEXT\n    case ECMA_TYPE_SYMBOL:\n#endif /* JERRY_ESNEXT */\n    case ECMA_TYPE_STRING:\n    {\n      ecma_string_t *string_p = (ecma_string_t *) ecma_get_pointer_from_ecma_value (value);\n      ecma_ref_ecma_string_non_direct (string_p);\n      return value;\n    }\n#if JERRY_BUILTIN_BIGINT\n    case ECMA_TYPE_BIGINT:\n    {\n      if (value != ECMA_BIGINT_ZERO)\n      {\n        ecma_ref_extended_primitive (ecma_get_extended_primitive_from_value (value));\n      }\n      return value;\n    }\n#endif /* JERRY_BUILTIN_BIGINT */\n    case ECMA_TYPE_OBJECT:\n    {\n      ecma_ref_object_inline (ecma_get_object_from_value (value));\n      return value;\n    }\n    default:\n    {\n      JERRY_ASSERT (ecma_get_value_type_field (value) == ECMA_TYPE_DIRECT\n                    || ecma_get_value_type_field (value) == ECMA_TYPE_DIRECT_STRING);\n\n      return value;\n    }\n  }\n}",
        "begin_line": 894,
        "end_line": 940,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_create_float_number#524",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_create_float_number (ecma_number_t ecma_number) /**< value of the float number */",
        "snippet": "static ecma_value_t\necma_create_float_number (ecma_number_t ecma_number) /**< value of the float number */\n{\n  ecma_number_t *ecma_num_p = ecma_alloc_number ();\n\n  *ecma_num_p = ecma_number;\n\n  return ecma_pointer_to_ecma_value (ecma_num_p) | ECMA_TYPE_FLOAT;\n}",
        "begin_line": 524,
        "end_line": 532,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_free_value#1123",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_free_value (ecma_value_t value) /**< value description */",
        "snippet": "void\necma_free_value (ecma_value_t value) /**< value description */\n{\n  switch (ecma_get_value_type_field (value))\n  {\n    case ECMA_TYPE_FLOAT:\n    {\n      ecma_number_t *number_p = (ecma_number_t *) ecma_get_pointer_from_ecma_value (value);\n      ecma_dealloc_number (number_p);\n      break;\n    }\n#if JERRY_ESNEXT\n    case ECMA_TYPE_SYMBOL:\n#endif /* JERRY_ESNEXT */\n    case ECMA_TYPE_STRING:\n    {\n      ecma_string_t *string_p = (ecma_string_t *) ecma_get_pointer_from_ecma_value (value);\n      ecma_deref_ecma_string_non_direct (string_p);\n      break;\n    }\n    case ECMA_TYPE_OBJECT:\n    {\n      ecma_deref_object (ecma_get_object_from_value (value));\n      break;\n    }\n#if JERRY_BUILTIN_BIGINT\n    case ECMA_TYPE_BIGINT:\n    {\n      if (value != ECMA_BIGINT_ZERO)\n      {\n        ecma_deref_bigint (ecma_get_extended_primitive_from_value (value));\n      }\n\n      break;\n    }\n#endif /* JERRY_BUILTIN_BIGINT */\n    default:\n    {\n      JERRY_ASSERT (ecma_get_value_type_field (value) == ECMA_TYPE_DIRECT\n                    || ecma_get_value_type_field (value) == ECMA_TYPE_DIRECT_STRING);\n\n      /* no memory is allocated */\n      break;\n    }\n  }\n}",
        "begin_line": 1123,
        "end_line": 1168,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_free_value_if_not_object#1191",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_free_value_if_not_object (ecma_value_t value) /**< value description */",
        "snippet": "void\necma_free_value_if_not_object (ecma_value_t value) /**< value description */\n{\n  if (ecma_get_value_type_field (value) != ECMA_TYPE_OBJECT)\n  {\n    ecma_free_value (value);\n  }\n}",
        "begin_line": 1191,
        "end_line": 1198,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_make_length_value#578",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_make_length_value (ecma_length_t number) /**< number to be encoded */",
        "snippet": "ecma_value_t\necma_make_length_value (ecma_length_t number) /**< number to be encoded */\n{\n  if (number <= ECMA_INTEGER_NUMBER_MAX)\n  {\n    return ecma_make_integer_value ((ecma_integer_value_t) number);\n  }\n\n  return ecma_create_float_number ((ecma_number_t) number);\n}",
        "begin_line": 578,
        "end_line": 587,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_make_number_value#594",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_make_number_value (ecma_number_t ecma_number) /**< number to be encoded */",
        "snippet": "ecma_value_t\necma_make_number_value (ecma_number_t ecma_number) /**< number to be encoded */\n{\n  ecma_integer_value_t integer_value = (ecma_integer_value_t) ecma_number;\n\n  if ((ecma_number_t) integer_value == ecma_number\n      && ((integer_value == 0) ? ecma_is_number_equal_to_positive_zero (ecma_number)\n                               : ECMA_IS_INTEGER_NUMBER (integer_value)))\n  {\n    return ecma_make_integer_value (integer_value);\n  }\n\n  return ecma_create_float_number (ecma_number);\n}",
        "begin_line": 594,
        "end_line": 607,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_make_uint32_value#630",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_make_uint32_value (uint32_t uint32_number) /**< uint32 number to be encoded */",
        "snippet": "ecma_value_t\necma_make_uint32_value (uint32_t uint32_number) /**< uint32 number to be encoded */\n{\n  if (uint32_number <= ECMA_INTEGER_NUMBER_MAX)\n  {\n    return ecma_make_integer_value ((ecma_integer_value_t) uint32_number);\n  }\n\n  return ecma_create_float_number ((ecma_number_t) uint32_number);\n}",
        "begin_line": 630,
        "end_line": 639,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_value_assign_value#1005",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_value_assign_value (ecma_value_t *value_p, /**< [in, out] ecma value */                          ecma_value_t ecma_value) /**< value to assign */",
        "snippet": "void\necma_value_assign_value (ecma_value_t *value_p, /**< [in, out] ecma value */\n                         ecma_value_t ecma_value) /**< value to assign */\n{\n  JERRY_STATIC_ASSERT (ECMA_TYPE_DIRECT == 0,\n                       ecma_type_direct_must_be_zero_for_the_next_check);\n\n  if (*value_p == ecma_value)\n  {\n    return;\n  }\n\n  if (ecma_get_value_type_field (ecma_value || *value_p) == ECMA_TYPE_DIRECT)\n  {\n    *value_p = ecma_value;\n  }\n  else if (ecma_is_value_float_number (ecma_value)\n           && ecma_is_value_float_number (*value_p))\n  {\n    const ecma_number_t *num_src_p = (ecma_number_t *) ecma_get_pointer_from_ecma_value (ecma_value);\n    ecma_number_t *num_dst_p = (ecma_number_t *) ecma_get_pointer_from_ecma_value (*value_p);\n\n    *num_dst_p = *num_src_p;\n  }\n  else\n  {\n    ecma_free_value_if_not_object (*value_p);\n    *value_p = ecma_copy_value_if_not_object (ecma_value);\n  }\n}",
        "begin_line": 1005,
        "end_line": 1034,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_assert_object_contains_the_property#906",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_assert_object_contains_the_property (const ecma_object_t *object_p, /**< ecma-object */                                           const ecma_property_value_t *prop_value_p, /**< property value */                                           bool is_data) /**< property should be data property */",
        "snippet": "static void\necma_assert_object_contains_the_property (const ecma_object_t *object_p, /**< ecma-object */\n                                          const ecma_property_value_t *prop_value_p, /**< property value */\n                                          bool is_data) /**< property should be data property */\n{\n#ifndef JERRY_NDEBUG\n  jmem_cpointer_t prop_iter_cp = object_p->u1.property_list_cp;\n  JERRY_ASSERT (prop_iter_cp != JMEM_CP_NULL);\n\n  ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, prop_iter_cp);\n\n  if (prop_iter_p->types[0] == ECMA_PROPERTY_TYPE_HASHMAP)\n  {\n    prop_iter_cp = prop_iter_p->next_property_cp;\n  }\n\n  while (prop_iter_cp != JMEM_CP_NULL)\n  {\n    prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, prop_iter_cp);\n\n    JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));\n\n    ecma_property_pair_t *prop_pair_p = (ecma_property_pair_t *) prop_iter_p;\n\n    for (int i = 0; i < ECMA_PROPERTY_PAIR_ITEM_COUNT; i++)\n    {\n      if ((prop_pair_p->values + i) == prop_value_p)\n      {\n        JERRY_ASSERT (is_data == ((prop_pair_p->header.types[i] & ECMA_PROPERTY_FLAG_DATA) != 0));\n        return;\n      }\n    }\n\n    prop_iter_cp = prop_iter_p->next_property_cp;\n  }\n#else /* JERRY_NDEBUG */\n  JERRY_UNUSED (object_p);\n  JERRY_UNUSED (prop_value_p);\n  JERRY_UNUSED (is_data);\n#endif /* !JERRY_NDEBUG */\n}",
        "begin_line": 906,
        "end_line": 946,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_bytecode_deref#1486",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_bytecode_deref (ecma_compiled_code_t *bytecode_p) /**< byte code pointer */",
        "snippet": "void\necma_bytecode_deref (ecma_compiled_code_t *bytecode_p) /**< byte code pointer */\n{\n  JERRY_ASSERT (bytecode_p->refs > 0);\n  JERRY_ASSERT (!CBC_IS_FUNCTION (bytecode_p->status_flags)\n                || !(bytecode_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION));\n\n  bytecode_p->refs--;\n\n  if (bytecode_p->refs > 0)\n  {\n    /* Non-zero reference counter. */\n    return;\n  }\n\n  if (CBC_IS_FUNCTION (bytecode_p->status_flags))\n  {\n    ecma_value_t *literal_start_p = NULL;\n    uint32_t literal_end;\n    uint32_t const_literal_end;\n\n    if (bytecode_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)\n    {\n      cbc_uint16_arguments_t *args_p = (cbc_uint16_arguments_t *) bytecode_p;\n      literal_end = args_p->literal_end;\n      const_literal_end = args_p->const_literal_end;\n\n      literal_start_p = (ecma_value_t *) ((uint8_t *) bytecode_p + sizeof (cbc_uint16_arguments_t));\n      literal_start_p -= args_p->register_end;\n    }\n    else\n    {\n      cbc_uint8_arguments_t *args_p = (cbc_uint8_arguments_t *) bytecode_p;\n      literal_end = args_p->literal_end;\n      const_literal_end = args_p->const_literal_end;\n\n      literal_start_p = (ecma_value_t *) ((uint8_t *) bytecode_p + sizeof (cbc_uint8_arguments_t));\n      literal_start_p -= args_p->register_end;\n    }\n\n    for (uint32_t i = const_literal_end; i < literal_end; i++)\n    {\n      ecma_compiled_code_t *bytecode_literal_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_compiled_code_t,\n                                                                                  literal_start_p[i]);\n\n      /* Self references are ignored. */\n      if (bytecode_literal_p != bytecode_p)\n      {\n        ecma_bytecode_deref (bytecode_literal_p);\n      }\n    }\n\n    ecma_script_deref (((cbc_uint8_arguments_t *) bytecode_p)->script_value);\n\n#if JERRY_ESNEXT\n    if (bytecode_p->status_flags & CBC_CODE_FLAGS_HAS_TAGGED_LITERALS)\n    {\n      ecma_collection_t *collection_p = ecma_compiled_code_get_tagged_template_collection (bytecode_p);\n\n      /* Since the objects in the tagged template collection are not strong referenced anymore by the compiled code\n         we can treat them as 'new' objects. */\n      JERRY_CONTEXT (ecma_gc_new_objects) += collection_p->item_count * 2;\n      ecma_collection_free_template_literal (collection_p);\n    }\n#endif /* JERRY_ESNEXT */\n\n#if JERRY_LINE_INFO\n    if (bytecode_p->status_flags & CBC_CODE_FLAGS_HAS_LINE_INFO)\n    {\n      ecma_line_info_free (ecma_compiled_code_get_line_info (bytecode_p));\n    }\n#endif /* JERRY_LINE_INFO */\n\n#if JERRY_DEBUGGER\n    if ((JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED)\n        && !(bytecode_p->status_flags & CBC_CODE_FLAGS_DEBUGGER_IGNORE)\n        && jerry_debugger_send_function_cp (JERRY_DEBUGGER_RELEASE_BYTE_CODE_CP, bytecode_p))\n    {\n      /* Delay the byte code free until the debugger client is notified.\n       * If the connection is aborted the pointer is still freed by\n       * jerry_debugger_close_connection(). */\n      jerry_debugger_byte_code_free_t *byte_code_free_p = (jerry_debugger_byte_code_free_t *) bytecode_p;\n      jmem_cpointer_t byte_code_free_head = JERRY_CONTEXT (debugger_byte_code_free_head);\n\n      byte_code_free_p->prev_cp = ECMA_NULL_POINTER;\n\n      jmem_cpointer_t byte_code_free_cp;\n      JMEM_CP_SET_NON_NULL_POINTER (byte_code_free_cp, byte_code_free_p);\n\n      if (byte_code_free_head == ECMA_NULL_POINTER)\n      {\n        JERRY_CONTEXT (debugger_byte_code_free_tail) = byte_code_free_cp;\n      }\n      else\n      {\n        jerry_debugger_byte_code_free_t *first_byte_code_free_p;\n\n        first_byte_code_free_p = JMEM_CP_GET_NON_NULL_POINTER (jerry_debugger_byte_code_free_t,\n                                                               byte_code_free_head);\n        first_byte_code_free_p->prev_cp = byte_code_free_cp;\n      }\n\n      JERRY_CONTEXT (debugger_byte_code_free_head) = byte_code_free_cp;\n      return;\n    }\n#endif /* JERRY_DEBUGGER */\n\n#if JERRY_MEM_STATS\n    jmem_stats_free_byte_code_bytes (((size_t) bytecode_p->size) << JMEM_ALIGNMENT_LOG);\n#endif /* JERRY_MEM_STATS */\n  }\n  else\n  {\n#if JERRY_BUILTIN_REGEXP\n    re_compiled_code_t *re_bytecode_p = (re_compiled_code_t *) bytecode_p;\n\n    ecma_deref_ecma_string (ecma_get_string_from_value (re_bytecode_p->source));\n#endif /* JERRY_BUILTIN_REGEXP */\n  }\n\n  jmem_heap_free_block (bytecode_p,\n                        ((size_t) bytecode_p->size) << JMEM_ALIGNMENT_LOG);\n}",
        "begin_line": 1486,
        "end_line": 1608,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_bytecode_ref#1470",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_bytecode_ref (ecma_compiled_code_t *bytecode_p) /**< byte code pointer */",
        "snippet": "void\necma_bytecode_ref (ecma_compiled_code_t *bytecode_p) /**< byte code pointer */\n{\n  /* Abort program if maximum reference number is reached. */\n  if (bytecode_p->refs >= UINT16_MAX)\n  {\n    jerry_fatal (ERR_REF_COUNT_LIMIT);\n  }\n\n  bytecode_p->refs++;\n}",
        "begin_line": 1470,
        "end_line": 1480,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_compiled_code_resolve_arguments_start#1690",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_compiled_code_resolve_arguments_start (const ecma_compiled_code_t *bytecode_header_p) /**< compiled code */",
        "snippet": "ecma_value_t *\necma_compiled_code_resolve_arguments_start (const ecma_compiled_code_t *bytecode_header_p) /**< compiled code */\n{\n  JERRY_ASSERT (bytecode_header_p != NULL);\n\n  uint8_t *byte_p = (uint8_t *) bytecode_header_p;\n  byte_p += ((size_t) bytecode_header_p->size) << JMEM_ALIGNMENT_LOG;\n\n  if (!(bytecode_header_p->status_flags & CBC_CODE_FLAGS_MAPPED_ARGUMENTS_NEEDED))\n  {\n    return ((ecma_value_t *) byte_p);\n  }\n\n  if (JERRY_LIKELY (!(bytecode_header_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)))\n  {\n    return ((ecma_value_t *) byte_p) - ((cbc_uint8_arguments_t *) bytecode_header_p)->argument_end;\n  }\n\n  return ((ecma_value_t *) byte_p) - ((cbc_uint16_arguments_t *) bytecode_header_p)->argument_end;\n}",
        "begin_line": 1690,
        "end_line": 1709,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_create_decl_lex_env#120",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_create_decl_lex_env (ecma_object_t *outer_lexical_environment_p) /**< outer lexical environment */",
        "snippet": "ecma_object_t *\necma_create_decl_lex_env (ecma_object_t *outer_lexical_environment_p) /**< outer lexical environment */\n{\n  ecma_object_t *new_lexical_environment_p = ecma_alloc_object ();\n\n  new_lexical_environment_p->type_flags_refs = ECMA_LEXICAL_ENVIRONMENT_DECLARATIVE;\n\n  ecma_init_gc_info (new_lexical_environment_p);\n\n  new_lexical_environment_p->u1.property_list_cp = JMEM_CP_NULL;\n\n  ECMA_SET_POINTER (new_lexical_environment_p->u2.outer_reference_cp, outer_lexical_environment_p);\n\n  return new_lexical_environment_p;\n}",
        "begin_line": 120,
        "end_line": 134,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_create_named_accessor_property#563",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_create_named_accessor_property (ecma_object_t *object_p, /**< object */                                      ecma_string_t *name_p, /**< property name */                                      ecma_object_t *get_p, /**< getter */                                      ecma_object_t *set_p, /**< setter */                                      uint8_t prop_attributes, /**< property attributes */                                      ecma_property_t **out_prop_p) /**< [out] the property is also returned                                                                     *         if this field is non-NULL */",
        "snippet": "ecma_property_value_t *\necma_create_named_accessor_property (ecma_object_t *object_p, /**< object */\n                                     ecma_string_t *name_p, /**< property name */\n                                     ecma_object_t *get_p, /**< getter */\n                                     ecma_object_t *set_p, /**< setter */\n                                     uint8_t prop_attributes, /**< property attributes */\n                                     ecma_property_t **out_prop_p) /**< [out] the property is also returned\n                                                                    *         if this field is non-NULL */\n{\n  JERRY_ASSERT (object_p != NULL && name_p != NULL);\n  JERRY_ASSERT (ecma_is_lexical_environment (object_p)\n                || !ecma_op_object_is_fast_array (object_p));\n  JERRY_ASSERT (ecma_find_named_property (object_p, name_p) == NULL);\n  JERRY_ASSERT ((prop_attributes & ~ECMA_PROPERTY_BUILT_IN_CONFIGURABLE_ENUMERABLE) == 0);\n\n  uint8_t type_and_flags = prop_attributes;\n\n  ecma_property_value_t value;\n#if JERRY_CPOINTER_32_BIT\n  ecma_getter_setter_pointers_t *getter_setter_pair_p;\n  getter_setter_pair_p = jmem_pools_alloc (sizeof (ecma_getter_setter_pointers_t));\n  ECMA_SET_POINTER (getter_setter_pair_p->getter_cp, get_p);\n  ECMA_SET_POINTER (getter_setter_pair_p->setter_cp, set_p);\n  ECMA_SET_NON_NULL_POINTER (value.getter_setter_pair_cp, getter_setter_pair_p);\n#else /* !JERRY_CPOINTER_32_BIT */\n  ECMA_SET_POINTER (value.getter_setter_pair.getter_cp, get_p);\n  ECMA_SET_POINTER (value.getter_setter_pair.setter_cp, set_p);\n#endif /* JERRY_CPOINTER_32_BIT */\n\n  return ecma_create_property (object_p, name_p, type_and_flags, value, out_prop_p);\n}",
        "begin_line": 563,
        "end_line": 593,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_create_named_data_property#537",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_create_named_data_property (ecma_object_t *object_p, /**< object */                                  ecma_string_t *name_p, /**< property name */                                  uint8_t prop_attributes, /**< property attributes (See: ecma_property_flags_t) */                                  ecma_property_t **out_prop_p) /**< [out] the property is also returned                                                                 *         if this field is non-NULL */",
        "snippet": "ecma_property_value_t *\necma_create_named_data_property (ecma_object_t *object_p, /**< object */\n                                 ecma_string_t *name_p, /**< property name */\n                                 uint8_t prop_attributes, /**< property attributes (See: ecma_property_flags_t) */\n                                 ecma_property_t **out_prop_p) /**< [out] the property is also returned\n                                                                *         if this field is non-NULL */\n{\n  JERRY_ASSERT (object_p != NULL && name_p != NULL);\n  JERRY_ASSERT (ecma_is_lexical_environment (object_p)\n                || !ecma_op_object_is_fast_array (object_p));\n  JERRY_ASSERT (ecma_find_named_property (object_p, name_p) == NULL);\n  JERRY_ASSERT ((prop_attributes & ~ECMA_PROPERTY_BUILT_IN_CONFIGURABLE_ENUMERABLE_WRITABLE) == 0);\n\n  uint8_t type_and_flags = ECMA_PROPERTY_FLAG_DATA | prop_attributes;\n\n  ecma_property_value_t value;\n  value.value = ECMA_VALUE_UNDEFINED;\n\n  return ecma_create_property (object_p, name_p, type_and_flags, value, out_prop_p);\n}",
        "begin_line": 537,
        "end_line": 556,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_create_object#83",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_create_object (ecma_object_t *prototype_object_p, /**< pointer to prototybe of the object (or NULL) */                     size_t ext_object_size, /**< size of extended objects */                     ecma_object_type_t type) /**< object type */",
        "snippet": "ecma_object_t *\necma_create_object (ecma_object_t *prototype_object_p, /**< pointer to prototybe of the object (or NULL) */\n                    size_t ext_object_size, /**< size of extended objects */\n                    ecma_object_type_t type) /**< object type */\n{\n  ecma_object_t *new_object_p;\n\n  if (ext_object_size > 0)\n  {\n    new_object_p = (ecma_object_t *) ecma_alloc_extended_object (ext_object_size);\n  }\n  else\n  {\n    new_object_p = ecma_alloc_object ();\n  }\n\n  new_object_p->type_flags_refs = (ecma_object_descriptor_t) (type | ECMA_OBJECT_FLAG_EXTENSIBLE);\n\n  ecma_init_gc_info (new_object_p);\n\n  new_object_p->u1.property_list_cp = JMEM_CP_NULL;\n\n  ECMA_SET_POINTER (new_object_p->u2.prototype_cp, prototype_object_p);\n\n  return new_object_p;\n}",
        "begin_line": 83,
        "end_line": 108,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_create_object_lex_env#146",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_create_object_lex_env (ecma_object_t *outer_lexical_environment_p, /**< outer lexical environment */                             ecma_object_t *binding_obj_p) /**< binding object */",
        "snippet": "ecma_object_t *\necma_create_object_lex_env (ecma_object_t *outer_lexical_environment_p, /**< outer lexical environment */\n                            ecma_object_t *binding_obj_p) /**< binding object */\n{\n  JERRY_ASSERT (binding_obj_p != NULL\n                && !ecma_is_lexical_environment (binding_obj_p));\n\n  ecma_object_t *new_lexical_environment_p = ecma_alloc_object ();\n\n  new_lexical_environment_p->type_flags_refs = ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND;\n\n  ecma_init_gc_info (new_lexical_environment_p);\n\n  ECMA_SET_NON_NULL_POINTER (new_lexical_environment_p->u1.bound_object_cp,\n                             binding_obj_p);\n\n  ECMA_SET_POINTER (new_lexical_environment_p->u2.outer_reference_cp, outer_lexical_environment_p);\n\n  return new_lexical_environment_p;\n}",
        "begin_line": 146,
        "end_line": 165,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_create_property#397",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_create_property (ecma_object_t *object_p, /**< the object */                       ecma_string_t *name_p, /**< property name */                       uint8_t type_and_flags, /**< type and flags, see ecma_property_info_t */                       ecma_property_value_t value, /**< property value */                       ecma_property_t **out_prop_p) /**< [out] the property is also returned                                                      *         if this field is non-NULL */",
        "snippet": "static ecma_property_value_t *\necma_create_property (ecma_object_t *object_p, /**< the object */\n                      ecma_string_t *name_p, /**< property name */\n                      uint8_t type_and_flags, /**< type and flags, see ecma_property_info_t */\n                      ecma_property_value_t value, /**< property value */\n                      ecma_property_t **out_prop_p) /**< [out] the property is also returned\n                                                     *         if this field is non-NULL */\n{\n  JERRY_ASSERT (ECMA_PROPERTY_PAIR_ITEM_COUNT == 2);\n  JERRY_ASSERT (name_p != NULL);\n  JERRY_ASSERT (object_p != NULL);\n\n  jmem_cpointer_t *property_list_head_p = &object_p->u1.property_list_cp;\n\n  if (*property_list_head_p != ECMA_NULL_POINTER)\n  {\n    /* If the first entry is free (deleted), it is reused. */\n    ecma_property_header_t *first_property_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t,\n                                                                          *property_list_head_p);\n\n#if JERRY_PROPERTY_HASHMAP\n    bool has_hashmap = false;\n\n    if (first_property_p->types[0] == ECMA_PROPERTY_TYPE_HASHMAP)\n    {\n      property_list_head_p = &first_property_p->next_property_cp;\n      first_property_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t,\n                                                    *property_list_head_p);\n      has_hashmap = true;\n    }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n    JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (first_property_p));\n\n    if (first_property_p->types[0] == ECMA_PROPERTY_TYPE_DELETED)\n    {\n      ecma_property_pair_t *first_property_pair_p = (ecma_property_pair_t *) first_property_p;\n\n      ecma_property_t name_type;\n      first_property_pair_p->names_cp[0] = ecma_string_to_property_name (name_p,\n                                                                         &name_type);\n      first_property_p->types[0] = (ecma_property_t) (type_and_flags | name_type);\n\n      ecma_property_t *property_p = first_property_p->types + 0;\n\n      JERRY_ASSERT (ECMA_PROPERTY_VALUE_PTR (property_p) == first_property_pair_p->values + 0);\n\n      if (out_prop_p != NULL)\n      {\n        *out_prop_p = property_p;\n      }\n\n      first_property_pair_p->values[0] = value;\n\n#if JERRY_PROPERTY_HASHMAP\n      /* The property must be fully initialized before ecma_property_hashmap_insert\n       * is called, because the insert operation may reallocate the hashmap, and\n       * that triggers garbage collection which scans all properties of all objects.\n       * A not fully initialized but queued property may cause a crash. */\n\n      if (has_hashmap)\n      {\n        ecma_property_hashmap_insert (object_p,\n                                      name_p,\n                                      first_property_pair_p,\n                                      0);\n      }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n      return first_property_pair_p->values + 0;\n    }\n  }\n\n  /* Otherwise we create a new property pair and use its second value. */\n  ecma_property_pair_t *first_property_pair_p = ecma_alloc_property_pair ();\n\n  /* Need to query property_list_head_p again and recheck the existennce\n   * of property hasmap, because ecma_alloc_property_pair may delete them. */\n  property_list_head_p = &object_p->u1.property_list_cp;\n#if JERRY_PROPERTY_HASHMAP\n  bool has_hashmap = false;\n\n  if (*property_list_head_p != ECMA_NULL_POINTER)\n  {\n    ecma_property_header_t *first_property_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t,\n                                                                          *property_list_head_p);\n\n    if (first_property_p->types[0] == ECMA_PROPERTY_TYPE_HASHMAP)\n    {\n      property_list_head_p = &first_property_p->next_property_cp;\n      has_hashmap = true;\n    }\n  }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n  /* Just copy the previous value (no need to decompress, compress). */\n  first_property_pair_p->header.next_property_cp = *property_list_head_p;\n  first_property_pair_p->header.types[0] = ECMA_PROPERTY_TYPE_DELETED;\n  first_property_pair_p->names_cp[0] = LIT_INTERNAL_MAGIC_STRING_DELETED;\n\n  ecma_property_t name_type;\n  first_property_pair_p->names_cp[1] = ecma_string_to_property_name (name_p,\n                                                                     &name_type);\n\n  first_property_pair_p->header.types[1] = (ecma_property_t) (type_and_flags | name_type);\n\n  ECMA_SET_NON_NULL_POINTER (*property_list_head_p, &first_property_pair_p->header);\n\n  ecma_property_t *property_p = first_property_pair_p->header.types + 1;\n\n  JERRY_ASSERT (ECMA_PROPERTY_VALUE_PTR (property_p) == first_property_pair_p->values + 1);\n\n  if (out_prop_p != NULL)\n  {\n    *out_prop_p = property_p;\n  }\n\n  first_property_pair_p->values[1] = value;\n\n#if JERRY_PROPERTY_HASHMAP\n  /* See the comment before the other ecma_property_hashmap_insert above. */\n\n  if (has_hashmap)\n  {\n    ecma_property_hashmap_insert (object_p,\n                                  name_p,\n                                  first_property_pair_p,\n                                  1);\n  }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n  return first_property_pair_p->values + 1;\n}",
        "begin_line": 397,
        "end_line": 529,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_find_named_property#627",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_find_named_property (ecma_object_t *obj_p, /**< object to find property in */                           ecma_string_t *name_p) /**< property's name */",
        "snippet": "ecma_property_t *\necma_find_named_property (ecma_object_t *obj_p, /**< object to find property in */\n                          ecma_string_t *name_p) /**< property's name */\n{\n  JERRY_ASSERT (obj_p != NULL);\n  JERRY_ASSERT (name_p != NULL);\n  JERRY_ASSERT (ecma_is_lexical_environment (obj_p)\n                || !ecma_op_object_is_fast_array (obj_p));\n\n#if JERRY_LCACHE\n  ecma_property_t *property_p = ecma_lcache_lookup (obj_p, name_p);\n  if (property_p != NULL)\n  {\n    return property_p;\n  }\n#else /* !JERRY_LCACHE */\n  ecma_property_t *property_p = NULL;\n#endif /* JERRY_LCACHE */\n\n  jmem_cpointer_t prop_iter_cp = obj_p->u1.property_list_cp;\n\n#if JERRY_PROPERTY_HASHMAP\n  if (prop_iter_cp != JMEM_CP_NULL)\n  {\n    ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t,\n                                                                     prop_iter_cp);\n    if (prop_iter_p->types[0] == ECMA_PROPERTY_TYPE_HASHMAP)\n    {\n      jmem_cpointer_t property_real_name_cp;\n      property_p = ecma_property_hashmap_find ((ecma_property_hashmap_t *) prop_iter_p,\n                                               name_p,\n                                               &property_real_name_cp);\n#if JERRY_LCACHE\n      if (property_p != NULL\n          && !ecma_is_property_lcached (property_p))\n      {\n        ecma_lcache_insert (obj_p, property_real_name_cp, property_p);\n      }\n#endif /* JERRY_LCACHE */\n      return property_p;\n    }\n  }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n#if JERRY_PROPERTY_HASHMAP\n  uint32_t steps = 0;\n#endif /* JERRY_PROPERTY_HASHMAP */\n  jmem_cpointer_t property_name_cp = ECMA_NULL_POINTER;\n\n  if (ECMA_IS_DIRECT_STRING (name_p))\n  {\n    ecma_property_t prop_name_type = (ecma_property_t) ECMA_GET_DIRECT_STRING_TYPE (name_p);\n    property_name_cp = (jmem_cpointer_t) ECMA_GET_DIRECT_STRING_VALUE (name_p);\n\n    JERRY_ASSERT (prop_name_type > 0);\n\n    while (prop_iter_cp != JMEM_CP_NULL)\n    {\n      ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t,\n                                                                       prop_iter_cp);\n\n      JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));\n\n      ecma_property_pair_t *prop_pair_p = (ecma_property_pair_t *) prop_iter_p;\n\n      if (prop_pair_p->names_cp[0] == property_name_cp\n          && ECMA_PROPERTY_GET_NAME_TYPE (prop_iter_p->types[0]) == prop_name_type)\n      {\n        JERRY_ASSERT (ECMA_PROPERTY_IS_NAMED_PROPERTY (prop_iter_p->types[0]));\n\n        property_p = prop_iter_p->types + 0;\n        break;\n      }\n\n      if (prop_pair_p->names_cp[1] == property_name_cp\n          && ECMA_PROPERTY_GET_NAME_TYPE (prop_iter_p->types[1]) == prop_name_type)\n      {\n        JERRY_ASSERT (ECMA_PROPERTY_IS_NAMED_PROPERTY (prop_iter_p->types[1]));\n\n        property_p = prop_iter_p->types + 1;\n        break;\n      }\n\n#if JERRY_PROPERTY_HASHMAP\n      steps++;\n#endif /* JERRY_PROPERTY_HASHMAP */\n      prop_iter_cp = prop_iter_p->next_property_cp;\n    }\n  }\n  else\n  {\n    while (prop_iter_cp != JMEM_CP_NULL)\n    {\n      ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t,\n                                                                       prop_iter_cp);\n\n      JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));\n\n      ecma_property_pair_t *prop_pair_p = (ecma_property_pair_t *) prop_iter_p;\n\n      if (ECMA_PROPERTY_GET_NAME_TYPE (prop_iter_p->types[0]) == ECMA_DIRECT_STRING_PTR)\n      {\n        property_name_cp = prop_pair_p->names_cp[0];\n        ecma_string_t *prop_name_p = ECMA_GET_NON_NULL_POINTER (ecma_string_t, property_name_cp);\n\n        if (ecma_compare_ecma_non_direct_strings (name_p, prop_name_p))\n        {\n          property_p = prop_iter_p->types + 0;\n          break;\n        }\n      }\n\n      if (ECMA_PROPERTY_GET_NAME_TYPE (prop_iter_p->types[1]) == ECMA_DIRECT_STRING_PTR)\n      {\n        property_name_cp = prop_pair_p->names_cp[1];\n        ecma_string_t *prop_name_p = ECMA_GET_NON_NULL_POINTER (ecma_string_t, property_name_cp);\n\n        if (ecma_compare_ecma_non_direct_strings (name_p, prop_name_p))\n        {\n          property_p = prop_iter_p->types + 1;\n          break;\n        }\n      }\n\n#if JERRY_PROPERTY_HASHMAP\n      steps++;\n#endif /* JERRY_PROPERTY_HASHMAP */\n      prop_iter_cp = prop_iter_p->next_property_cp;\n    }\n  }\n\n#if JERRY_PROPERTY_HASHMAP\n  if (steps >= (ECMA_PROPERTY_HASMAP_MINIMUM_SIZE / 2))\n  {\n    ecma_property_hashmap_create (obj_p);\n  }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n#if JERRY_LCACHE\n  if (property_p != NULL\n      && !ecma_is_property_lcached (property_p))\n  {\n    ecma_lcache_insert (obj_p, property_name_cp, property_p);\n  }\n#endif /* JERRY_LCACHE */\n\n  return property_p;\n}",
        "begin_line": 627,
        "end_line": 774,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_get_named_accessor_property#969",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_get_named_accessor_property (const ecma_property_value_t *prop_value_p) /**< property value reference */",
        "snippet": "ecma_getter_setter_pointers_t *\necma_get_named_accessor_property (const ecma_property_value_t *prop_value_p) /**< property value reference */\n{\n#if JERRY_CPOINTER_32_BIT\n  return ECMA_GET_NON_NULL_POINTER (ecma_getter_setter_pointers_t, prop_value_p->getter_setter_pair_cp);\n#else /* !JERRY_CPOINTER_32_BIT */\n  return (ecma_getter_setter_pointers_t *) &prop_value_p->getter_setter_pair;\n#endif /* JERRY_CPOINTER_32_BIT */\n}",
        "begin_line": 969,
        "end_line": 977,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_make_empty_property_descriptor#1226",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_make_empty_property_descriptor (void)",
        "snippet": "ecma_property_descriptor_t\necma_make_empty_property_descriptor (void)\n{\n  ecma_property_descriptor_t prop_desc;\n\n  prop_desc.flags = 0;\n  prop_desc.value = ECMA_VALUE_UNDEFINED;\n  prop_desc.get_p = NULL;\n  prop_desc.set_p = NULL;\n\n  return prop_desc;\n}",
        "begin_line": 1226,
        "end_line": 1237,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_op_ordinary_object_set_extensible#222",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_op_ordinary_object_set_extensible (ecma_object_t *object_p) /**< object */",
        "snippet": "extern inline void\necma_op_ordinary_object_set_extensible (ecma_object_t *object_p) /**< object */\n{\n  JERRY_ASSERT (object_p != NULL);\n  JERRY_ASSERT (!ecma_is_lexical_environment (object_p));\n\n  object_p->type_flags_refs |= ECMA_OBJECT_FLAG_EXTENSIBLE;\n}",
        "begin_line": 222,
        "end_line": 229,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_script_deref#1412",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_script_deref (ecma_value_t script_value) /**< script value */",
        "snippet": "void\necma_script_deref (ecma_value_t script_value) /**< script value */\n{\n  cbc_script_t *script_p = ECMA_GET_INTERNAL_VALUE_POINTER (cbc_script_t, script_value);\n  script_p->refs_and_type -= CBC_SCRIPT_REF_ONE;\n\n  if (script_p->refs_and_type >= CBC_SCRIPT_REF_ONE)\n  {\n    return;\n  }\n\n  size_t script_size = sizeof (cbc_script_t);\n  uint32_t type = script_p->refs_and_type;\n\n  if (type & CBC_SCRIPT_HAS_USER_VALUE)\n  {\n    script_size += sizeof (ecma_value_t);\n\n    if (!(type & CBC_SCRIPT_USER_VALUE_IS_OBJECT))\n    {\n      ecma_value_t user_value = CBC_SCRIPT_GET_USER_VALUE (script_p);\n\n      JERRY_ASSERT (!ecma_is_value_object (user_value));\n      ecma_free_value (user_value);\n    }\n  }\n\n#if JERRY_RESOURCE_NAME\n  ecma_deref_ecma_string (ecma_get_string_from_value (script_p->resource_name));\n#endif /* JERRY_RESOURCE_NAME */\n\n#if JERRY_MODULE_SYSTEM\n  if (type & CBC_SCRIPT_HAS_IMPORT_META)\n  {\n    JERRY_ASSERT (!(type & CBC_SCRIPT_HAS_FUNCTION_ARGUMENTS));\n    JERRY_ASSERT (ecma_is_value_object (CBC_SCRIPT_GET_IMPORT_META (script_p, type)));\n\n    script_size += sizeof (ecma_value_t);\n  }\n#endif /* JERRY_MODULE_SYSTEM */\n\n#if JERRY_FUNCTION_TO_STRING\n  ecma_deref_ecma_string (ecma_get_string_from_value (script_p->source_code));\n\n  if (type & CBC_SCRIPT_HAS_FUNCTION_ARGUMENTS)\n  {\n    ecma_deref_ecma_string (ecma_get_string_from_value (CBC_SCRIPT_GET_FUNCTION_ARGUMENTS (script_p, type)));\n    script_size += sizeof (ecma_value_t);\n  }\n#endif /* JERRY_FUNCTION_TO_STRING */\n\n  jmem_heap_free_block (script_p, script_size);\n}",
        "begin_line": 1412,
        "end_line": 1464,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_set_named_accessor_property_setter#1002",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_set_named_accessor_property_setter (ecma_object_t *object_p, /**< the property's container */                                          ecma_property_value_t *prop_value_p, /**< property value reference */                                          ecma_object_t *setter_p) /**< setter object */",
        "snippet": "void\necma_set_named_accessor_property_setter (ecma_object_t *object_p, /**< the property's container */\n                                         ecma_property_value_t *prop_value_p, /**< property value reference */\n                                         ecma_object_t *setter_p) /**< setter object */\n{\n  ecma_assert_object_contains_the_property (object_p, prop_value_p, false);\n\n#if JERRY_CPOINTER_32_BIT\n  ecma_getter_setter_pointers_t *getter_setter_pair_p;\n  getter_setter_pair_p = ECMA_GET_NON_NULL_POINTER (ecma_getter_setter_pointers_t,\n                                                    prop_value_p->getter_setter_pair_cp);\n  ECMA_SET_POINTER (getter_setter_pair_p->setter_cp, setter_p);\n#else /* !JERRY_CPOINTER_32_BIT */\n  ECMA_SET_POINTER (prop_value_p->getter_setter_pair.setter_cp, setter_p);\n#endif /* JERRY_CPOINTER_32_BIT */\n}",
        "begin_line": 1002,
        "end_line": 1017,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-init-finalize.ecma_finalize#71",
        "src_path": "jerry-core/ecma/base/ecma-init-finalize.c",
        "class_name": "jerry-core.ecma.base.ecma-init-finalize",
        "signature": "jerry-core.ecma.base.ecma-init-finalize.ecma_finalize (void)",
        "snippet": "void\necma_finalize (void)\n{\n#if JERRY_ESNEXT\n  JERRY_ASSERT (JERRY_CONTEXT (current_new_target_p) == NULL);\n#endif /* JERRY_ESNEXT */\n\n  ecma_finalize_global_environment ();\n  uint8_t runs = 0;\n\n  do\n  {\n    ecma_gc_run ();\n    if (++runs >= JERRY_GC_LOOP_LIMIT)\n    {\n      jerry_fatal (ERR_UNTERMINATED_GC_LOOPS);\n    }\n  }\n  while (JERRY_CONTEXT (ecma_gc_new_objects) != 0);\n\n#if JERRY_ESNEXT\n  jmem_cpointer_t *global_symbols_cp = JERRY_CONTEXT (global_symbols_cp);\n\n  for (uint32_t i = 0; i < ECMA_BUILTIN_GLOBAL_SYMBOL_COUNT; i++)\n  {\n    if (global_symbols_cp[i] != JMEM_CP_NULL)\n    {\n      ecma_deref_ecma_string (ECMA_GET_NON_NULL_POINTER (ecma_string_t, global_symbols_cp[i]));\n    }\n  }\n#endif /* JERRY_ESNEXT */\n\n  ecma_finalize_lit_storage ();\n}",
        "begin_line": 71,
        "end_line": 104,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-init-finalize.ecma_init#40",
        "src_path": "jerry-core/ecma/base/ecma-init-finalize.c",
        "class_name": "jerry-core.ecma.base.ecma-init-finalize",
        "signature": "jerry-core.ecma.base.ecma-init-finalize.ecma_init (void)",
        "snippet": "void\necma_init (void)\n{\n#if (JERRY_GC_MARK_LIMIT != 0)\n  JERRY_CONTEXT (ecma_gc_mark_recursion_limit) = JERRY_GC_MARK_LIMIT;\n#endif /* (JERRY_GC_MARK_LIMIT != 0) */\n\n  ecma_init_global_environment ();\n\n#if JERRY_PROPERTY_HASHMAP\n  JERRY_CONTEXT (ecma_prop_hashmap_alloc_state) = ECMA_PROP_HASHMAP_ALLOC_ON;\n  JERRY_CONTEXT (status_flags) &= (uint32_t) ~ECMA_STATUS_HIGH_PRESSURE_GC;\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n#if (JERRY_STACK_LIMIT != 0)\n  volatile int sp;\n  JERRY_CONTEXT (stack_base) = (uintptr_t) &sp;\n#endif /* (JERRY_STACK_LIMIT != 0) */\n\n#if JERRY_ESNEXT\n  ecma_job_queue_init ();\n#endif /* JERRY_ESNEXT */\n\n#if JERRY_ESNEXT\n  JERRY_CONTEXT (current_new_target_p) = NULL;\n#endif /* JERRY_ESNEXT */\n}",
        "begin_line": 40,
        "end_line": 66,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-literal-storage.ecma_finalize_lit_storage#148",
        "src_path": "jerry-core/ecma/base/ecma-literal-storage.c",
        "class_name": "jerry-core.ecma.base.ecma-literal-storage",
        "signature": "jerry-core.ecma.base.ecma-literal-storage.ecma_finalize_lit_storage (void)",
        "snippet": "void\necma_finalize_lit_storage (void)\n{\n#if JERRY_ESNEXT\n  ecma_free_symbol_list (JERRY_CONTEXT (symbol_list_first_cp));\n#endif /* JERRY_ESNEXT */\n  ecma_free_string_list (JERRY_CONTEXT (string_list_first_cp));\n  ecma_free_number_list (JERRY_CONTEXT (number_list_first_cp));\n#if JERRY_BUILTIN_BIGINT\n  ecma_free_bigint_list (JERRY_CONTEXT (bigint_list_first_cp));\n#endif /* JERRY_BUILTIN_BIGINT */\n}",
        "begin_line": 148,
        "end_line": 159,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-literal-storage.ecma_find_or_create_literal_number#242",
        "src_path": "jerry-core/ecma/base/ecma-literal-storage.c",
        "class_name": "jerry-core.ecma.base.ecma-literal-storage",
        "signature": "jerry-core.ecma.base.ecma-literal-storage.ecma_find_or_create_literal_number (ecma_number_t number_arg) /**< number to be searched */",
        "snippet": "ecma_value_t\necma_find_or_create_literal_number (ecma_number_t number_arg) /**< number to be searched */\n{\n  ecma_value_t num = ecma_make_number_value (number_arg);\n\n  if (ecma_is_value_integer_number (num))\n  {\n    return num;\n  }\n\n  JERRY_ASSERT (ecma_is_value_float_number (num));\n\n  jmem_cpointer_t number_list_cp = JERRY_CONTEXT (number_list_first_cp);\n  jmem_cpointer_t *empty_cpointer_p = NULL;\n\n  while (number_list_cp != JMEM_CP_NULL)\n  {\n    ecma_lit_storage_item_t *number_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t,\n                                                                           number_list_cp);\n\n    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)\n    {\n      if (number_list_p->values[i] == JMEM_CP_NULL)\n      {\n        if (empty_cpointer_p == NULL)\n        {\n          empty_cpointer_p = number_list_p->values + i;\n        }\n      }\n      else\n      {\n        ecma_number_t *number_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_number_t,\n                                                                number_list_p->values[i]);\n\n        if (*number_p == number_arg)\n        {\n          ecma_free_value (num);\n          return ecma_make_float_value (number_p);\n        }\n      }\n    }\n\n    number_list_cp = number_list_p->next_cp;\n  }\n\n  jmem_cpointer_t result;\n  JMEM_CP_SET_NON_NULL_POINTER (result, ecma_get_pointer_from_float_value (num));\n\n  if (empty_cpointer_p != NULL)\n  {\n    *empty_cpointer_p = result;\n    return num;\n  }\n\n  ecma_lit_storage_item_t *new_item_p;\n  new_item_p = (ecma_lit_storage_item_t *) jmem_pools_alloc (sizeof (ecma_lit_storage_item_t));\n\n  new_item_p->values[0] = result;\n  for (int i = 1; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)\n  {\n    new_item_p->values[i] = JMEM_CP_NULL;\n  }\n\n  new_item_p->next_cp = JERRY_CONTEXT (number_list_first_cp);\n  JMEM_CP_SET_NON_NULL_POINTER (JERRY_CONTEXT (number_list_first_cp), new_item_p);\n\n  return num;\n}",
        "begin_line": 242,
        "end_line": 309,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-literal-storage.ecma_find_or_create_literal_string#166",
        "src_path": "jerry-core/ecma/base/ecma-literal-storage.c",
        "class_name": "jerry-core.ecma.base.ecma-literal-storage",
        "signature": "jerry-core.ecma.base.ecma-literal-storage.ecma_find_or_create_literal_string (const lit_utf8_byte_t *chars_p, /**< string to be searched */                                     lit_utf8_size_t size, /**< size of the string */                                     bool is_ascii) /**< encode of the string */",
        "snippet": "ecma_value_t\necma_find_or_create_literal_string (const lit_utf8_byte_t *chars_p, /**< string to be searched */\n                                    lit_utf8_size_t size, /**< size of the string */\n                                    bool is_ascii) /**< encode of the string */\n{\n  ecma_string_t *string_p = (is_ascii ? ecma_new_ecma_string_from_ascii (chars_p, size)\n                                      : ecma_new_ecma_string_from_utf8 (chars_p, size));\n\n  if (ECMA_IS_DIRECT_STRING (string_p))\n  {\n    return ecma_make_string_value (string_p);\n  }\n\n  jmem_cpointer_t string_list_cp = JERRY_CONTEXT (string_list_first_cp);\n  jmem_cpointer_t *empty_cpointer_p = NULL;\n\n  while (string_list_cp != JMEM_CP_NULL)\n  {\n    ecma_lit_storage_item_t *string_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t, string_list_cp);\n\n    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)\n    {\n      if (string_list_p->values[i] == JMEM_CP_NULL)\n      {\n        if (empty_cpointer_p == NULL)\n        {\n          empty_cpointer_p = string_list_p->values + i;\n        }\n      }\n      else\n      {\n        ecma_string_t *value_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_string_t,\n                                                               string_list_p->values[i]);\n\n        if (ecma_compare_ecma_strings (string_p, value_p))\n        {\n          /* Return with string if found in the list. */\n          ecma_deref_ecma_string (string_p);\n          return ecma_make_string_value (value_p);\n        }\n      }\n    }\n\n    string_list_cp = string_list_p->next_cp;\n  }\n\n  ECMA_SET_STRING_AS_STATIC (string_p);\n  jmem_cpointer_t result;\n  JMEM_CP_SET_NON_NULL_POINTER (result, string_p);\n\n  if (empty_cpointer_p != NULL)\n  {\n    *empty_cpointer_p = result;\n    return ecma_make_string_value (string_p);\n  }\n\n  ecma_lit_storage_item_t *new_item_p;\n  new_item_p = (ecma_lit_storage_item_t *) jmem_pools_alloc (sizeof (ecma_lit_storage_item_t));\n\n  new_item_p->values[0] = result;\n  for (int i = 1; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)\n  {\n    new_item_p->values[i] = JMEM_CP_NULL;\n  }\n\n  new_item_p->next_cp = JERRY_CONTEXT (string_list_first_cp);\n  JMEM_CP_SET_NON_NULL_POINTER (JERRY_CONTEXT (string_list_first_cp), new_item_p);\n\n  return ecma_make_string_value (string_p);\n}",
        "begin_line": 166,
        "end_line": 235,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-literal-storage.ecma_free_number_list#91",
        "src_path": "jerry-core/ecma/base/ecma-literal-storage.c",
        "class_name": "jerry-core.ecma.base.ecma-literal-storage",
        "signature": "jerry-core.ecma.base.ecma-literal-storage.ecma_free_number_list (jmem_cpointer_t number_list_cp) /**< number list */",
        "snippet": "static void\necma_free_number_list (jmem_cpointer_t number_list_cp) /**< number list */\n{\n  while (number_list_cp != JMEM_CP_NULL)\n  {\n    ecma_lit_storage_item_t *number_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t,\n                                                                           number_list_cp);\n\n    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)\n    {\n      if (number_list_p->values[i] != JMEM_CP_NULL)\n      {\n        ecma_dealloc_number (JMEM_CP_GET_NON_NULL_POINTER (ecma_number_t, number_list_p->values[i]));\n      }\n    }\n\n    jmem_cpointer_t next_item_cp = number_list_p->next_cp;\n    jmem_pools_free (number_list_p, sizeof (ecma_lit_storage_item_t));\n    number_list_cp = next_item_cp;\n  }\n}",
        "begin_line": 91,
        "end_line": 111,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-literal-storage.ecma_free_string_list#63",
        "src_path": "jerry-core/ecma/base/ecma-literal-storage.c",
        "class_name": "jerry-core.ecma.base.ecma-literal-storage",
        "signature": "jerry-core.ecma.base.ecma-literal-storage.ecma_free_string_list (jmem_cpointer_t string_list_cp) /**< string list */",
        "snippet": "static void\necma_free_string_list (jmem_cpointer_t string_list_cp) /**< string list */\n{\n  while (string_list_cp != JMEM_CP_NULL)\n  {\n    ecma_lit_storage_item_t *string_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t, string_list_cp);\n\n    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)\n    {\n      if (string_list_p->values[i] != JMEM_CP_NULL)\n      {\n        ecma_string_t *string_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_string_t,\n                                                                string_list_p->values[i]);\n\n        JERRY_ASSERT (ECMA_STRING_IS_REF_EQUALS_TO_ONE (string_p));\n        ecma_destroy_ecma_string (string_p);\n      }\n    }\n\n    jmem_cpointer_t next_item_cp = string_list_p->next_cp;\n    jmem_pools_free (string_list_p, sizeof (ecma_lit_storage_item_t));\n    string_list_cp = next_item_cp;\n  }\n}",
        "begin_line": 63,
        "end_line": 86,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtin-function-prototype.ecma_builtin_function_prototype_dispatch_routine#526",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtin-function-prototype.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtin-function-prototype",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtin-function-prototype.ecma_builtin_function_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */                                                   ecma_value_t this_arg, /**< 'this' argument value */                                                   const ecma_value_t arguments_list_p[], /**< list of arguments                                                                                           *   passed to routine */                                                   uint32_t arguments_number) /**< length of arguments' list */",
        "snippet": "ecma_value_t\necma_builtin_function_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine identifier */\n                                                  ecma_value_t this_arg, /**< 'this' argument value */\n                                                  const ecma_value_t arguments_list_p[], /**< list of arguments\n                                                                                          *   passed to routine */\n                                                  uint32_t arguments_number) /**< length of arguments' list */\n{\n  if (!ecma_op_is_callable (this_arg))\n  {\n#if JERRY_ESNEXT\n    if (JERRY_UNLIKELY (builtin_routine_id == ECMA_FUNCTION_PROTOTYPE_SYMBOL_HAS_INSTANCE))\n    {\n      return ECMA_VALUE_FALSE;\n    }\n#endif /* JERRY_ESNEXT */\n\n    return ecma_raise_type_error (ECMA_ERR_MSG (\"Argument 'this' is not a function\"));\n  }\n\n  ecma_object_t *func_obj_p = ecma_get_object_from_value (this_arg);\n\n  switch (builtin_routine_id)\n  {\n    case ECMA_FUNCTION_PROTOTYPE_TO_STRING:\n    {\n      return ecma_builtin_function_prototype_object_to_string (func_obj_p);\n    }\n    case ECMA_FUNCTION_PROTOTYPE_APPLY:\n    {\n      return ecma_builtin_function_prototype_object_apply (func_obj_p,\n                                                           arguments_list_p[0],\n                                                           arguments_list_p[1]);\n    }\n    case ECMA_FUNCTION_PROTOTYPE_CALL:\n    {\n      return ecma_builtin_function_prototype_object_call (func_obj_p, arguments_list_p, arguments_number);\n    }\n    case ECMA_FUNCTION_PROTOTYPE_BIND:\n    {\n      return ecma_builtin_function_prototype_object_bind (func_obj_p, arguments_list_p, arguments_number);\n    }\n#if JERRY_ESNEXT\n    case ECMA_FUNCTION_PROTOTYPE_SYMBOL_HAS_INSTANCE:\n    {\n      return ecma_op_object_has_instance (func_obj_p, arguments_list_p[0]);\n    }\n#endif /* JERRY_ESNEXT */\n    default:\n    {\n      JERRY_UNREACHABLE ();\n    }\n  }\n}",
        "begin_line": 526,
        "end_line": 578,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtin-function-prototype.ecma_builtin_function_prototype_object_call#284",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtin-function-prototype.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtin-function-prototype",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtin-function-prototype.ecma_builtin_function_prototype_object_call (ecma_object_t *func_obj_p, /**< this argument object */                                              const ecma_value_t *arguments_list_p, /**< list of arguments */                                              uint32_t arguments_number) /**< number of arguments */",
        "snippet": "static ecma_value_t\necma_builtin_function_prototype_object_call (ecma_object_t *func_obj_p , /**< this argument object */\n                                             const ecma_value_t *arguments_list_p, /**< list of arguments */\n                                             uint32_t arguments_number) /**< number of arguments */\n{\n  if (arguments_number == 0)\n  {\n    /* Even a 'this' argument is missing. */\n    return ecma_op_function_call (func_obj_p,\n                                  ECMA_VALUE_UNDEFINED,\n                                  NULL,\n                                  0);\n  }\n\n  return ecma_op_function_call (func_obj_p,\n                                arguments_list_p[0],\n                                arguments_list_p + 1,\n                                (uint32_t) (arguments_number - 1u));\n}",
        "begin_line": 284,
        "end_line": 302,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers.ecma_builtin_helper_def_prop#884",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtin-helpers.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers.ecma_builtin_helper_def_prop (ecma_object_t *obj_p, /**< object */                               ecma_string_t *name_p, /**< name string */                               ecma_value_t value, /**< value */                               uint32_t opts) /**< any combination of ecma_property_descriptor_status_flags_t bits */",
        "snippet": "ecma_value_t\necma_builtin_helper_def_prop (ecma_object_t *obj_p, /**< object */\n                              ecma_string_t *name_p, /**< name string */\n                              ecma_value_t value, /**< value */\n                              uint32_t opts) /**< any combination of ecma_property_descriptor_status_flags_t bits */\n{\n  ecma_property_descriptor_t prop_desc;\n\n  prop_desc.flags = (uint16_t) (ECMA_NAME_DATA_PROPERTY_DESCRIPTOR_BITS | opts);\n\n  prop_desc.value = value;\n\n  return ecma_op_object_define_own_property (obj_p,\n                                             name_p,\n                                             &prop_desc);\n}",
        "begin_line": 884,
        "end_line": 899,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers.ecma_builtin_helper_def_prop_by_index#799",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtin-helpers.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers.ecma_builtin_helper_def_prop_by_index (ecma_object_t *obj_p, /**< object */                                        ecma_length_t index, /**< property index */                                        ecma_value_t value, /**< value */                                        uint32_t opts) /**< any combination of ecma_property_flag_t bits */",
        "snippet": "ecma_value_t\necma_builtin_helper_def_prop_by_index (ecma_object_t *obj_p, /**< object */\n                                       ecma_length_t index, /**< property index */\n                                       ecma_value_t value, /**< value */\n                                       uint32_t opts) /**< any combination of ecma_property_flag_t bits */\n{\n  if (JERRY_LIKELY (index <= ECMA_DIRECT_STRING_MAX_IMM))\n  {\n    return ecma_builtin_helper_def_prop (obj_p,\n                                         ECMA_CREATE_DIRECT_UINT32_STRING (index),\n                                         value,\n                                         opts);\n  }\n\n  ecma_string_t *index_str_p = ecma_new_ecma_string_from_length (index);\n  ecma_value_t ret_value = ecma_builtin_helper_def_prop (obj_p, index_str_p, value, opts);\n  ecma_deref_ecma_string (index_str_p);\n\n  return ret_value;\n}",
        "begin_line": 799,
        "end_line": 818,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_create_global_object#557",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_create_global_object (void)",
        "snippet": "ecma_global_object_t *\necma_builtin_create_global_object (void)\n{\n  ecma_builtin_descriptor_t builtin_desc = ecma_builtin_descriptors[ECMA_BUILTIN_ID_GLOBAL];\n  ecma_builtin_id_t prototype_builtin_id = (ecma_builtin_id_t) (builtin_desc >> ECMA_BUILTIN_PROTOTYPE_ID_SHIFT);\n  ecma_object_type_t obj_type = (ecma_object_type_t) (builtin_desc & ECMA_BUILTIN_OBJECT_TYPE_MASK);\n  size_t property_count = ecma_builtin_get_property_count (ECMA_BUILTIN_ID_GLOBAL);\n\n  JERRY_ASSERT (prototype_builtin_id != ECMA_BUILTIN_ID__COUNT);\n  JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL);\n\n  /* Whenever this assertion fails, the size of extra_instantiated_bitset in ecma_global_object_t\n   * must be increased and 32 must be added to these constants. Furthermore the new uint32 item\n   * must be set to zero. */\n#if JERRY_BUILTIN_REALMS\n  JERRY_ASSERT (property_count <= ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE + 64);\n#else /* !JERRY_BUILTIN_REALMS */\n  JERRY_ASSERT (property_count <= ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE + 32);\n#endif /* JERRY_BUILTIN_REALMS */\n\n  ecma_object_t *object_p = ecma_create_object (NULL, sizeof (ecma_global_object_t), obj_type);\n\n  ecma_op_ordinary_object_set_extensible (object_p);\n\n  ecma_global_object_t *global_object_p = (ecma_global_object_t *) object_p;\n\n  global_object_p->extended_object.u.built_in.id = (uint8_t) ECMA_BUILTIN_ID_GLOBAL;\n  global_object_p->extended_object.u.built_in.routine_id = 0;\n  /* Bitset size is ignored by the gc. */\n  global_object_p->extended_object.u.built_in.u.length_and_bitset_size = 0;\n  global_object_p->extended_object.u.built_in.u2.instantiated_bitset[0] = 0;\n  global_object_p->extra_instantiated_bitset[0] = 0;\n#if JERRY_BUILTIN_REALMS\n  ECMA_SET_INTERNAL_VALUE_POINTER (global_object_p->extended_object.u.built_in.realm_value, global_object_p);\n  global_object_p->extra_realms_bitset = 0;\n  global_object_p->this_binding = ecma_make_object_value (object_p);\n#else /* !JERRY_BUILTIN_REALMS */\n  global_object_p->extended_object.u.built_in.continue_instantiated_bitset[0] = 0;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  memset (global_object_p->builtin_objects, 0, (sizeof (jmem_cpointer_t) * ECMA_BUILTIN_OBJECTS_COUNT));\n\n  /* Temporary self reference for GC mark. */\n  ECMA_SET_NON_NULL_POINTER (global_object_p->global_env_cp, object_p);\n#if JERRY_ESNEXT\n  global_object_p->global_scope_cp = global_object_p->global_env_cp;\n#endif /* JERRY_ESNEXT */\n\n  ecma_object_t *global_lex_env_p = ecma_create_object_lex_env (NULL, object_p);\n  ECMA_SET_NON_NULL_POINTER (global_object_p->global_env_cp, global_lex_env_p);\n#if JERRY_ESNEXT\n  global_object_p->global_scope_cp = global_object_p->global_env_cp;\n#endif /* JERRY_ESNEXT */\n  ecma_deref_object (global_lex_env_p);\n\n  ecma_object_t *prototype_object_p;\n  prototype_object_p = ecma_instantiate_builtin (global_object_p, prototype_builtin_id);\n  JERRY_ASSERT (prototype_object_p != NULL);\n\n  ECMA_SET_NON_NULL_POINTER (object_p->u2.prototype_cp, prototype_object_p);\n\n  return global_object_p;\n}",
        "begin_line": 557,
        "end_line": 619,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_dispatch_call#1624",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_dispatch_call (ecma_object_t *obj_p, /**< built-in object */                             ecma_value_t this_arg_value, /**< 'this' argument value */                             const ecma_value_t *arguments_list_p, /**< arguments list */                             uint32_t arguments_list_len) /**< arguments list length */",
        "snippet": "ecma_value_t\necma_builtin_dispatch_call (ecma_object_t *obj_p, /**< built-in object */\n                            ecma_value_t this_arg_value, /**< 'this' argument value */\n                            const ecma_value_t *arguments_list_p, /**< arguments list */\n                            uint32_t arguments_list_len) /**< arguments list length */\n{\n  JERRY_ASSERT (ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);\n\n  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;\n\n  if (ecma_builtin_function_is_routine (obj_p))\n  {\n#if JERRY_ESNEXT\n    if (JERRY_UNLIKELY (ext_obj_p->u.built_in.id == ECMA_BUILTIN_ID_HANDLER))\n    {\n      ecma_builtin_handler_t handler = ecma_builtin_handler_get (ext_obj_p->u.built_in.routine_id);\n      return handler (obj_p, arguments_list_p, arguments_list_len);\n    }\n#endif /* !JERRY_ESNEXT */\n\n    return ecma_builtin_dispatch_routine (ext_obj_p,\n                                          this_arg_value,\n                                          arguments_list_p,\n                                          arguments_list_len);\n  }\n\n  ecma_builtin_id_t builtin_object_id = ext_obj_p->u.built_in.id;\n  JERRY_ASSERT (builtin_object_id < sizeof (ecma_builtin_call_functions) / sizeof (ecma_builtin_dispatch_call_t));\n  return ecma_builtin_call_functions[builtin_object_id] (arguments_list_p, arguments_list_len);\n}",
        "begin_line": 1624,
        "end_line": 1653,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_dispatch_routine#1580",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_dispatch_routine (ecma_extended_object_t *func_obj_p, /**< builtin object */                                ecma_value_t this_arg_value, /**< 'this' argument value */                                const ecma_value_t *arguments_list_p, /**< list of arguments passed to routine */                                uint32_t arguments_list_len) /**< length of arguments' list */",
        "snippet": "static ecma_value_t\necma_builtin_dispatch_routine (ecma_extended_object_t *func_obj_p, /**< builtin object */\n                               ecma_value_t this_arg_value, /**< 'this' argument value */\n                               const ecma_value_t *arguments_list_p, /**< list of arguments passed to routine */\n                               uint32_t arguments_list_len) /**< length of arguments' list */\n{\n  JERRY_ASSERT (ecma_builtin_function_is_routine ((ecma_object_t *) func_obj_p));\n\n  ecma_value_t padded_arguments_list_p[3] = { ECMA_VALUE_UNDEFINED, ECMA_VALUE_UNDEFINED, ECMA_VALUE_UNDEFINED };\n\n  if (arguments_list_len <= 2)\n  {\n    switch (arguments_list_len)\n    {\n      case 2:\n      {\n        padded_arguments_list_p[1] = arguments_list_p[1];\n        /* FALLTHRU */\n      }\n      case 1:\n      {\n        padded_arguments_list_p[0] = arguments_list_p[0];\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (arguments_list_len == 0);\n      }\n    }\n\n    arguments_list_p = padded_arguments_list_p;\n  }\n\n  return ecma_builtin_routines[func_obj_p->u.built_in.id] (func_obj_p->u.built_in.routine_id,\n                                                           this_arg_value,\n                                                           arguments_list_p,\n                                                           arguments_list_len);\n}",
        "begin_line": 1580,
        "end_line": 1617,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_get#629",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_get (ecma_builtin_id_t builtin_id) /**< id of built-in to check on */",
        "snippet": "ecma_object_t *\necma_builtin_get (ecma_builtin_id_t builtin_id) /**< id of built-in to check on */\n{\n  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_OBJECTS_COUNT);\n\n  ecma_global_object_t *global_object_p = (ecma_global_object_t *) ecma_builtin_get_global ();\n  jmem_cpointer_t *builtin_p = global_object_p->builtin_objects + builtin_id;\n\n  if (JERRY_UNLIKELY (*builtin_p == JMEM_CP_NULL))\n  {\n    return ecma_instantiate_builtin (global_object_p, builtin_id);\n  }\n\n  return ECMA_GET_NON_NULL_POINTER (ecma_object_t, *builtin_p);\n}",
        "begin_line": 629,
        "end_line": 643,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_get_property_count#257",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_get_property_count (ecma_builtin_id_t builtin_id) /**< built-in ID */",
        "snippet": "static size_t\necma_builtin_get_property_count (ecma_builtin_id_t builtin_id) /**< built-in ID */\n{\n  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);\n  const ecma_builtin_property_descriptor_t *property_list_p = ecma_builtin_property_list_references[builtin_id];\n\n  const ecma_builtin_property_descriptor_t *curr_property_p = property_list_p;\n\n  while (curr_property_p->magic_string_id != LIT_MAGIC_STRING__COUNT)\n  {\n    curr_property_p++;\n  }\n\n  return (size_t) (curr_property_p - property_list_p);\n}",
        "begin_line": 257,
        "end_line": 271,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_is_global#279",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_is_global (ecma_object_t *object_p) /**< pointer to an object */",
        "snippet": "bool\necma_builtin_is_global (ecma_object_t *object_p) /**< pointer to an object */\n{\n  return (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL\n          && ((ecma_extended_object_t *) object_p)->u.built_in.id == ECMA_BUILTIN_ID_GLOBAL);\n}",
        "begin_line": 279,
        "end_line": 284,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_make_function_object_for_routine#702",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_make_function_object_for_routine (ecma_object_t *builtin_object_p, /**< builtin object */                                                uint8_t routine_id, /**< builtin-wide identifier of the built-in                                                                     *   object's routine property */                                                uint32_t routine_index, /**< property descriptor index of routine */                                                uint8_t flags) /**< see also: ecma_builtin_routine_flags */",
        "snippet": "static ecma_object_t *\necma_builtin_make_function_object_for_routine (ecma_object_t *builtin_object_p, /**< builtin object */\n                                               uint8_t routine_id, /**< builtin-wide identifier of the built-in\n                                                                    *   object's routine property */\n                                               uint32_t routine_index, /**< property descriptor index of routine */\n                                               uint8_t flags) /**< see also: ecma_builtin_routine_flags */\n{\n  ecma_object_t *prototype_obj_p = ecma_builtin_get_from_builtin (builtin_object_p,\n                                                                  ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);\n\n  size_t ext_object_size = sizeof (ecma_extended_object_t);\n\n  ecma_object_t *func_obj_p = ecma_create_object (prototype_obj_p,\n                                                  ext_object_size,\n                                                  ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);\n\n  JERRY_ASSERT (routine_id > 0);\n  JERRY_ASSERT (routine_index <= UINT8_MAX);\n\n  ecma_built_in_props_t *built_in_props_p;\n\n  if (ECMA_BUILTIN_IS_EXTENDED_BUILT_IN (ecma_get_object_type (builtin_object_p)))\n  {\n    built_in_props_p = &((ecma_extended_built_in_object_t *) builtin_object_p)->built_in;\n  }\n  else\n  {\n    built_in_props_p = &((ecma_extended_object_t *) builtin_object_p)->u.built_in;\n  }\n\n  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) func_obj_p;\n  ext_func_obj_p->u.built_in.id = built_in_props_p->id;\n  ext_func_obj_p->u.built_in.routine_id = routine_id;\n  ext_func_obj_p->u.built_in.u.routine_index = (uint8_t) routine_index;\n  ext_func_obj_p->u.built_in.u2.routine_flags = flags;\n\n#if JERRY_BUILTIN_REALMS\n  ext_func_obj_p->u.built_in.realm_value = built_in_props_p->realm_value;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  return func_obj_p;\n}",
        "begin_line": 702,
        "end_line": 743,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_routine_try_to_instantiate_property#838",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_routine_try_to_instantiate_property (ecma_object_t *object_p, /**< object */                                                   ecma_string_t *property_name_p) /**< property name */",
        "snippet": "ecma_property_t *\necma_builtin_routine_try_to_instantiate_property (ecma_object_t *object_p, /**< object */\n                                                  ecma_string_t *property_name_p) /**< property name */\n{\n  JERRY_ASSERT (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION\n                && ecma_builtin_function_is_routine (object_p));\n\n  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;\n\n#if JERRY_ESNEXT\n  if (JERRY_UNLIKELY (ext_func_p->u.built_in.id == ECMA_BUILTIN_ID_HANDLER))\n  {\n    return ecma_builtin_native_handler_try_to_instantiate_property (object_p, property_name_p);\n  }\n#endif /* !JERRY_ESNEXT */\n\n  if (ecma_string_is_length (property_name_p))\n  {\n    /*\n     * Lazy instantiation of 'length' property\n     */\n    ecma_property_t *len_prop_p;\n\n#if JERRY_ESNEXT\n    uint8_t *bitset_p = &ext_func_p->u.built_in.u2.routine_flags;\n\n    if (*bitset_p & ECMA_BUILTIN_ROUTINE_LENGTH_INITIALIZED)\n    {\n      /* length property was already instantiated */\n      return NULL;\n    }\n\n    /* We mark that the property was lazily instantiated,\n     * as it is configurable and so can be deleted (ECMA-262 v6, 19.2.4.1) */\n    ecma_property_value_t *len_prop_value_p = ecma_create_named_data_property (object_p,\n                                                                               property_name_p,\n                                                                               ECMA_PROPERTY_BUILT_IN_CONFIGURABLE,\n                                                                               &len_prop_p);\n#else /* !JERRY_ESNEXT */\n    /* We don't need to mark that the property was already lazy instantiated,\n     * as it is non-configurable and so can't be deleted (ECMA-262 v5, 13.2.5) */\n    ecma_property_value_t *len_prop_value_p = ecma_create_named_data_property (object_p,\n                                                                               property_name_p,\n                                                                               ECMA_PROPERTY_BUILT_IN_FIXED,\n                                                                               &len_prop_p);\n#endif /* JERRY_ESNEXT */\n\n    uint8_t length = 0;\n\n    if (ext_func_p->u.built_in.u2.routine_flags & ECMA_BUILTIN_ROUTINE_SETTER)\n    {\n      length = 1;\n    }\n    else if (!(ext_func_p->u.built_in.u2.routine_flags & ECMA_BUILTIN_ROUTINE_GETTER))\n    {\n      uint8_t routine_index = ext_func_p->u.built_in.u.routine_index;\n      const ecma_builtin_property_descriptor_t *property_list_p;\n\n      property_list_p = ecma_builtin_property_list_references[ext_func_p->u.built_in.id];\n\n      JERRY_ASSERT (property_list_p[routine_index].type == ECMA_BUILTIN_PROPERTY_ROUTINE);\n\n      length = ECMA_GET_ROUTINE_LENGTH (property_list_p[routine_index].value);\n    }\n\n    len_prop_value_p->value = ecma_make_integer_value (length);\n    return len_prop_p;\n  }\n\n#if JERRY_ESNEXT\n  /*\n   * Lazy instantiation of 'name' property\n   */\n  if (ecma_compare_ecma_string_to_magic_id (property_name_p, LIT_MAGIC_STRING_NAME))\n  {\n    uint8_t *bitset_p = &ext_func_p->u.built_in.u2.routine_flags;\n\n    if (*bitset_p & ECMA_BUILTIN_ROUTINE_NAME_INITIALIZED)\n    {\n      /* name property was already instantiated */\n      return NULL;\n    }\n\n    /* We mark that the property was lazily instantiated */\n    ecma_property_t *name_prop_p;\n    ecma_property_value_t *name_prop_value_p = ecma_create_named_data_property (object_p,\n                                                                                property_name_p,\n                                                                                ECMA_PROPERTY_BUILT_IN_CONFIGURABLE,\n                                                                                &name_prop_p);\n\n    uint8_t routine_index = ext_func_p->u.built_in.u.routine_index;\n    const ecma_builtin_property_descriptor_t *property_list_p;\n\n    property_list_p = ecma_builtin_property_list_references[ext_func_p->u.built_in.id];\n\n    JERRY_ASSERT (property_list_p[routine_index].type == ECMA_BUILTIN_PROPERTY_ROUTINE\n                  || property_list_p[routine_index].type == ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_WRITE\n                  || property_list_p[routine_index].type == ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_ONLY);\n\n    lit_magic_string_id_t name_id = property_list_p[routine_index].magic_string_id;\n    ecma_string_t *name_p;\n\n    if (JERRY_UNLIKELY (name_id > LIT_NON_INTERNAL_MAGIC_STRING__COUNT))\n    {\n      /* Note: Whenever new intrinsic routine is being added this mapping should be updated as well! */\n      if (JERRY_UNLIKELY (name_id == LIT_INTERNAL_MAGIC_STRING_ARRAY_PROTOTYPE_VALUES)\n          || JERRY_UNLIKELY (name_id == LIT_INTERNAL_MAGIC_STRING_TYPEDARRAY_PROTOTYPE_VALUES)\n          || JERRY_UNLIKELY (name_id == LIT_INTERNAL_MAGIC_STRING_SET_PROTOTYPE_VALUES))\n      {\n        name_p = ecma_get_magic_string (LIT_MAGIC_STRING_VALUES);\n      }\n      else if (JERRY_UNLIKELY (name_id == LIT_INTERNAL_MAGIC_STRING_MAP_PROTOTYPE_ENTRIES))\n      {\n        name_p = ecma_get_magic_string (LIT_MAGIC_STRING_ENTRIES);\n      }\n      else\n      {\n        JERRY_ASSERT (LIT_IS_GLOBAL_SYMBOL (name_id));\n        name_p = ecma_op_get_global_symbol (name_id);\n      }\n    }\n    else\n    {\n      name_p = ecma_get_magic_string (name_id);\n    }\n\n    char *prefix_p = NULL;\n    lit_utf8_size_t prefix_size = 0;\n\n    if (*bitset_p & (ECMA_BUILTIN_ROUTINE_GETTER | ECMA_BUILTIN_ROUTINE_SETTER))\n    {\n      prefix_size = 4;\n      prefix_p = (*bitset_p & ECMA_BUILTIN_ROUTINE_GETTER) ? \"get \" : \"set \";\n    }\n\n    name_prop_value_p->value = ecma_op_function_form_name (name_p, prefix_p, prefix_size);\n\n    if (JERRY_UNLIKELY (name_id > LIT_NON_INTERNAL_MAGIC_STRING__COUNT))\n    {\n      ecma_deref_ecma_string (name_p);\n    }\n\n    return name_prop_p;\n  }\n#endif /* JERRY_ESNEXT */\n\n  return NULL;\n}",
        "begin_line": 838,
        "end_line": 985,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_try_to_instantiate_property#995",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_try_to_instantiate_property (ecma_object_t *object_p, /**< object */                                           ecma_string_t *property_name_p) /**< property's name */",
        "snippet": "ecma_property_t *\necma_builtin_try_to_instantiate_property (ecma_object_t *object_p, /**< object */\n                                          ecma_string_t *property_name_p) /**< property's name */\n{\n  lit_magic_string_id_t magic_string_id = ecma_get_string_magic (property_name_p);\n\n#if JERRY_ESNEXT\n  if (JERRY_UNLIKELY (ecma_prop_name_is_symbol (property_name_p))\n      && property_name_p->u.hash & ECMA_GLOBAL_SYMBOL_FLAG)\n  {\n    magic_string_id = (property_name_p->u.hash >> ECMA_GLOBAL_SYMBOL_SHIFT);\n  }\n#endif /* JERRY_ESNEXT */\n\n  if (magic_string_id == LIT_MAGIC_STRING__COUNT)\n  {\n    return NULL;\n  }\n\n  ecma_built_in_props_t *built_in_props_p;\n  ecma_object_type_t object_type = ecma_get_object_type (object_p);\n\n  JERRY_ASSERT (object_type == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL\n                || object_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS\n                || object_type == ECMA_OBJECT_TYPE_BUILT_IN_ARRAY\n                || (object_type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION\n                    && !ecma_builtin_function_is_routine (object_p)));\n\n  if (ECMA_BUILTIN_IS_EXTENDED_BUILT_IN (object_type))\n  {\n    built_in_props_p = &((ecma_extended_built_in_object_t *) object_p)->built_in;\n  }\n  else\n  {\n    built_in_props_p = &((ecma_extended_object_t *) object_p)->u.built_in;\n  }\n\n  ecma_builtin_id_t builtin_id = (ecma_builtin_id_t) built_in_props_p->id;\n\n  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);\n\n  const ecma_builtin_property_descriptor_t *property_list_p = ecma_builtin_property_list_references[builtin_id];\n  const ecma_builtin_property_descriptor_t *curr_property_p = property_list_p;\n\n  while (curr_property_p->magic_string_id != magic_string_id)\n  {\n    if (curr_property_p->magic_string_id == LIT_MAGIC_STRING__COUNT)\n    {\n      return NULL;\n    }\n    curr_property_p++;\n  }\n\n  uint32_t index = (uint32_t) (curr_property_p - property_list_p);\n  uint8_t *bitset_p = built_in_props_p->u2.instantiated_bitset + (index >> 3);\n\n#if JERRY_BUILTIN_REALMS\n  if (index >= 8 * sizeof (uint8_t))\n  {\n    bitset_p += sizeof (ecma_value_t);\n  }\n#endif /* JERRY_BUILTIN_REALMS */\n\n  uint8_t bit_for_index = (uint8_t) (1u << (index & 0x7));\n\n  if (*bitset_p & bit_for_index)\n  {\n    /* This property was instantiated before. */\n    return NULL;\n  }\n\n  ecma_value_t value = ECMA_VALUE_EMPTY;\n  bool is_accessor = false;\n  ecma_object_t *getter_p = NULL;\n  ecma_object_t *setter_p = NULL;\n\n  switch (curr_property_p->type)\n  {\n    case ECMA_BUILTIN_PROPERTY_SIMPLE:\n    {\n      value = curr_property_p->value;\n\n#if JERRY_BUILTIN_GLOBAL_THIS\n      if (value == ECMA_VALUE_GLOBAL_THIS)\n      {\n        /* Only the global object has globalThis property. */\n        JERRY_ASSERT (ecma_builtin_is_global (object_p));\n        ecma_ref_object (object_p);\n        value = ecma_make_object_value (object_p);\n      }\n#endif /* JERRY_BUILTIN_GLOBAL_THIS */\n      break;\n    }\n    case ECMA_BUILTIN_PROPERTY_NUMBER:\n    {\n      ecma_number_t num = 0.0;\n\n      if (curr_property_p->value < ECMA_BUILTIN_NUMBER_MAX)\n      {\n        num = curr_property_p->value;\n      }\n      else if (curr_property_p->value < ECMA_BUILTIN_NUMBER_NAN)\n      {\n        static const ecma_number_t builtin_number_list[] =\n        {\n          ECMA_NUMBER_MAX_VALUE,\n          ECMA_NUMBER_MIN_VALUE,\n#if JERRY_ESNEXT\n          ECMA_NUMBER_EPSILON,\n          ECMA_NUMBER_MAX_SAFE_INTEGER,\n          ECMA_NUMBER_MIN_SAFE_INTEGER,\n#endif /* JERRY_ESNEXT */\n          ECMA_NUMBER_E,\n          ECMA_NUMBER_PI,\n          ECMA_NUMBER_LN10,\n          ECMA_NUMBER_LN2,\n          ECMA_NUMBER_LOG2E,\n          ECMA_NUMBER_LOG10E,\n          ECMA_NUMBER_SQRT2,\n          ECMA_NUMBER_SQRT_1_2,\n        };\n\n        num = builtin_number_list[curr_property_p->value - ECMA_BUILTIN_NUMBER_MAX];\n      }\n      else\n      {\n        switch (curr_property_p->value)\n        {\n          case ECMA_BUILTIN_NUMBER_POSITIVE_INFINITY:\n          {\n            num = ecma_number_make_infinity (false);\n            break;\n          }\n          case ECMA_BUILTIN_NUMBER_NEGATIVE_INFINITY:\n          {\n            num = ecma_number_make_infinity (true);\n            break;\n          }\n          default:\n          {\n            JERRY_ASSERT (curr_property_p->value == ECMA_BUILTIN_NUMBER_NAN);\n\n            num = ecma_number_make_nan ();\n            break;\n          }\n        }\n      }\n\n      value = ecma_make_number_value (num);\n      break;\n    }\n    case ECMA_BUILTIN_PROPERTY_STRING:\n    {\n      value = ecma_make_magic_string_value ((lit_magic_string_id_t) curr_property_p->value);\n      break;\n    }\n#if JERRY_ESNEXT\n    case ECMA_BUILTIN_PROPERTY_SYMBOL:\n    {\n      lit_magic_string_id_t symbol_id = (lit_magic_string_id_t) curr_property_p->value;\n\n      value = ecma_make_symbol_value (ecma_op_get_global_symbol (symbol_id));\n      break;\n    }\n    case ECMA_BUILTIN_PROPERTY_INTRINSIC_PROPERTY:\n    {\n      ecma_object_t *intrinsic_object_p = ecma_builtin_get_from_builtin (object_p, ECMA_BUILTIN_ID_INTRINSIC_OBJECT);\n      value = ecma_op_object_get_by_magic_id (intrinsic_object_p, (lit_magic_string_id_t) curr_property_p->value);\n      break;\n    }\n    case ECMA_BUILTIN_PROPERTY_ACCESSOR_BUILTIN_FUNCTION:\n    {\n      is_accessor = true;\n      uint16_t getter_id = ECMA_ACCESSOR_READ_WRITE_GET_GETTER_ID (curr_property_p->value);\n      uint16_t setter_id = ECMA_ACCESSOR_READ_WRITE_GET_SETTER_ID (curr_property_p->value);\n      getter_p = ecma_builtin_get_from_builtin (object_p, getter_id);\n      setter_p = ecma_builtin_get_from_builtin (object_p, setter_id);\n      ecma_ref_object (getter_p);\n      ecma_ref_object (setter_p);\n      break;\n    }\n#endif /* JERRY_ESNEXT */\n    case ECMA_BUILTIN_PROPERTY_OBJECT:\n    {\n      ecma_object_t *builtin_object_p;\n      builtin_object_p = ecma_builtin_get_from_builtin (object_p, (ecma_builtin_id_t) curr_property_p->value);\n      ecma_ref_object (builtin_object_p);\n      value = ecma_make_object_value (builtin_object_p);\n      break;\n    }\n    case ECMA_BUILTIN_PROPERTY_ROUTINE:\n    {\n      ecma_object_t *func_obj_p;\n      func_obj_p = ecma_builtin_make_function_object_for_routine (object_p,\n                                                                  ECMA_GET_ROUTINE_ID (curr_property_p->value),\n                                                                  index,\n                                                                  ECMA_BUILTIN_ROUTINE_NO_OPTS);\n      value = ecma_make_object_value (func_obj_p);\n      break;\n    }\n    case ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_WRITE:\n    {\n      is_accessor = true;\n      uint8_t getter_id = ECMA_ACCESSOR_READ_WRITE_GET_GETTER_ID (curr_property_p->value);\n      uint8_t setter_id = ECMA_ACCESSOR_READ_WRITE_GET_SETTER_ID (curr_property_p->value);\n      getter_p = ecma_builtin_make_function_object_for_getter_accessor (object_p, getter_id, index);\n      setter_p = ecma_builtin_make_function_object_for_setter_accessor (object_p, setter_id, index);\n      break;\n    }\n    default:\n    {\n      JERRY_ASSERT (curr_property_p->type == ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_ONLY);\n\n      is_accessor = true;\n      uint8_t getter_id = (uint8_t) curr_property_p->value;\n      getter_p = ecma_builtin_make_function_object_for_getter_accessor (object_p, getter_id, index);\n      break;\n    }\n  }\n\n  ecma_property_t *prop_p;\n\n  JERRY_ASSERT (curr_property_p->attributes & ECMA_PROPERTY_FLAG_BUILT_IN);\n\n  if (is_accessor)\n  {\n    ecma_create_named_accessor_property (object_p,\n                                         property_name_p,\n                                         getter_p,\n                                         setter_p,\n                                         curr_property_p->attributes,\n                                         &prop_p);\n\n    if (setter_p)\n    {\n      ecma_deref_object (setter_p);\n    }\n    if (getter_p)\n    {\n      ecma_deref_object (getter_p);\n    }\n  }\n  else\n  {\n    ecma_property_value_t *prop_value_p = ecma_create_named_data_property (object_p,\n                                                                           property_name_p,\n                                                                           curr_property_p->attributes,\n                                                                           &prop_p);\n    prop_value_p->value = value;\n\n    /* Reference count of objects must be decreased. */\n    ecma_deref_if_object (value);\n  }\n\n  return prop_p;\n}",
        "begin_line": 995,
        "end_line": 1250,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_instantiate_builtin#357",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_instantiate_builtin (ecma_global_object_t *global_object_p, /**< global object */                           ecma_builtin_id_t obj_builtin_id) /**< built-in id */",
        "snippet": "static ecma_object_t *\necma_instantiate_builtin (ecma_global_object_t *global_object_p, /**< global object */\n                          ecma_builtin_id_t obj_builtin_id) /**< built-in id */\n{\n  jmem_cpointer_t *builtin_objects = global_object_p->builtin_objects;\n\n  JERRY_ASSERT (obj_builtin_id < ECMA_BUILTIN_OBJECTS_COUNT);\n  JERRY_ASSERT (builtin_objects[obj_builtin_id] == JMEM_CP_NULL);\n\n  ecma_builtin_descriptor_t builtin_desc = ecma_builtin_descriptors[obj_builtin_id];\n  ecma_builtin_id_t object_prototype_builtin_id = (ecma_builtin_id_t) (builtin_desc >> ECMA_BUILTIN_PROTOTYPE_ID_SHIFT);\n\n  ecma_object_t *prototype_obj_p;\n\n  if (JERRY_UNLIKELY (object_prototype_builtin_id == ECMA_BUILTIN_ID__COUNT))\n  {\n    prototype_obj_p = NULL;\n  }\n  else\n  {\n    if (builtin_objects[object_prototype_builtin_id] == JMEM_CP_NULL)\n    {\n      ecma_instantiate_builtin (global_object_p, object_prototype_builtin_id);\n    }\n    prototype_obj_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, builtin_objects[object_prototype_builtin_id]);\n    JERRY_ASSERT (prototype_obj_p != NULL);\n  }\n\n  ecma_object_type_t obj_type = (ecma_object_type_t) (builtin_desc & ECMA_BUILTIN_OBJECT_TYPE_MASK);\n\n  JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL\n                || obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS\n                || obj_type == ECMA_OBJECT_TYPE_BUILT_IN_ARRAY\n                || obj_type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);\n\n  bool is_extended_built_in = ECMA_BUILTIN_IS_EXTENDED_BUILT_IN (obj_type);\n\n  size_t ext_object_size = (is_extended_built_in ? sizeof (ecma_extended_built_in_object_t)\n                                                 : sizeof (ecma_extended_object_t));\n\n  size_t property_count = ecma_builtin_get_property_count (obj_builtin_id);\n\n  if (property_count > ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE)\n  {\n    /* Only 64 extra properties supported at the moment.\n     * This can be extended to 256 later. */\n    JERRY_ASSERT (property_count <= (ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE + 64));\n\n    ext_object_size += sizeof (uint64_t);\n  }\n\n  ecma_object_t *obj_p = ecma_create_object (prototype_obj_p, ext_object_size, obj_type);\n\n  if (JERRY_UNLIKELY (obj_builtin_id == ECMA_BUILTIN_ID_TYPE_ERROR_THROWER))\n  {\n    ecma_op_ordinary_object_prevent_extensions (obj_p);\n  }\n  else\n  {\n    ecma_op_ordinary_object_set_extensible (obj_p);\n  }\n\n  /*\n   * [[Class]] property of built-in object is not stored explicitly.\n   *\n   * See also: ecma_object_get_class_name\n   */\n\n  ecma_built_in_props_t *built_in_props_p;\n\n  if (is_extended_built_in)\n  {\n    built_in_props_p = &((ecma_extended_built_in_object_t *) obj_p)->built_in;\n  }\n  else\n  {\n    built_in_props_p = &((ecma_extended_object_t *) obj_p)->u.built_in;\n  }\n\n  built_in_props_p->id = (uint8_t) obj_builtin_id;\n  built_in_props_p->routine_id = 0;\n  built_in_props_p->u.length_and_bitset_size = 0;\n  built_in_props_p->u2.instantiated_bitset[0] = 0;\n#if JERRY_BUILTIN_REALMS\n  ECMA_SET_INTERNAL_VALUE_POINTER (built_in_props_p->realm_value, global_object_p);\n#else /* !JERRY_BUILTIN_REALMS */\n  built_in_props_p->continue_instantiated_bitset[0] = 0;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  if (property_count > ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE)\n  {\n    built_in_props_p->u.length_and_bitset_size = 1 << ECMA_BUILT_IN_BITSET_SHIFT;\n\n    uint32_t *instantiated_bitset_p = (uint32_t *) (built_in_props_p + 1);\n    instantiated_bitset_p[0] = 0;\n    instantiated_bitset_p[1] = 0;\n  }\n\n  /** Initializing [[PrimitiveValue]] properties of built-in prototype objects */\n  switch (obj_builtin_id)\n  {\n#if JERRY_BUILTIN_ARRAY\n    case ECMA_BUILTIN_ID_ARRAY_PROTOTYPE:\n    {\n      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_ARRAY);\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      ext_object_p->u.array.length = 0;\n      ext_object_p->u.array.length_prop_and_hole_count = ECMA_PROPERTY_FLAG_WRITABLE | ECMA_PROPERTY_VIRTUAL;\n      break;\n    }\n#endif /* JERRY_BUILTIN_ARRAY */\n\n#if JERRY_BUILTIN_STRING\n    case ECMA_BUILTIN_ID_STRING_PROTOTYPE:\n    {\n      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_STRING;\n      ext_object_p->u.cls.u3.value = ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY);\n      break;\n    }\n#endif /* JERRY_BUILTIN_STRING */\n\n#if JERRY_BUILTIN_NUMBER\n    case ECMA_BUILTIN_ID_NUMBER_PROTOTYPE:\n    {\n      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_NUMBER;\n      ext_object_p->u.cls.u3.value = ecma_make_integer_value (0);\n      break;\n    }\n#endif /* JERRY_BUILTIN_NUMBER */\n\n#if JERRY_BUILTIN_BOOLEAN\n    case ECMA_BUILTIN_ID_BOOLEAN_PROTOTYPE:\n    {\n      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_BOOLEAN;\n      ext_object_p->u.cls.u3.value = ECMA_VALUE_FALSE;\n      break;\n    }\n#endif /* JERRY_BUILTIN_BOOLEAN */\n\n#if !JERRY_ESNEXT\n#if JERRY_BUILTIN_DATE\n    case ECMA_BUILTIN_ID_DATE_PROTOTYPE:\n    {\n      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_DATE;\n\n      ecma_number_t *prim_prop_num_value_p = ecma_alloc_number ();\n      *prim_prop_num_value_p = ecma_number_make_nan ();\n      ECMA_SET_INTERNAL_VALUE_POINTER (ext_object_p->u.cls.u3.value, prim_prop_num_value_p);\n      break;\n    }\n#endif /* JERRY_BUILTIN_DATE */\n\n#if JERRY_BUILTIN_REGEXP\n    case ECMA_BUILTIN_ID_REGEXP_PROTOTYPE:\n    {\n      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_REGEXP;\n\n      re_compiled_code_t *bc_p = re_compile_bytecode (ecma_get_magic_string (LIT_MAGIC_STRING_EMPTY_NON_CAPTURE_GROUP),\n                                                      RE_FLAG_EMPTY);\n\n      JERRY_ASSERT (bc_p != NULL);\n\n      ECMA_SET_INTERNAL_VALUE_POINTER (ext_object_p->u.cls.u3.value, bc_p);\n      break;\n    }\n#endif /* JERRY_BUILTIN_REGEXP */\n#endif /* !JERRY_ESNEXT */\n    default:\n    {\n      JERRY_ASSERT (obj_type != ECMA_OBJECT_TYPE_BUILT_IN_CLASS);\n      break;\n    }\n  }\n\n  ECMA_SET_NON_NULL_POINTER (builtin_objects[obj_builtin_id], obj_p);\n  ecma_deref_object (obj_p);\n  return obj_p;\n}",
        "begin_line": 357,
        "end_line": 550,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-array-object.ecma_fast_array_extend#458",
        "src_path": "jerry-core/ecma/operations/ecma-array-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-array-object",
        "signature": "jerry-core.ecma.operations.ecma-array-object.ecma_fast_array_extend (ecma_object_t *object_p, /**< fast access mode array object */                         uint32_t new_length) /**< new length of the fast access mode array */",
        "snippet": "ecma_value_t *\necma_fast_array_extend (ecma_object_t *object_p, /**< fast access mode array object */\n                        uint32_t new_length) /**< new length of the fast access mode array */\n{\n  JERRY_ASSERT (ecma_op_object_is_fast_array (object_p));\n  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) object_p;\n  uint32_t old_length = ext_obj_p->u.array.length;\n\n  JERRY_ASSERT (old_length < new_length);\n\n  ecma_ref_object (object_p);\n\n  ecma_value_t *new_values_p;\n  const uint32_t old_length_aligned = ECMA_FAST_ARRAY_ALIGN_LENGTH (old_length);\n  const uint32_t new_length_aligned = ECMA_FAST_ARRAY_ALIGN_LENGTH (new_length);\n\n  if (object_p->u1.property_list_cp == JMEM_CP_NULL)\n  {\n    new_values_p = jmem_heap_alloc_block (new_length_aligned * sizeof (ecma_value_t));\n  }\n  else\n  {\n    ecma_value_t *values_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, object_p->u1.property_list_cp);\n    new_values_p = (ecma_value_t *) jmem_heap_realloc_block (values_p,\n                                                             old_length_aligned * sizeof (ecma_value_t),\n                                                             new_length_aligned * sizeof (ecma_value_t));\n  }\n\n  for (uint32_t i = old_length; i < new_length_aligned; i++)\n  {\n    new_values_p[i] = ECMA_VALUE_ARRAY_HOLE;\n  }\n\n  ext_obj_p->u.array.length_prop_and_hole_count += (new_length - old_length) * ECMA_FAST_ARRAY_HOLE_ONE;\n  ext_obj_p->u.array.length = new_length;\n\n  ECMA_SET_NON_NULL_POINTER (object_p->u1.property_list_cp, new_values_p);\n\n  ecma_deref_object (object_p);\n  return new_values_p;\n}",
        "begin_line": 458,
        "end_line": 498,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-array-object.ecma_fast_array_set_property#371",
        "src_path": "jerry-core/ecma/operations/ecma-array-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-array-object",
        "signature": "jerry-core.ecma.operations.ecma-array-object.ecma_fast_array_set_property (ecma_object_t *object_p, /**< fast access mode array object */                               uint32_t index, /**< property name index */                               ecma_value_t value) /**< value to be set */",
        "snippet": "bool\necma_fast_array_set_property (ecma_object_t *object_p, /**< fast access mode array object */\n                              uint32_t index, /**< property name index */\n                              ecma_value_t value) /**< value to be set */\n{\n  JERRY_ASSERT (ecma_op_object_is_fast_array (object_p));\n  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) object_p;\n  uint32_t old_length = ext_obj_p->u.array.length;\n\n  ecma_value_t *values_p;\n\n  if (JERRY_LIKELY (index < old_length))\n  {\n    JERRY_ASSERT (object_p->u1.property_list_cp != JMEM_CP_NULL);\n\n    values_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, object_p->u1.property_list_cp);\n\n    if (ecma_is_value_array_hole (values_p[index]))\n    {\n      ext_obj_p->u.array.length_prop_and_hole_count -= ECMA_FAST_ARRAY_HOLE_ONE;\n    }\n    else\n    {\n      ecma_free_value_if_not_object (values_p[index]);\n    }\n\n    values_p[index] = ecma_copy_value_if_not_object (value);\n\n    return true;\n  }\n\n  uint32_t old_holes = ext_obj_p->u.array.length_prop_and_hole_count;\n  uint32_t new_holes = index - old_length;\n\n  if (JERRY_UNLIKELY (new_holes > ECMA_FAST_ARRAY_MAX_NEW_HOLES_COUNT\n                      || ((old_holes >> ECMA_FAST_ARRAY_HOLE_SHIFT) + new_holes) > ECMA_FAST_ARRAY_MAX_HOLE_COUNT))\n  {\n    ecma_fast_array_convert_to_normal (object_p);\n\n    return false;\n  }\n\n  uint32_t new_length = index + 1;\n\n  JERRY_ASSERT (new_length < UINT32_MAX);\n\n  const uint32_t aligned_length = ECMA_FAST_ARRAY_ALIGN_LENGTH (old_length);\n\n  if (JERRY_LIKELY (index < aligned_length))\n  {\n    JERRY_ASSERT (object_p->u1.property_list_cp != JMEM_CP_NULL);\n\n    values_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, object_p->u1.property_list_cp);\n    /* This area is filled with ECMA_VALUE_ARRAY_HOLE, but not counted in u.array.length_prop_and_hole_count */\n    JERRY_ASSERT (ecma_is_value_array_hole (values_p[index]));\n    ext_obj_p->u.array.length_prop_and_hole_count += new_holes * ECMA_FAST_ARRAY_HOLE_ONE;\n    ext_obj_p->u.array.length = new_length;\n  }\n  else\n  {\n    values_p = ecma_fast_array_extend (object_p, new_length);\n    ext_obj_p->u.array.length_prop_and_hole_count -= ECMA_FAST_ARRAY_HOLE_ONE;\n  }\n\n  values_p[index] = ecma_copy_value_if_not_object (value);\n\n  return true;\n}",
        "begin_line": 371,
        "end_line": 438,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-array-object.ecma_op_alloc_array_object#65",
        "src_path": "jerry-core/ecma/operations/ecma-array-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-array-object",
        "signature": "jerry-core.ecma.operations.ecma-array-object.ecma_op_alloc_array_object (uint32_t length) /**< length of the new array */",
        "snippet": "static ecma_object_t *\necma_op_alloc_array_object (uint32_t length) /**< length of the new array */\n{\n#if JERRY_BUILTIN_ARRAY\n  ecma_object_t *array_prototype_object_p = ecma_builtin_get (ECMA_BUILTIN_ID_ARRAY_PROTOTYPE);\n#else /* !JERRY_BUILTIN_ARRAY */\n  ecma_object_t *array_prototype_object_p = ecma_builtin_get (ECMA_BUILTIN_ID_OBJECT_PROTOTYPE);\n#endif /* JERRY_BUILTIN_ARRAY */\n\n  ecma_object_t *object_p = ecma_create_object (array_prototype_object_p,\n                                                sizeof (ecma_extended_object_t),\n                                                ECMA_OBJECT_TYPE_ARRAY);\n\n  /*\n   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_ARRAY type.\n   *\n   * See also: ecma_object_get_class_name\n   */\n\n  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) object_p;\n  ext_obj_p->u.array.length = length;\n  ext_obj_p->u.array.length_prop_and_hole_count = ECMA_PROPERTY_FLAG_WRITABLE | ECMA_PROPERTY_VIRTUAL;\n\n  return object_p;\n}",
        "begin_line": 65,
        "end_line": 89,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-array-object.ecma_op_array_object_define_own_property#1106",
        "src_path": "jerry-core/ecma/operations/ecma-array-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-array-object",
        "signature": "jerry-core.ecma.operations.ecma-array-object.ecma_op_array_object_define_own_property (ecma_object_t *object_p, /**< the array object */                                           ecma_string_t *property_name_p, /**< property name */                                           const ecma_property_descriptor_t *property_desc_p) /**< property descriptor */",
        "snippet": "ecma_value_t\necma_op_array_object_define_own_property (ecma_object_t *object_p, /**< the array object */\n                                          ecma_string_t *property_name_p, /**< property name */\n                                          const ecma_property_descriptor_t *property_desc_p) /**< property descriptor */\n{\n  if (ecma_string_is_length (property_name_p))\n  {\n    JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED)\n                  || !(property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE));\n    JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)\n                  || !(property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE));\n    JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED)\n                  || !(property_desc_p->flags & JERRY_PROP_IS_WRITABLE));\n\n    if (property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)\n    {\n      return ecma_op_array_object_set_length (object_p, property_desc_p->value, property_desc_p->flags);\n    }\n\n    ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n    ecma_value_t length_value = ecma_make_uint32_value (ext_object_p->u.array.length);\n\n    ecma_value_t result = ecma_op_array_object_set_length (object_p, length_value, property_desc_p->flags);\n\n    ecma_fast_free_value (length_value);\n    return result;\n  }\n\n  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n  if (ecma_op_object_is_fast_array (object_p))\n  {\n    if ((property_desc_p->flags & ECMA_FAST_ARRAY_DATA_PROP_FLAGS) == ECMA_FAST_ARRAY_DATA_PROP_FLAGS)\n    {\n      uint32_t index = ecma_string_get_array_index (property_name_p);\n\n      if (JERRY_UNLIKELY (index == ECMA_STRING_NOT_ARRAY_INDEX))\n      {\n        ecma_fast_array_convert_to_normal (object_p);\n      }\n      else if (ecma_fast_array_set_property (object_p, index, property_desc_p->value))\n      {\n        return ECMA_VALUE_TRUE;\n      }\n\n      JERRY_ASSERT (!ecma_op_array_is_fast_array (ext_object_p));\n    }\n    else\n    {\n      ecma_fast_array_convert_to_normal (object_p);\n    }\n  }\n\n  JERRY_ASSERT (!ecma_op_object_is_fast_array (object_p));\n  uint32_t index = ecma_string_get_array_index (property_name_p);\n\n  if (index == ECMA_STRING_NOT_ARRAY_INDEX)\n  {\n    return ecma_op_general_object_define_own_property (object_p, property_name_p, property_desc_p);\n  }\n\n  bool update_length = (index >= ext_object_p->u.array.length);\n\n  if (update_length\n      && !ecma_is_property_writable ((ecma_property_t) ext_object_p->u.array.length_prop_and_hole_count))\n  {\n    return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);\n  }\n\n  ecma_property_descriptor_t prop_desc;\n\n  prop_desc = *property_desc_p;\n  prop_desc.flags &= (uint16_t) ~JERRY_PROP_SHOULD_THROW;\n\n  ecma_value_t completition = ecma_op_general_object_define_own_property (object_p,\n                                                                          property_name_p,\n                                                                          &prop_desc);\n  JERRY_ASSERT (ecma_is_value_boolean (completition));\n\n  if (ecma_is_value_false (completition))\n  {\n    return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);\n  }\n\n  if (update_length)\n  {\n    ext_object_p->u.array.length = index + 1;\n  }\n\n  return ECMA_VALUE_TRUE;\n}",
        "begin_line": 1106,
        "end_line": 1196,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-array-object.ecma_op_new_array_object#125",
        "src_path": "jerry-core/ecma/operations/ecma-array-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-array-object",
        "signature": "jerry-core.ecma.operations.ecma-array-object.ecma_op_new_array_object (uint32_t length) /**< length of the new array */",
        "snippet": "ecma_object_t *\necma_op_new_array_object (uint32_t length) /**< length of the new array */\n{\n  ecma_object_t *object_p = ecma_op_alloc_array_object (length);\n\n  const uint32_t aligned_length = ECMA_FAST_ARRAY_ALIGN_LENGTH (length);\n  ecma_value_t *values_p = NULL;\n\n  if (length > 0)\n  {\n    if (length >= ECMA_FAST_ARRAY_MAX_INITIAL_LENGTH)\n    {\n      return object_p;\n    }\n\n    values_p = (ecma_value_t *) jmem_heap_alloc_block_null_on_error (aligned_length * sizeof (ecma_value_t));\n\n    if (JERRY_UNLIKELY (values_p == NULL))\n    {\n      return object_p;\n    }\n  }\n\n  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) object_p;\n  ext_obj_p->u.array.length_prop_and_hole_count |= ECMA_FAST_ARRAY_FLAG;\n  ext_obj_p->u.array.length_prop_and_hole_count += length * ECMA_FAST_ARRAY_HOLE_ONE;\n\n  for (uint32_t i = 0; i < aligned_length; i++)\n  {\n    values_p[i] = ECMA_VALUE_ARRAY_HOLE;\n  }\n\n  JERRY_ASSERT (object_p->u1.property_list_cp == JMEM_CP_NULL);\n  ECMA_SET_POINTER (object_p->u1.property_list_cp, values_p);\n  return object_p;\n}",
        "begin_line": 125,
        "end_line": 160,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-comparison.ecma_op_abstract_equality_compare#43",
        "src_path": "jerry-core/ecma/operations/ecma-comparison.c",
        "class_name": "jerry-core.ecma.operations.ecma-comparison",
        "signature": "jerry-core.ecma.operations.ecma-comparison.ecma_op_abstract_equality_compare (ecma_value_t x, /**< first operand */                                    ecma_value_t y) /**< second operand */",
        "snippet": "ecma_value_t\necma_op_abstract_equality_compare (ecma_value_t x, /**< first operand */\n                                   ecma_value_t y) /**< second operand */\n{\n  if (x == y)\n  {\n    return ECMA_VALUE_TRUE;\n  }\n\n  if (ecma_are_values_integer_numbers (x, y))\n  {\n    /* Note: the (x == y) comparison captures the true case. */\n    return ECMA_VALUE_FALSE;\n  }\n\n  if (ecma_is_value_number (x))\n  {\n    if (ecma_is_value_number (y))\n    {\n      /* 1.c */\n      ecma_number_t x_num = ecma_get_number_from_value (x);\n      ecma_number_t y_num = ecma_get_number_from_value (y);\n\n      bool is_x_equal_to_y = (x_num == y_num);\n\n#ifndef JERRY_NDEBUG\n      bool is_x_equal_to_y_check;\n\n      if (ecma_number_is_nan (x_num)\n          || ecma_number_is_nan (y_num))\n      {\n        is_x_equal_to_y_check = false;\n      }\n      else if (x_num == y_num\n               || (ecma_number_is_zero (x_num)\n                   && ecma_number_is_zero (y_num)))\n      {\n        is_x_equal_to_y_check = true;\n      }\n      else\n      {\n        is_x_equal_to_y_check = false;\n      }\n\n      JERRY_ASSERT (is_x_equal_to_y == is_x_equal_to_y_check);\n#endif /* !JERRY_NDEBUG */\n\n      return ecma_make_boolean_value (is_x_equal_to_y);\n    }\n\n    /* Swap values. */\n    x ^= y;\n    y ^= x;\n    x ^= y;\n  }\n\n  if (ecma_is_value_string (x))\n  {\n    if (ecma_is_value_string (y))\n    {\n      /* 1., d. */\n      ecma_string_t *x_str_p = ecma_get_string_from_value (x);\n      ecma_string_t *y_str_p = ecma_get_string_from_value (y);\n\n      bool is_equal = ecma_compare_ecma_strings (x_str_p, y_str_p);\n\n      return ecma_make_boolean_value (is_equal);\n    }\n\n    if (ecma_is_value_number (y))\n    {\n      /* 4. */\n      ecma_number_t num;\n      ecma_value_t x_num_value = ecma_op_to_number (x, &num);\n\n      if (ECMA_IS_VALUE_ERROR (x_num_value))\n      {\n        return x_num_value;\n      }\n      ecma_value_t num_value = ecma_make_number_value (num);\n      ecma_value_t compare_result = ecma_op_abstract_equality_compare (num_value, y);\n\n      ecma_free_value (num_value);\n      return compare_result;\n    }\n\n    /* Swap values. */\n    x ^= y;\n    y ^= x;\n    x ^= y;\n  }\n\n  if (ecma_is_value_boolean (y))\n  {\n    if (ecma_is_value_boolean (x))\n    {\n      /* 1., e. */\n      /* Note: the (x == y) comparison captures the true case. */\n      return ECMA_VALUE_FALSE;\n    }\n\n    /* 7. */\n    return ecma_op_abstract_equality_compare (x, ecma_make_integer_value (ecma_is_value_true (y) ? 1 : 0));\n  }\n\n  if (ecma_is_value_boolean (x))\n  {\n    /* 6. */\n    return ecma_op_abstract_equality_compare (ecma_make_integer_value (ecma_is_value_true (x) ? 1 : 0), y);\n  }\n\n#if JERRY_BUILTIN_BIGINT\n  if (JERRY_UNLIKELY (ecma_is_value_bigint (x)))\n  {\n    if (ecma_is_value_bigint (y))\n    {\n      return ecma_make_boolean_value (ecma_bigint_is_equal_to_bigint (x, y));\n    }\n\n    if (ecma_is_value_string (y))\n    {\n      ecma_value_t bigint = ecma_bigint_parse_string_value (y, ECMA_BIGINT_PARSE_DISALLOW_SYNTAX_ERROR);\n\n      if (ECMA_IS_VALUE_ERROR (bigint)\n          || bigint == ECMA_VALUE_FALSE)\n      {\n        return bigint;\n      }\n\n      JERRY_ASSERT (ecma_is_value_bigint (bigint));\n\n      ecma_value_t result = ecma_make_boolean_value (ecma_bigint_is_equal_to_bigint (x, bigint));\n\n      ecma_free_value (bigint);\n      return result;\n    }\n\n    if (ecma_is_value_number (y))\n    {\n      return ecma_make_boolean_value (ecma_bigint_is_equal_to_number (x, ecma_get_number_from_value (y)));\n    }\n\n    /* Swap values. */\n    x ^= y;\n    y ^= x;\n    x ^= y;\n  }\n#endif /* JERRY_BUILTIN_BIGINT */\n\n  if (ecma_is_value_undefined (x)\n      || ecma_is_value_null (x))\n  {\n    /* 1. a., b. */\n    /* 2., 3. */\n    bool is_equal = ecma_is_value_undefined (y) || ecma_is_value_null (y);\n\n    return ecma_make_boolean_value (is_equal);\n  }\n\n#if JERRY_ESNEXT\n  if (JERRY_UNLIKELY (ecma_is_value_symbol (x)))\n  {\n    if (!ecma_is_value_object (y))\n    {\n      return ECMA_VALUE_FALSE;\n    }\n\n    /* Swap values. */\n    x ^= y;\n    y ^= x;\n    x ^= y;\n  }\n#endif /* JERRY_ESNEXT */\n\n  JERRY_ASSERT (ecma_is_value_object (x));\n\n  if (ecma_is_value_string (y)\n#if JERRY_ESNEXT\n      || ecma_is_value_symbol (y)\n#endif /* JERRY_ESNEXT */\n#if JERRY_BUILTIN_BIGINT\n      || ecma_is_value_bigint (y)\n#endif /* JERRY_BUILTIN_BIGINT */\n      || ecma_is_value_number (y))\n  {\n    /* 9. */\n    ecma_object_t *obj_p = ecma_get_object_from_value (x);\n\n    ecma_value_t def_value = ecma_op_object_default_value (obj_p, ECMA_PREFERRED_TYPE_NO);\n\n    if (ECMA_IS_VALUE_ERROR (def_value))\n    {\n      return def_value;\n    }\n\n    ecma_value_t compare_result = ecma_op_abstract_equality_compare (def_value, y);\n\n    ecma_free_value (def_value);\n\n    return compare_result;\n  }\n\n  return ECMA_VALUE_FALSE;\n}",
        "begin_line": 43,
        "end_line": 246,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_boolean#223",
        "src_path": "jerry-core/ecma/operations/ecma-conversion.c",
        "class_name": "jerry-core.ecma.operations.ecma-conversion",
        "signature": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_boolean (ecma_value_t value) /**< ecma value */",
        "snippet": "bool\necma_op_to_boolean (ecma_value_t value) /**< ecma value */\n{\n  ecma_check_value_type_is_spec_defined (value);\n\n  if (ecma_is_value_simple (value))\n  {\n    JERRY_ASSERT (ecma_is_value_boolean (value)\n                  || ecma_is_value_undefined (value)\n                  || ecma_is_value_null (value));\n\n    return ecma_is_value_true (value);\n  }\n\n  if (ecma_is_value_integer_number (value))\n  {\n    return (value != ecma_make_integer_value (0));\n  }\n\n  if (ecma_is_value_float_number (value))\n  {\n    ecma_number_t num = ecma_get_float_from_value (value);\n\n    return (!ecma_number_is_nan (num) && !ecma_number_is_zero (num));\n  }\n\n  if (ecma_is_value_string (value))\n  {\n    ecma_string_t *str_p = ecma_get_string_from_value (value);\n\n    return !ecma_string_is_empty (str_p);\n  }\n\n#if JERRY_BUILTIN_BIGINT\n  if (ecma_is_value_bigint (value))\n  {\n    return value != ECMA_BIGINT_ZERO;\n  }\n#endif /* JERRY_BUILTIN_BIGINT */\n\n  JERRY_ASSERT (ecma_is_value_object (value) || ecma_is_value_symbol (value));\n\n  return true;\n}",
        "begin_line": 223,
        "end_line": 266,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_integer#931",
        "src_path": "jerry-core/ecma/operations/ecma-conversion.c",
        "class_name": "jerry-core.ecma.operations.ecma-conversion",
        "signature": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_integer (ecma_value_t value, /**< ecma value */                     ecma_number_t *number_p) /**< [out] ecma number */",
        "snippet": "ecma_value_t\necma_op_to_integer (ecma_value_t value, /**< ecma value */\n                    ecma_number_t *number_p) /**< [out] ecma number */\n{\n  if (ECMA_IS_VALUE_ERROR (value))\n  {\n    return value;\n  }\n\n  /* 1 */\n  ecma_value_t to_number = ecma_op_to_number (value, number_p);\n\n  /* 2 */\n  if (ECMA_IS_VALUE_ERROR (to_number))\n  {\n    return to_number;\n  }\n\n  ecma_number_t number = *number_p;\n\n  /* 3 */\n  if (ecma_number_is_nan (number))\n  {\n    *number_p = ECMA_NUMBER_ZERO;\n    return ECMA_VALUE_EMPTY;\n  }\n\n  /* 4 */\n  if (ecma_number_is_zero (number) || ecma_number_is_infinity (number))\n  {\n    return ECMA_VALUE_EMPTY;\n  }\n\n  ecma_number_t floor_fabs = (ecma_number_t) floor (fabs (number));\n  /* 5 */\n  *number_p = ecma_number_is_negative (number) ? -floor_fabs : floor_fabs;\n  return ECMA_VALUE_EMPTY;\n}",
        "begin_line": 931,
        "end_line": 968,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_length#979",
        "src_path": "jerry-core/ecma/operations/ecma-conversion.c",
        "class_name": "jerry-core.ecma.operations.ecma-conversion",
        "signature": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_length (ecma_value_t value, /**< ecma value */                    ecma_length_t *length) /**< [out] ecma number */",
        "snippet": "ecma_value_t\necma_op_to_length (ecma_value_t value, /**< ecma value */\n                   ecma_length_t *length) /**< [out] ecma number */\n{\n  /* 1 */\n  if (ECMA_IS_VALUE_ERROR (value))\n  {\n    return value;\n  }\n\n#if JERRY_ESNEXT\n  /* 2 */\n  ecma_number_t num;\n  ecma_value_t length_num = ecma_op_to_integer (value, &num);\n\n  /* 3 */\n  if (ECMA_IS_VALUE_ERROR (length_num))\n  {\n    return length_num;\n  }\n\n  /* 4 */\n  if (num <= 0.0f)\n  {\n    *length = 0;\n    return ECMA_VALUE_EMPTY;\n  }\n\n  /* 5 */\n  if (num >= ECMA_NUMBER_MAX_SAFE_INTEGER)\n  {\n    *length = (ecma_length_t) ECMA_NUMBER_MAX_SAFE_INTEGER;\n    return ECMA_VALUE_EMPTY;\n  }\n\n  /* 6 */\n  *length = (ecma_length_t) num;\n  return ECMA_VALUE_EMPTY;\n#else /* !JERRY_ESNEXT */\n  /* In the case of ES5, ToLength(ES6) operation is the same as ToUint32(ES5) */\n  ecma_number_t num;\n  ecma_value_t to_number = ecma_op_to_number (value, &num);\n\n  /* 2 */\n  if (ECMA_IS_VALUE_ERROR (to_number))\n  {\n    return to_number;\n  }\n\n  *length = ecma_number_to_uint32 (num);\n  return ECMA_VALUE_EMPTY;\n#endif /* JERRY_ESNEXT */\n}",
        "begin_line": 979,
        "end_line": 1031,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_numeric#294",
        "src_path": "jerry-core/ecma/operations/ecma-conversion.c",
        "class_name": "jerry-core.ecma.operations.ecma-conversion",
        "signature": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_numeric (ecma_value_t value, /**< ecma value */                     ecma_number_t *number_p, /**< [out] ecma number */                     ecma_to_numeric_options_t options) /**< option bits */",
        "snippet": "ecma_value_t\necma_op_to_numeric (ecma_value_t value, /**< ecma value */\n                    ecma_number_t *number_p, /**< [out] ecma number */\n                    ecma_to_numeric_options_t options) /**< option bits */\n{\n  JERRY_UNUSED (options);\n\n  if (ecma_is_value_integer_number (value))\n  {\n    *number_p = (ecma_number_t) ecma_get_integer_from_value (value);\n    return ECMA_VALUE_EMPTY;\n  }\n\n  if (ecma_is_value_float_number (value))\n  {\n    *number_p = ecma_get_float_from_value (value);\n    return ECMA_VALUE_EMPTY;\n  }\n\n  if (ecma_is_value_string (value))\n  {\n    ecma_string_t *str_p = ecma_get_string_from_value (value);\n    *number_p = ecma_string_to_number (str_p);\n    return ECMA_VALUE_EMPTY;\n  }\n\n  if (ecma_is_value_undefined (value))\n  {\n    *number_p = ecma_number_make_nan ();\n    return ECMA_VALUE_EMPTY;\n  }\n\n  if (ecma_is_value_null (value))\n  {\n    *number_p = 0;\n    return ECMA_VALUE_EMPTY;\n  }\n\n  if (ecma_is_value_true (value))\n  {\n    *number_p = 1;\n    return ECMA_VALUE_EMPTY;\n  }\n\n  if (ecma_is_value_false (value))\n  {\n    *number_p = 0;\n    return ECMA_VALUE_EMPTY;\n  }\n\n#if JERRY_ESNEXT\n  if (ecma_is_value_symbol (value))\n  {\n    return ecma_raise_type_error (ECMA_ERR_MSG (\"Cannot convert a Symbol value to a number\"));\n  }\n#endif /* JERRY_ESNEXT */\n\n#if JERRY_BUILTIN_BIGINT\n  if (ecma_is_value_bigint (value))\n  {\n    if (options & ECMA_TO_NUMERIC_ALLOW_BIGINT)\n    {\n      return ecma_copy_value (value);\n    }\n    return ecma_raise_type_error (ECMA_ERR_MSG (\"Cannot convert a BigInt value to a number\"));\n  }\n#endif /* JERRY_BUILTIN_BIGINT */\n\n  JERRY_ASSERT (ecma_is_value_object (value));\n\n  ecma_object_t *object_p = ecma_get_object_from_value (value);\n\n  ecma_value_t def_value = ecma_op_object_default_value (object_p, ECMA_PREFERRED_TYPE_NUMBER);\n\n  if (ECMA_IS_VALUE_ERROR (def_value))\n  {\n    return def_value;\n  }\n\n  ecma_value_t ret_value = ecma_op_to_numeric (def_value, number_p, options);\n\n  ecma_fast_free_value (def_value);\n\n  return ret_value;\n}",
        "begin_line": 294,
        "end_line": 378,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_property_key#485",
        "src_path": "jerry-core/ecma/operations/ecma-conversion.c",
        "class_name": "jerry-core.ecma.operations.ecma-conversion",
        "signature": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_property_key (ecma_value_t value) /**< ecma value */",
        "snippet": "ecma_string_t *\necma_op_to_property_key (ecma_value_t value) /**< ecma value */\n{\n  /* Fast path for strings and symbols */\n  if (JERRY_LIKELY (ecma_is_value_prop_name (value)))\n  {\n    ecma_string_t *key_p = ecma_get_prop_name_from_value (value);\n    ecma_ref_ecma_string (key_p);\n    return key_p;\n  }\n\n#if JERRY_ESNEXT\n  ecma_value_t key = ecma_op_to_primitive (value, ECMA_PREFERRED_TYPE_STRING);\n\n  if (ECMA_IS_VALUE_ERROR (key))\n  {\n    return NULL;\n  }\n\n  if (ecma_is_value_symbol (key))\n  {\n    ecma_string_t *symbol_p = ecma_get_symbol_from_value (key);\n    return symbol_p;\n  }\n\n  ecma_string_t *result = ecma_op_to_string (key);\n  ecma_free_value (key);\n\n  return result;\n#else /* !JERRY_ESNEXT */\n  ecma_check_value_type_is_spec_defined (value);\n\n  return ecma_op_to_string (value);\n#endif /* JERRY_ESNEXT */\n}",
        "begin_line": 485,
        "end_line": 519,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_string#389",
        "src_path": "jerry-core/ecma/operations/ecma-conversion.c",
        "class_name": "jerry-core.ecma.operations.ecma-conversion",
        "signature": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_string (ecma_value_t value) /**< ecma value */",
        "snippet": "ecma_string_t *\necma_op_to_string (ecma_value_t value) /**< ecma value */\n{\n  ecma_check_value_type_is_spec_defined (value);\n\n  if (ecma_is_value_string (value))\n  {\n    ecma_string_t *res_p = ecma_get_string_from_value (value);\n    ecma_ref_ecma_string (res_p);\n    return res_p;\n  }\n\n  if (ecma_is_value_integer_number (value))\n  {\n    ecma_integer_value_t num = ecma_get_integer_from_value (value);\n\n    if (num < 0)\n    {\n      return ecma_new_ecma_string_from_number ((ecma_number_t) num);\n    }\n    else\n    {\n      return ecma_new_ecma_string_from_uint32 ((uint32_t) num);\n    }\n  }\n\n  if (ecma_is_value_float_number (value))\n  {\n    ecma_number_t num = ecma_get_float_from_value (value);\n    return ecma_new_ecma_string_from_number (num);\n  }\n\n  if (ecma_is_value_undefined (value))\n  {\n    return ecma_get_magic_string (LIT_MAGIC_STRING_UNDEFINED);\n  }\n\n  if (ecma_is_value_null (value))\n  {\n    return ecma_get_magic_string (LIT_MAGIC_STRING_NULL);\n  }\n\n  if (ecma_is_value_true (value))\n  {\n    return ecma_get_magic_string (LIT_MAGIC_STRING_TRUE);\n  }\n\n  if (ecma_is_value_false (value))\n  {\n    return ecma_get_magic_string (LIT_MAGIC_STRING_FALSE);\n  }\n\n#if JERRY_ESNEXT\n  if (ecma_is_value_symbol (value))\n  {\n    ecma_raise_type_error (ECMA_ERR_MSG (\"Cannot convert a Symbol value to a string\"));\n    return NULL;\n  }\n#endif /* JERRY_ESNEXT */\n\n#if JERRY_BUILTIN_BIGINT\n  if (ecma_is_value_bigint (value))\n  {\n    return ecma_bigint_to_string (value, 10);\n  }\n#endif /* JERRY_BUILTIN_BIGINT */\n\n  JERRY_ASSERT (ecma_is_value_object (value));\n\n  ecma_object_t *obj_p = ecma_get_object_from_value (value);\n\n  ecma_value_t def_value = ecma_op_object_default_value (obj_p, ECMA_PREFERRED_TYPE_STRING);\n\n  if (ECMA_IS_VALUE_ERROR (def_value))\n  {\n    return NULL;\n  }\n\n  ecma_string_t *ret_string_p = ecma_op_to_string (def_value);\n\n  ecma_free_value (def_value);\n\n  return ret_string_p;\n}",
        "begin_line": 389,
        "end_line": 472,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_op_create_external_function_object#667",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_op_create_external_function_object (ecma_native_handler_t handler_cb) /**< pointer to external native handler */",
        "snippet": "ecma_object_t *\necma_op_create_external_function_object (ecma_native_handler_t handler_cb) /**< pointer to external native handler */\n{\n  ecma_object_t *prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);\n\n  ecma_object_t *function_obj_p = ecma_create_object (prototype_obj_p,\n                                                      sizeof (ecma_native_function_t),\n                                                      ECMA_OBJECT_TYPE_NATIVE_FUNCTION);\n\n  /*\n   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_NATIVE_FUNCTION type.\n   *\n   * See also: ecma_object_get_class_name\n   */\n\n  ecma_native_function_t *native_function_p = (ecma_native_function_t *) function_obj_p;\n#if JERRY_BUILTIN_REALMS\n  ECMA_SET_INTERNAL_VALUE_POINTER (native_function_p->realm_value,\n                                   ecma_builtin_get_global ());\n#endif /* JERRY_BUILTIN_REALMS */\n  native_function_p->native_handler_cb = handler_cb;\n\n  return function_obj_p;\n}",
        "begin_line": 667,
        "end_line": 690,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_op_create_function_object#349",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_op_create_function_object (ecma_object_t *scope_p, /**< function's scope */                                 const ecma_compiled_code_t *bytecode_data_p, /**< byte-code array */                                 ecma_builtin_id_t proto_id) /**< builtin id of the prototype object */",
        "snippet": "static ecma_object_t *\necma_op_create_function_object (ecma_object_t *scope_p, /**< function's scope */\n                                const ecma_compiled_code_t *bytecode_data_p, /**< byte-code array */\n                                ecma_builtin_id_t proto_id) /**< builtin id of the prototype object */\n{\n  JERRY_ASSERT (ecma_is_lexical_environment (scope_p));\n\n  /* 1., 4., 13. */\n  ecma_object_t *prototype_obj_p = ecma_builtin_get (proto_id);\n\n  size_t function_object_size = sizeof (ecma_extended_object_t);\n\n#if JERRY_SNAPSHOT_EXEC\n  if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)\n  {\n    function_object_size = sizeof (ecma_static_function_t);\n  }\n#endif /* JERRY_SNAPSHOT_EXEC */\n\n  ecma_object_t *func_p = ecma_create_object (prototype_obj_p,\n                                              function_object_size,\n                                              ECMA_OBJECT_TYPE_FUNCTION);\n\n  /* 2., 6., 7., 8. */\n  /*\n   * We don't setup [[Get]], [[Call]], [[Construct]], [[HasInstance]] for each function object.\n   * Instead we set the object's type to ECMA_OBJECT_TYPE_FUNCTION\n   * that defines which version of the routine should be used on demand.\n   */\n\n  /* 3. */\n  /*\n   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_FUNCTION type.\n   *\n   * See also: ecma_object_get_class_name\n   */\n\n  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_p;\n\n  /* 9. */\n  ECMA_SET_NON_NULL_POINTER_TAG (ext_func_p->u.function.scope_cp, scope_p, 0);\n\n  /* 10., 11., 12. */\n\n#if JERRY_SNAPSHOT_EXEC\n  if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)\n  {\n    ext_func_p->u.function.bytecode_cp = JMEM_CP_NULL;\n    ((ecma_static_function_t *) func_p)->bytecode_p = bytecode_data_p;\n  }\n  else\n#endif /* JERRY_SNAPSHOT_EXEC */\n  {\n    ECMA_SET_INTERNAL_VALUE_POINTER (ext_func_p->u.function.bytecode_cp, bytecode_data_p);\n    ecma_bytecode_ref ((ecma_compiled_code_t *) bytecode_data_p);\n  }\n\n  /* 14., 15., 16., 17., 18. */\n  /*\n   * 'length' and 'prototype' properties are instantiated lazily\n   *\n   * See also: ecma_op_function_try_to_lazy_instantiate_property\n   */\n\n  return func_p;\n}",
        "begin_line": 349,
        "end_line": 414,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_op_function_call#1362",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_op_function_call (ecma_object_t *func_obj_p, /**< Function object */                        ecma_value_t this_arg_value, /**< 'this' argument's value */                        const ecma_value_t *arguments_list_p, /**< arguments list */                        uint32_t arguments_list_len) /**< length of arguments list */",
        "snippet": "ecma_value_t\necma_op_function_call (ecma_object_t *func_obj_p, /**< Function object */\n                       ecma_value_t this_arg_value, /**< 'this' argument's value */\n                       const ecma_value_t *arguments_list_p, /**< arguments list */\n                       uint32_t arguments_list_len) /**< length of arguments list */\n{\n  JERRY_ASSERT (func_obj_p != NULL\n                && !ecma_is_lexical_environment (func_obj_p));\n  JERRY_ASSERT (ecma_op_object_is_callable (func_obj_p));\n\n  ECMA_CHECK_STACK_USAGE ();\n\n  const ecma_object_type_t type = ecma_get_object_type (func_obj_p);\n\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_TYPE_IS_PROXY (type))\n  {\n    return ecma_proxy_object_call (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n#if JERRY_ESNEXT\n  ecma_object_t *old_new_target_p = JERRY_CONTEXT (current_new_target_p);\n  if (JERRY_UNLIKELY (!(JERRY_CONTEXT (status_flags) & ECMA_STATUS_DIRECT_EVAL)))\n  {\n    JERRY_CONTEXT (current_new_target_p) = NULL;\n  }\n#endif /* JERRY_ESNEXT */\n\n  ecma_value_t result;\n\n  if (JERRY_LIKELY (type == ECMA_OBJECT_TYPE_FUNCTION))\n  {\n    result = ecma_op_function_call_simple (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);\n  }\n  else if (type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION)\n  {\n    result = ecma_op_function_call_native_built_in (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);\n  }\n  else if (type == ECMA_OBJECT_TYPE_NATIVE_FUNCTION)\n  {\n    result = ecma_op_function_call_native (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);\n  }\n#if JERRY_ESNEXT\n  else if (JERRY_UNLIKELY (type == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION))\n  {\n    result = ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_class_constructor_new));\n  }\n#endif /* JERRY_ESNEXT */\n  else\n  {\n    result = ecma_op_function_call_bound (func_obj_p, arguments_list_p, arguments_list_len);\n  }\n\n#if JERRY_ESNEXT\n  JERRY_CONTEXT (current_new_target_p) = old_new_target_p;\n#endif /* JERRY_ESNEXT */\n\n  return result;\n}",
        "begin_line": 1362,
        "end_line": 1421,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_op_function_call_simple#1032",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_op_function_call_simple (ecma_object_t *func_obj_p, /**< Function object */                               ecma_value_t this_arg_value, /**< 'this' argument's value */                               const ecma_value_t *arguments_list_p, /**< arguments list */                               uint32_t arguments_list_len) /**< length of arguments list */",
        "snippet": "static ecma_value_t\necma_op_function_call_simple (ecma_object_t *func_obj_p, /**< Function object */\n                              ecma_value_t this_arg_value, /**< 'this' argument's value */\n                              const ecma_value_t *arguments_list_p, /**< arguments list */\n                              uint32_t arguments_list_len) /**< length of arguments list */\n{\n  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION);\n\n  vm_frame_ctx_shared_args_t shared_args;\n  shared_args.header.status_flags = VM_FRAME_CTX_SHARED_HAS_ARG_LIST;\n  shared_args.header.function_object_p = func_obj_p;\n  shared_args.arg_list_p = arguments_list_p;\n  shared_args.arg_list_len = arguments_list_len;\n\n  /* Entering Function Code (ECMA-262 v5, 10.4.3) */\n  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_obj_p;\n\n  ecma_object_t *scope_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,\n                                                                       ext_func_p->u.function.scope_cp);\n\n  /* 8. */\n  ecma_value_t this_binding = this_arg_value;\n\n  const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);\n  uint16_t status_flags = bytecode_data_p->status_flags;\n\n  shared_args.header.bytecode_header_p = bytecode_data_p;\n\n#if JERRY_BUILTIN_REALMS\n  ecma_global_object_t *realm_p = ecma_op_function_get_realm (bytecode_data_p);\n#endif /* JERRY_BUILTIN_REALMS */\n\n  /* 1. */\n#if JERRY_ESNEXT\n  if (JERRY_UNLIKELY (CBC_FUNCTION_IS_ARROW (status_flags)))\n  {\n    ecma_arrow_function_t *arrow_func_p = (ecma_arrow_function_t *) func_obj_p;\n\n    if (ecma_is_value_undefined (arrow_func_p->new_target))\n    {\n      JERRY_CONTEXT (current_new_target_p) = NULL;\n    }\n    else\n    {\n      JERRY_CONTEXT (current_new_target_p) = ecma_get_object_from_value (arrow_func_p->new_target);\n    }\n    this_binding = arrow_func_p->this_binding;\n  }\n  else\n  {\n    shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_NON_ARROW_FUNC;\n#endif /* JERRY_ESNEXT */\n\n    if (!(status_flags & CBC_CODE_FLAGS_STRICT_MODE))\n    {\n      if (ecma_is_value_undefined (this_binding)\n          || ecma_is_value_null (this_binding))\n      {\n        /* 2. */\n#if JERRY_BUILTIN_REALMS\n        this_binding = realm_p->this_binding;\n#else /* !JERRY_BUILTIN_REALMS */\n        this_binding = ecma_make_object_value (ecma_builtin_get_global ());\n#endif /* JERRY_BUILTIN_REALMS */\n      }\n      else if (!ecma_is_value_object (this_binding))\n      {\n        /* 3., 4. */\n        this_binding = ecma_op_to_object (this_binding);\n        shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_THIS;\n\n        JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (this_binding));\n      }\n    }\n#if JERRY_ESNEXT\n  }\n#endif /* JERRY_ESNEXT */\n\n  /* 5. */\n  if (!(status_flags & CBC_CODE_FLAGS_LEXICAL_ENV_NOT_NEEDED))\n  {\n    shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV;\n    scope_p = ecma_create_decl_lex_env (scope_p);\n  }\n\n  ecma_value_t ret_value;\n\n#if JERRY_ESNEXT\n  if (JERRY_UNLIKELY (CBC_FUNCTION_GET_TYPE (status_flags) == CBC_FUNCTION_CONSTRUCTOR))\n  {\n    if (JERRY_CONTEXT (current_new_target_p) == NULL)\n    {\n      ret_value = ecma_raise_type_error (ECMA_ERR_MSG (\"Class constructor requires 'new'\"));\n      goto exit;\n    }\n\n    ecma_value_t lexical_this = this_binding;\n\n    if (ECMA_GET_THIRD_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))\n    {\n      shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_HERITAGE_PRESENT;\n      lexical_this = ECMA_VALUE_UNINITIALIZED;\n    }\n\n    ecma_op_create_environment_record (scope_p, lexical_this, func_obj_p);\n  }\n#endif /* JERRY_ESNEXT */\n\n#if JERRY_BUILTIN_REALMS\n  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);\n  JERRY_CONTEXT (global_object_p) = realm_p;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  ret_value = vm_run (&shared_args.header, this_binding, scope_p);\n\n#if JERRY_BUILTIN_REALMS\n  JERRY_CONTEXT (global_object_p) = saved_global_object_p;\n#endif /* JERRY_BUILTIN_REALMS */\n\n#if JERRY_ESNEXT\n  /* ECMAScript v6, 9.2.2.13 */\n  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_HERITAGE_PRESENT))\n  {\n    if (!ECMA_IS_VALUE_ERROR (ret_value) && !ecma_is_value_object (ret_value))\n    {\n      if (!ecma_is_value_undefined (ret_value))\n      {\n        ecma_free_value (ret_value);\n        ret_value = ecma_raise_type_error (ECMA_ERR_MSG (\"Derived constructors may only return object or undefined\"));\n      }\n      else\n      {\n        ret_value = ecma_op_get_this_binding (scope_p);\n      }\n    }\n  }\n\nexit:\n#endif /* JERRY_ESNEXT */\n\n  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV))\n  {\n    ecma_deref_object (scope_p);\n  }\n\n  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_THIS))\n  {\n    ecma_free_value (this_binding);\n  }\n\n  return ret_value;\n}",
        "begin_line": 1032,
        "end_line": 1183,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_op_is_callable#126",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_op_is_callable (ecma_value_t value) /**< ecma value */",
        "snippet": "bool\necma_op_is_callable (ecma_value_t value) /**< ecma value */\n{\n  return (ecma_is_value_object (value)\n          && ecma_op_object_is_callable (ecma_get_object_from_value (value)));\n}",
        "begin_line": 126,
        "end_line": 131,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-get-put-value.ecma_op_put_value_lex_env_base#228",
        "src_path": "jerry-core/ecma/operations/ecma-get-put-value.c",
        "class_name": "jerry-core.ecma.operations.ecma-get-put-value",
        "signature": "jerry-core.ecma.operations.ecma-get-put-value.ecma_op_put_value_lex_env_base (ecma_object_t *lex_env_p, /**< lexical environment */                                 ecma_string_t *name_p, /**< variable name */                                 bool is_strict, /**< flag indicating strict mode */                                 ecma_value_t value) /**< ECMA-value */",
        "snippet": "ecma_value_t\necma_op_put_value_lex_env_base (ecma_object_t *lex_env_p, /**< lexical environment */\n                                ecma_string_t *name_p, /**< variable name */\n                                bool is_strict, /**< flag indicating strict mode */\n                                ecma_value_t value) /**< ECMA-value */\n{\n  JERRY_ASSERT (lex_env_p != NULL\n                && ecma_is_lexical_environment (lex_env_p));\n\n  while (true)\n  {\n    switch (ecma_get_lex_env_type (lex_env_p))\n    {\n#if JERRY_ESNEXT\n      case ECMA_LEXICAL_ENVIRONMENT_CLASS:\n      {\n        if ((lex_env_p->type_flags_refs & ECMA_OBJECT_FLAG_LEXICAL_ENV_HAS_DATA) == 0)\n        {\n          break;\n        }\n        /* FALLTHRU */\n      }\n#endif /* JERRY_ESNEXT */\n      case ECMA_LEXICAL_ENVIRONMENT_DECLARATIVE:\n      {\n        ecma_property_t *property_p = ecma_find_named_property (lex_env_p, name_p);\n\n        if (property_p != NULL)\n        {\n#if JERRY_ESNEXT\n          ecma_property_value_t *property_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n          JERRY_ASSERT (!(*property_p & ECMA_PROPERTY_FLAG_WRITABLE)\n                        || (*property_p & ECMA_PROPERTY_FLAG_DATA));\n\n          if ((*property_p & ECMA_PROPERTY_FLAG_WRITABLE)\n              && property_value_p->value != ECMA_VALUE_UNINITIALIZED)\n          {\n            ecma_named_data_property_assign_value (lex_env_p, property_value_p, value);\n            return ECMA_VALUE_EMPTY;\n          }\n#else /* JERRY_ESNEXT */\n          if (ecma_is_property_writable (*property_p))\n          {\n            ecma_property_value_t *property_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n            ecma_named_data_property_assign_value (lex_env_p, property_value_p, value);\n            return ECMA_VALUE_EMPTY;\n          }\n#endif /* JERRY_ESNEXT */\n\n          return ecma_op_raise_set_binding_error (property_p, is_strict);\n        }\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (ecma_get_lex_env_type (lex_env_p) == ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND);\n\n        ecma_object_t *binding_obj_p = ecma_get_lex_env_binding_object (lex_env_p);\n\n        ecma_value_t has_property = ecma_op_object_has_property (binding_obj_p, name_p);\n\n#if JERRY_BUILTIN_PROXY\n        if (ECMA_IS_VALUE_ERROR (has_property))\n        {\n          return has_property;\n        }\n#endif /* JERRY_BUILTIN_PROXY */\n\n        if (ecma_is_value_true (has_property))\n        {\n          ecma_value_t completion = ecma_op_object_put (binding_obj_p,\n                                                        name_p,\n                                                        value,\n                                                        is_strict);\n\n          if (ECMA_IS_VALUE_ERROR (completion))\n          {\n            return completion;\n          }\n\n          JERRY_ASSERT (ecma_is_value_boolean (completion));\n          return ECMA_VALUE_EMPTY;\n        }\n\n        break;\n      }\n    }\n\n    if (lex_env_p->u2.outer_reference_cp == JMEM_CP_NULL)\n    {\n      break;\n    }\n\n    lex_env_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, lex_env_p->u2.outer_reference_cp);\n  }\n\n  JERRY_ASSERT (ecma_get_lex_env_type (lex_env_p) == ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND);\n\n  if (is_strict)\n  {\n#if JERRY_ERROR_MESSAGES\n    return ecma_raise_standard_error_with_format (JERRY_ERROR_REFERENCE,\n                                                  \"% is not defined\",\n                                                  ecma_make_string_value (name_p));\n#else /* !JERRY_ERROR_MESSAGES */\n    return ecma_raise_reference_error (NULL);\n#endif /* JERRY_ERROR_MESSAGES */\n  }\n\n  ecma_value_t completion = ecma_op_object_put (ecma_get_lex_env_binding_object (lex_env_p),\n                                                name_p,\n                                                value,\n                                                false);\n\n  JERRY_ASSERT (ecma_is_value_boolean (completion));\n\n  return ECMA_VALUE_EMPTY;\n}",
        "begin_line": 228,
        "end_line": 346,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-lex-env.ecma_finalize_global_environment#49",
        "src_path": "jerry-core/ecma/operations/ecma-lex-env.c",
        "class_name": "jerry-core.ecma.operations.ecma-lex-env",
        "signature": "jerry-core.ecma.operations.ecma-lex-env.ecma_finalize_global_environment (void)",
        "snippet": "void\necma_finalize_global_environment (void)\n{\n  /* After this point the gc can free the global object, but the global_object_p pointer\n   * is not set to NULL because the global object might still be used before the free. */\n  ecma_deref_object ((ecma_object_t *) JERRY_CONTEXT (global_object_p));\n}",
        "begin_line": 49,
        "end_line": 55,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-lex-env.ecma_get_global_scope#133",
        "src_path": "jerry-core/ecma/operations/ecma-lex-env.c",
        "class_name": "jerry-core.ecma.operations.ecma-lex-env",
        "signature": "jerry-core.ecma.operations.ecma-lex-env.ecma_get_global_scope (ecma_object_t *global_object_p) /**< global object */",
        "snippet": "ecma_object_t *\necma_get_global_scope (ecma_object_t *global_object_p) /**< global object */\n{\n#if JERRY_ESNEXT\n  JERRY_ASSERT (global_object_p != NULL && ecma_builtin_is_global (global_object_p));\n  return ECMA_GET_NON_NULL_POINTER (ecma_object_t, ((ecma_global_object_t *) global_object_p)->global_scope_cp);\n#else /* !JERRY_ESNEXT */\n  return ecma_get_global_environment (global_object_p);\n#endif /* !JERRY_ESNEXT */\n}",
        "begin_line": 133,
        "end_line": 142,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-lex-env.ecma_init_global_environment#40",
        "src_path": "jerry-core/ecma/operations/ecma-lex-env.c",
        "class_name": "jerry-core.ecma.operations.ecma-lex-env",
        "signature": "jerry-core.ecma.operations.ecma-lex-env.ecma_init_global_environment (void)",
        "snippet": "void\necma_init_global_environment (void)\n{\n  JERRY_CONTEXT (global_object_p) = ecma_builtin_create_global_object ();\n}",
        "begin_line": 40,
        "end_line": 44,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-lex-env.ecma_op_create_mutable_binding#202",
        "src_path": "jerry-core/ecma/operations/ecma-lex-env.c",
        "class_name": "jerry-core.ecma.operations.ecma-lex-env",
        "signature": "jerry-core.ecma.operations.ecma-lex-env.ecma_op_create_mutable_binding (ecma_object_t *lex_env_p, /**< lexical environment */                                 ecma_string_t *name_p, /**< argument N */                                 bool is_deletable) /**< argument D */",
        "snippet": "ecma_property_t *\necma_op_create_mutable_binding (ecma_object_t *lex_env_p, /**< lexical environment */\n                                ecma_string_t *name_p, /**< argument N */\n                                bool is_deletable) /**< argument D */\n{\n  JERRY_ASSERT (lex_env_p != NULL\n                && ecma_is_lexical_environment (lex_env_p));\n  JERRY_ASSERT (name_p != NULL);\n\n  if (ecma_get_lex_env_type (lex_env_p) == ECMA_LEXICAL_ENVIRONMENT_DECLARATIVE)\n  {\n    uint8_t prop_attributes = ECMA_PROPERTY_FLAG_WRITABLE;\n\n    if (is_deletable)\n    {\n      prop_attributes = (uint8_t) (prop_attributes | ECMA_PROPERTY_FLAG_CONFIGURABLE);\n    }\n\n    ecma_property_t *prop_p;\n\n    ecma_create_named_data_property (lex_env_p,\n                                     name_p,\n                                     prop_attributes,\n                                     &prop_p);\n    return prop_p;\n  }\n  else\n  {\n    JERRY_ASSERT (ecma_get_lex_env_type (lex_env_p) == ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND);\n\n    ecma_object_t *binding_obj_p = ecma_get_lex_env_binding_object (lex_env_p);\n\n#if JERRY_BUILTIN_PROXY && JERRY_BUILTIN_REALMS\n    if (ECMA_OBJECT_IS_PROXY (binding_obj_p))\n    {\n      ecma_value_t result = ecma_proxy_object_is_extensible (binding_obj_p);\n\n      if (ECMA_IS_VALUE_ERROR (result))\n      {\n        return ECMA_PROPERTY_POINTER_ERROR;\n      }\n\n      if (result == ECMA_VALUE_FALSE)\n      {\n        return NULL;\n      }\n    }\n    else if (!ecma_op_ordinary_object_is_extensible (binding_obj_p))\n    {\n      return NULL;\n    }\n#else /* !JERRY_BUILTIN_PROXY || !JERRY_BUILTIN_REALMS */\n    if (!ecma_op_ordinary_object_is_extensible (binding_obj_p))\n    {\n      return NULL;\n    }\n#endif /* JERRY_BUILTIN_PROXY && JERRY_BUILTIN_REALMS */\n\n    const uint32_t flags = ECMA_PROPERTY_ENUMERABLE_WRITABLE | JERRY_PROP_SHOULD_THROW;\n\n    ecma_value_t completion = ecma_builtin_helper_def_prop (binding_obj_p,\n                                                            name_p,\n                                                            ECMA_VALUE_UNDEFINED,\n                                                            is_deletable ? flags | ECMA_PROPERTY_FLAG_CONFIGURABLE\n                                                                         : flags);\n\n    if (ECMA_IS_VALUE_ERROR (completion))\n    {\n      return ECMA_PROPERTY_POINTER_ERROR;\n    }\n    else\n    {\n      JERRY_ASSERT (ecma_is_value_boolean (completion));\n    }\n  }\n\n  return NULL;\n}",
        "begin_line": 202,
        "end_line": 279,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-lex-env.ecma_op_has_binding#155",
        "src_path": "jerry-core/ecma/operations/ecma-lex-env.c",
        "class_name": "jerry-core.ecma.operations.ecma-lex-env",
        "signature": "jerry-core.ecma.operations.ecma-lex-env.ecma_op_has_binding (ecma_object_t *lex_env_p, /**< lexical environment */                      ecma_string_t *name_p) /**< argument N */",
        "snippet": "ecma_value_t\necma_op_has_binding (ecma_object_t *lex_env_p, /**< lexical environment */\n                     ecma_string_t *name_p) /**< argument N */\n{\n  JERRY_ASSERT (lex_env_p != NULL\n                && ecma_is_lexical_environment (lex_env_p));\n\n  ecma_lexical_environment_type_t lex_env_type = ecma_get_lex_env_type (lex_env_p);\n\n  switch (lex_env_type)\n  {\n#if JERRY_ESNEXT\n    case ECMA_LEXICAL_ENVIRONMENT_CLASS:\n    {\n      if ((lex_env_p->type_flags_refs & ECMA_OBJECT_FLAG_LEXICAL_ENV_HAS_DATA) == 0)\n      {\n        return ECMA_VALUE_FALSE;\n      }\n      /* FALLTHRU */\n    }\n#endif /* JERRY_ESNEXT */\n    case ECMA_LEXICAL_ENVIRONMENT_DECLARATIVE:\n    {\n      ecma_property_t *property_p = ecma_find_named_property (lex_env_p, name_p);\n\n      return ecma_make_boolean_value (property_p != NULL);\n    }\n    default:\n    {\n      JERRY_ASSERT (lex_env_type == ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND);\n\n      ecma_object_t *binding_obj_p = ecma_get_lex_env_binding_object (lex_env_p);\n\n      return ecma_op_object_has_property (binding_obj_p, name_p);\n    }\n  }\n}",
        "begin_line": 155,
        "end_line": 191,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects-general.ecma_op_general_object_define_own_property#371",
        "src_path": "jerry-core/ecma/operations/ecma-objects-general.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects-general",
        "signature": "jerry-core.ecma.operations.ecma-objects-general.ecma_op_general_object_define_own_property (ecma_object_t *object_p, /**< the object */                                             ecma_string_t *property_name_p, /**< property name */                                             const ecma_property_descriptor_t *property_desc_p) /**< property                                                                                                 *   descriptor */",
        "snippet": "ecma_value_t\necma_op_general_object_define_own_property (ecma_object_t *object_p, /**< the object */\n                                            ecma_string_t *property_name_p, /**< property name */\n                                            const ecma_property_descriptor_t *property_desc_p) /**< property\n                                                                                                *   descriptor */\n{\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_IS_PROXY (object_p))\n  {\n    return ecma_proxy_object_define_own_property (object_p, property_name_p, property_desc_p);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  JERRY_ASSERT (object_p != NULL\n                && !ecma_is_lexical_environment (object_p));\n  JERRY_ASSERT (!ecma_op_object_is_fast_array (object_p));\n  JERRY_ASSERT (property_name_p != NULL);\n\n  uint8_t property_desc_type = ECMA_OP_OBJECT_DEFINE_GENERIC;\n\n  if (property_desc_p->flags & (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE_DEFINED))\n  {\n    /* A property descriptor cannot be both named data and named accessor. */\n    JERRY_ASSERT ((property_desc_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED))\n                   != (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED));\n    property_desc_type = ECMA_OP_OBJECT_DEFINE_DATA;\n  }\n  else if (property_desc_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED))\n  {\n    JERRY_ASSERT (!(property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED));\n    property_desc_type = ECMA_OP_OBJECT_DEFINE_ACCESSOR;\n  }\n\n  /* These three asserts ensures that a new property is created with the appropriate default flags.\n   * E.g. if JERRY_PROP_IS_CONFIGURABLE_DEFINED is false, the newly created property must be non-configurable. */\n  JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED)\n                || !(property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE));\n  JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)\n                || !(property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE));\n  JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED)\n                || !(property_desc_p->flags & JERRY_PROP_IS_WRITABLE));\n\n  /* 1. */\n  ecma_extended_property_ref_t ext_property_ref = { .property_ref.value_p = NULL, .property_p = NULL };\n  ecma_property_t current_prop;\n\n  current_prop = ecma_op_object_get_own_property (object_p,\n                                                  property_name_p,\n                                                  &ext_property_ref.property_ref,\n                                                  ECMA_PROPERTY_GET_VALUE | ECMA_PROPERTY_GET_EXT_REFERENCE);\n\n  if (current_prop == ECMA_PROPERTY_TYPE_NOT_FOUND || current_prop == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP)\n  {\n    /* 3. */\n    if (!ecma_op_ordinary_object_is_extensible (object_p))\n    {\n      /* 2. */\n      return ECMA_REJECT_WITH_FORMAT (property_desc_p->flags & JERRY_PROP_SHOULD_THROW,\n                                      \"Cannot define property '%', object is not extensible\",\n                                      ecma_make_prop_name_value (property_name_p));\n    }\n\n    /* 4. */\n    uint8_t prop_attributes = (uint8_t) (property_desc_p->flags & ECMA_PROPERTY_FLAGS_MASK);\n\n    if (property_desc_type != ECMA_OP_OBJECT_DEFINE_ACCESSOR)\n    {\n      /* a. */\n      JERRY_ASSERT (property_desc_type == ECMA_OP_OBJECT_DEFINE_GENERIC\n                    || property_desc_type == ECMA_OP_OBJECT_DEFINE_DATA);\n\n      ecma_property_value_t *new_prop_value_p = ecma_create_named_data_property (object_p,\n                                                                                 property_name_p,\n                                                                                 prop_attributes,\n                                                                                 NULL);\n\n      JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)\n                    || ecma_is_value_undefined (property_desc_p->value));\n\n      new_prop_value_p->value = ecma_copy_value_if_not_object (property_desc_p->value);\n    }\n    else\n    {\n      /* b. */\n      ecma_create_named_accessor_property (object_p,\n                                           property_name_p,\n                                           property_desc_p->get_p,\n                                           property_desc_p->set_p,\n                                           prop_attributes,\n                                           NULL);\n    }\n\n    return ECMA_VALUE_TRUE;\n  }\n\n  /* 6. */\n  const bool is_current_configurable = ecma_is_property_configurable (current_prop);\n\n  /* 7. a., b. */\n  bool is_enumerable = (property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE) != 0;\n  if (!is_current_configurable\n      && ((property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE)\n          || ((property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)\n              && (is_enumerable != ecma_is_property_enumerable (current_prop)))))\n  {\n    if (ECMA_PROPERTY_IS_VIRTUAL (current_prop))\n    {\n      ecma_free_value (ext_property_ref.property_ref.virtual_value);\n    }\n\n    return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);\n  }\n\n  if (ECMA_PROPERTY_IS_VIRTUAL (current_prop))\n  {\n    bool writable_check_failed = (property_desc_p->flags & JERRY_PROP_IS_WRITABLE);\n\n#if JERRY_MODULE_SYSTEM\n    if (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_MODULE_NAMESPACE))\n    {\n      if (JERRY_UNLIKELY (ext_property_ref.property_ref.virtual_value == ECMA_VALUE_UNINITIALIZED))\n      {\n        return ecma_raise_reference_error (ECMA_ERR_MSG (ecma_error_let_const_not_initialized));\n      }\n\n      if (property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED)\n      {\n        writable_check_failed = ((property_desc_p->flags ^ current_prop) & JERRY_PROP_IS_WRITABLE) != 0;\n      }\n    }\n    else\n    {\n      JERRY_ASSERT (!is_current_configurable && !ecma_is_property_writable (current_prop));\n    }\n#else /* !JERRY_MODULE_SYSTEM */\n    JERRY_ASSERT (!is_current_configurable && !ecma_is_property_writable (current_prop));\n#endif /* JERRY_MODULE_SYSTEM */\n\n    ecma_value_t result = ECMA_VALUE_TRUE;\n\n    if (property_desc_type == ECMA_OP_OBJECT_DEFINE_ACCESSOR\n        || writable_check_failed\n        || ((property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)\n            && !ecma_op_same_value (property_desc_p->value,\n                                    ext_property_ref.property_ref.virtual_value)))\n    {\n      result = ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);\n    }\n\n    ecma_free_value (ext_property_ref.property_ref.virtual_value);\n    return result;\n  }\n\n  /* 8. */\n  if (property_desc_type == ECMA_OP_OBJECT_DEFINE_GENERIC)\n  {\n    /* No action required. */\n  }\n  else if (JERRY_LIKELY (property_desc_type == (current_prop & ECMA_PROPERTY_FLAG_DATA)))\n  {\n    /* If property is configurable, there is no need for checks. */\n    if (JERRY_UNLIKELY (!is_current_configurable))\n    {\n      if (property_desc_type == ECMA_OP_OBJECT_DEFINE_DATA)\n      {\n        /* 10. a. i. & ii. */\n        if (!ecma_is_property_writable (current_prop)\n            && ((property_desc_p->flags & JERRY_PROP_IS_WRITABLE)\n                || ((property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)\n                    && !ecma_op_same_value (property_desc_p->value,\n                                            ext_property_ref.property_ref.value_p->value))))\n        {\n          return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);\n        }\n      }\n      else\n      {\n        /* 11. */\n\n        /* a. */\n        ecma_property_value_t *value_p = ext_property_ref.property_ref.value_p;\n\n        ecma_getter_setter_pointers_t *get_set_pair_p = ecma_get_named_accessor_property (value_p);\n        jmem_cpointer_t prop_desc_getter_cp, prop_desc_setter_cp;\n        ECMA_SET_POINTER (prop_desc_getter_cp, property_desc_p->get_p);\n        ECMA_SET_POINTER (prop_desc_setter_cp, property_desc_p->set_p);\n\n        if (((property_desc_p->flags & JERRY_PROP_IS_GET_DEFINED)\n             && prop_desc_getter_cp != get_set_pair_p->getter_cp)\n            || ((property_desc_p->flags & JERRY_PROP_IS_SET_DEFINED)\n                && prop_desc_setter_cp != get_set_pair_p->setter_cp))\n        {\n          /* i., ii. */\n          return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);\n        }\n      }\n    }\n  }\n  else\n  {\n    /* 9. */\n    if (!is_current_configurable)\n    {\n      /* a. */\n      return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);\n    }\n\n    ecma_property_value_t *value_p = ext_property_ref.property_ref.value_p;\n\n    if (property_desc_type == ECMA_OP_OBJECT_DEFINE_ACCESSOR)\n    {\n      JERRY_ASSERT (current_prop & ECMA_PROPERTY_FLAG_DATA);\n      ecma_free_value_if_not_object (value_p->value);\n\n#if JERRY_CPOINTER_32_BIT\n      ecma_getter_setter_pointers_t *getter_setter_pair_p;\n      getter_setter_pair_p = jmem_pools_alloc (sizeof (ecma_getter_setter_pointers_t));\n      getter_setter_pair_p->getter_cp = JMEM_CP_NULL;\n      getter_setter_pair_p->setter_cp = JMEM_CP_NULL;\n      ECMA_SET_NON_NULL_POINTER (value_p->getter_setter_pair_cp, getter_setter_pair_p);\n#else /* !JERRY_CPOINTER_32_BIT */\n      value_p->getter_setter_pair.getter_cp = JMEM_CP_NULL;\n      value_p->getter_setter_pair.setter_cp = JMEM_CP_NULL;\n#endif /* JERRY_CPOINTER_32_BIT */\n    }\n    else\n    {\n      JERRY_ASSERT (!(current_prop & ECMA_PROPERTY_FLAG_DATA));\n#if JERRY_CPOINTER_32_BIT\n      ecma_getter_setter_pointers_t *getter_setter_pair_p;\n      getter_setter_pair_p = ECMA_GET_NON_NULL_POINTER (ecma_getter_setter_pointers_t,\n                                                        value_p->getter_setter_pair_cp);\n      jmem_pools_free (getter_setter_pair_p, sizeof (ecma_getter_setter_pointers_t));\n#endif /* JERRY_CPOINTER_32_BIT */\n      value_p->value = ECMA_VALUE_UNDEFINED;\n    }\n\n    /* Update flags */\n    ecma_property_t prop_flags = *(ext_property_ref.property_p);\n    prop_flags = (ecma_property_t) (prop_flags & ~ECMA_PROPERTY_FLAG_WRITABLE);\n    prop_flags ^= ECMA_PROPERTY_FLAG_DATA;\n    *(ext_property_ref.property_p) = prop_flags;\n  }\n\n  /* 12. */\n  if (property_desc_type == ECMA_OP_OBJECT_DEFINE_DATA)\n  {\n    JERRY_ASSERT (ECMA_PROPERTY_IS_RAW_DATA (*ext_property_ref.property_p));\n\n    if (property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)\n    {\n      ecma_named_data_property_assign_value (object_p,\n                                             ext_property_ref.property_ref.value_p,\n                                             property_desc_p->value);\n    }\n\n    if (property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED)\n    {\n      ecma_set_property_writable_attr (ext_property_ref.property_p, (property_desc_p->flags & JERRY_PROP_IS_WRITABLE));\n    }\n  }\n  else if (property_desc_type == ECMA_OP_OBJECT_DEFINE_ACCESSOR)\n  {\n    JERRY_ASSERT (!(*ext_property_ref.property_p & ECMA_PROPERTY_FLAG_DATA));\n\n    if (property_desc_p->flags & JERRY_PROP_IS_GET_DEFINED)\n    {\n      ecma_set_named_accessor_property_getter (object_p,\n                                               ext_property_ref.property_ref.value_p,\n                                               property_desc_p->get_p);\n    }\n\n    if (property_desc_p->flags & JERRY_PROP_IS_SET_DEFINED)\n    {\n      ecma_set_named_accessor_property_setter (object_p,\n                                               ext_property_ref.property_ref.value_p,\n                                               property_desc_p->set_p);\n    }\n  }\n\n  if (property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)\n  {\n    ecma_set_property_enumerable_attr (ext_property_ref.property_p,\n                                       (property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE));\n  }\n\n  if (property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED)\n  {\n    ecma_set_property_configurable_attr (ext_property_ref.property_p,\n                                         (property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE));\n  }\n\n  return ECMA_VALUE_TRUE;\n}",
        "begin_line": 371,
        "end_line": 664,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_define_own_property#1875",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_define_own_property (ecma_object_t *obj_p, /**< the object */                                     ecma_string_t *property_name_p, /**< property name */                                     const ecma_property_descriptor_t *property_desc_p) /**< property                                                                                         *   descriptor */",
        "snippet": "ecma_value_t\necma_op_object_define_own_property (ecma_object_t *obj_p, /**< the object */\n                                    ecma_string_t *property_name_p, /**< property name */\n                                    const ecma_property_descriptor_t *property_desc_p) /**< property\n                                                                                        *   descriptor */\n{\n  JERRY_ASSERT (obj_p != NULL\n                && !ecma_is_lexical_environment (obj_p));\n  JERRY_ASSERT (property_name_p != NULL);\n\n  const ecma_object_type_t type = ecma_get_object_type (obj_p);\n\n  switch (type)\n  {\n    case ECMA_OBJECT_TYPE_CLASS:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      switch (ext_object_p->u.cls.type)\n      {\n        case ECMA_OBJECT_CLASS_ARGUMENTS:\n        {\n          return ecma_op_arguments_object_define_own_property (obj_p, property_name_p, property_desc_p);\n        }\n#if JERRY_BUILTIN_TYPEDARRAY\n        /* ES2015 9.4.5.1 */\n        case ECMA_OBJECT_CLASS_TYPEDARRAY:\n        {\n          return ecma_op_typedarray_define_own_property (obj_p, property_name_p, property_desc_p);\n        }\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n      }\n      break;\n    }\n    case ECMA_OBJECT_TYPE_ARRAY:\n    case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:\n    {\n      return ecma_op_array_object_define_own_property (obj_p, property_name_p, property_desc_p);\n    }\n#if JERRY_BUILTIN_PROXY\n    case ECMA_OBJECT_TYPE_PROXY:\n    {\n      return ecma_proxy_object_define_own_property (obj_p, property_name_p, property_desc_p);\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n    default:\n    {\n      break;\n    }\n  }\n\n  return ecma_op_general_object_define_own_property (obj_p, property_name_p, property_desc_p);\n}",
        "begin_line": 1875,
        "end_line": 1927,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_find#840",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_find (ecma_object_t *object_p, /**< the object */                      ecma_string_t *property_name_p) /**< property name */",
        "snippet": "ecma_value_t\necma_op_object_find (ecma_object_t *object_p, /**< the object */\n                     ecma_string_t *property_name_p) /**< property name */\n{\n  ecma_value_t base_value = ecma_make_object_value (object_p);\n\n  while (true)\n  {\n#if JERRY_BUILTIN_PROXY\n    if (ECMA_OBJECT_IS_PROXY (object_p))\n    {\n      return ecma_proxy_object_find (object_p, property_name_p);\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n\n    ecma_value_t value = ecma_op_object_find_own (base_value, object_p, property_name_p);\n\n    if (ecma_is_value_found (value))\n    {\n      return value;\n    }\n\n    if (object_p->u2.prototype_cp == JMEM_CP_NULL)\n    {\n      break;\n    }\n\n    object_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, object_p->u2.prototype_cp);\n  }\n\n  return ECMA_VALUE_NOT_FOUND;\n}",
        "begin_line": 840,
        "end_line": 871,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_find_own#525",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_find_own (ecma_value_t base_value, /**< base value */                          ecma_object_t *object_p, /**< target object */                          ecma_string_t *property_name_p) /**< property name */",
        "snippet": "ecma_value_t\necma_op_object_find_own (ecma_value_t base_value, /**< base value */\n                         ecma_object_t *object_p, /**< target object */\n                         ecma_string_t *property_name_p) /**< property name */\n{\n  JERRY_ASSERT (object_p != NULL\n                && !ecma_is_lexical_environment (object_p));\n  JERRY_ASSERT (property_name_p != NULL);\n  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (object_p));\n\n  ecma_object_base_type_t base_type = ecma_get_object_base_type (object_p);\n\n  switch (base_type)\n  {\n    case ECMA_OBJECT_BASE_TYPE_CLASS:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n      switch (ext_object_p->u.cls.type)\n      {\n        case ECMA_OBJECT_CLASS_STRING:\n        {\n          if (ecma_string_is_length (property_name_p))\n          {\n            ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;\n\n            ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);\n            lit_utf8_size_t length = ecma_string_get_length (prim_value_str_p);\n\n            return ecma_make_uint32_value (length);\n          }\n\n          uint32_t index = ecma_string_get_array_index (property_name_p);\n\n          if (index != ECMA_STRING_NOT_ARRAY_INDEX)\n          {\n            ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;\n\n            ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);\n\n            if (index < ecma_string_get_length (prim_value_str_p))\n            {\n              ecma_char_t char_at_idx = ecma_string_get_char_at_pos (prim_value_str_p, index);\n              return ecma_make_string_value (ecma_new_ecma_string_from_code_unit (char_at_idx));\n            }\n          }\n          break;\n        }\n        case ECMA_OBJECT_CLASS_ARGUMENTS:\n        {\n          if (!(ext_object_p->u.cls.u1.arguments_flags & ECMA_ARGUMENTS_OBJECT_MAPPED))\n          {\n            break;\n          }\n\n          uint32_t index = ecma_string_get_array_index (property_name_p);\n\n          if (index < ext_object_p->u.cls.u2.formal_params_number)\n          {\n            ecma_mapped_arguments_t *mapped_arguments_p = (ecma_mapped_arguments_t *) ext_object_p;\n\n            ecma_value_t *argv_p = (ecma_value_t *) (mapped_arguments_p + 1);\n\n            if (!ecma_is_value_empty (argv_p[index]) && argv_p[index] != ECMA_VALUE_ARGUMENT_NO_TRACK)\n            {\n              ecma_string_t *name_p = ecma_op_arguments_object_get_formal_parameter (mapped_arguments_p, index);\n              ecma_object_t *lex_env_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_object_t, mapped_arguments_p->lex_env);\n\n              return ecma_op_get_binding_value (lex_env_p, name_p, true);\n            }\n          }\n          break;\n        }\n#if JERRY_BUILTIN_TYPEDARRAY\n        /* ES2015 9.4.5.4 */\n        case ECMA_OBJECT_CLASS_TYPEDARRAY:\n        {\n          if (ecma_prop_name_is_symbol (property_name_p))\n          {\n            break;\n          }\n\n          ecma_number_t num = ecma_string_to_number (property_name_p);\n          bool is_same;\n          if (num <= 0)\n          {\n            is_same = true;\n          }\n          else\n          {\n            ecma_string_t *num_to_str = ecma_new_ecma_string_from_number (num);\n            is_same = ecma_compare_ecma_strings (property_name_p, num_to_str);\n            ecma_deref_ecma_string (num_to_str);\n          }\n\n          if (is_same)\n          {\n            ecma_typedarray_info_t info = ecma_typedarray_get_info (object_p);\n            return ecma_get_typedarray_element (&info, num);\n          }\n\n          break;\n        }\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n#if JERRY_MODULE_SYSTEM\n        case ECMA_OBJECT_CLASS_MODULE_NAMESPACE:\n        {\n          if (JERRY_UNLIKELY (ecma_prop_name_is_symbol (property_name_p)))\n          {\n            /* ECMA-262 v11, 26.3.1 */\n            if (ecma_op_compare_string_to_global_symbol (property_name_p, LIT_GLOBAL_SYMBOL_TO_STRING_TAG))\n            {\n              return ecma_make_magic_string_value (LIT_MAGIC_STRING_MODULE_UL);\n            }\n\n            return ECMA_VALUE_NOT_FOUND;\n          }\n\n          ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);\n\n          if (property_p == NULL)\n          {\n            return ECMA_VALUE_NOT_FOUND;\n          }\n\n          JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));\n\n          ecma_property_value_t *prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n          if (!(*property_p & ECMA_PROPERTY_FLAG_DATA))\n          {\n            prop_value_p = ecma_get_property_value_from_named_reference (prop_value_p);\n\n            if (JERRY_UNLIKELY (prop_value_p->value == ECMA_VALUE_UNINITIALIZED))\n            {\n              return ecma_raise_reference_error (ECMA_ERR_MSG (ecma_error_let_const_not_initialized));\n            }\n          }\n\n          return ecma_fast_copy_value (prop_value_p->value);\n        }\n#endif /* JERRY_MODULE_SYSTEM */\n      }\n      break;\n    }\n    case ECMA_OBJECT_BASE_TYPE_ARRAY:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n      if (ecma_string_is_length (property_name_p))\n      {\n        return ecma_make_uint32_value (ext_object_p->u.array.length);\n      }\n\n      if (JERRY_LIKELY (ecma_op_array_is_fast_array (ext_object_p)))\n      {\n        uint32_t index = ecma_string_get_array_index (property_name_p);\n\n        if (JERRY_LIKELY (index != ECMA_STRING_NOT_ARRAY_INDEX))\n        {\n          if (JERRY_LIKELY (index < ext_object_p->u.array.length))\n          {\n            ecma_value_t *values_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, object_p->u1.property_list_cp);\n\n            return (ecma_is_value_array_hole (values_p[index]) ? ECMA_VALUE_NOT_FOUND\n                                                               : ecma_fast_copy_value (values_p[index]));\n          }\n        }\n        return ECMA_VALUE_NOT_FOUND;\n      }\n\n      break;\n    }\n    default:\n    {\n      break;\n    }\n  }\n\n  ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);\n\n  if (property_p == NULL)\n  {\n    switch (ecma_get_object_type (object_p))\n    {\n      case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:\n      {\n        if (ecma_builtin_function_is_routine (object_p))\n        {\n          property_p = ecma_builtin_routine_try_to_instantiate_property (object_p, property_name_p);\n          break;\n        }\n        /* FALLTHRU */\n      }\n      case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:\n      case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:\n      case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:\n      {\n        property_p = ecma_builtin_try_to_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_CLASS:\n      {\n        if (((ecma_extended_object_t *) object_p)->u.cls.type == ECMA_OBJECT_CLASS_ARGUMENTS)\n        {\n          property_p = ecma_op_arguments_object_try_to_lazy_instantiate_property (object_p, property_name_p);\n        }\n        break;\n      }\n      case ECMA_OBJECT_TYPE_FUNCTION:\n      {\n#if !JERRY_ESNEXT\n        if (ecma_string_is_length (property_name_p))\n        {\n          /* Get length virtual property. */\n          ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;\n          const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);\n\n          uint32_t len;\n          if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)\n          {\n            cbc_uint16_arguments_t *args_p = (cbc_uint16_arguments_t *) bytecode_data_p;\n            len = args_p->argument_end;\n          }\n          else\n          {\n            cbc_uint8_arguments_t *args_p = (cbc_uint8_arguments_t *) bytecode_data_p;\n            len = args_p->argument_end;\n          }\n\n          return ecma_make_uint32_value (len);\n        }\n#endif /* !JERRY_ESNEXT */\n\n        /* Get prototype physical property. */\n        property_p = ecma_op_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:\n      {\n        property_p = ecma_op_external_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_BOUND_FUNCTION:\n      {\n        property_p = ecma_op_bound_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      default:\n      {\n        break;\n      }\n    }\n\n    if (property_p == NULL)\n    {\n      return ECMA_VALUE_NOT_FOUND;\n    }\n  }\n\n  JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));\n\n  ecma_property_value_t *prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n  if (*property_p & ECMA_PROPERTY_FLAG_DATA)\n  {\n    return ecma_fast_copy_value (prop_value_p->value);\n  }\n\n  ecma_getter_setter_pointers_t *get_set_pair_p = ecma_get_named_accessor_property (prop_value_p);\n\n  if (get_set_pair_p->getter_cp == JMEM_CP_NULL)\n  {\n    return ECMA_VALUE_UNDEFINED;\n  }\n\n  ecma_object_t *getter_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, get_set_pair_p->getter_cp);\n\n  return ecma_op_function_call (getter_p, base_value, NULL, 0);\n}",
        "begin_line": 525,
        "end_line": 804,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_by_index#948",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_by_index (ecma_object_t *object_p, /**< the object */                              ecma_length_t index) /**< property index */",
        "snippet": "ecma_value_t\necma_op_object_get_by_index (ecma_object_t *object_p, /**< the object */\n                             ecma_length_t index) /**< property index */\n{\n  if (JERRY_LIKELY (index <= ECMA_DIRECT_STRING_MAX_IMM))\n  {\n    return ecma_op_object_get (object_p, ECMA_CREATE_DIRECT_UINT32_STRING (index));\n  }\n\n  ecma_string_t *index_str_p = ecma_new_ecma_string_from_length (index);\n  ecma_value_t ret_value = ecma_op_object_get (object_p, index_str_p);\n  ecma_deref_ecma_string (index_str_p);\n\n  return ret_value;\n}",
        "begin_line": 948,
        "end_line": 962,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_own_property#72",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_own_property (ecma_object_t *object_p, /**< the object */                                  ecma_string_t *property_name_p, /**< property name */                                  ecma_property_ref_t *property_ref_p, /**< property reference */                                  uint32_t options) /**< option bits */",
        "snippet": "ecma_property_t\necma_op_object_get_own_property (ecma_object_t *object_p, /**< the object */\n                                 ecma_string_t *property_name_p, /**< property name */\n                                 ecma_property_ref_t *property_ref_p, /**< property reference */\n                                 uint32_t options) /**< option bits */\n{\n  JERRY_ASSERT (object_p != NULL\n                && !ecma_is_lexical_environment (object_p));\n#if JERRY_BUILTIN_PROXY\n  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (object_p));\n#endif /* JERRY_BUILTIN_PROXY */\n  JERRY_ASSERT (property_name_p != NULL);\n  JERRY_ASSERT (options == ECMA_PROPERTY_GET_NO_OPTIONS\n                || property_ref_p != NULL);\n\n  ecma_object_base_type_t base_type = ecma_get_object_base_type (object_p);\n\n  switch (base_type)\n  {\n    case ECMA_OBJECT_BASE_TYPE_CLASS:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n      switch (ext_object_p->u.cls.type)\n      {\n        case ECMA_OBJECT_CLASS_STRING:\n        {\n          if (ecma_string_is_length (property_name_p))\n          {\n            if (options & ECMA_PROPERTY_GET_VALUE)\n            {\n              ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;\n              ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);\n\n              lit_utf8_size_t length = ecma_string_get_length (prim_value_str_p);\n              property_ref_p->virtual_value = ecma_make_uint32_value (length);\n            }\n\n            return ECMA_PROPERTY_VIRTUAL;\n          }\n\n          uint32_t index = ecma_string_get_array_index (property_name_p);\n\n          if (index != ECMA_STRING_NOT_ARRAY_INDEX)\n          {\n            ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;\n            ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);\n\n            if (index < ecma_string_get_length (prim_value_str_p))\n            {\n              if (options & ECMA_PROPERTY_GET_VALUE)\n              {\n                ecma_char_t char_at_idx = ecma_string_get_char_at_pos (prim_value_str_p, index);\n                ecma_string_t *char_str_p = ecma_new_ecma_string_from_code_unit (char_at_idx);\n                property_ref_p->virtual_value = ecma_make_string_value (char_str_p);\n              }\n\n              return ECMA_PROPERTY_FLAG_ENUMERABLE | ECMA_PROPERTY_VIRTUAL;\n            }\n          }\n          break;\n        }\n#if JERRY_BUILTIN_TYPEDARRAY\n        /* ES2015 9.4.5.1 */\n        case ECMA_OBJECT_CLASS_TYPEDARRAY:\n        {\n          if (ecma_prop_name_is_symbol (property_name_p))\n          {\n            break;\n          }\n          ecma_number_t num = ecma_string_to_number (property_name_p);\n          bool is_same;\n          if (num <= 0)\n          {\n            is_same = true;\n          }\n          else\n          {\n            ecma_string_t *num_to_str = ecma_new_ecma_string_from_number (num);\n            is_same = ecma_compare_ecma_strings (property_name_p, num_to_str);\n            ecma_deref_ecma_string (num_to_str);\n          }\n\n          if (is_same)\n          {\n            ecma_typedarray_info_t info = ecma_typedarray_get_info (object_p);\n            ecma_value_t value = ecma_get_typedarray_element (&info, num);\n\n            if (ECMA_IS_VALUE_ERROR (value))\n            {\n              property_ref_p->virtual_value = value;\n              return ECMA_PROPERTY_TYPE_NOT_FOUND;\n            }\n\n            if (!ecma_is_value_undefined (value))\n            {\n              if (options & ECMA_PROPERTY_GET_VALUE)\n              {\n                property_ref_p->virtual_value = value;\n              }\n              else\n              {\n                ecma_fast_free_value (value);\n              }\n\n              return ECMA_PROPERTY_ENUMERABLE_WRITABLE | ECMA_PROPERTY_VIRTUAL;\n            }\n            else\n            {\n              return ECMA_PROPERTY_TYPE_NOT_FOUND;\n            }\n          }\n          break;\n        }\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n#if JERRY_MODULE_SYSTEM\n        case ECMA_OBJECT_CLASS_MODULE_NAMESPACE:\n        {\n          if (JERRY_UNLIKELY (ecma_prop_name_is_symbol (property_name_p)))\n          {\n            if (!ecma_op_compare_string_to_global_symbol (property_name_p, LIT_GLOBAL_SYMBOL_TO_STRING_TAG))\n            {\n              return ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP;\n            }\n\n            /* ECMA-262 v11, 26.3.1 */\n            if (options & ECMA_PROPERTY_GET_VALUE)\n            {\n              property_ref_p->virtual_value = ecma_make_magic_string_value (LIT_MAGIC_STRING_MODULE_UL);\n            }\n\n            return ECMA_PROPERTY_VIRTUAL;\n          }\n\n          ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);\n\n          if (property_p == NULL)\n          {\n            return ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP;\n          }\n\n          JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));\n\n          if (*property_p & ECMA_PROPERTY_FLAG_DATA)\n          {\n            if (options & ECMA_PROPERTY_GET_EXT_REFERENCE)\n            {\n              ((ecma_extended_property_ref_t *) property_ref_p)->property_p = property_p;\n            }\n\n            if (property_ref_p != NULL)\n            {\n              property_ref_p->value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n            }\n\n            return *property_p;\n          }\n\n          if (options & ECMA_PROPERTY_GET_VALUE)\n          {\n            ecma_property_value_t *prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n            prop_value_p = ecma_get_property_value_from_named_reference (prop_value_p);\n            property_ref_p->virtual_value = ecma_fast_copy_value (prop_value_p->value);\n          }\n\n          return ECMA_PROPERTY_ENUMERABLE_WRITABLE | ECMA_PROPERTY_VIRTUAL;\n        }\n#endif /* JERRY_MODULE_SYSTEM */\n      }\n      break;\n    }\n    case ECMA_OBJECT_BASE_TYPE_ARRAY:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n      if (ecma_string_is_length (property_name_p))\n      {\n        if (options & ECMA_PROPERTY_GET_VALUE)\n        {\n          property_ref_p->virtual_value = ecma_make_uint32_value (ext_object_p->u.array.length);\n        }\n\n        uint32_t length_prop = ext_object_p->u.array.length_prop_and_hole_count;\n        return length_prop & (ECMA_PROPERTY_FLAG_WRITABLE | ECMA_PROPERTY_VIRTUAL);\n      }\n\n      if (ecma_op_array_is_fast_array (ext_object_p))\n      {\n        uint32_t index = ecma_string_get_array_index (property_name_p);\n\n        if (index != ECMA_STRING_NOT_ARRAY_INDEX)\n        {\n          if (JERRY_LIKELY (index < ext_object_p->u.array.length))\n          {\n            ecma_value_t *values_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, object_p->u1.property_list_cp);\n\n            if (ecma_is_value_array_hole (values_p[index]))\n            {\n              return ECMA_PROPERTY_TYPE_NOT_FOUND;\n            }\n\n            if (options & ECMA_PROPERTY_GET_VALUE)\n            {\n              property_ref_p->virtual_value = ecma_fast_copy_value (values_p[index]);\n            }\n\n            return ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE | ECMA_PROPERTY_VIRTUAL;\n          }\n        }\n\n        return ECMA_PROPERTY_TYPE_NOT_FOUND;\n      }\n\n      break;\n    }\n    default:\n    {\n      break;\n    }\n  }\n\n  ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);\n  ecma_object_type_t type = ecma_get_object_type (object_p);\n\n  if (property_p == NULL)\n  {\n    switch (type)\n    {\n      case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:\n      {\n        if (ecma_builtin_function_is_routine (object_p))\n        {\n          property_p = ecma_builtin_routine_try_to_instantiate_property (object_p, property_name_p);\n          break;\n        }\n        /* FALLTHRU */\n      }\n      case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:\n      case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:\n      case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:\n      {\n        property_p = ecma_builtin_try_to_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_CLASS:\n      {\n        if (((ecma_extended_object_t *) object_p)->u.cls.type == ECMA_OBJECT_CLASS_ARGUMENTS)\n        {\n          property_p = ecma_op_arguments_object_try_to_lazy_instantiate_property (object_p, property_name_p);\n        }\n        break;\n      }\n      case ECMA_OBJECT_TYPE_FUNCTION:\n      {\n#if !JERRY_ESNEXT\n        if (ecma_string_is_length (property_name_p))\n        {\n          if (options & ECMA_PROPERTY_GET_VALUE)\n          {\n            /* Get length virtual property. */\n            ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;\n            const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);\n\n            uint32_t len;\n            if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)\n            {\n              cbc_uint16_arguments_t *args_p = (cbc_uint16_arguments_t *) bytecode_data_p;\n              len = args_p->argument_end;\n            }\n            else\n            {\n              cbc_uint8_arguments_t *args_p = (cbc_uint8_arguments_t *) bytecode_data_p;\n              len = args_p->argument_end;\n            }\n\n            property_ref_p->virtual_value = ecma_make_uint32_value (len);\n          }\n\n          return ECMA_PROPERTY_VIRTUAL;\n        }\n#endif /* !JERRY_ESNEXT */\n\n        /* Get prototype physical property. */\n        property_p = ecma_op_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:\n      {\n        property_p = ecma_op_external_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_BOUND_FUNCTION:\n      {\n        property_p = ecma_op_bound_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      default:\n      {\n        break;\n      }\n    }\n\n    if (property_p == NULL)\n    {\n      return ECMA_PROPERTY_TYPE_NOT_FOUND;\n    }\n  }\n  else if (type == ECMA_OBJECT_TYPE_CLASS\n           && ((ecma_extended_object_t *) object_p)->u.cls.type == ECMA_OBJECT_CLASS_ARGUMENTS\n           && (((ecma_extended_object_t *) object_p)->u.cls.u1.arguments_flags & ECMA_ARGUMENTS_OBJECT_MAPPED))\n  {\n    ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n    uint32_t index = ecma_string_get_array_index (property_name_p);\n\n    if (index < ext_object_p->u.cls.u2.formal_params_number)\n    {\n      ecma_mapped_arguments_t *mapped_arguments_p = (ecma_mapped_arguments_t *) ext_object_p;\n\n      ecma_value_t *argv_p = (ecma_value_t *) (mapped_arguments_p + 1);\n\n      if (!ecma_is_value_empty (argv_p[index]) && argv_p[index] != ECMA_VALUE_ARGUMENT_NO_TRACK)\n      {\n#if JERRY_LCACHE\n        /* Mapped arguments initialized properties MUST not be lcached */\n        if (ecma_is_property_lcached (property_p))\n        {\n          jmem_cpointer_t prop_name_cp;\n\n          if (JERRY_UNLIKELY (ECMA_IS_DIRECT_STRING (property_name_p)))\n          {\n            prop_name_cp = (jmem_cpointer_t) ECMA_GET_DIRECT_STRING_VALUE (property_name_p);\n          }\n          else\n          {\n            ECMA_SET_NON_NULL_POINTER (prop_name_cp, property_name_p);\n          }\n          ecma_lcache_invalidate (object_p, prop_name_cp, property_p);\n        }\n#endif /* JERRY_LCACHE */\n        ecma_string_t *name_p = ecma_op_arguments_object_get_formal_parameter (mapped_arguments_p, index);\n        ecma_object_t *lex_env_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_object_t, mapped_arguments_p->lex_env);\n\n        ecma_value_t binding_value = ecma_op_get_binding_value (lex_env_p, name_p, true);\n\n        ecma_named_data_property_assign_value (object_p,\n                                               ECMA_PROPERTY_VALUE_PTR (property_p),\n                                               binding_value);\n        ecma_free_value (binding_value);\n      }\n    }\n  }\n\n  if (options & ECMA_PROPERTY_GET_EXT_REFERENCE)\n  {\n    ((ecma_extended_property_ref_t *) property_ref_p)->property_p = property_p;\n  }\n\n  if (property_ref_p != NULL)\n  {\n    property_ref_p->value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n  }\n\n  return *property_p;\n}",
        "begin_line": 72,
        "end_line": 436,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_own_property_descriptor#1944",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_own_property_descriptor (ecma_object_t *object_p, /**< the object */                                             ecma_string_t *property_name_p, /**< property name */                                             ecma_property_descriptor_t *prop_desc_p) /**< property descriptor */",
        "snippet": "ecma_value_t\necma_op_object_get_own_property_descriptor (ecma_object_t *object_p, /**< the object */\n                                            ecma_string_t *property_name_p, /**< property name */\n                                            ecma_property_descriptor_t *prop_desc_p) /**< property descriptor */\n{\n  *prop_desc_p = ecma_make_empty_property_descriptor ();\n\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_IS_PROXY (object_p))\n  {\n    return ecma_proxy_object_get_own_property_descriptor (object_p, property_name_p, prop_desc_p);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  ecma_property_ref_t property_ref;\n  property_ref.virtual_value = ECMA_VALUE_EMPTY;\n  ecma_property_t property = ecma_op_object_get_own_property (object_p,\n                                                              property_name_p,\n                                                              &property_ref,\n                                                              ECMA_PROPERTY_GET_VALUE);\n\n  if (ECMA_IS_VALUE_ERROR (property_ref.virtual_value))\n  {\n    return property_ref.virtual_value;\n  }\n\n  if (property == ECMA_PROPERTY_TYPE_NOT_FOUND || property == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP)\n  {\n    return ECMA_VALUE_FALSE;\n  }\n\n  uint32_t flags = ecma_is_property_enumerable (property) ? JERRY_PROP_IS_ENUMERABLE : JERRY_PROP_NO_OPTS;\n  flags |= ecma_is_property_configurable (property) ? JERRY_PROP_IS_CONFIGURABLE: JERRY_PROP_NO_OPTS;\n\n  prop_desc_p->flags = (uint16_t) (JERRY_PROP_IS_ENUMERABLE_DEFINED | JERRY_PROP_IS_CONFIGURABLE_DEFINED | flags);\n\n  if (property & ECMA_PROPERTY_FLAG_DATA)\n  {\n    if (!ECMA_PROPERTY_IS_VIRTUAL (property))\n    {\n      prop_desc_p->value = ecma_copy_value (property_ref.value_p->value);\n    }\n    else\n    {\n#if JERRY_MODULE_SYSTEM\n      if (JERRY_UNLIKELY (property_ref.virtual_value == ECMA_VALUE_UNINITIALIZED))\n      {\n        return ecma_raise_reference_error (ECMA_ERR_MSG (ecma_error_let_const_not_initialized));\n      }\n#endif /* JERRY_MODULE_SYSTEM */\n      prop_desc_p->value = property_ref.virtual_value;\n    }\n\n    prop_desc_p->flags |= (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE_DEFINED);\n    prop_desc_p->flags = (uint16_t) (prop_desc_p->flags | (ecma_is_property_writable (property) ? JERRY_PROP_IS_WRITABLE\n                                                                                                : JERRY_PROP_NO_OPTS));\n  }\n  else\n  {\n    ecma_getter_setter_pointers_t *get_set_pair_p = ecma_get_named_accessor_property (property_ref.value_p);\n    prop_desc_p->flags |= (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED);\n\n    if (get_set_pair_p->getter_cp == JMEM_CP_NULL)\n    {\n      prop_desc_p->get_p = NULL;\n    }\n    else\n    {\n      prop_desc_p->get_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, get_set_pair_p->getter_cp);\n      ecma_ref_object (prop_desc_p->get_p);\n    }\n\n    if (get_set_pair_p->setter_cp == JMEM_CP_NULL)\n    {\n      prop_desc_p->set_p = NULL;\n    }\n    else\n    {\n      prop_desc_p->set_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, get_set_pair_p->setter_cp);\n      ecma_ref_object (prop_desc_p->set_p);\n    }\n  }\n\n  return ECMA_VALUE_TRUE;\n}",
        "begin_line": 1944,
        "end_line": 2028,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_with_receiver#908",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_with_receiver (ecma_object_t *object_p, /**< the object */                                   ecma_string_t *property_name_p, /**< property name */                                   ecma_value_t receiver) /**< receiver to invoke getter function */",
        "snippet": "ecma_value_t\necma_op_object_get_with_receiver (ecma_object_t *object_p, /**< the object */\n                                  ecma_string_t *property_name_p, /**< property name */\n                                  ecma_value_t receiver) /**< receiver to invoke getter function */\n{\n  while (true)\n  {\n#if JERRY_BUILTIN_PROXY\n    if (ECMA_OBJECT_IS_PROXY (object_p))\n    {\n      return ecma_proxy_object_get (object_p, property_name_p, receiver);\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n\n    ecma_value_t value = ecma_op_object_find_own (receiver, object_p, property_name_p);\n\n    if (ecma_is_value_found (value))\n    {\n      return value;\n    }\n\n    jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (object_p);\n\n    if (proto_cp == JMEM_CP_NULL)\n    {\n      break;\n    }\n\n    object_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);\n  }\n\n  return ECMA_VALUE_UNDEFINED;\n}",
        "begin_line": 908,
        "end_line": 940,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_put_with_receiver#1388",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_put_with_receiver (ecma_object_t *object_p, /**< the object */                                   ecma_string_t *property_name_p, /**< property name */                                   ecma_value_t value, /**< ecma value */                                   ecma_value_t receiver, /**< receiver */                                   bool is_throw) /**< flag that controls failure handling */",
        "snippet": "ecma_value_t\necma_op_object_put_with_receiver (ecma_object_t *object_p, /**< the object */\n                                  ecma_string_t *property_name_p, /**< property name */\n                                  ecma_value_t value, /**< ecma value */\n                                  ecma_value_t receiver, /**< receiver */\n                                  bool is_throw) /**< flag that controls failure handling */\n{\n  JERRY_ASSERT (object_p != NULL\n                && !ecma_is_lexical_environment (object_p));\n  JERRY_ASSERT (property_name_p != NULL);\n\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_IS_PROXY (object_p))\n  {\n    return ecma_proxy_object_set (object_p, property_name_p, value, receiver, is_throw);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  ecma_object_base_type_t base_type = ecma_get_object_base_type (object_p);\n\n  switch (base_type)\n  {\n    case ECMA_OBJECT_BASE_TYPE_CLASS:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n      switch (ext_object_p->u.cls.type)\n      {\n        case ECMA_OBJECT_CLASS_ARGUMENTS:\n        {\n          if (!(ext_object_p->u.cls.u1.arguments_flags & ECMA_ARGUMENTS_OBJECT_MAPPED))\n          {\n            break;\n          }\n\n          uint32_t index = ecma_string_get_array_index (property_name_p);\n\n          if (index < ext_object_p->u.cls.u2.formal_params_number)\n          {\n            ecma_mapped_arguments_t *mapped_arguments_p = (ecma_mapped_arguments_t *) ext_object_p;\n\n            ecma_value_t *argv_p = (ecma_value_t *) (mapped_arguments_p + 1);\n\n            if (!ecma_is_value_empty (argv_p[index]) && argv_p[index] != ECMA_VALUE_ARGUMENT_NO_TRACK)\n            {\n              ecma_string_t *name_p = ecma_op_arguments_object_get_formal_parameter (mapped_arguments_p, index);\n              ecma_object_t *lex_env_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_object_t, mapped_arguments_p->lex_env);\n              ecma_op_set_mutable_binding (lex_env_p, name_p, value, true);\n              return ECMA_VALUE_TRUE;\n            }\n          }\n          break;\n        }\n#if JERRY_BUILTIN_TYPEDARRAY\n        /* ES2015 9.4.5.5 */\n        case ECMA_OBJECT_CLASS_TYPEDARRAY:\n        {\n          if (ecma_prop_name_is_symbol (property_name_p))\n          {\n            break;\n          }\n\n          ecma_number_t num = ecma_string_to_number (property_name_p);\n          bool is_same;\n          if (num <= 0)\n          {\n            is_same = true;\n          }\n          else\n          {\n            ecma_string_t *num_to_str = ecma_new_ecma_string_from_number (num);\n            is_same = ecma_compare_ecma_strings (property_name_p, num_to_str);\n            ecma_deref_ecma_string (num_to_str);\n          }\n\n          if (is_same)\n          {\n            ecma_typedarray_info_t info = ecma_typedarray_get_info (object_p);\n            return ecma_set_typedarray_element (&info, value, num);\n          }\n          break;\n        }\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n#if JERRY_MODULE_SYSTEM\n        case ECMA_OBJECT_CLASS_MODULE_NAMESPACE:\n        {\n          return ecma_raise_readonly_assignment (property_name_p, is_throw);\n        }\n#endif /* JERRY_MODULE_SYSTEM */\n      }\n      break;\n    }\n    case ECMA_OBJECT_BASE_TYPE_ARRAY:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n      if (ecma_string_is_length (property_name_p))\n      {\n        if (ecma_is_property_writable ((ecma_property_t) ext_object_p->u.array.length_prop_and_hole_count))\n        {\n          return ecma_op_array_object_set_length (object_p, value, 0);\n        }\n\n        return ecma_raise_readonly_assignment (property_name_p, is_throw);\n      }\n\n      if (JERRY_LIKELY (ecma_op_array_is_fast_array (ext_object_p)))\n      {\n        uint32_t index = ecma_string_get_array_index (property_name_p);\n\n        if (JERRY_UNLIKELY (index == ECMA_STRING_NOT_ARRAY_INDEX))\n        {\n          ecma_fast_array_convert_to_normal (object_p);\n        }\n        else if (ecma_fast_array_set_property (object_p, index, value))\n        {\n          return ECMA_VALUE_TRUE;\n        }\n      }\n\n      JERRY_ASSERT (!ecma_op_object_is_fast_array (object_p));\n      break;\n    }\n    default:\n    {\n      break;\n    }\n  }\n\n  ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);\n\n  if (property_p == NULL)\n  {\n    switch (ecma_get_object_type (object_p))\n    {\n      case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:\n      {\n        if (ecma_builtin_function_is_routine (object_p))\n        {\n          property_p = ecma_builtin_routine_try_to_instantiate_property (object_p, property_name_p);\n          break;\n        }\n        /* FALLTHRU */\n      }\n      case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:\n      case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:\n      case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:\n      {\n        property_p = ecma_builtin_try_to_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_CLASS:\n      {\n        ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n        switch (ext_object_p->u.cls.type)\n        {\n          case ECMA_OBJECT_CLASS_STRING:\n          {\n            uint32_t index = ecma_string_get_array_index (property_name_p);\n\n            if (index != ECMA_STRING_NOT_ARRAY_INDEX)\n            {\n              ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;\n              ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);\n\n              if (index < ecma_string_get_length (prim_value_str_p))\n              {\n                return ecma_raise_readonly_assignment (property_name_p, is_throw);\n              }\n            }\n            break;\n          }\n          case ECMA_OBJECT_CLASS_ARGUMENTS:\n          {\n            property_p = ecma_op_arguments_object_try_to_lazy_instantiate_property (object_p, property_name_p);\n            break;\n          }\n        }\n        break;\n      }\n      case ECMA_OBJECT_TYPE_FUNCTION:\n      {\n        if (ecma_string_is_length (property_name_p))\n        {\n          /* Uninitialized 'length' property is non-writable (ECMA-262 v6, 19.2.4.1) */\n#if JERRY_ESNEXT\n          if (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (((ecma_extended_object_t *) object_p)->u.function.scope_cp))\n#endif /* JERRY_ESNEXT */\n          {\n            return ecma_raise_readonly_assignment (property_name_p, is_throw);\n          }\n        }\n\n        /* Get prototype physical property. */\n        property_p = ecma_op_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:\n      {\n        property_p = ecma_op_external_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_BOUND_FUNCTION:\n      {\n        property_p = ecma_op_bound_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      default:\n      {\n        break;\n      }\n    }\n  }\n\n  jmem_cpointer_t setter_cp = JMEM_CP_NULL;\n\n  if (property_p != NULL)\n  {\n    JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));\n\n    if (*property_p & ECMA_PROPERTY_FLAG_DATA)\n    {\n      if (ecma_is_property_writable (*property_p))\n      {\n#if JERRY_ESNEXT\n        if (ecma_make_object_value (object_p) != receiver)\n        {\n          return ecma_op_object_put_apply_receiver (receiver, property_name_p, value, is_throw);\n        }\n#endif /* JERRY_ESNEXT */\n\n        /* There is no need for special casing arrays here because changing the\n         * value of an existing property never changes the length of an array. */\n        ecma_named_data_property_assign_value (object_p,\n                                               ECMA_PROPERTY_VALUE_PTR (property_p),\n                                               value);\n        return ECMA_VALUE_TRUE;\n      }\n    }\n    else\n    {\n      ecma_getter_setter_pointers_t *get_set_pair_p;\n      get_set_pair_p = ecma_get_named_accessor_property (ECMA_PROPERTY_VALUE_PTR (property_p));\n      setter_cp = get_set_pair_p->setter_cp;\n    }\n  }\n  else\n  {\n    bool create_new_property = true;\n\n    jmem_cpointer_t obj_cp;\n    ECMA_SET_NON_NULL_POINTER (obj_cp, object_p);\n    ecma_object_t *proto_p = object_p;\n\n    while (true)\n    {\n      obj_cp = ecma_op_ordinary_object_get_prototype_of (proto_p);\n\n      if (obj_cp == JMEM_CP_NULL)\n      {\n        break;\n      }\n\n      ecma_property_ref_t property_ref = { NULL };\n      proto_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, obj_cp);\n\n#if JERRY_BUILTIN_PROXY\n      if (ECMA_OBJECT_IS_PROXY (proto_p))\n      {\n        return ecma_op_object_put_with_receiver (proto_p,\n                                                 property_name_p,\n                                                 value,\n                                                 receiver,\n                                                 is_throw);\n      }\n#endif /* JERRY_BUILTIN_PROXY */\n\n      ecma_property_t inherited_property = ecma_op_object_get_own_property (proto_p,\n                                                                            property_name_p,\n                                                                            &property_ref,\n                                                                            ECMA_PROPERTY_GET_NO_OPTIONS);\n\n      if (inherited_property != ECMA_PROPERTY_TYPE_NOT_FOUND\n          && inherited_property != ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP)\n      {\n        JERRY_ASSERT (ECMA_PROPERTY_IS_NAMED_PROPERTY (inherited_property));\n\n        if (!(inherited_property & ECMA_PROPERTY_FLAG_DATA))\n        {\n          setter_cp = ecma_get_named_accessor_property (property_ref.value_p)->setter_cp;\n          create_new_property = false;\n          break;\n        }\n\n        create_new_property = ecma_is_property_writable (inherited_property);\n        break;\n      }\n    }\n\n#if JERRY_BUILTIN_PROXY\n    if (create_new_property\n        && ecma_is_value_object (receiver)\n        && ECMA_OBJECT_IS_PROXY (ecma_get_object_from_value (receiver)))\n    {\n      return ecma_op_object_put_apply_receiver (receiver, property_name_p, value, is_throw);\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n\n    if (create_new_property\n        && ecma_op_ordinary_object_is_extensible (object_p))\n    {\n      const ecma_object_base_type_t obj_base_type = ecma_get_object_base_type (object_p);\n\n      if (obj_base_type == ECMA_OBJECT_BASE_TYPE_CLASS)\n      {\n        ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n        if (ext_object_p->u.cls.type == ECMA_OBJECT_CLASS_ARGUMENTS\n            && ext_object_p->u.cls.u1.arguments_flags & ECMA_ARGUMENTS_OBJECT_MAPPED)\n        {\n          const uint32_t flags = ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE | JERRY_PROP_SHOULD_THROW;\n          return ecma_builtin_helper_def_prop (object_p, property_name_p, value, flags);\n        }\n      }\n\n      uint32_t index = ecma_string_get_array_index (property_name_p);\n\n      if (obj_base_type == ECMA_OBJECT_BASE_TYPE_ARRAY\n          && index != ECMA_STRING_NOT_ARRAY_INDEX)\n      {\n        ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n        if (index < UINT32_MAX\n            && index >= ext_object_p->u.array.length)\n        {\n          if (!ecma_is_property_writable ((ecma_property_t) ext_object_p->u.array.length_prop_and_hole_count))\n          {\n            return ecma_raise_readonly_assignment (property_name_p, is_throw);\n          }\n\n          ext_object_p->u.array.length = index + 1;\n        }\n      }\n\n#if JERRY_ESNEXT\n      return ecma_op_object_put_apply_receiver (receiver, property_name_p, value, is_throw);\n#endif /* JERRY_ESNEXT */\n\n      ecma_property_value_t *new_prop_value_p;\n      new_prop_value_p = ecma_create_named_data_property (object_p,\n                                                          property_name_p,\n                                                          ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,\n                                                          NULL);\n\n      JERRY_ASSERT (ecma_is_value_undefined (new_prop_value_p->value));\n      new_prop_value_p->value = ecma_copy_value_if_not_object (value);\n      return ECMA_VALUE_TRUE;\n    }\n  }\n\n  if (setter_cp == JMEM_CP_NULL)\n  {\n    return ecma_raise_readonly_assignment (property_name_p, is_throw);\n  }\n\n  ecma_value_t ret_value = ecma_op_function_call (ECMA_GET_NON_NULL_POINTER (ecma_object_t, setter_cp),\n                                                  receiver,\n                                                  &value,\n                                                  1);\n\n  if (!ECMA_IS_VALUE_ERROR (ret_value))\n  {\n    ecma_fast_free_value (ret_value);\n    ret_value = ECMA_VALUE_TRUE;\n  }\n\n  return ret_value;\n}",
        "begin_line": 1388,
        "end_line": 1766,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-reference.ecma_op_object_bound_environment_resolve_reference_value#218",
        "src_path": "jerry-core/ecma/operations/ecma-reference.c",
        "class_name": "jerry-core.ecma.operations.ecma-reference",
        "signature": "jerry-core.ecma.operations.ecma-reference.ecma_op_object_bound_environment_resolve_reference_value (ecma_object_t *lex_env_p, /**< lexical environment */                                                           ecma_string_t *name_p) /**< variable name */",
        "snippet": "ecma_value_t\necma_op_object_bound_environment_resolve_reference_value (ecma_object_t *lex_env_p, /**< lexical environment */\n                                                          ecma_string_t *name_p) /**< variable name */\n{\n  ecma_object_t *binding_obj_p = ecma_get_lex_env_binding_object (lex_env_p);\n  ecma_value_t found_binding;\n\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_IS_PROXY (binding_obj_p))\n  {\n    found_binding = ecma_proxy_object_has (binding_obj_p, name_p);\n\n    if (!ecma_is_value_true (found_binding))\n    {\n      return ECMA_IS_VALUE_ERROR (found_binding) ? found_binding : ECMA_VALUE_NOT_FOUND;\n    }\n  }\n  else\n  {\n#endif /* JERRY_BUILTIN_PROXY */\n    found_binding = ecma_op_object_find (binding_obj_p, name_p);\n\n    if (ECMA_IS_VALUE_ERROR (found_binding) || !ecma_is_value_found (found_binding))\n    {\n      return found_binding;\n    }\n\n#if JERRY_ESNEXT\n    if (JERRY_LIKELY (ecma_op_is_global_environment (lex_env_p)))\n#endif /* JERRY_ESNEXT */\n    {\n      return found_binding;\n    }\n#if JERRY_BUILTIN_PROXY\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n#if JERRY_ESNEXT\n  ecma_value_t blocked = ecma_op_is_prop_unscopable (binding_obj_p, name_p);\n\n  if (ecma_is_value_false (blocked))\n  {\n#if JERRY_BUILTIN_PROXY\n    if (ECMA_OBJECT_IS_PROXY (binding_obj_p))\n    {\n      return ecma_proxy_object_get (binding_obj_p, name_p, ecma_make_object_value (binding_obj_p));\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n    return found_binding;\n  }\n\n#if JERRY_BUILTIN_PROXY\n  if (!ECMA_OBJECT_IS_PROXY (binding_obj_p))\n  {\n    ecma_free_value (found_binding);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  return ECMA_IS_VALUE_ERROR (blocked) ? blocked : ECMA_VALUE_NOT_FOUND;\n#endif /* JERRY_ESNEXT */\n}",
        "begin_line": 218,
        "end_line": 278,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-reference.ecma_op_resolve_reference_value#285",
        "src_path": "jerry-core/ecma/operations/ecma-reference.c",
        "class_name": "jerry-core.ecma.operations.ecma-reference",
        "signature": "jerry-core.ecma.operations.ecma-reference.ecma_op_resolve_reference_value (ecma_object_t *lex_env_p, /**< starting lexical environment */                                  ecma_string_t *name_p) /**< identifier's name */",
        "snippet": "ecma_value_t\necma_op_resolve_reference_value (ecma_object_t *lex_env_p, /**< starting lexical environment */\n                                 ecma_string_t *name_p) /**< identifier's name */\n{\n  JERRY_ASSERT (lex_env_p != NULL);\n\n  while (true)\n  {\n    switch (ecma_get_lex_env_type (lex_env_p))\n    {\n      case ECMA_LEXICAL_ENVIRONMENT_DECLARATIVE:\n      {\n        ecma_property_t *property_p = ecma_find_named_property (lex_env_p, name_p);\n\n        if (property_p == NULL)\n        {\n          break;\n        }\n\n        ecma_property_value_t *property_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n#if JERRY_ESNEXT\n        if (JERRY_UNLIKELY (property_value_p->value == ECMA_VALUE_UNINITIALIZED))\n        {\n          return ecma_raise_reference_error (ECMA_ERR_MSG (ecma_error_let_const_not_initialized));\n        }\n#endif /* JERRY_ESNEXT */\n\n        return ecma_fast_copy_value (property_value_p->value);\n      }\n#if JERRY_ESNEXT\n      case ECMA_LEXICAL_ENVIRONMENT_CLASS:\n      {\n#if JERRY_MODULE_SYSTEM\n        if (lex_env_p->type_flags_refs & ECMA_OBJECT_FLAG_LEXICAL_ENV_HAS_DATA)\n        {\n          ecma_property_t *property_p = ecma_find_named_property (lex_env_p, name_p);\n\n          if (property_p == NULL)\n          {\n            break;\n          }\n\n          ecma_property_value_t *property_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n          if (!(*property_p & ECMA_PROPERTY_FLAG_DATA))\n          {\n            property_value_p = ecma_get_property_value_from_named_reference (property_value_p);\n          }\n\n          if (JERRY_UNLIKELY (property_value_p->value == ECMA_VALUE_UNINITIALIZED))\n          {\n            return ecma_raise_reference_error (ECMA_ERR_MSG (ecma_error_let_const_not_initialized));\n          }\n\n          return ecma_fast_copy_value (property_value_p->value);\n        }\n#endif /* JERRY_MODULE_SYSTEM */\n        break;\n      }\n#endif /* JERRY_ESNEXT */\n      default:\n      {\n        JERRY_ASSERT (ecma_get_lex_env_type (lex_env_p) == ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND);\n#if JERRY_ESNEXT\n        bool lcache_lookup_allowed = ecma_op_is_global_environment (lex_env_p);\n#else /* !JERRY_ESNEXT*/\n        bool lcache_lookup_allowed = true;\n#endif /* JERRY_ESNEXT */\n\n        if (lcache_lookup_allowed)\n        {\n#if JERRY_LCACHE\n          ecma_object_t *binding_obj_p = ecma_get_lex_env_binding_object (lex_env_p);\n          ecma_property_t *property_p = ecma_lcache_lookup (binding_obj_p, name_p);\n\n          if (property_p != NULL)\n          {\n            JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));\n\n            ecma_property_value_t *prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n            if (*property_p & ECMA_PROPERTY_FLAG_DATA)\n            {\n              return ecma_fast_copy_value (prop_value_p->value);\n            }\n\n            ecma_getter_setter_pointers_t *get_set_pair_p = ecma_get_named_accessor_property (prop_value_p);\n\n            if (get_set_pair_p->getter_cp == JMEM_CP_NULL)\n            {\n              return ECMA_VALUE_UNDEFINED;\n            }\n\n            ecma_object_t *getter_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, get_set_pair_p->getter_cp);\n\n            ecma_value_t base_value = ecma_make_object_value (binding_obj_p);\n            return ecma_op_function_call (getter_p, base_value, NULL, 0);\n          }\n#endif /* JERRY_LCACHE */\n        }\n\n        ecma_value_t result = ecma_op_object_bound_environment_resolve_reference_value (lex_env_p, name_p);\n\n        if (ecma_is_value_found (result))\n        {\n          /* Note: the result may contains ECMA_VALUE_ERROR */\n          return result;\n        }\n        break;\n      }\n    }\n\n    if (lex_env_p->u2.outer_reference_cp == JMEM_CP_NULL)\n    {\n      break;\n    }\n\n    lex_env_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, lex_env_p->u2.outer_reference_cp);\n  }\n\n#if JERRY_ERROR_MESSAGES\n  ecma_value_t name_val = ecma_make_string_value (name_p);\n  ecma_value_t error_value = ecma_raise_standard_error_with_format (JERRY_ERROR_REFERENCE,\n                                                                    \"% is not defined\",\n                                                                    name_val);\n#else /* JERRY_ERROR_MESSAGES */\n  ecma_value_t error_value = ecma_raise_reference_error (NULL);\n#endif /* !JERRY_ERROR_MESSAGES */\n  return error_value;\n}",
        "begin_line": 285,
        "end_line": 415,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-allocator.jmem_finalize#158",
        "src_path": "jerry-core/jmem/jmem-allocator.c",
        "class_name": "jerry-core.jmem.jmem-allocator",
        "signature": "jerry-core.jmem.jmem-allocator.jmem_finalize (void)",
        "snippet": "void\njmem_finalize (void)\n{\n  jmem_pools_finalize ();\n\n#if JERRY_MEM_STATS\n  if (JERRY_CONTEXT (jerry_init_flags) & JERRY_INIT_MEM_STATS)\n  {\n    jmem_heap_stats_print ();\n  }\n#endif /* JERRY_MEM_STATS */\n\n  jmem_heap_finalize ();\n}",
        "begin_line": 158,
        "end_line": 171,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-allocator.jmem_init#149",
        "src_path": "jerry-core/jmem/jmem-allocator.c",
        "class_name": "jerry-core.jmem.jmem-allocator",
        "signature": "jerry-core.jmem.jmem-allocator.jmem_init (void)",
        "snippet": "void\njmem_init (void)\n{\n  jmem_heap_init ();\n}",
        "begin_line": 149,
        "end_line": 153,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-heap.jmem_heap_finalize#104",
        "src_path": "jerry-core/jmem/jmem-heap.c",
        "class_name": "jerry-core.jmem.jmem-heap",
        "signature": "jerry-core.jmem.jmem-heap.jmem_heap_finalize (void)",
        "snippet": "void\njmem_heap_finalize (void)\n{\n  JERRY_ASSERT (JERRY_CONTEXT (jmem_heap_allocated_size) == 0);\n#if !JERRY_SYSTEM_ALLOCATOR\n  JMEM_VALGRIND_NOACCESS_SPACE (&JERRY_HEAP_CONTEXT (first), JMEM_HEAP_SIZE);\n#endif /* !JERRY_SYSTEM_ALLOCATOR */\n}",
        "begin_line": 104,
        "end_line": 111,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-heap.jmem_heap_find_prev#360",
        "src_path": "jerry-core/jmem/jmem-heap.c",
        "class_name": "jerry-core.jmem.jmem-heap",
        "signature": "jerry-core.jmem.jmem-heap.jmem_heap_find_prev (const jmem_heap_free_t * const block_p) /**< which memory block's predecessor we're looking for */",
        "snippet": "static jmem_heap_free_t *\njmem_heap_find_prev (const jmem_heap_free_t * const block_p) /**< which memory block's predecessor we're looking for */\n{\n  const jmem_heap_free_t *prev_p;\n\n  if (block_p > JERRY_CONTEXT (jmem_heap_list_skip_p))\n  {\n    prev_p = JERRY_CONTEXT (jmem_heap_list_skip_p);\n  }\n  else\n  {\n    prev_p = &JERRY_HEAP_CONTEXT (first);\n  }\n\n  JERRY_ASSERT (jmem_is_heap_pointer (block_p));\n  const uint32_t block_offset = JMEM_HEAP_GET_OFFSET_FROM_ADDR (block_p);\n\n  JMEM_VALGRIND_DEFINED_SPACE (prev_p, sizeof (jmem_heap_free_t));\n  /* Find position of region in the list. */\n  while (prev_p->next_offset < block_offset)\n  {\n    const jmem_heap_free_t * const next_p = JMEM_HEAP_GET_ADDR_FROM_OFFSET (prev_p->next_offset);\n    JERRY_ASSERT (jmem_is_heap_pointer (next_p));\n\n    JMEM_VALGRIND_DEFINED_SPACE (next_p, sizeof (jmem_heap_free_t));\n    JMEM_VALGRIND_NOACCESS_SPACE (prev_p, sizeof (jmem_heap_free_t));\n    prev_p = next_p;\n  }\n\n  JMEM_VALGRIND_NOACCESS_SPACE (prev_p, sizeof (jmem_heap_free_t));\n  return (jmem_heap_free_t *) prev_p;\n}",
        "begin_line": 360,
        "end_line": 391,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-heap.jmem_heap_gc_and_alloc_block#270",
        "src_path": "jerry-core/jmem/jmem-heap.c",
        "class_name": "jerry-core.jmem.jmem-heap",
        "signature": "jerry-core.jmem.jmem-heap.jmem_heap_gc_and_alloc_block (const size_t size, /**< required memory size */                               jmem_pressure_t max_pressure) /**< pressure limit */",
        "snippet": "static void *\njmem_heap_gc_and_alloc_block (const size_t size, /**< required memory size */\n                              jmem_pressure_t max_pressure) /**< pressure limit */\n{\n  if (JERRY_UNLIKELY (size == 0))\n  {\n    return NULL;\n  }\n\n  jmem_pressure_t pressure = JMEM_PRESSURE_NONE;\n\n#if !JERRY_MEM_GC_BEFORE_EACH_ALLOC\n  if (JERRY_CONTEXT (jmem_heap_allocated_size) + size >= JERRY_CONTEXT (jmem_heap_limit))\n  {\n    pressure = JMEM_PRESSURE_LOW;\n    ecma_free_unused_memory (pressure);\n  }\n#else /* !JERRY_MEM_GC_BEFORE_EACH_ALLOC */\n  ecma_gc_run ();\n#endif /* JERRY_MEM_GC_BEFORE_EACH_ALLOC */\n\n  void *data_space_p = jmem_heap_alloc (size);\n\n  while (JERRY_UNLIKELY (data_space_p == NULL) && JERRY_LIKELY (pressure < max_pressure))\n  {\n    pressure++;\n    ecma_free_unused_memory (pressure);\n    data_space_p = jmem_heap_alloc (size);\n  }\n\n  return data_space_p;\n}",
        "begin_line": 270,
        "end_line": 301,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-heap.jmem_heap_init#72",
        "src_path": "jerry-core/jmem/jmem-heap.c",
        "class_name": "jerry-core.jmem.jmem-heap",
        "signature": "jerry-core.jmem.jmem-heap.jmem_heap_init (void)",
        "snippet": "void\njmem_heap_init (void)\n{\n#if !JERRY_SYSTEM_ALLOCATOR\n#if !JERRY_CPOINTER_32_BIT\n  /* the maximum heap size for 16bit compressed pointers should be 512K */\n  JERRY_ASSERT (((UINT16_MAX + 1) << JMEM_ALIGNMENT_LOG) >= JMEM_HEAP_SIZE);\n#endif /* !JERRY_CPOINTER_32_BIT */\n  JERRY_ASSERT ((uintptr_t) JERRY_HEAP_CONTEXT (area) % JMEM_ALIGNMENT == 0);\n\n  JERRY_CONTEXT (jmem_heap_limit) = CONFIG_GC_LIMIT;\n\n  jmem_heap_free_t *const region_p = (jmem_heap_free_t *) JERRY_HEAP_CONTEXT (area);\n\n  region_p->size = JMEM_HEAP_AREA_SIZE;\n  region_p->next_offset = JMEM_HEAP_END_OF_LIST;\n\n  JERRY_HEAP_CONTEXT (first).size = 0;\n  JERRY_HEAP_CONTEXT (first).next_offset = JMEM_HEAP_GET_OFFSET_FROM_ADDR (region_p);\n\n  JERRY_CONTEXT (jmem_heap_list_skip_p) = &JERRY_HEAP_CONTEXT (first);\n\n  JMEM_VALGRIND_NOACCESS_SPACE (&JERRY_HEAP_CONTEXT (first), sizeof (jmem_heap_free_t));\n  JMEM_VALGRIND_NOACCESS_SPACE (JERRY_HEAP_CONTEXT (area), JMEM_HEAP_AREA_SIZE);\n\n#endif /* !JERRY_SYSTEM_ALLOCATOR */\n  JMEM_HEAP_STAT_INIT ();\n}",
        "begin_line": 72,
        "end_line": 99,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-heap.jmem_heap_insert_block#399",
        "src_path": "jerry-core/jmem/jmem-heap.c",
        "class_name": "jerry-core.jmem.jmem-heap",
        "signature": "jerry-core.jmem.jmem-heap.jmem_heap_insert_block (jmem_heap_free_t *block_p, /**< block to insert */                         jmem_heap_free_t *prev_p, /**< the free block after which to insert 'block_p' */                         const size_t size) /**< size of the inserted block */",
        "snippet": "static void\njmem_heap_insert_block (jmem_heap_free_t *block_p, /**< block to insert */\n                        jmem_heap_free_t *prev_p, /**< the free block after which to insert 'block_p' */\n                        const size_t size) /**< size of the inserted block */\n{\n  JERRY_ASSERT ((uintptr_t) block_p % JMEM_ALIGNMENT == 0);\n  JERRY_ASSERT (size % JMEM_ALIGNMENT == 0);\n\n  JMEM_VALGRIND_NOACCESS_SPACE (block_p, size);\n\n  JMEM_VALGRIND_DEFINED_SPACE (prev_p, sizeof (jmem_heap_free_t));\n  jmem_heap_free_t *next_p = JMEM_HEAP_GET_ADDR_FROM_OFFSET (prev_p->next_offset);\n  JMEM_VALGRIND_DEFINED_SPACE (block_p, sizeof (jmem_heap_free_t));\n  JMEM_VALGRIND_DEFINED_SPACE (next_p, sizeof (jmem_heap_free_t));\n\n  const uint32_t block_offset = JMEM_HEAP_GET_OFFSET_FROM_ADDR (block_p);\n\n  /* Update prev. */\n  if (jmem_heap_get_region_end (prev_p) == block_p)\n  {\n    /* Can be merged. */\n    prev_p->size += (uint32_t) size;\n    JMEM_VALGRIND_NOACCESS_SPACE (block_p, sizeof (jmem_heap_free_t));\n    block_p = prev_p;\n  }\n  else\n  {\n    block_p->size = (uint32_t) size;\n    prev_p->next_offset = block_offset;\n  }\n\n  /* Update next. */\n  if (jmem_heap_get_region_end (block_p) == next_p)\n  {\n    /* Can be merged. */\n    block_p->size += next_p->size;\n    block_p->next_offset = next_p->next_offset;\n  }\n  else\n  {\n    block_p->next_offset = JMEM_HEAP_GET_OFFSET_FROM_ADDR (next_p);\n  }\n\n  JERRY_CONTEXT (jmem_heap_list_skip_p) = prev_p;\n\n  JMEM_VALGRIND_NOACCESS_SPACE (prev_p, sizeof (jmem_heap_free_t));\n  JMEM_VALGRIND_NOACCESS_SPACE (block_p, sizeof (jmem_heap_free_t));\n  JMEM_VALGRIND_NOACCESS_SPACE (next_p, sizeof (jmem_heap_free_t));\n}",
        "begin_line": 399,
        "end_line": 447,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-heap.jmem_is_heap_pointer#706",
        "src_path": "jerry-core/jmem/jmem-heap.c",
        "class_name": "jerry-core.jmem.jmem-heap",
        "signature": "jerry-core.jmem.jmem-heap.jmem_is_heap_pointer (const void *pointer) /**< pointer */",
        "snippet": "bool\njmem_is_heap_pointer (const void *pointer) /**< pointer */\n{\n#if !JERRY_SYSTEM_ALLOCATOR\n  return ((uint8_t *) pointer >= JERRY_HEAP_CONTEXT (area)\n          && (uint8_t *) pointer <= (JERRY_HEAP_CONTEXT (area) + JMEM_HEAP_AREA_SIZE));\n#else /* JERRY_SYSTEM_ALLOCATOR */\n  JERRY_UNUSED (pointer);\n  return true;\n#endif /* !JERRY_SYSTEM_ALLOCATOR */\n}",
        "begin_line": 706,
        "end_line": 716,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-poolman.jmem_pools_collect_empty#156",
        "src_path": "jerry-core/jmem/jmem-poolman.c",
        "class_name": "jerry-core.jmem.jmem-poolman",
        "signature": "jerry-core.jmem.jmem-poolman.jmem_pools_collect_empty (void)",
        "snippet": "void\njmem_pools_collect_empty (void)\n{\n  jmem_pools_chunk_t *chunk_p = JERRY_CONTEXT (jmem_free_8_byte_chunk_p);\n  JERRY_CONTEXT (jmem_free_8_byte_chunk_p) = NULL;\n\n  while (chunk_p)\n  {\n    JMEM_VALGRIND_DEFINED_SPACE (chunk_p, sizeof (jmem_pools_chunk_t));\n    jmem_pools_chunk_t *const next_p = chunk_p->next_p;\n    JMEM_VALGRIND_NOACCESS_SPACE (chunk_p, sizeof (jmem_pools_chunk_t));\n\n    jmem_heap_free_block_internal (chunk_p, 8);\n    chunk_p = next_p;\n  }\n\n#if JERRY_CPOINTER_32_BIT\n  chunk_p = JERRY_CONTEXT (jmem_free_16_byte_chunk_p);\n  JERRY_CONTEXT (jmem_free_16_byte_chunk_p) = NULL;\n\n  while (chunk_p)\n  {\n    JMEM_VALGRIND_DEFINED_SPACE (chunk_p, sizeof (jmem_pools_chunk_t));\n    jmem_pools_chunk_t *const next_p = chunk_p->next_p;\n    JMEM_VALGRIND_NOACCESS_SPACE (chunk_p, sizeof (jmem_pools_chunk_t));\n\n    jmem_heap_free_block_internal (chunk_p, 16);\n    chunk_p = next_p;\n  }\n#endif /* JERRY_CPOINTER_32_BIT */\n}",
        "begin_line": 156,
        "end_line": 186,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-poolman.jmem_pools_finalize#41",
        "src_path": "jerry-core/jmem/jmem-poolman.c",
        "class_name": "jerry-core.jmem.jmem-poolman",
        "signature": "jerry-core.jmem.jmem-poolman.jmem_pools_finalize (void)",
        "snippet": "void\njmem_pools_finalize (void)\n{\n  jmem_pools_collect_empty ();\n\n  JERRY_ASSERT (JERRY_CONTEXT (jmem_free_8_byte_chunk_p) == NULL);\n#if JERRY_CPOINTER_32_BIT\n  JERRY_ASSERT (JERRY_CONTEXT (jmem_free_16_byte_chunk_p) == NULL);\n#endif /* JERRY_CPOINTER_32_BIT */\n}",
        "begin_line": 41,
        "end_line": 50,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-char-helpers.lit_char_is_hex_digit#324",
        "src_path": "jerry-core/lit/lit-char-helpers.c",
        "class_name": "jerry-core.lit.lit-char-helpers",
        "signature": "jerry-core.lit.lit-char-helpers.lit_char_is_hex_digit (ecma_char_t c) /**< code unit */",
        "snippet": "bool\nlit_char_is_hex_digit (ecma_char_t c) /**< code unit */\n{\n  return ((c >= LIT_CHAR_ASCII_DIGITS_BEGIN && c <= LIT_CHAR_ASCII_DIGITS_END)\n          || (LEXER_TO_ASCII_LOWERCASE (c) >= LIT_CHAR_ASCII_LOWERCASE_LETTERS_HEX_BEGIN\n              && LEXER_TO_ASCII_LOWERCASE (c) <= LIT_CHAR_ASCII_LOWERCASE_LETTERS_HEX_END));\n}",
        "begin_line": 324,
        "end_line": 330,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-char-helpers.lit_char_is_white_space#134",
        "src_path": "jerry-core/lit/lit-char-helpers.c",
        "class_name": "jerry-core.lit.lit-char-helpers",
        "signature": "jerry-core.lit.lit-char-helpers.lit_char_is_white_space (lit_code_point_t c) /**< code point */",
        "snippet": "bool\nlit_char_is_white_space (lit_code_point_t c) /**< code point */\n{\n  if (c <= LIT_UTF8_1_BYTE_CODE_POINT_MAX)\n  {\n    return (c == LIT_CHAR_SP || (c >= LIT_CHAR_TAB && c <= LIT_CHAR_CR));\n  }\n\n  if (c == LIT_CHAR_BOM\n#if !JERRY_ESNEXT\n      /* Mongolian Vowel Separator (u180e) used to be a whitespace character. */\n      || c == LIT_CHAR_MVS\n#endif /* !JERRY_ESNEXT */\n      || c == LIT_CHAR_LS\n      || c == LIT_CHAR_PS)\n  {\n    return true;\n  }\n\n  return (c <= LIT_UTF16_CODE_UNIT_MAX\n          && ((c >= lit_unicode_white_space_interval_starts[0]\n                 && c <= lit_unicode_white_space_interval_starts[0] + lit_unicode_white_space_interval_lengths[0])\n              || lit_search_char_in_array ((ecma_char_t) c,\n                                            lit_unicode_white_space_chars,\n                                            NUM_OF_ELEMENTS (lit_unicode_white_space_chars))));\n}",
        "begin_line": 134,
        "end_line": 159,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-char-helpers.lit_code_point_is_identifier_part#281",
        "src_path": "jerry-core/lit/lit-char-helpers.c",
        "class_name": "jerry-core.lit.lit-char-helpers",
        "signature": "jerry-core.lit.lit-char-helpers.lit_code_point_is_identifier_part (lit_code_point_t code_point) /**< code point */",
        "snippet": "bool\nlit_code_point_is_identifier_part (lit_code_point_t code_point) /**< code point */\n{\n  /* Fast path for ASCII-defined letters. */\n  if (code_point <= LIT_UTF8_1_BYTE_CODE_POINT_MAX)\n  {\n    return ((LEXER_TO_ASCII_LOWERCASE (code_point) >= LIT_CHAR_LOWERCASE_A\n             && LEXER_TO_ASCII_LOWERCASE (code_point) <= LIT_CHAR_LOWERCASE_Z)\n            || (code_point >= LIT_CHAR_0 && code_point <= LIT_CHAR_9)\n            || code_point == LIT_CHAR_DOLLAR_SIGN\n            || code_point == LIT_CHAR_UNDERSCORE);\n  }\n\n  return lit_char_is_unicode_id_continue (code_point);\n}",
        "begin_line": 281,
        "end_line": 295,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-char-helpers.lit_code_point_is_identifier_start#261",
        "src_path": "jerry-core/lit/lit-char-helpers.c",
        "class_name": "jerry-core.lit.lit-char-helpers",
        "signature": "jerry-core.lit.lit-char-helpers.lit_code_point_is_identifier_start (lit_code_point_t code_point) /**< code point */",
        "snippet": "bool\nlit_code_point_is_identifier_start (lit_code_point_t code_point) /**< code point */\n{\n  /* Fast path for ASCII-defined letters. */\n  if (code_point <= LIT_UTF8_1_BYTE_CODE_POINT_MAX)\n  {\n    return ((LEXER_TO_ASCII_LOWERCASE (code_point) >= LIT_CHAR_LOWERCASE_A\n             && LEXER_TO_ASCII_LOWERCASE (code_point) <= LIT_CHAR_LOWERCASE_Z)\n            || code_point == LIT_CHAR_DOLLAR_SIGN\n            || code_point == LIT_CHAR_UNDERSCORE);\n  }\n\n  return lit_char_is_unicode_id_start (code_point);\n}",
        "begin_line": 261,
        "end_line": 274,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-magic-strings.lit_get_magic_string_size#67",
        "src_path": "jerry-core/lit/lit-magic-strings.c",
        "class_name": "jerry-core.lit.lit-magic-strings",
        "signature": "jerry-core.lit.lit-magic-strings.lit_get_magic_string_size (uint32_t id) /**< magic string id */",
        "snippet": "lit_utf8_size_t\nlit_get_magic_string_size (uint32_t id) /**< magic string id */\n{\n  static const lit_magic_size_t lit_magic_string_sizes[] JERRY_ATTR_CONST_DATA =\n  {\n/** @cond doxygen_suppress */\n#define LIT_MAGIC_STRING_FIRST_STRING_WITH_SIZE(size, id)\n#define LIT_MAGIC_STRING_DEF(id, utf8_string) \\\n    sizeof(utf8_string) - 1,\n#include \"lit-magic-strings.inc.h\"\n#undef LIT_MAGIC_STRING_DEF\n#undef LIT_MAGIC_STRING_FIRST_STRING_WITH_SIZE\n/** @endcond */\n  };\n\n  JERRY_ASSERT (id < LIT_NON_INTERNAL_MAGIC_STRING__COUNT);\n\n  return lit_magic_string_sizes[id];\n}",
        "begin_line": 67,
        "end_line": 85,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-magic-strings.lit_get_magic_string_size_block_start#93",
        "src_path": "jerry-core/lit/lit-magic-strings.c",
        "class_name": "jerry-core.lit.lit-magic-strings",
        "signature": "jerry-core.lit.lit-magic-strings.lit_get_magic_string_size_block_start (lit_utf8_size_t size) /**< magic string size */",
        "snippet": "static lit_magic_string_id_t\nlit_get_magic_string_size_block_start (lit_utf8_size_t size) /**< magic string size */\n{\n  static const lit_magic_string_id_t lit_magic_string_size_block_starts[] JERRY_ATTR_CONST_DATA =\n  {\n/** @cond doxygen_suppress */\n#define LIT_MAGIC_STRING_DEF(id, utf8_string)\n#define LIT_MAGIC_STRING_FIRST_STRING_WITH_SIZE(size, id) \\\n    id,\n#include \"lit-magic-strings.inc.h\"\n    LIT_NON_INTERNAL_MAGIC_STRING__COUNT\n#undef LIT_MAGIC_STRING_DEF\n#undef LIT_MAGIC_STRING_FIRST_STRING_WITH_SIZE\n/** @endcond */\n  };\n\n  JERRY_ASSERT (size <= (sizeof (lit_magic_string_size_block_starts) / sizeof (lit_magic_string_id_t)));\n\n  return lit_magic_string_size_block_starts[size];\n}",
        "begin_line": 93,
        "end_line": 112,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-magic-strings.lit_get_magic_string_utf8#42",
        "src_path": "jerry-core/lit/lit-magic-strings.c",
        "class_name": "jerry-core.lit.lit-magic-strings",
        "signature": "jerry-core.lit.lit-magic-strings.lit_get_magic_string_utf8 (uint32_t id) /**< magic string id */",
        "snippet": "const lit_utf8_byte_t *\nlit_get_magic_string_utf8 (uint32_t id) /**< magic string id */\n{\n  static const lit_utf8_byte_t * const lit_magic_strings[] JERRY_ATTR_CONST_DATA =\n  {\n/** @cond doxygen_suppress */\n#define LIT_MAGIC_STRING_FIRST_STRING_WITH_SIZE(size, id)\n#define LIT_MAGIC_STRING_DEF(id, utf8_string) \\\n    (const lit_utf8_byte_t *) utf8_string,\n#include \"lit-magic-strings.inc.h\"\n#undef LIT_MAGIC_STRING_DEF\n#undef LIT_MAGIC_STRING_FIRST_STRING_WITH_SIZE\n/** @endcond */\n  };\n\n  JERRY_ASSERT (id < LIT_NON_INTERNAL_MAGIC_STRING__COUNT);\n\n  return lit_magic_strings[id];\n}",
        "begin_line": 42,
        "end_line": 60,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-magic-strings.lit_is_utf8_string_magic#202",
        "src_path": "jerry-core/lit/lit-magic-strings.c",
        "class_name": "jerry-core.lit.lit-magic-strings",
        "signature": "jerry-core.lit.lit-magic-strings.lit_is_utf8_string_magic (const lit_utf8_byte_t *string_p, /**< utf-8 string */                           lit_utf8_size_t string_size) /**< string size in bytes */",
        "snippet": "lit_magic_string_id_t\nlit_is_utf8_string_magic (const lit_utf8_byte_t *string_p, /**< utf-8 string */\n                          lit_utf8_size_t string_size) /**< string size in bytes */\n{\n  if (string_size > lit_get_magic_string_size (LIT_NON_INTERNAL_MAGIC_STRING__COUNT - 1))\n  {\n    return LIT_MAGIC_STRING__COUNT;\n  }\n\n  /**< The string must be in this id range. */\n  lit_utf8_size_t first = lit_get_magic_string_size_block_start (string_size);\n  lit_utf8_size_t last = lit_get_magic_string_size_block_start (string_size + 1);\n\n  while (first < last)\n  {\n    lit_utf8_size_t middle = ((first + last) / 2); /**< mid point of search */\n    int compare = memcmp (lit_get_magic_string_utf8 ((lit_magic_string_id_t) middle), string_p, string_size);\n\n    if (compare == 0)\n    {\n      return (lit_magic_string_id_t) middle;\n    }\n    else if (compare > 0)\n    {\n      last = middle;\n    }\n    else\n    {\n      first = middle + 1;\n    }\n  }\n\n  return LIT_MAGIC_STRING__COUNT;\n}",
        "begin_line": 202,
        "end_line": 235,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-magic-strings.lit_is_utf8_string_pair_magic#243",
        "src_path": "jerry-core/lit/lit-magic-strings.c",
        "class_name": "jerry-core.lit.lit-magic-strings",
        "signature": "jerry-core.lit.lit-magic-strings.lit_is_utf8_string_pair_magic (const lit_utf8_byte_t *string1_p, /**< first utf-8 string */                                lit_utf8_size_t string1_size, /**< first string size in bytes */                                const lit_utf8_byte_t *string2_p, /**< second utf-8 string */                                lit_utf8_size_t string2_size) /**< second string size in bytes */",
        "snippet": "lit_magic_string_id_t\nlit_is_utf8_string_pair_magic (const lit_utf8_byte_t *string1_p, /**< first utf-8 string */\n                               lit_utf8_size_t string1_size, /**< first string size in bytes */\n                               const lit_utf8_byte_t *string2_p, /**< second utf-8 string */\n                               lit_utf8_size_t string2_size) /**< second string size in bytes */\n{\n  lit_utf8_size_t total_string_size = string1_size + string2_size;\n\n  if (total_string_size > lit_get_magic_string_size (LIT_NON_INTERNAL_MAGIC_STRING__COUNT - 1))\n  {\n    return LIT_MAGIC_STRING__COUNT;\n  }\n\n  /**< The string must be in this id range. */\n  lit_utf8_size_t first = lit_get_magic_string_size_block_start (total_string_size);\n  lit_utf8_size_t last = lit_get_magic_string_size_block_start (total_string_size + 1);\n\n  while (first < last)\n  {\n    lit_utf8_size_t middle = ((first + last) / 2); /**< mid point of search */\n    const lit_utf8_byte_t *middle_string_p = lit_get_magic_string_utf8 ((lit_magic_string_id_t) middle);\n\n    int compare = memcmp (middle_string_p, string1_p, string1_size);\n\n    if (compare == 0)\n    {\n      compare = memcmp (middle_string_p + string1_size, string2_p, string2_size);\n    }\n\n    if (compare == 0)\n    {\n      return (lit_magic_string_id_t) middle;\n    }\n    else if (compare > 0)\n    {\n      last = middle;\n    }\n    else\n    {\n      first = middle + 1;\n    }\n  }\n\n  return LIT_MAGIC_STRING__COUNT;\n}",
        "begin_line": 243,
        "end_line": 287,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_is_valid_cesu8_string#128",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_is_valid_cesu8_string (const lit_utf8_byte_t *cesu8_buf_p, /**< cesu-8 string */                            lit_utf8_size_t buf_size) /**< string size */",
        "snippet": "bool\nlit_is_valid_cesu8_string (const lit_utf8_byte_t *cesu8_buf_p, /**< cesu-8 string */\n                           lit_utf8_size_t buf_size) /**< string size */\n{\n  lit_utf8_size_t idx = 0;\n\n  while (idx < buf_size)\n  {\n    lit_utf8_byte_t c = cesu8_buf_p[idx++];\n    if ((c & LIT_UTF8_1_BYTE_MASK) == LIT_UTF8_1_BYTE_MARKER)\n    {\n      continue;\n    }\n\n    lit_code_point_t code_point = 0;\n    lit_code_point_t min_code_point = 0;\n    lit_utf8_size_t extra_bytes_count;\n    if ((c & LIT_UTF8_2_BYTE_MASK) == LIT_UTF8_2_BYTE_MARKER)\n    {\n      extra_bytes_count = 1;\n      min_code_point = LIT_UTF8_2_BYTE_CODE_POINT_MIN;\n      code_point = ((uint32_t) (c & LIT_UTF8_LAST_5_BITS_MASK));\n    }\n    else if ((c & LIT_UTF8_3_BYTE_MASK) == LIT_UTF8_3_BYTE_MARKER)\n    {\n      extra_bytes_count = 2;\n      min_code_point = LIT_UTF8_3_BYTE_CODE_POINT_MIN;\n      code_point = ((uint32_t) (c & LIT_UTF8_LAST_4_BITS_MASK));\n    }\n    else\n    {\n      return false;\n    }\n\n    if (idx + extra_bytes_count > buf_size)\n    {\n      /* cesu-8 string breaks in the middle */\n      return false;\n    }\n\n    for (lit_utf8_size_t offset = 0; offset < extra_bytes_count; ++offset)\n    {\n      c = cesu8_buf_p[idx + offset];\n      if ((c & LIT_UTF8_EXTRA_BYTE_MASK) != LIT_UTF8_EXTRA_BYTE_MARKER)\n      {\n        /* invalid continuation byte */\n        return false;\n      }\n      code_point <<= LIT_UTF8_BITS_IN_EXTRA_BYTES;\n      code_point |= (c & LIT_UTF8_LAST_6_BITS_MASK);\n    }\n\n    if (code_point < min_code_point)\n    {\n      /* cesu-8 string doesn't encode valid unicode code point */\n      return false;\n    }\n\n    idx += extra_bytes_count;\n  }\n\n  return true;\n}",
        "begin_line": 128,
        "end_line": 190,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_is_valid_utf8_string#29",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_is_valid_utf8_string (const lit_utf8_byte_t *utf8_buf_p, /**< utf-8 string */                           lit_utf8_size_t buf_size, /**< string size */                           bool is_strict) /**< true if surrogate pairs are not allowed */",
        "snippet": "bool\nlit_is_valid_utf8_string (const lit_utf8_byte_t *utf8_buf_p, /**< utf-8 string */\n                          lit_utf8_size_t buf_size, /**< string size */\n                          bool is_strict) /**< true if surrogate pairs are not allowed */\n{\n  lit_utf8_size_t idx = 0;\n\n  bool is_prev_code_point_high_surrogate = false;\n  while (idx < buf_size)\n  {\n    lit_utf8_byte_t c = utf8_buf_p[idx++];\n    if ((c & LIT_UTF8_1_BYTE_MASK) == LIT_UTF8_1_BYTE_MARKER)\n    {\n      is_prev_code_point_high_surrogate = false;\n      continue;\n    }\n\n    lit_code_point_t code_point = 0;\n    lit_code_point_t min_code_point = 0;\n    lit_utf8_size_t extra_bytes_count;\n    if ((c & LIT_UTF8_2_BYTE_MASK) == LIT_UTF8_2_BYTE_MARKER)\n    {\n      extra_bytes_count = 1;\n      min_code_point = LIT_UTF8_2_BYTE_CODE_POINT_MIN;\n      code_point = ((uint32_t) (c & LIT_UTF8_LAST_5_BITS_MASK));\n    }\n    else if ((c & LIT_UTF8_3_BYTE_MASK) == LIT_UTF8_3_BYTE_MARKER)\n    {\n      extra_bytes_count = 2;\n      min_code_point = LIT_UTF8_3_BYTE_CODE_POINT_MIN;\n      code_point = ((uint32_t) (c & LIT_UTF8_LAST_4_BITS_MASK));\n    }\n    else if ((c & LIT_UTF8_4_BYTE_MASK) == LIT_UTF8_4_BYTE_MARKER)\n    {\n      extra_bytes_count = 3;\n      min_code_point = LIT_UTF8_4_BYTE_CODE_POINT_MIN;\n      code_point = ((uint32_t) (c & LIT_UTF8_LAST_3_BITS_MASK));\n    }\n    else\n    {\n      /* utf-8 string could not contain 5- and 6-byte sequences. */\n      return false;\n    }\n\n    if (idx + extra_bytes_count > buf_size)\n    {\n      /* utf-8 string breaks in the middle */\n      return false;\n    }\n\n    for (lit_utf8_size_t offset = 0; offset < extra_bytes_count; ++offset)\n    {\n      c = utf8_buf_p[idx + offset];\n      if ((c & LIT_UTF8_EXTRA_BYTE_MASK) != LIT_UTF8_EXTRA_BYTE_MARKER)\n      {\n        /* invalid continuation byte */\n        return false;\n      }\n      code_point <<= LIT_UTF8_BITS_IN_EXTRA_BYTES;\n      code_point |= (c & LIT_UTF8_LAST_6_BITS_MASK);\n    }\n\n    if (code_point < min_code_point\n        || code_point > LIT_UNICODE_CODE_POINT_MAX)\n    {\n      /* utf-8 string doesn't encode valid unicode code point */\n      return false;\n    }\n\n    if (is_strict)\n    {\n      is_prev_code_point_high_surrogate = false;\n\n      if (code_point >= LIT_UTF16_HIGH_SURROGATE_MIN\n          && code_point <= LIT_UTF16_HIGH_SURROGATE_MAX)\n      {\n        is_prev_code_point_high_surrogate = true;\n      }\n      else if (code_point >= LIT_UTF16_LOW_SURROGATE_MIN\n               && code_point <= LIT_UTF16_LOW_SURROGATE_MAX\n               && is_prev_code_point_high_surrogate)\n      {\n        /* sequence of high and low surrogate is not allowed */\n        return false;\n      }\n    }\n\n    idx += extra_bytes_count;\n  }\n\n  return true;\n}",
        "begin_line": 29,
        "end_line": 120,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_read_code_unit_from_cesu8#426",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_read_code_unit_from_cesu8 (const lit_utf8_byte_t *buf_p, /**< buffer with characters */                                ecma_char_t *code_unit) /**< [out] code unit */",
        "snippet": "lit_utf8_size_t\nlit_read_code_unit_from_cesu8 (const lit_utf8_byte_t *buf_p, /**< buffer with characters */\n                               ecma_char_t *code_unit) /**< [out] code unit */\n{\n  JERRY_ASSERT (buf_p);\n\n  lit_utf8_byte_t c = buf_p[0];\n  if ((c & LIT_UTF8_1_BYTE_MASK) == LIT_UTF8_1_BYTE_MARKER)\n  {\n    *code_unit = (ecma_char_t) (c & LIT_UTF8_LAST_7_BITS_MASK);\n    return 1;\n  }\n\n  lit_code_point_t ret = LIT_UNICODE_CODE_POINT_NULL;\n  lit_utf8_size_t bytes_count;\n\n  if ((c & LIT_UTF8_2_BYTE_MASK) == LIT_UTF8_2_BYTE_MARKER)\n  {\n    bytes_count = 2;\n    ret = ((lit_code_point_t) (c & LIT_UTF8_LAST_5_BITS_MASK));\n  }\n  else\n  {\n    JERRY_ASSERT ((c & LIT_UTF8_3_BYTE_MASK) == LIT_UTF8_3_BYTE_MARKER);\n    bytes_count = 3;\n    ret = ((lit_code_point_t) (c & LIT_UTF8_LAST_4_BITS_MASK));\n  }\n\n  for (uint32_t i = 1; i < bytes_count; ++i)\n  {\n    ret <<= LIT_UTF8_BITS_IN_EXTRA_BYTES;\n    ret |= (buf_p[i] & LIT_UTF8_LAST_6_BITS_MASK);\n  }\n\n  JERRY_ASSERT (ret <= LIT_UTF16_CODE_UNIT_MAX);\n  *code_unit = (ecma_char_t) ret;\n  return bytes_count;\n}",
        "begin_line": 426,
        "end_line": 463,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_read_prev_code_unit_from_utf8#508",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_read_prev_code_unit_from_utf8 (const lit_utf8_byte_t *buf_p, /**< buffer with characters */                                    ecma_char_t *code_point) /**< [out] code point */",
        "snippet": "lit_utf8_size_t\nlit_read_prev_code_unit_from_utf8 (const lit_utf8_byte_t *buf_p, /**< buffer with characters */\n                                   ecma_char_t *code_point) /**< [out] code point */\n{\n  JERRY_ASSERT (buf_p);\n\n  lit_utf8_decr (&buf_p);\n  return lit_read_code_unit_from_cesu8 (buf_p, code_point);\n}",
        "begin_line": 508,
        "end_line": 516,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_utf8_decr#597",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_utf8_decr (const lit_utf8_byte_t **buf_p) /**< [in, out] buffer with characters */",
        "snippet": "void\nlit_utf8_decr (const lit_utf8_byte_t **buf_p) /**< [in,out] buffer with characters */\n{\n  JERRY_ASSERT (*buf_p);\n  const lit_utf8_byte_t *current_p = *buf_p;\n\n  do\n  {\n    current_p--;\n  }\n  while ((*(current_p) & LIT_UTF8_EXTRA_BYTE_MASK) == LIT_UTF8_EXTRA_BYTE_MARKER);\n\n  *buf_p = current_p;\n}",
        "begin_line": 597,
        "end_line": 610,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_utf8_string_length#291",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_utf8_string_length (const lit_utf8_byte_t *utf8_buf_p, /**< utf-8 string */                         lit_utf8_size_t utf8_buf_size) /**< string size */",
        "snippet": "lit_utf8_size_t\nlit_utf8_string_length (const lit_utf8_byte_t *utf8_buf_p, /**< utf-8 string */\n                        lit_utf8_size_t utf8_buf_size) /**< string size */\n{\n  lit_utf8_size_t length = 0;\n  lit_utf8_size_t size = 0;\n\n  while (size < utf8_buf_size)\n  {\n    size += lit_get_unicode_char_size_by_utf8_first_byte (*(utf8_buf_p + size));\n    length++;\n  }\n\n  JERRY_ASSERT (size == utf8_buf_size);\n\n  return length;\n}",
        "begin_line": 291,
        "end_line": 307,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_zt_utf8_string_size#279",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_zt_utf8_string_size (const lit_utf8_byte_t *utf8_str_p) /**< zero-terminated utf-8 string */",
        "snippet": "lit_utf8_size_t\nlit_zt_utf8_string_size (const lit_utf8_byte_t *utf8_str_p) /**< zero-terminated utf-8 string */\n{\n  JERRY_ASSERT (utf8_str_p != NULL);\n  return (lit_utf8_size_t) strlen ((const char *) utf8_str_p);\n}",
        "begin_line": 279,
        "end_line": 284,
        "is_bug": false
    },
    {
        "name": "jerry-core.parser.js.js-parser.parser_parse_script#3130",
        "src_path": "jerry-core/parser/js/js-parser.c",
        "class_name": "jerry-core.parser.js.js-parser",
        "signature": "jerry-core.parser.js.js-parser.parser_parse_script (void *source_p, /**< source code */                      uint32_t parse_opts, /**< ecma_parse_opts_t option bits */                      const jerry_parse_options_t *options_p) /**< additional configuration options */",
        "snippet": "ecma_compiled_code_t *\nparser_parse_script (void *source_p, /**< source code */\n                     uint32_t parse_opts, /**< ecma_parse_opts_t option bits */\n                     const jerry_parse_options_t *options_p) /**< additional configuration options */\n{\n#if JERRY_PARSER\n  ecma_compiled_code_t *bytecode_p = parser_parse_source (source_p,\n                                                          parse_opts,\n                                                          options_p);\n\n  if (JERRY_UNLIKELY (bytecode_p == NULL))\n  {\n    /* Exception has already thrown. */\n    return NULL;\n  }\n\n#if JERRY_DEBUGGER\n  if ((JERRY_CONTEXT (debugger_flags) & (JERRY_DEBUGGER_CONNECTED | JERRY_DEBUGGER_PARSER_WAIT))\n      == (JERRY_DEBUGGER_CONNECTED | JERRY_DEBUGGER_PARSER_WAIT))\n  {\n    JERRY_DEBUGGER_SET_FLAGS (JERRY_DEBUGGER_PARSER_WAIT_MODE);\n    jerry_debugger_send_type (JERRY_DEBUGGER_WAITING_AFTER_PARSE);\n\n    while (JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_PARSER_WAIT_MODE)\n    {\n      jerry_debugger_receive (NULL);\n\n      if (!(JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED))\n      {\n        break;\n      }\n\n      jerry_debugger_transport_sleep ();\n    }\n  }\n#endif /* JERRY_DEBUGGER */\n\n  return bytecode_p;\n#else /* !JERRY_PARSER */\n  JERRY_UNUSED (arg_list_p);\n  JERRY_UNUSED (arg_list_size);\n  JERRY_UNUSED (source_p);\n  JERRY_UNUSED (source_size);\n  JERRY_UNUSED (parse_opts);\n  JERRY_UNUSED (resource_name);\n\n  ecma_raise_syntax_error (ECMA_ERR_MSG (\"Source code parsing is disabled\"));\n  return NULL;\n#endif /* JERRY_PARSER */\n}",
        "begin_line": 3130,
        "end_line": 3179,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.opcodes-ecma-relational-equality.opfunc_equality#39",
        "src_path": "jerry-core/vm/opcodes-ecma-relational-equality.c",
        "class_name": "jerry-core.vm.opcodes-ecma-relational-equality",
        "signature": "jerry-core.vm.opcodes-ecma-relational-equality.opfunc_equality (ecma_value_t left_value, /**< left value */                  ecma_value_t right_value) /**< right value */",
        "snippet": "ecma_value_t\nopfunc_equality (ecma_value_t left_value, /**< left value */\n                 ecma_value_t right_value) /**< right value */\n{\n  JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (left_value)\n                && !ECMA_IS_VALUE_ERROR (right_value));\n\n  ecma_value_t compare_result = ecma_op_abstract_equality_compare (left_value, right_value);\n\n  JERRY_ASSERT (ecma_is_value_boolean (compare_result)\n                || ECMA_IS_VALUE_ERROR (compare_result));\n\n  return compare_result;\n}",
        "begin_line": 39,
        "end_line": 52,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.opcodes.opfunc_set_accessor#104",
        "src_path": "jerry-core/vm/opcodes.c",
        "class_name": "jerry-core.vm.opcodes",
        "signature": "jerry-core.vm.opcodes.opfunc_set_accessor (bool is_getter, /**< is getter accessor */                      ecma_value_t object, /**< object value */                      ecma_string_t *accessor_name_p, /**< accessor name */                      ecma_value_t accessor) /**< accessor value */",
        "snippet": "void\nopfunc_set_accessor (bool is_getter, /**< is getter accessor */\n                     ecma_value_t object, /**< object value */\n                     ecma_string_t *accessor_name_p, /**< accessor name */\n                     ecma_value_t accessor) /**< accessor value */\n{\n  ecma_object_t *object_p = ecma_get_object_from_value (object);\n\n  JERRY_ASSERT (!ecma_op_object_is_fast_array (object_p));\n\n  ecma_property_t *property_p = ecma_find_named_property (object_p, accessor_name_p);\n  ecma_object_t *accessor_p = ecma_get_object_from_value (accessor);\n\n  ecma_object_t *getter_func_p = NULL;\n  ecma_object_t *setter_func_p = NULL;\n\n  if (is_getter)\n  {\n    getter_func_p = accessor_p;\n  }\n  else\n  {\n    setter_func_p = accessor_p;\n  }\n\n  if (property_p == NULL)\n  {\n    ecma_create_named_accessor_property (object_p,\n                                         accessor_name_p,\n                                         getter_func_p,\n                                         setter_func_p,\n                                         ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE,\n                                         NULL);\n  }\n  else\n  {\n    JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));\n\n    ecma_property_value_t *prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n    if (*property_p & ECMA_PROPERTY_FLAG_DATA)\n    {\n#if JERRY_CPOINTER_32_BIT\n      ecma_getter_setter_pointers_t *getter_setter_pair_p;\n      getter_setter_pair_p = jmem_pools_alloc (sizeof (ecma_getter_setter_pointers_t));\n#endif /* JERRY_CPOINTER_32_BIT */\n\n      ecma_free_value_if_not_object (prop_value_p->value);\n      *property_p = (uint8_t) (*property_p & ~(ECMA_PROPERTY_FLAG_DATA | ECMA_PROPERTY_FLAG_WRITABLE));\n\n#if JERRY_CPOINTER_32_BIT\n      ECMA_SET_POINTER (getter_setter_pair_p->getter_cp, getter_func_p);\n      ECMA_SET_POINTER (getter_setter_pair_p->setter_cp, setter_func_p);\n      ECMA_SET_NON_NULL_POINTER (prop_value_p->getter_setter_pair_cp, getter_setter_pair_p);\n#else /* !JERRY_CPOINTER_32_BIT */\n      ECMA_SET_POINTER (prop_value_p->getter_setter_pair.getter_cp, getter_func_p);\n      ECMA_SET_POINTER (prop_value_p->getter_setter_pair.setter_cp, setter_func_p);\n#endif /* JERRY_CPOINTER_32_BIT */\n      return;\n    }\n\n    if (is_getter)\n    {\n      ecma_set_named_accessor_property_getter (object_p, prop_value_p, accessor_p);\n    }\n    else\n    {\n      ecma_set_named_accessor_property_setter (object_p, prop_value_p, accessor_p);\n    }\n  }\n}",
        "begin_line": 104,
        "end_line": 174,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.opcodes.opfunc_set_data_property#60",
        "src_path": "jerry-core/vm/opcodes.c",
        "class_name": "jerry-core.vm.opcodes",
        "signature": "jerry-core.vm.opcodes.opfunc_set_data_property (ecma_object_t *object_p, /**< object */                           ecma_string_t *prop_name_p, /**< data property name */                           ecma_value_t value) /**< new value */",
        "snippet": "void\nopfunc_set_data_property (ecma_object_t *object_p, /**< object */\n                          ecma_string_t *prop_name_p, /**< data property name */\n                          ecma_value_t value) /**< new value */\n{\n  JERRY_ASSERT (!ecma_op_object_is_fast_array (object_p));\n\n  ecma_property_t *property_p = ecma_find_named_property (object_p, prop_name_p);\n  ecma_property_value_t *prop_value_p;\n\n  if (property_p == NULL)\n  {\n    prop_value_p = ecma_create_named_data_property (object_p,\n                                                    prop_name_p,\n                                                    ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,\n                                                    NULL);\n  }\n  else\n  {\n    JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));\n\n    prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n    if (!(*property_p & ECMA_PROPERTY_FLAG_DATA))\n    {\n#if JERRY_CPOINTER_32_BIT\n      ecma_getter_setter_pointers_t *getter_setter_pair_p;\n      getter_setter_pair_p = ECMA_GET_NON_NULL_POINTER (ecma_getter_setter_pointers_t,\n                                                        ECMA_PROPERTY_VALUE_PTR (property_p)->getter_setter_pair_cp);\n      jmem_pools_free (getter_setter_pair_p, sizeof (ecma_getter_setter_pointers_t));\n#endif /* JERRY_CPOINTER_32_BIT */\n\n      *property_p |= ECMA_PROPERTY_FLAG_DATA | ECMA_PROPERTY_FLAG_WRITABLE;\n      prop_value_p->value = ecma_copy_value_if_not_object (value);\n      return;\n    }\n  }\n\n  ecma_named_data_property_assign_value (object_p, prop_value_p, value);\n}",
        "begin_line": 60,
        "end_line": 99,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm.opfunc_call#766",
        "src_path": "jerry-core/vm/vm.c",
        "class_name": "jerry-core.vm.vm",
        "signature": "jerry-core.vm.vm.opfunc_call (vm_frame_ctx_t *frame_ctx_p) /**< frame context */",
        "snippet": "static void\nopfunc_call (vm_frame_ctx_t *frame_ctx_p) /**< frame context */\n{\n  const uint8_t *byte_code_p = frame_ctx_p->byte_code_p + 1;\n  uint8_t opcode = byte_code_p[-1];\n  uint32_t arguments_list_len;\n\n  if (opcode >= CBC_CALL0)\n  {\n    arguments_list_len = (unsigned int) ((opcode - CBC_CALL0) / 6);\n  }\n  else\n  {\n    arguments_list_len = *byte_code_p++;\n  }\n\n  bool is_call_prop = ((opcode - CBC_CALL) % 6) >= 3;\n\n  ecma_value_t *stack_top_p = frame_ctx_p->stack_top_p - arguments_list_len;\n  ecma_value_t this_value = is_call_prop ? stack_top_p[-3] : ECMA_VALUE_UNDEFINED;\n  ecma_value_t func_value = stack_top_p[-1];\n  ecma_value_t completion_value;\n\n  if (!ecma_is_value_object (func_value)\n      || !ecma_op_object_is_callable (ecma_get_object_from_value (func_value)))\n  {\n    completion_value = ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_expected_a_function));\n  }\n  else\n  {\n    ecma_object_t *func_obj_p = ecma_get_object_from_value (func_value);\n\n    completion_value = ecma_op_function_call (func_obj_p,\n                                              this_value,\n                                              stack_top_p,\n                                              arguments_list_len);\n  }\n\n  JERRY_CONTEXT (status_flags) &= (uint32_t) ~ECMA_STATUS_DIRECT_EVAL;\n\n  /* Free registers. */\n  for (uint32_t i = 0; i < arguments_list_len; i++)\n  {\n    ecma_fast_free_value (stack_top_p[i]);\n  }\n\n  if (is_call_prop)\n  {\n    ecma_free_value (*(--stack_top_p));\n    ecma_free_value (*(--stack_top_p));\n  }\n\n  if (JERRY_UNLIKELY (ECMA_IS_VALUE_ERROR (completion_value)))\n  {\n#if JERRY_DEBUGGER\n    JERRY_CONTEXT (debugger_exception_byte_code_p) = frame_ctx_p->byte_code_p;\n#endif /* JERRY_DEBUGGER */\n    frame_ctx_p->byte_code_p = (uint8_t *) vm_error_byte_code_p;\n  }\n  else\n  {\n    frame_ctx_p->byte_code_p = byte_code_p;\n    ecma_free_value (*(--stack_top_p));\n    uint32_t opcode_data = vm_decode_table[opcode];\n\n    if (!(opcode_data & (VM_OC_PUT_STACK | VM_OC_PUT_BLOCK)))\n    {\n      ecma_fast_free_value (completion_value);\n    }\n    else if (opcode_data & VM_OC_PUT_STACK)\n    {\n      *stack_top_p++ = completion_value;\n    }\n    else\n    {\n      ecma_fast_free_value (frame_ctx_p->block_result);\n      frame_ctx_p->block_result = completion_value;\n    }\n  }\n\n  frame_ctx_p->stack_top_p = stack_top_p;\n}",
        "begin_line": 766,
        "end_line": 847,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm.vm_construct_literal_object#445",
        "src_path": "jerry-core/vm/vm.c",
        "class_name": "jerry-core.vm.vm",
        "signature": "jerry-core.vm.vm.vm_construct_literal_object (vm_frame_ctx_t *frame_ctx_p, /**< frame context */                              ecma_value_t lit_value) /**< literal */",
        "snippet": "static ecma_value_t\nvm_construct_literal_object (vm_frame_ctx_t *frame_ctx_p, /**< frame context */\n                             ecma_value_t lit_value) /**< literal */\n{\n  ecma_compiled_code_t *bytecode_p;\n\n#if JERRY_SNAPSHOT_EXEC\n  if (JERRY_LIKELY (!(frame_ctx_p->shared_p->bytecode_header_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)))\n  {\n#endif /* JERRY_SNAPSHOT_EXEC */\n    bytecode_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_compiled_code_t,\n                                                  lit_value);\n#if JERRY_SNAPSHOT_EXEC\n  }\n  else\n  {\n    uint8_t *byte_p = ((uint8_t *) frame_ctx_p->shared_p->bytecode_header_p) + lit_value;\n    bytecode_p = (ecma_compiled_code_t *) byte_p;\n  }\n#endif /* JERRY_SNAPSHOT_EXEC */\n\n#if JERRY_BUILTIN_REGEXP\n  if (JERRY_UNLIKELY (!CBC_IS_FUNCTION (bytecode_p->status_flags)))\n  {\n    ecma_object_t *regexp_obj_p = ecma_op_regexp_alloc (NULL);\n\n    if (JERRY_UNLIKELY (regexp_obj_p == NULL))\n    {\n      return ECMA_VALUE_ERROR;\n    }\n\n    return ecma_op_create_regexp_from_bytecode (regexp_obj_p, (re_compiled_code_t *) bytecode_p);\n  }\n#else /* !JERRY_BUILTIN_REGEXP */\n  JERRY_ASSERT (CBC_IS_FUNCTION (bytecode_p->status_flags));\n#endif /* JERRY_BUILTIN_REGEXP */\n\n  ecma_object_t *func_obj_p;\n\n#if JERRY_ESNEXT\n  if (JERRY_UNLIKELY (CBC_FUNCTION_IS_ARROW (bytecode_p->status_flags)))\n  {\n    func_obj_p = ecma_op_create_arrow_function_object (frame_ctx_p->lex_env_p,\n                                                       bytecode_p,\n                                                       frame_ctx_p->this_binding);\n  }\n  else\n  {\n    func_obj_p = ecma_op_create_any_function_object (frame_ctx_p->lex_env_p, bytecode_p);\n  }\n#else /* !JERRY_ESNEXT */\n  func_obj_p = ecma_op_create_simple_function_object (frame_ctx_p->lex_env_p, bytecode_p);\n#endif /* JERRY_ESNEXT */\n\n  return ecma_make_object_value (func_obj_p);\n}",
        "begin_line": 445,
        "end_line": 500,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm.vm_op_get_value#54",
        "src_path": "jerry-core/vm/vm.c",
        "class_name": "jerry-core.vm.vm",
        "signature": "jerry-core.vm.vm.vm_op_get_value (ecma_value_t object, /**< base object */                  ecma_value_t property) /**< property name */",
        "snippet": "static ecma_value_t\nvm_op_get_value (ecma_value_t object, /**< base object */\n                 ecma_value_t property) /**< property name */\n{\n  if (ecma_is_value_object (object))\n  {\n    ecma_object_t *object_p = ecma_get_object_from_value (object);\n    ecma_string_t *property_name_p = NULL;\n\n    if (ecma_is_value_integer_number (property))\n    {\n      ecma_integer_value_t int_value = ecma_get_integer_from_value (property);\n\n      if (int_value >= 0 && int_value <= ECMA_DIRECT_STRING_MAX_IMM)\n      {\n        if (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_ARRAY)\n        {\n          ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n          if (JERRY_LIKELY (ecma_op_array_is_fast_array (ext_object_p)\n                            && (uint32_t) int_value < ext_object_p->u.array.length))\n          {\n            ecma_value_t *values_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, object_p->u1.property_list_cp);\n\n            if (JERRY_LIKELY (!ecma_is_value_array_hole (values_p[int_value])))\n            {\n              return ecma_fast_copy_value (values_p[int_value]);\n            }\n          }\n        }\n\n        property_name_p = (ecma_string_t *) ECMA_CREATE_DIRECT_STRING (ECMA_DIRECT_STRING_UINT,\n                                                                       (uintptr_t) int_value);\n      }\n    }\n    else if (ecma_is_value_string (property))\n    {\n      property_name_p = ecma_get_string_from_value (property);\n    }\n\n#if JERRY_ESNEXT\n    if (ecma_is_value_symbol (property))\n    {\n      property_name_p = ecma_get_symbol_from_value (property);\n    }\n#endif /* JERRY_ESNEXT */\n\n    if (property_name_p != NULL)\n    {\n#if JERRY_LCACHE\n      ecma_property_t *property_p = ecma_lcache_lookup (object_p, property_name_p);\n\n      if (property_p != NULL && (*property_p & ECMA_PROPERTY_FLAG_DATA))\n      {\n        JERRY_ASSERT (!ECMA_PROPERTY_IS_INTERNAL (*property_p));\n        return ecma_fast_copy_value (ECMA_PROPERTY_VALUE_PTR (property_p)->value);\n      }\n#endif /* JERRY_LCACHE */\n\n      /* There is no need to free the name. */\n      return ecma_op_object_get (object_p, property_name_p);\n    }\n  }\n\n  if (JERRY_UNLIKELY (ecma_is_value_undefined (object) || ecma_is_value_null (object)))\n  {\n#if JERRY_ERROR_MESSAGES\n    ecma_value_t error_value = ecma_raise_standard_error_with_format (JERRY_ERROR_TYPE,\n                                                                      \"Cannot read property '%' of %\",\n                                                                      property,\n                                                                      object);\n#else /* !JERRY_ERROR_MESSAGES */\n    ecma_value_t error_value = ecma_raise_type_error (NULL);\n#endif /* JERRY_ERROR_MESSAGES */\n    return error_value;\n  }\n\n  ecma_string_t *property_name_p = ecma_op_to_property_key (property);\n\n  if (property_name_p == NULL)\n  {\n    return ECMA_VALUE_ERROR;\n  }\n\n  ecma_value_t get_value_result = ecma_op_get_value_object_base (object, property_name_p);\n\n  ecma_deref_ecma_string (property_name_p);\n  return get_value_result;\n}",
        "begin_line": 54,
        "end_line": 142,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm.vm_run#5338",
        "src_path": "jerry-core/vm/vm.c",
        "class_name": "jerry-core.vm.vm",
        "signature": "jerry-core.vm.vm.vm_run (vm_frame_ctx_shared_t *shared_p, /**< shared data */         ecma_value_t this_binding_value, /**< value of 'ThisBinding' */         ecma_object_t *lex_env_p) /**< lexical environment to use */",
        "snippet": "ecma_value_t\nvm_run (vm_frame_ctx_shared_t *shared_p, /**< shared data */\n        ecma_value_t this_binding_value, /**< value of 'ThisBinding' */\n        ecma_object_t *lex_env_p) /**< lexical environment to use */\n{\n  const ecma_compiled_code_t *bytecode_header_p = shared_p->bytecode_header_p;\n  vm_frame_ctx_t *frame_ctx_p;\n  size_t frame_size;\n\n  if (bytecode_header_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)\n  {\n    cbc_uint16_arguments_t *args_p = (cbc_uint16_arguments_t *) bytecode_header_p;\n    frame_size = (size_t) (args_p->register_end + args_p->stack_limit);\n  }\n  else\n  {\n    cbc_uint8_arguments_t *args_p = (cbc_uint8_arguments_t *) bytecode_header_p;\n    frame_size = (size_t) (args_p->register_end + args_p->stack_limit);\n  }\n\n  frame_size = frame_size * sizeof (ecma_value_t) + sizeof (vm_frame_ctx_t);\n  frame_size = (frame_size + sizeof (uintptr_t) - 1) / sizeof (uintptr_t);\n\n  /* Use JERRY_MAX() to avoid array declaration with size 0. */\n  JERRY_VLA (uintptr_t, stack, frame_size);\n\n  frame_ctx_p = (vm_frame_ctx_t *) stack;\n\n  frame_ctx_p->shared_p = shared_p;\n  frame_ctx_p->lex_env_p = lex_env_p;\n  frame_ctx_p->this_binding = this_binding_value;\n\n  vm_init_exec (frame_ctx_p);\n  return vm_execute (frame_ctx_p);\n}",
        "begin_line": 5338,
        "end_line": 5372,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm.vm_run_global#273",
        "src_path": "jerry-core/vm/vm.c",
        "class_name": "jerry-core.vm.vm",
        "signature": "jerry-core.vm.vm.vm_run_global (const ecma_compiled_code_t *bytecode_p) /**< pointer to bytecode to run */",
        "snippet": "ecma_value_t\nvm_run_global (const ecma_compiled_code_t *bytecode_p) /**< pointer to bytecode to run */\n{\n#if JERRY_BUILTIN_REALMS\n  ecma_object_t *global_obj_p = (ecma_object_t *) ecma_op_function_get_realm (bytecode_p);\n#else /* !JERRY_BUILTIN_REALMS */\n  ecma_object_t *global_obj_p = ecma_builtin_get_global ();\n#endif /* JERRY_BUILTIN_REALMS */\n\n#if JERRY_ESNEXT\n  if (bytecode_p->status_flags & CBC_CODE_FLAGS_LEXICAL_BLOCK_NEEDED)\n  {\n    ecma_create_global_lexical_block (global_obj_p);\n  }\n#endif /* JERRY_ESNEXT */\n\n  ecma_object_t *const global_scope_p = ecma_get_global_scope (global_obj_p);\n\n  vm_frame_ctx_shared_t shared;\n  shared.bytecode_header_p = bytecode_p;\n  shared.function_object_p = NULL;\n  shared.status_flags = 0;\n\n#if JERRY_BUILTIN_REALMS\n  ecma_value_t this_binding = ((ecma_global_object_t *) global_obj_p)->this_binding;\n\n  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);\n  JERRY_CONTEXT (global_object_p) = (ecma_global_object_t *) global_obj_p;\n#else /* !JERRY_BUILTIN_REALMS */\n  ecma_value_t this_binding = ecma_make_object_value (global_obj_p);\n#endif /* JERRY_BUILTIN_REALMS */\n\n  ecma_value_t result = vm_run (&shared, this_binding, global_scope_p);\n\n#if JERRY_BUILTIN_REALMS\n  JERRY_CONTEXT (global_object_p) = saved_global_object_p;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  return result;\n}",
        "begin_line": 273,
        "end_line": 312,
        "is_bug": false
    }
]