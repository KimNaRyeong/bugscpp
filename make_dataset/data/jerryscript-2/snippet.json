[
    {
        "name": "jerry-core.api.jerry.jerry_create_external_function#2525",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_create_external_function (jerry_external_handler_t handler_p) /**< pointer to native handler                                                                      *   for the function */",
        "snippet": "jerry_value_t\njerry_create_external_function (jerry_external_handler_t handler_p) /**< pointer to native handler\n                                                                     *   for the function */\n{\n  jerry_assert_api_available ();\n\n  ecma_object_t *func_obj_p = ecma_op_create_external_function_object (handler_p);\n  return ecma_make_object_value (func_obj_p);\n}",
        "begin_line": 2525,
        "end_line": 2533,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_create_string#2758",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_create_string (const jerry_char_t *str_p) /**< pointer to string */",
        "snippet": "jerry_value_t\njerry_create_string (const jerry_char_t *str_p) /**< pointer to string */\n{\n  return jerry_create_string_sz (str_p, lit_zt_utf8_string_size ((lit_utf8_byte_t *) str_p));\n}",
        "begin_line": 2758,
        "end_line": 2762,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_create_string_sz#2772",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_create_string_sz (const jerry_char_t *str_p, /**< pointer to string */                         jerry_size_t str_size) /**< string size */",
        "snippet": "jerry_value_t\njerry_create_string_sz (const jerry_char_t *str_p, /**< pointer to string */\n                        jerry_size_t str_size) /**< string size */\n{\n  jerry_assert_api_available ();\n\n  ecma_string_t *ecma_str_p = ecma_new_ecma_string_from_utf8 ((lit_utf8_byte_t *) str_p,\n                                                              (lit_utf8_size_t) str_size);\n  return ecma_make_string_value (ecma_str_p);\n}",
        "begin_line": 2772,
        "end_line": 2781,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_create_undefined#2589",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_create_undefined (void)",
        "snippet": "jerry_value_t\njerry_create_undefined (void)\n{\n  jerry_assert_api_available ();\n\n  return ECMA_VALUE_UNDEFINED;\n}",
        "begin_line": 2589,
        "end_line": 2595,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_get_global_object#1139",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_get_global_object (void)",
        "snippet": "jerry_value_t\njerry_get_global_object (void)\n{\n  jerry_assert_api_available ();\n  ecma_object_t *global_obj_p = ecma_builtin_get_global ();\n  ecma_ref_object (global_obj_p);\n  return ecma_make_object_value (global_obj_p);\n}",
        "begin_line": 1139,
        "end_line": 1146,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_get_utf8_string_length#3041",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_get_utf8_string_length (const jerry_value_t value) /**< input string */",
        "snippet": "jerry_length_t\njerry_get_utf8_string_length (const jerry_value_t value) /**< input string */\n{\n  jerry_assert_api_available ();\n\n  if (!ecma_is_value_string (value))\n  {\n    return 0;\n  }\n\n  return ecma_string_get_utf8_length (ecma_get_string_from_value (value));\n}",
        "begin_line": 3041,
        "end_line": 3052,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_init#168",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_init (jerry_init_flag_t flags) /**< combination of Jerry flags */",
        "snippet": "void\njerry_init (jerry_init_flag_t flags) /**< combination of Jerry flags */\n{\n  /* This function cannot be called twice unless jerry_cleanup is called. */\n  JERRY_ASSERT (!(JERRY_CONTEXT (status_flags) & ECMA_STATUS_API_AVAILABLE));\n\n  /* Zero out all non-external members. */\n  memset ((char *) &JERRY_CONTEXT_STRUCT + offsetof (jerry_context_t, JERRY_CONTEXT_FIRST_MEMBER), 0,\n          sizeof (jerry_context_t) - offsetof (jerry_context_t, JERRY_CONTEXT_FIRST_MEMBER));\n\n  JERRY_CONTEXT (jerry_init_flags) = flags;\n\n  jerry_make_api_available ();\n\n  jmem_init ();\n  ecma_init ();\n}",
        "begin_line": 168,
        "end_line": 184,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_is_valid_utf8_string#5218",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_is_valid_utf8_string (const jerry_char_t *utf8_buf_p, /**< UTF-8 string */                             jerry_size_t buf_size) /**< string size */",
        "snippet": "bool\njerry_is_valid_utf8_string (const jerry_char_t *utf8_buf_p, /**< UTF-8 string */\n                            jerry_size_t buf_size) /**< string size */\n{\n  return lit_is_valid_utf8_string ((lit_utf8_byte_t *) utf8_buf_p,\n                                   (lit_utf8_size_t) buf_size,\n                                   true);\n}",
        "begin_line": 5218,
        "end_line": 5225,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_parse#507",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_parse (const jerry_char_t *source_p, /**< script source */              size_t source_size, /**< script source size */              const jerry_parse_options_t *options_p) /**< parsing options, can be NULL if not used */",
        "snippet": "jerry_value_t\njerry_parse (const jerry_char_t *source_p, /**< script source */\n             size_t source_size, /**< script source size */\n             const jerry_parse_options_t *options_p) /**< parsing options, can be NULL if not used */\n{\n#if JERRY_PARSER\n  parser_source_char_t source_char;\n  source_char.source_p = source_p;\n  source_char.source_size = source_size;\n\n  return jerry_parse_common ((void *) &source_char, options_p, JERRY_PARSE_NO_OPTS);\n#else /* !JERRY_PARSER */\n  JERRY_UNUSED (source_p);\n  JERRY_UNUSED (source_size);\n  JERRY_UNUSED (options_p);\n\n  return jerry_throw (ecma_raise_syntax_error (ECMA_ERR_MSG (ecma_error_parser_not_supported_p)));\n#endif /* JERRY_PARSER */\n}",
        "begin_line": 507,
        "end_line": 525,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_promise_set_callback#4979",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_promise_set_callback (jerry_promise_event_filter_t filters, /**< combination of event filters */                                  jerry_promise_callback_t callback, /**< notification callback */                                  void *user_p) /**< user pointer passed to the callback */",
        "snippet": "void jerry_promise_set_callback (jerry_promise_event_filter_t filters, /**< combination of event filters */\n                                 jerry_promise_callback_t callback, /**< notification callback */\n                                 void *user_p) /**< user pointer passed to the callback */\n{\n  jerry_assert_api_available ();\n\n#if JERRY_ESNEXT && JERRY_PROMISE_CALLBACK\n  if (filters == JERRY_PROMISE_EVENT_FILTER_DISABLE || callback == NULL)\n  {\n    JERRY_CONTEXT (promise_callback_filters) = JERRY_PROMISE_EVENT_FILTER_DISABLE;\n    return;\n  }\n\n  JERRY_CONTEXT (promise_callback_filters) = (uint32_t) filters;\n  JERRY_CONTEXT (promise_callback) = callback;\n  JERRY_CONTEXT (promise_callback_user_p) = user_p;\n#else /* !JERRY_ESNEXT && !JERRY_PROMISE_CALLBACK */\n  JERRY_UNUSED (filters);\n  JERRY_UNUSED (callback);\n  JERRY_UNUSED (user_p);\n#endif /* JERRY_ESNEXT && JERRY_PROMISE_CALLBACK */\n}",
        "begin_line": 4979,
        "end_line": 5000,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_release_value#2419",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_release_value (jerry_value_t value) /**< API value */",
        "snippet": "void\njerry_release_value (jerry_value_t value) /**< API value */\n{\n  jerry_assert_api_available ();\n\n  if (JERRY_UNLIKELY (ecma_is_value_error_reference (value)))\n  {\n    ecma_deref_error_reference (ecma_get_extended_primitive_from_value (value));\n    return;\n  }\n\n  ecma_free_value (value);\n}",
        "begin_line": 2419,
        "end_line": 2431,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_return#142",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_return (jerry_value_t value) /**< return value */",
        "snippet": "static jerry_value_t\njerry_return (jerry_value_t value) /**< return value */\n{\n  if (ECMA_IS_VALUE_ERROR (value))\n  {\n    value = ecma_create_error_reference_from_context ();\n  }\n\n  return value;\n}",
        "begin_line": 142,
        "end_line": 151,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_run#564",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_run (const jerry_value_t func_val) /**< function to run */",
        "snippet": "jerry_value_t\njerry_run (const jerry_value_t func_val) /**< function to run */\n{\n  jerry_assert_api_available ();\n\n  if (!ecma_is_value_object (func_val))\n  {\n    return jerry_throw (ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_wrong_args_msg_p)));\n  }\n\n  ecma_object_t *object_p = ecma_get_object_from_value (func_val);\n\n  if (!ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_SCRIPT))\n  {\n    return jerry_throw (ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_wrong_args_msg_p)));\n  }\n\n  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n  const ecma_compiled_code_t *bytecode_data_p;\n  bytecode_data_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_compiled_code_t, ext_object_p->u.cls.u3.value);\n\n  JERRY_ASSERT (CBC_FUNCTION_GET_TYPE (bytecode_data_p->status_flags) == CBC_FUNCTION_SCRIPT);\n\n  return jerry_return (vm_run_global (bytecode_data_p, object_p));\n}",
        "begin_line": 564,
        "end_line": 589,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_set_property#3638",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_set_property (const jerry_value_t obj_val, /**< object value */                     const jerry_value_t prop_name_val, /**< property name (string value) */                     const jerry_value_t value_to_set) /**< value to set */",
        "snippet": "jerry_value_t\njerry_set_property (const jerry_value_t obj_val, /**< object value */\n                    const jerry_value_t prop_name_val, /**< property name (string value) */\n                    const jerry_value_t value_to_set) /**< value to set */\n{\n  jerry_assert_api_available ();\n\n  if (ecma_is_value_error_reference (value_to_set)\n      || !ecma_is_value_object (obj_val)\n      || !ecma_is_value_prop_name (prop_name_val))\n  {\n    return jerry_throw (ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_wrong_args_msg_p)));\n  }\n\n  return jerry_return (ecma_op_object_put (ecma_get_object_from_value (obj_val),\n                                           ecma_get_prop_name_from_value (prop_name_val),\n                                           value_to_set,\n                                           true));\n}",
        "begin_line": 3638,
        "end_line": 3656,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_substring_to_utf8_char_buffer#3177",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_substring_to_utf8_char_buffer (const jerry_value_t value, /**< input string value */                                      jerry_length_t start_pos, /**< position of the first character */                                      jerry_length_t end_pos, /**< position of the last character */                                      jerry_char_t *buffer_p, /**< [out] output characters buffer */                                      jerry_size_t buffer_size) /**< size of output buffer */",
        "snippet": "jerry_size_t\njerry_substring_to_utf8_char_buffer (const jerry_value_t value, /**< input string value */\n                                     jerry_length_t start_pos, /**< position of the first character */\n                                     jerry_length_t end_pos, /**< position of the last character */\n                                     jerry_char_t *buffer_p, /**< [out] output characters buffer */\n                                     jerry_size_t buffer_size) /**< size of output buffer */\n{\n  jerry_assert_api_available ();\n\n  if (!ecma_is_value_string (value) || buffer_p == NULL)\n  {\n    return 0;\n  }\n\n  ecma_string_t *str_p = ecma_get_string_from_value (value);\n\n  return ecma_substring_copy_to_utf8_buffer (str_p,\n                                             start_pos,\n                                             end_pos,\n                                             (lit_utf8_byte_t *) buffer_p,\n                                             buffer_size);\n}",
        "begin_line": 3177,
        "end_line": 3198,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_value_is_error#1246",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_value_is_error (const jerry_value_t value) /**< api value */",
        "snippet": "bool\njerry_value_is_error (const jerry_value_t value) /**< api value */\n{\n  jerry_assert_api_available ();\n\n  return ecma_is_value_error_reference (value);\n}",
        "begin_line": 1246,
        "end_line": 1252,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_value_is_symbol#1402",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_value_is_symbol (const jerry_value_t value) /**< api value */",
        "snippet": "bool\njerry_value_is_symbol (const jerry_value_t value) /**< api value */\n{\n  jerry_assert_api_available ();\n\n#if JERRY_ESNEXT\n  return ecma_is_value_symbol (value);\n#else /* !JERRY_ESNEXT */\n  JERRY_UNUSED (value);\n  return false;\n#endif /* JERRY_ESNEXT */\n}",
        "begin_line": 1402,
        "end_line": 1413,
        "is_bug": false
    },
    {
        "name": "jerry-core.api.jerry.jerry_value_to_string#2270",
        "src_path": "jerry-core/api/jerry.c",
        "class_name": "jerry-core.api.jerry",
        "signature": "jerry-core.api.jerry.jerry_value_to_string (const jerry_value_t value) /**< input value */",
        "snippet": "jerry_value_t\njerry_value_to_string (const jerry_value_t value) /**< input value */\n{\n\n  jerry_assert_api_available ();\n\n  if (ecma_is_value_error_reference (value))\n  {\n    return jerry_throw (ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_value_msg_p)));\n  }\n\n  ecma_string_t *str_p = ecma_op_to_string (value);\n  if (JERRY_UNLIKELY (str_p == NULL))\n  {\n    return ecma_create_error_reference_from_context ();\n  }\n\n  return ecma_make_string_value (str_p);\n}",
        "begin_line": 2270,
        "end_line": 2288,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-gc.ecma_free_unused_memory#2261",
        "src_path": "jerry-core/ecma/base/ecma-gc.c",
        "class_name": "jerry-core.ecma.base.ecma-gc",
        "signature": "jerry-core.ecma.base.ecma-gc.ecma_free_unused_memory (jmem_pressure_t pressure) /**< current pressure */",
        "snippet": "void\necma_free_unused_memory (jmem_pressure_t pressure) /**< current pressure */\n{\n#if JERRY_DEBUGGER\n  while ((JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED)\n         && JERRY_CONTEXT (debugger_byte_code_free_tail) != ECMA_NULL_POINTER)\n  {\n    /* Wait until all byte code is freed or the connection is aborted. */\n    jerry_debugger_receive (NULL);\n  }\n#endif /* JERRY_DEBUGGER */\n\n  if (JERRY_LIKELY (pressure == JMEM_PRESSURE_LOW))\n  {\n#if JERRY_PROPERTY_HASHMAP\n    if (JERRY_CONTEXT (ecma_prop_hashmap_alloc_state) > ECMA_PROP_HASHMAP_ALLOC_ON)\n    {\n      --JERRY_CONTEXT (ecma_prop_hashmap_alloc_state);\n    }\n    JERRY_CONTEXT (status_flags) &= (uint32_t) ~ECMA_STATUS_HIGH_PRESSURE_GC;\n#endif /* JERRY_PROPERTY_HASHMAP */\n    /*\n     * If there is enough newly allocated objects since last GC, probably it is worthwhile to start GC now.\n     * Otherwise, probability to free sufficient space is considered to be low.\n     */\n    size_t new_objects_fraction = CONFIG_ECMA_GC_NEW_OBJECTS_FRACTION;\n\n    if (JERRY_CONTEXT (ecma_gc_new_objects) * new_objects_fraction > JERRY_CONTEXT (ecma_gc_objects_number))\n    {\n      ecma_gc_run ();\n    }\n\n    return;\n  }\n  else if (pressure == JMEM_PRESSURE_HIGH)\n  {\n    /* Freeing as much memory as we currently can */\n#if JERRY_PROPERTY_HASHMAP\n    if (JERRY_CONTEXT (status_flags) & ECMA_STATUS_HIGH_PRESSURE_GC)\n    {\n      JERRY_CONTEXT (ecma_prop_hashmap_alloc_state) = ECMA_PROP_HASHMAP_ALLOC_MAX;\n    }\n    else if (JERRY_CONTEXT (ecma_prop_hashmap_alloc_state) < ECMA_PROP_HASHMAP_ALLOC_MAX)\n    {\n      ++JERRY_CONTEXT (ecma_prop_hashmap_alloc_state);\n      JERRY_CONTEXT (status_flags) |= ECMA_STATUS_HIGH_PRESSURE_GC;\n    }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n    ecma_gc_run ();\n\n#if JERRY_PROPERTY_HASHMAP\n    /* Free hashmaps of remaining objects. */\n    jmem_cpointer_t obj_iter_cp = JERRY_CONTEXT (ecma_gc_objects_cp);\n\n    while (obj_iter_cp != JMEM_CP_NULL)\n    {\n      ecma_object_t *obj_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, obj_iter_cp);\n\n      if (!ecma_is_lexical_environment (obj_iter_p)\n          || ecma_get_lex_env_type (obj_iter_p) == ECMA_LEXICAL_ENVIRONMENT_DECLARATIVE)\n      {\n        if (!ecma_is_lexical_environment (obj_iter_p)\n            && ecma_op_object_is_fast_array (obj_iter_p))\n        {\n          obj_iter_cp = obj_iter_p->gc_next_cp;\n          continue;\n        }\n\n        jmem_cpointer_t prop_iter_cp = obj_iter_p->u1.property_list_cp;\n\n        if (prop_iter_cp != JMEM_CP_NULL)\n        {\n          ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, prop_iter_cp);\n\n          if (prop_iter_p->types[0] == ECMA_PROPERTY_TYPE_HASHMAP)\n          {\n            ecma_property_hashmap_free (obj_iter_p);\n          }\n        }\n\n      }\n\n      obj_iter_cp = obj_iter_p->gc_next_cp;\n    }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n    jmem_pools_collect_empty ();\n    return;\n  }\n  else if (JERRY_UNLIKELY (pressure == JMEM_PRESSURE_FULL))\n  {\n    jerry_fatal (ERR_OUT_OF_MEMORY);\n  }\n  else\n  {\n    JERRY_ASSERT (pressure == JMEM_PRESSURE_NONE);\n    JERRY_UNREACHABLE ();\n  }\n}",
        "begin_line": 2261,
        "end_line": 2360,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-gc.ecma_init_gc_info#115",
        "src_path": "jerry-core/ecma/base/ecma-gc.c",
        "class_name": "jerry-core.ecma.base.ecma-gc",
        "signature": "jerry-core.ecma.base.ecma-gc.ecma_init_gc_info (ecma_object_t *object_p) /**< object */",
        "snippet": "extern inline void\necma_init_gc_info (ecma_object_t *object_p) /**< object */\n{\n  JERRY_CONTEXT (ecma_gc_objects_number)++;\n  JERRY_CONTEXT (ecma_gc_new_objects)++;\n\n  JERRY_ASSERT (object_p->type_flags_refs < ECMA_OBJECT_REF_ONE);\n  object_p->type_flags_refs |= ECMA_OBJECT_REF_ONE;\n\n  object_p->gc_next_cp = JERRY_CONTEXT (ecma_gc_objects_cp);\n  ECMA_SET_NON_NULL_POINTER (JERRY_CONTEXT (ecma_gc_objects_cp), object_p);\n}",
        "begin_line": 115,
        "end_line": 126,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-gc.ecma_ref_object#147",
        "src_path": "jerry-core/ecma/base/ecma-gc.c",
        "class_name": "jerry-core.ecma.base.ecma-gc",
        "signature": "jerry-core.ecma.base.ecma-gc.ecma_ref_object (ecma_object_t *object_p) /**< object */",
        "snippet": "void\necma_ref_object (ecma_object_t *object_p) /**< object */\n{\n  ecma_ref_object_inline (object_p);\n}",
        "begin_line": 147,
        "end_line": 151,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-collection.ecma_collection_free#143",
        "src_path": "jerry-core/ecma/base/ecma-helpers-collection.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-collection",
        "signature": "jerry-core.ecma.base.ecma-helpers-collection.ecma_collection_free (ecma_collection_t *collection_p) /**< value collection */",
        "snippet": "void\necma_collection_free (ecma_collection_t *collection_p) /**< value collection */\n{\n  JERRY_ASSERT (collection_p != NULL);\n\n  ecma_value_t *buffer_p = collection_p->buffer_p;\n\n  for (uint32_t i = 0; i < collection_p->item_count; i++)\n  {\n    ecma_free_value (buffer_p[i]);\n  }\n\n  ecma_collection_destroy (collection_p);\n}",
        "begin_line": 143,
        "end_line": 156,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-collection.ecma_collection_has_string_value#272",
        "src_path": "jerry-core/ecma/base/ecma-helpers-collection.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-collection",
        "signature": "jerry-core.ecma.base.ecma-helpers-collection.ecma_collection_has_string_value (ecma_collection_t *collection_p, /**< collection */                                   ecma_string_t *string_p) /**< string */",
        "snippet": "bool\necma_collection_has_string_value (ecma_collection_t *collection_p, /**< collection */\n                                  ecma_string_t *string_p) /**< string */\n{\n  ecma_value_t *buffer_p = collection_p->buffer_p;\n\n  for (uint32_t i = 0; i < collection_p->item_count; i++)\n  {\n    ecma_string_t *current_p = ecma_get_string_from_value (buffer_p[i]);\n\n    if (ecma_compare_ecma_strings (current_p, string_p))\n    {\n      return true;\n    }\n  }\n\n  return false;\n}",
        "begin_line": 272,
        "end_line": 289,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-collection.ecma_collection_push_back#163",
        "src_path": "jerry-core/ecma/base/ecma-helpers-collection.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-collection",
        "signature": "jerry-core.ecma.base.ecma-helpers-collection.ecma_collection_push_back (ecma_collection_t *collection_p, /**< value collection */                            ecma_value_t value) /**< ecma value to append */",
        "snippet": "void\necma_collection_push_back (ecma_collection_t *collection_p, /**< value collection */\n                           ecma_value_t value) /**< ecma value to append */\n{\n  JERRY_ASSERT (collection_p != NULL);\n\n  ecma_value_t *buffer_p = collection_p->buffer_p;\n\n  if (JERRY_LIKELY (collection_p->item_count < collection_p->capacity))\n  {\n    buffer_p[collection_p->item_count++] = value;\n    return;\n  }\n\n  const uint32_t new_capacity = collection_p->capacity + ECMA_COLLECTION_GROW_FACTOR;\n  const uint32_t old_size = ECMA_COLLECTION_ALLOCATED_SIZE (collection_p->capacity);\n  const uint32_t new_size = ECMA_COLLECTION_ALLOCATED_SIZE (new_capacity);\n\n  buffer_p = jmem_heap_realloc_block (buffer_p, old_size, new_size);\n  buffer_p[collection_p->item_count++] = value;\n  collection_p->capacity = new_capacity;\n\n  collection_p->buffer_p = buffer_p;\n}",
        "begin_line": 163,
        "end_line": 186,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-collection.ecma_collection_reserve#191",
        "src_path": "jerry-core/ecma/base/ecma-helpers-collection.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-collection",
        "signature": "jerry-core.ecma.base.ecma-helpers-collection.ecma_collection_reserve (ecma_collection_t *collection_p, /**< value collection */                          uint32_t count) /**< number of ecma values to reserve */",
        "snippet": "void\necma_collection_reserve (ecma_collection_t *collection_p, /**< value collection */\n                         uint32_t count) /**< number of ecma values to reserve */\n{\n  JERRY_ASSERT (collection_p != NULL);\n  JERRY_ASSERT (UINT32_MAX - count > collection_p->capacity);\n\n  const uint32_t new_capacity = collection_p->capacity + count;\n  const uint32_t old_size = ECMA_COLLECTION_ALLOCATED_SIZE (collection_p->capacity);\n  const uint32_t new_size = ECMA_COLLECTION_ALLOCATED_SIZE (new_capacity);\n\n  ecma_value_t *buffer_p = collection_p->buffer_p;\n  buffer_p = jmem_heap_realloc_block (buffer_p, old_size, new_size);\n\n  collection_p->capacity = new_capacity;\n  collection_p->buffer_p = buffer_p;\n}",
        "begin_line": 191,
        "end_line": 207,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-collection.ecma_new_collection#35",
        "src_path": "jerry-core/ecma/base/ecma-helpers-collection.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-collection",
        "signature": "jerry-core.ecma.base.ecma-helpers-collection.ecma_new_collection (void)",
        "snippet": "ecma_collection_t *\necma_new_collection (void)\n{\n  ecma_collection_t *collection_p;\n  collection_p = (ecma_collection_t *) jmem_heap_alloc_block (sizeof (ecma_collection_t));\n\n  collection_p->item_count = 0;\n  collection_p->capacity = ECMA_COLLECTION_INITIAL_CAPACITY;\n  const uint32_t size = ECMA_COLLECTION_ALLOCATED_SIZE (ECMA_COLLECTION_INITIAL_CAPACITY);\n  collection_p->buffer_p = (ecma_value_t *) jmem_heap_alloc_block (size);\n\n  return collection_p;\n}",
        "begin_line": 35,
        "end_line": 47,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-conversion.ecma_number_to_uint32#790",
        "src_path": "jerry-core/ecma/base/ecma-helpers-conversion.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-conversion",
        "signature": "jerry-core.ecma.base.ecma-helpers-conversion.ecma_number_to_uint32 (ecma_number_t num) /**< ecma-number */",
        "snippet": "uint32_t\necma_number_to_uint32 (ecma_number_t num) /**< ecma-number */\n{\n  if (JERRY_UNLIKELY (ecma_number_is_zero (num) || !ecma_number_is_finite (num)))\n  {\n    return 0;\n  }\n\n  const bool sign = ecma_number_is_negative (num);\n  const ecma_number_t abs_num = sign ? -num : num;\n\n  /* 2 ^ 32 */\n  const uint64_t uint64_2_pow_32 = (1ull << 32);\n\n  const ecma_number_t num_2_pow_32 = (float) uint64_2_pow_32;\n\n  ecma_number_t num_in_uint32_range;\n\n  if (abs_num >= num_2_pow_32)\n  {\n    num_in_uint32_range = ecma_number_calc_remainder (abs_num,\n                                                      num_2_pow_32);\n  }\n  else\n  {\n    num_in_uint32_range = abs_num;\n  }\n\n  /* Check that the floating point value can be represented with uint32_t. */\n  JERRY_ASSERT (num_in_uint32_range < uint64_2_pow_32);\n  uint32_t uint32_num = (uint32_t) num_in_uint32_range;\n\n  const uint32_t ret = sign ? -uint32_num : uint32_num;\n\n#ifndef JERRY_NDEBUG\n  if (sign\n      && uint32_num != 0)\n  {\n    JERRY_ASSERT (ret == uint64_2_pow_32 - uint32_num);\n  }\n  else\n  {\n    JERRY_ASSERT (ret == uint32_num);\n  }\n#endif /* !JERRY_NDEBUG */\n\n  return ret;\n}",
        "begin_line": 790,
        "end_line": 837,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-conversion.ecma_utf8_string_to_number#376",
        "src_path": "jerry-core/ecma/base/ecma-helpers-conversion.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-conversion",
        "signature": "jerry-core.ecma.base.ecma-helpers-conversion.ecma_utf8_string_to_number (const lit_utf8_byte_t *str_p, /**< utf-8 string */                             lit_utf8_size_t str_size, /**< string size */                             uint32_t options) /**< allowing underscore option bit */",
        "snippet": "ecma_number_t\necma_utf8_string_to_number (const lit_utf8_byte_t *str_p, /**< utf-8 string */\n                            lit_utf8_size_t str_size, /**< string size */\n                            uint32_t options) /**< allowing underscore option bit */\n{\n  /* TODO: Check license issues */\n\n  if (str_size == 0)\n  {\n    return ECMA_NUMBER_ZERO;\n  }\n\n  ecma_string_trim_helper (&str_p, &str_size);\n  const lit_utf8_byte_t *end_p = str_p + (str_size - 1);\n\n  if (str_size < 1)\n  {\n    return ECMA_NUMBER_ZERO;\n  }\n\n  if (end_p >= str_p + 2\n      && str_p[0] == LIT_CHAR_0)\n  {\n    switch (LEXER_TO_ASCII_LOWERCASE (str_p[1]))\n    {\n      case LIT_CHAR_LOWERCASE_X :\n      {\n        return ecma_utf8_string_to_number_by_radix (str_p + 2, end_p, 16 | options);\n      }\n      case LIT_CHAR_LOWERCASE_O :\n      {\n        return ecma_utf8_string_to_number_by_radix (str_p + 2, end_p, 8 | options);\n      }\n      case LIT_CHAR_LOWERCASE_B :\n      {\n        return ecma_utf8_string_to_number_by_radix (str_p + 2, end_p, 2 | options);\n      }\n      default:\n      {\n        break;\n      }\n    }\n  }\n\n  bool sign = false; /* positive */\n\n  if (*str_p == LIT_CHAR_PLUS)\n  {\n    str_p++;\n  }\n  else if (*str_p == LIT_CHAR_MINUS)\n  {\n    sign = true; /* negative */\n\n    str_p++;\n  }\n\n  if (str_p > end_p)\n  {\n    return ecma_number_make_nan ();\n  }\n\n  /* Checking if significant part of parse string is equal to \"Infinity\" */\n  const lit_utf8_byte_t *infinity_zt_str_p = lit_get_magic_string_utf8 (LIT_MAGIC_STRING_INFINITY_UL);\n\n  JERRY_ASSERT (strlen ((const char *) infinity_zt_str_p) == 8);\n\n  if ((end_p - str_p) == (8 - 1) && memcmp (infinity_zt_str_p, str_p, 8) == 0)\n  {\n    return ecma_number_make_infinity (sign);\n  }\n\n  uint64_t fraction_uint64 = 0;\n  uint32_t digits = 0;\n  int32_t e = 0;\n  bool digit_seen = false;\n\n  /* Parsing digits before dot (or before end of digits part if there is no dot in number) */\n  while (str_p <= end_p)\n  {\n    int32_t digit_value;\n\n    if (*str_p >= LIT_CHAR_0\n        && *str_p <= LIT_CHAR_9)\n    {\n      digit_seen = true;\n      digit_value = (*str_p - LIT_CHAR_0);\n    }\n#if JERRY_ESNEXT\n    else if (*str_p == LIT_CHAR_UNDERSCORE && (options & ECMA_CONVERSION_ALLOW_UNDERSCORE))\n    {\n      str_p++;\n      continue;\n    }\n#endif /* JERRY_ESNEXT */\n    else\n    {\n      break;\n    }\n\n    if (digits != 0 || digit_value != 0)\n    {\n      if (digits < ECMA_NUMBER_MAX_DIGITS)\n      {\n        fraction_uint64 = fraction_uint64 * 10 + (uint32_t) digit_value;\n        digits++;\n      }\n      else\n      {\n        e++;\n      }\n    }\n\n    str_p++;\n  }\n\n  if (str_p <= end_p\n      && *str_p == LIT_CHAR_DOT)\n  {\n    str_p++;\n\n    if (!digit_seen && str_p > end_p)\n    {\n      return ecma_number_make_nan ();\n    }\n\n    /* Parsing number's part that is placed after dot */\n    while (str_p <= end_p)\n    {\n      int32_t digit_value;\n\n      if (*str_p >= LIT_CHAR_0\n          && *str_p <= LIT_CHAR_9)\n      {\n        digit_seen = true;\n        digit_value = (*str_p - LIT_CHAR_0);\n      }\n      else if (*str_p == LIT_CHAR_UNDERSCORE && (options & ECMA_CONVERSION_ALLOW_UNDERSCORE))\n      {\n        str_p++;\n        continue;\n      }\n      else\n      {\n        break;\n      }\n\n      if (digits < ECMA_NUMBER_MAX_DIGITS)\n      {\n        if (digits != 0 || digit_value != 0)\n        {\n          fraction_uint64 = fraction_uint64 * 10 + (uint32_t) digit_value;\n          digits++;\n        }\n\n        e--;\n      }\n\n      str_p++;\n    }\n  }\n\n  /* Parsing exponent literal */\n  int32_t e_in_lit = 0;\n  bool e_in_lit_sign = false;\n\n  if (str_p <= end_p\n      && (*str_p == LIT_CHAR_LOWERCASE_E\n          || *str_p == LIT_CHAR_UPPERCASE_E))\n  {\n    str_p++;\n\n    if (!digit_seen || str_p > end_p)\n    {\n      return ecma_number_make_nan ();\n    }\n\n    if (*str_p == LIT_CHAR_PLUS)\n    {\n      str_p++;\n    }\n    else if (*str_p == LIT_CHAR_MINUS)\n    {\n      e_in_lit_sign = true;\n      str_p++;\n    }\n\n    if (str_p > end_p)\n    {\n      return ecma_number_make_nan ();\n    }\n\n    while (str_p <= end_p)\n    {\n      int32_t digit_value;\n\n      if (*str_p >= LIT_CHAR_0\n          && *str_p <= LIT_CHAR_9)\n      {\n        digit_value = (*str_p - LIT_CHAR_0);\n      }\n#if JERRY_ESNEXT\n      else if (*str_p == LIT_CHAR_UNDERSCORE && (options & ECMA_CONVERSION_ALLOW_UNDERSCORE))\n      {\n        str_p++;\n        continue;\n      }\n#endif /* JERRY_ESNEXT */\n      else\n      {\n        return ecma_number_make_nan ();\n      }\n\n      e_in_lit = e_in_lit * 10 + digit_value;\n      int32_t e_check = e + (int32_t) digits - 1  + (e_in_lit_sign ? -e_in_lit : e_in_lit);\n\n      if (e_check > NUMBER_MAX_DECIMAL_EXPONENT)\n      {\n        return ecma_number_make_infinity (sign);\n      }\n      else if (e_check < NUMBER_MIN_DECIMAL_EXPONENT)\n      {\n        return sign ? -ECMA_NUMBER_ZERO : ECMA_NUMBER_ZERO;\n      }\n\n      str_p++;\n    }\n  }\n\n  /* Adding value of exponent literal to exponent value */\n  if (e_in_lit_sign)\n  {\n    e -= e_in_lit;\n  }\n  else\n  {\n    e += e_in_lit;\n  }\n\n  bool e_sign;\n\n  if (e < 0)\n  {\n    e_sign = true;\n    e = -e;\n  }\n  else\n  {\n    e_sign = false;\n  }\n\n  if (str_p <= end_p)\n  {\n    return ecma_number_make_nan ();\n  }\n\n  JERRY_ASSERT (str_p == end_p + 1);\n\n  if (fraction_uint64 == 0)\n  {\n    return sign ? -ECMA_NUMBER_ZERO : ECMA_NUMBER_ZERO;\n  }\n\n#if JERRY_NUMBER_TYPE_FLOAT64\n  /*\n   * 128-bit mantissa storage\n   *\n   * Normalized: |4 bits zero|124-bit mantissa with highest bit set to 1|\n   */\n  ecma_uint128_t fraction_uint128 = { 0, fraction_uint64 };\n\n  /* Normalizing mantissa */\n  int shift = 4 - ECMA_UINT128_CLZ_MAX63 (fraction_uint128);\n  if (shift < 0)\n  {\n    ECMA_UINT128_LEFT_SHIFT_MAX63 (fraction_uint128, -shift);\n  }\n  else\n  {\n    ECMA_UINT128_RIGHT_SHIFT_MAX63 (fraction_uint128, shift);\n  }\n  int32_t binary_exponent = 1 + shift;\n\n  if (!e_sign)\n  {\n    /* positive or zero decimal exponent */\n    JERRY_ASSERT (e >= 0);\n\n    while (e > 0)\n    {\n      JERRY_ASSERT (ECMA_UINT128_CLZ_MAX63 (fraction_uint128) == 4);\n\n      ECMA_UINT128_MUL10 (fraction_uint128);\n\n      e--;\n\n      /* Normalizing mantissa */\n      shift = 4 - ECMA_UINT128_CLZ_MAX4 (fraction_uint128);\n      JERRY_ASSERT (shift >= 0);\n      ECMA_UINT128_RIGHT_SHIFT_MAX63 (fraction_uint128, shift);\n      binary_exponent += shift;\n    }\n  }\n  else\n  {\n    /* negative decimal exponent */\n    JERRY_ASSERT (e != 0);\n\n    while (e > 0)\n    {\n      /* Denormalizing mantissa, moving highest 1 to bit 127 */\n      shift = ECMA_UINT128_CLZ_MAX4 (fraction_uint128);\n      JERRY_ASSERT (shift <= 4);\n      ECMA_UINT128_LEFT_SHIFT_MAX63 (fraction_uint128, shift);\n      binary_exponent -= shift;\n\n      JERRY_ASSERT (!ECMA_UINT128_IS_ZERO (fraction_uint128));\n\n      ECMA_UINT128_DIV10 (fraction_uint128);\n\n      e--;\n    }\n\n    /* Normalizing mantissa */\n    shift = 4 - ECMA_UINT128_CLZ_MAX4 (fraction_uint128);\n    JERRY_ASSERT (shift >= 0);\n    ECMA_UINT128_RIGHT_SHIFT_MAX63 (fraction_uint128, shift);\n    binary_exponent += shift;\n\n    JERRY_ASSERT (ECMA_UINT128_CLZ_MAX63 (fraction_uint128) == 4);\n  }\n\n  JERRY_ASSERT (!ECMA_UINT128_IS_ZERO (fraction_uint128));\n  JERRY_ASSERT (ECMA_UINT128_CLZ_MAX63 (fraction_uint128) == 4);\n\n  /*\n   * Preparing mantissa for conversion to 52-bit representation, converting it to:\n   *\n   * |11 zero bits|1|116 mantissa bits|\n   */\n  ECMA_UINT128_RIGHT_SHIFT_MAX63 (fraction_uint128, 7u);\n  binary_exponent += 7;\n\n  JERRY_ASSERT (ECMA_UINT128_CLZ_MAX63 (fraction_uint128) == 11);\n\n  fraction_uint64 = ecma_round_high_to_uint64 (&fraction_uint128);\n\n  return ecma_number_make_from_sign_mantissa_and_exponent (sign, fraction_uint64, binary_exponent);\n#elif !JERRY_NUMBER_TYPE_FLOAT64\n  /* Less precise conversion */\n  ecma_number_t num = (ecma_number_t) (uint32_t) fraction_uint64;\n\n  ecma_number_t m = e_sign ? (ecma_number_t) 0.1 : (ecma_number_t) 10.0;\n\n  while (e)\n  {\n    if (e % 2)\n    {\n      num *= m;\n    }\n\n    m *= m;\n    e /= 2;\n  }\n\n  return num;\n#endif /* JERRY_NUMBER_TYPE_FLOAT64 */\n}",
        "begin_line": 376,
        "end_line": 743,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_get_biased_exponent_field#190",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_get_biased_exponent_field (ecma_number_t num) /**< ecma-number */",
        "snippet": "static uint32_t\necma_number_get_biased_exponent_field (ecma_number_t num) /**< ecma-number */\n{\n  uint32_t biased_exp;\n\n  ecma_number_unpack (num, NULL, &biased_exp, NULL);\n\n  return biased_exp;\n}",
        "begin_line": 190,
        "end_line": 198,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_get_fraction_field#175",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_get_fraction_field (ecma_number_t num) /**< ecma-number */",
        "snippet": "static uint64_t\necma_number_get_fraction_field (ecma_number_t num) /**< ecma-number */\n{\n  uint64_t fraction;\n\n  ecma_number_unpack (num, NULL, NULL, &fraction);\n\n  return fraction;\n}",
        "begin_line": 175,
        "end_line": 183,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_get_sign_field#205",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_get_sign_field (ecma_number_t num) /**< ecma-number */",
        "snippet": "static uint32_t\necma_number_get_sign_field (ecma_number_t num) /**< ecma-number */\n{\n  bool sign;\n\n  ecma_number_unpack (num, &sign, NULL, NULL);\n\n  return sign;\n}",
        "begin_line": 205,
        "end_line": 213,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_is_infinity#323",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_is_infinity (ecma_number_t num) /**< ecma-number */",
        "snippet": "bool\necma_number_is_infinity (ecma_number_t num) /**< ecma-number */\n{\n  uint32_t biased_exp = ecma_number_get_biased_exponent_field (num);\n  uint64_t fraction = ecma_number_get_fraction_field (num);\n\n  /* IEEE-754 2008, 3.4, b */\n  return ((biased_exp  == (1u << ECMA_NUMBER_BIASED_EXP_WIDTH) - 1)\n          && (fraction == 0));\n}",
        "begin_line": 323,
        "end_line": 332,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_is_zero#300",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_is_zero (ecma_number_t num) /**< ecma-number */",
        "snippet": "bool\necma_number_is_zero (ecma_number_t num) /**< ecma-number */\n{\n  bool is_zero = (num == ECMA_NUMBER_ZERO);\n\n#ifndef JERRY_NDEBUG\n  /* IEEE-754 2008, 3.4, e */\n  bool is_zero_ieee754 = (ecma_number_get_fraction_field (num) == 0\n                          && ecma_number_get_biased_exponent_field (num) == 0);\n\n  JERRY_ASSERT (is_zero == is_zero_ieee754);\n#endif /* !JERRY_NDEBUG */\n\n  return is_zero;\n}",
        "begin_line": 300,
        "end_line": 314,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_make_from_sign_mantissa_and_exponent#435",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_make_from_sign_mantissa_and_exponent (bool sign, /**< true - for negative sign, false - for positive sign */                                                   uint64_t mantissa, /**< mantissa */                                                   int32_t exponent) /**< binary exponent */",
        "snippet": "ecma_number_t\necma_number_make_from_sign_mantissa_and_exponent (bool sign, /**< true - for negative sign,\n                                                                  false - for positive sign */\n                                                  uint64_t mantissa, /**< mantissa */\n                                                  int32_t exponent) /**< binary exponent */\n{\n  /* Rounding mantissa to fit into fraction field width */\n  if (mantissa & ~((1ull << (ECMA_NUMBER_FRACTION_WIDTH + 1)) - 1))\n  {\n    /* Rounded mantissa looks like the following: |00...0|1|fraction_width mantissa bits| */\n    while ((mantissa & ~((1ull << (ECMA_NUMBER_FRACTION_WIDTH + 1)) - 1)) != 0)\n    {\n      uint64_t rightmost_bit = (mantissa & 1);\n\n      exponent++;\n      mantissa >>= 1;\n\n      if ((mantissa & ~((1ull << (ECMA_NUMBER_FRACTION_WIDTH + 1)) - 1)) == 0)\n      {\n        /* Rounding to nearest value */\n        mantissa += rightmost_bit;\n\n        /* In the first case loop is finished,\n           and in the second - just one shift follows and then loop finishes */\n        JERRY_ASSERT (((mantissa & ~((1ull << (ECMA_NUMBER_FRACTION_WIDTH + 1)) - 1)) == 0)\n                      || (mantissa == (1ull << (ECMA_NUMBER_FRACTION_WIDTH + 1))));\n      }\n    }\n  }\n\n  /* Normalizing mantissa */\n  while (mantissa != 0\n         && ((mantissa & (1ull << ECMA_NUMBER_FRACTION_WIDTH)) == 0))\n  {\n    exponent--;\n    mantissa <<= 1;\n  }\n\n  /* Moving floating point */\n  exponent += ECMA_NUMBER_FRACTION_WIDTH - 1;\n\n  int32_t biased_exp_signed = exponent + ecma_number_exponent_bias;\n\n  if (biased_exp_signed < 1)\n  {\n    /* Denormalizing mantissa if biased_exponent is less than zero */\n    while (biased_exp_signed < 0)\n    {\n      biased_exp_signed++;\n      mantissa >>= 1;\n    }\n\n    /* Rounding to nearest value */\n    mantissa += 1;\n    mantissa >>= 1;\n\n    /* Encoding denormalized exponent */\n    biased_exp_signed = 0;\n  }\n  else\n  {\n    /* Clearing highest mantissa bit that should have been non-zero if mantissa is non-zero */\n    mantissa &= ~(1ull << ECMA_NUMBER_FRACTION_WIDTH);\n  }\n\n  uint32_t biased_exp = (uint32_t) biased_exp_signed;\n\n  if (biased_exp >= ((1u << ECMA_NUMBER_BIASED_EXP_WIDTH) - 1))\n  {\n    return ecma_number_make_infinity (sign);\n  }\n\n  JERRY_ASSERT (biased_exp < (1u << ECMA_NUMBER_BIASED_EXP_WIDTH) - 1);\n  JERRY_ASSERT ((mantissa & ~((1ull << ECMA_NUMBER_FRACTION_WIDTH) - 1)) == 0);\n\n  return ecma_number_pack (sign,\n                           biased_exp,\n                           mantissa);\n}",
        "begin_line": 435,
        "end_line": 513,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_make_infinity#265",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_make_infinity (bool sign) /**< true - for negative Infinity, false - for positive Infinity */",
        "snippet": "ecma_number_t\necma_number_make_infinity (bool sign) /**< true - for negative Infinity,\n                                           false - for positive Infinity */\n{\n  /* IEEE754 INF = sign bit: sign, exponent: all 1 bits, fraction: 0....0 */\n  ecma_number_accessor_t f;\n#if JERRY_NUMBER_TYPE_FLOAT64\n  f.as_uint64_t = sign ? 0xfff0000000000000ull : 0x7ff0000000000000ull;\n#else /* !JERRY_NUMBER_TYPE_FLOAT64 */\n  f.as_uint32_t = sign ? 0xff800000u : 0x7f800000u;\n#endif /* JERRY_NUMBER_TYPE_FLOAT64 */\n  return f.as_ecma_number_t;\n}",
        "begin_line": 265,
        "end_line": 277,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_make_nan#246",
        "src_path": "jerry-core/ecma/base/ecma-helpers-number.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-number",
        "signature": "jerry-core.ecma.base.ecma-helpers-number.ecma_number_make_nan (void)",
        "snippet": "ecma_number_t\necma_number_make_nan (void)\n{\n  /* IEEE754 QNaN = sign bit: 0, exponent: all 1 bits, fraction: 1....0 */\n  ecma_number_accessor_t f;\n#if JERRY_NUMBER_TYPE_FLOAT64\n  f.as_uint64_t = 0x7ff8000000000000ull; /* double QNaN, same as the C99 nan(\"\") returns. */\n#else /* !JERRY_NUMBER_TYPE_FLOAT64 */\n  f.as_uint32_t = 0x7fc00000u;  /* float QNaN, same as the C99 nanf(\"\") returns. */\n#endif /* JERRY_NUMBER_TYPE_FLOAT64 */\n  return f.as_ecma_number_t;\n}",
        "begin_line": 246,
        "end_line": 257,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_append_chars_to_string#728",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_append_chars_to_string (ecma_string_t *string1_p, /**< base ecma-string */                              const lit_utf8_byte_t *cesu8_string2_p, /**< characters to be appended */                              lit_utf8_size_t cesu8_string2_size, /**< byte size of cesu8_string2_p */                              lit_utf8_size_t cesu8_string2_length) /**< character length of cesu8_string2_p */",
        "snippet": "ecma_string_t *\necma_append_chars_to_string (ecma_string_t *string1_p, /**< base ecma-string */\n                             const lit_utf8_byte_t *cesu8_string2_p, /**< characters to be appended */\n                             lit_utf8_size_t cesu8_string2_size, /**< byte size of cesu8_string2_p */\n                             lit_utf8_size_t cesu8_string2_length) /**< character length of cesu8_string2_p */\n{\n  JERRY_ASSERT (string1_p != NULL && cesu8_string2_size > 0 && cesu8_string2_length > 0);\n\n  if (JERRY_UNLIKELY (ecma_string_is_empty (string1_p)))\n  {\n    return ecma_new_ecma_string_from_utf8 (cesu8_string2_p, cesu8_string2_size);\n  }\n\n  lit_utf8_size_t cesu8_string1_size;\n  lit_utf8_size_t cesu8_string1_length;\n  uint8_t flags = ECMA_STRING_FLAG_IS_ASCII;\n  lit_utf8_byte_t uint32_to_string_buffer[ECMA_MAX_CHARS_IN_STRINGIFIED_UINT32];\n\n  const lit_utf8_byte_t *cesu8_string1_p = ecma_string_get_chars (string1_p,\n                                                                  &cesu8_string1_size,\n                                                                  &cesu8_string1_length,\n                                                                  uint32_to_string_buffer,\n                                                                  &flags);\n\n  JERRY_ASSERT (!(flags & ECMA_STRING_FLAG_MUST_BE_FREED));\n  JERRY_ASSERT (cesu8_string1_length > 0);\n  JERRY_ASSERT (cesu8_string1_length <= cesu8_string1_size);\n\n  lit_utf8_size_t new_size = cesu8_string1_size + cesu8_string2_size;\n\n  /* Poor man's carry flag check: it is impossible to allocate this large string. */\n  if (new_size < (cesu8_string1_size | cesu8_string2_size))\n  {\n    jerry_fatal (ERR_OUT_OF_MEMORY);\n  }\n\n  lit_magic_string_id_t magic_string_id;\n  magic_string_id = lit_is_utf8_string_pair_magic (cesu8_string1_p,\n                                                   cesu8_string1_size,\n                                                   cesu8_string2_p,\n                                                   cesu8_string2_size);\n\n  if (magic_string_id != LIT_MAGIC_STRING__COUNT)\n  {\n    ecma_deref_ecma_string (string1_p);\n    return ecma_get_magic_string (magic_string_id);\n  }\n\n  if ((flags & ECMA_STRING_FLAG_IS_UINT32) && new_size <= ECMA_MAX_CHARS_IN_STRINGIFIED_UINT32)\n  {\n    memcpy (uint32_to_string_buffer + cesu8_string1_size, cesu8_string2_p, cesu8_string2_size);\n\n    uint32_t array_index;\n\n    if (ecma_string_to_array_index (uint32_to_string_buffer, new_size, &array_index))\n    {\n      ecma_deref_ecma_string (string1_p);\n      return ecma_new_ecma_string_from_uint32 (array_index);\n    }\n  }\n\n  if (lit_get_magic_string_ex_count () > 0)\n  {\n    lit_magic_string_ex_id_t magic_string_ex_id;\n    magic_string_ex_id = lit_is_ex_utf8_string_pair_magic (cesu8_string1_p,\n                                                           cesu8_string1_size,\n                                                           cesu8_string2_p,\n                                                           cesu8_string2_size);\n\n    if (magic_string_ex_id < lit_get_magic_string_ex_count ())\n    {\n      ecma_deref_ecma_string (string1_p);\n      return ecma_new_ecma_string_from_magic_string_ex_id (magic_string_ex_id);\n    }\n  }\n\n  lit_utf8_byte_t *data_p;\n  ecma_string_t *string_desc_p = ecma_new_ecma_string_from_utf8_buffer (cesu8_string1_length + cesu8_string2_length,\n                                                                        new_size,\n                                                                        &data_p);\n\n  lit_string_hash_t hash_start;\n\n  if (JERRY_UNLIKELY (flags & ECMA_STRING_FLAG_REHASH_NEEDED))\n  {\n    hash_start = lit_utf8_string_calc_hash (cesu8_string1_p, cesu8_string1_size);\n  }\n  else\n  {\n    JERRY_ASSERT (!ECMA_IS_DIRECT_STRING (string1_p));\n    hash_start = string1_p->u.hash;\n  }\n\n  string_desc_p->u.hash = lit_utf8_string_hash_combine (hash_start, cesu8_string2_p, cesu8_string2_size);\n\n  memcpy (data_p, cesu8_string1_p, cesu8_string1_size);\n  memcpy (data_p + cesu8_string1_size, cesu8_string2_p, cesu8_string2_size);\n\n  ecma_deref_ecma_string (string1_p);\n  return (ecma_string_t *) string_desc_p;\n}",
        "begin_line": 728,
        "end_line": 828,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_compare_get_string_chars#1817",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_compare_get_string_chars (const ecma_string_t *string_p, /**< ecma-string */                                lit_utf8_size_t *size_and_length_p) /**< [out] size and length */",
        "snippet": "static const lit_utf8_byte_t *\necma_compare_get_string_chars (const ecma_string_t *string_p, /**< ecma-string */\n                               lit_utf8_size_t *size_and_length_p) /**< [out] size and length */\n{\n  switch (ECMA_STRING_GET_CONTAINER (string_p))\n  {\n    case ECMA_STRING_CONTAINER_HEAP_UTF8_STRING:\n    {\n      ecma_short_string_t *short_string_p = (ecma_short_string_t *) string_p;\n      size_and_length_p[0] = short_string_p->size;\n      size_and_length_p[1] = short_string_p->length;\n      return ECMA_SHORT_STRING_GET_BUFFER (string_p);\n    }\n    case ECMA_STRING_CONTAINER_LONG_OR_EXTERNAL_STRING:\n    {\n      ecma_long_string_t *long_string_p = (ecma_long_string_t *) string_p;\n      size_and_length_p[0] = long_string_p->size;\n      size_and_length_p[1] = long_string_p->length;\n      return long_string_p->string_p;\n    }\n    case ECMA_STRING_CONTAINER_HEAP_ASCII_STRING:\n    {\n      size_and_length_p[0] = ECMA_ASCII_STRING_GET_SIZE (string_p);\n      size_and_length_p[1] = size_and_length_p[0];\n      return ECMA_ASCII_STRING_GET_BUFFER (string_p);\n    }\n    default:\n    {\n      return NULL;\n    }\n  }\n}",
        "begin_line": 1817,
        "end_line": 1848,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_concat_ecma_strings#839",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_concat_ecma_strings (ecma_string_t *string1_p, /**< first ecma-string */                           ecma_string_t *string2_p) /**< second ecma-string */",
        "snippet": "ecma_string_t *\necma_concat_ecma_strings (ecma_string_t *string1_p, /**< first ecma-string */\n                          ecma_string_t *string2_p) /**< second ecma-string */\n{\n  JERRY_ASSERT (string1_p != NULL && string2_p != NULL);\n\n  if (JERRY_UNLIKELY (ecma_string_is_empty (string1_p)))\n  {\n    ecma_ref_ecma_string (string2_p);\n    return string2_p;\n  }\n  else if (JERRY_UNLIKELY (ecma_string_is_empty (string2_p)))\n  {\n    return string1_p;\n  }\n\n  lit_utf8_size_t cesu8_string2_size;\n  lit_utf8_size_t cesu8_string2_length;\n  lit_utf8_byte_t uint32_to_string_buffer[ECMA_MAX_CHARS_IN_STRINGIFIED_UINT32];\n  uint8_t flags = ECMA_STRING_FLAG_IS_ASCII;\n\n  const lit_utf8_byte_t *cesu8_string2_p = ecma_string_get_chars (string2_p,\n                                                                  &cesu8_string2_size,\n                                                                  &cesu8_string2_length,\n                                                                  uint32_to_string_buffer,\n                                                                  &flags);\n\n  JERRY_ASSERT (cesu8_string2_p != NULL);\n\n  ecma_string_t *result_p = ecma_append_chars_to_string (string1_p,\n                                                         cesu8_string2_p,\n                                                         cesu8_string2_size,\n                                                         cesu8_string2_length);\n\n  JERRY_ASSERT (!(flags & ECMA_STRING_FLAG_MUST_BE_FREED));\n\n  return result_p;\n}",
        "begin_line": 839,
        "end_line": 876,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_deref_ecma_string#956",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_deref_ecma_string (ecma_string_t *string_p) /**< ecma-string */",
        "snippet": "void\necma_deref_ecma_string (ecma_string_t *string_p) /**< ecma-string */\n{\n  JERRY_ASSERT (string_p != NULL);\n\n  if (ECMA_IS_DIRECT_STRING (string_p))\n  {\n    return;\n  }\n\n  ecma_deref_ecma_string_non_direct (string_p);\n}",
        "begin_line": 956,
        "end_line": 967,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_destroy_ecma_string#972",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_destroy_ecma_string (ecma_string_t *string_p) /**< ecma-string */",
        "snippet": "void\necma_destroy_ecma_string (ecma_string_t *string_p) /**< ecma-string */\n{\n  JERRY_ASSERT (string_p != NULL);\n  JERRY_ASSERT (!ECMA_IS_DIRECT_STRING (string_p));\n  JERRY_ASSERT ((string_p->refs_and_container < ECMA_STRING_REF_ONE) || ECMA_STRING_IS_STATIC (string_p));\n\n  switch (ECMA_STRING_GET_CONTAINER (string_p))\n  {\n    case ECMA_STRING_CONTAINER_HEAP_UTF8_STRING:\n    {\n      ecma_dealloc_string_buffer (string_p, ((ecma_short_string_t *) string_p)->size + sizeof (ecma_short_string_t));\n      return;\n    }\n    case ECMA_STRING_CONTAINER_LONG_OR_EXTERNAL_STRING:\n    {\n      ecma_long_string_t *long_string_p = (ecma_long_string_t *) string_p;\n\n      if (long_string_p->string_p == ECMA_LONG_STRING_BUFFER_START (long_string_p))\n      {\n        ecma_dealloc_string_buffer (string_p, long_string_p->size + sizeof (ecma_long_string_t));\n        return;\n      }\n\n      ecma_external_string_t *external_string_p = (ecma_external_string_t *) string_p;\n      jerry_external_string_free_callback_t free_cb = JERRY_CONTEXT (external_string_free_callback_p);\n\n      if (free_cb != NULL)\n      {\n        free_cb ((lit_utf8_byte_t *) external_string_p->header.string_p,\n                 external_string_p->header.size,\n                 external_string_p->user_p);\n      }\n\n      ecma_dealloc_external_string (external_string_p);\n      return;\n    }\n    case ECMA_STRING_CONTAINER_HEAP_ASCII_STRING:\n    {\n      ecma_dealloc_string_buffer (string_p, ECMA_ASCII_STRING_GET_SIZE (string_p) + ECMA_ASCII_STRING_HEADER_SIZE);\n      return;\n    }\n#if JERRY_ESNEXT\n    case ECMA_STRING_CONTAINER_SYMBOL:\n    {\n      ecma_extended_string_t *symbol_p = (ecma_extended_string_t *) string_p;\n      ecma_free_value (symbol_p->u.symbol_descriptor);\n      ecma_dealloc_extended_string (symbol_p);\n      return;\n    }\n#endif /* JERRY_ESNEXT */\n    default:\n    {\n      JERRY_ASSERT (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_UINT32_IN_DESC\n                    || ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_MAGIC_STRING_EX);\n\n      /* only the string descriptor itself should be freed */\n      ecma_dealloc_string (string_p);\n    }\n  }\n}",
        "begin_line": 972,
        "end_line": 1032,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_find_special_string#301",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_find_special_string (const lit_utf8_byte_t *string_p, /**< utf8 string */                           lit_utf8_size_t string_size) /**< string size */",
        "snippet": "static ecma_string_t *\necma_find_special_string (const lit_utf8_byte_t *string_p, /**< utf8 string */\n                          lit_utf8_size_t string_size) /**< string size */\n{\n  JERRY_ASSERT (string_p != NULL || string_size == 0);\n  lit_magic_string_id_t magic_string_id = lit_is_utf8_string_magic (string_p, string_size);\n\n  if (magic_string_id != LIT_MAGIC_STRING__COUNT)\n  {\n    return ecma_get_magic_string (magic_string_id);\n  }\n\n  JERRY_ASSERT (string_size > 0);\n\n  if (*string_p >= LIT_CHAR_0 && *string_p <= LIT_CHAR_9)\n  {\n    uint32_t array_index;\n\n    if (ecma_string_to_array_index (string_p, string_size, &array_index))\n    {\n      return ecma_new_ecma_string_from_uint32 (array_index);\n    }\n  }\n\n  if (lit_get_magic_string_ex_count () > 0)\n  {\n    lit_magic_string_ex_id_t magic_string_ex_id = lit_is_ex_utf8_string_magic (string_p, string_size);\n\n    if (magic_string_ex_id < lit_get_magic_string_ex_count ())\n    {\n      return ecma_new_ecma_string_from_magic_string_ex_id (magic_string_ex_id);\n    }\n  }\n\n  return NULL;\n}",
        "begin_line": 301,
        "end_line": 336,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_get_string_magic#2421",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_get_string_magic (const ecma_string_t *string_p) /**< ecma-string */",
        "snippet": "lit_magic_string_id_t\necma_get_string_magic (const ecma_string_t *string_p) /**< ecma-string */\n{\n  if (ECMA_IS_DIRECT_STRING_WITH_TYPE (string_p, ECMA_DIRECT_STRING_MAGIC))\n  {\n    uint32_t id = (uint32_t) ECMA_GET_DIRECT_STRING_VALUE (string_p);\n\n    if (id < LIT_MAGIC_STRING__COUNT)\n    {\n      return (lit_magic_string_id_t) id;\n    }\n  }\n\n  return LIT_MAGIC_STRING__COUNT;\n}",
        "begin_line": 2421,
        "end_line": 2435,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_new_ecma_string_from_number#648",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_new_ecma_string_from_number (ecma_number_t num) /**< ecma-number */",
        "snippet": "ecma_string_t *\necma_new_ecma_string_from_number (ecma_number_t num) /**< ecma-number */\n{\n  uint32_t uint32_num = ecma_number_to_uint32 (num);\n  if (num == ((ecma_number_t) uint32_num))\n  {\n    return ecma_new_ecma_string_from_uint32 (uint32_num);\n  }\n\n  if (ecma_number_is_nan (num))\n  {\n    return ecma_get_magic_string (LIT_MAGIC_STRING_NAN);\n  }\n\n  if (ecma_number_is_infinity (num))\n  {\n    lit_magic_string_id_t id = (ecma_number_is_negative (num) ? LIT_MAGIC_STRING_NEGATIVE_INFINITY_UL\n                                                              : LIT_MAGIC_STRING_INFINITY_UL);\n    return ecma_get_magic_string (id);\n  }\n\n  lit_utf8_byte_t str_buf[ECMA_MAX_CHARS_IN_STRINGIFIED_NUMBER];\n  lit_utf8_size_t str_size = ecma_number_to_utf8_string (num, str_buf, sizeof (str_buf));\n\n  JERRY_ASSERT (str_size > 0);\n#ifndef JERRY_NDEBUG\n  JERRY_ASSERT (lit_is_utf8_string_magic (str_buf, str_size) == LIT_MAGIC_STRING__COUNT\n                && lit_is_ex_utf8_string_magic (str_buf, str_size) == lit_get_magic_string_ex_count ());\n#endif /* !JERRY_NDEBUG */\n\n  lit_utf8_byte_t *data_p;\n  ecma_string_t *string_desc_p = ecma_new_ecma_string_from_utf8_buffer (lit_utf8_string_length (str_buf, str_size),\n                                                                        str_size,\n                                                                        &data_p);\n\n  string_desc_p->u.hash = lit_utf8_string_calc_hash (str_buf, str_size);\n  memcpy (data_p, str_buf, str_size);\n\n  return string_desc_p;\n}",
        "begin_line": 648,
        "end_line": 687,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_new_ecma_string_from_uint32#616",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_new_ecma_string_from_uint32 (uint32_t uint32_number) /**< uint32 value of the string */",
        "snippet": "ecma_string_t *\necma_new_ecma_string_from_uint32 (uint32_t uint32_number) /**< uint32 value of the string */\n{\n  if (JERRY_LIKELY (uint32_number <= ECMA_DIRECT_STRING_MAX_IMM))\n  {\n    return (ecma_string_t *) ECMA_CREATE_DIRECT_STRING (ECMA_DIRECT_STRING_UINT, (uintptr_t) uint32_number);\n  }\n\n  return ecma_new_non_direct_string_from_uint32 (uint32_number);\n}",
        "begin_line": 616,
        "end_line": 625,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_new_ecma_string_from_utf8#370",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_new_ecma_string_from_utf8 (const lit_utf8_byte_t *string_p, /**< utf-8 string */                                 lit_utf8_size_t string_size) /**< string size */",
        "snippet": "ecma_string_t *\necma_new_ecma_string_from_utf8 (const lit_utf8_byte_t *string_p, /**< utf-8 string */\n                                lit_utf8_size_t string_size) /**< string size */\n{\n  JERRY_ASSERT (string_p != NULL || string_size == 0);\n  JERRY_ASSERT (lit_is_valid_cesu8_string (string_p, string_size));\n\n  ecma_string_t *string_desc_p = ecma_find_special_string (string_p, string_size);\n\n  if (string_desc_p != NULL)\n  {\n    return string_desc_p;\n  }\n\n  lit_utf8_byte_t *data_p;\n  string_desc_p = ecma_new_ecma_string_from_utf8_buffer (lit_utf8_string_length (string_p, string_size),\n                                                         string_size,\n                                                         &data_p);\n\n  string_desc_p->u.hash = lit_utf8_string_calc_hash (string_p, string_size);\n  memcpy (data_p, string_p, string_size);\n\n  return string_desc_p;\n}",
        "begin_line": 370,
        "end_line": 393,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_ref_ecma_string#910",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_ref_ecma_string (ecma_string_t *string_p) /**< string descriptor */",
        "snippet": "void\necma_ref_ecma_string (ecma_string_t *string_p) /**< string descriptor */\n{\n  JERRY_ASSERT (string_p != NULL);\n\n  if (ECMA_IS_DIRECT_STRING (string_p))\n  {\n    return;\n  }\n\n  ecma_ref_ecma_string_non_direct (string_p);\n}",
        "begin_line": 910,
        "end_line": 921,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_from_property_name#1727",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_from_property_name (ecma_property_t property, /**< property name type */                                 jmem_cpointer_t prop_name_cp) /**< property name compressed pointer */",
        "snippet": "ecma_string_t *\necma_string_from_property_name (ecma_property_t property, /**< property name type */\n                                jmem_cpointer_t prop_name_cp) /**< property name compressed pointer */\n{\n  if (ECMA_PROPERTY_GET_NAME_TYPE (property) != ECMA_DIRECT_STRING_PTR)\n  {\n    return ecma_property_to_string (property, prop_name_cp);\n  }\n\n  ecma_string_t *prop_name_p = ECMA_GET_NON_NULL_POINTER (ecma_string_t, prop_name_cp);\n  ecma_ref_ecma_string (prop_name_p);\n  return prop_name_p;\n}",
        "begin_line": 1727,
        "end_line": 1739,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_get_ascii_size#2058",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_get_ascii_size (const ecma_string_t *string_p) /**< ecma-string */",
        "snippet": "static lit_utf8_size_t\necma_string_get_ascii_size (const ecma_string_t *string_p) /**< ecma-string */\n{\n  if (ECMA_IS_DIRECT_STRING (string_p))\n  {\n    switch (ECMA_GET_DIRECT_STRING_TYPE (string_p))\n    {\n      case ECMA_DIRECT_STRING_MAGIC:\n      {\n        uint32_t id = (uint32_t) ECMA_GET_DIRECT_STRING_VALUE (string_p);\n\n        if (id >= LIT_MAGIC_STRING__COUNT)\n        {\n          return ECMA_STRING_NO_ASCII_SIZE;\n        }\n\n        JERRY_ASSERT (ECMA_STRING_IS_ASCII (lit_get_magic_string_utf8 (id),\n                                            lit_get_magic_string_size (id)));\n\n        return lit_get_magic_string_size (id);\n      }\n      default:\n      {\n        JERRY_ASSERT (ECMA_GET_DIRECT_STRING_TYPE (string_p) == ECMA_DIRECT_STRING_UINT);\n        uint32_t uint32_number = (uint32_t) ECMA_GET_DIRECT_STRING_VALUE (string_p);\n        return ecma_string_get_uint32_size (uint32_number);\n      }\n    }\n  }\n\n  JERRY_ASSERT (string_p->refs_and_container >= ECMA_STRING_REF_ONE);\n\n  if (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_UINT32_IN_DESC)\n  {\n    return ecma_string_get_uint32_size (string_p->u.uint32_number);\n  }\n  else if (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_HEAP_ASCII_STRING)\n  {\n    return ECMA_ASCII_STRING_GET_SIZE (string_p);\n  }\n\n  return ECMA_STRING_NO_ASCII_SIZE;\n}",
        "begin_line": 2058,
        "end_line": 2100,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_get_chars#1489",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_get_chars (const ecma_string_t *string_p, /**< ecma-string */                        lit_utf8_size_t *size_p, /**< [out] size of the ecma string */                        lit_utf8_size_t *length_p, /**< [out] optional argument. If the pointer is not NULL the pointed                                                    *    memory area is filled with the length of the ecma string */                        lit_utf8_byte_t *uint32_buff_p, /**< [out] optional argument. If the pointer is not NULL the                                                         *    pointed memory area is filled with the string converted                                                         *    uint32 string descriptor */                        uint8_t *flags_p) /**< [in, out] any combination of ecma_string_flag_t bits */",
        "snippet": "const lit_utf8_byte_t *\necma_string_get_chars (const ecma_string_t *string_p, /**< ecma-string */\n                       lit_utf8_size_t *size_p, /**< [out] size of the ecma string */\n                       lit_utf8_size_t *length_p, /**< [out] optional argument. If the pointer is not NULL the pointed\n                                                   *    memory area is filled with the length of the ecma string */\n                       lit_utf8_byte_t *uint32_buff_p, /**< [out] optional argument. If the pointer is not NULL the\n                                                        *    pointed memory area is filled with the string converted\n                                                        *    uint32 string descriptor */\n                       uint8_t *flags_p) /**< [in,out] any combination of ecma_string_flag_t bits */\n{\n  lit_utf8_size_t length;\n  lit_utf8_size_t size;\n  const lit_utf8_byte_t *result_p;\n\n  if (ECMA_IS_DIRECT_STRING (string_p))\n  {\n    *flags_p |= ECMA_STRING_FLAG_REHASH_NEEDED;\n\n    switch (ECMA_GET_DIRECT_STRING_TYPE (string_p))\n    {\n      case ECMA_DIRECT_STRING_MAGIC:\n      {\n        uint32_t id = (uint32_t) ECMA_GET_DIRECT_STRING_VALUE (string_p);\n\n        if (id >= LIT_MAGIC_STRING__COUNT)\n        {\n          id -= LIT_MAGIC_STRING__COUNT;\n          size = lit_get_magic_string_ex_size (id);\n          result_p = lit_get_magic_string_ex_utf8 (id);\n          length = 0;\n\n          if (JERRY_UNLIKELY (*flags_p & ECMA_STRING_FLAG_IS_ASCII))\n          {\n            length = lit_utf8_string_length (result_p, size);\n          }\n        }\n        else\n        {\n          size = lit_get_magic_string_size (id);\n          length = size;\n\n          result_p = lit_get_magic_string_utf8 (id);\n\n          /* All magic strings must be ascii strings. */\n          JERRY_ASSERT (ECMA_STRING_IS_ASCII (result_p, size));\n        }\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (ECMA_GET_DIRECT_STRING_TYPE (string_p) == ECMA_DIRECT_STRING_UINT);\n        uint32_t uint32_number = (uint32_t) ECMA_GET_DIRECT_STRING_VALUE (string_p);\n        size = (lit_utf8_size_t) ecma_string_get_uint32_size (uint32_number);\n\n        if (uint32_buff_p != NULL)\n        {\n          result_p = uint32_buff_p;\n        }\n        else\n        {\n          result_p = (const lit_utf8_byte_t *) jmem_heap_alloc_block (size);\n          *flags_p |= ECMA_STRING_FLAG_MUST_BE_FREED;\n        }\n\n        length = ecma_uint32_to_utf8_string (uint32_number, (lit_utf8_byte_t *) result_p, size);\n\n        JERRY_ASSERT (length == size);\n        *flags_p |= ECMA_STRING_FLAG_IS_UINT32;\n        break;\n      }\n    }\n  }\n  else\n  {\n    JERRY_ASSERT (string_p->refs_and_container >= ECMA_STRING_REF_ONE);\n\n    switch (ECMA_STRING_GET_CONTAINER (string_p))\n    {\n      case ECMA_STRING_CONTAINER_HEAP_UTF8_STRING:\n      {\n        ecma_short_string_t *short_string_p = (ecma_short_string_t *) string_p;\n        size = short_string_p->size;\n        length = short_string_p->length;\n        result_p = ECMA_SHORT_STRING_GET_BUFFER (short_string_p);\n        break;\n      }\n      case ECMA_STRING_CONTAINER_LONG_OR_EXTERNAL_STRING:\n      {\n        ecma_long_string_t *long_string_desc_p = (ecma_long_string_t *) string_p;\n        size = long_string_desc_p->size;\n        length = long_string_desc_p->length;\n        result_p = long_string_desc_p->string_p;\n        break;\n      }\n      case ECMA_STRING_CONTAINER_HEAP_ASCII_STRING:\n      {\n        size = ECMA_ASCII_STRING_GET_SIZE (string_p);\n        length = size;\n        result_p = ECMA_ASCII_STRING_GET_BUFFER (string_p);\n        break;\n      }\n      case ECMA_STRING_CONTAINER_UINT32_IN_DESC:\n      {\n        size = (lit_utf8_size_t) ecma_string_get_uint32_size (string_p->u.uint32_number);\n\n        if (uint32_buff_p != NULL)\n        {\n          result_p = uint32_buff_p;\n        }\n        else\n        {\n          result_p = (const lit_utf8_byte_t *) jmem_heap_alloc_block (size);\n          *flags_p |= ECMA_STRING_FLAG_MUST_BE_FREED;\n        }\n\n        length = ecma_uint32_to_utf8_string (string_p->u.uint32_number, (lit_utf8_byte_t *) result_p, size);\n\n        JERRY_ASSERT (length == size);\n        *flags_p |= ECMA_STRING_FLAG_IS_UINT32 | ECMA_STRING_FLAG_REHASH_NEEDED;\n        break;\n\n      }\n      default:\n      {\n        JERRY_ASSERT (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_MAGIC_STRING_EX);\n\n        lit_magic_string_ex_id_t id = LIT_MAGIC_STRING__COUNT - string_p->u.magic_string_ex_id;\n        size = lit_get_magic_string_ex_size (id);\n        length = 0;\n\n        if (JERRY_UNLIKELY (*flags_p & ECMA_STRING_FLAG_IS_ASCII))\n        {\n          length = lit_utf8_string_length (lit_get_magic_string_ex_utf8 (id), size);\n        }\n\n        result_p = lit_get_magic_string_ex_utf8 (id);\n        *flags_p |= ECMA_STRING_FLAG_REHASH_NEEDED;\n        break;\n      }\n    }\n  }\n\n  *size_p = size;\n  if (length_p != NULL)\n  {\n    *length_p = length;\n  }\n\n  if ((*flags_p & ECMA_STRING_FLAG_IS_ASCII)\n      && length != size)\n  {\n    *flags_p = (uint8_t) (*flags_p & (uint8_t) ~ECMA_STRING_FLAG_IS_ASCII);\n  }\n\n  return result_p;\n}",
        "begin_line": 1489,
        "end_line": 1644,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_get_chars_fast#131",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_get_chars_fast (const ecma_string_t *string_p, /**< ecma-string */                             lit_utf8_size_t *size_p) /**< [out] size of the ecma string */",
        "snippet": "static const lit_utf8_byte_t *\necma_string_get_chars_fast (const ecma_string_t *string_p, /**< ecma-string */\n                            lit_utf8_size_t *size_p) /**< [out] size of the ecma string */\n{\n  if (ECMA_IS_DIRECT_STRING (string_p))\n  {\n    if (ECMA_GET_DIRECT_STRING_TYPE (string_p) == ECMA_DIRECT_STRING_MAGIC)\n    {\n      uint32_t id = (uint32_t) ECMA_GET_DIRECT_STRING_VALUE (string_p);\n\n      if (id >= LIT_MAGIC_STRING__COUNT)\n      {\n        id -= LIT_MAGIC_STRING__COUNT;\n\n        *size_p = lit_get_magic_string_ex_size (id);\n        return lit_get_magic_string_ex_utf8 (id);\n      }\n\n      *size_p = lit_get_magic_string_size (id);\n      return lit_get_magic_string_utf8 (id);\n    }\n  }\n\n  JERRY_ASSERT (string_p->refs_and_container >= ECMA_STRING_REF_ONE);\n\n  switch (ECMA_STRING_GET_CONTAINER (string_p))\n  {\n    case ECMA_STRING_CONTAINER_HEAP_UTF8_STRING:\n    {\n      *size_p = ((ecma_short_string_t *) string_p)->size;\n      return ECMA_SHORT_STRING_GET_BUFFER (string_p);\n    }\n    case ECMA_STRING_CONTAINER_LONG_OR_EXTERNAL_STRING:\n    {\n      ecma_long_string_t *long_string_p = (ecma_long_string_t *) string_p;\n      *size_p = long_string_p->size;\n      return long_string_p->string_p;\n    }\n    case ECMA_STRING_CONTAINER_HEAP_ASCII_STRING:\n    {\n      *size_p = ECMA_ASCII_STRING_GET_SIZE (string_p);\n      return ECMA_ASCII_STRING_GET_BUFFER (string_p);\n    }\n    default:\n    {\n      JERRY_ASSERT (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_MAGIC_STRING_EX);\n\n      lit_magic_string_ex_id_t id = LIT_MAGIC_STRING__COUNT - string_p->u.magic_string_ex_id;\n      *size_p = lit_get_magic_string_ex_size (id);\n      return lit_get_magic_string_ex_utf8 (id);\n    }\n  }\n}",
        "begin_line": 131,
        "end_line": 183,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_get_length#2107",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_get_length (const ecma_string_t *string_p) /**< ecma-string */",
        "snippet": "lit_utf8_size_t\necma_string_get_length (const ecma_string_t *string_p) /**< ecma-string */\n{\n  lit_utf8_size_t length = ecma_string_get_ascii_size (string_p);\n\n  if (length != ECMA_STRING_NO_ASCII_SIZE)\n  {\n    return length;\n  }\n\n  if (ECMA_IS_DIRECT_STRING (string_p))\n  {\n    JERRY_ASSERT (ECMA_GET_DIRECT_STRING_TYPE (string_p) == ECMA_DIRECT_STRING_MAGIC);\n    JERRY_ASSERT ((uint32_t) ECMA_GET_DIRECT_STRING_VALUE (string_p) >= LIT_MAGIC_STRING__COUNT);\n\n    uint32_t id = (uint32_t) ECMA_GET_DIRECT_STRING_VALUE (string_p) - LIT_MAGIC_STRING__COUNT;\n    return lit_utf8_string_length (lit_get_magic_string_ex_utf8 (id),\n                                   lit_get_magic_string_ex_size (id));\n  }\n\n  if (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_HEAP_UTF8_STRING)\n  {\n    return ((ecma_short_string_t *) string_p)->length;\n  }\n\n  if (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_LONG_OR_EXTERNAL_STRING)\n  {\n    return ((ecma_long_string_t *) string_p)->length;\n  }\n\n  JERRY_ASSERT (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_MAGIC_STRING_EX);\n\n  lit_magic_string_ex_id_t id = LIT_MAGIC_STRING__COUNT - string_p->u.magic_string_ex_id;\n  return lit_utf8_string_length (lit_get_magic_string_ex_utf8 (id),\n                                 lit_get_magic_string_ex_size (id));\n}",
        "begin_line": 2107,
        "end_line": 2142,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_get_utf8_length#2149",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_get_utf8_length (const ecma_string_t *string_p) /**< ecma-string */",
        "snippet": "lit_utf8_size_t\necma_string_get_utf8_length (const ecma_string_t *string_p) /**< ecma-string */\n{\n  lit_utf8_size_t length = ecma_string_get_ascii_size (string_p);\n\n  if (length != ECMA_STRING_NO_ASCII_SIZE)\n  {\n    return length;\n  }\n\n  if (ECMA_IS_DIRECT_STRING (string_p))\n  {\n    JERRY_ASSERT (ECMA_GET_DIRECT_STRING_TYPE (string_p) == ECMA_DIRECT_STRING_MAGIC);\n    JERRY_ASSERT ((uint32_t) ECMA_GET_DIRECT_STRING_VALUE (string_p) >= LIT_MAGIC_STRING__COUNT);\n\n    uint32_t id = (uint32_t) ECMA_GET_DIRECT_STRING_VALUE (string_p) - LIT_MAGIC_STRING__COUNT;\n    return lit_get_utf8_length_of_cesu8_string (lit_get_magic_string_ex_utf8 (id),\n                                                lit_get_magic_string_ex_size (id));\n  }\n\n  if (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_HEAP_UTF8_STRING)\n  {\n    ecma_short_string_t *short_string_p = (ecma_short_string_t *) string_p;\n    lit_utf8_size_t size = short_string_p->size;\n\n    if (size == short_string_p->length)\n    {\n      return size;\n    }\n\n    return lit_get_utf8_length_of_cesu8_string (ECMA_SHORT_STRING_GET_BUFFER (string_p), size);\n  }\n\n  if (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_LONG_OR_EXTERNAL_STRING)\n  {\n    ecma_long_string_t *long_string_p = (ecma_long_string_t *) string_p;\n    lit_utf8_size_t size = long_string_p->size;\n\n    if (size == long_string_p->length)\n    {\n      return size;\n    }\n\n    return lit_get_utf8_length_of_cesu8_string (long_string_p->string_p, size);\n  }\n\n  JERRY_ASSERT (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_MAGIC_STRING_EX);\n\n  lit_magic_string_ex_id_t id = LIT_MAGIC_STRING__COUNT - string_p->u.magic_string_ex_id;\n\n  return lit_get_utf8_length_of_cesu8_string (lit_get_magic_string_ex_utf8 (id),\n                                              lit_get_magic_string_ex_size (id));\n}",
        "begin_line": 2149,
        "end_line": 2201,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_to_number#1039",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_to_number (const ecma_string_t *string_p) /**< ecma-string */",
        "snippet": "ecma_number_t\necma_string_to_number (const ecma_string_t *string_p) /**< ecma-string */\n{\n  JERRY_ASSERT (string_p != NULL);\n\n  if (ECMA_IS_DIRECT_STRING (string_p))\n  {\n    if (ECMA_IS_DIRECT_STRING_WITH_TYPE (string_p, ECMA_DIRECT_STRING_UINT))\n    {\n      return (ecma_number_t) ECMA_GET_DIRECT_STRING_VALUE (string_p);\n    }\n  }\n  else if (ECMA_STRING_GET_CONTAINER (string_p) == ECMA_STRING_CONTAINER_UINT32_IN_DESC)\n  {\n    return ((ecma_number_t) string_p->u.uint32_number);\n  }\n\n  lit_utf8_size_t size;\n  const lit_utf8_byte_t *chars_p = ecma_string_get_chars_fast (string_p, &size);\n\n  JERRY_ASSERT (chars_p != NULL);\n\n  if (size == 0)\n  {\n    return ECMA_NUMBER_ZERO;\n  }\n\n  return ecma_utf8_string_to_number (chars_p, size, 0);\n}",
        "begin_line": 1039,
        "end_line": 1067,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_trim_back#2541",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_trim_back (const lit_utf8_byte_t *start_p, /**< current string's start position */                        const lit_utf8_byte_t *end_p)  /**< current string's end position */",
        "snippet": "const lit_utf8_byte_t *\necma_string_trim_back (const lit_utf8_byte_t *start_p, /**< current string's start position */\n                       const lit_utf8_byte_t *end_p)  /**< current string's end position */\n{\n  ecma_char_t ch;\n\n  while (end_p > start_p)\n  {\n    lit_utf8_size_t read_size = lit_read_prev_code_unit_from_utf8 (end_p, &ch);\n\n    if (!lit_char_is_white_space (ch))\n    {\n      break;\n    }\n\n    end_p -= read_size;\n  }\n\n  return end_p;\n}",
        "begin_line": 2541,
        "end_line": 2560,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_trim_front#2512",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_string_trim_front (const lit_utf8_byte_t *start_p, /**< current string's start position */                         const lit_utf8_byte_t *end_p)  /**< current string's end position */",
        "snippet": "const lit_utf8_byte_t *\necma_string_trim_front (const lit_utf8_byte_t *start_p, /**< current string's start position */\n                        const lit_utf8_byte_t *end_p)  /**< current string's end position */\n{\n  ecma_char_t ch;\n\n  while (start_p < end_p)\n  {\n    lit_utf8_size_t read_size = lit_read_code_unit_from_cesu8 (start_p, &ch);\n\n    if (!lit_char_is_white_space (ch))\n    {\n      break;\n    }\n\n    start_p += read_size;\n  }\n\n  return start_p;\n}",
        "begin_line": 2512,
        "end_line": 2531,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_stringbuilder_append_byte#2921",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_stringbuilder_append_byte (ecma_stringbuilder_t *builder_p, /**< string builder */                                 const lit_utf8_byte_t byte) /**< byte */",
        "snippet": "void\necma_stringbuilder_append_byte (ecma_stringbuilder_t *builder_p, /**< string builder */\n                                const lit_utf8_byte_t byte) /**< byte */\n{\n  lit_utf8_byte_t *dest_p = ecma_stringbuilder_grow (builder_p, 1);\n  *dest_p = byte;\n}",
        "begin_line": 2921,
        "end_line": 2927,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_stringbuilder_append_magic#2872",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_stringbuilder_append_magic (ecma_stringbuilder_t *builder_p, /**< string builder */                                  const lit_magic_string_id_t id) /**< magic string id */",
        "snippet": "void\necma_stringbuilder_append_magic (ecma_stringbuilder_t *builder_p, /**< string builder */\n                                 const lit_magic_string_id_t id) /**< magic string id */\n{\n  const lit_utf8_size_t string_size = lit_get_magic_string_size (id);\n  lit_utf8_byte_t *dest_p = ecma_stringbuilder_grow (builder_p, string_size);\n\n  const lit_utf8_byte_t *string_data_p = lit_get_magic_string_utf8 (id);\n  memcpy (dest_p, string_data_p, string_size);\n}",
        "begin_line": 2872,
        "end_line": 2881,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_stringbuilder_create#2716",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_stringbuilder_create (void)",
        "snippet": "ecma_stringbuilder_t\necma_stringbuilder_create (void)\n{\n  const lit_utf8_size_t initial_size = ECMA_ASCII_STRING_HEADER_SIZE;\n  ecma_stringbuilder_header_t *header_p = (ecma_stringbuilder_header_t *) jmem_heap_alloc_block (initial_size);\n  header_p->current_size = initial_size;\n#if JERRY_MEM_STATS\n  jmem_stats_allocate_string_bytes (initial_size);\n#endif /* JERRY_MEM_STATS */\n\n  ecma_stringbuilder_t ret = {.header_p = header_p};\n  return ret;\n}",
        "begin_line": 2716,
        "end_line": 2728,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_stringbuilder_finalize#2937",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_stringbuilder_finalize (ecma_stringbuilder_t *builder_p) /**< string builder */",
        "snippet": "ecma_string_t *\necma_stringbuilder_finalize (ecma_stringbuilder_t *builder_p) /**< string builder */\n{\n  ecma_stringbuilder_header_t *header_p = builder_p->header_p;\n  JERRY_ASSERT (header_p != NULL);\n\n  const lit_utf8_size_t string_size = ECMA_STRINGBUILDER_STRING_SIZE (header_p);\n  lit_utf8_byte_t *string_begin_p = ECMA_STRINGBUILDER_STRING_PTR (header_p);\n\n  ecma_string_t *string_p = ecma_find_special_string (string_begin_p, string_size);\n\n  if (JERRY_UNLIKELY (string_p != NULL))\n  {\n    ecma_stringbuilder_destroy (builder_p);\n    return string_p;\n  }\n\n#ifndef JERRY_NDEBUG\n  builder_p->header_p = NULL;\n#endif\n\n  size_t container_size = sizeof (ecma_short_string_t);\n  const lit_string_hash_t hash = lit_utf8_string_calc_hash (string_begin_p, string_size);\n  const lit_utf8_size_t length = lit_utf8_string_length (string_begin_p, string_size);\n\n  if (JERRY_LIKELY (string_size <= UINT16_MAX))\n  {\n    if (JERRY_LIKELY (length == string_size) && string_size <= (UINT8_MAX + 1))\n    {\n      string_p = (ecma_string_t *) header_p;\n      string_p->refs_and_container = ECMA_STRING_CONTAINER_HEAP_ASCII_STRING | ECMA_STRING_REF_ONE;\n      string_p->u.hash = hash;\n      ECMA_ASCII_STRING_SET_SIZE (string_p, string_size);\n\n      return (ecma_string_t *) string_p;\n    }\n  }\n  else\n  {\n    container_size = sizeof (ecma_long_string_t);\n  }\n\n  const size_t utf8_string_size = string_size + container_size;\n  header_p = jmem_heap_realloc_block (header_p, header_p->current_size, utf8_string_size);\n  memmove (((lit_utf8_byte_t *) header_p + container_size),\n           ECMA_STRINGBUILDER_STRING_PTR (header_p),\n           string_size);\n\n#if JERRY_MEM_STATS\n  jmem_stats_allocate_string_bytes (container_size - ECMA_ASCII_STRING_HEADER_SIZE);\n#endif /* JERRY_MEM_STATS */\n\n  if (JERRY_LIKELY (string_size <= UINT16_MAX))\n  {\n    ecma_short_string_t *short_string_p = (ecma_short_string_t *) header_p;\n\n    short_string_p->header.refs_and_container = ECMA_STRING_CONTAINER_HEAP_UTF8_STRING | ECMA_STRING_REF_ONE;\n    short_string_p->header.u.hash = hash;\n    short_string_p->size = (uint16_t) string_size;\n    short_string_p->length = (uint16_t) length;\n\n    return (ecma_string_t *) short_string_p;\n  }\n\n  ecma_long_string_t *long_string_p = (ecma_long_string_t *) header_p;\n\n  long_string_p->header.refs_and_container = ECMA_STRING_CONTAINER_LONG_OR_EXTERNAL_STRING | ECMA_STRING_REF_ONE;\n  long_string_p->header.u.hash = hash;\n  long_string_p->string_p = ECMA_LONG_STRING_BUFFER_START (long_string_p);\n  long_string_p->size = string_size;\n  long_string_p->length = length;\n\n  return (ecma_string_t *) long_string_p;\n}",
        "begin_line": 2937,
        "end_line": 3010,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_stringbuilder_grow#2784",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_stringbuilder_grow (ecma_stringbuilder_t *builder_p, /**< string builder */                          lit_utf8_size_t required_size) /**< required size */",
        "snippet": "static lit_utf8_byte_t *\necma_stringbuilder_grow (ecma_stringbuilder_t *builder_p, /**< string builder */\n                         lit_utf8_size_t required_size) /**< required size */\n{\n  ecma_stringbuilder_header_t *header_p = builder_p->header_p;\n  JERRY_ASSERT (header_p != NULL);\n\n  const lit_utf8_size_t new_size = header_p->current_size + required_size;\n  header_p = jmem_heap_realloc_block (header_p, header_p->current_size, new_size);\n  header_p->current_size = new_size;\n  builder_p->header_p = header_p;\n\n#if JERRY_MEM_STATS\n  jmem_stats_allocate_string_bytes (required_size);\n#endif /* JERRY_MEM_STATS */\n\n  return ((lit_utf8_byte_t *)  header_p) + header_p->current_size - required_size;\n}",
        "begin_line": 2784,
        "end_line": 2801,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-string.ecma_substring_copy_to_utf8_buffer#1303",
        "src_path": "jerry-core/ecma/base/ecma-helpers-string.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-string",
        "signature": "jerry-core.ecma.base.ecma-helpers-string.ecma_substring_copy_to_utf8_buffer (const ecma_string_t *string_desc_p, /**< ecma-string descriptor */                                     lit_utf8_size_t start_pos, /**< position of the first character */                                     lit_utf8_size_t end_pos, /**< position of the last character */                                     lit_utf8_byte_t *buffer_p, /**< destination buffer pointer                                                                 * (can be NULL if buffer_size == 0) */                                     lit_utf8_size_t buffer_size) /**< size of buffer */",
        "snippet": "lit_utf8_size_t\necma_substring_copy_to_utf8_buffer (const ecma_string_t *string_desc_p, /**< ecma-string descriptor */\n                                    lit_utf8_size_t start_pos, /**< position of the first character */\n                                    lit_utf8_size_t end_pos, /**< position of the last character */\n                                    lit_utf8_byte_t *buffer_p, /**< destination buffer pointer\n                                                                * (can be NULL if buffer_size == 0) */\n                                    lit_utf8_size_t buffer_size) /**< size of buffer */\n{\n  JERRY_ASSERT (string_desc_p != NULL);\n  JERRY_ASSERT (ECMA_IS_DIRECT_STRING (string_desc_p) || string_desc_p->refs_and_container >= ECMA_STRING_REF_ONE);\n  JERRY_ASSERT (buffer_p != NULL || buffer_size == 0);\n\n  lit_utf8_size_t size = 0;\n\n  lit_utf8_size_t utf8_str_length = ecma_string_get_utf8_length (string_desc_p);\n\n  if (start_pos >= utf8_str_length || start_pos >= end_pos)\n  {\n    return 0;\n  }\n\n  if (end_pos > utf8_str_length)\n  {\n    end_pos = utf8_str_length;\n  }\n\n  ECMA_STRING_TO_UTF8_STRING (string_desc_p, cesu8_str_p, cesu8_str_size);\n  lit_utf8_size_t cesu8_str_length = ecma_string_get_length (string_desc_p);\n\n  if (cesu8_str_length == cesu8_str_size)\n  {\n    cesu8_str_p += start_pos;\n    size = end_pos - start_pos;\n\n    if (size > buffer_size)\n    {\n      size = buffer_size;\n    }\n\n    memcpy (buffer_p, cesu8_str_p, size);\n  }\n  else\n  {\n    const lit_utf8_byte_t *cesu8_end_pos = cesu8_str_p + cesu8_str_size;\n    end_pos -= start_pos;\n\n    while (start_pos--)\n    {\n      ecma_char_t ch;\n      lit_utf8_size_t code_unit_size = lit_read_code_unit_from_cesu8 (cesu8_str_p, &ch);\n\n      cesu8_str_p += code_unit_size;\n      if ((cesu8_str_p != cesu8_end_pos) && lit_is_code_point_utf16_high_surrogate (ch))\n      {\n        ecma_char_t next_ch;\n        lit_utf8_size_t next_ch_size = lit_read_code_unit_from_cesu8 (cesu8_str_p, &next_ch);\n        if (lit_is_code_point_utf16_low_surrogate (next_ch))\n        {\n          JERRY_ASSERT (code_unit_size == next_ch_size);\n          cesu8_str_p += code_unit_size;\n        }\n      }\n    }\n\n    const lit_utf8_byte_t *cesu8_pos = cesu8_str_p;\n\n    lit_utf8_byte_t *utf8_pos = buffer_p;\n    lit_utf8_byte_t *utf8_end_pos = buffer_p + buffer_size;\n\n    while (end_pos--)\n    {\n      ecma_char_t ch;\n      lit_utf8_size_t code_unit_size = lit_read_code_unit_from_cesu8 (cesu8_pos, &ch);\n\n      if ((size + code_unit_size) > buffer_size)\n      {\n        break;\n      }\n\n      if (((cesu8_pos + code_unit_size) != cesu8_end_pos) && lit_is_code_point_utf16_high_surrogate (ch))\n      {\n        ecma_char_t next_ch;\n        lit_utf8_size_t next_ch_size = lit_read_code_unit_from_cesu8 (cesu8_pos + code_unit_size, &next_ch);\n\n        if (lit_is_code_point_utf16_low_surrogate (next_ch))\n        {\n          JERRY_ASSERT (code_unit_size == next_ch_size);\n\n          if ((size + code_unit_size + 1) > buffer_size)\n          {\n            break;\n          }\n\n          cesu8_pos += next_ch_size;\n\n          lit_code_point_t code_point = lit_convert_surrogate_pair_to_code_point (ch, next_ch);\n          lit_code_point_to_utf8 (code_point, utf8_pos);\n          size += (code_unit_size + 1);\n        }\n        else\n        {\n          memcpy (utf8_pos, cesu8_pos, code_unit_size);\n          size += code_unit_size;\n        }\n      }\n      else\n      {\n        memcpy (utf8_pos, cesu8_pos, code_unit_size);\n        size += code_unit_size;\n      }\n\n      utf8_pos = buffer_p + size;\n      cesu8_pos += code_unit_size;\n    }\n\n    JERRY_ASSERT (utf8_pos <= utf8_end_pos);\n  }\n\n  ECMA_FINALIZE_UTF8_STRING (cesu8_str_p, cesu8_str_size);\n  JERRY_ASSERT (size <= buffer_size);\n\n  return size;\n}",
        "begin_line": 1303,
        "end_line": 1425,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_check_value_type_is_spec_defined#441",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_check_value_type_is_spec_defined (ecma_value_t value) /**< ecma value */",
        "snippet": "void\necma_check_value_type_is_spec_defined (ecma_value_t value) /**< ecma value */\n{\n  JERRY_ASSERT (ecma_is_value_undefined (value)\n                || ecma_is_value_null (value)\n                || ecma_is_value_boolean (value)\n                || ecma_is_value_number (value)\n                || ecma_is_value_string (value)\n                || ecma_is_value_bigint (value)\n                || ecma_is_value_symbol (value)\n                || ecma_is_value_object (value));\n}",
        "begin_line": 441,
        "end_line": 452,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_copy_value#894",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_copy_value (ecma_value_t value)  /**< value description */",
        "snippet": "ecma_value_t\necma_copy_value (ecma_value_t value)  /**< value description */\n{\n  switch (ecma_get_value_type_field (value))\n  {\n    case ECMA_TYPE_FLOAT:\n    {\n      ecma_number_t *num_p = (ecma_number_t *) ecma_get_pointer_from_ecma_value (value);\n      ecma_number_t *new_num_p = ecma_alloc_number ();\n\n      *new_num_p = *num_p;\n\n      return ecma_make_float_value (new_num_p);\n    }\n#if JERRY_ESNEXT\n    case ECMA_TYPE_SYMBOL:\n#endif /* JERRY_ESNEXT */\n    case ECMA_TYPE_STRING:\n    {\n      ecma_string_t *string_p = (ecma_string_t *) ecma_get_pointer_from_ecma_value (value);\n      ecma_ref_ecma_string_non_direct (string_p);\n      return value;\n    }\n#if JERRY_BUILTIN_BIGINT\n    case ECMA_TYPE_BIGINT:\n    {\n      if (value != ECMA_BIGINT_ZERO)\n      {\n        ecma_ref_extended_primitive (ecma_get_extended_primitive_from_value (value));\n      }\n      return value;\n    }\n#endif /* JERRY_BUILTIN_BIGINT */\n    case ECMA_TYPE_OBJECT:\n    {\n      ecma_ref_object_inline (ecma_get_object_from_value (value));\n      return value;\n    }\n    default:\n    {\n      JERRY_ASSERT (ecma_get_value_type_field (value) == ECMA_TYPE_DIRECT\n                    || ecma_get_value_type_field (value) == ECMA_TYPE_DIRECT_STRING);\n\n      return value;\n    }\n  }\n}",
        "begin_line": 894,
        "end_line": 940,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_create_float_number#524",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_create_float_number (ecma_number_t ecma_number) /**< value of the float number */",
        "snippet": "static ecma_value_t\necma_create_float_number (ecma_number_t ecma_number) /**< value of the float number */\n{\n  ecma_number_t *ecma_num_p = ecma_alloc_number ();\n\n  *ecma_num_p = ecma_number;\n\n  return ecma_pointer_to_ecma_value (ecma_num_p) | ECMA_TYPE_FLOAT;\n}",
        "begin_line": 524,
        "end_line": 532,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_free_value#1123",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_free_value (ecma_value_t value) /**< value description */",
        "snippet": "void\necma_free_value (ecma_value_t value) /**< value description */\n{\n  switch (ecma_get_value_type_field (value))\n  {\n    case ECMA_TYPE_FLOAT:\n    {\n      ecma_number_t *number_p = (ecma_number_t *) ecma_get_pointer_from_ecma_value (value);\n      ecma_dealloc_number (number_p);\n      break;\n    }\n#if JERRY_ESNEXT\n    case ECMA_TYPE_SYMBOL:\n#endif /* JERRY_ESNEXT */\n    case ECMA_TYPE_STRING:\n    {\n      ecma_string_t *string_p = (ecma_string_t *) ecma_get_pointer_from_ecma_value (value);\n      ecma_deref_ecma_string_non_direct (string_p);\n      break;\n    }\n    case ECMA_TYPE_OBJECT:\n    {\n      ecma_deref_object (ecma_get_object_from_value (value));\n      break;\n    }\n#if JERRY_BUILTIN_BIGINT\n    case ECMA_TYPE_BIGINT:\n    {\n      if (value != ECMA_BIGINT_ZERO)\n      {\n        ecma_deref_bigint (ecma_get_extended_primitive_from_value (value));\n      }\n\n      break;\n    }\n#endif /* JERRY_BUILTIN_BIGINT */\n    default:\n    {\n      JERRY_ASSERT (ecma_get_value_type_field (value) == ECMA_TYPE_DIRECT\n                    || ecma_get_value_type_field (value) == ECMA_TYPE_DIRECT_STRING);\n\n      /* no memory is allocated */\n      break;\n    }\n  }\n}",
        "begin_line": 1123,
        "end_line": 1168,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_free_value_if_not_object#1191",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_free_value_if_not_object (ecma_value_t value) /**< value description */",
        "snippet": "void\necma_free_value_if_not_object (ecma_value_t value) /**< value description */\n{\n  if (ecma_get_value_type_field (value) != ECMA_TYPE_OBJECT)\n  {\n    ecma_free_value (value);\n  }\n}",
        "begin_line": 1191,
        "end_line": 1198,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_is_value_array#460",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_is_value_array (ecma_value_t arg) /**< argument */",
        "snippet": "ecma_value_t\necma_is_value_array (ecma_value_t arg) /**< argument */\n{\n  if (!ecma_is_value_object (arg))\n  {\n    return ECMA_VALUE_FALSE;\n  }\n\n  ecma_object_t *arg_obj_p = ecma_get_object_from_value (arg);\n\n  if (ecma_get_object_base_type (arg_obj_p) == ECMA_OBJECT_BASE_TYPE_ARRAY)\n  {\n    return ECMA_VALUE_TRUE;\n  }\n\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_IS_PROXY (arg_obj_p))\n  {\n    ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) arg_obj_p;\n\n    if (proxy_obj_p->handler == ECMA_VALUE_NULL)\n    {\n      return ecma_raise_type_error (ECMA_ERR_MSG (\"Proxy handler is null for 'isArray' operation\"));\n    }\n\n    return ecma_is_value_array (proxy_obj_p->target);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  return ECMA_VALUE_FALSE;\n}",
        "begin_line": 460,
        "end_line": 490,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_make_number_value#594",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_make_number_value (ecma_number_t ecma_number) /**< number to be encoded */",
        "snippet": "ecma_value_t\necma_make_number_value (ecma_number_t ecma_number) /**< number to be encoded */\n{\n  ecma_integer_value_t integer_value = (ecma_integer_value_t) ecma_number;\n\n  if ((ecma_number_t) integer_value == ecma_number\n      && ((integer_value == 0) ? ecma_is_number_equal_to_positive_zero (ecma_number)\n                               : ECMA_IS_INTEGER_NUMBER (integer_value)))\n  {\n    return ecma_make_integer_value (integer_value);\n  }\n\n  return ecma_create_float_number (ecma_number);\n}",
        "begin_line": 594,
        "end_line": 607,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers-value.ecma_value_assign_value#1005",
        "src_path": "jerry-core/ecma/base/ecma-helpers-value.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers-value",
        "signature": "jerry-core.ecma.base.ecma-helpers-value.ecma_value_assign_value (ecma_value_t *value_p, /**< [in, out] ecma value */                          ecma_value_t ecma_value) /**< value to assign */",
        "snippet": "void\necma_value_assign_value (ecma_value_t *value_p, /**< [in, out] ecma value */\n                         ecma_value_t ecma_value) /**< value to assign */\n{\n  JERRY_STATIC_ASSERT (ECMA_TYPE_DIRECT == 0,\n                       ecma_type_direct_must_be_zero_for_the_next_check);\n\n  if (*value_p == ecma_value)\n  {\n    return;\n  }\n\n  if (ecma_get_value_type_field (ecma_value || *value_p) == ECMA_TYPE_DIRECT)\n  {\n    *value_p = ecma_value;\n  }\n  else if (ecma_is_value_float_number (ecma_value)\n           && ecma_is_value_float_number (*value_p))\n  {\n    const ecma_number_t *num_src_p = (ecma_number_t *) ecma_get_pointer_from_ecma_value (ecma_value);\n    ecma_number_t *num_dst_p = (ecma_number_t *) ecma_get_pointer_from_ecma_value (*value_p);\n\n    *num_dst_p = *num_src_p;\n  }\n  else\n  {\n    ecma_free_value_if_not_object (*value_p);\n    *value_p = ecma_copy_value_if_not_object (ecma_value);\n  }\n}",
        "begin_line": 1005,
        "end_line": 1034,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_assert_object_contains_the_property#906",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_assert_object_contains_the_property (const ecma_object_t *object_p, /**< ecma-object */                                           const ecma_property_value_t *prop_value_p, /**< property value */                                           bool is_data) /**< property should be data property */",
        "snippet": "static void\necma_assert_object_contains_the_property (const ecma_object_t *object_p, /**< ecma-object */\n                                          const ecma_property_value_t *prop_value_p, /**< property value */\n                                          bool is_data) /**< property should be data property */\n{\n#ifndef JERRY_NDEBUG\n  jmem_cpointer_t prop_iter_cp = object_p->u1.property_list_cp;\n  JERRY_ASSERT (prop_iter_cp != JMEM_CP_NULL);\n\n  ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, prop_iter_cp);\n\n  if (prop_iter_p->types[0] == ECMA_PROPERTY_TYPE_HASHMAP)\n  {\n    prop_iter_cp = prop_iter_p->next_property_cp;\n  }\n\n  while (prop_iter_cp != JMEM_CP_NULL)\n  {\n    prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, prop_iter_cp);\n\n    JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));\n\n    ecma_property_pair_t *prop_pair_p = (ecma_property_pair_t *) prop_iter_p;\n\n    for (int i = 0; i < ECMA_PROPERTY_PAIR_ITEM_COUNT; i++)\n    {\n      if ((prop_pair_p->values + i) == prop_value_p)\n      {\n        JERRY_ASSERT (is_data == ((prop_pair_p->header.types[i] & ECMA_PROPERTY_FLAG_DATA) != 0));\n        return;\n      }\n    }\n\n    prop_iter_cp = prop_iter_p->next_property_cp;\n  }\n#else /* JERRY_NDEBUG */\n  JERRY_UNUSED (object_p);\n  JERRY_UNUSED (prop_value_p);\n  JERRY_UNUSED (is_data);\n#endif /* !JERRY_NDEBUG */\n}",
        "begin_line": 906,
        "end_line": 946,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_bytecode_ref#1496",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_bytecode_ref (ecma_compiled_code_t *bytecode_p) /**< byte code pointer */",
        "snippet": "void\necma_bytecode_ref (ecma_compiled_code_t *bytecode_p) /**< byte code pointer */\n{\n  /* Abort program if maximum reference number is reached. */\n  if (bytecode_p->refs >= UINT16_MAX)\n  {\n    jerry_fatal (ERR_REF_COUNT_LIMIT);\n  }\n\n  bytecode_p->refs++;\n}",
        "begin_line": 1496,
        "end_line": 1506,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_compiled_code_resolve_arguments_start#1716",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_compiled_code_resolve_arguments_start (const ecma_compiled_code_t *bytecode_header_p) /**< compiled code */",
        "snippet": "ecma_value_t *\necma_compiled_code_resolve_arguments_start (const ecma_compiled_code_t *bytecode_header_p) /**< compiled code */\n{\n  JERRY_ASSERT (bytecode_header_p != NULL);\n\n  uint8_t *byte_p = (uint8_t *) bytecode_header_p;\n  byte_p += ((size_t) bytecode_header_p->size) << JMEM_ALIGNMENT_LOG;\n\n  if (!(bytecode_header_p->status_flags & CBC_CODE_FLAGS_MAPPED_ARGUMENTS_NEEDED))\n  {\n    return ((ecma_value_t *) byte_p);\n  }\n\n  if (JERRY_LIKELY (!(bytecode_header_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)))\n  {\n    return ((ecma_value_t *) byte_p) - ((cbc_uint8_arguments_t *) bytecode_header_p)->argument_end;\n  }\n\n  return ((ecma_value_t *) byte_p) - ((cbc_uint16_arguments_t *) bytecode_header_p)->argument_end;\n}",
        "begin_line": 1716,
        "end_line": 1735,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_create_named_accessor_property#563",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_create_named_accessor_property (ecma_object_t *object_p, /**< object */                                      ecma_string_t *name_p, /**< property name */                                      ecma_object_t *get_p, /**< getter */                                      ecma_object_t *set_p, /**< setter */                                      uint8_t prop_attributes, /**< property attributes */                                      ecma_property_t **out_prop_p) /**< [out] the property is also returned                                                                     *         if this field is non-NULL */",
        "snippet": "ecma_property_value_t *\necma_create_named_accessor_property (ecma_object_t *object_p, /**< object */\n                                     ecma_string_t *name_p, /**< property name */\n                                     ecma_object_t *get_p, /**< getter */\n                                     ecma_object_t *set_p, /**< setter */\n                                     uint8_t prop_attributes, /**< property attributes */\n                                     ecma_property_t **out_prop_p) /**< [out] the property is also returned\n                                                                    *         if this field is non-NULL */\n{\n  JERRY_ASSERT (object_p != NULL && name_p != NULL);\n  JERRY_ASSERT (ecma_is_lexical_environment (object_p)\n                || !ecma_op_object_is_fast_array (object_p));\n  JERRY_ASSERT (ecma_find_named_property (object_p, name_p) == NULL);\n  JERRY_ASSERT ((prop_attributes & ~ECMA_PROPERTY_BUILT_IN_CONFIGURABLE_ENUMERABLE) == 0);\n\n  uint8_t type_and_flags = prop_attributes;\n\n  ecma_property_value_t value;\n#if JERRY_CPOINTER_32_BIT\n  ecma_getter_setter_pointers_t *getter_setter_pair_p;\n  getter_setter_pair_p = jmem_pools_alloc (sizeof (ecma_getter_setter_pointers_t));\n  ECMA_SET_POINTER (getter_setter_pair_p->getter_cp, get_p);\n  ECMA_SET_POINTER (getter_setter_pair_p->setter_cp, set_p);\n  ECMA_SET_NON_NULL_POINTER (value.getter_setter_pair_cp, getter_setter_pair_p);\n#else /* !JERRY_CPOINTER_32_BIT */\n  ECMA_SET_POINTER (value.getter_setter_pair.getter_cp, get_p);\n  ECMA_SET_POINTER (value.getter_setter_pair.setter_cp, set_p);\n#endif /* JERRY_CPOINTER_32_BIT */\n\n  return ecma_create_property (object_p, name_p, type_and_flags, value, out_prop_p);\n}",
        "begin_line": 563,
        "end_line": 593,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_create_named_data_property#537",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_create_named_data_property (ecma_object_t *object_p, /**< object */                                  ecma_string_t *name_p, /**< property name */                                  uint8_t prop_attributes, /**< property attributes (See: ecma_property_flags_t) */                                  ecma_property_t **out_prop_p) /**< [out] the property is also returned                                                                 *         if this field is non-NULL */",
        "snippet": "ecma_property_value_t *\necma_create_named_data_property (ecma_object_t *object_p, /**< object */\n                                 ecma_string_t *name_p, /**< property name */\n                                 uint8_t prop_attributes, /**< property attributes (See: ecma_property_flags_t) */\n                                 ecma_property_t **out_prop_p) /**< [out] the property is also returned\n                                                                *         if this field is non-NULL */\n{\n  JERRY_ASSERT (object_p != NULL && name_p != NULL);\n  JERRY_ASSERT (ecma_is_lexical_environment (object_p)\n                || !ecma_op_object_is_fast_array (object_p));\n  JERRY_ASSERT (ecma_find_named_property (object_p, name_p) == NULL);\n  JERRY_ASSERT ((prop_attributes & ~ECMA_PROPERTY_BUILT_IN_CONFIGURABLE_ENUMERABLE_WRITABLE) == 0);\n\n  uint8_t type_and_flags = ECMA_PROPERTY_FLAG_DATA | prop_attributes;\n\n  ecma_property_value_t value;\n  value.value = ECMA_VALUE_UNDEFINED;\n\n  return ecma_create_property (object_p, name_p, type_and_flags, value, out_prop_p);\n}",
        "begin_line": 537,
        "end_line": 556,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_create_object#83",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_create_object (ecma_object_t *prototype_object_p, /**< pointer to prototybe of the object (or NULL) */                     size_t ext_object_size, /**< size of extended objects */                     ecma_object_type_t type) /**< object type */",
        "snippet": "ecma_object_t *\necma_create_object (ecma_object_t *prototype_object_p, /**< pointer to prototybe of the object (or NULL) */\n                    size_t ext_object_size, /**< size of extended objects */\n                    ecma_object_type_t type) /**< object type */\n{\n  ecma_object_t *new_object_p;\n\n  if (ext_object_size > 0)\n  {\n    new_object_p = (ecma_object_t *) ecma_alloc_extended_object (ext_object_size);\n  }\n  else\n  {\n    new_object_p = ecma_alloc_object ();\n  }\n\n  new_object_p->type_flags_refs = (ecma_object_descriptor_t) (type | ECMA_OBJECT_FLAG_EXTENSIBLE);\n\n  ecma_init_gc_info (new_object_p);\n\n  new_object_p->u1.property_list_cp = JMEM_CP_NULL;\n\n  ECMA_SET_POINTER (new_object_p->u2.prototype_cp, prototype_object_p);\n\n  return new_object_p;\n}",
        "begin_line": 83,
        "end_line": 108,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_create_object_lex_env#146",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_create_object_lex_env (ecma_object_t *outer_lexical_environment_p, /**< outer lexical environment */                             ecma_object_t *binding_obj_p) /**< binding object */",
        "snippet": "ecma_object_t *\necma_create_object_lex_env (ecma_object_t *outer_lexical_environment_p, /**< outer lexical environment */\n                            ecma_object_t *binding_obj_p) /**< binding object */\n{\n  JERRY_ASSERT (binding_obj_p != NULL\n                && !ecma_is_lexical_environment (binding_obj_p));\n\n  ecma_object_t *new_lexical_environment_p = ecma_alloc_object ();\n\n  new_lexical_environment_p->type_flags_refs = ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND;\n\n  ecma_init_gc_info (new_lexical_environment_p);\n\n  ECMA_SET_NON_NULL_POINTER (new_lexical_environment_p->u1.bound_object_cp,\n                             binding_obj_p);\n\n  ECMA_SET_POINTER (new_lexical_environment_p->u2.outer_reference_cp, outer_lexical_environment_p);\n\n  return new_lexical_environment_p;\n}",
        "begin_line": 146,
        "end_line": 165,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_create_property#397",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_create_property (ecma_object_t *object_p, /**< the object */                       ecma_string_t *name_p, /**< property name */                       uint8_t type_and_flags, /**< type and flags, see ecma_property_info_t */                       ecma_property_value_t value, /**< property value */                       ecma_property_t **out_prop_p) /**< [out] the property is also returned                                                      *         if this field is non-NULL */",
        "snippet": "static ecma_property_value_t *\necma_create_property (ecma_object_t *object_p, /**< the object */\n                      ecma_string_t *name_p, /**< property name */\n                      uint8_t type_and_flags, /**< type and flags, see ecma_property_info_t */\n                      ecma_property_value_t value, /**< property value */\n                      ecma_property_t **out_prop_p) /**< [out] the property is also returned\n                                                     *         if this field is non-NULL */\n{\n  JERRY_ASSERT (ECMA_PROPERTY_PAIR_ITEM_COUNT == 2);\n  JERRY_ASSERT (name_p != NULL);\n  JERRY_ASSERT (object_p != NULL);\n\n  jmem_cpointer_t *property_list_head_p = &object_p->u1.property_list_cp;\n\n  if (*property_list_head_p != ECMA_NULL_POINTER)\n  {\n    /* If the first entry is free (deleted), it is reused. */\n    ecma_property_header_t *first_property_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t,\n                                                                          *property_list_head_p);\n\n#if JERRY_PROPERTY_HASHMAP\n    bool has_hashmap = false;\n\n    if (first_property_p->types[0] == ECMA_PROPERTY_TYPE_HASHMAP)\n    {\n      property_list_head_p = &first_property_p->next_property_cp;\n      first_property_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t,\n                                                    *property_list_head_p);\n      has_hashmap = true;\n    }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n    JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (first_property_p));\n\n    if (first_property_p->types[0] == ECMA_PROPERTY_TYPE_DELETED)\n    {\n      ecma_property_pair_t *first_property_pair_p = (ecma_property_pair_t *) first_property_p;\n\n      ecma_property_t name_type;\n      first_property_pair_p->names_cp[0] = ecma_string_to_property_name (name_p,\n                                                                         &name_type);\n      first_property_p->types[0] = (ecma_property_t) (type_and_flags | name_type);\n\n      ecma_property_t *property_p = first_property_p->types + 0;\n\n      JERRY_ASSERT (ECMA_PROPERTY_VALUE_PTR (property_p) == first_property_pair_p->values + 0);\n\n      if (out_prop_p != NULL)\n      {\n        *out_prop_p = property_p;\n      }\n\n      first_property_pair_p->values[0] = value;\n\n#if JERRY_PROPERTY_HASHMAP\n      /* The property must be fully initialized before ecma_property_hashmap_insert\n       * is called, because the insert operation may reallocate the hashmap, and\n       * that triggers garbage collection which scans all properties of all objects.\n       * A not fully initialized but queued property may cause a crash. */\n\n      if (has_hashmap)\n      {\n        ecma_property_hashmap_insert (object_p,\n                                      name_p,\n                                      first_property_pair_p,\n                                      0);\n      }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n      return first_property_pair_p->values + 0;\n    }\n  }\n\n  /* Otherwise we create a new property pair and use its second value. */\n  ecma_property_pair_t *first_property_pair_p = ecma_alloc_property_pair ();\n\n  /* Need to query property_list_head_p again and recheck the existennce\n   * of property hasmap, because ecma_alloc_property_pair may delete them. */\n  property_list_head_p = &object_p->u1.property_list_cp;\n#if JERRY_PROPERTY_HASHMAP\n  bool has_hashmap = false;\n\n  if (*property_list_head_p != ECMA_NULL_POINTER)\n  {\n    ecma_property_header_t *first_property_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t,\n                                                                          *property_list_head_p);\n\n    if (first_property_p->types[0] == ECMA_PROPERTY_TYPE_HASHMAP)\n    {\n      property_list_head_p = &first_property_p->next_property_cp;\n      has_hashmap = true;\n    }\n  }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n  /* Just copy the previous value (no need to decompress, compress). */\n  first_property_pair_p->header.next_property_cp = *property_list_head_p;\n  first_property_pair_p->header.types[0] = ECMA_PROPERTY_TYPE_DELETED;\n  first_property_pair_p->names_cp[0] = LIT_INTERNAL_MAGIC_STRING_DELETED;\n\n  ecma_property_t name_type;\n  first_property_pair_p->names_cp[1] = ecma_string_to_property_name (name_p,\n                                                                     &name_type);\n\n  first_property_pair_p->header.types[1] = (ecma_property_t) (type_and_flags | name_type);\n\n  ECMA_SET_NON_NULL_POINTER (*property_list_head_p, &first_property_pair_p->header);\n\n  ecma_property_t *property_p = first_property_pair_p->header.types + 1;\n\n  JERRY_ASSERT (ECMA_PROPERTY_VALUE_PTR (property_p) == first_property_pair_p->values + 1);\n\n  if (out_prop_p != NULL)\n  {\n    *out_prop_p = property_p;\n  }\n\n  first_property_pair_p->values[1] = value;\n\n#if JERRY_PROPERTY_HASHMAP\n  /* See the comment before the other ecma_property_hashmap_insert above. */\n\n  if (has_hashmap)\n  {\n    ecma_property_hashmap_insert (object_p,\n                                  name_p,\n                                  first_property_pair_p,\n                                  1);\n  }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n  return first_property_pair_p->values + 1;\n}",
        "begin_line": 397,
        "end_line": 529,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_find_named_property#627",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_find_named_property (ecma_object_t *obj_p, /**< object to find property in */                           ecma_string_t *name_p) /**< property's name */",
        "snippet": "ecma_property_t *\necma_find_named_property (ecma_object_t *obj_p, /**< object to find property in */\n                          ecma_string_t *name_p) /**< property's name */\n{\n  JERRY_ASSERT (obj_p != NULL);\n  JERRY_ASSERT (name_p != NULL);\n  JERRY_ASSERT (ecma_is_lexical_environment (obj_p)\n                || !ecma_op_object_is_fast_array (obj_p));\n\n#if JERRY_LCACHE\n  ecma_property_t *property_p = ecma_lcache_lookup (obj_p, name_p);\n  if (property_p != NULL)\n  {\n    return property_p;\n  }\n#else /* !JERRY_LCACHE */\n  ecma_property_t *property_p = NULL;\n#endif /* JERRY_LCACHE */\n\n  jmem_cpointer_t prop_iter_cp = obj_p->u1.property_list_cp;\n\n#if JERRY_PROPERTY_HASHMAP\n  if (prop_iter_cp != JMEM_CP_NULL)\n  {\n    ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t,\n                                                                     prop_iter_cp);\n    if (prop_iter_p->types[0] == ECMA_PROPERTY_TYPE_HASHMAP)\n    {\n      jmem_cpointer_t property_real_name_cp;\n      property_p = ecma_property_hashmap_find ((ecma_property_hashmap_t *) prop_iter_p,\n                                               name_p,\n                                               &property_real_name_cp);\n#if JERRY_LCACHE\n      if (property_p != NULL\n          && !ecma_is_property_lcached (property_p))\n      {\n        ecma_lcache_insert (obj_p, property_real_name_cp, property_p);\n      }\n#endif /* JERRY_LCACHE */\n      return property_p;\n    }\n  }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n#if JERRY_PROPERTY_HASHMAP\n  uint32_t steps = 0;\n#endif /* JERRY_PROPERTY_HASHMAP */\n  jmem_cpointer_t property_name_cp = ECMA_NULL_POINTER;\n\n  if (ECMA_IS_DIRECT_STRING (name_p))\n  {\n    ecma_property_t prop_name_type = (ecma_property_t) ECMA_GET_DIRECT_STRING_TYPE (name_p);\n    property_name_cp = (jmem_cpointer_t) ECMA_GET_DIRECT_STRING_VALUE (name_p);\n\n    JERRY_ASSERT (prop_name_type > 0);\n\n    while (prop_iter_cp != JMEM_CP_NULL)\n    {\n      ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t,\n                                                                       prop_iter_cp);\n\n      JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));\n\n      ecma_property_pair_t *prop_pair_p = (ecma_property_pair_t *) prop_iter_p;\n\n      if (prop_pair_p->names_cp[0] == property_name_cp\n          && ECMA_PROPERTY_GET_NAME_TYPE (prop_iter_p->types[0]) == prop_name_type)\n      {\n        JERRY_ASSERT (ECMA_PROPERTY_IS_NAMED_PROPERTY (prop_iter_p->types[0]));\n\n        property_p = prop_iter_p->types + 0;\n        break;\n      }\n\n      if (prop_pair_p->names_cp[1] == property_name_cp\n          && ECMA_PROPERTY_GET_NAME_TYPE (prop_iter_p->types[1]) == prop_name_type)\n      {\n        JERRY_ASSERT (ECMA_PROPERTY_IS_NAMED_PROPERTY (prop_iter_p->types[1]));\n\n        property_p = prop_iter_p->types + 1;\n        break;\n      }\n\n#if JERRY_PROPERTY_HASHMAP\n      steps++;\n#endif /* JERRY_PROPERTY_HASHMAP */\n      prop_iter_cp = prop_iter_p->next_property_cp;\n    }\n  }\n  else\n  {\n    while (prop_iter_cp != JMEM_CP_NULL)\n    {\n      ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t,\n                                                                       prop_iter_cp);\n\n      JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));\n\n      ecma_property_pair_t *prop_pair_p = (ecma_property_pair_t *) prop_iter_p;\n\n      if (ECMA_PROPERTY_GET_NAME_TYPE (prop_iter_p->types[0]) == ECMA_DIRECT_STRING_PTR)\n      {\n        property_name_cp = prop_pair_p->names_cp[0];\n        ecma_string_t *prop_name_p = ECMA_GET_NON_NULL_POINTER (ecma_string_t, property_name_cp);\n\n        if (ecma_compare_ecma_non_direct_strings (name_p, prop_name_p))\n        {\n          property_p = prop_iter_p->types + 0;\n          break;\n        }\n      }\n\n      if (ECMA_PROPERTY_GET_NAME_TYPE (prop_iter_p->types[1]) == ECMA_DIRECT_STRING_PTR)\n      {\n        property_name_cp = prop_pair_p->names_cp[1];\n        ecma_string_t *prop_name_p = ECMA_GET_NON_NULL_POINTER (ecma_string_t, property_name_cp);\n\n        if (ecma_compare_ecma_non_direct_strings (name_p, prop_name_p))\n        {\n          property_p = prop_iter_p->types + 1;\n          break;\n        }\n      }\n\n#if JERRY_PROPERTY_HASHMAP\n      steps++;\n#endif /* JERRY_PROPERTY_HASHMAP */\n      prop_iter_cp = prop_iter_p->next_property_cp;\n    }\n  }\n\n#if JERRY_PROPERTY_HASHMAP\n  if (steps >= (ECMA_PROPERTY_HASMAP_MINIMUM_SIZE / 2))\n  {\n    ecma_property_hashmap_create (obj_p);\n  }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n#if JERRY_LCACHE\n  if (property_p != NULL\n      && !ecma_is_property_lcached (property_p))\n  {\n    ecma_lcache_insert (obj_p, property_name_cp, property_p);\n  }\n#endif /* JERRY_LCACHE */\n\n  return property_p;\n}",
        "begin_line": 627,
        "end_line": 774,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_free_property_descriptor#1243",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_free_property_descriptor (ecma_property_descriptor_t *prop_desc_p) /**< property descriptor */",
        "snippet": "void\necma_free_property_descriptor (ecma_property_descriptor_t *prop_desc_p) /**< property descriptor */\n{\n  if (prop_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)\n  {\n    ecma_free_value (prop_desc_p->value);\n  }\n\n  if ((prop_desc_p->flags & JERRY_PROP_IS_GET_DEFINED)\n      && prop_desc_p->get_p != NULL)\n  {\n    ecma_deref_object (prop_desc_p->get_p);\n  }\n\n  if ((prop_desc_p->flags & JERRY_PROP_IS_SET_DEFINED)\n      && prop_desc_p->set_p != NULL)\n  {\n    ecma_deref_object (prop_desc_p->set_p);\n  }\n\n  *prop_desc_p = ecma_make_empty_property_descriptor ();\n}",
        "begin_line": 1243,
        "end_line": 1264,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_get_named_accessor_property#969",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_get_named_accessor_property (const ecma_property_value_t *prop_value_p) /**< property value reference */",
        "snippet": "ecma_getter_setter_pointers_t *\necma_get_named_accessor_property (const ecma_property_value_t *prop_value_p) /**< property value reference */\n{\n#if JERRY_CPOINTER_32_BIT\n  return ECMA_GET_NON_NULL_POINTER (ecma_getter_setter_pointers_t, prop_value_p->getter_setter_pair_cp);\n#else /* !JERRY_CPOINTER_32_BIT */\n  return (ecma_getter_setter_pointers_t *) &prop_value_p->getter_setter_pair;\n#endif /* JERRY_CPOINTER_32_BIT */\n}",
        "begin_line": 969,
        "end_line": 977,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_make_empty_property_descriptor#1226",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_make_empty_property_descriptor (void)",
        "snippet": "ecma_property_descriptor_t\necma_make_empty_property_descriptor (void)\n{\n  ecma_property_descriptor_t prop_desc;\n\n  prop_desc.flags = 0;\n  prop_desc.value = ECMA_VALUE_UNDEFINED;\n  prop_desc.get_p = NULL;\n  prop_desc.set_p = NULL;\n\n  return prop_desc;\n}",
        "begin_line": 1226,
        "end_line": 1237,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-helpers.ecma_op_ordinary_object_set_extensible#222",
        "src_path": "jerry-core/ecma/base/ecma-helpers.c",
        "class_name": "jerry-core.ecma.base.ecma-helpers",
        "signature": "jerry-core.ecma.base.ecma-helpers.ecma_op_ordinary_object_set_extensible (ecma_object_t *object_p) /**< object */",
        "snippet": "extern inline void\necma_op_ordinary_object_set_extensible (ecma_object_t *object_p) /**< object */\n{\n  JERRY_ASSERT (object_p != NULL);\n  JERRY_ASSERT (!ecma_is_lexical_environment (object_p));\n\n  object_p->type_flags_refs |= ECMA_OBJECT_FLAG_EXTENSIBLE;\n}",
        "begin_line": 222,
        "end_line": 229,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-init-finalize.ecma_init#40",
        "src_path": "jerry-core/ecma/base/ecma-init-finalize.c",
        "class_name": "jerry-core.ecma.base.ecma-init-finalize",
        "signature": "jerry-core.ecma.base.ecma-init-finalize.ecma_init (void)",
        "snippet": "void\necma_init (void)\n{\n#if (JERRY_GC_MARK_LIMIT != 0)\n  JERRY_CONTEXT (ecma_gc_mark_recursion_limit) = JERRY_GC_MARK_LIMIT;\n#endif /* (JERRY_GC_MARK_LIMIT != 0) */\n\n  ecma_init_global_environment ();\n\n#if JERRY_PROPERTY_HASHMAP\n  JERRY_CONTEXT (ecma_prop_hashmap_alloc_state) = ECMA_PROP_HASHMAP_ALLOC_ON;\n  JERRY_CONTEXT (status_flags) &= (uint32_t) ~ECMA_STATUS_HIGH_PRESSURE_GC;\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n#if (JERRY_STACK_LIMIT != 0)\n  volatile int sp;\n  JERRY_CONTEXT (stack_base) = (uintptr_t) &sp;\n#endif /* (JERRY_STACK_LIMIT != 0) */\n\n#if JERRY_ESNEXT\n  ecma_job_queue_init ();\n#endif /* JERRY_ESNEXT */\n\n#if JERRY_ESNEXT\n  JERRY_CONTEXT (current_new_target_p) = NULL;\n#endif /* JERRY_ESNEXT */\n\n#if JERRY_BUILTIN_TYPEDARRAY\n  JERRY_CONTEXT (arraybuffer_compact_allocation_limit) = 256;\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n}",
        "begin_line": 40,
        "end_line": 70,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.base.ecma-literal-storage.ecma_find_or_create_literal_string#166",
        "src_path": "jerry-core/ecma/base/ecma-literal-storage.c",
        "class_name": "jerry-core.ecma.base.ecma-literal-storage",
        "signature": "jerry-core.ecma.base.ecma-literal-storage.ecma_find_or_create_literal_string (const lit_utf8_byte_t *chars_p, /**< string to be searched */                                     lit_utf8_size_t size, /**< size of the string */                                     bool is_ascii) /**< encode of the string */",
        "snippet": "ecma_value_t\necma_find_or_create_literal_string (const lit_utf8_byte_t *chars_p, /**< string to be searched */\n                                    lit_utf8_size_t size, /**< size of the string */\n                                    bool is_ascii) /**< encode of the string */\n{\n  ecma_string_t *string_p = (is_ascii ? ecma_new_ecma_string_from_ascii (chars_p, size)\n                                      : ecma_new_ecma_string_from_utf8 (chars_p, size));\n\n  if (ECMA_IS_DIRECT_STRING (string_p))\n  {\n    return ecma_make_string_value (string_p);\n  }\n\n  jmem_cpointer_t string_list_cp = JERRY_CONTEXT (string_list_first_cp);\n  jmem_cpointer_t *empty_cpointer_p = NULL;\n\n  while (string_list_cp != JMEM_CP_NULL)\n  {\n    ecma_lit_storage_item_t *string_list_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_lit_storage_item_t, string_list_cp);\n\n    for (int i = 0; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)\n    {\n      if (string_list_p->values[i] == JMEM_CP_NULL)\n      {\n        if (empty_cpointer_p == NULL)\n        {\n          empty_cpointer_p = string_list_p->values + i;\n        }\n      }\n      else\n      {\n        ecma_string_t *value_p = JMEM_CP_GET_NON_NULL_POINTER (ecma_string_t,\n                                                               string_list_p->values[i]);\n\n        if (ecma_compare_ecma_strings (string_p, value_p))\n        {\n          /* Return with string if found in the list. */\n          ecma_deref_ecma_string (string_p);\n          return ecma_make_string_value (value_p);\n        }\n      }\n    }\n\n    string_list_cp = string_list_p->next_cp;\n  }\n\n  ECMA_SET_STRING_AS_STATIC (string_p);\n  jmem_cpointer_t result;\n  JMEM_CP_SET_NON_NULL_POINTER (result, string_p);\n\n  if (empty_cpointer_p != NULL)\n  {\n    *empty_cpointer_p = result;\n    return ecma_make_string_value (string_p);\n  }\n\n  ecma_lit_storage_item_t *new_item_p;\n  new_item_p = (ecma_lit_storage_item_t *) jmem_pools_alloc (sizeof (ecma_lit_storage_item_t));\n\n  new_item_p->values[0] = result;\n  for (int i = 1; i < ECMA_LIT_STORAGE_VALUE_COUNT; i++)\n  {\n    new_item_p->values[i] = JMEM_CP_NULL;\n  }\n\n  new_item_p->next_cp = JERRY_CONTEXT (string_list_first_cp);\n  JMEM_CP_SET_NON_NULL_POINTER (JERRY_CONTEXT (string_list_first_cp), new_item_p);\n\n  return ecma_make_string_value (string_p);\n}",
        "begin_line": 166,
        "end_line": 235,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers-sort.ecma_builtin_helper_array_merge_sort_bottom_up#29",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtin-helpers-sort.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers-sort",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers-sort.ecma_builtin_helper_array_merge_sort_bottom_up (ecma_value_t *source_array_p, /**< arrays to merge */                                                 uint32_t left_idx, /**< first array begin */                                                 uint32_t right_idx, /**< first array end */                                                 uint32_t end_idx, /**< second array end */                                                 ecma_value_t *output_array_p, /**< output array */                                                 ecma_value_t compare_func, /**< compare function */                                                 const ecma_builtin_helper_sort_compare_fn_t sort_cb, /**< sorting cb */                                                 ecma_object_t *array_buffer_p) /* array_buffer_p */",
        "snippet": "static ecma_value_t\necma_builtin_helper_array_merge_sort_bottom_up (ecma_value_t *source_array_p, /**< arrays to merge */\n                                                uint32_t left_idx, /**< first array begin */\n                                                uint32_t right_idx, /**< first array end */\n                                                uint32_t end_idx, /**< second array end */\n                                                ecma_value_t *output_array_p, /**< output array */\n                                                ecma_value_t compare_func, /**< compare function */\n                                                const ecma_builtin_helper_sort_compare_fn_t sort_cb, /**< sorting cb */\n                                                ecma_object_t *array_buffer_p) /* array_buffer_p */\n{\n  ecma_value_t ret_value = ECMA_VALUE_EMPTY;\n  uint32_t i = left_idx, j = right_idx;\n\n  for (uint32_t k = left_idx; k < end_idx; k++)\n  {\n    ecma_value_t compare_value = ecma_make_number_value (ECMA_NUMBER_ZERO);\n\n    if (i < right_idx && j < end_idx)\n    {\n      compare_value = sort_cb (source_array_p[i], source_array_p[j], compare_func, array_buffer_p);\n      if (ECMA_IS_VALUE_ERROR (compare_value))\n      {\n        ret_value = ECMA_VALUE_ERROR;\n        break;\n      }\n    }\n\n    if (i < right_idx && ecma_get_number_from_value (compare_value) <= ECMA_NUMBER_ZERO)\n    {\n      output_array_p[k] = source_array_p[i];\n      i++;\n    }\n    else\n    {\n      output_array_p[k] = source_array_p[j];\n      j++;\n    }\n    ecma_free_value (compare_value);\n  }\n\n  return ret_value;\n}",
        "begin_line": 29,
        "end_line": 70,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers-sort.ecma_builtin_helper_array_merge_sort_helper#78",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtin-helpers-sort.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers-sort",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers-sort.ecma_builtin_helper_array_merge_sort_helper (ecma_value_t *array_p, /**< array to sort */                                              uint32_t length, /**< length */                                              ecma_value_t compare_func, /**< compare function */                                              const ecma_builtin_helper_sort_compare_fn_t sort_cb, /**< sorting cb */                                              ecma_object_t *array_buffer_p) /**< arrayBuffer */",
        "snippet": "ecma_value_t\necma_builtin_helper_array_merge_sort_helper (ecma_value_t *array_p, /**< array to sort */\n                                             uint32_t length, /**< length */\n                                             ecma_value_t compare_func, /**< compare function */\n                                             const ecma_builtin_helper_sort_compare_fn_t sort_cb, /**< sorting cb */\n                                             ecma_object_t *array_buffer_p) /**< arrayBuffer */\n{\n  ecma_value_t ret_value = ECMA_VALUE_EMPTY;\n  JMEM_DEFINE_LOCAL_ARRAY (dest_array_p, length, ecma_value_t);\n\n  ecma_value_t *temp_p;\n  ecma_value_t *base_array_p = array_p;\n  uint32_t r, e;\n\n  for (uint32_t w = 1; w < length; w = 2 * w)\n  {\n    for (uint32_t i = 0; i < length; i = i + 2 * w)\n    {\n      // End of first array\n      r = i + w;\n      if (r > length)\n      {\n        r = length;\n      }\n\n      // End of second array\n      e = i + 2 * w;\n      if (e > length)\n      {\n        e = length;\n      }\n\n      // Merge two arrays\n      ret_value = ecma_builtin_helper_array_merge_sort_bottom_up (array_p,\n                                                                  i,\n                                                                  r,\n                                                                  e,\n                                                                  dest_array_p,\n                                                                  compare_func,\n                                                                  sort_cb,\n                                                                  array_buffer_p);\n      if (ECMA_IS_VALUE_ERROR (ret_value))\n      {\n        break;\n      }\n    }\n\n    if (ECMA_IS_VALUE_ERROR (ret_value))\n    {\n      break;\n    }\n\n    // Swap arrays\n    temp_p = dest_array_p;\n    dest_array_p = array_p;\n    array_p = temp_p;\n  }\n\n  // Sorted array is in dest_array_p - there was uneven number of arrays swaps\n  if (dest_array_p == base_array_p)\n  {\n    uint32_t index = 0;\n    temp_p = dest_array_p;\n    dest_array_p = array_p;\n    array_p = temp_p;\n\n    while (index < length)\n    {\n      array_p[index] = dest_array_p[index];\n      index++;\n    }\n    JERRY_ASSERT (index == length);\n  }\n\n  JMEM_FINALIZE_LOCAL_ARRAY (dest_array_p);\n\n  return ret_value;\n}",
        "begin_line": 78,
        "end_line": 155,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers.ecma_builtin_helper_def_prop#884",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtin-helpers.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers.ecma_builtin_helper_def_prop (ecma_object_t *obj_p, /**< object */                               ecma_string_t *name_p, /**< name string */                               ecma_value_t value, /**< value */                               uint32_t opts) /**< any combination of ecma_property_descriptor_status_flags_t bits */",
        "snippet": "ecma_value_t\necma_builtin_helper_def_prop (ecma_object_t *obj_p, /**< object */\n                              ecma_string_t *name_p, /**< name string */\n                              ecma_value_t value, /**< value */\n                              uint32_t opts) /**< any combination of ecma_property_descriptor_status_flags_t bits */\n{\n  ecma_property_descriptor_t prop_desc;\n\n  prop_desc.flags = (uint16_t) (ECMA_NAME_DATA_PROPERTY_DESCRIPTOR_BITS | opts);\n\n  prop_desc.value = value;\n\n  return ecma_op_object_define_own_property (obj_p,\n                                             name_p,\n                                             &prop_desc);\n}",
        "begin_line": 884,
        "end_line": 899,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers.ecma_builtin_helper_object_to_string#115",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtin-helpers.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtin-helpers.ecma_builtin_helper_object_to_string (const ecma_value_t this_arg) /**< this argument */",
        "snippet": "ecma_value_t\necma_builtin_helper_object_to_string (const ecma_value_t this_arg) /**< this argument */\n{\n  lit_magic_string_id_t builtin_tag;\n\n  if (ecma_is_value_undefined (this_arg))\n  {\n    builtin_tag = LIT_MAGIC_STRING_UNDEFINED_UL;\n  }\n  else if (ecma_is_value_null (this_arg))\n  {\n    builtin_tag = LIT_MAGIC_STRING_NULL_UL;\n  }\n  else\n  {\n    ecma_value_t obj_this = ecma_op_to_object (this_arg);\n\n    if (ECMA_IS_VALUE_ERROR (obj_this))\n    {\n      return obj_this;\n    }\n\n    JERRY_ASSERT (ecma_is_value_object (obj_this));\n\n    ecma_object_t *obj_p = ecma_get_object_from_value (obj_this);\n\n    builtin_tag = ecma_object_get_class_name (obj_p);\n\n#if JERRY_ESNEXT\n    ecma_value_t is_array = ecma_is_value_array (obj_this);\n\n    if (ECMA_IS_VALUE_ERROR (is_array))\n    {\n      ecma_deref_object (obj_p);\n      return is_array;\n    }\n\n    if (ecma_is_value_true (is_array))\n    {\n      builtin_tag = LIT_MAGIC_STRING_ARRAY_UL;\n    }\n\n    ecma_value_t tag = ecma_op_object_get_by_symbol_id (obj_p, LIT_GLOBAL_SYMBOL_TO_STRING_TAG);\n\n    if (ECMA_IS_VALUE_ERROR (tag))\n    {\n      ecma_deref_object (obj_p);\n      return tag;\n    }\n\n    if (ecma_is_value_string (tag))\n    {\n      ecma_deref_object (obj_p);\n      return ecma_builtin_helper_object_to_string_tag_helper (tag);\n    }\n    else if (builtin_tag != LIT_MAGIC_STRING_ARGUMENTS_UL\n             && builtin_tag != LIT_MAGIC_STRING_FUNCTION_UL\n             && builtin_tag != LIT_MAGIC_STRING_ERROR_UL\n             && builtin_tag != LIT_MAGIC_STRING_BOOLEAN_UL\n             && builtin_tag != LIT_MAGIC_STRING_NUMBER_UL\n             && builtin_tag != LIT_MAGIC_STRING_STRING_UL\n             && builtin_tag != LIT_MAGIC_STRING_DATE_UL\n             && builtin_tag != LIT_MAGIC_STRING_REGEXP_UL\n             && builtin_tag != LIT_MAGIC_STRING_ARRAY_UL)\n    {\n      builtin_tag = LIT_MAGIC_STRING_OBJECT_UL;\n    }\n\n    ecma_free_value (tag);\n#endif /* JERRY_ESNEXT */\n\n    ecma_deref_object (obj_p);\n  }\n\n  ecma_stringbuilder_t builder = ecma_stringbuilder_create ();\n\n  ecma_stringbuilder_append_magic (&builder, LIT_MAGIC_STRING_OBJECT_TO_STRING_UL);\n  ecma_stringbuilder_append_magic (&builder, builtin_tag);\n  ecma_stringbuilder_append_byte (&builder, LIT_CHAR_RIGHT_SQUARE);\n\n  return ecma_make_string_value (ecma_stringbuilder_finalize (&builder));\n}",
        "begin_line": 115,
        "end_line": 196,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtin-object-prototype.ecma_builtin_object_prototype_dispatch_routine#398",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtin-object-prototype.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtin-object-prototype",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtin-object-prototype.ecma_builtin_object_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine                                                                              *   identifier */                                                 ecma_value_t this_arg, /**< 'this' argument value */                                                 const ecma_value_t arguments_list_p[], /**< list of arguments                                                                                         *   passed to routine */                                                 uint32_t arguments_number) /**< length of arguments' list */",
        "snippet": "ecma_value_t\necma_builtin_object_prototype_dispatch_routine (uint8_t builtin_routine_id, /**< built-in wide routine\n                                                                             *   identifier */\n                                                ecma_value_t this_arg, /**< 'this' argument value */\n                                                const ecma_value_t arguments_list_p[], /**< list of arguments\n                                                                                        *   passed to routine */\n                                                uint32_t arguments_number) /**< length of arguments' list */\n{\n  JERRY_UNUSED (arguments_number);\n\n  /* no specialization */\n  if (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_VALUE_OF)\n  {\n    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_TO_STRING)\n    {\n      return ecma_builtin_object_prototype_object_to_string (this_arg);\n    }\n\n    JERRY_ASSERT (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_VALUE_OF);\n\n    return ecma_builtin_object_prototype_object_value_of (this_arg);\n  }\n\n  if (builtin_routine_id <= ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF)\n  {\n    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_IS_PROTOTYPE_OF)\n    {\n      /* 15.2.4.6.1. */\n      if (!ecma_is_value_object (arguments_list_p[0]))\n      {\n        return ECMA_VALUE_FALSE;\n      }\n    }\n\n    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_TO_LOCALE_STRING)\n    {\n      return ecma_builtin_object_prototype_object_to_locale_string (this_arg);\n    }\n\n    ecma_value_t to_object = ecma_op_to_object (this_arg);\n\n    if (ECMA_IS_VALUE_ERROR (to_object))\n    {\n      return to_object;\n    }\n\n    ecma_object_t *obj_p = ecma_get_object_from_value (to_object);\n\n    ecma_value_t ret_value;\n\n#if JERRY_ESNEXT\n    if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_GET_PROTO)\n    {\n      ret_value = ecma_builtin_object_object_get_prototype_of (obj_p);\n    }\n    else\n#endif /* JERRY_ESNEXT */\n    {\n      ret_value = ecma_builtin_object_prototype_object_is_prototype_of (obj_p, arguments_list_p[0]);\n    }\n\n    ecma_deref_object (obj_p);\n\n    return ret_value;\n  }\n\n  JERRY_ASSERT (builtin_routine_id >= ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY);\n\n#if JERRY_ESNEXT\n  if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_SET_PROTO)\n  {\n    return ecma_builtin_object_object_set_proto (this_arg, arguments_list_p[0]);\n  }\n#if JERRY_BUILTIN_ANNEXB\n  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_LOOKUP_GETTER)\n  {\n    return ecma_builtin_object_prototype_lookup_getter_setter (this_arg, arguments_list_p[0], true);\n  }\n  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_LOOKUP_SETTER)\n  {\n    return ecma_builtin_object_prototype_lookup_getter_setter (this_arg, arguments_list_p[0], false);\n  }\n  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_DEFINE_GETTER)\n  {\n    return ecma_builtin_object_prototype_define_getter_setter (this_arg,\n                                                               arguments_list_p[0],\n                                                               arguments_list_p[1],\n                                                               true);\n  }\n  else if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_DEFINE_SETTER)\n  {\n    return ecma_builtin_object_prototype_define_getter_setter (this_arg,\n                                                               arguments_list_p[0],\n                                                               arguments_list_p[1],\n                                                               false);\n  }\n#endif /* JERRY_BUILTIN_ANNEXB */\n#endif /* JERRY_ESNEXT*/\n\n  ecma_string_t *prop_name_p = ecma_op_to_property_key (arguments_list_p[0]);\n\n  if (prop_name_p == NULL)\n  {\n    return ECMA_VALUE_ERROR;\n  }\n\n  ecma_value_t to_object = ecma_op_to_object (this_arg);\n\n  if (ECMA_IS_VALUE_ERROR (to_object))\n  {\n    ecma_deref_ecma_string (prop_name_p);\n    return to_object;\n  }\n\n  ecma_object_t *obj_p = ecma_get_object_from_value (to_object);\n\n  ecma_value_t ret_value;\n\n  if (builtin_routine_id == ECMA_OBJECT_PROTOTYPE_HAS_OWN_PROPERTY)\n  {\n    ret_value = ecma_builtin_object_prototype_object_has_own_property (obj_p, prop_name_p);\n  }\n  else\n  {\n    ret_value = ecma_builtin_object_prototype_object_property_is_enumerable (obj_p, prop_name_p);\n  }\n\n  ecma_deref_ecma_string (prop_name_p);\n  ecma_deref_object (obj_p);\n\n  return ret_value;\n}",
        "begin_line": 398,
        "end_line": 529,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtin-object-prototype.ecma_builtin_object_prototype_object_to_string#85",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtin-object-prototype.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtin-object-prototype",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtin-object-prototype.ecma_builtin_object_prototype_object_to_string (ecma_value_t this_arg) /**< this argument */",
        "snippet": "static ecma_value_t\necma_builtin_object_prototype_object_to_string (ecma_value_t this_arg) /**< this argument */\n{\n  return ecma_builtin_helper_object_to_string (this_arg);\n}",
        "begin_line": 85,
        "end_line": 89,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtin-object.ecma_builtin_object_object_get_prototype_of#156",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtin-object.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtin-object",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtin-object.ecma_builtin_object_object_get_prototype_of (ecma_object_t *obj_p) /**< routine's argument */",
        "snippet": "ecma_value_t\necma_builtin_object_object_get_prototype_of (ecma_object_t *obj_p) /**< routine's argument */\n{\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_IS_PROXY (obj_p))\n  {\n    return ecma_proxy_object_get_prototype_of (obj_p);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (obj_p);\n\n  if (proto_cp != JMEM_CP_NULL)\n  {\n    ecma_object_t *prototype_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);\n    ecma_ref_object (prototype_p);\n    return ecma_make_object_value (prototype_p);\n  }\n\n  return ECMA_VALUE_NULL;\n}",
        "begin_line": 156,
        "end_line": 176,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtin-object.ecma_builtin_object_object_is_extensible#661",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtin-object.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtin-object",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtin-object.ecma_builtin_object_object_is_extensible (ecma_object_t *obj_p) /**< routine's argument */",
        "snippet": "ecma_value_t\necma_builtin_object_object_is_extensible (ecma_object_t *obj_p) /**< routine's argument */\n{\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_IS_PROXY (obj_p))\n  {\n    return ecma_proxy_object_is_extensible (obj_p);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  return ecma_make_boolean_value (ecma_op_ordinary_object_is_extensible (obj_p));\n}",
        "begin_line": 661,
        "end_line": 672,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_create_global_object#557",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_create_global_object (void)",
        "snippet": "ecma_global_object_t *\necma_builtin_create_global_object (void)\n{\n  ecma_builtin_descriptor_t builtin_desc = ecma_builtin_descriptors[ECMA_BUILTIN_ID_GLOBAL];\n  ecma_builtin_id_t prototype_builtin_id = (ecma_builtin_id_t) (builtin_desc >> ECMA_BUILTIN_PROTOTYPE_ID_SHIFT);\n  ecma_object_type_t obj_type = (ecma_object_type_t) (builtin_desc & ECMA_BUILTIN_OBJECT_TYPE_MASK);\n  size_t property_count = ecma_builtin_get_property_count (ECMA_BUILTIN_ID_GLOBAL);\n\n  JERRY_ASSERT (prototype_builtin_id != ECMA_BUILTIN_ID__COUNT);\n  JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL);\n\n  /* Whenever this assertion fails, the size of extra_instantiated_bitset in ecma_global_object_t\n   * must be increased and 32 must be added to these constants. Furthermore the new uint32 item\n   * must be set to zero. */\n#if JERRY_BUILTIN_REALMS\n  JERRY_ASSERT (property_count <= ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE + 64);\n#else /* !JERRY_BUILTIN_REALMS */\n  JERRY_ASSERT (property_count <= ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE + 32);\n#endif /* JERRY_BUILTIN_REALMS */\n\n  ecma_object_t *object_p = ecma_create_object (NULL, sizeof (ecma_global_object_t), obj_type);\n\n  ecma_op_ordinary_object_set_extensible (object_p);\n\n  ecma_global_object_t *global_object_p = (ecma_global_object_t *) object_p;\n\n  global_object_p->extended_object.u.built_in.id = (uint8_t) ECMA_BUILTIN_ID_GLOBAL;\n  global_object_p->extended_object.u.built_in.routine_id = 0;\n  /* Bitset size is ignored by the gc. */\n  global_object_p->extended_object.u.built_in.u.length_and_bitset_size = 0;\n  global_object_p->extended_object.u.built_in.u2.instantiated_bitset[0] = 0;\n  global_object_p->extra_instantiated_bitset[0] = 0;\n#if JERRY_BUILTIN_REALMS\n  ECMA_SET_INTERNAL_VALUE_POINTER (global_object_p->extended_object.u.built_in.realm_value, global_object_p);\n  global_object_p->extra_realms_bitset = 0;\n  global_object_p->this_binding = ecma_make_object_value (object_p);\n#else /* !JERRY_BUILTIN_REALMS */\n  global_object_p->extended_object.u.built_in.continue_instantiated_bitset[0] = 0;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  memset (global_object_p->builtin_objects, 0, (sizeof (jmem_cpointer_t) * ECMA_BUILTIN_OBJECTS_COUNT));\n\n  /* Temporary self reference for GC mark. */\n  ECMA_SET_NON_NULL_POINTER (global_object_p->global_env_cp, object_p);\n#if JERRY_ESNEXT\n  global_object_p->global_scope_cp = global_object_p->global_env_cp;\n#endif /* JERRY_ESNEXT */\n\n  ecma_object_t *global_lex_env_p = ecma_create_object_lex_env (NULL, object_p);\n  ECMA_SET_NON_NULL_POINTER (global_object_p->global_env_cp, global_lex_env_p);\n#if JERRY_ESNEXT\n  global_object_p->global_scope_cp = global_object_p->global_env_cp;\n#endif /* JERRY_ESNEXT */\n  ecma_deref_object (global_lex_env_p);\n\n  ecma_object_t *prototype_object_p;\n  prototype_object_p = ecma_instantiate_builtin (global_object_p, prototype_builtin_id);\n  JERRY_ASSERT (prototype_object_p != NULL);\n\n  ECMA_SET_NON_NULL_POINTER (object_p->u2.prototype_cp, prototype_object_p);\n\n  return global_object_p;\n}",
        "begin_line": 557,
        "end_line": 619,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_dispatch_call#1624",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_dispatch_call (ecma_object_t *obj_p, /**< built-in object */                             ecma_value_t this_arg_value, /**< 'this' argument value */                             const ecma_value_t *arguments_list_p, /**< arguments list */                             uint32_t arguments_list_len) /**< arguments list length */",
        "snippet": "ecma_value_t\necma_builtin_dispatch_call (ecma_object_t *obj_p, /**< built-in object */\n                            ecma_value_t this_arg_value, /**< 'this' argument value */\n                            const ecma_value_t *arguments_list_p, /**< arguments list */\n                            uint32_t arguments_list_len) /**< arguments list length */\n{\n  JERRY_ASSERT (ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);\n\n  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;\n\n  if (ecma_builtin_function_is_routine (obj_p))\n  {\n#if JERRY_ESNEXT\n    if (JERRY_UNLIKELY (ext_obj_p->u.built_in.id == ECMA_BUILTIN_ID_HANDLER))\n    {\n      ecma_builtin_handler_t handler = ecma_builtin_handler_get (ext_obj_p->u.built_in.routine_id);\n      return handler (obj_p, arguments_list_p, arguments_list_len);\n    }\n#endif /* !JERRY_ESNEXT */\n\n    return ecma_builtin_dispatch_routine (ext_obj_p,\n                                          this_arg_value,\n                                          arguments_list_p,\n                                          arguments_list_len);\n  }\n\n  ecma_builtin_id_t builtin_object_id = ext_obj_p->u.built_in.id;\n  JERRY_ASSERT (builtin_object_id < sizeof (ecma_builtin_call_functions) / sizeof (ecma_builtin_dispatch_call_t));\n  return ecma_builtin_call_functions[builtin_object_id] (arguments_list_p, arguments_list_len);\n}",
        "begin_line": 1624,
        "end_line": 1653,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_dispatch_construct#1660",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_dispatch_construct (ecma_object_t *obj_p, /**< built-in object */                                  const ecma_value_t *arguments_list_p, /**< arguments list */                                  uint32_t arguments_list_len) /**< arguments list length */",
        "snippet": "ecma_value_t\necma_builtin_dispatch_construct (ecma_object_t *obj_p, /**< built-in object */\n                                 const ecma_value_t *arguments_list_p, /**< arguments list */\n                                 uint32_t arguments_list_len) /**< arguments list length */\n{\n  JERRY_ASSERT (ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);\n\n  if (ecma_builtin_function_is_routine (obj_p))\n  {\n    return ecma_raise_type_error (ECMA_ERR_MSG (\"Built-in routines have no constructor\"));\n  }\n\n  ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;\n  ecma_builtin_id_t builtin_object_id = ext_obj_p->u.built_in.id;\n  JERRY_ASSERT (builtin_object_id < sizeof (ecma_builtin_construct_functions) / sizeof (ecma_builtin_dispatch_call_t));\n\n  return ecma_builtin_construct_functions[builtin_object_id] (arguments_list_p, arguments_list_len);\n}",
        "begin_line": 1660,
        "end_line": 1677,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_dispatch_routine#1580",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_dispatch_routine (ecma_extended_object_t *func_obj_p, /**< builtin object */                                ecma_value_t this_arg_value, /**< 'this' argument value */                                const ecma_value_t *arguments_list_p, /**< list of arguments passed to routine */                                uint32_t arguments_list_len) /**< length of arguments' list */",
        "snippet": "static ecma_value_t\necma_builtin_dispatch_routine (ecma_extended_object_t *func_obj_p, /**< builtin object */\n                               ecma_value_t this_arg_value, /**< 'this' argument value */\n                               const ecma_value_t *arguments_list_p, /**< list of arguments passed to routine */\n                               uint32_t arguments_list_len) /**< length of arguments' list */\n{\n  JERRY_ASSERT (ecma_builtin_function_is_routine ((ecma_object_t *) func_obj_p));\n\n  ecma_value_t padded_arguments_list_p[3] = { ECMA_VALUE_UNDEFINED, ECMA_VALUE_UNDEFINED, ECMA_VALUE_UNDEFINED };\n\n  if (arguments_list_len <= 2)\n  {\n    switch (arguments_list_len)\n    {\n      case 2:\n      {\n        padded_arguments_list_p[1] = arguments_list_p[1];\n        /* FALLTHRU */\n      }\n      case 1:\n      {\n        padded_arguments_list_p[0] = arguments_list_p[0];\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (arguments_list_len == 0);\n      }\n    }\n\n    arguments_list_p = padded_arguments_list_p;\n  }\n\n  return ecma_builtin_routines[func_obj_p->u.built_in.id] (func_obj_p->u.built_in.routine_id,\n                                                           this_arg_value,\n                                                           arguments_list_p,\n                                                           arguments_list_len);\n}",
        "begin_line": 1580,
        "end_line": 1617,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_get#629",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_get (ecma_builtin_id_t builtin_id) /**< id of built-in to check on */",
        "snippet": "ecma_object_t *\necma_builtin_get (ecma_builtin_id_t builtin_id) /**< id of built-in to check on */\n{\n  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_OBJECTS_COUNT);\n\n  ecma_global_object_t *global_object_p = (ecma_global_object_t *) ecma_builtin_get_global ();\n  jmem_cpointer_t *builtin_p = global_object_p->builtin_objects + builtin_id;\n\n  if (JERRY_UNLIKELY (*builtin_p == JMEM_CP_NULL))\n  {\n    return ecma_instantiate_builtin (global_object_p, builtin_id);\n  }\n\n  return ECMA_GET_NON_NULL_POINTER (ecma_object_t, *builtin_p);\n}",
        "begin_line": 629,
        "end_line": 643,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_get_property_count#257",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_get_property_count (ecma_builtin_id_t builtin_id) /**< built-in ID */",
        "snippet": "static size_t\necma_builtin_get_property_count (ecma_builtin_id_t builtin_id) /**< built-in ID */\n{\n  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);\n  const ecma_builtin_property_descriptor_t *property_list_p = ecma_builtin_property_list_references[builtin_id];\n\n  const ecma_builtin_property_descriptor_t *curr_property_p = property_list_p;\n\n  while (curr_property_p->magic_string_id != LIT_MAGIC_STRING__COUNT)\n  {\n    curr_property_p++;\n  }\n\n  return (size_t) (curr_property_p - property_list_p);\n}",
        "begin_line": 257,
        "end_line": 271,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_is_global#279",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_is_global (ecma_object_t *object_p) /**< pointer to an object */",
        "snippet": "bool\necma_builtin_is_global (ecma_object_t *object_p) /**< pointer to an object */\n{\n  return (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL\n          && ((ecma_extended_object_t *) object_p)->u.built_in.id == ECMA_BUILTIN_ID_GLOBAL);\n}",
        "begin_line": 279,
        "end_line": 284,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_list_lazy_property_names#1462",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_list_lazy_property_names (ecma_object_t *object_p, /**< a built-in object */                                        ecma_collection_t *prop_names_p, /**< prop name collection */                                        ecma_property_counter_t *prop_counter_p, /**< property counters */                                        jerry_property_filter_t filter) /**< name filters */",
        "snippet": "void\necma_builtin_list_lazy_property_names (ecma_object_t *object_p, /**< a built-in object */\n                                       ecma_collection_t *prop_names_p, /**< prop name collection */\n                                       ecma_property_counter_t *prop_counter_p, /**< property counters */\n                                       jerry_property_filter_t filter) /**< name filters */\n{\n  JERRY_ASSERT (ecma_get_object_type (object_p) != ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION\n                || !ecma_builtin_function_is_routine (object_p));\n\n  ecma_built_in_props_t *built_in_props_p;\n  ecma_object_type_t object_type = ecma_get_object_type (object_p);\n\n  if (ECMA_BUILTIN_IS_EXTENDED_BUILT_IN (object_type))\n  {\n    built_in_props_p = &((ecma_extended_built_in_object_t *) object_p)->built_in;\n  }\n  else\n  {\n    built_in_props_p = &((ecma_extended_object_t *) object_p)->u.built_in;\n  }\n\n  ecma_builtin_id_t builtin_id = (ecma_builtin_id_t) built_in_props_p->id;\n\n  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);\n\n#if JERRY_BUILTIN_REALMS\n  uint8_t *bitset_p = built_in_props_p->u2.instantiated_bitset + 1 + sizeof (ecma_value_t);\n#else /* !JERRY_BUILTIN_REALMS */\n  uint8_t *bitset_p = built_in_props_p->u2.instantiated_bitset + 1;\n#endif /* JERRY_BUILTIN_REALMS */\n\n#if JERRY_ESNEXT\n  uint8_t *symbol_bitset_p = bitset_p;\n  bool has_symbol = true;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  if (!(filter & JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS))\n  {\n    const ecma_builtin_property_descriptor_t *curr_property_p = ecma_builtin_property_list_references[builtin_id];\n    uint8_t bitset = built_in_props_p->u2.instantiated_bitset[0];\n    uint32_t index = 0;\n\n#if JERRY_ESNEXT\n    has_symbol = false;\n#endif /* JERRY_BUILTIN_REALMS */\n\n    while (curr_property_p->magic_string_id != LIT_MAGIC_STRING__COUNT)\n    {\n      if (index == 8)\n      {\n        bitset = *bitset_p++;\n        index = 0;\n      }\n\n      uint32_t bit_for_index = (uint32_t) 1u << index;\n\n      if (!(bitset & bit_for_index))\n      {\n#if JERRY_ESNEXT\n        if (JERRY_LIKELY (curr_property_p->magic_string_id < LIT_NON_INTERNAL_MAGIC_STRING__COUNT))\n        {\n#endif /* JERRY_ESNEXT */\n          ecma_value_t name = ecma_make_magic_string_value ((lit_magic_string_id_t) curr_property_p->magic_string_id);\n          ecma_collection_push_back (prop_names_p, name);\n          prop_counter_p->string_named_props++;\n#if JERRY_ESNEXT\n        }\n        else\n        {\n          JERRY_ASSERT (LIT_IS_GLOBAL_SYMBOL (curr_property_p->magic_string_id));\n          has_symbol = true;\n        }\n#endif /* JERRY_ESNEXT */\n      }\n\n      curr_property_p++;\n      index++;\n    }\n  }\n\n#if JERRY_ESNEXT\n  if (has_symbol && !(filter & JERRY_PROPERTY_FILTER_EXLCUDE_SYMBOLS))\n  {\n    const ecma_builtin_property_descriptor_t *curr_property_p = ecma_builtin_property_list_references[builtin_id];\n    uint8_t bitset = built_in_props_p->u2.instantiated_bitset[0];\n    uint32_t index = 0;\n\n    while (curr_property_p->magic_string_id != LIT_MAGIC_STRING__COUNT)\n    {\n      if (index == 8)\n      {\n        bitset = *symbol_bitset_p++;\n        index = 0;\n      }\n\n      uint32_t bit_for_index = (uint32_t) 1u << index;\n\n      if (curr_property_p->magic_string_id > LIT_NON_INTERNAL_MAGIC_STRING__COUNT\n          && !(bitset & bit_for_index))\n      {\n        ecma_string_t *name_p = ecma_op_get_global_symbol (curr_property_p->magic_string_id);\n        ecma_collection_push_back (prop_names_p, ecma_make_symbol_value (name_p));\n        prop_counter_p->symbol_named_props++;\n      }\n\n      curr_property_p++;\n      index++;\n    }\n  }\n#endif /* JERRY_ESNEXT */\n}",
        "begin_line": 1462,
        "end_line": 1572,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_make_function_object_for_getter_accessor#750",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_make_function_object_for_getter_accessor (ecma_object_t *builtin_object_p, /**< builtin object */                                                        uint8_t routine_id, /**< builtin-wide id of the built-in                                                                             *   object's routine property */                                                        uint32_t routine_index) /**< property descriptor index                                                                                 *   of routine */",
        "snippet": "static ecma_object_t *\necma_builtin_make_function_object_for_getter_accessor (ecma_object_t *builtin_object_p, /**< builtin object */\n                                                       uint8_t routine_id, /**< builtin-wide id of the built-in\n                                                                            *   object's routine property */\n                                                       uint32_t routine_index) /**< property descriptor index\n                                                                                *   of routine */\n{\n  return ecma_builtin_make_function_object_for_routine (builtin_object_p,\n                                                        routine_id,\n                                                        routine_index,\n                                                        ECMA_BUILTIN_ROUTINE_GETTER);\n}",
        "begin_line": 750,
        "end_line": 761,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_make_function_object_for_routine#702",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_make_function_object_for_routine (ecma_object_t *builtin_object_p, /**< builtin object */                                                uint8_t routine_id, /**< builtin-wide identifier of the built-in                                                                     *   object's routine property */                                                uint32_t routine_index, /**< property descriptor index of routine */                                                uint8_t flags) /**< see also: ecma_builtin_routine_flags */",
        "snippet": "static ecma_object_t *\necma_builtin_make_function_object_for_routine (ecma_object_t *builtin_object_p, /**< builtin object */\n                                               uint8_t routine_id, /**< builtin-wide identifier of the built-in\n                                                                    *   object's routine property */\n                                               uint32_t routine_index, /**< property descriptor index of routine */\n                                               uint8_t flags) /**< see also: ecma_builtin_routine_flags */\n{\n  ecma_object_t *prototype_obj_p = ecma_builtin_get_from_builtin (builtin_object_p,\n                                                                  ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);\n\n  size_t ext_object_size = sizeof (ecma_extended_object_t);\n\n  ecma_object_t *func_obj_p = ecma_create_object (prototype_obj_p,\n                                                  ext_object_size,\n                                                  ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);\n\n  JERRY_ASSERT (routine_id > 0);\n  JERRY_ASSERT (routine_index <= UINT8_MAX);\n\n  ecma_built_in_props_t *built_in_props_p;\n\n  if (ECMA_BUILTIN_IS_EXTENDED_BUILT_IN (ecma_get_object_type (builtin_object_p)))\n  {\n    built_in_props_p = &((ecma_extended_built_in_object_t *) builtin_object_p)->built_in;\n  }\n  else\n  {\n    built_in_props_p = &((ecma_extended_object_t *) builtin_object_p)->u.built_in;\n  }\n\n  ecma_extended_object_t *ext_func_obj_p = (ecma_extended_object_t *) func_obj_p;\n  ext_func_obj_p->u.built_in.id = built_in_props_p->id;\n  ext_func_obj_p->u.built_in.routine_id = routine_id;\n  ext_func_obj_p->u.built_in.u.routine_index = (uint8_t) routine_index;\n  ext_func_obj_p->u.built_in.u2.routine_flags = flags;\n\n#if JERRY_BUILTIN_REALMS\n  ext_func_obj_p->u.built_in.realm_value = built_in_props_p->realm_value;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  return func_obj_p;\n}",
        "begin_line": 702,
        "end_line": 743,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_make_function_object_for_setter_accessor#768",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_make_function_object_for_setter_accessor (ecma_object_t *builtin_object_p, /**< builtin object */                                                        uint8_t routine_id, /**< builtin-wide id of the built-in                                                                             *   object's routine property */                                                        uint32_t routine_index) /**< property descriptor index                                                                                 *   of routine */",
        "snippet": "static ecma_object_t *\necma_builtin_make_function_object_for_setter_accessor (ecma_object_t *builtin_object_p, /**< builtin object */\n                                                       uint8_t routine_id, /**< builtin-wide id of the built-in\n                                                                            *   object's routine property */\n                                                       uint32_t routine_index) /**< property descriptor index\n                                                                                *   of routine */\n{\n  return ecma_builtin_make_function_object_for_routine (builtin_object_p,\n                                                        routine_id,\n                                                        routine_index,\n                                                        ECMA_BUILTIN_ROUTINE_SETTER);\n}",
        "begin_line": 768,
        "end_line": 779,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_try_to_instantiate_property#995",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_builtin_try_to_instantiate_property (ecma_object_t *object_p, /**< object */                                           ecma_string_t *property_name_p) /**< property's name */",
        "snippet": "ecma_property_t *\necma_builtin_try_to_instantiate_property (ecma_object_t *object_p, /**< object */\n                                          ecma_string_t *property_name_p) /**< property's name */\n{\n  lit_magic_string_id_t magic_string_id = ecma_get_string_magic (property_name_p);\n\n#if JERRY_ESNEXT\n  if (JERRY_UNLIKELY (ecma_prop_name_is_symbol (property_name_p))\n      && property_name_p->u.hash & ECMA_GLOBAL_SYMBOL_FLAG)\n  {\n    magic_string_id = (property_name_p->u.hash >> ECMA_GLOBAL_SYMBOL_SHIFT);\n  }\n#endif /* JERRY_ESNEXT */\n\n  if (magic_string_id == LIT_MAGIC_STRING__COUNT)\n  {\n    return NULL;\n  }\n\n  ecma_built_in_props_t *built_in_props_p;\n  ecma_object_type_t object_type = ecma_get_object_type (object_p);\n\n  JERRY_ASSERT (object_type == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL\n                || object_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS\n                || object_type == ECMA_OBJECT_TYPE_BUILT_IN_ARRAY\n                || (object_type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION\n                    && !ecma_builtin_function_is_routine (object_p)));\n\n  if (ECMA_BUILTIN_IS_EXTENDED_BUILT_IN (object_type))\n  {\n    built_in_props_p = &((ecma_extended_built_in_object_t *) object_p)->built_in;\n  }\n  else\n  {\n    built_in_props_p = &((ecma_extended_object_t *) object_p)->u.built_in;\n  }\n\n  ecma_builtin_id_t builtin_id = (ecma_builtin_id_t) built_in_props_p->id;\n\n  JERRY_ASSERT (builtin_id < ECMA_BUILTIN_ID__COUNT);\n\n  const ecma_builtin_property_descriptor_t *property_list_p = ecma_builtin_property_list_references[builtin_id];\n  const ecma_builtin_property_descriptor_t *curr_property_p = property_list_p;\n\n  while (curr_property_p->magic_string_id != magic_string_id)\n  {\n    if (curr_property_p->magic_string_id == LIT_MAGIC_STRING__COUNT)\n    {\n      return NULL;\n    }\n    curr_property_p++;\n  }\n\n  uint32_t index = (uint32_t) (curr_property_p - property_list_p);\n  uint8_t *bitset_p = built_in_props_p->u2.instantiated_bitset + (index >> 3);\n\n#if JERRY_BUILTIN_REALMS\n  if (index >= 8 * sizeof (uint8_t))\n  {\n    bitset_p += sizeof (ecma_value_t);\n  }\n#endif /* JERRY_BUILTIN_REALMS */\n\n  uint8_t bit_for_index = (uint8_t) (1u << (index & 0x7));\n\n  if (*bitset_p & bit_for_index)\n  {\n    /* This property was instantiated before. */\n    return NULL;\n  }\n\n  ecma_value_t value = ECMA_VALUE_EMPTY;\n  bool is_accessor = false;\n  ecma_object_t *getter_p = NULL;\n  ecma_object_t *setter_p = NULL;\n\n  switch (curr_property_p->type)\n  {\n    case ECMA_BUILTIN_PROPERTY_SIMPLE:\n    {\n      value = curr_property_p->value;\n\n#if JERRY_BUILTIN_GLOBAL_THIS\n      if (value == ECMA_VALUE_GLOBAL_THIS)\n      {\n        /* Only the global object has globalThis property. */\n        JERRY_ASSERT (ecma_builtin_is_global (object_p));\n        ecma_ref_object (object_p);\n        value = ecma_make_object_value (object_p);\n      }\n#endif /* JERRY_BUILTIN_GLOBAL_THIS */\n      break;\n    }\n    case ECMA_BUILTIN_PROPERTY_NUMBER:\n    {\n      ecma_number_t num = 0.0;\n\n      if (curr_property_p->value < ECMA_BUILTIN_NUMBER_MAX)\n      {\n        num = curr_property_p->value;\n      }\n      else if (curr_property_p->value < ECMA_BUILTIN_NUMBER_NAN)\n      {\n        static const ecma_number_t builtin_number_list[] =\n        {\n          ECMA_NUMBER_MAX_VALUE,\n          ECMA_NUMBER_MIN_VALUE,\n#if JERRY_ESNEXT\n          ECMA_NUMBER_EPSILON,\n          ECMA_NUMBER_MAX_SAFE_INTEGER,\n          ECMA_NUMBER_MIN_SAFE_INTEGER,\n#endif /* JERRY_ESNEXT */\n          ECMA_NUMBER_E,\n          ECMA_NUMBER_PI,\n          ECMA_NUMBER_LN10,\n          ECMA_NUMBER_LN2,\n          ECMA_NUMBER_LOG2E,\n          ECMA_NUMBER_LOG10E,\n          ECMA_NUMBER_SQRT2,\n          ECMA_NUMBER_SQRT_1_2,\n        };\n\n        num = builtin_number_list[curr_property_p->value - ECMA_BUILTIN_NUMBER_MAX];\n      }\n      else\n      {\n        switch (curr_property_p->value)\n        {\n          case ECMA_BUILTIN_NUMBER_POSITIVE_INFINITY:\n          {\n            num = ecma_number_make_infinity (false);\n            break;\n          }\n          case ECMA_BUILTIN_NUMBER_NEGATIVE_INFINITY:\n          {\n            num = ecma_number_make_infinity (true);\n            break;\n          }\n          default:\n          {\n            JERRY_ASSERT (curr_property_p->value == ECMA_BUILTIN_NUMBER_NAN);\n\n            num = ecma_number_make_nan ();\n            break;\n          }\n        }\n      }\n\n      value = ecma_make_number_value (num);\n      break;\n    }\n    case ECMA_BUILTIN_PROPERTY_STRING:\n    {\n      value = ecma_make_magic_string_value ((lit_magic_string_id_t) curr_property_p->value);\n      break;\n    }\n#if JERRY_ESNEXT\n    case ECMA_BUILTIN_PROPERTY_SYMBOL:\n    {\n      lit_magic_string_id_t symbol_id = (lit_magic_string_id_t) curr_property_p->value;\n\n      value = ecma_make_symbol_value (ecma_op_get_global_symbol (symbol_id));\n      break;\n    }\n    case ECMA_BUILTIN_PROPERTY_INTRINSIC_PROPERTY:\n    {\n      ecma_object_t *intrinsic_object_p = ecma_builtin_get_from_builtin (object_p, ECMA_BUILTIN_ID_INTRINSIC_OBJECT);\n      value = ecma_op_object_get_by_magic_id (intrinsic_object_p, (lit_magic_string_id_t) curr_property_p->value);\n      break;\n    }\n    case ECMA_BUILTIN_PROPERTY_ACCESSOR_BUILTIN_FUNCTION:\n    {\n      is_accessor = true;\n      uint16_t getter_id = ECMA_ACCESSOR_READ_WRITE_GET_GETTER_ID (curr_property_p->value);\n      uint16_t setter_id = ECMA_ACCESSOR_READ_WRITE_GET_SETTER_ID (curr_property_p->value);\n      getter_p = ecma_builtin_get_from_builtin (object_p, getter_id);\n      setter_p = ecma_builtin_get_from_builtin (object_p, setter_id);\n      ecma_ref_object (getter_p);\n      ecma_ref_object (setter_p);\n      break;\n    }\n#endif /* JERRY_ESNEXT */\n    case ECMA_BUILTIN_PROPERTY_OBJECT:\n    {\n      ecma_object_t *builtin_object_p;\n      builtin_object_p = ecma_builtin_get_from_builtin (object_p, (ecma_builtin_id_t) curr_property_p->value);\n      ecma_ref_object (builtin_object_p);\n      value = ecma_make_object_value (builtin_object_p);\n      break;\n    }\n    case ECMA_BUILTIN_PROPERTY_ROUTINE:\n    {\n      ecma_object_t *func_obj_p;\n      func_obj_p = ecma_builtin_make_function_object_for_routine (object_p,\n                                                                  ECMA_GET_ROUTINE_ID (curr_property_p->value),\n                                                                  index,\n                                                                  ECMA_BUILTIN_ROUTINE_NO_OPTS);\n      value = ecma_make_object_value (func_obj_p);\n      break;\n    }\n    case ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_WRITE:\n    {\n      is_accessor = true;\n      uint8_t getter_id = ECMA_ACCESSOR_READ_WRITE_GET_GETTER_ID (curr_property_p->value);\n      uint8_t setter_id = ECMA_ACCESSOR_READ_WRITE_GET_SETTER_ID (curr_property_p->value);\n      getter_p = ecma_builtin_make_function_object_for_getter_accessor (object_p, getter_id, index);\n      setter_p = ecma_builtin_make_function_object_for_setter_accessor (object_p, setter_id, index);\n      break;\n    }\n    default:\n    {\n      JERRY_ASSERT (curr_property_p->type == ECMA_BUILTIN_PROPERTY_ACCESSOR_READ_ONLY);\n\n      is_accessor = true;\n      uint8_t getter_id = (uint8_t) curr_property_p->value;\n      getter_p = ecma_builtin_make_function_object_for_getter_accessor (object_p, getter_id, index);\n      break;\n    }\n  }\n\n  ecma_property_t *prop_p;\n\n  JERRY_ASSERT (curr_property_p->attributes & ECMA_PROPERTY_FLAG_BUILT_IN);\n\n  if (is_accessor)\n  {\n    ecma_create_named_accessor_property (object_p,\n                                         property_name_p,\n                                         getter_p,\n                                         setter_p,\n                                         curr_property_p->attributes,\n                                         &prop_p);\n\n    if (setter_p)\n    {\n      ecma_deref_object (setter_p);\n    }\n    if (getter_p)\n    {\n      ecma_deref_object (getter_p);\n    }\n  }\n  else\n  {\n    ecma_property_value_t *prop_value_p = ecma_create_named_data_property (object_p,\n                                                                           property_name_p,\n                                                                           curr_property_p->attributes,\n                                                                           &prop_p);\n    prop_value_p->value = value;\n\n    /* Reference count of objects must be decreased. */\n    ecma_deref_if_object (value);\n  }\n\n  return prop_p;\n}",
        "begin_line": 995,
        "end_line": 1250,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_instantiate_builtin#357",
        "src_path": "jerry-core/ecma/builtin-objects/ecma-builtins.c",
        "class_name": "jerry-core.ecma.builtin-objects.ecma-builtins",
        "signature": "jerry-core.ecma.builtin-objects.ecma-builtins.ecma_instantiate_builtin (ecma_global_object_t *global_object_p, /**< global object */                           ecma_builtin_id_t obj_builtin_id) /**< built-in id */",
        "snippet": "static ecma_object_t *\necma_instantiate_builtin (ecma_global_object_t *global_object_p, /**< global object */\n                          ecma_builtin_id_t obj_builtin_id) /**< built-in id */\n{\n  jmem_cpointer_t *builtin_objects = global_object_p->builtin_objects;\n\n  JERRY_ASSERT (obj_builtin_id < ECMA_BUILTIN_OBJECTS_COUNT);\n  JERRY_ASSERT (builtin_objects[obj_builtin_id] == JMEM_CP_NULL);\n\n  ecma_builtin_descriptor_t builtin_desc = ecma_builtin_descriptors[obj_builtin_id];\n  ecma_builtin_id_t object_prototype_builtin_id = (ecma_builtin_id_t) (builtin_desc >> ECMA_BUILTIN_PROTOTYPE_ID_SHIFT);\n\n  ecma_object_t *prototype_obj_p;\n\n  if (JERRY_UNLIKELY (object_prototype_builtin_id == ECMA_BUILTIN_ID__COUNT))\n  {\n    prototype_obj_p = NULL;\n  }\n  else\n  {\n    if (builtin_objects[object_prototype_builtin_id] == JMEM_CP_NULL)\n    {\n      ecma_instantiate_builtin (global_object_p, object_prototype_builtin_id);\n    }\n    prototype_obj_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, builtin_objects[object_prototype_builtin_id]);\n    JERRY_ASSERT (prototype_obj_p != NULL);\n  }\n\n  ecma_object_type_t obj_type = (ecma_object_type_t) (builtin_desc & ECMA_BUILTIN_OBJECT_TYPE_MASK);\n\n  JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_GENERAL\n                || obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS\n                || obj_type == ECMA_OBJECT_TYPE_BUILT_IN_ARRAY\n                || obj_type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);\n\n  bool is_extended_built_in = ECMA_BUILTIN_IS_EXTENDED_BUILT_IN (obj_type);\n\n  size_t ext_object_size = (is_extended_built_in ? sizeof (ecma_extended_built_in_object_t)\n                                                 : sizeof (ecma_extended_object_t));\n\n  size_t property_count = ecma_builtin_get_property_count (obj_builtin_id);\n\n  if (property_count > ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE)\n  {\n    /* Only 64 extra properties supported at the moment.\n     * This can be extended to 256 later. */\n    JERRY_ASSERT (property_count <= (ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE + 64));\n\n    ext_object_size += sizeof (uint64_t);\n  }\n\n  ecma_object_t *obj_p = ecma_create_object (prototype_obj_p, ext_object_size, obj_type);\n\n  if (JERRY_UNLIKELY (obj_builtin_id == ECMA_BUILTIN_ID_TYPE_ERROR_THROWER))\n  {\n    ecma_op_ordinary_object_prevent_extensions (obj_p);\n  }\n  else\n  {\n    ecma_op_ordinary_object_set_extensible (obj_p);\n  }\n\n  /*\n   * [[Class]] property of built-in object is not stored explicitly.\n   *\n   * See also: ecma_object_get_class_name\n   */\n\n  ecma_built_in_props_t *built_in_props_p;\n\n  if (is_extended_built_in)\n  {\n    built_in_props_p = &((ecma_extended_built_in_object_t *) obj_p)->built_in;\n  }\n  else\n  {\n    built_in_props_p = &((ecma_extended_object_t *) obj_p)->u.built_in;\n  }\n\n  built_in_props_p->id = (uint8_t) obj_builtin_id;\n  built_in_props_p->routine_id = 0;\n  built_in_props_p->u.length_and_bitset_size = 0;\n  built_in_props_p->u2.instantiated_bitset[0] = 0;\n#if JERRY_BUILTIN_REALMS\n  ECMA_SET_INTERNAL_VALUE_POINTER (built_in_props_p->realm_value, global_object_p);\n#else /* !JERRY_BUILTIN_REALMS */\n  built_in_props_p->continue_instantiated_bitset[0] = 0;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  if (property_count > ECMA_BUILTIN_INSTANTIATED_BITSET_MIN_SIZE)\n  {\n    built_in_props_p->u.length_and_bitset_size = 1 << ECMA_BUILT_IN_BITSET_SHIFT;\n\n    uint32_t *instantiated_bitset_p = (uint32_t *) (built_in_props_p + 1);\n    instantiated_bitset_p[0] = 0;\n    instantiated_bitset_p[1] = 0;\n  }\n\n  /** Initializing [[PrimitiveValue]] properties of built-in prototype objects */\n  switch (obj_builtin_id)\n  {\n#if JERRY_BUILTIN_ARRAY\n    case ECMA_BUILTIN_ID_ARRAY_PROTOTYPE:\n    {\n      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_ARRAY);\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      ext_object_p->u.array.length = 0;\n      ext_object_p->u.array.length_prop_and_hole_count = ECMA_PROPERTY_FLAG_WRITABLE | ECMA_PROPERTY_VIRTUAL;\n      break;\n    }\n#endif /* JERRY_BUILTIN_ARRAY */\n\n#if JERRY_BUILTIN_STRING\n    case ECMA_BUILTIN_ID_STRING_PROTOTYPE:\n    {\n      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_STRING;\n      ext_object_p->u.cls.u3.value = ecma_make_magic_string_value (LIT_MAGIC_STRING__EMPTY);\n      break;\n    }\n#endif /* JERRY_BUILTIN_STRING */\n\n#if JERRY_BUILTIN_NUMBER\n    case ECMA_BUILTIN_ID_NUMBER_PROTOTYPE:\n    {\n      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_NUMBER;\n      ext_object_p->u.cls.u3.value = ecma_make_integer_value (0);\n      break;\n    }\n#endif /* JERRY_BUILTIN_NUMBER */\n\n#if JERRY_BUILTIN_BOOLEAN\n    case ECMA_BUILTIN_ID_BOOLEAN_PROTOTYPE:\n    {\n      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_BOOLEAN;\n      ext_object_p->u.cls.u3.value = ECMA_VALUE_FALSE;\n      break;\n    }\n#endif /* JERRY_BUILTIN_BOOLEAN */\n\n#if !JERRY_ESNEXT\n#if JERRY_BUILTIN_DATE\n    case ECMA_BUILTIN_ID_DATE_PROTOTYPE:\n    {\n      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_DATE;\n\n      ecma_number_t *prim_prop_num_value_p = ecma_alloc_number ();\n      *prim_prop_num_value_p = ecma_number_make_nan ();\n      ECMA_SET_INTERNAL_VALUE_POINTER (ext_object_p->u.cls.u3.value, prim_prop_num_value_p);\n      break;\n    }\n#endif /* JERRY_BUILTIN_DATE */\n\n#if JERRY_BUILTIN_REGEXP\n    case ECMA_BUILTIN_ID_REGEXP_PROTOTYPE:\n    {\n      JERRY_ASSERT (obj_type == ECMA_OBJECT_TYPE_BUILT_IN_CLASS);\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      ext_object_p->u.cls.type = ECMA_OBJECT_CLASS_REGEXP;\n\n      re_compiled_code_t *bc_p = re_compile_bytecode (ecma_get_magic_string (LIT_MAGIC_STRING_EMPTY_NON_CAPTURE_GROUP),\n                                                      RE_FLAG_EMPTY);\n\n      JERRY_ASSERT (bc_p != NULL);\n\n      ECMA_SET_INTERNAL_VALUE_POINTER (ext_object_p->u.cls.u3.value, bc_p);\n      break;\n    }\n#endif /* JERRY_BUILTIN_REGEXP */\n#endif /* !JERRY_ESNEXT */\n    default:\n    {\n      JERRY_ASSERT (obj_type != ECMA_OBJECT_TYPE_BUILT_IN_CLASS);\n      break;\n    }\n  }\n\n  ECMA_SET_NON_NULL_POINTER (builtin_objects[obj_builtin_id], obj_p);\n  ecma_deref_object (obj_p);\n  return obj_p;\n}",
        "begin_line": 357,
        "end_line": 550,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_boolean#223",
        "src_path": "jerry-core/ecma/operations/ecma-conversion.c",
        "class_name": "jerry-core.ecma.operations.ecma-conversion",
        "signature": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_boolean (ecma_value_t value) /**< ecma value */",
        "snippet": "bool\necma_op_to_boolean (ecma_value_t value) /**< ecma value */\n{\n  ecma_check_value_type_is_spec_defined (value);\n\n  if (ecma_is_value_simple (value))\n  {\n    JERRY_ASSERT (ecma_is_value_boolean (value)\n                  || ecma_is_value_undefined (value)\n                  || ecma_is_value_null (value));\n\n    return ecma_is_value_true (value);\n  }\n\n  if (ecma_is_value_integer_number (value))\n  {\n    return (value != ecma_make_integer_value (0));\n  }\n\n  if (ecma_is_value_float_number (value))\n  {\n    ecma_number_t num = ecma_get_float_from_value (value);\n\n    return (!ecma_number_is_nan (num) && !ecma_number_is_zero (num));\n  }\n\n  if (ecma_is_value_string (value))\n  {\n    ecma_string_t *str_p = ecma_get_string_from_value (value);\n\n    return !ecma_string_is_empty (str_p);\n  }\n\n#if JERRY_BUILTIN_BIGINT\n  if (ecma_is_value_bigint (value))\n  {\n    return value != ECMA_BIGINT_ZERO;\n  }\n#endif /* JERRY_BUILTIN_BIGINT */\n\n  JERRY_ASSERT (ecma_is_value_object (value) || ecma_is_value_symbol (value));\n\n  return true;\n}",
        "begin_line": 223,
        "end_line": 266,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_integer#931",
        "src_path": "jerry-core/ecma/operations/ecma-conversion.c",
        "class_name": "jerry-core.ecma.operations.ecma-conversion",
        "signature": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_integer (ecma_value_t value, /**< ecma value */                     ecma_number_t *number_p) /**< [out] ecma number */",
        "snippet": "ecma_value_t\necma_op_to_integer (ecma_value_t value, /**< ecma value */\n                    ecma_number_t *number_p) /**< [out] ecma number */\n{\n  if (ECMA_IS_VALUE_ERROR (value))\n  {\n    return value;\n  }\n\n  /* 1 */\n  ecma_value_t to_number = ecma_op_to_number (value, number_p);\n\n  /* 2 */\n  if (ECMA_IS_VALUE_ERROR (to_number))\n  {\n    return to_number;\n  }\n\n  ecma_number_t number = *number_p;\n\n  /* 3 */\n  if (ecma_number_is_nan (number))\n  {\n    *number_p = ECMA_NUMBER_ZERO;\n    return ECMA_VALUE_EMPTY;\n  }\n\n  /* 4 */\n  if (ecma_number_is_zero (number) || ecma_number_is_infinity (number))\n  {\n    return ECMA_VALUE_EMPTY;\n  }\n\n  ecma_number_t floor_fabs = (ecma_number_t) floor (fabs (number));\n  /* 5 */\n  *number_p = ecma_number_is_negative (number) ? -floor_fabs : floor_fabs;\n  return ECMA_VALUE_EMPTY;\n}",
        "begin_line": 931,
        "end_line": 968,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_numeric#294",
        "src_path": "jerry-core/ecma/operations/ecma-conversion.c",
        "class_name": "jerry-core.ecma.operations.ecma-conversion",
        "signature": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_numeric (ecma_value_t value, /**< ecma value */                     ecma_number_t *number_p, /**< [out] ecma number */                     ecma_to_numeric_options_t options) /**< option bits */",
        "snippet": "ecma_value_t\necma_op_to_numeric (ecma_value_t value, /**< ecma value */\n                    ecma_number_t *number_p, /**< [out] ecma number */\n                    ecma_to_numeric_options_t options) /**< option bits */\n{\n  JERRY_UNUSED (options);\n\n  if (ecma_is_value_integer_number (value))\n  {\n    *number_p = (ecma_number_t) ecma_get_integer_from_value (value);\n    return ECMA_VALUE_EMPTY;\n  }\n\n  if (ecma_is_value_float_number (value))\n  {\n    *number_p = ecma_get_float_from_value (value);\n    return ECMA_VALUE_EMPTY;\n  }\n\n  if (ecma_is_value_string (value))\n  {\n    ecma_string_t *str_p = ecma_get_string_from_value (value);\n    *number_p = ecma_string_to_number (str_p);\n    return ECMA_VALUE_EMPTY;\n  }\n\n  if (ecma_is_value_undefined (value))\n  {\n    *number_p = ecma_number_make_nan ();\n    return ECMA_VALUE_EMPTY;\n  }\n\n  if (ecma_is_value_null (value))\n  {\n    *number_p = 0;\n    return ECMA_VALUE_EMPTY;\n  }\n\n  if (ecma_is_value_true (value))\n  {\n    *number_p = 1;\n    return ECMA_VALUE_EMPTY;\n  }\n\n  if (ecma_is_value_false (value))\n  {\n    *number_p = 0;\n    return ECMA_VALUE_EMPTY;\n  }\n\n#if JERRY_ESNEXT\n  if (ecma_is_value_symbol (value))\n  {\n    return ecma_raise_type_error (ECMA_ERR_MSG (\"Cannot convert a Symbol value to a number\"));\n  }\n#endif /* JERRY_ESNEXT */\n\n#if JERRY_BUILTIN_BIGINT\n  if (ecma_is_value_bigint (value))\n  {\n    if (options & ECMA_TO_NUMERIC_ALLOW_BIGINT)\n    {\n      return ecma_copy_value (value);\n    }\n    return ecma_raise_type_error (ECMA_ERR_MSG (\"Cannot convert a BigInt value to a number\"));\n  }\n#endif /* JERRY_BUILTIN_BIGINT */\n\n  JERRY_ASSERT (ecma_is_value_object (value));\n\n  ecma_object_t *object_p = ecma_get_object_from_value (value);\n\n  ecma_value_t def_value = ecma_op_object_default_value (object_p, ECMA_PREFERRED_TYPE_NUMBER);\n\n  if (ECMA_IS_VALUE_ERROR (def_value))\n  {\n    return def_value;\n  }\n\n  ecma_value_t ret_value = ecma_op_to_numeric (def_value, number_p, options);\n\n  ecma_fast_free_value (def_value);\n\n  return ret_value;\n}",
        "begin_line": 294,
        "end_line": 378,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_object#530",
        "src_path": "jerry-core/ecma/operations/ecma-conversion.c",
        "class_name": "jerry-core.ecma.operations.ecma-conversion",
        "signature": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_object (ecma_value_t value) /**< ecma value */",
        "snippet": "ecma_value_t\necma_op_to_object (ecma_value_t value) /**< ecma value */\n{\n  ecma_check_value_type_is_spec_defined (value);\n  ecma_builtin_id_t proto_id = ECMA_BUILTIN_ID_OBJECT_PROTOTYPE;\n  uint8_t class_type;\n\n  if (ecma_is_value_number (value))\n  {\n#if JERRY_BUILTIN_NUMBER\n    proto_id =  ECMA_BUILTIN_ID_NUMBER_PROTOTYPE;\n#endif /* JERRY_BUILTIN_NUMBER */\n    class_type = ECMA_OBJECT_CLASS_NUMBER;\n  }\n  else if (ecma_is_value_string (value))\n  {\n#if JERRY_BUILTIN_STRING\n    proto_id = ECMA_BUILTIN_ID_STRING_PROTOTYPE;\n#endif /* JERRY_BUILTIN_STRING */\n    class_type = ECMA_OBJECT_CLASS_STRING;\n  }\n  else if (ecma_is_value_object (value))\n  {\n    return ecma_copy_value (value);\n  }\n#if JERRY_ESNEXT\n  else if (ecma_is_value_symbol (value))\n  {\n    proto_id = ECMA_BUILTIN_ID_SYMBOL_PROTOTYPE;\n    class_type = ECMA_OBJECT_CLASS_SYMBOL;\n  }\n#endif /* JERRY_ESNEXT */\n#if JERRY_BUILTIN_BIGINT\n  else if (ecma_is_value_bigint (value))\n  {\n    return ecma_op_create_bigint_object (value);\n  }\n#endif /* JERRY_BUILTIN_BIGINT */\n  else\n  {\n    if (ecma_is_value_undefined (value)\n        || ecma_is_value_null (value))\n    {\n      return ecma_raise_type_error (ECMA_ERR_MSG (\"Argument cannot be converted to an object\"));\n    }\n    else\n    {\n      JERRY_ASSERT (ecma_is_value_boolean (value));\n#if JERRY_BUILTIN_BOOLEAN\n      proto_id = ECMA_BUILTIN_ID_BOOLEAN_PROTOTYPE;\n#endif /* JERRY_BUILTIN_BOOLEAN */\n      class_type = ECMA_OBJECT_CLASS_BOOLEAN;\n    }\n  }\n\n  ecma_object_t *object_p = ecma_create_object (ecma_builtin_get (proto_id),\n                                                sizeof (ecma_extended_object_t),\n                                                ECMA_OBJECT_TYPE_CLASS);\n\n  ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n  ext_object_p->u.cls.type = class_type;\n  ext_object_p->u.cls.u3.value = ecma_copy_value_if_not_object (value);\n\n  return ecma_make_object_value (object_p);\n}",
        "begin_line": 530,
        "end_line": 594,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_property_key#485",
        "src_path": "jerry-core/ecma/operations/ecma-conversion.c",
        "class_name": "jerry-core.ecma.operations.ecma-conversion",
        "signature": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_property_key (ecma_value_t value) /**< ecma value */",
        "snippet": "ecma_string_t *\necma_op_to_property_key (ecma_value_t value) /**< ecma value */\n{\n  /* Fast path for strings and symbols */\n  if (JERRY_LIKELY (ecma_is_value_prop_name (value)))\n  {\n    ecma_string_t *key_p = ecma_get_prop_name_from_value (value);\n    ecma_ref_ecma_string (key_p);\n    return key_p;\n  }\n\n#if JERRY_ESNEXT\n  ecma_value_t key = ecma_op_to_primitive (value, ECMA_PREFERRED_TYPE_STRING);\n\n  if (ECMA_IS_VALUE_ERROR (key))\n  {\n    return NULL;\n  }\n\n  if (ecma_is_value_symbol (key))\n  {\n    ecma_string_t *symbol_p = ecma_get_symbol_from_value (key);\n    return symbol_p;\n  }\n\n  ecma_string_t *result = ecma_op_to_string (key);\n  ecma_free_value (key);\n\n  return result;\n#else /* !JERRY_ESNEXT */\n  ecma_check_value_type_is_spec_defined (value);\n\n  return ecma_op_to_string (value);\n#endif /* JERRY_ESNEXT */\n}",
        "begin_line": 485,
        "end_line": 519,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_string#389",
        "src_path": "jerry-core/ecma/operations/ecma-conversion.c",
        "class_name": "jerry-core.ecma.operations.ecma-conversion",
        "signature": "jerry-core.ecma.operations.ecma-conversion.ecma_op_to_string (ecma_value_t value) /**< ecma value */",
        "snippet": "ecma_string_t *\necma_op_to_string (ecma_value_t value) /**< ecma value */\n{\n  ecma_check_value_type_is_spec_defined (value);\n\n  if (ecma_is_value_string (value))\n  {\n    ecma_string_t *res_p = ecma_get_string_from_value (value);\n    ecma_ref_ecma_string (res_p);\n    return res_p;\n  }\n\n  if (ecma_is_value_integer_number (value))\n  {\n    ecma_integer_value_t num = ecma_get_integer_from_value (value);\n\n    if (num < 0)\n    {\n      return ecma_new_ecma_string_from_number ((ecma_number_t) num);\n    }\n    else\n    {\n      return ecma_new_ecma_string_from_uint32 ((uint32_t) num);\n    }\n  }\n\n  if (ecma_is_value_float_number (value))\n  {\n    ecma_number_t num = ecma_get_float_from_value (value);\n    return ecma_new_ecma_string_from_number (num);\n  }\n\n  if (ecma_is_value_undefined (value))\n  {\n    return ecma_get_magic_string (LIT_MAGIC_STRING_UNDEFINED);\n  }\n\n  if (ecma_is_value_null (value))\n  {\n    return ecma_get_magic_string (LIT_MAGIC_STRING_NULL);\n  }\n\n  if (ecma_is_value_true (value))\n  {\n    return ecma_get_magic_string (LIT_MAGIC_STRING_TRUE);\n  }\n\n  if (ecma_is_value_false (value))\n  {\n    return ecma_get_magic_string (LIT_MAGIC_STRING_FALSE);\n  }\n\n#if JERRY_ESNEXT\n  if (ecma_is_value_symbol (value))\n  {\n    ecma_raise_type_error (ECMA_ERR_MSG (\"Cannot convert a Symbol value to a string\"));\n    return NULL;\n  }\n#endif /* JERRY_ESNEXT */\n\n#if JERRY_BUILTIN_BIGINT\n  if (ecma_is_value_bigint (value))\n  {\n    return ecma_bigint_to_string (value, 10);\n  }\n#endif /* JERRY_BUILTIN_BIGINT */\n\n  JERRY_ASSERT (ecma_is_value_object (value));\n\n  ecma_object_t *obj_p = ecma_get_object_from_value (value);\n\n  ecma_value_t def_value = ecma_op_object_default_value (obj_p, ECMA_PREFERRED_TYPE_STRING);\n\n  if (ECMA_IS_VALUE_ERROR (def_value))\n  {\n    return NULL;\n  }\n\n  ecma_string_t *ret_string_p = ecma_op_to_string (def_value);\n\n  ecma_free_value (def_value);\n\n  return ret_string_p;\n}",
        "begin_line": 389,
        "end_line": 472,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-exceptions.ecma_new_standard_error#54",
        "src_path": "jerry-core/ecma/operations/ecma-exceptions.c",
        "class_name": "jerry-core.ecma.operations.ecma-exceptions",
        "signature": "jerry-core.ecma.operations.ecma-exceptions.ecma_new_standard_error (jerry_error_t error_type, /**< native error type */                          ecma_string_t *message_string_p) /**< message string */",
        "snippet": "ecma_object_t *\necma_new_standard_error (jerry_error_t error_type, /**< native error type */\n                         ecma_string_t *message_string_p) /**< message string */\n{\n#if JERRY_BUILTIN_ERRORS\n  ecma_builtin_id_t prototype_id = ECMA_BUILTIN_ID__COUNT;\n\n  switch (error_type)\n  {\n    case JERRY_ERROR_EVAL:\n    {\n      prototype_id = ECMA_BUILTIN_ID_EVAL_ERROR_PROTOTYPE;\n      break;\n    }\n\n    case JERRY_ERROR_RANGE:\n    {\n      prototype_id = ECMA_BUILTIN_ID_RANGE_ERROR_PROTOTYPE;\n      break;\n    }\n\n    case JERRY_ERROR_REFERENCE:\n    {\n      prototype_id = ECMA_BUILTIN_ID_REFERENCE_ERROR_PROTOTYPE;\n      break;\n    }\n\n    case JERRY_ERROR_TYPE:\n    {\n      prototype_id = ECMA_BUILTIN_ID_TYPE_ERROR_PROTOTYPE;\n      break;\n    }\n\n#if JERRY_ESNEXT\n    case JERRY_ERROR_AGGREGATE:\n    {\n      prototype_id = ECMA_BUILTIN_ID_AGGREGATE_ERROR_PROTOTYPE;\n      break;\n    }\n#endif /* JERRY_ESNEXT */\n    case JERRY_ERROR_URI:\n    {\n      prototype_id = ECMA_BUILTIN_ID_URI_ERROR_PROTOTYPE;\n      break;\n    }\n\n    case JERRY_ERROR_SYNTAX:\n    {\n      prototype_id = ECMA_BUILTIN_ID_SYNTAX_ERROR_PROTOTYPE;\n      break;\n    }\n\n    default:\n    {\n      JERRY_ASSERT (error_type == JERRY_ERROR_COMMON);\n\n      prototype_id = ECMA_BUILTIN_ID_ERROR_PROTOTYPE;\n      break;\n    }\n  }\n#else\n  JERRY_UNUSED (error_type);\n  ecma_builtin_id_t prototype_id = ECMA_BUILTIN_ID_ERROR_PROTOTYPE;\n#endif /* JERRY_BUILTIN_ERRORS */\n\n  ecma_object_t *prototype_obj_p = ecma_builtin_get (prototype_id);\n\n  ecma_object_t *error_object_p = ecma_create_object (prototype_obj_p,\n                                                      sizeof (ecma_extended_object_t),\n                                                      ECMA_OBJECT_TYPE_CLASS);\n\n  ecma_extended_object_t *extended_object_p = (ecma_extended_object_t *) error_object_p;\n  extended_object_p->u.cls.type = ECMA_OBJECT_CLASS_ERROR;\n  extended_object_p->u.cls.u1.error_type = (uint8_t) error_type;\n\n  if (message_string_p != NULL)\n  {\n    ecma_property_value_t *prop_value_p;\n    prop_value_p = ecma_create_named_data_property (error_object_p,\n                                                    ecma_get_magic_string (LIT_MAGIC_STRING_MESSAGE),\n                                                    ECMA_PROPERTY_CONFIGURABLE_WRITABLE,\n                                                    NULL);\n\n    ecma_ref_ecma_string (message_string_p);\n    prop_value_p->value = ecma_make_string_value (message_string_p);\n  }\n\n  /* Avoid calling the decorator function recursively. */\n  if (JERRY_CONTEXT (error_object_created_callback_p) != NULL\n      && !(JERRY_CONTEXT (status_flags) & ECMA_STATUS_ERROR_UPDATE))\n  {\n    JERRY_CONTEXT (status_flags) |= ECMA_STATUS_ERROR_UPDATE;\n    JERRY_CONTEXT (error_object_created_callback_p) (ecma_make_object_value (error_object_p),\n                                                     JERRY_CONTEXT (error_object_created_callback_user_p));\n    JERRY_CONTEXT (status_flags) &= (uint32_t) ~ECMA_STATUS_ERROR_UPDATE;\n  }\n  else\n  {\n#if JERRY_LINE_INFO\n    /* Default decorator when line info is enabled. */\n    ecma_string_t *stack_str_p = ecma_get_magic_string (LIT_MAGIC_STRING_STACK);\n\n    ecma_property_value_t *prop_value_p = ecma_create_named_data_property (error_object_p,\n                                                                           stack_str_p,\n                                                                           ECMA_PROPERTY_CONFIGURABLE_WRITABLE,\n                                                                           NULL);\n    ecma_deref_ecma_string (stack_str_p);\n\n    ecma_value_t backtrace_value = vm_get_backtrace (0);\n\n    prop_value_p->value = backtrace_value;\n    ecma_deref_object (ecma_get_object_from_value (backtrace_value));\n#endif /* JERRY_LINE_INFO */\n  }\n\n  return error_object_p;\n}",
        "begin_line": 54,
        "end_line": 170,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-exceptions.ecma_raise_standard_error#301",
        "src_path": "jerry-core/ecma/operations/ecma-exceptions.c",
        "class_name": "jerry-core.ecma.operations.ecma-exceptions",
        "signature": "jerry-core.ecma.operations.ecma-exceptions.ecma_raise_standard_error (jerry_error_t error_type, /**< error type */                            const lit_utf8_byte_t *msg_p) /**< error message */",
        "snippet": "static ecma_value_t\necma_raise_standard_error (jerry_error_t error_type, /**< error type */\n                           const lit_utf8_byte_t *msg_p) /**< error message */\n{\n  ecma_object_t *error_obj_p;\n\n  if (msg_p != NULL)\n  {\n    ecma_string_t *error_msg_p = ecma_new_ecma_string_from_utf8 (msg_p,\n                                                                 lit_zt_utf8_string_size (msg_p));\n    error_obj_p = ecma_new_standard_error (error_type, error_msg_p);\n    ecma_deref_ecma_string (error_msg_p);\n  }\n  else\n  {\n    error_obj_p = ecma_new_standard_error (error_type, NULL);\n  }\n\n  jcontext_raise_exception (ecma_make_object_value (error_obj_p));\n  return ECMA_VALUE_ERROR;\n}",
        "begin_line": 301,
        "end_line": 321,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-exceptions.ecma_raise_type_error#473",
        "src_path": "jerry-core/ecma/operations/ecma-exceptions.c",
        "class_name": "jerry-core.ecma.operations.ecma-exceptions",
        "signature": "jerry-core.ecma.operations.ecma-exceptions.ecma_raise_type_error (const char *msg_p) /**< error message */",
        "snippet": "ecma_value_t\necma_raise_type_error (const char *msg_p) /**< error message */\n{\n  return ecma_raise_standard_error (JERRY_ERROR_TYPE, (const lit_utf8_byte_t *) msg_p);\n}",
        "begin_line": 473,
        "end_line": 477,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_object_check_constructor#140",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_object_check_constructor (ecma_object_t *obj_p) /**< ecma object */",
        "snippet": "char *\necma_object_check_constructor (ecma_object_t *obj_p) /**< ecma object */\n{\n  JERRY_ASSERT (!ecma_is_lexical_environment (obj_p));\n\n  ecma_object_type_t type = ecma_get_object_type (obj_p);\n\n  if (JERRY_UNLIKELY (type < ECMA_OBJECT_TYPE_PROXY))\n  {\n    return ECMA_ERR_MSG (\"Invalid type for constructor call\");\n  }\n\n  while (JERRY_UNLIKELY (type == ECMA_OBJECT_TYPE_BOUND_FUNCTION))\n  {\n    ecma_bound_function_t *bound_func_p = (ecma_bound_function_t *) obj_p;\n\n    obj_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,\n                                                        bound_func_p->header.u.bound_function.target_function);\n\n    type = ecma_get_object_type (obj_p);\n  }\n\n  if (JERRY_LIKELY (type == ECMA_OBJECT_TYPE_FUNCTION))\n  {\n#if JERRY_ESNEXT\n    const ecma_compiled_code_t *byte_code_p = ecma_op_function_get_compiled_code ((ecma_extended_object_t *) obj_p);\n\n    if (!CBC_FUNCTION_IS_CONSTRUCTABLE (byte_code_p->status_flags))\n    {\n#if JERRY_ERROR_MESSAGES\n      switch (CBC_FUNCTION_GET_TYPE (byte_code_p->status_flags))\n      {\n        case CBC_FUNCTION_SCRIPT:\n        {\n          return \"Script (global) functions cannot be invoked with 'new'\";\n        }\n        case CBC_FUNCTION_GENERATOR:\n        {\n          return \"Generator functions cannot be invoked with 'new'\";\n        }\n        case CBC_FUNCTION_ASYNC:\n        {\n          return \"Async functions cannot be invoked with 'new'\";\n        }\n        case CBC_FUNCTION_ASYNC_GENERATOR:\n        {\n          return \"Async generator functions cannot be invoked with 'new'\";\n        }\n        case CBC_FUNCTION_ACCESSOR:\n        {\n          return \"Accessor functions cannot be invoked with 'new'\";\n        }\n        case CBC_FUNCTION_METHOD:\n        {\n          return \"Methods cannot be invoked with 'new'\";\n        }\n        case CBC_FUNCTION_ARROW:\n        {\n          return \"Arrow functions cannot be invoked with 'new'\";\n        }\n        default:\n        {\n          JERRY_ASSERT (CBC_FUNCTION_GET_TYPE (byte_code_p->status_flags) == CBC_FUNCTION_ASYNC_ARROW);\n          return \"Async arrow functions cannot be invoked with 'new'\";\n        }\n      }\n#else /* !JERRY_ERROR_MESSAGES */\n      return NULL;\n#endif /* JERRY_ERROR_MESSAGES */\n    }\n#endif /* JERRY_NEXT */\n\n    return ECMA_IS_VALID_CONSTRUCTOR;\n  }\n\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_TYPE_IS_PROXY (type))\n  {\n    if (!(obj_p->u2.prototype_cp & ECMA_PROXY_IS_CONSTRUCTABLE))\n    {\n      return ECMA_ERR_MSG (\"Proxy target is not a constructor\");\n    }\n\n    return ECMA_IS_VALID_CONSTRUCTOR;\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  JERRY_ASSERT (type == ECMA_OBJECT_TYPE_NATIVE_FUNCTION\n                || type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION\n                || type == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION);\n\n  if (type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION)\n  {\n    if (ecma_builtin_function_is_routine (obj_p))\n    {\n      return ECMA_ERR_MSG (\"Built-in routines have no constructor\");\n    }\n\n#if JERRY_ESNEXT\n    JERRY_ASSERT (((ecma_extended_object_t *) obj_p)->u.built_in.id != ECMA_BUILTIN_ID_HANDLER);\n#endif /* !JERRY_ESNEXT */\n  }\n\n  return ECMA_IS_VALID_CONSTRUCTOR;\n}",
        "begin_line": 140,
        "end_line": 244,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_op_create_external_function_object#667",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_op_create_external_function_object (ecma_native_handler_t handler_cb) /**< pointer to external native handler */",
        "snippet": "ecma_object_t *\necma_op_create_external_function_object (ecma_native_handler_t handler_cb) /**< pointer to external native handler */\n{\n  ecma_object_t *prototype_obj_p = ecma_builtin_get (ECMA_BUILTIN_ID_FUNCTION_PROTOTYPE);\n\n  ecma_object_t *function_obj_p = ecma_create_object (prototype_obj_p,\n                                                      sizeof (ecma_native_function_t),\n                                                      ECMA_OBJECT_TYPE_NATIVE_FUNCTION);\n\n  /*\n   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_NATIVE_FUNCTION type.\n   *\n   * See also: ecma_object_get_class_name\n   */\n\n  ecma_native_function_t *native_function_p = (ecma_native_function_t *) function_obj_p;\n#if JERRY_BUILTIN_REALMS\n  ECMA_SET_INTERNAL_VALUE_POINTER (native_function_p->realm_value,\n                                   ecma_builtin_get_global ());\n#endif /* JERRY_BUILTIN_REALMS */\n  native_function_p->native_handler_cb = handler_cb;\n\n  return function_obj_p;\n}",
        "begin_line": 667,
        "end_line": 690,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_op_create_function_object#349",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_op_create_function_object (ecma_object_t *scope_p, /**< function's scope */                                 const ecma_compiled_code_t *bytecode_data_p, /**< byte-code array */                                 ecma_builtin_id_t proto_id) /**< builtin id of the prototype object */",
        "snippet": "static ecma_object_t *\necma_op_create_function_object (ecma_object_t *scope_p, /**< function's scope */\n                                const ecma_compiled_code_t *bytecode_data_p, /**< byte-code array */\n                                ecma_builtin_id_t proto_id) /**< builtin id of the prototype object */\n{\n  JERRY_ASSERT (ecma_is_lexical_environment (scope_p));\n\n  /* 1., 4., 13. */\n  ecma_object_t *prototype_obj_p = ecma_builtin_get (proto_id);\n\n  size_t function_object_size = sizeof (ecma_extended_object_t);\n\n#if JERRY_SNAPSHOT_EXEC\n  if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)\n  {\n    function_object_size = sizeof (ecma_static_function_t);\n  }\n#endif /* JERRY_SNAPSHOT_EXEC */\n\n  ecma_object_t *func_p = ecma_create_object (prototype_obj_p,\n                                              function_object_size,\n                                              ECMA_OBJECT_TYPE_FUNCTION);\n\n  /* 2., 6., 7., 8. */\n  /*\n   * We don't setup [[Get]], [[Call]], [[Construct]], [[HasInstance]] for each function object.\n   * Instead we set the object's type to ECMA_OBJECT_TYPE_FUNCTION\n   * that defines which version of the routine should be used on demand.\n   */\n\n  /* 3. */\n  /*\n   * [[Class]] property is not stored explicitly for objects of ECMA_OBJECT_TYPE_FUNCTION type.\n   *\n   * See also: ecma_object_get_class_name\n   */\n\n  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_p;\n\n  /* 9. */\n  ECMA_SET_NON_NULL_POINTER_TAG (ext_func_p->u.function.scope_cp, scope_p, 0);\n\n  /* 10., 11., 12. */\n\n#if JERRY_SNAPSHOT_EXEC\n  if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)\n  {\n    ext_func_p->u.function.bytecode_cp = JMEM_CP_NULL;\n    ((ecma_static_function_t *) func_p)->bytecode_p = bytecode_data_p;\n  }\n  else\n#endif /* JERRY_SNAPSHOT_EXEC */\n  {\n    ECMA_SET_INTERNAL_VALUE_POINTER (ext_func_p->u.function.bytecode_cp, bytecode_data_p);\n    ecma_bytecode_ref ((ecma_compiled_code_t *) bytecode_data_p);\n  }\n\n  /* 14., 15., 16., 17., 18. */\n  /*\n   * 'length' and 'prototype' properties are instantiated lazily\n   *\n   * See also: ecma_op_function_try_to_lazy_instantiate_property\n   */\n\n  return func_p;\n}",
        "begin_line": 349,
        "end_line": 414,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_op_function_call#1362",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_op_function_call (ecma_object_t *func_obj_p, /**< Function object */                        ecma_value_t this_arg_value, /**< 'this' argument's value */                        const ecma_value_t *arguments_list_p, /**< arguments list */                        uint32_t arguments_list_len) /**< length of arguments list */",
        "snippet": "ecma_value_t\necma_op_function_call (ecma_object_t *func_obj_p, /**< Function object */\n                       ecma_value_t this_arg_value, /**< 'this' argument's value */\n                       const ecma_value_t *arguments_list_p, /**< arguments list */\n                       uint32_t arguments_list_len) /**< length of arguments list */\n{\n  JERRY_ASSERT (func_obj_p != NULL\n                && !ecma_is_lexical_environment (func_obj_p));\n  JERRY_ASSERT (ecma_op_object_is_callable (func_obj_p));\n\n  ECMA_CHECK_STACK_USAGE ();\n\n  const ecma_object_type_t type = ecma_get_object_type (func_obj_p);\n\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_TYPE_IS_PROXY (type))\n  {\n    return ecma_proxy_object_call (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n#if JERRY_ESNEXT\n  ecma_object_t *old_new_target_p = JERRY_CONTEXT (current_new_target_p);\n  if (JERRY_UNLIKELY (!(JERRY_CONTEXT (status_flags) & ECMA_STATUS_DIRECT_EVAL)))\n  {\n    JERRY_CONTEXT (current_new_target_p) = NULL;\n  }\n#endif /* JERRY_ESNEXT */\n\n  ecma_value_t result;\n\n  if (JERRY_LIKELY (type == ECMA_OBJECT_TYPE_FUNCTION))\n  {\n    result = ecma_op_function_call_simple (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);\n  }\n  else if (type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION)\n  {\n    result = ecma_op_function_call_native_built_in (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);\n  }\n  else if (type == ECMA_OBJECT_TYPE_NATIVE_FUNCTION)\n  {\n    result = ecma_op_function_call_native (func_obj_p, this_arg_value, arguments_list_p, arguments_list_len);\n  }\n#if JERRY_ESNEXT\n  else if (JERRY_UNLIKELY (type == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION))\n  {\n    result = ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_class_constructor_new));\n  }\n#endif /* JERRY_ESNEXT */\n  else\n  {\n    result = ecma_op_function_call_bound (func_obj_p, arguments_list_p, arguments_list_len);\n  }\n\n#if JERRY_ESNEXT\n  JERRY_CONTEXT (current_new_target_p) = old_new_target_p;\n#endif /* JERRY_ESNEXT */\n\n  return result;\n}",
        "begin_line": 1362,
        "end_line": 1421,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_op_function_call_simple#1032",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_op_function_call_simple (ecma_object_t *func_obj_p, /**< Function object */                               ecma_value_t this_arg_value, /**< 'this' argument's value */                               const ecma_value_t *arguments_list_p, /**< arguments list */                               uint32_t arguments_list_len) /**< length of arguments list */",
        "snippet": "static ecma_value_t\necma_op_function_call_simple (ecma_object_t *func_obj_p, /**< Function object */\n                              ecma_value_t this_arg_value, /**< 'this' argument's value */\n                              const ecma_value_t *arguments_list_p, /**< arguments list */\n                              uint32_t arguments_list_len) /**< length of arguments list */\n{\n  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION);\n\n  vm_frame_ctx_shared_args_t shared_args;\n  shared_args.header.status_flags = VM_FRAME_CTX_SHARED_HAS_ARG_LIST;\n  shared_args.header.function_object_p = func_obj_p;\n  shared_args.arg_list_p = arguments_list_p;\n  shared_args.arg_list_len = arguments_list_len;\n\n  /* Entering Function Code (ECMA-262 v5, 10.4.3) */\n  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_obj_p;\n\n  ecma_object_t *scope_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t,\n                                                                       ext_func_p->u.function.scope_cp);\n\n  /* 8. */\n  ecma_value_t this_binding = this_arg_value;\n\n  const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);\n  uint16_t status_flags = bytecode_data_p->status_flags;\n\n  shared_args.header.bytecode_header_p = bytecode_data_p;\n\n#if JERRY_BUILTIN_REALMS\n  ecma_global_object_t *realm_p = ecma_op_function_get_realm (bytecode_data_p);\n#endif /* JERRY_BUILTIN_REALMS */\n\n  /* 1. */\n#if JERRY_ESNEXT\n  if (JERRY_UNLIKELY (CBC_FUNCTION_IS_ARROW (status_flags)))\n  {\n    ecma_arrow_function_t *arrow_func_p = (ecma_arrow_function_t *) func_obj_p;\n\n    if (ecma_is_value_undefined (arrow_func_p->new_target))\n    {\n      JERRY_CONTEXT (current_new_target_p) = NULL;\n    }\n    else\n    {\n      JERRY_CONTEXT (current_new_target_p) = ecma_get_object_from_value (arrow_func_p->new_target);\n    }\n    this_binding = arrow_func_p->this_binding;\n  }\n  else\n  {\n    shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_NON_ARROW_FUNC;\n#endif /* JERRY_ESNEXT */\n\n    if (!(status_flags & CBC_CODE_FLAGS_STRICT_MODE))\n    {\n      if (ecma_is_value_undefined (this_binding)\n          || ecma_is_value_null (this_binding))\n      {\n        /* 2. */\n#if JERRY_BUILTIN_REALMS\n        this_binding = realm_p->this_binding;\n#else /* !JERRY_BUILTIN_REALMS */\n        this_binding = ecma_make_object_value (ecma_builtin_get_global ());\n#endif /* JERRY_BUILTIN_REALMS */\n      }\n      else if (!ecma_is_value_object (this_binding))\n      {\n        /* 3., 4. */\n        this_binding = ecma_op_to_object (this_binding);\n        shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_THIS;\n\n        JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (this_binding));\n      }\n    }\n#if JERRY_ESNEXT\n  }\n#endif /* JERRY_ESNEXT */\n\n  /* 5. */\n  if (!(status_flags & CBC_CODE_FLAGS_LEXICAL_ENV_NOT_NEEDED))\n  {\n    shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV;\n    scope_p = ecma_create_decl_lex_env (scope_p);\n  }\n\n  ecma_value_t ret_value;\n\n#if JERRY_ESNEXT\n  if (JERRY_UNLIKELY (CBC_FUNCTION_GET_TYPE (status_flags) == CBC_FUNCTION_CONSTRUCTOR))\n  {\n    if (JERRY_CONTEXT (current_new_target_p) == NULL)\n    {\n      ret_value = ecma_raise_type_error (ECMA_ERR_MSG (\"Class constructor requires 'new'\"));\n      goto exit;\n    }\n\n    ecma_value_t lexical_this = this_binding;\n\n    if (ECMA_GET_THIRD_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))\n    {\n      shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_HERITAGE_PRESENT;\n      lexical_this = ECMA_VALUE_UNINITIALIZED;\n    }\n\n    ecma_op_create_environment_record (scope_p, lexical_this, func_obj_p);\n  }\n#endif /* JERRY_ESNEXT */\n\n#if JERRY_BUILTIN_REALMS\n  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);\n  JERRY_CONTEXT (global_object_p) = realm_p;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  ret_value = vm_run (&shared_args.header, this_binding, scope_p);\n\n#if JERRY_BUILTIN_REALMS\n  JERRY_CONTEXT (global_object_p) = saved_global_object_p;\n#endif /* JERRY_BUILTIN_REALMS */\n\n#if JERRY_ESNEXT\n  /* ECMAScript v6, 9.2.2.13 */\n  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_HERITAGE_PRESENT))\n  {\n    if (!ECMA_IS_VALUE_ERROR (ret_value) && !ecma_is_value_object (ret_value))\n    {\n      if (!ecma_is_value_undefined (ret_value))\n      {\n        ecma_free_value (ret_value);\n        ret_value = ecma_raise_type_error (ECMA_ERR_MSG (\"Derived constructors may only return object or undefined\"));\n      }\n      else\n      {\n        ret_value = ecma_op_get_this_binding (scope_p);\n      }\n    }\n  }\n\nexit:\n#endif /* JERRY_ESNEXT */\n\n  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV))\n  {\n    ecma_deref_object (scope_p);\n  }\n\n  if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_THIS))\n  {\n    ecma_free_value (this_binding);\n  }\n\n  return ret_value;\n}",
        "begin_line": 1032,
        "end_line": 1183,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_op_function_construct#1698",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_op_function_construct (ecma_object_t *func_obj_p, /**< Function object */                             ecma_object_t *new_target_p, /**< new target */                             const ecma_value_t *arguments_list_p, /**< arguments list */                             uint32_t arguments_list_len) /**< length of arguments list */",
        "snippet": "ecma_value_t\necma_op_function_construct (ecma_object_t *func_obj_p, /**< Function object */\n                            ecma_object_t *new_target_p, /**< new target */\n                            const ecma_value_t *arguments_list_p, /**< arguments list */\n                            uint32_t arguments_list_len) /**< length of arguments list */\n{\n  JERRY_ASSERT (func_obj_p != NULL\n                && !ecma_is_lexical_environment (func_obj_p));\n\n  const ecma_object_type_t type = ecma_get_object_type (func_obj_p);\n\n  if (JERRY_LIKELY (type == ECMA_OBJECT_TYPE_FUNCTION))\n  {\n    return ecma_op_function_construct_simple (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);\n  }\n\n  if (type == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION)\n  {\n    return ecma_op_function_construct_built_in (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);\n  }\n\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_TYPE_IS_PROXY (type))\n  {\n    return ecma_proxy_object_construct (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  if (JERRY_UNLIKELY (type == ECMA_OBJECT_TYPE_BOUND_FUNCTION))\n  {\n    return ecma_op_function_construct_bound (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);\n  }\n\n#if JERRY_ESNEXT\n  if (type == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION)\n  {\n    return ecma_op_function_construct_constructor (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);\n  }\n#endif /* JERRY_ESNEXT */\n\n  JERRY_ASSERT (type == ECMA_OBJECT_TYPE_NATIVE_FUNCTION);\n  return ecma_op_function_construct_native (func_obj_p, new_target_p, arguments_list_p, arguments_list_len);\n}",
        "begin_line": 1698,
        "end_line": 1740,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_op_function_construct_built_in#1502",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_op_function_construct_built_in (ecma_object_t *func_obj_p, /**< Function object */                                      ecma_object_t *new_target_p, /**< new target */                                      const ecma_value_t *arguments_list_p, /**< arguments list */                                      uint32_t arguments_list_len) /**< length of arguments list */",
        "snippet": "static ecma_value_t\necma_op_function_construct_built_in (ecma_object_t *func_obj_p, /**< Function object */\n                                     ecma_object_t *new_target_p, /**< new target */\n                                     const ecma_value_t *arguments_list_p, /**< arguments list */\n                                     uint32_t arguments_list_len) /**< length of arguments list */\n{\n  JERRY_UNUSED (new_target_p);\n\n  JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION);\n\n#if JERRY_BUILTIN_REALMS\n  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);\n  ecma_value_t realm_value = ((ecma_extended_object_t *) func_obj_p)->u.built_in.realm_value;\n  JERRY_CONTEXT (global_object_p) = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_global_object_t, realm_value);\n#endif /* JERRY_BUILTIN_REALMS */\n\n#if JERRY_ESNEXT\n  ecma_object_t *old_new_target = JERRY_CONTEXT (current_new_target_p);\n  JERRY_CONTEXT (current_new_target_p) = new_target_p;\n#endif /* JERRY_ESNEXT */\n\n  ecma_value_t ret_value = ecma_builtin_dispatch_construct (func_obj_p, arguments_list_p, arguments_list_len);\n\n#if JERRY_ESNEXT\n  JERRY_CONTEXT (current_new_target_p) = old_new_target;\n#endif /* JERRY_ESNEXT */\n\n#if JERRY_BUILTIN_REALMS\n  JERRY_CONTEXT (global_object_p) = saved_global_object_p;\n#endif /* JERRY_BUILTIN_REALMS */\n  return ret_value;\n}",
        "begin_line": 1502,
        "end_line": 1533,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_op_get_prototype_from_constructor#978",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_op_get_prototype_from_constructor (ecma_object_t *ctor_obj_p, /**< constructor to get prototype from  */                                         ecma_builtin_id_t default_proto_id) /**< intrinsicDefaultProto */",
        "snippet": "ecma_object_t *\necma_op_get_prototype_from_constructor (ecma_object_t *ctor_obj_p, /**< constructor to get prototype from  */\n                                        ecma_builtin_id_t default_proto_id) /**< intrinsicDefaultProto */\n{\n  JERRY_ASSERT (ecma_op_object_is_callable (ctor_obj_p));\n  JERRY_ASSERT (default_proto_id < ECMA_BUILTIN_ID__COUNT);\n\n  ecma_value_t proto = ecma_op_object_get_by_magic_id (ctor_obj_p, LIT_MAGIC_STRING_PROTOTYPE);\n\n  if (ECMA_IS_VALUE_ERROR (proto))\n  {\n    return NULL;\n  }\n\n  ecma_object_t *proto_obj_p;\n\n  if (!ecma_is_value_object (proto))\n  {\n    ecma_free_value (proto);\n\n#if JERRY_BUILTIN_PROXY\n    if (ECMA_OBJECT_IS_PROXY (ctor_obj_p))\n    {\n      ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) ctor_obj_p;\n      if (ecma_is_value_null (proxy_obj_p->handler))\n      {\n        ecma_raise_type_error (ECMA_ERR_MSG (\"Prototype from revoked Proxy is invalid\"));\n        return NULL;\n      }\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n\n#if JERRY_BUILTIN_REALMS\n    proto_obj_p = ecma_builtin_get_from_realm (ecma_op_function_get_function_realm (ctor_obj_p), default_proto_id);\n#else /* !JERRY_BUILTIN_REALMS */\n    proto_obj_p = ecma_builtin_get (default_proto_id);\n#endif /* JERRY_BUILTIN_REALMS */\n    ecma_ref_object (proto_obj_p);\n  }\n  else\n  {\n    proto_obj_p = ecma_get_object_from_value (proto);\n  }\n\n  return proto_obj_p;\n}",
        "begin_line": 978,
        "end_line": 1023,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-function-object.ecma_op_is_callable#126",
        "src_path": "jerry-core/ecma/operations/ecma-function-object.c",
        "class_name": "jerry-core.ecma.operations.ecma-function-object",
        "signature": "jerry-core.ecma.operations.ecma-function-object.ecma_op_is_callable (ecma_value_t value) /**< ecma value */",
        "snippet": "bool\necma_op_is_callable (ecma_value_t value) /**< ecma value */\n{\n  return (ecma_is_value_object (value)\n          && ecma_op_object_is_callable (ecma_get_object_from_value (value)));\n}",
        "begin_line": 126,
        "end_line": 131,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-get-put-value.ecma_op_put_value_lex_env_base#228",
        "src_path": "jerry-core/ecma/operations/ecma-get-put-value.c",
        "class_name": "jerry-core.ecma.operations.ecma-get-put-value",
        "signature": "jerry-core.ecma.operations.ecma-get-put-value.ecma_op_put_value_lex_env_base (ecma_object_t *lex_env_p, /**< lexical environment */                                 ecma_string_t *name_p, /**< variable name */                                 bool is_strict, /**< flag indicating strict mode */                                 ecma_value_t value) /**< ECMA-value */",
        "snippet": "ecma_value_t\necma_op_put_value_lex_env_base (ecma_object_t *lex_env_p, /**< lexical environment */\n                                ecma_string_t *name_p, /**< variable name */\n                                bool is_strict, /**< flag indicating strict mode */\n                                ecma_value_t value) /**< ECMA-value */\n{\n  JERRY_ASSERT (lex_env_p != NULL\n                && ecma_is_lexical_environment (lex_env_p));\n\n  while (true)\n  {\n    switch (ecma_get_lex_env_type (lex_env_p))\n    {\n#if JERRY_ESNEXT\n      case ECMA_LEXICAL_ENVIRONMENT_CLASS:\n      {\n        if ((lex_env_p->type_flags_refs & ECMA_OBJECT_FLAG_LEXICAL_ENV_HAS_DATA) == 0)\n        {\n          break;\n        }\n        /* FALLTHRU */\n      }\n#endif /* JERRY_ESNEXT */\n      case ECMA_LEXICAL_ENVIRONMENT_DECLARATIVE:\n      {\n        ecma_property_t *property_p = ecma_find_named_property (lex_env_p, name_p);\n\n        if (property_p != NULL)\n        {\n#if JERRY_ESNEXT\n          ecma_property_value_t *property_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n          JERRY_ASSERT (!(*property_p & ECMA_PROPERTY_FLAG_WRITABLE)\n                        || (*property_p & ECMA_PROPERTY_FLAG_DATA));\n\n          if ((*property_p & ECMA_PROPERTY_FLAG_WRITABLE)\n              && property_value_p->value != ECMA_VALUE_UNINITIALIZED)\n          {\n            ecma_named_data_property_assign_value (lex_env_p, property_value_p, value);\n            return ECMA_VALUE_EMPTY;\n          }\n#else /* JERRY_ESNEXT */\n          if (ecma_is_property_writable (*property_p))\n          {\n            ecma_property_value_t *property_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n            ecma_named_data_property_assign_value (lex_env_p, property_value_p, value);\n            return ECMA_VALUE_EMPTY;\n          }\n#endif /* JERRY_ESNEXT */\n\n          return ecma_op_raise_set_binding_error (property_p, is_strict);\n        }\n        break;\n      }\n      default:\n      {\n        JERRY_ASSERT (ecma_get_lex_env_type (lex_env_p) == ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND);\n\n        ecma_object_t *binding_obj_p = ecma_get_lex_env_binding_object (lex_env_p);\n\n        ecma_value_t has_property = ecma_op_object_has_property (binding_obj_p, name_p);\n\n#if JERRY_BUILTIN_PROXY\n        if (ECMA_IS_VALUE_ERROR (has_property))\n        {\n          return has_property;\n        }\n#endif /* JERRY_BUILTIN_PROXY */\n\n        if (ecma_is_value_true (has_property))\n        {\n          ecma_value_t completion = ecma_op_object_put (binding_obj_p,\n                                                        name_p,\n                                                        value,\n                                                        is_strict);\n\n          if (ECMA_IS_VALUE_ERROR (completion))\n          {\n            return completion;\n          }\n\n          JERRY_ASSERT (ecma_is_value_boolean (completion));\n          return ECMA_VALUE_EMPTY;\n        }\n\n        break;\n      }\n    }\n\n    if (lex_env_p->u2.outer_reference_cp == JMEM_CP_NULL)\n    {\n      break;\n    }\n\n    lex_env_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, lex_env_p->u2.outer_reference_cp);\n  }\n\n  JERRY_ASSERT (ecma_get_lex_env_type (lex_env_p) == ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND);\n\n  if (is_strict)\n  {\n#if JERRY_ERROR_MESSAGES\n    return ecma_raise_standard_error_with_format (JERRY_ERROR_REFERENCE,\n                                                  \"% is not defined\",\n                                                  ecma_make_string_value (name_p));\n#else /* !JERRY_ERROR_MESSAGES */\n    return ecma_raise_reference_error (NULL);\n#endif /* JERRY_ERROR_MESSAGES */\n  }\n\n  ecma_value_t completion = ecma_op_object_put (ecma_get_lex_env_binding_object (lex_env_p),\n                                                name_p,\n                                                value,\n                                                false);\n\n  JERRY_ASSERT (ecma_is_value_boolean (completion));\n\n  return ECMA_VALUE_EMPTY;\n}",
        "begin_line": 228,
        "end_line": 346,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-lex-env.ecma_get_global_scope#133",
        "src_path": "jerry-core/ecma/operations/ecma-lex-env.c",
        "class_name": "jerry-core.ecma.operations.ecma-lex-env",
        "signature": "jerry-core.ecma.operations.ecma-lex-env.ecma_get_global_scope (ecma_object_t *global_object_p) /**< global object */",
        "snippet": "ecma_object_t *\necma_get_global_scope (ecma_object_t *global_object_p) /**< global object */\n{\n#if JERRY_ESNEXT\n  JERRY_ASSERT (global_object_p != NULL && ecma_builtin_is_global (global_object_p));\n  return ECMA_GET_NON_NULL_POINTER (ecma_object_t, ((ecma_global_object_t *) global_object_p)->global_scope_cp);\n#else /* !JERRY_ESNEXT */\n  return ecma_get_global_environment (global_object_p);\n#endif /* !JERRY_ESNEXT */\n}",
        "begin_line": 133,
        "end_line": 142,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-lex-env.ecma_init_global_environment#40",
        "src_path": "jerry-core/ecma/operations/ecma-lex-env.c",
        "class_name": "jerry-core.ecma.operations.ecma-lex-env",
        "signature": "jerry-core.ecma.operations.ecma-lex-env.ecma_init_global_environment (void)",
        "snippet": "void\necma_init_global_environment (void)\n{\n  JERRY_CONTEXT (global_object_p) = ecma_builtin_create_global_object ();\n}",
        "begin_line": 40,
        "end_line": 44,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-lex-env.ecma_op_create_mutable_binding#202",
        "src_path": "jerry-core/ecma/operations/ecma-lex-env.c",
        "class_name": "jerry-core.ecma.operations.ecma-lex-env",
        "signature": "jerry-core.ecma.operations.ecma-lex-env.ecma_op_create_mutable_binding (ecma_object_t *lex_env_p, /**< lexical environment */                                 ecma_string_t *name_p, /**< argument N */                                 bool is_deletable) /**< argument D */",
        "snippet": "ecma_property_t *\necma_op_create_mutable_binding (ecma_object_t *lex_env_p, /**< lexical environment */\n                                ecma_string_t *name_p, /**< argument N */\n                                bool is_deletable) /**< argument D */\n{\n  JERRY_ASSERT (lex_env_p != NULL\n                && ecma_is_lexical_environment (lex_env_p));\n  JERRY_ASSERT (name_p != NULL);\n\n  if (ecma_get_lex_env_type (lex_env_p) == ECMA_LEXICAL_ENVIRONMENT_DECLARATIVE)\n  {\n    uint8_t prop_attributes = ECMA_PROPERTY_FLAG_WRITABLE;\n\n    if (is_deletable)\n    {\n      prop_attributes = (uint8_t) (prop_attributes | ECMA_PROPERTY_FLAG_CONFIGURABLE);\n    }\n\n    ecma_property_t *prop_p;\n\n    ecma_create_named_data_property (lex_env_p,\n                                     name_p,\n                                     prop_attributes,\n                                     &prop_p);\n    return prop_p;\n  }\n  else\n  {\n    JERRY_ASSERT (ecma_get_lex_env_type (lex_env_p) == ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND);\n\n    ecma_object_t *binding_obj_p = ecma_get_lex_env_binding_object (lex_env_p);\n\n#if JERRY_BUILTIN_PROXY && JERRY_BUILTIN_REALMS\n    if (ECMA_OBJECT_IS_PROXY (binding_obj_p))\n    {\n      ecma_value_t result = ecma_proxy_object_is_extensible (binding_obj_p);\n\n      if (ECMA_IS_VALUE_ERROR (result))\n      {\n        return ECMA_PROPERTY_POINTER_ERROR;\n      }\n\n      if (result == ECMA_VALUE_FALSE)\n      {\n        return NULL;\n      }\n    }\n    else if (!ecma_op_ordinary_object_is_extensible (binding_obj_p))\n    {\n      return NULL;\n    }\n#else /* !JERRY_BUILTIN_PROXY || !JERRY_BUILTIN_REALMS */\n    if (!ecma_op_ordinary_object_is_extensible (binding_obj_p))\n    {\n      return NULL;\n    }\n#endif /* JERRY_BUILTIN_PROXY && JERRY_BUILTIN_REALMS */\n\n    const uint32_t flags = ECMA_PROPERTY_ENUMERABLE_WRITABLE | JERRY_PROP_SHOULD_THROW;\n\n    ecma_value_t completion = ecma_builtin_helper_def_prop (binding_obj_p,\n                                                            name_p,\n                                                            ECMA_VALUE_UNDEFINED,\n                                                            is_deletable ? flags | ECMA_PROPERTY_FLAG_CONFIGURABLE\n                                                                         : flags);\n\n    if (ECMA_IS_VALUE_ERROR (completion))\n    {\n      return ECMA_PROPERTY_POINTER_ERROR;\n    }\n    else\n    {\n      JERRY_ASSERT (ecma_is_value_boolean (completion));\n    }\n  }\n\n  return NULL;\n}",
        "begin_line": 202,
        "end_line": 279,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-lex-env.ecma_op_has_binding#155",
        "src_path": "jerry-core/ecma/operations/ecma-lex-env.c",
        "class_name": "jerry-core.ecma.operations.ecma-lex-env",
        "signature": "jerry-core.ecma.operations.ecma-lex-env.ecma_op_has_binding (ecma_object_t *lex_env_p, /**< lexical environment */                      ecma_string_t *name_p) /**< argument N */",
        "snippet": "ecma_value_t\necma_op_has_binding (ecma_object_t *lex_env_p, /**< lexical environment */\n                     ecma_string_t *name_p) /**< argument N */\n{\n  JERRY_ASSERT (lex_env_p != NULL\n                && ecma_is_lexical_environment (lex_env_p));\n\n  ecma_lexical_environment_type_t lex_env_type = ecma_get_lex_env_type (lex_env_p);\n\n  switch (lex_env_type)\n  {\n#if JERRY_ESNEXT\n    case ECMA_LEXICAL_ENVIRONMENT_CLASS:\n    {\n      if ((lex_env_p->type_flags_refs & ECMA_OBJECT_FLAG_LEXICAL_ENV_HAS_DATA) == 0)\n      {\n        return ECMA_VALUE_FALSE;\n      }\n      /* FALLTHRU */\n    }\n#endif /* JERRY_ESNEXT */\n    case ECMA_LEXICAL_ENVIRONMENT_DECLARATIVE:\n    {\n      ecma_property_t *property_p = ecma_find_named_property (lex_env_p, name_p);\n\n      return ecma_make_boolean_value (property_p != NULL);\n    }\n    default:\n    {\n      JERRY_ASSERT (lex_env_type == ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND);\n\n      ecma_object_t *binding_obj_p = ecma_get_lex_env_binding_object (lex_env_p);\n\n      return ecma_op_object_has_property (binding_obj_p, name_p);\n    }\n  }\n}",
        "begin_line": 155,
        "end_line": 191,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects-general.ecma_op_general_object_default_value#234",
        "src_path": "jerry-core/ecma/operations/ecma-objects-general.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects-general",
        "signature": "jerry-core.ecma.operations.ecma-objects-general.ecma_op_general_object_default_value (ecma_object_t *obj_p, /**< the object */                                       ecma_preferred_type_hint_t hint) /**< hint on preferred result type */",
        "snippet": "ecma_value_t\necma_op_general_object_default_value (ecma_object_t *obj_p, /**< the object */\n                                      ecma_preferred_type_hint_t hint) /**< hint on preferred result type */\n{\n  JERRY_ASSERT (obj_p != NULL\n                && !ecma_is_lexical_environment (obj_p));\n\n#if JERRY_ESNEXT\n  ecma_value_t obj_value = ecma_make_object_value (obj_p);\n\n  ecma_value_t exotic_to_prim = ecma_op_get_method_by_symbol_id (obj_value,\n                                                                 LIT_GLOBAL_SYMBOL_TO_PRIMITIVE);\n\n  if (ECMA_IS_VALUE_ERROR (exotic_to_prim))\n  {\n    return exotic_to_prim;\n  }\n\n  if (!ecma_is_value_undefined (exotic_to_prim))\n  {\n    ecma_object_t *call_func_p = ecma_get_object_from_value (exotic_to_prim);\n    ecma_value_t argument = ecma_make_magic_string_value (hints[hint]);\n\n    ecma_value_t result = ecma_op_function_call (call_func_p,\n                                                 obj_value,\n                                                 &argument,\n                                                 1);\n\n    ecma_free_value (exotic_to_prim);\n\n    if (ECMA_IS_VALUE_ERROR (result)\n        || !ecma_is_value_object (result))\n    {\n      return result;\n    }\n\n    ecma_free_value (result);\n\n    return ecma_raise_type_error (ECMA_ERR_MSG (\"Result of [[DefaultValue]] is invalid\"));\n  }\n\n  ecma_free_value (exotic_to_prim);\n\n  if (hint == ECMA_PREFERRED_TYPE_NO)\n  {\n    hint = ECMA_PREFERRED_TYPE_NUMBER;\n  }\n#else /* !JERRY_ESNEXT */\n  if (hint == ECMA_PREFERRED_TYPE_NO)\n  {\n    hint = ECMA_PREFERRED_TYPE_NUMBER;\n\n#if JERRY_BUILTIN_DATE\n    if (ecma_object_class_is (obj_p, ECMA_OBJECT_CLASS_DATE))\n    {\n      hint = ECMA_PREFERRED_TYPE_STRING;\n    }\n#endif /* JERRY_BUILTIN_DATE */\n  }\n#endif /* JERRY_ESNEXT */\n\n  return ecma_op_general_object_ordinary_value (obj_p, hint);\n}",
        "begin_line": 234,
        "end_line": 296,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects-general.ecma_op_general_object_define_own_property#371",
        "src_path": "jerry-core/ecma/operations/ecma-objects-general.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects-general",
        "signature": "jerry-core.ecma.operations.ecma-objects-general.ecma_op_general_object_define_own_property (ecma_object_t *object_p, /**< the object */                                             ecma_string_t *property_name_p, /**< property name */                                             const ecma_property_descriptor_t *property_desc_p) /**< property                                                                                                 *   descriptor */",
        "snippet": "ecma_value_t\necma_op_general_object_define_own_property (ecma_object_t *object_p, /**< the object */\n                                            ecma_string_t *property_name_p, /**< property name */\n                                            const ecma_property_descriptor_t *property_desc_p) /**< property\n                                                                                                *   descriptor */\n{\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_IS_PROXY (object_p))\n  {\n    return ecma_proxy_object_define_own_property (object_p, property_name_p, property_desc_p);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  JERRY_ASSERT (object_p != NULL\n                && !ecma_is_lexical_environment (object_p));\n  JERRY_ASSERT (!ecma_op_object_is_fast_array (object_p));\n  JERRY_ASSERT (property_name_p != NULL);\n\n  uint8_t property_desc_type = ECMA_OP_OBJECT_DEFINE_GENERIC;\n\n  if (property_desc_p->flags & (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE_DEFINED))\n  {\n    /* A property descriptor cannot be both named data and named accessor. */\n    JERRY_ASSERT ((property_desc_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED))\n                   != (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED));\n    property_desc_type = ECMA_OP_OBJECT_DEFINE_DATA;\n  }\n  else if (property_desc_p->flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED))\n  {\n    JERRY_ASSERT (!(property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED));\n    property_desc_type = ECMA_OP_OBJECT_DEFINE_ACCESSOR;\n  }\n\n  /* These three asserts ensures that a new property is created with the appropriate default flags.\n   * E.g. if JERRY_PROP_IS_CONFIGURABLE_DEFINED is false, the newly created property must be non-configurable. */\n  JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED)\n                || !(property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE));\n  JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)\n                || !(property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE));\n  JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED)\n                || !(property_desc_p->flags & JERRY_PROP_IS_WRITABLE));\n\n  /* 1. */\n  ecma_extended_property_ref_t ext_property_ref = { .property_ref.value_p = NULL, .property_p = NULL };\n  ecma_property_t current_prop;\n\n  current_prop = ecma_op_object_get_own_property (object_p,\n                                                  property_name_p,\n                                                  &ext_property_ref.property_ref,\n                                                  ECMA_PROPERTY_GET_VALUE | ECMA_PROPERTY_GET_EXT_REFERENCE);\n\n  if (current_prop == ECMA_PROPERTY_TYPE_NOT_FOUND || current_prop == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP)\n  {\n    /* 3. */\n    if (!ecma_op_ordinary_object_is_extensible (object_p))\n    {\n      /* 2. */\n      return ECMA_REJECT_WITH_FORMAT (property_desc_p->flags & JERRY_PROP_SHOULD_THROW,\n                                      \"Cannot define property '%', object is not extensible\",\n                                      ecma_make_prop_name_value (property_name_p));\n    }\n\n    /* 4. */\n    uint8_t prop_attributes = (uint8_t) (property_desc_p->flags & ECMA_PROPERTY_FLAGS_MASK);\n\n    if (property_desc_type != ECMA_OP_OBJECT_DEFINE_ACCESSOR)\n    {\n      /* a. */\n      JERRY_ASSERT (property_desc_type == ECMA_OP_OBJECT_DEFINE_GENERIC\n                    || property_desc_type == ECMA_OP_OBJECT_DEFINE_DATA);\n\n      ecma_property_value_t *new_prop_value_p = ecma_create_named_data_property (object_p,\n                                                                                 property_name_p,\n                                                                                 prop_attributes,\n                                                                                 NULL);\n\n      JERRY_ASSERT ((property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)\n                    || ecma_is_value_undefined (property_desc_p->value));\n\n      new_prop_value_p->value = ecma_copy_value_if_not_object (property_desc_p->value);\n    }\n    else\n    {\n      /* b. */\n      ecma_create_named_accessor_property (object_p,\n                                           property_name_p,\n                                           property_desc_p->get_p,\n                                           property_desc_p->set_p,\n                                           prop_attributes,\n                                           NULL);\n    }\n\n    return ECMA_VALUE_TRUE;\n  }\n\n  /* 6. */\n  const bool is_current_configurable = ecma_is_property_configurable (current_prop);\n\n  /* 7. a., b. */\n  bool is_enumerable = (property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE) != 0;\n  if (!is_current_configurable\n      && ((property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE)\n          || ((property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)\n              && (is_enumerable != ecma_is_property_enumerable (current_prop)))))\n  {\n    if (ECMA_PROPERTY_IS_VIRTUAL (current_prop))\n    {\n      ecma_free_value (ext_property_ref.property_ref.virtual_value);\n    }\n\n    return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);\n  }\n\n  if (ECMA_PROPERTY_IS_VIRTUAL (current_prop))\n  {\n    bool writable_check_failed = (property_desc_p->flags & JERRY_PROP_IS_WRITABLE);\n\n#if JERRY_MODULE_SYSTEM\n    if (ecma_object_class_is (object_p, ECMA_OBJECT_CLASS_MODULE_NAMESPACE))\n    {\n      if (JERRY_UNLIKELY (ext_property_ref.property_ref.virtual_value == ECMA_VALUE_UNINITIALIZED))\n      {\n        return ecma_raise_reference_error (ECMA_ERR_MSG (ecma_error_let_const_not_initialized));\n      }\n\n      if (property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED)\n      {\n        writable_check_failed = ((property_desc_p->flags ^ current_prop) & JERRY_PROP_IS_WRITABLE) != 0;\n      }\n    }\n    else\n    {\n      JERRY_ASSERT (!is_current_configurable && !ecma_is_property_writable (current_prop));\n    }\n#else /* !JERRY_MODULE_SYSTEM */\n    JERRY_ASSERT (!is_current_configurable && !ecma_is_property_writable (current_prop));\n#endif /* JERRY_MODULE_SYSTEM */\n\n    ecma_value_t result = ECMA_VALUE_TRUE;\n\n    if (property_desc_type == ECMA_OP_OBJECT_DEFINE_ACCESSOR\n        || writable_check_failed\n        || ((property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)\n            && !ecma_op_same_value (property_desc_p->value,\n                                    ext_property_ref.property_ref.virtual_value)))\n    {\n      result = ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);\n    }\n\n    ecma_free_value (ext_property_ref.property_ref.virtual_value);\n    return result;\n  }\n\n  /* 8. */\n  if (property_desc_type == ECMA_OP_OBJECT_DEFINE_GENERIC)\n  {\n    /* No action required. */\n  }\n  else if (JERRY_LIKELY (property_desc_type == (current_prop & ECMA_PROPERTY_FLAG_DATA)))\n  {\n    /* If property is configurable, there is no need for checks. */\n    if (JERRY_UNLIKELY (!is_current_configurable))\n    {\n      if (property_desc_type == ECMA_OP_OBJECT_DEFINE_DATA)\n      {\n        /* 10. a. i. & ii. */\n        if (!ecma_is_property_writable (current_prop)\n            && ((property_desc_p->flags & JERRY_PROP_IS_WRITABLE)\n                || ((property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)\n                    && !ecma_op_same_value (property_desc_p->value,\n                                            ext_property_ref.property_ref.value_p->value))))\n        {\n          return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);\n        }\n      }\n      else\n      {\n        /* 11. */\n\n        /* a. */\n        ecma_property_value_t *value_p = ext_property_ref.property_ref.value_p;\n\n        ecma_getter_setter_pointers_t *get_set_pair_p = ecma_get_named_accessor_property (value_p);\n        jmem_cpointer_t prop_desc_getter_cp, prop_desc_setter_cp;\n        ECMA_SET_POINTER (prop_desc_getter_cp, property_desc_p->get_p);\n        ECMA_SET_POINTER (prop_desc_setter_cp, property_desc_p->set_p);\n\n        if (((property_desc_p->flags & JERRY_PROP_IS_GET_DEFINED)\n             && prop_desc_getter_cp != get_set_pair_p->getter_cp)\n            || ((property_desc_p->flags & JERRY_PROP_IS_SET_DEFINED)\n                && prop_desc_setter_cp != get_set_pair_p->setter_cp))\n        {\n          /* i., ii. */\n          return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);\n        }\n      }\n    }\n  }\n  else\n  {\n    /* 9. */\n    if (!is_current_configurable)\n    {\n      /* a. */\n      return ecma_raise_property_redefinition (property_name_p, property_desc_p->flags);\n    }\n\n    ecma_property_value_t *value_p = ext_property_ref.property_ref.value_p;\n\n    if (property_desc_type == ECMA_OP_OBJECT_DEFINE_ACCESSOR)\n    {\n      JERRY_ASSERT (current_prop & ECMA_PROPERTY_FLAG_DATA);\n      ecma_free_value_if_not_object (value_p->value);\n\n#if JERRY_CPOINTER_32_BIT\n      ecma_getter_setter_pointers_t *getter_setter_pair_p;\n      getter_setter_pair_p = jmem_pools_alloc (sizeof (ecma_getter_setter_pointers_t));\n      getter_setter_pair_p->getter_cp = JMEM_CP_NULL;\n      getter_setter_pair_p->setter_cp = JMEM_CP_NULL;\n      ECMA_SET_NON_NULL_POINTER (value_p->getter_setter_pair_cp, getter_setter_pair_p);\n#else /* !JERRY_CPOINTER_32_BIT */\n      value_p->getter_setter_pair.getter_cp = JMEM_CP_NULL;\n      value_p->getter_setter_pair.setter_cp = JMEM_CP_NULL;\n#endif /* JERRY_CPOINTER_32_BIT */\n    }\n    else\n    {\n      JERRY_ASSERT (!(current_prop & ECMA_PROPERTY_FLAG_DATA));\n#if JERRY_CPOINTER_32_BIT\n      ecma_getter_setter_pointers_t *getter_setter_pair_p;\n      getter_setter_pair_p = ECMA_GET_NON_NULL_POINTER (ecma_getter_setter_pointers_t,\n                                                        value_p->getter_setter_pair_cp);\n      jmem_pools_free (getter_setter_pair_p, sizeof (ecma_getter_setter_pointers_t));\n#endif /* JERRY_CPOINTER_32_BIT */\n      value_p->value = ECMA_VALUE_UNDEFINED;\n    }\n\n    /* Update flags */\n    ecma_property_t prop_flags = *(ext_property_ref.property_p);\n    prop_flags = (ecma_property_t) (prop_flags & ~ECMA_PROPERTY_FLAG_WRITABLE);\n    prop_flags ^= ECMA_PROPERTY_FLAG_DATA;\n    *(ext_property_ref.property_p) = prop_flags;\n  }\n\n  /* 12. */\n  if (property_desc_type == ECMA_OP_OBJECT_DEFINE_DATA)\n  {\n    JERRY_ASSERT (ECMA_PROPERTY_IS_RAW_DATA (*ext_property_ref.property_p));\n\n    if (property_desc_p->flags & JERRY_PROP_IS_VALUE_DEFINED)\n    {\n      ecma_named_data_property_assign_value (object_p,\n                                             ext_property_ref.property_ref.value_p,\n                                             property_desc_p->value);\n    }\n\n    if (property_desc_p->flags & JERRY_PROP_IS_WRITABLE_DEFINED)\n    {\n      ecma_set_property_writable_attr (ext_property_ref.property_p, (property_desc_p->flags & JERRY_PROP_IS_WRITABLE));\n    }\n  }\n  else if (property_desc_type == ECMA_OP_OBJECT_DEFINE_ACCESSOR)\n  {\n    JERRY_ASSERT (!(*ext_property_ref.property_p & ECMA_PROPERTY_FLAG_DATA));\n\n    if (property_desc_p->flags & JERRY_PROP_IS_GET_DEFINED)\n    {\n      ecma_set_named_accessor_property_getter (object_p,\n                                               ext_property_ref.property_ref.value_p,\n                                               property_desc_p->get_p);\n    }\n\n    if (property_desc_p->flags & JERRY_PROP_IS_SET_DEFINED)\n    {\n      ecma_set_named_accessor_property_setter (object_p,\n                                               ext_property_ref.property_ref.value_p,\n                                               property_desc_p->set_p);\n    }\n  }\n\n  if (property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE_DEFINED)\n  {\n    ecma_set_property_enumerable_attr (ext_property_ref.property_p,\n                                       (property_desc_p->flags & JERRY_PROP_IS_ENUMERABLE));\n  }\n\n  if (property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE_DEFINED)\n  {\n    ecma_set_property_configurable_attr (ext_property_ref.property_p,\n                                         (property_desc_p->flags & JERRY_PROP_IS_CONFIGURABLE));\n  }\n\n  return ECMA_VALUE_TRUE;\n}",
        "begin_line": 371,
        "end_line": 664,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects-general.ecma_op_general_object_ordinary_value#307",
        "src_path": "jerry-core/ecma/operations/ecma-objects-general.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects-general",
        "signature": "jerry-core.ecma.operations.ecma-objects-general.ecma_op_general_object_ordinary_value (ecma_object_t *obj_p, /**< the object */                                        ecma_preferred_type_hint_t hint) /**< hint on preferred result type */",
        "snippet": "ecma_value_t\necma_op_general_object_ordinary_value (ecma_object_t *obj_p, /**< the object */\n                                       ecma_preferred_type_hint_t hint) /**< hint on preferred result type */\n{\n  const lit_magic_string_id_t *function_name_ids_p = (hint == ECMA_PREFERRED_TYPE_STRING\n                                                      ? to_primitive_string_hint_method_names\n                                                      : to_primitive_non_string_hint_method_names);\n\n  for (uint32_t i = 0; i < 2; i++)\n  {\n    ecma_value_t function_value = ecma_op_object_get_by_magic_id (obj_p, function_name_ids_p[i]);\n\n    if (ECMA_IS_VALUE_ERROR (function_value))\n    {\n      return function_value;\n    }\n\n    ecma_value_t call_completion = ECMA_VALUE_EMPTY;\n\n    if (ecma_op_is_callable (function_value))\n    {\n      ecma_object_t *func_obj_p = ecma_get_object_from_value (function_value);\n\n      call_completion = ecma_op_function_call (func_obj_p,\n                                               ecma_make_object_value (obj_p),\n                                               NULL,\n                                               0);\n    }\n\n    ecma_free_value (function_value);\n\n    if (ECMA_IS_VALUE_ERROR (call_completion)\n        || (!ecma_is_value_empty (call_completion)\n           && !ecma_is_value_object (call_completion)))\n    {\n      return call_completion;\n    }\n\n    ecma_free_value (call_completion);\n  }\n\n  return ecma_raise_type_error (ECMA_ERR_MSG (\"Result of [[DefaultValue]] is invalid\"));\n}",
        "begin_line": 307,
        "end_line": 349,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_object_check_class_name_is_object#2837",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_object_check_class_name_is_object (ecma_object_t *obj_p) /**< object */",
        "snippet": "static inline bool\necma_object_check_class_name_is_object (ecma_object_t *obj_p) /**< object */\n{\n#ifndef JERRY_NDEBUG\n  return (ecma_builtin_is_global (obj_p)\n#if JERRY_BUILTIN_TYPEDARRAY\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_ARRAYBUFFER_PROTOTYPE)\n#if JERRY_BUILTIN_SHAREDARRAYBUFFER\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_SHARED_ARRAYBUFFER_PROTOTYPE)\n#endif /* JERRY_BUILTIN_SHAREDARRAYBUFFER */\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_TYPEDARRAY_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_INT8ARRAY_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_UINT8ARRAY_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_INT16ARRAY_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_UINT16ARRAY_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_INT32ARRAY_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_UINT32ARRAY_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_FLOAT32ARRAY_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_UINT8CLAMPEDARRAY_PROTOTYPE)\n#if JERRY_NUMBER_TYPE_FLOAT64\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_FLOAT64ARRAY_PROTOTYPE)\n#endif /* JERRY_NUMBER_TYPE_FLOAT64 */\n#if JERRY_BUILTIN_BIGINT\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_BIGINT64ARRAY_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_BIGUINT64ARRAY_PROTOTYPE)\n#endif /* JERRY_BUILTIN_BIGINT */\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n#if JERRY_ESNEXT\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_ARRAY_PROTOTYPE_UNSCOPABLES)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_ARRAY_ITERATOR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_ITERATOR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_STRING_ITERATOR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_REGEXP_STRING_ITERATOR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_EVAL_ERROR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_RANGE_ERROR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_REFERENCE_ERROR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_SYNTAX_ERROR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_GENERATOR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_TYPE_ERROR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_AGGREGATE_ERROR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_URI_ERROR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_ERROR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_DATE_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_REGEXP_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_SYMBOL_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_ASYNC_FUNCTION_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_PROMISE_PROTOTYPE)\n#endif /* JERRY_ESNEXT */\n#if JERRY_BUILTIN_CONTAINER\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_MAP_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_SET_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_WEAKMAP_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_WEAKSET_PROTOTYPE)\n#if JERRY_ESNEXT\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_MAP_ITERATOR_PROTOTYPE)\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_SET_ITERATOR_PROTOTYPE)\n#endif /* JERRY_ESNEXT */\n#endif /* JERRY_BUILTIN_CONTAINER */\n#if JERRY_BUILTIN_WEAKREF\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_WEAKREF_PROTOTYPE)\n#endif /* JERRY_BUILTIN_WEAKREF */\n#if JERRY_BUILTIN_DATAVIEW\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_DATAVIEW_PROTOTYPE)\n#endif /* JERRY_BUILTIN_DATAVIEW */\n          || ecma_builtin_is (obj_p, ECMA_BUILTIN_ID_OBJECT_PROTOTYPE));\n#else /* JERRY_NDEBUG */\n  JERRY_UNUSED (obj_p);\n  return true;\n#endif /* !JERRY_NDEBUG */\n}",
        "begin_line": 2837,
        "end_line": 2906,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_object_get_class_name#2989",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_object_get_class_name (ecma_object_t *obj_p) /**< object */",
        "snippet": "lit_magic_string_id_t\necma_object_get_class_name (ecma_object_t *obj_p) /**< object */\n{\n  ecma_object_type_t type = ecma_get_object_type (obj_p);\n\n  switch (type)\n  {\n    case ECMA_OBJECT_TYPE_ARRAY:\n    case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:\n    {\n      return LIT_MAGIC_STRING_ARRAY_UL;\n    }\n    case ECMA_OBJECT_TYPE_CLASS:\n    case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      switch (ext_object_p->u.cls.type)\n      {\n#if JERRY_BUILTIN_TYPEDARRAY\n        case ECMA_OBJECT_CLASS_TYPEDARRAY:\n        {\n          return ecma_get_typedarray_magic_string_id (ext_object_p->u.cls.u1.typedarray_type);\n        }\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n#if JERRY_BUILTIN_CONTAINER\n        case ECMA_OBJECT_CLASS_CONTAINER:\n        {\n          return (lit_magic_string_id_t) ext_object_p->u.cls.u2.container_id;\n        }\n#endif /* JERRY_BUILTIN_CONTAINER */\n        default:\n        {\n          break;\n        }\n      }\n\n      JERRY_ASSERT (ext_object_p->u.cls.type < ECMA_OBJECT_CLASS__MAX);\n      JERRY_ASSERT (ecma_class_object_magic_string_id[ext_object_p->u.cls.type] != LIT_MAGIC_STRING__EMPTY);\n\n      return (lit_magic_string_id_t) ecma_class_object_magic_string_id[ext_object_p->u.cls.type];\n    }\n    case ECMA_OBJECT_TYPE_FUNCTION:\n    case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:\n    case ECMA_OBJECT_TYPE_BOUND_FUNCTION:\n    case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:\n    {\n      return LIT_MAGIC_STRING_FUNCTION_UL;\n    }\n#if JERRY_BUILTIN_PROXY\n    case ECMA_OBJECT_TYPE_PROXY:\n    {\n      ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;\n\n      if (!ecma_is_value_null (proxy_obj_p->target) && ecma_is_value_object (proxy_obj_p->target))\n      {\n        ecma_object_t *target_obj_p = ecma_get_object_from_value (proxy_obj_p->target);\n        return ecma_object_get_class_name (target_obj_p);\n      }\n      return LIT_MAGIC_STRING_OBJECT_UL;\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n    case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:\n    {\n      ecma_extended_object_t *ext_obj_p = (ecma_extended_object_t *) obj_p;\n\n      switch (ext_obj_p->u.built_in.id)\n      {\n#if JERRY_BUILTIN_MATH\n        case ECMA_BUILTIN_ID_MATH:\n        {\n          return LIT_MAGIC_STRING_MATH_UL;\n        }\n#endif /* JERRY_BUILTIN_MATH */\n#if JERRY_BUILTIN_REFLECT\n        case ECMA_BUILTIN_ID_REFLECT:\n        {\n          return LIT_MAGIC_STRING_REFLECT_UL;\n        }\n#endif /* JERRY_BUILTIN_REFLECT */\n#if JERRY_ESNEXT\n        case ECMA_BUILTIN_ID_GENERATOR:\n        {\n          return LIT_MAGIC_STRING_GENERATOR_UL;\n        }\n        case ECMA_BUILTIN_ID_ASYNC_GENERATOR:\n        {\n          return LIT_MAGIC_STRING_ASYNC_GENERATOR_UL;\n        }\n#endif /* JERRY_ESNEXT */\n#if JERRY_BUILTIN_JSON\n        case ECMA_BUILTIN_ID_JSON:\n        {\n          return LIT_MAGIC_STRING_JSON_U;\n        }\n#endif /* JERRY_BUILTIN_JSON */\n#if !JERRY_ESNEXT\n#if JERRY_BUILTIN_ERRORS\n        case ECMA_BUILTIN_ID_EVAL_ERROR_PROTOTYPE:\n        case ECMA_BUILTIN_ID_RANGE_ERROR_PROTOTYPE:\n        case ECMA_BUILTIN_ID_REFERENCE_ERROR_PROTOTYPE:\n        case ECMA_BUILTIN_ID_SYNTAX_ERROR_PROTOTYPE:\n        case ECMA_BUILTIN_ID_TYPE_ERROR_PROTOTYPE:\n        case ECMA_BUILTIN_ID_URI_ERROR_PROTOTYPE:\n#endif /* JERRY_BUILTIN_ERRORS */\n        case ECMA_BUILTIN_ID_ERROR_PROTOTYPE:\n        {\n          return LIT_MAGIC_STRING_ERROR_UL;\n        }\n#endif /* !JERRY_ESNEXT */\n        default:\n        {\n          break;\n        }\n      }\n\n      JERRY_ASSERT (ecma_object_check_class_name_is_object (obj_p));\n      return LIT_MAGIC_STRING_OBJECT_UL;\n    }\n    default:\n    {\n      JERRY_ASSERT (type == ECMA_OBJECT_TYPE_GENERAL\n                    || type == ECMA_OBJECT_TYPE_PROXY);\n\n      return LIT_MAGIC_STRING_OBJECT_UL;\n    }\n  }\n}",
        "begin_line": 2989,
        "end_line": 3116,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_object_list_lazy_property_names#2278",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_object_list_lazy_property_names (ecma_object_t *obj_p, /**< object */                                       ecma_collection_t *prop_names_p, /**< prop name collection */                                       ecma_property_counter_t *prop_counter_p, /**< property counters */                                       jerry_property_filter_t filter) /**< property name filter options */",
        "snippet": "static void\necma_object_list_lazy_property_names (ecma_object_t *obj_p, /**< object */\n                                      ecma_collection_t *prop_names_p, /**< prop name collection */\n                                      ecma_property_counter_t *prop_counter_p, /**< property counters */\n                                      jerry_property_filter_t filter) /**< property name filter options */\n{\n  switch (ecma_get_object_type (obj_p))\n  {\n    case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:\n    {\n      if (ecma_builtin_function_is_routine (obj_p))\n      {\n        ecma_builtin_routine_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);\n        break;\n      }\n      /* FALLTHRU */\n    }\n    case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:\n    case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:\n    case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:\n    {\n      ecma_builtin_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);\n      break;\n    }\n    case ECMA_OBJECT_TYPE_CLASS:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      switch (ext_object_p->u.cls.type)\n      {\n        case ECMA_OBJECT_CLASS_STRING:\n        {\n          ecma_op_string_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);\n          break;\n        }\n        case ECMA_OBJECT_CLASS_ARGUMENTS:\n        {\n          ecma_op_arguments_object_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);\n          break;\n        }\n#if JERRY_BUILTIN_TYPEDARRAY\n        /* ES2015 9.4.5.1 */\n        case ECMA_OBJECT_CLASS_TYPEDARRAY:\n        {\n          ecma_op_typedarray_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);\n          break;\n        }\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n      }\n      break;\n    }\n    case ECMA_OBJECT_TYPE_FUNCTION:\n    {\n      ecma_op_function_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);\n      break;\n    }\n    case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:\n    {\n      ecma_op_external_function_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);\n      break;\n    }\n    case ECMA_OBJECT_TYPE_BOUND_FUNCTION:\n    {\n      ecma_op_bound_function_list_lazy_property_names (obj_p, prop_names_p, prop_counter_p, filter);\n      break;\n    }\n    case ECMA_OBJECT_TYPE_ARRAY:\n    {\n      if (!(filter & JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS))\n      {\n        ecma_collection_push_back (prop_names_p, ecma_make_magic_string_value (LIT_MAGIC_STRING_LENGTH));\n        prop_counter_p->string_named_props++;\n      }\n      break;\n    }\n    default:\n    {\n      JERRY_ASSERT (ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_GENERAL\n                    || ecma_get_object_type (obj_p) == ECMA_OBJECT_TYPE_CONSTRUCTOR_FUNCTION);\n      break;\n    }\n  }\n}",
        "begin_line": 2278,
        "end_line": 2360,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_default_value#1838",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_default_value (ecma_object_t *obj_p, /**< the object */                               ecma_preferred_type_hint_t hint) /**< hint on preferred result type */",
        "snippet": "ecma_value_t\necma_op_object_default_value (ecma_object_t *obj_p, /**< the object */\n                              ecma_preferred_type_hint_t hint) /**< hint on preferred result type */\n{\n  JERRY_ASSERT (obj_p != NULL\n                && !ecma_is_lexical_environment (obj_p));\n\n  JERRY_ASSERT_OBJECT_TYPE_IS_VALID (ecma_get_object_type (obj_p));\n\n  /*\n   * typedef ecma_property_t * (*default_value_ptr_t) (ecma_object_t *, ecma_string_t *);\n   * static const default_value_ptr_t default_value [ECMA_OBJECT_TYPE__COUNT] =\n   * {\n   *   [ECMA_OBJECT_TYPE_GENERAL]           = &ecma_op_general_object_default_value,\n   *   [ECMA_OBJECT_TYPE_CLASS]             = &ecma_op_general_object_default_value,\n   *   [ECMA_OBJECT_TYPE_FUNCTION]          = &ecma_op_general_object_default_value,\n   *   [ECMA_OBJECT_TYPE_NATIVE_FUNCTION]   = &ecma_op_general_object_default_value,\n   *   [ECMA_OBJECT_TYPE_ARRAY]             = &ecma_op_general_object_default_value,\n   *   [ECMA_OBJECT_TYPE_BOUND_FUNCTION]    = &ecma_op_general_object_default_value,\n   *   [ECMA_OBJECT_TYPE_PSEUDO_ARRAY]      = &ecma_op_general_object_default_value\n   * };\n   *\n   * return default_value[type] (obj_p, property_name_p);\n   */\n\n  return ecma_op_general_object_default_value (obj_p, hint);\n}",
        "begin_line": 1838,
        "end_line": 1864,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_define_own_property#1875",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_define_own_property (ecma_object_t *obj_p, /**< the object */                                     ecma_string_t *property_name_p, /**< property name */                                     const ecma_property_descriptor_t *property_desc_p) /**< property                                                                                         *   descriptor */",
        "snippet": "ecma_value_t\necma_op_object_define_own_property (ecma_object_t *obj_p, /**< the object */\n                                    ecma_string_t *property_name_p, /**< property name */\n                                    const ecma_property_descriptor_t *property_desc_p) /**< property\n                                                                                        *   descriptor */\n{\n  JERRY_ASSERT (obj_p != NULL\n                && !ecma_is_lexical_environment (obj_p));\n  JERRY_ASSERT (property_name_p != NULL);\n\n  const ecma_object_type_t type = ecma_get_object_type (obj_p);\n\n  switch (type)\n  {\n    case ECMA_OBJECT_TYPE_CLASS:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) obj_p;\n\n      switch (ext_object_p->u.cls.type)\n      {\n        case ECMA_OBJECT_CLASS_ARGUMENTS:\n        {\n          return ecma_op_arguments_object_define_own_property (obj_p, property_name_p, property_desc_p);\n        }\n#if JERRY_BUILTIN_TYPEDARRAY\n        /* ES2015 9.4.5.1 */\n        case ECMA_OBJECT_CLASS_TYPEDARRAY:\n        {\n          return ecma_op_typedarray_define_own_property (obj_p, property_name_p, property_desc_p);\n        }\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n      }\n      break;\n    }\n    case ECMA_OBJECT_TYPE_ARRAY:\n    case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:\n    {\n      return ecma_op_array_object_define_own_property (obj_p, property_name_p, property_desc_p);\n    }\n#if JERRY_BUILTIN_PROXY\n    case ECMA_OBJECT_TYPE_PROXY:\n    {\n      return ecma_proxy_object_define_own_property (obj_p, property_name_p, property_desc_p);\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n    default:\n    {\n      break;\n    }\n  }\n\n  return ecma_op_general_object_define_own_property (obj_p, property_name_p, property_desc_p);\n}",
        "begin_line": 1875,
        "end_line": 1927,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_enumerate#2691",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_enumerate (ecma_object_t *obj_p) /**< object */",
        "snippet": "ecma_collection_t *\necma_op_object_enumerate (ecma_object_t *obj_p) /**< object */\n{\n  ecma_collection_t *visited_names_p = ecma_new_collection ();\n  ecma_collection_t *return_names_p = ecma_new_collection ();\n\n  ecma_ref_object (obj_p);\n\n  while (true)\n  {\n    ecma_collection_t *keys = ecma_op_object_own_property_keys (obj_p, JERRY_PROPERTY_FILTER_EXLCUDE_SYMBOLS);\n\n#if JERRY_ESNEXT\n    if (JERRY_UNLIKELY (keys == NULL))\n    {\n      ecma_collection_free (return_names_p);\n      ecma_collection_free (visited_names_p);\n      ecma_deref_object (obj_p);\n      return keys;\n    }\n#endif /* JERRY_ESNEXT */\n\n    for (uint32_t i = 0; i < keys->item_count; i++)\n    {\n      ecma_value_t prop_name = keys->buffer_p[i];\n      ecma_string_t *name_p = ecma_get_prop_name_from_value (prop_name);\n\n#if JERRY_ESNEXT\n      if (ecma_prop_name_is_symbol (name_p))\n      {\n        continue;\n      }\n#endif /* JERRY_ESNEXT */\n\n      ecma_property_descriptor_t prop_desc;\n      ecma_value_t get_desc = ecma_op_object_get_own_property_descriptor (obj_p, name_p, &prop_desc);\n\n      if (ECMA_IS_VALUE_ERROR (get_desc))\n      {\n        ecma_collection_free (keys);\n        ecma_collection_free (return_names_p);\n        ecma_collection_free (visited_names_p);\n        ecma_deref_object (obj_p);\n        return NULL;\n      }\n\n      if (ecma_is_value_true (get_desc))\n      {\n        bool is_enumerable = (prop_desc.flags & JERRY_PROP_IS_ENUMERABLE) != 0;\n        ecma_free_property_descriptor (&prop_desc);\n\n        if (ecma_collection_has_string_value (visited_names_p, name_p)\n            || ecma_collection_has_string_value (return_names_p, name_p))\n        {\n          continue;\n        }\n\n        ecma_ref_ecma_string (name_p);\n\n        if (is_enumerable)\n        {\n          ecma_collection_push_back (return_names_p, prop_name);\n        }\n        else\n        {\n          ecma_collection_push_back (visited_names_p, prop_name);\n        }\n      }\n    }\n\n    ecma_collection_free (keys);\n\n    /* Query the prototype. */\n    ecma_object_t *proto_p = ecma_op_object_get_prototype_of (obj_p);\n    ecma_deref_object (obj_p);\n\n    if (proto_p == NULL)\n    {\n      break;\n    }\n    else if (JERRY_UNLIKELY (proto_p == ECMA_OBJECT_POINTER_ERROR))\n    {\n      ecma_collection_free (return_names_p);\n      ecma_collection_free (visited_names_p);\n      return NULL;\n    }\n\n    /* Advance up on prototype chain. */\n    obj_p = proto_p;\n  }\n\n  ecma_collection_free (visited_names_p);\n\n  return return_names_p;\n}",
        "begin_line": 2691,
        "end_line": 2785,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_find#840",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_find (ecma_object_t *object_p, /**< the object */                      ecma_string_t *property_name_p) /**< property name */",
        "snippet": "ecma_value_t\necma_op_object_find (ecma_object_t *object_p, /**< the object */\n                     ecma_string_t *property_name_p) /**< property name */\n{\n  ecma_value_t base_value = ecma_make_object_value (object_p);\n\n  while (true)\n  {\n#if JERRY_BUILTIN_PROXY\n    if (ECMA_OBJECT_IS_PROXY (object_p))\n    {\n      return ecma_proxy_object_find (object_p, property_name_p);\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n\n    ecma_value_t value = ecma_op_object_find_own (base_value, object_p, property_name_p);\n\n    if (ecma_is_value_found (value))\n    {\n      return value;\n    }\n\n    if (object_p->u2.prototype_cp == JMEM_CP_NULL)\n    {\n      break;\n    }\n\n    object_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, object_p->u2.prototype_cp);\n  }\n\n  return ECMA_VALUE_NOT_FOUND;\n}",
        "begin_line": 840,
        "end_line": 871,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_find_own#525",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_find_own (ecma_value_t base_value, /**< base value */                          ecma_object_t *object_p, /**< target object */                          ecma_string_t *property_name_p) /**< property name */",
        "snippet": "ecma_value_t\necma_op_object_find_own (ecma_value_t base_value, /**< base value */\n                         ecma_object_t *object_p, /**< target object */\n                         ecma_string_t *property_name_p) /**< property name */\n{\n  JERRY_ASSERT (object_p != NULL\n                && !ecma_is_lexical_environment (object_p));\n  JERRY_ASSERT (property_name_p != NULL);\n  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (object_p));\n\n  ecma_object_base_type_t base_type = ecma_get_object_base_type (object_p);\n\n  switch (base_type)\n  {\n    case ECMA_OBJECT_BASE_TYPE_CLASS:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n      switch (ext_object_p->u.cls.type)\n      {\n        case ECMA_OBJECT_CLASS_STRING:\n        {\n          if (ecma_string_is_length (property_name_p))\n          {\n            ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;\n\n            ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);\n            lit_utf8_size_t length = ecma_string_get_length (prim_value_str_p);\n\n            return ecma_make_uint32_value (length);\n          }\n\n          uint32_t index = ecma_string_get_array_index (property_name_p);\n\n          if (index != ECMA_STRING_NOT_ARRAY_INDEX)\n          {\n            ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;\n\n            ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);\n\n            if (index < ecma_string_get_length (prim_value_str_p))\n            {\n              ecma_char_t char_at_idx = ecma_string_get_char_at_pos (prim_value_str_p, index);\n              return ecma_make_string_value (ecma_new_ecma_string_from_code_unit (char_at_idx));\n            }\n          }\n          break;\n        }\n        case ECMA_OBJECT_CLASS_ARGUMENTS:\n        {\n          if (!(ext_object_p->u.cls.u1.arguments_flags & ECMA_ARGUMENTS_OBJECT_MAPPED))\n          {\n            break;\n          }\n\n          uint32_t index = ecma_string_get_array_index (property_name_p);\n\n          if (index < ext_object_p->u.cls.u2.formal_params_number)\n          {\n            ecma_mapped_arguments_t *mapped_arguments_p = (ecma_mapped_arguments_t *) ext_object_p;\n\n            ecma_value_t *argv_p = (ecma_value_t *) (mapped_arguments_p + 1);\n\n            if (!ecma_is_value_empty (argv_p[index]) && argv_p[index] != ECMA_VALUE_ARGUMENT_NO_TRACK)\n            {\n              ecma_string_t *name_p = ecma_op_arguments_object_get_formal_parameter (mapped_arguments_p, index);\n              ecma_object_t *lex_env_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_object_t, mapped_arguments_p->lex_env);\n\n              return ecma_op_get_binding_value (lex_env_p, name_p, true);\n            }\n          }\n          break;\n        }\n#if JERRY_BUILTIN_TYPEDARRAY\n        /* ES2015 9.4.5.4 */\n        case ECMA_OBJECT_CLASS_TYPEDARRAY:\n        {\n          if (ecma_prop_name_is_symbol (property_name_p))\n          {\n            break;\n          }\n\n          ecma_number_t num = ecma_string_to_number (property_name_p);\n          bool is_same;\n          if (num <= 0)\n          {\n            is_same = true;\n          }\n          else\n          {\n            ecma_string_t *num_to_str = ecma_new_ecma_string_from_number (num);\n            is_same = ecma_compare_ecma_strings (property_name_p, num_to_str);\n            ecma_deref_ecma_string (num_to_str);\n          }\n\n          if (is_same)\n          {\n            ecma_typedarray_info_t info = ecma_typedarray_get_info (object_p);\n            return ecma_get_typedarray_element (&info, num);\n          }\n\n          break;\n        }\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n#if JERRY_MODULE_SYSTEM\n        case ECMA_OBJECT_CLASS_MODULE_NAMESPACE:\n        {\n          if (JERRY_UNLIKELY (ecma_prop_name_is_symbol (property_name_p)))\n          {\n            /* ECMA-262 v11, 26.3.1 */\n            if (ecma_op_compare_string_to_global_symbol (property_name_p, LIT_GLOBAL_SYMBOL_TO_STRING_TAG))\n            {\n              return ecma_make_magic_string_value (LIT_MAGIC_STRING_MODULE_UL);\n            }\n\n            return ECMA_VALUE_NOT_FOUND;\n          }\n\n          ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);\n\n          if (property_p == NULL)\n          {\n            return ECMA_VALUE_NOT_FOUND;\n          }\n\n          JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));\n\n          ecma_property_value_t *prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n          if (!(*property_p & ECMA_PROPERTY_FLAG_DATA))\n          {\n            prop_value_p = ecma_get_property_value_from_named_reference (prop_value_p);\n\n            if (JERRY_UNLIKELY (prop_value_p->value == ECMA_VALUE_UNINITIALIZED))\n            {\n              return ecma_raise_reference_error (ECMA_ERR_MSG (ecma_error_let_const_not_initialized));\n            }\n          }\n\n          return ecma_fast_copy_value (prop_value_p->value);\n        }\n#endif /* JERRY_MODULE_SYSTEM */\n      }\n      break;\n    }\n    case ECMA_OBJECT_BASE_TYPE_ARRAY:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n      if (ecma_string_is_length (property_name_p))\n      {\n        return ecma_make_uint32_value (ext_object_p->u.array.length);\n      }\n\n      if (JERRY_LIKELY (ecma_op_array_is_fast_array (ext_object_p)))\n      {\n        uint32_t index = ecma_string_get_array_index (property_name_p);\n\n        if (JERRY_LIKELY (index != ECMA_STRING_NOT_ARRAY_INDEX))\n        {\n          if (JERRY_LIKELY (index < ext_object_p->u.array.length))\n          {\n            ecma_value_t *values_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, object_p->u1.property_list_cp);\n\n            return (ecma_is_value_array_hole (values_p[index]) ? ECMA_VALUE_NOT_FOUND\n                                                               : ecma_fast_copy_value (values_p[index]));\n          }\n        }\n        return ECMA_VALUE_NOT_FOUND;\n      }\n\n      break;\n    }\n    default:\n    {\n      break;\n    }\n  }\n\n  ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);\n\n  if (property_p == NULL)\n  {\n    switch (ecma_get_object_type (object_p))\n    {\n      case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:\n      {\n        if (ecma_builtin_function_is_routine (object_p))\n        {\n          property_p = ecma_builtin_routine_try_to_instantiate_property (object_p, property_name_p);\n          break;\n        }\n        /* FALLTHRU */\n      }\n      case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:\n      case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:\n      case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:\n      {\n        property_p = ecma_builtin_try_to_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_CLASS:\n      {\n        if (((ecma_extended_object_t *) object_p)->u.cls.type == ECMA_OBJECT_CLASS_ARGUMENTS)\n        {\n          property_p = ecma_op_arguments_object_try_to_lazy_instantiate_property (object_p, property_name_p);\n        }\n        break;\n      }\n      case ECMA_OBJECT_TYPE_FUNCTION:\n      {\n#if !JERRY_ESNEXT\n        if (ecma_string_is_length (property_name_p))\n        {\n          /* Get length virtual property. */\n          ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;\n          const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);\n\n          uint32_t len;\n          if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)\n          {\n            cbc_uint16_arguments_t *args_p = (cbc_uint16_arguments_t *) bytecode_data_p;\n            len = args_p->argument_end;\n          }\n          else\n          {\n            cbc_uint8_arguments_t *args_p = (cbc_uint8_arguments_t *) bytecode_data_p;\n            len = args_p->argument_end;\n          }\n\n          return ecma_make_uint32_value (len);\n        }\n#endif /* !JERRY_ESNEXT */\n\n        /* Get prototype physical property. */\n        property_p = ecma_op_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:\n      {\n        property_p = ecma_op_external_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_BOUND_FUNCTION:\n      {\n        property_p = ecma_op_bound_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      default:\n      {\n        break;\n      }\n    }\n\n    if (property_p == NULL)\n    {\n      return ECMA_VALUE_NOT_FOUND;\n    }\n  }\n\n  JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));\n\n  ecma_property_value_t *prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n  if (*property_p & ECMA_PROPERTY_FLAG_DATA)\n  {\n    return ecma_fast_copy_value (prop_value_p->value);\n  }\n\n  ecma_getter_setter_pointers_t *get_set_pair_p = ecma_get_named_accessor_property (prop_value_p);\n\n  if (get_set_pair_p->getter_cp == JMEM_CP_NULL)\n  {\n    return ECMA_VALUE_UNDEFINED;\n  }\n\n  ecma_object_t *getter_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, get_set_pair_p->getter_cp);\n\n  return ecma_op_function_call (getter_p, base_value, NULL, 0);\n}",
        "begin_line": 525,
        "end_line": 804,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_own_property#72",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_own_property (ecma_object_t *object_p, /**< the object */                                  ecma_string_t *property_name_p, /**< property name */                                  ecma_property_ref_t *property_ref_p, /**< property reference */                                  uint32_t options) /**< option bits */",
        "snippet": "ecma_property_t\necma_op_object_get_own_property (ecma_object_t *object_p, /**< the object */\n                                 ecma_string_t *property_name_p, /**< property name */\n                                 ecma_property_ref_t *property_ref_p, /**< property reference */\n                                 uint32_t options) /**< option bits */\n{\n  JERRY_ASSERT (object_p != NULL\n                && !ecma_is_lexical_environment (object_p));\n#if JERRY_BUILTIN_PROXY\n  JERRY_ASSERT (!ECMA_OBJECT_IS_PROXY (object_p));\n#endif /* JERRY_BUILTIN_PROXY */\n  JERRY_ASSERT (property_name_p != NULL);\n  JERRY_ASSERT (options == ECMA_PROPERTY_GET_NO_OPTIONS\n                || property_ref_p != NULL);\n\n  ecma_object_base_type_t base_type = ecma_get_object_base_type (object_p);\n\n  switch (base_type)\n  {\n    case ECMA_OBJECT_BASE_TYPE_CLASS:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n      switch (ext_object_p->u.cls.type)\n      {\n        case ECMA_OBJECT_CLASS_STRING:\n        {\n          if (ecma_string_is_length (property_name_p))\n          {\n            if (options & ECMA_PROPERTY_GET_VALUE)\n            {\n              ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;\n              ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);\n\n              lit_utf8_size_t length = ecma_string_get_length (prim_value_str_p);\n              property_ref_p->virtual_value = ecma_make_uint32_value (length);\n            }\n\n            return ECMA_PROPERTY_VIRTUAL;\n          }\n\n          uint32_t index = ecma_string_get_array_index (property_name_p);\n\n          if (index != ECMA_STRING_NOT_ARRAY_INDEX)\n          {\n            ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;\n            ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);\n\n            if (index < ecma_string_get_length (prim_value_str_p))\n            {\n              if (options & ECMA_PROPERTY_GET_VALUE)\n              {\n                ecma_char_t char_at_idx = ecma_string_get_char_at_pos (prim_value_str_p, index);\n                ecma_string_t *char_str_p = ecma_new_ecma_string_from_code_unit (char_at_idx);\n                property_ref_p->virtual_value = ecma_make_string_value (char_str_p);\n              }\n\n              return ECMA_PROPERTY_FLAG_ENUMERABLE | ECMA_PROPERTY_VIRTUAL;\n            }\n          }\n          break;\n        }\n#if JERRY_BUILTIN_TYPEDARRAY\n        /* ES2015 9.4.5.1 */\n        case ECMA_OBJECT_CLASS_TYPEDARRAY:\n        {\n          if (ecma_prop_name_is_symbol (property_name_p))\n          {\n            break;\n          }\n          ecma_number_t num = ecma_string_to_number (property_name_p);\n          bool is_same;\n          if (num <= 0)\n          {\n            is_same = true;\n          }\n          else\n          {\n            ecma_string_t *num_to_str = ecma_new_ecma_string_from_number (num);\n            is_same = ecma_compare_ecma_strings (property_name_p, num_to_str);\n            ecma_deref_ecma_string (num_to_str);\n          }\n\n          if (is_same)\n          {\n            ecma_typedarray_info_t info = ecma_typedarray_get_info (object_p);\n            ecma_value_t value = ecma_get_typedarray_element (&info, num);\n\n            if (ECMA_IS_VALUE_ERROR (value))\n            {\n              property_ref_p->virtual_value = value;\n              return ECMA_PROPERTY_TYPE_NOT_FOUND;\n            }\n\n            if (!ecma_is_value_undefined (value))\n            {\n              if (options & ECMA_PROPERTY_GET_VALUE)\n              {\n                property_ref_p->virtual_value = value;\n              }\n              else\n              {\n                ecma_fast_free_value (value);\n              }\n\n              return ECMA_PROPERTY_ENUMERABLE_WRITABLE | ECMA_PROPERTY_VIRTUAL;\n            }\n            else\n            {\n              return ECMA_PROPERTY_TYPE_NOT_FOUND;\n            }\n          }\n          break;\n        }\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n#if JERRY_MODULE_SYSTEM\n        case ECMA_OBJECT_CLASS_MODULE_NAMESPACE:\n        {\n          if (JERRY_UNLIKELY (ecma_prop_name_is_symbol (property_name_p)))\n          {\n            if (!ecma_op_compare_string_to_global_symbol (property_name_p, LIT_GLOBAL_SYMBOL_TO_STRING_TAG))\n            {\n              return ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP;\n            }\n\n            /* ECMA-262 v11, 26.3.1 */\n            if (options & ECMA_PROPERTY_GET_VALUE)\n            {\n              property_ref_p->virtual_value = ecma_make_magic_string_value (LIT_MAGIC_STRING_MODULE_UL);\n            }\n\n            return ECMA_PROPERTY_VIRTUAL;\n          }\n\n          ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);\n\n          if (property_p == NULL)\n          {\n            return ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP;\n          }\n\n          JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));\n\n          if (*property_p & ECMA_PROPERTY_FLAG_DATA)\n          {\n            if (options & ECMA_PROPERTY_GET_EXT_REFERENCE)\n            {\n              ((ecma_extended_property_ref_t *) property_ref_p)->property_p = property_p;\n            }\n\n            if (property_ref_p != NULL)\n            {\n              property_ref_p->value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n            }\n\n            return *property_p;\n          }\n\n          if (options & ECMA_PROPERTY_GET_VALUE)\n          {\n            ecma_property_value_t *prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n            prop_value_p = ecma_get_property_value_from_named_reference (prop_value_p);\n            property_ref_p->virtual_value = ecma_fast_copy_value (prop_value_p->value);\n          }\n\n          return ECMA_PROPERTY_ENUMERABLE_WRITABLE | ECMA_PROPERTY_VIRTUAL;\n        }\n#endif /* JERRY_MODULE_SYSTEM */\n      }\n      break;\n    }\n    case ECMA_OBJECT_BASE_TYPE_ARRAY:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n      if (ecma_string_is_length (property_name_p))\n      {\n        if (options & ECMA_PROPERTY_GET_VALUE)\n        {\n          property_ref_p->virtual_value = ecma_make_uint32_value (ext_object_p->u.array.length);\n        }\n\n        uint32_t length_prop = ext_object_p->u.array.length_prop_and_hole_count;\n        return length_prop & (ECMA_PROPERTY_FLAG_WRITABLE | ECMA_PROPERTY_VIRTUAL);\n      }\n\n      if (ecma_op_array_is_fast_array (ext_object_p))\n      {\n        uint32_t index = ecma_string_get_array_index (property_name_p);\n\n        if (index != ECMA_STRING_NOT_ARRAY_INDEX)\n        {\n          if (JERRY_LIKELY (index < ext_object_p->u.array.length))\n          {\n            ecma_value_t *values_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, object_p->u1.property_list_cp);\n\n            if (ecma_is_value_array_hole (values_p[index]))\n            {\n              return ECMA_PROPERTY_TYPE_NOT_FOUND;\n            }\n\n            if (options & ECMA_PROPERTY_GET_VALUE)\n            {\n              property_ref_p->virtual_value = ecma_fast_copy_value (values_p[index]);\n            }\n\n            return ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE | ECMA_PROPERTY_VIRTUAL;\n          }\n        }\n\n        return ECMA_PROPERTY_TYPE_NOT_FOUND;\n      }\n\n      break;\n    }\n    default:\n    {\n      break;\n    }\n  }\n\n  ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);\n  ecma_object_type_t type = ecma_get_object_type (object_p);\n\n  if (property_p == NULL)\n  {\n    switch (type)\n    {\n      case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:\n      {\n        if (ecma_builtin_function_is_routine (object_p))\n        {\n          property_p = ecma_builtin_routine_try_to_instantiate_property (object_p, property_name_p);\n          break;\n        }\n        /* FALLTHRU */\n      }\n      case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:\n      case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:\n      case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:\n      {\n        property_p = ecma_builtin_try_to_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_CLASS:\n      {\n        if (((ecma_extended_object_t *) object_p)->u.cls.type == ECMA_OBJECT_CLASS_ARGUMENTS)\n        {\n          property_p = ecma_op_arguments_object_try_to_lazy_instantiate_property (object_p, property_name_p);\n        }\n        break;\n      }\n      case ECMA_OBJECT_TYPE_FUNCTION:\n      {\n#if !JERRY_ESNEXT\n        if (ecma_string_is_length (property_name_p))\n        {\n          if (options & ECMA_PROPERTY_GET_VALUE)\n          {\n            /* Get length virtual property. */\n            ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) object_p;\n            const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);\n\n            uint32_t len;\n            if (bytecode_data_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)\n            {\n              cbc_uint16_arguments_t *args_p = (cbc_uint16_arguments_t *) bytecode_data_p;\n              len = args_p->argument_end;\n            }\n            else\n            {\n              cbc_uint8_arguments_t *args_p = (cbc_uint8_arguments_t *) bytecode_data_p;\n              len = args_p->argument_end;\n            }\n\n            property_ref_p->virtual_value = ecma_make_uint32_value (len);\n          }\n\n          return ECMA_PROPERTY_VIRTUAL;\n        }\n#endif /* !JERRY_ESNEXT */\n\n        /* Get prototype physical property. */\n        property_p = ecma_op_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:\n      {\n        property_p = ecma_op_external_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_BOUND_FUNCTION:\n      {\n        property_p = ecma_op_bound_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      default:\n      {\n        break;\n      }\n    }\n\n    if (property_p == NULL)\n    {\n      return ECMA_PROPERTY_TYPE_NOT_FOUND;\n    }\n  }\n  else if (type == ECMA_OBJECT_TYPE_CLASS\n           && ((ecma_extended_object_t *) object_p)->u.cls.type == ECMA_OBJECT_CLASS_ARGUMENTS\n           && (((ecma_extended_object_t *) object_p)->u.cls.u1.arguments_flags & ECMA_ARGUMENTS_OBJECT_MAPPED))\n  {\n    ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n    uint32_t index = ecma_string_get_array_index (property_name_p);\n\n    if (index < ext_object_p->u.cls.u2.formal_params_number)\n    {\n      ecma_mapped_arguments_t *mapped_arguments_p = (ecma_mapped_arguments_t *) ext_object_p;\n\n      ecma_value_t *argv_p = (ecma_value_t *) (mapped_arguments_p + 1);\n\n      if (!ecma_is_value_empty (argv_p[index]) && argv_p[index] != ECMA_VALUE_ARGUMENT_NO_TRACK)\n      {\n#if JERRY_LCACHE\n        /* Mapped arguments initialized properties MUST not be lcached */\n        if (ecma_is_property_lcached (property_p))\n        {\n          jmem_cpointer_t prop_name_cp;\n\n          if (JERRY_UNLIKELY (ECMA_IS_DIRECT_STRING (property_name_p)))\n          {\n            prop_name_cp = (jmem_cpointer_t) ECMA_GET_DIRECT_STRING_VALUE (property_name_p);\n          }\n          else\n          {\n            ECMA_SET_NON_NULL_POINTER (prop_name_cp, property_name_p);\n          }\n          ecma_lcache_invalidate (object_p, prop_name_cp, property_p);\n        }\n#endif /* JERRY_LCACHE */\n        ecma_string_t *name_p = ecma_op_arguments_object_get_formal_parameter (mapped_arguments_p, index);\n        ecma_object_t *lex_env_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_object_t, mapped_arguments_p->lex_env);\n\n        ecma_value_t binding_value = ecma_op_get_binding_value (lex_env_p, name_p, true);\n\n        ecma_named_data_property_assign_value (object_p,\n                                               ECMA_PROPERTY_VALUE_PTR (property_p),\n                                               binding_value);\n        ecma_free_value (binding_value);\n      }\n    }\n  }\n\n  if (options & ECMA_PROPERTY_GET_EXT_REFERENCE)\n  {\n    ((ecma_extended_property_ref_t *) property_ref_p)->property_p = property_p;\n  }\n\n  if (property_ref_p != NULL)\n  {\n    property_ref_p->value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n  }\n\n  return *property_p;\n}",
        "begin_line": 72,
        "end_line": 436,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_own_property_descriptor#1944",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_own_property_descriptor (ecma_object_t *object_p, /**< the object */                                             ecma_string_t *property_name_p, /**< property name */                                             ecma_property_descriptor_t *prop_desc_p) /**< property descriptor */",
        "snippet": "ecma_value_t\necma_op_object_get_own_property_descriptor (ecma_object_t *object_p, /**< the object */\n                                            ecma_string_t *property_name_p, /**< property name */\n                                            ecma_property_descriptor_t *prop_desc_p) /**< property descriptor */\n{\n  *prop_desc_p = ecma_make_empty_property_descriptor ();\n\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_IS_PROXY (object_p))\n  {\n    return ecma_proxy_object_get_own_property_descriptor (object_p, property_name_p, prop_desc_p);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  ecma_property_ref_t property_ref;\n  property_ref.virtual_value = ECMA_VALUE_EMPTY;\n  ecma_property_t property = ecma_op_object_get_own_property (object_p,\n                                                              property_name_p,\n                                                              &property_ref,\n                                                              ECMA_PROPERTY_GET_VALUE);\n\n  if (ECMA_IS_VALUE_ERROR (property_ref.virtual_value))\n  {\n    return property_ref.virtual_value;\n  }\n\n  if (property == ECMA_PROPERTY_TYPE_NOT_FOUND || property == ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP)\n  {\n    return ECMA_VALUE_FALSE;\n  }\n\n  uint32_t flags = ecma_is_property_enumerable (property) ? JERRY_PROP_IS_ENUMERABLE : JERRY_PROP_NO_OPTS;\n  flags |= ecma_is_property_configurable (property) ? JERRY_PROP_IS_CONFIGURABLE: JERRY_PROP_NO_OPTS;\n\n  prop_desc_p->flags = (uint16_t) (JERRY_PROP_IS_ENUMERABLE_DEFINED | JERRY_PROP_IS_CONFIGURABLE_DEFINED | flags);\n\n  if (property & ECMA_PROPERTY_FLAG_DATA)\n  {\n    if (!ECMA_PROPERTY_IS_VIRTUAL (property))\n    {\n      prop_desc_p->value = ecma_copy_value (property_ref.value_p->value);\n    }\n    else\n    {\n#if JERRY_MODULE_SYSTEM\n      if (JERRY_UNLIKELY (property_ref.virtual_value == ECMA_VALUE_UNINITIALIZED))\n      {\n        return ecma_raise_reference_error (ECMA_ERR_MSG (ecma_error_let_const_not_initialized));\n      }\n#endif /* JERRY_MODULE_SYSTEM */\n      prop_desc_p->value = property_ref.virtual_value;\n    }\n\n    prop_desc_p->flags |= (JERRY_PROP_IS_VALUE_DEFINED | JERRY_PROP_IS_WRITABLE_DEFINED);\n    prop_desc_p->flags = (uint16_t) (prop_desc_p->flags | (ecma_is_property_writable (property) ? JERRY_PROP_IS_WRITABLE\n                                                                                                : JERRY_PROP_NO_OPTS));\n  }\n  else\n  {\n    ecma_getter_setter_pointers_t *get_set_pair_p = ecma_get_named_accessor_property (property_ref.value_p);\n    prop_desc_p->flags |= (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED);\n\n    if (get_set_pair_p->getter_cp == JMEM_CP_NULL)\n    {\n      prop_desc_p->get_p = NULL;\n    }\n    else\n    {\n      prop_desc_p->get_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, get_set_pair_p->getter_cp);\n      ecma_ref_object (prop_desc_p->get_p);\n    }\n\n    if (get_set_pair_p->setter_cp == JMEM_CP_NULL)\n    {\n      prop_desc_p->set_p = NULL;\n    }\n    else\n    {\n      prop_desc_p->set_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, get_set_pair_p->setter_cp);\n      ecma_ref_object (prop_desc_p->set_p);\n    }\n  }\n\n  return ECMA_VALUE_TRUE;\n}",
        "begin_line": 1944,
        "end_line": 2028,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_prototype_of#2088",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_prototype_of (ecma_object_t *obj_p) /**< input object */",
        "snippet": "ecma_object_t *\necma_op_object_get_prototype_of (ecma_object_t *obj_p) /**< input object */\n{\n  JERRY_ASSERT (obj_p != NULL);\n\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_IS_PROXY (obj_p))\n  {\n    ecma_value_t proto = ecma_proxy_object_get_prototype_of (obj_p);\n\n    if (ECMA_IS_VALUE_ERROR (proto))\n    {\n      return ECMA_OBJECT_POINTER_ERROR;\n    }\n    if (ecma_is_value_null (proto))\n    {\n      return NULL;\n    }\n\n    JERRY_ASSERT (ecma_is_value_object (proto));\n\n    return ecma_get_object_from_value (proto);\n  }\n  else\n#endif /* JERRY_BUILTIN_PROXY */\n  {\n    jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (obj_p);\n\n    if (proto_cp == JMEM_CP_NULL)\n    {\n      return NULL;\n    }\n\n    ecma_object_t *proto_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);\n    ecma_ref_object (proto_p);\n\n    return proto_p;\n  }\n}",
        "begin_line": 2088,
        "end_line": 2126,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_with_receiver#908",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_get_with_receiver (ecma_object_t *object_p, /**< the object */                                   ecma_string_t *property_name_p, /**< property name */                                   ecma_value_t receiver) /**< receiver to invoke getter function */",
        "snippet": "ecma_value_t\necma_op_object_get_with_receiver (ecma_object_t *object_p, /**< the object */\n                                  ecma_string_t *property_name_p, /**< property name */\n                                  ecma_value_t receiver) /**< receiver to invoke getter function */\n{\n  while (true)\n  {\n#if JERRY_BUILTIN_PROXY\n    if (ECMA_OBJECT_IS_PROXY (object_p))\n    {\n      return ecma_proxy_object_get (object_p, property_name_p, receiver);\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n\n    ecma_value_t value = ecma_op_object_find_own (receiver, object_p, property_name_p);\n\n    if (ecma_is_value_found (value))\n    {\n      return value;\n    }\n\n    jmem_cpointer_t proto_cp = ecma_op_ordinary_object_get_prototype_of (object_p);\n\n    if (proto_cp == JMEM_CP_NULL)\n    {\n      break;\n    }\n\n    object_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, proto_cp);\n  }\n\n  return ECMA_VALUE_UNDEFINED;\n}",
        "begin_line": 908,
        "end_line": 940,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_own_property_keys#2425",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_own_property_keys (ecma_object_t *obj_p, /**< object */                                   jerry_property_filter_t filter) /**< name filters */",
        "snippet": "ecma_collection_t *\necma_op_object_own_property_keys (ecma_object_t *obj_p, /**< object */\n                                  jerry_property_filter_t filter) /**< name filters */\n{\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_IS_PROXY (obj_p))\n  {\n    return ecma_proxy_object_own_property_keys (obj_p);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  if (ecma_op_object_is_fast_array (obj_p))\n  {\n    return ecma_fast_array_object_own_property_keys (obj_p, filter);\n  }\n\n  ecma_collection_t *prop_names_p = ecma_new_collection ();\n  ecma_property_counter_t prop_counter = {0, 0, 0};\n\n  ecma_object_list_lazy_property_names (obj_p, prop_names_p, &prop_counter, filter);\n\n  jmem_cpointer_t prop_iter_cp = obj_p->u1.property_list_cp;\n\n#if JERRY_PROPERTY_HASHMAP\n  if (prop_iter_cp != JMEM_CP_NULL)\n  {\n    ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, prop_iter_cp);\n\n    if (prop_iter_p->types[0] == ECMA_PROPERTY_TYPE_HASHMAP)\n    {\n      prop_iter_cp = prop_iter_p->next_property_cp;\n    }\n  }\n#endif /* JERRY_PROPERTY_HASHMAP */\n\n  jmem_cpointer_t counter_prop_iter_cp = prop_iter_cp;\n\n  uint32_t array_index_named_props = 0;\n  uint32_t string_named_props = 0;\n#if JERRY_ESNEXT\n  uint32_t symbol_named_props = 0;\n#endif /* JERRY_ESNEXT */\n\n  while (counter_prop_iter_cp != JMEM_CP_NULL)\n  {\n    ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, counter_prop_iter_cp);\n    JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));\n\n    for (int i = 0; i < ECMA_PROPERTY_PAIR_ITEM_COUNT; i++)\n    {\n      ecma_property_t *property_p = prop_iter_p->types + i;\n\n      if (!ECMA_PROPERTY_IS_RAW (*property_p)\n          || (*property_p & ECMA_PROPERTY_FLAG_BUILT_IN))\n      {\n        continue;\n      }\n\n      ecma_property_pair_t *prop_pair_p = (ecma_property_pair_t *) prop_iter_p;\n\n      if (ECMA_PROPERTY_GET_NAME_TYPE (*property_p) == ECMA_DIRECT_STRING_MAGIC\n          && prop_pair_p->names_cp[i] >= LIT_NON_INTERNAL_MAGIC_STRING__COUNT\n          && prop_pair_p->names_cp[i] < LIT_MAGIC_STRING__COUNT)\n      {\n        continue;\n      }\n\n      ecma_string_t *name_p = ecma_string_from_property_name (*property_p,\n                                                              prop_pair_p->names_cp[i]);\n\n      if (ecma_string_get_array_index (name_p) != ECMA_STRING_NOT_ARRAY_INDEX)\n      {\n        array_index_named_props++;\n      }\n#if JERRY_ESNEXT\n      else if (ecma_prop_name_is_symbol (name_p))\n      {\n        symbol_named_props++;\n      }\n#endif /* JERRY_ESNEXT */\n      else\n      {\n        string_named_props++;\n      }\n\n      ecma_deref_ecma_string (name_p);\n    }\n\n    counter_prop_iter_cp = prop_iter_p->next_property_cp;\n  }\n\n  if (filter & JERRY_PROPERTY_FILTER_EXLCUDE_INTEGER_INDICES)\n  {\n    JERRY_ASSERT (prop_counter.array_index_named_props == 0);\n    array_index_named_props = 0;\n  }\n\n  if (filter & JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS)\n  {\n    JERRY_ASSERT (prop_counter.string_named_props == 0);\n    string_named_props = 0;\n  }\n\n#if JERRY_ESNEXT\n  if (filter & JERRY_PROPERTY_FILTER_EXLCUDE_SYMBOLS)\n  {\n    JERRY_ASSERT (prop_counter.symbol_named_props == 0);\n    symbol_named_props = 0;\n  }\n\n  uint32_t total = array_index_named_props + string_named_props + symbol_named_props;\n#else /* !JERRY_ESNEXT */\n  uint32_t total = array_index_named_props + string_named_props;\n#endif /* JERRY_ESNEXT */\n\n  if (total == 0)\n  {\n    return prop_names_p;\n  }\n\n  ecma_collection_reserve (prop_names_p, total);\n  prop_names_p->item_count += total;\n\n  ecma_value_t *buffer_p = prop_names_p->buffer_p;\n  ecma_value_t *array_index_current_p = buffer_p + array_index_named_props + prop_counter.array_index_named_props;\n  ecma_value_t *string_current_p = array_index_current_p + string_named_props + prop_counter.string_named_props;\n\n#if JERRY_ESNEXT\n  ecma_value_t *symbol_current_p = string_current_p + symbol_named_props + prop_counter.symbol_named_props;\n\n  if (prop_counter.symbol_named_props > 0\n      && (array_index_named_props + string_named_props) > 0)\n  {\n    memmove ((void *) string_current_p,\n             (void *) (buffer_p + prop_counter.array_index_named_props + prop_counter.string_named_props),\n             prop_counter.symbol_named_props * sizeof (ecma_value_t));\n  }\n#endif /* JERRY_ESNEXT */\n\n  if (prop_counter.string_named_props > 0\n      && array_index_named_props > 0)\n  {\n    memmove ((void *) array_index_current_p,\n             (void *) (buffer_p + prop_counter.array_index_named_props),\n             prop_counter.string_named_props * sizeof (ecma_value_t));\n  }\n\n  while (prop_iter_cp != JMEM_CP_NULL)\n  {\n    ecma_property_header_t *prop_iter_p = ECMA_GET_NON_NULL_POINTER (ecma_property_header_t, prop_iter_cp);\n    JERRY_ASSERT (ECMA_PROPERTY_IS_PROPERTY_PAIR (prop_iter_p));\n\n    for (int i = 0; i < ECMA_PROPERTY_PAIR_ITEM_COUNT; i++)\n    {\n      ecma_property_t *property_p = prop_iter_p->types + i;\n\n      if (!ECMA_PROPERTY_IS_RAW (*property_p)\n          || (*property_p & ECMA_PROPERTY_FLAG_BUILT_IN))\n      {\n        continue;\n      }\n\n      ecma_property_pair_t *prop_pair_p = (ecma_property_pair_t *) prop_iter_p;\n\n      if (ECMA_PROPERTY_GET_NAME_TYPE (*property_p) == ECMA_DIRECT_STRING_MAGIC\n          && prop_pair_p->names_cp[i] >= LIT_NON_INTERNAL_MAGIC_STRING__COUNT\n          && prop_pair_p->names_cp[i] < LIT_MAGIC_STRING__COUNT)\n      {\n        continue;\n      }\n\n      ecma_string_t *name_p = ecma_string_from_property_name (*property_p,\n                                                              prop_pair_p->names_cp[i]);\n\n      if (ecma_string_get_array_index (name_p) != ECMA_STRING_NOT_ARRAY_INDEX)\n      {\n        if (!(filter & JERRY_PROPERTY_FILTER_EXLCUDE_INTEGER_INDICES))\n        {\n          *(--array_index_current_p) = ecma_make_string_value (name_p);\n          continue;\n        }\n      }\n#if JERRY_ESNEXT\n      else if (ecma_prop_name_is_symbol (name_p))\n      {\n        if (!(filter & JERRY_PROPERTY_FILTER_EXLCUDE_SYMBOLS))\n        {\n          *(--symbol_current_p) = ecma_make_symbol_value (name_p);\n          continue;\n        }\n      }\n#endif /* JERRY_ESNEXT */\n      else\n      {\n        if (!(filter & JERRY_PROPERTY_FILTER_EXLCUDE_STRINGS))\n        {\n          *(--string_current_p) = ecma_make_string_value (name_p);\n          continue;\n        }\n      }\n\n      ecma_deref_ecma_string (name_p);\n    }\n\n    prop_iter_cp = prop_iter_p->next_property_cp;\n  }\n\n  if (array_index_named_props > 1\n      || (array_index_named_props == 1 && prop_counter.array_index_named_props > 0))\n  {\n    uint32_t prev_value = 0;\n    ecma_value_t *array_index_p = buffer_p + prop_counter.array_index_named_props;\n    ecma_value_t *array_index_end_p = array_index_p + array_index_named_props;\n\n    if (prop_counter.array_index_named_props > 0)\n    {\n      prev_value = ecma_string_get_array_index (ecma_get_string_from_value (array_index_p[-1]));\n    }\n\n    do\n    {\n      uint32_t value = ecma_string_get_array_index (ecma_get_string_from_value (*array_index_p++));\n\n      if (value < prev_value)\n      {\n        uint32_t array_props = prop_counter.array_index_named_props + array_index_named_props;\n        uint32_t i = (array_props >> 1) - 1;\n\n        do\n        {\n          ecma_op_object_heap_sort_shift_down (buffer_p, array_props, i);\n        }\n        while (i-- > 0);\n\n        i = array_props - 1;\n\n        do\n        {\n          ecma_value_t tmp = buffer_p[i];\n          buffer_p[i] = buffer_p[0];\n          buffer_p[0] = tmp;\n\n          ecma_op_object_heap_sort_shift_down (buffer_p, i, 0);\n        }\n        while (--i > 0);\n\n        break;\n      }\n\n      prev_value = value;\n    }\n    while (array_index_p < array_index_end_p);\n  }\n\n  return prop_names_p;\n}",
        "begin_line": 2425,
        "end_line": 2680,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_put_with_receiver#1388",
        "src_path": "jerry-core/ecma/operations/ecma-objects.c",
        "class_name": "jerry-core.ecma.operations.ecma-objects",
        "signature": "jerry-core.ecma.operations.ecma-objects.ecma_op_object_put_with_receiver (ecma_object_t *object_p, /**< the object */                                   ecma_string_t *property_name_p, /**< property name */                                   ecma_value_t value, /**< ecma value */                                   ecma_value_t receiver, /**< receiver */                                   bool is_throw) /**< flag that controls failure handling */",
        "snippet": "ecma_value_t\necma_op_object_put_with_receiver (ecma_object_t *object_p, /**< the object */\n                                  ecma_string_t *property_name_p, /**< property name */\n                                  ecma_value_t value, /**< ecma value */\n                                  ecma_value_t receiver, /**< receiver */\n                                  bool is_throw) /**< flag that controls failure handling */\n{\n  JERRY_ASSERT (object_p != NULL\n                && !ecma_is_lexical_environment (object_p));\n  JERRY_ASSERT (property_name_p != NULL);\n\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_IS_PROXY (object_p))\n  {\n    return ecma_proxy_object_set (object_p, property_name_p, value, receiver, is_throw);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  ecma_object_base_type_t base_type = ecma_get_object_base_type (object_p);\n\n  switch (base_type)\n  {\n    case ECMA_OBJECT_BASE_TYPE_CLASS:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n      switch (ext_object_p->u.cls.type)\n      {\n        case ECMA_OBJECT_CLASS_ARGUMENTS:\n        {\n          if (!(ext_object_p->u.cls.u1.arguments_flags & ECMA_ARGUMENTS_OBJECT_MAPPED))\n          {\n            break;\n          }\n\n          uint32_t index = ecma_string_get_array_index (property_name_p);\n\n          if (index < ext_object_p->u.cls.u2.formal_params_number)\n          {\n            ecma_mapped_arguments_t *mapped_arguments_p = (ecma_mapped_arguments_t *) ext_object_p;\n\n            ecma_value_t *argv_p = (ecma_value_t *) (mapped_arguments_p + 1);\n\n            if (!ecma_is_value_empty (argv_p[index]) && argv_p[index] != ECMA_VALUE_ARGUMENT_NO_TRACK)\n            {\n              ecma_string_t *name_p = ecma_op_arguments_object_get_formal_parameter (mapped_arguments_p, index);\n              ecma_object_t *lex_env_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_object_t, mapped_arguments_p->lex_env);\n              ecma_op_set_mutable_binding (lex_env_p, name_p, value, true);\n              return ECMA_VALUE_TRUE;\n            }\n          }\n          break;\n        }\n#if JERRY_BUILTIN_TYPEDARRAY\n        /* ES2015 9.4.5.5 */\n        case ECMA_OBJECT_CLASS_TYPEDARRAY:\n        {\n          if (ecma_prop_name_is_symbol (property_name_p))\n          {\n            break;\n          }\n\n          ecma_number_t num = ecma_string_to_number (property_name_p);\n          bool is_same;\n          if (num <= 0)\n          {\n            is_same = true;\n          }\n          else\n          {\n            ecma_string_t *num_to_str = ecma_new_ecma_string_from_number (num);\n            is_same = ecma_compare_ecma_strings (property_name_p, num_to_str);\n            ecma_deref_ecma_string (num_to_str);\n          }\n\n          if (is_same)\n          {\n            ecma_typedarray_info_t info = ecma_typedarray_get_info (object_p);\n            return ecma_set_typedarray_element (&info, value, num);\n          }\n          break;\n        }\n#endif /* JERRY_BUILTIN_TYPEDARRAY */\n#if JERRY_MODULE_SYSTEM\n        case ECMA_OBJECT_CLASS_MODULE_NAMESPACE:\n        {\n          return ecma_raise_readonly_assignment (property_name_p, is_throw);\n        }\n#endif /* JERRY_MODULE_SYSTEM */\n      }\n      break;\n    }\n    case ECMA_OBJECT_BASE_TYPE_ARRAY:\n    {\n      ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n      if (ecma_string_is_length (property_name_p))\n      {\n        if (ecma_is_property_writable ((ecma_property_t) ext_object_p->u.array.length_prop_and_hole_count))\n        {\n          return ecma_op_array_object_set_length (object_p, value, 0);\n        }\n\n        return ecma_raise_readonly_assignment (property_name_p, is_throw);\n      }\n\n      if (JERRY_LIKELY (ecma_op_array_is_fast_array (ext_object_p)))\n      {\n        uint32_t index = ecma_string_get_array_index (property_name_p);\n\n        if (JERRY_UNLIKELY (index == ECMA_STRING_NOT_ARRAY_INDEX))\n        {\n          ecma_fast_array_convert_to_normal (object_p);\n        }\n        else if (ecma_fast_array_set_property (object_p, index, value))\n        {\n          return ECMA_VALUE_TRUE;\n        }\n      }\n\n      JERRY_ASSERT (!ecma_op_object_is_fast_array (object_p));\n      break;\n    }\n    default:\n    {\n      break;\n    }\n  }\n\n  ecma_property_t *property_p = ecma_find_named_property (object_p, property_name_p);\n\n  if (property_p == NULL)\n  {\n    switch (ecma_get_object_type (object_p))\n    {\n      case ECMA_OBJECT_TYPE_BUILT_IN_FUNCTION:\n      {\n        if (ecma_builtin_function_is_routine (object_p))\n        {\n          property_p = ecma_builtin_routine_try_to_instantiate_property (object_p, property_name_p);\n          break;\n        }\n        /* FALLTHRU */\n      }\n      case ECMA_OBJECT_TYPE_BUILT_IN_GENERAL:\n      case ECMA_OBJECT_TYPE_BUILT_IN_CLASS:\n      case ECMA_OBJECT_TYPE_BUILT_IN_ARRAY:\n      {\n        property_p = ecma_builtin_try_to_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_CLASS:\n      {\n        ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n        switch (ext_object_p->u.cls.type)\n        {\n          case ECMA_OBJECT_CLASS_STRING:\n          {\n            uint32_t index = ecma_string_get_array_index (property_name_p);\n\n            if (index != ECMA_STRING_NOT_ARRAY_INDEX)\n            {\n              ecma_value_t prim_value_p = ext_object_p->u.cls.u3.value;\n              ecma_string_t *prim_value_str_p = ecma_get_string_from_value (prim_value_p);\n\n              if (index < ecma_string_get_length (prim_value_str_p))\n              {\n                return ecma_raise_readonly_assignment (property_name_p, is_throw);\n              }\n            }\n            break;\n          }\n          case ECMA_OBJECT_CLASS_ARGUMENTS:\n          {\n            property_p = ecma_op_arguments_object_try_to_lazy_instantiate_property (object_p, property_name_p);\n            break;\n          }\n        }\n        break;\n      }\n      case ECMA_OBJECT_TYPE_FUNCTION:\n      {\n        if (ecma_string_is_length (property_name_p))\n        {\n          /* Uninitialized 'length' property is non-writable (ECMA-262 v6, 19.2.4.1) */\n#if JERRY_ESNEXT\n          if (!ECMA_GET_FIRST_BIT_FROM_POINTER_TAG (((ecma_extended_object_t *) object_p)->u.function.scope_cp))\n#endif /* JERRY_ESNEXT */\n          {\n            return ecma_raise_readonly_assignment (property_name_p, is_throw);\n          }\n        }\n\n        /* Get prototype physical property. */\n        property_p = ecma_op_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_NATIVE_FUNCTION:\n      {\n        property_p = ecma_op_external_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      case ECMA_OBJECT_TYPE_BOUND_FUNCTION:\n      {\n        property_p = ecma_op_bound_function_try_to_lazy_instantiate_property (object_p, property_name_p);\n        break;\n      }\n      default:\n      {\n        break;\n      }\n    }\n  }\n\n  jmem_cpointer_t setter_cp = JMEM_CP_NULL;\n\n  if (property_p != NULL)\n  {\n    JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));\n\n    if (*property_p & ECMA_PROPERTY_FLAG_DATA)\n    {\n      if (ecma_is_property_writable (*property_p))\n      {\n#if JERRY_ESNEXT\n        if (ecma_make_object_value (object_p) != receiver)\n        {\n          return ecma_op_object_put_apply_receiver (receiver, property_name_p, value, is_throw);\n        }\n#endif /* JERRY_ESNEXT */\n\n        /* There is no need for special casing arrays here because changing the\n         * value of an existing property never changes the length of an array. */\n        ecma_named_data_property_assign_value (object_p,\n                                               ECMA_PROPERTY_VALUE_PTR (property_p),\n                                               value);\n        return ECMA_VALUE_TRUE;\n      }\n    }\n    else\n    {\n      ecma_getter_setter_pointers_t *get_set_pair_p;\n      get_set_pair_p = ecma_get_named_accessor_property (ECMA_PROPERTY_VALUE_PTR (property_p));\n      setter_cp = get_set_pair_p->setter_cp;\n    }\n  }\n  else\n  {\n    bool create_new_property = true;\n\n    jmem_cpointer_t obj_cp;\n    ECMA_SET_NON_NULL_POINTER (obj_cp, object_p);\n    ecma_object_t *proto_p = object_p;\n\n    while (true)\n    {\n      obj_cp = ecma_op_ordinary_object_get_prototype_of (proto_p);\n\n      if (obj_cp == JMEM_CP_NULL)\n      {\n        break;\n      }\n\n      ecma_property_ref_t property_ref = { NULL };\n      proto_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, obj_cp);\n\n#if JERRY_BUILTIN_PROXY\n      if (ECMA_OBJECT_IS_PROXY (proto_p))\n      {\n        return ecma_op_object_put_with_receiver (proto_p,\n                                                 property_name_p,\n                                                 value,\n                                                 receiver,\n                                                 is_throw);\n      }\n#endif /* JERRY_BUILTIN_PROXY */\n\n      ecma_property_t inherited_property = ecma_op_object_get_own_property (proto_p,\n                                                                            property_name_p,\n                                                                            &property_ref,\n                                                                            ECMA_PROPERTY_GET_NO_OPTIONS);\n\n      if (inherited_property != ECMA_PROPERTY_TYPE_NOT_FOUND\n          && inherited_property != ECMA_PROPERTY_TYPE_NOT_FOUND_AND_STOP)\n      {\n        JERRY_ASSERT (ECMA_PROPERTY_IS_NAMED_PROPERTY (inherited_property));\n\n        if (!(inherited_property & ECMA_PROPERTY_FLAG_DATA))\n        {\n          setter_cp = ecma_get_named_accessor_property (property_ref.value_p)->setter_cp;\n          create_new_property = false;\n          break;\n        }\n\n        create_new_property = ecma_is_property_writable (inherited_property);\n        break;\n      }\n    }\n\n#if JERRY_BUILTIN_PROXY\n    if (create_new_property\n        && ecma_is_value_object (receiver)\n        && ECMA_OBJECT_IS_PROXY (ecma_get_object_from_value (receiver)))\n    {\n      return ecma_op_object_put_apply_receiver (receiver, property_name_p, value, is_throw);\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n\n    if (create_new_property\n        && ecma_op_ordinary_object_is_extensible (object_p))\n    {\n      const ecma_object_base_type_t obj_base_type = ecma_get_object_base_type (object_p);\n\n      if (obj_base_type == ECMA_OBJECT_BASE_TYPE_CLASS)\n      {\n        ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n        if (ext_object_p->u.cls.type == ECMA_OBJECT_CLASS_ARGUMENTS\n            && ext_object_p->u.cls.u1.arguments_flags & ECMA_ARGUMENTS_OBJECT_MAPPED)\n        {\n          const uint32_t flags = ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE | JERRY_PROP_SHOULD_THROW;\n          return ecma_builtin_helper_def_prop (object_p, property_name_p, value, flags);\n        }\n      }\n\n      uint32_t index = ecma_string_get_array_index (property_name_p);\n\n      if (obj_base_type == ECMA_OBJECT_BASE_TYPE_ARRAY\n          && index != ECMA_STRING_NOT_ARRAY_INDEX)\n      {\n        ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n        if (index < UINT32_MAX\n            && index >= ext_object_p->u.array.length)\n        {\n          if (!ecma_is_property_writable ((ecma_property_t) ext_object_p->u.array.length_prop_and_hole_count))\n          {\n            return ecma_raise_readonly_assignment (property_name_p, is_throw);\n          }\n\n          ext_object_p->u.array.length = index + 1;\n        }\n      }\n\n#if JERRY_ESNEXT\n      return ecma_op_object_put_apply_receiver (receiver, property_name_p, value, is_throw);\n#endif /* JERRY_ESNEXT */\n\n      ecma_property_value_t *new_prop_value_p;\n      new_prop_value_p = ecma_create_named_data_property (object_p,\n                                                          property_name_p,\n                                                          ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,\n                                                          NULL);\n\n      JERRY_ASSERT (ecma_is_value_undefined (new_prop_value_p->value));\n      new_prop_value_p->value = ecma_copy_value_if_not_object (value);\n      return ECMA_VALUE_TRUE;\n    }\n  }\n\n  if (setter_cp == JMEM_CP_NULL)\n  {\n    return ecma_raise_readonly_assignment (property_name_p, is_throw);\n  }\n\n  ecma_value_t ret_value = ecma_op_function_call (ECMA_GET_NON_NULL_POINTER (ecma_object_t, setter_cp),\n                                                  receiver,\n                                                  &value,\n                                                  1);\n\n  if (!ECMA_IS_VALUE_ERROR (ret_value))\n  {\n    ecma_fast_free_value (ret_value);\n    ret_value = ECMA_VALUE_TRUE;\n  }\n\n  return ret_value;\n}",
        "begin_line": 1388,
        "end_line": 1766,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-reference.ecma_op_object_bound_environment_resolve_reference_value#218",
        "src_path": "jerry-core/ecma/operations/ecma-reference.c",
        "class_name": "jerry-core.ecma.operations.ecma-reference",
        "signature": "jerry-core.ecma.operations.ecma-reference.ecma_op_object_bound_environment_resolve_reference_value (ecma_object_t *lex_env_p, /**< lexical environment */                                                           ecma_string_t *name_p) /**< variable name */",
        "snippet": "ecma_value_t\necma_op_object_bound_environment_resolve_reference_value (ecma_object_t *lex_env_p, /**< lexical environment */\n                                                          ecma_string_t *name_p) /**< variable name */\n{\n  ecma_object_t *binding_obj_p = ecma_get_lex_env_binding_object (lex_env_p);\n  ecma_value_t found_binding;\n\n#if JERRY_BUILTIN_PROXY\n  if (ECMA_OBJECT_IS_PROXY (binding_obj_p))\n  {\n    found_binding = ecma_proxy_object_has (binding_obj_p, name_p);\n\n    if (!ecma_is_value_true (found_binding))\n    {\n      return ECMA_IS_VALUE_ERROR (found_binding) ? found_binding : ECMA_VALUE_NOT_FOUND;\n    }\n  }\n  else\n  {\n#endif /* JERRY_BUILTIN_PROXY */\n    found_binding = ecma_op_object_find (binding_obj_p, name_p);\n\n    if (ECMA_IS_VALUE_ERROR (found_binding) || !ecma_is_value_found (found_binding))\n    {\n      return found_binding;\n    }\n\n#if JERRY_ESNEXT\n    if (JERRY_LIKELY (ecma_op_is_global_environment (lex_env_p)))\n#endif /* JERRY_ESNEXT */\n    {\n      return found_binding;\n    }\n#if JERRY_BUILTIN_PROXY\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n#if JERRY_ESNEXT\n  ecma_value_t blocked = ecma_op_is_prop_unscopable (binding_obj_p, name_p);\n\n  if (ecma_is_value_false (blocked))\n  {\n#if JERRY_BUILTIN_PROXY\n    if (ECMA_OBJECT_IS_PROXY (binding_obj_p))\n    {\n      return ecma_proxy_object_get (binding_obj_p, name_p, ecma_make_object_value (binding_obj_p));\n    }\n#endif /* JERRY_BUILTIN_PROXY */\n    return found_binding;\n  }\n\n#if JERRY_BUILTIN_PROXY\n  if (!ECMA_OBJECT_IS_PROXY (binding_obj_p))\n  {\n    ecma_free_value (found_binding);\n  }\n#endif /* JERRY_BUILTIN_PROXY */\n\n  return ECMA_IS_VALUE_ERROR (blocked) ? blocked : ECMA_VALUE_NOT_FOUND;\n#endif /* JERRY_ESNEXT */\n}",
        "begin_line": 218,
        "end_line": 278,
        "is_bug": false
    },
    {
        "name": "jerry-core.ecma.operations.ecma-reference.ecma_op_resolve_reference_value#285",
        "src_path": "jerry-core/ecma/operations/ecma-reference.c",
        "class_name": "jerry-core.ecma.operations.ecma-reference",
        "signature": "jerry-core.ecma.operations.ecma-reference.ecma_op_resolve_reference_value (ecma_object_t *lex_env_p, /**< starting lexical environment */                                  ecma_string_t *name_p) /**< identifier's name */",
        "snippet": "ecma_value_t\necma_op_resolve_reference_value (ecma_object_t *lex_env_p, /**< starting lexical environment */\n                                 ecma_string_t *name_p) /**< identifier's name */\n{\n  JERRY_ASSERT (lex_env_p != NULL);\n\n  while (true)\n  {\n    switch (ecma_get_lex_env_type (lex_env_p))\n    {\n      case ECMA_LEXICAL_ENVIRONMENT_DECLARATIVE:\n      {\n        ecma_property_t *property_p = ecma_find_named_property (lex_env_p, name_p);\n\n        if (property_p == NULL)\n        {\n          break;\n        }\n\n        ecma_property_value_t *property_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n#if JERRY_ESNEXT\n        if (JERRY_UNLIKELY (property_value_p->value == ECMA_VALUE_UNINITIALIZED))\n        {\n          return ecma_raise_reference_error (ECMA_ERR_MSG (ecma_error_let_const_not_initialized));\n        }\n#endif /* JERRY_ESNEXT */\n\n        return ecma_fast_copy_value (property_value_p->value);\n      }\n#if JERRY_ESNEXT\n      case ECMA_LEXICAL_ENVIRONMENT_CLASS:\n      {\n#if JERRY_MODULE_SYSTEM\n        if (lex_env_p->type_flags_refs & ECMA_OBJECT_FLAG_LEXICAL_ENV_HAS_DATA)\n        {\n          ecma_property_t *property_p = ecma_find_named_property (lex_env_p, name_p);\n\n          if (property_p == NULL)\n          {\n            break;\n          }\n\n          ecma_property_value_t *property_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n          if (!(*property_p & ECMA_PROPERTY_FLAG_DATA))\n          {\n            property_value_p = ecma_get_property_value_from_named_reference (property_value_p);\n          }\n\n          if (JERRY_UNLIKELY (property_value_p->value == ECMA_VALUE_UNINITIALIZED))\n          {\n            return ecma_raise_reference_error (ECMA_ERR_MSG (ecma_error_let_const_not_initialized));\n          }\n\n          return ecma_fast_copy_value (property_value_p->value);\n        }\n#endif /* JERRY_MODULE_SYSTEM */\n        break;\n      }\n#endif /* JERRY_ESNEXT */\n      default:\n      {\n        JERRY_ASSERT (ecma_get_lex_env_type (lex_env_p) == ECMA_LEXICAL_ENVIRONMENT_THIS_OBJECT_BOUND);\n#if JERRY_ESNEXT\n        bool lcache_lookup_allowed = ecma_op_is_global_environment (lex_env_p);\n#else /* !JERRY_ESNEXT*/\n        bool lcache_lookup_allowed = true;\n#endif /* JERRY_ESNEXT */\n\n        if (lcache_lookup_allowed)\n        {\n#if JERRY_LCACHE\n          ecma_object_t *binding_obj_p = ecma_get_lex_env_binding_object (lex_env_p);\n          ecma_property_t *property_p = ecma_lcache_lookup (binding_obj_p, name_p);\n\n          if (property_p != NULL)\n          {\n            JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));\n\n            ecma_property_value_t *prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n            if (*property_p & ECMA_PROPERTY_FLAG_DATA)\n            {\n              return ecma_fast_copy_value (prop_value_p->value);\n            }\n\n            ecma_getter_setter_pointers_t *get_set_pair_p = ecma_get_named_accessor_property (prop_value_p);\n\n            if (get_set_pair_p->getter_cp == JMEM_CP_NULL)\n            {\n              return ECMA_VALUE_UNDEFINED;\n            }\n\n            ecma_object_t *getter_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, get_set_pair_p->getter_cp);\n\n            ecma_value_t base_value = ecma_make_object_value (binding_obj_p);\n            return ecma_op_function_call (getter_p, base_value, NULL, 0);\n          }\n#endif /* JERRY_LCACHE */\n        }\n\n        ecma_value_t result = ecma_op_object_bound_environment_resolve_reference_value (lex_env_p, name_p);\n\n        if (ecma_is_value_found (result))\n        {\n          /* Note: the result may contains ECMA_VALUE_ERROR */\n          return result;\n        }\n        break;\n      }\n    }\n\n    if (lex_env_p->u2.outer_reference_cp == JMEM_CP_NULL)\n    {\n      break;\n    }\n\n    lex_env_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, lex_env_p->u2.outer_reference_cp);\n  }\n\n#if JERRY_ERROR_MESSAGES\n  ecma_value_t name_val = ecma_make_string_value (name_p);\n  ecma_value_t error_value = ecma_raise_standard_error_with_format (JERRY_ERROR_REFERENCE,\n                                                                    \"% is not defined\",\n                                                                    name_val);\n#else /* JERRY_ERROR_MESSAGES */\n  ecma_value_t error_value = ecma_raise_reference_error (NULL);\n#endif /* !JERRY_ERROR_MESSAGES */\n  return error_value;\n}",
        "begin_line": 285,
        "end_line": 415,
        "is_bug": false
    },
    {
        "name": "jerry-core.jcontext.jcontext.jcontext_take_exception#111",
        "src_path": "jerry-core/jcontext/jcontext.c",
        "class_name": "jerry-core.jcontext.jcontext",
        "signature": "jerry-core.jcontext.jcontext.jcontext_take_exception (void)",
        "snippet": "ecma_value_t\njcontext_take_exception (void)\n{\n  JERRY_ASSERT (jcontext_has_pending_exception ());\n\n  JERRY_CONTEXT (status_flags) &= (uint32_t) ~(ECMA_STATUS_EXCEPTION\n#if JERRY_VM_THROW\n                                               | ECMA_STATUS_ERROR_THROWN\n#endif /* JERRY_VM_THROW */\n                                               | ECMA_STATUS_ABORT);\n  return JERRY_CONTEXT (error_value);\n}",
        "begin_line": 111,
        "end_line": 122,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-allocator.jmem_init#149",
        "src_path": "jerry-core/jmem/jmem-allocator.c",
        "class_name": "jerry-core.jmem.jmem-allocator",
        "signature": "jerry-core.jmem.jmem-allocator.jmem_init (void)",
        "snippet": "void\njmem_init (void)\n{\n  jmem_heap_init ();\n}",
        "begin_line": 149,
        "end_line": 153,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-heap.jmem_heap_gc_and_alloc_block#270",
        "src_path": "jerry-core/jmem/jmem-heap.c",
        "class_name": "jerry-core.jmem.jmem-heap",
        "signature": "jerry-core.jmem.jmem-heap.jmem_heap_gc_and_alloc_block (const size_t size, /**< required memory size */                               jmem_pressure_t max_pressure) /**< pressure limit */",
        "snippet": "static void *\njmem_heap_gc_and_alloc_block (const size_t size, /**< required memory size */\n                              jmem_pressure_t max_pressure) /**< pressure limit */\n{\n  if (JERRY_UNLIKELY (size == 0))\n  {\n    return NULL;\n  }\n\n  jmem_pressure_t pressure = JMEM_PRESSURE_NONE;\n\n#if !JERRY_MEM_GC_BEFORE_EACH_ALLOC\n  if (JERRY_CONTEXT (jmem_heap_allocated_size) + size >= JERRY_CONTEXT (jmem_heap_limit))\n  {\n    pressure = JMEM_PRESSURE_LOW;\n    ecma_free_unused_memory (pressure);\n  }\n#else /* !JERRY_MEM_GC_BEFORE_EACH_ALLOC */\n  ecma_gc_run ();\n#endif /* JERRY_MEM_GC_BEFORE_EACH_ALLOC */\n\n  void *data_space_p = jmem_heap_alloc (size);\n\n  while (JERRY_UNLIKELY (data_space_p == NULL) && JERRY_LIKELY (pressure < max_pressure))\n  {\n    pressure++;\n    ecma_free_unused_memory (pressure);\n    data_space_p = jmem_heap_alloc (size);\n  }\n\n  return data_space_p;\n}",
        "begin_line": 270,
        "end_line": 301,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-heap.jmem_heap_init#72",
        "src_path": "jerry-core/jmem/jmem-heap.c",
        "class_name": "jerry-core.jmem.jmem-heap",
        "signature": "jerry-core.jmem.jmem-heap.jmem_heap_init (void)",
        "snippet": "void\njmem_heap_init (void)\n{\n#if !JERRY_SYSTEM_ALLOCATOR\n#if !JERRY_CPOINTER_32_BIT\n  /* the maximum heap size for 16bit compressed pointers should be 512K */\n  JERRY_ASSERT (((UINT16_MAX + 1) << JMEM_ALIGNMENT_LOG) >= JMEM_HEAP_SIZE);\n#endif /* !JERRY_CPOINTER_32_BIT */\n  JERRY_ASSERT ((uintptr_t) JERRY_HEAP_CONTEXT (area) % JMEM_ALIGNMENT == 0);\n\n  JERRY_CONTEXT (jmem_heap_limit) = CONFIG_GC_LIMIT;\n\n  jmem_heap_free_t *const region_p = (jmem_heap_free_t *) JERRY_HEAP_CONTEXT (area);\n\n  region_p->size = JMEM_HEAP_AREA_SIZE;\n  region_p->next_offset = JMEM_HEAP_END_OF_LIST;\n\n  JERRY_HEAP_CONTEXT (first).size = 0;\n  JERRY_HEAP_CONTEXT (first).next_offset = JMEM_HEAP_GET_OFFSET_FROM_ADDR (region_p);\n\n  JERRY_CONTEXT (jmem_heap_list_skip_p) = &JERRY_HEAP_CONTEXT (first);\n\n  JMEM_VALGRIND_NOACCESS_SPACE (&JERRY_HEAP_CONTEXT (first), sizeof (jmem_heap_free_t));\n  JMEM_VALGRIND_NOACCESS_SPACE (JERRY_HEAP_CONTEXT (area), JMEM_HEAP_AREA_SIZE);\n\n#endif /* !JERRY_SYSTEM_ALLOCATOR */\n  JMEM_HEAP_STAT_INIT ();\n}",
        "begin_line": 72,
        "end_line": 99,
        "is_bug": false
    },
    {
        "name": "jerry-core.jmem.jmem-heap.jmem_is_heap_pointer#706",
        "src_path": "jerry-core/jmem/jmem-heap.c",
        "class_name": "jerry-core.jmem.jmem-heap",
        "signature": "jerry-core.jmem.jmem-heap.jmem_is_heap_pointer (const void *pointer) /**< pointer */",
        "snippet": "bool\njmem_is_heap_pointer (const void *pointer) /**< pointer */\n{\n#if !JERRY_SYSTEM_ALLOCATOR\n  return ((uint8_t *) pointer >= JERRY_HEAP_CONTEXT (area)\n          && (uint8_t *) pointer <= (JERRY_HEAP_CONTEXT (area) + JMEM_HEAP_AREA_SIZE));\n#else /* JERRY_SYSTEM_ALLOCATOR */\n  JERRY_UNUSED (pointer);\n  return true;\n#endif /* !JERRY_SYSTEM_ALLOCATOR */\n}",
        "begin_line": 706,
        "end_line": 716,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-char-helpers.lit_char_is_white_space#134",
        "src_path": "jerry-core/lit/lit-char-helpers.c",
        "class_name": "jerry-core.lit.lit-char-helpers",
        "signature": "jerry-core.lit.lit-char-helpers.lit_char_is_white_space (lit_code_point_t c) /**< code point */",
        "snippet": "bool\nlit_char_is_white_space (lit_code_point_t c) /**< code point */\n{\n  if (c <= LIT_UTF8_1_BYTE_CODE_POINT_MAX)\n  {\n    return (c == LIT_CHAR_SP || (c >= LIT_CHAR_TAB && c <= LIT_CHAR_CR));\n  }\n\n  if (c == LIT_CHAR_BOM\n#if !JERRY_ESNEXT\n      /* Mongolian Vowel Separator (u180e) used to be a whitespace character. */\n      || c == LIT_CHAR_MVS\n#endif /* !JERRY_ESNEXT */\n      || c == LIT_CHAR_LS\n      || c == LIT_CHAR_PS)\n  {\n    return true;\n  }\n\n  return (c <= LIT_UTF16_CODE_UNIT_MAX\n          && ((c >= lit_unicode_white_space_interval_starts[0]\n                 && c <= lit_unicode_white_space_interval_starts[0] + lit_unicode_white_space_interval_lengths[0])\n              || lit_search_char_in_array ((ecma_char_t) c,\n                                            lit_unicode_white_space_chars,\n                                            NUM_OF_ELEMENTS (lit_unicode_white_space_chars))));\n}",
        "begin_line": 134,
        "end_line": 159,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-char-helpers.lit_code_point_is_identifier_part#281",
        "src_path": "jerry-core/lit/lit-char-helpers.c",
        "class_name": "jerry-core.lit.lit-char-helpers",
        "signature": "jerry-core.lit.lit-char-helpers.lit_code_point_is_identifier_part (lit_code_point_t code_point) /**< code point */",
        "snippet": "bool\nlit_code_point_is_identifier_part (lit_code_point_t code_point) /**< code point */\n{\n  /* Fast path for ASCII-defined letters. */\n  if (code_point <= LIT_UTF8_1_BYTE_CODE_POINT_MAX)\n  {\n    return ((LEXER_TO_ASCII_LOWERCASE (code_point) >= LIT_CHAR_LOWERCASE_A\n             && LEXER_TO_ASCII_LOWERCASE (code_point) <= LIT_CHAR_LOWERCASE_Z)\n            || (code_point >= LIT_CHAR_0 && code_point <= LIT_CHAR_9)\n            || code_point == LIT_CHAR_DOLLAR_SIGN\n            || code_point == LIT_CHAR_UNDERSCORE);\n  }\n\n  return lit_char_is_unicode_id_continue (code_point);\n}",
        "begin_line": 281,
        "end_line": 295,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-char-helpers.lit_code_point_is_identifier_start#261",
        "src_path": "jerry-core/lit/lit-char-helpers.c",
        "class_name": "jerry-core.lit.lit-char-helpers",
        "signature": "jerry-core.lit.lit-char-helpers.lit_code_point_is_identifier_start (lit_code_point_t code_point) /**< code point */",
        "snippet": "bool\nlit_code_point_is_identifier_start (lit_code_point_t code_point) /**< code point */\n{\n  /* Fast path for ASCII-defined letters. */\n  if (code_point <= LIT_UTF8_1_BYTE_CODE_POINT_MAX)\n  {\n    return ((LEXER_TO_ASCII_LOWERCASE (code_point) >= LIT_CHAR_LOWERCASE_A\n             && LEXER_TO_ASCII_LOWERCASE (code_point) <= LIT_CHAR_LOWERCASE_Z)\n            || code_point == LIT_CHAR_DOLLAR_SIGN\n            || code_point == LIT_CHAR_UNDERSCORE);\n  }\n\n  return lit_char_is_unicode_id_start (code_point);\n}",
        "begin_line": 261,
        "end_line": 274,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-magic-strings.lit_get_magic_string_size#67",
        "src_path": "jerry-core/lit/lit-magic-strings.c",
        "class_name": "jerry-core.lit.lit-magic-strings",
        "signature": "jerry-core.lit.lit-magic-strings.lit_get_magic_string_size (uint32_t id) /**< magic string id */",
        "snippet": "lit_utf8_size_t\nlit_get_magic_string_size (uint32_t id) /**< magic string id */\n{\n  static const lit_magic_size_t lit_magic_string_sizes[] JERRY_ATTR_CONST_DATA =\n  {\n/** @cond doxygen_suppress */\n#define LIT_MAGIC_STRING_FIRST_STRING_WITH_SIZE(size, id)\n#define LIT_MAGIC_STRING_DEF(id, utf8_string) \\\n    sizeof(utf8_string) - 1,\n#include \"lit-magic-strings.inc.h\"\n#undef LIT_MAGIC_STRING_DEF\n#undef LIT_MAGIC_STRING_FIRST_STRING_WITH_SIZE\n/** @endcond */\n  };\n\n  JERRY_ASSERT (id < LIT_NON_INTERNAL_MAGIC_STRING__COUNT);\n\n  return lit_magic_string_sizes[id];\n}",
        "begin_line": 67,
        "end_line": 85,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-magic-strings.lit_get_magic_string_size_block_start#93",
        "src_path": "jerry-core/lit/lit-magic-strings.c",
        "class_name": "jerry-core.lit.lit-magic-strings",
        "signature": "jerry-core.lit.lit-magic-strings.lit_get_magic_string_size_block_start (lit_utf8_size_t size) /**< magic string size */",
        "snippet": "static lit_magic_string_id_t\nlit_get_magic_string_size_block_start (lit_utf8_size_t size) /**< magic string size */\n{\n  static const lit_magic_string_id_t lit_magic_string_size_block_starts[] JERRY_ATTR_CONST_DATA =\n  {\n/** @cond doxygen_suppress */\n#define LIT_MAGIC_STRING_DEF(id, utf8_string)\n#define LIT_MAGIC_STRING_FIRST_STRING_WITH_SIZE(size, id) \\\n    id,\n#include \"lit-magic-strings.inc.h\"\n    LIT_NON_INTERNAL_MAGIC_STRING__COUNT\n#undef LIT_MAGIC_STRING_DEF\n#undef LIT_MAGIC_STRING_FIRST_STRING_WITH_SIZE\n/** @endcond */\n  };\n\n  JERRY_ASSERT (size <= (sizeof (lit_magic_string_size_block_starts) / sizeof (lit_magic_string_id_t)));\n\n  return lit_magic_string_size_block_starts[size];\n}",
        "begin_line": 93,
        "end_line": 112,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-magic-strings.lit_get_magic_string_utf8#42",
        "src_path": "jerry-core/lit/lit-magic-strings.c",
        "class_name": "jerry-core.lit.lit-magic-strings",
        "signature": "jerry-core.lit.lit-magic-strings.lit_get_magic_string_utf8 (uint32_t id) /**< magic string id */",
        "snippet": "const lit_utf8_byte_t *\nlit_get_magic_string_utf8 (uint32_t id) /**< magic string id */\n{\n  static const lit_utf8_byte_t * const lit_magic_strings[] JERRY_ATTR_CONST_DATA =\n  {\n/** @cond doxygen_suppress */\n#define LIT_MAGIC_STRING_FIRST_STRING_WITH_SIZE(size, id)\n#define LIT_MAGIC_STRING_DEF(id, utf8_string) \\\n    (const lit_utf8_byte_t *) utf8_string,\n#include \"lit-magic-strings.inc.h\"\n#undef LIT_MAGIC_STRING_DEF\n#undef LIT_MAGIC_STRING_FIRST_STRING_WITH_SIZE\n/** @endcond */\n  };\n\n  JERRY_ASSERT (id < LIT_NON_INTERNAL_MAGIC_STRING__COUNT);\n\n  return lit_magic_strings[id];\n}",
        "begin_line": 42,
        "end_line": 60,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-magic-strings.lit_is_utf8_string_magic#202",
        "src_path": "jerry-core/lit/lit-magic-strings.c",
        "class_name": "jerry-core.lit.lit-magic-strings",
        "signature": "jerry-core.lit.lit-magic-strings.lit_is_utf8_string_magic (const lit_utf8_byte_t *string_p, /**< utf-8 string */                           lit_utf8_size_t string_size) /**< string size in bytes */",
        "snippet": "lit_magic_string_id_t\nlit_is_utf8_string_magic (const lit_utf8_byte_t *string_p, /**< utf-8 string */\n                          lit_utf8_size_t string_size) /**< string size in bytes */\n{\n  if (string_size > lit_get_magic_string_size (LIT_NON_INTERNAL_MAGIC_STRING__COUNT - 1))\n  {\n    return LIT_MAGIC_STRING__COUNT;\n  }\n\n  /**< The string must be in this id range. */\n  lit_utf8_size_t first = lit_get_magic_string_size_block_start (string_size);\n  lit_utf8_size_t last = lit_get_magic_string_size_block_start (string_size + 1);\n\n  while (first < last)\n  {\n    lit_utf8_size_t middle = ((first + last) / 2); /**< mid point of search */\n    int compare = memcmp (lit_get_magic_string_utf8 ((lit_magic_string_id_t) middle), string_p, string_size);\n\n    if (compare == 0)\n    {\n      return (lit_magic_string_id_t) middle;\n    }\n    else if (compare > 0)\n    {\n      last = middle;\n    }\n    else\n    {\n      first = middle + 1;\n    }\n  }\n\n  return LIT_MAGIC_STRING__COUNT;\n}",
        "begin_line": 202,
        "end_line": 235,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-magic-strings.lit_is_utf8_string_pair_magic#243",
        "src_path": "jerry-core/lit/lit-magic-strings.c",
        "class_name": "jerry-core.lit.lit-magic-strings",
        "signature": "jerry-core.lit.lit-magic-strings.lit_is_utf8_string_pair_magic (const lit_utf8_byte_t *string1_p, /**< first utf-8 string */                                lit_utf8_size_t string1_size, /**< first string size in bytes */                                const lit_utf8_byte_t *string2_p, /**< second utf-8 string */                                lit_utf8_size_t string2_size) /**< second string size in bytes */",
        "snippet": "lit_magic_string_id_t\nlit_is_utf8_string_pair_magic (const lit_utf8_byte_t *string1_p, /**< first utf-8 string */\n                               lit_utf8_size_t string1_size, /**< first string size in bytes */\n                               const lit_utf8_byte_t *string2_p, /**< second utf-8 string */\n                               lit_utf8_size_t string2_size) /**< second string size in bytes */\n{\n  lit_utf8_size_t total_string_size = string1_size + string2_size;\n\n  if (total_string_size > lit_get_magic_string_size (LIT_NON_INTERNAL_MAGIC_STRING__COUNT - 1))\n  {\n    return LIT_MAGIC_STRING__COUNT;\n  }\n\n  /**< The string must be in this id range. */\n  lit_utf8_size_t first = lit_get_magic_string_size_block_start (total_string_size);\n  lit_utf8_size_t last = lit_get_magic_string_size_block_start (total_string_size + 1);\n\n  while (first < last)\n  {\n    lit_utf8_size_t middle = ((first + last) / 2); /**< mid point of search */\n    const lit_utf8_byte_t *middle_string_p = lit_get_magic_string_utf8 ((lit_magic_string_id_t) middle);\n\n    int compare = memcmp (middle_string_p, string1_p, string1_size);\n\n    if (compare == 0)\n    {\n      compare = memcmp (middle_string_p + string1_size, string2_p, string2_size);\n    }\n\n    if (compare == 0)\n    {\n      return (lit_magic_string_id_t) middle;\n    }\n    else if (compare > 0)\n    {\n      last = middle;\n    }\n    else\n    {\n      first = middle + 1;\n    }\n  }\n\n  return LIT_MAGIC_STRING__COUNT;\n}",
        "begin_line": 243,
        "end_line": 287,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_is_valid_cesu8_string#118",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_is_valid_cesu8_string (const lit_utf8_byte_t *cesu8_buf_p, /**< cesu-8 string */                            lit_utf8_size_t buf_size) /**< string size */",
        "snippet": "bool\nlit_is_valid_cesu8_string (const lit_utf8_byte_t *cesu8_buf_p, /**< cesu-8 string */\n                           lit_utf8_size_t buf_size) /**< string size */\n{\n  lit_utf8_size_t idx = 0;\n\n  while (idx < buf_size)\n  {\n    lit_utf8_byte_t c = cesu8_buf_p[idx++];\n    if ((c & LIT_UTF8_1_BYTE_MASK) == LIT_UTF8_1_BYTE_MARKER)\n    {\n      continue;\n    }\n\n    lit_code_point_t code_point = 0;\n    lit_code_point_t min_code_point = 0;\n    lit_utf8_size_t extra_bytes_count;\n    if ((c & LIT_UTF8_2_BYTE_MASK) == LIT_UTF8_2_BYTE_MARKER)\n    {\n      extra_bytes_count = 1;\n      min_code_point = LIT_UTF8_2_BYTE_CODE_POINT_MIN;\n      code_point = ((uint32_t) (c & LIT_UTF8_LAST_5_BITS_MASK));\n    }\n    else if ((c & LIT_UTF8_3_BYTE_MASK) == LIT_UTF8_3_BYTE_MARKER)\n    {\n      extra_bytes_count = 2;\n      min_code_point = LIT_UTF8_3_BYTE_CODE_POINT_MIN;\n      code_point = ((uint32_t) (c & LIT_UTF8_LAST_4_BITS_MASK));\n    }\n    else\n    {\n      return false;\n    }\n\n    if (idx + extra_bytes_count > buf_size)\n    {\n      /* cesu-8 string breaks in the middle */\n      return false;\n    }\n\n    for (lit_utf8_size_t offset = 0; offset < extra_bytes_count; ++offset)\n    {\n      c = cesu8_buf_p[idx + offset];\n      if ((c & LIT_UTF8_EXTRA_BYTE_MASK) != LIT_UTF8_EXTRA_BYTE_MARKER)\n      {\n        /* invalid continuation byte */\n        return false;\n      }\n      code_point <<= LIT_UTF8_BITS_IN_EXTRA_BYTES;\n      code_point |= (c & LIT_UTF8_LAST_6_BITS_MASK);\n    }\n\n    if (code_point < min_code_point)\n    {\n      /* cesu-8 string doesn't encode valid unicode code point */\n      return false;\n    }\n\n    idx += extra_bytes_count;\n  }\n\n  return true;\n}",
        "begin_line": 118,
        "end_line": 180,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_is_valid_utf8_string#38",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_is_valid_utf8_string (const lit_utf8_byte_t *utf8_buf_p, /**< utf-8 string */                           lit_utf8_size_t buf_size, /**< string size */                           bool is_strict) /**< true if surrogate pairs are not allowed */",
        "snippet": "bool\nlit_is_valid_utf8_string (const lit_utf8_byte_t *utf8_buf_p, /**< utf-8 string */\n                          lit_utf8_size_t buf_size, /**< string size */\n                          bool is_strict) /**< true if surrogate pairs are not allowed */\n{\n  const unsigned char *end = buf_size + utf8_buf_p;\n\n  const unsigned char *idx = (const unsigned char *) utf8_buf_p;\n\n  while (idx < end)\n  {\n    const uint8_t first_byte = *idx++;\n\n    if (first_byte < LIT_UTF8_EXTRA_BYTE_MARKER)\n    {\n      continue;\n    }\n\n    if (first_byte < LIT_UTF8_VALID_TWO_BYTE_START || idx >= end)\n    {\n      return false;\n    }\n\n    const uint8_t second_byte = *idx++;\n\n    if ((second_byte & LIT_UTF8_EXTRA_BYTE_MASK) != LIT_UTF8_EXTRA_BYTE_MARKER)\n    {\n      return false;\n    }\n\n    if (first_byte < LIT_UTF8_3_BYTE_MARKER)\n    {\n      continue;\n    }\n\n    if (idx >= end || (*idx++ & LIT_UTF8_EXTRA_BYTE_MASK) != LIT_UTF8_EXTRA_BYTE_MARKER)\n    {\n      return false;\n    }\n\n    if (first_byte < LIT_UTF8_4_BYTE_MARKER)\n    {\n      if (first_byte == LIT_UTF8_3_BYTE_MARKER && (second_byte & LIT_UTF8_2_BYTE_MASK) == LIT_UTF8_EXTRA_BYTE_MARKER)\n      {\n        return false;\n      }\n\n      if (is_strict\n          && first_byte == LIT_UTF8_SURROGATE_MARKER\n          && second_byte >= LIT_UTF8_HIGH_SURROGATE_MIN\n          && second_byte <= LIT_UTF8_HIGH_SURROGATE_MAX\n          && idx + 3 <= end\n          && idx[0] == LIT_UTF8_SURROGATE_MARKER\n          && idx[1] >= LIT_UTF8_LOW_SURROGATE_MIN\n          && idx[1] <= LIT_UTF8_LOW_SURROGATE_MAX)\n      {\n        return false;\n      }\n      continue;\n    }\n\n    if (idx >= end\n        || first_byte > LIT_UTF8_1_BYTE_MAX\n        || (first_byte == LIT_UTF8_4_BYTE_MARKER && second_byte <= LIT_UTF8_EXTRA_BYTE_MARKER)\n        || (first_byte == LIT_UTF8_1_BYTE_MAX && second_byte > LIT_UTF8_2_BYTE_MAX)\n        || (*idx++ & LIT_UTF8_EXTRA_BYTE_MASK) != LIT_UTF8_EXTRA_BYTE_MARKER)\n    {\n      return false;\n    }\n  }\n\n  return true;\n}",
        "begin_line": 38,
        "end_line": 110,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_read_code_unit_from_cesu8#416",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_read_code_unit_from_cesu8 (const lit_utf8_byte_t *buf_p, /**< buffer with characters */                                ecma_char_t *code_unit) /**< [out] code unit */",
        "snippet": "lit_utf8_size_t\nlit_read_code_unit_from_cesu8 (const lit_utf8_byte_t *buf_p, /**< buffer with characters */\n                               ecma_char_t *code_unit) /**< [out] code unit */\n{\n  JERRY_ASSERT (buf_p);\n\n  lit_utf8_byte_t c = buf_p[0];\n  if ((c & LIT_UTF8_1_BYTE_MASK) == LIT_UTF8_1_BYTE_MARKER)\n  {\n    *code_unit = (ecma_char_t) (c & LIT_UTF8_LAST_7_BITS_MASK);\n    return 1;\n  }\n\n  lit_code_point_t ret = LIT_UNICODE_CODE_POINT_NULL;\n  lit_utf8_size_t bytes_count;\n\n  if ((c & LIT_UTF8_2_BYTE_MASK) == LIT_UTF8_2_BYTE_MARKER)\n  {\n    bytes_count = 2;\n    ret = ((lit_code_point_t) (c & LIT_UTF8_LAST_5_BITS_MASK));\n  }\n  else\n  {\n    JERRY_ASSERT ((c & LIT_UTF8_3_BYTE_MASK) == LIT_UTF8_3_BYTE_MARKER);\n    bytes_count = 3;\n    ret = ((lit_code_point_t) (c & LIT_UTF8_LAST_4_BITS_MASK));\n  }\n\n  for (uint32_t i = 1; i < bytes_count; ++i)\n  {\n    ret <<= LIT_UTF8_BITS_IN_EXTRA_BYTES;\n    ret |= (buf_p[i] & LIT_UTF8_LAST_6_BITS_MASK);\n  }\n\n  JERRY_ASSERT (ret <= LIT_UTF16_CODE_UNIT_MAX);\n  *code_unit = (ecma_char_t) ret;\n  return bytes_count;\n}",
        "begin_line": 416,
        "end_line": 453,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_read_prev_code_unit_from_utf8#498",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_read_prev_code_unit_from_utf8 (const lit_utf8_byte_t *buf_p, /**< buffer with characters */                                    ecma_char_t *code_point) /**< [out] code point */",
        "snippet": "lit_utf8_size_t\nlit_read_prev_code_unit_from_utf8 (const lit_utf8_byte_t *buf_p, /**< buffer with characters */\n                                   ecma_char_t *code_point) /**< [out] code point */\n{\n  JERRY_ASSERT (buf_p);\n\n  lit_utf8_decr (&buf_p);\n  return lit_read_code_unit_from_cesu8 (buf_p, code_point);\n}",
        "begin_line": 498,
        "end_line": 506,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_utf8_decr#587",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_utf8_decr (const lit_utf8_byte_t **buf_p) /**< [in, out] buffer with characters */",
        "snippet": "void\nlit_utf8_decr (const lit_utf8_byte_t **buf_p) /**< [in,out] buffer with characters */\n{\n  JERRY_ASSERT (*buf_p);\n  const lit_utf8_byte_t *current_p = *buf_p;\n\n  do\n  {\n    current_p--;\n  }\n  while ((*(current_p) & LIT_UTF8_EXTRA_BYTE_MASK) == LIT_UTF8_EXTRA_BYTE_MARKER);\n\n  *buf_p = current_p;\n}",
        "begin_line": 587,
        "end_line": 600,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_utf8_string_length#281",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_utf8_string_length (const lit_utf8_byte_t *utf8_buf_p, /**< utf-8 string */                         lit_utf8_size_t utf8_buf_size) /**< string size */",
        "snippet": "lit_utf8_size_t\nlit_utf8_string_length (const lit_utf8_byte_t *utf8_buf_p, /**< utf-8 string */\n                        lit_utf8_size_t utf8_buf_size) /**< string size */\n{\n  lit_utf8_size_t length = 0;\n  lit_utf8_size_t size = 0;\n\n  while (size < utf8_buf_size)\n  {\n    size += lit_get_unicode_char_size_by_utf8_first_byte (*(utf8_buf_p + size));\n    length++;\n  }\n\n  JERRY_ASSERT (size == utf8_buf_size);\n\n  return length;\n}",
        "begin_line": 281,
        "end_line": 297,
        "is_bug": false
    },
    {
        "name": "jerry-core.lit.lit-strings.lit_zt_utf8_string_size#269",
        "src_path": "jerry-core/lit/lit-strings.c",
        "class_name": "jerry-core.lit.lit-strings",
        "signature": "jerry-core.lit.lit-strings.lit_zt_utf8_string_size (const lit_utf8_byte_t *utf8_str_p) /**< zero-terminated utf-8 string */",
        "snippet": "lit_utf8_size_t\nlit_zt_utf8_string_size (const lit_utf8_byte_t *utf8_str_p) /**< zero-terminated utf-8 string */\n{\n  JERRY_ASSERT (utf8_str_p != NULL);\n  return (lit_utf8_size_t) strlen ((const char *) utf8_str_p);\n}",
        "begin_line": 269,
        "end_line": 274,
        "is_bug": false
    },
    {
        "name": "jerry-core.parser.js.js-parser.parser_parse_script#3135",
        "src_path": "jerry-core/parser/js/js-parser.c",
        "class_name": "jerry-core.parser.js.js-parser",
        "signature": "jerry-core.parser.js.js-parser.parser_parse_script (void *source_p, /**< source code */                      uint32_t parse_opts, /**< ecma_parse_opts_t option bits */                      const jerry_parse_options_t *options_p) /**< additional configuration options */",
        "snippet": "ecma_compiled_code_t *\nparser_parse_script (void *source_p, /**< source code */\n                     uint32_t parse_opts, /**< ecma_parse_opts_t option bits */\n                     const jerry_parse_options_t *options_p) /**< additional configuration options */\n{\n#if JERRY_PARSER\n  ecma_compiled_code_t *bytecode_p = parser_parse_source (source_p,\n                                                          parse_opts,\n                                                          options_p);\n\n  if (JERRY_UNLIKELY (bytecode_p == NULL))\n  {\n    /* Exception has already thrown. */\n    return NULL;\n  }\n\n#if JERRY_DEBUGGER\n  if ((JERRY_CONTEXT (debugger_flags) & (JERRY_DEBUGGER_CONNECTED | JERRY_DEBUGGER_PARSER_WAIT))\n      == (JERRY_DEBUGGER_CONNECTED | JERRY_DEBUGGER_PARSER_WAIT))\n  {\n    JERRY_DEBUGGER_SET_FLAGS (JERRY_DEBUGGER_PARSER_WAIT_MODE);\n    jerry_debugger_send_type (JERRY_DEBUGGER_WAITING_AFTER_PARSE);\n\n    while (JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_PARSER_WAIT_MODE)\n    {\n      jerry_debugger_receive (NULL);\n\n      if (!(JERRY_CONTEXT (debugger_flags) & JERRY_DEBUGGER_CONNECTED))\n      {\n        break;\n      }\n\n      jerry_debugger_transport_sleep ();\n    }\n  }\n#endif /* JERRY_DEBUGGER */\n\n  return bytecode_p;\n#else /* !JERRY_PARSER */\n  JERRY_UNUSED (arg_list_p);\n  JERRY_UNUSED (arg_list_size);\n  JERRY_UNUSED (source_p);\n  JERRY_UNUSED (source_size);\n  JERRY_UNUSED (parse_opts);\n  JERRY_UNUSED (resource_name);\n\n  ecma_raise_syntax_error (ECMA_ERR_MSG (\"Source code parsing is disabled\"));\n  return NULL;\n#endif /* JERRY_PARSER */\n}",
        "begin_line": 3135,
        "end_line": 3184,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.opcodes-ecma-arithmetics.opfunc_addition#166",
        "src_path": "jerry-core/vm/opcodes-ecma-arithmetics.c",
        "class_name": "jerry-core.vm.opcodes-ecma-arithmetics",
        "signature": "jerry-core.vm.opcodes-ecma-arithmetics.opfunc_addition (ecma_value_t left_value, /**< left value */                  ecma_value_t right_value) /**< right value */",
        "snippet": "ecma_value_t\nopfunc_addition (ecma_value_t left_value, /**< left value */\n                 ecma_value_t right_value) /**< right value */\n{\n  bool free_left_value = false;\n  bool free_right_value = false;\n\n  if (ecma_is_value_object (left_value))\n  {\n    ecma_object_t *obj_p = ecma_get_object_from_value (left_value);\n    left_value = ecma_op_object_default_value (obj_p, ECMA_PREFERRED_TYPE_NO);\n    free_left_value = true;\n\n    if (ECMA_IS_VALUE_ERROR (left_value))\n    {\n      return left_value;\n    }\n  }\n\n  if (ecma_is_value_object (right_value))\n  {\n    ecma_object_t *obj_p = ecma_get_object_from_value (right_value);\n    right_value = ecma_op_object_default_value (obj_p, ECMA_PREFERRED_TYPE_NO);\n    free_right_value = true;\n\n    if (ECMA_IS_VALUE_ERROR (right_value))\n    {\n      if (free_left_value)\n      {\n        ecma_free_value (left_value);\n      }\n      return right_value;\n    }\n  }\n\n  ecma_value_t ret_value = ECMA_VALUE_EMPTY;\n\n  if (ecma_is_value_string (left_value)\n      || ecma_is_value_string (right_value))\n  {\n    ecma_string_t *string1_p = ecma_op_to_string (left_value);\n\n    if (JERRY_UNLIKELY (string1_p == NULL))\n    {\n      if (free_left_value)\n      {\n        ecma_free_value (left_value);\n      }\n      if (free_right_value)\n      {\n        ecma_free_value (right_value);\n      }\n      return ECMA_VALUE_ERROR;\n    }\n\n    ecma_string_t *string2_p = ecma_op_to_string (right_value);\n\n    if (JERRY_UNLIKELY (string2_p == NULL))\n    {\n      if (free_right_value)\n      {\n        ecma_free_value (right_value);\n      }\n      if (free_left_value)\n      {\n        ecma_free_value (left_value);\n      }\n      ecma_deref_ecma_string (string1_p);\n      return ECMA_VALUE_ERROR;\n    }\n\n    string1_p = ecma_concat_ecma_strings (string1_p, string2_p);\n    ret_value = ecma_make_string_value (string1_p);\n\n    ecma_deref_ecma_string (string2_p);\n  }\n#if JERRY_BUILTIN_BIGINT\n  else if (JERRY_UNLIKELY (ecma_is_value_bigint (left_value))\n           && JERRY_UNLIKELY (ecma_is_value_bigint (right_value)))\n  {\n    ret_value = ecma_bigint_add_sub (left_value, right_value, true);\n  }\n#endif /* JERRY_BUILTIN_BIGINT */\n  else\n  {\n    ecma_number_t num_left;\n    ecma_number_t num_right;\n    if (!ECMA_IS_VALUE_ERROR (ecma_op_to_number (left_value, &num_left))\n        && !ECMA_IS_VALUE_ERROR (ecma_op_to_number (right_value, &num_right)))\n    {\n      ret_value = ecma_make_number_value (num_left + num_right);\n    }\n    else\n    {\n      ret_value = ECMA_VALUE_ERROR;\n    }\n  }\n\n  if (free_left_value)\n  {\n    ecma_free_value (left_value);\n  }\n\n  if (free_right_value)\n  {\n    ecma_free_value (right_value);\n  }\n\n  return ret_value;\n}",
        "begin_line": 166,
        "end_line": 275,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.opcodes.opfunc_for_in#282",
        "src_path": "jerry-core/vm/opcodes.c",
        "class_name": "jerry-core.vm.opcodes",
        "signature": "jerry-core.vm.opcodes.opfunc_for_in (ecma_value_t iterable_value, /**< ideally an iterable value */                ecma_value_t *result_obj_p) /**< expression object */",
        "snippet": "ecma_collection_t *\nopfunc_for_in (ecma_value_t iterable_value, /**< ideally an iterable value */\n               ecma_value_t *result_obj_p) /**< expression object */\n{\n  /* 3. */\n  if (ecma_is_value_undefined (iterable_value)\n      || ecma_is_value_null (iterable_value))\n  {\n    return NULL;\n  }\n\n  /* 4. */\n  ecma_value_t obj_expr_value = ecma_op_to_object (iterable_value);\n  /* ecma_op_to_object will only raise error on null/undefined values but those are handled above. */\n  JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (obj_expr_value));\n  ecma_object_t *obj_p = ecma_get_object_from_value (obj_expr_value);\n  ecma_collection_t *prop_names_p = ecma_op_object_enumerate (obj_p);\n\n#if JERRY_ESNEXT\n  if (JERRY_UNLIKELY (prop_names_p == NULL))\n  {\n    ecma_deref_object (obj_p);\n    *result_obj_p = ECMA_VALUE_ERROR;\n    return NULL;\n  }\n#endif /* JERRY_ESNEXT */\n\n  if (prop_names_p->item_count != 0)\n  {\n    *result_obj_p = ecma_make_object_value (obj_p);\n    return prop_names_p;\n  }\n\n  ecma_deref_object (obj_p);\n  ecma_collection_destroy (prop_names_p);\n\n  return NULL;\n}",
        "begin_line": 282,
        "end_line": 319,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.opcodes.opfunc_set_data_property#60",
        "src_path": "jerry-core/vm/opcodes.c",
        "class_name": "jerry-core.vm.opcodes",
        "signature": "jerry-core.vm.opcodes.opfunc_set_data_property (ecma_object_t *object_p, /**< object */                           ecma_string_t *prop_name_p, /**< data property name */                           ecma_value_t value) /**< new value */",
        "snippet": "void\nopfunc_set_data_property (ecma_object_t *object_p, /**< object */\n                          ecma_string_t *prop_name_p, /**< data property name */\n                          ecma_value_t value) /**< new value */\n{\n  JERRY_ASSERT (!ecma_op_object_is_fast_array (object_p));\n\n  ecma_property_t *property_p = ecma_find_named_property (object_p, prop_name_p);\n  ecma_property_value_t *prop_value_p;\n\n  if (property_p == NULL)\n  {\n    prop_value_p = ecma_create_named_data_property (object_p,\n                                                    prop_name_p,\n                                                    ECMA_PROPERTY_CONFIGURABLE_ENUMERABLE_WRITABLE,\n                                                    NULL);\n  }\n  else\n  {\n    JERRY_ASSERT (ECMA_PROPERTY_IS_RAW (*property_p));\n\n    prop_value_p = ECMA_PROPERTY_VALUE_PTR (property_p);\n\n    if (!(*property_p & ECMA_PROPERTY_FLAG_DATA))\n    {\n#if JERRY_CPOINTER_32_BIT\n      ecma_getter_setter_pointers_t *getter_setter_pair_p;\n      getter_setter_pair_p = ECMA_GET_NON_NULL_POINTER (ecma_getter_setter_pointers_t,\n                                                        ECMA_PROPERTY_VALUE_PTR (property_p)->getter_setter_pair_cp);\n      jmem_pools_free (getter_setter_pair_p, sizeof (ecma_getter_setter_pointers_t));\n#endif /* JERRY_CPOINTER_32_BIT */\n\n      *property_p |= ECMA_PROPERTY_FLAG_DATA | ECMA_PROPERTY_FLAG_WRITABLE;\n      prop_value_p->value = ecma_copy_value_if_not_object (value);\n      return;\n    }\n  }\n\n  ecma_named_data_property_assign_value (object_p, prop_value_p, value);\n}",
        "begin_line": 60,
        "end_line": 99,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm-stack.vm_decode_branch_offset#175",
        "src_path": "jerry-core/vm/vm-stack.c",
        "class_name": "jerry-core.vm.vm-stack",
        "signature": "jerry-core.vm.vm-stack.vm_decode_branch_offset (const uint8_t *branch_offset_p, /**< start offset of byte code */                          uint32_t length) /**< length of the branch */",
        "snippet": "static uint32_t\nvm_decode_branch_offset (const uint8_t *branch_offset_p, /**< start offset of byte code */\n                         uint32_t length) /**< length of the branch */\n{\n  uint32_t branch_offset = *branch_offset_p;\n\n  JERRY_ASSERT (length >= 1 && length <= 3);\n\n  switch (length)\n  {\n    case 3:\n    {\n      branch_offset <<= 8;\n      branch_offset |= *(++branch_offset_p);\n      /* FALLTHRU */\n    }\n    case 2:\n    {\n      branch_offset <<= 8;\n      branch_offset |= *(++branch_offset_p);\n      break;\n    }\n  }\n\n  return branch_offset;\n}",
        "begin_line": 175,
        "end_line": 200,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm-stack.vm_stack_context_abort#84",
        "src_path": "jerry-core/vm/vm-stack.c",
        "class_name": "jerry-core.vm.vm-stack",
        "signature": "jerry-core.vm.vm-stack.vm_stack_context_abort (vm_frame_ctx_t *frame_ctx_p, /**< frame context */                         ecma_value_t *vm_stack_top_p) /**< current stack top */",
        "snippet": "ecma_value_t *\nvm_stack_context_abort (vm_frame_ctx_t *frame_ctx_p, /**< frame context */\n                        ecma_value_t *vm_stack_top_p) /**< current stack top */\n{\n  ecma_value_t context_info = vm_stack_top_p[-1];\n\n  if (context_info & VM_CONTEXT_HAS_LEX_ENV)\n  {\n    ecma_object_t *lex_env_p = frame_ctx_p->lex_env_p;\n    JERRY_ASSERT (lex_env_p->u2.outer_reference_cp != JMEM_CP_NULL);\n    frame_ctx_p->lex_env_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, lex_env_p->u2.outer_reference_cp);\n    ecma_deref_object (lex_env_p);\n  }\n\n  switch (VM_GET_CONTEXT_TYPE (context_info))\n  {\n    case VM_CONTEXT_FINALLY_THROW:\n    case VM_CONTEXT_FINALLY_RETURN:\n    {\n      ecma_free_value (vm_stack_top_p[-2]);\n      /* FALLTHRU */\n    }\n    case VM_CONTEXT_FINALLY_JUMP:\n    {\n      VM_MINUS_EQUAL_U16 (frame_ctx_p->context_depth, PARSER_FINALLY_CONTEXT_STACK_ALLOCATION);\n      vm_stack_top_p -= PARSER_FINALLY_CONTEXT_STACK_ALLOCATION;\n      break;\n    }\n    case VM_CONTEXT_TRY:\n    case VM_CONTEXT_CATCH:\n#if JERRY_ESNEXT\n    case VM_CONTEXT_BLOCK:\n#endif /* JERRY_ESNEXT */\n    case VM_CONTEXT_WITH:\n    {\n      VM_MINUS_EQUAL_U16 (frame_ctx_p->context_depth, PARSER_WITH_CONTEXT_STACK_ALLOCATION);\n      vm_stack_top_p -= PARSER_WITH_CONTEXT_STACK_ALLOCATION;\n      break;\n    }\n#if JERRY_ESNEXT\n    case VM_CONTEXT_ITERATOR:\n    case VM_CONTEXT_OBJ_INIT:\n    case VM_CONTEXT_OBJ_INIT_REST:\n    {\n      vm_stack_top_p = vm_stack_context_abort_variable_length (frame_ctx_p, vm_stack_top_p, 0);\n      break;\n    }\n    case VM_CONTEXT_FOR_OF:\n    case VM_CONTEXT_FOR_AWAIT_OF:\n    {\n      ecma_free_value (vm_stack_top_p[-2]);\n      ecma_free_value (vm_stack_top_p[-3]);\n      ecma_free_value (vm_stack_top_p[-4]);\n\n      VM_MINUS_EQUAL_U16 (frame_ctx_p->context_depth, PARSER_FOR_OF_CONTEXT_STACK_ALLOCATION);\n      vm_stack_top_p -= PARSER_FOR_OF_CONTEXT_STACK_ALLOCATION;\n      break;\n    }\n#endif /* JERRY_ESNEXT */\n    default:\n    {\n      JERRY_ASSERT (VM_GET_CONTEXT_TYPE (vm_stack_top_p[-1]) == VM_CONTEXT_FOR_IN);\n\n      ecma_collection_t *collection_p;\n      collection_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_collection_t, vm_stack_top_p[-2]);\n\n      ecma_value_t *buffer_p = collection_p->buffer_p;\n\n      for (uint32_t index = vm_stack_top_p[-3]; index < collection_p->item_count; index++)\n      {\n        ecma_free_value (buffer_p[index]);\n      }\n\n      ecma_collection_destroy (collection_p);\n\n      ecma_free_value (vm_stack_top_p[-4]);\n\n      VM_MINUS_EQUAL_U16 (frame_ctx_p->context_depth, PARSER_FOR_IN_CONTEXT_STACK_ALLOCATION);\n      vm_stack_top_p -= PARSER_FOR_IN_CONTEXT_STACK_ALLOCATION;\n      break;\n    }\n  }\n\n  return vm_stack_top_p;\n}",
        "begin_line": 84,
        "end_line": 168,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm-stack.vm_stack_find_finally#219",
        "src_path": "jerry-core/vm/vm-stack.c",
        "class_name": "jerry-core.vm.vm-stack",
        "signature": "jerry-core.vm.vm-stack.vm_stack_find_finally (vm_frame_ctx_t *frame_ctx_p, /**< frame context */                        ecma_value_t *stack_top_p, /**< current stack top */                        vm_stack_context_type_t finally_type, /**< searching this finally */                        uint32_t search_limit) /**< search up-to this byte code */",
        "snippet": "vm_stack_found_type\nvm_stack_find_finally (vm_frame_ctx_t *frame_ctx_p, /**< frame context */\n                       ecma_value_t *stack_top_p, /**< current stack top */\n                       vm_stack_context_type_t finally_type, /**< searching this finally */\n                       uint32_t search_limit) /**< search up-to this byte code */\n{\n  JERRY_ASSERT (finally_type <= VM_CONTEXT_FINALLY_RETURN);\n\n  if (finally_type != VM_CONTEXT_FINALLY_JUMP)\n  {\n    search_limit = 0xffffffffu;\n  }\n\n  while (frame_ctx_p->context_depth > 0)\n  {\n    vm_stack_context_type_t context_type = VM_GET_CONTEXT_TYPE (stack_top_p[-1]);\n    uint32_t context_end = VM_GET_CONTEXT_END (stack_top_p[-1]);\n    JERRY_ASSERT (!VM_CONTEXT_IS_VARIABLE_LENGTH (context_type) || finally_type != VM_CONTEXT_FINALLY_JUMP);\n\n    if (!VM_CONTEXT_IS_VARIABLE_LENGTH (context_type) && search_limit < context_end)\n    {\n      frame_ctx_p->stack_top_p = stack_top_p;\n      return VM_CONTEXT_FOUND_EXPECTED;\n    }\n\n    if (context_type == VM_CONTEXT_TRY || context_type == VM_CONTEXT_CATCH)\n    {\n      const uint8_t *byte_code_p;\n      uint32_t branch_offset_length;\n      uint32_t branch_offset;\n\n      if (search_limit == context_end)\n      {\n        frame_ctx_p->stack_top_p = stack_top_p;\n        return VM_CONTEXT_FOUND_EXPECTED;\n      }\n\n#if JERRY_ESNEXT\n      if (stack_top_p[-1] & VM_CONTEXT_HAS_LEX_ENV)\n      {\n        ecma_object_t *lex_env_p = frame_ctx_p->lex_env_p;\n        JERRY_ASSERT (lex_env_p->u2.outer_reference_cp != JMEM_CP_NULL);\n        frame_ctx_p->lex_env_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, lex_env_p->u2.outer_reference_cp);\n        ecma_deref_object (lex_env_p);\n      }\n#endif /* JERRY_ESNEXT */\n\n      byte_code_p = frame_ctx_p->byte_code_start_p + context_end;\n\n      if (context_type == VM_CONTEXT_TRY)\n      {\n        JERRY_ASSERT (byte_code_p[0] == CBC_EXT_OPCODE);\n\n        if (byte_code_p[1] >= CBC_EXT_CATCH\n            && byte_code_p[1] <= CBC_EXT_CATCH_3)\n        {\n          branch_offset_length = CBC_BRANCH_OFFSET_LENGTH (byte_code_p[1]);\n          branch_offset = vm_decode_branch_offset (byte_code_p + 2,\n                                                   branch_offset_length);\n\n          if (finally_type == VM_CONTEXT_FINALLY_THROW)\n          {\n            branch_offset += (uint32_t) (byte_code_p - frame_ctx_p->byte_code_start_p);\n\n            stack_top_p[-1] = VM_CREATE_CONTEXT (VM_CONTEXT_CATCH, branch_offset);\n\n            byte_code_p += 2 + branch_offset_length;\n            frame_ctx_p->byte_code_p = byte_code_p;\n            frame_ctx_p->stack_top_p = stack_top_p;\n            return VM_CONTEXT_FOUND_FINALLY;\n          }\n\n          byte_code_p += branch_offset;\n\n          if (*byte_code_p == CBC_CONTEXT_END)\n          {\n            VM_MINUS_EQUAL_U16 (frame_ctx_p->context_depth, PARSER_TRY_CONTEXT_STACK_ALLOCATION);\n            stack_top_p -= PARSER_TRY_CONTEXT_STACK_ALLOCATION;\n            continue;\n          }\n        }\n      }\n      else\n      {\n        JERRY_ASSERT (context_type == VM_CONTEXT_CATCH);\n\n#if !JERRY_ESNEXT\n        if (stack_top_p[-1] & VM_CONTEXT_HAS_LEX_ENV)\n        {\n          ecma_object_t *lex_env_p = frame_ctx_p->lex_env_p;\n          JERRY_ASSERT (lex_env_p->u2.outer_reference_cp != JMEM_CP_NULL);\n          frame_ctx_p->lex_env_p = ECMA_GET_NON_NULL_POINTER (ecma_object_t, lex_env_p->u2.outer_reference_cp);\n          ecma_deref_object (lex_env_p);\n        }\n#endif /* !JERRY_ESNEXT */\n\n        if (byte_code_p[0] == CBC_CONTEXT_END)\n        {\n          VM_MINUS_EQUAL_U16 (frame_ctx_p->context_depth, PARSER_TRY_CONTEXT_STACK_ALLOCATION);\n          stack_top_p -= PARSER_TRY_CONTEXT_STACK_ALLOCATION;\n          continue;\n        }\n      }\n\n      JERRY_ASSERT (byte_code_p[0] == CBC_EXT_OPCODE);\n\n      VM_PLUS_EQUAL_U16 (frame_ctx_p->context_depth, PARSER_FINALLY_CONTEXT_EXTRA_STACK_ALLOCATION);\n      stack_top_p += PARSER_FINALLY_CONTEXT_EXTRA_STACK_ALLOCATION;\n\n#if JERRY_ESNEXT\n      if (JERRY_UNLIKELY (byte_code_p[1] == CBC_EXT_ASYNC_EXIT))\n      {\n        branch_offset = (uint32_t) (byte_code_p - frame_ctx_p->byte_code_start_p);\n        stack_top_p[-1] = VM_CREATE_CONTEXT ((uint32_t) finally_type, branch_offset);\n\n        frame_ctx_p->byte_code_p = byte_code_p;\n        frame_ctx_p->stack_top_p = stack_top_p;\n        return VM_CONTEXT_FOUND_FINALLY;\n      }\n#endif /* JERRY_ESNEXT */\n\n      JERRY_ASSERT (byte_code_p[1] >= CBC_EXT_FINALLY\n                    && byte_code_p[1] <= CBC_EXT_FINALLY_3);\n\n      branch_offset_length = CBC_BRANCH_OFFSET_LENGTH (byte_code_p[1]);\n      branch_offset = vm_decode_branch_offset (byte_code_p + 2,\n                                               branch_offset_length);\n\n      branch_offset += (uint32_t) (byte_code_p - frame_ctx_p->byte_code_start_p);\n\n      stack_top_p[-1] = VM_CREATE_CONTEXT ((uint32_t) finally_type, branch_offset);\n\n      byte_code_p += 2 + branch_offset_length;\n      frame_ctx_p->byte_code_p = byte_code_p;\n      frame_ctx_p->stack_top_p = stack_top_p;\n      return VM_CONTEXT_FOUND_FINALLY;\n    }\n#if JERRY_ESNEXT\n    else if (stack_top_p[-1] & VM_CONTEXT_CLOSE_ITERATOR)\n    {\n      JERRY_ASSERT (context_type == VM_CONTEXT_FOR_OF\n                    || context_type == VM_CONTEXT_FOR_AWAIT_OF\n                    || context_type == VM_CONTEXT_ITERATOR);\n      JERRY_ASSERT (finally_type == VM_CONTEXT_FINALLY_THROW || !jcontext_has_pending_exception ());\n\n      ecma_value_t exception = ECMA_VALUE_UNDEFINED;\n      if (finally_type == VM_CONTEXT_FINALLY_THROW)\n      {\n        exception = jcontext_take_exception ();\n      }\n\n      ecma_value_t result;\n\n      if (context_type == VM_CONTEXT_ITERATOR)\n      {\n        result = ecma_op_iterator_close (stack_top_p[-2]);\n      }\n      else\n      {\n        ecma_value_t iterator = stack_top_p[-3];\n        result = ecma_op_get_method_by_magic_id (iterator, LIT_MAGIC_STRING_RETURN);\n\n        if (!ECMA_IS_VALUE_ERROR (result) && !ecma_is_value_undefined (result))\n        {\n          if (!ecma_op_is_callable (result))\n          {\n            ecma_free_value (result);\n            result = ecma_raise_type_error (ECMA_ERR_MSG (\"Iterator 'return' is not callable\"));\n          }\n          else\n          {\n            ecma_object_t *return_obj_p = ecma_get_object_from_value (result);\n            result = ecma_op_function_call (return_obj_p, iterator, NULL, 0);\n            ecma_deref_object (return_obj_p);\n\n            if (context_type == VM_CONTEXT_FOR_AWAIT_OF && !ECMA_IS_VALUE_ERROR (result))\n            {\n              ecma_extended_object_t *async_generator_object_p = VM_GET_EXECUTABLE_OBJECT (frame_ctx_p);\n\n              result = ecma_promise_async_await (async_generator_object_p, result);\n\n              if (!ECMA_IS_VALUE_ERROR (result))\n              {\n                uint16_t extra_flags = (ECMA_EXECUTABLE_OBJECT_DO_AWAIT_OR_YIELD\n                                        | (ECMA_AWAIT_FOR_CLOSE << ECMA_AWAIT_STATE_SHIFT));\n                async_generator_object_p->u.cls.u2.executable_obj_flags |= extra_flags;\n\n                stack_top_p = vm_stack_context_abort (frame_ctx_p, stack_top_p);\n\n                VM_PLUS_EQUAL_U16 (frame_ctx_p->context_depth, PARSER_FINALLY_CONTEXT_STACK_ALLOCATION);\n                stack_top_p += PARSER_FINALLY_CONTEXT_STACK_ALLOCATION;\n\n                stack_top_p[-1] = VM_CREATE_CONTEXT ((uint32_t) finally_type, context_end);\n                if (finally_type == VM_CONTEXT_FINALLY_THROW)\n                {\n                  stack_top_p[-2] = exception;\n                }\n\n                frame_ctx_p->call_operation = VM_EXEC_RETURN;\n                frame_ctx_p->byte_code_p = vm_stack_resume_executable_object_with_context_end;\n                frame_ctx_p->stack_top_p = stack_top_p;\n                return VM_CONTEXT_FOUND_AWAIT;\n              }\n            }\n\n            if (!ECMA_IS_VALUE_ERROR (result))\n            {\n              bool is_object = ecma_is_value_object (result);\n\n              ecma_free_value (result);\n              result = ECMA_VALUE_UNDEFINED;\n\n              if (!is_object)\n              {\n                result = ecma_raise_type_error (ECMA_ERR_MSG (\"Iterator 'return' result is not object\"));\n              }\n            }\n          }\n        }\n      }\n\n      JERRY_ASSERT (ECMA_IS_VALUE_ERROR (result) || result == ECMA_VALUE_UNDEFINED);\n\n      if (ECMA_IS_VALUE_ERROR (result))\n      {\n        if (finally_type != VM_CONTEXT_FINALLY_THROW)\n        {\n          frame_ctx_p->stack_top_p = vm_stack_context_abort (frame_ctx_p, stack_top_p);\n          return VM_CONTEXT_FOUND_ERROR;\n        }\n\n        ecma_free_value (jcontext_take_exception ());\n        jcontext_raise_exception (exception);\n      }\n      else if (finally_type == VM_CONTEXT_FINALLY_THROW)\n      {\n        jcontext_raise_exception (exception);\n      }\n    }\n#endif /* JERRY_ESNEXT */\n\n    stack_top_p = vm_stack_context_abort (frame_ctx_p, stack_top_p);\n  }\n\n  frame_ctx_p->stack_top_p = stack_top_p;\n  return VM_CONTEXT_FOUND_EXPECTED;\n}",
        "begin_line": 219,
        "end_line": 465,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm.opfunc_call#770",
        "src_path": "jerry-core/vm/vm.c",
        "class_name": "jerry-core.vm.vm",
        "signature": "jerry-core.vm.vm.opfunc_call (vm_frame_ctx_t *frame_ctx_p) /**< frame context */",
        "snippet": "static void\nopfunc_call (vm_frame_ctx_t *frame_ctx_p) /**< frame context */\n{\n  const uint8_t *byte_code_p = frame_ctx_p->byte_code_p + 1;\n  uint8_t opcode = byte_code_p[-1];\n  uint32_t arguments_list_len;\n\n  if (opcode >= CBC_CALL0)\n  {\n    arguments_list_len = (unsigned int) ((opcode - CBC_CALL0) / 6);\n  }\n  else\n  {\n    arguments_list_len = *byte_code_p++;\n  }\n\n  bool is_call_prop = ((opcode - CBC_CALL) % 6) >= 3;\n\n  ecma_value_t *stack_top_p = frame_ctx_p->stack_top_p - arguments_list_len;\n  ecma_value_t this_value = is_call_prop ? stack_top_p[-3] : ECMA_VALUE_UNDEFINED;\n  ecma_value_t func_value = stack_top_p[-1];\n  ecma_value_t completion_value;\n\n  if (!ecma_is_value_object (func_value)\n      || !ecma_op_object_is_callable (ecma_get_object_from_value (func_value)))\n  {\n    completion_value = ecma_raise_type_error (ECMA_ERR_MSG (ecma_error_expected_a_function));\n  }\n  else\n  {\n    ecma_object_t *func_obj_p = ecma_get_object_from_value (func_value);\n\n    completion_value = ecma_op_function_call (func_obj_p,\n                                              this_value,\n                                              stack_top_p,\n                                              arguments_list_len);\n  }\n\n  JERRY_CONTEXT (status_flags) &= (uint32_t) ~ECMA_STATUS_DIRECT_EVAL;\n\n  /* Free registers. */\n  for (uint32_t i = 0; i < arguments_list_len; i++)\n  {\n    ecma_fast_free_value (stack_top_p[i]);\n  }\n\n  if (is_call_prop)\n  {\n    ecma_free_value (*(--stack_top_p));\n    ecma_free_value (*(--stack_top_p));\n  }\n\n  if (JERRY_UNLIKELY (ECMA_IS_VALUE_ERROR (completion_value)))\n  {\n#if JERRY_DEBUGGER\n    JERRY_CONTEXT (debugger_exception_byte_code_p) = frame_ctx_p->byte_code_p;\n#endif /* JERRY_DEBUGGER */\n    frame_ctx_p->byte_code_p = (uint8_t *) vm_error_byte_code_p;\n  }\n  else\n  {\n    frame_ctx_p->byte_code_p = byte_code_p;\n    ecma_free_value (*(--stack_top_p));\n    uint32_t opcode_data = vm_decode_table[opcode];\n\n    if (!(opcode_data & (VM_OC_PUT_STACK | VM_OC_PUT_BLOCK)))\n    {\n      ecma_fast_free_value (completion_value);\n    }\n    else if (opcode_data & VM_OC_PUT_STACK)\n    {\n      *stack_top_p++ = completion_value;\n    }\n    else\n    {\n      ecma_fast_free_value (VM_GET_REGISTER (frame_ctx_p, 0));\n      VM_GET_REGISTERS (frame_ctx_p)[0] = completion_value;\n    }\n  }\n\n  frame_ctx_p->stack_top_p = stack_top_p;\n}",
        "begin_line": 770,
        "end_line": 851,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm.opfunc_construct#858",
        "src_path": "jerry-core/vm/vm.c",
        "class_name": "jerry-core.vm.vm",
        "signature": "jerry-core.vm.vm.opfunc_construct (vm_frame_ctx_t *frame_ctx_p) /**< frame context */",
        "snippet": "static void\nopfunc_construct (vm_frame_ctx_t *frame_ctx_p) /**< frame context */\n{\n  const uint8_t *byte_code_p = frame_ctx_p->byte_code_p + 1;\n  uint8_t opcode = byte_code_p[-1];\n  unsigned int arguments_list_len;\n\n  if (opcode >= CBC_NEW0)\n  {\n    arguments_list_len = (unsigned int) (opcode - CBC_NEW0);\n  }\n  else\n  {\n    arguments_list_len = *byte_code_p++;\n  }\n\n  ecma_value_t *stack_top_p = frame_ctx_p->stack_top_p - arguments_list_len;\n  ecma_value_t constructor_value = stack_top_p[-1];\n  ecma_value_t completion_value;\n\n  const char *constructor_message_p = ecma_check_constructor (constructor_value);\n  if (constructor_message_p != ECMA_IS_VALID_CONSTRUCTOR)\n  {\n    completion_value = ecma_raise_type_error (constructor_message_p);\n  }\n  else\n  {\n    ecma_object_t *constructor_obj_p = ecma_get_object_from_value (constructor_value);\n\n    completion_value = ecma_op_function_construct (constructor_obj_p,\n                                                   constructor_obj_p,\n                                                   stack_top_p,\n                                                   arguments_list_len);\n  }\n\n  /* Free registers. */\n  for (uint32_t i = 0; i < arguments_list_len; i++)\n  {\n    ecma_fast_free_value (stack_top_p[i]);\n  }\n\n  if (JERRY_UNLIKELY (ECMA_IS_VALUE_ERROR (completion_value)))\n  {\n#if JERRY_DEBUGGER\n    JERRY_CONTEXT (debugger_exception_byte_code_p) = frame_ctx_p->byte_code_p;\n#endif /* JERRY_DEBUGGER */\n    frame_ctx_p->byte_code_p = (uint8_t *) vm_error_byte_code_p;\n  }\n  else\n  {\n    ecma_free_value (stack_top_p[-1]);\n    frame_ctx_p->byte_code_p = byte_code_p;\n    stack_top_p[-1] = completion_value;\n  }\n\n  frame_ctx_p->stack_top_p = stack_top_p;\n}",
        "begin_line": 858,
        "end_line": 914,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm.vm_construct_literal_object#449",
        "src_path": "jerry-core/vm/vm.c",
        "class_name": "jerry-core.vm.vm",
        "signature": "jerry-core.vm.vm.vm_construct_literal_object (vm_frame_ctx_t *frame_ctx_p, /**< frame context */                              ecma_value_t lit_value) /**< literal */",
        "snippet": "static ecma_value_t\nvm_construct_literal_object (vm_frame_ctx_t *frame_ctx_p, /**< frame context */\n                             ecma_value_t lit_value) /**< literal */\n{\n  ecma_compiled_code_t *bytecode_p;\n\n#if JERRY_SNAPSHOT_EXEC\n  if (JERRY_LIKELY (!(frame_ctx_p->shared_p->bytecode_header_p->status_flags & CBC_CODE_FLAGS_STATIC_FUNCTION)))\n  {\n#endif /* JERRY_SNAPSHOT_EXEC */\n    bytecode_p = ECMA_GET_INTERNAL_VALUE_POINTER (ecma_compiled_code_t,\n                                                  lit_value);\n#if JERRY_SNAPSHOT_EXEC\n  }\n  else\n  {\n    uint8_t *byte_p = ((uint8_t *) frame_ctx_p->shared_p->bytecode_header_p) + lit_value;\n    bytecode_p = (ecma_compiled_code_t *) byte_p;\n  }\n#endif /* JERRY_SNAPSHOT_EXEC */\n\n#if JERRY_BUILTIN_REGEXP\n  if (JERRY_UNLIKELY (!CBC_IS_FUNCTION (bytecode_p->status_flags)))\n  {\n    ecma_object_t *regexp_obj_p = ecma_op_regexp_alloc (NULL);\n\n    if (JERRY_UNLIKELY (regexp_obj_p == NULL))\n    {\n      return ECMA_VALUE_ERROR;\n    }\n\n    return ecma_op_create_regexp_from_bytecode (regexp_obj_p, (re_compiled_code_t *) bytecode_p);\n  }\n#else /* !JERRY_BUILTIN_REGEXP */\n  JERRY_ASSERT (CBC_IS_FUNCTION (bytecode_p->status_flags));\n#endif /* JERRY_BUILTIN_REGEXP */\n\n  ecma_object_t *func_obj_p;\n\n#if JERRY_ESNEXT\n  if (JERRY_UNLIKELY (CBC_FUNCTION_IS_ARROW (bytecode_p->status_flags)))\n  {\n    func_obj_p = ecma_op_create_arrow_function_object (frame_ctx_p->lex_env_p,\n                                                       bytecode_p,\n                                                       frame_ctx_p->this_binding);\n  }\n  else\n  {\n    func_obj_p = ecma_op_create_any_function_object (frame_ctx_p->lex_env_p, bytecode_p);\n  }\n#else /* !JERRY_ESNEXT */\n  func_obj_p = ecma_op_create_simple_function_object (frame_ctx_p->lex_env_p, bytecode_p);\n#endif /* JERRY_ESNEXT */\n\n  return ecma_make_object_value (func_obj_p);\n}",
        "begin_line": 449,
        "end_line": 504,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm.vm_op_get_value#57",
        "src_path": "jerry-core/vm/vm.c",
        "class_name": "jerry-core.vm.vm",
        "signature": "jerry-core.vm.vm.vm_op_get_value (ecma_value_t object, /**< base object */                  ecma_value_t property) /**< property name */",
        "snippet": "static ecma_value_t\nvm_op_get_value (ecma_value_t object, /**< base object */\n                 ecma_value_t property) /**< property name */\n{\n  if (ecma_is_value_object (object))\n  {\n    ecma_object_t *object_p = ecma_get_object_from_value (object);\n    ecma_string_t *property_name_p = NULL;\n\n    if (ecma_is_value_integer_number (property))\n    {\n      ecma_integer_value_t int_value = ecma_get_integer_from_value (property);\n\n      if (int_value >= 0 && int_value <= ECMA_DIRECT_STRING_MAX_IMM)\n      {\n        if (ecma_get_object_type (object_p) == ECMA_OBJECT_TYPE_ARRAY)\n        {\n          ecma_extended_object_t *ext_object_p = (ecma_extended_object_t *) object_p;\n\n          if (JERRY_LIKELY (ecma_op_array_is_fast_array (ext_object_p)\n                            && (uint32_t) int_value < ext_object_p->u.array.length))\n          {\n            ecma_value_t *values_p = ECMA_GET_NON_NULL_POINTER (ecma_value_t, object_p->u1.property_list_cp);\n\n            if (JERRY_LIKELY (!ecma_is_value_array_hole (values_p[int_value])))\n            {\n              return ecma_fast_copy_value (values_p[int_value]);\n            }\n          }\n        }\n\n        property_name_p = (ecma_string_t *) ECMA_CREATE_DIRECT_STRING (ECMA_DIRECT_STRING_UINT,\n                                                                       (uintptr_t) int_value);\n      }\n    }\n    else if (ecma_is_value_string (property))\n    {\n      property_name_p = ecma_get_string_from_value (property);\n    }\n\n#if JERRY_ESNEXT\n    if (ecma_is_value_symbol (property))\n    {\n      property_name_p = ecma_get_symbol_from_value (property);\n    }\n#endif /* JERRY_ESNEXT */\n\n    if (property_name_p != NULL)\n    {\n#if JERRY_LCACHE\n      ecma_property_t *property_p = ecma_lcache_lookup (object_p, property_name_p);\n\n      if (property_p != NULL && (*property_p & ECMA_PROPERTY_FLAG_DATA))\n      {\n        JERRY_ASSERT (!ECMA_PROPERTY_IS_INTERNAL (*property_p));\n        return ecma_fast_copy_value (ECMA_PROPERTY_VALUE_PTR (property_p)->value);\n      }\n#endif /* JERRY_LCACHE */\n\n      /* There is no need to free the name. */\n      return ecma_op_object_get (object_p, property_name_p);\n    }\n  }\n\n  if (JERRY_UNLIKELY (ecma_is_value_undefined (object) || ecma_is_value_null (object)))\n  {\n#if JERRY_ERROR_MESSAGES\n    ecma_value_t error_value = ecma_raise_standard_error_with_format (JERRY_ERROR_TYPE,\n                                                                      \"Cannot read property '%' of %\",\n                                                                      property,\n                                                                      object);\n#else /* !JERRY_ERROR_MESSAGES */\n    ecma_value_t error_value = ecma_raise_type_error (NULL);\n#endif /* JERRY_ERROR_MESSAGES */\n    return error_value;\n  }\n\n  ecma_string_t *property_name_p = ecma_op_to_property_key (property);\n\n  if (property_name_p == NULL)\n  {\n    return ECMA_VALUE_ERROR;\n  }\n\n  ecma_value_t get_value_result = ecma_op_get_value_object_base (object, property_name_p);\n\n  ecma_deref_ecma_string (property_name_p);\n  return get_value_result;\n}",
        "begin_line": 57,
        "end_line": 145,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm.vm_run#5348",
        "src_path": "jerry-core/vm/vm.c",
        "class_name": "jerry-core.vm.vm",
        "signature": "jerry-core.vm.vm.vm_run (vm_frame_ctx_shared_t *shared_p, /**< shared data */         ecma_value_t this_binding_value, /**< value of 'ThisBinding' */         ecma_object_t *lex_env_p) /**< lexical environment to use */",
        "snippet": "ecma_value_t\nvm_run (vm_frame_ctx_shared_t *shared_p, /**< shared data */\n        ecma_value_t this_binding_value, /**< value of 'ThisBinding' */\n        ecma_object_t *lex_env_p) /**< lexical environment to use */\n{\n  const ecma_compiled_code_t *bytecode_header_p = shared_p->bytecode_header_p;\n  vm_frame_ctx_t *frame_ctx_p;\n  size_t frame_size;\n\n  if (bytecode_header_p->status_flags & CBC_CODE_FLAGS_UINT16_ARGUMENTS)\n  {\n    cbc_uint16_arguments_t *args_p = (cbc_uint16_arguments_t *) bytecode_header_p;\n    frame_size = (size_t) (args_p->register_end + args_p->stack_limit);\n  }\n  else\n  {\n    cbc_uint8_arguments_t *args_p = (cbc_uint8_arguments_t *) bytecode_header_p;\n    frame_size = (size_t) (args_p->register_end + args_p->stack_limit);\n  }\n\n  JERRY_VLA (ecma_value_t, stack, frame_size + (sizeof (vm_frame_ctx_t) / sizeof (ecma_value_t)));\n\n  frame_ctx_p = (vm_frame_ctx_t *) stack;\n\n  frame_ctx_p->shared_p = shared_p;\n  frame_ctx_p->lex_env_p = lex_env_p;\n  frame_ctx_p->this_binding = this_binding_value;\n\n  vm_init_exec (frame_ctx_p);\n  return vm_execute (frame_ctx_p);\n}",
        "begin_line": 5348,
        "end_line": 5378,
        "is_bug": false
    },
    {
        "name": "jerry-core.vm.vm.vm_run_global#276",
        "src_path": "jerry-core/vm/vm.c",
        "class_name": "jerry-core.vm.vm",
        "signature": "jerry-core.vm.vm.vm_run_global (const ecma_compiled_code_t *bytecode_p, /**< pointer to bytecode to run */                ecma_object_t *function_object_p) /**< function object if available */",
        "snippet": "ecma_value_t\nvm_run_global (const ecma_compiled_code_t *bytecode_p, /**< pointer to bytecode to run */\n               ecma_object_t *function_object_p) /**< function object if available */\n{\n#if JERRY_BUILTIN_REALMS\n  ecma_object_t *global_obj_p = (ecma_object_t *) ecma_op_function_get_realm (bytecode_p);\n#else /* !JERRY_BUILTIN_REALMS */\n  ecma_object_t *global_obj_p = ecma_builtin_get_global ();\n#endif /* JERRY_BUILTIN_REALMS */\n\n#if JERRY_ESNEXT\n  if (bytecode_p->status_flags & CBC_CODE_FLAGS_LEXICAL_BLOCK_NEEDED)\n  {\n    ecma_create_global_lexical_block (global_obj_p);\n  }\n#endif /* JERRY_ESNEXT */\n\n  ecma_object_t *const global_scope_p = ecma_get_global_scope (global_obj_p);\n\n  vm_frame_ctx_shared_t shared;\n  shared.bytecode_header_p = bytecode_p;\n  shared.function_object_p = function_object_p;\n  shared.status_flags = 0;\n\n#if JERRY_BUILTIN_REALMS\n  ecma_value_t this_binding = ((ecma_global_object_t *) global_obj_p)->this_binding;\n\n  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);\n  JERRY_CONTEXT (global_object_p) = (ecma_global_object_t *) global_obj_p;\n#else /* !JERRY_BUILTIN_REALMS */\n  ecma_value_t this_binding = ecma_make_object_value (global_obj_p);\n#endif /* JERRY_BUILTIN_REALMS */\n\n  ecma_value_t result = vm_run (&shared, this_binding, global_scope_p);\n\n#if JERRY_BUILTIN_REALMS\n  JERRY_CONTEXT (global_object_p) = saved_global_object_p;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  return result;\n}",
        "begin_line": 276,
        "end_line": 316,
        "is_bug": false
    }
]